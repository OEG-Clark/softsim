{"home.repos.pwc.inspect_result.facebookresearch_habitat-api.None.setup.OptionedCommand.initialize_options": [[56, 59], ["super().initialize_options"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.None.setup.OptionedCommand.initialize_options"], ["def", "initialize_options", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "initialize_options", "(", ")", "\n", "self", ".", "all", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.None.setup.OptionedCommand.run": [[60, 70], ["super().run", "DEFAULT_EXCLUSION.extend", "setuptools.find_packages"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.None.setup.OptionedCommand.run"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "all", ":", "# install core only", "\n", "            ", "DEFAULT_EXCLUSION", ".", "extend", "(", "BASELINE_PATH", ")", "\n", "self", ".", "distribution", ".", "packages", "=", "setuptools", ".", "find_packages", "(", "\n", "exclude", "=", "DEFAULT_EXCLUSION", "\n", ")", "\n", "# self.distribution accesses arguments of setup() in main()", "\n", "", "else", ":", "# install all except test and examples", "\n", "            ", "self", ".", "distribution", ".", "install_requires", "=", "FULL_REQUIREMENTS", "\n", "", "super", "(", ")", ".", "run", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_rearrange_task.check_json_serialization": [[33, 51], ["time.time", "dataset.to_json", "habitat.core.logging.logger.info", "habitat.datasets.rearrange.rearrange_dataset.RearrangeDatasetV0", "habitat.datasets.rearrange.rearrange_dataset.RearrangeDatasetV0.from_json", "isinstance", "len", "len", "json.loads", "json.loads", "habitat.datasets.rearrange.rearrange_dataset.RearrangeDatasetV0.to_json", "time.time"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.to_json", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.from_json", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.to_json"], ["def", "check_json_serialization", "(", "dataset", ":", "habitat", ".", "Dataset", ")", ":", "\n", "    ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "json_str", "=", "dataset", ".", "to_json", "(", ")", "\n", "logger", ".", "info", "(", "\n", "\"JSON conversion finished. {} sec\"", ".", "format", "(", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", ")", "\n", "decoded_dataset", "=", "RearrangeDatasetV0", "(", ")", "\n", "decoded_dataset", ".", "from_json", "(", "json_str", ")", "\n", "decoded_dataset", ".", "config", "=", "dataset", ".", "config", "\n", "assert", "len", "(", "decoded_dataset", ".", "episodes", ")", "==", "len", "(", "dataset", ".", "episodes", ")", "\n", "episode", "=", "decoded_dataset", ".", "episodes", "[", "0", "]", "\n", "assert", "isinstance", "(", "episode", ",", "Episode", ")", "\n", "\n", "# The strings won't match exactly as dictionaries don't have an order for the keys", "\n", "# Thus we need to parse the json strings and compare the serialized forms", "\n", "assert", "json", ".", "loads", "(", "decoded_dataset", ".", "to_json", "(", ")", ")", "==", "json", ".", "loads", "(", "\n", "json_str", "\n", ")", ",", "\"JSON dataset encoding/decoding isn't consistent\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_rearrange_task.test_rearrange_dataset": [[53, 66], ["habitat.make_dataset", "habitat.make_dataset", "habitat.make_dataset", "habitat.make_dataset", "habitat.make_dataset", "test_rearrange_task.check_json_serialization", "habitat.config.default.get_config", "habitat.datasets.rearrange.rearrange_dataset.RearrangeDatasetV0.check_config_paths_exist", "pytest.skip"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.registration.make_dataset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.registration.make_dataset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.registration.make_dataset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.registration.make_dataset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.registration.make_dataset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_rearrange_task.check_json_serialization", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pointnav.pointnav_dataset.PointNavDatasetV1.check_config_paths_exist"], ["", "def", "test_rearrange_dataset", "(", ")", ":", "\n", "    ", "dataset_config", "=", "get_config", "(", "CFG_TEST", ")", ".", "DATASET", "\n", "if", "not", "RearrangeDatasetV0", ".", "check_config_paths_exist", "(", "dataset_config", ")", ":", "\n", "        ", "pytest", ".", "skip", "(", "\n", "\"Please download ReplicaCAD RearrangeDataset Dataset to data folder.\"", "\n", ")", "\n", "\n", "", "dataset", "=", "habitat", ".", "make_dataset", "(", "\n", "id_dataset", "=", "dataset_config", ".", "TYPE", ",", "config", "=", "dataset_config", "\n", ")", "\n", "assert", "dataset", "\n", "dataset", ".", "episodes", "=", "dataset", ".", "episodes", "[", "0", ":", "EPISODES_LIMIT", "]", "\n", "check_json_serialization", "(", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_rearrange_task.test_rearrange_baseline_envs": [[68, 93], ["pytest.mark.parametrize", "habitat_baselines.config.default.get_config", "habitat.core.environments.get_env_class", "habitat.utils.env_utils.make_env_fn", "habitat.utils.env_utils.make_env_fn", "habitat.utils.env_utils.make_env_fn", "habitat.utils.env_utils.make_env_fn", "habitat.utils.env_utils.make_env_fn", "list", "range", "glob.glob", "habitat.utils.env_utils.make_env_fn.reset", "habitat.utils.env_utils.make_env_fn.action_space.sample", "habitat.utils.env_utils.make_env_fn.step"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.environments.get_env_class", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.env_utils.make_env_fn", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.env_utils.make_env_fn", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.env_utils.make_env_fn", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.env_utils.make_env_fn", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.env_utils.make_env_fn", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.sample", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"test_cfg_path\"", ",", "\n", "list", "(", "\n", "glob", "(", "\"habitat_baselines/config/rearrange/**/*.yaml\"", ",", "recursive", "=", "True", ")", ",", "\n", ")", ",", "\n", ")", "\n", "def", "test_rearrange_baseline_envs", "(", "test_cfg_path", ")", ":", "\n", "    ", "\"\"\"\n    Test the Habitat Baseline environments\n    \"\"\"", "\n", "config", "=", "baselines_get_config", "(", "test_cfg_path", ")", "\n", "\n", "env_class", "=", "get_env_class", "(", "config", ".", "ENV_NAME", ")", "\n", "\n", "env", "=", "habitat", ".", "utils", ".", "env_utils", ".", "make_env_fn", "(", "\n", "env_class", "=", "env_class", ",", "config", "=", "config", "\n", ")", "\n", "\n", "with", "env", ":", "\n", "        ", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "            ", "env", ".", "reset", "(", ")", "\n", "done", "=", "False", "\n", "while", "not", "done", ":", "\n", "                ", "action", "=", "env", ".", "action_space", ".", "sample", "(", ")", "\n", "_", ",", "_", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action", "=", "action", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_rearrange_task.test_rearrange_tasks": [[95, 114], ["pytest.mark.parametrize", "habitat.config.default.get_config", "habitat.Env", "habitat.Env", "habitat.Env", "habitat.Env", "habitat.Env", "list", "os.isfile", "range", "glob.glob", "habitat.Env.reset"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset"], ["", "", "", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"test_cfg_path\"", ",", "\n", "list", "(", "\n", "glob", "(", "\"configs/tasks/rearrange/*\"", ")", ",", "\n", ")", ",", "\n", ")", "\n", "def", "test_rearrange_tasks", "(", "test_cfg_path", ")", ":", "\n", "    ", "\"\"\"\n    Test the underlying Habitat Tasks\n    \"\"\"", "\n", "if", "not", "osp", ".", "isfile", "(", "test_cfg_path", ")", ":", "\n", "        ", "return", "\n", "\n", "", "config", "=", "get_config", "(", "test_cfg_path", ")", "\n", "env", "=", "habitat", ".", "Env", "(", "config", "=", "config", ")", "\n", "\n", "with", "env", ":", "\n", "        ", "for", "_", "in", "range", "(", "5", ")", ":", "\n", "            ", "env", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_rearrange_task.test_composite_tasks": [[116, 149], ["pytest.mark.parametrize", "habitat.config.default.get_config", "habitat.Env", "habitat.Env", "habitat.Env", "habitat.Env", "habitat.Env", "os.join", "len", "range", "list", "os.isfile", "isinstance", "open", "yaml.safe_load", "habitat.Env.reset", "habitat.Env.task.jump_to_node", "habitat.Env.step", "habitat.Env.reset", "glob.glob", "habitat.Env.action_space.sample"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask.jump_to_node", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.sample"], ["", "", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"test_cfg_path\"", ",", "\n", "list", "(", "\n", "glob", "(", "\"configs/tasks/rearrange/*\"", ")", ",", "\n", ")", ",", "\n", ")", "\n", "def", "test_composite_tasks", "(", "test_cfg_path", ")", ":", "\n", "    ", "\"\"\"\n    Test for the Habitat composite tasks.\n    \"\"\"", "\n", "if", "not", "osp", ".", "isfile", "(", "test_cfg_path", ")", ":", "\n", "        ", "return", "\n", "\n", "", "config", "=", "get_config", "(", "test_cfg_path", ")", "\n", "if", "\"TASK_SPEC\"", "not", "in", "config", ".", "TASK", ":", "\n", "        ", "return", "\n", "\n", "", "env", "=", "habitat", ".", "Env", "(", "config", "=", "config", ")", "\n", "if", "not", "isinstance", "(", "env", ".", "task", ",", "CompositeTask", ")", ":", "\n", "        ", "return", "\n", "\n", "", "pddl_path", "=", "osp", ".", "join", "(", "\n", "config", ".", "TASK", ".", "TASK_SPEC_BASE_PATH", ",", "config", ".", "TASK", ".", "TASK_SPEC", "+", "\".yaml\"", "\n", ")", "\n", "with", "open", "(", "pddl_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "domain", "=", "yaml", ".", "safe_load", "(", "f", ")", "\n", "", "n_stages", "=", "len", "(", "domain", "[", "\"solution\"", "]", ")", "\n", "\n", "for", "task_idx", "in", "range", "(", "n_stages", ")", ":", "\n", "        ", "env", ".", "reset", "(", ")", "\n", "env", ".", "task", ".", "jump_to_node", "(", "task_idx", ",", "env", ".", "current_episode", ")", "\n", "env", ".", "step", "(", "env", ".", "action_space", ".", "sample", "(", ")", ")", "\n", "env", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_rearrange_task.test_rearrange_episode_generator": [[152, 172], ["pytest.mark.parametrize", "pytest.mark.parametrize", "pytest.mark.parametrize", "habitat.get_config_defaults", "rr_gen.get_config_defaults.merge_from_file", "habitat.datasets.rearrange.rearrange_dataset.RearrangeDatasetV0", "test_rearrange_task.check_json_serialization", "habitat.core.logging.logger.info", "habitat.RearrangeEpisodeGenerator", "time.time", "ep_gen.generate_episodes", "len", "time.time"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_generator.get_config_defaults", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_rearrange_task.check_json_serialization", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_generator.RearrangeEpisodeGenerator.generate_episodes"], ["", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"debug_visualization\"", ",", "[", "False", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"num_episodes\"", ",", "[", "2", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"config\"", ",", "[", "GEN_TEST_CFG", "]", ")", "\n", "def", "test_rearrange_episode_generator", "(", "\n", "debug_visualization", ",", "num_episodes", ",", "config", "\n", ")", ":", "\n", "    ", "cfg", "=", "rr_gen", ".", "get_config_defaults", "(", ")", "\n", "cfg", ".", "merge_from_file", "(", "config", ")", "\n", "dataset", "=", "RearrangeDatasetV0", "(", ")", "\n", "with", "rr_gen", ".", "RearrangeEpisodeGenerator", "(", "\n", "cfg", "=", "cfg", ",", "debug_visualization", "=", "debug_visualization", "\n", ")", "as", "ep_gen", ":", "\n", "        ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "dataset", ".", "episodes", "+=", "ep_gen", ".", "generate_episodes", "(", "num_episodes", ")", "\n", "\n", "# test serialization of freshly generated dataset", "\n", "", "check_json_serialization", "(", "dataset", ")", "\n", "\n", "logger", ".", "info", "(", "\n", "f\"successful_ep = {len(dataset.episodes)} generated in {time.time()-start_time} seconds.\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_habitat_env.DummyRLEnv.__init__": [[26, 29], ["habitat.RLEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "dataset", "=", "None", ",", "env_ind", "=", "0", ")", ":", "\n", "        ", "super", "(", "DummyRLEnv", ",", "self", ")", ".", "__init__", "(", "config", ",", "dataset", ")", "\n", "self", ".", "_env_ind", "=", "env_ind", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_habitat_env.DummyRLEnv.get_reward_range": [[30, 32], ["None"], "methods", ["None"], ["", "def", "get_reward_range", "(", "self", ")", ":", "\n", "        ", "return", "-", "1.0", ",", "1.0", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_habitat_env.DummyRLEnv.get_reward": [[33, 35], ["None"], "methods", ["None"], ["", "def", "get_reward", "(", "self", ",", "observations", ")", ":", "\n", "        ", "return", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_habitat_env.DummyRLEnv.get_done": [[36, 41], ["None"], "methods", ["None"], ["", "def", "get_done", "(", "self", ",", "observations", ")", ":", "\n", "        ", "done", "=", "False", "\n", "if", "self", ".", "_env", ".", "episode_over", ":", "\n", "            ", "done", "=", "True", "\n", "", "return", "done", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_habitat_env.DummyRLEnv.get_info": [[42, 44], ["None"], "methods", ["None"], ["", "def", "get_info", "(", "self", ",", "observations", ")", ":", "\n", "        ", "return", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_habitat_env.DummyRLEnv.get_env_ind": [[45, 47], ["None"], "methods", ["None"], ["", "def", "get_env_ind", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_env_ind", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_habitat_env.DummyRLEnv.set_env_ind": [[48, 50], ["None"], "methods", ["None"], ["", "def", "set_env_ind", "(", "self", ",", "new_env_ind", ")", ":", "\n", "        ", "self", ".", "_env_ind", "=", "new_env_ind", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_habitat_env._load_test_data": [[52, 74], ["range", "habitat.config.default.get_config", "datasets.append", "habitat.config.default.get_config.defrost", "habitat.config.default.get_config.freeze", "configs.append", "habitat.datasets.pointnav.pointnav_dataset.PointNavDatasetV1.check_config_paths_exist", "pytest.skip", "habitat.make_dataset", "os.path.exists", "pytest.skip"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pointnav.pointnav_dataset.PointNavDatasetV1.check_config_paths_exist", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.registration.make_dataset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.exists"], ["", "", "def", "_load_test_data", "(", ")", ":", "\n", "    ", "configs", "=", "[", "]", "\n", "datasets", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "NUM_ENVS", ")", ":", "\n", "        ", "config", "=", "get_config", "(", "CFG_TEST", ")", "\n", "if", "not", "PointNavDatasetV1", ".", "check_config_paths_exist", "(", "config", ".", "DATASET", ")", ":", "\n", "            ", "pytest", ".", "skip", "(", "\"Please download Habitat test data to data folder.\"", ")", "\n", "\n", "", "datasets", ".", "append", "(", "\n", "habitat", ".", "make_dataset", "(", "\n", "id_dataset", "=", "config", ".", "DATASET", ".", "TYPE", ",", "config", "=", "config", ".", "DATASET", "\n", ")", "\n", ")", "\n", "\n", "config", ".", "defrost", "(", ")", "\n", "config", ".", "SIMULATOR", ".", "SCENE", "=", "datasets", "[", "-", "1", "]", ".", "episodes", "[", "0", "]", ".", "scene_id", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "config", ".", "SIMULATOR", ".", "SCENE", ")", ":", "\n", "            ", "pytest", ".", "skip", "(", "\"Please download Habitat test data to data folder.\"", ")", "\n", "", "config", ".", "freeze", "(", ")", "\n", "configs", ".", "append", "(", "config", ")", "\n", "\n", "", "return", "configs", ",", "datasets", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_habitat_env._vec_env_test_fn": [[76, 95], ["len", "tuple", "cfg.defrost", "cfg.freeze", "zip", "habitat.VectorEnv", "envs.reset", "range", "range", "envs.step", "habitat.utils.test_utils.sample_non_stop_action", "len"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.test_utils.sample_non_stop_action"], ["", "def", "_vec_env_test_fn", "(", "configs", ",", "datasets", ",", "multiprocessing_start_method", ",", "gpu2gpu", ")", ":", "\n", "    ", "num_envs", "=", "len", "(", "configs", ")", "\n", "for", "cfg", "in", "configs", ":", "\n", "        ", "cfg", ".", "defrost", "(", ")", "\n", "cfg", ".", "SIMULATOR", ".", "HABITAT_SIM_V0", ".", "GPU_GPU", "=", "gpu2gpu", "\n", "cfg", ".", "freeze", "(", ")", "\n", "\n", "", "env_fn_args", "=", "tuple", "(", "zip", "(", "configs", ",", "datasets", ",", "range", "(", "num_envs", ")", ")", ")", "\n", "with", "habitat", ".", "VectorEnv", "(", "\n", "env_fn_args", "=", "env_fn_args", ",", "\n", "multiprocessing_start_method", "=", "multiprocessing_start_method", ",", "\n", ")", "as", "envs", ":", "\n", "        ", "envs", ".", "reset", "(", ")", "\n", "\n", "for", "_", "in", "range", "(", "2", "*", "configs", "[", "0", "]", ".", "ENVIRONMENT", ".", "MAX_EPISODE_STEPS", ")", ":", "\n", "            ", "observations", "=", "envs", ".", "step", "(", "\n", "sample_non_stop_action", "(", "envs", ".", "action_spaces", "[", "0", "]", ",", "num_envs", ")", "\n", ")", "\n", "assert", "len", "(", "observations", ")", "==", "num_envs", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_habitat_env.test_vectorized_envs": [[97, 125], ["pytest.mark.parametrize", "test_habitat_env._load_test_data", "itertools.product", "pytest.skip", "multiprocessing.get_context", "mp.get_context.Process", "mp_ctx.Process.start", "mp_ctx.Process.join", "test_habitat_env._vec_env_test_fn", "pytest.skip"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_habitat_env._load_test_data", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_habitat_env._vec_env_test_fn"], ["", "", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"multiprocessing_start_method,gpu2gpu\"", ",", "\n", "itertools", ".", "product", "(", "[", "\"forkserver\"", ",", "\"spawn\"", ",", "\"fork\"", "]", ",", "[", "True", ",", "False", "]", ")", ",", "\n", ")", "\n", "def", "test_vectorized_envs", "(", "multiprocessing_start_method", ",", "gpu2gpu", ")", ":", "\n", "    ", "import", "habitat_sim", "\n", "\n", "if", "gpu2gpu", "and", "not", "habitat_sim", ".", "cuda_enabled", ":", "\n", "        ", "pytest", ".", "skip", "(", "\"GPU-GPU requires CUDA\"", ")", "\n", "\n", "", "configs", ",", "datasets", "=", "_load_test_data", "(", ")", "\n", "if", "multiprocessing_start_method", "==", "\"fork\"", ":", "\n", "        ", "if", "gpu2gpu", ":", "\n", "            ", "pytest", ".", "skip", "(", "\"Fork does not support gpu2gpu\"", ")", "\n", "\n", "# 'fork' works in a process that has yet to use the GPU", "\n", "# this test uses spawns a new python instance, which allows us to fork", "\n", "", "mp_ctx", "=", "mp", ".", "get_context", "(", "\"spawn\"", ")", "\n", "p", "=", "mp_ctx", ".", "Process", "(", "\n", "target", "=", "_vec_env_test_fn", ",", "\n", "args", "=", "(", "configs", ",", "datasets", ",", "multiprocessing_start_method", ",", "gpu2gpu", ")", ",", "\n", ")", "\n", "p", ".", "start", "(", ")", "\n", "p", ".", "join", "(", ")", "\n", "assert", "p", ".", "exitcode", "==", "0", "\n", "", "else", ":", "\n", "        ", "_vec_env_test_fn", "(", "\n", "configs", ",", "datasets", ",", "multiprocessing_start_method", ",", "gpu2gpu", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_habitat_env.test_with_scope": [[128, 138], ["test_habitat_env._load_test_data", "len", "tuple", "zip", "habitat.VectorEnv", "envs.reset", "range"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_habitat_env._load_test_data", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset"], ["", "", "def", "test_with_scope", "(", ")", ":", "\n", "    ", "configs", ",", "datasets", "=", "_load_test_data", "(", ")", "\n", "num_envs", "=", "len", "(", "configs", ")", "\n", "env_fn_args", "=", "tuple", "(", "zip", "(", "configs", ",", "datasets", ",", "range", "(", "num_envs", ")", ")", ")", "\n", "with", "habitat", ".", "VectorEnv", "(", "\n", "env_fn_args", "=", "env_fn_args", ",", "multiprocessing_start_method", "=", "\"forkserver\"", "\n", ")", "as", "envs", ":", "\n", "        ", "envs", ".", "reset", "(", ")", "\n", "\n", "", "assert", "envs", ".", "_is_closed", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_habitat_env.test_number_of_episodes": [[140, 148], ["test_habitat_env._load_test_data", "len", "tuple", "zip", "habitat.VectorEnv", "range"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_habitat_env._load_test_data"], ["", "def", "test_number_of_episodes", "(", ")", ":", "\n", "    ", "configs", ",", "datasets", "=", "_load_test_data", "(", ")", "\n", "num_envs", "=", "len", "(", "configs", ")", "\n", "env_fn_args", "=", "tuple", "(", "zip", "(", "configs", ",", "datasets", ",", "range", "(", "num_envs", ")", ")", ")", "\n", "with", "habitat", ".", "VectorEnv", "(", "\n", "env_fn_args", "=", "env_fn_args", ",", "multiprocessing_start_method", "=", "\"forkserver\"", "\n", ")", "as", "envs", ":", "\n", "        ", "assert", "envs", ".", "number_of_episodes", "==", "[", "10000", ",", "10000", ",", "10000", ",", "10000", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_habitat_env.test_threaded_vectorized_env": [[150, 162], ["test_habitat_env._load_test_data", "len", "tuple", "zip", "habitat.ThreadedVectorEnv", "envs.reset", "range", "range", "envs.step", "habitat.utils.test_utils.sample_non_stop_action", "len"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_habitat_env._load_test_data", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.test_utils.sample_non_stop_action"], ["", "", "def", "test_threaded_vectorized_env", "(", ")", ":", "\n", "    ", "configs", ",", "datasets", "=", "_load_test_data", "(", ")", "\n", "num_envs", "=", "len", "(", "configs", ")", "\n", "env_fn_args", "=", "tuple", "(", "zip", "(", "configs", ",", "datasets", ",", "range", "(", "num_envs", ")", ")", ")", "\n", "with", "habitat", ".", "ThreadedVectorEnv", "(", "env_fn_args", "=", "env_fn_args", ")", "as", "envs", ":", "\n", "        ", "envs", ".", "reset", "(", ")", "\n", "\n", "for", "_", "in", "range", "(", "2", "*", "configs", "[", "0", "]", ".", "ENVIRONMENT", ".", "MAX_EPISODE_STEPS", ")", ":", "\n", "            ", "observations", "=", "envs", ".", "step", "(", "\n", "sample_non_stop_action", "(", "envs", ".", "action_spaces", "[", "0", "]", ",", "num_envs", ")", "\n", ")", "\n", "assert", "len", "(", "observations", ")", "==", "num_envs", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_habitat_env.test_env": [[164, 214], ["pytest.mark.parametrize", "habitat.config.default.get_config", "habitat.config.default.get_config.defrost", "habitat.config.default.get_config.freeze", "pytest.skip", "os.path.exists", "pytest.skip", "habitat.Env", "env.reset", "range", "env.reset", "env.step", "habitat.tasks.nav.nav.NavigationEpisode", "env.step", "habitat.utils.test_utils.sample_non_stop_action", "habitat.tasks.nav.nav.NavigationGoal"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.exists", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.test_utils.sample_non_stop_action"], ["", "", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"gpu2gpu\"", ",", "[", "False", ",", "True", "]", ")", "\n", "def", "test_env", "(", "gpu2gpu", ")", ":", "\n", "    ", "import", "habitat_sim", "\n", "\n", "if", "gpu2gpu", "and", "not", "habitat_sim", ".", "cuda_enabled", ":", "\n", "        ", "pytest", ".", "skip", "(", "\"GPU-GPU requires CUDA\"", ")", "\n", "\n", "", "config", "=", "get_config", "(", "CFG_TEST", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "config", ".", "SIMULATOR", ".", "SCENE", ")", ":", "\n", "        ", "pytest", ".", "skip", "(", "\"Please download Habitat test data to data folder.\"", ")", "\n", "\n", "", "config", ".", "defrost", "(", ")", "\n", "config", ".", "SIMULATOR", ".", "HABITAT_SIM_V0", ".", "GPU_GPU", "=", "gpu2gpu", "\n", "config", ".", "freeze", "(", ")", "\n", "with", "habitat", ".", "Env", "(", "config", "=", "config", ",", "dataset", "=", "None", ")", "as", "env", ":", "\n", "        ", "env", ".", "episodes", "=", "[", "\n", "NavigationEpisode", "(", "\n", "episode_id", "=", "\"0\"", ",", "\n", "scene_id", "=", "config", ".", "SIMULATOR", ".", "SCENE", ",", "\n", "start_position", "=", "[", "-", "3.0133917", ",", "0.04623024", ",", "7.3064547", "]", ",", "\n", "start_rotation", "=", "[", "0", ",", "0.163276", ",", "0", ",", "0.98658", "]", ",", "\n", "goals", "=", "[", "\n", "NavigationGoal", "(", "\n", "position", "=", "[", "\n", "-", "3.0133917", "+", "0.01", ",", "\n", "0.04623024", ",", "\n", "7.3064547", "+", "0.01", ",", "\n", "]", "\n", ")", "\n", "]", ",", "\n", "info", "=", "{", "\"geodesic_distance\"", ":", "0.001", "}", ",", "\n", ")", "\n", "]", "\n", "env", ".", "reset", "(", ")", "\n", "\n", "for", "_", "in", "range", "(", "config", ".", "ENVIRONMENT", ".", "MAX_EPISODE_STEPS", ")", ":", "\n", "            ", "env", ".", "step", "(", "sample_non_stop_action", "(", "env", ".", "action_space", ")", ")", "\n", "\n", "# check for steps limit on environment", "\n", "", "assert", "env", ".", "episode_over", "is", "True", ",", "(", "\n", "\"episode should be over after \"", "\"max_episode_steps\"", "\n", ")", "\n", "\n", "env", ".", "reset", "(", ")", "\n", "\n", "env", ".", "step", "(", "action", "=", "{", "\"action\"", ":", "StopAction", ".", "name", "}", ")", "\n", "# check for STOP action", "\n", "assert", "(", "\n", "env", ".", "episode_over", "is", "True", "\n", ")", ",", "\"episode should be over after STOP action\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_habitat_env.make_rl_env": [[216, 226], ["test_habitat_env.DummyRLEnv", "DummyRLEnv.seed"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.seed"], ["", "", "def", "make_rl_env", "(", "config", ",", "dataset", ",", "rank", ":", "int", "=", "0", ")", ":", "\n", "    ", "r\"\"\"Constructor for default habitat Env.\n    :param config: configurations for environment\n    :param dataset: dataset for environment\n    :param rank: rank for setting seeds for environment\n    :return: constructed habitat Env\n    \"\"\"", "\n", "env", "=", "DummyRLEnv", "(", "config", "=", "config", ",", "dataset", "=", "dataset", ")", "\n", "env", ".", "seed", "(", "config", ".", "SEED", "+", "rank", ")", "\n", "return", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_habitat_env.test_rl_vectorized_envs": [[228, 275], ["pytest.mark.parametrize", "test_habitat_env._load_test_data", "len", "tuple", "pytest.skip", "config.defrost", "config.freeze", "zip", "habitat.VectorEnv", "envs.reset", "range", "range", "envs.step", "envs.render", "int", "int", "print", "habitat.utils.test_utils.sample_non_stop_action", "list", "len", "len", "len", "len", "numpy.ceil", "numpy.ceil", "all", "zip", "numpy.sqrt", "float"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_habitat_env._load_test_data", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.render", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.test_utils.sample_non_stop_action"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"gpu2gpu\"", ",", "[", "False", ",", "True", "]", ")", "\n", "def", "test_rl_vectorized_envs", "(", "gpu2gpu", ")", ":", "\n", "    ", "import", "habitat_sim", "\n", "\n", "if", "gpu2gpu", "and", "not", "habitat_sim", ".", "cuda_enabled", ":", "\n", "        ", "pytest", ".", "skip", "(", "\"GPU-GPU requires CUDA\"", ")", "\n", "\n", "", "configs", ",", "datasets", "=", "_load_test_data", "(", ")", "\n", "for", "config", "in", "configs", ":", "\n", "        ", "config", ".", "defrost", "(", ")", "\n", "config", ".", "SIMULATOR", ".", "HABITAT_SIM_V0", ".", "GPU_GPU", "=", "gpu2gpu", "\n", "config", ".", "freeze", "(", ")", "\n", "\n", "", "num_envs", "=", "len", "(", "configs", ")", "\n", "env_fn_args", "=", "tuple", "(", "zip", "(", "configs", ",", "datasets", ",", "range", "(", "num_envs", ")", ")", ")", "\n", "with", "habitat", ".", "VectorEnv", "(", "\n", "make_env_fn", "=", "make_rl_env", ",", "env_fn_args", "=", "env_fn_args", "\n", ")", "as", "envs", ":", "\n", "        ", "envs", ".", "reset", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "2", "*", "configs", "[", "0", "]", ".", "ENVIRONMENT", ".", "MAX_EPISODE_STEPS", ")", ":", "\n", "            ", "outputs", "=", "envs", ".", "step", "(", "\n", "sample_non_stop_action", "(", "envs", ".", "action_spaces", "[", "0", "]", ",", "num_envs", ")", "\n", ")", "\n", "observations", ",", "rewards", ",", "dones", ",", "infos", "=", "[", "\n", "list", "(", "x", ")", "for", "x", "in", "zip", "(", "*", "outputs", ")", "\n", "]", "\n", "assert", "len", "(", "observations", ")", "==", "num_envs", "\n", "assert", "len", "(", "rewards", ")", "==", "num_envs", "\n", "assert", "len", "(", "dones", ")", "==", "num_envs", "\n", "assert", "len", "(", "infos", ")", "==", "num_envs", "\n", "\n", "tiled_img", "=", "envs", ".", "render", "(", "mode", "=", "\"rgb_array\"", ")", "\n", "new_height", "=", "int", "(", "np", ".", "ceil", "(", "np", ".", "sqrt", "(", "NUM_ENVS", ")", ")", ")", "\n", "new_width", "=", "int", "(", "np", ".", "ceil", "(", "float", "(", "NUM_ENVS", ")", "/", "new_height", ")", ")", "\n", "print", "(", "f\"observations: {observations}\"", ")", "\n", "h", ",", "w", ",", "c", "=", "observations", "[", "0", "]", "[", "\"rgb\"", "]", ".", "shape", "\n", "assert", "tiled_img", ".", "shape", "==", "(", "\n", "h", "*", "new_height", ",", "\n", "w", "*", "new_width", ",", "\n", "c", ",", "\n", ")", ",", "\"vector env render is broken\"", "\n", "\n", "if", "(", "i", "+", "1", ")", "%", "configs", "[", "0", "]", ".", "ENVIRONMENT", ".", "MAX_EPISODE_STEPS", "==", "0", ":", "\n", "                ", "assert", "all", "(", "\n", "dones", "\n", ")", ",", "\"dones should be true after max_episode steps\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_habitat_env.test_rl_env": [[277, 328], ["pytest.mark.parametrize", "habitat.config.default.get_config", "habitat.config.default.get_config.defrost", "habitat.config.default.get_config.freeze", "pytest.skip", "os.path.exists", "pytest.skip", "test_habitat_env.DummyRLEnv", "env.reset", "range", "env.reset", "env.step", "habitat.tasks.nav.nav.NavigationEpisode", "env.step", "habitat.utils.test_utils.sample_non_stop_action", "habitat.tasks.nav.nav.NavigationGoal"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.exists", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.test_utils.sample_non_stop_action"], ["", "", "", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"gpu2gpu\"", ",", "[", "False", ",", "True", "]", ")", "\n", "def", "test_rl_env", "(", "gpu2gpu", ")", ":", "\n", "    ", "import", "habitat_sim", "\n", "\n", "if", "gpu2gpu", "and", "not", "habitat_sim", ".", "cuda_enabled", ":", "\n", "        ", "pytest", ".", "skip", "(", "\"GPU-GPU requires CUDA\"", ")", "\n", "\n", "", "config", "=", "get_config", "(", "CFG_TEST", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "config", ".", "SIMULATOR", ".", "SCENE", ")", ":", "\n", "        ", "pytest", ".", "skip", "(", "\"Please download Habitat test data to data folder.\"", ")", "\n", "\n", "", "config", ".", "defrost", "(", ")", "\n", "config", ".", "SIMULATOR", ".", "HABITAT_SIM_V0", ".", "GPU_GPU", "=", "gpu2gpu", "\n", "config", ".", "freeze", "(", ")", "\n", "\n", "with", "DummyRLEnv", "(", "config", "=", "config", ",", "dataset", "=", "None", ")", "as", "env", ":", "\n", "        ", "env", ".", "episodes", "=", "[", "\n", "NavigationEpisode", "(", "\n", "episode_id", "=", "\"0\"", ",", "\n", "scene_id", "=", "config", ".", "SIMULATOR", ".", "SCENE", ",", "\n", "start_position", "=", "[", "-", "3.0133917", ",", "0.04623024", ",", "7.3064547", "]", ",", "\n", "start_rotation", "=", "[", "0", ",", "0.163276", ",", "0", ",", "0.98658", "]", ",", "\n", "goals", "=", "[", "\n", "NavigationGoal", "(", "\n", "position", "=", "[", "\n", "-", "3.0133917", "+", "0.01", ",", "\n", "0.04623024", ",", "\n", "7.3064547", "+", "0.01", ",", "\n", "]", "\n", ")", "\n", "]", ",", "\n", "info", "=", "{", "\"geodesic_distance\"", ":", "0.001", "}", ",", "\n", ")", "\n", "]", "\n", "\n", "done", "=", "False", "\n", "env", ".", "reset", "(", ")", "\n", "\n", "for", "_", "in", "range", "(", "config", ".", "ENVIRONMENT", ".", "MAX_EPISODE_STEPS", ")", ":", "\n", "            ", "observation", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "\n", "action", "=", "sample_non_stop_action", "(", "env", ".", "action_space", ")", "\n", ")", "\n", "\n", "# check for steps limit on environment", "\n", "", "assert", "done", "is", "True", ",", "\"episodes should be over after max_episode_steps\"", "\n", "\n", "env", ".", "reset", "(", ")", "\n", "observation", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "\n", "action", "=", "{", "\"action\"", ":", "StopAction", ".", "name", "}", "\n", ")", "\n", "assert", "done", "is", "True", ",", "\"done should be true after STOP action\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_habitat_env._make_dummy_env_func": [[330, 332], ["test_habitat_env.DummyRLEnv"], "function", ["None"], ["", "", "def", "_make_dummy_env_func", "(", "config", ",", "dataset", ",", "env_id", ")", ":", "\n", "    ", "return", "DummyRLEnv", "(", "config", "=", "config", ",", "dataset", "=", "dataset", ",", "env_ind", "=", "env_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_habitat_env.test_vec_env_call_func": [[334, 374], ["test_habitat_env._load_test_data", "len", "tuple", "list", "zip", "range", "habitat.VectorEnv", "envs.reset", "envs.call", "envs.call_at", "envs.call_at", "envs.call", "envs.call_at", "envs.call", "envs.pause_at", "list.pop", "envs.call", "envs.pause_at", "list.pop", "envs.call", "envs.resume_all", "envs.call", "range", "list", "range"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_habitat_env._load_test_data", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env.VectorEnv.call", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env.VectorEnv.call_at", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env.VectorEnv.call_at", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env.VectorEnv.call", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env.VectorEnv.call_at", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env.VectorEnv.call", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env.VectorEnv.pause_at", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env.VectorEnv.call", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env.VectorEnv.pause_at", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env.VectorEnv.call", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env.VectorEnv.resume_all", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env.VectorEnv.call"], ["", "def", "test_vec_env_call_func", "(", ")", ":", "\n", "    ", "configs", ",", "datasets", "=", "_load_test_data", "(", ")", "\n", "num_envs", "=", "len", "(", "configs", ")", "\n", "env_fn_args", "=", "tuple", "(", "zip", "(", "configs", ",", "datasets", ",", "range", "(", "num_envs", ")", ")", ")", "\n", "true_env_ids", "=", "list", "(", "range", "(", "num_envs", ")", ")", "\n", "with", "habitat", ".", "VectorEnv", "(", "\n", "make_env_fn", "=", "_make_dummy_env_func", ",", "\n", "env_fn_args", "=", "env_fn_args", ",", "\n", "multiprocessing_start_method", "=", "\"forkserver\"", ",", "\n", ")", "as", "envs", ":", "\n", "        ", "envs", ".", "reset", "(", ")", "\n", "env_ids", "=", "envs", ".", "call", "(", "[", "\"get_env_ind\"", "]", "*", "num_envs", ")", "\n", "assert", "env_ids", "==", "true_env_ids", "\n", "\n", "env_id", "=", "envs", ".", "call_at", "(", "1", ",", "\"get_env_ind\"", ")", "\n", "assert", "env_id", "==", "true_env_ids", "[", "1", "]", "\n", "\n", "envs", ".", "call_at", "(", "2", ",", "\"set_env_ind\"", ",", "{", "\"new_env_ind\"", ":", "20", "}", ")", "\n", "true_env_ids", "[", "2", "]", "=", "20", "\n", "env_ids", "=", "envs", ".", "call", "(", "[", "\"get_env_ind\"", "]", "*", "num_envs", ")", "\n", "assert", "env_ids", "==", "true_env_ids", "\n", "\n", "envs", ".", "call_at", "(", "2", ",", "\"set_env_ind\"", ",", "{", "\"new_env_ind\"", ":", "2", "}", ")", "\n", "true_env_ids", "[", "2", "]", "=", "2", "\n", "env_ids", "=", "envs", ".", "call", "(", "[", "\"get_env_ind\"", "]", "*", "num_envs", ")", "\n", "assert", "env_ids", "==", "true_env_ids", "\n", "\n", "envs", ".", "pause_at", "(", "0", ")", "\n", "true_env_ids", ".", "pop", "(", "0", ")", "\n", "env_ids", "=", "envs", ".", "call", "(", "[", "\"get_env_ind\"", "]", "*", "num_envs", ")", "\n", "assert", "env_ids", "==", "true_env_ids", "\n", "\n", "envs", ".", "pause_at", "(", "0", ")", "\n", "true_env_ids", ".", "pop", "(", "0", ")", "\n", "env_ids", "=", "envs", ".", "call", "(", "[", "\"get_env_ind\"", "]", "*", "num_envs", ")", "\n", "assert", "env_ids", "==", "true_env_ids", "\n", "\n", "envs", ".", "resume_all", "(", ")", "\n", "env_ids", "=", "envs", ".", "call", "(", "[", "\"get_env_ind\"", "]", "*", "num_envs", ")", "\n", "assert", "env_ids", "==", "list", "(", "range", "(", "num_envs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_habitat_env.test_close_with_paused": [[376, 389], ["test_habitat_env._load_test_data", "len", "tuple", "zip", "habitat.VectorEnv", "envs.reset", "envs.pause_at", "envs.pause_at", "range"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_habitat_env._load_test_data", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env.VectorEnv.pause_at", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env.VectorEnv.pause_at"], ["", "", "def", "test_close_with_paused", "(", ")", ":", "\n", "    ", "configs", ",", "datasets", "=", "_load_test_data", "(", ")", "\n", "num_envs", "=", "len", "(", "configs", ")", "\n", "env_fn_args", "=", "tuple", "(", "zip", "(", "configs", ",", "datasets", ",", "range", "(", "num_envs", ")", ")", ")", "\n", "with", "habitat", ".", "VectorEnv", "(", "\n", "env_fn_args", "=", "env_fn_args", ",", "multiprocessing_start_method", "=", "\"forkserver\"", "\n", ")", "as", "envs", ":", "\n", "        ", "envs", ".", "reset", "(", ")", "\n", "\n", "envs", ".", "pause_at", "(", "3", ")", "\n", "envs", ".", "pause_at", "(", "0", ")", "\n", "\n", "", "assert", "envs", ".", "_is_closed", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_habitat_env.test_action_space_shortest_path": [[392, 435], ["habitat.config.default.get_config", "habitat.Env", "habitat.Env.sim.sample_navigable_point", "list", "numpy.radians", "habitat.core.simulator.AgentState", "habitat.Env.action_space_shortest_path", "habitat.Env.action_space_shortest_path", "habitat.Env.close", "os.path.exists", "pytest.skip", "range", "numpy.random.choice", "numpy.sin", "numpy.cos", "len", "habitat.Env.sim.sample_navigable_point", "list", "numpy.radians", "len", "habitat.Env.sim.sample_navigable_point", "list", "numpy.radians", "range", "numpy.random.choice", "numpy.sin", "numpy.cos", "habitat.Env.sim.geodesic_distance", "reachable_targets.append", "range", "numpy.random.choice", "numpy.sin", "numpy.cos", "habitat.Env.sim.geodesic_distance", "unreachable_targets.append", "habitat.core.simulator.AgentState", "habitat.core.simulator.AgentState"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.sample_navigable_point", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.action_space_shortest_path", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.action_space_shortest_path", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.close", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.exists", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.sample_navigable_point", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.sample_navigable_point", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.geodesic_distance", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.geodesic_distance"], ["", "@", "pytest", ".", "mark", ".", "skip", "\n", "def", "test_action_space_shortest_path", "(", ")", ":", "\n", "    ", "config", "=", "get_config", "(", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "config", ".", "SIMULATOR", ".", "SCENE", ")", ":", "\n", "        ", "pytest", ".", "skip", "(", "\"Please download Habitat test data to data folder.\"", ")", "\n", "\n", "", "env", "=", "habitat", ".", "Env", "(", "config", "=", "config", ",", "dataset", "=", "None", ")", "\n", "\n", "# action space shortest path", "\n", "source_position", "=", "env", ".", "sim", ".", "sample_navigable_point", "(", ")", "\n", "angles", "=", "list", "(", "range", "(", "-", "180", ",", "180", ",", "config", ".", "SIMULATOR", ".", "TURN_ANGLE", ")", ")", "\n", "angle", "=", "np", ".", "radians", "(", "np", ".", "random", ".", "choice", "(", "angles", ")", ")", "\n", "source_rotation", "=", "[", "0", ",", "np", ".", "sin", "(", "angle", "/", "2", ")", ",", "0", ",", "np", ".", "cos", "(", "angle", "/", "2", ")", "]", "\n", "source", "=", "AgentState", "(", "source_position", ",", "source_rotation", ")", "\n", "\n", "reachable_targets", "=", "[", "]", "\n", "unreachable_targets", "=", "[", "]", "\n", "while", "len", "(", "reachable_targets", ")", "<", "5", ":", "\n", "        ", "position", "=", "env", ".", "sim", ".", "sample_navigable_point", "(", ")", "\n", "angles", "=", "list", "(", "range", "(", "-", "180", ",", "180", ",", "config", ".", "SIMULATOR", ".", "TURN_ANGLE", ")", ")", "\n", "angle", "=", "np", ".", "radians", "(", "np", ".", "random", ".", "choice", "(", "angles", ")", ")", "\n", "rotation", "=", "[", "0", ",", "np", ".", "sin", "(", "angle", "/", "2", ")", ",", "0", ",", "np", ".", "cos", "(", "angle", "/", "2", ")", "]", "\n", "if", "env", ".", "sim", ".", "geodesic_distance", "(", "source_position", ",", "[", "position", "]", ")", "!=", "np", ".", "inf", ":", "\n", "            ", "reachable_targets", ".", "append", "(", "AgentState", "(", "position", ",", "rotation", ")", ")", "\n", "\n", "", "", "while", "len", "(", "unreachable_targets", ")", "<", "3", ":", "\n", "        ", "position", "=", "env", ".", "sim", ".", "sample_navigable_point", "(", ")", "\n", "# Change height of the point to make it unreachable", "\n", "position", "[", "1", "]", "=", "100", "\n", "angles", "=", "list", "(", "range", "(", "-", "180", ",", "180", ",", "config", ".", "SIMULATOR", ".", "TURN_ANGLE", ")", ")", "\n", "angle", "=", "np", ".", "radians", "(", "np", ".", "random", ".", "choice", "(", "angles", ")", ")", "\n", "rotation", "=", "[", "0", ",", "np", ".", "sin", "(", "angle", "/", "2", ")", ",", "0", ",", "np", ".", "cos", "(", "angle", "/", "2", ")", "]", "\n", "if", "env", ".", "sim", ".", "geodesic_distance", "(", "source_position", ",", "[", "position", "]", ")", "==", "np", ".", "inf", ":", "\n", "            ", "unreachable_targets", ".", "append", "(", "AgentState", "(", "position", ",", "rotation", ")", ")", "\n", "\n", "", "", "targets", "=", "reachable_targets", "\n", "shortest_path1", "=", "env", ".", "action_space_shortest_path", "(", "source", ",", "targets", ")", "\n", "assert", "shortest_path1", "!=", "[", "]", "\n", "\n", "targets", "=", "unreachable_targets", "\n", "shortest_path2", "=", "env", ".", "action_space_shortest_path", "(", "source", ",", "targets", ")", "\n", "assert", "shortest_path2", "==", "[", "]", "\n", "env", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_habitat_env.test_set_episodes": [[437, 460], ["pytest.mark.parametrize", "habitat.config.default.get_config", "os.path.exists", "pytest.skip", "habitat.Env", "list", "env.reset", "iter", "RuntimeError"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.exists", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"set_method\"", ",", "[", "\"current\"", ",", "\"list\"", ",", "\"iter\"", "]", ")", "\n", "def", "test_set_episodes", "(", "set_method", ")", ":", "\n", "    ", "config", "=", "get_config", "(", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "config", ".", "SIMULATOR", ".", "SCENE", ")", ":", "\n", "        ", "pytest", ".", "skip", "(", "\"Please download Habitat test data to data folder.\"", ")", "\n", "\n", "", "with", "habitat", ".", "Env", "(", "config", "=", "config", ",", "dataset", "=", "None", ")", "as", "env", ":", "\n", "        ", "all_episodes", "=", "list", "(", "env", ".", "episodes", ")", "\n", "target_episode", "=", "all_episodes", "[", "10", "]", "\n", "\n", "if", "set_method", "==", "\"current\"", ":", "\n", "            ", "env", ".", "current_episode", "=", "target_episode", "\n", "", "elif", "set_method", "==", "\"list\"", ":", "\n", "            ", "env", ".", "episodes", "=", "[", "target_episode", "]", "\n", "", "elif", "set_method", "==", "\"iter\"", ":", "\n", "            ", "env", ".", "episode_iterator", "=", "iter", "(", "[", "target_episode", "]", "+", "all_episodes", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "f\"Test does not support setting episodes with {set_method}\"", "\n", ")", "\n", "\n", "", "env", ".", "reset", "(", ")", "\n", "assert", "env", ".", "current_episode", "is", "target_episode", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_mp3d_eqa.get_minos_for_sim_eqa_config": [[50, 71], ["habitat.config.default.get_config", "habitat.datasets.eqa.mp3d_eqa_dataset.get_default_mp3d_v1_config"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.eqa.mp3d_eqa_dataset.get_default_mp3d_v1_config"], ["def", "get_minos_for_sim_eqa_config", "(", ")", ":", "\n", "    ", "_sim_eqa_c", "=", "get_config", "(", "CFG_TEST", ")", "\n", "_sim_eqa_c", ".", "task_name", "=", "\"EQA-v0\"", "\n", "_sim_eqa_c", ".", "dataset", "=", "mp3d_dataset", ".", "get_default_mp3d_v1_config", "(", ")", "\n", "_sim_eqa_c", ".", "dataset", ".", "split", "=", "\"val\"", "\n", "_sim_eqa_c", ".", "scene", "=", "\"data/scene_datasets/mp3d/17DRP5sb8fy/17DRP5sb8fy.glb\"", "\n", "_sim_eqa_c", ".", "height", "=", "512", "\n", "_sim_eqa_c", ".", "width", "=", "512", "\n", "_sim_eqa_c", ".", "hfov", "=", "\"45\"", "\n", "_sim_eqa_c", ".", "vfov", "=", "\"45\"", "\n", "_sim_eqa_c", ".", "sensor_position", "=", "[", "0", ",", "1.09", ",", "0", "]", "\n", "_sim_eqa_c", ".", "forward_step_size", "=", "0.1", "# in metres", "\n", "_sim_eqa_c", ".", "turn_angle", "=", "9", "# in degrees", "\n", "_sim_eqa_c", ".", "sim", "=", "\"Sim-v0\"", "\n", "\n", "# Agent configuration", "\n", "agent_c", "=", "_sim_eqa_c", ".", "agents", "[", "0", "]", "\n", "agent_c", ".", "height", "=", "1.5", "\n", "agent_c", ".", "radius", "=", "0.1", "\n", "\n", "return", "_sim_eqa_c", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_mp3d_eqa.check_json_serializaiton": [[73, 87], ["time.time", "str", "habitat.core.logging.logger.info", "dataset.__class__", "dataset.__class__.from_json", "isinstance", "dataset.to_json", "len", "dataset.__class__.to_json", "time.time"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.from_json", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.to_json", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.to_json"], ["", "def", "check_json_serializaiton", "(", "dataset", ":", "habitat", ".", "Dataset", ")", ":", "\n", "    ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "json_str", "=", "str", "(", "dataset", ".", "to_json", "(", ")", ")", "\n", "logger", ".", "info", "(", "\n", "\"JSON conversion finished. {} sec\"", ".", "format", "(", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", ")", "\n", "decoded_dataset", "=", "dataset", ".", "__class__", "(", ")", "\n", "decoded_dataset", ".", "from_json", "(", "json_str", ")", "\n", "assert", "len", "(", "decoded_dataset", ".", "episodes", ")", ">", "0", "\n", "episode", "=", "decoded_dataset", ".", "episodes", "[", "0", "]", "\n", "assert", "isinstance", "(", "episode", ",", "Episode", ")", "\n", "assert", "(", "\n", "decoded_dataset", ".", "to_json", "(", ")", "==", "json_str", "\n", ")", ",", "\"JSON dataset encoding/decoding isn't consistent\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_mp3d_eqa.test_mp3d_eqa_dataset": [[89, 102], ["habitat.datasets.eqa.mp3d_eqa_dataset.Matterport3dDatasetV1", "test_mp3d_eqa.check_json_serializaiton", "habitat.config.default.get_config", "habitat.datasets.eqa.mp3d_eqa_dataset.Matterport3dDatasetV1.check_config_paths_exist", "pytest.skip", "len"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_r2r_vln.check_json_serializaiton", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pointnav.pointnav_dataset.PointNavDatasetV1.check_config_paths_exist"], ["", "def", "test_mp3d_eqa_dataset", "(", ")", ":", "\n", "    ", "dataset_config", "=", "get_config", "(", "CFG_TEST", ")", ".", "DATASET", "\n", "if", "not", "mp3d_dataset", ".", "Matterport3dDatasetV1", ".", "check_config_paths_exist", "(", "\n", "dataset_config", "\n", ")", ":", "\n", "        ", "pytest", ".", "skip", "(", "\"Please download Matterport3D EQA dataset to data folder.\"", ")", "\n", "\n", "", "dataset", "=", "mp3d_dataset", ".", "Matterport3dDatasetV1", "(", "config", "=", "dataset_config", ")", "\n", "assert", "dataset", "\n", "assert", "(", "\n", "len", "(", "dataset", ".", "episodes", ")", "==", "mp3d_dataset", ".", "EQA_MP3D_V1_VAL_EPISODE_COUNT", "\n", ")", ",", "\"Test split episode number mismatch\"", "\n", "check_json_serializaiton", "(", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_mp3d_eqa.test_dataset_splitting": [[104, 152], ["pytest.mark.parametrize", "dataset_config.defrost", "habitat.datasets.eqa.mp3d_eqa_dataset.Matterport3dDatasetV1.get_scenes_to_load", "habitat.datasets.make_dataset", "habitat.datasets.make_dataset", "habitat.datasets.make_dataset", "habitat.config.default.get_config", "habitat.datasets.eqa.mp3d_eqa_dataset.Matterport3dDatasetV1.check_config_paths_exist", "pytest.skip", "len", "split1_episodes.union", "len", "split1_episodes.intersection", "len", "len"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.get_scenes_to_load", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.registration.make_dataset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.registration.make_dataset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.registration.make_dataset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pointnav.pointnav_dataset.PointNavDatasetV1.check_config_paths_exist"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"split\"", ",", "[", "\"train\"", ",", "\"val\"", "]", ")", "\n", "def", "test_dataset_splitting", "(", "split", ")", ":", "\n", "\n", "    ", "dataset_config", "=", "get_config", "(", "CFG_TEST", ")", ".", "DATASET", "\n", "dataset_config", ".", "defrost", "(", ")", "\n", "dataset_config", ".", "SPLIT", "=", "split", "\n", "if", "not", "mp3d_dataset", ".", "Matterport3dDatasetV1", ".", "check_config_paths_exist", "(", "\n", "dataset_config", "\n", ")", ":", "\n", "        ", "pytest", ".", "skip", "(", "\"Please download Matterport3D EQA dataset to data folder.\"", ")", "\n", "\n", "", "scenes", "=", "mp3d_dataset", ".", "Matterport3dDatasetV1", ".", "get_scenes_to_load", "(", "\n", "config", "=", "dataset_config", "\n", ")", "\n", "assert", "(", "\n", "len", "(", "scenes", ")", ">", "0", "\n", ")", ",", "\"Expected dataset contains separate episode file per scene.\"", "\n", "\n", "dataset_config", ".", "CONTENT_SCENES", "=", "scenes", "\n", "full_dataset", "=", "make_dataset", "(", "\n", "id_dataset", "=", "dataset_config", ".", "TYPE", ",", "config", "=", "dataset_config", "\n", ")", "\n", "full_episodes", "=", "{", "\n", "(", "ep", ".", "scene_id", ",", "ep", ".", "episode_id", ")", "for", "ep", "in", "full_dataset", ".", "episodes", "\n", "}", "\n", "\n", "dataset_config", ".", "CONTENT_SCENES", "=", "scenes", "[", "0", ":", "len", "(", "scenes", ")", "//", "2", "]", "\n", "split1_dataset", "=", "make_dataset", "(", "\n", "id_dataset", "=", "dataset_config", ".", "TYPE", ",", "config", "=", "dataset_config", "\n", ")", "\n", "split1_episodes", "=", "{", "\n", "(", "ep", ".", "scene_id", ",", "ep", ".", "episode_id", ")", "for", "ep", "in", "split1_dataset", ".", "episodes", "\n", "}", "\n", "\n", "dataset_config", ".", "CONTENT_SCENES", "=", "scenes", "[", "len", "(", "scenes", ")", "//", "2", ":", "]", "\n", "split2_dataset", "=", "make_dataset", "(", "\n", "id_dataset", "=", "dataset_config", ".", "TYPE", ",", "config", "=", "dataset_config", "\n", ")", "\n", "split2_episodes", "=", "{", "\n", "(", "ep", ".", "scene_id", ",", "ep", ".", "episode_id", ")", "for", "ep", "in", "split2_dataset", ".", "episodes", "\n", "}", "\n", "\n", "assert", "full_episodes", "==", "split1_episodes", ".", "union", "(", "\n", "split2_episodes", "\n", ")", ",", "\"Split dataset is not equal to full dataset\"", "\n", "assert", "(", "\n", "len", "(", "split1_episodes", ".", "intersection", "(", "split2_episodes", ")", ")", "==", "0", "\n", ")", ",", "\"Intersection of split datasets is not the empty set\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_mp3d_eqa.test_mp3d_eqa_sim": [[154, 182], ["habitat.config.default.get_config", "habitat.datasets.make_dataset", "habitat.datasets.eqa.mp3d_eqa_dataset.Matterport3dDatasetV1.check_config_paths_exist", "pytest.skip", "habitat.Env", "env.reset", "env.step", "env.task.action_space.sample"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.registration.make_dataset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pointnav.pointnav_dataset.PointNavDatasetV1.check_config_paths_exist", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.sample"], ["", "def", "test_mp3d_eqa_sim", "(", ")", ":", "\n", "    ", "eqa_config", "=", "get_config", "(", "CFG_TEST", ")", "\n", "\n", "if", "not", "mp3d_dataset", ".", "Matterport3dDatasetV1", ".", "check_config_paths_exist", "(", "\n", "eqa_config", ".", "DATASET", "\n", ")", ":", "\n", "        ", "pytest", ".", "skip", "(", "\"Please download Matterport3D EQA dataset to data folder.\"", ")", "\n", "\n", "", "dataset", "=", "make_dataset", "(", "\n", "id_dataset", "=", "eqa_config", ".", "DATASET", ".", "TYPE", ",", "config", "=", "eqa_config", ".", "DATASET", "\n", ")", "\n", "with", "habitat", ".", "Env", "(", "config", "=", "eqa_config", ",", "dataset", "=", "dataset", ")", "as", "env", ":", "\n", "        ", "env", ".", "episodes", "=", "dataset", ".", "episodes", "[", ":", "EPISODES_LIMIT", "]", "\n", "\n", "env", ".", "reset", "(", ")", "\n", "while", "not", "env", ".", "episode_over", ":", "\n", "            ", "obs", "=", "env", ".", "step", "(", "env", ".", "task", ".", "action_space", ".", "sample", "(", ")", ")", "\n", "if", "not", "env", ".", "episode_over", ":", "\n", "                ", "assert", "\"rgb\"", "in", "obs", ",", "\"RGB image is missing in observation.\"", "\n", "assert", "obs", "[", "\"rgb\"", "]", ".", "shape", "[", ":", "2", "]", "==", "(", "\n", "eqa_config", ".", "SIMULATOR", ".", "RGB_SENSOR", ".", "HEIGHT", ",", "\n", "eqa_config", ".", "SIMULATOR", ".", "RGB_SENSOR", ".", "WIDTH", ",", "\n", ")", ",", "(", "\n", "\"Observation resolution {} doesn't correspond to config \"", "\n", "\"({}, {}).\"", ".", "format", "(", "\n", "obs", "[", "\"rgb\"", "]", ".", "shape", "[", ":", "2", "]", ",", "\n", "eqa_config", ".", "SIMULATOR", ".", "RGB_SENSOR", ".", "HEIGHT", ",", "\n", "eqa_config", ".", "SIMULATOR", ".", "RGB_SENSOR", ".", "WIDTH", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_mp3d_eqa.test_mp3d_eqa_sim_correspondence": [[186, 274], ["habitat.config.default.get_config", "habitat.datasets.make_dataset", "habitat.datasets.eqa.mp3d_eqa_dataset.Matterport3dDatasetV1.check_config_paths_exist", "pytest.skip", "habitat.Env", "env.reset", "env.sim.get_agent_state", "numpy.allclose", "habitat.core.logging.logger.info", "enumerate", "len", "len", "env.sim.get_agent_state", "habitat.core.logging.logger.info", "numpy.allclose", "len", "numpy.isclose", "int", "env.step", "[].mean", "len", "habitat.utils.geometry_utils.angle_between_quaternions", "habitat.utils.geometry_utils.quaternion_from_coeff", "int"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.registration.make_dataset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pointnav.pointnav_dataset.PointNavDatasetV1.check_config_paths_exist", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.get_agent_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.get_agent_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.geometry_utils.angle_between_quaternions", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.geometry_utils.quaternion_from_coeff"], ["", "", "", "", "def", "test_mp3d_eqa_sim_correspondence", "(", ")", ":", "\n", "    ", "eqa_config", "=", "get_config", "(", "CFG_TEST", ")", "\n", "\n", "if", "not", "mp3d_dataset", ".", "Matterport3dDatasetV1", ".", "check_config_paths_exist", "(", "\n", "eqa_config", ".", "DATASET", "\n", ")", ":", "\n", "        ", "pytest", ".", "skip", "(", "\"Please download Matterport3D EQA dataset to data folder.\"", ")", "\n", "\n", "", "dataset", "=", "make_dataset", "(", "\n", "id_dataset", "=", "eqa_config", ".", "DATASET", ".", "TYPE", ",", "config", "=", "eqa_config", ".", "DATASET", "\n", ")", "\n", "with", "habitat", ".", "Env", "(", "config", "=", "eqa_config", ",", "dataset", "=", "dataset", ")", "as", "env", ":", "\n", "        ", "env", ".", "episodes", "=", "[", "\n", "episode", "\n", "for", "episode", "in", "dataset", ".", "episodes", "\n", "if", "int", "(", "episode", ".", "episode_id", ")", "in", "TEST_EPISODE_SET", "[", ":", "EPISODES_LIMIT", "]", "\n", "]", "\n", "\n", "ep_i", "=", "0", "\n", "cycles_n", "=", "2", "\n", "while", "cycles_n", ">", "0", ":", "\n", "            ", "env", ".", "reset", "(", ")", "\n", "episode", "=", "env", ".", "current_episode", "\n", "assert", "(", "\n", "len", "(", "episode", ".", "goals", ")", "==", "1", "\n", ")", ",", "\"Episode has no goals or more than one.\"", "\n", "assert", "(", "\n", "len", "(", "episode", ".", "shortest_paths", ")", "==", "1", "\n", ")", ",", "\"Episode has no shortest paths or more than one.\"", "\n", "start_state", "=", "env", ".", "sim", ".", "get_agent_state", "(", ")", "\n", "assert", "np", ".", "allclose", "(", "\n", "start_state", ".", "position", ",", "episode", ".", "start_position", "\n", ")", ",", "\"Agent's start position diverges from the shortest path's one.\"", "\n", "\n", "rgb_mean", "=", "0", "\n", "logger", ".", "info", "(", "\n", "\"{id} {question}\\n{answer}\"", ".", "format", "(", "\n", "id", "=", "episode", ".", "episode_id", ",", "\n", "question", "=", "episode", ".", "question", ".", "question_text", ",", "\n", "answer", "=", "episode", ".", "question", ".", "answer_text", ",", "\n", ")", "\n", ")", "\n", "\n", "for", "step_id", ",", "point", "in", "enumerate", "(", "episode", ".", "shortest_paths", "[", "0", "]", ")", ":", "\n", "                ", "cur_state", "=", "env", ".", "sim", ".", "get_agent_state", "(", ")", "\n", "\n", "logger", ".", "info", "(", "\n", "\"diff position: {} diff rotation: {} \"", "\n", "\"cur_state.position: {} shortest_path.position: {} \"", "\n", "\"cur_state.rotation: {} shortest_path.rotation: {} action: {}\"", "\n", "\"\"", ".", "format", "(", "\n", "cur_state", ".", "position", "-", "point", ".", "position", ",", "\n", "angle_between_quaternions", "(", "\n", "cur_state", ".", "rotation", ",", "\n", "quaternion_from_coeff", "(", "point", ".", "rotation", ")", ",", "\n", ")", ",", "\n", "cur_state", ".", "position", ",", "\n", "point", ".", "position", ",", "\n", "cur_state", ".", "rotation", ",", "\n", "point", ".", "rotation", ",", "\n", "point", ".", "action", ",", "\n", ")", "\n", ")", "\n", "\n", "assert", "np", ".", "allclose", "(", "\n", "[", "cur_state", ".", "position", "[", "0", "]", ",", "cur_state", ".", "position", "[", "2", "]", "]", ",", "\n", "[", "point", ".", "position", "[", "0", "]", ",", "point", ".", "position", "[", "2", "]", "]", ",", "\n", "atol", "=", "CLOSE_STEP_THRESHOLD", "*", "(", "step_id", "+", "1", ")", ",", "\n", ")", ",", "\"Agent's path diverges from the shortest path.\"", "\n", "\n", "if", "point", ".", "action", "!=", "OLD_STOP_ACTION_ID", ":", "\n", "                    ", "obs", "=", "env", ".", "step", "(", "action", "=", "point", ".", "action", ")", "\n", "\n", "", "if", "not", "env", ".", "episode_over", ":", "\n", "                    ", "rgb_mean", "+=", "obs", "[", "\"rgb\"", "]", "[", ":", ",", ":", ",", ":", "3", "]", ".", "mean", "(", ")", "\n", "\n", "", "", "if", "ep_i", "<", "len", "(", "RGB_EPISODE_MEANS", ")", ":", "\n", "# Slightly bigger atol for basis meshes", "\n", "                ", "rgb_mean", "=", "rgb_mean", "/", "len", "(", "episode", ".", "shortest_paths", "[", "0", "]", ")", "\n", "assert", "np", ".", "isclose", "(", "\n", "RGB_EPISODE_MEANS", "[", "int", "(", "episode", ".", "episode_id", ")", "]", ",", "\n", "rgb_mean", ",", "\n", "atol", "=", "0.5", ",", "\n", ")", ",", "\"RGB output doesn't match the ground truth.\"", "\n", "\n", "", "ep_i", "=", "(", "ep_i", "+", "1", ")", "%", "EPISODES_LIMIT", "\n", "if", "ep_i", "==", "0", ":", "\n", "                ", "cycles_n", "-=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_mp3d_eqa.test_eqa_task": [[276, 321], ["habitat.config.default.get_config", "habitat.datasets.make_dataset", "habitat.datasets.eqa.mp3d_eqa_dataset.Matterport3dDatasetV1.check_config_paths_exist", "pytest.skip", "habitat.Env", "list", "env.reset", "range", "env.step", "env.get_metrics", "habitat.core.logging.logger.info", "filter", "habitat.utils.test_utils.sample_non_stop_action", "env.get_metrics", "habitat.core.logging.logger.info", "pytest.raises", "env.step", "env.step", "int"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.registration.make_dataset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pointnav.pointnav_dataset.PointNavDatasetV1.check_config_paths_exist", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env.get_metrics", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.test_utils.sample_non_stop_action", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env.get_metrics", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step"], ["", "", "", "", "def", "test_eqa_task", "(", ")", ":", "\n", "    ", "eqa_config", "=", "get_config", "(", "CFG_TEST", ")", "\n", "\n", "if", "not", "mp3d_dataset", ".", "Matterport3dDatasetV1", ".", "check_config_paths_exist", "(", "\n", "eqa_config", ".", "DATASET", "\n", ")", ":", "\n", "        ", "pytest", ".", "skip", "(", "\"Please download Matterport3D EQA dataset to data folder.\"", ")", "\n", "\n", "", "dataset", "=", "make_dataset", "(", "\n", "id_dataset", "=", "eqa_config", ".", "DATASET", ".", "TYPE", ",", "config", "=", "eqa_config", ".", "DATASET", "\n", ")", "\n", "with", "habitat", ".", "Env", "(", "config", "=", "eqa_config", ",", "dataset", "=", "dataset", ")", "as", "env", ":", "\n", "        ", "env", ".", "episodes", "=", "list", "(", "\n", "filter", "(", "\n", "lambda", "e", ":", "int", "(", "e", ".", "episode_id", ")", "\n", "in", "TEST_EPISODE_SET", "[", ":", "EPISODES_LIMIT", "]", ",", "\n", "dataset", ".", "episodes", ",", "\n", ")", "\n", ")", "\n", "\n", "env", ".", "reset", "(", ")", "\n", "\n", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "            ", "action", "=", "sample_non_stop_action", "(", "env", ".", "action_space", ")", "\n", "if", "action", "[", "\"action\"", "]", "!=", "AnswerAction", ".", "name", ":", "\n", "                ", "env", ".", "step", "(", "action", ")", "\n", "", "metrics", "=", "env", ".", "get_metrics", "(", ")", "\n", "del", "metrics", "[", "\"episode_info\"", "]", "\n", "logger", ".", "info", "(", "metrics", ")", "\n", "\n", "", "correct_answer_id", "=", "env", ".", "current_episode", ".", "question", ".", "answer_token", "\n", "env", ".", "step", "(", "\n", "{", "\n", "\"action\"", ":", "AnswerAction", ".", "name", ",", "\n", "\"action_args\"", ":", "{", "\"answer_id\"", ":", "correct_answer_id", "}", ",", "\n", "}", "\n", ")", "\n", "\n", "metrics", "=", "env", ".", "get_metrics", "(", ")", "\n", "del", "metrics", "[", "\"episode_info\"", "]", "\n", "logger", ".", "info", "(", "metrics", ")", "\n", "assert", "metrics", "[", "\"answer_accuracy\"", "]", "==", "1", "\n", "\n", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "            ", "env", ".", "step", "(", "{", "\"action\"", ":", "MoveForwardAction", ".", "name", "}", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_habitat_example.test_readme_example": [[20, 26], ["examples.example.example", "habitat.datasets.pointnav.pointnav_dataset.PointNavDatasetV1.check_config_paths_exist", "pytest.skip", "habitat.get_config"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.example_pointnav.example", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pointnav.pointnav_dataset.PointNavDatasetV1.check_config_paths_exist", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config"], ["def", "test_readme_example", "(", ")", ":", "\n", "    ", "if", "not", "PointNavDatasetV1", ".", "check_config_paths_exist", "(", "\n", "config", "=", "habitat", ".", "get_config", "(", ")", ".", "DATASET", "\n", ")", ":", "\n", "        ", "pytest", ".", "skip", "(", "\"Please download Habitat test data to data folder.\"", ")", "\n", "", "example", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_habitat_example.test_visualizations_example": [[28, 34], ["examples.visualization_examples.main", "habitat.datasets.pointnav.pointnav_dataset.PointNavDatasetV1.check_config_paths_exist", "pytest.skip", "habitat.get_config"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.main", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pointnav.pointnav_dataset.PointNavDatasetV1.check_config_paths_exist", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config"], ["", "def", "test_visualizations_example", "(", ")", ":", "\n", "    ", "if", "not", "PointNavDatasetV1", ".", "check_config_paths_exist", "(", "\n", "config", "=", "habitat", ".", "get_config", "(", ")", ".", "DATASET", "\n", ")", ":", "\n", "        ", "pytest", ".", "skip", "(", "\"Please download Habitat test data to data folder.\"", ")", "\n", "", "visualization_examples", ".", "main", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_habitat_example.test_shortest_path_follower_example": [[36, 42], ["examples.shortest_path_follower_example.main", "habitat.datasets.pointnav.pointnav_dataset.PointNavDatasetV1.check_config_paths_exist", "pytest.skip", "habitat.get_config"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.main", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pointnav.pointnav_dataset.PointNavDatasetV1.check_config_paths_exist", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config"], ["", "def", "test_shortest_path_follower_example", "(", ")", ":", "\n", "    ", "if", "not", "PointNavDatasetV1", ".", "check_config_paths_exist", "(", "\n", "config", "=", "habitat", ".", "get_config", "(", ")", ".", "DATASET", "\n", ")", ":", "\n", "        ", "pytest", ".", "skip", "(", "\"Please download Habitat test data to data folder.\"", ")", "\n", "", "shortest_path_follower_example", ".", "main", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_habitat_example.test_register_new_sensors_and_measures": [[44, 51], ["examples.register_new_sensors_and_measures.main", "habitat.datasets.pointnav.pointnav_dataset.PointNavDatasetV1.check_config_paths_exist", "pytest.skip", "habitat.get_config"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.main", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pointnav.pointnav_dataset.PointNavDatasetV1.check_config_paths_exist", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config"], ["", "def", "test_register_new_sensors_and_measures", "(", ")", ":", "\n", "    ", "if", "not", "PointNavDatasetV1", ".", "check_config_paths_exist", "(", "\n", "config", "=", "habitat", ".", "get_config", "(", ")", ".", "DATASET", "\n", ")", ":", "\n", "        ", "pytest", ".", "skip", "(", "\"Please download Habitat test data to data folder.\"", ")", "\n", "\n", "", "register_new_sensors_and_measures", ".", "main", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_habitat_example.test_new_actions": [[53, 60], ["examples.new_actions.main", "habitat.datasets.pointnav.pointnav_dataset.PointNavDatasetV1.check_config_paths_exist", "pytest.skip", "habitat.get_config"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.main", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pointnav.pointnav_dataset.PointNavDatasetV1.check_config_paths_exist", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config"], ["", "def", "test_new_actions", "(", ")", ":", "\n", "    ", "if", "not", "PointNavDatasetV1", ".", "check_config_paths_exist", "(", "\n", "config", "=", "habitat", ".", "get_config", "(", ")", ".", "DATASET", "\n", ")", ":", "\n", "        ", "pytest", ".", "skip", "(", "\"Please download Habitat test data to data folder.\"", ")", "\n", "\n", "", "new_actions", ".", "main", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_baseline_trainers._powerset": [[38, 43], ["range", "itertools.combinations", "len"], "function", ["None"], ["", "def", "_powerset", "(", "s", ")", ":", "\n", "    ", "return", "[", "\n", "combo", "\n", "for", "r", "in", "range", "(", "len", "(", "s", ")", "+", "1", ")", "\n", "for", "combo", "in", "itertools", ".", "combinations", "(", "s", ",", "r", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_baseline_trainers.test_trainers": [[46, 110], ["pytest.mark.skipif", "pytest.mark.parametrize", "str", "run_exp", "gc.collect", "torch.distributed.is_initialized", "find_free_port", "torch.distributed.destroy_process_group", "list", "list", "pytest.skip", "str", "str", "itertools.product", "itertools.product", "pytest.skip", "tuple", "glob.glob"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_baselines.run.run_exp", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ddppo.ddp_utils.find_free_port"], ["", "@", "pytest", ".", "mark", ".", "skipif", "(", "\n", "not", "baseline_installed", ",", "reason", "=", "\"baseline sub-module not installed\"", "\n", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"test_cfg_path,mode,gpu2gpu,observation_transforms\"", ",", "\n", "list", "(", "\n", "itertools", ".", "product", "(", "\n", "glob", "(", "\"habitat_baselines/config/test/*\"", ")", ",", "\n", "[", "\"train\"", ",", "\"eval\"", "]", ",", "\n", "[", "False", "]", ",", "\n", "[", "\n", "[", "]", ",", "\n", "[", "\n", "\"CenterCropper\"", ",", "\n", "\"ResizeShortestEdge\"", ",", "\n", "]", ",", "\n", "]", ",", "\n", ")", "\n", ")", "\n", "+", "list", "(", "\n", "itertools", ".", "product", "(", "\n", "[", "\"habitat_baselines/config/test/ppo_pointnav_test.yaml\"", "]", ",", "\n", "[", "\"train\"", ",", "\"eval\"", "]", ",", "\n", "[", "True", "]", ",", "\n", "[", "\n", "[", "]", ",", "\n", "[", "\n", "\"CenterCropper\"", ",", "\n", "\"ResizeShortestEdge\"", ",", "\n", "]", ",", "\n", "]", ",", "\n", ")", "\n", ")", ",", "\n", ")", "\n", "def", "test_trainers", "(", "test_cfg_path", ",", "mode", ",", "gpu2gpu", ",", "observation_transforms", ")", ":", "\n", "# For testing with world_size=1", "\n", "    ", "os", ".", "environ", "[", "\"MAIN_PORT\"", "]", "=", "str", "(", "find_free_port", "(", ")", ")", "\n", "\n", "if", "gpu2gpu", ":", "\n", "        ", "try", ":", "\n", "            ", "import", "habitat_sim", "\n", "", "except", "ImportError", ":", "\n", "            ", "pytest", ".", "skip", "(", "\"GPU-GPU requires Habitat-Sim\"", ")", "\n", "\n", "", "if", "not", "habitat_sim", ".", "cuda_enabled", ":", "\n", "            ", "pytest", ".", "skip", "(", "\"GPU-GPU requires CUDA\"", ")", "\n", "\n", "", "", "run_exp", "(", "\n", "test_cfg_path", ",", "\n", "mode", ",", "\n", "[", "\n", "\"TASK_CONFIG.SIMULATOR.HABITAT_SIM_V0.GPU_GPU\"", ",", "\n", "str", "(", "gpu2gpu", ")", ",", "\n", "\"RL.POLICY.OBS_TRANSFORMS.ENABLED_TRANSFORMS\"", ",", "\n", "str", "(", "tuple", "(", "observation_transforms", ")", ")", ",", "\n", "]", ",", "\n", ")", "\n", "\n", "# Needed to destroy the trainer", "\n", "gc", ".", "collect", "(", ")", "\n", "\n", "# Deinit processes group", "\n", "if", "torch", ".", "distributed", ".", "is_initialized", "(", ")", ":", "\n", "        ", "torch", ".", "distributed", ".", "destroy_process_group", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_baseline_trainers.test_cubemap_stiching": [[112, 226], ["pytest.mark.skipif", "pytest.mark.parametrize", "pytest.mark.parametrize", "pytest.mark.parametrize", "get_config", "get_config.defrost", "getattr", "range", "get_config.freeze", "config.SIMULATOR.AGENT_0.SENSORS.append", "copy.deepcopy", "camera_template.lower", "sensor_uuids.append", "setattr", "config.SIMULATOR.AGENT_0.SENSORS.append", "tuple", "execute_exp", "torch.distributed.is_initialized", "tuple", "torch.distributed.destroy_process_group", "batch_obs", "copy.deepcopy", "baseline_registry.get_obs_transformer", "baseline_registry.get_obs_transformer.", "baseline_registry.get_obs_transformer", "baseline_registry.get_obs_transformer.", "obs_trans_to_eq.", "obs_trans_to_cube.", "torch.stack", "torch.flatten", "apply_blur.permute", "apply_blur.permute", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d.", "torch.nn.AvgPool2d.", "torch.abs", "ValueError", "config.clone", "config.clone.defrost", "config.clone.freeze", "env_fn_args.append", "habitat.core.vector_env.VectorEnv", "envs.reset", "torch.abs.mean().item", "apply_blur.float", "apply_blur.float", "torch.abs.mean"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_baselines.run.execute_exp", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.batch_obs", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.baseline_registry.BaselineRegistry.get_obs_transformer", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.baseline_registry.BaselineRegistry.get_obs_transformer", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset"], ["", "", "@", "pytest", ".", "mark", ".", "skipif", "(", "\n", "not", "baseline_installed", ",", "reason", "=", "\"baseline sub-module not installed\"", "\n", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"test_cfg_path,mode\"", ",", "\n", "[", "\n", "[", "\n", "\"habitat_baselines/config/test/ppo_pointnav_test.yaml\"", ",", "\n", "\"train\"", ",", "\n", "]", ",", "\n", "]", ",", "\n", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"camera\"", ",", "[", "\"equirect\"", ",", "\"fisheye\"", ",", "\"cubemap\"", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"sensor_type\"", ",", "[", "\"RGB\"", ",", "\"DEPTH\"", "]", ")", "\n", "def", "test_cubemap_stiching", "(", "\n", "test_cfg_path", ":", "str", ",", "mode", ":", "str", ",", "camera", ":", "str", ",", "sensor_type", ":", "str", "\n", ")", ":", "\n", "    ", "meta_config", "=", "get_config", "(", "config_paths", "=", "test_cfg_path", ")", "\n", "meta_config", ".", "defrost", "(", ")", "\n", "config", "=", "meta_config", ".", "TASK_CONFIG", "\n", "CAMERA_NUM", "=", "6", "\n", "orient", "=", "[", "\n", "[", "0", ",", "math", ".", "pi", ",", "0", "]", ",", "# Back", "\n", "[", "-", "math", ".", "pi", "/", "2", ",", "0", ",", "0", "]", ",", "# Down", "\n", "[", "0", ",", "0", ",", "0", "]", ",", "# Front", "\n", "[", "0", ",", "math", ".", "pi", "/", "2", ",", "0", "]", ",", "# Right", "\n", "[", "0", ",", "3", "/", "2", "*", "math", ".", "pi", ",", "0", "]", ",", "# Left", "\n", "[", "math", ".", "pi", "/", "2", ",", "0", ",", "0", "]", ",", "# Up", "\n", "]", "\n", "sensor_uuids", "=", "[", "]", "\n", "\n", "if", "f\"{sensor_type}_SENSOR\"", "not", "in", "config", ".", "SIMULATOR", ".", "AGENT_0", ".", "SENSORS", ":", "\n", "        ", "config", ".", "SIMULATOR", ".", "AGENT_0", ".", "SENSORS", ".", "append", "(", "f\"{sensor_type}_SENSOR\"", ")", "\n", "", "sensor", "=", "getattr", "(", "config", ".", "SIMULATOR", ",", "f\"{sensor_type}_SENSOR\"", ")", "\n", "for", "camera_id", "in", "range", "(", "CAMERA_NUM", ")", ":", "\n", "        ", "camera_template", "=", "f\"{sensor_type}_{camera_id}\"", "\n", "camera_config", "=", "deepcopy", "(", "sensor", ")", "\n", "camera_config", ".", "ORIENTATION", "=", "orient", "[", "camera_id", "]", "\n", "camera_config", ".", "UUID", "=", "camera_template", ".", "lower", "(", ")", "\n", "sensor_uuids", ".", "append", "(", "camera_config", ".", "UUID", ")", "\n", "setattr", "(", "config", ".", "SIMULATOR", ",", "camera_template", ",", "camera_config", ")", "\n", "config", ".", "SIMULATOR", ".", "AGENT_0", ".", "SENSORS", ".", "append", "(", "camera_template", ")", "\n", "\n", "", "meta_config", ".", "TASK_CONFIG", "=", "config", "\n", "meta_config", ".", "SENSORS", "=", "config", ".", "SIMULATOR", ".", "AGENT_0", ".", "SENSORS", "\n", "if", "camera", "==", "\"equirect\"", ":", "\n", "        ", "meta_config", ".", "RL", ".", "POLICY", ".", "OBS_TRANSFORMS", ".", "CUBE2EQ", ".", "SENSOR_UUIDS", "=", "tuple", "(", "\n", "sensor_uuids", "\n", ")", "\n", "", "elif", "camera", "==", "\"fisheye\"", ":", "\n", "        ", "meta_config", ".", "RL", ".", "POLICY", ".", "OBS_TRANSFORMS", ".", "CUBE2FISH", ".", "SENSOR_UUIDS", "=", "tuple", "(", "\n", "sensor_uuids", "\n", ")", "\n", "", "meta_config", ".", "freeze", "(", ")", "\n", "if", "camera", "in", "[", "\"equirect\"", ",", "\"fisheye\"", "]", ":", "\n", "        ", "execute_exp", "(", "meta_config", ",", "mode", ")", "\n", "# Deinit processes group", "\n", "if", "torch", ".", "distributed", ".", "is_initialized", "(", ")", ":", "\n", "            ", "torch", ".", "distributed", ".", "destroy_process_group", "(", ")", "\n", "\n", "", "", "elif", "camera", "==", "\"cubemap\"", ":", "\n", "# 1) Generate an equirect image from cubemap images.", "\n", "# 2) Generate cubemap images from the equirect image.", "\n", "# 3) Compare the input and output cubemap", "\n", "        ", "env_fn_args", "=", "[", "]", "\n", "for", "split", "in", "[", "\"train\"", ",", "\"val\"", "]", ":", "\n", "            ", "tmp_config", "=", "config", ".", "clone", "(", ")", "\n", "tmp_config", ".", "defrost", "(", ")", "\n", "tmp_config", ".", "DATASET", "[", "\"SPLIT\"", "]", "=", "split", "\n", "tmp_config", ".", "freeze", "(", ")", "\n", "env_fn_args", ".", "append", "(", "(", "tmp_config", ",", "None", ")", ")", "\n", "\n", "", "with", "VectorEnv", "(", "env_fn_args", "=", "env_fn_args", ")", "as", "envs", ":", "\n", "            ", "observations", "=", "envs", ".", "reset", "(", ")", "\n", "", "batch", "=", "batch_obs", "(", "observations", ")", "\n", "orig_batch", "=", "deepcopy", "(", "batch", ")", "\n", "\n", "#  ProjectionTransformer", "\n", "obs_trans_to_eq", "=", "baseline_registry", ".", "get_obs_transformer", "(", "\n", "\"CubeMap2Equirect\"", "\n", ")", "\n", "cube2equirect", "=", "obs_trans_to_eq", "(", "sensor_uuids", ",", "(", "256", ",", "512", ")", ")", "\n", "obs_trans_to_cube", "=", "baseline_registry", ".", "get_obs_transformer", "(", "\n", "\"Equirect2CubeMap\"", "\n", ")", "\n", "equirect2cube", "=", "obs_trans_to_cube", "(", "\n", "cube2equirect", ".", "target_uuids", ",", "(", "256", ",", "256", ")", "\n", ")", "\n", "\n", "# Cubemap to Equirect to Cubemap", "\n", "batch_eq", "=", "cube2equirect", "(", "batch", ")", "\n", "batch_cube", "=", "equirect2cube", "(", "batch_eq", ")", "\n", "\n", "# Extract input and output cubemap", "\n", "output_cube", "=", "batch_cube", "[", "cube2equirect", ".", "target_uuids", "[", "0", "]", "]", "\n", "input_cube", "=", "[", "orig_batch", "[", "key", "]", "for", "key", "in", "sensor_uuids", "]", "\n", "input_cube", "=", "torch", ".", "stack", "(", "input_cube", ",", "axis", "=", "1", ")", "\n", "input_cube", "=", "torch", ".", "flatten", "(", "input_cube", ",", "end_dim", "=", "1", ")", "\n", "\n", "# Apply blur to absorb difference (blur, etc.) caused by conversion", "\n", "if", "sensor_type", "==", "\"RGB\"", ":", "\n", "            ", "output_cube", "=", "output_cube", ".", "float", "(", ")", "/", "255", "\n", "input_cube", "=", "input_cube", ".", "float", "(", ")", "/", "255", "\n", "", "output_cube", "=", "output_cube", ".", "permute", "(", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "# NHWC => NCHW", "\n", "input_cube", "=", "input_cube", ".", "permute", "(", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "# NHWC => NCHW", "\n", "apply_blur", "=", "torch", ".", "nn", ".", "AvgPool2d", "(", "5", ",", "3", ",", "2", ")", "\n", "output_cube", "=", "apply_blur", "(", "output_cube", ")", "\n", "input_cube", "=", "apply_blur", "(", "input_cube", ")", "\n", "\n", "# Calculate the difference", "\n", "diff", "=", "torch", ".", "abs", "(", "output_cube", "-", "input_cube", ")", "\n", "assert", "diff", ".", "mean", "(", ")", ".", "item", "(", ")", "<", "0.01", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f\"Unknown camera name: {camera}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_baseline_trainers.test_eval_config": [[228, 251], ["pytest.mark.skipif", "get_config", "get_config", "BaseRLTrainer", "BaseRLTrainer._setup_eval_config", "BaseRLTrainer", "BaseRLTrainer._setup_eval_config", "get_config"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_trainer.BaseTrainer._setup_eval_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_trainer.BaseTrainer._setup_eval_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config"], ["", "", "@", "pytest", ".", "mark", ".", "skipif", "(", "\n", "not", "baseline_installed", ",", "reason", "=", "\"baseline sub-module not installed\"", "\n", ")", "\n", "def", "test_eval_config", "(", ")", ":", "\n", "    ", "ckpt_opts", "=", "[", "\"VIDEO_OPTION\"", ",", "\"[]\"", "]", "\n", "eval_opts", "=", "[", "\"VIDEO_OPTION\"", ",", "\"['disk']\"", "]", "\n", "\n", "ckpt_cfg", "=", "get_config", "(", "None", ",", "ckpt_opts", ")", "\n", "assert", "ckpt_cfg", ".", "VIDEO_OPTION", "==", "[", "]", "\n", "assert", "ckpt_cfg", ".", "CMD_TRAILING_OPTS", "==", "[", "\"VIDEO_OPTION\"", ",", "\"[]\"", "]", "\n", "\n", "eval_cfg", "=", "get_config", "(", "None", ",", "eval_opts", ")", "\n", "assert", "eval_cfg", ".", "VIDEO_OPTION", "==", "[", "\"disk\"", "]", "\n", "assert", "eval_cfg", ".", "CMD_TRAILING_OPTS", "==", "[", "\"VIDEO_OPTION\"", ",", "\"['disk']\"", "]", "\n", "\n", "trainer", "=", "BaseRLTrainer", "(", "get_config", "(", ")", ")", "\n", "assert", "trainer", ".", "config", ".", "VIDEO_OPTION", "==", "[", "\"disk\"", ",", "\"tensorboard\"", "]", "\n", "returned_config", "=", "trainer", ".", "_setup_eval_config", "(", "checkpoint_config", "=", "ckpt_cfg", ")", "\n", "assert", "returned_config", ".", "VIDEO_OPTION", "==", "[", "]", "\n", "\n", "trainer", "=", "BaseRLTrainer", "(", "eval_cfg", ")", "\n", "returned_config", "=", "trainer", ".", "_setup_eval_config", "(", "ckpt_cfg", ")", "\n", "assert", "returned_config", ".", "VIDEO_OPTION", "==", "[", "\"disk\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_baseline_trainers.__do_pause_test": [[253, 314], ["PausableShim", "torch.arange().view().expand", "torch.arange().view", "torch.arange().view", "torch.arange().view", "BaseRLTrainer._pause_envs", "sorted", "batch.items", "torch.arange().view().expand", "list", "test_recurrent_hidden_states[].numpy().tolist", "not_done_masks[].numpy().tolist", "current_episode_reward[].numpy().tolist", "prev_actions[].numpy().tolist", "list", "len", "test_baseline_trainers.._running.pop", "torch.arange().view", "torch.arange", "torch.arange", "torch.arange", "range", "set", "set", "torch.arange().view().expand.size", "len", "list", "v[].numpy().tolist", "range", "torch.arange().view", "range", "test_recurrent_hidden_states[].numpy", "not_done_masks[].numpy", "current_episode_reward[].numpy", "prev_actions[].numpy", "v.size", "len", "torch.arange", "v[].numpy", "torch.arange"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_trainer.BaseRLTrainer._pause_envs", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.set", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.set", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size"], ["", "def", "__do_pause_test", "(", "num_envs", ",", "envs_to_pause", ")", ":", "\n", "    ", "class", "PausableShim", "(", "VectorEnv", ")", ":", "\n", "        ", "def", "__init__", "(", "self", ",", "num_envs", ")", ":", "\n", "            ", "self", ".", "_running", "=", "list", "(", "range", "(", "num_envs", ")", ")", "\n", "\n", "", "@", "property", "\n", "def", "num_envs", "(", "self", ")", ":", "\n", "            ", "return", "len", "(", "self", ".", "_running", ")", "\n", "\n", "", "def", "pause_at", "(", "self", ",", "idx", ")", ":", "\n", "            ", "self", ".", "_running", ".", "pop", "(", "idx", ")", "\n", "\n", "", "", "envs", "=", "PausableShim", "(", "num_envs", ")", "\n", "test_recurrent_hidden_states", "=", "(", "\n", "torch", ".", "arange", "(", "num_envs", ")", ".", "view", "(", "num_envs", ",", "1", ",", "1", ")", ".", "expand", "(", "num_envs", ",", "4", ",", "512", ")", "\n", ")", "\n", "not_done_masks", "=", "torch", ".", "arange", "(", "num_envs", ")", ".", "view", "(", "num_envs", ",", "1", ")", "\n", "current_episode_reward", "=", "torch", ".", "arange", "(", "num_envs", ")", ".", "view", "(", "num_envs", ",", "1", ")", "\n", "prev_actions", "=", "torch", ".", "arange", "(", "num_envs", ")", ".", "view", "(", "num_envs", ",", "1", ")", "\n", "batch", "=", "{", "\n", "k", ":", "torch", ".", "arange", "(", "num_envs", ")", "\n", ".", "view", "(", "num_envs", ",", "1", ",", "1", ",", "1", ")", "\n", ".", "expand", "(", "num_envs", ",", "3", ",", "256", ",", "256", ")", "\n", "for", "k", "in", "[", "\"a\"", ",", "\"b\"", "]", "\n", "}", "\n", "rgb_frames", "=", "[", "[", "idx", "]", "for", "idx", "in", "range", "(", "num_envs", ")", "]", "\n", "\n", "(", "\n", "envs", ",", "\n", "test_recurrent_hidden_states", ",", "\n", "not_done_masks", ",", "\n", "current_episode_reward", ",", "\n", "prev_actions", ",", "\n", "batch", ",", "\n", "rgb_frames", ",", "\n", ")", "=", "BaseRLTrainer", ".", "_pause_envs", "(", "\n", "envs_to_pause", ",", "\n", "envs", ",", "\n", "test_recurrent_hidden_states", ",", "\n", "not_done_masks", ",", "\n", "current_episode_reward", ",", "\n", "prev_actions", ",", "\n", "batch", ",", "\n", "rgb_frames", ",", "\n", ")", "\n", "\n", "expected", "=", "sorted", "(", "set", "(", "range", "(", "num_envs", ")", ")", "-", "set", "(", "envs_to_pause", ")", ")", "\n", "\n", "assert", "envs", ".", "_running", "==", "expected", "\n", "\n", "assert", "list", "(", "test_recurrent_hidden_states", ".", "size", "(", ")", ")", "==", "[", "len", "(", "expected", ")", ",", "4", ",", "512", "]", "\n", "assert", "test_recurrent_hidden_states", "[", ":", ",", "0", ",", "0", "]", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "==", "expected", "\n", "\n", "assert", "not_done_masks", "[", ":", ",", "0", "]", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "==", "expected", "\n", "assert", "current_episode_reward", "[", ":", ",", "0", "]", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "==", "expected", "\n", "assert", "prev_actions", "[", ":", ",", "0", "]", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "==", "expected", "\n", "assert", "[", "v", "[", "0", "]", "for", "v", "in", "rgb_frames", "]", "==", "expected", "\n", "\n", "for", "_", ",", "v", "in", "batch", ".", "items", "(", ")", ":", "\n", "        ", "assert", "list", "(", "v", ".", "size", "(", ")", ")", "==", "[", "len", "(", "expected", ")", ",", "3", ",", "256", ",", "256", "]", "\n", "assert", "v", "[", ":", ",", "0", ",", "0", ",", "0", "]", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "==", "expected", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_baseline_trainers.test_pausing": [[316, 335], ["pytest.mark.skipif", "random.seed", "range", "test_baseline_trainers.__do_pause_test", "test_baseline_trainers.__do_pause_test", "random.randint", "list", "random.shuffle", "sorted", "test_baseline_trainers.__do_pause_test", "list", "range", "range", "random.randint"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.seed", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_baseline_trainers.__do_pause_test", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_baseline_trainers.__do_pause_test", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_baseline_trainers.__do_pause_test"], ["", "", "@", "pytest", ".", "mark", ".", "skipif", "(", "\n", "not", "baseline_installed", ",", "reason", "=", "\"baseline sub-module not installed\"", "\n", ")", "\n", "def", "test_pausing", "(", ")", ":", "\n", "    ", "random", ".", "seed", "(", "0", ")", "\n", "for", "_", "in", "range", "(", "100", ")", ":", "\n", "        ", "num_envs", "=", "random", ".", "randint", "(", "1", ",", "13", ")", "\n", "envs_to_pause", "=", "list", "(", "range", "(", "num_envs", ")", ")", "\n", "\n", "random", ".", "shuffle", "(", "envs_to_pause", ")", "\n", "envs_to_pause", "=", "envs_to_pause", "[", ":", "random", ".", "randint", "(", "0", ",", "num_envs", ")", "]", "\n", "# envs_to_pause is assumed to be sorted in the function", "\n", "envs_to_pause", "=", "sorted", "(", "envs_to_pause", ")", "\n", "\n", "__do_pause_test", "(", "num_envs", ",", "envs_to_pause", ")", "\n", "\n", "", "num_envs", "=", "8", "\n", "__do_pause_test", "(", "num_envs", ",", "[", "]", ")", "\n", "__do_pause_test", "(", "num_envs", ",", "list", "(", "range", "(", "num_envs", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_baseline_trainers.test_batch_obs": [[337, 366], ["pytest.mark.skipif", "pytest.mark.parametrize", "torch.device", "torch.device", "ObservationBatchingCache", "batch_obs", "pytest.skip", "torch.cuda.is_available", "t.numpy", "numpy_if", "range", "torch.randn", "range"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.batch_obs"], ["", "@", "pytest", ".", "mark", ".", "skipif", "(", "\n", "not", "baseline_installed", ",", "reason", "=", "\"baseline sub-module not installed\"", "\n", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"sensor_device,batched_device\"", ",", "\n", "[", "(", "\"cpu\"", ",", "\"cpu\"", ")", ",", "(", "\"cpu\"", ",", "\"cuda\"", ")", ",", "(", "\"cuda\"", ",", "\"cuda\"", ")", "]", ",", "\n", ")", "\n", "def", "test_batch_obs", "(", "sensor_device", ",", "batched_device", ")", ":", "\n", "    ", "if", "(", "\n", "\"cuda\"", "in", "(", "sensor_device", ",", "batched_device", ")", "\n", "and", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", ")", ":", "\n", "        ", "pytest", ".", "skip", "(", "\"CUDA not avaliable\"", ")", "\n", "\n", "", "sensor_device", "=", "torch", ".", "device", "(", "sensor_device", ")", "\n", "batched_device", "=", "torch", ".", "device", "(", "batched_device", ")", "\n", "\n", "numpy_if", "=", "lambda", "t", ":", "t", ".", "numpy", "(", ")", "if", "sensor_device", ".", "type", "==", "\"cpu\"", "else", "t", "\n", "\n", "cache", "=", "ObservationBatchingCache", "(", ")", "\n", "sensors", "=", "[", "\n", "{", "\n", "f\"{s}\"", ":", "numpy_if", "(", "torch", ".", "randn", "(", "128", ",", "128", ",", "device", "=", "sensor_device", ")", ")", "\n", "for", "s", "in", "range", "(", "4", ")", "\n", "}", "\n", "for", "_", "in", "range", "(", "4", ")", "\n", "]", "\n", "\n", "_", "=", "batch_obs", "(", "sensors", ",", "device", "=", "batched_device", ",", "cache", "=", "cache", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_baseline_resnet._npobs_dict_to_tensorobs_dict": [[22, 27], ["npobs_dict.items", "torch.as_tensor().unsqueeze", "torch.as_tensor"], "function", ["None"], ["", "def", "_npobs_dict_to_tensorobs_dict", "(", "npobs_dict", ")", ":", "\n", "    ", "result", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "npobs_dict", ".", "items", "(", ")", ":", "\n", "        ", "result", "[", "k", "]", "=", "torch", ".", "as_tensor", "(", "v", ")", ".", "unsqueeze", "(", "0", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_baseline_resnet.test_resnetencoder_initialization": [[29, 74], ["pytest.mark.skipif", "pytest.mark.parametrize", "pytest.mark.parametrize", "ResNetEncoder", "observation_space.sample", "test_baseline_resnet._npobs_dict_to_tensorobs_dict", "ResNetEncoder.forward", "spaces.Dict", "spaces.Dict", "spaces.Dict", "spaces.Dict", "spaces.Dict", "spaces.Box", "spaces.Box", "spaces.Box", "spaces.Box", "spaces.Box", "spaces.Box", "spaces.Box", "spaces.Box", "spaces.Box", "spaces.Box"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.sample", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_baseline_resnet._npobs_dict_to_tensorobs_dict", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.ProjectionTransformer.forward"], ["", "@", "pytest", ".", "mark", ".", "skipif", "(", "\n", "not", "baseline_installed", ",", "reason", "=", "\"baseline sub-module not installed\"", "\n", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"observation_space\"", ",", "\n", "[", "\n", "spaces", ".", "Dict", "(", "\n", "{", "\n", "\"rgb_1\"", ":", "spaces", ".", "Box", "(", "low", "=", "0", ",", "high", "=", "1", ",", "shape", "=", "(", "62", ",", "30", ",", "3", ")", ")", ",", "\n", "\"rgb_2\"", ":", "spaces", ".", "Box", "(", "low", "=", "0", ",", "high", "=", "1", ",", "shape", "=", "(", "62", ",", "30", ",", "2", ")", ")", ",", "\n", "}", ",", "\n", ")", ",", "\n", "spaces", ".", "Dict", "(", "\n", "{", "\n", "\"rgb_1\"", ":", "spaces", ".", "Box", "(", "low", "=", "0", ",", "high", "=", "1", ",", "shape", "=", "(", "63", ",", "84", ",", "1", ")", ")", ",", "\n", "\"depth_1\"", ":", "spaces", ".", "Box", "(", "low", "=", "0", ",", "high", "=", "1", ",", "shape", "=", "(", "63", ",", "84", ",", "2", ")", ")", ",", "\n", "}", ",", "\n", ")", ",", "\n", "spaces", ".", "Dict", "(", "\n", "{", "\n", "\"rgb_1\"", ":", "spaces", ".", "Box", "(", "low", "=", "0", ",", "high", "=", "1", ",", "shape", "=", "(", "64", ",", "128", ",", "3", ")", ")", ",", "\n", "}", ",", "\n", ")", ",", "\n", "spaces", ".", "Dict", "(", "\n", "{", "\n", "\"rgb_1\"", ":", "spaces", ".", "Box", "(", "low", "=", "0", ",", "high", "=", "1", ",", "shape", "=", "(", "65", ",", "30", ",", "3", ")", ")", ",", "\n", "\"rgb_2\"", ":", "spaces", ".", "Box", "(", "low", "=", "0", ",", "high", "=", "1", ",", "shape", "=", "(", "65", ",", "30", ",", "1", ")", ")", ",", "\n", "\"depth_1\"", ":", "spaces", ".", "Box", "(", "low", "=", "0", ",", "high", "=", "1", ",", "shape", "=", "(", "65", ",", "30", ",", "2", ")", ")", ",", "\n", "}", ",", "\n", ")", ",", "\n", "spaces", ".", "Dict", "(", "\n", "{", "\n", "\"rgb_1\"", ":", "spaces", ".", "Box", "(", "low", "=", "0", ",", "high", "=", "1", ",", "shape", "=", "(", "66", ",", "64", ",", "3", ")", ")", ",", "\n", "\"depth_2\"", ":", "spaces", ".", "Box", "(", "low", "=", "0", ",", "high", "=", "1", ",", "shape", "=", "(", "66", ",", "64", ",", "2", ")", ")", ",", "\n", "}", ",", "\n", ")", ",", "\n", "]", ",", "\n", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"backbone\"", ",", "[", "resnet18", ",", "resnet50", "]", ")", "\n", "def", "test_resnetencoder_initialization", "(", "observation_space", ",", "backbone", ")", ":", "\n", "    ", "encoder", "=", "ResNetEncoder", "(", "observation_space", ",", "make_backbone", "=", "backbone", ")", "\n", "obs", "=", "observation_space", ".", "sample", "(", ")", "\n", "t_obs", "=", "_npobs_dict_to_tensorobs_dict", "(", "obs", ")", "\n", "out", "=", "encoder", ".", "forward", "(", "t_obs", ")", "\n", "assert", "out", ".", "shape", "==", "(", "1", ",", "*", "encoder", ".", "output_shape", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_ddppo_reduce._worker_fn": [[26, 117], ["torch.distributed.TCPStore", "torch.distributed.init_process_group", "habitat_baselines.config.default.get_config", "gym.spaces.Dict", "habitat.core.spaces.ActionSpace", "habitat_baselines.rl.ppo.policy.PointNavBaselinePolicy.from_config", "PointNavBaselinePolicy.from_config.to", "habitat_baselines.rl.ddppo.algo.DDPPO", "habitat_baselines.rl.ddppo.algo.DDPPO.init_distributed", "habitat_baselines.common.rollout_storage.RolloutStorage", "habitat_baselines.common.rollout_storage.RolloutStorage.to", "habitat_baselines.common.rollout_storage.RolloutStorage.buffers[].items", "habitat_baselines.common.rollout_storage.RolloutStorage.advance_rollout", "habitat_baselines.common.rollout_storage.RolloutStorage.advance_rollout", "next", "habitat_baselines.rl.ddppo.algo.DDPPO._evaluate_actions", "PointNavBaselinePolicy.from_config.parameters", "torch.cuda.is_available", "torch.device", "torch.device", "torch.nn.Linear", "torch.randn_like", "habitat_baselines.common.rollout_storage.RolloutStorage.recurrent_generator", "gym.spaces.Box", "habitat.core.spaces.EmptySpace", "torch.distributed.all_gather", "range", "dist_entropy.mean", "param.grad.detach().clone", "torch.isclose().all", "value.mean", "action_log_probs.mean", "range", "numpy.finfo", "numpy.finfo", "param.grad.detach", "torch.isclose"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.Equirect2CubeMap.from_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.algo.ddppo.DecentralizedDistributedMixin.init_distributed", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.advance_rollout", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.advance_rollout", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.algo.ddppo.DecentralizedDistributedMixin._evaluate_actions", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.nn_skill.NnSkillPolicy.parameters", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.recurrent_generator"], ["def", "_worker_fn", "(", "\n", "world_rank", ":", "int", ",", "world_size", ":", "int", ",", "port", ":", "int", ",", "unused_params", ":", "bool", "\n", ")", ":", "\n", "    ", "device", "=", "(", "\n", "torch", ".", "device", "(", "\"cuda\"", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "else", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", ")", "\n", "tcp_store", "=", "distrib", ".", "TCPStore", "(", "# type: ignore", "\n", "\"127.0.0.1\"", ",", "port", ",", "world_size", ",", "world_rank", "==", "0", "\n", ")", "\n", "distrib", ".", "init_process_group", "(", "\n", "\"gloo\"", ",", "store", "=", "tcp_store", ",", "rank", "=", "world_rank", ",", "world_size", "=", "world_size", "\n", ")", "\n", "\n", "config", "=", "get_config", "(", "\"habitat_baselines/config/test/ppo_pointnav_test.yaml\"", ")", "\n", "obs_space", "=", "gym", ".", "spaces", ".", "Dict", "(", "\n", "{", "\n", "IntegratedPointGoalGPSAndCompassSensor", ".", "cls_uuid", ":", "gym", ".", "spaces", ".", "Box", "(", "\n", "low", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "min", ",", "\n", "high", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "max", ",", "\n", "shape", "=", "(", "2", ",", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n", "}", "\n", ")", "\n", "action_space", "=", "ActionSpace", "(", "{", "\"move\"", ":", "EmptySpace", "(", ")", "}", ")", "\n", "actor_critic", "=", "PointNavBaselinePolicy", ".", "from_config", "(", "\n", "config", ",", "obs_space", ",", "action_space", "\n", ")", "\n", "# This use adds some arbitrary parameters that aren't part of the computation", "\n", "# graph, so they will mess up DDP if they aren't correctly ignored by it", "\n", "if", "unused_params", ":", "\n", "        ", "actor_critic", ".", "unused", "=", "nn", ".", "Linear", "(", "64", ",", "64", ")", "\n", "\n", "", "actor_critic", ".", "to", "(", "device", "=", "device", ")", "\n", "ppo_cfg", "=", "config", ".", "RL", ".", "PPO", "\n", "agent", "=", "DDPPO", "(", "\n", "actor_critic", "=", "actor_critic", ",", "\n", "clip_param", "=", "ppo_cfg", ".", "clip_param", ",", "\n", "ppo_epoch", "=", "ppo_cfg", ".", "ppo_epoch", ",", "\n", "num_mini_batch", "=", "ppo_cfg", ".", "num_mini_batch", ",", "\n", "value_loss_coef", "=", "ppo_cfg", ".", "value_loss_coef", ",", "\n", "entropy_coef", "=", "ppo_cfg", ".", "entropy_coef", ",", "\n", "lr", "=", "ppo_cfg", ".", "lr", ",", "\n", "eps", "=", "ppo_cfg", ".", "eps", ",", "\n", "max_grad_norm", "=", "ppo_cfg", ".", "max_grad_norm", ",", "\n", "use_normalized_advantage", "=", "ppo_cfg", ".", "use_normalized_advantage", ",", "\n", ")", "\n", "agent", ".", "init_distributed", "(", ")", "\n", "rollouts", "=", "RolloutStorage", "(", "\n", "ppo_cfg", ".", "num_steps", ",", "\n", "2", ",", "\n", "obs_space", ",", "\n", "action_space", ",", "\n", "ppo_cfg", ".", "hidden_size", ",", "\n", "num_recurrent_layers", "=", "actor_critic", ".", "net", ".", "num_recurrent_layers", ",", "\n", "is_double_buffered", "=", "False", ",", "\n", ")", "\n", "rollouts", ".", "to", "(", "device", ")", "\n", "\n", "for", "k", ",", "v", "in", "rollouts", ".", "buffers", "[", "\"observations\"", "]", ".", "items", "(", ")", ":", "\n", "        ", "rollouts", ".", "buffers", "[", "\"observations\"", "]", "[", "k", "]", "=", "torch", ".", "randn_like", "(", "v", ")", "\n", "\n", "# Add two steps so batching works", "\n", "", "rollouts", ".", "advance_rollout", "(", ")", "\n", "rollouts", ".", "advance_rollout", "(", ")", "\n", "\n", "# Get a single batch", "\n", "batch", "=", "next", "(", "rollouts", ".", "recurrent_generator", "(", "rollouts", ".", "buffers", "[", "\"returns\"", "]", ",", "1", ")", ")", "\n", "\n", "# Call eval actions through the internal wrapper that is used in", "\n", "# agent.update", "\n", "value", ",", "action_log_probs", ",", "dist_entropy", ",", "_", "=", "agent", ".", "_evaluate_actions", "(", "\n", "batch", "[", "\"observations\"", "]", ",", "\n", "batch", "[", "\"recurrent_hidden_states\"", "]", ",", "\n", "batch", "[", "\"prev_actions\"", "]", ",", "\n", "batch", "[", "\"masks\"", "]", ",", "\n", "batch", "[", "\"actions\"", "]", ",", "\n", ")", "\n", "# Backprop on things", "\n", "(", "value", ".", "mean", "(", ")", "+", "action_log_probs", ".", "mean", "(", ")", "+", "dist_entropy", ".", "mean", "(", ")", ")", ".", "backward", "(", ")", "\n", "\n", "# Make sure all ranks have very similar parameters", "\n", "for", "param", "in", "actor_critic", ".", "parameters", "(", ")", ":", "\n", "        ", "if", "param", ".", "grad", "is", "not", "None", ":", "\n", "            ", "grads", "=", "[", "param", ".", "grad", ".", "detach", "(", ")", ".", "clone", "(", ")", "for", "_", "in", "range", "(", "world_size", ")", "]", "\n", "distrib", ".", "all_gather", "(", "grads", ",", "grads", "[", "world_rank", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "world_size", ")", ":", "\n", "                ", "assert", "torch", ".", "isclose", "(", "grads", "[", "i", "]", ",", "grads", "[", "world_rank", "]", ")", ".", "all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_ddppo_reduce.test_ddppo_reduce": [[119, 126], ["pytest.mark.parametrize", "torch.multiprocessing.spawn", "int"], "function", ["None"], ["", "", "", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"unused_params\"", ",", "[", "True", ",", "False", "]", ")", "\n", "def", "test_ddppo_reduce", "(", "unused_params", ":", "bool", ")", ":", "\n", "    ", "world_size", "=", "2", "\n", "torch", ".", "multiprocessing", ".", "spawn", "(", "\n", "_worker_fn", ",", "\n", "args", "=", "(", "world_size", ",", "8748", "+", "int", "(", "unused_params", ")", ",", "unused_params", ")", ",", "\n", "nprocs", "=", "world_size", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_robot_wrapper.make_cfg": [[56, 253], ["habitat_sim.SimulatorConfiguration", "habitat_sim.SimulatorConfiguration", "settings.get", "habitat_sim.agent.AgentConfiguration", "habitat_sim.agent.AgentConfiguration", "habitat_sim.Configuration", "habitat_sim.Configuration", "print", "hasattr", "RuntimeError", "habitat_sim.CameraSensorSpec", "habitat_sim.CameraSensorSpec", "test_robot_wrapper.make_cfg.create_camera_spec"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get"], ["def", "make_cfg", "(", "settings", ")", ":", "\n", "    ", "sim_cfg", "=", "habitat_sim", ".", "SimulatorConfiguration", "(", ")", "\n", "if", "\"scene_dataset_config_file\"", "in", "settings", ":", "\n", "        ", "sim_cfg", ".", "scene_dataset_config_file", "=", "settings", "[", "\n", "\"scene_dataset_config_file\"", "\n", "]", "\n", "", "sim_cfg", ".", "frustum_culling", "=", "settings", ".", "get", "(", "\"frustum_culling\"", ",", "False", ")", "\n", "if", "\"enable_physics\"", "in", "settings", ":", "\n", "        ", "sim_cfg", ".", "enable_physics", "=", "settings", "[", "\"enable_physics\"", "]", "\n", "", "if", "\"physics_config_file\"", "in", "settings", ":", "\n", "        ", "sim_cfg", ".", "physics_config_file", "=", "settings", "[", "\"physics_config_file\"", "]", "\n", "", "if", "not", "settings", "[", "\"silent\"", "]", ":", "\n", "        ", "print", "(", "\"sim_cfg.physics_config_file = \"", "+", "sim_cfg", ".", "physics_config_file", ")", "\n", "", "if", "\"scene_light_setup\"", "in", "settings", ":", "\n", "        ", "sim_cfg", ".", "scene_light_setup", "=", "settings", "[", "\"scene_light_setup\"", "]", "\n", "", "sim_cfg", ".", "gpu_device_id", "=", "0", "\n", "if", "not", "hasattr", "(", "sim_cfg", ",", "\"scene_id\"", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "\n", "\"Error: Please upgrade habitat-sim. SimulatorConfig API version mismatch\"", "\n", ")", "\n", "", "sim_cfg", ".", "scene_id", "=", "settings", "[", "\"scene\"", "]", "\n", "\n", "# define default sensor parameters (see src/esp/Sensor/Sensor.h)", "\n", "sensor_specs", "=", "[", "]", "\n", "\n", "def", "create_camera_spec", "(", "**", "kw_args", ")", ":", "\n", "        ", "camera_sensor_spec", "=", "habitat_sim", ".", "CameraSensorSpec", "(", ")", "\n", "camera_sensor_spec", ".", "sensor_type", "=", "habitat_sim", ".", "SensorType", ".", "COLOR", "\n", "camera_sensor_spec", ".", "resolution", "=", "[", "settings", "[", "\"height\"", "]", ",", "settings", "[", "\"width\"", "]", "]", "\n", "camera_sensor_spec", ".", "position", "=", "[", "0", ",", "settings", "[", "\"sensor_height\"", "]", ",", "0", "]", "\n", "for", "k", "in", "kw_args", ":", "\n", "            ", "setattr", "(", "camera_sensor_spec", ",", "k", ",", "kw_args", "[", "k", "]", ")", "\n", "", "return", "camera_sensor_spec", "\n", "\n", "", "if", "settings", "[", "\"color_sensor\"", "]", ":", "\n", "        ", "color_sensor_spec", "=", "create_camera_spec", "(", "\n", "uuid", "=", "\"color_sensor\"", ",", "\n", "hfov", "=", "settings", "[", "\"hfov\"", "]", ",", "\n", "sensor_type", "=", "habitat_sim", ".", "SensorType", ".", "COLOR", ",", "\n", "sensor_subtype", "=", "habitat_sim", ".", "SensorSubType", ".", "PINHOLE", ",", "\n", ")", "\n", "sensor_specs", ".", "append", "(", "color_sensor_spec", ")", "\n", "\n", "", "if", "settings", "[", "\"depth_sensor\"", "]", ":", "\n", "        ", "depth_sensor_spec", "=", "create_camera_spec", "(", "\n", "uuid", "=", "\"depth_sensor\"", ",", "\n", "hfov", "=", "settings", "[", "\"hfov\"", "]", ",", "\n", "sensor_type", "=", "habitat_sim", ".", "SensorType", ".", "DEPTH", ",", "\n", "channels", "=", "1", ",", "\n", "sensor_subtype", "=", "habitat_sim", ".", "SensorSubType", ".", "PINHOLE", ",", "\n", ")", "\n", "sensor_specs", ".", "append", "(", "depth_sensor_spec", ")", "\n", "\n", "", "if", "settings", "[", "\"semantic_sensor\"", "]", ":", "\n", "        ", "semantic_sensor_spec", "=", "create_camera_spec", "(", "\n", "uuid", "=", "\"semantic_sensor\"", ",", "\n", "hfov", "=", "settings", "[", "\"hfov\"", "]", ",", "\n", "sensor_type", "=", "habitat_sim", ".", "SensorType", ".", "SEMANTIC", ",", "\n", "channels", "=", "1", ",", "\n", "sensor_subtype", "=", "habitat_sim", ".", "SensorSubType", ".", "PINHOLE", ",", "\n", ")", "\n", "sensor_specs", ".", "append", "(", "semantic_sensor_spec", ")", "\n", "\n", "", "if", "settings", "[", "\"ortho_rgba_sensor\"", "]", ":", "\n", "        ", "ortho_rgba_sensor_spec", "=", "create_camera_spec", "(", "\n", "uuid", "=", "\"ortho_rgba_sensor\"", ",", "\n", "sensor_type", "=", "habitat_sim", ".", "SensorType", ".", "COLOR", ",", "\n", "sensor_subtype", "=", "habitat_sim", ".", "SensorSubType", ".", "ORTHOGRAPHIC", ",", "\n", ")", "\n", "sensor_specs", ".", "append", "(", "ortho_rgba_sensor_spec", ")", "\n", "\n", "", "if", "settings", "[", "\"ortho_depth_sensor\"", "]", ":", "\n", "        ", "ortho_depth_sensor_spec", "=", "create_camera_spec", "(", "\n", "uuid", "=", "\"ortho_depth_sensor\"", ",", "\n", "sensor_type", "=", "habitat_sim", ".", "SensorType", ".", "DEPTH", ",", "\n", "channels", "=", "1", ",", "\n", "sensor_subtype", "=", "habitat_sim", ".", "SensorSubType", ".", "ORTHOGRAPHIC", ",", "\n", ")", "\n", "sensor_specs", ".", "append", "(", "ortho_depth_sensor_spec", ")", "\n", "\n", "", "if", "settings", "[", "\"ortho_semantic_sensor\"", "]", ":", "\n", "        ", "ortho_semantic_sensor_spec", "=", "create_camera_spec", "(", "\n", "uuid", "=", "\"ortho_semantic_sensor\"", ",", "\n", "sensor_type", "=", "habitat_sim", ".", "SensorType", ".", "SEMANTIC", ",", "\n", "channels", "=", "1", ",", "\n", "sensor_subtype", "=", "habitat_sim", ".", "SensorSubType", ".", "ORTHOGRAPHIC", ",", "\n", ")", "\n", "sensor_specs", ".", "append", "(", "ortho_semantic_sensor_spec", ")", "\n", "\n", "# TODO Figure out how to implement copying of specs", "\n", "", "def", "create_fisheye_spec", "(", "**", "kw_args", ")", ":", "\n", "        ", "fisheye_sensor_spec", "=", "habitat_sim", ".", "FisheyeSensorDoubleSphereSpec", "(", ")", "\n", "fisheye_sensor_spec", ".", "uuid", "=", "\"fisheye_sensor\"", "\n", "fisheye_sensor_spec", ".", "sensor_type", "=", "habitat_sim", ".", "SensorType", ".", "COLOR", "\n", "fisheye_sensor_spec", ".", "sensor_model_type", "=", "(", "\n", "habitat_sim", ".", "FisheyeSensorModelType", ".", "DOUBLE_SPHERE", "\n", ")", "\n", "\n", "# The default value (alpha, xi) is set to match the lens \"GoPro\" found in Table 3 of this paper:", "\n", "# Vladyslav Usenko, Nikolaus Demmel and Daniel Cremers: The Double Sphere", "\n", "# Camera Model, The International Conference on 3D Vision (3DV), 2018", "\n", "# You can find the intrinsic parameters for the other lenses in the same table as well.", "\n", "fisheye_sensor_spec", ".", "xi", "=", "-", "0.27", "\n", "fisheye_sensor_spec", ".", "alpha", "=", "0.57", "\n", "fisheye_sensor_spec", ".", "focal_length", "=", "[", "364.84", ",", "364.86", "]", "\n", "\n", "fisheye_sensor_spec", ".", "resolution", "=", "[", "\n", "settings", "[", "\"height\"", "]", ",", "\n", "settings", "[", "\"width\"", "]", ",", "\n", "]", "\n", "# The default principal_point_offset is the middle of the image", "\n", "fisheye_sensor_spec", ".", "principal_point_offset", "=", "None", "\n", "# default: fisheye_sensor_spec.principal_point_offset = [i/2 for i in fisheye_sensor_spec.resolution]", "\n", "fisheye_sensor_spec", ".", "position", "=", "[", "0", ",", "settings", "[", "\"sensor_height\"", "]", ",", "0", "]", "\n", "for", "k", "in", "kw_args", ":", "\n", "            ", "setattr", "(", "fisheye_sensor_spec", ",", "k", ",", "kw_args", "[", "k", "]", ")", "\n", "", "return", "fisheye_sensor_spec", "\n", "\n", "", "if", "settings", "[", "\"fisheye_rgba_sensor\"", "]", ":", "\n", "        ", "fisheye_rgba_sensor_spec", "=", "create_fisheye_spec", "(", "\n", "uuid", "=", "\"fisheye_rgba_sensor\"", "\n", ")", "\n", "sensor_specs", ".", "append", "(", "fisheye_rgba_sensor_spec", ")", "\n", "", "if", "settings", "[", "\"fisheye_depth_sensor\"", "]", ":", "\n", "        ", "fisheye_depth_sensor_spec", "=", "create_fisheye_spec", "(", "\n", "uuid", "=", "\"fisheye_depth_sensor\"", ",", "\n", "sensor_type", "=", "habitat_sim", ".", "SensorType", ".", "DEPTH", ",", "\n", "channels", "=", "1", ",", "\n", ")", "\n", "sensor_specs", ".", "append", "(", "fisheye_depth_sensor_spec", ")", "\n", "", "if", "settings", "[", "\"fisheye_semantic_sensor\"", "]", ":", "\n", "        ", "fisheye_semantic_sensor_spec", "=", "create_fisheye_spec", "(", "\n", "uuid", "=", "\"fisheye_semantic_sensor\"", ",", "\n", "sensor_type", "=", "habitat_sim", ".", "SensorType", ".", "SEMANTIC", ",", "\n", "channels", "=", "1", ",", "\n", ")", "\n", "sensor_specs", ".", "append", "(", "fisheye_semantic_sensor_spec", ")", "\n", "\n", "", "def", "create_equirect_spec", "(", "**", "kw_args", ")", ":", "\n", "        ", "equirect_sensor_spec", "=", "habitat_sim", ".", "EquirectangularSensorSpec", "(", ")", "\n", "equirect_sensor_spec", ".", "uuid", "=", "\"equirect_rgba_sensor\"", "\n", "equirect_sensor_spec", ".", "sensor_type", "=", "habitat_sim", ".", "SensorType", ".", "COLOR", "\n", "equirect_sensor_spec", ".", "resolution", "=", "[", "\n", "settings", "[", "\"height\"", "]", ",", "\n", "settings", "[", "\"width\"", "]", ",", "\n", "]", "\n", "equirect_sensor_spec", ".", "position", "=", "[", "0", ",", "settings", "[", "\"sensor_height\"", "]", ",", "0", "]", "\n", "for", "k", "in", "kw_args", ":", "\n", "            ", "setattr", "(", "equirect_sensor_spec", ",", "k", ",", "kw_args", "[", "k", "]", ")", "\n", "", "return", "equirect_sensor_spec", "\n", "\n", "", "if", "settings", "[", "\"equirect_rgba_sensor\"", "]", ":", "\n", "        ", "equirect_rgba_sensor_spec", "=", "create_equirect_spec", "(", "\n", "uuid", "=", "\"equirect_rgba_sensor\"", "\n", ")", "\n", "sensor_specs", ".", "append", "(", "equirect_rgba_sensor_spec", ")", "\n", "\n", "", "if", "settings", "[", "\"equirect_depth_sensor\"", "]", ":", "\n", "        ", "equirect_depth_sensor_spec", "=", "create_equirect_spec", "(", "\n", "uuid", "=", "\"equirect_depth_sensor\"", ",", "\n", "sensor_type", "=", "habitat_sim", ".", "SensorType", ".", "DEPTH", ",", "\n", "channels", "=", "1", ",", "\n", ")", "\n", "sensor_specs", ".", "append", "(", "equirect_depth_sensor_spec", ")", "\n", "\n", "", "if", "settings", "[", "\"equirect_semantic_sensor\"", "]", ":", "\n", "        ", "equirect_semantic_sensor_spec", "=", "create_equirect_spec", "(", "\n", "uuid", "=", "\"equirect_semantic_sensor\"", ",", "\n", "sensor_type", "=", "habitat_sim", ".", "SensorType", ".", "SEMANTIC", ",", "\n", "channels", "=", "1", ",", "\n", ")", "\n", "sensor_specs", ".", "append", "(", "equirect_semantic_sensor_spec", ")", "\n", "\n", "# create agent specifications", "\n", "", "agent_cfg", "=", "habitat_sim", ".", "agent", ".", "AgentConfiguration", "(", ")", "\n", "agent_cfg", ".", "sensor_specifications", "=", "sensor_specs", "\n", "agent_cfg", ".", "action_space", "=", "{", "\n", "\"move_forward\"", ":", "habitat_sim", ".", "agent", ".", "ActionSpec", "(", "\n", "\"move_forward\"", ",", "habitat_sim", ".", "agent", ".", "ActuationSpec", "(", "amount", "=", "0.25", ")", "\n", ")", ",", "\n", "\"turn_left\"", ":", "habitat_sim", ".", "agent", ".", "ActionSpec", "(", "\n", "\"turn_left\"", ",", "habitat_sim", ".", "agent", ".", "ActuationSpec", "(", "amount", "=", "10.0", ")", "\n", ")", ",", "\n", "\"turn_right\"", ":", "habitat_sim", ".", "agent", ".", "ActionSpec", "(", "\n", "\"turn_right\"", ",", "habitat_sim", ".", "agent", ".", "ActuationSpec", "(", "amount", "=", "10.0", ")", "\n", ")", ",", "\n", "}", "\n", "\n", "# override action space to no-op to test physics", "\n", "if", "sim_cfg", ".", "enable_physics", ":", "\n", "        ", "agent_cfg", ".", "action_space", "=", "{", "\n", "\"move_forward\"", ":", "habitat_sim", ".", "agent", ".", "ActionSpec", "(", "\n", "\"move_forward\"", ",", "habitat_sim", ".", "agent", ".", "ActuationSpec", "(", "amount", "=", "0.0", ")", "\n", ")", "\n", "}", "\n", "\n", "", "return", "habitat_sim", ".", "Configuration", "(", "sim_cfg", ",", "[", "agent_cfg", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_robot_wrapper.simulate": [[255, 264], ["sim.get_world_time", "sim.get_world_time", "sim.step_physics", "observations.append", "sim.get_sensor_observations"], "function", ["None"], ["", "def", "simulate", "(", "sim", ",", "dt", ",", "get_observations", "=", "False", ")", ":", "\n", "    ", "r\"\"\"Runs physics simulation at 60FPS for a given duration (dt) optionally collecting and returning sensor observations.\"\"\"", "\n", "observations", "=", "[", "]", "\n", "target_time", "=", "sim", ".", "get_world_time", "(", ")", "+", "dt", "\n", "while", "sim", ".", "get_world_time", "(", ")", "<", "target_time", ":", "\n", "        ", "sim", ".", "step_physics", "(", "1.0", "/", "60.0", ")", "\n", "if", "get_observations", ":", "\n", "            ", "observations", ".", "append", "(", "sim", ".", "get_sensor_observations", "(", ")", ")", "\n", "", "", "return", "observations", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_robot_wrapper.test_fetch_robot_wrapper": [[266, 409], ["pytest.mark.skipif", "pytest.mark.skipif", "pytest.mark.parametrize", "default_sim_settings.copy", "test_robot_wrapper.make_cfg", "habitat_sim.Simulator", "habitat_sim.Simulator", "sim.get_object_template_manager", "sim.get_rigid_object_manager", "sim.get_object_template_manager.get_template_by_handle", "numpy.array", "sim.get_object_template_manager.register_template", "sim.get_rigid_object_manager.add_object_by_template_handle", "habitat_sim.NavMeshSettings", "habitat_sim.NavMeshSettings", "habitat_sim.NavMeshSettings.set_defaults", "sim.recompute_navmesh", "habitat.FetchRobot", "fetch_robot.FetchRobot.reconfigure", "print", "test_robot_wrapper.simulate", "fetch_robot.FetchRobot._interpolate_arm_control", "fetch_robot.FetchRobot._interpolate_arm_control", "numpy.zeros", "test_robot_wrapper.simulate", "sim.pathfinder.snap_point", "test_robot_wrapper.simulate", "print", "numpy.ones", "numpy.ones", "print", "print", "test_robot_wrapper.simulate", "fetch_robot.FetchRobot.open_gripper", "test_robot_wrapper.simulate", "fetch_robot.FetchRobot.close_gripper", "test_robot_wrapper.simulate", "fetch_robot.FetchRobot.set_gripper_target_state", "test_robot_wrapper.simulate", "numpy.allclose", "test_robot_wrapper.simulate", "test_robot_wrapper.simulate", "print", "print", "print", "print", "numpy.array", "print", "os.path.exists", "sim.get_object_template_manager.get_template_handles", "fetch_robot.FetchRobot.get_robot_sim_id", "fetch_robot.FetchRobot.get_link_and_joint_names", "len", "numpy.allclose", "len", "len", "vut.make_video", "numpy.allclose", "fetch_robot.FetchRobot.calculate_ee_forward_kinematics", "fetch_robot.FetchRobot.clip_ee_to_workspace", "str"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_robot_wrapper.make_cfg", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env.reconfigure", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_robot_wrapper.simulate", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator._interpolate_arm_control", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator._interpolate_arm_control", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_robot_wrapper.simulate", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_robot_wrapper.simulate", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_robot_wrapper.simulate", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator.open_gripper", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_robot_wrapper.simulate", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator.close_gripper", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_robot_wrapper.simulate", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator.set_gripper_target_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_robot_wrapper.simulate", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_robot_wrapper.simulate", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_robot_wrapper.simulate", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.exists", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.robot_interface.RobotInterface.get_robot_sim_id", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.robot_interface.RobotInterface.get_link_and_joint_names", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator.calculate_ee_forward_kinematics", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator.clip_ee_to_workspace"], ["", "@", "pytest", ".", "mark", ".", "skipif", "(", "\n", "not", "osp", ".", "exists", "(", "\"data/robots/hab_fetch\"", ")", ",", "\n", "reason", "=", "\"Test requires Fetch robot URDF and assets.\"", ",", "\n", ")", "\n", "@", "pytest", ".", "mark", ".", "skipif", "(", "\n", "not", "habitat_sim", ".", "built_with_bullet", ",", "\n", "reason", "=", "\"Robot wrapper API requires Bullet physics.\"", ",", "\n", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"fixed_base\"", ",", "[", "True", ",", "False", "]", ")", "\n", "def", "test_fetch_robot_wrapper", "(", "fixed_base", ")", ":", "\n", "# set this to output test results as video for easy investigation", "\n", "    ", "produce_debug_video", "=", "False", "\n", "observations", "=", "[", "]", "\n", "cfg_settings", "=", "default_sim_settings", ".", "copy", "(", ")", "\n", "cfg_settings", "[", "\"scene\"", "]", "=", "\"NONE\"", "\n", "cfg_settings", "[", "\"enable_physics\"", "]", "=", "True", "\n", "\n", "# loading the physical scene", "\n", "hab_cfg", "=", "make_cfg", "(", "cfg_settings", ")", "\n", "\n", "with", "habitat_sim", ".", "Simulator", "(", "hab_cfg", ")", "as", "sim", ":", "\n", "        ", "obj_template_mgr", "=", "sim", ".", "get_object_template_manager", "(", ")", "\n", "rigid_obj_mgr", "=", "sim", ".", "get_rigid_object_manager", "(", ")", "\n", "\n", "# setup the camera for debug video (looking at 0,0,0)", "\n", "sim", ".", "agents", "[", "0", "]", ".", "scene_node", ".", "translation", "=", "[", "0.0", ",", "-", "1.0", ",", "2.0", "]", "\n", "\n", "# add a ground plane", "\n", "cube_handle", "=", "obj_template_mgr", ".", "get_template_handles", "(", "\"cubeSolid\"", ")", "[", "0", "]", "\n", "cube_template_cpy", "=", "obj_template_mgr", ".", "get_template_by_handle", "(", "\n", "cube_handle", "\n", ")", "\n", "cube_template_cpy", ".", "scale", "=", "np", ".", "array", "(", "[", "5.0", ",", "0.2", ",", "5.0", "]", ")", "\n", "obj_template_mgr", ".", "register_template", "(", "cube_template_cpy", ")", "\n", "ground_plane", "=", "rigid_obj_mgr", ".", "add_object_by_template_handle", "(", "cube_handle", ")", "\n", "ground_plane", ".", "translation", "=", "[", "0.0", ",", "-", "0.2", ",", "0.0", "]", "\n", "ground_plane", ".", "motion_type", "=", "habitat_sim", ".", "physics", ".", "MotionType", ".", "STATIC", "\n", "\n", "# compute a navmesh on the ground plane", "\n", "navmesh_settings", "=", "habitat_sim", ".", "NavMeshSettings", "(", ")", "\n", "navmesh_settings", ".", "set_defaults", "(", ")", "\n", "sim", ".", "recompute_navmesh", "(", "sim", ".", "pathfinder", ",", "navmesh_settings", ",", "True", ")", "\n", "sim", ".", "navmesh_visualization", "=", "True", "\n", "\n", "# add the robot to the world via the wrapper", "\n", "robot_path", "=", "\"data/robots/hab_fetch/robots/hab_fetch.urdf\"", "\n", "fetch", "=", "fetch_robot", ".", "FetchRobot", "(", "robot_path", ",", "sim", ",", "fixed_base", "=", "fixed_base", ")", "\n", "fetch", ".", "reconfigure", "(", ")", "\n", "assert", "fetch", ".", "get_robot_sim_id", "(", ")", "==", "1", "# 0 is the ground plane", "\n", "print", "(", "fetch", ".", "get_link_and_joint_names", "(", ")", ")", "\n", "observations", "+=", "simulate", "(", "sim", ",", "1.0", ",", "produce_debug_video", ")", "\n", "\n", "# retract the arm", "\n", "observations", "+=", "fetch", ".", "_interpolate_arm_control", "(", "\n", "[", "1.2299035787582397", ",", "2.345386505126953", "]", ",", "\n", "[", "fetch", ".", "params", ".", "arm_joints", "[", "1", "]", ",", "fetch", ".", "params", ".", "arm_joints", "[", "3", "]", "]", ",", "\n", "1", ",", "\n", "30", ",", "\n", "produce_debug_video", ",", "\n", ")", "\n", "\n", "# ready the arm", "\n", "observations", "+=", "fetch", ".", "_interpolate_arm_control", "(", "\n", "[", "-", "0.45", ",", "0.1", "]", ",", "\n", "[", "fetch", ".", "params", ".", "arm_joints", "[", "1", "]", ",", "fetch", ".", "params", ".", "arm_joints", "[", "3", "]", "]", ",", "\n", "1", ",", "\n", "30", ",", "\n", "produce_debug_video", ",", "\n", ")", "\n", "\n", "# setting arm motor positions", "\n", "fetch", ".", "arm_motor_pos", "=", "np", ".", "zeros", "(", "len", "(", "fetch", ".", "params", ".", "arm_joints", ")", ")", "\n", "observations", "+=", "simulate", "(", "sim", ",", "1.0", ",", "produce_debug_video", ")", "\n", "\n", "# set base ground position from navmesh", "\n", "# NOTE: because the navmesh floats above the collision geometry we should see a pop/settle with dynamics and no fixed base", "\n", "target_base_pos", "=", "sim", ".", "pathfinder", ".", "snap_point", "(", "fetch", ".", "sim_obj", ".", "translation", ")", "\n", "fetch", ".", "base_pos", "=", "target_base_pos", "\n", "assert", "fetch", ".", "base_pos", "==", "target_base_pos", "\n", "observations", "+=", "simulate", "(", "sim", ",", "1.0", ",", "produce_debug_video", ")", "\n", "if", "fixed_base", ":", "\n", "            ", "assert", "np", ".", "allclose", "(", "fetch", ".", "base_pos", ",", "target_base_pos", ")", "\n", "", "else", ":", "\n", "            ", "assert", "not", "np", ".", "allclose", "(", "fetch", ".", "base_pos", ",", "target_base_pos", ")", "\n", "\n", "# arm joint queries and setters", "\n", "", "print", "(", "f\" Arm joint velocities = {fetch.arm_velocity}\"", ")", "\n", "fetch", ".", "arm_joint_pos", "=", "np", ".", "ones", "(", "len", "(", "fetch", ".", "params", ".", "arm_joints", ")", ")", "\n", "fetch", ".", "arm_motor_pos", "=", "np", ".", "ones", "(", "len", "(", "fetch", ".", "params", ".", "arm_joints", ")", ")", "\n", "print", "(", "f\" Arm joint positions (should be ones) = {fetch.arm_joint_pos}\"", ")", "\n", "print", "(", "f\" Arm joint limits = {fetch.arm_joint_limits}\"", ")", "\n", "fetch", ".", "arm_motor_pos", "=", "fetch", ".", "arm_motor_pos", "\n", "observations", "+=", "simulate", "(", "sim", ",", "1.0", ",", "produce_debug_video", ")", "\n", "\n", "# test gripper state", "\n", "fetch", ".", "open_gripper", "(", ")", "\n", "observations", "+=", "simulate", "(", "sim", ",", "1.0", ",", "produce_debug_video", ")", "\n", "assert", "fetch", ".", "is_gripper_open", "\n", "assert", "not", "fetch", ".", "is_gripper_closed", "\n", "fetch", ".", "close_gripper", "(", ")", "\n", "observations", "+=", "simulate", "(", "sim", ",", "1.0", ",", "produce_debug_video", ")", "\n", "assert", "fetch", ".", "is_gripper_closed", "\n", "assert", "not", "fetch", ".", "is_gripper_open", "\n", "\n", "# halfway open", "\n", "fetch", ".", "set_gripper_target_state", "(", "0.5", ")", "\n", "observations", "+=", "simulate", "(", "sim", ",", "0.5", ",", "produce_debug_video", ")", "\n", "assert", "not", "fetch", ".", "is_gripper_open", "\n", "assert", "not", "fetch", ".", "is_gripper_closed", "\n", "\n", "# kinematic open/close (checked before simulation)", "\n", "fetch", ".", "gripper_joint_pos", "=", "fetch", ".", "params", ".", "gripper_open_state", "\n", "assert", "np", ".", "allclose", "(", "\n", "fetch", ".", "gripper_joint_pos", ",", "fetch", ".", "params", ".", "gripper_open_state", "\n", ")", "\n", "assert", "fetch", ".", "is_gripper_open", "\n", "observations", "+=", "simulate", "(", "sim", ",", "0.2", ",", "produce_debug_video", ")", "\n", "fetch", ".", "gripper_joint_pos", "=", "fetch", ".", "params", ".", "gripper_closed_state", "\n", "assert", "fetch", ".", "is_gripper_closed", "\n", "observations", "+=", "simulate", "(", "sim", ",", "0.2", ",", "produce_debug_video", ")", "\n", "\n", "# end effector queries", "\n", "print", "(", "f\" End effector link id = {fetch.ee_link_id}\"", ")", "\n", "print", "(", "f\" End effector local offset = {fetch.ee_local_offset}\"", ")", "\n", "print", "(", "f\" End effector transform = {fetch.ee_transform}\"", ")", "\n", "print", "(", "\n", "f\" End effector translation (at current state) = {fetch.calculate_ee_forward_kinematics(fetch.sim_obj.joint_positions)}\"", "\n", ")", "\n", "invalid_ef_target", "=", "np", ".", "array", "(", "[", "100.0", ",", "200.0", ",", "300.0", "]", ")", "\n", "print", "(", "\n", "f\" Clip end effector target ({invalid_ef_target}) to reach = {fetch.clip_ee_to_workspace(invalid_ef_target)}\"", "\n", ")", "\n", "\n", "# produce some test debug video", "\n", "if", "produce_debug_video", ":", "\n", "            ", "from", "habitat_sim", ".", "utils", "import", "viz_utils", "as", "vut", "\n", "\n", "vut", ".", "make_video", "(", "\n", "observations", ",", "\n", "\"color_sensor\"", ",", "\n", "\"color\"", ",", "\n", "\"test_fetch_robot_wrapper__fixed_base=\"", "+", "str", "(", "fixed_base", ")", ",", "\n", "open_vid", "=", "True", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_examples.run_main": [[10, 21], ["list", "os.path.isfile", "runpy.run_path", "sys.path.insert", "os.path.dirname"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.insert"], ["def", "run_main", "(", "*", "args", ")", ":", "\n", "# patch sys.args", "\n", "    ", "sys", ".", "argv", "=", "list", "(", "args", ")", "\n", "target", "=", "args", "[", "0", "]", "\n", "# run_path has one difference with invoking Python from command-line:", "\n", "# if the target is a file (rather than a directory), it does not add its", "\n", "# parent directory to sys.path. Thus, importing other modules from the", "\n", "# same directory is broken unless sys.path is patched here.", "\n", "if", "osp", ".", "isfile", "(", "target", ")", ":", "\n", "        ", "sys", ".", "path", ".", "insert", "(", "0", ",", "osp", ".", "dirname", "(", "target", ")", ")", "\n", "", "runpy", ".", "run_path", "(", "target", ",", "run_name", "=", "\"__main__\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_examples.powerset": [[23, 27], ["list", "itertools.chain.from_iterable", "itertools.combinations", "range", "len"], "function", ["None"], ["", "def", "powerset", "(", "iterable", ")", ":", "\n", "    ", "s", "=", "list", "(", "iterable", ")", "\n", "return", "itertools", ".", "chain", ".", "from_iterable", "(", "\n", "itertools", ".", "combinations", "(", "s", ",", "r", ")", "for", "r", "in", "range", "(", "len", "(", "s", ")", "+", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_examples.run_main_subproc": [[30, 38], ["multiprocessing.get_context", "multiprocessing.get_context.Process", "mp_ctx.Process.start", "mp_ctx.Process.join"], "function", ["None"], ["", "def", "run_main_subproc", "(", "args", ")", ":", "\n", "# This test needs to be done in its own process as there is a potentially for", "\n", "# an OpenGL context clash otherwise", "\n", "    ", "mp_ctx", "=", "multiprocessing", ".", "get_context", "(", "\"spawn\"", ")", "\n", "proc", "=", "mp_ctx", ".", "Process", "(", "target", "=", "run_main", ",", "args", "=", "args", ")", "\n", "proc", ".", "start", "(", ")", "\n", "proc", ".", "join", "(", ")", "\n", "assert", "proc", ".", "exitcode", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_examples.test_example_modules": [[40, 58], ["pytest.mark.skipif", "pytest.mark.parametrize", "test_examples.run_main_subproc", "os.path.exists", "os.path.exists", "os.path.exists"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_examples.run_main_subproc", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.exists", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.exists", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.exists"], ["", "@", "pytest", ".", "mark", ".", "skipif", "(", "\n", "not", "osp", ".", "exists", "(", "\n", "\"data/scene_datasets/habitat-test-scenes/skokloster-castle.glb\"", "\n", ")", "\n", "or", "not", "osp", ".", "exists", "(", "\n", "\"data/scene_datasets/habitat-test-scenes/van-gogh-room.glb\"", "\n", ")", "\n", "or", "not", "osp", ".", "exists", "(", "\"data/scene_datasets/coda/coda.glb\"", ")", ",", "\n", "reason", "=", "\"Requires the habitat-test-scenes\"", ",", "\n", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"args\"", ",", "\n", "[", "\n", "(", "\"examples/tutorials/nb_python/Habitat_Lab.py\"", ",", ")", ",", "\n", "]", ",", "\n", ")", "\n", "def", "test_example_modules", "(", "args", ")", ":", "\n", "    ", "run_main_subproc", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_examples.test_rearrange_example_modules": [[60, 73], ["pytest.mark.parametrize", "test_examples.run_main_subproc"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_examples.run_main_subproc"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"args\"", ",", "\n", "[", "\n", "(", "\n", "\"examples/interactive_play.py\"", ",", "\n", "\"--no-render\"", ",", "\n", ")", ",", "\n", "(", "\"examples/tutorials/nb_python/Habitat2_Quickstart.py\"", ",", ")", ",", "\n", "(", "\"examples/tutorials/nb_python/habitat2_gym_tutorial.py\"", ",", ")", ",", "\n", "]", ",", "\n", ")", "\n", "def", "test_rearrange_example_modules", "(", "args", ")", ":", "\n", "    ", "run_main_subproc", "(", "args", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_baseline_training.setup_function": [[27, 30], ["data_downloader.main"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.main"], ["", "def", "setup_function", "(", "test_trainers", ")", ":", "\n", "# Download the needed datasets", "\n", "    ", "data_downloader", ".", "main", "(", "[", "\"--uids\"", ",", "\"rearrange_task_assets\"", ",", "\"--no-replace\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_baseline_training.test_trainers": [[32, 88], ["pytest.mark.skipif", "pytest.mark.parametrize", "glob.glob", "get_config", "random.seed", "numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed", "baseline_registry.get_trainer", "baseline_registry.get_trainer.", "trainer_init.train", "max", "os.remove", "torch.cuda.is_available", "torch.set_num_threads", "v[].sum().item", "trainer_init.window_episode_stats.items", "len", "v[].sum"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.seed", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.seed", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.baseline_registry.BaselineRegistry.get_trainer", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.train"], ["", "@", "pytest", ".", "mark", ".", "skipif", "(", "\n", "not", "baseline_installed", ",", "reason", "=", "\"baseline sub-module not installed\"", "\n", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"config_path,num_updates,target_reward\"", ",", "\n", "[", "\n", "(", "\"habitat_baselines/config/rearrange/ddppo_reach_state.yaml\"", ",", "40", ",", "5.0", ")", ",", "\n", "]", ",", "\n", ")", "\n", "def", "test_trainers", "(", "config_path", ",", "num_updates", ",", "target_reward", ")", ":", "\n", "# Remove the checkpoints from previous tests", "\n", "    ", "for", "f", "in", "glob", ".", "glob", "(", "\"data/test_checkpoints/test_training/*\"", ")", ":", "\n", "        ", "os", ".", "remove", "(", "f", ")", "\n", "# Setup the training", "\n", "", "config", "=", "get_config", "(", "\n", "config_path", ",", "\n", "[", "\n", "\"NUM_UPDATES\"", ",", "\n", "num_updates", ",", "\n", "\"TOTAL_NUM_STEPS\"", ",", "\n", "-", "1.0", ",", "\n", "\"CHECKPOINT_FOLDER\"", ",", "\n", "\"data/test_checkpoints/test_training\"", ",", "\n", "]", ",", "\n", ")", "\n", "random", ".", "seed", "(", "config", ".", "TASK_CONFIG", ".", "SEED", ")", "\n", "np", ".", "random", ".", "seed", "(", "config", ".", "TASK_CONFIG", ".", "SEED", ")", "\n", "torch", ".", "manual_seed", "(", "config", ".", "TASK_CONFIG", ".", "SEED", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "config", ".", "TASK_CONFIG", ".", "SEED", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "if", "config", ".", "FORCE_TORCH_SINGLE_THREADED", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "torch", ".", "set_num_threads", "(", "1", ")", "\n", "\n", "", "assert", "(", "\n", "config", ".", "TRAINER_NAME", "==", "\"ddppo\"", "\n", ")", ",", "\"This test can only be used with ddppo trainer\"", "\n", "\n", "trainer_init", "=", "baseline_registry", ".", "get_trainer", "(", "config", ".", "TRAINER_NAME", ")", "\n", "assert", "trainer_init", "is", "not", "None", ",", "f\"{config.TRAINER_NAME} is not supported\"", "\n", "trainer", "=", "trainer_init", "(", "config", ")", "\n", "\n", "# Train", "\n", "trainer", ".", "train", "(", ")", "\n", "\n", "# Gather the data", "\n", "deltas", "=", "{", "\n", "k", ":", "(", "(", "v", "[", "-", "1", "]", "-", "v", "[", "0", "]", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "if", "len", "(", "v", ")", ">", "1", "else", "v", "[", "0", "]", ".", "sum", "(", ")", ".", "item", "(", ")", ")", "\n", "for", "k", ",", "v", "in", "trainer", ".", "window_episode_stats", ".", "items", "(", ")", "\n", "}", "\n", "deltas", "[", "\"count\"", "]", "=", "max", "(", "deltas", "[", "\"count\"", "]", ",", "1.0", ")", "\n", "reward", "=", "deltas", "[", "\"reward\"", "]", "/", "deltas", "[", "\"count\"", "]", "\n", "\n", "# Make sure the final reward is greater than the target", "\n", "assert", "(", "\n", "reward", ">=", "target_reward", "\n", ")", ",", "f\"reward for task {config_path} was {reward} but is expected to be at least {target_reward}\"", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_config.test_merged_configs": [[21, 29], ["habitat.config.default.get_config", "habitat.config.default.get_config", "habitat.config.default.get_config"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config"], ["def", "test_merged_configs", "(", ")", ":", "\n", "    ", "test_config", "=", "get_config", "(", "CFG_TEST", ")", "\n", "eqa_config", "=", "get_config", "(", "CFG_EQA", ")", "\n", "merged_config", "=", "get_config", "(", "\"{},{}\"", ".", "format", "(", "CFG_TEST", ",", "CFG_EQA", ")", ")", "\n", "assert", "merged_config", ".", "TASK", ".", "TYPE", "==", "eqa_config", ".", "TASK", ".", "TYPE", "\n", "assert", "(", "\n", "merged_config", ".", "ENVIRONMENT", ".", "MAX_EPISODE_STEPS", "\n", "==", "test_config", ".", "ENVIRONMENT", ".", "MAX_EPISODE_STEPS", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_config.test_new_keys_merged_configs": [[32, 43], ["habitat.config.default.get_config", "habitat.config.default.get_config", "habitat.config.default.get_config"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config"], ["", "def", "test_new_keys_merged_configs", "(", ")", ":", "\n", "    ", "test_config", "=", "get_config", "(", "CFG_TEST", ")", "\n", "new_keys_config", "=", "get_config", "(", "CFG_NEW_KEYS", ")", "\n", "merged_config", "=", "get_config", "(", "\"{},{}\"", ".", "format", "(", "CFG_TEST", ",", "CFG_NEW_KEYS", ")", ")", "\n", "assert", "(", "\n", "merged_config", ".", "TASK", ".", "MY_NEW_TASK_PARAM", "\n", "==", "new_keys_config", ".", "TASK", ".", "MY_NEW_TASK_PARAM", "\n", ")", "\n", "assert", "(", "\n", "merged_config", ".", "ENVIRONMENT", ".", "MAX_EPISODE_STEPS", "\n", "==", "test_config", ".", "ENVIRONMENT", ".", "MAX_EPISODE_STEPS", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_config.test_overwrite_options": [[46, 55], ["range", "habitat.config.default.get_config"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config"], ["", "def", "test_overwrite_options", "(", ")", ":", "\n", "    ", "for", "steps_limit", "in", "range", "(", "MAX_TEST_STEPS_LIMIT", ")", ":", "\n", "        ", "config", "=", "get_config", "(", "\n", "config_paths", "=", "CFG_TEST", ",", "\n", "opts", "=", "[", "\"ENVIRONMENT.MAX_EPISODE_STEPS\"", ",", "steps_limit", "]", ",", "\n", ")", "\n", "assert", "(", "\n", "config", ".", "ENVIRONMENT", ".", "MAX_EPISODE_STEPS", "==", "steps_limit", "\n", ")", ",", "\"Overwriting of config options failed.\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_config.test_no_core_config_has_non_default_keys": [[68, 84], ["pytest.mark.parametrize", "habitat.config.default._C.set_new_allowed", "glob.glob", "pytest.skip", "habitat.get_config", "habitat.config.default._C.set_new_allowed", "KeyError"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"config_path\"", ",", "\n", "glob", "(", "\"configs/**/*.yaml\"", ",", "recursive", "=", "True", ")", ",", "\n", ")", "\n", "def", "test_no_core_config_has_non_default_keys", "(", "config_path", ")", ":", "\n", "    ", "if", "config_path", "in", "CONFIGS_ALLOWED_TO_HAVE_NON_DEFAULT_KEYS", ":", "\n", "        ", "pytest", ".", "skip", "(", "f\"File {config_path} manually excluded from test\"", ")", "\n", "# We manually disallow new keys when merging to make sure all keys", "\n", "# are in the default config", "\n", "", "_C", ".", "set_new_allowed", "(", "False", ")", "\n", "try", ":", "\n", "        ", "habitat", ".", "get_config", "(", "config_path", ")", "\n", "", "except", "KeyError", "as", "e", ":", "\n", "        ", "raise", "KeyError", "(", "f\"Failed for config {config_path}\"", ")", "from", "e", "\n", "", "finally", ":", "\n", "        ", "_C", ".", "set_new_allowed", "(", "True", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_pointnav_dataset.check_json_serializaiton": [[35, 49], ["time.time", "str", "habitat.core.logging.logger.info", "dataset.__class__", "dataset.__class__.from_json", "isinstance", "dataset.to_json", "len", "dataset.__class__.to_json", "time.time"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.from_json", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.to_json", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.to_json"], ["def", "check_json_serializaiton", "(", "dataset", ":", "habitat", ".", "Dataset", ")", ":", "\n", "    ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "json_str", "=", "str", "(", "dataset", ".", "to_json", "(", ")", ")", "\n", "logger", ".", "info", "(", "\n", "\"JSON conversion finished. {} sec\"", ".", "format", "(", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", ")", "\n", "decoded_dataset", "=", "dataset", ".", "__class__", "(", ")", "\n", "decoded_dataset", ".", "from_json", "(", "json_str", ")", "\n", "assert", "len", "(", "decoded_dataset", ".", "episodes", ")", ">", "0", "\n", "episode", "=", "decoded_dataset", ".", "episodes", "[", "0", "]", "\n", "assert", "isinstance", "(", "episode", ",", "Episode", ")", "\n", "assert", "(", "\n", "decoded_dataset", ".", "to_json", "(", ")", "==", "json_str", "\n", ")", ",", "\"JSON dataset encoding/decoding isn't consistent\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_pointnav_dataset.test_single_pointnav_dataset": [[51, 65], ["habitat.datasets.pointnav.pointnav_dataset.PointNavDatasetV1.get_scenes_to_load", "habitat.datasets.pointnav.pointnav_dataset.PointNavDatasetV1", "test_pointnav_dataset.check_json_serializaiton", "habitat.config.default.get_config", "habitat.datasets.pointnav.pointnav_dataset.PointNavDatasetV1.check_config_paths_exist", "pytest.skip", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.get_scenes_to_load", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_r2r_vln.check_json_serializaiton", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pointnav.pointnav_dataset.PointNavDatasetV1.check_config_paths_exist"], ["", "def", "test_single_pointnav_dataset", "(", ")", ":", "\n", "    ", "dataset_config", "=", "get_config", "(", ")", ".", "DATASET", "\n", "if", "not", "PointNavDatasetV1", ".", "check_config_paths_exist", "(", "dataset_config", ")", ":", "\n", "        ", "pytest", ".", "skip", "(", "\"Test skipped as dataset files are missing.\"", ")", "\n", "", "scenes", "=", "PointNavDatasetV1", ".", "get_scenes_to_load", "(", "config", "=", "dataset_config", ")", "\n", "assert", "(", "\n", "len", "(", "scenes", ")", ">", "0", "\n", ")", ",", "\"Expected dataset contains separate episode file per scene.\"", "\n", "dataset", "=", "PointNavDatasetV1", "(", "config", "=", "dataset_config", ")", "\n", "assert", "len", "(", "dataset", ".", "episodes", ")", ">", "0", ",", "\"The dataset shouldn't be empty.\"", "\n", "assert", "(", "\n", "len", "(", "dataset", ".", "scene_ids", ")", "==", "2", "\n", ")", ",", "\"The test dataset scenes number is wrong.\"", "\n", "check_json_serializaiton", "(", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_pointnav_dataset.test_multiple_files_scene_path": [[67, 92], ["habitat.datasets.pointnav.pointnav_dataset.PointNavDatasetV1.get_scenes_to_load", "dataset_config.defrost", "os.path.join", "dataset_config.freeze", "habitat.datasets.make_dataset", "print", "os.path.exists", "habitat.config.default.get_config", "habitat.datasets.pointnav.pointnav_dataset.PointNavDatasetV1.check_config_paths_exist", "pytest.skip", "len", "os.getcwd", "len"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.get_scenes_to_load", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.registration.make_dataset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.exists", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pointnav.pointnav_dataset.PointNavDatasetV1.check_config_paths_exist"], ["", "def", "test_multiple_files_scene_path", "(", ")", ":", "\n", "    ", "dataset_config", "=", "get_config", "(", "CFG_MULTI_TEST", ")", ".", "DATASET", "\n", "if", "not", "PointNavDatasetV1", ".", "check_config_paths_exist", "(", "dataset_config", ")", ":", "\n", "        ", "pytest", ".", "skip", "(", "\"Test skipped as dataset files are missing.\"", ")", "\n", "", "scenes", "=", "PointNavDatasetV1", ".", "get_scenes_to_load", "(", "config", "=", "dataset_config", ")", "\n", "assert", "(", "\n", "len", "(", "scenes", ")", ">", "0", "\n", ")", ",", "\"Expected dataset contains separate episode file per scene.\"", "\n", "dataset_config", ".", "defrost", "(", ")", "\n", "dataset_config", ".", "CONTENT_SCENES", "=", "scenes", "[", ":", "PARTIAL_LOAD_SCENES", "]", "\n", "dataset_config", ".", "SCENES_DIR", "=", "os", ".", "path", ".", "join", "(", "\n", "os", ".", "getcwd", "(", ")", ",", "DEFAULT_SCENE_PATH_PREFIX", "\n", ")", "\n", "dataset_config", ".", "freeze", "(", ")", "\n", "partial_dataset", "=", "make_dataset", "(", "\n", "id_dataset", "=", "dataset_config", ".", "TYPE", ",", "config", "=", "dataset_config", "\n", ")", "\n", "assert", "(", "\n", "len", "(", "partial_dataset", ".", "scene_ids", ")", "==", "PARTIAL_LOAD_SCENES", "\n", ")", ",", "\"Number of loaded scenes doesn't correspond.\"", "\n", "print", "(", "partial_dataset", ".", "episodes", "[", "0", "]", ".", "scene_id", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "\n", "partial_dataset", ".", "episodes", "[", "0", "]", ".", "scene_id", "\n", ")", ",", "\"Scene file {} doesn't exist using absolute path\"", ".", "format", "(", "\n", "partial_dataset", ".", "episodes", "[", "0", "]", ".", "scene_id", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_pointnav_dataset.test_multiple_files_pointnav_dataset": [[95, 113], ["habitat.datasets.pointnav.pointnav_dataset.PointNavDatasetV1.get_scenes_to_load", "dataset_config.defrost", "dataset_config.freeze", "habitat.datasets.make_dataset", "test_pointnav_dataset.check_json_serializaiton", "habitat.config.default.get_config", "habitat.datasets.pointnav.pointnav_dataset.PointNavDatasetV1.check_config_paths_exist", "pytest.skip", "len", "len"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.get_scenes_to_load", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.registration.make_dataset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_r2r_vln.check_json_serializaiton", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pointnav.pointnav_dataset.PointNavDatasetV1.check_config_paths_exist"], ["", "def", "test_multiple_files_pointnav_dataset", "(", ")", ":", "\n", "    ", "dataset_config", "=", "get_config", "(", "CFG_MULTI_TEST", ")", ".", "DATASET", "\n", "if", "not", "PointNavDatasetV1", ".", "check_config_paths_exist", "(", "dataset_config", ")", ":", "\n", "        ", "pytest", ".", "skip", "(", "\"Test skipped as dataset files are missing.\"", ")", "\n", "", "scenes", "=", "PointNavDatasetV1", ".", "get_scenes_to_load", "(", "config", "=", "dataset_config", ")", "\n", "assert", "(", "\n", "len", "(", "scenes", ")", ">", "0", "\n", ")", ",", "\"Expected dataset contains separate episode file per scene.\"", "\n", "dataset_config", ".", "defrost", "(", ")", "\n", "dataset_config", ".", "CONTENT_SCENES", "=", "scenes", "[", ":", "PARTIAL_LOAD_SCENES", "]", "\n", "dataset_config", ".", "freeze", "(", ")", "\n", "partial_dataset", "=", "make_dataset", "(", "\n", "id_dataset", "=", "dataset_config", ".", "TYPE", ",", "config", "=", "dataset_config", "\n", ")", "\n", "assert", "(", "\n", "len", "(", "partial_dataset", ".", "scene_ids", ")", "==", "PARTIAL_LOAD_SCENES", "\n", ")", ",", "\"Number of loaded scenes doesn't correspond.\"", "\n", "check_json_serializaiton", "(", "partial_dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_pointnav_dataset.test_dataset_splitting": [[115, 161], ["pytest.mark.parametrize", "dataset_config.defrost", "habitat.datasets.pointnav.pointnav_dataset.PointNavDatasetV1.get_scenes_to_load", "habitat.datasets.make_dataset", "habitat.datasets.make_dataset", "habitat.datasets.make_dataset", "habitat.config.default.get_config", "habitat.datasets.pointnav.pointnav_dataset.PointNavDatasetV1.check_config_paths_exist", "pytest.skip", "len", "split1_episodes.union", "len", "split1_episodes.intersection"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.get_scenes_to_load", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.registration.make_dataset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.registration.make_dataset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.registration.make_dataset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pointnav.pointnav_dataset.PointNavDatasetV1.check_config_paths_exist"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"split\"", ",", "[", "\"train\"", ",", "\"val\"", "]", ")", "\n", "def", "test_dataset_splitting", "(", "split", ")", ":", "\n", "    ", "dataset_config", "=", "get_config", "(", "CFG_MULTI_TEST", ")", ".", "DATASET", "\n", "dataset_config", ".", "defrost", "(", ")", "\n", "dataset_config", ".", "SPLIT", "=", "split", "\n", "\n", "if", "not", "PointNavDatasetV1", ".", "check_config_paths_exist", "(", "dataset_config", ")", ":", "\n", "        ", "pytest", ".", "skip", "(", "\"Test skipped as dataset files are missing.\"", ")", "\n", "\n", "", "scenes", "=", "PointNavDatasetV1", ".", "get_scenes_to_load", "(", "config", "=", "dataset_config", ")", "\n", "assert", "(", "\n", "len", "(", "scenes", ")", ">", "0", "\n", ")", ",", "\"Expected dataset contains separate episode file per scene.\"", "\n", "\n", "dataset_config", ".", "CONTENT_SCENES", "=", "scenes", "[", ":", "PARTIAL_LOAD_SCENES", "]", "\n", "full_dataset", "=", "make_dataset", "(", "\n", "id_dataset", "=", "dataset_config", ".", "TYPE", ",", "config", "=", "dataset_config", "\n", ")", "\n", "full_episodes", "=", "{", "\n", "(", "ep", ".", "scene_id", ",", "ep", ".", "episode_id", ")", "for", "ep", "in", "full_dataset", ".", "episodes", "\n", "}", "\n", "\n", "dataset_config", ".", "CONTENT_SCENES", "=", "scenes", "[", ":", "PARTIAL_LOAD_SCENES", "//", "2", "]", "\n", "split1_dataset", "=", "make_dataset", "(", "\n", "id_dataset", "=", "dataset_config", ".", "TYPE", ",", "config", "=", "dataset_config", "\n", ")", "\n", "split1_episodes", "=", "{", "\n", "(", "ep", ".", "scene_id", ",", "ep", ".", "episode_id", ")", "for", "ep", "in", "split1_dataset", ".", "episodes", "\n", "}", "\n", "\n", "dataset_config", ".", "CONTENT_SCENES", "=", "scenes", "[", "\n", "PARTIAL_LOAD_SCENES", "//", "2", ":", "PARTIAL_LOAD_SCENES", "\n", "]", "\n", "split2_dataset", "=", "make_dataset", "(", "\n", "id_dataset", "=", "dataset_config", ".", "TYPE", ",", "config", "=", "dataset_config", "\n", ")", "\n", "split2_episodes", "=", "{", "\n", "(", "ep", ".", "scene_id", ",", "ep", ".", "episode_id", ")", "for", "ep", "in", "split2_dataset", ".", "episodes", "\n", "}", "\n", "\n", "assert", "full_episodes", "==", "split1_episodes", ".", "union", "(", "\n", "split2_episodes", "\n", ")", ",", "\"Split dataset is not equal to full dataset\"", "\n", "assert", "(", "\n", "len", "(", "split1_episodes", ".", "intersection", "(", "split2_episodes", ")", ")", "==", "0", "\n", ")", ",", "\"Intersection of split datasets is not the empty set\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_pointnav_dataset.check_shortest_path": [[163, 190], ["iter", "env.reset", "env.sim.get_agent_state", "test_pointnav_dataset.check_shortest_path.check_state"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.get_agent_state"], ["", "def", "check_shortest_path", "(", "env", ",", "episode", ")", ":", "\n", "    ", "def", "check_state", "(", "agent_state", ",", "position", ",", "rotation", ")", ":", "\n", "        ", "assert", "(", "\n", "angle_between_quaternions", "(", "\n", "agent_state", ".", "rotation", ",", "quaternion_from_coeff", "(", "rotation", ")", "\n", ")", "\n", "<", "1e-5", "\n", ")", ",", "\"Agent's rotation diverges from the shortest path.\"", "\n", "\n", "assert", "np", ".", "allclose", "(", "\n", "agent_state", ".", "position", ",", "position", "\n", ")", ",", "\"Agent's position position diverges from the shortest path's one.\"", "\n", "\n", "", "assert", "len", "(", "episode", ".", "goals", ")", "==", "1", ",", "\"Episode has no goals or more than one.\"", "\n", "assert", "(", "\n", "len", "(", "episode", ".", "shortest_paths", ")", "==", "1", "\n", ")", ",", "\"Episode has no shortest paths or more than one.\"", "\n", "\n", "env", ".", "episode_iterator", "=", "iter", "(", "[", "episode", "]", ")", "\n", "env", ".", "reset", "(", ")", "\n", "start_state", "=", "env", ".", "sim", ".", "get_agent_state", "(", ")", "\n", "check_state", "(", "start_state", ",", "episode", ".", "start_position", ",", "episode", ".", "start_rotation", ")", "\n", "\n", "for", "point", "in", "episode", ".", "shortest_paths", "[", "0", "]", ":", "\n", "        ", "cur_state", "=", "env", ".", "sim", ".", "get_agent_state", "(", ")", "\n", "check_state", "(", "cur_state", ",", "point", ".", "position", ",", "point", ".", "rotation", ")", "\n", "env", ".", "step", "(", "point", ".", "action", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_pointnav_dataset.test_pointnav_episode_generator": [[192, 233], ["habitat.config.default.get_config", "habitat.config.default.get_config.defrost", "habitat.config.default.get_config.freeze", "habitat.datasets.pointnav.pointnav_dataset.PointNavDatasetV1.check_config_paths_exist", "pytest.skip", "habitat.Env", "env.seed", "random.seed", "habitat.datasets.pointnav.pointnav_generator.generate_pointnav_episode", "range", "habitat.datasets.pointnav.pointnav_generator.generate_pointnav_episode", "iter", "habitat.Dataset", "habitat.Dataset.to_json", "next", "episodes.append", "episodes.append", "len", "test_pointnav_dataset.check_shortest_path"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pointnav.pointnav_dataset.PointNavDatasetV1.check_config_paths_exist", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.seed", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.seed", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pointnav.pointnav_generator.generate_pointnav_episode", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pointnav.pointnav_generator.generate_pointnav_episode", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.to_json", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_pointnav_dataset.check_shortest_path"], ["", "", "def", "test_pointnav_episode_generator", "(", ")", ":", "\n", "    ", "config", "=", "get_config", "(", "CFG_TEST", ")", "\n", "config", ".", "defrost", "(", ")", "\n", "config", ".", "DATASET", ".", "SPLIT", "=", "\"val\"", "\n", "config", ".", "ENVIRONMENT", ".", "MAX_EPISODE_STEPS", "=", "500", "\n", "config", ".", "freeze", "(", ")", "\n", "if", "not", "PointNavDatasetV1", ".", "check_config_paths_exist", "(", "config", ".", "DATASET", ")", ":", "\n", "        ", "pytest", ".", "skip", "(", "\"Test skipped as dataset files are missing.\"", ")", "\n", "", "with", "habitat", ".", "Env", "(", "config", ")", "as", "env", ":", "\n", "        ", "env", ".", "seed", "(", "config", ".", "SEED", ")", "\n", "random", ".", "seed", "(", "config", ".", "SEED", ")", "\n", "generator", "=", "pointnav_generator", ".", "generate_pointnav_episode", "(", "\n", "sim", "=", "env", ".", "sim", ",", "\n", "shortest_path_success_distance", "=", "config", ".", "TASK", ".", "SUCCESS", ".", "SUCCESS_DISTANCE", ",", "\n", "shortest_path_max_steps", "=", "config", ".", "ENVIRONMENT", ".", "MAX_EPISODE_STEPS", ",", "\n", ")", "\n", "episodes", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "NUM_EPISODES", ")", ":", "\n", "            ", "episode", "=", "next", "(", "generator", ")", "\n", "episodes", ".", "append", "(", "episode", ")", "\n", "\n", "", "for", "episode", "in", "pointnav_generator", ".", "generate_pointnav_episode", "(", "\n", "sim", "=", "env", ".", "sim", ",", "\n", "num_episodes", "=", "NUM_EPISODES", ",", "\n", "shortest_path_success_distance", "=", "config", ".", "TASK", ".", "SUCCESS", ".", "SUCCESS_DISTANCE", ",", "\n", "shortest_path_max_steps", "=", "config", ".", "ENVIRONMENT", ".", "MAX_EPISODE_STEPS", ",", "\n", "geodesic_to_euclid_min_ratio", "=", "0", ",", "\n", ")", ":", "\n", "            ", "episodes", ".", "append", "(", "episode", ")", "\n", "\n", "", "assert", "len", "(", "episodes", ")", "==", "2", "*", "NUM_EPISODES", "\n", "env", ".", "episode_iterator", "=", "iter", "(", "episodes", ")", "\n", "\n", "for", "episode", "in", "episodes", ":", "\n", "            ", "check_shortest_path", "(", "env", ",", "episode", ")", "\n", "\n", "", "dataset", "=", "habitat", ".", "Dataset", "(", ")", "\n", "dataset", ".", "episodes", "=", "episodes", "\n", "assert", "(", "\n", "dataset", ".", "to_json", "(", ")", "\n", ")", ",", "\"Generated episodes aren't json serializable.\"", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_spaces.test_empty_space": [[12, 17], ["habitat.core.spaces.EmptySpace", "habitat.core.spaces.EmptySpace.contains", "habitat.core.spaces.EmptySpace.contains", "habitat.core.spaces.EmptySpace.sample", "habitat.core.spaces.EmptySpace.contains"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.contains", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.contains", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.sample", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.contains"], ["def", "test_empty_space", "(", ")", ":", "\n", "    ", "space", "=", "EmptySpace", "(", ")", "\n", "assert", "space", ".", "contains", "(", "space", ".", "sample", "(", ")", ")", "\n", "assert", "space", ".", "contains", "(", "None", ")", "\n", "assert", "not", "space", ".", "contains", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_spaces.test_action_space": [[19, 45], ["habitat.core.spaces.ActionSpace", "habitat.core.spaces.ActionSpace.contains", "habitat.core.spaces.ActionSpace.contains", "habitat.core.spaces.ActionSpace.contains", "habitat.core.spaces.ActionSpace.sample", "habitat.core.spaces.ActionSpace.contains", "habitat.core.spaces.ActionSpace.contains", "habitat.core.spaces.ActionSpace.contains", "habitat.core.spaces.ActionSpace.contains", "habitat.core.spaces.ActionSpace.contains", "habitat.core.spaces.ActionSpace.contains", "gym.spaces.Dict", "habitat.core.spaces.EmptySpace", "gym.spaces.Discrete", "gym.spaces.Discrete"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.contains", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.contains", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.contains", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.sample", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.contains", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.contains", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.contains", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.contains", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.contains", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.contains"], ["", "def", "test_action_space", "(", ")", ":", "\n", "    ", "space", "=", "ActionSpace", "(", "\n", "{", "\n", "\"move\"", ":", "gym", ".", "spaces", ".", "Dict", "(", "\n", "{", "\n", "\"position\"", ":", "gym", ".", "spaces", ".", "Discrete", "(", "2", ")", ",", "\n", "\"velocity\"", ":", "gym", ".", "spaces", ".", "Discrete", "(", "3", ")", ",", "\n", "}", "\n", ")", ",", "\n", "\"move_forward\"", ":", "EmptySpace", "(", ")", ",", "\n", "}", "\n", ")", "\n", "assert", "space", ".", "contains", "(", "space", ".", "sample", "(", ")", ")", "\n", "assert", "space", ".", "contains", "(", "\n", "{", "\"action\"", ":", "\"move\"", ",", "\"action_args\"", ":", "{", "\"position\"", ":", "0", ",", "\"velocity\"", ":", "1", "}", "}", "\n", ")", "\n", "assert", "space", ".", "contains", "(", "{", "\"action\"", ":", "\"move_forward\"", "}", ")", "\n", "assert", "not", "space", ".", "contains", "(", "[", "0", ",", "1", ",", "2", "]", ")", "\n", "assert", "not", "space", ".", "contains", "(", "{", "\"zero\"", ":", "None", "}", ")", "\n", "assert", "not", "space", ".", "contains", "(", "{", "\"action\"", ":", "\"bad\"", "}", ")", "\n", "assert", "not", "space", ".", "contains", "(", "{", "\"action\"", ":", "\"move\"", "}", ")", "\n", "assert", "not", "space", ".", "contains", "(", "\n", "{", "\"action\"", ":", "\"move\"", ",", "\"action_args\"", ":", "{", "\"position\"", ":", "0", "}", "}", "\n", ")", "\n", "assert", "not", "space", ".", "contains", "(", "\n", "{", "\"action\"", ":", "\"move_forward\"", ",", "\"action_args\"", ":", "{", "\"position\"", ":", "0", "}", "}", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_spaces.test_list_space": [[48, 55], ["habitat.core.spaces.ListSpace", "habitat.core.spaces.ListSpace.contains", "gym.spaces.Discrete", "habitat.core.spaces.ListSpace.sample", "habitat.core.spaces.ListSpace.contains", "habitat.core.spaces.ListSpace.contains", "habitat.core.spaces.ListSpace.contains", "habitat.core.spaces.ListSpace.contains"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.contains", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.sample", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.contains", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.contains", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.contains", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.contains"], ["", "def", "test_list_space", "(", ")", ":", "\n", "    ", "space", "=", "ListSpace", "(", "gym", ".", "spaces", ".", "Discrete", "(", "2", ")", ",", "5", ",", "10", ")", "\n", "assert", "space", ".", "contains", "(", "space", ".", "sample", "(", ")", ")", "\n", "assert", "not", "space", ".", "contains", "(", "0", ")", "\n", "assert", "not", "space", ".", "contains", "(", "[", "0", "]", "*", "4", ")", "\n", "assert", "not", "space", ".", "contains", "(", "[", "2", "]", "*", "5", ")", "\n", "assert", "not", "space", ".", "contains", "(", "[", "1", "]", "*", "11", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_motion_plan.test_pick_motion_planning": [[22, 56], ["pytest.mark.skipif", "habitat.config.default.get_config", "habitat.core.benchmark.Benchmark", "habitat_baselines.agents.mp_agents.AgentComposition", "habitat.core.benchmark.Benchmark.evaluate", "habitat_baselines.motion_planning.motion_plan.is_ompl_installed", "habitat.config.default.get_config", "habitat_baselines.agents.mp_agents.SpaManipPick", "habitat_baselines.agents.mp_agents.SpaResetModule", "skill._sim.get_targets"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.benchmark_gym.BenchmarkGym.evaluate", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.motion_plan.is_ompl_installed", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.get_targets"], ["@", "pytest", ".", "mark", ".", "skipif", "(", "\n", "not", "is_ompl_installed", "(", ")", ",", "\n", "reason", "=", "\"The Open Motion Planning Library is not installed.\"", ",", "\n", ")", "\n", "def", "test_pick_motion_planning", "(", ")", ":", "\n", "    ", "config", "=", "get_config", "(", "TEST_CFG", ")", "\n", "\n", "benchmark", "=", "Benchmark", "(", "config", ".", "BASE_TASK_CONFIG_PATH", ")", "\n", "\n", "def", "get_args", "(", "skill", ")", ":", "\n", "        ", "target_idx", "=", "skill", ".", "_sim", ".", "get_targets", "(", ")", "[", "0", "]", "[", "0", "]", "\n", "return", "{", "\"obj\"", ":", "target_idx", "}", "\n", "\n", "", "ac_cfg", "=", "get_config", "(", "config", ".", "BASE_TASK_CONFIG_PATH", ")", ".", "TASK", ".", "ACTIONS", "\n", "spa_cfg", "=", "config", ".", "SENSE_PLAN_ACT", "\n", "env", "=", "benchmark", ".", "_env", "\n", "pick_skill", "=", "AgentComposition", "(", "\n", "[", "\n", "SpaManipPick", "(", "env", ",", "spa_cfg", ",", "ac_cfg", ",", "auto_get_args_fn", "=", "get_args", ")", ",", "\n", "SpaResetModule", "(", "\n", "env", ",", "\n", "spa_cfg", ",", "\n", "ac_cfg", ",", "\n", "ignore_first", "=", "True", ",", "\n", "auto_get_args_fn", "=", "get_args", ",", "\n", ")", ",", "\n", "]", ",", "\n", "env", ",", "\n", "spa_cfg", ",", "\n", "ac_cfg", ",", "\n", "auto_get_args_fn", "=", "get_args", ",", "\n", ")", "\n", "metrics", "=", "benchmark", ".", "evaluate", "(", "pick_skill", ",", "1", ")", "\n", "assert", "metrics", "[", "RearrangePickSuccess", ".", "cls_uuid", "]", "==", "1.0", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_object_nav_task.check_json_serializaiton": [[25, 42], ["time.time", "dataset.to_json", "habitat.core.logging.logger.info", "habitat.datasets.object_nav.object_nav_dataset.ObjectNavDatasetV1", "habitat.datasets.object_nav.object_nav_dataset.ObjectNavDatasetV1.from_json", "isinstance", "len", "len", "json.loads", "json.loads", "habitat.datasets.object_nav.object_nav_dataset.ObjectNavDatasetV1.to_json", "time.time"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.to_json", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.from_json", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.to_json"], ["def", "check_json_serializaiton", "(", "dataset", ":", "habitat", ".", "Dataset", ")", ":", "\n", "    ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "json_str", "=", "dataset", ".", "to_json", "(", ")", "\n", "logger", ".", "info", "(", "\n", "\"JSON conversion finished. {} sec\"", ".", "format", "(", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", ")", "\n", "decoded_dataset", "=", "ObjectNavDatasetV1", "(", ")", "\n", "decoded_dataset", ".", "from_json", "(", "json_str", ")", "\n", "assert", "len", "(", "decoded_dataset", ".", "episodes", ")", "==", "len", "(", "dataset", ".", "episodes", ")", "\n", "episode", "=", "decoded_dataset", ".", "episodes", "[", "0", "]", "\n", "assert", "isinstance", "(", "episode", ",", "Episode", ")", "\n", "\n", "# The strings won't match exactly as dictionaries don't have an order for the keys", "\n", "# Thus we need to parse the json strings and compare the serialized forms", "\n", "assert", "json", ".", "loads", "(", "decoded_dataset", ".", "to_json", "(", ")", ")", "==", "json", ".", "loads", "(", "\n", "json_str", "\n", ")", ",", "\"JSON dataset encoding/decoding isn't consistent\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_object_nav_task.test_mp3d_object_nav_dataset": [[44, 62], ["habitat.make_dataset", "test_object_nav_task.check_json_serializaiton", "habitat.config.default.get_config", "habitat.datasets.object_nav.object_nav_dataset.ObjectNavDatasetV1.check_config_paths_exist", "pytest.skip", "habitat.make_dataset.goals_by_category.items"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.registration.make_dataset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_r2r_vln.check_json_serializaiton", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pointnav.pointnav_dataset.PointNavDatasetV1.check_config_paths_exist"], ["", "def", "test_mp3d_object_nav_dataset", "(", ")", ":", "\n", "    ", "dataset_config", "=", "get_config", "(", "CFG_TEST", ")", ".", "DATASET", "\n", "if", "not", "ObjectNavDatasetV1", ".", "check_config_paths_exist", "(", "dataset_config", ")", ":", "\n", "        ", "pytest", ".", "skip", "(", "\n", "\"Please download Matterport3D ObjectNav Dataset to data folder.\"", "\n", ")", "\n", "\n", "", "dataset", "=", "habitat", ".", "make_dataset", "(", "\n", "id_dataset", "=", "dataset_config", ".", "TYPE", ",", "config", "=", "dataset_config", "\n", ")", "\n", "assert", "dataset", "\n", "dataset", ".", "episodes", "=", "dataset", ".", "episodes", "[", "0", ":", "EPISODES_LIMIT", "]", "\n", "dataset", ".", "goals_by_category", "=", "{", "\n", "k", ":", "v", "\n", "for", "k", ",", "v", "in", "dataset", ".", "goals_by_category", ".", "items", "(", ")", "\n", "if", "k", "in", "(", "ep", ".", "goals_key", "for", "ep", "in", "dataset", ".", "episodes", ")", "\n", "}", "\n", "check_json_serializaiton", "(", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_object_nav_task.test_dataset_splitting": [[64, 110], ["pytest.mark.parametrize", "dataset_config.defrost", "habitat.datasets.object_nav.object_nav_dataset.ObjectNavDatasetV1.get_scenes_to_load", "habitat.datasets.make_dataset", "habitat.datasets.make_dataset", "habitat.datasets.make_dataset", "habitat.config.default.get_config", "habitat.datasets.object_nav.object_nav_dataset.ObjectNavDatasetV1.check_config_paths_exist", "pytest.skip", "len", "split1_episodes.union", "len", "split1_episodes.intersection"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.get_scenes_to_load", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.registration.make_dataset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.registration.make_dataset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.registration.make_dataset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pointnav.pointnav_dataset.PointNavDatasetV1.check_config_paths_exist"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"split\"", ",", "[", "\"train\"", ",", "\"val\"", "]", ")", "\n", "def", "test_dataset_splitting", "(", "split", ")", ":", "\n", "    ", "dataset_config", "=", "get_config", "(", "CFG_TEST", ")", ".", "DATASET", "\n", "dataset_config", ".", "defrost", "(", ")", "\n", "dataset_config", ".", "SPLIT", "=", "split", "\n", "\n", "if", "not", "ObjectNavDatasetV1", ".", "check_config_paths_exist", "(", "dataset_config", ")", ":", "\n", "        ", "pytest", ".", "skip", "(", "\"Test skipped as dataset files are missing.\"", ")", "\n", "\n", "", "scenes", "=", "ObjectNavDatasetV1", ".", "get_scenes_to_load", "(", "config", "=", "dataset_config", ")", "\n", "assert", "(", "\n", "len", "(", "scenes", ")", ">", "0", "\n", ")", ",", "\"Expected dataset contains separate episode file per scene.\"", "\n", "\n", "dataset_config", ".", "CONTENT_SCENES", "=", "scenes", "[", ":", "PARTIAL_LOAD_SCENES", "]", "\n", "full_dataset", "=", "make_dataset", "(", "\n", "id_dataset", "=", "dataset_config", ".", "TYPE", ",", "config", "=", "dataset_config", "\n", ")", "\n", "full_episodes", "=", "{", "\n", "(", "ep", ".", "scene_id", ",", "ep", ".", "episode_id", ")", "for", "ep", "in", "full_dataset", ".", "episodes", "\n", "}", "\n", "\n", "dataset_config", ".", "CONTENT_SCENES", "=", "scenes", "[", ":", "PARTIAL_LOAD_SCENES", "//", "2", "]", "\n", "split1_dataset", "=", "make_dataset", "(", "\n", "id_dataset", "=", "dataset_config", ".", "TYPE", ",", "config", "=", "dataset_config", "\n", ")", "\n", "split1_episodes", "=", "{", "\n", "(", "ep", ".", "scene_id", ",", "ep", ".", "episode_id", ")", "for", "ep", "in", "split1_dataset", ".", "episodes", "\n", "}", "\n", "\n", "dataset_config", ".", "CONTENT_SCENES", "=", "scenes", "[", "\n", "PARTIAL_LOAD_SCENES", "//", "2", ":", "PARTIAL_LOAD_SCENES", "\n", "]", "\n", "split2_dataset", "=", "make_dataset", "(", "\n", "id_dataset", "=", "dataset_config", ".", "TYPE", ",", "config", "=", "dataset_config", "\n", ")", "\n", "split2_episodes", "=", "{", "\n", "(", "ep", ".", "scene_id", ",", "ep", ".", "episode_id", ")", "for", "ep", "in", "split2_dataset", ".", "episodes", "\n", "}", "\n", "\n", "assert", "full_episodes", "==", "split1_episodes", ".", "union", "(", "\n", "split2_episodes", "\n", ")", ",", "\"Split dataset is not equal to full dataset\"", "\n", "assert", "(", "\n", "len", "(", "split1_episodes", ".", "intersection", "(", "split2_episodes", ")", ")", "==", "0", "\n", ")", ",", "\"Intersection of split datasets is not the empty set\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_object_nav_task.test_object_nav_task": [[112, 140], ["habitat.config.default.get_config", "habitat.datasets.make_dataset", "habitat.datasets.object_nav.object_nav_dataset.ObjectNavDatasetV1.check_config_paths_exist", "pytest.skip", "habitat.Env", "range", "env.reset", "env.get_metrics", "habitat.core.logging.logger.info", "pytest.raises", "env.step", "env.action_space.sample", "habitat.logger.info", "env.step"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.registration.make_dataset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pointnav.pointnav_dataset.PointNavDatasetV1.check_config_paths_exist", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env.get_metrics", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.sample", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step"], ["", "def", "test_object_nav_task", "(", ")", ":", "\n", "    ", "config", "=", "get_config", "(", "CFG_TEST", ")", "\n", "\n", "if", "not", "ObjectNavDatasetV1", ".", "check_config_paths_exist", "(", "config", ".", "DATASET", ")", ":", "\n", "        ", "pytest", ".", "skip", "(", "\n", "\"Please download Matterport3D scene and ObjectNav Datasets to data folder.\"", "\n", ")", "\n", "\n", "", "dataset", "=", "make_dataset", "(", "\n", "id_dataset", "=", "config", ".", "DATASET", ".", "TYPE", ",", "config", "=", "config", ".", "DATASET", "\n", ")", "\n", "with", "habitat", ".", "Env", "(", "config", "=", "config", ",", "dataset", "=", "dataset", ")", "as", "env", ":", "\n", "        ", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "            ", "env", ".", "reset", "(", ")", "\n", "while", "not", "env", ".", "episode_over", ":", "\n", "                ", "action", "=", "env", ".", "action_space", ".", "sample", "(", ")", "\n", "habitat", ".", "logger", ".", "info", "(", "\n", "f\"Action : \"", "\n", "f\"{action['action']}, \"", "\n", "f\"args: {action['action_args']}.\"", "\n", ")", "\n", "env", ".", "step", "(", "action", ")", "\n", "\n", "", "metrics", "=", "env", ".", "get_metrics", "(", ")", "\n", "logger", ".", "info", "(", "metrics", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "            ", "env", ".", "step", "(", "{", "\"action\"", ":", "MoveForwardAction", ".", "name", "}", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_sensors._random_episode": [[32, 49], ["env._sim.sample_navigable_point", "numpy.random.uniform", "iter", "numpy.sin", "numpy.cos", "habitat.tasks.nav.nav.NavigationEpisode"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.sample_navigable_point"], ["def", "_random_episode", "(", "env", ",", "config", ")", ":", "\n", "    ", "random_location", "=", "env", ".", "_sim", ".", "sample_navigable_point", "(", ")", "\n", "random_heading", "=", "np", ".", "random", ".", "uniform", "(", "-", "np", ".", "pi", ",", "np", ".", "pi", ")", "\n", "random_rotation", "=", "[", "\n", "0", ",", "\n", "np", ".", "sin", "(", "random_heading", "/", "2", ")", ",", "\n", "0", ",", "\n", "np", ".", "cos", "(", "random_heading", "/", "2", ")", ",", "\n", "]", "\n", "env", ".", "episode_iterator", "=", "iter", "(", "\n", "[", "\n", "NavigationEpisode", "(", "\n", "episode_id", "=", "\"0\"", ",", "\n", "scene_id", "=", "config", ".", "SIMULATOR", ".", "SCENE", ",", "\n", "start_position", "=", "random_location", ",", "\n", "start_rotation", "=", "random_rotation", ",", "\n", "goals", "=", "[", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_sensors.test_state_sensors": [[54, 91], ["habitat.config.default.get_config", "habitat.config.default.get_config.defrost", "habitat.config.default.get_config.freeze", "os.path.exists", "pytest.skip", "habitat.Env", "env.reset", "random.seed", "numpy.random.seed", "range", "numpy.random.uniform", "iter", "env.reset", "numpy.allclose", "numpy.allclose", "numpy.allclose", "numpy.sin", "numpy.cos", "habitat.tasks.nav.nav.NavigationEpisode"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.exists", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.seed", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.seed", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset"], ["", "def", "test_state_sensors", "(", ")", ":", "\n", "    ", "config", "=", "get_config", "(", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "config", ".", "SIMULATOR", ".", "SCENE", ")", ":", "\n", "        ", "pytest", ".", "skip", "(", "\"Please download Habitat test data to data folder.\"", ")", "\n", "", "config", ".", "defrost", "(", ")", "\n", "config", ".", "TASK", ".", "SENSORS", "=", "[", "\"HEADING_SENSOR\"", ",", "\"COMPASS_SENSOR\"", ",", "\"GPS_SENSOR\"", "]", "\n", "config", ".", "freeze", "(", ")", "\n", "with", "habitat", ".", "Env", "(", "config", "=", "config", ",", "dataset", "=", "None", ")", "as", "env", ":", "\n", "        ", "env", ".", "reset", "(", ")", "\n", "random", ".", "seed", "(", "123", ")", "\n", "np", ".", "random", ".", "seed", "(", "123", ")", "\n", "\n", "for", "_", "in", "range", "(", "100", ")", ":", "\n", "            ", "random_heading", "=", "np", ".", "random", ".", "uniform", "(", "-", "np", ".", "pi", ",", "np", ".", "pi", ")", "\n", "random_rotation", "=", "[", "\n", "0", ",", "\n", "np", ".", "sin", "(", "random_heading", "/", "2", ")", ",", "\n", "0", ",", "\n", "np", ".", "cos", "(", "random_heading", "/", "2", ")", ",", "\n", "]", "\n", "env", ".", "episode_iterator", "=", "iter", "(", "\n", "[", "\n", "NavigationEpisode", "(", "\n", "episode_id", "=", "\"0\"", ",", "\n", "scene_id", "=", "config", ".", "SIMULATOR", ".", "SCENE", ",", "\n", "start_position", "=", "[", "03.00611", ",", "0.072_447", ",", "-", "2.67867", "]", ",", "\n", "start_rotation", "=", "random_rotation", ",", "\n", "goals", "=", "[", "]", ",", "\n", ")", "\n", "]", "\n", ")", "\n", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "heading", "=", "obs", "[", "\"heading\"", "]", "\n", "assert", "np", ".", "allclose", "(", "heading", ",", "[", "random_heading", "]", ")", "\n", "assert", "np", ".", "allclose", "(", "obs", "[", "\"compass\"", "]", ",", "[", "0.0", "]", ",", "atol", "=", "1e-5", ")", "\n", "assert", "np", ".", "allclose", "(", "obs", "[", "\"gps\"", "]", ",", "[", "0.0", ",", "0.0", "]", ",", "atol", "=", "1e-5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_sensors.test_tactile": [[93, 113], ["habitat.config.default.get_config", "habitat.config.default.get_config.defrost", "habitat.config.default.get_config.freeze", "os.path.exists", "pytest.skip", "habitat.Env", "env.reset", "random.seed", "range", "test_sensors._random_episode", "env.reset", "range", "env.step"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.exists", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.seed", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_sensors._random_episode", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step"], ["", "", "", "def", "test_tactile", "(", ")", ":", "\n", "    ", "config", "=", "get_config", "(", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "config", ".", "SIMULATOR", ".", "SCENE", ")", ":", "\n", "        ", "pytest", ".", "skip", "(", "\"Please download Habitat test data to data folder.\"", ")", "\n", "", "config", ".", "defrost", "(", ")", "\n", "config", ".", "TASK", ".", "SENSORS", "=", "[", "\"PROXIMITY_SENSOR\"", "]", "\n", "config", ".", "freeze", "(", ")", "\n", "with", "habitat", ".", "Env", "(", "config", "=", "config", ",", "dataset", "=", "None", ")", "as", "env", ":", "\n", "        ", "env", ".", "reset", "(", ")", "\n", "random", ".", "seed", "(", "1234", ")", "\n", "\n", "for", "_", "in", "range", "(", "20", ")", ":", "\n", "            ", "_random_episode", "(", "env", ",", "config", ")", "\n", "env", ".", "reset", "(", ")", "\n", "\n", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "                ", "obs", "=", "env", ".", "step", "(", "action", "=", "MoveForwardAction", ".", "name", ")", "\n", "proximity", "=", "obs", "[", "\"proximity\"", "]", "\n", "assert", "0.0", "<=", "proximity", "\n", "assert", "2.0", ">=", "proximity", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_sensors.test_collisions": [[115, 153], ["habitat.config.default.get_config", "habitat.config.default.get_config.defrost", "habitat.config.default.get_config.freeze", "os.path.exists", "pytest.skip", "habitat.Env", "env.reset", "range", "test_sensors._random_episode", "env.reset", "range", "env.sim.get_agent_state", "habitat.utils.test_utils.sample_non_stop_action", "env.step", "env.get_metrics", "env.sim.get_agent_state", "env.get_metrics", "numpy.linalg.norm"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.exists", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_sensors._random_episode", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.get_agent_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.test_utils.sample_non_stop_action", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env.get_metrics", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.get_agent_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env.get_metrics"], ["", "", "", "", "def", "test_collisions", "(", ")", ":", "\n", "    ", "config", "=", "get_config", "(", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "config", ".", "SIMULATOR", ".", "SCENE", ")", ":", "\n", "        ", "pytest", ".", "skip", "(", "\"Please download Habitat test data to data folder.\"", ")", "\n", "", "config", ".", "defrost", "(", ")", "\n", "config", ".", "TASK", ".", "MEASUREMENTS", "=", "[", "\"COLLISIONS\"", "]", "\n", "config", ".", "freeze", "(", ")", "\n", "with", "habitat", ".", "Env", "(", "config", "=", "config", ",", "dataset", "=", "None", ")", "as", "env", ":", "\n", "        ", "env", ".", "reset", "(", ")", "\n", "\n", "for", "_", "in", "range", "(", "20", ")", ":", "\n", "            ", "_random_episode", "(", "env", ",", "config", ")", "\n", "\n", "env", ".", "reset", "(", ")", "\n", "assert", "env", ".", "get_metrics", "(", ")", "[", "\"collisions\"", "]", "is", "None", "\n", "\n", "prev_collisions", "=", "0", "\n", "prev_loc", "=", "env", ".", "sim", ".", "get_agent_state", "(", ")", ".", "position", "\n", "for", "_", "in", "range", "(", "50", ")", ":", "\n", "                ", "action", "=", "sample_non_stop_action", "(", "env", ".", "action_space", ")", "\n", "env", ".", "step", "(", "action", ")", "\n", "collisions", "=", "env", ".", "get_metrics", "(", ")", "[", "\"collisions\"", "]", "[", "\"count\"", "]", "\n", "loc", "=", "env", ".", "sim", ".", "get_agent_state", "(", ")", ".", "position", "\n", "if", "(", "\n", "np", ".", "linalg", ".", "norm", "(", "loc", "-", "prev_loc", ")", "\n", "<", "0.9", "*", "config", ".", "SIMULATOR", ".", "FORWARD_STEP_SIZE", "\n", "and", "action", "[", "\"action\"", "]", "==", "MoveForwardAction", ".", "name", "\n", ")", ":", "\n", "# Check to see if the new method of doing collisions catches", "\n", "# all the same collisions as the old method", "\n", "                    ", "assert", "collisions", "==", "prev_collisions", "+", "1", "\n", "\n", "# We can _never_ collide with standard turn actions", "\n", "", "if", "action", "[", "\"action\"", "]", "!=", "MoveForwardAction", ".", "name", ":", "\n", "                    ", "assert", "collisions", "==", "prev_collisions", "\n", "\n", "", "prev_loc", "=", "loc", "\n", "prev_collisions", "=", "collisions", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_sensors.test_pointgoal_sensor": [[155, 193], ["habitat.config.default.get_config", "habitat.config.default.get_config.defrost", "habitat.config.default.get_config.freeze", "os.path.exists", "pytest.skip", "habitat.Env", "numpy.add", "iter", "env.reset", "range", "env.step", "numpy.allclose", "habitat.tasks.nav.nav.NavigationEpisode", "habitat.utils.test_utils.sample_non_stop_action", "habitat.tasks.nav.nav.NavigationGoal"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.exists", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.test_utils.sample_non_stop_action"], ["", "", "", "", "def", "test_pointgoal_sensor", "(", ")", ":", "\n", "    ", "config", "=", "get_config", "(", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "config", ".", "SIMULATOR", ".", "SCENE", ")", ":", "\n", "        ", "pytest", ".", "skip", "(", "\"Please download Habitat test data to data folder.\"", ")", "\n", "", "config", ".", "defrost", "(", ")", "\n", "config", ".", "TASK", ".", "SENSORS", "=", "[", "\"POINTGOAL_SENSOR\"", "]", "\n", "config", ".", "TASK", ".", "POINTGOAL_SENSOR", ".", "DIMENSIONALITY", "=", "3", "\n", "config", ".", "TASK", ".", "POINTGOAL_SENSOR", ".", "GOAL_FORMAT", "=", "\"CARTESIAN\"", "\n", "config", ".", "freeze", "(", ")", "\n", "with", "habitat", ".", "Env", "(", "config", "=", "config", ",", "dataset", "=", "None", ")", "as", "env", ":", "\n", "\n", "# start position is checked for validity for the specific test scene", "\n", "        ", "valid_start_position", "=", "[", "-", "1.3731", ",", "0.08431", ",", "8.60692", "]", "\n", "expected_pointgoal", "=", "[", "0.1", ",", "0.2", ",", "0.3", "]", "\n", "goal_position", "=", "np", ".", "add", "(", "valid_start_position", ",", "expected_pointgoal", ")", "\n", "\n", "# starting quaternion is rotated 180 degree along z-axis, which", "\n", "# corresponds to simulator using z-negative as forward action", "\n", "start_rotation", "=", "[", "0", ",", "0", ",", "0", ",", "1", "]", "\n", "\n", "env", ".", "episode_iterator", "=", "iter", "(", "\n", "[", "\n", "NavigationEpisode", "(", "\n", "episode_id", "=", "\"0\"", ",", "\n", "scene_id", "=", "config", ".", "SIMULATOR", ".", "SCENE", ",", "\n", "start_position", "=", "valid_start_position", ",", "\n", "start_rotation", "=", "start_rotation", ",", "\n", "goals", "=", "[", "NavigationGoal", "(", "position", "=", "goal_position", ")", "]", ",", "\n", ")", "\n", "]", "\n", ")", "\n", "\n", "env", ".", "reset", "(", ")", "\n", "for", "_", "in", "range", "(", "100", ")", ":", "\n", "            ", "obs", "=", "env", ".", "step", "(", "sample_non_stop_action", "(", "env", ".", "action_space", ")", ")", "\n", "pointgoal", "=", "obs", "[", "\"pointgoal\"", "]", "\n", "# check to see if taking non-stop actions will affect static point_goal", "\n", "assert", "np", ".", "allclose", "(", "pointgoal", ",", "expected_pointgoal", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_sensors.test_pointgoal_with_gps_compass_sensor": [[195, 254], ["habitat.config.default.get_config", "habitat.config.default.get_config.defrost", "habitat.config.default.get_config.freeze", "os.path.exists", "pytest.skip", "habitat.Env", "numpy.add", "iter", "env.reset", "range", "env.step", "float", "numpy.allclose", "habitat.tasks.nav.nav.NavigationEpisode", "habitat.utils.test_utils.sample_non_stop_action", "habitat.utils.geometry_utils.quaternion_rotate_vector", "quaternion.from_rotation_vector().inverse", "habitat.tasks.nav.nav.NavigationGoal", "quaternion.from_rotation_vector", "numpy.array"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.exists", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.test_utils.sample_non_stop_action", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.geometry_utils.quaternion_rotate_vector"], ["", "", "", "def", "test_pointgoal_with_gps_compass_sensor", "(", ")", ":", "\n", "    ", "config", "=", "get_config", "(", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "config", ".", "SIMULATOR", ".", "SCENE", ")", ":", "\n", "        ", "pytest", ".", "skip", "(", "\"Please download Habitat test data to data folder.\"", ")", "\n", "", "config", ".", "defrost", "(", ")", "\n", "config", ".", "TASK", ".", "SENSORS", "=", "[", "\n", "\"POINTGOAL_WITH_GPS_COMPASS_SENSOR\"", ",", "\n", "\"COMPASS_SENSOR\"", ",", "\n", "\"GPS_SENSOR\"", ",", "\n", "\"POINTGOAL_SENSOR\"", ",", "\n", "]", "\n", "config", ".", "TASK", ".", "POINTGOAL_WITH_GPS_COMPASS_SENSOR", ".", "DIMENSIONALITY", "=", "3", "\n", "config", ".", "TASK", ".", "POINTGOAL_WITH_GPS_COMPASS_SENSOR", ".", "GOAL_FORMAT", "=", "\"CARTESIAN\"", "\n", "\n", "config", ".", "TASK", ".", "POINTGOAL_SENSOR", ".", "DIMENSIONALITY", "=", "3", "\n", "config", ".", "TASK", ".", "POINTGOAL_SENSOR", ".", "GOAL_FORMAT", "=", "\"CARTESIAN\"", "\n", "\n", "config", ".", "TASK", ".", "GPS_SENSOR", ".", "DIMENSIONALITY", "=", "3", "\n", "\n", "config", ".", "freeze", "(", ")", "\n", "with", "habitat", ".", "Env", "(", "config", "=", "config", ",", "dataset", "=", "None", ")", "as", "env", ":", "\n", "# start position is checked for validity for the specific test scene", "\n", "        ", "valid_start_position", "=", "[", "-", "1.3731", ",", "0.08431", ",", "8.60692", "]", "\n", "expected_pointgoal", "=", "[", "0.1", ",", "0.2", ",", "0.3", "]", "\n", "goal_position", "=", "np", ".", "add", "(", "valid_start_position", ",", "expected_pointgoal", ")", "\n", "\n", "# starting quaternion is rotated 180 degree along z-axis, which", "\n", "# corresponds to simulator using z-negative as forward action", "\n", "start_rotation", "=", "[", "0", ",", "0", ",", "0", ",", "1", "]", "\n", "\n", "env", ".", "episode_iterator", "=", "iter", "(", "\n", "[", "\n", "NavigationEpisode", "(", "\n", "episode_id", "=", "\"0\"", ",", "\n", "scene_id", "=", "config", ".", "SIMULATOR", ".", "SCENE", ",", "\n", "start_position", "=", "valid_start_position", ",", "\n", "start_rotation", "=", "start_rotation", ",", "\n", "goals", "=", "[", "NavigationGoal", "(", "position", "=", "goal_position", ")", "]", ",", "\n", ")", "\n", "]", "\n", ")", "\n", "\n", "env", ".", "reset", "(", ")", "\n", "for", "_", "in", "range", "(", "100", ")", ":", "\n", "            ", "obs", "=", "env", ".", "step", "(", "sample_non_stop_action", "(", "env", ".", "action_space", ")", ")", "\n", "pointgoal", "=", "obs", "[", "\"pointgoal\"", "]", "\n", "pointgoal_with_gps_compass", "=", "obs", "[", "\"pointgoal_with_gps_compass\"", "]", "\n", "compass", "=", "float", "(", "obs", "[", "\"compass\"", "]", "[", "0", "]", ")", "\n", "gps", "=", "obs", "[", "\"gps\"", "]", "\n", "# check to see if taking non-stop actions will affect static point_goal", "\n", "assert", "np", ".", "allclose", "(", "\n", "pointgoal_with_gps_compass", ",", "\n", "quaternion_rotate_vector", "(", "\n", "quaternion", ".", "from_rotation_vector", "(", "\n", "compass", "*", "np", ".", "array", "(", "[", "0", ",", "1", ",", "0", "]", ")", "\n", ")", ".", "inverse", "(", ")", ",", "\n", "pointgoal", "-", "gps", ",", "\n", ")", ",", "\n", "atol", "=", "1e-5", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_sensors.test_imagegoal_sensor": [[257, 314], ["habitat.config.default.get_config", "habitat.config.default.get_config.defrost", "habitat.config.default.get_config.freeze", "os.path.exists", "pytest.skip", "habitat.Env", "numpy.add", "numpy.add", "iter", "env.reset", "range", "env.reset", "range", "env.step", "numpy.allclose", "numpy.allclose", "env.step", "numpy.allclose", "habitat.tasks.nav.nav.NavigationEpisode", "habitat.tasks.nav.nav.NavigationEpisode", "habitat.utils.test_utils.sample_non_stop_action", "habitat.utils.test_utils.sample_non_stop_action", "numpy.allclose", "habitat.tasks.nav.nav.NavigationGoal", "habitat.tasks.nav.nav.NavigationGoal"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.exists", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.test_utils.sample_non_stop_action", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.test_utils.sample_non_stop_action"], ["", "", "", "def", "test_imagegoal_sensor", "(", ")", ":", "\n", "    ", "config", "=", "get_config", "(", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "config", ".", "SIMULATOR", ".", "SCENE", ")", ":", "\n", "        ", "pytest", ".", "skip", "(", "\"Please download Habitat test data to data folder.\"", ")", "\n", "", "config", ".", "defrost", "(", ")", "\n", "config", ".", "TASK", ".", "SENSORS", "=", "[", "\"IMAGEGOAL_SENSOR\"", "]", "\n", "config", ".", "SIMULATOR", ".", "AGENT_0", ".", "SENSORS", "=", "[", "\"RGB_SENSOR\"", "]", "\n", "config", ".", "freeze", "(", ")", "\n", "with", "habitat", ".", "Env", "(", "config", "=", "config", ",", "dataset", "=", "None", ")", "as", "env", ":", "\n", "\n", "# start position is checked for validity for the specific test scene", "\n", "        ", "valid_start_position", "=", "[", "-", "1.3731", ",", "0.08431", ",", "8.60692", "]", "\n", "pointgoal", "=", "[", "0.1", ",", "0.2", ",", "0.3", "]", "\n", "goal_position", "=", "np", ".", "add", "(", "valid_start_position", ",", "pointgoal", ")", "\n", "\n", "pointgoal_2", "=", "[", "0.3", ",", "0.2", ",", "0.1", "]", "\n", "goal_position_2", "=", "np", ".", "add", "(", "valid_start_position", ",", "pointgoal_2", ")", "\n", "\n", "# starting quaternion is rotated 180 degree along z-axis, which", "\n", "# corresponds to simulator using z-negative as forward action", "\n", "start_rotation", "=", "[", "0", ",", "0", ",", "0", ",", "1", "]", "\n", "\n", "env", ".", "episode_iterator", "=", "iter", "(", "\n", "[", "\n", "NavigationEpisode", "(", "\n", "episode_id", "=", "\"0\"", ",", "\n", "scene_id", "=", "config", ".", "SIMULATOR", ".", "SCENE", ",", "\n", "start_position", "=", "valid_start_position", ",", "\n", "start_rotation", "=", "start_rotation", ",", "\n", "goals", "=", "[", "NavigationGoal", "(", "position", "=", "goal_position", ")", "]", ",", "\n", ")", ",", "\n", "NavigationEpisode", "(", "\n", "episode_id", "=", "\"1\"", ",", "\n", "scene_id", "=", "config", ".", "SIMULATOR", ".", "SCENE", ",", "\n", "start_position", "=", "valid_start_position", ",", "\n", "start_rotation", "=", "start_rotation", ",", "\n", "goals", "=", "[", "NavigationGoal", "(", "position", "=", "goal_position_2", ")", "]", ",", "\n", ")", ",", "\n", "]", "\n", ")", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "for", "_", "in", "range", "(", "100", ")", ":", "\n", "            ", "new_obs", "=", "env", ".", "step", "(", "sample_non_stop_action", "(", "env", ".", "action_space", ")", ")", "\n", "# check to see if taking non-stop actions will affect static image_goal", "\n", "assert", "np", ".", "allclose", "(", "obs", "[", "\"imagegoal\"", "]", ",", "new_obs", "[", "\"imagegoal\"", "]", ")", "\n", "assert", "np", ".", "allclose", "(", "obs", "[", "\"rgb\"", "]", ".", "shape", ",", "new_obs", "[", "\"imagegoal\"", "]", ".", "shape", ")", "\n", "\n", "", "previous_episode_obs", "=", "obs", "\n", "_", "=", "env", ".", "reset", "(", ")", "\n", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "            ", "new_obs", "=", "env", ".", "step", "(", "sample_non_stop_action", "(", "env", ".", "action_space", ")", ")", "\n", "# check to see if taking non-stop actions will affect static image_goal", "\n", "assert", "not", "np", ".", "allclose", "(", "\n", "previous_episode_obs", "[", "\"imagegoal\"", "]", ",", "new_obs", "[", "\"imagegoal\"", "]", "\n", ")", "\n", "assert", "np", ".", "allclose", "(", "\n", "previous_episode_obs", "[", "\"rgb\"", "]", ".", "shape", ",", "new_obs", "[", "\"imagegoal\"", "]", ".", "shape", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_sensors.test_get_observations_at": [[317, 379], ["habitat.config.default.get_config", "habitat.config.default.get_config.defrost", "habitat.config.default.get_config.freeze", "os.path.exists", "pytest.skip", "habitat.Env", "numpy.add", "iter", "env.reset", "env.sim.get_agent_state", "range", "env.sim.get_observations_at", "env.sim.get_observations_at.items", "env.sim.get_agent_state", "numpy.allclose", "numpy.allclose", "env.step", "env.step.items", "env.sim.get_observations_at", "env.sim.get_observations_at.items", "numpy.allclose", "habitat.tasks.nav.nav.NavigationEpisode", "habitat.utils.test_utils.sample_non_stop_action", "env.sim.get_agent_state", "numpy.allclose", "numpy.allclose", "numpy.allclose", "numpy.allclose", "habitat.tasks.nav.nav.NavigationGoal"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.exists", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.get_agent_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.get_observations_at", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.get_agent_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.get_observations_at", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.test_utils.sample_non_stop_action", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.get_agent_state"], ["", "", "", "def", "test_get_observations_at", "(", ")", ":", "\n", "    ", "config", "=", "get_config", "(", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "config", ".", "SIMULATOR", ".", "SCENE", ")", ":", "\n", "        ", "pytest", ".", "skip", "(", "\"Please download Habitat test data to data folder.\"", ")", "\n", "", "config", ".", "defrost", "(", ")", "\n", "config", ".", "TASK", ".", "SENSORS", "=", "[", "]", "\n", "config", ".", "SIMULATOR", ".", "AGENT_0", ".", "SENSORS", "=", "[", "\"RGB_SENSOR\"", ",", "\"DEPTH_SENSOR\"", "]", "\n", "config", ".", "freeze", "(", ")", "\n", "with", "habitat", ".", "Env", "(", "config", "=", "config", ",", "dataset", "=", "None", ")", "as", "env", ":", "\n", "\n", "# start position is checked for validity for the specific test scene", "\n", "        ", "valid_start_position", "=", "[", "-", "1.3731", ",", "0.08431", ",", "8.60692", "]", "\n", "expected_pointgoal", "=", "[", "0.1", ",", "0.2", ",", "0.3", "]", "\n", "goal_position", "=", "np", ".", "add", "(", "valid_start_position", ",", "expected_pointgoal", ")", "\n", "\n", "# starting quaternion is rotated 180 degree along z-axis, which", "\n", "# corresponds to simulator using z-negative as forward action", "\n", "start_rotation", "=", "[", "0", ",", "0", ",", "0", ",", "1", "]", "\n", "\n", "env", ".", "episode_iterator", "=", "iter", "(", "\n", "[", "\n", "NavigationEpisode", "(", "\n", "episode_id", "=", "\"0\"", ",", "\n", "scene_id", "=", "config", ".", "SIMULATOR", ".", "SCENE", ",", "\n", "start_position", "=", "valid_start_position", ",", "\n", "start_rotation", "=", "start_rotation", ",", "\n", "goals", "=", "[", "NavigationGoal", "(", "position", "=", "goal_position", ")", "]", ",", "\n", ")", "\n", "]", "\n", ")", "\n", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "start_state", "=", "env", ".", "sim", ".", "get_agent_state", "(", ")", "\n", "for", "_", "in", "range", "(", "100", ")", ":", "\n", "# Note, this test will not currently work for camera change actions", "\n", "# (look up/down), only for movement actions.", "\n", "            ", "new_obs", "=", "env", ".", "step", "(", "sample_non_stop_action", "(", "env", ".", "action_space", ")", ")", "\n", "for", "key", ",", "val", "in", "new_obs", ".", "items", "(", ")", ":", "\n", "                ", "agent_state", "=", "env", ".", "sim", ".", "get_agent_state", "(", ")", "\n", "if", "not", "(", "\n", "np", ".", "allclose", "(", "agent_state", ".", "position", ",", "start_state", ".", "position", ")", "\n", "and", "np", ".", "allclose", "(", "agent_state", ".", "rotation", ",", "start_state", ".", "rotation", ")", "\n", ")", ":", "\n", "                    ", "assert", "not", "np", ".", "allclose", "(", "val", ",", "obs", "[", "key", "]", ")", "\n", "", "", "obs_at_point", "=", "env", ".", "sim", ".", "get_observations_at", "(", "\n", "start_state", ".", "position", ",", "\n", "start_state", ".", "rotation", ",", "\n", "keep_agent_at_new_pose", "=", "False", ",", "\n", ")", "\n", "for", "key", ",", "val", "in", "obs_at_point", ".", "items", "(", ")", ":", "\n", "                ", "assert", "np", ".", "allclose", "(", "val", ",", "obs", "[", "key", "]", ")", "\n", "\n", "", "", "obs_at_point", "=", "env", ".", "sim", ".", "get_observations_at", "(", "\n", "start_state", ".", "position", ",", "\n", "start_state", ".", "rotation", ",", "\n", "keep_agent_at_new_pose", "=", "True", ",", "\n", ")", "\n", "for", "key", ",", "val", "in", "obs_at_point", ".", "items", "(", ")", ":", "\n", "            ", "assert", "np", ".", "allclose", "(", "val", ",", "obs", "[", "key", "]", ")", "\n", "", "agent_state", "=", "env", ".", "sim", ".", "get_agent_state", "(", ")", "\n", "assert", "np", ".", "allclose", "(", "agent_state", ".", "position", ",", "start_state", ".", "position", ")", "\n", "assert", "np", ".", "allclose", "(", "agent_state", ".", "rotation", ",", "start_state", ".", "rotation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_sensors.smoke_test_sensor": [[381, 412], ["numpy.add", "habitat.tasks.nav.nav.NavigationEpisode", "os.path.exists", "pytest.skip", "habitat.Env", "iter", "env.reset", "habitat.utils.test_utils.sample_non_stop_action", "habitat.tasks.nav.nav.NavigationGoal", "range", "env.step"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.exists", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.test_utils.sample_non_stop_action", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step"], ["", "", "def", "smoke_test_sensor", "(", "config", ",", "N_STEPS", "=", "100", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "config", ".", "SIMULATOR", ".", "SCENE", ")", ":", "\n", "        ", "pytest", ".", "skip", "(", "\"Please download Habitat test data to data folder.\"", ")", "\n", "\n", "", "valid_start_position", "=", "[", "-", "1.3731", ",", "0.08431", ",", "8.60692", "]", "\n", "\n", "expected_pointgoal", "=", "[", "0.1", ",", "0.2", ",", "0.3", "]", "\n", "goal_position", "=", "np", ".", "add", "(", "valid_start_position", ",", "expected_pointgoal", ")", "\n", "\n", "# starting quaternion is rotated 180 degree along z-axis, which", "\n", "# corresponds to simulator using z-negative as forward action", "\n", "start_rotation", "=", "[", "0", ",", "0", ",", "0", ",", "1", "]", "\n", "test_episode", "=", "NavigationEpisode", "(", "\n", "episode_id", "=", "\"0\"", ",", "\n", "scene_id", "=", "config", ".", "SIMULATOR", ".", "SCENE", ",", "\n", "start_position", "=", "valid_start_position", ",", "\n", "start_rotation", "=", "start_rotation", ",", "\n", "goals", "=", "[", "NavigationGoal", "(", "position", "=", "goal_position", ")", "]", ",", "\n", ")", "\n", "\n", "with", "habitat", ".", "Env", "(", "config", "=", "config", ",", "dataset", "=", "None", ")", "as", "env", ":", "\n", "\n", "        ", "env", ".", "episode_iterator", "=", "iter", "(", "[", "test_episode", "]", ")", "\n", "no_noise_obs", "=", "env", ".", "reset", "(", ")", "\n", "assert", "no_noise_obs", "is", "not", "None", "\n", "\n", "actions", "=", "[", "\n", "sample_non_stop_action", "(", "env", ".", "action_space", ")", "for", "_", "in", "range", "(", "N_STEPS", ")", "\n", "]", "\n", "for", "action", "in", "actions", ":", "\n", "            ", "assert", "env", ".", "step", "(", "action", ")", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_sensors.test_smoke_not_pinhole_sensors": [[414, 440], ["pytest.mark.parametrize", "pytest.mark.parametrize", "pytest.importorskip", "habitat.config.default.get_config", "habitat.config.default.get_config.defrost", "habitat.config.default.get_config.freeze", "test_sensors.smoke_test_sensor", "pytest.skip"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_sensors.smoke_test_sensor"], ["", "", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"sensors\"", ",", "\n", "[", "\n", "[", "\"FISHEYE_RGB_SENSOR\"", "]", ",", "\n", "[", "\"FISHEYE_DEPTH_SENSOR\"", "]", ",", "\n", "[", "\"FISHEYE_SEMANTIC_SENSOR\"", "]", ",", "\n", "[", "\"EQUIRECT_RGB_SENSOR\"", "]", ",", "\n", "[", "\"EQUIRECT_DEPTH_SENSOR\"", "]", ",", "\n", "[", "\"EQUIRECT_SEMANTIC_SENSOR\"", "]", ",", "\n", "]", ",", "\n", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"cuda\"", ",", "[", "True", ",", "False", "]", ")", "\n", "def", "test_smoke_not_pinhole_sensors", "(", "sensors", ",", "cuda", ")", ":", "\n", "    ", "habitat_sim", "=", "pytest", ".", "importorskip", "(", "\"habitat_sim\"", ")", "\n", "if", "not", "habitat_sim", ".", "cuda_enabled", "and", "cuda", ":", "\n", "        ", "pytest", ".", "skip", "(", "\"habitat_sim must be built with CUDA to test G2P2GPU\"", ")", "\n", "", "config", "=", "get_config", "(", ")", "\n", "config", ".", "defrost", "(", ")", "\n", "config", ".", "SIMULATOR", ".", "HABITAT_SIM_V0", ".", "GPU_GPU", "=", "cuda", "\n", "\n", "config", ".", "SIMULATOR", ".", "SCENE", "=", "(", "\n", "\"data/scene_datasets/habitat-test-scenes/skokloster-castle.glb\"", "\n", ")", "\n", "config", ".", "SIMULATOR", ".", "AGENT_0", ".", "SENSORS", "=", "sensors", "\n", "config", ".", "freeze", "(", ")", "\n", "smoke_test_sensor", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_sensors.test_smoke_pinhole_sensors": [[442, 461], ["pytest.mark.parametrize", "pytest.mark.parametrize", "pytest.mark.parametrize", "pytest.importorskip", "habitat.config.default.get_config", "habitat.config.default.get_config.defrost", "habitat.config.default.get_config.freeze", "test_sensors.smoke_test_sensor", "pytest.skip", "getattr"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_sensors.smoke_test_sensor"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"sensor\"", ",", "[", "\"RGB_SENSOR\"", ",", "\"DEPTH_SENSOR\"", ",", "\"SEMANTIC_SENSOR\"", "]", "\n", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"sensor_subtype\"", ",", "[", "\"ORTHOGRAPHIC\"", ",", "\"PINHOLE\"", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"cuda\"", ",", "[", "True", ",", "False", "]", ")", "\n", "def", "test_smoke_pinhole_sensors", "(", "sensor", ",", "sensor_subtype", ",", "cuda", ")", ":", "\n", "    ", "habitat_sim", "=", "pytest", ".", "importorskip", "(", "\"habitat_sim\"", ")", "\n", "if", "not", "habitat_sim", ".", "cuda_enabled", "and", "cuda", ":", "\n", "        ", "pytest", ".", "skip", "(", "\"habitat_sim must be built with CUDA\"", ")", "\n", "", "config", "=", "get_config", "(", ")", "\n", "config", ".", "defrost", "(", ")", "\n", "config", ".", "SIMULATOR", ".", "HABITAT_SIM_V0", ".", "GPU_GPU", "=", "cuda", "\n", "config", ".", "SIMULATOR", ".", "SCENE", "=", "(", "\n", "\"data/scene_datasets/habitat-test-scenes/skokloster-castle.glb\"", "\n", ")", "\n", "config", ".", "SIMULATOR", ".", "AGENT_0", ".", "SENSORS", "=", "[", "sensor", "]", "\n", "getattr", "(", "config", ".", "SIMULATOR", ",", "sensor", ")", ".", "SENSOR_SUBTYPE", "=", "sensor_subtype", "\n", "config", ".", "freeze", "(", ")", "\n", "smoke_test_sensor", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_sensors.test_noise_models_rgbd": [[463, 578], ["habitat.config.default.get_config", "habitat.config.default.get_config.defrost", "habitat.config.default.get_config.freeze", "numpy.add", "habitat.tasks.nav.nav.NavigationEpisode", "print", "habitat.config.default.get_config.defrost", "habitat.Config", "habitat.Config", "habitat.config.default.get_config.freeze", "os.path.exists", "pytest.skip", "habitat.Env", "iter", "habitat.Env", "iter", "env.reset", "env.sim.get_agent_state", "env.reset", "env.sim.get_agent_state", "habitat.utils.test_utils.sample_non_stop_action", "no_noise_obs.append", "no_noise_states.append", "numpy.linalg.norm", "numpy.linalg.norm", "env.step", "env.sim.get_agent_state", "numpy.linalg.norm", "habitat.utils.visualizations.utils.images_to_video", "numpy.mean", "numpy.mean", "habitat.tasks.nav.nav.NavigationGoal", "range", "env.step", "env.sim.get_agent_state", "numpy.linalg.norm", "numpy.linalg.norm", "abs", "angle_diffs.append", "pos_diffs.append", "images.append", "obs[].astype", "[].astype", "[].astype", "obs[].astype", "[].astype", "[].astype", "numpy.array", "numpy.array", "abs", "habitat.utils.visualizations.utils.observations_to_image", "habitat.utils.geometry_utils.angle_between_quaternions", "numpy.deg2rad"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.exists", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.get_agent_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.get_agent_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.test_utils.sample_non_stop_action", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.get_agent_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.utils.images_to_video", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.get_agent_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.utils.observations_to_image", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.geometry_utils.angle_between_quaternions"], ["", "def", "test_noise_models_rgbd", "(", ")", ":", "\n", "    ", "DEMO_MODE", "=", "False", "\n", "N_STEPS", "=", "100", "\n", "\n", "config", "=", "get_config", "(", ")", "\n", "config", ".", "defrost", "(", ")", "\n", "config", ".", "SIMULATOR", ".", "SCENE", "=", "(", "\n", "\"data/scene_datasets/habitat-test-scenes/skokloster-castle.glb\"", "\n", ")", "\n", "config", ".", "SIMULATOR", ".", "AGENT_0", ".", "SENSORS", "=", "[", "\"RGB_SENSOR\"", ",", "\"DEPTH_SENSOR\"", "]", "\n", "config", ".", "freeze", "(", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "config", ".", "SIMULATOR", ".", "SCENE", ")", ":", "\n", "        ", "pytest", ".", "skip", "(", "\"Please download Habitat test data to data folder.\"", ")", "\n", "\n", "", "valid_start_position", "=", "[", "-", "1.3731", ",", "0.08431", ",", "8.60692", "]", "\n", "\n", "expected_pointgoal", "=", "[", "0.1", ",", "0.2", ",", "0.3", "]", "\n", "goal_position", "=", "np", ".", "add", "(", "valid_start_position", ",", "expected_pointgoal", ")", "\n", "\n", "# starting quaternion is rotated 180 degree along z-axis, which", "\n", "# corresponds to simulator using z-negative as forward action", "\n", "start_rotation", "=", "[", "0", ",", "0", ",", "0", ",", "1", "]", "\n", "test_episode", "=", "NavigationEpisode", "(", "\n", "episode_id", "=", "\"0\"", ",", "\n", "scene_id", "=", "config", ".", "SIMULATOR", ".", "SCENE", ",", "\n", "start_position", "=", "valid_start_position", ",", "\n", "start_rotation", "=", "start_rotation", ",", "\n", "goals", "=", "[", "NavigationGoal", "(", "position", "=", "goal_position", ")", "]", ",", "\n", ")", "\n", "\n", "print", "(", "f\"{test_episode}\"", ")", "\n", "with", "habitat", ".", "Env", "(", "config", "=", "config", ",", "dataset", "=", "None", ")", "as", "env", ":", "\n", "\n", "        ", "env", ".", "episode_iterator", "=", "iter", "(", "[", "test_episode", "]", ")", "\n", "no_noise_obs", "=", "[", "env", ".", "reset", "(", ")", "]", "\n", "no_noise_states", "=", "[", "env", ".", "sim", ".", "get_agent_state", "(", ")", "]", "\n", "\n", "actions", "=", "[", "\n", "sample_non_stop_action", "(", "env", ".", "action_space", ")", "for", "_", "in", "range", "(", "N_STEPS", ")", "\n", "]", "\n", "for", "action", "in", "actions", ":", "\n", "            ", "no_noise_obs", ".", "append", "(", "env", ".", "step", "(", "action", ")", ")", "\n", "no_noise_states", ".", "append", "(", "env", ".", "sim", ".", "get_agent_state", "(", ")", ")", "\n", "\n", "", "", "config", ".", "defrost", "(", ")", "\n", "\n", "config", ".", "SIMULATOR", ".", "RGB_SENSOR", ".", "NOISE_MODEL", "=", "\"GaussianNoiseModel\"", "\n", "config", ".", "SIMULATOR", ".", "RGB_SENSOR", ".", "NOISE_MODEL_KWARGS", "=", "habitat", ".", "Config", "(", ")", "\n", "config", ".", "SIMULATOR", ".", "RGB_SENSOR", ".", "NOISE_MODEL_KWARGS", ".", "INTENSITY_CONSTANT", "=", "0.5", "\n", "config", ".", "SIMULATOR", ".", "DEPTH_SENSOR", ".", "NOISE_MODEL", "=", "\"RedwoodDepthNoiseModel\"", "\n", "\n", "config", ".", "SIMULATOR", ".", "ACTION_SPACE_CONFIG", "=", "\"pyrobotnoisy\"", "\n", "config", ".", "SIMULATOR", ".", "NOISE_MODEL", "=", "habitat", ".", "Config", "(", ")", "\n", "config", ".", "SIMULATOR", ".", "NOISE_MODEL", ".", "ROBOT", "=", "\"LoCoBot\"", "\n", "config", ".", "SIMULATOR", ".", "NOISE_MODEL", ".", "CONTROLLER", "=", "\"Proportional\"", "\n", "config", ".", "SIMULATOR", ".", "NOISE_MODEL", ".", "NOISE_MULTIPLIER", "=", "0.5", "\n", "\n", "config", ".", "freeze", "(", ")", "\n", "\n", "with", "habitat", ".", "Env", "(", "config", "=", "config", ",", "dataset", "=", "None", ")", "as", "env", ":", "\n", "\n", "        ", "env", ".", "episode_iterator", "=", "iter", "(", "[", "test_episode", "]", ")", "\n", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "assert", "np", ".", "linalg", ".", "norm", "(", "\n", "obs", "[", "\"rgb\"", "]", ".", "astype", "(", "np", ".", "float", ")", "\n", "-", "no_noise_obs", "[", "0", "]", "[", "\"rgb\"", "]", ".", "astype", "(", "np", ".", "float", ")", "\n", ")", ">", "1.5e-2", "*", "np", ".", "linalg", ".", "norm", "(", "\n", "no_noise_obs", "[", "0", "]", "[", "\"rgb\"", "]", ".", "astype", "(", "np", ".", "float", ")", "\n", ")", ",", "\"No RGB noise detected.\"", "\n", "\n", "assert", "np", ".", "linalg", ".", "norm", "(", "\n", "obs", "[", "\"depth\"", "]", ".", "astype", "(", "np", ".", "float", ")", "\n", "-", "no_noise_obs", "[", "0", "]", "[", "\"depth\"", "]", ".", "astype", "(", "np", ".", "float", ")", "\n", ")", ">", "1.5e-2", "*", "np", ".", "linalg", ".", "norm", "(", "\n", "no_noise_obs", "[", "0", "]", "[", "\"depth\"", "]", ".", "astype", "(", "np", ".", "float", ")", "\n", ")", ",", "\"No Depth noise detected.\"", "\n", "\n", "images", "=", "[", "]", "\n", "state", "=", "env", ".", "sim", ".", "get_agent_state", "(", ")", "\n", "angle_diffs", "=", "[", "]", "\n", "pos_diffs", "=", "[", "]", "\n", "for", "action", "in", "actions", ":", "\n", "            ", "prev_state", "=", "state", "\n", "obs", "=", "env", ".", "step", "(", "action", ")", "\n", "state", "=", "env", ".", "sim", ".", "get_agent_state", "(", ")", "\n", "position_change", "=", "np", ".", "linalg", ".", "norm", "(", "\n", "np", ".", "array", "(", "state", ".", "position", ")", "-", "np", ".", "array", "(", "prev_state", ".", "position", ")", ",", "ord", "=", "2", "\n", ")", "\n", "\n", "if", "action", "[", "\"action\"", "]", "[", ":", "5", "]", "==", "\"TURN_\"", ":", "\n", "                ", "angle_diff", "=", "abs", "(", "\n", "angle_between_quaternions", "(", "\n", "state", ".", "rotation", ",", "prev_state", ".", "rotation", "\n", ")", "\n", "-", "np", ".", "deg2rad", "(", "config", ".", "SIMULATOR", ".", "TURN_ANGLE", ")", "\n", ")", "\n", "angle_diffs", ".", "append", "(", "angle_diff", ")", "\n", "", "else", ":", "\n", "                ", "pos_diffs", ".", "append", "(", "\n", "abs", "(", "position_change", "-", "config", ".", "SIMULATOR", ".", "FORWARD_STEP_SIZE", ")", "\n", ")", "\n", "\n", "", "if", "DEMO_MODE", ":", "\n", "                ", "images", ".", "append", "(", "observations_to_image", "(", "obs", ",", "{", "}", ")", ")", "\n", "\n", "", "", "if", "DEMO_MODE", ":", "\n", "            ", "images_to_video", "(", "images", ",", "\"data/video/test_noise\"", ",", "\"test_noise\"", ")", "\n", "\n", "", "assert", "(", "\n", "np", ".", "mean", "(", "angle_diffs", ")", ">", "0.025", "\n", ")", ",", "\"No turn action actuation noise detected.\"", "\n", "assert", "(", "\n", "np", ".", "mean", "(", "pos_diffs", ")", ">", "0.025", "\n", ")", ",", "\"No forward action actuation noise detected.\"", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_r2r_vln.check_json_serializaiton": [[23, 37], ["time.time", "str", "habitat.core.logging.logger.info", "dataset.__class__", "dataset.__class__.from_json", "isinstance", "dataset.to_json", "len", "dataset.__class__.to_json", "time.time"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.from_json", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.to_json", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.to_json"], ["def", "check_json_serializaiton", "(", "dataset", ":", "habitat", ".", "Dataset", ")", ":", "\n", "    ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "json_str", "=", "str", "(", "dataset", ".", "to_json", "(", ")", ")", "\n", "logger", ".", "info", "(", "\n", "\"JSON conversion finished. {} sec\"", ".", "format", "(", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", ")", "\n", "decoded_dataset", "=", "dataset", ".", "__class__", "(", ")", "\n", "decoded_dataset", ".", "from_json", "(", "json_str", ")", "\n", "assert", "len", "(", "decoded_dataset", ".", "episodes", ")", ">", "0", "\n", "episode", "=", "decoded_dataset", ".", "episodes", "[", "0", "]", "\n", "assert", "isinstance", "(", "episode", ",", "VLNEpisode", ")", "\n", "assert", "(", "\n", "decoded_dataset", ".", "to_json", "(", ")", "==", "json_str", "\n", ")", ",", "\"JSON dataset encoding/decoding isn't consistent\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_r2r_vln.test_r2r_vln_dataset": [[39, 55], ["habitat.config.default.get_config", "habitat.datasets.make_dataset", "test_r2r_vln.check_json_serializaiton", "habitat.datasets.vln.r2r_vln_dataset.VLNDatasetV1.check_config_paths_exist", "pytest.skip", "len"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.registration.make_dataset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_r2r_vln.check_json_serializaiton", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pointnav.pointnav_dataset.PointNavDatasetV1.check_config_paths_exist"], ["", "def", "test_r2r_vln_dataset", "(", ")", ":", "\n", "    ", "vln_config", "=", "get_config", "(", "CFG_TEST", ")", "\n", "if", "not", "r2r_vln_dataset", ".", "VLNDatasetV1", ".", "check_config_paths_exist", "(", "\n", "vln_config", ".", "DATASET", "\n", ")", ":", "\n", "        ", "pytest", ".", "skip", "(", "\"Please download Matterport3D R2R dataset to data folder.\"", ")", "\n", "\n", "", "dataset", "=", "make_dataset", "(", "\n", "id_dataset", "=", "vln_config", ".", "DATASET", ".", "TYPE", ",", "config", "=", "vln_config", ".", "DATASET", "\n", ")", "\n", "assert", "dataset", "\n", "assert", "(", "\n", "len", "(", "dataset", ".", "episodes", ")", "==", "R2R_VAL_SEEN_EPISODES", "\n", ")", ",", "\"Val Seen split episode number mismatch\"", "\n", "\n", "check_json_serializaiton", "(", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_r2r_vln.test_dataset_splitting": [[57, 105], ["pytest.mark.parametrize", "dataset_config.defrost", "habitat.datasets.vln.r2r_vln_dataset.VLNDatasetV1.get_scenes_to_load", "habitat.datasets.make_dataset", "habitat.datasets.make_dataset", "habitat.datasets.make_dataset", "habitat.config.default.get_config", "habitat.datasets.vln.r2r_vln_dataset.VLNDatasetV1.check_config_paths_exist", "pytest.skip", "len", "split1_episodes.union", "len", "split1_episodes.intersection", "len", "len"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.get_scenes_to_load", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.registration.make_dataset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.registration.make_dataset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.registration.make_dataset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pointnav.pointnav_dataset.PointNavDatasetV1.check_config_paths_exist"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"split\"", ",", "[", "\"train\"", ",", "\"val_seen\"", ",", "\"val_unseen\"", "]", ")", "\n", "def", "test_dataset_splitting", "(", "split", ")", ":", "\n", "    ", "dataset_config", "=", "get_config", "(", "CFG_TEST", ")", ".", "DATASET", "\n", "dataset_config", ".", "defrost", "(", ")", "\n", "dataset_config", ".", "SPLIT", "=", "split", "\n", "\n", "if", "not", "r2r_vln_dataset", ".", "VLNDatasetV1", ".", "check_config_paths_exist", "(", "\n", "dataset_config", "\n", ")", ":", "\n", "        ", "pytest", ".", "skip", "(", "\"Please download Matterport3D R2R dataset to data folder.\"", ")", "\n", "\n", "", "scenes", "=", "r2r_vln_dataset", ".", "VLNDatasetV1", ".", "get_scenes_to_load", "(", "\n", "config", "=", "dataset_config", "\n", ")", "\n", "assert", "(", "\n", "len", "(", "scenes", ")", ">", "0", "\n", ")", ",", "\"Expected dataset contains separate episode file per scene.\"", "\n", "\n", "dataset_config", ".", "CONTENT_SCENES", "=", "scenes", "\n", "full_dataset", "=", "make_dataset", "(", "\n", "id_dataset", "=", "dataset_config", ".", "TYPE", ",", "config", "=", "dataset_config", "\n", ")", "\n", "full_episodes", "=", "{", "\n", "(", "ep", ".", "scene_id", ",", "ep", ".", "episode_id", ")", "for", "ep", "in", "full_dataset", ".", "episodes", "\n", "}", "\n", "\n", "dataset_config", ".", "CONTENT_SCENES", "=", "scenes", "[", "0", ":", "len", "(", "scenes", ")", "//", "2", "]", "\n", "split1_dataset", "=", "make_dataset", "(", "\n", "id_dataset", "=", "dataset_config", ".", "TYPE", ",", "config", "=", "dataset_config", "\n", ")", "\n", "split1_episodes", "=", "{", "\n", "(", "ep", ".", "scene_id", ",", "ep", ".", "episode_id", ")", "for", "ep", "in", "split1_dataset", ".", "episodes", "\n", "}", "\n", "\n", "dataset_config", ".", "CONTENT_SCENES", "=", "scenes", "[", "len", "(", "scenes", ")", "//", "2", ":", "]", "\n", "split2_dataset", "=", "make_dataset", "(", "\n", "id_dataset", "=", "dataset_config", ".", "TYPE", ",", "config", "=", "dataset_config", "\n", ")", "\n", "split2_episodes", "=", "{", "\n", "(", "ep", ".", "scene_id", ",", "ep", ".", "episode_id", ")", "for", "ep", "in", "split2_dataset", ".", "episodes", "\n", "}", "\n", "\n", "assert", "full_episodes", "==", "split1_episodes", ".", "union", "(", "\n", "split2_episodes", "\n", ")", ",", "\"Split dataset is not equal to full dataset\"", "\n", "assert", "(", "\n", "len", "(", "split1_episodes", ".", "intersection", "(", "split2_episodes", ")", ")", "==", "0", "\n", ")", ",", "\"Intersection of split datasets is not the empty set\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_r2r_vln.test_r2r_vln_sim": [[107, 156], ["habitat.config.default.get_config", "habitat.datasets.make_dataset", "habitat.datasets.vln.r2r_vln_dataset.VLNDatasetV1.check_config_paths_exist", "pytest.skip", "habitat.Env", "habitat.tasks.nav.shortest_path_follower.ShortestPathFollower", "range", "len", "env.reset", "habitat.tasks.nav.shortest_path_follower.ShortestPathFollower.get_next_action", "env.step"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.registration.make_dataset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pointnav.pointnav_dataset.PointNavDatasetV1.check_config_paths_exist", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.shortest_path_follower.ShortestPathFollower.get_next_action", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step"], ["", "def", "test_r2r_vln_sim", "(", ")", ":", "\n", "    ", "vln_config", "=", "get_config", "(", "CFG_TEST", ")", "\n", "\n", "if", "not", "r2r_vln_dataset", ".", "VLNDatasetV1", ".", "check_config_paths_exist", "(", "\n", "vln_config", ".", "DATASET", "\n", ")", ":", "\n", "        ", "pytest", ".", "skip", "(", "\n", "\"Please download Matterport3D R2R VLN dataset to data folder.\"", "\n", ")", "\n", "\n", "", "dataset", "=", "make_dataset", "(", "\n", "id_dataset", "=", "vln_config", ".", "DATASET", ".", "TYPE", ",", "config", "=", "vln_config", ".", "DATASET", "\n", ")", "\n", "\n", "with", "habitat", ".", "Env", "(", "config", "=", "vln_config", ",", "dataset", "=", "dataset", ")", "as", "env", ":", "\n", "        ", "env", ".", "episodes", "=", "dataset", ".", "episodes", "[", ":", "EPISODES_LIMIT", "]", "\n", "\n", "follower", "=", "ShortestPathFollower", "(", "\n", "env", ".", "sim", ",", "goal_radius", "=", "0.5", ",", "return_one_hot", "=", "False", "\n", ")", "\n", "\n", "for", "_", "in", "range", "(", "len", "(", "env", ".", "episodes", ")", ")", ":", "\n", "            ", "env", ".", "reset", "(", ")", "\n", "path", "=", "env", ".", "current_episode", ".", "reference_path", "+", "[", "\n", "env", ".", "current_episode", ".", "goals", "[", "0", "]", ".", "position", "\n", "]", "\n", "for", "point", "in", "path", ":", "\n", "                ", "while", "env", ".", "episode_over", ":", "\n", "                    ", "best_action", "=", "follower", ".", "get_next_action", "(", "point", ")", "\n", "\n", "obs", "=", "env", ".", "step", "(", "best_action", ")", "\n", "assert", "\"rgb\"", "in", "obs", ",", "\"RGB image is missing in observation.\"", "\n", "assert", "(", "\n", "\"instruction\"", "in", "obs", "\n", ")", ",", "\"Instruction is missing in observation.\"", "\n", "assert", "(", "\n", "obs", "[", "\"instruction\"", "]", "[", "\"text\"", "]", "\n", "==", "env", ".", "current_episode", ".", "instruction", ".", "instruction_text", "\n", ")", ",", "\"Instruction from sensor does not match the intruction from the episode\"", "\n", "\n", "assert", "obs", "[", "\"rgb\"", "]", ".", "shape", "[", ":", "2", "]", "==", "(", "\n", "vln_config", ".", "SIMULATOR", ".", "RGB_SENSOR", ".", "HEIGHT", ",", "\n", "vln_config", ".", "SIMULATOR", ".", "RGB_SENSOR", ".", "WIDTH", ",", "\n", ")", ",", "(", "\n", "\"Observation resolution {} doesn't correspond to config \"", "\n", "\"({}, {}).\"", ".", "format", "(", "\n", "obs", "[", "\"rgb\"", "]", ".", "shape", "[", ":", "2", "]", ",", "\n", "vln_config", ".", "SIMULATOR", ".", "RGB_SENSOR", ".", "HEIGHT", ",", "\n", "vln_config", ".", "SIMULATOR", ".", "RGB_SENSOR", ".", "WIDTH", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_baseline_agents.test_ppo_agents": [[24, 69], ["pytest.mark.skipif", "pytest.mark.parametrize", "ppo_agents.get_default_config", "ppo_agents.get_default_config.defrost", "habitat.get_config", "habitat.Benchmark", "habitat.get_config.defrost", "habitat.get_config.freeze", "habitat.Env", "ppo_agents.PPOAgent", "habitat.logger.info", "habitat.Benchmark._env.close", "os.path.exists", "pytest.skip", "habitat.Benchmark.evaluate", "itertools.product"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.get_default_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.close", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.exists", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.benchmark_gym.BenchmarkGym.evaluate"], ["@", "pytest", ".", "mark", ".", "skipif", "(", "\n", "not", "baseline_installed", ",", "reason", "=", "\"baseline sub-module not installed\"", "\n", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"input_type,resolution\"", ",", "\n", "[", "\n", "(", "i_type", ",", "resolution", ")", "\n", "for", "i_type", ",", "resolution", "in", "itertools", ".", "product", "(", "\n", "[", "\"blind\"", ",", "\"rgb\"", ",", "\"depth\"", ",", "\"rgbd\"", "]", ",", "[", "256", ",", "384", "]", "\n", ")", "\n", "]", ",", "\n", ")", "\n", "def", "test_ppo_agents", "(", "input_type", ",", "resolution", ")", ":", "\n", "\n", "    ", "agent_config", "=", "ppo_agents", ".", "get_default_config", "(", ")", "\n", "agent_config", ".", "MODEL_PATH", "=", "\"\"", "\n", "agent_config", ".", "defrost", "(", ")", "\n", "config_env", "=", "habitat", ".", "get_config", "(", "config_paths", "=", "CFG_TEST", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "config_env", ".", "SIMULATOR", ".", "SCENE", ")", ":", "\n", "        ", "pytest", ".", "skip", "(", "\"Please download Habitat test data to data folder.\"", ")", "\n", "\n", "", "benchmark", "=", "habitat", ".", "Benchmark", "(", "config_paths", "=", "CFG_TEST", ")", "\n", "\n", "config_env", ".", "defrost", "(", ")", "\n", "config_env", ".", "SIMULATOR", ".", "AGENT_0", ".", "SENSORS", "=", "[", "]", "\n", "if", "input_type", "in", "[", "\"rgb\"", ",", "\"rgbd\"", "]", ":", "\n", "        ", "config_env", ".", "SIMULATOR", ".", "AGENT_0", ".", "SENSORS", "+=", "[", "\"RGB_SENSOR\"", "]", "\n", "agent_config", ".", "RESOLUTION", "=", "resolution", "\n", "config_env", ".", "SIMULATOR", ".", "RGB_SENSOR", ".", "WIDTH", "=", "resolution", "\n", "config_env", ".", "SIMULATOR", ".", "RGB_SENSOR", ".", "HEIGHT", "=", "resolution", "\n", "", "if", "input_type", "in", "[", "\"depth\"", ",", "\"rgbd\"", "]", ":", "\n", "        ", "config_env", ".", "SIMULATOR", ".", "AGENT_0", ".", "SENSORS", "+=", "[", "\"DEPTH_SENSOR\"", "]", "\n", "agent_config", ".", "RESOLUTION", "=", "resolution", "\n", "config_env", ".", "SIMULATOR", ".", "DEPTH_SENSOR", ".", "WIDTH", "=", "resolution", "\n", "config_env", ".", "SIMULATOR", ".", "DEPTH_SENSOR", ".", "HEIGHT", "=", "resolution", "\n", "\n", "", "config_env", ".", "freeze", "(", ")", "\n", "\n", "del", "benchmark", ".", "_env", "\n", "benchmark", ".", "_env", "=", "habitat", ".", "Env", "(", "config", "=", "config_env", ")", "\n", "agent_config", ".", "INPUT_TYPE", "=", "input_type", "\n", "\n", "agent", "=", "ppo_agents", ".", "PPOAgent", "(", "agent_config", ")", "\n", "habitat", ".", "logger", ".", "info", "(", "benchmark", ".", "evaluate", "(", "agent", ",", "num_episodes", "=", "10", ")", ")", "\n", "benchmark", ".", "_env", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_baseline_agents.test_simple_agents": [[71, 96], ["pytest.mark.skipif", "habitat.get_config", "habitat.Benchmark", "habitat.Benchmark._env.close", "os.path.exists", "pytest.skip", "agent_class", "habitat.logger.info", "habitat.logger.info", "habitat.Benchmark.evaluate"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.close", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.exists", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.benchmark_gym.BenchmarkGym.evaluate"], ["", "@", "pytest", ".", "mark", ".", "skipif", "(", "\n", "not", "baseline_installed", ",", "reason", "=", "\"baseline sub-module not installed\"", "\n", ")", "\n", "def", "test_simple_agents", "(", ")", ":", "\n", "    ", "config_env", "=", "habitat", ".", "get_config", "(", "config_paths", "=", "CFG_TEST", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "config_env", ".", "SIMULATOR", ".", "SCENE", ")", ":", "\n", "        ", "pytest", ".", "skip", "(", "\"Please download Habitat test data to data folder.\"", ")", "\n", "\n", "", "benchmark", "=", "habitat", ".", "Benchmark", "(", "config_paths", "=", "CFG_TEST", ")", "\n", "\n", "for", "agent_class", "in", "[", "\n", "simple_agents", ".", "ForwardOnlyAgent", ",", "\n", "simple_agents", ".", "GoalFollower", ",", "\n", "simple_agents", ".", "RandomAgent", ",", "\n", "simple_agents", ".", "RandomForwardAgent", ",", "\n", "]", ":", "\n", "        ", "agent", "=", "agent_class", "(", "\n", "config_env", ".", "TASK", ".", "SUCCESS", ".", "SUCCESS_DISTANCE", ",", "\n", "config_env", ".", "TASK", ".", "GOAL_SENSOR_UUID", ",", "\n", ")", "\n", "habitat", ".", "logger", ".", "info", "(", "agent_class", ".", "__name__", ")", "\n", "habitat", ".", "logger", ".", "info", "(", "benchmark", ".", "evaluate", "(", "agent", ",", "num_episodes", "=", "100", ")", ")", "\n", "\n", "", "benchmark", ".", "_env", ".", "close", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_rnn_state_encoder.test_rnn_state_encoder": [[15, 76], ["pytest.mark.skipif", "build_rnn_state_encoder().to", "torch.cuda.is_available", "torch.device", "torch.device", "torch.no_grad", "build_rnn_state_encoder", "torch.randint", "torch.randn", "torch.randn", "build_rnn_state_encoder().to.", "out_hiddens.permute.permute", "torch.randn.clone", "range", "torch.stack().flatten", "torch.randn.flatten", "torch.randn.permute", "torch.randint.flatten", "torch.where", "rnn", "torch.stack().flatten.append", "torch.norm().item", "torch.norm().item", "masks[].view", "torch.where.new_zeros", "x.squeeze", "torch.stack", "torch.norm", "torch.norm"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.rnn_state_encoder.build_rnn_state_encoder"], ["", "@", "pytest", ".", "mark", ".", "skipif", "(", "torch", "is", "None", ",", "reason", "=", "\"Test requires pytorch\"", ")", "\n", "def", "test_rnn_state_encoder", "(", ")", ":", "\n", "    ", "from", "habitat_baselines", ".", "rl", ".", "models", ".", "rnn_state_encoder", "import", "(", "\n", "build_rnn_state_encoder", ",", "\n", ")", "\n", "\n", "device", "=", "(", "\n", "torch", ".", "device", "(", "\"cuda\"", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "else", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", ")", "\n", "rnn_state_encoder", "=", "build_rnn_state_encoder", "(", "32", ",", "32", ",", "num_layers", "=", "2", ")", ".", "to", "(", "\n", "device", "=", "device", "\n", ")", "\n", "rnn", "=", "rnn_state_encoder", ".", "rnn", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "T", "in", "[", "1", ",", "2", ",", "4", ",", "8", ",", "16", ",", "32", ",", "64", ",", "3", ",", "13", ",", "31", "]", ":", "\n", "            ", "for", "N", "in", "[", "1", ",", "2", ",", "4", ",", "8", ",", "3", ",", "5", "]", ":", "\n", "                ", "masks", "=", "torch", ".", "randint", "(", "\n", "0", ",", "2", ",", "size", "=", "(", "T", ",", "N", ",", "1", ")", ",", "dtype", "=", "torch", ".", "bool", ",", "device", "=", "device", "\n", ")", "\n", "inputs", "=", "torch", ".", "randn", "(", "(", "T", ",", "N", ",", "32", ")", ",", "device", "=", "device", ")", "\n", "hidden_states", "=", "torch", ".", "randn", "(", "\n", "rnn_state_encoder", ".", "num_recurrent_layers", ",", "\n", "N", ",", "\n", "32", ",", "\n", "device", "=", "device", ",", "\n", ")", "\n", "\n", "outputs", ",", "out_hiddens", "=", "rnn_state_encoder", "(", "\n", "inputs", ".", "flatten", "(", "0", ",", "1", ")", ",", "\n", "hidden_states", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ",", "\n", "masks", ".", "flatten", "(", "0", ",", "1", ")", ",", "\n", ")", "\n", "out_hiddens", "=", "out_hiddens", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "\n", "reference_ouputs", "=", "[", "]", "\n", "reference_hiddens", "=", "hidden_states", ".", "clone", "(", ")", "\n", "for", "t", "in", "range", "(", "T", ")", ":", "\n", "                    ", "reference_hiddens", "=", "torch", ".", "where", "(", "\n", "masks", "[", "t", "]", ".", "view", "(", "1", ",", "-", "1", ",", "1", ")", ",", "\n", "reference_hiddens", ",", "\n", "reference_hiddens", ".", "new_zeros", "(", "(", ")", ")", ",", "\n", ")", "\n", "\n", "x", ",", "reference_hiddens", "=", "rnn", "(", "\n", "inputs", "[", "t", ":", "t", "+", "1", "]", ",", "reference_hiddens", "\n", ")", "\n", "\n", "reference_ouputs", ".", "append", "(", "x", ".", "squeeze", "(", "0", ")", ")", "\n", "\n", "", "reference_ouputs", "=", "torch", ".", "stack", "(", "reference_ouputs", ",", "0", ")", ".", "flatten", "(", "\n", "0", ",", "1", "\n", ")", "\n", "\n", "assert", "(", "\n", "torch", ".", "norm", "(", "reference_ouputs", "-", "outputs", ")", ".", "item", "(", ")", "<", "1e-3", "\n", ")", ",", "\"Failed on (T={}, N={})\"", ".", "format", "(", "T", ",", "N", ")", "\n", "assert", "(", "\n", "torch", ".", "norm", "(", "reference_hiddens", "-", "out_hiddens", ")", ".", "item", "(", ")", "<", "1e-3", "\n", ")", ",", "\"Failed on (T={}, N={})\"", ".", "format", "(", "T", ",", "N", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_dataset._construct_dataset": [[15, 28], ["range", "habitat.core.dataset.Dataset", "habitat.core.dataset.Episode", "episodes.append", "str", "str"], "function", ["None"], ["def", "_construct_dataset", "(", "num_episodes", ",", "num_groups", "=", "10", ")", ":", "\n", "    ", "episodes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_episodes", ")", ":", "\n", "        ", "episode", "=", "Episode", "(", "\n", "episode_id", "=", "str", "(", "i", ")", ",", "\n", "scene_id", "=", "\"scene_id_\"", "+", "str", "(", "i", "%", "num_groups", ")", ",", "\n", "start_position", "=", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "start_rotation", "=", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", ")", "\n", "episodes", ".", "append", "(", "episode", ")", "\n", "", "dataset", "=", "Dataset", "(", ")", "\n", "dataset", ".", "episodes", "=", "episodes", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_dataset.test_scene_ids": [[30, 33], ["test_dataset._construct_dataset", "str", "range"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_dataset._construct_dataset"], ["", "def", "test_scene_ids", "(", ")", ":", "\n", "    ", "dataset", "=", "_construct_dataset", "(", "100", ")", "\n", "assert", "dataset", ".", "scene_ids", "==", "[", "\"scene_id_\"", "+", "str", "(", "ii", ")", "for", "ii", "in", "range", "(", "10", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_dataset.test_get_scene_episodes": [[35, 42], ["test_dataset._construct_dataset", "_construct_dataset.get_scene_episodes", "len"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_dataset._construct_dataset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.get_scene_episodes"], ["", "def", "test_get_scene_episodes", "(", ")", ":", "\n", "    ", "dataset", "=", "_construct_dataset", "(", "100", ")", "\n", "scene", "=", "\"scene_id_0\"", "\n", "scene_episodes", "=", "dataset", ".", "get_scene_episodes", "(", "scene", ")", "\n", "assert", "len", "(", "scene_episodes", ")", "==", "10", "\n", "for", "ep", "in", "scene_episodes", ":", "\n", "        ", "assert", "ep", ".", "scene_id", "==", "scene", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_dataset.test_filter_episodes": [[44, 54], ["test_dataset._construct_dataset", "_construct_dataset.filter_episodes", "len", "test_dataset.test_filter_episodes.filter_fn"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_dataset._construct_dataset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.filter_episodes"], ["", "", "def", "test_filter_episodes", "(", ")", ":", "\n", "    ", "dataset", "=", "_construct_dataset", "(", "100", ")", "\n", "\n", "def", "filter_fn", "(", "episode", ":", "Episode", ")", "->", "bool", ":", "\n", "        ", "return", "int", "(", "episode", ".", "episode_id", ")", "%", "2", "==", "0", "\n", "\n", "", "filtered_dataset", "=", "dataset", ".", "filter_episodes", "(", "filter_fn", ")", "\n", "assert", "len", "(", "filtered_dataset", ".", "episodes", ")", "==", "50", "\n", "for", "ep", "in", "filtered_dataset", ".", "episodes", ":", "\n", "        ", "assert", "filter_fn", "(", "ep", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_dataset.test_get_splits_even_split_possible": [[56, 62], ["test_dataset._construct_dataset", "_construct_dataset.get_splits", "len", "len"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_dataset._construct_dataset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.get_splits"], ["", "", "def", "test_get_splits_even_split_possible", "(", ")", ":", "\n", "    ", "dataset", "=", "_construct_dataset", "(", "100", ")", "\n", "splits", "=", "dataset", ".", "get_splits", "(", "10", ")", "\n", "assert", "len", "(", "splits", ")", "==", "10", "\n", "for", "split", "in", "splits", ":", "\n", "        ", "assert", "len", "(", "split", ".", "episodes", ")", "==", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_dataset.test_get_splits_with_remainder": [[64, 70], ["test_dataset._construct_dataset", "_construct_dataset.get_splits", "len", "len"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_dataset._construct_dataset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.get_splits"], ["", "", "def", "test_get_splits_with_remainder", "(", ")", ":", "\n", "    ", "dataset", "=", "_construct_dataset", "(", "100", ")", "\n", "splits", "=", "dataset", ".", "get_splits", "(", "11", ")", "\n", "assert", "len", "(", "splits", ")", "==", "11", "\n", "for", "split", "in", "splits", ":", "\n", "        ", "assert", "len", "(", "split", ".", "episodes", ")", "==", "9", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_dataset.test_get_splits_num_episodes_specified": [[72, 97], ["test_dataset._construct_dataset", "_construct_dataset.get_splits", "test_dataset._construct_dataset", "_construct_dataset.get_splits", "test_dataset._construct_dataset", "_construct_dataset.get_splits", "test_dataset._construct_dataset", "len", "len", "len", "len", "len", "len", "pytest.raises", "_construct_dataset.get_splits", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_dataset._construct_dataset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.get_splits", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_dataset._construct_dataset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.get_splits", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_dataset._construct_dataset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.get_splits", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_dataset._construct_dataset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.get_splits"], ["", "", "def", "test_get_splits_num_episodes_specified", "(", ")", ":", "\n", "    ", "dataset", "=", "_construct_dataset", "(", "100", ")", "\n", "splits", "=", "dataset", ".", "get_splits", "(", "10", ",", "3", ",", "False", ")", "\n", "assert", "len", "(", "splits", ")", "==", "10", "\n", "for", "split", "in", "splits", ":", "\n", "        ", "assert", "len", "(", "split", ".", "episodes", ")", "==", "3", "\n", "", "assert", "len", "(", "dataset", ".", "episodes", ")", "==", "100", "\n", "\n", "dataset", "=", "_construct_dataset", "(", "100", ")", "\n", "splits", "=", "dataset", ".", "get_splits", "(", "10", ",", "10", ")", "\n", "assert", "len", "(", "splits", ")", "==", "10", "\n", "for", "split", "in", "splits", ":", "\n", "        ", "assert", "len", "(", "split", ".", "episodes", ")", "==", "10", "\n", "", "assert", "len", "(", "dataset", ".", "episodes", ")", "==", "100", "\n", "\n", "dataset", "=", "_construct_dataset", "(", "100", ")", "\n", "splits", "=", "dataset", ".", "get_splits", "(", "10", ",", "3", ",", "True", ")", "\n", "assert", "len", "(", "splits", ")", "==", "10", "\n", "for", "split", "in", "splits", ":", "\n", "        ", "assert", "len", "(", "split", ".", "episodes", ")", "==", "3", "\n", "", "assert", "len", "(", "dataset", ".", "episodes", ")", "==", "30", "\n", "\n", "dataset", "=", "_construct_dataset", "(", "100", ")", "\n", "with", "pytest", ".", "raises", "(", "ValueError", ")", ":", "\n", "        ", "splits", "=", "dataset", ".", "get_splits", "(", "10", ",", "20", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_dataset.test_get_splits_collate_scenes": [[99, 153], ["test_dataset._construct_dataset", "_construct_dataset.get_splits", "test_dataset._construct_dataset", "_construct_dataset.get_splits", "test_dataset._construct_dataset", "_construct_dataset.get_splits", "test_dataset._construct_dataset", "_construct_dataset.get_splits", "len", "set", "enumerate", "len", "set", "enumerate", "len", "set", "enumerate", "len", "set", "enumerate", "len", "len", "set.add", "set.add", "set.add", "set.add"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_dataset._construct_dataset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.get_splits", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_dataset._construct_dataset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.get_splits", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_dataset._construct_dataset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.get_splits", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_dataset._construct_dataset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.get_splits", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.set", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.set", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.set", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.set"], ["", "", "def", "test_get_splits_collate_scenes", "(", ")", ":", "\n", "    ", "dataset", "=", "_construct_dataset", "(", "10000", ")", "\n", "splits", "=", "dataset", ".", "get_splits", "(", "10", ",", "23", ",", "collate_scene_ids", "=", "True", ")", "\n", "assert", "len", "(", "splits", ")", "==", "10", "\n", "for", "split", "in", "splits", ":", "\n", "        ", "assert", "len", "(", "split", ".", "episodes", ")", "==", "23", "\n", "prev_ids", "=", "set", "(", ")", "\n", "for", "ii", ",", "ep", "in", "enumerate", "(", "split", ".", "episodes", ")", ":", "\n", "            ", "if", "ep", ".", "scene_id", "not", "in", "prev_ids", ":", "\n", "                ", "prev_ids", ".", "add", "(", "ep", ".", "scene_id", ")", "\n", "", "else", ":", "\n", "                ", "assert", "split", ".", "episodes", "[", "ii", "-", "1", "]", ".", "scene_id", "==", "ep", ".", "scene_id", "\n", "\n", "", "", "", "dataset", "=", "_construct_dataset", "(", "10000", ")", "\n", "splits", "=", "dataset", ".", "get_splits", "(", "10", ",", "200", ",", "collate_scene_ids", "=", "False", ")", "\n", "assert", "len", "(", "splits", ")", "==", "10", "\n", "for", "split", "in", "splits", ":", "\n", "        ", "prev_ids", "=", "set", "(", ")", "\n", "found_not_collated", "=", "False", "\n", "for", "ii", ",", "ep", "in", "enumerate", "(", "split", ".", "episodes", ")", ":", "\n", "            ", "if", "ep", ".", "scene_id", "not", "in", "prev_ids", ":", "\n", "                ", "prev_ids", ".", "add", "(", "ep", ".", "scene_id", ")", "\n", "", "else", ":", "\n", "                ", "if", "split", ".", "episodes", "[", "ii", "-", "1", "]", ".", "scene_id", "!=", "ep", ".", "scene_id", ":", "\n", "                    ", "found_not_collated", "=", "True", "\n", "break", "\n", "", "", "", "assert", "found_not_collated", "\n", "\n", "", "dataset", "=", "_construct_dataset", "(", "10000", ")", "\n", "splits", "=", "dataset", ".", "get_splits", "(", "10", ",", "collate_scene_ids", "=", "True", ")", "\n", "assert", "len", "(", "splits", ")", "==", "10", "\n", "for", "split", "in", "splits", ":", "\n", "        ", "assert", "len", "(", "split", ".", "episodes", ")", "==", "1000", "\n", "prev_ids", "=", "set", "(", ")", "\n", "for", "ii", ",", "ep", "in", "enumerate", "(", "split", ".", "episodes", ")", ":", "\n", "            ", "if", "ep", ".", "scene_id", "not", "in", "prev_ids", ":", "\n", "                ", "prev_ids", ".", "add", "(", "ep", ".", "scene_id", ")", "\n", "", "else", ":", "\n", "                ", "assert", "split", ".", "episodes", "[", "ii", "-", "1", "]", ".", "scene_id", "==", "ep", ".", "scene_id", "\n", "\n", "", "", "", "dataset", "=", "_construct_dataset", "(", "10000", ")", "\n", "splits", "=", "dataset", ".", "get_splits", "(", "10", ",", "collate_scene_ids", "=", "False", ")", "\n", "assert", "len", "(", "splits", ")", "==", "10", "\n", "for", "split", "in", "splits", ":", "\n", "        ", "prev_ids", "=", "set", "(", ")", "\n", "found_not_collated", "=", "False", "\n", "for", "ii", ",", "ep", "in", "enumerate", "(", "split", ".", "episodes", ")", ":", "\n", "            ", "if", "ep", ".", "scene_id", "not", "in", "prev_ids", ":", "\n", "                ", "prev_ids", ".", "add", "(", "ep", ".", "scene_id", ")", "\n", "", "else", ":", "\n", "                ", "if", "split", ".", "episodes", "[", "ii", "-", "1", "]", ".", "scene_id", "!=", "ep", ".", "scene_id", ":", "\n", "                    ", "found_not_collated", "=", "True", "\n", "break", "\n", "", "", "", "assert", "found_not_collated", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_dataset.test_get_splits_sort_by_episode_id": [[155, 164], ["test_dataset._construct_dataset", "_construct_dataset.get_splits", "len", "enumerate", "len"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_dataset._construct_dataset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.get_splits"], ["", "", "def", "test_get_splits_sort_by_episode_id", "(", ")", ":", "\n", "    ", "dataset", "=", "_construct_dataset", "(", "10000", ")", "\n", "splits", "=", "dataset", ".", "get_splits", "(", "10", ",", "23", ",", "sort_by_episode_id", "=", "True", ")", "\n", "assert", "len", "(", "splits", ")", "==", "10", "\n", "for", "split", "in", "splits", ":", "\n", "        ", "assert", "len", "(", "split", ".", "episodes", ")", "==", "23", "\n", "for", "ii", ",", "ep", "in", "enumerate", "(", "split", ".", "episodes", ")", ":", "\n", "            ", "if", "ii", ">", "0", ":", "\n", "                ", "assert", "ep", ".", "episode_id", ">=", "split", ".", "episodes", "[", "ii", "-", "1", "]", ".", "episode_id", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_dataset.test_get_splits_func": [[166, 180], ["pytest.mark.parametrize", "test_dataset._construct_dataset", "_construct_dataset.get_splits", "_construct_dataset.get_splits", "len", "sum", "len", "sum", "map", "len"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_dataset._construct_dataset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.get_splits", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.get_splits", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.map"], ["", "", "", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"num_episodes,num_splits\"", ",", "\n", "[", "(", "994", ",", "64", ")", ",", "(", "1023", ",", "64", ")", ",", "(", "1024", ",", "64", ")", ",", "(", "1025", ",", "64", ")", ",", "(", "10000", ",", "9", ")", ",", "(", "10000", ",", "10", ")", "]", ",", "\n", ")", "\n", "def", "test_get_splits_func", "(", "num_episodes", ":", "int", ",", "num_splits", ":", "int", ")", ":", "\n", "    ", "dataset", "=", "_construct_dataset", "(", "num_episodes", ")", "\n", "splits", "=", "dataset", ".", "get_splits", "(", "num_splits", ",", "allow_uneven_splits", "=", "True", ")", "\n", "assert", "len", "(", "splits", ")", "==", "num_splits", "\n", "assert", "sum", "(", "len", "(", "split", ".", "episodes", ")", "for", "split", "in", "splits", ")", "==", "num_episodes", "\n", "splits", "=", "dataset", ".", "get_splits", "(", "num_splits", ",", "allow_uneven_splits", "=", "False", ")", "\n", "assert", "len", "(", "splits", ")", "==", "num_splits", "\n", "assert", "(", "\n", "sum", "(", "map", "(", "lambda", "s", ":", "s", ".", "num_episodes", ",", "splits", ")", ")", "\n", "==", "(", "num_episodes", "//", "num_splits", ")", "*", "num_splits", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_dataset.test_sample_episodes": [[183, 205], ["test_dataset._construct_dataset", "_construct_dataset.get_episode_iterator", "_construct_dataset.get_episode_iterator", "_construct_dataset.get_episode_iterator", "next", "_construct_dataset.get_episode_iterator", "len", "len", "pytest.raises", "_construct_dataset.get_episode_iterator", "len", "pytest.raises", "next", "list", "list", "list", "set", "itertools.islice"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_dataset._construct_dataset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.get_episode_iterator", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.get_episode_iterator", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.get_episode_iterator", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.get_episode_iterator", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.get_episode_iterator", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.set"], ["", "def", "test_sample_episodes", "(", ")", ":", "\n", "    ", "dataset", "=", "_construct_dataset", "(", "1000", ")", "\n", "ep_iter", "=", "dataset", ".", "get_episode_iterator", "(", "\n", "num_episode_sample", "=", "1000", ",", "cycle", "=", "False", "\n", ")", "\n", "assert", "len", "(", "list", "(", "ep_iter", ")", ")", "==", "1000", "\n", "\n", "ep_iter", "=", "dataset", ".", "get_episode_iterator", "(", "num_episode_sample", "=", "0", ",", "cycle", "=", "False", ")", "\n", "assert", "len", "(", "list", "(", "ep_iter", ")", ")", "==", "0", "\n", "\n", "with", "pytest", ".", "raises", "(", "ValueError", ")", ":", "\n", "        ", "dataset", ".", "get_episode_iterator", "(", "num_episode_sample", "=", "1001", ",", "cycle", "=", "False", ")", "\n", "\n", "", "ep_iter", "=", "dataset", ".", "get_episode_iterator", "(", "num_episode_sample", "=", "100", ",", "cycle", "=", "True", ")", "\n", "ep_id_list", "=", "[", "e", ".", "episode_id", "for", "e", "in", "list", "(", "islice", "(", "ep_iter", ",", "100", ")", ")", "]", "\n", "assert", "len", "(", "set", "(", "ep_id_list", ")", ")", "==", "100", "\n", "next_episode", "=", "next", "(", "ep_iter", ")", "\n", "assert", "next_episode", ".", "episode_id", "in", "ep_id_list", "\n", "\n", "ep_iter", "=", "dataset", ".", "get_episode_iterator", "(", "num_episode_sample", "=", "0", ",", "cycle", "=", "False", ")", "\n", "with", "pytest", ".", "raises", "(", "StopIteration", ")", ":", "\n", "        ", "next", "(", "ep_iter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_dataset.test_iterator_cycle": [[207, 221], ["test_dataset._construct_dataset", "_construct_dataset.get_episode_iterator", "range", "_construct_dataset.get_episode_iterator", "list", "range", "next", "itertools.islice", "next"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_dataset._construct_dataset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.get_episode_iterator", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.get_episode_iterator"], ["", "", "def", "test_iterator_cycle", "(", ")", ":", "\n", "    ", "dataset", "=", "_construct_dataset", "(", "100", ")", "\n", "ep_iter", "=", "dataset", ".", "get_episode_iterator", "(", "\n", "cycle", "=", "True", ",", "shuffle", "=", "False", ",", "group_by_scene", "=", "False", "\n", ")", "\n", "for", "i", "in", "range", "(", "200", ")", ":", "\n", "        ", "episode", "=", "next", "(", "ep_iter", ")", "\n", "assert", "episode", ".", "episode_id", "==", "dataset", ".", "episodes", "[", "i", "%", "100", "]", ".", "episode_id", "\n", "\n", "", "ep_iter", "=", "dataset", ".", "get_episode_iterator", "(", "cycle", "=", "True", ",", "num_episode_sample", "=", "20", ")", "\n", "episodes", "=", "list", "(", "islice", "(", "ep_iter", ",", "20", ")", ")", "\n", "for", "i", "in", "range", "(", "200", ")", ":", "\n", "        ", "episode", "=", "next", "(", "ep_iter", ")", "\n", "assert", "episode", ".", "episode_id", "==", "episodes", "[", "i", "%", "20", "]", ".", "episode_id", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_dataset.test_iterator_shuffle": [[223, 242], ["test_dataset._construct_dataset", "_construct_dataset.get_episode_iterator", "list", "list", "itertools.islice", "itertools.islice", "sorted", "sorted", "len", "len", "len", "len", "itertools.groupby", "itertools.groupby", "set"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_dataset._construct_dataset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.get_episode_iterator", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.set"], ["", "", "def", "test_iterator_shuffle", "(", ")", ":", "\n", "    ", "dataset", "=", "_construct_dataset", "(", "100", ")", "\n", "episode_iter", "=", "dataset", ".", "get_episode_iterator", "(", "shuffle", "=", "True", ")", "\n", "first_round_episodes", "=", "list", "(", "islice", "(", "episode_iter", ",", "100", ")", ")", "\n", "second_round_episodes", "=", "list", "(", "islice", "(", "episode_iter", ",", "100", ")", ")", "\n", "\n", "# both rounds should have same episodes but in different order", "\n", "assert", "sorted", "(", "first_round_episodes", ")", "==", "sorted", "(", "second_round_episodes", ")", "\n", "assert", "first_round_episodes", "!=", "second_round_episodes", "\n", "\n", "# both rounds should be grouped by scenes", "\n", "first_round_scene_groups", "=", "[", "\n", "k", "for", "k", ",", "g", "in", "groupby", "(", "first_round_episodes", ",", "key", "=", "lambda", "x", ":", "x", ".", "scene_id", ")", "\n", "]", "\n", "second_round_scene_groups", "=", "[", "\n", "k", "for", "k", ",", "g", "in", "groupby", "(", "second_round_episodes", ",", "key", "=", "lambda", "x", ":", "x", ".", "scene_id", ")", "\n", "]", "\n", "assert", "len", "(", "first_round_scene_groups", ")", "==", "len", "(", "second_round_scene_groups", ")", "\n", "assert", "len", "(", "first_round_scene_groups", ")", "==", "len", "(", "set", "(", "first_round_scene_groups", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_dataset.test_iterator_scene_switching_episodes": [[244, 292], ["test_dataset._construct_dataset", "_construct_dataset.get_episode_iterator", "sorted", "range", "next", "list", "list", "all", "next", "itertools.islice", "len", "len", "len", "len", "itertools.islice", "len", "list", "len", "len", "sorted.pop", "set", "set", "itertools.groupby", "sum", "sorted.pop", "map", "map", "len"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_dataset._construct_dataset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.get_episode_iterator", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.set", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.set", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.map", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.map"], ["", "def", "test_iterator_scene_switching_episodes", "(", ")", ":", "\n", "    ", "total_ep", "=", "1000", "\n", "max_repeat", "=", "25", "\n", "dataset", "=", "_construct_dataset", "(", "total_ep", ")", "\n", "\n", "episode_iter", "=", "dataset", ".", "get_episode_iterator", "(", "\n", "max_scene_repeat_episodes", "=", "max_repeat", ",", "shuffle", "=", "False", ",", "cycle", "=", "True", "\n", ")", "\n", "episodes", "=", "sorted", "(", "dataset", ".", "episodes", ",", "key", "=", "lambda", "x", ":", "x", ".", "scene_id", ")", "\n", "\n", "for", "_", "in", "range", "(", "max_repeat", ")", ":", "\n", "        ", "episode", "=", "next", "(", "episode_iter", ")", "\n", "assert", "(", "\n", "episode", ".", "episode_id", "==", "episodes", ".", "pop", "(", "0", ")", ".", "episode_id", "\n", ")", ",", "\"episodes before max_repeat reached should be identical\"", "\n", "\n", "", "episode", "=", "next", "(", "episode_iter", ")", "\n", "assert", "(", "\n", "episode", ".", "scene_id", "!=", "episodes", ".", "pop", "(", "0", ")", ".", "scene_id", "\n", ")", ",", "\"After max_repeat episodes a scene switch doesn't happen.\"", "\n", "\n", "remaining_episodes", "=", "list", "(", "islice", "(", "episode_iter", ",", "total_ep", "-", "max_repeat", "-", "1", ")", ")", "\n", "assert", "len", "(", "remaining_episodes", ")", "==", "len", "(", "\n", "episodes", "\n", ")", ",", "\"Remaining episodes should be identical.\"", "\n", "\n", "assert", "len", "(", "{", "e", ".", "scene_id", "for", "e", "in", "remaining_episodes", "}", ")", "==", "len", "(", "\n", "set", "(", "map", "(", "lambda", "ep", ":", "ep", ".", "scene_id", ",", "remaining_episodes", ")", ")", "\n", ")", ",", "\"Next episodes should still include all scenes.\"", "\n", "\n", "cycled_episodes", "=", "list", "(", "islice", "(", "episode_iter", ",", "4", "*", "total_ep", ")", ")", "\n", "assert", "(", "\n", "len", "(", "set", "(", "map", "(", "lambda", "x", ":", "x", ".", "episode_id", ",", "cycled_episodes", ")", ")", ")", "==", "total_ep", "\n", ")", ",", "\"Some episodes leaked after cycling.\"", "\n", "\n", "grouped_episodes", "=", "[", "\n", "list", "(", "g", ")", "for", "k", ",", "g", "in", "groupby", "(", "cycled_episodes", ",", "key", "=", "lambda", "x", ":", "x", ".", "scene_id", ")", "\n", "]", "\n", "assert", "(", "\n", "len", "(", "sum", "(", "grouped_episodes", ",", "[", "]", ")", ")", "==", "4", "*", "total_ep", "\n", ")", ",", "\"Cycled episode iterator returned unexpected number of episodes.\"", "\n", "assert", "(", "\n", "len", "(", "grouped_episodes", ")", "==", "4", "*", "total_ep", "/", "max_repeat", "\n", ")", ",", "\"The number of scene switches is unexpected.\"", "\n", "\n", "assert", "all", "(", "\n", "len", "(", "group", ")", "==", "max_repeat", "for", "group", "in", "grouped_episodes", "\n", ")", ",", "\"Not all scene switches are equal to required number.\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_dataset.test_iterator_scene_switching_episodes_without_shuffle_cycle": [[294, 315], ["test_dataset._construct_dataset", "_construct_dataset.get_episode_iterator", "all", "list", "len", "len", "itertools.groupby", "sum", "len"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_dataset._construct_dataset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.get_episode_iterator"], ["", "def", "test_iterator_scene_switching_episodes_without_shuffle_cycle", "(", ")", ":", "\n", "    ", "total_ep", "=", "1000", "\n", "max_repeat", "=", "25", "\n", "dataset", "=", "_construct_dataset", "(", "total_ep", ")", "\n", "episode_iter", "=", "dataset", ".", "get_episode_iterator", "(", "\n", "max_scene_repeat_episodes", "=", "max_repeat", ",", "shuffle", "=", "False", ",", "cycle", "=", "False", "\n", ")", "\n", "\n", "grouped_episodes", "=", "[", "\n", "list", "(", "g", ")", "for", "k", ",", "g", "in", "groupby", "(", "episode_iter", ",", "key", "=", "lambda", "x", ":", "x", ".", "scene_id", ")", "\n", "]", "\n", "assert", "(", "\n", "len", "(", "sum", "(", "grouped_episodes", ",", "[", "]", ")", ")", "==", "total_ep", "\n", ")", ",", "\"The episode iterator returned unexpected number of episodes.\"", "\n", "assert", "(", "\n", "len", "(", "grouped_episodes", ")", "==", "total_ep", "/", "max_repeat", "\n", ")", ",", "\"The number of scene switches is unexpected.\"", "\n", "\n", "assert", "all", "(", "\n", "len", "(", "group", ")", "==", "max_repeat", "for", "group", "in", "grouped_episodes", "\n", ")", ",", "\"Not all scene stitches are equal to requirement.\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_dataset.test_iterator_scene_switching_steps": [[317, 352], ["test_dataset._construct_dataset", "_construct_dataset.get_episode_iterator", "sorted", "next", "range", "next", "list", "dataset.get_episode_iterator.step_taken", "itertools.islice", "len", "len", "len", "len", "sorted.pop", "sorted.pop", "list", "itertools.groupby"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_dataset._construct_dataset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.get_episode_iterator", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.EpisodeIterator.step_taken"], ["", "def", "test_iterator_scene_switching_steps", "(", ")", ":", "\n", "    ", "total_ep", "=", "1000", "\n", "max_repeat_steps", "=", "250", "\n", "dataset", "=", "_construct_dataset", "(", "total_ep", ")", "\n", "\n", "episode_iter", "=", "dataset", ".", "get_episode_iterator", "(", "\n", "max_scene_repeat_steps", "=", "max_repeat_steps", ",", "\n", "shuffle", "=", "False", ",", "\n", "step_repetition_range", "=", "0.0", ",", "\n", ")", "\n", "episodes", "=", "sorted", "(", "dataset", ".", "episodes", ",", "key", "=", "lambda", "x", ":", "x", ".", "scene_id", ")", "\n", "\n", "episode", "=", "next", "(", "episode_iter", ")", "\n", "assert", "(", "\n", "episode", ".", "episode_id", "==", "episodes", ".", "pop", "(", "0", ")", ".", "episode_id", "\n", ")", ",", "\"After max_repeat_steps episodes a scene switch doesn't happen.\"", "\n", "\n", "# episodes before max_repeat reached should be identical", "\n", "for", "_", "in", "range", "(", "max_repeat_steps", ")", ":", "\n", "        ", "episode_iter", ".", "step_taken", "(", ")", "\n", "\n", "", "episode", "=", "next", "(", "episode_iter", ")", "\n", "assert", "(", "\n", "episode", ".", "episode_id", "!=", "episodes", ".", "pop", "(", "0", ")", ".", "episode_id", "\n", ")", ",", "\"After max_repeat_steps episodes a scene switch doesn't happen.\"", "\n", "\n", "remaining_episodes", "=", "list", "(", "islice", "(", "episode_iter", ",", "total_ep", "-", "2", ")", ")", "\n", "assert", "len", "(", "remaining_episodes", ")", "==", "len", "(", "\n", "episodes", "\n", ")", ",", "\"Remaining episodes numbers aren't equal.\"", "\n", "\n", "assert", "len", "(", "{", "e", ".", "scene_id", "for", "e", "in", "remaining_episodes", "}", ")", "==", "len", "(", "\n", "list", "(", "groupby", "(", "remaining_episodes", ",", "lambda", "ep", ":", "ep", ".", "scene_id", ")", ")", "\n", ")", ",", "(", "\n", "\"Next episodes should still be grouped by scene (before next \"", "\n", "\"switching).\"", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_dataset.test_preserve_order": [[356, 363], ["test_dataset._construct_dataset", "sorted", "_construct_dataset.get_episode_iterator", "list"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_dataset._construct_dataset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.get_episode_iterator"], ["", "def", "test_preserve_order", "(", ")", ":", "\n", "    ", "dataset", "=", "_construct_dataset", "(", "100", ")", "\n", "episodes", "=", "sorted", "(", "dataset", ".", "episodes", ",", "reverse", "=", "True", ",", "key", "=", "lambda", "x", ":", "x", ".", "scene_id", ")", "\n", "dataset", ".", "episodes", "=", "episodes", "[", ":", "]", "\n", "episode_iter", "=", "dataset", ".", "get_episode_iterator", "(", "shuffle", "=", "False", ",", "cycle", "=", "False", ")", "\n", "\n", "assert", "list", "(", "episode_iter", ")", "==", "episodes", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_dataset.test_reset_goals": [[365, 379], ["habitat.tasks.nav.nav.NavigationEpisode", "habitat.tasks.nav.nav.NavigationGoal", "habitat.tasks.nav.nav.NavigationGoal"], "function", ["None"], ["", "def", "test_reset_goals", "(", ")", ":", "\n", "    ", "ep", "=", "NavigationEpisode", "(", "\n", "episode_id", "=", "\"0\"", ",", "\n", "scene_id", "=", "\"1\"", ",", "\n", "start_position", "=", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "start_rotation", "=", "[", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "goals", "=", "[", "NavigationGoal", "(", "position", "=", "[", "1", ",", "2", ",", "3", "]", ")", "]", ",", "\n", ")", "\n", "\n", "ep", ".", "_shortest_path_cache", "=", "\"Dummy\"", "\n", "assert", "ep", ".", "_shortest_path_cache", "is", "not", "None", "\n", "\n", "ep", ".", "goals", "=", "[", "NavigationGoal", "(", "position", "=", "[", "3", ",", "4", ",", "5", "]", ")", "]", "\n", "assert", "ep", ".", "_shortest_path_cache", "is", "None", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_pyrobot.CameraMock.get_rgb": [[15, 17], ["numpy.zeros"], "methods", ["None"], ["    ", "def", "get_rgb", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "zeros", "(", "(", "256", ",", "256", ",", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_pyrobot.CameraMock.get_depth": [[18, 20], ["numpy.zeros"], "methods", ["None"], ["", "def", "get_depth", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "zeros", "(", "(", "256", ",", "256", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_pyrobot.CameraMock.reset": [[21, 23], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_pyrobot.CameraMock.step": [[24, 26], ["None"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_pyrobot.RobotMock.__init__": [[29, 32], ["test_pyrobot.CameraMock", "test_pyrobot.BaseMock"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "camera", "=", "CameraMock", "(", ")", "\n", "self", ".", "base", "=", "BaseMock", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_pyrobot.BaseMock.__init__": [[35, 38], ["mock.MagicMock"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "base_state", "=", "mock", ".", "MagicMock", "(", ")", "\n", "self", ".", "base_state", ".", "bumper", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_pyrobot.BaseMock.go_to_relative": [[39, 41], ["None"], "methods", ["None"], ["", "def", "go_to_relative", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_pyrobot.test_pyrobot": [[43, 66], ["habitat.config.default.get_config", "mocker.MagicMock", "_try_register_pyrobot", "habitat.sims.make_sim", "reality.reset", "reality.step"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pyrobot.__init__._try_register_pyrobot", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sims.registration.make_sim", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step"], ["", "", "def", "test_pyrobot", "(", "mocker", ")", ":", "\n", "    ", "if", "\"pyrobot\"", "not", "in", "sys", ".", "modules", ":", "\n", "# Mock pyrobot package if it is not installed", "\n", "        ", "mock_pyrobot", "=", "mocker", ".", "MagicMock", "(", ")", "\n", "mock_pyrobot", ".", "Robot", "=", "RobotMock", "\n", "sys", ".", "modules", "[", "\"pyrobot\"", "]", "=", "mock_pyrobot", "\n", "\n", "# Re-register pyrobot with mock", "\n", "from", "habitat", ".", "sims", ".", "registration", "import", "_try_register_pyrobot", "\n", "\n", "_try_register_pyrobot", "(", ")", "\n", "\n", "", "config", "=", "get_config", "(", ")", "\n", "with", "make_sim", "(", "\"PyRobot-v0\"", ",", "config", "=", "config", ".", "PYROBOT", ")", "as", "reality", ":", "\n", "\n", "        ", "_", "=", "reality", ".", "reset", "(", ")", "\n", "_", "=", "reality", ".", "step", "(", "\n", "\"go_to_relative\"", ",", "\n", "{", "\n", "\"xyt_position\"", ":", "[", "0", ",", "0", ",", "(", "10", "/", "180", ")", "*", "np", ".", "pi", "]", ",", "\n", "\"use_map\"", ":", "False", ",", "\n", "\"close_loop\"", ":", "True", ",", "\n", "\"smooth\"", ":", "False", ",", "\n", "}", ",", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_visual_utils.test_observations_to_image": [[12, 34], ["habitat.utils.visualizations.utils.observations_to_image", "numpy.random.rand", "numpy.random.rand", "numpy.random.randint", "numpy.random.randint", "numpy.random.random"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.utils.observations_to_image"], ["def", "test_observations_to_image", "(", ")", ":", "\n", "    ", "observations", "=", "{", "\n", "\"rgb\"", ":", "np", ".", "random", ".", "rand", "(", "200", ",", "400", ",", "3", ")", ",", "\n", "\"depth\"", ":", "np", ".", "random", ".", "rand", "(", "200", ",", "400", ",", "1", ")", ",", "\n", "}", "\n", "info", "=", "{", "\n", "\"collisions\"", ":", "{", "\"is_collision\"", ":", "True", "}", ",", "\n", "\"top_down_map\"", ":", "{", "\n", "\"map\"", ":", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "255", ",", "size", "=", "(", "300", ",", "300", ")", ")", ",", "\n", "\"fog_of_war_mask\"", ":", "np", ".", "random", ".", "randint", "(", "\n", "low", "=", "0", ",", "high", "=", "1", ",", "size", "=", "(", "300", ",", "300", ")", "\n", ")", ",", "\n", "\"agent_map_coord\"", ":", "(", "10", ",", "10", ")", ",", "\n", "\"agent_angle\"", ":", "np", ".", "random", ".", "random", "(", ")", ",", "\n", "}", ",", "\n", "}", "\n", "image", "=", "observations_to_image", "(", "observations", ",", "info", ")", "\n", "assert", "image", ".", "shape", "==", "(", "\n", "200", ",", "\n", "1000", ",", "\n", "3", ",", "\n", ")", ",", "\"Resulted image resolution doesn't match.\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_visual_utils.test_different_dim_observations_to_image": [[36, 60], ["habitat.utils.visualizations.utils.observations_to_image", "numpy.random.rand", "numpy.random.rand", "numpy.random.rand", "numpy.random.rand", "numpy.random.randint", "numpy.random.randint", "numpy.random.random"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.utils.observations_to_image"], ["", "def", "test_different_dim_observations_to_image", "(", ")", ":", "\n", "    ", "observations", "=", "{", "\n", "\"1_rgb\"", ":", "np", ".", "random", ".", "rand", "(", "512", ",", "512", ",", "3", ")", ",", "\n", "\"2_rgb\"", ":", "np", ".", "random", ".", "rand", "(", "418", ",", "418", ",", "3", ")", ",", "\n", "\"1_depth\"", ":", "np", ".", "random", ".", "rand", "(", "128", ",", "128", ",", "1", ")", ",", "\n", "\"2_depth\"", ":", "np", ".", "random", ".", "rand", "(", "128", ",", "128", ",", "1", ")", ",", "\n", "}", "\n", "info", "=", "{", "\n", "\"collisions\"", ":", "{", "\"is_collision\"", ":", "True", "}", ",", "\n", "\"top_down_map\"", ":", "{", "\n", "\"map\"", ":", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "255", ",", "size", "=", "(", "300", ",", "300", ")", ")", ",", "\n", "\"fog_of_war_mask\"", ":", "np", ".", "random", ".", "randint", "(", "\n", "low", "=", "0", ",", "high", "=", "1", ",", "size", "=", "(", "300", ",", "300", ")", "\n", ")", ",", "\n", "\"agent_map_coord\"", ":", "(", "10", ",", "10", ")", ",", "\n", "\"agent_angle\"", ":", "np", ".", "random", ".", "random", "(", ")", ",", "\n", "}", ",", "\n", "}", "\n", "image", "=", "observations_to_image", "(", "observations", ",", "info", ")", "\n", "assert", "image", ".", "shape", "==", "(", "\n", "512", ",", "\n", "1570", ",", "\n", "3", ",", "\n", ")", ",", "\"Resulted image resolution doesn't match.\"", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_install.test_habitat_install": [[11, 14], ["habitat.core.logging.logger.info", "str"], "function", ["None"], ["def", "test_habitat_install", "(", ")", ":", "\n", "    ", "r\"\"\"dummy test for testing installation\"\"\"", "\n", "logger", ".", "info", "(", "str", "(", "habitat", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_gym_wrapper.test_gym_wrapper_contract_continuous": [[22, 86], ["pytest.mark.parametrize", "habitat.get_config", "habitat.get_config", "habitat.utils.gym_definitions._get_env_name", "habitat.core.environments.get_env_class", "habitat.utils.env_utils.make_env_fn", "habitat.utils.env_utils.make_env_fn", "habitat.utils.gym_adapter.HabGymWrapper", "habitat.utils.render_wrapper.HabRenderWrapper", "isinstance", "habitat.utils.render_wrapper.HabRenderWrapper.reset", "isinstance", "habitat.utils.render_wrapper.HabRenderWrapper.step", "isinstance", "habitat.utils.render_wrapper.HabRenderWrapper.render", "isinstance", "info.items", "habitat.utils.render_wrapper.HabRenderWrapper.close", "habitat.utils.render_wrapper.HabRenderWrapper.action_space.sample", "len", "isinstance"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.gym_definitions._get_env_name", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.environments.get_env_class", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.env_utils.make_env_fn", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.env_utils.make_env_fn", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.render", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.close", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.sample"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"config_file,overrides,expected_action_dim,expected_obs_type\"", ",", "\n", "[", "\n", "(", "\n", "\"configs/tasks/rearrange/reach_state.yaml\"", ",", "\n", "[", "]", ",", "\n", "7", ",", "\n", "np", ".", "ndarray", ",", "\n", ")", ",", "\n", "(", "\n", "\"configs/tasks/rearrange/pick.yaml\"", ",", "\n", "[", "]", ",", "\n", "8", ",", "\n", "dict", ",", "\n", ")", ",", "\n", "(", "\n", "\"configs/tasks/rearrange/pick.yaml\"", ",", "\n", "[", "\n", "\"TASK.ACTIONS.ARM_ACTION.GRIP_CONTROLLER\"", ",", "\n", "\"SuctionGraspAction\"", ",", "\n", "]", ",", "\n", "7", ",", "\n", "dict", ",", "\n", ")", ",", "\n", "(", "\n", "\"configs/tasks/rearrange/tidy_house.yaml\"", ",", "\n", "[", "]", ",", "\n", "11", ",", "# 7 joints, 1 grip action, 2 base velocity, 1 stop action", "\n", "dict", ",", "\n", ")", ",", "\n", "]", ",", "\n", ")", "\n", "def", "test_gym_wrapper_contract_continuous", "(", "\n", "config_file", ",", "overrides", ",", "expected_action_dim", ",", "expected_obs_type", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Test the Gym wrapper returns the right things and works with overrides.\n    \"\"\"", "\n", "config", "=", "habitat", ".", "get_config", "(", "config_file", ",", "overrides", ")", "\n", "env_class_name", "=", "_get_env_name", "(", "config", ")", "\n", "env_class", "=", "get_env_class", "(", "env_class_name", ")", "\n", "\n", "env", "=", "habitat", ".", "utils", ".", "env_utils", ".", "make_env_fn", "(", "\n", "env_class", "=", "env_class", ",", "config", "=", "config", "\n", ")", "\n", "\n", "env", "=", "HabGymWrapper", "(", "env", ")", "\n", "env", "=", "HabRenderWrapper", "(", "env", ")", "\n", "assert", "isinstance", "(", "env", ".", "action_space", ",", "spaces", ".", "Box", ")", "\n", "assert", "(", "\n", "env", ".", "action_space", ".", "shape", "[", "0", "]", "==", "expected_action_dim", "\n", ")", ",", "f\"Has {env.action_space.shape[0]} action dim but expected {expected_action_dim}\"", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "assert", "isinstance", "(", "obs", ",", "expected_obs_type", ")", ",", "f\"Obs {obs}\"", "\n", "obs", ",", "_", ",", "_", ",", "info", "=", "env", ".", "step", "(", "env", ".", "action_space", ".", "sample", "(", ")", ")", "\n", "assert", "isinstance", "(", "obs", ",", "expected_obs_type", ")", ",", "f\"Obs {obs}\"", "\n", "\n", "frame", "=", "env", ".", "render", "(", ")", "\n", "assert", "isinstance", "(", "frame", ",", "np", ".", "ndarray", ")", "\n", "assert", "len", "(", "frame", ".", "shape", ")", "==", "3", "and", "frame", ".", "shape", "[", "-", "1", "]", "==", "3", "\n", "\n", "for", "_", ",", "v", "in", "info", ".", "items", "(", ")", ":", "\n", "        ", "assert", "not", "isinstance", "(", "v", ",", "dict", ")", "\n", "", "env", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_gym_wrapper.test_gym_wrapper_contract_discrete": [[88, 137], ["pytest.mark.parametrize", "habitat.get_config", "habitat.get_config", "habitat.utils.gym_definitions._get_env_name", "habitat.core.environments.get_env_class", "habitat.utils.env_utils.make_env_fn", "habitat.utils.env_utils.make_env_fn", "habitat.utils.gym_adapter.HabGymWrapper", "habitat.utils.render_wrapper.HabRenderWrapper", "isinstance", "habitat.utils.render_wrapper.HabRenderWrapper.reset", "isinstance", "habitat.utils.render_wrapper.HabRenderWrapper.step", "isinstance", "habitat.utils.render_wrapper.HabRenderWrapper.render", "isinstance", "info.items", "habitat.utils.render_wrapper.HabRenderWrapper.close", "habitat.utils.render_wrapper.HabRenderWrapper.action_space.sample", "len", "isinstance"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.gym_definitions._get_env_name", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.environments.get_env_class", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.env_utils.make_env_fn", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.env_utils.make_env_fn", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.render", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.close", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.sample"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"config_file,overrides,expected_action_dim,expected_obs_type\"", ",", "\n", "[", "\n", "(", "\n", "\"configs/tasks/imagenav.yaml\"", ",", "\n", "[", "]", ",", "\n", "4", ",", "\n", "dict", ",", "\n", ")", ",", "\n", "(", "\n", "\"configs/tasks/pointnav.yaml\"", ",", "\n", "[", "]", ",", "\n", "4", ",", "\n", "dict", ",", "\n", ")", ",", "\n", "]", ",", "\n", ")", "\n", "def", "test_gym_wrapper_contract_discrete", "(", "\n", "config_file", ",", "overrides", ",", "expected_action_dim", ",", "expected_obs_type", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Test the Gym wrapper returns the right things and works with overrides.\n    \"\"\"", "\n", "config", "=", "habitat", ".", "get_config", "(", "config_file", ",", "overrides", ")", "\n", "env_class_name", "=", "_get_env_name", "(", "config", ")", "\n", "env_class", "=", "get_env_class", "(", "env_class_name", ")", "\n", "\n", "env", "=", "habitat", ".", "utils", ".", "env_utils", ".", "make_env_fn", "(", "\n", "env_class", "=", "env_class", ",", "config", "=", "config", "\n", ")", "\n", "\n", "env", "=", "HabGymWrapper", "(", "env", ")", "\n", "env", "=", "HabRenderWrapper", "(", "env", ")", "\n", "assert", "isinstance", "(", "env", ".", "action_space", ",", "spaces", ".", "Discrete", ")", "\n", "assert", "(", "\n", "env", ".", "action_space", ".", "n", "==", "expected_action_dim", "\n", ")", ",", "f\"Has {env.action_space.n} action dim but expected {expected_action_dim}\"", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "assert", "isinstance", "(", "obs", ",", "expected_obs_type", ")", ",", "f\"Obs {obs}\"", "\n", "obs", ",", "_", ",", "_", ",", "info", "=", "env", ".", "step", "(", "env", ".", "action_space", ".", "sample", "(", ")", ")", "\n", "assert", "isinstance", "(", "obs", ",", "expected_obs_type", ")", ",", "f\"Obs {obs}\"", "\n", "\n", "frame", "=", "env", ".", "render", "(", ")", "\n", "assert", "isinstance", "(", "frame", ",", "np", ".", "ndarray", ")", "\n", "assert", "len", "(", "frame", ".", "shape", ")", "==", "3", "and", "frame", ".", "shape", "[", "-", "1", "]", "==", "3", "\n", "\n", "for", "_", ",", "v", "in", "info", ".", "items", "(", ")", ":", "\n", "        ", "assert", "not", "isinstance", "(", "v", ",", "dict", ")", "\n", "", "env", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_gym_wrapper.test_full_gym_wrapper": [[139, 174], ["pytest.mark.parametrize", "gym.make", "gym.make", "gym.make.reset", "gym.make.step", "gym.make.close", "gym.make", "gym.make", "gym.make.reset", "gym.make.step", "gym.make.render", "gym.make.close", "gym.make.action_space.sample", "gym.make.action_space.sample"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.close", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.render", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.close", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.sample", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.sample"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"config_file,override_options\"", ",", "\n", "[", "\n", "[", "\n", "\"configs/tasks/rearrange/pick.yaml\"", ",", "\n", "[", "\n", "\"TASK.ACTIONS.ARM_ACTION.GRIP_CONTROLLER\"", ",", "\n", "\"SuctionGraspAction\"", ",", "\n", "]", ",", "\n", "]", ",", "\n", "[", "\"configs/tasks/rearrange/pick.yaml\"", ",", "[", "]", "]", ",", "\n", "]", ",", "\n", ")", "\n", "def", "test_full_gym_wrapper", "(", "config_file", ",", "override_options", ")", ":", "\n", "    ", "\"\"\"\n    Test the Gym wrapper and its Render wrapper work\n    \"\"\"", "\n", "hab_gym", "=", "gym", ".", "make", "(", "\n", "\"Habitat-v0\"", ",", "\n", "cfg_file_path", "=", "config_file", ",", "\n", "override_options", "=", "override_options", ",", "\n", "use_render_mode", "=", "True", ",", "\n", ")", "\n", "hab_gym", ".", "reset", "(", ")", "\n", "hab_gym", ".", "step", "(", "hab_gym", ".", "action_space", ".", "sample", "(", ")", ")", "\n", "hab_gym", ".", "close", "(", ")", "\n", "\n", "hab_gym", "=", "gym", ".", "make", "(", "\n", "\"HabitatRender-v0\"", ",", "\n", "cfg_file_path", "=", "config_file", ",", "\n", ")", "\n", "hab_gym", ".", "reset", "(", ")", "\n", "hab_gym", ".", "step", "(", "hab_gym", ".", "action_space", ".", "sample", "(", ")", ")", "\n", "hab_gym", ".", "render", "(", "\"rgb_array\"", ")", "\n", "hab_gym", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_gym_wrapper.test_auto_gym_wrapper": [[176, 201], ["pytest.mark.parametrize", "habitat.get_config", "habitat.get_config", "list", "gym.make", "gym.make", "gym.make.reset", "gym.make.step", "gym.make.close", "glob.glob", "gym.make.action_space.sample"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.close", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.sample"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"test_cfg_path\"", ",", "\n", "list", "(", "\n", "glob", "(", "\"configs/tasks/rearrange/**/*.yaml\"", ",", "recursive", "=", "True", ")", ",", "\n", ")", ",", "\n", ")", "\n", "def", "test_auto_gym_wrapper", "(", "test_cfg_path", ")", ":", "\n", "    ", "\"\"\"\n    Test all defined automatic Gym wrappers work\n    \"\"\"", "\n", "config", "=", "habitat", ".", "get_config", "(", "test_cfg_path", ")", "\n", "if", "\"GYM\"", "not", "in", "config", "or", "config", ".", "GYM", ".", "AUTO_NAME", "==", "\"\"", ":", "\n", "        ", "return", "\n", "\n", "", "for", "prefix", "in", "[", "\"\"", ",", "\"Render\"", "]", ":", "\n", "        ", "full_gym_name", "=", "f\"Habitat{prefix}{config.GYM.AUTO_NAME}-v0\"", "\n", "\n", "hab_gym", "=", "gym", ".", "make", "(", "\n", "full_gym_name", ",", "\n", "# Test sometimes fails with concurrent rendering.", "\n", "override_options", "=", "[", "\"SIMULATOR.CONCUR_RENDER\"", ",", "False", "]", ",", "\n", ")", "\n", "hab_gym", ".", "reset", "(", ")", "\n", "hab_gym", ".", "step", "(", "hab_gym", ".", "action_space", ".", "sample", "(", ")", ")", "\n", "hab_gym", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_gym_wrapper.test_gym_premade_envs": [[203, 231], ["pytest.mark.parametrize", "gym.make", "gym.make", "gym.make.reset", "range", "gym.make.close", "gym.make.step", "gym.make.action_space.sample", "gym.make.reset"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.close", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.sample", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset"], ["", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"name\"", ",", "\n", "[", "\n", "\"HabitatPick-v0\"", ",", "\n", "\"HabitatPlace-v0\"", ",", "\n", "\"HabitatCloseCab-v0\"", ",", "\n", "\"HabitatCloseFridge-v0\"", ",", "\n", "\"HabitatOpenCab-v0\"", ",", "\n", "\"HabitatOpenFridge-v0\"", ",", "\n", "\"HabitatNavToObj-v0\"", ",", "\n", "\"HabitatReachState-v0\"", ",", "\n", "\"HabitatTidyHouse-v0\"", ",", "\n", "\"HabitatPrepareGroceries-v0\"", ",", "\n", "\"HabitatSetTable-v0\"", ",", "\n", "\"HabitatNavPick-v0\"", ",", "\n", "\"HabitatNavPickNavPlace-v0\"", ",", "\n", "]", ",", "\n", ")", "\n", "def", "test_gym_premade_envs", "(", "name", ")", ":", "\n", "    ", "env", "=", "gym", ".", "make", "(", "name", ")", "\n", "env", ".", "reset", "(", ")", "\n", "done", "=", "False", "\n", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "        ", "_", ",", "_", ",", "done", ",", "_", "=", "env", ".", "step", "(", "env", ".", "action_space", ".", "sample", "(", ")", ")", "\n", "if", "done", ":", "\n", "            ", "env", ".", "reset", "(", ")", "\n", "done", "=", "False", "\n", "", "", "env", ".", "close", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_tensor_dict.test_tensor_dict_constructor": [[21, 32], ["pytest.mark.skipif", "dict", "TensorDict.from_tree", "torch.is_tensor", "isinstance", "isinstance", "torch.is_tensor", "torch.randn", "dict", "dict", "numpy.random.randn"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.from_tree"], ["", "@", "pytest", ".", "mark", ".", "skipif", "(", "torch", "is", "None", ",", "reason", "=", "\"Test requires pytorch\"", ")", "\n", "def", "test_tensor_dict_constructor", "(", ")", ":", "\n", "    ", "dict_tree", "=", "dict", "(", "\n", "a", "=", "torch", ".", "randn", "(", "2", ",", "2", ")", ",", "b", "=", "dict", "(", "c", "=", "dict", "(", "d", "=", "np", ".", "random", ".", "randn", "(", "3", ",", "3", ")", ")", ")", "\n", ")", "\n", "tensor_dict", "=", "TensorDict", ".", "from_tree", "(", "dict_tree", ")", "\n", "\n", "assert", "torch", ".", "is_tensor", "(", "tensor_dict", "[", "\"a\"", "]", ")", "\n", "assert", "isinstance", "(", "tensor_dict", "[", "\"b\"", "]", ",", "TensorDict", ")", "\n", "assert", "isinstance", "(", "tensor_dict", "[", "\"b\"", "]", "[", "\"c\"", "]", ",", "TensorDict", ")", "\n", "assert", "torch", ".", "is_tensor", "(", "tensor_dict", "[", "\"b\"", "]", "[", "\"c\"", "]", "[", "\"d\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_tensor_dict.test_tensor_dict_to_tree": [[34, 39], ["pytest.mark.skipif", "dict", "TensorDict.from_tree().to_tree", "torch.randn", "dict", "TensorDict.from_tree", "dict", "torch.randn"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.to_tree", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.from_tree"], ["", "@", "pytest", ".", "mark", ".", "skipif", "(", "torch", "is", "None", ",", "reason", "=", "\"Test requires pytorch\"", ")", "\n", "def", "test_tensor_dict_to_tree", "(", ")", ":", "\n", "    ", "dict_tree", "=", "dict", "(", "a", "=", "torch", ".", "randn", "(", "2", ",", "2", ")", ",", "b", "=", "dict", "(", "c", "=", "dict", "(", "d", "=", "torch", ".", "randn", "(", "3", ",", "3", ")", ")", ")", ")", "\n", "\n", "assert", "dict_tree", "==", "TensorDict", ".", "from_tree", "(", "dict_tree", ")", ".", "to_tree", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_tensor_dict.test_tensor_dict_str_index": [[41, 52], ["pytest.mark.skipif", "dict", "TensorDict.from_tree", "torch.randn", "pytest.raises", "torch.randn", "dict", "dict", "torch.randn"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.from_tree"], ["", "@", "pytest", ".", "mark", ".", "skipif", "(", "torch", "is", "None", ",", "reason", "=", "\"Test requires pytorch\"", ")", "\n", "def", "test_tensor_dict_str_index", "(", ")", ":", "\n", "    ", "dict_tree", "=", "dict", "(", "a", "=", "torch", ".", "randn", "(", "2", ",", "2", ")", ",", "b", "=", "dict", "(", "c", "=", "dict", "(", "d", "=", "torch", ".", "randn", "(", "3", ",", "3", ")", ")", ")", ")", "\n", "tensor_dict", "=", "TensorDict", ".", "from_tree", "(", "dict_tree", ")", "\n", "\n", "x", "=", "torch", ".", "randn", "(", "5", ",", "5", ")", "\n", "tensor_dict", "[", "\"a\"", "]", "=", "x", "\n", "assert", "(", "tensor_dict", "[", "\"a\"", "]", "==", "x", ")", ".", "all", "(", ")", "\n", "\n", "with", "pytest", ".", "raises", "(", "KeyError", ")", ":", "\n", "        ", "_", "=", "tensor_dict", "[", "\"c\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_tensor_dict.test_tensor_dict_index": [[54, 78], ["pytest.mark.skipif", "dict", "TensorDict.from_tree", "dict", "torch.allclose", "torch.randn", "tensor_dict[].set", "torch.allclose", "dict", "torch.allclose", "pytest.raises", "dict", "torch.allclose", "pytest.raises", "torch.randn", "dict", "dict", "dict", "torch.randn", "dict", "torch.randn", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.from_tree", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.set"], ["", "", "@", "pytest", ".", "mark", ".", "skipif", "(", "torch", "is", "None", ",", "reason", "=", "\"Test requires pytorch\"", ")", "\n", "def", "test_tensor_dict_index", "(", ")", ":", "\n", "    ", "dict_tree", "=", "dict", "(", "a", "=", "torch", ".", "randn", "(", "2", ",", "2", ")", ",", "b", "=", "dict", "(", "c", "=", "dict", "(", "d", "=", "torch", ".", "randn", "(", "3", ",", "3", ")", ")", ")", ")", "\n", "tensor_dict", "=", "TensorDict", ".", "from_tree", "(", "dict_tree", ")", "\n", "\n", "with", "pytest", ".", "raises", "(", "KeyError", ")", ":", "\n", "        ", "tensor_dict", "[", "\"b\"", "]", "[", "0", "]", "=", "dict", "(", "q", "=", "torch", ".", "randn", "(", "3", ")", ")", "\n", "\n", "", "tmp", "=", "dict", "(", "c", "=", "dict", "(", "d", "=", "torch", ".", "randn", "(", "3", ")", ")", ")", "\n", "tensor_dict", "[", "\"b\"", "]", "[", "0", "]", "=", "tmp", "\n", "assert", "torch", ".", "allclose", "(", "tensor_dict", "[", "\"b\"", "]", "[", "\"c\"", "]", "[", "\"d\"", "]", "[", "0", "]", ",", "tmp", "[", "\"c\"", "]", "[", "\"d\"", "]", ")", "\n", "assert", "not", "torch", ".", "allclose", "(", "tensor_dict", "[", "\"b\"", "]", "[", "\"c\"", "]", "[", "\"d\"", "]", "[", "1", "]", ",", "tmp", "[", "\"c\"", "]", "[", "\"d\"", "]", ")", "\n", "\n", "tensor_dict", "[", "\"b\"", "]", "[", "\"c\"", "]", "[", "\"x\"", "]", "=", "torch", ".", "randn", "(", "5", ",", "5", ")", "\n", "with", "pytest", ".", "raises", "(", "KeyError", ")", ":", "\n", "        ", "tensor_dict", "[", "\"b\"", "]", "[", "1", "]", "=", "tmp", "\n", "\n", "", "tensor_dict", "[", "\"b\"", "]", ".", "set", "(", "1", ",", "tmp", ",", "strict", "=", "False", ")", "\n", "assert", "torch", ".", "allclose", "(", "tensor_dict", "[", "\"b\"", "]", "[", "\"c\"", "]", "[", "\"d\"", "]", "[", "1", "]", ",", "tmp", "[", "\"c\"", "]", "[", "\"d\"", "]", ")", "\n", "\n", "tmp", "=", "dict", "(", "c", "=", "dict", "(", "d", "=", "torch", ".", "randn", "(", "1", ",", "3", ")", ")", ")", "\n", "del", "tensor_dict", "[", "\"b\"", "]", "[", "\"c\"", "]", "[", "\"x\"", "]", "\n", "tensor_dict", "[", "\"b\"", "]", "[", "2", ":", "3", "]", "=", "tmp", "\n", "assert", "torch", ".", "allclose", "(", "tensor_dict", "[", "\"b\"", "]", "[", "\"c\"", "]", "[", "\"d\"", "]", "[", "2", ":", "3", "]", ",", "tmp", "[", "\"c\"", "]", "[", "\"d\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_tensor_dict.test_tensor_dict_map": [[80, 91], ["pytest.mark.skipif", "dict", "TensorDict.from_tree", "TensorDict.from_tree.map", "TensorDict.from_tree.map_in_place", "dict"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.from_tree", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.map", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.map_in_place"], ["", "@", "pytest", ".", "mark", ".", "skipif", "(", "torch", "is", "None", ",", "reason", "=", "\"Test requires pytorch\"", ")", "\n", "def", "test_tensor_dict_map", "(", ")", ":", "\n", "    ", "dict_tree", "=", "dict", "(", "a", "=", "dict", "(", "b", "=", "[", "0", "]", ")", ")", "\n", "tensor_dict", "=", "TensorDict", ".", "from_tree", "(", "dict_tree", ")", "\n", "\n", "res", "=", "tensor_dict", ".", "map", "(", "lambda", "x", ":", "x", "+", "1", ")", "\n", "assert", "(", "res", "[", "\"a\"", "]", "[", "\"b\"", "]", "==", "1", ")", ".", "all", "(", ")", "\n", "\n", "tensor_dict", ".", "map_in_place", "(", "lambda", "x", ":", "x", "+", "1", ")", "\n", "\n", "assert", "res", "==", "tensor_dict", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_habitat_sim.init_sim": [[18, 23], ["habitat.config.default.get_config", "habitat.sims.make_sim", "os.path.exists", "pytest.skip"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sims.registration.make_sim", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.exists"], ["def", "init_sim", "(", ")", ":", "\n", "    ", "config", "=", "get_config", "(", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "config", ".", "SIMULATOR", ".", "SCENE", ")", ":", "\n", "        ", "pytest", ".", "skip", "(", "\"Please download Habitat test data to data folder.\"", ")", "\n", "", "return", "make_sim", "(", "config", ".", "SIMULATOR", ".", "TYPE", ",", "config", "=", "config", ".", "SIMULATOR", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_habitat_sim.test_sim_trajectory": [[25, 72], ["open", "json.load", "test_habitat_sim.init_sim", "sim.reset", "sim.set_agent_state", "enumerate", "sim.action_space.contains", "sim.step", "sim.get_agent_state", "sim.distance_to_closest_obstacle", "numpy.isclose", "numpy.allclose", "numpy.allclose", "numpy.array", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.load", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_habitat_sim.init_sim", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSim.set_agent_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.contains", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.get_agent_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSim.distance_to_closest_obstacle"], ["", "def", "test_sim_trajectory", "(", ")", ":", "\n", "    ", "with", "open", "(", "\"test/data/habitat-sim_trajectory_data.json\"", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "test_trajectory", "=", "json", ".", "load", "(", "f", ")", "\n", "", "with", "init_sim", "(", ")", "as", "sim", ":", "\n", "\n", "        ", "sim", ".", "reset", "(", ")", "\n", "sim", ".", "set_agent_state", "(", "\n", "position", "=", "test_trajectory", "[", "\"positions\"", "]", "[", "0", "]", ",", "\n", "rotation", "=", "test_trajectory", "[", "\"rotations\"", "]", "[", "0", "]", ",", "\n", ")", "\n", "\n", "# remove last stop action as Sim has no stop action anymore", "\n", "for", "i", ",", "action", "in", "enumerate", "(", "test_trajectory", "[", "\"actions\"", "]", "[", ":", "-", "1", "]", ")", ":", "\n", "            ", "action", "=", "HabitatSimActions", "[", "action", "]", "\n", "if", "i", ">", "0", ":", "# ignore first step as habitat-sim doesn't update", "\n", "# agent until then", "\n", "                ", "state", "=", "sim", ".", "get_agent_state", "(", ")", "\n", "assert", "(", "\n", "np", ".", "allclose", "(", "\n", "np", ".", "array", "(", "\n", "test_trajectory", "[", "\"positions\"", "]", "[", "i", "]", ",", "dtype", "=", "np", ".", "float32", "\n", ")", ",", "\n", "state", ".", "position", ",", "\n", ")", "\n", "is", "True", "\n", ")", ",", "\"mismatch in position \"", "\"at step {}\"", ".", "format", "(", "i", ")", "\n", "assert", "(", "\n", "np", ".", "allclose", "(", "\n", "np", ".", "array", "(", "\n", "test_trajectory", "[", "\"rotations\"", "]", "[", "i", "]", ",", "dtype", "=", "np", ".", "float32", "\n", ")", ",", "\n", "np", ".", "array", "(", "[", "*", "state", ".", "rotation", ".", "imag", ",", "state", ".", "rotation", ".", "real", "]", ")", ",", "\n", ")", "\n", "is", "True", "\n", ")", ",", "\"mismatch in rotation \"", "\"at step {}\"", ".", "format", "(", "i", ")", "\n", "\n", "max_search_radius", "=", "2.0", "\n", "dist_to_obs", "=", "sim", ".", "distance_to_closest_obstacle", "(", "\n", "state", ".", "position", ",", "max_search_radius", "\n", ")", "\n", "assert", "np", ".", "isclose", "(", "\n", "dist_to_obs", ",", "test_trajectory", "[", "\"distances_to_obstacles\"", "]", "[", "i", "]", "\n", ")", "\n", "\n", "", "assert", "sim", ".", "action_space", ".", "contains", "(", "action", ")", "\n", "\n", "sim", ".", "step", "(", "action", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_habitat_sim.test_sim_no_sensors": [[74, 82], ["habitat.config.default.get_config", "habitat.config.default.get_config.defrost", "os.path.exists", "pytest.skip", "habitat.sims.make_sim", "sim.reset"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.exists", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sims.registration.make_sim", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset"], ["", "", "", "def", "test_sim_no_sensors", "(", ")", ":", "\n", "    ", "config", "=", "get_config", "(", ")", "\n", "config", ".", "defrost", "(", ")", "\n", "config", ".", "SIMULATOR", ".", "AGENT_0", ".", "SENSORS", "=", "[", "]", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "config", ".", "SIMULATOR", ".", "SCENE", ")", ":", "\n", "        ", "pytest", ".", "skip", "(", "\"Please download Habitat test data to data folder.\"", ")", "\n", "", "with", "make_sim", "(", "config", ".", "SIMULATOR", ".", "TYPE", ",", "config", "=", "config", ".", "SIMULATOR", ")", "as", "sim", ":", "\n", "        ", "sim", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_habitat_sim.test_sim_geodesic_distance": [[84, 122], ["habitat.config.default.get_config", "os.path.exists", "pytest.skip", "habitat.sims.make_sim", "sim.reset", "open", "json.load", "numpy.isclose", "numpy.isclose", "numpy.isclose", "os.path.join", "sim.geodesic_distance", "sim.geodesic_distance", "sim.geodesic_distance", "numpy.min", "os.path.dirname", "sim.geodesic_distance"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.exists", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sims.registration.make_sim", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.load", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.geodesic_distance", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.geodesic_distance", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.geodesic_distance", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.geodesic_distance"], ["", "", "def", "test_sim_geodesic_distance", "(", ")", ":", "\n", "    ", "config", "=", "get_config", "(", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "config", ".", "SIMULATOR", ".", "SCENE", ")", ":", "\n", "        ", "pytest", ".", "skip", "(", "\"Please download Habitat test data to data folder.\"", ")", "\n", "", "with", "make_sim", "(", "config", ".", "SIMULATOR", ".", "TYPE", ",", "config", "=", "config", ".", "SIMULATOR", ")", "as", "sim", ":", "\n", "        ", "sim", ".", "reset", "(", ")", "\n", "\n", "with", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "\n", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "\n", "\"data\"", ",", "\n", "\"test-sim-geodesic-distance-test-golden.json\"", ",", "\n", ")", ",", "\n", "\"r\"", ",", "\n", ")", "as", "f", ":", "\n", "            ", "test_data", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "for", "test_case", "in", "test_data", "[", "\"single_end\"", "]", ":", "\n", "            ", "assert", "np", ".", "isclose", "(", "\n", "sim", ".", "geodesic_distance", "(", "test_case", "[", "\"start\"", "]", ",", "test_case", "[", "\"end\"", "]", ")", ",", "\n", "test_case", "[", "\"expected\"", "]", ",", "\n", ")", ",", "\"Geodesic distance mechanism has been changed\"", "\n", "\n", "", "for", "test_case", "in", "test_data", "[", "\"multi_end\"", "]", ":", "\n", "            ", "assert", "np", ".", "isclose", "(", "\n", "sim", ".", "geodesic_distance", "(", "test_case", "[", "\"start\"", "]", ",", "test_case", "[", "\"ends\"", "]", ")", ",", "\n", "test_case", "[", "\"expected\"", "]", ",", "\n", ")", ",", "\"Geodesic distance mechanism has been changed\"", "\n", "\n", "assert", "np", ".", "isclose", "(", "\n", "sim", ".", "geodesic_distance", "(", "test_case", "[", "\"start\"", "]", ",", "test_case", "[", "\"ends\"", "]", ")", ",", "\n", "np", ".", "min", "(", "\n", "[", "\n", "sim", ".", "geodesic_distance", "(", "test_case", "[", "\"start\"", "]", ",", "end", ")", "\n", "for", "end", "in", "test_case", "[", "\"ends\"", "]", "\n", "]", "\n", ")", ",", "\n", ")", ",", "\"Geodesic distance for multi target setup isn't equal to separate single target calls.\"", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_habitat_task.test_task_actions": [[22, 48], ["habitat.get_config", "habitat.get_config.defrost", "habitat.get_config.freeze", "habitat.Env", "env.reset", "env.action_space.contains", "env.step", "env.sim.get_agent_state", "numpy.allclose", "numpy.allclose", "env.step", "numpy.array", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.contains", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.get_agent_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step"], ["def", "test_task_actions", "(", ")", ":", "\n", "    ", "config", "=", "habitat", ".", "get_config", "(", "config_paths", "=", "CFG_TEST", ")", "\n", "config", ".", "defrost", "(", ")", "\n", "config", ".", "TASK", ".", "POSSIBLE_ACTIONS", "=", "config", ".", "TASK", ".", "POSSIBLE_ACTIONS", "+", "[", "\"TELEPORT\"", "]", "\n", "config", ".", "freeze", "(", ")", "\n", "\n", "with", "habitat", ".", "Env", "(", "config", "=", "config", ")", "as", "env", ":", "\n", "        ", "env", ".", "reset", "(", ")", "\n", "action", "=", "{", "\n", "\"action\"", ":", "\"TELEPORT\"", ",", "\n", "\"action_args\"", ":", "{", "\n", "\"position\"", ":", "TELEPORT_POSITION", ",", "\n", "\"rotation\"", ":", "TELEPORT_ROTATION", ",", "\n", "}", ",", "\n", "}", "\n", "assert", "env", ".", "action_space", ".", "contains", "(", "action", ")", "\n", "env", ".", "step", "(", "action", ")", "\n", "agent_state", "=", "env", ".", "sim", ".", "get_agent_state", "(", ")", "\n", "assert", "np", ".", "allclose", "(", "\n", "np", ".", "array", "(", "TELEPORT_POSITION", ",", "dtype", "=", "np", ".", "float32", ")", ",", "agent_state", ".", "position", "\n", ")", ",", "\"mismatch in position after teleport\"", "\n", "assert", "np", ".", "allclose", "(", "\n", "np", ".", "array", "(", "TELEPORT_ROTATION", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "np", ".", "array", "(", "[", "*", "agent_state", ".", "rotation", ".", "imag", ",", "agent_state", ".", "rotation", ".", "real", "]", ")", ",", "\n", ")", ",", "\"mismatch in rotation after teleport\"", "\n", "env", ".", "step", "(", "\"TURN_RIGHT\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_habitat_task.test_task_actions_sampling_for_teleport": [[50, 69], ["habitat.get_config", "habitat.get_config.defrost", "habitat.get_config.freeze", "habitat.Env", "env.reset", "habitat.utils.test_utils.sample_non_stop_action", "env.action_space.contains", "habitat.logger.info", "env.step", "env.sim.get_agent_state", "habitat.logger.info"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.test_utils.sample_non_stop_action", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.contains", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.get_agent_state"], ["", "", "def", "test_task_actions_sampling_for_teleport", "(", ")", ":", "\n", "    ", "config", "=", "habitat", ".", "get_config", "(", "config_paths", "=", "CFG_TEST", ")", "\n", "config", ".", "defrost", "(", ")", "\n", "config", ".", "TASK", ".", "POSSIBLE_ACTIONS", "=", "config", ".", "TASK", ".", "POSSIBLE_ACTIONS", "+", "[", "\"TELEPORT\"", "]", "\n", "config", ".", "freeze", "(", ")", "\n", "\n", "with", "habitat", ".", "Env", "(", "config", "=", "config", ")", "as", "env", ":", "\n", "        ", "env", ".", "reset", "(", ")", "\n", "while", "not", "env", ".", "episode_over", ":", "\n", "            ", "action", "=", "sample_non_stop_action", "(", "env", ".", "action_space", ")", "\n", "assert", "env", ".", "action_space", ".", "contains", "(", "action", ")", "\n", "habitat", ".", "logger", ".", "info", "(", "\n", "f\"Action : \"", "\n", "f\"{action['action']}, \"", "\n", "f\"args: {action['action_args']}.\"", "\n", ")", "\n", "env", ".", "step", "(", "action", ")", "\n", "agent_state", "=", "env", ".", "sim", ".", "get_agent_state", "(", ")", "\n", "habitat", ".", "logger", ".", "info", "(", "agent_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_habitat_task.test_task_actions_sampling": [[71, 102], ["pytest.mark.parametrize", "habitat.get_config", "os.path.exists", "pytest.skip", "habitat.Env", "env.reset", "habitat.get_config.DATASET.DATA_PATH.format", "habitat.utils.test_utils.sample_non_stop_action", "env.action_space.contains", "habitat.logger.info", "env.step", "env.sim.get_agent_state", "habitat.logger.info"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.exists", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.test_utils.sample_non_stop_action", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.contains", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.get_agent_state"], ["", "", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"config_file\"", ",", "\n", "[", "\n", "CFG_TEST", ",", "\n", "\"configs/tasks/pointnav.yaml\"", ",", "\n", "\"configs/test/habitat_mp3d_eqa_test.yaml\"", ",", "\n", "]", ",", "\n", ")", "\n", "def", "test_task_actions_sampling", "(", "config_file", ")", ":", "\n", "    ", "config", "=", "habitat", ".", "get_config", "(", "config_paths", "=", "config_file", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "\n", "config", ".", "DATASET", ".", "DATA_PATH", ".", "format", "(", "split", "=", "config", ".", "DATASET", ".", "SPLIT", ")", "\n", ")", ":", "\n", "        ", "pytest", ".", "skip", "(", "\n", "f\"Please download dataset to data folder \"", "\n", "f\"{config.DATASET.DATA_PATH}.\"", "\n", ")", "\n", "\n", "", "with", "habitat", ".", "Env", "(", "config", "=", "config", ")", "as", "env", ":", "\n", "        ", "env", ".", "reset", "(", ")", "\n", "while", "not", "env", ".", "episode_over", ":", "\n", "            ", "action", "=", "sample_non_stop_action", "(", "env", ".", "action_space", ")", "\n", "assert", "env", ".", "action_space", ".", "contains", "(", "action", ")", "\n", "habitat", ".", "logger", ".", "info", "(", "\n", "f\"Action : \"", "\n", "f\"{action['action']}, \"", "\n", "f\"args: {action['action_args']}.\"", "\n", ")", "\n", "env", ".", "step", "(", "action", ")", "\n", "agent_state", "=", "env", ".", "sim", ".", "get_agent_state", "(", ")", "\n", "habitat", ".", "logger", ".", "info", "(", "agent_state", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_demo_notebook.test_demo_notebook": [[14, 30], ["habitat.get_config", "habitat.get_config.defrost", "habitat.datasets.pointnav.pointnav_dataset.PointNavDatasetV1.check_config_paths_exist", "pytest.skip", "pytest.main", "gc.collect"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pointnav.pointnav_dataset.PointNavDatasetV1.check_config_paths_exist", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.main"], ["def", "test_demo_notebook", "(", ")", ":", "\n", "    ", "config", "=", "habitat", ".", "get_config", "(", "\"configs/tasks/pointnav_mp3d.yaml\"", ")", "\n", "config", ".", "defrost", "(", ")", "\n", "config", ".", "DATASET", ".", "SPLIT", "=", "\"val\"", "\n", "\n", "if", "not", "PointNavDatasetV1", ".", "check_config_paths_exist", "(", "config", ".", "DATASET", ")", ":", "\n", "        ", "pytest", ".", "skip", "(", "\n", "\"Please download the Matterport3D PointNav val dataset and Matterport3D val scenes\"", "\n", ")", "\n", "", "else", ":", "\n", "        ", "pytest", ".", "main", "(", "[", "\"--nbval-lax\"", ",", "\"notebooks/habitat-lab-demo.ipynb\"", "]", ")", "\n", "\n", "# NB: Force a gc collect run as it can take a little bit for", "\n", "# the cleanup to happen after the notebook and we get", "\n", "# a double context crash!", "\n", "gc", ".", "collect", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.vln_reference_path_follower_example.save_map": [[28, 36], ["examples.shortest_path_follower_example.draw_top_down_map", "numpy.concatenate", "habitat.utils.visualizations.utils.append_text_to_image", "images.append"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.shortest_path_follower_example.draw_top_down_map", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.utils.append_text_to_image"], ["", "def", "save_map", "(", "observations", ",", "info", ",", "images", ")", ":", "\n", "    ", "im", "=", "observations", "[", "\"rgb\"", "]", "\n", "top_down_map", "=", "draw_top_down_map", "(", "info", ",", "im", ".", "shape", "[", "0", "]", ")", "\n", "output_im", "=", "np", ".", "concatenate", "(", "(", "im", ",", "top_down_map", ")", ",", "axis", "=", "1", ")", "\n", "output_im", "=", "append_text_to_image", "(", "\n", "output_im", ",", "observations", "[", "\"instruction\"", "]", "[", "\"text\"", "]", "\n", ")", "\n", "images", ".", "append", "(", "output_im", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.vln_reference_path_follower_example.reference_path_example": [[38, 92], ["habitat.get_config", "habitat.get_config.defrost", "habitat.get_config.TASK.MEASUREMENTS.append", "habitat.get_config.TASK.SENSORS.append", "habitat.get_config.freeze", "examples.shortest_path_follower_example.SimpleRLEnv", "habitat.tasks.nav.shortest_path_follower.ShortestPathFollower", "print", "range", "env.reset", "print", "os.path.join", "os.path.exists", "os.makedirs", "print", "habitat.utils.visualizations.utils.images_to_video", "shutil.rmtree", "str", "habitat.tasks.nav.shortest_path_follower.ShortestPathFollower.get_next_action", "env.step", "vln_reference_path_follower_example.save_map"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.exists", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.utils.images_to_video", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.shortest_path_follower.ShortestPathFollower.get_next_action", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.vln_reference_path_follower_example.save_map"], ["", "def", "reference_path_example", "(", "mode", ")", ":", "\n", "    ", "\"\"\"\n    Saves a video of a shortest path follower agent navigating from a start\n    position to a goal. Agent follows the ground truth reference path by\n    navigating to intermediate viewpoints en route to goal.\n    Args:\n        mode: 'geodesic_path' or 'greedy'\n    \"\"\"", "\n", "config", "=", "habitat", ".", "get_config", "(", "\n", "config_paths", "=", "\"configs/test/habitat_r2r_vln_test.yaml\"", "\n", ")", "\n", "config", ".", "defrost", "(", ")", "\n", "config", ".", "TASK", ".", "MEASUREMENTS", ".", "append", "(", "\"TOP_DOWN_MAP\"", ")", "\n", "config", ".", "TASK", ".", "SENSORS", ".", "append", "(", "\"HEADING_SENSOR\"", ")", "\n", "config", ".", "freeze", "(", ")", "\n", "with", "SimpleRLEnv", "(", "config", "=", "config", ")", "as", "env", ":", "\n", "        ", "follower", "=", "ShortestPathFollower", "(", "\n", "env", ".", "habitat_env", ".", "sim", ",", "goal_radius", "=", "0.5", ",", "return_one_hot", "=", "False", "\n", ")", "\n", "follower", ".", "mode", "=", "mode", "\n", "print", "(", "\"Environment creation successful\"", ")", "\n", "\n", "for", "episode", "in", "range", "(", "3", ")", ":", "\n", "            ", "env", ".", "reset", "(", ")", "\n", "episode_id", "=", "env", ".", "habitat_env", ".", "current_episode", ".", "episode_id", "\n", "print", "(", "\n", "f\"Agent stepping around inside environment. Episode id: {episode_id}\"", "\n", ")", "\n", "\n", "dirname", "=", "os", ".", "path", ".", "join", "(", "\n", "IMAGE_DIR", ",", "\"vln_reference_path_example\"", ",", "mode", ",", "\"%02d\"", "%", "episode", "\n", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "dirname", ")", ":", "\n", "                ", "shutil", ".", "rmtree", "(", "dirname", ")", "\n", "", "os", ".", "makedirs", "(", "dirname", ")", "\n", "\n", "images", "=", "[", "]", "\n", "steps", "=", "0", "\n", "reference_path", "=", "env", ".", "habitat_env", ".", "current_episode", ".", "reference_path", "+", "[", "\n", "env", ".", "habitat_env", ".", "current_episode", ".", "goals", "[", "0", "]", ".", "position", "\n", "]", "\n", "for", "point", "in", "reference_path", ":", "\n", "                ", "done", "=", "False", "\n", "while", "not", "done", ":", "\n", "                    ", "best_action", "=", "follower", ".", "get_next_action", "(", "point", ")", "\n", "if", "best_action", "==", "None", ":", "\n", "                        ", "break", "\n", "", "observations", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "best_action", ")", "\n", "save_map", "(", "observations", ",", "info", ",", "images", ")", "\n", "steps", "+=", "1", "\n", "\n", "", "", "print", "(", "f\"Navigated to goal in {steps} steps.\"", ")", "\n", "images_to_video", "(", "images", ",", "dirname", ",", "str", "(", "episode_id", ")", ")", "\n", "images", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.shortest_path_follower_example.SimpleRLEnv.get_reward_range": [[26, 28], ["None"], "methods", ["None"], ["    ", "def", "get_reward_range", "(", "self", ")", ":", "\n", "        ", "return", "[", "-", "1", ",", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.shortest_path_follower_example.SimpleRLEnv.get_reward": [[29, 31], ["None"], "methods", ["None"], ["", "def", "get_reward", "(", "self", ",", "observations", ")", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.shortest_path_follower_example.SimpleRLEnv.get_done": [[32, 34], ["None"], "methods", ["None"], ["", "def", "get_done", "(", "self", ",", "observations", ")", ":", "\n", "        ", "return", "self", ".", "habitat_env", ".", "episode_over", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.shortest_path_follower_example.SimpleRLEnv.get_info": [[35, 37], ["shortest_path_follower_example.SimpleRLEnv.habitat_env.get_metrics"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env.get_metrics"], ["", "def", "get_info", "(", "self", ",", "observations", ")", ":", "\n", "        ", "return", "self", ".", "habitat_env", ".", "get_metrics", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.shortest_path_follower_example.draw_top_down_map": [[39, 42], ["habitat.utils.visualizations.maps.colorize_draw_agent_and_fit_to_height"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.maps.colorize_draw_agent_and_fit_to_height"], ["", "", "def", "draw_top_down_map", "(", "info", ",", "output_size", ")", ":", "\n", "    ", "return", "maps", ".", "colorize_draw_agent_and_fit_to_height", "(", "\n", "info", "[", "\"top_down_map\"", "]", ",", "output_size", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.shortest_path_follower_example.shortest_path_example": [[45, 83], ["habitat.get_config", "habitat.get_config.defrost", "habitat.get_config.TASK.MEASUREMENTS.append", "habitat.get_config.freeze", "shortest_path_follower_example.SimpleRLEnv", "habitat.tasks.nav.shortest_path_follower.ShortestPathFollower", "print", "range", "env.reset", "os.path.join", "os.path.exists", "os.makedirs", "print", "habitat.utils.visualizations.utils.images_to_video", "print", "shutil.rmtree", "habitat.tasks.nav.shortest_path_follower.ShortestPathFollower.get_next_action", "env.step", "shortest_path_follower_example.draw_top_down_map", "numpy.concatenate", "images.append"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.exists", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.utils.images_to_video", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.shortest_path_follower.ShortestPathFollower.get_next_action", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.shortest_path_follower_example.draw_top_down_map"], ["", "def", "shortest_path_example", "(", ")", ":", "\n", "    ", "config", "=", "habitat", ".", "get_config", "(", "config_paths", "=", "\"configs/tasks/pointnav.yaml\"", ")", "\n", "config", ".", "defrost", "(", ")", "\n", "config", ".", "TASK", ".", "MEASUREMENTS", ".", "append", "(", "\"TOP_DOWN_MAP\"", ")", "\n", "config", ".", "freeze", "(", ")", "\n", "with", "SimpleRLEnv", "(", "config", "=", "config", ")", "as", "env", ":", "\n", "        ", "goal_radius", "=", "env", ".", "episodes", "[", "0", "]", ".", "goals", "[", "0", "]", ".", "radius", "\n", "if", "goal_radius", "is", "None", ":", "\n", "            ", "goal_radius", "=", "config", ".", "SIMULATOR", ".", "FORWARD_STEP_SIZE", "\n", "", "follower", "=", "ShortestPathFollower", "(", "\n", "env", ".", "habitat_env", ".", "sim", ",", "goal_radius", ",", "False", "\n", ")", "\n", "\n", "print", "(", "\"Environment creation successful\"", ")", "\n", "for", "episode", "in", "range", "(", "3", ")", ":", "\n", "            ", "env", ".", "reset", "(", ")", "\n", "dirname", "=", "os", ".", "path", ".", "join", "(", "\n", "IMAGE_DIR", ",", "\"shortest_path_example\"", ",", "\"%02d\"", "%", "episode", "\n", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "dirname", ")", ":", "\n", "                ", "shutil", ".", "rmtree", "(", "dirname", ")", "\n", "", "os", ".", "makedirs", "(", "dirname", ")", "\n", "print", "(", "\"Agent stepping around inside environment.\"", ")", "\n", "images", "=", "[", "]", "\n", "while", "not", "env", ".", "habitat_env", ".", "episode_over", ":", "\n", "                ", "best_action", "=", "follower", ".", "get_next_action", "(", "\n", "env", ".", "habitat_env", ".", "current_episode", ".", "goals", "[", "0", "]", ".", "position", "\n", ")", "\n", "if", "best_action", "is", "None", ":", "\n", "                    ", "break", "\n", "\n", "", "observations", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "best_action", ")", "\n", "im", "=", "observations", "[", "\"rgb\"", "]", "\n", "top_down_map", "=", "draw_top_down_map", "(", "info", ",", "im", ".", "shape", "[", "0", "]", ")", "\n", "output_im", "=", "np", ".", "concatenate", "(", "(", "im", ",", "top_down_map", ")", ",", "axis", "=", "1", ")", "\n", "images", ".", "append", "(", "output_im", ")", "\n", "", "images_to_video", "(", "images", ",", "dirname", ",", "\"trajectory\"", ")", "\n", "print", "(", "\"Episode finished\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.shortest_path_follower_example.main": [[85, 87], ["shortest_path_follower_example.shortest_path_example"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.shortest_path_follower_example.shortest_path_example"], ["", "", "", "def", "main", "(", ")", ":", "\n", "    ", "shortest_path_example", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.example.example": [[10, 25], ["habitat.Env", "print", "env.reset", "print", "print", "env.step", "habitat.get_config", "env.action_space.sample"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.sample"], ["def", "example", "(", ")", ":", "\n", "# Note: Use with for the example testing, doesn't need to be like this on the README", "\n", "\n", "    ", "with", "habitat", ".", "Env", "(", "\n", "config", "=", "habitat", ".", "get_config", "(", "\"configs/tasks/rearrange/pick.yaml\"", ")", "\n", ")", "as", "env", ":", "\n", "        ", "print", "(", "\"Environment creation successful\"", ")", "\n", "observations", "=", "env", ".", "reset", "(", ")", "# noqa: F841", "\n", "\n", "print", "(", "\"Agent acting inside environment.\"", ")", "\n", "count_steps", "=", "0", "\n", "while", "not", "env", ".", "episode_over", ":", "\n", "            ", "observations", "=", "env", ".", "step", "(", "env", ".", "action_space", ".", "sample", "(", ")", ")", "# noqa: F841", "\n", "count_steps", "+=", "1", "\n", "", "print", "(", "\"Episode finished after {} steps.\"", ".", "format", "(", "count_steps", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.example_pointnav.example": [[10, 25], ["habitat.Env", "print", "env.reset", "print", "print", "env.step", "habitat.get_config", "env.action_space.sample"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.sample"], ["def", "example", "(", ")", ":", "\n", "# Note: Use with for the example testing, doesn't need to be like this on the README", "\n", "\n", "    ", "with", "habitat", ".", "Env", "(", "\n", "config", "=", "habitat", ".", "get_config", "(", "\"configs/tasks/pointnav.yaml\"", ")", "\n", ")", "as", "env", ":", "\n", "        ", "print", "(", "\"Environment creation successful\"", ")", "\n", "observations", "=", "env", ".", "reset", "(", ")", "# noqa: F841", "\n", "\n", "print", "(", "\"Agent stepping around inside environment.\"", ")", "\n", "count_steps", "=", "0", "\n", "while", "not", "env", ".", "episode_over", ":", "\n", "            ", "observations", "=", "env", ".", "step", "(", "env", ".", "action_space", ".", "sample", "(", ")", ")", "# noqa: F841", "\n", "count_steps", "+=", "1", "\n", "", "print", "(", "\"Episode finished after {} steps.\"", ".", "format", "(", "count_steps", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.register_new_sensors_and_measures.EpisodeInfoExample.__init__": [[19, 24], ["habitat.Measure.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "sim", ",", "config", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "# This measure only needs the config", "\n", "        ", "self", ".", "_config", "=", "config", "\n", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.register_new_sensors_and_measures.EpisodeInfoExample._get_uuid": [[26, 28], ["None"], "methods", ["None"], ["", "def", "_get_uuid", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "str", ":", "\n", "        ", "return", "\"episode_info\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.register_new_sensors_and_measures.EpisodeInfoExample.reset_metric": [[30, 35], ["vars().copy", "vars"], "methods", ["None"], ["", "def", "reset_metric", "(", "self", ",", "*", "args", ":", "Any", ",", "episode", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "# Our measure always contains all the attributes of the episode", "\n", "        ", "self", ".", "_metric", "=", "vars", "(", "episode", ")", ".", "copy", "(", ")", "\n", "# But only on reset, it has an additional field of my_value", "\n", "self", ".", "_metric", "[", "\"my_value\"", "]", "=", "self", ".", "_config", ".", "VALUE", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.register_new_sensors_and_measures.EpisodeInfoExample.update_metric": [[37, 40], ["vars().copy", "vars"], "methods", ["None"], ["", "def", "update_metric", "(", "self", ",", "*", "args", ":", "Any", ",", "episode", ",", "action", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "# Now the measure will just have all the attributes of the episode", "\n", "        ", "self", ".", "_metric", "=", "vars", "(", "episode", ")", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.register_new_sensors_and_measures.AgentPositionSensor.__init__": [[46, 52], ["habitat.Sensor.__init__", "print"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "sim", ",", "config", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", "=", "config", ")", "\n", "\n", "self", ".", "_sim", "=", "sim", "\n", "# Prints out the answer to life on init", "\n", "print", "(", "\"The answer to life is\"", ",", "self", ".", "config", ".", "ANSWER_TO_LIFE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.register_new_sensors_and_measures.AgentPositionSensor._get_uuid": [[54, 56], ["None"], "methods", ["None"], ["", "def", "_get_uuid", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "str", ":", "\n", "        ", "return", "\"agent_position\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.register_new_sensors_and_measures.AgentPositionSensor._get_sensor_type": [[58, 60], ["None"], "methods", ["None"], ["", "def", "_get_sensor_type", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "return", "habitat", ".", "SensorTypes", ".", "POSITION", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.register_new_sensors_and_measures.AgentPositionSensor._get_observation_space": [[62, 68], ["gym.spaces.Box", "numpy.finfo", "numpy.finfo"], "methods", ["None"], ["", "def", "_get_observation_space", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "return", "spaces", ".", "Box", "(", "\n", "low", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "min", ",", "\n", "high", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "max", ",", "\n", "shape", "=", "(", "3", ",", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.register_new_sensors_and_measures.AgentPositionSensor.get_observation": [[71, 75], ["register_new_sensors_and_measures.AgentPositionSensor._sim.get_agent_state"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.get_agent_state"], ["", "def", "get_observation", "(", "\n", "self", ",", "observations", ",", "*", "args", ":", "Any", ",", "episode", ",", "**", "kwargs", ":", "Any", "\n", ")", ":", "\n", "        ", "return", "self", ".", "_sim", ".", "get_agent_state", "(", ")", ".", "position", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.register_new_sensors_and_measures.main": [[77, 105], ["habitat.get_config", "habitat.get_config.defrost", "habitat.Config", "habitat.get_config.TASK.MEASUREMENTS.append", "habitat.Config", "habitat.get_config.TASK.SENSORS.append", "habitat.get_config.freeze", "habitat.Env", "print", "print", "print", "print", "env.reset", "env.get_metrics", "env.step", "env.get_metrics"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env.get_metrics", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env.get_metrics"], ["", "", "def", "main", "(", ")", ":", "\n", "# Get the default config node", "\n", "    ", "config", "=", "habitat", ".", "get_config", "(", "config_paths", "=", "\"configs/tasks/pointnav.yaml\"", ")", "\n", "config", ".", "defrost", "(", ")", "\n", "\n", "# Add things to the config to for the measure", "\n", "config", ".", "TASK", ".", "EPISODE_INFO_EXAMPLE", "=", "habitat", ".", "Config", "(", ")", "\n", "# The type field is used to look-up the measure in the registry.", "\n", "# By default, the things are registered with the class name", "\n", "config", ".", "TASK", ".", "EPISODE_INFO_EXAMPLE", ".", "TYPE", "=", "\"EpisodeInfoExample\"", "\n", "config", ".", "TASK", ".", "EPISODE_INFO_EXAMPLE", ".", "VALUE", "=", "5", "\n", "# Add the measure to the list of measures in use", "\n", "config", ".", "TASK", ".", "MEASUREMENTS", ".", "append", "(", "\"EPISODE_INFO_EXAMPLE\"", ")", "\n", "\n", "# Now define the config for the sensor", "\n", "config", ".", "TASK", ".", "AGENT_POSITION_SENSOR", "=", "habitat", ".", "Config", "(", ")", "\n", "# Use the custom name", "\n", "config", ".", "TASK", ".", "AGENT_POSITION_SENSOR", ".", "TYPE", "=", "\"my_supercool_sensor\"", "\n", "config", ".", "TASK", ".", "AGENT_POSITION_SENSOR", ".", "ANSWER_TO_LIFE", "=", "42", "\n", "# Add the sensor to the list of sensors in use", "\n", "config", ".", "TASK", ".", "SENSORS", ".", "append", "(", "\"AGENT_POSITION_SENSOR\"", ")", "\n", "config", ".", "freeze", "(", ")", "\n", "\n", "with", "habitat", ".", "Env", "(", "config", "=", "config", ")", "as", "env", ":", "\n", "        ", "print", "(", "env", ".", "reset", "(", ")", "[", "\"agent_position\"", "]", ")", "\n", "print", "(", "env", ".", "get_metrics", "(", ")", "[", "\"episode_info\"", "]", ")", "\n", "print", "(", "env", ".", "step", "(", "\"MOVE_FORWARD\"", ")", "[", "\"agent_position\"", "]", ")", "\n", "print", "(", "env", ".", "get_metrics", "(", ")", "[", "\"episode_info\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.new_actions.NoisyStrafeLeft.__call__": [[63, 74], ["print", "new_actions._strafe_impl"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.new_actions._strafe_impl"], ["    ", "def", "__call__", "(", "\n", "self", ",", "\n", "scene_node", ":", "habitat_sim", ".", "SceneNode", ",", "\n", "actuation_spec", ":", "NoisyStrafeActuationSpec", ",", "\n", ")", ":", "\n", "        ", "print", "(", "f\"strafing left with noise_amount={actuation_spec.noise_amount}\"", ")", "\n", "_strafe_impl", "(", "\n", "scene_node", ",", "\n", "actuation_spec", ".", "move_amount", ",", "\n", "actuation_spec", ".", "strafe_angle", ",", "\n", "actuation_spec", ".", "noise_amount", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.new_actions.NoisyStrafeRight.__call__": [[79, 92], ["print", "new_actions._strafe_impl"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.new_actions._strafe_impl"], ["    ", "def", "__call__", "(", "\n", "self", ",", "\n", "scene_node", ":", "habitat_sim", ".", "SceneNode", ",", "\n", "actuation_spec", ":", "NoisyStrafeActuationSpec", ",", "\n", ")", ":", "\n", "        ", "print", "(", "\n", "f\"strafing right with noise_amount={actuation_spec.noise_amount}\"", "\n", ")", "\n", "_strafe_impl", "(", "\n", "scene_node", ",", "\n", "actuation_spec", ".", "move_amount", ",", "\n", "-", "actuation_spec", ".", "strafe_angle", ",", "\n", "actuation_spec", ".", "noise_amount", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.new_actions.NoNoiseStrafe.get": [[97, 110], ["super().get", "habitat_sim.ActionSpec", "habitat_sim.ActionSpec", "new_actions.NoisyStrafeActuationSpec", "new_actions.NoisyStrafeActuationSpec"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get"], ["    ", "def", "get", "(", "self", ")", ":", "\n", "        ", "config", "=", "super", "(", ")", ".", "get", "(", ")", "\n", "\n", "config", "[", "HabitatSimActions", ".", "STRAFE_LEFT", "]", "=", "habitat_sim", ".", "ActionSpec", "(", "\n", "\"noisy_strafe_left\"", ",", "\n", "NoisyStrafeActuationSpec", "(", "0.25", ",", "noise_amount", "=", "0.0", ")", ",", "\n", ")", "\n", "config", "[", "HabitatSimActions", ".", "STRAFE_RIGHT", "]", "=", "habitat_sim", ".", "ActionSpec", "(", "\n", "\"noisy_strafe_right\"", ",", "\n", "NoisyStrafeActuationSpec", "(", "0.25", ",", "noise_amount", "=", "0.0", ")", ",", "\n", ")", "\n", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.new_actions.NoiseStrafe.get": [[114, 127], ["super().get", "habitat_sim.ActionSpec", "habitat_sim.ActionSpec", "new_actions.NoisyStrafeActuationSpec", "new_actions.NoisyStrafeActuationSpec"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get"], ["    ", "def", "get", "(", "self", ")", ":", "\n", "        ", "config", "=", "super", "(", ")", ".", "get", "(", ")", "\n", "\n", "config", "[", "HabitatSimActions", ".", "STRAFE_LEFT", "]", "=", "habitat_sim", ".", "ActionSpec", "(", "\n", "\"noisy_strafe_left\"", ",", "\n", "NoisyStrafeActuationSpec", "(", "0.25", ",", "noise_amount", "=", "0.05", ")", ",", "\n", ")", "\n", "config", "[", "HabitatSimActions", ".", "STRAFE_RIGHT", "]", "=", "habitat_sim", ".", "ActionSpec", "(", "\n", "\"noisy_strafe_right\"", ",", "\n", "NoisyStrafeActuationSpec", "(", "0.25", ",", "noise_amount", "=", "0.05", ")", ",", "\n", ")", "\n", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.new_actions.StrafeLeft._get_uuid": [[131, 133], ["None"], "methods", ["None"], ["    ", "def", "_get_uuid", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "->", "str", ":", "\n", "        ", "return", "\"strafe_left\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.new_actions.StrafeLeft.step": [[134, 136], ["new_actions.StrafeLeft._sim.step"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step"], ["", "def", "step", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "_sim", ".", "step", "(", "HabitatSimActions", ".", "STRAFE_LEFT", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.new_actions.StrafeRight._get_uuid": [[140, 142], ["None"], "methods", ["None"], ["    ", "def", "_get_uuid", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "->", "str", ":", "\n", "        ", "return", "\"strafe_right\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.new_actions.StrafeRight.step": [[143, 145], ["new_actions.StrafeRight._sim.step"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step"], ["", "def", "step", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "_sim", ".", "step", "(", "HabitatSimActions", ".", "STRAFE_RIGHT", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.new_actions._strafe_impl": [[35, 59], ["numpy.deg2rad", "numpy.random.uniform", "habitat_sim.utils.quat_from_angle_axis", "habitat_sim.utils.quat_rotate_vector", "numpy.random.uniform", "scene_node.translate_local", "numpy.array", "scene_node.absolute_transformation().rotation_scaling", "scene_node.absolute_transformation"], "function", ["None"], ["", "def", "_strafe_impl", "(", "\n", "scene_node", ":", "habitat_sim", ".", "SceneNode", ",", "\n", "move_amount", ":", "float", ",", "\n", "strafe_angle", ":", "float", ",", "\n", "noise_amount", ":", "float", ",", "\n", ")", ":", "\n", "    ", "forward_ax", "=", "(", "\n", "np", ".", "array", "(", "scene_node", ".", "absolute_transformation", "(", ")", ".", "rotation_scaling", "(", ")", ")", "\n", "@", "habitat_sim", ".", "geo", ".", "FRONT", "\n", ")", "\n", "strafe_angle", "=", "np", ".", "deg2rad", "(", "strafe_angle", ")", "\n", "strafe_angle", "=", "np", ".", "random", ".", "uniform", "(", "\n", "(", "1", "-", "noise_amount", ")", "*", "strafe_angle", ",", "(", "1", "+", "noise_amount", ")", "*", "strafe_angle", "\n", ")", "\n", "\n", "rotation", "=", "habitat_sim", ".", "utils", ".", "quat_from_angle_axis", "(", "\n", "strafe_angle", ",", "habitat_sim", ".", "geo", ".", "UP", "\n", ")", "\n", "move_ax", "=", "habitat_sim", ".", "utils", ".", "quat_rotate_vector", "(", "rotation", ",", "forward_ax", ")", "\n", "\n", "move_amount", "=", "np", ".", "random", ".", "uniform", "(", "\n", "(", "1", "-", "noise_amount", ")", "*", "move_amount", ",", "(", "1", "+", "noise_amount", ")", "*", "move_amount", "\n", ")", "\n", "scene_node", ".", "translate_local", "(", "move_ax", "*", "move_amount", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.new_actions.main": [[147, 178], ["habitat.sims.habitat_simulator.actions.HabitatSimActions.extend_action_space", "habitat.sims.habitat_simulator.actions.HabitatSimActions.extend_action_space", "habitat.get_config", "habitat.get_config.defrost", "habitat.config.Config", "habitat.config.Config", "habitat.get_config.freeze", "habitat.get_config.defrost", "habitat.get_config.freeze", "habitat.Env", "env.reset", "env.step", "env.step", "habitat.Env", "env.reset", "env.step", "env.step"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.actions.HabitatSimActionsSingleton.extend_action_space", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.actions.HabitatSimActionsSingleton.extend_action_space", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "HabitatSimActions", ".", "extend_action_space", "(", "\"STRAFE_LEFT\"", ")", "\n", "HabitatSimActions", ".", "extend_action_space", "(", "\"STRAFE_RIGHT\"", ")", "\n", "\n", "config", "=", "habitat", ".", "get_config", "(", "config_paths", "=", "\"configs/tasks/pointnav.yaml\"", ")", "\n", "config", ".", "defrost", "(", ")", "\n", "\n", "config", ".", "TASK", ".", "POSSIBLE_ACTIONS", "=", "config", ".", "TASK", ".", "POSSIBLE_ACTIONS", "+", "[", "\n", "\"STRAFE_LEFT\"", ",", "\n", "\"STRAFE_RIGHT\"", ",", "\n", "]", "\n", "config", ".", "TASK", ".", "ACTIONS", ".", "STRAFE_LEFT", "=", "habitat", ".", "config", ".", "Config", "(", ")", "\n", "config", ".", "TASK", ".", "ACTIONS", ".", "STRAFE_LEFT", ".", "TYPE", "=", "\"StrafeLeft\"", "\n", "config", ".", "TASK", ".", "ACTIONS", ".", "STRAFE_RIGHT", "=", "habitat", ".", "config", ".", "Config", "(", ")", "\n", "config", ".", "TASK", ".", "ACTIONS", ".", "STRAFE_RIGHT", ".", "TYPE", "=", "\"StrafeRight\"", "\n", "config", ".", "SIMULATOR", ".", "ACTION_SPACE_CONFIG", "=", "\"NoNoiseStrafe\"", "\n", "config", ".", "freeze", "(", ")", "\n", "\n", "with", "habitat", ".", "Env", "(", "config", "=", "config", ")", "as", "env", ":", "\n", "        ", "env", ".", "reset", "(", ")", "\n", "env", ".", "step", "(", "\"STRAFE_LEFT\"", ")", "\n", "env", ".", "step", "(", "\"STRAFE_RIGHT\"", ")", "\n", "\n", "", "config", ".", "defrost", "(", ")", "\n", "config", ".", "SIMULATOR", ".", "ACTION_SPACE_CONFIG", "=", "\"NoiseStrafe\"", "\n", "config", ".", "freeze", "(", ")", "\n", "\n", "with", "habitat", ".", "Env", "(", "config", "=", "config", ")", "as", "env", ":", "\n", "        ", "env", ".", "reset", "(", ")", "\n", "env", ".", "step", "(", "\"STRAFE_LEFT\"", ")", "\n", "env", ".", "step", "(", "\"STRAFE_RIGHT\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.interactive_play.FreeCamHelper.__init__": [[236, 241], ["numpy.zeros", "numpy.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_is_free_cam_mode", "=", "False", "\n", "self", ".", "_last_pressed", "=", "0", "\n", "self", ".", "_free_rpy", "=", "np", ".", "zeros", "(", "3", ")", "\n", "self", ".", "_free_xyz", "=", "np", ".", "zeros", "(", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.interactive_play.FreeCamHelper.is_free_cam_mode": [[242, 245], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_free_cam_mode", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_is_free_cam_mode", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.interactive_play.FreeCamHelper.update": [[246, 299], ["pygame.key.get_pressed", "print", "numpy.zeros", "numpy.zeros", "habitat.tasks.rearrange.utils.euler_to_quat", "habitat.tasks.rearrange.utils.euler_to_quat", "magnum.Matrix4.from_", "env._sim.get_sensor_observations", "numpy.zeros", "numpy.zeros", "habitat.tasks.rearrange.utils.euler_to_quat.to_matrix", "habitat.tasks.rearrange.utils.euler_to_quat.to_matrix", "magnum.Vector3"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.euler_to_quat", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.euler_to_quat"], ["", "def", "update", "(", "self", ",", "env", ",", "step_result", ",", "update_idx", ")", ":", "\n", "        ", "keys", "=", "pygame", ".", "key", ".", "get_pressed", "(", ")", "\n", "if", "keys", "[", "pygame", ".", "K_z", "]", "and", "(", "update_idx", "-", "self", ".", "_last_pressed", ")", ">", "60", ":", "\n", "            ", "self", ".", "_is_free_cam_mode", "=", "not", "self", ".", "_is_free_cam_mode", "\n", "print", "(", "f\"Switching camera mode to {self._is_free_cam_mode}\"", ")", "\n", "self", ".", "_last_pressed", "=", "update_idx", "\n", "\n", "", "if", "self", ".", "_is_free_cam_mode", ":", "\n", "            ", "offset_rpy", "=", "np", ".", "zeros", "(", "3", ")", "\n", "if", "keys", "[", "pygame", ".", "K_u", "]", ":", "\n", "                ", "offset_rpy", "[", "1", "]", "+=", "1", "\n", "", "elif", "keys", "[", "pygame", ".", "K_o", "]", ":", "\n", "                ", "offset_rpy", "[", "1", "]", "-=", "1", "\n", "", "elif", "keys", "[", "pygame", ".", "K_i", "]", ":", "\n", "                ", "offset_rpy", "[", "2", "]", "+=", "1", "\n", "", "elif", "keys", "[", "pygame", ".", "K_k", "]", ":", "\n", "                ", "offset_rpy", "[", "2", "]", "-=", "1", "\n", "", "elif", "keys", "[", "pygame", ".", "K_j", "]", ":", "\n", "                ", "offset_rpy", "[", "0", "]", "+=", "1", "\n", "", "elif", "keys", "[", "pygame", ".", "K_l", "]", ":", "\n", "                ", "offset_rpy", "[", "0", "]", "-=", "1", "\n", "\n", "", "offset_xyz", "=", "np", ".", "zeros", "(", "3", ")", "\n", "if", "keys", "[", "pygame", ".", "K_q", "]", ":", "\n", "                ", "offset_xyz", "[", "1", "]", "+=", "1", "\n", "", "elif", "keys", "[", "pygame", ".", "K_e", "]", ":", "\n", "                ", "offset_xyz", "[", "1", "]", "-=", "1", "\n", "", "elif", "keys", "[", "pygame", ".", "K_w", "]", ":", "\n", "                ", "offset_xyz", "[", "2", "]", "+=", "1", "\n", "", "elif", "keys", "[", "pygame", ".", "K_s", "]", ":", "\n", "                ", "offset_xyz", "[", "2", "]", "-=", "1", "\n", "", "elif", "keys", "[", "pygame", ".", "K_a", "]", ":", "\n", "                ", "offset_xyz", "[", "0", "]", "+=", "1", "\n", "", "elif", "keys", "[", "pygame", ".", "K_d", "]", ":", "\n", "                ", "offset_xyz", "[", "0", "]", "-=", "1", "\n", "", "offset_rpy", "*=", "0.1", "\n", "offset_xyz", "*=", "0.1", "\n", "self", ".", "_free_rpy", "+=", "offset_rpy", "\n", "self", ".", "_free_xyz", "+=", "offset_xyz", "\n", "if", "keys", "[", "pygame", ".", "K_b", "]", ":", "\n", "                ", "self", ".", "_free_rpy", "=", "np", ".", "zeros", "(", "3", ")", "\n", "self", ".", "_free_xyz", "=", "np", ".", "zeros", "(", "3", ")", "\n", "\n", "", "quat", "=", "euler_to_quat", "(", "self", ".", "_free_rpy", ")", "\n", "trans", "=", "mn", ".", "Matrix4", ".", "from_", "(", "\n", "quat", ".", "to_matrix", "(", ")", ",", "mn", ".", "Vector3", "(", "*", "self", ".", "_free_xyz", ")", "\n", ")", "\n", "env", ".", "_sim", ".", "_sensors", "[", "\n", "\"robot_third_rgb\"", "\n", "]", ".", "_sensor_object", ".", "node", ".", "transformation", "=", "trans", "\n", "step_result", "=", "env", ".", "_sim", ".", "get_sensor_observations", "(", ")", "\n", "return", "step_result", "\n", "", "return", "step_result", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.interactive_play.step_env": [[73, 75], ["env.step"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step"], ["def", "step_env", "(", "env", ",", "action_name", ",", "action_args", ",", "args", ")", ":", "\n", "    ", "return", "env", ".", "step", "(", "{", "\"action\"", ":", "action_name", ",", "\"action_args\"", ":", "action_args", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.interactive_play.get_input_vel_ctlr": [[77, 222], ["pygame.key.get_pressed", "numpy.zeros", "numpy.zeros", "print", "interactive_play.step_env", "interactive_play.step_env", "isinstance", "print", "float", "print", "ValueError", "print", "float"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.hab2_bench.hab2_benchmark.HabDemoRunner.step_env", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.hab2_bench.hab2_benchmark.HabDemoRunner.step_env"], ["", "def", "get_input_vel_ctlr", "(", "\n", "skip_pygame", ",", "arm_action", ",", "g_args", ",", "prev_obs", ",", "env", ",", "not_block_input", "\n", ")", ":", "\n", "    ", "if", "skip_pygame", ":", "\n", "        ", "return", "step_env", "(", "env", ",", "\"EMPTY\"", ",", "{", "}", ",", "g_args", ")", ",", "None", ",", "False", "\n", "\n", "", "if", "\"ARM_ACTION\"", "in", "env", ".", "action_space", ".", "spaces", ":", "\n", "        ", "arm_action_space", "=", "env", ".", "action_space", ".", "spaces", "[", "\"ARM_ACTION\"", "]", ".", "spaces", "[", "\n", "\"arm_action\"", "\n", "]", "\n", "arm_ctrlr", "=", "env", ".", "task", ".", "actions", "[", "\"ARM_ACTION\"", "]", ".", "arm_ctrlr", "\n", "base_action", "=", "None", "\n", "", "else", ":", "\n", "        ", "arm_action_space", "=", "np", ".", "zeros", "(", "7", ")", "\n", "arm_ctrlr", "=", "None", "\n", "base_action", "=", "[", "0", ",", "0", "]", "\n", "\n", "", "if", "arm_action", "is", "None", ":", "\n", "        ", "arm_action", "=", "np", ".", "zeros", "(", "arm_action_space", ".", "shape", "[", "0", "]", ")", "\n", "given_arm_action", "=", "False", "\n", "", "else", ":", "\n", "        ", "given_arm_action", "=", "True", "\n", "\n", "", "end_ep", "=", "False", "\n", "magic_grasp", "=", "None", "\n", "\n", "keys", "=", "pygame", ".", "key", ".", "get_pressed", "(", ")", "\n", "\n", "if", "keys", "[", "pygame", ".", "K_ESCAPE", "]", ":", "\n", "        ", "return", "None", ",", "None", ",", "False", "\n", "", "elif", "keys", "[", "pygame", ".", "K_m", "]", ":", "\n", "        ", "end_ep", "=", "True", "\n", "", "elif", "keys", "[", "pygame", ".", "K_n", "]", ":", "\n", "        ", "env", ".", "_sim", ".", "navmesh_visualization", "=", "not", "env", ".", "_sim", ".", "navmesh_visualization", "\n", "\n", "", "if", "not_block_input", ":", "\n", "# Base control", "\n", "        ", "if", "keys", "[", "pygame", ".", "K_j", "]", ":", "\n", "# Left", "\n", "            ", "base_action", "=", "[", "0", ",", "1", "]", "\n", "", "elif", "keys", "[", "pygame", ".", "K_l", "]", ":", "\n", "# Right", "\n", "            ", "base_action", "=", "[", "0", ",", "-", "1", "]", "\n", "", "elif", "keys", "[", "pygame", ".", "K_k", "]", ":", "\n", "# Back", "\n", "            ", "base_action", "=", "[", "-", "1", ",", "0", "]", "\n", "", "elif", "keys", "[", "pygame", ".", "K_i", "]", ":", "\n", "# Forward", "\n", "            ", "base_action", "=", "[", "1", ",", "0", "]", "\n", "\n", "", "if", "arm_action_space", ".", "shape", "[", "0", "]", "==", "7", ":", "\n", "# Velocity control. A different key for each joint", "\n", "            ", "if", "keys", "[", "pygame", ".", "K_q", "]", ":", "\n", "                ", "arm_action", "[", "0", "]", "=", "1.0", "\n", "", "elif", "keys", "[", "pygame", ".", "K_1", "]", ":", "\n", "                ", "arm_action", "[", "0", "]", "=", "-", "1.0", "\n", "\n", "", "elif", "keys", "[", "pygame", ".", "K_w", "]", ":", "\n", "                ", "arm_action", "[", "1", "]", "=", "1.0", "\n", "", "elif", "keys", "[", "pygame", ".", "K_2", "]", ":", "\n", "                ", "arm_action", "[", "1", "]", "=", "-", "1.0", "\n", "\n", "", "elif", "keys", "[", "pygame", ".", "K_e", "]", ":", "\n", "                ", "arm_action", "[", "2", "]", "=", "1.0", "\n", "", "elif", "keys", "[", "pygame", ".", "K_3", "]", ":", "\n", "                ", "arm_action", "[", "2", "]", "=", "-", "1.0", "\n", "\n", "", "elif", "keys", "[", "pygame", ".", "K_r", "]", ":", "\n", "                ", "arm_action", "[", "3", "]", "=", "1.0", "\n", "", "elif", "keys", "[", "pygame", ".", "K_4", "]", ":", "\n", "                ", "arm_action", "[", "3", "]", "=", "-", "1.0", "\n", "\n", "", "elif", "keys", "[", "pygame", ".", "K_t", "]", ":", "\n", "                ", "arm_action", "[", "4", "]", "=", "1.0", "\n", "", "elif", "keys", "[", "pygame", ".", "K_5", "]", ":", "\n", "                ", "arm_action", "[", "4", "]", "=", "-", "1.0", "\n", "\n", "", "elif", "keys", "[", "pygame", ".", "K_y", "]", ":", "\n", "                ", "arm_action", "[", "5", "]", "=", "1.0", "\n", "", "elif", "keys", "[", "pygame", ".", "K_6", "]", ":", "\n", "                ", "arm_action", "[", "5", "]", "=", "-", "1.0", "\n", "\n", "", "elif", "keys", "[", "pygame", ".", "K_u", "]", ":", "\n", "                ", "arm_action", "[", "6", "]", "=", "1.0", "\n", "", "elif", "keys", "[", "pygame", ".", "K_7", "]", ":", "\n", "                ", "arm_action", "[", "6", "]", "=", "-", "1.0", "\n", "", "", "elif", "isinstance", "(", "arm_ctrlr", ",", "ArmEEAction", ")", ":", "\n", "            ", "EE_FACTOR", "=", "0.5", "\n", "# End effector control", "\n", "if", "keys", "[", "pygame", ".", "K_d", "]", ":", "\n", "                ", "arm_action", "[", "1", "]", "-=", "EE_FACTOR", "\n", "", "elif", "keys", "[", "pygame", ".", "K_a", "]", ":", "\n", "                ", "arm_action", "[", "1", "]", "+=", "EE_FACTOR", "\n", "", "elif", "keys", "[", "pygame", ".", "K_w", "]", ":", "\n", "                ", "arm_action", "[", "0", "]", "+=", "EE_FACTOR", "\n", "", "elif", "keys", "[", "pygame", ".", "K_s", "]", ":", "\n", "                ", "arm_action", "[", "0", "]", "-=", "EE_FACTOR", "\n", "", "elif", "keys", "[", "pygame", ".", "K_q", "]", ":", "\n", "                ", "arm_action", "[", "2", "]", "+=", "EE_FACTOR", "\n", "", "elif", "keys", "[", "pygame", ".", "K_e", "]", ":", "\n", "                ", "arm_action", "[", "2", "]", "-=", "EE_FACTOR", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unrecognized arm action space\"", ")", "\n", "\n", "", "if", "keys", "[", "pygame", ".", "K_p", "]", ":", "\n", "            ", "print", "(", "\"[play.py]: Unsnapping\"", ")", "\n", "# Unsnap", "\n", "magic_grasp", "=", "-", "1", "\n", "", "elif", "keys", "[", "pygame", ".", "K_o", "]", ":", "\n", "# Snap", "\n", "            ", "print", "(", "\"[play.py]: Snapping\"", ")", "\n", "magic_grasp", "=", "1", "\n", "\n", "", "", "if", "keys", "[", "pygame", ".", "K_PERIOD", "]", ":", "\n", "# Print the current position of the robot, useful for debugging.", "\n", "        ", "pos", "=", "[", "float", "(", "\"%.3f\"", "%", "x", ")", "for", "x", "in", "env", ".", "_sim", ".", "robot", ".", "sim_obj", ".", "translation", "]", "\n", "rot", "=", "env", ".", "_sim", ".", "robot", ".", "sim_obj", ".", "rotation", "\n", "ee_pos", "=", "env", ".", "_sim", ".", "robot", ".", "ee_transform", ".", "translation", "\n", "print", "(", "f\"Robot state: pos = {pos}, rotation = {rot}, ee_pos = {ee_pos}\"", ")", "\n", "", "elif", "keys", "[", "pygame", ".", "K_COMMA", "]", ":", "\n", "# Print the current arm state of the robot, useful for debugging.", "\n", "        ", "joint_state", "=", "[", "float", "(", "\"%.3f\"", "%", "x", ")", "for", "x", "in", "env", ".", "_sim", ".", "robot", ".", "arm_joint_pos", "]", "\n", "print", "(", "f\"Robot arm joint state: {joint_state}\"", ")", "\n", "\n", "", "args", "=", "{", "}", "\n", "if", "base_action", "is", "not", "None", "and", "\"BASE_VELOCITY\"", "in", "env", ".", "action_space", ".", "spaces", ":", "\n", "        ", "name", "=", "\"BASE_VELOCITY\"", "\n", "args", "=", "{", "\"base_vel\"", ":", "base_action", "}", "\n", "", "else", ":", "\n", "        ", "name", "=", "\"ARM_ACTION\"", "\n", "if", "given_arm_action", ":", "\n", "# The grip is also contained in the provided action", "\n", "            ", "args", "=", "{", "\n", "\"arm_action\"", ":", "arm_action", "[", ":", "-", "1", "]", ",", "\n", "\"grip_action\"", ":", "arm_action", "[", "-", "1", "]", ",", "\n", "}", "\n", "", "else", ":", "\n", "            ", "args", "=", "{", "\"arm_action\"", ":", "arm_action", ",", "\"grip_action\"", ":", "magic_grasp", "}", "\n", "\n", "", "", "if", "magic_grasp", "is", "None", ":", "\n", "        ", "arm_action", "=", "[", "*", "arm_action", ",", "0.0", "]", "\n", "", "else", ":", "\n", "        ", "arm_action", "=", "[", "*", "arm_action", ",", "magic_grasp", "]", "\n", "\n", "", "return", "step_env", "(", "env", ",", "name", ",", "args", ",", "g_args", ")", ",", "arm_action", ",", "end_ep", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.interactive_play.get_wrapped_prop": [[224, 233], ["hasattr", "getattr", "hasattr", "interactive_play.get_wrapped_prop", "hasattr", "interactive_play.get_wrapped_prop"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.interactive_play.get_wrapped_prop", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.interactive_play.get_wrapped_prop"], ["", "def", "get_wrapped_prop", "(", "venv", ",", "prop", ")", ":", "\n", "    ", "if", "hasattr", "(", "venv", ",", "prop", ")", ":", "\n", "        ", "return", "getattr", "(", "venv", ",", "prop", ")", "\n", "", "elif", "hasattr", "(", "venv", ",", "\"venv\"", ")", ":", "\n", "        ", "return", "get_wrapped_prop", "(", "venv", ".", "venv", ",", "prop", ")", "\n", "", "elif", "hasattr", "(", "venv", ",", "\"env\"", ")", ":", "\n", "        ", "return", "get_wrapped_prop", "(", "venv", ".", "env", ",", "prop", ")", "\n", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.interactive_play.play_env": [[301, 433], ["env.reset", "time.time", "interactive_play.FreeCamHelper", "habitat.utils.visualizations.utils.observations_to_image", "pygame.init", "pygame.display.set_mode", "interactive_play.get_input_vel_ctlr", "all_arm_actions.append", "env.get_metrics", "time.time", "max", "time.sleep", "os.makedirs", "os.makedirs", "os.join", "print", "pygame.quit", "numpy.array", "numpy.transpose", "os.makedirs", "os.makedirs", "habitat_sim.utils.viz_utils.make_video", "pygame.quit", "open", "numpy.load", "print", "env.reset", "interactive_play.FreeCamHelper.update", "len", "numpy.zeros", "habitat.utils.visualizations.utils.observations_to_image", "habitat.utils.render_wrapper.overlay_frame", "numpy.transpose", "pygame.surfarray.make_surface", "pygame.display.set_mode.blit", "pygame.display.update", "np.transpose.append", "pygame.event.pump", "env.reset", "len", "ValueError", "numpy.array", "open", "numpy.save", "numpy.expand_dims", "os.join", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.utils.observations_to_image", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.interactive_play.get_input_vel_ctlr", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env.get_metrics", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.load", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.il.metrics.Metric.update", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.utils.observations_to_image", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.render_wrapper.overlay_frame", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.il.metrics.Metric.update", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.save"], ["", "", "def", "play_env", "(", "env", ",", "args", ",", "config", ")", ":", "\n", "    ", "render_steps_limit", "=", "None", "\n", "if", "args", ".", "no_render", ":", "\n", "        ", "render_steps_limit", "=", "DEFAULT_RENDER_STEPS_LIMIT", "\n", "\n", "", "use_arm_actions", "=", "None", "\n", "if", "args", ".", "load_actions", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "args", ".", "load_actions", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "use_arm_actions", "=", "np", ".", "load", "(", "f", ")", "\n", "print", "(", "\"Loaded arm actions\"", ")", "\n", "\n", "", "", "obs", "=", "env", ".", "reset", "(", ")", "\n", "\n", "if", "not", "args", ".", "no_render", ":", "\n", "        ", "draw_obs", "=", "observations_to_image", "(", "obs", ",", "{", "}", ")", "\n", "pygame", ".", "init", "(", ")", "\n", "screen", "=", "pygame", ".", "display", ".", "set_mode", "(", "\n", "[", "draw_obs", ".", "shape", "[", "1", "]", ",", "draw_obs", ".", "shape", "[", "0", "]", "]", "\n", ")", "\n", "\n", "", "update_idx", "=", "0", "\n", "target_fps", "=", "60.0", "\n", "prev_time", "=", "time", ".", "time", "(", ")", "\n", "all_obs", "=", "[", "]", "\n", "total_reward", "=", "0", "\n", "all_arm_actions", "=", "[", "]", "\n", "\n", "free_cam", "=", "FreeCamHelper", "(", ")", "\n", "\n", "while", "True", ":", "\n", "        ", "if", "(", "\n", "args", ".", "save_actions", "\n", "and", "len", "(", "all_arm_actions", ")", ">", "args", ".", "save_actions_count", "\n", ")", ":", "\n", "# quit the application when the action recording queue is full", "\n", "            ", "break", "\n", "", "if", "render_steps_limit", "is", "not", "None", "and", "update_idx", ">", "render_steps_limit", ":", "\n", "            ", "break", "\n", "\n", "", "step_result", ",", "arm_action", ",", "end_ep", "=", "get_input_vel_ctlr", "(", "\n", "args", ".", "no_render", ",", "\n", "use_arm_actions", "[", "update_idx", "]", "\n", "if", "use_arm_actions", "is", "not", "None", "\n", "else", "None", ",", "\n", "args", ",", "\n", "obs", ",", "\n", "env", ",", "\n", "not", "free_cam", ".", "is_free_cam_mode", ",", "\n", ")", "\n", "if", "step_result", "is", "None", ":", "\n", "            ", "break", "\n", "\n", "", "if", "end_ep", ":", "\n", "            ", "total_reward", "=", "0", "\n", "env", ".", "reset", "(", ")", "\n", "\n", "", "if", "not", "args", ".", "no_render", ":", "\n", "            ", "step_result", "=", "free_cam", ".", "update", "(", "env", ",", "step_result", ",", "update_idx", ")", "\n", "\n", "", "all_arm_actions", ".", "append", "(", "arm_action", ")", "\n", "update_idx", "+=", "1", "\n", "if", "use_arm_actions", "is", "not", "None", "and", "update_idx", ">=", "len", "(", "use_arm_actions", ")", ":", "\n", "            ", "break", "\n", "\n", "", "obs", "=", "step_result", "\n", "info", "=", "env", ".", "get_metrics", "(", ")", "\n", "reward_key", "=", "[", "k", "for", "k", "in", "info", "if", "\"reward\"", "in", "k", "]", "\n", "if", "len", "(", "reward_key", ")", ">", "0", ":", "\n", "            ", "reward", "=", "info", "[", "reward_key", "[", "0", "]", "]", "\n", "", "else", ":", "\n", "            ", "reward", "=", "0.0", "\n", "\n", "", "total_reward", "+=", "reward", "\n", "info", "[", "\"Total Reward\"", "]", "=", "total_reward", "\n", "\n", "if", "free_cam", ".", "is_free_cam_mode", ":", "\n", "            ", "cam", "=", "obs", "[", "\"robot_third_rgb\"", "]", "\n", "use_ob", "=", "np", ".", "zeros", "(", "draw_obs", ".", "shape", ")", "\n", "use_ob", "[", ":", ",", ":", "cam", ".", "shape", "[", "1", "]", "]", "=", "cam", "[", ":", ",", ":", ",", ":", "3", "]", "\n", "\n", "", "else", ":", "\n", "            ", "use_ob", "=", "observations_to_image", "(", "obs", ",", "info", ")", "\n", "use_ob", "=", "overlay_frame", "(", "use_ob", ",", "info", ")", "\n", "\n", "", "draw_ob", "=", "use_ob", "[", ":", "]", "\n", "\n", "if", "not", "args", ".", "no_render", ":", "\n", "            ", "draw_ob", "=", "np", ".", "transpose", "(", "draw_ob", ",", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "draw_obuse_ob", "=", "pygame", ".", "surfarray", ".", "make_surface", "(", "draw_ob", ")", "\n", "screen", ".", "blit", "(", "draw_obuse_ob", ",", "(", "0", ",", "0", ")", ")", "\n", "pygame", ".", "display", ".", "update", "(", ")", "\n", "", "if", "args", ".", "save_obs", ":", "\n", "            ", "all_obs", ".", "append", "(", "draw_ob", ")", "\n", "\n", "", "if", "not", "args", ".", "no_render", ":", "\n", "            ", "pygame", ".", "event", ".", "pump", "(", ")", "\n", "", "if", "env", ".", "episode_over", ":", "\n", "            ", "total_reward", "=", "0", "\n", "env", ".", "reset", "(", ")", "\n", "\n", "", "curr_time", "=", "time", ".", "time", "(", ")", "\n", "diff", "=", "curr_time", "-", "prev_time", "\n", "delay", "=", "max", "(", "1.0", "/", "target_fps", "-", "diff", ",", "0", ")", "\n", "time", ".", "sleep", "(", "delay", ")", "\n", "prev_time", "=", "curr_time", "\n", "\n", "", "if", "args", ".", "save_actions", ":", "\n", "        ", "if", "len", "(", "all_arm_actions", ")", "<", "args", ".", "save_actions_count", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "f\"Only did {len(all_arm_actions)} actions but {args.save_actions_count} are required\"", "\n", ")", "\n", "", "all_arm_actions", "=", "np", ".", "array", "(", "all_arm_actions", ")", "[", ":", "args", ".", "save_actions_count", "]", "\n", "os", ".", "makedirs", "(", "SAVE_ACTIONS_DIR", ",", "exist_ok", "=", "True", ")", "\n", "save_path", "=", "osp", ".", "join", "(", "SAVE_ACTIONS_DIR", ",", "args", ".", "save_actions_fname", ")", "\n", "with", "open", "(", "save_path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "np", ".", "save", "(", "f", ",", "all_arm_actions", ")", "\n", "", "print", "(", "f\"Saved actions to {save_path}\"", ")", "\n", "pygame", ".", "quit", "(", ")", "\n", "return", "\n", "\n", "", "if", "args", ".", "save_obs", ":", "\n", "        ", "all_obs", "=", "np", ".", "array", "(", "all_obs", ")", "\n", "all_obs", "=", "np", ".", "transpose", "(", "all_obs", ",", "(", "0", ",", "2", ",", "1", ",", "3", ")", ")", "\n", "os", ".", "makedirs", "(", "SAVE_VIDEO_DIR", ",", "exist_ok", "=", "True", ")", "\n", "vut", ".", "make_video", "(", "\n", "np", ".", "expand_dims", "(", "all_obs", ",", "1", ")", ",", "\n", "0", ",", "\n", "\"color\"", ",", "\n", "osp", ".", "join", "(", "SAVE_VIDEO_DIR", ",", "args", ".", "save_obs_fname", ")", ",", "\n", ")", "\n", "", "if", "not", "args", ".", "no_render", ":", "\n", "        ", "pygame", ".", "quit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.interactive_play.has_pygame": [[435, 437], ["None"], "function", ["None"], ["", "", "def", "has_pygame", "(", ")", ":", "\n", "    ", "return", "pygame", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.benchmark.ForwardOnlyAgent.reset": [[14, 16], ["None"], "methods", ["None"], ["    ", "def", "reset", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.benchmark.ForwardOnlyAgent.act": [[17, 20], ["None"], "methods", ["None"], ["", "def", "act", "(", "self", ",", "observations", ")", ":", "\n", "        ", "action", "=", "HabitatSimActions", ".", "MOVE_FORWARD", "\n", "return", "{", "\"action\"", ":", "action", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.benchmark.main": [[22, 35], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "benchmark.ForwardOnlyAgent", "habitat.Benchmark", "habitat.Benchmark.evaluate", "benchmark.evaluate.items", "print"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.benchmark_gym.BenchmarkGym.evaluate"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--task-config\"", ",", "type", "=", "str", ",", "default", "=", "\"configs/tasks/pointnav.yaml\"", "\n", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "agent", "=", "ForwardOnlyAgent", "(", ")", "\n", "benchmark", "=", "habitat", ".", "Benchmark", "(", "args", ".", "task_config", ")", "\n", "metrics", "=", "benchmark", ".", "evaluate", "(", "agent", ",", "num_episodes", "=", "10", ")", "\n", "\n", "for", "k", ",", "v", "in", "metrics", ".", "items", "(", ")", ":", "\n", "        ", "print", "(", "\"{}: {:.3f}\"", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.visualization_examples.example_pointnav_draw_target_birdseye_view": [[22, 45], ["habitat.tasks.nav.nav.NavigationGoal", "numpy.array", "habitat.tasks.nav.nav.NavigationEpisode", "habitat.utils.visualizations.maps.pointnav_draw_target_birdseye_view", "imageio.imsave", "numpy.asarray", "os.path.join"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.maps.pointnav_draw_target_birdseye_view"], ["", "def", "example_pointnav_draw_target_birdseye_view", "(", ")", ":", "\n", "    ", "goal_radius", "=", "0.5", "\n", "goal", "=", "NavigationGoal", "(", "position", "=", "[", "10", ",", "0.25", ",", "10", "]", ",", "radius", "=", "goal_radius", ")", "\n", "agent_position", "=", "np", ".", "array", "(", "[", "0", ",", "0.25", ",", "0", "]", ")", "\n", "agent_rotation", "=", "-", "np", ".", "pi", "/", "4", "\n", "\n", "dummy_episode", "=", "NavigationEpisode", "(", "\n", "goals", "=", "[", "goal", "]", ",", "\n", "episode_id", "=", "\"dummy_id\"", ",", "\n", "scene_id", "=", "\"dummy_scene\"", ",", "\n", "start_position", "=", "agent_position", ",", "\n", "start_rotation", "=", "agent_rotation", ",", "\n", ")", "\n", "target_image", "=", "maps", ".", "pointnav_draw_target_birdseye_view", "(", "\n", "agent_position", ",", "\n", "agent_rotation", ",", "\n", "np", ".", "asarray", "(", "dummy_episode", ".", "goals", "[", "0", "]", ".", "position", ")", ",", "\n", "goal_radius", "=", "dummy_episode", ".", "goals", "[", "0", "]", ".", "radius", ",", "\n", "agent_radius_px", "=", "25", ",", "\n", ")", "\n", "\n", "imageio", ".", "imsave", "(", "\n", "os", ".", "path", ".", "join", "(", "IMAGE_DIR", ",", "\"pointnav_target_image.png\"", ")", ",", "target_image", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.visualization_examples.example_pointnav_draw_target_birdseye_view_agent_on_border": [[48, 79], ["habitat.tasks.nav.nav.NavigationGoal", "numpy.array", "habitat.tasks.nav.nav.NavigationEpisode", "habitat.utils.visualizations.maps.pointnav_draw_target_birdseye_view", "imageio.imsave", "numpy.bitwise_xor", "numpy.asarray", "os.path.join"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.maps.pointnav_draw_target_birdseye_view"], ["", "def", "example_pointnav_draw_target_birdseye_view_agent_on_border", "(", ")", ":", "\n", "    ", "goal_radius", "=", "0.5", "\n", "goal", "=", "NavigationGoal", "(", "position", "=", "[", "0", ",", "0.25", ",", "0", "]", ",", "radius", "=", "goal_radius", ")", "\n", "ii", "=", "0", "\n", "for", "x_edge", "in", "[", "-", "1", ",", "0", ",", "1", "]", ":", "\n", "        ", "for", "y_edge", "in", "[", "-", "1", ",", "0", ",", "1", "]", ":", "\n", "            ", "if", "not", "np", ".", "bitwise_xor", "(", "x_edge", "==", "0", ",", "y_edge", "==", "0", ")", ":", "\n", "                ", "continue", "\n", "", "ii", "+=", "1", "\n", "agent_position", "=", "np", ".", "array", "(", "[", "7.8", "*", "x_edge", ",", "0.25", ",", "7.8", "*", "y_edge", "]", ")", "\n", "agent_rotation", "=", "np", ".", "pi", "/", "2", "\n", "\n", "dummy_episode", "=", "NavigationEpisode", "(", "\n", "goals", "=", "[", "goal", "]", ",", "\n", "episode_id", "=", "\"dummy_id\"", ",", "\n", "scene_id", "=", "\"dummy_scene\"", ",", "\n", "start_position", "=", "agent_position", ",", "\n", "start_rotation", "=", "agent_rotation", ",", "\n", ")", "\n", "target_image", "=", "maps", ".", "pointnav_draw_target_birdseye_view", "(", "\n", "agent_position", ",", "\n", "agent_rotation", ",", "\n", "np", ".", "asarray", "(", "dummy_episode", ".", "goals", "[", "0", "]", ".", "position", ")", ",", "\n", "goal_radius", "=", "dummy_episode", ".", "goals", "[", "0", "]", ".", "radius", ",", "\n", "agent_radius_px", "=", "25", ",", "\n", ")", "\n", "imageio", ".", "imsave", "(", "\n", "os", ".", "path", ".", "join", "(", "\n", "IMAGE_DIR", ",", "\"pointnav_target_image_edge_%d.png\"", "%", "ii", "\n", ")", ",", "\n", "target_image", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.visualization_examples.example_get_topdown_map": [[82, 98], ["habitat.get_config", "habitat.make_dataset", "habitat.Env", "env.reset", "habitat.utils.visualizations.maps.get_topdown_map_from_sim", "numpy.array", "imageio.imsave", "os.path.join"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.registration.make_dataset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.maps.get_topdown_map_from_sim"], ["", "", "", "def", "example_get_topdown_map", "(", ")", ":", "\n", "    ", "config", "=", "habitat", ".", "get_config", "(", "config_paths", "=", "\"configs/tasks/pointnav.yaml\"", ")", "\n", "dataset", "=", "habitat", ".", "make_dataset", "(", "\n", "id_dataset", "=", "config", ".", "DATASET", ".", "TYPE", ",", "config", "=", "config", ".", "DATASET", "\n", ")", "\n", "with", "habitat", ".", "Env", "(", "config", "=", "config", ",", "dataset", "=", "dataset", ")", "as", "env", ":", "\n", "        ", "env", ".", "reset", "(", ")", "\n", "top_down_map", "=", "maps", ".", "get_topdown_map_from_sim", "(", "\n", "env", ".", "sim", ",", "map_resolution", "=", "1024", "\n", ")", "\n", "recolor_map", "=", "np", ".", "array", "(", "\n", "[", "[", "255", ",", "255", ",", "255", "]", ",", "[", "128", ",", "128", ",", "128", "]", ",", "[", "0", ",", "0", ",", "0", "]", "]", ",", "dtype", "=", "np", ".", "uint8", "\n", ")", "\n", "top_down_map", "=", "recolor_map", "[", "top_down_map", "]", "\n", "imageio", ".", "imsave", "(", "\n", "os", ".", "path", ".", "join", "(", "IMAGE_DIR", ",", "\"top_down_map.png\"", ")", ",", "top_down_map", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.visualization_examples.main": [[101, 105], ["visualization_examples.example_pointnav_draw_target_birdseye_view", "visualization_examples.example_get_topdown_map", "visualization_examples.example_pointnav_draw_target_birdseye_view_agent_on_border"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.visualization_examples.example_pointnav_draw_target_birdseye_view", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.visualization_examples.example_get_topdown_map", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.visualization_examples.example_pointnav_draw_target_birdseye_view_agent_on_border"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "example_pointnav_draw_target_birdseye_view", "(", ")", "\n", "example_get_topdown_map", "(", ")", "\n", "example_pointnav_draw_target_birdseye_view_agent_on_border", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.vln_benchmark.reference_path_benchmark": [[17, 59], ["habitat.Env", "habitat.tasks.nav.shortest_path_follower.ShortestPathFollower", "collections.defaultdict", "range", "len", "env.reset", "env.get_metrics().items", "agg_metrics.items", "habitat.tasks.nav.shortest_path_follower.ShortestPathFollower.get_next_action", "env.step", "habitat.tasks.nav.shortest_path_follower.ShortestPathFollower.get_next_action", "env.step", "env.get_metrics"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.shortest_path_follower.ShortestPathFollower.get_next_action", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.shortest_path_follower.ShortestPathFollower.get_next_action", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env.get_metrics"], ["def", "reference_path_benchmark", "(", "config", ",", "num_episodes", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Custom benchmark for the reference path agent because it requires access\n    to habitat_env during each episode. Agent follows the ground truth\n    reference path by navigating to intermediate viewpoints en route to goal.\n    Args:\n        config: Config\n        num_episodes: Count of episodes to evaluate on.\n    \"\"\"", "\n", "with", "habitat", ".", "Env", "(", "config", "=", "config", ")", "as", "env", ":", "\n", "        ", "if", "num_episodes", "is", "None", ":", "\n", "            ", "num_episodes", "=", "len", "(", "env", ".", "episodes", ")", "\n", "\n", "", "follower", "=", "ShortestPathFollower", "(", "\n", "env", ".", "sim", ",", "goal_radius", "=", "0.5", ",", "return_one_hot", "=", "False", "\n", ")", "\n", "follower", ".", "mode", "=", "\"geodesic_path\"", "\n", "\n", "agg_metrics", ":", "Dict", "=", "defaultdict", "(", "float", ")", "\n", "for", "_", "in", "range", "(", "num_episodes", ")", ":", "\n", "            ", "env", ".", "reset", "(", ")", "\n", "\n", "for", "point", "in", "env", ".", "current_episode", ".", "reference_path", ":", "\n", "                ", "while", "not", "env", ".", "episode_over", ":", "\n", "                    ", "best_action", "=", "follower", ".", "get_next_action", "(", "point", ")", "\n", "if", "best_action", "==", "None", ":", "\n", "                        ", "break", "\n", "", "env", ".", "step", "(", "best_action", ")", "\n", "\n", "", "", "while", "not", "env", ".", "episode_over", ":", "\n", "                ", "best_action", "=", "follower", ".", "get_next_action", "(", "\n", "env", ".", "current_episode", ".", "goals", "[", "0", "]", ".", "position", "\n", ")", "\n", "if", "best_action", "==", "None", ":", "\n", "                    ", "best_action", "=", "HabitatSimActions", ".", "STOP", "\n", "", "env", ".", "step", "(", "best_action", ")", "\n", "\n", "", "for", "m", ",", "v", "in", "env", ".", "get_metrics", "(", ")", ".", "items", "(", ")", ":", "\n", "                ", "agg_metrics", "[", "m", "]", "+=", "v", "\n", "\n", "", "", "", "avg_metrics", "=", "{", "k", ":", "v", "/", "num_episodes", "for", "k", ",", "v", "in", "agg_metrics", ".", "items", "(", ")", "}", "\n", "return", "avg_metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.vln_benchmark.main": [[61, 74], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "habitat.config.default.get_config", "vln_benchmark.reference_path_benchmark", "print", "reference_path_benchmark.items", "print"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.examples.vln_benchmark.reference_path_benchmark"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--task-config\"", ",", "type", "=", "str", ",", "default", "=", "\"configs/tasks/vln_r2r.yaml\"", "\n", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "config", "=", "get_config", "(", "args", ".", "task_config", ")", "\n", "\n", "metrics", "=", "reference_path_benchmark", "(", "config", ",", "num_episodes", "=", "10", ")", "\n", "\n", "print", "(", "\"Benchmark for Reference Path Follower agent:\"", ")", "\n", "for", "k", ",", "v", "in", "metrics", ".", "items", "(", ")", ":", "\n", "        ", "print", "(", "\"{}: {:.3f}\"", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nb_python.Habitat_Lab.NewNavigationTask.__init__": [[255, 258], ["habitat.core.logging.logger.info", "habitat.tasks.nav.nav.NavigationTask.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "sim", ",", "dataset", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"Creating a new type of task\"", ")", "\n", "super", "(", ")", ".", "__init__", "(", "config", "=", "config", ",", "sim", "=", "sim", ",", "dataset", "=", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nb_python.Habitat_Lab.NewNavigationTask._check_episode_is_active": [[259, 266], ["habitat.core.logging.logger.info", "getattr", "Habitat_Lab.NewNavigationTask._sim.get_agent_state"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.get_agent_state"], ["", "def", "_check_episode_is_active", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\n", "\"Current agent position: {}\"", ".", "format", "(", "self", ".", "_sim", ".", "get_agent_state", "(", ")", ")", "\n", ")", "\n", "collision", "=", "self", ".", "_sim", ".", "previous_step_collided", "\n", "stop_called", "=", "not", "getattr", "(", "self", ",", "\"is_stop_called\"", ",", "False", ")", "\n", "return", "collision", "or", "stop_called", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nb_python.Habitat_Lab.AgentPositionSensor.__init__": [[314, 317], ["habitat.Sensor.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "sim", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", "=", "config", ")", "\n", "self", ".", "_sim", "=", "sim", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nb_python.Habitat_Lab.AgentPositionSensor._get_uuid": [[319, 321], ["None"], "methods", ["None"], ["", "def", "_get_uuid", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "\"agent_position\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nb_python.Habitat_Lab.AgentPositionSensor._get_sensor_type": [[323, 325], ["None"], "methods", ["None"], ["", "def", "_get_sensor_type", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "habitat", ".", "SensorTypes", ".", "POSITION", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nb_python.Habitat_Lab.AgentPositionSensor._get_observation_space": [[327, 333], ["gym.spaces.Box", "numpy.finfo", "numpy.finfo"], "methods", ["None"], ["", "def", "_get_observation_space", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "spaces", ".", "Box", "(", "\n", "low", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "min", ",", "\n", "high", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "max", ",", "\n", "shape", "=", "(", "3", ",", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nb_python.Habitat_Lab.AgentPositionSensor.get_observation": [[336, 338], ["Habitat_Lab.AgentPositionSensor._sim.get_agent_state"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.get_agent_state"], ["", "def", "get_observation", "(", "self", ",", "observations", ",", "*", "args", ",", "episode", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "_sim", ".", "get_agent_state", "(", ")", ".", "position", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nb_python.Habitat_Lab.ForwardOnlyAgent.__init__": [[384, 387], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "success_distance", ",", "goal_sensor_uuid", ")", ":", "\n", "        ", "self", ".", "dist_threshold_to_stop", "=", "success_distance", "\n", "self", ".", "goal_sensor_uuid", "=", "goal_sensor_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nb_python.Habitat_Lab.ForwardOnlyAgent.reset": [[388, 390], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nb_python.Habitat_Lab.ForwardOnlyAgent.is_goal_reached": [[391, 394], ["None"], "methods", ["None"], ["", "def", "is_goal_reached", "(", "self", ",", "observations", ")", ":", "\n", "        ", "dist", "=", "observations", "[", "self", ".", "goal_sensor_uuid", "]", "[", "0", "]", "\n", "return", "dist", "<=", "self", ".", "dist_threshold_to_stop", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nb_python.Habitat_Lab.ForwardOnlyAgent.act": [[395, 401], ["Habitat_Lab.ForwardOnlyAgent.is_goal_reached"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.RandomAgent.is_goal_reached"], ["", "def", "act", "(", "self", ",", "observations", ")", ":", "\n", "        ", "if", "self", ".", "is_goal_reached", "(", "observations", ")", ":", "\n", "            ", "action", "=", "HabitatSimActions", ".", "STOP", "\n", "", "else", ":", "\n", "            ", "action", "=", "HabitatSimActions", ".", "MOVE_FORWARD", "\n", "", "return", "{", "\"action\"", ":", "action", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nb_python.Habitat_Lab.display_sample": [[76, 109], ["numpy.array", "numpy.array", "PIL.Image.fromarray", "matplotlib.pyplot.figure", "enumerate", "matplotlib.pyplot.show", "PIL.Image.new", "semantic_img.convert.putpalette", "semantic_img.convert.putdata", "semantic_img.convert.convert", "arr.append", "titles.append", "PIL.Image.fromarray", "arr.append", "titles.append", "matplotlib.pyplot.subplot", "plt.subplot.axis", "plt.subplot.set_title", "matplotlib.pyplot.imshow", "d3_40_colors_rgb.flatten", "semantic_obs.flatten"], "function", ["None"], ["def", "display_sample", "(", "\n", "rgb_obs", ",", "semantic_obs", "=", "np", ".", "array", "(", "[", "]", ")", ",", "depth_obs", "=", "np", ".", "array", "(", "[", "]", ")", "\n", ")", ":", "# noqa: B006", "\n", "    ", "from", "habitat_sim", ".", "utils", ".", "common", "import", "d3_40_colors_rgb", "\n", "\n", "rgb_img", "=", "Image", ".", "fromarray", "(", "rgb_obs", ",", "mode", "=", "\"RGB\"", ")", "\n", "\n", "arr", "=", "[", "rgb_img", "]", "\n", "titles", "=", "[", "\"rgb\"", "]", "\n", "if", "semantic_obs", ".", "size", "!=", "0", ":", "\n", "        ", "semantic_img", "=", "Image", ".", "new", "(", "\n", "\"P\"", ",", "(", "semantic_obs", ".", "shape", "[", "1", "]", ",", "semantic_obs", ".", "shape", "[", "0", "]", ")", "\n", ")", "\n", "semantic_img", ".", "putpalette", "(", "d3_40_colors_rgb", ".", "flatten", "(", ")", ")", "\n", "semantic_img", ".", "putdata", "(", "(", "semantic_obs", ".", "flatten", "(", ")", "%", "40", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "semantic_img", "=", "semantic_img", ".", "convert", "(", "\"RGBA\"", ")", "\n", "arr", ".", "append", "(", "semantic_img", ")", "\n", "titles", ".", "append", "(", "\"semantic\"", ")", "\n", "\n", "", "if", "depth_obs", ".", "size", "!=", "0", ":", "\n", "        ", "depth_img", "=", "Image", ".", "fromarray", "(", "\n", "(", "depth_obs", "/", "10", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", ",", "mode", "=", "\"L\"", "\n", ")", "\n", "arr", ".", "append", "(", "depth_img", ")", "\n", "titles", ".", "append", "(", "\"depth\"", ")", "\n", "\n", "", "plt", ".", "figure", "(", "figsize", "=", "(", "12", ",", "8", ")", ")", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "arr", ")", ":", "\n", "        ", "ax", "=", "plt", ".", "subplot", "(", "1", ",", "3", ",", "i", "+", "1", ")", "\n", "ax", ".", "axis", "(", "\"off\"", ")", "\n", "ax", ".", "set_title", "(", "titles", "[", "i", "]", ")", "\n", "plt", ".", "imshow", "(", "data", ")", "\n", "", "plt", ".", "show", "(", "block", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nb_python.Habitat2_Quickstart.NavPickTaskV1.reset": [[232, 241], ["numpy.random.randint", "Habitat2_Quickstart.NavPickTaskV1._sim.pathfinder.get_random_navigable_point", "super().reset", "Habitat2_Quickstart.NavPickTaskV1._sim.get_n_targets"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.get_n_targets"], ["def", "reset", "(", "self", ",", "episode", ")", ":", "\n", "        ", "self", ".", "target_object_index", "=", "np", ".", "random", ".", "randint", "(", "\n", "0", ",", "self", ".", "_sim", ".", "get_n_targets", "(", ")", "\n", ")", "\n", "start_pos", "=", "self", ".", "_sim", ".", "pathfinder", ".", "get_random_navigable_point", "(", ")", "\n", "self", ".", "_sim", ".", "robot", ".", "base_pos", "=", "start_pos", "\n", "\n", "# Put any reset logic here.", "\n", "return", "super", "(", ")", ".", "reset", "(", "episode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nb_python.Habitat2_Quickstart.TargetStartSensor.__init__": [[251, 256], ["habitat.core.simulator.Sensor.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "sim", ",", "config", ",", "*", "args", ",", "task", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_sim", "=", "sim", "\n", "self", ".", "_task", "=", "task", "\n", "self", ".", "_config", "=", "config", "\n", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nb_python.Habitat2_Quickstart.TargetStartSensor._get_uuid": [[257, 259], ["None"], "methods", ["None"], ["", "def", "_get_uuid", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "TargetStartSensor", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nb_python.Habitat2_Quickstart.TargetStartSensor._get_sensor_type": [[260, 262], ["None"], "methods", ["None"], ["", "def", "_get_sensor_type", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "SensorTypes", ".", "TENSOR", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nb_python.Habitat2_Quickstart.TargetStartSensor._get_observation_space": [[263, 269], ["gym.Box", "gym.Box", "numpy.finfo", "numpy.finfo"], "methods", ["None"], ["", "def", "_get_observation_space", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "spaces", ".", "Box", "(", "\n", "shape", "=", "(", "3", ",", ")", ",", "\n", "low", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "min", ",", "\n", "high", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "max", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nb_python.Habitat2_Quickstart.TargetStartSensor.get_observation": [[271, 279], ["global_T.inverted", "global_T.inverted.transform_point", "Habitat2_Quickstart.TargetStartSensor._sim.get_target_objs_start"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.get_target_objs_start"], ["", "def", "get_observation", "(", "self", ",", "observations", ",", "episode", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "global_T", "=", "self", ".", "_sim", ".", "robot", ".", "ee_transform", "\n", "T_inv", "=", "global_T", ".", "inverted", "(", ")", "\n", "start_pos", "=", "self", ".", "_sim", ".", "get_target_objs_start", "(", ")", "[", "\n", "self", ".", "_task", ".", "target_object_index", "\n", "]", "\n", "relative_start_pos", "=", "T_inv", ".", "transform_point", "(", "start_pos", ")", "\n", "return", "relative_start_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nb_python.Habitat2_Quickstart.DistanceToTargetObject.__init__": [[289, 293], ["habitat.core.embodied_task.Measure.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "sim", ",", "config", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_sim", "=", "sim", "\n", "self", ".", "_config", "=", "config", "\n", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nb_python.Habitat2_Quickstart.DistanceToTargetObject._get_uuid": [[294, 297], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_get_uuid", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "DistanceToTargetObject", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nb_python.Habitat2_Quickstart.DistanceToTargetObject.reset_metric": [[298, 300], ["Habitat2_Quickstart.DistanceToTargetObject.update_metric"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.update_metric"], ["", "def", "reset_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "update_metric", "(", "*", "args", ",", "episode", "=", "episode", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nb_python.Habitat2_Quickstart.DistanceToTargetObject.update_metric": [[301, 309], ["Habitat2_Quickstart.DistanceToTargetObject._sim.get_targets", "numpy.linalg.norm", "Habitat2_Quickstart.DistanceToTargetObject._sim.get_scene_pos"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.get_targets", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.get_scene_pos"], ["", "def", "update_metric", "(", "self", ",", "*", "args", ",", "task", ",", "episode", ",", "**", "kwargs", ")", ":", "\n", "        ", "ee_pos", "=", "self", ".", "_sim", ".", "robot", ".", "ee_transform", ".", "translation", "\n", "\n", "idxs", ",", "_", "=", "self", ".", "_sim", ".", "get_targets", "(", ")", "\n", "scene_pos", "=", "self", ".", "_sim", ".", "get_scene_pos", "(", ")", "[", "idxs", "[", "task", ".", "target_object_index", "]", "]", "\n", "\n", "# Metric information is stored in the `self._metric` variable.", "\n", "self", ".", "_metric", "=", "np", ".", "linalg", ".", "norm", "(", "scene_pos", "-", "ee_pos", ",", "ord", "=", "2", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nb_python.Habitat2_Quickstart.NavPickReward.__init__": [[320, 324], ["habitat.tasks.rearrange.rearrange_sensors.RearrangeReward.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "sim", ",", "config", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_sim", "=", "sim", "\n", "self", ".", "_config", "=", "config", "\n", "super", "(", ")", ".", "__init__", "(", "sim", "=", "sim", ",", "config", "=", "config", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nb_python.Habitat2_Quickstart.NavPickReward._get_uuid": [[325, 328], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_get_uuid", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "NavPickReward", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nb_python.Habitat2_Quickstart.NavPickReward.reset_metric": [[329, 338], ["task.measurements.check_measure_dependencies", "Habitat2_Quickstart.NavPickReward.update_metric"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measurements.check_measure_dependencies", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.update_metric"], ["", "def", "reset_metric", "(", "self", ",", "*", "args", ",", "task", ",", "episode", ",", "**", "kwargs", ")", ":", "\n", "# Measurements can be computed from other measurements.", "\n", "        ", "task", ".", "measurements", ".", "check_measure_dependencies", "(", "\n", "self", ".", "uuid", ",", "\n", "[", "\n", "DistanceToTargetObject", ".", "cls_uuid", ",", "\n", "]", ",", "\n", ")", "\n", "self", ".", "update_metric", "(", "*", "args", ",", "task", "=", "task", ",", "episode", "=", "episode", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nb_python.Habitat2_Quickstart.NavPickReward.update_metric": [[339, 345], ["task.measurements.measures[].get_metric"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.get_metric"], ["", "def", "update_metric", "(", "self", ",", "*", "args", ",", "task", ",", "episode", ",", "**", "kwargs", ")", ":", "\n", "        ", "ee_to_object_distance", "=", "task", ".", "measurements", ".", "measures", "[", "\n", "DistanceToTargetObject", ".", "cls_uuid", "\n", "]", ".", "get_metric", "(", ")", "\n", "\n", "self", ".", "_metric", "=", "-", "ee_to_object_distance", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nb_python.Habitat2_Quickstart.NavPickSuccess.__init__": [[355, 359], ["habitat.core.embodied_task.Measure.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "sim", ",", "config", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_sim", "=", "sim", "\n", "self", ".", "_config", "=", "config", "\n", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nb_python.Habitat2_Quickstart.NavPickSuccess._get_uuid": [[360, 363], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_get_uuid", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "NavPickSuccess", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nb_python.Habitat2_Quickstart.NavPickSuccess.reset_metric": [[364, 371], ["Habitat2_Quickstart.NavPickSuccess.update_metric"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.update_metric"], ["", "def", "reset_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "update_metric", "(", "\n", "*", "args", ",", "\n", "episode", "=", "episode", ",", "\n", "task", "=", "task", ",", "\n", "observations", "=", "observations", ",", "\n", "**", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nb_python.Habitat2_Quickstart.NavPickSuccess.update_metric": [[373, 377], ["None"], "methods", ["None"], ["", "def", "update_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "# Check that the agent is holding the correct object.", "\n", "        ", "abs_targ_obj_idx", "=", "self", ".", "_sim", ".", "scene_obj_ids", "[", "task", ".", "target_object_index", "]", "\n", "self", ".", "_metric", "=", "abs_targ_obj_idx", "==", "self", ".", "_sim", ".", "grasp_mgr", ".", "snap_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nb_python.Habitat2_Quickstart.insert_render_options": [[85, 94], ["config.defrost", "config.SIMULATOR.AGENT_0.SENSORS.append", "config.freeze"], "function", ["None"], ["def", "insert_render_options", "(", "config", ")", ":", "\n", "# Added settings to make rendering higher resolution for better visualization", "\n", "    ", "config", ".", "defrost", "(", ")", "\n", "config", ".", "SIMULATOR", ".", "THIRD_RGB_SENSOR", ".", "WIDTH", "=", "512", "\n", "config", ".", "SIMULATOR", ".", "THIRD_RGB_SENSOR", ".", "HEIGHT", "=", "512", "\n", "config", ".", "SIMULATOR", ".", "CONCUR_RENDER", "=", "False", "\n", "config", ".", "SIMULATOR", ".", "AGENT_0", ".", "SENSORS", ".", "append", "(", "\"THIRD_RGB_SENSOR\"", ")", "\n", "config", ".", "freeze", "(", ")", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.hab2_bench.hab2_benchmark.HabDemoRunner.__init__": [[34, 36], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.hab2_bench.hab2_benchmark.HabDemoRunner.step_env": [[37, 43], ["time.time", "hab2_benchmark.HabDemoRunner.envs.step", "time.time"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step"], ["", "def", "step_env", "(", "self", ",", "action", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "obs", "=", "self", ".", "envs", ".", "step", "(", "action", "[", "0", "]", ")", "\n", "step_time", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "\n", "return", "obs", ",", "step_time", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.hab2_bench.hab2_benchmark.HabDemoRunner._pool_init": [[44, 48], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_pool_init", "(", "b", ")", ":", "\n", "        ", "global", "_barrier", "\n", "_barrier", "=", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.hab2_bench.hab2_benchmark.HabDemoRunner.do_time_steps": [[49, 78], ["collections.defaultdict", "range", "dict", "hab2_benchmark.HabDemoRunner.get_actions", "hab2_benchmark.HabDemoRunner.step_env", "vut.make_video", "range", "len", "final_vid.append"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.hab2_bench.hab2_benchmark.HabDemoRunner.step_env"], ["", "def", "do_time_steps", "(", "self", ")", ":", "\n", "        ", "final_vid", "=", "[", "]", "\n", "profile_sums", "=", "defaultdict", "(", "lambda", ":", "0", ")", "\n", "\n", "for", "step_idx", "in", "range", "(", "self", ".", "args", ".", "n_steps", ")", ":", "\n", "            ", "actions", "=", "self", ".", "get_actions", "(", "step_idx", ")", "\n", "\n", "obs", ",", "step_time", "=", "self", ".", "step_env", "(", "actions", ")", "\n", "if", "step_idx", ">=", "self", ".", "args", ".", "n_pre_step", ":", "\n", "# Won't count the time of a pre-step", "\n", "                ", "profile_sums", "[", "\"time\"", "]", "+=", "step_time", "\n", "\n", "", "if", "self", ".", "args", ".", "render", ":", "\n", "                ", "for", "_", "in", "range", "(", "self", ".", "args", ".", "n_procs", ")", ":", "\n", "                    ", "final_vid", ".", "append", "(", "obs", ")", "\n", "\n", "", "", "", "if", "self", ".", "args", ".", "render", "and", "len", "(", "final_vid", ")", ">", "0", ":", "\n", "            ", "from", "habitat_sim", ".", "utils", "import", "viz_utils", "as", "vut", "\n", "\n", "# TODO: setup an optional 3rd person render camera for debugging", "\n", "vut", ".", "make_video", "(", "\n", "final_vid", ",", "\n", "\"robot_head_rgb\"", ",", "\n", "\"color\"", ",", "\n", "\"data/profile/benchmark_render_output\"", ",", "\n", "open_vid", "=", "True", ",", "\n", ")", "\n", "\n", "", "return", "dict", "(", "profile_sums", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.hab2_bench.hab2_benchmark.HabDemoRunner._bench_target": [[79, 91], ["hab2_benchmark.HabDemoRunner.init_common", "hab2_benchmark.HabDemoRunner.do_time_steps", "_barrier.wait", "_barrier.reset"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.hab2_bench.hab2_benchmark.HabDemoRunner.init_common", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.hab2_bench.hab2_benchmark.HabDemoRunner.do_time_steps", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset"], ["", "def", "_bench_target", "(", "self", ",", "_idx", "=", "0", ")", ":", "\n", "        ", "self", ".", "init_common", "(", "_idx", ")", "\n", "\n", "if", "self", ".", "args", ".", "n_procs", ">", "1", "and", "_barrier", "is", "not", "None", ":", "\n", "            ", "_barrier", ".", "wait", "(", ")", "\n", "if", "_idx", "==", "0", ":", "\n", "                ", "_barrier", ".", "reset", "(", ")", "\n", "", "", "profile_sums", "=", "self", ".", "do_time_steps", "(", ")", "\n", "# self.envs.close()", "\n", "del", "self", ".", "envs", "\n", "\n", "return", "profile_sums", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.hab2_bench.hab2_benchmark.HabDemoRunner.init_common": [[92, 143], ["hab2_benchmark.create_env", "hab2_benchmark.HabDemoRunner.envs.reset", "hasattr", "psutil.Process", "psutil.Process.cpu_affinity", "range", "psutil.Process.cpu_affinity", "cpus.append", "cpus.append", "open", "numpy.load", "len", "ValueError", "numpy.array", "numpy.array", "len", "ac_space.sample", "len", "range", "range", "len"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.hab2_bench.hab2_benchmark.create_env", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.load", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.sample"], ["", "def", "init_common", "(", "self", ",", "proc_idx", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "n_gpus", "==", "8", ":", "\n", "            ", "cores_per_proc", "=", "8", "\n", "", "else", ":", "\n", "            ", "cores_per_proc", "=", "16", "\n", "\n", "", "if", "platform", "!=", "\"darwin\"", ":", "\n", "# cpu_affinity only supported on linux/windows", "\n", "            ", "import", "psutil", "\n", "\n", "procs_per_gpu", "=", "args", ".", "n_procs", "//", "args", ".", "n_gpus", "\n", "gpu_idx", "=", "proc_idx", "//", "procs_per_gpu", "\n", "current_process", "=", "psutil", ".", "Process", "(", ")", "\n", "orig_cpus", "=", "current_process", ".", "cpu_affinity", "(", ")", "\n", "cpus", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "orig_cpus", ")", "//", "2", ")", ":", "\n", "                ", "cpus", ".", "append", "(", "orig_cpus", "[", "idx", "]", ")", "\n", "cpus", ".", "append", "(", "orig_cpus", "[", "idx", "+", "len", "(", "orig_cpus", ")", "//", "2", "]", ")", "\n", "\n", "", "current_process", ".", "cpu_affinity", "(", "\n", "cpus", "[", "gpu_idx", "*", "cores_per_proc", ":", "(", "gpu_idx", "+", "1", ")", "*", "cores_per_proc", "]", "\n", ")", "\n", "\n", "", "self", ".", "envs", "=", "create_env", "(", "self", ".", "args", ",", "proc_idx", ")", "\n", "self", ".", "envs", ".", "reset", "(", ")", "\n", "if", "hasattr", "(", "self", ".", "envs", ",", "\"action_space\"", ")", ":", "\n", "            ", "ac_space", "=", "self", ".", "envs", ".", "action_space", "\n", "", "else", ":", "\n", "            ", "ac_space", "=", "self", ".", "envs", ".", "action_spaces", "[", "0", "]", "\n", "", "if", "self", ".", "args", ".", "load_actions", "is", "not", "None", ":", "\n", "            ", "with", "open", "(", "self", ".", "args", ".", "load_actions", ",", "\"rb\"", ")", "as", "f", ":", "\n", "                ", "use_actions", "=", "np", ".", "load", "(", "f", ")", "\n", "", "if", "len", "(", "use_actions", ")", "!=", "self", ".", "args", ".", "n_steps", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"Loading action trajectory of size %i vs %i\"", "\n", "%", "(", "len", "(", "use_actions", ")", ",", "self", ".", "args", ".", "n_steps", ")", "\n", ")", "\n", "# create an action dictionary compatible with loaded rearrange arm actions", "\n", "", "self", ".", "get_actions", "=", "lambda", "i", ":", "np", ".", "array", "(", "\n", "[", "\n", "{", "\n", "\"action\"", ":", "\"ARM_ACTION\"", ",", "\n", "\"action_args\"", ":", "{", "\"arm_action\"", ":", "use_actions", "[", "i", "]", "[", ":", "-", "1", "]", "}", ",", "\n", "}", "\n", "for", "_", "in", "range", "(", "self", ".", "args", ".", "n_procs", ")", "\n", "]", "\n", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "get_actions", "=", "lambda", "i", ":", "np", ".", "array", "(", "\n", "[", "ac_space", ".", "sample", "(", ")", "for", "_", "in", "range", "(", "self", ".", "args", ".", "n_procs", ")", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.hab2_bench.hab2_benchmark.HabDemoRunner.benchmark": [[145, 162], ["hab2_benchmark.HabDemoRunner._bench_target", "multiprocessing.Barrier", "multiprocessing.Pool", "pool.map", "p.items", "range", "perfs[].keys"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.hab2_bench.hab2_benchmark.HabDemoRunner._bench_target", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.map"], ["", "", "def", "benchmark", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "n_procs", "==", "1", ":", "# or self.args.vector_env:", "\n", "            ", "return", "self", ".", "_bench_target", "(", ")", "\n", "", "else", ":", "\n", "            ", "barrier", "=", "multiprocessing", ".", "Barrier", "(", "self", ".", "args", ".", "n_procs", ")", "\n", "with", "multiprocessing", ".", "Pool", "(", "\n", "self", ".", "args", ".", "n_procs", ",", "\n", "initializer", "=", "self", ".", "_pool_init", ",", "\n", "initargs", "=", "(", "barrier", ",", ")", ",", "\n", ")", "as", "pool", ":", "\n", "                ", "perfs", "=", "pool", ".", "map", "(", "self", ".", "_bench_target", ",", "range", "(", "self", ".", "args", ".", "n_procs", ")", ")", "\n", "", "res", "=", "{", "k", ":", "0", "for", "k", "in", "perfs", "[", "0", "]", ".", "keys", "(", ")", "}", "\n", "for", "p", "in", "perfs", ":", "\n", "                ", "for", "k", ",", "v", "in", "p", ".", "items", "(", ")", ":", "\n", "# Since we were running all the processes concurrently.", "\n", "                    ", "res", "[", "k", "]", "+=", "v", "/", "args", ".", "n_procs", "\n", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.hab2_bench.hab2_benchmark.create_env": [[17, 28], ["print", "set_opts.extend", "habitat.get_config", "habitat.Env", "range"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config"], ["def", "create_env", "(", "args", ",", "proc_i", ")", ":", "\n", "    ", "procs_per_gpu", "=", "args", ".", "n_procs", "//", "args", ".", "n_gpus", "\n", "procs_to_gpu", "=", "{", "i", ":", "i", "//", "procs_per_gpu", "for", "i", "in", "range", "(", "args", ".", "n_procs", ")", "}", "\n", "spec_gpu", "=", "procs_to_gpu", "[", "proc_i", "]", "\n", "print", "(", "f\"assigning {proc_i} gpu {spec_gpu}\"", ")", "\n", "\n", "set_opts", "=", "args", ".", "opts", "\n", "set_opts", ".", "extend", "(", "[", "\"SIMULATOR.HABITAT_SIM_V0.GPU_DEVICE_ID\"", ",", "spec_gpu", "]", ")", "\n", "\n", "config", "=", "habitat", ".", "get_config", "(", "args", ".", "cfg", ",", "set_opts", ")", "\n", "return", "habitat", ".", "Env", "(", "config", "=", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.hab2_bench.plot_bench.plot": [[14, 63], ["list", "len", "numpy.arange", "zip", "matplotlib.barh", "matplotlib.yticks", "matplotlib.xlabel", "matplotlib.title", "matplotlib.grid", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.clf", "name_map.keys", "mean.append", "std.append", "print", "print", "os.join", "os.join", "run_fps.append", "numpy.mean", "os.exists", "open", "ValueError", "numpy.sqrt", "numpy.std", "len", "round", "round", "float", "l.split"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.exists"], ["def", "plot", "(", "name_map", ",", "savename", ",", "set_title", ",", "base_name", ")", ":", "\n", "    ", "names", "=", "list", "(", "name_map", ".", "keys", "(", ")", ")", "\n", "mean", "=", "[", "]", "\n", "std", "=", "[", "]", "\n", "for", "name", "in", "names", ":", "\n", "        ", "found_fps", "=", "None", "\n", "run_fps", "=", "[", "]", "\n", "i", "=", "1", "\n", "while", "True", ":", "\n", "            ", "fname", "=", "osp", ".", "join", "(", "f\"data/profile/{base_name}{name}_{i}.txt\"", ")", "\n", "if", "not", "osp", ".", "exists", "(", "fname", ")", ":", "\n", "                ", "break", "\n", "", "with", "open", "(", "fname", ",", "\"r\"", ")", "as", "f", ":", "\n", "                ", "for", "l", "in", "f", ":", "\n", "                    ", "if", "\"FPS\"", "in", "l", ":", "\n", "                        ", "found_fps", "=", "float", "(", "l", ".", "split", "(", "\": \"", ")", "[", "1", "]", ")", "\n", "break", "\n", "", "", "", "if", "found_fps", "is", "None", ":", "\n", "                ", "raise", "ValueError", "(", ")", "\n", "", "run_fps", ".", "append", "(", "found_fps", ")", "\n", "i", "+=", "1", "\n", "# assert len(run_fps) == 10, f\"For {name}\"", "\n", "", "mean", ".", "append", "(", "np", ".", "mean", "(", "run_fps", ")", ")", "\n", "std", ".", "append", "(", "2.228", "*", "np", ".", "std", "(", "run_fps", ")", "/", "np", ".", "sqrt", "(", "len", "(", "run_fps", ")", ")", ")", "\n", "", "N", "=", "len", "(", "names", ")", "\n", "\n", "xpos", "=", "np", ".", "arange", "(", "0", ",", "2", "*", "N", ",", "2", ")", "\n", "\n", "use_names", "=", "[", "name_map", "[", "k", "]", "for", "k", "in", "names", "]", "\n", "\n", "for", "n", ",", "m", ",", "s", "in", "zip", "(", "use_names", ",", "mean", ",", "std", ")", ":", "\n", "        ", "print", "(", "f\"{n}: {round(m)}&{{\\\\scriptsize$\\\\pm${round(s)}}}\"", ")", "\n", "print", "(", "\"\"", ")", "\n", "\n", "", "plt", ".", "barh", "(", "xpos", ",", "mean", ",", "xerr", "=", "std", ",", "align", "=", "\"center\"", ",", "ecolor", "=", "\"black\"", ",", "capsize", "=", "10", ")", "\n", "plt", ".", "yticks", "(", "xpos", ",", "use_names", ")", "\n", "plt", ".", "xlabel", "(", "\"FPS\"", ")", "\n", "plt", ".", "title", "(", "set_title", ")", "\n", "plt", ".", "grid", "(", "\n", "b", "=", "True", ",", "which", "=", "\"major\"", ",", "color", "=", "\"lightgray\"", ",", "linestyle", "=", "\"--\"", ",", "axis", "=", "\"x\"", "\n", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "\n", "plt", ".", "savefig", "(", "\n", "osp", ".", "join", "(", "\"data/profile\"", ",", "savename", "+", "\".pdf\"", ")", ",", "\n", "format", "=", "\"pdf\"", ",", "\n", "bbox_inches", "=", "\"tight\"", ",", "\n", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.fetch_robot.FetchRobot._get_fetch_params": [[16, 68], ["habitat.robots.mobile_manipulator.MobileManipulatorParams", "list", "numpy.array", "numpy.array", "magnum.Vector3", "numpy.array", "numpy.array", "numpy.array", "magnum.Vector3", "range", "habitat.robots.mobile_manipulator.RobotCameraParams", "habitat.robots.mobile_manipulator.RobotCameraParams", "habitat.robots.mobile_manipulator.RobotCameraParams", "magnum.Vector3", "magnum.Vector3", "magnum.Vector3", "magnum.Vector3", "magnum.Vector3", "magnum.Vector3", "magnum.Matrix4.rotation_y", "magnum.Matrix4.rotation_z", "magnum.Deg", "magnum.Deg"], "methods", ["None"], ["    ", "def", "_get_fetch_params", "(", "self", ")", ":", "\n", "        ", "return", "MobileManipulatorParams", "(", "\n", "arm_joints", "=", "list", "(", "range", "(", "15", ",", "22", ")", ")", ",", "\n", "gripper_joints", "=", "[", "23", ",", "24", "]", ",", "\n", "wheel_joints", "=", "[", "2", ",", "4", "]", ",", "\n", "arm_init_params", "=", "np", ".", "array", "(", "\n", "[", "-", "0.45", ",", "-", "1.08", ",", "0.1", ",", "0.935", ",", "-", "0.001", ",", "1.573", ",", "0.005", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", ",", "\n", "gripper_init_params", "=", "np", ".", "array", "(", "[", "0.00", ",", "0.00", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "ee_offset", "=", "mn", ".", "Vector3", "(", "0.08", ",", "0", ",", "0", ")", ",", "\n", "ee_link", "=", "22", ",", "\n", "ee_constraint", "=", "np", ".", "array", "(", "[", "[", "0.4", ",", "1.2", "]", ",", "[", "-", "0.7", ",", "0.7", "]", ",", "[", "0.25", ",", "1.5", "]", "]", ")", ",", "\n", "cameras", "=", "{", "\n", "\"robot_arm\"", ":", "RobotCameraParams", "(", "\n", "cam_offset_pos", "=", "mn", ".", "Vector3", "(", "0", ",", "0.0", ",", "0.1", ")", ",", "\n", "cam_look_at_pos", "=", "mn", ".", "Vector3", "(", "0.1", ",", "0.0", ",", "0.0", ")", ",", "\n", "attached_link_id", "=", "22", ",", "\n", "relative_transform", "=", "mn", ".", "Matrix4", ".", "rotation_y", "(", "mn", ".", "Deg", "(", "-", "90", ")", ")", "\n", "@", "mn", ".", "Matrix4", ".", "rotation_z", "(", "mn", ".", "Deg", "(", "90", ")", ")", ",", "\n", ")", ",", "\n", "\"robot_head\"", ":", "RobotCameraParams", "(", "\n", "cam_offset_pos", "=", "mn", ".", "Vector3", "(", "0.25", ",", "1.2", ",", "0.0", ")", ",", "\n", "cam_look_at_pos", "=", "mn", ".", "Vector3", "(", "0.75", ",", "1.0", ",", "0.0", ")", ",", "\n", "attached_link_id", "=", "-", "1", ",", "\n", ")", ",", "\n", "\"robot_third\"", ":", "RobotCameraParams", "(", "\n", "cam_offset_pos", "=", "mn", ".", "Vector3", "(", "-", "0.5", ",", "1.7", ",", "-", "0.5", ")", ",", "\n", "cam_look_at_pos", "=", "mn", ".", "Vector3", "(", "1", ",", "0.0", ",", "0.75", ")", ",", "\n", "attached_link_id", "=", "-", "1", ",", "\n", ")", ",", "\n", "}", ",", "\n", "gripper_closed_state", "=", "np", ".", "array", "(", "[", "0.0", ",", "0.0", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "gripper_open_state", "=", "np", ".", "array", "(", "[", "0.04", ",", "0.04", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "gripper_state_eps", "=", "0.001", ",", "\n", "arm_mtr_pos_gain", "=", "0.3", ",", "\n", "arm_mtr_vel_gain", "=", "0.3", ",", "\n", "arm_mtr_max_impulse", "=", "10.0", ",", "\n", "wheel_mtr_pos_gain", "=", "0.0", ",", "\n", "wheel_mtr_vel_gain", "=", "1.3", ",", "\n", "wheel_mtr_max_impulse", "=", "10.0", ",", "\n", "base_offset", "=", "mn", ".", "Vector3", "(", "0", ",", "0", ",", "0", ")", ",", "\n", "base_link_names", "=", "{", "\n", "\"base_link\"", ",", "\n", "\"r_wheel_link\"", ",", "\n", "\"l_wheel_link\"", ",", "\n", "\"r_wheel_link\"", ",", "\n", "\"bellows_link\"", ",", "\n", "\"bellows_link2\"", ",", "\n", "\"estop_link\"", ",", "\n", "\"laser_link\"", ",", "\n", "\"torso_fixed_link\"", ",", "\n", "}", ",", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.fetch_robot.FetchRobot.__init__": [[71, 84], ["habitat.robots.mobile_manipulator.MobileManipulator.__init__", "fetch_robot.FetchRobot._get_fetch_params"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.fetch_robot.FetchRobotNoWheels._get_fetch_params"], ["", "def", "__init__", "(", "\n", "self", ",", "urdf_path", ",", "sim", ",", "limit_robo_joints", "=", "True", ",", "fixed_base", "=", "True", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "self", ".", "_get_fetch_params", "(", ")", ",", "\n", "urdf_path", ",", "\n", "sim", ",", "\n", "limit_robo_joints", ",", "\n", "fixed_base", ",", "\n", ")", "\n", "self", ".", "back_joint_id", "=", "6", "\n", "self", ".", "head_rot_jid", "=", "8", "\n", "self", ".", "head_tilt_jid", "=", "9", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.fetch_robot.FetchRobot.reconfigure": [[85, 90], ["super().reconfigure", "fetch_robot.FetchRobot.update"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env.reconfigure", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.il.metrics.Metric.update"], ["", "def", "reconfigure", "(", "self", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "reconfigure", "(", ")", "\n", "\n", "# NOTE: this is necessary to set locked head and back positions", "\n", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.fetch_robot.FetchRobot.reset": [[91, 96], ["super().reset", "fetch_robot.FetchRobot.update"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.il.metrics.Metric.update"], ["", "def", "reset", "(", "self", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "reset", "(", ")", "\n", "\n", "# NOTE: this is necessary to set locked head and back positions", "\n", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.fetch_robot.FetchRobot.base_transformation": [[97, 103], ["magnum.Matrix4.rotation", "magnum.Rad", "magnum.Vector3"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.rotation"], ["", "@", "property", "\n", "def", "base_transformation", "(", "self", ")", ":", "\n", "        ", "add_rot", "=", "mn", ".", "Matrix4", ".", "rotation", "(", "\n", "mn", ".", "Rad", "(", "-", "np", ".", "pi", "/", "2", ")", ",", "mn", ".", "Vector3", "(", "1.0", ",", "0", ",", "0", ")", "\n", ")", "\n", "return", "self", ".", "sim_obj", ".", "transformation", "@", "add_rot", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.fetch_robot.FetchRobot.update": [[104, 115], ["super().update", "fetch_robot.FetchRobot._set_joint_pos", "fetch_robot.FetchRobot._set_motor_pos", "fetch_robot.FetchRobot._set_joint_pos", "fetch_robot.FetchRobot._set_motor_pos", "fetch_robot.FetchRobot._set_joint_pos", "fetch_robot.FetchRobot._set_motor_pos"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.il.metrics.Metric.update", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator._set_joint_pos", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator._set_motor_pos", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator._set_joint_pos", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator._set_motor_pos", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator._set_joint_pos", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator._set_motor_pos"], ["", "def", "update", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "update", "(", ")", "\n", "# Fix the head.", "\n", "self", ".", "_set_joint_pos", "(", "self", ".", "head_rot_jid", ",", "0", ")", "\n", "self", ".", "_set_motor_pos", "(", "self", ".", "head_rot_jid", ",", "0", ")", "\n", "self", ".", "_set_joint_pos", "(", "self", ".", "head_tilt_jid", ",", "np", ".", "pi", "/", "2", ")", "\n", "self", ".", "_set_motor_pos", "(", "self", ".", "head_tilt_jid", ",", "np", ".", "pi", "/", "2", ")", "\n", "# Fix the back", "\n", "fix_back_val", "=", "0.15", "\n", "self", ".", "_set_joint_pos", "(", "self", ".", "back_joint_id", ",", "fix_back_val", ")", "\n", "self", ".", "_set_motor_pos", "(", "self", ".", "back_joint_id", ",", "fix_back_val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.fetch_robot.FetchRobotNoWheels.__init__": [[118, 125], ["fetch_robot.FetchRobot.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "urdf_path", ",", "sim", ",", "limit_robo_joints", "=", "True", ",", "fixed_base", "=", "True", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "urdf_path", ",", "sim", ",", "limit_robo_joints", ",", "fixed_base", ")", "\n", "self", ".", "back_joint_id", "-=", "2", "\n", "self", ".", "head_rot_jid", "-=", "2", "\n", "self", ".", "head_tilt_jid", "-=", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.fetch_robot.FetchRobotNoWheels._get_fetch_params": [[126, 134], ["fetch_robot.FetchRobot._get_fetch_params"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.fetch_robot.FetchRobotNoWheels._get_fetch_params"], ["", "def", "_get_fetch_params", "(", "self", ")", ":", "\n", "        ", "params", "=", "super", "(", ")", ".", "_get_fetch_params", "(", ")", "\n", "# No wheel control", "\n", "params", ".", "arm_joints", "=", "[", "x", "-", "2", "for", "x", "in", "params", ".", "arm_joints", "]", "\n", "params", ".", "gripper_joints", "=", "[", "x", "-", "2", "for", "x", "in", "params", ".", "gripper_joints", "]", "\n", "params", ".", "wheel_joints", "=", "None", "\n", "params", ".", "ee_link", "-=", "2", "\n", "return", "params", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.robot_interface.RobotInterface.__init__": [[13, 17], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Initializes this wrapper, but does not instantiate the robot.\"\"\"", "\n", "# the Habitat ArticulatedObject API access wrapper", "\n", "self", ".", "sim_obj", ":", "ManagedBulletArticulatedObject", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.robot_interface.RobotInterface.get_robot_sim_id": [[18, 21], ["None"], "methods", ["None"], ["", "def", "get_robot_sim_id", "(", "self", ")", "->", "int", ":", "\n", "        ", "\"\"\"Get the unique id for referencing the robot.\"\"\"", "\n", "return", "self", ".", "sim_obj", ".", "object_id", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.robot_interface.RobotInterface.update": [[22, 25], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "update", "(", "self", ")", ":", "\n", "        ", "\"\"\"Updates any properties or internal systems for the robot such as camera transformations, joint limits, and sleep states.\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.robot_interface.RobotInterface.reset": [[26, 29], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Reset the joint and motor states of an existing robot.\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.robot_interface.RobotInterface.reconfigure": [[30, 33], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "reconfigure", "(", "self", ")", ":", "\n", "        ", "\"\"\"Instantiates the robot the scene. Loads the URDF, sets initial state of parameters, joints, motors, etc...\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.robot_interface.RobotInterface.get_link_and_joint_names": [[34, 41], ["robot_interface.RobotInterface.sim_obj.get_link_ids", "robot_interface.RobotInterface.sim_obj.get_link_name", "robot_interface.RobotInterface.sim_obj.get_link_joint_name", "robot_interface.RobotInterface.sim_obj.get_link_joint_type"], "methods", ["None"], ["", "def", "get_link_and_joint_names", "(", "self", ")", "->", "str", ":", "\n", "        ", "\"\"\"Get a string listing all robot link and joint names for debugging purposes.\"\"\"", "\n", "link_joint_names", "=", "\"\"", "\n", "# print relevant joint/link info for debugging", "\n", "for", "link_id", "in", "self", ".", "sim_obj", ".", "get_link_ids", "(", ")", ":", "\n", "            ", "link_joint_names", "+=", "f\"{link_id} = {self.sim_obj.get_link_name(link_id)} | {self.sim_obj.get_link_joint_name(link_id)} :: type = {self.sim_obj.get_link_joint_type(link_id)} \\n\"", "\n", "", "return", "link_joint_names", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator.__init__": [[110, 156], ["habitat.robots.robot_interface.RobotInterface.__init__", "collections.defaultdict", "numpy.zeros", "numpy.zeros", "sensor_name.startswith", "len", "len", "mobile_manipulator.MobileManipulator._cameras[].append"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "params", ":", "MobileManipulatorParams", ",", "\n", "urdf_path", ":", "str", ",", "\n", "sim", ":", "Simulator", ",", "\n", "limit_robo_joints", ":", "bool", "=", "True", ",", "\n", "fixed_base", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "        ", "r\"\"\"Constructor\n\n        :param limit_robo_joints: If true, joint limits of robot are always\n            enforced.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "urdf_path", "=", "urdf_path", "\n", "self", ".", "params", "=", "params", "\n", "self", ".", "_fix_joint_values", ":", "Optional", "[", "np", ".", "ndarray", "]", "=", "None", "\n", "\n", "self", ".", "_sim", "=", "sim", "\n", "self", ".", "_limit_robo_joints", "=", "limit_robo_joints", "\n", "self", ".", "_fixed_base", "=", "fixed_base", "\n", "self", ".", "sim_obj", "=", "None", "\n", "\n", "self", ".", "_cameras", "=", "defaultdict", "(", "list", ")", "\n", "for", "camera_prefix", "in", "self", ".", "params", ".", "cameras", ":", "\n", "            ", "for", "sensor_name", "in", "self", ".", "_sim", ".", "_sensors", ":", "\n", "                ", "if", "sensor_name", ".", "startswith", "(", "camera_prefix", ")", ":", "\n", "                    ", "self", ".", "_cameras", "[", "camera_prefix", "]", ".", "append", "(", "sensor_name", ")", "\n", "\n", "# NOTE: the follow members cache static info for improved efficiency over querying the API", "\n", "# maps joint ids to motor settings for convenience", "\n", "", "", "", "self", ".", "joint_motors", ":", "Dict", "[", "int", ",", "Tuple", "[", "int", ",", "JointMotorSettings", "]", "]", "=", "{", "}", "\n", "# maps joint ids to position index", "\n", "self", ".", "joint_pos_indices", ":", "Dict", "[", "int", ",", "int", "]", "=", "{", "}", "\n", "# maps joint ids to velocity index", "\n", "self", ".", "joint_dof_indices", ":", "Dict", "[", "int", ",", "int", "]", "=", "{", "}", "\n", "self", ".", "joint_limits", ":", "Tuple", "[", "np", ".", "ndarray", ",", "np", ".", "ndarray", "]", "=", "None", "\n", "\n", "# defaults for optional params", "\n", "if", "self", ".", "params", ".", "gripper_init_params", "is", "None", ":", "\n", "            ", "self", ".", "params", ".", "gripper_init_params", "=", "np", ".", "zeros", "(", "\n", "len", "(", "self", ".", "params", ".", "gripper_joints", ")", ",", "dtype", "=", "np", ".", "float32", "\n", ")", "\n", "", "if", "self", ".", "params", ".", "arm_init_params", "is", "None", ":", "\n", "            ", "self", ".", "params", ".", "arm_init_params", "=", "np", ".", "zeros", "(", "\n", "len", "(", "self", ".", "params", ".", "arm_joints", ")", ",", "dtype", "=", "np", ".", "float32", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator.reconfigure": [[158, 227], ["mobile_manipulator.MobileManipulator._sim.get_articulated_object_manager", "mobile_manipulator.MobileManipulator.add_articulated_object_from_urdf", "mobile_manipulator.MobileManipulator.sim_obj.get_link_ids", "habitat_sim.physics.JointMotorSettings", "mobile_manipulator.MobileManipulator.sim_obj.create_all_motors", "mobile_manipulator.MobileManipulator._update_motor_settings_cache", "mobile_manipulator.MobileManipulator._update_motor_settings_cache", "mobile_manipulator.MobileManipulator._update_motor_settings_cache", "mobile_manipulator.MobileManipulator._update_motor_settings_cache", "mobile_manipulator.MobileManipulator.sim_obj.get_link_joint_pos_offset", "mobile_manipulator.MobileManipulator.sim_obj.get_link_dof_offset", "mobile_manipulator.MobileManipulator.sim_obj.remove_joint_motor", "habitat_sim.physics.JointMotorSettings", "habitat_sim.physics.JointMotorSettings", "habitat_sim.physics.JointMotorSettings", "mobile_manipulator.MobileManipulator.sim_obj.update_joint_motor", "mobile_manipulator.MobileManipulator.sim_obj.update_joint_motor", "mobile_manipulator.MobileManipulator.sim_obj.update_joint_motor"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator._update_motor_settings_cache", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator._update_motor_settings_cache", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator._update_motor_settings_cache", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator._update_motor_settings_cache"], ["", "", "def", "reconfigure", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"Instantiates the robot the scene. Loads the URDF, sets initial state of parameters, joints, motors, etc...\"\"\"", "\n", "ao_mgr", "=", "self", ".", "_sim", ".", "get_articulated_object_manager", "(", ")", "\n", "self", ".", "sim_obj", "=", "ao_mgr", ".", "add_articulated_object_from_urdf", "(", "\n", "self", ".", "urdf_path", ",", "fixed_base", "=", "self", ".", "_fixed_base", "\n", ")", "\n", "if", "self", ".", "_limit_robo_joints", ":", "\n", "# automatic joint limit clamping after each call to sim.step_physics()", "\n", "            ", "self", ".", "sim_obj", ".", "auto_clamp_joint_limits", "=", "True", "\n", "", "for", "link_id", "in", "self", ".", "sim_obj", ".", "get_link_ids", "(", ")", ":", "\n", "            ", "self", ".", "joint_pos_indices", "[", "\n", "link_id", "\n", "]", "=", "self", ".", "sim_obj", ".", "get_link_joint_pos_offset", "(", "link_id", ")", "\n", "self", ".", "joint_dof_indices", "[", "link_id", "]", "=", "self", ".", "sim_obj", ".", "get_link_dof_offset", "(", "\n", "link_id", "\n", ")", "\n", "", "self", ".", "joint_limits", "=", "self", ".", "sim_obj", ".", "joint_position_limits", "\n", "\n", "# remove any default damping motors", "\n", "for", "motor_id", "in", "self", ".", "sim_obj", ".", "existing_joint_motor_ids", ":", "\n", "            ", "self", ".", "sim_obj", ".", "remove_joint_motor", "(", "motor_id", ")", "\n", "# re-generate all joint motors with arm gains.", "\n", "\n", "", "jms", "=", "JointMotorSettings", "(", ")", "\n", "self", ".", "sim_obj", ".", "create_all_motors", "(", "jms", ")", "\n", "self", ".", "_update_motor_settings_cache", "(", ")", "\n", "\n", "if", "self", ".", "params", ".", "arm_joints", "is", "not", "None", ":", "\n", "            ", "jms", "=", "JointMotorSettings", "(", "\n", "0", ",", "# position_target", "\n", "self", ".", "params", ".", "arm_mtr_pos_gain", ",", "# position_gain", "\n", "0", ",", "# velocity_target", "\n", "self", ".", "params", ".", "arm_mtr_vel_gain", ",", "# velocity_gain", "\n", "self", ".", "params", ".", "arm_mtr_max_impulse", ",", "# max_impulse", "\n", ")", "\n", "for", "i", "in", "self", ".", "params", ".", "arm_joints", ":", "\n", "                ", "self", ".", "sim_obj", ".", "update_joint_motor", "(", "self", ".", "joint_motors", "[", "i", "]", "[", "0", "]", ",", "jms", ")", "\n", "", "", "self", ".", "_update_motor_settings_cache", "(", ")", "\n", "\n", "if", "self", ".", "params", ".", "gripper_joints", "is", "not", "None", ":", "\n", "            ", "jms", "=", "JointMotorSettings", "(", "\n", "0", ",", "# position_target", "\n", "self", ".", "params", ".", "arm_mtr_pos_gain", ",", "# position_gain", "\n", "0", ",", "# velocity_target", "\n", "self", ".", "params", ".", "arm_mtr_vel_gain", ",", "# velocity_gain", "\n", "self", ".", "params", ".", "arm_mtr_max_impulse", ",", "# max_impulse", "\n", ")", "\n", "for", "i", "in", "self", ".", "params", ".", "gripper_joints", ":", "\n", "                ", "self", ".", "sim_obj", ".", "update_joint_motor", "(", "self", ".", "joint_motors", "[", "i", "]", "[", "0", "]", ",", "jms", ")", "\n", "", "", "self", ".", "_update_motor_settings_cache", "(", ")", "\n", "\n", "# set correct gains for wheels", "\n", "if", "self", ".", "params", ".", "wheel_joints", "is", "not", "None", ":", "\n", "            ", "jms", "=", "JointMotorSettings", "(", "\n", "0", ",", "# position_target", "\n", "self", ".", "params", ".", "wheel_mtr_pos_gain", ",", "# position_gain", "\n", "0", ",", "# velocity_target", "\n", "self", ".", "params", ".", "wheel_mtr_vel_gain", ",", "# velocity_gain", "\n", "self", ".", "params", ".", "wheel_mtr_max_impulse", ",", "# max_impulse", "\n", ")", "\n", "# pylint: disable=not-an-iterable", "\n", "for", "i", "in", "self", ".", "params", ".", "wheel_joints", ":", "\n", "                ", "self", ".", "sim_obj", ".", "update_joint_motor", "(", "self", ".", "joint_motors", "[", "i", "]", "[", "0", "]", ",", "jms", ")", "\n", "\n", "# set initial states and targets", "\n", "", "", "self", ".", "arm_joint_pos", "=", "self", ".", "params", ".", "arm_init_params", "\n", "self", ".", "gripper_joint_pos", "=", "self", ".", "params", ".", "gripper_init_params", "\n", "\n", "self", ".", "_update_motor_settings_cache", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator.update": [[228, 264], ["agent_node.transformation.inverted", "mobile_manipulator.MobileManipulator._cameras.items", "magnum.Matrix4.look_at", "habitat_sim.utils.common.orthonormalize_rotation_shear", "magnum.Vector3", "mobile_manipulator.MobileManipulator.sim_obj.get_link_scene_node"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.debug_visualizer.DebugVisualizer.look_at"], ["", "def", "update", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"Updates the camera transformations and performs necessary checks on\n        joint limits and sleep states.\n        \"\"\"", "\n", "agent_node", "=", "self", ".", "_sim", ".", "_default_agent", ".", "scene_node", "\n", "inv_T", "=", "agent_node", ".", "transformation", ".", "inverted", "(", ")", "\n", "\n", "for", "cam_prefix", ",", "sensor_names", "in", "self", ".", "_cameras", ".", "items", "(", ")", ":", "\n", "            ", "for", "sensor_name", "in", "sensor_names", ":", "\n", "                ", "sens_obj", "=", "self", ".", "_sim", ".", "_sensors", "[", "sensor_name", "]", ".", "_sensor_object", "\n", "cam_info", "=", "self", ".", "params", ".", "cameras", "[", "cam_prefix", "]", "\n", "\n", "if", "cam_info", ".", "attached_link_id", "==", "-", "1", ":", "\n", "                    ", "link_trans", "=", "self", ".", "sim_obj", ".", "transformation", "\n", "", "else", ":", "\n", "                    ", "link_trans", "=", "self", ".", "sim_obj", ".", "get_link_scene_node", "(", "\n", "self", ".", "params", ".", "ee_link", "\n", ")", ".", "transformation", "\n", "\n", "", "cam_transform", "=", "mn", ".", "Matrix4", ".", "look_at", "(", "\n", "cam_info", ".", "cam_offset_pos", ",", "\n", "cam_info", ".", "cam_look_at_pos", ",", "\n", "mn", ".", "Vector3", "(", "0", ",", "1", ",", "0", ")", ",", "\n", ")", "\n", "cam_transform", "=", "(", "\n", "link_trans", "@", "cam_transform", "@", "cam_info", ".", "relative_transform", "\n", ")", "\n", "cam_transform", "=", "inv_T", "@", "cam_transform", "\n", "\n", "sens_obj", ".", "node", ".", "transformation", "=", "orthonormalize_rotation_shear", "(", "\n", "cam_transform", "\n", ")", "\n", "", "", "if", "self", ".", "_fix_joint_values", "is", "not", "None", ":", "\n", "            ", "self", ".", "arm_joint_pos", "=", "self", ".", "_fix_joint_values", "\n", "\n", "", "self", ".", "sim_obj", ".", "awake", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator.reset": [[265, 278], ["mobile_manipulator.MobileManipulator.sim_obj.clear_joint_states", "mobile_manipulator.MobileManipulator._update_motor_settings_cache", "mobile_manipulator.MobileManipulator.update"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator._update_motor_settings_cache", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.il.metrics.Metric.update"], ["", "def", "reset", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"Reset the joints on the existing robot.\n        NOTE: only arm and gripper joint motors (not gains) are reset by default, derived class should handle any other changes.\"\"\"", "\n", "\n", "# reset the initial joint positions", "\n", "self", ".", "sim_obj", ".", "clear_joint_states", "(", ")", "\n", "\n", "self", ".", "arm_joint_pos", "=", "self", ".", "params", ".", "arm_init_params", "\n", "self", ".", "_fix_joint_values", "=", "None", "\n", "self", ".", "gripper_joint_pos", "=", "self", ".", "params", ".", "gripper_init_params", "\n", "\n", "self", ".", "_update_motor_settings_cache", "(", ")", "\n", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator.arm_joint_limits": [[282, 298], ["numpy.array", "numpy.array"], "methods", ["None"], ["", "@", "property", "\n", "def", "arm_joint_limits", "(", "self", ")", "->", "Tuple", "[", "np", ".", "ndarray", ",", "np", ".", "ndarray", "]", ":", "\n", "        ", "\"\"\"Get the arm joint limits in radians\"\"\"", "\n", "\n", "# deref self vars to cut access in half", "\n", "joint_pos_indices", "=", "self", ".", "joint_pos_indices", "\n", "lower_joints_limits", ",", "upper_joint_limits", "=", "self", ".", "joint_limits", "\n", "arm_joints", "=", "self", ".", "params", ".", "arm_joints", "\n", "arm_pos_indices", "=", "[", "joint_pos_indices", "[", "x", "]", "for", "x", "in", "arm_joints", "]", "\n", "lower_lims", "=", "np", ".", "array", "(", "\n", "[", "lower_joints_limits", "[", "i", "]", "for", "i", "in", "arm_pos_indices", "]", ",", "dtype", "=", "np", ".", "float32", "\n", ")", "\n", "upper_lims", "=", "np", ".", "array", "(", "\n", "[", "upper_joint_limits", "[", "i", "]", "for", "i", "in", "arm_pos_indices", "]", ",", "dtype", "=", "np", ".", "float32", "\n", ")", "\n", "return", "lower_lims", ",", "upper_lims", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator.ee_link_id": [[299, 303], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ee_link_id", "(", "self", ")", "->", "int", ":", "\n", "        ", "\"\"\"Gets the Habitat Sim link id of the end-effector.\"\"\"", "\n", "return", "self", ".", "params", ".", "ee_link", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator.ee_local_offset": [[304, 310], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ee_local_offset", "(", "self", ")", "->", "mn", ".", "Vector3", ":", "\n", "        ", "\"\"\"Gets the relative offset of the end-effector center from the\n        end-effector link.\n        \"\"\"", "\n", "return", "self", ".", "params", ".", "ee_offset", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator.calculate_ee_forward_kinematics": [[311, 317], ["None"], "methods", ["None"], ["", "def", "calculate_ee_forward_kinematics", "(", "\n", "self", ",", "joint_state", ":", "np", ".", "ndarray", "\n", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"Gets the end-effector position for the given joint state.\"\"\"", "\n", "self", ".", "sim_obj", ".", "joint_positions", "=", "joint_state", "\n", "return", "self", ".", "ee_transform", ".", "translation", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator.calculate_ee_inverse_kinematics": [[318, 326], ["NotImplementedError"], "methods", ["None"], ["", "def", "calculate_ee_inverse_kinematics", "(", "\n", "self", ",", "ee_target_position", ":", "np", ".", "ndarray", "\n", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"Gets the joint states necessary to achieve the desired end-effector\n        configuration.\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", "\n", "\"Currently no implementation for generic IK.\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator.ee_transform": [[328, 340], ["ef_link_transform.transform_point", "mobile_manipulator.MobileManipulator.sim_obj.get_link_scene_node"], "methods", ["None"], ["", "@", "property", "\n", "def", "ee_transform", "(", "self", ")", "->", "mn", ".", "Matrix4", ":", "\n", "        ", "\"\"\"Gets the transformation of the end-effector location. This is offset\n        from the end-effector link location.\n        \"\"\"", "\n", "ef_link_transform", "=", "self", ".", "sim_obj", ".", "get_link_scene_node", "(", "\n", "self", ".", "params", ".", "ee_link", "\n", ")", ".", "transformation", "\n", "ef_link_transform", ".", "translation", "=", "ef_link_transform", ".", "transform_point", "(", "\n", "self", ".", "ee_local_offset", "\n", ")", "\n", "return", "ef_link_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator.gripper_joint_pos": [[356, 364], ["enumerate", "mobile_manipulator.MobileManipulator._set_motor_pos"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator._set_motor_pos"], ["", "@", "gripper_joint_pos", ".", "setter", "\n", "def", "gripper_joint_pos", "(", "self", ",", "ctrl", ":", "List", "[", "float", "]", ")", ":", "\n", "        ", "\"\"\"Kinematically sets the gripper joints and sets the motors to target.\"\"\"", "\n", "joint_positions", "=", "self", ".", "sim_obj", ".", "joint_positions", "\n", "for", "i", ",", "jidx", "in", "enumerate", "(", "self", ".", "params", ".", "gripper_joints", ")", ":", "\n", "            ", "self", ".", "_set_motor_pos", "(", "jidx", ",", "ctrl", "[", "i", "]", ")", "\n", "joint_positions", "[", "self", ".", "joint_pos_indices", "[", "jidx", "]", "]", "=", "ctrl", "[", "i", "]", "\n", "", "self", ".", "sim_obj", ".", "joint_positions", "=", "joint_positions", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator.set_gripper_target_state": [[365, 374], ["enumerate", "mobile_manipulator.MobileManipulator._set_motor_pos"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator._set_motor_pos"], ["", "def", "set_gripper_target_state", "(", "self", ",", "gripper_state", ":", "float", ")", "->", "None", ":", "\n", "        ", "\"\"\"Set the gripper motors to a desired symmetric state of the gripper [0,1] -> [open, closed]\"\"\"", "\n", "for", "i", ",", "jidx", "in", "enumerate", "(", "self", ".", "params", ".", "gripper_joints", ")", ":", "\n", "            ", "delta", "=", "(", "\n", "self", ".", "params", ".", "gripper_closed_state", "[", "i", "]", "\n", "-", "self", ".", "params", ".", "gripper_open_state", "[", "i", "]", "\n", ")", "\n", "target", "=", "self", ".", "params", ".", "gripper_open_state", "[", "i", "]", "+", "delta", "*", "gripper_state", "\n", "self", ".", "_set_motor_pos", "(", "jidx", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator.close_gripper": [[375, 378], ["mobile_manipulator.MobileManipulator.set_gripper_target_state"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator.set_gripper_target_state"], ["", "", "def", "close_gripper", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"Set gripper to the close state\"\"\"", "\n", "self", ".", "set_gripper_target_state", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator.open_gripper": [[379, 382], ["mobile_manipulator.MobileManipulator.set_gripper_target_state"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator.set_gripper_target_state"], ["", "def", "open_gripper", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"Set gripper to the open state\"\"\"", "\n", "self", ".", "set_gripper_target_state", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator.is_gripper_open": [[383, 394], ["numpy.amax", "numpy.abs", "numpy.array"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_gripper_open", "(", "self", ")", "->", "bool", ":", "\n", "        ", "\"\"\"True if all gripper joints are within eps of the open state.\"\"\"", "\n", "return", "(", "\n", "np", ".", "amax", "(", "\n", "np", ".", "abs", "(", "\n", "self", ".", "gripper_joint_pos", "\n", "-", "np", ".", "array", "(", "self", ".", "params", ".", "gripper_open_state", ")", "\n", ")", "\n", ")", "\n", "<", "self", ".", "params", ".", "gripper_state_eps", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator.is_gripper_closed": [[396, 407], ["numpy.amax", "numpy.abs", "numpy.array"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_gripper_closed", "(", "self", ")", "->", "bool", ":", "\n", "        ", "\"\"\"True if all gripper joints are within eps of the closed state.\"\"\"", "\n", "return", "(", "\n", "np", ".", "amax", "(", "\n", "np", ".", "abs", "(", "\n", "self", ".", "gripper_joint_pos", "\n", "-", "np", ".", "array", "(", "self", ".", "params", ".", "gripper_closed_state", ")", "\n", ")", "\n", ")", "\n", "<", "self", ".", "params", ".", "gripper_state_eps", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator.arm_joint_pos": [[423, 434], ["mobile_manipulator.MobileManipulator._validate_arm_ctrl_input", "enumerate", "mobile_manipulator.MobileManipulator._set_motor_pos"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator._validate_arm_ctrl_input", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator._set_motor_pos"], ["", "@", "arm_joint_pos", ".", "setter", "\n", "def", "arm_joint_pos", "(", "self", ",", "ctrl", ":", "List", "[", "float", "]", ")", ":", "\n", "        ", "\"\"\"Kinematically sets the arm joints and sets the motors to target.\"\"\"", "\n", "self", ".", "_validate_arm_ctrl_input", "(", "ctrl", ")", "\n", "\n", "joint_positions", "=", "self", ".", "sim_obj", ".", "joint_positions", "\n", "\n", "for", "i", ",", "jidx", "in", "enumerate", "(", "self", ".", "params", ".", "arm_joints", ")", ":", "\n", "            ", "self", ".", "_set_motor_pos", "(", "jidx", ",", "ctrl", "[", "i", "]", ")", "\n", "joint_positions", "[", "self", ".", "joint_pos_indices", "[", "jidx", "]", "]", "=", "ctrl", "[", "i", "]", "\n", "", "self", ".", "sim_obj", ".", "joint_positions", "=", "joint_positions", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator._validate_arm_ctrl_input": [[435, 446], ["numpy.any", "len", "len", "ValueError", "numpy.isnan", "ValueError"], "methods", ["None"], ["", "def", "_validate_arm_ctrl_input", "(", "self", ",", "ctrl", ":", "List", "[", "float", "]", ")", ":", "\n", "        ", "\"\"\"\n        Raises an exception if the control input is NaN or does not match the\n        joint dimensions.\n        \"\"\"", "\n", "if", "len", "(", "ctrl", ")", "!=", "len", "(", "self", ".", "params", ".", "arm_joints", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Control dimension does not match joint dimension\"", "\n", ")", "\n", "", "if", "np", ".", "any", "(", "np", ".", "isnan", "(", "ctrl", ")", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Control is NaN\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator.set_fixed_arm_joint_pos": [[447, 455], ["mobile_manipulator.MobileManipulator._validate_arm_ctrl_input"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator._validate_arm_ctrl_input"], ["", "", "def", "set_fixed_arm_joint_pos", "(", "self", ",", "fix_arm_joint_pos", ")", ":", "\n", "        ", "\"\"\"\n        Will fix the arm to a desired position at every internal timestep. Can\n        be used for kinematic arm control.\n        \"\"\"", "\n", "self", ".", "_validate_arm_ctrl_input", "(", "fix_arm_joint_pos", ")", "\n", "self", ".", "_fix_joint_values", "=", "fix_arm_joint_pos", "\n", "self", ".", "arm_joint_pos", "=", "fix_arm_joint_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator.arm_velocity": [[456, 469], ["numpy.array"], "methods", ["None"], ["", "@", "property", "\n", "def", "arm_velocity", "(", "self", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"Get the velocity of the arm joints.\"\"\"", "\n", "\n", "# deref self vars to cut access in half", "\n", "joint_dof_indices", "=", "self", ".", "joint_dof_indices", "\n", "arm_joints", "=", "self", ".", "params", ".", "arm_joints", "\n", "sim_obj_joint_vel", "=", "self", ".", "sim_obj", ".", "joint_velocities", "\n", "\n", "arm_dof_indices", "=", "(", "joint_dof_indices", "[", "x", "]", "for", "x", "in", "arm_joints", ")", "\n", "return", "np", ".", "array", "(", "\n", "[", "sim_obj_joint_vel", "[", "i", "]", "for", "i", "in", "arm_dof_indices", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator.arm_motor_pos": [[479, 486], ["mobile_manipulator.MobileManipulator._validate_arm_ctrl_input", "enumerate", "mobile_manipulator.MobileManipulator._set_motor_pos"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator._validate_arm_ctrl_input", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator._set_motor_pos"], ["", "@", "arm_motor_pos", ".", "setter", "\n", "def", "arm_motor_pos", "(", "self", ",", "ctrl", ":", "List", "[", "float", "]", ")", "->", "None", ":", "\n", "        ", "\"\"\"Set the desired target of the arm joint motors.\"\"\"", "\n", "self", ".", "_validate_arm_ctrl_input", "(", "ctrl", ")", "\n", "\n", "for", "i", ",", "jidx", "in", "enumerate", "(", "self", ".", "params", ".", "arm_joints", ")", ":", "\n", "            ", "self", ".", "_set_motor_pos", "(", "jidx", ",", "ctrl", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator.clip_ee_to_workspace": [[487, 493], ["numpy.clip"], "methods", ["None"], ["", "", "def", "clip_ee_to_workspace", "(", "self", ",", "pos", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"Clips a 3D end-effector position within region the robot can reach.\"\"\"", "\n", "return", "np", ".", "clip", "(", "\n", "pos", ",", "\n", "self", ".", "params", ".", "ee_constraint", "[", ":", ",", "0", "]", ",", "\n", "self", ".", "params", ".", "ee_constraint", "[", ":", ",", "1", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator.base_pos": [[515, 524], ["len", "ValueError", "mobile_manipulator.MobileManipulator.sim_obj.transformation.transform_vector"], "methods", ["None"], ["", "@", "base_pos", ".", "setter", "\n", "def", "base_pos", "(", "self", ",", "position", ":", "mn", ".", "Vector3", ")", ":", "\n", "        ", "\"\"\"Set the robot base to a desired ground position (e.g. NavMesh point) via configured local offset from origin.\"\"\"", "\n", "if", "len", "(", "position", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"Base position needs to be three dimensions\"", ")", "\n", "", "self", ".", "sim_obj", ".", "translation", "=", "(", "\n", "position", "\n", "-", "self", ".", "sim_obj", ".", "transformation", ".", "transform_vector", "(", "\n", "self", ".", "params", ".", "base_offset", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator.base_rot": [[531, 535], ["magnum.Quaternion.rotation", "magnum.Rad", "magnum.Vector3"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.rotation"], ["", "@", "base_rot", ".", "setter", "\n", "def", "base_rot", "(", "self", ",", "rotation_y_rad", ":", "float", ")", ":", "\n", "        ", "self", ".", "sim_obj", ".", "rotation", "=", "mn", ".", "Quaternion", ".", "rotation", "(", "\n", "mn", ".", "Rad", "(", "rotation_y_rad", ")", ",", "mn", ".", "Vector3", "(", "0", ",", "1", ",", "0", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator.base_transformation": [[537, 540], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "base_transformation", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "sim_obj", ".", "transformation", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator.is_base_link": [[541, 544], ["mobile_manipulator.MobileManipulator.sim_obj.get_link_name"], "methods", ["None"], ["", "def", "is_base_link", "(", "self", ",", "link_id", ":", "int", ")", "->", "bool", ":", "\n", "        ", "return", "(", "\n", "self", ".", "sim_obj", ".", "get_link_name", "(", "link_id", ")", "in", "self", ".", "params", ".", "base_link_names", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator._validate_joint_idx": [[550, 554], ["ValueError", "mobile_manipulator.MobileManipulator.joint_motors.keys"], "methods", ["None"], ["", "def", "_validate_joint_idx", "(", "self", ",", "joint", ")", ":", "\n", "        ", "if", "joint", "not", "in", "self", ".", "joint_motors", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "f\"Requested joint {joint} not in joint motors with indices (keys {self.joint_motors.keys()}) and {self.joint_motors}\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator._set_motor_pos": [[556, 561], ["mobile_manipulator.MobileManipulator._validate_joint_idx", "mobile_manipulator.MobileManipulator.sim_obj.update_joint_motor"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator._validate_joint_idx"], ["", "", "def", "_set_motor_pos", "(", "self", ",", "joint", ",", "ctrl", ")", ":", "\n", "        ", "self", ".", "_validate_joint_idx", "(", "joint", ")", "\n", "self", ".", "joint_motors", "[", "joint", "]", "[", "1", "]", ".", "position_target", "=", "ctrl", "\n", "self", ".", "sim_obj", ".", "update_joint_motor", "(", "\n", "self", ".", "joint_motors", "[", "joint", "]", "[", "0", "]", ",", "self", ".", "joint_motors", "[", "joint", "]", "[", "1", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator._get_motor_pos": [[563, 566], ["mobile_manipulator.MobileManipulator._validate_joint_idx"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator._validate_joint_idx"], ["", "def", "_get_motor_pos", "(", "self", ",", "joint", ")", ":", "\n", "        ", "self", ".", "_validate_joint_idx", "(", "joint", ")", "\n", "return", "self", ".", "joint_motors", "[", "joint", "]", "[", "1", "]", ".", "position_target", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator._set_joint_pos": [[567, 572], ["None"], "methods", ["None"], ["", "def", "_set_joint_pos", "(", "self", ",", "joint_idx", ",", "angle", ")", ":", "\n", "# NOTE: This is pretty inefficient and should not be used iteratively", "\n", "        ", "set_pos", "=", "self", ".", "sim_obj", ".", "joint_positions", "\n", "set_pos", "[", "self", ".", "joint_pos_indices", "[", "joint_idx", "]", "]", "=", "angle", "\n", "self", ".", "sim_obj", ".", "joint_positions", "=", "set_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator._interpolate_arm_control": [[573, 594], ["numpy.array", "int", "range", "enumerate", "mobile_manipulator.MobileManipulator._sim.step_world", "mobile_manipulator.MobileManipulator._get_motor_pos", "mobile_manipulator.MobileManipulator._set_motor_pos", "observations.append", "mobile_manipulator.MobileManipulator._sim.get_sensor_observations"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator._get_motor_pos", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator._set_motor_pos"], ["", "def", "_interpolate_arm_control", "(", "\n", "self", ",", "targs", ",", "idxs", ",", "seconds", ",", "ctrl_freq", ",", "get_observations", "=", "False", "\n", ")", ":", "\n", "        ", "curs", "=", "np", ".", "array", "(", "[", "self", ".", "_get_motor_pos", "(", "i", ")", "for", "i", "in", "idxs", "]", ")", "\n", "diff", "=", "targs", "-", "curs", "\n", "T", "=", "int", "(", "seconds", "*", "ctrl_freq", ")", "\n", "delta", "=", "diff", "/", "T", "\n", "\n", "observations", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "T", ")", ":", "\n", "            ", "joint_positions", "=", "self", ".", "sim_obj", ".", "joint_positions", "\n", "for", "j", ",", "jidx", "in", "enumerate", "(", "idxs", ")", ":", "\n", "                ", "self", ".", "_set_motor_pos", "(", "jidx", ",", "delta", "[", "j", "]", "*", "(", "i", "+", "1", ")", "+", "curs", "[", "j", "]", ")", "\n", "joint_positions", "[", "self", ".", "joint_pos_indices", "[", "jidx", "]", "]", "=", "(", "\n", "delta", "[", "j", "]", "*", "(", "i", "+", "1", ")", "+", "curs", "[", "j", "]", "\n", ")", "\n", "", "self", ".", "sim_obj", ".", "joint_positions", "=", "joint_positions", "\n", "self", ".", "_sim", ".", "step_world", "(", "1", "/", "ctrl_freq", ")", "\n", "if", "get_observations", ":", "\n", "                ", "observations", ".", "append", "(", "self", ".", "_sim", ".", "get_sensor_observations", "(", ")", ")", "\n", "", "", "return", "observations", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator._update_motor_settings_cache": [[595, 605], ["mobile_manipulator.MobileManipulator.sim_obj.existing_joint_motor_ids.items", "mobile_manipulator.MobileManipulator.sim_obj.get_joint_motor_settings"], "methods", ["None"], ["", "def", "_update_motor_settings_cache", "(", "self", ")", ":", "\n", "        ", "\"\"\"Updates the JointMotorSettings cache for cheaper future updates\"\"\"", "\n", "self", ".", "joint_motors", "=", "{", "}", "\n", "for", "(", "\n", "motor_id", ",", "\n", "joint_id", ",", "\n", ")", "in", "self", ".", "sim_obj", ".", "existing_joint_motor_ids", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "joint_motors", "[", "joint_id", "]", "=", "(", "\n", "motor_id", ",", "\n", "self", ".", "sim_obj", ".", "get_joint_motor_settings", "(", "motor_id", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.profiling_wrapper.RangeContext.__init__": [[53, 55], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "msg", ":", "str", ")", ":", "\n", "        ", "self", ".", "_msg", "=", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.profiling_wrapper.RangeContext.__enter__": [[56, 59], ["profiling_wrapper.range_push"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.profiling_wrapper.range_push"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "range_push", "(", "self", ".", "_msg", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.profiling_wrapper.RangeContext.__exit__": [[60, 63], ["profiling_wrapper.range_pop"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.profiling_wrapper.range_pop"], ["", "def", "__exit__", "(", "self", ",", "*", "exc", ")", ":", "\n", "        ", "range_pop", "(", ")", "\n", "return", "False", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.profiling_wrapper.configure": [[24, 28], ["profiling_utils.configure"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.profiling_wrapper.configure"], ["", "def", "configure", "(", "capture_start_step", "=", "-", "1", ",", "num_steps_to_capture", "=", "-", "1", ")", ":", "\n", "    ", "r\"\"\"Wrapper for habitat_sim profiling_utils.configure\"\"\"", "\n", "if", "profiling_utils", ":", "\n", "        ", "profiling_utils", ".", "configure", "(", "capture_start_step", ",", "num_steps_to_capture", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.profiling_wrapper.on_start_step": [[30, 34], ["profiling_utils.on_start_step"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.profiling_wrapper.on_start_step"], ["", "", "def", "on_start_step", "(", ")", ":", "\n", "    ", "r\"\"\"Wrapper for habitat_sim profiling_utils.on_start_step\"\"\"", "\n", "if", "profiling_utils", ":", "\n", "        ", "profiling_utils", ".", "on_start_step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.profiling_wrapper.range_push": [[36, 40], ["profiling_utils.range_push"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.profiling_wrapper.range_push"], ["", "", "def", "range_push", "(", "msg", ":", "str", ")", ":", "\n", "    ", "r\"\"\"Wrapper for habitat_sim profiling_utils.range_push\"\"\"", "\n", "if", "profiling_utils", ":", "\n", "        ", "profiling_utils", ".", "range_push", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.profiling_wrapper.range_pop": [[42, 46], ["profiling_utils.range_pop"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.profiling_wrapper.range_pop"], ["", "", "def", "range_pop", "(", ")", ":", "\n", "    ", "r\"\"\"Wrapper for habitat_sim profiling_utils.range_pop\"\"\"", "\n", "if", "profiling_utils", ":", "\n", "        ", "profiling_utils", ".", "range_pop", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.gym_adapter.HabGymWrapper.__init__": [[182, 237], ["gym.spaces.Dict", "gym_adapter.create_action_space", "gym_adapter.smash_observation_space", "list", "list", "len", "gym_adapter.smash_observation_space", "len", "gym_adapter.smash_observation_space", "len", "gym.spaces.Dict", "env.observation_space.spaces.keys", "env.action_space.spaces.keys", "env.action_space.spaces.items"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.gym_adapter.create_action_space", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.gym_adapter.smash_observation_space", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.gym_adapter.smash_observation_space", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.gym_adapter.smash_observation_space"], ["def", "__init__", "(", "self", ",", "env", ",", "save_orig_obs", ":", "bool", "=", "False", ")", ":", "\n", "        ", "gym_config", "=", "env", ".", "config", ".", "GYM", "\n", "self", ".", "_gym_goal_keys", "=", "gym_config", ".", "DESIRED_GOAL_KEYS", "\n", "self", ".", "_gym_achieved_goal_keys", "=", "gym_config", ".", "ACHIEVED_GOAL_KEYS", "\n", "self", ".", "_fix_info_dict", "=", "gym_config", ".", "FIX_INFO_DICT", "\n", "self", ".", "_gym_action_keys", "=", "gym_config", ".", "ACTION_KEYS", "\n", "self", ".", "_gym_obs_keys", "=", "gym_config", ".", "OBS_KEYS", "\n", "\n", "if", "self", ".", "_gym_obs_keys", "is", "None", ":", "\n", "            ", "self", ".", "_gym_obs_keys", "=", "list", "(", "env", ".", "observation_space", ".", "spaces", ".", "keys", "(", ")", ")", "\n", "", "if", "self", ".", "_gym_action_keys", "is", "None", ":", "\n", "            ", "self", ".", "_gym_action_keys", "=", "list", "(", "env", ".", "action_space", ".", "spaces", ".", "keys", "(", ")", ")", "\n", "\n", "", "self", ".", "_last_obs", ":", "Optional", "[", "Observations", "]", "=", "None", "\n", "self", ".", "_save_orig_obs", "=", "save_orig_obs", "\n", "self", ".", "orig_obs", "=", "None", "\n", "\n", "# Filtering the action spaces keys", "\n", "action_space", "=", "spaces", ".", "Dict", "(", "\n", "{", "\n", "k", ":", "v", "\n", "for", "k", ",", "v", "in", "env", ".", "action_space", ".", "spaces", ".", "items", "(", ")", "\n", "if", "(", "\n", "(", "self", ".", "_gym_action_keys", "is", "None", ")", "\n", "or", "(", "k", "in", "self", ".", "_gym_action_keys", ")", "\n", ")", "\n", "}", "\n", ")", "\n", "\n", "self", ".", "original_action_space", "=", "action_space", "\n", "\n", "self", ".", "action_space", "=", "create_action_space", "(", "action_space", ")", "\n", "\n", "self", ".", "observation_space", "=", "smash_observation_space", "(", "\n", "env", ".", "observation_space", ",", "self", ".", "_gym_obs_keys", "\n", ")", "\n", "\n", "dict_space", "=", "{", "\n", "\"observation\"", ":", "self", ".", "observation_space", ",", "\n", "}", "\n", "\n", "if", "len", "(", "self", ".", "_gym_goal_keys", ")", ">", "0", ":", "\n", "            ", "dict_space", "[", "\"desired_goal\"", "]", "=", "smash_observation_space", "(", "\n", "env", ".", "observation_space", ",", "self", ".", "_gym_goal_keys", "\n", ")", "\n", "\n", "", "if", "len", "(", "self", ".", "_gym_achieved_goal_keys", ")", ">", "0", ":", "\n", "            ", "dict_space", "[", "\"achieved_goal\"", "]", "=", "smash_observation_space", "(", "\n", "env", ".", "observation_space", ",", "self", ".", "_gym_achieved_goal_keys", "\n", ")", "\n", "\n", "", "if", "len", "(", "dict_space", ")", ">", "1", ":", "\n", "            ", "self", ".", "observation_space", "=", "spaces", ".", "Dict", "(", "dict_space", ")", "\n", "\n", "", "self", ".", "_env", "=", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.gym_adapter.HabGymWrapper.step": [[238, 250], ["gym_adapter.HabGymWrapper.action_space.contains", "isinstance", "gym_adapter.HabGymWrapper._direct_hab_step", "isinstance", "gym_adapter.continuous_vector_action_to_hab_dict"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.contains", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.gym_adapter.HabGymWrapper._direct_hab_step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.gym_adapter.continuous_vector_action_to_hab_dict"], ["", "def", "step", "(", "self", ",", "action", ":", "Union", "[", "np", ".", "ndarray", ",", "int", "]", ")", ":", "\n", "        ", "assert", "self", ".", "action_space", ".", "contains", "(", "\n", "action", "\n", ")", ",", "f\"Unvalid action {action} for action space {self.action_space}\"", "\n", "if", "isinstance", "(", "self", ".", "action_space", ",", "spaces", ".", "Box", ")", ":", "\n", "            ", "assert", "isinstance", "(", "action", ",", "np", ".", "ndarray", ")", "\n", "hab_action", "=", "continuous_vector_action_to_hab_dict", "(", "\n", "self", ".", "original_action_space", ",", "self", ".", "action_space", ",", "action", "\n", ")", "\n", "", "else", ":", "\n", "            ", "hab_action", "=", "{", "\"action\"", ":", "action", "}", "\n", "", "return", "self", ".", "_direct_hab_step", "(", "hab_action", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.gym_adapter.HabGymWrapper.get_number_of_episodes": [[251, 253], ["None"], "methods", ["None"], ["", "def", "get_number_of_episodes", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "_env", ".", "number_of_episodes", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.gym_adapter.HabGymWrapper.get_current_episodes": [[254, 256], ["None"], "methods", ["None"], ["", "def", "get_current_episodes", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "_env", ".", "current_episode", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.gym_adapter.HabGymWrapper._direct_hab_step": [[257, 265], ["gym_adapter.HabGymWrapper._env.step", "gym_adapter.HabGymWrapper._transform_obs", "gym_adapter.flatten_dict", "float", "flatten_dict.items"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CenterCropper._transform_obs", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.gym_adapter.flatten_dict"], ["", "def", "_direct_hab_step", "(", "self", ",", "action", ":", "Union", "[", "int", ",", "str", ",", "Dict", "[", "str", ",", "Any", "]", "]", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "_env", ".", "step", "(", "action", "=", "action", ")", "\n", "self", ".", "_last_obs", "=", "obs", "\n", "obs", "=", "self", ".", "_transform_obs", "(", "obs", ")", "\n", "if", "self", ".", "_fix_info_dict", ":", "\n", "            ", "info", "=", "flatten_dict", "(", "info", ")", "\n", "info", "=", "{", "k", ":", "float", "(", "v", ")", "for", "k", ",", "v", "in", "info", ".", "items", "(", ")", "}", "\n", "", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.gym_adapter.HabGymWrapper._transform_obs": [[266, 293], ["observation.items", "collections.OrderedDict", "len", "collections.OrderedDict", "len", "collections.OrderedDict", "isinstance", "len", "numpy.concatenate", "list", "v.values"], "methods", ["None"], ["", "def", "_transform_obs", "(", "self", ",", "obs", ")", ":", "\n", "        ", "if", "self", ".", "_save_orig_obs", ":", "\n", "            ", "self", ".", "orig_obs", "=", "obs", "\n", "\n", "", "observation", "=", "{", "\n", "\"observation\"", ":", "OrderedDict", "(", "\n", "[", "(", "k", ",", "obs", "[", "k", "]", ")", "for", "k", "in", "self", ".", "_gym_obs_keys", "]", "\n", ")", "\n", "}", "\n", "\n", "if", "len", "(", "self", ".", "_gym_goal_keys", ")", ">", "0", ":", "\n", "            ", "observation", "[", "\"desired_goal\"", "]", "=", "OrderedDict", "(", "\n", "[", "(", "k", ",", "obs", "[", "k", "]", ")", "for", "k", "in", "self", ".", "_gym_goal_keys", "]", "\n", ")", "\n", "\n", "", "if", "len", "(", "self", ".", "_gym_achieved_goal_keys", ")", ">", "0", ":", "\n", "            ", "observation", "[", "\"achieved_goal\"", "]", "=", "OrderedDict", "(", "\n", "[", "(", "k", ",", "obs", "[", "k", "]", ")", "for", "k", "in", "self", ".", "_gym_achieved_goal_keys", "]", "\n", ")", "\n", "\n", "", "for", "k", ",", "v", "in", "observation", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "observation_space", ",", "spaces", ".", "Box", ")", ":", "\n", "                ", "observation", "[", "k", "]", "=", "np", ".", "concatenate", "(", "list", "(", "v", ".", "values", "(", ")", ")", ")", "\n", "", "", "if", "len", "(", "observation", ")", "==", "1", ":", "\n", "            ", "observation", "=", "observation", "[", "\"observation\"", "]", "\n", "\n", "", "return", "observation", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.gym_adapter.HabGymWrapper.reset": [[294, 298], ["gym_adapter.HabGymWrapper._env.reset", "gym_adapter.HabGymWrapper._transform_obs"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CenterCropper._transform_obs"], ["", "def", "reset", "(", "self", ")", "->", "Union", "[", "np", ".", "ndarray", ",", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", "]", ":", "\n", "        ", "obs", "=", "self", ".", "_env", ".", "reset", "(", ")", "\n", "self", ".", "_last_obs", "=", "obs", "\n", "return", "self", ".", "_transform_obs", "(", "obs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.gym_adapter.HabGymWrapper.render": [[299, 309], ["habitat.utils.visualizations.utils.observations_to_image", "ValueError", "gym_adapter.HabGymWrapper._env._env.get_metrics"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.utils.observations_to_image", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env.get_metrics"], ["", "def", "render", "(", "self", ",", "mode", ":", "str", "=", "\"rgb_array\"", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "frame", "=", "None", "\n", "if", "mode", "==", "\"rgb_array\"", ":", "\n", "            ", "frame", "=", "observations_to_image", "(", "\n", "self", ".", "_last_obs", ",", "self", ".", "_env", ".", "_env", ".", "get_metrics", "(", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Render mode {mode} not currently supported.\"", ")", "\n", "\n", "", "return", "frame", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.gym_adapter.HabGymWrapper.close": [[310, 312], ["gym_adapter.HabGymWrapper._env.close"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "_env", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.gym_adapter.flatten_dict": [[20, 30], ["d.items", "dict", "isinstance", "str", "items.extend", "items.append", "str", "flatten_dict().items", "gym_adapter.flatten_dict"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.gym_adapter.flatten_dict"], ["def", "flatten_dict", "(", "d", ",", "parent_key", "=", "\"\"", ")", ":", "\n", "# From https://stackoverflow.com/questions/6027558/flatten-nested-dictionaries-compressing-keys", "\n", "    ", "items", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", ":", "\n", "        ", "new_key", "=", "parent_key", "+", "str", "(", "k", ")", "if", "parent_key", "else", "str", "(", "k", ")", "\n", "if", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "            ", "items", ".", "extend", "(", "flatten_dict", "(", "v", ",", "new_key", ")", ".", "items", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "items", ".", "append", "(", "(", "new_key", ",", "v", ")", ")", "\n", "", "", "return", "dict", "(", "items", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.gym_adapter.smash_observation_space": [[32, 51], ["gym.spaces.Dict", "gym_adapter.smash_observation_space.transform_shape"], "function", ["None"], ["", "def", "smash_observation_space", "(", "obs_space", ",", "limit_keys", ")", ":", "\n", "    ", "obs_shapes", "=", "[", "obs_space", ".", "spaces", "[", "k", "]", ".", "shape", "for", "k", "in", "limit_keys", "]", "\n", "\n", "def", "transform_shape", "(", "shape", ")", ":", "\n", "        ", "if", "len", "(", "shape", ")", "==", "2", ":", "\n", "            ", "return", "(", "np", ".", "prod", "(", "shape", ")", ",", ")", "\n", "", "return", "shape", "\n", "\n", "", "obs_shapes", "=", "[", "transform_shape", "(", "shape", ")", "for", "shape", "in", "obs_shapes", "]", "\n", "obs_dims", "=", "[", "len", "(", "shape", ")", "for", "shape", "in", "obs_shapes", "]", "\n", "if", "len", "(", "set", "(", "obs_dims", ")", ")", "==", "1", "and", "obs_dims", "[", "0", "]", "==", "1", ":", "\n", "# Smash together", "\n", "        ", "total_dim", "=", "sum", "(", "[", "shape", "[", "0", "]", "for", "shape", "in", "obs_shapes", "]", ")", "\n", "\n", "return", "spaces", ".", "Box", "(", "\n", "shape", "=", "(", "total_dim", ",", ")", ",", "low", "=", "-", "1.0", ",", "high", "=", "1.0", ",", "dtype", "=", "np", ".", "float32", "\n", ")", "\n", "", "return", "spaces", ".", "Dict", "(", "\n", "{", "k", ":", "v", "for", "k", ",", "v", "in", "obs_space", ".", "spaces", ".", "items", "(", ")", "if", "k", "in", "limit_keys", "}", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.gym_adapter._is_continuous": [[54, 67], ["isinstance", "isinstance", "isinstance", "NotImplementedError", "any", "gym_adapter._is_continuous", "original_space.values"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.gym_adapter._is_continuous"], ["", "def", "_is_continuous", "(", "original_space", ":", "gym", ".", "Space", ")", "->", "bool", ":", "\n", "    ", "\"\"\"\n    returns true if the original space is only suitable for continuous control\n    \"\"\"", "\n", "if", "isinstance", "(", "original_space", ",", "spaces", ".", "Box", ")", ":", "\n", "# Any Box means it is continuous", "\n", "        ", "return", "True", "\n", "", "if", "isinstance", "(", "original_space", ",", "EmptySpace", ")", ":", "\n", "        ", "return", "False", "\n", "", "if", "isinstance", "(", "original_space", ",", "Mapping", ")", ":", "\n", "        ", "return", "any", "(", "(", "_is_continuous", "(", "v", ")", "for", "v", "in", "original_space", ".", "values", "(", ")", ")", ")", "\n", "", "raise", "NotImplementedError", "(", "\n", "f\"Unknow action space found : {original_space}. Can only be Box or Empty\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.gym_adapter._recursive_continuous_size_getter": [[70, 89], ["isinstance", "low.extend", "high.extend", "isinstance", "len", "original_space.low.tolist", "original_space.high.tolist", "low.append", "high.append", "isinstance", "original_space.values", "NotImplementedError", "gym_adapter._recursive_continuous_size_getter"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.gym_adapter._recursive_continuous_size_getter"], ["", "def", "_recursive_continuous_size_getter", "(", "\n", "original_space", ":", "gym", ".", "Space", ",", "low", ":", "List", "[", "float", "]", ",", "high", ":", "List", "[", "float", "]", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Returns the size of a continuous action vector from a habitat environment action space\n    \"\"\"", "\n", "if", "isinstance", "(", "original_space", ",", "spaces", ".", "Box", ")", ":", "\n", "        ", "assert", "len", "(", "original_space", ".", "shape", ")", "==", "1", "\n", "low", ".", "extend", "(", "original_space", ".", "low", ".", "tolist", "(", ")", ")", "\n", "high", ".", "extend", "(", "original_space", ".", "high", ".", "tolist", "(", ")", ")", "\n", "", "elif", "isinstance", "(", "original_space", ",", "EmptySpace", ")", ":", "\n", "        ", "low", ".", "append", "(", "-", "1.0", ")", "\n", "high", ".", "append", "(", "1.0", ")", "\n", "", "elif", "isinstance", "(", "original_space", ",", "Mapping", ")", ":", "\n", "        ", "for", "v", "in", "original_space", ".", "values", "(", ")", ":", "\n", "            ", "_recursive_continuous_size_getter", "(", "v", ",", "low", ",", "high", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "f\"Unknow continuous action space found : {original_space}. Can only be Box, Empty or Dict.\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.gym_adapter.create_action_space": [[92, 109], ["isinstance", "gym_adapter._is_continuous", "gym_adapter._recursive_continuous_size_getter", "gym.spaces.Box", "gym.spaces.Discrete", "len", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.gym_adapter._is_continuous", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.gym_adapter._recursive_continuous_size_getter"], ["", "", "def", "create_action_space", "(", "original_space", ":", "gym", ".", "Space", ")", "->", "gym", ".", "Space", ":", "\n", "    ", "\"\"\"\n    Converts a habitat task action space into a either continuous (Box) or discrete (Discrete) gym.space.\n    \"\"\"", "\n", "assert", "isinstance", "(", "\n", "original_space", ",", "Mapping", "\n", ")", ",", "f\"The action space of the environment needs to be a Mapping, but was {original_space}\"", "\n", "if", "_is_continuous", "(", "original_space", ")", ":", "\n", "        ", "low", ":", "List", "[", "float", "]", "=", "[", "]", "\n", "high", ":", "List", "[", "float", "]", "=", "[", "]", "\n", "_recursive_continuous_size_getter", "(", "original_space", ",", "low", ",", "high", ")", "\n", "return", "spaces", ".", "Box", "(", "\n", "low", "=", "np", ".", "array", "(", "low", ")", ",", "high", "=", "np", ".", "array", "(", "high", ")", ",", "dtype", "=", "np", ".", "float32", "\n", ")", "\n", "", "else", ":", "\n", "# discrete case. The ActionSpace class gives us the correct action size", "\n", "        ", "return", "spaces", ".", "Discrete", "(", "len", "(", "original_space", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.gym_adapter.continuous_vector_action_to_hab_dict": [[111, 151], ["numpy.clip", "tuple", "original_action_space.spaces.items", "action_name_to_lengths.items", "original_action_space.spaces.keys", "len", "isinstance", "act_dict.items"], "function", ["None"], ["", "", "def", "continuous_vector_action_to_hab_dict", "(", "\n", "original_action_space", ":", "spaces", ".", "Space", ",", "\n", "vector_action_space", ":", "spaces", ".", "Box", ",", "\n", "action", ":", "np", ".", "ndarray", ",", "\n", ")", "->", "Dict", "[", "str", ",", "Any", "]", ":", "\n", "    ", "\"\"\"\n    Converts a np.ndarray vector action into a habitat-lab compatible action dictionary.\n    \"\"\"", "\n", "# Clipping actions to the specified limits", "\n", "action_values", "=", "np", ".", "clip", "(", "\n", "action", ",", "vector_action_space", ".", "low", ",", "vector_action_space", ".", "high", "\n", ")", "\n", "# Assume that the action space only has one root SimulatorTaskAction", "\n", "root_action_names", "=", "tuple", "(", "original_action_space", ".", "spaces", ".", "keys", "(", ")", ")", "\n", "if", "len", "(", "root_action_names", ")", "==", "1", ":", "\n", "# No need for a tuple if there is only one action", "\n", "        ", "root_action_names", "=", "root_action_names", "[", "0", "]", "\n", "", "action_name_to_lengths", "=", "{", "}", "\n", "for", "outer_k", ",", "act_dict", "in", "original_action_space", ".", "spaces", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "act_dict", ",", "EmptySpace", ")", ":", "\n", "            ", "action_name_to_lengths", "[", "outer_k", "]", "=", "1", "\n", "", "else", ":", "\n", "            ", "for", "k", ",", "v", "in", "act_dict", ".", "items", "(", ")", ":", "\n", "# The only element in the action", "\n", "                ", "action_name_to_lengths", "[", "k", "]", "=", "v", ".", "shape", "[", "0", "]", "\n", "\n", "# Determine action arguments for root_action_name", "\n", "", "", "", "action_args", "=", "{", "}", "\n", "action_offset", "=", "0", "\n", "for", "action_name", ",", "action_length", "in", "action_name_to_lengths", ".", "items", "(", ")", ":", "\n", "        ", "action_values", "=", "action", "[", "action_offset", ":", "action_offset", "+", "action_length", "]", "\n", "action_args", "[", "action_name", "]", "=", "action_values", "\n", "action_offset", "+=", "action_length", "\n", "\n", "", "action_dict", "=", "{", "\n", "\"action\"", ":", "root_action_names", ",", "\n", "\"action_args\"", ":", "action_args", ",", "\n", "}", "\n", "\n", "return", "action_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.render_wrapper.HabRenderWrapper.__init__": [[102, 109], ["gym.Wrapper.__init__", "isinstance", "ValueError"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "env", ",", "gym", ".", "Env", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Can only wrap gym env\"", ")", "\n", "", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "self", ".", "_last_info", "=", "None", "\n", "self", ".", "_total_reward", "=", "0.0", "\n", "self", ".", "_n_step", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.render_wrapper.HabRenderWrapper.step": [[110, 117], ["super().step"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "super", "(", ")", ".", "step", "(", "action", ")", "\n", "self", ".", "_last_info", "=", "info", "\n", "self", ".", "_total_reward", "+=", "reward", "\n", "self", ".", "_n_step", "+=", "1", "\n", "\n", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.render_wrapper.HabRenderWrapper.reset": [[118, 123], ["super().reset"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_last_info", "=", "None", "\n", "self", ".", "_total_reward", "=", "0.0", "\n", "self", ".", "_n_step", "=", "0", "\n", "return", "super", "(", ")", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.render_wrapper.HabRenderWrapper.render": [[124, 136], ["super().render", "render_wrapper.overlay_frame"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.render", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.render_wrapper.overlay_frame"], ["", "def", "render", "(", "self", ",", "mode", "=", "\"rgb_array\"", ")", ":", "\n", "        ", "frame", "=", "super", "(", ")", ".", "render", "(", "mode", "=", "mode", ")", "\n", "if", "self", ".", "_last_info", "is", "not", "None", ":", "\n", "            ", "frame", "=", "overlay_frame", "(", "\n", "frame", ",", "\n", "self", ".", "_last_info", ",", "\n", "[", "\n", "f\"Step {self._n_step}\"", ",", "\n", "f\"Total Reward {self._total_reward:.4f}\"", ",", "\n", "]", ",", "\n", ")", "\n", "", "return", "frame", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.render_wrapper.append_text_to_image": [[16, 67], ["numpy.clip", "cv2.putText", "cv2.putText", "cv2.getTextSize"], "function", ["None"], ["def", "append_text_to_image", "(", "\n", "image", ":", "np", ".", "ndarray", ",", "text", ":", "List", "[", "str", "]", ",", "font_size", ":", "float", "=", "0.5", "\n", ")", ":", "\n", "    ", "r\"\"\"Appends lines of text on top of an image. First this will render to the\n    left-hand side of the image, once that column is full, it will render to\n    the right hand-side of the image.\n    :param image: the image to put text underneath\n    :param text: The list of strings which will be rendered, separated by new lines.\n    :returns: A new image with text inserted underneath the input image\n    \"\"\"", "\n", "h", ",", "w", ",", "c", "=", "image", ".", "shape", "\n", "font_thickness", "=", "1", "\n", "font", "=", "cv2", ".", "FONT_HERSHEY_SIMPLEX", "\n", "\n", "y", "=", "0", "\n", "left_aligned", "=", "True", "\n", "for", "line", "in", "text", ":", "\n", "        ", "textsize", "=", "cv2", ".", "getTextSize", "(", "line", ",", "font", ",", "font_size", ",", "font_thickness", ")", "[", "0", "]", "\n", "y", "+=", "textsize", "[", "1", "]", "+", "10", "\n", "if", "y", ">", "h", ":", "\n", "            ", "left_aligned", "=", "False", "\n", "y", "=", "textsize", "[", "1", "]", "+", "10", "\n", "\n", "", "if", "left_aligned", ":", "\n", "            ", "x", "=", "10", "\n", "", "else", ":", "\n", "            ", "x", "=", "w", "-", "(", "textsize", "[", "0", "]", "+", "10", ")", "\n", "\n", "", "cv2", ".", "putText", "(", "\n", "image", ",", "\n", "line", ",", "\n", "(", "x", ",", "y", ")", ",", "\n", "font", ",", "\n", "font_size", ",", "\n", "(", "0", ",", "0", ",", "0", ")", ",", "\n", "font_thickness", "*", "2", ",", "\n", "lineType", "=", "cv2", ".", "LINE_AA", ",", "\n", ")", "\n", "\n", "cv2", ".", "putText", "(", "\n", "image", ",", "\n", "line", ",", "\n", "(", "x", ",", "y", ")", ",", "\n", "font", ",", "\n", "font_size", ",", "\n", "(", "255", ",", "255", ",", "255", ",", "255", ")", ",", "\n", "font_thickness", ",", "\n", "lineType", "=", "cv2", ".", "LINE_AA", ",", "\n", ")", "\n", "\n", "", "return", "np", ".", "clip", "(", "image", ",", "0", ",", "255", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.render_wrapper.overlay_frame": [[69, 83], ["habitat.utils.gym_adapter.flatten_dict", "habitat.utils.gym_adapter.flatten_dict.items", "render_wrapper.append_text_to_image", "isinstance", "lines.extend", "lines.append", "lines.append"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.gym_adapter.flatten_dict", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.utils.append_text_to_image"], ["", "def", "overlay_frame", "(", "frame", ",", "info", ",", "additional", "=", "None", ")", ":", "\n", "    ", "lines", "=", "[", "]", "\n", "flattened_info", "=", "flatten_dict", "(", "info", ")", "\n", "for", "k", ",", "v", "in", "flattened_info", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "v", ",", "str", ")", ":", "\n", "            ", "lines", ".", "append", "(", "f\"{k}: {v}\"", ")", "\n", "", "else", ":", "\n", "            ", "lines", ".", "append", "(", "f\"{k}: {v:.2f}\"", ")", "\n", "", "", "if", "additional", "is", "not", "None", ":", "\n", "        ", "lines", ".", "extend", "(", "additional", ")", "\n", "\n", "", "frame", "=", "append_text_to_image", "(", "frame", ",", "lines", ",", "font_size", "=", "0.25", ")", "\n", "\n", "return", "frame", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.geometry_utils.angle_between_quaternions": [[15, 25], ["numpy.conjugate", "quaternion.as_float_array", "numpy.arctan2", "numpy.linalg.norm", "numpy.abs"], "function", ["None"], ["def", "angle_between_quaternions", "(", "\n", "q1", ":", "quaternion", ".", "quaternion", ",", "q2", ":", "quaternion", ".", "quaternion", "\n", ")", "->", "float", ":", "\n", "    ", "r\"\"\"Returns the angle (in radians) between two quaternions. This angle will\n    always be positive.\n    \"\"\"", "\n", "q1_inv", "=", "np", ".", "conjugate", "(", "q1", ")", "\n", "dq", "=", "quaternion", ".", "as_float_array", "(", "q1_inv", "*", "q2", ")", "\n", "\n", "return", "2", "*", "np", ".", "arctan2", "(", "np", ".", "linalg", ".", "norm", "(", "dq", "[", "1", ":", "]", ")", ",", "np", ".", "abs", "(", "dq", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.geometry_utils.quaternion_from_two_vectors": [[27, 48], ["v0.dot", "numpy.cross", "numpy.sqrt", "quaternion.quaternion", "numpy.linalg.norm", "numpy.linalg.norm", "max", "numpy.stack", "numpy.linalg.svd", "numpy.sqrt", "quaternion.quaternion", "numpy.sqrt"], "function", ["None"], ["", "def", "quaternion_from_two_vectors", "(", "\n", "v0", ":", "np", ".", "ndarray", ",", "v1", ":", "np", ".", "ndarray", "\n", ")", "->", "quaternion", ".", "quaternion", ":", "\n", "    ", "r\"\"\"Computes the quaternion representation of v1 using v0 as the origin.\"\"\"", "\n", "v0", "=", "v0", "/", "np", ".", "linalg", ".", "norm", "(", "v0", ")", "\n", "v1", "=", "v1", "/", "np", ".", "linalg", ".", "norm", "(", "v1", ")", "\n", "c", "=", "v0", ".", "dot", "(", "v1", ")", "\n", "# Epsilon prevents issues at poles.", "\n", "if", "c", "<", "(", "-", "1", "+", "EPSILON", ")", ":", "\n", "        ", "c", "=", "max", "(", "c", ",", "-", "1", ")", "\n", "m", "=", "np", ".", "stack", "(", "[", "v0", ",", "v1", "]", ",", "0", ")", "\n", "_", ",", "_", ",", "vh", "=", "np", ".", "linalg", ".", "svd", "(", "m", ",", "full_matrices", "=", "True", ")", "\n", "axis", "=", "vh", ".", "T", "[", ":", ",", "2", "]", "\n", "w2", "=", "(", "1", "+", "c", ")", "*", "0.5", "\n", "w", "=", "np", ".", "sqrt", "(", "w2", ")", "\n", "axis", "=", "axis", "*", "np", ".", "sqrt", "(", "1", "-", "w2", ")", "\n", "return", "quaternion", ".", "quaternion", "(", "w", ",", "*", "axis", ")", "\n", "\n", "", "axis", "=", "np", ".", "cross", "(", "v0", ",", "v1", ")", "\n", "s", "=", "np", ".", "sqrt", "(", "(", "1", "+", "c", ")", "*", "2", ")", "\n", "return", "quaternion", ".", "quaternion", "(", "s", "*", "0.5", ",", "*", "(", "axis", "/", "s", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.geometry_utils.quaternion_to_list": [[50, 52], ["q.imag.tolist"], "function", ["None"], ["", "def", "quaternion_to_list", "(", "q", ":", "quaternion", ".", "quaternion", ")", ":", "\n", "    ", "return", "q", ".", "imag", ".", "tolist", "(", ")", "+", "[", "q", ".", "real", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.geometry_utils.quaternion_from_coeff": [[54, 60], ["quaternion.quaternion"], "function", ["None"], ["", "def", "quaternion_from_coeff", "(", "coeffs", ":", "List", "[", "float", "]", ")", "->", "quaternion", ".", "quaternion", ":", "\n", "    ", "r\"\"\"Creates a quaternions from coeffs in [x, y, z, w] format\"\"\"", "\n", "quat", "=", "quaternion", ".", "quaternion", "(", "0", ",", "0", ",", "0", ",", "0", ")", "\n", "quat", ".", "real", "=", "coeffs", "[", "3", "]", "\n", "quat", ".", "imag", "=", "coeffs", "[", "0", ":", "3", "]", "\n", "return", "quat", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.geometry_utils.quaternion_rotate_vector": [[62, 75], ["quaternion.quaternion", "quat.inverse"], "function", ["None"], ["", "def", "quaternion_rotate_vector", "(", "\n", "quat", ":", "quaternion", ".", "quaternion", ",", "v", ":", "np", ".", "ndarray", "\n", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "r\"\"\"Rotates a vector by a quaternion\n    Args:\n        quaternion: The quaternion to rotate by\n        v: The vector to rotate\n    Returns:\n        np.ndarray: The rotated vector\n    \"\"\"", "\n", "vq", "=", "quaternion", ".", "quaternion", "(", "0", ",", "0", ",", "0", ",", "0", ")", "\n", "vq", ".", "imag", "=", "v", "\n", "return", "(", "quat", "*", "vq", "*", "quat", ".", "inverse", "(", ")", ")", ".", "imag", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.geometry_utils.agent_state_target2ref": [[77, 118], ["quaternion_from_coeff.normalized", "quaternion_from_coeff.normalized", "geometry_utils.quaternion_rotate_vector", "len", "len", "isinstance", "geometry_utils.quaternion_from_coeff", "isinstance", "geometry_utils.quaternion_from_coeff", "quaternion_from_coeff.inverse", "quaternion_from_coeff.inverse"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.geometry_utils.quaternion_rotate_vector", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.geometry_utils.quaternion_from_coeff", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.geometry_utils.quaternion_from_coeff"], ["", "def", "agent_state_target2ref", "(", "\n", "ref_agent_state", ":", "Union", "[", "List", ",", "Tuple", "]", ",", "target_agent_state", ":", "Union", "[", "List", ",", "Tuple", "]", "\n", ")", "->", "Tuple", "[", "quaternion", ".", "quaternion", ",", "np", ".", "ndarray", "]", ":", "\n", "    ", "r\"\"\"Computes the target agent_state's rotation and position representation\n    with respect to the coordinate system defined by reference agent's rotation and position.\n    All rotations must be in [x, y, z, w] format.\n\n    :param ref_agent_state: reference agent_state in the format of [rotation, position].\n         The rotation and position are from a common/global coordinate systems.\n         They define a local coordinate system.\n    :param target_agent_state: target agent_state in the format of [rotation, position].\n        The rotation and position are from a common/global coordinate systems.\n        and need to be transformed to the local coordinate system defined by ref_agent_state.\n    \"\"\"", "\n", "\n", "assert", "(", "\n", "len", "(", "ref_agent_state", "[", "1", "]", ")", "==", "3", "\n", ")", ",", "\"Only support Cartesian format currently.\"", "\n", "assert", "(", "\n", "len", "(", "target_agent_state", "[", "1", "]", ")", "==", "3", "\n", ")", ",", "\"Only support Cartesian format currently.\"", "\n", "\n", "ref_rotation", ",", "ref_position", "=", "ref_agent_state", "\n", "target_rotation", ",", "target_position", "=", "target_agent_state", "\n", "\n", "# convert to all rotation representations to np.quaternion", "\n", "if", "not", "isinstance", "(", "ref_rotation", ",", "quaternion", ".", "quaternion", ")", ":", "\n", "        ", "ref_rotation", "=", "quaternion_from_coeff", "(", "ref_rotation", ")", "\n", "", "ref_rotation", "=", "ref_rotation", ".", "normalized", "(", ")", "\n", "\n", "if", "not", "isinstance", "(", "target_rotation", ",", "quaternion", ".", "quaternion", ")", ":", "\n", "        ", "target_rotation", "=", "quaternion_from_coeff", "(", "target_rotation", ")", "\n", "", "target_rotation", "=", "target_rotation", ".", "normalized", "(", ")", "\n", "\n", "rotation_in_ref_coordinate", "=", "ref_rotation", ".", "inverse", "(", ")", "*", "target_rotation", "\n", "\n", "position_in_ref_coordinate", "=", "quaternion_rotate_vector", "(", "\n", "ref_rotation", ".", "inverse", "(", ")", ",", "target_position", "-", "ref_position", "\n", ")", "\n", "\n", "return", "(", "rotation_in_ref_coordinate", ",", "position_in_ref_coordinate", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.check_make_dir": [[14, 31], ["os.path.exists", "habitat.core.logging.logger.info", "os.makedirs", "habitat.core.logging.logger.error"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.exists"], ["def", "check_make_dir", "(", "directory_path", ":", "str", ")", "->", "bool", ":", "\n", "    ", "\"\"\"\n    Check for the existence of the provided directory_path and create it if not found.\n    \"\"\"", "\n", "# if output directory doesn't exist, create it", "\n", "if", "not", "osp", ".", "exists", "(", "directory_path", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "makedirs", "(", "directory_path", ")", "\n", "", "except", "OSError", ":", "\n", "            ", "logger", ".", "error", "(", "\n", "f\"check_make_dir: Failed to create the specified directory_path: {directory_path}\"", "\n", ")", "\n", "return", "False", "\n", "", "logger", ".", "info", "(", "\n", "f\"check_make_dir: directory_path did not exist and was created: {directory_path}\"", "\n", ")", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.cull_string_list_by_substrings": [[33, 55], ["culled_list.append"], "function", ["None"], ["", "def", "cull_string_list_by_substrings", "(", "\n", "full_list", ":", "List", "[", "str", "]", ",", "\n", "included_substrings", ":", "List", "[", "str", "]", ",", "\n", "excluded_substrings", ":", "List", "[", "str", "]", ",", "\n", ")", "->", "List", "[", "str", "]", ":", "\n", "    ", "\"\"\"\n    Cull a list of strings to the subset of strings containing any of the \"included_substrings\" and none of the \"excluded_substrings\".\n    Returns the culled list, does not modify the input list.\n    \"\"\"", "\n", "culled_list", ":", "List", "[", "str", "]", "=", "[", "]", "\n", "for", "string", "in", "full_list", ":", "\n", "        ", "excluded", "=", "False", "\n", "for", "excluded_substring", "in", "excluded_substrings", ":", "\n", "            ", "if", "excluded_substring", "in", "string", ":", "\n", "                ", "excluded", "=", "True", "\n", "break", "\n", "", "", "if", "not", "excluded", ":", "\n", "            ", "for", "included_substring", "in", "included_substrings", ":", "\n", "                ", "if", "included_substring", "in", "string", ":", "\n", "                    ", "culled_list", ".", "append", "(", "string", ")", "\n", "break", "\n", "", "", "", "", "return", "culled_list", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.gym_definitions._get_gym_name": [[31, 35], ["None"], "function", ["None"], ["def", "_get_gym_name", "(", "cfg", ":", "Config", ")", "->", "Optional", "[", "str", "]", ":", "\n", "    ", "if", "\"GYM\"", "in", "cfg", "and", "\"AUTO_NAME\"", "in", "cfg", "[", "\"GYM\"", "]", ":", "\n", "        ", "return", "cfg", "[", "\"GYM\"", "]", "[", "\"AUTO_NAME\"", "]", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.gym_definitions._get_env_name": [[37, 45], ["len"], "function", ["None"], ["", "def", "_get_env_name", "(", "cfg", ":", "Config", ")", "->", "Optional", "[", "str", "]", ":", "\n", "    ", "if", "(", "\n", "\"GYM\"", "in", "cfg", "\n", "and", "\"AUTO_NAME\"", "in", "cfg", "[", "\"GYM\"", "]", "\n", "and", "len", "(", "cfg", "[", "\"GYM\"", "]", "[", "\"CLASS_NAME\"", "]", ")", ">", "1", "\n", ")", ":", "\n", "        ", "return", "cfg", "[", "\"GYM\"", "]", "[", "\"CLASS_NAME\"", "]", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.gym_definitions._make_habitat_gym_env": [[47, 81], ["habitat.get_config", "habitat.get_config", "habitat.get_config", "habitat.get_config", "gym_definitions._get_env_name", "habitat.core.environments.get_env_class", "habitat.utils.env_utils.make_env_fn", "habitat.utils.env_utils.make_env_fn", "habitat.utils.gym_adapter.HabGymWrapper", "override_options.extend", "habitat.utils.render_wrapper.HabRenderWrapper"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.gym_definitions._get_env_name", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.environments.get_env_class", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.env_utils.make_env_fn", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.env_utils.make_env_fn"], ["", "def", "_make_habitat_gym_env", "(", "\n", "cfg_file_path", ":", "str", ",", "\n", "override_options", ":", "List", "[", "Any", "]", "=", "None", ",", "\n", "use_render_mode", ":", "bool", "=", "False", ",", "\n", ")", ":", "\n", "    ", "if", "override_options", "is", "None", ":", "\n", "        ", "override_options", "=", "[", "]", "\n", "\n", "", "config", "=", "habitat", ".", "get_config", "(", "cfg_file_path", ")", "\n", "\n", "sensors", "=", "config", "[", "\"SIMULATOR\"", "]", "[", "\"AGENT_0\"", "]", "[", "\"SENSORS\"", "]", "\n", "\n", "if", "use_render_mode", ":", "\n", "        ", "override_options", ".", "extend", "(", "\n", "[", "\n", "\"SIMULATOR.AGENT_0.SENSORS\"", ",", "\n", "[", "*", "sensors", ",", "\"THIRD_RGB_SENSOR\"", "]", ",", "\n", "]", "\n", ")", "\n", "\n", "# Re-loading the config since we modified the override_options", "\n", "", "config", "=", "habitat", ".", "get_config", "(", "cfg_file_path", ",", "override_options", ")", "\n", "\n", "env_class_name", "=", "_get_env_name", "(", "config", ")", "\n", "env_class", "=", "get_env_class", "(", "env_class_name", ")", "\n", "\n", "env", "=", "habitat", ".", "utils", ".", "env_utils", ".", "make_env_fn", "(", "\n", "env_class", "=", "env_class", ",", "config", "=", "config", "\n", ")", "\n", "env", "=", "HabGymWrapper", "(", "env", ")", "\n", "if", "use_render_mode", ":", "\n", "        ", "env", "=", "HabRenderWrapper", "(", "env", ")", "\n", "\n", "", "return", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.gym_definitions._try_register": [[83, 90], ["gym.envs.registration.register"], "function", ["None"], ["", "def", "_try_register", "(", "id_name", ",", "entry_point", ",", "kwargs", ")", ":", "\n", "    ", "if", "id_name", "in", "registry", ".", "env_specs", ":", "\n", "        ", "return", "\n", "", "register", "(", "\n", "id_name", ",", "\n", "entry_point", "=", "entry_point", ",", "\n", "kwargs", "=", "kwargs", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.test_utils.sample_non_stop_action": [[10, 22], ["range", "action_space.sample", "samples.append", "action_space.sample"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.sample", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.sample"], ["def", "sample_non_stop_action", "(", "action_space", ",", "num_samples", "=", "1", ")", ":", "\n", "    ", "samples", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "num_samples", ")", ":", "\n", "        ", "action", "=", "action_space", ".", "sample", "(", ")", "\n", "while", "action", "[", "\"action\"", "]", "==", "StopAction", ".", "name", ":", "\n", "            ", "action", "=", "action_space", ".", "sample", "(", ")", "\n", "", "samples", ".", "append", "(", "{", "\"action\"", ":", "action", "}", ")", "\n", "\n", "", "if", "num_samples", "==", "1", ":", "\n", "        ", "return", "samples", "[", "0", "]", "[", "\"action\"", "]", "\n", "", "else", ":", "\n", "        ", "return", "samples", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.env_utils.make_env_fn": [[15, 35], ["habitat.make_dataset", "env_class", "env_class.seed"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.registration.make_dataset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.seed"], ["def", "make_env_fn", "(", "\n", "config", ":", "Config", ",", "env_class", ":", "Union", "[", "Type", "[", "Env", "]", ",", "Type", "[", "RLEnv", "]", "]", "\n", ")", "->", "Union", "[", "Env", ",", "RLEnv", "]", ":", "\n", "    ", "r\"\"\"Creates an env of type env_class with specified config and rank.\n    This is to be passed in as an argument when creating VectorEnv.\n\n    Args:\n        config: root exp config that has core env config node as well as\n            env-specific config node.\n        env_class: class type of the env to be created.\n\n    Returns:\n        env object created according to specification.\n    \"\"\"", "\n", "if", "\"TASK_CONFIG\"", "in", "config", ":", "\n", "        ", "config", "=", "config", ".", "TASK_CONFIG", "\n", "", "dataset", "=", "make_dataset", "(", "config", ".", "DATASET", ".", "TYPE", ",", "config", "=", "config", ".", "DATASET", ")", "\n", "env", "=", "env_class", "(", "config", "=", "config", ",", "dataset", "=", "dataset", ")", "\n", "env", ".", "seed", "(", "config", ".", "SEED", ")", "\n", "return", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.env_utils.construct_envs": [[37, 119], ["habitat.make_dataset", "random.shuffle", "range", "os.environ.get", "vector_env_cls", "habitat.make_dataset.get_scenes_to_load", "RuntimeError", "len", "RuntimeError", "len", "habitat.logger.warn", "enumerate", "config.clone", "config.clone.defrost", "config.clone.freeze", "configs.append", "habitat.logger.warn", "range", "range", "scene_splits[].append", "sum", "len", "len", "tuple", "split.append", "map", "zip", "len", "len"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.registration.make_dataset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.get_scenes_to_load", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.map"], ["", "def", "construct_envs", "(", "\n", "config", ":", "Config", ",", "\n", "env_class", ":", "Union", "[", "Type", "[", "Env", "]", ",", "Type", "[", "RLEnv", "]", "]", ",", "\n", "workers_ignore_signals", ":", "bool", "=", "False", ",", "\n", ")", "->", "VectorEnv", ":", "\n", "    ", "r\"\"\"Create VectorEnv object with specified config and env class type.\n    To allow better performance, dataset are split into small ones for\n    each individual env, grouped by scenes.\n\n    :param config: configs that contain num_environments as well as information\n    :param necessary to create individual environments.\n    :param env_class: class type of the envs to be created.\n    :param workers_ignore_signals: Passed to :ref:`habitat.VectorEnv`'s constructor\n\n    :return: VectorEnv object created according to specification.\n    \"\"\"", "\n", "\n", "num_environments", "=", "config", ".", "NUM_ENVIRONMENTS", "\n", "configs", "=", "[", "]", "\n", "env_classes", "=", "[", "env_class", "for", "_", "in", "range", "(", "num_environments", ")", "]", "\n", "dataset", "=", "make_dataset", "(", "config", ".", "TASK_CONFIG", ".", "DATASET", ".", "TYPE", ")", "\n", "scenes", "=", "config", ".", "TASK_CONFIG", ".", "DATASET", ".", "CONTENT_SCENES", "\n", "if", "\"*\"", "in", "config", ".", "TASK_CONFIG", ".", "DATASET", ".", "CONTENT_SCENES", ":", "\n", "        ", "scenes", "=", "dataset", ".", "get_scenes_to_load", "(", "config", ".", "TASK_CONFIG", ".", "DATASET", ")", "\n", "\n", "", "if", "num_environments", "<", "1", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"NUM_ENVIRONMENTS must be strictly positive\"", ")", "\n", "\n", "", "if", "len", "(", "scenes", ")", "==", "0", ":", "\n", "        ", "raise", "RuntimeError", "(", "\n", "\"No scenes to load, multiple process logic relies on being able to split scenes uniquely between processes\"", "\n", ")", "\n", "\n", "", "random", ".", "shuffle", "(", "scenes", ")", "\n", "\n", "scene_splits", ":", "List", "[", "List", "[", "str", "]", "]", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_environments", ")", "]", "\n", "if", "len", "(", "scenes", ")", "<", "num_environments", ":", "\n", "        ", "logger", ".", "warn", "(", "\n", "f\"There are less scenes ({len(scenes)}) than environments ({num_environments}). \"", "\n", "\"Each environment will use all the scenes instead of using a subset.\"", "\n", ")", "\n", "for", "scene", "in", "scenes", ":", "\n", "            ", "for", "split", "in", "scene_splits", ":", "\n", "                ", "split", ".", "append", "(", "scene", ")", "\n", "", "", "", "else", ":", "\n", "        ", "for", "idx", ",", "scene", "in", "enumerate", "(", "scenes", ")", ":", "\n", "            ", "scene_splits", "[", "idx", "%", "len", "(", "scene_splits", ")", "]", ".", "append", "(", "scene", ")", "\n", "", "assert", "sum", "(", "map", "(", "len", ",", "scene_splits", ")", ")", "==", "len", "(", "scenes", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "num_environments", ")", ":", "\n", "        ", "proc_config", "=", "config", ".", "clone", "(", ")", "\n", "proc_config", ".", "defrost", "(", ")", "\n", "\n", "task_config", "=", "proc_config", ".", "TASK_CONFIG", "\n", "task_config", ".", "SEED", "=", "task_config", ".", "SEED", "+", "i", "\n", "if", "len", "(", "scenes", ")", ">", "0", ":", "\n", "            ", "task_config", ".", "DATASET", ".", "CONTENT_SCENES", "=", "scene_splits", "[", "i", "]", "\n", "\n", "", "task_config", ".", "SIMULATOR", ".", "HABITAT_SIM_V0", ".", "GPU_DEVICE_ID", "=", "(", "\n", "config", ".", "SIMULATOR_GPU_ID", "\n", ")", "\n", "\n", "task_config", ".", "SIMULATOR", ".", "AGENT_0", ".", "SENSORS", "=", "config", ".", "SENSORS", "\n", "\n", "proc_config", ".", "freeze", "(", ")", "\n", "configs", ".", "append", "(", "proc_config", ")", "\n", "\n", "", "vector_env_cls", ":", "Type", "[", "Any", "]", "\n", "if", "os", ".", "environ", ".", "get", "(", "\"HABITAT_ENV_DEBUG\"", ",", "0", ")", ":", "\n", "        ", "logger", ".", "warn", "(", "\n", "\"Using the debug Vector environment interface. Expect slower performance.\"", "\n", ")", "\n", "vector_env_cls", "=", "habitat", ".", "ThreadedVectorEnv", "\n", "", "else", ":", "\n", "        ", "vector_env_cls", "=", "habitat", ".", "VectorEnv", "\n", "\n", "", "envs", "=", "vector_env_cls", "(", "\n", "make_env_fn", "=", "make_env_fn", ",", "\n", "env_fn_args", "=", "tuple", "(", "zip", "(", "configs", ",", "env_classes", ")", ")", ",", "\n", "workers_ignore_signals", "=", "workers_ignore_signals", ",", "\n", ")", "\n", "return", "envs", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.pickle5_multiprocessing.ConnectionWrapper.__init__": [[54, 56], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "conn", ":", "Connection", ")", ":", "\n", "        ", "self", ".", "conn", ":", "Connection", "=", "conn", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.pickle5_multiprocessing.ConnectionWrapper.send": [[57, 63], ["pickle5_multiprocessing.ConnectionWrapper._check_closed", "pickle5_multiprocessing.ConnectionWrapper._check_writable", "io.BytesIO", "ForkingPickler5().dump", "pickle5_multiprocessing.ConnectionWrapper.send_bytes", "io.BytesIO.getvalue", "ForkingPickler5"], "methods", ["None"], ["", "def", "send", "(", "self", ",", "obj", ")", ":", "\n", "        ", "self", ".", "_check_closed", "(", ")", "\n", "self", ".", "_check_writable", "(", ")", "\n", "buf", "=", "io", ".", "BytesIO", "(", ")", "\n", "ForkingPickler5", "(", "buf", ",", "-", "1", ")", ".", "dump", "(", "obj", ")", "\n", "self", ".", "send_bytes", "(", "buf", ".", "getvalue", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.pickle5_multiprocessing.ConnectionWrapper.recv": [[64, 69], ["pickle5_multiprocessing.ConnectionWrapper._check_closed", "pickle5_multiprocessing.ConnectionWrapper._check_readable", "pickle5_multiprocessing.ConnectionWrapper.recv_bytes", "pickle.loads"], "methods", ["None"], ["", "def", "recv", "(", "self", ")", ":", "\n", "        ", "self", ".", "_check_closed", "(", ")", "\n", "self", ".", "_check_readable", "(", ")", "\n", "buf", "=", "self", ".", "recv_bytes", "(", ")", "\n", "return", "pickle", ".", "loads", "(", "buf", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.pickle5_multiprocessing.ConnectionWrapper.__getattr__": [[70, 76], ["AttributeError", "getattr", "type"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "\"conn\"", "in", "self", ".", "__dict__", ":", "\n", "            ", "return", "getattr", "(", "self", ".", "conn", ",", "name", ")", "\n", "", "raise", "AttributeError", "(", "\n", "\"'{}' object has no attribute '{}'\"", ".", "format", "(", "\n", "type", "(", "self", ")", ".", "__name__", ",", "\"conn\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.CustomFixedCategorical.sample": [[48, 52], ["torch.Size", "super().sample().unsqueeze", "super().sample"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.sample"], ["break", "\n", "", "", "if", "not", "excluded", ":", "\n", "            ", "for", "included_substring", "in", "included_substrings", ":", "\n", "                ", "if", "included_substring", "in", "string", ":", "\n", "                    ", "culled_list", ".", "append", "(", "string", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.CustomFixedCategorical.log_probs": [[53, 60], ["super().log_prob().view().sum().unsqueeze", "super().log_prob().view().sum", "super().log_prob().view", "actions.size", "super().log_prob", "actions.squeeze"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size"], ["break", "\n", "", "", "", "", "return", "culled_list", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.CustomFixedCategorical.mode": [[62, 64], ["common.CustomFixedCategorical.probs.argmax"], "methods", ["None"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.CategoricalNet.__init__": [[67, 74], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.init.orthogonal_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.CategoricalNet.forward": [[75, 78], ["common.CategoricalNet.linear", "common.CustomFixedCategorical"], "methods", ["None"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.CustomNormal.sample": [[81, 85], ["torch.Size", "super().rsample"], "methods", ["None"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.CustomNormal.log_probs": [[86, 89], ["super().log_prob().sum().unsqueeze", "super().log_prob().sum", "super().log_prob"], "methods", ["None"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.CustomNormal.entropy": [[90, 92], ["super().entropy().sum().unsqueeze", "super().entropy().sum", "super().entropy"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.CustomNormal.entropy"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.GaussianNet.__init__": [[95, 129], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.init.orthogonal_", "torch.nn.init.constant_", "torch.nn.parameter.Parameter", "torch.nn.Linear", "torch.nn.init.orthogonal_", "torch.nn.init.constant_", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.GaussianNet.forward": [[130, 148], ["common.GaussianNet.mu", "common.CustomNormal", "torch.tanh", "common.GaussianNet.std", "torch.clamp", "torch.exp", "torch.nn.functional.softplus"], "methods", ["None"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.ObservationBatchingCache.get": [[170, 211], ["torch.empty", "tuple", "sensor.type", "cache.numpy.numpy.pin_memory", "cache.numpy.numpy.numpy", "sensor.size", "sensor.size"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.linear_decay": [[150, 161], ["float"], "function", ["None"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.batch_obs": [[213, 298], ["torch.no_grad", "habitat.utils.profiling_wrapper.RangeContext", "habitat_baselines.common.tensor_dict.TensorDict", "sorted", "collections.defaultdict", "obs.keys", "enumerate", "batch_t.map_in_place", "isinstance", "batch_t[].to", "torch.stack", "batch[].append", "isinstance", "torch.from_numpy", "v.to", "isinstance", "numpy.prod", "torch.as_tensor", "cache.get", "torch.is_tensor", "len", "torch.as_tensor", "[].copy_", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.map_in_place", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.get_checkpoint_id": [[300, 315], ["os.path.basename", "int", "len", "os.path.basename.split", "s.isdigit"], "function", ["None"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.poll_checkpoint_folder": [[317, 342], ["os.path.isdir", "list", "list.sort", "filter", "len", "glob.glob"], "function", ["None"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.generate_video": [[344, 403], ["len", "list", "metric_strs.append", "habitat.utils.visualizations.utils.images_to_video", "tb_writer.add_video_from_np_images", "len", "metrics.keys", "any"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.utils.images_to_video", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensorboard_utils.WeightsAndBiasesWriter.add_video_from_np_images"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.tensor_to_depth_images": [[406, 422], ["images.append", "img_tensor.permute().cpu().numpy", "img_tensor.permute().cpu", "img_tensor.permute"], "function", ["None"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.tensor_to_bgr_images": [[424, 442], ["cv2.cvtColor.astype", "cv2.cvtColor", "images.append", "img_tensor.permute().cpu().numpy", "img_tensor.permute().cpu", "img_tensor.permute"], "function", ["None"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.image_resize_shortest_edge": [[444, 492], ["torch.as_tensor", "common.get_image_height_width", "int", "int", "torch.nn.functional.interpolate().to", "len", "NotImplementedError", "img.permute.unsqueeze", "min", "img.permute.squeeze", "len", "len", "len", "img.permute.permute", "img.permute.permute", "torch.nn.functional.interpolate", "len", "img.permute.permute", "img.permute.permute", "img.permute.float"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.get_image_height_width", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.center_crop": [[494, 521], ["common.get_image_height_width", "isinstance", "len", "int", "int"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.get_image_height_width"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.get_image_height_width": [[523, 536], ["NotImplementedError", "len", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.overwrite_gym_box_shape": [[538, 545], ["gym.spaces.Box", "list", "list", "numpy.isscalar", "numpy.min", "numpy.isscalar", "numpy.max", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.get_scene_episode_dict": [[547, 559], ["scene_ids.append", "scene_episode_dict[].append"], "function", ["None"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.base_plus_ext": [[561, 571], ["re.match", "re.match.group", "re.match.group"], "function", ["None"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.valid_sample": [[573, 582], ["isinstance", "len", "sample.get", "list", "sample.keys"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.img_bytes_2_np_array": [[585, 605], ["io.BytesIO", "io.BytesIO.write", "numpy.array", "np.array.transpose", "images.append", "numpy.array", "PIL.Image.open"], "function", ["None"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.create_tar_archive": [[607, 616], ["habitat.logger.info", "tarfile.open", "sorted", "os.listdir", "tar.add", "os.path.join"], "function", ["None"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.delete_folder": [[618, 620], ["shutil.rmtree"], "function", ["None"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.action_to_velocity_control": [[622, 638], ["torch.clip", "lin_vel.item", "ang_vel.item"], "function", ["None"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.is_continuous_action_space": [[640, 651], ["action_space.spaces.values", "isinstance", "isinstance", "common.is_continuous_action_space", "isinstance"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.is_continuous_action_space"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.get_num_actions": [[653, 666], ["len", "queue.pop", "isinstance", "queue.extend", "isinstance", "queue.pop.spaces.values"], "function", ["None"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.action_array_to_dict": [[668, 706], ["tuple", "action_space.spaces.items", "action_name_to_lengths.items", "action_space.spaces.keys", "len", "isinstance", "act_dict.items", "numpy.clip", "np.clip.detach().cpu().numpy", "np.clip.detach().cpu", "np.clip.detach"], "function", ["None"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.maps.draw_agent": [[57, 91], ["scipy.ndimage.interpolation.rotate", "max", "cv2.resize", "habitat.utils.visualizations.utils.paste_overlapping_image", "int"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.utils.paste_overlapping_image"], ["def", "draw_agent", "(", "\n", "image", ":", "np", ".", "ndarray", ",", "\n", "agent_center_coord", ":", "Tuple", "[", "int", ",", "int", "]", ",", "\n", "agent_rotation", ":", "float", ",", "\n", "agent_radius_px", ":", "int", "=", "5", ",", "\n", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "r\"\"\"Return an image with the agent image composited onto it.\n    Args:\n        image: the image onto which to put the agent.\n        agent_center_coord: the image coordinates where to paste the agent.\n        agent_rotation: the agent's current rotation in radians.\n        agent_radius_px: 1/2 number of pixels the agent will be resized to.\n    Returns:\n        The modified background image. This operation is in place.\n    \"\"\"", "\n", "\n", "# Rotate before resize to keep good resolution.", "\n", "rotated_agent", "=", "scipy", ".", "ndimage", ".", "interpolation", ".", "rotate", "(", "\n", "AGENT_SPRITE", ",", "agent_rotation", "*", "180", "/", "np", ".", "pi", "\n", ")", "\n", "# Rescale because rotation may result in larger image than original, but", "\n", "# the agent sprite size should stay the same.", "\n", "initial_agent_size", "=", "AGENT_SPRITE", ".", "shape", "[", "0", "]", "\n", "new_size", "=", "rotated_agent", ".", "shape", "[", "0", "]", "\n", "agent_size_px", "=", "max", "(", "\n", "1", ",", "int", "(", "agent_radius_px", "*", "2", "*", "new_size", "/", "initial_agent_size", ")", "\n", ")", "\n", "resized_agent", "=", "cv2", ".", "resize", "(", "\n", "rotated_agent", ",", "\n", "(", "agent_size_px", ",", "agent_size_px", ")", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ",", "\n", ")", "\n", "utils", ".", "paste_overlapping_image", "(", "image", ",", "resized_agent", ",", "agent_center_coord", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.maps.pointnav_draw_target_birdseye_view": [[93, 186], ["numpy.linalg.norm", "numpy.maximum", "numpy.full", "zip", "cv2.circle", "numpy.round().astype", "maps.draw_agent", "numpy.rot90", "len", "len", "max", "numpy.ceil", "cv2.circle", "int", "numpy.round", "max", "numpy.log", "numpy.log", "int", "numpy.maximum"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.maps.draw_agent"], ["", "def", "pointnav_draw_target_birdseye_view", "(", "\n", "agent_position", ":", "np", ".", "ndarray", ",", "\n", "agent_heading", ":", "float", ",", "\n", "goal_position", ":", "np", ".", "ndarray", ",", "\n", "resolution_px", ":", "int", "=", "800", ",", "\n", "goal_radius", ":", "float", "=", "0.2", ",", "\n", "agent_radius_px", ":", "int", "=", "20", ",", "\n", "target_band_radii", ":", "Optional", "[", "List", "[", "float", "]", "]", "=", "None", ",", "\n", "target_band_colors", ":", "Optional", "[", "List", "[", "Tuple", "[", "int", ",", "int", ",", "int", "]", "]", "]", "=", "None", ",", "\n", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "r\"\"\"Return an image of agent w.r.t. centered target location for pointnav\n    tasks.\n\n    Args:\n        agent_position: the agent's current position.\n        agent_heading: the agent's current rotation in radians. This can be\n            found using the HeadingSensor.\n        goal_position: the pointnav task goal position.\n        resolution_px: number of pixels for the output image width and height.\n        goal_radius: how near the agent needs to be to be successful for the\n            pointnav task.\n        agent_radius_px: 1/2 number of pixels the agent will be resized to.\n        target_band_radii: distance in meters to the outer-radius of each band\n            in the target image.\n        target_band_colors: colors in RGB 0-255 for the bands in the target.\n    Returns:\n        Image centered on the goal with the agent's current relative position\n        and rotation represented by an arrow. To make the rotations align\n        visually with habitat, positive-z is up, positive-x is left and a\n        rotation of 0 points upwards in the output image and rotates clockwise.\n    \"\"\"", "\n", "if", "target_band_radii", "is", "None", ":", "\n", "        ", "target_band_radii", "=", "[", "20", ",", "10", ",", "5", ",", "2.5", ",", "1", "]", "\n", "", "if", "target_band_colors", "is", "None", ":", "\n", "        ", "target_band_colors", "=", "[", "\n", "(", "47", ",", "19", ",", "122", ")", ",", "\n", "(", "22", ",", "99", ",", "170", ")", ",", "\n", "(", "92", ",", "177", ",", "0", ")", ",", "\n", "(", "226", ",", "169", ",", "0", ")", ",", "\n", "(", "226", ",", "12", ",", "29", ")", ",", "\n", "]", "\n", "\n", "", "assert", "len", "(", "target_band_radii", ")", "==", "len", "(", "\n", "target_band_colors", "\n", ")", ",", "\"There must be an equal number of scales and colors.\"", "\n", "\n", "goal_agent_dist", "=", "np", ".", "linalg", ".", "norm", "(", "agent_position", "-", "goal_position", ",", "2", ")", "\n", "\n", "goal_distance_padding", "=", "np", ".", "maximum", "(", "\n", "2", ",", "2", "**", "np", ".", "ceil", "(", "np", ".", "log", "(", "np", ".", "maximum", "(", "1e-6", ",", "goal_agent_dist", ")", ")", "/", "np", ".", "log", "(", "2", ")", ")", "\n", ")", "\n", "movement_scale", "=", "1.0", "/", "goal_distance_padding", "\n", "half_res", "=", "resolution_px", "//", "2", "\n", "im_position", "=", "np", ".", "full", "(", "\n", "(", "resolution_px", ",", "resolution_px", ",", "3", ")", ",", "255", ",", "dtype", "=", "np", ".", "uint8", "\n", ")", "\n", "\n", "# Draw bands:", "\n", "for", "scale", ",", "color", "in", "zip", "(", "target_band_radii", ",", "target_band_colors", ")", ":", "\n", "        ", "if", "goal_distance_padding", "*", "4", ">", "scale", ":", "\n", "            ", "cv2", ".", "circle", "(", "\n", "im_position", ",", "\n", "(", "half_res", ",", "half_res", ")", ",", "\n", "max", "(", "2", ",", "int", "(", "half_res", "*", "scale", "*", "movement_scale", ")", ")", ",", "\n", "color", ",", "\n", "thickness", "=", "-", "1", ",", "\n", ")", "\n", "\n", "# Draw such that the agent being inside the radius is the circles", "\n", "# overlapping.", "\n", "", "", "cv2", ".", "circle", "(", "\n", "im_position", ",", "\n", "(", "half_res", ",", "half_res", ")", ",", "\n", "max", "(", "2", ",", "int", "(", "half_res", "*", "goal_radius", "*", "movement_scale", ")", ")", ",", "\n", "(", "127", ",", "0", ",", "0", ")", ",", "\n", "thickness", "=", "-", "1", ",", "\n", ")", "\n", "\n", "relative_position", "=", "agent_position", "-", "goal_position", "\n", "# swap x and z, remove y for (x,y,z) -> image coordinates.", "\n", "relative_position", "=", "relative_position", "[", "[", "2", ",", "0", "]", "]", "\n", "relative_position", "*=", "half_res", "*", "movement_scale", "\n", "relative_position", "+=", "half_res", "\n", "relative_position", "=", "np", ".", "round", "(", "relative_position", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "# Draw the agent", "\n", "draw_agent", "(", "im_position", ",", "relative_position", ",", "agent_heading", ",", "agent_radius_px", ")", "\n", "\n", "# Rotate twice to fix coordinate system to upwards being positive-z.", "\n", "# Rotate instead of flip to keep agent rotations in sync with egocentric", "\n", "# view.", "\n", "im_position", "=", "np", ".", "rot90", "(", "im_position", ",", "2", ")", "\n", "return", "im_position", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.maps.to_grid": [[188, 217], ["pathfinder.get_bounds", "int", "int", "RuntimeError", "abs", "abs"], "function", ["None"], ["", "def", "to_grid", "(", "\n", "realworld_x", ":", "float", ",", "\n", "realworld_y", ":", "float", ",", "\n", "grid_resolution", ":", "Tuple", "[", "int", ",", "int", "]", ",", "\n", "sim", ":", "Optional", "[", "\"HabitatSim\"", "]", "=", "None", ",", "\n", "pathfinder", "=", "None", ",", "\n", ")", "->", "Tuple", "[", "int", ",", "int", "]", ":", "\n", "    ", "r\"\"\"Return gridworld index of realworld coordinates assuming top-left corner\n    is the origin. The real world coordinates of lower left corner are\n    (coordinate_min, coordinate_min) and of top right corner are\n    (coordinate_max, coordinate_max)\n    \"\"\"", "\n", "if", "sim", "is", "None", "and", "pathfinder", "is", "None", ":", "\n", "        ", "raise", "RuntimeError", "(", "\n", "\"Must provide either a simulator or pathfinder instance\"", "\n", ")", "\n", "\n", "", "if", "pathfinder", "is", "None", ":", "\n", "        ", "pathfinder", "=", "sim", ".", "pathfinder", "\n", "\n", "", "lower_bound", ",", "upper_bound", "=", "pathfinder", ".", "get_bounds", "(", ")", "\n", "\n", "grid_size", "=", "(", "\n", "abs", "(", "upper_bound", "[", "2", "]", "-", "lower_bound", "[", "2", "]", ")", "/", "grid_resolution", "[", "0", "]", ",", "\n", "abs", "(", "upper_bound", "[", "0", "]", "-", "lower_bound", "[", "0", "]", ")", "/", "grid_resolution", "[", "1", "]", ",", "\n", ")", "\n", "grid_x", "=", "int", "(", "(", "realworld_x", "-", "lower_bound", "[", "2", "]", ")", "/", "grid_size", "[", "0", "]", ")", "\n", "grid_y", "=", "int", "(", "(", "realworld_y", "-", "lower_bound", "[", "0", "]", ")", "/", "grid_size", "[", "1", "]", ")", "\n", "return", "grid_x", ",", "grid_y", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.maps.from_grid": [[219, 249], ["pathfinder.get_bounds", "RuntimeError", "abs", "abs"], "function", ["None"], ["", "def", "from_grid", "(", "\n", "grid_x", ":", "int", ",", "\n", "grid_y", ":", "int", ",", "\n", "grid_resolution", ":", "Tuple", "[", "int", ",", "int", "]", ",", "\n", "sim", ":", "Optional", "[", "\"HabitatSim\"", "]", "=", "None", ",", "\n", "pathfinder", "=", "None", ",", "\n", ")", "->", "Tuple", "[", "float", ",", "float", "]", ":", "\n", "    ", "r\"\"\"Inverse of _to_grid function. Return real world coordinate from\n    gridworld assuming top-left corner is the origin. The real world\n    coordinates of lower left corner are (coordinate_min, coordinate_min) and\n    of top right corner are (coordinate_max, coordinate_max)\n    \"\"\"", "\n", "\n", "if", "sim", "is", "None", "and", "pathfinder", "is", "None", ":", "\n", "        ", "raise", "RuntimeError", "(", "\n", "\"Must provide either a simulator or pathfinder instance\"", "\n", ")", "\n", "\n", "", "if", "pathfinder", "is", "None", ":", "\n", "        ", "pathfinder", "=", "sim", ".", "pathfinder", "\n", "\n", "", "lower_bound", ",", "upper_bound", "=", "pathfinder", ".", "get_bounds", "(", ")", "\n", "\n", "grid_size", "=", "(", "\n", "abs", "(", "upper_bound", "[", "2", "]", "-", "lower_bound", "[", "2", "]", ")", "/", "grid_resolution", "[", "0", "]", ",", "\n", "abs", "(", "upper_bound", "[", "0", "]", "-", "lower_bound", "[", "0", "]", ")", "/", "grid_resolution", "[", "1", "]", ",", "\n", ")", "\n", "realworld_x", "=", "lower_bound", "[", "2", "]", "+", "grid_x", "*", "grid_size", "[", "0", "]", "\n", "realworld_y", "=", "lower_bound", "[", "0", "]", "+", "grid_y", "*", "grid_size", "[", "1", "]", "\n", "return", "realworld_x", ",", "realworld_y", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.maps._outline_border": [[251, 271], ["None"], "function", ["None"], ["", "def", "_outline_border", "(", "top_down_map", ")", ":", "\n", "    ", "left_right_block_nav", "=", "(", "top_down_map", "[", ":", ",", ":", "-", "1", "]", "==", "1", ")", "&", "(", "\n", "top_down_map", "[", ":", ",", ":", "-", "1", "]", "!=", "top_down_map", "[", ":", ",", "1", ":", "]", "\n", ")", "\n", "left_right_nav_block", "=", "(", "top_down_map", "[", ":", ",", "1", ":", "]", "==", "1", ")", "&", "(", "\n", "top_down_map", "[", ":", ",", ":", "-", "1", "]", "!=", "top_down_map", "[", ":", ",", "1", ":", "]", "\n", ")", "\n", "\n", "up_down_block_nav", "=", "(", "top_down_map", "[", ":", "-", "1", "]", "==", "1", ")", "&", "(", "\n", "top_down_map", "[", ":", "-", "1", "]", "!=", "top_down_map", "[", "1", ":", "]", "\n", ")", "\n", "up_down_nav_block", "=", "(", "top_down_map", "[", "1", ":", "]", "==", "1", ")", "&", "(", "\n", "top_down_map", "[", ":", "-", "1", "]", "!=", "top_down_map", "[", "1", ":", "]", "\n", ")", "\n", "\n", "top_down_map", "[", ":", ",", ":", "-", "1", "]", "[", "left_right_block_nav", "]", "=", "MAP_BORDER_INDICATOR", "\n", "top_down_map", "[", ":", ",", "1", ":", "]", "[", "left_right_nav_block", "]", "=", "MAP_BORDER_INDICATOR", "\n", "\n", "top_down_map", "[", ":", "-", "1", "]", "[", "up_down_block_nav", "]", "=", "MAP_BORDER_INDICATOR", "\n", "top_down_map", "[", "1", ":", "]", "[", "up_down_nav_block", "]", "=", "MAP_BORDER_INDICATOR", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.maps.calculate_meters_per_pixel": [[273, 289], ["pathfinder.get_bounds", "min", "RuntimeError", "abs"], "function", ["None"], ["", "def", "calculate_meters_per_pixel", "(", "\n", "map_resolution", ":", "int", ",", "sim", ":", "Optional", "[", "\"HabitatSim\"", "]", "=", "None", ",", "pathfinder", "=", "None", "\n", ")", ":", "\n", "    ", "r\"\"\"Calculate the meters_per_pixel for a given map resolution\"\"\"", "\n", "if", "sim", "is", "None", "and", "pathfinder", "is", "None", ":", "\n", "        ", "raise", "RuntimeError", "(", "\n", "\"Must provide either a simulator or pathfinder instance\"", "\n", ")", "\n", "\n", "", "if", "pathfinder", "is", "None", ":", "\n", "        ", "pathfinder", "=", "sim", ".", "pathfinder", "\n", "\n", "", "lower_bound", ",", "upper_bound", "=", "pathfinder", ".", "get_bounds", "(", ")", "\n", "return", "min", "(", "\n", "abs", "(", "upper_bound", "[", "coord", "]", "-", "lower_bound", "[", "coord", "]", ")", "/", "map_resolution", "\n", "for", "coord", "in", "[", "0", ",", "2", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.maps.get_topdown_map": [[292, 326], ["pathfinder.get_topdown_view().astype", "numpy.ascontiguousarray", "maps.calculate_meters_per_pixel", "maps._outline_border", "pathfinder.get_topdown_view"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.maps.calculate_meters_per_pixel", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.maps._outline_border"], ["", "def", "get_topdown_map", "(", "\n", "pathfinder", ",", "\n", "height", ":", "float", ",", "\n", "map_resolution", ":", "int", "=", "1024", ",", "\n", "draw_border", ":", "bool", "=", "True", ",", "\n", "meters_per_pixel", ":", "Optional", "[", "float", "]", "=", "None", ",", "\n", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "r\"\"\"Return a top-down occupancy map for a sim. Note, this only returns valid\n    values for whatever floor the agent is currently on.\n\n    :param pathfinder: A habitat-sim pathfinder instances to get the map from\n    :param height: The height in the environment to make the topdown map\n    :param map_resolution: Length of the longest side of the map.  Used to calculate :p:`meters_per_pixel`\n    :param draw_border: Whether or not to draw a border\n    :param meters_per_pixel: Overrides map_resolution an\n\n    :return: Image containing 0 if occupied, 1 if unoccupied, and 2 if border (if\n        the flag is set).\n    \"\"\"", "\n", "\n", "if", "meters_per_pixel", "is", "None", ":", "\n", "        ", "meters_per_pixel", "=", "calculate_meters_per_pixel", "(", "\n", "map_resolution", ",", "pathfinder", "=", "pathfinder", "\n", ")", "\n", "\n", "", "top_down_map", "=", "pathfinder", ".", "get_topdown_view", "(", "\n", "meters_per_pixel", "=", "meters_per_pixel", ",", "height", "=", "height", "\n", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "# Draw border if necessary", "\n", "if", "draw_border", ":", "\n", "        ", "_outline_border", "(", "top_down_map", ")", "\n", "\n", "", "return", "np", ".", "ascontiguousarray", "(", "top_down_map", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.maps.get_topdown_map_from_sim": [[328, 346], ["maps.get_topdown_map", "sim.get_agent"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.maps.get_topdown_map"], ["", "def", "get_topdown_map_from_sim", "(", "\n", "sim", ":", "\"HabitatSim\"", ",", "\n", "map_resolution", ":", "int", "=", "1024", ",", "\n", "draw_border", ":", "bool", "=", "True", ",", "\n", "meters_per_pixel", ":", "Optional", "[", "float", "]", "=", "None", ",", "\n", "agent_id", ":", "int", "=", "0", ",", "\n", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "r\"\"\"Wrapper around :py:`get_topdown_map` that retrieves that pathfinder and heigh from the current simulator\n\n    :param sim: Simulator instance.\n    :param agent_id: The agent ID\n    \"\"\"", "\n", "return", "get_topdown_map", "(", "\n", "sim", ".", "pathfinder", ",", "\n", "sim", ".", "get_agent", "(", "agent_id", ")", ".", "state", ".", "position", "[", "1", "]", ",", "\n", "map_resolution", ",", "\n", "draw_border", ",", "\n", "meters_per_pixel", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.maps.colorize_topdown_map": [[349, 378], ["numpy.array"], "function", ["None"], ["", "def", "colorize_topdown_map", "(", "\n", "top_down_map", ":", "np", ".", "ndarray", ",", "\n", "fog_of_war_mask", ":", "Optional", "[", "np", ".", "ndarray", "]", "=", "None", ",", "\n", "fog_of_war_desat_amount", ":", "float", "=", "0.5", ",", "\n", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "r\"\"\"Convert the top down map to RGB based on the indicator values.\n    Args:\n        top_down_map: A non-colored version of the map.\n        fog_of_war_mask: A mask used to determine which parts of the\n            top_down_map are visible\n            Non-visible parts will be desaturated\n        fog_of_war_desat_amount: Amount to desaturate the color of unexplored areas\n            Decreasing this value will make unexplored areas darker\n            Default: 0.5\n    Returns:\n        A colored version of the top-down map.\n    \"\"\"", "\n", "_map", "=", "TOP_DOWN_MAP_COLORS", "[", "top_down_map", "]", "\n", "\n", "if", "fog_of_war_mask", "is", "not", "None", ":", "\n", "        ", "fog_of_war_desat_values", "=", "np", ".", "array", "(", "[", "[", "fog_of_war_desat_amount", "]", ",", "[", "1.0", "]", "]", ")", "\n", "# Only desaturate things that are valid points as only valid points get revealed", "\n", "desat_mask", "=", "top_down_map", "!=", "MAP_INVALID_POINT", "\n", "\n", "_map", "[", "desat_mask", "]", "=", "(", "\n", "_map", "*", "fog_of_war_desat_values", "[", "fog_of_war_mask", "]", "\n", ")", ".", "astype", "(", "np", ".", "uint8", ")", "[", "desat_mask", "]", "\n", "\n", "", "return", "_map", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.maps.draw_path": [[380, 401], ["zip", "cv2.line"], "function", ["None"], ["", "def", "draw_path", "(", "\n", "top_down_map", ":", "np", ".", "ndarray", ",", "\n", "path_points", ":", "Sequence", "[", "Tuple", "]", ",", "\n", "color", ":", "int", "=", "10", ",", "\n", "thickness", ":", "int", "=", "2", ",", "\n", ")", "->", "None", ":", "\n", "    ", "r\"\"\"Draw path on top_down_map (in place) with specified color.\n    Args:\n        top_down_map: A colored version of the map.\n        color: color code of the path, from TOP_DOWN_MAP_COLORS.\n        path_points: list of points that specify the path to be drawn\n        thickness: thickness of the path.\n    \"\"\"", "\n", "for", "prev_pt", ",", "next_pt", "in", "zip", "(", "path_points", "[", ":", "-", "1", "]", ",", "path_points", "[", "1", ":", "]", ")", ":", "\n", "# Swapping x y", "\n", "        ", "cv2", ".", "line", "(", "\n", "top_down_map", ",", "\n", "prev_pt", "[", ":", ":", "-", "1", "]", ",", "\n", "next_pt", "[", ":", ":", "-", "1", "]", ",", "\n", "color", ",", "\n", "thickness", "=", "thickness", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.maps.colorize_draw_agent_and_fit_to_height": [[404, 440], ["maps.colorize_topdown_map", "maps.draw_agent", "int", "cv2.resize", "numpy.rot90", "min", "float"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.maps.colorize_topdown_map", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.maps.draw_agent"], ["", "", "def", "colorize_draw_agent_and_fit_to_height", "(", "\n", "topdown_map_info", ":", "Dict", "[", "str", ",", "Any", "]", ",", "output_height", ":", "int", "\n", ")", ":", "\n", "    ", "r\"\"\"Given the output of the TopDownMap measure, colorizes the map, draws the agent,\n    and fits to a desired output height\n\n    :param topdown_map_info: The output of the TopDownMap measure\n    :param output_height: The desired output height\n    \"\"\"", "\n", "top_down_map", "=", "topdown_map_info", "[", "\"map\"", "]", "\n", "top_down_map", "=", "colorize_topdown_map", "(", "\n", "top_down_map", ",", "topdown_map_info", "[", "\"fog_of_war_mask\"", "]", "\n", ")", "\n", "map_agent_pos", "=", "topdown_map_info", "[", "\"agent_map_coord\"", "]", "\n", "top_down_map", "=", "draw_agent", "(", "\n", "image", "=", "top_down_map", ",", "\n", "agent_center_coord", "=", "map_agent_pos", ",", "\n", "agent_rotation", "=", "topdown_map_info", "[", "\"agent_angle\"", "]", ",", "\n", "agent_radius_px", "=", "min", "(", "top_down_map", ".", "shape", "[", "0", ":", "2", "]", ")", "//", "32", ",", "\n", ")", "\n", "\n", "if", "top_down_map", ".", "shape", "[", "0", "]", ">", "top_down_map", ".", "shape", "[", "1", "]", ":", "\n", "        ", "top_down_map", "=", "np", ".", "rot90", "(", "top_down_map", ",", "1", ")", "\n", "\n", "# scale top down map to align with rgb view", "\n", "", "old_h", ",", "old_w", ",", "_", "=", "top_down_map", ".", "shape", "\n", "top_down_height", "=", "output_height", "\n", "top_down_width", "=", "int", "(", "float", "(", "top_down_height", ")", "/", "old_h", "*", "old_w", ")", "\n", "# cv2 resize (dsize is width first)", "\n", "top_down_map", "=", "cv2", ".", "resize", "(", "\n", "top_down_map", ",", "\n", "(", "top_down_width", ",", "top_down_height", ")", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ",", "\n", ")", "\n", "\n", "return", "top_down_map", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.fog_of_war.bresenham_supercover_line": [[13, 79], ["numba.jit", "range", "range", "int", "line_pts.append", "int", "line_pts.append", "line_pts.append", "line_pts.append", "line_pts.append", "line_pts.append", "line_pts.append", "line_pts.append", "line_pts.append", "line_pts.append"], "function", ["None"], ["@", "numba", ".", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "bresenham_supercover_line", "(", "pt1", ",", "pt2", ")", ":", "\n", "    ", "r\"\"\"Line drawing algo based\n    on http://eugen.dedu.free.fr/projects/bresenham/\n    \"\"\"", "\n", "\n", "ystep", ",", "xstep", "=", "1", ",", "1", "\n", "\n", "x", ",", "y", "=", "pt1", "\n", "dx", ",", "dy", "=", "pt2", "-", "pt1", "\n", "\n", "if", "dy", "<", "0", ":", "\n", "        ", "ystep", "*=", "-", "1", "\n", "dy", "*=", "-", "1", "\n", "\n", "", "if", "dx", "<", "0", ":", "\n", "        ", "xstep", "*=", "-", "1", "\n", "dx", "*=", "-", "1", "\n", "\n", "", "line_pts", "=", "[", "[", "x", ",", "y", "]", "]", "\n", "\n", "ddx", ",", "ddy", "=", "2", "*", "dx", ",", "2", "*", "dy", "\n", "if", "ddx", ">", "ddy", ":", "\n", "        ", "errorprev", "=", "dx", "\n", "error", "=", "dx", "\n", "for", "_", "in", "range", "(", "int", "(", "dx", ")", ")", ":", "\n", "            ", "x", "+=", "xstep", "\n", "error", "+=", "ddy", "\n", "\n", "if", "error", ">", "ddx", ":", "\n", "                ", "y", "+=", "ystep", "\n", "error", "-=", "ddx", "\n", "if", "error", "+", "errorprev", "<", "ddx", ":", "\n", "                    ", "line_pts", ".", "append", "(", "[", "x", ",", "y", "-", "ystep", "]", ")", "\n", "", "elif", "error", "+", "errorprev", ">", "ddx", ":", "\n", "                    ", "line_pts", ".", "append", "(", "[", "x", "-", "xstep", ",", "y", "]", ")", "\n", "", "else", ":", "\n", "                    ", "line_pts", ".", "append", "(", "[", "x", "-", "xstep", ",", "y", "]", ")", "\n", "line_pts", ".", "append", "(", "[", "x", ",", "y", "-", "ystep", "]", ")", "\n", "\n", "", "", "line_pts", ".", "append", "(", "[", "x", ",", "y", "]", ")", "\n", "\n", "errorprev", "=", "error", "\n", "", "", "else", ":", "\n", "        ", "errorprev", "=", "dx", "\n", "error", "=", "dx", "\n", "for", "_", "in", "range", "(", "int", "(", "dy", ")", ")", ":", "\n", "            ", "y", "+=", "ystep", "\n", "error", "+=", "ddx", "\n", "\n", "if", "error", ">", "ddy", ":", "\n", "                ", "x", "+=", "xstep", "\n", "error", "-=", "ddy", "\n", "if", "error", "+", "errorprev", "<", "ddy", ":", "\n", "                    ", "line_pts", ".", "append", "(", "[", "x", "-", "xstep", ",", "y", "]", ")", "\n", "", "elif", "error", "+", "errorprev", ">", "ddy", ":", "\n", "                    ", "line_pts", ".", "append", "(", "[", "x", ",", "y", "-", "ystep", "]", ")", "\n", "", "else", ":", "\n", "                    ", "line_pts", ".", "append", "(", "[", "x", "-", "xstep", ",", "y", "]", ")", "\n", "line_pts", ".", "append", "(", "[", "x", ",", "y", "-", "ystep", "]", ")", "\n", "\n", "", "", "line_pts", ".", "append", "(", "[", "x", ",", "y", "]", ")", "\n", "\n", "errorprev", "=", "error", "\n", "\n", "", "", "return", "line_pts", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.fog_of_war.draw_fog_of_war_line": [[81, 98], ["numba.jit", "fog_of_war.bresenham_supercover_line"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.fog_of_war.bresenham_supercover_line"], ["", "@", "numba", ".", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "draw_fog_of_war_line", "(", "top_down_map", ",", "fog_of_war_mask", ",", "pt1", ",", "pt2", ")", ":", "\n", "    ", "r\"\"\"Draws a line on the fog_of_war_mask mask between pt1 and pt2\"\"\"", "\n", "\n", "for", "pt", "in", "bresenham_supercover_line", "(", "pt1", ",", "pt2", ")", ":", "\n", "        ", "x", ",", "y", "=", "pt", "\n", "\n", "if", "x", "<", "0", "or", "x", ">=", "fog_of_war_mask", ".", "shape", "[", "0", "]", ":", "\n", "            ", "break", "\n", "\n", "", "if", "y", "<", "0", "or", "y", ">=", "fog_of_war_mask", ".", "shape", "[", "1", "]", ":", "\n", "            ", "break", "\n", "\n", "", "if", "top_down_map", "[", "x", ",", "y", "]", "==", "maps", ".", "MAP_INVALID_POINT", ":", "\n", "            ", "break", "\n", "\n", "", "fog_of_war_mask", "[", "x", ",", "y", "]", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.fog_of_war._draw_loop": [[100, 118], ["numba.jit", "fog_of_war.draw_fog_of_war_line", "numpy.array", "numpy.cos", "numpy.sin"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.fog_of_war.draw_fog_of_war_line"], ["", "", "@", "numba", ".", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "_draw_loop", "(", "\n", "top_down_map", ",", "\n", "fog_of_war_mask", ",", "\n", "current_point", ",", "\n", "current_angle", ",", "\n", "max_line_len", ",", "\n", "angles", ",", "\n", ")", ":", "\n", "    ", "for", "angle", "in", "angles", ":", "\n", "        ", "draw_fog_of_war_line", "(", "\n", "top_down_map", ",", "\n", "fog_of_war_mask", ",", "\n", "current_point", ",", "\n", "current_point", "\n", "+", "max_line_len", "\n", "*", "np", ".", "array", "(", "\n", "[", "np", ".", "cos", "(", "current_angle", "+", "angle", ")", ",", "np", ".", "sin", "(", "current_angle", "+", "angle", ")", "]", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.fog_of_war.reveal_fog_of_war": [[122, 164], ["numpy.deg2rad", "numpy.arange", "current_fog_of_war_mask.copy", "fog_of_war._draw_loop"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.fog_of_war._draw_loop"], ["", "", "def", "reveal_fog_of_war", "(", "\n", "top_down_map", ":", "np", ".", "ndarray", ",", "\n", "current_fog_of_war_mask", ":", "np", ".", "ndarray", ",", "\n", "current_point", ":", "np", ".", "ndarray", ",", "\n", "current_angle", ":", "float", ",", "\n", "fov", ":", "float", "=", "90", ",", "\n", "max_line_len", ":", "float", "=", "100", ",", "\n", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "r\"\"\"Reveals the fog-of-war at the current location\n\n    This works by simply drawing lines from the agents current location\n    and stopping once a wall is hit\n\n    Args:\n        top_down_map: The current top down map.  Used for respecting walls when revealing\n        current_fog_of_war_mask: The current fog-of-war mask to reveal the fog-of-war on\n        current_point: The current location of the agent on the fog_of_war_mask\n        current_angle: The current look direction of the agent on the fog_of_war_mask\n        fov: The feild of view of the agent\n        max_line_len: The maximum length of the lines used to reveal the fog-of-war\n\n    Returns:\n        The updated fog_of_war_mask\n    \"\"\"", "\n", "fov", "=", "np", ".", "deg2rad", "(", "fov", ")", "\n", "\n", "# Set the angle step to a value such that delta_angle * max_line_len = 1", "\n", "angles", "=", "np", ".", "arange", "(", "\n", "-", "fov", "/", "2", ",", "fov", "/", "2", ",", "step", "=", "1.0", "/", "max_line_len", ",", "dtype", "=", "np", ".", "float32", "\n", ")", "\n", "\n", "fog_of_war_mask", "=", "current_fog_of_war_mask", ".", "copy", "(", ")", "\n", "_draw_loop", "(", "\n", "top_down_map", ",", "\n", "fog_of_war_mask", ",", "\n", "current_point", ",", "\n", "current_angle", ",", "\n", "max_line_len", ",", "\n", "angles", ",", "\n", ")", "\n", "\n", "return", "fog_of_war_mask", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.utils.paste_overlapping_image": [[22, 98], ["max", "max", "max", "max", "background_patch.astype", "foreground[].astype"], "function", ["None"], ["def", "paste_overlapping_image", "(", "\n", "background", ":", "np", ".", "ndarray", ",", "\n", "foreground", ":", "np", ".", "ndarray", ",", "\n", "location", ":", "Tuple", "[", "int", ",", "int", "]", ",", "\n", "mask", ":", "Optional", "[", "np", ".", "ndarray", "]", "=", "None", ",", "\n", ")", ":", "\n", "    ", "r\"\"\"Composites the foreground onto the background dealing with edge\n    boundaries.\n    Args:\n        background: the background image to paste on.\n        foreground: the image to paste. Can be RGB or RGBA. If using alpha\n            blending, values for foreground and background should both be\n            between 0 and 255. Otherwise behavior is undefined.\n        location: the image coordinates to paste the foreground.\n        mask: If not None, a mask for deciding what part of the foreground to\n            use. Must be the same size as the foreground if provided.\n    Returns:\n        The modified background image. This operation is in place.\n    \"\"\"", "\n", "assert", "mask", "is", "None", "or", "mask", ".", "shape", "[", ":", "2", "]", "==", "foreground", ".", "shape", "[", ":", "2", "]", "\n", "foreground_size", "=", "foreground", ".", "shape", "[", ":", "2", "]", "\n", "min_pad", "=", "(", "\n", "max", "(", "0", ",", "foreground_size", "[", "0", "]", "//", "2", "-", "location", "[", "0", "]", ")", ",", "\n", "max", "(", "0", ",", "foreground_size", "[", "1", "]", "//", "2", "-", "location", "[", "1", "]", ")", ",", "\n", ")", "\n", "\n", "max_pad", "=", "(", "\n", "max", "(", "\n", "0", ",", "\n", "(", "location", "[", "0", "]", "+", "(", "foreground_size", "[", "0", "]", "-", "foreground_size", "[", "0", "]", "//", "2", ")", ")", "\n", "-", "background", ".", "shape", "[", "0", "]", ",", "\n", ")", ",", "\n", "max", "(", "\n", "0", ",", "\n", "(", "location", "[", "1", "]", "+", "(", "foreground_size", "[", "1", "]", "-", "foreground_size", "[", "1", "]", "//", "2", ")", ")", "\n", "-", "background", ".", "shape", "[", "1", "]", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "background_patch", "=", "background", "[", "\n", "(", "location", "[", "0", "]", "-", "foreground_size", "[", "0", "]", "//", "2", "+", "min_pad", "[", "0", "]", ")", ":", "(", "\n", "location", "[", "0", "]", "\n", "+", "(", "foreground_size", "[", "0", "]", "-", "foreground_size", "[", "0", "]", "//", "2", ")", "\n", "-", "max_pad", "[", "0", "]", "\n", ")", ",", "\n", "(", "location", "[", "1", "]", "-", "foreground_size", "[", "1", "]", "//", "2", "+", "min_pad", "[", "1", "]", ")", ":", "(", "\n", "location", "[", "1", "]", "\n", "+", "(", "foreground_size", "[", "1", "]", "-", "foreground_size", "[", "1", "]", "//", "2", ")", "\n", "-", "max_pad", "[", "1", "]", "\n", ")", ",", "\n", "]", "\n", "foreground", "=", "foreground", "[", "\n", "min_pad", "[", "0", "]", ":", "foreground", ".", "shape", "[", "0", "]", "-", "max_pad", "[", "0", "]", ",", "\n", "min_pad", "[", "1", "]", ":", "foreground", ".", "shape", "[", "1", "]", "-", "max_pad", "[", "1", "]", ",", "\n", "]", "\n", "if", "foreground", ".", "size", "==", "0", "or", "background_patch", ".", "size", "==", "0", ":", "\n", "# Nothing to do, no overlap.", "\n", "        ", "return", "background", "\n", "\n", "", "if", "mask", "is", "not", "None", ":", "\n", "        ", "mask", "=", "mask", "[", "\n", "min_pad", "[", "0", "]", ":", "foreground", ".", "shape", "[", "0", "]", "-", "max_pad", "[", "0", "]", ",", "\n", "min_pad", "[", "1", "]", ":", "foreground", ".", "shape", "[", "1", "]", "-", "max_pad", "[", "1", "]", ",", "\n", "]", "\n", "\n", "", "if", "foreground", ".", "shape", "[", "2", "]", "==", "4", ":", "\n", "# Alpha blending", "\n", "        ", "foreground", "=", "(", "\n", "background_patch", ".", "astype", "(", "np", ".", "int32", ")", "*", "(", "255", "-", "foreground", "[", ":", ",", ":", ",", "[", "3", "]", "]", ")", "\n", "+", "foreground", "[", ":", ",", ":", ",", ":", "3", "]", ".", "astype", "(", "np", ".", "int32", ")", "*", "foreground", "[", ":", ",", ":", ",", "[", "3", "]", "]", "\n", ")", "//", "255", "\n", "", "if", "mask", "is", "not", "None", ":", "\n", "        ", "background_patch", "[", "mask", "]", "=", "foreground", "[", "mask", "]", "\n", "", "else", ":", "\n", "        ", "background_patch", "[", ":", "]", "=", "foreground", "\n", "", "return", "background", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.utils.images_to_video": [[100, 148], ["video_name.replace().replace.replace().replace", "video_name.replace().replace.split", "imageio.get_writer", "habitat.core.logging.logger.info", "imageio.get_writer.close", "os.path.exists", "os.makedirs", "os.path.join", "tqdm.tqdm", "imageio.get_writer.append_data", "video_name.replace().replace.replace", "os.path.join"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensorboard_utils.get_writer", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.close", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.exists"], ["", "def", "images_to_video", "(", "\n", "images", ":", "List", "[", "np", ".", "ndarray", "]", ",", "\n", "output_dir", ":", "str", ",", "\n", "video_name", ":", "str", ",", "\n", "fps", ":", "int", "=", "10", ",", "\n", "quality", ":", "Optional", "[", "float", "]", "=", "5", ",", "\n", "verbose", ":", "bool", "=", "True", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "    ", "r\"\"\"Calls imageio to run FFMPEG on a list of images. For more info on\n    parameters, see https://imageio.readthedocs.io/en/stable/format_ffmpeg.html\n    Args:\n        images: The list of images. Images should be HxWx3 in RGB order.\n        output_dir: The folder to put the video in.\n        video_name: The name for the video.\n        fps: Frames per second for the video. Not all values work with FFMPEG,\n            use at your own risk.\n        quality: Default is 5. Uses variable bit rate. Highest quality is 10,\n            lowest is 0.  Set to None to prevent variable bitrate flags to\n            FFMPEG so you can manually specify them using output_params\n            instead. Specifying a fixed bitrate using \u2018bitrate\u2019 disables\n            this parameter.\n    \"\"\"", "\n", "assert", "0", "<=", "quality", "<=", "10", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "", "video_name", "=", "video_name", ".", "replace", "(", "\" \"", ",", "\"_\"", ")", ".", "replace", "(", "\"\\n\"", ",", "\"_\"", ")", "\n", "\n", "# File names are not allowed to be over 255 characters", "\n", "video_name_split", "=", "video_name", ".", "split", "(", "\"/\"", ")", "\n", "video_name", "=", "\"/\"", ".", "join", "(", "\n", "video_name_split", "[", ":", "-", "1", "]", "+", "[", "video_name_split", "[", "-", "1", "]", "[", ":", "251", "]", "+", "\".mp4\"", "]", "\n", ")", "\n", "\n", "writer", "=", "imageio", ".", "get_writer", "(", "\n", "os", ".", "path", ".", "join", "(", "output_dir", ",", "video_name", ")", ",", "\n", "fps", "=", "fps", ",", "\n", "quality", "=", "quality", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "logger", ".", "info", "(", "f\"Video created: {os.path.join(output_dir, video_name)}\"", ")", "\n", "if", "verbose", ":", "\n", "        ", "images_iter", "=", "tqdm", ".", "tqdm", "(", "images", ")", "\n", "", "else", ":", "\n", "        ", "images_iter", "=", "images", "\n", "", "for", "im", "in", "images_iter", ":", "\n", "        ", "writer", ".", "append_data", "(", "im", ")", "\n", "", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.utils.draw_collision": [[150, 165], ["numpy.ones", "numpy.array"], "function", ["None"], ["", "def", "draw_collision", "(", "view", ":", "np", ".", "ndarray", ",", "alpha", ":", "float", "=", "0.4", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "r\"\"\"Draw translucent red strips on the border of input view to indicate\n    a collision has taken place.\n    Args:\n        view: input view of size HxWx3 in RGB order.\n        alpha: Opacity of red collision strip. 1 is completely non-transparent.\n    Returns:\n        A view with collision effect drawn.\n    \"\"\"", "\n", "strip_width", "=", "view", ".", "shape", "[", "0", "]", "//", "20", "\n", "mask", "=", "np", ".", "ones", "(", "view", ".", "shape", ")", "\n", "mask", "[", "strip_width", ":", "-", "strip_width", ",", "strip_width", ":", "-", "strip_width", "]", "=", "0", "\n", "mask", "=", "mask", "==", "1", "\n", "view", "[", "mask", "]", "=", "(", "alpha", "*", "np", ".", "array", "(", "[", "255", ",", "0", ",", "0", "]", ")", "+", "(", "1.0", "-", "alpha", ")", "*", "view", ")", "[", "mask", "]", "\n", "return", "view", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.utils.tile_images": [[167, 204], ["sorted", "img_cols.append", "sum", "numpy.zeros", "range", "max", "len", "numpy.concatenate", "col.append", "img_cols.append"], "function", ["None"], ["", "def", "tile_images", "(", "render_obs_images", ":", "List", "[", "np", ".", "ndarray", "]", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"Tiles multiple images of non-equal size to a single image. Images are\n    tiled into columns making the returned image wider than tall.\n    \"\"\"", "\n", "# Get the images in descending order of vertical height.", "\n", "render_obs_images", "=", "sorted", "(", "\n", "render_obs_images", ",", "key", "=", "lambda", "x", ":", "x", ".", "shape", "[", "0", "]", ",", "reverse", "=", "True", "\n", ")", "\n", "img_cols", "=", "[", "[", "render_obs_images", "[", "0", "]", "]", "]", "\n", "max_height", "=", "render_obs_images", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "cur_y", "=", "0.0", "\n", "# Arrange the images in columns with the largest image to the left.", "\n", "col", "=", "[", "]", "\n", "for", "im", "in", "render_obs_images", "[", "1", ":", "]", ":", "\n", "        ", "if", "cur_y", "+", "im", ".", "shape", "[", "0", "]", "<=", "max_height", ":", "\n", "            ", "col", ".", "append", "(", "im", ")", "\n", "cur_y", "+=", "im", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "img_cols", ".", "append", "(", "col", ")", "\n", "col", "=", "[", "im", "]", "\n", "cur_y", "=", "im", ".", "shape", "[", "0", "]", "\n", "", "", "img_cols", ".", "append", "(", "col", ")", "\n", "col_widths", "=", "[", "max", "(", "col_ele", ".", "shape", "[", "1", "]", "for", "col_ele", "in", "col", ")", "for", "col", "in", "img_cols", "]", "\n", "# Get the total width of all the columns put together.", "\n", "total_width", "=", "sum", "(", "col_widths", ")", "\n", "\n", "# Tile the images, pasting the columns side by side.", "\n", "final_im", "=", "np", ".", "zeros", "(", "\n", "(", "max_height", ",", "total_width", ",", "3", ")", ",", "dtype", "=", "render_obs_images", "[", "0", "]", ".", "dtype", "\n", ")", "\n", "cur_x", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "img_cols", ")", ")", ":", "\n", "        ", "next_x", "=", "cur_x", "+", "col_widths", "[", "i", "]", "\n", "total_col_im", "=", "np", ".", "concatenate", "(", "img_cols", "[", "i", "]", ",", "axis", "=", "0", ")", "\n", "final_im", "[", ":", "total_col_im", ".", "shape", "[", "0", "]", ",", "cur_x", ":", "next_x", "]", "=", "total_col_im", "\n", "cur_x", "=", "next_x", "\n", "", "return", "final_im", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.utils.observations_to_image": [[206, 262], ["render_obs_images.append", "len", "len", "utils.tile_images", "numpy.concatenate", "utils.draw_collision", "habitat.utils.visualizations.maps.colorize_draw_agent_and_fit_to_height", "numpy.concatenate", "render_obs_images.append", "isinstance", "rgb.cpu().numpy.cpu().numpy", "set", "isinstance", "rgb.cpu().numpy.cpu().numpy", "depth_map.cpu().numpy.astype", "numpy.stack", "render_obs_images.append", "observation[].squeeze", "isinstance", "depth_map.cpu().numpy.cpu().numpy", "rgb.cpu().numpy.cpu", "rgb.cpu().numpy.cpu", "depth_map.cpu().numpy.cpu", "range"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.utils.tile_images", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.utils.draw_collision", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.maps.colorize_draw_agent_and_fit_to_height", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.set"], ["", "def", "observations_to_image", "(", "observation", ":", "Dict", ",", "info", ":", "Dict", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "r\"\"\"Generate image of single frame from observation and info\n    returned from a single environment step().\n\n    Args:\n        observation: observation returned from an environment step().\n        info: info returned from an environment step().\n\n    Returns:\n        generated image of a single frame.\n    \"\"\"", "\n", "render_obs_images", ":", "List", "[", "np", ".", "ndarray", "]", "=", "[", "]", "\n", "for", "sensor_name", "in", "observation", ":", "\n", "        ", "if", "\"rgb\"", "in", "sensor_name", ":", "\n", "            ", "rgb", "=", "observation", "[", "sensor_name", "]", "\n", "if", "not", "isinstance", "(", "rgb", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "rgb", "=", "rgb", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "render_obs_images", ".", "append", "(", "rgb", ")", "\n", "", "elif", "\"depth\"", "in", "sensor_name", ":", "\n", "            ", "depth_map", "=", "observation", "[", "sensor_name", "]", ".", "squeeze", "(", ")", "*", "255.0", "\n", "if", "not", "isinstance", "(", "depth_map", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "depth_map", "=", "depth_map", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "depth_map", "=", "depth_map", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "depth_map", "=", "np", ".", "stack", "(", "[", "depth_map", "for", "_", "in", "range", "(", "3", ")", "]", ",", "axis", "=", "2", ")", "\n", "render_obs_images", ".", "append", "(", "depth_map", ")", "\n", "\n", "# add image goal if observation has image_goal info", "\n", "", "", "if", "\"imagegoal\"", "in", "observation", ":", "\n", "        ", "rgb", "=", "observation", "[", "\"imagegoal\"", "]", "\n", "if", "not", "isinstance", "(", "rgb", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "rgb", "=", "rgb", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "render_obs_images", ".", "append", "(", "rgb", ")", "\n", "\n", "", "assert", "(", "\n", "len", "(", "render_obs_images", ")", ">", "0", "\n", ")", ",", "\"Expected at least one visual sensor enabled.\"", "\n", "\n", "shapes_are_equal", "=", "len", "(", "set", "(", "x", ".", "shape", "for", "x", "in", "render_obs_images", ")", ")", "==", "1", "\n", "if", "not", "shapes_are_equal", ":", "\n", "        ", "render_frame", "=", "tile_images", "(", "render_obs_images", ")", "\n", "", "else", ":", "\n", "        ", "render_frame", "=", "np", ".", "concatenate", "(", "render_obs_images", ",", "axis", "=", "1", ")", "\n", "\n", "# draw collision", "\n", "", "if", "\"collisions\"", "in", "info", "and", "info", "[", "\"collisions\"", "]", "[", "\"is_collision\"", "]", ":", "\n", "        ", "render_frame", "=", "draw_collision", "(", "render_frame", ")", "\n", "\n", "", "if", "\"top_down_map\"", "in", "info", ":", "\n", "        ", "top_down_map", "=", "maps", ".", "colorize_draw_agent_and_fit_to_height", "(", "\n", "info", "[", "\"top_down_map\"", "]", ",", "render_frame", ".", "shape", "[", "0", "]", "\n", ")", "\n", "render_frame", "=", "np", ".", "concatenate", "(", "(", "render_frame", ",", "top_down_map", ")", ",", "axis", "=", "1", ")", "\n", "", "return", "render_frame", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.utils.append_text_to_image": [[264, 301], ["numpy.zeros", "textwrap.wrap", "numpy.concatenate", "cv2.getTextSize", "cv2.putText", "int", "cv2.getTextSize"], "function", ["None"], ["", "def", "append_text_to_image", "(", "image", ":", "np", ".", "ndarray", ",", "text", ":", "str", ")", ":", "\n", "    ", "r\"\"\"Appends text underneath an image of size (height, width, channels).\n    The returned image has white text on a black background. Uses textwrap to\n    split long text into multiple lines.\n    Args:\n        image: the image to put text underneath\n        text: a string to display\n    Returns:\n        A new image with text inserted underneath the input image\n    \"\"\"", "\n", "h", ",", "w", ",", "c", "=", "image", ".", "shape", "\n", "font_size", "=", "0.5", "\n", "font_thickness", "=", "1", "\n", "font", "=", "cv2", ".", "FONT_HERSHEY_SIMPLEX", "\n", "blank_image", "=", "np", ".", "zeros", "(", "image", ".", "shape", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "char_size", "=", "cv2", ".", "getTextSize", "(", "\" \"", ",", "font", ",", "font_size", ",", "font_thickness", ")", "[", "0", "]", "\n", "wrapped_text", "=", "textwrap", ".", "wrap", "(", "text", ",", "width", "=", "int", "(", "w", "/", "char_size", "[", "0", "]", ")", ")", "\n", "\n", "y", "=", "0", "\n", "for", "line", "in", "wrapped_text", ":", "\n", "        ", "textsize", "=", "cv2", ".", "getTextSize", "(", "line", ",", "font", ",", "font_size", ",", "font_thickness", ")", "[", "0", "]", "\n", "y", "+=", "textsize", "[", "1", "]", "+", "10", "\n", "x", "=", "10", "\n", "cv2", ".", "putText", "(", "\n", "blank_image", ",", "\n", "line", ",", "\n", "(", "x", ",", "y", ")", ",", "\n", "font", ",", "\n", "font_size", ",", "\n", "(", "255", ",", "255", ",", "255", ")", ",", "\n", "font_thickness", ",", "\n", "lineType", "=", "cv2", ".", "LINE_AA", ",", "\n", ")", "\n", "", "text_image", "=", "blank_image", "[", "0", ":", "y", "+", "10", ",", "0", ":", "w", "]", "\n", "final", "=", "np", ".", "concatenate", "(", "(", "image", ",", "text_image", ")", ",", "axis", "=", "0", ")", "\n", "return", "final", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.utils.save_rgb_results": [[25, 39], ["path.format.format", "habitat_baselines.utils.common.tensor_to_bgr_images", "cv2.imwrite", "cv2.imwrite"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.tensor_to_bgr_images"], ["location", ":", "Tuple", "[", "int", ",", "int", "]", ",", "\n", "mask", ":", "Optional", "[", "np", ".", "ndarray", "]", "=", "None", ",", "\n", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.utils.save_seg_results": [[41, 63], ["path.format.format", "cv2.imwrite", "cv2.imwrite", "gt_seg.cpu().numpy", "torch.argmax().cpu().numpy", "gt_seg.cpu", "torch.argmax().cpu", "torch.argmax"], "function", ["None"], ["assert", "mask", "is", "None", "or", "mask", ".", "shape", "[", ":", "2", "]", "==", "foreground", ".", "shape", "[", ":", "2", "]", "\n", "foreground_size", "=", "foreground", ".", "shape", "[", ":", "2", "]", "\n", "min_pad", "=", "(", "\n", "max", "(", "0", ",", "foreground_size", "[", "0", "]", "//", "2", "-", "location", "[", "0", "]", ")", ",", "\n", "max", "(", "0", ",", "foreground_size", "[", "1", "]", "//", "2", "-", "location", "[", "1", "]", ")", ",", "\n", ")", "\n", "\n", "max_pad", "=", "(", "\n", "max", "(", "\n", "0", ",", "\n", "(", "location", "[", "0", "]", "+", "(", "foreground_size", "[", "0", "]", "-", "foreground_size", "[", "0", "]", "//", "2", ")", ")", "\n", "-", "background", ".", "shape", "[", "0", "]", ",", "\n", ")", ",", "\n", "max", "(", "\n", "0", ",", "\n", "(", "location", "[", "1", "]", "+", "(", "foreground_size", "[", "1", "]", "-", "foreground_size", "[", "1", "]", "//", "2", ")", ")", "\n", "-", "background", ".", "shape", "[", "1", "]", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "background_patch", "=", "background", "[", "\n", "(", "location", "[", "0", "]", "-", "foreground_size", "[", "0", "]", "//", "2", "+", "min_pad", "[", "0", "]", ")", ":", "(", "\n", "location", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.utils.save_depth_results": [[65, 82], ["path.format.format", "habitat_baselines.utils.common.tensor_to_depth_images", "cv2.imwrite", "cv2.imwrite"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.tensor_to_depth_images"], ["-", "max_pad", "[", "0", "]", "\n", ")", ",", "\n", "(", "location", "[", "1", "]", "-", "foreground_size", "[", "1", "]", "//", "2", "+", "min_pad", "[", "1", "]", ")", ":", "(", "\n", "location", "[", "1", "]", "\n", "+", "(", "foreground_size", "[", "1", "]", "-", "foreground_size", "[", "1", "]", "//", "2", ")", "\n", "-", "max_pad", "[", "1", "]", "\n", ")", ",", "\n", "]", "\n", "foreground", "=", "foreground", "[", "\n", "min_pad", "[", "0", "]", ":", "foreground", ".", "shape", "[", "0", "]", "-", "max_pad", "[", "0", "]", ",", "\n", "min_pad", "[", "1", "]", ":", "foreground", ".", "shape", "[", "1", "]", "-", "max_pad", "[", "1", "]", ",", "\n", "]", "\n", "if", "foreground", ".", "size", "==", "0", "or", "background_patch", ".", "size", "==", "0", ":", "\n", "# Nothing to do, no overlap.", "\n", "        ", "return", "background", "\n", "\n", "", "if", "mask", "is", "not", "None", ":", "\n", "        ", "mask", "=", "mask", "[", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.utils.put_vqa_text_on_image": [[84, 134], ["cv2.putText", "cv2.putText", "cv2.putText"], "function", ["None"], ["min_pad", "[", "1", "]", ":", "foreground", ".", "shape", "[", "1", "]", "-", "max_pad", "[", "1", "]", ",", "\n", "]", "\n", "\n", "", "if", "foreground", ".", "shape", "[", "2", "]", "==", "4", ":", "\n", "# Alpha blending", "\n", "        ", "foreground", "=", "(", "\n", "background_patch", ".", "astype", "(", "np", ".", "int32", ")", "*", "(", "255", "-", "foreground", "[", ":", ",", ":", ",", "[", "3", "]", "]", ")", "\n", "+", "foreground", "[", ":", ",", ":", ",", ":", "3", "]", ".", "astype", "(", "np", ".", "int32", ")", "*", "foreground", "[", ":", ",", ":", ",", "[", "3", "]", "]", "\n", ")", "//", "255", "\n", "", "if", "mask", "is", "not", "None", ":", "\n", "        ", "background_patch", "[", "mask", "]", "=", "foreground", "[", "mask", "]", "\n", "", "else", ":", "\n", "        ", "background_patch", "[", ":", "]", "=", "foreground", "\n", "", "return", "background", "\n", "\n", "\n", "", "def", "images_to_video", "(", "\n", "images", ":", "List", "[", "np", ".", "ndarray", "]", ",", "\n", "output_dir", ":", "str", ",", "\n", "video_name", ":", "str", ",", "\n", "fps", ":", "int", "=", "10", ",", "\n", "quality", ":", "Optional", "[", "float", "]", "=", "5", ",", "\n", "verbose", ":", "bool", "=", "True", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "    ", "r\"\"\"Calls imageio to run FFMPEG on a list of images. For more info on\n    parameters, see https://imageio.readthedocs.io/en/stable/format_ffmpeg.html\n    Args:\n        images: The list of images. Images should be HxWx3 in RGB order.\n        output_dir: The folder to put the video in.\n        video_name: The name for the video.\n        fps: Frames per second for the video. Not all values work with FFMPEG,\n            use at your own risk.\n        quality: Default is 5. Uses variable bit rate. Highest quality is 10,\n            lowest is 0.  Set to None to prevent variable bitrate flags to\n            FFMPEG so you can manually specify them using output_params\n            instead. Specifying a fixed bitrate using \u2018bitrate\u2019 disables\n            this parameter.\n    \"\"\"", "\n", "assert", "0", "<=", "quality", "<=", "10", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "", "video_name", "=", "video_name", ".", "replace", "(", "\" \"", ",", "\"_\"", ")", ".", "replace", "(", "\"\\n\"", ",", "\"_\"", ")", "\n", "\n", "# File names are not allowed to be over 255 characters", "\n", "video_name_split", "=", "video_name", ".", "split", "(", "\"/\"", ")", "\n", "video_name", "=", "\"/\"", ".", "join", "(", "\n", "video_name_split", "[", ":", "-", "1", "]", "+", "[", "video_name_split", "[", "-", "1", "]", "[", ":", "251", "]", "+", "\".mp4\"", "]", "\n", ")", "\n", "\n", "writer", "=", "imageio", ".", "get_writer", "(", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.utils.save_vqa_image_results": [[136, 173], ["habitat_baselines.utils.common.tensor_to_bgr_images", "cv2.hconcat", "cv2.copyMakeBorder", "utils.put_vqa_text_on_image", "cv2.imwrite"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.tensor_to_bgr_images", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.utils.put_vqa_text_on_image"], ["fps", "=", "fps", ",", "\n", "quality", "=", "quality", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "logger", ".", "info", "(", "f\"Video created: {os.path.join(output_dir, video_name)}\"", ")", "\n", "if", "verbose", ":", "\n", "        ", "images_iter", "=", "tqdm", ".", "tqdm", "(", "images", ")", "\n", "", "else", ":", "\n", "        ", "images_iter", "=", "images", "\n", "", "for", "im", "in", "images_iter", ":", "\n", "        ", "writer", ".", "append_data", "(", "im", ")", "\n", "", "writer", ".", "close", "(", ")", "\n", "\n", "\n", "", "def", "draw_collision", "(", "view", ":", "np", ".", "ndarray", ",", "alpha", ":", "float", "=", "0.4", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "r\"\"\"Draw translucent red strips on the border of input view to indicate\n    a collision has taken place.\n    Args:\n        view: input view of size HxWx3 in RGB order.\n        alpha: Opacity of red collision strip. 1 is completely non-transparent.\n    Returns:\n        A view with collision effect drawn.\n    \"\"\"", "\n", "strip_width", "=", "view", ".", "shape", "[", "0", "]", "//", "20", "\n", "mask", "=", "np", ".", "ones", "(", "view", ".", "shape", ")", "\n", "mask", "[", "strip_width", ":", "-", "strip_width", ",", "strip_width", ":", "-", "strip_width", "]", "=", "0", "\n", "mask", "=", "mask", "==", "1", "\n", "view", "[", "mask", "]", "=", "(", "alpha", "*", "np", ".", "array", "(", "[", "255", ",", "0", ",", "0", "]", ")", "+", "(", "1.0", "-", "alpha", ")", "*", "view", ")", "[", "mask", "]", "\n", "return", "view", "\n", "\n", "\n", "", "def", "tile_images", "(", "render_obs_images", ":", "List", "[", "np", ".", "ndarray", "]", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"Tiles multiple images of non-equal size to a single image. Images are\n    tiled into columns making the returned image wider than tall.\n    \"\"\"", "\n", "# Get the images in descending order of vertical height.", "\n", "render_obs_images", "=", "sorted", "(", "\n", "render_obs_images", ",", "key", "=", "lambda", "x", ":", "x", ".", "shape", "[", "0", "]", ",", "reverse", "=", "True", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sims.registration.make_sim": [[13, 20], ["habitat.core.logging.logger.info", "habitat.core.registry.registry.get_simulator", "registry.get_simulator."], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry.get_simulator"], ["def", "make_sim", "(", "id_sim", ",", "**", "kwargs", ")", ":", "\n", "    ", "logger", ".", "info", "(", "\"initializing sim {}\"", ".", "format", "(", "id_sim", ")", ")", "\n", "_sim", "=", "registry", ".", "get_simulator", "(", "id_sim", ")", "\n", "assert", "_sim", "is", "not", "None", ",", "\"Could not find simulator with name {}\"", ".", "format", "(", "\n", "id_sim", "\n", ")", "\n", "return", "_sim", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.sim_utilities.register_custom_wireframe_box_template": [[15, 31], ["sim.get_object_template_manager", "sim.get_object_template_manager.get_template_by_handle", "sim.get_object_template_manager.register_template", "sim.get_object_template_manager.get_template_handles"], "function", ["None"], ["def", "register_custom_wireframe_box_template", "(", "\n", "sim", ":", "habitat_sim", ".", "Simulator", ",", "\n", "size", ":", "mn", ".", "Vector3", ",", "\n", "template_name", ":", "str", "=", "\"custom_wireframe_box\"", ",", "\n", ")", "->", "str", ":", "\n", "    ", "\"\"\"\n    Generate and register a custom template for a wireframe box of given size.\n    Return the new template's handle.\n    \"\"\"", "\n", "obj_attr_mgr", "=", "sim", ".", "get_object_template_manager", "(", ")", "\n", "cube_template", "=", "obj_attr_mgr", ".", "get_template_by_handle", "(", "\n", "obj_attr_mgr", ".", "get_template_handles", "(", "\"cubeWireframe\"", ")", "[", "0", "]", "\n", ")", "\n", "cube_template", ".", "scale", "=", "size", "\n", "obj_attr_mgr", ".", "register_template", "(", "cube_template", ",", "template_name", ")", "\n", "return", "template_name", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.sim_utilities.add_wire_box": [[33, 56], ["sim_utilities.register_custom_wireframe_box_template", "sim.get_rigid_object_manager().add_object_by_template_handle", "magnum.Quaternion", "sim.get_rigid_object_manager"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.sim_utilities.register_custom_wireframe_box_template"], ["", "def", "add_wire_box", "(", "\n", "sim", ":", "habitat_sim", ".", "Simulator", ",", "\n", "size", ":", "mn", ".", "Vector3", ",", "\n", "center", ":", "mn", ".", "Vector3", ",", "\n", "attach_to", ":", "Optional", "[", "habitat_sim", ".", "scene", ".", "SceneNode", "]", "=", "None", ",", "\n", "orientation", ":", "Optional", "[", "mn", ".", "Quaternion", "]", "=", "None", ",", "\n", ")", "->", "habitat_sim", ".", "physics", ".", "ManagedRigidObject", ":", "\n", "    ", "\"\"\"\n    Generate a wire box object and optionally attach it to another existing object (automatically applies object scale).\n    Returns the new object.\n    \"\"\"", "\n", "if", "orientation", "is", "None", ":", "\n", "        ", "orientation", "=", "mn", ".", "Quaternion", "(", ")", "\n", "", "box_template_handle", "=", "register_custom_wireframe_box_template", "(", "sim", ",", "size", ")", "\n", "new_object", "=", "sim", ".", "get_rigid_object_manager", "(", ")", ".", "add_object_by_template_handle", "(", "\n", "box_template_handle", ",", "attach_to", "\n", ")", "\n", "new_object", ".", "motion_type", "=", "habitat_sim", ".", "physics", ".", "MotionType", ".", "KINEMATIC", "\n", "new_object", ".", "collidable", "=", "False", "\n", "# translate to local offset if attached or global offset if not", "\n", "new_object", ".", "translation", "=", "center", "\n", "new_object", ".", "rotation", "=", "orientation", "\n", "return", "new_object", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.sim_utilities.add_transformed_wire_box": [[58, 78], ["sim_utilities.register_custom_wireframe_box_template", "sim.get_rigid_object_manager().add_object_by_template_handle", "magnum.Matrix4", "sim.get_rigid_object_manager"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.sim_utilities.register_custom_wireframe_box_template"], ["", "def", "add_transformed_wire_box", "(", "\n", "sim", ":", "habitat_sim", ".", "Simulator", ",", "\n", "size", ":", "mn", ".", "Vector3", ",", "\n", "transform", ":", "Optional", "[", "mn", ".", "Matrix4", "]", "=", "None", ",", "\n", ")", "->", "habitat_sim", ".", "physics", ".", "ManagedRigidObject", ":", "\n", "    ", "\"\"\"\n    Generate a transformed wire box in world space.\n    Returns the new object.\n    \"\"\"", "\n", "if", "transform", "is", "None", ":", "\n", "        ", "transform", "=", "mn", ".", "Matrix4", "(", ")", "\n", "", "box_template_handle", "=", "register_custom_wireframe_box_template", "(", "sim", ",", "size", ")", "\n", "new_object", "=", "sim", ".", "get_rigid_object_manager", "(", ")", ".", "add_object_by_template_handle", "(", "\n", "box_template_handle", "\n", ")", "\n", "new_object", ".", "motion_type", "=", "habitat_sim", ".", "physics", ".", "MotionType", ".", "KINEMATIC", "\n", "new_object", ".", "collidable", "=", "False", "\n", "# translate to local offset if attached or global offset if not", "\n", "new_object", ".", "transformation", "=", "transform", "\n", "return", "new_object", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.sim_utilities.add_viz_sphere": [[80, 100], ["sim.get_object_template_manager", "sim.get_object_template_manager.get_template_by_handle", "magnum.Vector3", "sim.get_object_template_manager.register_template", "sim.get_rigid_object_manager().add_object_by_template_handle", "sim.get_object_template_manager.get_template_handles", "sim.get_rigid_object_manager"], "function", ["None"], ["", "def", "add_viz_sphere", "(", "\n", "sim", ":", "habitat_sim", ".", "Simulator", ",", "radius", ":", "float", ",", "pos", ":", "mn", ".", "Vector3", "\n", ")", "->", "habitat_sim", ".", "physics", ".", "ManagedRigidObject", ":", "\n", "    ", "\"\"\"\n    Add a visualization-only sphere to the world at a global position.\n    Returns the new object.\n    \"\"\"", "\n", "obj_attr_mgr", "=", "sim", ".", "get_object_template_manager", "(", ")", "\n", "sphere_template", "=", "obj_attr_mgr", ".", "get_template_by_handle", "(", "\n", "obj_attr_mgr", ".", "get_template_handles", "(", "\"icosphereWireframe\"", ")", "[", "0", "]", "\n", ")", "\n", "sphere_template", ".", "scale", "=", "mn", ".", "Vector3", "(", "radius", ")", "\n", "obj_attr_mgr", ".", "register_template", "(", "sphere_template", ",", "\"viz_sphere\"", ")", "\n", "new_object", "=", "sim", ".", "get_rigid_object_manager", "(", ")", ".", "add_object_by_template_handle", "(", "\n", "\"viz_sphere\"", "\n", ")", "\n", "new_object", ".", "motion_type", "=", "habitat_sim", ".", "physics", ".", "MotionType", ".", "KINEMATIC", "\n", "new_object", ".", "collidable", "=", "False", "\n", "new_object", ".", "translation", "=", "pos", "\n", "return", "new_object", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.sim_utilities.get_bb_corners": [[102, 118], ["None"], "function", ["None"], ["", "def", "get_bb_corners", "(", "\n", "obj", ":", "habitat_sim", ".", "physics", ".", "ManagedRigidObject", ",", "\n", ")", "->", "List", "[", "mn", ".", "Vector3", "]", ":", "\n", "    ", "\"\"\"\n    Return a list of object bounding box corners in object local space.\n    \"\"\"", "\n", "bb", "=", "obj", ".", "root_scene_node", ".", "cumulative_bb", "\n", "return", "[", "\n", "bb", ".", "back_bottom_left", ",", "\n", "bb", ".", "back_bottom_right", ",", "\n", "bb", ".", "back_top_right", ",", "\n", "bb", ".", "back_top_left", ",", "\n", "bb", ".", "front_top_left", ",", "\n", "bb", ".", "front_top_right", ",", "\n", "bb", ".", "front_bottom_right", ",", "\n", "bb", ".", "front_bottom_left", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.sim_utilities.get_ao_global_bb": [[121, 136], ["magnum.Range3D", "range", "obj.get_link_scene_node", "habitat_sim.geo.get_transformed_bb", "magnum.math.join"], "function", ["None"], ["", "def", "get_ao_global_bb", "(", "\n", "obj", ":", "habitat_sim", ".", "physics", ".", "ManagedArticulatedObject", ",", "\n", ")", "->", "mn", ".", "Range3D", ":", "\n", "    ", "\"\"\"\n    Compute the cumulative bounding box of an ArticulatedObject by merging all link bounding boxes.\n    \"\"\"", "\n", "cumulative_global_bb", "=", "mn", ".", "Range3D", "(", ")", "\n", "for", "link_ix", "in", "range", "(", "-", "1", ",", "obj", ".", "num_links", ")", ":", "\n", "        ", "link_node", "=", "obj", ".", "get_link_scene_node", "(", "link_ix", ")", "\n", "bb", "=", "link_node", ".", "cumulative_bb", "\n", "global_bb", "=", "habitat_sim", ".", "geo", ".", "get_transformed_bb", "(", "\n", "bb", ",", "link_node", ".", "transformation", "\n", ")", "\n", "cumulative_global_bb", "=", "mn", ".", "math", ".", "join", "(", "cumulative_global_bb", ",", "global_bb", ")", "\n", "", "return", "cumulative_global_bb", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.sim_utilities.bb_ray_prescreen": [[138, 228], ["sim.get_gravity().normalized", "sim_utilities.get_bb_corners", "enumerate", "object_local_to_global.transform_point", "object_local_to_global.transform_point.projected_onto_normalized().length", "obj.translation.projected_onto_normalized().length", "sim.get_gravity", "magnum.Vector3", "habitat_sim.geo.Ray", "raycast_results.append", "sim.get_stage_initialization_template", "object_local_to_global.transform_point.projected_onto_normalized", "sim.cast_ray", "obj.translation.projected_onto_normalized", "magnum.math.dot"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.sim_utilities.get_bb_corners"], ["", "def", "bb_ray_prescreen", "(", "\n", "sim", ":", "habitat_sim", ".", "Simulator", ",", "\n", "obj", ":", "habitat_sim", ".", "physics", ".", "ManagedRigidObject", ",", "\n", "support_obj_ids", ":", "Optional", "[", "List", "[", "int", "]", "]", "=", "None", ",", "\n", "check_all_corners", ":", "bool", "=", "False", ",", "\n", ")", "->", "Dict", "[", "str", ",", "Any", "]", ":", "\n", "    ", "\"\"\"\n    Pre-screen a potential placement by casting rays in the gravity direction from the object center of mass (and optionally each corner of its bounding box) checking for interferring objects below.\n\n    :param sim: The Simulator instance.\n    :param obj: The RigidObject instance.\n    :param support_obj_ids: A list of object ids designated as valid support surfaces for object placement. Contact with other objects is a criteria for placement rejection.\n    :param check_all_corners: Optionally cast rays from all bounding box corners instead of only casting a ray from the center of mass.\n    \"\"\"", "\n", "if", "support_obj_ids", "is", "None", ":", "\n", "# set default support surface to stage/ground mesh", "\n", "        ", "support_obj_ids", "=", "[", "-", "1", "]", "\n", "", "lowest_key_point", ":", "mn", ".", "Vector3", "=", "None", "\n", "lowest_key_point_height", "=", "None", "\n", "highest_support_impact", ":", "mn", ".", "Vector3", "=", "None", "\n", "highest_support_impact_height", "=", "None", "\n", "highest_support_impact_with_stage", "=", "False", "\n", "raycast_results", "=", "[", "]", "\n", "gravity_dir", "=", "sim", ".", "get_gravity", "(", ")", ".", "normalized", "(", ")", "\n", "object_local_to_global", "=", "obj", ".", "transformation", "\n", "bb_corners", "=", "get_bb_corners", "(", "obj", ")", "\n", "key_points", "=", "[", "mn", ".", "Vector3", "(", "0", ")", "]", "+", "bb_corners", "# [COM, c0, c1 ...]", "\n", "support_impacts", ":", "Dict", "[", "int", ",", "mn", ".", "Vector3", "]", "=", "{", "}", "# indexed by keypoints", "\n", "for", "ix", ",", "key_point", "in", "enumerate", "(", "key_points", ")", ":", "\n", "        ", "world_point", "=", "object_local_to_global", ".", "transform_point", "(", "key_point", ")", "\n", "# NOTE: instead of explicit Y coordinate, we project onto any gravity vector", "\n", "world_point_height", "=", "world_point", ".", "projected_onto_normalized", "(", "\n", "-", "gravity_dir", "\n", ")", ".", "length", "(", ")", "\n", "if", "(", "\n", "lowest_key_point", "is", "None", "\n", "or", "lowest_key_point_height", ">", "world_point_height", "\n", ")", ":", "\n", "            ", "lowest_key_point", "=", "world_point", "\n", "lowest_key_point_height", "=", "world_point_height", "\n", "# cast a ray in gravity direction", "\n", "", "if", "ix", "==", "0", "or", "check_all_corners", ":", "\n", "            ", "ray", "=", "habitat_sim", ".", "geo", ".", "Ray", "(", "world_point", ",", "gravity_dir", ")", "\n", "raycast_results", ".", "append", "(", "sim", ".", "cast_ray", "(", "ray", ")", ")", "\n", "# classify any obstructions before hitting the support surface", "\n", "for", "hit", "in", "raycast_results", "[", "-", "1", "]", ".", "hits", ":", "\n", "                ", "if", "hit", ".", "object_id", "==", "obj", ".", "object_id", ":", "\n", "                    ", "continue", "\n", "", "elif", "hit", ".", "object_id", "in", "support_obj_ids", ":", "\n", "                    ", "hit_point", "=", "ray", ".", "origin", "+", "ray", ".", "direction", "*", "hit", ".", "ray_distance", "\n", "support_impacts", "[", "ix", "]", "=", "hit_point", "\n", "support_impact_height", "=", "mn", ".", "math", ".", "dot", "(", "\n", "hit_point", ",", "-", "gravity_dir", "\n", ")", "\n", "\n", "if", "(", "\n", "highest_support_impact", "is", "None", "\n", "or", "highest_support_impact_height", "\n", "<", "support_impact_height", "\n", ")", ":", "\n", "                        ", "highest_support_impact", "=", "hit_point", "\n", "highest_support_impact_height", "=", "support_impact_height", "\n", "highest_support_impact_with_stage", "=", "hit", ".", "object_id", "==", "-", "1", "\n", "\n", "# terminates at the first non-self ray hit", "\n", "", "", "break", "\n", "# compute the relative base height of the object from its lowest bb corner and COM", "\n", "", "", "", "base_rel_height", "=", "(", "\n", "lowest_key_point_height", "\n", "-", "obj", ".", "translation", ".", "projected_onto_normalized", "(", "-", "gravity_dir", ")", ".", "length", "(", ")", "\n", ")", "\n", "\n", "# account for the affects of stage mesh margin", "\n", "margin_offset", "=", "(", "\n", "0", "\n", "if", "not", "highest_support_impact_with_stage", "\n", "else", "sim", ".", "get_stage_initialization_template", "(", ")", ".", "margin", "\n", ")", "\n", "\n", "surface_snap_point", "=", "(", "\n", "None", "\n", "if", "0", "not", "in", "support_impacts", "\n", "else", "support_impacts", "[", "0", "]", "\n", "+", "gravity_dir", "*", "(", "base_rel_height", "-", "margin_offset", ")", "\n", ")", "\n", "# return list of obstructed and grounded rays, relative base height, distance to first surface impact, and ray results details", "\n", "return", "{", "\n", "\"base_rel_height\"", ":", "base_rel_height", ",", "\n", "\"surface_snap_point\"", ":", "surface_snap_point", ",", "\n", "\"raycast_results\"", ":", "raycast_results", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.sim_utilities.snap_down": [[231, 292], ["sim_utilities.bb_ray_prescreen", "sim.perform_discrete_collision_detection", "sim.get_physics_contact_points", "vdb.get_observation"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.sim_utilities.bb_ray_prescreen", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.BumpSensor.get_observation"], ["", "def", "snap_down", "(", "\n", "sim", ":", "habitat_sim", ".", "Simulator", ",", "\n", "obj", ":", "habitat_sim", ".", "physics", ".", "ManagedRigidObject", ",", "\n", "support_obj_ids", ":", "Optional", "[", "List", "[", "int", "]", "]", "=", "None", ",", "\n", "vdb", ":", "Optional", "[", "DebugVisualizer", "]", "=", "None", ",", "\n", ")", "->", "bool", ":", "\n", "    ", "\"\"\"\n    Attempt to project an object in the gravity direction onto the surface below it.\n\n    :param sim: The Simulator instance.\n    :param obj: The RigidObject instance.\n    :param support_obj_ids: A list of object ids designated as valid support surfaces for object placement. Contact with other objects is a criteria for placement rejection. If none provided, default support surface is the stage/ground mesh (-1).\n    :param vdb: Optionally provide a DebugVisualizer (vdb) to render debug images of each object's computed snap position before collision culling.\n\n    Reject invalid placements by checking for penetration with other existing objects.\n    Returns boolean success.\n    If placement is successful, the object state is updated to the snapped location.\n    If placement is rejected, object position is not modified and False is returned.\n\n    To use this utility, generate an initial placement for any object above any of the designated support surfaces and call this function to attempt to snap it onto the nearest surface in the gravity direction.\n    \"\"\"", "\n", "cached_position", "=", "obj", ".", "translation", "\n", "\n", "if", "support_obj_ids", "is", "None", ":", "\n", "# set default support surface to stage/ground mesh", "\n", "        ", "support_obj_ids", "=", "[", "-", "1", "]", "\n", "\n", "", "bb_ray_prescreen_results", "=", "bb_ray_prescreen", "(", "sim", ",", "obj", ",", "support_obj_ids", ")", "\n", "\n", "if", "bb_ray_prescreen_results", "[", "\"surface_snap_point\"", "]", "is", "None", ":", "\n", "# no support under this object, return failure", "\n", "        ", "return", "False", "\n", "\n", "# finish up", "\n", "", "if", "bb_ray_prescreen_results", "[", "\"surface_snap_point\"", "]", "is", "not", "None", ":", "\n", "# accept the final location if a valid location exists", "\n", "        ", "obj", ".", "translation", "=", "bb_ray_prescreen_results", "[", "\"surface_snap_point\"", "]", "\n", "if", "vdb", "is", "not", "None", ":", "\n", "            ", "vdb", ".", "get_observation", "(", "obj", ".", "translation", ")", "\n", "", "sim", ".", "perform_discrete_collision_detection", "(", ")", "\n", "cps", "=", "sim", ".", "get_physics_contact_points", "(", ")", "\n", "for", "cp", "in", "cps", ":", "\n", "            ", "if", "(", "\n", "cp", ".", "object_id_a", "==", "obj", ".", "object_id", "\n", "or", "cp", ".", "object_id_b", "==", "obj", ".", "object_id", "\n", ")", "and", "(", "\n", "(", "cp", ".", "contact_distance", "<", "-", "0.01", ")", "\n", "or", "not", "(", "\n", "cp", ".", "object_id_a", "in", "support_obj_ids", "\n", "or", "cp", ".", "object_id_b", "in", "support_obj_ids", "\n", ")", "\n", ")", ":", "\n", "                ", "obj", ".", "translation", "=", "cached_position", "\n", "# print(f\" Failure: contact in final position w/ distance = {cp.contact_distance}.\")", "\n", "# print(f\" Failure: contact in final position with non support object {cp.object_id_a} or {cp.object_id_b}.\")", "\n", "return", "False", "\n", "", "", "return", "True", "\n", "", "else", ":", "\n", "# no valid position found, reset and return failure", "\n", "        ", "obj", ".", "translation", "=", "cached_position", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.sim_utilities.get_all_object_ids": [[294, 316], ["sim.get_rigid_object_manager", "sim.get_articulated_object_manager", "sim.get_rigid_object_manager.get_objects_by_handle_substring().items", "sim.get_articulated_object_manager.get_objects_by_handle_substring().items", "ao.link_object_ids.items", "sim.get_rigid_object_manager.get_objects_by_handle_substring", "sim.get_articulated_object_manager.get_objects_by_handle_substring", "ao.get_link_name"], "function", ["None"], ["", "", "def", "get_all_object_ids", "(", "sim", ":", "habitat_sim", ".", "Simulator", ")", "->", "Dict", "[", "int", ",", "str", "]", ":", "\n", "    ", "\"\"\"\n    Generate a dict mapping all active object ids to a descriptive string containing the object instance handle and, for ArticulatedLinks, the link name.\n    \"\"\"", "\n", "rom", "=", "sim", ".", "get_rigid_object_manager", "(", ")", "\n", "aom", "=", "sim", ".", "get_articulated_object_manager", "(", ")", "\n", "\n", "object_id_map", "=", "{", "}", "\n", "\n", "for", "_object_handle", ",", "rigid_object", "in", "rom", ".", "get_objects_by_handle_substring", "(", "\n", "\"\"", "\n", ")", ".", "items", "(", ")", ":", "\n", "        ", "object_id_map", "[", "rigid_object", ".", "object_id", "]", "=", "rigid_object", ".", "handle", "\n", "\n", "", "for", "_object_handle", ",", "ao", "in", "aom", ".", "get_objects_by_handle_substring", "(", "\"\"", ")", ".", "items", "(", ")", ":", "\n", "        ", "object_id_map", "[", "ao", ".", "object_id", "]", "=", "ao", ".", "handle", "\n", "for", "object_id", ",", "link_ix", "in", "ao", ".", "link_object_ids", ".", "items", "(", ")", ":", "\n", "            ", "object_id_map", "[", "object_id", "]", "=", "(", "\n", "ao", ".", "handle", "+", "\" -- \"", "+", "ao", ".", "get_link_name", "(", "link_ix", ")", "\n", ")", "\n", "\n", "", "", "return", "object_id_map", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSimRGBSensor.__init__": [[100, 102], ["habitat.core.simulator.RGBSensor.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "config", ":", "Config", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", "=", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSimRGBSensor._get_observation_space": [[103, 113], ["gym.spaces.Box"], "methods", ["None"], ["", "def", "_get_observation_space", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "Box", ":", "\n", "        ", "return", "spaces", ".", "Box", "(", "\n", "low", "=", "0", ",", "\n", "high", "=", "255", ",", "\n", "shape", "=", "(", "\n", "self", ".", "config", ".", "HEIGHT", ",", "\n", "self", ".", "config", ".", "WIDTH", ",", "\n", "self", ".", "RGBSENSOR_DIMENSION", ",", "\n", ")", ",", "\n", "dtype", "=", "np", ".", "uint8", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSimRGBSensor.get_observation": [[115, 124], ["typing.cast", "habitat_simulator.check_sim_obs", "sim_obs.get"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.check_sim_obs", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get"], ["", "def", "get_observation", "(", "\n", "self", ",", "sim_obs", ":", "Dict", "[", "str", ",", "Union", "[", "np", ".", "ndarray", ",", "bool", ",", "\"Tensor\"", "]", "]", "\n", ")", "->", "VisualObservation", ":", "\n", "        ", "obs", "=", "cast", "(", "Optional", "[", "VisualObservation", "]", ",", "sim_obs", ".", "get", "(", "self", ".", "uuid", ",", "None", ")", ")", "\n", "check_sim_obs", "(", "obs", ",", "self", ")", "\n", "\n", "# remove alpha channel", "\n", "obs", "=", "obs", "[", ":", ",", ":", ",", ":", "self", ".", "RGBSENSOR_DIMENSION", "]", "# type: ignore[index]", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSimDepthSensor.__init__": [[139, 148], ["habitat.core.simulator.DepthSensor.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "config", ":", "Config", ")", "->", "None", ":", "\n", "        ", "if", "config", ".", "NORMALIZE_DEPTH", ":", "\n", "            ", "self", ".", "min_depth_value", "=", "0", "\n", "self", ".", "max_depth_value", "=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "min_depth_value", "=", "config", ".", "MIN_DEPTH", "\n", "self", ".", "max_depth_value", "=", "config", ".", "MAX_DEPTH", "\n", "\n", "", "super", "(", ")", ".", "__init__", "(", "config", "=", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSimDepthSensor._get_observation_space": [[149, 155], ["gym.spaces.Box"], "methods", ["None"], ["", "def", "_get_observation_space", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "Box", ":", "\n", "        ", "return", "spaces", ".", "Box", "(", "\n", "low", "=", "self", ".", "min_depth_value", ",", "\n", "high", "=", "self", ".", "max_depth_value", ",", "\n", "shape", "=", "(", "self", ".", "config", ".", "HEIGHT", ",", "self", ".", "config", ".", "WIDTH", ",", "1", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSimDepthSensor.get_observation": [[157, 180], ["typing.cast", "habitat_simulator.check_sim_obs", "isinstance", "sim_obs.get", "numpy.clip", "numpy.expand_dims", "obs.unsqueeze.unsqueeze.clamp", "obs.unsqueeze.unsqueeze.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.check_sim_obs", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get"], ["", "def", "get_observation", "(", "\n", "self", ",", "sim_obs", ":", "Dict", "[", "str", ",", "Union", "[", "np", ".", "ndarray", ",", "bool", ",", "\"Tensor\"", "]", "]", "\n", ")", "->", "VisualObservation", ":", "\n", "        ", "obs", "=", "cast", "(", "Optional", "[", "VisualObservation", "]", ",", "sim_obs", ".", "get", "(", "self", ".", "uuid", ",", "None", ")", ")", "\n", "check_sim_obs", "(", "obs", ",", "self", ")", "\n", "if", "isinstance", "(", "obs", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "obs", "=", "np", ".", "clip", "(", "obs", ",", "self", ".", "config", ".", "MIN_DEPTH", ",", "self", ".", "config", ".", "MAX_DEPTH", ")", "\n", "\n", "obs", "=", "np", ".", "expand_dims", "(", "\n", "obs", ",", "axis", "=", "2", "\n", ")", "# make depth observation a 3D array", "\n", "", "else", ":", "\n", "            ", "obs", "=", "obs", ".", "clamp", "(", "self", ".", "config", ".", "MIN_DEPTH", ",", "self", ".", "config", ".", "MAX_DEPTH", ")", "# type: ignore[attr-defined, unreachable]", "\n", "\n", "obs", "=", "obs", ".", "unsqueeze", "(", "-", "1", ")", "# type: ignore[attr-defined]", "\n", "\n", "", "if", "self", ".", "config", ".", "NORMALIZE_DEPTH", ":", "\n", "# normalize depth observation to [0, 1]", "\n", "            ", "obs", "=", "(", "obs", "-", "self", ".", "config", ".", "MIN_DEPTH", ")", "/", "(", "\n", "self", ".", "config", ".", "MAX_DEPTH", "-", "self", ".", "config", ".", "MIN_DEPTH", "\n", ")", "\n", "\n", "", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSimSemanticSensor.__init__": [[187, 189], ["habitat.core.simulator.SemanticSensor.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "config", ":", "Config", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", "=", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSimSemanticSensor._get_observation_space": [[190, 196], ["gym.spaces.Box", "numpy.iinfo", "numpy.iinfo"], "methods", ["None"], ["", "def", "_get_observation_space", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "return", "spaces", ".", "Box", "(", "\n", "low", "=", "np", ".", "iinfo", "(", "np", ".", "uint32", ")", ".", "min", ",", "\n", "high", "=", "np", ".", "iinfo", "(", "np", ".", "uint32", ")", ".", "max", ",", "\n", "shape", "=", "(", "self", ".", "config", ".", "HEIGHT", ",", "self", ".", "config", ".", "WIDTH", ",", "1", ")", ",", "\n", "dtype", "=", "np", ".", "int32", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSimSemanticSensor.get_observation": [[198, 209], ["typing.cast", "habitat_simulator.check_sim_obs", "isinstance", "sim_obs.get", "obs[].astype"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.check_sim_obs", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get"], ["", "def", "get_observation", "(", "\n", "self", ",", "sim_obs", ":", "Dict", "[", "str", ",", "Union", "[", "np", ".", "ndarray", ",", "bool", ",", "\"Tensor\"", "]", "]", "\n", ")", "->", "VisualObservation", ":", "\n", "        ", "obs", "=", "cast", "(", "Optional", "[", "VisualObservation", "]", ",", "sim_obs", ".", "get", "(", "self", ".", "uuid", ",", "None", ")", ")", "\n", "check_sim_obs", "(", "obs", ",", "self", ")", "\n", "# make semantic observation a 3D array", "\n", "if", "isinstance", "(", "obs", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "obs", "=", "obs", "[", "...", ",", "None", "]", ".", "astype", "(", "np", ".", "int32", ")", "\n", "", "else", ":", "\n", "            ", "obs", "=", "obs", "[", "...", ",", "None", "]", "\n", "", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSim.__init__": [[261, 288], ["habitat_simulator.HabitatSim._get_agent_config", "habitat.core.simulator.SensorSuite", "habitat_simulator.HabitatSim.create_sim_config", "super().__init__", "habitat_simulator.HabitatSim.get_object_template_manager", "gym.spaces.Discrete", "getattr", "habitat.core.registry.registry.get_sensor", "sim_sensors.append", "habitat_simulator.HabitatSim.load_configs", "len", "habitat.core.registry.registry.get_sensor."], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSim._get_agent_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSim.create_sim_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry.get_sensor"], ["def", "__init__", "(", "self", ",", "config", ":", "Config", ")", "->", "None", ":", "\n", "        ", "self", ".", "habitat_config", "=", "config", "\n", "agent_config", "=", "self", ".", "_get_agent_config", "(", ")", "\n", "\n", "sim_sensors", "=", "[", "]", "\n", "for", "sensor_name", "in", "agent_config", ".", "SENSORS", ":", "\n", "            ", "sensor_cfg", "=", "getattr", "(", "self", ".", "habitat_config", ",", "sensor_name", ")", "\n", "sensor_type", "=", "registry", ".", "get_sensor", "(", "sensor_cfg", ".", "TYPE", ")", "\n", "\n", "assert", "sensor_type", "is", "not", "None", ",", "\"invalid sensor type {}\"", ".", "format", "(", "\n", "sensor_cfg", ".", "TYPE", "\n", ")", "\n", "sim_sensors", ".", "append", "(", "sensor_type", "(", "sensor_cfg", ")", ")", "\n", "\n", "", "self", ".", "_sensor_suite", "=", "SensorSuite", "(", "sim_sensors", ")", "\n", "self", ".", "sim_config", "=", "self", ".", "create_sim_config", "(", "self", ".", "_sensor_suite", ")", "\n", "self", ".", "_current_scene", "=", "self", ".", "sim_config", ".", "sim_cfg", ".", "scene_id", "\n", "super", "(", ")", ".", "__init__", "(", "self", ".", "sim_config", ")", "\n", "# load additional object paths specified by the dataset", "\n", "# TODO: Should this be moved elsewhere?", "\n", "obj_attr_mgr", "=", "self", ".", "get_object_template_manager", "(", ")", "\n", "for", "path", "in", "self", ".", "habitat_config", ".", "ADDITIONAL_OBJECT_PATHS", ":", "\n", "            ", "obj_attr_mgr", ".", "load_configs", "(", "path", ")", "\n", "", "self", ".", "_action_space", "=", "spaces", ".", "Discrete", "(", "\n", "len", "(", "self", ".", "sim_config", ".", "agents", "[", "0", "]", ".", "action_space", ")", "\n", ")", "\n", "self", ".", "_prev_sim_obs", ":", "Optional", "[", "Observations", "]", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSim.create_sim_config": [[289, 362], ["habitat_sim.SimulatorConfiguration", "habitat_simulator.overwrite_config", "habitat_sim.AgentConfiguration", "habitat_simulator.overwrite_config", "_sensor_suite.sensors.values", "habitat_sim.Configuration", "hasattr", "RuntimeError", "isinstance", "sensor._get_default_spec", "habitat_simulator.overwrite_config", "list", "sensor_specifications.append", "habitat_simulator.HabitatSim._get_agent_config", "habitat.core.registry.registry.get_action_space_configuration", "getattr", "getattr"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.overwrite_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.overwrite_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.overwrite_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSim._get_agent_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry.get_action_space_configuration"], ["", "def", "create_sim_config", "(", "\n", "self", ",", "_sensor_suite", ":", "SensorSuite", "\n", ")", "->", "habitat_sim", ".", "Configuration", ":", "\n", "        ", "sim_config", "=", "habitat_sim", ".", "SimulatorConfiguration", "(", ")", "\n", "# Check if Habitat-Sim is post Scene Config Update", "\n", "if", "not", "hasattr", "(", "sim_config", ",", "\"scene_id\"", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"Incompatible version of Habitat-Sim detected, please upgrade habitat_sim\"", "\n", ")", "\n", "", "overwrite_config", "(", "\n", "config_from", "=", "self", ".", "habitat_config", ".", "HABITAT_SIM_V0", ",", "\n", "config_to", "=", "sim_config", ",", "\n", "# Ignore key as it gets propogated to sensor below", "\n", "ignore_keys", "=", "{", "\"gpu_gpu\"", "}", ",", "\n", ")", "\n", "sim_config", ".", "scene_dataset_config_file", "=", "(", "\n", "self", ".", "habitat_config", ".", "SCENE_DATASET", "\n", ")", "\n", "sim_config", ".", "scene_id", "=", "self", ".", "habitat_config", ".", "SCENE", "\n", "agent_config", "=", "habitat_sim", ".", "AgentConfiguration", "(", ")", "\n", "overwrite_config", "(", "\n", "config_from", "=", "self", ".", "_get_agent_config", "(", ")", ",", "\n", "config_to", "=", "agent_config", ",", "\n", "# These keys are only used by Hab-Lab", "\n", "ignore_keys", "=", "{", "\n", "\"is_set_start_state\"", ",", "\n", "# This is the Sensor Config. Unpacked below", "\n", "\"sensors\"", ",", "\n", "\"start_position\"", ",", "\n", "\"start_rotation\"", ",", "\n", "}", ",", "\n", ")", "\n", "\n", "sensor_specifications", "=", "[", "]", "\n", "for", "sensor", "in", "_sensor_suite", ".", "sensors", ".", "values", "(", ")", ":", "\n", "            ", "assert", "isinstance", "(", "sensor", ",", "HabitatSimSensor", ")", "\n", "sim_sensor_cfg", "=", "sensor", ".", "_get_default_spec", "(", ")", "# type: ignore[misc]", "\n", "overwrite_config", "(", "\n", "config_from", "=", "sensor", ".", "config", ",", "\n", "config_to", "=", "sim_sensor_cfg", ",", "\n", "# These keys are only used by Hab-Lab", "\n", "# or translated into the sensor config manually", "\n", "ignore_keys", "=", "sensor", ".", "_config_ignore_keys", ",", "\n", "# TODO consider making trans_dict a sensor class var too.", "\n", "trans_dict", "=", "{", "\n", "\"sensor_model_type\"", ":", "lambda", "v", ":", "getattr", "(", "\n", "habitat_sim", ".", "FisheyeSensorModelType", ",", "v", "\n", ")", ",", "\n", "\"sensor_subtype\"", ":", "lambda", "v", ":", "getattr", "(", "\n", "habitat_sim", ".", "SensorSubType", ",", "v", "\n", ")", ",", "\n", "}", ",", "\n", ")", "\n", "sim_sensor_cfg", ".", "uuid", "=", "sensor", ".", "uuid", "\n", "sim_sensor_cfg", ".", "resolution", "=", "list", "(", "\n", "sensor", ".", "observation_space", ".", "shape", "[", ":", "2", "]", "\n", ")", "\n", "\n", "# TODO(maksymets): Add configure method to Sensor API to avoid", "\n", "# accessing child attributes through parent interface", "\n", "# We know that the Sensor has to be one of these Sensors", "\n", "sim_sensor_cfg", ".", "sensor_type", "=", "sensor", ".", "sim_sensor_type", "\n", "sim_sensor_cfg", ".", "gpu2gpu_transfer", "=", "(", "\n", "self", ".", "habitat_config", ".", "HABITAT_SIM_V0", ".", "GPU_GPU", "\n", ")", "\n", "sensor_specifications", ".", "append", "(", "sim_sensor_cfg", ")", "\n", "\n", "", "agent_config", ".", "sensor_specifications", "=", "sensor_specifications", "\n", "agent_config", ".", "action_space", "=", "registry", ".", "get_action_space_configuration", "(", "\n", "self", ".", "habitat_config", ".", "ACTION_SPACE_CONFIG", "\n", ")", "(", "self", ".", "habitat_config", ")", ".", "get", "(", ")", "\n", "\n", "return", "habitat_sim", ".", "Configuration", "(", "sim_config", ",", "[", "agent_config", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSim.sensor_suite": [[363, 366], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "sensor_suite", "(", "self", ")", "->", "SensorSuite", ":", "\n", "        ", "return", "self", ".", "_sensor_suite", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSim.action_space": [[367, 370], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "action_space", "(", "self", ")", "->", "Space", ":", "\n", "        ", "return", "self", ".", "_action_space", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSim._update_agents_state": [[371, 384], ["enumerate", "habitat_simulator.HabitatSim._get_agent_config", "habitat_simulator.HabitatSim.set_agent_state"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSim._get_agent_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSim.set_agent_state"], ["", "def", "_update_agents_state", "(", "self", ")", "->", "bool", ":", "\n", "        ", "is_updated", "=", "False", "\n", "for", "agent_id", ",", "_", "in", "enumerate", "(", "self", ".", "habitat_config", ".", "AGENTS", ")", ":", "\n", "            ", "agent_cfg", "=", "self", ".", "_get_agent_config", "(", "agent_id", ")", "\n", "if", "agent_cfg", ".", "IS_SET_START_STATE", ":", "\n", "                ", "self", ".", "set_agent_state", "(", "\n", "agent_cfg", ".", "START_POSITION", ",", "\n", "agent_cfg", ".", "START_ROTATION", ",", "\n", "agent_id", ",", "\n", ")", "\n", "is_updated", "=", "True", "\n", "\n", "", "", "return", "is_updated", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSim.reset": [[385, 392], ["super().reset", "habitat_simulator.HabitatSim._update_agents_state", "habitat_simulator.HabitatSim._sensor_suite.get_observations", "habitat_simulator.HabitatSim.get_sensor_observations"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSim._update_agents_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get_observations"], ["", "def", "reset", "(", "self", ")", "->", "Observations", ":", "\n", "        ", "sim_obs", "=", "super", "(", ")", ".", "reset", "(", ")", "\n", "if", "self", ".", "_update_agents_state", "(", ")", ":", "\n", "            ", "sim_obs", "=", "self", ".", "get_sensor_observations", "(", ")", "\n", "\n", "", "self", ".", "_prev_sim_obs", "=", "sim_obs", "\n", "return", "self", ".", "_sensor_suite", ".", "get_observations", "(", "sim_obs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSim.step": [[393, 398], ["super().step", "habitat_simulator.HabitatSim._sensor_suite.get_observations"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get_observations"], ["", "def", "step", "(", "self", ",", "action", ":", "Union", "[", "str", ",", "np", ".", "ndarray", ",", "int", "]", ")", "->", "Observations", ":", "\n", "        ", "sim_obs", "=", "super", "(", ")", ".", "step", "(", "action", ")", "\n", "self", ".", "_prev_sim_obs", "=", "sim_obs", "\n", "observations", "=", "self", ".", "_sensor_suite", ".", "get_observations", "(", "sim_obs", ")", "\n", "return", "observations", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSim.render": [[399, 419], ["habitat_simulator.HabitatSim.get_sensor_observations", "habitat_simulator.HabitatSim._sensor_suite.get_observations", "habitat_simulator.HabitatSim.get", "isinstance", "output.to().numpy.to().numpy.to().numpy", "output.to().numpy.to().numpy.to"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get_observations", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to"], ["", "def", "render", "(", "self", ",", "mode", ":", "str", "=", "\"rgb\"", ")", "->", "Any", ":", "\n", "        ", "r\"\"\"\n        Args:\n            mode: sensor whose observation is used for returning the frame,\n                eg: \"rgb\", \"depth\", \"semantic\"\n\n        Returns:\n            rendered frame according to the mode\n        \"\"\"", "\n", "sim_obs", "=", "self", ".", "get_sensor_observations", "(", ")", "\n", "observations", "=", "self", ".", "_sensor_suite", ".", "get_observations", "(", "sim_obs", ")", "\n", "\n", "output", "=", "observations", ".", "get", "(", "mode", ")", "\n", "assert", "output", "is", "not", "None", ",", "\"mode {} sensor is not active\"", ".", "format", "(", "mode", ")", "\n", "if", "not", "isinstance", "(", "output", ",", "np", ".", "ndarray", ")", ":", "\n", "# If it is not a numpy array, it is a torch tensor", "\n", "# The function expects the result to be a numpy array", "\n", "            ", "output", "=", "output", ".", "to", "(", "\"cpu\"", ")", ".", "numpy", "(", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSim.reconfigure": [[420, 434], ["habitat_simulator.HabitatSim.create_sim_config", "habitat_simulator.HabitatSim._update_agents_state", "super().reconfigure", "habitat_simulator.HabitatSim.close"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSim.create_sim_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSim._update_agents_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env.reconfigure", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.close"], ["", "def", "reconfigure", "(", "\n", "self", ",", "habitat_config", ":", "Config", ",", "should_close_on_new_scene", ":", "bool", "=", "True", "\n", ")", "->", "None", ":", "\n", "# TODO(maksymets): Switch to Habitat-Sim more efficient caching", "\n", "        ", "is_same_scene", "=", "habitat_config", ".", "SCENE", "==", "self", ".", "_current_scene", "\n", "self", ".", "habitat_config", "=", "habitat_config", "\n", "self", ".", "sim_config", "=", "self", ".", "create_sim_config", "(", "self", ".", "_sensor_suite", ")", "\n", "if", "not", "is_same_scene", ":", "\n", "            ", "self", ".", "_current_scene", "=", "habitat_config", ".", "SCENE", "\n", "if", "should_close_on_new_scene", ":", "\n", "                ", "self", ".", "close", "(", "destroy", "=", "False", ")", "\n", "", "super", "(", ")", ".", "reconfigure", "(", "self", ".", "sim_config", ")", "\n", "\n", "", "self", ".", "_update_agents_state", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSim.geodesic_distance": [[435, 462], ["numpy.array", "habitat_simulator.HabitatSim.pathfinder.find_path", "habitat_sim.MultiGoalShortestPath", "isinstance", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "geodesic_distance", "(", "\n", "self", ",", "\n", "position_a", ":", "Union", "[", "Sequence", "[", "float", "]", ",", "np", ".", "ndarray", "]", ",", "\n", "position_b", ":", "Union", "[", "\n", "Sequence", "[", "float", "]", ",", "Sequence", "[", "Sequence", "[", "float", "]", "]", ",", "np", ".", "ndarray", "\n", "]", ",", "\n", "episode", ":", "Optional", "[", "Episode", "]", "=", "None", ",", "\n", ")", "->", "float", ":", "\n", "        ", "if", "episode", "is", "None", "or", "episode", ".", "_shortest_path_cache", "is", "None", ":", "\n", "            ", "path", "=", "habitat_sim", ".", "MultiGoalShortestPath", "(", ")", "\n", "if", "isinstance", "(", "position_b", "[", "0", "]", ",", "(", "Sequence", ",", "np", ".", "ndarray", ")", ")", ":", "\n", "                ", "path", ".", "requested_ends", "=", "np", ".", "array", "(", "position_b", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "                ", "path", ".", "requested_ends", "=", "np", ".", "array", "(", "\n", "[", "np", ".", "array", "(", "position_b", ",", "dtype", "=", "np", ".", "float32", ")", "]", "\n", ")", "\n", "", "", "else", ":", "\n", "            ", "path", "=", "episode", ".", "_shortest_path_cache", "\n", "\n", "", "path", ".", "requested_start", "=", "np", ".", "array", "(", "position_a", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "self", ".", "pathfinder", ".", "find_path", "(", "path", ")", "\n", "\n", "if", "episode", "is", "not", "None", ":", "\n", "            ", "episode", ".", "_shortest_path_cache", "=", "path", "\n", "\n", "", "return", "path", ".", "geodesic_distance", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSim.action_space_shortest_path": [[463, 481], ["NotImplementedError"], "methods", ["None"], ["", "def", "action_space_shortest_path", "(", "\n", "self", ",", "\n", "source", ":", "AgentState", ",", "\n", "targets", ":", "Sequence", "[", "AgentState", "]", ",", "\n", "agent_id", ":", "int", "=", "0", ",", "\n", ")", "->", "List", "[", "ShortestPathPoint", "]", ":", "\n", "        ", "r\"\"\"\n        Returns:\n            List of agent states and actions along the shortest path from\n            source to the nearest target (both included). If one of the\n            target(s) is identical to the source, a list containing only\n            one node with the identical agent state is returned. Returns\n            an empty list in case none of the targets are reachable from\n            the source. For the last item in the returned list the action\n            will be None.\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", "\n", "\"This function is no longer implemented. Please use the greedy \"", "\n", "\"follower instead\"", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSim.up_vector": [[484, 487], ["numpy.array"], "methods", ["None"], ["", "@", "property", "\n", "def", "up_vector", "(", "self", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "0.0", ",", "1.0", ",", "0.0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSim.forward_vector": [[488, 491], ["numpy.array"], "methods", ["None"], ["", "@", "property", "\n", "def", "forward_vector", "(", "self", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "return", "-", "np", ".", "array", "(", "[", "0.0", ",", "0.0", ",", "1.0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSim.get_straight_shortest_path_points": [[492, 498], ["habitat_sim.ShortestPath", "habitat_simulator.HabitatSim.pathfinder.find_path"], "methods", ["None"], ["", "def", "get_straight_shortest_path_points", "(", "self", ",", "position_a", ",", "position_b", ")", ":", "\n", "        ", "path", "=", "habitat_sim", ".", "ShortestPath", "(", ")", "\n", "path", ".", "requested_start", "=", "position_a", "\n", "path", ".", "requested_end", "=", "position_b", "\n", "self", ".", "pathfinder", ".", "find_path", "(", "path", ")", "\n", "return", "path", ".", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSim.sample_navigable_point": [[499, 501], ["habitat_simulator.HabitatSim.pathfinder.get_random_navigable_point().tolist", "habitat_simulator.HabitatSim.pathfinder.get_random_navigable_point"], "methods", ["None"], ["", "def", "sample_navigable_point", "(", "self", ")", "->", "List", "[", "float", "]", ":", "\n", "        ", "return", "self", ".", "pathfinder", ".", "get_random_navigable_point", "(", ")", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSim.is_navigable": [[502, 504], ["habitat_simulator.HabitatSim.pathfinder.is_navigable"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.is_navigable"], ["", "def", "is_navigable", "(", "self", ",", "point", ":", "List", "[", "float", "]", ")", "->", "bool", ":", "\n", "        ", "return", "self", ".", "pathfinder", ".", "is_navigable", "(", "point", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSim.semantic_annotations": [[505, 536], ["None"], "methods", ["None"], ["", "def", "semantic_annotations", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        Returns:\n            SemanticScene which is a three level hierarchy of semantic\n            annotations for the current scene. Specifically this method\n            returns a SemanticScene which contains a list of SemanticLevel's\n            where each SemanticLevel contains a list of SemanticRegion's where\n            each SemanticRegion contains a list of SemanticObject's.\n\n            SemanticScene has attributes: aabb(axis-aligned bounding box) which\n            has attributes aabb.center and aabb.sizes which are 3d vectors,\n            categories, levels, objects, regions.\n\n            SemanticLevel has attributes: id, aabb, objects and regions.\n\n            SemanticRegion has attributes: id, level, aabb, category (to get\n            name of category use category.name()) and objects.\n\n            SemanticObject has attributes: id, region, aabb, obb (oriented\n            bounding box) and category.\n\n            SemanticScene contains List[SemanticLevels]\n            SemanticLevel contains List[SemanticRegion]\n            SemanticRegion contains List[SemanticObject]\n\n            Example to loop through in a hierarchical fashion:\n            for level in semantic_scene.levels:\n                for region in level.regions:\n                    for obj in region.objects:\n        \"\"\"", "\n", "return", "self", ".", "semantic_scene", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSim._get_agent_config": [[537, 543], ["getattr"], "methods", ["None"], ["", "def", "_get_agent_config", "(", "self", ",", "agent_id", ":", "Optional", "[", "int", "]", "=", "None", ")", "->", "Any", ":", "\n", "        ", "if", "agent_id", "is", "None", ":", "\n", "            ", "agent_id", "=", "self", ".", "habitat_config", ".", "DEFAULT_AGENT_ID", "\n", "", "agent_name", "=", "self", ".", "habitat_config", ".", "AGENTS", "[", "agent_id", "]", "\n", "agent_config", "=", "getattr", "(", "self", ".", "habitat_config", ",", "agent_name", ")", "\n", "return", "agent_config", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSim.get_agent_state": [[544, 546], ["habitat_simulator.HabitatSim.get_agent().get_state", "habitat_simulator.HabitatSim.get_agent"], "methods", ["None"], ["", "def", "get_agent_state", "(", "self", ",", "agent_id", ":", "int", "=", "0", ")", "->", "habitat_sim", ".", "AgentState", ":", "\n", "        ", "return", "self", ".", "get_agent", "(", "agent_id", ")", ".", "get_state", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSim.set_agent_state": [[547, 584], ["habitat_simulator.HabitatSim.get_agent", "habitat_simulator.HabitatSim.get_agent_state", "habitat_simulator.HabitatSim.set_state"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.get_agent_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.set_state"], ["", "def", "set_agent_state", "(", "\n", "self", ",", "\n", "position", ":", "List", "[", "float", "]", ",", "\n", "rotation", ":", "List", "[", "float", "]", ",", "\n", "agent_id", ":", "int", "=", "0", ",", "\n", "reset_sensors", ":", "bool", "=", "True", ",", "\n", ")", "->", "bool", ":", "\n", "        ", "r\"\"\"Sets agent state similar to initialize_agent, but without agents\n        creation. On failure to place the agent in the proper position, it is\n        moved back to its previous pose.\n\n        Args:\n            position: list containing 3 entries for (x, y, z).\n            rotation: list with 4 entries for (x, y, z, w) elements of unit\n                quaternion (versor) representing agent 3D orientation,\n                (https://en.wikipedia.org/wiki/Versor)\n            agent_id: int identification of agent from multiagent setup.\n            reset_sensors: bool for if sensor changes (e.g. tilt) should be\n                reset).\n\n        Returns:\n            True if the set was successful else moves the agent back to its\n            original pose and returns false.\n        \"\"\"", "\n", "agent", "=", "self", ".", "get_agent", "(", "agent_id", ")", "\n", "new_state", "=", "self", ".", "get_agent_state", "(", "agent_id", ")", "\n", "new_state", ".", "position", "=", "position", "\n", "new_state", ".", "rotation", "=", "rotation", "\n", "\n", "# NB: The agent state also contains the sensor states in _absolute_", "\n", "# coordinates. In order to set the agent's body to a specific", "\n", "# location and have the sensors follow, we must not provide any", "\n", "# state for the sensors. This will cause them to follow the agent's", "\n", "# body", "\n", "new_state", ".", "sensor_states", "=", "{", "}", "\n", "agent", ".", "set_state", "(", "new_state", ",", "reset_sensors", ")", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSim.get_observations_at": [[585, 614], ["habitat_simulator.HabitatSim.get_agent_state", "habitat_simulator.HabitatSim.set_agent_state", "habitat_simulator.HabitatSim.get_sensor_observations", "habitat_simulator.HabitatSim._sensor_suite.get_observations", "habitat_simulator.HabitatSim.set_agent_state"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.get_agent_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSim.set_agent_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get_observations", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSim.set_agent_state"], ["", "def", "get_observations_at", "(", "\n", "self", ",", "\n", "position", ":", "Optional", "[", "List", "[", "float", "]", "]", "=", "None", ",", "\n", "rotation", ":", "Optional", "[", "List", "[", "float", "]", "]", "=", "None", ",", "\n", "keep_agent_at_new_pose", ":", "bool", "=", "False", ",", "\n", ")", "->", "Optional", "[", "Observations", "]", ":", "\n", "        ", "current_state", "=", "self", ".", "get_agent_state", "(", ")", "\n", "if", "position", "is", "None", "or", "rotation", "is", "None", ":", "\n", "            ", "success", "=", "True", "\n", "", "else", ":", "\n", "            ", "success", "=", "self", ".", "set_agent_state", "(", "\n", "position", ",", "rotation", ",", "reset_sensors", "=", "False", "\n", ")", "\n", "\n", "", "if", "success", ":", "\n", "            ", "sim_obs", "=", "self", ".", "get_sensor_observations", "(", ")", "\n", "\n", "self", ".", "_prev_sim_obs", "=", "sim_obs", "\n", "\n", "observations", "=", "self", ".", "_sensor_suite", ".", "get_observations", "(", "sim_obs", ")", "\n", "if", "not", "keep_agent_at_new_pose", ":", "\n", "                ", "self", ".", "set_agent_state", "(", "\n", "current_state", ".", "position", ",", "\n", "current_state", ".", "rotation", ",", "\n", "reset_sensors", "=", "False", ",", "\n", ")", "\n", "", "return", "observations", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSim.distance_to_closest_obstacle": [[615, 620], ["habitat_simulator.HabitatSim.pathfinder.distance_to_closest_obstacle"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSim.distance_to_closest_obstacle"], ["", "", "def", "distance_to_closest_obstacle", "(", "\n", "self", ",", "position", ":", "np", ".", "ndarray", ",", "max_search_radius", ":", "float", "=", "2.0", "\n", ")", "->", "float", ":", "\n", "        ", "return", "self", ".", "pathfinder", ".", "distance_to_closest_obstacle", "(", "\n", "position", ",", "max_search_radius", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSim.island_radius": [[622, 624], ["habitat_simulator.HabitatSim.pathfinder.island_radius"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSim.island_radius"], ["", "def", "island_radius", "(", "self", ",", "position", ":", "Sequence", "[", "float", "]", ")", "->", "float", ":", "\n", "        ", "return", "self", ".", "pathfinder", ".", "island_radius", "(", "position", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSim.previous_step_collided": [[625, 639], ["habitat_simulator.HabitatSim._prev_sim_obs.get"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get"], ["", "@", "property", "\n", "def", "previous_step_collided", "(", "self", ")", ":", "\n", "        ", "r\"\"\"Whether or not the previous step resulted in a collision\n\n        Returns:\n            bool: True if the previous step resulted in a collision, false otherwise\n\n        Warning:\n            This feild is only updated when :meth:`step`, :meth:`reset`, or :meth:`get_observations_at` are\n            called.  It does not update when the agent is moved to a new loction.  Furthermore, it\n            will _always_ be false after :meth:`reset` or :meth:`get_observations_at` as neither of those\n            result in an action (step) being taken.\n        \"\"\"", "\n", "return", "self", ".", "_prev_sim_obs", ".", "get", "(", "\"collided\"", ",", "False", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.overwrite_config": [[46, 84], ["config_from.items", "isinstance", "attr.lower", "hasattr", "key.lower", "NameError", "config.items", "setattr", "setattr", "habitat_simulator.overwrite_config.if_config_to_lower"], "function", ["None"], ["def", "overwrite_config", "(", "\n", "config_from", ":", "Config", ",", "\n", "config_to", ":", "Any", ",", "\n", "ignore_keys", ":", "Optional", "[", "Set", "[", "str", "]", "]", "=", "None", ",", "\n", "trans_dict", ":", "Optional", "[", "Dict", "[", "str", ",", "Callable", "]", "]", "=", "None", ",", "\n", ")", "->", "None", ":", "\n", "    ", "r\"\"\"Takes Habitat Lab config and Habitat-Sim config structures. Overwrites\n    Habitat-Sim config with Habitat Lab values, where a field name is present\n    in lowercase. Mostly used to avoid :ref:`sim_cfg.field = hapi_cfg.FIELD`\n    code.\n    Args:\n        config_from: Habitat Lab config node.\n        config_to: Habitat-Sim config structure.\n        ignore_keys: Optional set of keys to ignore in config_to\n        trans_dict: A Dict of str, callable which can be used on any value that has a matching key if not in ignore_keys.\n    \"\"\"", "\n", "\n", "def", "if_config_to_lower", "(", "config", ")", ":", "\n", "        ", "if", "isinstance", "(", "config", ",", "Config", ")", ":", "\n", "            ", "return", "{", "key", ".", "lower", "(", ")", ":", "val", "for", "key", ",", "val", "in", "config", ".", "items", "(", ")", "}", "\n", "", "else", ":", "\n", "            ", "return", "config", "\n", "\n", "", "", "for", "attr", ",", "value", "in", "config_from", ".", "items", "(", ")", ":", "\n", "        ", "low_attr", "=", "attr", ".", "lower", "(", ")", "\n", "if", "ignore_keys", "is", "None", "or", "low_attr", "not", "in", "ignore_keys", ":", "\n", "            ", "if", "hasattr", "(", "config_to", ",", "low_attr", ")", ":", "\n", "                ", "if", "trans_dict", "is", "not", "None", "and", "low_attr", "in", "trans_dict", ":", "\n", "                    ", "setattr", "(", "config_to", ",", "low_attr", ",", "trans_dict", "[", "low_attr", "]", "(", "value", ")", ")", "\n", "", "else", ":", "\n", "                    ", "setattr", "(", "config_to", ",", "low_attr", ",", "if_config_to_lower", "(", "value", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "raise", "NameError", "(", "\n", "f\"\"\"{low_attr} is not found on habitat_sim but is found on habitat_lab config.\n                    It's also not in the list of keys to ignore: {ignore_keys}\n                    Did you make a typo in the config?\n                    If not the version of Habitat Sim may not be compatible with Habitat Lab version: {config_from}\n                    \"\"\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.check_sim_obs": [[242, 248], ["None"], "function", ["None"], ["", "def", "check_sim_obs", "(", "\n", "obs", ":", "Union", "[", "np", ".", "ndarray", ",", "\"Tensor\"", ",", "None", "]", ",", "sensor", ":", "Sensor", "\n", ")", "->", "None", ":", "\n", "    ", "assert", "obs", "is", "not", "None", ",", "(", "\n", "\"Observation corresponding to {} not present in \"", "\n", "\"simulator's observations\"", ".", "format", "(", "sensor", ".", "uuid", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.actions.HabitatSimActionsSingleton.__attrs_post_init__": [[41, 44], ["None"], "methods", ["None"], ["def", "__attrs_post_init__", "(", "self", ")", ":", "\n", "        ", "for", "action", "in", "_DefaultHabitatSimActions", ":", "\n", "            ", "self", ".", "_known_actions", "[", "action", ".", "name", "]", "=", "action", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.actions.HabitatSimActionsSingleton.extend_action_space": [[45, 66], ["len"], "methods", ["None"], ["", "", "def", "extend_action_space", "(", "self", ",", "name", ":", "str", ")", "->", "int", ":", "\n", "        ", "r\"\"\"Extends the action space to accommodate a new action with\n        the name :p:`name`\n\n        :param name: The name of the new action\n        :return: The number the action is registered on\n\n        Usage:\n\n        .. code:: py\n\n            from habitat.sims.habitat_simulator.actions import HabitatSimActions\n            HabitatSimActions.extend_action_space(\"MY_ACTION\")\n            print(HabitatSimActions.MY_ACTION)\n        \"\"\"", "\n", "assert", "(", "\n", "name", "not", "in", "self", ".", "_known_actions", "\n", ")", ",", "\"Cannot register an action name twice\"", "\n", "self", ".", "_known_actions", "[", "name", "]", "=", "len", "(", "self", ".", "_known_actions", ")", "\n", "\n", "return", "self", ".", "_known_actions", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.actions.HabitatSimActionsSingleton.has_action": [[67, 75], ["None"], "methods", ["None"], ["", "def", "has_action", "(", "self", ",", "name", ":", "str", ")", "->", "bool", ":", "\n", "        ", "r\"\"\"Checks to see if action :p:`name` is already register\n\n        :param name: The name to check\n        :return: Whether or not :p:`name` already exists\n        \"\"\"", "\n", "\n", "return", "name", "in", "self", ".", "_known_actions", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.actions.HabitatSimActionsSingleton.__getattr__": [[76, 78], ["None"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "self", ".", "_known_actions", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.actions.HabitatSimActionsSingleton.__getitem__": [[79, 81], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "self", ".", "_known_actions", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.actions.HabitatSimActionsSingleton.__len__": [[82, 84], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_known_actions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.actions.HabitatSimActionsSingleton.__iter__": [[85, 87], ["iter"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "_known_actions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.actions.HabitatSimV0ActionSpaceConfiguration.get": [[94, 110], ["habitat_sim.ActionSpec", "habitat_sim.ActionSpec", "habitat_sim.ActionSpec", "habitat_sim.ActionSpec", "habitat_sim.ActuationSpec", "habitat_sim.ActuationSpec", "habitat_sim.ActuationSpec"], "methods", ["None"], ["    ", "def", "get", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "HabitatSimActions", ".", "STOP", ":", "habitat_sim", ".", "ActionSpec", "(", "\"stop\"", ")", ",", "\n", "HabitatSimActions", ".", "MOVE_FORWARD", ":", "habitat_sim", ".", "ActionSpec", "(", "\n", "\"move_forward\"", ",", "\n", "habitat_sim", ".", "ActuationSpec", "(", "\n", "amount", "=", "self", ".", "config", ".", "FORWARD_STEP_SIZE", "\n", ")", ",", "\n", ")", ",", "\n", "HabitatSimActions", ".", "TURN_LEFT", ":", "habitat_sim", ".", "ActionSpec", "(", "\n", "\"turn_left\"", ",", "\n", "habitat_sim", ".", "ActuationSpec", "(", "amount", "=", "self", ".", "config", ".", "TURN_ANGLE", ")", ",", "\n", ")", ",", "\n", "HabitatSimActions", ".", "TURN_RIGHT", ":", "habitat_sim", ".", "ActionSpec", "(", "\n", "\"turn_right\"", ",", "\n", "habitat_sim", ".", "ActuationSpec", "(", "amount", "=", "self", ".", "config", ".", "TURN_ANGLE", ")", ",", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.actions.HabitatSimV1ActionSpaceConfiguration.get": [[118, 134], ["actions.HabitatSimV0ActionSpaceConfiguration.get", "super().get.update", "habitat_sim.ActionSpec", "habitat_sim.ActionSpec", "habitat_sim.ActuationSpec", "habitat_sim.ActuationSpec"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.il.metrics.Metric.update"], ["    ", "def", "get", "(", "self", ")", ":", "\n", "        ", "config", "=", "super", "(", ")", ".", "get", "(", ")", "\n", "new_config", "=", "{", "\n", "HabitatSimActions", ".", "LOOK_UP", ":", "habitat_sim", ".", "ActionSpec", "(", "\n", "\"look_up\"", ",", "\n", "habitat_sim", ".", "ActuationSpec", "(", "amount", "=", "self", ".", "config", ".", "TILT_ANGLE", ")", ",", "\n", ")", ",", "\n", "HabitatSimActions", ".", "LOOK_DOWN", ":", "habitat_sim", ".", "ActionSpec", "(", "\n", "\"look_down\"", ",", "\n", "habitat_sim", ".", "ActuationSpec", "(", "amount", "=", "self", ".", "config", ".", "TILT_ANGLE", ")", ",", "\n", ")", ",", "\n", "}", "\n", "\n", "config", ".", "update", "(", "new_config", ")", "\n", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.actions.HabitatSimPyRobotActionSpaceConfiguration.get": [[138, 190], ["habitat_sim.ActionSpec", "habitat_sim.ActionSpec", "habitat_sim.ActionSpec", "habitat_sim.ActionSpec", "habitat_sim.ActionSpec", "habitat_sim.ActionSpec", "habitat_sim.ActionSpec", "habitat_sim.ActionSpec", "habitat_sim.ActionSpec", "habitat_sim.PyRobotNoisyActuationSpec", "habitat_sim.PyRobotNoisyActuationSpec", "habitat_sim.PyRobotNoisyActuationSpec", "habitat_sim.ActuationSpec", "habitat_sim.ActuationSpec", "habitat_sim.ActuationSpec", "habitat_sim.ActuationSpec", "habitat_sim.ActuationSpec"], "methods", ["None"], ["    ", "def", "get", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "HabitatSimActions", ".", "STOP", ":", "habitat_sim", ".", "ActionSpec", "(", "\"stop\"", ")", ",", "\n", "HabitatSimActions", ".", "MOVE_FORWARD", ":", "habitat_sim", ".", "ActionSpec", "(", "\n", "\"pyrobot_noisy_move_forward\"", ",", "\n", "habitat_sim", ".", "PyRobotNoisyActuationSpec", "(", "\n", "amount", "=", "self", ".", "config", ".", "FORWARD_STEP_SIZE", ",", "\n", "robot", "=", "self", ".", "config", ".", "NOISE_MODEL", ".", "ROBOT", ",", "\n", "controller", "=", "self", ".", "config", ".", "NOISE_MODEL", ".", "CONTROLLER", ",", "\n", "noise_multiplier", "=", "self", ".", "config", ".", "NOISE_MODEL", ".", "NOISE_MULTIPLIER", ",", "\n", ")", ",", "\n", ")", ",", "\n", "HabitatSimActions", ".", "TURN_LEFT", ":", "habitat_sim", ".", "ActionSpec", "(", "\n", "\"pyrobot_noisy_turn_left\"", ",", "\n", "habitat_sim", ".", "PyRobotNoisyActuationSpec", "(", "\n", "amount", "=", "self", ".", "config", ".", "TURN_ANGLE", ",", "\n", "robot", "=", "self", ".", "config", ".", "NOISE_MODEL", ".", "ROBOT", ",", "\n", "controller", "=", "self", ".", "config", ".", "NOISE_MODEL", ".", "CONTROLLER", ",", "\n", "noise_multiplier", "=", "self", ".", "config", ".", "NOISE_MODEL", ".", "NOISE_MULTIPLIER", ",", "\n", ")", ",", "\n", ")", ",", "\n", "HabitatSimActions", ".", "TURN_RIGHT", ":", "habitat_sim", ".", "ActionSpec", "(", "\n", "\"pyrobot_noisy_turn_right\"", ",", "\n", "habitat_sim", ".", "PyRobotNoisyActuationSpec", "(", "\n", "amount", "=", "self", ".", "config", ".", "TURN_ANGLE", ",", "\n", "robot", "=", "self", ".", "config", ".", "NOISE_MODEL", ".", "ROBOT", ",", "\n", "controller", "=", "self", ".", "config", ".", "NOISE_MODEL", ".", "CONTROLLER", ",", "\n", "noise_multiplier", "=", "self", ".", "config", ".", "NOISE_MODEL", ".", "NOISE_MULTIPLIER", ",", "\n", ")", ",", "\n", ")", ",", "\n", "HabitatSimActions", ".", "LOOK_UP", ":", "habitat_sim", ".", "ActionSpec", "(", "\n", "\"look_up\"", ",", "\n", "habitat_sim", ".", "ActuationSpec", "(", "amount", "=", "self", ".", "config", ".", "TILT_ANGLE", ")", ",", "\n", ")", ",", "\n", "HabitatSimActions", ".", "LOOK_DOWN", ":", "habitat_sim", ".", "ActionSpec", "(", "\n", "\"look_down\"", ",", "\n", "habitat_sim", ".", "ActuationSpec", "(", "amount", "=", "self", ".", "config", ".", "TILT_ANGLE", ")", ",", "\n", ")", ",", "\n", "# The perfect actions are needed for the oracle planner", "\n", "\"_forward\"", ":", "habitat_sim", ".", "ActionSpec", "(", "\n", "\"move_forward\"", ",", "\n", "habitat_sim", ".", "ActuationSpec", "(", "\n", "amount", "=", "self", ".", "config", ".", "FORWARD_STEP_SIZE", "\n", ")", ",", "\n", ")", ",", "\n", "\"_left\"", ":", "habitat_sim", ".", "ActionSpec", "(", "\n", "\"turn_left\"", ",", "\n", "habitat_sim", ".", "ActuationSpec", "(", "amount", "=", "self", ".", "config", ".", "TURN_ANGLE", ")", ",", "\n", ")", ",", "\n", "\"_right\"", ":", "habitat_sim", ".", "ActionSpec", "(", "\n", "\"turn_right\"", ",", "\n", "habitat_sim", ".", "ActuationSpec", "(", "amount", "=", "self", ".", "config", ".", "TURN_ANGLE", ")", ",", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.actions.HabitatSimVelocityCtrlActionSpaceConfiguration.get": [[196, 200], ["habitat_sim.ActionSpec"], "methods", ["None"], ["    ", "def", "get", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "HabitatSimActions", ".", "VELOCITY_CTRL", ":", "habitat_sim", ".", "ActionSpec", "(", "\n", "\"velocity_control\"", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.__init__._try_register_habitat_sim": [[9, 28], ["habitat.core.registry.registry.register_simulator"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry.register_simulator"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.debug_visualizer.DebugVisualizer.__init__": [[23, 39], ["sim.get_debug_line_render"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "sim", ":", "habitat_sim", ".", "Simulator", ",", "\n", "output_path", ":", "str", "=", "\"visual_debug_output/\"", ",", "\n", "default_sensor_uuid", ":", "str", "=", "\"rgb\"", ",", "\n", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Initialize the debugger provided a Simulator and the uuid of the debug sensor.\n        NOTE: Expects the debug sensor attached to and coincident with agent 0's frame.\n        \"\"\"", "\n", "self", ".", "sim", "=", "sim", "\n", "self", ".", "output_path", "=", "output_path", "\n", "self", ".", "default_sensor_uuid", "=", "default_sensor_uuid", "\n", "self", ".", "_debug_obs", ":", "List", "[", "Any", "]", "=", "[", "]", "\n", "# NOTE: visualizations from the DebugLinerRender utility will only be visible in PINHOLE RGB sensor views", "\n", "self", ".", "debug_line_render", "=", "sim", ".", "get_debug_line_render", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.debug_visualizer.DebugVisualizer.look_at": [[40, 67], ["debug_visualizer.DebugVisualizer.sim.get_agent", "magnum.Quaternion.from_matrix", "magnum.Matrix4.look_at().rotation", "magnum.Vector3", "magnum.Vector3", "magnum.Matrix4.look_at"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.rotation", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.debug_visualizer.DebugVisualizer.look_at"], ["", "def", "look_at", "(", "\n", "self", ",", "\n", "look_at", ":", "mn", ".", "Vector3", ",", "\n", "look_from", ":", "Optional", "[", "mn", ".", "Vector3", "]", "=", "None", ",", "\n", "look_up", ":", "Optional", "[", "mn", ".", "Vector3", "]", "=", "None", ",", "\n", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Point the debug camera at a target.\n        \"\"\"", "\n", "agent", "=", "self", ".", "sim", ".", "get_agent", "(", "0", ")", "\n", "camera_pos", "=", "(", "\n", "look_from", "\n", "if", "look_from", "is", "not", "None", "\n", "else", "agent", ".", "scene_node", ".", "translation", "\n", ")", "\n", "if", "look_up", "is", "None", ":", "\n", "# pick a valid \"up\" vector.", "\n", "            ", "look_dir", "=", "look_at", "-", "camera_pos", "\n", "look_up", "=", "(", "\n", "mn", ".", "Vector3", "(", "0", ",", "1.0", ",", "0", ")", "\n", "if", "look_dir", "[", "0", "]", "!=", "0", "or", "look_dir", "[", "2", "]", "!=", "0", "\n", "else", "mn", ".", "Vector3", "(", "1.0", ",", "0", ",", "0", ")", "\n", ")", "\n", "", "agent", ".", "scene_node", ".", "rotation", "=", "mn", ".", "Quaternion", ".", "from_matrix", "(", "\n", "mn", ".", "Matrix4", ".", "look_at", "(", "camera_pos", ",", "look_at", ",", "look_up", ")", ".", "rotation", "(", ")", "\n", ")", "\n", "agent", ".", "scene_node", ".", "translation", "=", "camera_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.debug_visualizer.DebugVisualizer.get_observation": [[68, 85], ["debug_visualizer.DebugVisualizer.look_at", "debug_visualizer.DebugVisualizer._debug_obs.append", "obs_cache.append", "debug_visualizer.DebugVisualizer.sim.get_sensor_observations", "debug_visualizer.DebugVisualizer.sim.get_sensor_observations"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.debug_visualizer.DebugVisualizer.look_at"], ["", "def", "get_observation", "(", "\n", "self", ",", "\n", "look_at", ":", "Optional", "[", "mn", ".", "Vector3", "]", "=", "None", ",", "\n", "look_from", ":", "Optional", "[", "mn", ".", "Vector3", "]", "=", "None", ",", "\n", "obs_cache", ":", "Optional", "[", "List", "[", "Any", "]", "]", "=", "None", ",", "\n", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Render a debug observation of the current state and cache it.\n        Optionally configure the camera transform.\n        Optionally provide an alternative observation cache.\n        \"\"\"", "\n", "if", "look_at", "is", "not", "None", ":", "\n", "            ", "self", ".", "look_at", "(", "look_at", ",", "look_from", ")", "\n", "", "if", "obs_cache", "is", "None", ":", "\n", "            ", "self", ".", "_debug_obs", ".", "append", "(", "self", ".", "sim", ".", "get_sensor_observations", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "obs_cache", ".", "append", "(", "self", ".", "sim", ".", "get_sensor_observations", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.debug_visualizer.DebugVisualizer.save_observation": [[86, 117], ["debug_visualizer.DebugVisualizer.get_observation", "habitat.utils.common.check_make_dir", "vut.observation_to_image", "datetime.now().strftime", "vut.observation_to_image.save", "vut.observation_to_image.show", "datetime.now"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.BumpSensor.get_observation", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.check_make_dir", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.save"], ["", "", "def", "save_observation", "(", "\n", "self", ",", "\n", "output_path", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "prefix", ":", "str", "=", "\"\"", ",", "\n", "look_at", ":", "Optional", "[", "mn", ".", "Vector3", "]", "=", "None", ",", "\n", "look_from", ":", "Optional", "[", "mn", ".", "Vector3", "]", "=", "None", ",", "\n", "obs_cache", ":", "Optional", "[", "List", "[", "Any", "]", "]", "=", "None", ",", "\n", "show", ":", "bool", "=", "True", ",", "\n", ")", "->", "str", ":", "\n", "        ", "\"\"\"\n        Get an observation and save it to file.\n        Return the filepath.\n        \"\"\"", "\n", "obs_cache", "=", "[", "]", "\n", "self", ".", "get_observation", "(", "look_at", ",", "look_from", ",", "obs_cache", ")", "\n", "# save the obs as an image", "\n", "if", "output_path", "is", "None", ":", "\n", "            ", "output_path", "=", "self", ".", "output_path", "\n", "", "check_make_dir", "(", "output_path", ")", "\n", "from", "habitat_sim", ".", "utils", "import", "viz_utils", "as", "vut", "\n", "\n", "image", "=", "vut", ".", "observation_to_image", "(", "obs_cache", "[", "0", "]", "[", "\"rgb\"", "]", ",", "\"color\"", ")", "\n", "from", "datetime", "import", "datetime", "\n", "\n", "# filename format \"prefixmonth_day_year_hourminutesecondmicrosecond.png\"", "\n", "date_time", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%m_%d_%Y_%H%M%S%f\"", ")", "\n", "file_path", "=", "output_path", "+", "prefix", "+", "date_time", "+", "\".png\"", "\n", "image", ".", "save", "(", "file_path", ")", "\n", "if", "show", ":", "\n", "            ", "image", ".", "show", "(", ")", "\n", "", "return", "file_path", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.debug_visualizer.DebugVisualizer.peek_rigid_object": [[118, 134], ["debug_visualizer.DebugVisualizer._peek_object"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.debug_visualizer.DebugVisualizer._peek_object"], ["", "def", "peek_rigid_object", "(", "\n", "self", ",", "\n", "obj", ":", "habitat_sim", ".", "physics", ".", "ManagedRigidObject", ",", "\n", "cam_local_pos", ":", "Optional", "[", "mn", ".", "Vector3", "]", "=", "None", ",", "\n", "peek_all_axis", ":", "bool", "=", "False", ",", "\n", ")", "->", "str", ":", "\n", "        ", "\"\"\"\n        Specialization to peek a rigid object.\n        See _peek_object.\n        \"\"\"", "\n", "\n", "return", "self", ".", "_peek_object", "(", "\n", "obj", ",", "\n", "obj", ".", "root_scene_node", ".", "cumulative_bb", ",", "\n", "cam_local_pos", ",", "\n", "peek_all_axis", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.debug_visualizer.DebugVisualizer.peek_articulated_object": [[136, 153], ["get_ao_global_bb", "debug_visualizer.DebugVisualizer._peek_object"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.sim_utilities.get_ao_global_bb", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.debug_visualizer.DebugVisualizer._peek_object"], ["", "def", "peek_articulated_object", "(", "\n", "self", ",", "\n", "obj", ":", "habitat_sim", ".", "physics", ".", "ManagedArticulatedObject", ",", "\n", "cam_local_pos", ":", "Optional", "[", "mn", ".", "Vector3", "]", "=", "None", ",", "\n", "peek_all_axis", ":", "bool", "=", "False", ",", "\n", ")", "->", "str", ":", "\n", "        ", "\"\"\"\n        Specialization to peek an articulated object.\n        See _peek_object.\n        \"\"\"", "\n", "from", "habitat", ".", "sims", ".", "habitat_simulator", ".", "sim_utilities", "import", "(", "\n", "get_ao_global_bb", ",", "\n", ")", "\n", "\n", "obj_bb", "=", "get_ao_global_bb", "(", "obj", ")", "\n", "\n", "return", "self", ".", "_peek_object", "(", "obj", ",", "obj_bb", ",", "cam_local_pos", ",", "peek_all_axis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.debug_visualizer.DebugVisualizer._peek_object": [[154, 226], ["obj.root_scene_node.absolute_transformation", "obj_bb.size", "math.tan", "magnum.Vector3", "debug_visualizer.DebugVisualizer.save_observation", "range", "enumerate", "Image.new.show", "numpy.amax", "magnum.Vector3", "debug_visualizer.DebugVisualizer.get_observation", "vut.observation_to_image", "Image.new.paste", "numpy.array", "obj.root_scene_node.absolute_transformation.transform_vector().normalized", "Image.new", "obj.root_scene_node.absolute_transformation.transform_vector().normalized", "obj.root_scene_node.absolute_transformation.transform_vector", "obj.root_scene_node.absolute_transformation.transform_vector"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.debug_visualizer.DebugVisualizer.save_observation", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.BumpSensor.get_observation"], ["", "def", "_peek_object", "(", "\n", "self", ",", "\n", "obj", ":", "Union", "[", "\n", "habitat_sim", ".", "physics", ".", "ManagedArticulatedObject", ",", "\n", "habitat_sim", ".", "physics", ".", "ManagedRigidObject", ",", "\n", "]", ",", "\n", "obj_bb", ":", "mn", ".", "Range3D", ",", "\n", "cam_local_pos", ":", "Optional", "[", "mn", ".", "Vector3", "]", "=", "None", ",", "\n", "peek_all_axis", ":", "bool", "=", "False", ",", "\n", ")", "->", "str", ":", "\n", "        ", "\"\"\"\n        Compute a camera placement to view an ArticulatedObject and show/save an observation.\n        Return the filepath.\n        If peek_all_axis, then create a merged 3x2 matrix of images looking at the object from all angles.\n        \"\"\"", "\n", "obj_abs_transform", "=", "obj", ".", "root_scene_node", ".", "absolute_transformation", "(", ")", "\n", "look_at", "=", "obj_abs_transform", ".", "translation", "\n", "bb_size", "=", "obj_bb", ".", "size", "(", ")", "\n", "# TODO: query fov and aspect from the camera spec", "\n", "fov", "=", "90", "\n", "aspect", "=", "0.75", "\n", "import", "math", "\n", "\n", "# compute the optimal view distance from the camera specs and object size", "\n", "distance", "=", "(", "np", ".", "amax", "(", "np", ".", "array", "(", "bb_size", ")", ")", "/", "aspect", ")", "/", "math", ".", "tan", "(", "\n", "fov", "/", "(", "360", "/", "math", ".", "pi", ")", "\n", ")", "\n", "if", "cam_local_pos", "is", "None", ":", "\n", "# default to -Z (forward) of the object", "\n", "            ", "cam_local_pos", "=", "mn", ".", "Vector3", "(", "0", ",", "0", ",", "-", "1", ")", "\n", "", "if", "not", "peek_all_axis", ":", "\n", "            ", "look_from", "=", "(", "\n", "obj_abs_transform", ".", "transform_vector", "(", "cam_local_pos", ")", ".", "normalized", "(", ")", "\n", "*", "distance", "\n", "+", "look_at", "\n", ")", "\n", "return", "self", ".", "save_observation", "(", "\n", "prefix", "=", "\"peek_\"", "+", "obj", ".", "handle", ",", "\n", "look_at", "=", "look_at", ",", "\n", "look_from", "=", "look_from", ",", "\n", ")", "\n", "", "else", ":", "\n", "# collect axis observations", "\n", "            ", "axis_obs", ":", "List", "[", "Any", "]", "=", "[", "]", "\n", "for", "axis", "in", "range", "(", "6", ")", ":", "\n", "                ", "axis_vec", "=", "mn", ".", "Vector3", "(", ")", "\n", "axis_vec", "[", "axis", "%", "3", "]", "=", "1", "if", "axis", "//", "3", "==", "0", "else", "-", "1", "\n", "look_from", "=", "(", "\n", "obj_abs_transform", ".", "transform_vector", "(", "axis_vec", ")", ".", "normalized", "(", ")", "\n", "*", "distance", "\n", "+", "look_at", "\n", ")", "\n", "self", ".", "get_observation", "(", "look_at", ",", "look_from", ",", "axis_obs", ")", "\n", "# stitch images together", "\n", "", "stitched_image", "=", "None", "\n", "from", "PIL", "import", "Image", "\n", "\n", "from", "habitat_sim", ".", "utils", "import", "viz_utils", "as", "vut", "\n", "\n", "for", "ix", ",", "obs", "in", "enumerate", "(", "axis_obs", ")", ":", "\n", "                ", "image", "=", "vut", ".", "observation_to_image", "(", "obs", "[", "\"rgb\"", "]", ",", "\"color\"", ")", "\n", "if", "stitched_image", "is", "None", ":", "\n", "                    ", "stitched_image", "=", "Image", ".", "new", "(", "\n", "image", ".", "mode", ",", "(", "image", ".", "size", "[", "0", "]", "*", "3", ",", "image", ".", "size", "[", "1", "]", "*", "2", ")", "\n", ")", "\n", "", "location", "=", "(", "\n", "image", ".", "size", "[", "0", "]", "*", "(", "ix", "%", "3", ")", ",", "\n", "image", ".", "size", "[", "1", "]", "*", "(", "0", "if", "ix", "//", "3", "==", "0", "else", "1", ")", ",", "\n", ")", "\n", "stitched_image", ".", "paste", "(", "image", ",", "location", ")", "\n", "", "stitched_image", ".", "show", "(", ")", "\n", "", "return", "\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.debug_visualizer.DebugVisualizer.make_debug_video": [[227, 256], ["habitat.utils.common.check_make_dir", "datetime.now().strftime", "habitat.core.logging.logger.info", "vut.make_video", "datetime.now"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.check_make_dir"], ["", "def", "make_debug_video", "(", "\n", "self", ",", "\n", "output_path", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "prefix", ":", "str", "=", "\"\"", ",", "\n", "fps", ":", "int", "=", "4", ",", "\n", "obs_cache", ":", "Optional", "[", "List", "[", "Any", "]", "]", "=", "None", ",", "\n", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Produce a video from a set of debug observations.\n        \"\"\"", "\n", "if", "output_path", "is", "None", ":", "\n", "            ", "output_path", "=", "self", ".", "output_path", "\n", "\n", "", "check_make_dir", "(", "output_path", ")", "\n", "\n", "# get a timestamp tag with current date and time for video name", "\n", "from", "datetime", "import", "datetime", "\n", "\n", "date_time", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%m_%d_%Y_%H%M%S\"", ")", "\n", "\n", "if", "obs_cache", "is", "None", ":", "\n", "            ", "obs_cache", "=", "self", ".", "_debug_obs", "\n", "\n", "", "from", "habitat_sim", ".", "utils", "import", "viz_utils", "as", "vut", "\n", "\n", "file_path", "=", "output_path", "+", "prefix", "+", "date_time", "\n", "logger", ".", "info", "(", "f\"DebugVisualizer: Saving debug video to {file_path}\"", ")", "\n", "vut", ".", "make_video", "(", "\n", "obs_cache", ",", "self", ".", "default_sensor_uuid", ",", "\"color\"", ",", "file_path", ",", "fps", "=", "fps", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pyrobot.pyrobot.PyRobotRGBSensor.__init__": [[73, 75], ["habitat.core.simulator.RGBSensor.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", "=", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pyrobot.pyrobot.PyRobotRGBSensor._get_observation_space": [[76, 82], ["gym.spaces.Box"], "methods", ["None"], ["", "def", "_get_observation_space", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "return", "spaces", ".", "Box", "(", "\n", "low", "=", "0", ",", "\n", "high", "=", "255", ",", "\n", "shape", "=", "(", "self", ".", "config", ".", "HEIGHT", ",", "self", ".", "config", ".", "WIDTH", ",", "3", ")", ",", "\n", "dtype", "=", "np", ".", "uint8", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pyrobot.pyrobot.PyRobotRGBSensor.get_observation": [[84, 94], ["robot_obs.get", "pyrobot._resize_observation"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pyrobot.pyrobot._resize_observation"], ["", "def", "get_observation", "(", "self", ",", "robot_obs", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "obs", "=", "robot_obs", ".", "get", "(", "self", ".", "uuid", ",", "None", ")", "\n", "\n", "assert", "obs", "is", "not", "None", ",", "\"Invalid observation for {} sensor\"", ".", "format", "(", "\n", "self", ".", "uuid", "\n", ")", "\n", "\n", "obs", "=", "_resize_observation", "(", "obs", ",", "self", ".", "observation_space", ",", "self", ".", "config", ")", "\n", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pyrobot.pyrobot.PyRobotDepthSensor.__init__": [[101, 110], ["habitat.core.simulator.DepthSensor.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "if", "config", ".", "NORMALIZE_DEPTH", ":", "\n", "            ", "self", ".", "min_depth_value", "=", "0", "\n", "self", ".", "max_depth_value", "=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "min_depth_value", "=", "config", ".", "MIN_DEPTH", "\n", "self", ".", "max_depth_value", "=", "config", ".", "MAX_DEPTH", "\n", "\n", "", "super", "(", ")", ".", "__init__", "(", "config", "=", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pyrobot.pyrobot.PyRobotDepthSensor._get_observation_space": [[111, 117], ["gym.spaces.Box"], "methods", ["None"], ["", "def", "_get_observation_space", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "return", "spaces", ".", "Box", "(", "\n", "low", "=", "self", ".", "min_depth_value", ",", "\n", "high", "=", "self", ".", "max_depth_value", ",", "\n", "shape", "=", "(", "self", ".", "config", ".", "HEIGHT", ",", "self", ".", "config", ".", "WIDTH", ",", "1", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pyrobot.pyrobot.PyRobotDepthSensor.get_observation": [[119, 140], ["robot_obs.get", "pyrobot._resize_observation", "numpy.clip", "numpy.expand_dims"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pyrobot.pyrobot._resize_observation"], ["", "def", "get_observation", "(", "self", ",", "robot_obs", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "obs", "=", "robot_obs", ".", "get", "(", "self", ".", "uuid", ",", "None", ")", "\n", "\n", "assert", "obs", "is", "not", "None", ",", "\"Invalid observation for {} sensor\"", ".", "format", "(", "\n", "self", ".", "uuid", "\n", ")", "\n", "\n", "obs", "=", "_resize_observation", "(", "obs", ",", "self", ".", "observation_space", ",", "self", ".", "config", ")", "\n", "\n", "obs", "=", "obs", "/", "MM_IN_METER", "# convert from mm to m", "\n", "\n", "obs", "=", "np", ".", "clip", "(", "obs", ",", "self", ".", "config", ".", "MIN_DEPTH", ",", "self", ".", "config", ".", "MAX_DEPTH", ")", "\n", "if", "self", ".", "config", ".", "NORMALIZE_DEPTH", ":", "\n", "# normalize depth observations to [0, 1]", "\n", "            ", "obs", "=", "(", "obs", "-", "self", ".", "config", ".", "MIN_DEPTH", ")", "/", "(", "\n", "self", ".", "config", ".", "MAX_DEPTH", "-", "self", ".", "config", ".", "MIN_DEPTH", "\n", ")", "\n", "\n", "", "obs", "=", "np", ".", "expand_dims", "(", "obs", ",", "axis", "=", "2", ")", "# make depth observations a 3D array", "\n", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pyrobot.pyrobot.PyRobotBumpSensor._get_observation_space": [[144, 146], ["gym.spaces.Box"], "methods", ["None"], ["    ", "def", "_get_observation_space", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "return", "spaces", ".", "Box", "(", "low", "=", "False", ",", "high", "=", "True", ",", "shape", "=", "(", "1", ",", ")", ",", "dtype", "=", "bool", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pyrobot.pyrobot.PyRobotBumpSensor.get_observation": [[147, 149], ["numpy.array"], "methods", ["None"], ["", "def", "get_observation", "(", "self", ",", "robot_obs", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "robot_obs", "[", "\"bump\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pyrobot.pyrobot.PyRobot.__init__": [[170, 200], ["habitat.core.simulator.SensorSuite", "getattr", "pyrobot.PyRobot._robot_action_space", "pyrobot.Robot", "getattr", "habitat.core.registry.registry.get_sensor", "robot_sensors.append", "pyrobot.PyRobot._config.ROBOT.upper", "habitat.core.registry.registry.get_sensor."], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.pyrobot.pyrobot.PyRobot._robot_action_space", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry.get_sensor"], ["def", "__init__", "(", "self", ",", "config", ":", "Config", ")", "->", "None", ":", "\n", "        ", "self", ".", "_config", "=", "config", "\n", "\n", "robot_sensors", "=", "[", "]", "\n", "for", "sensor_name", "in", "self", ".", "_config", ".", "SENSORS", ":", "\n", "            ", "sensor_cfg", "=", "getattr", "(", "self", ".", "_config", ",", "sensor_name", ")", "\n", "sensor_type", "=", "registry", ".", "get_sensor", "(", "sensor_cfg", ".", "TYPE", ")", "\n", "\n", "assert", "sensor_type", "is", "not", "None", ",", "\"invalid sensor type {}\"", ".", "format", "(", "\n", "sensor_cfg", ".", "TYPE", "\n", ")", "\n", "robot_sensors", ".", "append", "(", "sensor_type", "(", "sensor_cfg", ")", ")", "\n", "", "self", ".", "_sensor_suite", "=", "SensorSuite", "(", "robot_sensors", ")", "\n", "\n", "config_pyrobot", "=", "{", "\n", "\"base_controller\"", ":", "self", ".", "_config", ".", "BASE_CONTROLLER", ",", "\n", "\"base_planner\"", ":", "self", ".", "_config", ".", "BASE_PLANNER", ",", "\n", "}", "\n", "\n", "assert", "(", "\n", "self", ".", "_config", ".", "ROBOT", "in", "self", ".", "_config", ".", "ROBOTS", "\n", ")", ",", "\"Invalid robot type {}\"", ".", "format", "(", "self", ".", "_config", ".", "ROBOT", ")", "\n", "self", ".", "_robot_config", "=", "getattr", "(", "self", ".", "_config", ",", "self", ".", "_config", ".", "ROBOT", ".", "upper", "(", ")", ")", "\n", "\n", "self", ".", "_action_space", "=", "self", ".", "_robot_action_space", "(", "\n", "self", ".", "_config", ".", "ROBOT", ",", "self", ".", "_robot_config", "\n", ")", "\n", "\n", "self", ".", "_robot", "=", "pyrobot", ".", "Robot", "(", "\n", "self", ".", "_config", ".", "ROBOT", ",", "base_config", "=", "config_pyrobot", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pyrobot.pyrobot.PyRobot.get_robot_observations": [[202, 207], ["pyrobot.PyRobot._robot.camera.get_rgb", "pyrobot.PyRobot._robot.camera.get_depth"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_pyrobot.CameraMock.get_rgb", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.test.test_pyrobot.CameraMock.get_depth"], ["", "def", "get_robot_observations", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "\"rgb\"", ":", "self", ".", "_robot", ".", "camera", ".", "get_rgb", "(", ")", ",", "\n", "\"depth\"", ":", "self", ".", "_robot", ".", "camera", ".", "get_depth", "(", ")", ",", "\n", "\"bump\"", ":", "self", ".", "_robot", ".", "base", ".", "base_state", ".", "bumper", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pyrobot.pyrobot.PyRobot.sensor_suite": [[209, 212], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "sensor_suite", "(", "self", ")", "->", "SensorSuite", ":", "\n", "        ", "return", "self", ".", "_sensor_suite", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pyrobot.pyrobot.PyRobot.base": [[213, 216], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "base", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_robot", ".", "base", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pyrobot.pyrobot.PyRobot.camera": [[217, 220], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "camera", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_robot", ".", "camera", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pyrobot.pyrobot.PyRobot._robot_action_space": [[221, 228], ["gym.spaces.Dict", "robot_type.upper"], "methods", ["None"], ["", "def", "_robot_action_space", "(", "self", ",", "robot_type", ",", "robot_config", ")", ":", "\n", "        ", "action_spaces_dict", "=", "{", "}", "\n", "for", "action", "in", "robot_config", ".", "ACTIONS", ":", "\n", "            ", "action_spaces_dict", "[", "action", "]", "=", "ACTION_SPACES", "[", "robot_type", ".", "upper", "(", ")", "]", "[", "\n", "action", "\n", "]", "\n", "", "return", "spaces", ".", "Dict", "(", "action_spaces_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pyrobot.pyrobot.PyRobot.action_space": [[229, 232], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "action_space", "(", "self", ")", "->", "Space", ":", "\n", "        ", "return", "self", ".", "_action_space", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pyrobot.pyrobot.PyRobot.reset": [[233, 240], ["pyrobot.PyRobot._robot.camera.reset", "pyrobot.PyRobot._sensor_suite.get_observations", "pyrobot.PyRobot.get_robot_observations"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get_observations", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pyrobot.pyrobot.PyRobot.get_robot_observations"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_robot", ".", "camera", ".", "reset", "(", ")", "\n", "\n", "observations", "=", "self", ".", "_sensor_suite", ".", "get_observations", "(", "\n", "robot_obs", "=", "self", ".", "get_robot_observations", "(", ")", "\n", ")", "\n", "return", "observations", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pyrobot.pyrobot.PyRobot.step": [[241, 261], ["pyrobot.PyRobot._sensor_suite.get_observations", "getattr", "ValueError", "pyrobot.PyRobot.get_robot_observations", "getattr"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get_observations", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pyrobot.pyrobot.PyRobot.get_robot_observations"], ["", "def", "step", "(", "self", ",", "action", ",", "action_params", ")", ":", "\n", "        ", "r\"\"\"Step in reality. Currently the supported\n        actions are the ones defined in :ref:`_locobot_base_action_space`\n        and :ref:`_locobot_camera_action_space`. For details on how\n        to use these actions please refer to the documentation\n        of namesake methods in PyRobot\n        (https://github.com/facebookresearch/pyrobot).\n        \"\"\"", "\n", "if", "action", "in", "self", ".", "_robot_config", ".", "BASE_ACTIONS", ":", "\n", "            ", "getattr", "(", "self", ".", "_robot", ".", "base", ",", "action", ")", "(", "**", "action_params", ")", "\n", "", "elif", "action", "in", "self", ".", "_robot_config", ".", "CAMERA_ACTIONS", ":", "\n", "            ", "getattr", "(", "self", ".", "_robot", ".", "camera", ",", "action", ")", "(", "**", "action_params", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid action {}\"", ".", "format", "(", "action", ")", ")", "\n", "\n", "", "observations", "=", "self", ".", "_sensor_suite", ".", "get_observations", "(", "\n", "robot_obs", "=", "self", ".", "get_robot_observations", "(", ")", "\n", ")", "\n", "\n", "return", "observations", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pyrobot.pyrobot.PyRobot.render": [[262, 271], ["pyrobot.PyRobot._sensor_suite.get_observations", "pyrobot.PyRobot.get", "pyrobot.PyRobot.get_robot_observations"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get_observations", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pyrobot.pyrobot.PyRobot.get_robot_observations"], ["", "def", "render", "(", "self", ",", "mode", ":", "str", "=", "\"rgb\"", ")", "->", "Any", ":", "\n", "        ", "observations", "=", "self", ".", "_sensor_suite", ".", "get_observations", "(", "\n", "robot_obs", "=", "self", ".", "get_robot_observations", "(", ")", "\n", ")", "\n", "\n", "output", "=", "observations", ".", "get", "(", "mode", ")", "\n", "assert", "output", "is", "not", "None", ",", "\"mode {} sensor is not active\"", ".", "format", "(", "mode", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pyrobot.pyrobot.PyRobot.get_agent_state": [[272, 284], ["pyrobot.PyRobot._robot.base.get_state", "pyrobot.PyRobot._robot.camera.get_state"], "methods", ["None"], ["", "def", "get_agent_state", "(", "\n", "self", ",", "agent_id", ":", "int", "=", "0", ",", "base_state_type", ":", "str", "=", "\"odom\"", "\n", ")", ":", "\n", "        ", "assert", "agent_id", "==", "0", ",", "\"No support of multi agent in {} yet.\"", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", "\n", ")", "\n", "state", "=", "{", "\n", "\"base\"", ":", "self", ".", "_robot", ".", "base", ".", "get_state", "(", "base_state_type", ")", ",", "\n", "\"camera\"", ":", "self", ".", "_robot", ".", "camera", ".", "get_state", "(", ")", ",", "\n", "}", "\n", "# TODO(akadian): add arm state when supported", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pyrobot.pyrobot.PyRobot.seed": [[285, 287], ["NotImplementedError"], "methods", ["None"], ["", "def", "seed", "(", "self", ",", "seed", ":", "int", ")", "->", "None", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"No support for seeding in reality\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pyrobot.pyrobot._locobot_base_action_space": [[27, 32], ["gym.spaces.Dict", "gym.spaces.Box", "gym.spaces.Box"], "function", ["None"], ["def", "_locobot_base_action_space", "(", ")", ":", "\n", "    ", "return", "spaces", ".", "Dict", "(", "\n", "{", "\n", "\"go_to_relative\"", ":", "spaces", ".", "Box", "(", "low", "=", "-", "np", ".", "inf", ",", "high", "=", "np", ".", "inf", ",", "shape", "=", "(", "3", ",", ")", ")", ",", "\n", "\"go_to_absolute\"", ":", "spaces", ".", "Box", "(", "low", "=", "-", "np", ".", "inf", ",", "high", "=", "np", ".", "inf", ",", "shape", "=", "(", "3", ",", ")", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pyrobot.pyrobot._locobot_camera_action_space": [[36, 42], ["gym.spaces.Dict", "gym.spaces.Box", "gym.spaces.Box", "gym.spaces.Box"], "function", ["None"], ["", "def", "_locobot_camera_action_space", "(", ")", ":", "\n", "    ", "return", "spaces", ".", "Dict", "(", "\n", "{", "\n", "\"set_pan\"", ":", "spaces", ".", "Box", "(", "low", "=", "-", "np", ".", "inf", ",", "high", "=", "np", ".", "inf", ",", "shape", "=", "(", "1", ",", ")", ")", ",", "\n", "\"set_tilt\"", ":", "spaces", ".", "Box", "(", "low", "=", "-", "np", ".", "inf", ",", "high", "=", "np", ".", "inf", ",", "shape", "=", "(", "1", ",", ")", ")", ",", "\n", "\"set_pan_tilt\"", ":", "spaces", ".", "Box", "(", "low", "=", "-", "np", ".", "inf", ",", "high", "=", "np", ".", "inf", ",", "shape", "=", "(", "2", ",", ")", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pyrobot.pyrobot._resize_observation": [[46, 60], ["habitat.core.utils.center_crop", "cv2.resize"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.utils.center_crop"], ["", "def", "_resize_observation", "(", "obs", ",", "observation_space", ",", "config", ")", ":", "\n", "    ", "if", "obs", ".", "shape", "!=", "observation_space", ".", "shape", ":", "\n", "        ", "if", "(", "\n", "config", ".", "CENTER_CROP", "is", "True", "\n", "and", "obs", ".", "shape", "[", "0", "]", ">", "observation_space", ".", "shape", "[", "0", "]", "\n", "and", "obs", ".", "shape", "[", "1", "]", ">", "observation_space", ".", "shape", "[", "1", "]", "\n", ")", ":", "\n", "            ", "obs", "=", "center_crop", "(", "obs", ",", "observation_space", ")", "\n", "\n", "", "else", ":", "\n", "            ", "obs", "=", "cv2", ".", "resize", "(", "\n", "obs", ",", "(", "observation_space", ".", "shape", "[", "1", "]", ",", "observation_space", ".", "shape", "[", "0", "]", ")", "\n", ")", "\n", "", "", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pyrobot.__init__._try_register_pyrobot": [[11, 28], ["habitat.core.registry.registry.register_simulator"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry.register_simulator"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.registration.make_dataset": [[16, 22], ["habitat.core.logging.logger.info", "habitat.core.registry.registry.get_dataset", "registry.get_dataset."], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry.get_dataset"], ["assert", "_sim", "is", "not", "None", ",", "\"Could not find simulator with name {}\"", ".", "format", "(", "\n", "id_sim", "\n", ")", "\n", "return", "_sim", "(", "**", "kwargs", ")", "\n", "\n", "\n", "", "_try_register_habitat_sim", "(", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.utils.VocabDict.__init__": [[61, 69], ["utils.VocabDict._build", "utils.load_str_list", "utils.VocabDict._build"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.utils.VocabDict._build", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.utils.load_str_list", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.utils.VocabDict._build"], ["background_patch", "=", "background", "[", "\n", "(", "location", "[", "0", "]", "-", "foreground_size", "[", "0", "]", "//", "2", "+", "min_pad", "[", "0", "]", ")", ":", "(", "\n", "location", "[", "0", "]", "\n", "+", "(", "foreground_size", "[", "0", "]", "-", "foreground_size", "[", "0", "]", "//", "2", ")", "\n", "-", "max_pad", "[", "0", "]", "\n", ")", ",", "\n", "(", "location", "[", "1", "]", "-", "foreground_size", "[", "1", "]", "//", "2", "+", "min_pad", "[", "1", "]", ")", ":", "(", "\n", "location", "[", "1", "]", "\n", "+", "(", "foreground_size", "[", "1", "]", "-", "foreground_size", "[", "1", "]", "//", "2", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.utils.VocabDict._build": [[70, 92], ["len", "enumerate"], "methods", ["None"], ["-", "max_pad", "[", "1", "]", "\n", ")", ",", "\n", "]", "\n", "foreground", "=", "foreground", "[", "\n", "min_pad", "[", "0", "]", ":", "foreground", ".", "shape", "[", "0", "]", "-", "max_pad", "[", "0", "]", ",", "\n", "min_pad", "[", "1", "]", ":", "foreground", ".", "shape", "[", "1", "]", "-", "max_pad", "[", "1", "]", ",", "\n", "]", "\n", "if", "foreground", ".", "size", "==", "0", "or", "background_patch", ".", "size", "==", "0", ":", "\n", "# Nothing to do, no overlap.", "\n", "        ", "return", "background", "\n", "\n", "", "if", "mask", "is", "not", "None", ":", "\n", "        ", "mask", "=", "mask", "[", "\n", "min_pad", "[", "0", "]", ":", "foreground", ".", "shape", "[", "0", "]", "-", "max_pad", "[", "0", "]", ",", "\n", "min_pad", "[", "1", "]", ":", "foreground", ".", "shape", "[", "1", "]", "-", "max_pad", "[", "1", "]", ",", "\n", "]", "\n", "\n", "", "if", "foreground", ".", "shape", "[", "2", "]", "==", "4", ":", "\n", "# Alpha blending", "\n", "        ", "foreground", "=", "(", "\n", "background_patch", ".", "astype", "(", "np", ".", "int32", ")", "*", "(", "255", "-", "foreground", "[", ":", ",", ":", ",", "[", "3", "]", "]", ")", "\n", "+", "foreground", "[", ":", ",", ":", ",", ":", "3", "]", ".", "astype", "(", "np", ".", "int32", ")", "*", "foreground", "[", ":", ",", ":", ",", "[", "3", "]", "]", "\n", ")", "//", "255", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.utils.VocabDict.idx2word": [[94, 96], ["None"], "methods", ["None"], ["        ", "background_patch", "[", "mask", "]", "=", "foreground", "[", "mask", "]", "\n", "", "else", ":", "\n", "        ", "background_patch", "[", ":", "]", "=", "foreground", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.utils.VocabDict.token_idx_2_string": [[97, 105], ["utils.VocabDict.idx2word"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.utils.VocabDict.idx2word"], ["", "return", "background", "\n", "\n", "\n", "", "def", "images_to_video", "(", "\n", "images", ":", "List", "[", "np", ".", "ndarray", "]", ",", "\n", "output_dir", ":", "str", ",", "\n", "video_name", ":", "str", ",", "\n", "fps", ":", "int", "=", "10", ",", "\n", "quality", ":", "Optional", "[", "float", "]", "=", "5", ",", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.utils.VocabDict.__len__": [[106, 108], ["len"], "methods", ["None"], ["verbose", ":", "bool", "=", "True", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.utils.VocabDict.get_size": [[109, 111], ["len"], "methods", ["None"], ["    "]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.utils.VocabDict.get_unk_index": [[112, 114], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.utils.VocabDict.get_unk_token": [[115, 117], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.utils.VocabDict.word2idx": [[118, 128], ["ValueError"], "methods", ["None"], ["\n", "assert", "0", "<=", "quality", "<=", "10", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "", "video_name", "=", "video_name", ".", "replace", "(", "\" \"", ",", "\"_\"", ")", ".", "replace", "(", "\"\\n\"", ",", "\"_\"", ")", "\n", "\n", "# File names are not allowed to be over 255 characters", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.utils.VocabDict.tokenize_and_index": [[130, 142], ["utils.VocabDict.word2idx", "utils.tokenize"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.utils.VocabDict.word2idx", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.utils.tokenize"], ["video_name", "=", "\"/\"", ".", "join", "(", "\n", "video_name_split", "[", ":", "-", "1", "]", "+", "[", "video_name_split", "[", "-", "1", "]", "[", ":", "251", "]", "+", "\".mp4\"", "]", "\n", ")", "\n", "\n", "writer", "=", "imageio", ".", "get_writer", "(", "\n", "os", ".", "path", ".", "join", "(", "output_dir", ",", "video_name", ")", ",", "\n", "fps", "=", "fps", ",", "\n", "quality", "=", "quality", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "logger", ".", "info", "(", "f\"Video created: {os.path.join(output_dir, video_name)}\"", ")", "\n", "if", "verbose", ":", "\n", "        ", "images_iter", "=", "tqdm", ".", "tqdm", "(", "images", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.utils.VocabFromText.__init__": [[152, 178], ["collections.Counter", "utils.VocabDict.__init__", "utils.tokenize", "token_counter.update", "token_list.append"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.utils.tokenize", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.il.metrics.Metric.update"], ["\n", "strip_width", "=", "view", ".", "shape", "[", "0", "]", "//", "20", "\n", "mask", "=", "np", ".", "ones", "(", "view", ".", "shape", ")", "\n", "mask", "[", "strip_width", ":", "-", "strip_width", ",", "strip_width", ":", "-", "strip_width", "]", "=", "0", "\n", "mask", "=", "mask", "==", "1", "\n", "view", "[", "mask", "]", "=", "(", "alpha", "*", "np", ".", "array", "(", "[", "255", ",", "0", ",", "0", "]", ")", "+", "(", "1.0", "-", "alpha", ")", "*", "view", ")", "[", "mask", "]", "\n", "return", "view", "\n", "\n", "\n", "", "def", "tile_images", "(", "render_obs_images", ":", "List", "[", "np", ".", "ndarray", "]", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"Tiles multiple images of non-equal size to a single image. Images are\n    tiled into columns making the returned image wider than tall.\n    \"\"\"", "\n", "# Get the images in descending order of vertical height.", "\n", "render_obs_images", "=", "sorted", "(", "\n", "render_obs_images", ",", "key", "=", "lambda", "x", ":", "x", ".", "shape", "[", "0", "]", ",", "reverse", "=", "True", "\n", ")", "\n", "img_cols", "=", "[", "[", "render_obs_images", "[", "0", "]", "]", "]", "\n", "max_height", "=", "render_obs_images", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "cur_y", "=", "0.0", "\n", "# Arrange the images in columns with the largest image to the left.", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.utils.tokenize": [[32, 46], ["sentence.replace.lower", "regex.split", "sentence.replace.replace", "sentence.replace.replace", "t.strip", "len", "t.strip"], "function", ["None"], ["\n", "assert", "mask", "is", "None", "or", "mask", ".", "shape", "[", ":", "2", "]", "==", "foreground", ".", "shape", "[", ":", "2", "]", "\n", "foreground_size", "=", "foreground", ".", "shape", "[", ":", "2", "]", "\n", "min_pad", "=", "(", "\n", "max", "(", "0", ",", "foreground_size", "[", "0", "]", "//", "2", "-", "location", "[", "0", "]", ")", ",", "\n", "max", "(", "0", ",", "foreground_size", "[", "1", "]", "//", "2", "-", "location", "[", "1", "]", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.utils.load_str_list": [[48, 53], ["open", "f.readlines", "l.strip"], "function", ["None"], ["max_pad", "=", "(", "\n", "max", "(", "\n", "0", ",", "\n", "(", "location", "[", "0", "]", "+", "(", "foreground_size", "[", "0", "]", "-", "foreground_size", "[", "0", "]", "//", "2", ")", ")", "\n", "-", "background", ".", "shape", "[", "0", "]", ",", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.utils.get_action_shortest_path": [[180, 213], ["sim.reset", "sim.set_agent_state", "ShortestPathFollower", "ShortestPathFollower.get_next_action", "sim.get_agent_state", "shortest_path.append", "sim.step", "ShortestPathFollower.get_next_action", "habitat.core.logging.logger.warning", "habitat.core.simulator.ShortestPathPoint", "sim.get_agent_state.position.tolist", "habitat.utils.geometry_utils.quaternion_to_list"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSim.set_agent_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.shortest_path_follower.ShortestPathFollower.get_next_action", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.get_agent_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.shortest_path_follower.ShortestPathFollower.get_next_action", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.geometry_utils.quaternion_to_list"], ["for", "im", "in", "render_obs_images", "[", "1", ":", "]", ":", "\n", "        ", "if", "cur_y", "+", "im", ".", "shape", "[", "0", "]", "<=", "max_height", ":", "\n", "            ", "col", ".", "append", "(", "im", ")", "\n", "cur_y", "+=", "im", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "img_cols", ".", "append", "(", "col", ")", "\n", "col", "=", "[", "im", "]", "\n", "cur_y", "=", "im", ".", "shape", "[", "0", "]", "\n", "", "", "img_cols", ".", "append", "(", "col", ")", "\n", "col_widths", "=", "[", "max", "(", "col_ele", ".", "shape", "[", "1", "]", "for", "col_ele", "in", "col", ")", "for", "col", "in", "img_cols", "]", "\n", "# Get the total width of all the columns put together.", "\n", "total_width", "=", "sum", "(", "col_widths", ")", "\n", "\n", "# Tile the images, pasting the columns side by side.", "\n", "final_im", "=", "np", ".", "zeros", "(", "\n", "(", "max_height", ",", "total_width", ",", "3", ")", ",", "dtype", "=", "render_obs_images", "[", "0", "]", ".", "dtype", "\n", ")", "\n", "cur_x", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "img_cols", ")", ")", ":", "\n", "        ", "next_x", "=", "cur_x", "+", "col_widths", "[", "i", "]", "\n", "total_col_im", "=", "np", ".", "concatenate", "(", "img_cols", "[", "i", "]", ",", "axis", "=", "0", ")", "\n", "final_im", "[", ":", "total_col_im", ".", "shape", "[", "0", "]", ",", "cur_x", ":", "next_x", "]", "=", "total_col_im", "\n", "cur_x", "=", "next_x", "\n", "", "return", "final_im", "\n", "\n", "\n", "", "def", "observations_to_image", "(", "observation", ":", "Dict", ",", "info", ":", "Dict", ")", "->", "np", ".", "ndarray", ":", "\n", "    "]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.utils.check_and_gen_physics_config": [[215, 230], ["os.path.exists", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.exists"], ["\n", "render_obs_images", ":", "List", "[", "np", ".", "ndarray", "]", "=", "[", "]", "\n", "for", "sensor_name", "in", "observation", ":", "\n", "        ", "if", "\"rgb\"", "in", "sensor_name", ":", "\n", "            ", "rgb", "=", "observation", "[", "sensor_name", "]", "\n", "if", "not", "isinstance", "(", "rgb", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "rgb", "=", "rgb", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "render_obs_images", ".", "append", "(", "rgb", ")", "\n", "", "elif", "\"depth\"", "in", "sensor_name", ":", "\n", "            ", "depth_map", "=", "observation", "[", "sensor_name", "]", ".", "squeeze", "(", ")", "*", "255.0", "\n", "if", "not", "isinstance", "(", "depth_map", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "depth_map", "=", "depth_map", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "depth_map", "=", "depth_map", ".", "astype", "(", "np", ".", "uint8", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.vln.r2r_vln_dataset.VLNDatasetV1.check_config_paths_exist": [[31, 36], ["os.path.exists", "os.path.exists", "config.DATA_PATH.format"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.exists", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.exists"], ["@", "staticmethod", "\n", "def", "check_config_paths_exist", "(", "config", ":", "Config", ")", "->", "bool", ":", "\n", "        ", "return", "os", ".", "path", ".", "exists", "(", "\n", "config", ".", "DATA_PATH", ".", "format", "(", "split", "=", "config", ".", "SPLIT", ")", "\n", ")", "and", "os", ".", "path", ".", "exists", "(", "config", ".", "SCENES_DIR", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.vln.r2r_vln_dataset.VLNDatasetV1.__init__": [[37, 49], ["config.DATA_PATH.format", "list", "gzip.open", "r2r_vln_dataset.VLNDatasetV1.from_json", "filter", "f.read", "r2r_vln_dataset.VLNDatasetV1.build_content_scenes_filter"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.from_json", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.build_content_scenes_filter"], ["", "def", "__init__", "(", "self", ",", "config", ":", "Optional", "[", "Config", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "self", ".", "episodes", "=", "[", "]", "\n", "\n", "if", "config", "is", "None", ":", "\n", "            ", "return", "\n", "\n", "", "dataset_filename", "=", "config", ".", "DATA_PATH", ".", "format", "(", "split", "=", "config", ".", "SPLIT", ")", "\n", "with", "gzip", ".", "open", "(", "dataset_filename", ",", "\"rt\"", ")", "as", "f", ":", "\n", "            ", "self", ".", "from_json", "(", "f", ".", "read", "(", ")", ",", "scenes_dir", "=", "config", ".", "SCENES_DIR", ")", "\n", "\n", "", "self", ".", "episodes", "=", "list", "(", "\n", "filter", "(", "self", ".", "build_content_scenes_filter", "(", "config", ")", ",", "self", ".", "episodes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.vln.r2r_vln_dataset.VLNDatasetV1.from_json": [[51, 75], ["json.loads", "habitat.datasets.utils.VocabDict", "habitat.tasks.vln.vln.VLNEpisode", "habitat.tasks.vln.vln.InstructionData", "enumerate", "r2r_vln_dataset.VLNDatasetV1.episodes.append", "habitat.tasks.vln.vln.VLNEpisode.scene_id.startswith", "os.path.join", "habitat.tasks.nav.nav.NavigationGoal", "len"], "methods", ["None"], ["", "def", "from_json", "(", "\n", "self", ",", "json_str", ":", "str", ",", "scenes_dir", ":", "Optional", "[", "str", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "\n", "        ", "deserialized", "=", "json", ".", "loads", "(", "json_str", ")", "\n", "self", ".", "instruction_vocab", "=", "VocabDict", "(", "\n", "word_list", "=", "deserialized", "[", "\"instruction_vocab\"", "]", "[", "\"word_list\"", "]", "\n", ")", "\n", "\n", "for", "episode", "in", "deserialized", "[", "\"episodes\"", "]", ":", "\n", "            ", "episode", "=", "VLNEpisode", "(", "**", "episode", ")", "\n", "\n", "if", "scenes_dir", "is", "not", "None", ":", "\n", "                ", "if", "episode", ".", "scene_id", ".", "startswith", "(", "DEFAULT_SCENE_PATH_PREFIX", ")", ":", "\n", "                    ", "episode", ".", "scene_id", "=", "episode", ".", "scene_id", "[", "\n", "len", "(", "DEFAULT_SCENE_PATH_PREFIX", ")", ":", "\n", "]", "\n", "\n", "", "episode", ".", "scene_id", "=", "os", ".", "path", ".", "join", "(", "scenes_dir", ",", "episode", ".", "scene_id", ")", "\n", "\n", "", "episode", ".", "instruction", "=", "InstructionData", "(", "**", "episode", ".", "instruction", ")", "\n", "for", "g_index", ",", "goal", "in", "enumerate", "(", "episode", ".", "goals", ")", ":", "\n", "                ", "episode", ".", "goals", "[", "g_index", "]", "=", "NavigationGoal", "(", "**", "goal", ")", "\n", "", "self", ".", "episodes", ".", "append", "(", "episode", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.vln.__init__._try_register_r2r_vln_dataset": [[11, 23], ["habitat.core.registry.registry.register_dataset"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry.register_dataset"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.vln.vln.InstructionSensor.__init__": [[58, 61], ["gym.spaces.Discrete"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "uuid", "=", "\"instruction\"", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Discrete", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.vln.vln.InstructionSensor._get_uuid": [[62, 64], ["None"], "methods", ["None"], ["", "def", "_get_uuid", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.vln.vln.InstructionSensor._get_observation": [[65, 75], ["None"], "methods", ["None"], ["", "def", "_get_observation", "(", "\n", "self", ",", "\n", "observations", ":", "Dict", "[", "str", ",", "Observations", "]", ",", "\n", "episode", ":", "VLNEpisode", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "return", "{", "\n", "\"text\"", ":", "episode", ".", "instruction", ".", "instruction_text", ",", "\n", "\"tokens\"", ":", "episode", ".", "instruction", ".", "instruction_tokens", ",", "\n", "\"trajectory_id\"", ":", "episode", ".", "trajectory_id", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.vln.vln.InstructionSensor.get_observation": [[77, 79], ["vln.InstructionSensor._get_observation"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.vln.vln.InstructionSensor._get_observation"], ["", "def", "get_observation", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "_get_observation", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.vln.vln.VLNTask.__init__": [[91, 93], ["habitat.tasks.nav.nav.NavigationTask.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.vln.__init__._try_register_vln_task": [[11, 21], ["habitat.core.registry.registry.register_task"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry.register_task"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.eqa.mp3d_eqa_dataset.Matterport3dDatasetV1.check_config_paths_exist": [[47, 50], ["os.path.exists", "config.DATA_PATH.format"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.exists"], ["@", "staticmethod", "\n", "def", "check_config_paths_exist", "(", "config", ":", "Config", ")", "->", "bool", ":", "\n", "        ", "return", "os", ".", "path", ".", "exists", "(", "config", ".", "DATA_PATH", ".", "format", "(", "split", "=", "config", ".", "SPLIT", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.eqa.mp3d_eqa_dataset.Matterport3dDatasetV1.__init__": [[51, 62], ["list", "gzip.open", "mp3d_eqa_dataset.Matterport3dDatasetV1.from_json", "filter", "config.DATA_PATH.format", "f.read", "mp3d_eqa_dataset.Matterport3dDatasetV1.build_content_scenes_filter"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.from_json", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.build_content_scenes_filter"], ["", "def", "__init__", "(", "self", ",", "config", ":", "Config", "=", "None", ")", "->", "None", ":", "\n", "        ", "self", ".", "episodes", "=", "[", "]", "\n", "\n", "if", "config", "is", "None", ":", "\n", "            ", "return", "\n", "\n", "", "with", "gzip", ".", "open", "(", "config", ".", "DATA_PATH", ".", "format", "(", "split", "=", "config", ".", "SPLIT", ")", ",", "\"rt\"", ")", "as", "f", ":", "\n", "            ", "self", ".", "from_json", "(", "f", ".", "read", "(", ")", ",", "scenes_dir", "=", "config", ".", "SCENES_DIR", ")", "\n", "\n", "", "self", ".", "episodes", "=", "list", "(", "\n", "filter", "(", "self", ".", "build_content_scenes_filter", "(", "config", ")", ",", "self", ".", "episodes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.eqa.mp3d_eqa_dataset.Matterport3dDatasetV1.from_json": [[64, 102], ["json.loads", "mp3d_eqa_dataset.Matterport3dDatasetV1.__dict__.update", "habitat.datasets.utils.VocabDict", "habitat.datasets.utils.VocabDict", "enumerate", "habitat.tasks.eqa.eqa.EQAEpisode", "habitat.tasks.eqa.eqa.QuestionData", "enumerate", "habitat.tasks.eqa.eqa.EQAEpisode.scene_id.startswith", "os.path.join", "habitat.tasks.nav.object_nav_task.ObjectGoal", "enumerate", "enumerate", "habitat.core.simulator.AgentState", "habitat.tasks.nav.nav.ShortestPathPoint", "len"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.il.metrics.Metric.update"], ["", "def", "from_json", "(", "\n", "self", ",", "json_str", ":", "str", ",", "scenes_dir", ":", "Optional", "[", "str", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "deserialized", "=", "json", ".", "loads", "(", "json_str", ")", "\n", "self", ".", "__dict__", ".", "update", "(", "\n", "deserialized", "\n", ")", "# This is a messy hack... Why do we do this.", "\n", "self", ".", "answer_vocab", "=", "VocabDict", "(", "\n", "word_list", "=", "self", ".", "answer_vocab", "[", "\"word_list\"", "]", "# type: ignore", "\n", ")", "\n", "self", ".", "question_vocab", "=", "VocabDict", "(", "\n", "word_list", "=", "self", ".", "question_vocab", "[", "\"word_list\"", "]", "# type: ignore", "\n", ")", "\n", "\n", "for", "ep_index", ",", "episode", "in", "enumerate", "(", "deserialized", "[", "\"episodes\"", "]", ")", ":", "\n", "            ", "episode", "=", "EQAEpisode", "(", "**", "episode", ")", "\n", "if", "scenes_dir", "is", "not", "None", ":", "\n", "                ", "if", "episode", ".", "scene_id", ".", "startswith", "(", "DEFAULT_SCENE_PATH_PREFIX", ")", ":", "\n", "                    ", "episode", ".", "scene_id", "=", "episode", ".", "scene_id", "[", "\n", "len", "(", "DEFAULT_SCENE_PATH_PREFIX", ")", ":", "\n", "]", "\n", "", "episode", ".", "scene_id", "=", "os", ".", "path", ".", "join", "(", "scenes_dir", ",", "episode", ".", "scene_id", ")", "\n", "", "episode", ".", "question", "=", "QuestionData", "(", "**", "episode", ".", "question", ")", "\n", "for", "g_index", ",", "goal", "in", "enumerate", "(", "episode", ".", "goals", ")", ":", "\n", "                ", "episode", ".", "goals", "[", "g_index", "]", "=", "ObjectGoal", "(", "**", "goal", ")", "\n", "new_goal", "=", "episode", ".", "goals", "[", "g_index", "]", "\n", "if", "new_goal", ".", "view_points", "is", "not", "None", ":", "\n", "                    ", "for", "p_index", ",", "agent_state", "in", "enumerate", "(", "\n", "new_goal", ".", "view_points", "\n", ")", ":", "\n", "                        ", "new_goal", ".", "view_points", "[", "p_index", "]", "=", "AgentState", "(", "\n", "**", "agent_state", "\n", ")", "\n", "", "", "", "if", "episode", ".", "shortest_paths", "is", "not", "None", ":", "\n", "                ", "for", "path", "in", "episode", ".", "shortest_paths", ":", "\n", "                    ", "for", "p_index", ",", "point", "in", "enumerate", "(", "path", ")", ":", "\n", "                        ", "path", "[", "p_index", "]", "=", "ShortestPathPoint", "(", "**", "point", ")", "\n", "", "", "", "self", ".", "episodes", "[", "ep_index", "]", "=", "episode", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.eqa.mp3d_eqa_dataset.get_default_mp3d_v1_config": [[25, 31], ["habitat.config.Config"], "function", ["None"], ["def", "get_default_mp3d_v1_config", "(", "split", ":", "str", "=", "\"val\"", ")", ":", "\n", "    ", "config", "=", "Config", "(", ")", "\n", "config", ".", "name", "=", "\"MP3DEQA-v1\"", "\n", "config", ".", "DATA_PATH", "=", "\"data/datasets/eqa/mp3d/v1/{split}.json.gz\"", "\n", "config", ".", "SPLIT", "=", "split", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.eqa.__init__._try_register_mp3d_eqa_dataset": [[11, 23], ["habitat.core.registry.registry.register_dataset"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry.register_dataset"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.eqa.__init__._try_register_eqa_task": [[11, 21], ["habitat.core.registry.registry.register_task"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry.register_task"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.eqa.eqa.QuestionSensor.__init__": [[51, 54], ["habitat.core.simulator.Sensor.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "self", ".", "_dataset", "=", "dataset", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.eqa.eqa.QuestionSensor._get_uuid": [[55, 57], ["None"], "methods", ["None"], ["", "def", "_get_uuid", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "str", ":", "\n", "        ", "return", "\"question\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.eqa.eqa.QuestionSensor._get_sensor_type": [[58, 60], ["None"], "methods", ["None"], ["", "def", "_get_sensor_type", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "SensorTypes", ":", "\n", "        ", "return", "SensorTypes", ".", "TOKEN_IDS", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.eqa.eqa.QuestionSensor.get_observation": [[61, 69], ["None"], "methods", ["None"], ["", "def", "get_observation", "(", "\n", "self", ",", "\n", "observations", ":", "Dict", "[", "str", ",", "Observations", "]", ",", "\n", "episode", ":", "EQAEpisode", ",", "\n", "*", "args", ":", "Any", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", ":", "\n", "        ", "return", "episode", ".", "question", ".", "question_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.eqa.eqa.QuestionSensor._get_observation_space": [[70, 73], ["habitat.core.spaces.ListSpace", "gym.spaces.Discrete", "eqa.QuestionSensor._dataset.question_vocab.get_size"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.utils.VocabDict.get_size"], ["", "def", "_get_observation_space", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "Space", ":", "\n", "        ", "return", "ListSpace", "(", "\n", "spaces", ".", "Discrete", "(", "self", ".", "_dataset", ".", "question_vocab", ".", "get_size", "(", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.eqa.eqa.CorrectAnswer.__init__": [[80, 83], ["habitat.core.embodied_task.Measure.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "dataset", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "self", ".", "_dataset", "=", "dataset", "\n", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.eqa.eqa.CorrectAnswer._get_uuid": [[84, 86], ["None"], "methods", ["None"], ["", "def", "_get_uuid", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "str", ":", "\n", "        ", "return", "\"correct_answer\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.eqa.eqa.CorrectAnswer.reset_metric": [[87, 89], ["None"], "methods", ["None"], ["", "def", "reset_metric", "(", "self", ",", "episode", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "self", ".", "_metric", "=", "episode", ".", "question", ".", "answer_token", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.eqa.eqa.CorrectAnswer.update_metric": [[90, 92], ["None"], "methods", ["None"], ["", "def", "update_metric", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.eqa.eqa.EpisodeInfo.__init__": [[98, 103], ["habitat.core.embodied_task.Measure.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "sim", ",", "config", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "self", ".", "_sim", "=", "sim", "\n", "self", ".", "_config", "=", "config", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.eqa.eqa.EpisodeInfo._get_uuid": [[104, 106], ["None"], "methods", ["None"], ["", "def", "_get_uuid", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "str", ":", "\n", "        ", "return", "\"episode_info\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.eqa.eqa.EpisodeInfo.reset_metric": [[107, 109], ["vars().copy", "vars"], "methods", ["None"], ["", "def", "reset_metric", "(", "self", ",", "episode", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "self", ".", "_metric", "=", "vars", "(", "episode", ")", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.eqa.eqa.EpisodeInfo.update_metric": [[110, 112], ["None"], "methods", ["None"], ["", "def", "update_metric", "(", "self", ",", "episode", ",", "action", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.eqa.eqa.AnswerAccuracy.__init__": [[118, 121], ["habitat.core.embodied_task.Measure.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "dataset", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "self", ".", "_dataset", "=", "dataset", "\n", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.eqa.eqa.AnswerAccuracy._get_uuid": [[122, 124], ["None"], "methods", ["None"], ["", "def", "_get_uuid", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "str", ":", "\n", "        ", "return", "\"answer_accuracy\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.eqa.eqa.AnswerAccuracy.reset_metric": [[125, 127], ["None"], "methods", ["None"], ["", "def", "reset_metric", "(", "self", ",", "episode", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "self", ".", "_metric", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.eqa.eqa.AnswerAccuracy.update_metric": [[128, 140], ["None"], "methods", ["None"], ["", "def", "update_metric", "(", "\n", "self", ",", "action", "=", "None", ",", "episode", "=", "None", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", "\n", ")", ":", "\n", "        ", "if", "episode", "is", "None", ":", "\n", "            ", "return", "\n", "\n", "", "if", "action", "[", "\"action\"", "]", "==", "AnswerAction", ".", "name", ":", "\n", "            ", "self", ".", "_metric", "=", "(", "\n", "1", "\n", "if", "episode", ".", "question", ".", "answer_token", "\n", "==", "action", "[", "\"action_args\"", "]", "[", "\"answer_id\"", "]", "\n", "else", "0", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.eqa.eqa.EQATask._check_episode_is_active": [[173, 177], ["None"], "methods", ["None"], ["def", "_check_episode_is_active", "(", "\n", "self", ",", "*", "args", ",", "action", ",", "episode", ",", "action_args", "=", "None", ",", "**", "kwargs", "\n", ")", "->", "bool", ":", "\n", "        ", "return", "self", ".", "is_valid", "and", "self", ".", "answer", "is", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.eqa.eqa.AnswerAction.__init__": [[184, 187], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "*", "args", ":", "Any", ",", "sim", ",", "dataset", ",", "**", "kwargs", ":", "Any", ")", "->", "None", ":", "\n", "        ", "self", ".", "_sim", "=", "sim", "\n", "self", ".", "_dataset", "=", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.eqa.eqa.AnswerAction.reset": [[188, 192], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ",", "task", ":", "EQATask", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "None", ":", "\n", "        ", "task", ".", "answer", "=", "None", "\n", "task", ".", "is_valid", "=", "True", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.eqa.eqa.AnswerAction.step": [[193, 202], ["eqa.AnswerAction._sim.get_observations_at"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.get_observations_at"], ["", "def", "step", "(", "\n", "self", ",", "*", "args", ":", "Any", ",", "answer_id", ":", "int", ",", "task", ":", "EQATask", ",", "**", "kwargs", ":", "Any", "\n", ")", "->", "Dict", "[", "str", ",", "Observations", "]", ":", "\n", "        ", "if", "task", ".", "answer", "is", "not", "None", ":", "\n", "            ", "task", ".", "is_valid", "=", "False", "\n", "task", ".", "invalid_reason", "=", "\"Agent answered question twice.\"", "\n", "\n", "", "task", ".", "answer", "=", "answer_id", "\n", "return", "self", ".", "_sim", ".", "get_observations_at", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.eqa.eqa.AnswerAction.action_space": [[203, 210], ["gym.spaces.Dict", "gym.spaces.Discrete", "eqa.AnswerAction._dataset.answer_vocab.get_size"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.utils.VocabDict.get_size"], ["", "@", "property", "\n", "def", "action_space", "(", "self", ")", "->", "spaces", ".", "Dict", ":", "\n", "        ", "\"\"\"Answer expected to be single token.\"\"\"", "\n", "return", "spaces", ".", "Dict", "(", "\n", "{", "\n", "\"answer_id\"", ":", "spaces", ".", "Discrete", "(", "\n", "self", ".", "_dataset", ".", "answer_vocab", ".", "get_size", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pointnav.pointnav_generator._ratio_sample_rate": [[31, 43], ["None"], "function", ["None"], ["def", "_ratio_sample_rate", "(", "ratio", ":", "float", ",", "ratio_threshold", ":", "float", ")", "->", "float", ":", "\n", "    ", "r\"\"\"Sampling function for aggressive filtering of straight-line\n    episodes with shortest path geodesic distance to Euclid distance ratio\n    threshold.\n\n    :param ratio: geodesic distance ratio to Euclid distance\n    :param ratio_threshold: geodesic shortest path to Euclid\n    distance ratio upper limit till aggressive sampling is applied.\n    :return: value between 0.008 and 0.144 for ratio [1, 1.1]\n    \"\"\"", "\n", "assert", "ratio", "<", "ratio_threshold", "\n", "return", "20", "*", "(", "ratio", "-", "0.98", ")", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pointnav.pointnav_generator.is_compatible_episode": [[45, 71], ["numpy.power", "sim.geodesic_distance", "numpy.power().sum", "numpy.abs", "sim.island_radius", "numpy.random.rand", "pointnav_generator._ratio_sample_rate", "numpy.power", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.geodesic_distance", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSim.island_radius", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pointnav.pointnav_generator._ratio_sample_rate"], ["", "def", "is_compatible_episode", "(", "\n", "s", ":", "Sequence", "[", "float", "]", ",", "\n", "t", ":", "Sequence", "[", "float", "]", ",", "\n", "sim", ":", "\"HabitatSim\"", ",", "\n", "near_dist", ":", "float", ",", "\n", "far_dist", ":", "float", ",", "\n", "geodesic_to_euclid_ratio", ":", "float", ",", "\n", ")", "->", "Union", "[", "Tuple", "[", "bool", ",", "float", "]", ",", "Tuple", "[", "bool", ",", "int", "]", "]", ":", "\n", "    ", "euclid_dist", "=", "np", ".", "power", "(", "np", ".", "power", "(", "np", ".", "array", "(", "s", ")", "-", "np", ".", "array", "(", "t", ")", ",", "2", ")", ".", "sum", "(", "0", ")", ",", "0.5", ")", "\n", "if", "np", ".", "abs", "(", "s", "[", "1", "]", "-", "t", "[", "1", "]", ")", ">", "0.5", ":", "# check height difference to assure s and", "\n", "#  t are from same floor", "\n", "        ", "return", "False", ",", "0", "\n", "", "d_separation", "=", "sim", ".", "geodesic_distance", "(", "s", ",", "[", "t", "]", ")", "\n", "if", "d_separation", "==", "np", ".", "inf", ":", "\n", "        ", "return", "False", ",", "0", "\n", "", "if", "not", "near_dist", "<=", "d_separation", "<=", "far_dist", ":", "\n", "        ", "return", "False", ",", "0", "\n", "", "distances_ratio", "=", "d_separation", "/", "euclid_dist", "\n", "if", "distances_ratio", "<", "geodesic_to_euclid_ratio", "and", "(", "\n", "np", ".", "random", ".", "rand", "(", ")", "\n", ">", "_ratio_sample_rate", "(", "distances_ratio", ",", "geodesic_to_euclid_ratio", ")", "\n", ")", ":", "\n", "        ", "return", "False", ",", "0", "\n", "", "if", "sim", ".", "island_radius", "(", "s", ")", "<", "ISLAND_RADIUS_LIMIT", ":", "\n", "        ", "return", "False", ",", "0", "\n", "", "return", "True", ",", "d_separation", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pointnav.pointnav_generator._create_episode": [[73, 92], ["habitat.tasks.nav.nav.NavigationEpisode", "habitat.tasks.nav.nav.NavigationGoal", "str"], "function", ["None"], ["", "def", "_create_episode", "(", "\n", "episode_id", ":", "Union", "[", "int", ",", "str", "]", ",", "\n", "scene_id", ":", "str", ",", "\n", "start_position", ":", "List", "[", "float", "]", ",", "\n", "start_rotation", ":", "List", "[", "float", "]", ",", "\n", "target_position", ":", "List", "[", "float", "]", ",", "\n", "shortest_paths", ":", "Optional", "[", "List", "[", "List", "[", "ShortestPathPoint", "]", "]", "]", "=", "None", ",", "\n", "radius", ":", "Optional", "[", "float", "]", "=", "None", ",", "\n", "info", ":", "Optional", "[", "Dict", "[", "str", ",", "float", "]", "]", "=", "None", ",", "\n", ")", "->", "Optional", "[", "NavigationEpisode", "]", ":", "\n", "    ", "goals", "=", "[", "NavigationGoal", "(", "position", "=", "target_position", ",", "radius", "=", "radius", ")", "]", "\n", "return", "NavigationEpisode", "(", "\n", "episode_id", "=", "str", "(", "episode_id", ")", ",", "\n", "goals", "=", "goals", ",", "\n", "scene_id", "=", "scene_id", ",", "\n", "start_position", "=", "start_position", ",", "\n", "start_rotation", "=", "start_rotation", ",", "\n", "shortest_paths", "=", "shortest_paths", ",", "\n", "info", "=", "info", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pointnav.pointnav_generator.generate_pointnav_episode": [[95, 191], ["sim.sample_navigable_point", "range", "sim.island_radius", "sim.sample_navigable_point", "pointnav_generator.is_compatible_episode", "numpy.random.uniform", "pointnav_generator._create_episode", "numpy.sin", "numpy.cos", "habitat.datasets.utils.get_action_shortest_path"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.sample_navigable_point", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSim.island_radius", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.sample_navigable_point", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pointnav.pointnav_generator.is_compatible_episode", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pointnav.pointnav_generator._create_episode", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.utils.get_action_shortest_path"], ["", "def", "generate_pointnav_episode", "(", "\n", "sim", ":", "\"HabitatSim\"", ",", "\n", "num_episodes", ":", "int", "=", "-", "1", ",", "\n", "is_gen_shortest_path", ":", "bool", "=", "True", ",", "\n", "shortest_path_success_distance", ":", "float", "=", "0.2", ",", "\n", "shortest_path_max_steps", ":", "int", "=", "500", ",", "\n", "closest_dist_limit", ":", "float", "=", "1", ",", "\n", "furthest_dist_limit", ":", "float", "=", "30", ",", "\n", "geodesic_to_euclid_min_ratio", ":", "float", "=", "1.1", ",", "\n", "number_retries_per_target", ":", "int", "=", "10", ",", "\n", ")", "->", "Generator", "[", "NavigationEpisode", ",", "None", ",", "None", "]", ":", "\n", "    ", "r\"\"\"Generator function that generates PointGoal navigation episodes.\n\n    An episode is trivial if there is an obstacle-free, straight line between\n    the start and goal positions. A good measure of the navigation\n    complexity of an episode is the ratio of\n    geodesic shortest path position to Euclidean distance between start and\n    goal positions to the corresponding Euclidean distance.\n    If the ratio is nearly 1, it indicates there are few obstacles, and the\n    episode is easy; if the ratio is larger than 1, the\n    episode is difficult because strategic navigation is required.\n    To keep the navigation complexity of the precomputed episodes reasonably\n    high, we perform aggressive rejection sampling for episodes with the above\n    ratio falling in the range [1, 1.1].\n    Following this, there is a significant decrease in the number of\n    straight-line episodes.\n\n\n    :param sim: simulator with loaded scene for generation.\n    :param num_episodes: number of episodes needed to generate\n    :param is_gen_shortest_path: option to generate shortest paths\n    :param shortest_path_success_distance: success distance when agent should\n    stop during shortest path generation\n    :param shortest_path_max_steps maximum number of steps shortest path\n    expected to be\n    :param closest_dist_limit episode geodesic distance lowest limit\n    :param furthest_dist_limit episode geodesic distance highest limit\n    :param geodesic_to_euclid_min_ratio geodesic shortest path to Euclid\n    distance ratio upper limit till aggressive sampling is applied.\n    :return: navigation episode that satisfy specified distribution for\n    currently loaded into simulator scene.\n    \"\"\"", "\n", "episode_count", "=", "0", "\n", "while", "episode_count", "<", "num_episodes", "or", "num_episodes", "<", "0", ":", "\n", "        ", "target_position", "=", "sim", ".", "sample_navigable_point", "(", ")", "\n", "\n", "if", "sim", ".", "island_radius", "(", "target_position", ")", "<", "ISLAND_RADIUS_LIMIT", ":", "\n", "            ", "continue", "\n", "\n", "", "for", "_retry", "in", "range", "(", "number_retries_per_target", ")", ":", "\n", "            ", "source_position", "=", "sim", ".", "sample_navigable_point", "(", ")", "\n", "\n", "is_compatible", ",", "dist", "=", "is_compatible_episode", "(", "\n", "source_position", ",", "\n", "target_position", ",", "\n", "sim", ",", "\n", "near_dist", "=", "closest_dist_limit", ",", "\n", "far_dist", "=", "furthest_dist_limit", ",", "\n", "geodesic_to_euclid_ratio", "=", "geodesic_to_euclid_min_ratio", ",", "\n", ")", "\n", "if", "is_compatible", ":", "\n", "                ", "break", "\n", "", "", "if", "is_compatible", ":", "\n", "            ", "angle", "=", "np", ".", "random", ".", "uniform", "(", "0", ",", "2", "*", "np", ".", "pi", ")", "\n", "source_rotation", "=", "[", "0.0", ",", "np", ".", "sin", "(", "angle", "/", "2", ")", ",", "0", ",", "np", ".", "cos", "(", "angle", "/", "2", ")", "]", "\n", "\n", "shortest_paths", "=", "None", "\n", "if", "is_gen_shortest_path", ":", "\n", "                ", "try", ":", "\n", "                    ", "shortest_paths", "=", "[", "\n", "get_action_shortest_path", "(", "\n", "sim", ",", "\n", "source_position", "=", "source_position", ",", "\n", "source_rotation", "=", "source_rotation", ",", "\n", "goal_position", "=", "target_position", ",", "\n", "success_distance", "=", "shortest_path_success_distance", ",", "\n", "max_episode_steps", "=", "shortest_path_max_steps", ",", "\n", ")", "\n", "]", "\n", "# Throws an error when it can't find a path", "\n", "", "except", "GreedyFollowerError", ":", "\n", "                    ", "continue", "\n", "\n", "", "", "episode", "=", "_create_episode", "(", "\n", "episode_id", "=", "episode_count", ",", "\n", "scene_id", "=", "sim", ".", "habitat_config", ".", "SCENE", ",", "\n", "start_position", "=", "source_position", ",", "\n", "start_rotation", "=", "source_rotation", ",", "\n", "target_position", "=", "target_position", ",", "\n", "shortest_paths", "=", "shortest_paths", ",", "\n", "radius", "=", "shortest_path_success_distance", ",", "\n", "info", "=", "{", "\"geodesic_distance\"", ":", "dist", "}", ",", "\n", ")", "\n", "\n", "episode_count", "+=", "1", "\n", "yield", "episode", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pointnav.__init__._try_register_pointnavdatasetv1": [[18, 31], ["habitat.core.registry.registry.register_dataset"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry.register_dataset"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pointnav.pointnav_dataset.PointNavDatasetV1.check_config_paths_exist": [[32, 37], ["os.path.exists", "os.path.exists", "config.DATA_PATH.format"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.exists", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.exists"], ["@", "staticmethod", "\n", "def", "check_config_paths_exist", "(", "config", ":", "Config", ")", "->", "bool", ":", "\n", "        ", "return", "os", ".", "path", ".", "exists", "(", "\n", "config", ".", "DATA_PATH", ".", "format", "(", "split", "=", "config", ".", "SPLIT", ")", "\n", ")", "and", "os", ".", "path", ".", "exists", "(", "config", ".", "SCENES_DIR", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pointnav.pointnav_dataset.PointNavDatasetV1.get_scenes_to_load": [[38, 70], ["os.path.dirname", "config.clone", "config.clone.defrost", "cls", "os.path.exists", "config.DATA_PATH.format", "cls.check_config_paths_exist", "FileNotFoundError", "[].format", "cls._get_scenes_from_folder", "cls", "list", "map", "cls.content_scenes_path.split"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.exists", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pointnav.pointnav_dataset.PointNavDatasetV1.check_config_paths_exist", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pointnav.pointnav_dataset.PointNavDatasetV1._get_scenes_from_folder", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.map"], ["", "@", "classmethod", "\n", "def", "get_scenes_to_load", "(", "cls", ",", "config", ":", "Config", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "r\"\"\"Return list of scene ids for which dataset has separate files with\n        episodes.\n        \"\"\"", "\n", "dataset_dir", "=", "os", ".", "path", ".", "dirname", "(", "\n", "config", ".", "DATA_PATH", ".", "format", "(", "split", "=", "config", ".", "SPLIT", ")", "\n", ")", "\n", "if", "not", "cls", ".", "check_config_paths_exist", "(", "config", ")", ":", "\n", "            ", "raise", "FileNotFoundError", "(", "\n", "f\"Could not find dataset file `{dataset_dir}`\"", "\n", ")", "\n", "\n", "", "cfg", "=", "config", ".", "clone", "(", ")", "\n", "cfg", ".", "defrost", "(", ")", "\n", "cfg", ".", "CONTENT_SCENES", "=", "[", "]", "\n", "dataset", "=", "cls", "(", "cfg", ")", "\n", "has_individual_scene_files", "=", "os", ".", "path", ".", "exists", "(", "\n", "dataset", ".", "content_scenes_path", ".", "split", "(", "\"{scene}\"", ")", "[", "0", "]", ".", "format", "(", "\n", "data_path", "=", "dataset_dir", "\n", ")", "\n", ")", "\n", "if", "has_individual_scene_files", ":", "\n", "            ", "return", "cls", ".", "_get_scenes_from_folder", "(", "\n", "content_scenes_path", "=", "dataset", ".", "content_scenes_path", ",", "\n", "dataset_dir", "=", "dataset_dir", ",", "\n", ")", "\n", "", "else", ":", "\n", "# Load the full dataset, things are not split into separate files", "\n", "            ", "cfg", ".", "CONTENT_SCENES", "=", "[", "ALL_SCENES_MASK", "]", "\n", "dataset", "=", "cls", "(", "cfg", ")", "\n", "return", "list", "(", "map", "(", "cls", ".", "scene_from_scene_path", ",", "dataset", ".", "scene_ids", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pointnav.pointnav_dataset.PointNavDatasetV1._get_scenes_from_folder": [[71, 88], ["content_dir.format.format.format", "os.listdir", "scenes.sort", "content_scenes_path.split", "content_scenes_path.split", "os.path.exists", "filename.endswith", "scenes.append", "len"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.exists"], ["", "", "@", "staticmethod", "\n", "def", "_get_scenes_from_folder", "(", "\n", "content_scenes_path", ":", "str", ",", "dataset_dir", ":", "str", "\n", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "scenes", ":", "List", "[", "str", "]", "=", "[", "]", "\n", "content_dir", "=", "content_scenes_path", ".", "split", "(", "\"{scene}\"", ")", "[", "0", "]", "\n", "scene_dataset_ext", "=", "content_scenes_path", ".", "split", "(", "\"{scene}\"", ")", "[", "1", "]", "\n", "content_dir", "=", "content_dir", ".", "format", "(", "data_path", "=", "dataset_dir", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "content_dir", ")", ":", "\n", "            ", "return", "scenes", "\n", "\n", "", "for", "filename", "in", "os", ".", "listdir", "(", "content_dir", ")", ":", "\n", "            ", "if", "filename", ".", "endswith", "(", "scene_dataset_ext", ")", ":", "\n", "                ", "scene", "=", "filename", "[", ":", "-", "len", "(", "scene_dataset_ext", ")", "]", "\n", "scenes", ".", "append", "(", "scene", ")", "\n", "", "", "scenes", ".", "sort", "(", ")", "\n", "return", "scenes", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pointnav.pointnav_dataset.PointNavDatasetV1.__init__": [[89, 124], ["config.DATA_PATH.format", "os.path.dirname", "os.path.exists", "gzip.open", "pointnav_dataset.PointNavDatasetV1.from_json", "[].format", "list", "f.read", "pointnav_dataset.PointNavDatasetV1._get_scenes_from_folder", "pointnav_dataset.PointNavDatasetV1.content_scenes_path.format", "filter", "gzip.open", "pointnav_dataset.PointNavDatasetV1.from_json", "pointnav_dataset.PointNavDatasetV1.build_content_scenes_filter", "pointnav_dataset.PointNavDatasetV1.content_scenes_path.split", "f.read"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.exists", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.from_json", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pointnav.pointnav_dataset.PointNavDatasetV1._get_scenes_from_folder", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.from_json", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.build_content_scenes_filter"], ["", "def", "__init__", "(", "self", ",", "config", ":", "Optional", "[", "Config", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "self", ".", "episodes", "=", "[", "]", "\n", "\n", "if", "config", "is", "None", ":", "\n", "            ", "return", "\n", "\n", "", "datasetfile_path", "=", "config", ".", "DATA_PATH", ".", "format", "(", "split", "=", "config", ".", "SPLIT", ")", "\n", "with", "gzip", ".", "open", "(", "datasetfile_path", ",", "\"rt\"", ")", "as", "f", ":", "\n", "            ", "self", ".", "from_json", "(", "f", ".", "read", "(", ")", ",", "scenes_dir", "=", "config", ".", "SCENES_DIR", ")", "\n", "\n", "# Read separate file for each scene", "\n", "", "dataset_dir", "=", "os", ".", "path", ".", "dirname", "(", "datasetfile_path", ")", "\n", "has_individual_scene_files", "=", "os", ".", "path", ".", "exists", "(", "\n", "self", ".", "content_scenes_path", ".", "split", "(", "\"{scene}\"", ")", "[", "0", "]", ".", "format", "(", "\n", "data_path", "=", "dataset_dir", "\n", ")", "\n", ")", "\n", "if", "has_individual_scene_files", ":", "\n", "            ", "scenes", "=", "config", ".", "CONTENT_SCENES", "\n", "if", "ALL_SCENES_MASK", "in", "scenes", ":", "\n", "                ", "scenes", "=", "self", ".", "_get_scenes_from_folder", "(", "\n", "content_scenes_path", "=", "self", ".", "content_scenes_path", ",", "\n", "dataset_dir", "=", "dataset_dir", ",", "\n", ")", "\n", "\n", "", "for", "scene", "in", "scenes", ":", "\n", "                ", "scene_filename", "=", "self", ".", "content_scenes_path", ".", "format", "(", "\n", "data_path", "=", "dataset_dir", ",", "scene", "=", "scene", "\n", ")", "\n", "with", "gzip", ".", "open", "(", "scene_filename", ",", "\"rt\"", ")", "as", "f", ":", "\n", "                    ", "self", ".", "from_json", "(", "f", ".", "read", "(", ")", ",", "scenes_dir", "=", "config", ".", "SCENES_DIR", ")", "\n", "\n", "", "", "", "else", ":", "\n", "            ", "self", ".", "episodes", "=", "list", "(", "\n", "filter", "(", "self", ".", "build_content_scenes_filter", "(", "config", ")", ",", "self", ".", "episodes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pointnav.pointnav_dataset.PointNavDatasetV1.from_json": [[126, 151], ["json.loads", "habitat.tasks.nav.nav.NavigationEpisode", "enumerate", "pointnav_dataset.PointNavDatasetV1.episodes.append", "habitat.tasks.nav.nav.NavigationEpisode.scene_id.startswith", "os.path.join", "habitat.tasks.nav.nav.NavigationGoal", "enumerate", "habitat.tasks.nav.nav.ShortestPathPoint", "len"], "methods", ["None"], ["", "", "def", "from_json", "(", "\n", "self", ",", "json_str", ":", "str", ",", "scenes_dir", ":", "Optional", "[", "str", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "deserialized", "=", "json", ".", "loads", "(", "json_str", ")", "\n", "if", "CONTENT_SCENES_PATH_FIELD", "in", "deserialized", ":", "\n", "            ", "self", ".", "content_scenes_path", "=", "deserialized", "[", "CONTENT_SCENES_PATH_FIELD", "]", "\n", "\n", "", "for", "episode", "in", "deserialized", "[", "\"episodes\"", "]", ":", "\n", "            ", "episode", "=", "NavigationEpisode", "(", "**", "episode", ")", "\n", "\n", "if", "scenes_dir", "is", "not", "None", ":", "\n", "                ", "if", "episode", ".", "scene_id", ".", "startswith", "(", "DEFAULT_SCENE_PATH_PREFIX", ")", ":", "\n", "                    ", "episode", ".", "scene_id", "=", "episode", ".", "scene_id", "[", "\n", "len", "(", "DEFAULT_SCENE_PATH_PREFIX", ")", ":", "\n", "]", "\n", "\n", "", "episode", ".", "scene_id", "=", "os", ".", "path", ".", "join", "(", "scenes_dir", ",", "episode", ".", "scene_id", ")", "\n", "\n", "", "for", "g_index", ",", "goal", "in", "enumerate", "(", "episode", ".", "goals", ")", ":", "\n", "                ", "episode", ".", "goals", "[", "g_index", "]", "=", "NavigationGoal", "(", "**", "goal", ")", "\n", "", "if", "episode", ".", "shortest_paths", "is", "not", "None", ":", "\n", "                ", "for", "path", "in", "episode", ".", "shortest_paths", ":", "\n", "                    ", "for", "p_index", ",", "point", "in", "enumerate", "(", "path", ")", ":", "\n", "                        ", "path", "[", "p_index", "]", "=", "ShortestPathPoint", "(", "**", "point", ")", "\n", "", "", "", "self", ".", "episodes", ".", "append", "(", "episode", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.object_nav.object_nav_dataset.ObjectNavDatasetV1.dedup_goals": [[36, 57], ["enumerate", "len", "habitat.tasks.nav.object_nav_task.ObjectGoalNavEpisode"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "dedup_goals", "(", "dataset", ":", "Dict", "[", "str", ",", "Any", "]", ")", "->", "Dict", "[", "str", ",", "Any", "]", ":", "\n", "        ", "if", "len", "(", "dataset", "[", "\"episodes\"", "]", ")", "==", "0", ":", "\n", "            ", "return", "dataset", "\n", "\n", "", "goals_by_category", "=", "{", "}", "\n", "for", "i", ",", "ep", "in", "enumerate", "(", "dataset", "[", "\"episodes\"", "]", ")", ":", "\n", "            ", "dataset", "[", "\"episodes\"", "]", "[", "i", "]", "[", "\"object_category\"", "]", "=", "ep", "[", "\"goals\"", "]", "[", "0", "]", "[", "\n", "\"object_category\"", "\n", "]", "\n", "ep", "=", "ObjectGoalNavEpisode", "(", "**", "ep", ")", "\n", "\n", "goals_key", "=", "ep", ".", "goals_key", "\n", "if", "goals_key", "not", "in", "goals_by_category", ":", "\n", "                ", "goals_by_category", "[", "goals_key", "]", "=", "ep", ".", "goals", "\n", "\n", "", "dataset", "[", "\"episodes\"", "]", "[", "i", "]", "[", "\"goals\"", "]", "=", "[", "]", "\n", "\n", "", "dataset", "[", "\"goals_by_category\"", "]", "=", "goals_by_category", "\n", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.object_nav.object_nav_dataset.ObjectNavDatasetV1.to_json": [[58, 71], ["range", "habitat.core.utils.DatasetFloatJSONEncoder().encode", "range", "len", "len", "habitat.core.utils.DatasetFloatJSONEncoder", "isinstance", "list"], "methods", ["None"], ["", "def", "to_json", "(", "self", ")", "->", "str", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "episodes", ")", ")", ":", "\n", "            ", "self", ".", "episodes", "[", "i", "]", ".", "goals", "=", "[", "]", "\n", "\n", "", "result", "=", "DatasetFloatJSONEncoder", "(", ")", ".", "encode", "(", "self", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "episodes", ")", ")", ":", "\n", "            ", "goals", "=", "self", ".", "goals_by_category", "[", "self", ".", "episodes", "[", "i", "]", ".", "goals_key", "]", "\n", "if", "not", "isinstance", "(", "goals", ",", "list", ")", ":", "\n", "                ", "goals", "=", "list", "(", "goals", ")", "\n", "", "self", ".", "episodes", "[", "i", "]", ".", "goals", "=", "goals", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.object_nav.object_nav_dataset.ObjectNavDatasetV1.__init__": [[72, 76], ["habitat.datasets.pointnav.pointnav_dataset.PointNavDatasetV1.__init__", "list"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["", "def", "__init__", "(", "self", ",", "config", ":", "Optional", "[", "Config", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "self", ".", "goals_by_category", "=", "{", "}", "\n", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "episodes", "=", "list", "(", "self", ".", "episodes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.object_nav.object_nav_dataset.ObjectNavDatasetV1.__deserialize_goal": [[77, 87], ["habitat.tasks.nav.object_nav_task.ObjectGoal", "enumerate", "habitat.tasks.nav.object_nav_task.ObjectViewLocation", "habitat.core.simulator.AgentState"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "__deserialize_goal", "(", "serialized_goal", ":", "Dict", "[", "str", ",", "Any", "]", ")", "->", "ObjectGoal", ":", "\n", "        ", "g", "=", "ObjectGoal", "(", "**", "serialized_goal", ")", "\n", "\n", "for", "vidx", ",", "view", "in", "enumerate", "(", "g", ".", "view_points", ")", ":", "\n", "            ", "view_location", "=", "ObjectViewLocation", "(", "**", "view", ")", "# type: ignore", "\n", "view_location", ".", "agent_state", "=", "AgentState", "(", "**", "view_location", ".", "agent_state", ")", "# type: ignore", "\n", "g", ".", "view_points", "[", "vidx", "]", "=", "view_location", "\n", "\n", "", "return", "g", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.object_nav.object_nav_dataset.ObjectNavDatasetV1.from_json": [[88, 154], ["json.loads", "deserialized[].items", "enumerate", "len", "len", "set", "set", "len", "object_nav_dataset.ObjectNavDatasetV1.dedup_goals", "habitat.tasks.nav.object_nav_task.ObjectGoalNavEpisode", "str", "object_nav_dataset.ObjectNavDatasetV1.episodes.append", "object_nav_dataset.ObjectNavDatasetV1.category_to_task_category_id.keys", "object_nav_dataset.ObjectNavDatasetV1.category_to_scene_annotation_category_id.keys", "object_nav_dataset.ObjectNavDatasetV1.__deserialize_goal", "habitat.tasks.nav.object_nav_task.ObjectGoalNavEpisode.scene_id.startswith", "os.path.join", "enumerate", "habitat.core.simulator.ShortestPathPoint", "len", "isinstance"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.set", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.set", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.object_nav.object_nav_dataset.ObjectNavDatasetV1.dedup_goals", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.object_nav.object_nav_dataset.ObjectNavDatasetV1.__deserialize_goal"], ["", "def", "from_json", "(", "\n", "self", ",", "json_str", ":", "str", ",", "scenes_dir", ":", "Optional", "[", "str", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "deserialized", "=", "json", ".", "loads", "(", "json_str", ")", "\n", "if", "CONTENT_SCENES_PATH_FIELD", "in", "deserialized", ":", "\n", "            ", "self", ".", "content_scenes_path", "=", "deserialized", "[", "CONTENT_SCENES_PATH_FIELD", "]", "\n", "\n", "", "if", "\"category_to_task_category_id\"", "in", "deserialized", ":", "\n", "            ", "self", ".", "category_to_task_category_id", "=", "deserialized", "[", "\n", "\"category_to_task_category_id\"", "\n", "]", "\n", "\n", "", "if", "\"category_to_scene_annotation_category_id\"", "in", "deserialized", ":", "\n", "            ", "self", ".", "category_to_scene_annotation_category_id", "=", "deserialized", "[", "\n", "\"category_to_scene_annotation_category_id\"", "\n", "]", "\n", "\n", "", "if", "\"category_to_mp3d_category_id\"", "in", "deserialized", ":", "\n", "            ", "self", ".", "category_to_scene_annotation_category_id", "=", "deserialized", "[", "\n", "\"category_to_mp3d_category_id\"", "\n", "]", "\n", "\n", "", "assert", "len", "(", "self", ".", "category_to_task_category_id", ")", "==", "len", "(", "\n", "self", ".", "category_to_scene_annotation_category_id", "\n", ")", "\n", "\n", "assert", "set", "(", "self", ".", "category_to_task_category_id", ".", "keys", "(", ")", ")", "==", "set", "(", "\n", "self", ".", "category_to_scene_annotation_category_id", ".", "keys", "(", ")", "\n", ")", ",", "\"category_to_task and category_to_mp3d must have the same keys\"", "\n", "\n", "if", "len", "(", "deserialized", "[", "\"episodes\"", "]", ")", "==", "0", ":", "\n", "            ", "return", "\n", "\n", "", "if", "\"goals_by_category\"", "not", "in", "deserialized", ":", "\n", "            ", "deserialized", "=", "self", ".", "dedup_goals", "(", "deserialized", ")", "\n", "\n", "", "for", "k", ",", "v", "in", "deserialized", "[", "\"goals_by_category\"", "]", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "goals_by_category", "[", "k", "]", "=", "[", "self", ".", "__deserialize_goal", "(", "g", ")", "for", "g", "in", "v", "]", "\n", "\n", "", "for", "i", ",", "episode", "in", "enumerate", "(", "deserialized", "[", "\"episodes\"", "]", ")", ":", "\n", "            ", "episode", "=", "ObjectGoalNavEpisode", "(", "**", "episode", ")", "\n", "episode", ".", "episode_id", "=", "str", "(", "i", ")", "\n", "\n", "if", "scenes_dir", "is", "not", "None", ":", "\n", "                ", "if", "episode", ".", "scene_id", ".", "startswith", "(", "DEFAULT_SCENE_PATH_PREFIX", ")", ":", "\n", "                    ", "episode", ".", "scene_id", "=", "episode", ".", "scene_id", "[", "\n", "len", "(", "DEFAULT_SCENE_PATH_PREFIX", ")", ":", "\n", "]", "\n", "\n", "", "episode", ".", "scene_id", "=", "os", ".", "path", ".", "join", "(", "scenes_dir", ",", "episode", ".", "scene_id", ")", "\n", "\n", "", "episode", ".", "goals", "=", "self", ".", "goals_by_category", "[", "episode", ".", "goals_key", "]", "\n", "\n", "if", "episode", ".", "shortest_paths", "is", "not", "None", ":", "\n", "                ", "for", "path", "in", "episode", ".", "shortest_paths", ":", "\n", "                    ", "for", "p_index", ",", "point", "in", "enumerate", "(", "path", ")", ":", "\n", "                        ", "if", "point", "is", "None", "or", "isinstance", "(", "point", ",", "(", "int", ",", "str", ")", ")", ":", "\n", "                            ", "point", "=", "{", "\n", "\"action\"", ":", "point", ",", "\n", "\"rotation\"", ":", "None", ",", "\n", "\"position\"", ":", "None", ",", "\n", "}", "\n", "\n", "", "path", "[", "p_index", "]", "=", "ShortestPathPoint", "(", "**", "point", ")", "\n", "\n", "", "", "", "self", ".", "episodes", ".", "append", "(", "episode", ")", "# type: ignore [attr-defined]", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.object_nav.__init__._try_register_objectnavdatasetv1": [[18, 31], ["habitat.core.registry.registry.register_dataset"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry.register_dataset"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.samplers.SceneSampler.num_scenes": [[24, 27], ["None"], "methods", ["None"], ["    ", "@", "abstractmethod", "\n", "def", "num_scenes", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.samplers.SceneSampler.reset": [[28, 30], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", "->", "None", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.samplers.SceneSampler.sample": [[31, 34], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "sample", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.samplers.SingleSceneSampler.__init__": [[41, 43], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "scene", ":", "str", ")", "->", "None", ":", "\n", "        ", "self", ".", "scene", "=", "scene", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.samplers.SingleSceneSampler.sample": [[44, 46], ["None"], "methods", ["None"], ["", "def", "sample", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "scene", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.samplers.SingleSceneSampler.num_scenes": [[47, 49], ["None"], "methods", ["None"], ["", "def", "num_scenes", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.samplers.MultiSceneSampler.__init__": [[56, 59], ["len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "scenes", ":", "List", "[", "str", "]", ")", "->", "None", ":", "\n", "        ", "self", ".", "scenes", "=", "scenes", "\n", "assert", "len", "(", "scenes", ")", ">", "0", ",", "\"No scenes provided to MultiSceneSampler.\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.samplers.MultiSceneSampler.sample": [[60, 62], ["random.randrange", "len"], "methods", ["None"], ["", "def", "sample", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "scenes", "[", "random", ".", "randrange", "(", "0", ",", "len", "(", "self", ".", "scenes", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.samplers.MultiSceneSampler.num_scenes": [[63, 65], ["len"], "methods", ["None"], ["", "def", "num_scenes", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "len", "(", "self", ".", "scenes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.samplers.ObjectSampler.__init__": [[72, 107], ["samplers.ObjectSampler.set_num_samples", "len", "collections.defaultdict"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.samplers.ObjectSampler.set_num_samples"], ["def", "__init__", "(", "\n", "self", ",", "\n", "object_set", ":", "List", "[", "str", "]", ",", "\n", "receptacle_sets", ":", "List", "[", "\n", "Tuple", "[", "List", "[", "str", "]", ",", "List", "[", "str", "]", ",", "List", "[", "str", "]", ",", "List", "[", "str", "]", "]", "\n", "]", ",", "\n", "num_objects", ":", "Tuple", "[", "int", ",", "int", "]", "=", "(", "1", ",", "1", ")", ",", "\n", "orientation_sample", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "sample_region_ratio", ":", "Optional", "[", "Dict", "[", "str", ",", "float", "]", "]", "=", "None", ",", "\n", "nav_to_min_distance", ":", "float", "=", "-", "1.0", ",", "\n", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        :param nav_to_min_distance: -1.0 means there will be no accessibility constraint. Positive values indicate minimum distance from sampled object to a navigable point.\n        \"\"\"", "\n", "self", ".", "object_set", "=", "object_set", "\n", "self", ".", "receptacle_sets", "=", "receptacle_sets", "\n", "self", ".", "receptacle_instances", ":", "Optional", "[", "\n", "List", "[", "Receptacle", "]", "\n", "]", "=", "None", "# all receptacles in the scene", "\n", "self", ".", "receptacle_candidates", ":", "Optional", "[", "\n", "List", "[", "Receptacle", "]", "\n", "]", "=", "None", "# the specific receptacle instances relevant to this sampler", "\n", "assert", "len", "(", "self", ".", "receptacle_sets", ")", ">", "0", "\n", "self", ".", "max_sample_attempts", "=", "1000", "# number of distinct object|receptacle pairings to try before giving up", "\n", "self", ".", "max_placement_attempts", "=", "50", "# number of times to attempt a single object|receptacle placement pairing", "\n", "self", ".", "num_objects", "=", "num_objects", "# tuple of [min,max] objects to sample", "\n", "assert", "self", ".", "num_objects", "[", "1", "]", ">=", "self", ".", "num_objects", "[", "0", "]", "\n", "self", ".", "orientation_sample", "=", "(", "\n", "orientation_sample", "# None, \"up\" (1D), \"all\" (rand quat)", "\n", ")", "\n", "if", "sample_region_ratio", "is", "None", ":", "\n", "            ", "sample_region_ratio", "=", "defaultdict", "(", "lambda", ":", "1.0", ")", "\n", "", "self", ".", "sample_region_ratio", "=", "sample_region_ratio", "\n", "self", ".", "nav_to_min_distance", "=", "nav_to_min_distance", "\n", "self", ".", "set_num_samples", "(", ")", "\n", "# More possible parameters of note:", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.samplers.ObjectSampler.reset": [[111, 120], ["samplers.ObjectSampler.set_num_samples"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.samplers.ObjectSampler.set_num_samples"], ["", "def", "reset", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Reset any per-scene variables.\n        \"\"\"", "\n", "# receptacle instances should be scraped for every new scene", "\n", "self", ".", "receptacle_instances", "=", "None", "\n", "self", ".", "receptacle_candidates", "=", "None", "\n", "# number of objects in the range should be reset each time", "\n", "self", ".", "set_num_samples", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.samplers.ObjectSampler.sample_receptacle": [[121, 206], ["habitat.datasets.rearrange.receptacle.find_receptacles", "len", "random.randrange", "len", "receptacle.get_global_transform().transform_vector().normalized", "magnum.math.dot", "samplers.ObjectSampler.receptacle_candidates.append", "sim.get_gravity().normalized", "habitat.core.logging.logger.info", "receptacle.get_global_transform().transform_vector", "sim.get_gravity", "receptacle.get_global_transform"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.receptacle.find_receptacles", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.receptacle.AABBReceptacle.get_global_transform"], ["", "def", "sample_receptacle", "(", "\n", "self", ",", "\n", "sim", ":", "habitat_sim", ".", "Simulator", ",", "\n", "cull_tilted_receptacles", ":", "bool", "=", "True", ",", "\n", "tilt_tolerance", ":", "float", "=", "0.9", ",", "\n", ")", "->", "Receptacle", ":", "\n", "        ", "\"\"\"\n        Sample a receptacle from the receptacle_set and return relevant information.\n        If cull_tilted_receptacles is True, receptacles are culled for objects with local \"down\" (-Y), not aligned with gravity (unit dot product compared to tilt_tolerance).\n        \"\"\"", "\n", "if", "self", ".", "receptacle_instances", "is", "None", ":", "\n", "            ", "self", ".", "receptacle_instances", "=", "find_receptacles", "(", "sim", ")", "\n", "\n", "", "if", "self", ".", "receptacle_candidates", "is", "None", ":", "\n", "            ", "self", ".", "receptacle_candidates", "=", "[", "]", "\n", "for", "receptacle", "in", "self", ".", "receptacle_instances", ":", "\n", "                ", "found_match", "=", "False", "\n", "for", "r_set_tuple", "in", "self", ".", "receptacle_sets", ":", "\n", "# r_set_tuple = (included_obj_substrs, excluded_obj_substrs, included_receptacle_substrs, excluded_receptacle_substrs)", "\n", "                    ", "culled", "=", "False", "\n", "# first try to cull by exclusion", "\n", "for", "ex_object_substr", "in", "(", "\n", "r_set_tuple", "[", "1", "]", "and", "receptacle", ".", "parent_object_handle", "\n", ")", ":", "\n", "                        ", "if", "ex_object_substr", "in", "receptacle", ".", "parent_object_handle", ":", "\n", "                            ", "culled", "=", "True", "\n", "break", "\n", "", "", "for", "ex_receptacle_substr", "in", "r_set_tuple", "[", "3", "]", ":", "\n", "                        ", "if", "ex_receptacle_substr", "in", "receptacle", ".", "name", ":", "\n", "                            ", "culled", "=", "True", "\n", "break", "\n", "", "", "if", "culled", ":", "\n", "                        ", "break", "\n", "\n", "# if the receptacle is stage/global (no object handle) then always a match", "\n", "", "if", "receptacle", ".", "parent_object_handle", "is", "None", ":", "\n", "# check the inclusion name constraints", "\n", "                        ", "for", "name_constraint", "in", "r_set_tuple", "[", "2", "]", ":", "\n", "                            ", "if", "name_constraint", "in", "receptacle", ".", "name", ":", "\n", "                                ", "found_match", "=", "True", "\n", "break", "\n", "", "", "break", "\n", "\n", "# then search for inclusion", "\n", "", "for", "object_substr", "in", "r_set_tuple", "[", "0", "]", ":", "\n", "                        ", "if", "object_substr", "in", "receptacle", ".", "parent_object_handle", ":", "\n", "# object substring is valid, try receptacle name constraint", "\n", "                            ", "for", "name_constraint", "in", "r_set_tuple", "[", "2", "]", ":", "\n", "                                ", "if", "name_constraint", "in", "receptacle", ".", "name", ":", "\n", "# found a valid substring match for this receptacle, stop the search", "\n", "                                    ", "found_match", "=", "True", "\n", "break", "\n", "", "", "", "if", "found_match", ":", "\n", "# break object substr search", "\n", "                            ", "break", "\n", "", "", "if", "found_match", ":", "\n", "# break receptacle set search", "\n", "                        ", "break", "\n", "", "", "if", "found_match", ":", "\n", "# substring match was found, check orientation constraint", "\n", "                    ", "if", "cull_tilted_receptacles", ":", "\n", "                        ", "obj_down", "=", "(", "\n", "receptacle", ".", "get_global_transform", "(", "sim", ")", "\n", ".", "transform_vector", "(", "-", "receptacle", ".", "up", ")", "\n", ".", "normalized", "(", ")", "\n", ")", "\n", "gravity_alignment", "=", "mn", ".", "math", ".", "dot", "(", "\n", "obj_down", ",", "sim", ".", "get_gravity", "(", ")", ".", "normalized", "(", ")", "\n", ")", "\n", "if", "gravity_alignment", "<", "tilt_tolerance", ":", "\n", "                            ", "culled", "=", "True", "\n", "logger", ".", "info", "(", "\n", "f\"Culled by tilt: '{receptacle.name}', {gravity_alignment}\"", "\n", ")", "\n", "", "", "if", "not", "culled", ":", "\n", "# found a valid receptacle", "\n", "                        ", "self", ".", "receptacle_candidates", ".", "append", "(", "receptacle", ")", "\n", "\n", "", "", "", "", "assert", "(", "\n", "len", "(", "self", ".", "receptacle_candidates", ")", ">", "0", "\n", ")", ",", "f\"No receptacle instances found matching this sampler's requirements. Likely a sampler config constraint is not feasible for all scenes in the dataset. Cull this scene from your dataset? Scene='{sim.config.sim_cfg.scene_id}'. Receptacle constraints ='{self.receptacle_sets}'\"", "\n", "target_receptacle", "=", "self", ".", "receptacle_candidates", "[", "\n", "random", ".", "randrange", "(", "0", ",", "len", "(", "self", ".", "receptacle_candidates", ")", ")", "\n", "]", "\n", "return", "target_receptacle", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.samplers.ObjectSampler.sample_object": [[207, 212], ["random.randrange", "len"], "methods", ["None"], ["", "def", "sample_object", "(", "self", ")", "->", "str", ":", "\n", "        ", "\"\"\"\n        Sample an object handle from the object_set and return it.\n        \"\"\"", "\n", "return", "self", ".", "object_set", "[", "random", ".", "randrange", "(", "0", ",", "len", "(", "self", ".", "object_set", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.samplers.ObjectSampler.sample_placement": [[213, 319], ["numpy.stack", "max", "sim.get_rigid_object_manager().remove_object_by_handle", "habitat.core.logging.logger.warning", "sim.pathfinder.build_navmesh_vertices", "receptacle.sample_uniform_global", "sim.pathfinder.island_radius", "sim.get_object_template_manager().get_library_has_handle", "sim.get_rigid_object_manager().add_object_by_template_handle", "habitat.snap_down", "sim.get_rigid_object_manager", "random.uniform", "magnum.Quaternion.rotation", "sim.get_articulated_object_manager().get_object_by_handle", "sim.get_articulated_object_manager().get_object_by_handle.link_object_ids.items", "habitat.core.logging.logger.info", "sim.get_rigid_object_manager().add_object_by_template_handle.contact_test", "habitat.core.logging.logger.info", "sim.get_object_template_manager", "sim.get_rigid_object_manager", "magnum.Rad", "magnum.Vector3.y_axis", "habitat_sim.utils.common.random_quaternion", "samplers.ObjectSampler._is_accessible", "samplers.ObjectSampler._is_accessible", "sim.get_articulated_object_manager", "sim.get_rigid_object_manager().get_object_by_handle", "sim.get_rigid_object_manager"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.receptacle.Receptacle.sample_uniform_global", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSim.island_radius", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.sim_utilities.snap_down", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.rotation", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.samplers.ObjectSampler._is_accessible", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.samplers.ObjectSampler._is_accessible"], ["", "def", "sample_placement", "(", "\n", "self", ",", "\n", "sim", ":", "habitat_sim", ".", "Simulator", ",", "\n", "object_handle", ":", "str", ",", "\n", "receptacle", ":", "Receptacle", ",", "\n", "snap_down", ":", "bool", "=", "False", ",", "\n", "vdb", ":", "Optional", "[", "DebugVisualizer", "]", "=", "None", ",", "\n", ")", "->", "Optional", "[", "habitat_sim", ".", "physics", ".", "ManagedRigidObject", "]", ":", "\n", "        ", "\"\"\"\n        Attempt to sample a valid placement of the object in/on a receptacle given an object handle and receptacle information.\n        \"\"\"", "\n", "num_placement_tries", "=", "0", "\n", "new_object", "=", "None", "\n", "navmesh_vertices", "=", "np", ".", "stack", "(", "\n", "sim", ".", "pathfinder", ".", "build_navmesh_vertices", "(", ")", ",", "axis", "=", "0", "\n", ")", "\n", "# Note: we cache the largest island to reject samples which are primarily accessible from disconnected navmesh regions. This assumption limits sampling to the largest navigable component of any scene.", "\n", "self", ".", "largest_island_size", "=", "max", "(", "\n", "[", "sim", ".", "pathfinder", ".", "island_radius", "(", "p", ")", "for", "p", "in", "navmesh_vertices", "]", "\n", ")", "\n", "\n", "while", "num_placement_tries", "<", "self", ".", "max_placement_attempts", ":", "\n", "            ", "num_placement_tries", "+=", "1", "\n", "\n", "# sample the object location", "\n", "target_object_position", "=", "receptacle", ".", "sample_uniform_global", "(", "\n", "sim", ",", "self", ".", "sample_region_ratio", "[", "receptacle", ".", "name", "]", "\n", ")", "\n", "\n", "# instance the new potential object from the handle", "\n", "if", "new_object", "==", "None", ":", "\n", "                ", "assert", "sim", ".", "get_object_template_manager", "(", ")", ".", "get_library_has_handle", "(", "\n", "object_handle", "\n", ")", ",", "f\"Found no object in the SceneDataset with handle '{object_handle}'.\"", "\n", "new_object", "=", "sim", ".", "get_rigid_object_manager", "(", ")", ".", "add_object_by_template_handle", "(", "\n", "object_handle", "\n", ")", "\n", "\n", "# try to place the object", "\n", "", "new_object", ".", "translation", "=", "target_object_position", "\n", "if", "self", ".", "orientation_sample", "is", "not", "None", ":", "\n", "                ", "if", "self", ".", "orientation_sample", "==", "\"up\"", ":", "\n", "# rotate the object around the gravity direction", "\n", "                    ", "rot", "=", "random", ".", "uniform", "(", "0", ",", "math", ".", "pi", "*", "2.0", ")", "\n", "new_object", ".", "rotation", "=", "mn", ".", "Quaternion", ".", "rotation", "(", "\n", "mn", ".", "Rad", "(", "rot", ")", ",", "mn", ".", "Vector3", ".", "y_axis", "(", ")", "\n", ")", "\n", "", "elif", "self", ".", "orientation_sample", "==", "\"all\"", ":", "\n", "# set the object's orientation to a random quaternion", "\n", "                    ", "new_object", ".", "rotation", "=", "(", "\n", "habitat_sim", ".", "utils", ".", "common", ".", "random_quaternion", "(", ")", "\n", ")", "\n", "", "", "if", "snap_down", ":", "\n", "                ", "support_object_ids", "=", "[", "-", "1", "]", "\n", "# add support object ids for non-stage receptacles", "\n", "if", "receptacle", ".", "is_parent_object_articulated", ":", "\n", "                    ", "ao_instance", "=", "sim", ".", "get_articulated_object_manager", "(", ")", ".", "get_object_by_handle", "(", "\n", "receptacle", ".", "parent_object_handle", "\n", ")", "\n", "for", "(", "\n", "object_id", ",", "\n", "link_ix", ",", "\n", ")", "in", "ao_instance", ".", "link_object_ids", ".", "items", "(", ")", ":", "\n", "                        ", "if", "receptacle", ".", "parent_link", "==", "link_ix", ":", "\n", "                            ", "support_object_ids", "=", "[", "\n", "object_id", ",", "\n", "ao_instance", ".", "object_id", ",", "\n", "]", "\n", "break", "\n", "", "", "", "elif", "receptacle", ".", "parent_object_handle", "is", "not", "None", ":", "\n", "                    ", "support_object_ids", "=", "[", "\n", "sim", ".", "get_rigid_object_manager", "(", ")", "\n", ".", "get_object_by_handle", "(", "receptacle", ".", "parent_object_handle", ")", "\n", ".", "object_id", "\n", "]", "\n", "", "snap_success", "=", "sutils", ".", "snap_down", "(", "\n", "sim", ",", "\n", "new_object", ",", "\n", "support_object_ids", ",", "\n", "vdb", "=", "vdb", ",", "\n", ")", "\n", "if", "snap_success", ":", "\n", "                    ", "logger", ".", "info", "(", "\n", "f\"Successfully sampled (snapped) object placement in {num_placement_tries} tries.\"", "\n", ")", "\n", "if", "not", "self", ".", "_is_accessible", "(", "sim", ",", "new_object", ")", ":", "\n", "                        ", "continue", "\n", "", "return", "new_object", "\n", "\n", "", "", "elif", "not", "new_object", ".", "contact_test", "(", ")", ":", "\n", "                ", "logger", ".", "info", "(", "\n", "f\"Successfully sampled object placement in {num_placement_tries} tries.\"", "\n", ")", "\n", "if", "not", "self", ".", "_is_accessible", "(", "sim", ",", "new_object", ")", ":", "\n", "                    ", "continue", "\n", "", "return", "new_object", "\n", "\n", "# if num_placement_tries > self.max_placement_attempts:", "\n", "", "", "sim", ".", "get_rigid_object_manager", "(", ")", ".", "remove_object_by_handle", "(", "\n", "new_object", ".", "handle", "\n", ")", "\n", "logger", ".", "warning", "(", "\n", "f\"Failed to sample {object_handle} placement on {receptacle.name} in {self.max_placement_attempts} tries.\"", "\n", ")", "\n", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.samplers.ObjectSampler._is_accessible": [[320, 342], ["sim.pathfinder.snap_point", "sim.pathfinder.island_radius", "float", "numpy.linalg.norm", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSim.island_radius"], ["", "def", "_is_accessible", "(", "self", ",", "sim", ",", "new_object", ")", "->", "bool", ":", "\n", "        ", "\"\"\"\n        Return if the object is within a threshold distance of the nearest\n        navigable point and that the nearest navigable point is on the same\n        navigation mesh.\n\n        Note that this might not catch all edge cases since the distance is\n        based on Euclidean distance. The nearest navigable point may be\n        separated from the object by an obstacle.\n        \"\"\"", "\n", "if", "self", ".", "nav_to_min_distance", "==", "-", "1", ":", "\n", "            ", "return", "True", "\n", "", "snapped", "=", "sim", ".", "pathfinder", ".", "snap_point", "(", "new_object", ".", "translation", ")", "\n", "island_radius", ":", "float", "=", "sim", ".", "pathfinder", ".", "island_radius", "(", "snapped", ")", "\n", "dist", "=", "float", "(", "\n", "np", ".", "linalg", ".", "norm", "(", "\n", "np", ".", "array", "(", "(", "snapped", "-", "new_object", ".", "translation", ")", ")", "[", "[", "0", ",", "2", "]", "]", "\n", ")", "\n", ")", "\n", "return", "(", "\n", "dist", "<", "self", ".", "nav_to_min_distance", "\n", "and", "island_radius", "==", "self", ".", "largest_island_size", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.samplers.ObjectSampler.single_sample": [[344, 370], ["habitat.core.logging.logger.info", "samplers.ObjectSampler.sample_placement", "samplers.ObjectSampler.sample_object", "samplers.ObjectSampler.sample_receptacle"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.samplers.ObjectSampler.sample_placement", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.samplers.ObjectSampler.sample_object", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.samplers.ObjectSampler.sample_receptacle"], ["", "def", "single_sample", "(", "\n", "self", ",", "\n", "sim", ":", "habitat_sim", ".", "Simulator", ",", "\n", "snap_down", ":", "bool", "=", "False", ",", "\n", "vdb", ":", "Optional", "[", "DebugVisualizer", "]", "=", "None", ",", "\n", "fixed_target_receptacle", "=", "None", ",", "\n", "fixed_obj_handle", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", ")", "->", "Optional", "[", "habitat_sim", ".", "physics", ".", "ManagedRigidObject", "]", ":", "\n", "# draw a new pairing", "\n", "        ", "if", "fixed_obj_handle", "is", "None", ":", "\n", "            ", "object_handle", "=", "self", ".", "sample_object", "(", ")", "\n", "", "else", ":", "\n", "            ", "object_handle", "=", "fixed_obj_handle", "\n", "", "if", "fixed_target_receptacle", "is", "not", "None", ":", "\n", "            ", "target_receptacle", "=", "fixed_target_receptacle", "\n", "", "else", ":", "\n", "            ", "target_receptacle", "=", "self", ".", "sample_receptacle", "(", "sim", ")", "\n", "", "logger", ".", "info", "(", "\n", "f\"Sampling '{object_handle}' from '{target_receptacle.name}'\"", "\n", ")", "\n", "\n", "new_object", "=", "self", ".", "sample_placement", "(", "\n", "sim", ",", "object_handle", ",", "target_receptacle", ",", "snap_down", ",", "vdb", "\n", ")", "\n", "\n", "return", "new_object", ",", "target_receptacle", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.samplers.ObjectSampler.set_num_samples": [[371, 376], ["random.randrange"], "methods", ["None"], ["", "def", "set_num_samples", "(", "self", ")", ":", "\n", "        ", "self", ".", "target_objects_number", "=", "(", "\n", "random", ".", "randrange", "(", "self", ".", "num_objects", "[", "0", "]", ",", "self", ".", "num_objects", "[", "1", "]", ")", "\n", "if", "self", ".", "num_objects", "[", "1", "]", ">", "self", ".", "num_objects", "[", "0", "]", "\n", "else", "self", ".", "num_objects", "[", "0", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.samplers.ObjectSampler.sample": [[378, 429], ["habitat.core.logging.logger.info", "habitat.core.logging.logger.info", "habitat.core.logging.logger.info", "len", "sim.get_rigid_object_manager().remove_object_by_handle", "len", "len", "len", "samplers.ObjectSampler.single_sample", "samplers.ObjectSampler.single_sample", "new_objects.append", "len", "sim.get_rigid_object_manager", "len"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.samplers.ObjectSampler.single_sample", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.samplers.ObjectSampler.single_sample"], ["", "def", "sample", "(", "\n", "self", ",", "\n", "sim", ":", "habitat_sim", ".", "Simulator", ",", "\n", "target_receptacles", ",", "\n", "snap_down", ":", "bool", "=", "False", ",", "\n", "vdb", ":", "Optional", "[", "DebugVisualizer", "]", "=", "None", ",", "\n", ")", "->", "List", "[", "habitat_sim", ".", "physics", ".", "ManagedRigidObject", "]", ":", "\n", "        ", "\"\"\"\n        Defaults to uniform sample: object -> receptacle -> volume w/ rejection -> repeat.\n        Optionally provide a debug visualizer (vdb)\n        \"\"\"", "\n", "num_pairing_tries", "=", "0", "\n", "new_objects", ":", "List", "[", "habitat_sim", ".", "physics", ".", "ManagedRigidObject", "]", "=", "[", "]", "\n", "\n", "logger", ".", "info", "(", "\n", "f\"    Trying to sample {self.target_objects_number} from range {self.num_objects}\"", "\n", ")", "\n", "\n", "while", "(", "\n", "len", "(", "new_objects", ")", "<", "self", ".", "target_objects_number", "\n", "and", "num_pairing_tries", "<", "self", ".", "max_sample_attempts", "\n", ")", ":", "\n", "            ", "num_pairing_tries", "+=", "1", "\n", "if", "len", "(", "new_objects", ")", "<", "len", "(", "target_receptacles", ")", ":", "\n", "# no objects sampled yet", "\n", "                ", "new_object", ",", "receptacle", "=", "self", ".", "single_sample", "(", "\n", "sim", ",", "snap_down", ",", "vdb", ",", "target_receptacles", "[", "len", "(", "new_objects", ")", "]", "\n", ")", "\n", "", "else", ":", "\n", "                ", "new_object", ",", "receptacle", "=", "self", ".", "single_sample", "(", "\n", "sim", ",", "snap_down", ",", "vdb", "\n", ")", "\n", "", "if", "new_object", "is", "not", "None", ":", "\n", "                ", "new_objects", ".", "append", "(", "(", "new_object", ",", "receptacle", ")", ")", "\n", "\n", "", "", "if", "len", "(", "new_objects", ")", ">=", "self", ".", "num_objects", "[", "0", "]", ":", "\n", "            ", "return", "new_objects", "\n", "\n", "# we didn't find the minimum number of placements, so remove all new objects and return", "\n", "", "logger", ".", "info", "(", "\n", "f\"Failed to sample the minimum number of placements in {self.max_sample_attempts} tries.\"", "\n", ")", "\n", "logger", ".", "info", "(", "\n", "f\"    Only able to sample {len(new_objects)} out of {self.num_objects}...\"", "\n", ")", "\n", "# cleanup", "\n", "for", "new_object", "in", "new_objects", ":", "\n", "            ", "sim", ".", "get_rigid_object_manager", "(", ")", ".", "remove_object_by_handle", "(", "\n", "new_object", ".", "handle", "\n", ")", "\n", "", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.samplers.ObjectTargetSampler.__init__": [[436, 461], ["samplers.ObjectSampler.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "object_instance_set", ":", "List", "[", "habitat_sim", ".", "physics", ".", "ManagedRigidObject", "]", ",", "\n", "receptacle_sets", ":", "List", "[", "\n", "Tuple", "[", "List", "[", "str", "]", ",", "List", "[", "str", "]", ",", "List", "[", "str", "]", ",", "List", "[", "str", "]", "]", "\n", "]", ",", "\n", "num_targets", ":", "Tuple", "[", "int", ",", "int", "]", "=", "(", "1", ",", "1", ")", ",", "\n", "orientation_sample", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "sample_region_ratio", ":", "Optional", "[", "Dict", "[", "str", ",", "float", "]", "]", "=", "None", ",", "\n", "nav_to_min_distance", ":", "float", "=", "-", "1.0", ",", "\n", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Initialize a standard ObjectSampler but construct the object_set to correspond with specific object instances provided.\n        \"\"\"", "\n", "self", ".", "object_instance_set", "=", "object_instance_set", "\n", "object_set", "=", "[", "\n", "x", ".", "creation_attributes", ".", "handle", "for", "x", "in", "self", ".", "object_instance_set", "\n", "]", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "object_set", ",", "\n", "receptacle_sets", ",", "\n", "num_targets", ",", "\n", "orientation_sample", ",", "\n", "sample_region_ratio", ",", "\n", "nav_to_min_distance", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.samplers.ObjectTargetSampler.sample": [[463, 529], ["habitat.core.logging.logger.info", "zip", "habitat.core.logging.logger.info", "habitat.core.logging.logger.info", "new_target_objects.values", "len", "len", "ValueError", "samplers.ObjectTargetSampler.single_sample", "len", "sim.get_rigid_object_manager().remove_object_by_handle", "ValueError", "len", "len", "sim.get_rigid_object_manager", "len", "len"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.samplers.ObjectSampler.single_sample"], ["", "def", "sample", "(", "\n", "self", ",", "\n", "sim", ":", "habitat_sim", ".", "Simulator", ",", "\n", "snap_down", ":", "bool", "=", "False", ",", "\n", "vdb", ":", "Optional", "[", "DebugVisualizer", "]", "=", "None", ",", "\n", "target_receptacles", "=", "None", ",", "\n", "goal_receptacles", "=", "None", ",", "\n", "object_to_containing_receptacle", "=", "None", ",", "\n", ")", "->", "Optional", "[", "\n", "Dict", "[", "str", ",", "Tuple", "[", "habitat_sim", ".", "physics", ".", "ManagedRigidObject", ",", "Receptacle", "]", "]", "\n", "]", ":", "\n", "        ", "\"\"\"\n        Overridden sampler maps to instances without replacement.\n        Returns None if failed, or a dict mapping object handles to new object instances in the sampled target location.\n        \"\"\"", "\n", "\n", "new_target_objects", "=", "{", "}", "\n", "\n", "logger", ".", "info", "(", "\n", "f\"    Trying to sample {self.target_objects_number} targets from range {self.num_objects}\"", "\n", ")", "\n", "\n", "if", "len", "(", "target_receptacles", ")", "!=", "len", "(", "goal_receptacles", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "f\"# target receptacles {len(target_receptacles)}, # goal receptacles {len(goal_receptacles)}\"", "\n", ")", "\n", "# The first objects were sampled to be in the target object receptacle", "\n", "# locations, so they must be used as the target objects.", "\n", "", "for", "use_target", ",", "use_recep", ",", "goal_recep", "in", "zip", "(", "\n", "self", ".", "object_instance_set", ",", "target_receptacles", ",", "goal_receptacles", "\n", ")", ":", "\n", "            ", "if", "object_to_containing_receptacle", "[", "use_target", ".", "handle", "]", "!=", "use_recep", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "f\"Object {use_target.handle}, contained {object_to_containing_receptacle[use_target.handle].name}, target receptacle {use_recep.name}\"", "\n", ")", "\n", "", "new_object", ",", "receptacle", "=", "self", ".", "single_sample", "(", "\n", "sim", ",", "\n", "snap_down", ",", "\n", "vdb", ",", "\n", "goal_recep", ",", "\n", "use_target", ".", "creation_attributes", ".", "handle", ",", "\n", ")", "\n", "if", "new_object", "is", "None", ":", "\n", "                ", "break", "\n", "", "new_target_objects", "[", "use_target", ".", "handle", "]", "=", "(", "\n", "new_object", ",", "\n", "use_recep", ",", "\n", ")", "\n", "\n", "# Did we successfully place all the objects?", "\n", "", "if", "len", "(", "new_target_objects", ")", "==", "self", ".", "target_objects_number", ":", "\n", "            ", "return", "new_target_objects", "\n", "\n", "# we didn't find all placements, so remove all new objects and return", "\n", "", "logger", ".", "info", "(", "\n", "f\"Failed to sample all target placements in {self.max_sample_attempts} tries.\"", "\n", ")", "\n", "logger", ".", "info", "(", "\n", "f\"    Only able to sample {len(new_target_objects)} targets out of {len(self.object_instance_set)}...\"", "\n", ")", "\n", "# cleanup", "\n", "for", "new_object", ",", "_", "in", "new_target_objects", ".", "values", "(", ")", ":", "\n", "            ", "sim", ".", "get_rigid_object_manager", "(", ")", ".", "remove_object_by_handle", "(", "\n", "new_object", ".", "handle", "\n", ")", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.samplers.ArticulatedObjectStateSampler.__init__": [[532, 539], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "ao_handle", ":", "str", ",", "link_name", ":", "str", ",", "state_range", ":", "Tuple", "[", "float", ",", "float", "]", "\n", ")", "->", "None", ":", "\n", "        ", "self", ".", "ao_handle", "=", "ao_handle", "\n", "self", ".", "link_name", "=", "link_name", "\n", "self", ".", "state_range", "=", "state_range", "\n", "assert", "self", ".", "state_range", "[", "1", "]", ">=", "self", ".", "state_range", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.samplers.ArticulatedObjectStateSampler.sample": [[540, 577], ["sim.get_articulated_object_manager", "sim.get_articulated_object_manager.get_objects_by_handle_substring().values", "range", "sim.get_articulated_object_manager.get_objects_by_handle_substring", "ao_instance.get_link_name", "random.uniform", "ao_instance.get_link_joint_pos_offset"], "methods", ["None"], ["", "def", "sample", "(", "\n", "self", ",", "sim", ":", "habitat_sim", ".", "Simulator", ",", "receptacles", "=", "None", "\n", ")", "->", "Optional", "[", "\n", "Dict", "[", "habitat_sim", ".", "physics", ".", "ManagedArticulatedObject", ",", "Dict", "[", "int", ",", "float", "]", "]", "\n", "]", ":", "\n", "        ", "\"\"\"\n        For all matching AOs in the scene, sample and apply the joint state for this sampler.\n        Return a list of tuples (instance_handle, link_name, state)\n        \"\"\"", "\n", "ao_states", ":", "Dict", "[", "\n", "habitat_sim", ".", "physics", ".", "ManagedArticulatedObject", ",", "Dict", "[", "int", ",", "float", "]", "\n", "]", "=", "{", "}", "\n", "# TODO: handle sampled invalid states (e.g. fridge open into wall in some scenes)", "\n", "aom", "=", "sim", ".", "get_articulated_object_manager", "(", ")", "\n", "# get all AOs in the scene with the configured handle as a substring", "\n", "matching_ao_instances", "=", "aom", ".", "get_objects_by_handle_substring", "(", "\n", "self", ".", "ao_handle", "\n", ")", ".", "values", "(", ")", "\n", "for", "ao_instance", "in", "matching_ao_instances", ":", "\n", "# now find a matching link", "\n", "            ", "for", "link_ix", "in", "range", "(", "ao_instance", ".", "num_links", ")", ":", "\n", "                ", "if", "ao_instance", ".", "get_link_name", "(", "link_ix", ")", "==", "self", ".", "link_name", ":", "\n", "# found a matching link, sample the state", "\n", "                    ", "joint_state", "=", "random", ".", "uniform", "(", "\n", "self", ".", "state_range", "[", "0", "]", ",", "self", ".", "state_range", "[", "1", "]", "\n", ")", "\n", "# set the joint state", "\n", "pose", "=", "ao_instance", ".", "joint_positions", "\n", "pose", "[", "\n", "ao_instance", ".", "get_link_joint_pos_offset", "(", "link_ix", ")", "\n", "]", "=", "joint_state", "\n", "ao_instance", ".", "joint_positions", "=", "pose", "\n", "if", "ao_instance", "not", "in", "ao_states", ":", "\n", "                        ", "ao_states", "[", "ao_instance", "]", "=", "{", "}", "\n", "", "ao_states", "[", "ao_instance", "]", "[", "link_ix", "]", "=", "joint_state", "\n", "break", "\n", "", "", "", "return", "ao_states", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.samplers.CompositeArticulatedObjectStateSampler.__init__": [[584, 599], ["None"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "ao_sampler_params", ":", "Dict", "[", "str", ",", "Dict", "[", "str", ",", "Tuple", "[", "float", ",", "float", ",", "bool", "]", "]", "]", ",", "\n", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        ao_sampler_params : {ao_handle -> {link_name -> (min, max)}}\n        \"\"\"", "\n", "self", ".", "ao_sampler_params", "=", "ao_sampler_params", "\n", "self", ".", "max_iterations", "=", "50", "\n", "# validate the ranges", "\n", "for", "ao_handle", "in", "ao_sampler_params", ":", "\n", "            ", "for", "link_name", "in", "ao_sampler_params", "[", "ao_handle", "]", ":", "\n", "                ", "assert", "(", "\n", "ao_sampler_params", "[", "ao_handle", "]", "[", "link_name", "]", "[", "1", "]", "\n", ">=", "ao_sampler_params", "[", "ao_handle", "]", "[", "link_name", "]", "[", "0", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.samplers.CompositeArticulatedObjectStateSampler.sample": [[601, 716], ["habitat.get_all_object_ids", "habitat.core.logging.logger.info", "sim.get_articulated_object_manager", "matching_ao_instances.items", "range", "sim.get_articulated_object_manager.get_objects_by_handle_substring().values", "link_sample_params.items", "range", "link_ranges.items", "sim.get_articulated_object_manager.get_objects_by_handle_substring", "ao_instance.get_link_name", "ao_instance.contact_test", "random.uniform", "habitat.core.logging.logger.info", "sim.perform_discrete_collision_detection", "sim.get_physics_contact_points", "habitat.core.logging.logger.info", "ao_instance.get_link_joint_pos_offset", "ao_instance.get_link_joint_pos_offset", "habitat.core.logging.logger.info"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.sim_utilities.get_all_object_ids"], ["", "", "", "def", "sample", "(", "\n", "self", ",", "sim", ":", "habitat_sim", ".", "Simulator", ",", "receptacles", ":", "List", "[", "Receptacle", "]", "\n", ")", "->", "Optional", "[", "\n", "Dict", "[", "habitat_sim", ".", "physics", ".", "ManagedArticulatedObject", ",", "Dict", "[", "int", ",", "float", "]", "]", "\n", "]", ":", "\n", "        ", "\"\"\"\n        Iterative rejection sampling of all joint states specified in parameters.\n        Return a list of tuples (instance_handle, link_name, state)\n        On failure, return None.\n        \"\"\"", "\n", "ids_to_names", "=", "sutils", ".", "get_all_object_ids", "(", "sim", ")", "\n", "ids_to_names", "[", "-", "1", "]", "=", "\"_stage\"", "\n", "logger", ".", "info", "(", "ids_to_names", ")", "\n", "# first collect all instances associated with requested samplers", "\n", "aom", "=", "sim", ".", "get_articulated_object_manager", "(", ")", "\n", "matching_ao_instances", ":", "Dict", "[", "\n", "str", ",", "List", "[", "habitat_sim", ".", "physics", ".", "ManagedArticulatedObject", "]", "\n", "]", "=", "{", "}", "\n", "for", "ao_handle", "in", "self", ".", "ao_sampler_params", ":", "\n", "            ", "matching_ao_instances", "[", "\n", "ao_handle", "\n", "]", "=", "aom", ".", "get_objects_by_handle_substring", "(", "ao_handle", ")", ".", "values", "(", ")", "\n", "\n", "# construct an efficiently iterable structure for reject sampling of link states", "\n", "", "link_sample_params", ":", "Dict", "[", "\n", "habitat_sim", ".", "physics", ".", "ManagedArticulatedObject", ",", "\n", "Dict", "[", "int", ",", "Tuple", "[", "float", ",", "float", ",", "bool", "]", "]", ",", "\n", "]", "=", "{", "}", "\n", "for", "ao_handle", ",", "ao_instances", "in", "matching_ao_instances", ".", "items", "(", ")", ":", "\n", "            ", "for", "ao_instance", "in", "ao_instances", ":", "\n", "                ", "for", "link_ix", "in", "range", "(", "ao_instance", ".", "num_links", ")", ":", "\n", "                    ", "link_name", "=", "ao_instance", ".", "get_link_name", "(", "link_ix", ")", "\n", "if", "link_name", "in", "self", ".", "ao_sampler_params", "[", "ao_handle", "]", ":", "\n", "                        ", "if", "ao_instance", "not", "in", "link_sample_params", ":", "\n", "                            ", "link_sample_params", "[", "ao_instance", "]", "=", "{", "}", "\n", "", "assert", "(", "\n", "link_ix", "not", "in", "link_sample_params", "[", "ao_instance", "]", "\n", ")", ",", "f\"Joint sampler configuration creating duplicate sampler requests for object '{ao_handle}', instance '{ao_instance.handle}', link {link_name}.\"", "\n", "link_sample_params", "[", "ao_instance", "]", "[", "\n", "link_ix", "\n", "]", "=", "self", ".", "ao_sampler_params", "[", "ao_handle", "]", "[", "link_name", "]", "\n", "\n", "", "", "", "", "for", "_iteration", "in", "range", "(", "self", ".", "max_iterations", ")", ":", "\n", "            ", "ao_states", ":", "Dict", "[", "\n", "habitat_sim", ".", "physics", ".", "ManagedArticulatedObject", ",", "Dict", "[", "int", ",", "float", "]", "\n", "]", "=", "{", "}", "\n", "# sample a composite joint configuration", "\n", "for", "ao_instance", ",", "link_ranges", "in", "link_sample_params", ".", "items", "(", ")", ":", "\n", "                ", "ao_states", "[", "ao_instance", "]", "=", "{", "}", "\n", "# NOTE: only query and set pose once per instance for efficiency", "\n", "pose", "=", "ao_instance", ".", "joint_positions", "\n", "for", "link_ix", ",", "joint_range", "in", "link_ranges", ".", "items", "(", ")", ":", "\n", "                    ", "should_sample_all_joints", "=", "joint_range", "[", "2", "]", "\n", "matching_recep", "=", "None", "\n", "for", "recep", "in", "receptacles", ":", "\n", "                        ", "link_matches", "=", "(", "\n", "link_ix", "==", "recep", ".", "parent_link", "\n", ")", "or", "should_sample_all_joints", "\n", "if", "(", "\n", "ao_instance", ".", "handle", "==", "recep", ".", "parent_object_handle", "\n", "and", "link_matches", "\n", ")", ":", "\n", "                            ", "matching_recep", "=", "recep", "\n", "break", "\n", "\n", "", "", "if", "matching_recep", "is", "not", "None", ":", "\n", "# If this is true, this means that the receptacle AO must be opened. That is because", "\n", "# the object is spawned inside the fridge OR inside the kitchen counter BUT not on top of the counter", "\n", "# because in this case all drawers must be closed.", "\n", "# TODO: move this receptacle access logic to the ao_config files in a future refactor", "\n", "                        ", "joint_state", "=", "random", ".", "uniform", "(", "\n", "joint_range", "[", "0", "]", ",", "joint_range", "[", "1", "]", "\n", ")", "\n", "", "else", ":", "\n", "                        ", "joint_state", "=", "pose", "[", "\n", "ao_instance", ".", "get_link_joint_pos_offset", "(", "link_ix", ")", "\n", "]", "\n", "", "pose", "[", "\n", "ao_instance", ".", "get_link_joint_pos_offset", "(", "link_ix", ")", "\n", "]", "=", "joint_state", "\n", "ao_states", "[", "ao_instance", "]", "[", "link_ix", "]", "=", "joint_state", "\n", "", "ao_instance", ".", "joint_positions", "=", "pose", "\n", "\n", "# validate the new configuration (contact check every instance)", "\n", "", "valid_configuration", "=", "True", "\n", "for", "ao_handle", "in", "matching_ao_instances", ":", "\n", "                ", "for", "ao_instance", "in", "matching_ao_instances", "[", "ao_handle", "]", ":", "\n", "                    ", "if", "ao_instance", ".", "contact_test", "(", ")", ":", "\n", "                        ", "logger", ".", "info", "(", "\n", "f\"ao_handle = {ao_handle} failed contact test.\"", "\n", ")", "\n", "sim", ".", "perform_discrete_collision_detection", "(", ")", "\n", "cps", "=", "sim", ".", "get_physics_contact_points", "(", ")", "\n", "logger", ".", "info", "(", "ao_instance", ".", "handle", ")", "\n", "for", "cp", "in", "cps", ":", "\n", "                            ", "if", "(", "\n", "ao_instance", ".", "handle", "\n", "in", "ids_to_names", "[", "cp", ".", "object_id_a", "]", "\n", "or", "ao_instance", ".", "handle", "\n", "in", "ids_to_names", "[", "cp", ".", "object_id_b", "]", "\n", ")", ":", "\n", "                                ", "logger", ".", "info", "(", "\n", "f\" contact between ({cp.object_id_a})'{ids_to_names[cp.object_id_a]}' and ({cp.object_id_b})'{ids_to_names[cp.object_id_b]}'\"", "\n", ")", "\n", "", "", "valid_configuration", "=", "False", "\n", "break", "\n", "", "", "if", "not", "valid_configuration", ":", "\n", "                    ", "break", "\n", "\n", "", "", "if", "valid_configuration", ":", "\n", "# success", "\n", "                ", "return", "ao_states", "\n", "\n", "# failed to find a valid configuration", "\n", "", "", "return", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_dataset.RearrangeDatasetV0.to_json": [[48, 51], ["habitat.core.utils.DatasetFloatJSONEncoder().encode", "habitat.core.utils.DatasetFloatJSONEncoder"], "methods", ["None"], ["def", "to_json", "(", "self", ")", "->", "str", ":", "\n", "        ", "result", "=", "DatasetFloatJSONEncoder", "(", ")", ".", "encode", "(", "self", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_dataset.RearrangeDatasetV0.__init__": [[52, 67], ["habitat.datasets.utils.check_and_gen_physics_config", "habitat.datasets.pointnav.pointnav_dataset.PointNavDatasetV1.__init__", "habitat.core.logging.logger.info", "habitat_sim.main", "habitat.core.logging.logger.info", "rearrange_dataset.RearrangeDatasetV0.check_config_paths_exist"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.utils.check_and_gen_physics_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.main", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pointnav.pointnav_dataset.PointNavDatasetV1.check_config_paths_exist"], ["", "def", "__init__", "(", "self", ",", "config", ":", "Optional", "[", "Config", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "\n", "if", "config", "and", "not", "self", ".", "check_config_paths_exist", "(", "config", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\n", "\"Rearrange task assets are not downloaded locally, downloading and extracting now...\"", "\n", ")", "\n", "data_downloader", ".", "main", "(", "\n", "[", "\"--uids\"", ",", "\"rearrange_task_assets\"", ",", "\"--no-replace\"", "]", "\n", ")", "\n", "logger", ".", "info", "(", "\"Downloaded and extracted the data.\"", ")", "\n", "\n", "", "check_and_gen_physics_config", "(", ")", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_dataset.RearrangeDatasetV0.from_json": [[68, 78], ["json.loads", "enumerate", "rearrange_dataset.RearrangeEpisode", "str", "rearrange_dataset.RearrangeDatasetV0.episodes.append"], "methods", ["None"], ["", "def", "from_json", "(", "\n", "self", ",", "json_str", ":", "str", ",", "scenes_dir", ":", "Optional", "[", "str", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "deserialized", "=", "json", ".", "loads", "(", "json_str", ")", "\n", "\n", "for", "i", ",", "episode", "in", "enumerate", "(", "deserialized", "[", "\"episodes\"", "]", ")", ":", "\n", "            ", "rearrangement_episode", "=", "RearrangeEpisode", "(", "**", "episode", ")", "\n", "rearrangement_episode", ".", "episode_id", "=", "str", "(", "i", ")", "\n", "\n", "self", ".", "episodes", ".", "append", "(", "rearrangement_episode", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.receptacle.Receptacle.__init__": [[25, 49], ["numpy.nonzero", "magnum.Vector3.y_axis", "len"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "name", ":", "str", ",", "\n", "parent_object_handle", ":", "str", "=", "None", ",", "\n", "parent_link", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "up", ":", "Optional", "[", "mn", ".", "Vector3", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        :param name: The name of the Receptacle. Should be unique and descriptive for any one object.\n        :param parent_object_handle: The rigid or articulated object instance handle for the parent object to which the Receptacle is attached. None for globally defined stage Receptacles.\n        :param parent_link: Index of the link to which the Receptacle is attached if the parent is an ArticulatedObject. -1 denotes the base link. None for rigid objects and stage Receptables.\n        :param up: The \"up\" direction of the receptacle in local AABB space. Used for optionally culling receptacles in un-supportive states such as inverted surfaces.\n        \"\"\"", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "up", "=", "(", "\n", "up", "if", "up", "is", "not", "None", "else", "mn", ".", "Vector3", ".", "y_axis", "(", "1.0", ")", "\n", ")", "# default local Y up", "\n", "nonzero_indices", "=", "np", ".", "nonzero", "(", "self", ".", "up", ")", "\n", "assert", "(", "\n", "len", "(", "nonzero_indices", ")", "==", "1", "\n", ")", ",", "\"The 'up' vector must be aligned with a primary axis for an AABB.\"", "\n", "self", ".", "up_axis", "=", "nonzero_indices", "[", "0", "]", "\n", "self", ".", "parent_object_handle", "=", "parent_object_handle", "\n", "self", ".", "parent_link", "=", "parent_link", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.receptacle.Receptacle.is_parent_object_articulated": [[50, 56], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_parent_object_articulated", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Convenience query for articulated vs. rigid object check.\n        \"\"\"", "\n", "return", "self", ".", "parent_link", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.receptacle.Receptacle.sample_uniform_local": [[57, 66], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "sample_uniform_local", "(", "\n", "self", ",", "sample_region_scale", ":", "float", "=", "1.0", "\n", ")", "->", "mn", ".", "Vector3", ":", "\n", "        ", "\"\"\"\n        Sample a uniform random point within Receptacle in local space.\n\n        :param sample_region_scale: defines a XZ scaling of the sample region around its center. For example to constrain object spawning toward the center of a receptacle.\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.receptacle.Receptacle.get_global_transform": [[67, 72], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_global_transform", "(", "self", ",", "sim", ":", "habitat_sim", ".", "Simulator", ")", "->", "mn", ".", "Matrix4", ":", "\n", "        ", "\"\"\"\n        Isolates boilerplate necessary to extract receptacle global transform of the Receptacle at the current state.\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.receptacle.Receptacle.sample_uniform_global": [[73, 83], ["receptacle.Receptacle.sample_uniform_local", "receptacle.Receptacle.get_global_transform().transform_point", "receptacle.Receptacle.get_global_transform"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.receptacle.AABBReceptacle.sample_uniform_local", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.receptacle.AABBReceptacle.get_global_transform"], ["", "def", "sample_uniform_global", "(", "\n", "self", ",", "sim", ":", "habitat_sim", ".", "Simulator", ",", "sample_region_scale", ":", "float", "\n", ")", "->", "mn", ".", "Vector3", ":", "\n", "        ", "\"\"\"\n        Sample a uniform random point in the local Receptacle volume and then transform it into global space.\n\n        :param sample_region_scale: defines a XZ scaling of the sample region around its center.\n        \"\"\"", "\n", "local_sample", "=", "self", ".", "sample_uniform_local", "(", "sample_region_scale", ")", "\n", "return", "self", ".", "get_global_transform", "(", "sim", ")", ".", "transform_point", "(", "local_sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.receptacle.Receptacle.add_receptacle_visualization": [[84, 91], ["None"], "methods", ["None"], ["", "def", "add_receptacle_visualization", "(", "\n", "self", ",", "sim", ":", "habitat_sim", ".", "Simulator", "\n", ")", "->", "List", "[", "habitat_sim", ".", "physics", ".", "ManagedRigidObject", "]", ":", "\n", "        ", "\"\"\"\n        Add one or more visualization objects to the simulation to represent the Receptacle. Return and forget the added objects for external management.\n        \"\"\"", "\n", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.receptacle.AABBReceptacle.__init__": [[98, 118], ["receptacle.Receptacle.__init__", "magnum.Quaternion"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "name", ":", "str", ",", "\n", "bounds", ":", "mn", ".", "Range3D", ",", "\n", "parent_object_handle", ":", "str", "=", "None", ",", "\n", "parent_link", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "up", ":", "Optional", "[", "mn", ".", "Vector3", "]", "=", "None", ",", "\n", "rotation", ":", "Optional", "[", "mn", ".", "Quaternion", "]", "=", "None", ",", "\n", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        :param name: The name of the Receptacle. Should be unique and descriptive for any one object.\n        :param bounds: The AABB of the Receptacle.\n        :param up: The \"up\" direction of the Receptacle in local AABB space. Used for optionally culling receptacles in un-supportive states such as inverted surfaces.\n        :param parent_object_handle: The rigid or articulated object instance handle for the parent object to which the Receptacle is attached. None for globally defined stage Receptacles.\n        :param parent_link: Index of the link to which the Receptacle is attached if the parent is an ArticulatedObject. -1 denotes the base link. None for rigid objects and stage Receptables.\n        :param rotation: Optional rotation of the Receptacle AABB. Only used for globally defined stage Receptacles to provide flexability.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "name", ",", "parent_object_handle", ",", "parent_link", ",", "up", ")", "\n", "self", ".", "bounds", "=", "bounds", "\n", "self", ".", "rotation", "=", "rotation", "if", "rotation", "is", "not", "None", "else", "mn", ".", "Quaternion", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.receptacle.AABBReceptacle.sample_uniform_local": [[119, 137], ["magnum.Range3D.from_center", "numpy.random.uniform", "receptacle.AABBReceptacle.bounds.center", "receptacle.AABBReceptacle.bounds.size"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size"], ["", "def", "sample_uniform_local", "(", "\n", "self", ",", "sample_region_scale", ":", "float", "=", "1.0", "\n", ")", "->", "mn", ".", "Vector3", ":", "\n", "        ", "\"\"\"\n        Sample a uniform random point in the local AABB.\n\n        :param sample_region_scale: defines a XZ scaling of the sample region around its center. For example to constrain object spawning toward the center of a receptacle.\n        \"\"\"", "\n", "scaled_region", "=", "mn", ".", "Range3D", ".", "from_center", "(", "\n", "self", ".", "bounds", ".", "center", "(", ")", ",", "sample_region_scale", "*", "self", ".", "bounds", ".", "size", "(", ")", "/", "2", "\n", ")", "\n", "\n", "# NOTE: does not scale the \"up\" direction", "\n", "sample_range", "=", "[", "scaled_region", ".", "min", ",", "scaled_region", ".", "max", "]", "\n", "sample_range", "[", "0", "]", "[", "self", ".", "up_axis", "]", "=", "self", ".", "bounds", ".", "min", "[", "self", ".", "up_axis", "]", "\n", "sample_range", "[", "1", "]", "[", "self", ".", "up_axis", "]", "=", "self", ".", "bounds", ".", "max", "[", "self", ".", "up_axis", "]", "\n", "\n", "return", "np", ".", "random", ".", "uniform", "(", "sample_range", "[", "0", "]", ",", "sample_range", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.receptacle.AABBReceptacle.get_global_transform": [[138, 182], ["sim.get_stage_initialization_template", "qf2v", "qtm().transform_vector", "habitat_sim.utils.common.quat_to_magnum", "habitat_sim.utils.common.quat_to_magnum.inverted", "magnum.Matrix4.from_", "magnum.Matrix4.from_", "magnum.Matrix4.from_", "l2w4.__matmul__.__matmul__.__matmul__", "magnum.Vector3", "qf2v", "habitat_sim.utils.common.quat_to_magnum.inverted.to_matrix", "magnum.Vector3", "magnum.Matrix3", "receptacle.AABBReceptacle.bounds.center", "receptacle.AABBReceptacle.rotation.to_matrix", "magnum.Vector3", "magnum.Matrix4.from_.__matmul__().__matmul__", "sim.get_rigid_object_manager", "sim.get_rigid_object_manager.get_object_by_handle", "sim.get_articulated_object_manager.get_object_by_handle.visual_scene_nodes[].absolute_transformation", "sim.get_articulated_object_manager", "sim.get_articulated_object_manager.get_object_by_handle", "sim.get_articulated_object_manager.get_object_by_handle.get_link_scene_node().absolute_transformation", "qtm", "numpy.array", "numpy.array", "magnum.Matrix4.from_.inverted", "magnum.Matrix4.from_.__matmul__", "sim.get_articulated_object_manager.get_object_by_handle.get_link_scene_node"], "methods", ["None"], ["", "def", "get_global_transform", "(", "self", ",", "sim", ":", "habitat_sim", ".", "Simulator", ")", "->", "mn", ".", "Matrix4", ":", "\n", "        ", "\"\"\"\n        Isolates boilerplate necessary to extract receptacle global transform of the Receptacle at the current state.\n        \"\"\"", "\n", "if", "self", ".", "parent_object_handle", "is", "None", ":", "\n", "# this is a global stage receptacle", "\n", "            ", "from", "habitat_sim", ".", "utils", ".", "common", "import", "quat_from_two_vectors", "as", "qf2v", "\n", "from", "habitat_sim", ".", "utils", ".", "common", "import", "quat_to_magnum", "as", "qtm", "\n", "\n", "# TODO: add an API query or other method to avoid reconstructing the stage frame here", "\n", "stage_config", "=", "sim", ".", "get_stage_initialization_template", "(", ")", "\n", "r_frameup_worldup", "=", "qf2v", "(", "\n", "habitat_sim", ".", "geo", ".", "UP", ",", "stage_config", ".", "orient_up", "\n", ")", "\n", "v_prime", "=", "qtm", "(", "r_frameup_worldup", ")", ".", "transform_vector", "(", "\n", "mn", ".", "Vector3", "(", "habitat_sim", ".", "geo", ".", "FRONT", ")", "\n", ")", "\n", "world_to_local", "=", "(", "\n", "qf2v", "(", "np", ".", "array", "(", "v_prime", ")", ",", "np", ".", "array", "(", "stage_config", ".", "orient_front", ")", ")", "\n", "*", "r_frameup_worldup", "\n", ")", "\n", "world_to_local", "=", "habitat_sim", ".", "utils", ".", "common", ".", "quat_to_magnum", "(", "\n", "world_to_local", "\n", ")", "\n", "local_to_world", "=", "world_to_local", ".", "inverted", "(", ")", "\n", "l2w4", "=", "mn", ".", "Matrix4", ".", "from_", "(", "local_to_world", ".", "to_matrix", "(", ")", ",", "mn", ".", "Vector3", "(", ")", ")", "\n", "\n", "# apply the receptacle rotation from the bb center", "\n", "T", "=", "mn", ".", "Matrix4", ".", "from_", "(", "mn", ".", "Matrix3", "(", ")", ",", "self", ".", "bounds", ".", "center", "(", ")", ")", "\n", "R", "=", "mn", ".", "Matrix4", ".", "from_", "(", "self", ".", "rotation", ".", "to_matrix", "(", ")", ",", "mn", ".", "Vector3", "(", ")", ")", "\n", "# translate frame to center, rotate, translate back", "\n", "l2w4", "=", "l2w4", ".", "__matmul__", "(", "T", ".", "__matmul__", "(", "R", ")", ".", "__matmul__", "(", "T", ".", "inverted", "(", ")", ")", ")", "\n", "return", "l2w4", "\n", "\n", "", "elif", "not", "self", ".", "is_parent_object_articulated", ":", "\n", "            ", "obj_mgr", "=", "sim", ".", "get_rigid_object_manager", "(", ")", "\n", "obj", "=", "obj_mgr", ".", "get_object_by_handle", "(", "self", ".", "parent_object_handle", ")", "\n", "# NOTE: we use absolute transformation from the 2nd visual node (scaling node) and root of all render assets to correctly account for any COM shifting, re-orienting, or scaling which has been applied.", "\n", "return", "obj", ".", "visual_scene_nodes", "[", "1", "]", ".", "absolute_transformation", "(", ")", "\n", "", "else", ":", "\n", "            ", "ao_mgr", "=", "sim", ".", "get_articulated_object_manager", "(", ")", "\n", "obj", "=", "ao_mgr", ".", "get_object_by_handle", "(", "self", ".", "parent_object_handle", ")", "\n", "return", "obj", ".", "get_link_scene_node", "(", "\n", "self", ".", "parent_link", "\n", ")", ".", "absolute_transformation", "(", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.receptacle.AABBReceptacle.add_receptacle_visualization": [[184, 220], ["habitat.sims.habitat_simulator.sim_utilities.add_wire_box", "sim.get_articulated_object_manager().get_object_by_handle().get_link_scene_node().create_child", "receptacle.AABBReceptacle.bounds.center", "receptacle.AABBReceptacle.get_global_transform().__matmul__", "sim.get_rigid_object_manager().get_object_by_handle().visual_scene_nodes[].create_child", "receptacle.AABBReceptacle.bounds.size", "sim.get_articulated_object_manager().get_object_by_handle().get_link_scene_node", "receptacle.AABBReceptacle.get_global_transform", "sim.get_articulated_object_manager().get_object_by_handle", "sim.get_rigid_object_manager().get_object_by_handle", "sim.get_articulated_object_manager", "sim.get_rigid_object_manager"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.sim_utilities.add_wire_box", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.receptacle.AABBReceptacle.get_global_transform"], ["", "", "def", "add_receptacle_visualization", "(", "\n", "self", ",", "sim", ":", "habitat_sim", ".", "Simulator", "\n", ")", "->", "List", "[", "habitat_sim", ".", "physics", ".", "ManagedRigidObject", "]", ":", "\n", "        ", "\"\"\"\n        Add a wireframe box object to the simulation to represent the AABBReceptacle and return it for external management.\n        \"\"\"", "\n", "attachment_scene_node", "=", "None", "\n", "if", "self", ".", "is_parent_object_articulated", ":", "\n", "            ", "attachment_scene_node", "=", "(", "\n", "sim", ".", "get_articulated_object_manager", "(", ")", "\n", ".", "get_object_by_handle", "(", "self", ".", "parent_object_handle", ")", "\n", ".", "get_link_scene_node", "(", "self", ".", "parent_link", ")", "\n", ".", "create_child", "(", ")", "\n", ")", "\n", "", "elif", "self", ".", "parent_object_handle", "is", "not", "None", ":", "\n", "# attach to the 1st visual scene node so any COM shift is automatically applied", "\n", "            ", "attachment_scene_node", "=", "(", "\n", "sim", ".", "get_rigid_object_manager", "(", ")", "\n", ".", "get_object_by_handle", "(", "self", ".", "parent_object_handle", ")", "\n", ".", "visual_scene_nodes", "[", "1", "]", "\n", ".", "create_child", "(", ")", "\n", ")", "\n", "", "box_obj", "=", "add_wire_box", "(", "\n", "sim", ",", "\n", "self", ".", "bounds", ".", "size", "(", ")", "/", "2.0", ",", "\n", "self", ".", "bounds", ".", "center", "(", ")", ",", "\n", "attach_to", "=", "attachment_scene_node", ",", "\n", ")", "\n", "# TODO: enable rotation for object local receptacles", "\n", "\n", "# handle local frame and rotation for global receptacles", "\n", "if", "self", ".", "parent_object_handle", "is", "None", ":", "\n", "            ", "box_obj", ".", "transformation", "=", "self", ".", "get_global_transform", "(", "sim", ")", ".", "__matmul__", "(", "\n", "box_obj", ".", "transformation", "\n", ")", "\n", "", "return", "[", "box_obj", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.receptacle.get_all_scenedataset_receptacles": [[222, 268], ["sim.get_stage_template_manager", "sim.get_stage_template_manager.get_template_handles", "sim.get_object_template_manager", "sim.get_object_template_manager.get_template_handles", "sim.get_articulated_object_manager", "sim.metadata_mediator.urdf_paths.items", "sim.get_stage_template_manager.get_template_by_handle", "stm.get_template_by_handle.get_user_config().get_subconfig_keys", "sim.get_object_template_manager.get_template_by_handle", "rotm.get_template_by_handle.get_user_config().get_subconfig_keys", "sim.get_articulated_object_manager.add_articulated_object_from_urdf", "aom.add_articulated_object_from_urdf.user_attributes.get_subconfig_keys", "sim.get_articulated_object_manager.remove_object_by_handle", "item.startswith", "item.startswith", "item.startswith", "stm.get_template_by_handle.get_user_config", "[].append", "rotm.get_template_by_handle.get_user_config", "[].append", "[].append"], "function", ["None"], ["", "", "def", "get_all_scenedataset_receptacles", "(", "sim", ")", "->", "Dict", "[", "str", ",", "Dict", "[", "str", ",", "List", "[", "str", "]", "]", "]", ":", "\n", "    ", "\"\"\"\n    Scrapes the active SceneDataset from a Simulator for all receptacle names defined in rigid/articulated object and stage templates for investigation and preview purposes.\n    Note this will not include scene-specific overrides defined in scene_config.json files. Only receptacles defined in object_config.json, ao_config.json, and stage_config.json files or added programmatically to associated Attributes objects will be found.\n\n    Returns a dict with keys {\"stage\", \"rigid\", \"articulated\"} mapping object template handles to lists of receptacle names.\n    \"\"\"", "\n", "# cache the rigid and articulated receptacles seperately", "\n", "receptacles", ":", "Dict", "[", "str", ",", "Dict", "[", "str", ",", "List", "[", "str", "]", "]", "]", "=", "{", "\n", "\"stage\"", ":", "{", "}", ",", "\n", "\"rigid\"", ":", "{", "}", ",", "\n", "\"articulated\"", ":", "{", "}", ",", "\n", "}", "\n", "\n", "# scrape stage configs:", "\n", "stm", "=", "sim", ".", "get_stage_template_manager", "(", ")", "\n", "for", "template_handle", "in", "stm", ".", "get_template_handles", "(", "\"\"", ")", ":", "\n", "        ", "stage_template", "=", "stm", ".", "get_template_by_handle", "(", "template_handle", ")", "\n", "for", "item", "in", "stage_template", ".", "get_user_config", "(", ")", ".", "get_subconfig_keys", "(", ")", ":", "\n", "            ", "if", "item", ".", "startswith", "(", "\"receptacle_\"", ")", ":", "\n", "                ", "if", "template_handle", "not", "in", "receptacles", "[", "\"stage\"", "]", ":", "\n", "                    ", "receptacles", "[", "\"stage\"", "]", "[", "template_handle", "]", "=", "[", "]", "\n", "", "receptacles", "[", "\"stage\"", "]", "[", "template_handle", "]", ".", "append", "(", "item", ")", "\n", "\n", "# scrape the rigid object configs:", "\n", "", "", "", "rotm", "=", "sim", ".", "get_object_template_manager", "(", ")", "\n", "for", "template_handle", "in", "rotm", ".", "get_template_handles", "(", "\"\"", ")", ":", "\n", "        ", "obj_template", "=", "rotm", ".", "get_template_by_handle", "(", "template_handle", ")", "\n", "for", "item", "in", "obj_template", ".", "get_user_config", "(", ")", ".", "get_subconfig_keys", "(", ")", ":", "\n", "            ", "if", "item", ".", "startswith", "(", "\"receptacle_\"", ")", ":", "\n", "                ", "if", "template_handle", "not", "in", "receptacles", "[", "\"rigid\"", "]", ":", "\n", "                    ", "receptacles", "[", "\"rigid\"", "]", "[", "template_handle", "]", "=", "[", "]", "\n", "", "receptacles", "[", "\"rigid\"", "]", "[", "template_handle", "]", ".", "append", "(", "item", ")", "\n", "\n", "# TODO: we currently need to load every URDF to get at the configs. This should change once AO templates are better managed.", "\n", "", "", "", "aom", "=", "sim", ".", "get_articulated_object_manager", "(", ")", "\n", "for", "urdf_handle", ",", "urdf_path", "in", "sim", ".", "metadata_mediator", ".", "urdf_paths", ".", "items", "(", ")", ":", "\n", "        ", "ao", "=", "aom", ".", "add_articulated_object_from_urdf", "(", "urdf_path", ")", "\n", "for", "item", "in", "ao", ".", "user_attributes", ".", "get_subconfig_keys", "(", ")", ":", "\n", "            ", "if", "item", ".", "startswith", "(", "\"receptacle_\"", ")", ":", "\n", "                ", "if", "urdf_handle", "not", "in", "receptacles", "[", "\"articulated\"", "]", ":", "\n", "                    ", "receptacles", "[", "\"articulated\"", "]", "[", "urdf_handle", "]", "=", "[", "]", "\n", "", "receptacles", "[", "\"articulated\"", "]", "[", "urdf_handle", "]", ".", "append", "(", "item", ")", "\n", "", "", "aom", ".", "remove_object_by_handle", "(", "ao", ".", "handle", ")", "\n", "\n", "", "return", "receptacles", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.receptacle.parse_receptacles_from_user_config": [[270, 359], ["user_subconfig.get_subconfig_keys", "sub_config_key.startswith", "user_subconfig.get_subconfig", "user_subconfig.get_subconfig.has_value", "user_subconfig.get_subconfig.has_value", "receptacles.append", "user_subconfig.get_subconfig.get", "user_subconfig.get_subconfig.has_value", "user_subconfig.get_subconfig.get", "magnum.Quaternion", "user_subconfig.get_subconfig.get", "user_subconfig.get_subconfig.has_value", "user_subconfig.get_subconfig.get", "enumerate", "user_subconfig.get_subconfig.get", "user_subconfig.get_subconfig.get", "receptacle.AABBReceptacle", "user_subconfig.get_subconfig.has_value", "user_subconfig.get_subconfig.has_value", "user_subconfig.get_subconfig.has_value", "magnum.Range3D.from_center"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get"], ["", "def", "parse_receptacles_from_user_config", "(", "\n", "user_subconfig", ":", "habitat_sim", ".", "_ext", ".", "habitat_sim_bindings", ".", "Configuration", ",", "\n", "parent_object_handle", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "valid_link_names", ":", "Optional", "[", "List", "[", "str", "]", "]", "=", "None", ",", "\n", "ao_uniform_scaling", ":", "float", "=", "1.0", ",", "\n", ")", "->", "List", "[", "Union", "[", "Receptacle", ",", "AABBReceptacle", "]", "]", ":", "\n", "    ", "\"\"\"\n    Parse receptacle metadata from the provided user subconfig object.\n\n    :param user_subconfig: The Configuration object containing metadata parsed from the \"user_defined\" JSON field for rigid/articulated object and stage configs.\n    :param parent_object_handle: The instance handle of the rigid or articulated object to which constructed Receptacles are attached. None or globally defined stage Receptacles.\n    :param valid_link_names: An indexed list of link names for validating configured Receptacle attachments. Provided only for ArticulatedObjects.\n    :param valid_link_names: An indexed list of link names for validating configured Receptacle attachments. Provided only for ArticulatedObjects.\n    :param ao_uniform_scaling: Uniform scaling applied to the parent AO is applied directly to the Receptacle.\n\n    Construct and return a list of Receptacle objects. Multiple Receptacles can be defined in a single user subconfig.\n    \"\"\"", "\n", "receptacles", ":", "List", "[", "Union", "[", "Receptacle", ",", "AABBReceptacle", "]", "]", "=", "[", "]", "\n", "\n", "# search the generic user subconfig metadata looking for receptacles", "\n", "for", "sub_config_key", "in", "user_subconfig", ".", "get_subconfig_keys", "(", ")", ":", "\n", "        ", "if", "sub_config_key", ".", "startswith", "(", "\"receptacle_\"", ")", ":", "\n", "            ", "sub_config", "=", "user_subconfig", ".", "get_subconfig", "(", "sub_config_key", ")", "\n", "# this is a receptacle, parse it", "\n", "assert", "sub_config", ".", "has_value", "(", "\"position\"", ")", "\n", "assert", "sub_config", ".", "has_value", "(", "\"scale\"", ")", "\n", "up", "=", "(", "\n", "None", "\n", "if", "not", "sub_config", ".", "has_value", "(", "\"up\"", ")", "\n", "else", "sub_config", ".", "get", "(", "\"up\"", ")", "\n", ")", "\n", "\n", "receptacle_name", "=", "(", "\n", "sub_config", ".", "get", "(", "\"name\"", ")", "\n", "if", "sub_config", ".", "has_value", "(", "\"name\"", ")", "\n", "else", "sub_config_key", "\n", ")", "\n", "\n", "# optional rotation for global receptacles, defaults to identity", "\n", "rotation", "=", "(", "\n", "mn", ".", "Quaternion", "(", ")", "\n", "if", "not", "sub_config", ".", "has_value", "(", "\"rotation\"", ")", "\n", "else", "sub_config", ".", "get", "(", "\"rotation\"", ")", "\n", ")", "\n", "\n", "# setup parent specific metadata for ArticulatedObjects", "\n", "parent_link_ix", "=", "None", "\n", "if", "valid_link_names", "is", "not", "None", ":", "\n", "                ", "assert", "sub_config", ".", "has_value", "(", "\n", "\"parent_link\"", "\n", ")", ",", "\"ArticulatedObject Receptacles must define a parent link name.\"", "\n", "parent_link_name", "=", "sub_config", ".", "get", "(", "\"parent_link\"", ")", "\n", "# search for a matching link", "\n", "for", "link_ix", ",", "link_name", "in", "enumerate", "(", "valid_link_names", ")", ":", "\n", "                    ", "if", "link_name", "==", "parent_link_name", ":", "\n", "                        ", "parent_link_ix", "=", "(", "\n", "link_ix", "-", "1", "\n", ")", "# starting from -1 (base link)", "\n", "break", "\n", "", "", "assert", "(", "\n", "parent_link_ix", "is", "not", "None", "\n", ")", ",", "f\"('parent_link' = '{parent_link_name}') in Receptacle configuration does not match any provided link names: {valid_link_names}.\"", "\n", "", "else", ":", "\n", "                ", "assert", "not", "sub_config", ".", "has_value", "(", "\n", "\"parent_link\"", "\n", ")", ",", "\"ArticulatedObject parent link name defined in config, but no valid_link_names provided. Mistake?\"", "\n", "\n", "# apply AO uniform instance scaling", "\n", "", "receptacle_position", "=", "ao_uniform_scaling", "*", "sub_config", ".", "get", "(", "\n", "\"position\"", "\n", ")", "\n", "receptacle_scale", "=", "ao_uniform_scaling", "*", "sub_config", ".", "get", "(", "\"scale\"", ")", "\n", "\n", "# TODO: adding more receptacle types will require additional logic here", "\n", "receptacles", ".", "append", "(", "\n", "AABBReceptacle", "(", "\n", "name", "=", "receptacle_name", ",", "\n", "bounds", "=", "mn", ".", "Range3D", ".", "from_center", "(", "\n", "receptacle_position", ",", "\n", "receptacle_scale", ",", "\n", ")", ",", "\n", "rotation", "=", "rotation", ",", "\n", "up", "=", "up", ",", "\n", "parent_object_handle", "=", "parent_object_handle", ",", "\n", "parent_link", "=", "parent_link_ix", ",", "\n", ")", "\n", ")", "\n", "\n", "", "", "return", "receptacles", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.receptacle.find_receptacles": [[361, 406], ["sim.get_rigid_object_manager", "sim.get_articulated_object_manager", "sim.get_stage_initialization_template", "sim.get_rigid_object_manager.get_object_handles", "sim.get_articulated_object_manager.get_object_handles", "sim.get_stage_initialization_template.get_user_config", "receptacles.extend", "sim.get_rigid_object_manager.get_object_by_handle", "receptacles.extend", "sim.get_articulated_object_manager.get_object_by_handle", "receptacles.extend", "receptacle.parse_receptacles_from_user_config", "receptacle.parse_receptacles_from_user_config", "receptacle.parse_receptacles_from_user_config", "ao_mgr.get_object_by_handle.get_link_name", "range"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.receptacle.parse_receptacles_from_user_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.receptacle.parse_receptacles_from_user_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.receptacle.parse_receptacles_from_user_config"], ["", "def", "find_receptacles", "(", "\n", "sim", ":", "habitat_sim", ".", "Simulator", ",", "\n", ")", "->", "List", "[", "Union", "[", "Receptacle", ",", "AABBReceptacle", "]", "]", ":", "\n", "    ", "\"\"\"\n    Scrape and return a list of all Receptacles defined in the metadata belonging to the scene's currently instanced objects.\n    \"\"\"", "\n", "\n", "obj_mgr", "=", "sim", ".", "get_rigid_object_manager", "(", ")", "\n", "ao_mgr", "=", "sim", ".", "get_articulated_object_manager", "(", ")", "\n", "\n", "receptacles", ":", "List", "[", "Union", "[", "Receptacle", ",", "AABBReceptacle", "]", "]", "=", "[", "]", "\n", "\n", "# search for global receptacles included with the stage", "\n", "stage_config", "=", "sim", ".", "get_stage_initialization_template", "(", ")", "\n", "if", "stage_config", "is", "not", "None", ":", "\n", "        ", "stage_user_attr", "=", "stage_config", ".", "get_user_config", "(", ")", "\n", "receptacles", ".", "extend", "(", "parse_receptacles_from_user_config", "(", "stage_user_attr", ")", ")", "\n", "\n", "# rigid object receptacles", "\n", "", "for", "obj_handle", "in", "obj_mgr", ".", "get_object_handles", "(", ")", ":", "\n", "        ", "obj", "=", "obj_mgr", ".", "get_object_by_handle", "(", "obj_handle", ")", "\n", "user_attr", "=", "obj", ".", "user_attributes", "\n", "receptacles", ".", "extend", "(", "\n", "parse_receptacles_from_user_config", "(", "\n", "user_attr", ",", "parent_object_handle", "=", "obj_handle", "\n", ")", "\n", ")", "\n", "\n", "# articulated object receptacles", "\n", "", "for", "obj_handle", "in", "ao_mgr", ".", "get_object_handles", "(", ")", ":", "\n", "        ", "obj", "=", "ao_mgr", ".", "get_object_by_handle", "(", "obj_handle", ")", "\n", "user_attr", "=", "obj", ".", "user_attributes", "\n", "receptacles", ".", "extend", "(", "\n", "parse_receptacles_from_user_config", "(", "\n", "user_attr", ",", "\n", "parent_object_handle", "=", "obj_handle", ",", "\n", "valid_link_names", "=", "[", "\n", "obj", ".", "get_link_name", "(", "link", ")", "\n", "for", "link", "in", "range", "(", "-", "1", ",", "obj", ".", "num_links", ")", "\n", "]", ",", "\n", "ao_uniform_scaling", "=", "obj", ".", "global_scale", ",", "\n", ")", "\n", ")", "\n", "\n", "", "return", "receptacles", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_generator.RearrangeEpisodeGenerator.__enter__": [[52, 54], ["None"], "methods", ["None"], ["def", "__enter__", "(", "self", ")", "->", "\"RearrangeEpisodeGenerator\"", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_generator.RearrangeEpisodeGenerator.__exit__": [[55, 59], ["rearrange_generator.RearrangeEpisodeGenerator.sim.close"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.close"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_val", ",", "exc_tb", ")", "->", "None", ":", "\n", "        ", "if", "self", ".", "sim", "!=", "None", ":", "\n", "            ", "self", ".", "sim", ".", "close", "(", "destroy", "=", "True", ")", "\n", "del", "self", ".", "sim", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_generator.RearrangeEpisodeGenerator.__init__": [[60, 97], ["rearrange_generator.RearrangeEpisodeGenerator.cfg.clone", "rearrange_generator.RearrangeEpisodeGenerator.initialize_sim", "rearrange_generator.RearrangeEpisodeGenerator._get_resource_sets", "rearrange_generator.RearrangeEpisodeGenerator._get_scene_sampler", "rearrange_generator.RearrangeEpisodeGenerator._get_obj_samplers", "rearrange_generator.RearrangeEpisodeGenerator._get_ao_state_samplers"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_generator.RearrangeEpisodeGenerator.initialize_sim", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_generator.RearrangeEpisodeGenerator._get_resource_sets", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_generator.RearrangeEpisodeGenerator._get_scene_sampler", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_generator.RearrangeEpisodeGenerator._get_obj_samplers", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_generator.RearrangeEpisodeGenerator._get_ao_state_samplers"], ["", "", "def", "__init__", "(", "\n", "self", ",", "\n", "cfg", ":", "CN", ",", "\n", "debug_visualization", ":", "bool", "=", "False", ",", "\n", "limit_scene_set", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Initialize the generator object for a particular configuration.\n        Loads yaml, sets up samplers and debug visualization settings.\n        \"\"\"", "\n", "# load and cache the config", "\n", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "start_cfg", "=", "self", ".", "cfg", ".", "clone", "(", ")", "\n", "self", ".", "_limit_scene_set", "=", "limit_scene_set", "\n", "\n", "# debug visualization settings", "\n", "self", ".", "_render_debug_obs", "=", "self", ".", "_make_debug_video", "=", "debug_visualization", "\n", "self", ".", "vdb", ":", "DebugVisualizer", "=", "(", "\n", "None", "# visual debugger initialized with sim", "\n", ")", "\n", "\n", "# hold a habitat Simulator object for efficient re-use", "\n", "self", ".", "sim", ":", "habitat_sim", ".", "Simulator", "=", "None", "\n", "# initialize an empty scene and load the SceneDataset", "\n", "self", ".", "initialize_sim", "(", "\"NONE\"", ",", "self", ".", "cfg", ".", "dataset_path", ")", "\n", "\n", "# Setup the sampler caches from config", "\n", "self", ".", "_get_resource_sets", "(", ")", "\n", "self", ".", "_get_scene_sampler", "(", ")", "\n", "self", ".", "_get_obj_samplers", "(", ")", "\n", "self", ".", "_get_ao_state_samplers", "(", ")", "\n", "\n", "# cache objects sampled by this generator for the most recent episode", "\n", "self", ".", "ep_sampled_objects", ":", "List", "[", "\n", "habitat_sim", ".", "physics", ".", "ManagedRigidObject", "\n", "]", "=", "[", "]", "\n", "self", ".", "num_ep_generated", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_generator.RearrangeEpisodeGenerator._get_resource_sets": [[98, 183], ["habitat.utils.common.cull_string_list_by_substrings", "habitat.utils.common.cull_string_list_by_substrings", "habitat.utils.common.cull_string_list_by_substrings", "habitat.utils.common.cull_string_list_by_substrings", "rearrange_generator.RearrangeEpisodeGenerator.sim.metadata_mediator.get_scene_handles", "rearrange_generator.RearrangeEpisodeGenerator.sim.get_object_template_manager().get_template_handles", "type", "type", "type", "rearrange_generator.RearrangeEpisodeGenerator.sim.get_object_template_manager"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.cull_string_list_by_substrings", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.cull_string_list_by_substrings", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.cull_string_list_by_substrings", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.cull_string_list_by_substrings"], ["", "def", "_get_resource_sets", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Extracts and validates scene, object, and receptacle sets from the config and fills internal datastructures for later reference.\n        Assumes the Simulator (self.sim) is already initialized.\n        \"\"\"", "\n", "# {scene set name -> [scene handles]}", "\n", "self", ".", "_scene_sets", ":", "Dict", "[", "str", ",", "List", "[", "str", "]", "]", "=", "{", "}", "\n", "\n", "# {object set name -> [object handles]}", "\n", "self", ".", "_obj_sets", ":", "Dict", "[", "str", ",", "List", "[", "str", "]", "]", "=", "{", "}", "\n", "\n", "# {receptacle set name -> ([included object handles], [excluded object handles], [included receptacle name substrings], [excluded receptacle name substrings])}", "\n", "self", ".", "_receptacle_sets", ":", "Dict", "[", "\n", "str", ",", "Tuple", "[", "List", "[", "str", "]", ",", "List", "[", "str", "]", ",", "List", "[", "str", "]", ",", "List", "[", "str", "]", "]", "\n", "]", "=", "{", "}", "\n", "\n", "expected_list_keys", "=", "[", "\"included_substrings\"", ",", "\"excluded_substrings\"", "]", "\n", "# scene sets", "\n", "for", "scene_set", "in", "self", ".", "cfg", ".", "scene_sets", ":", "\n", "            ", "assert", "\"name\"", "in", "scene_set", "\n", "assert", "(", "\n", "scene_set", "[", "\"name\"", "]", "not", "in", "self", ".", "_scene_sets", "\n", ")", ",", "f\"cfg.scene_sets - Duplicate name ('{scene_set['name']}') detected.\"", "\n", "for", "list_key", "in", "expected_list_keys", ":", "\n", "                ", "assert", "(", "\n", "list_key", "in", "scene_set", "\n", ")", ",", "f\"Expected list key '{list_key}'.\"", "\n", "assert", "(", "\n", "type", "(", "scene_set", "[", "list_key", "]", ")", "is", "list", "\n", ")", ",", "f\"cfg.scene_sets - '{scene_set['name']}' '{list_key}' must be a list of strings.\"", "\n", "", "self", ".", "_scene_sets", "[", "\n", "scene_set", "[", "\"name\"", "]", "\n", "]", "=", "cull_string_list_by_substrings", "(", "\n", "self", ".", "sim", ".", "metadata_mediator", ".", "get_scene_handles", "(", ")", ",", "\n", "scene_set", "[", "\"included_substrings\"", "]", ",", "\n", "scene_set", "[", "\"excluded_substrings\"", "]", ",", "\n", ")", "\n", "\n", "# object sets", "\n", "", "for", "object_set", "in", "self", ".", "cfg", ".", "object_sets", ":", "\n", "            ", "assert", "\"name\"", "in", "object_set", "\n", "assert", "(", "\n", "object_set", "[", "\"name\"", "]", "not", "in", "self", ".", "_obj_sets", "\n", ")", ",", "f\"cfg.object_sets - Duplicate name ('{object_set['name']}') detected.\"", "\n", "for", "list_key", "in", "expected_list_keys", ":", "\n", "                ", "assert", "(", "\n", "list_key", "in", "object_set", "\n", ")", ",", "f\"Expected list key '{list_key}'.\"", "\n", "assert", "(", "\n", "type", "(", "object_set", "[", "list_key", "]", ")", "is", "list", "\n", ")", ",", "f\"cfg.object_sets - '{object_set['name']}' '{list_key}' must be a list of strings.\"", "\n", "", "self", ".", "_obj_sets", "[", "\n", "object_set", "[", "\"name\"", "]", "\n", "]", "=", "cull_string_list_by_substrings", "(", "\n", "self", ".", "sim", ".", "get_object_template_manager", "(", ")", ".", "get_template_handles", "(", ")", ",", "\n", "object_set", "[", "\"included_substrings\"", "]", ",", "\n", "object_set", "[", "\"excluded_substrings\"", "]", ",", "\n", ")", "\n", "\n", "# receptacle sets", "\n", "", "expected_list_keys", "=", "[", "\n", "\"included_object_substrings\"", ",", "\n", "\"excluded_object_substrings\"", ",", "\n", "\"included_receptacle_substrings\"", ",", "\n", "\"excluded_receptacle_substrings\"", ",", "\n", "]", "\n", "for", "receptacle_set", "in", "self", ".", "cfg", ".", "receptacle_sets", ":", "\n", "            ", "assert", "\"name\"", "in", "receptacle_set", "\n", "assert", "(", "\n", "receptacle_set", "[", "\"name\"", "]", "not", "in", "self", ".", "_receptacle_sets", "\n", ")", ",", "f\"cfg.receptacle_sets - Duplicate name ('{receptacle_set['name']}') detected.\"", "\n", "for", "list_key", "in", "expected_list_keys", ":", "\n", "                ", "assert", "(", "\n", "list_key", "in", "receptacle_set", "\n", ")", ",", "f\"Expected list key '{list_key}'.\"", "\n", "assert", "(", "\n", "type", "(", "receptacle_set", "[", "list_key", "]", ")", "is", "list", "\n", ")", ",", "f\"cfg.receptacle_sets - '{receptacle_set['name']}' '{list_key}' must be a list of strings.\"", "\n", "\n", "# NOTE: we can't finalize this list until sampling time when objects are instanced and receptacle metadata is scraped from the scene", "\n", "", "self", ".", "_receptacle_sets", "[", "receptacle_set", "[", "\"name\"", "]", "]", "=", "(", "\n", "receptacle_set", "[", "\"included_object_substrings\"", "]", ",", "\n", "receptacle_set", "[", "\"excluded_object_substrings\"", "]", ",", "\n", "receptacle_set", "[", "\"included_receptacle_substrings\"", "]", ",", "\n", "receptacle_set", "[", "\"excluded_receptacle_substrings\"", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_generator.RearrangeEpisodeGenerator._get_obj_samplers": [[185, 235], ["sorted", "habitat.ObjectSampler", "habitat.ObjectSampler", "habitat.core.logging.logger.info", "habitat.core.logging.logger.info", "set", "rearrange_generator.get_sample_region_ratios", "obj_sampler_info[].get"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.set", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_generator.get_sample_region_ratios", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get"], ["", "", "def", "_get_obj_samplers", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Extracts object sampler parameters from the yaml config file and constructs the sampler objects.\n        \"\"\"", "\n", "self", ".", "_obj_samplers", ":", "Dict", "[", "str", ",", "samplers", ".", "ObjectSampler", "]", "=", "{", "}", "\n", "\n", "for", "obj_sampler_info", "in", "self", ".", "cfg", ".", "object_samplers", ":", "\n", "            ", "assert", "\"name\"", "in", "obj_sampler_info", "\n", "assert", "\"type\"", "in", "obj_sampler_info", "\n", "assert", "\"params\"", "in", "obj_sampler_info", "\n", "assert", "(", "\n", "obj_sampler_info", "[", "\"name\"", "]", "not", "in", "self", ".", "_obj_samplers", "\n", ")", ",", "f\"Duplicate object sampler name '{obj_sampler_info['name']}' in config.\"", "\n", "if", "obj_sampler_info", "[", "\"type\"", "]", "==", "\"uniform\"", ":", "\n", "                ", "assert", "\"object_sets\"", "in", "obj_sampler_info", "[", "\"params\"", "]", "\n", "assert", "\"receptacle_sets\"", "in", "obj_sampler_info", "[", "\"params\"", "]", "\n", "assert", "\"num_samples\"", "in", "obj_sampler_info", "[", "\"params\"", "]", "\n", "assert", "\"orientation_sampling\"", "in", "obj_sampler_info", "[", "\"params\"", "]", "\n", "# merge and flatten object and receptacle sets", "\n", "object_handles", "=", "[", "\n", "x", "\n", "for", "y", "in", "obj_sampler_info", "[", "\"params\"", "]", "[", "\"object_sets\"", "]", "\n", "for", "x", "in", "self", ".", "_obj_sets", "[", "y", "]", "\n", "]", "\n", "object_handles", "=", "sorted", "(", "set", "(", "object_handles", ")", ")", "\n", "receptacle_info", "=", "[", "\n", "self", ".", "_receptacle_sets", "[", "y", "]", "\n", "for", "y", "in", "obj_sampler_info", "[", "\"params\"", "]", "[", "\"receptacle_sets\"", "]", "\n", "]", "\n", "\n", "self", ".", "_obj_samplers", "[", "\n", "obj_sampler_info", "[", "\"name\"", "]", "\n", "]", "=", "samplers", ".", "ObjectSampler", "(", "\n", "object_handles", ",", "\n", "receptacle_info", ",", "\n", "(", "\n", "obj_sampler_info", "[", "\"params\"", "]", "[", "\"num_samples\"", "]", "[", "0", "]", ",", "\n", "obj_sampler_info", "[", "\"params\"", "]", "[", "\"num_samples\"", "]", "[", "1", "]", ",", "\n", ")", ",", "\n", "obj_sampler_info", "[", "\"params\"", "]", "[", "\"orientation_sampling\"", "]", ",", "\n", "get_sample_region_ratios", "(", "obj_sampler_info", ")", ",", "\n", "obj_sampler_info", "[", "\"params\"", "]", ".", "get", "(", "\n", "\"nav_to_min_distance\"", ",", "-", "1.0", "\n", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "logger", ".", "info", "(", "\n", "f\"Requested object sampler '{obj_sampler_info['type']}' is not implemented.\"", "\n", ")", "\n", "raise", "(", "NotImplementedError", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_generator.RearrangeEpisodeGenerator._get_object_target_samplers": [[236, 277], ["habitat.ObjectTargetSampler", "habitat.ObjectTargetSampler", "habitat.core.logging.logger.info", "habitat.core.logging.logger.info", "rearrange_generator.get_sample_region_ratios", "target_sampler_info[].get"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_generator.get_sample_region_ratios", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get"], ["", "", "", "def", "_get_object_target_samplers", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Initialize target samplers. Expects self.episode_data to be populated by object samples.\n        \"\"\"", "\n", "\n", "self", ".", "_target_samplers", ":", "Dict", "[", "str", ",", "samplers", ".", "ObjectTargetSampler", "]", "=", "{", "}", "\n", "for", "target_sampler_info", "in", "self", ".", "cfg", ".", "object_target_samplers", ":", "\n", "            ", "assert", "\"name\"", "in", "target_sampler_info", "\n", "assert", "\"type\"", "in", "target_sampler_info", "\n", "assert", "\"params\"", "in", "target_sampler_info", "\n", "assert", "(", "\n", "target_sampler_info", "[", "\"name\"", "]", "not", "in", "self", ".", "_target_samplers", "\n", ")", ",", "f\"Duplicate target sampler name '{target_sampler_info['name']}' in config.\"", "\n", "if", "target_sampler_info", "[", "\"type\"", "]", "==", "\"uniform\"", ":", "\n", "# merge and flatten receptacle sets", "\n", "                ", "receptacle_info", "=", "[", "\n", "self", ".", "_receptacle_sets", "[", "y", "]", "\n", "for", "y", "in", "target_sampler_info", "[", "\"params\"", "]", "[", "\"receptacle_sets\"", "]", "\n", "]", "\n", "\n", "self", ".", "_target_samplers", "[", "\n", "target_sampler_info", "[", "\"name\"", "]", "\n", "]", "=", "samplers", ".", "ObjectTargetSampler", "(", "\n", "# Add object set later", "\n", "[", "]", ",", "\n", "receptacle_info", ",", "\n", "(", "\n", "target_sampler_info", "[", "\"params\"", "]", "[", "\"num_samples\"", "]", "[", "0", "]", ",", "\n", "target_sampler_info", "[", "\"params\"", "]", "[", "\"num_samples\"", "]", "[", "1", "]", ",", "\n", ")", ",", "\n", "target_sampler_info", "[", "\"params\"", "]", "[", "\"orientation_sampling\"", "]", ",", "\n", "get_sample_region_ratios", "(", "target_sampler_info", ")", ",", "\n", "target_sampler_info", "[", "\"params\"", "]", ".", "get", "(", "\n", "\"nav_to_min_distance\"", ",", "-", "1.0", "\n", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "logger", ".", "info", "(", "\n", "f\"Requested target sampler '{target_sampler_info['type']}' is not implemented.\"", "\n", ")", "\n", "raise", "(", "NotImplementedError", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_generator.RearrangeEpisodeGenerator._get_scene_sampler": [[278, 309], ["habitat.SingleSceneSampler", "habitat.SingleSceneSampler", "sorted", "habitat.MultiSceneSampler", "habitat.MultiSceneSampler", "habitat.core.logging.logger.error", "habitat.core.logging.logger.error", "set"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.set"], ["", "", "", "def", "_get_scene_sampler", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Initialize the scene sampler.\n        \"\"\"", "\n", "self", ".", "_scene_sampler", ":", "Optional", "[", "samplers", ".", "SceneSampler", "]", "=", "None", "\n", "if", "self", ".", "cfg", ".", "scene_sampler", ".", "type", "==", "\"single\"", ":", "\n", "            ", "self", ".", "_scene_sampler", "=", "samplers", ".", "SingleSceneSampler", "(", "\n", "self", ".", "cfg", ".", "scene_sampler", ".", "params", ".", "scene", "\n", ")", "\n", "", "elif", "self", ".", "cfg", ".", "scene_sampler", ".", "type", "==", "\"subset\"", ":", "\n", "            ", "unified_scene_set", ":", "List", "[", "str", "]", "=", "[", "]", "\n", "# concatenate all requested scene sets", "\n", "for", "set_name", "in", "self", ".", "cfg", ".", "scene_sampler", ".", "params", ".", "scene_sets", ":", "\n", "                ", "if", "(", "\n", "self", ".", "_limit_scene_set", "is", "not", "None", "\n", "and", "set_name", "!=", "self", ".", "_limit_scene_set", "\n", ")", ":", "\n", "                    ", "continue", "\n", "", "assert", "(", "\n", "set_name", "in", "self", ".", "_scene_sets", "\n", ")", ",", "f\"'subset' SceneSampler requested scene_set name, '{set_name}', not found.\"", "\n", "unified_scene_set", "+=", "self", ".", "_scene_sets", "[", "set_name", "]", "\n", "\n", "# cull duplicates", "\n", "", "unified_scene_set", "=", "sorted", "(", "set", "(", "unified_scene_set", ")", ")", "\n", "self", ".", "_scene_sampler", "=", "samplers", ".", "MultiSceneSampler", "(", "unified_scene_set", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "error", "(", "\n", "f\"Requested scene sampler '{self.cfg.scene_sampler.type}' is not implemented.\"", "\n", ")", "\n", "raise", "(", "NotImplementedError", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_generator.RearrangeEpisodeGenerator._get_ao_state_samplers": [[310, 368], ["habitat.ArticulatedObjectStateSampler", "habitat.ArticulatedObjectStateSampler", "habitat.CompositeArticulatedObjectStateSampler", "habitat.CompositeArticulatedObjectStateSampler", "habitat.core.logging.logger.error", "habitat.core.logging.logger.error", "entry.get"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get"], ["", "", "def", "_get_ao_state_samplers", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Initialize and cache all ArticulatedObject state samplers from configuration.\n        \"\"\"", "\n", "self", ".", "_ao_state_samplers", ":", "Dict", "[", "\n", "str", ",", "samplers", ".", "ArticulatedObjectStateSampler", "\n", "]", "=", "{", "}", "\n", "for", "ao_info", "in", "self", ".", "cfg", ".", "ao_state_samplers", ":", "\n", "            ", "assert", "\"name\"", "in", "ao_info", "\n", "assert", "\"type\"", "in", "ao_info", "\n", "assert", "\"params\"", "in", "ao_info", "\n", "assert", "(", "\n", "ao_info", "[", "\"name\"", "]", "not", "in", "self", ".", "_ao_state_samplers", "\n", ")", ",", "f\"Duplicate AO state sampler name {ao_info['name']} in config.\"", "\n", "\n", "if", "ao_info", "[", "\"type\"", "]", "==", "\"uniform\"", ":", "\n", "                ", "self", ".", "_ao_state_samplers", "[", "\n", "ao_info", "[", "\"name\"", "]", "\n", "]", "=", "samplers", ".", "ArticulatedObjectStateSampler", "(", "\n", "ao_info", "[", "\"params\"", "]", "[", "0", "]", ",", "\n", "ao_info", "[", "\"params\"", "]", "[", "1", "]", ",", "\n", "(", "ao_info", "[", "\"params\"", "]", "[", "2", "]", ",", "ao_info", "[", "\"params\"", "]", "[", "3", "]", ")", ",", "\n", ")", "\n", "", "elif", "ao_info", "[", "\"type\"", "]", "==", "\"composite\"", ":", "\n", "                ", "composite_ao_sampler_params", ":", "Dict", "[", "\n", "str", ",", "Dict", "[", "str", ",", "Tuple", "[", "float", ",", "float", ",", "bool", "]", "]", "\n", "]", "=", "{", "}", "\n", "for", "entry", "in", "ao_info", "[", "\"params\"", "]", ":", "\n", "                    ", "ao_handle", "=", "entry", "[", "\"ao_handle\"", "]", "\n", "should_sample_all_joints", "=", "entry", ".", "get", "(", "\n", "\"should_sample_all_joints\"", ",", "False", "\n", ")", "\n", "link_sample_params", "=", "entry", "[", "\"joint_states\"", "]", "\n", "assert", "(", "\n", "ao_handle", "not", "in", "composite_ao_sampler_params", "\n", ")", ",", "f\"Duplicate handle '{ao_handle}' in composite AO sampler config.\"", "\n", "composite_ao_sampler_params", "[", "ao_handle", "]", "=", "{", "}", "\n", "for", "link_params", "in", "link_sample_params", ":", "\n", "                        ", "link_name", "=", "link_params", "[", "0", "]", "\n", "assert", "(", "\n", "link_name", "\n", "not", "in", "composite_ao_sampler_params", "[", "ao_handle", "]", "\n", ")", ",", "f\"Duplicate link name '{link_name}' for handle '{ao_handle} in composite AO sampler config.\"", "\n", "composite_ao_sampler_params", "[", "ao_handle", "]", "[", "link_name", "]", "=", "(", "\n", "link_params", "[", "1", "]", ",", "\n", "link_params", "[", "2", "]", ",", "\n", "should_sample_all_joints", ",", "\n", ")", "\n", "", "", "self", ".", "_ao_state_samplers", "[", "\n", "ao_info", "[", "\"name\"", "]", "\n", "]", "=", "samplers", ".", "CompositeArticulatedObjectStateSampler", "(", "\n", "composite_ao_sampler_params", "\n", ")", "\n", "", "else", ":", "\n", "                ", "logger", ".", "error", "(", "\n", "f\"Requested AO state sampler type '{ao_info['type']}' not implemented.\"", "\n", ")", "\n", "raise", "(", "NotImplementedError", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_generator.RearrangeEpisodeGenerator._reset_samplers": [[369, 377], ["rearrange_generator.RearrangeEpisodeGenerator._scene_sampler.reset", "rearrange_generator.RearrangeEpisodeGenerator._obj_samplers.values", "sampler.reset"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset"], ["", "", "", "def", "_reset_samplers", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Reset any sampler internal state related to a specific scene or episode.\n        \"\"\"", "\n", "self", ".", "ep_sampled_objects", "=", "[", "]", "\n", "self", ".", "_scene_sampler", ".", "reset", "(", ")", "\n", "for", "sampler", "in", "self", ".", "_obj_samplers", ".", "values", "(", ")", ":", "\n", "            ", "sampler", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_generator.RearrangeEpisodeGenerator.generate_scene": [[378, 388], ["rearrange_generator.RearrangeEpisodeGenerator._scene_sampler.sample", "habitat.core.logging.logger.info", "habitat.core.logging.logger.info", "rearrange_generator.RearrangeEpisodeGenerator.initialize_sim"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.sample", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_generator.RearrangeEpisodeGenerator.initialize_sim"], ["", "", "def", "generate_scene", "(", "self", ")", "->", "str", ":", "\n", "        ", "\"\"\"\n        Sample a new scene and re-initialize the Simulator.\n        Return the generated scene's handle.\n        \"\"\"", "\n", "cur_scene_name", "=", "self", ".", "_scene_sampler", ".", "sample", "(", ")", "\n", "logger", ".", "info", "(", "f\"Initializing scene {cur_scene_name}\"", ")", "\n", "self", ".", "initialize_sim", "(", "cur_scene_name", ",", "self", ".", "cfg", ".", "dataset_path", ")", "\n", "\n", "return", "cur_scene_name", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_generator.RearrangeEpisodeGenerator.visualize_scene_receptacles": [[389, 413], ["habitat.core.logging.logger.info", "habitat.core.logging.logger.info", "habitat.datasets.rearrange.receptacle.find_receptacles", "habitat.datasets.rearrange.receptacle.find_receptacles", "habitat.core.logging.logger.info", "habitat.core.logging.logger.info", "receptacle.add_receptacle_visualization", "rearrange_generator.RearrangeEpisodeGenerator.vdb.look_at", "rearrange_generator.RearrangeEpisodeGenerator.vdb.get_observation", "habitat.core.logging.logger.warning", "habitat.core.logging.logger.warning"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.receptacle.find_receptacles", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.receptacle.find_receptacles", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.receptacle.AABBReceptacle.add_receptacle_visualization", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.debug_visualizer.DebugVisualizer.look_at", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.BumpSensor.get_observation"], ["", "def", "visualize_scene_receptacles", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Generate a wireframe bounding box for each receptacle in the scene, aim the camera at it and record 1 observation.\n        \"\"\"", "\n", "logger", ".", "info", "(", "\"visualize_scene_receptacles processing\"", ")", "\n", "receptacles", "=", "find_receptacles", "(", "self", ".", "sim", ")", "\n", "for", "receptacle", "in", "receptacles", ":", "\n", "            ", "logger", ".", "info", "(", "\"receptacle processing\"", ")", "\n", "viz_objects", "=", "receptacle", ".", "add_receptacle_visualization", "(", "self", ".", "sim", ")", "\n", "\n", "# sample points in the receptacles to display", "\n", "# for sample in range(25):", "\n", "#     sample_point = receptacle.sample_uniform_global(self.sim, 1.0)", "\n", "#     sutils.add_viz_sphere(self.sim, 0.025, sample_point)", "\n", "\n", "if", "viz_objects", ":", "\n", "# point the camera at the 1st viz_object for the Receptacle", "\n", "                ", "self", ".", "vdb", ".", "look_at", "(", "\n", "viz_objects", "[", "0", "]", ".", "root_scene_node", ".", "absolute_translation", "\n", ")", "\n", "self", ".", "vdb", ".", "get_observation", "(", ")", "\n", "", "else", ":", "\n", "                ", "logger", ".", "warning", "(", "\n", "f\"visualize_scene_receptacles: no visualization object generated for Receptacle '{receptacle.name}'.\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_generator.RearrangeEpisodeGenerator.generate_episodes": [[415, 441], ["habitat.core.logging.logger.info", "habitat.core.logging.logger.info", "tqdm.tqdm.tqdm", "len", "rearrange_generator.RearrangeEpisodeGenerator.generate_single_episode", "generated_episodes.append", "tqdm.tqdm.tqdm.close", "tqdm.tqdm.tqdm.update"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_generator.RearrangeEpisodeGenerator.generate_single_episode", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.close", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.il.metrics.Metric.update"], ["", "", "", "def", "generate_episodes", "(", "\n", "self", ",", "num_episodes", ":", "int", "=", "1", ",", "verbose", ":", "bool", "=", "False", "\n", ")", "->", "List", "[", "RearrangeEpisode", "]", ":", "\n", "        ", "\"\"\"\n        Generate a fixed number of episodes.\n        \"\"\"", "\n", "generated_episodes", ":", "List", "[", "RearrangeEpisode", "]", "=", "[", "]", "\n", "failed_episodes", "=", "0", "\n", "if", "verbose", ":", "\n", "            ", "pbar", "=", "tqdm", "(", "total", "=", "num_episodes", ")", "\n", "", "while", "len", "(", "generated_episodes", ")", "<", "num_episodes", ":", "\n", "            ", "new_episode", "=", "self", ".", "generate_single_episode", "(", ")", "\n", "if", "new_episode", "is", "None", ":", "\n", "                ", "failed_episodes", "+=", "1", "\n", "continue", "\n", "", "generated_episodes", ".", "append", "(", "new_episode", ")", "\n", "if", "verbose", ":", "\n", "                ", "pbar", ".", "update", "(", "1", ")", "\n", "", "", "if", "verbose", ":", "\n", "            ", "pbar", ".", "close", "(", ")", "\n", "\n", "", "logger", ".", "info", "(", "\n", "f\"Generated {num_episodes} episodes in {num_episodes+failed_episodes} tries.\"", "\n", ")", "\n", "\n", "return", "generated_episodes", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_generator.RearrangeEpisodeGenerator.generate_single_episode": [[442, 672], ["rearrange_generator.RearrangeEpisodeGenerator._reset_samplers", "rearrange_generator.RearrangeEpisodeGenerator.generate_scene", "os.dirname", "os.dirname", "os.join", "os.join", "rearrange_generator.RearrangeEpisodeGenerator.sim.pathfinder.load_nav_mesh", "rearrange_generator.RearrangeEpisodeGenerator._get_object_target_samplers", "collections.defaultdict", "target_numbers.items", "zip", "rearrange_generator.RearrangeEpisodeGenerator._ao_state_samplers.items", "rearrange_generator.RearrangeEpisodeGenerator._obj_samplers.items", "zip", "rearrange_generator.RearrangeEpisodeGenerator._target_samplers.items", "habitat.datasets.rearrange.rearrange_dataset.RearrangeEpisode", "habitat.datasets.rearrange.rearrange_dataset.RearrangeEpisode", "os.dirname", "os.dirname", "rearrange_generator.RearrangeEpisodeGenerator.split", "target_receptacles[].extend", "all_target_receptacles.extend", "rearrange_generator.RearrangeEpisodeGenerator._target_samplers.values", "target_numbers.items", "all_goal_receptacles.extend", "ao_state_sampler.sample", "ao_state_sampler.sample.items", "rearrange_generator.RearrangeEpisodeGenerator.visualize_scene_receptacles", "rearrange_generator.RearrangeEpisodeGenerator.vdb.make_debug_video", "obj_sampler.sample", "zip", "zip", "habitat.core.logging.logger.info", "habitat.core.logging.logger.info", "rearrange_generator.RearrangeEpisodeGenerator.settle_sim", "habitat.core.logging.logger.warning", "habitat.core.logging.logger.warning", "rearrange_generator.RearrangeEpisodeGenerator._target_samplers.values", "target_sampler.sample", "enumerate", "sampled_rigid_object_states.append", "rearrange_generator.RearrangeEpisodeGenerator.generate_single_episode.extract_recep_info"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_generator.RearrangeEpisodeGenerator._reset_samplers", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_generator.RearrangeEpisodeGenerator.generate_scene", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_generator.RearrangeEpisodeGenerator._get_object_target_samplers", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.sample", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_generator.RearrangeEpisodeGenerator.visualize_scene_receptacles", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.debug_visualizer.DebugVisualizer.make_debug_video", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.sample", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_generator.RearrangeEpisodeGenerator.settle_sim", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.sample"], ["", "def", "generate_single_episode", "(", "self", ")", "->", "Optional", "[", "RearrangeEpisode", "]", ":", "\n", "        ", "\"\"\"\n        Generate a single episode, sampling the scene.\n        \"\"\"", "\n", "\n", "self", ".", "_reset_samplers", "(", ")", "\n", "self", ".", "episode_data", ":", "Dict", "[", "str", ",", "Dict", "[", "str", ",", "Any", "]", "]", "=", "{", "\n", "\"sampled_objects\"", ":", "{", "}", ",", "# object sampler name -> sampled object instances", "\n", "\"sampled_targets\"", ":", "{", "}", ",", "# target sampler name -> (object, target state)", "\n", "}", "\n", "\n", "ep_scene_handle", "=", "self", ".", "generate_scene", "(", ")", "\n", "scene_base_dir", "=", "osp", ".", "dirname", "(", "osp", ".", "dirname", "(", "ep_scene_handle", ")", ")", "\n", "\n", "scene_name", "=", "ep_scene_handle", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "navmesh_path", "=", "osp", ".", "join", "(", "\n", "scene_base_dir", ",", "\"navmeshes\"", ",", "scene_name", "+", "\".navmesh\"", "\n", ")", "\n", "self", ".", "sim", ".", "pathfinder", ".", "load_nav_mesh", "(", "navmesh_path", ")", "\n", "\n", "self", ".", "_get_object_target_samplers", "(", ")", "\n", "target_numbers", "=", "{", "\n", "k", ":", "sampler", ".", "target_objects_number", "\n", "for", "k", ",", "sampler", "in", "self", ".", "_target_samplers", ".", "items", "(", ")", "\n", "}", "\n", "targ_sampler_name_to_obj_sampler_names", "=", "{", "}", "\n", "for", "targ_sampler_cfg", "in", "self", ".", "cfg", ".", "object_target_samplers", ":", "\n", "            ", "sampler_name", "=", "targ_sampler_cfg", "[", "\"name\"", "]", "\n", "targ_sampler_name_to_obj_sampler_names", "[", "\n", "sampler_name", "\n", "]", "=", "targ_sampler_cfg", "[", "\"params\"", "]", "[", "\"object_samplers\"", "]", "\n", "\n", "", "target_receptacles", "=", "defaultdict", "(", "list", ")", "\n", "all_target_receptacles", "=", "[", "]", "\n", "for", "sampler_name", ",", "num_targets", "in", "target_numbers", ".", "items", "(", ")", ":", "\n", "            ", "obj_sampler_name", "=", "targ_sampler_name_to_obj_sampler_names", "[", "\n", "sampler_name", "\n", "]", "[", "0", "]", "\n", "sampler", "=", "self", ".", "_obj_samplers", "[", "obj_sampler_name", "]", "\n", "new_target_receptacles", "=", "[", "\n", "sampler", ".", "sample_receptacle", "(", "self", ".", "sim", ")", "for", "_", "in", "range", "(", "num_targets", ")", "\n", "]", "\n", "target_receptacles", "[", "obj_sampler_name", "]", ".", "extend", "(", "new_target_receptacles", ")", "\n", "all_target_receptacles", ".", "extend", "(", "new_target_receptacles", ")", "\n", "\n", "", "goal_receptacles", "=", "{", "}", "\n", "all_goal_receptacles", "=", "[", "]", "\n", "for", "sampler", ",", "(", "sampler_name", ",", "num_targets", ")", "in", "zip", "(", "\n", "self", ".", "_target_samplers", ".", "values", "(", ")", ",", "target_numbers", ".", "items", "(", ")", "\n", ")", ":", "\n", "            ", "new_goal_receptacles", "=", "[", "\n", "sampler", ".", "sample_receptacle", "(", "self", ".", "sim", ")", "for", "_", "in", "range", "(", "num_targets", ")", "\n", "]", "\n", "goal_receptacles", "[", "sampler_name", "]", "=", "new_goal_receptacles", "\n", "all_goal_receptacles", ".", "extend", "(", "new_goal_receptacles", ")", "\n", "\n", "# sample AO states for objects in the scene", "\n", "# ao_instance_handle -> [ (link_ix, state), ... ]", "\n", "", "ao_states", ":", "Dict", "[", "str", ",", "Dict", "[", "int", ",", "float", "]", "]", "=", "{", "}", "\n", "for", "_sampler_name", ",", "ao_state_sampler", "in", "self", ".", "_ao_state_samplers", ".", "items", "(", ")", ":", "\n", "            ", "sampler_states", "=", "ao_state_sampler", ".", "sample", "(", "\n", "self", ".", "sim", ",", "[", "*", "all_target_receptacles", ",", "*", "all_goal_receptacles", "]", "\n", ")", "\n", "if", "sampler_states", "is", "None", ":", "\n", "                ", "return", "None", "\n", "", "for", "sampled_instance", ",", "link_states", "in", "sampler_states", ".", "items", "(", ")", ":", "\n", "                ", "if", "sampled_instance", ".", "handle", "not", "in", "ao_states", ":", "\n", "                    ", "ao_states", "[", "sampled_instance", ".", "handle", "]", "=", "{", "}", "\n", "", "for", "link_ix", ",", "joint_state", "in", "link_states", ".", "items", "(", ")", ":", "\n", "                    ", "ao_states", "[", "sampled_instance", ".", "handle", "]", "[", "link_ix", "]", "=", "joint_state", "\n", "\n", "# visualize after setting AO states to correctly see scene state", "\n", "", "", "", "if", "self", ".", "_render_debug_obs", ":", "\n", "            ", "self", ".", "visualize_scene_receptacles", "(", ")", "\n", "self", ".", "vdb", ".", "make_debug_video", "(", "prefix", "=", "\"receptacles_\"", ")", "\n", "\n", "# sample object placements", "\n", "", "object_to_containing_receptacle", "=", "{", "}", "\n", "for", "sampler_name", ",", "obj_sampler", "in", "self", ".", "_obj_samplers", ".", "items", "(", ")", ":", "\n", "            ", "object_sample_data", "=", "obj_sampler", ".", "sample", "(", "\n", "self", ".", "sim", ",", "\n", "target_receptacles", "[", "sampler_name", "]", ",", "\n", "snap_down", "=", "True", ",", "\n", "vdb", "=", "(", "self", ".", "vdb", "if", "self", ".", "_render_debug_obs", "else", "None", ")", ",", "\n", ")", "\n", "if", "len", "(", "object_sample_data", ")", "==", "0", ":", "\n", "                ", "return", "None", "\n", "", "new_objects", ",", "receptacles", "=", "zip", "(", "*", "object_sample_data", ")", "\n", "for", "obj", ",", "rec", "in", "zip", "(", "new_objects", ",", "receptacles", ")", ":", "\n", "                ", "object_to_containing_receptacle", "[", "obj", ".", "handle", "]", "=", "rec", "\n", "", "if", "sampler_name", "not", "in", "self", ".", "episode_data", "[", "\"sampled_objects\"", "]", ":", "\n", "                ", "self", ".", "episode_data", "[", "\"sampled_objects\"", "]", "[", "\n", "sampler_name", "\n", "]", "=", "new_objects", "\n", "", "else", ":", "\n", "# handle duplicate sampler names", "\n", "                ", "self", ".", "episode_data", "[", "\"sampled_objects\"", "]", "[", "\n", "sampler_name", "\n", "]", "+=", "new_objects", "\n", "", "self", ".", "ep_sampled_objects", "+=", "new_objects", "\n", "logger", ".", "info", "(", "\n", "f\"Sampler {sampler_name} generated {len(new_objects)} new object placements.\"", "\n", ")", "\n", "# debug visualization showing each newly added object", "\n", "if", "self", ".", "_render_debug_obs", ":", "\n", "                ", "for", "new_object", "in", "new_objects", ":", "\n", "                    ", "self", ".", "vdb", ".", "look_at", "(", "new_object", ".", "translation", ")", "\n", "self", ".", "vdb", ".", "get_observation", "(", ")", "\n", "\n", "# simulate the world for a few seconds to validate the placements", "\n", "", "", "", "if", "not", "self", ".", "settle_sim", "(", ")", ":", "\n", "            ", "logger", ".", "warning", "(", "\n", "\"Aborting episode generation due to unstable state.\"", "\n", ")", "\n", "return", "None", "\n", "\n", "", "for", "sampler", ",", "target_sampler_info", "in", "zip", "(", "\n", "self", ".", "_target_samplers", ".", "values", "(", ")", ",", "self", ".", "cfg", ".", "object_target_samplers", "\n", ")", ":", "\n", "            ", "sampler", ".", "object_instance_set", "=", "[", "\n", "x", "\n", "for", "y", "in", "target_sampler_info", "[", "\"params\"", "]", "[", "\"object_samplers\"", "]", "\n", "for", "x", "in", "self", ".", "episode_data", "[", "\"sampled_objects\"", "]", "[", "y", "]", "\n", "]", "\n", "sampler", ".", "object_set", "=", "[", "\n", "x", ".", "creation_attributes", ".", "handle", "\n", "for", "x", "in", "sampler", ".", "object_instance_set", "\n", "]", "\n", "\n", "", "target_refs", ":", "Dict", "[", "str", ",", "str", "]", "=", "{", "}", "\n", "\n", "# sample targets", "\n", "for", "sampler_name", ",", "target_sampler", "in", "self", ".", "_target_samplers", ".", "items", "(", ")", ":", "\n", "            ", "obj_sampler_name", "=", "targ_sampler_name_to_obj_sampler_names", "[", "\n", "sampler_name", "\n", "]", "[", "0", "]", "\n", "new_target_objects", "=", "target_sampler", ".", "sample", "(", "\n", "self", ".", "sim", ",", "\n", "snap_down", "=", "True", ",", "\n", "vdb", "=", "self", ".", "vdb", ",", "\n", "target_receptacles", "=", "target_receptacles", "[", "obj_sampler_name", "]", ",", "\n", "goal_receptacles", "=", "goal_receptacles", "[", "sampler_name", "]", ",", "\n", "object_to_containing_receptacle", "=", "object_to_containing_receptacle", ",", "\n", ")", "\n", "if", "new_target_objects", "is", "None", ":", "\n", "                ", "return", "None", "\n", "\n", "# cache transforms and add visualizations", "\n", "", "for", "i", ",", "(", "instance_handle", ",", "value", ")", "in", "enumerate", "(", "\n", "new_target_objects", ".", "items", "(", ")", "\n", ")", ":", "\n", "                ", "target_object", ",", "target_receptacle", "=", "value", "\n", "target_receptacles", "[", "obj_sampler_name", "]", "[", "i", "]", "=", "target_receptacle", "\n", "assert", "(", "\n", "instance_handle", "not", "in", "self", ".", "episode_data", "[", "\"sampled_targets\"", "]", "\n", ")", ",", "f\"Duplicate target for instance '{instance_handle}'.\"", "\n", "rom", "=", "self", ".", "sim", ".", "get_rigid_object_manager", "(", ")", "\n", "target_bb_size", "=", "(", "\n", "target_object", ".", "root_scene_node", ".", "cumulative_bb", ".", "size", "(", ")", "\n", ")", "\n", "target_transform", "=", "target_object", ".", "transformation", "\n", "self", ".", "episode_data", "[", "\"sampled_targets\"", "]", "[", "\n", "instance_handle", "\n", "]", "=", "np", ".", "array", "(", "target_transform", ")", "\n", "target_refs", "[", "\n", "instance_handle", "\n", "]", "=", "f\"{sampler_name}|{len(target_refs)}\"", "\n", "rom", ".", "remove_object_by_handle", "(", "target_object", ".", "handle", ")", "\n", "if", "self", ".", "_render_debug_obs", ":", "\n", "                    ", "sutils", ".", "add_transformed_wire_box", "(", "\n", "self", ".", "sim", ",", "\n", "size", "=", "target_bb_size", "/", "2.0", ",", "\n", "transform", "=", "target_transform", ",", "\n", ")", "\n", "self", ".", "vdb", ".", "look_at", "(", "target_transform", ".", "translation", ")", "\n", "self", ".", "vdb", ".", "debug_line_render", ".", "set_line_width", "(", "2.0", ")", "\n", "self", ".", "vdb", ".", "debug_line_render", ".", "draw_transformed_line", "(", "\n", "target_transform", ".", "translation", ",", "\n", "rom", ".", "get_object_by_handle", "(", "instance_handle", ")", ".", "translation", ",", "\n", "mn", ".", "Color4", "(", "1.0", ",", "0.0", ",", "0.0", ",", "1.0", ")", ",", "\n", "mn", ".", "Color4", "(", "1.0", ",", "0.0", ",", "0.0", ",", "1.0", ")", ",", "\n", ")", "\n", "self", ".", "vdb", ".", "get_observation", "(", ")", "\n", "\n", "# collect final object states and serialize the episode", "\n", "# TODO: creating shortened names should be automated and embedded in the objects to be done in a uniform way", "\n", "", "", "", "sampled_rigid_object_states", "=", "[", "]", "\n", "for", "sampled_obj", "in", "self", ".", "ep_sampled_objects", ":", "\n", "            ", "creation_attrib", "=", "sampled_obj", ".", "creation_attributes", "\n", "file_handle", "=", "creation_attrib", ".", "handle", ".", "split", "(", "\n", "creation_attrib", ".", "file_directory", "\n", ")", "[", "-", "1", "]", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "sampled_rigid_object_states", ".", "append", "(", "\n", "(", "\n", "file_handle", ",", "\n", "np", ".", "array", "(", "sampled_obj", ".", "transformation", ")", ",", "\n", ")", "\n", ")", "\n", "\n", "", "self", ".", "num_ep_generated", "+=", "1", "\n", "\n", "def", "extract_recep_info", "(", "recep", ")", ":", "\n", "            ", "return", "(", "recep", ".", "parent_object_handle", ",", "recep", ".", "parent_link", ")", "\n", "\n", "", "save_target_receps", "=", "[", "\n", "extract_recep_info", "(", "x", ")", "for", "x", "in", "all_target_receptacles", "\n", "]", "\n", "save_goal_receps", "=", "[", "\n", "extract_recep_info", "(", "x", ")", "for", "x", "in", "all_goal_receptacles", "\n", "]", "\n", "\n", "return", "RearrangeEpisode", "(", "\n", "scene_dataset_config", "=", "self", ".", "cfg", ".", "dataset_path", ",", "\n", "additional_obj_config_paths", "=", "self", ".", "cfg", ".", "additional_object_paths", ",", "\n", "episode_id", "=", "str", "(", "self", ".", "num_ep_generated", "-", "1", ")", ",", "\n", "start_position", "=", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "start_rotation", "=", "[", "\n", "0", ",", "\n", "0", ",", "\n", "0", ",", "\n", "1", ",", "\n", "]", ",", "\n", "scene_id", "=", "ep_scene_handle", ",", "\n", "ao_states", "=", "ao_states", ",", "\n", "rigid_objs", "=", "sampled_rigid_object_states", ",", "\n", "targets", "=", "self", ".", "episode_data", "[", "\"sampled_targets\"", "]", ",", "\n", "target_receptacles", "=", "save_target_receps", ",", "\n", "goal_receptacles", "=", "save_goal_receps", ",", "\n", "markers", "=", "self", ".", "cfg", ".", "markers", ",", "\n", "info", "=", "{", "\"object_labels\"", ":", "target_refs", "}", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_generator.RearrangeEpisodeGenerator.initialize_sim": [[674, 744], ["habitat_sim.SimulatorConfiguration", "sensors.items", "habitat_sim.agent.AgentConfiguration", "habitat_sim.Configuration", "scene_bb.center", "habitat.sims.habitat_simulator.debug_visualizer.DebugVisualizer", "habitat.sims.habitat_simulator.debug_visualizer.DebugVisualizer", "habitat_sim.CameraSensorSpec", "sensor_specs.append", "habitat_sim.Simulator", "rearrange_generator.RearrangeEpisodeGenerator.sim.get_object_template_manager", "rearrange_generator.RearrangeEpisodeGenerator.sim.reconfigure", "rearrange_generator.RearrangeEpisodeGenerator.sim.get_active_scene_graph().get_root_node", "rearrange_generator.RearrangeEpisodeGenerator.load_configs", "habitat_sim.SimulatorConfiguration", "habitat_sim.Configuration", "rearrange_generator.RearrangeEpisodeGenerator.sim.reconfigure", "os.abspath", "os.abspath", "rearrange_generator.RearrangeEpisodeGenerator.sim.get_active_scene_graph"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env.reconfigure", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env.reconfigure"], ["", "def", "initialize_sim", "(", "self", ",", "scene_name", ":", "str", ",", "dataset_path", ":", "str", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Initialize a new Simulator object with a selected scene and dataset.\n        \"\"\"", "\n", "# Setup a camera coincident with the agent body node.", "\n", "# For debugging visualizations place the default agent where you want the camera with local -Z oriented toward the point of focus.", "\n", "camera_resolution", "=", "[", "540", ",", "720", "]", "\n", "sensors", "=", "{", "\n", "\"rgb\"", ":", "{", "\n", "\"sensor_type\"", ":", "habitat_sim", ".", "SensorType", ".", "COLOR", ",", "\n", "\"resolution\"", ":", "camera_resolution", ",", "\n", "\"position\"", ":", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "\"orientation\"", ":", "[", "0", ",", "0", ",", "0.0", "]", ",", "\n", "}", "\n", "}", "\n", "\n", "backend_cfg", "=", "habitat_sim", ".", "SimulatorConfiguration", "(", ")", "\n", "backend_cfg", ".", "scene_dataset_config_file", "=", "dataset_path", "\n", "backend_cfg", ".", "scene_id", "=", "scene_name", "\n", "backend_cfg", ".", "enable_physics", "=", "True", "\n", "if", "not", "self", ".", "_render_debug_obs", ":", "\n", "# don't bother loading textures if not intending to visualize the generation process", "\n", "            ", "backend_cfg", ".", "create_renderer", "=", "False", "\n", "\n", "", "sensor_specs", "=", "[", "]", "\n", "for", "sensor_uuid", ",", "sensor_params", "in", "sensors", ".", "items", "(", ")", ":", "\n", "# sensor_spec = habitat_sim.EquirectangularSensorSpec()", "\n", "            ", "sensor_spec", "=", "habitat_sim", ".", "CameraSensorSpec", "(", ")", "\n", "sensor_spec", ".", "uuid", "=", "sensor_uuid", "\n", "sensor_spec", ".", "sensor_type", "=", "sensor_params", "[", "\"sensor_type\"", "]", "\n", "sensor_spec", ".", "resolution", "=", "sensor_params", "[", "\"resolution\"", "]", "\n", "sensor_spec", ".", "position", "=", "sensor_params", "[", "\"position\"", "]", "\n", "sensor_spec", ".", "orientation", "=", "sensor_params", "[", "\"orientation\"", "]", "\n", "sensor_spec", ".", "sensor_subtype", "=", "(", "\n", "habitat_sim", ".", "SensorSubType", ".", "EQUIRECTANGULAR", "\n", ")", "\n", "sensor_spec", ".", "sensor_subtype", "=", "habitat_sim", ".", "SensorSubType", ".", "PINHOLE", "\n", "sensor_specs", ".", "append", "(", "sensor_spec", ")", "\n", "\n", "", "agent_cfg", "=", "habitat_sim", ".", "agent", ".", "AgentConfiguration", "(", ")", "\n", "agent_cfg", ".", "sensor_specifications", "=", "sensor_specs", "\n", "\n", "hab_cfg", "=", "habitat_sim", ".", "Configuration", "(", "backend_cfg", ",", "[", "agent_cfg", "]", ")", "\n", "if", "self", ".", "sim", "is", "None", ":", "\n", "            ", "self", ".", "sim", "=", "habitat_sim", ".", "Simulator", "(", "hab_cfg", ")", "\n", "\n", "object_attr_mgr", "=", "self", ".", "sim", ".", "get_object_template_manager", "(", ")", "\n", "for", "object_path", "in", "self", ".", "cfg", ".", "additional_object_paths", ":", "\n", "                ", "object_attr_mgr", ".", "load_configs", "(", "osp", ".", "abspath", "(", "object_path", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "sim", ".", "config", ".", "sim_cfg", ".", "scene_id", "==", "scene_name", ":", "\n", "# we need to force a reset, so reload the NONE scene", "\n", "# TODO: we should fix this to provide an appropriate reset method", "\n", "                ", "proxy_backend_cfg", "=", "habitat_sim", ".", "SimulatorConfiguration", "(", ")", "\n", "proxy_backend_cfg", ".", "scene_id", "=", "\"NONE\"", "\n", "proxy_hab_cfg", "=", "habitat_sim", ".", "Configuration", "(", "\n", "proxy_backend_cfg", ",", "[", "agent_cfg", "]", "\n", ")", "\n", "self", ".", "sim", ".", "reconfigure", "(", "proxy_hab_cfg", ")", "\n", "", "self", ".", "sim", ".", "reconfigure", "(", "hab_cfg", ")", "\n", "\n", "# setup the debug camera state to the center of the scene bounding box", "\n", "", "scene_bb", "=", "(", "\n", "self", ".", "sim", ".", "get_active_scene_graph", "(", ")", ".", "get_root_node", "(", ")", ".", "cumulative_bb", "\n", ")", "\n", "self", ".", "sim", ".", "agents", "[", "0", "]", ".", "scene_node", ".", "translation", "=", "scene_bb", ".", "center", "(", ")", "\n", "\n", "# initialize the debug visualizer", "\n", "self", ".", "vdb", "=", "DebugVisualizer", "(", "\n", "self", ".", "sim", ",", "output_path", "=", "\"rearrange_ep_gen_output/\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_generator.RearrangeEpisodeGenerator.settle_sim": [[746, 809], ["magnum.Vector3", "len", "habitat.core.logging.logger.info", "habitat.core.logging.logger.info", "habitat.core.logging.logger.info", "habitat.core.logging.logger.info", "habitat.core.logging.logger.info", "habitat.core.logging.logger.info", "len", "rearrange_generator.RearrangeEpisodeGenerator.sim.get_active_scene_graph().get_root_node", "rearrange_generator.RearrangeEpisodeGenerator.vdb.get_observation", "rearrange_generator.RearrangeEpisodeGenerator.sim.get_world_time", "rearrange_generator.RearrangeEpisodeGenerator.sim.step_world", "max", "rearrange_generator.RearrangeEpisodeGenerator.vdb.make_debug_video", "len", "rearrange_generator.RearrangeEpisodeGenerator.vdb.get_observation", "unstable_placements.append", "habitat.core.logging.logger.info", "habitat.core.logging.logger.info", "rearrange_generator.RearrangeEpisodeGenerator.sim.get_active_scene_graph", "scene_bb.center", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.BumpSensor.get_observation", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.debug_visualizer.DebugVisualizer.make_debug_video", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.BumpSensor.get_observation"], ["", "def", "settle_sim", "(", "\n", "self", ",", "duration", ":", "float", "=", "5.0", ",", "make_video", ":", "bool", "=", "True", "\n", ")", "->", "bool", ":", "\n", "        ", "\"\"\"\n        Run dynamics for a few seconds to check for stability of newly placed objects and optionally produce a video.\n        Returns whether or not the simulation was stable.\n        \"\"\"", "\n", "if", "len", "(", "self", ".", "ep_sampled_objects", ")", "==", "0", ":", "\n", "            ", "return", "True", "\n", "# assert len(self.ep_sampled_objects) > 0", "\n", "\n", "", "scene_bb", "=", "(", "\n", "self", ".", "sim", ".", "get_active_scene_graph", "(", ")", ".", "get_root_node", "(", ")", ".", "cumulative_bb", "\n", ")", "\n", "new_obj_centroid", "=", "mn", ".", "Vector3", "(", ")", "\n", "spawn_positions", "=", "{", "}", "\n", "for", "new_object", "in", "self", ".", "ep_sampled_objects", ":", "\n", "            ", "spawn_positions", "[", "new_object", ".", "handle", "]", "=", "new_object", ".", "translation", "\n", "new_obj_centroid", "+=", "new_object", ".", "translation", "\n", "", "new_obj_centroid", "/=", "len", "(", "self", ".", "ep_sampled_objects", ")", "\n", "settle_db_obs", ":", "List", "[", "Any", "]", "=", "[", "]", "\n", "if", "self", ".", "_render_debug_obs", ":", "\n", "            ", "self", ".", "vdb", ".", "get_observation", "(", "\n", "look_at", "=", "new_obj_centroid", ",", "\n", "look_from", "=", "scene_bb", ".", "center", "(", ")", ",", "\n", "obs_cache", "=", "settle_db_obs", ",", "\n", ")", "\n", "\n", "", "while", "self", ".", "sim", ".", "get_world_time", "(", ")", "<", "duration", ":", "\n", "            ", "self", ".", "sim", ".", "step_world", "(", "1.0", "/", "30.0", ")", "\n", "if", "self", ".", "_render_debug_obs", ":", "\n", "                ", "self", ".", "vdb", ".", "get_observation", "(", "obs_cache", "=", "settle_db_obs", ")", "\n", "\n", "# check stability of placements", "\n", "", "", "logger", ".", "info", "(", "\"Computing placement stability report:\"", ")", "\n", "max_settle_displacement", "=", "0", "\n", "error_eps", "=", "0.1", "\n", "unstable_placements", "=", "[", "]", "\n", "for", "new_object", "in", "self", ".", "ep_sampled_objects", ":", "\n", "            ", "error", "=", "(", "\n", "spawn_positions", "[", "new_object", ".", "handle", "]", "-", "new_object", ".", "translation", "\n", ")", ".", "length", "(", ")", "\n", "max_settle_displacement", "=", "max", "(", "max_settle_displacement", ",", "error", ")", "\n", "if", "error", ">", "error_eps", ":", "\n", "                ", "unstable_placements", ".", "append", "(", "new_object", ".", "handle", ")", "\n", "logger", ".", "info", "(", "\n", "f\"    Object '{new_object.handle}' unstable. Moved {error} units from placement.\"", "\n", ")", "\n", "", "", "logger", ".", "info", "(", "\n", "f\" : unstable={len(unstable_placements)}|{len(self.ep_sampled_objects)} ({len(unstable_placements)/len(self.ep_sampled_objects)*100}%) : {unstable_placements}.\"", "\n", ")", "\n", "logger", ".", "info", "(", "\n", "f\" : Maximum displacement from settling = {max_settle_displacement}\"", "\n", ")", "\n", "# TODO: maybe draw/display trajectory tubes for the displacements?", "\n", "\n", "if", "self", ".", "_render_debug_obs", "and", "make_video", ":", "\n", "            ", "self", ".", "vdb", ".", "make_debug_video", "(", "\n", "prefix", "=", "\"settle_\"", ",", "fps", "=", "30", ",", "obs_cache", "=", "settle_db_obs", "\n", ")", "\n", "\n", "# return success or failure", "\n", "", "return", "len", "(", "unstable_placements", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_generator.get_sample_region_ratios": [[34, 40], ["collections.defaultdict", "sample_region_ratios.update", "load_dict[].get"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.il.metrics.Metric.update", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get"], ["def", "get_sample_region_ratios", "(", "load_dict", ")", "->", "Dict", "[", "str", ",", "float", "]", ":", "\n", "    ", "sample_region_ratios", ":", "Dict", "[", "str", ",", "float", "]", "=", "defaultdict", "(", "lambda", ":", "1.0", ")", "\n", "sample_region_ratios", ".", "update", "(", "\n", "load_dict", "[", "\"params\"", "]", ".", "get", "(", "\"sample_region_ratio\"", ",", "{", "}", ")", "\n", ")", "\n", "return", "sample_region_ratios", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_generator.get_config_defaults": [[816, 972], ["yacs.config.CfgNode", "yacs.config.CfgNode", "yacs.config.CfgNode", "yacs.config.CfgNode.clone"], "function", ["None"], ["", "", "def", "get_config_defaults", "(", ")", "->", "CN", ":", "\n", "    ", "\"\"\"\n    Populates and resturns a default config for a RearrangeEpisode.\n    \"\"\"", "\n", "_C", "=", "CN", "(", ")", "\n", "\n", "# ----- import/initialization parameters ------", "\n", "# the scene dataset from which scenes and objects are sampled", "\n", "_C", ".", "dataset_path", "=", "\"data/replica_cad/replicaCAD.scene_dataset_config.json\"", "\n", "# any additional object assets to load before defining object sets", "\n", "_C", ".", "additional_object_paths", "=", "[", "\"data/objects/ycb/configs/\"", "]", "\n", "\n", "# ----- resource set definitions ------", "\n", "# Define the sets of scenes, objects, and receptacles which can be sampled from.", "\n", "# The SceneDataset will be searched for resources of each type with handles containing ANY \"included\" substrings and NO \"excluded\" substrings.", "\n", "\n", "# Define sets of scene instance handles which can be sampled from for initialization:", "\n", "_C", ".", "scene_sets", "=", "[", "\n", "{", "\n", "\"name\"", ":", "\"any\"", ",", "\n", "\"included_substrings\"", ":", "[", "\"\"", "]", ",", "\n", "\"excluded_substrings\"", ":", "[", "]", ",", "\n", "# NOTE: The \"comment\" key is intended for notes and descriptions and not consumed by the generator.", "\n", "\"comment\"", ":", "\"The empty substring acts like a wildcard, selecting all scenes.\"", ",", "\n", "}", ",", "\n", "]", "\n", "\n", "# Define the sets of object handles which can be sampled from for placement and target sampling:", "\n", "# NOTE: Each set must have a unique name.", "\n", "_C", ".", "object_sets", "=", "[", "\n", "{", "\n", "\"name\"", ":", "\"any\"", ",", "\n", "\"included_substrings\"", ":", "[", "\"\"", "]", ",", "\n", "\"excluded_substrings\"", ":", "[", "]", ",", "\n", "# NOTE: The \"comment\" key is intended for notes and descriptions and not consumed by the generator.", "\n", "\"comment\"", ":", "\"The empty substring acts like a wildcard, selecting all objects.\"", ",", "\n", "}", ",", "\n", "]", "\n", "\n", "# Define the sets of receptacles which can be sampled from for placing objects and targets:", "\n", "# The SceneDataset will be searched for objects containing receptacle metadata.", "\n", "# Receptacle name substrings are used to further constrain sets.", "\n", "# NOTE: Each set must have a unique name.", "\n", "_C", ".", "receptacle_sets", "=", "[", "\n", "{", "\n", "\"name\"", ":", "\"any\"", ",", "\n", "\"included_object_substrings\"", ":", "[", "\"\"", "]", ",", "\n", "\"excluded_object_substrings\"", ":", "[", "]", ",", "\n", "\"included_receptacle_substrings\"", ":", "[", "\"\"", "]", ",", "\n", "\"excluded_receptacle_substrings\"", ":", "[", "]", ",", "\n", "# NOTE: The \"comment\" key is intended for notes and descriptions and not consumed by the generator.", "\n", "\"comment\"", ":", "\"The empty substrings act like wildcards, selecting all receptacles for all objects.\"", ",", "\n", "}", ",", "\n", "]", "\n", "\n", "# ----- sampler definitions ------", "\n", "# Define the scene sampling configuration", "\n", "# NOTE: There must be exactly one scene sampler!", "\n", "# \"type\": str (\"single\" or \"subset\")", "\n", "# \"params\": {", "\n", "#   \"scene_sets\": [str] (if type \"subset\")", "\n", "#   \"scene\": str (if type \"single\")", "\n", "#  },", "\n", "# NOTE: \"single\" scene sampler asserts that only a single scene contains the \"scene\" name substring", "\n", "# NOTE: \"subset\" scene sampler allows sampling from multiple scene sets by name", "\n", "# TODO: This default is a bit ugly, but we must use ConfigNodes and define all options to directly nest dicts with yacs|yaml...", "\n", "_C", ".", "scene_sampler", "=", "CN", "(", ")", "\n", "_C", ".", "scene_sampler", ".", "type", "=", "\"single\"", "\n", "_C", ".", "scene_sampler", ".", "params", "=", "CN", "(", ")", "\n", "_C", ".", "scene_sampler", ".", "params", ".", "scene", "=", "\"v3_sc1_staging_00\"", "\n", "_C", ".", "scene_sampler", ".", "params", ".", "scene_sets", "=", "[", "]", "\n", "_C", ".", "scene_sampler", ".", "comment", "=", "\"\"", "\n", "\n", "# Define the object sampling configuration", "\n", "_C", ".", "object_samplers", "=", "[", "\n", "# {\"name\":str, \"type:str\", \"params\":{})", "\n", "# - uniform sampler params: {\"object_sets\":[str], \"receptacle_sets\":[str], \"num_samples\":[min, max], \"orientation_sampling\":str)", "\n", "# NOTE: \"orientation_sampling\" options: \"none\", \"up\", \"all\"", "\n", "# TODO: convert some special examples to yaml:", "\n", "# (", "\n", "#     \"fridge_middle\",", "\n", "#     \"uniform\",", "\n", "#     ([\"any\"], [\"fridge_middle\"], 1, 30, \"up\"),", "\n", "# ),", "\n", "# Composite object sampling (e.g. apple in bowl)", "\n", "#  - parameterized by object and receptacle sets, but inclusive of listed samplers BEFORE the composite sampler", "\n", "# Example: sample a basket placement on a table and then place apples in the basket", "\n", "# (\"basket_sampling\", \"uniform\", ([\"basket\"], [\"table\"], 1, 1, \"up\")),", "\n", "# (", "\n", "#     \"in_basket_sampling\",", "\n", "#     \"uniform\",", "\n", "#     ([\"apple\"], [\"basket\"], 1, 2, \"any\"),", "\n", "# ),", "\n", "# {", "\n", "#     \"name\": \"any_one\",", "\n", "#     \"type\": \"uniform\",", "\n", "#     \"params\": {", "\n", "#         \"object_sets\": [\"any\"],", "\n", "#         \"receptacle_sets\": [\"any\"],", "\n", "#         \"num_samples\": [1, 1],", "\n", "#         \"orientation_sampling\": \"up\",", "\n", "#     },", "\n", "#     \"comment\": \"Sample any one object from any receptacle.\",", "\n", "# }", "\n", "]", "\n", "\n", "# Define the desired object target sampling (i.e., where should an existing object be moved to)", "\n", "_C", ".", "object_target_samplers", "=", "[", "\n", "# {\"name\":str, \"type:str\", \"params\":{})", "\n", "# - uniform target sampler params:", "\n", "# {\"object_samplers\":[str], \"receptacle_sets\":[str], \"num_samples\":[min, max], \"orientation_sampling\":str)", "\n", "# NOTE: random instances are chosen from the specified, previously excecuted object sampler up to the maximum number specified in params.", "\n", "# NOTE: previous samplers referenced must have: combined minimum samples >= minimum requested targets", "\n", "# {", "\n", "#     \"name\": \"any_one_target\",", "\n", "#     \"type\": \"uniform\",", "\n", "#     \"params\": {", "\n", "#         \"object_samplers\": [\"any_one\"],", "\n", "#         \"receptacle_sets\": [\"any\"],", "\n", "#         \"num_samples\": [1, 1],", "\n", "#         \"orientation_sampling\": \"up\",", "\n", "#     },", "\n", "#     \"comment\": \"Sample a target for the object instanced by the 'any_one' object sampler from any receptacle.\",", "\n", "# }", "\n", "]", "\n", "\n", "# define ArticulatedObject(AO) joint state sampling (when a scene is initialized, all samplers are run for all matching AOs)", "\n", "_C", ".", "ao_state_samplers", "=", "[", "\n", "# TODO: the cupboard asset needs to be modified to remove self-collisions or have collision geometry not intersecting the wall.", "\n", "# TODO: does not support spherical joints (3 dof joints)", "\n", "# - uniform continuous range for a single joint. params: (\"ao_handle\", \"link name\", min, max)", "\n", "# Example:", "\n", "#     {\"name\": \"open_fridge_top_door\",", "\n", "#     \"type\": \"uniform\",", "\n", "#     \"params\": [\"fridge\", \"top_door\", 1.5, 1.5]}", "\n", "# - \"composite\" type sampler (rejection sampling of composite configuration)", "\n", "# params: [{\"ao_handle\":str, \"joint_states\":[[link name, min max], ], \"should_sample_all_joints:bool\"}, ]", "\n", "# If should_sample_all_joints is True (defaults to False) then all joints of an AO will be sampled and not just the one the target is in.", "\n", "# for example, should_sample_all_joints should be true for the fridge since the joints (the door) angle need to be sampled when the object", "\n", "# is inside. But for kitchen drawers, this should be false since the joints (all drawers) should not be sampled when the object is on the", "\n", "# countertop (only need to sample for the drawer the object is in)", "\n", "]", "\n", "\n", "# ----- marker definitions ------", "\n", "# A marker defines a point in the local space of a rigid object or articulated link which can be registered to instances in a scene and tracked", "\n", "# Format for each marker is a dict containing:", "\n", "# \"name\": str", "\n", "# \"type\": str (\"articulated_object\" or \"rigid_object\")", "\n", "# \"params\": {", "\n", "#   \"object\": str", "\n", "#   \"link\": str (if \"articulated_object\")", "\n", "#   \"offset\": vec3 []", "\n", "#  }", "\n", "_C", ".", "markers", "=", "[", "]", "\n", "\n", "return", "_C", ".", "clone", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.__init__._try_register_rearrangedatasetv0": [[18, 31], ["habitat.core.registry.registry.register_dataset"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry.register_dataset"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.generate_episode_inits.generate_inits": [[14, 24], ["habitat.get_config", "habitat.Env", "tqdm.tqdm", "range", "env.reset", "print"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset"], ["def", "generate_inits", "(", "cfg_path", ",", "opts", ")", ":", "\n", "    ", "config", "=", "habitat", ".", "get_config", "(", "cfg_path", ",", "opts", ")", "\n", "with", "habitat", ".", "Env", "(", "config", "=", "config", ")", "as", "env", ":", "\n", "        ", "for", "i", "in", "tqdm", "(", "range", "(", "env", ".", "number_of_episodes", ")", ")", ":", "\n", "            ", "if", "i", "%", "100", "==", "0", ":", "\n", "# Print the dataset we are generating initializations for. This", "\n", "# is useful when this script runs for a long time and we don't", "\n", "# know which dataset the job is for.", "\n", "                ", "print", "(", "cfg_path", ",", "config", ".", "DATASET", ".", "DATA_PATH", ")", "\n", "", "env", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.MultiObjSensor.__init__": [[29, 33], ["habitat.tasks.nav.nav.PointGoalSensor.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "task", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_task", "=", "task", "\n", "self", ".", "_sim", ":", "RearrangeSim", "\n", "super", "(", "MultiObjSensor", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "task", "=", "task", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.MultiObjSensor._get_observation_space": [[34, 41], ["rearrange_sensors.MultiObjSensor._task.get_n_targets", "gym.spaces.Box", "numpy.finfo", "numpy.finfo"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.get_n_targets"], ["", "def", "_get_observation_space", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "n_targets", "=", "self", ".", "_task", ".", "get_n_targets", "(", ")", "\n", "return", "spaces", ".", "Box", "(", "\n", "shape", "=", "(", "n_targets", "*", "3", ",", ")", ",", "\n", "low", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "min", ",", "\n", "high", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "max", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.TargetCurrentSensor._get_observation_space": [[52, 58], ["gym.spaces.Box", "numpy.finfo", "numpy.finfo"], "methods", ["None"], ["def", "_get_observation_space", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "spaces", ".", "Box", "(", "\n", "shape", "=", "(", "3", ",", ")", ",", "\n", "low", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "min", ",", "\n", "high", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "max", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.TargetCurrentSensor.get_observation": [[60, 72], ["rearrange_sensors.TargetCurrentSensor._sim.robot.ee_transform.inverted", "rearrange_sensors.TargetCurrentSensor._sim.get_targets", "rearrange_sensors.TargetCurrentSensor._sim.get_scene_pos", "range", "pos.reshape", "rearrange_sensors.TargetCurrentSensor.transform_point"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.get_targets", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.get_scene_pos"], ["", "def", "get_observation", "(", "self", ",", "observations", ",", "episode", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_sim", ":", "RearrangeSim", "\n", "T_inv", "=", "self", ".", "_sim", ".", "robot", ".", "ee_transform", ".", "inverted", "(", ")", "\n", "\n", "idxs", ",", "_", "=", "self", ".", "_sim", ".", "get_targets", "(", ")", "\n", "scene_pos", "=", "self", ".", "_sim", ".", "get_scene_pos", "(", ")", "\n", "pos", "=", "scene_pos", "[", "idxs", "]", "\n", "\n", "for", "i", "in", "range", "(", "pos", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "pos", "[", "i", "]", "=", "T_inv", ".", "transform_point", "(", "pos", "[", "i", "]", ")", "\n", "\n", "", "return", "pos", ".", "reshape", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.TargetStartSensor.get_observation": [[82, 88], ["global_T.inverted", "rearrange_sensors.TargetStartSensor._sim.get_target_objs_start", "habitat.tasks.rearrange.utils.batch_transform_point().reshape", "habitat.tasks.rearrange.utils.batch_transform_point"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.get_target_objs_start", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.batch_transform_point"], ["def", "get_observation", "(", "self", ",", "*", "args", ",", "observations", ",", "episode", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_sim", ":", "RearrangeSim", "\n", "global_T", "=", "self", ".", "_sim", ".", "robot", ".", "ee_transform", "\n", "T_inv", "=", "global_T", ".", "inverted", "(", ")", "\n", "pos", "=", "self", ".", "_sim", ".", "get_target_objs_start", "(", ")", "\n", "return", "batch_transform_point", "(", "pos", ",", "T_inv", ",", "np", ".", "float32", ")", ".", "reshape", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.PositionGpsCompassSensor.__init__": [[91, 95], ["habitat.core.simulator.Sensor.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "sim", ",", "task", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_task", "=", "task", "\n", "self", ".", "_sim", "=", "sim", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "task", "=", "task", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.PositionGpsCompassSensor._get_sensor_type": [[96, 98], ["None"], "methods", ["None"], ["", "def", "_get_sensor_type", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "SensorTypes", ".", "TENSOR", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.PositionGpsCompassSensor._get_observation_space": [[99, 107], ["rearrange_sensors.PositionGpsCompassSensor._task.get_n_targets", "numpy.zeros", "gym.spaces.Box", "numpy.finfo", "numpy.finfo"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.get_n_targets"], ["", "def", "_get_observation_space", "(", "self", ",", "*", "args", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "n_targets", "=", "self", ".", "_task", ".", "get_n_targets", "(", ")", "\n", "self", ".", "_polar_pos", "=", "np", ".", "zeros", "(", "n_targets", "*", "2", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "return", "spaces", ".", "Box", "(", "\n", "shape", "=", "(", "n_targets", "*", "2", ",", ")", ",", "\n", "low", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "min", ",", "\n", "high", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "max", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.PositionGpsCompassSensor._get_positions": [[109, 111], ["NotImplementedError"], "methods", ["None"], ["", "def", "_get_positions", "(", "self", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Must override _get_positions\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.PositionGpsCompassSensor.get_observation": [[112, 123], ["rearrange_sensors.PositionGpsCompassSensor._get_positions", "habitat.tasks.rearrange.utils.batch_transform_point", "enumerate", "robot_T.inverted", "habitat.tasks.utils.cartesian_to_polar"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.TargetGoalGpsCompassSensor._get_positions", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.batch_transform_point", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.tasks.utils.cartesian_to_polar"], ["", "def", "get_observation", "(", "self", ",", "task", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "pos", "=", "self", ".", "_get_positions", "(", ")", "\n", "robot_T", "=", "self", ".", "_sim", ".", "robot", ".", "base_transformation", "\n", "\n", "rel_pos", "=", "batch_transform_point", "(", "pos", ",", "robot_T", ".", "inverted", "(", ")", ",", "np", ".", "float32", ")", "\n", "\n", "for", "i", ",", "rel_obj_pos", "in", "enumerate", "(", "rel_pos", ")", ":", "\n", "            ", "rho", ",", "phi", "=", "cartesian_to_polar", "(", "rel_obj_pos", "[", "0", "]", ",", "rel_obj_pos", "[", "1", "]", ")", "\n", "self", ".", "_polar_pos", "[", "(", "i", "*", "2", ")", ":", "(", "i", "*", "2", ")", "+", "2", "]", "=", "[", "rho", ",", "-", "phi", "]", "\n", "\n", "", "return", "self", ".", "_polar_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.TargetStartGpsCompassSensor._get_uuid": [[129, 131], ["None"], "methods", ["None"], ["def", "_get_uuid", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "TargetStartGpsCompassSensor", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.TargetStartGpsCompassSensor._get_positions": [[132, 134], ["rearrange_sensors.TargetStartGpsCompassSensor._sim.get_target_objs_start"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.get_target_objs_start"], ["", "def", "_get_positions", "(", "self", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "return", "self", ".", "_sim", ".", "get_target_objs_start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.TargetGoalGpsCompassSensor._get_uuid": [[140, 142], ["None"], "methods", ["None"], ["def", "_get_uuid", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "TargetGoalGpsCompassSensor", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.TargetGoalGpsCompassSensor._get_positions": [[143, 146], ["rearrange_sensors.TargetGoalGpsCompassSensor._sim.get_targets"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.get_targets"], ["", "def", "_get_positions", "(", "self", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "_", ",", "pos", "=", "self", ".", "_sim", ".", "get_targets", "(", ")", "\n", "return", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.AbsTargetStartSensor.get_observation": [[156, 159], ["rearrange_sensors.AbsTargetStartSensor._sim.get_target_objs_start", "rearrange_sensors.AbsTargetStartSensor.reshape"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.get_target_objs_start"], ["def", "get_observation", "(", "self", ",", "observations", ",", "episode", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "pos", "=", "self", ".", "_sim", ".", "get_target_objs_start", "(", ")", "\n", "return", "pos", ".", "reshape", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.GoalSensor.get_observation": [[169, 175], ["global_T.inverted", "rearrange_sensors.GoalSensor._sim.get_targets", "habitat.tasks.rearrange.utils.batch_transform_point().reshape", "habitat.tasks.rearrange.utils.batch_transform_point"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.get_targets", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.batch_transform_point"], ["def", "get_observation", "(", "self", ",", "observations", ",", "episode", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "global_T", "=", "self", ".", "_sim", ".", "robot", ".", "ee_transform", "\n", "T_inv", "=", "global_T", ".", "inverted", "(", ")", "\n", "\n", "_", ",", "pos", "=", "self", ".", "_sim", ".", "get_targets", "(", ")", "\n", "return", "batch_transform_point", "(", "pos", ",", "T_inv", ",", "np", ".", "float32", ")", ".", "reshape", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.AbsGoalSensor.get_observation": [[181, 184], ["rearrange_sensors.AbsGoalSensor._sim.get_targets", "pos.reshape"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.get_targets"], ["def", "get_observation", "(", "self", ",", "*", "args", ",", "observations", ",", "episode", ",", "**", "kwargs", ")", ":", "\n", "        ", "_", ",", "pos", "=", "self", ".", "_sim", ".", "get_targets", "(", ")", "\n", "return", "pos", ".", "reshape", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.JointSensor.__init__": [[188, 191], ["habitat.core.simulator.Sensor.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "sim", ",", "config", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", "=", "config", ")", "\n", "self", ".", "_sim", "=", "sim", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.JointSensor._get_uuid": [[192, 194], ["None"], "methods", ["None"], ["", "def", "_get_uuid", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "\"joint\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.JointSensor._get_sensor_type": [[195, 197], ["None"], "methods", ["None"], ["", "def", "_get_sensor_type", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "SensorTypes", ".", "TENSOR", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.JointSensor._get_observation_space": [[198, 204], ["gym.spaces.Box", "numpy.finfo", "numpy.finfo"], "methods", ["None"], ["", "def", "_get_observation_space", "(", "self", ",", "*", "args", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "spaces", ".", "Box", "(", "\n", "shape", "=", "(", "config", ".", "DIMENSIONALITY", ",", ")", ",", "\n", "low", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "min", ",", "\n", "high", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "max", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.JointSensor.get_observation": [[206, 209], ["numpy.array"], "methods", ["None"], ["", "def", "get_observation", "(", "self", ",", "observations", ",", "episode", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "joints_pos", "=", "self", ".", "_sim", ".", "robot", ".", "arm_joint_pos", "\n", "return", "np", ".", "array", "(", "joints_pos", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.JointVelocitySensor.__init__": [[213, 216], ["habitat.core.simulator.Sensor.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "sim", ",", "config", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", "=", "config", ")", "\n", "self", ".", "_sim", "=", "sim", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.JointVelocitySensor._get_uuid": [[217, 219], ["None"], "methods", ["None"], ["", "def", "_get_uuid", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "\"joint_vel\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.JointVelocitySensor._get_sensor_type": [[220, 222], ["None"], "methods", ["None"], ["", "def", "_get_sensor_type", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "SensorTypes", ".", "TENSOR", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.JointVelocitySensor._get_observation_space": [[223, 229], ["gym.spaces.Box", "numpy.finfo", "numpy.finfo"], "methods", ["None"], ["", "def", "_get_observation_space", "(", "self", ",", "*", "args", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "spaces", ".", "Box", "(", "\n", "shape", "=", "(", "config", ".", "DIMENSIONALITY", ",", ")", ",", "\n", "low", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "min", ",", "\n", "high", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "max", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.JointVelocitySensor.get_observation": [[231, 234], ["numpy.array"], "methods", ["None"], ["", "def", "get_observation", "(", "self", ",", "observations", ",", "episode", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "joints_pos", "=", "self", ".", "_sim", ".", "robot", ".", "arm_velocity", "\n", "return", "np", ".", "array", "(", "joints_pos", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.EEPositionSensor.__init__": [[240, 243], ["habitat.core.simulator.Sensor.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "sim", ",", "config", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", "=", "config", ")", "\n", "self", ".", "_sim", "=", "sim", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.EEPositionSensor._get_uuid": [[244, 247], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_get_uuid", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "EEPositionSensor", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.EEPositionSensor._get_sensor_type": [[248, 250], ["None"], "methods", ["None"], ["", "def", "_get_sensor_type", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "SensorTypes", ".", "TENSOR", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.EEPositionSensor._get_observation_space": [[251, 257], ["gym.spaces.Box", "numpy.finfo", "numpy.finfo"], "methods", ["None"], ["", "def", "_get_observation_space", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "spaces", ".", "Box", "(", "\n", "shape", "=", "(", "3", ",", ")", ",", "\n", "low", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "min", ",", "\n", "high", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "max", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.EEPositionSensor.get_observation": [[259, 265], ["trans.inverted().transform_point", "numpy.array", "trans.inverted"], "methods", ["None"], ["", "def", "get_observation", "(", "self", ",", "observations", ",", "episode", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "trans", "=", "self", ".", "_sim", ".", "robot", ".", "base_transformation", "\n", "ee_pos", "=", "self", ".", "_sim", ".", "robot", ".", "ee_transform", ".", "translation", "\n", "local_ee_pos", "=", "trans", ".", "inverted", "(", ")", ".", "transform_point", "(", "ee_pos", ")", "\n", "\n", "return", "np", ".", "array", "(", "local_ee_pos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.RelativeRestingPositionSensor._get_uuid": [[271, 273], ["None"], "methods", ["None"], ["def", "_get_uuid", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "RelativeRestingPositionSensor", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.RelativeRestingPositionSensor.__init__": [[274, 277], ["habitat.core.simulator.Sensor.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["", "def", "__init__", "(", "self", ",", "sim", ",", "config", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", "=", "config", ")", "\n", "self", ".", "_sim", "=", "sim", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.RelativeRestingPositionSensor._get_sensor_type": [[278, 280], ["None"], "methods", ["None"], ["", "def", "_get_sensor_type", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "SensorTypes", ".", "TENSOR", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.RelativeRestingPositionSensor._get_observation_space": [[281, 287], ["gym.spaces.Box", "numpy.finfo", "numpy.finfo"], "methods", ["None"], ["", "def", "_get_observation_space", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "spaces", ".", "Box", "(", "\n", "shape", "=", "(", "3", ",", ")", ",", "\n", "low", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "min", ",", "\n", "high", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "max", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.RelativeRestingPositionSensor.get_observation": [[289, 297], ["base_trans.inverted().transform_point", "numpy.array", "base_trans.inverted"], "methods", ["None"], ["", "def", "get_observation", "(", "self", ",", "observations", ",", "episode", ",", "task", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "base_trans", "=", "self", ".", "_sim", ".", "robot", ".", "base_transformation", "\n", "ee_pos", "=", "self", ".", "_sim", ".", "robot", ".", "ee_transform", ".", "translation", "\n", "local_ee_pos", "=", "base_trans", ".", "inverted", "(", ")", ".", "transform_point", "(", "ee_pos", ")", "\n", "\n", "relative_desired_resting", "=", "task", ".", "desired_resting", "-", "local_ee_pos", "\n", "\n", "return", "np", ".", "array", "(", "relative_desired_resting", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.RestingPositionSensor._get_uuid": [[307, 309], ["None"], "methods", ["None"], ["def", "_get_uuid", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "RestingPositionSensor", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.RestingPositionSensor.__init__": [[310, 313], ["habitat.core.simulator.Sensor.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["", "def", "__init__", "(", "self", ",", "sim", ",", "config", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", "=", "config", ")", "\n", "self", ".", "_sim", "=", "sim", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.RestingPositionSensor._get_sensor_type": [[314, 316], ["None"], "methods", ["None"], ["", "def", "_get_sensor_type", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "SensorTypes", ".", "TENSOR", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.RestingPositionSensor._get_observation_space": [[317, 323], ["gym.spaces.Box", "numpy.finfo", "numpy.finfo"], "methods", ["None"], ["", "def", "_get_observation_space", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "spaces", ".", "Box", "(", "\n", "shape", "=", "(", "3", ",", ")", ",", "\n", "low", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "min", ",", "\n", "high", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "max", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.RestingPositionSensor.get_observation": [[325, 327], ["numpy.array"], "methods", ["None"], ["", "def", "get_observation", "(", "self", ",", "observations", ",", "episode", ",", "task", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "task", ".", "desired_resting", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.LocalizationSensor.__init__": [[333, 336], ["habitat.core.simulator.Sensor.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "sim", ",", "config", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", "=", "config", ")", "\n", "self", ".", "_sim", "=", "sim", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.LocalizationSensor._get_uuid": [[337, 339], ["None"], "methods", ["None"], ["", "def", "_get_uuid", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "LocalizationSensor", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.LocalizationSensor._get_sensor_type": [[340, 342], ["None"], "methods", ["None"], ["", "def", "_get_sensor_type", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "SensorTypes", ".", "TENSOR", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.LocalizationSensor._get_observation_space": [[343, 349], ["gym.spaces.Box", "numpy.finfo", "numpy.finfo"], "methods", ["None"], ["", "def", "_get_observation_space", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "spaces", ".", "Box", "(", "\n", "shape", "=", "(", "4", ",", ")", ",", "\n", "low", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "min", ",", "\n", "high", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "max", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.LocalizationSensor.get_observation": [[351, 363], ["numpy.array", "numpy.array", "habitat.tasks.utils.get_angle", "numpy.array", "T.transform_vector", "numpy.cross"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.tasks.utils.get_angle"], ["", "def", "get_observation", "(", "self", ",", "observations", ",", "episode", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "T", "=", "self", ".", "_sim", ".", "robot", ".", "base_transformation", "\n", "forward", "=", "np", ".", "array", "(", "[", "1.0", ",", "0", ",", "0", "]", ")", "\n", "heading", "=", "np", ".", "array", "(", "T", ".", "transform_vector", "(", "forward", ")", ")", "\n", "forward", "=", "forward", "[", "[", "0", ",", "2", "]", "]", "\n", "heading", "=", "heading", "[", "[", "0", ",", "2", "]", "]", "\n", "\n", "heading_angle", "=", "get_angle", "(", "forward", ",", "heading", ")", "\n", "c", "=", "np", ".", "cross", "(", "forward", ",", "heading", ")", "<", "0", "\n", "if", "not", "c", ":", "\n", "            ", "heading_angle", "=", "-", "1.0", "*", "heading_angle", "\n", "", "return", "np", ".", "array", "(", "[", "*", "T", ".", "translation", ",", "heading_angle", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.IsHoldingSensor.__init__": [[373, 376], ["habitat.core.simulator.Sensor.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "sim", ",", "config", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", "=", "config", ")", "\n", "self", ".", "_sim", "=", "sim", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.IsHoldingSensor._get_uuid": [[377, 379], ["None"], "methods", ["None"], ["", "def", "_get_uuid", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "IsHoldingSensor", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.IsHoldingSensor._get_sensor_type": [[380, 382], ["None"], "methods", ["None"], ["", "def", "_get_sensor_type", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "SensorTypes", ".", "TENSOR", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.IsHoldingSensor._get_observation_space": [[383, 385], ["gym.spaces.Box"], "methods", ["None"], ["", "def", "_get_observation_space", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "spaces", ".", "Box", "(", "shape", "=", "(", "1", ",", ")", ",", "low", "=", "0", ",", "high", "=", "1", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.IsHoldingSensor.get_observation": [[386, 388], ["numpy.array().reshape", "numpy.array", "int"], "methods", ["None"], ["", "def", "get_observation", "(", "self", ",", "observations", ",", "episode", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "int", "(", "self", ".", "_sim", ".", "grasp_mgr", ".", "is_grasped", ")", ")", ".", "reshape", "(", "(", "1", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.ObjectToGoalDistance.__init__": [[398, 402], ["habitat.core.embodied_task.Measure.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "sim", ",", "config", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_sim", "=", "sim", "\n", "self", ".", "_config", "=", "config", "\n", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.ObjectToGoalDistance._get_uuid": [[403, 406], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_get_uuid", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "ObjectToGoalDistance", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.ObjectToGoalDistance.reset_metric": [[407, 409], ["rearrange_sensors.ObjectToGoalDistance.update_metric"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.update_metric"], ["", "def", "reset_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "update_metric", "(", "*", "args", ",", "episode", "=", "episode", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.ObjectToGoalDistance.update_metric": [[410, 416], ["rearrange_sensors.ObjectToGoalDistance._sim.get_targets", "rearrange_sensors.ObjectToGoalDistance._sim.get_scene_pos", "numpy.linalg.norm", "str", "zip"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.get_targets", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.get_scene_pos"], ["", "def", "update_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "**", "kwargs", ")", ":", "\n", "        ", "idxs", ",", "goal_pos", "=", "self", ".", "_sim", ".", "get_targets", "(", ")", "\n", "scene_pos", "=", "self", ".", "_sim", ".", "get_scene_pos", "(", ")", "\n", "target_pos", "=", "scene_pos", "[", "idxs", "]", "\n", "distances", "=", "np", ".", "linalg", ".", "norm", "(", "target_pos", "-", "goal_pos", ",", "ord", "=", "2", ",", "axis", "=", "-", "1", ")", "\n", "self", ".", "_metric", "=", "{", "str", "(", "idx", ")", ":", "dist", "for", "idx", ",", "dist", "in", "zip", "(", "idxs", ",", "distances", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.ObjAtGoal.__init__": [[427, 430], ["habitat.core.embodied_task.Measure.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "sim", ",", "config", ",", "task", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_config", "=", "config", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "sim", "=", "sim", ",", "config", "=", "config", ",", "task", "=", "task", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.ObjAtGoal._get_uuid": [[431, 434], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_get_uuid", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "ObjAtGoal", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.ObjAtGoal.reset_metric": [[435, 448], ["task.measurements.check_measure_dependencies", "rearrange_sensors.ObjAtGoal.update_metric"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measurements.check_measure_dependencies", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.update_metric"], ["", "def", "reset_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "task", ".", "measurements", ".", "check_measure_dependencies", "(", "\n", "self", ".", "uuid", ",", "\n", "[", "\n", "ObjectToGoalDistance", ".", "cls_uuid", ",", "\n", "]", ",", "\n", ")", "\n", "self", ".", "update_metric", "(", "\n", "*", "args", ",", "\n", "episode", "=", "episode", ",", "\n", "task", "=", "task", ",", "\n", "observations", "=", "observations", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.ObjAtGoal.update_metric": [[450, 458], ["task.measurements.measures[].get_metric", "str", "task.measurements.measures[].get_metric.items"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.get_metric"], ["", "def", "update_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "obj_to_goal_dists", "=", "task", ".", "measurements", ".", "measures", "[", "\n", "ObjectToGoalDistance", ".", "cls_uuid", "\n", "]", ".", "get_metric", "(", ")", "\n", "\n", "self", ".", "_metric", "=", "{", "\n", "str", "(", "idx", ")", ":", "dist", "<", "self", ".", "_config", ".", "SUCC_THRESH", "\n", "for", "idx", ",", "dist", "in", "obj_to_goal_dists", ".", "items", "(", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.EndEffectorToObjectDistance.__init__": [[469, 473], ["habitat.core.embodied_task.Measure.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "sim", ",", "config", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_sim", "=", "sim", "\n", "self", ".", "_config", "=", "config", "\n", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.EndEffectorToObjectDistance._get_uuid": [[474, 477], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_get_uuid", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "EndEffectorToObjectDistance", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.EndEffectorToObjectDistance.reset_metric": [[478, 480], ["rearrange_sensors.EndEffectorToObjectDistance.update_metric"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.update_metric"], ["", "def", "reset_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "update_metric", "(", "*", "args", ",", "episode", "=", "episode", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.EndEffectorToObjectDistance.update_metric": [[481, 491], ["rearrange_sensors.EndEffectorToObjectDistance._sim.get_targets", "rearrange_sensors.EndEffectorToObjectDistance._sim.get_scene_pos", "numpy.linalg.norm", "str", "zip"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.get_targets", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.get_scene_pos"], ["", "def", "update_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "**", "kwargs", ")", ":", "\n", "        ", "ee_pos", "=", "self", ".", "_sim", ".", "robot", ".", "ee_transform", ".", "translation", "\n", "\n", "idxs", ",", "_", "=", "self", ".", "_sim", ".", "get_targets", "(", ")", "\n", "scene_pos", "=", "self", ".", "_sim", ".", "get_scene_pos", "(", ")", "\n", "target_pos", "=", "scene_pos", "[", "idxs", "]", "\n", "\n", "distances", "=", "np", ".", "linalg", ".", "norm", "(", "target_pos", "-", "ee_pos", ",", "ord", "=", "2", ",", "axis", "=", "-", "1", ")", "\n", "\n", "self", ".", "_metric", "=", "{", "str", "(", "idx", ")", ":", "dist", "for", "idx", ",", "dist", "in", "zip", "(", "idxs", ",", "distances", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.EndEffectorToRestDistance.__init__": [[501, 505], ["habitat.core.embodied_task.Measure.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "sim", ",", "config", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_sim", "=", "sim", "\n", "self", ".", "_config", "=", "config", "\n", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.EndEffectorToRestDistance._get_uuid": [[506, 509], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_get_uuid", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "EndEffectorToRestDistance", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.EndEffectorToRestDistance.reset_metric": [[510, 512], ["rearrange_sensors.EndEffectorToRestDistance.update_metric"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.update_metric"], ["", "def", "reset_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "update_metric", "(", "*", "args", ",", "episode", "=", "episode", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.EndEffectorToRestDistance.update_metric": [[513, 518], ["numpy.linalg.norm"], "methods", ["None"], ["", "def", "update_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "to_resting", "=", "observations", "[", "RelativeRestingPositionSensor", ".", "cls_uuid", "]", "\n", "rest_dist", "=", "np", ".", "linalg", ".", "norm", "(", "to_resting", ")", "\n", "\n", "self", ".", "_metric", "=", "rest_dist", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.ReturnToRestDistance.__init__": [[528, 532], ["habitat.core.embodied_task.Measure.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "sim", ",", "config", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_sim", "=", "sim", "\n", "self", ".", "_config", "=", "config", "\n", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.ReturnToRestDistance._get_uuid": [[533, 536], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_get_uuid", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "ReturnToRestDistance", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.ReturnToRestDistance.reset_metric": [[537, 539], ["rearrange_sensors.ReturnToRestDistance.update_metric"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.update_metric"], ["", "def", "reset_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "update_metric", "(", "*", "args", ",", "episode", "=", "episode", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.ReturnToRestDistance.update_metric": [[540, 558], ["numpy.linalg.norm", "rearrange_sensors.ReturnToRestDistance._sim.robot.ee_transform.inverted", "rearrange_sensors.ReturnToRestDistance._sim.get_targets", "rearrange_sensors.ReturnToRestDistance._sim.get_scene_pos", "rearrange_sensors.ReturnToRestDistance.transform_point", "numpy.linalg.norm"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.get_targets", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.get_scene_pos"], ["", "def", "update_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "to_resting", "=", "observations", "[", "RelativeRestingPositionSensor", ".", "cls_uuid", "]", "\n", "rest_dist", "=", "np", ".", "linalg", ".", "norm", "(", "to_resting", ")", "\n", "\n", "snapped_id", "=", "self", ".", "_sim", ".", "grasp_mgr", ".", "snap_idx", "\n", "abs_targ_obj_idx", "=", "self", ".", "_sim", ".", "scene_obj_ids", "[", "task", ".", "abs_targ_idx", "]", "\n", "picked_correct", "=", "snapped_id", "==", "abs_targ_obj_idx", "\n", "\n", "if", "picked_correct", ":", "\n", "            ", "self", ".", "_metric", "=", "rest_dist", "\n", "", "else", ":", "\n", "            ", "T_inv", "=", "self", ".", "_sim", ".", "robot", ".", "ee_transform", ".", "inverted", "(", ")", "\n", "idxs", ",", "_", "=", "self", ".", "_sim", ".", "get_targets", "(", ")", "\n", "scene_pos", "=", "self", ".", "_sim", ".", "get_scene_pos", "(", ")", "\n", "pos", "=", "scene_pos", "[", "idxs", "]", "[", "0", "]", "\n", "pos", "=", "T_inv", ".", "transform_point", "(", "pos", ")", "\n", "\n", "self", ".", "_metric", "=", "np", ".", "linalg", ".", "norm", "(", "task", ".", "desired_resting", "-", "pos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.RobotCollisions.__init__": [[568, 573], ["habitat.core.embodied_task.Measure.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "sim", ",", "config", ",", "task", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_sim", "=", "sim", "\n", "self", ".", "_config", "=", "config", "\n", "self", ".", "_task", "=", "task", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "sim", "=", "sim", ",", "config", "=", "config", ",", "task", "=", "task", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.RobotCollisions._get_uuid": [[574, 577], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_get_uuid", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "RobotCollisions", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.RobotCollisions.reset_metric": [[578, 586], ["habitat.tasks.rearrange.utils.CollisionDetails", "rearrange_sensors.RobotCollisions.update_metric"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.update_metric"], ["", "def", "reset_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_accum_coll_info", "=", "CollisionDetails", "(", ")", "\n", "self", ".", "update_metric", "(", "\n", "*", "args", ",", "\n", "episode", "=", "episode", ",", "\n", "task", "=", "task", ",", "\n", "observations", "=", "observations", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.RobotCollisions.update_metric": [[588, 596], ["rearrange_sensors.RobotCollisions._task.get_cur_collision_info"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_task.RearrangeTask.get_cur_collision_info"], ["", "def", "update_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "cur_coll_info", "=", "self", ".", "_task", ".", "get_cur_collision_info", "(", ")", "\n", "self", ".", "_accum_coll_info", "+=", "cur_coll_info", "\n", "self", ".", "_metric", "=", "{", "\n", "\"total_collisions\"", ":", "self", ".", "_accum_coll_info", ".", "total_collisions", ",", "\n", "\"robot_obj_colls\"", ":", "self", ".", "_accum_coll_info", ".", "robot_obj_colls", ",", "\n", "\"robot_scene_colls\"", ":", "self", ".", "_accum_coll_info", ".", "robot_scene_colls", ",", "\n", "\"obj_scene_colls\"", ":", "self", ".", "_accum_coll_info", ".", "obj_scene_colls", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.RobotForce.__init__": [[607, 612], ["habitat.core.embodied_task.Measure.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "sim", ",", "config", ",", "task", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_sim", "=", "sim", "\n", "self", ".", "_config", "=", "config", "\n", "self", ".", "_task", "=", "task", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "sim", "=", "sim", ",", "config", "=", "config", ",", "task", "=", "task", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.RobotForce._get_uuid": [[613, 616], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_get_uuid", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "RobotForce", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.RobotForce.reset_metric": [[617, 628], ["rearrange_sensors.RobotForce.update_metric"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.update_metric"], ["", "def", "reset_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_accum_force", "=", "0.0", "\n", "self", ".", "_prev_force", "=", "None", "\n", "self", ".", "_cur_force", "=", "None", "\n", "self", ".", "_add_force", "=", "None", "\n", "self", ".", "update_metric", "(", "\n", "*", "args", ",", "\n", "episode", "=", "episode", ",", "\n", "task", "=", "task", ",", "\n", "observations", "=", "observations", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.RobotForce.add_force": [[630, 633], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "add_force", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_add_force", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.RobotForce.update_metric": [[634, 655], ["rearrange_sensors.RobotForce._task.get_coll_forces"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_task.RearrangeTask.get_coll_forces"], ["", "def", "update_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "robot_force", ",", "_", ",", "overall_force", "=", "self", ".", "_task", ".", "get_coll_forces", "(", ")", "\n", "if", "self", ".", "_task", ".", "_config", ".", "COUNT_OBJ_COLLISIONS", ":", "\n", "            ", "self", ".", "_cur_force", "=", "overall_force", "\n", "", "else", ":", "\n", "            ", "self", ".", "_cur_force", "=", "robot_force", "\n", "\n", "", "if", "self", ".", "_prev_force", "is", "not", "None", ":", "\n", "            ", "self", ".", "_add_force", "=", "self", ".", "_cur_force", "-", "self", ".", "_prev_force", "\n", "if", "self", ".", "_add_force", ">", "self", ".", "_config", ".", "MIN_FORCE", ":", "\n", "                ", "self", ".", "_accum_force", "+=", "self", ".", "_add_force", "\n", "self", ".", "_prev_force", "=", "self", ".", "_cur_force", "\n", "", "elif", "self", ".", "_add_force", "<", "0.0", ":", "\n", "                ", "self", ".", "_prev_force", "=", "self", ".", "_cur_force", "\n", "", "else", ":", "\n", "                ", "self", ".", "_add_force", "=", "0.0", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "_prev_force", "=", "self", ".", "_cur_force", "\n", "self", ".", "_add_force", "=", "0.0", "\n", "\n", "", "self", ".", "_metric", "=", "self", ".", "_accum_force", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.NumStepsMeasure._get_uuid": [[665, 668], ["None"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "_get_uuid", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "NumStepsMeasure", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.NumStepsMeasure.reset_metric": [[669, 671], ["None"], "methods", ["None"], ["", "def", "reset_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_metric", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.NumStepsMeasure.update_metric": [[672, 674], ["None"], "methods", ["None"], ["", "def", "update_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_metric", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.ForceTerminate.__init__": [[684, 689], ["habitat.core.embodied_task.Measure.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "sim", ",", "config", ",", "task", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_sim", "=", "sim", "\n", "self", ".", "_config", "=", "config", "\n", "self", ".", "_task", "=", "task", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "sim", "=", "sim", ",", "config", "=", "config", ",", "task", "=", "task", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.ForceTerminate._get_uuid": [[690, 693], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_get_uuid", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "ForceTerminate", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.ForceTerminate.reset_metric": [[694, 708], ["task.measurements.check_measure_dependencies", "rearrange_sensors.ForceTerminate.update_metric"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measurements.check_measure_dependencies", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.update_metric"], ["", "def", "reset_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "task", ".", "measurements", ".", "check_measure_dependencies", "(", "\n", "self", ".", "uuid", ",", "\n", "[", "\n", "RobotForce", ".", "cls_uuid", ",", "\n", "]", ",", "\n", ")", "\n", "\n", "self", ".", "update_metric", "(", "\n", "*", "args", ",", "\n", "episode", "=", "episode", ",", "\n", "task", "=", "task", ",", "\n", "observations", "=", "observations", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.ForceTerminate.update_metric": [[710, 725], ["task.measurements.measures[].get_metric", "habitat.tasks.rearrange.utils.rearrange_logger.debug"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.get_metric"], ["", "def", "update_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "accum_force", "=", "task", ".", "measurements", ".", "measures", "[", "\n", "RobotForce", ".", "cls_uuid", "\n", "]", ".", "get_metric", "(", ")", "\n", "if", "(", "\n", "self", ".", "_config", ".", "MAX_ACCUM_FORCE", ">", "0", "\n", "and", "accum_force", ">", "self", ".", "_config", ".", "MAX_ACCUM_FORCE", "\n", ")", ":", "\n", "            ", "rearrange_logger", ".", "debug", "(", "\n", "f\"Force threshold={self._config.MAX_ACCUM_FORCE} exceeded with {accum_force}, ending episode\"", "\n", ")", "\n", "self", ".", "_task", ".", "should_end", "=", "True", "\n", "self", ".", "_metric", "=", "True", "\n", "", "else", ":", "\n", "            ", "self", ".", "_metric", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.DidViolateHoldConstraintMeasure._get_uuid": [[731, 734], ["None"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "_get_uuid", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "DidViolateHoldConstraintMeasure", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.DidViolateHoldConstraintMeasure.__init__": [[735, 739], ["habitat.core.embodied_task.Measure.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["", "def", "__init__", "(", "self", ",", "*", "args", ",", "sim", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_sim", "=", "sim", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "sim", "=", "sim", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.DidViolateHoldConstraintMeasure.reset_metric": [[740, 747], ["rearrange_sensors.DidViolateHoldConstraintMeasure.update_metric"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.update_metric"], ["", "def", "reset_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "update_metric", "(", "\n", "*", "args", ",", "\n", "episode", "=", "episode", ",", "\n", "task", "=", "task", ",", "\n", "observations", "=", "observations", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.DidViolateHoldConstraintMeasure.update_metric": [[749, 751], ["rearrange_sensors.DidViolateHoldConstraintMeasure._sim.grasp_mgr.is_violating_hold_constraint"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_grasp_manager.RearrangeGraspManager.is_violating_hold_constraint"], ["", "def", "update_metric", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_metric", "=", "self", ".", "_sim", ".", "grasp_mgr", ".", "is_violating_hold_constraint", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.RearrangeReward.__init__": [[759, 765], ["habitat.core.embodied_task.Measure.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "sim", ",", "config", ",", "task", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_sim", "=", "sim", "\n", "self", ".", "_config", "=", "config", "\n", "self", ".", "_task", "=", "task", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "sim", "=", "sim", ",", "config", "=", "config", ",", "task", "=", "task", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.RearrangeReward.reset_metric": [[766, 781], ["task.measurements.check_measure_dependencies", "rearrange_sensors.RearrangeReward.update_metric"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measurements.check_measure_dependencies", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.update_metric"], ["", "def", "reset_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "task", ".", "measurements", ".", "check_measure_dependencies", "(", "\n", "self", ".", "uuid", ",", "\n", "[", "\n", "RobotForce", ".", "cls_uuid", ",", "\n", "ForceTerminate", ".", "cls_uuid", ",", "\n", "]", ",", "\n", ")", "\n", "\n", "self", ".", "update_metric", "(", "\n", "*", "args", ",", "\n", "episode", "=", "episode", ",", "\n", "task", "=", "task", ",", "\n", "observations", "=", "observations", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.RearrangeReward.update_metric": [[783, 798], ["rearrange_sensors.RearrangeReward._get_coll_reward", "rearrange_sensors.RearrangeReward._sim.grasp_mgr.is_violating_hold_constraint", "task.measurements.measures[].get_metric"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.RearrangeReward._get_coll_reward", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_grasp_manager.RearrangeGraspManager.is_violating_hold_constraint", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.get_metric"], ["", "def", "update_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "reward", "=", "0.0", "\n", "\n", "reward", "+=", "self", ".", "_get_coll_reward", "(", ")", "\n", "\n", "if", "self", ".", "_sim", ".", "grasp_mgr", ".", "is_violating_hold_constraint", "(", ")", ":", "\n", "            ", "reward", "-=", "self", ".", "_config", ".", "CONSTRAINT_VIOLATE_PEN", "\n", "\n", "", "force_terminate", "=", "task", ".", "measurements", ".", "measures", "[", "\n", "ForceTerminate", ".", "cls_uuid", "\n", "]", ".", "get_metric", "(", ")", "\n", "if", "force_terminate", ":", "\n", "            ", "reward", "-=", "self", ".", "_config", ".", "FORCE_END_PEN", "\n", "\n", "", "self", ".", "_metric", "=", "reward", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sensors.RearrangeReward._get_coll_reward": [[799, 813], ["max", "min"], "methods", ["None"], ["", "def", "_get_coll_reward", "(", "self", ")", ":", "\n", "        ", "reward", "=", "0", "\n", "\n", "force_metric", "=", "self", ".", "_task", ".", "measurements", ".", "measures", "[", "RobotForce", ".", "cls_uuid", "]", "\n", "# Penalize the force that was added to the accumulated force at the", "\n", "# last time step.", "\n", "reward", "-=", "max", "(", "\n", "0", ",", "# This penalty is always positive", "\n", "min", "(", "\n", "self", ".", "_config", ".", "FORCE_PEN", "*", "force_metric", ".", "add_force", ",", "\n", "self", ".", "_config", ".", "MAX_FORCE_PEN", ",", "\n", ")", ",", "\n", ")", "\n", "return", "reward", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.grip_actions.GripSimulatorTaskAction.__init__": [[22, 25], ["habitat.core.embodied_task.SimulatorTaskAction.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "config", ",", "sim", ":", "RearrangeSim", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "config", "=", "config", ",", "sim", "=", "sim", ",", "**", "kwargs", ")", "\n", "self", ".", "_sim", ":", "RearrangeSim", "=", "sim", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.grip_actions.GripSimulatorTaskAction.requires_action": [[26, 29], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "requires_action", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "action_space", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.grip_actions.MagicGraspAction.action_space": [[33, 36], ["gym.spaces.Box"], "methods", ["None"], ["    ", "@", "property", "\n", "def", "action_space", "(", "self", ")", ":", "\n", "        ", "return", "spaces", ".", "Box", "(", "shape", "=", "(", "1", ",", ")", ",", "high", "=", "1.0", ",", "low", "=", "-", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.grip_actions.MagicGraspAction._grasp": [[37, 72], ["grip_actions.MagicGraspAction._sim.get_scene_pos", "grip_actions.MagicGraspAction._sim.get_all_markers", "len", "numpy.argmin", "numpy.linalg.norm", "len", "list", "numpy.array", "numpy.argmin", "numpy.linalg.norm", "numpy.linalg.norm", "grip_actions.MagicGraspAction._sim.grasp_mgr.snap_to_obj", "grip_actions.MagicGraspAction.keys", "numpy.linalg.norm", "grip_actions.MagicGraspAction._sim.robot.open_gripper", "grip_actions.MagicGraspAction._sim.grasp_mgr.snap_to_marker", "markers[].get_current_position"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.get_scene_pos", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.get_all_markers", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_grasp_manager.RearrangeGraspManager.snap_to_obj", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator.open_gripper", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_grasp_manager.RearrangeGraspManager.snap_to_marker", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.marker_info.MarkerInfo.get_current_position"], ["", "def", "_grasp", "(", "self", ")", ":", "\n", "        ", "scene_obj_pos", "=", "self", ".", "_sim", ".", "get_scene_pos", "(", ")", "\n", "ee_pos", "=", "self", ".", "_sim", ".", "robot", ".", "ee_transform", ".", "translation", "\n", "# Get objects we are close to.", "\n", "if", "len", "(", "scene_obj_pos", ")", "!=", "0", ":", "\n", "# Get the target the EE is closest to.", "\n", "            ", "closest_obj_idx", "=", "np", ".", "argmin", "(", "\n", "np", ".", "linalg", ".", "norm", "(", "scene_obj_pos", "-", "ee_pos", ",", "ord", "=", "2", ",", "axis", "=", "-", "1", ")", "\n", ")", "\n", "\n", "to_target", "=", "np", ".", "linalg", ".", "norm", "(", "\n", "ee_pos", "-", "scene_obj_pos", "[", "closest_obj_idx", "]", ",", "ord", "=", "2", "\n", ")", "\n", "\n", "if", "to_target", "<", "self", ".", "_config", ".", "GRASP_THRESH_DIST", ":", "\n", "                ", "self", ".", "_sim", ".", "grasp_mgr", ".", "snap_to_obj", "(", "\n", "self", ".", "_sim", ".", "scene_obj_ids", "[", "closest_obj_idx", "]", "\n", ")", "\n", "return", "\n", "\n", "# Get markers we are close to.", "\n", "", "", "markers", "=", "self", ".", "_sim", ".", "get_all_markers", "(", ")", "\n", "if", "len", "(", "markers", ")", ">", "0", ":", "\n", "            ", "names", "=", "list", "(", "markers", ".", "keys", "(", ")", ")", "\n", "pos", "=", "np", ".", "array", "(", "[", "markers", "[", "k", "]", ".", "get_current_position", "(", ")", "for", "k", "in", "names", "]", ")", "\n", "\n", "closest_idx", "=", "np", ".", "argmin", "(", "\n", "np", ".", "linalg", ".", "norm", "(", "pos", "-", "ee_pos", ",", "ord", "=", "2", ",", "axis", "=", "-", "1", ")", "\n", ")", "\n", "\n", "to_target", "=", "np", ".", "linalg", ".", "norm", "(", "ee_pos", "-", "pos", "[", "closest_idx", "]", ",", "ord", "=", "2", ")", "\n", "\n", "if", "to_target", "<", "self", ".", "_config", ".", "GRASP_THRESH_DIST", ":", "\n", "                ", "self", ".", "_sim", ".", "robot", ".", "open_gripper", "(", ")", "\n", "self", ".", "_sim", ".", "grasp_mgr", ".", "snap_to_marker", "(", "names", "[", "closest_idx", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.grip_actions.MagicGraspAction._ungrasp": [[73, 75], ["grip_actions.MagicGraspAction._sim.grasp_mgr.desnap"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_grasp_manager.RearrangeGraspManager.desnap"], ["", "", "", "def", "_ungrasp", "(", "self", ")", ":", "\n", "        ", "self", ".", "_sim", ".", "grasp_mgr", ".", "desnap", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.grip_actions.MagicGraspAction.step": [[76, 84], ["grip_actions.MagicGraspAction._grasp", "grip_actions.MagicGraspAction._ungrasp"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.grip_actions.MagicGraspAction._grasp", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.grip_actions.SuctionGraspAction._ungrasp"], ["", "def", "step", "(", "self", ",", "grip_action", ",", "should_step", "=", "True", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "grip_action", "is", "None", ":", "\n", "            ", "return", "\n", "\n", "", "if", "grip_action", ">=", "0", "and", "not", "self", ".", "_sim", ".", "grasp_mgr", ".", "is_grasped", ":", "\n", "            ", "self", ".", "_grasp", "(", ")", "\n", "", "elif", "grip_action", "<", "0", "and", "self", ".", "_sim", ".", "grasp_mgr", ".", "is_grasped", ":", "\n", "            ", "self", ".", "_ungrasp", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.grip_actions.SuctionGraspAction.__init__": [[92, 95], ["grip_actions.GripSimulatorTaskAction.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "config", ",", "sim", ":", "RearrangeSim", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "config", "=", "config", ",", "sim", "=", "sim", ",", "**", "kwargs", ")", "\n", "self", ".", "_sim", ":", "RearrangeSim", "=", "sim", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.grip_actions.SuctionGraspAction.action_space": [[96, 99], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "action_space", "(", "self", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.grip_actions.SuctionGraspAction._ungrasp": [[100, 102], ["grip_actions.SuctionGraspAction._sim.grasp_mgr.desnap"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_grasp_manager.RearrangeGraspManager.desnap"], ["", "def", "_ungrasp", "(", "self", ")", ":", "\n", "        ", "self", ".", "_sim", ".", "grasp_mgr", ".", "desnap", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.grip_actions.SuctionGraspAction.step": [[103, 149], ["grip_actions.SuctionGraspAction._sim.get_physics_contact_points", "grip_actions.SuctionGraspAction._sim.get_all_markers", "grip_actions.SuctionGraspAction.items", "list", "len", "any", "grip_actions.SuctionGraspAction._sim.grasp_mgr.snap_to_obj", "any", "grip_actions.SuctionGraspAction._sim.grasp_mgr.snap_to_marker", "int", "str", "habitat.tasks.rearrange.utils.coll_name_matches", "any", "habitat.tasks.rearrange.utils.coll_name_matches", "habitat.tasks.rearrange.utils.coll_link_name_matches", "habitat.tasks.rearrange.utils.coll_name_matches", "habitat.tasks.rearrange.utils.coll_link_name_matches"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.get_all_markers", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_grasp_manager.RearrangeGraspManager.snap_to_obj", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_grasp_manager.RearrangeGraspManager.snap_to_marker", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.coll_name_matches", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.coll_name_matches", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.coll_link_name_matches", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.coll_name_matches", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.coll_link_name_matches"], ["", "def", "step", "(", "self", ",", "_", ",", "should_step", "=", "True", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "_sim", ".", "grasp_mgr", ".", "is_grasped", ":", "\n", "            ", "return", "\n", "", "attempt_snap_entity", ":", "Union", "[", "str", ",", "int", "]", "=", "None", "\n", "contacts", "=", "self", ".", "_sim", ".", "get_physics_contact_points", "(", ")", "\n", "\n", "robot_id", "=", "self", ".", "_sim", ".", "robot", ".", "sim_obj", ".", "object_id", "\n", "all_gripper_links", "=", "list", "(", "self", ".", "_sim", ".", "robot", ".", "params", ".", "gripper_joints", ")", "+", "[", "\n", "self", ".", "_sim", ".", "robot", ".", "params", ".", "ee_link", "\n", "]", "\n", "robot_contacts", "=", "[", "\n", "c", "\n", "for", "c", "in", "contacts", "\n", "if", "coll_name_matches", "(", "c", ",", "robot_id", ")", "\n", "and", "any", "(", "coll_link_name_matches", "(", "c", ",", "l", ")", "for", "l", "in", "all_gripper_links", ")", "\n", "]", "\n", "\n", "if", "len", "(", "robot_contacts", ")", "==", "0", ":", "\n", "            ", "return", "\n", "\n", "# Contacted any objects?", "\n", "", "for", "scene_obj_id", "in", "self", ".", "_sim", ".", "scene_obj_ids", ":", "\n", "            ", "has_robot_match", "=", "any", "(", "\n", "c", "for", "c", "in", "robot_contacts", "if", "coll_name_matches", "(", "c", ",", "scene_obj_id", ")", "\n", ")", "\n", "if", "has_robot_match", ":", "\n", "                ", "attempt_snap_entity", "=", "scene_obj_id", "\n", "\n", "", "", "if", "attempt_snap_entity", "is", "not", "None", ":", "\n", "            ", "self", ".", "_sim", ".", "grasp_mgr", ".", "snap_to_obj", "(", "int", "(", "attempt_snap_entity", ")", ")", "\n", "return", "\n", "\n", "# Contacted any markers?", "\n", "", "markers", "=", "self", ".", "_sim", ".", "get_all_markers", "(", ")", "\n", "for", "marker_name", ",", "marker", "in", "markers", ".", "items", "(", ")", ":", "\n", "            ", "has_match", "=", "any", "(", "\n", "c", "\n", "for", "c", "in", "robot_contacts", "\n", "if", "coll_name_matches", "(", "c", ",", "marker", ".", "ao_parent", ".", "object_id", ")", "\n", "and", "coll_link_name_matches", "(", "c", ",", "marker", ".", "link_id", ")", "\n", ")", "\n", "if", "has_match", ":", "\n", "                ", "attempt_snap_entity", "=", "marker_name", "\n", "\n", "", "", "if", "attempt_snap_entity", "is", "not", "None", ":", "\n", "            ", "self", ".", "_sim", ".", "grasp_mgr", ".", "snap_to_marker", "(", "str", "(", "attempt_snap_entity", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.marker_info.MarkerInfo.__init__": [[18, 28], ["ao_parent.get_link_joint_pos_offset", "marker_info.MarkerInfo.update"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.il.metrics.Metric.update"], ["def", "__init__", "(", "self", ",", "offset_position", ",", "link_node", ",", "ao_parent", ",", "link_id", ")", ":", "\n", "        ", "self", ".", "offset_position", "=", "offset_position", "\n", "self", ".", "link_node", "=", "link_node", "\n", "self", ".", "link_id", "=", "link_id", "\n", "self", ".", "current_transform", "=", "None", "\n", "self", ".", "ao_parent", "=", "ao_parent", "\n", "\n", "self", ".", "joint_idx", "=", "ao_parent", ".", "get_link_joint_pos_offset", "(", "link_id", ")", "\n", "\n", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.marker_info.MarkerInfo.set_targ_js": [[29, 31], ["None"], "methods", ["None"], ["", "def", "set_targ_js", "(", "self", ",", "js", ")", ":", "\n", "        ", "self", ".", "ao_parent", ".", "joint_positions", "[", "self", ".", "joint_idx", "]", "=", "js", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.marker_info.MarkerInfo.get_targ_js": [[32, 34], ["None"], "methods", ["None"], ["", "def", "get_targ_js", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "ao_parent", ".", "joint_positions", "[", "self", ".", "joint_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.marker_info.MarkerInfo.get_targ_js_vel": [[35, 37], ["None"], "methods", ["None"], ["", "def", "get_targ_js_vel", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "ao_parent", ".", "joint_velocities", "[", "self", ".", "joint_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.marker_info.MarkerInfo.update": [[38, 41], ["magnum.Matrix4.translation", "magnum.Vector3"], "methods", ["None"], ["", "def", "update", "(", "self", ")", ":", "\n", "        ", "offset_T", "=", "mn", ".", "Matrix4", ".", "translation", "(", "mn", ".", "Vector3", "(", "self", ".", "offset_position", ")", ")", "\n", "self", ".", "current_transform", "=", "self", ".", "link_node", ".", "transformation", "@", "offset_T", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.marker_info.MarkerInfo.get_current_position": [[42, 44], ["numpy.array"], "methods", ["None"], ["", "def", "get_current_position", "(", "self", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "return", "np", ".", "array", "(", "self", ".", "current_transform", ".", "translation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.marker_info.MarkerInfo.get_current_transform": [[45, 47], ["None"], "methods", ["None"], ["", "def", "get_current_transform", "(", "self", ")", "->", "mn", ".", "Matrix4", ":", "\n", "        ", "return", "self", ".", "current_transform", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_task.RearrangeTask.overwrite_sim_config": [[42, 44], ["rearrange_task.merge_sim_episode_with_object_config"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_task.merge_sim_episode_with_object_config"], ["def", "overwrite_sim_config", "(", "self", ",", "sim_config", ",", "episode", ")", ":", "\n", "        ", "return", "merge_sim_episode_with_object_config", "(", "sim_config", ",", "episode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_task.RearrangeTask.__init__": [[45, 57], ["len", "habitat.tasks.nav.nav.NavigationTask.__init__", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["", "def", "__init__", "(", "self", ",", "*", "args", ",", "sim", ",", "dataset", "=", "None", ",", "**", "kwargs", ")", "->", "None", ":", "\n", "        ", "self", ".", "n_objs", "=", "len", "(", "dataset", ".", "episodes", "[", "0", "]", ".", "targets", ")", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "sim", "=", "sim", ",", "dataset", "=", "dataset", ",", "**", "kwargs", ")", "\n", "self", ".", "is_gripper_closed", "=", "False", "\n", "self", ".", "_sim", ":", "RearrangeSim", "=", "sim", "\n", "self", ".", "_ignore_collisions", ":", "List", "[", "Any", "]", "=", "[", "]", "\n", "self", ".", "_desired_resting", "=", "np", ".", "array", "(", "self", ".", "_config", ".", "DESIRED_RESTING_POSITION", ")", "\n", "self", ".", "_sim_reset", "=", "True", "\n", "self", ".", "_targ_idx", ":", "int", "=", "0", "\n", "self", ".", "_episode_id", ":", "str", "=", "\"\"", "\n", "self", ".", "_cur_episode_step", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_task.RearrangeTask.targ_idx": [[58, 61], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "targ_idx", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_targ_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_task.RearrangeTask.abs_targ_idx": [[62, 67], ["rearrange_task.RearrangeTask._sim.get_targets"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.get_targets"], ["", "@", "property", "\n", "def", "abs_targ_idx", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_targ_idx", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "return", "self", ".", "_sim", ".", "get_targets", "(", ")", "[", "0", "]", "[", "self", ".", "_targ_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_task.RearrangeTask.desired_resting": [[68, 71], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "desired_resting", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_desired_resting", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_task.RearrangeTask.set_args": [[72, 74], ["NotImplementedError"], "methods", ["None"], ["", "def", "set_args", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Task cannot dynamically set arguments\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_task.RearrangeTask.set_sim_reset": [[75, 77], ["None"], "methods", ["None"], ["", "def", "set_sim_reset", "(", "self", ",", "sim_reset", ")", ":", "\n", "        ", "self", ".", "_sim_reset", "=", "sim_reset", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_task.RearrangeTask.reset": [[78, 100], ["rearrange_task.RearrangeTask.measurements.get_metrics", "habitat.tasks.rearrange.utils.CollisionDetails", "habitat.tasks.rearrange.utils.CollisionDetails", "rearrange_task.RearrangeTask._sim.reset", "rearrange_task.RearrangeTask.actions.values", "rearrange_task.RearrangeTask._sim.set_robot_base_to_random_point", "rearrange_task.RearrangeTask._get_observations", "action_instance.reset"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env.get_metrics", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.set_robot_base_to_random_point", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_task.RearrangeTask._get_observations", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset"], ["", "def", "reset", "(", "self", ",", "episode", ":", "Episode", ",", "fetch_observations", ":", "bool", "=", "True", ")", ":", "\n", "        ", "self", ".", "_episode_id", "=", "episode", ".", "episode_id", "\n", "self", ".", "_ignore_collisions", "=", "[", "]", "\n", "\n", "if", "self", ".", "_sim_reset", ":", "\n", "            ", "self", ".", "_sim", ".", "reset", "(", ")", "\n", "for", "action_instance", "in", "self", ".", "actions", ".", "values", "(", ")", ":", "\n", "                ", "action_instance", ".", "reset", "(", "episode", "=", "episode", ",", "task", "=", "self", ")", "\n", "", "self", ".", "_is_episode_active", "=", "True", "\n", "self", ".", "_sim", ".", "set_robot_base_to_random_point", "(", ")", "\n", "\n", "", "self", ".", "prev_measures", "=", "self", ".", "measurements", ".", "get_metrics", "(", ")", "\n", "self", ".", "_targ_idx", "=", "0", "\n", "self", ".", "coll_accum", "=", "CollisionDetails", "(", ")", "\n", "self", ".", "prev_coll_accum", "=", "CollisionDetails", "(", ")", "\n", "self", ".", "should_end", "=", "False", "\n", "self", ".", "_done", "=", "False", "\n", "self", ".", "_cur_episode_step", "=", "0", "\n", "if", "fetch_observations", ":", "\n", "            ", "return", "self", ".", "_get_observations", "(", "episode", ")", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_task.RearrangeTask._get_observations": [[101, 110], ["rearrange_task.RearrangeTask._sim.get_sensor_observations", "rearrange_task.RearrangeTask._sim._sensor_suite.get_observations", "rearrange_task.RearrangeTask.sensor_suite.get_observations", "rearrange_task.RearrangeTask.update"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get_observations", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get_observations", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.il.metrics.Metric.update"], ["", "", "def", "_get_observations", "(", "self", ",", "episode", ")", ":", "\n", "        ", "obs", "=", "self", ".", "_sim", ".", "get_sensor_observations", "(", ")", "\n", "obs", "=", "self", ".", "_sim", ".", "_sensor_suite", ".", "get_observations", "(", "obs", ")", "\n", "\n", "task_obs", "=", "self", ".", "sensor_suite", ".", "get_observations", "(", "\n", "observations", "=", "obs", ",", "episode", "=", "episode", ",", "task", "=", "self", "\n", ")", "\n", "obs", ".", "update", "(", "task_obs", ")", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_task.RearrangeTask.step": [[111, 118], ["super().step", "copy.copy"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step"], ["", "def", "step", "(", "self", ",", "action", ":", "Dict", "[", "str", ",", "Any", "]", ",", "episode", ":", "Episode", ")", ":", "\n", "        ", "obs", "=", "super", "(", ")", ".", "step", "(", "action", "=", "action", ",", "episode", "=", "episode", ")", "\n", "\n", "self", ".", "prev_coll_accum", "=", "copy", ".", "copy", "(", "self", ".", "coll_accum", ")", "\n", "self", ".", "_cur_episode_step", "+=", "1", "\n", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_task.RearrangeTask._check_episode_is_active": [[119, 142], ["rearrange_task.RearrangeTask._sim.grasp_mgr.is_violating_hold_constraint", "habitat.tasks.rearrange.utils.rearrange_logger.debug", "habitat.tasks.rearrange.utils.rearrange_logger.debug", "habitat.tasks.rearrange.utils.rearrange_logger.debug"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_grasp_manager.RearrangeGraspManager.is_violating_hold_constraint"], ["", "def", "_check_episode_is_active", "(", "\n", "self", ",", "\n", "*", "args", ":", "Any", ",", "\n", "action", ":", "Union", "[", "int", ",", "Dict", "[", "str", ",", "Any", "]", "]", ",", "\n", "episode", ":", "Episode", ",", "\n", "**", "kwargs", ":", "Any", ",", "\n", ")", "->", "bool", ":", "\n", "        ", "done", "=", "False", "\n", "if", "self", ".", "should_end", ":", "\n", "            ", "done", "=", "True", "\n", "\n", "", "if", "(", "\n", "self", ".", "_sim", ".", "grasp_mgr", ".", "is_violating_hold_constraint", "(", ")", "\n", "and", "self", ".", "_config", ".", "CONSTRAINT_VIOLATION_ENDS_EPISODE", "\n", ")", ":", "\n", "            ", "done", "=", "True", "\n", "\n", "", "if", "done", ":", "\n", "            ", "rearrange_logger", ".", "debug", "(", "\"-\"", "*", "10", ")", "\n", "rearrange_logger", ".", "debug", "(", "\"------ Episode Over --------\"", ")", "\n", "rearrange_logger", ".", "debug", "(", "\"-\"", "*", "10", ")", "\n", "\n", "", "return", "not", "done", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_task.RearrangeTask.get_coll_forces": [[143, 177], ["rearrange_task.RearrangeTask._sim.get_physics_contact_points", "rearrange_task.RearrangeTask.get_coll_forces.get_max_force"], "methods", ["None"], ["", "def", "get_coll_forces", "(", "self", ")", ":", "\n", "        ", "snapped_obj", "=", "self", ".", "_sim", ".", "grasp_mgr", ".", "snap_idx", "\n", "robot_id", "=", "self", ".", "_sim", ".", "robot", ".", "sim_obj", ".", "object_id", "\n", "contact_points", "=", "self", ".", "_sim", ".", "get_physics_contact_points", "(", ")", "\n", "\n", "def", "get_max_force", "(", "contact_points", ",", "check_id", ")", ":", "\n", "            ", "match_contacts", "=", "[", "\n", "x", "\n", "for", "x", "in", "contact_points", "\n", "if", "check_id", "in", "[", "x", ".", "object_id_a", ",", "x", ".", "object_id_b", "]", "\n", "]", "\n", "match_contacts", "=", "[", "\n", "x", "for", "x", "in", "match_contacts", "if", "x", ".", "object_id_a", "!=", "x", ".", "object_id_b", "\n", "]", "\n", "\n", "max_force", "=", "0", "\n", "if", "len", "(", "match_contacts", ")", ">", "0", ":", "\n", "                ", "max_force", "=", "max", "(", "[", "abs", "(", "x", ".", "normal_force", ")", "for", "x", "in", "match_contacts", "]", ")", "\n", "\n", "", "return", "max_force", "\n", "\n", "", "forces", "=", "[", "\n", "abs", "(", "x", ".", "normal_force", ")", "\n", "for", "x", "in", "contact_points", "\n", "if", "(", "\n", "x", ".", "object_id_a", "not", "in", "self", ".", "_ignore_collisions", "\n", "and", "x", ".", "object_id_b", "not", "in", "self", ".", "_ignore_collisions", "\n", ")", "\n", "]", "\n", "max_force", "=", "max", "(", "forces", ")", "if", "len", "(", "forces", ")", ">", "0", "else", "0", "\n", "\n", "max_obj_force", "=", "get_max_force", "(", "contact_points", ",", "snapped_obj", ")", "\n", "max_robot_force", "=", "get_max_force", "(", "contact_points", ",", "robot_id", ")", "\n", "return", "max_robot_force", ",", "max_obj_force", ",", "max_force", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_task.RearrangeTask.get_cur_collision_info": [[178, 184], ["habitat.tasks.rearrange.utils.rearrange_collision"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.rearrange_collision"], ["", "def", "get_cur_collision_info", "(", "self", ")", "->", "CollisionDetails", ":", "\n", "        ", "_", ",", "coll_details", "=", "rearrange_collision", "(", "\n", "self", ".", "_sim", ",", "\n", "self", ".", "_config", ".", "COUNT_OBJ_COLLISIONS", ",", "\n", ")", "\n", "return", "coll_details", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_task.RearrangeTask.get_n_targets": [[185, 187], ["None"], "methods", ["None"], ["", "def", "get_n_targets", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "n_objs", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_task.RearrangeTask.should_end": [[192, 210], ["habitat.tasks.rearrange.utils.rearrange_logger.debug", "habitat.tasks.rearrange.utils.rearrange_logger.debug", "habitat.tasks.rearrange.utils.rearrange_logger.debug"], "methods", ["None"], ["", "@", "should_end", ".", "setter", "\n", "def", "should_end", "(", "self", ",", "new_val", ":", "bool", ")", ":", "\n", "        ", "self", ".", "_should_end", "=", "new_val", "\n", "##", "\n", "# NB: _check_episode_is_active is called after step() but", "\n", "# before metrics are updated. Thus if should_end is set", "\n", "# by a metric, the episode will end on the _next_", "\n", "# step. This makes sure that the episode is ended", "\n", "# on the correct step.", "\n", "self", ".", "_is_episode_active", "=", "(", "\n", "not", "self", ".", "_should_end", "\n", ")", "and", "self", ".", "_is_episode_active", "\n", "if", "new_val", ":", "\n", "            ", "rearrange_logger", ".", "debug", "(", "\"-\"", "*", "40", ")", "\n", "rearrange_logger", ".", "debug", "(", "\n", "f\"-----Episode {self._episode_id} requested to end after {self._cur_episode_step} steps.-----\"", "\n", ")", "\n", "rearrange_logger", ".", "debug", "(", "\"-\"", "*", "40", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_task.merge_sim_episode_with_object_config": [[23, 28], ["sim_config.defrost", "sim_config.freeze"], "function", ["None"], ["def", "merge_sim_episode_with_object_config", "(", "sim_config", ",", "episode", ")", ":", "\n", "    ", "sim_config", ".", "defrost", "(", ")", "\n", "sim_config", ".", "ep_info", "=", "[", "episode", ".", "__dict__", "]", "\n", "sim_config", ".", "freeze", "(", ")", "\n", "return", "sim_config", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.actions.EmptyAction.action_space": [[36, 45], ["gym.spaces.Dict", "gym.spaces.Box"], "methods", ["None"], ["\n", "\n", "_known_actions", ":", "Dict", "[", "str", ",", "int", "]", "=", "attr", ".", "ib", "(", "init", "=", "False", ",", "factory", "=", "dict", ")", "\n", "\n", "def", "__attrs_post_init__", "(", "self", ")", ":", "\n", "        ", "for", "action", "in", "_DefaultHabitatSimActions", ":", "\n", "            ", "self", ".", "_known_actions", "[", "action", ".", "name", "]", "=", "action", ".", "value", "\n", "\n", "", "", "def", "extend_action_space", "(", "self", ",", "name", ":", "str", ")", "->", "int", ":", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.actions.EmptyAction.step": [[49, 51], ["actions.EmptyAction._sim.step"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.actions.RearrangeStopAction.reset": [[55, 58], ["super().reset"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.actions.RearrangeStopAction.step": [[59, 71], ["kwargs.get", "habitat.tasks.rearrange.utils.rearrange_logger.debug", "actions.RearrangeStopAction._sim.step"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step"], ["\n", "assert", "(", "\n", "name", "not", "in", "self", ".", "_known_actions", "\n", ")", ",", "\"Cannot register an action name twice\"", "\n", "self", ".", "_known_actions", "[", "name", "]", "=", "len", "(", "self", ".", "_known_actions", ")", "\n", "\n", "return", "self", ".", "_known_actions", "[", "name", "]", "\n", "\n", "", "def", "has_action", "(", "self", ",", "name", ":", "str", ")", "->", "bool", ":", "\n", "        "]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.actions.ArmAction.__init__": [[77, 96], ["habitat.core.embodied_task.SimulatorTaskAction.__init__", "eval", "eval.", "eval", "eval."], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_trainer.BaseTrainer.eval", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_trainer.BaseTrainer.eval"], ["        ", "return", "self", ".", "_known_actions", "[", "name", "]", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "self", ".", "_known_actions", "[", "name", "]", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_known_actions", ")", "\n", "\n", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "_known_actions", ")", "\n", "\n", "\n", "", "", "HabitatSimActions", ":", "HabitatSimActionsSingleton", "=", "HabitatSimActionsSingleton", "(", ")", "\n", "\n", "\n", "@", "registry", ".", "register_action_space_configuration", "(", "name", "=", "\"v0\"", ")", "\n", "class", "HabitatSimV0ActionSpaceConfiguration", "(", "ActionSpaceConfiguration", ")", ":", "\n", "    ", "def", "get", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "HabitatSimActions", ".", "STOP", ":", "habitat_sim", ".", "ActionSpec", "(", "\"stop\"", ")", ",", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.actions.ArmAction.reset": [[97, 101], ["actions.ArmAction.arm_ctrlr.reset", "actions.ArmAction.grip_ctrlr.reset"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset"], ["HabitatSimActions", ".", "MOVE_FORWARD", ":", "habitat_sim", ".", "ActionSpec", "(", "\n", "\"move_forward\"", ",", "\n", "habitat_sim", ".", "ActuationSpec", "(", "\n", "amount", "=", "self", ".", "config", ".", "FORWARD_STEP_SIZE", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.actions.ArmAction.action_space": [[102, 110], ["gym.spaces.Dict"], "methods", ["None"], [")", ",", "\n", "HabitatSimActions", ".", "TURN_LEFT", ":", "habitat_sim", ".", "ActionSpec", "(", "\n", "\"turn_left\"", ",", "\n", "habitat_sim", ".", "ActuationSpec", "(", "amount", "=", "self", ".", "config", ".", "TURN_ANGLE", ")", ",", "\n", ")", ",", "\n", "HabitatSimActions", ".", "TURN_RIGHT", ":", "habitat_sim", ".", "ActionSpec", "(", "\n", "\"turn_right\"", ",", "\n", "habitat_sim", ".", "ActuationSpec", "(", "amount", "=", "self", ".", "config", ".", "TURN_ANGLE", ")", ",", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.actions.ArmAction.step": [[111, 121], ["actions.ArmAction.arm_ctrlr.step", "actions.ArmAction.grip_ctrlr.step", "actions.ArmAction._sim.step"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step"], ["}", "\n", "\n", "\n", "", "", "@", "registry", ".", "register_action_space_configuration", "(", "name", "=", "\"v1\"", ")", "\n", "class", "HabitatSimV1ActionSpaceConfiguration", "(", "\n", "HabitatSimV0ActionSpaceConfiguration", "\n", ")", ":", "\n", "    ", "def", "get", "(", "self", ")", ":", "\n", "        ", "config", "=", "super", "(", ")", ".", "get", "(", ")", "\n", "new_config", "=", "{", "\n", "HabitatSimActions", ".", "LOOK_UP", ":", "habitat_sim", ".", "ActionSpec", "(", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.actions.ArmRelPosAction.action_space": [[130, 137], ["gym.spaces.Box"], "methods", ["None"], ["\n", "config", ".", "update", "(", "new_config", ")", "\n", "\n", "return", "config", "\n", "\n", "\n", "", "", "@", "registry", ".", "register_action_space_configuration", "(", "name", "=", "\"pyrobotnoisy\"", ")", "\n", "class", "HabitatSimPyRobotActionSpaceConfiguration", "(", "ActionSpaceConfiguration", ")", ":", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.actions.ArmRelPosAction.step": [[139, 147], ["numpy.clip"], "methods", ["None"], ["        ", "return", "{", "\n", "HabitatSimActions", ".", "STOP", ":", "habitat_sim", ".", "ActionSpec", "(", "\"stop\"", ")", ",", "\n", "HabitatSimActions", ".", "MOVE_FORWARD", ":", "habitat_sim", ".", "ActionSpec", "(", "\n", "\"pyrobot_noisy_move_forward\"", ",", "\n", "habitat_sim", ".", "PyRobotNoisyActuationSpec", "(", "\n", "amount", "=", "self", ".", "config", ".", "FORWARD_STEP_SIZE", ",", "\n", "robot", "=", "self", ".", "config", ".", "NOISE_MODEL", ".", "ROBOT", ",", "\n", "controller", "=", "self", ".", "config", ".", "NOISE_MODEL", ".", "CONTROLLER", ",", "\n", "noise_multiplier", "=", "self", ".", "config", ".", "NOISE_MODEL", ".", "NOISE_MULTIPLIER", ",", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.actions.ArmRelPosKinematicAction.action_space": [[157, 164], ["gym.spaces.Box"], "methods", ["None"], [")", ",", "\n", ")", ",", "\n", "HabitatSimActions", ".", "TURN_RIGHT", ":", "habitat_sim", ".", "ActionSpec", "(", "\n", "\"pyrobot_noisy_turn_right\"", ",", "\n", "habitat_sim", ".", "PyRobotNoisyActuationSpec", "(", "\n", "amount", "=", "self", ".", "config", ".", "TURN_ANGLE", ",", "\n", "robot", "=", "self", ".", "config", ".", "NOISE_MODEL", ".", "ROBOT", ",", "\n", "controller", "=", "self", ".", "config", ".", "NOISE_MODEL", ".", "CONTROLLER", ",", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.actions.ArmRelPosKinematicAction.step": [[166, 176], ["actions.ArmRelPosKinematicAction._config.get", "numpy.clip"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get"], [")", ",", "\n", ")", ",", "\n", "HabitatSimActions", ".", "LOOK_UP", ":", "habitat_sim", ".", "ActionSpec", "(", "\n", "\"look_up\"", ",", "\n", "habitat_sim", ".", "ActuationSpec", "(", "amount", "=", "self", ".", "config", ".", "TILT_ANGLE", ")", ",", "\n", ")", ",", "\n", "HabitatSimActions", ".", "LOOK_DOWN", ":", "habitat_sim", ".", "ActionSpec", "(", "\n", "\"look_down\"", ",", "\n", "habitat_sim", ".", "ActuationSpec", "(", "amount", "=", "self", ".", "config", ".", "TILT_ANGLE", ")", ",", "\n", ")", ",", "\n", "# The perfect actions are needed for the oracle planner", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.actions.ArmAbsPosAction.action_space": [[185, 192], ["gym.spaces.Box"], "methods", ["None"], ["habitat_sim", ".", "ActuationSpec", "(", "amount", "=", "self", ".", "config", ".", "TURN_ANGLE", ")", ",", "\n", ")", ",", "\n", "\"_right\"", ":", "habitat_sim", ".", "ActionSpec", "(", "\n", "\"turn_right\"", ",", "\n", "habitat_sim", ".", "ActuationSpec", "(", "amount", "=", "self", ".", "config", ".", "TURN_ANGLE", ")", ",", "\n", ")", ",", "\n", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.actions.ArmAbsPosAction.step": [[194, 199], ["None"], "methods", ["None"], ["", "", "@", "registry", ".", "register_action_space_configuration", "(", "name", "=", "\"velocitycontrol\"", ")", "\n", "class", "HabitatSimVelocityCtrlActionSpaceConfiguration", "(", "ActionSpaceConfiguration", ")", ":", "\n", "    ", "def", "get", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "HabitatSimActions", ".", "VELOCITY_CTRL", ":", "habitat_sim", ".", "ActionSpec", "(", "\n", "\"velocity_control\"", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.actions.ArmAbsPosKinematicAction.action_space": [[208, 215], ["gym.spaces.Box"], "methods", ["None"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.actions.ArmAbsPosKinematicAction.step": [[217, 222], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.actions.BaseVelAction.__init__": [[232, 240], ["habitat.core.embodied_task.SimulatorTaskAction.__init__", "habitat_sim.physics.VelocityControl"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.actions.BaseVelAction.end_on_stop": [[241, 244], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.actions.BaseVelAction.action_space": [[245, 252], ["gym.spaces.Dict", "gym.spaces.Box"], "methods", ["None"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.actions.BaseVelAction._capture_robot_state": [[256, 261], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.actions.BaseVelAction._set_robot_state": [[263, 267], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.actions.BaseVelAction.reset": [[268, 271], ["super().reset"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.actions.BaseVelAction.update_base": [[272, 310], ["actions.BaseVelAction._capture_robot_state", "habitat_sim.RigidState", "actions.BaseVelAction.base_vel_ctrl.integrate_transform", "actions.BaseVelAction._sim.step_filter", "magnum.Matrix4.from_", "magnum.Quaternion.from_matrix", "actions.BaseVelAction.rotation.to_matrix", "actions.BaseVelAction._config.get", "actions.BaseVelAction._sim.internal_step", "actions.BaseVelAction._sim.get_collisions", "habitat.tasks.rearrange.utils.rearrange_collision", "actions.BaseVelAction._sim.grasp_mgr.update_object_to_grasp", "trans.rotation", "actions.BaseVelAction._set_robot_state"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.actions.BaseVelAction._capture_robot_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.internal_step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.get_collisions", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.rearrange_collision", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_grasp_manager.RearrangeGraspManager.update_object_to_grasp", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.rotation", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.actions.BaseVelAction._set_robot_state"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.actions.BaseVelAction.step": [[311, 336], ["magnum.Vector3", "magnum.Vector3", "numpy.clip", "numpy.clip", "numpy.maximum", "actions.BaseVelAction.update_base", "actions.BaseVelAction._sim.step", "abs", "abs"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.actions.BaseVelAction.update_base", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.actions.ArmEEAction.__init__": [[342, 346], ["habitat.core.embodied_task.SimulatorTaskAction.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.actions.ArmEEAction.reset": [[347, 354], ["super().reset", "actions.ArmEEAction._sim.ik_helper.calc_fk", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.IkHelper.calc_fk"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.actions.ArmEEAction.action_space": [[355, 358], ["gym.spaces.Box"], "methods", ["None"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.actions.ArmEEAction.apply_ee_constraints": [[359, 364], ["numpy.clip"], "methods", ["None"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.actions.ArmEEAction.set_desired_ee_pos": [[366, 381], ["numpy.array", "actions.ArmEEAction.apply_ee_constraints", "numpy.array", "numpy.zeros", "ik.set_arm_state", "ik.calc_ik", "list"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.actions.ArmEEAction.apply_ee_constraints", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.IkHelper.set_arm_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.IkHelper.calc_ik"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.actions.ArmEEAction.step": [[382, 393], ["numpy.clip", "actions.ArmEEAction.set_desired_ee_pos", "actions.ArmEEAction._config.get", "actions.ArmEEAction._sim.robot.base_transformation.transform_point", "actions.ArmEEAction._sim.visualize_position"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.actions.ArmEEAction.set_desired_ee_pos", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.visualize_position"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_grasp_manager.RearrangeGraspManager.__init__": [[28, 43], ["None"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "sim", ",", "\n", "config", ":", "Config", ",", "\n", ")", "->", "None", ":", "\n", "        ", "\"\"\"Initialize a grasp manager for the simulator instance provided.\n\n        :param config: The task's \"SIMULATOR\" subconfig node. Defines grasping parameters.\n        \"\"\"", "\n", "self", ".", "_sim", "=", "sim", "\n", "self", ".", "_snapped_obj_id", ":", "Optional", "[", "int", "]", "=", "None", "\n", "self", ".", "_snapped_marker_id", ":", "Optional", "[", "str", "]", "=", "None", "\n", "self", ".", "_snap_constraints", ":", "List", "[", "int", "]", "=", "[", "]", "\n", "self", ".", "_leave_info", ":", "Optional", "[", "Tuple", "[", "mn", ".", "Vector3", ",", "float", "]", "]", "=", "None", "\n", "self", ".", "_config", "=", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_grasp_manager.RearrangeGraspManager.reconfigure": [[44, 49], ["rearrange_grasp_manager.RearrangeGraspManager._snap_constraints.clear"], "methods", ["None"], ["", "def", "reconfigure", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"Removes any existing constraints managed by this structure.\n        Called from _sim.reconfigure().\n        \"\"\"", "\n", "self", ".", "_snap_constraints", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_grasp_manager.RearrangeGraspManager.reset": [[50, 60], ["habitat_sim.physics.CollisionGroupHelper.set_mask_for_group", "rearrange_grasp_manager.RearrangeGraspManager.desnap"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_grasp_manager.RearrangeGraspManager.desnap"], ["", "def", "reset", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"Reset the grasp manager by re-defining the collision group and dropping any grasped object.\"\"\"", "\n", "# Setup the collision groups. UserGroup7 is the held object group, it", "\n", "# can interact with anything except for the robot.", "\n", "CollisionGroupHelper", ".", "set_mask_for_group", "(", "\n", "CollisionGroups", ".", "UserGroup7", ",", "~", "CollisionGroups", ".", "Robot", "\n", ")", "\n", "\n", "self", ".", "desnap", "(", "True", ")", "\n", "self", ".", "_leave_info", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_grasp_manager.RearrangeGraspManager.is_violating_hold_constraint": [[61, 81], ["rearrange_grasp_manager.RearrangeGraspManager._sim.get_marker", "numpy.linalg.norm", "numpy.linalg.norm", "rearrange_grasp_manager.RearrangeGraspManager.get_current_position"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.get_marker", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.marker_info.MarkerInfo.get_current_position"], ["", "def", "is_violating_hold_constraint", "(", "self", ")", "->", "bool", ":", "\n", "        ", "\"\"\"\n        Returns true if the object is too far away from the gripper, meaning\n        the agent violated the hold constraint.\n        \"\"\"", "\n", "ee_pos", "=", "self", ".", "_sim", ".", "robot", ".", "ee_transform", ".", "translation", "\n", "if", "self", ".", "_snapped_obj_id", "is", "not", "None", "and", "(", "\n", "np", ".", "linalg", ".", "norm", "(", "ee_pos", "-", "self", ".", "snap_rigid_obj", ".", "translation", ")", "\n", ">=", "self", ".", "_config", ".", "HOLD_THRESH", "\n", ")", ":", "\n", "            ", "return", "True", "\n", "", "if", "self", ".", "_snapped_marker_id", "is", "not", "None", ":", "\n", "            ", "marker", "=", "self", ".", "_sim", ".", "get_marker", "(", "self", ".", "_snapped_marker_id", ")", "\n", "if", "(", "\n", "np", ".", "linalg", ".", "norm", "(", "ee_pos", "-", "marker", ".", "get_current_position", "(", ")", ")", "\n", ">=", "self", ".", "_config", ".", "HOLD_THRESH", "\n", ")", ":", "\n", "                ", "return", "True", "\n", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_grasp_manager.RearrangeGraspManager.is_grasped": [[82, 88], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_grasped", "(", "self", ")", "->", "bool", ":", "\n", "        ", "\"\"\"Returns whether or not an object or marker is currently grasped.\"\"\"", "\n", "return", "(", "\n", "self", ".", "_snapped_obj_id", "is", "not", "None", "\n", "or", "self", ".", "_snapped_marker_id", "is", "not", "None", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_grasp_manager.RearrangeGraspManager.update": [[90, 102], ["numpy.linalg.norm", "rigid_obj.override_collision_group"], "methods", ["None"], ["", "def", "update", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"Reset the collision group of the grasped object if its distance to the end effector exceeds a threshold.\n\n        Used to wait for a dropped object to clear the end effector's proximity before re-activating collisions between them.\n        \"\"\"", "\n", "if", "self", ".", "_leave_info", "is", "not", "None", ":", "\n", "            ", "ee_pos", "=", "self", ".", "_sim", ".", "robot", ".", "ee_transform", ".", "translation", "\n", "rigid_obj", "=", "self", ".", "_leave_info", "[", "0", "]", "\n", "dist", "=", "np", ".", "linalg", ".", "norm", "(", "ee_pos", "-", "rigid_obj", ".", "translation", ")", "\n", "if", "dist", ">=", "self", ".", "_leave_info", "[", "1", "]", ":", "\n", "                ", "rigid_obj", ".", "override_collision_group", "(", "CollisionGroups", ".", "Default", ")", "\n", "self", ".", "_leave_info", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_grasp_manager.RearrangeGraspManager.desnap": [[103, 134], ["rearrange_grasp_manager.RearrangeGraspManager._sim.robot.close_gripper", "len", "habitat.tasks.rearrange.utils.get_aabb", "rearrange_grasp_manager.RearrangeGraspManager._sim.remove_rigid_constraint", "rearrange_grasp_manager.RearrangeGraspManager.snap_rigid_obj.override_collision_group", "max", "habitat.tasks.rearrange.utils.get_aabb.size_x", "habitat.tasks.rearrange.utils.get_aabb.size_y", "habitat.tasks.rearrange.utils.get_aabb.size_z"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator.close_gripper", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.get_aabb"], ["", "", "", "def", "desnap", "(", "self", ",", "force", "=", "False", ")", "->", "None", ":", "\n", "        ", "\"\"\"Removes any hold constraints currently active. Removes hold constraints for regular and articulated objects.\n\n        :param force: If True, reset the collision group of the now released object immediately instead of waiting for its distance from the end effector to reach a threshold.\n        \"\"\"", "\n", "if", "len", "(", "self", ".", "_snap_constraints", ")", "==", "0", ":", "\n", "# No constraints to unsnap", "\n", "            ", "self", ".", "_snapped_obj_id", "=", "None", "\n", "self", ".", "_snapped_marker_id", "=", "None", "\n", "return", "\n", "\n", "", "if", "self", ".", "_snapped_obj_id", "is", "not", "None", ":", "\n", "            ", "obj_bb", "=", "get_aabb", "(", "self", ".", "snap_idx", ",", "self", ".", "_sim", ")", "\n", "if", "obj_bb", "is", "not", "None", ":", "\n", "                ", "if", "force", ":", "\n", "                    ", "self", ".", "snap_rigid_obj", ".", "override_collision_group", "(", "\n", "CollisionGroups", ".", "Default", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "_leave_info", "=", "(", "\n", "self", ".", "snap_rigid_obj", ",", "\n", "max", "(", "obj_bb", ".", "size_x", "(", ")", ",", "obj_bb", ".", "size_y", "(", ")", ",", "obj_bb", ".", "size_z", "(", ")", ")", ",", "\n", ")", "\n", "\n", "", "", "", "for", "constraint_id", "in", "self", ".", "_snap_constraints", ":", "\n", "            ", "self", ".", "_sim", ".", "remove_rigid_constraint", "(", "constraint_id", ")", "\n", "", "self", ".", "_snap_constraints", "=", "[", "]", "\n", "\n", "self", ".", "_snapped_obj_id", "=", "None", "\n", "self", ".", "_snapped_marker_id", "=", "None", "\n", "self", ".", "_sim", ".", "robot", ".", "close_gripper", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_grasp_manager.RearrangeGraspManager.snap_idx": [[135, 141], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "snap_idx", "(", "self", ")", "->", "Optional", "[", "int", "]", ":", "\n", "        ", "\"\"\"\n        The index of the grasped RigidObject. None if nothing is being grasped.\n        \"\"\"", "\n", "return", "self", ".", "_snapped_obj_id", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_grasp_manager.RearrangeGraspManager.snapped_marker_id": [[142, 148], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "snapped_marker_id", "(", "self", ")", "->", "Optional", "[", "str", "]", ":", "\n", "        ", "\"\"\"\n        The name of the marker for the grasp. None if nothing is being grasped.\n        \"\"\"", "\n", "return", "self", ".", "_snapped_marker_id", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_grasp_manager.RearrangeGraspManager.snap_rigid_obj": [[149, 160], ["rearrange_grasp_manager.RearrangeGraspManager._sim.get_rigid_object_manager().get_object_by_id", "ValueError", "rearrange_grasp_manager.RearrangeGraspManager._sim.get_rigid_object_manager"], "methods", ["None"], ["", "@", "property", "\n", "def", "snap_rigid_obj", "(", "self", ")", "->", "ManagedRigidObject", ":", "\n", "        ", "\"\"\"The grasped object instance.\"\"\"", "\n", "ret_obj", "=", "self", ".", "_sim", ".", "get_rigid_object_manager", "(", ")", ".", "get_object_by_id", "(", "\n", "self", ".", "_snapped_obj_id", "\n", ")", "\n", "if", "ret_obj", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "f\"Tried to get non-existence object from ID {self._snapped_obj_id}\"", "\n", ")", "\n", "", "return", "ret_obj", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_grasp_manager.RearrangeGraspManager.snap_to_marker": [[161, 188], ["rearrange_grasp_manager.RearrangeGraspManager._sim.get_marker", "rearrange_grasp_manager.RearrangeGraspManager._sim.robot.open_gripper", "len", "ValueError", "rearrange_grasp_manager.RearrangeGraspManager.create_hold_constraint", "magnum.Vector3", "magnum.Vector3"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.get_marker", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator.open_gripper", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_grasp_manager.RearrangeGraspManager.create_hold_constraint"], ["", "def", "snap_to_marker", "(", "self", ",", "marker_name", ":", "str", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Create a constraint between the end-effector and the marker on the\n        articulated object to be grasped.\n\n        :param marker_name: The name/id of the marker.\n        \"\"\"", "\n", "if", "marker_name", "==", "self", ".", "_snapped_marker_id", ":", "\n", "            ", "return", "\n", "\n", "", "if", "len", "(", "self", ".", "_snap_constraints", ")", "!=", "0", ":", "\n", "# We were already grabbing something else.", "\n", "            ", "raise", "ValueError", "(", "\n", "f\"Tried snapping to {marker_name} when already snapped\"", "\n", ")", "\n", "\n", "", "marker", "=", "self", ".", "_sim", ".", "get_marker", "(", "marker_name", ")", "\n", "self", ".", "_snap_constraints", "=", "[", "\n", "self", ".", "create_hold_constraint", "(", "\n", "mn", ".", "Vector3", "(", "0.0", ",", "0.0", ",", "0.0", ")", ",", "\n", "mn", ".", "Vector3", "(", "*", "marker", ".", "offset_position", ")", ",", "\n", "marker", ".", "ao_parent", ".", "object_id", ",", "\n", "marker", ".", "link_id", ",", "\n", ")", ",", "\n", "]", "\n", "self", ".", "_snapped_marker_id", "=", "marker_name", "\n", "self", ".", "_sim", ".", "robot", ".", "open_gripper", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_grasp_manager.RearrangeGraspManager.create_hold_constraint": [[189, 215], ["habitat_sim.physics.RigidConstraintSettings", "rearrange_grasp_manager.RearrangeGraspManager._sim.robot.get_robot_sim_id", "rearrange_grasp_manager.RearrangeGraspManager._sim.create_rigid_constraint"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.robot_interface.RobotInterface.get_robot_sim_id"], ["", "def", "create_hold_constraint", "(", "\n", "self", ",", "\n", "pivot_in_link", ":", "mn", ".", "Vector3", ",", "\n", "pivot_in_obj", ":", "mn", ".", "Vector3", ",", "\n", "obj_id_b", ":", "int", ",", "\n", "link_id_b", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", ")", "->", "int", ":", "\n", "        ", "\"\"\"Create a new rigid point-to-point (ball joint) constraint between the robot and an object.\n\n        :param pivot_in_link: The origin of the constraint in end effector local space.\n        :param pivot_in_obj: The origin of the constraint in object local space.\n        :param obj_id_b: The id of the object to be constrained to the end effector.\n        :param link_id_b: If the object is articulated, provide the link index for the constraint.\n\n        :return: The id of the newly created constraint or -1 if failed.\n        \"\"\"", "\n", "c", "=", "RigidConstraintSettings", "(", ")", "\n", "c", ".", "object_id_a", "=", "self", ".", "_sim", ".", "robot", ".", "get_robot_sim_id", "(", ")", "\n", "c", ".", "link_id_a", "=", "self", ".", "_sim", ".", "robot", ".", "ee_link_id", "\n", "c", ".", "object_id_b", "=", "obj_id_b", "\n", "if", "link_id_b", "is", "not", "None", ":", "\n", "            ", "c", ".", "link_id_b", "=", "link_id_b", "\n", "", "c", ".", "pivot_a", "=", "pivot_in_link", "\n", "c", ".", "pivot_b", "=", "pivot_in_obj", "\n", "c", ".", "max_impulse", "=", "self", ".", "_config", ".", "GRASP_IMPULSE", "\n", "return", "self", ".", "_sim", ".", "create_rigid_constraint", "(", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_grasp_manager.RearrangeGraspManager.update_object_to_grasp": [[216, 221], ["None"], "methods", ["None"], ["", "def", "update_object_to_grasp", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Kinematically update held object to be within robot's grasp.\n        \"\"\"", "\n", "self", ".", "snap_rigid_obj", ".", "transformation", "=", "self", ".", "_sim", ".", "robot", ".", "ee_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_grasp_manager.RearrangeGraspManager.snap_to_obj": [[222, 272], ["rearrange_grasp_manager.RearrangeGraspManager.snap_rigid_obj.override_collision_group", "rearrange_grasp_manager.RearrangeGraspManager._sim.robot.open_gripper", "any", "len", "ValueError", "rearrange_grasp_manager.RearrangeGraspManager.update_object_to_grasp", "rearrange_grasp_manager.RearrangeGraspManager.create_hold_constraint", "rearrange_grasp_manager.RearrangeGraspManager.create_hold_constraint", "rearrange_grasp_manager.RearrangeGraspManager.create_hold_constraint", "ValueError", "magnum.Vector3", "magnum.Vector3", "magnum.Vector3", "magnum.Vector3", "magnum.Vector3", "magnum.Vector3"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator.open_gripper", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_grasp_manager.RearrangeGraspManager.update_object_to_grasp", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_grasp_manager.RearrangeGraspManager.create_hold_constraint", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_grasp_manager.RearrangeGraspManager.create_hold_constraint", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_grasp_manager.RearrangeGraspManager.create_hold_constraint"], ["", "def", "snap_to_obj", "(", "self", ",", "snap_obj_id", ":", "int", ",", "force", ":", "bool", "=", "True", ")", "->", "None", ":", "\n", "        ", "\"\"\"Attempt to grasp an object, snapping/constraining it to the robot's end effector with 3 ball-joint constraints forming a fixed frame.\n\n        :param snap_obj_id: The id of the object to be constrained to the end effector.\n        :param force: Will kinematically snap the object to the robot's end-effector, even if\n            the object is already in the grasped state.\n        \"\"\"", "\n", "if", "snap_obj_id", "==", "self", ".", "_snapped_obj_id", ":", "\n", "# Already grasping this object.", "\n", "            ", "return", "\n", "\n", "", "if", "len", "(", "self", ".", "_snap_constraints", ")", "!=", "0", ":", "\n", "# We were already grabbing something else.", "\n", "            ", "raise", "ValueError", "(", "\n", "f\"Tried snapping to {snap_obj_id} when already snapped to {self._snapped_obj_id}\"", "\n", ")", "\n", "\n", "", "self", ".", "_snapped_obj_id", "=", "snap_obj_id", "\n", "if", "force", ":", "\n", "# Set the transformation to be in the robot's hand already.", "\n", "            ", "self", ".", "update_object_to_grasp", "(", ")", "\n", "\n", "# Set collision group to GraspedObject so that it doesn't collide", "\n", "# with the links of the robot.", "\n", "", "self", ".", "snap_rigid_obj", ".", "override_collision_group", "(", "\n", "CollisionGroups", ".", "UserGroup7", "\n", ")", "\n", "\n", "self", ".", "_snap_constraints", "=", "[", "\n", "self", ".", "create_hold_constraint", "(", "\n", "mn", ".", "Vector3", "(", "0.1", ",", "0", ",", "0", ")", ",", "\n", "mn", ".", "Vector3", "(", "0", ",", "0", ",", "0", ")", ",", "\n", "self", ".", "_snapped_obj_id", ",", "\n", ")", ",", "\n", "self", ".", "create_hold_constraint", "(", "\n", "mn", ".", "Vector3", "(", "0.0", ",", "0", ",", "0", ")", ",", "\n", "mn", ".", "Vector3", "(", "-", "0.1", ",", "0", ",", "0", ")", ",", "\n", "self", ".", "_snapped_obj_id", ",", "\n", ")", ",", "\n", "self", ".", "create_hold_constraint", "(", "\n", "mn", ".", "Vector3", "(", "0.1", ",", "0.0", ",", "0.1", ")", ",", "\n", "mn", ".", "Vector3", "(", "0.0", ",", "0.0", ",", "0.1", ")", ",", "\n", "self", ".", "_snapped_obj_id", ",", "\n", ")", ",", "\n", "]", "\n", "\n", "self", ".", "_sim", ".", "robot", ".", "open_gripper", "(", ")", "\n", "\n", "if", "any", "(", "(", "x", "==", "-", "1", "for", "x", "in", "self", ".", "_snap_constraints", ")", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Created bad constraint\"", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.__init__": [[48, 94], ["habitat.sims.habitat_simulator.habitat_simulator.HabitatSim.__init__", "rearrange_sim.RearrangeSim._get_agent_config", "habitat.tasks.rearrange.utils.is_pb_installed", "collections.defaultdict", "eval", "eval.", "numpy.array", "numpy.array", "habitat.tasks.rearrange.rearrange_grasp_manager.RearrangeGraspManager"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSim._get_agent_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.is_pb_installed", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_trainer.BaseTrainer.eval"], ["def", "__init__", "(", "self", ",", "config", ":", "Config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "agent_config", "=", "self", ".", "habitat_config", "\n", "\n", "agent_cfg", "=", "self", ".", "_get_agent_config", "(", ")", "\n", "\n", "self", ".", "first_setup", "=", "True", "\n", "self", ".", "ep_info", ":", "Optional", "[", "Config", "]", "=", "None", "\n", "self", ".", "prev_loaded_navmesh", "=", "None", "\n", "self", ".", "prev_scene_id", "=", "None", "\n", "self", ".", "_is_pb_installed", "=", "is_pb_installed", "(", ")", "\n", "\n", "# Number of physics updates per action", "\n", "self", ".", "ac_freq_ratio", "=", "agent_config", ".", "AC_FREQ_RATIO", "\n", "# The physics update time step.", "\n", "self", ".", "ctrl_freq", "=", "agent_config", ".", "CTRL_FREQ", "\n", "# Effective control speed is (ctrl_freq/ac_freq_ratio)", "\n", "\n", "self", ".", "art_objs", ":", "List", "[", "habitat_sim", ".", "physics", ".", "ManagedArticulatedObject", "]", "=", "[", "]", "\n", "self", ".", "_start_art_states", ":", "Dict", "[", "\n", "habitat_sim", ".", "physics", ".", "ManagedArticulatedObject", ",", "List", "[", "float", "]", "\n", "]", "=", "{", "}", "\n", "self", ".", "_prev_obj_names", ":", "Optional", "[", "List", "[", "str", "]", "]", "=", "None", "\n", "self", ".", "scene_obj_ids", ":", "List", "[", "int", "]", "=", "[", "]", "\n", "# Used to get data from the RL environment class to sensors.", "\n", "self", ".", "_goal_pos", "=", "None", "\n", "self", ".", "viz_ids", ":", "Dict", "[", "Any", ",", "Any", "]", "=", "defaultdict", "(", "lambda", ":", "None", ")", "\n", "self", ".", "ref_handle_to_rigid_obj_id", "=", "None", "\n", "robot_cls", "=", "eval", "(", "self", ".", "habitat_config", ".", "ROBOT_TYPE", ")", "\n", "self", ".", "robot", "=", "robot_cls", "(", "self", ".", "habitat_config", ".", "ROBOT_URDF", ",", "self", ")", "\n", "self", ".", "_orig_robot_js_start", "=", "np", ".", "array", "(", "self", ".", "robot", ".", "params", ".", "arm_init_params", ")", "\n", "self", ".", "_markers", ":", "Dict", "[", "str", ",", "MarkerInfo", "]", "=", "{", "}", "\n", "\n", "self", ".", "_viz_templates", ":", "Dict", "[", "str", ",", "Any", "]", "=", "{", "}", "\n", "self", ".", "_viz_handle_to_template", ":", "Dict", "[", "str", ",", "float", "]", "=", "{", "}", "\n", "self", ".", "_viz_objs", ":", "Dict", "[", "str", ",", "Any", "]", "=", "{", "}", "\n", "\n", "self", ".", "_ik_helper", ":", "Optional", "[", "IkHelper", "]", "=", "None", "\n", "\n", "# Disables arm control. Useful if you are hiding the arm to perform", "\n", "# some scene sensing.", "\n", "self", ".", "ctrl_arm", "=", "True", "\n", "\n", "self", ".", "grasp_mgr", ":", "RearrangeGraspManager", "=", "RearrangeGraspManager", "(", "\n", "self", ",", "self", ".", "habitat_config", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim._get_target_trans": [[96, 110], ["rearrange_sim.RearrangeSim.get_rigid_object_manager", "rearrange_sim.RearrangeSim._targets.items", "rearrange_sim.RearrangeSim.scene_obj_ids.index", "target_trans.append", "rearrange_sim.RearrangeSim.get_object_by_handle"], "methods", ["None"], ["", "def", "_get_target_trans", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This is how the target transforms should be accessed since\n        multiprocessing does not allow pickling.\n        \"\"\"", "\n", "# Preprocess the ep_info making necessary datatype conversions.", "\n", "target_trans", "=", "[", "]", "\n", "rom", "=", "self", ".", "get_rigid_object_manager", "(", ")", "\n", "for", "target_handle", ",", "trans", "in", "self", ".", "_targets", ".", "items", "(", ")", ":", "\n", "            ", "targ_idx", "=", "self", ".", "scene_obj_ids", ".", "index", "(", "\n", "rom", ".", "get_object_by_handle", "(", "target_handle", ")", ".", "object_id", "\n", ")", "\n", "target_trans", ".", "append", "(", "(", "targ_idx", ",", "trans", ")", ")", "\n", "", "return", "target_trans", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim._try_acquire_context": [[111, 114], ["rearrange_sim.RearrangeSim.renderer.acquire_gl_context"], "methods", ["None"], ["", "def", "_try_acquire_context", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "habitat_config", ".", "CONCUR_RENDER", ":", "\n", "            ", "self", ".", "renderer", ".", "acquire_gl_context", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.sleep_all_objects": [[115, 125], ["rearrange_sim.RearrangeSim.get_rigid_object_manager", "rearrange_sim.RearrangeSim.get_objects_by_handle_substring().items", "rearrange_sim.RearrangeSim.get_articulated_object_manager", "rearrange_sim.RearrangeSim.get_objects_by_handle_substring().items", "rearrange_sim.RearrangeSim.get_objects_by_handle_substring", "rearrange_sim.RearrangeSim.get_objects_by_handle_substring"], "methods", ["None"], ["", "", "def", "sleep_all_objects", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        De-activate (sleep) all rigid objects in the scene, assuming they are already in a dynamically stable state.\n        \"\"\"", "\n", "rom", "=", "self", ".", "get_rigid_object_manager", "(", ")", "\n", "for", "_", ",", "ro", "in", "rom", ".", "get_objects_by_handle_substring", "(", ")", ".", "items", "(", ")", ":", "\n", "            ", "ro", ".", "awake", "=", "False", "\n", "", "aom", "=", "self", ".", "get_articulated_object_manager", "(", ")", "\n", "for", "_", ",", "ao", "in", "aom", ".", "get_objects_by_handle_substring", "(", ")", ".", "items", "(", ")", ":", "\n", "            ", "ao", ".", "awake", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.add_markers": [[126, 145], ["rearrange_sim.RearrangeSim.get_articulated_object_manager", "rearrange_sim.RearrangeSim.get_object_by_handle", "range", "habitat.tasks.rearrange.marker_info.MarkerInfo", "rearrange_sim.RearrangeSim.get_object_by_handle.get_link_name", "rearrange_sim.RearrangeSim.get_object_by_handle.get_link_scene_node"], "methods", ["None"], ["", "", "def", "add_markers", "(", "self", ",", "ep_info", ":", "Config", ")", ":", "\n", "        ", "self", ".", "_markers", "=", "{", "}", "\n", "aom", "=", "self", ".", "get_articulated_object_manager", "(", ")", "\n", "for", "marker", "in", "ep_info", "[", "\"markers\"", "]", ":", "\n", "            ", "p", "=", "marker", "[", "\"params\"", "]", "\n", "ao", "=", "aom", ".", "get_object_by_handle", "(", "p", "[", "\"object\"", "]", ")", "\n", "name_to_link", "=", "{", "}", "\n", "name_to_link_id", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "ao", ".", "num_links", ")", ":", "\n", "                ", "name", "=", "ao", ".", "get_link_name", "(", "i", ")", "\n", "link", "=", "ao", ".", "get_link_scene_node", "(", "i", ")", "\n", "name_to_link", "[", "name", "]", "=", "link", "\n", "name_to_link_id", "[", "name", "]", "=", "i", "\n", "\n", "", "self", ".", "_markers", "[", "marker", "[", "\"name\"", "]", "]", "=", "MarkerInfo", "(", "\n", "p", "[", "\"offset\"", "]", ",", "\n", "name_to_link", "[", "p", "[", "\"link\"", "]", "]", ",", "\n", "ao", ",", "\n", "name_to_link_id", "[", "p", "[", "\"link\"", "]", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.get_marker": [[147, 149], ["None"], "methods", ["None"], ["", "", "def", "get_marker", "(", "self", ",", "name", ":", "str", ")", "->", "MarkerInfo", ":", "\n", "        ", "return", "self", ".", "_markers", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.get_all_markers": [[150, 152], ["None"], "methods", ["None"], ["", "def", "get_all_markers", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_markers", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim._update_markers": [[153, 156], ["rearrange_sim.RearrangeSim._markers.values", "m.update"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.il.metrics.Metric.update"], ["", "def", "_update_markers", "(", "self", ")", "->", "None", ":", "\n", "        ", "for", "m", "in", "self", ".", "_markers", ".", "values", "(", ")", ":", "\n", "            ", "m", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.ik_helper": [[157, 164], ["ImportError"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "ik_helper", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "_is_pb_installed", ":", "\n", "            ", "raise", "ImportError", "(", "\n", "\"Need to install PyBullet to use IK (`pip install pybullet==3.0.4`)\"", "\n", ")", "\n", "", "return", "self", ".", "_ik_helper", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.reset": [[165, 170], ["habitat_sim.sim.SimulatorBackend.reset", "range", "len", "rearrange_sim.RearrangeSim.reset_agent"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "SimulatorBackend", ".", "reset", "(", "self", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "agents", ")", ")", ":", "\n", "            ", "self", ".", "reset_agent", "(", "i", ")", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.reconfigure": [[171, 285], ["super().reconfigure", "rearrange_sim.RearrangeSim._try_acquire_context", "rearrange_sim.RearrangeSim.grasp_mgr.reset", "rearrange_sim.RearrangeSim._clear_objects", "rearrange_sim.RearrangeSim._start_art_states.items", "rearrange_sim.RearrangeSim._set_ao_states_from_ep", "rearrange_sim.RearrangeSim.robot.reset", "rearrange_sim.RearrangeSim._add_objs", "rearrange_sim.RearrangeSim._setup_targets", "rearrange_sim.RearrangeSim.add_markers", "rearrange_sim.RearrangeSim.get_rigid_object_manager", "rearrange_sim.RearrangeSim.get_scene_pos", "numpy.array", "numpy.array", "rearrange_sim.RearrangeSim.grasp_mgr.reconfigure", "rearrange_sim.RearrangeSim.get_articulated_object_manager", "rearrange_sim.RearrangeSim.robot.reconfigure", "ao.clear_joint_states", "magnum.Vector3", "magnum.Quaternion", "rearrange_sim.RearrangeSim.sleep_all_objects", "rearrange_sim.RearrangeSim._load_navmesh", "rearrange_sim.RearrangeSim.habitat_config.get", "rearrange_sim.RearrangeSim.remove_object_by_id", "rearrange_sim.RearrangeSim.habitat_config.get", "numpy.random.randn", "numpy.random.randn", "magnum.Vector3", "magnum.Vector3", "magnum.Vector3", "habitat.tasks.rearrange.utils.IkHelper", "rearrange_sim.RearrangeSim._targets.items", "numpy.array", "numpy.array", "rearrange_sim.RearrangeSim.scene_obj_ids.index", "rearrange_sim.RearrangeSim.get_object_by_handle"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env.reconfigure", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim._try_acquire_context", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim._clear_objects", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim._set_ao_states_from_ep", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim._add_objs", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim._setup_targets", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.add_markers", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.get_scene_pos", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env.reconfigure", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env.reconfigure", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.sleep_all_objects", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim._load_navmesh", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get"], ["", "def", "reconfigure", "(", "self", ",", "config", ":", "Config", ")", ":", "\n", "        ", "ep_info", "=", "config", "[", "\"ep_info\"", "]", "[", "0", "]", "\n", "self", ".", "instance_handle_to_ref_handle", "=", "ep_info", "[", "\"info\"", "]", "[", "\"object_labels\"", "]", "\n", "\n", "config", "[", "\"SCENE\"", "]", "=", "ep_info", "[", "\"scene_id\"", "]", "\n", "\n", "super", "(", ")", ".", "reconfigure", "(", "config", ",", "should_close_on_new_scene", "=", "False", ")", "\n", "\n", "self", ".", "ref_handle_to_rigid_obj_id", "=", "{", "}", "\n", "\n", "self", ".", "ep_info", "=", "ep_info", "\n", "self", ".", "_try_acquire_context", "(", ")", "\n", "\n", "new_scene", "=", "self", ".", "prev_scene_id", "!=", "ep_info", "[", "\"scene_id\"", "]", "\n", "\n", "if", "new_scene", ":", "\n", "            ", "self", ".", "grasp_mgr", ".", "reconfigure", "(", ")", "\n", "# add and initialize the robot", "\n", "ao_mgr", "=", "self", ".", "get_articulated_object_manager", "(", ")", "\n", "if", "self", ".", "robot", ".", "sim_obj", "is", "not", "None", "and", "self", ".", "robot", ".", "sim_obj", ".", "is_alive", ":", "\n", "                ", "ao_mgr", ".", "remove_object_by_id", "(", "self", ".", "robot", ".", "sim_obj", ".", "object_id", ")", "\n", "\n", "", "self", ".", "robot", ".", "reconfigure", "(", ")", "\n", "self", ".", "_prev_obj_names", "=", "None", "\n", "\n", "", "self", ".", "grasp_mgr", ".", "reset", "(", ")", "\n", "\n", "# Only remove and re-add objects if we have a new set of objects.", "\n", "obj_names", "=", "[", "x", "[", "0", "]", "for", "x", "in", "ep_info", "[", "\"rigid_objs\"", "]", "]", "\n", "should_add_objects", "=", "self", ".", "_prev_obj_names", "!=", "obj_names", "\n", "self", ".", "_prev_obj_names", "=", "obj_names", "\n", "\n", "self", ".", "_clear_objects", "(", "should_add_objects", ")", "\n", "\n", "self", ".", "prev_scene_id", "=", "ep_info", "[", "\"scene_id\"", "]", "\n", "self", ".", "_viz_templates", "=", "{", "}", "\n", "self", ".", "_viz_handle_to_template", "=", "{", "}", "\n", "\n", "# Set the default articulated object joint state.", "\n", "for", "ao", ",", "set_joint_state", "in", "self", ".", "_start_art_states", ".", "items", "(", ")", ":", "\n", "            ", "ao", ".", "clear_joint_states", "(", ")", "\n", "ao", ".", "joint_positions", "=", "set_joint_state", "\n", "\n", "# Load specified articulated object states from episode config", "\n", "", "self", ".", "_set_ao_states_from_ep", "(", "ep_info", ")", "\n", "\n", "use_arm_start", "=", "self", ".", "_orig_robot_js_start", "+", "(", "\n", "self", ".", "habitat_config", ".", "get", "(", "\"ROBOT_JOINT_START_NOISE\"", ",", "0.0", ")", "\n", "*", "np", ".", "random", ".", "randn", "(", "self", ".", "_orig_robot_js_start", ".", "shape", "[", "0", "]", ")", "\n", ")", "\n", "self", ".", "robot", ".", "params", ".", "arm_init_params", "=", "use_arm_start", "\n", "self", ".", "robot", ".", "reset", "(", ")", "\n", "\n", "# consume a fixed position from SIMUALTOR.AGENT_0 if configured", "\n", "if", "self", ".", "habitat_config", ".", "AGENT_0", ".", "IS_SET_START_STATE", ":", "\n", "            ", "self", ".", "robot", ".", "base_pos", "=", "mn", ".", "Vector3", "(", "\n", "self", ".", "habitat_config", ".", "AGENT_0", ".", "START_POSITION", "\n", ")", "\n", "agent_rot", "=", "self", ".", "habitat_config", ".", "AGENT_0", ".", "START_ROTATION", "\n", "self", ".", "robot", ".", "sim_obj", ".", "rotation", "=", "mn", ".", "Quaternion", "(", "\n", "mn", ".", "Vector3", "(", "agent_rot", "[", ":", "3", "]", ")", ",", "agent_rot", "[", "3", "]", "\n", ")", "\n", "\n", "if", "\"RENDER_CAMERA_OFFSET\"", "in", "self", ".", "habitat_config", ":", "\n", "                ", "self", ".", "robot", ".", "params", ".", "cameras", "[", "\n", "\"robot_third\"", "\n", "]", ".", "cam_offset_pos", "=", "mn", ".", "Vector3", "(", "\n", "self", ".", "habitat_config", ".", "RENDER_CAMERA_OFFSET", "\n", ")", "\n", "", "if", "\"RENDER_CAMERA_LOOKAT\"", "in", "self", ".", "habitat_config", ":", "\n", "                ", "self", ".", "robot", ".", "params", ".", "cameras", "[", "\n", "\"robot_third\"", "\n", "]", ".", "cam_look_at_pos", "=", "mn", ".", "Vector3", "(", "\n", "self", ".", "habitat_config", ".", "RENDER_CAMERA_LOOKAT", "\n", ")", "\n", "\n", "# add episode clutter objects additional to base scene objects", "\n", "", "", "self", ".", "_add_objs", "(", "ep_info", ",", "should_add_objects", ")", "\n", "self", ".", "_setup_targets", "(", ")", "\n", "\n", "self", ".", "add_markers", "(", "ep_info", ")", "\n", "\n", "# auto-sleep rigid objects as optimization", "\n", "if", "self", ".", "habitat_config", ".", "AUTO_SLEEP", ":", "\n", "            ", "self", ".", "sleep_all_objects", "(", ")", "\n", "\n", "", "if", "new_scene", ":", "\n", "            ", "self", ".", "_load_navmesh", "(", ")", "\n", "\n", "# Get the starting positions of the target objects.", "\n", "", "rom", "=", "self", ".", "get_rigid_object_manager", "(", ")", "\n", "scene_pos", "=", "self", ".", "get_scene_pos", "(", ")", "\n", "self", ".", "target_start_pos", "=", "np", ".", "array", "(", "\n", "[", "\n", "scene_pos", "[", "\n", "self", ".", "scene_obj_ids", ".", "index", "(", "\n", "rom", ".", "get_object_by_handle", "(", "t_handle", ")", ".", "object_id", "\n", ")", "\n", "]", "\n", "for", "t_handle", ",", "_", "in", "self", ".", "_targets", ".", "items", "(", ")", "\n", "]", "\n", ")", "\n", "\n", "if", "self", ".", "first_setup", ":", "\n", "            ", "self", ".", "first_setup", "=", "False", "\n", "ik_arm_urdf", "=", "self", ".", "habitat_config", ".", "get", "(", "\"IK_ARM_URDF\"", ",", "None", ")", "\n", "if", "ik_arm_urdf", "is", "not", "None", "and", "self", ".", "_is_pb_installed", ":", "\n", "                ", "self", ".", "_ik_helper", "=", "IkHelper", "(", "\n", "self", ".", "habitat_config", ".", "IK_ARM_URDF", ",", "\n", "np", ".", "array", "(", "self", ".", "robot", ".", "params", ".", "arm_init_params", ")", ",", "\n", ")", "\n", "# Capture the starting art states", "\n", "", "self", ".", "_start_art_states", "=", "{", "\n", "ao", ":", "ao", ".", "joint_positions", "for", "ao", "in", "self", ".", "art_objs", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.set_robot_base_to_random_point": [[287, 314], ["range", "rearrange_sim.RearrangeSim.pathfinder.get_random_navigable_point", "rearrange_sim.RearrangeSim.safe_snap_point", "numpy.random.uniform", "numpy.random.uniform", "rearrange_sim.RearrangeSim.perform_discrete_collision_detection", "habitat.tasks.rearrange.utils.rearrange_collision", "habitat.tasks.rearrange.utils.rearrange_logger.warning"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.safe_snap_point", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.rearrange_collision"], ["", "", "def", "set_robot_base_to_random_point", "(", "\n", "self", ",", "max_attempts", ":", "int", "=", "50", "\n", ")", "->", "Tuple", "[", "np", ".", "ndarray", ",", "float", "]", ":", "\n", "        ", "\"\"\"\n        :returns: The set base position and rotation\n        \"\"\"", "\n", "for", "attempt_i", "in", "range", "(", "max_attempts", ")", ":", "\n", "            ", "start_pos", "=", "self", ".", "pathfinder", ".", "get_random_navigable_point", "(", ")", "\n", "\n", "start_pos", "=", "self", ".", "safe_snap_point", "(", "start_pos", ")", "\n", "start_rot", "=", "np", ".", "random", ".", "uniform", "(", "0", ",", "2", "*", "np", ".", "pi", ")", "\n", "\n", "self", ".", "robot", ".", "base_pos", "=", "start_pos", "\n", "self", ".", "robot", ".", "base_rot", "=", "start_rot", "\n", "self", ".", "perform_discrete_collision_detection", "(", ")", "\n", "did_collide", ",", "details", "=", "rearrange_collision", "(", "\n", "self", ",", "\n", "True", ",", "\n", "ignore_base", "=", "False", ",", "\n", ")", "\n", "if", "not", "did_collide", ":", "\n", "                ", "break", "\n", "", "", "if", "attempt_i", "==", "max_attempts", "-", "1", ":", "\n", "            ", "rearrange_logger", ".", "warning", "(", "\n", "f\"Could not find a collision free start for {self.ep_info['episode_id']}\"", "\n", ")", "\n", "", "return", "start_pos", ",", "start_rot", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim._setup_targets": [[315, 320], ["rearrange_sim.RearrangeSim.ep_info[].items", "magnum.Matrix4", "range", "range"], "methods", ["None"], ["", "def", "_setup_targets", "(", "self", ")", ":", "\n", "        ", "self", ".", "_targets", "=", "{", "}", "\n", "for", "target_handle", ",", "transform", "in", "self", ".", "ep_info", "[", "\"targets\"", "]", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "_targets", "[", "target_handle", "]", "=", "mn", ".", "Matrix4", "(", "\n", "[", "[", "transform", "[", "j", "]", "[", "i", "]", "for", "j", "in", "range", "(", "4", ")", "]", "for", "i", "in", "range", "(", "4", ")", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim._load_navmesh": [[322, 336], ["os.join", "os.join", "rearrange_sim.RearrangeSim.pathfinder.load_nav_mesh", "numpy.stack", "numpy.stack", "max", "[].split", "rearrange_sim.RearrangeSim.pathfinder.build_navmesh_vertices", "rearrange_sim.RearrangeSim.pathfinder.island_radius", "rearrange_sim.RearrangeSim.ep_info[].split", "rearrange_sim.RearrangeSim.ep_info[].split"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSim.island_radius"], ["", "", "def", "_load_navmesh", "(", "self", ")", ":", "\n", "        ", "scene_name", "=", "self", ".", "ep_info", "[", "\"scene_id\"", "]", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "base_dir", "=", "osp", ".", "join", "(", "*", "self", ".", "ep_info", "[", "\"scene_id\"", "]", ".", "split", "(", "\"/\"", ")", "[", ":", "2", "]", ")", "\n", "\n", "navmesh_path", "=", "osp", ".", "join", "(", "base_dir", ",", "\"navmeshes\"", ",", "scene_name", "+", "\".navmesh\"", ")", "\n", "self", ".", "pathfinder", ".", "load_nav_mesh", "(", "navmesh_path", ")", "\n", "\n", "self", ".", "_navmesh_vertices", "=", "np", ".", "stack", "(", "\n", "self", ".", "pathfinder", ".", "build_navmesh_vertices", "(", ")", ",", "axis", "=", "0", "\n", ")", "\n", "self", ".", "_island_sizes", "=", "[", "\n", "self", ".", "pathfinder", ".", "island_radius", "(", "p", ")", "for", "p", "in", "self", ".", "_navmesh_vertices", "\n", "]", "\n", "self", ".", "_max_island_size", "=", "max", "(", "self", ".", "_island_sizes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim._clear_objects": [[337, 362], ["rearrange_sim.RearrangeSim.get_rigid_object_manager", "rearrange_sim.RearrangeSim.viz_ids.values", "collections.defaultdict", "rearrange_sim.RearrangeSim._viz_objs.values", "rearrange_sim.RearrangeSim.get_library_has_id", "rearrange_sim.RearrangeSim.get_library_has_id", "rearrange_sim.RearrangeSim.get_library_has_id", "rearrange_sim.RearrangeSim.remove_object_by_id", "rearrange_sim.RearrangeSim.remove_object_by_id", "rearrange_sim.RearrangeSim.remove_object_by_id"], "methods", ["None"], ["", "def", "_clear_objects", "(", "self", ",", "should_add_objects", ":", "bool", ")", "->", "None", ":", "\n", "        ", "rom", "=", "self", ".", "get_rigid_object_manager", "(", ")", "\n", "\n", "# Clear all the rigid objects.", "\n", "if", "should_add_objects", ":", "\n", "            ", "for", "scene_obj_id", "in", "self", ".", "scene_obj_ids", ":", "\n", "                ", "if", "rom", ".", "get_library_has_id", "(", "scene_obj_id", ")", ":", "\n", "                    ", "rom", ".", "remove_object_by_id", "(", "scene_obj_id", ")", "\n", "", "", "self", ".", "scene_obj_ids", "=", "[", "]", "\n", "\n", "# Reset all marker visualization points", "\n", "", "for", "obj_id", "in", "self", ".", "viz_ids", ".", "values", "(", ")", ":", "\n", "            ", "if", "rom", ".", "get_library_has_id", "(", "obj_id", ")", ":", "\n", "                ", "rom", ".", "remove_object_by_id", "(", "obj_id", ")", "\n", "", "", "self", ".", "viz_ids", "=", "defaultdict", "(", "lambda", ":", "None", ")", "\n", "\n", "# Remove all object mesh visualizations.", "\n", "for", "viz_obj", "in", "self", ".", "_viz_objs", ".", "values", "(", ")", ":", "\n", "            ", "if", "rom", ".", "get_library_has_id", "(", "viz_obj", ".", "object_id", ")", ":", "\n", "                ", "rom", ".", "remove_object_by_id", "(", "viz_obj", ".", "object_id", ")", "\n", "", "", "self", ".", "_viz_objs", "=", "{", "}", "\n", "\n", "# Do not remove the articulated objects from the scene, these are", "\n", "# managed by the underlying sim.", "\n", "self", ".", "art_objs", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim._set_ao_states_from_ep": [[363, 378], ["rearrange_sim.RearrangeSim.get_articulated_object_manager", "ep_info[].items", "rearrange_sim.RearrangeSim.get_object_by_handle", "joint_states.items", "rearrange_sim.RearrangeSim.get_object_by_handle.get_link_joint_pos_offset", "int"], "methods", ["None"], ["", "def", "_set_ao_states_from_ep", "(", "self", ",", "ep_info", ":", "Config", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Sets the ArticulatedObject states for the episode which are differ from base scene state.\n        \"\"\"", "\n", "aom", "=", "self", ".", "get_articulated_object_manager", "(", ")", "\n", "# NOTE: ep_info[\"ao_states\"]: Dict[str, Dict[int, float]] : {instance_handle -> {link_ix, state}}", "\n", "for", "aoi_handle", ",", "joint_states", "in", "ep_info", "[", "\"ao_states\"", "]", ".", "items", "(", ")", ":", "\n", "            ", "ao", "=", "aom", ".", "get_object_by_handle", "(", "aoi_handle", ")", "\n", "ao_pose", "=", "ao", ".", "joint_positions", "\n", "for", "link_ix", ",", "joint_state", "in", "joint_states", ".", "items", "(", ")", ":", "\n", "                ", "joint_position_index", "=", "ao", ".", "get_link_joint_pos_offset", "(", "\n", "int", "(", "link_ix", ")", "\n", ")", "\n", "ao_pose", "[", "joint_position_index", "]", "=", "joint_state", "\n", "", "ao", ".", "joint_positions", "=", "ao_pose", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.safe_snap_point": [[379, 412], ["rearrange_sim.RearrangeSim.pathfinder.snap_point", "rearrange_sim.RearrangeSim.pathfinder.island_radius", "numpy.isnan", "numpy.isnan", "range", "numpy.isnan", "numpy.isnan", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.argmin", "numpy.argmin", "rearrange_sim.RearrangeSim.pathfinder.get_random_navigable_point_near", "rearrange_sim.RearrangeSim.pathfinder.island_radius", "zip", "numpy.array().reshape", "numpy.array().reshape", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSim.island_radius", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSim.island_radius"], ["", "", "def", "safe_snap_point", "(", "self", ",", "pos", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        snap_point can return nan which produces hard to catch errors.\n        \"\"\"", "\n", "new_pos", "=", "self", ".", "pathfinder", ".", "snap_point", "(", "pos", ")", "\n", "island_radius", "=", "self", ".", "pathfinder", ".", "island_radius", "(", "new_pos", ")", "\n", "\n", "if", "np", ".", "isnan", "(", "new_pos", "[", "0", "]", ")", "or", "island_radius", "!=", "self", ".", "_max_island_size", ":", "\n", "# The point is not valid or not in a different island. Find a", "\n", "# different point nearby that is on a different island and is", "\n", "# valid.", "\n", "            ", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "                ", "new_pos", "=", "self", ".", "pathfinder", ".", "get_random_navigable_point_near", "(", "\n", "pos", ",", "1.5", ",", "1000", "\n", ")", "\n", "island_radius", "=", "self", ".", "pathfinder", ".", "island_radius", "(", "new_pos", ")", "\n", "if", "island_radius", "==", "self", ".", "_max_island_size", ":", "\n", "                    ", "break", "\n", "\n", "", "", "", "if", "np", ".", "isnan", "(", "new_pos", "[", "0", "]", ")", "or", "island_radius", "!=", "self", ".", "_max_island_size", ":", "\n", "# This is a last resort, take a navmesh vertex that is closest", "\n", "            ", "use_verts", "=", "[", "\n", "x", "\n", "for", "s", ",", "x", "in", "zip", "(", "self", ".", "_island_sizes", ",", "self", ".", "_navmesh_vertices", ")", "\n", "if", "s", "==", "self", ".", "_max_island_size", "\n", "]", "\n", "distances", "=", "np", ".", "linalg", ".", "norm", "(", "\n", "np", ".", "array", "(", "pos", ")", ".", "reshape", "(", "1", ",", "3", ")", "-", "use_verts", ",", "axis", "=", "-", "1", "\n", ")", "\n", "closest_idx", "=", "np", ".", "argmin", "(", "distances", ")", "\n", "new_pos", "=", "self", ".", "_navmesh_vertices", "[", "closest_idx", "]", "\n", "\n", "", "return", "new_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim._add_objs": [[413, 458], ["rearrange_sim.RearrangeSim.get_rigid_object_manager", "collections.defaultdict", "enumerate", "rearrange_sim.RearrangeSim.get_articulated_object_manager", "rearrange_sim.RearrangeSim.get_object_handles", "magnum.Matrix4", "magnum.Vector3.zero_init", "magnum.Vector3.zero_init", "rearrange_sim.RearrangeSim.art_objs.append", "rearrange_sim.RearrangeSim.get_object_template_manager", "rearrange_sim.RearrangeSim.get_templates_by_handle_substring", "rearrange_sim.RearrangeSim.add_object_by_template_handle", "rearrange_sim.RearrangeSim.get_object_by_id", "rearrange_sim.RearrangeSim.scene_obj_ids.append", "rearrange_sim.RearrangeSim.scene_obj_ids.index", "rearrange_sim.RearrangeSim.get_object_by_handle", "len", "obj_handle.split", "rearrange_sim.RearrangeSim.get_templates_by_handle_substring.values", "list", "range", "rearrange_sim.RearrangeSim.get_templates_by_handle_substring.keys", "range"], "methods", ["None"], ["", "def", "_add_objs", "(", "self", ",", "ep_info", ":", "Config", ",", "should_add_objects", ":", "bool", ")", "->", "None", ":", "\n", "# Load clutter objects:", "\n", "# NOTE: ep_info[\"rigid_objs\"]: List[Tuple[str, np.array]]  # list of objects, each with (handle, transform)", "\n", "        ", "rom", "=", "self", ".", "get_rigid_object_manager", "(", ")", "\n", "obj_counts", ":", "Dict", "[", "str", ",", "int", "]", "=", "defaultdict", "(", "int", ")", "\n", "\n", "for", "i", ",", "(", "obj_handle", ",", "transform", ")", "in", "enumerate", "(", "ep_info", "[", "\"rigid_objs\"", "]", ")", ":", "\n", "            ", "if", "should_add_objects", ":", "\n", "                ", "obj_attr_mgr", "=", "self", ".", "get_object_template_manager", "(", ")", "\n", "matching_templates", "=", "(", "\n", "obj_attr_mgr", ".", "get_templates_by_handle_substring", "(", "obj_handle", ")", "\n", ")", "\n", "assert", "(", "\n", "len", "(", "matching_templates", ".", "values", "(", ")", ")", "==", "1", "\n", ")", ",", "f\"Object attributes not uniquely matched to shortened handle. '{obj_handle}' matched to {matching_templates}. TODO: relative paths as handles should fix some duplicates. For now, try renaming objects to avoid collision.\"", "\n", "ro", "=", "rom", ".", "add_object_by_template_handle", "(", "\n", "list", "(", "matching_templates", ".", "keys", "(", ")", ")", "[", "0", "]", "\n", ")", "\n", "", "else", ":", "\n", "                ", "ro", "=", "rom", ".", "get_object_by_id", "(", "self", ".", "scene_obj_ids", "[", "i", "]", ")", "\n", "\n", "# The saved matrices need to be flipped when reloading.", "\n", "", "ro", ".", "transformation", "=", "mn", ".", "Matrix4", "(", "\n", "[", "[", "transform", "[", "j", "]", "[", "i", "]", "for", "j", "in", "range", "(", "4", ")", "]", "for", "i", "in", "range", "(", "4", ")", "]", "\n", ")", "\n", "ro", ".", "angular_velocity", "=", "mn", ".", "Vector3", ".", "zero_init", "(", ")", "\n", "ro", ".", "linear_velocity", "=", "mn", ".", "Vector3", ".", "zero_init", "(", ")", "\n", "\n", "other_obj_handle", "=", "(", "\n", "obj_handle", ".", "split", "(", "\".\"", ")", "[", "0", "]", "+", "f\"_:{obj_counts[obj_handle]:04d}\"", "\n", ")", "\n", "if", "should_add_objects", ":", "\n", "                ", "self", ".", "scene_obj_ids", ".", "append", "(", "ro", ".", "object_id", ")", "\n", "\n", "", "if", "other_obj_handle", "in", "self", ".", "instance_handle_to_ref_handle", ":", "\n", "                ", "ref_handle", "=", "self", ".", "instance_handle_to_ref_handle", "[", "\n", "other_obj_handle", "\n", "]", "\n", "rel_idx", "=", "self", ".", "scene_obj_ids", ".", "index", "(", "ro", ".", "object_id", ")", "\n", "self", ".", "ref_handle_to_rigid_obj_id", "[", "ref_handle", "]", "=", "rel_idx", "\n", "", "obj_counts", "[", "obj_handle", "]", "+=", "1", "\n", "\n", "", "ao_mgr", "=", "self", ".", "get_articulated_object_manager", "(", ")", "\n", "for", "aoi_handle", "in", "ao_mgr", ".", "get_object_handles", "(", ")", ":", "\n", "            ", "self", ".", "art_objs", ".", "append", "(", "ao_mgr", ".", "get_object_by_handle", "(", "aoi_handle", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim._create_obj_viz": [[459, 507], ["rearrange_sim.RearrangeSim._markers.items", "rearrange_sim.RearrangeSim.get_rigid_object_manager", "rearrange_sim.RearrangeSim.get_object_template_manager", "rearrange_sim.RearrangeSim._targets.items", "m.get_current_transform", "rearrange_sim.RearrangeSim.visualize_position", "rearrange_sim.RearrangeSim.set_object_bb_draw", "rearrange_sim.RearrangeSim.get_templates_by_handle_substring", "rearrange_sim.RearrangeSim.add_object_by_template_handle", "rearrange_sim.RearrangeSim.set_object_bb_draw", "habitat.tasks.rearrange.utils.make_render_only", "habitat.tasks.rearrange.utils.get_aabb", "rearrange_sim.RearrangeSim.visualize_position", "rearrange_sim.RearrangeSim.visualize_position", "rearrange_sim.RearrangeSim.get_object_by_handle", "target_handle.split", "list", "rearrange_sim.RearrangeSim.get_templates_by_handle_substring.keys"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.marker_info.MarkerInfo.get_current_transform", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.visualize_position", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.make_render_only", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.get_aabb", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.visualize_position", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.visualize_position"], ["", "", "def", "_create_obj_viz", "(", "self", ",", "ep_info", ":", "Config", ")", ":", "\n", "        ", "\"\"\"\n        Adds a visualization of the goal for each of the target objects in the\n        scene. This is the same as the target object, but is a render only\n        object. This also places dots around the bounding box of the object to\n        further distinguish the goal from the target object.\n        \"\"\"", "\n", "for", "marker_name", ",", "m", "in", "self", ".", "_markers", ".", "items", "(", ")", ":", "\n", "            ", "m_T", "=", "m", ".", "get_current_transform", "(", ")", "\n", "self", ".", "viz_ids", "[", "marker_name", "]", "=", "self", ".", "visualize_position", "(", "\n", "m_T", ".", "translation", ",", "self", ".", "viz_ids", "[", "marker_name", "]", "\n", ")", "\n", "\n", "", "rom", "=", "self", ".", "get_rigid_object_manager", "(", ")", "\n", "obj_attr_mgr", "=", "self", ".", "get_object_template_manager", "(", ")", "\n", "for", "target_handle", ",", "transform", "in", "self", ".", "_targets", ".", "items", "(", ")", ":", "\n", "# Visualize the goal of the object", "\n", "            ", "if", "self", ".", "habitat_config", ".", "DEBUG_RENDER_GOAL", ":", "\n", "                ", "new_target_handle", "=", "(", "\n", "target_handle", ".", "split", "(", "\"_:\"", ")", "[", "0", "]", "+", "\".object_config.json\"", "\n", ")", "\n", "matching_templates", "=", "(", "\n", "obj_attr_mgr", ".", "get_templates_by_handle_substring", "(", "\n", "new_target_handle", "\n", ")", "\n", ")", "\n", "ro", "=", "rom", ".", "add_object_by_template_handle", "(", "\n", "list", "(", "matching_templates", ".", "keys", "(", ")", ")", "[", "0", "]", "\n", ")", "\n", "self", ".", "set_object_bb_draw", "(", "True", ",", "ro", ".", "object_id", ")", "\n", "ro", ".", "transformation", "=", "transform", "\n", "make_render_only", "(", "ro", ",", "self", ")", "\n", "bb", "=", "get_aabb", "(", "ro", ".", "object_id", ",", "self", ",", "True", ")", "\n", "bb_viz_name1", "=", "target_handle", "+", "\"_bb1\"", "\n", "bb_viz_name2", "=", "target_handle", "+", "\"_bb2\"", "\n", "viz_r", "=", "0.01", "\n", "self", ".", "viz_ids", "[", "bb_viz_name1", "]", "=", "self", ".", "visualize_position", "(", "\n", "bb", ".", "front_bottom_right", ",", "self", ".", "viz_ids", "[", "bb_viz_name1", "]", ",", "viz_r", "\n", ")", "\n", "self", ".", "viz_ids", "[", "bb_viz_name2", "]", "=", "self", ".", "visualize_position", "(", "\n", "bb", ".", "back_top_left", ",", "self", ".", "viz_ids", "[", "bb_viz_name2", "]", ",", "viz_r", "\n", ")", "\n", "\n", "self", ".", "_viz_objs", "[", "target_handle", "]", "=", "ro", "\n", "\n", "# Draw a bounding box around the target object", "\n", "", "self", ".", "set_object_bb_draw", "(", "\n", "True", ",", "rom", ".", "get_object_by_handle", "(", "target_handle", ")", ".", "object_id", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.capture_state": [[509, 544], ["rearrange_sim.RearrangeSim.get_rigid_object_manager", "rearrange_sim.RearrangeSim.get_object_by_id"], "methods", ["None"], ["", "", "def", "capture_state", "(", "self", ",", "with_robot_js", "=", "False", ")", "->", "Dict", "[", "str", ",", "Any", "]", ":", "\n", "        ", "\"\"\"\n        Record and return a dict of state info.\n\n        :param with_robot_js: If true, state dict includes robot joint positions in addition.\n\n        State info dict includes:\n         - Robot transform\n         - a list of ArticulatedObject transforms\n         - a list of RigidObject transforms\n         - a list of ArticulatedObject joint states\n         - the object id of currently grasped object (or None)\n         - (optionally) the robot's joint positions\n        \"\"\"", "\n", "# Don't need to capture any velocity information because this will", "\n", "# automatically be set to 0 in `set_state`.", "\n", "robot_T", "=", "self", ".", "robot", ".", "sim_obj", ".", "transformation", "\n", "art_T", "=", "[", "ao", ".", "transformation", "for", "ao", "in", "self", ".", "art_objs", "]", "\n", "rom", "=", "self", ".", "get_rigid_object_manager", "(", ")", "\n", "static_T", "=", "[", "\n", "rom", ".", "get_object_by_id", "(", "i", ")", ".", "transformation", "for", "i", "in", "self", ".", "scene_obj_ids", "\n", "]", "\n", "art_pos", "=", "[", "ao", ".", "joint_positions", "for", "ao", "in", "self", ".", "art_objs", "]", "\n", "robot_js", "=", "self", ".", "robot", ".", "sim_obj", ".", "joint_positions", "\n", "\n", "ret", "=", "{", "\n", "\"robot_T\"", ":", "robot_T", ",", "\n", "\"art_T\"", ":", "art_T", ",", "\n", "\"static_T\"", ":", "static_T", ",", "\n", "\"art_pos\"", ":", "art_pos", ",", "\n", "\"obj_hold\"", ":", "self", ".", "grasp_mgr", ".", "snap_idx", ",", "\n", "}", "\n", "if", "with_robot_js", ":", "\n", "            ", "ret", "[", "\"robot_js\"", "]", "=", "robot_js", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.set_state": [[545, 583], ["rearrange_sim.RearrangeSim.get_rigid_object_manager", "zip", "zip", "zip", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "rearrange_sim.RearrangeSim.get_object_by_id", "magnum.Vector3", "magnum.Vector3", "rearrange_sim.RearrangeSim.internal_step", "rearrange_sim.RearrangeSim.grasp_mgr.snap_to_obj", "rearrange_sim.RearrangeSim.grasp_mgr.desnap"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.internal_step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_grasp_manager.RearrangeGraspManager.snap_to_obj", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_grasp_manager.RearrangeGraspManager.desnap"], ["", "def", "set_state", "(", "self", ",", "state", ":", "Dict", "[", "str", ",", "Any", "]", ",", "set_hold", "=", "False", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Sets the simulation state from a cached state info dict. See capture_state().\n\n          :param set_hold: If true this will set the snapped object from the `state`.\n\n          TODO: This should probably be True by default, but I am not sure the effect\n          it will have.\n        \"\"\"", "\n", "rom", "=", "self", ".", "get_rigid_object_manager", "(", ")", "\n", "if", "state", "[", "\"robot_T\"", "]", "is", "not", "None", ":", "\n", "            ", "self", ".", "robot", ".", "sim_obj", ".", "transformation", "=", "state", "[", "\"robot_T\"", "]", "\n", "n_dof", "=", "len", "(", "self", ".", "robot", ".", "sim_obj", ".", "joint_forces", ")", "\n", "self", ".", "robot", ".", "sim_obj", ".", "joint_forces", "=", "np", ".", "zeros", "(", "n_dof", ")", "\n", "self", ".", "robot", ".", "sim_obj", ".", "joint_velocities", "=", "np", ".", "zeros", "(", "n_dof", ")", "\n", "\n", "", "if", "\"robot_js\"", "in", "state", ":", "\n", "            ", "self", ".", "robot", ".", "sim_obj", ".", "joint_positions", "=", "state", "[", "\"robot_js\"", "]", "\n", "\n", "", "for", "T", ",", "ao", "in", "zip", "(", "state", "[", "\"art_T\"", "]", ",", "self", ".", "art_objs", ")", ":", "\n", "            ", "ao", ".", "transformation", "=", "T", "\n", "\n", "", "for", "T", ",", "i", "in", "zip", "(", "state", "[", "\"static_T\"", "]", ",", "self", ".", "scene_obj_ids", ")", ":", "\n", "# reset object transform", "\n", "            ", "obj", "=", "rom", ".", "get_object_by_id", "(", "i", ")", "\n", "obj", ".", "transformation", "=", "T", "\n", "obj", ".", "linear_velocity", "=", "mn", ".", "Vector3", "(", ")", "\n", "obj", ".", "angular_velocity", "=", "mn", ".", "Vector3", "(", ")", "\n", "\n", "", "for", "p", ",", "ao", "in", "zip", "(", "state", "[", "\"art_pos\"", "]", ",", "self", ".", "art_objs", ")", ":", "\n", "            ", "ao", ".", "joint_positions", "=", "p", "\n", "\n", "", "if", "set_hold", ":", "\n", "            ", "if", "state", "[", "\"obj_hold\"", "]", "is", "not", "None", ":", "\n", "                ", "self", ".", "internal_step", "(", "-", "1", ")", "\n", "self", ".", "grasp_mgr", ".", "snap_to_obj", "(", "state", "[", "\"obj_hold\"", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "grasp_mgr", ".", "desnap", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.step": [[584, 657], ["rearrange_sim.RearrangeSim.get_rigid_object_manager", "rearrange_sim.RearrangeSim.grasp_mgr.update", "rearrange_sim.RearrangeSim.habitat_config.HABITAT_SIM_V0.get", "rearrange_sim.RearrangeSim.get_rigid_object_manager", "rearrange_sim.RearrangeSim._try_acquire_context", "rearrange_sim.RearrangeSim._targets.items", "rearrange_sim.RearrangeSim._viz_objs.values", "rearrange_sim.RearrangeSim.viz_ids.items", "collections.defaultdict", "rearrange_sim.RearrangeSim.robot.update", "rearrange_sim.RearrangeSim.start_async_render", "range", "rearrange_sim.RearrangeSim.get_sensor_observations_async_finish", "rearrange_sim.RearrangeSim._sensor_suite.get_observations", "range", "rearrange_sim.RearrangeSim.get_sensor_observations", "rearrange_sim.RearrangeSim._sensor_suite.get_observations", "rearrange_sim.RearrangeSim._update_markers", "rearrange_sim.RearrangeSim._try_acquire_context", "add_back_viz_objs.items", "rearrange_sim.RearrangeSim._create_obj_viz", "rearrange_sim.RearrangeSim.get_sensor_observations", "rearrange_sim.RearrangeSim.gfx_replay_manager.save_keyframe", "rearrange_sim.RearrangeSim.set_object_bb_draw", "rearrange_sim.RearrangeSim.get_object_by_id", "rearrange_sim.RearrangeSim.remove_object_by_id", "rearrange_sim.RearrangeSim.internal_step", "rearrange_sim.RearrangeSim.internal_step", "rearrange_sim.RearrangeSim.visualize_position", "rearrange_sim.RearrangeSim.get_library_has_id", "rearrange_sim.RearrangeSim.remove_object_by_id", "rearrange_sim.RearrangeSim.get_object_by_handle"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.il.metrics.Metric.update", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim._try_acquire_context", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.il.metrics.Metric.update", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get_observations", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get_observations", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim._update_markers", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim._try_acquire_context", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim._create_obj_viz", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.internal_step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.internal_step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.visualize_position"], ["", "", "", "def", "step", "(", "self", ",", "action", ":", "Union", "[", "str", ",", "int", "]", ")", "->", "Observations", ":", "\n", "        ", "rom", "=", "self", ".", "get_rigid_object_manager", "(", ")", "\n", "\n", "if", "self", ".", "habitat_config", ".", "DEBUG_RENDER", ":", "\n", "            ", "rom", "=", "self", ".", "get_rigid_object_manager", "(", ")", "\n", "self", ".", "_try_acquire_context", "(", ")", "\n", "# Don't draw bounding boxes over target objects.", "\n", "for", "obj_handle", ",", "_", "in", "self", ".", "_targets", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "set_object_bb_draw", "(", "\n", "False", ",", "rom", ".", "get_object_by_handle", "(", "obj_handle", ")", ".", "object_id", "\n", ")", "\n", "\n", "# Remove viz objects", "\n", "", "for", "obj", "in", "self", ".", "_viz_objs", ".", "values", "(", ")", ":", "\n", "                ", "if", "obj", "is", "not", "None", "and", "rom", ".", "get_library_has_id", "(", "obj", ".", "object_id", ")", ":", "\n", "                    ", "rom", ".", "remove_object_by_id", "(", "obj", ".", "object_id", ")", "\n", "", "", "self", ".", "_viz_objs", "=", "{", "}", "\n", "\n", "# Remove all visualized positions", "\n", "add_back_viz_objs", "=", "{", "}", "\n", "for", "name", ",", "viz_id", "in", "self", ".", "viz_ids", ".", "items", "(", ")", ":", "\n", "                ", "if", "viz_id", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "viz_obj", "=", "rom", ".", "get_object_by_id", "(", "viz_id", ")", "\n", "before_pos", "=", "viz_obj", ".", "translation", "\n", "rom", ".", "remove_object_by_id", "(", "viz_id", ")", "\n", "r", "=", "self", ".", "_viz_handle_to_template", "[", "viz_id", "]", "\n", "add_back_viz_objs", "[", "name", "]", "=", "(", "before_pos", ",", "r", ")", "\n", "", "self", ".", "viz_ids", "=", "defaultdict", "(", "lambda", ":", "None", ")", "\n", "\n", "", "self", ".", "grasp_mgr", ".", "update", "(", ")", "\n", "if", "self", ".", "robot", "is", "not", "None", "and", "self", ".", "habitat_config", ".", "UPDATE_ROBOT", ":", "\n", "            ", "self", ".", "robot", ".", "update", "(", ")", "\n", "\n", "", "if", "self", ".", "habitat_config", ".", "CONCUR_RENDER", ":", "\n", "            ", "self", ".", "_prev_sim_obs", "=", "self", ".", "start_async_render", "(", ")", "\n", "\n", "for", "_", "in", "range", "(", "self", ".", "ac_freq_ratio", ")", ":", "\n", "                ", "self", ".", "internal_step", "(", "-", "1", ",", "update_robot", "=", "False", ")", "\n", "\n", "", "self", ".", "_prev_sim_obs", "=", "self", ".", "get_sensor_observations_async_finish", "(", ")", "\n", "obs", "=", "self", ".", "_sensor_suite", ".", "get_observations", "(", "self", ".", "_prev_sim_obs", ")", "\n", "", "else", ":", "\n", "            ", "for", "_", "in", "range", "(", "self", ".", "ac_freq_ratio", ")", ":", "\n", "                ", "self", ".", "internal_step", "(", "-", "1", ",", "update_robot", "=", "False", ")", "\n", "", "self", ".", "_prev_sim_obs", "=", "self", ".", "get_sensor_observations", "(", ")", "\n", "obs", "=", "self", ".", "_sensor_suite", ".", "get_observations", "(", "self", ".", "_prev_sim_obs", ")", "\n", "\n", "", "if", "self", ".", "habitat_config", ".", "NEEDS_MARKERS", ":", "\n", "            ", "self", ".", "_update_markers", "(", ")", "\n", "\n", "# TODO: Make debug cameras more flexible", "\n", "", "if", "\"robot_third_rgb\"", "in", "obs", "and", "self", ".", "habitat_config", ".", "DEBUG_RENDER", ":", "\n", "            ", "self", ".", "_try_acquire_context", "(", ")", "\n", "for", "k", ",", "(", "pos", ",", "r", ")", "in", "add_back_viz_objs", ".", "items", "(", ")", ":", "\n", "                ", "viz_id", "=", "self", ".", "viz_ids", "[", "k", "]", "\n", "\n", "self", ".", "viz_ids", "[", "k", "]", "=", "self", ".", "visualize_position", "(", "\n", "pos", ",", "self", ".", "viz_ids", "[", "k", "]", ",", "r", "=", "r", "\n", ")", "\n", "\n", "# Also render debug information", "\n", "", "self", ".", "_create_obj_viz", "(", "self", ".", "ep_info", ")", "\n", "\n", "debug_obs", "=", "self", ".", "get_sensor_observations", "(", ")", "\n", "obs", "[", "\"robot_third_rgb\"", "]", "=", "debug_obs", "[", "\"robot_third_rgb\"", "]", "[", ":", ",", ":", ",", ":", "3", "]", "\n", "\n", "", "if", "self", ".", "habitat_config", ".", "HABITAT_SIM_V0", ".", "get", "(", "\n", "\"ENABLE_GFX_REPLAY_SAVE\"", ",", "False", "\n", ")", ":", "\n", "            ", "self", ".", "gfx_replay_manager", ".", "save_keyframe", "(", ")", "\n", "\n", "", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.visualize_position": [[658, 688], ["rearrange_sim.RearrangeSim.get_object_template_manager", "rearrange_sim.RearrangeSim.get_rigid_object_manager", "magnum.Vector3", "rearrange_sim.RearrangeSim.add_object_by_template_id", "habitat.tasks.rearrange.utils.make_render_only", "rearrange_sim.RearrangeSim.get_object_by_id", "rearrange_sim.RearrangeSim.get_template_by_handle", "magnum.Vector3", "rearrange_sim.RearrangeSim.register_template", "rearrange_sim.RearrangeSim.get_template_handles", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.make_render_only"], ["", "def", "visualize_position", "(", "\n", "self", ",", "\n", "position", ":", "np", ".", "ndarray", ",", "\n", "viz_id", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "r", ":", "float", "=", "0.05", ",", "\n", ")", "->", "int", ":", "\n", "        ", "\"\"\"Adds the sphere object to the specified position for visualization purpose.\"\"\"", "\n", "\n", "template_mgr", "=", "self", ".", "get_object_template_manager", "(", ")", "\n", "rom", "=", "self", ".", "get_rigid_object_manager", "(", ")", "\n", "viz_obj", "=", "None", "\n", "if", "viz_id", "is", "None", ":", "\n", "            ", "if", "r", "not", "in", "self", ".", "_viz_templates", ":", "\n", "                ", "template", "=", "template_mgr", ".", "get_template_by_handle", "(", "\n", "template_mgr", ".", "get_template_handles", "(", "\"sphere\"", ")", "[", "0", "]", "\n", ")", "\n", "template", ".", "scale", "=", "mn", ".", "Vector3", "(", "r", ",", "r", ",", "r", ")", "\n", "self", ".", "_viz_templates", "[", "str", "(", "r", ")", "]", "=", "template_mgr", ".", "register_template", "(", "\n", "template", ",", "\"ball_new_viz_\"", "+", "str", "(", "r", ")", "\n", ")", "\n", "", "viz_obj", "=", "rom", ".", "add_object_by_template_id", "(", "\n", "self", ".", "_viz_templates", "[", "str", "(", "r", ")", "]", "\n", ")", "\n", "make_render_only", "(", "viz_obj", ",", "self", ")", "\n", "self", ".", "_viz_handle_to_template", "[", "viz_obj", ".", "object_id", "]", "=", "r", "\n", "", "else", ":", "\n", "            ", "viz_obj", "=", "rom", ".", "get_object_by_id", "(", "viz_id", ")", "\n", "\n", "", "viz_obj", ".", "translation", "=", "mn", ".", "Vector3", "(", "*", "position", ")", "\n", "return", "viz_obj", ".", "object_id", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.internal_step": [[689, 708], ["rearrange_sim.RearrangeSim.habitat_config.get", "rearrange_sim.RearrangeSim.step_world", "rearrange_sim.RearrangeSim.robot.update"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.il.metrics.Metric.update"], ["", "def", "internal_step", "(", "\n", "self", ",", "dt", ":", "Union", "[", "int", ",", "float", "]", ",", "update_robot", ":", "bool", "=", "True", "\n", ")", "->", "None", ":", "\n", "        ", "\"\"\"Step the world and update the robot.\n\n        :param dt: Timestep by which to advance the world. Multiple physics substeps can be excecuted within a single timestep. -1 indicates a single physics substep.\n\n        Never call sim.step_world directly or miss updating the robot.\n        \"\"\"", "\n", "\n", "# optionally step physics and update the robot for benchmarking purposes", "\n", "if", "self", ".", "habitat_config", ".", "get", "(", "\"STEP_PHYSICS\"", ",", "True", ")", ":", "\n", "            ", "self", ".", "step_world", "(", "dt", ")", "\n", "if", "(", "\n", "update_robot", "\n", "and", "self", ".", "robot", "is", "not", "None", "\n", "and", "self", ".", "habitat_config", ".", "UPDATE_ROBOT", "\n", ")", ":", "\n", "                ", "self", ".", "robot", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.get_targets": [[709, 723], ["list", "zip", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "rearrange_sim.RearrangeSim._get_target_trans"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim._get_target_trans"], ["", "", "", "def", "get_targets", "(", "self", ")", "->", "Tuple", "[", "np", ".", "ndarray", ",", "np", ".", "ndarray", "]", ":", "\n", "        ", "\"\"\"Get a mapping of object ids to goal positions for rearrange targets.\n\n        :return: ([idx: int], [goal_pos: list]) The index of the target object\n          in self.scene_obj_ids and the 3D goal POSITION, rotation is IGNORED.\n          Note that goal_pos is the desired position of the object, not the\n          starting position.\n        \"\"\"", "\n", "targ_idx", ",", "targ_trans", "=", "list", "(", "zip", "(", "*", "self", ".", "_get_target_trans", "(", ")", ")", ")", "\n", "\n", "a", ",", "b", "=", "np", ".", "array", "(", "targ_idx", ")", ",", "[", "\n", "np", ".", "array", "(", "x", ".", "translation", ")", "for", "x", "in", "targ_trans", "\n", "]", "\n", "return", "a", ",", "np", ".", "array", "(", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.get_n_targets": [[724, 727], ["len"], "methods", ["None"], ["", "def", "get_n_targets", "(", "self", ")", "->", "int", ":", "\n", "        ", "\"\"\"Get the number of rearrange targets.\"\"\"", "\n", "return", "len", "(", "self", ".", "ep_info", "[", "\"targets\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.get_target_objs_start": [[728, 731], ["None"], "methods", ["None"], ["", "def", "get_target_objs_start", "(", "self", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"Get the initial positions of all objects targeted for rearrangement as a numpy array.\"\"\"", "\n", "return", "self", ".", "target_start_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.get_scene_pos": [[732, 739], ["rearrange_sim.RearrangeSim.get_rigid_object_manager", "numpy.array", "numpy.array", "rearrange_sim.RearrangeSim.get_object_by_id"], "methods", ["None"], ["", "def", "get_scene_pos", "(", "self", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"Get the positions of all clutter RigidObjects in the scene as a numpy array.\"\"\"", "\n", "rom", "=", "self", ".", "get_rigid_object_manager", "(", ")", "\n", "return", "np", ".", "array", "(", "\n", "[", "\n", "rom", ".", "get_object_by_id", "(", "idx", ")", ".", "translation", "\n", "for", "idx", "in", "self", ".", "scene_obj_ids", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.__init__._try_register_rearrange_task": [[12, 50], ["habitat.sims.habitat_simulator.actions.HabitatSimActions.has_action", "habitat.sims.habitat_simulator.actions.HabitatSimActions.extend_action_space", "habitat.sims.habitat_simulator.actions.HabitatSimActions.has_action", "habitat.sims.habitat_simulator.actions.HabitatSimActions.extend_action_space", "habitat.sims.habitat_simulator.actions.HabitatSimActions.has_action", "habitat.sims.habitat_simulator.actions.HabitatSimActions.extend_action_space", "habitat.sims.habitat_simulator.actions.HabitatSimActions.has_action", "habitat.sims.habitat_simulator.actions.HabitatSimActions.extend_action_space", "habitat.sims.habitat_simulator.actions.HabitatSimActions.has_action", "habitat.sims.habitat_simulator.actions.HabitatSimActions.extend_action_space", "habitat.sims.habitat_simulator.actions.HabitatSimActions.has_action", "habitat.sims.habitat_simulator.actions.HabitatSimActions.extend_action_space", "habitat.sims.habitat_simulator.actions.HabitatSimActions.has_action", "habitat.sims.habitat_simulator.actions.HabitatSimActions.extend_action_space", "habitat.sims.habitat_simulator.actions.HabitatSimActions.has_action", "habitat.sims.habitat_simulator.actions.HabitatSimActions.extend_action_space", "habitat.sims.habitat_simulator.actions.HabitatSimActions.has_action", "habitat.sims.habitat_simulator.actions.HabitatSimActions.extend_action_space", "habitat.sims.habitat_simulator.actions.HabitatSimActions.has_action", "habitat.sims.habitat_simulator.actions.HabitatSimActions.extend_action_space"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.actions.HabitatSimActionsSingleton.has_action", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.actions.HabitatSimActionsSingleton.extend_action_space", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.actions.HabitatSimActionsSingleton.has_action", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.actions.HabitatSimActionsSingleton.extend_action_space", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.actions.HabitatSimActionsSingleton.has_action", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.actions.HabitatSimActionsSingleton.extend_action_space", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.actions.HabitatSimActionsSingleton.has_action", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.actions.HabitatSimActionsSingleton.extend_action_space", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.actions.HabitatSimActionsSingleton.has_action", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.actions.HabitatSimActionsSingleton.extend_action_space", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.actions.HabitatSimActionsSingleton.has_action", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.actions.HabitatSimActionsSingleton.extend_action_space", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.actions.HabitatSimActionsSingleton.has_action", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.actions.HabitatSimActionsSingleton.extend_action_space", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.actions.HabitatSimActionsSingleton.has_action", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.actions.HabitatSimActionsSingleton.extend_action_space", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.actions.HabitatSimActionsSingleton.has_action", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.actions.HabitatSimActionsSingleton.extend_action_space", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.actions.HabitatSimActionsSingleton.has_action", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.actions.HabitatSimActionsSingleton.extend_action_space"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CollisionDetails.total_collisions": [[74, 80], ["None"], "methods", ["None"], ["min_pad", "[", "0", "]", ":", "foreground", ".", "shape", "[", "0", "]", "-", "max_pad", "[", "0", "]", ",", "\n", "min_pad", "[", "1", "]", ":", "foreground", ".", "shape", "[", "1", "]", "-", "max_pad", "[", "1", "]", ",", "\n", "]", "\n", "if", "foreground", ".", "size", "==", "0", "or", "background_patch", ".", "size", "==", "0", ":", "\n", "# Nothing to do, no overlap.", "\n", "        ", "return", "background", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CollisionDetails.__add__": [[82, 89], ["utils.CollisionDetails"], "methods", ["None"], ["        ", "mask", "=", "mask", "[", "\n", "min_pad", "[", "0", "]", ":", "foreground", ".", "shape", "[", "0", "]", "-", "max_pad", "[", "0", "]", ",", "\n", "min_pad", "[", "1", "]", ":", "foreground", ".", "shape", "[", "1", "]", "-", "max_pad", "[", "1", "]", ",", "\n", "]", "\n", "\n", "", "if", "foreground", ".", "shape", "[", "2", "]", "==", "4", ":", "\n", "# Alpha blending", "\n", "        ", "foreground", "=", "(", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.__init__": [[227, 231], ["None"], "methods", ["None"], ["if", "not", "isinstance", "(", "depth_map", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "depth_map", "=", "depth_map", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "depth_map", "=", "depth_map", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "depth_map", "=", "np", ".", "stack", "(", "[", "depth_map", "for", "_", "in", "range", "(", "3", ")", "]", ",", "axis", "=", "2", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.exists": [[232, 234], ["os.exists", "os.exists"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.exists", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.exists"], ["render_obs_images", ".", "append", "(", "depth_map", ")", "\n", "\n", "# add image goal if observation has image_goal info", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.load": [[235, 252], ["utils.CacheHelper.exists", "open", "pickle.load", "rearrange_logger.warning", "time.sleep", "utils.CacheHelper.load", "rearrange_logger.info", "numpy.random.uniform", "os.getsize", "os.getsize"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.exists", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.load", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.load"], ["", "", "if", "\"imagegoal\"", "in", "observation", ":", "\n", "        ", "rgb", "=", "observation", "[", "\"imagegoal\"", "]", "\n", "if", "not", "isinstance", "(", "rgb", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "rgb", "=", "rgb", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "render_obs_images", ".", "append", "(", "rgb", ")", "\n", "\n", "", "assert", "(", "\n", "len", "(", "render_obs_images", ")", ">", "0", "\n", ")", ",", "\"Expected at least one visual sensor enabled.\"", "\n", "\n", "shapes_are_equal", "=", "len", "(", "set", "(", "x", ".", "shape", "for", "x", "in", "render_obs_images", ")", ")", "==", "1", "\n", "if", "not", "shapes_are_equal", ":", "\n", "        ", "render_frame", "=", "tile_images", "(", "render_obs_images", ")", "\n", "", "else", ":", "\n", "        ", "render_frame", "=", "np", ".", "concatenate", "(", "render_obs_images", ",", "axis", "=", "1", ")", "\n", "\n", "# draw collision", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.save": [[253, 258], ["open", "pickle.dump", "rearrange_logger.info"], "methods", ["None"], ["", "if", "\"collisions\"", "in", "info", "and", "info", "[", "\"collisions\"", "]", "[", "\"is_collision\"", "]", ":", "\n", "        ", "render_frame", "=", "draw_collision", "(", "render_frame", ")", "\n", "\n", "", "if", "\"top_down_map\"", "in", "info", ":", "\n", "        ", "top_down_map", "=", "maps", ".", "colorize_draw_agent_and_fit_to_height", "(", "\n", "info", "[", "\"top_down_map\"", "]", ",", "render_frame", ".", "shape", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.IkHelper.__init__": [[280, 311], ["p.connect", "p.loadURDF", "p.setGravity", "range", "p.changeDynamics", "p.changeDynamics"], "methods", ["None"], ["char_size", "=", "cv2", ".", "getTextSize", "(", "\" \"", ",", "font", ",", "font_size", ",", "font_thickness", ")", "[", "0", "]", "\n", "wrapped_text", "=", "textwrap", ".", "wrap", "(", "text", ",", "width", "=", "int", "(", "w", "/", "char_size", "[", "0", "]", ")", ")", "\n", "\n", "y", "=", "0", "\n", "for", "line", "in", "wrapped_text", ":", "\n", "        ", "textsize", "=", "cv2", ".", "getTextSize", "(", "line", ",", "font", ",", "font_size", ",", "font_thickness", ")", "[", "0", "]", "\n", "y", "+=", "textsize", "[", "1", "]", "+", "10", "\n", "x", "=", "10", "\n", "cv2", ".", "putText", "(", "\n", "blank_image", ",", "\n", "line", ",", "\n", "(", "x", ",", "y", ")", ",", "\n", "font", ",", "\n", "font_size", ",", "\n", "(", "255", ",", "255", ",", "255", ")", ",", "\n", "font_thickness", ",", "\n", "lineType", "=", "cv2", ".", "LINE_AA", ",", "\n", ")", "\n", "", "text_image", "=", "blank_image", "[", "0", ":", "y", "+", "10", ",", "0", ":", "w", "]", "\n", "final", "=", "np", ".", "concatenate", "(", "(", "image", ",", "text_image", ")", ",", "axis", "=", "0", ")", "\n", "return", "final", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.IkHelper.set_arm_state": [[313, 323], ["range", "numpy.zeros", "p.resetJointState", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.IkHelper.calc_fk": [[325, 335], ["utils.IkHelper.set_arm_state", "p.getLinkState", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.IkHelper.set_arm_state"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.IkHelper.get_joint_limits": [[336, 349], ["range", "p.getJointInfo", "lower.append", "numpy.array", "numpy.array", "upper.append", "upper.append"], "methods", ["None"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.IkHelper.calc_ik": [[350, 358], ["p.calculateInverseKinematics"], "methods", ["None"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.make_render_only": [[30, 33], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.make_border_red": [[35, 43], ["None"], "function", ["None"], ["\n", "assert", "mask", "is", "None", "or", "mask", ".", "shape", "[", ":", "2", "]", "==", "foreground", ".", "shape", "[", ":", "2", "]", "\n", "foreground_size", "=", "foreground", ".", "shape", "[", ":", "2", "]", "\n", "min_pad", "=", "(", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.coll_name_matches": [[45, 47], ["None"], "function", ["None"], ["max", "(", "0", ",", "foreground_size", "[", "1", "]", "//", "2", "-", "location", "[", "1", "]", ")", ",", "\n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.coll_link_name_matches": [[49, 51], ["None"], "function", ["None"], ["max", "(", "\n", "0", ",", "\n", "(", "location", "[", "0", "]", "+", "(", "foreground_size", "[", "0", "]", "-", "foreground_size", "[", "0", "]", "//", "2", ")", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.get_match_link": [[53, 59], ["None"], "function", ["None"], [")", ",", "\n", "max", "(", "\n", "0", ",", "\n", "(", "location", "[", "1", "]", "+", "(", "foreground_size", "[", "1", "]", "-", "foreground_size", "[", "1", "]", "//", "2", ")", ")", "\n", "-", "background", ".", "shape", "[", "1", "]", ",", "\n", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.swap_axes": [[61, 64], ["None"], "function", ["None"], ["background_patch", "=", "background", "[", "\n", "(", "location", "[", "0", "]", "-", "foreground_size", "[", "0", "]", "//", "2", "+", "min_pad", "[", "0", "]", ")", ":", "(", "\n", "location", "[", "0", "]", "\n", "+", "(", "foreground_size", "[", "0", "]", "-", "foreground_size", "[", "0", "]", "//", "2", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.rearrange_collision": [[92, 168], ["sim.get_physics_contact_points", "robot_model.get_robot_sim_id", "list", "filter", "any", "utils.CollisionDetails", "utils.CollisionDetails", "utils.get_match_link", "any", "utils.coll_name_matches", "robot_coll_ids.append", "robot_coll_ids.append", "utils.coll_name_matches", "robot_model.is_base_link", "utils.coll_name_matches", "utils.coll_name_matches", "min", "min", "min", "min", "min", "min", "utils.coll_name_matches"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.robot_interface.RobotInterface.get_robot_sim_id", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.get_match_link", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.coll_name_matches", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.coll_name_matches", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.robots.mobile_manipulator.MobileManipulator.is_base_link", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.coll_name_matches", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.coll_name_matches", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.coll_name_matches"], [")", "//", "255", "\n", "", "if", "mask", "is", "not", "None", ":", "\n", "        ", "background_patch", "[", "mask", "]", "=", "foreground", "[", "mask", "]", "\n", "", "else", ":", "\n", "        ", "background_patch", "[", ":", "]", "=", "foreground", "\n", "", "return", "background", "\n", "\n", "\n", "", "def", "images_to_video", "(", "\n", "images", ":", "List", "[", "np", ".", "ndarray", "]", ",", "\n", "output_dir", ":", "str", ",", "\n", "video_name", ":", "str", ",", "\n", "fps", ":", "int", "=", "10", ",", "\n", "quality", ":", "Optional", "[", "float", "]", "=", "5", ",", "\n", "verbose", ":", "bool", "=", "True", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "    ", "r\"\"\"Calls imageio to run FFMPEG on a list of images. For more info on\n    parameters, see https://imageio.readthedocs.io/en/stable/format_ffmpeg.html\n    Args:\n        images: The list of images. Images should be HxWx3 in RGB order.\n        output_dir: The folder to put the video in.\n        video_name: The name for the video.\n        fps: Frames per second for the video. Not all values work with FFMPEG,\n            use at your own risk.\n        quality: Default is 5. Uses variable bit rate. Highest quality is 10,\n            lowest is 0.  Set to None to prevent variable bitrate flags to\n            FFMPEG so you can manually specify them using output_params\n            instead. Specifying a fixed bitrate using \u2018bitrate\u2019 disables\n            this parameter.\n    \"\"\"", "\n", "assert", "0", "<=", "quality", "<=", "10", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "", "video_name", "=", "video_name", ".", "replace", "(", "\" \"", ",", "\"_\"", ")", ".", "replace", "(", "\"\\n\"", ",", "\"_\"", ")", "\n", "\n", "# File names are not allowed to be over 255 characters", "\n", "video_name_split", "=", "video_name", ".", "split", "(", "\"/\"", ")", "\n", "video_name", "=", "\"/\"", ".", "join", "(", "\n", "video_name_split", "[", ":", "-", "1", "]", "+", "[", "video_name_split", "[", "-", "1", "]", "[", ":", "251", "]", "+", "\".mp4\"", "]", "\n", ")", "\n", "\n", "writer", "=", "imageio", ".", "get_writer", "(", "\n", "os", ".", "path", ".", "join", "(", "output_dir", ",", "video_name", ")", ",", "\n", "fps", "=", "fps", ",", "\n", "quality", "=", "quality", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "logger", ".", "info", "(", "f\"Video created: {os.path.join(output_dir, video_name)}\"", ")", "\n", "if", "verbose", ":", "\n", "        ", "images_iter", "=", "tqdm", ".", "tqdm", "(", "images", ")", "\n", "", "else", ":", "\n", "        ", "images_iter", "=", "images", "\n", "", "for", "im", "in", "images_iter", ":", "\n", "        ", "writer", ".", "append_data", "(", "im", ")", "\n", "", "writer", ".", "close", "(", ")", "\n", "\n", "\n", "", "def", "draw_collision", "(", "view", ":", "np", ".", "ndarray", ",", "alpha", ":", "float", "=", "0.4", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "r\"\"\"Draw translucent red strips on the border of input view to indicate\n    a collision has taken place.\n    Args:\n        view: input view of size HxWx3 in RGB order.\n        alpha: Opacity of red collision strip. 1 is completely non-transparent.\n    Returns:\n        A view with collision effect drawn.\n    \"\"\"", "\n", "strip_width", "=", "view", ".", "shape", "[", "0", "]", "//", "20", "\n", "mask", "=", "np", ".", "ones", "(", "view", ".", "shape", ")", "\n", "mask", "[", "strip_width", ":", "-", "strip_width", ",", "strip_width", ":", "-", "strip_width", "]", "=", "0", "\n", "mask", "=", "mask", "==", "1", "\n", "view", "[", "mask", "]", "=", "(", "alpha", "*", "np", ".", "array", "(", "[", "255", ",", "0", ",", "0", "]", ")", "+", "(", "1.0", "-", "alpha", ")", "*", "view", ")", "[", "mask", "]", "\n", "return", "view", "\n", "\n", "\n", "", "def", "tile_images", "(", "render_obs_images", ":", "List", "[", "np", ".", "ndarray", "]", ")", "->", "np", ".", "ndarray", ":", "\n", "    "]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.convert_legacy_cfg": [[170, 199], ["list", "len", "map", "os.join", "obj_dat[].replace", "obj_dat[].split", "len", "len", "magnum.Matrix4.translation", "numpy.array", "int", "len", "len", "magnum.Vector3", "int"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.map"], ["\n", "# Get the images in descending order of vertical height.", "\n", "render_obs_images", "=", "sorted", "(", "\n", "render_obs_images", ",", "key", "=", "lambda", "x", ":", "x", ".", "shape", "[", "0", "]", ",", "reverse", "=", "True", "\n", ")", "\n", "img_cols", "=", "[", "[", "render_obs_images", "[", "0", "]", "]", "]", "\n", "max_height", "=", "render_obs_images", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "cur_y", "=", "0.0", "\n", "# Arrange the images in columns with the largest image to the left.", "\n", "col", "=", "[", "]", "\n", "for", "im", "in", "render_obs_images", "[", "1", ":", "]", ":", "\n", "        ", "if", "cur_y", "+", "im", ".", "shape", "[", "0", "]", "<=", "max_height", ":", "\n", "            ", "col", ".", "append", "(", "im", ")", "\n", "cur_y", "+=", "im", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "img_cols", ".", "append", "(", "col", ")", "\n", "col", "=", "[", "im", "]", "\n", "cur_y", "=", "im", ".", "shape", "[", "0", "]", "\n", "", "", "img_cols", ".", "append", "(", "col", ")", "\n", "col_widths", "=", "[", "max", "(", "col_ele", ".", "shape", "[", "1", "]", "for", "col_ele", "in", "col", ")", "for", "col", "in", "img_cols", "]", "\n", "# Get the total width of all the columns put together.", "\n", "total_width", "=", "sum", "(", "col_widths", ")", "\n", "\n", "# Tile the images, pasting the columns side by side.", "\n", "final_im", "=", "np", ".", "zeros", "(", "\n", "(", "max_height", ",", "total_width", ",", "3", ")", ",", "dtype", "=", "render_obs_images", "[", "0", "]", ".", "dtype", "\n", ")", "\n", "cur_x", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "img_cols", ")", ")", ":", "\n", "        ", "next_x", "=", "cur_x", "+", "col_widths", "[", "i", "]", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.get_aabb": [[201, 212], ["sim.get_rigid_object_manager().get_object_by_id", "habitat_sim.geo.get_transformed_bb", "sim.get_rigid_object_manager"], "function", ["None"], ["final_im", "[", ":", "total_col_im", ".", "shape", "[", "0", "]", ",", "cur_x", ":", "next_x", "]", "=", "total_col_im", "\n", "cur_x", "=", "next_x", "\n", "", "return", "final_im", "\n", "\n", "\n", "", "def", "observations_to_image", "(", "observation", ":", "Dict", ",", "info", ":", "Dict", ")", "->", "np", ".", "ndarray", ":", "\n", "    "]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.euler_to_quat": [[214, 218], ["quaternion.from_euler_angles", "magnum.Quaternion", "magnum.Vector3"], "function", ["None"], ["\n", "render_obs_images", ":", "List", "[", "np", ".", "ndarray", "]", "=", "[", "]", "\n", "for", "sensor_name", "in", "observation", ":", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.allowed_region_to_bb": [[220, 224], ["magnum.Range2D", "len"], "function", ["None"], ["            ", "rgb", "=", "observation", "[", "sensor_name", "]", "\n", "if", "not", "isinstance", "(", "rgb", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "rgb", "=", "rgb", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "render_obs_images", ".", "append", "(", "rgb", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.batch_transform_point": [[260, 267], ["numpy.array", "transformed_points.append", "transform_matrix.transform_point"], "function", ["None"], ["render_frame", "=", "np", ".", "concatenate", "(", "(", "render_frame", ",", "top_down_map", ")", ",", "axis", "=", "1", ")", "\n", "", "return", "render_frame", "\n", "\n", "\n", "", "def", "append_text_to_image", "(", "image", ":", "np", ".", "ndarray", ",", "text", ":", "str", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.is_pb_installed": [[275, 277], ["None"], "function", ["None"], ["font_size", "=", "0.5", "\n", "font_thickness", "=", "1", "\n", "font", "=", "cv2", ".", "FONT_HERSHEY_SIMPLEX", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.Config.__init__": [[14, 16], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ",", "new_allowed", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config": [[229, 282], ["_C.clone", "habitat.get_config", "_C.clone.freeze", "isinstance", "zip", "_C.clone.merge_from_list", "warnings.warn", "_C.clone.merge_from_file", "_C.clone.merge_from_file", "config_paths.split.split"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config"], ["# IS HOLDING SENSOR", "\n", "# -----------------------------------------------------------------------------", "\n", "_C", ".", "TASK", ".", "IS_HOLDING_SENSOR", "=", "CN", "(", ")", "\n", "_C", ".", "TASK", ".", "IS_HOLDING_SENSOR", ".", "TYPE", "=", "\"IsHoldingSensor\"", "\n", "# -----------------------------------------------------------------------------", "\n", "# RELATIVE RESTING POSISITON SENSOR", "\n", "# -----------------------------------------------------------------------------", "\n", "_C", ".", "TASK", ".", "RELATIVE_RESTING_POS_SENSOR", "=", "CN", "(", ")", "\n", "_C", ".", "TASK", ".", "RELATIVE_RESTING_POS_SENSOR", ".", "TYPE", "=", "\"RelativeRestingPositionSensor\"", "\n", "# -----------------------------------------------------------------------------", "\n", "# JOINT VELOCITY SENSOR", "\n", "# -----------------------------------------------------------------------------", "\n", "_C", ".", "TASK", ".", "JOINT_VELOCITY_SENSOR", "=", "CN", "(", ")", "\n", "_C", ".", "TASK", ".", "JOINT_VELOCITY_SENSOR", ".", "TYPE", "=", "\"JointVelocitySensor\"", "\n", "_C", ".", "TASK", ".", "JOINT_VELOCITY_SENSOR", ".", "DIMENSIONALITY", "=", "7", "\n", "# -----------------------------------------------------------------------------", "\n", "# ORACLE NAVIGATION ACTION SENSOR", "\n", "# -----------------------------------------------------------------------------", "\n", "_C", ".", "TASK", ".", "ORACLE_NAV_ACTION_SENSOR", "=", "CN", "(", ")", "\n", "_C", ".", "TASK", ".", "ORACLE_NAV_ACTION_SENSOR", ".", "TYPE", "=", "\"OracleNavigationActionSensor\"", "\n", "# -----------------------------------------------------------------------------", "\n", "# RESTING POSITION SENSOR", "\n", "# -----------------------------------------------------------------------------", "\n", "_C", ".", "TASK", ".", "RESTING_POS_SENSOR", "=", "CN", "(", ")", "\n", "_C", ".", "TASK", ".", "RESTING_POS_SENSOR", ".", "TYPE", "=", "\"RestingPositionSensor\"", "\n", "# -----------------------------------------------------------------------------", "\n", "# ART JOINT SENSOR", "\n", "# -----------------------------------------------------------------------------", "\n", "_C", ".", "TASK", ".", "ART_JOINT_SENSOR", "=", "CN", "(", ")", "\n", "_C", ".", "TASK", ".", "ART_JOINT_SENSOR", ".", "TYPE", "=", "\"ArtJointSensor\"", "\n", "# -----------------------------------------------------------------------------", "\n", "# NAV GOAL SENSOR", "\n", "# -----------------------------------------------------------------------------", "\n", "_C", ".", "TASK", ".", "NAV_GOAL_SENSOR", "=", "CN", "(", ")", "\n", "_C", ".", "TASK", ".", "NAV_GOAL_SENSOR", ".", "TYPE", "=", "\"NavGoalSensor\"", "\n", "# -----------------------------------------------------------------------------", "\n", "# ART JOINT NO VELOCITY SENSOR", "\n", "# -----------------------------------------------------------------------------", "\n", "_C", ".", "TASK", ".", "ART_JOINT_SENSOR_NO_VEL", "=", "CN", "(", ")", "\n", "_C", ".", "TASK", ".", "ART_JOINT_SENSOR_NO_VEL", ".", "TYPE", "=", "\"ArtJointSensorNoVel\"", "\n", "# -----------------------------------------------------------------------------", "\n", "# MARKER RELATIVE POSISITON SENSOR", "\n", "# -----------------------------------------------------------------------------", "\n", "_C", ".", "TASK", ".", "MARKER_REL_POS_SENSOR", "=", "CN", "(", ")", "\n", "_C", ".", "TASK", ".", "MARKER_REL_POS_SENSOR", ".", "TYPE", "=", "\"MarkerRelPosSensor\"", "\n", "# -----------------------------------------------------------------------------", "\n", "# TARGET START SENSOR", "\n", "# -----------------------------------------------------------------------------", "\n", "_C", ".", "TASK", ".", "TARGET_START_SENSOR", "=", "CN", "(", ")", "\n", "_C", ".", "TASK", ".", "TARGET_START_SENSOR", ".", "TYPE", "=", "\"TargetStartSensor\"", "\n", "_C", ".", "TASK", ".", "TARGET_START_SENSOR", ".", "GOAL_FORMAT", "=", "\"CARTESIAN\"", "\n", "_C", ".", "TASK", ".", "TARGET_START_SENSOR", ".", "DIMENSIONALITY", "=", "3", "\n", "# -----------------------------------------------------------------------------", "\n", "# OBJECT SENSOR", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.tasks.registration.make_task": [[15, 23], ["habitat.core.logging.logger.info", "habitat.core.registry.registry.get_task", "registry.get_task."], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry.get_task"], ["_sim", "=", "registry", ".", "get_simulator", "(", "id_sim", ")", "\n", "assert", "_sim", "is", "not", "None", ",", "\"Could not find simulator with name {}\"", ".", "format", "(", "\n", "id_sim", "\n", ")", "\n", "return", "_sim", "(", "**", "kwargs", ")", "\n", "\n", "\n", "", "_try_register_habitat_sim", "(", ")", "\n", "_try_register_pyrobot", "(", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.tasks.utils.quaternion_to_rotation": [[11, 37], ["numpy.array"], "function", ["None"], ["import", "imageio", "\n", "import", "numpy", "as", "np", "\n", "import", "tqdm", "\n", "\n", "from", "habitat", ".", "core", ".", "logging", "import", "logger", "\n", "from", "habitat", ".", "core", ".", "utils", "import", "try_cv2_import", "\n", "from", "habitat", ".", "utils", ".", "visualizations", "import", "maps", "\n", "\n", "cv2", "=", "try_cv2_import", "(", ")", "\n", "\n", "\n", "def", "paste_overlapping_image", "(", "\n", "background", ":", "np", ".", "ndarray", ",", "\n", "foreground", ":", "np", ".", "ndarray", ",", "\n", "location", ":", "Tuple", "[", "int", ",", "int", "]", ",", "\n", "mask", ":", "Optional", "[", "np", ".", "ndarray", "]", "=", "None", ",", "\n", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.tasks.utils.cartesian_to_polar": [[39, 43], ["numpy.sqrt", "numpy.arctan2"], "function", ["None"], ["\n", "assert", "mask", "is", "None", "or", "mask", ".", "shape", "[", ":", "2", "]", "==", "foreground", ".", "shape", "[", ":", "2", "]", "\n", "foreground_size", "=", "foreground", ".", "shape", "[", ":", "2", "]", "\n", "min_pad", "=", "(", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.tasks.utils.compute_pixel_coverage": [[45, 49], ["cand_mask.sum().astype", "cand_mask.sum"], "function", ["None"], ["max", "(", "0", ",", "foreground_size", "[", "1", "]", "//", "2", "-", "location", "[", "1", "]", ")", ",", "\n", ")", "\n", "\n", "max_pad", "=", "(", "\n", "max", "(", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.tasks.utils.get_angle": [[51, 65], ["numpy.arccos", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.clip", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.dot"], "function", ["None"], ["(", "location", "[", "0", "]", "+", "(", "foreground_size", "[", "0", "]", "-", "foreground_size", "[", "0", "]", "//", "2", ")", ")", "\n", "-", "background", ".", "shape", "[", "0", "]", ",", "\n", ")", ",", "\n", "max", "(", "\n", "0", ",", "\n", "(", "location", "[", "1", "]", "+", "(", "foreground_size", "[", "1", "]", "-", "foreground_size", "[", "1", "]", "//", "2", ")", ")", "\n", "-", "background", ".", "shape", "[", "1", "]", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "background_patch", "=", "background", "[", "\n", "(", "location", "[", "0", "]", "-", "foreground_size", "[", "0", "]", "//", "2", "+", "min_pad", "[", "0", "]", ")", ":", "(", "\n", "location", "[", "0", "]", "\n", "+", "(", "foreground_size", "[", "0", "]", "-", "foreground_size", "[", "0", "]", "//", "2", ")", "\n", "-", "max_pad", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.PointGoalSensor.__init__": [[146, 158], ["getattr", "getattr", "habitat.core.simulator.Sensor.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "\n", "self", ",", "sim", ":", "Simulator", ",", "config", ":", "Config", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", "\n", ")", ":", "\n", "        ", "self", ".", "_sim", "=", "sim", "\n", "\n", "self", ".", "_goal_format", "=", "getattr", "(", "config", ",", "\"GOAL_FORMAT\"", ",", "\"CARTESIAN\"", ")", "\n", "assert", "self", ".", "_goal_format", "in", "[", "\"CARTESIAN\"", ",", "\"POLAR\"", "]", "\n", "\n", "self", ".", "_dimensionality", "=", "getattr", "(", "config", ",", "\"DIMENSIONALITY\"", ",", "2", ")", "\n", "assert", "self", ".", "_dimensionality", "in", "[", "2", ",", "3", "]", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "config", "=", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.PointGoalSensor._get_uuid": [[159, 161], ["None"], "methods", ["None"], ["", "def", "_get_uuid", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.PointGoalSensor._get_sensor_type": [[162, 164], ["None"], "methods", ["None"], ["", "def", "_get_sensor_type", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "return", "SensorTypes", ".", "PATH", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.PointGoalSensor._get_observation_space": [[165, 173], ["gym.spaces.Box", "numpy.finfo", "numpy.finfo"], "methods", ["None"], ["", "def", "_get_observation_space", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "sensor_shape", "=", "(", "self", ".", "_dimensionality", ",", ")", "\n", "\n", "return", "spaces", ".", "Box", "(", "\n", "low", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "min", ",", "\n", "high", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "max", ",", "\n", "shape", "=", "sensor_shape", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.PointGoalSensor._compute_pointgoal": [[175, 208], ["habitat.utils.geometry_utils.quaternion_rotate_vector", "source_rotation.inverse", "habitat.tasks.utils.cartesian_to_polar", "numpy.array", "habitat.tasks.utils.cartesian_to_polar", "numpy.arccos", "numpy.linalg.norm", "numpy.array", "numpy.array", "numpy.linalg.norm"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.geometry_utils.quaternion_rotate_vector", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.tasks.utils.cartesian_to_polar", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.tasks.utils.cartesian_to_polar"], ["", "def", "_compute_pointgoal", "(", "\n", "self", ",", "source_position", ",", "source_rotation", ",", "goal_position", "\n", ")", ":", "\n", "        ", "direction_vector", "=", "goal_position", "-", "source_position", "\n", "direction_vector_agent", "=", "quaternion_rotate_vector", "(", "\n", "source_rotation", ".", "inverse", "(", ")", ",", "direction_vector", "\n", ")", "\n", "\n", "if", "self", ".", "_goal_format", "==", "\"POLAR\"", ":", "\n", "            ", "if", "self", ".", "_dimensionality", "==", "2", ":", "\n", "                ", "rho", ",", "phi", "=", "cartesian_to_polar", "(", "\n", "-", "direction_vector_agent", "[", "2", "]", ",", "direction_vector_agent", "[", "0", "]", "\n", ")", "\n", "return", "np", ".", "array", "(", "[", "rho", ",", "-", "phi", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "                ", "_", ",", "phi", "=", "cartesian_to_polar", "(", "\n", "-", "direction_vector_agent", "[", "2", "]", ",", "direction_vector_agent", "[", "0", "]", "\n", ")", "\n", "theta", "=", "np", ".", "arccos", "(", "\n", "direction_vector_agent", "[", "1", "]", "\n", "/", "np", ".", "linalg", ".", "norm", "(", "direction_vector_agent", ")", "\n", ")", "\n", "rho", "=", "np", ".", "linalg", ".", "norm", "(", "direction_vector_agent", ")", "\n", "\n", "return", "np", ".", "array", "(", "[", "rho", ",", "-", "phi", ",", "theta", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "_dimensionality", "==", "2", ":", "\n", "                ", "return", "np", ".", "array", "(", "\n", "[", "-", "direction_vector_agent", "[", "2", "]", ",", "direction_vector_agent", "[", "0", "]", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "return", "direction_vector_agent", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.PointGoalSensor.get_observation": [[209, 222], ["numpy.array", "habitat.utils.geometry_utils.quaternion_from_coeff", "numpy.array", "nav.PointGoalSensor._compute_pointgoal"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.geometry_utils.quaternion_from_coeff", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.PointGoalSensor._compute_pointgoal"], ["", "", "", "def", "get_observation", "(", "\n", "self", ",", "\n", "observations", ",", "\n", "episode", ":", "NavigationEpisode", ",", "\n", "*", "args", ":", "Any", ",", "\n", "**", "kwargs", ":", "Any", ",", "\n", ")", ":", "\n", "        ", "source_position", "=", "np", ".", "array", "(", "episode", ".", "start_position", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "rotation_world_start", "=", "quaternion_from_coeff", "(", "episode", ".", "start_rotation", ")", "\n", "goal_position", "=", "np", ".", "array", "(", "episode", ".", "goals", "[", "0", "]", ".", "position", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "return", "self", ".", "_compute_pointgoal", "(", "\n", "source_position", ",", "rotation_world_start", ",", "goal_position", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.ImageGoalSensor.__init__": [[239, 258], ["habitat.core.simulator.Sensor.__init__", "len", "ValueError", "sensors.items", "isinstance", "len"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "\n", "self", ",", "*", "args", ":", "Any", ",", "sim", ":", "Simulator", ",", "config", ":", "Config", ",", "**", "kwargs", ":", "Any", "\n", ")", ":", "\n", "        ", "self", ".", "_sim", "=", "sim", "\n", "sensors", "=", "self", ".", "_sim", ".", "sensor_suite", ".", "sensors", "\n", "rgb_sensor_uuids", "=", "[", "\n", "uuid", "\n", "for", "uuid", ",", "sensor", "in", "sensors", ".", "items", "(", ")", "\n", "if", "isinstance", "(", "sensor", ",", "RGBSensor", ")", "\n", "]", "\n", "if", "len", "(", "rgb_sensor_uuids", ")", "!=", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "f\"ImageGoalNav requires one RGB sensor, {len(rgb_sensor_uuids)} detected\"", "\n", ")", "\n", "\n", "", "(", "self", ".", "_rgb_sensor_uuid", ",", ")", "=", "rgb_sensor_uuids", "\n", "self", ".", "_current_episode_id", ":", "Optional", "[", "str", "]", "=", "None", "\n", "self", ".", "_current_image_goal", "=", "None", "\n", "super", "(", ")", ".", "__init__", "(", "config", "=", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.ImageGoalSensor._get_uuid": [[259, 261], ["None"], "methods", ["None"], ["", "def", "_get_uuid", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.ImageGoalSensor._get_sensor_type": [[262, 264], ["None"], "methods", ["None"], ["", "def", "_get_sensor_type", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "return", "SensorTypes", ".", "PATH", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.ImageGoalSensor._get_observation_space": [[265, 268], ["None"], "methods", ["None"], ["", "def", "_get_observation_space", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "return", "self", ".", "_sim", ".", "sensor_suite", ".", "observation_spaces", ".", "spaces", "[", "\n", "self", ".", "_rgb_sensor_uuid", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.ImageGoalSensor._get_pointnav_episode_image_goal": [[270, 282], ["numpy.array", "numpy.random.RandomState", "numpy.random.RandomState.uniform", "nav.ImageGoalSensor._sim.get_observations_at", "abs", "numpy.sin", "numpy.cos", "hash", "numpy.array.tolist"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.get_observations_at"], ["", "def", "_get_pointnav_episode_image_goal", "(", "self", ",", "episode", ":", "NavigationEpisode", ")", ":", "\n", "        ", "goal_position", "=", "np", ".", "array", "(", "episode", ".", "goals", "[", "0", "]", ".", "position", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# to be sure that the rotation is the same for the same episode_id", "\n", "# since the task is currently using pointnav Dataset.", "\n", "seed", "=", "abs", "(", "hash", "(", "episode", ".", "episode_id", ")", ")", "%", "(", "2", "**", "32", ")", "\n", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "angle", "=", "rng", ".", "uniform", "(", "0", ",", "2", "*", "np", ".", "pi", ")", "\n", "source_rotation", "=", "[", "0", ",", "np", ".", "sin", "(", "angle", "/", "2", ")", ",", "0", ",", "np", ".", "cos", "(", "angle", "/", "2", ")", "]", "\n", "goal_observation", "=", "self", ".", "_sim", ".", "get_observations_at", "(", "\n", "position", "=", "goal_position", ".", "tolist", "(", ")", ",", "rotation", "=", "source_rotation", "\n", ")", "\n", "return", "goal_observation", "[", "self", ".", "_rgb_sensor_uuid", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.ImageGoalSensor.get_observation": [[283, 300], ["nav.ImageGoalSensor._get_pointnav_episode_image_goal"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.ImageGoalSensor._get_pointnav_episode_image_goal"], ["", "def", "get_observation", "(", "\n", "self", ",", "\n", "*", "args", ":", "Any", ",", "\n", "observations", ",", "\n", "episode", ":", "NavigationEpisode", ",", "\n", "**", "kwargs", ":", "Any", ",", "\n", ")", ":", "\n", "        ", "episode_uniq_id", "=", "f\"{episode.scene_id} {episode.episode_id}\"", "\n", "if", "episode_uniq_id", "==", "self", ".", "_current_episode_id", ":", "\n", "            ", "return", "self", ".", "_current_image_goal", "\n", "\n", "", "self", ".", "_current_image_goal", "=", "self", ".", "_get_pointnav_episode_image_goal", "(", "\n", "episode", "\n", ")", "\n", "self", ".", "_current_episode_id", "=", "episode_uniq_id", "\n", "\n", "return", "self", ".", "_current_image_goal", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.IntegratedPointGoalGPSAndCompassSensor._get_uuid": [[326, 328], ["None"], "methods", ["None"], ["def", "_get_uuid", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.IntegratedPointGoalGPSAndCompassSensor.get_observation": [[329, 339], ["nav.IntegratedPointGoalGPSAndCompassSensor._sim.get_agent_state", "numpy.array", "nav.IntegratedPointGoalGPSAndCompassSensor._compute_pointgoal"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.get_agent_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.PointGoalSensor._compute_pointgoal"], ["", "def", "get_observation", "(", "\n", "self", ",", "observations", ",", "episode", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", "\n", ")", ":", "\n", "        ", "agent_state", "=", "self", ".", "_sim", ".", "get_agent_state", "(", ")", "\n", "agent_position", "=", "agent_state", ".", "position", "\n", "rotation_world_agent", "=", "agent_state", ".", "rotation", "\n", "goal_position", "=", "np", ".", "array", "(", "episode", ".", "goals", "[", "0", "]", ".", "position", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "return", "self", ".", "_compute_pointgoal", "(", "\n", "agent_position", ",", "rotation_world_agent", ",", "goal_position", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.HeadingSensor.__init__": [[353, 358], ["habitat.core.simulator.Sensor.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "\n", "self", ",", "sim", ":", "Simulator", ",", "config", ":", "Config", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", "\n", ")", ":", "\n", "        ", "self", ".", "_sim", "=", "sim", "\n", "super", "(", ")", ".", "__init__", "(", "config", "=", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.HeadingSensor._get_uuid": [[359, 361], ["None"], "methods", ["None"], ["", "def", "_get_uuid", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.HeadingSensor._get_sensor_type": [[362, 364], ["None"], "methods", ["None"], ["", "def", "_get_sensor_type", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "return", "SensorTypes", ".", "HEADING", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.HeadingSensor._get_observation_space": [[365, 367], ["gym.spaces.Box"], "methods", ["None"], ["", "def", "_get_observation_space", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "return", "spaces", ".", "Box", "(", "low", "=", "-", "np", ".", "pi", ",", "high", "=", "np", ".", "pi", ",", "shape", "=", "(", "1", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.HeadingSensor._quat_to_xy_heading": [[368, 375], ["numpy.array", "habitat.utils.geometry_utils.quaternion_rotate_vector", "numpy.array", "habitat.tasks.utils.cartesian_to_polar"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.geometry_utils.quaternion_rotate_vector", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.tasks.utils.cartesian_to_polar"], ["", "def", "_quat_to_xy_heading", "(", "self", ",", "quat", ")", ":", "\n", "        ", "direction_vector", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "-", "1", "]", ")", "\n", "\n", "heading_vector", "=", "quaternion_rotate_vector", "(", "quat", ",", "direction_vector", ")", "\n", "\n", "phi", "=", "cartesian_to_polar", "(", "-", "heading_vector", "[", "2", "]", ",", "heading_vector", "[", "0", "]", ")", "[", "1", "]", "\n", "return", "np", ".", "array", "(", "[", "phi", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.HeadingSensor.get_observation": [[376, 386], ["nav.HeadingSensor._sim.get_agent_state", "isinstance", "nav.HeadingSensor._quat_to_xy_heading", "ValueError", "rotation_world_agent.inverse"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.get_agent_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.HeadingSensor._quat_to_xy_heading"], ["", "def", "get_observation", "(", "\n", "self", ",", "observations", ",", "episode", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", "\n", ")", ":", "\n", "        ", "agent_state", "=", "self", ".", "_sim", ".", "get_agent_state", "(", ")", "\n", "rotation_world_agent", "=", "agent_state", ".", "rotation", "\n", "\n", "if", "isinstance", "(", "rotation_world_agent", ",", "quaternion", ".", "quaternion", ")", ":", "\n", "            ", "return", "self", ".", "_quat_to_xy_heading", "(", "rotation_world_agent", ".", "inverse", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Agent's rotation was not a quaternion\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.EpisodicCompassSensor._get_uuid": [[395, 397], ["None"], "methods", ["None"], ["def", "_get_uuid", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.EpisodicCompassSensor.get_observation": [[398, 411], ["nav.EpisodicCompassSensor._sim.get_agent_state", "habitat.utils.geometry_utils.quaternion_from_coeff", "isinstance", "nav.EpisodicCompassSensor._quat_to_xy_heading", "ValueError", "rotation_world_agent.inverse"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.get_agent_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.geometry_utils.quaternion_from_coeff", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.HeadingSensor._quat_to_xy_heading"], ["", "def", "get_observation", "(", "\n", "self", ",", "observations", ",", "episode", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", "\n", ")", ":", "\n", "        ", "agent_state", "=", "self", ".", "_sim", ".", "get_agent_state", "(", ")", "\n", "rotation_world_agent", "=", "agent_state", ".", "rotation", "\n", "rotation_world_start", "=", "quaternion_from_coeff", "(", "episode", ".", "start_rotation", ")", "\n", "\n", "if", "isinstance", "(", "rotation_world_agent", ",", "quaternion", ".", "quaternion", ")", ":", "\n", "            ", "return", "self", ".", "_quat_to_xy_heading", "(", "\n", "rotation_world_agent", ".", "inverse", "(", ")", "*", "rotation_world_start", "\n", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Agent's rotation was not a quaternion\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.EpisodicGPSSensor.__init__": [[426, 434], ["getattr", "habitat.core.simulator.Sensor.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "\n", "self", ",", "sim", ":", "Simulator", ",", "config", ":", "Config", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", "\n", ")", ":", "\n", "        ", "self", ".", "_sim", "=", "sim", "\n", "\n", "self", ".", "_dimensionality", "=", "getattr", "(", "config", ",", "\"DIMENSIONALITY\"", ",", "2", ")", "\n", "assert", "self", ".", "_dimensionality", "in", "[", "2", ",", "3", "]", "\n", "super", "(", ")", ".", "__init__", "(", "config", "=", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.EpisodicGPSSensor._get_uuid": [[435, 437], ["None"], "methods", ["None"], ["", "def", "_get_uuid", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.EpisodicGPSSensor._get_sensor_type": [[438, 440], ["None"], "methods", ["None"], ["", "def", "_get_sensor_type", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "return", "SensorTypes", ".", "POSITION", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.EpisodicGPSSensor._get_observation_space": [[441, 448], ["gym.spaces.Box", "numpy.finfo", "numpy.finfo"], "methods", ["None"], ["", "def", "_get_observation_space", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "sensor_shape", "=", "(", "self", ".", "_dimensionality", ",", ")", "\n", "return", "spaces", ".", "Box", "(", "\n", "low", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "min", ",", "\n", "high", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "max", ",", "\n", "shape", "=", "sensor_shape", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.EpisodicGPSSensor.get_observation": [[450, 469], ["nav.EpisodicGPSSensor._sim.get_agent_state", "numpy.array", "habitat.utils.geometry_utils.quaternion_from_coeff", "habitat.utils.geometry_utils.quaternion_rotate_vector", "habitat.utils.geometry_utils.quaternion_from_coeff.inverse", "numpy.array", "habitat.utils.geometry_utils.quaternion_rotate_vector.astype"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.get_agent_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.geometry_utils.quaternion_from_coeff", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.geometry_utils.quaternion_rotate_vector"], ["", "def", "get_observation", "(", "\n", "self", ",", "observations", ",", "episode", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", "\n", ")", ":", "\n", "        ", "agent_state", "=", "self", ".", "_sim", ".", "get_agent_state", "(", ")", "\n", "\n", "origin", "=", "np", ".", "array", "(", "episode", ".", "start_position", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "rotation_world_start", "=", "quaternion_from_coeff", "(", "episode", ".", "start_rotation", ")", "\n", "\n", "agent_position", "=", "agent_state", ".", "position", "\n", "\n", "agent_position", "=", "quaternion_rotate_vector", "(", "\n", "rotation_world_start", ".", "inverse", "(", ")", ",", "agent_position", "-", "origin", "\n", ")", "\n", "if", "self", ".", "_dimensionality", "==", "2", ":", "\n", "            ", "return", "np", ".", "array", "(", "\n", "[", "-", "agent_position", "[", "2", "]", ",", "agent_position", "[", "0", "]", "]", ",", "dtype", "=", "np", ".", "float32", "\n", ")", "\n", "", "else", ":", "\n", "            ", "return", "agent_position", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.ProximitySensor.__init__": [[481, 487], ["getattr", "habitat.core.simulator.Sensor.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "sim", ",", "config", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "self", ".", "_sim", "=", "sim", "\n", "self", ".", "_max_detection_radius", "=", "getattr", "(", "\n", "config", ",", "\"MAX_DETECTION_RADIUS\"", ",", "2.0", "\n", ")", "\n", "super", "(", ")", ".", "__init__", "(", "config", "=", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.ProximitySensor._get_uuid": [[488, 490], ["None"], "methods", ["None"], ["", "def", "_get_uuid", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.ProximitySensor._get_sensor_type": [[491, 493], ["None"], "methods", ["None"], ["", "def", "_get_sensor_type", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "return", "SensorTypes", ".", "TACTILE", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.ProximitySensor._get_observation_space": [[494, 500], ["gym.spaces.Box"], "methods", ["None"], ["", "def", "_get_observation_space", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "return", "spaces", ".", "Box", "(", "\n", "low", "=", "0.0", ",", "\n", "high", "=", "self", ".", "_max_detection_radius", ",", "\n", "shape", "=", "(", "1", ",", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.ProximitySensor.get_observation": [[502, 514], ["numpy.array", "nav.ProximitySensor._sim.get_agent_state", "nav.ProximitySensor._sim.distance_to_closest_obstacle"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.get_agent_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSim.distance_to_closest_obstacle"], ["", "def", "get_observation", "(", "\n", "self", ",", "observations", ",", "*", "args", ":", "Any", ",", "episode", ",", "**", "kwargs", ":", "Any", "\n", ")", ":", "\n", "        ", "current_position", "=", "self", ".", "_sim", ".", "get_agent_state", "(", ")", ".", "position", "\n", "\n", "return", "np", ".", "array", "(", "\n", "[", "\n", "self", ".", "_sim", ".", "distance_to_closest_obstacle", "(", "\n", "current_position", ",", "self", ".", "_max_detection_radius", "\n", ")", "\n", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.Success.__init__": [[526, 533], ["habitat.core.embodied_task.Measure.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "\n", "self", ",", "sim", ":", "Simulator", ",", "config", ":", "Config", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", "\n", ")", ":", "\n", "        ", "self", ".", "_sim", "=", "sim", "\n", "self", ".", "_config", "=", "config", "\n", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.Success._get_uuid": [[534, 536], ["None"], "methods", ["None"], ["", "def", "_get_uuid", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.Success.reset_metric": [[537, 542], ["task.measurements.check_measure_dependencies", "nav.Success.update_metric"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measurements.check_measure_dependencies", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.update_metric"], ["", "def", "reset_metric", "(", "self", ",", "episode", ",", "task", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "task", ".", "measurements", ".", "check_measure_dependencies", "(", "\n", "self", ".", "uuid", ",", "[", "DistanceToGoal", ".", "cls_uuid", "]", "\n", ")", "\n", "self", ".", "update_metric", "(", "episode", "=", "episode", ",", "task", "=", "task", ",", "*", "args", ",", "**", "kwargs", ")", "# type: ignore", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.Success.update_metric": [[543, 558], ["task.measurements.measures[].get_metric", "hasattr"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.get_metric"], ["", "def", "update_metric", "(", "\n", "self", ",", "episode", ",", "task", ":", "EmbodiedTask", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", "\n", ")", ":", "\n", "        ", "distance_to_target", "=", "task", ".", "measurements", ".", "measures", "[", "\n", "DistanceToGoal", ".", "cls_uuid", "\n", "]", ".", "get_metric", "(", ")", "\n", "\n", "if", "(", "\n", "hasattr", "(", "task", ",", "\"is_stop_called\"", ")", "\n", "and", "task", ".", "is_stop_called", "# type: ignore", "\n", "and", "distance_to_target", "<", "self", ".", "_config", ".", "SUCCESS_DISTANCE", "\n", ")", ":", "\n", "            ", "self", ".", "_metric", "=", "1.0", "\n", "", "else", ":", "\n", "            ", "self", ".", "_metric", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.SPL.__init__": [[571, 584], ["habitat.core.embodied_task.Measure.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "\n", "self", ",", "sim", ":", "Simulator", ",", "config", ":", "Config", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", "\n", ")", ":", "\n", "        ", "self", ".", "_previous_position", ":", "Optional", "[", "np", ".", "ndarray", "]", "=", "None", "\n", "self", ".", "_start_end_episode_distance", ":", "Optional", "[", "float", "]", "=", "None", "\n", "self", ".", "_agent_episode_distance", ":", "Optional", "[", "float", "]", "=", "None", "\n", "self", ".", "_episode_view_points", ":", "Optional", "[", "\n", "List", "[", "Tuple", "[", "float", ",", "float", ",", "float", "]", "]", "\n", "]", "=", "None", "\n", "self", ".", "_sim", "=", "sim", "\n", "self", ".", "_config", "=", "config", "\n", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.SPL._get_uuid": [[585, 587], ["None"], "methods", ["None"], ["", "def", "_get_uuid", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "str", ":", "\n", "        ", "return", "\"spl\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.SPL.reset_metric": [[588, 600], ["task.measurements.check_measure_dependencies", "task.measurements.measures[].get_metric", "nav.SPL.update_metric", "nav.SPL._sim.get_agent_state"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measurements.check_measure_dependencies", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.get_metric", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.update_metric", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.get_agent_state"], ["", "def", "reset_metric", "(", "self", ",", "episode", ",", "task", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "task", ".", "measurements", ".", "check_measure_dependencies", "(", "\n", "self", ".", "uuid", ",", "[", "DistanceToGoal", ".", "cls_uuid", ",", "Success", ".", "cls_uuid", "]", "\n", ")", "\n", "\n", "self", ".", "_previous_position", "=", "self", ".", "_sim", ".", "get_agent_state", "(", ")", ".", "position", "\n", "self", ".", "_agent_episode_distance", "=", "0.0", "\n", "self", ".", "_start_end_episode_distance", "=", "task", ".", "measurements", ".", "measures", "[", "\n", "DistanceToGoal", ".", "cls_uuid", "\n", "]", ".", "get_metric", "(", ")", "\n", "self", ".", "update_metric", "(", "# type:ignore", "\n", "episode", "=", "episode", ",", "task", "=", "task", ",", "*", "args", ",", "**", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.SPL._euclidean_distance": [[602, 604], ["numpy.linalg.norm"], "methods", ["None"], ["", "def", "_euclidean_distance", "(", "self", ",", "position_a", ",", "position_b", ")", ":", "\n", "        ", "return", "np", ".", "linalg", ".", "norm", "(", "position_b", "-", "position_a", ",", "ord", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.SPL.update_metric": [[605, 621], ["task.measurements.measures[].get_metric", "nav.SPL._euclidean_distance", "nav.SPL._sim.get_agent_state", "max"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.get_metric", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.SPL._euclidean_distance", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.get_agent_state"], ["", "def", "update_metric", "(", "\n", "self", ",", "episode", ",", "task", ":", "EmbodiedTask", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", "\n", ")", ":", "\n", "        ", "ep_success", "=", "task", ".", "measurements", ".", "measures", "[", "Success", ".", "cls_uuid", "]", ".", "get_metric", "(", ")", "\n", "\n", "current_position", "=", "self", ".", "_sim", ".", "get_agent_state", "(", ")", ".", "position", "\n", "self", ".", "_agent_episode_distance", "+=", "self", ".", "_euclidean_distance", "(", "\n", "current_position", ",", "self", ".", "_previous_position", "\n", ")", "\n", "\n", "self", ".", "_previous_position", "=", "current_position", "\n", "\n", "self", ".", "_metric", "=", "ep_success", "*", "(", "\n", "self", ".", "_start_end_episode_distance", "\n", "/", "max", "(", "\n", "self", ".", "_start_end_episode_distance", ",", "self", ".", "_agent_episode_distance", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.SoftSPL._get_uuid": [[633, 635], ["None"], "methods", ["None"], ["def", "_get_uuid", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "str", ":", "\n", "        ", "return", "\"softspl\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.SoftSPL.reset_metric": [[636, 647], ["task.measurements.check_measure_dependencies", "task.measurements.measures[].get_metric", "nav.SoftSPL.update_metric", "nav.SoftSPL._sim.get_agent_state"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measurements.check_measure_dependencies", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.get_metric", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.update_metric", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.get_agent_state"], ["", "def", "reset_metric", "(", "self", ",", "episode", ",", "task", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "task", ".", "measurements", ".", "check_measure_dependencies", "(", "\n", "self", ".", "uuid", ",", "[", "DistanceToGoal", ".", "cls_uuid", "]", "\n", ")", "\n", "\n", "self", ".", "_previous_position", "=", "self", ".", "_sim", ".", "get_agent_state", "(", ")", ".", "position", "\n", "self", ".", "_agent_episode_distance", "=", "0.0", "\n", "self", ".", "_start_end_episode_distance", "=", "task", ".", "measurements", ".", "measures", "[", "\n", "DistanceToGoal", ".", "cls_uuid", "\n", "]", ".", "get_metric", "(", ")", "\n", "self", ".", "update_metric", "(", "episode", "=", "episode", ",", "task", "=", "task", ",", "*", "args", ",", "**", "kwargs", ")", "# type: ignore", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.SoftSPL.update_metric": [[648, 668], ["task.measurements.measures[].get_metric", "max", "nav.SoftSPL._euclidean_distance", "nav.SoftSPL._sim.get_agent_state", "max"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.get_metric", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.SPL._euclidean_distance", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.get_agent_state"], ["", "def", "update_metric", "(", "self", ",", "episode", ",", "task", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "current_position", "=", "self", ".", "_sim", ".", "get_agent_state", "(", ")", ".", "position", "\n", "distance_to_target", "=", "task", ".", "measurements", ".", "measures", "[", "\n", "DistanceToGoal", ".", "cls_uuid", "\n", "]", ".", "get_metric", "(", ")", "\n", "\n", "ep_soft_success", "=", "max", "(", "\n", "0", ",", "(", "1", "-", "distance_to_target", "/", "self", ".", "_start_end_episode_distance", ")", "\n", ")", "\n", "\n", "self", ".", "_agent_episode_distance", "+=", "self", ".", "_euclidean_distance", "(", "\n", "current_position", ",", "self", ".", "_previous_position", "\n", ")", "\n", "\n", "self", ".", "_previous_position", "=", "current_position", "\n", "\n", "self", ".", "_metric", "=", "ep_soft_success", "*", "(", "\n", "self", ".", "_start_end_episode_distance", "\n", "/", "max", "(", "\n", "self", ".", "_start_end_episode_distance", ",", "self", ".", "_agent_episode_distance", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.Collisions.__init__": [[674, 679], ["habitat.core.embodied_task.Measure.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "sim", ",", "config", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "self", ".", "_sim", "=", "sim", "\n", "self", ".", "_config", "=", "config", "\n", "self", ".", "_metric", "=", "None", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.Collisions._get_uuid": [[680, 682], ["None"], "methods", ["None"], ["", "def", "_get_uuid", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "str", ":", "\n", "        ", "return", "\"collisions\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.Collisions.reset_metric": [[683, 685], ["None"], "methods", ["None"], ["", "def", "reset_metric", "(", "self", ",", "episode", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "self", ".", "_metric", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.Collisions.update_metric": [[686, 693], ["None"], "methods", ["None"], ["", "def", "update_metric", "(", "self", ",", "episode", ",", "action", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "if", "self", ".", "_metric", "is", "None", ":", "\n", "            ", "self", ".", "_metric", "=", "{", "\"count\"", ":", "0", ",", "\"is_collision\"", ":", "False", "}", "\n", "", "self", ".", "_metric", "[", "\"is_collision\"", "]", "=", "False", "\n", "if", "self", ".", "_sim", ".", "previous_step_collided", ":", "\n", "            ", "self", ".", "_metric", "[", "\"count\"", "]", "+=", "1", "\n", "self", ".", "_metric", "[", "\"is_collision\"", "]", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.TopDownMap.__init__": [[699, 721], ["int", "habitat.core.embodied_task.Measure.__init__", "numpy.round", "int", "numpy.ceil"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "\n", "self", ",", "sim", ":", "\"HabitatSim\"", ",", "config", ":", "Config", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", "\n", ")", ":", "\n", "        ", "self", ".", "_sim", "=", "sim", "\n", "self", ".", "_config", "=", "config", "\n", "self", ".", "_grid_delta", "=", "config", ".", "MAP_PADDING", "\n", "self", ".", "_step_count", ":", "Optional", "[", "int", "]", "=", "None", "\n", "self", ".", "_map_resolution", "=", "config", ".", "MAP_RESOLUTION", "\n", "self", ".", "_ind_x_min", ":", "Optional", "[", "int", "]", "=", "None", "\n", "self", ".", "_ind_x_max", ":", "Optional", "[", "int", "]", "=", "None", "\n", "self", ".", "_ind_y_min", ":", "Optional", "[", "int", "]", "=", "None", "\n", "self", ".", "_ind_y_max", ":", "Optional", "[", "int", "]", "=", "None", "\n", "self", ".", "_previous_xy_location", ":", "Optional", "[", "Tuple", "[", "int", ",", "int", "]", "]", "=", "None", "\n", "self", ".", "_top_down_map", ":", "Optional", "[", "np", ".", "ndarray", "]", "=", "None", "\n", "self", ".", "_shortest_path_points", ":", "Optional", "[", "List", "[", "Tuple", "[", "int", ",", "int", "]", "]", "]", "=", "None", "\n", "self", ".", "line_thickness", "=", "int", "(", "\n", "np", ".", "round", "(", "self", ".", "_map_resolution", "*", "2", "/", "MAP_THICKNESS_SCALAR", ")", "\n", ")", "\n", "self", ".", "point_padding", "=", "2", "*", "int", "(", "\n", "np", ".", "ceil", "(", "self", ".", "_map_resolution", "/", "MAP_THICKNESS_SCALAR", ")", "\n", ")", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.TopDownMap._get_uuid": [[722, 724], ["None"], "methods", ["None"], ["", "def", "_get_uuid", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "str", ":", "\n", "        ", "return", "\"top_down_map\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.TopDownMap.get_original_map": [[725, 738], ["habitat.utils.visualizations.maps.get_topdown_map_from_sim", "numpy.zeros_like"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.maps.get_topdown_map_from_sim"], ["", "def", "get_original_map", "(", "self", ")", ":", "\n", "        ", "top_down_map", "=", "maps", ".", "get_topdown_map_from_sim", "(", "\n", "self", ".", "_sim", ",", "\n", "map_resolution", "=", "self", ".", "_map_resolution", ",", "\n", "draw_border", "=", "self", ".", "_config", ".", "DRAW_BORDER", ",", "\n", ")", "\n", "\n", "if", "self", ".", "_config", ".", "FOG_OF_WAR", ".", "DRAW", ":", "\n", "            ", "self", ".", "_fog_of_war_mask", "=", "np", ".", "zeros_like", "(", "top_down_map", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_fog_of_war_mask", "=", "None", "\n", "\n", "", "return", "top_down_map", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.TopDownMap._draw_point": [[739, 750], ["habitat.utils.visualizations.maps.to_grid"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.maps.to_grid"], ["", "def", "_draw_point", "(", "self", ",", "position", ",", "point_type", ")", ":", "\n", "        ", "t_x", ",", "t_y", "=", "maps", ".", "to_grid", "(", "\n", "position", "[", "2", "]", ",", "\n", "position", "[", "0", "]", ",", "\n", "(", "self", ".", "_top_down_map", ".", "shape", "[", "0", "]", ",", "self", ".", "_top_down_map", ".", "shape", "[", "1", "]", ")", ",", "\n", "sim", "=", "self", ".", "_sim", ",", "\n", ")", "\n", "self", ".", "_top_down_map", "[", "\n", "t_x", "-", "self", ".", "point_padding", ":", "t_x", "+", "self", ".", "point_padding", "+", "1", ",", "\n", "t_y", "-", "self", ".", "point_padding", ":", "t_y", "+", "self", ".", "point_padding", "+", "1", ",", "\n", "]", "=", "point_type", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.TopDownMap._draw_goals_view_points": [[751, 764], ["nav.TopDownMap._is_on_same_floor", "nav.TopDownMap._draw_point"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.TopDownMap._is_on_same_floor", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.TopDownMap._draw_point"], ["", "def", "_draw_goals_view_points", "(", "self", ",", "episode", ")", ":", "\n", "        ", "if", "self", ".", "_config", ".", "DRAW_VIEW_POINTS", ":", "\n", "            ", "for", "goal", "in", "episode", ".", "goals", ":", "\n", "                ", "if", "self", ".", "_is_on_same_floor", "(", "goal", ".", "position", "[", "1", "]", ")", ":", "\n", "                    ", "try", ":", "\n", "                        ", "if", "goal", ".", "view_points", "is", "not", "None", ":", "\n", "                            ", "for", "view_point", "in", "goal", ".", "view_points", ":", "\n", "                                ", "self", ".", "_draw_point", "(", "\n", "view_point", ".", "agent_state", ".", "position", ",", "\n", "maps", ".", "MAP_VIEW_POINT_INDICATOR", ",", "\n", ")", "\n", "", "", "", "except", "AttributeError", ":", "\n", "                        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.TopDownMap._draw_goals_positions": [[765, 776], ["nav.TopDownMap._is_on_same_floor", "nav.TopDownMap._draw_point"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.TopDownMap._is_on_same_floor", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.TopDownMap._draw_point"], ["", "", "", "", "", "def", "_draw_goals_positions", "(", "self", ",", "episode", ")", ":", "\n", "        ", "if", "self", ".", "_config", ".", "DRAW_GOAL_POSITIONS", ":", "\n", "\n", "            ", "for", "goal", "in", "episode", ".", "goals", ":", "\n", "                ", "if", "self", ".", "_is_on_same_floor", "(", "goal", ".", "position", "[", "1", "]", ")", ":", "\n", "                    ", "try", ":", "\n", "                        ", "self", ".", "_draw_point", "(", "\n", "goal", ".", "position", ",", "maps", ".", "MAP_TARGET_POINT_INDICATOR", "\n", ")", "\n", "", "except", "AttributeError", ":", "\n", "                        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.TopDownMap._draw_goals_aabb": [[777, 827], ["nav.TopDownMap._sim.semantic_annotations", "habitat.utils.visualizations.maps.draw_path", "int", "int", "habitat.utils.visualizations.maps.to_grid", "numpy.array", "nav.TopDownMap._is_on_same_floor", "nav.TopDownMap.objects[].id.split"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSim.semantic_annotations", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.maps.draw_path", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.maps.to_grid", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.TopDownMap._is_on_same_floor"], ["", "", "", "", "", "def", "_draw_goals_aabb", "(", "self", ",", "episode", ")", ":", "\n", "        ", "if", "self", ".", "_config", ".", "DRAW_GOAL_AABBS", ":", "\n", "            ", "for", "goal", "in", "episode", ".", "goals", ":", "\n", "                ", "try", ":", "\n", "                    ", "sem_scene", "=", "self", ".", "_sim", ".", "semantic_annotations", "(", ")", "\n", "object_id", "=", "goal", ".", "object_id", "\n", "assert", "int", "(", "\n", "sem_scene", ".", "objects", "[", "object_id", "]", ".", "id", ".", "split", "(", "\"_\"", ")", "[", "-", "1", "]", "\n", ")", "==", "int", "(", "\n", "goal", ".", "object_id", "\n", ")", ",", "f\"Object_id doesn't correspond to id in semantic scene objects dictionary for episode: {episode}\"", "\n", "\n", "center", "=", "sem_scene", ".", "objects", "[", "object_id", "]", ".", "aabb", ".", "center", "\n", "x_len", ",", "_", ",", "z_len", "=", "(", "\n", "sem_scene", ".", "objects", "[", "object_id", "]", ".", "aabb", ".", "sizes", "/", "2.0", "\n", ")", "\n", "# Nodes to draw rectangle", "\n", "corners", "=", "[", "\n", "center", "+", "np", ".", "array", "(", "[", "x", ",", "0", ",", "z", "]", ")", "\n", "for", "x", ",", "z", "in", "[", "\n", "(", "-", "x_len", ",", "-", "z_len", ")", ",", "\n", "(", "-", "x_len", ",", "z_len", ")", ",", "\n", "(", "x_len", ",", "z_len", ")", ",", "\n", "(", "x_len", ",", "-", "z_len", ")", ",", "\n", "(", "-", "x_len", ",", "-", "z_len", ")", ",", "\n", "]", "\n", "if", "self", ".", "_is_on_same_floor", "(", "center", "[", "1", "]", ")", "\n", "]", "\n", "\n", "map_corners", "=", "[", "\n", "maps", ".", "to_grid", "(", "\n", "p", "[", "2", "]", ",", "\n", "p", "[", "0", "]", ",", "\n", "(", "\n", "self", ".", "_top_down_map", ".", "shape", "[", "0", "]", ",", "\n", "self", ".", "_top_down_map", ".", "shape", "[", "1", "]", ",", "\n", ")", ",", "\n", "sim", "=", "self", ".", "_sim", ",", "\n", ")", "\n", "for", "p", "in", "corners", "\n", "]", "\n", "\n", "maps", ".", "draw_path", "(", "\n", "self", ".", "_top_down_map", ",", "\n", "map_corners", ",", "\n", "maps", ".", "MAP_TARGET_BOUNDING_BOX", ",", "\n", "self", ".", "line_thickness", ",", "\n", ")", "\n", "", "except", "AttributeError", ":", "\n", "                    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.TopDownMap._draw_shortest_path": [[828, 851], ["nav.TopDownMap._sim.get_straight_shortest_path_points", "habitat.utils.visualizations.maps.draw_path", "habitat.utils.visualizations.maps.to_grid"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.get_straight_shortest_path_points", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.maps.draw_path", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.maps.to_grid"], ["", "", "", "", "def", "_draw_shortest_path", "(", "\n", "self", ",", "episode", ":", "NavigationEpisode", ",", "agent_position", ":", "AgentState", "\n", ")", ":", "\n", "        ", "if", "self", ".", "_config", ".", "DRAW_SHORTEST_PATH", ":", "\n", "            ", "_shortest_path_points", "=", "(", "\n", "self", ".", "_sim", ".", "get_straight_shortest_path_points", "(", "\n", "agent_position", ",", "episode", ".", "goals", "[", "0", "]", ".", "position", "\n", ")", "\n", ")", "\n", "self", ".", "_shortest_path_points", "=", "[", "\n", "maps", ".", "to_grid", "(", "\n", "p", "[", "2", "]", ",", "\n", "p", "[", "0", "]", ",", "\n", "(", "self", ".", "_top_down_map", ".", "shape", "[", "0", "]", ",", "self", ".", "_top_down_map", ".", "shape", "[", "1", "]", ")", ",", "\n", "sim", "=", "self", ".", "_sim", ",", "\n", ")", "\n", "for", "p", "in", "_shortest_path_points", "\n", "]", "\n", "maps", ".", "draw_path", "(", "\n", "self", ".", "_top_down_map", ",", "\n", "self", ".", "_shortest_path_points", ",", "\n", "maps", ".", "MAP_SHORTEST_PATH_COLOR", ",", "\n", "self", ".", "line_thickness", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.TopDownMap._is_on_same_floor": [[853, 859], ["nav.TopDownMap._sim.get_agent"], "methods", ["None"], ["", "", "def", "_is_on_same_floor", "(", "\n", "self", ",", "height", ",", "ref_floor_height", "=", "None", ",", "ceiling_height", "=", "2.0", "\n", ")", ":", "\n", "        ", "if", "ref_floor_height", "is", "None", ":", "\n", "            ", "ref_floor_height", "=", "self", ".", "_sim", ".", "get_agent", "(", "0", ")", ".", "state", ".", "position", "[", "1", "]", "\n", "", "return", "ref_floor_height", "<", "height", "<", "ref_floor_height", "+", "ceiling_height", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.TopDownMap.reset_metric": [[860, 885], ["nav.TopDownMap.get_original_map", "habitat.utils.visualizations.maps.to_grid", "nav.TopDownMap.update_fog_of_war_mask", "hasattr", "nav.TopDownMap._sim.get_agent_state", "numpy.array", "nav.TopDownMap._draw_goals_view_points", "nav.TopDownMap._draw_goals_aabb", "nav.TopDownMap._draw_goals_positions", "nav.TopDownMap._draw_shortest_path", "nav.TopDownMap._draw_point"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.TopDownMap.get_original_map", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.maps.to_grid", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.TopDownMap.update_fog_of_war_mask", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.get_agent_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.TopDownMap._draw_goals_view_points", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.TopDownMap._draw_goals_aabb", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.TopDownMap._draw_goals_positions", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.TopDownMap._draw_shortest_path", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.TopDownMap._draw_point"], ["", "def", "reset_metric", "(", "self", ",", "episode", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "self", ".", "_step_count", "=", "0", "\n", "self", ".", "_metric", "=", "None", "\n", "self", ".", "_top_down_map", "=", "self", ".", "get_original_map", "(", ")", "\n", "agent_position", "=", "self", ".", "_sim", ".", "get_agent_state", "(", ")", ".", "position", "\n", "a_x", ",", "a_y", "=", "maps", ".", "to_grid", "(", "\n", "agent_position", "[", "2", "]", ",", "\n", "agent_position", "[", "0", "]", ",", "\n", "(", "self", ".", "_top_down_map", ".", "shape", "[", "0", "]", ",", "self", ".", "_top_down_map", ".", "shape", "[", "1", "]", ")", ",", "\n", "sim", "=", "self", ".", "_sim", ",", "\n", ")", "\n", "self", ".", "_previous_xy_location", "=", "(", "a_y", ",", "a_x", ")", "\n", "\n", "self", ".", "update_fog_of_war_mask", "(", "np", ".", "array", "(", "[", "a_x", ",", "a_y", "]", ")", ")", "\n", "\n", "if", "hasattr", "(", "episode", ",", "\"goal\"", ")", ":", "\n", "# draw source and target parts last to avoid overlap", "\n", "            ", "self", ".", "_draw_goals_view_points", "(", "episode", ")", "\n", "self", ".", "_draw_goals_aabb", "(", "episode", ")", "\n", "self", ".", "_draw_goals_positions", "(", "episode", ")", "\n", "self", ".", "_draw_shortest_path", "(", "episode", ",", "agent_position", ")", "\n", "\n", "", "if", "self", ".", "_config", ".", "DRAW_SOURCE", ":", "\n", "            ", "self", ".", "_draw_point", "(", "\n", "episode", ".", "start_position", ",", "maps", ".", "MAP_SOURCE_POINT_INDICATOR", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.TopDownMap.update_metric": [[887, 898], ["nav.TopDownMap.update_map", "nav.TopDownMap.get_polar_angle", "nav.TopDownMap._sim.get_agent_state"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.TopDownMap.update_map", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.TopDownMap.get_polar_angle", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.get_agent_state"], ["", "", "def", "update_metric", "(", "self", ",", "episode", ",", "action", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "self", ".", "_step_count", "+=", "1", "\n", "house_map", ",", "map_agent_x", ",", "map_agent_y", "=", "self", ".", "update_map", "(", "\n", "self", ".", "_sim", ".", "get_agent_state", "(", ")", ".", "position", "\n", ")", "\n", "\n", "self", ".", "_metric", "=", "{", "\n", "\"map\"", ":", "house_map", ",", "\n", "\"fog_of_war_mask\"", ":", "self", ".", "_fog_of_war_mask", ",", "\n", "\"agent_map_coord\"", ":", "(", "map_agent_x", ",", "map_agent_y", ")", ",", "\n", "\"agent_angle\"", ":", "self", ".", "get_polar_angle", "(", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.TopDownMap.get_polar_angle": [[900, 912], ["nav.TopDownMap._sim.get_agent_state", "habitat.utils.geometry_utils.quaternion_rotate_vector", "ref_rotation.inverse", "numpy.array", "habitat.tasks.utils.cartesian_to_polar", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.get_agent_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.geometry_utils.quaternion_rotate_vector", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.tasks.utils.cartesian_to_polar"], ["", "def", "get_polar_angle", "(", "self", ")", ":", "\n", "        ", "agent_state", "=", "self", ".", "_sim", ".", "get_agent_state", "(", ")", "\n", "# quaternion is in x, y, z, w format", "\n", "ref_rotation", "=", "agent_state", ".", "rotation", "\n", "\n", "heading_vector", "=", "quaternion_rotate_vector", "(", "\n", "ref_rotation", ".", "inverse", "(", ")", ",", "np", ".", "array", "(", "[", "0", ",", "0", ",", "-", "1", "]", ")", "\n", ")", "\n", "\n", "phi", "=", "cartesian_to_polar", "(", "-", "heading_vector", "[", "2", "]", ",", "heading_vector", "[", "0", "]", ")", "[", "1", "]", "\n", "z_neg_z_flip", "=", "np", ".", "pi", "\n", "return", "np", ".", "array", "(", "phi", ")", "+", "z_neg_z_flip", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.TopDownMap.update_map": [[913, 939], ["habitat.utils.visualizations.maps.to_grid", "nav.TopDownMap.update_fog_of_war_mask", "cv2.line", "numpy.array", "min"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.maps.to_grid", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.TopDownMap.update_fog_of_war_mask"], ["", "def", "update_map", "(", "self", ",", "agent_position", ")", ":", "\n", "        ", "a_x", ",", "a_y", "=", "maps", ".", "to_grid", "(", "\n", "agent_position", "[", "2", "]", ",", "\n", "agent_position", "[", "0", "]", ",", "\n", "(", "self", ".", "_top_down_map", ".", "shape", "[", "0", "]", ",", "self", ".", "_top_down_map", ".", "shape", "[", "1", "]", ")", ",", "\n", "sim", "=", "self", ".", "_sim", ",", "\n", ")", "\n", "# Don't draw over the source point", "\n", "if", "self", ".", "_top_down_map", "[", "a_x", ",", "a_y", "]", "!=", "maps", ".", "MAP_SOURCE_POINT_INDICATOR", ":", "\n", "            ", "color", "=", "10", "+", "min", "(", "\n", "self", ".", "_step_count", "*", "245", "//", "self", ".", "_config", ".", "MAX_EPISODE_STEPS", ",", "245", "\n", ")", "\n", "\n", "thickness", "=", "self", ".", "line_thickness", "\n", "cv2", ".", "line", "(", "\n", "self", ".", "_top_down_map", ",", "\n", "self", ".", "_previous_xy_location", ",", "\n", "(", "a_y", ",", "a_x", ")", ",", "\n", "color", ",", "\n", "thickness", "=", "thickness", ",", "\n", ")", "\n", "\n", "", "self", ".", "update_fog_of_war_mask", "(", "np", ".", "array", "(", "[", "a_x", ",", "a_y", "]", ")", ")", "\n", "\n", "self", ".", "_previous_xy_location", "=", "(", "a_y", ",", "a_x", ")", "\n", "return", "self", ".", "_top_down_map", ",", "a_x", ",", "a_y", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.TopDownMap.update_fog_of_war_mask": [[940, 951], ["habitat.utils.visualizations.fog_of_war.reveal_fog_of_war", "nav.TopDownMap.get_polar_angle", "habitat.utils.visualizations.maps.calculate_meters_per_pixel"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.fog_of_war.reveal_fog_of_war", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.TopDownMap.get_polar_angle", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.maps.calculate_meters_per_pixel"], ["", "def", "update_fog_of_war_mask", "(", "self", ",", "agent_position", ")", ":", "\n", "        ", "if", "self", ".", "_config", ".", "FOG_OF_WAR", ".", "DRAW", ":", "\n", "            ", "self", ".", "_fog_of_war_mask", "=", "fog_of_war", ".", "reveal_fog_of_war", "(", "\n", "self", ".", "_top_down_map", ",", "\n", "self", ".", "_fog_of_war_mask", ",", "\n", "agent_position", ",", "\n", "self", ".", "get_polar_angle", "(", ")", ",", "\n", "fov", "=", "self", ".", "_config", ".", "FOG_OF_WAR", ".", "FOV", ",", "\n", "max_line_len", "=", "self", ".", "_config", ".", "FOG_OF_WAR", ".", "VISIBILITY_DIST", "\n", "/", "maps", ".", "calculate_meters_per_pixel", "(", "\n", "self", ".", "_map_resolution", ",", "sim", "=", "self", ".", "_sim", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.DistanceToGoal.__init__": [[961, 972], ["habitat.core.embodied_task.Measure.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "\n", "self", ",", "sim", ":", "Simulator", ",", "config", ":", "Config", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", "\n", ")", ":", "\n", "        ", "self", ".", "_previous_position", ":", "Optional", "[", "Tuple", "[", "float", ",", "float", ",", "float", "]", "]", "=", "None", "\n", "self", ".", "_sim", "=", "sim", "\n", "self", ".", "_config", "=", "config", "\n", "self", ".", "_episode_view_points", ":", "Optional", "[", "\n", "List", "[", "Tuple", "[", "float", ",", "float", ",", "float", "]", "]", "\n", "]", "=", "None", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.DistanceToGoal._get_uuid": [[973, 975], ["None"], "methods", ["None"], ["", "def", "_get_uuid", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.DistanceToGoal.reset_metric": [[976, 986], ["nav.DistanceToGoal.update_metric"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.update_metric"], ["", "def", "reset_metric", "(", "self", ",", "episode", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "self", ".", "_previous_position", "=", "None", "\n", "self", ".", "_metric", "=", "None", "\n", "if", "self", ".", "_config", ".", "DISTANCE_TO", "==", "\"VIEW_POINTS\"", ":", "\n", "            ", "self", ".", "_episode_view_points", "=", "[", "\n", "view_point", ".", "agent_state", ".", "position", "\n", "for", "goal", "in", "episode", ".", "goals", "\n", "for", "view_point", "in", "goal", ".", "view_points", "\n", "]", "\n", "", "self", ".", "update_metric", "(", "episode", "=", "episode", ",", "*", "args", ",", "**", "kwargs", ")", "# type: ignore", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.DistanceToGoal.update_metric": [[987, 1016], ["nav.DistanceToGoal._sim.get_agent_state", "numpy.allclose", "nav.DistanceToGoal._sim.geodesic_distance", "nav.DistanceToGoal._sim.geodesic_distance", "habitat.core.logging.logger.error"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.get_agent_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.geodesic_distance", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.geodesic_distance"], ["", "def", "update_metric", "(", "\n", "self", ",", "episode", ":", "NavigationEpisode", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", "\n", ")", ":", "\n", "        ", "current_position", "=", "self", ".", "_sim", ".", "get_agent_state", "(", ")", ".", "position", "\n", "\n", "if", "self", ".", "_previous_position", "is", "None", "or", "not", "np", ".", "allclose", "(", "\n", "self", ".", "_previous_position", ",", "current_position", ",", "atol", "=", "1e-4", "\n", ")", ":", "\n", "            ", "if", "self", ".", "_config", ".", "DISTANCE_TO", "==", "\"POINT\"", ":", "\n", "                ", "distance_to_target", "=", "self", ".", "_sim", ".", "geodesic_distance", "(", "\n", "current_position", ",", "\n", "[", "goal", ".", "position", "for", "goal", "in", "episode", ".", "goals", "]", ",", "\n", "episode", ",", "\n", ")", "\n", "", "elif", "self", ".", "_config", ".", "DISTANCE_TO", "==", "\"VIEW_POINTS\"", ":", "\n", "                ", "distance_to_target", "=", "self", ".", "_sim", ".", "geodesic_distance", "(", "\n", "current_position", ",", "self", ".", "_episode_view_points", ",", "episode", "\n", ")", "\n", "", "else", ":", "\n", "                ", "logger", ".", "error", "(", "\n", "f\"Non valid DISTANCE_TO parameter was provided: {self._config.DISTANCE_TO}\"", "\n", ")", "\n", "\n", "", "self", ".", "_previous_position", "=", "(", "\n", "current_position", "[", "0", "]", ",", "\n", "current_position", "[", "1", "]", ",", "\n", "current_position", "[", "2", "]", ",", "\n", ")", "\n", "self", ".", "_metric", "=", "distance_to_target", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.MoveForwardAction.step": [[1022, 1027], ["nav.MoveForwardAction._sim.step"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step"], ["def", "step", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "r\"\"\"Update ``_metric``, this method is called from ``Env`` on each\n        ``step``.\n        \"\"\"", "\n", "return", "self", ".", "_sim", ".", "step", "(", "HabitatSimActions", ".", "MOVE_FORWARD", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.TurnLeftAction.step": [[1031, 1036], ["nav.TurnLeftAction._sim.step"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step"], ["    ", "def", "step", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "r\"\"\"Update ``_metric``, this method is called from ``Env`` on each\n        ``step``.\n        \"\"\"", "\n", "return", "self", ".", "_sim", ".", "step", "(", "HabitatSimActions", ".", "TURN_LEFT", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.TurnRightAction.step": [[1040, 1045], ["nav.TurnRightAction._sim.step"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step"], ["    ", "def", "step", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "r\"\"\"Update ``_metric``, this method is called from ``Env`` on each\n        ``step``.\n        \"\"\"", "\n", "return", "self", ".", "_sim", ".", "step", "(", "HabitatSimActions", ".", "TURN_RIGHT", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.StopAction.reset": [[1051, 1053], ["None"], "methods", ["None"], ["def", "reset", "(", "self", ",", "task", ":", "EmbodiedTask", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "task", ".", "is_stop_called", "=", "False", "# type: ignore", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.StopAction.step": [[1054, 1060], ["nav.StopAction._sim.get_observations_at"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.get_observations_at"], ["", "def", "step", "(", "self", ",", "task", ":", "EmbodiedTask", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "r\"\"\"Update ``_metric``, this method is called from ``Env`` on each\n        ``step``.\n        \"\"\"", "\n", "task", ".", "is_stop_called", "=", "True", "# type: ignore", "\n", "return", "self", ".", "_sim", ".", "get_observations_at", "(", ")", "# type: ignore", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.LookUpAction.step": [[1064, 1069], ["nav.LookUpAction._sim.step"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step"], ["    ", "def", "step", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "r\"\"\"Update ``_metric``, this method is called from ``Env`` on each\n        ``step``.\n        \"\"\"", "\n", "return", "self", ".", "_sim", ".", "step", "(", "HabitatSimActions", ".", "LOOK_UP", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.LookDownAction.step": [[1073, 1078], ["nav.LookDownAction._sim.step"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step"], ["    ", "def", "step", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "r\"\"\"Update ``_metric``, this method is called from ``Env`` on each\n        ``step``.\n        \"\"\"", "\n", "return", "self", ".", "_sim", ".", "step", "(", "HabitatSimActions", ".", "LOOK_DOWN", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.TeleportAction._get_uuid": [[1087, 1089], ["None"], "methods", ["None"], ["def", "_get_uuid", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "str", ":", "\n", "        ", "return", "\"TELEPORT\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.TeleportAction.step": [[1090, 1109], ["nav.TeleportAction._sim.get_observations_at", "isinstance", "list", "nav.TeleportAction._sim.is_navigable", "nav.TeleportAction._sim.get_observations_at"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.get_observations_at", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.is_navigable", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.get_observations_at"], ["", "def", "step", "(", "\n", "self", ",", "\n", "*", "args", ":", "Any", ",", "\n", "position", ":", "List", "[", "float", "]", ",", "\n", "rotation", ":", "Sequence", "[", "float", "]", ",", "\n", "**", "kwargs", ":", "Any", ",", "\n", ")", ":", "\n", "        ", "r\"\"\"Update ``_metric``, this method is called from ``Env`` on each\n        ``step``.\n        \"\"\"", "\n", "\n", "if", "not", "isinstance", "(", "rotation", ",", "list", ")", ":", "\n", "            ", "rotation", "=", "list", "(", "rotation", ")", "\n", "\n", "", "if", "not", "self", ".", "_sim", ".", "is_navigable", "(", "position", ")", ":", "\n", "            ", "return", "self", ".", "_sim", ".", "get_observations_at", "(", ")", "# type: ignore", "\n", "\n", "", "return", "self", ".", "_sim", ".", "get_observations_at", "(", "\n", "position", "=", "position", ",", "rotation", "=", "rotation", ",", "keep_agent_at_new_pose", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.TeleportAction.action_space": [[1111, 1124], ["gym.spaces.Dict", "gym.spaces.Box", "gym.spaces.Box", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["", "@", "property", "\n", "def", "action_space", "(", "self", ")", "->", "spaces", ".", "Dict", ":", "\n", "        ", "return", "spaces", ".", "Dict", "(", "\n", "{", "\n", "\"position\"", ":", "spaces", ".", "Box", "(", "\n", "low", "=", "np", ".", "array", "(", "[", "self", ".", "COORDINATE_MIN", "]", "*", "3", ")", ",", "\n", "high", "=", "np", ".", "array", "(", "[", "self", ".", "COORDINATE_MAX", "]", "*", "3", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", ",", "\n", "\"rotation\"", ":", "spaces", ".", "Box", "(", "\n", "low", "=", "np", ".", "array", "(", "[", "-", "1.0", ",", "-", "1.0", ",", "-", "1.0", ",", "-", "1.0", "]", ")", ",", "\n", "high", "=", "np", ".", "array", "(", "[", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", "]", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.VelocityAction.__init__": [[1133, 1147], ["habitat.core.embodied_task.SimulatorTaskAction.__init__", "VelocityControl"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "vel_control", "=", "VelocityControl", "(", ")", "\n", "self", ".", "vel_control", ".", "controlling_lin_vel", "=", "True", "\n", "self", ".", "vel_control", ".", "controlling_ang_vel", "=", "True", "\n", "self", ".", "vel_control", ".", "lin_vel_is_local", "=", "True", "\n", "self", ".", "vel_control", ".", "ang_vel_is_local", "=", "True", "\n", "\n", "config", "=", "kwargs", "[", "\"config\"", "]", "\n", "self", ".", "min_lin_vel", ",", "self", ".", "max_lin_vel", "=", "config", ".", "LIN_VEL_RANGE", "\n", "self", ".", "min_ang_vel", ",", "self", ".", "max_ang_vel", "=", "config", ".", "ANG_VEL_RANGE", "\n", "self", ".", "min_abs_lin_speed", "=", "config", ".", "MIN_ABS_LIN_SPEED", "\n", "self", ".", "min_abs_ang_speed", "=", "config", ".", "MIN_ABS_ANG_SPEED", "\n", "self", ".", "time_step", "=", "config", ".", "TIME_STEP", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.VelocityAction.action_space": [[1148, 1161], ["habitat.core.spaces.ActionSpace", "gym.spaces.Box", "gym.spaces.Box", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["", "@", "property", "\n", "def", "action_space", "(", "self", ")", ":", "\n", "        ", "return", "ActionSpace", "(", "\n", "{", "\n", "\"linear_velocity\"", ":", "spaces", ".", "Box", "(", "\n", "low", "=", "np", ".", "array", "(", "[", "self", ".", "min_lin_vel", "]", ")", ",", "\n", "high", "=", "np", ".", "array", "(", "[", "self", ".", "max_lin_vel", "]", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", ",", "\n", "\"angular_velocity\"", ":", "spaces", ".", "Box", "(", "\n", "low", "=", "np", ".", "array", "(", "[", "self", ".", "min_ang_vel", "]", ")", ",", "\n", "high", "=", "np", ".", "array", "(", "[", "self", ".", "max_ang_vel", "]", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.VelocityAction.reset": [[1165, 1167], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ",", "task", ":", "EmbodiedTask", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "task", ".", "is_stop_called", "=", "False", "# type: ignore", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.VelocityAction.step": [[1168, 1276], ["numpy.deg2rad", "numpy.array", "numpy.array", "nav.VelocityAction._sim.get_agent_state", "mn.Quaternion", "RigidState", "nav.VelocityAction.vel_control.integrate_transform", "step_fn", "nav.VelocityAction._sim.get_observations_at", "nav.VelocityAction._sim.get_observations_at", "abs", "abs"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.get_agent_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.get_observations_at", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.get_observations_at"], ["", "def", "step", "(", "\n", "self", ",", "\n", "*", "args", ":", "Any", ",", "\n", "task", ":", "EmbodiedTask", ",", "\n", "linear_velocity", ":", "float", ",", "\n", "angular_velocity", ":", "float", ",", "\n", "time_step", ":", "Optional", "[", "float", "]", "=", "None", ",", "\n", "allow_sliding", ":", "Optional", "[", "bool", "]", "=", "None", ",", "\n", "**", "kwargs", ":", "Any", ",", "\n", ")", ":", "\n", "        ", "r\"\"\"Moves the agent with a provided linear and angular velocity for the\n        provided amount of time\n\n        Args:\n            linear_velocity: between [-1,1], scaled according to\n                             config.LIN_VEL_RANGE\n            angular_velocity: between [-1,1], scaled according to\n                             config.ANG_VEL_RANGE\n            time_step: amount of time to move the agent for\n            allow_sliding: whether the agent will slide on collision\n        \"\"\"", "\n", "if", "allow_sliding", "is", "None", ":", "\n", "            ", "allow_sliding", "=", "self", ".", "_sim", ".", "config", ".", "sim_cfg", ".", "allow_sliding", "# type: ignore", "\n", "", "if", "time_step", "is", "None", ":", "\n", "            ", "time_step", "=", "self", ".", "time_step", "\n", "\n", "# Convert from [-1, 1] to [0, 1] range", "\n", "", "linear_velocity", "=", "(", "linear_velocity", "+", "1.0", ")", "/", "2.0", "\n", "angular_velocity", "=", "(", "angular_velocity", "+", "1.0", ")", "/", "2.0", "\n", "\n", "# Scale actions", "\n", "linear_velocity", "=", "self", ".", "min_lin_vel", "+", "linear_velocity", "*", "(", "\n", "self", ".", "max_lin_vel", "-", "self", ".", "min_lin_vel", "\n", ")", "\n", "angular_velocity", "=", "self", ".", "min_ang_vel", "+", "angular_velocity", "*", "(", "\n", "self", ".", "max_ang_vel", "-", "self", ".", "min_ang_vel", "\n", ")", "\n", "\n", "# Stop is called if both linear/angular speed are below their threshold", "\n", "if", "(", "\n", "abs", "(", "linear_velocity", ")", "<", "self", ".", "min_abs_lin_speed", "\n", "and", "abs", "(", "angular_velocity", ")", "<", "self", ".", "min_abs_ang_speed", "\n", ")", ":", "\n", "            ", "task", ".", "is_stop_called", "=", "True", "# type: ignore", "\n", "return", "self", ".", "_sim", ".", "get_observations_at", "(", "position", "=", "None", ",", "rotation", "=", "None", ")", "\n", "\n", "", "angular_velocity", "=", "np", ".", "deg2rad", "(", "angular_velocity", ")", "\n", "self", ".", "vel_control", ".", "linear_velocity", "=", "np", ".", "array", "(", "\n", "[", "0.0", ",", "0.0", ",", "-", "linear_velocity", "]", "\n", ")", "\n", "self", ".", "vel_control", ".", "angular_velocity", "=", "np", ".", "array", "(", "\n", "[", "0.0", ",", "angular_velocity", ",", "0.0", "]", "\n", ")", "\n", "agent_state", "=", "self", ".", "_sim", ".", "get_agent_state", "(", ")", "\n", "\n", "# Convert from np.quaternion (quaternion.quaternion) to mn.Quaternion", "\n", "normalized_quaternion", "=", "agent_state", ".", "rotation", "\n", "agent_mn_quat", "=", "mn", ".", "Quaternion", "(", "\n", "normalized_quaternion", ".", "imag", ",", "normalized_quaternion", ".", "real", "\n", ")", "\n", "current_rigid_state", "=", "RigidState", "(", "\n", "agent_mn_quat", ",", "\n", "agent_state", ".", "position", ",", "\n", ")", "\n", "\n", "# manually integrate the rigid state", "\n", "goal_rigid_state", "=", "self", ".", "vel_control", ".", "integrate_transform", "(", "\n", "time_step", ",", "current_rigid_state", "\n", ")", "\n", "\n", "# snap rigid state to navmesh and set state to object/agent", "\n", "if", "allow_sliding", ":", "\n", "            ", "step_fn", "=", "self", ".", "_sim", ".", "pathfinder", ".", "try_step", "# type: ignore", "\n", "", "else", ":", "\n", "            ", "step_fn", "=", "self", ".", "_sim", ".", "pathfinder", ".", "try_step_no_sliding", "# type: ignore", "\n", "\n", "", "final_position", "=", "step_fn", "(", "\n", "agent_state", ".", "position", ",", "goal_rigid_state", ".", "translation", "\n", ")", "\n", "final_rotation", "=", "[", "\n", "*", "goal_rigid_state", ".", "rotation", ".", "vector", ",", "\n", "goal_rigid_state", ".", "rotation", ".", "scalar", ",", "\n", "]", "\n", "\n", "# Check if a collision occured", "\n", "dist_moved_before_filter", "=", "(", "\n", "goal_rigid_state", ".", "translation", "-", "agent_state", ".", "position", "\n", ")", ".", "dot", "(", ")", "\n", "dist_moved_after_filter", "=", "(", "final_position", "-", "agent_state", ".", "position", ")", ".", "dot", "(", ")", "\n", "\n", "# NB: There are some cases where ||filter_end - end_pos|| > 0 when a", "\n", "# collision _didn't_ happen. One such case is going up stairs.  Instead,", "\n", "# we check to see if the the amount moved after the application of the", "\n", "# filter is _less_ than the amount moved before the application of the", "\n", "# filter.", "\n", "EPS", "=", "1e-5", "\n", "collided", "=", "(", "dist_moved_after_filter", "+", "EPS", ")", "<", "dist_moved_before_filter", "\n", "\n", "agent_observations", "=", "self", ".", "_sim", ".", "get_observations_at", "(", "\n", "position", "=", "final_position", ",", "\n", "rotation", "=", "final_rotation", ",", "\n", "keep_agent_at_new_pose", "=", "True", ",", "\n", ")", "\n", "\n", "# TODO: Make a better way to flag collisions", "\n", "self", ".", "_sim", ".", "_prev_sim_obs", "[", "\"collided\"", "]", "=", "collided", "# type: ignore", "\n", "\n", "return", "agent_observations", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.NavigationTask.__init__": [[1280, 1284], ["habitat.core.embodied_task.EmbodiedTask.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "config", ":", "Config", ",", "sim", ":", "Simulator", ",", "dataset", ":", "Optional", "[", "Dataset", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", "=", "config", ",", "sim", "=", "sim", ",", "dataset", "=", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.NavigationTask.overwrite_sim_config": [[1285, 1287], ["nav.merge_sim_episode_config"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.merge_sim_episode_config"], ["", "def", "overwrite_sim_config", "(", "self", ",", "sim_config", ":", "Any", ",", "episode", ":", "Episode", ")", "->", "Any", ":", "\n", "        ", "return", "merge_sim_episode_config", "(", "sim_config", ",", "episode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.NavigationTask._check_episode_is_active": [[1288, 1290], ["getattr"], "methods", ["None"], ["", "def", "_check_episode_is_active", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "bool", ":", "\n", "        ", "return", "not", "getattr", "(", "self", ",", "\"is_stop_called\"", ",", "False", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.nav.merge_sim_episode_config": [[61, 77], ["sim_config.defrost", "sim_config.freeze", "getattr", "getattr.defrost", "getattr.freeze"], "function", ["None"], ["def", "merge_sim_episode_config", "(", "sim_config", ":", "Config", ",", "episode", ":", "Episode", ")", "->", "Any", ":", "\n", "    ", "sim_config", ".", "defrost", "(", ")", "\n", "sim_config", ".", "SCENE", "=", "episode", ".", "scene_id", "\n", "sim_config", ".", "freeze", "(", ")", "\n", "if", "(", "\n", "episode", ".", "start_position", "is", "not", "None", "\n", "and", "episode", ".", "start_rotation", "is", "not", "None", "\n", ")", ":", "\n", "        ", "agent_name", "=", "sim_config", ".", "AGENTS", "[", "sim_config", ".", "DEFAULT_AGENT_ID", "]", "\n", "agent_cfg", "=", "getattr", "(", "sim_config", ",", "agent_name", ")", "\n", "agent_cfg", ".", "defrost", "(", ")", "\n", "agent_cfg", ".", "START_POSITION", "=", "episode", ".", "start_position", "\n", "agent_cfg", ".", "START_ROTATION", "=", "episode", ".", "start_rotation", "\n", "agent_cfg", ".", "IS_SET_START_STATE", "=", "True", "\n", "agent_cfg", ".", "freeze", "(", ")", "\n", "", "return", "sim_config", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.shortest_path_follower.ShortestPathFollower.__init__": [[38, 52], ["None"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "sim", ":", "HabitatSim", ",", "\n", "goal_radius", ":", "float", ",", "\n", "return_one_hot", ":", "bool", "=", "True", ",", "\n", "stop_on_error", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "\n", "        ", "self", ".", "_return_one_hot", "=", "return_one_hot", "\n", "self", ".", "_sim", "=", "sim", "\n", "self", ".", "_goal_radius", "=", "goal_radius", "\n", "self", ".", "_follower", ":", "Optional", "[", "habitat_sim", ".", "GreedyGeodesicFollower", "]", "=", "None", "\n", "self", ".", "_current_scene", "=", "None", "\n", "self", ".", "_stop_on_error", "=", "stop_on_error", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.shortest_path_follower.ShortestPathFollower._build_follower": [[53, 64], ["shortest_path_follower.ShortestPathFollower._sim.make_greedy_follower"], "methods", ["None"], ["", "def", "_build_follower", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_current_scene", "!=", "self", ".", "_sim", ".", "habitat_config", ".", "SCENE", ":", "\n", "            ", "self", ".", "_follower", "=", "self", ".", "_sim", ".", "make_greedy_follower", "(", "\n", "0", ",", "\n", "self", ".", "_goal_radius", ",", "\n", "stop_key", "=", "HabitatSimActions", ".", "STOP", ",", "\n", "forward_key", "=", "HabitatSimActions", ".", "MOVE_FORWARD", ",", "\n", "left_key", "=", "HabitatSimActions", ".", "TURN_LEFT", ",", "\n", "right_key", "=", "HabitatSimActions", ".", "TURN_RIGHT", ",", "\n", ")", "\n", "self", ".", "_current_scene", "=", "self", ".", "_sim", ".", "habitat_config", ".", "SCENE", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.shortest_path_follower.ShortestPathFollower._get_return_value": [[65, 70], ["shortest_path_follower.action_to_one_hot"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.shortest_path_follower.action_to_one_hot"], ["", "", "def", "_get_return_value", "(", "self", ",", "action", ")", "->", "Union", "[", "int", ",", "np", ".", "ndarray", "]", ":", "\n", "        ", "if", "self", ".", "_return_one_hot", ":", "\n", "            ", "return", "action_to_one_hot", "(", "action", ")", "\n", "", "else", ":", "\n", "            ", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.shortest_path_follower.ShortestPathFollower.get_next_action": [[71, 86], ["shortest_path_follower.ShortestPathFollower._build_follower", "shortest_path_follower.ShortestPathFollower._get_return_value", "shortest_path_follower.ShortestPathFollower._follower.next_action_along"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.shortest_path_follower.ShortestPathFollower._build_follower", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.shortest_path_follower.ShortestPathFollower._get_return_value"], ["", "", "def", "get_next_action", "(", "\n", "self", ",", "goal_pos", ":", "Union", "[", "List", "[", "float", "]", ",", "np", ".", "ndarray", "]", "\n", ")", "->", "Optional", "[", "Union", "[", "int", ",", "np", ".", "ndarray", "]", "]", ":", "\n", "        ", "\"\"\"Returns the next action along the shortest path.\"\"\"", "\n", "self", ".", "_build_follower", "(", ")", "\n", "assert", "self", ".", "_follower", "is", "not", "None", "\n", "try", ":", "\n", "            ", "next_action", "=", "self", ".", "_follower", ".", "next_action_along", "(", "goal_pos", ")", "\n", "", "except", "habitat_sim", ".", "errors", ".", "GreedyFollowerError", "as", "e", ":", "\n", "            ", "if", "self", ".", "_stop_on_error", ":", "\n", "                ", "next_action", "=", "HabitatSimActions", ".", "STOP", "\n", "", "else", ":", "\n", "                ", "raise", "e", "\n", "\n", "", "", "return", "self", ".", "_get_return_value", "(", "next_action", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.shortest_path_follower.ShortestPathFollower.mode": [[92, 95], ["warnings.warn"], "methods", ["None"], ["", "@", "mode", ".", "setter", "\n", "def", "mode", "(", "self", ",", "new_mode", ":", "str", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\".mode is depricated\"", ",", "DeprecationWarning", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.shortest_path_follower.action_to_one_hot": [[17, 21], ["numpy.zeros", "len"], "function", ["None"], ["def", "action_to_one_hot", "(", "action", ":", "int", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "one_hot", "=", "np", ".", "zeros", "(", "len", "(", "HabitatSimActions", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "one_hot", "[", "action", "]", "=", "1", "\n", "return", "one_hot", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.object_nav_task.ObjectGoalNavEpisode.goals_key": [[39, 43], ["os.path.basename"], "methods", ["None"], ["@", "property", "\n", "def", "goals_key", "(", "self", ")", "->", "str", ":", "\n", "        ", "r\"\"\"The key to retrieve the goals\"\"\"", "\n", "return", "f\"{os.path.basename(self.scene_id)}_{self.object_category}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.object_nav_task.ObjectGoalSensor.__init__": [[116, 127], ["habitat.core.simulator.Sensor.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "sim", ",", "\n", "config", ":", "Config", ",", "\n", "dataset", ":", "\"ObjectNavDatasetV1\"", ",", "\n", "*", "args", ":", "Any", ",", "\n", "**", "kwargs", ":", "Any", ",", "\n", ")", ":", "\n", "        ", "self", ".", "_sim", "=", "sim", "\n", "self", ".", "_dataset", "=", "dataset", "\n", "super", "(", ")", ".", "__init__", "(", "config", "=", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.object_nav_task.ObjectGoalSensor._get_uuid": [[128, 130], ["None"], "methods", ["None"], ["", "def", "_get_uuid", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.object_nav_task.ObjectGoalSensor._get_sensor_type": [[131, 133], ["None"], "methods", ["None"], ["", "def", "_get_sensor_type", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "return", "SensorTypes", ".", "SEMANTIC", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.object_nav_task.ObjectGoalSensor._get_observation_space": [[134, 144], ["gym.spaces.Box", "max", "object_nav_task.ObjectGoalSensor._dataset.category_to_task_category_id.values"], "methods", ["None"], ["", "def", "_get_observation_space", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "sensor_shape", "=", "(", "1", ",", ")", "\n", "max_value", "=", "self", ".", "config", ".", "GOAL_SPEC_MAX_VAL", "-", "1", "\n", "if", "self", ".", "config", ".", "GOAL_SPEC", "==", "\"TASK_CATEGORY_ID\"", ":", "\n", "            ", "max_value", "=", "max", "(", "\n", "self", ".", "_dataset", ".", "category_to_task_category_id", ".", "values", "(", ")", "\n", ")", "\n", "\n", "", "return", "spaces", ".", "Box", "(", "\n", "low", "=", "0", ",", "high", "=", "max_value", ",", "shape", "=", "sensor_shape", ",", "dtype", "=", "np", ".", "int64", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.object_nav_task.ObjectGoalSensor.get_observation": [[146, 177], ["len", "habitat.core.logging.logger.error", "isinstance", "habitat.core.logging.logger.error", "numpy.array", "isinstance", "numpy.array", "RuntimeError"], "methods", ["None"], ["", "def", "get_observation", "(", "\n", "self", ",", "\n", "observations", ",", "\n", "*", "args", ":", "Any", ",", "\n", "episode", ":", "ObjectGoalNavEpisode", ",", "\n", "**", "kwargs", ":", "Any", ",", "\n", ")", "->", "Optional", "[", "np", ".", "ndarray", "]", ":", "\n", "\n", "        ", "if", "len", "(", "episode", ".", "goals", ")", "==", "0", ":", "\n", "            ", "logger", ".", "error", "(", "\n", "f\"No goal specified for episode {episode.episode_id}.\"", "\n", ")", "\n", "return", "None", "\n", "", "if", "not", "isinstance", "(", "episode", ".", "goals", "[", "0", "]", ",", "ObjectGoal", ")", ":", "\n", "            ", "logger", ".", "error", "(", "\n", "f\"First goal should be ObjectGoal, episode {episode.episode_id}.\"", "\n", ")", "\n", "return", "None", "\n", "", "category_name", "=", "episode", ".", "object_category", "\n", "if", "self", ".", "config", ".", "GOAL_SPEC", "==", "\"TASK_CATEGORY_ID\"", ":", "\n", "            ", "return", "np", ".", "array", "(", "\n", "[", "self", ".", "_dataset", ".", "category_to_task_category_id", "[", "category_name", "]", "]", ",", "\n", "dtype", "=", "np", ".", "int64", ",", "\n", ")", "\n", "", "elif", "self", ".", "config", ".", "GOAL_SPEC", "==", "\"OBJECT_ID\"", ":", "\n", "            ", "obj_goal", "=", "episode", ".", "goals", "[", "0", "]", "\n", "assert", "isinstance", "(", "obj_goal", ",", "ObjectGoal", ")", "# for type checking", "\n", "return", "np", ".", "array", "(", "[", "obj_goal", ".", "object_name_id", "]", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"Wrong GOAL_SPEC specified for ObjectGoalSensor.\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.__init__._try_register_nav_task": [[11, 21], ["habitat.core.registry.registry.register_task"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry.register_task"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.pick_sensors.DidPickObjectMeasure.__init__": [[24, 27], ["habitat.core.embodied_task.Measure.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "sim", ",", "config", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_sim", "=", "sim", "\n", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.pick_sensors.DidPickObjectMeasure._get_uuid": [[28, 31], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_get_uuid", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "DidPickObjectMeasure", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.pick_sensors.DidPickObjectMeasure.reset_metric": [[32, 35], ["pick_sensors.DidPickObjectMeasure.update_metric"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.update_metric"], ["", "def", "reset_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_did_pick", "=", "False", "\n", "self", ".", "update_metric", "(", "*", "args", ",", "episode", "=", "episode", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.pick_sensors.DidPickObjectMeasure.update_metric": [[36, 39], ["int"], "methods", ["None"], ["", "def", "update_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_did_pick", "=", "self", ".", "_did_pick", "or", "self", ".", "_sim", ".", "grasp_mgr", ".", "is_grasped", "\n", "self", ".", "_metric", "=", "int", "(", "self", ".", "_did_pick", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.pick_sensors.RearrangePickReward.__init__": [[45, 51], ["habitat.tasks.rearrange.rearrange_sensors.RearrangeReward.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "sim", ",", "config", ",", "task", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "cur_dist", "=", "-", "1.0", "\n", "self", ".", "_prev_picked", "=", "False", "\n", "self", ".", "_metric", "=", "None", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "sim", "=", "sim", ",", "config", "=", "config", ",", "task", "=", "task", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.pick_sensors.RearrangePickReward._get_uuid": [[52, 55], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_get_uuid", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "RearrangePickReward", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.pick_sensors.RearrangePickReward.reset_metric": [[56, 74], ["task.measurements.check_measure_dependencies", "super().reset_metric"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measurements.check_measure_dependencies", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.reset_metric"], ["", "def", "reset_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "task", ".", "measurements", ".", "check_measure_dependencies", "(", "\n", "self", ".", "uuid", ",", "\n", "[", "\n", "EndEffectorToObjectDistance", ".", "cls_uuid", ",", "\n", "RobotForce", ".", "cls_uuid", ",", "\n", "ForceTerminate", ".", "cls_uuid", ",", "\n", "]", ",", "\n", ")", "\n", "self", ".", "cur_dist", "=", "-", "1.0", "\n", "self", ".", "_prev_picked", "=", "self", ".", "_sim", ".", "grasp_mgr", ".", "snap_idx", "is", "not", "None", "\n", "\n", "super", "(", ")", ".", "reset_metric", "(", "\n", "*", "args", ",", "\n", "episode", "=", "episode", ",", "\n", "task", "=", "task", ",", "\n", "observations", "=", "observations", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.pick_sensors.RearrangePickReward.update_metric": [[76, 148], ["super().update_metric", "task.measurements.measures[].get_metric", "task.measurements.measures[].get_metric", "round", "str", "habitat.tasks.rearrange.utils.rearrange_logger.debug"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.update_metric", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.get_metric", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.get_metric"], ["", "def", "update_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "update_metric", "(", "\n", "*", "args", ",", "\n", "episode", "=", "episode", ",", "\n", "task", "=", "task", ",", "\n", "observations", "=", "observations", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "ee_to_object_distance", "=", "task", ".", "measurements", ".", "measures", "[", "\n", "EndEffectorToObjectDistance", ".", "cls_uuid", "\n", "]", ".", "get_metric", "(", ")", "\n", "ee_to_rest_distance", "=", "task", ".", "measurements", ".", "measures", "[", "\n", "EndEffectorToRestDistance", ".", "cls_uuid", "\n", "]", ".", "get_metric", "(", ")", "\n", "\n", "snapped_id", "=", "self", ".", "_sim", ".", "grasp_mgr", ".", "snap_idx", "\n", "cur_picked", "=", "snapped_id", "is", "not", "None", "\n", "\n", "if", "cur_picked", ":", "\n", "            ", "dist_to_goal", "=", "ee_to_rest_distance", "\n", "", "else", ":", "\n", "            ", "dist_to_goal", "=", "ee_to_object_distance", "[", "str", "(", "task", ".", "abs_targ_idx", ")", "]", "\n", "\n", "", "abs_targ_obj_idx", "=", "self", ".", "_sim", ".", "scene_obj_ids", "[", "task", ".", "abs_targ_idx", "]", "\n", "\n", "did_pick", "=", "cur_picked", "and", "(", "not", "self", ".", "_prev_picked", ")", "\n", "if", "did_pick", ":", "\n", "            ", "if", "snapped_id", "==", "abs_targ_obj_idx", ":", "\n", "                ", "self", ".", "_metric", "+=", "self", ".", "_config", ".", "PICK_REWARD", "\n", "# If we just transitioned to the next stage our current", "\n", "# distance is stale.", "\n", "self", ".", "cur_dist", "=", "-", "1", "\n", "", "else", ":", "\n", "# picked the wrong object", "\n", "                ", "self", ".", "_metric", "-=", "self", ".", "_config", ".", "WRONG_PICK_PEN", "\n", "if", "self", ".", "_config", ".", "WRONG_PICK_SHOULD_END", ":", "\n", "                    ", "rearrange_logger", ".", "debug", "(", "\n", "\"Grasped wrong object, ending episode.\"", "\n", ")", "\n", "self", ".", "_task", ".", "should_end", "=", "True", "\n", "", "self", ".", "_metric", "=", "self", ".", "_metric", "\n", "self", ".", "_prev_picked", "=", "cur_picked", "\n", "self", ".", "_prev_picked", "=", "self", ".", "_sim", ".", "grasp_mgr", ".", "snap_idx", "is", "not", "None", "\n", "self", ".", "cur_dist", "=", "-", "1", "\n", "return", "\n", "\n", "", "", "if", "self", ".", "_config", ".", "USE_DIFF", ":", "\n", "            ", "if", "self", ".", "cur_dist", "<", "0", ":", "\n", "                ", "dist_diff", "=", "0.0", "\n", "", "else", ":", "\n", "                ", "dist_diff", "=", "self", ".", "cur_dist", "-", "dist_to_goal", "\n", "\n", "# Filter out the small fluctuations", "\n", "", "dist_diff", "=", "round", "(", "dist_diff", ",", "3", ")", "\n", "self", ".", "_metric", "+=", "self", ".", "_config", ".", "DIST_REWARD", "*", "dist_diff", "\n", "", "else", ":", "\n", "            ", "self", ".", "_metric", "-=", "self", ".", "_config", ".", "DIST_REWARD", "*", "dist_to_goal", "\n", "", "self", ".", "cur_dist", "=", "dist_to_goal", "\n", "\n", "if", "not", "cur_picked", "and", "self", ".", "_prev_picked", ":", "\n", "# Dropped the object", "\n", "            ", "self", ".", "_metric", "-=", "self", ".", "_config", ".", "DROP_PEN", "\n", "if", "self", ".", "_config", ".", "DROP_OBJ_SHOULD_END", ":", "\n", "                ", "self", ".", "_task", ".", "should_end", "=", "True", "\n", "", "self", ".", "_metric", "=", "self", ".", "_metric", "\n", "self", ".", "_prev_picked", "=", "cur_picked", "\n", "self", ".", "_prev_picked", "=", "self", ".", "_sim", ".", "grasp_mgr", ".", "snap_idx", "is", "not", "None", "\n", "self", ".", "cur_dist", "=", "-", "1", "\n", "return", "\n", "\n", "", "self", ".", "_prev_picked", "=", "cur_picked", "\n", "self", ".", "_prev_picked", "=", "self", ".", "_sim", ".", "grasp_mgr", ".", "snap_idx", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.pick_sensors.RearrangePickSuccess.__init__": [[154, 159], ["habitat.core.embodied_task.Measure.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "sim", ",", "config", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_sim", "=", "sim", "\n", "self", ".", "_config", "=", "config", "\n", "self", ".", "_prev_ee_pos", "=", "None", "\n", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.pick_sensors.RearrangePickSuccess._get_uuid": [[160, 163], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_get_uuid", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "RearrangePickSuccess", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.pick_sensors.RearrangePickSuccess.reset_metric": [[164, 175], ["task.measurements.check_measure_dependencies", "pick_sensors.RearrangePickSuccess.update_metric"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measurements.check_measure_dependencies", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.update_metric"], ["", "def", "reset_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "task", ".", "measurements", ".", "check_measure_dependencies", "(", "\n", "self", ".", "uuid", ",", "[", "EndEffectorToObjectDistance", ".", "cls_uuid", "]", "\n", ")", "\n", "self", ".", "_prev_ee_pos", "=", "observations", "[", "\"ee_pos\"", "]", "\n", "self", ".", "update_metric", "(", "\n", "*", "args", ",", "\n", "episode", "=", "episode", ",", "\n", "task", "=", "task", ",", "\n", "observations", "=", "observations", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.pick_sensors.RearrangePickSuccess.update_metric": [[177, 194], ["task.measurements.measures[].get_metric", "pick_sensors.RearrangePickSuccess._sim.grasp_mgr.is_violating_hold_constraint"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.get_metric", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_grasp_manager.RearrangeGraspManager.is_violating_hold_constraint"], ["", "def", "update_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "ee_to_rest_distance", "=", "task", ".", "measurements", ".", "measures", "[", "\n", "EndEffectorToRestDistance", ".", "cls_uuid", "\n", "]", ".", "get_metric", "(", ")", "\n", "\n", "# Is the agent holding the object and it's at the start?", "\n", "abs_targ_obj_idx", "=", "self", ".", "_sim", ".", "scene_obj_ids", "[", "task", ".", "abs_targ_idx", "]", "\n", "\n", "# Check that we are holding the right object and the object is actually", "\n", "# being held.", "\n", "self", ".", "_metric", "=", "(", "\n", "abs_targ_obj_idx", "==", "self", ".", "_sim", ".", "grasp_mgr", ".", "snap_idx", "\n", "and", "not", "self", ".", "_sim", ".", "grasp_mgr", ".", "is_violating_hold_constraint", "(", ")", "\n", "and", "ee_to_rest_distance", "<", "self", ".", "_config", ".", "EE_RESTING_SUCCESS_THRESHOLD", "\n", ")", "\n", "\n", "self", ".", "_prev_ee_pos", "=", "observations", "[", "\"ee_pos\"", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.pick_task.RearrangePickTaskV1.__init__": [[31, 46], ["habitat.tasks.rearrange.rearrange_task.RearrangeTask.__init__", "dataset.config.DATA_PATH.format", "os.dirname", "habitat.tasks.rearrange.utils.CacheHelper", "pick_task.RearrangePickTaskV1.cache.load", "[].split", "os.join", "dataset.config.DATA_PATH.format.split"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.load"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "config", ",", "dataset", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", "=", "config", ",", "*", "args", ",", "dataset", "=", "dataset", ",", "**", "kwargs", ")", "\n", "data_path", "=", "dataset", ".", "config", ".", "DATA_PATH", ".", "format", "(", "split", "=", "dataset", ".", "config", ".", "SPLIT", ")", "\n", "\n", "fname", "=", "data_path", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "save_dir", "=", "osp", ".", "dirname", "(", "data_path", ")", "\n", "self", ".", "cache", "=", "CacheHelper", "(", "\n", "osp", ".", "join", "(", "save_dir", ",", "f\"{fname}_{config.TYPE}_start.pickle\"", ")", ",", "\n", "def_val", "=", "{", "}", ",", "\n", "verbose", "=", "False", ",", "\n", ")", "\n", "self", ".", "start_states", "=", "self", ".", "cache", ".", "load", "(", ")", "\n", "self", ".", "prev_colls", "=", "None", "\n", "self", ".", "force_set_idx", "=", "None", "\n", "self", ".", "_add_cache_key", ":", "str", "=", "\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.pick_task.RearrangePickTaskV1.set_args": [[47, 51], ["None"], "methods", ["None"], ["", "def", "set_args", "(", "self", ",", "obj", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "force_set_idx", "=", "obj", "\n", "if", "ADD_CACHE_KEY", "in", "kwargs", ":", "\n", "            ", "self", ".", "_add_cache_key", "=", "kwargs", "[", "ADD_CACHE_KEY", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.pick_task.RearrangePickTaskV1._get_targ_pos": [[52, 56], ["sim.get_scene_pos", "sim.get_targets"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.get_scene_pos", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.get_targets"], ["", "", "def", "_get_targ_pos", "(", "self", ",", "sim", ")", ":", "\n", "        ", "scene_pos", "=", "sim", ".", "get_scene_pos", "(", ")", "\n", "targ_idxs", "=", "sim", ".", "get_targets", "(", ")", "[", "0", "]", "\n", "return", "scene_pos", "[", "targ_idxs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.pick_task.RearrangePickTaskV1._sample_idx": [[57, 65], ["list().index", "numpy.random.randint", "pick_task.RearrangePickTaskV1._sim.get_targets", "len", "list", "pick_task.RearrangePickTaskV1._get_targ_pos"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.get_targets", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.place_task.RearrangePlaceTaskV1._get_targ_pos"], ["", "def", "_sample_idx", "(", "self", ",", "sim", ")", ":", "\n", "        ", "if", "self", ".", "force_set_idx", "is", "not", "None", ":", "\n", "            ", "idxs", "=", "self", ".", "_sim", ".", "get_targets", "(", ")", "[", "0", "]", "\n", "sel_idx", "=", "self", ".", "force_set_idx", "\n", "sel_idx", "=", "list", "(", "idxs", ")", ".", "index", "(", "sel_idx", ")", "\n", "", "else", ":", "\n", "            ", "sel_idx", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "_get_targ_pos", "(", "sim", ")", ")", ")", "\n", "", "return", "sel_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.pick_task.RearrangePickTaskV1._is_there_spawn_noise": [[66, 71], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "_is_there_spawn_noise", "(", "self", ")", ":", "\n", "        ", "return", "(", "\n", "self", ".", "_config", ".", "BASE_NOISE", "!=", "0.0", "\n", "or", "self", ".", "_config", ".", "BASE_ANGLE_NOISE", "!=", "0", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.pick_task.RearrangePickTaskV1._gen_start_pos": [[73, 180], ["pick_task.RearrangePickTaskV1._get_targ_pos", "sim.safe_snap_point", "sim.capture_state", "numpy.array", "sim.set_state", "habitat.tasks.utils.get_angle", "numpy.linalg.norm", "sim.set_state", "numpy.random.normal", "range", "pick_task.RearrangePickTaskV1._gen_start_pos", "numpy.random.normal", "numpy.cross", "habitat.tasks.rearrange.utils.rearrange_logger.debug", "sim.pathfinder.is_navigable", "robot_T.inverted().transform_point", "sim.internal_step", "habitat.tasks.rearrange.utils.rearrange_collision", "habitat.tasks.rearrange.utils.rearrange_logger.error", "robot_T.inverted"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.place_task.RearrangePlaceTaskV1._get_targ_pos", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.safe_snap_point", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.capture_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.set_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.tasks.utils.get_angle", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.set_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.pick_task.RearrangePickTaskV1._gen_start_pos", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.is_navigable", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.internal_step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.rearrange_collision"], ["", "def", "_gen_start_pos", "(", "\n", "self", ",", "sim", ",", "is_easy_init", ",", "episode", ",", "sel_idx", ",", "force_snap_pos", "=", "None", "\n", ")", ":", "\n", "        ", "target_positions", "=", "self", ".", "_get_targ_pos", "(", "sim", ")", "\n", "targ_pos", "=", "target_positions", "[", "sel_idx", "]", "\n", "\n", "if", "force_snap_pos", "is", "not", "None", ":", "\n", "            ", "snap_pos", "=", "force_snap_pos", "\n", "", "else", ":", "\n", "            ", "snap_pos", "=", "targ_pos", "\n", "\n", "", "orig_start_pos", "=", "sim", ".", "safe_snap_point", "(", "snap_pos", ")", "\n", "\n", "state", "=", "sim", ".", "capture_state", "(", ")", "\n", "start_pos", "=", "orig_start_pos", "\n", "\n", "forward", "=", "np", ".", "array", "(", "[", "1.0", ",", "0", ",", "0", "]", ")", "\n", "dist_thresh", "=", "0.1", "\n", "did_collide", "=", "False", "\n", "\n", "if", "self", ".", "_config", ".", "SHOULD_ENFORCE_TARGET_WITHIN_REACH", ":", "\n", "# Setting so the object is within reach is harder and requires more", "\n", "# tries.", "\n", "            ", "timeout", "=", "5000", "\n", "", "else", ":", "\n", "            ", "timeout", "=", "1000", "\n", "", "attempt", "=", "0", "\n", "is_within_bounds", "=", "True", "\n", "\n", "# Add noise to the base position and angle for a collision free", "\n", "# starting position", "\n", "while", "attempt", "<", "timeout", ":", "\n", "            ", "attempt", "+=", "1", "\n", "start_pos", "=", "orig_start_pos", "+", "np", ".", "random", ".", "normal", "(", "\n", "0", ",", "self", ".", "_config", ".", "BASE_NOISE", ",", "size", "=", "(", "3", ",", ")", "\n", ")", "\n", "rel_targ", "=", "targ_pos", "-", "start_pos", "\n", "angle_to_obj", "=", "get_angle", "(", "forward", "[", "[", "0", ",", "2", "]", "]", ",", "rel_targ", "[", "[", "0", ",", "2", "]", "]", ")", "\n", "if", "np", ".", "cross", "(", "forward", "[", "[", "0", ",", "2", "]", "]", ",", "rel_targ", "[", "[", "0", ",", "2", "]", "]", ")", ">", "0", ":", "\n", "                ", "angle_to_obj", "*=", "-", "1.0", "\n", "\n", "", "if", "not", "self", ".", "_is_there_spawn_noise", ":", "\n", "                ", "rearrange_logger", ".", "debug", "(", "\n", "\"No spawn noise, returning first found position\"", "\n", ")", "\n", "break", "\n", "\n", "", "targ_dist", "=", "np", ".", "linalg", ".", "norm", "(", "(", "start_pos", "-", "orig_start_pos", ")", "[", "[", "0", ",", "2", "]", "]", ")", "\n", "\n", "is_navigable", "=", "is_easy_init", "or", "sim", ".", "pathfinder", ".", "is_navigable", "(", "\n", "start_pos", "\n", ")", "\n", "\n", "if", "targ_dist", ">", "dist_thresh", "or", "not", "is_navigable", ":", "\n", "                ", "continue", "\n", "\n", "", "sim", ".", "set_state", "(", "state", ")", "\n", "\n", "sim", ".", "robot", ".", "base_pos", "=", "start_pos", "\n", "\n", "# Face the robot towards the object.", "\n", "rot_noise", "=", "np", ".", "random", ".", "normal", "(", "0.0", ",", "self", ".", "_config", ".", "BASE_ANGLE_NOISE", ")", "\n", "sim", ".", "robot", ".", "base_rot", "=", "angle_to_obj", "+", "rot_noise", "\n", "\n", "# Ensure the target is within reach", "\n", "is_within_bounds", "=", "True", "\n", "if", "self", ".", "_config", ".", "SHOULD_ENFORCE_TARGET_WITHIN_REACH", ":", "\n", "                ", "robot_T", "=", "self", ".", "_sim", ".", "robot", ".", "base_transformation", "\n", "rel_targ_pos", "=", "robot_T", ".", "inverted", "(", ")", ".", "transform_point", "(", "targ_pos", ")", "\n", "eps", "=", "1e-2", "\n", "upper_bound", "=", "self", ".", "_sim", ".", "robot", ".", "params", ".", "ee_constraint", "[", ":", ",", "1", "]", "+", "eps", "\n", "is_within_bounds", "=", "(", "rel_targ_pos", "<", "upper_bound", ")", ".", "all", "(", ")", "\n", "if", "not", "is_within_bounds", ":", "\n", "                    ", "continue", "\n", "\n", "# Make sure the robot is not colliding with anything in this", "\n", "# position.", "\n", "", "", "for", "_", "in", "range", "(", "100", ")", ":", "\n", "                ", "sim", ".", "internal_step", "(", "-", "1", ")", "\n", "did_collide", ",", "details", "=", "rearrange_collision", "(", "\n", "self", ".", "_sim", ",", "\n", "self", ".", "_config", ".", "COUNT_OBJ_COLLISIONS", ",", "\n", "ignore_base", "=", "False", ",", "\n", ")", "\n", "\n", "if", "is_easy_init", ":", "\n", "# Only care about collisions between the robot and scene.", "\n", "                    ", "did_collide", "=", "details", ".", "robot_scene_colls", "!=", "0", "\n", "\n", "", "if", "did_collide", ":", "\n", "                    ", "break", "\n", "\n", "", "", "if", "not", "did_collide", ":", "\n", "                ", "break", "\n", "\n", "", "", "if", "attempt", "==", "timeout", "and", "(", "not", "is_easy_init", ")", ":", "\n", "            ", "start_pos", ",", "angle_to_obj", "=", "self", ".", "_gen_start_pos", "(", "\n", "sim", ",", "True", ",", "episode", ",", "sel_idx", "\n", ")", "\n", "", "elif", "not", "is_within_bounds", "or", "attempt", "==", "timeout", "or", "did_collide", ":", "\n", "            ", "rearrange_logger", ".", "error", "(", "\n", "f\"Episode {episode.episode_id} failed to place robot\"", "\n", ")", "\n", "\n", "", "sim", ".", "set_state", "(", "state", ")", "\n", "\n", "return", "start_pos", ",", "angle_to_obj", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.pick_task.RearrangePickTaskV1._should_prevent_grip": [[181, 186], ["action_args.get"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get"], ["", "def", "_should_prevent_grip", "(", "self", ",", "action_args", ")", ":", "\n", "        ", "return", "(", "\n", "self", ".", "_sim", ".", "grasp_mgr", ".", "is_grasped", "\n", "and", "action_args", ".", "get", "(", "\"grip_action\"", ",", "None", ")", "is", "not", "None", "\n", "and", "action_args", "[", "\"grip_action\"", "]", "<", "0", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.pick_task.RearrangePickTaskV1.step": [[188, 197], ["pick_task.RearrangePickTaskV1._should_prevent_grip", "super().step"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.place_task.RearrangePlaceTaskV1._should_prevent_grip", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step"], ["", "def", "step", "(", "self", ",", "action", ",", "episode", ")", ":", "\n", "        ", "action_args", "=", "action", "[", "\"action_args\"", "]", "\n", "\n", "if", "self", ".", "_should_prevent_grip", "(", "action_args", ")", ":", "\n", "# No releasing the object once it is held.", "\n", "            ", "action_args", "[", "\"grip_action\"", "]", "=", "None", "\n", "", "obs", "=", "super", "(", ")", ".", "step", "(", "action", "=", "action", ",", "episode", "=", "episode", ")", "\n", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.pick_task.RearrangePickTaskV1.get_receptacle_info": [[198, 205], ["None"], "methods", ["None"], ["", "def", "get_receptacle_info", "(", "\n", "self", ",", "episode", ":", "Episode", ",", "sel_idx", ":", "int", "\n", ")", "->", "Tuple", "[", "str", ",", "int", "]", ":", "\n", "        ", "\"\"\"\n        Returns the receptacle handle and receptacle parent link index.\n        \"\"\"", "\n", "return", "episode", ".", "target_receptacles", "[", "sel_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.pick_task.RearrangePickTaskV1.reset": [[206, 283], ["super().reset", "habitat.tasks.rearrange.utils.rearrange_logger.debug", "str", "sim.get_articulated_object_manager", "pick_task.RearrangePickTaskV1._sample_idx", "habitat.tasks.rearrange.utils.rearrange_logger.debug", "pick_task.RearrangePickTaskV1.get_receptacle_info", "pick_task.RearrangePickTaskV1._gen_start_pos", "habitat.tasks.rearrange.utils.rearrange_logger.debug", "pick_task.RearrangePickTaskV1._get_observations", "sim.get_articulated_object_manager.get_object_by_handle", "numpy.array", "pick_task.RearrangePickTaskV1.cache.save", "sim.get_articulated_object_manager.get_object_by_handle.transformation.transform_point", "sim.get_articulated_object_manager.get_object_by_handle", "numpy.array", "magnum.Vector3", "sim.get_articulated_object_manager.get_object_by_handle.get_link_scene_node", "link_T.transform_point", "magnum.Vector3"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.pick_task.RearrangePickTaskV1._sample_idx", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.place_task.RearrangePlaceTaskV1.get_receptacle_info", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.pick_task.RearrangePickTaskV1._gen_start_pos", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_task.RearrangeTask._get_observations", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.save"], ["", "def", "reset", "(", "self", ",", "episode", ":", "Episode", ",", "fetch_observations", ":", "bool", "=", "True", ")", ":", "\n", "        ", "sim", "=", "self", ".", "_sim", "\n", "\n", "super", "(", ")", ".", "reset", "(", "episode", ",", "fetch_observations", "=", "False", ")", "\n", "\n", "self", ".", "prev_colls", "=", "0", "\n", "cache_lookup_k", "=", "sim", ".", "ep_info", "[", "\"episode_id\"", "]", "\n", "cache_lookup_k", "+=", "self", ".", "_add_cache_key", "\n", "\n", "if", "self", ".", "force_set_idx", "is", "not", "None", ":", "\n", "            ", "cache_lookup_k", "+=", "str", "(", "self", ".", "force_set_idx", ")", "\n", "", "rearrange_logger", ".", "debug", "(", "\n", "f\"Using cache key {cache_lookup_k}, force_regenerate={self._config.FORCE_REGENERATE}\"", "\n", ")", "\n", "\n", "if", "(", "\n", "cache_lookup_k", "in", "self", ".", "start_states", "\n", "and", "not", "self", ".", "_config", ".", "FORCE_REGENERATE", "\n", ")", ":", "\n", "            ", "start_pos", ",", "start_rot", ",", "sel_idx", "=", "self", ".", "start_states", "[", "cache_lookup_k", "]", "\n", "", "else", ":", "\n", "            ", "mgr", "=", "sim", ".", "get_articulated_object_manager", "(", ")", "\n", "sel_idx", "=", "self", ".", "_sample_idx", "(", "sim", ")", "\n", "\n", "rearrange_logger", ".", "debug", "(", "\n", "f\"Generating init for {self} and force set idx {self.force_set_idx} with selected object idx {sel_idx}\"", "\n", ")", "\n", "\n", "receptacle_handle", ",", "receptacle_link_idx", "=", "self", ".", "get_receptacle_info", "(", "\n", "episode", ",", "sel_idx", "\n", ")", "\n", "if", "(", "\n", "# Not a typo, \"fridge\" is sometimes \"frige\" in", "\n", "# ReplicaCAD.", "\n", "receptacle_handle", "is", "not", "None", "\n", "and", "(", "\n", "\"frige\"", "in", "receptacle_handle", "\n", "or", "\"fridge\"", "in", "receptacle_handle", "\n", ")", "\n", ")", ":", "\n", "                ", "receptacle_ao", "=", "mgr", ".", "get_object_by_handle", "(", "receptacle_handle", ")", "\n", "start_pos", "=", "np", ".", "array", "(", "\n", "receptacle_ao", ".", "transformation", ".", "transform_point", "(", "\n", "mn", ".", "Vector3", "(", "self", ".", "DISTANCE_TO_RECEPTACLE", ",", "0", ",", "0", ")", "\n", ")", "\n", ")", "\n", "", "elif", "(", "\n", "receptacle_handle", "is", "not", "None", "\n", "and", "\"kitchen_counter\"", "in", "receptacle_handle", "\n", "and", "receptacle_link_idx", "!=", "0", "\n", ")", ":", "\n", "                ", "receptacle_ao", "=", "mgr", ".", "get_object_by_handle", "(", "receptacle_handle", ")", "\n", "link_T", "=", "receptacle_ao", ".", "get_link_scene_node", "(", "\n", "receptacle_link_idx", "\n", ")", ".", "transformation", "\n", "start_pos", "=", "np", ".", "array", "(", "\n", "link_T", ".", "transform_point", "(", "mn", ".", "Vector3", "(", "0.8", ",", "0", ",", "0", ")", ")", "\n", ")", "\n", "", "else", ":", "\n", "                ", "start_pos", "=", "None", "\n", "\n", "", "start_pos", ",", "start_rot", "=", "self", ".", "_gen_start_pos", "(", "\n", "sim", ",", "self", ".", "_config", ".", "EASY_INIT", ",", "episode", ",", "sel_idx", ",", "start_pos", "\n", ")", "\n", "rearrange_logger", ".", "debug", "(", "f\"Finished creating init for {self}\"", ")", "\n", "self", ".", "start_states", "[", "cache_lookup_k", "]", "=", "(", "start_pos", ",", "start_rot", ",", "sel_idx", ")", "\n", "if", "self", ".", "_config", ".", "SHOULD_SAVE_TO_CACHE", ":", "\n", "                ", "self", ".", "cache", ".", "save", "(", "self", ".", "start_states", ")", "\n", "\n", "", "", "sim", ".", "robot", ".", "base_pos", "=", "start_pos", "\n", "sim", ".", "robot", ".", "base_rot", "=", "start_rot", "\n", "\n", "self", ".", "_targ_idx", "=", "sel_idx", "\n", "\n", "if", "fetch_observations", ":", "\n", "            ", "return", "self", ".", "_get_observations", "(", "episode", ")", "\n", "", "return", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.reach_task.RearrangeReachTaskV1.__init__": [[17, 19], ["habitat.tasks.rearrange.rearrange_task.RearrangeTask.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "config", ",", "dataset", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", "=", "config", ",", "*", "args", ",", "dataset", "=", "dataset", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.reach_task.RearrangeReachTaskV1.step": [[20, 24], ["super().step"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step"], ["", "def", "step", "(", "self", ",", "action", ",", "episode", ")", ":", "\n", "        ", "obs", "=", "super", "(", ")", ".", "step", "(", "action", "=", "action", ",", "episode", "=", "episode", ")", "\n", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.reach_task.RearrangeReachTaskV1.reset": [[25, 65], ["super().reset", "magnum.Range3D.from_size", "magnum.Range3D.from_center", "reach_task.RearrangeReachTaskV1._get_observations", "magnum.Vector3", "magnum.Vector3", "magnum.Range3D.from_size.center", "magnum.Range3D.from_center", "numpy.random.uniform", "reach_task.RearrangeReachTaskV1._sim.robot.base_transformation.transform_point", "reach_task.RearrangeReachTaskV1._sim.visualize_position", "magnum.Range3D.from_size.center", "numpy.random.uniform", "magnum.Range3D.from_size.size", "magnum.Range3D.from_center.contains", "magnum.Range3D.from_size.size"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_task.RearrangeTask._get_observations", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.visualize_position", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.contains", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size"], ["", "def", "reset", "(", "self", ",", "episode", ")", ":", "\n", "        ", "super", "(", ")", ".", "reset", "(", "episode", ",", "fetch_observations", "=", "False", ")", "\n", "\n", "# Pick a random goal in the robot's workspace", "\n", "\n", "ee_region", "=", "self", ".", "_sim", ".", "robot", ".", "params", ".", "ee_constraint", "\n", "full_range", "=", "mn", ".", "Range3D", ".", "from_size", "(", "\n", "mn", ".", "Vector3", "(", "ee_region", "[", ":", ",", "0", "]", ")", ",", "\n", "mn", ".", "Vector3", "(", "ee_region", "[", ":", ",", "1", "]", "-", "ee_region", "[", ":", ",", "0", "]", ")", ",", "\n", ")", "\n", "\n", "allowed_space", "=", "mn", ".", "Range3D", ".", "from_center", "(", "\n", "full_range", ".", "center", "(", ")", ",", "\n", "0.5", "*", "full_range", ".", "size", "(", ")", "*", "self", ".", "_config", ".", "EE_SAMPLE_FACTOR", ",", "\n", ")", "\n", "if", "self", ".", "_config", ".", "EE_EXCLUDE_REGION", "!=", "0.0", ":", "\n", "            ", "not_allowed_space", "=", "mn", ".", "Range3D", ".", "from_center", "(", "\n", "full_range", ".", "center", "(", ")", ",", "\n", "0.5", "*", "full_range", ".", "size", "(", ")", "*", "self", ".", "_config", ".", "EE_EXCLUDE_REGION", ",", "\n", ")", "\n", "while", "True", ":", "\n", "                ", "self", ".", "_desired_resting", "=", "np", ".", "random", ".", "uniform", "(", "\n", "low", "=", "allowed_space", ".", "min", ",", "high", "=", "allowed_space", ".", "max", "\n", ")", "\n", "if", "not", "not_allowed_space", ".", "contains", "(", "self", ".", "_desired_resting", ")", ":", "\n", "                    ", "break", "\n", "", "", "", "else", ":", "\n", "            ", "self", ".", "_desired_resting", "=", "np", ".", "random", ".", "uniform", "(", "\n", "low", "=", "allowed_space", ".", "min", ",", "high", "=", "allowed_space", ".", "max", "\n", ")", "\n", "\n", "", "if", "self", ".", "_config", ".", "RENDER_TARGET", ":", "\n", "            ", "global_pos", "=", "self", ".", "_sim", ".", "robot", ".", "base_transformation", ".", "transform_point", "(", "\n", "self", ".", "_desired_resting", "\n", ")", "\n", "self", ".", "_sim", ".", "viz_ids", "[", "\"reach_target\"", "]", "=", "self", ".", "_sim", ".", "visualize_position", "(", "\n", "global_pos", ",", "self", ".", "_sim", ".", "viz_ids", "[", "\"reach_target\"", "]", "\n", ")", "\n", "\n", "", "return", "self", ".", "_get_observations", "(", "episode", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.reach_sensors.RearrangeReachReward._get_uuid": [[16, 19], ["None"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "_get_uuid", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "RearrangeReachReward", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.reach_sensors.RearrangeReachReward.__init__": [[20, 23], ["habitat.core.embodied_task.Measure.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["", "def", "__init__", "(", "self", ",", "*", "args", ",", "sim", ",", "config", ",", "task", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_config", "=", "config", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "sim", "=", "sim", ",", "config", "=", "config", ",", "task", "=", "task", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.reach_sensors.RearrangeReachReward.reset_metric": [[24, 39], ["task.measurements.check_measure_dependencies", "reach_sensors.RearrangeReachReward.update_metric"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measurements.check_measure_dependencies", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.update_metric"], ["", "def", "reset_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_prev", "=", "None", "\n", "task", ".", "measurements", ".", "check_measure_dependencies", "(", "\n", "self", ".", "uuid", ",", "\n", "[", "\n", "EndEffectorToRestDistance", ".", "cls_uuid", ",", "\n", "RearrangeReachSuccess", ".", "cls_uuid", ",", "\n", "]", ",", "\n", ")", "\n", "self", ".", "update_metric", "(", "\n", "*", "args", ",", "\n", "episode", "=", "episode", ",", "\n", "task", "=", "task", ",", "\n", "observations", "=", "observations", ",", "\n", "**", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.reach_sensors.RearrangeReachReward.update_metric": [[41, 60], ["task.measurements.measures[].get_metric", "task.measurements.measures[].get_metric", "float"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.get_metric", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.get_metric"], ["", "def", "update_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "cur_dist", "=", "task", ".", "measurements", ".", "measures", "[", "\n", "EndEffectorToRestDistance", ".", "cls_uuid", "\n", "]", ".", "get_metric", "(", ")", "\n", "if", "self", ".", "_config", ".", "SPARSE_REWARD", ":", "\n", "            ", "is_succ", "=", "task", ".", "measurements", ".", "measures", "[", "\n", "RearrangeReachSuccess", ".", "cls_uuid", "\n", "]", ".", "get_metric", "(", ")", "\n", "self", ".", "_metric", "=", "self", ".", "_config", ".", "SCALE", "*", "float", "(", "is_succ", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "_config", ".", "DIFF_REWARD", ":", "\n", "                ", "if", "self", ".", "_prev", "is", "None", ":", "\n", "                    ", "self", ".", "_metric", "=", "0.0", "\n", "", "else", ":", "\n", "                    ", "self", ".", "_metric", "=", "self", ".", "_prev", "-", "cur_dist", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "_metric", "=", "-", "1.0", "*", "self", ".", "_config", ".", "SCALE", "*", "cur_dist", "\n", "\n", "", "", "self", ".", "_prev", "=", "cur_dist", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.reach_sensors.RearrangeReachSuccess._get_uuid": [[66, 69], ["None"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "_get_uuid", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "RearrangeReachSuccess", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.reach_sensors.RearrangeReachSuccess.__init__": [[70, 73], ["habitat.core.embodied_task.Measure.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["", "def", "__init__", "(", "self", ",", "*", "args", ",", "sim", ",", "config", ",", "task", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "sim", "=", "sim", ",", "config", "=", "config", ",", "task", "=", "task", ",", "**", "kwargs", ")", "\n", "self", ".", "_config", "=", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.reach_sensors.RearrangeReachSuccess.reset_metric": [[74, 87], ["task.measurements.check_measure_dependencies", "reach_sensors.RearrangeReachSuccess.update_metric"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measurements.check_measure_dependencies", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.update_metric"], ["", "def", "reset_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "task", ".", "measurements", ".", "check_measure_dependencies", "(", "\n", "self", ".", "uuid", ",", "\n", "[", "\n", "EndEffectorToRestDistance", ".", "cls_uuid", ",", "\n", "]", ",", "\n", ")", "\n", "self", ".", "update_metric", "(", "\n", "*", "args", ",", "\n", "episode", "=", "episode", ",", "\n", "task", "=", "task", ",", "\n", "observations", "=", "observations", ",", "\n", "**", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.reach_sensors.RearrangeReachSuccess.update_metric": [[89, 95], ["task.measurements.measures[].get_metric"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.get_metric"], ["", "def", "update_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_metric", "=", "(", "\n", "task", ".", "measurements", ".", "measures", "[", "\n", "EndEffectorToRestDistance", ".", "cls_uuid", "\n", "]", ".", "get_metric", "(", ")", "\n", "<", "self", ".", "_config", ".", "SUCC_THRESH", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.reach_sensors.AnyReachSuccess._get_uuid": [[102, 105], ["None"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "_get_uuid", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "AnyReachSuccess", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.reach_sensors.AnyReachSuccess.reset_metric": [[106, 120], ["task.measurements.check_measure_dependencies", "reach_sensors.AnyReachSuccess.update_metric"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measurements.check_measure_dependencies", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.update_metric"], ["", "def", "reset_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "task", ".", "measurements", ".", "check_measure_dependencies", "(", "\n", "self", ".", "uuid", ",", "\n", "[", "\n", "RearrangeReachSuccess", ".", "cls_uuid", ",", "\n", "]", ",", "\n", ")", "\n", "self", ".", "_did_succ", "=", "False", "\n", "self", ".", "update_metric", "(", "\n", "*", "args", ",", "\n", "episode", "=", "episode", ",", "\n", "task", "=", "task", ",", "\n", "observations", "=", "observations", ",", "\n", "**", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.reach_sensors.AnyReachSuccess.update_metric": [[122, 131], ["task.measurements.measures[].get_metric"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.get_metric"], ["", "def", "update_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_did_succ", "=", "(", "\n", "self", ".", "_did_succ", "\n", "or", "task", ".", "measurements", ".", "measures", "[", "\n", "RearrangeReachSuccess", ".", "cls_uuid", "\n", "]", ".", "get_metric", "(", ")", "\n", ")", "\n", "\n", "self", ".", "_metric", "=", "self", ".", "_did_succ", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.TargetOrGoalStartPointGoalSensor.__init__": [[32, 36], ["habitat.core.simulator.Sensor.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "sim", ",", "task", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_task", "=", "task", "\n", "self", ".", "_sim", "=", "sim", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "task", "=", "task", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.TargetOrGoalStartPointGoalSensor._get_uuid": [[37, 39], ["None"], "methods", ["None"], ["", "def", "_get_uuid", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "TargetOrGoalStartPointGoalSensor", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.TargetOrGoalStartPointGoalSensor._get_sensor_type": [[40, 42], ["None"], "methods", ["None"], ["", "def", "_get_sensor_type", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "SensorTypes", ".", "TENSOR", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.TargetOrGoalStartPointGoalSensor._get_observation_space": [[43, 49], ["gym.spaces.Box", "numpy.finfo", "numpy.finfo"], "methods", ["None"], ["", "def", "_get_observation_space", "(", "self", ",", "*", "args", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "spaces", ".", "Box", "(", "\n", "shape", "=", "(", "2", ",", ")", ",", "\n", "low", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "min", ",", "\n", "high", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "max", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.TargetOrGoalStartPointGoalSensor.get_observation": [[51, 67], ["robot_T.inverted().transform_point", "habitat.tasks.utils.cartesian_to_polar", "numpy.array", "ValueError", "robot_T.inverted", "nav_to_obj_sensors.TargetOrGoalStartPointGoalSensor._sim.get_targets", "nav_to_obj_sensors.TargetOrGoalStartPointGoalSensor._sim.get_target_objs_start"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.tasks.utils.cartesian_to_polar", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.get_targets", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.get_target_objs_start"], ["", "def", "get_observation", "(", "self", ",", "task", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "robot_T", "=", "self", ".", "_sim", ".", "robot", ".", "base_transformation", "\n", "\n", "if", "task", ".", "nav_to_obj_type", "==", "RearrangeObjectTypes", ".", "GOAL_POSITION", ":", "\n", "            ", "to_pos", "=", "self", ".", "_sim", ".", "get_targets", "(", ")", "[", "1", "]", "[", "self", ".", "_task", ".", "targ_idx", "]", "\n", "", "elif", "task", ".", "nav_to_obj_type", "==", "RearrangeObjectTypes", ".", "RIGID_OBJECT", ":", "\n", "            ", "to_pos", "=", "self", ".", "_sim", ".", "get_target_objs_start", "(", ")", "[", "self", ".", "_task", ".", "targ_idx", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "f\"Got navigate to object type {RearrangeObjectTypes.RIGID_OBJECT}\"", "\n", ")", "\n", "\n", "", "dir_vector", "=", "robot_T", ".", "inverted", "(", ")", ".", "transform_point", "(", "to_pos", ")", "\n", "rho", ",", "phi", "=", "cartesian_to_polar", "(", "dir_vector", "[", "0", "]", ",", "dir_vector", "[", "1", "]", ")", "\n", "\n", "return", "np", ".", "array", "(", "[", "rho", ",", "-", "phi", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.NavToSkillSensor.__init__": [[73, 76], ["habitat.core.simulator.Sensor.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "sim", ",", "config", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_config", "=", "config", "\n", "super", "(", ")", ".", "__init__", "(", "config", "=", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.NavToSkillSensor._get_uuid": [[77, 79], ["None"], "methods", ["None"], ["", "def", "_get_uuid", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "NavToSkillSensor", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.NavToSkillSensor._get_sensor_type": [[80, 82], ["None"], "methods", ["None"], ["", "def", "_get_sensor_type", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "SensorTypes", ".", "TENSOR", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.NavToSkillSensor._get_observation_space": [[83, 89], ["gym.spaces.Box", "numpy.finfo", "numpy.finfo"], "methods", ["None"], ["", "def", "_get_observation_space", "(", "self", ",", "*", "args", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "spaces", ".", "Box", "(", "\n", "shape", "=", "(", "self", ".", "_config", ".", "NUM_SKILLS", ",", ")", ",", "\n", "low", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "min", ",", "\n", "high", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "max", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.NavToSkillSensor.get_observation": [[91, 100], ["numpy.zeros", "skills.index"], "methods", ["None"], ["", "def", "get_observation", "(", "self", ",", "task", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "ret", "=", "np", ".", "zeros", "(", "self", ".", "_config", ".", "NUM_SKILLS", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "task", ".", "nav_to_task_name", "is", "None", "or", "task", ".", "domain", "is", "None", ":", "\n", "            ", "return", "ret", "\n", "", "skills", "=", "task", ".", "domain", ".", "action_names", "\n", "\n", "cur_idx", "=", "skills", ".", "index", "(", "task", ".", "nav_to_task_name", ")", "\n", "ret", "[", "cur_idx", "]", "=", "1.0", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.DistToNavGoalSensor.__init__": [[106, 109], ["habitat.core.simulator.Sensor.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "sim", ",", "config", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", "=", "config", ")", "\n", "self", ".", "_sim", "=", "sim", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.DistToNavGoalSensor._get_uuid": [[110, 112], ["None"], "methods", ["None"], ["", "def", "_get_uuid", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "DistToNavGoalSensor", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.DistToNavGoalSensor._get_sensor_type": [[113, 115], ["None"], "methods", ["None"], ["", "def", "_get_sensor_type", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "SensorTypes", ".", "TENSOR", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.DistToNavGoalSensor._get_observation_space": [[116, 122], ["gym.spaces.Box", "numpy.finfo", "numpy.finfo"], "methods", ["None"], ["", "def", "_get_observation_space", "(", "self", ",", "*", "args", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "spaces", ".", "Box", "(", "\n", "shape", "=", "(", "1", ",", ")", ",", "\n", "low", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "min", ",", "\n", "high", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "max", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.DistToNavGoalSensor.get_observation": [[124, 131], ["nav_to_obj_sensors.DistToNavGoalSensor._sim.safe_snap_point", "nav_to_obj_sensors.DistToNavGoalSensor._sim.geodesic_distance", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.safe_snap_point", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.geodesic_distance"], ["", "def", "get_observation", "(", "self", ",", "task", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "agent_pos", "=", "self", ".", "_sim", ".", "safe_snap_point", "(", "self", ".", "_sim", ".", "robot", ".", "base_pos", ")", "\n", "distance_to_target", "=", "self", ".", "_sim", ".", "geodesic_distance", "(", "\n", "agent_pos", ",", "\n", "task", ".", "nav_target_pos", ",", "\n", ")", "\n", "return", "np", ".", "array", "(", "[", "distance_to_target", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.NavGoalSensor._get_uuid": [[137, 139], ["None"], "methods", ["None"], ["def", "_get_uuid", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "NavGoalSensor", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.NavGoalSensor._get_sensor_type": [[140, 142], ["None"], "methods", ["None"], ["", "def", "_get_sensor_type", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "SensorTypes", ".", "TENSOR", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.NavGoalSensor._get_observation_space": [[143, 149], ["gym.spaces.Box", "numpy.finfo", "numpy.finfo"], "methods", ["None"], ["", "def", "_get_observation_space", "(", "self", ",", "*", "args", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "spaces", ".", "Box", "(", "\n", "shape", "=", "(", "3", ",", ")", ",", "\n", "low", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "min", ",", "\n", "high", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "max", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.NavGoalSensor.get_observation": [[151, 153], ["task.nav_target_pos.astype"], "methods", ["None"], ["", "def", "get_observation", "(", "self", ",", "task", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "task", ".", "nav_target_pos", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.NavRotToGoalSensor._get_uuid": [[163, 165], ["None"], "methods", ["None"], ["def", "_get_uuid", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "NavRotToGoalSensor", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.NavRotToGoalSensor.__init__": [[166, 169], ["habitat.core.simulator.Sensor.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["", "def", "__init__", "(", "self", ",", "sim", ",", "config", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", "=", "config", ")", "\n", "self", ".", "_sim", "=", "sim", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.NavRotToGoalSensor._get_sensor_type": [[170, 172], ["None"], "methods", ["None"], ["", "def", "_get_sensor_type", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "SensorTypes", ".", "TENSOR", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.NavRotToGoalSensor._get_observation_space": [[173, 179], ["gym.spaces.Box", "numpy.finfo", "numpy.finfo"], "methods", ["None"], ["", "def", "_get_observation_space", "(", "self", ",", "*", "args", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "spaces", ".", "Box", "(", "\n", "shape", "=", "(", "1", ",", ")", ",", "\n", "low", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "min", ",", "\n", "high", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "max", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.NavRotToGoalSensor.get_observation": [[181, 188], ["float", "numpy.arctan2", "numpy.abs", "numpy.sin", "numpy.cos"], "methods", ["None"], ["", "def", "get_observation", "(", "self", ",", "task", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "heading_angle", "=", "float", "(", "self", ".", "_sim", ".", "robot", ".", "base_rot", ")", "\n", "angle_dist", "=", "np", ".", "arctan2", "(", "\n", "np", ".", "sin", "(", "heading_angle", "-", "task", ".", "nav_target_angle", ")", ",", "\n", "np", ".", "cos", "(", "heading_angle", "-", "task", ".", "nav_target_angle", ")", ",", "\n", ")", "\n", "return", "np", ".", "abs", "(", "angle_dist", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.OracleNavigationActionSensor.__init__": [[194, 197], ["habitat.core.simulator.Sensor.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "sim", ",", "config", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", "=", "config", ")", "\n", "self", ".", "_sim", "=", "sim", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.OracleNavigationActionSensor._get_uuid": [[198, 200], ["None"], "methods", ["None"], ["", "def", "_get_uuid", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "OracleNavigationActionSensor", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.OracleNavigationActionSensor._get_sensor_type": [[201, 203], ["None"], "methods", ["None"], ["", "def", "_get_sensor_type", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "SensorTypes", ".", "TENSOR", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.OracleNavigationActionSensor._get_observation_space": [[204, 210], ["gym.spaces.Box", "numpy.finfo", "numpy.finfo"], "methods", ["None"], ["", "def", "_get_observation_space", "(", "self", ",", "*", "args", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "spaces", ".", "Box", "(", "\n", "shape", "=", "(", "3", ",", ")", ",", "\n", "low", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "min", ",", "\n", "high", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "max", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.OracleNavigationActionSensor._path_to_point": [[212, 222], ["habitat_sim.ShortestPath", "nav_to_obj_sensors.OracleNavigationActionSensor._sim.pathfinder.find_path"], "methods", ["None"], ["", "def", "_path_to_point", "(", "self", ",", "point", ")", ":", "\n", "        ", "agent_pos", "=", "self", ".", "_sim", ".", "robot", ".", "base_pos", "\n", "\n", "path", "=", "habitat_sim", ".", "ShortestPath", "(", ")", "\n", "path", ".", "requested_start", "=", "agent_pos", "\n", "path", ".", "requested_end", "=", "point", "\n", "found_path", "=", "self", ".", "_sim", ".", "pathfinder", ".", "find_path", "(", "path", ")", "\n", "if", "not", "found_path", ":", "\n", "            ", "return", "[", "agent_pos", ",", "point", "]", "\n", "", "return", "path", ".", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.OracleNavigationActionSensor.get_observation": [[223, 226], ["nav_to_obj_sensors.OracleNavigationActionSensor._path_to_point"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.OracleNavigationActionSensor._path_to_point"], ["", "def", "get_observation", "(", "self", ",", "task", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "path", "=", "self", ".", "_path_to_point", "(", "task", ".", "nav_target_pos", ")", "\n", "return", "path", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.GeoMeasure.__init__": [[229, 234], ["habitat.core.embodied_task.Measure.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "sim", ",", "config", ",", "task", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_config", "=", "config", "\n", "self", ".", "_sim", "=", "sim", "\n", "self", ".", "_prev_dist", "=", "None", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "sim", "=", "sim", ",", "config", "=", "config", ",", "task", "=", "task", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.GeoMeasure.reset_metric": [[235, 243], ["nav_to_obj_sensors.GeoMeasure._get_cur_geo_dist", "nav_to_obj_sensors.GeoMeasure.update_metric"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.GeoMeasure._get_cur_geo_dist", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.update_metric"], ["", "def", "reset_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_prev_dist", "=", "self", ".", "_get_cur_geo_dist", "(", "task", ")", "\n", "self", ".", "update_metric", "(", "\n", "*", "args", ",", "\n", "episode", "=", "episode", ",", "\n", "task", "=", "task", ",", "\n", "observations", "=", "observations", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.GeoMeasure._get_agent_pos": [[245, 248], ["nav_to_obj_sensors.GeoMeasure._sim.safe_snap_point"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.safe_snap_point"], ["", "def", "_get_agent_pos", "(", "self", ")", ":", "\n", "        ", "current_pos", "=", "self", ".", "_sim", ".", "robot", ".", "base_pos", "\n", "return", "self", ".", "_sim", ".", "safe_snap_point", "(", "current_pos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.GeoMeasure._get_cur_geo_dist": [[249, 260], ["nav_to_obj_sensors.GeoMeasure._sim.geodesic_distance", "nav_to_obj_sensors.GeoMeasure._get_agent_pos"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.geodesic_distance", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.GeoMeasure._get_agent_pos"], ["", "def", "_get_cur_geo_dist", "(", "self", ",", "task", ")", ":", "\n", "        ", "distance_to_target", "=", "self", ".", "_sim", ".", "geodesic_distance", "(", "\n", "self", ".", "_get_agent_pos", "(", ")", ",", "\n", "task", ".", "nav_target_pos", ",", "\n", ")", "\n", "\n", "if", "distance_to_target", "==", "np", ".", "inf", ":", "\n", "            ", "distance_to_target", "=", "self", ".", "_prev_dist", "\n", "", "if", "distance_to_target", "is", "None", ":", "\n", "            ", "distance_to_target", "=", "30", "\n", "", "return", "distance_to_target", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.NavToObjReward._get_uuid": [[266, 269], ["None"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "_get_uuid", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "NavToObjReward", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.NavToObjReward.reset_metric": [[270, 289], ["task.measurements.check_measure_dependencies", "super().reset_metric"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measurements.check_measure_dependencies", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.reset_metric"], ["", "def", "reset_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "task", ".", "measurements", ".", "check_measure_dependencies", "(", "\n", "self", ".", "uuid", ",", "\n", "[", "\n", "NavToObjSuccess", ".", "cls_uuid", ",", "\n", "BadCalledTerminate", ".", "cls_uuid", ",", "\n", "DistToGoal", ".", "cls_uuid", ",", "\n", "RotDistToGoal", ".", "cls_uuid", ",", "\n", "]", ",", "\n", ")", "\n", "self", ".", "_cur_angle_dist", "=", "-", "1.0", "\n", "self", ".", "_give_turn_reward", "=", "False", "\n", "self", ".", "_prev_dist", "=", "-", "1.0", "\n", "super", "(", ")", ".", "reset_metric", "(", "\n", "*", "args", ",", "\n", "episode", "=", "episode", ",", "\n", "task", "=", "task", ",", "\n", "observations", "=", "observations", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.NavToObjReward.update_metric": [[291, 326], ["task.measurements.measures[].get_metric", "task.measurements.measures[].get_metric"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.get_metric", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.get_metric"], ["", "def", "update_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "reward", "=", "0.0", "\n", "cur_dist", "=", "task", ".", "measurements", ".", "measures", "[", "DistToGoal", ".", "cls_uuid", "]", ".", "get_metric", "(", ")", "\n", "if", "self", ".", "_prev_dist", "<", "0.0", ":", "\n", "            ", "dist_diff", "=", "0.0", "\n", "", "else", ":", "\n", "            ", "dist_diff", "=", "self", ".", "_prev_dist", "-", "cur_dist", "\n", "\n", "", "reward", "+=", "self", ".", "_config", ".", "DIST_REWARD", "*", "dist_diff", "\n", "self", ".", "_prev_dist", "=", "cur_dist", "\n", "\n", "bad_terminate_pen", "=", "task", ".", "measurements", ".", "measures", "[", "\n", "BadCalledTerminate", ".", "cls_uuid", "\n", "]", ".", "reward_pen", "\n", "reward", "-=", "bad_terminate_pen", "\n", "\n", "if", "(", "\n", "self", ".", "_config", ".", "SHOULD_REWARD_TURN", "\n", "and", "cur_dist", "<", "self", ".", "_config", ".", "TURN_REWARD_DIST", "\n", ")", ":", "\n", "            ", "self", ".", "_give_turn_reward", "=", "True", "\n", "\n", "angle_dist", "=", "task", ".", "measurements", ".", "measures", "[", "\n", "RotDistToGoal", ".", "cls_uuid", "\n", "]", ".", "get_metric", "(", ")", "\n", "\n", "if", "self", ".", "_cur_angle_dist", "<", "0", ":", "\n", "                ", "angle_diff", "=", "0.0", "\n", "", "else", ":", "\n", "                ", "angle_diff", "=", "self", ".", "_cur_angle_dist", "-", "angle_dist", "\n", "\n", "", "reward", "+=", "self", ".", "_config", ".", "ANGLE_DIST_REWARD", "*", "angle_diff", "\n", "self", ".", "_cur_angle_dist", "=", "angle_dist", "\n", "\n", "", "self", ".", "_metric", "=", "reward", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.SPLToObj._get_uuid": [[332, 335], ["None"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "_get_uuid", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "SPLToObj", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.SPLToObj.reset_metric": [[336, 345], ["nav_to_obj_sensors.SPLToObj._get_cur_geo_dist", "nav_to_obj_sensors.SPLToObj._get_agent_pos", "nav_to_obj_sensors.GeoMeasure.reset_metric"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.GeoMeasure._get_cur_geo_dist", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.GeoMeasure._get_agent_pos", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.reset_metric"], ["", "def", "reset_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_start_dist", "=", "self", ".", "_get_cur_geo_dist", "(", "task", ")", "\n", "self", ".", "_previous_pos", "=", "self", ".", "_get_agent_pos", "(", ")", "\n", "super", "(", ")", ".", "reset_metric", "(", "\n", "*", "args", ",", "\n", "episode", "=", "episode", ",", "\n", "task", "=", "task", ",", "\n", "observations", "=", "observations", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.SPLToObj.update_metric": [[347, 355], ["float", "nav_to_obj_sensors.SPLToObj._get_agent_pos", "numpy.linalg.norm", "task.measurements.measures[].get_metric", "max"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.GeoMeasure._get_agent_pos", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.get_metric"], ["", "def", "update_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "is_success", "=", "float", "(", "\n", "task", ".", "measurements", ".", "measures", "[", "NavToObjSuccess", ".", "cls_uuid", "]", ".", "get_metric", "(", ")", "\n", ")", "\n", "current_pos", "=", "self", ".", "_get_agent_pos", "(", ")", "\n", "dist", "=", "np", ".", "linalg", ".", "norm", "(", "current_pos", "-", "self", ".", "_previous_pos", ")", "\n", "self", ".", "_previous_pos", "=", "current_pos", "\n", "return", "is_success", "*", "(", "self", ".", "_start_dist", "/", "max", "(", "self", ".", "_start_dist", ",", "dist", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.DistToGoal._get_uuid": [[361, 364], ["None"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "_get_uuid", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "DistToGoal", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.DistToGoal.update_metric": [[365, 367], ["nav_to_obj_sensors.DistToGoal._get_cur_geo_dist"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.GeoMeasure._get_cur_geo_dist"], ["", "def", "update_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_metric", "=", "self", ".", "_get_cur_geo_dist", "(", "task", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.RotDistToGoal._get_uuid": [[373, 376], ["None"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "_get_uuid", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "RotDistToGoal", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.RotDistToGoal.update_metric": [[377, 384], ["float", "numpy.arctan2", "numpy.abs", "numpy.sin", "numpy.cos"], "methods", ["None"], ["", "def", "update_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "heading_angle", "=", "float", "(", "self", ".", "_sim", ".", "robot", ".", "base_rot", ")", "\n", "angle_dist", "=", "np", ".", "arctan2", "(", "\n", "np", ".", "sin", "(", "heading_angle", "-", "task", ".", "nav_target_angle", ")", ",", "\n", "np", ".", "cos", "(", "heading_angle", "-", "task", ".", "nav_target_angle", ")", ",", "\n", ")", "\n", "self", ".", "_metric", "=", "np", ".", "abs", "(", "angle_dist", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.BadCalledTerminate._get_uuid": [[390, 393], ["None"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "_get_uuid", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "BadCalledTerminate", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.BadCalledTerminate.reset_metric": [[394, 402], ["nav_to_obj_sensors.GeoMeasure.reset_metric"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.reset_metric"], ["", "def", "reset_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "reward_pen", "=", "0.0", "\n", "super", "(", ")", ".", "reset_metric", "(", "\n", "*", "args", ",", "\n", "episode", "=", "episode", ",", "\n", "task", "=", "task", ",", "\n", "observations", "=", "observations", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.BadCalledTerminate.update_metric": [[404, 422], ["success_measure.does_action_want_stop", "success_measure.get_metric"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.NavToObjSuccess.does_action_want_stop", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.get_metric"], ["", "def", "update_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "success_measure", "=", "task", ".", "measurements", ".", "measures", "[", "NavToObjSuccess", ".", "cls_uuid", "]", "\n", "if", "(", "\n", "success_measure", ".", "does_action_want_stop", "(", "task", ",", "observations", ")", "\n", "and", "not", "success_measure", ".", "get_metric", "(", ")", "\n", ")", ":", "\n", "            ", "if", "self", ".", "_config", ".", "DECAY_BAD_TERM", ":", "\n", "                ", "remaining", "=", "(", "\n", "self", ".", "_config", ".", "ENVIRONMENT", ".", "MAX_EPISODE_STEPS", "-", "self", ".", "_n_steps", "\n", ")", "\n", "self", ".", "reward_pen", "-=", "self", ".", "_config", ".", "BAD_TERM_PEN", "*", "(", "\n", "remaining", "/", "self", ".", "_config", ".", "ENVIRONMENT", ".", "MAX_EPISODE_STEPS", "\n", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "reward_pen", "=", "self", ".", "_config", ".", "BAD_TERM_PEN", "\n", "", "self", ".", "_metric", "=", "1.0", "\n", "", "else", ":", "\n", "            ", "self", ".", "_metric", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.NavToPosSucc._get_uuid": [[428, 431], ["None"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "_get_uuid", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "NavToPosSucc", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.NavToPosSucc.reset_metric": [[432, 444], ["task.measurements.check_measure_dependencies", "nav_to_obj_sensors.GeoMeasure.reset_metric"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measurements.check_measure_dependencies", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.reset_metric"], ["", "def", "reset_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "task", ".", "measurements", ".", "check_measure_dependencies", "(", "\n", "self", ".", "uuid", ",", "\n", "[", "DistToGoal", ".", "cls_uuid", "]", ",", "\n", ")", "\n", "\n", "super", "(", ")", ".", "reset_metric", "(", "\n", "*", "args", ",", "\n", "episode", "=", "episode", ",", "\n", "task", "=", "task", ",", "\n", "observations", "=", "observations", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.NavToPosSucc.update_metric": [[446, 449], ["task.measurements.measures[].get_metric"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.get_metric"], ["", "def", "update_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "dist", "=", "task", ".", "measurements", ".", "measures", "[", "DistToGoal", ".", "cls_uuid", "]", ".", "get_metric", "(", ")", "\n", "self", ".", "_metric", "=", "dist", "<", "self", ".", "_config", ".", "SUCCESS_DISTANCE", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.NavToObjSuccess._get_uuid": [[455, 458], ["None"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "_get_uuid", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "NavToObjSuccess", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.NavToObjSuccess.reset_metric": [[459, 473], ["task.measurements.check_measure_dependencies", "nav_to_obj_sensors.GeoMeasure.reset_metric"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measurements.check_measure_dependencies", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.reset_metric"], ["", "def", "reset_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "# Get the end_on_stop property from the action", "\n", "        ", "task", ".", "measurements", ".", "check_measure_dependencies", "(", "\n", "self", ".", "uuid", ",", "\n", "[", "NavToPosSucc", ".", "cls_uuid", ",", "RotDistToGoal", ".", "cls_uuid", "]", ",", "\n", ")", "\n", "self", ".", "_end_on_stop", "=", "task", ".", "actions", "[", "BASE_ACTION_NAME", "]", ".", "end_on_stop", "\n", "\n", "super", "(", ")", ".", "reset_metric", "(", "\n", "*", "args", ",", "\n", "episode", "=", "episode", ",", "\n", "task", "=", "task", ",", "\n", "observations", "=", "observations", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.NavToObjSuccess.update_metric": [[475, 499], ["task.measurements.measures[].get_metric", "task.measurements.measures[].get_metric", "nav_to_obj_sensors.NavToObjSuccess.does_action_want_stop"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.get_metric", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.get_metric", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.NavToObjSuccess.does_action_want_stop"], ["", "def", "update_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "angle_dist", "=", "task", ".", "measurements", ".", "measures", "[", "\n", "RotDistToGoal", ".", "cls_uuid", "\n", "]", ".", "get_metric", "(", ")", "\n", "\n", "nav_pos_succ", "=", "task", ".", "measurements", ".", "measures", "[", "\n", "NavToPosSucc", ".", "cls_uuid", "\n", "]", ".", "get_metric", "(", ")", "\n", "\n", "if", "self", ".", "_config", ".", "MUST_LOOK_AT_TARG", ":", "\n", "            ", "self", ".", "_metric", "=", "(", "\n", "nav_pos_succ", "and", "angle_dist", "<", "self", ".", "_config", ".", "SUCCESS_ANGLE_DIST", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_metric", "=", "nav_pos_succ", "\n", "\n", "", "called_stop", "=", "self", ".", "does_action_want_stop", "(", "task", ",", "observations", ")", "\n", "\n", "if", "self", ".", "_config", ".", "MUST_CALL_STOP", ":", "\n", "            ", "if", "called_stop", ":", "\n", "                ", "if", "self", ".", "_end_on_stop", ":", "\n", "                    ", "task", ".", "should_end", "=", "True", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "_metric", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_sensors.NavToObjSuccess.does_action_want_stop": [[500, 509], ["numpy.linalg.norm", "nav_to_obj_sensors.NavToObjSuccess._get_angle_dist"], "methods", ["None"], ["", "", "", "def", "does_action_want_stop", "(", "self", ",", "task", ",", "obs", ")", ":", "\n", "        ", "if", "self", ".", "_config", ".", "HEURISTIC_STOP", ":", "\n", "            ", "angle_succ", "=", "(", "\n", "self", ".", "_get_angle_dist", "(", "obs", ")", "<", "self", ".", "_config", ".", "SUCCESS_ANGLE_DIST", "\n", ")", "\n", "obj_dist", "=", "np", ".", "linalg", ".", "norm", "(", "obs", "[", "\"dyn_obj_start_or_goal_sensor\"", "]", ")", "\n", "return", "angle_succ", "and", "(", "obj_dist", "<", "1.0", ")", "\n", "\n", "", "return", "task", ".", "actions", "[", "BASE_ACTION_NAME", "]", ".", "does_want_terminate", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_sensors.MarkerRelPosSensor.__init__": [[31, 35], ["habitat.core.simulator.Sensor.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "sim", ",", "config", ",", "*", "args", ",", "task", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", "=", "config", ")", "\n", "self", ".", "_sim", "=", "sim", "\n", "self", ".", "_task", "=", "task", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_sensors.MarkerRelPosSensor._get_uuid": [[36, 39], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_get_uuid", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "MarkerRelPosSensor", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_sensors.MarkerRelPosSensor._get_sensor_type": [[40, 42], ["None"], "methods", ["None"], ["", "def", "_get_sensor_type", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "SensorTypes", ".", "TENSOR", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_sensors.MarkerRelPosSensor._get_observation_space": [[43, 49], ["gym.spaces.Box", "numpy.finfo", "numpy.finfo"], "methods", ["None"], ["", "def", "_get_observation_space", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "spaces", ".", "Box", "(", "\n", "shape", "=", "(", "3", ",", ")", ",", "\n", "low", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "min", ",", "\n", "high", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "max", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_sensors.MarkerRelPosSensor.get_observation": [[51, 59], ["articulated_object_sensors.MarkerRelPosSensor._task.get_use_marker", "ee_trans.inverted().transform_point", "numpy.array", "articulated_object_sensors.MarkerRelPosSensor.get_current_position", "ee_trans.inverted"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask.get_use_marker", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.marker_info.MarkerInfo.get_current_position"], ["", "def", "get_observation", "(", "self", ",", "observations", ",", "episode", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "marker", "=", "self", ".", "_task", ".", "get_use_marker", "(", ")", "\n", "ee_trans", "=", "self", ".", "_sim", ".", "robot", ".", "ee_transform", "\n", "rel_marker_pos", "=", "ee_trans", ".", "inverted", "(", ")", ".", "transform_point", "(", "\n", "marker", ".", "get_current_position", "(", ")", "\n", ")", "\n", "\n", "return", "np", ".", "array", "(", "rel_marker_pos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_sensors.ArtJointSensor.__init__": [[70, 74], ["habitat.core.simulator.Sensor.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "sim", ",", "config", ",", "*", "args", ",", "task", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", "=", "config", ")", "\n", "self", ".", "_sim", "=", "sim", "\n", "self", ".", "_task", "=", "task", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_sensors.ArtJointSensor._get_uuid": [[75, 77], ["None"], "methods", ["None"], ["", "def", "_get_uuid", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "ArtJointSensor", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_sensors.ArtJointSensor._get_sensor_type": [[78, 80], ["None"], "methods", ["None"], ["", "def", "_get_sensor_type", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "SensorTypes", ".", "TENSOR", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_sensors.ArtJointSensor._get_observation_space": [[81, 83], ["gym.spaces.Box"], "methods", ["None"], ["", "def", "_get_observation_space", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "spaces", ".", "Box", "(", "shape", "=", "(", "2", ",", ")", ",", "low", "=", "0", ",", "high", "=", "1", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_sensors.ArtJointSensor.get_observation": [[84, 88], ["articulated_object_sensors.ArtJointSensor._task.get_use_marker().get_targ_js", "articulated_object_sensors.ArtJointSensor._task.get_use_marker().get_targ_js_vel", "numpy.array().reshape", "articulated_object_sensors.ArtJointSensor._task.get_use_marker", "articulated_object_sensors.ArtJointSensor._task.get_use_marker", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.marker_info.MarkerInfo.get_targ_js", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.marker_info.MarkerInfo.get_targ_js_vel", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask.get_use_marker", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask.get_use_marker"], ["", "def", "get_observation", "(", "self", ",", "observations", ",", "episode", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "js", "=", "self", ".", "_task", ".", "get_use_marker", "(", ")", ".", "get_targ_js", "(", ")", "\n", "js_vel", "=", "self", ".", "_task", ".", "get_use_marker", "(", ")", ".", "get_targ_js_vel", "(", ")", "\n", "return", "np", ".", "array", "(", "[", "js", ",", "js_vel", "]", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "(", "2", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_sensors.ArtJointSensorNoVel.__init__": [[99, 103], ["habitat.core.simulator.Sensor.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "sim", ",", "config", ",", "*", "args", ",", "task", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", "=", "config", ")", "\n", "self", ".", "_sim", "=", "sim", "\n", "self", ".", "_task", "=", "task", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_sensors.ArtJointSensorNoVel._get_uuid": [[104, 106], ["None"], "methods", ["None"], ["", "def", "_get_uuid", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "ArtJointSensorNoVel", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_sensors.ArtJointSensorNoVel._get_sensor_type": [[107, 109], ["None"], "methods", ["None"], ["", "def", "_get_sensor_type", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "SensorTypes", ".", "TENSOR", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_sensors.ArtJointSensorNoVel._get_observation_space": [[110, 112], ["gym.spaces.Box"], "methods", ["None"], ["", "def", "_get_observation_space", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "spaces", ".", "Box", "(", "shape", "=", "(", "1", ",", ")", ",", "low", "=", "0", ",", "high", "=", "1", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_sensors.ArtJointSensorNoVel.get_observation": [[113, 116], ["articulated_object_sensors.ArtJointSensorNoVel._task.get_use_marker().get_targ_js", "numpy.array().reshape", "articulated_object_sensors.ArtJointSensorNoVel._task.get_use_marker", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.marker_info.MarkerInfo.get_targ_js", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask.get_use_marker"], ["", "def", "get_observation", "(", "self", ",", "observations", ",", "episode", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "js", "=", "self", ".", "_task", ".", "get_use_marker", "(", ")", ".", "get_targ_js", "(", ")", "\n", "return", "np", ".", "array", "(", "[", "js", "]", ")", ".", "reshape", "(", "(", "1", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_sensors.ArtObjState.__init__": [[126, 129], ["habitat.core.embodied_task.Measure.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "sim", ",", "config", ",", "task", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_config", "=", "config", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "sim", "=", "sim", ",", "config", "=", "config", ",", "task", "=", "task", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_sensors.ArtObjState._get_uuid": [[130, 133], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_get_uuid", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "ArtObjState", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_sensors.ArtObjState.reset_metric": [[134, 141], ["articulated_object_sensors.ArtObjState.update_metric"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.update_metric"], ["", "def", "reset_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "update_metric", "(", "\n", "*", "args", ",", "\n", "episode", "=", "episode", ",", "\n", "task", "=", "task", ",", "\n", "observations", "=", "observations", ",", "\n", "**", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_sensors.ArtObjState.update_metric": [[143, 145], ["task.get_use_marker().get_targ_js", "task.get_use_marker"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.marker_info.MarkerInfo.get_targ_js", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask.get_use_marker"], ["", "def", "update_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_metric", "=", "task", ".", "get_use_marker", "(", ")", ".", "get_targ_js", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_sensors.ArtObjAtDesiredState.__init__": [[151, 154], ["habitat.core.embodied_task.Measure.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "sim", ",", "config", ",", "task", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_config", "=", "config", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "sim", "=", "sim", ",", "config", "=", "config", ",", "task", "=", "task", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_sensors.ArtObjAtDesiredState._get_uuid": [[155, 158], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_get_uuid", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "ArtObjAtDesiredState", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_sensors.ArtObjAtDesiredState.reset_metric": [[159, 166], ["articulated_object_sensors.ArtObjAtDesiredState.update_metric"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.update_metric"], ["", "def", "reset_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "update_metric", "(", "\n", "*", "args", ",", "\n", "episode", "=", "episode", ",", "\n", "task", "=", "task", ",", "\n", "observations", "=", "observations", ",", "\n", "**", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_sensors.ArtObjAtDesiredState.update_metric": [[168, 177], ["task.get_use_marker().get_targ_js", "abs", "task.get_use_marker"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.marker_info.MarkerInfo.get_targ_js", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask.get_use_marker"], ["", "def", "update_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "dist", "=", "task", ".", "success_js_state", "-", "task", ".", "get_use_marker", "(", ")", ".", "get_targ_js", "(", ")", "\n", "\n", "# If not absolute distance, we can have a joint state greater than the", "\n", "# target.", "\n", "if", "self", ".", "_config", ".", "USE_ABSOLUTE_DISTANCE", ":", "\n", "            ", "self", ".", "_metric", "=", "abs", "(", "dist", ")", "<", "self", ".", "_config", ".", "SUCCESS_DIST_THRESHOLD", "\n", "", "else", ":", "\n", "            ", "self", ".", "_metric", "=", "dist", "<", "self", ".", "_config", ".", "SUCCESS_DIST_THRESHOLD", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_sensors.ArtObjSuccess.__init__": [[187, 191], ["habitat.core.embodied_task.Measure.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "sim", ",", "config", ",", "task", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_config", "=", "config", "\n", "self", ".", "_sim", "=", "sim", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "sim", "=", "sim", ",", "config", "=", "config", ",", "task", "=", "task", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_sensors.ArtObjSuccess._get_uuid": [[192, 195], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_get_uuid", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "ArtObjSuccess", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_sensors.ArtObjSuccess.reset_metric": [[196, 203], ["articulated_object_sensors.ArtObjSuccess.update_metric"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.update_metric"], ["", "def", "reset_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "update_metric", "(", "\n", "*", "args", ",", "\n", "episode", "=", "episode", ",", "\n", "task", "=", "task", ",", "\n", "observations", "=", "observations", ",", "\n", "**", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_sensors.ArtObjSuccess.update_metric": [[205, 219], ["task.measurements.measures[].get_metric", "task.measurements.measures[].get_metric"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.get_metric", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.get_metric"], ["", "def", "update_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "ee_to_rest_distance", "=", "task", ".", "measurements", ".", "measures", "[", "\n", "EndEffectorToRestDistance", ".", "cls_uuid", "\n", "]", ".", "get_metric", "(", ")", "\n", "is_art_obj_state_succ", "=", "task", ".", "measurements", ".", "measures", "[", "\n", "ArtObjAtDesiredState", ".", "cls_uuid", "\n", "]", ".", "get_metric", "(", ")", "\n", "\n", "# If not absolute distance, we can have a joint state greater than the", "\n", "# target.", "\n", "self", ".", "_metric", "=", "(", "\n", "is_art_obj_state_succ", "\n", "and", "ee_to_rest_distance", "<", "self", ".", "_config", ".", "REST_DIST_THRESHOLD", "\n", "and", "not", "self", ".", "_sim", ".", "grasp_mgr", ".", "is_grasped", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_sensors.EndEffectorDistToMarker._get_uuid": [[230, 233], ["None"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "_get_uuid", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "EndEffectorDistToMarker", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_sensors.EndEffectorDistToMarker.reset_metric": [[234, 241], ["articulated_object_sensors.EndEffectorDistToMarker.update_metric"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.update_metric"], ["", "def", "reset_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "update_metric", "(", "\n", "*", "args", ",", "\n", "episode", "=", "episode", ",", "\n", "task", "=", "task", ",", "\n", "observations", "=", "observations", ",", "\n", "**", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_sensors.EndEffectorDistToMarker.update_metric": [[243, 246], ["numpy.linalg.norm"], "methods", ["None"], ["", "def", "update_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_metric", "=", "np", ".", "linalg", ".", "norm", "(", "\n", "observations", "[", "MarkerRelPosSensor", ".", "cls_uuid", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_sensors.ArtObjReward.__init__": [[257, 261], ["habitat.tasks.rearrange.rearrange_sensors.RearrangeReward.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "sim", ",", "config", ",", "task", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_metric", "=", "None", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "sim", "=", "sim", ",", "config", "=", "config", ",", "task", "=", "task", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_sensors.ArtObjReward._get_uuid": [[262, 265], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_get_uuid", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "ArtObjReward", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_sensors.ArtObjReward.reset_metric": [[266, 299], ["task.measurements.check_measure_dependencies", "task.measurements.measures[].get_metric", "task.measurements.measures[].get_metric", "task.measurements.measures[].get_metric", "super().reset_metric"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measurements.check_measure_dependencies", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.get_metric", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.get_metric", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.get_metric", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.reset_metric"], ["", "def", "reset_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "task", ".", "measurements", ".", "check_measure_dependencies", "(", "\n", "self", ".", "uuid", ",", "\n", "[", "\n", "ArtObjState", ".", "cls_uuid", ",", "\n", "ArtObjSuccess", ".", "cls_uuid", ",", "\n", "EndEffectorToRestDistance", ".", "cls_uuid", ",", "\n", "ArtObjAtDesiredState", ".", "cls_uuid", ",", "\n", "]", ",", "\n", ")", "\n", "link_state", "=", "task", ".", "measurements", ".", "measures", "[", "\n", "ArtObjState", ".", "cls_uuid", "\n", "]", ".", "get_metric", "(", ")", "\n", "\n", "dist_to_marker", "=", "task", ".", "measurements", ".", "measures", "[", "\n", "EndEffectorDistToMarker", ".", "cls_uuid", "\n", "]", ".", "get_metric", "(", ")", "\n", "\n", "ee_to_rest_distance", "=", "task", ".", "measurements", ".", "measures", "[", "\n", "EndEffectorToRestDistance", ".", "cls_uuid", "\n", "]", ".", "get_metric", "(", ")", "\n", "\n", "self", ".", "_prev_art_state", "=", "link_state", "\n", "self", ".", "_any_has_grasped", "=", "task", ".", "_sim", ".", "grasp_mgr", ".", "is_grasped", "\n", "self", ".", "_prev_ee_dist_to_marker", "=", "dist_to_marker", "\n", "self", ".", "_prev_ee_to_rest", "=", "ee_to_rest_distance", "\n", "self", ".", "_any_at_desired_state", "=", "False", "\n", "super", "(", ")", ".", "reset_metric", "(", "\n", "*", "args", ",", "\n", "episode", "=", "episode", ",", "\n", "task", "=", "task", ",", "\n", "observations", "=", "observations", ",", "\n", "**", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_sensors.ArtObjReward.update_metric": [[301, 366], ["super().update_metric", "task.measurements.measures[].get_metric", "task.measurements.measures[].get_metric", "task.measurements.measures[].get_metric", "abs", "abs", "task.measurements.measures[].get_metric", "habitat.tasks.rearrange.utils.rearrange_logger.debug"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.update_metric", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.get_metric", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.get_metric", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.get_metric", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.get_metric"], ["", "def", "update_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "update_metric", "(", "\n", "*", "args", ",", "\n", "episode", "=", "episode", ",", "\n", "task", "=", "task", ",", "\n", "observations", "=", "observations", ",", "\n", "**", "kwargs", "\n", ")", "\n", "reward", "=", "self", ".", "_metric", "\n", "link_state", "=", "task", ".", "measurements", ".", "measures", "[", "\n", "ArtObjState", ".", "cls_uuid", "\n", "]", ".", "get_metric", "(", ")", "\n", "\n", "ee_to_rest_distance", "=", "task", ".", "measurements", ".", "measures", "[", "\n", "EndEffectorToRestDistance", ".", "cls_uuid", "\n", "]", ".", "get_metric", "(", ")", "\n", "\n", "is_art_obj_state_succ", "=", "task", ".", "measurements", ".", "measures", "[", "\n", "ArtObjAtDesiredState", ".", "cls_uuid", "\n", "]", ".", "get_metric", "(", ")", "\n", "\n", "cur_dist", "=", "abs", "(", "link_state", "-", "task", ".", "success_js_state", ")", "\n", "prev_dist", "=", "abs", "(", "self", ".", "_prev_art_state", "-", "task", ".", "success_js_state", ")", "\n", "\n", "# Dense reward to the target articulated object state.", "\n", "dist_diff", "=", "prev_dist", "-", "cur_dist", "\n", "if", "not", "is_art_obj_state_succ", ":", "\n", "            ", "reward", "+=", "self", ".", "_config", ".", "ART_DIST_REWARD", "*", "dist_diff", "\n", "\n", "", "cur_has_grasped", "=", "task", ".", "_sim", ".", "grasp_mgr", ".", "is_grasped", "\n", "\n", "cur_ee_dist_to_marker", "=", "task", ".", "measurements", ".", "measures", "[", "\n", "EndEffectorDistToMarker", ".", "cls_uuid", "\n", "]", ".", "get_metric", "(", ")", "\n", "if", "cur_has_grasped", "and", "not", "self", ".", "_any_has_grasped", ":", "\n", "            ", "if", "task", ".", "_sim", ".", "grasp_mgr", ".", "snapped_marker_id", "!=", "task", ".", "use_marker_name", ":", "\n", "# Grasped wrong marker", "\n", "                ", "reward", "-=", "self", ".", "_config", ".", "WRONG_GRASP_PEN", "\n", "if", "self", ".", "_config", ".", "WRONG_GRASP_END", ":", "\n", "                    ", "rearrange_logger", ".", "debug", "(", "\n", "\"Grasped wrong marker, ending episode.\"", "\n", ")", "\n", "task", ".", "should_end", "=", "True", "\n", "", "", "else", ":", "\n", "# Grasped right marker", "\n", "                ", "reward", "+=", "self", ".", "_config", ".", "GRASP_REWARD", "\n", "", "self", ".", "_any_has_grasped", "=", "True", "\n", "\n", "", "if", "is_art_obj_state_succ", ":", "\n", "            ", "if", "not", "self", ".", "_any_at_desired_state", ":", "\n", "                ", "reward", "+=", "self", ".", "_config", ".", "ART_AT_DESIRED_STATE_REWARD", "\n", "self", ".", "_any_at_desired_state", "=", "True", "\n", "# Give the reward based on distance to the resting position.", "\n", "", "ee_dist_change", "=", "self", ".", "_prev_ee_to_rest", "-", "ee_to_rest_distance", "\n", "reward", "+=", "self", ".", "_config", ".", "EE_DIST_REWARD", "*", "ee_dist_change", "\n", "", "elif", "not", "cur_has_grasped", ":", "\n", "# Give the reward based on distance to the handle", "\n", "            ", "dist_diff", "=", "self", ".", "_prev_ee_dist_to_marker", "-", "cur_ee_dist_to_marker", "\n", "reward", "+=", "self", ".", "_config", ".", "MARKER_DIST_REWARD", "*", "dist_diff", "\n", "\n", "", "self", ".", "_prev_ee_to_rest", "=", "ee_to_rest_distance", "\n", "\n", "self", ".", "_prev_ee_dist_to_marker", "=", "cur_ee_dist_to_marker", "\n", "self", ".", "_prev_art_state", "=", "link_state", "\n", "self", ".", "_metric", "=", "reward", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.place_sensors.PlaceReward.__init__": [[25, 31], ["habitat.tasks.rearrange.rearrange_sensors.RearrangeReward.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "sim", ",", "config", ",", "task", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_prev_dist", "=", "-", "1.0", "\n", "self", ".", "_prev_dropped", "=", "False", "\n", "self", ".", "_metric", "=", "None", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "sim", "=", "sim", ",", "config", "=", "config", ",", "task", "=", "task", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.place_sensors.PlaceReward._get_uuid": [[32, 35], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_get_uuid", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "PlaceReward", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.place_sensors.PlaceReward.reset_metric": [[36, 56], ["task.measurements.check_measure_dependencies", "super().reset_metric"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measurements.check_measure_dependencies", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.reset_metric"], ["", "def", "reset_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "task", ".", "measurements", ".", "check_measure_dependencies", "(", "\n", "self", ".", "uuid", ",", "\n", "[", "\n", "ObjectToGoalDistance", ".", "cls_uuid", ",", "\n", "ObjAtGoal", ".", "cls_uuid", ",", "\n", "EndEffectorToRestDistance", ".", "cls_uuid", ",", "\n", "RobotForce", ".", "cls_uuid", ",", "\n", "ForceTerminate", ".", "cls_uuid", ",", "\n", "]", ",", "\n", ")", "\n", "self", ".", "_prev_dist", "=", "-", "1.0", "\n", "self", ".", "_prev_dropped", "=", "not", "self", ".", "_sim", ".", "grasp_mgr", ".", "is_grasped", "\n", "\n", "super", "(", ")", ".", "reset_metric", "(", "\n", "*", "args", ",", "\n", "episode", "=", "episode", ",", "\n", "task", "=", "task", ",", "\n", "observations", "=", "observations", ",", "\n", "**", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.place_sensors.PlaceReward.update_metric": [[58, 117], ["super().update_metric", "task.measurements.measures[].get_metric", "task.measurements.measures[].get_metric", "task.measurements.measures[].get_metric", "round", "str", "str", "habitat.tasks.rearrange.utils.rearrange_logger.debug"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.update_metric", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.get_metric", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.get_metric", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.get_metric"], ["", "def", "update_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "update_metric", "(", "\n", "*", "args", ",", "\n", "episode", "=", "episode", ",", "\n", "task", "=", "task", ",", "\n", "observations", "=", "observations", ",", "\n", "**", "kwargs", "\n", ")", "\n", "reward", "=", "self", ".", "_metric", "\n", "obj_to_goal_dist", "=", "task", ".", "measurements", ".", "measures", "[", "\n", "ObjectToGoalDistance", ".", "cls_uuid", "\n", "]", ".", "get_metric", "(", ")", "\n", "ee_to_rest_distance", "=", "task", ".", "measurements", ".", "measures", "[", "\n", "EndEffectorToRestDistance", ".", "cls_uuid", "\n", "]", ".", "get_metric", "(", ")", "\n", "obj_at_goal", "=", "task", ".", "measurements", ".", "measures", "[", "\n", "ObjAtGoal", ".", "cls_uuid", "\n", "]", ".", "get_metric", "(", ")", "[", "str", "(", "task", ".", "abs_targ_idx", ")", "]", "\n", "\n", "snapped_id", "=", "self", ".", "_sim", ".", "grasp_mgr", ".", "snap_idx", "\n", "cur_picked", "=", "snapped_id", "is", "not", "None", "\n", "\n", "if", "(", "not", "obj_at_goal", ")", "or", "cur_picked", ":", "\n", "            ", "dist_to_goal", "=", "obj_to_goal_dist", "[", "str", "(", "task", ".", "abs_targ_idx", ")", "]", "\n", "", "else", ":", "\n", "            ", "dist_to_goal", "=", "ee_to_rest_distance", "\n", "\n", "", "if", "(", "not", "self", ".", "_prev_dropped", ")", "and", "(", "not", "cur_picked", ")", ":", "\n", "            ", "self", ".", "_prev_dropped", "=", "True", "\n", "if", "obj_at_goal", ":", "\n", "                ", "reward", "+=", "self", ".", "_config", ".", "PLACE_REWARD", "\n", "# If we just transitioned to the next stage our current", "\n", "# distance is stale.", "\n", "self", ".", "_prev_dist", "=", "-", "1", "\n", "", "else", ":", "\n", "# Dropped at wrong location", "\n", "                ", "reward", "-=", "self", ".", "_config", ".", "DROP_PEN", "\n", "if", "self", ".", "_config", ".", "WRONG_DROP_SHOULD_END", ":", "\n", "                    ", "rearrange_logger", ".", "debug", "(", "\n", "\"Dropped to wrong place, ending episode.\"", "\n", ")", "\n", "self", ".", "_task", ".", "should_end", "=", "True", "\n", "self", ".", "_metric", "=", "reward", "\n", "return", "\n", "\n", "", "", "", "if", "self", ".", "_config", ".", "USE_DIFF", ":", "\n", "            ", "if", "self", ".", "_prev_dist", "<", "0", ":", "\n", "                ", "dist_diff", "=", "0.0", "\n", "", "else", ":", "\n", "                ", "dist_diff", "=", "self", ".", "_prev_dist", "-", "dist_to_goal", "\n", "\n", "# Filter out the small fluctuations", "\n", "", "dist_diff", "=", "round", "(", "dist_diff", ",", "3", ")", "\n", "reward", "+=", "self", ".", "_config", ".", "DIST_REWARD", "*", "dist_diff", "\n", "", "else", ":", "\n", "            ", "reward", "-=", "self", ".", "_config", ".", "DIST_REWARD", "*", "dist_to_goal", "\n", "", "self", ".", "_prev_dist", "=", "dist_to_goal", "\n", "\n", "self", ".", "_metric", "=", "reward", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.place_sensors.PlaceSuccess.__init__": [[123, 127], ["habitat.core.embodied_task.Measure.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "sim", ",", "config", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_config", "=", "config", "\n", "self", ".", "_sim", "=", "sim", "\n", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.place_sensors.PlaceSuccess._get_uuid": [[128, 131], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_get_uuid", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "PlaceSuccess", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.place_sensors.PlaceSuccess.reset_metric": [[132, 146], ["task.measurements.check_measure_dependencies", "place_sensors.PlaceSuccess.update_metric"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measurements.check_measure_dependencies", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.update_metric"], ["", "def", "reset_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "task", ".", "measurements", ".", "check_measure_dependencies", "(", "\n", "self", ".", "uuid", ",", "\n", "[", "\n", "ObjAtGoal", ".", "cls_uuid", ",", "\n", "EndEffectorToRestDistance", ".", "cls_uuid", ",", "\n", "]", ",", "\n", ")", "\n", "self", ".", "update_metric", "(", "\n", "*", "args", ",", "\n", "episode", "=", "episode", ",", "\n", "task", "=", "task", ",", "\n", "observations", "=", "observations", ",", "\n", "**", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.place_sensors.PlaceSuccess.update_metric": [[148, 162], ["task.measurements.measures[].get_metric", "task.measurements.measures[].get_metric", "str"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.get_metric", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.get_metric"], ["", "def", "update_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "is_obj_at_goal", "=", "task", ".", "measurements", ".", "measures", "[", "\n", "ObjAtGoal", ".", "cls_uuid", "\n", "]", ".", "get_metric", "(", ")", "[", "str", "(", "task", ".", "abs_targ_idx", ")", "]", "\n", "is_holding", "=", "self", ".", "_sim", ".", "grasp_mgr", ".", "is_grasped", "\n", "\n", "ee_to_rest_distance", "=", "task", ".", "measurements", ".", "measures", "[", "\n", "EndEffectorToRestDistance", ".", "cls_uuid", "\n", "]", ".", "get_metric", "(", ")", "\n", "\n", "self", ".", "_metric", "=", "(", "\n", "not", "is_holding", "\n", "and", "is_obj_at_goal", "\n", "and", "ee_to_rest_distance", "<", "self", ".", "_config", ".", "EE_RESTING_SUCCESS_THRESHOLD", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.place_task.RearrangePlaceTaskV1._get_targ_pos": [[15, 17], ["sim.get_targets"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.get_targets"], ["    ", "def", "_get_targ_pos", "(", "self", ",", "sim", ")", ":", "\n", "        ", "return", "sim", ".", "get_targets", "(", ")", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.place_task.RearrangePlaceTaskV1._should_prevent_grip": [[18, 24], ["action_args.get"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get"], ["", "def", "_should_prevent_grip", "(", "self", ",", "action_args", ")", ":", "\n", "# Never allow regrasping", "\n", "        ", "return", "(", "\n", "not", "self", ".", "_sim", ".", "grasp_mgr", ".", "is_grasped", "\n", "and", "action_args", ".", "get", "(", "\"grip_action\"", ",", "None", ")", "is", "not", "None", "\n", "and", "action_args", "[", "\"grip_action\"", "]", ">=", "0", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.place_task.RearrangePlaceTaskV1.get_receptacle_info": [[26, 28], ["None"], "methods", ["None"], ["", "def", "get_receptacle_info", "(", "self", ",", "episode", ",", "sel_idx", ")", ":", "\n", "        ", "return", "episode", ".", "goal_receptacles", "[", "sel_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.place_task.RearrangePlaceTaskV1.reset": [[29, 45], ["sim.grasp_mgr.desnap", "super().reset", "sim.grasp_mgr.snap_to_obj", "sim.internal_step", "sim.internal_step", "place_task.RearrangePlaceTaskV1._get_observations"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_grasp_manager.RearrangeGraspManager.desnap", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_grasp_manager.RearrangeGraspManager.snap_to_obj", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.internal_step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.internal_step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_task.RearrangeTask._get_observations"], ["", "def", "reset", "(", "self", ",", "episode", ":", "Episode", ")", ":", "\n", "        ", "sim", "=", "self", ".", "_sim", "\n", "# Remove whatever the agent is currently holding.", "\n", "sim", ".", "grasp_mgr", ".", "desnap", "(", "force", "=", "True", ")", "\n", "\n", "super", "(", ")", ".", "reset", "(", "episode", ",", "fetch_observations", "=", "False", ")", "\n", "\n", "abs_obj_idx", "=", "sim", ".", "scene_obj_ids", "[", "self", ".", "abs_targ_idx", "]", "\n", "\n", "sim", ".", "grasp_mgr", ".", "snap_to_obj", "(", "abs_obj_idx", ",", "force", "=", "True", ")", "\n", "sim", ".", "internal_step", "(", "-", "1", ")", "\n", "\n", "self", ".", "was_prev_holding", "=", "self", ".", "targ_idx", "\n", "\n", "sim", ".", "internal_step", "(", "-", "1", ")", "\n", "return", "self", ".", "_get_observations", "(", "episode", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_task.SetArticulatedObjectTask.__init__": [[26, 31], ["habitat.tasks.rearrange.rearrange_task.RearrangeTask.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "config", ",", "dataset", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", "=", "config", ",", "*", "args", ",", "dataset", "=", "dataset", ",", "**", "kwargs", ")", "\n", "self", ".", "_use_marker", ":", "str", "=", "None", "\n", "self", ".", "_prev_awake", "=", "True", "\n", "self", ".", "_force_use_marker", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_task.SetArticulatedObjectTask.use_marker_name": [[32, 38], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "use_marker_name", "(", "self", ")", "->", "str", ":", "\n", "        ", "\"\"\"\n        The name of the target marker the agent interacts with.\n        \"\"\"", "\n", "return", "self", ".", "_use_marker", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_task.SetArticulatedObjectTask.get_use_marker": [[39, 44], ["articulated_object_task.SetArticulatedObjectTask._sim.get_marker"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.get_marker"], ["", "def", "get_use_marker", "(", "self", ")", "->", "MarkerInfo", ":", "\n", "        ", "\"\"\"\n        The marker the agent should interact with.\n        \"\"\"", "\n", "return", "self", ".", "_sim", ".", "get_marker", "(", "self", ".", "_use_marker", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_task.SetArticulatedObjectTask.set_args": [[45, 52], ["marker.startswith", "len"], "methods", ["None"], ["", "def", "set_args", "(", "self", ",", "marker", ",", "obj", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "marker", ".", "startswith", "(", "\"MARKER_\"", ")", ":", "\n", "            ", "marker", "=", "marker", "[", "len", "(", "\"MARKER_\"", ")", ":", "]", "\n", "", "self", ".", "_force_use_marker", "=", "marker", "\n", "# The object in the container we are trying to reach and using as the", "\n", "# position of the container.", "\n", "self", ".", "_targ_idx", "=", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_task.SetArticulatedObjectTask.success_js_state": [[53, 59], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "success_js_state", "(", "self", ")", "->", "float", ":", "\n", "        ", "\"\"\"\n        The success state of the articulated object desired joint.\n        \"\"\"", "\n", "return", "self", ".", "_config", ".", "SUCCESS_STATE", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_task.SetArticulatedObjectTask._gen_start_state": [[60, 63], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "_gen_start_state", "(", "self", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_task.SetArticulatedObjectTask._get_look_pos": [[64, 70], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "_get_look_pos", "(", "self", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        The point defining where the robot should face at the start of the\n        episode.\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_task.SetArticulatedObjectTask._get_spawn_region": [[71, 76], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "_get_spawn_region", "(", "self", ")", "->", "mn", ".", "Range2D", ":", "\n", "        ", "\"\"\"\n        The region on the ground the robot can be placed.\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_task.SetArticulatedObjectTask._sample_robot_start": [[77, 112], ["articulated_object_task.SetArticulatedObjectTask._get_spawn_region", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "articulated_object_task.SetArticulatedObjectTask._sim.safe_snap_point", "numpy.array", "numpy.array", "habitat.tasks.utils.get_angle", "magnum.Range2D.from_center.center", "magnum.Range2D.from_center", "numpy.random.uniform", "articulated_object_task.SetArticulatedObjectTask._get_look_pos", "T.transform_point", "T.transform_point", "numpy.cross", "magnum.Range2D.from_center.center", "magnum.Vector3", "magnum.Vector3", "magnum.Range2D.from_center.size"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_task.RearrangeCloseFridgeTaskV1._get_spawn_region", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.safe_snap_point", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.tasks.utils.get_angle", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_task.RearrangeCloseFridgeTaskV1._get_look_pos", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size"], ["", "def", "_sample_robot_start", "(", "self", ",", "T", ")", "->", "Tuple", "[", "float", ",", "np", ".", "ndarray", "]", ":", "\n", "        ", "\"\"\"\n        Returns the start face direction and the starting position of the robot.\n        \"\"\"", "\n", "spawn_region", "=", "self", ".", "_get_spawn_region", "(", ")", "\n", "\n", "if", "self", ".", "_config", ".", "SPAWN_REGION_SCALE", "==", "0.0", ":", "\n", "# No randomness in the base position spawn", "\n", "            ", "start_pos", "=", "spawn_region", ".", "center", "(", ")", "\n", "", "else", ":", "\n", "            ", "spawn_region", "=", "mn", ".", "Range2D", ".", "from_center", "(", "\n", "spawn_region", ".", "center", "(", ")", ",", "\n", "self", ".", "_config", ".", "SPAWN_REGION_SCALE", "*", "spawn_region", ".", "size", "(", ")", "/", "2", ",", "\n", ")", "\n", "\n", "start_pos", "=", "np", ".", "random", ".", "uniform", "(", "spawn_region", ".", "min", ",", "spawn_region", ".", "max", ")", "\n", "\n", "", "start_pos", "=", "np", ".", "array", "(", "[", "start_pos", "[", "0", "]", ",", "0.0", ",", "start_pos", "[", "1", "]", "]", ")", "\n", "targ_pos", "=", "np", ".", "array", "(", "self", ".", "_get_look_pos", "(", ")", ")", "\n", "\n", "# Transform to global coordinates", "\n", "start_pos", "=", "np", ".", "array", "(", "T", ".", "transform_point", "(", "mn", ".", "Vector3", "(", "*", "start_pos", ")", ")", ")", "\n", "start_pos", "=", "np", ".", "array", "(", "[", "start_pos", "[", "0", "]", ",", "0", ",", "start_pos", "[", "2", "]", "]", ")", "\n", "start_pos", "=", "self", ".", "_sim", ".", "safe_snap_point", "(", "start_pos", ")", "\n", "\n", "targ_pos", "=", "np", ".", "array", "(", "T", ".", "transform_point", "(", "mn", ".", "Vector3", "(", "*", "targ_pos", ")", ")", ")", "\n", "\n", "# Spawn the robot facing the look pos", "\n", "forward", "=", "np", ".", "array", "(", "[", "1.0", ",", "0", ",", "0", "]", ")", "\n", "rel_targ", "=", "targ_pos", "-", "start_pos", "\n", "angle_to_obj", "=", "get_angle", "(", "forward", "[", "[", "0", ",", "2", "]", "]", ",", "rel_targ", "[", "[", "0", ",", "2", "]", "]", ")", "\n", "if", "np", ".", "cross", "(", "forward", "[", "[", "0", ",", "2", "]", "]", ",", "rel_targ", "[", "[", "0", ",", "2", "]", "]", ")", ">", "0", ":", "\n", "            ", "angle_to_obj", "*=", "-", "1.0", "\n", "\n", "", "return", "angle_to_obj", ",", "start_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_task.SetArticulatedObjectTask.step": [[113, 115], ["super().step"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step"], ["", "def", "step", "(", "self", ",", "action", ":", "Dict", "[", "str", ",", "Any", "]", ",", "episode", ":", "Episode", ")", ":", "\n", "        ", "return", "super", "(", ")", ".", "step", "(", "action", ",", "episode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_task.SetArticulatedObjectTask._is_there_spawn_noise": [[116, 121], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "_is_there_spawn_noise", "(", "self", ")", ":", "\n", "        ", "return", "(", "\n", "self", ".", "_config", ".", "BASE_ANGLE_NOISE", "!=", "0.0", "\n", "or", "self", ".", "_config", ".", "SPAWN_REGION_SCALE", "!=", "0.0", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_task.SetArticulatedObjectTask.reset": [[123, 190], ["super().reset", "articulated_object_task.SetArticulatedObjectTask.get_use_marker", "articulated_object_task.SetArticulatedObjectTask.ao_parent.get_joint_motor_settings", "articulated_object_task.SetArticulatedObjectTask.ao_parent.update_joint_motor", "articulated_object_task.SetArticulatedObjectTask._disable_art_sleep", "range", "articulated_object_task.SetArticulatedObjectTask._sim.internal_step", "articulated_object_task.SetArticulatedObjectTask._reset_art_sleep", "articulated_object_task.SetArticulatedObjectTask._get_observations", "articulated_object_task.SetArticulatedObjectTask.get_current_transform", "articulated_object_task.SetArticulatedObjectTask._set_link_state", "articulated_object_task.SetArticulatedObjectTask._sample_robot_start", "numpy.random.normal", "robot_T.inverted().transform_point", "range", "articulated_object_task.SetArticulatedObjectTask._gen_start_state", "habitat.tasks.rearrange.utils.rearrange_logger.debug", "articulated_object_task.SetArticulatedObjectTask._sim.internal_step", "habitat.tasks.rearrange.utils.rearrange_collision", "robot_T.inverted"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask.get_use_marker", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_task.SetArticulatedObjectTask._disable_art_sleep", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.internal_step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_task.SetArticulatedObjectTask._reset_art_sleep", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_task.RearrangeTask._get_observations", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.marker_info.MarkerInfo.get_current_transform", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_task.SetArticulatedObjectTask._set_link_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_task.SetArticulatedObjectTask._sample_robot_start", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_task.RearrangeCloseFridgeTaskV1._gen_start_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.internal_step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.rearrange_collision"], ["", "def", "reset", "(", "self", ",", "episode", ":", "Episode", ")", ":", "\n", "        ", "super", "(", ")", ".", "reset", "(", "episode", ",", "fetch_observations", "=", "False", ")", "\n", "if", "self", ".", "_force_use_marker", "is", "not", "None", ":", "\n", "            ", "self", ".", "_use_marker", "=", "self", ".", "_force_use_marker", "\n", "\n", "", "marker", "=", "self", ".", "get_use_marker", "(", ")", "\n", "if", "self", ".", "_config", ".", "USE_MARKER_T", ":", "\n", "            ", "T", "=", "marker", ".", "get_current_transform", "(", ")", "\n", "", "else", ":", "\n", "            ", "ao", "=", "marker", ".", "ao_parent", "\n", "T", "=", "ao", ".", "transformation", "\n", "\n", "", "jms", "=", "marker", ".", "ao_parent", ".", "get_joint_motor_settings", "(", "marker", ".", "joint_idx", ")", "\n", "\n", "if", "self", ".", "_config", ".", "JOINT_MAX_IMPULSE", ">", "0", ":", "\n", "            ", "jms", ".", "velocity_target", "=", "0.0", "\n", "jms", ".", "max_impulse", "=", "self", ".", "_config", ".", "JOINT_MAX_IMPULSE", "\n", "", "marker", ".", "ao_parent", ".", "update_joint_motor", "(", "marker", ".", "joint_idx", ",", "jms", ")", "\n", "\n", "num_timeout", "=", "100", "\n", "self", ".", "_disable_art_sleep", "(", ")", "\n", "for", "_", "in", "range", "(", "num_timeout", ")", ":", "\n", "            ", "self", ".", "_set_link_state", "(", "self", ".", "_gen_start_state", "(", ")", ")", "\n", "\n", "angle_to_obj", ",", "base_pos", "=", "self", ".", "_sample_robot_start", "(", "T", ")", "\n", "\n", "noise", "=", "np", ".", "random", ".", "normal", "(", "0.0", ",", "self", ".", "_config", ".", "BASE_ANGLE_NOISE", ")", "\n", "self", ".", "_sim", ".", "robot", ".", "base_rot", "=", "angle_to_obj", "+", "noise", "\n", "self", ".", "_sim", ".", "robot", ".", "base_pos", "=", "base_pos", "\n", "\n", "robot_T", "=", "self", ".", "_sim", ".", "robot", ".", "base_transformation", "\n", "rel_targ_pos", "=", "robot_T", ".", "inverted", "(", ")", ".", "transform_point", "(", "\n", "marker", ".", "current_transform", ".", "translation", "\n", ")", "\n", "if", "not", "self", ".", "_is_there_spawn_noise", ":", "\n", "                ", "rearrange_logger", ".", "debug", "(", "\n", "\"No spawn noise, returning first found position\"", "\n", ")", "\n", "break", "\n", "\n", "", "eps", "=", "1e-2", "\n", "upper_bound", "=", "self", ".", "_sim", ".", "robot", ".", "params", ".", "ee_constraint", "[", ":", ",", "1", "]", "+", "eps", "\n", "is_within_bounds", "=", "(", "rel_targ_pos", "<", "upper_bound", ")", ".", "all", "(", ")", "\n", "if", "not", "is_within_bounds", ":", "\n", "                ", "continue", "\n", "\n", "", "did_collide", "=", "False", "\n", "for", "_", "in", "range", "(", "self", ".", "_config", ".", "SETTLE_STEPS", ")", ":", "\n", "                ", "self", ".", "_sim", ".", "internal_step", "(", "-", "1", ")", "\n", "did_collide", ",", "details", "=", "rearrange_collision", "(", "\n", "self", ".", "_sim", ",", "\n", "self", ".", "_config", ".", "COUNT_OBJ_COLLISIONS", ",", "\n", "ignore_base", "=", "False", ",", "\n", ")", "\n", "if", "did_collide", ":", "\n", "                    ", "break", "\n", "", "", "if", "not", "did_collide", ":", "\n", "                ", "break", "\n", "\n", "# Step so the updated art position evaluates", "\n", "", "", "self", ".", "_sim", ".", "internal_step", "(", "-", "1", ")", "\n", "self", ".", "_reset_art_sleep", "(", ")", "\n", "\n", "self", ".", "prev_dist_to_push", "=", "-", "1", "\n", "\n", "self", ".", "prev_snapped_marker_name", "=", "None", "\n", "return", "self", ".", "_get_observations", "(", "episode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_task.SetArticulatedObjectTask._disable_art_sleep": [[191, 199], ["articulated_object_task.SetArticulatedObjectTask.get_use_marker"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask.get_use_marker"], ["", "def", "_disable_art_sleep", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Disables the sleeping state of the articulated object. Use when setting\n        the articulated object joint states.\n        \"\"\"", "\n", "ao", "=", "self", ".", "get_use_marker", "(", ")", ".", "ao_parent", "\n", "self", ".", "_prev_awake", "=", "ao", ".", "awake", "\n", "ao", ".", "awake", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_task.SetArticulatedObjectTask._reset_art_sleep": [[200, 206], ["articulated_object_task.SetArticulatedObjectTask.get_use_marker"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask.get_use_marker"], ["", "def", "_reset_art_sleep", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Resets the sleeping state of the target articulated object.\n        \"\"\"", "\n", "ao", "=", "self", ".", "get_use_marker", "(", ")", ".", "ao_parent", "\n", "ao", ".", "awake", "=", "self", ".", "_prev_awake", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_task.SetArticulatedObjectTask._set_link_state": [[207, 213], ["articulated_object_task.SetArticulatedObjectTask.get_use_marker"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask.get_use_marker"], ["", "def", "_set_link_state", "(", "self", ",", "art_pos", ":", "np", ".", "ndarray", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Set the joint state of all the joints on the target articulated object.\n        \"\"\"", "\n", "ao", "=", "self", ".", "get_use_marker", "(", ")", ".", "ao_parent", "\n", "ao", ".", "joint_positions", "=", "art_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_task.RearrangeOpenDrawerTaskV1._get_spawn_region": [[217, 219], ["magnum.Range2D"], "methods", ["None"], ["    ", "def", "_get_spawn_region", "(", "self", ")", ":", "\n", "        ", "return", "mn", ".", "Range2D", "(", "[", "0.80", ",", "-", "0.35", "]", ",", "[", "0.95", ",", "0.35", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_task.RearrangeOpenDrawerTaskV1._get_look_pos": [[220, 222], ["None"], "methods", ["None"], ["", "def", "_get_look_pos", "(", "self", ")", ":", "\n", "        ", "return", "[", "0.0", ",", "0.0", ",", "0.0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_task.RearrangeOpenDrawerTaskV1._gen_start_state": [[223, 226], ["numpy.zeros"], "methods", ["None"], ["", "def", "_gen_start_state", "(", "self", ")", ":", "\n", "        ", "drawers", "=", "np", ".", "zeros", "(", "(", "8", ",", ")", ")", "\n", "return", "drawers", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_task.RearrangeOpenDrawerTaskV1.reset": [[227, 230], ["articulated_object_task.SetArticulatedObjectTask.reset"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset"], ["", "def", "reset", "(", "self", ",", "episode", ":", "Episode", ")", ":", "\n", "        ", "self", ".", "_use_marker", "=", "\"cab_push_point_5\"", "\n", "return", "super", "(", ")", ".", "reset", "(", "episode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_task.RearrangeOpenFridgeTaskV1._get_spawn_region": [[234, 236], ["magnum.Range2D"], "methods", ["None"], ["    ", "def", "_get_spawn_region", "(", "self", ")", ":", "\n", "        ", "return", "mn", ".", "Range2D", "(", "[", "0.833", ",", "-", "0.6", "]", ",", "[", "1.25", ",", "0.6", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_task.RearrangeOpenFridgeTaskV1._get_look_pos": [[237, 239], ["None"], "methods", ["None"], ["", "def", "_get_look_pos", "(", "self", ")", ":", "\n", "        ", "return", "[", "0.0", ",", "0.0", ",", "0.0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_task.RearrangeOpenFridgeTaskV1._gen_start_state": [[240, 242], ["numpy.zeros"], "methods", ["None"], ["", "def", "_gen_start_state", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "zeros", "(", "(", "2", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_task.RearrangeOpenFridgeTaskV1.reset": [[243, 246], ["articulated_object_task.SetArticulatedObjectTask.reset"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset"], ["", "def", "reset", "(", "self", ",", "episode", ":", "Episode", ")", ":", "\n", "        ", "self", ".", "_use_marker", "=", "\"fridge_push_point\"", "\n", "return", "super", "(", ")", ".", "reset", "(", "episode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_task.RearrangeCloseDrawerTaskV1._get_spawn_region": [[250, 254], ["magnum.Range2D"], "methods", ["None"], ["    ", "def", "_get_spawn_region", "(", "self", ")", ":", "\n", "        ", "back_x", "=", "0.8", "\n", "# How far back the robot should be from the drawer.", "\n", "return", "mn", ".", "Range2D", "(", "[", "back_x", ",", "-", "0.35", "]", ",", "[", "back_x", "+", "0.05", ",", "0.35", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_task.RearrangeCloseDrawerTaskV1._get_look_pos": [[255, 257], ["None"], "methods", ["None"], ["", "def", "_get_look_pos", "(", "self", ")", ":", "\n", "        ", "return", "[", "0.0", ",", "0.0", ",", "0.0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_task.RearrangeCloseDrawerTaskV1._gen_start_state": [[258, 264], ["numpy.zeros", "numpy.random.uniform", "articulated_object_task.RearrangeCloseDrawerTaskV1.get_use_marker"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask.get_use_marker"], ["", "def", "_gen_start_state", "(", "self", ")", ":", "\n", "        ", "targ_link", "=", "self", ".", "get_use_marker", "(", ")", ".", "joint_idx", "\n", "\n", "drawers", "=", "np", ".", "zeros", "(", "(", "8", ",", ")", ")", "\n", "drawers", "[", "targ_link", "]", "=", "np", ".", "random", ".", "uniform", "(", "0.4", ",", "0.5", ")", "\n", "return", "drawers", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_task.RearrangeCloseDrawerTaskV1.reset": [[265, 268], ["articulated_object_task.SetArticulatedObjectTask.reset"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset"], ["", "def", "reset", "(", "self", ",", "episode", ":", "Episode", ")", ":", "\n", "        ", "self", ".", "_use_marker", "=", "\"cab_push_point_5\"", "\n", "return", "super", "(", ")", ".", "reset", "(", "episode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_task.RearrangeCloseFridgeTaskV1._get_spawn_region": [[272, 274], ["magnum.Range2D"], "methods", ["None"], ["    ", "def", "_get_spawn_region", "(", "self", ")", ":", "\n", "        ", "return", "mn", ".", "Range2D", "(", "[", "0.833", ",", "-", "0.6", "]", ",", "[", "1.25", ",", "0.6", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_task.RearrangeCloseFridgeTaskV1._get_look_pos": [[275, 277], ["None"], "methods", ["None"], ["", "def", "_get_look_pos", "(", "self", ")", ":", "\n", "        ", "return", "[", "0.0", ",", "0.0", ",", "0.0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_task.RearrangeCloseFridgeTaskV1._gen_start_state": [[278, 280], ["numpy.array", "numpy.random.uniform"], "methods", ["None"], ["", "def", "_gen_start_state", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "0", ",", "np", ".", "random", ".", "uniform", "(", "np", ".", "pi", "/", "4", ",", "2", "*", "np", ".", "pi", "/", "3", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.articulated_object_task.RearrangeCloseFridgeTaskV1.reset": [[281, 284], ["articulated_object_task.SetArticulatedObjectTask.reset"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset"], ["", "def", "reset", "(", "self", ",", "episode", ":", "Episode", ")", ":", "\n", "        ", "self", ".", "_use_marker", "=", "\"fridge_push_point\"", "\n", "return", "super", "(", ")", ".", "reset", "(", "episode", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_task.DynNavRLEnv.__init__": [[59, 76], ["habitat.tasks.rearrange.rearrange_task.RearrangeTask.__init__", "dataset.config.DATA_PATH.format", "os.dirname", "habitat.tasks.rearrange.utils.CacheHelper", "nav_to_obj_task.DynNavRLEnv.cache.load", "[].split", "os.join", "dataset.config.DATA_PATH.format.split"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.load"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "config", ",", "dataset", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", "=", "config", ",", "*", "args", ",", "dataset", "=", "dataset", ",", "**", "kwargs", ")", "\n", "self", ".", "force_obj_to_idx", "=", "None", "\n", "self", ".", "force_recep_to_name", "=", "None", "\n", "self", ".", "_prev_measure", "=", "1.0", "\n", "\n", "data_path", "=", "dataset", ".", "config", ".", "DATA_PATH", ".", "format", "(", "split", "=", "dataset", ".", "config", ".", "SPLIT", ")", "\n", "fname", "=", "data_path", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "save_dir", "=", "osp", ".", "dirname", "(", "data_path", ")", "\n", "self", ".", "cache", "=", "CacheHelper", "(", "\n", "osp", ".", "join", "(", "save_dir", ",", "f\"{fname}_{config.TYPE}_start.pickle\"", ")", ",", "\n", "def_val", "=", "{", "}", ",", "\n", "verbose", "=", "False", ",", "\n", ")", "\n", "self", ".", "start_states", "=", "self", ".", "cache", ".", "load", "(", ")", "\n", "self", ".", "domain", "=", "None", "\n", "self", ".", "_nav_to_info", ":", "Optional", "[", "NavToInfo", "]", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_task.DynNavRLEnv.nav_to_obj_type": [[77, 80], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "nav_to_obj_type", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_nav_to_info", ".", "nav_to_obj_type", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_task.DynNavRLEnv.nav_to_task_name": [[81, 84], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "nav_to_task_name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_nav_to_info", ".", "nav_to_task_name", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_task.DynNavRLEnv.nav_target_pos": [[85, 88], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "nav_target_pos", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_nav_to_info", ".", "nav_target_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_task.DynNavRLEnv.nav_target_angle": [[89, 92], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "nav_target_angle", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_nav_to_info", ".", "nav_target_angle", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_task.DynNavRLEnv.set_args": [[93, 99], ["None"], "methods", ["None"], ["", "def", "set_args", "(", "self", ",", "obj", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "\"marker\"", "in", "kwargs", ":", "\n", "            ", "self", ".", "force_recep_to_name", "=", "kwargs", "[", "\"orig_applied_args\"", "]", "[", "\"marker\"", "]", "\n", "", "self", ".", "force_obj_to_idx", "=", "obj", "\n", "self", ".", "force_obj_to_name", "=", "kwargs", "[", "\"orig_applied_args\"", "]", "[", "\"obj\"", "]", "\n", "self", ".", "force_kwargs", "=", "kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_task.DynNavRLEnv._get_allowed_tasks": [[100, 133], ["nav_to_obj_task.DynNavRLEnv.domain.get_true_predicates", "collections.defaultdict", "nav_to_obj_task.DynNavRLEnv.domain.actions.values", "action.get_possible_actions", "habitat.tasks.rearrange.utils.rearrange_logger.debug", "nav_to_obj_task.DynNavRLEnv.domain.get_name_to_id_mapping", "habitat.tasks.rearrange.utils.rearrange_logger.debug", "allowed_actions[].append", "len"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.pddl_domain.PddlDomain.get_true_predicates", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.PddlAction.get_possible_actions", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.pddl_domain.PddlDomain.get_name_to_id_mapping"], ["", "def", "_get_allowed_tasks", "(", "\n", "self", ",", "filter_actions", ":", "Optional", "[", "List", "[", "str", "]", "]", "=", "None", "\n", ")", "->", "Dict", "[", "str", ",", "List", "[", "PddlAction", "]", "]", ":", "\n", "        ", "\"\"\"\n        :returns: Mapping the action name to the grounded instances of the action that are possible in the current state.\n        \"\"\"", "\n", "cur_preds", "=", "self", ".", "domain", ".", "get_true_predicates", "(", ")", "\n", "\n", "# Get all actions which can be actively applied.", "\n", "allowed_actions", "=", "defaultdict", "(", "list", ")", "\n", "for", "action", "in", "self", ".", "domain", ".", "actions", ".", "values", "(", ")", ":", "\n", "            ", "if", "(", "\n", "filter_actions", "is", "not", "None", "\n", "and", "action", ".", "name", "not", "in", "filter_actions", "\n", ")", ":", "\n", "                ", "continue", "\n", "", "if", "action", ".", "task", "==", "DYN_NAV_TASK_NAME", "or", "(", "\n", "len", "(", "self", ".", "_config", ".", "FILTER_NAV_TO_TASKS", ")", "!=", "0", "\n", "and", "action", ".", "name", "not", "in", "self", ".", "_config", ".", "FILTER_NAV_TO_TASKS", "\n", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "consistent_actions", "=", "action", ".", "get_possible_actions", "(", "\n", "cur_preds", ",", "self", ".", "domain", ".", "get_name_to_id_mapping", "(", ")", "\n", ")", "\n", "rearrange_logger", ".", "debug", "(", "\n", "f\"For {action.name} got consistent actions:\"", "\n", ")", "\n", "for", "action", "in", "consistent_actions", ":", "\n", "                ", "rearrange_logger", ".", "debug", "(", "f\"- {action}\"", ")", "\n", "allowed_actions", "[", "action", ".", "name", "]", ".", "append", "(", "action", ")", "\n", "\n", "", "", "return", "allowed_actions", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_task.DynNavRLEnv._get_nav_targ": [[134, 168], ["habitat.tasks.rearrange.utils.rearrange_logger.debug", "nav_to_obj_task.DynNavRLEnv.domain.get_task_match_for_name", "habitat.tasks.rearrange.utils.rearrange_logger.debug", "nav_to_obj_task.DynNavRLEnv._sim.capture_state", "habitat.tasks.rearrange.multi_task.task_creator_utils.create_task_object", "nav_to_obj_task.DynNavRLEnv._sim.set_state", "habitat.tasks.rearrange.multi_task.rearrange_pddl.search_for_id", "nav_to_obj_task.DynNavRLEnv._config.clone", "nav_to_obj_task.DynNavRLEnv.domain.get_name_to_id_mapping"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.pddl_domain.PddlDomain.get_task_match_for_name", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.capture_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.task_creator_utils.create_task_object", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.set_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.search_for_id", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.pddl_domain.PddlDomain.get_name_to_id_mapping"], ["", "def", "_get_nav_targ", "(", "\n", "self", ",", "task_name", ":", "str", ",", "task_args", ":", "Dict", "[", "str", ",", "Any", "]", ",", "episode", ":", "Episode", "\n", ")", "->", "Tuple", "[", "mn", ".", "Vector3", ",", "float", ",", "RearrangeObjectTypes", "]", ":", "\n", "        ", "rearrange_logger", ".", "debug", "(", "\n", "f\"Getting nav target for {task_name} with arguments {task_args}\"", "\n", ")", "\n", "# Get the config for this task", "\n", "action", "=", "self", ".", "domain", ".", "get_task_match_for_name", "(", "task_name", ")", "\n", "rearrange_logger", ".", "debug", "(", "\n", "f\"Corresponding action with task={action.task}, task_def={action.task_def}, config_task_args={action.config_task_args}\"", "\n", ")", "\n", "\n", "orig_state", "=", "self", ".", "_sim", ".", "capture_state", "(", "with_robot_js", "=", "True", ")", "\n", "create_task_object", "(", "\n", "action", ".", "task", ",", "\n", "action", ".", "task_def", ",", "\n", "self", ".", "_config", ".", "clone", "(", ")", ",", "\n", "self", ",", "\n", "self", ".", "_dataset", ",", "\n", "False", ",", "\n", "task_args", ",", "\n", "episode", ",", "\n", "action", ".", "config_task_args", ",", "\n", ")", "\n", "robo_pos", "=", "self", ".", "_sim", ".", "robot", ".", "base_pos", "\n", "heading_angle", "=", "self", ".", "_sim", ".", "robot", ".", "base_rot", "\n", "\n", "self", ".", "_sim", ".", "set_state", "(", "orig_state", ",", "set_hold", "=", "True", ")", "\n", "\n", "_", ",", "obj_to_type", "=", "search_for_id", "(", "\n", "task_args", "[", "\"orig_obj\"", "]", ",", "self", ".", "domain", ".", "get_name_to_id_mapping", "(", ")", "\n", ")", "\n", "\n", "return", "robo_pos", ",", "heading_angle", ",", "obj_to_type", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_task.DynNavRLEnv._generate_snap_to_obj": [[169, 173], ["nav_to_obj_task.DynNavRLEnv._sim.get_targets"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.get_targets"], ["", "def", "_generate_snap_to_obj", "(", "self", ")", "->", "int", ":", "\n", "# Snap the target object to the robot hand.", "\n", "        ", "target_idxs", ",", "_", "=", "self", ".", "_sim", ".", "get_targets", "(", ")", "\n", "return", "self", ".", "_sim", ".", "scene_obj_ids", "[", "target_idxs", "[", "0", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_task.DynNavRLEnv._generate_nav_start_goal": [[174, 207], ["nav_to_obj_task.DynNavRLEnv._get_allowed_tasks", "random.choice", "random.choice", "nav_to_obj_task.DynNavRLEnv._get_nav_targ", "habitat.tasks.rearrange.utils.rearrange_logger.debug", "numpy.array", "nav_to_obj_task.get_robo_start_pos", "nav_to_obj_task.NavToInfo", "random.random", "nav_to_obj_task.DynNavRLEnv._generate_snap_to_obj", "list", "nav_to_obj_task.DynNavRLEnv._sim.safe_snap_point", "nav_to_obj_task.DynNavRLEnv.keys", "float"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_task.DynNavRLEnv._get_allowed_tasks", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_task.DynNavRLEnv._get_nav_targ", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_task.get_robo_start_pos", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_task.DynNavRLEnv._generate_snap_to_obj", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.safe_snap_point"], ["", "def", "_generate_nav_start_goal", "(", "self", ",", "episode", ")", "->", "NavToInfo", ":", "\n", "        ", "start_hold_obj_idx", ":", "Optional", "[", "int", "]", "=", "None", "\n", "\n", "# Only change the scene if this skill is not running as a sub-task", "\n", "if", "random", ".", "random", "(", ")", "<", "self", ".", "_config", ".", "OBJECT_IN_HAND_SAMPLE_PROB", ":", "\n", "            ", "start_hold_obj_idx", "=", "self", ".", "_generate_snap_to_obj", "(", ")", "\n", "\n", "", "allowed_tasks", "=", "self", ".", "_get_allowed_tasks", "(", ")", "\n", "\n", "nav_to_task_name", "=", "random", ".", "choice", "(", "list", "(", "allowed_tasks", ".", "keys", "(", ")", ")", ")", "\n", "task", "=", "random", ".", "choice", "(", "allowed_tasks", "[", "nav_to_task_name", "]", ")", "\n", "\n", "target_pos", ",", "target_angle", ",", "obj_type", "=", "self", ".", "_get_nav_targ", "(", "\n", "nav_to_task_name", ",", "\n", "{", "\n", "**", "task", ".", "task_args", ",", "\n", "ADD_CACHE_KEY", ":", "\"nav\"", ",", "\n", "}", ",", "\n", "episode", ",", "\n", ")", "\n", "\n", "rearrange_logger", ".", "debug", "(", "f\"Got nav to skill {nav_to_task_name}\"", ")", "\n", "target_pos", "=", "np", ".", "array", "(", "self", ".", "_sim", ".", "safe_snap_point", "(", "target_pos", ")", ")", "\n", "\n", "start_pos", ",", "start_rot", "=", "get_robo_start_pos", "(", "self", ".", "_sim", ",", "target_pos", ")", "\n", "return", "NavToInfo", "(", "\n", "nav_target_pos", "=", "target_pos", ",", "\n", "nav_target_angle", "=", "float", "(", "target_angle", ")", ",", "\n", "nav_to_task_name", "=", "nav_to_task_name", ",", "\n", "nav_to_obj_type", "=", "obj_type", ",", "\n", "start_hold_obj_idx", "=", "start_hold_obj_idx", ",", "\n", "start_base_pos", "=", "start_pos", ",", "\n", "start_base_rot", "=", "start_rot", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_task.DynNavRLEnv._get_force_nav_start_info": [[209, 281], ["habitat.tasks.rearrange.utils.rearrange_logger.debug", "nav_to_obj_task.DynNavRLEnv.domain.get_name_to_id_mapping", "nav_to_obj_task.DynNavRLEnv.domain.get_matching_skills", "nav_to_obj_task.DynNavRLEnv._get_allowed_tasks", "nav_to_obj_task.DynNavRLEnv.values", "habitat.tasks.rearrange.utils.rearrange_logger.debug", "habitat.tasks.rearrange.utils.rearrange_logger.debug", "nav_to_obj_task.DynNavRLEnv._get_nav_targ", "nav_to_obj_task.NavToInfo", "habitat.tasks.rearrange.utils.rearrange_logger.debug", "habitat.tasks.rearrange.multi_task.rearrange_pddl.search_for_id", "habitat.tasks.rearrange.multi_task.rearrange_pddl.search_for_id", "habitat.tasks.rearrange.utils.rearrange_logger.debug", "len", "ValueError", "len", "ValueError", "all", "numpy.array", "float", "filtered_allowed_tasks.append", "nav_to_obj_task.DynNavRLEnv._sim.safe_snap_point", "orig_args.items", "assigned_args.get", "assigned_args.get"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.pddl_domain.PddlDomain.get_name_to_id_mapping", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.pddl_domain.PddlDomain.get_matching_skills", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_task.DynNavRLEnv._get_allowed_tasks", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_task.DynNavRLEnv._get_nav_targ", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.search_for_id", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.search_for_id", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.safe_snap_point", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get"], ["", "def", "_get_force_nav_start_info", "(", "self", ",", "episode", ":", "Episode", ")", "->", "NavToInfo", ":", "\n", "        ", "rearrange_logger", ".", "debug", "(", "\n", "f\"Navigation getting target for {self.force_obj_to_idx} with task arguments {self.force_kwargs}\"", "\n", ")", "\n", "name_to_id", "=", "self", ".", "domain", ".", "get_name_to_id_mapping", "(", ")", "\n", "\n", "if", "self", ".", "force_recep_to_name", "is", "not", "None", ":", "\n", "            ", "rearrange_logger", ".", "debug", "(", "\n", "f\"Forcing receptacle {self.force_recep_to_name}\"", "\n", ")", "\n", "_", ",", "entity_type", "=", "search_for_id", "(", "\n", "self", ".", "force_recep_to_name", ",", "name_to_id", "\n", ")", "\n", "use_name", "=", "self", ".", "force_recep_to_name", "\n", "", "else", ":", "\n", "            ", "_", ",", "entity_type", "=", "search_for_id", "(", "self", ".", "force_obj_to_name", ",", "name_to_id", ")", "\n", "use_name", "=", "self", ".", "force_obj_to_name", "\n", "rearrange_logger", ".", "debug", "(", "\n", "f\"Search object name {use_name} with type {entity_type}\"", "\n", ")", "\n", "\n", "", "matching_skills", "=", "self", ".", "domain", ".", "get_matching_skills", "(", "\n", "entity_type", ",", "use_name", "\n", ")", "\n", "\n", "allowed_tasks", "=", "self", ".", "_get_allowed_tasks", "(", "matching_skills", ")", "\n", "if", "len", "(", "allowed_tasks", ")", "==", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "f\"Got no allowed tasks {allowed_tasks} from {matching_skills}, {entity_type}, {use_name}\"", "\n", ")", "\n", "\n", "", "filtered_allowed_tasks", "=", "[", "]", "\n", "orig_args", "=", "self", ".", "force_kwargs", "[", "\"orig_applied_args\"", "]", "\n", "for", "sub_allowed_tasks", "in", "allowed_tasks", ".", "values", "(", ")", ":", "\n", "            ", "for", "task", "in", "sub_allowed_tasks", ":", "\n", "                ", "assigned_args", "=", "task", ".", "task_args", "\n", "\n", "# Check that `orig_args` is a SUBSET of `assigned_args` meaning", "\n", "# the keys and values match something in assigned args.", "\n", "is_orig_args_subset", "=", "all", "(", "\n", "[", "\n", "assigned_args", ".", "get", "(", "k", ",", "None", ")", "==", "v", "\n", "or", "assigned_args", ".", "get", "(", "f\"orig_{k}\"", ",", "None", ")", "==", "v", "\n", "for", "k", ",", "v", "in", "orig_args", ".", "items", "(", ")", "\n", "]", "\n", ")", "\n", "if", "is_orig_args_subset", ":", "\n", "                    ", "filtered_allowed_tasks", ".", "append", "(", "task", ")", "\n", "\n", "", "", "", "rearrange_logger", ".", "debug", "(", "f\"Got allowed tasks {filtered_allowed_tasks}\"", ")", "\n", "\n", "if", "len", "(", "filtered_allowed_tasks", ")", "==", "0", ":", "\n", "            ", "allowed_tasks_str", "=", "(", "\n", "\"\"", ".", "join", "(", "[", "\"\\n   - \"", "+", "x", "for", "x", "in", "allowed_tasks", "]", ")", "+", "\"\\n\"", "\n", ")", "\n", "raise", "ValueError", "(", "\n", "f\"Got no tasks out of {allowed_tasks_str}. With entity_type={entity_type}, use_name={use_name} force kwargs={self.force_kwargs}\"", "\n", ")", "\n", "", "nav_to_task", "=", "filtered_allowed_tasks", "[", "0", "]", "\n", "\n", "rearrange_logger", ".", "debug", "(", "\n", "f\"Navigating to {nav_to_task.name} with arguments {nav_to_task.task_args}\"", "\n", ")", "\n", "\n", "targ_pos", ",", "nav_target_angle", ",", "obj_type", "=", "self", ".", "_get_nav_targ", "(", "\n", "nav_to_task", ".", "name", ",", "nav_to_task", ".", "task_args", ",", "episode", "\n", ")", "\n", "return", "NavToInfo", "(", "\n", "nav_target_pos", "=", "np", ".", "array", "(", "self", ".", "_sim", ".", "safe_snap_point", "(", "targ_pos", ")", ")", ",", "\n", "nav_target_angle", "=", "float", "(", "nav_target_angle", ")", ",", "\n", "nav_to_task_name", "=", "nav_to_task", ".", "name", ",", "\n", "nav_to_obj_type", "=", "obj_type", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_task.DynNavRLEnv.reset": [[283, 394], ["super().reset", "habitat.tasks.rearrange.utils.rearrange_logger.debug", "habitat.tasks.rearrange.utils.rearrange_logger.debug", "nav_to_obj_task.DynNavRLEnv._get_observations", "habitat.tasks.rearrange.multi_task.pddl_domain.PddlDomain", "nav_to_obj_task.DynNavRLEnv.domain.reset", "sim.pathfinder.is_navigable", "habitat.tasks.rearrange.utils.rearrange_logger.error", "sim.visualize_position", "habitat.tasks.rearrange.utils.rearrange_logger.debug", "nav_to_obj_task.DynNavRLEnv._get_force_nav_start_info", "nav_to_obj_task.DynNavRLEnv._generate_nav_start_goal", "habitat.tasks.rearrange.utils.rearrange_logger.debug", "nav_to_obj_task.DynNavRLEnv._sim.grasp_mgr.snap_to_obj", "isinstance", "habitat.tasks.rearrange.utils.rearrange_logger.warning", "nav_to_obj_task.DynNavRLEnv.cache.save", "habitat.tasks.rearrange.utils.rearrange_logger.debug", "habitat.tasks.rearrange.utils.rearrange_logger.warning", "habitat.tasks.rearrange.utils.rearrange_logger.debug", "nav_to_obj_task.DynNavRLEnv._generate_snap_to_obj", "nav_to_obj_task.DynNavRLEnv.cache.save", "habitat.tasks.rearrange.utils.rearrange_logger.debug", "ValueError", "isinstance"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_task.RearrangeTask._get_observations", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.is_navigable", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.visualize_position", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_task.DynNavRLEnv._get_force_nav_start_info", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_task.DynNavRLEnv._generate_nav_start_goal", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_grasp_manager.RearrangeGraspManager.snap_to_obj", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.save", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_task.DynNavRLEnv._generate_snap_to_obj", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.save"], ["", "def", "reset", "(", "self", ",", "episode", ":", "Episode", ")", ":", "\n", "        ", "sim", "=", "self", ".", "_sim", "\n", "super", "(", ")", ".", "reset", "(", "episode", ",", "fetch_observations", "=", "False", ")", "\n", "rearrange_logger", ".", "debug", "(", "\"Resetting navigation task\"", ")", "\n", "\n", "if", "self", ".", "domain", "is", "None", ":", "\n", "            ", "self", ".", "domain", "=", "PddlDomain", "(", "\n", "self", ".", "_config", ".", "PDDL_DOMAIN_DEF", ",", "\n", "self", ".", "_dataset", ",", "\n", "self", ".", "_config", ",", "\n", "self", ".", "_sim", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "domain", ".", "reset", "(", ")", "\n", "\n", "", "episode_id", "=", "sim", ".", "ep_info", "[", "\"episode_id\"", "]", "\n", "\n", "if", "self", ".", "force_obj_to_idx", "is", "not", "None", ":", "\n", "            ", "full_key", "=", "(", "\n", "f\"{episode_id}_{self.force_obj_to_idx}_{self.force_kwargs}\"", "\n", ")", "\n", "if", "(", "\n", "full_key", "in", "self", ".", "start_states", "\n", "and", "not", "self", ".", "_config", ".", "FORCE_REGENERATE", "\n", ")", ":", "\n", "                ", "self", ".", "_nav_to_info", "=", "self", ".", "start_states", "[", "full_key", "]", "\n", "rearrange_logger", ".", "debug", "(", "\n", "f\"Forcing episode, loaded `{full_key}` from cache {self.cache.cache_id}.\"", "\n", ")", "\n", "if", "not", "isinstance", "(", "self", ".", "_nav_to_info", ",", "NavToInfo", ")", ":", "\n", "                    ", "rearrange_logger", ".", "warning", "(", "\n", "f\"Incorrect cache saved to file {self._nav_to_info}. Regenerating now.\"", "\n", ")", "\n", "self", ".", "_nav_to_info", "=", "None", "\n", "\n", "", "", "if", "self", ".", "_nav_to_info", "is", "None", ":", "\n", "                ", "self", ".", "_nav_to_info", "=", "self", ".", "_get_force_nav_start_info", "(", "episode", ")", "\n", "\n", "self", ".", "start_states", "[", "full_key", "]", "=", "self", ".", "_nav_to_info", "\n", "if", "self", ".", "_config", ".", "SHOULD_SAVE_TO_CACHE", ":", "\n", "                    ", "self", ".", "cache", ".", "save", "(", "self", ".", "start_states", ")", "\n", "rearrange_logger", ".", "debug", "(", "\n", "f\"Forcing episode, saved key `{full_key}` to cache {self.cache.cache_id}.\"", "\n", ")", "\n", "", "", "", "else", ":", "\n", "            ", "if", "(", "\n", "episode_id", "in", "self", ".", "start_states", "\n", "and", "not", "self", ".", "_config", ".", "FORCE_REGENERATE", "\n", ")", ":", "\n", "                ", "self", ".", "_nav_to_info", "=", "self", ".", "start_states", "[", "episode_id", "]", "\n", "\n", "if", "(", "\n", "not", "isinstance", "(", "self", ".", "_nav_to_info", ",", "NavToInfo", ")", "\n", "or", "self", ".", "_nav_to_info", ".", "start_base_pos", "is", "None", "\n", "or", "self", ".", "_nav_to_info", ".", "start_base_rot", "is", "None", "\n", ")", ":", "\n", "                    ", "rearrange_logger", ".", "warning", "(", "\n", "f\"Incorrect cache saved to file {self._nav_to_info}. Regenerating now.\"", "\n", ")", "\n", "self", ".", "_nav_to_info", "=", "None", "\n", "", "else", ":", "\n", "                    ", "rearrange_logger", ".", "debug", "(", "\n", "f\"Loaded episode from cache {self.cache.cache_id}.\"", "\n", ")", "\n", "\n", "", "if", "(", "\n", "self", ".", "_nav_to_info", "is", "not", "None", "\n", "and", "self", ".", "_nav_to_info", ".", "start_hold_obj_idx", "is", "not", "None", "\n", ")", ":", "\n", "# The object to hold was generated from stale object IDs.", "\n", "# Reselect a new object to hold.", "\n", "                    ", "self", ".", "_nav_to_info", ".", "start_hold_obj_idx", "=", "(", "\n", "self", ".", "_generate_snap_to_obj", "(", ")", "\n", ")", "\n", "\n", "", "", "if", "self", ".", "_nav_to_info", "is", "None", ":", "\n", "                ", "self", ".", "_nav_to_info", "=", "self", ".", "_generate_nav_start_goal", "(", "episode", ")", "\n", "self", ".", "start_states", "[", "episode_id", "]", "=", "self", ".", "_nav_to_info", "\n", "if", "self", ".", "_config", ".", "SHOULD_SAVE_TO_CACHE", ":", "\n", "                    ", "self", ".", "cache", ".", "save", "(", "self", ".", "start_states", ")", "\n", "rearrange_logger", ".", "debug", "(", "\n", "f\"Saved episode to cache {self.cache.cache_id}.\"", "\n", ")", "\n", "", "", "sim", ".", "robot", ".", "base_pos", "=", "self", ".", "_nav_to_info", ".", "start_base_pos", "\n", "sim", ".", "robot", ".", "base_rot", "=", "self", ".", "_nav_to_info", ".", "start_base_rot", "\n", "if", "self", ".", "_nav_to_info", ".", "start_hold_obj_idx", "is", "not", "None", ":", "\n", "                ", "if", "self", ".", "_sim", ".", "grasp_mgr", ".", "is_grasped", ":", "\n", "                    ", "raise", "ValueError", "(", "\n", "f\"Attempting to grasp {self._nav_to_info.start_hold_obj_idx} even though object is already grasped\"", "\n", ")", "\n", "", "rearrange_logger", ".", "debug", "(", "\n", "f\"Forcing to grasp object {self._nav_to_info.start_hold_obj_idx}\"", "\n", ")", "\n", "self", ".", "_sim", ".", "grasp_mgr", ".", "snap_to_obj", "(", "\n", "self", ".", "_nav_to_info", ".", "start_hold_obj_idx", ",", "force", "=", "True", "\n", ")", "\n", "\n", "", "", "rearrange_logger", ".", "debug", "(", "f\"Got nav to info {self._nav_to_info}\"", ")", "\n", "\n", "if", "not", "sim", ".", "pathfinder", ".", "is_navigable", "(", "self", ".", "_nav_to_info", ".", "nav_target_pos", ")", ":", "\n", "            ", "rearrange_logger", ".", "error", "(", "\"Goal is not navigable\"", ")", "\n", "\n", "", "if", "self", ".", "_sim", ".", "habitat_config", ".", "DEBUG_RENDER", ":", "\n", "# Visualize the position the agent is navigating to.", "\n", "            ", "sim", ".", "viz_ids", "[", "\"nav_targ_pos\"", "]", "=", "sim", ".", "visualize_position", "(", "\n", "self", ".", "_nav_to_info", ".", "nav_target_pos", ",", "\n", "sim", ".", "viz_ids", "[", "\"nav_targ_pos\"", "]", ",", "\n", "r", "=", "0.2", ",", "\n", ")", "\n", "\n", "", "return", "self", ".", "_get_observations", "(", "episode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sub_tasks.nav_to_obj_task.get_robo_start_pos": [[396, 409], ["sim.capture_state", "sim.set_robot_base_to_random_point", "sim.set_state"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.capture_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.set_robot_base_to_random_point", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.set_state"], ["", "", "def", "get_robo_start_pos", "(", "\n", "sim", ",", "nav_targ_pos", ":", "mn", ".", "Vector3", "\n", ")", "->", "Tuple", "[", "np", ".", "ndarray", ",", "float", "]", ":", "\n", "    ", "orig_state", "=", "sim", ".", "capture_state", "(", ")", "\n", "\n", "start_pos", ",", "start_rot", "=", "sim", ".", "set_robot_base_to_random_point", "(", "\n", "max_attempts", "=", "1000", "\n", ")", "\n", "\n", "# Reset everything except for the robot state.", "\n", "orig_state", "[", "\"robot_T\"", "]", "=", "None", "\n", "sim", ".", "set_state", "(", "orig_state", ")", "\n", "return", "start_pos", ",", "start_rot", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_sensors.MoveObjectsReward._get_uuid": [[26, 29], ["None"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "_get_uuid", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "MoveObjectsReward", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_sensors.MoveObjectsReward.__init__": [[30, 33], ["habitat.tasks.rearrange.rearrange_sensors.RearrangeReward.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_cur_rearrange_step", "=", "0", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_sensors.MoveObjectsReward.reset_metric": [[34, 60], ["task.measurements.check_measure_dependencies", "task.measurements.measures[].get_metric", "task.measurements.measures[].get_metric", "composite_sensors.MoveObjectsReward.update_metric"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measurements.check_measure_dependencies", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.get_metric", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.get_metric", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.update_metric"], ["", "def", "reset_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_cur_rearrange_step", "=", "0", "\n", "self", ".", "_prev_holding_obj", "=", "False", "\n", "self", ".", "_did_give_pick_reward", "=", "{", "}", "\n", "task", ".", "measurements", ".", "check_measure_dependencies", "(", "\n", "self", ".", "uuid", ",", "\n", "[", "\n", "ObjectToGoalDistance", ".", "cls_uuid", ",", "\n", "EndEffectorToObjectDistance", ".", "cls_uuid", ",", "\n", "]", ",", "\n", ")", "\n", "\n", "to_goal", "=", "task", ".", "measurements", ".", "measures", "[", "\n", "ObjectToGoalDistance", ".", "cls_uuid", "\n", "]", ".", "get_metric", "(", ")", "\n", "to_obj", "=", "task", ".", "measurements", ".", "measures", "[", "\n", "EndEffectorToObjectDistance", ".", "cls_uuid", "\n", "]", ".", "get_metric", "(", ")", "\n", "self", ".", "_prev_measures", "=", "(", "to_obj", ",", "to_goal", ")", "\n", "\n", "self", ".", "update_metric", "(", "\n", "*", "args", ",", "\n", "episode", "=", "episode", ",", "\n", "task", "=", "task", ",", "\n", "observations", "=", "observations", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_sensors.MoveObjectsReward.update_metric": [[62, 117], ["super().update_metric", "composite_sensors.MoveObjectsReward._sim.get_targets", "str", "len", "task.measurements.measures[].get_metric", "task.measurements.measures[].get_metric", "min"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.update_metric", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.get_targets", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.get_metric", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.get_metric"], ["", "def", "update_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "update_metric", "(", "\n", "*", "args", ",", "\n", "episode", "=", "episode", ",", "\n", "task", "=", "task", ",", "\n", "observations", "=", "observations", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "idxs", ",", "_", "=", "self", ".", "_sim", ".", "get_targets", "(", ")", "\n", "targ_obj_idx", "=", "idxs", "[", "self", ".", "_cur_rearrange_step", "]", "\n", "abs_targ_obj_idx", "=", "self", ".", "_sim", ".", "scene_obj_ids", "[", "targ_obj_idx", "]", "\n", "targ_obj_idx", "=", "str", "(", "targ_obj_idx", ")", "\n", "num_targs", "=", "len", "(", "idxs", ")", "\n", "\n", "to_goal", "=", "task", ".", "measurements", ".", "measures", "[", "\n", "ObjectToGoalDistance", ".", "cls_uuid", "\n", "]", ".", "get_metric", "(", ")", "\n", "to_obj", "=", "task", ".", "measurements", ".", "measures", "[", "\n", "EndEffectorToObjectDistance", ".", "cls_uuid", "\n", "]", ".", "get_metric", "(", ")", "\n", "\n", "is_holding_obj", "=", "self", ".", "_sim", ".", "grasp_mgr", ".", "snap_idx", "==", "abs_targ_obj_idx", "\n", "if", "is_holding_obj", ":", "\n", "            ", "dist", "=", "to_goal", "[", "targ_obj_idx", "]", "\n", "dist_diff", "=", "(", "\n", "self", ".", "_prev_measures", "[", "1", "]", "[", "targ_obj_idx", "]", "-", "to_goal", "[", "targ_obj_idx", "]", "\n", ")", "\n", "", "else", ":", "\n", "            ", "dist", "=", "to_obj", "[", "targ_obj_idx", "]", "\n", "dist_diff", "=", "(", "\n", "self", ".", "_prev_measures", "[", "0", "]", "[", "targ_obj_idx", "]", "-", "to_obj", "[", "targ_obj_idx", "]", "\n", ")", "\n", "\n", "", "if", "(", "\n", "is_holding_obj", "\n", "and", "not", "self", ".", "_prev_holding_obj", "\n", "and", "self", ".", "_cur_rearrange_step", "not", "in", "self", ".", "_did_give_pick_reward", "\n", ")", ":", "\n", "            ", "self", ".", "_metric", "+=", "self", ".", "_config", ".", "PICK_REWARD", "\n", "self", ".", "_did_give_pick_reward", "[", "self", ".", "_cur_rearrange_step", "]", "=", "True", "\n", "\n", "", "if", "(", "\n", "dist", "<", "self", ".", "_config", ".", "SUCCESS_DIST", "\n", "and", "not", "is_holding_obj", "\n", "and", "self", ".", "_cur_rearrange_step", "<", "num_targs", "\n", ")", ":", "\n", "            ", "self", ".", "_metric", "+=", "self", ".", "_config", ".", "SINGLE_REARRANGE_REWARD", "\n", "self", ".", "_cur_rearrange_step", "+=", "1", "\n", "self", ".", "_cur_rearrange_step", "=", "min", "(", "\n", "self", ".", "_cur_rearrange_step", ",", "num_targs", "-", "1", "\n", ")", "\n", "\n", "", "self", ".", "_metric", "+=", "self", ".", "_config", ".", "DIST_REWARD", "*", "dist_diff", "\n", "self", ".", "_prev_measures", "=", "(", "to_obj", ",", "to_goal", ")", "\n", "self", ".", "_prev_holding_obj", "=", "is_holding_obj", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_sensors.CompositeReward._get_uuid": [[127, 130], ["None"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "_get_uuid", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "CompositeReward", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_sensors.CompositeReward.__init__": [[131, 136], ["habitat.core.embodied_task.Measure.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["", "def", "__init__", "(", "self", ",", "sim", ",", "config", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "_sim", "=", "sim", "\n", "self", ".", "_config", "=", "config", "\n", "self", ".", "_prev_node_idx", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_sensors.CompositeReward.reset_metric": [[137, 149], ["task.measurements.check_measure_dependencies", "composite_sensors.CompositeReward.update_metric"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measurements.check_measure_dependencies", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.update_metric"], ["", "def", "reset_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "task", ".", "measurements", ".", "check_measure_dependencies", "(", "\n", "self", ".", "uuid", ",", "\n", "[", "CompositeNodeIdx", ".", "cls_uuid", "]", ",", "\n", ")", "\n", "\n", "self", ".", "update_metric", "(", "\n", "*", "args", ",", "\n", "episode", "=", "episode", ",", "\n", "task", "=", "task", ",", "\n", "observations", "=", "observations", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_sensors.CompositeReward.update_metric": [[151, 176], ["task.measurements.measures[].get_metric", "node_measure.get_metric", "ValueError", "task.get_inferrred_node_task", "list", "cur_task_cfg.keys"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.get_metric", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.get_metric", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask.get_inferrred_node_task"], ["", "def", "update_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_metric", "=", "0.0", "\n", "node_measure", "=", "task", ".", "measurements", ".", "measures", "[", "CompositeNodeIdx", ".", "cls_uuid", "]", "\n", "\n", "node_idx", "=", "node_measure", ".", "get_metric", "(", ")", "[", "\"node_idx\"", "]", "\n", "if", "self", ".", "_prev_node_idx", "is", "None", ":", "\n", "            ", "self", ".", "_prev_node_idx", "=", "node_idx", "\n", "", "elif", "node_idx", ">", "self", ".", "_prev_node_idx", ":", "\n", "            ", "self", ".", "_metric", "+=", "self", ".", "_config", ".", "STAGE_COMPLETE_REWARD", "\n", "\n", "", "if", "task", ".", "forced_node_task", "is", "None", ":", "\n", "            ", "cur_task_cfg", "=", "task", ".", "get_inferrred_node_task", "(", ")", ".", "_config", "\n", "", "else", ":", "\n", "            ", "cur_task_cfg", "=", "task", ".", "forced_node_task", ".", "_config", "\n", "\n", "", "if", "\"REWARD_MEASURE\"", "not", "in", "cur_task_cfg", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "f\"Cannot find REWARD_MEASURE key in {list(cur_task_cfg.keys())}\"", "\n", ")", "\n", "", "cur_task_reward", "=", "task", ".", "measurements", ".", "measures", "[", "\n", "cur_task_cfg", ".", "REWARD_MEASURE", "\n", "]", ".", "get_metric", "(", ")", "\n", "self", ".", "_metric", "+=", "cur_task_reward", "\n", "\n", "self", ".", "_prev_node_idx", "=", "node_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_sensors.DoesWantTerminate._get_uuid": [[182, 185], ["None"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "_get_uuid", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "DoesWantTerminate", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_sensors.DoesWantTerminate.reset_metric": [[186, 188], ["composite_sensors.DoesWantTerminate.update_metric"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.update_metric"], ["", "def", "reset_metric", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "update_metric", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_sensors.DoesWantTerminate.update_metric": [[189, 191], ["None"], "methods", ["None"], ["", "def", "update_metric", "(", "self", ",", "*", "args", ",", "task", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_metric", "=", "task", ".", "actions", "[", "\"REARRANGE_STOP\"", "]", ".", "does_want_terminate", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_sensors.CompositeBadCalledTerminate._get_uuid": [[197, 200], ["None"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "_get_uuid", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "CompositeBadCalledTerminate", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_sensors.CompositeBadCalledTerminate.reset_metric": [[201, 207], ["task.measurements.check_measure_dependencies", "composite_sensors.CompositeBadCalledTerminate.update_metric"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measurements.check_measure_dependencies", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.update_metric"], ["", "def", "reset_metric", "(", "self", ",", "*", "args", ",", "task", ",", "**", "kwargs", ")", ":", "\n", "        ", "task", ".", "measurements", ".", "check_measure_dependencies", "(", "\n", "self", ".", "uuid", ",", "\n", "[", "DoesWantTerminate", ".", "cls_uuid", ",", "CompositeSuccess", ".", "cls_uuid", "]", ",", "\n", ")", "\n", "self", ".", "update_metric", "(", "*", "args", ",", "task", "=", "task", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_sensors.CompositeBadCalledTerminate.update_metric": [[208, 217], ["task.measurements.measures[].get_metric", "task.measurements.measures[].get_metric"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.get_metric", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.get_metric"], ["", "def", "update_metric", "(", "self", ",", "*", "args", ",", "task", ",", "**", "kwargs", ")", ":", "\n", "        ", "does_action_want_stop", "=", "task", ".", "measurements", ".", "measures", "[", "\n", "DoesWantTerminate", ".", "cls_uuid", "\n", "]", ".", "get_metric", "(", ")", "\n", "is_succ", "=", "task", ".", "measurements", ".", "measures", "[", "\n", "CompositeSuccess", ".", "cls_uuid", "\n", "]", ".", "get_metric", "(", ")", "\n", "\n", "self", ".", "_metric", "=", "(", "not", "is_succ", ")", "and", "does_action_want_stop", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_sensors.CompositeSuccess.__init__": [[227, 231], ["habitat.core.embodied_task.Measure.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "sim", ",", "config", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "_sim", "=", "sim", "\n", "self", ".", "_config", "=", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_sensors.CompositeSuccess._get_uuid": [[232, 235], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_get_uuid", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "CompositeSuccess", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_sensors.CompositeSuccess.reset_metric": [[236, 242], ["task.measurements.check_measure_dependencies", "composite_sensors.CompositeSuccess.update_metric"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measurements.check_measure_dependencies", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.update_metric"], ["", "def", "reset_metric", "(", "self", ",", "*", "args", ",", "task", ",", "**", "kwargs", ")", ":", "\n", "        ", "task", ".", "measurements", ".", "check_measure_dependencies", "(", "\n", "self", ".", "uuid", ",", "\n", "[", "DoesWantTerminate", ".", "cls_uuid", "]", ",", "\n", ")", "\n", "self", ".", "update_metric", "(", "*", "args", ",", "task", "=", "task", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_sensors.CompositeSuccess.update_metric": [[243, 250], ["task.measurements.measures[].get_metric", "task.is_goal_state_satisfied"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.get_metric", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask.is_goal_state_satisfied"], ["", "def", "update_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "does_action_want_stop", "=", "task", ".", "measurements", ".", "measures", "[", "\n", "DoesWantTerminate", ".", "cls_uuid", "\n", "]", ".", "get_metric", "(", ")", "\n", "self", ".", "_metric", "=", "task", ".", "is_goal_state_satisfied", "(", ")", "and", "does_action_want_stop", "\n", "if", "does_action_want_stop", ":", "\n", "            ", "task", ".", "should_end", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_sensors.CompositeNodeIdx.__init__": [[266, 271], ["habitat.core.embodied_task.Measure.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "sim", ",", "config", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "_sim", "=", "sim", "\n", "self", ".", "_config", "=", "config", "\n", "self", ".", "_stage_succ", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_sensors.CompositeNodeIdx._get_uuid": [[272, 275], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_get_uuid", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "CompositeNodeIdx", ".", "cls_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_sensors.CompositeNodeIdx.reset_metric": [[276, 284], ["composite_sensors.CompositeNodeIdx.update_metric"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.update_metric"], ["", "def", "reset_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_stage_succ", "=", "[", "]", "\n", "self", ".", "update_metric", "(", "\n", "*", "args", ",", "\n", "episode", "=", "episode", ",", "\n", "task", "=", "task", ",", "\n", "observations", "=", "observations", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_sensors.CompositeNodeIdx.update_metric": [[286, 313], ["composite_sensors.CompositeNodeIdx._update_info_stage_succ", "task.measurements.measures[].get_metric", "task.get_inferred_node_idx", "range", "task.get_inferrred_node_task", "ValueError", "task.increment_inferred_solution_idx", "habitat.tasks.rearrange.utils.rearrange_logger.debug", "task.get_inferred_node_idx", "task.get_inferrred_node_task"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_sensors.CompositeNodeIdx._update_info_stage_succ", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.get_metric", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask.get_inferred_node_idx", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask.get_inferrred_node_task", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask.increment_inferred_solution_idx", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask.get_inferred_node_idx", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask.get_inferrred_node_task"], ["", "def", "update_metric", "(", "self", ",", "*", "args", ",", "episode", ",", "task", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_metric", "=", "{", "}", "\n", "if", "task", ".", "forced_node_task", "is", "None", ":", "\n", "            ", "inf_cur_task_cfg", "=", "task", ".", "get_inferrred_node_task", "(", ")", ".", "_config", "\n", "if", "\"SUCCESS_MEASURE\"", "not", "in", "inf_cur_task_cfg", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "f\"SUCCESS_MEASURE key not found in config: {inf_cur_task_cfg}\"", "\n", ")", "\n", "\n", "", "is_succ", "=", "task", ".", "measurements", ".", "measures", "[", "\n", "inf_cur_task_cfg", ".", "SUCCESS_MEASURE", "\n", "]", ".", "get_metric", "(", ")", "\n", "if", "is_succ", ":", "\n", "                ", "task", ".", "increment_inferred_solution_idx", "(", "episode", ")", "\n", "rearrange_logger", ".", "debug", "(", "\n", "f\"Completed {inf_cur_task_cfg.TYPE}, incremented node to {task.get_inferrred_node_task()}\"", "\n", ")", "\n", "\n", "", "node_idx", "=", "task", ".", "get_inferred_node_idx", "(", ")", "\n", "for", "i", "in", "range", "(", "task", ".", "num_solution_subtasks", ")", ":", "\n", "                ", "self", ".", "_metric", "[", "f\"reached_{i}\"", "]", "=", "(", "\n", "task", ".", "get_inferred_node_idx", "(", ")", ">=", "i", "\n", ")", "\n", "", "", "else", ":", "\n", "            ", "node_idx", "=", "task", ".", "forced_node_task_idx", "\n", "", "self", ".", "_metric", "[", "\"node_idx\"", "]", "=", "node_idx", "\n", "self", ".", "_update_info_stage_succ", "(", "task", ",", "self", ".", "_metric", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_sensors.CompositeNodeIdx._update_info_stage_succ": [[314, 326], ["stage_goals.items", "task.are_predicates_satisfied", "composite_sensors.CompositeNodeIdx._stage_succ.append"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask.are_predicates_satisfied"], ["", "def", "_update_info_stage_succ", "(", "self", ",", "task", ",", "info", ")", ":", "\n", "        ", "stage_goals", "=", "task", ".", "stage_goals", "\n", "for", "k", ",", "preds", "in", "stage_goals", ".", "items", "(", ")", ":", "\n", "            ", "succ_k", "=", "f\"{k}_success\"", "\n", "if", "k", "in", "self", ".", "_stage_succ", ":", "\n", "                ", "info", "[", "succ_k", "]", "=", "1.0", "\n", "", "else", ":", "\n", "                ", "if", "task", ".", "are_predicates_satisfied", "(", "preds", ")", ":", "\n", "                    ", "info", "[", "succ_k", "]", "=", "1.0", "\n", "self", ".", "_stage_succ", ".", "append", "(", "k", ")", "\n", "", "else", ":", "\n", "                    ", "info", "[", "succ_k", "]", "=", "0.0", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.pddl_domain.PddlDomain.__init__": [[38, 61], ["pddl_domain.PddlDomain._create_action_to_entity_mapping", "pddl_domain.PddlDomain.reset", "open", "yaml.safe_load", "habitat.tasks.rearrange.multi_task.rearrange_pddl.Predicate", "pddl_domain.PddlDomain.predicates.append"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.pddl_domain.PddlDomain._create_action_to_entity_mapping", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset"], ["def", "__init__", "(", "\n", "self", ",", "\n", "load_file_path", ":", "str", ",", "\n", "dataset", ":", "\"RearrangeDatasetV0\"", ",", "\n", "cur_task_config", ":", "Config", ",", "\n", "sim", ":", "RearrangeSim", ",", "\n", ")", ":", "\n", "        ", "with", "open", "(", "load_file_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "self", ".", "domain_def", "=", "yaml", ".", "safe_load", "(", "f", ")", "\n", "", "self", ".", "_create_action_to_entity_mapping", "(", ")", "\n", "\n", "self", ".", "_sim", "=", "sim", "\n", "\n", "self", ".", "predicates", ":", "List", "[", "Predicate", "]", "=", "[", "]", "\n", "for", "pred_d", "in", "self", ".", "domain_def", "[", "\"predicates\"", "]", ":", "\n", "            ", "pred", "=", "Predicate", "(", "pred_d", ")", "\n", "self", ".", "predicates", ".", "append", "(", "pred", ")", "\n", "\n", "", "self", ".", "_config", "=", "cur_task_config", "\n", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "actions", "=", "{", "}", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.pddl_domain.PddlDomain.action_names": [[62, 65], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "action_names", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_action_names", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.pddl_domain.PddlDomain._create_action_to_entity_mapping": [[66, 85], ["pddl_domain.PddlDomain.domain_def[].items", "pddl_domain.PddlDomain._match_groups.append", "len", "pddl_domain.EntityToActionsMapping", "habitat.tasks.rearrange.multi_task.rearrange_pddl.RearrangeObjectTypes"], "methods", ["None"], ["", "def", "_create_action_to_entity_mapping", "(", "self", ")", ":", "\n", "        ", "self", ".", "_match_groups", "=", "[", "]", "\n", "for", "_", ",", "group_cfg", "in", "self", ".", "domain_def", "[", "\n", "\"action_to_entity_mapping\"", "\n", "]", ".", "items", "(", ")", ":", "\n", "\n", "            ", "if", "len", "(", "group_cfg", "[", "\"match_entity_type\"", "]", ")", "!=", "0", ":", "\n", "                ", "use_type", "=", "[", "\n", "RearrangeObjectTypes", "(", "x", ")", "\n", "for", "x", "in", "group_cfg", "[", "\"match_entity_type\"", "]", "\n", "]", "\n", "", "else", ":", "\n", "                ", "use_type", "=", "None", "\n", "\n", "", "self", ".", "_match_groups", ".", "append", "(", "\n", "EntityToActionsMapping", "(", "\n", "match_entity_type", "=", "use_type", ",", "\n", "match_id_str", "=", "group_cfg", "[", "\"match_id_str\"", "]", ",", "\n", "matching_skills", "=", "group_cfg", "[", "\"matching_skills\"", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.pddl_domain.PddlDomain.reset": [[88, 101], ["pddl_domain.PddlDomain.get_name_id_conversions", "list", "habitat.tasks.rearrange.multi_task.rearrange_pddl.PddlAction", "pddl_domain.PddlDomain.actions.keys"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.pddl_domain.PddlDomain.get_name_id_conversions"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_name_to_id", "=", "self", ".", "get_name_id_conversions", "(", "self", ".", "domain_def", ")", "\n", "\n", "for", "action_d", "in", "self", ".", "domain_def", "[", "\"actions\"", "]", ":", "\n", "            ", "action", "=", "PddlAction", "(", "\n", "action_d", ",", "\n", "self", ".", "_config", ",", "\n", "self", ".", "dataset", ",", "\n", "self", ".", "_name_to_id", ",", "\n", "self", ".", "predicate_lookup", ",", "\n", ")", "\n", "self", ".", "actions", "[", "action", ".", "name", "]", "=", "action", "\n", "", "self", ".", "_action_names", "=", "list", "(", "self", ".", "actions", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.pddl_domain.PddlDomain.get_task_match_for_name": [[102, 104], ["None"], "methods", ["None"], ["", "def", "get_task_match_for_name", "(", "self", ",", "task_name", ":", "str", ")", "->", "PddlAction", ":", "\n", "        ", "return", "self", ".", "actions", "[", "task_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.pddl_domain.PddlDomain.predicate_lookup": [[105, 122], ["pred_key.split", "[].split", "copy.deepcopy", "len", "len", "[].split.split"], "methods", ["None"], ["", "def", "predicate_lookup", "(", "self", ",", "pred_key", ":", "str", ")", "->", "Optional", "[", "Predicate", "]", ":", "\n", "        ", "\"\"\"\n        Return a predicate that matches a name. Returns `None` if no predicate is found.\n        \"\"\"", "\n", "pred_name", ",", "pred_args", "=", "pred_key", ".", "split", "(", "\"(\"", ")", "\n", "pred_args", "=", "pred_args", ".", "split", "(", "\")\"", ")", "[", "0", "]", ".", "split", "(", "\",\"", ")", "\n", "if", "pred_args", "[", "0", "]", "==", "\"\"", ":", "\n", "            ", "pred_args", "=", "[", "]", "\n", "# We take the first match", "\n", "", "for", "pred", "in", "self", ".", "predicates", ":", "\n", "            ", "if", "pred", ".", "name", "!=", "pred_name", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "len", "(", "pred_args", ")", "!=", "len", "(", "pred", ".", "args", ")", ":", "\n", "                ", "continue", "\n", "", "return", "copy", ".", "deepcopy", "(", "pred", ")", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.pddl_domain.PddlDomain.is_pred_true": [[123, 129], ["bound_pred.set_state.is_satisfied"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.ArtSampler.is_satisfied"], ["", "def", "is_pred_true", "(", "self", ",", "bound_pred", ":", "Predicate", ")", "->", "bool", ":", "\n", "        ", "return", "bound_pred", ".", "set_state", ".", "is_satisfied", "(", "\n", "self", ".", "_name_to_id", ",", "\n", "self", ".", "_sim", ",", "\n", "self", ".", "_config", ".", "OBJ_SUCC_THRESH", ",", "\n", "self", ".", "_config", ".", "ART_SUCC_THRESH", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.pddl_domain.PddlDomain.is_pred_true_args": [[131, 138], ["copy.deepcopy", "copy.deepcopy.bind", "pddl_domain.PddlDomain.is_pred_true"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.PddlSetState.bind", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.pddl_domain.PddlDomain.is_pred_true"], ["", "def", "is_pred_true_args", "(", "self", ",", "pred", ":", "Predicate", ",", "input_args", ")", ":", "\n", "        ", "if", "pred", ".", "set_state", "is", "not", "None", ":", "\n", "            ", "bound_pred", "=", "copy", ".", "deepcopy", "(", "pred", ")", "\n", "bound_pred", ".", "bind", "(", "input_args", ")", "\n", "return", "self", ".", "is_pred_true", "(", "bound_pred", ")", ",", "bound_pred", "\n", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.pddl_domain.PddlDomain.get_true_predicates": [[139, 153], ["pddl_domain.PddlDomain.get_all_entities", "itertools.combinations", "pred.get_n_args", "pddl_domain.PddlDomain.is_pred_true_args", "true_preds.append"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.pddl_domain.PddlDomain.get_all_entities", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.Predicate.get_n_args", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.pddl_domain.PddlDomain.is_pred_true_args"], ["", "def", "get_true_predicates", "(", "self", ")", ":", "\n", "        ", "all_entities", "=", "self", ".", "get_all_entities", "(", ")", "\n", "true_preds", "=", "[", "]", "\n", "for", "pred", "in", "self", ".", "predicates", ":", "\n", "            ", "for", "entity_input", "in", "itertools", ".", "combinations", "(", "\n", "all_entities", ",", "pred", ".", "get_n_args", "(", ")", "\n", ")", ":", "\n", "                ", "is_pred_true", ",", "bound_pred", "=", "self", ".", "is_pred_true_args", "(", "\n", "pred", ",", "entity_input", "\n", ")", "\n", "\n", "if", "is_pred_true", ":", "\n", "                    ", "true_preds", ".", "append", "(", "bound_pred", ")", "\n", "", "", "", "return", "true_preds", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.pddl_domain.PddlDomain.get_all_entities": [[154, 156], ["list", "pddl_domain.PddlDomain._name_to_id.keys"], "methods", ["None"], ["", "def", "get_all_entities", "(", "self", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "return", "list", "(", "self", ".", "_name_to_id", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.pddl_domain.PddlDomain.get_name_to_id_mapping": [[157, 159], ["None"], "methods", ["None"], ["", "def", "get_name_to_id_mapping", "(", "self", ")", "->", "Dict", "[", "str", ",", "Any", "]", ":", "\n", "        ", "return", "self", ".", "_name_to_id", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.pddl_domain.PddlDomain.get_name_id_conversions": [[160, 183], ["pddl_domain.PddlDomain._sim.ref_handle_to_rigid_obj_id.items", "enumerate", "pddl_domain.PddlDomain._sim.get_all_markers", "pddl_domain.PddlDomain._sim.get_targets"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.get_all_markers", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.get_targets"], ["", "def", "get_name_id_conversions", "(", "self", ",", "domain_def", ")", "->", "Dict", "[", "str", ",", "Any", "]", ":", "\n", "        ", "\"\"\"\n        Returns a map of constant scene identifiers, such as `kitchen_counter_targets|0`, to the scene ID. If the scene identifier starts with \"TARGET_\" it is the goal position and refers to an index in the targets array. If it begins with \"ART_\" it is an articulated object and refers to an index in `self._sim.art_objs`.\n        \"\"\"", "\n", "name_to_id", "=", "{", "}", "\n", "\n", "id_to_name", "=", "{", "}", "\n", "for", "k", ",", "i", "in", "self", ".", "_sim", ".", "ref_handle_to_rigid_obj_id", ".", "items", "(", ")", ":", "\n", "            ", "id_to_name", "[", "i", "]", "=", "k", "\n", "name_to_id", "[", "k", "]", "=", "i", "\n", "\n", "", "for", "targ_idx", "in", "self", ".", "_sim", ".", "get_targets", "(", ")", "[", "0", "]", ":", "\n", "# The object this is the target for.", "\n", "            ", "ref_id", "=", "id_to_name", "[", "targ_idx", "]", "\n", "name_to_id", "[", "f\"TARGET_{ref_id}\"", "]", "=", "targ_idx", "\n", "\n", "", "for", "i", ",", "art_obj", "in", "enumerate", "(", "self", ".", "_sim", ".", "art_objs", ")", ":", "\n", "            ", "name_to_id", "[", "\"ART_\"", "+", "art_obj", ".", "handle", "]", "=", "i", "\n", "\n", "", "for", "k", "in", "self", ".", "_sim", ".", "get_all_markers", "(", ")", ":", "\n", "            ", "name_to_id", "[", "\"MARKER_\"", "+", "k", "]", "=", "k", "\n", "\n", "", "return", "name_to_id", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.pddl_domain.PddlDomain.get_matching_skills": [[184, 208], ["entity_id.startswith", "ValueError"], "methods", ["None"], ["", "def", "get_matching_skills", "(", "\n", "self", ",", "entity_type", ":", "RearrangeObjectTypes", ",", "entity_id", ":", "str", "\n", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "\"\"\"\n        Gets the skills that have argument types compatible with an entity.\n        :entity_type: One of the inputs types to the action must match this type.\n        :entity_id: One of the input names to the action must match this name.\n        \"\"\"", "\n", "matching_skills", "=", "None", "\n", "for", "match_group", "in", "self", ".", "_match_groups", ":", "\n", "            ", "if", "(", "\n", "match_group", ".", "match_entity_type", "is", "not", "None", "\n", "and", "entity_type", "not", "in", "match_group", ".", "match_entity_type", "\n", ")", ":", "\n", "                ", "continue", "\n", "", "if", "not", "entity_id", ".", "startswith", "(", "match_group", ".", "match_id_str", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "matching_skills", "is", "not", "None", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "f\"Multiple matching skills for {entity_type}, {entity_id}\"", "\n", ")", "\n", "", "matching_skills", "=", "match_group", ".", "matching_skills", "\n", "", "return", "matching_skills", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.task_creator_utils.create_task_object": [[23, 64], ["habitat.core.registry.registry.get_task", "copy.deepcopy", "copy.deepcopy.defrost", "copy.deepcopy.freeze", "registry.get_task.", "task_cls.set_args", "task_cls.set_sim_reset", "task_cls.reset", "task_config_args.items", "habitat.get_config", "copy.deepcopy.merge_from_other_cfg", "pass_args.extend", "os.join"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry.get_task", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.ArmTargModule.set_args", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_task.RearrangeTask.set_sim_reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config"], ["def", "create_task_object", "(", "\n", "task_cls_name", ":", "str", ",", "\n", "task_config_path", ":", "str", ",", "\n", "cur_config", ":", "Config", ",", "\n", "cur_env", ":", "RearrangeTask", ",", "\n", "cur_dataset", ":", "\"RearrangeDatasetV0\"", ",", "\n", "should_super_reset", ":", "bool", ",", "\n", "task_kwargs", ":", "Dict", "[", "str", ",", "Any", "]", ",", "\n", "episode", ":", "Episode", ",", "\n", "task_config_args", ":", "Dict", "[", "str", ",", "Any", "]", ",", "\n", ")", "->", "RearrangeTask", ":", "\n", "    ", "\"\"\"\n    Creates a task to be used within another task. Used when a task needs to be simulated within another task. For example, this is used to get the starting state of another task as a navigation goal in the Habitat 2.0 navigation task. The loaded task uses the information and dataset from the main task (which is also passed into this function).\n\n    :param task_cls_name: The name of the task to load.\n    :param task_config_path: The path to the config for the task to load.\n    :param cur_config: The config for the main task.\n    :param cur_env: The main task.\n    \"\"\"", "\n", "task_cls", "=", "registry", ".", "get_task", "(", "task_cls_name", ")", "\n", "\n", "config", "=", "copy", ".", "deepcopy", "(", "cur_config", ")", "\n", "config", ".", "defrost", "(", ")", "\n", "if", "task_config_path", "is", "not", "None", ":", "\n", "        ", "pass_args", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "task_config_args", ".", "items", "(", ")", ":", "\n", "            ", "pass_args", ".", "extend", "(", "(", "k", ",", "v", ")", ")", "\n", "", "task_config", "=", "habitat", ".", "get_config", "(", "\n", "osp", ".", "join", "(", "TASK_CONFIGS_DIR", ",", "task_config_path", "+", "\".yaml\"", ")", ",", "pass_args", "\n", ")", "\n", "config", ".", "merge_from_other_cfg", "(", "task_config", ".", "TASK", ")", "\n", "# New task should not recreate any sensors", "\n", "", "config", ".", "MEASUREMENTS", "=", "[", "]", "\n", "config", ".", "SENSORS", "=", "[", "]", "\n", "config", ".", "freeze", "(", ")", "\n", "task", "=", "task_cls", "(", "config", "=", "config", ",", "dataset", "=", "cur_dataset", ",", "sim", "=", "cur_env", ".", "_sim", ")", "\n", "\n", "task", ".", "set_args", "(", "**", "task_kwargs", ")", "\n", "task", ".", "set_sim_reset", "(", "should_super_reset", ")", "\n", "task", ".", "reset", "(", "episode", ")", "\n", "return", "task", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask.__init__": [[35, 68], ["habitat.tasks.rearrange.rearrange_task.RearrangeTask.__init__", "os.join", "habitat.tasks.rearrange.multi_task.rearrange_pddl.PddlSetState", "open", "yaml.safe_load"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "config", ",", "dataset", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", "=", "config", ",", "*", "args", ",", "dataset", "=", "dataset", ",", "**", "kwargs", ")", "\n", "\n", "task_spec_path", "=", "osp", ".", "join", "(", "\n", "self", ".", "_config", ".", "TASK_SPEC_BASE_PATH", ",", "self", ".", "_config", ".", "TASK_SPEC", "+", "\".yaml\"", "\n", ")", "\n", "\n", "with", "open", "(", "task_spec_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "task_def", "=", "yaml", ".", "safe_load", "(", "f", ")", "\n", "\n", "# Stores configuration for the task.", "\n", "", "self", ".", "task_def", ":", "Dict", "[", "str", ",", "Any", "]", "=", "task_def", "\n", "\n", "self", ".", "start_state", "=", "PddlSetState", "(", "task_def", "[", "\"start\"", "]", "[", "\"state\"", "]", ")", "\n", "\n", "self", ".", "_cur_node_idx", ":", "int", "=", "-", "1", "\n", "self", ".", "_cur_task", ":", "RearrangeTask", "=", "None", "\n", "self", ".", "_cached_tasks", ":", "Dict", "[", "str", ",", "RearrangeTask", "]", "=", "{", "}", "\n", "self", ".", "_cur_state", "=", "None", "\n", "\n", "# None until loaded.", "\n", "self", ".", "domain", ":", "Optional", "[", "PddlDomain", "]", "=", "None", "\n", "self", ".", "_stage_goals", ":", "Optional", "[", "Dict", "[", "str", ",", "List", "[", "Predicate", "]", "]", "]", "=", "{", "}", "\n", "self", ".", "_goal_state", ":", "Optional", "[", "List", "[", "Predicate", "]", "]", "=", "None", "\n", "self", ".", "_solution", ":", "Optional", "[", "List", "[", "PddlAction", "]", "]", "=", "None", "\n", "\n", "# Based on the current environment state, we can infer which subtask", "\n", "# from the solution list the agent is currently executing.", "\n", "self", ".", "_inferred_cur_node_idx", ":", "int", "=", "-", "1", "\n", "self", ".", "_inferred_cur_task", ":", "Optional", "[", "RearrangeTask", "]", "=", "None", "\n", "\n", "if", "self", ".", "_config", ".", "SINGLE_EVAL_NODE", ">=", "0", ":", "\n", "            ", "self", ".", "_cur_node_idx", "=", "self", ".", "_config", ".", "SINGLE_EVAL_NODE", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask.stage_goals": [[69, 72], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "stage_goals", "(", "self", ")", "->", "Dict", "[", "str", ",", "List", "[", "Predicate", "]", "]", ":", "\n", "        ", "return", "self", ".", "_stage_goals", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask._parse_precond_list": [[73, 86], ["copy.deepcopy", "habitat.tasks.rearrange.multi_task.rearrange_pddl.parse_func", "effect_arg.split.split.split", "copy.deepcopy.bind", "preds.append", "composite_task.CompositeTask.domain.predicate_lookup"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.parse_func", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.PddlSetState.bind", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.pddl_domain.PddlDomain.predicate_lookup"], ["", "def", "_parse_precond_list", "(", "\n", "self", ",", "predicate_strs", ":", "List", "[", "str", "]", "\n", ")", "->", "List", "[", "Predicate", "]", ":", "\n", "        ", "preds", "=", "[", "]", "\n", "for", "pred_s", "in", "predicate_strs", ":", "\n", "            ", "pred", "=", "copy", ".", "deepcopy", "(", "self", ".", "domain", ".", "predicate_lookup", "(", "pred_s", ")", ")", "\n", "_", ",", "effect_arg", "=", "parse_func", "(", "pred_s", ")", "\n", "effect_arg", "=", "effect_arg", ".", "split", "(", "\",\"", ")", "\n", "if", "effect_arg", "[", "0", "]", "==", "\"\"", ":", "\n", "                ", "effect_arg", "=", "[", "]", "\n", "", "pred", ".", "bind", "(", "effect_arg", ")", "\n", "preds", ".", "append", "(", "pred", ")", "\n", "", "return", "preds", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask.load_solution": [[87, 104], ["enumerate", "habitat.tasks.rearrange.multi_task.rearrange_pddl.parse_func", "args.split.split.split", "composite_task.CompositeTask.domain.actions[].copy_new", "composite_task.CompositeTask.bind", "solution.append", "composite_task.CompositeTask.task_def.get().get", "composite_task.CompositeTask.task_def.get"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.parse_func", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.PddlAction.copy_new", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.PddlSetState.bind", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get"], ["", "def", "load_solution", "(", "self", ",", "solution_d", ":", "Dict", "[", "str", ",", "Any", "]", ")", "->", "List", "[", "PddlAction", "]", ":", "\n", "        ", "\"\"\"\n        Loads the solution definition from the PDDL file and converts it to a\n        list of executable actions.\n        \"\"\"", "\n", "solution", "=", "[", "]", "\n", "for", "i", ",", "action", "in", "enumerate", "(", "solution_d", ")", ":", "\n", "            ", "name", ",", "args", "=", "parse_func", "(", "action", ")", "\n", "args", "=", "args", ".", "split", "(", "\",\"", ")", "\n", "\n", "ac_instance", "=", "self", ".", "domain", ".", "actions", "[", "name", "]", ".", "copy_new", "(", ")", "\n", "\n", "ac_instance", ".", "bind", "(", "\n", "args", ",", "self", ".", "task_def", ".", "get", "(", "\"add_args\"", ",", "{", "}", ")", ".", "get", "(", "i", ",", "{", "}", ")", "\n", ")", "\n", "solution", ".", "append", "(", "ac_instance", ")", "\n", "", "return", "solution", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask.jump_to_node": [[105, 133], ["habitat.tasks.rearrange.utils.rearrange_logger.debug", "range", "composite_task.CompositeTask._solution[].apply", "composite_task.CompositeTask._solution[].init_task", "composite_task.CompositeTask._cached_tasks[].reset", "composite_task.CompositeTask.domain.get_name_to_id_mapping"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.PddlAction.apply", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.PddlAction.init_task", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.pddl_domain.PddlDomain.get_name_to_id_mapping"], ["", "def", "jump_to_node", "(", "\n", "self", ",", "node_idx", ":", "int", ",", "episode", ":", "Episode", ",", "is_full_task", ":", "bool", "=", "False", "\n", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Sequentially applies all solution actions before `node_idx`. But NOT\n        including the solution action at index `node_idx`.\n\n        :param node_idx: An integer in [0, len(self._solution)).\n        :param is_full_task: If true, then calling reset will always the task to this solution node.\n        \"\"\"", "\n", "\n", "rearrange_logger", ".", "debug", "(", "\n", "\"Jumping to node {node_idx}, is_full_task={is_full_task}\"", "\n", ")", "\n", "# We don't want to reset to this node if we are in full task mode.", "\n", "if", "not", "is_full_task", ":", "\n", "            ", "self", ".", "_cur_node_idx", "=", "node_idx", "\n", "\n", "", "for", "i", "in", "range", "(", "node_idx", ")", ":", "\n", "            ", "self", ".", "_solution", "[", "i", "]", ".", "apply", "(", "\n", "self", ".", "domain", ".", "get_name_to_id_mapping", "(", ")", ",", "self", ".", "_sim", "\n", ")", "\n", "\n", "", "if", "node_idx", "not", "in", "self", ".", "_cached_tasks", ":", "\n", "            ", "task", "=", "self", ".", "_solution", "[", "node_idx", "]", ".", "init_task", "(", "self", ",", "episode", ")", "\n", "self", ".", "_cached_tasks", "[", "node_idx", "]", "=", "task", "\n", "", "else", ":", "\n", "            ", "self", ".", "_cached_tasks", "[", "node_idx", "]", ".", "reset", "(", "episode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask.reset": [[134, 173], ["super().reset", "composite_task.CompositeTask.load_solution", "composite_task.CompositeTask._parse_precond_list", "composite_task.CompositeTask._parse_precond_list", "composite_task.CompositeTask.task_def[].items", "composite_task.CompositeTask.start_state.set_state", "composite_task.CompositeTask._cached_tasks.clear", "composite_task.CompositeTask._get_observations", "habitat.tasks.rearrange.multi_task.pddl_domain.PddlDomain", "composite_task.CompositeTask.domain.reset", "composite_task.CompositeTask._parse_precond_list", "composite_task.CompositeTask.domain.get_name_to_id_mapping", "composite_task.CompositeTask.jump_to_node", "composite_task.CompositeTask.jump_to_node", "composite_task.CompositeTask._increment_solution_subtask"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask.load_solution", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask._parse_precond_list", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask._parse_precond_list", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.set_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_task.RearrangeTask._get_observations", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask._parse_precond_list", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.pddl_domain.PddlDomain.get_name_to_id_mapping", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask.jump_to_node", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask.jump_to_node", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask._increment_solution_subtask"], ["", "", "def", "reset", "(", "self", ",", "episode", ":", "Episode", ")", ":", "\n", "        ", "super", "(", ")", ".", "reset", "(", "episode", ",", "fetch_observations", "=", "False", ")", "\n", "if", "self", ".", "domain", "is", "None", ":", "\n", "            ", "self", ".", "domain", "=", "PddlDomain", "(", "\n", "self", ".", "_config", ".", "PDDL_DOMAIN_DEF", ",", "\n", "self", ".", "_dataset", ",", "\n", "self", ".", "_config", ",", "\n", "self", ".", "_sim", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "domain", ".", "reset", "(", ")", "\n", "\n", "", "self", ".", "_solution", "=", "self", ".", "load_solution", "(", "self", ".", "task_def", "[", "\"solution\"", "]", ")", "\n", "self", ".", "_goal_state", "=", "self", ".", "_parse_precond_list", "(", "self", ".", "task_def", "[", "\"goal\"", "]", ")", "\n", "self", ".", "_cur_state", "=", "self", ".", "_parse_precond_list", "(", "\n", "self", ".", "task_def", "[", "\"start\"", "]", "[", "\"precondition\"", "]", "\n", ")", "\n", "\n", "for", "k", ",", "preconds", "in", "self", ".", "task_def", "[", "\"stage_goals\"", "]", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "_stage_goals", "[", "k", "]", "=", "self", ".", "_parse_precond_list", "(", "preconds", ")", "\n", "\n", "", "self", ".", "start_state", ".", "set_state", "(", "\n", "self", ".", "domain", ".", "get_name_to_id_mapping", "(", ")", ",", "self", ".", "_sim", "\n", ")", "\n", "\n", "if", "self", ".", "_config", ".", "DEBUG_SKIP_TO_NODE", "!=", "-", "1", ":", "\n", "            ", "self", ".", "jump_to_node", "(", "\n", "self", ".", "_config", ".", "DEBUG_SKIP_TO_NODE", ",", "episode", ",", "is_full_task", "=", "True", "\n", ")", "\n", "\n", "", "if", "self", ".", "_cur_node_idx", ">=", "0", ":", "\n", "            ", "self", ".", "jump_to_node", "(", "self", ".", "_cur_node_idx", ",", "episode", ")", "\n", "\n", "", "self", ".", "_inferred_cur_node_idx", "=", "0", "\n", "self", ".", "_inferred_cur_task", "=", "None", "\n", "if", "self", ".", "_config", ".", "USING_SUBTASKS", ":", "\n", "            ", "self", ".", "_increment_solution_subtask", "(", "episode", ")", "\n", "", "self", ".", "_cached_tasks", ".", "clear", "(", ")", "\n", "return", "self", ".", "_get_observations", "(", "episode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask.get_inferred_node_idx": [[174, 180], ["ValueError"], "methods", ["None"], ["", "def", "get_inferred_node_idx", "(", "self", ")", "->", "int", ":", "\n", "        ", "if", "not", "self", ".", "_config", ".", "USING_SUBTASKS", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Cannot get inferred sub-task when task is not configured to use sub-tasks. See `TASK.USING_SUBTASKS` key.\"", "\n", ")", "\n", "", "return", "self", ".", "_inferred_cur_node_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask.get_inferrred_node_task": [[181, 187], ["ValueError"], "methods", ["None"], ["", "def", "get_inferrred_node_task", "(", "self", ")", "->", "RearrangeTask", ":", "\n", "        ", "if", "not", "self", ".", "_config", ".", "USING_SUBTASKS", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Cannot get inferred sub-task when task is not configured to use sub-tasks. See `TASK.USING_SUBTASKS` key.\"", "\n", ")", "\n", "", "return", "self", ".", "_inferred_cur_task", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask.increment_inferred_solution_idx": [[188, 198], ["composite_task.CompositeTask._increment_solution_subtask"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask._increment_solution_subtask"], ["", "def", "increment_inferred_solution_idx", "(", "self", ",", "episode", ":", "Episode", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Increment to the next index in the solution list. If the solution is\n        exhausted then stay at the last index. This will update both\n        `inferred_node_idx` and `inferrred_cur_task`.\n        \"\"\"", "\n", "prev_inf_cur_node", "=", "self", ".", "_inferred_cur_node_idx", "\n", "self", ".", "_inferred_cur_node_idx", "+=", "1", "\n", "if", "not", "self", ".", "_increment_solution_subtask", "(", "episode", ")", ":", "\n", "            ", "self", ".", "_inferred_cur_node_idx", "=", "prev_inf_cur_node", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask._increment_solution_subtask": [[199, 236], ["composite_task.CompositeTask._sim.capture_state", "composite_task.CompositeTask._sim.set_state", "len", "composite_task.CompositeTask._inferred_cur_task.reset", "habitat.tasks.rearrange.utils.rearrange_logger.debug", "habitat.tasks.rearrange.utils.rearrange_logger.debug", "task_solution[].init_task", "len"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.capture_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.set_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.PddlAction.init_task"], ["", "", "def", "_increment_solution_subtask", "(", "self", ",", "episode", ":", "Episode", ")", "->", "bool", ":", "\n", "        ", "\"\"\"\n        Gets the next inferred sub-task in the solution list. Returns False if\n        there are no remaining sub-tasks in the solution list.\n        \"\"\"", "\n", "task_solution", "=", "self", ".", "solution", "\n", "if", "self", ".", "_inferred_cur_node_idx", ">=", "len", "(", "task_solution", ")", ":", "\n", "            ", "return", "False", "\n", "", "while", "(", "\n", "task_solution", "[", "self", ".", "_inferred_cur_node_idx", "]", ".", "name", "\n", "in", "self", ".", "_config", ".", "SKIP_NODES", "\n", ")", ":", "\n", "            ", "self", ".", "_inferred_cur_node_idx", "+=", "1", "\n", "if", "self", ".", "_inferred_cur_node_idx", ">=", "len", "(", "task_solution", ")", ":", "\n", "                ", "return", "False", "\n", "\n", "", "", "prev_state", "=", "self", ".", "_sim", ".", "capture_state", "(", "with_robot_js", "=", "True", ")", "\n", "if", "self", ".", "_inferred_cur_node_idx", "in", "self", ".", "_cached_tasks", ":", "\n", "            ", "self", ".", "_inferred_cur_task", "=", "self", ".", "_cached_tasks", "[", "\n", "self", ".", "_inferred_cur_node_idx", "\n", "]", "\n", "self", ".", "_inferred_cur_task", ".", "reset", "(", "episode", ")", "\n", "rearrange_logger", ".", "debug", "(", "\n", "f\"Incrementing solution to {self._inferred_cur_node_idx}. Loading next task from cached\"", "\n", ")", "\n", "", "else", ":", "\n", "            ", "rearrange_logger", ".", "debug", "(", "\n", "f\"Incrementing solution to {self._inferred_cur_node_idx}. Loading next task.\"", "\n", ")", "\n", "task", "=", "task_solution", "[", "self", ".", "_inferred_cur_node_idx", "]", ".", "init_task", "(", "\n", "self", ",", "episode", ",", "should_reset", "=", "False", "\n", ")", "\n", "self", ".", "_cached_tasks", "[", "self", ".", "_inferred_cur_node_idx", "]", "=", "task", "\n", "self", ".", "_inferred_cur_task", "=", "task", "\n", "", "self", ".", "_sim", ".", "set_state", "(", "prev_state", ")", "\n", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask.forced_node_task": [[237, 248], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "forced_node_task", "(", "self", ")", "->", "RearrangeTask", ":", "\n", "        ", "\"\"\"\n        The current sub-task from the solution list the agent is forced to be\n        in. This must be programmatically. Unlike the inferred_node, this will\n        not automatically increment.\n        \"\"\"", "\n", "if", "self", ".", "_cur_node_idx", ">=", "0", ":", "\n", "            ", "return", "self", ".", "_cached_tasks", "[", "self", ".", "_cur_node_idx", "]", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask.forced_node_task_idx": [[249, 255], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "forced_node_task_idx", "(", "self", ")", "->", "int", ":", "\n", "        ", "\"\"\"\n        The index of the current sub-task in the solution list the agent is at.\n        \"\"\"", "\n", "return", "self", ".", "_cur_node_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask.num_solution_subtasks": [[256, 262], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_solution_subtasks", "(", "self", ")", "->", "int", ":", "\n", "        ", "\"\"\"\n        Get the number of sub-tasks in the solution.\n        \"\"\"", "\n", "return", "len", "(", "self", ".", "_solution", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask.solution": [[263, 269], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "solution", "(", "self", ")", "->", "List", "[", "PddlAction", "]", ":", "\n", "        ", "\"\"\"\n        Hard-coded solution defined in the task PDDL config.\n        \"\"\"", "\n", "return", "self", ".", "_solution", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask.are_predicates_satisfied": [[270, 273], ["all", "composite_task.CompositeTask.domain.is_pred_true", "reversed"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.pddl_domain.PddlDomain.is_pred_true"], ["", "def", "are_predicates_satisfied", "(", "self", ",", "preds", ":", "List", "[", "Predicate", "]", ")", "->", "bool", ":", "\n", "        ", "\"\"\" \"\"\"", "\n", "return", "all", "(", "self", ".", "domain", ".", "is_pred_true", "(", "pred", ")", "for", "pred", "in", "reversed", "(", "preds", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask.is_goal_state_satisfied": [[274, 276], ["composite_task.CompositeTask.are_predicates_satisfied"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask.are_predicates_satisfied"], ["", "def", "is_goal_state_satisfied", "(", "self", ")", "->", "bool", ":", "\n", "        ", "return", "self", ".", "are_predicates_satisfied", "(", "self", ".", "_goal_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask._try_get_subtask_prop": [[277, 292], ["hasattr", "getattr", "hasattr", "getattr"], "methods", ["None"], ["", "def", "_try_get_subtask_prop", "(", "self", ",", "prop_name", ":", "str", ",", "def_val", ":", "Any", ")", "->", "Any", ":", "\n", "        ", "\"\"\"\n        Try to get a property from the current inferred subtask. If the subtask\n        is not valid, then return the supplied default value.\n        \"\"\"", "\n", "if", "self", ".", "forced_node_task", "is", "not", "None", "and", "hasattr", "(", "\n", "self", ".", "cur_task", ",", "prop_name", "\n", ")", ":", "\n", "            ", "return", "getattr", "(", "self", ".", "cur_task", ",", "prop_name", ")", "\n", "\n", "", "elif", "self", ".", "_inferred_cur_task", "is", "not", "None", "and", "hasattr", "(", "\n", "self", ".", "_inferred_cur_task", ",", "prop_name", "\n", ")", ":", "\n", "            ", "return", "getattr", "(", "self", ".", "_inferred_cur_task", ",", "prop_name", ")", "\n", "", "return", "def_val", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask.targ_idx": [[299, 302], ["composite_task.CompositeTask._try_get_subtask_prop"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask._try_get_subtask_prop"], ["", "@", "property", "\n", "def", "targ_idx", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "_try_get_subtask_prop", "(", "\"targ_idx\"", ",", "self", ".", "_targ_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask.abs_targ_idx": [[303, 311], ["composite_task.CompositeTask._try_get_subtask_prop", "composite_task.CompositeTask._sim.get_targets"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask._try_get_subtask_prop", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.get_targets"], ["", "@", "property", "\n", "def", "abs_targ_idx", "(", "self", ")", "->", "int", ":", "\n", "        ", "if", "self", ".", "_targ_idx", "is", "None", ":", "\n", "            ", "abs_targ_idx", "=", "None", "\n", "", "else", ":", "\n", "            ", "abs_targ_idx", "=", "self", ".", "_sim", ".", "get_targets", "(", ")", "[", "0", "]", "[", "self", ".", "_targ_idx", "]", "\n", "\n", "", "return", "self", ".", "_try_get_subtask_prop", "(", "\"abs_targ_idx\"", ",", "abs_targ_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask.nav_to_task_name": [[312, 315], ["composite_task.CompositeTask._try_get_subtask_prop"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask._try_get_subtask_prop"], ["", "@", "property", "\n", "def", "nav_to_task_name", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "_try_get_subtask_prop", "(", "\"nav_to_task_name\"", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask.nav_to_obj_type": [[316, 320], ["composite_task.CompositeTask._try_get_subtask_prop"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask._try_get_subtask_prop"], ["", "@", "property", "\n", "def", "nav_to_obj_type", "(", "self", ")", "->", "RearrangeObjectTypes", ":", "\n", "        ", "return", "self", ".", "_try_get_subtask_prop", "(", "\n", "\"nav_to_obj_type\"", ",", "RearrangeObjectTypes", ".", "RIGID_OBJECT", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask.nav_target_pos": [[322, 325], ["composite_task.CompositeTask._try_get_subtask_prop", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask._try_get_subtask_prop"], ["", "@", "property", "\n", "def", "nav_target_pos", "(", "self", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "return", "self", ".", "_try_get_subtask_prop", "(", "\"nav_target_pos\"", ",", "np", ".", "zeros", "(", "(", "3", ",", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask.nav_target_angle": [[326, 329], ["composite_task.CompositeTask._try_get_subtask_prop"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask._try_get_subtask_prop"], ["", "@", "property", "\n", "def", "nav_target_angle", "(", "self", ")", "->", "float", ":", "\n", "        ", "return", "self", ".", "_try_get_subtask_prop", "(", "\"nav_target_angle\"", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask.success_js_state": [[330, 333], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "success_js_state", "(", "self", ")", "->", "float", ":", "\n", "        ", "return", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask.use_marker_name": [[334, 344], ["composite_task.CompositeTask._try_get_subtask_prop", "composite_task.CompositeTask._sim.get_all_markers", "list", "composite_task.CompositeTask.keys"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask._try_get_subtask_prop", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.get_all_markers"], ["", "@", "property", "\n", "def", "use_marker_name", "(", "self", ")", "->", "str", ":", "\n", "        ", "subtask_marker_name", "=", "self", ".", "_try_get_subtask_prop", "(", "\n", "\"use_marker_name\"", ",", "None", "\n", ")", "\n", "if", "subtask_marker_name", "is", "not", "None", ":", "\n", "            ", "return", "subtask_marker_name", "\n", "", "else", ":", "\n", "            ", "all_markers", "=", "self", ".", "_sim", ".", "get_all_markers", "(", ")", "\n", "return", "list", "(", "all_markers", ".", "keys", "(", ")", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.composite_task.CompositeTask.get_use_marker": [[345, 347], ["composite_task.CompositeTask._sim.get_marker"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.get_marker"], ["", "", "def", "get_use_marker", "(", "self", ")", "->", "MarkerInfo", ":", "\n", "        ", "return", "self", ".", "_sim", ".", "get_marker", "(", "self", ".", "use_marker_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.Predicate.__init__": [[91, 99], ["load_config.get", "rearrange_pddl.PddlSetState"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get"], ["    ", "def", "__init__", "(", "self", ",", "load_config", ":", "Dict", "[", "str", ",", "Any", "]", ")", ":", "\n", "        ", "self", ".", "name", "=", "load_config", "[", "\"name\"", "]", "\n", "if", "\"state\"", "in", "load_config", ":", "\n", "            ", "self", ".", "set_state", "=", "PddlSetState", "(", "load_config", "[", "\"state\"", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "set_state", "=", "None", "\n", "", "self", ".", "args", "=", "load_config", ".", "get", "(", "\"args\"", ",", "[", "]", ")", "\n", "self", ".", "set_args", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.Predicate.get_n_args": [[100, 102], ["len"], "methods", ["None"], ["", "def", "get_n_args", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "len", "(", "self", ".", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.Predicate.is_equal": [[103, 111], ["None"], "methods", ["None"], ["", "def", "is_equal", "(", "self", ",", "b", ")", "->", "bool", ":", "\n", "        ", "\"\"\"\n        Is the same definition as another predicate.\n        \"\"\"", "\n", "return", "(", "\n", "(", "b", ".", "name", "==", "self", ".", "name", ")", "\n", "and", "(", "self", ".", "args", "==", "b", ".", "args", ")", "\n", "and", "(", "self", ".", "set_args", "==", "b", ".", "set_args", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.Predicate.bind": [[113, 124], ["len", "len", "ValueError", "rearrange_pddl.Predicate.set_state.bind"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.PddlSetState.bind"], ["", "def", "bind", "(", "self", ",", "set_args", ":", "List", "[", "str", "]", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Instantiate the predicate with particular entities.\n        \"\"\"", "\n", "if", "len", "(", "self", ".", "args", ")", "!=", "len", "(", "set_args", ")", ":", "\n", "            ", "raise", "ValueError", "(", ")", "\n", "\n", "", "self", ".", "set_args", "=", "set_args", "\n", "\n", "if", "self", ".", "set_state", "is", "not", "None", ":", "\n", "            ", "self", ".", "set_state", ".", "bind", "(", "self", ".", "args", ",", "set_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.Predicate.__str__": [[125, 127], ["None"], "methods", ["None"], ["", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "f\"<Predicate: {self.name} [{self.args}] [{self.set_args}]>\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.Predicate.__repr__": [[128, 130], ["str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.PddlAction.__init__": [[138, 207], ["load_config.get", "load_config.get", "load_config.get().items", "functools.partial", "rearrange_pddl.SetStateArgSpec", "copy.deepcopy", "rearrange_pddl.PddlAction.precond.append", "rearrange_pddl.PddlAction.precond_strs.append", "rearrange_pddl.PddlAction._convert_arg_str", "zip", "rearrange_pddl.parse_func", "rearrange_pddl.PddlAction.postcond_args.append", "predicate_lookup_fn", "rearrange_pddl.PddlAction.postcond.append", "load_config.get", "ValueError", "predicate_lookup_fn", "rearrange_pddl.parse_func", "len", "len", "ValueError"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.PddlAction._convert_arg_str", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.parse_func", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.parse_func"], ["def", "__init__", "(", "\n", "self", ",", "\n", "load_config", ":", "Dict", "[", "str", ",", "Any", "]", ",", "\n", "config", ":", "Config", ",", "\n", "dataset", ":", "\"RearrangeDatasetV0\"", ",", "\n", "name_to_id", ":", "Dict", "[", "str", ",", "Any", "]", ",", "\n", "predicate_lookup_fn", ":", "Callable", "[", "[", "str", "]", ",", "Optional", "[", "Predicate", "]", "]", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        :param predicate_lookup_fn: A function that takes as input a predicate\n            identifier and returns a predicate if one was found.\n        \"\"\"", "\n", "self", ".", "_orig_load_config", "=", "load_config", "\n", "self", ".", "_orig_config", "=", "config", "\n", "self", ".", "_orig_dataset", "=", "dataset", "\n", "self", ".", "_orig_pred_lookup_fn", "=", "predicate_lookup_fn", "\n", "\n", "self", ".", "name", "=", "load_config", "[", "\"name\"", "]", "\n", "self", ".", "parameters", "=", "load_config", "[", "\"parameters\"", "]", "\n", "self", ".", "name_to_id", "=", "name_to_id", "\n", "self", ".", "task", "=", "load_config", "[", "\"task\"", "]", "\n", "self", ".", "task_def", "=", "load_config", "[", "\"task_def\"", "]", "\n", "self", ".", "_config_task_args", "=", "load_config", ".", "get", "(", "\"config_args\"", ",", "{", "}", ")", "\n", "self", ".", "_add_task_args", "=", "load_config", ".", "get", "(", "\"add_task_args\"", ",", "{", "}", ")", "\n", "self", ".", "_arg_specs", ":", "Dict", "[", "str", ",", "SetStateArgSpec", "]", "=", "{", "}", "\n", "for", "param_name", ",", "arg_spec", "in", "load_config", ".", "get", "(", "\"arg_specs\"", ",", "{", "}", ")", ".", "items", "(", ")", ":", "\n", "            ", "if", "param_name", "not", "in", "self", ".", "parameters", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "f\"Could not find {param_name} in {self.parameters}\"", "\n", ")", "\n", "", "self", ".", "_arg_specs", "[", "param_name", "]", "=", "SetStateArgSpec", "(", "**", "arg_spec", ")", "\n", "\n", "", "self", ".", "load_task_fn", "=", "partial", "(", "\n", "self", ".", "_load_task", ",", "load_config", ",", "config", ",", "dataset", ",", "name_to_id", "\n", ")", "\n", "\n", "self", ".", "precond", "=", "[", "]", "\n", "self", ".", "precond_strs", "=", "[", "]", "\n", "self", ".", "_precond_arg_to_action_arg", ":", "Dict", "[", "str", ",", "str", "]", "=", "{", "}", "\n", "self", ".", "_action_arg_to_precond_arg", ":", "Dict", "[", "str", ",", "str", "]", "=", "{", "}", "\n", "\n", "for", "precond_str", "in", "load_config", "[", "\"precondition\"", "]", ":", "\n", "            ", "precond", "=", "copy", ".", "deepcopy", "(", "predicate_lookup_fn", "(", "precond_str", ")", ")", "\n", "self", ".", "precond", ".", "append", "(", "precond", ")", "\n", "parsed_precond_args", "=", "parse_func", "(", "precond_str", ")", "[", "1", "]", "\n", "self", ".", "precond_strs", ".", "append", "(", "parsed_precond_args", ")", "\n", "sep_precond_args", "=", "self", ".", "_convert_arg_str", "(", "parsed_precond_args", ",", "[", "]", ")", "\n", "assert", "len", "(", "precond", ".", "args", ")", "==", "len", "(", "sep_precond_args", ")", "\n", "for", "precond_arg_param_name", ",", "precond_action_arg_name", "in", "zip", "(", "\n", "precond", ".", "args", ",", "sep_precond_args", "\n", ")", ":", "\n", "                ", "self", ".", "_precond_arg_to_action_arg", "[", "\n", "precond_arg_param_name", "\n", "]", "=", "precond_action_arg_name", "\n", "self", ".", "_action_arg_to_precond_arg", "[", "\n", "precond_action_arg_name", "\n", "]", "=", "precond_arg_param_name", "\n", "\n", "", "", "self", ".", "postcond", "=", "[", "]", "\n", "self", ".", "postcond_args", "=", "[", "]", "\n", "for", "effect_s", "in", "load_config", "[", "\"postcondition\"", "]", ":", "\n", "            ", "_", ",", "effect_arg", "=", "parse_func", "(", "effect_s", ")", "\n", "self", ".", "postcond_args", ".", "append", "(", "effect_arg", ")", "\n", "postcond", "=", "predicate_lookup_fn", "(", "effect_s", ")", "\n", "if", "postcond", "is", "None", ":", "\n", "                ", "raise", "ValueError", "(", "f\"Could not find postcond for {effect_s}\"", ")", "\n", "\n", "", "self", ".", "postcond", ".", "append", "(", "postcond", ")", "\n", "", "self", ".", "is_bound", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.PddlAction.copy_new": [[208, 215], ["rearrange_pddl.PddlAction"], "methods", ["None"], ["", "def", "copy_new", "(", "self", ")", "->", "PddlAction", ":", "\n", "        ", "return", "PddlAction", "(", "\n", "self", ".", "_orig_load_config", ",", "\n", "self", ".", "_orig_config", ",", "\n", "self", ".", "_orig_dataset", ",", "\n", "self", ".", "name_to_id", ",", "\n", "self", ".", "_orig_pred_lookup_fn", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.PddlAction._convert_arg_str": [[217, 232], ["enumerate", "effect_arg.replace.replace.format", "effect_arg.replace.replace.split", "effect_arg.replace.replace.replace", "len", "str"], "methods", ["None"], ["", "def", "_convert_arg_str", "(", "self", ",", "effect_arg", ":", "str", ",", "args", ":", "List", "[", "str", "]", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "\"\"\"\n        Substitutes the `args` into the `effect_arg` string. Works when `args`\n        is not the same size as `self.parameters` (meaning there are unbound\n        arguments).\n        \"\"\"", "\n", "# Substitute in format strings for the key words we want to replace", "\n", "for", "i", ",", "param_name", "in", "enumerate", "(", "self", ".", "parameters", "[", ":", "len", "(", "args", ")", "]", ")", ":", "\n", "            ", "effect_arg", "=", "effect_arg", ".", "replace", "(", "param_name", ",", "\"{\"", "+", "str", "(", "i", ")", "+", "\"}\"", ")", "\n", "\n", "", "effect_arg", "=", "effect_arg", ".", "format", "(", "*", "args", ")", "\n", "effect_arg", "=", "effect_arg", ".", "split", "(", "\",\"", ")", "\n", "if", "effect_arg", "[", "0", "]", "==", "\"\"", ":", "\n", "            ", "effect_arg", "=", "[", "]", "\n", "", "return", "effect_arg", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.PddlAction.task_args": [[233, 245], ["ValueError", "zip", "zip"], "methods", ["None"], ["", "@", "property", "\n", "def", "task_args", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "is_bound", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Trying to fetch task arguments when task is not yet bound\"", "\n", ")", "\n", "", "return", "{", "\n", "**", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "self", ".", "parameters", ",", "self", ".", "applied_func_args", ")", "}", ",", "\n", "**", "self", ".", "_add_task_args", ",", "\n", "**", "{", "\n", "f\"orig_{k}\"", ":", "v", "\n", "for", "k", ",", "v", "in", "zip", "(", "self", ".", "parameters", ",", "self", ".", "orig_applied_func_args", ")", "\n", "}", ",", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.PddlAction.config_task_args": [[248, 251], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "config_task_args", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config_task_args", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.PddlAction.__repr__": [[252, 257], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "is_bound", ":", "\n", "            ", "return", "f\"<PddlAction: {self.name}, paras: {self.parameters} -> {self.applied_func_args}, preconds: {self.precond}, effects: {self.postcond}>\"", "\n", "", "else", ":", "\n", "            ", "return", "f\"<PddlAction: {self.name}, paras: {self.parameters}, preconds: {self.precond}, effects: {self.postcond}>\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.PddlAction.bind": [[258, 294], ["enumerate", "range", "range", "rearrange_pddl.search_for_id", "len", "len", "ValueError", "len", "rearrange_pddl.PddlAction.postcond[].bind", "len", "rearrange_pddl.PddlAction.precond[].bind", "rearrange_pddl.PddlAction._convert_arg_str", "rearrange_pddl.PddlAction._convert_arg_str"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.search_for_id", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.PddlSetState.bind", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.PddlSetState.bind", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.PddlAction._convert_arg_str", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.PddlAction._convert_arg_str"], ["", "", "def", "bind", "(", "\n", "self", ",", "args", ":", "List", "[", "str", "]", ",", "add_args", ":", "Optional", "[", "Dict", "[", "str", ",", "str", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        :param args: Args passed to the sub-task linked to this action. Must\n            match the ordering in `self.parameters`\n        :param add_args: Additional optional kwargs passed to the task.\n        \"\"\"", "\n", "\n", "if", "add_args", "is", "None", ":", "\n", "            ", "add_args", "=", "{", "}", "\n", "", "assert", "not", "self", ".", "is_bound", "\n", "self", ".", "add_args", "=", "add_args", "\n", "self", ".", "orig_applied_func_args", "=", "args", "[", ":", "]", "\n", "self", ".", "applied_func_args", "=", "args", "[", ":", "]", "\n", "if", "self", ".", "applied_func_args", "[", "0", "]", "==", "\"\"", ":", "\n", "            ", "self", ".", "applied_func_args", "=", "[", "]", "\n", "", "for", "i", ",", "k", "in", "enumerate", "(", "self", ".", "applied_func_args", ")", ":", "\n", "            ", "self", ".", "applied_func_args", "[", "i", "]", ",", "_", "=", "search_for_id", "(", "k", ",", "self", ".", "name_to_id", ")", "\n", "\n", "", "if", "len", "(", "args", ")", "!=", "len", "(", "self", ".", "parameters", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "f\"The number of arguments {args} does not match the parameters {self.parameters}\"", "\n", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "postcond_args", ")", ")", ":", "\n", "            ", "self", ".", "postcond", "[", "i", "]", ".", "bind", "(", "\n", "self", ".", "_convert_arg_str", "(", "self", ".", "postcond_args", "[", "i", "]", ",", "args", ")", "\n", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "precond_strs", ")", ")", ":", "\n", "            ", "self", ".", "precond", "[", "i", "]", ".", "bind", "(", "\n", "self", ".", "_convert_arg_str", "(", "self", ".", "precond_strs", "[", "i", "]", ",", "args", ")", "\n", ")", "\n", "\n", "", "self", ".", "is_bound", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.PddlAction._load_task": [[295, 337], ["habitat.tasks.rearrange.utils.rearrange_logger.debug", "habitat.tasks.rearrange.multi_task.task_creator_utils.create_task_object", "zip", "zip"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.task_creator_utils.create_task_object"], ["", "def", "_load_task", "(", "\n", "self", ",", "\n", "load_config", ":", "Dict", "[", "str", ",", "Any", "]", ",", "\n", "config", ":", "Config", ",", "\n", "dataset", ":", "\"RearrangeDatasetV0\"", ",", "\n", "name_to_id", ":", "Dict", "[", "str", ",", "Any", "]", ",", "\n", "env", ":", "RearrangeTask", ",", "\n", "episode", ":", "Episode", ",", "\n", "should_reset", ":", "bool", "=", "True", ",", "\n", ")", "->", "RearrangeTask", ":", "\n", "        ", "if", "\"task\"", "not", "in", "load_config", ":", "\n", "            ", "return", "None", "\n", "", "func_kwargs", "=", "{", "\n", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "self", ".", "parameters", ",", "self", ".", "applied_func_args", ")", "\n", "}", "\n", "task_kwargs", "=", "{", "\n", "\"task_name\"", ":", "load_config", "[", "\"task\"", "]", ",", "\n", "**", "func_kwargs", ",", "\n", "**", "self", ".", "add_args", ",", "\n", "**", "self", ".", "_add_task_args", ",", "\n", "**", "{", "\n", "\"orig_applied_args\"", ":", "{", "\n", "k", ":", "v", "\n", "for", "k", ",", "v", "in", "zip", "(", "\n", "self", ".", "parameters", ",", "self", ".", "orig_applied_func_args", "\n", ")", "\n", "}", "\n", "}", ",", "\n", "}", "\n", "rearrange_logger", ".", "debug", "(", "\n", "f\"Loading task {load_config['task']} with definition {load_config['task_def']}\"", "\n", ")", "\n", "return", "create_task_object", "(", "\n", "load_config", "[", "\"task\"", "]", ",", "\n", "load_config", "[", "\"task_def\"", "]", ",", "\n", "config", ",", "\n", "env", ",", "\n", "dataset", ",", "\n", "should_reset", ",", "\n", "task_kwargs", ",", "\n", "episode", ",", "\n", "self", ".", "config_task_args", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.PddlAction.init_task": [[339, 343], ["rearrange_pddl.PddlAction.load_task_fn"], "methods", ["None"], ["", "def", "init_task", "(", "\n", "self", ",", "env", ":", "RearrangeTask", ",", "episode", ":", "Episode", ",", "should_reset", "=", "True", "\n", ")", "->", "RearrangeTask", ":", "\n", "        ", "return", "self", ".", "load_task_fn", "(", "env", ",", "episode", ",", "should_reset", "=", "should_reset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.PddlAction._get_consistent_preds": [[344, 407], ["copy.deepcopy", "len", "len", "enumerate", "new_set_args.items", "rearrange_pddl.PddlAction._get_consistent_preds", "all_consistent_preds.extend", "all_bound_args.extend", "rearrange_pddl.search_for_id", "zip", "rearrange_pddl.PddlAction._arg_specs[].argument_matches"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.PddlAction._get_consistent_preds", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.search_for_id", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.SetStateArgSpec.argument_matches"], ["", "def", "_get_consistent_preds", "(", "\n", "self", ",", "\n", "all_matches", ",", "\n", "name_to_id", ",", "\n", "cur_pred_list", "=", "None", ",", "\n", "already_bound", "=", "None", ",", "\n", "cur_i", "=", "0", ",", "\n", ")", ":", "\n", "        ", "if", "cur_pred_list", "is", "None", ":", "\n", "            ", "cur_pred_list", "=", "[", "]", "\n", "", "if", "already_bound", "is", "None", ":", "\n", "            ", "already_bound", "=", "{", "}", "\n", "\n", "", "if", "len", "(", "cur_pred_list", ")", "==", "len", "(", "self", ".", "precond", ")", ":", "\n", "            ", "return", "[", "cur_pred_list", "]", ",", "[", "already_bound", "]", "\n", "\n", "", "cur_pred_cp", ":", "Predicate", "=", "copy", ".", "deepcopy", "(", "self", ".", "precond", "[", "cur_i", "]", ")", "\n", "all_consistent_preds", "=", "[", "]", "\n", "all_bound_args", "=", "[", "]", "\n", "for", "match", "in", "all_matches", "[", "cur_i", "]", ":", "\n", "            ", "args_match", "=", "True", "\n", "# Does this predicate conflict with any already set arguments?", "\n", "for", "i", ",", "arg", "in", "enumerate", "(", "cur_pred_cp", ".", "args", ")", ":", "\n", "                ", "if", "(", "\n", "arg", "in", "already_bound", "\n", "and", "already_bound", "[", "arg", "]", "!=", "match", ".", "set_args", "[", "i", "]", "\n", ")", ":", "\n", "                    ", "args_match", "=", "False", "\n", "break", "\n", "", "", "if", "not", "args_match", ":", "\n", "                ", "continue", "\n", "", "new_set_args", "=", "{", "\n", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "cur_pred_cp", ".", "args", ",", "match", ".", "set_args", ")", "\n", "}", "\n", "\n", "# Do these predicates work with this action?", "\n", "all_arg_spec_match", "=", "True", "\n", "for", "param_name", ",", "assign_name", "in", "new_set_args", ".", "items", "(", ")", ":", "\n", "                ", "action_param_name", "=", "self", ".", "_precond_arg_to_action_arg", "[", "param_name", "]", "\n", "assign_name", ",", "assign_type", "=", "search_for_id", "(", "\n", "assign_name", ",", "name_to_id", "\n", ")", "\n", "if", "(", "\n", "action_param_name", "in", "self", ".", "_arg_specs", "\n", "and", "not", "self", ".", "_arg_specs", "[", "\n", "action_param_name", "\n", "]", ".", "argument_matches", "(", "assign_name", ",", "assign_type", ")", "\n", ")", ":", "\n", "                    ", "all_arg_spec_match", "=", "False", "\n", "break", "\n", "", "", "if", "not", "all_arg_spec_match", ":", "\n", "                ", "continue", "\n", "\n", "", "pred_result", ",", "bound_args", "=", "self", ".", "_get_consistent_preds", "(", "\n", "all_matches", ",", "\n", "name_to_id", ",", "\n", "[", "*", "cur_pred_list", ",", "match", "]", ",", "\n", "{", "**", "already_bound", ",", "**", "new_set_args", "}", ",", "\n", "cur_i", "+", "1", ",", "\n", ")", "\n", "all_consistent_preds", ".", "extend", "(", "pred_result", ")", "\n", "all_bound_args", ".", "extend", "(", "bound_args", ")", "\n", "", "return", "all_consistent_preds", ",", "all_bound_args", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.PddlAction.get_possible_actions": [[408, 468], ["rearrange_pddl.PddlAction._get_consistent_preds", "habitat.tasks.rearrange.utils.rearrange_logger.debug", "all_matches.append", "len", "len", "rearrange_pddl.PddlAction.copy_new", "rearrange_pddl.PddlAction.bind", "consistent_actions.append", "range", "name_to_id.keys", "len", "all_set_args[].append", "range", "rearrange_pddl.search_for_id", "rearrange_pddl.PddlAction._arg_specs[].argument_matches", "ok_entities.append", "len"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.PddlAction._get_consistent_preds", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.PddlAction.copy_new", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.PddlSetState.bind", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.search_for_id", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.SetStateArgSpec.argument_matches"], ["", "def", "get_possible_actions", "(", "\n", "self", ",", "preds", ":", "List", "[", "Predicate", "]", ",", "name_to_id", ":", "Dict", "[", "str", ",", "Any", "]", "\n", ")", "->", "List", "[", "PddlAction", "]", ":", "\n", "        ", "\"\"\"\n        Returns grounded actions that are possible in the current predicate state.\n        :param preds: List of currently True predicates.\n        :returns: List of bound actions that can currently be applied.\n        \"\"\"", "\n", "all_matches", "=", "[", "]", "\n", "for", "precond", "in", "self", ".", "precond", ":", "\n", "            ", "all_matches", ".", "append", "(", "\n", "[", "\n", "other_pred", "\n", "for", "other_pred", "in", "preds", "\n", "if", "other_pred", ".", "name", "==", "precond", ".", "name", "\n", "]", "\n", ")", "\n", "\n", "", "consistent_preds", ",", "all_bound_args", "=", "self", ".", "_get_consistent_preds", "(", "\n", "all_matches", ",", "\n", "name_to_id", ",", "\n", ")", "\n", "rearrange_logger", ".", "debug", "(", "f\"Got consistent preds {consistent_preds}\"", ")", "\n", "consistent_actions", "=", "[", "]", "\n", "\n", "for", "bound_args", "in", "all_bound_args", ":", "\n", "# Extract out the set arguments from consistent_preds", "\n", "            ", "all_set_args", "=", "[", "[", "]", "]", "\n", "\n", "for", "action_param_name", "in", "self", ".", "parameters", ":", "\n", "                ", "if", "action_param_name", "in", "self", ".", "_action_arg_to_precond_arg", ":", "\n", "# Assign the predicate", "\n", "                    ", "precond_arg", "=", "self", ".", "_action_arg_to_precond_arg", "[", "\n", "action_param_name", "\n", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "all_set_args", ")", ")", ":", "\n", "                        ", "all_set_args", "[", "i", "]", ".", "append", "(", "bound_args", "[", "precond_arg", "]", ")", "\n", "", "", "else", ":", "\n", "# Assign all possible values to to the empty action", "\n", "# parameter.", "\n", "                    ", "ok_entities", "=", "[", "]", "\n", "for", "entity_name", "in", "name_to_id", ".", "keys", "(", ")", ":", "\n", "                        ", "entity_type", "=", "search_for_id", "(", "entity_name", ",", "name_to_id", ")", "[", "1", "]", "\n", "if", "(", "\n", "action_param_name", "in", "self", ".", "_arg_specs", "\n", "and", "self", ".", "_arg_specs", "[", "\n", "action_param_name", "\n", "]", ".", "argument_matches", "(", "entity_name", ",", "entity_type", ")", "\n", ")", ":", "\n", "                            ", "ok_entities", ".", "append", "(", "entity_name", ")", "\n", "", "", "for", "entity", "in", "ok_entities", ":", "\n", "                        ", "for", "i", "in", "range", "(", "len", "(", "all_set_args", ")", ")", ":", "\n", "                            ", "all_set_args", "[", "i", "]", "=", "[", "*", "all_set_args", "[", "i", "]", ",", "entity", "]", "\n", "", "", "", "", "if", "len", "(", "all_set_args", "[", "0", "]", ")", "!=", "len", "(", "self", ".", "parameters", ")", ":", "\n", "                ", "continue", "\n", "", "for", "set_args", "in", "all_set_args", ":", "\n", "                ", "action", "=", "self", ".", "copy_new", "(", ")", "\n", "action", ".", "bind", "(", "set_args", ")", "\n", "consistent_actions", ".", "append", "(", "action", ")", "\n", "", "", "return", "consistent_actions", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.PddlAction.calculate_postconditions": [[469, 510], ["copy.deepcopy", "enumerate", "pred.name.startswith", "pred.name.startswith", "pred.name.startswith", "copy.deepcopy.append", "pred.name.split", "other_pred.name.split"], "methods", ["None"], ["", "def", "calculate_postconditions", "(", "\n", "self", ",", "preds", ":", "List", "[", "Predicate", "]", "\n", ")", "->", "List", "[", "Predicate", "]", ":", "\n", "        ", "\"\"\"\n        Applies the post-conditons of the action to the list of currently true predicates.\n\n        :param preds: Set of all True predicates.\n        :returns: Set of all true predicates after applying post conditions.\n        \"\"\"", "\n", "new_preds", "=", "copy", ".", "deepcopy", "(", "preds", ")", "\n", "for", "pred", "in", "self", ".", "postcond", ":", "\n", "            ", "if", "(", "\n", "pred", ".", "name", ".", "startswith", "(", "\"open\"", ")", "\n", "or", "pred", ".", "name", ".", "startswith", "(", "\"closed\"", ")", "\n", "or", "pred", ".", "name", ".", "startswith", "(", "\"not\"", ")", "\n", ")", ":", "\n", "                ", "base_name", "=", "\"_\"", ".", "join", "(", "pred", ".", "name", ".", "split", "(", "\"_\"", ")", "[", "1", ":", "]", ")", "\n", "", "else", ":", "\n", "                ", "base_name", "=", "None", "\n", "", "found", "=", "False", "\n", "for", "i", ",", "other_pred", "in", "enumerate", "(", "preds", ")", ":", "\n", "                ", "other_base_name", "=", "\"_\"", ".", "join", "(", "other_pred", ".", "name", ".", "split", "(", "\"_\"", ")", "[", "1", ":", "]", ")", "\n", "if", "pred", ".", "name", "==", "other_pred", ".", "name", ":", "\n", "# Override", "\n", "                    ", "new_preds", "[", "i", "]", "=", "pred", "\n", "found", "=", "True", "\n", "break", "\n", "", "if", "base_name", "is", "not", "None", "and", "other_base_name", "==", "base_name", ":", "\n", "                    ", "new_preds", "[", "i", "]", "=", "pred", "\n", "found", "=", "True", "\n", "break", "\n", "", "if", "(", "\n", "base_name", "==", "other_pred", ".", "name", "\n", "or", "other_base_name", "==", "pred", ".", "name", "\n", ")", ":", "\n", "                    ", "new_preds", "[", "i", "]", "=", "pred", "\n", "found", "=", "True", "\n", "break", "\n", "", "", "if", "not", "found", ":", "\n", "                ", "new_preds", ".", "append", "(", "pred", ")", "\n", "", "", "return", "new_preds", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.PddlAction.apply": [[511, 517], ["rearrange_pddl.PddlAction._apply_effect"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.PddlAction._apply_effect"], ["", "def", "apply", "(", "self", ",", "name_to_id", ":", "Dict", "[", "str", ",", "Any", "]", ",", "sim", ":", "RearrangeSim", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Applies the effects of all the post conditions.\n        \"\"\"", "\n", "for", "postcond", "in", "self", ".", "postcond", ":", "\n", "            ", "self", ".", "_apply_effect", "(", "postcond", ",", "name_to_id", ",", "sim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.PddlAction._apply_effect": [[518, 521], ["set_state.set_state"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.set_state"], ["", "", "def", "_apply_effect", "(", "self", ",", "postcond", ",", "name_to_id", ",", "sim", ")", ":", "\n", "        ", "set_state", "=", "postcond", ".", "set_state", "\n", "set_state", ".", "set_state", "(", "name_to_id", ",", "sim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.PddlRobotState.__init__": [[528, 531], ["load_config.get", "load_config.get"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get"], ["def", "__init__", "(", "self", ",", "load_config", ")", ":", "\n", "        ", "self", ".", "holding", "=", "load_config", ".", "get", "(", "\"holding\"", ",", "None", ")", "\n", "self", ".", "pos", "=", "load_config", ".", "get", "(", "\"pos\"", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.PddlRobotState.bind": [[532, 538], ["zip", "rearrange_pddl.PddlRobotState.holding.replace", "rearrange_pddl.PddlRobotState.pos.replace"], "methods", ["None"], ["", "def", "bind", "(", "self", ",", "arg_k", ",", "arg_v", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "zip", "(", "arg_k", ",", "arg_v", ")", ":", "\n", "            ", "if", "self", ".", "holding", "is", "not", "None", ":", "\n", "                ", "self", ".", "holding", "=", "self", ".", "holding", ".", "replace", "(", "k", ",", "v", ")", "\n", "", "if", "self", ".", "pos", "is", "not", "None", ":", "\n", "                ", "self", ".", "pos", "=", "self", ".", "pos", ".", "replace", "(", "k", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.PddlRobotState.is_satisfied": [[539, 566], ["rearrange_pddl.search_for_id", "isinstance", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.search_for_id"], ["", "", "", "def", "is_satisfied", "(", "self", ",", "name_to_id", ":", "Dict", "[", "str", ",", "Any", "]", ",", "sim", ")", "->", "bool", ":", "\n", "        ", "\"\"\"\n        Returns if the desired robot state is currently true in the simulator state.\n        \"\"\"", "\n", "if", "self", ".", "holding", "!=", "\"NONE\"", "and", "self", ".", "holding", "is", "not", "None", ":", "\n", "# Robot must be holding desired object.", "\n", "            ", "match_name", ",", "match_type", "=", "search_for_id", "(", "self", ".", "holding", ",", "name_to_id", ")", "\n", "\n", "if", "match_type", "!=", "RearrangeObjectTypes", ".", "RIGID_OBJECT", ":", "\n", "# We can only hold rigid objects.", "\n", "                ", "return", "False", "\n", "\n", "", "if", "self", ".", "holding", "not", "in", "name_to_id", ":", "\n", "                ", "raise", "ValueError", "(", "f\"Cannot find {self.holding} in {name_to_id}\"", ")", "\n", "", "obj_idx", "=", "name_to_id", "[", "self", ".", "holding", "]", "\n", "if", "isinstance", "(", "obj_idx", ",", "str", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "f\"Current holding object {obj_idx} is not a scene object index\"", "\n", ")", "\n", "\n", "", "abs_obj_id", "=", "sim", ".", "scene_obj_ids", "[", "obj_idx", "]", "\n", "if", "sim", ".", "grasp_mgr", ".", "snap_idx", "!=", "abs_obj_id", ":", "\n", "                ", "return", "False", "\n", "", "", "elif", "self", ".", "holding", "==", "\"NONE\"", "and", "sim", ".", "grasp_mgr", ".", "snap_idx", "!=", "None", ":", "\n", "# For predicate to be true, robot must be holding nothing", "\n", "            ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.SetStateArgSpec.__init__": [[573, 580], ["rearrange_pddl.RearrangeObjectTypes"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "name_match", ":", "str", "=", "\"\"", ",", "type_match", ":", "Optional", "[", "List", "[", "str", "]", "]", "=", "None", "\n", ")", ":", "\n", "        ", "self", ".", "name_match", ":", "str", "=", "name_match", "\n", "self", ".", "type_match", ":", "Optional", "[", "List", "[", "RearrangeObjectTypes", "]", "]", "=", "None", "\n", "if", "type_match", "is", "not", "None", ":", "\n", "            ", "self", ".", "type_match", "=", "[", "RearrangeObjectTypes", "(", "x", ")", "for", "x", "in", "type_match", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.SetStateArgSpec.__repr__": [[581, 583], ["id"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "f\"SetStateArgSpec {id(self)}: name_match={self.name_match}, type_match={self.type_match}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.SetStateArgSpec.argument_matches": [[584, 595], ["isinstance", "arg_name.startswith"], "methods", ["None"], ["", "def", "argument_matches", "(", "\n", "self", ",", "arg_name", ":", "Any", ",", "arg_type", ":", "RearrangeObjectTypes", "\n", ")", "->", "bool", ":", "\n", "        ", "if", "self", ".", "name_match", "!=", "\"\"", ":", "\n", "            ", "if", "not", "isinstance", "(", "arg_name", ",", "str", ")", ":", "\n", "                ", "return", "False", "\n", "", "if", "not", "arg_name", ".", "startswith", "(", "self", ".", "name_match", ")", ":", "\n", "                ", "return", "False", "\n", "", "", "if", "self", ".", "type_match", "is", "not", "None", "and", "arg_type", "not", "in", "self", ".", "type_match", ":", "\n", "            ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.PddlSetState.__init__": [[605, 622], ["load_config.get", "load_config.get", "collections.defaultdict", "rearrange_pddl.PddlSetState.check_for_art_link_match.update", "rearrange_pddl.PddlRobotState", "load_config.get", "load_config.get", "rearrange_pddl.SetStateArgSpec"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.il.metrics.Metric.update", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get"], ["def", "__init__", "(", "self", ",", "load_config", ":", "Dict", "[", "str", ",", "Any", "]", ")", ":", "\n", "        ", "self", ".", "art_states", "=", "load_config", ".", "get", "(", "\"art_states\"", ",", "{", "}", ")", "\n", "self", ".", "obj_states", "=", "load_config", ".", "get", "(", "\"obj_states\"", ",", "{", "}", ")", "\n", "\n", "self", ".", "check_for_art_link_match", ":", "DefaultDict", "[", "str", ",", "bool", "]", "=", "defaultdict", "(", "\n", "lambda", ":", "False", "\n", ")", "\n", "self", ".", "check_for_art_link_match", ".", "update", "(", "\n", "load_config", ".", "get", "(", "\"check_for_art_link_match\"", ",", "{", "}", ")", "\n", ")", "\n", "\n", "self", ".", "robo_state", "=", "PddlRobotState", "(", "load_config", ".", "get", "(", "\"robo\"", ",", "{", "}", ")", ")", "\n", "self", ".", "load_config", "=", "load_config", "\n", "\n", "self", ".", "arg_spec", ":", "Optional", "[", "SetStateArgSpec", "]", "=", "None", "\n", "if", "\"arg_spec\"", "in", "load_config", ":", "\n", "            ", "self", ".", "arg_spec", "=", "SetStateArgSpec", "(", "**", "load_config", "[", "\"arg_spec\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.PddlSetState.bind": [[623, 650], ["zip", "rearrange_pddl.PddlSetState.robo_state.bind", "l.items", "rearrange_pddl.PddlSetState.bind.list_replace"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.PddlSetState.bind"], ["", "", "def", "bind", "(", "self", ",", "arg_k", ":", "List", "[", "str", "]", ",", "arg_v", ":", "List", "[", "str", "]", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Defines a state in the environment grounded in scene entities.\n        :param arg_k: The names of the environment parameters to set.\n        :param arg_v: The values of the environment parameters to set.\n        \"\"\"", "\n", "\n", "def", "list_replace", "(", "l", ",", "k", ",", "v", ")", ":", "\n", "            ", "new_l", "=", "{", "}", "\n", "for", "l_k", ",", "l_v", "in", "l", ".", "items", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "l_k", ",", "str", ")", ":", "\n", "                    ", "l_k", "=", "l_k", ".", "replace", "(", "k", ",", "v", ")", "\n", "", "if", "isinstance", "(", "l_v", ",", "str", ")", ":", "\n", "                    ", "l_v", "=", "l_v", ".", "replace", "(", "k", ",", "v", ")", "\n", "", "new_l", "[", "l_k", "]", "=", "l_v", "\n", "", "return", "new_l", "\n", "\n", "", "for", "k", ",", "v", "in", "zip", "(", "arg_k", ",", "arg_v", ")", ":", "\n", "            ", "self", ".", "art_states", "=", "list_replace", "(", "self", ".", "art_states", ",", "k", ",", "v", ")", "\n", "self", ".", "obj_states", "=", "list_replace", "(", "self", ".", "obj_states", ",", "k", ",", "v", ")", "\n", "if", "\"catch_ids\"", "in", "self", ".", "load_config", ":", "\n", "                ", "self", ".", "load_config", "[", "\"catch_ids\"", "]", "=", "self", ".", "load_config", "[", "\n", "\"catch_ids\"", "\n", "]", ".", "replace", "(", "k", ",", "v", ")", "\n", "\n", "", "", "self", ".", "robo_state", ".", "bind", "(", "arg_k", ",", "arg_v", ")", "\n", "self", ".", "_set_args", "=", "arg_v", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.PddlSetState._is_id_rigid_object": [[651, 656], ["id_str.startswith", "id_str.startswith"], "methods", ["None"], ["", "def", "_is_id_rigid_object", "(", "self", ",", "id_str", ":", "str", ")", "->", "bool", ":", "\n", "        ", "\"\"\"\n        Used to check if an identifier can be used to look up the object ID in the scene_ojbs_id list of the simulator.\n        \"\"\"", "\n", "return", "not", "(", "id_str", ".", "startswith", "(", "\"ART_\"", ")", "or", "id_str", ".", "startswith", "(", "\"MARKER_\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.PddlSetState._is_object_inside": [[657, 687], ["rearrange_pddl.search_for_id", "int", "rearrange_pddl.search_for_id", "sim.get_marker", "len", "habitat.tasks.rearrange.utils.rearrange_logger.debug", "list().index", "int", "list", "sim.get_targets"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.search_for_id", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.search_for_id", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.get_marker", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.get_targets"], ["", "def", "_is_object_inside", "(", "self", ",", "obj_name", ",", "target", ",", "name_to_id", ",", "sim", ")", ":", "\n", "        ", "obj_name", ",", "obj_type", "=", "search_for_id", "(", "obj_name", ",", "name_to_id", ")", "\n", "if", "obj_type", "==", "RearrangeObjectTypes", ".", "GOAL_POSITION", ":", "\n", "            ", "use_receps", "=", "sim", ".", "ep_info", "[", "\"goal_receptacles\"", "]", "\n", "", "elif", "obj_type", "==", "RearrangeObjectTypes", ".", "RIGID_OBJECT", ":", "\n", "            ", "use_receps", "=", "sim", ".", "ep_info", "[", "\"target_receptacles\"", "]", "\n", "obj_name", "=", "list", "(", "sim", ".", "get_targets", "(", ")", "[", "0", "]", ")", ".", "index", "(", "int", "(", "obj_name", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "", "obj_idx", "=", "int", "(", "obj_name", ")", "\n", "\n", "target_name", ",", "target_type", "=", "search_for_id", "(", "target", ",", "name_to_id", ")", "\n", "if", "target_type", "!=", "RearrangeObjectTypes", ".", "ARTICULATED_LINK", ":", "\n", "            ", "return", "False", "\n", "", "check_marker", "=", "sim", ".", "get_marker", "(", "target_name", ")", "\n", "\n", "if", "obj_idx", ">=", "len", "(", "use_receps", ")", ":", "\n", "            ", "rearrange_logger", ".", "debug", "(", "\n", "f\"Could not find object {obj_name} in {use_receps}\"", "\n", ")", "\n", "return", "False", "\n", "\n", "", "recep_name", ",", "recep_link_id", "=", "use_receps", "[", "obj_idx", "]", "\n", "if", "self", ".", "check_for_art_link_match", "[", "target_name", "]", "and", "(", "\n", "recep_link_id", "!=", "check_marker", ".", "link_id", "\n", ")", ":", "\n", "            ", "return", "False", "\n", "", "if", "recep_name", "!=", "check_marker", ".", "ao_parent", ".", "handle", ":", "\n", "            ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.PddlSetState.is_satisfied": [[688, 770], ["sim.get_rigid_object_manager", "rearrange_pddl.PddlSetState.obj_states.items", "rearrange_pddl.PddlSetState.art_states.items", "sim.get_targets", "numpy.linalg.norm", "rearrange_pddl.search_for_id", "isinstance", "rearrange_pddl.PddlSetState.robo_state.is_satisfied", "rearrange_pddl.search_for_id", "rearrange_pddl.PddlSetState._is_id_rigid_object", "rearrange_pddl.PddlSetState._is_object_inside", "rearrange_pddl.PddlSetState._is_id_rigid_object", "eval", "eval.is_satisfied", "numpy.array", "numpy.array", "numpy.linalg.norm", "rearrange_pddl.PddlSetState.arg_spec.argument_matches", "rearrange_pddl.PddlSetState._is_id_rigid_object", "sim.get_rigid_object_manager.get_object_by_id", "list().index", "sim.get_marker", "sim.get_marker.get_targ_js", "isinstance", "ValueError", "list"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.get_targets", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.search_for_id", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.ArtSampler.is_satisfied", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.search_for_id", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.PddlSetState._is_id_rigid_object", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.PddlSetState._is_object_inside", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.PddlSetState._is_id_rigid_object", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_trainer.BaseTrainer.eval", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.ArtSampler.is_satisfied", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.SetStateArgSpec.argument_matches", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.PddlSetState._is_id_rigid_object", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.get_marker", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.marker_info.MarkerInfo.get_targ_js"], ["", "def", "is_satisfied", "(", "\n", "self", ",", "\n", "name_to_id", ":", "Dict", "[", "str", ",", "Any", "]", ",", "\n", "sim", ":", "RearrangeSim", ",", "\n", "obj_thresh", ":", "float", ",", "\n", "art_thresh", ":", "float", ",", "\n", ")", "->", "bool", ":", "\n", "        ", "\"\"\"\n        Returns True if the grounded state is present in the current simulator state.\n        Also returns False if the arguments are incompatible. For example if input argument is supposed to be a cabinet, but the passed argument is a rigid object name.\n        \"\"\"", "\n", "if", "self", ".", "arg_spec", "is", "not", "None", ":", "\n", "            ", "for", "arg_name", "in", "self", ".", "_set_args", ":", "\n", "                ", "match_name", ",", "match_type", "=", "search_for_id", "(", "arg_name", ",", "name_to_id", ")", "\n", "if", "not", "self", ".", "arg_spec", ".", "argument_matches", "(", "match_name", ",", "match_type", ")", ":", "\n", "                    ", "return", "False", "\n", "\n", "", "", "", "rom", "=", "sim", ".", "get_rigid_object_manager", "(", ")", "\n", "for", "obj_name", ",", "target", "in", "self", ".", "obj_states", ".", "items", "(", ")", ":", "\n", "            ", "if", "self", ".", "_is_id_rigid_object", "(", "\n", "obj_name", "\n", ")", "and", "not", "self", ".", "_is_id_rigid_object", "(", "target", ")", ":", "\n", "# object is rigid and target is receptacle, we are checking if", "\n", "# an object is inside of a receptacle.", "\n", "                ", "if", "self", ".", "_is_object_inside", "(", "obj_name", ",", "target", ",", "name_to_id", ",", "sim", ")", ":", "\n", "                    ", "continue", "\n", "", "else", ":", "\n", "                    ", "return", "False", "\n", "\n", "", "", "if", "not", "self", ".", "_is_id_rigid_object", "(", "obj_name", ")", ":", "\n", "# Invalid predicate", "\n", "                ", "return", "False", "\n", "\n", "", "obj_idx", "=", "name_to_id", "[", "obj_name", "]", "\n", "abs_obj_id", "=", "sim", ".", "scene_obj_ids", "[", "obj_idx", "]", "\n", "cur_pos", "=", "rom", ".", "get_object_by_id", "(", "\n", "abs_obj_id", "\n", ")", ".", "transformation", ".", "translation", "\n", "\n", "targ_idx", "=", "name_to_id", "[", "target", "]", "\n", "idxs", ",", "pos_targs", "=", "sim", ".", "get_targets", "(", ")", "\n", "targ_pos", "=", "pos_targs", "[", "list", "(", "idxs", ")", ".", "index", "(", "targ_idx", ")", "]", "\n", "\n", "dist", "=", "np", ".", "linalg", ".", "norm", "(", "cur_pos", "-", "targ_pos", ")", "\n", "if", "dist", ">=", "obj_thresh", ":", "\n", "                ", "return", "False", "\n", "\n", "", "", "for", "art_name", ",", "set_art", "in", "self", ".", "art_states", ".", "items", "(", ")", ":", "\n", "            ", "match_name", ",", "match_type", "=", "search_for_id", "(", "art_name", ",", "name_to_id", ")", "\n", "if", "match_type", "==", "RearrangeObjectTypes", ".", "ARTICULATED_OBJECT", ":", "\n", "                ", "art_obj", "=", "sim", ".", "art_objs", "[", "match_name", "]", "\n", "prev_art_pos", "=", "art_obj", ".", "joint_positions", "\n", "", "elif", "match_type", "==", "RearrangeObjectTypes", ".", "ARTICULATED_LINK", ":", "\n", "                ", "marker", "=", "sim", ".", "get_marker", "(", "match_name", ")", "\n", "prev_art_pos", "=", "marker", ".", "get_targ_js", "(", ")", "\n", "", "else", ":", "\n", "# This is not a compatible argument type to the function", "\n", "                ", "return", "False", "\n", "\n", "", "if", "isinstance", "(", "set_art", ",", "str", ")", ":", "\n", "                ", "art_sampler", "=", "eval", "(", "set_art", ")", "\n", "if", "not", "isinstance", "(", "art_sampler", ",", "ArtSampler", ")", ":", "\n", "                    ", "raise", "ValueError", "(", "\n", "f\"Set art state is not an ArtSampler: {set_art}\"", "\n", ")", "\n", "", "did_sat", "=", "art_sampler", ".", "is_satisfied", "(", "prev_art_pos", ")", "\n", "", "else", ":", "\n", "                ", "prev_art_pos", "=", "np", ".", "array", "(", "prev_art_pos", ")", "\n", "set_art", "=", "np", ".", "array", "(", "set_art", ")", "\n", "if", "prev_art_pos", ".", "shape", "!=", "set_art", ".", "shape", ":", "\n", "# This type of receptacle is not a compatible input", "\n", "                    ", "return", "False", "\n", "", "art_dist", "=", "np", ".", "linalg", ".", "norm", "(", "prev_art_pos", "-", "set_art", ")", "\n", "did_sat", "=", "art_dist", "<", "art_thresh", "\n", "\n", "", "if", "not", "did_sat", ":", "\n", "                ", "return", "False", "\n", "\n", "", "", "if", "not", "self", ".", "robo_state", ".", "is_satisfied", "(", "name_to_id", ",", "sim", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.PddlSetState.set_state": [[771, 832], ["rearrange_pddl.PddlSetState.obj_states.items", "rearrange_pddl.PddlSetState.art_states.items", "sim.get_rigid_object_manager", "sim.get_rigid_object_manager.get_object_by_id", "rearrange_pddl.search_for_id", "sim.internal_step", "sim.grasp_mgr.desnap", "sim.set_robot_base_to_random_point", "sim.get_targets", "magnum.Matrix4.translation", "ValueError", "art_obj.clear_joint_states", "sim.grasp_mgr.desnap", "sim.internal_step", "sim.grasp_mgr.snap_to_obj", "sim.internal_step", "sim.get_marker", "isinstance", "ValueError", "list().index", "eval", "sim.get_marker.set_targ_js", "sim.get_marker.set_targ_js", "isinstance", "ValueError", "eval.sample", "list"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.search_for_id", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.internal_step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_grasp_manager.RearrangeGraspManager.desnap", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.set_robot_base_to_random_point", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.get_targets", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_grasp_manager.RearrangeGraspManager.desnap", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.internal_step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_grasp_manager.RearrangeGraspManager.snap_to_obj", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.internal_step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.get_marker", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_trainer.BaseTrainer.eval", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.marker_info.MarkerInfo.set_targ_js", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.marker_info.MarkerInfo.set_targ_js", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.sample"], ["", "def", "set_state", "(", "self", ",", "name_to_id", ":", "Dict", "[", "str", ",", "Any", "]", ",", "sim", ":", "RearrangeSim", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Set this state in the simulator. Warning, this steps the simulator.\n        \"\"\"", "\n", "for", "obj_name", ",", "target", "in", "self", ".", "obj_states", ".", "items", "(", ")", ":", "\n", "            ", "obj_idx", "=", "name_to_id", "[", "obj_name", "]", "\n", "abs_obj_id", "=", "sim", ".", "scene_obj_ids", "[", "obj_idx", "]", "\n", "\n", "if", "target", "in", "name_to_id", ":", "\n", "                ", "targ_idx", "=", "name_to_id", "[", "target", "]", "\n", "all_targ_idxs", ",", "pos_targs", "=", "sim", ".", "get_targets", "(", ")", "\n", "targ_pos", "=", "pos_targs", "[", "list", "(", "all_targ_idxs", ")", ".", "index", "(", "targ_idx", ")", "]", "\n", "set_T", "=", "mn", ".", "Matrix4", ".", "translation", "(", "targ_pos", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Not supported\"", ")", "\n", "\n", "# Get the object id corresponding to this name", "\n", "", "rom", "=", "sim", ".", "get_rigid_object_manager", "(", ")", "\n", "set_obj", "=", "rom", ".", "get_object_by_id", "(", "abs_obj_id", ")", "\n", "set_obj", ".", "transformation", "=", "set_T", "\n", "\n", "", "for", "art_name", ",", "set_art", "in", "self", ".", "art_states", ".", "items", "(", ")", ":", "\n", "            ", "match_name", ",", "match_type", "=", "search_for_id", "(", "art_name", ",", "name_to_id", ")", "\n", "if", "match_type", "==", "RearrangeObjectTypes", ".", "ARTICULATED_OBJECT", ":", "\n", "                ", "art_obj", "=", "sim", ".", "art_objs", "[", "match_name", "]", "\n", "\n", "art_obj", ".", "clear_joint_states", "(", ")", "\n", "\n", "art_obj", ".", "joint_positions", "=", "set_art", "\n", "", "elif", "match_type", "==", "RearrangeObjectTypes", ".", "ARTICULATED_LINK", ":", "\n", "                ", "marker", "=", "sim", ".", "get_marker", "(", "match_name", ")", "\n", "if", "isinstance", "(", "set_art", ",", "str", ")", ":", "\n", "                    ", "art_sampler", "=", "eval", "(", "set_art", ")", "\n", "if", "not", "isinstance", "(", "art_sampler", ",", "ArtSampler", ")", ":", "\n", "                        ", "raise", "ValueError", "(", "\n", "f\"Set art state is not an ArtSampler: {set_art}\"", "\n", ")", "\n", "", "marker", ".", "set_targ_js", "(", "art_sampler", ".", "sample", "(", ")", ")", "\n", "", "else", ":", "\n", "                    ", "marker", ".", "set_targ_js", "(", "set_art", ")", "\n", "", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "f\"Unrecognized type {match_type} and name {match_name} from {art_name}\"", "\n", ")", "\n", "\n", "", "sim", ".", "internal_step", "(", "-", "1", ")", "\n", "\n", "# Set the snapped object information", "\n", "", "if", "self", ".", "robo_state", ".", "holding", "==", "\"NONE\"", "and", "sim", ".", "grasp_mgr", ".", "is_grasped", ":", "\n", "            ", "sim", ".", "grasp_mgr", ".", "desnap", "(", "True", ")", "\n", "", "elif", "self", ".", "robo_state", ".", "holding", "is", "not", "None", ":", "\n", "# Swap objects to the desired object.", "\n", "            ", "rel_obj_idx", "=", "name_to_id", "[", "self", ".", "robo_state", ".", "holding", "]", "\n", "sim", ".", "grasp_mgr", ".", "desnap", "(", "True", ")", "\n", "sim", ".", "internal_step", "(", "-", "1", ")", "\n", "sim", ".", "grasp_mgr", ".", "snap_to_obj", "(", "sim", ".", "scene_obj_ids", "[", "rel_obj_idx", "]", ")", "\n", "sim", ".", "internal_step", "(", "-", "1", ")", "\n", "\n", "# Set the robot starting position", "\n", "", "if", "self", ".", "robo_state", ".", "pos", "==", "\"rnd\"", ":", "\n", "            ", "sim", ".", "set_robot_base_to_random_point", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.ArtSampler.__init__": [[835, 838], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "value", ",", "cmp", ")", ":", "\n", "        ", "self", ".", "value", "=", "value", "\n", "self", ".", "cmp", "=", "cmp", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.ArtSampler.is_satisfied": [[839, 846], ["ValueError"], "methods", ["None"], ["", "def", "is_satisfied", "(", "self", ",", "cur_value", ")", ":", "\n", "        ", "if", "self", ".", "cmp", "==", "\"greater\"", ":", "\n", "            ", "return", "cur_value", ">", "self", ".", "value", "\n", "", "elif", "self", ".", "cmp", "==", "\"less\"", ":", "\n", "            ", "return", "cur_value", "<", "self", ".", "value", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Unrecognized cmp {self.cmp}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.ArtSampler.sample": [[847, 849], ["None"], "methods", ["None"], ["", "", "def", "sample", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "value", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.parse_func": [[40, 52], ["x.split", "[].split", "ValueError", "x.split"], "function", ["None"], ["", "def", "parse_func", "(", "x", ":", "str", ")", "->", "Tuple", "[", "str", ",", "List", "[", "str", "]", "]", ":", "\n", "    ", "\"\"\"\n    Parses out the components of a function string.\n    :returns: First element is the name of the function, second argument are the function arguments.\n    \"\"\"", "\n", "try", ":", "\n", "        ", "name", "=", "x", ".", "split", "(", "\"(\"", ")", "[", "0", "]", "\n", "args", "=", "x", ".", "split", "(", "\"(\"", ")", "[", "1", "]", ".", "split", "(", "\")\"", ")", "[", "0", "]", "\n", "", "except", "IndexError", "as", "e", ":", "\n", "        ", "raise", "ValueError", "(", "f\"Cannot parse '{x}'\"", ")", "from", "e", "\n", "\n", "", "return", "name", ",", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.search_for_id": [[61, 88], ["isinstance", "k.startswith", "k.startswith", "ValueError", "k.startswith"], "function", ["None"], ["", "def", "search_for_id", "(", "\n", "k", ":", "str", ",", "name_to_id", ":", "Dict", "[", "str", ",", "Any", "]", "\n", ")", "->", "Tuple", "[", "Any", ",", "RearrangeObjectTypes", "]", ":", "\n", "    ", "\"\"\"\n    Checks if an object exists in the name to ID conversion. This automatically\n    checks for ART prefixes as well.\n    \"\"\"", "\n", "ret_id", "=", "k", "\n", "if", "isinstance", "(", "k", ",", "str", ")", ":", "\n", "        ", "if", "k", "not", "in", "name_to_id", "and", "\"ART_\"", "+", "k", "in", "name_to_id", ":", "\n", "            ", "k", "=", "\"ART_\"", "+", "k", "\n", "", "elif", "k", "not", "in", "name_to_id", "and", "\"MARKER_\"", "+", "k", "in", "name_to_id", ":", "\n", "            ", "k", "=", "\"MARKER_\"", "+", "k", "\n", "\n", "", "if", "k", "not", "in", "name_to_id", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Cannot find {k} in {name_to_id}\"", ")", "\n", "", "ret_id", "=", "name_to_id", "[", "k", "]", "\n", "\n", "", "if", "k", ".", "startswith", "(", "\"TARGET_\"", ")", ":", "\n", "        ", "ret_type", "=", "RearrangeObjectTypes", ".", "GOAL_POSITION", "\n", "", "elif", "k", ".", "startswith", "(", "\"MARKER_\"", ")", ":", "\n", "        ", "ret_type", "=", "RearrangeObjectTypes", ".", "ARTICULATED_LINK", "\n", "", "elif", "k", ".", "startswith", "(", "\"ART_\"", ")", ":", "\n", "        ", "ret_type", "=", "RearrangeObjectTypes", ".", "ARTICULATED_OBJECT", "\n", "", "else", ":", "\n", "        ", "ret_type", "=", "RearrangeObjectTypes", ".", "RIGID_OBJECT", "\n", "", "return", "ret_id", ",", "ret_type", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Action.__init__": [[30, 32], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "None", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Action.reset": [[33, 39], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "None", ":", "\n", "        ", "r\"\"\"Reset method is called from ``Env`` on each reset for each new\n        episode. Goal of the method is to reset ``Action``'s state for each\n        episode.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Action.step": [[40, 49], ["None"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "Observations", ":", "\n", "        ", "r\"\"\"Step method is called from ``Env`` on each ``step``. Can call\n        simulator or task method, change task's state.\n\n        :param kwargs: optional parameters for the action, like distance/force.\n        :return: observations after taking action in the task, including ones\n            coming from a simulator.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Action.action_space": [[50, 54], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "action_space", "(", "self", ")", "->", "Space", ":", "\n", "        ", "r\"\"\"a current Action's action space.\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.SimulatorTaskAction.__init__": [[61, 66], ["None"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "*", "args", ":", "Any", ",", "config", ":", "Config", ",", "sim", ":", "Simulator", ",", "**", "kwargs", ":", "Any", "\n", ")", "->", "None", ":", "\n", "        ", "self", ".", "_config", "=", "config", "\n", "self", ".", "_sim", "=", "sim", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.SimulatorTaskAction.action_space": [[67, 70], ["habitat.core.spaces.EmptySpace"], "methods", ["None"], ["", "@", "property", "\n", "def", "action_space", "(", "self", ")", ":", "\n", "        ", "return", "EmptySpace", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.SimulatorTaskAction.reset": [[71, 73], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "None", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.SimulatorTaskAction.step": [[74, 77], ["None"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "Observations", ":", "\n", "        ", "r\"\"\"Step method is called from ``Env`` on each ``step``.\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.__init__": [[98, 101], ["embodied_task.Measure._get_uuid"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.BumpSensor._get_uuid"], ["def", "__init__", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "None", ":", "\n", "        ", "self", ".", "uuid", "=", "self", ".", "_get_uuid", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "_metric", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure._get_uuid": [[102, 104], ["None"], "methods", ["None"], ["", "def", "_get_uuid", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "str", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.reset_metric": [[105, 110], ["None"], "methods", ["None"], ["", "def", "reset_metric", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "None", ":", "\n", "        ", "r\"\"\"Reset :ref:`_metric`, this method is called from :ref:`env.Env` on\n        each reset.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.update_metric": [[111, 116], ["None"], "methods", ["None"], ["", "def", "update_metric", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "None", ":", "\n", "        ", "r\"\"\"Update :ref:`_metric`, this method is called from :ref:`env.Env`\n        on each :ref:`step() <env.Env.step()>`\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.get_metric": [[117, 123], ["None"], "methods", ["None"], ["", "def", "get_metric", "(", "self", ")", ":", "\n", "        ", "r\"\"\"..\n\n        :return: the current metric for :ref:`Measure`.\n        \"\"\"", "\n", "return", "self", ".", "_metric", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Metrics.__init__": [[128, 138], ["dict.__init__", "measure.get_metric", "measures.items"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.get_metric"], ["def", "__init__", "(", "self", ",", "measures", ":", "Dict", "[", "str", ",", "Measure", "]", ")", "->", "None", ":", "\n", "        ", "\"\"\"Constructor\n\n        :param measures: list of :ref:`Measure` whose metrics are fetched and\n            packaged.\n        \"\"\"", "\n", "data", "=", "[", "\n", "(", "uuid", ",", "measure", ".", "get_metric", "(", ")", ")", "for", "uuid", ",", "measure", "in", "measures", ".", "items", "(", ")", "\n", "]", "\n", "super", "(", ")", ".", "__init__", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measurements.__init__": [[147, 159], ["collections.OrderedDict"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "measures", ":", "Iterable", "[", "Measure", "]", ")", "->", "None", ":", "\n", "        ", "\"\"\"Constructor\n\n        :param measures: list containing :ref:`Measure`, uuid of each\n            :ref:`Measure` must be unique.\n        \"\"\"", "\n", "self", ".", "measures", "=", "OrderedDict", "(", ")", "\n", "for", "measure", "in", "measures", ":", "\n", "            ", "assert", "(", "\n", "measure", ".", "uuid", "not", "in", "self", ".", "measures", "\n", ")", ",", "\"'{}' is duplicated measure uuid\"", ".", "format", "(", "measure", ".", "uuid", ")", "\n", "self", ".", "measures", "[", "measure", ".", "uuid", "]", "=", "measure", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measurements.reset_measures": [[160, 163], ["embodied_task.Measurements.measures.values", "measure.reset_metric"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.reset_metric"], ["", "", "def", "reset_measures", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "None", ":", "\n", "        ", "for", "measure", "in", "self", ".", "measures", ".", "values", "(", ")", ":", "\n", "            ", "measure", ".", "reset_metric", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measurements.update_measures": [[164, 167], ["embodied_task.Measurements.measures.values", "measure.update_metric"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measure.update_metric"], ["", "", "def", "update_measures", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "None", ":", "\n", "        ", "for", "measure", "in", "self", ".", "measures", ".", "values", "(", ")", ":", "\n", "            ", "measure", ".", "update_metric", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measurements.get_metrics": [[168, 173], ["embodied_task.Metrics"], "methods", ["None"], ["", "", "def", "get_metrics", "(", "self", ")", "->", "Metrics", ":", "\n", "        ", "r\"\"\"Collects measurement from all :ref:`Measure`\\ s and returns it\n        packaged inside :ref:`Metrics`.\n        \"\"\"", "\n", "return", "Metrics", "(", "self", ".", "measures", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measurements._get_measure_index": [[174, 176], ["list().index", "list", "embodied_task.Measurements.measures.keys"], "methods", ["None"], ["", "def", "_get_measure_index", "(", "self", ",", "measure_name", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "measures", ".", "keys", "(", ")", ")", ".", "index", "(", "measure_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measurements.check_measure_dependencies": [[177, 198], ["embodied_task.Measurements._get_measure_index", "embodied_task.Measurements._get_measure_index"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measurements._get_measure_index", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measurements._get_measure_index"], ["", "def", "check_measure_dependencies", "(", "\n", "self", ",", "measure_name", ":", "str", ",", "dependencies", ":", "List", "[", "str", "]", "\n", ")", ":", "\n", "        ", "r\"\"\"Checks if dependencies measures are enabled and calculatethat the measure\n        :param measure_name: a name of the measure for which has dependencies.\n        :param dependencies: a list of a measure names that are required by\n        the measure.\n        :return:\n        \"\"\"", "\n", "measure_index", "=", "self", ".", "_get_measure_index", "(", "measure_name", ")", "\n", "for", "dependency_measure", "in", "dependencies", ":", "\n", "            ", "assert", "(", "\n", "dependency_measure", "in", "self", ".", "measures", "\n", ")", ",", "f\"\"\"{measure_name} measure requires {dependency_measure}\n                listed in the measures list in the config.\"\"\"", "\n", "\n", "", "for", "dependency_measure", "in", "dependencies", ":", "\n", "            ", "assert", "measure_index", ">", "self", ".", "_get_measure_index", "(", "\n", "dependency_measure", "\n", ")", ",", "f\"\"\"{measure_name} measure requires be listed after {dependency_measure}\n                in the measures list in the config.\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.EmbodiedTask.__init__": [[226, 259], ["embodied_task.Measurements", "habitat.core.simulator.SensorSuite", "embodied_task.EmbodiedTask._init_entities", "list", "embodied_task.EmbodiedTask._init_entities().values", "embodied_task.EmbodiedTask._init_entities().values", "embodied_task.EmbodiedTask.actions.keys", "embodied_task.EmbodiedTask._init_entities", "embodied_task.EmbodiedTask._init_entities"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.EmbodiedTask._init_entities", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.EmbodiedTask._init_entities", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.EmbodiedTask._init_entities"], ["def", "__init__", "(", "\n", "self", ",", "config", ":", "Config", ",", "sim", ":", "Simulator", ",", "dataset", ":", "Optional", "[", "Dataset", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "from", "habitat", ".", "core", ".", "registry", "import", "registry", "\n", "\n", "self", ".", "_config", "=", "config", "\n", "self", ".", "_sim", "=", "sim", "\n", "self", ".", "_dataset", "=", "dataset", "\n", "\n", "self", ".", "measurements", "=", "Measurements", "(", "\n", "self", ".", "_init_entities", "(", "\n", "entity_names", "=", "config", ".", "MEASUREMENTS", ",", "\n", "register_func", "=", "registry", ".", "get_measure", ",", "\n", "entities_config", "=", "config", ",", "\n", ")", ".", "values", "(", ")", "\n", ")", "\n", "\n", "self", ".", "sensor_suite", "=", "SensorSuite", "(", "\n", "self", ".", "_init_entities", "(", "\n", "entity_names", "=", "config", ".", "SENSORS", ",", "\n", "register_func", "=", "registry", ".", "get_sensor", ",", "\n", "entities_config", "=", "config", ",", "\n", ")", ".", "values", "(", ")", "\n", ")", "\n", "\n", "self", ".", "actions", "=", "self", ".", "_init_entities", "(", "\n", "entity_names", "=", "config", ".", "POSSIBLE_ACTIONS", ",", "\n", "register_func", "=", "registry", ".", "get_task_action", ",", "\n", "entities_config", "=", "self", ".", "_config", ".", "ACTIONS", ",", "\n", ")", "\n", "self", ".", "_action_keys", "=", "list", "(", "self", ".", "actions", ".", "keys", "(", ")", ")", "\n", "\n", "self", ".", "_is_episode_active", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.EmbodiedTask._init_entities": [[260, 282], ["collections.OrderedDict", "getattr", "register_func", "register_func.", "ValueError"], "methods", ["None"], ["", "def", "_init_entities", "(", "\n", "self", ",", "entity_names", ",", "register_func", ",", "entities_config", "=", "None", "\n", ")", "->", "OrderedDict", ":", "\n", "        ", "if", "entities_config", "is", "None", ":", "\n", "            ", "entities_config", "=", "self", ".", "_config", "\n", "\n", "", "entities", "=", "OrderedDict", "(", ")", "\n", "for", "entity_name", "in", "entity_names", ":", "\n", "            ", "entity_cfg", "=", "getattr", "(", "entities_config", ",", "entity_name", ")", "\n", "if", "\"TYPE\"", "not", "in", "entity_cfg", ":", "\n", "                ", "raise", "ValueError", "(", "f\"Could not find TYPE in {entity_cfg}\"", ")", "\n", "", "entity_type", "=", "register_func", "(", "entity_cfg", ".", "TYPE", ")", "\n", "assert", "(", "\n", "entity_type", "is", "not", "None", "\n", ")", ",", "f\"invalid {entity_name} type {entity_cfg.TYPE}\"", "\n", "entities", "[", "entity_name", "]", "=", "entity_type", "(", "\n", "sim", "=", "self", ".", "_sim", ",", "\n", "config", "=", "entity_cfg", ",", "\n", "dataset", "=", "self", ".", "_dataset", ",", "\n", "task", "=", "self", ",", "\n", ")", "\n", "", "return", "entities", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.EmbodiedTask.reset": [[283, 297], ["embodied_task.EmbodiedTask._sim.reset", "embodied_task.EmbodiedTask.update", "embodied_task.EmbodiedTask.actions.values", "embodied_task.EmbodiedTask.sensor_suite.get_observations", "action_instance.reset"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.il.metrics.Metric.update", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get_observations", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset"], ["", "def", "reset", "(", "self", ",", "episode", ":", "Episode", ")", ":", "\n", "        ", "observations", "=", "self", ".", "_sim", ".", "reset", "(", ")", "\n", "observations", ".", "update", "(", "\n", "self", ".", "sensor_suite", ".", "get_observations", "(", "\n", "observations", "=", "observations", ",", "episode", "=", "episode", ",", "task", "=", "self", "\n", ")", "\n", ")", "\n", "\n", "for", "action_instance", "in", "self", ".", "actions", ".", "values", "(", ")", ":", "\n", "            ", "action_instance", ".", "reset", "(", "episode", "=", "episode", ",", "task", "=", "self", ")", "\n", "\n", "", "self", ".", "_is_episode_active", "=", "True", "\n", "\n", "return", "observations", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.EmbodiedTask._step_single_action": [[298, 317], ["isinstance", "observations.update", "embodied_task.EmbodiedTask.get_action_name", "task_action.step", "embodied_task.EmbodiedTask.actions.keys"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.il.metrics.Metric.update", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.EmbodiedTask.get_action_name", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step"], ["", "def", "_step_single_action", "(", "\n", "self", ",", "\n", "observations", ":", "Any", ",", "\n", "action_name", ":", "Any", ",", "\n", "action", ":", "Dict", "[", "str", ",", "Any", "]", ",", "\n", "episode", ":", "Episode", ",", "\n", "is_last_action", "=", "True", ",", "\n", ")", ":", "\n", "        ", "if", "isinstance", "(", "action_name", ",", "(", "int", ",", "np", ".", "integer", ")", ")", ":", "\n", "            ", "action_name", "=", "self", ".", "get_action_name", "(", "action_name", ")", "\n", "", "assert", "(", "\n", "action_name", "in", "self", ".", "actions", "\n", ")", ",", "f\"Can't find '{action_name}' action in {self.actions.keys()}.\"", "\n", "task_action", "=", "self", ".", "actions", "[", "action_name", "]", "\n", "observations", ".", "update", "(", "\n", "task_action", ".", "step", "(", "\n", "**", "action", "[", "\"action_args\"", "]", ",", "\n", "task", "=", "self", ",", "\n", "is_last_action", "=", "is_last_action", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.EmbodiedTask.step": [[320, 351], ["isinstance", "observations.update", "embodied_task.EmbodiedTask._check_episode_is_active", "enumerate", "embodied_task.EmbodiedTask._step_single_action", "embodied_task.EmbodiedTask.sensor_suite.get_observations", "embodied_task.EmbodiedTask._step_single_action", "len"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.il.metrics.Metric.update", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.EmbodiedTask._check_episode_is_active", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.EmbodiedTask._step_single_action", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get_observations", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.EmbodiedTask._step_single_action"], ["", "def", "step", "(", "self", ",", "action", ":", "Dict", "[", "str", ",", "Any", "]", ",", "episode", ":", "Episode", ")", ":", "\n", "        ", "action_name", "=", "action", "[", "\"action\"", "]", "\n", "if", "\"action_args\"", "not", "in", "action", "or", "action", "[", "\"action_args\"", "]", "is", "None", ":", "\n", "            ", "action", "[", "\"action_args\"", "]", "=", "{", "}", "\n", "", "observations", ":", "Any", "=", "{", "}", "\n", "if", "isinstance", "(", "action_name", ",", "tuple", ")", ":", "# there are multiple actions", "\n", "            ", "for", "i", ",", "a_name", "in", "enumerate", "(", "action_name", ")", ":", "\n", "                ", "self", ".", "_step_single_action", "(", "\n", "observations", ",", "\n", "a_name", ",", "\n", "action", ",", "\n", "episode", ",", "\n", "i", "==", "len", "(", "action_name", ")", "-", "1", ",", "\n", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "_step_single_action", "(", "\n", "observations", ",", "action_name", ",", "action", ",", "episode", "\n", ")", "\n", "\n", "", "observations", ".", "update", "(", "\n", "self", ".", "sensor_suite", ".", "get_observations", "(", "\n", "observations", "=", "observations", ",", "\n", "episode", "=", "episode", ",", "\n", "action", "=", "action", ",", "\n", "task", "=", "self", ",", "\n", ")", "\n", ")", "\n", "self", ".", "_is_episode_active", "=", "self", ".", "_check_episode_is_active", "(", "\n", "observations", "=", "observations", ",", "action", "=", "action", ",", "episode", "=", "episode", "\n", ")", "\n", "return", "observations", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.EmbodiedTask.get_action_name": [[352, 356], ["len", "ValueError"], "methods", ["None"], ["", "def", "get_action_name", "(", "self", ",", "action_index", ":", "Union", "[", "int", ",", "np", ".", "integer", "]", ")", ":", "\n", "        ", "if", "action_index", ">=", "len", "(", "self", ".", "actions", ")", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Action index '{action_index}' is out of range.\"", ")", "\n", "", "return", "self", ".", "_action_keys", "[", "action_index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.EmbodiedTask.action_space": [[357, 363], ["habitat.core.spaces.ActionSpace", "embodied_task.EmbodiedTask.actions.items"], "methods", ["None"], ["", "@", "property", "\n", "def", "action_space", "(", "self", ")", "->", "Space", ":", "\n", "        ", "return", "ActionSpace", "(", "\n", "{", "\n", "action_name", ":", "action_instance", ".", "action_space", "\n", "for", "action_name", ",", "action_instance", "in", "self", ".", "actions", ".", "items", "(", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.EmbodiedTask.overwrite_sim_config": [[366, 376], ["None"], "methods", ["None"], ["", "def", "overwrite_sim_config", "(", "\n", "self", ",", "sim_config", ":", "Config", ",", "episode", ":", "Episode", "\n", ")", "->", "Config", ":", "\n", "        ", "r\"\"\"Update config merging information from :p:`sim_config` and\n        :p:`episode`.\n\n        :param sim_config: config for simulator.\n        :param episode: current episode.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.EmbodiedTask._check_episode_is_active": [[377, 385], ["None"], "methods", ["None"], ["", "def", "_check_episode_is_active", "(", "\n", "self", ",", "\n", "*", "args", ":", "Any", ",", "\n", "action", ":", "Union", "[", "int", ",", "Dict", "[", "str", ",", "Any", "]", "]", ",", "\n", "episode", ":", "Episode", ",", "\n", "**", "kwargs", ":", "Any", ",", "\n", ")", "->", "bool", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.EmbodiedTask.is_episode_active": [[386, 389], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_episode_active", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_is_episode_active", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.EmbodiedTask.seed": [[390, 392], ["None"], "methods", ["None"], ["", "def", "seed", "(", "self", ",", "seed", ":", "int", ")", "->", "None", ":", "\n", "        ", "return", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.logging.HabitatLogger.__init__": [[11, 30], ["logging.Logger.__init__", "logging.Formatter", "logging.StreamHandler.setFormatter", "super().addHandler", "logging.FileHandler", "logging.StreamHandler"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "name", ",", "\n", "level", ",", "\n", "filename", "=", "None", ",", "\n", "filemode", "=", "\"a\"", ",", "\n", "stream", "=", "None", ",", "\n", "format_str", "=", "None", ",", "\n", "dateformat", "=", "None", ",", "\n", "style", "=", "\"%\"", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "name", ",", "level", ")", "\n", "if", "filename", "is", "not", "None", ":", "\n", "            ", "handler", "=", "logging", ".", "FileHandler", "(", "filename", ",", "filemode", ")", "# type:ignore", "\n", "", "else", ":", "\n", "            ", "handler", "=", "logging", ".", "StreamHandler", "(", "stream", ")", "# type:ignore", "\n", "", "self", ".", "_formatter", "=", "logging", ".", "Formatter", "(", "format_str", ",", "dateformat", ",", "style", ")", "\n", "handler", ".", "setFormatter", "(", "self", ".", "_formatter", ")", "\n", "super", "(", ")", ".", "addHandler", "(", "handler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.logging.HabitatLogger.add_filehandler": [[31, 35], ["logging.FileHandler", "logging.FileHandler.setFormatter", "logging.HabitatLogger.addHandler"], "methods", ["None"], ["", "def", "add_filehandler", "(", "self", ",", "log_filename", ")", ":", "\n", "        ", "filehandler", "=", "logging", ".", "FileHandler", "(", "log_filename", ")", "\n", "filehandler", ".", "setFormatter", "(", "self", ".", "_formatter", ")", "\n", "self", ".", "addHandler", "(", "filehandler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env._ReadWrapper.__call__": [[91, 101], ["vector_env._ReadWrapper.read_fn", "RuntimeError"], "methods", ["None"], ["def", "__call__", "(", "self", ")", "->", "Any", ":", "\n", "        ", "if", "not", "self", ".", "is_waiting", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "f\"Tried to read from process {self.rank}\"", "\n", "\" but there is nothing waiting to be read\"", "\n", ")", "\n", "", "res", "=", "self", ".", "read_fn", "(", ")", "\n", "self", ".", "is_waiting", "=", "False", "\n", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env._WriteWrapper.__call__": [[112, 120], ["vector_env._WriteWrapper.write_fn", "RuntimeError"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "data", ":", "Any", ")", "->", "None", ":", "\n", "        ", "if", "self", ".", "read_wrapper", ".", "is_waiting", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "f\"Tried to write to process {self.read_wrapper.rank}\"", "\n", "\" but the last write has not been read\"", "\n", ")", "\n", "", "self", ".", "write_fn", "(", "data", ")", "\n", "self", ".", "read_wrapper", ".", "is_waiting", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env.VectorEnv.__init__": [[141, 207], ["len", "mp.get_context", "vector_env.VectorEnv._spawn_workers", "write_fn", "read_fn", "write_fn", "read_fn", "write_fn", "read_fn", "len"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env.ThreadedVectorEnv._spawn_workers"], ["def", "__init__", "(", "\n", "self", ",", "\n", "make_env_fn", ":", "Callable", "[", "...", ",", "Union", "[", "Env", ",", "RLEnv", "]", "]", "=", "_make_env_fn", ",", "\n", "env_fn_args", ":", "Sequence", "[", "Tuple", "]", "=", "None", ",", "\n", "auto_reset_done", ":", "bool", "=", "True", ",", "\n", "multiprocessing_start_method", ":", "str", "=", "\"forkserver\"", ",", "\n", "workers_ignore_signals", ":", "bool", "=", "False", ",", "\n", ")", "->", "None", ":", "\n", "        ", "\"\"\"..\n\n        :param make_env_fn: function which creates a single environment. An\n            environment can be of type :ref:`env.Env` or :ref:`env.RLEnv`\n        :param env_fn_args: tuple of tuple of args to pass to the\n            :ref:`_make_env_fn`.\n        :param auto_reset_done: automatically reset the environment when\n            done. This functionality is provided for seamless training\n            of vectorized environments.\n        :param multiprocessing_start_method: the multiprocessing method used to\n            spawn worker processes. Valid methods are\n            :py:`{'spawn', 'forkserver', 'fork'}`; :py:`'forkserver'` is the\n            recommended method as it works well with CUDA. If :py:`'fork'` is\n            used, the subproccess  must be started before any other GPU usage.\n        :param workers_ignore_signals: Whether or not workers will ignore SIGINT and SIGTERM\n            and instead will only exit when :ref:`close` is called\n        \"\"\"", "\n", "self", ".", "_is_closed", "=", "True", "\n", "\n", "assert", "(", "\n", "env_fn_args", "is", "not", "None", "and", "len", "(", "env_fn_args", ")", ">", "0", "\n", ")", ",", "\"number of environments to be created should be greater than 0\"", "\n", "\n", "self", ".", "_num_envs", "=", "len", "(", "env_fn_args", ")", "\n", "\n", "assert", "multiprocessing_start_method", "in", "self", ".", "_valid_start_methods", ",", "(", "\n", "\"multiprocessing_start_method must be one of {}. Got '{}'\"", "\n", ")", ".", "format", "(", "self", ".", "_valid_start_methods", ",", "multiprocessing_start_method", ")", "\n", "self", ".", "_auto_reset_done", "=", "auto_reset_done", "\n", "self", ".", "_mp_ctx", "=", "mp", ".", "get_context", "(", "multiprocessing_start_method", ")", "\n", "self", ".", "_workers", "=", "[", "]", "\n", "(", "\n", "self", ".", "_connection_read_fns", ",", "\n", "self", ".", "_connection_write_fns", ",", "\n", ")", "=", "self", ".", "_spawn_workers", "(", "\n", "env_fn_args", ",", "\n", "make_env_fn", ",", "\n", "workers_ignore_signals", "=", "workers_ignore_signals", ",", "\n", ")", "\n", "\n", "self", ".", "_is_closed", "=", "False", "\n", "\n", "for", "write_fn", "in", "self", ".", "_connection_write_fns", ":", "\n", "            ", "write_fn", "(", "(", "CALL_COMMAND", ",", "(", "OBSERVATION_SPACE_NAME", ",", "None", ")", ")", ")", "\n", "", "self", ".", "observation_spaces", "=", "[", "\n", "read_fn", "(", ")", "for", "read_fn", "in", "self", ".", "_connection_read_fns", "\n", "]", "\n", "for", "write_fn", "in", "self", ".", "_connection_write_fns", ":", "\n", "            ", "write_fn", "(", "(", "CALL_COMMAND", ",", "(", "ACTION_SPACE_NAME", ",", "None", ")", ")", ")", "\n", "", "self", ".", "action_spaces", "=", "[", "\n", "read_fn", "(", ")", "for", "read_fn", "in", "self", ".", "_connection_read_fns", "\n", "]", "\n", "for", "write_fn", "in", "self", ".", "_connection_write_fns", ":", "\n", "            ", "write_fn", "(", "(", "CALL_COMMAND", ",", "(", "NUMBER_OF_EPISODE_NAME", ",", "None", ")", ")", ")", "\n", "", "self", ".", "number_of_episodes", "=", "[", "\n", "read_fn", "(", ")", "for", "read_fn", "in", "self", ".", "_connection_read_fns", "\n", "]", "\n", "self", ".", "_paused", ":", "List", "[", "Tuple", "]", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env.VectorEnv.num_envs": [[208, 212], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_envs", "(", "self", ")", ":", "\n", "        ", "r\"\"\"number of individual environments.\"\"\"", "\n", "return", "self", ".", "_num_envs", "-", "len", "(", "self", ".", "_paused", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env.VectorEnv._worker_env": [[213, 297], ["habitat.utils.profiling_wrapper.RangeContext", "env_fn", "signal.signal", "signal.signal", "signal.signal", "signal.signal", "parent_pipe.close", "connection_read_fn", "env_fn.close", "habitat.core.logging.logger.info", "child_pipe.close", "isinstance", "habitat.utils.profiling_wrapper.RangeContext", "connection_read_fn", "env_fn.step", "isinstance", "env_fn.reset", "connection_write_fn", "env_fn.reset", "habitat.utils.profiling_wrapper.RangeContext", "connection_write_fn", "env_fn.step", "connection_write_fn", "connection_write_fn", "env_fn.reset", "env_fn.render", "getattr", "connection_write_fn", "callable", "getattr.", "connection_write_fn", "NotImplementedError", "len", "len"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.close", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.close", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.close", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.render"], ["", "@", "staticmethod", "\n", "@", "profiling_wrapper", ".", "RangeContext", "(", "\"_worker_env\"", ")", "\n", "def", "_worker_env", "(", "\n", "connection_read_fn", ":", "Callable", ",", "\n", "connection_write_fn", ":", "Callable", ",", "\n", "env_fn", ":", "Callable", ",", "\n", "env_fn_args", ":", "Tuple", "[", "Any", "]", ",", "\n", "auto_reset_done", ":", "bool", ",", "\n", "mask_signals", ":", "bool", "=", "False", ",", "\n", "child_pipe", ":", "Optional", "[", "Connection", "]", "=", "None", ",", "\n", "parent_pipe", ":", "Optional", "[", "Connection", "]", "=", "None", ",", "\n", ")", "->", "None", ":", "\n", "        ", "r\"\"\"process worker for creating and interacting with the environment.\"\"\"", "\n", "if", "mask_signals", ":", "\n", "            ", "signal", ".", "signal", "(", "signal", ".", "SIGINT", ",", "signal", ".", "SIG_IGN", ")", "\n", "signal", ".", "signal", "(", "signal", ".", "SIGTERM", ",", "signal", ".", "SIG_IGN", ")", "\n", "\n", "signal", ".", "signal", "(", "signal", ".", "SIGUSR1", ",", "signal", ".", "SIG_IGN", ")", "\n", "signal", ".", "signal", "(", "signal", ".", "SIGUSR2", ",", "signal", ".", "SIG_IGN", ")", "\n", "\n", "", "env", "=", "env_fn", "(", "*", "env_fn_args", ")", "\n", "if", "parent_pipe", "is", "not", "None", ":", "\n", "            ", "parent_pipe", ".", "close", "(", ")", "\n", "", "try", ":", "\n", "            ", "command", ",", "data", "=", "connection_read_fn", "(", ")", "\n", "while", "command", "!=", "CLOSE_COMMAND", ":", "\n", "                ", "if", "command", "==", "STEP_COMMAND", ":", "\n", "# different step methods for habitat.RLEnv and habitat.Env", "\n", "                    ", "if", "isinstance", "(", "env", ",", "(", "habitat", ".", "RLEnv", ",", "gym", ".", "Env", ")", ")", ":", "\n", "# habitat.RLEnv", "\n", "                        ", "observations", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "**", "data", ")", "\n", "if", "auto_reset_done", "and", "done", ":", "\n", "                            ", "observations", "=", "env", ".", "reset", "(", ")", "\n", "", "with", "profiling_wrapper", ".", "RangeContext", "(", "\n", "\"worker write after step\"", "\n", ")", ":", "\n", "                            ", "connection_write_fn", "(", "\n", "(", "observations", ",", "reward", ",", "done", ",", "info", ")", "\n", ")", "\n", "", "", "elif", "isinstance", "(", "env", ",", "habitat", ".", "Env", ")", ":", "# type: ignore", "\n", "# habitat.Env", "\n", "                        ", "observations", "=", "env", ".", "step", "(", "**", "data", ")", "\n", "if", "auto_reset_done", "and", "env", ".", "episode_over", ":", "\n", "                            ", "observations", "=", "env", ".", "reset", "(", ")", "\n", "", "connection_write_fn", "(", "observations", ")", "\n", "", "else", ":", "\n", "                        ", "raise", "NotImplementedError", "\n", "\n", "", "", "elif", "command", "==", "RESET_COMMAND", ":", "\n", "                    ", "observations", "=", "env", ".", "reset", "(", ")", "\n", "connection_write_fn", "(", "observations", ")", "\n", "\n", "", "elif", "command", "==", "RENDER_COMMAND", ":", "\n", "                    ", "connection_write_fn", "(", "env", ".", "render", "(", "*", "data", "[", "0", "]", ",", "**", "data", "[", "1", "]", ")", ")", "\n", "\n", "", "elif", "command", "==", "CALL_COMMAND", ":", "\n", "                    ", "function_name", ",", "function_args", "=", "data", "\n", "if", "function_args", "is", "None", ":", "\n", "                        ", "function_args", "=", "{", "}", "\n", "\n", "", "result_or_fn", "=", "getattr", "(", "env", ",", "function_name", ")", "\n", "\n", "if", "len", "(", "function_args", ")", ">", "0", "or", "callable", "(", "result_or_fn", ")", ":", "\n", "                        ", "result", "=", "result_or_fn", "(", "**", "function_args", ")", "\n", "", "else", ":", "\n", "                        ", "result", "=", "result_or_fn", "\n", "\n", "", "connection_write_fn", "(", "result", ")", "\n", "\n", "", "elif", "command", "==", "COUNT_EPISODES_COMMAND", ":", "\n", "                    ", "connection_write_fn", "(", "len", "(", "env", ".", "episodes", ")", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "(", "f\"Unknown command {command}\"", ")", "\n", "\n", "", "with", "profiling_wrapper", ".", "RangeContext", "(", "\"worker wait for command\"", ")", ":", "\n", "                    ", "command", ",", "data", "=", "connection_read_fn", "(", ")", "\n", "\n", "", "", "", "except", "KeyboardInterrupt", ":", "\n", "            ", "logger", ".", "info", "(", "\"Worker KeyboardInterrupt\"", ")", "\n", "", "finally", ":", "\n", "            ", "if", "child_pipe", "is", "not", "None", ":", "\n", "                ", "child_pipe", ".", "close", "(", ")", "\n", "", "env", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env.VectorEnv._spawn_workers": [[298, 342], ["zip", "zip", "vector_env.VectorEnv._mp_ctx.Process", "vector_env.VectorEnv._workers.append", "vector_env.VectorEnv.start", "worker_conn.close", "vector_env._ReadWrapper", "vector_env._WriteWrapper", "typing.cast", "enumerate", "zip", "habitat.utils.pickle5_multiprocessing.ConnectionWrapper", "range", "vector_env.VectorEnv._mp_ctx.Pipe"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.close"], ["", "", "def", "_spawn_workers", "(", "\n", "self", ",", "\n", "env_fn_args", ":", "Sequence", "[", "Tuple", "]", ",", "\n", "make_env_fn", ":", "Callable", "[", "...", ",", "Union", "[", "Env", ",", "RLEnv", "]", "]", "=", "_make_env_fn", ",", "\n", "workers_ignore_signals", ":", "bool", "=", "False", ",", "\n", ")", "->", "Tuple", "[", "List", "[", "_ReadWrapper", "]", ",", "List", "[", "_WriteWrapper", "]", "]", ":", "\n", "        ", "parent_connections", ",", "worker_connections", "=", "zip", "(", "\n", "*", "[", "\n", "[", "ConnectionWrapper", "(", "c", ")", "for", "c", "in", "self", ".", "_mp_ctx", ".", "Pipe", "(", "duplex", "=", "True", ")", "]", "\n", "for", "_", "in", "range", "(", "self", ".", "_num_envs", ")", "\n", "]", "\n", ")", "\n", "self", ".", "_workers", "=", "[", "]", "\n", "for", "worker_conn", ",", "parent_conn", ",", "env_args", "in", "zip", "(", "\n", "worker_connections", ",", "parent_connections", ",", "env_fn_args", "\n", ")", ":", "\n", "            ", "ps", "=", "self", ".", "_mp_ctx", ".", "Process", "(", "\n", "target", "=", "self", ".", "_worker_env", ",", "\n", "args", "=", "(", "\n", "worker_conn", ".", "recv", ",", "\n", "worker_conn", ".", "send", ",", "\n", "make_env_fn", ",", "\n", "env_args", ",", "\n", "self", ".", "_auto_reset_done", ",", "\n", "workers_ignore_signals", ",", "\n", "worker_conn", ",", "\n", "parent_conn", ",", "\n", ")", ",", "\n", ")", "\n", "self", ".", "_workers", ".", "append", "(", "cast", "(", "mp", ".", "Process", ",", "ps", ")", ")", "\n", "ps", ".", "daemon", "=", "True", "\n", "ps", ".", "start", "(", ")", "\n", "worker_conn", ".", "close", "(", ")", "\n", "\n", "", "read_fns", "=", "[", "\n", "_ReadWrapper", "(", "p", ".", "recv", ",", "rank", ")", "\n", "for", "rank", ",", "p", "in", "enumerate", "(", "parent_connections", ")", "\n", "]", "\n", "write_fns", "=", "[", "\n", "_WriteWrapper", "(", "p", ".", "send", ",", "read_fn", ")", "\n", "for", "p", ",", "read_fn", "in", "zip", "(", "parent_connections", ",", "read_fns", ")", "\n", "]", "\n", "\n", "return", "read_fns", ",", "write_fns", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env.VectorEnv.current_episodes": [[343, 350], ["write_fn", "results.append", "read_fn"], "methods", ["None"], ["", "def", "current_episodes", "(", "self", ")", ":", "\n", "        ", "for", "write_fn", "in", "self", ".", "_connection_write_fns", ":", "\n", "            ", "write_fn", "(", "(", "CALL_COMMAND", ",", "(", "CURRENT_EPISODE_NAME", ",", "None", ")", ")", ")", "\n", "", "results", "=", "[", "]", "\n", "for", "read_fn", "in", "self", ".", "_connection_read_fns", ":", "\n", "            ", "results", ".", "append", "(", "read_fn", "(", ")", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env.VectorEnv.count_episodes": [[351, 358], ["write_fn", "results.append", "read_fn"], "methods", ["None"], ["", "def", "count_episodes", "(", "self", ")", ":", "\n", "        ", "for", "write_fn", "in", "self", ".", "_connection_write_fns", ":", "\n", "            ", "write_fn", "(", "(", "COUNT_EPISODES_COMMAND", ",", "None", ")", ")", "\n", "", "results", "=", "[", "]", "\n", "for", "read_fn", "in", "self", ".", "_connection_read_fns", ":", "\n", "            ", "results", ".", "append", "(", "read_fn", "(", ")", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env.VectorEnv.episode_over": [[359, 366], ["write_fn", "results.append", "read_fn"], "methods", ["None"], ["", "def", "episode_over", "(", "self", ")", ":", "\n", "        ", "for", "write_fn", "in", "self", ".", "_connection_write_fns", ":", "\n", "            ", "write_fn", "(", "(", "CALL_COMMAND", ",", "(", "EPISODE_OVER_NAME", ",", "None", ")", ")", ")", "\n", "", "results", "=", "[", "]", "\n", "for", "read_fn", "in", "self", ".", "_connection_read_fns", ":", "\n", "            ", "results", ".", "append", "(", "read_fn", "(", ")", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env.VectorEnv.get_metrics": [[367, 374], ["write_fn", "results.append", "read_fn"], "methods", ["None"], ["", "def", "get_metrics", "(", "self", ")", ":", "\n", "        ", "for", "write_fn", "in", "self", ".", "_connection_write_fns", ":", "\n", "            ", "write_fn", "(", "(", "CALL_COMMAND", ",", "(", "GET_METRICS_NAME", ",", "None", ")", ")", ")", "\n", "", "results", "=", "[", "]", "\n", "for", "read_fn", "in", "self", ".", "_connection_read_fns", ":", "\n", "            ", "results", ".", "append", "(", "read_fn", "(", ")", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env.VectorEnv.reset": [[375, 386], ["write_fn", "results.append", "read_fn"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "r\"\"\"Reset all the vectorized environments\n\n        :return: list of outputs from the reset method of envs.\n        \"\"\"", "\n", "for", "write_fn", "in", "self", ".", "_connection_write_fns", ":", "\n", "            ", "write_fn", "(", "(", "RESET_COMMAND", ",", "None", ")", ")", "\n", "", "results", "=", "[", "]", "\n", "for", "read_fn", "in", "self", ".", "_connection_read_fns", ":", "\n", "            ", "results", ".", "append", "(", "read_fn", "(", ")", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env.VectorEnv.reset_at": [[387, 396], ["None"], "methods", ["None"], ["", "def", "reset_at", "(", "self", ",", "index_env", ":", "int", ")", ":", "\n", "        ", "r\"\"\"Reset in the index_env environment in the vector.\n\n        :param index_env: index of the environment to be reset\n        :return: list containing the output of reset method of indexed env.\n        \"\"\"", "\n", "self", ".", "_connection_write_fns", "[", "index_env", "]", "(", "(", "RESET_COMMAND", ",", "None", ")", ")", "\n", "results", "=", "[", "self", ".", "_connection_read_fns", "[", "index_env", "]", "(", ")", "]", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env.VectorEnv.async_step_at": [[397, 406], ["isinstance", "vector_env.VectorEnv._warn_cuda_tensors"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env.VectorEnv._warn_cuda_tensors"], ["", "def", "async_step_at", "(", "\n", "self", ",", "index_env", ":", "int", ",", "action", ":", "Union", "[", "int", ",", "str", ",", "Dict", "[", "str", ",", "Any", "]", "]", "\n", ")", "->", "None", ":", "\n", "# Backward compatibility", "\n", "        ", "if", "isinstance", "(", "action", ",", "(", "int", ",", "np", ".", "integer", ",", "str", ")", ")", ":", "\n", "            ", "action", "=", "{", "\"action\"", ":", "{", "\"action\"", ":", "action", "}", "}", "\n", "\n", "", "self", ".", "_warn_cuda_tensors", "(", "action", ")", "\n", "self", ".", "_connection_write_fns", "[", "index_env", "]", "(", "(", "STEP_COMMAND", ",", "action", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env.VectorEnv.wait_step_at": [[407, 410], ["habitat.utils.profiling_wrapper.RangeContext"], "methods", ["None"], ["", "@", "profiling_wrapper", ".", "RangeContext", "(", "\"wait_step_at\"", ")", "\n", "def", "wait_step_at", "(", "self", ",", "index_env", ":", "int", ")", "->", "Any", ":", "\n", "        ", "return", "self", ".", "_connection_read_fns", "[", "index_env", "]", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env.VectorEnv.step_at": [[411, 420], ["vector_env.VectorEnv.async_step_at", "vector_env.VectorEnv.wait_step_at"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env.VectorEnv.async_step_at", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env.VectorEnv.wait_step_at"], ["", "def", "step_at", "(", "self", ",", "index_env", ":", "int", ",", "action", ":", "Union", "[", "int", ",", "str", ",", "Dict", "[", "str", ",", "Any", "]", "]", ")", ":", "\n", "        ", "r\"\"\"Step in the index_env environment in the vector.\n\n        :param index_env: index of the environment to be stepped into\n        :param action: action to be taken\n        :return: list containing the output of step method of indexed env.\n        \"\"\"", "\n", "self", ".", "async_step_at", "(", "index_env", ",", "action", ")", "\n", "return", "self", ".", "wait_step_at", "(", "index_env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env.VectorEnv.async_step": [[421, 433], ["enumerate", "vector_env.VectorEnv.async_step_at"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env.VectorEnv.async_step_at"], ["", "def", "async_step", "(", "\n", "self", ",", "data", ":", "Sequence", "[", "Union", "[", "int", ",", "str", ",", "Dict", "[", "str", ",", "Any", "]", "]", "]", "\n", ")", "->", "None", ":", "\n", "        ", "r\"\"\"Asynchronously step in the environments.\n\n        :param data: list of size _num_envs containing keyword arguments to\n            pass to :ref:`step` method for each Environment. For example,\n            :py:`[{\"action\": \"TURN_LEFT\", \"action_args\": {...}}, ...]`.\n        \"\"\"", "\n", "\n", "for", "index_env", ",", "act", "in", "enumerate", "(", "data", ")", ":", "\n", "            ", "self", ".", "async_step_at", "(", "index_env", ",", "act", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env.VectorEnv.wait_step": [[434, 439], ["habitat.utils.profiling_wrapper.RangeContext", "vector_env.VectorEnv.wait_step_at", "range"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env.VectorEnv.wait_step_at"], ["", "", "@", "profiling_wrapper", ".", "RangeContext", "(", "\"wait_step\"", ")", "\n", "def", "wait_step", "(", "self", ")", "->", "List", "[", "Any", "]", ":", "\n", "        ", "r\"\"\"Wait until all the asynchronized environments have synchronized.\"\"\"", "\n", "return", "[", "\n", "self", ".", "wait_step_at", "(", "index_env", ")", "for", "index_env", "in", "range", "(", "self", ".", "num_envs", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env.VectorEnv.step": [[441, 453], ["vector_env.VectorEnv.async_step", "vector_env.VectorEnv.wait_step"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env.VectorEnv.async_step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env.VectorEnv.wait_step"], ["", "def", "step", "(", "\n", "self", ",", "data", ":", "Sequence", "[", "Union", "[", "int", ",", "str", ",", "Dict", "[", "str", ",", "Any", "]", "]", "]", "\n", ")", "->", "List", "[", "Any", "]", ":", "\n", "        ", "r\"\"\"Perform actions in the vectorized environments.\n\n        :param data: list of size _num_envs containing keyword arguments to\n            pass to :ref:`step` method for each Environment. For example,\n            :py:`[{\"action\": \"TURN_LEFT\", \"action_args\": {...}}, ...]`.\n        :return: list of outputs from the step method of envs.\n        \"\"\"", "\n", "self", ".", "async_step", "(", "data", ")", "\n", "return", "self", ".", "wait_step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env.VectorEnv.close": [[454, 475], ["write_fn", "write_fn", "process.join", "process.join", "read_fn"], "methods", ["None"], ["", "def", "close", "(", "self", ")", "->", "None", ":", "\n", "        ", "if", "self", ".", "_is_closed", ":", "\n", "            ", "return", "\n", "\n", "", "for", "read_fn", "in", "self", ".", "_connection_read_fns", ":", "\n", "            ", "if", "read_fn", ".", "is_waiting", ":", "\n", "                ", "read_fn", "(", ")", "\n", "\n", "", "", "for", "write_fn", "in", "self", ".", "_connection_write_fns", ":", "\n", "            ", "write_fn", "(", "(", "CLOSE_COMMAND", ",", "None", ")", ")", "\n", "\n", "", "for", "_", ",", "_", ",", "write_fn", ",", "_", "in", "self", ".", "_paused", ":", "\n", "            ", "write_fn", "(", "(", "CLOSE_COMMAND", ",", "None", ")", ")", "\n", "\n", "", "for", "process", "in", "self", ".", "_workers", ":", "\n", "            ", "process", ".", "join", "(", ")", "\n", "\n", "", "for", "_", ",", "_", ",", "_", ",", "process", "in", "self", ".", "_paused", ":", "\n", "            ", "process", ".", "join", "(", ")", "\n", "\n", "", "self", ".", "_is_closed", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env.VectorEnv.pause_at": [[476, 492], ["vector_env.VectorEnv._connection_read_fns.pop", "vector_env.VectorEnv._connection_write_fns.pop", "vector_env.VectorEnv._workers.pop", "vector_env.VectorEnv._paused.append"], "methods", ["None"], ["", "def", "pause_at", "(", "self", ",", "index", ":", "int", ")", "->", "None", ":", "\n", "        ", "r\"\"\"Pauses computation on this env without destroying the env.\n\n        :param index: which env to pause. All indexes after this one will be\n            shifted down by one.\n\n        This is useful for not needing to call steps on all environments when\n        only some are active (for example during the last episodes of running\n        eval episodes).\n        \"\"\"", "\n", "if", "self", ".", "_connection_read_fns", "[", "index", "]", ".", "is_waiting", ":", "\n", "            ", "self", ".", "_connection_read_fns", "[", "index", "]", "(", ")", "\n", "", "read_fn", "=", "self", ".", "_connection_read_fns", ".", "pop", "(", "index", ")", "\n", "write_fn", "=", "self", ".", "_connection_write_fns", ".", "pop", "(", "index", ")", "\n", "worker", "=", "self", ".", "_workers", ".", "pop", "(", "index", ")", "\n", "self", ".", "_paused", ".", "append", "(", "(", "index", ",", "read_fn", ",", "write_fn", ",", "worker", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env.VectorEnv.resume_all": [[493, 500], ["reversed", "vector_env.VectorEnv._connection_read_fns.insert", "vector_env.VectorEnv._connection_write_fns.insert", "vector_env.VectorEnv._workers.insert"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.insert", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.insert", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.insert"], ["", "def", "resume_all", "(", "self", ")", "->", "None", ":", "\n", "        ", "r\"\"\"Resumes any paused envs.\"\"\"", "\n", "for", "index", ",", "read_fn", ",", "write_fn", ",", "worker", "in", "reversed", "(", "self", ".", "_paused", ")", ":", "\n", "            ", "self", ".", "_connection_read_fns", ".", "insert", "(", "index", ",", "read_fn", ")", "\n", "self", ".", "_connection_write_fns", ".", "insert", "(", "index", ",", "write_fn", ")", "\n", "self", ".", "_workers", ".", "insert", "(", "index", ",", "worker", ")", "\n", "", "self", ".", "_paused", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env.VectorEnv.call_at": [[501, 520], ["None"], "methods", ["None"], ["", "def", "call_at", "(", "\n", "self", ",", "\n", "index", ":", "int", ",", "\n", "function_name", ":", "str", ",", "\n", "function_args", ":", "Optional", "[", "Dict", "[", "str", ",", "Any", "]", "]", "=", "None", ",", "\n", ")", "->", "Any", ":", "\n", "        ", "r\"\"\"Calls a function or retrieves a property/member variable (which is passed by name)\n        on the selected env and returns the result.\n\n        :param index: which env to call the function on.\n        :param function_name: the name of the function to call or property to retrieve on the env.\n        :param function_args: optional function args.\n        :return: result of calling the function.\n        \"\"\"", "\n", "self", ".", "_connection_write_fns", "[", "index", "]", "(", "\n", "(", "CALL_COMMAND", ",", "(", "function_name", ",", "function_args", ")", ")", "\n", ")", "\n", "result", "=", "self", ".", "_connection_read_fns", "[", "index", "]", "(", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env.VectorEnv.call": [[521, 547], ["zip", "zip", "len", "len", "write_fn", "results.append", "len", "read_fn"], "methods", ["None"], ["", "def", "call", "(", "\n", "self", ",", "\n", "function_names", ":", "List", "[", "str", "]", ",", "\n", "function_args_list", ":", "Optional", "[", "List", "[", "Any", "]", "]", "=", "None", ",", "\n", ")", "->", "List", "[", "Any", "]", ":", "\n", "        ", "r\"\"\"Calls a list of functions (which are passed by name) on the\n        corresponding env (by index).\n\n        :param function_names: the name of the functions to call on the envs.\n        :param function_args_list: list of function args for each function. If\n            provided, :py:`len(function_args_list)` should be as long as\n            :py:`len(function_names)`.\n        :return: result of calling the function.\n        \"\"\"", "\n", "if", "function_args_list", "is", "None", ":", "\n", "            ", "function_args_list", "=", "[", "None", "]", "*", "len", "(", "function_names", ")", "\n", "", "assert", "len", "(", "function_names", ")", "==", "len", "(", "function_args_list", ")", "\n", "func_args", "=", "zip", "(", "function_names", ",", "function_args_list", ")", "\n", "for", "write_fn", ",", "func_args_on", "in", "zip", "(", "\n", "self", ".", "_connection_write_fns", ",", "func_args", "\n", ")", ":", "\n", "            ", "write_fn", "(", "(", "CALL_COMMAND", ",", "func_args_on", ")", ")", "\n", "", "results", "=", "[", "]", "\n", "for", "read_fn", "in", "self", ".", "_connection_read_fns", ":", "\n", "            ", "results", ".", "append", "(", "read_fn", "(", ")", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env.VectorEnv.render": [[548, 568], ["habitat.core.utils.tile_images", "write_fn", "read_fn", "try_cv2_import", "try_cv2_import.imshow", "try_cv2_import.waitKey"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.utils.tile_images", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.utils.try_cv2_import"], ["", "def", "render", "(", "\n", "self", ",", "mode", ":", "str", "=", "\"human\"", ",", "*", "args", ",", "**", "kwargs", "\n", ")", "->", "Optional", "[", "np", ".", "ndarray", "]", ":", "\n", "        ", "r\"\"\"Render observations from all environments in a tiled image.\"\"\"", "\n", "for", "write_fn", "in", "self", ".", "_connection_write_fns", ":", "\n", "            ", "write_fn", "(", "(", "RENDER_COMMAND", ",", "(", "args", ",", "{", "\"mode\"", ":", "\"rgb\"", ",", "**", "kwargs", "}", ")", ")", ")", "\n", "", "images", "=", "[", "read_fn", "(", ")", "for", "read_fn", "in", "self", ".", "_connection_read_fns", "]", "\n", "tile", "=", "tile_images", "(", "images", ")", "\n", "if", "mode", "==", "\"human\"", ":", "\n", "            ", "from", "habitat", ".", "core", ".", "utils", "import", "try_cv2_import", "\n", "\n", "cv2", "=", "try_cv2_import", "(", ")", "\n", "\n", "cv2", ".", "imshow", "(", "\"vecenv\"", ",", "tile", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ")", "\n", "cv2", ".", "waitKey", "(", "1", ")", "\n", "return", "None", "\n", "", "elif", "mode", "==", "\"rgb_array\"", ":", "\n", "            ", "return", "tile", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env.VectorEnv._valid_start_methods": [[569, 572], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "_valid_start_methods", "(", "self", ")", "->", "Set", "[", "str", "]", ":", "\n", "        ", "return", "{", "\"forkserver\"", ",", "\"spawn\"", ",", "\"fork\"", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env.VectorEnv._warn_cuda_tensors": [[573, 589], ["action.items", "isinstance", "vector_env.VectorEnv._warn_cuda_tensors", "torch.is_tensor", "warnings.warn"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env.VectorEnv._warn_cuda_tensors"], ["", "def", "_warn_cuda_tensors", "(", "\n", "self", ",", "action", ":", "Dict", "[", "str", ",", "Any", "]", ",", "prefix", ":", "Optional", "[", "str", "]", "=", "None", "\n", ")", ":", "\n", "        ", "if", "torch", "is", "None", ":", "\n", "            ", "return", "\n", "\n", "", "for", "k", ",", "v", "in", "action", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "                ", "subk", "=", "f\"{prefix}.{k}\"", "if", "prefix", "is", "not", "None", "else", "k", "\n", "self", ".", "_warn_cuda_tensors", "(", "v", ",", "prefix", "=", "subk", ")", "\n", "", "elif", "torch", ".", "is_tensor", "(", "v", ")", "and", "v", ".", "device", ".", "type", "==", "\"cuda\"", ":", "\n", "                ", "subk", "=", "f\"{prefix}.{k}\"", "if", "prefix", "is", "not", "None", "else", "k", "\n", "warnings", ".", "warn", "(", "\n", "\"Action with key {} is a CUDA tensor.\"", "\n", "\"  This will result in a CUDA context in the subproccess worker.\"", "\n", "\"  Using CPU tensors instead is recommended.\"", ".", "format", "(", "subk", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env.VectorEnv.__del__": [[591, 593], ["vector_env.VectorEnv.close"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.close"], ["", "", "", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env.VectorEnv.__enter__": [[594, 596], ["None"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env.VectorEnv.__exit__": [[597, 599], ["vector_env.VectorEnv.close"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.close"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_val", ",", "exc_tb", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env.ThreadedVectorEnv._spawn_workers": [[611, 648], ["zip", "zip", "threading.Thread", "vector_env.ThreadedVectorEnv._workers.append", "threading.Thread.start", "vector_env._ReadWrapper", "vector_env._WriteWrapper", "enumerate", "zip", "queue.Queue", "queue.Queue", "range"], "methods", ["None"], ["def", "_spawn_workers", "(", "\n", "self", ",", "\n", "env_fn_args", ":", "Sequence", "[", "Tuple", "]", ",", "\n", "make_env_fn", ":", "Callable", "[", "...", ",", "Env", "]", "=", "_make_env_fn", ",", "\n", "workers_ignore_signals", ":", "bool", "=", "False", ",", "\n", ")", "->", "Tuple", "[", "List", "[", "_ReadWrapper", "]", ",", "List", "[", "_WriteWrapper", "]", "]", ":", "\n", "        ", "queues", ":", "Iterator", "[", "Tuple", "[", "Any", ",", "...", "]", "]", "=", "zip", "(", "\n", "*", "[", "(", "Queue", "(", ")", ",", "Queue", "(", ")", ")", "for", "_", "in", "range", "(", "self", ".", "_num_envs", ")", "]", "\n", ")", "\n", "parent_read_queues", ",", "parent_write_queues", "=", "queues", "\n", "self", ".", "_workers", "=", "[", "]", "\n", "for", "parent_read_queue", ",", "parent_write_queue", ",", "env_args", "in", "zip", "(", "\n", "parent_read_queues", ",", "parent_write_queues", ",", "env_fn_args", "\n", ")", ":", "\n", "            ", "thread", "=", "Thread", "(", "\n", "target", "=", "self", ".", "_worker_env", ",", "\n", "args", "=", "(", "\n", "parent_write_queue", ".", "get", ",", "\n", "parent_read_queue", ".", "put", ",", "\n", "make_env_fn", ",", "\n", "env_args", ",", "\n", "self", ".", "_auto_reset_done", ",", "\n", ")", ",", "\n", ")", "\n", "self", ".", "_workers", ".", "append", "(", "thread", ")", "\n", "thread", ".", "daemon", "=", "True", "\n", "thread", ".", "start", "(", ")", "\n", "\n", "", "read_fns", "=", "[", "\n", "_ReadWrapper", "(", "q", ".", "get", ",", "rank", ")", "\n", "for", "rank", ",", "q", "in", "enumerate", "(", "parent_read_queues", ")", "\n", "]", "\n", "write_fns", "=", "[", "\n", "_WriteWrapper", "(", "q", ".", "put", ",", "read_wrapper", ")", "\n", "for", "q", ",", "read_wrapper", "in", "zip", "(", "parent_write_queues", ",", "read_fns", ")", "\n", "]", "\n", "return", "read_fns", ",", "write_fns", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env._make_env_fn": [[67, 80], ["habitat.core.env.Env", "habitat.core.env.Env.seed"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.seed"], ["def", "_make_env_fn", "(", "\n", "config", ":", "Config", ",", "dataset", ":", "Optional", "[", "habitat", ".", "Dataset", "]", "=", "None", ",", "rank", ":", "int", "=", "0", "\n", ")", "->", "Env", ":", "\n", "    ", "\"\"\"Constructor for default habitat :ref:`env.Env`.\n\n    :param config: configuration for environment.\n    :param dataset: dataset for environment.\n    :param rank: rank for setting seed of environment\n    :return: :ref:`env.Env` / :ref:`env.RLEnv` object\n    \"\"\"", "\n", "habitat_env", "=", "Env", "(", "config", "=", "config", ",", "dataset", "=", "dataset", ")", "\n", "habitat_env", ".", "seed", "(", "config", ".", "SEED", "+", "rank", ")", "\n", "return", "habitat_env", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.EmptySpace.sample": [[21, 23], ["None"], "methods", ["None"], ["def", "sample", "(", "self", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.EmptySpace.contains": [[24, 28], ["None"], "methods", ["None"], ["", "def", "contains", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "x", "is", "None", ":", "\n", "            ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.EmptySpace.__repr__": [[29, 31], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"EmptySpace()\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ActionSpace.__init__": [[48, 54], ["isinstance", "isinstance", "gym.spaces.Discrete", "collections.OrderedDict", "collections.OrderedDict", "len", "sorted", "spaces.items"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "spaces", ":", "Union", "[", "List", ",", "Dict", "]", ")", ":", "\n", "        ", "if", "isinstance", "(", "spaces", ",", "dict", ")", ":", "\n", "            ", "self", ".", "spaces", "=", "OrderedDict", "(", "sorted", "(", "spaces", ".", "items", "(", ")", ")", ")", "\n", "", "if", "isinstance", "(", "spaces", ",", "list", ")", ":", "\n", "            ", "self", ".", "spaces", "=", "OrderedDict", "(", "spaces", ")", "\n", "", "self", ".", "actions_select", "=", "gym", ".", "spaces", ".", "Discrete", "(", "len", "(", "self", ".", "spaces", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ActionSpace.n": [[55, 58], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "n", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "len", "(", "self", ".", "spaces", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ActionSpace.sample": [[59, 64], ["spaces.ActionSpace.actions_select.sample", "[].sample", "list", "spaces.ActionSpace.spaces.keys", "list", "spaces.ActionSpace.spaces.values"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.sample", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.sample"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "action_index", "=", "self", ".", "actions_select", ".", "sample", "(", ")", "\n", "return", "{", "\n", "\"action\"", ":", "list", "(", "self", ".", "spaces", ".", "keys", "(", ")", ")", "[", "action_index", "]", ",", "\n", "\"action_args\"", ":", "list", "(", "self", ".", "spaces", ".", "values", "(", ")", ")", "[", "action_index", "]", ".", "sample", "(", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ActionSpace.contains": [[66, 74], ["spaces.ActionSpace.spaces[].contains", "isinstance", "x.get"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.contains", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get"], ["", "def", "contains", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "x", ",", "dict", ")", "or", "\"action\"", "not", "in", "x", ":", "\n", "            ", "return", "False", "\n", "", "if", "x", "[", "\"action\"", "]", "not", "in", "self", ".", "spaces", ":", "\n", "            ", "return", "False", "\n", "", "if", "not", "self", ".", "spaces", "[", "x", "[", "\"action\"", "]", "]", ".", "contains", "(", "x", ".", "get", "(", "\"action_args\"", ",", "None", ")", ")", ":", "\n", "            ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ActionSpace.__repr__": [[75, 80], ["str", "spaces.ActionSpace.spaces.items"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "\n", "\"ActionSpace(\"", "\n", "+", "\", \"", ".", "join", "(", "[", "k", "+", "\":\"", "+", "str", "(", "s", ")", "for", "k", ",", "s", "in", "self", ".", "spaces", ".", "items", "(", ")", "]", ")", "\n", "+", "\")\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.__init__": [[94, 105], ["gym.spaces.Discrete"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "space", ":", "Space", ",", "\n", "min_seq_length", ":", "int", "=", "0", ",", "\n", "max_seq_length", ":", "int", "=", "1", "<<", "15", ",", "\n", ")", ":", "\n", "        ", "self", ".", "min_seq_length", "=", "min_seq_length", "\n", "self", ".", "max_seq_length", "=", "max_seq_length", "\n", "self", ".", "space", "=", "space", "\n", "self", ".", "length_select", "=", "gym", ".", "spaces", ".", "Discrete", "(", "\n", "max_seq_length", "-", "min_seq_length", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.sample": [[107, 110], ["spaces.ListSpace.length_select.sample", "spaces.ListSpace.space.sample", "range"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.sample", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.sample"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "seq_length", "=", "self", ".", "length_select", ".", "sample", "(", ")", "+", "self", ".", "min_seq_length", "\n", "return", "[", "self", ".", "space", ".", "sample", "(", ")", "for", "_", "in", "range", "(", "seq_length", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.contains": [[111, 119], ["all", "isinstance", "len", "spaces.ListSpace.space.contains"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.contains"], ["", "def", "contains", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "x", ",", "Collection", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "if", "not", "(", "self", ".", "min_seq_length", "<=", "len", "(", "x", ")", "<=", "self", ".", "max_seq_length", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "all", "(", "self", ".", "space", ".", "contains", "(", "el", ")", "for", "el", "in", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.__repr__": [[120, 123], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "\n", "f\"ListSpace({self.space}, min_seq_length=\"", "\n", "f\"{self.min_seq_length}, max_seq_length={self.max_seq_length})\"", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.agent.Agent.reset": [[22, 25], ["None"], "methods", ["None"], ["def", "reset", "(", "self", ")", "->", "None", ":", "\n", "        ", "r\"\"\"Called before starting a new episode in environment.\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.agent.Agent.act": [[26, 37], ["None"], "methods", ["None"], ["", "def", "act", "(", "\n", "self", ",", "observations", ":", "\"Observations\"", "\n", ")", "->", "Union", "[", "int", ",", "str", ",", "Dict", "[", "str", ",", "Any", "]", "]", ":", "\n", "        ", "r\"\"\"Called to produce an action to perform in an environment.\n\n        :param observations: observations coming in from environment to be\n            used by agent to decide action.\n        :return: action to be taken inside the environment and optional action\n            arguments.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry._register_impl": [[46, 70], ["registry.Registry._register_impl.wrap"], "methods", ["None"], ["@", "classmethod", "\n", "def", "_register_impl", "(", "\n", "cls", ",", "\n", "_type", ":", "str", ",", "\n", "to_register", ":", "Optional", "[", "Any", "]", ",", "\n", "name", ":", "Optional", "[", "str", "]", ",", "\n", "assert_type", ":", "Optional", "[", "Type", "]", "=", "None", ",", "\n", ")", "->", "Callable", ":", "\n", "        ", "def", "wrap", "(", "to_register", ")", ":", "\n", "            ", "if", "assert_type", "is", "not", "None", ":", "\n", "                ", "assert", "issubclass", "(", "\n", "to_register", ",", "assert_type", "\n", ")", ",", "\"{} must be a subclass of {}\"", ".", "format", "(", "\n", "to_register", ",", "assert_type", "\n", ")", "\n", "", "register_name", "=", "to_register", ".", "__name__", "if", "name", "is", "None", "else", "name", "\n", "\n", "cls", ".", "mapping", "[", "_type", "]", "[", "register_name", "]", "=", "to_register", "\n", "return", "to_register", "\n", "\n", "", "if", "to_register", "is", "None", ":", "\n", "            ", "return", "wrap", "\n", "", "else", ":", "\n", "            ", "return", "wrap", "(", "to_register", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry.register_task": [[71, 98], ["cls._register_impl"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry._register_impl"], ["", "", "@", "classmethod", "\n", "def", "register_task", "(", "cls", ",", "to_register", "=", "None", ",", "*", ",", "name", ":", "Optional", "[", "str", "]", "=", "None", ")", ":", "\n", "        ", "r\"\"\"Register a task to registry with key :p:`name`\n\n        :param name: Key with which the task will be registered.\n            If :py:`None` will use the name of the class\n\n        .. code:: py\n\n            from habitat.core.registry import registry\n            from habitat.core.embodied_task import EmbodiedTask\n\n            @registry.register_task\n            class MyTask(EmbodiedTask):\n                pass\n\n\n            # or\n\n            @registry.register_task(name=\"MyTaskName\")\n            class MyTask(EmbodiedTask):\n                pass\n\n        \"\"\"", "\n", "\n", "return", "cls", ".", "_register_impl", "(", "\n", "\"task\"", ",", "to_register", ",", "name", ",", "assert_type", "=", "EmbodiedTask", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry.register_simulator": [[100, 129], ["cls._register_impl"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry._register_impl"], ["", "@", "classmethod", "\n", "def", "register_simulator", "(", "\n", "cls", ",", "to_register", ":", "None", "=", "None", ",", "*", ",", "name", ":", "Optional", "[", "str", "]", "=", "None", "\n", ")", ":", "\n", "        ", "r\"\"\"Register a simulator to registry with key :p:`name`\n\n        :param name: Key with which the simulator will be registered.\n            If :py:`None` will use the name of the class\n\n        .. code:: py\n\n            from habitat.core.registry import registry\n            from habitat.core.simulator import Simulator\n\n            @registry.register_simulator\n            class MySimulator(Simulator):\n                pass\n\n\n            # or\n\n            @registry.register_simulator(name=\"MySimName\")\n            class MySimulator(Simulator):\n                pass\n\n        \"\"\"", "\n", "\n", "return", "cls", ".", "_register_impl", "(", "\n", "\"sim\"", ",", "to_register", ",", "name", ",", "assert_type", "=", "Simulator", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry.register_sensor": [[131, 141], ["cls._register_impl"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry._register_impl"], ["", "@", "classmethod", "\n", "def", "register_sensor", "(", "cls", ",", "to_register", "=", "None", ",", "*", ",", "name", ":", "Optional", "[", "str", "]", "=", "None", ")", ":", "\n", "        ", "r\"\"\"Register a sensor to registry with key :p:`name`\n\n        :param name: Key with which the sensor will be registered.\n            If :py:`None` will use the name of the class\n        \"\"\"", "\n", "\n", "return", "cls", ".", "_register_impl", "(", "\n", "\"sensor\"", ",", "to_register", ",", "name", ",", "assert_type", "=", "Sensor", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry.register_measure": [[143, 153], ["cls._register_impl"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry._register_impl"], ["", "@", "classmethod", "\n", "def", "register_measure", "(", "cls", ",", "to_register", "=", "None", ",", "*", ",", "name", ":", "Optional", "[", "str", "]", "=", "None", ")", ":", "\n", "        ", "r\"\"\"Register a measure to registry with key :p:`name`\n\n        :param name: Key with which the measure will be registered.\n            If :py:`None` will use the name of the class\n        \"\"\"", "\n", "\n", "return", "cls", ".", "_register_impl", "(", "\n", "\"measure\"", ",", "to_register", ",", "name", ",", "assert_type", "=", "Measure", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry.register_task_action": [[155, 170], ["cls._register_impl"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry._register_impl"], ["", "@", "classmethod", "\n", "def", "register_task_action", "(", "\n", "cls", ",", "to_register", "=", "None", ",", "*", ",", "name", ":", "Optional", "[", "str", "]", "=", "None", "\n", ")", ":", "\n", "        ", "r\"\"\"Add a task action in this registry under key 'name'\n\n        :param action_space: An action space that describes parameters to the\n            task action's method. If :py:`None` then the task action's method\n            takes no parameters.\n        :param name: Key with which the task action will be registered. If\n            :py:`None` will use the name of the task action's method.\n        \"\"\"", "\n", "\n", "return", "cls", ".", "_register_impl", "(", "\n", "\"task_action\"", ",", "to_register", ",", "name", ",", "assert_type", "=", "Action", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry.register_dataset": [[172, 182], ["cls._register_impl"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry._register_impl"], ["", "@", "classmethod", "\n", "def", "register_dataset", "(", "cls", ",", "to_register", "=", "None", ",", "*", ",", "name", ":", "Optional", "[", "str", "]", "=", "None", ")", ":", "\n", "        ", "r\"\"\"Register a dataset to registry with key :p:`name`\n\n        :param name: Key with which the dataset will be registered.\n            If :py:`None` will use the name of the class\n        \"\"\"", "\n", "\n", "return", "cls", ".", "_register_impl", "(", "\n", "\"dataset\"", ",", "to_register", ",", "name", ",", "assert_type", "=", "Dataset", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry.register_action_space_configuration": [[184, 199], ["cls._register_impl"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry._register_impl"], ["", "@", "classmethod", "\n", "def", "register_action_space_configuration", "(", "\n", "cls", ",", "to_register", "=", "None", ",", "*", ",", "name", ":", "Optional", "[", "str", "]", "=", "None", "\n", ")", ":", "\n", "        ", "r\"\"\"Register a action space configuration to registry with key :p:`name`\n\n        :param name: Key with which the action space will be registered.\n            If :py:`None` will use the name of the class\n        \"\"\"", "\n", "\n", "return", "cls", ".", "_register_impl", "(", "\n", "\"action_space_config\"", ",", "\n", "to_register", ",", "\n", "name", ",", "\n", "assert_type", "=", "ActionSpaceConfiguration", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry.register_env": [[201, 214], ["cls._register_impl"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry._register_impl"], ["", "@", "classmethod", "\n", "def", "register_env", "(", "cls", ",", "to_register", "=", "None", ",", "*", ",", "name", ":", "Optional", "[", "str", "]", "=", "None", ")", ":", "\n", "        ", "r\"\"\"Register a environment to registry with key 'name'\n            currently only support subclass of RLEnv.\n\n        Args:\n            name: Key with which the env will be registered.\n                If None will use the name of the class.\n\n        \"\"\"", "\n", "from", "habitat", ".", "core", ".", "env", "import", "RLEnv", "\n", "\n", "return", "cls", ".", "_register_impl", "(", "\"env\"", ",", "to_register", ",", "name", ",", "assert_type", "=", "RLEnv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry._get_impl": [[215, 218], ["cls.mapping[].get"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get"], ["", "@", "classmethod", "\n", "def", "_get_impl", "(", "cls", ",", "_type", ":", "str", ",", "name", ":", "str", ")", "->", "Type", ":", "\n", "        ", "return", "cls", ".", "mapping", "[", "_type", "]", ".", "get", "(", "name", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry.get_task": [[219, 222], ["cls._get_impl"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry._get_impl"], ["", "@", "classmethod", "\n", "def", "get_task", "(", "cls", ",", "name", ":", "str", ")", "->", "Type", "[", "EmbodiedTask", "]", ":", "\n", "        ", "return", "cls", ".", "_get_impl", "(", "\"task\"", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry.get_task_action": [[223, 226], ["cls._get_impl"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry._get_impl"], ["", "@", "classmethod", "\n", "def", "get_task_action", "(", "cls", ",", "name", ":", "str", ")", "->", "Type", "[", "Action", "]", ":", "\n", "        ", "return", "cls", ".", "_get_impl", "(", "\"task_action\"", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry.get_simulator": [[227, 230], ["cls._get_impl"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry._get_impl"], ["", "@", "classmethod", "\n", "def", "get_simulator", "(", "cls", ",", "name", ":", "str", ")", "->", "Type", "[", "Simulator", "]", ":", "\n", "        ", "return", "cls", ".", "_get_impl", "(", "\"sim\"", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry.get_sensor": [[231, 234], ["cls._get_impl"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry._get_impl"], ["", "@", "classmethod", "\n", "def", "get_sensor", "(", "cls", ",", "name", ":", "str", ")", "->", "Type", "[", "Sensor", "]", ":", "\n", "        ", "return", "cls", ".", "_get_impl", "(", "\"sensor\"", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry.get_measure": [[235, 238], ["cls._get_impl"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry._get_impl"], ["", "@", "classmethod", "\n", "def", "get_measure", "(", "cls", ",", "name", ":", "str", ")", "->", "Type", "[", "Measure", "]", ":", "\n", "        ", "return", "cls", ".", "_get_impl", "(", "\"measure\"", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry.get_dataset": [[239, 242], ["cls._get_impl"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry._get_impl"], ["", "@", "classmethod", "\n", "def", "get_dataset", "(", "cls", ",", "name", ":", "str", ")", "->", "Type", "[", "Dataset", "]", ":", "\n", "        ", "return", "cls", ".", "_get_impl", "(", "\"dataset\"", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry.get_action_space_configuration": [[243, 248], ["cls._get_impl"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry._get_impl"], ["", "@", "classmethod", "\n", "def", "get_action_space_configuration", "(", "\n", "cls", ",", "name", ":", "str", "\n", ")", "->", "Type", "[", "ActionSpaceConfiguration", "]", ":", "\n", "        ", "return", "cls", ".", "_get_impl", "(", "\"action_space_config\"", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry.get_env": [[249, 252], ["cls._get_impl"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry._get_impl"], ["", "@", "classmethod", "\n", "def", "get_env", "(", "cls", ",", "name", ":", "str", ")", "->", "Type", "[", "\"RLEnv\"", "]", ":", "\n", "        ", "return", "cls", ".", "_get_impl", "(", "\"env\"", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Episode._reset_shortest_path_cache_hook": [[78, 84], ["None"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "_reset_shortest_path_cache_hook", "(", "\n", "self", ":", "\"Episode\"", ",", "attribute", ":", "attr", ".", "Attribute", ",", "value", ":", "Any", "\n", ")", "->", "Any", ":", "\n", "        ", "self", ".", "_shortest_path_cache", "=", "None", "\n", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Episode.__getstate__": [[85, 90], ["dataset.Episode.__dict__.items"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "k", ":", "v", "\n", "for", "k", ",", "v", "in", "self", ".", "__dict__", ".", "items", "(", ")", "\n", "if", "k", "not", "in", "{", "\"_shortest_path_cache\"", "}", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Episode.__setstate__": [[92, 95], ["dataset.Episode.__dict__.update"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.il.metrics.Metric.update"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "self", ".", "__dict__", ".", "update", "(", "state", ")", "\n", "self", ".", "__dict__", "[", "\"_shortest_path_cache\"", "]", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.scene_from_scene_path": [[104, 114], ["os.path.splitext", "os.path.basename"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "scene_from_scene_path", "(", "scene_path", ":", "str", ")", "->", "str", ":", "\n", "        ", "r\"\"\"Helper method to get the scene name from an episode.\n\n        :param scene_path: The path to the scene, assumes this is formatted\n                            ``/path/to/<scene_name>.<ext>``\n\n        :return: <scene_name> from the path\n        \"\"\"", "\n", "return", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "scene_path", ")", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.get_scenes_to_load": [[115, 128], ["cls.check_config_paths_exist", "cls", "list", "map"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.pointnav.pointnav_dataset.PointNavDatasetV1.check_config_paths_exist", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.map"], ["", "@", "classmethod", "\n", "def", "get_scenes_to_load", "(", "cls", ",", "config", ":", "Config", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "r\"\"\"Returns a list of scene names that would be loaded with this dataset.\n\n        Useful for determining what scenes to split up among different workers.\n\n        :param config: The config for the dataset\n\n        :return: A list of scene names that would be loaded with the dataset\n        \"\"\"", "\n", "assert", "cls", ".", "check_config_paths_exist", "(", "config", ")", "# type: ignore[attr-defined]", "\n", "dataset", "=", "cls", "(", "config", ")", "# type: ignore[call-arg]", "\n", "return", "list", "(", "map", "(", "cls", ".", "scene_from_scene_path", ",", "dataset", ".", "scene_ids", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.build_content_scenes_filter": [[129, 143], ["set", "cls.scene_from_scene_path"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.set", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.scene_from_scene_path"], ["", "@", "classmethod", "\n", "def", "build_content_scenes_filter", "(", "cls", ",", "config", ")", "->", "Callable", "[", "[", "T", "]", ",", "bool", "]", ":", "\n", "        ", "r\"\"\"Returns a filter function that takes an episode and returns True if that\n        episode is valid under the CONTENT_SCENES feild of the provided config\n        \"\"\"", "\n", "scenes_to_load", "=", "set", "(", "config", ".", "CONTENT_SCENES", ")", "\n", "\n", "def", "_filter", "(", "ep", ":", "T", ")", "->", "bool", ":", "\n", "            ", "return", "(", "\n", "ALL_SCENES_MASK", "in", "scenes_to_load", "\n", "or", "cls", ".", "scene_from_scene_path", "(", "ep", ".", "scene_id", ")", "in", "scenes_to_load", "\n", ")", "\n", "\n", "", "return", "_filter", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.num_episodes": [[144, 148], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_episodes", "(", "self", ")", "->", "int", ":", "\n", "        ", "r\"\"\"number of episodes in the dataset\"\"\"", "\n", "return", "len", "(", "self", ".", "episodes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.scene_ids": [[149, 153], ["sorted"], "methods", ["None"], ["", "@", "property", "\n", "def", "scene_ids", "(", "self", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "r\"\"\"unique scene ids present in the dataset.\"\"\"", "\n", "return", "sorted", "(", "{", "episode", ".", "scene_id", "for", "episode", "in", "self", ".", "episodes", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.get_scene_episodes": [[154, 162], ["list", "filter", "iter"], "methods", ["None"], ["", "def", "get_scene_episodes", "(", "self", ",", "scene_id", ":", "str", ")", "->", "List", "[", "T", "]", ":", "\n", "        ", "r\"\"\"..\n\n        :param scene_id: id of scene in scene dataset.\n        :return: list of episodes for the :p:`scene_id`.\n        \"\"\"", "\n", "return", "list", "(", "\n", "filter", "(", "lambda", "x", ":", "x", ".", "scene_id", "==", "scene_id", ",", "iter", "(", "self", ".", "episodes", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.get_episodes": [[164, 171], ["None"], "methods", ["None"], ["", "def", "get_episodes", "(", "self", ",", "indexes", ":", "List", "[", "int", "]", ")", "->", "List", "[", "T", "]", ":", "\n", "        ", "r\"\"\"..\n\n        :param indexes: episode indices in dataset.\n        :return: list of episodes corresponding to indexes.\n        \"\"\"", "\n", "return", "[", "self", ".", "episodes", "[", "episode_id", "]", "for", "episode_id", "in", "indexes", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.get_episode_iterator": [[172, 185], ["dataset.EpisodeIterator"], "methods", ["None"], ["", "def", "get_episode_iterator", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "Iterator", "[", "T", "]", ":", "\n", "        ", "r\"\"\"Gets episode iterator with options. Options are specified in\n        :ref:`EpisodeIterator` documentation.\n\n        :param args: positional args for iterator constructor\n        :param kwargs: keyword args for iterator constructor\n        :return: episode iterator with specified behavior\n\n        To further customize iterator behavior for your :ref:`Dataset`\n        subclass, create a customized iterator class like\n        :ref:`EpisodeIterator` and override this method.\n        \"\"\"", "\n", "return", "EpisodeIterator", "(", "self", ".", "episodes", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.to_json": [[186, 200], ["DatasetJSONEncoder().encode", "isinstance", "DatasetJSONEncoder", "obj.tolist", "hasattr", "obj.__getstate__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Episode.__getstate__"], ["", "def", "to_json", "(", "self", ")", "->", "str", ":", "\n", "        ", "class", "DatasetJSONEncoder", "(", "json", ".", "JSONEncoder", ")", ":", "\n", "            ", "def", "default", "(", "self", ",", "obj", ")", ":", "\n", "                ", "if", "isinstance", "(", "obj", ",", "np", ".", "ndarray", ")", ":", "\n", "                    ", "return", "obj", ".", "tolist", "(", ")", "\n", "\n", "", "return", "(", "\n", "obj", ".", "__getstate__", "(", ")", "\n", "if", "hasattr", "(", "obj", ",", "\"__getstate__\"", ")", "\n", "else", "obj", ".", "__dict__", "\n", ")", "\n", "\n", "", "", "result", "=", "DatasetJSONEncoder", "(", ")", ".", "encode", "(", "self", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.from_json": [[201, 214], ["None"], "methods", ["None"], ["", "def", "from_json", "(", "\n", "self", ",", "json_str", ":", "str", ",", "scenes_dir", ":", "Optional", "[", "str", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "r\"\"\"Creates dataset from :p:`json_str`.\n\n        :param json_str: JSON string containing episodes information.\n        :param scenes_dir: directory containing graphical assets relevant\n            for episodes present in :p:`json_str`.\n\n        Directory containing relevant graphical assets of scenes is passed\n        through :p:`scenes_dir`.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.filter_episodes": [[215, 229], ["copy.copy", "filter_fn", "new_episodes.append"], "methods", ["None"], ["", "def", "filter_episodes", "(", "self", ",", "filter_fn", ":", "Callable", "[", "[", "T", "]", ",", "bool", "]", ")", "->", "\"Dataset\"", ":", "\n", "        ", "r\"\"\"Returns a new dataset with only the filtered episodes from the\n        original dataset.\n\n        :param filter_fn: function used to filter the episodes.\n        :return: the new dataset.\n        \"\"\"", "\n", "new_episodes", "=", "[", "]", "\n", "for", "episode", "in", "self", ".", "episodes", ":", "\n", "            ", "if", "filter_fn", "(", "episode", ")", ":", "\n", "                ", "new_episodes", ".", "append", "(", "episode", ")", "\n", "", "", "new_dataset", "=", "copy", ".", "copy", "(", "self", ")", "\n", "new_dataset", ".", "episodes", "=", "new_episodes", "\n", "return", "new_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.get_splits": [[230, 326], ["sum", "numpy.random.choice().tolist", "range", "ValueError", "list", "copy.copy", "new_datasets.append", "range", "new_episodes.extend", "ValueError", "ValueError", "sum", "numpy.random.choice", "scene_ids[].append", "map", "copy.copy.episodes.append", "copy.copy.episodes.sort", "scene_ids.values"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.map"], ["", "def", "get_splits", "(", "\n", "self", ",", "\n", "num_splits", ":", "int", ",", "\n", "episodes_per_split", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "remove_unused_episodes", ":", "bool", "=", "False", ",", "\n", "collate_scene_ids", ":", "bool", "=", "True", ",", "\n", "sort_by_episode_id", ":", "bool", "=", "False", ",", "\n", "allow_uneven_splits", ":", "bool", "=", "False", ",", "\n", ")", "->", "List", "[", "\"Dataset\"", "]", ":", "\n", "        ", "r\"\"\"Returns a list of new datasets, each with a subset of the original\n        episodes.\n\n        :param num_splits: the number of splits to create.\n        :param episodes_per_split: if provided, each split will have up to this\n            many episodes. If it is not provided, each dataset will have\n            :py:`len(original_dataset.episodes) // num_splits` episodes. If\n            max_episodes_per_split is provided and is larger than this value,\n            it will be capped to this value.\n        :param remove_unused_episodes: once the splits are created, the extra\n            episodes will be destroyed from the original dataset. This saves\n            memory for large datasets.\n        :param collate_scene_ids: if true, episodes with the same scene id are\n            next to each other. This saves on overhead of switching between\n            scenes, but means multiple sequential episodes will be related to\n            each other because they will be in the same scene.\n        :param sort_by_episode_id: if true, sequences are sorted by their\n            episode ID in the returned splits.\n        :param allow_uneven_splits: if true, the last splits can be shorter\n            than the others. This is especially useful for splitting over\n            validation/test datasets in order to make sure that all episodes\n            are copied but none are duplicated.\n        :return: a list of new datasets, each with their own subset of\n            episodes.\n\n        All splits will have the same number of episodes, but no episodes will\n        be duplicated.\n        \"\"\"", "\n", "if", "self", ".", "num_episodes", "<", "num_splits", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Not enough episodes to create those many splits.\"", "\n", ")", "\n", "\n", "", "if", "episodes_per_split", "is", "not", "None", ":", "\n", "            ", "if", "allow_uneven_splits", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"You probably don't want to specify allow_uneven_splits\"", "\n", "\" and episodes_per_split.\"", "\n", ")", "\n", "\n", "", "if", "num_splits", "*", "episodes_per_split", ">", "self", ".", "num_episodes", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"Not enough episodes to create those many splits.\"", "\n", ")", "\n", "\n", "", "", "new_datasets", "=", "[", "]", "\n", "\n", "if", "episodes_per_split", "is", "not", "None", ":", "\n", "            ", "stride", "=", "episodes_per_split", "\n", "", "else", ":", "\n", "            ", "stride", "=", "self", ".", "num_episodes", "//", "num_splits", "\n", "", "split_lengths", "=", "[", "stride", "]", "*", "num_splits", "\n", "\n", "if", "allow_uneven_splits", ":", "\n", "            ", "episodes_left", "=", "self", ".", "num_episodes", "-", "stride", "*", "num_splits", "\n", "split_lengths", "[", ":", "episodes_left", "]", "=", "[", "stride", "+", "1", "]", "*", "episodes_left", "\n", "assert", "sum", "(", "split_lengths", ")", "==", "self", ".", "num_episodes", "\n", "\n", "", "num_episodes", "=", "sum", "(", "split_lengths", ")", "\n", "\n", "rand_items", "=", "np", ".", "random", ".", "choice", "(", "\n", "self", ".", "num_episodes", ",", "num_episodes", ",", "replace", "=", "False", "\n", ")", ".", "tolist", "(", ")", "\n", "if", "collate_scene_ids", ":", "\n", "            ", "scene_ids", ":", "Dict", "[", "str", ",", "List", "[", "int", "]", "]", "=", "{", "}", "\n", "for", "rand_ind", "in", "rand_items", ":", "\n", "                ", "scene", "=", "self", ".", "episodes", "[", "rand_ind", "]", ".", "scene_id", "\n", "if", "scene", "not", "in", "scene_ids", ":", "\n", "                    ", "scene_ids", "[", "scene", "]", "=", "[", "]", "\n", "", "scene_ids", "[", "scene", "]", ".", "append", "(", "rand_ind", ")", "\n", "", "rand_items", "=", "[", "]", "\n", "list", "(", "map", "(", "rand_items", ".", "extend", ",", "scene_ids", ".", "values", "(", ")", ")", ")", "\n", "", "ep_ind", "=", "0", "\n", "new_episodes", "=", "[", "]", "\n", "for", "nn", "in", "range", "(", "num_splits", ")", ":", "\n", "            ", "new_dataset", "=", "copy", ".", "copy", "(", "self", ")", "# Creates a shallow copy", "\n", "new_dataset", ".", "episodes", "=", "[", "]", "\n", "new_datasets", ".", "append", "(", "new_dataset", ")", "\n", "for", "_ii", "in", "range", "(", "split_lengths", "[", "nn", "]", ")", ":", "\n", "                ", "new_dataset", ".", "episodes", ".", "append", "(", "self", ".", "episodes", "[", "rand_items", "[", "ep_ind", "]", "]", ")", "\n", "ep_ind", "+=", "1", "\n", "", "if", "sort_by_episode_id", ":", "\n", "                ", "new_dataset", ".", "episodes", ".", "sort", "(", "key", "=", "lambda", "ep", ":", "ep", ".", "episode_id", ")", "\n", "", "new_episodes", ".", "extend", "(", "new_dataset", ".", "episodes", ")", "\n", "", "if", "remove_unused_episodes", ":", "\n", "            ", "self", ".", "episodes", "=", "new_episodes", "\n", "", "return", "new_datasets", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.EpisodeIterator.__init__": [[356, 424], ["iter", "dataset.EpisodeIterator._set_shuffle_intervals", "random.seed", "numpy.random.seed", "numpy.random.choice", "isinstance", "list", "random.shuffle", "dataset.EpisodeIterator._group_scenes"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.EpisodeIterator._set_shuffle_intervals", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.seed", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.seed", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.EpisodeIterator._group_scenes"], ["def", "__init__", "(", "\n", "self", ",", "\n", "episodes", ":", "Sequence", "[", "T", "]", ",", "\n", "cycle", ":", "bool", "=", "True", ",", "\n", "shuffle", ":", "bool", "=", "False", ",", "\n", "group_by_scene", ":", "bool", "=", "True", ",", "\n", "max_scene_repeat_episodes", ":", "int", "=", "-", "1", ",", "\n", "max_scene_repeat_steps", ":", "int", "=", "-", "1", ",", "\n", "num_episode_sample", ":", "int", "=", "-", "1", ",", "\n", "step_repetition_range", ":", "float", "=", "0.2", ",", "\n", "seed", ":", "int", "=", "None", ",", "\n", ")", "->", "None", ":", "\n", "        ", "r\"\"\"..\n\n        :param episodes: list of episodes.\n        :param cycle: if :py:`True`, cycle back to first episodes when\n            StopIteration.\n        :param shuffle: if :py:`True`, shuffle scene groups when cycle. No\n            effect if cycle is set to :py:`False`. Will shuffle grouped scenes\n            if :p:`group_by_scene` is :py:`True`.\n        :param group_by_scene: if :py:`True`, group episodes from same scene.\n        :param max_scene_repeat_episodes: threshold of how many episodes from the same\n            scene can be loaded consecutively. :py:`-1` for no limit\n        :param max_scene_repeat_steps: threshold of how many steps from the same\n            scene can be taken consecutively. :py:`-1` for no limit\n        :param num_episode_sample: number of episodes to be sampled. :py:`-1`\n            for no sampling.\n        :param step_repetition_range: The maximum number of steps within each scene is\n            uniformly drawn from\n            [1 - step_repeat_range, 1 + step_repeat_range] * max_scene_repeat_steps\n            on each scene switch.  This stops all workers from swapping scenes at\n            the same time\n        \"\"\"", "\n", "if", "seed", ":", "\n", "            ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "# sample episodes", "\n", "", "if", "num_episode_sample", ">=", "0", ":", "\n", "            ", "episodes", "=", "np", ".", "random", ".", "choice", "(", "# type: ignore[assignment]", "\n", "episodes", ",", "num_episode_sample", ",", "replace", "=", "False", "# type: ignore[arg-type]", "\n", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "episodes", ",", "list", ")", ":", "\n", "            ", "episodes", "=", "list", "(", "episodes", ")", "\n", "\n", "", "self", ".", "episodes", "=", "episodes", "\n", "self", ".", "cycle", "=", "cycle", "\n", "self", ".", "group_by_scene", "=", "group_by_scene", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "\n", "if", "shuffle", ":", "\n", "            ", "random", ".", "shuffle", "(", "self", ".", "episodes", ")", "\n", "\n", "", "if", "group_by_scene", ":", "\n", "            ", "self", ".", "episodes", "=", "self", ".", "_group_scenes", "(", "self", ".", "episodes", ")", "\n", "\n", "", "self", ".", "max_scene_repetition_episodes", "=", "max_scene_repeat_episodes", "\n", "self", ".", "max_scene_repetition_steps", "=", "max_scene_repeat_steps", "\n", "\n", "self", ".", "_rep_count", "=", "-", "1", "# 0 corresponds to first episode already returned", "\n", "self", ".", "_step_count", "=", "0", "\n", "self", ".", "_prev_scene_id", ":", "Optional", "[", "str", "]", "=", "None", "\n", "\n", "self", ".", "_iterator", "=", "iter", "(", "self", ".", "episodes", ")", "\n", "\n", "self", ".", "step_repetition_range", "=", "step_repetition_range", "\n", "self", ".", "_set_shuffle_intervals", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.EpisodeIterator.__iter__": [[425, 427], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", "->", "\"EpisodeIterator\"", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.EpisodeIterator.__next__": [[428, 456], ["dataset.EpisodeIterator._forced_scene_switch_if", "next", "iter", "next", "dataset.EpisodeIterator._shuffle"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.EpisodeIterator._forced_scene_switch_if", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.EpisodeIterator._shuffle"], ["", "def", "__next__", "(", "self", ")", "->", "Episode", ":", "\n", "        ", "r\"\"\"The main logic for handling how episodes will be iterated.\n\n        :return: next episode.\n        \"\"\"", "\n", "self", ".", "_forced_scene_switch_if", "(", ")", "\n", "\n", "next_episode", "=", "next", "(", "self", ".", "_iterator", ",", "None", ")", "\n", "if", "next_episode", "is", "None", ":", "\n", "            ", "if", "not", "self", ".", "cycle", ":", "\n", "                ", "raise", "StopIteration", "\n", "\n", "", "self", ".", "_iterator", "=", "iter", "(", "self", ".", "episodes", ")", "\n", "\n", "if", "self", ".", "shuffle", ":", "\n", "                ", "self", ".", "_shuffle", "(", ")", "\n", "\n", "", "next_episode", "=", "next", "(", "self", ".", "_iterator", ")", "\n", "\n", "", "if", "(", "\n", "self", ".", "_prev_scene_id", "!=", "next_episode", ".", "scene_id", "\n", "and", "self", ".", "_prev_scene_id", "is", "not", "None", "\n", ")", ":", "\n", "            ", "self", ".", "_rep_count", "=", "0", "\n", "self", ".", "_step_count", "=", "0", "\n", "\n", "", "self", ".", "_prev_scene_id", "=", "next_episode", ".", "scene_id", "\n", "return", "next_episode", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.EpisodeIterator._forced_scene_switch": [[457, 471], ["iter", "list", "len", "sum", "itertools.groupby"], "methods", ["None"], ["", "def", "_forced_scene_switch", "(", "self", ")", "->", "None", ":", "\n", "        ", "r\"\"\"Internal method to switch the scene. Moves remaining episodes\n        from current scene to the end and switch to next scene episodes.\n        \"\"\"", "\n", "grouped_episodes", "=", "[", "\n", "list", "(", "g", ")", "\n", "for", "k", ",", "g", "in", "groupby", "(", "self", ".", "_iterator", ",", "key", "=", "lambda", "x", ":", "x", ".", "scene_id", ")", "\n", "]", "\n", "\n", "if", "len", "(", "grouped_episodes", ")", ">", "1", ":", "\n", "# Ensure we swap by moving the current group to the end", "\n", "            ", "grouped_episodes", "=", "grouped_episodes", "[", "1", ":", "]", "+", "grouped_episodes", "[", "0", ":", "1", "]", "\n", "\n", "", "self", ".", "_iterator", "=", "iter", "(", "sum", "(", "grouped_episodes", ",", "[", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.EpisodeIterator._shuffle": [[472, 485], ["list", "random.shuffle", "iter", "dataset.EpisodeIterator._group_scenes"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.EpisodeIterator._group_scenes"], ["", "def", "_shuffle", "(", "self", ")", "->", "None", ":", "\n", "        ", "r\"\"\"Internal method that shuffles the remaining episodes.\n        If self.group_by_scene is true, then shuffle groups of scenes.\n        \"\"\"", "\n", "assert", "self", ".", "shuffle", "\n", "episodes", "=", "list", "(", "self", ".", "_iterator", ")", "\n", "\n", "random", ".", "shuffle", "(", "episodes", ")", "\n", "\n", "if", "self", ".", "group_by_scene", ":", "\n", "            ", "episodes", "=", "self", ".", "_group_scenes", "(", "episodes", ")", "\n", "\n", "", "self", ".", "_iterator", "=", "iter", "(", "episodes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.EpisodeIterator._group_scenes": [[486, 504], ["sorted", "len"], "methods", ["None"], ["", "def", "_group_scenes", "(", "\n", "self", ",", "episodes", ":", "Union", "[", "Sequence", "[", "Episode", "]", ",", "List", "[", "Episode", "]", ",", "ndarray", "]", "\n", ")", "->", "List", "[", "T", "]", ":", "\n", "        ", "r\"\"\"Internal method that groups episodes by scene\n        Groups will be ordered by the order the first episode of a given\n        scene is in the list of episodes\n\n        So if the episodes list shuffled before calling this method,\n        the scenes will be in a random order\n        \"\"\"", "\n", "assert", "self", ".", "group_by_scene", "\n", "\n", "scene_sort_keys", ":", "Dict", "[", "str", ",", "int", "]", "=", "{", "}", "\n", "for", "e", "in", "episodes", ":", "\n", "            ", "if", "e", ".", "scene_id", "not", "in", "scene_sort_keys", ":", "\n", "                ", "scene_sort_keys", "[", "e", ".", "scene_id", "]", "=", "len", "(", "scene_sort_keys", ")", "\n", "\n", "", "", "return", "sorted", "(", "episodes", ",", "key", "=", "lambda", "e", ":", "scene_sort_keys", "[", "e", ".", "scene_id", "]", ")", "# type: ignore[arg-type]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.EpisodeIterator.step_taken": [[505, 507], ["None"], "methods", ["None"], ["", "def", "step_taken", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "_step_count", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.EpisodeIterator._randomize_value": [[508, 512], ["random.randint", "int", "int"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_randomize_value", "(", "value", ":", "int", ",", "value_range", ":", "float", ")", "->", "int", ":", "\n", "        ", "return", "random", ".", "randint", "(", "\n", "int", "(", "value", "*", "(", "1", "-", "value_range", ")", ")", ",", "int", "(", "value", "*", "(", "1", "+", "value_range", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.EpisodeIterator._set_shuffle_intervals": [[514, 526], ["dataset.EpisodeIterator._randomize_value"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.EpisodeIterator._randomize_value"], ["", "def", "_set_shuffle_intervals", "(", "self", ")", "->", "None", ":", "\n", "        ", "if", "self", ".", "max_scene_repetition_episodes", ">", "0", ":", "\n", "            ", "self", ".", "_max_rep_episode", "=", "self", ".", "max_scene_repetition_episodes", "\n", "", "else", ":", "\n", "            ", "self", ".", "_max_rep_episode", "=", "None", "\n", "\n", "", "if", "self", ".", "max_scene_repetition_steps", ">", "0", ":", "\n", "            ", "self", ".", "_max_rep_step", "=", "self", ".", "_randomize_value", "(", "\n", "self", ".", "max_scene_repetition_steps", ",", "self", ".", "step_repetition_range", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_max_rep_step", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.EpisodeIterator._forced_scene_switch_if": [[527, 548], ["dataset.EpisodeIterator._forced_scene_switch", "dataset.EpisodeIterator._set_shuffle_intervals"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.EpisodeIterator._forced_scene_switch", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.EpisodeIterator._set_shuffle_intervals"], ["", "", "def", "_forced_scene_switch_if", "(", "self", ")", "->", "None", ":", "\n", "        ", "do_switch", "=", "False", "\n", "self", ".", "_rep_count", "+=", "1", "\n", "\n", "# Shuffle if a scene has been selected more than _max_rep_episode times in a row", "\n", "if", "(", "\n", "self", ".", "_max_rep_episode", "is", "not", "None", "\n", "and", "self", ".", "_rep_count", ">=", "self", ".", "_max_rep_episode", "\n", ")", ":", "\n", "            ", "do_switch", "=", "True", "\n", "\n", "# Shuffle if a scene has been used for more than _max_rep_step steps in a row", "\n", "", "if", "(", "\n", "self", ".", "_max_rep_step", "is", "not", "None", "\n", "and", "self", ".", "_step_count", ">=", "self", ".", "_max_rep_step", "\n", ")", ":", "\n", "            ", "do_switch", "=", "True", "\n", "\n", "", "if", "do_switch", ":", "\n", "            ", "self", ".", "_forced_scene_switch", "(", ")", "\n", "self", ".", "_set_shuffle_intervals", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.benchmark.Benchmark.__init__": [[24, 39], ["habitat.config.default.get_config", "habitat.core.env.Env"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config"], ["parser", ".", "add_argument", "(", "\n", "\"--task-config\"", ",", "type", "=", "str", ",", "default", "=", "\"configs/tasks/pointnav.yaml\"", "\n", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "agent", "=", "ForwardOnlyAgent", "(", ")", "\n", "benchmark", "=", "habitat", ".", "Benchmark", "(", "args", ".", "task_config", ")", "\n", "metrics", "=", "benchmark", ".", "evaluate", "(", "agent", ",", "num_episodes", "=", "10", ")", "\n", "\n", "for", "k", ",", "v", "in", "metrics", ".", "items", "(", ")", ":", "\n", "        ", "print", "(", "\"{}: {:.3f}\"", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "\n", "\n", "", "", "if", "__name__", "==", "\"__main__\"", ":", "\n", "    ", "main", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.benchmark.Benchmark.remote_evaluate": [[40, 115], ["time.sleep", "os.environ.get", "grpc.insecure_channel", "evaluation_pb2_grpc.EnvironmentStub", "benchmark.Benchmark.remote_evaluate.unpack_for_grpc"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.benchmark.Benchmark.local_evaluate": [[116, 154], ["collections.defaultdict", "len", "benchmark.Benchmark._env.reset", "agent.reset", "benchmark.Benchmark._env.get_metrics", "benchmark.Benchmark.items", "len", "len", "agent.act", "benchmark.Benchmark._env.step", "isinstance", "agg_metrics.items", "v.items", "str"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env.get_metrics", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.policy.NetPolicy.act", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.benchmark.Benchmark.evaluate": [[155, 170], ["benchmark.Benchmark.remote_evaluate", "benchmark.Benchmark.local_evaluate"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.benchmark.Benchmark.remote_evaluate", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.benchmark.Benchmark.local_evaluate"], []], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.challenge.Challenge.__init__": [[14, 17], ["habitat.core.benchmark.Benchmark.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "eval_remote", "=", "False", ")", ":", "\n", "        ", "config_paths", "=", "os", ".", "environ", "[", "\"CHALLENGE_CONFIG_FILE\"", "]", "\n", "super", "(", ")", ".", "__init__", "(", "config_paths", ",", "eval_remote", "=", "eval_remote", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.challenge.Challenge.submit": [[18, 22], ["super().evaluate", "super().evaluate.items", "habitat.core.logging.logger.info"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.benchmark_gym.BenchmarkGym.evaluate"], ["", "def", "submit", "(", "self", ",", "agent", ")", ":", "\n", "        ", "metrics", "=", "super", "(", ")", ".", "evaluate", "(", "agent", ")", "\n", "for", "k", ",", "v", "in", "metrics", ".", "items", "(", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"{}: {}\"", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.environments.RearrangeRLEnv.__init__": [[35, 39], ["habitat.RLEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ":", "Config", ",", "dataset", ":", "Optional", "[", "Dataset", "]", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ",", "dataset", ")", "\n", "self", ".", "_reward_measure_name", "=", "self", ".", "config", ".", "TASK", ".", "REWARD_MEASURE", "\n", "self", ".", "_success_measure_name", "=", "self", ".", "config", ".", "TASK", ".", "SUCCESS_MEASURE", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.environments.RearrangeRLEnv.reset": [[40, 43], ["super().reset"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "observations", "=", "super", "(", ")", ".", "reset", "(", ")", "\n", "return", "observations", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.environments.RearrangeRLEnv.step": [[44, 46], ["super().step"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step"], ["", "def", "step", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "super", "(", ")", ".", "step", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.environments.RearrangeRLEnv.get_reward_range": [[47, 50], ["None"], "methods", ["None"], ["", "def", "get_reward_range", "(", "self", ")", ":", "\n", "# We don't know what the reward measure is bounded by", "\n", "        ", "return", "(", "-", "np", ".", "inf", ",", "np", ".", "inf", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.environments.RearrangeRLEnv.get_reward": [[51, 61], ["environments.RearrangeRLEnv._episode_success", "environments.RearrangeRLEnv._env.get_metrics"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.environments.NavRLEnv._episode_success", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env.get_metrics"], ["", "def", "get_reward", "(", "self", ",", "observations", ")", ":", "\n", "        ", "current_measure", "=", "self", ".", "_env", ".", "get_metrics", "(", ")", "[", "self", ".", "_reward_measure_name", "]", "\n", "reward", "=", "self", ".", "config", ".", "TASK", ".", "SLACK_REWARD", "\n", "\n", "reward", "+=", "current_measure", "\n", "\n", "if", "self", ".", "_episode_success", "(", ")", ":", "\n", "            ", "reward", "+=", "self", ".", "config", ".", "TASK", ".", "SUCCESS_REWARD", "\n", "\n", "", "return", "reward", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.environments.RearrangeRLEnv._episode_success": [[62, 64], ["environments.RearrangeRLEnv._env.get_metrics"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env.get_metrics"], ["", "def", "_episode_success", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_env", ".", "get_metrics", "(", ")", "[", "self", ".", "_success_measure_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.environments.RearrangeRLEnv.get_done": [[65, 72], ["environments.RearrangeRLEnv._episode_success"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.environments.NavRLEnv._episode_success"], ["", "def", "get_done", "(", "self", ",", "observations", ")", ":", "\n", "        ", "done", "=", "False", "\n", "if", "self", ".", "_env", ".", "episode_over", ":", "\n", "            ", "done", "=", "True", "\n", "", "if", "self", ".", "config", ".", "TASK", ".", "END_ON_SUCCESS", "and", "self", ".", "_episode_success", "(", ")", ":", "\n", "            ", "done", "=", "True", "\n", "", "return", "done", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.environments.RearrangeRLEnv.get_info": [[73, 75], ["environments.RearrangeRLEnv.habitat_env.get_metrics"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env.get_metrics"], ["", "def", "get_info", "(", "self", ",", "observations", ")", ":", "\n", "        ", "return", "self", ".", "habitat_env", ".", "get_metrics", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.environments.NavRLEnv.__init__": [[79, 85], ["habitat.RLEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ":", "Config", ",", "dataset", ":", "Optional", "[", "Dataset", "]", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ",", "dataset", ")", "\n", "self", ".", "_reward_measure_name", "=", "self", ".", "config", ".", "TASK", ".", "REWARD_MEASURE", "\n", "self", ".", "_success_measure_name", "=", "self", ".", "config", ".", "TASK", ".", "SUCCESS_MEASURE", "\n", "\n", "self", ".", "_previous_measure", ":", "Optional", "[", "float", "]", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.environments.NavRLEnv.reset": [[86, 92], ["super().reset", "environments.NavRLEnv._env.get_metrics"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env.get_metrics"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "observations", "=", "super", "(", ")", ".", "reset", "(", ")", "\n", "self", ".", "_previous_measure", "=", "self", ".", "_env", ".", "get_metrics", "(", ")", "[", "\n", "self", ".", "_reward_measure_name", "\n", "]", "\n", "return", "observations", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.environments.NavRLEnv.step": [[93, 95], ["super().step"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step"], ["", "def", "step", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "super", "(", ")", ".", "step", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.environments.NavRLEnv.get_reward_range": [[96, 100], ["None"], "methods", ["None"], ["", "def", "get_reward_range", "(", "self", ")", ":", "\n", "        ", "return", "(", "\n", "self", ".", "config", ".", "TASK", ".", "SLACK_REWARD", "-", "1.0", ",", "\n", "self", ".", "config", ".", "TASK", ".", "SUCCESS_REWARD", "+", "1.0", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.environments.NavRLEnv.get_reward": [[102, 114], ["environments.NavRLEnv._episode_success", "environments.NavRLEnv._env.get_metrics"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.environments.NavRLEnv._episode_success", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env.get_metrics"], ["", "def", "get_reward", "(", "self", ",", "observations", ")", ":", "\n", "        ", "reward", "=", "self", ".", "config", ".", "TASK", ".", "SLACK_REWARD", "\n", "\n", "current_measure", "=", "self", ".", "_env", ".", "get_metrics", "(", ")", "[", "self", ".", "_reward_measure_name", "]", "\n", "\n", "reward", "+=", "self", ".", "_previous_measure", "-", "current_measure", "\n", "self", ".", "_previous_measure", "=", "current_measure", "\n", "\n", "if", "self", ".", "_episode_success", "(", ")", ":", "\n", "            ", "reward", "+=", "self", ".", "config", ".", "TASK", ".", "SUCCESS_REWARD", "\n", "\n", "", "return", "reward", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.environments.NavRLEnv._episode_success": [[115, 117], ["environments.NavRLEnv._env.get_metrics"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env.get_metrics"], ["", "def", "_episode_success", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_env", ".", "get_metrics", "(", ")", "[", "self", ".", "_success_measure_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.environments.NavRLEnv.get_done": [[118, 123], ["environments.NavRLEnv._episode_success"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.environments.NavRLEnv._episode_success"], ["", "def", "get_done", "(", "self", ",", "observations", ")", ":", "\n", "        ", "done", "=", "False", "\n", "if", "self", ".", "_env", ".", "episode_over", "or", "self", ".", "_episode_success", "(", ")", ":", "\n", "            ", "done", "=", "True", "\n", "", "return", "done", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.environments.NavRLEnv.get_info": [[124, 126], ["environments.NavRLEnv.habitat_env.get_metrics"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env.get_metrics"], ["", "def", "get_info", "(", "self", ",", "observations", ")", ":", "\n", "        ", "return", "self", ".", "habitat_env", ".", "get_metrics", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.environments.get_env_class": [[21, 31], ["habitat.registry.get_env"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry.get_env"], ["def", "get_env_class", "(", "env_name", ":", "str", ")", "->", "Type", "[", "habitat", ".", "RLEnv", "]", ":", "\n", "    ", "r\"\"\"Return environment class based on name.\n\n    Args:\n        env_name: name of the environment.\n\n    Returns:\n        Type[habitat.RLEnv]: env class.\n    \"\"\"", "\n", "return", "habitat", ".", "registry", ".", "get_env", "(", "env_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.ActionSpaceConfiguration.get": [[41, 44], ["None"], "methods", ["None"], ["@", "abc", ".", "abstractmethod", "\n", "def", "get", "(", "self", ")", "->", "Any", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Sensor.__init__": [[83, 92], ["hasattr", "simulator.Sensor._get_sensor_type", "simulator.Sensor._get_observation_space", "simulator.Sensor._get_uuid"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.BumpSensor._get_sensor_type", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.BumpSensor._get_observation_space", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.BumpSensor._get_uuid"], ["def", "__init__", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "None", ":", "\n", "        ", "self", ".", "config", "=", "kwargs", "[", "\"config\"", "]", "if", "\"config\"", "in", "kwargs", "else", "None", "\n", "if", "hasattr", "(", "self", ".", "config", ",", "\"UUID\"", ")", ":", "\n", "# We allow any sensor config to override the UUID", "\n", "            ", "self", ".", "uuid", "=", "self", ".", "config", ".", "UUID", "\n", "", "else", ":", "\n", "            ", "self", ".", "uuid", "=", "self", ".", "_get_uuid", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "self", ".", "sensor_type", "=", "self", ".", "_get_sensor_type", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "observation_space", "=", "self", ".", "_get_observation_space", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Sensor._get_uuid": [[93, 95], ["None"], "methods", ["None"], ["", "def", "_get_uuid", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "str", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Sensor._get_sensor_type": [[96, 98], ["None"], "methods", ["None"], ["", "def", "_get_sensor_type", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "SensorTypes", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Sensor._get_observation_space": [[99, 101], ["None"], "methods", ["None"], ["", "def", "_get_observation_space", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "Space", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Sensor.get_observation": [[102, 109], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "get_observation", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "Any", ":", "\n", "        ", "r\"\"\"\n        Returns:\n            current observation for Sensor.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Observations.__init__": [[114, 128], ["super().__init__", "sensor.get_observation", "sensors.items"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.BumpSensor.get_observation"], ["def", "__init__", "(", "\n", "self", ",", "sensors", ":", "Dict", "[", "str", ",", "Sensor", "]", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", "\n", ")", "->", "None", ":", "\n", "        ", "\"\"\"Constructor\n\n        :param sensors: list of sensors whose observations are fetched and\n            packaged.\n        \"\"\"", "\n", "\n", "data", "=", "[", "\n", "(", "uuid", ",", "sensor", ".", "get_observation", "(", "*", "args", ",", "**", "kwargs", ")", ")", "\n", "for", "uuid", ",", "sensor", "in", "sensors", ".", "items", "(", ")", "\n", "]", "\n", "super", "(", ")", ".", "__init__", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.RGBSensor.__init__": [[131, 133], ["simulator.Sensor.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.RGBSensor._get_uuid": [[134, 136], ["None"], "methods", ["None"], ["", "def", "_get_uuid", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "str", ":", "\n", "        ", "return", "\"rgb\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.RGBSensor._get_sensor_type": [[137, 139], ["None"], "methods", ["None"], ["", "def", "_get_sensor_type", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "SensorTypes", ":", "\n", "        ", "return", "SensorTypes", ".", "COLOR", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.RGBSensor._get_observation_space": [[140, 142], ["None"], "methods", ["None"], ["", "def", "_get_observation_space", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "Space", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.RGBSensor.get_observation": [[143, 145], ["None"], "methods", ["None"], ["", "def", "get_observation", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "VisualObservation", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.DepthSensor.__init__": [[148, 150], ["simulator.Sensor.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.DepthSensor._get_uuid": [[151, 153], ["None"], "methods", ["None"], ["", "def", "_get_uuid", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "str", ":", "\n", "        ", "return", "\"depth\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.DepthSensor._get_sensor_type": [[154, 156], ["None"], "methods", ["None"], ["", "def", "_get_sensor_type", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "SensorTypes", ":", "\n", "        ", "return", "SensorTypes", ".", "DEPTH", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.DepthSensor._get_observation_space": [[157, 159], ["None"], "methods", ["None"], ["", "def", "_get_observation_space", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "Space", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.DepthSensor.get_observation": [[160, 162], ["None"], "methods", ["None"], ["", "def", "get_observation", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "VisualObservation", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SemanticSensor.__init__": [[165, 167], ["simulator.Sensor.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SemanticSensor._get_uuid": [[168, 170], ["None"], "methods", ["None"], ["", "def", "_get_uuid", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "str", ":", "\n", "        ", "return", "\"semantic\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SemanticSensor._get_sensor_type": [[171, 173], ["None"], "methods", ["None"], ["", "def", "_get_sensor_type", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "SensorTypes", ":", "\n", "        ", "return", "SensorTypes", ".", "SEMANTIC", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SemanticSensor._get_observation_space": [[174, 176], ["None"], "methods", ["None"], ["", "def", "_get_observation_space", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "Space", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SemanticSensor.get_observation": [[177, 179], ["None"], "methods", ["None"], ["", "def", "get_observation", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "VisualObservation", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.BumpSensor.__init__": [[182, 184], ["simulator.Sensor.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.BumpSensor._get_uuid": [[185, 187], ["None"], "methods", ["None"], ["", "def", "_get_uuid", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "str", ":", "\n", "        ", "return", "\"bump\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.BumpSensor._get_sensor_type": [[188, 190], ["None"], "methods", ["None"], ["", "def", "_get_sensor_type", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "SensorTypes", ":", "\n", "        ", "return", "SensorTypes", ".", "FORCE", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.BumpSensor._get_observation_space": [[191, 193], ["None"], "methods", ["None"], ["", "def", "_get_observation_space", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "Space", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.BumpSensor.get_observation": [[194, 196], ["None"], "methods", ["None"], ["", "def", "get_observation", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "Any", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.__init__": [[206, 221], ["collections.OrderedDict", "collections.OrderedDict", "gym.spaces.Dict"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sensors", ":", "Iterable", "[", "Sensor", "]", ")", "->", "None", ":", "\n", "        ", "\"\"\"Constructor\n\n        :param sensors: list containing sensors for the environment, uuid of\n            each sensor must be unique.\n        \"\"\"", "\n", "self", ".", "sensors", "=", "OrderedDict", "(", ")", "\n", "ordered_spaces", ":", "OrderedDict", "[", "str", ",", "Space", "]", "=", "OrderedDict", "(", ")", "\n", "for", "sensor", "in", "sensors", ":", "\n", "            ", "assert", "(", "\n", "sensor", ".", "uuid", "not", "in", "self", ".", "sensors", "\n", ")", ",", "\"'{}' is duplicated sensor uuid\"", ".", "format", "(", "sensor", ".", "uuid", ")", "\n", "self", ".", "sensors", "[", "sensor", ".", "uuid", "]", "=", "sensor", "\n", "ordered_spaces", "[", "sensor", ".", "uuid", "]", "=", "sensor", ".", "observation_space", "\n", "", "self", ".", "observation_spaces", "=", "spaces", ".", "Dict", "(", "spaces", "=", "ordered_spaces", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get": [[222, 224], ["None"], "methods", ["None"], ["", "def", "get", "(", "self", ",", "uuid", ":", "str", ")", "->", "Sensor", ":", "\n", "        ", "return", "self", ".", "sensors", "[", "uuid", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get_observations": [[225, 230], ["simulator.Observations"], "methods", ["None"], ["", "def", "get_observations", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "Observations", ":", "\n", "        ", "r\"\"\"Collects data from all sensors and returns it packaged inside\n        :ref:`Observations`.\n        \"\"\"", "\n", "return", "Observations", "(", "self", ".", "sensors", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.__init__": [[251, 253], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "->", "None", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.sensor_suite": [[254, 257], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "sensor_suite", "(", "self", ")", "->", "SensorSuite", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.action_space": [[258, 261], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "action_space", "(", "self", ")", "->", "Space", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.reset": [[262, 268], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", "->", "Observations", ":", "\n", "        ", "r\"\"\"resets the simulator and returns the initial observations.\n\n        :return: initial observations from simulator.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.step": [[269, 276], ["None"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "action", ",", "*", "args", ",", "**", "kwargs", ")", "->", "Observations", ":", "\n", "        ", "r\"\"\"Perform an action in the simulator and return observations.\n\n        :param action: action to be performed inside the simulator.\n        :return: observations after taking action in simulator.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.seed": [[277, 279], ["None"], "methods", ["None"], ["", "def", "seed", "(", "self", ",", "seed", ":", "int", ")", "->", "None", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.reconfigure": [[280, 282], ["None"], "methods", ["None"], ["", "def", "reconfigure", "(", "self", ",", "config", ":", "Config", ")", "->", "None", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.geodesic_distance": [[283, 304], ["None"], "methods", ["None"], ["", "def", "geodesic_distance", "(", "\n", "self", ",", "\n", "position_a", ":", "Union", "[", "Sequence", "[", "float", "]", ",", "np", ".", "ndarray", "]", ",", "\n", "position_b", ":", "Union", "[", "\n", "Sequence", "[", "float", "]", ",", "Sequence", "[", "Sequence", "[", "float", "]", "]", ",", "np", ".", "ndarray", "\n", "]", ",", "\n", "episode", ":", "Optional", "[", "Episode", "]", "=", "None", ",", "\n", ")", "->", "float", ":", "\n", "        ", "r\"\"\"Calculates geodesic distance between two points.\n\n        :param position_a: coordinates of first point.\n        :param position_b: coordinates of second point or list of goal points\n            coordinates.\n        :param episode: The episode with these ends points.  This is used for\n            shortest path computation caching\n        :return:\n            the geodesic distance in the cartesian space between points\n            :p:`position_a` and :p:`position_b`, if no path is found between\n            the points then :ref:`math.inf` is returned.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.get_agent_state": [[305, 312], ["None"], "methods", ["None"], ["", "def", "get_agent_state", "(", "self", ",", "agent_id", ":", "int", "=", "0", ")", "->", "AgentState", ":", "\n", "        ", "r\"\"\"..\n\n        :param agent_id: id of agent.\n        :return: state of agent corresponding to :p:`agent_id`.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.get_observations_at": [[313, 333], ["None"], "methods", ["None"], ["", "def", "get_observations_at", "(", "\n", "self", ",", "\n", "position", ":", "List", "[", "float", "]", ",", "\n", "rotation", ":", "List", "[", "float", "]", ",", "\n", "keep_agent_at_new_pose", ":", "bool", "=", "False", ",", "\n", ")", "->", "Optional", "[", "Observations", "]", ":", "\n", "        ", "\"\"\"Returns the observation.\n\n        :param position: list containing 3 entries for :py:`(x, y, z)`.\n        :param rotation: list with 4 entries for :py:`(x, y, z, w)` elements\n            of unit quaternion (versor) representing agent 3D orientation,\n            (https://en.wikipedia.org/wiki/Versor)\n        :param keep_agent_at_new_pose: If true, the agent will stay at the\n            requested location. Otherwise it will return to where it started.\n        :return:\n            The observations or :py:`None` if it was unable to get valid\n            observations.\n\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.sample_navigable_point": [[334, 341], ["None"], "methods", ["None"], ["", "def", "sample_navigable_point", "(", "self", ")", "->", "List", "[", "float", "]", ":", "\n", "        ", "r\"\"\"Samples a navigable point from the simulator. A point is defined as\n        navigable if the agent can be initialized at that point.\n\n        :return: navigable point.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.is_navigable": [[342, 348], ["None"], "methods", ["None"], ["", "def", "is_navigable", "(", "self", ",", "point", ":", "List", "[", "float", "]", ")", "->", "bool", ":", "\n", "        ", "r\"\"\"Return :py:`True` if the agent can stand at the specified point.\n\n        :param point: the point to check.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.action_space_shortest_path": [[349, 362], ["None"], "methods", ["None"], ["", "def", "action_space_shortest_path", "(", "\n", "self", ",", "source", ":", "AgentState", ",", "targets", ":", "List", "[", "AgentState", "]", ",", "agent_id", ":", "int", "=", "0", "\n", ")", "->", "List", "[", "ShortestPathPoint", "]", ":", "\n", "        ", "r\"\"\"Calculates the shortest path between source and target agent\n        states.\n\n        :param source: source agent state for shortest path calculation.\n        :param targets: target agent state(s) for shortest path calculation.\n        :param agent_id: id for agent (relevant for multi-agent setup).\n        :return: list of agent states and actions along the shortest path from\n            source to the nearest target (both included).\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.get_straight_shortest_path_points": [[363, 378], ["None"], "methods", ["None"], ["", "def", "get_straight_shortest_path_points", "(", "\n", "self", ",", "position_a", ":", "List", "[", "float", "]", ",", "position_b", ":", "List", "[", "float", "]", "\n", ")", "->", "List", "[", "List", "[", "float", "]", "]", ":", "\n", "        ", "r\"\"\"Returns points along the geodesic (shortest) path between two\n        points irrespective of the angles between the waypoints.\n\n        :param position_a: the start point. This will be the first point in\n            the returned list.\n        :param position_b: the end point. This will be the last point in the\n            returned list.\n        :return: a list of waypoints :py:`(x, y, z)` on the geodesic path\n            between the two points.\n        \"\"\"", "\n", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.up_vector": [[379, 385], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "up_vector", "(", "self", ")", "->", "\"np.ndarray\"", ":", "\n", "        ", "r\"\"\"The vector representing the direction upward (perpendicular to the\n        floor) from the global coordinate frame.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.forward_vector": [[386, 393], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "forward_vector", "(", "self", ")", "->", "\"np.ndarray\"", ":", "\n", "        ", "r\"\"\"The forward direction in the global coordinate frame i.e. the\n        direction of forward movement for an agent with 0 degrees rotation in\n        the ground plane.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.render": [[394, 396], ["None"], "methods", ["None"], ["", "def", "render", "(", "self", ",", "mode", ":", "str", "=", "\"rgb\"", ")", "->", "Any", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.close": [[397, 399], ["None"], "methods", ["None"], ["", "def", "close", "(", "self", ",", "destroy", ":", "bool", "=", "True", ")", "->", "None", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.previous_step_collided": [[400, 407], ["None"], "methods", ["None"], ["", "def", "previous_step_collided", "(", "self", ")", "->", "bool", ":", "\n", "        ", "r\"\"\"Whether or not the previous step resulted in a collision\n\n        :return: :py:`True` if the previous step resulted in a collision,\n            :py:`False` otherwise\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.__enter__": [[408, 410], ["None"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", "->", "\"Simulator\"", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.__exit__": [[411, 413], ["simulator.Simulator.close"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.close"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_val", ",", "exc_tb", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.utils.Singleton.__call__": [[95, 101], ["super().__call__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.Normalize.__call__"], ["", "else", ":", "\n", "        ", "background_patch", "[", ":", "]", "=", "foreground", "\n", "", "return", "background", "\n", "\n", "\n", "", "def", "images_to_video", "(", "\n", "images", ":", "List", "[", "np", ".", "ndarray", "]", ",", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.utils.DatasetFloatJSONEncoder.default": [[123, 134], ["isinstance", "isinstance", "obj.tolist", "habitat.utils.geometry_utils.quaternion_to_list", "hasattr", "obj.__getstate__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.geometry_utils.quaternion_to_list", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Episode.__getstate__"], ["assert", "0", "<=", "quality", "<=", "10", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "", "video_name", "=", "video_name", ".", "replace", "(", "\" \"", ",", "\"_\"", ")", ".", "replace", "(", "\"\\n\"", ",", "\"_\"", ")", "\n", "\n", "# File names are not allowed to be over 255 characters", "\n", "video_name_split", "=", "video_name", ".", "split", "(", "\"/\"", ")", "\n", "video_name", "=", "\"/\"", ".", "join", "(", "\n", "video_name_split", "[", ":", "-", "1", "]", "+", "[", "video_name_split", "[", "-", "1", "]", "[", ":", "251", "]", "+", "\".mp4\"", "]", "\n", ")", "\n", "\n", "writer", "=", "imageio", ".", "get_writer", "(", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.utils.DatasetFloatJSONEncoder.iterencode": [[138, 185], ["json.encoder._make_iterencode", "json.encoder._make_iterencode.", "format", "cmath.isnan", "ValueError", "_repr", "repr"], "methods", ["None"], ["**", "kwargs", ",", "\n", ")", "\n", "logger", ".", "info", "(", "f\"Video created: {os.path.join(output_dir, video_name)}\"", ")", "\n", "if", "verbose", ":", "\n", "        ", "images_iter", "=", "tqdm", ".", "tqdm", "(", "images", ")", "\n", "", "else", ":", "\n", "        ", "images_iter", "=", "images", "\n", "", "for", "im", "in", "images_iter", ":", "\n", "        ", "writer", ".", "append_data", "(", "im", ")", "\n", "", "writer", ".", "close", "(", ")", "\n", "\n", "\n", "", "def", "draw_collision", "(", "view", ":", "np", ".", "ndarray", ",", "alpha", ":", "float", "=", "0.4", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "r\"\"\"Draw translucent red strips on the border of input view to indicate\n    a collision has taken place.\n    Args:\n        view: input view of size HxWx3 in RGB order.\n        alpha: Opacity of red collision strip. 1 is completely non-transparent.\n    Returns:\n        A view with collision effect drawn.\n    \"\"\"", "\n", "strip_width", "=", "view", ".", "shape", "[", "0", "]", "//", "20", "\n", "mask", "=", "np", ".", "ones", "(", "view", ".", "shape", ")", "\n", "mask", "[", "strip_width", ":", "-", "strip_width", ",", "strip_width", ":", "-", "strip_width", "]", "=", "0", "\n", "mask", "=", "mask", "==", "1", "\n", "view", "[", "mask", "]", "=", "(", "alpha", "*", "np", ".", "array", "(", "[", "255", ",", "0", ",", "0", "]", ")", "+", "(", "1.0", "-", "alpha", ")", "*", "view", ")", "[", "mask", "]", "\n", "return", "view", "\n", "\n", "\n", "", "def", "tile_images", "(", "render_obs_images", ":", "List", "[", "np", ".", "ndarray", "]", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"Tiles multiple images of non-equal size to a single image. Images are\n    tiled into columns making the returned image wider than tall.\n    \"\"\"", "\n", "# Get the images in descending order of vertical height.", "\n", "render_obs_images", "=", "sorted", "(", "\n", "render_obs_images", ",", "key", "=", "lambda", "x", ":", "x", ".", "shape", "[", "0", "]", ",", "reverse", "=", "True", "\n", ")", "\n", "img_cols", "=", "[", "[", "render_obs_images", "[", "0", "]", "]", "]", "\n", "max_height", "=", "render_obs_images", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "cur_y", "=", "0.0", "\n", "# Arrange the images in columns with the largest image to the left.", "\n", "col", "=", "[", "]", "\n", "for", "im", "in", "render_obs_images", "[", "1", ":", "]", ":", "\n", "        ", "if", "cur_y", "+", "im", ".", "shape", "[", "0", "]", "<=", "max_height", ":", "\n", "            ", "col", ".", "append", "(", "im", ")", "\n", "cur_y", "+=", "im", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "img_cols", ".", "append", "(", "col", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.utils.tile_images": [[30, 61], ["numpy.asarray", "int", "int", "numpy.array", "np.array.reshape", "out_image.reshape.transpose", "out_image.reshape.reshape", "len", "numpy.ceil", "numpy.ceil", "numpy.sqrt", "float", "range"], "function", ["None"], ["\n", "assert", "mask", "is", "None", "or", "mask", ".", "shape", "[", ":", "2", "]", "==", "foreground", ".", "shape", "[", ":", "2", "]", "\n", "foreground_size", "=", "foreground", ".", "shape", "[", ":", "2", "]", "\n", "min_pad", "=", "(", "\n", "max", "(", "0", ",", "foreground_size", "[", "0", "]", "//", "2", "-", "location", "[", "0", "]", ")", ",", "\n", "max", "(", "0", ",", "foreground_size", "[", "1", "]", "//", "2", "-", "location", "[", "1", "]", ")", ",", "\n", ")", "\n", "\n", "max_pad", "=", "(", "\n", "max", "(", "\n", "0", ",", "\n", "(", "location", "[", "0", "]", "+", "(", "foreground_size", "[", "0", "]", "-", "foreground_size", "[", "0", "]", "//", "2", ")", ")", "\n", "-", "background", ".", "shape", "[", "0", "]", ",", "\n", ")", ",", "\n", "max", "(", "\n", "0", ",", "\n", "(", "location", "[", "1", "]", "+", "(", "foreground_size", "[", "1", "]", "-", "foreground_size", "[", "1", "]", "//", "2", ")", ")", "\n", "-", "background", ".", "shape", "[", "1", "]", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "background_patch", "=", "background", "[", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.utils.not_none_validator": [[63, 68], ["ValueError"], "function", ["None"], ["location", "[", "0", "]", "\n", "+", "(", "foreground_size", "[", "0", "]", "-", "foreground_size", "[", "0", "]", "//", "2", ")", "\n", "-", "max_pad", "[", "0", "]", "\n", ")", ",", "\n", "(", "location", "[", "1", "]", "-", "foreground_size", "[", "1", "]", "//", "2", "+", "min_pad", "[", "1", "]", ")", ":", "(", "\n", "location", "[", "1", "]", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.utils.try_cv2_import": [[70, 90], ["os.environ.get", "sys.path.remove", "sys.path.append"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get"], ["-", "max_pad", "[", "1", "]", "\n", ")", ",", "\n", "]", "\n", "foreground", "=", "foreground", "[", "\n", "min_pad", "[", "0", "]", ":", "foreground", ".", "shape", "[", "0", "]", "-", "max_pad", "[", "0", "]", ",", "\n", "min_pad", "[", "1", "]", ":", "foreground", ".", "shape", "[", "1", "]", "-", "max_pad", "[", "1", "]", ",", "\n", "]", "\n", "if", "foreground", ".", "size", "==", "0", "or", "background_patch", ".", "size", "==", "0", ":", "\n", "# Nothing to do, no overlap.", "\n", "        ", "return", "background", "\n", "\n", "", "if", "mask", "is", "not", "None", ":", "\n", "        ", "mask", "=", "mask", "[", "\n", "min_pad", "[", "0", "]", ":", "foreground", ".", "shape", "[", "0", "]", "-", "max_pad", "[", "0", "]", ",", "\n", "min_pad", "[", "1", "]", ":", "foreground", ".", "shape", "[", "1", "]", "-", "max_pad", "[", "1", "]", ",", "\n", "]", "\n", "\n", "", "if", "foreground", ".", "shape", "[", "2", "]", "==", "4", ":", "\n", "# Alpha blending", "\n", "        ", "foreground", "=", "(", "\n", "background_patch", ".", "astype", "(", "np", ".", "int32", ")", "*", "(", "255", "-", "foreground", "[", ":", ",", ":", ",", "[", "3", "]", "]", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.utils.center_crop": [[103, 115], ["None"], "function", ["None"], ["video_name", ":", "str", ",", "\n", "fps", ":", "int", "=", "10", ",", "\n", "quality", ":", "Optional", "[", "float", "]", "=", "5", ",", "\n", "verbose", ":", "bool", "=", "True", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env.__init__": [[57, 128], ["config.is_frozen", "habitat.sims.make_sim", "habitat.tasks.make_task", "gym.spaces.Dict", "habitat.datasets.make_dataset", "env.Env._setup_episode_iterator", "next", "env.Env._config.defrost", "env.Env._config.freeze", "len", "len"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.sims.registration.make_sim", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.tasks.registration.make_task", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.registration.make_dataset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env._setup_episode_iterator"], ["def", "__init__", "(", "\n", "self", ",", "config", ":", "Config", ",", "dataset", ":", "Optional", "[", "Dataset", "[", "Episode", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "\"\"\"Constructor\n\n        :param config: config for the environment. Should contain id for\n            simulator and ``task_name`` which are passed into ``make_sim`` and\n            ``make_task``.\n        :param dataset: reference to dataset for task instance level\n            information. Can be defined as :py:`None` in which case\n            ``_episodes`` should be populated from outside.\n        \"\"\"", "\n", "\n", "assert", "config", ".", "is_frozen", "(", ")", ",", "(", "\n", "\"Freeze the config before creating the \"", "\n", "\"environment, use config.freeze().\"", "\n", ")", "\n", "self", ".", "_config", "=", "config", "\n", "self", ".", "_dataset", "=", "dataset", "\n", "if", "self", ".", "_dataset", "is", "None", "and", "config", ".", "DATASET", ".", "TYPE", ":", "\n", "            ", "self", ".", "_dataset", "=", "make_dataset", "(", "\n", "id_dataset", "=", "config", ".", "DATASET", ".", "TYPE", ",", "config", "=", "config", ".", "DATASET", "\n", ")", "\n", "\n", "", "self", ".", "_current_episode", "=", "None", "\n", "self", ".", "_episode_iterator", "=", "None", "\n", "self", ".", "_episode_from_iter_on_reset", "=", "True", "\n", "self", ".", "_episode_force_changed", "=", "False", "\n", "\n", "# load the first scene if dataset is present", "\n", "if", "self", ".", "_dataset", ":", "\n", "            ", "assert", "(", "\n", "len", "(", "self", ".", "_dataset", ".", "episodes", ")", ">", "0", "\n", ")", ",", "\"dataset should have non-empty episodes list\"", "\n", "self", ".", "_setup_episode_iterator", "(", ")", "\n", "self", ".", "current_episode", "=", "next", "(", "self", ".", "episode_iterator", ")", "\n", "self", ".", "_config", ".", "defrost", "(", ")", "\n", "self", ".", "_config", ".", "SIMULATOR", ".", "SCENE_DATASET", "=", "(", "\n", "self", ".", "current_episode", ".", "scene_dataset_config", "\n", ")", "\n", "self", ".", "_config", ".", "SIMULATOR", ".", "SCENE", "=", "self", ".", "current_episode", ".", "scene_id", "\n", "self", ".", "_config", ".", "freeze", "(", ")", "\n", "\n", "self", ".", "number_of_episodes", "=", "len", "(", "self", ".", "episodes", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "number_of_episodes", "=", "None", "\n", "\n", "", "self", ".", "_sim", "=", "make_sim", "(", "\n", "id_sim", "=", "self", ".", "_config", ".", "SIMULATOR", ".", "TYPE", ",", "config", "=", "self", ".", "_config", ".", "SIMULATOR", "\n", ")", "\n", "\n", "self", ".", "_task", "=", "make_task", "(", "\n", "self", ".", "_config", ".", "TASK", ".", "TYPE", ",", "\n", "config", "=", "self", ".", "_config", ".", "TASK", ",", "\n", "sim", "=", "self", ".", "_sim", ",", "\n", "dataset", "=", "self", ".", "_dataset", ",", "\n", ")", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Dict", "(", "\n", "{", "\n", "**", "self", ".", "_sim", ".", "sensor_suite", ".", "observation_spaces", ".", "spaces", ",", "\n", "**", "self", ".", "_task", ".", "sensor_suite", ".", "observation_spaces", ".", "spaces", ",", "\n", "}", "\n", ")", "\n", "self", ".", "action_space", "=", "self", ".", "_task", ".", "action_space", "\n", "self", ".", "_max_episode_seconds", "=", "(", "\n", "self", ".", "_config", ".", "ENVIRONMENT", ".", "MAX_EPISODE_SECONDS", "\n", ")", "\n", "self", ".", "_max_episode_steps", "=", "self", ".", "_config", ".", "ENVIRONMENT", ".", "MAX_EPISODE_STEPS", "\n", "self", ".", "_elapsed_steps", "=", "0", "\n", "self", ".", "_episode_start_time", ":", "Optional", "[", "float", "]", "=", "None", "\n", "self", ".", "_episode_over", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env._setup_episode_iterator": [[129, 138], ["env.Env._dataset.get_episode_iterator", "k.lower", "env.Env._config.ENVIRONMENT.ITERATOR_OPTIONS.items"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.get_episode_iterator"], ["", "def", "_setup_episode_iterator", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "_dataset", "is", "not", "None", "\n", "iter_option_dict", "=", "{", "\n", "k", ".", "lower", "(", ")", ":", "v", "\n", "for", "k", ",", "v", "in", "self", ".", "_config", ".", "ENVIRONMENT", ".", "ITERATOR_OPTIONS", ".", "items", "(", ")", "\n", "}", "\n", "iter_option_dict", "[", "\"seed\"", "]", "=", "self", ".", "_config", ".", "SEED", "\n", "self", ".", "_episode_iterator", "=", "self", ".", "_dataset", ".", "get_episode_iterator", "(", "\n", "**", "iter_option_dict", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env.current_episode": [[145, 152], ["None"], "methods", ["None"], ["", "@", "current_episode", ".", "setter", "\n", "def", "current_episode", "(", "self", ",", "episode", ":", "Episode", ")", "->", "None", ":", "\n", "        ", "self", ".", "_current_episode", "=", "episode", "\n", "# This allows the current episode to be set here", "\n", "# and then reset be called without the episode changing", "\n", "self", ".", "_episode_from_iter_on_reset", "=", "False", "\n", "self", ".", "_episode_force_changed", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env.episode_iterator": [[157, 162], ["None"], "methods", ["None"], ["", "@", "episode_iterator", ".", "setter", "\n", "def", "episode_iterator", "(", "self", ",", "new_iter", ":", "Iterator", "[", "Episode", "]", ")", "->", "None", ":", "\n", "        ", "self", ".", "_episode_iterator", "=", "new_iter", "\n", "self", ".", "_episode_force_changed", "=", "True", "\n", "self", ".", "_episode_from_iter_on_reset", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env.episodes": [[171, 184], ["env.Env._setup_episode_iterator", "len"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env._setup_episode_iterator"], ["", "@", "episodes", ".", "setter", "\n", "def", "episodes", "(", "self", ",", "episodes", ":", "List", "[", "Episode", "]", ")", "->", "None", ":", "\n", "        ", "assert", "(", "\n", "len", "(", "episodes", ")", ">", "0", "\n", ")", ",", "\"Environment doesn't accept empty episodes list.\"", "\n", "assert", "(", "\n", "self", ".", "_dataset", "is", "not", "None", "\n", ")", ",", "\"Environment must have a dataset to set episodes\"", "\n", "self", ".", "_dataset", ".", "episodes", "=", "episodes", "\n", "self", ".", "_setup_episode_iterator", "(", ")", "\n", "self", ".", "_current_episode", "=", "None", "\n", "self", ".", "_episode_force_changed", "=", "True", "\n", "self", ".", "_episode_from_iter_on_reset", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env.sim": [[185, 188], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "sim", "(", "self", ")", "->", "Simulator", ":", "\n", "        ", "return", "self", ".", "_sim", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env.episode_start_time": [[189, 192], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "episode_start_time", "(", "self", ")", "->", "Optional", "[", "float", "]", ":", "\n", "        ", "return", "self", ".", "_episode_start_time", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env.episode_over": [[193, 196], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "episode_over", "(", "self", ")", "->", "bool", ":", "\n", "        ", "return", "self", ".", "_episode_over", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env.task": [[197, 200], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "task", "(", "self", ")", "->", "EmbodiedTask", ":", "\n", "        ", "return", "self", ".", "_task", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env._elapsed_seconds": [[201, 207], ["time.time"], "methods", ["None"], ["", "@", "property", "\n", "def", "_elapsed_seconds", "(", "self", ")", "->", "float", ":", "\n", "        ", "assert", "(", "\n", "self", ".", "_episode_start_time", "\n", ")", ",", "\"Elapsed seconds requested before episode was started.\"", "\n", "return", "time", ".", "time", "(", ")", "-", "self", ".", "_episode_start_time", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env.get_metrics": [[208, 210], ["env.Env._task.measurements.get_metrics"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env.get_metrics"], ["", "def", "get_metrics", "(", "self", ")", "->", "Metrics", ":", "\n", "        ", "return", "self", ".", "_task", ".", "measurements", ".", "get_metrics", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env._past_limit": [[211, 218], ["None"], "methods", ["None"], ["", "def", "_past_limit", "(", "self", ")", "->", "bool", ":", "\n", "        ", "return", "(", "\n", "self", ".", "_max_episode_steps", "!=", "0", "\n", "and", "self", ".", "_max_episode_steps", "<=", "self", ".", "_elapsed_steps", "\n", ")", "or", "(", "\n", "self", ".", "_max_episode_seconds", "!=", "0", "\n", "and", "self", ".", "_max_episode_seconds", "<=", "self", ".", "_elapsed_seconds", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env._reset_stats": [[220, 224], ["time.time"], "methods", ["None"], ["", "def", "_reset_stats", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "_episode_start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "_elapsed_steps", "=", "0", "\n", "self", ".", "_episode_over", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env.reset": [[225, 260], ["env.Env._reset_stats", "env.Env.reconfigure", "env.Env.task.reset", "env.Env._task.measurements.reset_measures", "next"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env._reset_stats", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env.reconfigure", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measurements.reset_measures"], ["", "def", "reset", "(", "self", ")", "->", "Observations", ":", "\n", "        ", "r\"\"\"Resets the environments and returns the initial observations.\n\n        :return: initial observations from the environment.\n        \"\"\"", "\n", "self", ".", "_reset_stats", "(", ")", "\n", "\n", "# Delete the shortest path cache of the current episode", "\n", "# Caching it for the next time we see this episode isn't really worth", "\n", "# it", "\n", "if", "self", ".", "_current_episode", "is", "not", "None", ":", "\n", "            ", "self", ".", "_current_episode", ".", "_shortest_path_cache", "=", "None", "\n", "\n", "", "if", "(", "\n", "self", ".", "_episode_iterator", "is", "not", "None", "\n", "and", "self", ".", "_episode_from_iter_on_reset", "\n", ")", ":", "\n", "            ", "self", ".", "_current_episode", "=", "next", "(", "self", ".", "_episode_iterator", ")", "\n", "\n", "# This is always set to true after a reset that way", "\n", "# on the next reset an new episode is taken (if possible)", "\n", "", "self", ".", "_episode_from_iter_on_reset", "=", "True", "\n", "self", ".", "_episode_force_changed", "=", "False", "\n", "\n", "assert", "self", ".", "_current_episode", "is", "not", "None", ",", "\"Reset requires an episode\"", "\n", "self", ".", "reconfigure", "(", "self", ".", "_config", ")", "\n", "\n", "observations", "=", "self", ".", "task", ".", "reset", "(", "episode", "=", "self", ".", "current_episode", ")", "\n", "self", ".", "_task", ".", "measurements", ".", "reset_measures", "(", "\n", "episode", "=", "self", ".", "current_episode", ",", "\n", "task", "=", "self", ".", "task", ",", "\n", "observations", "=", "observations", ",", "\n", ")", "\n", "\n", "return", "observations", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env._update_step_stats": [[261, 271], ["env.Env._past_limit", "isinstance", "env.Env.episode_iterator.step_taken"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env._past_limit", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.EpisodeIterator.step_taken"], ["", "def", "_update_step_stats", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "_elapsed_steps", "+=", "1", "\n", "self", ".", "_episode_over", "=", "not", "self", ".", "_task", ".", "is_episode_active", "\n", "if", "self", ".", "_past_limit", "(", ")", ":", "\n", "            ", "self", ".", "_episode_over", "=", "True", "\n", "\n", "", "if", "self", ".", "episode_iterator", "is", "not", "None", "and", "isinstance", "(", "\n", "self", ".", "episode_iterator", ",", "EpisodeIterator", "\n", ")", ":", "\n", "            ", "self", ".", "episode_iterator", ".", "step_taken", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env.step": [[272, 313], ["isinstance", "env.Env.task.step", "env.Env._task.measurements.update_measures", "env.Env._update_step_stats"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.Measurements.update_measures", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env._update_step_stats"], ["", "", "def", "step", "(", "\n", "self", ",", "action", ":", "Union", "[", "int", ",", "str", ",", "Dict", "[", "str", ",", "Any", "]", "]", ",", "**", "kwargs", "\n", ")", "->", "Observations", ":", "\n", "        ", "r\"\"\"Perform an action in the environment and return observations.\n\n        :param action: action (belonging to :ref:`action_space`) to be\n            performed inside the environment. Action is a name or index of\n            allowed task's action and action arguments (belonging to action's\n            :ref:`action_space`) to support parametrized and continuous\n            actions.\n        :return: observations after taking action in environment.\n        \"\"\"", "\n", "\n", "assert", "(", "\n", "self", ".", "_episode_start_time", "is", "not", "None", "\n", ")", ",", "\"Cannot call step before calling reset\"", "\n", "assert", "(", "\n", "self", ".", "_episode_over", "is", "False", "\n", ")", ",", "\"Episode over, call reset before calling step\"", "\n", "assert", "(", "\n", "not", "self", ".", "_episode_force_changed", "\n", ")", ",", "\"Episode was changed either by setting current_episode or changing the episodes list. Call reset before stepping the environment again.\"", "\n", "\n", "# Support simpler interface as well", "\n", "if", "isinstance", "(", "action", ",", "(", "str", ",", "int", ",", "np", ".", "integer", ")", ")", ":", "\n", "            ", "action", "=", "{", "\"action\"", ":", "action", "}", "\n", "\n", "", "observations", "=", "self", ".", "task", ".", "step", "(", "\n", "action", "=", "action", ",", "episode", "=", "self", ".", "current_episode", "\n", ")", "\n", "\n", "self", ".", "_task", ".", "measurements", ".", "update_measures", "(", "\n", "episode", "=", "self", ".", "current_episode", ",", "\n", "action", "=", "action", ",", "\n", "task", "=", "self", ".", "task", ",", "\n", "observations", "=", "observations", ",", "\n", ")", "\n", "\n", "self", ".", "_update_step_stats", "(", ")", "\n", "\n", "return", "observations", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env._seed_numba": [[314, 319], ["random.seed", "numpy.random.seed"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.seed", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.seed"], ["", "@", "staticmethod", "\n", "@", "numba", ".", "njit", "\n", "def", "_seed_numba", "(", "seed", ":", "int", ")", ":", "\n", "        ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env.seed": [[320, 326], ["random.seed", "numpy.random.seed", "env.Env._seed_numba", "env.Env._sim.seed", "env.Env._task.seed"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.seed", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.seed", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env._seed_numba", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.seed", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.seed"], ["", "def", "seed", "(", "self", ",", "seed", ":", "int", ")", "->", "None", ":", "\n", "        ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "self", ".", "_seed_numba", "(", "seed", ")", "\n", "self", ".", "_sim", ".", "seed", "(", "seed", ")", "\n", "self", ".", "_task", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env.reconfigure": [[327, 337], ["env.Env._config.defrost", "env.Env._task.overwrite_sim_config", "env.Env._config.freeze", "env.Env._sim.reconfigure"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.embodied_task.EmbodiedTask.overwrite_sim_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env.reconfigure"], ["", "def", "reconfigure", "(", "self", ",", "config", ":", "Config", ")", "->", "None", ":", "\n", "        ", "self", ".", "_config", "=", "config", "\n", "\n", "self", ".", "_config", ".", "defrost", "(", ")", "\n", "self", ".", "_config", ".", "SIMULATOR", "=", "self", ".", "_task", ".", "overwrite_sim_config", "(", "\n", "self", ".", "_config", ".", "SIMULATOR", ",", "self", ".", "current_episode", "\n", ")", "\n", "self", ".", "_config", ".", "freeze", "(", ")", "\n", "\n", "self", ".", "_sim", ".", "reconfigure", "(", "self", ".", "_config", ".", "SIMULATOR", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env.render": [[338, 340], ["env.Env._sim.render"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.render"], ["", "def", "render", "(", "self", ",", "mode", "=", "\"rgb\"", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "return", "self", ".", "_sim", ".", "render", "(", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env.close": [[341, 343], ["env.Env._sim.close"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.close"], ["", "def", "close", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "_sim", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env.__enter__": [[344, 346], ["None"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env.__exit__": [[347, 349], ["env.Env.close"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.close"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_val", ",", "exc_tb", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.__init__": [[365, 379], ["env.Env", "env.RLEnv.get_reward_range"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.get_reward_range"], ["def", "__init__", "(", "\n", "self", ",", "config", ":", "Config", ",", "dataset", ":", "Optional", "[", "Dataset", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "\"\"\"Constructor\n\n        :param config: config to construct :ref:`Env`\n        :param dataset: dataset to construct :ref:`Env`.\n        \"\"\"", "\n", "self", ".", "_core_env_config", "=", "config", "\n", "self", ".", "_env", "=", "Env", "(", "config", ",", "dataset", ")", "\n", "self", ".", "observation_space", "=", "self", ".", "_env", ".", "observation_space", "\n", "self", ".", "action_space", "=", "self", ".", "_env", ".", "action_space", "\n", "self", ".", "number_of_episodes", "=", "self", ".", "_env", ".", "number_of_episodes", "\n", "self", ".", "reward_range", "=", "self", ".", "get_reward_range", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.config": [[380, 383], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "config", "(", "self", ")", "->", "Config", ":", "\n", "        ", "return", "self", ".", "_core_env_config", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.habitat_env": [[384, 387], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "habitat_env", "(", "self", ")", "->", "Env", ":", "\n", "        ", "return", "self", ".", "_env", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.episodes": [[392, 395], ["None"], "methods", ["None"], ["", "@", "episodes", ".", "setter", "\n", "def", "episodes", "(", "self", ",", "episodes", ":", "List", "[", "Episode", "]", ")", "->", "None", ":", "\n", "        ", "self", ".", "_env", ".", "episodes", "=", "episodes", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.current_episode": [[396, 399], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "current_episode", "(", "self", ")", "->", "Episode", ":", "\n", "        ", "return", "self", ".", "_env", ".", "current_episode", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.reset": [[400, 403], ["habitat.utils.profiling_wrapper.RangeContext", "env.RLEnv._env.reset"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset"], ["", "@", "profiling_wrapper", ".", "RangeContext", "(", "\"RLEnv.reset\"", ")", "\n", "def", "reset", "(", "self", ")", "->", "Observations", ":", "\n", "        ", "return", "self", ".", "_env", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.get_reward_range": [[404, 410], ["None"], "methods", ["None"], ["", "def", "get_reward_range", "(", "self", ")", ":", "\n", "        ", "r\"\"\"Get min, max range of reward.\n\n        :return: :py:`[min, max]` range of reward.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.get_reward": [[411, 420], ["None"], "methods", ["None"], ["", "def", "get_reward", "(", "self", ",", "observations", ":", "Observations", ")", "->", "Any", ":", "\n", "        ", "r\"\"\"Returns reward after action has been performed.\n\n        :param observations: observations from simulator and task.\n        :return: reward after performing the last action.\n\n        This method is called inside the :ref:`step()` method.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.get_done": [[421, 431], ["None"], "methods", ["None"], ["", "def", "get_done", "(", "self", ",", "observations", ":", "Observations", ")", "->", "bool", ":", "\n", "        ", "r\"\"\"Returns boolean indicating whether episode is done after performing\n        the last action.\n\n        :param observations: observations from simulator and task.\n        :return: done boolean after performing the last action.\n\n        This method is called inside the step method.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.get_info": [[432, 439], ["None"], "methods", ["None"], ["", "def", "get_info", "(", "self", ",", "observations", ")", "->", "Dict", "[", "Any", ",", "Any", "]", ":", "\n", "        ", "r\"\"\"..\n\n        :param observations: observations from simulator and task.\n        :return: info after performing the last action.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step": [[440, 453], ["habitat.utils.profiling_wrapper.RangeContext", "env.RLEnv._env.step", "env.RLEnv.get_reward", "env.RLEnv.get_done", "env.RLEnv.get_info"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.get_reward", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.get_done", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.get_info"], ["", "@", "profiling_wrapper", ".", "RangeContext", "(", "\"RLEnv.step\"", ")", "\n", "def", "step", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "->", "Tuple", "[", "Observations", ",", "Any", ",", "bool", ",", "dict", "]", ":", "\n", "        ", "r\"\"\"Perform an action in the environment.\n\n        :return: :py:`(observations, reward, done, info)`\n        \"\"\"", "\n", "\n", "observations", "=", "self", ".", "_env", ".", "step", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "reward", "=", "self", ".", "get_reward", "(", "observations", ")", "\n", "done", "=", "self", ".", "get_done", "(", "observations", ")", "\n", "info", "=", "self", ".", "get_info", "(", "observations", ")", "\n", "\n", "return", "observations", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.seed": [[454, 456], ["env.RLEnv._env.seed"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.seed"], ["", "def", "seed", "(", "self", ",", "seed", ":", "Optional", "[", "int", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "self", ".", "_env", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.render": [[457, 459], ["env.RLEnv._env.render"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.render"], ["", "def", "render", "(", "self", ",", "mode", ":", "str", "=", "\"rgb\"", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "return", "self", ".", "_env", ".", "render", "(", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.close": [[460, 462], ["env.RLEnv._env.close"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.close"], ["", "def", "close", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "_env", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.__enter__": [[463, 465], ["None"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.__exit__": [[466, 468], ["env.RLEnv.close"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.close"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_val", ",", "exc_tb", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_baselines.run.main": [[18, 41], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "run.run_exp", "vars"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_baselines.run.run_exp"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--run-type\"", ",", "\n", "choices", "=", "[", "\"train\"", ",", "\"eval\"", "]", ",", "\n", "required", "=", "True", ",", "\n", "help", "=", "\"run type of the experiment (train or eval)\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--exp-config\"", ",", "\n", "type", "=", "str", ",", "\n", "required", "=", "True", ",", "\n", "help", "=", "\"path to config yaml containing info about experiment\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"opts\"", ",", "\n", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", ",", "\n", "help", "=", "\"Modify config options from command line\"", ",", "\n", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "run_exp", "(", "**", "vars", "(", "args", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_baselines.run.execute_exp": [[43, 63], ["random.seed", "numpy.random.seed", "torch.manual_seed", "habitat_baselines.common.baseline_registry.baseline_registry.get_trainer", "baseline_registry.get_trainer.", "torch.cuda.is_available", "torch.set_num_threads", "trainer_init.train", "trainer_init.eval"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.seed", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.seed", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.baseline_registry.BaselineRegistry.get_trainer", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.train", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_trainer.BaseTrainer.eval"], ["", "def", "execute_exp", "(", "config", ":", "Config", ",", "run_type", ":", "str", ")", "->", "None", ":", "\n", "    ", "r\"\"\"This function runs the specified config with the specified runtype\n    Args:\n    config: Habitat.config\n    runtype: str {train or eval}\n    \"\"\"", "\n", "random", ".", "seed", "(", "config", ".", "TASK_CONFIG", ".", "SEED", ")", "\n", "np", ".", "random", ".", "seed", "(", "config", ".", "TASK_CONFIG", ".", "SEED", ")", "\n", "torch", ".", "manual_seed", "(", "config", ".", "TASK_CONFIG", ".", "SEED", ")", "\n", "if", "config", ".", "FORCE_TORCH_SINGLE_THREADED", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "torch", ".", "set_num_threads", "(", "1", ")", "\n", "\n", "", "trainer_init", "=", "baseline_registry", ".", "get_trainer", "(", "config", ".", "TRAINER_NAME", ")", "\n", "assert", "trainer_init", "is", "not", "None", ",", "f\"{config.TRAINER_NAME} is not supported\"", "\n", "trainer", "=", "trainer_init", "(", "config", ")", "\n", "\n", "if", "run_type", "==", "\"train\"", ":", "\n", "        ", "trainer", ".", "train", "(", ")", "\n", "", "elif", "run_type", "==", "\"eval\"", ":", "\n", "        ", "trainer", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_baselines.run.run_exp": [[65, 78], ["habitat_baselines.config.default.get_config", "run.execute_exp"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_baselines.run.execute_exp"], ["", "", "def", "run_exp", "(", "exp_config", ":", "str", ",", "run_type", ":", "str", ",", "opts", "=", "None", ")", "->", "None", ":", "\n", "    ", "r\"\"\"Runs experiment given mode and config\n\n    Args:\n        exp_config: path to config file.\n        run_type: \"train\" or \"eval.\n        opts: list of strings of additional config options.\n\n    Returns:\n        None.\n    \"\"\"", "\n", "config", "=", "get_config", "(", "exp_config", ",", "opts", ")", "\n", "execute_exp", "(", "config", ",", "run_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.grasp_generator.GraspGenerator.__init__": [[20, 47], ["grasp_generator.GraspGenerator._ik.get_joint_limits"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.IkHelper.get_joint_limits"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "use_sim", ":", "MpSim", ",", "\n", "mp_space", ":", "MpSpace", ",", "\n", "ik", ":", "IkHelper", ",", "\n", "mp", ",", "\n", "should_render", ":", "bool", ",", "\n", "grasp_thresh", ":", "float", ",", "\n", "n_gen_grasps", ":", "int", ",", "\n", "knows_other_objs", ":", "bool", ",", "\n", "log_dir", ":", "str", ",", "\n", "is_verbose", ":", "bool", ",", "\n", ")", ":", "\n", "        ", "self", ".", "_mp_sim", "=", "use_sim", "\n", "self", ".", "_ik", "=", "ik", "\n", "self", ".", "_mp_space", "=", "mp_space", "\n", "(", "\n", "self", ".", "_lower_joint_lims", ",", "\n", "self", ".", "_upper_joint_lims", ",", "\n", ")", "=", "self", ".", "_ik", ".", "get_joint_limits", "(", ")", "\n", "self", ".", "mp", "=", "mp", "\n", "self", ".", "_should_render", "=", "should_render", "\n", "self", ".", "_grasp_thresh", "=", "grasp_thresh", "\n", "self", ".", "_n_gen_grasps", "=", "n_gen_grasps", "\n", "self", ".", "knows_other_objs", "=", "knows_other_objs", "\n", "self", ".", "_log_dir", "=", "log_dir", "\n", "self", ".", "_is_verbose", "=", "is_verbose", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.grasp_generator.GraspGenerator.get_def_js": [[48, 51], ["numpy.array"], "methods", ["None"], ["", "def", "get_def_js", "(", "self", ")", ":", "\n", "# A reference state which we should generally stay close to.", "\n", "        ", "return", "np", ".", "array", "(", "[", "-", "0.45", ",", "-", "1.08", ",", "0.1", ",", "0.935", ",", "-", "0.001", ",", "1.573", ",", "0.005", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.grasp_generator.GraspGenerator.get_targ_obj": [[52, 54], ["None"], "methods", ["None"], ["", "def", "get_targ_obj", "(", "self", ",", "start_js", ",", "obj_id", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.grasp_generator.GraspGenerator._gen_goal_state": [[55, 94], ["grasp_generator.GraspGenerator._mp_sim.capture_state", "grasp_generator.GraspGenerator._mp_space.set_env_state", "grasp_generator.GraspGenerator._mp_sim.get_arm_pos", "grasp_generator.GraspGenerator._mp_space.get_state_lims", "range", "grasp_generator.GraspGenerator._mp_sim.set_arm_pos", "grasp_generator.GraspGenerator._mp_sim.set_state", "grasp_generator.GraspGenerator._ik.set_arm_state", "grasp_generator.GraspGenerator._ik.calc_ik", "grasp_generator.GraspGenerator._mp_sim.set_arm_pos", "grasp_generator.GraspGenerator._mp_sim.micro_step", "all", "numpy.array", "numpy.random.uniform", "numpy.zeros", "numpy.array", "grasp_generator.GraspGenerator._is_state_valid_fn", "range"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.capture_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.MpSpace.set_env_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.get_arm_pos", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.JsMpSpace.get_state_lims", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.set_arm_pos", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.set_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.IkHelper.set_arm_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.IkHelper.calc_ik", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.set_arm_pos", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.micro_step"], ["", "def", "_gen_goal_state", "(", "self", ",", "local_ee_targ", ",", "grasp_idx", "=", "0", ",", "timeout", "=", "100", ")", ":", "\n", "        ", "\"\"\"\n        - local_ee_targ: 3D desired EE position in robot's base coordinate frame.\n        - grasp_idx: The grasp index attempt. Used for debugging.\n        Returns: (target_js, is_feasible) target_js has joint position to\n        achieve EE target. is_feasible is if a collision joints was found.\n        \"\"\"", "\n", "\n", "start_state", "=", "self", ".", "_mp_sim", ".", "capture_state", "(", ")", "\n", "\n", "self", ".", "_mp_space", ".", "set_env_state", "(", "start_state", ")", "\n", "\n", "start_arm_js", "=", "self", ".", "_mp_sim", ".", "get_arm_pos", "(", ")", "\n", "state_lims", "=", "self", ".", "_mp_space", ".", "get_state_lims", "(", "True", ")", "\n", "lower_lims", "=", "state_lims", "[", ":", ",", "0", "]", "\n", "upper_lims", "=", "state_lims", "[", ":", ",", "1", "]", "\n", "found_sol", "=", "None", "\n", "for", "iter_i", "in", "range", "(", "timeout", ")", ":", "\n", "            ", "if", "iter_i", "==", "0", ":", "\n", "# Check if the starting state can already achieve the goal.", "\n", "                ", "cur_js", "=", "np", ".", "array", "(", "start_arm_js", ")", "\n", "", "else", ":", "\n", "                ", "cur_js", "=", "np", ".", "random", ".", "uniform", "(", "lower_lims", ",", "upper_lims", ")", "\n", "\n", "", "self", ".", "_ik", ".", "set_arm_state", "(", "cur_js", ",", "np", ".", "zeros", "(", "cur_js", ".", "shape", ")", ")", "\n", "desired_js", "=", "self", ".", "_ik", ".", "calc_ik", "(", "local_ee_targ", ")", "\n", "self", ".", "_mp_sim", ".", "set_arm_pos", "(", "desired_js", ")", "\n", "self", ".", "_mp_sim", ".", "micro_step", "(", ")", "\n", "\n", "state_valid", "=", "all", "(", "\n", "[", "self", ".", "_is_state_valid_fn", "(", "desired_js", ")", "for", "_", "in", "range", "(", "5", ")", "]", "\n", ")", "\n", "if", "state_valid", ":", "\n", "                ", "found_sol", "=", "np", ".", "array", "(", "desired_js", ")", "\n", "break", "\n", "\n", "", "", "self", ".", "_mp_sim", ".", "set_arm_pos", "(", "start_arm_js", ")", "\n", "self", ".", "_mp_sim", ".", "set_state", "(", "start_state", ")", "\n", "return", "found_sol", ",", "found_sol", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.grasp_generator.GraspGenerator._fk": [[95, 98], ["grasp_generator.GraspGenerator._mp_sim.set_arm_pos", "grasp_generator.GraspGenerator._mp_sim.micro_step"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.set_arm_pos", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.micro_step"], ["", "def", "_fk", "(", "self", ",", "joints", ")", ":", "\n", "        ", "self", ".", "_mp_sim", ".", "set_arm_pos", "(", "joints", ")", "\n", "self", ".", "_mp_sim", ".", "micro_step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.grasp_generator.GraspGenerator.gen_target_from_ee_pos": [[99, 126], ["grasp_generator.GraspGenerator._mp_sim.get_robot_transform().inverted", "grasp_generator.GraspGenerator.transform_point", "grasp_generator.GraspGenerator.mp.setup_ee_margin", "range", "habitat_baselines.motion_planning.robot_target.RobotTarget", "grasp_generator.GraspGenerator.mp.remove_ee_margin", "grasp_generator.GraspGenerator._gen_goal_state", "grasp_generator.GraspGenerator._get_real_ee_pos", "numpy.linalg.norm", "grasp_generator.GraspGenerator._mp_sim.get_robot_transform"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.motion_plan.MotionPlanner.setup_ee_margin", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.motion_plan.MotionPlanner.remove_ee_margin", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.grasp_generator.GraspGenerator._gen_goal_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.grasp_generator.GraspGenerator._get_real_ee_pos", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.get_robot_transform"], ["", "def", "gen_target_from_ee_pos", "(", "self", ",", "ee_pos", ")", ":", "\n", "        ", "inv_robo_T", "=", "self", ".", "_mp_sim", ".", "get_robot_transform", "(", ")", ".", "inverted", "(", ")", "\n", "local_ee_pos", "=", "inv_robo_T", ".", "transform_point", "(", "ee_pos", ")", "\n", "\n", "self", ".", "mp", ".", "setup_ee_margin", "(", "None", ")", "\n", "self", ".", "_is_state_valid_fn", "=", "self", ".", "mp", ".", "_is_state_valid", "\n", "\n", "use_js", "=", "None", "\n", "real_ee_pos", "=", "None", "\n", "for", "_", "in", "range", "(", "20", ")", ":", "\n", "            ", "joints", ",", "is_feasible", "=", "self", ".", "_gen_goal_state", "(", "local_ee_pos", ")", "\n", "if", "not", "is_feasible", ":", "\n", "                ", "continue", "\n", "", "real_ee_pos", "=", "self", ".", "_get_real_ee_pos", "(", "joints", ")", "\n", "ee_dist", "=", "np", ".", "linalg", ".", "norm", "(", "real_ee_pos", "-", "ee_pos", ")", "\n", "if", "ee_dist", "<", "self", ".", "_grasp_thresh", ":", "\n", "                ", "use_js", "=", "joints", "\n", "break", "\n", "\n", "", "", "targ", "=", "RobotTarget", "(", "\n", "joints_target", "=", "use_js", ",", "\n", "is_guess", "=", "use_js", "is", "None", ",", "\n", "ee_target_pos", "=", "real_ee_pos", ",", "\n", ")", "\n", "\n", "self", ".", "mp", ".", "remove_ee_margin", "(", "None", ")", "\n", "return", "targ", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.grasp_generator.GraspGenerator._verbose_log": [[127, 130], ["print"], "methods", ["None"], ["", "def", "_verbose_log", "(", "self", ",", "s", ")", ":", "\n", "        ", "if", "self", ".", "_is_verbose", ":", "\n", "            ", "print", "(", "f\"GraspPlanner: {s}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.grasp_generator.GraspGenerator.get_obj_goal_offset": [[131, 135], ["grasp_generator.GraspGenerator._mp_sim.get_obj_info", "numpy.array", "grasp_generator.GraspGenerator.bb.size_y"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.get_obj_info"], ["", "", "def", "get_obj_goal_offset", "(", "self", ",", "obj_idx", ")", ":", "\n", "        ", "obj_dat", "=", "self", ".", "_mp_sim", ".", "get_obj_info", "(", "obj_idx", ")", "\n", "size_y", "=", "obj_dat", ".", "bb", ".", "size_y", "(", ")", "/", "2.0", "\n", "return", "np", ".", "array", "(", "[", "0.0", ",", "size_y", ",", "0.0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.grasp_generator.GraspGenerator._bounding_sphere_sample": [[136, 228], ["numpy.array", "grasp_generator.GraspGenerator._mp_sim.get_robot_transform().inverted", "grasp_generator.GraspGenerator.mp.setup_ee_margin", "sim.get_scene_pos", "range", "grasp_generator.GraspGenerator._clean_grasp_debug_points", "grasp_generator.GraspGenerator.mp.remove_ee_margin", "habitat_baselines.motion_planning.robot_target.RobotTarget", "grasp_generator.GraspGenerator._verbose_log", "numpy.random.uniform", "numpy.random.randn", "numpy.abs", "grasp_generator.GraspGenerator.transform_point", "numpy.array", "grasp_generator.GraspGenerator._grasp_debug_points", "grasp_generator.GraspGenerator._gen_goal_state", "grasp_generator.GraspGenerator._get_real_ee_pos", "numpy.linalg.norm", "grasp_generator.GraspGenerator._verbose_log", "grasp_generator.GraspGenerator._mp_sim.get_robot_transform", "numpy.argmin", "grasp_generator.GraspGenerator._verbose_log", "grasp_generator.GraspGenerator._verbose_log", "numpy.argmin", "sim.visualize_position", "PIL.Image.fromarray().save", "numpy.linalg.norm", "numpy.linalg.norm", "grasp_generator.GraspGenerator._verbose_log", "numpy.linalg.norm", "grasp_generator.GraspGenerator._verbose_log", "PIL.Image.fromarray", "grasp_generator.GraspGenerator._mp_sim.render"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.motion_plan.MotionPlanner.setup_ee_margin", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.get_scene_pos", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.grasp_generator.GraspGenerator._clean_grasp_debug_points", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.motion_plan.MotionPlanner.remove_ee_margin", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.grasp_generator.GraspGenerator._verbose_log", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.grasp_generator.GraspGenerator._grasp_debug_points", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.grasp_generator.GraspGenerator._gen_goal_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.grasp_generator.GraspGenerator._get_real_ee_pos", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.grasp_generator.GraspGenerator._verbose_log", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.get_robot_transform", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.grasp_generator.GraspGenerator._verbose_log", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.grasp_generator.GraspGenerator._verbose_log", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.visualize_position", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.save", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.grasp_generator.GraspGenerator._verbose_log", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.grasp_generator.GraspGenerator._verbose_log", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.render"], ["", "def", "_bounding_sphere_sample", "(", "\n", "self", ",", "obj_idx", ":", "int", ",", "obj_dat", ":", "ObjectGraspTarget", "\n", ")", "->", "RobotTarget", ":", "\n", "        ", "obj_pos", "=", "np", ".", "array", "(", "obj_dat", ".", "transformation", ".", "translation", ")", "\n", "\n", "inv_robo_T", "=", "self", ".", "_mp_sim", ".", "get_robot_transform", "(", ")", ".", "inverted", "(", ")", "\n", "\n", "# Setup extra collision checkers", "\n", "self", ".", "mp", ".", "setup_ee_margin", "(", "obj_idx", ")", "\n", "self", ".", "_is_state_valid_fn", "=", "self", ".", "mp", ".", "_is_state_valid", "\n", "\n", "# Get the candidate grasp points in global space.", "\n", "min_radius", "=", "self", ".", "_grasp_thresh", "*", "0.5", "\n", "\n", "sim", "=", "self", ".", "_mp_sim", ".", "_sim", "\n", "scene_obj_ids", "=", "sim", ".", "scene_obj_ids", "\n", "scene_obj_pos", "=", "sim", ".", "get_scene_pos", "(", ")", "\n", "\n", "found_goal_js", "=", "None", "\n", "real_ee_pos", "=", "None", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "_n_gen_grasps", ")", ":", "\n", "            ", "self", ".", "_verbose_log", "(", "f\"Trying for {i}\"", ")", "\n", "\n", "# Generate a grasp 3D point", "\n", "radius", "=", "np", ".", "random", ".", "uniform", "(", "min_radius", ",", "self", ".", "_grasp_thresh", ")", "\n", "point", "=", "np", ".", "random", ".", "randn", "(", "3", ")", "\n", "point", "[", "1", "]", "=", "np", ".", "abs", "(", "point", "[", "1", "]", ")", "\n", "point", "=", "radius", "*", "(", "point", "/", "np", ".", "linalg", ".", "norm", "(", "point", ")", ")", "\n", "point", "+=", "obj_pos", "\n", "\n", "if", "self", ".", "knows_other_objs", ":", "\n", "                ", "closest_idx", "=", "np", ".", "argmin", "(", "\n", "np", ".", "linalg", ".", "norm", "(", "scene_obj_pos", "-", "point", ",", "axis", "=", "-", "1", ")", "\n", ")", "\n", "if", "scene_obj_ids", "[", "closest_idx", "]", "!=", "obj_idx", ":", "\n", "                    ", "self", ".", "_verbose_log", "(", "\n", "\"Grasp point didn't match desired object\"", "\n", ")", "\n", "continue", "\n", "\n", "", "", "local_point", "=", "inv_robo_T", ".", "transform_point", "(", "point", ")", "\n", "local_point", "=", "np", ".", "array", "(", "local_point", ")", "\n", "\n", "self", ".", "_grasp_debug_points", "(", "obj_pos", ",", "point", ")", "\n", "\n", "goal_js", ",", "is_feasible", "=", "self", ".", "_gen_goal_state", "(", "local_point", ",", "i", ")", "\n", "if", "not", "is_feasible", ":", "\n", "                ", "self", ".", "_verbose_log", "(", "\"Could not find joints for grasp point\"", ")", "\n", "continue", "\n", "\n", "# Check the final end-effector position is indeed within", "\n", "# grasping position of the object.", "\n", "", "real_ee_pos", "=", "self", ".", "_get_real_ee_pos", "(", "goal_js", ")", "\n", "\n", "ee_dist", "=", "np", ".", "linalg", ".", "norm", "(", "real_ee_pos", "-", "obj_pos", ")", "\n", "if", "ee_dist", ">=", "self", ".", "_grasp_thresh", ":", "\n", "                ", "found_goal_js", "=", "goal_js", "\n", "self", ".", "_verbose_log", "(", "\n", "f\"Actual EE wasn't in grasp range. {ee_dist} away\"", "\n", ")", "\n", "continue", "\n", "\n", "", "if", "self", ".", "knows_other_objs", ":", "\n", "# Does the actual end-effector position grasp the object we want?", "\n", "                ", "closest_idx", "=", "np", ".", "argmin", "(", "\n", "np", ".", "linalg", ".", "norm", "(", "scene_obj_pos", "-", "real_ee_pos", ",", "axis", "=", "-", "1", ")", "\n", ")", "\n", "if", "scene_obj_ids", "[", "closest_idx", "]", "!=", "obj_idx", ":", "\n", "                    ", "self", ".", "_verbose_log", "(", "\"Actual EE did not match desired object\"", ")", "\n", "continue", "\n", "\n", "", "", "if", "self", ".", "_should_render", ":", "\n", "                ", "sim", ".", "viz_ids", "[", "\"ee\"", "]", "=", "sim", ".", "visualize_position", "(", "\n", "real_ee_pos", ",", "sim", ".", "viz_ids", "[", "\"ee\"", "]", ",", "r", "=", "5.0", "\n", ")", "\n", "Image", ".", "fromarray", "(", "self", ".", "_mp_sim", ".", "render", "(", ")", ")", ".", "save", "(", "\n", "f\"{self._log_dir}/grasp_plan_{i}_{ee_dist}.jpeg\"", "\n", ")", "\n", "\n", "", "self", ".", "_verbose_log", "(", "f\"Found solution at {i}, breaking\"", ")", "\n", "found_goal_js", "=", "goal_js", "\n", "break", "\n", "\n", "", "self", ".", "_clean_grasp_debug_points", "(", ")", "\n", "self", ".", "mp", ".", "remove_ee_margin", "(", "obj_idx", ")", "\n", "\n", "return", "RobotTarget", "(", "\n", "joints_target", "=", "found_goal_js", ",", "\n", "obj_id_target", "=", "obj_idx", ",", "\n", "is_guess", "=", "found_goal_js", "is", "None", ",", "\n", "ee_target_pos", "=", "real_ee_pos", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.grasp_generator.GraspGenerator._get_real_ee_pos": [[230, 241], ["grasp_generator.GraspGenerator._mp_sim.capture_state", "grasp_generator.GraspGenerator._mp_sim.get_arm_pos", "grasp_generator.GraspGenerator._mp_sim.set_arm_pos", "grasp_generator.GraspGenerator._mp_sim.micro_step", "grasp_generator.GraspGenerator._mp_sim.get_ee_pos", "grasp_generator.GraspGenerator._mp_sim.set_arm_pos", "grasp_generator.GraspGenerator._mp_sim.set_state"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.capture_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.get_arm_pos", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.set_arm_pos", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.micro_step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.get_ee_pos", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.set_arm_pos", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.set_state"], ["", "def", "_get_real_ee_pos", "(", "self", ",", "joints", ")", ":", "\n", "        ", "if", "joints", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "start_state", "=", "self", ".", "_mp_sim", ".", "capture_state", "(", ")", "\n", "start_js", "=", "self", ".", "_mp_sim", ".", "get_arm_pos", "(", ")", "\n", "self", ".", "_mp_sim", ".", "set_arm_pos", "(", "joints", ")", "\n", "self", ".", "_mp_sim", ".", "micro_step", "(", ")", "\n", "real_ee_pos", "=", "self", ".", "_mp_sim", ".", "get_ee_pos", "(", ")", "\n", "self", ".", "_mp_sim", ".", "set_arm_pos", "(", "start_js", ")", "\n", "self", ".", "_mp_sim", ".", "set_state", "(", "start_state", ")", "\n", "return", "real_ee_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.grasp_generator.GraspGenerator._clean_grasp_debug_points": [[242, 256], ["sim.get_rigid_object_manager", "sim.get_rigid_object_manager.remove_object_by_id", "sim.get_rigid_object_manager.remove_object_by_id", "sim.get_rigid_object_manager.remove_object_by_id"], "methods", ["None"], ["", "def", "_clean_grasp_debug_points", "(", "self", ")", ":", "\n", "        ", "sim", "=", "self", ".", "_mp_sim", ".", "_sim", "\n", "rom", "=", "sim", ".", "get_rigid_object_manager", "(", ")", "\n", "if", "self", ".", "_should_render", ":", "\n", "# Cleanup any debug render objects.", "\n", "            ", "if", "sim", ".", "viz_ids", "[", "\"ee\"", "]", "is", "not", "None", ":", "\n", "                ", "rom", ".", "remove_object_by_id", "(", "sim", ".", "viz_ids", "[", "\"ee\"", "]", ")", "\n", "", "if", "sim", ".", "viz_ids", "[", "\"obj\"", "]", "is", "not", "None", ":", "\n", "                ", "rom", ".", "remove_object_by_id", "(", "sim", ".", "viz_ids", "[", "\"obj\"", "]", ")", "\n", "rom", ".", "remove_object_by_id", "(", "sim", ".", "viz_ids", "[", "\"grasp\"", "]", ")", "\n", "\n", "", "sim", ".", "viz_ids", "[", "\"obj\"", "]", "=", "None", "\n", "sim", ".", "viz_ids", "[", "\"grasp\"", "]", "=", "None", "\n", "sim", ".", "viz_ids", "[", "\"ee\"", "]", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.grasp_generator.GraspGenerator._grasp_debug_points": [[257, 266], ["sim.visualize_position", "sim.visualize_position"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.visualize_position", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.visualize_position"], ["", "", "def", "_grasp_debug_points", "(", "self", ",", "obj_pos", ",", "grasp_point", ")", ":", "\n", "        ", "sim", "=", "self", ".", "_mp_sim", ".", "_sim", "\n", "if", "self", ".", "_should_render", ":", "\n", "            ", "sim", ".", "viz_ids", "[", "\"obj\"", "]", "=", "sim", ".", "visualize_position", "(", "\n", "obj_pos", ",", "sim", ".", "viz_ids", "[", "\"obj\"", "]", ",", "r", "=", "5.0", "\n", ")", "\n", "\n", "sim", ".", "viz_ids", "[", "\"grasp\"", "]", "=", "sim", ".", "visualize_position", "(", "\n", "grasp_point", ",", "sim", ".", "viz_ids", "[", "\"grasp\"", "]", ",", "r", "=", "5.0", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.grasp_generator.GraspGenerator.gen_target_from_obj_idx": [[268, 271], ["grasp_generator.GraspGenerator._mp_sim.get_obj_info", "grasp_generator.GraspGenerator._bounding_sphere_sample"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.get_obj_info", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.grasp_generator.GraspGenerator._bounding_sphere_sample"], ["", "", "def", "gen_target_from_obj_idx", "(", "self", ",", "obj_idx", ")", ":", "\n", "        ", "obj_dat", "=", "self", ".", "_mp_sim", ".", "get_obj_info", "(", "obj_idx", ")", "\n", "return", "self", ".", "_bounding_sphere_sample", "(", "obj_idx", ",", "obj_dat", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.MpSpace.__init__": [[32, 35], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "use_sim", ":", "RearrangeSim", ",", "ik", ":", "IkHelper", ")", ":", "\n", "        ", "self", ".", "_mp_sim", "=", "use_sim", "\n", "self", ".", "_ik", "=", "ik", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.MpSpace.convert_state": [[36, 39], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "convert_state", "(", "self", ",", "x", ":", "Iterable", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.MpSpace.set_arm": [[40, 43], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "set_arm", "(", "self", ",", "x", ":", "Union", "[", "List", "[", "float", "]", ",", "np", ".", "ndarray", "]", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.MpSpace.set_env_state": [[44, 46], ["None"], "methods", ["None"], ["", "def", "set_env_state", "(", "self", ",", "env_state", ":", "Dict", "[", "str", ",", "Any", "]", ")", ":", "\n", "        ", "self", ".", "env_state", "=", "env_state", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.MpSpace.get_range": [[47, 52], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_range", "(", "self", ")", "->", "float", ":", "\n", "        ", "\"\"\"\n        Gets the planner step size range.\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.MpSpace.get_state_lims": [[53, 58], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_state_lims", "(", "self", ",", "restrictive", ":", "bool", "=", "False", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Get the state limits of the planning problem.\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.MpSpace.get_state_dim": [[59, 64], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_state_dim", "(", "self", ")", "->", "int", ":", "\n", "        ", "\"\"\"\n        Get the dimensionality of the planning problem\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.MpSpace.get_start_goal": [[65, 71], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_start_goal", "(", "self", ")", "->", "Tuple", "[", "np", ".", "ndarray", ",", "np", ".", "ndarray", "]", ":", "\n", "        ", "\"\"\"\n        Gets the used start and goal states for the planner. This is after\n        clipping and any additional pre-processing.\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.MpSpace.convert_sol": [[72, 77], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "convert_sol", "(", "self", ",", "path", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Convert a solution from OMPL format to numpy array\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.MpSpace.get_planner": [[78, 81], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_planner", "(", "self", ",", "si", ":", "\"ob.SpaceInformation\"", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.MpSpace.set_problem": [[82, 94], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "set_problem", "(", "\n", "self", ",", "\n", "pdef", ":", "\"ob.ProblemDefinition\"", ",", "\n", "space", ":", "\"ob.StateSpace\"", ",", "\n", "si", ":", "\"ob.SpaceInformation\"", ",", "\n", "start_state", ":", "\"ob.State\"", ",", "\n", "targ_state", ":", "RobotTarget", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Sets up the planning problem\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.MpSpace.render_start_targ": [[95, 105], ["None"], "methods", ["None"], ["", "def", "render_start_targ", "(", "\n", "self", ",", "\n", "render_dir", ":", "str", ",", "\n", "subdir", ":", "str", ",", "\n", "targ_state", ":", "np", ".", "ndarray", ",", "\n", "suffix", ":", "str", "=", "\"targ\"", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Renders the start and target to images for visualization\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.JsMpSpace.__init__": [[114, 124], ["mp_spaces.MpSpace.__init__", "mp_spaces.JsMpSpace.get_state_lims"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.JsMpSpace.get_state_lims"], ["    ", "def", "__init__", "(", "self", ",", "use_sim", ",", "ik", ",", "start_num_calls", ",", "should_render", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "use_sim", ",", "ik", ")", "\n", "# self._lower_joint_lims, self._upper_joint_lims = self._ik.get_joint_limits()", "\n", "joint_lims", "=", "self", ".", "get_state_lims", "(", "True", ")", "\n", "self", ".", "_lower_joint_lims", ",", "self", ".", "_upper_joint_lims", "=", "(", "\n", "joint_lims", "[", ":", ",", "0", "]", ",", "\n", "joint_lims", "[", ":", ",", "1", "]", ",", "\n", ")", "\n", "self", ".", "num_calls", "=", "start_num_calls", "\n", "self", ".", "_should_render", "=", "should_render", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.JsMpSpace.convert_state": [[125, 127], ["numpy.array", "range"], "methods", ["None"], ["", "def", "convert_state", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "x", "[", "i", "]", "for", "i", "in", "range", "(", "7", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.JsMpSpace._norm_joint_angle": [[128, 130], ["numpy.arctan2", "numpy.sin", "numpy.cos"], "methods", ["None"], ["", "def", "_norm_joint_angle", "(", "self", ",", "angles", ")", ":", "\n", "        ", "return", "np", ".", "arctan2", "(", "np", ".", "sin", "(", "angles", ")", ",", "np", ".", "cos", "(", "angles", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.JsMpSpace.get_planner": [[131, 133], ["og.RRTConnect"], "methods", ["None"], ["", "def", "get_planner", "(", "self", ",", "si", ")", ":", "\n", "        ", "return", "og", ".", "RRTConnect", "(", "si", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.JsMpSpace.get_state_lims": [[134, 152], ["mp_spaces.JsMpSpace._ik.get_joint_limits", "mp_spaces.JsMpSpace._norm_joint_angle", "mp_spaces.JsMpSpace._norm_joint_angle", "numpy.stack", "numpy.stack", "numpy.isclose", "numpy.isclose"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.IkHelper.get_joint_limits", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.JsMpSpace._norm_joint_angle", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.JsMpSpace._norm_joint_angle"], ["", "def", "get_state_lims", "(", "self", ",", "restrictive", "=", "False", ")", ":", "\n", "        ", "\"\"\"Get the state limits of the planning problem. If restrictive is true then\n        this returns the joint limts based on the PyBullet joint limits\n        \"\"\"", "\n", "if", "restrictive", ":", "\n", "            ", "lower_joint_lims", ",", "upper_joint_lims", "=", "self", ".", "_ik", ".", "get_joint_limits", "(", ")", "\n", "lower_joint_lims", "=", "[", "\n", "-", "np", ".", "pi", "if", "np", ".", "isclose", "(", "a", ",", "0.0", ")", "else", "a", "for", "a", "in", "lower_joint_lims", "\n", "]", "\n", "upper_joint_lims", "=", "[", "\n", "np", ".", "pi", "if", "np", ".", "isclose", "(", "a", ",", "2", "*", "np", ".", "pi", ")", "else", "a", "\n", "for", "a", "in", "upper_joint_lims", "\n", "]", "\n", "lower_joint_lims", "=", "self", ".", "_norm_joint_angle", "(", "lower_joint_lims", ")", "\n", "upper_joint_lims", "=", "self", ".", "_norm_joint_angle", "(", "upper_joint_lims", ")", "\n", "return", "np", ".", "stack", "(", "[", "lower_joint_lims", ",", "upper_joint_lims", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "return", "np", ".", "stack", "(", "[", "[", "-", "2", "*", "np", ".", "pi", "]", "*", "7", ",", "[", "2", "*", "np", ".", "pi", "]", "*", "7", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.JsMpSpace.get_state_dim": [[153, 155], ["len"], "methods", ["None"], ["", "", "def", "get_state_dim", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_mp_sim", ".", "_sim", ".", "robot", ".", "arm_joint_pos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.JsMpSpace._fk": [[156, 160], ["mp_spaces.JsMpSpace._mp_sim.set_arm_pos", "mp_spaces.JsMpSpace._mp_sim.micro_step"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.set_arm_pos", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.micro_step"], ["", "def", "_fk", "(", "self", ",", "joints", ")", ":", "\n", "        ", "\"\"\"Sets the joint state and applys the change\"\"\"", "\n", "self", ".", "_mp_sim", ".", "set_arm_pos", "(", "joints", ")", "\n", "self", ".", "_mp_sim", ".", "micro_step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.JsMpSpace.get_start_goal": [[161, 163], ["None"], "methods", ["None"], ["", "def", "get_start_goal", "(", "self", ")", "->", "Tuple", "[", "np", ".", "ndarray", ",", "np", ".", "ndarray", "]", ":", "\n", "        ", "return", "(", "self", ".", "used_js_start", ",", "self", ".", "used_js_goal", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.JsMpSpace.set_problem": [[164, 215], ["mp_spaces.JsMpSpace._norm_joint_angle", "mp_spaces.JsMpSpace._norm_joint_angle", "numpy.full", "numpy.clip", "numpy.clip", "mp_spaces.to_ob_state", "mp_spaces.to_ob_state", "pdef.setStartAndGoalStates", "pdef.setOptimizationObjective", "mp_spaces.JsMpSpace.get_state_dim", "mp_spaces.JsMpSpace.get_state_dim", "mp_spaces.JsMpSpace.convert_state", "mp_spaces.JsMpSpace._fk", "mp_spaces.JsMpSpace._mp_sim.get_ee_pos", "numpy.linalg.norm", "ob.PathLengthOptimizationObjective", "ob.PathLengthOptimizationObjective.setCostToGoHeuristic", "mp_spaces.JsMpSpace.set_problem.getPathLengthObjWithCostToGo"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.JsMpSpace._norm_joint_angle", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.JsMpSpace._norm_joint_angle", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.to_ob_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.to_ob_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.JsMpSpace.get_state_dim", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.JsMpSpace.get_state_dim", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.JsMpSpace.convert_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.JsMpSpace._fk", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.get_ee_pos", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.getPathLengthObjWithCostToGo"], ["", "def", "set_problem", "(", "\n", "self", ",", "\n", "pdef", ",", "\n", "space", ",", "\n", "si", ",", "\n", "js_start", ",", "\n", "robot_targ", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Sets up the OMPL problem\n        \"\"\"", "\n", "js_end", "=", "robot_targ", ".", "joints_target", "\n", "\n", "joint_shape", "=", "self", ".", "_lower_joint_lims", ".", "shape", "\n", "\n", "js_start", "=", "self", ".", "_norm_joint_angle", "(", "js_start", ")", "\n", "js_end", "=", "self", ".", "_norm_joint_angle", "(", "js_end", ")", "\n", "\n", "# In case you want some padding to the limits for extra safety", "\n", "eps", "=", "np", ".", "full", "(", "joint_shape", ",", "0.000", ")", "\n", "js_start", "=", "np", ".", "clip", "(", "\n", "js_start", ",", "\n", "self", ".", "_lower_joint_lims", "+", "eps", ",", "\n", "self", ".", "_upper_joint_lims", "-", "eps", ",", "\n", ")", "\n", "js_end", "=", "np", ".", "clip", "(", "\n", "js_end", ",", "self", ".", "_lower_joint_lims", "+", "eps", ",", "self", ".", "_upper_joint_lims", "-", "eps", "\n", ")", "\n", "\n", "self", ".", "used_js_start", "=", "js_start", "\n", "self", ".", "used_js_goal", "=", "js_end", "\n", "self", ".", "num_calls", "+=", "1", "\n", "\n", "js_start", "=", "to_ob_state", "(", "js_start", ",", "space", ",", "self", ".", "get_state_dim", "(", ")", ")", "\n", "js_end", "=", "to_ob_state", "(", "js_end", ",", "space", ",", "self", ".", "get_state_dim", "(", ")", ")", "\n", "\n", "def", "admiss_heuristic", "(", "cur_state", ",", "goal", ")", ":", "\n", "            ", "use_cur_state", "=", "self", ".", "convert_state", "(", "cur_state", ")", "\n", "# FK to get both in EE space.", "\n", "self", ".", "_fk", "(", "use_cur_state", ")", "\n", "cur_ee_state", "=", "self", ".", "_mp_sim", ".", "get_ee_pos", "(", ")", "\n", "ret", "=", "np", ".", "linalg", ".", "norm", "(", "robot_targ", ".", "ee_target_pos", "-", "cur_ee_state", ")", "\n", "return", "ret", "\n", "\n", "", "def", "getPathLengthObjWithCostToGo", "(", "si", ")", ":", "\n", "            ", "obj", "=", "ob", ".", "PathLengthOptimizationObjective", "(", "si", ")", "\n", "obj", ".", "setCostToGoHeuristic", "(", "ob", ".", "CostToGoHeuristic", "(", "admiss_heuristic", ")", ")", "\n", "return", "obj", "\n", "\n", "", "pdef", ".", "setStartAndGoalStates", "(", "js_start", ",", "js_end", ")", "\n", "pdef", ".", "setOptimizationObjective", "(", "getPathLengthObjWithCostToGo", "(", "si", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.JsMpSpace.render_start_targ": [[216, 240], ["os.join", "os.join", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "mp_spaces.JsMpSpace._fk", "PIL.Image.fromarray().save", "mp_spaces.JsMpSpace._fk", "os.join", "os.join", "PIL.Image.fromarray().save", "print", "mp_spaces.JsMpSpace._mp_sim.add_sphere", "mp_spaces.JsMpSpace._mp_sim.set_position", "os.join", "os.join", "mp_spaces.JsMpSpace._mp_sim.remove_object", "PIL.Image.fromarray", "PIL.Image.fromarray", "mp_spaces.JsMpSpace._mp_sim.render", "mp_spaces.JsMpSpace._mp_sim.render"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.JsMpSpace._fk", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.save", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.JsMpSpace._fk", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.save", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.add_sphere", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.set_position", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.remove_object", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.render", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.render"], ["", "def", "render_start_targ", "(", "self", ",", "render_dir", ",", "subdir", ",", "targ_state", ",", "suffix", "=", "\"targ\"", ")", ":", "\n", "        ", "if", "targ_state", "is", "not", "None", ":", "\n", "            ", "targ_viz_id", "=", "self", ".", "_mp_sim", ".", "add_sphere", "(", "0.06", ",", "color", "=", "[", "0", ",", "0", ",", "1", ",", "1", "]", ")", "\n", "self", ".", "_mp_sim", ".", "set_position", "(", "targ_state", ",", "targ_viz_id", ")", "\n", "\n", "", "use_dir", "=", "osp", ".", "join", "(", "render_dir", ",", "subdir", ")", "\n", "os", ".", "makedirs", "(", "use_dir", ",", "exist_ok", "=", "True", ")", "\n", "# Visualize the target position.", "\n", "# NOTE: The object will not immediately snap to the robot's hand if a target joint", "\n", "# state is provided. This is not an issue, it only affects this one", "\n", "# rendering.", "\n", "self", ".", "_fk", "(", "self", ".", "used_js_goal", ")", "\n", "Image", ".", "fromarray", "(", "self", ".", "_mp_sim", ".", "render", "(", ")", ")", ".", "save", "(", "\n", "osp", ".", "join", "(", "use_dir", ",", "f\"{suffix}_goal_{self.num_calls}.jpeg\"", ")", "\n", ")", "\n", "\n", "self", ".", "_fk", "(", "self", ".", "used_js_start", ")", "\n", "save_f_name", "=", "osp", ".", "join", "(", "\n", "use_dir", ",", "f\"{suffix}_start_{self.num_calls}.jpeg\"", "\n", ")", "\n", "Image", ".", "fromarray", "(", "self", ".", "_mp_sim", ".", "render", "(", ")", ")", ".", "save", "(", "save_f_name", ")", "\n", "print", "(", "\"Rendered start / goal MP to \"", ",", "save_f_name", ")", "\n", "if", "targ_state", "is", "not", "None", ":", "\n", "            ", "self", ".", "_mp_sim", ".", "remove_object", "(", "targ_viz_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.JsMpSpace.get_range": [[241, 243], ["None"], "methods", ["None"], ["", "", "def", "get_range", "(", "self", ")", ":", "\n", "        ", "return", "0.1", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.JsMpSpace.set_arm": [[244, 249], ["mp_spaces.JsMpSpace.convert_state", "mp_spaces.JsMpSpace._fk", "mp_spaces.JsMpSpace._mp_sim.set_state", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.JsMpSpace.convert_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.JsMpSpace._fk", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.set_state"], ["", "def", "set_arm", "(", "self", ",", "des_joint_pos", ")", ":", "\n", "        ", "des_joint_pos", "=", "self", ".", "convert_state", "(", "des_joint_pos", ")", "\n", "self", ".", "_fk", "(", "des_joint_pos", ")", "\n", "self", ".", "_mp_sim", ".", "set_state", "(", "self", ".", "env_state", ")", "\n", "des_joint_pos", "=", "np", ".", "array", "(", "des_joint_pos", ")", "[", ":", "7", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.JsMpSpace.convert_sol": [[250, 253], ["numpy.array", "mp_spaces.JsMpSpace.convert_state", "path.getStates"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.JsMpSpace.convert_state"], ["", "def", "convert_sol", "(", "self", ",", "path", ")", ":", "\n", "        ", "plan", "=", "np", ".", "array", "(", "[", "self", ".", "convert_state", "(", "x", ")", "for", "x", "in", "path", ".", "getStates", "(", ")", "]", ")", "\n", "return", "plan", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.to_ob_state": [[20, 25], ["ob.State", "range"], "function", ["None"], ["", "def", "to_ob_state", "(", "vec", ":", "np", ".", "ndarray", ",", "space", ":", "\"ob.StateSpace\"", ",", "dim", ":", "int", ")", ":", "\n", "    ", "ob_vec", "=", "ob", ".", "State", "(", "space", ")", "\n", "for", "i", "in", "range", "(", "dim", ")", ":", "\n", "        ", "ob_vec", "[", "i", "]", "=", "vec", "[", "i", "]", "\n", "", "return", "ob_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.getPathLengthObjWithCostToGo": [[107, 111], ["ob.PathLengthOptimizationObjective", "ob.PathLengthOptimizationObjective.setCostToGoHeuristic", "ob.CostToGoHeuristic"], "function", ["None"], ["", "", "def", "getPathLengthObjWithCostToGo", "(", "si", ")", ":", "\n", "    ", "obj", "=", "ob", ".", "PathLengthOptimizationObjective", "(", "si", ")", "\n", "obj", ".", "setCostToGoHeuristic", "(", "ob", ".", "CostToGoHeuristic", "(", "ob", ".", "goalRegionCostToGo", ")", ")", "\n", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.MpSim.__init__": [[21, 24], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sim", ":", "RearrangeSim", ")", ":", "\n", "        ", "self", ".", "_sim", "=", "sim", "\n", "self", ".", "_ik", "=", "self", ".", "_sim", ".", "ik_helper", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.MpSim.setup": [[25, 27], ["None"], "methods", ["None"], ["", "def", "setup", "(", "self", ",", "use_prev", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.MpSim.should_ignore_first_collisions": [[28, 30], ["None"], "methods", ["None"], ["", "def", "should_ignore_first_collisions", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.MpSim.set_targ_obj_idx": [[31, 34], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "set_targ_obj_idx", "(", "self", ",", "targ_obj_idx", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.MpSim.unset_targ_obj_idx": [[35, 38], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "unset_targ_obj_idx", "(", "self", ",", "targ_obj_idx", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.MpSim.get_robot_transform": [[39, 44], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_robot_transform", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns the robot to world transformation matrix.\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.MpSim.get_collisions": [[45, 55], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_collisions", "(", "self", ",", "count_obj_colls", ",", "ignore_names", ",", "verbose", ")", ":", "\n", "        ", "\"\"\"\n        Returns a list of pairs that collided where each element in the pair is\n        of the form:\n            {\n            \"name\": \"body name\",\n            \"link\": \"link name\",\n            }\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.MpSim.capture_state": [[56, 59], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "capture_state", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.MpSim.get_arm_pos": [[60, 63], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_arm_pos", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.MpSim.set_arm_pos": [[64, 67], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "set_arm_pos", "(", "self", ",", "joint_pos", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.MpSim.set_position": [[68, 71], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "set_position", "(", "self", ",", "pos", ",", "obj_id", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.MpSim.micro_step": [[72, 75], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "micro_step", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.MpSim.add_sphere": [[76, 79], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "add_sphere", "(", "self", ",", "radius", ",", "color", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.MpSim.get_ee_pos": [[80, 85], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_ee_pos", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Gets the end-effector position in GLOBAL coordinates\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.MpSim.remove_object": [[86, 89], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "remove_object", "(", "self", ",", "obj_id", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.MpSim.set_state": [[90, 93], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "set_state", "(", "self", ",", "state", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.MpSim.render": [[94, 99], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "render", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Renders the current state of the simulator.\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.MpSim.start_mp": [[100, 103], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "start_mp", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.MpSim.end_mp": [[104, 107], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "end_mp", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.MpSim.get_obj_info": [[108, 113], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_obj_info", "(", "self", ",", "obj_idx", ")", "->", "ObjectGraspTarget", ":", "\n", "        ", "\"\"\"\n        Returns information about an object for the grasp planner\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.get_collisions": [[116, 128], ["habitat.tasks.rearrange.utils.rearrange_collision"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.rearrange_collision"], ["    ", "def", "get_collisions", "(", "\n", "self", ",", "\n", "count_obj_colls", ":", "bool", ",", "\n", "ignore_names", ":", "Optional", "[", "List", "[", "str", "]", "]", ",", "\n", "verbose", ":", "bool", ",", "\n", ")", ":", "\n", "        ", "return", "rearrange_collision", "(", "\n", "self", ".", "_sim", ",", "\n", "count_obj_colls", ",", "\n", "ignore_names", "=", "ignore_names", ",", "\n", "verbose", "=", "verbose", ",", "\n", "get_extra_coll_data", "=", "True", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim._snap_idx": [[130, 133], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "_snap_idx", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_sim", ".", "grasp_mgr", ".", "snap_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.capture_state": [[134, 137], ["mp_sim.HabMpSim._sim.capture_state"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.capture_state"], ["", "def", "capture_state", "(", "self", ")", ":", "\n", "        ", "env_state", "=", "self", ".", "_sim", ".", "capture_state", "(", ")", "\n", "return", "env_state", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.get_ee_pos": [[138, 140], ["None"], "methods", ["None"], ["", "def", "get_ee_pos", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_sim", ".", "robot", ".", "ee_transform", ".", "translation", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.set_state": [[141, 147], ["mp_sim.HabMpSim._sim.set_state", "mp_sim.HabMpSim._sim.scene_obj_ids.index"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.set_state"], ["", "def", "set_state", "(", "self", ",", "state", ")", ":", "\n", "        ", "if", "self", ".", "_snap_idx", "is", "not", "None", ":", "\n", "# Auto-snap the held object to the robot's hand.", "\n", "            ", "local_idx", "=", "self", ".", "_sim", ".", "scene_obj_ids", ".", "index", "(", "self", ".", "_snap_idx", ")", "\n", "state", "[", "\"static_T\"", "]", "[", "local_idx", "]", "=", "self", ".", "_sim", ".", "robot", ".", "ee_transform", "\n", "", "self", ".", "_sim", ".", "set_state", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.set_arm_pos": [[148, 150], ["None"], "methods", ["None"], ["", "def", "set_arm_pos", "(", "self", ",", "joint_pos", ")", ":", "\n", "        ", "self", ".", "_sim", ".", "robot", ".", "arm_joint_pos", "=", "joint_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.get_robot_transform": [[151, 153], ["None"], "methods", ["None"], ["", "def", "get_robot_transform", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_sim", ".", "robot", ".", "base_transformation", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.get_obj_info": [[154, 159], ["habitat_baselines.motion_planning.robot_target.ObjectGraspTarget", "habitat.tasks.rearrange.utils.get_aabb", "mp_sim.HabMpSim._sim.get_rigid_object_manager().get_object_by_id", "mp_sim.HabMpSim._sim.get_rigid_object_manager"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.get_aabb"], ["", "def", "get_obj_info", "(", "self", ",", "obj_idx", ")", "->", "ObjectGraspTarget", ":", "\n", "        ", "return", "ObjectGraspTarget", "(", "\n", "bb", "=", "get_aabb", "(", "obj_idx", ",", "self", ".", "_sim", ")", ",", "\n", "transformation", "=", "self", ".", "_sim", ".", "get_rigid_object_manager", "(", ")", "\n", ".", "get_object_by_id", "(", "obj_idx", ")", "\n", ".", "transformation", ",", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.set_position": [[162, 166], ["mp_sim.HabMpSim._sim.get_rigid_object_manager().get_object_by_id", "mp_sim.HabMpSim._sim.get_rigid_object_manager"], "methods", ["None"], ["", "def", "set_position", "(", "self", ",", "pos", ",", "obj_id", ")", ":", "\n", "        ", "self", ".", "_sim", ".", "get_rigid_object_manager", "(", ")", ".", "get_object_by_id", "(", "\n", "obj_id", "\n", ")", ".", "translation", "=", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.get_arm_pos": [[167, 169], ["None"], "methods", ["None"], ["", "def", "get_arm_pos", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_sim", ".", "robot", ".", "arm_joint_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.micro_step": [[170, 173], ["mp_sim.HabMpSim._sim.internal_step"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.internal_step"], ["", "def", "micro_step", "(", "self", ")", ":", "\n", "# self._sim.perform_discrete_collision_detection()", "\n", "        ", "self", ".", "_sim", ".", "internal_step", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.add_sphere": [[174, 182], ["mp_sim.HabMpSim._sim.draw_sphere", "mp_sim.HabMpSim._sim.get_rigid_object_manager().get_object_by_id", "mp_sim.HabMpSim.override_collision_group", "mp_sim.HabMpSim._sim.get_rigid_object_manager"], "methods", ["None"], ["", "def", "add_sphere", "(", "self", ",", "radius", ",", "color", "=", "None", ")", ":", "\n", "        ", "sphere_id", "=", "self", ".", "_sim", ".", "draw_sphere", "(", "radius", ")", "\n", "\n", "rigid_obj", "=", "self", ".", "_sim", ".", "get_rigid_object_manager", "(", ")", ".", "get_object_by_id", "(", "\n", "sphere_id", "\n", ")", "\n", "rigid_obj", ".", "override_collision_group", "(", "CollisionGroups", ".", "UserGroup7", ")", "\n", "return", "sphere_id", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.remove_object": [[183, 185], ["mp_sim.HabMpSim._sim.get_rigid_object_manager().remove_object_by_id", "mp_sim.HabMpSim._sim.get_rigid_object_manager"], "methods", ["None"], ["", "def", "remove_object", "(", "self", ",", "obj_id", ")", ":", "\n", "        ", "self", ".", "_sim", ".", "get_rigid_object_manager", "(", ")", ".", "remove_object_by_id", "(", "obj_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.set_targ_obj_idx": [[186, 191], ["mp_sim.HabMpSim._sim.get_rigid_object_manager().get_object_by_id().override_collision_group", "mp_sim.HabMpSim._sim.get_rigid_object_manager().get_object_by_id", "mp_sim.HabMpSim._sim.get_rigid_object_manager"], "methods", ["None"], ["", "def", "set_targ_obj_idx", "(", "self", ",", "targ_obj_idx", ")", ":", "\n", "        ", "if", "targ_obj_idx", "is", "not", "None", ":", "\n", "            ", "self", ".", "_sim", ".", "get_rigid_object_manager", "(", ")", ".", "get_object_by_id", "(", "\n", "targ_obj_idx", "\n", ")", ".", "override_collision_group", "(", "128", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.unset_targ_obj_idx": [[192, 197], ["mp_sim.HabMpSim._sim.get_rigid_object_manager().get_object_by_id().override_collision_group", "mp_sim.HabMpSim._sim.get_rigid_object_manager().get_object_by_id", "mp_sim.HabMpSim._sim.get_rigid_object_manager"], "methods", ["None"], ["", "", "def", "unset_targ_obj_idx", "(", "self", ",", "targ_obj_idx", ")", ":", "\n", "        ", "if", "targ_obj_idx", "is", "not", "None", ":", "\n", "            ", "self", ".", "_sim", ".", "get_rigid_object_manager", "(", ")", ".", "get_object_by_id", "(", "\n", "targ_obj_idx", "\n", ")", ".", "override_collision_group", "(", "8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.render": [[198, 207], ["mp_sim.HabMpSim._sim.step", "ValueError"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step"], ["", "", "def", "render", "(", "self", ")", ":", "\n", "        ", "obs", "=", "self", ".", "_sim", ".", "step", "(", "0", ")", "# NOTE: same as step(-1)", "\n", "if", "\"robot_third_rgb\"", "not", "in", "obs", ":", "\n", "            ", "raise", "ValueError", "(", "\"No render camera\"", ")", "\n", "", "pic", "=", "obs", "[", "\"robot_third_rgb\"", "]", "\n", "if", "pic", ".", "shape", "[", "-", "1", "]", ">", "3", ":", "\n", "# Skip the depth part.", "\n", "            ", "pic", "=", "pic", "[", ":", ",", ":", ",", ":", "3", "]", "\n", "", "return", "pic", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.start_mp": [[208, 226], ["mp_sim.HabMpSim._sim.get_rigid_object_manager", "mp_sim.HabMpSim._sim.grasp_mgr.desnap", "mp_sim.HabMpSim._sim.grasp_mgr.snap_to_obj", "mp_sim.HabMpSim.get_object_by_id"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_grasp_manager.RearrangeGraspManager.desnap", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_grasp_manager.RearrangeGraspManager.snap_to_obj"], ["", "def", "start_mp", "(", "self", ")", ":", "\n", "        ", "self", ".", "prev_motion_types", "=", "{", "}", "\n", "self", ".", "hold_obj", "=", "self", ".", "_snap_idx", "\n", "if", "self", ".", "hold_obj", "is", "not", "None", ":", "\n", "            ", "self", ".", "_sim", ".", "grasp_mgr", ".", "desnap", "(", "force", "=", "True", ")", "\n", "self", ".", "_sim", ".", "do_grab_using_constraint", "=", "False", "\n", "self", ".", "_sim", ".", "grasp_mgr", ".", "snap_to_obj", "(", "self", ".", "hold_obj", ")", "\n", "\n", "# Set everything to STATIC", "\n", "", "rom", "=", "self", ".", "_sim", ".", "get_rigid_object_manager", "(", ")", "\n", "for", "obj_id", "in", "self", ".", "_sim", ".", "scene_obj_ids", ":", "\n", "            ", "obj", "=", "rom", ".", "get_object_by_id", "(", "obj_id", ")", "\n", "self", ".", "prev_motion_types", "[", "obj_id", "]", "=", "obj", ".", "motion_type", "\n", "if", "obj_id", "==", "self", ".", "_snap_idx", ":", "\n", "                ", "pass", "\n", "# obj.motion_type = MotionType.KINEMATIC", "\n", "", "else", ":", "\n", "                ", "obj", ".", "motion_type", "=", "MotionType", ".", "STATIC", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.end_mp": [[227, 238], ["mp_sim.HabMpSim._sim.get_rigid_object_manager", "mp_sim.HabMpSim.prev_motion_types.items", "mp_sim.HabMpSim.get_object_by_id", "mp_sim.HabMpSim._sim.grasp_mgr.desnap", "mp_sim.HabMpSim._sim.grasp_mgr.snap_to_obj"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_grasp_manager.RearrangeGraspManager.desnap", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_grasp_manager.RearrangeGraspManager.snap_to_obj"], ["", "", "", "def", "end_mp", "(", "self", ")", ":", "\n", "        ", "rom", "=", "self", ".", "_sim", ".", "get_rigid_object_manager", "(", ")", "\n", "# Set everything to how it was", "\n", "for", "obj_id", ",", "mt", "in", "self", ".", "prev_motion_types", ".", "items", "(", ")", ":", "\n", "            ", "obj", "=", "rom", ".", "get_object_by_id", "(", "obj_id", ")", "\n", "obj", ".", "motion_type", "=", "mt", "\n", "\n", "", "if", "self", ".", "hold_obj", "is", "not", "None", ":", "\n", "            ", "self", ".", "_sim", ".", "grasp_mgr", ".", "desnap", "(", "force", "=", "True", ")", "\n", "self", ".", "_sim", ".", "do_grab_using_constraint", "=", "True", "\n", "self", ".", "_sim", ".", "grasp_mgr", ".", "snap_to_obj", "(", "self", ".", "hold_obj", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.motion_plan.MotionPlanner.__init__": [[49, 65], ["os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "motion_plan.MotionPlanner._get_sim", "ImportError"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.motion_plan.MotionPlanner._get_sim"], ["    ", "def", "__init__", "(", "self", ",", "sim", ":", "RearrangeSim", ",", "config", ":", "CfgNode", ")", ":", "\n", "        ", "if", "not", "is_ompl_installed", ":", "\n", "            ", "raise", "ImportError", "(", "\"Need to install OMPL to use motion planning\"", ")", "\n", "", "self", ".", "_config", "=", "config", "\n", "self", ".", "_reach_for_obj", "=", "None", "\n", "self", ".", "_should_render", "=", "False", "\n", "self", ".", "_coll_check_count", ":", "int", "=", "0", "\n", "self", ".", "_num_calls", "=", "0", "\n", "self", ".", "_sphere_id", ":", "Optional", "[", "int", "]", "=", "None", "\n", "self", ".", "_ignore_names", ":", "List", "[", "str", "]", "=", "[", "]", "\n", "self", ".", "traj_viz_id", ":", "Optional", "[", "int", "]", "=", "None", "\n", "self", ".", "_sim", "=", "sim", "\n", "os", ".", "makedirs", "(", "self", ".", "_config", ".", "DEBUG_DIR", ",", "exist_ok", "=", "True", ")", "\n", "\n", "self", ".", "_use_sim", "=", "self", ".", "_get_sim", "(", ")", "\n", "self", ".", "grasp_gen", ":", "Optional", "[", "GraspGenerator", "]", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.motion_plan.MotionPlanner.set_should_render": [[66, 71], ["glob.glob", "os.remove", "os.remove", "os.remove", "os.remove"], "methods", ["None"], ["", "def", "set_should_render", "(", "self", ",", "should_render", ":", "bool", ")", ":", "\n", "        ", "self", ".", "_should_render", "=", "should_render", "\n", "if", "self", ".", "_should_render", ":", "\n", "            ", "for", "f", "in", "glob", ".", "glob", "(", "f\"{self._config.DEBUG_DIR}/*\"", ")", ":", "\n", "                ", "os", ".", "remove", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.motion_plan.MotionPlanner._log": [[72, 78], ["print"], "methods", ["None"], ["", "", "", "def", "_log", "(", "self", ",", "txt", ":", "str", ")", ":", "\n", "        ", "\"\"\"\n        Logs text to console only if logging is enabled.\n        \"\"\"", "\n", "if", "self", ".", "_config", ".", "VERBOSE", ":", "\n", "            ", "print", "(", "\"MP:\"", ",", "txt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.motion_plan.MotionPlanner.action_space": [[79, 82], ["gym.spaces.Box"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "action_space", "(", "self", ")", ":", "\n", "        ", "return", "spaces", ".", "Box", "(", "shape", "=", "(", "3", ",", ")", ",", "low", "=", "0", ",", "high", "=", "1", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.motion_plan.MotionPlanner._render_debug_image": [[83, 103], ["motion_plan.MotionPlanner._use_sim.render", "PIL.Image.fromarray", "PIL.Image.fromarray.save", "str", "uuid.uuid4"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.render", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.save"], ["", "def", "_render_debug_image", "(", "\n", "self", ",", "add_txt", ":", "str", ",", "before_txt", "=", "\"\"", ",", "should_save", "=", "True", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Render debug utility helper. Renders an image of the current scene to\n        the debug directory.\n        \"\"\"", "\n", "pic", "=", "self", ".", "_use_sim", ".", "render", "(", ")", "\n", "if", "pic", ".", "shape", "[", "-", "1", "]", ">", "3", ":", "\n", "            ", "pic", "=", "pic", "[", ":", ",", ":", ",", ":", "3", "]", "\n", "", "im", "=", "Image", ".", "fromarray", "(", "pic", ")", "\n", "save_name", "=", "\"%s/%s%s_%s.jpeg\"", "%", "(", "\n", "self", ".", "_config", ".", "DEBUG_DIR", ",", "\n", "before_txt", ",", "\n", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", "[", ":", "4", "]", ",", "\n", "add_txt", ",", "\n", ")", "\n", "if", "should_save", ":", "\n", "            ", "im", ".", "save", "(", "save_name", ")", "\n", "", "return", "pic", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.motion_plan.MotionPlanner.get_mp_space": [[104, 110], ["habitat_baselines.motion_planning.mp_spaces.JsMpSpace"], "methods", ["None"], ["", "def", "get_mp_space", "(", "self", ")", "->", "MpSpace", ":", "\n", "        ", "return", "JsMpSpace", "(", "\n", "self", ".", "_use_sim", ",", "\n", "self", ".", "_sim", ".", "ik_helper", ",", "\n", "self", ".", "_num_calls", ",", "\n", "self", ".", "_should_render", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.motion_plan.MotionPlanner._is_state_valid": [[112, 153], ["motion_plan.MotionPlanner._mp_space.set_arm", "motion_plan.MotionPlanner._use_sim.micro_step", "motion_plan.MotionPlanner._use_sim.get_collisions", "motion_plan.MotionPlanner._use_sim.set_position", "motion_plan.MotionPlanner._ignore_names.extend", "motion_plan.MotionPlanner._log", "motion_plan.MotionPlanner._render_debug_image", "motion_plan.MotionPlanner._use_sim.should_ignore_first_collisions", "motion_plan.MotionPlanner._check_ee_coll", "motion_plan.MotionPlanner._use_sim.get_ee_pos", "motion_plan.MotionPlanner._use_sim.should_ignore_first_collisions", "str"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.JsMpSpace.set_arm", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.micro_step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.get_collisions", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.set_position", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.ParameterizedAgent._log", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.motion_plan.MotionPlanner._render_debug_image", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.MpSim.should_ignore_first_collisions", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.motion_plan.MotionPlanner._check_ee_coll", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.get_ee_pos", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.MpSim.should_ignore_first_collisions"], ["", "def", "_is_state_valid", "(", "self", ",", "x", ":", "np", ".", "ndarray", ",", "take_image", ":", "bool", "=", "False", ")", "->", "bool", ":", "\n", "        ", "\"\"\"Returns if a state is collision free.\n        :param take_image: If true, will render a debug image.\n        \"\"\"", "\n", "self", ".", "_mp_space", ".", "set_arm", "(", "x", ")", "\n", "if", "self", ".", "_ee_margin", "is", "not", "None", "and", "self", ".", "_sphere_id", "is", "not", "None", ":", "\n", "            ", "self", ".", "_use_sim", ".", "set_position", "(", "\n", "self", ".", "_use_sim", ".", "get_ee_pos", "(", ")", ",", "self", ".", "_sphere_id", "\n", ")", "\n", "", "self", ".", "_use_sim", ".", "micro_step", "(", ")", "\n", "\n", "did_collide", ",", "coll_details", "=", "self", ".", "_use_sim", ".", "get_collisions", "(", "\n", "self", ".", "_config", ".", "COUNT_OBJ_COLLISIONS", ",", "self", ".", "_ignore_names", ",", "True", "\n", ")", "\n", "if", "(", "\n", "self", ".", "_ignore_first", "\n", "or", "self", ".", "_use_sim", ".", "should_ignore_first_collisions", "(", ")", "\n", ")", "and", "self", ".", "_coll_check_count", "==", "0", ":", "\n", "            ", "self", ".", "_ignore_names", ".", "extend", "(", "coll_details", ".", "robot_coll_ids", ")", "\n", "self", ".", "_log", "(", "\n", "\"First run, ignoring collisions from \"", "\n", "+", "str", "(", "self", ".", "_ignore_names", ")", "\n", ")", "\n", "", "self", ".", "_coll_check_count", "+=", "1", "\n", "if", "take_image", ":", "\n", "            ", "self", ".", "_render_debug_image", "(", "f\"{did_collide}\"", ")", "\n", "\n", "", "if", "not", "self", ".", "_use_sim", ".", "should_ignore_first_collisions", "(", ")", ":", "\n", "# We only want to continue to ignore collisions from this if we are", "\n", "# using a point cloud approach.", "\n", "            ", "self", ".", "_ignore_names", "=", "[", "]", "\n", "", "if", "did_collide", "and", "self", ".", "_should_render", ":", "\n", "            ", "return", "False", "\n", "\n", "# Check we satisfy the EE margin, if there is one.", "\n", "", "if", "not", "self", ".", "_check_ee_coll", "(", "\n", "self", ".", "_ee_margin", ",", "self", ".", "_sphere_id", ",", "coll_details", "\n", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.motion_plan.MotionPlanner.set_config": [[154, 190], ["motion_plan.MotionPlanner.get_mp_space", "motion_plan.MotionPlanner._use_sim.setup", "habitat_baselines.motion_planning.grasp_generator.GraspGenerator", "motion_plan.MotionPlanner._sim.remove_traj_obj"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.motion_plan.MotionPlanner.get_mp_space", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.MpSim.setup"], ["", "def", "set_config", "(", "\n", "self", ",", "\n", "ee_margin", ":", "float", ",", "\n", "count_obj_collisions", ":", "bool", ",", "\n", "grasp_thresh", ":", "float", ",", "\n", "n_gen_grasps", ":", "int", ",", "\n", "run_cfg", ":", "CfgNode", ",", "\n", "ignore_first", ":", "bool", "=", "False", ",", "\n", "use_prev", ":", "bool", "=", "False", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Sets up the parameters of this motion planning call.\n        \"\"\"", "\n", "self", ".", "_ee_margin", "=", "ee_margin", "\n", "self", ".", "_count_obj_collisions", "=", "count_obj_collisions", "\n", "self", ".", "_sphere_id", "=", "None", "\n", "self", ".", "_run_cfg", "=", "run_cfg", "\n", "self", ".", "_mp_space", "=", "self", ".", "get_mp_space", "(", ")", "\n", "self", ".", "_ignore_names", "=", "[", "]", "\n", "self", ".", "_ignore_first", "=", "ignore_first", "\n", "self", ".", "_hold_id", "=", "self", ".", "_sim", ".", "grasp_mgr", ".", "snap_idx", "\n", "self", ".", "_use_sim", ".", "setup", "(", "use_prev", ")", "\n", "if", "self", ".", "traj_viz_id", "is", "not", "None", ":", "\n", "            ", "self", ".", "_sim", ".", "remove_traj_obj", "(", "self", ".", "traj_viz_id", ")", "\n", "self", ".", "traj_viz_id", "=", "None", "\n", "", "self", ".", "grasp_gen", "=", "GraspGenerator", "(", "\n", "self", ".", "_use_sim", ",", "\n", "self", ".", "_mp_space", ",", "\n", "self", ".", "_sim", ".", "ik_helper", ",", "\n", "self", ",", "\n", "self", ".", "_should_render", ",", "\n", "grasp_thresh", ",", "\n", "n_gen_grasps", ",", "\n", "self", ".", "_config", ".", "MP_SIM_TYPE", "==", "\"Priv\"", ",", "\n", "self", ".", "_config", ".", "DEBUG_DIR", ",", "\n", "self", ".", "_config", ".", "GRASP_GEN_IS_VERBOSE", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.motion_plan.MotionPlanner.setup_ee_margin": [[192, 202], ["use_sim.add_sphere", "use_sim.set_targ_obj_idx"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.add_sphere", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.set_targ_obj_idx"], ["", "def", "setup_ee_margin", "(", "self", ",", "obj_id_target", ":", "int", ")", ":", "\n", "        ", "\"\"\"\n        Adds a collision margin sphere around the end-effector if it was\n        specified in the run config. This sphere intersects with everything but\n        the robot and currently held object.\n        \"\"\"", "\n", "use_sim", "=", "self", ".", "_use_sim", "\n", "if", "self", ".", "_ee_margin", "is", "not", "None", ":", "\n", "            ", "self", ".", "_sphere_id", "=", "use_sim", ".", "add_sphere", "(", "self", ".", "_ee_margin", ")", "\n", "use_sim", ".", "set_targ_obj_idx", "(", "obj_id_target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.motion_plan.MotionPlanner.remove_ee_margin": [[203, 214], ["use_sim.remove_object", "use_sim.unset_targ_obj_idx"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.remove_object", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.unset_targ_obj_idx"], ["", "", "def", "remove_ee_margin", "(", "self", ",", "obj_id_target", ":", "int", ")", ":", "\n", "        ", "\"\"\"\n        Removes the collision margin sphere around the end-effector. If not\n        called this object is never removed and will cause problems!\n        :param obj_id_target: ID of the object we are planning towards.\n        \"\"\"", "\n", "use_sim", "=", "self", ".", "_use_sim", "\n", "if", "self", ".", "_ee_margin", "is", "not", "None", ":", "\n", "            ", "use_sim", ".", "remove_object", "(", "self", ".", "_sphere_id", ")", "\n", "use_sim", ".", "unset_targ_obj_idx", "(", "obj_id_target", ")", "\n", "self", ".", "_sphere_id", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.motion_plan.MotionPlanner.get_recent_plan_stats": [[215, 236], ["motion_plan.MotionPlanner._mp_space.get_start_goal", "motion_plan.MotionPlanner._is_state_valid", "motion_plan.MotionPlanner._is_state_valid", "int", "int"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.JsMpSpace.get_start_goal", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.motion_plan.MotionPlanner._is_state_valid", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.motion_plan.MotionPlanner._is_state_valid"], ["", "", "def", "get_recent_plan_stats", "(", "\n", "self", ",", "plan", ":", "np", ".", "ndarray", ",", "robo_targ", ":", "RobotTarget", ",", "name", ":", "str", "=", "\"\"", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Return logging information about the most recent plan\n        \"\"\"", "\n", "is_start_bad", "=", "False", "\n", "is_goal_bad", "=", "False", "\n", "if", "not", "robo_targ", ".", "is_guess", "and", "plan", "is", "None", ":", "\n", "# Planning failed, but was it the planner's fault?", "\n", "            ", "js_start", ",", "js_goal", "=", "self", ".", "_mp_space", ".", "get_start_goal", "(", ")", "\n", "is_start_bad", "=", "self", ".", "_is_state_valid", "(", "js_start", ")", "\n", "is_goal_bad", "=", "self", ".", "_is_state_valid", "(", "js_goal", ")", "\n", "\n", "", "return", "{", "\n", "f\"plan_{name}bad_coll\"", ":", "int", "(", "self", ".", "was_bad_coll", ")", ",", "\n", "f\"plan_{name}failure\"", ":", "int", "(", "plan", "is", "None", ")", ",", "\n", "f\"plan_{name}guess\"", ":", "robo_targ", ".", "is_guess", ",", "\n", "f\"plan_{name}goal_bad\"", ":", "is_start_bad", ",", "\n", "f\"plan_{name}start_bad\"", ":", "is_goal_bad", ",", "\n", "f\"plan_{name}approx\"", ":", "self", ".", "_is_approx_sol", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.motion_plan.MotionPlanner.motion_plan": [[238, 314], ["use_sim.start_mp", "motion_plan.MotionPlanner._log", "motion_plan.MotionPlanner._log", "motion_plan.MotionPlanner._log", "copy.copy.copy", "motion_plan.MotionPlanner._mp_space.set_env_state", "motion_plan.MotionPlanner.setup_ee_margin", "motion_plan.MotionPlanner._get_path", "motion_plan.MotionPlanner.remove_ee_margin", "use_sim.set_state", "use_sim.set_arm_pos", "use_sim.end_mp", "range", "use_sim.set_state", "range", "use_sim.capture_state", "motion_plan.MotionPlanner._mp_space.render_start_targ", "motion_plan.MotionPlanner._render_verify_motion_plan", "motion_plan.MotionPlanner._log", "use_sim.micro_step", "use_sim.micro_step", "str", "str", "str", "len", "use_sim.get_robot_transform"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.start_mp", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.ParameterizedAgent._log", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.ParameterizedAgent._log", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.ParameterizedAgent._log", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.MpSpace.set_env_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.motion_plan.MotionPlanner.setup_ee_margin", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.motion_plan.MotionPlanner._get_path", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.motion_plan.MotionPlanner.remove_ee_margin", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.set_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.set_arm_pos", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.end_mp", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.set_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.capture_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.JsMpSpace.render_start_targ", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.motion_plan.MotionPlanner._render_verify_motion_plan", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.ParameterizedAgent._log", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.micro_step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.micro_step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.get_robot_transform"], ["", "def", "motion_plan", "(", "\n", "self", ",", "\n", "start_js", ":", "np", ".", "ndarray", ",", "\n", "robot_target", ":", "RobotTarget", ",", "\n", "timeout", ":", "int", "=", "30", ",", "\n", "ignore_names", ":", "Optional", "[", "List", "[", "str", "]", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Runs the motion planning.\n        :param timeout: Time in seconds to run the motion planner for. If no\n            plan is found in the time, returns failure.\n        :param ignore_names: A list of IDs for objects to ignore collisions\n            with.\n        \"\"\"", "\n", "if", "ignore_names", "is", "None", ":", "\n", "            ", "ignore_names", "=", "[", "]", "\n", "", "use_sim", "=", "self", ".", "_use_sim", "\n", "self", ".", "was_bad_coll", "=", "False", "\n", "self", ".", "_is_approx_sol", "=", "False", "\n", "if", "robot_target", ".", "is_guess", ":", "\n", "            ", "return", "None", "\n", "\n", "", "self", ".", "hold_id", "=", "self", ".", "_sim", ".", "grasp_mgr", ".", "snap_idx", "\n", "\n", "use_sim", ".", "start_mp", "(", ")", "\n", "self", ".", "_log", "(", "\"Starting plan from %s\"", "%", "str", "(", "start_js", ")", ")", "\n", "self", ".", "_log", "(", "\"Target info %s\"", "%", "str", "(", "robot_target", ")", ")", "\n", "self", ".", "_log", "(", "\n", "\"Agent position\"", "+", "str", "(", "use_sim", ".", "get_robot_transform", "(", ")", ".", "translation", ")", "\n", ")", "\n", "\n", "env_state", "=", "copy", "(", "use_sim", ".", "capture_state", "(", ")", ")", "\n", "self", ".", "_mp_space", ".", "set_env_state", "(", "env_state", ")", "\n", "\n", "self", ".", "_ignore_names", "=", "[", "\"ball_new\"", ",", "*", "ignore_names", "]", "\n", "self", ".", "_coll_check_count", "=", "0", "\n", "\n", "self", ".", "setup_ee_margin", "(", "robot_target", ".", "obj_id_target", ")", "\n", "\n", "joint_plan", "=", "self", ".", "_get_path", "(", "\n", "self", ".", "_is_state_valid", ",", "\n", "start_js", ",", "\n", "robot_target", ",", "\n", "use_sim", ",", "\n", "self", ".", "_mp_space", ",", "\n", "timeout", ",", "\n", ")", "\n", "\n", "if", "joint_plan", "is", "None", ":", "\n", "            ", "self", ".", "_mp_space", ".", "render_start_targ", "(", "\n", "self", ".", "_run_cfg", ".", "VIDEO_DIR", ",", "\n", "\"mp_fail\"", ",", "\n", "robot_target", ".", "ee_target_pos", ",", "\n", "f\"ep{self._sim.ep_info['episode_id']}\"", ",", "\n", ")", "\n", "\n", "", "if", "joint_plan", "is", "not", "None", ":", "\n", "            ", "self", ".", "_render_verify_motion_plan", "(", "use_sim", ",", "robot_target", ",", "joint_plan", ")", "\n", "\n", "self", ".", "_log", "(", "\"MP: Got plan of length %i\"", "%", "len", "(", "joint_plan", ")", ")", "\n", "\n", "", "self", ".", "remove_ee_margin", "(", "robot_target", ".", "obj_id_target", ")", "\n", "\n", "self", ".", "_num_calls", "+=", "1", "\n", "\n", "# Settle back to the regular environment", "\n", "use_sim", ".", "set_state", "(", "env_state", ")", "\n", "use_sim", ".", "set_arm_pos", "(", "start_js", ")", "\n", "use_sim", ".", "end_mp", "(", ")", "\n", "for", "_", "in", "range", "(", "100", ")", ":", "\n", "            ", "use_sim", ".", "micro_step", "(", ")", "\n", "", "use_sim", ".", "set_state", "(", "env_state", ")", "\n", "for", "_", "in", "range", "(", "100", ")", ":", "\n", "            ", "use_sim", ".", "micro_step", "(", ")", "\n", "\n", "", "return", "joint_plan", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.motion_plan.MotionPlanner._render_verify_motion_plan": [[315, 375], ["enumerate", "os.join", "os.join", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "habitat_sim.utils.viz_utils.save_video", "use_sim.get_robot_transform", "use_sim.get_robot_transform.transform_point", "use_sim.add_sphere", "use_sim.set_position", "use_sim.set_arm_pos", "all_ee_pos.append", "motion_plan.MotionPlanner._render_debug_image", "all_frames.append", "use_sim.remove_object", "numpy.linalg.norm", "os.join", "os.join", "use_sim.get_ee_pos", "use_sim.set_position", "motion_plan.MotionPlanner._is_state_valid", "habitat.tasks.rearrange.utils.make_border_red", "motion_plan.MotionPlanner._use_sim.get_ee_pos", "use_sim.get_ee_pos"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.get_robot_transform", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.add_sphere", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.set_position", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.set_arm_pos", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.motion_plan.MotionPlanner._render_debug_image", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.remove_object", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.get_ee_pos", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.set_position", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.motion_plan.MotionPlanner._is_state_valid", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.make_border_red", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.get_ee_pos", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.get_ee_pos"], ["", "def", "_render_verify_motion_plan", "(", "\n", "self", ",", "\n", "use_sim", ":", "MpSim", ",", "\n", "robot_target", ":", "RobotTarget", ",", "\n", "joint_plan", ":", "np", ".", "ndarray", ",", "\n", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Renders the motion plan to a video by teleporting the arm to the\n        planned joint states. Does not reset the environment state after\n        finishing. Also sanity checks the motion plan to ensure each joint\n        state is truely collision free.\n        \"\"\"", "\n", "all_frames", "=", "[", "]", "\n", "\n", "# Visualize the target position.", "\n", "if", "robot_target", ".", "ee_target_pos", "is", "not", "None", ":", "\n", "            ", "robo_trans", "=", "use_sim", ".", "get_robot_transform", "(", ")", "\n", "use_targ_state", "=", "robo_trans", ".", "transform_point", "(", "\n", "robot_target", ".", "ee_target_pos", "\n", ")", "\n", "targ_viz_id", "=", "use_sim", ".", "add_sphere", "(", "0.03", ",", "color", "=", "[", "0", ",", "0", ",", "1", ",", "1", "]", ")", "\n", "use_sim", ".", "set_position", "(", "use_targ_state", ",", "targ_viz_id", ")", "\n", "", "else", ":", "\n", "            ", "targ_viz_id", "=", "None", "\n", "\n", "", "all_ee_pos", "=", "[", "]", "\n", "for", "i", ",", "joints", "in", "enumerate", "(", "joint_plan", ")", ":", "\n", "            ", "use_sim", ".", "set_arm_pos", "(", "joints", ")", "\n", "all_ee_pos", ".", "append", "(", "use_sim", ".", "get_ee_pos", "(", ")", ")", "\n", "if", "self", ".", "_ee_margin", "is", "not", "None", ":", "\n", "                ", "use_sim", ".", "set_position", "(", "\n", "self", ".", "_use_sim", ".", "get_ee_pos", "(", ")", ",", "self", ".", "_sphere_id", "\n", ")", "\n", "", "did_collide", "=", "not", "self", ".", "_is_state_valid", "(", "joints", ",", "True", ")", "\n", "if", "did_collide", "and", "self", ".", "_should_render", ":", "\n", "                ", "self", ".", "was_bad_coll", "=", "True", "\n", "\n", "", "pic", "=", "self", ".", "_render_debug_image", "(", "\n", "\"\"", ",", "f\"{i}_{self._num_calls}\"", ",", "should_save", "=", "False", "\n", ")", "\n", "if", "did_collide", ":", "\n", "                ", "pic", "=", "make_border_red", "(", "pic", ")", "\n", "", "all_frames", ".", "append", "(", "pic", ")", "\n", "\n", "", "if", "targ_viz_id", "is", "not", "None", ":", "\n", "            ", "use_sim", ".", "remove_object", "(", "targ_viz_id", ")", "\n", "dist_to_goal", "=", "np", ".", "linalg", ".", "norm", "(", "\n", "use_targ_state", "-", "use_sim", ".", "get_ee_pos", "(", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "dist_to_goal", "=", "-", "1.0", "# type: ignore[assignment]", "\n", "\n", "", "save_dir", "=", "osp", ".", "join", "(", "self", ".", "_run_cfg", ".", "VIDEO_DIR", ",", "\"mp_plans\"", ")", "\n", "os", ".", "makedirs", "(", "save_dir", ",", "exist_ok", "=", "True", ")", "\n", "mp_name", "=", "\"ep%s_%i_%.3f\"", "%", "(", "\n", "self", ".", "_sim", ".", "ep_info", "[", "\"episode_id\"", "]", ",", "\n", "self", ".", "_num_calls", ",", "\n", "dist_to_goal", ",", "\n", ")", "\n", "save_video", "(", "osp", ".", "join", "(", "save_dir", ",", "mp_name", "+", "\".mp4\"", ")", ",", "all_frames", ",", "fps", "=", "5.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.motion_plan.MotionPlanner.set_plan_ignore_obj": [[376, 378], ["None"], "methods", ["None"], ["", "def", "set_plan_ignore_obj", "(", "self", ",", "obj_id", ")", ":", "\n", "        ", "self", ".", "_reach_for_obj", "=", "obj_id", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.motion_plan.MotionPlanner._get_sim": [[379, 387], ["habitat_baselines.motion_planning.mp_sim.HabMpSim", "ValueError"], "methods", ["None"], ["", "def", "_get_sim", "(", "self", ")", "->", "MpSim", ":", "\n", "        ", "\"\"\"\n        The two different simulators used for planning.\n        \"\"\"", "\n", "if", "self", ".", "_config", ".", "MP_SIM_TYPE", "==", "\"Priv\"", ":", "\n", "            ", "return", "HabMpSim", "(", "self", ".", "_sim", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unrecognized simulator type\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.motion_plan.MotionPlanner._check_ee_coll": [[388, 402], ["any"], "methods", ["None"], ["", "", "def", "_check_ee_coll", "(", "\n", "self", ",", "ee_margin", ":", "float", ",", "sphere_id", ":", "int", ",", "coll_details", ":", "CollisionDetails", "\n", ")", "->", "bool", ":", "\n", "        ", "if", "ee_margin", "is", "not", "None", ":", "\n", "            ", "obj_id", "=", "self", ".", "hold_id", "\n", "\n", "if", "obj_id", "is", "None", ":", "\n", "                ", "obj_id", "=", "self", ".", "_reach_for_obj", "\n", "\n", "", "any_match", "=", "any", "(", "[", "sphere_id", "in", "x", "for", "x", "in", "coll_details", ".", "all_colls", "]", ")", "\n", "if", "any_match", ":", "\n", "                ", "return", "False", "\n", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.motion_plan.MotionPlanner._get_path": [[403, 465], ["mp_space.get_state_dim", "ob.RealVectorStateSpace", "ob.RealVectorBounds", "mp_space.get_state_lims", "enumerate", "ob.RealVectorStateSpace.setBounds", "ob.SpaceInformation", "ob.SpaceInformation.setStateValidityChecker", "ob.SpaceInformation.setup", "ob.ProblemDefinition", "mp_space.set_problem", "mp_space.get_planner", "mp_space.get_planner.setProblemDefinition", "mp_space.get_planner.setup", "mp_space.get_planner.solve", "ob.ProblemDefinition.getOptimizationObjective", "motion_plan.MotionPlanner._log", "ob.ProblemDefinition.getSolutionPath", "mp_space.convert_sol", "ob.ProblemDefinition.hasApproximateSolution", "ou.setLogLevel", "ob.RealVectorBounds.setLow", "ob.RealVectorBounds.setHigh", "ob.StateValidityCheckerFn", "mp_space.get_range", "mp_space.get_planner.setRange", "motion_plan.MotionPlanner._log", "ob.ProblemDefinition.getSolutionPath().cost().value", "mp_space.get_range", "ob.ProblemDefinition.getSolutionPath().cost", "ob.ProblemDefinition.getSolutionPath().length", "ob.ProblemDefinition.getOptimizationObjective", "ob.ProblemDefinition.getSolutionPath", "ob.ProblemDefinition.getSolutionPath"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.JsMpSpace.get_state_dim", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.JsMpSpace.get_state_lims", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.MpSim.setup", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.JsMpSpace.set_problem", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.JsMpSpace.get_planner", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.MpSim.setup", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.ParameterizedAgent._log", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.JsMpSpace.convert_sol", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.JsMpSpace.get_range", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.ParameterizedAgent._log", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_spaces.JsMpSpace.get_range"], ["", "def", "_get_path", "(", "\n", "self", ",", "\n", "is_state_valid", ":", "Callable", "[", "[", "np", ".", "ndarray", "]", ",", "bool", "]", ",", "\n", "start_js", ":", "np", ".", "ndarray", ",", "\n", "robot_targ", ":", "RobotTarget", ",", "\n", "use_sim", ":", "MpSim", ",", "\n", "mp_space", ":", "MpSpace", ",", "\n", "timeout", ":", "int", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Does the low-level path planning with OMPL.\n        \"\"\"", "\n", "if", "not", "self", ".", "_should_render", ":", "\n", "            ", "ou", ".", "setLogLevel", "(", "ou", ".", "LOG_ERROR", ")", "\n", "", "dim", "=", "mp_space", ".", "get_state_dim", "(", ")", "\n", "space", "=", "ob", ".", "RealVectorStateSpace", "(", "dim", ")", "\n", "bounds", "=", "ob", ".", "RealVectorBounds", "(", "dim", ")", "\n", "\n", "lims", "=", "mp_space", ".", "get_state_lims", "(", ")", "\n", "for", "i", ",", "lim", "in", "enumerate", "(", "lims", ")", ":", "\n", "            ", "bounds", ".", "setLow", "(", "i", ",", "lim", "[", "0", "]", ")", "\n", "bounds", ".", "setHigh", "(", "i", ",", "lim", "[", "1", "]", ")", "\n", "", "space", ".", "setBounds", "(", "bounds", ")", "\n", "\n", "si", "=", "ob", ".", "SpaceInformation", "(", "space", ")", "\n", "si", ".", "setStateValidityChecker", "(", "ob", ".", "StateValidityCheckerFn", "(", "is_state_valid", ")", ")", "\n", "si", ".", "setup", "(", ")", "\n", "\n", "pdef", "=", "ob", ".", "ProblemDefinition", "(", "si", ")", "\n", "mp_space", ".", "set_problem", "(", "pdef", ",", "space", ",", "si", ",", "start_js", ",", "robot_targ", ")", "\n", "\n", "planner", "=", "mp_space", ".", "get_planner", "(", "si", ")", "\n", "planner", ".", "setProblemDefinition", "(", "pdef", ")", "\n", "planner", ".", "setup", "(", ")", "\n", "if", "mp_space", ".", "get_range", "(", ")", "is", "not", "None", ":", "\n", "            ", "planner", ".", "setRange", "(", "mp_space", ".", "get_range", "(", ")", ")", "\n", "\n", "", "solved", "=", "planner", ".", "solve", "(", "timeout", ")", "\n", "\n", "if", "not", "solved", ":", "\n", "            ", "self", ".", "_log", "(", "\"Could not find plan\"", ")", "\n", "return", "None", "\n", "", "objective", "=", "pdef", ".", "getOptimizationObjective", "(", ")", "\n", "if", "objective", "is", "not", "None", ":", "\n", "            ", "cost", "=", "(", "\n", "pdef", ".", "getSolutionPath", "(", ")", "\n", ".", "cost", "(", "pdef", ".", "getOptimizationObjective", "(", ")", ")", "\n", ".", "value", "(", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "cost", "=", "np", ".", "inf", "\n", "\n", "", "self", ".", "_log", "(", "\n", "\"Got a path of length %.2f and cost %.2f\"", "\n", "%", "(", "pdef", ".", "getSolutionPath", "(", ")", ".", "length", "(", ")", ",", "cost", ")", "\n", ")", "\n", "\n", "path", "=", "pdef", ".", "getSolutionPath", "(", ")", "\n", "joint_plan", "=", "mp_space", ".", "convert_sol", "(", "path", ")", "\n", "self", ".", "_is_approx_sol", "=", "pdef", ".", "hasApproximateSolution", "(", ")", "\n", "\n", "return", "joint_plan", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.motion_plan.is_ompl_installed": [[44, 46], ["None"], "function", ["None"], ["def", "is_ompl_installed", "(", ")", "->", "bool", ":", "\n", "    ", "return", "ou", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.simple_agents.RandomAgent.__init__": [[22, 25], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "success_distance", ":", "float", ",", "goal_sensor_uuid", ":", "str", ")", "->", "None", ":", "\n", "        ", "self", ".", "dist_threshold_to_stop", "=", "success_distance", "\n", "self", ".", "goal_sensor_uuid", "=", "goal_sensor_uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.simple_agents.RandomAgent.reset": [[26, 28], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", "->", "None", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.simple_agents.RandomAgent.is_goal_reached": [[29, 32], ["None"], "methods", ["None"], ["", "def", "is_goal_reached", "(", "self", ",", "observations", ":", "Observations", ")", "->", "bool_", ":", "\n", "        ", "dist", "=", "observations", "[", "self", ".", "goal_sensor_uuid", "]", "[", "0", "]", "\n", "return", "dist", "<=", "self", ".", "dist_threshold_to_stop", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.simple_agents.RandomAgent.act": [[33, 45], ["simple_agents.RandomAgent.is_goal_reached", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.RandomAgent.is_goal_reached"], ["", "def", "act", "(", "self", ",", "observations", ":", "Observations", ")", "->", "Dict", "[", "str", ",", "int64", "]", ":", "\n", "        ", "if", "self", ".", "is_goal_reached", "(", "observations", ")", ":", "\n", "            ", "action", "=", "HabitatSimActions", ".", "STOP", "\n", "", "else", ":", "\n", "            ", "action", "=", "np", ".", "random", ".", "choice", "(", "\n", "[", "\n", "HabitatSimActions", ".", "MOVE_FORWARD", ",", "\n", "HabitatSimActions", ".", "TURN_LEFT", ",", "\n", "HabitatSimActions", ".", "TURN_RIGHT", ",", "\n", "]", "\n", ")", "\n", "", "return", "{", "\"action\"", ":", "action", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.simple_agents.ForwardOnlyAgent.act": [[48, 54], ["simple_agents.ForwardOnlyAgent.is_goal_reached"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.RandomAgent.is_goal_reached"], ["    ", "def", "act", "(", "self", ",", "observations", ":", "Observations", ")", "->", "Dict", "[", "str", ",", "int", "]", ":", "\n", "        ", "if", "self", ".", "is_goal_reached", "(", "observations", ")", ":", "\n", "            ", "action", "=", "HabitatSimActions", ".", "STOP", "\n", "", "else", ":", "\n", "            ", "action", "=", "HabitatSimActions", ".", "MOVE_FORWARD", "\n", "", "return", "{", "\"action\"", ":", "action", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.simple_agents.RandomForwardAgent.__init__": [[57, 60], ["simple_agents.RandomAgent.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "success_distance", ":", "float", ",", "goal_sensor_uuid", ":", "str", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "success_distance", ",", "goal_sensor_uuid", ")", "\n", "self", ".", "FORWARD_PROBABILITY", "=", "0.8", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.simple_agents.RandomForwardAgent.act": [[61, 73], ["simple_agents.RandomForwardAgent.is_goal_reached", "numpy.random.uniform", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.RandomAgent.is_goal_reached"], ["", "def", "act", "(", "self", ",", "observations", ":", "Observations", ")", "->", "Dict", "[", "str", ",", "Union", "[", "int", ",", "int64", "]", "]", ":", "\n", "        ", "if", "self", ".", "is_goal_reached", "(", "observations", ")", ":", "\n", "            ", "action", "=", "HabitatSimActions", ".", "STOP", "\n", "", "else", ":", "\n", "            ", "if", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ",", "1", ")", "<", "self", ".", "FORWARD_PROBABILITY", ":", "\n", "                ", "action", "=", "HabitatSimActions", ".", "MOVE_FORWARD", "\n", "", "else", ":", "\n", "                ", "action", "=", "np", ".", "random", ".", "choice", "(", "\n", "[", "HabitatSimActions", ".", "TURN_LEFT", ",", "HabitatSimActions", ".", "TURN_RIGHT", "]", "\n", ")", "\n", "\n", "", "", "return", "{", "\"action\"", ":", "action", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.simple_agents.GoalFollower.__init__": [[76, 81], ["simple_agents.RandomAgent.__init__", "float", "numpy.deg2rad"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "success_distance", ":", "float", ",", "goal_sensor_uuid", ":", "str", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "success_distance", ",", "goal_sensor_uuid", ")", "\n", "self", ".", "pos_th", "=", "self", ".", "dist_threshold_to_stop", "\n", "self", ".", "angle_th", "=", "float", "(", "np", ".", "deg2rad", "(", "15", ")", ")", "\n", "self", ".", "random_prob", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.simple_agents.GoalFollower.normalize_angle": [[82, 88], ["None"], "methods", ["None"], ["", "def", "normalize_angle", "(", "self", ",", "angle", ":", "ndarray", ")", "->", "ndarray", ":", "\n", "        ", "if", "angle", "<", "-", "pi", ":", "\n", "            ", "angle", "=", "2.0", "*", "pi", "+", "angle", "\n", "", "if", "angle", ">", "pi", ":", "\n", "            ", "angle", "=", "-", "2.0", "*", "pi", "+", "angle", "\n", "", "return", "angle", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.simple_agents.GoalFollower.turn_towards_goal": [[89, 97], ["None"], "methods", ["None"], ["", "def", "turn_towards_goal", "(", "self", ",", "angle_to_goal", ":", "ndarray", ")", "->", "int", ":", "\n", "        ", "if", "angle_to_goal", ">", "pi", "or", "(", "\n", "(", "angle_to_goal", "<", "0", ")", "and", "(", "angle_to_goal", ">", "-", "pi", ")", "\n", ")", ":", "\n", "            ", "action", "=", "HabitatSimActions", ".", "TURN_RIGHT", "\n", "", "else", ":", "\n", "            ", "action", "=", "HabitatSimActions", ".", "TURN_LEFT", "\n", "", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.simple_agents.GoalFollower.act": [[98, 111], ["simple_agents.GoalFollower.is_goal_reached", "simple_agents.GoalFollower.normalize_angle", "numpy.array", "abs", "simple_agents.GoalFollower.turn_towards_goal"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.RandomAgent.is_goal_reached", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.simple_agents.GoalFollower.normalize_angle", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.simple_agents.GoalFollower.turn_towards_goal"], ["", "def", "act", "(", "self", ",", "observations", ":", "Observations", ")", "->", "Dict", "[", "str", ",", "int", "]", ":", "\n", "        ", "if", "self", ".", "is_goal_reached", "(", "observations", ")", ":", "\n", "            ", "action", "=", "HabitatSimActions", ".", "STOP", "\n", "", "else", ":", "\n", "            ", "angle_to_goal", "=", "self", ".", "normalize_angle", "(", "\n", "np", ".", "array", "(", "observations", "[", "self", ".", "goal_sensor_uuid", "]", "[", "1", "]", ")", "\n", ")", "\n", "if", "abs", "(", "angle_to_goal", ")", "<", "self", ".", "angle_th", ":", "\n", "                ", "action", "=", "HabitatSimActions", ".", "MOVE_FORWARD", "\n", "", "else", ":", "\n", "                ", "action", "=", "self", ".", "turn_towards_goal", "(", "angle_to_goal", ")", "\n", "\n", "", "", "return", "{", "\"action\"", ":", "action", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.simple_agents.get_all_subclasses": [[113, 116], ["set().union", "set", "cls.__subclasses__", "cls.__subclasses__", "simple_agents.get_all_subclasses", "habitat.Agent"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.set", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.simple_agents.get_all_subclasses"], ["", "", "def", "get_all_subclasses", "(", "cls", ")", ":", "\n", "    ", "return", "set", "(", "cls", ".", "__subclasses__", "(", ")", ")", ".", "union", "(", "\n", "[", "s", "for", "c", "in", "cls", ".", "__subclasses__", "(", ")", "for", "s", "in", "get_all_subclasses", "(", "c", ")", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.simple_agents.get_agent_cls": [[119, 126], ["simple_agents.get_all_subclasses"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.simple_agents.get_all_subclasses"], ["", "def", "get_agent_cls", "(", "agent_class_name", ")", ":", "\n", "    ", "sub_classes", "=", "[", "\n", "sub_class", "\n", "for", "sub_class", "in", "get_all_subclasses", "(", "habitat", ".", "Agent", ")", "\n", "if", "sub_class", ".", "__name__", "==", "agent_class_name", "\n", "]", "\n", "return", "sub_classes", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.simple_agents.main": [[128, 148], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "habitat.config.default.get_config", "habitat.Benchmark", "habitat.Benchmark.evaluate", "benchmark.evaluate.items", "simple_agents.get_agent_cls", "habitat.logger.info"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.benchmark_gym.BenchmarkGym.evaluate", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.simple_agents.get_agent_cls"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--success-distance\"", ",", "type", "=", "float", ",", "default", "=", "0.2", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--task-config\"", ",", "type", "=", "str", ",", "default", "=", "\"configs/tasks/pointnav.yaml\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--agent-class\"", ",", "type", "=", "str", ",", "default", "=", "\"GoalFollower\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "config", "=", "get_config", "(", "args", ".", "task_config", ")", "\n", "\n", "agent", "=", "get_agent_cls", "(", "args", ".", "agent_class", ")", "(", "\n", "success_distance", "=", "args", ".", "success_distance", ",", "\n", "goal_sensor_uuid", "=", "config", ".", "TASK", ".", "GOAL_SENSOR_UUID", ",", "\n", ")", "\n", "benchmark", "=", "habitat", ".", "Benchmark", "(", "config_paths", "=", "args", ".", "task_config", ")", "\n", "metrics", "=", "benchmark", ".", "evaluate", "(", "agent", ")", "\n", "\n", "for", "k", ",", "v", "in", "metrics", ".", "items", "(", ")", ":", "\n", "        ", "habitat", ".", "logger", ".", "info", "(", "\"{}: {:.3f}\"", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.benchmark_gym.BenchmarkGym.__init__": [[54, 76], ["habitat.core.environments.get_env_class", "habitat.utils.env_utils.make_env_fn", "habitat.utils.gym_adapter.HabGymWrapper"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.environments.get_env_class", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.env_utils.make_env_fn"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "config", ":", "Any", ",", "\n", "video_option", ":", "List", "[", "str", "]", ",", "\n", "video_dir", ":", "str", ",", "\n", "vid_filename_metrics", ":", "Set", "[", "str", "]", ",", "\n", "traj_save_dir", ":", "str", "=", "None", ",", "\n", "should_save_fn", "=", "None", ",", "\n", "writer", "=", "None", ",", "\n", ")", "->", "None", ":", "\n", "\n", "        ", "env_class", "=", "get_env_class", "(", "config", ".", "ENV_NAME", ")", "\n", "\n", "env", "=", "make_env_fn", "(", "env_class", "=", "env_class", ",", "config", "=", "config", ")", "\n", "self", ".", "_gym_env", "=", "HabGymWrapper", "(", "env", ",", "save_orig_obs", "=", "True", ")", "\n", "self", ".", "observation_space", "=", "self", ".", "_gym_env", ".", "observation_space", "\n", "self", ".", "_video_option", "=", "video_option", "\n", "self", ".", "_video_dir", "=", "video_dir", "\n", "self", ".", "_writer", "=", "writer", "\n", "self", ".", "_vid_filename_metrics", "=", "vid_filename_metrics", "\n", "self", ".", "_traj_save_path", "=", "traj_save_dir", "\n", "self", ".", "_should_save_fn", "=", "should_save_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.benchmark_gym.BenchmarkGym._env": [[77, 80], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "_env", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_gym_env", ".", "_env", ".", "_env", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.benchmark_gym.BenchmarkGym.evaluate": [[81, 219], ["collections.defaultdict", "tqdm.tqdm.tqdm", "tqdm.tqdm.tqdm.close", "len", "len", "benchmark_gym.BenchmarkGym._gym_env.reset", "agent.reset", "benchmark_gym.BenchmarkGym._env.get_metrics", "len", "benchmark_gym.BenchmarkGym._env.get_metrics", "benchmark_gym.BenchmarkGym.items", "os.dirname", "os.dirname", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "isinstance", "numpy.array", "torch.save", "print", "len", "len", "rgb_frames.append", "traj_obs.append", "agent.act", "traj_actions.append", "traj_dones.append", "traj_episode_ids.append", "benchmark_gym.BenchmarkGym._gym_env.direct_hab_step", "traj_rewards.append", "traj_next_obs.append", "benchmark_gym.BenchmarkGym._should_save_fn", "habitat_baselines.utils.common.batch_obs.extend", "all_dones.extend", "all_rewards.extend", "habitat_baselines.utils.common.batch_obs.extend", "all_actions.extend", "all_episode_ids.extend", "tqdm.tqdm.tqdm.update", "isinstance", "habitat_baselines.utils.common.generate_video", "habitat_baselines.utils.common.batch_obs", "habitat_baselines.utils.common.batch_obs", "agg_metrics.items", "benchmark_gym.BenchmarkGym._gym_env.render", "copy.deepcopy", "int", "rgb_frames.append", "sum", "v.items", "benchmark_gym.compress_action", "torch.FloatTensor", "torch.FloatTensor", "torch.tensor", "torch.tensor", "benchmark_gym.BenchmarkGym._gym_env.render", "benchmark_gym.BenchmarkGym.items", "str"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.close", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env.get_metrics", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env.get_metrics", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.save", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.policy.NetPolicy.act", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.il.metrics.Metric.update", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.generate_video", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.batch_obs", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.batch_obs", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.render", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.benchmark_gym.compress_action", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.mp_sim.HabMpSim.render"], ["", "def", "evaluate", "(", "\n", "self", ",", "\n", "agent", ":", "\"Agent\"", ",", "\n", "num_episodes", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", ")", "->", "Dict", "[", "str", ",", "float", "]", ":", "\n", "        ", "if", "num_episodes", "is", "None", ":", "\n", "            ", "num_episodes", "=", "len", "(", "self", ".", "_env", ".", "episodes", ")", "\n", "", "else", ":", "\n", "            ", "assert", "num_episodes", "<=", "len", "(", "self", ".", "_env", ".", "episodes", ")", ",", "(", "\n", "\"num_episodes({}) is larger than number of episodes \"", "\n", "\"in environment ({})\"", ".", "format", "(", "\n", "num_episodes", ",", "len", "(", "self", ".", "_env", ".", "episodes", ")", "\n", ")", "\n", ")", "\n", "\n", "", "assert", "num_episodes", ">", "0", ",", "\"num_episodes should be greater than 0\"", "\n", "\n", "agg_metrics", ":", "Dict", "=", "defaultdict", "(", "float", ")", "\n", "rgb_frames", "=", "[", "]", "\n", "should_render", "=", "len", "(", "self", ".", "_video_option", ")", ">", "0", "\n", "\n", "count_episodes", "=", "0", "\n", "all_dones", "=", "[", "]", "\n", "all_obs_l", "=", "[", "]", "\n", "all_next_obs_l", "=", "[", "]", "\n", "all_actions", "=", "[", "]", "\n", "all_episode_ids", "=", "[", "]", "\n", "all_rewards", "=", "[", "]", "\n", "\n", "traj_obs", "=", "[", "]", "\n", "traj_dones", "=", "[", "]", "\n", "traj_next_obs", "=", "[", "]", "\n", "traj_actions", "=", "[", "]", "\n", "traj_episode_ids", "=", "[", "]", "\n", "traj_rewards", "=", "[", "]", "\n", "pbar", "=", "tqdm", "(", "total", "=", "num_episodes", ")", "\n", "\n", "while", "count_episodes", "<", "num_episodes", ":", "\n", "            ", "observations", "=", "self", ".", "_gym_env", ".", "reset", "(", ")", "\n", "agent", ".", "reset", "(", ")", "\n", "if", "should_render", ":", "\n", "                ", "rgb_frames", ".", "append", "(", "self", ".", "_gym_env", ".", "render", "(", ")", ")", "\n", "\n", "", "done", "=", "False", "\n", "\n", "while", "not", "done", ":", "\n", "                ", "traj_obs", ".", "append", "(", "observations", ")", "\n", "\n", "action", "=", "agent", ".", "act", "(", "self", ".", "_gym_env", ".", "orig_obs", ")", "\n", "traj_actions", ".", "append", "(", "copy", ".", "deepcopy", "(", "action", ")", ")", "\n", "traj_dones", ".", "append", "(", "False", ")", "\n", "traj_episode_ids", ".", "append", "(", "\n", "int", "(", "self", ".", "_env", ".", "current_episode", ".", "episode_id", ")", "\n", ")", "\n", "\n", "observations", ",", "reward", ",", "done", ",", "_", "=", "self", ".", "_gym_env", ".", "direct_hab_step", "(", "\n", "action", "\n", ")", "\n", "traj_rewards", ".", "append", "(", "reward", ")", "\n", "\n", "traj_next_obs", ".", "append", "(", "observations", ")", "\n", "\n", "if", "should_render", ":", "\n", "                    ", "rgb_frames", ".", "append", "(", "self", ".", "_gym_env", ".", "render", "(", ")", ")", "\n", "\n", "", "", "traj_dones", "[", "-", "1", "]", "=", "True", "\n", "\n", "metrics", "=", "self", ".", "_env", ".", "get_metrics", "(", ")", "\n", "metrics", "[", "\"length\"", "]", "=", "len", "(", "traj_obs", ")", "\n", "if", "self", ".", "_should_save_fn", "is", "None", "or", "self", ".", "_should_save_fn", "(", "metrics", ")", ":", "\n", "                ", "assert", "sum", "(", "traj_dones", ")", "==", "1", "\n", "all_obs_l", ".", "extend", "(", "traj_obs", ")", "\n", "all_dones", ".", "extend", "(", "traj_dones", ")", "\n", "all_rewards", ".", "extend", "(", "traj_rewards", ")", "\n", "all_next_obs_l", ".", "extend", "(", "traj_next_obs", ")", "\n", "all_actions", ".", "extend", "(", "traj_actions", ")", "\n", "all_episode_ids", ".", "extend", "(", "traj_episode_ids", ")", "\n", "\n", "count_episodes", "+=", "1", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "\n", "", "traj_obs", "=", "[", "]", "\n", "traj_dones", "=", "[", "]", "\n", "traj_next_obs", "=", "[", "]", "\n", "traj_actions", "=", "[", "]", "\n", "traj_episode_ids", "=", "[", "]", "\n", "traj_rewards", "=", "[", "]", "\n", "\n", "metrics", "=", "self", ".", "_env", ".", "get_metrics", "(", ")", "\n", "for", "m", ",", "v", "in", "metrics", ".", "items", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "                    ", "for", "sub_m", ",", "sub_v", "in", "v", ".", "items", "(", ")", ":", "\n", "                        ", "agg_metrics", "[", "m", "+", "\"/\"", "+", "str", "(", "sub_m", ")", "]", "+=", "sub_v", "\n", "", "", "else", ":", "\n", "                    ", "agg_metrics", "[", "m", "]", "+=", "v", "\n", "\n", "", "", "if", "should_render", ":", "\n", "                ", "generate_video", "(", "\n", "video_option", "=", "self", ".", "_video_option", ",", "\n", "video_dir", "=", "self", ".", "_video_dir", ",", "\n", "images", "=", "rgb_frames", ",", "\n", "episode_id", "=", "self", ".", "_env", ".", "current_episode", ".", "episode_id", ",", "\n", "checkpoint_idx", "=", "0", ",", "\n", "metrics", "=", "{", "\n", "k", ":", "v", "\n", "for", "k", ",", "v", "in", "metrics", ".", "items", "(", ")", "\n", "if", "k", "in", "self", ".", "_vid_filename_metrics", "\n", "}", ",", "\n", "tb_writer", "=", "self", ".", "_writer", ",", "\n", "verbose", "=", "False", ",", "\n", ")", "\n", "\n", "", "", "if", "self", ".", "_traj_save_path", "is", "not", "None", ":", "\n", "            ", "save_dir", "=", "osp", ".", "dirname", "(", "self", ".", "_traj_save_path", ")", "\n", "os", ".", "makedirs", "(", "save_dir", ",", "exist_ok", "=", "True", ")", "\n", "if", "isinstance", "(", "self", ".", "_gym_env", ".", "observation_space", ",", "spaces", ".", "Dict", ")", ":", "\n", "                ", "all_obs_l", "=", "batch_obs", "(", "all_obs_l", ")", "# type:ignore", "\n", "all_next_obs_l", "=", "batch_obs", "(", "all_next_obs_l", ")", "# type:ignore", "\n", "", "compressed_actions", "=", "np", ".", "array", "(", "\n", "[", "compress_action", "(", "action", ")", "for", "action", "in", "all_actions", "]", "\n", ")", "\n", "torch", ".", "save", "(", "\n", "{", "\n", "\"done\"", ":", "torch", ".", "FloatTensor", "(", "all_dones", ")", ",", "\n", "\"obs\"", ":", "all_obs_l", ",", "\n", "\"next_obs\"", ":", "all_next_obs_l", ",", "\n", "\"rewards\"", ":", "torch", ".", "FloatTensor", "(", "all_rewards", ")", ",", "\n", "\"episode_ids\"", ":", "torch", ".", "tensor", "(", "all_episode_ids", ")", ",", "\n", "\"actions\"", ":", "torch", ".", "tensor", "(", "compressed_actions", ")", ",", "\n", "}", ",", "\n", "self", ".", "_traj_save_path", ",", "\n", ")", "\n", "print", "(", "f\"Saved trajectories to {self._traj_save_path}\"", ")", "\n", "\n", "", "avg_metrics", "=", "{", "k", ":", "v", "/", "count_episodes", "for", "k", ",", "v", "in", "agg_metrics", ".", "items", "(", ")", "}", "\n", "pbar", ".", "close", "(", ")", "\n", "\n", "return", "avg_metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.benchmark_gym.RearrangePPOAgent.__init__": [[222, 254], ["habitat_baselines.rl.ddppo.policy.PointNavResNetPolicy.from_config", "benchmark_gym.RearrangePPOAgent.actor_critic.to", "torch.cuda.is_available", "torch.device", "torch.device", "torch.load", "benchmark_gym.RearrangePPOAgent.actor_critic.load_state_dict", "habitat.logger.error", "ckpt[].items", "len"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.Equirect2CubeMap.from_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.load"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "obs_space", ",", "action_space", ")", "->", "None", ":", "\n", "        ", "self", ".", "device", "=", "(", "\n", "torch", ".", "device", "(", "\"cuda:{}\"", ".", "format", "(", "config", ".", "PTH_GPU_ID", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "else", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", ")", "\n", "self", ".", "hidden_size", "=", "config", ".", "RL", ".", "PPO", ".", "hidden_size", "\n", "\n", "self", ".", "actor_critic", "=", "PointNavResNetPolicy", ".", "from_config", "(", "\n", "config", ",", "obs_space", ",", "action_space", "\n", ")", "\n", "self", ".", "action_space", "=", "action_space", "\n", "self", ".", "actor_critic", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "config", ".", "MODEL_PATH", ":", "\n", "            ", "ckpt", "=", "torch", ".", "load", "(", "config", ".", "MODEL_PATH", ",", "map_location", "=", "self", ".", "device", ")", "\n", "#  Filter only actor_critic weights", "\n", "self", ".", "actor_critic", ".", "load_state_dict", "(", "\n", "{", "# type: ignore", "\n", "k", "[", "len", "(", "\"actor_critic.\"", ")", ":", "]", ":", "v", "\n", "for", "k", ",", "v", "in", "ckpt", "[", "\"state_dict\"", "]", ".", "items", "(", ")", "\n", "if", "\"actor_critic\"", "in", "k", "\n", "}", "\n", ")", "\n", "\n", "", "else", ":", "\n", "            ", "habitat", ".", "logger", ".", "error", "(", "\n", "\"Model checkpoint wasn't loaded, evaluating \"", "\"a random model.\"", "\n", ")", "\n", "\n", "", "self", ".", "test_recurrent_hidden_states", ":", "Optional", "[", "torch", ".", "Tensor", "]", "=", "None", "\n", "self", ".", "not_done_masks", ":", "Optional", "[", "torch", ".", "Tensor", "]", "=", "None", "\n", "self", ".", "prev_actions", ":", "Optional", "[", "torch", ".", "Tensor", "]", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.benchmark_gym.RearrangePPOAgent.reset": [[255, 262], ["super().reset", "torch.zeros", "habitat_baselines.utils.common.get_num_actions"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.get_num_actions"], ["", "def", "reset", "(", "self", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "reset", "(", ")", "\n", "self", ".", "prev_actions", "=", "torch", ".", "zeros", "(", "\n", "1", ",", "\n", "get_num_actions", "(", "self", ".", "action_space", ")", ",", "\n", "dtype", "=", "torch", ".", "float32", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.benchmark_gym.RearrangePPOAgent.act": [[264, 285], ["habitat_baselines.utils.common.batch_obs", "habitat_baselines.utils.common.action_array_to_dict", "torch.no_grad", "benchmark_gym.RearrangePPOAgent.actor_critic.act", "benchmark_gym.RearrangePPOAgent.not_done_masks.fill_", "benchmark_gym.RearrangePPOAgent.prev_actions.copy_"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.batch_obs", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.action_array_to_dict", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.policy.NetPolicy.act"], ["", "def", "act", "(", "self", ",", "observations", ")", ":", "\n", "        ", "batch", "=", "batch_obs", "(", "[", "observations", "]", ",", "device", "=", "self", ".", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "(", "\n", "_", ",", "\n", "actions", ",", "\n", "_", ",", "\n", "self", ".", "test_recurrent_hidden_states", ",", "\n", ")", "=", "self", ".", "actor_critic", ".", "act", "(", "\n", "batch", ",", "\n", "self", ".", "test_recurrent_hidden_states", ",", "\n", "self", ".", "prev_actions", ",", "\n", "self", ".", "not_done_masks", ",", "\n", "deterministic", "=", "False", ",", "\n", ")", "\n", "#  Make masks not done till reset (end of episode) will be called", "\n", "self", ".", "not_done_masks", ".", "fill_", "(", "True", ")", "\n", "self", ".", "prev_actions", ".", "copy_", "(", "actions", ")", "# type: ignore", "\n", "", "action", "=", "action_array_to_dict", "(", "self", ".", "action_space", ",", "actions", "[", "0", "]", ")", "\n", "\n", "return", "action", "[", "\"action\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.benchmark_gym.compress_action": [[41, 51], ["numpy.concatenate"], "function", ["None"], ["def", "compress_action", "(", "action", ")", ":", "\n", "    ", "if", "\"grip_action\"", "in", "action", "[", "\"action_args\"", "]", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "\n", "[", "\n", "action", "[", "\"action_args\"", "]", "[", "\"arm_action\"", "]", ",", "\n", "action", "[", "\"action_args\"", "]", "[", "\"grip_action\"", "]", ",", "\n", "]", "\n", ")", "\n", "", "else", ":", "\n", "        ", "return", "action", "[", "\"action_args\"", "]", "[", "\"arm_action\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.benchmark_gym.main": [[287, 379], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "habitat_baselines.config.default.get_config", "benchmark_gym.BenchmarkGym", "benchmark_gym.BenchmarkGym.evaluate", "benchmark.evaluate.items", "habitat_baselines.agents.mp_agents.IkMoveArm", "habitat.logger.info", "habitat_baselines.agents.mp_agents.AgentComposition", "habitat_baselines.config.default.get_config.defrost", "habitat_baselines.config.default.get_config.freeze", "benchmark_gym.RearrangePPOAgent", "ValueError", "habitat_baselines.agents.mp_agents.SpaManipPick", "habitat_baselines.agents.mp_agents.SpaResetModule", "skill._sim.get_targets"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.benchmark_gym.BenchmarkGym.evaluate", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.get_targets"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--skill-type\"", ",", "default", "=", "\"mp_reach\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-eval\"", ",", "type", "=", "int", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\"--traj-save-path\"", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\"--model-load-path\"", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--task-cfg\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"habitat_baselines/config/rearrange/spap_rearrangepick.yaml\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"opts\"", ",", "\n", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", ",", "\n", "help", "=", "\"Modify config options from command line\"", ",", "\n", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "config", "=", "get_config", "(", "args", ".", "task_cfg", ",", "args", ".", "opts", ")", "\n", "\n", "def", "should_save", "(", "metrics", ")", ":", "\n", "        ", "was_success", "=", "metrics", "[", "config", ".", "RL", ".", "SUCCESS_MEASURE", "]", "\n", "return", "was_success", "\n", "\n", "", "benchmark", "=", "BenchmarkGym", "(", "\n", "config", ",", "\n", "config", ".", "VIDEO_OPTION", ",", "\n", "config", ".", "VIDEO_DIR", ",", "\n", "{", "config", ".", "RL", ".", "SUCCESS_MEASURE", "}", ",", "\n", "args", ".", "traj_save_path", ",", "\n", "should_save_fn", "=", "should_save", ",", "\n", ")", "\n", "\n", "ac_cfg", "=", "config", ".", "TASK_CONFIG", ".", "TASK", ".", "ACTIONS", "\n", "env", "=", "benchmark", ".", "_env", "\n", "\n", "use_skill", ":", "Agent", "=", "None", "\n", "\n", "if", "args", ".", "skill_type", "==", "\"mp_reach\"", ":", "\n", "\n", "        ", "def", "get_arm_rest_args", "(", "skill", ")", ":", "\n", "            ", "return", "{", "\"robot_target\"", ":", "skill", ".", "_task", ".", "desired_resting", "}", "\n", "\n", "", "use_skill", "=", "IkMoveArm", "(", "\n", "env", ",", "\n", "config", ".", "SENSE_PLAN_ACT", ",", "\n", "ac_cfg", ",", "\n", "auto_get_args_fn", "=", "get_arm_rest_args", ",", "\n", ")", "\n", "", "elif", "args", ".", "skill_type", "==", "\"mp_pick\"", ":", "\n", "\n", "        ", "def", "get_object_args", "(", "skill", ")", ":", "\n", "            ", "target_idx", "=", "skill", ".", "_sim", ".", "get_targets", "(", ")", "[", "0", "]", "[", "0", "]", "\n", "return", "{", "\"obj\"", ":", "target_idx", "}", "\n", "\n", "", "use_skill", "=", "AgentComposition", "(", "\n", "[", "\n", "SpaManipPick", "(", "\n", "env", ",", "\n", "config", ".", "SENSE_PLAN_ACT", ",", "\n", "ac_cfg", ",", "\n", "auto_get_args_fn", "=", "get_object_args", ",", "\n", ")", ",", "\n", "SpaResetModule", "(", "\n", "env", ",", "\n", "config", ".", "SENSE_PLAN_ACT", ",", "\n", "ac_cfg", ",", "\n", "ignore_first", "=", "True", ",", "\n", "auto_get_args_fn", "=", "get_object_args", ",", "\n", ")", ",", "\n", "]", ",", "\n", "env", ",", "\n", "config", ".", "SENSE_PLAN_ACT", ",", "\n", "ac_cfg", ",", "\n", "auto_get_args_fn", "=", "get_object_args", ",", "\n", ")", "\n", "", "elif", "args", ".", "skill_type", "==", "\"nn_policy\"", ":", "\n", "        ", "config", ".", "defrost", "(", ")", "\n", "config", ".", "MODEL_PATH", "=", "args", ".", "model_load_path", "\n", "config", ".", "PTH_GPU_ID", "=", "0", "\n", "config", ".", "freeze", "(", ")", "\n", "\n", "use_skill", "=", "RearrangePPOAgent", "(", "\n", "config", ",", "benchmark", ".", "observation_space", ",", "env", ".", "action_space", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f\"Unrecognized skill {args.skill_type}\"", ")", "\n", "\n", "", "metrics", "=", "benchmark", ".", "evaluate", "(", "use_skill", ",", "args", ".", "num_eval", ")", "\n", "for", "k", ",", "v", "in", "metrics", ".", "items", "(", ")", ":", "\n", "        ", "habitat", ".", "logger", ".", "info", "(", "\"{}: {:.3f}\"", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.RandomAgent.__init__": [[99, 105], ["super().__init__", "slam_agents.RandomAgent.reset"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "RandomAgent", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_actions", "=", "config", ".", "NUM_ACTIONS", "\n", "self", ".", "dist_threshold_to_stop", "=", "config", ".", "DIST_TO_STOP", "\n", "self", ".", "reset", "(", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.RandomAgent.reset": [[106, 109], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "steps", "=", "0", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.RandomAgent.update_internal_state": [[110, 114], ["None"], "methods", ["None"], ["", "def", "update_internal_state", "(", "self", ",", "habitat_observation", ")", ":", "\n", "        ", "self", ".", "obs", "=", "habitat_observation", "\n", "self", ".", "steps", "+=", "1", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.RandomAgent.is_goal_reached": [[115, 118], ["None"], "methods", ["None"], ["", "def", "is_goal_reached", "(", "self", ")", ":", "\n", "        ", "dist", "=", "self", ".", "obs", "[", "GOAL_SENSOR_UUID", "]", "[", "0", "]", "\n", "return", "dist", "<=", "self", ".", "dist_threshold_to_stop", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.RandomAgent.act": [[119, 128], ["slam_agents.RandomAgent.update_internal_state", "slam_agents.RandomAgent.is_goal_reached", "random.randint"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.ORBSLAM2Agent.update_internal_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.RandomAgent.is_goal_reached"], ["", "def", "act", "(", "self", ",", "habitat_observation", "=", "None", ",", "random_prob", "=", "1.0", ")", ":", "\n", "        ", "self", ".", "update_internal_state", "(", "habitat_observation", ")", "\n", "# Act", "\n", "# Check if we are done", "\n", "if", "self", ".", "is_goal_reached", "(", ")", ":", "\n", "            ", "action", "=", "HabitatSimActions", ".", "STOP", "\n", "", "else", ":", "\n", "            ", "action", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "num_actions", "-", "1", ")", "\n", "", "return", "{", "\"action\"", ":", "action", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.BlindAgent.__init__": [[131, 137], ["slam_agents.RandomAgent.__init__", "slam_agents.BlindAgent.reset"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BlindAgent", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "pos_th", "=", "config", ".", "DIST_TO_STOP", "\n", "self", ".", "angle_th", "=", "config", ".", "ANGLE_TH", "\n", "self", ".", "reset", "(", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.BlindAgent.decide_what_to_do": [[138, 157], ["habitat_baselines.slambased.reprojection.angle_to_pi_2_minus_pi_2", "numpy.array", "abs"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.reprojection.angle_to_pi_2_minus_pi_2"], ["", "def", "decide_what_to_do", "(", "self", ")", ":", "\n", "        ", "distance_to_goal", "=", "self", ".", "obs", "[", "GOAL_SENSOR_UUID", "]", "[", "0", "]", "\n", "angle_to_goal", "=", "norm_ang", "(", "np", ".", "array", "(", "self", ".", "obs", "[", "GOAL_SENSOR_UUID", "]", "[", "1", "]", ")", ")", "\n", "command", "=", "HabitatSimActions", ".", "STOP", "\n", "if", "distance_to_goal", "<=", "self", ".", "pos_th", ":", "\n", "            ", "return", "command", "\n", "", "if", "abs", "(", "angle_to_goal", ")", "<", "self", ".", "angle_th", ":", "\n", "            ", "command", "=", "HabitatSimActions", ".", "MOVE_FORWARD", "\n", "", "else", ":", "\n", "            ", "if", "(", "angle_to_goal", ">", "0", ")", "and", "(", "angle_to_goal", "<", "pi", ")", ":", "\n", "                ", "command", "=", "HabitatSimActions", ".", "TURN_LEFT", "\n", "", "elif", "(", "angle_to_goal", ">", "pi", ")", "or", "(", "\n", "angle_to_goal", "<", "0", "and", "angle_to_goal", ">", "-", "pi", "\n", ")", ":", "\n", "                ", "command", "=", "HabitatSimActions", ".", "TURN_RIGHT", "\n", "", "else", ":", "\n", "                ", "command", "=", "HabitatSimActions", ".", "TURN_LEFT", "\n", "\n", "", "", "return", "command", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.BlindAgent.act": [[158, 171], ["slam_agents.BlindAgent.update_internal_state", "slam_agents.BlindAgent.is_goal_reached", "slam_agents.BlindAgent.decide_what_to_do", "random.randint", "numpy.random.uniform"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.ORBSLAM2Agent.update_internal_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.RandomAgent.is_goal_reached", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.ORBSLAM2Agent.decide_what_to_do"], ["", "def", "act", "(", "self", ",", "habitat_observation", "=", "None", ",", "random_prob", "=", "0.1", ")", ":", "\n", "        ", "self", ".", "update_internal_state", "(", "habitat_observation", ")", "\n", "# Act", "\n", "if", "self", ".", "is_goal_reached", "(", ")", ":", "\n", "            ", "return", "HabitatSimActions", ".", "STOP", "\n", "", "command", "=", "self", ".", "decide_what_to_do", "(", ")", "\n", "random_action", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "num_actions", "-", "1", ")", "\n", "act_randomly", "=", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ",", "1", ")", "<", "random_prob", "\n", "if", "act_randomly", ":", "\n", "            ", "action", "=", "random_action", "\n", "", "else", ":", "\n", "            ", "action", "=", "command", "\n", "", "return", "{", "\"action\"", ":", "action", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.ORBSLAM2Agent.__init__": [[174, 217], ["torch.device", "slam_agents.RandomAgent.__init__", "os.path.isfile", "os.path.isfile", "orbslam2.System", "slam_agents.ORBSLAM2Agent.slam.set_use_viewer", "slam_agents.ORBSLAM2Agent.slam.initialize", "habitat_baselines.slambased.mappers.DirectDepthMapper", "habitat_baselines.slambased.path_planners.DifferentiableStarPlanner", "slam_agents.ORBSLAM2Agent.reset"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", ")", ")", ":", "# noqa: B008", "\n", "        ", "super", "(", "ORBSLAM2Agent", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_actions", "=", "config", ".", "NUM_ACTIONS", "\n", "self", ".", "dist_threshold_to_stop", "=", "config", ".", "DIST_TO_STOP", "\n", "self", ".", "slam_vocab_path", "=", "config", ".", "SLAM_VOCAB_PATH", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "self", ".", "slam_vocab_path", ")", "\n", "self", ".", "slam_settings_path", "=", "config", ".", "SLAM_SETTINGS_PATH", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "self", ".", "slam_settings_path", ")", "\n", "self", ".", "slam", "=", "orbslam2", ".", "System", "(", "\n", "self", ".", "slam_vocab_path", ",", "self", ".", "slam_settings_path", ",", "orbslam2", ".", "Sensor", ".", "RGBD", "\n", ")", "\n", "self", ".", "slam", ".", "set_use_viewer", "(", "False", ")", "\n", "self", ".", "slam", ".", "initialize", "(", ")", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "map_size_meters", "=", "config", ".", "MAP_SIZE", "\n", "self", ".", "map_cell_size", "=", "config", ".", "MAP_CELL_SIZE", "\n", "self", ".", "pos_th", "=", "config", ".", "DIST_REACHED_TH", "\n", "self", ".", "next_wp_th", "=", "config", ".", "NEXT_WAYPOINT_TH", "\n", "self", ".", "angle_th", "=", "config", ".", "ANGLE_TH", "\n", "self", ".", "obstacle_th", "=", "config", ".", "MIN_PTS_IN_OBSTACLE", "\n", "self", ".", "depth_denorm", "=", "config", ".", "DEPTH_DENORM", "\n", "self", ".", "planned_waypoints", "=", "[", "]", "\n", "self", ".", "mapper", "=", "DirectDepthMapper", "(", "\n", "camera_height", "=", "config", ".", "CAMERA_HEIGHT", ",", "\n", "near_th", "=", "config", ".", "D_OBSTACLE_MIN", ",", "\n", "far_th", "=", "config", ".", "D_OBSTACLE_MAX", ",", "\n", "h_min", "=", "config", ".", "H_OBSTACLE_MIN", ",", "\n", "h_max", "=", "config", ".", "H_OBSTACLE_MAX", ",", "\n", "map_size", "=", "config", ".", "MAP_SIZE", ",", "\n", "map_cell_size", "=", "config", ".", "MAP_CELL_SIZE", ",", "\n", "device", "=", "device", ",", "\n", ")", "\n", "self", ".", "planner", "=", "DifferentiableStarPlanner", "(", "\n", "max_steps", "=", "config", ".", "PLANNER_MAX_STEPS", ",", "\n", "preprocess", "=", "config", ".", "PREPROCESS_MAP", ",", "\n", "beta", "=", "config", ".", "BETA", ",", "\n", "device", "=", "device", ",", "\n", ")", "\n", "self", ".", "slam_to_world", "=", "1.0", "\n", "self", ".", "timestep", "=", "0.1", "\n", "self", ".", "timing", "=", "False", "\n", "self", ".", "reset", "(", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.ORBSLAM2Agent.reset": [[218, 243], ["slam_agents.RandomAgent.reset", "slam_agents.ORBSLAM2Agent.init_map2d", "slam_agents.ORBSLAM2Agent.map2DObstacles.size", "habitat_baselines.slambased.utils.generate_2dgrid().to", "slam_agents.ORBSLAM2Agent.init_pose6d", "torch.zeros", "slam_agents.ORBSLAM2Agent.slam.reset", "torch.device", "torch.cuda.empty_cache", "habitat_baselines.slambased.utils.generate_2dgrid"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.ORBSLAM2Agent.init_map2d", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.ORBSLAM2Agent.init_pose6d", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.utils.generate_2dgrid"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "super", "(", "ORBSLAM2Agent", ",", "self", ")", ".", "reset", "(", ")", "\n", "self", ".", "offset_to_goal", "=", "None", "\n", "self", ".", "tracking_is_OK", "=", "False", "\n", "self", ".", "waypointPose6D", "=", "None", "\n", "self", ".", "unseen_obstacle", "=", "False", "\n", "self", ".", "action_history", "=", "[", "]", "\n", "self", ".", "planned_waypoints", "=", "[", "]", "\n", "self", ".", "map2DObstacles", "=", "self", ".", "init_map2d", "(", ")", "\n", "n", ",", "ch", ",", "height", ",", "width", "=", "self", ".", "map2DObstacles", ".", "size", "(", ")", "\n", "self", ".", "coordinatesGrid", "=", "generate_2dgrid", "(", "height", ",", "width", ",", "False", ")", ".", "to", "(", "\n", "self", ".", "device", "\n", ")", "\n", "self", ".", "pose6D", "=", "self", ".", "init_pose6d", "(", ")", "\n", "self", ".", "action_history", "=", "[", "]", "\n", "self", ".", "pose6D_history", "=", "[", "]", "\n", "self", ".", "position_history", "=", "[", "]", "\n", "self", ".", "planned2Dpath", "=", "torch", ".", "zeros", "(", "(", "0", ")", ")", "\n", "self", ".", "slam", ".", "reset", "(", ")", "\n", "self", ".", "cur_time", "=", "0", "\n", "self", ".", "toDoList", "=", "[", "]", "\n", "self", ".", "waypoint_id", "=", "0", "\n", "if", "self", ".", "device", "!=", "torch", ".", "device", "(", "\"cpu\"", ")", ":", "\n", "            ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.ORBSLAM2Agent.update_internal_state": [[244, 290], ["slam_agents.RandomAgent.update_internal_state", "slam_agents.ORBSLAM2Agent.rgb_d_from_observation", "time.time", "time.time", "slam_agents.ORBSLAM2Agent.set_offset_to_goal", "slam_agents.ORBSLAM2Agent.mapper().to", "torch.max", "slam_agents.ORBSLAM2Agent.slam.process_image_rgbd", "slam_agents.ORBSLAM2Agent.reset", "numpy.array", "habitat_baselines.slambased.reprojection.homogenize_p().view", "slam_agents.ORBSLAM2Agent.unsqueeze().unsqueeze", "print", "print", "str", "print", "slam_agents.ORBSLAM2Agent.slam.get_trajectory_points", "len", "habitat_baselines.slambased.reprojection.get_distance", "slam_agents.ORBSLAM2Agent.mapper", "slam_agents.ORBSLAM2Agent.slam.get_tracking_state", "habitat_baselines.slambased.reprojection.homogenize_p", "slam_agents.ORBSLAM2Agent.pose6D.view", "torch.from_numpy().view().to", "torch.from_numpy().to().squeeze", "slam_agents.ORBSLAM2Agent.unsqueeze", "time.time", "time.time", "[].view().to", "habitat_baselines.slambased.reprojection.get_distance.item", "torch.from_numpy().view", "torch.from_numpy().to", "[].view", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.ORBSLAM2Agent.update_internal_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.ORBSLAM2MonodepthAgent.rgb_d_from_observation", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.ORBSLAM2Agent.set_offset_to_goal", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.reprojection.get_distance", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.reprojection.homogenize_p", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to"], ["", "def", "update_internal_state", "(", "self", ",", "habitat_observation", ")", ":", "\n", "        ", "super", "(", "ORBSLAM2Agent", ",", "self", ")", ".", "update_internal_state", "(", "habitat_observation", ")", "\n", "self", ".", "cur_time", "+=", "self", ".", "timestep", "\n", "rgb", ",", "depth", "=", "self", ".", "rgb_d_from_observation", "(", "habitat_observation", ")", "\n", "t", "=", "time", ".", "time", "(", ")", "\n", "try", ":", "\n", "            ", "self", ".", "slam", ".", "process_image_rgbd", "(", "rgb", ",", "depth", ",", "self", ".", "cur_time", ")", "\n", "if", "self", ".", "timing", ":", "\n", "                ", "print", "(", "time", ".", "time", "(", ")", "-", "t", ",", "\"ORB_SLAM2\"", ")", "\n", "", "self", ".", "tracking_is_OK", "=", "str", "(", "self", ".", "slam", ".", "get_tracking_state", "(", ")", ")", "==", "\"OK\"", "\n", "", "except", "BaseException", ":", "\n", "            ", "print", "(", "\"Warning!!!! ORBSLAM processing frame error\"", ")", "\n", "self", ".", "tracking_is_OK", "=", "False", "\n", "", "if", "not", "self", ".", "tracking_is_OK", ":", "\n", "            ", "self", ".", "reset", "(", ")", "\n", "", "t", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "set_offset_to_goal", "(", "habitat_observation", ")", "\n", "if", "self", ".", "tracking_is_OK", ":", "\n", "            ", "trajectory_history", "=", "np", ".", "array", "(", "self", ".", "slam", ".", "get_trajectory_points", "(", ")", ")", "\n", "self", ".", "pose6D", "=", "homogenize_p", "(", "\n", "torch", ".", "from_numpy", "(", "trajectory_history", "[", "-", "1", "]", ")", "[", "1", ":", "]", "\n", ".", "view", "(", "3", ",", "4", ")", "\n", ".", "to", "(", "self", ".", "device", ")", "\n", ")", ".", "view", "(", "1", ",", "4", ",", "4", ")", "\n", "self", ".", "trajectory_history", "=", "trajectory_history", "\n", "if", "len", "(", "self", ".", "position_history", ")", ">", "1", ":", "\n", "                ", "previous_step", "=", "get_distance", "(", "\n", "self", ".", "pose6D", ".", "view", "(", "4", ",", "4", ")", ",", "\n", "torch", ".", "from_numpy", "(", "self", ".", "position_history", "[", "-", "1", "]", ")", "\n", ".", "view", "(", "4", ",", "4", ")", "\n", ".", "to", "(", "self", ".", "device", ")", ",", "\n", ")", "\n", "if", "self", ".", "action_history", "[", "-", "1", "]", "==", "HabitatSimActions", ".", "MOVE_FORWARD", ":", "\n", "                    ", "self", ".", "unseen_obstacle", "=", "(", "\n", "previous_step", ".", "item", "(", ")", "<=", "0.001", "\n", ")", "# hardcoded threshold for not moving", "\n", "", "", "", "current_obstacles", "=", "self", ".", "mapper", "(", "\n", "torch", ".", "from_numpy", "(", "depth", ")", ".", "to", "(", "self", ".", "device", ")", ".", "squeeze", "(", ")", ",", "self", ".", "pose6D", "\n", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "current_obstacles", "=", "current_obstacles", "\n", "self", ".", "map2DObstacles", "=", "torch", ".", "max", "(", "\n", "self", ".", "map2DObstacles", ",", "current_obstacles", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", ")", "\n", "if", "self", ".", "timing", ":", "\n", "            ", "print", "(", "time", ".", "time", "(", ")", "-", "t", ",", "\"Mapping\"", ")", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.ORBSLAM2Agent.init_pose6d": [[291, 293], ["torch.eye().float().to", "torch.eye().float", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to"], ["", "def", "init_pose6d", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "eye", "(", "4", ")", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.ORBSLAM2Agent.map_size_in_cells": [[294, 296], ["int"], "methods", ["None"], ["", "def", "map_size_in_cells", "(", "self", ")", ":", "\n", "        ", "return", "int", "(", "self", ".", "map_size_meters", "/", "self", ".", "map_cell_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.ORBSLAM2Agent.init_map2d": [[297, 304], ["torch.zeros().float().to", "torch.zeros().float", "torch.zeros", "slam_agents.ORBSLAM2Agent.map_size_in_cells", "slam_agents.ORBSLAM2Agent.map_size_in_cells"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.ORBSLAM2Agent.map_size_in_cells", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.ORBSLAM2Agent.map_size_in_cells"], ["", "def", "init_map2d", "(", "self", ")", ":", "\n", "        ", "return", "(", "\n", "torch", ".", "zeros", "(", "\n", "1", ",", "1", ",", "self", ".", "map_size_in_cells", "(", ")", ",", "self", ".", "map_size_in_cells", "(", ")", "\n", ")", "\n", ".", "float", "(", ")", "\n", ".", "to", "(", "self", ".", "device", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.ORBSLAM2Agent.get_orientation_on_map": [[306, 312], ["slam_agents.ORBSLAM2Agent.pose6D.view", "torch.tensor"], "methods", ["None"], ["", "def", "get_orientation_on_map", "(", "self", ")", ":", "\n", "        ", "self", ".", "pose6D", "=", "self", ".", "pose6D", ".", "view", "(", "1", ",", "4", ",", "4", ")", "\n", "return", "torch", ".", "tensor", "(", "\n", "[", "\n", "[", "self", ".", "pose6D", "[", "0", ",", "0", ",", "0", "]", ",", "self", ".", "pose6D", "[", "0", ",", "0", ",", "2", "]", "]", ",", "\n", "[", "self", ".", "pose6D", "[", "0", ",", "2", ",", "0", "]", ",", "self", ".", "pose6D", "[", "0", ",", "2", ",", "2", "]", "]", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.ORBSLAM2Agent.get_position_on_map": [[315, 321], ["habitat_baselines.slambased.reprojection.project_tps_into_worldmap", "slam_agents.ORBSLAM2Agent.pose6D.view"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.reprojection.project_tps_into_worldmap"], ["", "def", "get_position_on_map", "(", "self", ",", "do_floor", "=", "True", ")", ":", "\n", "        ", "return", "project_tps_into_worldmap", "(", "\n", "self", ".", "pose6D", ".", "view", "(", "1", ",", "4", ",", "4", ")", ",", "\n", "self", ".", "map_cell_size", ",", "\n", "self", ".", "map_size_meters", ",", "\n", "do_floor", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.ORBSLAM2Agent.act": [[323, 368], ["time.time", "slam_agents.ORBSLAM2Agent.update_internal_state", "slam_agents.ORBSLAM2Agent.position_history.append", "slam_agents.ORBSLAM2Agent.is_goal_reached", "time.time", "slam_agents.ORBSLAM2Agent.plan_path", "time.time", "slam_agents.ORBSLAM2Agent.decide_what_to_do", "random.randint", "numpy.random.uniform", "slam_agents.ORBSLAM2Agent.action_history.append", "slam_agents.ORBSLAM2Agent.update_internal_state", "print", "slam_agents.ORBSLAM2Agent.pose6D.detach().cpu().numpy().reshape", "slam_agents.ORBSLAM2Agent.action_history.append", "print", "slam_agents.ORBSLAM2Agent.get_valid_waypoint_pose6d", "slam_agents.ORBSLAM2Agent.is_waypoint_reached", "slam_agents.ORBSLAM2Agent.get_valid_waypoint_pose6d", "print", "time.time", "slam_agents.ORBSLAM2Agent.pose6D.detach().cpu().numpy", "time.time", "time.time", "slam_agents.ORBSLAM2Agent.pose6D.detach().cpu", "slam_agents.ORBSLAM2Agent.pose6D.detach"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.ORBSLAM2Agent.update_internal_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.RandomAgent.is_goal_reached", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.ORBSLAM2Agent.plan_path", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.ORBSLAM2Agent.decide_what_to_do", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.ORBSLAM2Agent.update_internal_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.ORBSLAM2Agent.get_valid_waypoint_pose6d", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.ORBSLAM2Agent.is_waypoint_reached", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.ORBSLAM2Agent.get_valid_waypoint_pose6d"], ["", "def", "act", "(", "self", ",", "habitat_observation", ",", "random_prob", "=", "0.1", ")", ":", "\n", "# Update internal state", "\n", "        ", "t", "=", "time", ".", "time", "(", ")", "\n", "cc", "=", "0", "\n", "update_is_ok", "=", "self", ".", "update_internal_state", "(", "habitat_observation", ")", "\n", "while", "not", "update_is_ok", ":", "\n", "            ", "update_is_ok", "=", "self", ".", "update_internal_state", "(", "habitat_observation", ")", "\n", "cc", "+=", "1", "\n", "if", "cc", ">", "2", ":", "\n", "                ", "break", "\n", "", "", "if", "self", ".", "timing", ":", "\n", "            ", "print", "(", "time", ".", "time", "(", ")", "-", "t", ",", "\" s, update internal state\"", ")", "\n", "", "self", ".", "position_history", ".", "append", "(", "\n", "self", ".", "pose6D", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "1", ",", "4", ",", "4", ")", "\n", ")", "\n", "success", "=", "self", ".", "is_goal_reached", "(", ")", "\n", "if", "success", ":", "\n", "            ", "action", "=", "HabitatSimActions", ".", "STOP", "\n", "self", ".", "action_history", ".", "append", "(", "action", ")", "\n", "return", "{", "\"action\"", ":", "action", "}", "\n", "# Plan action", "\n", "", "t", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "planned2Dpath", ",", "self", ".", "planned_waypoints", "=", "self", ".", "plan_path", "(", ")", "\n", "if", "self", ".", "timing", ":", "\n", "            ", "print", "(", "time", ".", "time", "(", ")", "-", "t", ",", "\" s, Planning\"", ")", "\n", "", "t", "=", "time", ".", "time", "(", ")", "\n", "# Act", "\n", "if", "self", ".", "waypointPose6D", "is", "None", ":", "\n", "            ", "self", ".", "waypointPose6D", "=", "self", ".", "get_valid_waypoint_pose6d", "(", ")", "\n", "", "if", "(", "\n", "self", ".", "is_waypoint_reached", "(", "self", ".", "waypointPose6D", ")", "\n", "or", "not", "self", ".", "tracking_is_OK", "\n", ")", ":", "\n", "            ", "self", ".", "waypointPose6D", "=", "self", ".", "get_valid_waypoint_pose6d", "(", ")", "\n", "self", ".", "waypoint_id", "+=", "1", "\n", "", "action", "=", "self", ".", "decide_what_to_do", "(", ")", "\n", "# May be random?", "\n", "random_action", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "num_actions", "-", "1", ")", "\n", "what_to_do", "=", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ",", "1", ")", "\n", "if", "what_to_do", "<", "random_prob", ":", "\n", "            ", "action", "=", "random_action", "\n", "", "if", "self", ".", "timing", ":", "\n", "            ", "print", "(", "time", ".", "time", "(", ")", "-", "t", ",", "\" s, get action\"", ")", "\n", "", "self", ".", "action_history", ".", "append", "(", "action", ")", "\n", "return", "{", "\"action\"", ":", "action", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.ORBSLAM2Agent.is_waypoint_good": [[369, 374], ["slam_agents.ORBSLAM2Agent.pose6D.squeeze", "habitat_baselines.slambased.reprojection.get_distance", "valid.item"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.reprojection.get_distance"], ["", "def", "is_waypoint_good", "(", "self", ",", "pose6d", ")", ":", "\n", "        ", "p_init", "=", "self", ".", "pose6D", ".", "squeeze", "(", ")", "\n", "dist_diff", "=", "get_distance", "(", "p_init", ",", "pose6d", ")", "\n", "valid", "=", "dist_diff", ">", "self", ".", "next_wp_th", "\n", "return", "valid", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.ORBSLAM2Agent.is_waypoint_reached": [[375, 380], ["slam_agents.ORBSLAM2Agent.pose6D.squeeze", "habitat_baselines.slambased.reprojection.get_distance", "reached.item"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.reprojection.get_distance"], ["", "def", "is_waypoint_reached", "(", "self", ",", "pose6d", ")", ":", "\n", "        ", "p_init", "=", "self", ".", "pose6D", ".", "squeeze", "(", ")", "\n", "dist_diff", "=", "get_distance", "(", "p_init", ",", "pose6d", ")", "\n", "reached", "=", "dist_diff", "<=", "self", ".", "pos_th", "\n", "return", "reached", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.ORBSLAM2Agent.get_waypoint_dist_dir": [[381, 395], ["habitat_baselines.slambased.reprojection.get_direction", "habitat_baselines.slambased.reprojection.get_distance", "torch.cat", "slam_agents.ORBSLAM2Agent.pose6D.squeeze", "slam_agents.ORBSLAM2Agent.waypointPose6D.squeeze", "slam_agents.ORBSLAM2Agent.pose6D.squeeze", "slam_agents.ORBSLAM2Agent.waypointPose6D.squeeze", "habitat_baselines.slambased.reprojection.get_distance.view", "torch.sin().view", "torch.cos().view", "torch.sin", "torch.cos"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.reprojection.get_direction", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.reprojection.get_distance"], ["", "def", "get_waypoint_dist_dir", "(", "self", ")", ":", "\n", "        ", "angle", "=", "get_direction", "(", "\n", "self", ".", "pose6D", ".", "squeeze", "(", ")", ",", "self", ".", "waypointPose6D", ".", "squeeze", "(", ")", ",", "0", ",", "0", "\n", ")", "\n", "dist", "=", "get_distance", "(", "\n", "self", ".", "pose6D", ".", "squeeze", "(", ")", ",", "self", ".", "waypointPose6D", ".", "squeeze", "(", ")", "\n", ")", "\n", "return", "torch", ".", "cat", "(", "\n", "[", "\n", "dist", ".", "view", "(", "1", ",", "1", ")", ",", "\n", "torch", ".", "sin", "(", "angle", ")", ".", "view", "(", "1", ",", "1", ")", ",", "\n", "torch", ".", "cos", "(", "angle", ")", ".", "view", "(", "1", ",", "1", ")", ",", "\n", "]", ",", "\n", "dim", "=", "1", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.ORBSLAM2Agent.get_valid_waypoint_pose6d": [[397, 407], ["slam_agents.ORBSLAM2Agent.is_waypoint_good", "len", "slam_agents.ORBSLAM2Agent.estimatedGoalPos6D.squeeze"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.ORBSLAM2Agent.is_waypoint_good"], ["", "def", "get_valid_waypoint_pose6d", "(", "self", ")", ":", "\n", "        ", "p_next", "=", "self", ".", "planned_waypoints", "[", "0", "]", "\n", "while", "not", "self", ".", "is_waypoint_good", "(", "p_next", ")", ":", "\n", "            ", "if", "len", "(", "self", ".", "planned_waypoints", ")", ">", "1", ":", "\n", "                ", "self", ".", "planned_waypoints", "=", "self", ".", "planned_waypoints", "[", "1", ":", "]", "\n", "p_next", "=", "self", ".", "planned_waypoints", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "p_next", "=", "self", ".", "estimatedGoalPos6D", ".", "squeeze", "(", ")", "\n", "break", "\n", "", "", "return", "p_next", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.ORBSLAM2Agent.set_offset_to_goal": [[408, 427], ["torch.from_numpy().float().to", "habitat_baselines.slambased.reprojection.habitat_goalpos_to_mapgoal_pos", "slam_agents.ORBSLAM2Agent.pose6D.squeeze", "habitat_baselines.slambased.reprojection.planned_path2tps().to", "torch.from_numpy().float", "habitat_baselines.slambased.reprojection.planned_path2tps", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.reprojection.habitat_goalpos_to_mapgoal_pos", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.reprojection.planned_path2tps"], ["", "def", "set_offset_to_goal", "(", "self", ",", "observation", ")", ":", "\n", "        ", "self", ".", "offset_to_goal", "=", "(", "\n", "torch", ".", "from_numpy", "(", "observation", "[", "GOAL_SENSOR_UUID", "]", ")", "\n", ".", "float", "(", ")", "\n", ".", "to", "(", "self", ".", "device", ")", "\n", ")", "\n", "self", ".", "estimatedGoalPos2D", "=", "habitat_goalpos_to_mapgoal_pos", "(", "\n", "self", ".", "offset_to_goal", ",", "\n", "self", ".", "pose6D", ".", "squeeze", "(", ")", ",", "\n", "self", ".", "map_cell_size", ",", "\n", "self", ".", "map_size_meters", ",", "\n", ")", "\n", "self", ".", "estimatedGoalPos6D", "=", "planned_path2tps", "(", "\n", "[", "self", ".", "estimatedGoalPos2D", "]", ",", "\n", "self", ".", "map_cell_size", ",", "\n", "self", ".", "map_size_meters", ",", "\n", "1.0", ",", "\n", ")", ".", "to", "(", "self", ".", "device", ")", "[", "0", "]", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.ORBSLAM2Agent.rgb_d_from_observation": [[428, 434], ["None"], "methods", ["None"], ["", "def", "rgb_d_from_observation", "(", "self", ",", "habitat_observation", ")", ":", "\n", "        ", "rgb", "=", "habitat_observation", "[", "\"rgb\"", "]", "\n", "depth", "=", "None", "\n", "if", "\"depth\"", "in", "habitat_observation", ":", "\n", "            ", "depth", "=", "self", ".", "depth_denorm", "*", "habitat_observation", "[", "\"depth\"", "]", "\n", "", "return", "rgb", ",", "depth", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.ORBSLAM2Agent.prev_plan_is_not_valid": [[435, 444], ["torch.cat().detach().cpu().view", "len", "slam_agents.ORBSLAM2Agent.map2DObstacles.squeeze().detach", "binary_map[].long().sum().item", "torch.cat().detach().cpu", "slam_agents.ORBSLAM2Agent.map2DObstacles.squeeze", "binary_map[].long().sum", "torch.cat().detach", "binary_map[].long", "torch.cat", "pp[].long", "pp[].long"], "methods", ["None"], ["", "def", "prev_plan_is_not_valid", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "planned2Dpath", ")", "==", "0", ":", "\n", "            ", "return", "True", "\n", "", "pp", "=", "torch", ".", "cat", "(", "self", ".", "planned2Dpath", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "view", "(", "-", "1", ",", "2", ")", "\n", "binary_map", "=", "self", ".", "map2DObstacles", ".", "squeeze", "(", ")", ".", "detach", "(", ")", ">=", "self", ".", "obstacle_th", "\n", "obstacles_on_path", "=", "(", "\n", "binary_map", "[", "pp", "[", ":", ",", "0", "]", ".", "long", "(", ")", ",", "pp", "[", ":", ",", "1", "]", ".", "long", "(", ")", "]", "\n", ")", ".", "long", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", ">", "0", "\n", "return", "obstacles_on_path", "# obstacles_nearby or  obstacles_on_path", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.ORBSLAM2Agent.rawmap2_planner_ready": [[445, 453], ["torch.relu", "torch.nn.functional.max_pool2d", "float", "torch.clamp"], "methods", ["None"], ["", "def", "rawmap2_planner_ready", "(", "self", ",", "rawmap", ",", "start_map", ",", "goal_map", ")", ":", "\n", "        ", "map1", "=", "(", "rawmap", "/", "float", "(", "self", ".", "obstacle_th", ")", ")", "**", "2", "\n", "map1", "=", "(", "\n", "torch", ".", "clamp", "(", "map1", ",", "min", "=", "0", ",", "max", "=", "1.0", ")", "\n", "-", "start_map", "\n", "-", "F", ".", "max_pool2d", "(", "goal_map", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", ")", "\n", "return", "torch", ".", "relu", "(", "map1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.ORBSLAM2Agent.plan_path": [[454, 492], ["time.time", "slam_agents.ORBSLAM2Agent.get_position_on_map", "torch.zeros_like().to", "torch.zeros_like().to", "slam_agents.ORBSLAM2Agent.planner", "time.time", "habitat_baselines.slambased.reprojection.planned_path2tps().to", "slam_agents.ORBSLAM2Agent.rawmap2_planner_ready().to", "slam_agents.ORBSLAM2Agent.coordinatesGrid.to", "torch.zeros_like().to.to", "torch.zeros_like().to.to", "len", "print", "slam_agents.ORBSLAM2Agent.prev_plan_is_not_valid", "len", "torch.zeros_like", "torch.zeros_like", "habitat_baselines.slambased.reprojection.planned_path2tps", "current_pos[].long", "current_pos[].long", "slam_agents.ORBSLAM2Agent.estimatedGoalPos2D[].long", "slam_agents.ORBSLAM2Agent.estimatedGoalPos2D[].long", "slam_agents.ORBSLAM2Agent.rawmap2_planner_ready", "time.time"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.ORBSLAM2Agent.get_position_on_map", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.ORBSLAM2Agent.prev_plan_is_not_valid", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.reprojection.planned_path2tps", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.ORBSLAM2Agent.rawmap2_planner_ready"], ["", "def", "plan_path", "(", "self", ",", "overwrite", "=", "False", ")", ":", "\n", "        ", "t", "=", "time", ".", "time", "(", ")", "\n", "if", "(", "\n", "(", "not", "self", ".", "prev_plan_is_not_valid", "(", ")", ")", "\n", "and", "(", "not", "overwrite", ")", "\n", "and", "(", "len", "(", "self", ".", "planned_waypoints", ")", ">", "0", ")", "\n", ")", ":", "\n", "            ", "return", "self", ".", "planned2Dpath", ",", "self", ".", "planned_waypoints", "\n", "", "self", ".", "waypointPose6D", "=", "None", "\n", "current_pos", "=", "self", ".", "get_position_on_map", "(", ")", "\n", "start_map", "=", "torch", ".", "zeros_like", "(", "self", ".", "map2DObstacles", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "start_map", "[", "\n", "0", ",", "0", ",", "current_pos", "[", "0", ",", "0", "]", ".", "long", "(", ")", ",", "current_pos", "[", "0", ",", "1", "]", ".", "long", "(", ")", "\n", "]", "=", "1.0", "\n", "goal_map", "=", "torch", ".", "zeros_like", "(", "self", ".", "map2DObstacles", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "goal_map", "[", "\n", "0", ",", "\n", "0", ",", "\n", "self", ".", "estimatedGoalPos2D", "[", "0", ",", "0", "]", ".", "long", "(", ")", ",", "\n", "self", ".", "estimatedGoalPos2D", "[", "0", ",", "1", "]", ".", "long", "(", ")", ",", "\n", "]", "=", "1.0", "\n", "path", ",", "cost", "=", "self", ".", "planner", "(", "\n", "self", ".", "rawmap2_planner_ready", "(", "\n", "self", ".", "map2DObstacles", ",", "start_map", ",", "goal_map", "\n", ")", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "self", ".", "coordinatesGrid", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "goal_map", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "start_map", ".", "to", "(", "self", ".", "device", ")", ",", "\n", ")", "\n", "if", "len", "(", "path", ")", "==", "0", ":", "\n", "            ", "return", "path", ",", "[", "]", "\n", "", "if", "self", ".", "timing", ":", "\n", "            ", "print", "(", "time", ".", "time", "(", ")", "-", "t", ",", "\" s, Planning\"", ")", "\n", "", "t", "=", "time", ".", "time", "(", ")", "\n", "planned_waypoints", "=", "planned_path2tps", "(", "\n", "path", ",", "self", ".", "map_cell_size", ",", "self", ".", "map_size_meters", ",", "1.0", ",", "False", "\n", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "return", "path", ",", "planned_waypoints", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.ORBSLAM2Agent.planner_prediction_to_command": [[493, 513], ["slam_agents.ORBSLAM2Agent.pose6D.squeeze", "habitat_baselines.slambased.reprojection.angle_to_pi_2_minus_pi_2", "habitat_baselines.slambased.reprojection.get_distance", "habitat_baselines.slambased.reprojection.get_direction", "abs"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.reprojection.angle_to_pi_2_minus_pi_2", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.reprojection.get_distance", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.reprojection.get_direction"], ["", "def", "planner_prediction_to_command", "(", "self", ",", "p_next", ")", ":", "\n", "        ", "command", "=", "HabitatSimActions", ".", "STOP", "\n", "p_init", "=", "self", ".", "pose6D", ".", "squeeze", "(", ")", "\n", "d_angle_rot_th", "=", "self", ".", "angle_th", "\n", "pos_th", "=", "self", ".", "pos_th", "\n", "if", "get_distance", "(", "p_init", ",", "p_next", ")", "<=", "pos_th", ":", "\n", "            ", "return", "command", "\n", "", "d_angle", "=", "norm_ang", "(", "\n", "get_direction", "(", "p_init", ",", "p_next", ",", "ang_th", "=", "d_angle_rot_th", ",", "pos_th", "=", "pos_th", ")", "\n", ")", "\n", "if", "abs", "(", "d_angle", ")", "<", "d_angle_rot_th", ":", "\n", "            ", "command", "=", "HabitatSimActions", ".", "MOVE_FORWARD", "\n", "", "else", ":", "\n", "            ", "if", "(", "d_angle", ">", "0", ")", "and", "(", "d_angle", "<", "pi", ")", ":", "\n", "                ", "command", "=", "HabitatSimActions", ".", "TURN_LEFT", "\n", "", "elif", "(", "d_angle", ">", "pi", ")", "or", "(", "d_angle", "<", "0", "and", "d_angle", ">", "-", "pi", ")", ":", "\n", "                ", "command", "=", "HabitatSimActions", ".", "TURN_RIGHT", "\n", "", "else", ":", "\n", "                ", "command", "=", "HabitatSimActions", ".", "TURN_LEFT", "\n", "", "", "return", "command", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.ORBSLAM2Agent.decide_what_to_do": [[514, 525], ["slam_agents.ORBSLAM2Agent.is_goal_reached", "slam_agents.ORBSLAM2Agent.planner_prediction_to_command"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.RandomAgent.is_goal_reached", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.ORBSLAM2Agent.planner_prediction_to_command"], ["", "def", "decide_what_to_do", "(", "self", ")", ":", "\n", "        ", "action", "=", "None", "\n", "if", "self", ".", "is_goal_reached", "(", ")", ":", "\n", "            ", "action", "=", "HabitatSimActions", ".", "STOP", "\n", "return", "{", "\"action\"", ":", "action", "}", "\n", "", "if", "self", ".", "unseen_obstacle", ":", "\n", "            ", "command", "=", "HabitatSimActions", ".", "TURN_RIGHT", "\n", "return", "command", "\n", "", "command", "=", "HabitatSimActions", ".", "STOP", "\n", "command", "=", "self", ".", "planner_prediction_to_command", "(", "self", ".", "waypointPose6D", ")", "\n", "return", "command", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.ORBSLAM2MonodepthAgent.__init__": [[528, 585], ["torch.device", "slam_agents.ORBSLAM2Agent.__init__", "os.path.isfile", "os.path.isfile", "orbslam2.System", "slam_agents.ORBSLAM2MonodepthAgent.slam.set_use_viewer", "slam_agents.ORBSLAM2MonodepthAgent.slam.initialize", "habitat_baselines.slambased.mappers.DirectDepthMapper", "habitat_baselines.slambased.path_planners.DifferentiableStarPlanner", "habitat_baselines.slambased.monodepth.MonoDepthEstimator", "slam_agents.ORBSLAM2MonodepthAgent.reset", "os.path.isfile", "print", "slam_agents.download"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.download"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "config", ",", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", ")", ",", "# noqa: B008", "\n", "monocheckpoint", "=", "\"habitat_baselines/slambased/data/mp3d_resnet50.pth\"", ",", "\n", ")", ":", "\n", "        ", "super", "(", "ORBSLAM2MonodepthAgent", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_actions", "=", "config", ".", "NUM_ACTIONS", "\n", "self", ".", "dist_threshold_to_stop", "=", "config", ".", "DIST_TO_STOP", "\n", "self", ".", "slam_vocab_path", "=", "config", ".", "SLAM_VOCAB_PATH", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "self", ".", "slam_vocab_path", ")", "\n", "self", ".", "slam_settings_path", "=", "config", ".", "SLAM_SETTINGS_PATH", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "self", ".", "slam_settings_path", ")", "\n", "self", ".", "slam", "=", "orbslam2", ".", "System", "(", "\n", "self", ".", "slam_vocab_path", ",", "self", ".", "slam_settings_path", ",", "orbslam2", ".", "Sensor", ".", "RGBD", "\n", ")", "\n", "self", ".", "slam", ".", "set_use_viewer", "(", "False", ")", "\n", "self", ".", "slam", ".", "initialize", "(", ")", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "map_size_meters", "=", "config", ".", "MAP_SIZE", "\n", "self", ".", "map_cell_size", "=", "config", ".", "MAP_CELL_SIZE", "\n", "self", ".", "pos_th", "=", "config", ".", "DIST_REACHED_TH", "\n", "self", ".", "next_wp_th", "=", "config", ".", "NEXT_WAYPOINT_TH", "\n", "self", ".", "angle_th", "=", "config", ".", "ANGLE_TH", "\n", "self", ".", "obstacle_th", "=", "config", ".", "MIN_PTS_IN_OBSTACLE", "\n", "self", ".", "depth_denorm", "=", "config", ".", "DEPTH_DENORM", "\n", "self", ".", "planned_waypoints", "=", "[", "]", "\n", "self", ".", "mapper", "=", "DirectDepthMapper", "(", "\n", "camera_height", "=", "config", ".", "CAMERA_HEIGHT", ",", "\n", "near_th", "=", "config", ".", "D_OBSTACLE_MIN", ",", "\n", "far_th", "=", "config", ".", "D_OBSTACLE_MAX", ",", "\n", "h_min", "=", "config", ".", "H_OBSTACLE_MIN", ",", "\n", "h_max", "=", "config", ".", "H_OBSTACLE_MAX", ",", "\n", "map_size", "=", "config", ".", "MAP_SIZE", ",", "\n", "map_cell_size", "=", "config", ".", "MAP_CELL_SIZE", ",", "\n", "device", "=", "device", ",", "\n", ")", "\n", "self", ".", "planner", "=", "DifferentiableStarPlanner", "(", "\n", "max_steps", "=", "config", ".", "PLANNER_MAX_STEPS", ",", "\n", "preprocess", "=", "config", ".", "PREPROCESS_MAP", ",", "\n", "beta", "=", "config", ".", "BETA", ",", "\n", "device", "=", "device", ",", "\n", ")", "\n", "self", ".", "slam_to_world", "=", "1.0", "\n", "self", ".", "timestep", "=", "0.1", "\n", "self", ".", "timing", "=", "False", "\n", "self", ".", "checkpoint", "=", "monocheckpoint", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "self", ".", "checkpoint", ")", ":", "\n", "            ", "mp3d_url", "=", "\"http://cmp.felk.cvut.cz/~mishkdmy/navigation/mp3d_ft_monodepth_resnet50.pth\"", "\n", "# suncg_me_url = \"http://cmp.felk.cvut.cz/~mishkdmy/navigation/suncg_me_resnet.pth\"", "\n", "# suncg_mf_url = \"http://cmp.felk.cvut.cz/~mishkdmy/navigation/suncg_mf_resnet.pth\"", "\n", "url", "=", "mp3d_url", "\n", "print", "(", "\"No monodepth checkpoint found. Downloading...\"", ",", "url", ")", "\n", "download", "(", "url", ",", "self", ".", "checkpoint", ")", "\n", "", "self", ".", "monodepth", "=", "MonoDepthEstimator", "(", "self", ".", "checkpoint", ")", "\n", "self", ".", "reset", "(", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.ORBSLAM2MonodepthAgent.rgb_d_from_observation": [[586, 597], ["slam_agents.ResizePIL2", "slam_agents.ORBSLAM2MonodepthAgent.monodepth.compute_depth", "numpy.array().astype", "PIL.Image.fromarray().resize", "numpy.array", "PIL.Image.fromarray"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.ResizePIL2", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.MonoDepthEstimator.compute_depth"], ["", "def", "rgb_d_from_observation", "(", "self", ",", "habitat_observation", ")", ":", "\n", "        ", "rgb", "=", "habitat_observation", "[", "\"rgb\"", "]", "\n", "depth", "=", "ResizePIL2", "(", "\n", "self", ".", "monodepth", ".", "compute_depth", "(", "\n", "PIL", ".", "Image", ".", "fromarray", "(", "rgb", ")", ".", "resize", "(", "(", "320", ",", "320", ")", ")", "\n", ")", ",", "\n", "256", ",", "\n", ")", "# /1.75", "\n", "depth", "[", "depth", ">", "3.0", "]", "=", "0", "\n", "depth", "[", "depth", "<", "0.1", "]", "=", "0", "\n", "return", "rgb", ",", "np", ".", "array", "(", "depth", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.download": [[46, 66], ["sys.stdout.write", "open", "requests.get", "requests.get.headers.get", "f.write", "int", "requests.get.iter_content", "len", "f.write", "int", "sys.stdout.write", "sys.stdout.flush", "max", "int"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get"], ["def", "download", "(", "url", ",", "filename", ")", ":", "\n", "    ", "with", "open", "(", "filename", ",", "\"wb\"", ")", "as", "f", ":", "\n", "        ", "response", "=", "requests", ".", "get", "(", "url", ",", "stream", "=", "True", ")", "\n", "total", "=", "response", ".", "headers", ".", "get", "(", "\"content-length\"", ")", "\n", "if", "total", "is", "None", ":", "\n", "            ", "f", ".", "write", "(", "response", ".", "content", ")", "\n", "", "else", ":", "\n", "            ", "downloaded", "=", "0", "\n", "total", "=", "int", "(", "total", ")", "\n", "for", "data", "in", "response", ".", "iter_content", "(", "\n", "chunk_size", "=", "max", "(", "int", "(", "total", "/", "1000", ")", ",", "1024", "*", "1024", ")", "\n", ")", ":", "\n", "                ", "downloaded", "+=", "len", "(", "data", ")", "\n", "f", ".", "write", "(", "data", ")", "\n", "done", "=", "int", "(", "50", "*", "downloaded", "/", "total", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "\n", "\"\\r[{}{}]\"", ".", "format", "(", "\"\u2588\"", "*", "done", ",", "\".\"", "*", "(", "50", "-", "done", ")", ")", "\n", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "", "", "", "sys", ".", "stdout", ".", "write", "(", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.ResizePIL2": [[68, 71], ["PIL.Image.fromarray", "numpy.array", "PIL.Image.fromarray.resize"], "function", ["None"], ["", "def", "ResizePIL2", "(", "np_img", ",", "size", "=", "256", ")", ":", "\n", "    ", "im1", "=", "PIL", ".", "Image", ".", "fromarray", "(", "np_img", ")", "\n", "return", "np", ".", "array", "(", "im1", ".", "resize", "(", "(", "size", ",", "size", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.make_good_config_for_orbslam2": [[73, 92], ["None"], "function", ["None"], ["", "def", "make_good_config_for_orbslam2", "(", "config", ")", ":", "\n", "    ", "config", ".", "SIMULATOR", ".", "AGENT_0", ".", "SENSORS", "=", "[", "\"RGB_SENSOR\"", ",", "\"DEPTH_SENSOR\"", "]", "\n", "config", ".", "SIMULATOR", ".", "RGB_SENSOR", ".", "WIDTH", "=", "256", "\n", "config", ".", "SIMULATOR", ".", "RGB_SENSOR", ".", "HEIGHT", "=", "256", "\n", "config", ".", "SIMULATOR", ".", "DEPTH_SENSOR", ".", "WIDTH", "=", "256", "\n", "config", ".", "SIMULATOR", ".", "DEPTH_SENSOR", ".", "HEIGHT", "=", "256", "\n", "config", ".", "TRAINER", ".", "ORBSLAM2", ".", "CAMERA_HEIGHT", "=", "(", "\n", "config", ".", "SIMULATOR", ".", "DEPTH_SENSOR", ".", "POSITION", "[", "1", "]", "\n", ")", "\n", "config", ".", "TRAINER", ".", "ORBSLAM2", ".", "H_OBSTACLE_MIN", "=", "(", "\n", "0.3", "*", "config", ".", "TRAINER", ".", "ORBSLAM2", ".", "CAMERA_HEIGHT", "\n", ")", "\n", "config", ".", "TRAINER", ".", "ORBSLAM2", ".", "H_OBSTACLE_MAX", "=", "(", "\n", "1.0", "*", "config", ".", "TRAINER", ".", "ORBSLAM2", ".", "CAMERA_HEIGHT", "\n", ")", "\n", "config", ".", "TRAINER", ".", "ORBSLAM2", ".", "MIN_PTS_IN_OBSTACLE", "=", "(", "\n", "config", ".", "SIMULATOR", ".", "DEPTH_SENSOR", ".", "WIDTH", "/", "2.0", "\n", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.main": [[599, 629], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "habitat.config.default.get_config", "habitat_baselines.config.default.get_config", "habitat.config.default.get_config.defrost", "slam_agents.make_good_config_for_orbslam2", "habitat.Benchmark", "habitat.Benchmark.evaluate", "benchmark.evaluate.items", "slam_agents.BlindAgent", "habitat.logger.info", "slam_agents.ORBSLAM2Agent", "slam_agents.ORBSLAM2MonodepthAgent", "ValueError"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.slam_agents.make_good_config_for_orbslam2", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.benchmark_gym.BenchmarkGym.evaluate"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--agent-type\"", ",", "\n", "default", "=", "\"orbslam2-rgbd\"", ",", "\n", "choices", "=", "[", "\"blind\"", ",", "\"orbslam2-rgbd\"", ",", "\"orbslam2-rgb-monod\"", "]", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--task-config\"", ",", "type", "=", "str", ",", "default", "=", "\"tasks/pointnav_rgbd.yaml\"", "\n", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "config", "=", "get_config", "(", ")", "\n", "agent_config", "=", "cfg_baseline", "(", ")", "\n", "config", ".", "defrost", "(", ")", "\n", "config", ".", "BASELINE", "=", "agent_config", ".", "BASELINE", "\n", "make_good_config_for_orbslam2", "(", "config", ")", "\n", "\n", "if", "args", ".", "agent_type", "==", "\"blind\"", ":", "\n", "        ", "agent", "=", "BlindAgent", "(", "config", ".", "TRAINER", ".", "ORBSLAM2", ")", "\n", "", "elif", "args", ".", "agent_type", "==", "\"orbslam2-rgbd\"", ":", "\n", "        ", "agent", "=", "ORBSLAM2Agent", "(", "config", ".", "TRAINER", ".", "ORBSLAM2", ")", "\n", "", "elif", "args", ".", "agent_type", "==", "\"orbslam2-rgb-monod\"", ":", "\n", "        ", "agent", "=", "ORBSLAM2MonodepthAgent", "(", "config", ".", "TRAINER", ".", "ORBSLAM2", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "args", ".", "agent_type", ",", "\"is unknown type of agent\"", ")", "\n", "", "benchmark", "=", "habitat", ".", "Benchmark", "(", "args", ".", "task_config", ")", "\n", "metrics", "=", "benchmark", ".", "evaluate", "(", "agent", ")", "\n", "for", "k", ",", "v", "in", "metrics", ".", "items", "(", ")", ":", "\n", "        ", "habitat", ".", "logger", ".", "info", "(", "\"{}: {:.3f}\"", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.ParameterizedAgent.__init__": [[52, 69], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "env", ",", "\n", "config", ",", "\n", "action_config", ",", "\n", "should_auto_end", "=", "True", ",", "\n", "auto_get_args_fn", "=", "None", ",", "\n", ")", ":", "\n", "        ", "self", ".", "_should_auto_end", "=", "should_auto_end", "\n", "self", ".", "_auto_get_args_fn", "=", "auto_get_args_fn", "\n", "self", ".", "_last_info", "=", "{", "}", "\n", "\n", "self", ".", "_config", "=", "config", "\n", "self", ".", "_agent_config", "=", "action_config", "\n", "\n", "self", ".", "_sim", "=", "env", ".", "_sim", "\n", "self", ".", "_task", "=", "env", ".", "_task", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.ParameterizedAgent._end_episode": [[70, 72], ["None"], "methods", ["None"], ["", "def", "_end_episode", "(", "self", ")", ":", "\n", "        ", "self", ".", "_task", ".", "should_end", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.ParameterizedAgent._set_info": [[73, 75], ["None"], "methods", ["None"], ["", "def", "_set_info", "(", "self", ",", "k", ":", "str", ",", "v", ":", "Any", ")", "->", "None", ":", "\n", "        ", "self", ".", "_last_info", "[", "k", "]", "=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.ParameterizedAgent._has_info": [[76, 78], ["None"], "methods", ["None"], ["", "def", "_has_info", "(", "self", ",", "k", ":", "str", ")", "->", "bool", ":", "\n", "        ", "return", "k", "in", "self", ".", "_last_info", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.ParameterizedAgent.get_and_clear_info": [[79, 83], ["None"], "methods", ["None"], ["", "def", "get_and_clear_info", "(", "self", ")", "->", "Dict", "[", "str", ",", "Any", "]", ":", "\n", "        ", "ret", "=", "self", ".", "_last_info", "\n", "self", ".", "_last_info", "=", "{", "}", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.ParameterizedAgent.reset": [[84, 87], ["mp_agents.ParameterizedAgent.set_args", "mp_agents.ParameterizedAgent._auto_get_args_fn"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.ArmTargModule.set_args"], ["", "def", "reset", "(", "self", ")", "->", "None", ":", "\n", "        ", "if", "self", ".", "_auto_get_args_fn", "is", "not", "None", ":", "\n", "            ", "self", ".", "set_args", "(", "**", "self", ".", "_auto_get_args_fn", "(", "self", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.ParameterizedAgent.set_args": [[88, 90], ["None"], "methods", ["None"], ["", "", "def", "set_args", "(", "self", ",", "**", "kwargs", ")", "->", "None", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.ParameterizedAgent._log": [[91, 94], ["print", "str"], "methods", ["None"], ["", "def", "_log", "(", "self", ",", "txt", ")", ":", "\n", "        ", "if", "self", ".", "_config", ".", "VERBOSE", ":", "\n", "            ", "print", "(", "\"%s: %s\"", "%", "(", "str", "(", "self", ")", ",", "txt", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.ParameterizedAgent.act": [[95, 99], ["mp_agents.ParameterizedAgent._end_episode"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.ParameterizedAgent._end_episode"], ["", "", "def", "act", "(", "self", ",", "observations", ":", "Observations", ")", "->", "Dict", "[", "str", ",", "Any", "]", ":", "\n", "        ", "if", "self", ".", "_should_auto_end", ":", "\n", "            ", "self", ".", "_end_episode", "(", ")", "\n", "", "return", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.ParameterizedAgent.should_term": [[100, 102], ["None"], "methods", ["None"], ["", "def", "should_term", "(", "self", ",", "observations", ":", "Observations", ")", "->", "bool", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.AgentComposition.__init__": [[105, 119], ["mp_agents.ParameterizedAgent.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "skills", ",", "\n", "env", ",", "\n", "config", ",", "\n", "action_config", ",", "\n", "should_auto_end", "=", "True", ",", "\n", "auto_get_args_fn", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "env", ",", "config", ",", "action_config", ",", "should_auto_end", ",", "auto_get_args_fn", "\n", ")", "\n", "self", ".", "skills", ":", "List", "[", "ParameterizedAgent", "]", "=", "skills", "\n", "self", ".", "cur_skill", ":", "int", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.AgentComposition._set_info": [[120, 122], ["None"], "methods", ["None"], ["", "def", "_set_info", "(", "self", ",", "k", ",", "v", ")", ":", "\n", "        ", "self", ".", "_last_info", "[", "k", "]", "=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.AgentComposition._has_info": [[123, 125], ["any", "skill._has_info"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.AgentComposition._has_info"], ["", "def", "_has_info", "(", "self", ",", "k", ")", ":", "\n", "        ", "return", "any", "(", "[", "skill", ".", "_has_info", "(", "k", ")", "for", "skill", "in", "self", ".", "skills", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.AgentComposition.get_and_clear_info": [[126, 131], ["r.update", "skill.get_and_clear_info"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.il.metrics.Metric.update", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.AgentComposition.get_and_clear_info"], ["", "def", "get_and_clear_info", "(", "self", ")", ":", "\n", "        ", "r", "=", "{", "}", "\n", "for", "skill", "in", "self", ".", "skills", ":", "\n", "            ", "r", ".", "update", "(", "skill", ".", "get_and_clear_info", "(", ")", ")", "\n", "", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.AgentComposition.set_args": [[132, 138], ["mp_agents.AgentComposition.skills[].set_args"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.ArmTargModule.set_args"], ["", "def", "set_args", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_enter_kwargs", "=", "kwargs", "\n", "if", "self", ".", "_is_done_with_skills", ":", "\n", "            ", "return", "\n", "\n", "", "self", ".", "skills", "[", "self", ".", "cur_skill", "]", ".", "set_args", "(", "**", "self", ".", "_enter_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.AgentComposition._is_done_with_skills": [[139, 142], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "_is_done_with_skills", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "cur_skill", ">=", "len", "(", "self", ".", "skills", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.AgentComposition.reset": [[143, 147], ["mp_agents.ParameterizedAgent.reset", "mp_agents.AgentComposition.skills[].reset"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "reset", "(", ")", "\n", "self", ".", "cur_skill", "=", "0", "\n", "self", ".", "skills", "[", "self", ".", "cur_skill", "]", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.AgentComposition.act": [[148, 154], ["mp_agents.AgentComposition.should_term", "mp_agents.AgentComposition.skills[].act", "mp_agents.get_noop_arm_action"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.ArmTargModule.should_term", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.policy.NetPolicy.act", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.get_noop_arm_action"], ["", "def", "act", "(", "self", ",", "observations", ")", ":", "\n", "        ", "if", "self", ".", "should_term", "(", "observations", ")", ":", "\n", "            ", "return", "get_noop_arm_action", "(", "self", ".", "_sim", ",", "self", ".", "_task", ")", "\n", "\n", "", "action", "=", "self", ".", "skills", "[", "self", ".", "cur_skill", "]", ".", "act", "(", "observations", ")", "\n", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.AgentComposition.should_term": [[155, 165], ["mp_agents.AgentComposition.skills[].should_term", "len", "len", "mp_agents.AgentComposition._log", "mp_agents.AgentComposition.skills[].reset", "mp_agents.AgentComposition.skills[].set_args"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.ArmTargModule.should_term", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.ParameterizedAgent._log", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.ArmTargModule.set_args"], ["", "def", "should_term", "(", "self", ",", "observations", ")", ":", "\n", "        ", "if", "self", ".", "_is_done_with_skills", ":", "\n", "            ", "return", "True", "\n", "", "if", "self", ".", "skills", "[", "self", ".", "cur_skill", "]", ".", "should_term", "(", "observations", ")", ":", "\n", "            ", "self", ".", "cur_skill", "+=", "1", "\n", "if", "self", ".", "cur_skill", "<", "len", "(", "self", ".", "skills", ")", ":", "\n", "                ", "self", ".", "_log", "(", "f\"Moving to skill {self.skills[self.cur_skill]}\"", ")", "\n", "self", ".", "skills", "[", "self", ".", "cur_skill", "]", ".", "reset", "(", ")", "\n", "self", ".", "skills", "[", "self", ".", "cur_skill", "]", ".", "set_args", "(", "**", "self", ".", "_enter_kwargs", ")", "\n", "", "", "return", "self", ".", "cur_skill", ">=", "len", "(", "self", ".", "skills", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.ArmTargModule.__init__": [[170, 187], ["mp_agents.ParameterizedAgent.__init__", "habitat_baselines.motion_planning.motion_plan.MotionPlanner", "mp_agents.ArmTargModule._mp.set_should_render"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.motion_plan.MotionPlanner.set_should_render"], ["def", "__init__", "(", "\n", "self", ",", "\n", "env", ",", "\n", "config", ",", "\n", "action_config", ",", "\n", "should_auto_end", "=", "True", ",", "\n", "auto_get_args_fn", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "env", ",", "config", ",", "action_config", ",", "should_auto_end", ",", "auto_get_args_fn", "\n", ")", "\n", "self", ".", "_grasp_thresh", "=", "self", ".", "_agent_config", ".", "ARM_ACTION", ".", "GRASP_THRESH_DIST", "\n", "self", ".", "_viz_points", "=", "[", "]", "\n", "\n", "self", ".", "_mp", "=", "MotionPlanner", "(", "self", ".", "_sim", ",", "self", ".", "_config", ")", "\n", "self", ".", "_mp", ".", "set_should_render", "(", "self", ".", "_config", ".", "MP_RENDER", ")", "\n", "self", ".", "_enter_kwargs", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.ArmTargModule.wait_after": [[188, 191], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "wait_after", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.ArmTargModule.timeout": [[192, 195], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "timeout", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "400", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.ArmTargModule.set_args": [[196, 199], ["mp_agents.ArmTargModule._log"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.ParameterizedAgent._log"], ["", "def", "set_args", "(", "self", ",", "**", "kwargs", ")", "->", "None", ":", "\n", "        ", "self", ".", "_log", "(", "f\"Set arm targ args {kwargs}\"", ")", "\n", "self", ".", "_enter_kwargs", "=", "kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.ArmTargModule.reset": [[200, 211], ["mp_agents.ParameterizedAgent.reset", "mp_agents.ArmTargModule._log", "mp_agents.ArmTargModule._clean_viz_points"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.ParameterizedAgent._log", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.ArmTargModule._clean_viz_points"], ["", "def", "reset", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "_enter_kwargs", "=", "None", "\n", "super", "(", ")", ".", "reset", "(", ")", "\n", "self", ".", "_log", "(", "\"Entered arm targ\"", ")", "\n", "self", ".", "_plan_idx", "=", "0", "\n", "self", ".", "_term", "=", "False", "\n", "self", ".", "_clean_viz_points", "(", ")", "\n", "\n", "self", ".", "_viz_points", "=", "[", "]", "\n", "self", ".", "_plan", ":", "Any", "=", "None", "\n", "self", ".", "_has_generated_plan", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.ArmTargModule._add_debug_viz_point": [[212, 218], ["mp_agents.ArmTargModule._sim.visualize_position", "mp_agents.ArmTargModule._viz_points.append", "len"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.rearrange_sim.RearrangeSim.visualize_position"], ["", "def", "_add_debug_viz_point", "(", "self", ",", "pos", ")", ":", "\n", "        ", "pos_name", "=", "f\"arm_targ_{len(self._viz_points)}\"", "\n", "self", ".", "_sim", ".", "viz_ids", "[", "pos_name", "]", "=", "self", ".", "_sim", ".", "visualize_position", "(", "\n", "pos", ",", "self", ".", "_sim", ".", "viz_ids", "[", "pos_name", "]", "\n", ")", "\n", "self", ".", "_viz_points", ".", "append", "(", "pos_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.ArmTargModule.act": [[219, 248], ["mp_agents.ArmTargModule._get_plan_ac", "mp_agents.ArmTargModule._generate_plan", "mp_agents.get_noop_arm_action", "mp_agents.ArmTargModule._get_gripper_ac"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.IkMoveArm._get_plan_ac", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.SpaResetModule._generate_plan", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.get_noop_arm_action", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.SpaResetModule._get_gripper_ac"], ["", "def", "act", "(", "self", ",", "observations", ":", "Observations", ")", "->", "Dict", "[", "str", ",", "Any", "]", ":", "\n", "        ", "assert", "self", ".", "_enter_kwargs", "is", "not", "None", ",", "\"Need to first call `set_args`!\"", "\n", "\n", "if", "not", "self", ".", "_has_generated_plan", ":", "\n", "            ", "self", ".", "_plan", "=", "self", ".", "_generate_plan", "(", "\n", "observations", ",", "**", "self", ".", "_enter_kwargs", "\n", ")", "\n", "self", ".", "_has_generated_plan", "=", "True", "\n", "\n", "", "cur_plan_ac", "=", "self", ".", "_get_plan_ac", "(", "observations", ")", "\n", "if", "cur_plan_ac", "is", "None", ":", "\n", "            ", "self", ".", "_term", "=", "True", "\n", "return", "get_noop_arm_action", "(", "self", ".", "_sim", ",", "self", ".", "_task", ")", "\n", "\n", "", "self", ".", "_plan_idx", "+=", "1", "\n", "\n", "if", "\"grip_action\"", "in", "self", ".", "_task", ".", "action_space", ".", "spaces", "[", "\"ARM_ACTION\"", "]", ":", "\n", "            ", "grip", "=", "self", ".", "_get_gripper_ac", "(", "cur_plan_ac", ")", "\n", "return", "{", "\n", "\"action\"", ":", "\"ARM_ACTION\"", ",", "\n", "\"action_args\"", ":", "{", "\n", "\"arm_action\"", ":", "cur_plan_ac", ",", "\n", "\"grip_action\"", ":", "grip", ",", "\n", "}", ",", "\n", "}", "\n", "", "else", ":", "\n", "            ", "return", "{", "\n", "\"action\"", ":", "\"ARM_ACTION\"", ",", "\n", "\"action_args\"", ":", "{", "\"arm_action\"", ":", "cur_plan_ac", "}", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.ArmTargModule._get_plan_ac": [[250, 262], ["mp_agents.ArmTargModule._log", "mp_agents.ArmTargModule._end_episode", "len"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.ParameterizedAgent._log", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.ParameterizedAgent._end_episode"], ["", "", "def", "_get_plan_ac", "(", "self", ",", "observations", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "r\"\"\"Get the plan action for the current timestep. By default return the\n        action at the current plan index.\n        \"\"\"", "\n", "if", "self", ".", "_plan", "is", "None", ":", "\n", "            ", "self", ".", "_log", "(", "\"Planning failed\"", ")", "\n", "self", ".", "_end_episode", "(", ")", "\n", "return", "None", "\n", "", "if", "self", ".", "adjusted_plan_idx", ">=", "len", "(", "self", ".", "_plan", ")", ":", "\n", "            ", "return", "self", ".", "_plan", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_plan", "[", "self", ".", "adjusted_plan_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.ArmTargModule._internal_should_term": [[263, 265], ["None"], "methods", ["None"], ["", "", "def", "_internal_should_term", "(", "self", ",", "observations", ")", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.ArmTargModule.should_term": [[266, 289], ["mp_agents.ArmTargModule._log", "mp_agents.ArmTargModule._log", "mp_agents.ArmTargModule._internal_should_term", "mp_agents.ArmTargModule._log", "mp_agents.ArmTargModule._log", "mp_agents.ArmTargModule._on_done", "len"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.ParameterizedAgent._log", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.ParameterizedAgent._log", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.SpaManipPick._internal_should_term", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.ParameterizedAgent._log", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.ParameterizedAgent._log", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.SpaResetModule._on_done"], ["", "def", "should_term", "(", "self", ",", "observations", ":", "Observations", ")", "->", "bool", ":", "\n", "        ", "done", "=", "self", ".", "_term", "\n", "if", "(", "\n", "self", ".", "_plan", "is", "not", "None", "\n", "and", "self", ".", "adjusted_plan_idx", ">=", "len", "(", "self", ".", "_plan", ")", "+", "self", ".", "wait_after", "\n", ")", ":", "\n", "            ", "self", ".", "_log", "(", "\"Plan finished\"", ")", "\n", "done", "=", "True", "\n", "\n", "", "if", "self", ".", "_plan_idx", ">", "self", ".", "timeout", ":", "\n", "            ", "self", ".", "_log", "(", "\"Skill timed out\"", ")", "\n", "done", "=", "True", "\n", "\n", "", "if", "self", ".", "_has_generated_plan", "and", "self", ".", "_internal_should_term", "(", "\n", "observations", "\n", ")", ":", "\n", "            ", "self", ".", "_log", "(", "\"Skill requested termination\"", ")", "\n", "done", "=", "True", "\n", "\n", "", "if", "done", ":", "\n", "            ", "self", ".", "_log", "(", "\"Skill requested hard termination\"", ")", "\n", "self", ".", "_on_done", "(", ")", "\n", "", "return", "done", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.ArmTargModule._get_force_set_ee": [[290, 292], ["None"], "methods", ["None"], ["", "def", "_get_force_set_ee", "(", "self", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.ArmTargModule._on_done": [[293, 295], ["mp_agents.ArmTargModule._clean_viz_points"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.ArmTargModule._clean_viz_points"], ["", "def", "_on_done", "(", "self", ")", ":", "\n", "        ", "self", ".", "_clean_viz_points", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.ArmTargModule._clean_viz_points": [[296, 306], ["mp_agents.ArmTargModule._sim.get_rigid_object_manager", "mp_agents.ArmTargModule.remove_object_by_id"], "methods", ["None"], ["", "def", "_clean_viz_points", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "_config", ".", "VERBOSE", ":", "\n", "            ", "return", "\n", "", "rom", "=", "self", ".", "_sim", ".", "get_rigid_object_manager", "(", ")", "\n", "for", "viz_point_name", "in", "self", ".", "_viz_points", ":", "\n", "            ", "if", "self", ".", "_sim", ".", "viz_ids", "[", "viz_point_name", "]", "is", "None", ":", "\n", "                ", "continue", "\n", "", "rom", ".", "remove_object_by_id", "(", "self", ".", "_sim", ".", "viz_ids", "[", "viz_point_name", "]", ")", "\n", "del", "self", ".", "_sim", ".", "viz_ids", "[", "viz_point_name", "]", "\n", "", "self", ".", "_viz_points", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.ArmTargModule._get_gripper_ac": [[307, 314], ["None"], "methods", ["None"], ["", "def", "_get_gripper_ac", "(", "self", ",", "plan_ac", ")", "->", "float", ":", "\n", "# keep the gripper state as is.", "\n", "        ", "if", "self", ".", "_sim", ".", "robot", ".", "is_gripper_open", ":", "\n", "            ", "grip", "=", "-", "1.0", "\n", "", "else", ":", "\n", "            ", "grip", "=", "1.0", "\n", "", "return", "grip", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.ArmTargModule.adjusted_plan_idx": [[315, 318], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "adjusted_plan_idx", "(", "self", ")", "->", "bool", ":", "\n", "        ", "return", "self", ".", "_plan_idx", "//", "self", ".", "_config", ".", "RUN_FREQ", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.ArmTargModule._generate_plan": [[319, 326], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "_generate_plan", "(", "self", ",", "observations", ",", "**", "kwargs", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "r\"\"\"Gets the plan this controller will execute.\n\n        :return: Either a sequence of 3D EE targets or a sequence of arm joint\n            targets.\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.ArmTargModule._clean_mp": [[327, 331], ["mp_agents.ArmTargModule._sim._sim.remove_traj_obj"], "methods", ["None"], ["", "def", "_clean_mp", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_mp", ".", "traj_viz_id", "is", "not", "None", ":", "\n", "            ", "self", ".", "_sim", ".", "_sim", ".", "remove_traj_obj", "(", "self", ".", "_mp", ".", "traj_viz_id", ")", "\n", "self", ".", "_mp", ".", "traj_viz_id", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.IkMoveArm._get_plan_ac": [[334, 343], ["mp_agents.IkMoveArm._internal_should_term", "numpy.linalg.norm"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.SpaManipPick._internal_should_term"], ["    ", "def", "_get_plan_ac", "(", "self", ",", "observations", ")", ":", "\n", "        ", "if", "self", ".", "_internal_should_term", "(", "observations", ")", ":", "\n", "            ", "return", "None", "\n", "", "ee_pos", "=", "observations", "[", "EEPositionSensor", ".", "cls_uuid", "]", "\n", "to_target", "=", "self", ".", "_robot_target", "-", "ee_pos", "\n", "to_target", "=", "self", ".", "_config", ".", "IK_SPEED_FACTOR", "*", "(", "\n", "to_target", "/", "np", ".", "linalg", ".", "norm", "(", "to_target", ")", "\n", ")", "\n", "return", "to_target", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.IkMoveArm._on_done": [[344, 347], ["mp_agents.ArmTargModule._on_done", "mp_agents.IkMoveArm._set_info"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.SpaResetModule._on_done", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.AgentComposition._set_info"], ["", "def", "_on_done", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "_on_done", "(", ")", "\n", "self", ".", "_set_info", "(", "\"execute_ik_failure\"", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.IkMoveArm._generate_plan": [[348, 351], ["mp_agents.IkMoveArm._set_info"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.AgentComposition._set_info"], ["", "def", "_generate_plan", "(", "self", ",", "observations", ",", "robot_target", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_set_info", "(", "\"execute_ik_failure\"", ",", "1", ")", "\n", "self", ".", "_robot_target", "=", "robot_target", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.IkMoveArm._internal_should_term": [[352, 358], ["numpy.linalg.norm"], "methods", ["None"], ["", "def", "_internal_should_term", "(", "self", ",", "observations", ")", ":", "\n", "        ", "dist_to_target", "=", "np", ".", "linalg", ".", "norm", "(", "\n", "observations", "[", "\"ee_pos\"", "]", "-", "self", ".", "_robot_target", "\n", ")", "\n", "\n", "return", "dist_to_target", "<", "self", ".", "_config", ".", "IK_DIST_THRESH", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.SpaManipPick.wait_after": [[361, 364], ["None"], "methods", ["None"], ["    ", "@", "property", "\n", "def", "wait_after", "(", "self", ")", ":", "\n", "        ", "return", "5", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.SpaManipPick._internal_should_term": [[365, 374], ["observations[].item", "mp_agents.SpaManipPick._log", "mp_agents.SpaManipPick._set_info"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.ParameterizedAgent._log", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.AgentComposition._set_info"], ["", "def", "_internal_should_term", "(", "self", ",", "observations", ")", ":", "\n", "        ", "is_holding", "=", "observations", "[", "\"is_holding\"", "]", ".", "item", "(", ")", "==", "1", "\n", "if", "is_holding", ":", "\n", "            ", "self", ".", "_log", "(", "\"Robot is holding object, leaving pick\"", ")", "\n", "# Override indicating we succeeded", "\n", "self", ".", "_set_info", "(", "\"execute_pick_failure\"", ",", "0", ")", "\n", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.SpaManipPick._generate_plan": [[375, 406], ["mp_agents.SpaManipPick._set_info", "mp_agents.SpaManipPick._set_info", "mp_agents.SpaManipPick._mp.set_config", "mp_agents.SpaManipPick._mp.grasp_gen.gen_target_from_obj_idx", "mp_agents.SpaManipPick._mp.motion_plan", "mp_agents.SpaManipPick._mp.get_recent_plan_stats().items", "mp_agents.SpaManipPick._set_info", "mp_agents.SpaManipPick._set_info", "mp_agents.SpaManipPick._add_debug_viz_point", "mp_agents.SpaManipPick._set_info", "int", "int", "mp_agents.SpaManipPick._mp.get_recent_plan_stats"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.AgentComposition._set_info", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.AgentComposition._set_info", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.motion_plan.MotionPlanner.set_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.grasp_generator.GraspGenerator.gen_target_from_obj_idx", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.motion_plan.MotionPlanner.motion_plan", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.AgentComposition._set_info", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.AgentComposition._set_info", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.ArmTargModule._add_debug_viz_point", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.AgentComposition._set_info", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.motion_plan.MotionPlanner.get_recent_plan_stats"], ["", "", "def", "_generate_plan", "(", "self", ",", "observations", ",", "obj", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_set_info", "(", "\"execute_ee_to_obj_dist\"", ",", "0", ")", "\n", "self", ".", "_set_info", "(", "\"execute_ee_dist\"", ",", "0", ")", "\n", "\n", "self", ".", "_mp", ".", "set_config", "(", "\n", "self", ".", "_config", ".", "MP_MARGIN", ",", "\n", "self", ".", "_config", ".", "MP_OBJ", ",", "\n", "self", ".", "_grasp_thresh", ",", "\n", "self", ".", "_config", ".", "N_GRASPS", ",", "\n", "self", ".", "_config", ",", "\n", ")", "\n", "obj_idx", "=", "self", ".", "_sim", ".", "scene_obj_ids", "[", "obj", "]", "\n", "robo_targ", "=", "self", ".", "_mp", ".", "grasp_gen", ".", "gen_target_from_obj_idx", "(", "obj_idx", ")", "\n", "self", ".", "_targ_obj_idx", "=", "obj_idx", "\n", "self", ".", "_robo_targ", "=", "robo_targ", "\n", "\n", "if", "self", ".", "_config", ".", "VERBOSE", ":", "\n", "            ", "self", ".", "_add_debug_viz_point", "(", "robo_targ", ".", "ee_target_pos", ")", "\n", "\n", "", "plan", "=", "self", ".", "_mp", ".", "motion_plan", "(", "\n", "self", ".", "_sim", ".", "robot", ".", "arm_joint_pos", ",", "\n", "robo_targ", ",", "\n", "timeout", "=", "self", ".", "_config", ".", "TIMEOUT", ",", "\n", ")", "\n", "\n", "for", "k", ",", "v", "in", "self", ".", "_mp", ".", "get_recent_plan_stats", "(", "plan", ",", "robo_targ", ")", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "_set_info", "(", "k", ",", "v", ")", "\n", "", "self", ".", "_set_info", "(", "\"execute_bad_coll_failure\"", ",", "int", "(", "self", ".", "_mp", ".", "was_bad_coll", ")", ")", "\n", "# Don't double count execute failure.", "\n", "self", ".", "_set_info", "(", "\"execute_failure\"", ",", "int", "(", "plan", "is", "not", "None", ")", ")", "\n", "return", "plan", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.SpaManipPick._on_done": [[407, 425], ["mp_agents.ArmTargModule._on_done", "mp_agents.SpaManipPick._sim.get_rigid_object_manager", "mp_agents.SpaManipPick.get_object_by_id", "numpy.linalg.norm", "numpy.linalg.norm", "mp_agents.SpaManipPick._clean_mp", "mp_agents.SpaManipPick._set_info", "mp_agents.SpaManipPick._set_info", "mp_agents.SpaManipPick._set_info", "mp_agents.SpaManipPick._set_info"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.SpaResetModule._on_done", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.ArmTargModule._clean_mp", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.AgentComposition._set_info", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.AgentComposition._set_info", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.AgentComposition._set_info", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.AgentComposition._set_info"], ["", "def", "_on_done", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "_on_done", "(", ")", "\n", "cur_ee", "=", "self", ".", "_sim", ".", "robot", ".", "ee_transform", ".", "translation", "\n", "rom", "=", "self", ".", "_sim", ".", "get_rigid_object_manager", "(", ")", "\n", "obj", "=", "rom", ".", "get_object_by_id", "(", "self", ".", "_targ_obj_idx", ")", "\n", "\n", "ee_dist", "=", "np", ".", "linalg", ".", "norm", "(", "self", ".", "_robo_targ", ".", "ee_target_pos", "-", "cur_ee", ")", "\n", "ee_dist_to_obj", "=", "np", ".", "linalg", ".", "norm", "(", "obj", ".", "translation", "-", "cur_ee", ")", "\n", "if", "(", "\n", "ee_dist_to_obj", "<", "self", ".", "_grasp_thresh", "\n", "and", "ee_dist", "<", "self", ".", "_config", ".", "EXEC_EE_THRESH", "\n", ")", ":", "\n", "            ", "self", ".", "_set_info", "(", "\"execute_failure\"", ",", "0", ")", "\n", "self", ".", "_set_info", "(", "\"execute_bad_coll_failure\"", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_set_info", "(", "\"execute_ee_to_obj_dist\"", ",", "ee_dist_to_obj", ")", "\n", "self", ".", "_set_info", "(", "\"execute_ee_dist\"", ",", "ee_dist", ")", "\n", "", "self", ".", "_clean_mp", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.SpaManipPick._get_gripper_ac": [[426, 432], ["len"], "methods", ["None"], ["", "def", "_get_gripper_ac", "(", "self", ",", "plan_ac", ")", ":", "\n", "        ", "if", "self", ".", "adjusted_plan_idx", ">=", "len", "(", "self", ".", "_plan", ")", ":", "\n", "            ", "grip", "=", "1", "\n", "", "else", ":", "\n", "            ", "grip", "=", "-", "1", "\n", "", "return", "grip", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.SpaResetModule.__init__": [[435, 448], ["mp_agents.ArmTargModule.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "env", ",", "\n", "config", ",", "\n", "action_config", ",", "\n", "should_auto_end", "=", "True", ",", "\n", "ignore_first", "=", "False", ",", "\n", "auto_get_args_fn", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "env", ",", "config", ",", "action_config", ",", "should_auto_end", ",", "auto_get_args_fn", "\n", ")", "\n", "self", ".", "_ignore_first", "=", "ignore_first", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.SpaResetModule._generate_plan": [[449, 479], ["mp_agents.SpaResetModule._mp.set_config", "habitat_baselines.motion_planning.robot_target.RobotTarget", "mp_agents.SpaResetModule._mp.motion_plan", "mp_agents.SpaResetModule._mp.get_recent_plan_stats().items", "mp_agents.SpaResetModule._set_info", "mp_agents.SpaResetModule._set_info", "mp_agents.SpaResetModule._set_info", "int", "int", "mp_agents.SpaResetModule._mp.get_recent_plan_stats"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.motion_plan.MotionPlanner.set_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.motion_plan.MotionPlanner.motion_plan", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.AgentComposition._set_info", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.AgentComposition._set_info", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.AgentComposition._set_info", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.motion_planning.motion_plan.MotionPlanner.get_recent_plan_stats"], ["", "def", "_generate_plan", "(", "self", ",", "observations", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_mp", ".", "set_config", "(", "\n", "self", ".", "_config", ".", "MP_MARGIN", ",", "\n", "self", ".", "_config", ".", "MP_OBJ", ",", "\n", "self", ".", "_grasp_thresh", ",", "\n", "self", ".", "_config", ".", "N_GRASPS", ",", "\n", "self", ".", "_config", ",", "\n", "ignore_first", "=", "self", ".", "_ignore_first", ",", "\n", "use_prev", "=", "True", ",", "\n", ")", "\n", "\n", "robo_targ", "=", "RobotTarget", "(", "\n", "joints_target", "=", "self", ".", "_sim", ".", "robot", ".", "params", ".", "arm_init_params", "\n", ")", "\n", "plan", "=", "self", ".", "_mp", ".", "motion_plan", "(", "\n", "self", ".", "_sim", ".", "robot", ".", "arm_joint_pos", ",", "\n", "robo_targ", ",", "\n", "timeout", "=", "self", ".", "_config", ".", "TIMEOUT", ",", "\n", ")", "\n", "\n", "for", "k", ",", "v", "in", "self", ".", "_mp", ".", "get_recent_plan_stats", "(", "\n", "plan", ",", "robo_targ", ",", "\"reset_\"", "\n", ")", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "_set_info", "(", "k", ",", "v", ")", "\n", "", "self", ".", "_set_info", "(", "\n", "\"execute_reset_bad_coll_failure\"", ",", "int", "(", "self", ".", "_mp", ".", "was_bad_coll", ")", "\n", ")", "\n", "# Don't double count execute failure.", "\n", "self", ".", "_set_info", "(", "\"execute_reset_failure\"", ",", "int", "(", "plan", "is", "not", "None", ")", ")", "\n", "return", "plan", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.SpaResetModule._on_done": [[480, 485], ["mp_agents.ArmTargModule._on_done", "mp_agents.SpaResetModule._set_info", "mp_agents.SpaResetModule._set_info", "mp_agents.SpaResetModule._clean_mp"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.SpaResetModule._on_done", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.AgentComposition._set_info", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.AgentComposition._set_info", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.ArmTargModule._clean_mp"], ["", "def", "_on_done", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "_on_done", "(", ")", "\n", "self", ".", "_set_info", "(", "\"execute_reset_failure\"", ",", "0", ")", "\n", "self", ".", "_set_info", "(", "\"execute_reset_bad_coll_failure\"", ",", "0", ")", "\n", "self", ".", "_clean_mp", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.SpaResetModule._get_gripper_ac": [[486, 492], ["None"], "methods", ["None"], ["", "def", "_get_gripper_ac", "(", "self", ",", "plan_ac", ")", ":", "\n", "        ", "if", "self", ".", "_sim", ".", "robot", ".", "is_gripper_open", ":", "\n", "            ", "grip", "=", "-", "1.0", "\n", "", "else", ":", "\n", "            ", "grip", "=", "1.0", "\n", "", "return", "grip", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.SpaResetModule.wait_after": [[493, 496], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "wait_after", "(", "self", ")", ":", "\n", "        ", "return", "0", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.mp_agents.get_noop_arm_action": [[20, 49], ["isinstance", "numpy.zeros"], "function", ["None"], ["def", "get_noop_arm_action", "(", "sim", ",", "task", ")", ":", "\n", "    ", "if", "sim", ".", "robot", ".", "is_gripper_open", ":", "\n", "        ", "grip_state", "=", "1.0", "\n", "", "else", ":", "\n", "        ", "grip_state", "=", "0.0", "\n", "\n", "", "if", "\"grip_action\"", "in", "task", ".", "action_space", ".", "spaces", "[", "\"ARM_ACTION\"", "]", ":", "\n", "        ", "grip_ac_dict", "=", "{", "\"grip_action\"", ":", "grip_state", "}", "\n", "", "else", ":", "\n", "        ", "grip_ac_dict", "=", "{", "}", "\n", "\n", "", "if", "isinstance", "(", "task", ".", "actions", "[", "\"ARM_ACTION\"", "]", ".", "arm_ctrlr", ",", "ArmEEAction", ")", ":", "\n", "        ", "arm_args", ":", "Dict", "[", "str", ",", "Union", "[", "float", ",", "np", ".", "ndarray", "]", "]", "=", "{", "\n", "\"arm_action\"", ":", "np", ".", "zeros", "(", "3", ")", ",", "\n", "**", "grip_ac_dict", ",", "\n", "}", "\n", "ret_val", "=", "{", "\n", "\"action\"", ":", "\"ARM_ACTION\"", ",", "\n", "\"action_args\"", ":", "arm_args", ",", "\n", "}", "\n", "", "else", ":", "\n", "        ", "ret_val", "=", "{", "\n", "\"action\"", ":", "\"ARM_ACTION\"", ",", "\n", "\"action_args\"", ":", "{", "\n", "\"arm_action\"", ":", "sim", ".", "robot", ".", "arm_joint_pos", ",", "\n", "**", "grip_ac_dict", ",", "\n", "}", ",", "\n", "}", "\n", "", "return", "ret_val", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.__init__": [[39, 107], ["gym.spaces.Dict", "gym.spaces.Discrete", "random.seed", "torch.random.manual_seed", "torch.cuda.is_available", "habitat_baselines.rl.ddppo.policy.PointNavResNetPolicy", "ppo_agents.PPOAgent.actor_critic.to", "gym.spaces.Box", "gym.spaces.Box", "gym.spaces.Box", "torch.cuda.is_available", "torch.device", "torch.device", "torch.load", "ppo_agents.PPOAgent.actor_critic.load_state_dict", "habitat.logger.error", "ppo_agents.get_default_config", "numpy.finfo", "numpy.finfo", "ckpt[].items", "len"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.seed", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.load", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.get_default_config"], ["    ", "def", "__init__", "(", "self", ",", "config", ":", "Config", ")", "->", "None", ":", "\n", "        ", "spaces", "=", "{", "\n", "get_default_config", "(", ")", ".", "GOAL_SENSOR_UUID", ":", "Box", "(", "\n", "low", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "min", ",", "\n", "high", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "max", ",", "\n", "shape", "=", "(", "2", ",", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n", "}", "\n", "\n", "if", "config", ".", "INPUT_TYPE", "in", "[", "\"depth\"", ",", "\"rgbd\"", "]", ":", "\n", "            ", "spaces", "[", "\"depth\"", "]", "=", "Box", "(", "\n", "low", "=", "0", ",", "\n", "high", "=", "1", ",", "\n", "shape", "=", "(", "config", ".", "RESOLUTION", ",", "config", ".", "RESOLUTION", ",", "1", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n", "\n", "", "if", "config", ".", "INPUT_TYPE", "in", "[", "\"rgb\"", ",", "\"rgbd\"", "]", ":", "\n", "            ", "spaces", "[", "\"rgb\"", "]", "=", "Box", "(", "\n", "low", "=", "0", ",", "\n", "high", "=", "255", ",", "\n", "shape", "=", "(", "config", ".", "RESOLUTION", ",", "config", ".", "RESOLUTION", ",", "3", ")", ",", "\n", "dtype", "=", "np", ".", "uint8", ",", "\n", ")", "\n", "", "observation_spaces", "=", "SpaceDict", "(", "spaces", ")", "\n", "\n", "action_spaces", "=", "Discrete", "(", "4", ")", "\n", "\n", "self", ".", "device", "=", "(", "\n", "torch", ".", "device", "(", "\"cuda:{}\"", ".", "format", "(", "config", ".", "PTH_GPU_ID", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "else", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", ")", "\n", "self", ".", "hidden_size", "=", "config", ".", "HIDDEN_SIZE", "\n", "\n", "random", ".", "seed", "(", "config", ".", "RANDOM_SEED", ")", "\n", "torch", ".", "random", ".", "manual_seed", "(", "config", ".", "RANDOM_SEED", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "# type: ignore", "\n", "\n", "", "self", ".", "actor_critic", "=", "PointNavResNetPolicy", "(", "\n", "observation_space", "=", "observation_spaces", ",", "\n", "action_space", "=", "action_spaces", ",", "\n", "hidden_size", "=", "self", ".", "hidden_size", ",", "\n", "normalize_visual_inputs", "=", "\"rgb\"", "in", "spaces", ",", "\n", ")", "\n", "self", ".", "actor_critic", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "if", "config", ".", "MODEL_PATH", ":", "\n", "            ", "ckpt", "=", "torch", ".", "load", "(", "config", ".", "MODEL_PATH", ",", "map_location", "=", "self", ".", "device", ")", "\n", "#  Filter only actor_critic weights", "\n", "self", ".", "actor_critic", ".", "load_state_dict", "(", "\n", "{", "# type: ignore", "\n", "k", "[", "len", "(", "\"actor_critic.\"", ")", ":", "]", ":", "v", "\n", "for", "k", ",", "v", "in", "ckpt", "[", "\"state_dict\"", "]", ".", "items", "(", ")", "\n", "if", "\"actor_critic\"", "in", "k", "\n", "}", "\n", ")", "\n", "\n", "", "else", ":", "\n", "            ", "habitat", ".", "logger", ".", "error", "(", "\n", "\"Model checkpoint wasn't loaded, evaluating \"", "\"a random model.\"", "\n", ")", "\n", "\n", "", "self", ".", "test_recurrent_hidden_states", ":", "Optional", "[", "torch", ".", "Tensor", "]", "=", "None", "\n", "self", ".", "not_done_masks", ":", "Optional", "[", "torch", ".", "Tensor", "]", "=", "None", "\n", "self", ".", "prev_actions", ":", "Optional", "[", "torch", ".", "Tensor", "]", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset": [[108, 120], ["torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "test_recurrent_hidden_states", "=", "torch", ".", "zeros", "(", "\n", "1", ",", "\n", "self", ".", "actor_critic", ".", "net", ".", "num_recurrent_layers", ",", "\n", "self", ".", "hidden_size", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", ")", "\n", "self", ".", "not_done_masks", "=", "torch", ".", "zeros", "(", "\n", "1", ",", "1", ",", "device", "=", "self", ".", "device", ",", "dtype", "=", "torch", ".", "bool", "\n", ")", "\n", "self", ".", "prev_actions", "=", "torch", ".", "zeros", "(", "\n", "1", ",", "1", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "self", ".", "device", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.act": [[122, 142], ["habitat_baselines.utils.common.batch_obs", "torch.no_grad", "ppo_agents.PPOAgent.actor_critic.act", "ppo_agents.PPOAgent.not_done_masks.fill_", "ppo_agents.PPOAgent.prev_actions.copy_", "[].item"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.batch_obs", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.policy.NetPolicy.act"], ["", "def", "act", "(", "self", ",", "observations", ":", "Observations", ")", "->", "Dict", "[", "str", ",", "int", "]", ":", "\n", "        ", "batch", "=", "batch_obs", "(", "[", "observations", "]", ",", "device", "=", "self", ".", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "(", "\n", "_", ",", "\n", "actions", ",", "\n", "_", ",", "\n", "self", ".", "test_recurrent_hidden_states", ",", "\n", ")", "=", "self", ".", "actor_critic", ".", "act", "(", "\n", "batch", ",", "\n", "self", ".", "test_recurrent_hidden_states", ",", "\n", "self", ".", "prev_actions", ",", "\n", "self", ".", "not_done_masks", ",", "\n", "deterministic", "=", "False", ",", "\n", ")", "\n", "#  Make masks not done till reset (end of episode) will be called", "\n", "self", ".", "not_done_masks", ".", "fill_", "(", "True", ")", "\n", "self", ".", "prev_actions", ".", "copy_", "(", "actions", ")", "# type: ignore", "\n", "\n", "", "return", "{", "\"action\"", ":", "actions", "[", "0", "]", "[", "0", "]", ".", "item", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.get_default_config": [[26, 36], ["habitat.config.Config"], "function", ["None"], ["def", "get_default_config", "(", ")", "->", "Config", ":", "\n", "    ", "c", "=", "Config", "(", ")", "\n", "c", ".", "INPUT_TYPE", "=", "\"rgb\"", "\n", "c", ".", "MODEL_PATH", "=", "\"data/checkpoints/gibson-rgb-best.pth\"", "\n", "c", ".", "RESOLUTION", "=", "256", "\n", "c", ".", "HIDDEN_SIZE", "=", "512", "\n", "c", ".", "RANDOM_SEED", "=", "7", "\n", "c", ".", "PTH_GPU_ID", "=", "0", "\n", "c", ".", "GOAL_SENSOR_UUID", "=", "\"pointgoal_with_gps_compass\"", "\n", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.main": [[144, 168], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "ppo_agents.get_default_config", "ppo_agents.PPOAgent", "habitat.Benchmark", "habitat.Benchmark.evaluate", "benchmark.evaluate.items", "habitat.logger.info"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.get_default_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.benchmark_gym.BenchmarkGym.evaluate"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--input-type\"", ",", "\n", "default", "=", "\"rgb\"", ",", "\n", "choices", "=", "[", "\"blind\"", ",", "\"rgb\"", ",", "\"depth\"", ",", "\"rgbd\"", "]", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--model-path\"", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--task-config\"", ",", "type", "=", "str", ",", "default", "=", "\"configs/tasks/pointnav.yaml\"", "\n", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "agent_config", "=", "get_default_config", "(", ")", "\n", "agent_config", ".", "INPUT_TYPE", "=", "args", ".", "input_type", "\n", "if", "args", ".", "model_path", "is", "not", "None", ":", "\n", "        ", "agent_config", ".", "MODEL_PATH", "=", "args", ".", "model_path", "\n", "\n", "", "agent", "=", "PPOAgent", "(", "agent_config", ")", "\n", "benchmark", "=", "habitat", ".", "Benchmark", "(", "config_paths", "=", "args", ".", "task_config", ")", "\n", "metrics", "=", "benchmark", ".", "evaluate", "(", "agent", ")", "\n", "\n", "for", "k", ",", "v", "in", "metrics", ".", "items", "(", ")", ":", "\n", "        ", "habitat", ".", "logger", ".", "info", "(", "\"{}: {:.3f}\"", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.hrl.high_level_policy.HighLevelPolicy.get_next_skill": [[11, 19], ["None"], "methods", ["None"], ["    ", "def", "get_next_skill", "(", "\n", "self", ",", "observations", ",", "rnn_hidden_states", ",", "prev_actions", ",", "masks", ",", "plan_masks", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "List", "[", "Any", "]", ",", "torch", ".", "BoolTensor", "]", ":", "\n", "        ", "\"\"\"\n        :returns: A tuple containing the next skill index, a list of arguments\n            for the skill, and if the high-level policy requests immediate\n            termination.\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.hrl.high_level_policy.GtHighLevelPolicy.__init__": [[22, 38], ["enumerate", "high_level_policy.GtHighLevelPolicy._solution_actions.append", "torch.zeros", "open", "yaml.safe_load", "habitat.tasks.rearrange.multi_task.rearrange_pddl.parse_func", "high_level_policy.GtHighLevelPolicy._solution_actions.append", "habitat.tasks.rearrange.multi_task.rearrange_pddl.parse_func", "high_level_policy.GtHighLevelPolicy._solution_actions.append", "len", "habitat.tasks.rearrange.multi_task.rearrange_pddl.parse_func"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.parse_func", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.parse_func", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.parse_func"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "task_spec_file", ",", "num_envs", ",", "skill_name_to_idx", ")", ":", "\n", "        ", "with", "open", "(", "task_spec_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "task_spec", "=", "yaml", ".", "safe_load", "(", "f", ")", "\n", "\n", "", "self", ".", "_solution_actions", "=", "[", "]", "\n", "for", "i", ",", "sol_step", "in", "enumerate", "(", "task_spec", "[", "\"solution\"", "]", ")", ":", "\n", "            ", "sol_action", "=", "parse_func", "(", "sol_step", ")", "\n", "self", ".", "_solution_actions", ".", "append", "(", "sol_action", ")", "\n", "if", "i", "<", "(", "len", "(", "task_spec", "[", "\"solution\"", "]", ")", "-", "1", ")", ":", "\n", "                ", "self", ".", "_solution_actions", ".", "append", "(", "parse_func", "(", "\"reset_arm(0)\"", ")", ")", "\n", "# Add a wait action at the end.", "\n", "", "", "self", ".", "_solution_actions", ".", "append", "(", "parse_func", "(", "\"wait(30)\"", ")", ")", "\n", "\n", "self", ".", "_next_sol_idxs", "=", "torch", ".", "zeros", "(", "num_envs", ",", "dtype", "=", "torch", ".", "int32", ")", "\n", "self", ".", "_num_envs", "=", "num_envs", "\n", "self", ".", "_skill_name_to_idx", "=", "skill_name_to_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.hrl.high_level_policy.GtHighLevelPolicy.apply_mask": [[39, 41], ["mask.cpu().view", "mask.cpu"], "methods", ["None"], ["", "def", "apply_mask", "(", "self", ",", "mask", ")", ":", "\n", "        ", "self", ".", "_next_sol_idxs", "*=", "mask", ".", "cpu", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.hrl.high_level_policy.GtHighLevelPolicy.get_next_skill": [[42, 78], ["torch.zeros", "torch.zeros", "enumerate", "range", "habitat_baselines.common.logging.baselines_logger.info", "skill_args.split.split.split", "len", "habitat_baselines.common.logging.baselines_logger.info", "high_level_policy.GtHighLevelPolicy._next_sol_idxs[].item", "ValueError", "len"], "methods", ["None"], ["", "def", "get_next_skill", "(", "\n", "self", ",", "observations", ",", "rnn_hidden_states", ",", "prev_actions", ",", "masks", ",", "plan_masks", "\n", ")", ":", "\n", "        ", "next_skill", "=", "torch", ".", "zeros", "(", "self", ".", "_num_envs", ",", "device", "=", "prev_actions", ".", "device", ")", "\n", "skill_args_data", "=", "[", "None", "for", "_", "in", "range", "(", "self", ".", "_num_envs", ")", "]", "\n", "immediate_end", "=", "torch", ".", "zeros", "(", "\n", "self", ".", "_num_envs", ",", "device", "=", "prev_actions", ".", "device", ",", "dtype", "=", "torch", ".", "bool", "\n", ")", "\n", "for", "batch_idx", ",", "should_plan", "in", "enumerate", "(", "plan_masks", ")", ":", "\n", "            ", "if", "should_plan", "==", "1.0", ":", "\n", "                ", "if", "self", ".", "_next_sol_idxs", "[", "batch_idx", "]", ">=", "len", "(", "\n", "self", ".", "_solution_actions", "\n", ")", ":", "\n", "                    ", "baselines_logger", ".", "info", "(", "\n", "f\"Calling for immediate end with {self._next_sol_idxs[batch_idx]}\"", "\n", ")", "\n", "immediate_end", "[", "batch_idx", "]", "=", "True", "\n", "use_idx", "=", "len", "(", "self", ".", "_solution_actions", ")", "-", "1", "\n", "", "else", ":", "\n", "                    ", "use_idx", "=", "self", ".", "_next_sol_idxs", "[", "batch_idx", "]", ".", "item", "(", ")", "\n", "\n", "", "skill_name", ",", "skill_args", "=", "self", ".", "_solution_actions", "[", "use_idx", "]", "\n", "baselines_logger", ".", "info", "(", "\n", "f\"Got next element of the plan with {skill_name}, {skill_args}\"", "\n", ")", "\n", "if", "skill_name", "not", "in", "self", ".", "_skill_name_to_idx", ":", "\n", "                    ", "raise", "ValueError", "(", "\n", "f\"Could not find skill named {skill_name} in {self._skill_name_to_idx}\"", "\n", ")", "\n", "", "next_skill", "[", "batch_idx", "]", "=", "self", ".", "_skill_name_to_idx", "[", "skill_name", "]", "\n", "skill_args", "=", "skill_args", ".", "split", "(", "\",\"", ")", "\n", "skill_args_data", "[", "batch_idx", "]", "=", "skill_args", "\n", "\n", "self", ".", "_next_sol_idxs", "[", "batch_idx", "]", "+=", "1", "\n", "\n", "", "", "return", "next_skill", ",", "skill_args_data", ",", "immediate_end", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.hrl.hierarchical_policy.HierarchicalPolicy.__init__": [[29, 85], ["habitat_baselines.rl.ppo.policy.Policy.__init__", "enumerate", "torch.ones", "torch.zeros", "hierarchical_policy.HierarchicalPolicy.eval"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_trainer.BaseTrainer.eval"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "config", ",", "\n", "full_config", ",", "\n", "observation_space", ":", "spaces", ".", "Space", ",", "\n", "action_space", ":", "spaces", ".", "Space", ",", "\n", "num_envs", ":", "int", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_action_space", "=", "action_space", "\n", "self", ".", "_num_envs", ":", "int", "=", "num_envs", "\n", "\n", "# Maps (skill idx -> skill)", "\n", "self", ".", "_skills", ":", "Dict", "[", "int", ",", "SkillPolicy", "]", "=", "{", "}", "\n", "self", ".", "_name_to_idx", ":", "Dict", "[", "str", ",", "int", "]", "=", "{", "}", "\n", "\n", "for", "i", ",", "(", "skill_id", ",", "use_skill_name", ")", "in", "enumerate", "(", "\n", "config", ".", "USE_SKILLS", ".", "items", "(", ")", "\n", ")", ":", "\n", "            ", "if", "use_skill_name", "==", "\"\"", ":", "\n", "# Skip loading this skill if no name is provided", "\n", "                ", "continue", "\n", "", "skill_config", "=", "config", ".", "DEFINED_SKILLS", "[", "use_skill_name", "]", "\n", "\n", "cls", "=", "eval", "(", "skill_config", ".", "skill_name", ")", "\n", "skill_policy", "=", "cls", ".", "from_config", "(", "\n", "skill_config", ",", "observation_space", ",", "action_space", ",", "self", ".", "_num_envs", "\n", ")", "\n", "self", ".", "_skills", "[", "i", "]", "=", "skill_policy", "\n", "self", ".", "_name_to_idx", "[", "skill_id", "]", "=", "i", "\n", "\n", "", "self", ".", "_call_high_level", ":", "torch", ".", "Tensor", "=", "torch", ".", "ones", "(", "\n", "self", ".", "_num_envs", ",", "dtype", "=", "torch", ".", "bool", "\n", ")", "\n", "self", ".", "_cur_skills", ":", "torch", ".", "Tensor", "=", "torch", ".", "zeros", "(", "self", ".", "_num_envs", ")", "\n", "\n", "high_level_cls", "=", "eval", "(", "config", ".", "high_level_policy", ".", "name", ")", "\n", "self", ".", "_high_level_policy", ":", "HighLevelPolicy", "=", "high_level_cls", "(", "\n", "config", ".", "high_level_policy", ",", "\n", "osp", ".", "join", "(", "\n", "full_config", ".", "TASK_CONFIG", ".", "TASK", ".", "TASK_SPEC_BASE_PATH", ",", "\n", "full_config", ".", "TASK_CONFIG", ".", "TASK", ".", "TASK_SPEC", "+", "\".yaml\"", ",", "\n", ")", ",", "\n", "num_envs", ",", "\n", "self", ".", "_name_to_idx", ",", "\n", ")", "\n", "self", ".", "_stop_action_idx", "=", "0", "\n", "found", "=", "False", "\n", "for", "k", "in", "action_space", ":", "\n", "            ", "if", "k", "==", "\"REARRANGE_STOP\"", ":", "\n", "                ", "found", "=", "True", "\n", "break", "\n", "", "self", ".", "_stop_action_idx", "+=", "get_num_actions", "(", "action_space", "[", "k", "]", ")", "\n", "", "if", "not", "found", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Could not find STOP action in {action_space}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.hrl.hierarchical_policy.HierarchicalPolicy.eval": [[86, 88], ["None"], "methods", ["None"], ["", "", "def", "eval", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.hrl.hierarchical_policy.HierarchicalPolicy.num_recurrent_layers": [[89, 92], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_recurrent_layers", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_skills", "[", "0", "]", ".", "num_recurrent_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.hrl.hierarchical_policy.HierarchicalPolicy.should_load_agent_state": [[93, 96], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "should_load_agent_state", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.hrl.hierarchical_policy.HierarchicalPolicy.parameters": [[97, 99], ["hierarchical_policy.HierarchicalPolicy._skills[].parameters"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.nn_skill.NnSkillPolicy.parameters"], ["", "def", "parameters", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_skills", "[", "0", "]", ".", "parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.hrl.hierarchical_policy.HierarchicalPolicy.to": [[100, 105], ["hierarchical_policy.HierarchicalPolicy._skills.values", "hierarchical_policy.HierarchicalPolicy._call_high_level.to", "hierarchical_policy.HierarchicalPolicy._cur_skills.to", "skill.to"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to"], ["", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "for", "skill", "in", "self", ".", "_skills", ".", "values", "(", ")", ":", "\n", "            ", "skill", ".", "to", "(", "device", ")", "\n", "", "self", ".", "_call_high_level", "=", "self", ".", "_call_high_level", ".", "to", "(", "device", ")", "\n", "self", ".", "_cur_skills", "=", "self", ".", "_cur_skills", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.hrl.hierarchical_policy.HierarchicalPolicy.act": [[106, 216], ["hierarchical_policy.HierarchicalPolicy._high_level_policy.apply_mask", "rnn_hidden_states.unsqueeze", "prev_actions.unsqueeze", "masks.unsqueeze", "torch.zeros", "enumerate", "torch.zeros", "torch.zeros", "enumerate", "hierarchical_policy.HierarchicalPolicy._skills[].should_terminate", "hierarchical_policy.HierarchicalPolicy._call_high_level.sum", "hierarchical_policy.HierarchicalPolicy._high_level_policy.get_next_skill", "torch.nonzero", "habitat_baselines.utils.common.get_num_actions", "hierarchical_policy.HierarchicalPolicy._skills[].act", "should_terminate.sum", "torch.nonzero", "rnn_hidden_states.unsqueeze.view", "v[].unsqueeze", "range", "skill.on_enter", "habitat_baselines.common.logging.baselines_logger.info", "observations.items", "new_skill_batch_idx.item", "new_skill_batch_idx.item", "skill_idx.item", "skill_idx.item", "skill_idx.item"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.hrl.high_level_policy.GtHighLevelPolicy.apply_mask", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.skill.SkillPolicy.should_terminate", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.hrl.high_level_policy.GtHighLevelPolicy.get_next_skill", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.get_num_actions", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.policy.NetPolicy.act", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.oracle_nav.OracleNavPolicy.on_enter"], ["", "def", "act", "(", "\n", "self", ",", "\n", "observations", ",", "\n", "rnn_hidden_states", ",", "\n", "prev_actions", ",", "\n", "masks", ",", "\n", "deterministic", "=", "False", ",", "\n", ")", ":", "\n", "\n", "        ", "self", ".", "_high_level_policy", ".", "apply_mask", "(", "masks", ")", "\n", "use_device", "=", "prev_actions", ".", "device", "\n", "\n", "batched_observations", "=", "[", "\n", "{", "k", ":", "v", "[", "batch_idx", "]", ".", "unsqueeze", "(", "0", ")", "for", "k", ",", "v", "in", "observations", ".", "items", "(", ")", "}", "\n", "for", "batch_idx", "in", "range", "(", "self", ".", "_num_envs", ")", "\n", "]", "\n", "batched_rnn_hidden_states", "=", "rnn_hidden_states", ".", "unsqueeze", "(", "1", ")", "\n", "batched_prev_actions", "=", "prev_actions", ".", "unsqueeze", "(", "1", ")", "\n", "batched_masks", "=", "masks", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "batched_bad_should_terminate", "=", "torch", ".", "zeros", "(", "\n", "self", ".", "_num_envs", ",", "device", "=", "use_device", ",", "dtype", "=", "torch", ".", "bool", "\n", ")", "\n", "\n", "# Check if skills should terminate.", "\n", "for", "batch_idx", ",", "skill_idx", "in", "enumerate", "(", "self", ".", "_cur_skills", ")", ":", "\n", "            ", "if", "masks", "[", "batch_idx", "]", "==", "0.0", ":", "\n", "# Don't check if the skill is done if the episode ended.", "\n", "                ", "continue", "\n", "", "should_terminate", ",", "bad_should_terminate", "=", "self", ".", "_skills", "[", "\n", "skill_idx", ".", "item", "(", ")", "\n", "]", ".", "should_terminate", "(", "\n", "batched_observations", "[", "batch_idx", "]", ",", "\n", "batched_rnn_hidden_states", "[", "batch_idx", "]", ",", "\n", "batched_prev_actions", "[", "batch_idx", "]", ",", "\n", "batched_masks", "[", "batch_idx", "]", ",", "\n", ")", "\n", "batched_bad_should_terminate", "[", "batch_idx", "]", "=", "bad_should_terminate", "\n", "self", ".", "_call_high_level", "[", "batch_idx", "]", "=", "should_terminate", "\n", "\n", "# Always call high-level if the episode is over.", "\n", "", "self", ".", "_call_high_level", "=", "self", ".", "_call_high_level", "|", "(", "~", "masks", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "# If any skills want to terminate invoke the high-level policy to get", "\n", "# the next skill.", "\n", "hl_terminate", "=", "torch", ".", "zeros", "(", "\n", "self", ".", "_num_envs", ",", "device", "=", "use_device", ",", "dtype", "=", "torch", ".", "bool", "\n", ")", "\n", "if", "self", ".", "_call_high_level", ".", "sum", "(", ")", ">", "0", ":", "\n", "            ", "(", "\n", "new_skills", ",", "\n", "new_skill_args", ",", "\n", "hl_terminate", ",", "\n", ")", "=", "self", ".", "_high_level_policy", ".", "get_next_skill", "(", "\n", "observations", ",", "\n", "rnn_hidden_states", ",", "\n", "prev_actions", ",", "\n", "masks", ",", "\n", "self", ".", "_call_high_level", ",", "\n", ")", "\n", "\n", "for", "new_skill_batch_idx", "in", "torch", ".", "nonzero", "(", "self", ".", "_call_high_level", ")", ":", "\n", "                ", "skill_idx", "=", "new_skills", "[", "new_skill_batch_idx", ".", "item", "(", ")", "]", "\n", "\n", "skill", "=", "self", ".", "_skills", "[", "skill_idx", ".", "item", "(", ")", "]", "\n", "\n", "(", "\n", "batched_rnn_hidden_states", "[", "new_skill_batch_idx", "]", ",", "\n", "batched_prev_actions", "[", "new_skill_batch_idx", "]", ",", "\n", ")", "=", "skill", ".", "on_enter", "(", "\n", "new_skill_args", "[", "new_skill_batch_idx", "]", ",", "\n", "new_skill_batch_idx", ".", "item", "(", ")", ",", "\n", "batched_observations", "[", "new_skill_batch_idx", "]", ",", "\n", "batched_rnn_hidden_states", "[", "new_skill_batch_idx", "]", ",", "\n", "batched_prev_actions", "[", "new_skill_batch_idx", "]", ",", "\n", ")", "\n", "", "self", ".", "_cur_skills", "=", "(", "\n", "(", "~", "self", ".", "_call_high_level", ")", "*", "self", ".", "_cur_skills", "\n", ")", "+", "(", "self", ".", "_call_high_level", "*", "new_skills", ")", "\n", "\n", "# Compute the actions from the current skills", "\n", "", "actions", "=", "torch", ".", "zeros", "(", "\n", "self", ".", "_num_envs", ",", "get_num_actions", "(", "self", ".", "_action_space", ")", "\n", ")", "\n", "for", "batch_idx", ",", "skill_idx", "in", "enumerate", "(", "self", ".", "_cur_skills", ")", ":", "\n", "            ", "action", ",", "batched_rnn_hidden_states", "[", "batch_idx", "]", "=", "self", ".", "_skills", "[", "\n", "skill_idx", ".", "item", "(", ")", "\n", "]", ".", "act", "(", "\n", "batched_observations", "[", "batch_idx", "]", ",", "\n", "batched_rnn_hidden_states", "[", "batch_idx", "]", ",", "\n", "batched_prev_actions", "[", "batch_idx", "]", ",", "\n", "batched_masks", "[", "batch_idx", "]", ",", "\n", "batch_idx", ",", "\n", ")", "\n", "actions", "[", "batch_idx", "]", "=", "action", "\n", "\n", "", "should_terminate", "=", "batched_bad_should_terminate", "|", "hl_terminate", "\n", "if", "should_terminate", ".", "sum", "(", ")", ">", "0", ":", "\n", "# End the episode where requested.", "\n", "            ", "for", "batch_idx", "in", "torch", ".", "nonzero", "(", "should_terminate", ")", ":", "\n", "                ", "baselines_logger", ".", "info", "(", "\n", "f\"Calling stop action for batch {batch_idx}, {bad_should_terminate}, {hl_terminate}\"", "\n", ")", "\n", "actions", "[", "batch_idx", ",", "self", ".", "_stop_action_idx", "]", "=", "1.0", "\n", "\n", "", "", "return", "(", "\n", "None", ",", "\n", "actions", ",", "\n", "None", ",", "\n", "batched_rnn_hidden_states", ".", "view", "(", "rnn_hidden_states", ".", "shape", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.hrl.hierarchical_policy.HierarchicalPolicy.from_config": [[218, 226], ["cls"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_config", "(", "cls", ",", "config", ",", "observation_space", ",", "action_space", ")", ":", "\n", "        ", "return", "cls", "(", "\n", "config", ".", "RL", ".", "POLICY", ",", "\n", "config", ",", "\n", "observation_space", ",", "\n", "action_space", ",", "\n", "config", ".", "NUM_ENVIRONMENTS", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.nn_skill.NnSkillPolicy.__init__": [[30, 60], ["habitat_baselines.rl.hrl.skills.skill.SkillPolicy.__init__", "habitat_baselines.utils.common.get_num_actions", "action_space.items", "nn_skill.NnSkillPolicy._internal_log", "filtered_action_space.spaces.keys", "habitat_baselines.utils.common.get_num_actions"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.get_num_actions", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.skill.SkillPolicy._internal_log", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.get_num_actions"], ["def", "__init__", "(", "\n", "self", ",", "\n", "wrap_policy", ",", "\n", "config", ",", "\n", "action_space", ":", "spaces", ".", "Space", ",", "\n", "filtered_obs_space", ":", "spaces", ".", "Space", ",", "\n", "filtered_action_space", ":", "spaces", ".", "Space", ",", "\n", "batch_size", ",", "\n", "should_keep_hold_state", ":", "bool", "=", "False", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        :param action_space: The overall action space of the entire task, not task specific.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "config", ",", "action_space", ",", "batch_size", ",", "should_keep_hold_state", "\n", ")", "\n", "self", ".", "_wrap_policy", "=", "wrap_policy", "\n", "self", ".", "_filtered_obs_space", "=", "filtered_obs_space", "\n", "self", ".", "_filtered_action_space", "=", "filtered_action_space", "\n", "self", ".", "_ac_start", "=", "0", "\n", "self", ".", "_ac_len", "=", "get_num_actions", "(", "filtered_action_space", ")", "\n", "\n", "for", "k", ",", "space", "in", "action_space", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "not", "in", "filtered_action_space", ".", "spaces", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "_ac_start", "+=", "get_num_actions", "(", "space", ")", "\n", "", "else", ":", "\n", "                ", "break", "\n", "\n", "", "", "self", ".", "_internal_log", "(", "\n", "f\"Skill {self._config.skill_name}: action offset {self._ac_start}, action length {self._ac_len}\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.nn_skill.NnSkillPolicy.parameters": [[62, 67], ["nn_skill.NnSkillPolicy._wrap_policy.parameters"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.nn_skill.NnSkillPolicy.parameters"], ["", "def", "parameters", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_wrap_policy", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "_wrap_policy", ".", "parameters", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.nn_skill.NnSkillPolicy.num_recurrent_layers": [[68, 74], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "num_recurrent_layers", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_wrap_policy", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "_wrap_policy", ".", "net", ".", "num_recurrent_layers", "\n", "", "else", ":", "\n", "            ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.nn_skill.NnSkillPolicy.to": [[75, 79], ["super().to", "nn_skill.NnSkillPolicy._wrap_policy.to"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to"], ["", "", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "super", "(", ")", ".", "to", "(", "device", ")", "\n", "if", "self", ".", "_wrap_policy", "is", "not", "None", ":", "\n", "            ", "self", ".", "_wrap_policy", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.nn_skill.NnSkillPolicy._get_filtered_obs": [[80, 85], ["habitat_baselines.common.tensor_dict.TensorDict", "nn_skill.NnSkillPolicy._filtered_obs_space.spaces.keys"], "methods", ["None"], ["", "", "def", "_get_filtered_obs", "(", "self", ",", "observations", ",", "cur_batch_idx", ")", "->", "TensorDict", ":", "\n", "        ", "return", "TensorDict", "(", "\n", "{", "\n", "k", ":", "observations", "[", "k", "]", "\n", "for", "k", "in", "self", ".", "_filtered_obs_space", ".", "spaces", ".", "keys", "(", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.nn_skill.NnSkillPolicy._internal_act": [[88, 114], ["nn_skill.NnSkillPolicy._get_filtered_obs", "nn_skill.NnSkillPolicy._select_obs", "nn_skill.NnSkillPolicy._wrap_policy.act", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.nav.NavSkillPolicy._get_filtered_obs", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.skill.SkillPolicy._select_obs", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.policy.NetPolicy.act"], ["", "def", "_internal_act", "(", "\n", "self", ",", "\n", "observations", ",", "\n", "rnn_hidden_states", ",", "\n", "prev_actions", ",", "\n", "masks", ",", "\n", "cur_batch_idx", ",", "\n", "deterministic", "=", "False", ",", "\n", ")", ":", "\n", "        ", "filtered_obs", "=", "self", ".", "_get_filtered_obs", "(", "observations", ",", "cur_batch_idx", ")", "\n", "\n", "filtered_prev_actions", "=", "prev_actions", "[", "\n", ":", ",", "self", ".", "_ac_start", ":", "self", ".", "_ac_start", "+", "self", ".", "_ac_len", "\n", "]", "\n", "filtered_obs", "=", "self", ".", "_select_obs", "(", "filtered_obs", ",", "cur_batch_idx", ")", "\n", "\n", "_", ",", "action", ",", "_", ",", "rnn_hidden_states", "=", "self", ".", "_wrap_policy", ".", "act", "(", "\n", "filtered_obs", ",", "\n", "rnn_hidden_states", ",", "\n", "filtered_prev_actions", ",", "\n", "masks", ",", "\n", "deterministic", ",", "\n", ")", "\n", "full_action", "=", "torch", ".", "zeros", "(", "prev_actions", ".", "shape", ")", "\n", "full_action", "[", ":", ",", "self", ".", "_ac_start", ":", "self", ".", "_ac_start", "+", "self", ".", "_ac_len", "]", "=", "action", "\n", "return", "full_action", ",", "rnn_hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.nn_skill.NnSkillPolicy.from_config": [[115, 201], ["torch.load", "habitat_baselines.common.baseline_registry.baseline_registry.get_policy", "gym.Dict", "habitat_baselines.common.logging.baselines_logger.debug", "habitat.core.spaces.ActionSpace", "habitat_baselines.common.logging.baselines_logger.debug", "habitat_baselines.common.baseline_registry.baseline_registry.get_policy.from_config", "cls", "len", "ValueError", "policy_cfg.defrost", "habitat.config.Config", "list", "policy_cfg.freeze", "nn_skill.truncate_obs_space", "gym.Dict", "baseline_registry.get_policy.from_config.load_state_dict", "set", "ValueError", "filtered_action_space[].items", "ckpt_dict[].items", "len"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.load", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.baseline_registry.BaselineRegistry.get_policy", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.Equirect2CubeMap.from_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.nn_skill.truncate_obs_space", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.set"], ["", "@", "classmethod", "\n", "def", "from_config", "(", "cls", ",", "config", ",", "observation_space", ",", "action_space", ",", "batch_size", ")", ":", "\n", "# Load the wrap policy from file", "\n", "        ", "if", "len", "(", "config", ".", "LOAD_CKPT_FILE", ")", "==", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "f\"Skill {config.skill_name}: Need to specify LOAD_CKPT_FILE\"", "\n", ")", "\n", "\n", "", "ckpt_dict", "=", "torch", ".", "load", "(", "config", ".", "LOAD_CKPT_FILE", ",", "map_location", "=", "\"cpu\"", ")", "\n", "policy", "=", "baseline_registry", ".", "get_policy", "(", "config", ".", "name", ")", "\n", "policy_cfg", "=", "ckpt_dict", "[", "\"config\"", "]", "\n", "\n", "if", "\"GYM\"", "not", "in", "policy_cfg", ".", "TASK_CONFIG", ":", "\n", "# Support loading legacy policies", "\n", "# TODO: Remove this eventually and drop support for policies", "\n", "# trained on older version of codebase.", "\n", "            ", "policy_cfg", ".", "defrost", "(", ")", "\n", "policy_cfg", ".", "TASK_CONFIG", ".", "GYM", "=", "CN", "(", ")", "\n", "policy_cfg", ".", "TASK_CONFIG", ".", "GYM", ".", "OBS_KEYS", "=", "list", "(", "\n", "set", "(", "\n", "policy_cfg", ".", "RL", ".", "POLICY", ".", "include_visual_keys", "\n", "+", "policy_cfg", ".", "RL", ".", "GYM_OBS_KEYS", "\n", ")", "\n", ")", "\n", "policy_cfg", ".", "freeze", "(", ")", "\n", "\n", "", "expected_obs_keys", "=", "policy_cfg", ".", "TASK_CONFIG", ".", "GYM", ".", "OBS_KEYS", "\n", "filtered_obs_space", "=", "spaces", ".", "Dict", "(", "\n", "{", "k", ":", "observation_space", ".", "spaces", "[", "k", "]", "for", "k", "in", "expected_obs_keys", "}", "\n", ")", "\n", "\n", "for", "k", "in", "config", ".", "OBS_SKILL_INPUTS", ":", "\n", "            ", "space", "=", "filtered_obs_space", ".", "spaces", "[", "k", "]", "\n", "# There is always a 3D position", "\n", "filtered_obs_space", ".", "spaces", "[", "k", "]", "=", "truncate_obs_space", "(", "space", ",", "3", ")", "\n", "", "baselines_logger", ".", "debug", "(", "\n", "f\"Skill {config.skill_name}: Loaded observation space {filtered_obs_space}\"", ",", "\n", ")", "\n", "\n", "filtered_action_space", "=", "ActionSpace", "(", "\n", "{", "\n", "k", ":", "action_space", "[", "k", "]", "\n", "for", "k", "in", "policy_cfg", ".", "TASK_CONFIG", ".", "TASK", ".", "POSSIBLE_ACTIONS", "\n", "}", "\n", ")", "\n", "\n", "if", "\"ARM_ACTION\"", "in", "filtered_action_space", ".", "spaces", "and", "(", "\n", "policy_cfg", ".", "TASK_CONFIG", ".", "TASK", ".", "ACTIONS", ".", "ARM_ACTION", ".", "GRIP_CONTROLLER", "\n", "is", "None", "\n", ")", ":", "\n", "            ", "filtered_action_space", "[", "\"ARM_ACTION\"", "]", "=", "spaces", ".", "Dict", "(", "\n", "{", "\n", "k", ":", "v", "\n", "for", "k", ",", "v", "in", "filtered_action_space", "[", "\"ARM_ACTION\"", "]", ".", "items", "(", ")", "\n", "if", "k", "!=", "\"grip_action\"", "\n", "}", "\n", ")", "\n", "\n", "", "baselines_logger", ".", "debug", "(", "\n", "f\"Loaded action space {filtered_action_space} for skill {config.skill_name}\"", ",", "\n", ")", "\n", "\n", "actor_critic", "=", "policy", ".", "from_config", "(", "\n", "policy_cfg", ",", "filtered_obs_space", ",", "filtered_action_space", "\n", ")", "\n", "\n", "try", ":", "\n", "            ", "actor_critic", ".", "load_state_dict", "(", "\n", "{", "# type: ignore", "\n", "k", "[", "len", "(", "\"actor_critic.\"", ")", ":", "]", ":", "v", "\n", "for", "k", ",", "v", "in", "ckpt_dict", "[", "\"state_dict\"", "]", ".", "items", "(", ")", "\n", "}", "\n", ")", "\n", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "f\"Could not load checkpoint for skill {config.skill_name} from {config.LOAD_CKPT_FILE}\"", "\n", ")", "from", "e", "\n", "\n", "", "return", "cls", "(", "\n", "actor_critic", ",", "\n", "config", ",", "\n", "action_space", ",", "\n", "filtered_obs_space", ",", "\n", "filtered_action_space", ",", "\n", "batch_size", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.nn_skill.truncate_obs_space": [[14, 22], ["gym.Box"], "function", ["None"], ["def", "truncate_obs_space", "(", "space", ":", "spaces", ".", "Box", ",", "truncate_len", ":", "int", ")", "->", "spaces", ".", "Box", ":", "\n", "    ", "\"\"\"\n    Returns an observation space with taking on the first `truncate_len` elements of the space.\n    \"\"\"", "\n", "return", "spaces", ".", "Box", "(", "\n", "low", "=", "space", ".", "low", "[", "...", ",", ":", "truncate_len", "]", ",", "\n", "high", "=", "space", ".", "high", "[", "...", ",", ":", "truncate_len", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.reset.ResetArmSkill.__init__": [[12, 27], ["habitat_baselines.rl.hrl.skills.skill.SkillPolicy.__init__", "numpy.array", "action_space.items", "float", "habitat_baselines.utils.common.get_num_actions"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.get_num_actions"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "config", ",", "\n", "action_space", ":", "spaces", ".", "Space", ",", "\n", "batch_size", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ",", "action_space", ",", "batch_size", ",", "True", ")", "\n", "self", ".", "_target", "=", "np", ".", "array", "(", "[", "float", "(", "x", ")", "for", "x", "in", "config", ".", "RESET_JOINT_STATE", "]", ")", "\n", "\n", "self", ".", "_ac_start", "=", "0", "\n", "for", "k", ",", "space", "in", "action_space", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "!=", "\"ARM_ACTION\"", ":", "\n", "                ", "self", ".", "_ac_start", "+=", "get_num_actions", "(", "space", ")", "\n", "", "else", ":", "\n", "                ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.reset.ResetArmSkill.on_enter": [[28, 45], ["super().on_enter", "observations[].cpu().numpy", "observations[].cpu"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.oracle_nav.OracleNavPolicy.on_enter"], ["", "", "", "def", "on_enter", "(", "\n", "self", ",", "\n", "skill_arg", ":", "List", "[", "str", "]", ",", "\n", "batch_idx", ":", "int", ",", "\n", "observations", ",", "\n", "rnn_hidden_states", ",", "\n", "prev_actions", ",", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "ret", "=", "super", "(", ")", ".", "on_enter", "(", "\n", "skill_arg", ",", "batch_idx", ",", "observations", ",", "rnn_hidden_states", ",", "prev_actions", "\n", ")", "\n", "\n", "self", ".", "_initial_delta", "=", "(", "\n", "self", ".", "_target", "-", "observations", "[", "\"joint\"", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", ")", "\n", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.reset.ResetArmSkill._parse_skill_arg": [[46, 48], ["None"], "methods", ["None"], ["", "def", "_parse_skill_arg", "(", "self", ",", "skill_arg", ":", "str", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.reset.ResetArmSkill._is_skill_done": [[49, 61], ["observations[].cpu().numpy", "torch.as_tensor", "observations[].cpu", "numpy.abs().max", "numpy.abs"], "methods", ["None"], ["", "def", "_is_skill_done", "(", "\n", "self", ",", "observations", ",", "rnn_hidden_states", ",", "prev_actions", ",", "masks", "\n", ")", ":", "\n", "        ", "current_joint_pos", "=", "observations", "[", "\"joint\"", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "return", "(", "\n", "torch", ".", "as_tensor", "(", "\n", "np", ".", "abs", "(", "current_joint_pos", "-", "self", ".", "_target", ")", ".", "max", "(", "-", "1", ")", ",", "\n", "device", "=", "rnn_hidden_states", ".", "device", ",", "\n", "dtype", "=", "torch", ".", "float32", ",", "\n", ")", "\n", "<", "5e-2", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.reset.ResetArmSkill._internal_act": [[63, 89], ["observations[].cpu().numpy", "torch.zeros_like", "torch.from_numpy().to", "numpy.maximum", "observations[].cpu", "reset.ResetArmSkill._initial_delta.max", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to"], ["", "def", "_internal_act", "(", "\n", "self", ",", "\n", "observations", ",", "\n", "rnn_hidden_states", ",", "\n", "prev_actions", ",", "\n", "masks", ",", "\n", "cur_batch_idx", ",", "\n", "deterministic", "=", "False", ",", "\n", ")", ":", "\n", "        ", "current_joint_pos", "=", "observations", "[", "\"joint\"", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "delta", "=", "self", ".", "_target", "-", "current_joint_pos", "\n", "\n", "# Dividing by max initial delta means that the action will", "\n", "# always in [-1,1] and has the benefit of reducing the delta", "\n", "# amount was we converge to the target.", "\n", "delta", "=", "delta", "/", "np", ".", "maximum", "(", "\n", "self", ".", "_initial_delta", ".", "max", "(", "-", "1", ",", "keepdims", "=", "True", ")", ",", "1e-5", "\n", ")", "\n", "\n", "action", "=", "torch", ".", "zeros_like", "(", "prev_actions", ")", "\n", "\n", "action", "[", "...", ",", "self", ".", "_ac_start", ":", "self", ".", "_ac_start", "+", "7", "]", "=", "torch", ".", "from_numpy", "(", "\n", "delta", "\n", ")", ".", "to", "(", "device", "=", "action", ".", "device", ",", "dtype", "=", "action", ".", "dtype", ")", "\n", "\n", "return", "action", ",", "rnn_hidden_states", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.pick.PickSkillPolicy._is_skill_done": [[11, 26], ["torch.norm", "observations[].view"], "methods", ["None"], ["    ", "def", "_is_skill_done", "(", "\n", "self", ",", "\n", "observations", ",", "\n", "rnn_hidden_states", ",", "\n", "prev_actions", ",", "\n", "masks", ",", "\n", ")", "->", "torch", ".", "BoolTensor", ":", "\n", "# Is the agent holding the object and is the end-effector at the", "\n", "# resting position?", "\n", "        ", "rel_resting_pos", "=", "torch", ".", "norm", "(", "\n", "observations", "[", "RelativeRestingPositionSensor", ".", "cls_uuid", "]", ",", "dim", "=", "-", "1", "\n", ")", "\n", "is_within_thresh", "=", "rel_resting_pos", "<", "self", ".", "_config", ".", "AT_RESTING_THRESHOLD", "\n", "is_holding", "=", "observations", "[", "IsHoldingSensor", ".", "cls_uuid", "]", ".", "view", "(", "-", "1", ")", "\n", "return", "(", "is_holding", "*", "is_within_thresh", ")", ".", "type", "(", "torch", ".", "bool", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.pick.PickSkillPolicy._parse_skill_arg": [[27, 30], ["pick.PickSkillPolicy._internal_log", "int", "skill_arg[].split"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.skill.SkillPolicy._internal_log"], ["", "def", "_parse_skill_arg", "(", "self", ",", "skill_arg", ")", ":", "\n", "        ", "self", ".", "_internal_log", "(", "f\"Parsing skill argument {skill_arg}\"", ")", "\n", "return", "int", "(", "skill_arg", "[", "0", "]", ".", "split", "(", "\"|\"", ")", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.pick.PickSkillPolicy._mask_pick": [[31, 38], ["observations[].view", "torch.nonzero"], "methods", ["None"], ["", "def", "_mask_pick", "(", "self", ",", "action", ",", "observations", ")", ":", "\n", "# Mask out the release if the object is already held.", "\n", "        ", "is_holding", "=", "observations", "[", "IsHoldingSensor", ".", "cls_uuid", "]", ".", "view", "(", "-", "1", ")", "\n", "for", "i", "in", "torch", ".", "nonzero", "(", "is_holding", ")", ":", "\n", "# Do not release the object once it is held", "\n", "            ", "action", "[", "i", ",", "self", ".", "_ac_start", "+", "self", ".", "_ac_len", "-", "1", "]", "=", "1.0", "\n", "", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.pick.PickSkillPolicy._internal_act": [[39, 58], ["super()._internal_act", "pick.PickSkillPolicy._mask_pick"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.wait.WaitSkillPolicy._internal_act", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.place.PlaceSkillPolicy._mask_pick"], ["", "def", "_internal_act", "(", "\n", "self", ",", "\n", "observations", ",", "\n", "rnn_hidden_states", ",", "\n", "prev_actions", ",", "\n", "masks", ",", "\n", "cur_batch_idx", ",", "\n", "deterministic", "=", "False", ",", "\n", ")", ":", "\n", "        ", "action", ",", "hxs", "=", "super", "(", ")", ".", "_internal_act", "(", "\n", "observations", ",", "\n", "rnn_hidden_states", ",", "\n", "prev_actions", ",", "\n", "masks", ",", "\n", "cur_batch_idx", ",", "\n", "deterministic", ",", "\n", ")", "\n", "action", "=", "self", ".", "_mask_pick", "(", "action", ",", "observations", ")", "\n", "return", "action", ",", "hxs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.nav.NavSkillPolicy.__init__": [[23, 40], ["habitat_baselines.rl.hrl.skills.nn_skill.NnSkillPolicy.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["from", "habitat", ".", "core", ".", "logging", "import", "logger", "\n", "from", "habitat", ".", "core", ".", "registry", "import", "registry", "\n", "from", "habitat", ".", "core", ".", "simulator", "import", "(", "\n", "AgentState", ",", "\n", "RGBSensor", ",", "\n", "Sensor", ",", "\n", "SensorTypes", ",", "\n", "ShortestPathPoint", ",", "\n", "Simulator", ",", "\n", ")", "\n", "from", "habitat", ".", "core", ".", "spaces", "import", "ActionSpace", "\n", "from", "habitat", ".", "core", ".", "utils", "import", "not_none_validator", ",", "try_cv2_import", "\n", "from", "habitat", ".", "sims", ".", "habitat_simulator", ".", "actions", "import", "HabitatSimActions", "\n", "from", "habitat", ".", "tasks", ".", "utils", "import", "cartesian_to_polar", "\n", "from", "habitat", ".", "utils", ".", "geometry_utils", "import", "(", "\n", "quaternion_from_coeff", ",", "\n", "quaternion_rotate_vector", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.nav.NavSkillPolicy._get_filtered_obs": [[42, 54], ["super()._get_filtered_obs"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.nav.NavSkillPolicy._get_filtered_obs"], ["\n", "try", ":", "\n", "    ", "from", "habitat", ".", "sims", ".", "habitat_simulator", ".", "habitat_simulator", "import", "HabitatSim", "\n", "from", "habitat_sim", "import", "RigidState", "\n", "from", "habitat_sim", ".", "physics", "import", "VelocityControl", "\n", "", "except", "ImportError", ":", "\n", "    ", "pass", "\n", "\n", "", "try", ":", "\n", "    ", "import", "magnum", "as", "mn", "\n", "", "except", "ImportError", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.nav.NavSkillPolicy._get_multi_sensor_index": [[55, 57], ["None"], "methods", ["None"], ["", "cv2", "=", "try_cv2_import", "(", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.nav.NavSkillPolicy._is_skill_done": [[58, 78], ["torch.abs", "torch.abs"], "methods", ["None"], ["MAP_THICKNESS_SCALAR", ":", "int", "=", "128", "\n", "\n", "\n", "def", "merge_sim_episode_config", "(", "sim_config", ":", "Config", ",", "episode", ":", "Episode", ")", "->", "Any", ":", "\n", "    ", "sim_config", ".", "defrost", "(", ")", "\n", "sim_config", ".", "SCENE", "=", "episode", ".", "scene_id", "\n", "sim_config", ".", "freeze", "(", ")", "\n", "if", "(", "\n", "episode", ".", "start_position", "is", "not", "None", "\n", "and", "episode", ".", "start_rotation", "is", "not", "None", "\n", ")", ":", "\n", "        ", "agent_name", "=", "sim_config", ".", "AGENTS", "[", "sim_config", ".", "DEFAULT_AGENT_ID", "]", "\n", "agent_cfg", "=", "getattr", "(", "sim_config", ",", "agent_name", ")", "\n", "agent_cfg", ".", "defrost", "(", ")", "\n", "agent_cfg", ".", "START_POSITION", "=", "episode", ".", "start_position", "\n", "agent_cfg", ".", "START_ROTATION", "=", "episode", ".", "start_rotation", "\n", "agent_cfg", ".", "IS_SET_START_STATE", "=", "True", "\n", "agent_cfg", ".", "freeze", "(", ")", "\n", "", "return", "sim_config", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.nav.NavSkillPolicy._parse_skill_arg": [[79, 83], ["skill_arg[].split", "NavSkillPolicy.NavArgs", "int", "targ_name.startswith"], "methods", ["None"], ["", "@", "attr", ".", "s", "(", "auto_attribs", "=", "True", ",", "kw_only", "=", "True", ")", "\n", "class", "NavigationGoal", ":", "\n", "    ", "r\"\"\"Base class for a goal specification hierarchy.\"\"\"", "\n", "\n", "position", ":", "List", "[", "float", "]", "=", "attr", ".", "ib", "(", "default", "=", "None", ",", "validator", "=", "not_none_validator", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.skill.SkillPolicy.__init__": [[13, 45], ["torch.zeros", "action_space.items", "ValueError", "range", "habitat_baselines.utils.common.get_num_actions", "habitat_baselines.utils.common.get_num_actions"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.get_num_actions", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.get_num_actions"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "config", ",", "\n", "action_space", ":", "spaces", ".", "Space", ",", "\n", "batch_size", ",", "\n", "should_keep_hold_state", ":", "bool", "=", "False", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        :param action_space: The overall action space of the entire task, not task specific.\n        \"\"\"", "\n", "self", ".", "_config", "=", "config", "\n", "self", ".", "_batch_size", "=", "batch_size", "\n", "\n", "self", ".", "_cur_skill_step", "=", "torch", ".", "zeros", "(", "self", ".", "_batch_size", ")", "\n", "self", ".", "_should_keep_hold_state", "=", "should_keep_hold_state", "\n", "\n", "self", ".", "_cur_skill_args", ":", "List", "[", "Any", "]", "=", "[", "\n", "None", "for", "_", "in", "range", "(", "self", ".", "_batch_size", ")", "\n", "]", "\n", "\n", "self", ".", "_grip_ac_idx", "=", "0", "\n", "found_grip", "=", "False", "\n", "for", "k", ",", "space", "in", "action_space", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "!=", "\"ARM_ACTION\"", ":", "\n", "                ", "self", ".", "_grip_ac_idx", "+=", "get_num_actions", "(", "space", ")", "\n", "", "else", ":", "\n", "# The last actioin in the arm action is the grip action.", "\n", "                ", "self", ".", "_grip_ac_idx", "+=", "get_num_actions", "(", "space", ")", "-", "1", "\n", "found_grip", "=", "True", "\n", "break", "\n", "", "", "if", "not", "found_grip", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Could not find grip action in {action_space}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.skill.SkillPolicy._internal_log": [[46, 49], ["habitat_baselines.common.logging.baselines_logger.debug"], "methods", ["None"], ["", "", "def", "_internal_log", "(", "self", ",", "s", ",", "observations", "=", "None", ")", ":", "\n", "        ", "baselines_logger", ".", "debug", "(", "\n", "f\"Skill {self._config.skill_name} @ step {self._cur_skill_step}: {s}\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.skill.SkillPolicy._get_multi_sensor_index": [[51, 58], ["None"], "methods", ["None"], ["", "def", "_get_multi_sensor_index", "(", "self", ",", "batch_idx", ":", "int", ",", "sensor_name", ":", "str", ")", "->", "int", ":", "\n", "        ", "\"\"\"\n        Gets the index to select the observation object index in `_select_obs`.\n        Used when there are multiple possible goals in the scene, such as\n        multiple objects to possibly rearrange.\n        \"\"\"", "\n", "return", "self", ".", "_cur_skill_args", "[", "batch_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.skill.SkillPolicy._keep_holding_state": [[59, 73], ["observations[].view"], "methods", ["None"], ["", "def", "_keep_holding_state", "(", "\n", "self", ",", "full_action", ":", "torch", ".", "Tensor", ",", "observations", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Makes the action so it does not result in dropping or picking up an\n        object. Used in navigation and other skills which are not supposed to\n        interact through the gripper.\n        \"\"\"", "\n", "# Keep the same grip state as the previous action.", "\n", "is_holding", "=", "observations", "[", "IsHoldingSensor", ".", "cls_uuid", "]", ".", "view", "(", "-", "1", ")", "\n", "# If it is not holding (0) want to keep releasing -> output -1.", "\n", "# If it is holding (1) want to keep grasping -> output +1.", "\n", "full_action", "[", ":", ",", "self", ".", "_grip_ac_idx", "]", "=", "is_holding", "+", "(", "is_holding", "-", "1.0", ")", "\n", "return", "full_action", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.skill.SkillPolicy.should_terminate": [[74, 112], ["skill.SkillPolicy._is_skill_done", "torch.zeros", "skill.SkillPolicy.sum", "skill.SkillPolicy._internal_log", "torch.zeros.sum", "skill.SkillPolicy._internal_log"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.wait.WaitSkillPolicy._is_skill_done", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.skill.SkillPolicy._internal_log", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.skill.SkillPolicy._internal_log"], ["", "def", "should_terminate", "(", "\n", "self", ",", "\n", "observations", ",", "\n", "rnn_hidden_states", ",", "\n", "prev_actions", ",", "\n", "masks", ",", "\n", ")", "->", "Tuple", "[", "torch", ".", "BoolTensor", ",", "torch", ".", "BoolTensor", "]", ":", "\n", "        ", "\"\"\"\n        :returns: A (batch_size,) size tensor where 1 indicates the skill wants to end and 0 if not.\n        \"\"\"", "\n", "is_skill_done", "=", "self", ".", "_is_skill_done", "(", "\n", "observations", ",", "rnn_hidden_states", ",", "prev_actions", ",", "masks", "\n", ")", "\n", "if", "is_skill_done", ".", "sum", "(", ")", ">", "0", ":", "\n", "            ", "self", ".", "_internal_log", "(", "\n", "f\"Requested skill termination {is_skill_done}\"", ",", "\n", "observations", ",", "\n", ")", "\n", "\n", "", "bad_terminate", "=", "torch", ".", "zeros", "(", "\n", "self", ".", "_cur_skill_step", ".", "shape", ",", "\n", "device", "=", "self", ".", "_cur_skill_step", ".", "device", ",", "\n", "dtype", "=", "torch", ".", "bool", ",", "\n", ")", "\n", "if", "self", ".", "_config", ".", "MAX_SKILL_STEPS", ">", "0", ":", "\n", "            ", "over_max_len", "=", "self", ".", "_cur_skill_step", ">", "self", ".", "_config", ".", "MAX_SKILL_STEPS", "\n", "if", "self", ".", "_config", ".", "FORCE_END_ON_TIMEOUT", ":", "\n", "                ", "bad_terminate", "=", "over_max_len", "\n", "", "else", ":", "\n", "                ", "is_skill_done", "=", "is_skill_done", "|", "over_max_len", "\n", "\n", "", "", "if", "bad_terminate", ".", "sum", "(", ")", ">", "0", ":", "\n", "            ", "self", ".", "_internal_log", "(", "\n", "f\"Bad terminating due to timeout {self._cur_skill_step}, {bad_terminate}\"", ",", "\n", "observations", ",", "\n", ")", "\n", "\n", "", "return", "is_skill_done", ",", "bad_terminate", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.skill.SkillPolicy.on_enter": [[113, 136], ["skill.SkillPolicy._parse_skill_arg", "skill.SkillPolicy._internal_log"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.wait.WaitSkillPolicy._parse_skill_arg", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.skill.SkillPolicy._internal_log"], ["", "def", "on_enter", "(", "\n", "self", ",", "\n", "skill_arg", ":", "List", "[", "str", "]", ",", "\n", "batch_idx", ":", "int", ",", "\n", "observations", ",", "\n", "rnn_hidden_states", ",", "\n", "prev_actions", ",", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        Passes in the data at the current `batch_idx`\n        :returns: The new hidden state and prev_actions ONLY at the batch_idx.\n        \"\"\"", "\n", "self", ".", "_cur_skill_step", "[", "batch_idx", "]", "=", "0", "\n", "self", ".", "_cur_skill_args", "[", "batch_idx", "]", "=", "self", ".", "_parse_skill_arg", "(", "skill_arg", ")", "\n", "\n", "self", ".", "_internal_log", "(", "\n", "f\"Entering skill with arguments {skill_arg} parsed to {self._cur_skill_args[batch_idx]}\"", ",", "\n", "observations", ",", "\n", ")", "\n", "\n", "return", "(", "\n", "rnn_hidden_states", "[", "batch_idx", "]", "*", "0.0", ",", "\n", "prev_actions", "[", "batch_idx", "]", "*", "0.0", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.skill.SkillPolicy.from_config": [[138, 141], ["cls"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_config", "(", "cls", ",", "config", ",", "observation_space", ",", "action_space", ",", "batch_size", ")", ":", "\n", "        ", "return", "cls", "(", "config", ",", "action_space", ",", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.skill.SkillPolicy.act": [[142, 167], ["skill.SkillPolicy._internal_act", "skill.SkillPolicy._keep_holding_state"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.wait.WaitSkillPolicy._internal_act", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.skill.SkillPolicy._keep_holding_state"], ["", "def", "act", "(", "\n", "self", ",", "\n", "observations", ",", "\n", "rnn_hidden_states", ",", "\n", "prev_actions", ",", "\n", "masks", ",", "\n", "cur_batch_idx", ",", "\n", "deterministic", "=", "False", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        :returns: Predicted action and next rnn hidden state.\n        \"\"\"", "\n", "self", ".", "_cur_skill_step", "[", "cur_batch_idx", "]", "+=", "1", "\n", "action", ",", "hxs", "=", "self", ".", "_internal_act", "(", "\n", "observations", ",", "\n", "rnn_hidden_states", ",", "\n", "prev_actions", ",", "\n", "masks", ",", "\n", "cur_batch_idx", ",", "\n", "deterministic", ",", "\n", ")", "\n", "\n", "if", "self", ".", "_should_keep_hold_state", ":", "\n", "            ", "action", "=", "self", ".", "_keep_holding_state", "(", "action", ",", "observations", ")", "\n", "", "return", "action", ",", "hxs", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.skill.SkillPolicy.to": [[168, 170], ["skill.SkillPolicy._cur_skill_step.to"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to"], ["", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "self", ".", "_cur_skill_step", "=", "self", ".", "_cur_skill_step", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.skill.SkillPolicy._select_obs": [[171, 188], ["skill.SkillPolicy._get_multi_sensor_index", "obs[].view", "ValueError", "skill.SkillPolicy._config.get", "obs.keys"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.oracle_nav.OracleNavPolicy._get_multi_sensor_index", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get"], ["", "def", "_select_obs", "(", "self", ",", "obs", ",", "cur_batch_idx", ")", ":", "\n", "        ", "\"\"\"\n        Selects out the part of the observation that corresponds to the current goal of the skill.\n        \"\"\"", "\n", "for", "k", "in", "self", ".", "_config", ".", "OBS_SKILL_INPUTS", ":", "\n", "            ", "cur_multi_sensor_index", "=", "self", ".", "_get_multi_sensor_index", "(", "\n", "cur_batch_idx", ",", "k", "\n", ")", "\n", "if", "k", "not", "in", "obs", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "f\"Skill {self._config.skill_name}: Could not find {k} out of {obs.keys()}\"", "\n", ")", "\n", "", "entity_positions", "=", "obs", "[", "k", "]", ".", "view", "(", "\n", "1", ",", "-", "1", ",", "self", ".", "_config", ".", "get", "(", "\"OBS_SKILL_INPUT_DIM\"", ",", "3", ")", "\n", ")", "\n", "obs", "[", "k", "]", "=", "entity_positions", "[", ":", ",", "cur_multi_sensor_index", "]", "\n", "", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.skill.SkillPolicy._is_skill_done": [[189, 201], ["torch.zeros().to", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to"], ["", "def", "_is_skill_done", "(", "\n", "self", ",", "\n", "observations", ",", "\n", "rnn_hidden_states", ",", "\n", "prev_actions", ",", "\n", "masks", ",", "\n", ")", "->", "torch", ".", "BoolTensor", ":", "\n", "        ", "\"\"\"\n        :returns: A (batch_size,) size tensor where 1 indicates the skill wants to end and 0 if not.\n        \"\"\"", "\n", "return", "torch", ".", "zeros", "(", "observations", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "bool", ")", ".", "to", "(", "\n", "masks", ".", "device", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.skill.SkillPolicy._parse_skill_arg": [[203, 208], ["None"], "methods", ["None"], ["", "def", "_parse_skill_arg", "(", "self", ",", "skill_arg", ":", "str", ")", "->", "Any", ":", "\n", "        ", "\"\"\"\n        Parses the skill argument string identifier and returns parsed skill argument information.\n        \"\"\"", "\n", "return", "skill_arg", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.skill.SkillPolicy._internal_act": [[209, 219], ["NotImplementedError"], "methods", ["None"], ["", "def", "_internal_act", "(", "\n", "self", ",", "\n", "observations", ",", "\n", "rnn_hidden_states", ",", "\n", "prev_actions", ",", "\n", "masks", ",", "\n", "cur_batch_idx", ",", "\n", "deterministic", "=", "False", ",", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.place.PlaceSkillPolicy._get_multi_sensor_index": [[18, 20], ["None"], "methods", ["None"], ["", "def", "_get_multi_sensor_index", "(", "self", ",", "batch_idx", ":", "int", ",", "sensor_name", ":", "str", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "_cur_skill_args", "[", "batch_idx", "]", ".", "targ", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.place.PlaceSkillPolicy._mask_pick": [[21, 28], ["torch.nonzero", "observations[].view"], "methods", ["None"], ["", "def", "_mask_pick", "(", "self", ",", "action", ",", "observations", ")", ":", "\n", "# Mask out the grasp if the object is already released.", "\n", "        ", "is_not_holding", "=", "1", "-", "observations", "[", "IsHoldingSensor", ".", "cls_uuid", "]", ".", "view", "(", "-", "1", ")", "\n", "for", "i", "in", "torch", ".", "nonzero", "(", "is_not_holding", ")", ":", "\n", "# Do not regrasp the object once it is released.", "\n", "            ", "action", "[", "i", ",", "self", ".", "_ac_start", "+", "self", ".", "_ac_len", "-", "1", "]", "=", "-", "1.0", "\n", "", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.place.PlaceSkillPolicy._is_skill_done": [[29, 52], ["torch.norm", "observations[].view().type", "is_done.sum", "place.PlaceSkillPolicy._internal_log", "observations[].view"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.skill.SkillPolicy._internal_log"], ["", "def", "_is_skill_done", "(", "\n", "self", ",", "\n", "observations", ",", "\n", "rnn_hidden_states", ",", "\n", "prev_actions", ",", "\n", "masks", ",", "\n", ")", "->", "torch", ".", "BoolTensor", ":", "\n", "# Is the agent not holding an object and is the end-effector at the", "\n", "# resting position?", "\n", "        ", "rel_resting_pos", "=", "torch", ".", "norm", "(", "\n", "observations", "[", "RelativeRestingPositionSensor", ".", "cls_uuid", "]", ",", "dim", "=", "-", "1", "\n", ")", "\n", "is_within_thresh", "=", "rel_resting_pos", "<", "self", ".", "_config", ".", "AT_RESTING_THRESHOLD", "\n", "is_holding", "=", "(", "\n", "observations", "[", "IsHoldingSensor", ".", "cls_uuid", "]", ".", "view", "(", "-", "1", ")", ".", "type", "(", "torch", ".", "bool", ")", "\n", ")", "\n", "is_done", "=", "is_within_thresh", "&", "(", "~", "is_holding", ")", "\n", "if", "is_done", ".", "sum", "(", ")", ">", "0", ":", "\n", "            ", "self", ".", "_internal_log", "(", "\n", "f\"Terminating with {rel_resting_pos} and {is_holding}\"", ",", "\n", "observations", ",", "\n", ")", "\n", "", "return", "is_done", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.place.PlaceSkillPolicy._parse_skill_arg": [[53, 57], ["int", "int", "PlaceSkillPolicy.PlaceSkillArgs", "skill_arg[].split", "skill_arg[].split"], "methods", ["None"], ["", "def", "_parse_skill_arg", "(", "self", ",", "skill_arg", ")", ":", "\n", "        ", "obj", "=", "int", "(", "skill_arg", "[", "0", "]", ".", "split", "(", "\"|\"", ")", "[", "1", "]", ")", "\n", "targ", "=", "int", "(", "skill_arg", "[", "1", "]", ".", "split", "(", "\"|\"", ")", "[", "1", "]", ")", "\n", "return", "PlaceSkillPolicy", ".", "PlaceSkillArgs", "(", "obj", "=", "obj", ",", "targ", "=", "targ", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.art_obj.ArtObjSkillPolicy.on_enter": [[13, 29], ["super().on_enter", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.oracle_nav.OracleNavPolicy.on_enter"], ["    ", "def", "on_enter", "(", "\n", "self", ",", "\n", "skill_arg", ":", "List", "[", "str", "]", ",", "\n", "batch_idx", ":", "int", ",", "\n", "observations", ",", "\n", "rnn_hidden_states", ",", "\n", "prev_actions", ",", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "super", "(", ")", ".", "on_enter", "(", "\n", "skill_arg", ",", "batch_idx", ",", "observations", ",", "rnn_hidden_states", ",", "prev_actions", "\n", ")", "\n", "self", ".", "_did_leave_start_zone", "=", "torch", ".", "zeros", "(", "\n", "self", ".", "_batch_size", ",", "device", "=", "prev_actions", ".", "device", "\n", ")", "\n", "self", ".", "_episode_start_resting_pos", "=", "observations", "[", "\n", "RelativeRestingPositionSensor", ".", "cls_uuid", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.art_obj.ArtObjSkillPolicy._is_skill_done": [[31, 61], ["torch.logical_or", "torch.norm", "observations[].view().type", "torch.norm", "observations[].view"], "methods", ["None"], ["", "def", "_is_skill_done", "(", "\n", "self", ",", "\n", "observations", ",", "\n", "rnn_hidden_states", ",", "\n", "prev_actions", ",", "\n", "masks", ",", "\n", ")", "->", "torch", ".", "BoolTensor", ":", "\n", "\n", "        ", "cur_resting_pos", "=", "observations", "[", "RelativeRestingPositionSensor", ".", "cls_uuid", "]", "\n", "\n", "did_leave_start_zone", "=", "(", "\n", "torch", ".", "norm", "(", "\n", "cur_resting_pos", "-", "self", ".", "_episode_start_resting_pos", ",", "dim", "=", "-", "1", "\n", ")", "\n", ">", "self", ".", "_config", ".", "START_ZONE_RADIUS", "\n", ")", "\n", "self", ".", "_did_leave_start_zone", "=", "torch", ".", "logical_or", "(", "\n", "self", ".", "_did_leave_start_zone", ",", "did_leave_start_zone", "\n", ")", "\n", "\n", "cur_resting_dist", "=", "torch", ".", "norm", "(", "\n", "observations", "[", "RelativeRestingPositionSensor", ".", "cls_uuid", "]", ",", "dim", "=", "-", "1", "\n", ")", "\n", "is_within_thresh", "=", "cur_resting_dist", "<", "self", ".", "_config", ".", "AT_RESTING_THRESHOLD", "\n", "is_holding", "=", "(", "\n", "observations", "[", "IsHoldingSensor", ".", "cls_uuid", "]", ".", "view", "(", "-", "1", ")", ".", "type", "(", "torch", ".", "bool", ")", "\n", ")", "\n", "\n", "is_not_holding", "=", "~", "is_holding", "\n", "return", "is_not_holding", "&", "is_within_thresh", "&", "self", ".", "_did_leave_start_zone", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.art_obj.ArtObjSkillPolicy._parse_skill_arg": [[62, 65], ["art_obj.ArtObjSkillPolicy._internal_log", "int", "skill_arg[].split"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.skill.SkillPolicy._internal_log"], ["", "def", "_parse_skill_arg", "(", "self", ",", "skill_arg", ")", ":", "\n", "        ", "self", ".", "_internal_log", "(", "f\"Parsing skill argument {skill_arg}\"", ")", "\n", "return", "int", "(", "skill_arg", "[", "-", "1", "]", ".", "split", "(", "\"|\"", ")", "[", "1", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.oracle_nav.OracleNavPolicy.__init__": [[30, 49], ["habitat_baselines.rl.hrl.skills.nn_skill.NnSkillPolicy.__init__", "torch.zeros", "range"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "wrap_policy", ",", "\n", "config", ",", "\n", "action_space", ",", "\n", "filtered_obs_space", ",", "\n", "filtered_action_space", ",", "\n", "batch_size", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "wrap_policy", ",", "\n", "config", ",", "\n", "action_space", ",", "\n", "filtered_obs_space", ",", "\n", "filtered_action_space", ",", "\n", "batch_size", ",", "\n", ")", "\n", "self", ".", "_nav_targs", "=", "[", "None", "for", "_", "in", "range", "(", "batch_size", ")", "]", "\n", "self", ".", "_is_at_targ", "=", "torch", ".", "zeros", "(", "batch_size", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.oracle_nav.OracleNavPolicy.to": [[50, 54], ["oracle_nav.OracleNavPolicy._is_at_targ.to", "oracle_nav.OracleNavPolicy._cur_skill_step.to"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to"], ["", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "self", ".", "_is_at_targ", "=", "self", ".", "_is_at_targ", ".", "to", "(", "device", ")", "\n", "self", ".", "_cur_skill_step", "=", "self", ".", "_cur_skill_step", ".", "to", "(", "device", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.oracle_nav.OracleNavPolicy._get_multi_sensor_index": [[55, 57], ["None"], "methods", ["None"], ["", "def", "_get_multi_sensor_index", "(", "self", ",", "batch_idx", ":", "int", ",", "sensor_name", ":", "str", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "_cur_skill_args", "[", "batch_idx", "]", ".", "obj_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.oracle_nav.OracleNavPolicy.on_enter": [[58, 77], ["super().on_enter", "oracle_nav.OracleNavPolicy._internal_log"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.oracle_nav.OracleNavPolicy.on_enter", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.skill.SkillPolicy._internal_log"], ["", "def", "on_enter", "(", "\n", "self", ",", "\n", "skill_arg", ",", "\n", "batch_idx", ",", "\n", "observations", ",", "\n", "rnn_hidden_states", ",", "\n", "prev_actions", ",", "\n", ")", ":", "\n", "        ", "ret", "=", "super", "(", ")", ".", "on_enter", "(", "\n", "skill_arg", ",", "batch_idx", ",", "observations", ",", "rnn_hidden_states", ",", "prev_actions", "\n", ")", "\n", "self", ".", "_is_at_targ", "[", "batch_idx", "]", "=", "False", "\n", "self", ".", "_nav_targs", "[", "batch_idx", "]", "=", "observations", "[", "NavGoalSensor", ".", "cls_uuid", "]", "[", "\n", "batch_idx", "\n", "]", "\n", "self", ".", "_internal_log", "(", "\n", "f\"Got nav target {self._nav_targs} on enter\"", ",", "observations", "\n", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.oracle_nav.OracleNavPolicy.from_config": [[78, 93], ["habitat.core.spaces.ActionSpace", "habitat_baselines.common.logging.baselines_logger.debug", "cls"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_config", "(", "cls", ",", "config", ",", "observation_space", ",", "action_space", ",", "batch_size", ")", ":", "\n", "        ", "filtered_action_space", "=", "ActionSpace", "(", "\n", "{", "config", ".", "NAV_ACTION_NAME", ":", "action_space", "[", "config", ".", "NAV_ACTION_NAME", "]", "}", "\n", ")", "\n", "baselines_logger", ".", "debug", "(", "\n", "f\"Loaded action space {filtered_action_space} for skill {config.skill_name}\"", "\n", ")", "\n", "return", "cls", "(", "\n", "None", ",", "\n", "config", ",", "\n", "action_space", ",", "\n", "observation_space", ",", "\n", "filtered_action_space", ",", "\n", "batch_size", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.oracle_nav.OracleNavPolicy._is_skill_done": [[95, 103], ["None"], "methods", ["None"], ["", "def", "_is_skill_done", "(", "\n", "self", ",", "\n", "observations", ",", "\n", "rnn_hidden_states", ",", "\n", "prev_actions", ",", "\n", "masks", ",", "\n", ")", "->", "torch", ".", "BoolTensor", ":", "\n", "        ", "return", "self", ".", "_is_at_targ", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.oracle_nav.OracleNavPolicy._compute_forward": [[104, 113], ["numpy.array", "magnum.Matrix4.rotation", "numpy.array", "magnum.Rad", "magnum.Vector3", "magnum.Matrix4.rotation.transform_vector"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.rotation"], ["", "def", "_compute_forward", "(", "self", ",", "localization", ")", ":", "\n", "# Compute forward direction", "\n", "        ", "forward", "=", "np", ".", "array", "(", "[", "1.0", ",", "0", ",", "0", "]", ")", "\n", "heading_angle", "=", "localization", "[", "-", "1", "]", "\n", "rot_mat", "=", "mn", ".", "Matrix4", ".", "rotation", "(", "\n", "mn", ".", "Rad", "(", "heading_angle", ")", ",", "mn", ".", "Vector3", "(", "0", ",", "1", ",", "0", ")", "\n", ")", "\n", "robot_forward", "=", "np", ".", "array", "(", "rot_mat", ".", "transform_vector", "(", "forward", ")", ")", "\n", "return", "robot_forward", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.oracle_nav.OracleNavPolicy._parse_skill_arg": [[114, 118], ["skill_arg[].split", "OracleNavPolicy.OracleNavArgs", "int", "targ_name.startswith"], "methods", ["None"], ["", "def", "_parse_skill_arg", "(", "self", ",", "skill_arg", ")", ":", "\n", "        ", "targ_name", ",", "targ_idx", "=", "skill_arg", "[", "-", "1", "]", ".", "split", "(", "\"|\"", ")", "\n", "return", "OracleNavPolicy", ".", "OracleNavArgs", "(", "\n", "obj_idx", "=", "int", "(", "targ_idx", ")", ",", "is_target", "=", "targ_name", ".", "startswith", "(", "\"TARGET\"", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.oracle_nav.OracleNavPolicy._internal_act": [[120, 220], ["oracle_nav.OracleNavPolicy._select_obs", "torch.zeros", "oracle_nav.OracleNavPolicy._keep_holding_state", "enumerate", "zip", "oracle_nav.OracleNavPolicy._compute_forward", "rel_targ[].cpu().numpy", "[].cpu().numpy", "torch.linalg.norm().item", "habitat.tasks.utils.get_angle", "habitat.tasks.utils.get_angle", "torch.tensor().to", "oracle_nav.OracleNavPolicy._internal_log", "oracle_nav.OracleNavPolicy._internal_act.compute_turn"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.skill.SkillPolicy._select_obs", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.skill.SkillPolicy._keep_holding_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.oracle_nav.OracleNavPolicy._compute_forward", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.tasks.utils.get_angle", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.tasks.utils.get_angle", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.skill.SkillPolicy._internal_log"], ["", "def", "_internal_act", "(", "\n", "self", ",", "\n", "observations", ",", "\n", "rnn_hidden_states", ",", "\n", "prev_actions", ",", "\n", "masks", ",", "\n", "cur_batch_idx", ",", "\n", "deterministic", "=", "False", ",", "\n", ")", ":", "\n", "        ", "observations", "=", "self", ".", "_select_obs", "(", "observations", ",", "cur_batch_idx", ")", "\n", "\n", "# The oracle nav target should automatically update based on what part", "\n", "# of the task we are on.", "\n", "batch_nav_targ", "=", "observations", "[", "OracleNavigationActionSensor", ".", "cls_uuid", "]", "\n", "batch_localization", "=", "observations", "[", "LocalizationSensor", ".", "cls_uuid", "]", "\n", "\n", "if", "self", ".", "_cur_skill_args", "[", "cur_batch_idx", "]", ".", "is_target", ":", "\n", "            ", "batch_obj_targ_pos", "=", "observations", "[", "AbsGoalSensor", ".", "cls_uuid", "]", "\n", "", "else", ":", "\n", "            ", "batch_obj_targ_pos", "=", "observations", "[", "AbsTargetStartSensor", ".", "cls_uuid", "]", "\n", "\n", "", "full_action", "=", "torch", ".", "zeros", "(", "prev_actions", ".", "shape", ",", "device", "=", "masks", ".", "device", ")", "\n", "full_action", "=", "self", ".", "_keep_holding_state", "(", "full_action", ",", "observations", ")", "\n", "\n", "for", "i", ",", "(", "\n", "nav_targ", ",", "\n", "localization", ",", "\n", "obj_targ_pos", ",", "\n", "final_nav_goal", ",", "\n", ")", "in", "enumerate", "(", "\n", "zip", "(", "\n", "batch_nav_targ", ",", "\n", "batch_localization", ",", "\n", "batch_obj_targ_pos", ",", "\n", "self", ".", "_nav_targs", ",", "\n", ")", "\n", ")", ":", "\n", "            ", "if", "(", "\n", "final_nav_goal", ".", "sum", "(", ")", "==", "0", "\n", "and", "observations", "[", "NavGoalSensor", ".", "cls_uuid", "]", "[", "i", "]", ".", "sum", "(", ")", "!=", "0", "\n", ")", ":", "\n", "# All zeros is a stable nav goal sensor. Update it to recent.", "\n", "                ", "self", ".", "_nav_targs", "[", "i", "]", "=", "observations", "[", "NavGoalSensor", ".", "cls_uuid", "]", "[", "i", "]", "\n", "final_nav_goal", "=", "self", ".", "_nav_targs", "[", "i", "]", "\n", "self", ".", "_internal_log", "(", "\n", "f\"Updated nav target {i} to {self._nav_targs}\"", ",", "\n", "observations", ",", "\n", ")", "\n", "", "robot_pos", "=", "localization", "[", ":", "3", "]", "\n", "\n", "robot_forward", "=", "self", ".", "_compute_forward", "(", "localization", ")", "\n", "\n", "# Compute relative target.", "\n", "rel_targ", "=", "nav_targ", "-", "robot_pos", "\n", "\n", "# Compute heading angle (2D calculation)", "\n", "robot_forward", "=", "robot_forward", "[", "[", "0", ",", "2", "]", "]", "\n", "rel_targ", "=", "rel_targ", "[", "[", "0", ",", "2", "]", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "rel_pos", "=", "(", "obj_targ_pos", "-", "robot_pos", ")", "[", "[", "0", ",", "2", "]", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "dist_to_final_nav_targ", "=", "torch", ".", "linalg", ".", "norm", "(", "\n", "(", "final_nav_goal", "-", "robot_pos", ")", "[", "[", "0", ",", "2", "]", "]", "\n", ")", ".", "item", "(", ")", "\n", "\n", "rel_angle", "=", "get_angle", "(", "robot_forward", ",", "rel_targ", ")", "\n", "rel_obj_angle", "=", "get_angle", "(", "robot_forward", ",", "rel_pos", ")", "\n", "\n", "vel", "=", "[", "0", ",", "0", "]", "\n", "turn_vel", "=", "self", ".", "_config", ".", "TURN_VELOCITY", "\n", "for_vel", "=", "self", ".", "_config", ".", "FORWARD_VELOCITY", "\n", "\n", "def", "compute_turn", "(", "rel_a", ",", "rel", ")", ":", "\n", "                ", "is_left", "=", "np", ".", "cross", "(", "robot_forward", ",", "rel", ")", ">", "0", "\n", "if", "is_left", ":", "\n", "                    ", "vel", "=", "[", "0", ",", "-", "turn_vel", "]", "\n", "", "else", ":", "\n", "                    ", "vel", "=", "[", "0", ",", "turn_vel", "]", "\n", "", "return", "vel", "\n", "\n", "", "if", "dist_to_final_nav_targ", "<", "self", ".", "_config", ".", "DIST_THRESH", ":", "\n", "# Look at the object", "\n", "                ", "vel", "=", "compute_turn", "(", "rel_obj_angle", ",", "rel_pos", ")", "\n", "", "elif", "rel_angle", "<", "self", ".", "_config", ".", "TURN_THRESH", ":", "\n", "# Move towards the target", "\n", "                ", "vel", "=", "[", "for_vel", ",", "0", "]", "\n", "", "else", ":", "\n", "# Look at the target waypoint.", "\n", "                ", "vel", "=", "compute_turn", "(", "rel_angle", ",", "rel_targ", ")", "\n", "\n", "", "if", "(", "\n", "dist_to_final_nav_targ", "<", "self", ".", "_config", ".", "DIST_THRESH", "\n", "and", "rel_obj_angle", "<", "self", ".", "_config", ".", "LOOK_AT_OBJ_THRESH", "\n", ")", ":", "\n", "                ", "self", ".", "_is_at_targ", "[", "i", "]", "=", "True", "\n", "\n", "", "full_action", "[", "\n", "i", ",", "self", ".", "_ac_start", ":", "self", ".", "_ac_start", "+", "self", ".", "_ac_len", "\n", "]", "=", "torch", ".", "tensor", "(", "vel", ")", ".", "to", "(", "masks", ".", "device", ")", "\n", "\n", "", "return", "full_action", ",", "rnn_hidden_states", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.wait.WaitSkillPolicy.__init__": [[10, 18], ["habitat_baselines.rl.hrl.skills.skill.SkillPolicy.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "config", ",", "\n", "action_space", ":", "spaces", ".", "Space", ",", "\n", "batch_size", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ",", "action_space", ",", "batch_size", ",", "True", ")", "\n", "self", ".", "_wait_time", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.wait.WaitSkillPolicy._parse_skill_arg": [[19, 22], ["int", "wait.WaitSkillPolicy._internal_log"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.skill.SkillPolicy._internal_log"], ["", "def", "_parse_skill_arg", "(", "self", ",", "skill_arg", ":", "str", ")", "->", "Any", ":", "\n", "        ", "self", ".", "_wait_time", "=", "int", "(", "skill_arg", "[", "0", "]", ")", "\n", "self", ".", "_internal_log", "(", "f\"Requested wait time {self._wait_time}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.wait.WaitSkillPolicy._is_skill_done": [[23, 32], ["None"], "methods", ["None"], ["", "def", "_is_skill_done", "(", "\n", "self", ",", "\n", "observations", ",", "\n", "rnn_hidden_states", ",", "\n", "prev_actions", ",", "\n", "masks", ",", "\n", ")", "->", "torch", ".", "BoolTensor", ":", "\n", "        ", "assert", "self", ".", "_wait_time", ">", "0", "\n", "return", "self", ".", "_cur_skill_step", ">=", "self", ".", "_wait_time", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.wait.WaitSkillPolicy._internal_act": [[33, 44], ["torch.zeros"], "methods", ["None"], ["", "def", "_internal_act", "(", "\n", "self", ",", "\n", "observations", ",", "\n", "rnn_hidden_states", ",", "\n", "prev_actions", ",", "\n", "masks", ",", "\n", "cur_batch_idx", ",", "\n", "deterministic", "=", "False", ",", "\n", ")", ":", "\n", "        ", "action", "=", "torch", ".", "zeros", "(", "prev_actions", ".", "shape", ",", "device", "=", "prev_actions", ".", "device", ")", "\n", "return", "action", ",", "rnn_hidden_states", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.policy.Policy.__init__": [[30, 32], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.policy.Policy.should_load_agent_state": [[33, 36], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "should_load_agent_state", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.policy.Policy.num_recurrent_layers": [[37, 40], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_recurrent_layers", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.policy.Policy.forward": [[41, 43], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "x", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.policy.Policy.act": [[44, 53], ["None"], "methods", ["None"], ["", "def", "act", "(", "\n", "self", ",", "\n", "observations", ",", "\n", "rnn_hidden_states", ",", "\n", "prev_actions", ",", "\n", "masks", ",", "\n", "deterministic", "=", "False", ",", "\n", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.policy.Policy.from_config": [[54, 58], ["None"], "methods", ["None"], ["", "@", "classmethod", "\n", "@", "abc", ".", "abstractmethod", "\n", "def", "from_config", "(", "cls", ",", "config", ",", "observation_space", ",", "action_space", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.policy.NetPolicy.__init__": [[63, 93], ["super().__init__", "policy.CriticHead", "habitat_baselines.utils.common.CategoricalNet", "habitat_baselines.utils.common.GaussianNet", "ValueError"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "net", ",", "dim_actions", ",", "policy_config", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "net", "\n", "self", ".", "dim_actions", "=", "dim_actions", "\n", "self", ".", "action_distribution", ":", "Union", "[", "CategoricalNet", ",", "GaussianNet", "]", "\n", "\n", "if", "policy_config", "is", "None", ":", "\n", "            ", "self", ".", "action_distribution_type", "=", "\"categorical\"", "\n", "", "else", ":", "\n", "            ", "self", ".", "action_distribution_type", "=", "(", "\n", "policy_config", ".", "action_distribution_type", "\n", ")", "\n", "\n", "", "if", "self", ".", "action_distribution_type", "==", "\"categorical\"", ":", "\n", "            ", "self", ".", "action_distribution", "=", "CategoricalNet", "(", "\n", "self", ".", "net", ".", "output_size", ",", "self", ".", "dim_actions", "\n", ")", "\n", "", "elif", "self", ".", "action_distribution_type", "==", "\"gaussian\"", ":", "\n", "            ", "self", ".", "action_distribution", "=", "GaussianNet", "(", "\n", "self", ".", "net", ".", "output_size", ",", "\n", "self", ".", "dim_actions", ",", "\n", "policy_config", ".", "ACTION_DIST", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "ValueError", "(", "\n", "f\"Action distribution {self.action_distribution_type}\"", "\n", "\"not supported.\"", "\n", ")", "\n", "\n", "", "self", ".", "critic", "=", "CriticHead", "(", "self", ".", "net", ".", "output_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.policy.NetPolicy.should_load_agent_state": [[94, 97], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "should_load_agent_state", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.policy.NetPolicy.num_recurrent_layers": [[98, 101], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_recurrent_layers", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "net", ".", "num_recurrent_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.policy.NetPolicy.forward": [[102, 104], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "x", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.policy.NetPolicy.act": [[105, 130], ["policy.NetPolicy.net", "policy.NetPolicy.action_distribution", "policy.NetPolicy.critic", "policy.NetPolicy.log_probs", "policy.NetPolicy.sample", "policy.NetPolicy.mode"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.CustomNormal.log_probs", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.sample", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.nav.shortest_path_follower.ShortestPathFollower.mode"], ["", "def", "act", "(", "\n", "self", ",", "\n", "observations", ",", "\n", "rnn_hidden_states", ",", "\n", "prev_actions", ",", "\n", "masks", ",", "\n", "deterministic", "=", "False", ",", "\n", ")", ":", "\n", "        ", "features", ",", "rnn_hidden_states", "=", "self", ".", "net", "(", "\n", "observations", ",", "rnn_hidden_states", ",", "prev_actions", ",", "masks", "\n", ")", "\n", "distribution", "=", "self", ".", "action_distribution", "(", "features", ")", "\n", "value", "=", "self", ".", "critic", "(", "features", ")", "\n", "\n", "if", "deterministic", ":", "\n", "            ", "if", "self", ".", "action_distribution_type", "==", "\"categorical\"", ":", "\n", "                ", "action", "=", "distribution", ".", "mode", "(", ")", "\n", "", "elif", "self", ".", "action_distribution_type", "==", "\"gaussian\"", ":", "\n", "                ", "action", "=", "distribution", ".", "mean", "\n", "", "", "else", ":", "\n", "            ", "action", "=", "distribution", ".", "sample", "(", ")", "\n", "\n", "", "action_log_probs", "=", "distribution", ".", "log_probs", "(", "action", ")", "\n", "\n", "return", "value", ",", "action", ",", "action_log_probs", ",", "rnn_hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.policy.NetPolicy.get_value": [[131, 136], ["policy.NetPolicy.net", "policy.NetPolicy.critic"], "methods", ["None"], ["", "def", "get_value", "(", "self", ",", "observations", ",", "rnn_hidden_states", ",", "prev_actions", ",", "masks", ")", ":", "\n", "        ", "features", ",", "_", "=", "self", ".", "net", "(", "\n", "observations", ",", "rnn_hidden_states", ",", "prev_actions", ",", "masks", "\n", ")", "\n", "return", "self", ".", "critic", "(", "features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.policy.NetPolicy.evaluate_actions": [[137, 150], ["policy.NetPolicy.net", "policy.NetPolicy.action_distribution", "policy.NetPolicy.critic", "policy.NetPolicy.log_probs", "policy.NetPolicy.entropy"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.CustomNormal.log_probs", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.CustomNormal.entropy"], ["", "def", "evaluate_actions", "(", "\n", "self", ",", "observations", ",", "rnn_hidden_states", ",", "prev_actions", ",", "masks", ",", "action", "\n", ")", ":", "\n", "        ", "features", ",", "rnn_hidden_states", "=", "self", ".", "net", "(", "\n", "observations", ",", "rnn_hidden_states", ",", "prev_actions", ",", "masks", "\n", ")", "\n", "distribution", "=", "self", ".", "action_distribution", "(", "features", ")", "\n", "value", "=", "self", ".", "critic", "(", "features", ")", "\n", "\n", "action_log_probs", "=", "distribution", ".", "log_probs", "(", "action", ")", "\n", "distribution_entropy", "=", "distribution", ".", "entropy", "(", ")", "\n", "\n", "return", "value", ",", "action_log_probs", ",", "distribution_entropy", ",", "rnn_hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.policy.NetPolicy.from_config": [[151, 155], ["None"], "methods", ["None"], ["", "@", "classmethod", "\n", "@", "abc", ".", "abstractmethod", "\n", "def", "from_config", "(", "cls", ",", "config", ",", "observation_space", ",", "action_space", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.policy.CriticHead.__init__": [[158, 163], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.init.orthogonal_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "input_size", ",", "1", ")", "\n", "nn", ".", "init", ".", "orthogonal_", "(", "self", ".", "fc", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "fc", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.policy.CriticHead.forward": [[164, 166], ["policy.CriticHead.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "fc", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.policy.PointNavBaselinePolicy.__init__": [[170, 184], ["policy.NetPolicy.__init__", "policy.PointNavBaselineNet"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "observation_space", ":", "spaces", ".", "Dict", ",", "\n", "action_space", ",", "\n", "hidden_size", ":", "int", "=", "512", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "PointNavBaselineNet", "(", "# type: ignore", "\n", "observation_space", "=", "observation_space", ",", "\n", "hidden_size", "=", "hidden_size", ",", "\n", "**", "kwargs", ",", "\n", ")", ",", "\n", "action_space", ".", "n", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.policy.PointNavBaselinePolicy.from_config": [[186, 194], ["cls"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_config", "(", "\n", "cls", ",", "config", ":", "Config", ",", "observation_space", ":", "spaces", ".", "Dict", ",", "action_space", "\n", ")", ":", "\n", "        ", "return", "cls", "(", "\n", "observation_space", "=", "observation_space", ",", "\n", "action_space", "=", "action_space", ",", "\n", "hidden_size", "=", "config", ".", "RL", ".", "PPO", ".", "hidden_size", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.policy.Net.forward": [[198, 201], ["None"], "methods", ["None"], ["    ", "@", "abc", ".", "abstractmethod", "\n", "def", "forward", "(", "self", ",", "observations", ",", "rnn_hidden_states", ",", "prev_actions", ",", "masks", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.policy.Net.output_size": [[202, 206], ["None"], "methods", ["None"], ["", "@", "property", "\n", "@", "abc", ".", "abstractmethod", "\n", "def", "output_size", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.policy.Net.num_recurrent_layers": [[207, 211], ["None"], "methods", ["None"], ["", "@", "property", "\n", "@", "abc", ".", "abstractmethod", "\n", "def", "num_recurrent_layers", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.policy.Net.is_blind": [[212, 216], ["None"], "methods", ["None"], ["", "@", "property", "\n", "@", "abc", ".", "abstractmethod", "\n", "def", "is_blind", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.policy.PointNavBaselineNet.__init__": [[223, 260], ["torch.nn.Module.__init__", "habitat_baselines.rl.models.simple_cnn.SimpleCNN", "habitat_baselines.rl.models.rnn_state_encoder.build_rnn_state_encoder", "policy.PointNavBaselineNet.train", "gym.spaces.Dict", "habitat_baselines.rl.models.simple_cnn.SimpleCNN"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.rnn_state_encoder.build_rnn_state_encoder", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.train"], ["def", "__init__", "(", "\n", "self", ",", "\n", "observation_space", ":", "spaces", ".", "Dict", ",", "\n", "hidden_size", ":", "int", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "(", "\n", "IntegratedPointGoalGPSAndCompassSensor", ".", "cls_uuid", "\n", "in", "observation_space", ".", "spaces", "\n", ")", ":", "\n", "            ", "self", ".", "_n_input_goal", "=", "observation_space", ".", "spaces", "[", "\n", "IntegratedPointGoalGPSAndCompassSensor", ".", "cls_uuid", "\n", "]", ".", "shape", "[", "0", "]", "\n", "", "elif", "PointGoalSensor", ".", "cls_uuid", "in", "observation_space", ".", "spaces", ":", "\n", "            ", "self", ".", "_n_input_goal", "=", "observation_space", ".", "spaces", "[", "\n", "PointGoalSensor", ".", "cls_uuid", "\n", "]", ".", "shape", "[", "0", "]", "\n", "", "elif", "ImageGoalSensor", ".", "cls_uuid", "in", "observation_space", ".", "spaces", ":", "\n", "            ", "goal_observation_space", "=", "spaces", ".", "Dict", "(", "\n", "{", "\"rgb\"", ":", "observation_space", ".", "spaces", "[", "ImageGoalSensor", ".", "cls_uuid", "]", "}", "\n", ")", "\n", "self", ".", "goal_visual_encoder", "=", "SimpleCNN", "(", "\n", "goal_observation_space", ",", "hidden_size", "\n", ")", "\n", "self", ".", "_n_input_goal", "=", "hidden_size", "\n", "\n", "", "self", ".", "_hidden_size", "=", "hidden_size", "\n", "\n", "self", ".", "visual_encoder", "=", "SimpleCNN", "(", "observation_space", ",", "hidden_size", ")", "\n", "\n", "self", ".", "state_encoder", "=", "build_rnn_state_encoder", "(", "\n", "(", "0", "if", "self", ".", "is_blind", "else", "self", ".", "_hidden_size", ")", "+", "self", ".", "_n_input_goal", ",", "\n", "self", ".", "_hidden_size", ",", "\n", ")", "\n", "\n", "self", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.policy.PointNavBaselineNet.output_size": [[261, 264], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_hidden_size", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.policy.PointNavBaselineNet.is_blind": [[265, 268], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_blind", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "visual_encoder", ".", "is_blind", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.policy.PointNavBaselineNet.num_recurrent_layers": [[269, 272], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_recurrent_layers", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "state_encoder", ".", "num_recurrent_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.policy.PointNavBaselineNet.forward": [[273, 296], ["torch.cat", "policy.PointNavBaselineNet.state_encoder", "policy.PointNavBaselineNet.visual_encoder", "policy.PointNavBaselineNet.goal_visual_encoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "observations", ",", "rnn_hidden_states", ",", "prev_actions", ",", "masks", ")", ":", "\n", "        ", "if", "IntegratedPointGoalGPSAndCompassSensor", ".", "cls_uuid", "in", "observations", ":", "\n", "            ", "target_encoding", "=", "observations", "[", "\n", "IntegratedPointGoalGPSAndCompassSensor", ".", "cls_uuid", "\n", "]", "\n", "", "elif", "PointGoalSensor", ".", "cls_uuid", "in", "observations", ":", "\n", "            ", "target_encoding", "=", "observations", "[", "PointGoalSensor", ".", "cls_uuid", "]", "\n", "", "elif", "ImageGoalSensor", ".", "cls_uuid", "in", "observations", ":", "\n", "            ", "image_goal", "=", "observations", "[", "ImageGoalSensor", ".", "cls_uuid", "]", "\n", "target_encoding", "=", "self", ".", "goal_visual_encoder", "(", "{", "\"rgb\"", ":", "image_goal", "}", ")", "\n", "\n", "", "x", "=", "[", "target_encoding", "]", "\n", "\n", "if", "not", "self", ".", "is_blind", ":", "\n", "            ", "perception_embed", "=", "self", ".", "visual_encoder", "(", "observations", ")", "\n", "x", "=", "[", "perception_embed", "]", "+", "x", "\n", "\n", "", "x_out", "=", "torch", ".", "cat", "(", "x", ",", "dim", "=", "1", ")", "\n", "x_out", ",", "rnn_hidden_states", "=", "self", ".", "state_encoder", "(", "\n", "x_out", ",", "rnn_hidden_states", ",", "masks", "\n", ")", "\n", "\n", "return", "x_out", ",", "rnn_hidden_states", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.ppo_trainer.PPOTrainer.__init__": [[84, 103], ["habitat_baselines.common.base_trainer.BaseRLTrainer.__init__", "habitat_baselines.utils.common.ObservationBatchingCache", "habitat_baselines.rl.ddppo.ddp_utils.get_distrib_size"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ddppo.ddp_utils.get_distrib_size"], ["def", "__init__", "(", "self", ",", "config", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "actor_critic", "=", "None", "\n", "self", ".", "agent", "=", "None", "\n", "self", ".", "envs", "=", "None", "\n", "self", ".", "obs_transforms", "=", "[", "]", "\n", "\n", "self", ".", "_static_encoder", "=", "False", "\n", "self", ".", "_encoder", "=", "None", "\n", "self", ".", "_obs_space", "=", "None", "\n", "\n", "# Distributed if the world size would be", "\n", "# greater than 1", "\n", "self", ".", "_is_distributed", "=", "get_distrib_size", "(", ")", "[", "2", "]", ">", "1", "\n", "self", ".", "_obs_batching_cache", "=", "ObservationBatchingCache", "(", ")", "\n", "\n", "self", ".", "using_velocity_ctrl", "=", "(", "\n", "self", ".", "config", ".", "TASK_CONFIG", ".", "TASK", ".", "POSSIBLE_ACTIONS", "\n", ")", "==", "[", "\"VELOCITY_CONTROL\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.ppo_trainer.PPOTrainer.obs_space": [[111, 114], ["None"], "methods", ["None"], ["", "@", "obs_space", ".", "setter", "\n", "def", "obs_space", "(", "self", ",", "new_obs_space", ")", ":", "\n", "        ", "self", ".", "_obs_space", "=", "new_obs_space", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.ppo_trainer.PPOTrainer._all_reduce": [[115, 127], ["t.to.to.to", "torch.distributed.all_reduce", "t.to.to.to"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to"], ["", "def", "_all_reduce", "(", "self", ",", "t", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "r\"\"\"All reduce helper method that moves things to the correct\n        device and only runs if distributed\n        \"\"\"", "\n", "if", "not", "self", ".", "_is_distributed", ":", "\n", "            ", "return", "t", "\n", "\n", "", "orig_device", "=", "t", ".", "device", "\n", "t", "=", "t", ".", "to", "(", "device", "=", "self", ".", "device", ")", "\n", "torch", ".", "distributed", ".", "all_reduce", "(", "t", ")", "\n", "\n", "return", "t", ".", "to", "(", "device", "=", "orig_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.ppo_trainer.PPOTrainer._setup_actor_critic_agent": [[128, 197], ["habitat.logger.add_filehandler", "habitat_baselines.common.baseline_registry.baseline_registry.get_policy", "habitat_baselines.common.obs_transformers.get_active_obs_transforms", "habitat_baselines.common.obs_transformers.apply_obs_transforms_obs_space", "habitat_baselines.common.baseline_registry.baseline_registry.get_policy.from_config", "ppo_trainer.PPOTrainer.actor_critic.to", "torch.load", "ppo_trainer.PPOTrainer.actor_critic.load_state_dict", "ppo_trainer.PPOTrainer.actor_critic.net.visual_encoder.parameters", "torch.nn.init.orthogonal_", "torch.nn.init.constant_", "ppo_trainer.PPOTrainer.actor_critic.net.visual_encoder.load_state_dict", "param.requires_grad_", "pretrained_state[].items", "len", "pretrained_state[].items", "k.startswith", "len"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.logging.HabitatLogger.add_filehandler", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.baseline_registry.BaselineRegistry.get_policy", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.get_active_obs_transforms", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.apply_obs_transforms_obs_space", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.Equirect2CubeMap.from_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.load", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.nn_skill.NnSkillPolicy.parameters"], ["", "def", "_setup_actor_critic_agent", "(", "self", ",", "ppo_cfg", ":", "Config", ")", "->", "None", ":", "\n", "        ", "r\"\"\"Sets up actor critic and agent for PPO.\n\n        Args:\n            ppo_cfg: config node with relevant params\n\n        Returns:\n            None\n        \"\"\"", "\n", "logger", ".", "add_filehandler", "(", "self", ".", "config", ".", "LOG_FILE", ")", "\n", "\n", "policy", "=", "baseline_registry", ".", "get_policy", "(", "self", ".", "config", ".", "RL", ".", "POLICY", ".", "name", ")", "\n", "observation_space", "=", "self", ".", "obs_space", "\n", "self", ".", "obs_transforms", "=", "get_active_obs_transforms", "(", "self", ".", "config", ")", "\n", "observation_space", "=", "apply_obs_transforms_obs_space", "(", "\n", "observation_space", ",", "self", ".", "obs_transforms", "\n", ")", "\n", "\n", "self", ".", "actor_critic", "=", "policy", ".", "from_config", "(", "\n", "self", ".", "config", ",", "observation_space", ",", "self", ".", "policy_action_space", "\n", ")", "\n", "self", ".", "obs_space", "=", "observation_space", "\n", "self", ".", "actor_critic", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "if", "(", "\n", "self", ".", "config", ".", "RL", ".", "DDPPO", ".", "pretrained_encoder", "\n", "or", "self", ".", "config", ".", "RL", ".", "DDPPO", ".", "pretrained", "\n", ")", ":", "\n", "            ", "pretrained_state", "=", "torch", ".", "load", "(", "\n", "self", ".", "config", ".", "RL", ".", "DDPPO", ".", "pretrained_weights", ",", "map_location", "=", "\"cpu\"", "\n", ")", "\n", "\n", "", "if", "self", ".", "config", ".", "RL", ".", "DDPPO", ".", "pretrained", ":", "\n", "            ", "self", ".", "actor_critic", ".", "load_state_dict", "(", "\n", "{", "# type: ignore", "\n", "k", "[", "len", "(", "\"actor_critic.\"", ")", ":", "]", ":", "v", "\n", "for", "k", ",", "v", "in", "pretrained_state", "[", "\"state_dict\"", "]", ".", "items", "(", ")", "\n", "}", "\n", ")", "\n", "", "elif", "self", ".", "config", ".", "RL", ".", "DDPPO", ".", "pretrained_encoder", ":", "\n", "            ", "prefix", "=", "\"actor_critic.net.visual_encoder.\"", "\n", "self", ".", "actor_critic", ".", "net", ".", "visual_encoder", ".", "load_state_dict", "(", "\n", "{", "\n", "k", "[", "len", "(", "prefix", ")", ":", "]", ":", "v", "\n", "for", "k", ",", "v", "in", "pretrained_state", "[", "\"state_dict\"", "]", ".", "items", "(", ")", "\n", "if", "k", ".", "startswith", "(", "prefix", ")", "\n", "}", "\n", ")", "\n", "\n", "", "if", "not", "self", ".", "config", ".", "RL", ".", "DDPPO", ".", "train_encoder", ":", "\n", "            ", "self", ".", "_static_encoder", "=", "True", "\n", "for", "param", "in", "self", ".", "actor_critic", ".", "net", ".", "visual_encoder", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad_", "(", "False", ")", "\n", "\n", "", "", "if", "self", ".", "config", ".", "RL", ".", "DDPPO", ".", "reset_critic", ":", "\n", "            ", "nn", ".", "init", ".", "orthogonal_", "(", "self", ".", "actor_critic", ".", "critic", ".", "fc", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "actor_critic", ".", "critic", ".", "fc", ".", "bias", ",", "0", ")", "\n", "\n", "", "self", ".", "agent", "=", "(", "DDPPO", "if", "self", ".", "_is_distributed", "else", "PPO", ")", "(", "\n", "actor_critic", "=", "self", ".", "actor_critic", ",", "\n", "clip_param", "=", "ppo_cfg", ".", "clip_param", ",", "\n", "ppo_epoch", "=", "ppo_cfg", ".", "ppo_epoch", ",", "\n", "num_mini_batch", "=", "ppo_cfg", ".", "num_mini_batch", ",", "\n", "value_loss_coef", "=", "ppo_cfg", ".", "value_loss_coef", ",", "\n", "entropy_coef", "=", "ppo_cfg", ".", "entropy_coef", ",", "\n", "lr", "=", "ppo_cfg", ".", "lr", ",", "\n", "eps", "=", "ppo_cfg", ".", "eps", ",", "\n", "max_grad_norm", "=", "ppo_cfg", ".", "max_grad_norm", ",", "\n", "use_normalized_advantage", "=", "ppo_cfg", ".", "use_normalized_advantage", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.ppo_trainer.PPOTrainer._init_envs": [[199, 207], ["habitat.utils.env_utils.construct_envs", "habitat.core.environments.get_env_class", "habitat_baselines.rl.ddppo.ddp_utils.is_slurm_batch_job"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.env_utils.construct_envs", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.environments.get_env_class", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ddppo.ddp_utils.is_slurm_batch_job"], ["", "def", "_init_envs", "(", "self", ",", "config", "=", "None", ")", ":", "\n", "        ", "if", "config", "is", "None", ":", "\n", "            ", "config", "=", "self", ".", "config", "\n", "\n", "", "self", ".", "envs", "=", "construct_envs", "(", "\n", "config", ",", "\n", "get_env_class", "(", "config", ".", "ENV_NAME", ")", ",", "\n", "workers_ignore_signals", "=", "is_slurm_batch_job", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.ppo_trainer.PPOTrainer._init_train": [[209, 353], ["habitat_baselines.rl.ddppo.ddp_utils.load_resume_state", "habitat_baselines.rl.ddppo.ddp_utils.is_slurm_batch_job", "habitat.utils.profiling_wrapper.configure", "ppo_trainer.PPOTrainer._init_envs", "torch.cuda.is_available", "ppo_trainer.PPOTrainer._setup_actor_critic_agent", "habitat.logger.info", "habitat_baselines.common.rollout_storage.RolloutStorage", "ppo_trainer.PPOTrainer.rollouts.to", "ppo_trainer.PPOTrainer.envs.reset", "habitat_baselines.utils.common.batch_obs", "habitat_baselines.common.obs_transformers.apply_obs_transforms_batch", "torch.zeros", "dict", "collections.defaultdict", "time.time", "habitat_baselines.rl.ddppo.ddp_utils.add_signal_handlers", "habitat_baselines.rl.ddppo.ddp_utils.init_distrib_slurm", "habitat_baselines.rl.ddppo.ddp_utils.rank0_only", "ppo_trainer.PPOTrainer.config.defrost", "ppo_trainer.PPOTrainer.config.freeze", "random.seed", "numpy.random.seed", "torch.manual_seed", "torch.distributed.PrefixStore", "ppo_trainer.PPOTrainer.num_rollouts_done_store.set", "habitat_baselines.rl.ddppo.ddp_utils.rank0_only", "habitat.logger.info", "habitat_baselines.utils.common.is_continuous_action_space", "torch.device", "torch.cuda.set_device", "torch.device", "habitat_baselines.rl.ddppo.ddp_utils.rank0_only", "os.makedirs", "ppo_trainer.PPOTrainer.agent.init_distributed", "gym.spaces.Dict", "habitat.logger.info", "torch.distributed.get_rank", "os.path.isdir", "sum", "torch.no_grad", "ppo_trainer.PPOTrainer._encoder", "torch.zeros", "torch.zeros", "collections.deque", "habitat_baselines.utils.common.get_num_actions", "gym.spaces.Box", "torch.distributed.get_world_size", "param.numel", "ppo_trainer.PPOTrainer.agent.parameters", "numpy.finfo", "numpy.finfo"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.ddppo.ddp_utils.load_resume_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ddppo.ddp_utils.is_slurm_batch_job", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.profiling_wrapper.configure", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.ppo_trainer.PPOTrainer._init_envs", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.ppo_trainer.PPOTrainer._setup_actor_critic_agent", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.batch_obs", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.apply_obs_transforms_batch", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ddppo.ddp_utils.add_signal_handlers", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ddppo.ddp_utils.init_distrib_slurm", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ddppo.ddp_utils.rank0_only", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.seed", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.seed", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.set", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ddppo.ddp_utils.rank0_only", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.is_continuous_action_space", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ddppo.ddp_utils.rank0_only", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.algo.ddppo.DecentralizedDistributedMixin.init_distributed", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.get_num_actions", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.nn_skill.NnSkillPolicy.parameters"], ["", "def", "_init_train", "(", "self", ")", ":", "\n", "        ", "resume_state", "=", "load_resume_state", "(", "self", ".", "config", ")", "\n", "if", "resume_state", "is", "not", "None", ":", "\n", "            ", "self", ".", "config", ":", "Config", "=", "resume_state", "[", "\"config\"", "]", "\n", "self", ".", "using_velocity_ctrl", "=", "(", "\n", "self", ".", "config", ".", "TASK_CONFIG", ".", "TASK", ".", "POSSIBLE_ACTIONS", "\n", ")", "==", "[", "\"VELOCITY_CONTROL\"", "]", "\n", "\n", "", "if", "self", ".", "config", ".", "RL", ".", "DDPPO", ".", "force_distributed", ":", "\n", "            ", "self", ".", "_is_distributed", "=", "True", "\n", "\n", "", "if", "is_slurm_batch_job", "(", ")", ":", "\n", "            ", "add_signal_handlers", "(", ")", "\n", "\n", "", "if", "self", ".", "_is_distributed", ":", "\n", "            ", "local_rank", ",", "tcp_store", "=", "init_distrib_slurm", "(", "\n", "self", ".", "config", ".", "RL", ".", "DDPPO", ".", "distrib_backend", "\n", ")", "\n", "if", "rank0_only", "(", ")", ":", "\n", "                ", "logger", ".", "info", "(", "\n", "\"Initialized DD-PPO with {} workers\"", ".", "format", "(", "\n", "torch", ".", "distributed", ".", "get_world_size", "(", ")", "\n", ")", "\n", ")", "\n", "\n", "", "self", ".", "config", ".", "defrost", "(", ")", "\n", "self", ".", "config", ".", "TORCH_GPU_ID", "=", "local_rank", "\n", "self", ".", "config", ".", "SIMULATOR_GPU_ID", "=", "local_rank", "\n", "# Multiply by the number of simulators to make sure they also get unique seeds", "\n", "self", ".", "config", ".", "TASK_CONFIG", ".", "SEED", "+=", "(", "\n", "torch", ".", "distributed", ".", "get_rank", "(", ")", "*", "self", ".", "config", ".", "NUM_ENVIRONMENTS", "\n", ")", "\n", "self", ".", "config", ".", "freeze", "(", ")", "\n", "\n", "random", ".", "seed", "(", "self", ".", "config", ".", "TASK_CONFIG", ".", "SEED", ")", "\n", "np", ".", "random", ".", "seed", "(", "self", ".", "config", ".", "TASK_CONFIG", ".", "SEED", ")", "\n", "torch", ".", "manual_seed", "(", "self", ".", "config", ".", "TASK_CONFIG", ".", "SEED", ")", "\n", "self", ".", "num_rollouts_done_store", "=", "torch", ".", "distributed", ".", "PrefixStore", "(", "\n", "\"rollout_tracker\"", ",", "tcp_store", "\n", ")", "\n", "self", ".", "num_rollouts_done_store", ".", "set", "(", "\"num_done\"", ",", "\"0\"", ")", "\n", "\n", "", "if", "rank0_only", "(", ")", "and", "self", ".", "config", ".", "VERBOSE", ":", "\n", "            ", "logger", ".", "info", "(", "f\"config: {self.config}\"", ")", "\n", "\n", "", "profiling_wrapper", ".", "configure", "(", "\n", "capture_start_step", "=", "self", ".", "config", ".", "PROFILING", ".", "CAPTURE_START_STEP", ",", "\n", "num_steps_to_capture", "=", "self", ".", "config", ".", "PROFILING", ".", "NUM_STEPS_TO_CAPTURE", ",", "\n", ")", "\n", "\n", "self", ".", "_init_envs", "(", ")", "\n", "\n", "action_space", "=", "self", ".", "envs", ".", "action_spaces", "[", "0", "]", "\n", "if", "self", ".", "using_velocity_ctrl", ":", "\n", "# For navigation using a continuous action space for a task that", "\n", "# may be asking for discrete actions", "\n", "            ", "self", ".", "policy_action_space", "=", "action_space", "[", "\"VELOCITY_CONTROL\"", "]", "\n", "action_shape", "=", "(", "2", ",", ")", "\n", "discrete_actions", "=", "False", "\n", "", "else", ":", "\n", "            ", "self", ".", "policy_action_space", "=", "action_space", "\n", "if", "is_continuous_action_space", "(", "action_space", ")", ":", "\n", "# Assume ALL actions are NOT discrete", "\n", "                ", "action_shape", "=", "(", "get_num_actions", "(", "action_space", ")", ",", ")", "\n", "discrete_actions", "=", "False", "\n", "", "else", ":", "\n", "# For discrete pointnav", "\n", "                ", "action_shape", "=", "None", "\n", "discrete_actions", "=", "True", "\n", "\n", "", "", "ppo_cfg", "=", "self", ".", "config", ".", "RL", ".", "PPO", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ",", "self", ".", "config", ".", "TORCH_GPU_ID", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "\n", "", "if", "rank0_only", "(", ")", "and", "not", "os", ".", "path", ".", "isdir", "(", "self", ".", "config", ".", "CHECKPOINT_FOLDER", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "config", ".", "CHECKPOINT_FOLDER", ")", "\n", "\n", "", "self", ".", "_setup_actor_critic_agent", "(", "ppo_cfg", ")", "\n", "if", "self", ".", "_is_distributed", ":", "\n", "            ", "self", ".", "agent", ".", "init_distributed", "(", "find_unused_params", "=", "True", ")", "# type: ignore", "\n", "\n", "", "logger", ".", "info", "(", "\n", "\"agent number of parameters: {}\"", ".", "format", "(", "\n", "sum", "(", "param", ".", "numel", "(", ")", "for", "param", "in", "self", ".", "agent", ".", "parameters", "(", ")", ")", "\n", ")", "\n", ")", "\n", "\n", "obs_space", "=", "self", ".", "obs_space", "\n", "if", "self", ".", "_static_encoder", ":", "\n", "            ", "self", ".", "_encoder", "=", "self", ".", "actor_critic", ".", "net", ".", "visual_encoder", "\n", "obs_space", "=", "spaces", ".", "Dict", "(", "\n", "{", "\n", "\"visual_features\"", ":", "spaces", ".", "Box", "(", "\n", "low", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "min", ",", "\n", "high", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "max", ",", "\n", "shape", "=", "self", ".", "_encoder", ".", "output_shape", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", ",", "\n", "**", "obs_space", ".", "spaces", ",", "\n", "}", "\n", ")", "\n", "\n", "", "self", ".", "_nbuffers", "=", "2", "if", "ppo_cfg", ".", "use_double_buffered_sampler", "else", "1", "\n", "\n", "self", ".", "rollouts", "=", "RolloutStorage", "(", "\n", "ppo_cfg", ".", "num_steps", ",", "\n", "self", ".", "envs", ".", "num_envs", ",", "\n", "obs_space", ",", "\n", "self", ".", "policy_action_space", ",", "\n", "ppo_cfg", ".", "hidden_size", ",", "\n", "num_recurrent_layers", "=", "self", ".", "actor_critic", ".", "net", ".", "num_recurrent_layers", ",", "\n", "is_double_buffered", "=", "ppo_cfg", ".", "use_double_buffered_sampler", ",", "\n", "action_shape", "=", "action_shape", ",", "\n", "discrete_actions", "=", "discrete_actions", ",", "\n", ")", "\n", "self", ".", "rollouts", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "observations", "=", "self", ".", "envs", ".", "reset", "(", ")", "\n", "batch", "=", "batch_obs", "(", "\n", "observations", ",", "device", "=", "self", ".", "device", ",", "cache", "=", "self", ".", "_obs_batching_cache", "\n", ")", "\n", "batch", "=", "apply_obs_transforms_batch", "(", "batch", ",", "self", ".", "obs_transforms", ")", "# type: ignore", "\n", "\n", "if", "self", ".", "_static_encoder", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "batch", "[", "\"visual_features\"", "]", "=", "self", ".", "_encoder", "(", "batch", ")", "\n", "\n", "", "", "self", ".", "rollouts", ".", "buffers", "[", "\"observations\"", "]", "[", "0", "]", "=", "batch", "# type: ignore", "\n", "\n", "self", ".", "current_episode_reward", "=", "torch", ".", "zeros", "(", "self", ".", "envs", ".", "num_envs", ",", "1", ")", "\n", "self", ".", "running_episode_stats", "=", "dict", "(", "\n", "count", "=", "torch", ".", "zeros", "(", "self", ".", "envs", ".", "num_envs", ",", "1", ")", ",", "\n", "reward", "=", "torch", ".", "zeros", "(", "self", ".", "envs", ".", "num_envs", ",", "1", ")", ",", "\n", ")", "\n", "self", ".", "window_episode_stats", "=", "defaultdict", "(", "\n", "lambda", ":", "deque", "(", "maxlen", "=", "ppo_cfg", ".", "reward_window_size", ")", "\n", ")", "\n", "\n", "self", ".", "env_time", "=", "0.0", "\n", "self", ".", "pth_time", "=", "0.0", "\n", "self", ".", "t_start", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.ppo_trainer.PPOTrainer.save_checkpoint": [[354, 376], ["habitat.utils.profiling_wrapper.RangeContext", "torch.save", "ppo_trainer.PPOTrainer.agent.state_dict", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.save"], ["", "@", "rank0_only", "\n", "@", "profiling_wrapper", ".", "RangeContext", "(", "\"save_checkpoint\"", ")", "\n", "def", "save_checkpoint", "(", "\n", "self", ",", "file_name", ":", "str", ",", "extra_state", ":", "Optional", "[", "Dict", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "r\"\"\"Save checkpoint with specified name.\n\n        Args:\n            file_name: file name for checkpoint\n\n        Returns:\n            None\n        \"\"\"", "\n", "checkpoint", "=", "{", "\n", "\"state_dict\"", ":", "self", ".", "agent", ".", "state_dict", "(", ")", ",", "\n", "\"config\"", ":", "self", ".", "config", ",", "\n", "}", "\n", "if", "extra_state", "is", "not", "None", ":", "\n", "            ", "checkpoint", "[", "\"extra_state\"", "]", "=", "extra_state", "\n", "\n", "", "torch", ".", "save", "(", "\n", "checkpoint", ",", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "CHECKPOINT_FOLDER", ",", "file_name", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.ppo_trainer.PPOTrainer.load_checkpoint": [[378, 390], ["torch.load"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.load"], ["", "def", "load_checkpoint", "(", "self", ",", "checkpoint_path", ":", "str", ",", "*", "args", ",", "**", "kwargs", ")", "->", "Dict", ":", "\n", "        ", "r\"\"\"Load checkpoint of specified path as a dict.\n\n        Args:\n            checkpoint_path: path of target checkpoint\n            *args: additional positional args\n            **kwargs: additional keyword args\n\n        Returns:\n            dict containing checkpoint info\n        \"\"\"", "\n", "return", "torch", ".", "load", "(", "checkpoint_path", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.ppo_trainer.PPOTrainer._extract_scalars_from_info": [[393, 419], ["info.items", "isinstance", "result.update", "isinstance", "float", "numpy.size", "isinstance", "cls._extract_scalars_from_info().items", "isinstance", "cls._extract_scalars_from_info"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.il.metrics.Metric.update", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.ppo_trainer.PPOTrainer._extract_scalars_from_info"], ["@", "classmethod", "\n", "def", "_extract_scalars_from_info", "(", "\n", "cls", ",", "info", ":", "Dict", "[", "str", ",", "Any", "]", "\n", ")", "->", "Dict", "[", "str", ",", "float", "]", ":", "\n", "        ", "result", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "info", ".", "items", "(", ")", ":", "\n", "            ", "if", "not", "isinstance", "(", "k", ",", "str", ")", "or", "k", "in", "cls", ".", "METRICS_BLACKLIST", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "                ", "result", ".", "update", "(", "\n", "{", "\n", "k", "+", "\".\"", "+", "subk", ":", "subv", "\n", "for", "subk", ",", "subv", "in", "cls", ".", "_extract_scalars_from_info", "(", "\n", "v", "\n", ")", ".", "items", "(", ")", "\n", "if", "isinstance", "(", "subk", ",", "str", ")", "\n", "and", "k", "+", "\".\"", "+", "subk", "not", "in", "cls", ".", "METRICS_BLACKLIST", "\n", "}", "\n", ")", "\n", "# Things that are scalar-like will have an np.size of 1.", "\n", "# Strings also have an np.size of 1, so explicitly ban those", "\n", "", "elif", "np", ".", "size", "(", "v", ")", "==", "1", "and", "not", "isinstance", "(", "v", ",", "str", ")", ":", "\n", "                ", "result", "[", "k", "]", "=", "float", "(", "v", ")", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.ppo_trainer.PPOTrainer._extract_scalars_from_infos": [[420, 431], ["collections.defaultdict", "range", "len", "cls._extract_scalars_from_info().items", "results[].append", "cls._extract_scalars_from_info"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.ppo_trainer.PPOTrainer._extract_scalars_from_info"], ["", "@", "classmethod", "\n", "def", "_extract_scalars_from_infos", "(", "\n", "cls", ",", "infos", ":", "List", "[", "Dict", "[", "str", ",", "Any", "]", "]", "\n", ")", "->", "Dict", "[", "str", ",", "List", "[", "float", "]", "]", ":", "\n", "\n", "        ", "results", "=", "defaultdict", "(", "list", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "infos", ")", ")", ":", "\n", "            ", "for", "k", ",", "v", "in", "cls", ".", "_extract_scalars_from_info", "(", "infos", "[", "i", "]", ")", ".", "items", "(", ")", ":", "\n", "                ", "results", "[", "k", "]", ".", "append", "(", "v", ")", "\n", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.ppo_trainer.PPOTrainer._compute_actions_and_step_envs": [[432, 492], ["slice", "time.time", "actions.to.to.to", "habitat.utils.profiling_wrapper.range_pop", "time.time", "zip", "ppo_trainer.PPOTrainer.rollouts.insert", "int", "int", "torch.no_grad", "habitat.utils.profiling_wrapper.range_push", "ppo_trainer.PPOTrainer.actor_critic.act", "time.time", "range", "actions.to.to.unbind", "ppo_trainer.PPOTrainer.envs.async_step_at", "time.time", "habitat_baselines.utils.common.action_array_to_dict", "act.item"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.profiling_wrapper.range_pop", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.insert", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.profiling_wrapper.range_push", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.policy.NetPolicy.act", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env.VectorEnv.async_step_at", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.action_array_to_dict"], ["", "def", "_compute_actions_and_step_envs", "(", "self", ",", "buffer_index", ":", "int", "=", "0", ")", ":", "\n", "        ", "num_envs", "=", "self", ".", "envs", ".", "num_envs", "\n", "env_slice", "=", "slice", "(", "\n", "int", "(", "buffer_index", "*", "num_envs", "/", "self", ".", "_nbuffers", ")", ",", "\n", "int", "(", "(", "buffer_index", "+", "1", ")", "*", "num_envs", "/", "self", ".", "_nbuffers", ")", ",", "\n", ")", "\n", "\n", "t_sample_action", "=", "time", ".", "time", "(", ")", "\n", "\n", "# sample actions", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "step_batch", "=", "self", ".", "rollouts", ".", "buffers", "[", "\n", "self", ".", "rollouts", ".", "current_rollout_step_idxs", "[", "buffer_index", "]", ",", "\n", "env_slice", ",", "\n", "]", "\n", "\n", "profiling_wrapper", ".", "range_push", "(", "\"compute actions\"", ")", "\n", "(", "\n", "values", ",", "\n", "actions", ",", "\n", "actions_log_probs", ",", "\n", "recurrent_hidden_states", ",", "\n", ")", "=", "self", ".", "actor_critic", ".", "act", "(", "\n", "step_batch", "[", "\"observations\"", "]", ",", "\n", "step_batch", "[", "\"recurrent_hidden_states\"", "]", ",", "\n", "step_batch", "[", "\"prev_actions\"", "]", ",", "\n", "step_batch", "[", "\"masks\"", "]", ",", "\n", ")", "\n", "\n", "# NB: Move actions to CPU.  If CUDA tensors are", "\n", "# sent in to env.step(), that will create CUDA contexts", "\n", "# in the subprocesses.", "\n", "# For backwards compatibility, we also call .item() to convert to", "\n", "# an int", "\n", "", "actions", "=", "actions", ".", "to", "(", "device", "=", "\"cpu\"", ")", "\n", "self", ".", "pth_time", "+=", "time", ".", "time", "(", ")", "-", "t_sample_action", "\n", "\n", "profiling_wrapper", ".", "range_pop", "(", ")", "# compute actions", "\n", "\n", "t_step_env", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "index_env", ",", "act", "in", "zip", "(", "\n", "range", "(", "env_slice", ".", "start", ",", "env_slice", ".", "stop", ")", ",", "actions", ".", "unbind", "(", "0", ")", "\n", ")", ":", "\n", "            ", "if", "act", ".", "shape", "[", "0", "]", ">", "1", ":", "\n", "                ", "step_action", "=", "action_array_to_dict", "(", "\n", "self", ".", "policy_action_space", ",", "act", "\n", ")", "\n", "", "else", ":", "\n", "                ", "step_action", "=", "act", ".", "item", "(", ")", "\n", "", "self", ".", "envs", ".", "async_step_at", "(", "index_env", ",", "step_action", ")", "\n", "\n", "", "self", ".", "env_time", "+=", "time", ".", "time", "(", ")", "-", "t_step_env", "\n", "\n", "self", ".", "rollouts", ".", "insert", "(", "\n", "next_recurrent_hidden_states", "=", "recurrent_hidden_states", ",", "\n", "actions", "=", "actions", ",", "\n", "action_log_probs", "=", "actions_log_probs", ",", "\n", "value_preds", "=", "values", ",", "\n", "buffer_index", "=", "buffer_index", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.ppo_trainer.PPOTrainer._collect_environment_result": [[494, 568], ["slice", "time.time", "time.time", "habitat_baselines.utils.common.batch_obs", "habitat_baselines.common.obs_transformers.apply_obs_transforms_batch", "torch.tensor", "rewards.unsqueeze.unsqueeze.unsqueeze", "torch.tensor", "torch.logical_not", "current_ep_reward.where", "torch.logical_not.float", "ppo_trainer.PPOTrainer._extract_scalars_from_infos().items", "ppo_trainer.PPOTrainer.current_episode_reward[].masked_fill_", "ppo_trainer.PPOTrainer.rollouts.insert", "ppo_trainer.PPOTrainer.rollouts.advance_rollout", "int", "int", "ppo_trainer.PPOTrainer.envs.wait_step_at", "list", "time.time", "current_ep_reward.new_zeros", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze.where", "time.time", "range", "zip", "ppo_trainer.PPOTrainer._extract_scalars_from_infos", "torch.zeros_like", "torch.tensor().unsqueeze.new_zeros", "torch.no_grad", "ppo_trainer.PPOTrainer._encoder", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.batch_obs", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.apply_obs_transforms_batch", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.insert", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.advance_rollout", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env.VectorEnv.wait_step_at", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.ppo_trainer.PPOTrainer._extract_scalars_from_infos"], ["", "def", "_collect_environment_result", "(", "self", ",", "buffer_index", ":", "int", "=", "0", ")", ":", "\n", "        ", "num_envs", "=", "self", ".", "envs", ".", "num_envs", "\n", "env_slice", "=", "slice", "(", "\n", "int", "(", "buffer_index", "*", "num_envs", "/", "self", ".", "_nbuffers", ")", ",", "\n", "int", "(", "(", "buffer_index", "+", "1", ")", "*", "num_envs", "/", "self", ".", "_nbuffers", ")", ",", "\n", ")", "\n", "\n", "t_step_env", "=", "time", ".", "time", "(", ")", "\n", "outputs", "=", "[", "\n", "self", ".", "envs", ".", "wait_step_at", "(", "index_env", ")", "\n", "for", "index_env", "in", "range", "(", "env_slice", ".", "start", ",", "env_slice", ".", "stop", ")", "\n", "]", "\n", "\n", "observations", ",", "rewards_l", ",", "dones", ",", "infos", "=", "[", "\n", "list", "(", "x", ")", "for", "x", "in", "zip", "(", "*", "outputs", ")", "\n", "]", "\n", "\n", "self", ".", "env_time", "+=", "time", ".", "time", "(", ")", "-", "t_step_env", "\n", "\n", "t_update_stats", "=", "time", ".", "time", "(", ")", "\n", "batch", "=", "batch_obs", "(", "\n", "observations", ",", "device", "=", "self", ".", "device", ",", "cache", "=", "self", ".", "_obs_batching_cache", "\n", ")", "\n", "batch", "=", "apply_obs_transforms_batch", "(", "batch", ",", "self", ".", "obs_transforms", ")", "# type: ignore", "\n", "\n", "rewards", "=", "torch", ".", "tensor", "(", "\n", "rewards_l", ",", "\n", "dtype", "=", "torch", ".", "float", ",", "\n", "device", "=", "self", ".", "current_episode_reward", ".", "device", ",", "\n", ")", "\n", "rewards", "=", "rewards", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "not_done_masks", "=", "torch", ".", "tensor", "(", "\n", "[", "[", "not", "done", "]", "for", "done", "in", "dones", "]", ",", "\n", "dtype", "=", "torch", ".", "bool", ",", "\n", "device", "=", "self", ".", "current_episode_reward", ".", "device", ",", "\n", ")", "\n", "done_masks", "=", "torch", ".", "logical_not", "(", "not_done_masks", ")", "\n", "\n", "self", ".", "current_episode_reward", "[", "env_slice", "]", "+=", "rewards", "\n", "current_ep_reward", "=", "self", ".", "current_episode_reward", "[", "env_slice", "]", "\n", "self", ".", "running_episode_stats", "[", "\"reward\"", "]", "[", "env_slice", "]", "+=", "current_ep_reward", ".", "where", "(", "done_masks", ",", "current_ep_reward", ".", "new_zeros", "(", "(", ")", ")", ")", "# type: ignore", "\n", "self", ".", "running_episode_stats", "[", "\"count\"", "]", "[", "env_slice", "]", "+=", "done_masks", ".", "float", "(", ")", "# type: ignore", "\n", "for", "k", ",", "v_k", "in", "self", ".", "_extract_scalars_from_infos", "(", "infos", ")", ".", "items", "(", ")", ":", "\n", "            ", "v", "=", "torch", ".", "tensor", "(", "\n", "v_k", ",", "\n", "dtype", "=", "torch", ".", "float", ",", "\n", "device", "=", "self", ".", "current_episode_reward", ".", "device", ",", "\n", ")", ".", "unsqueeze", "(", "1", ")", "\n", "if", "k", "not", "in", "self", ".", "running_episode_stats", ":", "\n", "                ", "self", ".", "running_episode_stats", "[", "k", "]", "=", "torch", ".", "zeros_like", "(", "\n", "self", ".", "running_episode_stats", "[", "\"count\"", "]", "\n", ")", "\n", "\n", "", "self", ".", "running_episode_stats", "[", "k", "]", "[", "env_slice", "]", "+=", "v", ".", "where", "(", "done_masks", ",", "v", ".", "new_zeros", "(", "(", ")", ")", ")", "# type: ignore", "\n", "\n", "", "self", ".", "current_episode_reward", "[", "env_slice", "]", ".", "masked_fill_", "(", "done_masks", ",", "0.0", ")", "\n", "\n", "if", "self", ".", "_static_encoder", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "batch", "[", "\"visual_features\"", "]", "=", "self", ".", "_encoder", "(", "batch", ")", "\n", "\n", "", "", "self", ".", "rollouts", ".", "insert", "(", "\n", "next_observations", "=", "batch", ",", "\n", "rewards", "=", "rewards", ",", "\n", "next_masks", "=", "not_done_masks", ",", "\n", "buffer_index", "=", "buffer_index", ",", "\n", ")", "\n", "\n", "self", ".", "rollouts", ".", "advance_rollout", "(", "buffer_index", ")", "\n", "\n", "self", ".", "pth_time", "+=", "time", ".", "time", "(", ")", "-", "t_update_stats", "\n", "\n", "return", "env_slice", ".", "stop", "-", "env_slice", ".", "start", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.ppo_trainer.PPOTrainer._collect_rollout_step": [[569, 573], ["habitat.utils.profiling_wrapper.RangeContext", "ppo_trainer.PPOTrainer._compute_actions_and_step_envs", "ppo_trainer.PPOTrainer._collect_environment_result"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.ppo_trainer.PPOTrainer._compute_actions_and_step_envs", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.ppo_trainer.PPOTrainer._collect_environment_result"], ["", "@", "profiling_wrapper", ".", "RangeContext", "(", "\"_collect_rollout_step\"", ")", "\n", "def", "_collect_rollout_step", "(", "self", ")", ":", "\n", "        ", "self", ".", "_compute_actions_and_step_envs", "(", ")", "\n", "return", "self", ".", "_collect_environment_result", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.ppo_trainer.PPOTrainer._update_agent": [[574, 607], ["habitat.utils.profiling_wrapper.RangeContext", "time.time", "ppo_trainer.PPOTrainer.rollouts.compute_returns", "ppo_trainer.PPOTrainer.agent.train", "ppo_trainer.PPOTrainer.agent.update", "ppo_trainer.PPOTrainer.rollouts.after_update", "torch.no_grad", "ppo_trainer.PPOTrainer.actor_critic.get_value", "time.time"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.compute_returns", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.train", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.il.metrics.Metric.update", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.after_update", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.policy.NetPolicy.get_value"], ["", "@", "profiling_wrapper", ".", "RangeContext", "(", "\"_update_agent\"", ")", "\n", "def", "_update_agent", "(", "self", ")", ":", "\n", "        ", "ppo_cfg", "=", "self", ".", "config", ".", "RL", ".", "PPO", "\n", "t_update_model", "=", "time", ".", "time", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "step_batch", "=", "self", ".", "rollouts", ".", "buffers", "[", "\n", "self", ".", "rollouts", ".", "current_rollout_step_idx", "\n", "]", "\n", "\n", "next_value", "=", "self", ".", "actor_critic", ".", "get_value", "(", "\n", "step_batch", "[", "\"observations\"", "]", ",", "\n", "step_batch", "[", "\"recurrent_hidden_states\"", "]", ",", "\n", "step_batch", "[", "\"prev_actions\"", "]", ",", "\n", "step_batch", "[", "\"masks\"", "]", ",", "\n", ")", "\n", "\n", "", "self", ".", "rollouts", ".", "compute_returns", "(", "\n", "next_value", ",", "ppo_cfg", ".", "use_gae", ",", "ppo_cfg", ".", "gamma", ",", "ppo_cfg", ".", "tau", "\n", ")", "\n", "\n", "self", ".", "agent", ".", "train", "(", ")", "\n", "\n", "value_loss", ",", "action_loss", ",", "dist_entropy", "=", "self", ".", "agent", ".", "update", "(", "\n", "self", ".", "rollouts", "\n", ")", "\n", "\n", "self", ".", "rollouts", ".", "after_update", "(", ")", "\n", "self", ".", "pth_time", "+=", "time", ".", "time", "(", ")", "-", "t_update_model", "\n", "\n", "return", "(", "\n", "value_loss", ",", "\n", "action_loss", ",", "\n", "dist_entropy", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.ppo_trainer.PPOTrainer._coalesce_post_step": [[609, 643], ["sorted", "torch.stack", "ppo_trainer.PPOTrainer._all_reduce", "enumerate", "ppo_trainer.PPOTrainer.running_episode_stats.keys", "ppo_trainer.PPOTrainer.window_episode_stats[].append", "sorted", "torch.tensor", "ppo_trainer.PPOTrainer._all_reduce", "int", "torch.distributed.get_world_size", "habitat_baselines.rl.ddppo.ddp_utils.rank0_only", "ppo_trainer.PPOTrainer.num_rollouts_done_store.set", "losses.keys", "stats[].item", "stats[].item", "enumerate"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.ppo_trainer.PPOTrainer._all_reduce", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.ppo_trainer.PPOTrainer._all_reduce", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ddppo.ddp_utils.rank0_only", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.set"], ["", "def", "_coalesce_post_step", "(", "\n", "self", ",", "losses", ":", "Dict", "[", "str", ",", "float", "]", ",", "count_steps_delta", ":", "int", "\n", ")", "->", "Dict", "[", "str", ",", "float", "]", ":", "\n", "        ", "stats_ordering", "=", "sorted", "(", "self", ".", "running_episode_stats", ".", "keys", "(", ")", ")", "\n", "stats", "=", "torch", ".", "stack", "(", "\n", "[", "self", ".", "running_episode_stats", "[", "k", "]", "for", "k", "in", "stats_ordering", "]", ",", "0", "\n", ")", "\n", "\n", "stats", "=", "self", ".", "_all_reduce", "(", "stats", ")", "\n", "\n", "for", "i", ",", "k", "in", "enumerate", "(", "stats_ordering", ")", ":", "\n", "            ", "self", ".", "window_episode_stats", "[", "k", "]", ".", "append", "(", "stats", "[", "i", "]", ")", "\n", "\n", "", "if", "self", ".", "_is_distributed", ":", "\n", "            ", "loss_name_ordering", "=", "sorted", "(", "losses", ".", "keys", "(", ")", ")", "\n", "stats", "=", "torch", ".", "tensor", "(", "\n", "[", "losses", "[", "k", "]", "for", "k", "in", "loss_name_ordering", "]", "+", "[", "count_steps_delta", "]", ",", "\n", "device", "=", "\"cpu\"", ",", "\n", "dtype", "=", "torch", ".", "float32", ",", "\n", ")", "\n", "stats", "=", "self", ".", "_all_reduce", "(", "stats", ")", "\n", "count_steps_delta", "=", "int", "(", "stats", "[", "-", "1", "]", ".", "item", "(", ")", ")", "\n", "stats", "/=", "torch", ".", "distributed", ".", "get_world_size", "(", ")", "\n", "\n", "losses", "=", "{", "\n", "k", ":", "stats", "[", "i", "]", ".", "item", "(", ")", "for", "i", ",", "k", "in", "enumerate", "(", "loss_name_ordering", ")", "\n", "}", "\n", "\n", "", "if", "self", ".", "_is_distributed", "and", "rank0_only", "(", ")", ":", "\n", "            ", "self", ".", "num_rollouts_done_store", ".", "set", "(", "\"num_done\"", ",", "\"0\"", ")", "\n", "\n", "", "self", ".", "num_steps_done", "+=", "count_steps_delta", "\n", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.ppo_trainer.PPOTrainer._training_log": [[644, 706], ["max", "writer.add_scalar", "metrics.items", "losses.items", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "habitat.logger.info", "habitat.logger.info", "habitat.logger.info", "v[].sum().item", "ppo_trainer.PPOTrainer.window_episode_stats.items", "deltas.items", "len", "time.time", "len", "v[].sum", "deltas.items"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensorboard_utils.WeightsAndBiasesWriter.add_scalar", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensorboard_utils.WeightsAndBiasesWriter.add_scalar", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensorboard_utils.WeightsAndBiasesWriter.add_scalar", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensorboard_utils.WeightsAndBiasesWriter.add_scalar"], ["", "@", "rank0_only", "\n", "def", "_training_log", "(", "\n", "self", ",", "writer", ",", "losses", ":", "Dict", "[", "str", ",", "float", "]", ",", "prev_time", ":", "int", "=", "0", "\n", ")", ":", "\n", "        ", "deltas", "=", "{", "\n", "k", ":", "(", "\n", "(", "v", "[", "-", "1", "]", "-", "v", "[", "0", "]", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "if", "len", "(", "v", ")", ">", "1", "\n", "else", "v", "[", "0", "]", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "window_episode_stats", ".", "items", "(", ")", "\n", "}", "\n", "deltas", "[", "\"count\"", "]", "=", "max", "(", "deltas", "[", "\"count\"", "]", ",", "1.0", ")", "\n", "\n", "writer", ".", "add_scalar", "(", "\n", "\"reward\"", ",", "\n", "deltas", "[", "\"reward\"", "]", "/", "deltas", "[", "\"count\"", "]", ",", "\n", "self", ".", "num_steps_done", ",", "\n", ")", "\n", "\n", "# Check to see if there are any metrics", "\n", "# that haven't been logged yet", "\n", "metrics", "=", "{", "\n", "k", ":", "v", "/", "deltas", "[", "\"count\"", "]", "\n", "for", "k", ",", "v", "in", "deltas", ".", "items", "(", ")", "\n", "if", "k", "not", "in", "{", "\"reward\"", ",", "\"count\"", "}", "\n", "}", "\n", "\n", "for", "k", ",", "v", "in", "metrics", ".", "items", "(", ")", ":", "\n", "            ", "writer", ".", "add_scalar", "(", "f\"metrics/{k}\"", ",", "v", ",", "self", ".", "num_steps_done", ")", "\n", "", "for", "k", ",", "v", "in", "losses", ".", "items", "(", ")", ":", "\n", "            ", "writer", ".", "add_scalar", "(", "f\"losses/{k}\"", ",", "v", ",", "self", ".", "num_steps_done", ")", "\n", "\n", "", "fps", "=", "self", ".", "num_steps_done", "/", "(", "(", "time", ".", "time", "(", ")", "-", "self", ".", "t_start", ")", "+", "prev_time", ")", "\n", "writer", ".", "add_scalar", "(", "\"metrics/fps\"", ",", "fps", ",", "self", ".", "num_steps_done", ")", "\n", "\n", "# log stats", "\n", "if", "self", ".", "num_updates_done", "%", "self", ".", "config", ".", "LOG_INTERVAL", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "\n", "\"update: {}\\tfps: {:.3f}\\t\"", ".", "format", "(", "\n", "self", ".", "num_updates_done", ",", "\n", "fps", ",", "\n", ")", "\n", ")", "\n", "\n", "logger", ".", "info", "(", "\n", "\"update: {}\\tenv-time: {:.3f}s\\tpth-time: {:.3f}s\\t\"", "\n", "\"frames: {}\"", ".", "format", "(", "\n", "self", ".", "num_updates_done", ",", "\n", "self", ".", "env_time", ",", "\n", "self", ".", "pth_time", ",", "\n", "self", ".", "num_steps_done", ",", "\n", ")", "\n", ")", "\n", "\n", "logger", ".", "info", "(", "\n", "\"Average window size: {}  {}\"", ".", "format", "(", "\n", "len", "(", "self", ".", "window_episode_stats", "[", "\"count\"", "]", ")", ",", "\n", "\"  \"", ".", "join", "(", "\n", "\"{}: {:.3f}\"", ".", "format", "(", "k", ",", "v", "/", "deltas", "[", "\"count\"", "]", ")", "\n", "for", "k", ",", "v", "in", "deltas", ".", "items", "(", ")", "\n", "if", "k", "!=", "\"count\"", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.ppo_trainer.PPOTrainer.should_end_early": [[710, 720], ["int", "ppo_trainer.PPOTrainer.num_rollouts_done_store.get", "torch.distributed.get_world_size"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get"], ["", "", "def", "should_end_early", "(", "self", ",", "rollout_step", ")", "->", "bool", ":", "\n", "        ", "if", "not", "self", ".", "_is_distributed", ":", "\n", "            ", "return", "False", "\n", "# This is where the preemption of workers happens.  If a", "\n", "# worker detects it will be a straggler, it preempts itself!", "\n", "", "return", "(", "\n", "rollout_step", "\n", ">=", "self", ".", "config", ".", "RL", ".", "PPO", ".", "num_steps", "*", "self", ".", "SHORT_ROLLOUT_THRESHOLD", "\n", ")", "and", "int", "(", "self", ".", "num_rollouts_done_store", ".", "get", "(", "\"num_done\"", ")", ")", ">=", "(", "\n", "self", ".", "config", ".", "RL", ".", "DDPPO", ".", "sync_frac", "*", "torch", ".", "distributed", ".", "get_world_size", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.ppo_trainer.PPOTrainer.train": [[722, 884], ["habitat.utils.profiling_wrapper.RangeContext", "ppo_trainer.PPOTrainer._init_train", "torch.optim.lr_scheduler.LambdaLR", "habitat_baselines.rl.ddppo.ddp_utils.load_resume_state", "ppo_trainer.PPOTrainer.agent.load_state_dict", "ppo_trainer.PPOTrainer.agent.optimizer.load_state_dict", "torch.optim.lr_scheduler.LambdaLR.load_state_dict", "ppo_trainer.PPOTrainer.window_episode_stats.update", "ppo_trainer.PPOTrainer.envs.close", "habitat_baselines.rl.ddppo.ddp_utils.rank0_only", "habitat_baselines.common.tensorboard_utils.get_writer", "contextlib.suppress", "ppo_trainer.PPOTrainer.is_done", "habitat.utils.profiling_wrapper.on_start_step", "habitat.utils.profiling_wrapper.range_push", "habitat_baselines.rl.ddppo.ddp_utils.EXIT.is_set", "ppo_trainer.PPOTrainer.agent.eval", "habitat.utils.profiling_wrapper.range_push", "habitat.utils.profiling_wrapper.range_push", "range", "range", "habitat.utils.profiling_wrapper.range_pop", "ppo_trainer.PPOTrainer._update_agent", "ppo_trainer.PPOTrainer._coalesce_post_step", "ppo_trainer.PPOTrainer._training_log", "habitat.utils.profiling_wrapper.range_pop", "habitat_baselines.rl.ddppo.ddp_utils.rank0_only", "ppo_trainer.PPOTrainer._should_save_resume_state", "dict", "habitat_baselines.rl.ddppo.ddp_utils.save_resume_state", "habitat.utils.profiling_wrapper.range_pop", "ppo_trainer.PPOTrainer.envs.close", "habitat_baselines.rl.ddppo.ddp_utils.requeue_job", "ppo_trainer.PPOTrainer._compute_actions_and_step_envs", "range", "ppo_trainer.PPOTrainer.num_rollouts_done_store.add", "torch.optim.lr_scheduler.LambdaLR.step", "dict", "habitat_baselines.rl.ddppo.ddp_utils.rank0_only", "ppo_trainer.PPOTrainer.should_checkpoint", "ppo_trainer.PPOTrainer.save_checkpoint", "ppo_trainer.PPOTrainer.percent_done", "dict", "ppo_trainer.PPOTrainer.should_end_early", "ppo_trainer.PPOTrainer._collect_environment_result", "dict", "ppo_trainer.PPOTrainer.percent_done", "dict", "habitat.utils.profiling_wrapper.range_pop", "ppo_trainer.PPOTrainer._compute_actions_and_step_envs", "ppo_trainer.PPOTrainer.agent.state_dict", "ppo_trainer.PPOTrainer.agent.optimizer.state_dict", "torch.optim.lr_scheduler.LambdaLR.state_dict", "habitat.utils.profiling_wrapper.range_push", "time.time", "time.time"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.ppo_trainer.PPOTrainer._init_train", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ddppo.ddp_utils.load_resume_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.il.metrics.Metric.update", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.close", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ddppo.ddp_utils.rank0_only", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensorboard_utils.get_writer", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_trainer.BaseRLTrainer.is_done", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.profiling_wrapper.on_start_step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.profiling_wrapper.range_push", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_trainer.BaseTrainer.eval", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.profiling_wrapper.range_push", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.profiling_wrapper.range_push", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.profiling_wrapper.range_pop", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.ppo_trainer.PPOTrainer._update_agent", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.ppo_trainer.PPOTrainer._coalesce_post_step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.ppo_trainer.PPOTrainer._training_log", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.profiling_wrapper.range_pop", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ddppo.ddp_utils.rank0_only", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_trainer.BaseRLTrainer._should_save_resume_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ddppo.ddp_utils.save_resume_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.profiling_wrapper.range_pop", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.close", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ddppo.ddp_utils.requeue_job", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.ppo_trainer.PPOTrainer._compute_actions_and_step_envs", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ddppo.ddp_utils.rank0_only", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_trainer.BaseRLTrainer.should_checkpoint", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.save_checkpoint", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_trainer.BaseRLTrainer.percent_done", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.ppo_trainer.PPOTrainer.should_end_early", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.ppo_trainer.PPOTrainer._collect_environment_result", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_trainer.BaseRLTrainer.percent_done", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.profiling_wrapper.range_pop", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.ppo_trainer.PPOTrainer._compute_actions_and_step_envs", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.profiling_wrapper.range_push"], ["", "@", "profiling_wrapper", ".", "RangeContext", "(", "\"train\"", ")", "\n", "def", "train", "(", "self", ")", "->", "None", ":", "\n", "        ", "r\"\"\"Main method for training DD/PPO.\n\n        Returns:\n            None\n        \"\"\"", "\n", "\n", "self", ".", "_init_train", "(", ")", "\n", "\n", "count_checkpoints", "=", "0", "\n", "prev_time", "=", "0", "\n", "\n", "lr_scheduler", "=", "LambdaLR", "(", "\n", "optimizer", "=", "self", ".", "agent", ".", "optimizer", ",", "\n", "lr_lambda", "=", "lambda", "x", ":", "1", "-", "self", ".", "percent_done", "(", ")", ",", "\n", ")", "\n", "\n", "resume_state", "=", "load_resume_state", "(", "self", ".", "config", ")", "\n", "if", "resume_state", "is", "not", "None", ":", "\n", "            ", "self", ".", "agent", ".", "load_state_dict", "(", "resume_state", "[", "\"state_dict\"", "]", ")", "\n", "self", ".", "agent", ".", "optimizer", ".", "load_state_dict", "(", "resume_state", "[", "\"optim_state\"", "]", ")", "\n", "lr_scheduler", ".", "load_state_dict", "(", "resume_state", "[", "\"lr_sched_state\"", "]", ")", "\n", "\n", "requeue_stats", "=", "resume_state", "[", "\"requeue_stats\"", "]", "\n", "self", ".", "env_time", "=", "requeue_stats", "[", "\"env_time\"", "]", "\n", "self", ".", "pth_time", "=", "requeue_stats", "[", "\"pth_time\"", "]", "\n", "self", ".", "num_steps_done", "=", "requeue_stats", "[", "\"num_steps_done\"", "]", "\n", "self", ".", "num_updates_done", "=", "requeue_stats", "[", "\"num_updates_done\"", "]", "\n", "self", ".", "_last_checkpoint_percent", "=", "requeue_stats", "[", "\n", "\"_last_checkpoint_percent\"", "\n", "]", "\n", "count_checkpoints", "=", "requeue_stats", "[", "\"count_checkpoints\"", "]", "\n", "prev_time", "=", "requeue_stats", "[", "\"prev_time\"", "]", "\n", "\n", "self", ".", "running_episode_stats", "=", "requeue_stats", "[", "\"running_episode_stats\"", "]", "\n", "self", ".", "window_episode_stats", ".", "update", "(", "\n", "requeue_stats", "[", "\"window_episode_stats\"", "]", "\n", ")", "\n", "\n", "", "ppo_cfg", "=", "self", ".", "config", ".", "RL", ".", "PPO", "\n", "\n", "with", "(", "\n", "get_writer", "(", "self", ".", "config", ",", "flush_secs", "=", "self", ".", "flush_secs", ")", "\n", "if", "rank0_only", "(", ")", "\n", "else", "contextlib", ".", "suppress", "(", ")", "\n", ")", "as", "writer", ":", "\n", "            ", "while", "not", "self", ".", "is_done", "(", ")", ":", "\n", "                ", "profiling_wrapper", ".", "on_start_step", "(", ")", "\n", "profiling_wrapper", ".", "range_push", "(", "\"train update\"", ")", "\n", "\n", "if", "ppo_cfg", ".", "use_linear_clip_decay", ":", "\n", "                    ", "self", ".", "agent", ".", "clip_param", "=", "ppo_cfg", ".", "clip_param", "*", "(", "\n", "1", "-", "self", ".", "percent_done", "(", ")", "\n", ")", "\n", "\n", "", "if", "rank0_only", "(", ")", "and", "self", ".", "_should_save_resume_state", "(", ")", ":", "\n", "                    ", "requeue_stats", "=", "dict", "(", "\n", "env_time", "=", "self", ".", "env_time", ",", "\n", "pth_time", "=", "self", ".", "pth_time", ",", "\n", "count_checkpoints", "=", "count_checkpoints", ",", "\n", "num_steps_done", "=", "self", ".", "num_steps_done", ",", "\n", "num_updates_done", "=", "self", ".", "num_updates_done", ",", "\n", "_last_checkpoint_percent", "=", "self", ".", "_last_checkpoint_percent", ",", "\n", "prev_time", "=", "(", "time", ".", "time", "(", ")", "-", "self", ".", "t_start", ")", "+", "prev_time", ",", "\n", "running_episode_stats", "=", "self", ".", "running_episode_stats", ",", "\n", "window_episode_stats", "=", "dict", "(", "self", ".", "window_episode_stats", ")", ",", "\n", ")", "\n", "\n", "save_resume_state", "(", "\n", "dict", "(", "\n", "state_dict", "=", "self", ".", "agent", ".", "state_dict", "(", ")", ",", "\n", "optim_state", "=", "self", ".", "agent", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "lr_sched_state", "=", "lr_scheduler", ".", "state_dict", "(", ")", ",", "\n", "config", "=", "self", ".", "config", ",", "\n", "requeue_stats", "=", "requeue_stats", ",", "\n", ")", ",", "\n", "self", ".", "config", ",", "\n", ")", "\n", "\n", "", "if", "EXIT", ".", "is_set", "(", ")", ":", "\n", "                    ", "profiling_wrapper", ".", "range_pop", "(", ")", "# train update", "\n", "\n", "self", ".", "envs", ".", "close", "(", ")", "\n", "\n", "requeue_job", "(", ")", "\n", "\n", "return", "\n", "\n", "", "self", ".", "agent", ".", "eval", "(", ")", "\n", "count_steps_delta", "=", "0", "\n", "profiling_wrapper", ".", "range_push", "(", "\"rollouts loop\"", ")", "\n", "\n", "profiling_wrapper", ".", "range_push", "(", "\"_collect_rollout_step\"", ")", "\n", "for", "buffer_index", "in", "range", "(", "self", ".", "_nbuffers", ")", ":", "\n", "                    ", "self", ".", "_compute_actions_and_step_envs", "(", "buffer_index", ")", "\n", "\n", "", "for", "step", "in", "range", "(", "ppo_cfg", ".", "num_steps", ")", ":", "\n", "                    ", "is_last_step", "=", "(", "\n", "self", ".", "should_end_early", "(", "step", "+", "1", ")", "\n", "or", "(", "step", "+", "1", ")", "==", "ppo_cfg", ".", "num_steps", "\n", ")", "\n", "\n", "for", "buffer_index", "in", "range", "(", "self", ".", "_nbuffers", ")", ":", "\n", "                        ", "count_steps_delta", "+=", "self", ".", "_collect_environment_result", "(", "\n", "buffer_index", "\n", ")", "\n", "\n", "if", "(", "buffer_index", "+", "1", ")", "==", "self", ".", "_nbuffers", ":", "\n", "                            ", "profiling_wrapper", ".", "range_pop", "(", ")", "# _collect_rollout_step", "\n", "\n", "", "if", "not", "is_last_step", ":", "\n", "                            ", "if", "(", "buffer_index", "+", "1", ")", "==", "self", ".", "_nbuffers", ":", "\n", "                                ", "profiling_wrapper", ".", "range_push", "(", "\n", "\"_collect_rollout_step\"", "\n", ")", "\n", "\n", "", "self", ".", "_compute_actions_and_step_envs", "(", "buffer_index", ")", "\n", "\n", "", "", "if", "is_last_step", ":", "\n", "                        ", "break", "\n", "\n", "", "", "profiling_wrapper", ".", "range_pop", "(", ")", "# rollouts loop", "\n", "\n", "if", "self", ".", "_is_distributed", ":", "\n", "                    ", "self", ".", "num_rollouts_done_store", ".", "add", "(", "\"num_done\"", ",", "1", ")", "\n", "\n", "", "(", "\n", "value_loss", ",", "\n", "action_loss", ",", "\n", "dist_entropy", ",", "\n", ")", "=", "self", ".", "_update_agent", "(", ")", "\n", "\n", "if", "ppo_cfg", ".", "use_linear_lr_decay", ":", "\n", "                    ", "lr_scheduler", ".", "step", "(", ")", "# type: ignore", "\n", "\n", "", "self", ".", "num_updates_done", "+=", "1", "\n", "losses", "=", "self", ".", "_coalesce_post_step", "(", "\n", "dict", "(", "\n", "value_loss", "=", "value_loss", ",", "\n", "action_loss", "=", "action_loss", ",", "\n", "entropy", "=", "dist_entropy", ",", "\n", ")", ",", "\n", "count_steps_delta", ",", "\n", ")", "\n", "\n", "self", ".", "_training_log", "(", "writer", ",", "losses", ",", "prev_time", ")", "\n", "\n", "# checkpoint model", "\n", "if", "rank0_only", "(", ")", "and", "self", ".", "should_checkpoint", "(", ")", ":", "\n", "                    ", "self", ".", "save_checkpoint", "(", "\n", "f\"ckpt.{count_checkpoints}.pth\"", ",", "\n", "dict", "(", "\n", "step", "=", "self", ".", "num_steps_done", ",", "\n", "wall_time", "=", "(", "time", ".", "time", "(", ")", "-", "self", ".", "t_start", ")", "+", "prev_time", ",", "\n", ")", ",", "\n", ")", "\n", "count_checkpoints", "+=", "1", "\n", "\n", "", "profiling_wrapper", ".", "range_pop", "(", ")", "# train update", "\n", "\n", "", "self", ".", "envs", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.ppo_trainer.PPOTrainer._eval_checkpoint": [[885, 1168], ["ppo_trainer.PPOTrainer.defrost", "ppo_trainer.PPOTrainer.freeze", "ppo_trainer.PPOTrainer._init_envs", "ppo_trainer.PPOTrainer._setup_actor_critic_agent", "ppo_trainer.PPOTrainer.envs.reset", "habitat_baselines.utils.common.batch_obs", "habitat_baselines.common.obs_transformers.apply_obs_transforms_batch", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "tqdm.tqdm", "ppo_trainer.PPOTrainer.actor_critic.eval", "len", "next().keys", "aggregated_stats.items", "writer.add_scalar", "metrics.items", "ppo_trainer.PPOTrainer.envs.close", "RuntimeError", "ppo_trainer.PPOTrainer.load_checkpoint", "ppo_trainer.PPOTrainer._setup_eval_config", "ppo_trainer.PPOTrainer.config.clone", "ppo_trainer.PPOTrainer.defrost", "ppo_trainer.PPOTrainer.TASK_CONFIG.TASK.MEASUREMENTS.append", "ppo_trainer.PPOTrainer.TASK_CONFIG.TASK.MEASUREMENTS.append", "ppo_trainer.PPOTrainer.freeze", "habitat.logger.info", "habitat_baselines.utils.common.is_continuous_action_space", "ppo_trainer.PPOTrainer.agent.load_state_dict", "len", "os.makedirs", "sum", "sum", "ppo_trainer.PPOTrainer.envs.current_episodes", "ppo_trainer.PPOTrainer.envs.step", "habitat_baselines.utils.common.batch_obs", "habitat_baselines.common.obs_transformers.apply_obs_transforms_batch", "torch.tensor", "torch.tensor().unsqueeze", "ppo_trainer.PPOTrainer.envs.current_episodes", "range", "not_done_masks.to.to.to", "ppo_trainer.PPOTrainer._pause_envs", "habitat.logger.info", "writer.add_scalar", "len", "range", "habitat.logger.warn", "habitat.logger.warn", "len", "torch.no_grad", "ppo_trainer.PPOTrainer.actor_critic.act", "torch.zeros.copy_", "list", "next", "sum", "aggregated_stats.items", "habitat_baselines.utils.common.get_num_actions", "habitat_baselines.utils.common.action_array_to_dict", "a.item", "zip", "torch.tensor", "envs_to_pause.append", "not_done_masks[].item", "tqdm.tqdm.update", "episode_stats.update", "iter", "actions.to", "actions.to", "current_episode_reward[].item", "ppo_trainer.PPOTrainer._extract_scalars_from_info", "len", "habitat_baselines.utils.common.generate_video", "len", "habitat.utils.visualizations.utils.observations_to_image", "rgb_frames[].append", "stats_episodes.values", "habitat.utils.render_wrapper.overlay_frame", "stats_episodes.values", "ppo_trainer.PPOTrainer._extract_scalars_from_info", "habitat_baselines.common.obs_transformers.apply_obs_transforms_batch.items"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.ppo_trainer.PPOTrainer._init_envs", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.ppo_trainer.PPOTrainer._setup_actor_critic_agent", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.agents.ppo_agents.PPOAgent.reset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.batch_obs", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.apply_obs_transforms_batch", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_trainer.BaseTrainer.eval", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensorboard_utils.WeightsAndBiasesWriter.add_scalar", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.close", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.load_checkpoint", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_trainer.BaseTrainer._setup_eval_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.is_continuous_action_space", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env.VectorEnv.current_episodes", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.batch_obs", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.apply_obs_transforms_batch", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env.VectorEnv.current_episodes", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_trainer.BaseRLTrainer._pause_envs", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensorboard_utils.WeightsAndBiasesWriter.add_scalar", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.policy.NetPolicy.act", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.get_num_actions", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.action_array_to_dict", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.il.metrics.Metric.update", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.il.metrics.Metric.update", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.ppo_trainer.PPOTrainer._extract_scalars_from_info", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.generate_video", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.utils.observations_to_image", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.render_wrapper.overlay_frame", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.ppo_trainer.PPOTrainer._extract_scalars_from_info"], ["", "", "def", "_eval_checkpoint", "(", "\n", "self", ",", "\n", "checkpoint_path", ":", "str", ",", "\n", "writer", ":", "TensorboardWriter", ",", "\n", "checkpoint_index", ":", "int", "=", "0", ",", "\n", ")", "->", "None", ":", "\n", "        ", "r\"\"\"Evaluates a single checkpoint.\n\n        Args:\n            checkpoint_path: path of checkpoint\n            writer: tensorboard writer object for logging to tensorboard\n            checkpoint_index: index of cur checkpoint for logging\n\n        Returns:\n            None\n        \"\"\"", "\n", "if", "self", ".", "_is_distributed", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Evaluation does not support distributed mode\"", ")", "\n", "\n", "# Map location CPU is almost always better than mapping to a CUDA device.", "\n", "", "if", "self", ".", "config", ".", "EVAL", ".", "SHOULD_LOAD_CKPT", ":", "\n", "            ", "ckpt_dict", "=", "self", ".", "load_checkpoint", "(", "\n", "checkpoint_path", ",", "map_location", "=", "\"cpu\"", "\n", ")", "\n", "", "else", ":", "\n", "            ", "ckpt_dict", "=", "{", "}", "\n", "\n", "", "if", "self", ".", "config", ".", "EVAL", ".", "USE_CKPT_CONFIG", ":", "\n", "            ", "config", "=", "self", ".", "_setup_eval_config", "(", "ckpt_dict", "[", "\"config\"", "]", ")", "\n", "", "else", ":", "\n", "            ", "config", "=", "self", ".", "config", ".", "clone", "(", ")", "\n", "\n", "", "ppo_cfg", "=", "config", ".", "RL", ".", "PPO", "\n", "\n", "config", ".", "defrost", "(", ")", "\n", "config", ".", "TASK_CONFIG", ".", "DATASET", ".", "SPLIT", "=", "config", ".", "EVAL", ".", "SPLIT", "\n", "config", ".", "freeze", "(", ")", "\n", "\n", "if", "(", "\n", "len", "(", "self", ".", "config", ".", "VIDEO_OPTION", ")", ">", "0", "\n", "and", "self", ".", "config", ".", "VIDEO_RENDER_TOP_DOWN", "\n", ")", ":", "\n", "            ", "config", ".", "defrost", "(", ")", "\n", "config", ".", "TASK_CONFIG", ".", "TASK", ".", "MEASUREMENTS", ".", "append", "(", "\"TOP_DOWN_MAP\"", ")", "\n", "config", ".", "TASK_CONFIG", ".", "TASK", ".", "MEASUREMENTS", ".", "append", "(", "\"COLLISIONS\"", ")", "\n", "config", ".", "freeze", "(", ")", "\n", "\n", "", "if", "config", ".", "VERBOSE", ":", "\n", "            ", "logger", ".", "info", "(", "f\"env config: {config}\"", ")", "\n", "\n", "", "self", ".", "_init_envs", "(", "config", ")", "\n", "\n", "action_space", "=", "self", ".", "envs", ".", "action_spaces", "[", "0", "]", "\n", "if", "self", ".", "using_velocity_ctrl", ":", "\n", "# For navigation using a continuous action space for a task that", "\n", "# may be asking for discrete actions", "\n", "            ", "self", ".", "policy_action_space", "=", "action_space", "[", "\"VELOCITY_CONTROL\"", "]", "\n", "action_shape", "=", "(", "2", ",", ")", "\n", "discrete_actions", "=", "False", "\n", "", "else", ":", "\n", "            ", "self", ".", "policy_action_space", "=", "action_space", "\n", "if", "is_continuous_action_space", "(", "action_space", ")", ":", "\n", "# Assume NONE of the actions are discrete", "\n", "                ", "action_shape", "=", "(", "get_num_actions", "(", "action_space", ")", ",", ")", "\n", "discrete_actions", "=", "False", "\n", "", "else", ":", "\n", "# For discrete pointnav", "\n", "                ", "action_shape", "=", "(", "1", ",", ")", "\n", "discrete_actions", "=", "True", "\n", "\n", "", "", "self", ".", "_setup_actor_critic_agent", "(", "ppo_cfg", ")", "\n", "\n", "if", "self", ".", "agent", ".", "actor_critic", ".", "should_load_agent_state", ":", "\n", "            ", "self", ".", "agent", ".", "load_state_dict", "(", "ckpt_dict", "[", "\"state_dict\"", "]", ")", "\n", "", "self", ".", "actor_critic", "=", "self", ".", "agent", ".", "actor_critic", "\n", "\n", "observations", "=", "self", ".", "envs", ".", "reset", "(", ")", "\n", "batch", "=", "batch_obs", "(", "\n", "observations", ",", "device", "=", "self", ".", "device", ",", "cache", "=", "self", ".", "_obs_batching_cache", "\n", ")", "\n", "batch", "=", "apply_obs_transforms_batch", "(", "batch", ",", "self", ".", "obs_transforms", ")", "# type: ignore", "\n", "\n", "current_episode_reward", "=", "torch", ".", "zeros", "(", "\n", "self", ".", "envs", ".", "num_envs", ",", "1", ",", "device", "=", "\"cpu\"", "\n", ")", "\n", "\n", "test_recurrent_hidden_states", "=", "torch", ".", "zeros", "(", "\n", "self", ".", "config", ".", "NUM_ENVIRONMENTS", ",", "\n", "self", ".", "actor_critic", ".", "num_recurrent_layers", ",", "\n", "ppo_cfg", ".", "hidden_size", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", ")", "\n", "prev_actions", "=", "torch", ".", "zeros", "(", "\n", "self", ".", "config", ".", "NUM_ENVIRONMENTS", ",", "\n", "*", "action_shape", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", "dtype", "=", "torch", ".", "long", "if", "discrete_actions", "else", "torch", ".", "float", ",", "\n", ")", "\n", "not_done_masks", "=", "torch", ".", "zeros", "(", "\n", "self", ".", "config", ".", "NUM_ENVIRONMENTS", ",", "\n", "1", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", "dtype", "=", "torch", ".", "bool", ",", "\n", ")", "\n", "stats_episodes", ":", "Dict", "[", "\n", "Any", ",", "Any", "\n", "]", "=", "{", "}", "# dict of dicts that stores stats per episode", "\n", "\n", "rgb_frames", "=", "[", "\n", "[", "]", "for", "_", "in", "range", "(", "self", ".", "config", ".", "NUM_ENVIRONMENTS", ")", "\n", "]", "# type: List[List[np.ndarray]]", "\n", "if", "len", "(", "self", ".", "config", ".", "VIDEO_OPTION", ")", ">", "0", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "config", ".", "VIDEO_DIR", ",", "exist_ok", "=", "True", ")", "\n", "\n", "", "number_of_eval_episodes", "=", "self", ".", "config", ".", "TEST_EPISODE_COUNT", "\n", "if", "number_of_eval_episodes", "==", "-", "1", ":", "\n", "            ", "number_of_eval_episodes", "=", "sum", "(", "self", ".", "envs", ".", "number_of_episodes", ")", "\n", "", "else", ":", "\n", "            ", "total_num_eps", "=", "sum", "(", "self", ".", "envs", ".", "number_of_episodes", ")", "\n", "if", "total_num_eps", "<", "number_of_eval_episodes", ":", "\n", "                ", "logger", ".", "warn", "(", "\n", "f\"Config specified {number_of_eval_episodes} eval episodes\"", "\n", "\", dataset only has {total_num_eps}.\"", "\n", ")", "\n", "logger", ".", "warn", "(", "f\"Evaluating with {total_num_eps} instead.\"", ")", "\n", "number_of_eval_episodes", "=", "total_num_eps", "\n", "\n", "", "", "pbar", "=", "tqdm", ".", "tqdm", "(", "total", "=", "number_of_eval_episodes", ")", "\n", "self", ".", "actor_critic", ".", "eval", "(", ")", "\n", "while", "(", "\n", "len", "(", "stats_episodes", ")", "<", "number_of_eval_episodes", "\n", "and", "self", ".", "envs", ".", "num_envs", ">", "0", "\n", ")", ":", "\n", "            ", "current_episodes", "=", "self", ".", "envs", ".", "current_episodes", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "(", "\n", "_", ",", "\n", "actions", ",", "\n", "_", ",", "\n", "test_recurrent_hidden_states", ",", "\n", ")", "=", "self", ".", "actor_critic", ".", "act", "(", "\n", "batch", ",", "\n", "test_recurrent_hidden_states", ",", "\n", "prev_actions", ",", "\n", "not_done_masks", ",", "\n", "deterministic", "=", "False", ",", "\n", ")", "\n", "\n", "prev_actions", ".", "copy_", "(", "actions", ")", "# type: ignore", "\n", "# NB: Move actions to CPU.  If CUDA tensors are", "\n", "# sent in to env.step(), that will create CUDA contexts", "\n", "# in the subprocesses.", "\n", "# For backwards compatibility, we also call .item() to convert to", "\n", "# an int", "\n", "", "if", "actions", "[", "0", "]", ".", "shape", "[", "0", "]", ">", "1", ":", "\n", "                ", "step_data", "=", "[", "\n", "action_array_to_dict", "(", "self", ".", "policy_action_space", ",", "a", ")", "\n", "for", "a", "in", "actions", ".", "to", "(", "device", "=", "\"cpu\"", ")", "\n", "]", "\n", "", "else", ":", "\n", "                ", "step_data", "=", "[", "a", ".", "item", "(", ")", "for", "a", "in", "actions", ".", "to", "(", "device", "=", "\"cpu\"", ")", "]", "\n", "\n", "", "outputs", "=", "self", ".", "envs", ".", "step", "(", "step_data", ")", "\n", "\n", "observations", ",", "rewards_l", ",", "dones", ",", "infos", "=", "[", "\n", "list", "(", "x", ")", "for", "x", "in", "zip", "(", "*", "outputs", ")", "\n", "]", "\n", "batch", "=", "batch_obs", "(", "# type: ignore", "\n", "observations", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", "cache", "=", "self", ".", "_obs_batching_cache", ",", "\n", ")", "\n", "batch", "=", "apply_obs_transforms_batch", "(", "batch", ",", "self", ".", "obs_transforms", ")", "# type: ignore", "\n", "\n", "not_done_masks", "=", "torch", ".", "tensor", "(", "\n", "[", "[", "not", "done", "]", "for", "done", "in", "dones", "]", ",", "\n", "dtype", "=", "torch", ".", "bool", ",", "\n", "device", "=", "\"cpu\"", ",", "\n", ")", "\n", "\n", "rewards", "=", "torch", ".", "tensor", "(", "\n", "rewards_l", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "\"cpu\"", "\n", ")", ".", "unsqueeze", "(", "1", ")", "\n", "current_episode_reward", "+=", "rewards", "\n", "next_episodes", "=", "self", ".", "envs", ".", "current_episodes", "(", ")", "\n", "envs_to_pause", "=", "[", "]", "\n", "n_envs", "=", "self", ".", "envs", ".", "num_envs", "\n", "for", "i", "in", "range", "(", "n_envs", ")", ":", "\n", "                ", "if", "(", "\n", "next_episodes", "[", "i", "]", ".", "scene_id", ",", "\n", "next_episodes", "[", "i", "]", ".", "episode_id", ",", "\n", ")", "in", "stats_episodes", ":", "\n", "                    ", "envs_to_pause", ".", "append", "(", "i", ")", "\n", "\n", "# episode ended", "\n", "", "if", "not", "not_done_masks", "[", "i", "]", ".", "item", "(", ")", ":", "\n", "                    ", "pbar", ".", "update", "(", ")", "\n", "episode_stats", "=", "{", "\n", "\"reward\"", ":", "current_episode_reward", "[", "i", "]", ".", "item", "(", ")", "\n", "}", "\n", "episode_stats", ".", "update", "(", "\n", "self", ".", "_extract_scalars_from_info", "(", "infos", "[", "i", "]", ")", "\n", ")", "\n", "current_episode_reward", "[", "i", "]", "=", "0", "\n", "# use scene_id + episode_id as unique id for storing stats", "\n", "stats_episodes", "[", "\n", "(", "\n", "current_episodes", "[", "i", "]", ".", "scene_id", ",", "\n", "current_episodes", "[", "i", "]", ".", "episode_id", ",", "\n", ")", "\n", "]", "=", "episode_stats", "\n", "\n", "if", "len", "(", "self", ".", "config", ".", "VIDEO_OPTION", ")", ">", "0", ":", "\n", "                        ", "generate_video", "(", "\n", "video_option", "=", "self", ".", "config", ".", "VIDEO_OPTION", ",", "\n", "video_dir", "=", "self", ".", "config", ".", "VIDEO_DIR", ",", "\n", "images", "=", "rgb_frames", "[", "i", "]", ",", "\n", "episode_id", "=", "current_episodes", "[", "i", "]", ".", "episode_id", ",", "\n", "checkpoint_idx", "=", "checkpoint_index", ",", "\n", "metrics", "=", "self", ".", "_extract_scalars_from_info", "(", "infos", "[", "i", "]", ")", ",", "\n", "fps", "=", "self", ".", "config", ".", "VIDEO_FPS", ",", "\n", "tb_writer", "=", "writer", ",", "\n", "keys_to_include_in_name", "=", "self", ".", "config", ".", "EVAL_KEYS_TO_INCLUDE_IN_NAME", ",", "\n", ")", "\n", "\n", "rgb_frames", "[", "i", "]", "=", "[", "]", "\n", "\n", "# episode continues", "\n", "", "", "elif", "len", "(", "self", ".", "config", ".", "VIDEO_OPTION", ")", ">", "0", ":", "\n", "# TODO move normalization / channel changing out of the policy and undo it here", "\n", "                    ", "frame", "=", "observations_to_image", "(", "\n", "{", "k", ":", "v", "[", "i", "]", "for", "k", ",", "v", "in", "batch", ".", "items", "(", ")", "}", ",", "infos", "[", "i", "]", "\n", ")", "\n", "if", "self", ".", "config", ".", "VIDEO_RENDER_ALL_INFO", ":", "\n", "                        ", "frame", "=", "overlay_frame", "(", "frame", ",", "infos", "[", "i", "]", ")", "\n", "\n", "", "rgb_frames", "[", "i", "]", ".", "append", "(", "frame", ")", "\n", "\n", "", "", "not_done_masks", "=", "not_done_masks", ".", "to", "(", "device", "=", "self", ".", "device", ")", "\n", "(", "\n", "self", ".", "envs", ",", "\n", "test_recurrent_hidden_states", ",", "\n", "not_done_masks", ",", "\n", "current_episode_reward", ",", "\n", "prev_actions", ",", "\n", "batch", ",", "\n", "rgb_frames", ",", "\n", ")", "=", "self", ".", "_pause_envs", "(", "\n", "envs_to_pause", ",", "\n", "self", ".", "envs", ",", "\n", "test_recurrent_hidden_states", ",", "\n", "not_done_masks", ",", "\n", "current_episode_reward", ",", "\n", "prev_actions", ",", "\n", "batch", ",", "\n", "rgb_frames", ",", "\n", ")", "\n", "\n", "", "num_episodes", "=", "len", "(", "stats_episodes", ")", "\n", "aggregated_stats", "=", "{", "}", "\n", "for", "stat_key", "in", "next", "(", "iter", "(", "stats_episodes", ".", "values", "(", ")", ")", ")", ".", "keys", "(", ")", ":", "\n", "            ", "aggregated_stats", "[", "stat_key", "]", "=", "(", "\n", "sum", "(", "v", "[", "stat_key", "]", "for", "v", "in", "stats_episodes", ".", "values", "(", ")", ")", "\n", "/", "num_episodes", "\n", ")", "\n", "\n", "", "for", "k", ",", "v", "in", "aggregated_stats", ".", "items", "(", ")", ":", "\n", "            ", "logger", ".", "info", "(", "f\"Average episode {k}: {v:.4f}\"", ")", "\n", "\n", "", "step_id", "=", "checkpoint_index", "\n", "if", "\"extra_state\"", "in", "ckpt_dict", "and", "\"step\"", "in", "ckpt_dict", "[", "\"extra_state\"", "]", ":", "\n", "            ", "step_id", "=", "ckpt_dict", "[", "\"extra_state\"", "]", "[", "\"step\"", "]", "\n", "\n", "", "writer", ".", "add_scalar", "(", "\n", "\"eval_reward/average_reward\"", ",", "aggregated_stats", "[", "\"reward\"", "]", ",", "step_id", "\n", ")", "\n", "\n", "metrics", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "aggregated_stats", ".", "items", "(", ")", "if", "k", "!=", "\"reward\"", "}", "\n", "for", "k", ",", "v", "in", "metrics", ".", "items", "(", ")", ":", "\n", "            ", "writer", ".", "add_scalar", "(", "f\"eval_metrics/{k}\"", ",", "v", ",", "step_id", ")", "\n", "\n", "", "self", ".", "envs", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.ppo.PPO.__init__": [[22, 58], ["torch.nn.Module.__init__", "torch.optim.Adam", "list", "next", "filter", "actor_critic.parameters", "actor_critic.parameters"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.nn_skill.NnSkillPolicy.parameters", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.nn_skill.NnSkillPolicy.parameters"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "actor_critic", ":", "NetPolicy", ",", "\n", "clip_param", ":", "float", ",", "\n", "ppo_epoch", ":", "int", ",", "\n", "num_mini_batch", ":", "int", ",", "\n", "value_loss_coef", ":", "float", ",", "\n", "entropy_coef", ":", "float", ",", "\n", "lr", ":", "Optional", "[", "float", "]", "=", "None", ",", "\n", "eps", ":", "Optional", "[", "float", "]", "=", "None", ",", "\n", "max_grad_norm", ":", "Optional", "[", "float", "]", "=", "None", ",", "\n", "use_clipped_value_loss", ":", "bool", "=", "True", ",", "\n", "use_normalized_advantage", ":", "bool", "=", "True", ",", "\n", ")", "->", "None", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "actor_critic", "=", "actor_critic", "\n", "\n", "self", ".", "clip_param", "=", "clip_param", "\n", "self", ".", "ppo_epoch", "=", "ppo_epoch", "\n", "self", ".", "num_mini_batch", "=", "num_mini_batch", "\n", "\n", "self", ".", "value_loss_coef", "=", "value_loss_coef", "\n", "self", ".", "entropy_coef", "=", "entropy_coef", "\n", "\n", "self", ".", "max_grad_norm", "=", "max_grad_norm", "\n", "self", ".", "use_clipped_value_loss", "=", "use_clipped_value_loss", "\n", "\n", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "\n", "list", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "actor_critic", ".", "parameters", "(", ")", ")", ")", ",", "\n", "lr", "=", "lr", ",", "\n", "eps", "=", "eps", ",", "\n", ")", "\n", "self", ".", "device", "=", "next", "(", "actor_critic", ".", "parameters", "(", ")", ")", ".", "device", "\n", "self", ".", "use_normalized_advantage", "=", "use_normalized_advantage", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.ppo.PPO.forward": [[59, 61], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "x", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.ppo.PPO.get_advantages": [[62, 71], ["advantages.mean", "advantages.std"], "methods", ["None"], ["", "def", "get_advantages", "(", "self", ",", "rollouts", ":", "RolloutStorage", ")", "->", "Tensor", ":", "\n", "        ", "advantages", "=", "(", "\n", "rollouts", ".", "buffers", "[", "\"returns\"", "]", "[", ":", "-", "1", "]", "# type: ignore", "\n", "-", "rollouts", ".", "buffers", "[", "\"value_preds\"", "]", "[", ":", "-", "1", "]", "\n", ")", "\n", "if", "not", "self", ".", "use_normalized_advantage", ":", "\n", "            ", "return", "advantages", "\n", "\n", "", "return", "(", "advantages", "-", "advantages", ".", "mean", "(", ")", ")", "/", "(", "advantages", ".", "std", "(", ")", "+", "EPS_PPO", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.ppo.PPO.update": [[72, 154], ["ppo.PPO.get_advantages", "range", "habitat.utils.profiling_wrapper.range_push", "rollouts.recurrent_generator", "habitat.utils.profiling_wrapper.range_pop", "ppo.PPO._evaluate_actions", "torch.exp", "value_loss.mean.mean.mean", "dist_entropy.mean.mean.mean", "ppo.PPO.optimizer.zero_grad", "ppo.PPO.before_backward", "total_loss.backward", "ppo.PPO.after_backward", "ppo.PPO.before_step", "ppo.PPO.optimizer.step", "ppo.PPO.after_step", "value_loss.mean.mean.item", "action_loss.item", "dist_entropy.mean.mean.item", "torch.clamp", "torch.min().mean", "torch.max", "torch.min"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.ppo.PPO.get_advantages", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.profiling_wrapper.range_push", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.recurrent_generator", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.profiling_wrapper.range_pop", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.algo.ddppo.DecentralizedDistributedMixin._evaluate_actions", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.ppo.PPO.before_backward", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.ppo.PPO.after_backward", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.ppo.PPO.before_step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.ppo.PPO.after_step"], ["", "def", "update", "(", "self", ",", "rollouts", ":", "RolloutStorage", ")", "->", "Tuple", "[", "float", ",", "float", ",", "float", "]", ":", "\n", "        ", "advantages", "=", "self", ".", "get_advantages", "(", "rollouts", ")", "\n", "\n", "value_loss_epoch", "=", "0.0", "\n", "action_loss_epoch", "=", "0.0", "\n", "dist_entropy_epoch", "=", "0.0", "\n", "\n", "for", "_e", "in", "range", "(", "self", ".", "ppo_epoch", ")", ":", "\n", "            ", "profiling_wrapper", ".", "range_push", "(", "\"PPO.update epoch\"", ")", "\n", "data_generator", "=", "rollouts", ".", "recurrent_generator", "(", "\n", "advantages", ",", "self", ".", "num_mini_batch", "\n", ")", "\n", "\n", "for", "batch", "in", "data_generator", ":", "\n", "                ", "(", "\n", "values", ",", "\n", "action_log_probs", ",", "\n", "dist_entropy", ",", "\n", "_", ",", "\n", ")", "=", "self", ".", "_evaluate_actions", "(", "\n", "batch", "[", "\"observations\"", "]", ",", "\n", "batch", "[", "\"recurrent_hidden_states\"", "]", ",", "\n", "batch", "[", "\"prev_actions\"", "]", ",", "\n", "batch", "[", "\"masks\"", "]", ",", "\n", "batch", "[", "\"actions\"", "]", ",", "\n", ")", "\n", "\n", "ratio", "=", "torch", ".", "exp", "(", "action_log_probs", "-", "batch", "[", "\"action_log_probs\"", "]", ")", "\n", "surr1", "=", "ratio", "*", "batch", "[", "\"advantages\"", "]", "\n", "surr2", "=", "(", "\n", "torch", ".", "clamp", "(", "\n", "ratio", ",", "1.0", "-", "self", ".", "clip_param", ",", "1.0", "+", "self", ".", "clip_param", "\n", ")", "\n", "*", "batch", "[", "\"advantages\"", "]", "\n", ")", "\n", "action_loss", "=", "-", "(", "torch", ".", "min", "(", "surr1", ",", "surr2", ")", ".", "mean", "(", ")", ")", "\n", "\n", "if", "self", ".", "use_clipped_value_loss", ":", "\n", "                    ", "value_pred_clipped", "=", "batch", "[", "\"value_preds\"", "]", "+", "(", "\n", "values", "-", "batch", "[", "\"value_preds\"", "]", "\n", ")", ".", "clamp", "(", "-", "self", ".", "clip_param", ",", "self", ".", "clip_param", ")", "\n", "value_losses", "=", "(", "values", "-", "batch", "[", "\"returns\"", "]", ")", ".", "pow", "(", "2", ")", "\n", "value_losses_clipped", "=", "(", "\n", "value_pred_clipped", "-", "batch", "[", "\"returns\"", "]", "\n", ")", ".", "pow", "(", "2", ")", "\n", "value_loss", "=", "0.5", "*", "torch", ".", "max", "(", "\n", "value_losses", ",", "value_losses_clipped", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "value_loss", "=", "0.5", "*", "(", "batch", "[", "\"returns\"", "]", "-", "values", ")", ".", "pow", "(", "2", ")", "\n", "\n", "", "value_loss", "=", "value_loss", ".", "mean", "(", ")", "\n", "dist_entropy", "=", "dist_entropy", ".", "mean", "(", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "total_loss", "=", "(", "\n", "value_loss", "*", "self", ".", "value_loss_coef", "\n", "+", "action_loss", "\n", "-", "dist_entropy", "*", "self", ".", "entropy_coef", "\n", ")", "\n", "\n", "self", ".", "before_backward", "(", "total_loss", ")", "\n", "total_loss", ".", "backward", "(", ")", "\n", "self", ".", "after_backward", "(", "total_loss", ")", "\n", "\n", "self", ".", "before_step", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "after_step", "(", ")", "\n", "\n", "value_loss_epoch", "+=", "value_loss", ".", "item", "(", ")", "\n", "action_loss_epoch", "+=", "action_loss", ".", "item", "(", ")", "\n", "dist_entropy_epoch", "+=", "dist_entropy", ".", "item", "(", ")", "\n", "\n", "", "profiling_wrapper", ".", "range_pop", "(", ")", "# PPO.update epoch", "\n", "\n", "", "num_updates", "=", "self", ".", "ppo_epoch", "*", "self", ".", "num_mini_batch", "\n", "\n", "value_loss_epoch", "/=", "num_updates", "\n", "action_loss_epoch", "/=", "num_updates", "\n", "dist_entropy_epoch", "/=", "num_updates", "\n", "\n", "return", "value_loss_epoch", ",", "action_loss_epoch", ",", "dist_entropy_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.ppo.PPO._evaluate_actions": [[155, 163], ["ppo.PPO.actor_critic.evaluate_actions"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.policy.NetPolicy.evaluate_actions"], ["", "def", "_evaluate_actions", "(", "\n", "self", ",", "observations", ",", "rnn_hidden_states", ",", "prev_actions", ",", "masks", ",", "action", "\n", ")", ":", "\n", "        ", "r\"\"\"Internal method that calls Policy.evaluate_actions.  This is used instead of calling\n        that directly so that that call can be overrided with inheritance\n        \"\"\"", "\n", "return", "self", ".", "actor_critic", ".", "evaluate_actions", "(", "\n", "observations", ",", "rnn_hidden_states", ",", "prev_actions", ",", "masks", ",", "action", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.ppo.PPO.before_backward": [[165, 167], ["None"], "methods", ["None"], ["", "def", "before_backward", "(", "self", ",", "loss", ":", "Tensor", ")", "->", "None", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.ppo.PPO.after_backward": [[168, 170], ["None"], "methods", ["None"], ["", "def", "after_backward", "(", "self", ",", "loss", ":", "Tensor", ")", "->", "None", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.ppo.PPO.before_step": [[171, 174], ["torch.nn.utils.clip_grad_norm_", "ppo.PPO.actor_critic.parameters"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.nn_skill.NnSkillPolicy.parameters"], ["", "def", "before_step", "(", "self", ")", "->", "None", ":", "\n", "        ", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "\n", "self", ".", "actor_critic", ".", "parameters", "(", ")", ",", "self", ".", "max_grad_norm", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.ppo.PPO.after_step": [[176, 178], ["None"], "methods", ["None"], ["", "def", "after_step", "(", "self", ")", "->", "None", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ddppo.ddp_utils.is_slurm_job": [[35, 37], ["None"], "function", ["None"], ["def", "is_slurm_job", "(", ")", "->", "bool", ":", "\n", "    ", "return", "SLURM_JOBID", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ddppo.ddp_utils.is_slurm_batch_job": [[39, 52], ["ddp_utils.is_slurm_job", "os.environ.get"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.ddppo.ddp_utils.is_slurm_job", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get"], ["", "def", "is_slurm_batch_job", "(", ")", "->", "bool", ":", "\n", "    ", "r\"\"\"Heuristic to determine if a slurm job is a batch job or not. Batch jobs\n    will have a job name that is not a shell unless the user specifically set the job\n    name to that of a shell. Interactive jobs have a shell name as their job name.\n    \"\"\"", "\n", "return", "is_slurm_job", "(", ")", "and", "os", ".", "environ", ".", "get", "(", "\"SLURM_JOB_NAME\"", ",", "None", ")", "not", "in", "(", "\n", "None", ",", "\n", "\"bash\"", ",", "\n", "\"zsh\"", ",", "\n", "\"fish\"", ",", "\n", "\"tcsh\"", ",", "\n", "\"sh\"", ",", "\n", "\"interactive\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ddppo.ddp_utils.resume_state_filename": [[55, 62], ["os.path.join", "ddp_utils.is_slurm_job"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.ddppo.ddp_utils.is_slurm_job"], ["", "def", "resume_state_filename", "(", "config", ":", "Config", ")", "->", "str", ":", "\n", "    ", "fname", "=", "RESUME_STATE_BASE_NAME", "\n", "\n", "if", "is_slurm_job", "(", ")", "and", "config", ".", "RL", ".", "preemption", ".", "append_slurm_job_id", ":", "\n", "        ", "fname", "+=", "\"-{}\"", ".", "format", "(", "SLURM_JOBID", ")", "\n", "\n", "", "return", "osp", ".", "join", "(", "config", ".", "CHECKPOINT_FOLDER", ",", "fname", "+", "\".pth\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ddppo.ddp_utils.rank0_only": [[74, 113], ["functools.wraps", "ddp_utils.rank0_only", "fn", "torch.distributed.is_initialized", "torch.distributed.get_rank"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.ddppo.ddp_utils.rank0_only"], ["", "def", "rank0_only", "(", "fn", ":", "Optional", "[", "Callable", "]", "=", "None", ")", "->", "Union", "[", "Callable", ",", "bool", "]", ":", "\n", "    ", "r\"\"\"Helper function to only execute code if a process is world rank 0\n\n    Can be used both as a function in an if statement,\n\n    .. code:: py\n\n        if rank0_only():\n            ...\n\n    or as a decorator,\n\n    .. code:: py\n\n        @rank0_only\n        def fn_for_r0_only(...):\n            ...\n\n    :param fn: Function to wrap and only execute if the process is rank 0.\n        If a process is rank 0, the function will be run and it's return value\n        will be returned.  If a process is not rank 0, then the function will not\n        be ran and :py:`None` will be returned.\n\n    :return: The wrapped function if :p:`fn` is not :py:`None`, otherwise\n        whether or not this process is rank 0\n    \"\"\"", "\n", "if", "fn", "is", "None", ":", "\n", "        ", "return", "(", "\n", "not", "torch", ".", "distributed", ".", "is_initialized", "(", ")", "\n", "or", "torch", ".", "distributed", ".", "get_rank", "(", ")", "==", "0", "\n", ")", "\n", "\n", "", "@", "functools", ".", "wraps", "(", "fn", ")", "\n", "def", "_wrapper", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "rank0_only", "(", ")", ":", "\n", "            ", "return", "fn", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "return", "None", "\n", "\n", "", "return", "_wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ddppo.ddp_utils._ignore_handler": [[115, 117], ["None"], "function", ["None"], ["", "def", "_ignore_handler", "(", "signum", ",", "frame", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ddppo.ddp_utils._clean_exit_handler": [[119, 122], ["EXIT.set", "print"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.set"], ["", "def", "_clean_exit_handler", "(", "signum", ",", "frame", ")", ":", "\n", "    ", "EXIT", ".", "set", "(", ")", "\n", "print", "(", "\"Exiting cleanly\"", ",", "flush", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ddppo.ddp_utils._clean_exit_and_save_handler": [[124, 128], ["EXIT.set", "SAVE_STATE.set", "print"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.set", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.set"], ["", "def", "_clean_exit_and_save_handler", "(", "signum", ",", "frame", ")", ":", "\n", "    ", "EXIT", ".", "set", "(", ")", "\n", "SAVE_STATE", ".", "set", "(", ")", "\n", "print", "(", "\"Exiting cleanly and saving state\"", ",", "flush", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ddppo.ddp_utils._requeue_handler": [[130, 135], ["REQUEUE.set", "SAVE_STATE.set", "EXIT.set", "print"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.set", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.set", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.set"], ["", "def", "_requeue_handler", "(", "signal", ",", "frame", ")", ":", "\n", "    ", "REQUEUE", ".", "set", "(", ")", "\n", "SAVE_STATE", ".", "set", "(", ")", "\n", "EXIT", ".", "set", "(", ")", "\n", "print", "(", "\"Got signal to requeue\"", ",", "flush", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ddppo.ddp_utils.add_signal_handlers": [[137, 154], ["signal.signal", "signal.signal", "signal.signal", "signal.signal", "signal.signal"], "function", ["None"], ["", "def", "add_signal_handlers", "(", ")", "->", "None", ":", "\n", "    ", "signal", ".", "signal", "(", "signal", ".", "SIGCONT", ",", "_ignore_handler", ")", "\n", "signal", ".", "signal", "(", "signal", ".", "SIGINT", ",", "_clean_exit_handler", ")", "\n", "\n", "# SIGUSR2 can be sent to all processes to have them cleanup", "\n", "# and exit nicely.  This is nice to use with SLURM as scancel <job_id>", "\n", "# sets a 30 second timer for the job to exit, and it can take more than", "\n", "# 30 seconds for the job to cleanup and exit nicely.  When using NCCL,", "\n", "# forcing the job to exit without cleaning up can be bad.", "\n", "# scancel --signal SIGUSR2 <job_id> will set no such timer and will give", "\n", "# the job ample time to cleanup and exit.", "\n", "signal", ".", "signal", "(", "signal", ".", "SIGUSR2", ",", "_clean_exit_handler", ")", "\n", "\n", "# SLURM always sends SIGTERM so we can use this to save and exit", "\n", "signal", ".", "signal", "(", "signal", ".", "SIGTERM", ",", "_clean_exit_and_save_handler", ")", "\n", "\n", "signal", ".", "signal", "(", "signal", ".", "SIGUSR1", ",", "_requeue_handler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ddppo.ddp_utils.save_resume_state": [[156, 170], ["isinstance", "torch.save", "ddp_utils.resume_state_filename"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.save", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ddppo.ddp_utils.resume_state_filename"], ["", "@", "rank0_only", "\n", "def", "save_resume_state", "(", "state", ":", "Any", ",", "filename_or_config", ":", "Union", "[", "Config", ",", "str", "]", ")", ":", "\n", "    ", "r\"\"\"Saves the resume job state to the specified filename.\n        This is useful when working with preemptable job partitions.\n\n    :param state: The state to save\n    :param filename_or_config: The filename of the saved state or the config to construct it.\n    \"\"\"", "\n", "if", "isinstance", "(", "filename_or_config", ",", "Config", ")", ":", "\n", "        ", "filename", "=", "resume_state_filename", "(", "filename_or_config", ")", "\n", "", "else", ":", "\n", "        ", "filename", "=", "filename_or_config", "\n", "\n", "", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ddppo.ddp_utils.load_resume_state": [[172, 191], ["isinstance", "ddp_utils.rank0_only", "torch.load", "ddp_utils.resume_state_filename", "os.path.exists", "habitat.logger.info"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.ddppo.ddp_utils.rank0_only", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.load", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ddppo.ddp_utils.resume_state_filename", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.exists"], ["", "def", "load_resume_state", "(", "filename_or_config", ":", "Union", "[", "Config", ",", "str", "]", ")", "->", "Optional", "[", "Any", "]", ":", "\n", "    ", "r\"\"\"Loads the saved resume state\n\n    :param filename_or_config: The filename of the saved state or the config to construct it.\n\n    :return: The saved state if the file exists, else none\n    \"\"\"", "\n", "if", "isinstance", "(", "filename_or_config", ",", "Config", ")", ":", "\n", "        ", "filename", "=", "resume_state_filename", "(", "filename_or_config", ")", "\n", "", "else", ":", "\n", "        ", "filename", "=", "filename_or_config", "\n", "\n", "", "if", "not", "osp", ".", "exists", "(", "filename", ")", ":", "\n", "        ", "return", "None", "\n", "\n", "", "if", "rank0_only", "(", ")", ":", "\n", "        ", "logger", ".", "info", "(", "f\"Loading resume state: {filename}\"", ")", "\n", "\n", "", "return", "torch", ".", "load", "(", "filename", ",", "map_location", "=", "\"cpu\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ddppo.ddp_utils.requeue_job": [[193, 207], ["torch.distributed.is_initialized", "ddp_utils.rank0_only", "ddp_utils.is_slurm_batch_job", "REQUEUE.is_set", "torch.distributed.barrier", "habitat.logger.info", "subprocess.check_call", "str"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.ddppo.ddp_utils.rank0_only", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ddppo.ddp_utils.is_slurm_batch_job"], ["", "def", "requeue_job", "(", ")", ":", "\n", "    ", "r\"\"\"Requeues the job by calling ``scontrol requeue ${SLURM_JOBID}``\"\"\"", "\n", "if", "not", "is_slurm_batch_job", "(", ")", ":", "\n", "        ", "return", "\n", "\n", "", "if", "not", "REQUEUE", ".", "is_set", "(", ")", ":", "\n", "        ", "return", "\n", "\n", "", "if", "distrib", ".", "is_initialized", "(", ")", ":", "\n", "        ", "distrib", ".", "barrier", "(", ")", "\n", "\n", "", "if", "rank0_only", "(", ")", ":", "\n", "        ", "logger", ".", "info", "(", "f\"Requeueing job {SLURM_JOBID}\"", ")", "\n", "subprocess", ".", "check_call", "(", "[", "\"scontrol\"", ",", "\"requeue\"", ",", "str", "(", "SLURM_JOBID", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ddppo.ddp_utils.get_ifname": [[209, 211], ["ifcfg.default_interface"], "function", ["None"], ["", "", "def", "get_ifname", "(", ")", "->", "str", ":", "\n", "    ", "return", "ifcfg", ".", "default_interface", "(", ")", "[", "\"device\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ddppo.ddp_utils.get_distrib_size": [[213, 231], ["os.environ.get", "int", "int", "int", "os.environ.get", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get"], ["", "def", "get_distrib_size", "(", ")", "->", "Tuple", "[", "int", ",", "int", ",", "int", "]", ":", "\n", "# Check to see if we should parse from torch.distributed.launch", "\n", "    ", "if", "os", ".", "environ", ".", "get", "(", "\"LOCAL_RANK\"", ",", "None", ")", "is", "not", "None", ":", "\n", "        ", "local_rank", "=", "int", "(", "os", ".", "environ", "[", "\"LOCAL_RANK\"", "]", ")", "\n", "world_rank", "=", "int", "(", "os", ".", "environ", "[", "\"RANK\"", "]", ")", "\n", "world_size", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "\n", "# Else parse from SLURM is using SLURM", "\n", "", "elif", "os", ".", "environ", ".", "get", "(", "\"SLURM_JOBID\"", ",", "None", ")", "is", "not", "None", ":", "\n", "        ", "local_rank", "=", "int", "(", "os", ".", "environ", "[", "\"SLURM_LOCALID\"", "]", ")", "\n", "world_rank", "=", "int", "(", "os", ".", "environ", "[", "\"SLURM_PROCID\"", "]", ")", "\n", "world_size", "=", "int", "(", "os", ".", "environ", "[", "\"SLURM_NTASKS\"", "]", ")", "\n", "# Otherwise setup for just 1 process, this is nice for testing", "\n", "", "else", ":", "\n", "        ", "local_rank", "=", "0", "\n", "world_rank", "=", "0", "\n", "world_size", "=", "1", "\n", "\n", "", "return", "local_rank", ",", "world_rank", ",", "world_size", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ddppo.ddp_utils.init_distrib_slurm": [[233, 272], ["torch.distributed.is_available", "ddp_utils.get_distrib_size", "int", "os.environ.get", "torch.distributed.TCPStore", "torch.distributed.init_process_group", "ddp_utils.get_ifname", "ddp_utils.get_ifname", "os.environ.get", "int", "int", "os.environ.get"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.ddppo.ddp_utils.get_distrib_size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ddppo.ddp_utils.get_ifname", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ddppo.ddp_utils.get_ifname", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get"], ["", "def", "init_distrib_slurm", "(", "\n", "backend", ":", "str", "=", "\"nccl\"", ",", "\n", ")", "->", "Tuple", "[", "int", ",", "torch", ".", "distributed", ".", "TCPStore", "]", ":", "# type: ignore", "\n", "    ", "r\"\"\"Initializes torch.distributed by parsing environment variables set\n        by SLURM when ``srun`` is used or by parsing environment variables set\n        by torch.distributed.launch\n\n    :param backend: Which torch.distributed backend to use\n\n    :returns: Tuple of the local_rank (aka which GPU to use for this process)\n        and the TCPStore used for the rendezvous\n    \"\"\"", "\n", "assert", "(", "\n", "torch", ".", "distributed", ".", "is_available", "(", ")", "\n", ")", ",", "\"torch.distributed must be available\"", "\n", "\n", "if", "\"GLOO_SOCKET_IFNAME\"", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "\"GLOO_SOCKET_IFNAME\"", "]", "=", "get_ifname", "(", ")", "\n", "\n", "", "if", "\"NCCL_SOCKET_IFNAME\"", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "\"NCCL_SOCKET_IFNAME\"", "]", "=", "get_ifname", "(", ")", "\n", "\n", "", "local_rank", ",", "world_rank", ",", "world_size", "=", "get_distrib_size", "(", ")", "\n", "\n", "main_port", "=", "int", "(", "os", ".", "environ", ".", "get", "(", "\"MAIN_PORT\"", ",", "DEFAULT_PORT", ")", ")", "\n", "if", "SLURM_JOBID", "is", "not", "None", ":", "\n", "        ", "main_port", "+=", "int", "(", "SLURM_JOBID", ")", "%", "int", "(", "\n", "os", ".", "environ", ".", "get", "(", "\"MAIN_PORT_RANGE\"", ",", "DEFAULT_PORT_RANGE", ")", "\n", ")", "\n", "", "main_addr", "=", "os", ".", "environ", ".", "get", "(", "\"MAIN_ADDR\"", ",", "DEFAULT_MAIN_ADDR", ")", "\n", "\n", "tcp_store", "=", "distrib", ".", "TCPStore", "(", "# type: ignore", "\n", "main_addr", ",", "main_port", ",", "world_size", ",", "world_rank", "==", "0", "\n", ")", "\n", "distrib", ".", "init_process_group", "(", "\n", "backend", ",", "store", "=", "tcp_store", ",", "rank", "=", "world_rank", ",", "world_size", "=", "world_size", "\n", ")", "\n", "\n", "return", "local_rank", ",", "tcp_store", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.ddppo.ddp_utils.find_free_port": [[274, 290], ["contextlib.closing", "sock.setsockopt", "sock.bind", "sock.getsockname", "socket.socket"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.multi_task.rearrange_pddl.PddlSetState.bind"], ["", "def", "find_free_port", "(", ")", "->", "int", ":", "\n", "    ", "\"\"\"\n    Returns a free port on the system.\n    Note that this can only be used to find a port for torch.distribted\n    if it's called by a process on the node that will have\n    world_rank == 0 and then all ranks are created. If you\n    just called `find_free_port()` on each rank independently, every\n    rank will have a different port!\n    \"\"\"", "\n", "with", "contextlib", ".", "closing", "(", "\n", "socket", ".", "socket", "(", "socket", ".", "AF_INET", ",", "socket", ".", "SOCK_STREAM", ")", "\n", ")", "as", "sock", ":", "\n", "        ", "sock", ".", "setsockopt", "(", "socket", ".", "SOL_SOCKET", ",", "socket", ".", "SO_REUSEADDR", ",", "1", ")", "\n", "sock", ".", "bind", "(", "(", "\"localhost\"", ",", "0", ")", ")", "\n", "_", ",", "port", "=", "sock", ".", "getsockname", "(", ")", "\n", "return", "port", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data_generation.create_gibson_large_dataset.safe_mkdir": [[32, 37], ["os.mkdir"], "function", ["None"], ["def", "safe_mkdir", "(", "path", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "os", ".", "mkdir", "(", "path", ")", "\n", "", "except", "OSError", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data_generation.create_gibson_large_dataset._generate_fn": [[39, 65], ["habitat.get_config", "habitat.get_config.defrost", "habitat.get_config.freeze", "habitat.sims.make_sim", "habitat.datasets.make_dataset", "list", "os.makedirs", "habitat.datasets.pointnav.pointnav_generator.generate_pointnav_episode", "[].split", "os.path.dirname", "gzip.open", "f.write", "habitat.datasets.make_dataset.to_json", "len", "scene.split"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.config.default.get_config", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.sims.registration.make_sim", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.registration.make_dataset", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.pointnav.pointnav_generator.generate_pointnav_episode", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.dataset.Dataset.to_json"], ["", "", "def", "_generate_fn", "(", "scene", ")", ":", "\n", "    ", "cfg", "=", "habitat", ".", "get_config", "(", ")", "\n", "cfg", ".", "defrost", "(", ")", "\n", "cfg", ".", "SIMULATOR", ".", "SCENE", "=", "scene", "\n", "cfg", ".", "SIMULATOR", ".", "AGENT_0", ".", "SENSORS", "=", "[", "]", "\n", "cfg", ".", "freeze", "(", ")", "\n", "\n", "sim", "=", "habitat", ".", "sims", ".", "make_sim", "(", "\"Sim-v0\"", ",", "config", "=", "cfg", ".", "SIMULATOR", ")", "\n", "\n", "dset", "=", "habitat", ".", "datasets", ".", "make_dataset", "(", "\"PointNav-v1\"", ")", "\n", "dset", ".", "episodes", "=", "list", "(", "\n", "generate_pointnav_episode", "(", "\n", "sim", ",", "NUM_EPISODES_PER_SCENE", ",", "is_gen_shortest_path", "=", "False", "\n", ")", "\n", ")", "\n", "for", "ep", "in", "dset", ".", "episodes", ":", "\n", "        ", "ep", ".", "scene_id", "=", "ep", ".", "scene_id", "[", "len", "(", "\"./data/scene_datasets/\"", ")", ":", "]", "\n", "\n", "", "scene_key", "=", "scene", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "out_file", "=", "(", "\n", "f\"./data/datasets/pointnav/gibson/v2/train_large/content/\"", "\n", "f\"{scene_key}.json.gz\"", "\n", ")", "\n", "os", ".", "makedirs", "(", "osp", ".", "dirname", "(", "out_file", ")", ",", "exist_ok", "=", "True", ")", "\n", "with", "gzip", ".", "open", "(", "out_file", ",", "\"wt\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "dset", ".", "to_json", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data_generation.create_gibson_large_dataset.generate_gibson_large_dataset": [[67, 98], ["json.load.items", "glob.glob", "list", "print", "create_gibson_large_dataset.safe_mkdir", "open", "json.load", "filter", "multiprocessing.Pool", "tqdm.tqdm", "pool.imap_unordered", "gzip.open", "json.dump", "os.path.join", "gibson_large_scene_keys.append", "pbar.update", "dict", "os.path.dirname", "[].split", "len", "len", "x.split"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.data_generation.create_gibson_large_dataset.safe_mkdir", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.load", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.il.metrics.Metric.update"], ["", "", "def", "generate_gibson_large_dataset", "(", ")", ":", "\n", "# Load train / val statistics", "\n", "    ", "with", "open", "(", "\n", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "__file__", ")", ",", "\"gibson_dset_with_qual.json\"", ")", ",", "\"r\"", "\n", ")", "as", "f", ":", "\n", "        ", "dataset_statistics", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "gibson_large_scene_keys", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "dataset_statistics", ".", "items", "(", ")", ":", "\n", "        ", "qual", "=", "v", "[", "\"qual\"", "]", "\n", "if", "(", "\n", "v", "[", "\"split_full+\"", "]", "==", "\"train\"", "\n", "and", "qual", "is", "not", "None", "\n", "and", "qual", ">=", "QUAL_THRESH", "\n", ")", ":", "\n", "            ", "gibson_large_scene_keys", ".", "append", "(", "k", ")", "\n", "\n", "", "", "scenes", "=", "glob", ".", "glob", "(", "\"./data/scene_datasets/gibson/*.glb\"", ")", "\n", "# Filter out invalid scenes", "\n", "_fltr", "=", "lambda", "x", ":", "x", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", "in", "gibson_large_scene_keys", "\n", "scenes", "=", "list", "(", "filter", "(", "_fltr", ",", "scenes", ")", ")", "\n", "print", "(", "f\"Total number of training scenes: {len(scenes)}\"", ")", "\n", "\n", "safe_mkdir", "(", "\"./data/datasets/pointnav/gibson/v2/train_large\"", ")", "\n", "with", "multiprocessing", ".", "Pool", "(", "8", ")", "as", "pool", ",", "tqdm", ".", "tqdm", "(", "total", "=", "len", "(", "scenes", ")", ")", "as", "pbar", ":", "\n", "        ", "for", "_", "in", "pool", ".", "imap_unordered", "(", "_generate_fn", ",", "scenes", ")", ":", "\n", "            ", "pbar", ".", "update", "(", ")", "\n", "\n", "", "", "path", "=", "\"./data/datasets/pointnav/gibson/v2/train_large/train_large.json.gz\"", "\n", "with", "gzip", ".", "open", "(", "path", ",", "\"wt\"", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "dict", "(", "episodes", "=", "[", "]", ")", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.policy.resnet_policy.PointNavResNetPolicy.__init__": [[41, 83], ["habitat_baselines.rl.ppo.NetPolicy.__init__", "resnet_policy.PointNavResNetNet", "habitat_baselines.utils.common.get_num_actions"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.get_num_actions"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "observation_space", ":", "spaces", ".", "Dict", ",", "\n", "action_space", ",", "\n", "hidden_size", ":", "int", "=", "512", ",", "\n", "num_recurrent_layers", ":", "int", "=", "1", ",", "\n", "rnn_type", ":", "str", "=", "\"GRU\"", ",", "\n", "resnet_baseplanes", ":", "int", "=", "32", ",", "\n", "backbone", ":", "str", "=", "\"resnet18\"", ",", "\n", "normalize_visual_inputs", ":", "bool", "=", "False", ",", "\n", "force_blind_policy", ":", "bool", "=", "False", ",", "\n", "policy_config", ":", "Config", "=", "None", ",", "\n", "fuse_keys", ":", "Optional", "[", "List", "[", "str", "]", "]", "=", "None", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "if", "policy_config", "is", "not", "None", ":", "\n", "            ", "discrete_actions", "=", "(", "\n", "policy_config", ".", "action_distribution_type", "==", "\"categorical\"", "\n", ")", "\n", "self", ".", "action_distribution_type", "=", "(", "\n", "policy_config", ".", "action_distribution_type", "\n", ")", "\n", "", "else", ":", "\n", "            ", "discrete_actions", "=", "True", "\n", "self", ".", "action_distribution_type", "=", "\"categorical\"", "\n", "\n", "", "super", "(", ")", ".", "__init__", "(", "\n", "PointNavResNetNet", "(", "\n", "observation_space", "=", "observation_space", ",", "\n", "action_space", "=", "action_space", ",", "# for previous action", "\n", "hidden_size", "=", "hidden_size", ",", "\n", "num_recurrent_layers", "=", "num_recurrent_layers", ",", "\n", "rnn_type", "=", "rnn_type", ",", "\n", "backbone", "=", "backbone", ",", "\n", "resnet_baseplanes", "=", "resnet_baseplanes", ",", "\n", "normalize_visual_inputs", "=", "normalize_visual_inputs", ",", "\n", "fuse_keys", "=", "fuse_keys", ",", "\n", "force_blind_policy", "=", "force_blind_policy", ",", "\n", "discrete_actions", "=", "discrete_actions", ",", "\n", ")", ",", "\n", "dim_actions", "=", "get_num_actions", "(", "action_space", ")", ",", "\n", "policy_config", "=", "policy_config", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.policy.resnet_policy.PointNavResNetPolicy.from_config": [[85, 103], ["cls"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_config", "(", "\n", "cls", ",", "\n", "config", ":", "Config", ",", "\n", "observation_space", ":", "spaces", ".", "Dict", ",", "\n", "action_space", ",", "\n", ")", ":", "\n", "        ", "return", "cls", "(", "\n", "observation_space", "=", "observation_space", ",", "\n", "action_space", "=", "action_space", ",", "\n", "hidden_size", "=", "config", ".", "RL", ".", "PPO", ".", "hidden_size", ",", "\n", "rnn_type", "=", "config", ".", "RL", ".", "DDPPO", ".", "rnn_type", ",", "\n", "num_recurrent_layers", "=", "config", ".", "RL", ".", "DDPPO", ".", "num_recurrent_layers", ",", "\n", "backbone", "=", "config", ".", "RL", ".", "DDPPO", ".", "backbone", ",", "\n", "normalize_visual_inputs", "=", "\"rgb\"", "in", "observation_space", ".", "spaces", ",", "\n", "force_blind_policy", "=", "config", ".", "FORCE_BLIND_POLICY", ",", "\n", "policy_config", "=", "config", ".", "RL", ".", "POLICY", ",", "\n", "fuse_keys", "=", "config", ".", "TASK_CONFIG", ".", "GYM", ".", "OBS_KEYS", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.policy.resnet_policy.ResNetEncoder.__init__": [[107, 176], ["torch.nn.Module.__init__", "sum", "habitat_baselines.rl.ddppo.policy.running_mean_and_var.RunningMeanAndVar", "torch.nn.Sequential", "make_backbone", "int", "int", "int", "torch.nn.Sequential", "numpy.ceil", "numpy.ceil", "round", "torch.nn.Conv2d", "torch.nn.GroupNorm", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "observation_space", ":", "spaces", ".", "Dict", ",", "\n", "baseplanes", ":", "int", "=", "32", ",", "\n", "ngroups", ":", "int", "=", "32", ",", "\n", "spatial_size", ":", "int", "=", "128", ",", "\n", "make_backbone", "=", "None", ",", "\n", "normalize_visual_inputs", ":", "bool", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# Determine which visual observations are present", "\n", "self", ".", "rgb_keys", "=", "[", "k", "for", "k", "in", "observation_space", ".", "spaces", "if", "\"rgb\"", "in", "k", "]", "\n", "self", ".", "depth_keys", "=", "[", "k", "for", "k", "in", "observation_space", ".", "spaces", "if", "\"depth\"", "in", "k", "]", "\n", "\n", "# Count total # of channels for rgb and for depth", "\n", "self", ".", "_n_input_rgb", ",", "self", ".", "_n_input_depth", "=", "[", "\n", "# sum() returns 0 for an empty list", "\n", "sum", "(", "[", "observation_space", ".", "spaces", "[", "k", "]", ".", "shape", "[", "2", "]", "for", "k", "in", "keys", "]", ")", "\n", "for", "keys", "in", "[", "self", ".", "rgb_keys", ",", "self", ".", "depth_keys", "]", "\n", "]", "\n", "\n", "if", "normalize_visual_inputs", ":", "\n", "            ", "self", ".", "running_mean_and_var", ":", "nn", ".", "Module", "=", "RunningMeanAndVar", "(", "\n", "self", ".", "_n_input_depth", "+", "self", ".", "_n_input_rgb", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "running_mean_and_var", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "", "if", "not", "self", ".", "is_blind", ":", "\n", "            ", "all_keys", "=", "self", ".", "rgb_keys", "+", "self", ".", "depth_keys", "\n", "spatial_size_h", "=", "(", "\n", "observation_space", ".", "spaces", "[", "all_keys", "[", "0", "]", "]", ".", "shape", "[", "0", "]", "//", "2", "\n", ")", "\n", "spatial_size_w", "=", "(", "\n", "observation_space", ".", "spaces", "[", "all_keys", "[", "0", "]", "]", ".", "shape", "[", "1", "]", "//", "2", "\n", ")", "\n", "input_channels", "=", "self", ".", "_n_input_depth", "+", "self", ".", "_n_input_rgb", "\n", "self", ".", "backbone", "=", "make_backbone", "(", "input_channels", ",", "baseplanes", ",", "ngroups", ")", "\n", "\n", "final_spatial_h", "=", "int", "(", "\n", "np", ".", "ceil", "(", "spatial_size_h", "*", "self", ".", "backbone", ".", "final_spatial_compress", ")", "\n", ")", "\n", "final_spatial_w", "=", "int", "(", "\n", "np", ".", "ceil", "(", "spatial_size_w", "*", "self", ".", "backbone", ".", "final_spatial_compress", ")", "\n", ")", "\n", "after_compression_flat_size", "=", "2048", "\n", "num_compression_channels", "=", "int", "(", "\n", "round", "(", "\n", "after_compression_flat_size", "\n", "/", "(", "final_spatial_h", "*", "final_spatial_w", ")", "\n", ")", "\n", ")", "\n", "self", ".", "compression", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "self", ".", "backbone", ".", "final_channels", ",", "\n", "num_compression_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "1", ",", "num_compression_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "self", ".", "output_shape", "=", "(", "\n", "num_compression_channels", ",", "\n", "final_spatial_h", ",", "\n", "final_spatial_w", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.policy.resnet_policy.ResNetEncoder.is_blind": [[178, 181], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "is_blind", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_n_input_rgb", "+", "self", ".", "_n_input_depth", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.policy.resnet_policy.ResNetEncoder.layer_init": [[182, 190], ["resnet_policy.ResNetEncoder.modules", "isinstance", "torch.nn.init.kaiming_normal_", "torch.nn.init.calculate_gain", "torch.nn.init.constant_"], "methods", ["None"], ["", "def", "layer_init", "(", "self", ")", ":", "\n", "        ", "for", "layer", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "(", "nn", ".", "Conv2d", ",", "nn", ".", "Linear", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "\n", "layer", ".", "weight", ",", "nn", ".", "init", ".", "calculate_gain", "(", "\"relu\"", ")", "\n", ")", "\n", "if", "layer", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "layer", ".", "bias", ",", "val", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.policy.resnet_policy.ResNetEncoder.forward": [[191, 218], ["torch.cat", "torch.nn.functional.avg_pool2d", "resnet_policy.ResNetEncoder.running_mean_and_var", "resnet_policy.ResNetEncoder.backbone", "resnet_policy.ResNetEncoder.compression", "rgb_observations.permute.permute.permute", "cnn_input.append", "depth_observations.permute.permute.permute", "cnn_input.append", "rgb_observations.permute.permute.float"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "observations", ":", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ")", "->", "torch", ".", "Tensor", ":", "# type: ignore", "\n", "        ", "if", "self", ".", "is_blind", ":", "\n", "            ", "return", "None", "\n", "\n", "", "cnn_input", "=", "[", "]", "\n", "for", "k", "in", "self", ".", "rgb_keys", ":", "\n", "            ", "rgb_observations", "=", "observations", "[", "k", "]", "\n", "# permute tensor to dimension [BATCH x CHANNEL x HEIGHT X WIDTH]", "\n", "rgb_observations", "=", "rgb_observations", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "rgb_observations", "=", "(", "\n", "rgb_observations", ".", "float", "(", ")", "/", "255.0", "\n", ")", "# normalize RGB", "\n", "cnn_input", ".", "append", "(", "rgb_observations", ")", "\n", "\n", "", "for", "k", "in", "self", ".", "depth_keys", ":", "\n", "            ", "depth_observations", "=", "observations", "[", "k", "]", "\n", "# permute tensor to dimension [BATCH x CHANNEL x HEIGHT X WIDTH]", "\n", "depth_observations", "=", "depth_observations", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "cnn_input", ".", "append", "(", "depth_observations", ")", "\n", "\n", "", "x", "=", "torch", ".", "cat", "(", "cnn_input", ",", "dim", "=", "1", ")", "\n", "x", "=", "F", ".", "avg_pool2d", "(", "x", ",", "2", ")", "\n", "\n", "x", "=", "self", ".", "running_mean_and_var", "(", "x", ")", "\n", "x", "=", "self", ".", "backbone", "(", "x", ")", "\n", "x", "=", "self", ".", "compression", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.policy.resnet_policy.PointNavResNetNet.__init__": [[227, 398], ["habitat_baselines.rl.ppo.Net.__init__", "resnet_policy.ResNetEncoder", "habitat_baselines.rl.models.rnn_state_encoder.build_rnn_state_encoder", "resnet_policy.PointNavResNetNet.train", "torch.nn.Embedding", "habitat_baselines.utils.common.get_num_actions", "torch.nn.Linear", "len", "sum", "torch.nn.Linear", "torch.nn.Embedding", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "gym.spaces.Dict", "resnet_policy.ResNetEncoder", "torch.nn.Sequential", "gym.spaces.Dict", "torch.nn.Sequential", "int", "torch.nn.Flatten", "torch.nn.Linear", "torch.nn.ReLU", "gym.spaces.Dict", "getattr", "torch.nn.Flatten", "torch.nn.Linear", "torch.nn.ReLU", "getattr", "numpy.prod", "numpy.prod", "len", "len"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.rnn_state_encoder.build_rnn_state_encoder", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.train", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.get_num_actions"], ["def", "__init__", "(", "\n", "self", ",", "\n", "observation_space", ":", "spaces", ".", "Dict", ",", "\n", "action_space", ",", "\n", "hidden_size", ":", "int", ",", "\n", "num_recurrent_layers", ":", "int", ",", "\n", "rnn_type", ":", "str", ",", "\n", "backbone", ",", "\n", "resnet_baseplanes", ",", "\n", "normalize_visual_inputs", ":", "bool", ",", "\n", "fuse_keys", ":", "Optional", "[", "List", "[", "str", "]", "]", ",", "\n", "force_blind_policy", ":", "bool", "=", "False", ",", "\n", "discrete_actions", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "prev_action_embedding", ":", "nn", ".", "Module", "\n", "self", ".", "discrete_actions", "=", "discrete_actions", "\n", "if", "discrete_actions", ":", "\n", "            ", "self", ".", "prev_action_embedding", "=", "nn", ".", "Embedding", "(", "action_space", ".", "n", "+", "1", ",", "32", ")", "\n", "", "else", ":", "\n", "            ", "num_actions", "=", "get_num_actions", "(", "action_space", ")", "\n", "self", ".", "prev_action_embedding", "=", "nn", ".", "Linear", "(", "num_actions", ",", "32", ")", "\n", "\n", "", "self", ".", "_n_prev_action", "=", "32", "\n", "rnn_input_size", "=", "self", ".", "_n_prev_action", "# test", "\n", "\n", "# Only fuse the 1D state inputs. Other inputs are processed by the", "\n", "# visual encoder", "\n", "self", ".", "_fuse_keys", ":", "List", "[", "str", "]", "=", "(", "\n", "[", "\n", "k", "\n", "for", "k", "in", "fuse_keys", "\n", "if", "len", "(", "observation_space", ".", "spaces", "[", "k", "]", ".", "shape", ")", "==", "1", "\n", "]", "\n", "if", "fuse_keys", "is", "not", "None", "\n", "else", "[", "]", "\n", ")", "\n", "if", "len", "(", "self", ".", "_fuse_keys", ")", "!=", "0", ":", "\n", "            ", "rnn_input_size", "+=", "sum", "(", "\n", "[", "observation_space", ".", "spaces", "[", "k", "]", ".", "shape", "[", "0", "]", "for", "k", "in", "self", ".", "_fuse_keys", "]", "\n", ")", "\n", "\n", "", "if", "(", "\n", "IntegratedPointGoalGPSAndCompassSensor", ".", "cls_uuid", "\n", "in", "observation_space", ".", "spaces", "\n", ")", ":", "\n", "            ", "n_input_goal", "=", "(", "\n", "observation_space", ".", "spaces", "[", "\n", "IntegratedPointGoalGPSAndCompassSensor", ".", "cls_uuid", "\n", "]", ".", "shape", "[", "0", "]", "\n", "+", "1", "\n", ")", "\n", "self", ".", "tgt_embeding", "=", "nn", ".", "Linear", "(", "n_input_goal", ",", "32", ")", "\n", "rnn_input_size", "+=", "32", "\n", "\n", "", "if", "ObjectGoalSensor", ".", "cls_uuid", "in", "observation_space", ".", "spaces", ":", "\n", "            ", "self", ".", "_n_object_categories", "=", "(", "\n", "int", "(", "\n", "observation_space", ".", "spaces", "[", "ObjectGoalSensor", ".", "cls_uuid", "]", ".", "high", "[", "0", "]", "\n", ")", "\n", "+", "1", "\n", ")", "\n", "self", ".", "obj_categories_embedding", "=", "nn", ".", "Embedding", "(", "\n", "self", ".", "_n_object_categories", ",", "32", "\n", ")", "\n", "rnn_input_size", "+=", "32", "\n", "\n", "", "if", "EpisodicGPSSensor", ".", "cls_uuid", "in", "observation_space", ".", "spaces", ":", "\n", "            ", "input_gps_dim", "=", "observation_space", ".", "spaces", "[", "\n", "EpisodicGPSSensor", ".", "cls_uuid", "\n", "]", ".", "shape", "[", "0", "]", "\n", "self", ".", "gps_embedding", "=", "nn", ".", "Linear", "(", "input_gps_dim", ",", "32", ")", "\n", "rnn_input_size", "+=", "32", "\n", "\n", "", "if", "PointGoalSensor", ".", "cls_uuid", "in", "observation_space", ".", "spaces", ":", "\n", "            ", "input_pointgoal_dim", "=", "observation_space", ".", "spaces", "[", "\n", "PointGoalSensor", ".", "cls_uuid", "\n", "]", ".", "shape", "[", "0", "]", "\n", "self", ".", "pointgoal_embedding", "=", "nn", ".", "Linear", "(", "input_pointgoal_dim", ",", "32", ")", "\n", "rnn_input_size", "+=", "32", "\n", "\n", "", "if", "HeadingSensor", ".", "cls_uuid", "in", "observation_space", ".", "spaces", ":", "\n", "            ", "input_heading_dim", "=", "(", "\n", "observation_space", ".", "spaces", "[", "HeadingSensor", ".", "cls_uuid", "]", ".", "shape", "[", "0", "]", "+", "1", "\n", ")", "\n", "assert", "input_heading_dim", "==", "2", ",", "\"Expected heading with 2D rotation.\"", "\n", "self", ".", "heading_embedding", "=", "nn", ".", "Linear", "(", "input_heading_dim", ",", "32", ")", "\n", "rnn_input_size", "+=", "32", "\n", "\n", "", "if", "ProximitySensor", ".", "cls_uuid", "in", "observation_space", ".", "spaces", ":", "\n", "            ", "input_proximity_dim", "=", "observation_space", ".", "spaces", "[", "\n", "ProximitySensor", ".", "cls_uuid", "\n", "]", ".", "shape", "[", "0", "]", "\n", "self", ".", "proximity_embedding", "=", "nn", ".", "Linear", "(", "input_proximity_dim", ",", "32", ")", "\n", "rnn_input_size", "+=", "32", "\n", "\n", "", "if", "EpisodicCompassSensor", ".", "cls_uuid", "in", "observation_space", ".", "spaces", ":", "\n", "            ", "assert", "(", "\n", "observation_space", ".", "spaces", "[", "EpisodicCompassSensor", ".", "cls_uuid", "]", ".", "shape", "[", "\n", "0", "\n", "]", "\n", "==", "1", "\n", ")", ",", "\"Expected compass with 2D rotation.\"", "\n", "input_compass_dim", "=", "2", "# cos and sin of the angle", "\n", "self", ".", "compass_embedding", "=", "nn", ".", "Linear", "(", "input_compass_dim", ",", "32", ")", "\n", "rnn_input_size", "+=", "32", "\n", "\n", "", "if", "ImageGoalSensor", ".", "cls_uuid", "in", "observation_space", ".", "spaces", ":", "\n", "            ", "goal_observation_space", "=", "spaces", ".", "Dict", "(", "\n", "{", "\"rgb\"", ":", "observation_space", ".", "spaces", "[", "ImageGoalSensor", ".", "cls_uuid", "]", "}", "\n", ")", "\n", "self", ".", "goal_visual_encoder", "=", "ResNetEncoder", "(", "\n", "goal_observation_space", ",", "\n", "baseplanes", "=", "resnet_baseplanes", ",", "\n", "ngroups", "=", "resnet_baseplanes", "//", "2", ",", "\n", "make_backbone", "=", "getattr", "(", "resnet", ",", "backbone", ")", ",", "\n", "normalize_visual_inputs", "=", "normalize_visual_inputs", ",", "\n", ")", "\n", "\n", "self", ".", "goal_visual_fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "\n", "np", ".", "prod", "(", "self", ".", "goal_visual_encoder", ".", "output_shape", ")", ",", "hidden_size", "\n", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "rnn_input_size", "+=", "hidden_size", "\n", "\n", "", "self", ".", "_hidden_size", "=", "hidden_size", "\n", "\n", "if", "force_blind_policy", ":", "\n", "            ", "use_obs_space", "=", "spaces", ".", "Dict", "(", "{", "}", ")", "\n", "", "else", ":", "\n", "            ", "use_obs_space", "=", "(", "\n", "spaces", ".", "Dict", "(", "\n", "{", "\n", "k", ":", "observation_space", ".", "spaces", "[", "k", "]", "\n", "for", "k", "in", "fuse_keys", "\n", "if", "len", "(", "observation_space", ".", "spaces", "[", "k", "]", ".", "shape", ")", "==", "3", "\n", "}", "\n", ")", "\n", "if", "fuse_keys", "is", "not", "None", "\n", "else", "observation_space", "\n", ")", "\n", "\n", "", "self", ".", "visual_encoder", "=", "ResNetEncoder", "(", "\n", "use_obs_space", ",", "\n", "baseplanes", "=", "resnet_baseplanes", ",", "\n", "ngroups", "=", "resnet_baseplanes", "//", "2", ",", "\n", "make_backbone", "=", "getattr", "(", "resnet", ",", "backbone", ")", ",", "\n", "normalize_visual_inputs", "=", "normalize_visual_inputs", ",", "\n", ")", "\n", "\n", "if", "not", "self", ".", "visual_encoder", ".", "is_blind", ":", "\n", "            ", "self", ".", "visual_fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "\n", "np", ".", "prod", "(", "self", ".", "visual_encoder", ".", "output_shape", ")", ",", "hidden_size", "\n", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "", "self", ".", "state_encoder", "=", "build_rnn_state_encoder", "(", "\n", "(", "0", "if", "self", ".", "is_blind", "else", "self", ".", "_hidden_size", ")", "+", "rnn_input_size", ",", "\n", "self", ".", "_hidden_size", ",", "\n", "rnn_type", "=", "rnn_type", ",", "\n", "num_layers", "=", "num_recurrent_layers", ",", "\n", ")", "\n", "\n", "self", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.policy.resnet_policy.PointNavResNetNet.output_size": [[399, 402], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_hidden_size", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.policy.resnet_policy.PointNavResNetNet.is_blind": [[403, 406], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_blind", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "visual_encoder", ".", "is_blind", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.policy.resnet_policy.PointNavResNetNet.num_recurrent_layers": [[407, 410], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_recurrent_layers", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "state_encoder", ".", "num_recurrent_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.policy.resnet_policy.PointNavResNetNet.forward": [[411, 532], ["x.append", "torch.cat", "resnet_policy.PointNavResNetNet.state_encoder", "observations.get", "resnet_policy.PointNavResNetNet.visual_fc", "x.append", "len", "torch.cat", "x.append", "x.append", "x.append", "x.append", "torch.stack", "x.append", "observations[].long", "x.append", "torch.stack", "x.append", "x.append", "resnet_policy.PointNavResNetNet.goal_visual_encoder", "x.append", "resnet_policy.PointNavResNetNet.squeeze", "torch.zeros_like", "resnet_policy.PointNavResNetNet.prev_action_embedding", "resnet_policy.PointNavResNetNet.prev_action_embedding", "resnet_policy.PointNavResNetNet.visual_encoder", "torch.stack", "torch.sin", "torch.stack", "resnet_policy.PointNavResNetNet.tgt_embeding", "resnet_policy.PointNavResNetNet.pointgoal_embedding", "resnet_policy.PointNavResNetNet.proximity_embedding", "resnet_policy.PointNavResNetNet.heading_embedding", "resnet_policy.PointNavResNetNet.obj_categories_embedding().squeeze", "resnet_policy.PointNavResNetNet.compass_embedding", "resnet_policy.PointNavResNetNet.gps_embedding", "resnet_policy.PointNavResNetNet.goal_visual_fc", "torch.where", "torch.cos", "torch.sin", "torch.cos", "torch.sin", "torch.stack.squeeze", "masks.view", "resnet_policy.PointNavResNetNet.float", "torch.cos", "torch.sin", "torch.cos", "resnet_policy.PointNavResNetNet.obj_categories_embedding", "torch.cos", "torch.sin"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "observations", ":", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ",", "\n", "rnn_hidden_states", ",", "\n", "prev_actions", ",", "\n", "masks", ",", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "x", "=", "[", "]", "\n", "if", "not", "self", ".", "is_blind", ":", "\n", "            ", "visual_feats", "=", "observations", ".", "get", "(", "\n", "\"visual_features\"", ",", "self", ".", "visual_encoder", "(", "observations", ")", "\n", ")", "\n", "visual_feats", "=", "self", ".", "visual_fc", "(", "visual_feats", ")", "\n", "x", ".", "append", "(", "visual_feats", ")", "\n", "\n", "", "if", "len", "(", "self", ".", "_fuse_keys", ")", "!=", "0", ":", "\n", "            ", "fuse_states", "=", "torch", ".", "cat", "(", "\n", "[", "observations", "[", "k", "]", "for", "k", "in", "self", ".", "_fuse_keys", "]", ",", "dim", "=", "-", "1", "\n", ")", "\n", "x", ".", "append", "(", "fuse_states", ")", "\n", "\n", "", "if", "IntegratedPointGoalGPSAndCompassSensor", ".", "cls_uuid", "in", "observations", ":", "\n", "            ", "goal_observations", "=", "observations", "[", "\n", "IntegratedPointGoalGPSAndCompassSensor", ".", "cls_uuid", "\n", "]", "\n", "if", "goal_observations", ".", "shape", "[", "1", "]", "==", "2", ":", "\n", "# Polar Dimensionality 2", "\n", "# 2D polar transform", "\n", "                ", "goal_observations", "=", "torch", ".", "stack", "(", "\n", "[", "\n", "goal_observations", "[", ":", ",", "0", "]", ",", "\n", "torch", ".", "cos", "(", "-", "goal_observations", "[", ":", ",", "1", "]", ")", ",", "\n", "torch", ".", "sin", "(", "-", "goal_observations", "[", ":", ",", "1", "]", ")", ",", "\n", "]", ",", "\n", "-", "1", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "assert", "(", "\n", "goal_observations", ".", "shape", "[", "1", "]", "==", "3", "\n", ")", ",", "\"Unsupported dimensionality\"", "\n", "vertical_angle_sin", "=", "torch", ".", "sin", "(", "goal_observations", "[", ":", ",", "2", "]", ")", "\n", "# Polar Dimensionality 3", "\n", "# 3D Polar transformation", "\n", "goal_observations", "=", "torch", ".", "stack", "(", "\n", "[", "\n", "goal_observations", "[", ":", ",", "0", "]", ",", "\n", "torch", ".", "cos", "(", "-", "goal_observations", "[", ":", ",", "1", "]", ")", "\n", "*", "vertical_angle_sin", ",", "\n", "torch", ".", "sin", "(", "-", "goal_observations", "[", ":", ",", "1", "]", ")", "\n", "*", "vertical_angle_sin", ",", "\n", "torch", ".", "cos", "(", "goal_observations", "[", ":", ",", "2", "]", ")", ",", "\n", "]", ",", "\n", "-", "1", ",", "\n", ")", "\n", "\n", "", "x", ".", "append", "(", "self", ".", "tgt_embeding", "(", "goal_observations", ")", ")", "\n", "\n", "", "if", "PointGoalSensor", ".", "cls_uuid", "in", "observations", ":", "\n", "            ", "goal_observations", "=", "observations", "[", "PointGoalSensor", ".", "cls_uuid", "]", "\n", "x", ".", "append", "(", "self", ".", "pointgoal_embedding", "(", "goal_observations", ")", ")", "\n", "\n", "", "if", "ProximitySensor", ".", "cls_uuid", "in", "observations", ":", "\n", "            ", "sensor_observations", "=", "observations", "[", "ProximitySensor", ".", "cls_uuid", "]", "\n", "x", ".", "append", "(", "self", ".", "proximity_embedding", "(", "sensor_observations", ")", ")", "\n", "\n", "", "if", "HeadingSensor", ".", "cls_uuid", "in", "observations", ":", "\n", "            ", "sensor_observations", "=", "observations", "[", "HeadingSensor", ".", "cls_uuid", "]", "\n", "sensor_observations", "=", "torch", ".", "stack", "(", "\n", "[", "\n", "torch", ".", "cos", "(", "sensor_observations", "[", "0", "]", ")", ",", "\n", "torch", ".", "sin", "(", "sensor_observations", "[", "0", "]", ")", ",", "\n", "]", ",", "\n", "-", "1", ",", "\n", ")", "\n", "x", ".", "append", "(", "self", ".", "heading_embedding", "(", "sensor_observations", ")", ")", "\n", "\n", "", "if", "ObjectGoalSensor", ".", "cls_uuid", "in", "observations", ":", "\n", "            ", "object_goal", "=", "observations", "[", "ObjectGoalSensor", ".", "cls_uuid", "]", ".", "long", "(", ")", "\n", "x", ".", "append", "(", "self", ".", "obj_categories_embedding", "(", "object_goal", ")", ".", "squeeze", "(", "dim", "=", "1", ")", ")", "\n", "\n", "", "if", "EpisodicCompassSensor", ".", "cls_uuid", "in", "observations", ":", "\n", "            ", "compass_observations", "=", "torch", ".", "stack", "(", "\n", "[", "\n", "torch", ".", "cos", "(", "observations", "[", "EpisodicCompassSensor", ".", "cls_uuid", "]", ")", ",", "\n", "torch", ".", "sin", "(", "observations", "[", "EpisodicCompassSensor", ".", "cls_uuid", "]", ")", ",", "\n", "]", ",", "\n", "-", "1", ",", "\n", ")", "\n", "x", ".", "append", "(", "\n", "self", ".", "compass_embedding", "(", "compass_observations", ".", "squeeze", "(", "dim", "=", "1", ")", ")", "\n", ")", "\n", "\n", "", "if", "EpisodicGPSSensor", ".", "cls_uuid", "in", "observations", ":", "\n", "            ", "x", ".", "append", "(", "\n", "self", ".", "gps_embedding", "(", "observations", "[", "EpisodicGPSSensor", ".", "cls_uuid", "]", ")", "\n", ")", "\n", "\n", "", "if", "ImageGoalSensor", ".", "cls_uuid", "in", "observations", ":", "\n", "            ", "goal_image", "=", "observations", "[", "ImageGoalSensor", ".", "cls_uuid", "]", "\n", "goal_output", "=", "self", ".", "goal_visual_encoder", "(", "{", "\"rgb\"", ":", "goal_image", "}", ")", "\n", "x", ".", "append", "(", "self", ".", "goal_visual_fc", "(", "goal_output", ")", ")", "\n", "\n", "", "if", "self", ".", "discrete_actions", ":", "\n", "            ", "prev_actions", "=", "prev_actions", ".", "squeeze", "(", "-", "1", ")", "\n", "start_token", "=", "torch", ".", "zeros_like", "(", "prev_actions", ")", "\n", "prev_actions", "=", "self", ".", "prev_action_embedding", "(", "\n", "torch", ".", "where", "(", "masks", ".", "view", "(", "-", "1", ")", ",", "prev_actions", "+", "1", ",", "start_token", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "prev_actions", "=", "self", ".", "prev_action_embedding", "(", "\n", "masks", "*", "prev_actions", ".", "float", "(", ")", "\n", ")", "\n", "\n", "", "x", ".", "append", "(", "prev_actions", ")", "\n", "\n", "out", "=", "torch", ".", "cat", "(", "x", ",", "dim", "=", "1", ")", "\n", "out", ",", "rnn_hidden_states", "=", "self", ".", "state_encoder", "(", "\n", "out", ",", "rnn_hidden_states", ",", "masks", "\n", ")", "\n", "\n", "return", "out", ",", "rnn_hidden_states", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.policy.resnet.BasicBlock.__init__": [[41, 60], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.ReLU", "resnet.conv3x3", "torch.nn.GroupNorm", "torch.nn.ReLU", "resnet.conv3x3", "torch.nn.GroupNorm"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.conv3x3", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.conv3x3"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "ngroups", ",", "\n", "stride", "=", "1", ",", "\n", "downsample", "=", "None", ",", "\n", "cardinality", "=", "1", ",", "\n", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ",", "groups", "=", "cardinality", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "ngroups", ",", "planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "conv3x3", "(", "planes", ",", "planes", ",", "groups", "=", "cardinality", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "ngroups", ",", "planes", ")", ",", "\n", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.policy.resnet.BasicBlock.forward": [[61, 70], ["resnet.BasicBlock.convs", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "convs", "(", "x", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "return", "self", ".", "relu", "(", "out", "+", "residual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.policy.resnet.SE.__init__": [[93, 101], ["torch.nn.Module.__init__", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Sigmoid", "int", "int"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "planes", ",", "r", "=", "16", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "squeeze", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "excite", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "planes", ",", "int", "(", "planes", "/", "r", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "int", "(", "planes", "/", "r", ")", ",", "planes", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.policy.resnet.SE.forward": [[103, 110], ["resnet.SE.size", "resnet.SE.squeeze", "resnet.SE.view", "resnet.SE.excite", "resnet.SE.view"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "b", ",", "c", ",", "_", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "self", ".", "squeeze", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "b", ",", "c", ")", "\n", "x", "=", "self", ".", "excite", "(", "x", ")", "\n", "\n", "return", "x", ".", "view", "(", "b", ",", "c", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.policy.resnet.Bottleneck.__init__": [[120, 140], ["torch.nn.Module.__init__", "resnet._build_bottleneck_branch", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.policy.resnet._build_bottleneck_branch"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ":", "int", ",", "\n", "planes", ":", "int", ",", "\n", "ngroups", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", "downsample", ":", "Optional", "[", "Sequential", "]", "=", "None", ",", "\n", "cardinality", ":", "int", "=", "1", ",", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "convs", "=", "_build_bottleneck_branch", "(", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "ngroups", ",", "\n", "stride", ",", "\n", "self", ".", "expansion", ",", "\n", "groups", "=", "cardinality", ",", "\n", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.policy.resnet.Bottleneck._impl": [[141, 150], ["resnet.Bottleneck.convs", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "_impl", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "convs", "(", "x", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "return", "self", ".", "relu", "(", "out", "+", "identity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.policy.resnet.Bottleneck.forward": [[151, 153], ["resnet.Bottleneck._impl"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.policy.resnet.SEBottleneck._impl"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "return", "self", ".", "_impl", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.policy.resnet.SEBottleneck.__init__": [[156, 170], ["resnet.Bottleneck.__init__", "resnet._build_se_branch"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.policy.resnet._build_se_branch"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "ngroups", ",", "\n", "stride", "=", "1", ",", "\n", "downsample", "=", "None", ",", "\n", "cardinality", "=", "1", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "inplanes", ",", "planes", ",", "ngroups", ",", "stride", ",", "downsample", ",", "cardinality", "\n", ")", "\n", "\n", "self", ".", "se", "=", "_build_se_branch", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.policy.resnet.SEBottleneck._impl": [[171, 181], ["resnet.SEBottleneck.convs", "resnet.SEBottleneck.relu", "resnet.SEBottleneck.se", "resnet.SEBottleneck.downsample"], "methods", ["None"], ["", "def", "_impl", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "convs", "(", "x", ")", "\n", "out", "=", "self", ".", "se", "(", "out", ")", "*", "out", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "return", "self", ".", "relu", "(", "out", "+", "identity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.policy.resnet.ResNet.__init__": [[197, 239], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.nn.Conv2d", "torch.nn.GroupNorm", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.ResNet._make_layer", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.ResNet._make_layer", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.ResNet._make_layer", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.ResNet._make_layer"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ":", "int", ",", "\n", "base_planes", ":", "int", ",", "\n", "ngroups", ":", "int", ",", "\n", "block", ":", "Block", ",", "\n", "layers", ":", "List", "[", "int", "]", ",", "\n", "cardinality", ":", "int", "=", "1", ",", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "\n", "base_planes", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "3", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "ngroups", ",", "base_planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "cardinality", "=", "cardinality", "\n", "\n", "self", ".", "inplanes", "=", "base_planes", "\n", "if", "block", ".", "resneXt", ":", "\n", "            ", "base_planes", "*=", "2", "\n", "\n", "", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "ngroups", ",", "base_planes", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "ngroups", ",", "base_planes", "*", "2", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", "\n", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "ngroups", ",", "base_planes", "*", "2", "*", "2", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", "\n", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "ngroups", ",", "base_planes", "*", "2", "*", "2", "*", "2", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", "\n", ")", "\n", "\n", "self", ".", "final_channels", "=", "self", ".", "inplanes", "\n", "self", ".", "final_spatial_compress", "=", "1.0", "/", "(", "2", "**", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.policy.resnet.ResNet._make_layer": [[240, 271], ["layers.append", "range", "torch.nn.Sequential", "torch.nn.Sequential", "block", "layers.append", "resnet.conv1x1", "torch.nn.GroupNorm", "block"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.policy.resnet.conv1x1"], ["", "def", "_make_layer", "(", "\n", "self", ",", "\n", "block", ":", "Block", ",", "\n", "ngroups", ":", "int", ",", "\n", "planes", ":", "int", ",", "\n", "blocks", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", ")", "->", "Sequential", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "ngroups", ",", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "\n", "self", ".", "inplanes", ",", "\n", "planes", ",", "\n", "ngroups", ",", "\n", "stride", ",", "\n", "downsample", ",", "\n", "cardinality", "=", "self", ".", "cardinality", ",", "\n", ")", "\n", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "ngroups", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.policy.resnet.ResNet.forward": [[272, 282], ["resnet.ResNet.conv1", "resnet.ResNet.maxpool", "typing.cast", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", "->", "Tensor", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "cast", "(", "Tensor", ",", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.policy.resnet.conv3x3": [[15, 27], ["torch.nn.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "\n", "in_planes", ":", "int", ",", "out_planes", ":", "int", ",", "stride", ":", "int", "=", "1", ",", "groups", ":", "int", "=", "1", "\n", ")", "->", "Conv2d", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "groups", "=", "groups", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.policy.resnet.conv1x1": [[30, 34], ["torch.nn.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ":", "int", ",", "out_planes", ":", "int", ",", "stride", ":", "int", "=", "1", ")", "->", "Conv2d", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.policy.resnet._build_bottleneck_branch": [[72, 89], ["torch.nn.Sequential", "resnet.conv1x1", "torch.nn.GroupNorm", "torch.nn.ReLU", "resnet.conv3x3", "torch.nn.GroupNorm", "torch.nn.ReLU", "resnet.conv1x1", "torch.nn.GroupNorm"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.policy.resnet.conv1x1", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.conv3x3", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.policy.resnet.conv1x1"], ["", "", "def", "_build_bottleneck_branch", "(", "\n", "inplanes", ":", "int", ",", "\n", "planes", ":", "int", ",", "\n", "ngroups", ":", "int", ",", "\n", "stride", ":", "int", ",", "\n", "expansion", ":", "int", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", ")", "->", "Sequential", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "inplanes", ",", "planes", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "ngroups", ",", "planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "conv3x3", "(", "planes", ",", "planes", ",", "stride", ",", "groups", "=", "groups", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "ngroups", ",", "planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "conv1x1", "(", "planes", ",", "planes", "*", "expansion", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "ngroups", ",", "planes", "*", "expansion", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.policy.resnet._build_se_branch": [[112, 114], ["resnet.SE"], "function", ["None"], ["", "", "def", "_build_se_branch", "(", "planes", ",", "r", "=", "16", ")", ":", "\n", "    ", "return", "SE", "(", "planes", ",", "r", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.policy.resnet.resnet18": [[284, 288], ["resnet.ResNet"], "function", ["None"], ["", "", "def", "resnet18", "(", "in_channels", ",", "base_planes", ",", "ngroups", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "in_channels", ",", "base_planes", ",", "ngroups", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.policy.resnet.resnet50": [[290, 294], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet50", "(", "in_channels", ":", "int", ",", "base_planes", ":", "int", ",", "ngroups", ":", "int", ")", "->", "ResNet", ":", "\n", "    ", "model", "=", "ResNet", "(", "in_channels", ",", "base_planes", ",", "ngroups", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.policy.resnet.resneXt50": [[296, 307], ["resnet.ResNet", "int"], "function", ["None"], ["", "def", "resneXt50", "(", "in_channels", ",", "base_planes", ",", "ngroups", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "\n", "in_channels", ",", "\n", "base_planes", ",", "\n", "ngroups", ",", "\n", "ResNeXtBottleneck", ",", "\n", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "cardinality", "=", "int", "(", "base_planes", "/", "2", ")", ",", "\n", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.policy.resnet.se_resnet50": [[309, 315], ["resnet.ResNet"], "function", ["None"], ["", "def", "se_resnet50", "(", "in_channels", ",", "base_planes", ",", "ngroups", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "\n", "in_channels", ",", "base_planes", ",", "ngroups", ",", "SEBottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", "\n", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.policy.resnet.se_resneXt50": [[317, 328], ["resnet.ResNet", "int"], "function", ["None"], ["", "def", "se_resneXt50", "(", "in_channels", ",", "base_planes", ",", "ngroups", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "\n", "in_channels", ",", "\n", "base_planes", ",", "\n", "ngroups", ",", "\n", "SEResNeXtBottleneck", ",", "\n", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "cardinality", "=", "int", "(", "base_planes", "/", "2", ")", ",", "\n", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.policy.resnet.se_resneXt101": [[330, 341], ["resnet.ResNet", "int"], "function", ["None"], ["", "def", "se_resneXt101", "(", "in_channels", ",", "base_planes", ",", "ngroups", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "\n", "in_channels", ",", "\n", "base_planes", ",", "\n", "ngroups", ",", "\n", "SEResNeXtBottleneck", ",", "\n", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "cardinality", "=", "int", "(", "base_planes", "/", "2", ")", ",", "\n", ")", "\n", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.policy.running_mean_and_var.RunningMeanAndVar.__init__": [[14, 23], ["torch.nn.Module.__init__", "running_mean_and_var.RunningMeanAndVar.register_buffer", "running_mean_and_var.RunningMeanAndVar.register_buffer", "running_mean_and_var.RunningMeanAndVar.register_buffer", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_channels", ":", "int", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "n_channels", ">", "0", "\n", "self", ".", "register_buffer", "(", "\"_mean\"", ",", "torch", ".", "zeros", "(", "1", ",", "n_channels", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"_var\"", ",", "torch", ".", "zeros", "(", "1", ",", "n_channels", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"_count\"", ",", "torch", ".", "zeros", "(", "(", ")", ")", ")", "\n", "self", ".", "_mean", ":", "torch", ".", "Tensor", "=", "self", ".", "_mean", "\n", "self", ".", "_var", ":", "torch", ".", "Tensor", "=", "self", ".", "_var", "\n", "self", ".", "_count", ":", "torch", ".", "Tensor", "=", "self", ".", "_count", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.policy.running_mean_and_var.RunningMeanAndVar.forward": [[24, 79], ["torch.rsqrt", "torch.addcmul", "x.size", "x.transpose().contiguous().view", "x.transpose().contiguous().view.mean", "torch.full_like", "torch.distributed.is_initialized", "torch.distributed.is_initialized", "new_mean.view.view.view", "new_var.view.view.view", "torch.max", "x.size", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.get_world_size", "torch.distributed.all_reduce", "torch.distributed.get_world_size", "torch.full_like", "x.transpose().contiguous", "x.transpose"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "n", "=", "x", ".", "size", "(", "0", ")", "\n", "# We will need to do reductions (mean) over the channel dimension,", "\n", "# so moving channels to the first dimension and then flattening", "\n", "# will make those faster.  Further, it makes things more numerically stable", "\n", "# for fp16 since it is done in a single reduction call instead of", "\n", "# multiple", "\n", "x_channels_first", "=", "(", "\n", "x", ".", "transpose", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", ".", "view", "(", "x", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", ")", "\n", "new_mean", "=", "x_channels_first", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "new_count", "=", "torch", ".", "full_like", "(", "self", ".", "_count", ",", "n", ")", "\n", "\n", "if", "distrib", ".", "is_initialized", "(", ")", ":", "\n", "                ", "distrib", ".", "all_reduce", "(", "new_mean", ")", "\n", "distrib", ".", "all_reduce", "(", "new_count", ")", "\n", "new_mean", "/=", "distrib", ".", "get_world_size", "(", ")", "\n", "\n", "", "new_var", "=", "(", "\n", "(", "x_channels_first", "-", "new_mean", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", ")", "\n", "\n", "if", "distrib", ".", "is_initialized", "(", ")", ":", "\n", "                ", "distrib", ".", "all_reduce", "(", "new_var", ")", "\n", "new_var", "/=", "distrib", ".", "get_world_size", "(", ")", "\n", "\n", "", "new_mean", "=", "new_mean", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "new_var", "=", "new_var", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "\n", "m_a", "=", "self", ".", "_var", "*", "(", "self", ".", "_count", ")", "\n", "m_b", "=", "new_var", "*", "(", "new_count", ")", "\n", "M2", "=", "(", "\n", "m_a", "\n", "+", "m_b", "\n", "+", "(", "new_mean", "-", "self", ".", "_mean", ")", ".", "pow", "(", "2", ")", "\n", "*", "self", ".", "_count", "\n", "*", "new_count", "\n", "/", "(", "self", ".", "_count", "+", "new_count", ")", "\n", ")", "\n", "\n", "self", ".", "_var", "=", "M2", "/", "(", "self", ".", "_count", "+", "new_count", ")", "\n", "self", ".", "_mean", "=", "(", "self", ".", "_count", "*", "self", ".", "_mean", "+", "new_count", "*", "new_mean", ")", "/", "(", "\n", "self", ".", "_count", "+", "new_count", "\n", ")", "\n", "\n", "self", ".", "_count", "+=", "new_count", "\n", "\n", "", "inv_stdev", "=", "torch", ".", "rsqrt", "(", "\n", "torch", ".", "max", "(", "self", ".", "_var", ",", "torch", ".", "full_like", "(", "self", ".", "_var", ",", "1e-2", ")", ")", "\n", ")", "\n", "# This is the same as", "\n", "# (x - self._mean) * inv_stdev but is faster since it can", "\n", "# make use of addcmul and is more numerically stable in fp16", "\n", "return", "torch", ".", "addcmul", "(", "-", "self", ".", "_mean", "*", "inv_stdev", ",", "x", ",", "inv_stdev", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.algo.ddppo._EvalActionsWrapper.__init__": [[51, 54], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "actor_critic", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "actor_critic", "=", "actor_critic", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.algo.ddppo._EvalActionsWrapper.forward": [[55, 57], ["ddppo._EvalActionsWrapper.actor_critic.evaluate_actions"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.ppo.policy.NetPolicy.evaluate_actions"], ["", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "actor_critic", ".", "evaluate_actions", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.algo.ddppo.DecentralizedDistributedMixin._get_advantages_distributed": [[60, 75], ["ddppo.distributed_mean_and_var", "var.sqrt"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.algo.ddppo.distributed_mean_and_var"], ["    ", "def", "_get_advantages_distributed", "(", "\n", "self", ",", "rollouts", ":", "RolloutStorage", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "advantages", "=", "(", "\n", "rollouts", ".", "buffers", "[", "\"returns\"", "]", "[", ":", "rollouts", ".", "current_rollout_step_idx", "]", "# type: ignore", "\n", "-", "rollouts", ".", "buffers", "[", "\"value_preds\"", "]", "[", "\n", ":", "rollouts", ".", "current_rollout_step_idx", "\n", "]", "\n", ")", "\n", "if", "not", "self", ".", "use_normalized_advantage", ":", "# type: ignore", "\n", "            ", "return", "advantages", "\n", "\n", "", "mean", ",", "var", "=", "distributed_mean_and_var", "(", "advantages", ")", "\n", "\n", "return", "(", "advantages", "-", "mean", ")", "/", "(", "var", ".", "sqrt", "(", ")", "+", "EPS_PPO", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.algo.ddppo.DecentralizedDistributedMixin.init_distributed": [[76, 106], ["Guard", "ddppo._EvalActionsWrapper", "torch.cuda.is_available", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel"], "methods", ["None"], ["", "def", "init_distributed", "(", "self", ",", "find_unused_params", ":", "bool", "=", "True", ")", "->", "None", ":", "\n", "        ", "r\"\"\"Initializes distributed training for the model\n\n        1. Broadcasts the model weights from world_rank 0 to all other workers\n        2. Adds gradient hooks to the model\n\n        :param find_unused_params: Whether or not to filter out unused parameters\n                                   before gradient reduction.  This *must* be True if\n                                   there are any parameters in the model that where unused in the\n                                   forward pass, otherwise the gradient reduction\n                                   will not work correctly.\n        \"\"\"", "\n", "# NB: Used to hide the hooks from the nn.Module,", "\n", "# so they don't show up in the state_dict", "\n", "class", "Guard", ":", "# noqa: SIM119", "\n", "            ", "def", "__init__", "(", "self", ",", "model", ",", "device", ")", ":", "\n", "                ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "self", ".", "ddp", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "# type: ignore", "\n", "model", ",", "\n", "device_ids", "=", "[", "device", "]", ",", "\n", "output_device", "=", "device", ",", "\n", "find_unused_parameters", "=", "find_unused_params", ",", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "ddp", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "# type: ignore", "\n", "model", ",", "\n", "find_unused_parameters", "=", "find_unused_params", ",", "\n", ")", "\n", "\n", "", "", "", "self", ".", "_evaluate_actions_wrapper", "=", "Guard", "(", "_EvalActionsWrapper", "(", "self", ".", "actor_critic", ")", ",", "self", ".", "device", ")", "# type: ignore", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.algo.ddppo.DecentralizedDistributedMixin._evaluate_actions": [[107, 115], ["ddppo.DecentralizedDistributedMixin._evaluate_actions_wrapper.ddp"], "methods", ["None"], ["", "def", "_evaluate_actions", "(", "\n", "self", ",", "observations", ",", "rnn_hidden_states", ",", "prev_actions", ",", "masks", ",", "action", "\n", ")", ":", "\n", "        ", "r\"\"\"Internal method that calls Policy.evaluate_actions.  This is used instead of calling\n        that directly so that that call can be overrided with inheritance\n        \"\"\"", "\n", "return", "self", ".", "_evaluate_actions_wrapper", ".", "ddp", "(", "\n", "observations", ",", "rnn_hidden_states", ",", "prev_actions", ",", "masks", ",", "action", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.algo.ddppo.distributed_mean_and_var": [[18, 44], ["torch.distributed.is_initialized", "torch.distributed.get_world_size", "values.mean", "torch.distributed.all_reduce", "torch.distributed.all_reduce"], "function", ["None"], ["def", "distributed_mean_and_var", "(", "\n", "values", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "    ", "r\"\"\"Computes the mean and variances of a tensor over multiple workers.\n\n    This method is equivalent to first collecting all versions of values and\n    then computing the mean and variance locally over that\n\n    :param values: (*,) shaped tensors to compute mean and variance over.  Assumed\n                        to be solely the workers local copy of this tensor,\n                        the resultant mean and variance will be computed\n                        over _all_ workers version of this tensor.\n    \"\"\"", "\n", "assert", "distrib", ".", "is_initialized", "(", ")", ",", "\"Distributed must be initialized\"", "\n", "\n", "world_size", "=", "distrib", ".", "get_world_size", "(", ")", "\n", "\n", "mean", "=", "values", ".", "mean", "(", ")", "\n", "distrib", ".", "all_reduce", "(", "mean", ")", "\n", "mean", "=", "mean", "/", "world_size", "\n", "\n", "var", "=", "(", "values", "-", "mean", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", "\n", "distrib", ".", "all_reduce", "(", "var", ")", "\n", "var", "=", "var", "/", "world_size", "\n", "\n", "return", "mean", ",", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.simple_cnn.SimpleCNN.__init__": [[18, 92], ["torch.nn.Module.__init__", "simple_cnn.SimpleCNN.layer_init", "numpy.array", "torch.nn.Sequential", "zip", "torch.nn.Sequential", "numpy.array", "simple_cnn.SimpleCNN._conv_output_dim", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Flatten", "torch.nn.Linear", "torch.nn.ReLU", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.rnn_state_encoder.RNNStateEncoder.layer_init", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.simple_cnn.SimpleCNN._conv_output_dim"], ["def", "__init__", "(", "\n", "self", ",", "\n", "observation_space", ",", "\n", "output_size", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "\"rgb\"", "in", "observation_space", ".", "spaces", ":", "\n", "            ", "self", ".", "_n_input_rgb", "=", "observation_space", ".", "spaces", "[", "\"rgb\"", "]", ".", "shape", "[", "2", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "_n_input_rgb", "=", "0", "\n", "\n", "", "if", "\"depth\"", "in", "observation_space", ".", "spaces", ":", "\n", "            ", "self", ".", "_n_input_depth", "=", "observation_space", ".", "spaces", "[", "\"depth\"", "]", ".", "shape", "[", "2", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "_n_input_depth", "=", "0", "\n", "\n", "# kernel size for different CNN layers", "\n", "", "self", ".", "_cnn_layers_kernel_size", "=", "[", "(", "8", ",", "8", ")", ",", "(", "4", ",", "4", ")", ",", "(", "3", ",", "3", ")", "]", "\n", "\n", "# strides for different CNN layers", "\n", "self", ".", "_cnn_layers_stride", "=", "[", "(", "4", ",", "4", ")", ",", "(", "2", ",", "2", ")", ",", "(", "1", ",", "1", ")", "]", "\n", "\n", "if", "self", ".", "_n_input_rgb", ">", "0", ":", "\n", "            ", "cnn_dims", "=", "np", ".", "array", "(", "\n", "observation_space", ".", "spaces", "[", "\"rgb\"", "]", ".", "shape", "[", ":", "2", "]", ",", "dtype", "=", "np", ".", "float32", "\n", ")", "\n", "", "elif", "self", ".", "_n_input_depth", ">", "0", ":", "\n", "            ", "cnn_dims", "=", "np", ".", "array", "(", "\n", "observation_space", ".", "spaces", "[", "\"depth\"", "]", ".", "shape", "[", ":", "2", "]", ",", "dtype", "=", "np", ".", "float32", "\n", ")", "\n", "\n", "", "if", "self", ".", "is_blind", ":", "\n", "            ", "self", ".", "cnn", "=", "nn", ".", "Sequential", "(", ")", "\n", "", "else", ":", "\n", "            ", "for", "kernel_size", ",", "stride", "in", "zip", "(", "\n", "self", ".", "_cnn_layers_kernel_size", ",", "self", ".", "_cnn_layers_stride", "\n", ")", ":", "\n", "                ", "cnn_dims", "=", "self", ".", "_conv_output_dim", "(", "\n", "dimension", "=", "cnn_dims", ",", "\n", "padding", "=", "np", ".", "array", "(", "[", "0", ",", "0", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "dilation", "=", "np", ".", "array", "(", "[", "1", ",", "1", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "kernel_size", "=", "np", ".", "array", "(", "kernel_size", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "stride", "=", "np", ".", "array", "(", "stride", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", ")", "\n", "\n", "", "self", ".", "cnn", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "self", ".", "_n_input_rgb", "+", "self", ".", "_n_input_depth", ",", "\n", "out_channels", "=", "32", ",", "\n", "kernel_size", "=", "self", ".", "_cnn_layers_kernel_size", "[", "0", "]", ",", "\n", "stride", "=", "self", ".", "_cnn_layers_stride", "[", "0", "]", ",", "\n", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "32", ",", "\n", "out_channels", "=", "64", ",", "\n", "kernel_size", "=", "self", ".", "_cnn_layers_kernel_size", "[", "1", "]", ",", "\n", "stride", "=", "self", ".", "_cnn_layers_stride", "[", "1", "]", ",", "\n", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "64", ",", "\n", "out_channels", "=", "32", ",", "\n", "kernel_size", "=", "self", ".", "_cnn_layers_kernel_size", "[", "2", "]", ",", "\n", "stride", "=", "self", ".", "_cnn_layers_stride", "[", "2", "]", ",", "\n", ")", ",", "\n", "#  nn.ReLU(True),", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "32", "*", "cnn_dims", "[", "0", "]", "*", "cnn_dims", "[", "1", "]", ",", "output_size", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "", "self", ".", "layer_init", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.simple_cnn.SimpleCNN._conv_output_dim": [[93, 121], ["range", "tuple", "len", "len", "out_dimension.append", "int", "numpy.floor"], "methods", ["None"], ["", "def", "_conv_output_dim", "(", "\n", "self", ",", "dimension", ",", "padding", ",", "dilation", ",", "kernel_size", ",", "stride", "\n", ")", ":", "\n", "        ", "r\"\"\"Calculates the output height and width based on the input\n        height and width to the convolution layer.\n\n        ref: https://pytorch.org/docs/master/nn.html#torch.nn.Conv2d\n        \"\"\"", "\n", "assert", "len", "(", "dimension", ")", "==", "2", "\n", "out_dimension", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "dimension", ")", ")", ":", "\n", "            ", "out_dimension", ".", "append", "(", "\n", "int", "(", "\n", "np", ".", "floor", "(", "\n", "(", "\n", "(", "\n", "dimension", "[", "i", "]", "\n", "+", "2", "*", "padding", "[", "i", "]", "\n", "-", "dilation", "[", "i", "]", "*", "(", "kernel_size", "[", "i", "]", "-", "1", ")", "\n", "-", "1", "\n", ")", "\n", "/", "stride", "[", "i", "]", "\n", ")", "\n", "+", "1", "\n", ")", "\n", ")", "\n", ")", "\n", "", "return", "tuple", "(", "out_dimension", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.simple_cnn.SimpleCNN.layer_init": [[122, 130], ["isinstance", "torch.nn.init.kaiming_normal_", "torch.nn.init.calculate_gain", "torch.nn.init.constant_"], "methods", ["None"], ["", "def", "layer_init", "(", "self", ")", ":", "\n", "        ", "for", "layer", "in", "self", ".", "cnn", ":", "# type: ignore", "\n", "            ", "if", "isinstance", "(", "layer", ",", "(", "nn", ".", "Conv2d", ",", "nn", ".", "Linear", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "\n", "layer", ".", "weight", ",", "nn", ".", "init", ".", "calculate_gain", "(", "\"relu\"", ")", "\n", ")", "\n", "if", "layer", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "layer", ".", "bias", ",", "val", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.simple_cnn.SimpleCNN.is_blind": [[131, 134], ["None"], "methods", ["None"], ["", "", "", "", "@", "property", "\n", "def", "is_blind", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_n_input_rgb", "+", "self", ".", "_n_input_depth", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.simple_cnn.SimpleCNN.forward": [[135, 155], ["torch.cat", "simple_cnn.SimpleCNN.cnn", "rgb_observations.permute.permute.permute", "cnn_input.append", "depth_observations.permute.permute.permute", "cnn_input.append", "rgb_observations.permute.permute.float"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "observations", ":", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ")", ":", "\n", "        ", "cnn_input", "=", "[", "]", "\n", "if", "self", ".", "_n_input_rgb", ">", "0", ":", "\n", "            ", "rgb_observations", "=", "observations", "[", "\"rgb\"", "]", "\n", "# permute tensor to dimension [BATCH x CHANNEL x HEIGHT X WIDTH]", "\n", "rgb_observations", "=", "rgb_observations", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "rgb_observations", "=", "(", "\n", "rgb_observations", ".", "float", "(", ")", "/", "255.0", "\n", ")", "# normalize RGB", "\n", "cnn_input", ".", "append", "(", "rgb_observations", ")", "\n", "\n", "", "if", "self", ".", "_n_input_depth", ">", "0", ":", "\n", "            ", "depth_observations", "=", "observations", "[", "\"depth\"", "]", "\n", "# permute tensor to dimension [BATCH x CHANNEL x HEIGHT X WIDTH]", "\n", "depth_observations", "=", "depth_observations", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "cnn_input", ".", "append", "(", "depth_observations", ")", "\n", "\n", "", "cnn_inputs", "=", "torch", ".", "cat", "(", "cnn_input", ",", "dim", "=", "1", ")", "\n", "\n", "return", "self", ".", "cnn", "(", "cnn_inputs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.rnn_state_encoder.RNNStateEncoder.layer_init": [[270, 276], ["rnn_state_encoder.RNNStateEncoder.rnn.named_parameters", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["def", "layer_init", "(", "self", ")", ":", "\n", "        ", "for", "name", ",", "param", "in", "self", ".", "rnn", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "\"weight\"", "in", "name", ":", "\n", "                ", "nn", ".", "init", ".", "orthogonal_", "(", "param", ")", "\n", "", "elif", "\"bias\"", "in", "name", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "param", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.rnn_state_encoder.RNNStateEncoder.pack_hidden": [[277, 279], ["None"], "methods", ["None"], ["", "", "", "def", "pack_hidden", "(", "self", ",", "hidden_states", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.rnn_state_encoder.RNNStateEncoder.unpack_hidden": [[280, 282], ["None"], "methods", ["None"], ["", "def", "unpack_hidden", "(", "self", ",", "hidden_states", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.rnn_state_encoder.RNNStateEncoder.single_forward": [[283, 299], ["torch.where", "torch.where", "torch.where", "torch.where", "rnn_state_encoder.RNNStateEncoder.rnn", "rnn_state_encoder.RNNStateEncoder.pack_hidden", "x.squeeze.squeeze.squeeze", "masks.view", "rnn_state_encoder.RNNStateEncoder.new_zeros", "x.squeeze.squeeze.unsqueeze", "rnn_state_encoder.RNNStateEncoder.unpack_hidden"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.rnn_state_encoder.LSTMStateEncoder.pack_hidden", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.rnn_state_encoder.LSTMStateEncoder.unpack_hidden"], ["", "def", "single_forward", "(", "\n", "self", ",", "x", ",", "hidden_states", ",", "masks", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "r\"\"\"Forward for a non-sequence input\"\"\"", "\n", "\n", "hidden_states", "=", "torch", ".", "where", "(", "\n", "masks", ".", "view", "(", "1", ",", "-", "1", ",", "1", ")", ",", "hidden_states", ",", "hidden_states", ".", "new_zeros", "(", "(", ")", ")", "\n", ")", "\n", "\n", "x", ",", "hidden_states", "=", "self", ".", "rnn", "(", "\n", "x", ".", "unsqueeze", "(", "0", ")", ",", "self", ".", "unpack_hidden", "(", "hidden_states", ")", "\n", ")", "\n", "hidden_states", "=", "self", ".", "pack_hidden", "(", "hidden_states", ")", "\n", "\n", "x", "=", "x", ".", "squeeze", "(", "0", ")", "\n", "return", "x", ",", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.rnn_state_encoder.RNNStateEncoder.seq_forward": [[300, 336], ["rnn_state_encoder.RNNStateEncoder.size", "rnn_state_encoder.build_rnn_inputs", "rnn_state_encoder.RNNStateEncoder.rnn", "rnn_state_encoder.RNNStateEncoder.pack_hidden", "rnn_state_encoder.build_rnn_out_from_seq", "rnn_state_encoder.RNNStateEncoder.unpack_hidden"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.rnn_state_encoder.build_rnn_inputs", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.rnn_state_encoder.LSTMStateEncoder.pack_hidden", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.rnn_state_encoder.build_rnn_out_from_seq", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.rnn_state_encoder.LSTMStateEncoder.unpack_hidden"], ["", "def", "seq_forward", "(", "\n", "self", ",", "x", ",", "hidden_states", ",", "masks", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "r\"\"\"Forward for a sequence of length T\n\n        Args:\n            x: (T, N, -1) Tensor that has been flattened to (T * N, -1)\n            hidden_states: The starting hidden state.\n            masks: The masks to be applied to hidden state at every timestep.\n                A (T, N) tensor flatten to (T * N)\n        \"\"\"", "\n", "N", "=", "hidden_states", ".", "size", "(", "1", ")", "\n", "\n", "(", "\n", "x_seq", ",", "\n", "hidden_states", ",", "\n", "select_inds", ",", "\n", "rnn_state_batch_inds", ",", "\n", "last_episode_in_batch_mask", ",", "\n", ")", "=", "build_rnn_inputs", "(", "x", ",", "masks", ",", "hidden_states", ")", "\n", "\n", "x_seq", ",", "hidden_states", "=", "self", ".", "rnn", "(", "\n", "x_seq", ",", "self", ".", "unpack_hidden", "(", "hidden_states", ")", "\n", ")", "\n", "hidden_states", "=", "self", ".", "pack_hidden", "(", "hidden_states", ")", "\n", "\n", "x", ",", "hidden_states", "=", "build_rnn_out_from_seq", "(", "\n", "x_seq", ",", "\n", "hidden_states", ",", "\n", "select_inds", ",", "\n", "rnn_state_batch_inds", ",", "\n", "last_episode_in_batch_mask", ",", "\n", "N", ",", "\n", ")", "\n", "\n", "return", "x", ",", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.rnn_state_encoder.RNNStateEncoder.forward": [[337, 349], ["hidden_states.permute.permute.permute", "hidden_states.permute.permute.permute", "x.size", "hidden_states.permute.permute.size", "rnn_state_encoder.RNNStateEncoder.single_forward", "rnn_state_encoder.RNNStateEncoder.seq_forward"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.rnn_state_encoder.RNNStateEncoder.single_forward", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.rnn_state_encoder.RNNStateEncoder.seq_forward"], ["", "def", "forward", "(", "\n", "self", ",", "x", ",", "hidden_states", ",", "masks", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "hidden_states", "=", "hidden_states", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "if", "x", ".", "size", "(", "0", ")", "==", "hidden_states", ".", "size", "(", "1", ")", ":", "\n", "            ", "x", ",", "hidden_states", "=", "self", ".", "single_forward", "(", "x", ",", "hidden_states", ",", "masks", ")", "\n", "", "else", ":", "\n", "            ", "x", ",", "hidden_states", "=", "self", ".", "seq_forward", "(", "x", ",", "hidden_states", ",", "masks", ")", "\n", "\n", "", "hidden_states", "=", "hidden_states", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "\n", "return", "x", ",", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.rnn_state_encoder.LSTMStateEncoder.__init__": [[352, 369], ["torch.Module.__init__", "torch.LSTM", "torch.LSTM", "rnn_state_encoder.LSTMStateEncoder.layer_init"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.rnn_state_encoder.RNNStateEncoder.layer_init"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "input_size", ":", "int", ",", "\n", "hidden_size", ":", "int", ",", "\n", "num_layers", ":", "int", "=", "1", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_recurrent_layers", "=", "num_layers", "*", "2", "\n", "\n", "self", ".", "rnn", "=", "nn", ".", "LSTM", "(", "\n", "input_size", "=", "input_size", ",", "\n", "hidden_size", "=", "hidden_size", ",", "\n", "num_layers", "=", "num_layers", ",", "\n", ")", "\n", "\n", "self", ".", "layer_init", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.rnn_state_encoder.LSTMStateEncoder.pack_hidden": [[370, 374], ["torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "pack_hidden", "(", "\n", "self", ",", "hidden_states", ":", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "torch", ".", "cat", "(", "hidden_states", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.rnn_state_encoder.LSTMStateEncoder.unpack_hidden": [[375, 380], ["torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk"], "methods", ["None"], ["", "def", "unpack_hidden", "(", "\n", "self", ",", "hidden_states", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "lstm_states", "=", "torch", ".", "chunk", "(", "hidden_states", ",", "2", ",", "0", ")", "\n", "return", "(", "lstm_states", "[", "0", "]", ",", "lstm_states", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.rnn_state_encoder.GRUStateEncoder.__init__": [[383, 400], ["torch.Module.__init__", "torch.GRU", "torch.GRU", "rnn_state_encoder.GRUStateEncoder.layer_init"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.rnn_state_encoder.RNNStateEncoder.layer_init"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "input_size", ":", "int", ",", "\n", "hidden_size", ":", "int", ",", "\n", "num_layers", ":", "int", "=", "1", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_recurrent_layers", "=", "num_layers", "\n", "\n", "self", ".", "rnn", "=", "nn", ".", "GRU", "(", "\n", "input_size", "=", "input_size", ",", "\n", "hidden_size", "=", "hidden_size", ",", "\n", "num_layers", "=", "num_layers", ",", "\n", ")", "\n", "\n", "self", ".", "layer_init", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.rnn_state_encoder._invert_permutation": [[14, 22], ["torch.empty_like", "torch.empty_like", "torch.empty_like.scatter_", "torch.arange", "torch.arange", "permutation.numel"], "function", ["None"], ["def", "_invert_permutation", "(", "permutation", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "output", "=", "torch", ".", "empty_like", "(", "permutation", ")", "\n", "output", ".", "scatter_", "(", "\n", "0", ",", "\n", "permutation", ",", "\n", "torch", ".", "arange", "(", "0", ",", "permutation", ".", "numel", "(", ")", ",", "device", "=", "permutation", ".", "device", ")", ",", "\n", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.rnn_state_encoder._build_pack_info_from_dones": [[24, 151], ["dones.view.view", "dones.view.size", "dones.view.clone().detach", "rollout_boundaries.nonzero.nonzero", "torch.sort", "torch.sort", "torch.cat", "torch.cat", "rollout_lengths.index_select.index_select", "torch.sort", "torch.sort", "lengths.to", "episode_starts.index_select.index_select", "torch.empty", "torch.empty", "int", "torch.empty", "torch.empty", "lengths.size", "torch.unique_consecutive", "torch.unique_consecutive", "reversed", "rnn_state_encoder._invert_permutation", "cpu_lengths[].item", "int", "new_inds.numel", "dones.view.clone", "last_len.unsqueeze", "valids.float().sum", "valids.float", "episode_starts[].view", "new_inds.numel", "torch.arange().view", "torch.arange().view", "torch.arange", "torch.arange"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.rnn_state_encoder._invert_permutation"], ["", "def", "_build_pack_info_from_dones", "(", "\n", "dones", ":", "torch", ".", "Tensor", ",", "\n", "T", ":", "int", ",", "\n", ")", "->", "Tuple", "[", "\n", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "\n", "]", ":", "\n", "    ", "r\"\"\"Create the indexing info needed to make the PackedSequence\n    based on the dones.\n\n    PackedSequences are PyTorch's way of supporting a single RNN forward\n    call where each input in the batch can have an arbitrary sequence length\n\n    They work as follows: Given the sequences [c], [x, y, z], [a, b],\n    we generate data [x, a, c, y, b, z] and batch_sizes [3, 2, 1].  The\n    data is a flattened out version of the input sequences (the ordering in\n    data is determined by sequence length).  batch_sizes tells you that\n    for each index, how many sequences have a length of (index + 1) or greater.\n\n    This method will generate the new index ordering such that you can\n    construct the data for a PackedSequence from a (T*N, ...) tensor\n    via x.index_select(0, select_inds)\n    \"\"\"", "\n", "dones", "=", "dones", ".", "view", "(", "T", ",", "-", "1", ")", "\n", "N", "=", "dones", ".", "size", "(", "1", ")", "\n", "\n", "rollout_boundaries", "=", "dones", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "# Force a rollout boundary for t=0.  We will use the", "\n", "# original dones for masking later, so this is fine", "\n", "# and simplifies logic considerably", "\n", "rollout_boundaries", "[", "0", "]", "=", "True", "\n", "rollout_boundaries", "=", "rollout_boundaries", ".", "nonzero", "(", "as_tuple", "=", "False", ")", "\n", "\n", "# The rollout_boundaries[:, 0]*N will make the episode_starts index into", "\n", "# the T*N flattened tensors", "\n", "episode_starts", "=", "rollout_boundaries", "[", ":", ",", "0", "]", "*", "N", "+", "rollout_boundaries", "[", ":", ",", "1", "]", "\n", "\n", "# We need to create a transposed start indexing so we can compute episode lengths", "\n", "# As if we make the starts index into a N*T tensor, then starts[1] - starts[0]", "\n", "# will compute the length of the 0th episode", "\n", "episode_starts_transposed", "=", "(", "\n", "rollout_boundaries", "[", ":", ",", "1", "]", "*", "T", "+", "rollout_boundaries", "[", ":", ",", "0", "]", "\n", ")", "\n", "# Need to sort so the above logic is correct", "\n", "episode_starts_transposed", ",", "sorted_indices", "=", "torch", ".", "sort", "(", "\n", "episode_starts_transposed", ",", "descending", "=", "False", "\n", ")", "\n", "\n", "# Calculate length of episode rollouts", "\n", "rollout_lengths", "=", "(", "\n", "episode_starts_transposed", "[", "1", ":", "]", "-", "episode_starts_transposed", "[", ":", "-", "1", "]", "\n", ")", "\n", "last_len", "=", "N", "*", "T", "-", "episode_starts_transposed", "[", "-", "1", "]", "\n", "rollout_lengths", "=", "torch", ".", "cat", "(", "[", "rollout_lengths", ",", "last_len", ".", "unsqueeze", "(", "0", ")", "]", ")", "\n", "# Undo the sort above", "\n", "rollout_lengths", "=", "rollout_lengths", ".", "index_select", "(", "\n", "0", ",", "_invert_permutation", "(", "sorted_indices", ")", "\n", ")", "\n", "\n", "# Resort in descending order of episode length", "\n", "lengths", ",", "sorted_indices", "=", "torch", ".", "sort", "(", "rollout_lengths", ",", "descending", "=", "True", ")", "\n", "\n", "# We will want these on the CPU for torch.unique_consecutive,", "\n", "# so move now.", "\n", "cpu_lengths", "=", "lengths", ".", "to", "(", "device", "=", "\"cpu\"", ",", "non_blocking", "=", "True", ")", "\n", "\n", "episode_starts", "=", "episode_starts", ".", "index_select", "(", "0", ",", "sorted_indices", ")", "\n", "select_inds", "=", "torch", ".", "empty", "(", "(", "T", "*", "N", ")", ",", "device", "=", "dones", ".", "device", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "\n", "max_length", "=", "int", "(", "cpu_lengths", "[", "0", "]", ".", "item", "(", ")", ")", "\n", "# batch_sizes is *always* on the CPU", "\n", "batch_sizes", "=", "torch", ".", "empty", "(", "(", "max_length", ",", ")", ",", "device", "=", "\"cpu\"", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "offset", "=", "0", "\n", "prev_len", "=", "0", "\n", "num_valid_for_length", "=", "lengths", ".", "size", "(", "0", ")", "\n", "\n", "unique_lengths", "=", "torch", ".", "unique_consecutive", "(", "cpu_lengths", ")", "\n", "# Iterate over all unique lengths in reverse as they sorted", "\n", "# in decreasing order", "\n", "for", "next_len", "in", "reversed", "(", "unique_lengths", ")", ":", "\n", "        ", "valids", "=", "lengths", "[", "0", ":", "num_valid_for_length", "]", ">", "prev_len", "\n", "num_valid_for_length", "=", "int", "(", "valids", ".", "float", "(", ")", ".", "sum", "(", ")", ")", "\n", "\n", "batch_sizes", "[", "prev_len", ":", "next_len", "]", "=", "num_valid_for_length", "\n", "\n", "# Creates this array", "\n", "# [step * N + start for step in range(prev_len, next_len)", "\n", "#                   for start in episode_starts[0:num_valid_for_length]", "\n", "# * N because each step is separated by N elements", "\n", "new_inds", "=", "(", "\n", "torch", ".", "arange", "(", "\n", "prev_len", ",", "next_len", ",", "device", "=", "episode_starts", ".", "device", "\n", ")", ".", "view", "(", "next_len", "-", "prev_len", ",", "1", ")", "\n", "*", "N", "\n", "+", "episode_starts", "[", "0", ":", "num_valid_for_length", "]", ".", "view", "(", "\n", "1", ",", "num_valid_for_length", "\n", ")", "\n", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "select_inds", "[", "offset", ":", "offset", "+", "new_inds", ".", "numel", "(", ")", "]", "=", "new_inds", "\n", "\n", "offset", "+=", "new_inds", ".", "numel", "(", ")", "\n", "\n", "prev_len", "=", "next_len", "\n", "\n", "# Make sure we have an index for all elements", "\n", "", "assert", "offset", "==", "T", "*", "N", "\n", "\n", "# This is used in conjunction with episode_starts to get", "\n", "# the RNN hidden states", "\n", "rnn_state_batch_inds", "=", "episode_starts", "%", "N", "\n", "# This indicates that a given episode is the last one", "\n", "# in that rollout.  In other words, there are N places", "\n", "# where this is True, and for each n, True indicates", "\n", "# that this episode is the last contiguous block of experience,", "\n", "# This is needed for getting the correct hidden states after", "\n", "# the RNN forward pass", "\n", "last_episode_in_batch_mask", "=", "(", "\n", "(", "episode_starts", "+", "(", "lengths", "-", "1", ")", "*", "N", ")", "//", "N", "\n", ")", "==", "(", "T", "-", "1", ")", "\n", "\n", "return", "(", "\n", "select_inds", ",", "\n", "batch_sizes", ",", "\n", "episode_starts", ",", "\n", "rnn_state_batch_inds", ",", "\n", "last_episode_in_batch_mask", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.rnn_state_encoder.build_rnn_inputs": [[154, 223], ["torch.where.size", "torch.logical_not", "torch.logical_not", "rnn_state_encoder._build_pack_info_from_dones", "select_inds.to.to", "episode_starts.to.to", "rnn_state_batch_inds.to.to", "last_episode_in_batch_mask.to.to", "torch.nn.utils.rnn.PackedSequence", "torch.where.index_select", "torch.where", "torch.where", "x.size", "torch.logical_not.detach().to", "x.index_select", "not_dones.view().index_select", "torch.where.new_zeros", "torch.logical_not.detach", "not_dones.view"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.rnn_state_encoder._build_pack_info_from_dones", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to"], ["", "def", "build_rnn_inputs", "(", "\n", "x", ":", "torch", ".", "Tensor", ",", "not_dones", ":", "torch", ".", "Tensor", ",", "rnn_states", ":", "torch", ".", "Tensor", "\n", ")", "->", "Tuple", "[", "\n", "PackedSequence", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "\n", "]", ":", "\n", "    ", "r\"\"\"Create a PackedSequence input for an RNN such that each\n    set of steps that are part of the same episode are all part of\n    a batch in the PackedSequence.\n\n    Use the returned select_inds and build_rnn_out_from_seq to invert this.\n\n    :param x: A (T * N, -1) tensor of the data to build the PackedSequence out of\n    :param not_dones: A (T * N) tensor where not_dones[i] == False indicates an episode is done\n    :param rnn_states: A (-1, N, -1) tensor of the rnn_hidden_states\n\n    :return: tuple(x_seq, rnn_states, select_inds, rnn_state_batch_inds, last_episode_in_batch_mask)\n        WHERE\n        x_seq is the PackedSequence version of x to pass to the RNN\n\n        rnn_states are the corresponding rnn state\n\n        select_inds can be passed to build_rnn_out_from_seq to retrieve the\n            RNN output\n\n        rnn_state_batch_inds indicates which of the rollouts in the batch a hidden\n            state came from/is for\n\n        last_episode_in_batch_mask indicates if an episode is the last in that batch.\n            There will be exactly N places where this is True\n\n    \"\"\"", "\n", "\n", "N", "=", "rnn_states", ".", "size", "(", "1", ")", "\n", "T", "=", "x", ".", "size", "(", "0", ")", "//", "N", "\n", "dones", "=", "torch", ".", "logical_not", "(", "not_dones", ")", "\n", "\n", "(", "\n", "select_inds", ",", "\n", "batch_sizes", ",", "\n", "episode_starts", ",", "\n", "rnn_state_batch_inds", ",", "\n", "last_episode_in_batch_mask", ",", "\n", ")", "=", "_build_pack_info_from_dones", "(", "dones", ".", "detach", "(", ")", ".", "to", "(", "device", "=", "\"cpu\"", ")", ",", "T", ")", "\n", "\n", "select_inds", "=", "select_inds", ".", "to", "(", "device", "=", "x", ".", "device", ")", "\n", "episode_starts", "=", "episode_starts", ".", "to", "(", "device", "=", "x", ".", "device", ")", "\n", "rnn_state_batch_inds", "=", "rnn_state_batch_inds", ".", "to", "(", "device", "=", "x", ".", "device", ")", "\n", "last_episode_in_batch_mask", "=", "last_episode_in_batch_mask", ".", "to", "(", "device", "=", "x", ".", "device", ")", "\n", "\n", "x_seq", "=", "PackedSequence", "(", "\n", "x", ".", "index_select", "(", "0", ",", "select_inds", ")", ",", "batch_sizes", ",", "None", ",", "None", "\n", ")", "\n", "\n", "# Just select the rnn_states by batch index, the masking bellow will set things", "\n", "# to zero in the correct locations", "\n", "rnn_states", "=", "rnn_states", ".", "index_select", "(", "1", ",", "rnn_state_batch_inds", ")", "\n", "# Now zero things out in the correct locations", "\n", "rnn_states", "=", "torch", ".", "where", "(", "\n", "not_dones", ".", "view", "(", "1", ",", "-", "1", ",", "1", ")", ".", "index_select", "(", "1", ",", "episode_starts", ")", ",", "\n", "rnn_states", ",", "\n", "rnn_states", ".", "new_zeros", "(", "(", ")", ")", ",", "\n", ")", "\n", "\n", "return", "(", "\n", "x_seq", ",", "\n", "rnn_states", ",", "\n", "select_inds", ",", "\n", "rnn_state_batch_inds", ",", "\n", "last_episode_in_batch_mask", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.rnn_state_encoder.build_rnn_out_from_seq": [[226, 259], ["x_seq.data.index_select", "torch.masked_select().view", "torch.masked_select().view", "torch.empty_like", "torch.empty_like", "torch.masked_select().view().expand_as", "torch.masked_select().view().expand_as", "torch.empty_like.scatter_", "rnn_state_encoder._invert_permutation", "hidden_states.size", "hidden_states.size", "torch.masked_select", "torch.masked_select", "torch.masked_select().view", "torch.masked_select().view", "last_episode_in_batch_mask.view", "hidden_states.size", "torch.masked_select", "torch.masked_select"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.rnn_state_encoder._invert_permutation", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size"], ["", "def", "build_rnn_out_from_seq", "(", "\n", "x_seq", ":", "PackedSequence", ",", "\n", "hidden_states", ",", "\n", "select_inds", ",", "\n", "rnn_state_batch_inds", ",", "\n", "last_episode_in_batch_mask", ",", "\n", "N", ":", "int", ",", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "    ", "r\"\"\"Construct the output of the rnn from a packed sequence returned by\n        forward propping an RNN on the packed sequence returned by :ref:`build_rnn_inputs`.\n\n    :param x_seq: The packed sequence output from the rnn\n    :param hidden_statess: The hidden states output from the rnn\n    :param select_inds: Returned from :ref:`build_rnn_inputs`\n    :param rnn_state_batch_inds: Returned from :ref:`build_rnn_inputs`\n    :param last_episode_in_batch_mask: Returned from :ref:`build_rnn_inputs`\n    :param N: The number of simulator instances in the batch of experience.\n    \"\"\"", "\n", "x", "=", "x_seq", ".", "data", ".", "index_select", "(", "0", ",", "_invert_permutation", "(", "select_inds", ")", ")", "\n", "\n", "last_hidden_states", "=", "torch", ".", "masked_select", "(", "\n", "hidden_states", ",", "\n", "last_episode_in_batch_mask", ".", "view", "(", "1", ",", "hidden_states", ".", "size", "(", "1", ")", ",", "1", ")", ",", "\n", ")", ".", "view", "(", "hidden_states", ".", "size", "(", "0", ")", ",", "N", ",", "hidden_states", ".", "size", "(", "2", ")", ")", "\n", "output_hidden_states", "=", "torch", ".", "empty_like", "(", "last_hidden_states", ")", "\n", "scatter_inds", "=", "(", "\n", "torch", ".", "masked_select", "(", "rnn_state_batch_inds", ",", "last_episode_in_batch_mask", ")", "\n", ".", "view", "(", "1", ",", "N", ",", "1", ")", "\n", ".", "expand_as", "(", "output_hidden_states", ")", "\n", ")", "\n", "output_hidden_states", ".", "scatter_", "(", "1", ",", "scatter_inds", ",", "last_hidden_states", ")", "\n", "\n", "return", "x", ",", "output_hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.rnn_state_encoder.build_rnn_state_encoder": [[402, 423], ["rnn_type.lower.lower", "rnn_state_encoder.GRUStateEncoder", "rnn_state_encoder.LSTMStateEncoder", "RuntimeError"], "function", ["None"], ["", "", "def", "build_rnn_state_encoder", "(", "\n", "input_size", ":", "int", ",", "\n", "hidden_size", ":", "int", ",", "\n", "rnn_type", ":", "str", "=", "\"GRU\"", ",", "\n", "num_layers", ":", "int", "=", "1", ",", "\n", ")", ":", "\n", "    ", "r\"\"\"Factory for :ref:`RNNStateEncoder`.  Returns one with either a GRU or LSTM based on\n        the specified RNN type.\n\n    :param input_size: The input size of the RNN\n    :param hidden_size: The hidden dimension of the RNN\n    :param rnn_types: The type of the RNN cell.  Can either be GRU or LSTM\n    :param num_layers: The number of RNN layers.\n    \"\"\"", "\n", "rnn_type", "=", "rnn_type", ".", "lower", "(", ")", "\n", "if", "rnn_type", "==", "\"gru\"", ":", "\n", "        ", "return", "GRUStateEncoder", "(", "input_size", ",", "hidden_size", ",", "num_layers", ")", "\n", "", "elif", "rnn_type", "==", "\"lstm\"", ":", "\n", "        ", "return", "LSTMStateEncoder", "(", "input_size", ",", "hidden_size", ",", "num_layers", ")", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "f\"Did not recognize rnn type '{rnn_type}'\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.models.MultitaskCNN.__init__": [[45, 131], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "models.MultitaskCNN.modules", "habitat.logger.info", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "models.MultitaskCNN.load_state_dict", "isinstance", "models.MultitaskCNN.parameters", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.load", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.load", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.load", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.load", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.load", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.load", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.load", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.load", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.load", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.nn_skill.NnSkillPolicy.parameters"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "num_classes", ":", "int", "=", "41", ",", "\n", "only_encoder", ":", "bool", "=", "False", ",", "\n", "pretrained", ":", "bool", "=", "True", ",", "\n", "checkpoint_path", ":", "str", "=", "\"data/eqa/eqa_cnn_pretrain/checkpoints/epoch_5.ckpt\"", ",", "\n", "freeze_encoder", ":", "bool", "=", "False", ",", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "MultitaskCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "only_encoder", "=", "only_encoder", "\n", "\n", "self", ".", "conv_block1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "8", ",", "5", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "8", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", ")", "\n", "self", ".", "conv_block2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "8", ",", "16", ",", "5", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "16", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", ")", "\n", "self", ".", "conv_block3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "16", ",", "32", ",", "5", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", ")", "\n", "self", ".", "conv_block4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "5", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "32", ",", "512", ",", "5", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout2d", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout2d", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "encoder_seg", "=", "nn", ".", "Conv2d", "(", "512", ",", "self", ".", "num_classes", ",", "1", ")", "\n", "self", ".", "encoder_depth", "=", "nn", ".", "Conv2d", "(", "512", ",", "1", ",", "1", ")", "\n", "self", ".", "encoder_ae", "=", "nn", ".", "Conv2d", "(", "512", ",", "3", ",", "1", ")", "\n", "\n", "self", ".", "score_pool2_seg", "=", "nn", ".", "Conv2d", "(", "16", ",", "self", ".", "num_classes", ",", "1", ")", "\n", "self", ".", "score_pool3_seg", "=", "nn", ".", "Conv2d", "(", "32", ",", "self", ".", "num_classes", ",", "1", ")", "\n", "\n", "self", ".", "score_pool2_depth", "=", "nn", ".", "Conv2d", "(", "16", ",", "1", ",", "1", ")", "\n", "self", ".", "score_pool3_depth", "=", "nn", ".", "Conv2d", "(", "32", ",", "1", ",", "1", ")", "\n", "\n", "self", ".", "score_pool2_ae", "=", "nn", ".", "Conv2d", "(", "16", ",", "3", ",", "1", ")", "\n", "self", ".", "score_pool3_ae", "=", "nn", ".", "Conv2d", "(", "32", ",", "3", ",", "1", ")", "\n", "\n", "if", "self", ".", "only_encoder", ":", "\n", "            ", "if", "pretrained", ":", "\n", "                ", "logger", ".", "info", "(", "\n", "\"Loading CNN weights from {}\"", ".", "format", "(", "checkpoint_path", ")", "\n", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "\n", "checkpoint_path", ",", "map_location", "=", "{", "\"cuda:0\"", ":", "\"cpu\"", "}", "\n", ")", "\n", "self", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "\n", "if", "freeze_encoder", ":", "\n", "                    ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                        ", "param", ".", "requires_grad", "=", "False", "\n", "", "", "", "", "else", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                    ", "n", "=", "(", "\n", "m", ".", "kernel_size", "[", "0", "]", "\n", "*", "m", ".", "kernel_size", "[", "1", "]", "\n", "*", "(", "m", ".", "out_channels", "+", "m", ".", "in_channels", ")", "\n", ")", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.models.MultitaskCNN.forward": [[132, 215], ["models.MultitaskCNN.conv_block1", "models.MultitaskCNN.conv_block2", "models.MultitaskCNN.conv_block3", "models.MultitaskCNN.conv_block4", "models.MultitaskCNN.classifier", "models.MultitaskCNN.encoder_seg", "models.MultitaskCNN.encoder_depth", "models.MultitaskCNN.encoder_ae", "models.MultitaskCNN.score_pool2_seg", "models.MultitaskCNN.score_pool3_seg", "models.MultitaskCNN.score_pool2_depth", "models.MultitaskCNN.score_pool3_depth", "models.MultitaskCNN.score_pool2_ae", "models.MultitaskCNN.score_pool3_ae", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "models.MultitaskCNN.view", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "models.MultitaskCNN.size", "models.MultitaskCNN.size", "x.size", "models.MultitaskCNN.size", "models.MultitaskCNN.size", "models.MultitaskCNN.size", "models.MultitaskCNN.size", "x.size", "x.size"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tuple", "[", "Tensor", ",", "Tensor", ",", "Tensor", "]", ":", "\n", "        ", "conv1", "=", "self", ".", "conv_block1", "(", "x", ")", "\n", "conv2", "=", "self", ".", "conv_block2", "(", "conv1", ")", "\n", "conv3", "=", "self", ".", "conv_block3", "(", "conv2", ")", "\n", "conv4", "=", "self", ".", "conv_block4", "(", "conv3", ")", "\n", "\n", "if", "self", ".", "only_encoder", ":", "\n", "            ", "return", "conv4", ".", "view", "(", "-", "1", ",", "32", "*", "12", "*", "12", ")", "\n", "\n", "", "encoder_output", "=", "self", ".", "classifier", "(", "conv4", ")", "\n", "\n", "encoder_output_seg", "=", "self", ".", "encoder_seg", "(", "encoder_output", ")", "\n", "encoder_output_depth", "=", "self", ".", "encoder_depth", "(", "encoder_output", ")", "\n", "encoder_output_ae", "=", "self", ".", "encoder_ae", "(", "encoder_output", ")", "\n", "\n", "score_pool2_seg", "=", "self", ".", "score_pool2_seg", "(", "conv2", ")", "\n", "score_pool3_seg", "=", "self", ".", "score_pool3_seg", "(", "conv3", ")", "\n", "\n", "score_pool2_depth", "=", "self", ".", "score_pool2_depth", "(", "conv2", ")", "\n", "score_pool3_depth", "=", "self", ".", "score_pool3_depth", "(", "conv3", ")", "\n", "\n", "score_pool2_ae", "=", "self", ".", "score_pool2_ae", "(", "conv2", ")", "\n", "score_pool3_ae", "=", "self", ".", "score_pool3_ae", "(", "conv3", ")", "\n", "\n", "score_seg", "=", "F", ".", "interpolate", "(", "\n", "encoder_output_seg", ",", "\n", "score_pool3_seg", ".", "size", "(", ")", "[", "2", ":", "]", ",", "\n", "mode", "=", "\"bilinear\"", ",", "\n", "align_corners", "=", "True", ",", "\n", ")", "\n", "score_seg", "+=", "score_pool3_seg", "\n", "score_seg", "=", "F", ".", "interpolate", "(", "\n", "score_seg", ",", "\n", "score_pool2_seg", ".", "size", "(", ")", "[", "2", ":", "]", ",", "\n", "mode", "=", "\"bilinear\"", ",", "\n", "align_corners", "=", "True", ",", "\n", ")", "\n", "score_seg", "+=", "score_pool2_seg", "\n", "out_seg", "=", "F", ".", "interpolate", "(", "\n", "score_seg", ",", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", "\n", ")", "\n", "\n", "score_depth", "=", "F", ".", "interpolate", "(", "\n", "encoder_output_depth", ",", "\n", "score_pool3_depth", ".", "size", "(", ")", "[", "2", ":", "]", ",", "\n", "mode", "=", "\"bilinear\"", ",", "\n", "align_corners", "=", "True", ",", "\n", ")", "\n", "score_depth", "+=", "score_pool3_depth", "\n", "score_depth", "=", "F", ".", "interpolate", "(", "\n", "score_depth", ",", "\n", "score_pool2_depth", ".", "size", "(", ")", "[", "2", ":", "]", ",", "\n", "mode", "=", "\"bilinear\"", ",", "\n", "align_corners", "=", "True", ",", "\n", ")", "\n", "score_depth", "+=", "score_pool2_depth", "\n", "out_depth", "=", "torch", ".", "sigmoid", "(", "\n", "F", ".", "interpolate", "(", "\n", "score_depth", ",", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", "\n", ")", "\n", ")", "\n", "\n", "score_ae", "=", "F", ".", "interpolate", "(", "\n", "encoder_output_ae", ",", "\n", "score_pool3_ae", ".", "size", "(", ")", "[", "2", ":", "]", ",", "\n", "mode", "=", "\"bilinear\"", ",", "\n", "align_corners", "=", "True", ",", "\n", ")", "\n", "score_ae", "+=", "score_pool3_ae", "\n", "score_ae", "=", "F", ".", "interpolate", "(", "\n", "score_ae", ",", "\n", "score_pool2_ae", ".", "size", "(", ")", "[", "2", ":", "]", ",", "\n", "mode", "=", "\"bilinear\"", ",", "\n", "align_corners", "=", "True", ",", "\n", ")", "\n", "score_ae", "+=", "score_pool2_ae", "\n", "out_ae", "=", "torch", ".", "sigmoid", "(", "\n", "F", ".", "interpolate", "(", "\n", "score_ae", ",", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", "\n", ")", "\n", ")", "\n", "\n", "return", "out_seg", ",", "out_depth", ",", "out_ae", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.models.QuestionLstmEncoder.__init__": [[218, 243], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.LSTM", "torch.LSTM", "torch.LSTM", "models.QuestionLstmEncoder.init_weights", "len"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.models.QuestionLstmEncoder.init_weights"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "token_to_idx", ":", "Dict", ",", "\n", "wordvec_dim", ":", "int", "=", "64", ",", "\n", "rnn_dim", ":", "int", "=", "64", ",", "\n", "rnn_num_layers", ":", "int", "=", "2", ",", "\n", "rnn_dropout", ":", "float", "=", "0", ",", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "QuestionLstmEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "token_to_idx", "=", "token_to_idx", "\n", "self", ".", "NULL", "=", "token_to_idx", "[", "\"<pad>\"", "]", "\n", "self", ".", "START", "=", "token_to_idx", "[", "\"<s>\"", "]", "\n", "self", ".", "END", "=", "token_to_idx", "[", "\"</s>\"", "]", "\n", "\n", "self", ".", "embed", "=", "nn", ".", "Embedding", "(", "len", "(", "token_to_idx", ")", ",", "wordvec_dim", ")", "\n", "self", ".", "rnn", "=", "nn", ".", "LSTM", "(", "\n", "wordvec_dim", ",", "\n", "rnn_dim", ",", "\n", "rnn_num_layers", ",", "\n", "dropout", "=", "rnn_dropout", ",", "\n", "batch_first", "=", "True", ",", "\n", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.models.QuestionLstmEncoder.init_weights": [[244, 247], ["models.QuestionLstmEncoder.embed.weight.data.uniform_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", "->", "None", ":", "\n", "        ", "initrange", "=", "0.1", "\n", "self", ".", "embed", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "initrange", ",", "initrange", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.models.QuestionLstmEncoder.forward": [[248, 262], ["x.size", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "idx.view().expand.view().expand.type_as().long", "models.QuestionLstmEncoder.rnn", "idx.view().expand.view().expand.view().expand", "hs.size", "hs.gather().view", "models.QuestionLstmEncoder.embed", "hs.size", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "idx.view().expand.view().expand.type_as", "x.long", "idx.view().expand.view().expand.view", "hs.gather"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "N", ",", "T", "=", "x", ".", "size", "(", ")", "\n", "idx", "=", "torch", ".", "LongTensor", "(", "N", ")", ".", "fill_", "(", "T", "-", "1", ")", "\n", "\n", "# Find the last non-null element in each sequence", "\n", "idx", "=", "(", "x", "!=", "self", ".", "NULL", ")", ".", "long", "(", ")", ".", "sum", "(", "-", "1", ")", "-", "1", "\n", "idx", "=", "idx", ".", "type_as", "(", "x", ".", "data", ")", ".", "long", "(", ")", "\n", "idx", ".", "requires_grad", "=", "False", "\n", "\n", "hs", ",", "_", "=", "self", ".", "rnn", "(", "self", ".", "embed", "(", "x", ".", "long", "(", ")", ")", ")", "\n", "\n", "idx", "=", "idx", ".", "view", "(", "N", ",", "1", ",", "1", ")", ".", "expand", "(", "N", ",", "1", ",", "hs", ".", "size", "(", "2", ")", ")", "\n", "H", "=", "hs", ".", "size", "(", "2", ")", "\n", "return", "hs", ".", "gather", "(", "1", ",", "idx", ")", ".", "view", "(", "N", ",", "H", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.models.VqaLstmCnnAttentionModel.__init__": [[265, 319], ["torch.Module.__init__", "models.MultitaskCNN", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.QuestionLstmEncoder", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.build_mlp", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "len", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.models.build_mlp"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "q_vocab", ":", "Dict", ",", "\n", "ans_vocab", ":", "Dict", ",", "\n", "eqa_cnn_pretrain_ckpt_path", ":", "str", ",", "\n", "freeze_encoder", ":", "bool", "=", "False", ",", "\n", "image_feat_dim", ":", "int", "=", "64", ",", "\n", "question_wordvec_dim", ":", "int", "=", "64", ",", "\n", "question_hidden_dim", ":", "int", "=", "64", ",", "\n", "question_num_layers", ":", "int", "=", "2", ",", "\n", "question_dropout", ":", "float", "=", "0.5", ",", "\n", "fc_use_batchnorm", ":", "bool", "=", "False", ",", "\n", "fc_dropout", ":", "float", "=", "0.5", ",", "\n", "fc_dims", ":", "Iterable", "[", "int", "]", "=", "(", "64", ",", ")", ",", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "VqaLstmCnnAttentionModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "cnn_kwargs", "=", "{", "\n", "\"num_classes\"", ":", "41", ",", "\n", "\"only_encoder\"", ":", "True", ",", "\n", "\"pretrained\"", ":", "True", ",", "\n", "\"checkpoint_path\"", ":", "eqa_cnn_pretrain_ckpt_path", ",", "\n", "\"freeze_encoder\"", ":", "freeze_encoder", ",", "\n", "}", "\n", "self", ".", "cnn", "=", "MultitaskCNN", "(", "**", "cnn_kwargs", ")", "# type:ignore", "\n", "self", ".", "cnn_fc_layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "32", "*", "12", "*", "12", ",", "64", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "\n", ")", "\n", "\n", "q_rnn_kwargs", "=", "{", "\n", "\"token_to_idx\"", ":", "q_vocab", ",", "\n", "\"wordvec_dim\"", ":", "question_wordvec_dim", ",", "\n", "\"rnn_dim\"", ":", "question_hidden_dim", ",", "\n", "\"rnn_num_layers\"", ":", "question_num_layers", ",", "\n", "\"rnn_dropout\"", ":", "question_dropout", ",", "\n", "}", "\n", "self", ".", "q_rnn", "=", "QuestionLstmEncoder", "(", "**", "q_rnn_kwargs", ")", "# type:ignore", "\n", "\n", "self", ".", "img_tr", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "64", ",", "64", ")", ",", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", ")", "\n", "\n", "self", ".", "ques_tr", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "64", ",", "64", ")", ",", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", ")", "\n", "\n", "classifier_kwargs", "=", "{", "# type:ignore", "\n", "\"input_dim\"", ":", "64", ",", "\n", "\"hidden_dims\"", ":", "fc_dims", ",", "\n", "\"output_dim\"", ":", "len", "(", "ans_vocab", ")", ",", "\n", "\"use_batchnorm\"", ":", "True", ",", "\n", "\"dropout\"", ":", "fc_dropout", ",", "\n", "\"add_sigmoid\"", ":", "False", ",", "\n", "}", "\n", "self", ".", "classifier", "=", "build_mlp", "(", "**", "classifier_kwargs", ")", "# type:ignore", "\n", "\n", "self", ".", "att", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Tanh", "(", ")", ",", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", ",", "nn", ".", "Linear", "(", "128", ",", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.models.VqaLstmCnnAttentionModel.forward": [[321, 357], ["images.size", "models.VqaLstmCnnAttentionModel.cnn", "models.VqaLstmCnnAttentionModel.cnn_fc_layer", "models.VqaLstmCnnAttentionModel.img_tr", "models.VqaLstmCnnAttentionModel.q_rnn", "models.VqaLstmCnnAttentionModel.view().repeat", "ques_feats_repl.view.view.view", "models.VqaLstmCnnAttentionModel.ques_tr", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.VqaLstmCnnAttentionModel.att", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax.view().repeat", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "models.VqaLstmCnnAttentionModel.classifier", "images.contiguous().view", "models.VqaLstmCnnAttentionModel.view", "models.VqaLstmCnnAttentionModel.view", "images.size", "images.size", "images.size", "models.VqaLstmCnnAttentionModel.view", "torch.softmax.view", "images.contiguous"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size"], ["", "def", "forward", "(", "\n", "self", ",", "images", ":", "Tensor", ",", "questions", ":", "Tensor", "\n", ")", "->", "Tuple", "[", "Tensor", ",", "Tensor", "]", ":", "\n", "\n", "        ", "N", ",", "T", ",", "_", ",", "_", ",", "_", "=", "images", ".", "size", "(", ")", "\n", "# bs x 5 x 3 x 256 x 256", "\n", "img_feats", "=", "self", ".", "cnn", "(", "\n", "images", ".", "contiguous", "(", ")", ".", "view", "(", "\n", "-", "1", ",", "images", ".", "size", "(", "2", ")", ",", "images", ".", "size", "(", "3", ")", ",", "images", ".", "size", "(", "4", ")", "\n", ")", "\n", ")", "\n", "\n", "img_feats", "=", "self", ".", "cnn_fc_layer", "(", "img_feats", ")", "\n", "\n", "img_feats_tr", "=", "self", ".", "img_tr", "(", "img_feats", ")", "\n", "ques_feats", "=", "self", ".", "q_rnn", "(", "questions", ")", "\n", "\n", "ques_feats_repl", "=", "ques_feats", ".", "view", "(", "N", ",", "1", ",", "-", "1", ")", ".", "repeat", "(", "1", ",", "T", ",", "1", ")", "\n", "ques_feats_repl", "=", "ques_feats_repl", ".", "view", "(", "N", "*", "T", ",", "-", "1", ")", "\n", "\n", "ques_feats_tr", "=", "self", ".", "ques_tr", "(", "ques_feats_repl", ")", "\n", "\n", "ques_img_feats", "=", "torch", ".", "cat", "(", "[", "ques_feats_tr", ",", "img_feats_tr", "]", ",", "1", ")", "\n", "\n", "att_feats", "=", "self", ".", "att", "(", "ques_img_feats", ")", "\n", "att_probs", "=", "F", ".", "softmax", "(", "att_feats", ".", "view", "(", "N", ",", "T", ")", ",", "dim", "=", "1", ")", "\n", "att_probs2", "=", "att_probs", ".", "view", "(", "N", ",", "T", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "64", ")", "\n", "\n", "att_img_feats", "=", "torch", ".", "mul", "(", "att_probs2", ",", "img_feats", ".", "view", "(", "N", ",", "T", ",", "64", ")", ")", "\n", "att_img_feats", "=", "torch", ".", "sum", "(", "att_img_feats", ",", "dim", "=", "1", ")", "\n", "\n", "mul_feats", "=", "torch", ".", "mul", "(", "ques_feats", ",", "att_img_feats", ")", "\n", "\n", "scores", "=", "self", ".", "classifier", "(", "mul_feats", ")", "\n", "\n", "return", "scores", ",", "att_probs", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.models.MaskedNLLCriterion.__init__": [[360, 362], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ")", "->", "None", ":", "\n", "        ", "super", "(", "MaskedNLLCriterion", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.models.MaskedNLLCriterion.forward": [[363, 368], ["torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "target.long", "mask.float().sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "mask.float"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ":", "Tensor", ",", "target", ":", "Tensor", ",", "mask", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "logprob_select", "=", "torch", ".", "gather", "(", "inp", ",", "1", ",", "target", ".", "long", "(", ")", ")", "\n", "out", "=", "torch", ".", "masked_select", "(", "logprob_select", ",", "mask", ")", "\n", "loss", "=", "-", "torch", ".", "sum", "(", "out", ")", "/", "mask", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.models.NavPlannerControllerModel.__init__": [[371, 433], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.QuestionLstmEncoder", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.NavRnn", "models.build_mlp", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.models.build_mlp"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "q_vocab", ":", "Dict", ",", "\n", "num_output", ":", "int", "=", "4", ",", "\n", "question_wordvec_dim", ":", "int", "=", "64", ",", "\n", "question_hidden_dim", ":", "int", "=", "64", ",", "\n", "question_num_layers", ":", "int", "=", "2", ",", "\n", "question_dropout", ":", "float", "=", "0.5", ",", "\n", "planner_rnn_image_feat_dim", ":", "int", "=", "128", ",", "\n", "planner_rnn_action_embed_dim", ":", "int", "=", "32", ",", "\n", "planner_rnn_type", ":", "str", "=", "\"GRU\"", ",", "\n", "planner_rnn_hidden_dim", ":", "int", "=", "1024", ",", "\n", "planner_rnn_num_layers", ":", "int", "=", "1", ",", "\n", "planner_rnn_dropout", ":", "float", "=", "0", ",", "\n", "controller_fc_dims", ":", "Iterable", "[", "int", "]", "=", "(", "256", ",", ")", ",", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "NavPlannerControllerModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "cnn_fc_layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "32", "*", "12", "*", "12", ",", "planner_rnn_image_feat_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", ",", "\n", ")", "\n", "\n", "q_rnn_kwargs", "=", "{", "\n", "\"token_to_idx\"", ":", "q_vocab", ",", "\n", "\"wordvec_dim\"", ":", "question_wordvec_dim", ",", "\n", "\"rnn_dim\"", ":", "question_hidden_dim", ",", "\n", "\"rnn_num_layers\"", ":", "question_num_layers", ",", "\n", "\"rnn_dropout\"", ":", "question_dropout", ",", "\n", "}", "\n", "self", ".", "q_rnn", "=", "QuestionLstmEncoder", "(", "**", "q_rnn_kwargs", ")", "# type:ignore", "\n", "self", ".", "ques_tr", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "question_hidden_dim", ",", "question_hidden_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", ",", "\n", ")", "\n", "\n", "self", ".", "planner_nav_rnn", "=", "NavRnn", "(", "\n", "image_input", "=", "True", ",", "\n", "image_feat_dim", "=", "planner_rnn_image_feat_dim", ",", "\n", "question_input", "=", "True", ",", "\n", "question_embed_dim", "=", "question_hidden_dim", ",", "\n", "action_input", "=", "True", ",", "\n", "action_embed_dim", "=", "planner_rnn_action_embed_dim", ",", "\n", "num_actions", "=", "num_output", ",", "\n", "rnn_type", "=", "planner_rnn_type", ",", "\n", "rnn_hidden_dim", "=", "planner_rnn_hidden_dim", ",", "\n", "rnn_num_layers", "=", "planner_rnn_num_layers", ",", "\n", "rnn_dropout", "=", "planner_rnn_dropout", ",", "\n", "return_states", "=", "True", ",", "\n", ")", "\n", "\n", "controller_kwargs", "=", "{", "\n", "\"input_dim\"", ":", "planner_rnn_image_feat_dim", "\n", "+", "planner_rnn_action_embed_dim", "\n", "+", "planner_rnn_hidden_dim", ",", "\n", "\"hidden_dims\"", ":", "controller_fc_dims", ",", "\n", "\"output_dim\"", ":", "2", ",", "\n", "\"add_sigmoid\"", ":", "0", ",", "\n", "}", "\n", "self", ".", "controller", "=", "build_mlp", "(", "**", "controller_kwargs", ")", "# type:ignore", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.models.NavPlannerControllerModel.forward": [[434, 507], ["models.NavPlannerControllerModel.size", "models.NavPlannerControllerModel.cnn_fc_layer", "models.NavPlannerControllerModel.cnn_fc_layer", "models.NavPlannerControllerModel.q_rnn", "models.NavPlannerControllerModel.ques_tr", "models.NavPlannerControllerModel.planner_nav_rnn", "controller_img_feats.contiguous().view.contiguous().view.size", "planner_hidden_index.contiguous().view().repeat.contiguous().view().repeat.contiguous().view().repeat", "planner_states.gather", "controller_hidden_in.view.view.view", "controller_img_feats.contiguous().view.contiguous().view.contiguous().view", "models.NavPlannerControllerModel.planner_nav_rnn.action_embed().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.NavPlannerControllerModel.controller", "planner_hidden_index.contiguous().view().repeat.contiguous().view().repeat.max().item", "planner_states.size", "planner_states.size", "planner_hidden_index.contiguous().view().repeat.contiguous().view().repeat.long", "controller_hidden_in.view.view.size", "planner_hidden_index.contiguous().view().repeat.contiguous().view().repeat.contiguous().view", "controller_img_feats.contiguous().view.contiguous().view.contiguous", "models.NavPlannerControllerModel.planner_nav_rnn.action_embed", "controller_action_lengths.max", "controller_action_lengths.max", "controller_action_lengths.max", "planner_hidden_index.contiguous().view().repeat.contiguous().view().repeat.max", "planner_hidden_index.contiguous().view().repeat.contiguous().view().repeat.size", "controller_actions_in.long", "planner_hidden_index.contiguous().view().repeat.contiguous().view().repeat.contiguous"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "questions", ":", "Tensor", ",", "\n", "planner_img_feats", ":", "Tensor", ",", "\n", "planner_actions_in", ":", "Tensor", ",", "\n", "planner_action_lengths", ":", "Tensor", ",", "\n", "planner_hidden_index", ":", "Tensor", ",", "\n", "controller_img_feats", ":", "Tensor", ",", "\n", "controller_actions_in", ":", "Tensor", ",", "\n", "controller_action_lengths", ":", "Tensor", ",", "\n", ")", "->", "Tuple", "[", "Tensor", ",", "Tensor", ",", "Tensor", "]", ":", "\n", "\n", "        ", "N_p", ",", "T_p", ",", "_", "=", "planner_img_feats", ".", "size", "(", ")", "\n", "\n", "planner_img_feats", "=", "self", ".", "cnn_fc_layer", "(", "planner_img_feats", ")", "\n", "controller_img_feats", "=", "self", ".", "cnn_fc_layer", "(", "controller_img_feats", ")", "\n", "\n", "ques_feats", "=", "self", ".", "q_rnn", "(", "questions", ")", "\n", "ques_feats", "=", "self", ".", "ques_tr", "(", "ques_feats", ")", "\n", "\n", "planner_states", ",", "planner_scores", ",", "planner_hidden", "=", "self", ".", "planner_nav_rnn", "(", "\n", "planner_img_feats", ",", "\n", "ques_feats", ",", "\n", "planner_actions_in", ",", "\n", "planner_action_lengths", ",", "\n", ")", "\n", "\n", "planner_hidden_index", "=", "planner_hidden_index", "[", "\n", ":", ",", ":", "controller_action_lengths", ".", "max", "(", ")", "# type:ignore", "\n", "]", "\n", "controller_img_feats", "=", "controller_img_feats", "[", "\n", ":", ",", ":", "controller_action_lengths", ".", "max", "(", ")", "# type:ignore", "\n", "]", "\n", "controller_actions_in", "=", "controller_actions_in", "[", "\n", ":", ",", ":", "controller_action_lengths", ".", "max", "(", ")", "# type:ignore", "\n", "]", "\n", "\n", "N_c", ",", "T_c", ",", "_", "=", "controller_img_feats", ".", "size", "(", ")", "\n", "\n", "assert", "planner_hidden_index", ".", "max", "(", ")", ".", "item", "(", ")", "<=", "planner_states", ".", "size", "(", "1", ")", "\n", "\n", "planner_hidden_index", "=", "(", "\n", "planner_hidden_index", ".", "contiguous", "(", ")", "\n", ".", "view", "(", "N_p", ",", "planner_hidden_index", ".", "size", "(", "1", ")", ",", "1", ")", "\n", ".", "repeat", "(", "1", ",", "1", ",", "planner_states", ".", "size", "(", "2", ")", ")", "\n", ")", "\n", "\n", "controller_hidden_in", "=", "planner_states", ".", "gather", "(", "\n", "1", ",", "planner_hidden_index", ".", "long", "(", ")", "\n", ")", "\n", "\n", "controller_hidden_in", "=", "controller_hidden_in", ".", "view", "(", "\n", "N_c", "*", "T_c", ",", "controller_hidden_in", ".", "size", "(", "2", ")", "\n", ")", "\n", "\n", "controller_img_feats", "=", "controller_img_feats", ".", "contiguous", "(", ")", ".", "view", "(", "\n", "N_c", "*", "T_c", ",", "-", "1", "\n", ")", "\n", "\n", "controller_actions_embed", "=", "self", ".", "planner_nav_rnn", ".", "action_embed", "(", "\n", "controller_actions_in", ".", "long", "(", ")", "\n", ")", ".", "view", "(", "N_c", "*", "T_c", ",", "-", "1", ")", "\n", "\n", "controller_in", "=", "torch", ".", "cat", "(", "\n", "[", "\n", "controller_img_feats", ",", "\n", "controller_actions_embed", ",", "\n", "controller_hidden_in", ",", "\n", "]", ",", "\n", "1", ",", "\n", ")", "\n", "controller_scores", "=", "self", ".", "controller", "(", "controller_in", ")", "\n", "return", "planner_scores", ",", "controller_scores", ",", "planner_hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.models.NavPlannerControllerModel.planner_step": [[508, 523], ["models.NavPlannerControllerModel.cnn_fc_layer", "models.NavPlannerControllerModel.q_rnn", "models.NavPlannerControllerModel.ques_tr", "models.NavPlannerControllerModel.planner_nav_rnn.step_forward"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.models.NavRnn.step_forward"], ["", "def", "planner_step", "(", "\n", "self", ",", "\n", "questions", ":", "Tensor", ",", "\n", "img_feats", ":", "Tensor", ",", "\n", "actions_in", ":", "Tensor", ",", "\n", "planner_hidden", ":", "HiddenState", ",", "\n", ")", "->", "Tuple", "[", "Tensor", ",", "Tensor", "]", ":", "\n", "        ", "img_feats", "=", "self", ".", "cnn_fc_layer", "(", "img_feats", ")", "\n", "ques_feats", "=", "self", ".", "q_rnn", "(", "questions", ")", "\n", "ques_feats", "=", "self", ".", "ques_tr", "(", "ques_feats", ")", "\n", "planner_scores", ",", "planner_hidden", "=", "self", ".", "planner_nav_rnn", ".", "step_forward", "(", "\n", "img_feats", ",", "ques_feats", ",", "actions_in", ",", "planner_hidden", "\n", ")", "\n", "\n", "return", "planner_scores", ",", "planner_hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.models.NavPlannerControllerModel.controller_step": [[524, 539], ["models.NavPlannerControllerModel.cnn_fc_layer", "models.NavPlannerControllerModel.planner_nav_rnn.action_embed", "img_feats.view.view.view", "actions_embed.view.view.view", "hidden_in.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.NavPlannerControllerModel.controller"], "methods", ["None"], ["", "def", "controller_step", "(", "\n", "self", ",", "img_feats", ":", "Tensor", ",", "actions_in", ":", "Tensor", ",", "hidden_in", ":", "Tensor", "\n", ")", "->", "Tensor", ":", "\n", "\n", "        ", "img_feats", "=", "self", ".", "cnn_fc_layer", "(", "img_feats", ")", "\n", "actions_embed", "=", "self", ".", "planner_nav_rnn", ".", "action_embed", "(", "actions_in", ")", "\n", "\n", "img_feats", "=", "img_feats", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "actions_embed", "=", "actions_embed", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "hidden_in", "=", "hidden_in", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "\n", "controller_in", "=", "torch", ".", "cat", "(", "[", "img_feats", ",", "actions_embed", ",", "hidden_in", "]", ",", "1", ")", "\n", "controller_scores", "=", "self", ".", "controller", "(", "controller_in", ")", "\n", "\n", "return", "controller_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.models.NavRnn.__init__": [[542, 617], ["torch.Module.__init__", "habitat.logger.info", "torch.Linear", "torch.Linear", "torch.Linear", "habitat.logger.info", "habitat.logger.info", "torch.Embedding", "torch.Embedding", "torch.Embedding", "habitat.logger.info", "getattr"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "image_input", ":", "bool", "=", "False", ",", "\n", "image_feat_dim", ":", "int", "=", "128", ",", "\n", "question_input", ":", "bool", "=", "False", ",", "\n", "question_embed_dim", ":", "int", "=", "128", ",", "\n", "action_input", ":", "bool", "=", "False", ",", "\n", "action_embed_dim", ":", "int", "=", "32", ",", "\n", "num_actions", ":", "int", "=", "4", ",", "\n", "mode", ":", "str", "=", "\"sl\"", ",", "\n", "rnn_type", ":", "str", "=", "\"LSTM\"", ",", "\n", "rnn_hidden_dim", ":", "int", "=", "128", ",", "\n", "rnn_num_layers", ":", "int", "=", "2", ",", "\n", "rnn_dropout", ":", "float", "=", "0", ",", "\n", "return_states", ":", "bool", "=", "False", ",", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "NavRnn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "image_input", "=", "image_input", "\n", "self", ".", "image_feat_dim", "=", "image_feat_dim", "\n", "\n", "self", ".", "question_input", "=", "question_input", "\n", "self", ".", "question_embed_dim", "=", "question_embed_dim", "\n", "\n", "self", ".", "action_input", "=", "action_input", "\n", "self", ".", "action_embed_dim", "=", "action_embed_dim", "\n", "\n", "self", ".", "num_actions", "=", "num_actions", "\n", "\n", "self", ".", "rnn_type", "=", "rnn_type", "\n", "self", ".", "rnn_hidden_dim", "=", "rnn_hidden_dim", "\n", "self", ".", "rnn_num_layers", "=", "rnn_num_layers", "\n", "\n", "self", ".", "return_states", "=", "return_states", "\n", "\n", "rnn_input_dim", "=", "0", "\n", "if", "self", ".", "image_input", "is", "True", ":", "\n", "            ", "rnn_input_dim", "+=", "image_feat_dim", "\n", "logger", ".", "info", "(", "\n", "\"Adding input to {}: image, rnn dim: {}\"", ".", "format", "(", "\n", "self", ".", "rnn_type", ",", "rnn_input_dim", "\n", ")", "\n", ")", "\n", "\n", "", "if", "self", ".", "question_input", "is", "True", ":", "\n", "            ", "rnn_input_dim", "+=", "question_embed_dim", "\n", "logger", ".", "info", "(", "\n", "\"Adding input to {}: question, rnn dim: {}\"", ".", "format", "(", "\n", "self", ".", "rnn_type", ",", "rnn_input_dim", "\n", ")", "\n", ")", "\n", "\n", "", "if", "self", ".", "action_input", "is", "True", ":", "\n", "            ", "self", ".", "action_embed", "=", "nn", ".", "Embedding", "(", "num_actions", ",", "action_embed_dim", ")", "\n", "rnn_input_dim", "+=", "action_embed_dim", "\n", "logger", ".", "info", "(", "\n", "\"Adding input to {}: action, rnn dim: {}\"", ".", "format", "(", "\n", "self", ".", "rnn_type", ",", "rnn_input_dim", "\n", ")", "\n", ")", "\n", "\n", "", "self", ".", "rnn", "=", "getattr", "(", "nn", ",", "self", ".", "rnn_type", ")", "(", "\n", "rnn_input_dim", ",", "\n", "self", ".", "rnn_hidden_dim", ",", "\n", "self", ".", "rnn_num_layers", ",", "\n", "dropout", "=", "rnn_dropout", ",", "\n", "batch_first", "=", "True", ",", "\n", ")", "\n", "logger", ".", "info", "(", "\n", "\"Building {} with hidden dim: {}\"", ".", "format", "(", "\n", "self", ".", "rnn_type", ",", "rnn_hidden_dim", "\n", ")", "\n", ")", "\n", "\n", "self", ".", "decoder", "=", "nn", ".", "Linear", "(", "self", ".", "rnn_hidden_dim", ",", "self", ".", "num_actions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.models.NavRnn.init_hidden": [[618, 637], ["next", "models.NavRnn.parameters", "weight.new().zero_", "weight.new().zero_", "weight.new().zero_", "weight.new", "weight.new", "weight.new"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.nn_skill.NnSkillPolicy.parameters"], ["", "def", "init_hidden", "(", "\n", "self", ",", "bsz", ":", "int", "\n", ")", "->", "Union", "[", "Tuple", "[", "Tensor", ",", "Tensor", "]", ",", "Tensor", ",", "None", "]", ":", "\n", "        ", "weight", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "data", "\n", "if", "self", ".", "rnn_type", "==", "\"LSTM\"", ":", "\n", "            ", "return", "(", "\n", "weight", ".", "new", "(", "\n", "self", ".", "rnn_num_layers", ",", "bsz", ",", "self", ".", "rnn_hidden_dim", "\n", ")", ".", "zero_", "(", ")", ",", "\n", "weight", ".", "new", "(", "\n", "self", ".", "rnn_num_layers", ",", "bsz", ",", "self", ".", "rnn_hidden_dim", "\n", ")", ".", "zero_", "(", ")", ",", "\n", ")", "\n", "", "elif", "self", ".", "rnn_type", "==", "\"GRU\"", ":", "\n", "            ", "return", "weight", ".", "new", "(", "\n", "self", ".", "rnn_num_layers", ",", "bsz", ",", "self", ".", "rnn_hidden_dim", "\n", ")", ".", "zero_", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.models.NavRnn.forward": [[638, 686], ["torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "models.NavRnn.rnn", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "models.NavRnn.decoder", "img_feats.size", "question_feats.repeat.repeat.size", "question_feats.repeat.repeat.view", "question_feats.repeat.repeat.repeat", "rnn_output.contiguous().view", "actions_in.size", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "models.NavRnn.action_embed", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "rnn_output.size", "rnn_output.contiguous", "rnn_output.size", "rnn_output.size", "models.NavRnn.action_embed", "actions_in.long"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size"], ["", "", "def", "forward", "(", "\n", "self", ",", "\n", "img_feats", ":", "Tensor", ",", "\n", "question_feats", ":", "Tensor", ",", "\n", "actions_in", ":", "Tensor", ",", "\n", "action_lengths", ":", "Tensor", ",", "\n", "hidden", ":", "bool", "=", "False", ",", "\n", ")", "->", "Union", "[", "Tuple", "[", "Tensor", ",", "Tensor", "]", ",", "Tuple", "[", "Tensor", ",", "Tensor", ",", "Tensor", "]", "]", ":", "\n", "\n", "        ", "T", ":", "Union", "[", "int", ",", "bool", "]", "=", "False", "\n", "if", "self", ".", "image_input", "is", "True", ":", "\n", "            ", "N", ",", "T", ",", "_", "=", "img_feats", ".", "size", "(", ")", "\n", "input_feats", "=", "img_feats", "\n", "\n", "", "if", "self", ".", "question_input", "is", "True", ":", "\n", "            ", "N", ",", "D", "=", "question_feats", ".", "size", "(", ")", "\n", "question_feats", "=", "question_feats", ".", "view", "(", "N", ",", "1", ",", "D", ")", "\n", "if", "T", "is", "False", ":", "\n", "                ", "T", "=", "actions_in", ".", "size", "(", "1", ")", "\n", "", "question_feats", "=", "question_feats", ".", "repeat", "(", "1", ",", "T", ",", "1", ")", "\n", "if", "len", "(", "input_feats", ")", "==", "0", ":", "\n", "                ", "input_feats", "=", "question_feats", "\n", "", "else", ":", "\n", "                ", "input_feats", "=", "torch", ".", "cat", "(", "[", "input_feats", ",", "question_feats", "]", ",", "2", ")", "\n", "\n", "", "", "if", "self", ".", "action_input", "is", "True", ":", "\n", "            ", "if", "len", "(", "input_feats", ")", "==", "0", ":", "\n", "                ", "input_feats", "=", "self", ".", "action_embed", "(", "actions_in", ")", "\n", "", "else", ":", "\n", "                ", "input_feats", "=", "torch", ".", "cat", "(", "\n", "[", "input_feats", ",", "self", ".", "action_embed", "(", "actions_in", ".", "long", "(", ")", ")", "]", ",", "2", "\n", ")", "\n", "\n", "", "", "packed_input_feats", "=", "pack_padded_sequence", "(", "\n", "input_feats", ",", "action_lengths", ",", "batch_first", "=", "True", "\n", ")", "\n", "packed_output", ",", "hidden_state", "=", "self", ".", "rnn", "(", "packed_input_feats", ")", "\n", "rnn_output", ",", "_", "=", "pad_packed_sequence", "(", "packed_output", ",", "batch_first", "=", "True", ")", "\n", "output", "=", "self", ".", "decoder", "(", "\n", "rnn_output", ".", "contiguous", "(", ")", ".", "view", "(", "\n", "rnn_output", ".", "size", "(", "0", ")", "*", "rnn_output", ".", "size", "(", "1", ")", ",", "rnn_output", ".", "size", "(", "2", ")", "\n", ")", "\n", ")", "\n", "\n", "if", "self", ".", "return_states", ":", "\n", "            ", "return", "rnn_output", ",", "output", ",", "hidden_state", "\n", "", "else", ":", "\n", "            ", "return", "output", ",", "hidden_state", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.models.NavRnn.step_forward": [[687, 728], ["models.NavRnn.rnn", "models.NavRnn.decoder", "img_feats.size", "question_feats.repeat.repeat.size", "question_feats.repeat.repeat.view", "question_feats.repeat.repeat.repeat", "models.NavRnn.contiguous().view", "actions_in.long.long.size", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "models.NavRnn.action_embed", "actions_in.long.long.long", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.NavRnn.size", "models.NavRnn.contiguous", "models.NavRnn.size", "models.NavRnn.size", "models.NavRnn.action_embed"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size"], ["", "", "def", "step_forward", "(", "\n", "self", ",", "\n", "img_feats", ":", "Tensor", ",", "\n", "question_feats", ":", "Tensor", ",", "\n", "actions_in", ":", "Tensor", ",", "\n", "hidden", ":", "HiddenState", ",", "\n", ")", "->", "Tuple", "[", "Tensor", ",", "Tensor", "]", ":", "\n", "\n", "        ", "T", ":", "Union", "[", "bool", ",", "int", "]", "=", "False", "\n", "if", "self", ".", "image_input", "is", "True", ":", "\n", "            ", "N", ",", "T", ",", "_", "=", "img_feats", ".", "size", "(", ")", "\n", "input_feats", "=", "img_feats", "\n", "\n", "", "if", "self", ".", "question_input", "is", "True", ":", "\n", "            ", "N", ",", "D", "=", "question_feats", ".", "size", "(", ")", "\n", "question_feats", "=", "question_feats", ".", "view", "(", "N", ",", "1", ",", "D", ")", "\n", "if", "T", "is", "False", ":", "\n", "                ", "T", "=", "actions_in", ".", "size", "(", "1", ")", "\n", "", "question_feats", "=", "question_feats", ".", "repeat", "(", "1", ",", "T", ",", "1", ")", "\n", "if", "len", "(", "input_feats", ")", "==", "0", ":", "\n", "                ", "input_feats", "=", "question_feats", "\n", "", "else", ":", "\n", "                ", "input_feats", "=", "torch", ".", "cat", "(", "[", "input_feats", ",", "question_feats", "]", ",", "2", ")", "\n", "\n", "", "", "if", "self", ".", "action_input", "is", "True", ":", "\n", "            ", "if", "len", "(", "input_feats", ")", "==", "0", ":", "\n", "                ", "input_feats", "=", "self", ".", "action_embed", "(", "actions_in", ")", "\n", "", "else", ":", "\n", "                ", "actions_in", "=", "actions_in", ".", "long", "(", ")", "\n", "input_feats", "=", "torch", ".", "cat", "(", "\n", "[", "input_feats", ",", "self", ".", "action_embed", "(", "actions_in", ")", "]", ",", "2", "\n", ")", "\n", "\n", "", "", "output", ",", "hidden", "=", "self", ".", "rnn", "(", "input_feats", ",", "hidden", ")", "\n", "output", "=", "self", ".", "decoder", "(", "\n", "output", ".", "contiguous", "(", ")", ".", "view", "(", "\n", "output", ".", "size", "(", "0", ")", "*", "output", ".", "size", "(", "1", ")", ",", "output", ".", "size", "(", "2", ")", "\n", ")", "\n", ")", "\n", "\n", "return", "output", ",", "hidden", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.models.build_mlp": [[15, 42], ["layers.append", "torch.Sequential", "layers.append", "layers.append", "layers.append", "layers.append", "torch.Linear", "layers.append", "torch.Dropout", "torch.BatchNorm1d", "torch.Linear", "layers.append", "layers.append", "torch.ReLU", "torch.Sigmoid", "torch.BatchNorm1d", "torch.Dropout"], "function", ["None"], ["def", "build_mlp", "(", "\n", "input_dim", ":", "int", ",", "\n", "hidden_dims", ":", "Iterable", "[", "int", "]", ",", "\n", "output_dim", ":", "int", ",", "\n", "use_batchnorm", ":", "bool", "=", "False", ",", "\n", "dropout", ":", "float", "=", "0", ",", "\n", "add_sigmoid", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "    ", "layers", ":", "List", "[", "nn", ".", "Module", "]", "=", "[", "]", "\n", "D", "=", "input_dim", "\n", "if", "dropout", ">", "0", ":", "\n", "        ", "layers", ".", "append", "(", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", ")", "\n", "", "if", "use_batchnorm", ":", "\n", "        ", "layers", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "input_dim", ")", ")", "\n", "", "for", "dim", "in", "hidden_dims", ":", "\n", "        ", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "D", ",", "dim", ")", ")", "\n", "if", "use_batchnorm", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "dim", ")", ")", "\n", "", "if", "dropout", ">", "0", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", ")", "\n", "", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "D", "=", "dim", "\n", "", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "D", ",", "output_dim", ")", ")", "\n", "\n", "if", "add_sigmoid", ":", "\n", "        ", "layers", ".", "append", "(", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.il.metrics.Metric.__init__": [[16, 28], ["sorted"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "info", "=", "None", ",", "metric_names", "=", "None", ",", "log_json", "=", "None", ")", ":", "\n", "        ", "self", ".", "info", "=", "info", "\n", "self", ".", "metric_names", "=", "sorted", "(", "metric_names", ")", "if", "metric_names", "else", "[", "]", "\n", "\n", "self", ".", "metrics", ":", "List", "[", "List", "[", "Optional", "[", "float", "]", "]", "]", "=", "[", "\n", "[", "None", ",", "None", ",", "None", "]", "for", "_", "in", "self", ".", "metric_names", "\n", "]", "\n", "\n", "self", ".", "stats", "=", "[", "]", "\n", "self", ".", "num_iters", "=", "0", "\n", "\n", "self", ".", "log_json", "=", "log_json", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.il.metrics.Metric.update": [[29, 65], ["isinstance", "range", "metrics.Metric.stats.append", "len", "float", "float", "float", "current_stats.append", "copy.deepcopy", "isinstance", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "values", ":", "List", ")", "->", "None", ":", "\n", "        ", "assert", "isinstance", "(", "values", ",", "list", ")", "\n", "\n", "self", ".", "num_iters", "+=", "1", "\n", "current_stats", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "values", ")", ")", ":", "\n", "            ", "if", "values", "[", "i", "]", "is", "None", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "isinstance", "(", "values", "[", "i", "]", ",", "list", ")", "is", "False", ":", "\n", "                ", "values", "[", "i", "]", "=", "[", "values", "[", "i", "]", "]", "\n", "\n", "", "if", "self", ".", "metrics", "[", "i", "]", "[", "0", "]", "is", "None", ":", "\n", "                ", "self", ".", "metrics", "[", "i", "]", "[", "0", "]", "=", "np", ".", "mean", "(", "values", "[", "i", "]", ")", "\n", "self", ".", "metrics", "[", "i", "]", "[", "1", "]", "=", "np", ".", "mean", "(", "values", "[", "i", "]", ")", "\n", "self", ".", "metrics", "[", "i", "]", "[", "2", "]", "=", "np", ".", "mean", "(", "values", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "metrics", "[", "i", "]", "[", "0", "]", "=", "(", "\n", "self", ".", "metrics", "[", "i", "]", "[", "0", "]", "*", "(", "self", ".", "num_iters", "-", "1", ")", "\n", "+", "np", ".", "mean", "(", "values", "[", "i", "]", ")", "\n", ")", "/", "self", ".", "num_iters", "\n", "\n", "self", ".", "metrics", "[", "i", "]", "[", "1", "]", "=", "0.95", "*", "self", ".", "metrics", "[", "i", "]", "[", "\n", "1", "\n", "]", "+", "0.05", "*", "np", ".", "mean", "(", "values", "[", "i", "]", ")", "\n", "\n", "self", ".", "metrics", "[", "i", "]", "[", "2", "]", "=", "np", ".", "mean", "(", "values", "[", "i", "]", ")", "\n", "\n", "", "self", ".", "metrics", "[", "i", "]", "[", "0", "]", "=", "float", "(", "self", ".", "metrics", "[", "i", "]", "[", "0", "]", ")", "\n", "self", ".", "metrics", "[", "i", "]", "[", "1", "]", "=", "float", "(", "self", ".", "metrics", "[", "i", "]", "[", "1", "]", ")", "\n", "self", ".", "metrics", "[", "i", "]", "[", "2", "]", "=", "float", "(", "self", ".", "metrics", "[", "i", "]", "[", "2", "]", ")", "\n", "\n", "current_stats", ".", "append", "(", "self", ".", "metrics", "[", "i", "]", ")", "\n", "\n", "", "self", ".", "stats", ".", "append", "(", "copy", ".", "deepcopy", "(", "current_stats", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.il.metrics.Metric.get_stat_string": [[66, 82], ["metrics.Metric.info.items", "range", "len"], "methods", ["None"], ["", "def", "get_stat_string", "(", "self", ",", "mode", ":", "int", "=", "1", ")", "->", "str", ":", "\n", "\n", "        ", "stat_string", "=", "\"\"", "\n", "\n", "for", "k", ",", "v", "in", "self", ".", "info", ".", "items", "(", ")", ":", "\n", "            ", "stat_string", "+=", "\"[{}:{}]\"", ".", "format", "(", "k", ",", "v", ")", "\n", "\n", "", "stat_string", "+=", "\"[iters:{}]\\n\"", ".", "format", "(", "self", ".", "num_iters", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "metric_names", ")", ")", ":", "\n", "            ", "if", "self", ".", "metrics", "[", "i", "]", "[", "mode", "]", "is", "not", "None", ":", "\n", "                ", "stat_string", "+=", "\"[{}:{:.3f}]\"", ".", "format", "(", "\n", "self", ".", "metric_names", "[", "i", "]", ",", "\n", "self", ".", "metrics", "[", "i", "]", "[", "mode", "]", ",", "\n", ")", "\n", "\n", "", "", "return", "stat_string", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.il.metrics.Metric.get_stats": [[83, 89], ["range", "len", "stats.append"], "methods", ["None"], ["", "def", "get_stats", "(", "self", ",", "mode", ":", "int", "=", "1", ")", "->", "List", "[", "float", "]", ":", "\n", "        ", "stats", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "metric_names", ")", ")", ":", "\n", "            ", "stats", ".", "append", "(", "self", ".", "metrics", "[", "i", "]", "[", "mode", "]", ")", "\n", "\n", "", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.il.metrics.Metric.dump_log": [[90, 101], ["open", "json.dump"], "methods", ["None"], ["", "def", "dump_log", "(", "self", ")", "->", "bool", ":", "\n", "\n", "        ", "if", "self", ".", "log_json", "is", "None", ":", "\n", "            ", "return", "False", "\n", "\n", "", "dict_to_save", "=", "{", "\"metric_names\"", ":", "self", ".", "metric_names", ",", "\"stats\"", ":", "self", ".", "stats", "}", "\n", "\n", "with", "open", "(", "self", ".", "log_json", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "dict_to_save", ",", "f", ")", "\n", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.il.metrics.VqaMetric.__init__": [[104, 106], ["metrics.Metric.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "info", "=", "None", ",", "metric_names", "=", "None", ",", "log_json", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "info", ",", "metric_names", ",", "log_json", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.il.metrics.VqaMetric.compute_ranks": [[107, 118], ["numpy.zeros", "numpy.full", "range", "len", "len", "scores[].gt().sum", "scores[].gt"], "methods", ["None"], ["", "def", "compute_ranks", "(", "\n", "self", ",", "scores", ":", "torch", ".", "Tensor", ",", "labels", ":", "torch", ".", "Tensor", "\n", ")", "->", "Tuple", "[", "np", ".", "ndarray", ",", "np", ".", "ndarray", "]", ":", "\n", "        ", "accuracy", "=", "np", ".", "zeros", "(", "len", "(", "labels", ")", ")", "\n", "ranks", "=", "np", ".", "full", "(", "len", "(", "labels", ")", ",", "scores", ".", "shape", "[", "1", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "scores", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "ranks", "[", "i", "]", "=", "scores", "[", "i", "]", ".", "gt", "(", "scores", "[", "i", "]", "[", "labels", "[", "i", "]", "]", ")", ".", "sum", "(", ")", "+", "1", "\n", "if", "ranks", "[", "i", "]", "==", "1", ":", "\n", "                ", "accuracy", "[", "i", "]", "=", "1", "\n", "", "", "return", "accuracy", ",", "ranks", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.il.metrics.NavMetric.__init__": [[121, 123], ["metrics.Metric.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "info", "=", "None", ",", "metric_names", "=", "None", ",", "log_json", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "info", ",", "metric_names", ",", "log_json", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.trainers.eqa_cnn_pretrain_trainer.EQACNNPretrainTrainer.__init__": [[36, 47], ["habitat_baselines.common.base_il_trainer.BaseILTrainer.__init__", "torch.cuda.is_available", "torch.device", "torch.device", "habitat.logger.info"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "config", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "device", "=", "(", "\n", "torch", ".", "device", "(", "\"cuda\"", ",", "self", ".", "config", ".", "TORCH_GPU_ID", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "else", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", ")", "\n", "\n", "if", "config", "is", "not", "None", ":", "\n", "            ", "logger", ".", "info", "(", "f\"config: {config}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.trainers.eqa_cnn_pretrain_trainer.EQACNNPretrainTrainer._make_results_dir": [[48, 54], ["eqa_cnn_pretrain_trainer.EQACNNPretrainTrainer.config.RESULTS_DIR.format", "os.path.isdir", "os.makedirs"], "methods", ["None"], ["", "", "def", "_make_results_dir", "(", "self", ")", ":", "\n", "        ", "r\"\"\"Makes directory for saving eqa-cnn-pretrain eval results.\"\"\"", "\n", "for", "s_type", "in", "[", "\"rgb\"", ",", "\"seg\"", ",", "\"depth\"", "]", ":", "\n", "            ", "dir_name", "=", "self", ".", "config", ".", "RESULTS_DIR", ".", "format", "(", "split", "=", "\"val\"", ",", "type", "=", "s_type", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "dir_name", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "dir_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.trainers.eqa_cnn_pretrain_trainer.EQACNNPretrainTrainer._save_results": [[55, 80], ["habitat_baselines.utils.visualizations.utils.save_rgb_results", "habitat_baselines.utils.visualizations.utils.save_seg_results", "habitat_baselines.utils.visualizations.utils.save_depth_results"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.utils.save_rgb_results", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.utils.save_seg_results", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.utils.save_depth_results"], ["", "", "", "def", "_save_results", "(", "\n", "self", ",", "\n", "gt_rgb", ":", "torch", ".", "Tensor", ",", "\n", "pred_rgb", ":", "torch", ".", "Tensor", ",", "\n", "gt_seg", ":", "torch", ".", "Tensor", ",", "\n", "pred_seg", ":", "torch", ".", "Tensor", ",", "\n", "gt_depth", ":", "torch", ".", "Tensor", ",", "\n", "pred_depth", ":", "torch", ".", "Tensor", ",", "\n", "path", ":", "str", ",", "\n", ")", "->", "None", ":", "\n", "        ", "r\"\"\"For saving EQA-CNN-Pretrain reconstruction results.\n\n        Args:\n            gt_rgb: rgb ground truth\n            preg_rgb: autoencoder output rgb reconstruction\n            gt_seg: segmentation ground truth\n            pred_seg: segmentation output\n            gt_depth: depth map ground truth\n            pred_depth: depth map output\n            path: to write file\n        \"\"\"", "\n", "\n", "save_rgb_results", "(", "gt_rgb", "[", "0", "]", ",", "pred_rgb", "[", "0", "]", ",", "path", ")", "\n", "save_seg_results", "(", "gt_seg", "[", "0", "]", ",", "pred_seg", "[", "0", "]", ",", "path", ")", "\n", "save_depth_results", "(", "gt_depth", "[", "0", "]", ",", "pred_depth", "[", "0", "]", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.trainers.eqa_cnn_pretrain_trainer.EQACNNPretrainTrainer.train": [[81, 177], ["habitat_baselines.il.data.eqa_cnn_pretrain_data.EQACNNPretrainDataset", "torch.utils.data.DataLoader", "habitat.logger.info", "habitat_baselines.il.models.models.MultitaskCNN", "habitat_baselines.il.models.models.MultitaskCNN.train().to", "torch.optim.Adam", "torch.nn.SmoothL1Loss", "torch.nn.SmoothL1Loss", "torch.nn.CrossEntropyLoss", "filter", "habitat_baselines.common.tensorboard_utils.TensorboardWriter", "len", "habitat_baselines.il.models.models.MultitaskCNN.train", "habitat_baselines.il.models.models.MultitaskCNN.parameters", "float", "time.time", "time.time", "habitat.logger.info", "habitat.logger.info", "print", "eqa_cnn_pretrain_trainer.EQACNNPretrainTrainer.save_checkpoint", "torch.optim.Adam.zero_grad", "gt_rgb.to.to.to", "gt_depth.to.to.to", "gt_seg.to.to.to", "habitat_baselines.il.models.models.MultitaskCNN.", "torch.nn.CrossEntropyLoss.", "torch.nn.SmoothL1Loss.", "torch.nn.SmoothL1Loss.", "loss.item", "loss.backward", "torch.optim.Adam.step", "len", "habitat_baselines.il.models.models.MultitaskCNN.state_dict", "gt_seg.to.to.long", "habitat.logger.info", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "loss.item"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.train", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.nn_skill.NnSkillPolicy.parameters", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.save_checkpoint", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensorboard_utils.WeightsAndBiasesWriter.add_scalar", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensorboard_utils.WeightsAndBiasesWriter.add_scalar", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensorboard_utils.WeightsAndBiasesWriter.add_scalar", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensorboard_utils.WeightsAndBiasesWriter.add_scalar"], ["", "def", "train", "(", "self", ")", "->", "None", ":", "\n", "        ", "r\"\"\"Main method for pre-training Encoder-Decoder Feature Extractor for EQA.\n\n        Returns:\n            None\n        \"\"\"", "\n", "config", "=", "self", ".", "config", "\n", "\n", "eqa_cnn_pretrain_dataset", "=", "EQACNNPretrainDataset", "(", "config", ")", "\n", "\n", "train_loader", "=", "DataLoader", "(", "\n", "eqa_cnn_pretrain_dataset", ",", "\n", "batch_size", "=", "config", ".", "IL", ".", "EQACNNPretrain", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", ")", "\n", "\n", "logger", ".", "info", "(", "\n", "\"[ train_loader has {} samples ]\"", ".", "format", "(", "\n", "len", "(", "eqa_cnn_pretrain_dataset", ")", "\n", ")", "\n", ")", "\n", "\n", "model", "=", "MultitaskCNN", "(", ")", "\n", "model", ".", "train", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "optim", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "float", "(", "config", ".", "IL", ".", "EQACNNPretrain", ".", "lr", ")", ",", "\n", ")", "\n", "\n", "depth_loss", "=", "torch", ".", "nn", ".", "SmoothL1Loss", "(", ")", "\n", "ae_loss", "=", "torch", ".", "nn", ".", "SmoothL1Loss", "(", ")", "\n", "seg_loss", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "epoch", ",", "t", "=", "1", ",", "0", "\n", "with", "TensorboardWriter", "(", "\n", "config", ".", "TENSORBOARD_DIR", ",", "flush_secs", "=", "self", ".", "flush_secs", "\n", ")", "as", "writer", ":", "\n", "            ", "while", "epoch", "<=", "config", ".", "IL", ".", "EQACNNPretrain", ".", "max_epochs", ":", "\n", "                ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "avg_loss", "=", "0.0", "\n", "\n", "for", "batch", "in", "train_loader", ":", "\n", "                    ", "t", "+=", "1", "\n", "\n", "idx", ",", "gt_rgb", ",", "gt_depth", ",", "gt_seg", "=", "batch", "\n", "\n", "optim", ".", "zero_grad", "(", ")", "\n", "\n", "gt_rgb", "=", "gt_rgb", ".", "to", "(", "self", ".", "device", ")", "\n", "gt_depth", "=", "gt_depth", ".", "to", "(", "self", ".", "device", ")", "\n", "gt_seg", "=", "gt_seg", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "pred_seg", ",", "pred_depth", ",", "pred_rgb", "=", "model", "(", "gt_rgb", ")", "\n", "\n", "l1", "=", "seg_loss", "(", "pred_seg", ",", "gt_seg", ".", "long", "(", ")", ")", "\n", "l2", "=", "ae_loss", "(", "pred_rgb", ",", "gt_rgb", ")", "\n", "l3", "=", "depth_loss", "(", "pred_depth", ",", "gt_depth", ")", "\n", "\n", "loss", "=", "l1", "+", "(", "10", "*", "l2", ")", "+", "(", "10", "*", "l3", ")", "\n", "\n", "avg_loss", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "if", "t", "%", "config", ".", "LOG_INTERVAL", "==", "0", ":", "\n", "                        ", "logger", ".", "info", "(", "\n", "\"[ Epoch: {}; iter: {}; loss: {:.3f} ]\"", ".", "format", "(", "\n", "epoch", ",", "t", ",", "loss", ".", "item", "(", ")", "\n", ")", "\n", ")", "\n", "\n", "writer", ".", "add_scalar", "(", "\"loss/total_loss\"", ",", "loss", ",", "t", ")", "\n", "writer", ".", "add_scalar", "(", "\"loss/seg_loss\"", ",", "l1", ",", "t", ")", "\n", "writer", ".", "add_scalar", "(", "\"loss/ae_loss\"", ",", "l2", ",", "t", ")", "\n", "writer", ".", "add_scalar", "(", "\"loss/depth_loss\"", ",", "l3", ",", "t", ")", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "optim", ".", "step", "(", ")", "\n", "\n", "", "end_time", "=", "time", ".", "time", "(", ")", "\n", "time_taken", "=", "\"{:.1f}\"", ".", "format", "(", "(", "end_time", "-", "start_time", ")", "/", "60", ")", "\n", "avg_loss", "=", "avg_loss", "/", "len", "(", "train_loader", ")", "\n", "\n", "logger", ".", "info", "(", "\n", "\"[ Epoch {} completed. Time taken: {} minutes. ]\"", ".", "format", "(", "\n", "epoch", ",", "time_taken", "\n", ")", "\n", ")", "\n", "logger", ".", "info", "(", "\"[ Average loss: {:.3f} ]\"", ".", "format", "(", "avg_loss", ")", ")", "\n", "\n", "print", "(", "\"-----------------------------------------\"", ")", "\n", "\n", "self", ".", "save_checkpoint", "(", "\n", "model", ".", "state_dict", "(", ")", ",", "\"epoch_{}.ckpt\"", ".", "format", "(", "epoch", ")", "\n", ")", "\n", "\n", "epoch", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.trainers.eqa_cnn_pretrain_trainer.EQACNNPretrainTrainer._eval_checkpoint": [[178, 295], ["config.defrost", "config.freeze", "habitat_baselines.il.data.eqa_cnn_pretrain_data.EQACNNPretrainDataset", "torch.utils.data.DataLoader", "habitat.logger.info", "habitat_baselines.il.models.models.MultitaskCNN", "torch.load", "habitat_baselines.il.models.models.MultitaskCNN.load_state_dict", "habitat_baselines.il.models.models.MultitaskCNN.to().eval", "torch.nn.SmoothL1Loss", "torch.nn.SmoothL1Loss", "torch.nn.CrossEntropyLoss", "len", "len", "len", "len", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "habitat.logger.info", "habitat.logger.info", "habitat.logger.info", "habitat.logger.info", "torch.no_grad", "len", "habitat_baselines.il.models.models.MultitaskCNN.to", "gt_rgb.to.to.to", "gt_depth.to.to.to", "gt_seg.to.to.to", "habitat_baselines.il.models.models.MultitaskCNN.", "torch.nn.CrossEntropyLoss.", "torch.nn.SmoothL1Loss.", "torch.nn.SmoothL1Loss.", "loss.item", "torch.nn.CrossEntropyLoss.item", "torch.nn.SmoothL1Loss.item", "torch.nn.SmoothL1Loss.item", "gt_seg.to.to.long", "habitat.logger.info", "os.path.join", "eqa_cnn_pretrain_trainer.EQACNNPretrainTrainer._save_results", "idx[].item", "loss.item"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.load", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_trainer.BaseTrainer.eval", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensorboard_utils.WeightsAndBiasesWriter.add_scalar", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensorboard_utils.WeightsAndBiasesWriter.add_scalar", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensorboard_utils.WeightsAndBiasesWriter.add_scalar", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensorboard_utils.WeightsAndBiasesWriter.add_scalar", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.trainers.eqa_cnn_pretrain_trainer.EQACNNPretrainTrainer._save_results"], ["", "", "", "def", "_eval_checkpoint", "(", "\n", "self", ",", "\n", "checkpoint_path", ":", "str", ",", "\n", "writer", ":", "TensorboardWriter", ",", "\n", "checkpoint_index", ":", "int", "=", "0", ",", "\n", ")", "->", "None", ":", "\n", "        ", "r\"\"\"Evaluates a single checkpoint.\n\n        Args:\n            checkpoint_path: path of checkpoint\n            writer: tensorboard writer object for logging to tensorboard\n            checkpoint_index: index of cur checkpoint for logging\n\n        Returns:\n            None\n        \"\"\"", "\n", "config", "=", "self", ".", "config", "\n", "\n", "config", ".", "defrost", "(", ")", "\n", "config", ".", "TASK_CONFIG", ".", "DATASET", ".", "SPLIT", "=", "self", ".", "config", ".", "EVAL", ".", "SPLIT", "\n", "config", ".", "freeze", "(", ")", "\n", "\n", "eqa_cnn_pretrain_dataset", "=", "EQACNNPretrainDataset", "(", "config", ",", "mode", "=", "\"val\"", ")", "\n", "\n", "eval_loader", "=", "DataLoader", "(", "\n", "eqa_cnn_pretrain_dataset", ",", "\n", "batch_size", "=", "config", ".", "IL", ".", "EQACNNPretrain", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", ")", "\n", "\n", "logger", ".", "info", "(", "\n", "\"[ eval_loader has {} samples ]\"", ".", "format", "(", "\n", "len", "(", "eqa_cnn_pretrain_dataset", ")", "\n", ")", "\n", ")", "\n", "\n", "model", "=", "MultitaskCNN", "(", ")", "\n", "\n", "state_dict", "=", "torch", ".", "load", "(", "checkpoint_path", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n", "model", ".", "to", "(", "self", ".", "device", ")", ".", "eval", "(", ")", "\n", "\n", "depth_loss", "=", "torch", ".", "nn", ".", "SmoothL1Loss", "(", ")", "\n", "ae_loss", "=", "torch", ".", "nn", ".", "SmoothL1Loss", "(", ")", "\n", "seg_loss", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "t", "=", "0", "\n", "avg_loss", "=", "0.0", "\n", "avg_l1", "=", "0.0", "\n", "avg_l2", "=", "0.0", "\n", "avg_l3", "=", "0.0", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "batch", "in", "eval_loader", ":", "\n", "                ", "t", "+=", "1", "\n", "\n", "idx", ",", "gt_rgb", ",", "gt_depth", ",", "gt_seg", "=", "batch", "\n", "gt_rgb", "=", "gt_rgb", ".", "to", "(", "self", ".", "device", ")", "\n", "gt_depth", "=", "gt_depth", ".", "to", "(", "self", ".", "device", ")", "\n", "gt_seg", "=", "gt_seg", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "pred_seg", ",", "pred_depth", ",", "pred_rgb", "=", "model", "(", "gt_rgb", ")", "\n", "l1", "=", "seg_loss", "(", "pred_seg", ",", "gt_seg", ".", "long", "(", ")", ")", "\n", "l2", "=", "ae_loss", "(", "pred_rgb", ",", "gt_rgb", ")", "\n", "l3", "=", "depth_loss", "(", "pred_depth", ",", "gt_depth", ")", "\n", "\n", "loss", "=", "l1", "+", "(", "10", "*", "l2", ")", "+", "(", "10", "*", "l3", ")", "\n", "\n", "avg_loss", "+=", "loss", ".", "item", "(", ")", "\n", "avg_l1", "+=", "l1", ".", "item", "(", ")", "\n", "avg_l2", "+=", "l2", ".", "item", "(", ")", "\n", "avg_l3", "+=", "l3", ".", "item", "(", ")", "\n", "\n", "if", "t", "%", "config", ".", "LOG_INTERVAL", "==", "0", ":", "\n", "                    ", "logger", ".", "info", "(", "\n", "\"[ Iter: {}; loss: {:.3f} ]\"", ".", "format", "(", "t", ",", "loss", ".", "item", "(", ")", ")", ",", "\n", ")", "\n", "\n", "", "if", "(", "\n", "config", ".", "EVAL_SAVE_RESULTS", "\n", "and", "t", "%", "config", ".", "EVAL_SAVE_RESULTS_INTERVAL", "==", "0", "\n", ")", ":", "\n", "\n", "                    ", "result_id", "=", "\"ckpt_{}_{}\"", ".", "format", "(", "\n", "checkpoint_index", ",", "idx", "[", "0", "]", ".", "item", "(", ")", "\n", ")", "\n", "result_path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "config", ".", "RESULTS_DIR", ",", "result_id", "\n", ")", "\n", "\n", "self", ".", "_save_results", "(", "\n", "gt_rgb", ",", "\n", "pred_rgb", ",", "\n", "gt_seg", ",", "\n", "pred_seg", ",", "\n", "gt_depth", ",", "\n", "pred_depth", ",", "\n", "result_path", ",", "\n", ")", "\n", "\n", "", "", "", "avg_loss", "/=", "len", "(", "eval_loader", ")", "\n", "avg_l1", "/=", "len", "(", "eval_loader", ")", "\n", "avg_l2", "/=", "len", "(", "eval_loader", ")", "\n", "avg_l3", "/=", "len", "(", "eval_loader", ")", "\n", "\n", "writer", ".", "add_scalar", "(", "\n", "\"avg_val_loss/total_loss\"", ",", "avg_loss", ",", "checkpoint_index", "\n", ")", "\n", "writer", ".", "add_scalar", "(", "\"avg_val_loss/seg_loss\"", ",", "avg_l1", ",", "checkpoint_index", ")", "\n", "writer", ".", "add_scalar", "(", "\"avg_val_loss/ae_loss\"", ",", "avg_l2", ",", "checkpoint_index", ")", "\n", "writer", ".", "add_scalar", "(", "\"avg_val_loss/depth_loss\"", ",", "avg_l3", ",", "checkpoint_index", ")", "\n", "\n", "logger", ".", "info", "(", "\"[ Average loss: {:.3f} ]\"", ".", "format", "(", "avg_loss", ")", ")", "\n", "logger", ".", "info", "(", "\"[ Average seg loss: {:.3f} ]\"", ".", "format", "(", "avg_l1", ")", ")", "\n", "logger", ".", "info", "(", "\"[ Average autoencoder loss: {:.4f} ]\"", ".", "format", "(", "avg_l2", ")", ")", "\n", "logger", ".", "info", "(", "\"[ Average depthloss: {:.4f} ]\"", ".", "format", "(", "avg_l3", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.trainers.pacman_trainer.PACMANTrainer.__init__": [[44, 55], ["habitat_baselines.common.base_il_trainer.BaseILTrainer.__init__", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "habitat.logger.info"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "config", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "device", "=", "(", "\n", "torch", ".", "device", "(", "\"cuda\"", ",", "self", ".", "config", ".", "TORCH_GPU_ID", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "else", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", ")", "\n", "\n", "if", "config", "is", "not", "None", ":", "\n", "            ", "logger", ".", "info", "(", "f\"config: {config}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.trainers.pacman_trainer.PACMANTrainer._save_nav_results": [[56, 127], ["os.path.join", "int", "q_vocab_dict.token_idx_2_string", "habitat_baselines.utils.common.generate_video", "cv2.copyMakeBorder", "cv2.putText", "frames_with_text.append", "ckpt_path.rfind"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.utils.VocabDict.token_idx_2_string", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.generate_video"], ["", "", "def", "_save_nav_results", "(", "\n", "self", ",", "\n", "ckpt_path", ":", "str", ",", "\n", "ep_id", ":", "int", ",", "\n", "questions", ":", "torch", ".", "Tensor", ",", "\n", "imgs", ":", "List", "[", "np", ".", "ndarray", "]", ",", "\n", "q_vocab_dict", ":", "VocabDict", ",", "\n", "results_dir", ":", "str", ",", "\n", "writer", ":", "TensorboardWriter", ",", "\n", "video_option", ":", "list", ",", "\n", ")", "->", "None", ":", "\n", "\n", "        ", "r\"\"\"For saving NAV-PACMAN eval results.\n        Args:\n            ckpt_path: path of checkpoint being evaluated\n            ep_id: episode id (batch index)\n            questions: input question to model\n            imgs: images' tensor containing input frames\n            q_vocab_dict: question vocab dictionary\n            results_dir: dir to save results\n            writer: tensorboard writer\n            video_option: [\"disk\", \"tb\"]\n        Returns:\n            None\n        \"\"\"", "\n", "\n", "question", "=", "questions", "[", "0", "]", "\n", "\n", "ckpt_epoch", "=", "ckpt_path", "[", "ckpt_path", ".", "rfind", "(", "\"/\"", ")", "+", "1", ":", "-", "5", "]", "\n", "results_dir", "=", "os", ".", "path", ".", "join", "(", "results_dir", ",", "ckpt_epoch", ")", "\n", "ckpt_no", "=", "int", "(", "ckpt_epoch", "[", "6", ":", "]", ")", "\n", "\n", "q_string", "=", "q_vocab_dict", ".", "token_idx_2_string", "(", "question", ")", "\n", "frames_with_text", "=", "[", "]", "\n", "for", "frame", "in", "imgs", ":", "\n", "            ", "border_width", "=", "32", "\n", "font", "=", "cv2", ".", "FONT_HERSHEY_SIMPLEX", "\n", "color", "=", "(", "0", ",", "0", ",", "0", ")", "\n", "scale", "=", "0.3", "\n", "thickness", "=", "1", "\n", "\n", "frame", "=", "cv2", ".", "copyMakeBorder", "(", "\n", "frame", ",", "\n", "border_width", ",", "\n", "border_width", ",", "\n", "border_width", ",", "\n", "border_width", ",", "\n", "cv2", ".", "BORDER_CONSTANT", ",", "\n", "value", "=", "(", "255", ",", "255", ",", "255", ")", ",", "\n", ")", "\n", "\n", "frame", "=", "cv2", ".", "putText", "(", "\n", "frame", ",", "\n", "\"Question: \"", "+", "q_string", ",", "\n", "(", "10", ",", "15", ")", ",", "\n", "font", ",", "\n", "scale", ",", "\n", "color", ",", "\n", "thickness", ",", "\n", ")", "\n", "\n", "frames_with_text", ".", "append", "(", "frame", ")", "\n", "", "generate_video", "(", "\n", "video_option", ",", "\n", "results_dir", ",", "\n", "frames_with_text", ",", "\n", "ep_id", ",", "\n", "ckpt_no", ",", "\n", "{", "}", ",", "\n", "writer", ",", "\n", "fps", "=", "5", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.trainers.pacman_trainer.PACMANTrainer.train": [[129, 335], ["habitat.Env", "habitat_baselines.il.data.nav_data.NavDataset().shuffle().decode", "nav_dataset.map.map.map", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "habitat.logger.info", "nav_dataset.map.map.get_vocab_dicts", "habitat_baselines.il.models.models.NavPlannerControllerModel", "habitat_baselines.il.models.models.MaskedNLLCriterion", "habitat_baselines.il.models.models.MaskedNLLCriterion", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "habitat_baselines.il.metrics.NavMetric", "habitat.logger.info", "habitat_baselines.il.models.models.NavPlannerControllerModel.train().to", "filter", "habitat_baselines.common.tensorboard_utils.TensorboardWriter", "habitat_baselines.il.data.nav_data.NavDataset().shuffle", "len", "habitat_baselines.il.models.models.NavPlannerControllerModel.parameters", "float", "os.path.join", "habitat_baselines.il.models.models.NavPlannerControllerModel.train", "time.time", "enumerate", "math.ceil", "time.time", "habitat.logger.info", "habitat.logger.info", "habitat.logger.info", "print", "datetime.datetime.datetime.today().strftime", "planner_action_lengths.sort", "habitat_baselines.il.models.models.NavPlannerControllerModel.", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "habitat_baselines.il.models.models.MaskedNLLCriterion.", "habitat_baselines.il.models.models.MaskedNLLCriterion.", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "habitat_baselines.il.metrics.NavMetric.update", "torch.optim.Adam.step", "torch.optim.Adam.step", "habitat_baselines.il.metrics.NavMetric.get_stats", "pacman_trainer.PACMANTrainer.save_checkpoint", "habitat_baselines.il.data.nav_data.NavDataset", "item.to", "planner_action_lengths.cpu().numpy", "planner_actions_out[].reshape", "planner_masks[].reshape", "controller_outs[].reshape", "controller_masks[].reshape", "habitat.logger.info", "habitat.logger.info", "writer.add_scalar", "writer.add_scalar", "habitat_baselines.il.metrics.NavMetric.dump_log", "len", "habitat_baselines.il.models.models.NavPlannerControllerModel.state_dict", "datetime.datetime.datetime.today", "habitat_baselines.il.models.models.MaskedNLLCriterion.item", "habitat_baselines.il.models.models.MaskedNLLCriterion.item", "habitat_baselines.il.metrics.NavMetric.get_stat_string", "planner_action_lengths.cpu", "planner_action_lengths.max", "planner_action_lengths.max", "controller_action_lengths.max", "controller_action_lengths.max"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.map", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.nav_data.NavDataset.get_vocab_dicts", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.nn_skill.NnSkillPolicy.parameters", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.train", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.il.metrics.Metric.update", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.il.metrics.Metric.get_stats", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.save_checkpoint", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensorboard_utils.WeightsAndBiasesWriter.add_scalar", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensorboard_utils.WeightsAndBiasesWriter.add_scalar", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.il.metrics.Metric.dump_log", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.il.metrics.Metric.get_stat_string"], ["", "def", "train", "(", "self", ")", "->", "None", ":", "\n", "        ", "r\"\"\"Main method for training Navigation model of EQA.\n\n        Returns:\n            None\n        \"\"\"", "\n", "config", "=", "self", ".", "config", "\n", "\n", "with", "habitat", ".", "Env", "(", "config", ".", "TASK_CONFIG", ")", "as", "env", ":", "\n", "            ", "nav_dataset", "=", "(", "\n", "NavDataset", "(", "\n", "config", ",", "\n", "env", ",", "\n", "self", ".", "device", ",", "\n", ")", "\n", ".", "shuffle", "(", "1000", ")", "\n", ".", "decode", "(", "\"rgb\"", ")", "\n", ")", "\n", "\n", "nav_dataset", "=", "nav_dataset", ".", "map", "(", "nav_dataset", ".", "map_dataset_sample", ")", "\n", "\n", "train_loader", "=", "DataLoader", "(", "\n", "nav_dataset", ",", "batch_size", "=", "config", ".", "IL", ".", "NAV", ".", "batch_size", "\n", ")", "\n", "\n", "logger", ".", "info", "(", "\"train_loader has {} samples\"", ".", "format", "(", "len", "(", "nav_dataset", ")", ")", ")", "\n", "\n", "q_vocab_dict", ",", "_", "=", "nav_dataset", ".", "get_vocab_dicts", "(", ")", "\n", "\n", "model_kwargs", "=", "{", "\"q_vocab\"", ":", "q_vocab_dict", ".", "word2idx_dict", "}", "\n", "model", "=", "NavPlannerControllerModel", "(", "**", "model_kwargs", ")", "\n", "\n", "planner_loss_fn", "=", "MaskedNLLCriterion", "(", ")", "\n", "controller_loss_fn", "=", "MaskedNLLCriterion", "(", ")", "\n", "\n", "optim", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "float", "(", "config", ".", "IL", ".", "NAV", ".", "lr", ")", ",", "\n", ")", "\n", "\n", "metrics", "=", "NavMetric", "(", "\n", "info", "=", "{", "\"split\"", ":", "\"train\"", "}", ",", "\n", "metric_names", "=", "[", "\"planner_loss\"", ",", "\"controller_loss\"", "]", ",", "\n", "log_json", "=", "os", ".", "path", ".", "join", "(", "config", ".", "OUTPUT_LOG_DIR", ",", "\"train.json\"", ")", ",", "\n", ")", "\n", "\n", "epoch", "=", "1", "\n", "\n", "avg_p_loss", "=", "0.0", "\n", "avg_c_loss", "=", "0.0", "\n", "\n", "logger", ".", "info", "(", "model", ")", "\n", "model", ".", "train", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "with", "TensorboardWriter", "(", "\n", "\"train_{}/{}\"", ".", "format", "(", "\n", "config", ".", "TENSORBOARD_DIR", ",", "\n", "datetime", ".", "today", "(", ")", ".", "strftime", "(", "\"%Y-%m-%d-%H:%M\"", ")", ",", "\n", ")", ",", "\n", "flush_secs", "=", "self", ".", "flush_secs", ",", "\n", ")", "as", "writer", ":", "\n", "                ", "while", "epoch", "<=", "config", ".", "IL", ".", "NAV", ".", "max_epochs", ":", "\n", "                    ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "for", "t", ",", "batch", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "                        ", "batch", "=", "(", "\n", "item", ".", "to", "(", "self", ".", "device", ",", "non_blocking", "=", "True", ")", "\n", "for", "item", "in", "batch", "\n", ")", "\n", "(", "\n", "idx", ",", "\n", "questions", ",", "\n", "_", ",", "\n", "planner_img_feats", ",", "\n", "planner_actions_in", ",", "\n", "planner_actions_out", ",", "\n", "planner_action_lengths", ",", "\n", "planner_masks", ",", "\n", "controller_img_feats", ",", "\n", "controller_actions_in", ",", "\n", "planner_hidden_idx", ",", "\n", "controller_outs", ",", "\n", "controller_action_lengths", ",", "\n", "controller_masks", ",", "\n", ")", "=", "batch", "\n", "\n", "(", "\n", "planner_action_lengths", ",", "\n", "perm_idx", ",", "\n", ")", "=", "planner_action_lengths", ".", "sort", "(", "0", ",", "descending", "=", "True", ")", "\n", "questions", "=", "questions", "[", "perm_idx", "]", "\n", "\n", "planner_img_feats", "=", "planner_img_feats", "[", "perm_idx", "]", "\n", "planner_actions_in", "=", "planner_actions_in", "[", "perm_idx", "]", "\n", "planner_actions_out", "=", "planner_actions_out", "[", "perm_idx", "]", "\n", "planner_masks", "=", "planner_masks", "[", "perm_idx", "]", "\n", "\n", "controller_img_feats", "=", "controller_img_feats", "[", "perm_idx", "]", "\n", "controller_actions_in", "=", "controller_actions_in", "[", "perm_idx", "]", "\n", "controller_outs", "=", "controller_outs", "[", "perm_idx", "]", "\n", "planner_hidden_idx", "=", "planner_hidden_idx", "[", "perm_idx", "]", "\n", "controller_action_lengths", "=", "controller_action_lengths", "[", "\n", "perm_idx", "\n", "]", "\n", "controller_masks", "=", "controller_masks", "[", "perm_idx", "]", "\n", "\n", "(", "\n", "planner_scores", ",", "\n", "controller_scores", ",", "\n", "planner_hidden", ",", "\n", ")", "=", "model", "(", "\n", "questions", ",", "\n", "planner_img_feats", ",", "\n", "planner_actions_in", ",", "\n", "planner_action_lengths", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "planner_hidden_idx", ",", "\n", "controller_img_feats", ",", "\n", "controller_actions_in", ",", "\n", "controller_action_lengths", ",", "\n", ")", "\n", "\n", "planner_logprob", "=", "F", ".", "log_softmax", "(", "planner_scores", ",", "dim", "=", "1", ")", "\n", "controller_logprob", "=", "F", ".", "log_softmax", "(", "\n", "controller_scores", ",", "dim", "=", "1", "\n", ")", "\n", "\n", "planner_loss", "=", "planner_loss_fn", "(", "\n", "planner_logprob", ",", "\n", "planner_actions_out", "[", "\n", ":", ",", ":", "planner_action_lengths", ".", "max", "(", ")", "\n", "]", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "\n", "planner_masks", "[", "\n", ":", ",", ":", "planner_action_lengths", ".", "max", "(", ")", "\n", "]", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "\n", ")", "\n", "\n", "controller_loss", "=", "controller_loss_fn", "(", "\n", "controller_logprob", ",", "\n", "controller_outs", "[", "\n", ":", ",", ":", "controller_action_lengths", ".", "max", "(", ")", "\n", "]", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "\n", "controller_masks", "[", "\n", ":", ",", ":", "controller_action_lengths", ".", "max", "(", ")", "\n", "]", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "\n", ")", "\n", "\n", "# zero grad", "\n", "optim", ".", "zero_grad", "(", ")", "\n", "\n", "# update metrics", "\n", "metrics", ".", "update", "(", "\n", "[", "planner_loss", ".", "item", "(", ")", ",", "controller_loss", ".", "item", "(", ")", "]", "\n", ")", "\n", "\n", "(", "planner_loss", "+", "controller_loss", ")", ".", "backward", "(", ")", "\n", "\n", "optim", ".", "step", "(", ")", "\n", "\n", "(", "planner_loss", ",", "controller_loss", ")", "=", "metrics", ".", "get_stats", "(", ")", "\n", "\n", "avg_p_loss", "+=", "planner_loss", "\n", "avg_c_loss", "+=", "controller_loss", "\n", "\n", "if", "t", "%", "config", ".", "LOG_INTERVAL", "==", "0", ":", "\n", "                            ", "logger", ".", "info", "(", "\"Epoch: {}\"", ".", "format", "(", "epoch", ")", ")", "\n", "logger", ".", "info", "(", "metrics", ".", "get_stat_string", "(", ")", ")", "\n", "\n", "writer", ".", "add_scalar", "(", "\"planner loss\"", ",", "planner_loss", ",", "t", ")", "\n", "writer", ".", "add_scalar", "(", "\n", "\"controller loss\"", ",", "controller_loss", ",", "t", "\n", ")", "\n", "\n", "metrics", ".", "dump_log", "(", ")", "\n", "\n", "# Dataloader length for IterableDataset doesn't take into", "\n", "# account batch size for Pytorch v < 1.6.0", "\n", "", "", "num_batches", "=", "math", ".", "ceil", "(", "\n", "len", "(", "nav_dataset", ")", "/", "config", ".", "IL", ".", "NAV", ".", "batch_size", "\n", ")", "\n", "\n", "avg_p_loss", "/=", "num_batches", "\n", "avg_c_loss", "/=", "num_batches", "\n", "\n", "end_time", "=", "time", ".", "time", "(", ")", "\n", "time_taken", "=", "\"{:.1f}\"", ".", "format", "(", "(", "end_time", "-", "start_time", ")", "/", "60", ")", "\n", "\n", "logger", ".", "info", "(", "\n", "\"Epoch {} completed. Time taken: {} minutes.\"", ".", "format", "(", "\n", "epoch", ",", "time_taken", "\n", ")", "\n", ")", "\n", "\n", "logger", ".", "info", "(", "\n", "\"Average planner loss: {:.2f}\"", ".", "format", "(", "avg_p_loss", ")", "\n", ")", "\n", "logger", ".", "info", "(", "\n", "\"Average controller loss: {:.2f}\"", ".", "format", "(", "avg_c_loss", ")", "\n", ")", "\n", "\n", "print", "(", "\"-----------------------------------------\"", ")", "\n", "\n", "if", "epoch", "%", "config", ".", "CHECKPOINT_INTERVAL", "==", "0", ":", "\n", "                        ", "self", ".", "save_checkpoint", "(", "\n", "model", ".", "state_dict", "(", ")", ",", "\"epoch_{}.ckpt\"", ".", "format", "(", "epoch", ")", "\n", ")", "\n", "\n", "", "epoch", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.trainers.pacman_trainer.PACMANTrainer._eval_checkpoint": [[336, 661], ["config.defrost", "config.freeze", "habitat.Env", "habitat_baselines.il.data.nav_data.NavDataset().decode", "nav_dataset.map.map.map", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "habitat.logger.info", "nav_dataset.map.map.get_vocab_dicts", "habitat_baselines.il.models.models.NavPlannerControllerModel", "torch.load", "torch.load", "torch.load", "torch.load", "habitat_baselines.il.models.models.NavPlannerControllerModel.load_state_dict", "habitat_baselines.il.models.models.NavPlannerControllerModel.eval().to", "config.RESULTS_DIR.format", "habitat_baselines.il.metrics.NavMetric", "enumerate", "enumerate", "habitat_baselines.il.metrics.NavMetric.update", "habitat_baselines.il.data.nav_data.NavDataset", "len", "habitat_baselines.il.models.models.NavPlannerControllerModel.eval", "os.path.join", "habitat.logger.info", "habitat.logger.info", "print", "q_vocab_dict.token_idx_2_string", "habitat.logger.info", "pacman_trainer.PACMANTrainer._save_nav_results", "question.to.to.to", "habitat_baselines.il.models.models.NavPlannerControllerModel.planner_nav_rnn.init_hidden", "nav_dataset.map.map.get_hierarchical_features_till_spawn", "env.sim.set_agent_state", "env.sim.geodesic_distance", "range", "numpy.array().min", "metrics_list.append", "metrics_list.append", "idx.item", "actions[].numpy", "planner_actions_in.to.to.to", "planner_img_feats.to.to.to", "range", "invalids.append", "int", "dists_to_target.append", "pos_queue.append", "env.sim.step", "len", "habitat_baselines.il.metrics.NavMetric.get_stat_string", "action_length.item", "planner_actions_in.to.to.size", "habitat_baselines.il.models.models.NavPlannerControllerModel.planner_step", "float", "max", "env.sim.get_agent_state", "env.sim.geodesic_distance", "numpy.array", "len", "planner_actions_in[].view", "idx.item", "torch.utils.data.DataLoader.dataset.get_img_features().view", "torch.utils.data.DataLoader.dataset.get_img_features().view", "controller_img_feats.to().view", "torch.LongTensor().fill_().to", "torch.LongTensor().fill_().to", "torch.LongTensor().fill_().to", "torch.LongTensor().fill_().to", "habitat_baselines.il.models.models.NavPlannerControllerModel.controller_step", "torch.softmax", "torch.softmax", "int", "controller_actions.append", "torch.softmax", "torch.softmax", "int", "planner_actions.append", "imgs.append", "torch.LongTensor().fill_().to", "torch.LongTensor().fill_().to", "torch.LongTensor().fill_().to", "torch.LongTensor().fill_().to", "habitat_baselines.il.models.models.NavPlannerControllerModel.planner_step", "torch.utils.data.DataLoader.dataset.get_img_features", "torch.utils.data.DataLoader.dataset.get_img_features", "controller_img_feats.to", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "[].data.cpu().numpy", "[].data.cpu().numpy", "action_length.item", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "[].data.cpu", "[].data.cpu", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.softmax.max", "torch.softmax.max"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.map", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.nav_data.NavDataset.get_vocab_dicts", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.load", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.load", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.load", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.load", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.il.metrics.Metric.update", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_trainer.BaseTrainer.eval", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.utils.VocabDict.token_idx_2_string", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.trainers.pacman_trainer.PACMANTrainer._save_nav_results", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.models.NavRnn.init_hidden", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.nav_data.NavDataset.get_hierarchical_features_till_spawn", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSim.set_agent_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.geodesic_distance", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.il.metrics.Metric.get_stat_string", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.models.NavPlannerControllerModel.planner_step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.get_agent_state", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.geodesic_distance", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.models.NavPlannerControllerModel.controller_step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.models.models.NavPlannerControllerModel.planner_step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.nav_data.NavDataset.get_img_features", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.nav_data.NavDataset.get_img_features", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to"], ["", "", "", "", "def", "_eval_checkpoint", "(", "\n", "self", ",", "\n", "checkpoint_path", ":", "str", ",", "\n", "writer", ":", "TensorboardWriter", ",", "\n", "checkpoint_index", ":", "int", "=", "0", ",", "\n", ")", "->", "None", ":", "\n", "        ", "r\"\"\"Evaluates a single checkpoint.\n\n        Args:\n            checkpoint_path: path of checkpoint\n            writer: tensorboard writer object for logging to tensorboard\n            checkpoint_index: index of cur checkpoint for logging\n\n        Returns:\n            None\n        \"\"\"", "\n", "config", "=", "self", ".", "config", "\n", "\n", "config", ".", "defrost", "(", ")", "\n", "config", ".", "TASK_CONFIG", ".", "DATASET", ".", "SPLIT", "=", "self", ".", "config", ".", "EVAL", ".", "SPLIT", "\n", "config", ".", "freeze", "(", ")", "\n", "\n", "with", "habitat", ".", "Env", "(", "config", ".", "TASK_CONFIG", ")", "as", "env", ":", "\n", "            ", "nav_dataset", "=", "NavDataset", "(", "\n", "config", ",", "\n", "env", ",", "\n", "self", ".", "device", ",", "\n", ")", ".", "decode", "(", "\"rgb\"", ")", "\n", "\n", "nav_dataset", "=", "nav_dataset", ".", "map", "(", "nav_dataset", ".", "map_dataset_sample", ")", "\n", "\n", "eval_loader", "=", "DataLoader", "(", "nav_dataset", ")", "\n", "\n", "logger", ".", "info", "(", "\"eval_loader has {} samples\"", ".", "format", "(", "len", "(", "nav_dataset", ")", ")", ")", "\n", "\n", "q_vocab_dict", ",", "ans_vocab_dict", "=", "nav_dataset", ".", "get_vocab_dicts", "(", ")", "\n", "\n", "model_kwargs", "=", "{", "\"q_vocab\"", ":", "q_vocab_dict", ".", "word2idx_dict", "}", "\n", "model", "=", "NavPlannerControllerModel", "(", "**", "model_kwargs", ")", "\n", "\n", "invalids", "=", "[", "]", "\n", "\n", "state_dict", "=", "torch", ".", "load", "(", "checkpoint_path", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "model", ".", "eval", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "results_dir", "=", "config", ".", "RESULTS_DIR", ".", "format", "(", "split", "=", "\"val\"", ")", "\n", "video_option", "=", "self", ".", "config", ".", "VIDEO_OPTION", "\n", "\n", "metrics", "=", "NavMetric", "(", "\n", "info", "=", "{", "\"split\"", ":", "\"val\"", "}", ",", "\n", "metric_names", "=", "[", "\n", "\"{}_{}\"", ".", "format", "(", "y", ",", "x", ")", "\n", "for", "x", "in", "[", "10", ",", "30", ",", "50", ",", "\"rand_init\"", "]", "\n", "for", "z", "in", "[", "\"\"", ",", "\"_f\"", "]", "\n", "for", "y", "in", "[", "\n", "*", "[", "\"d_{}{}\"", ".", "format", "(", "k", ",", "z", ")", "for", "k", "in", "[", "0", ",", "\"T\"", ",", "\"D\"", ",", "\"min\"", "]", "]", ",", "\n", "*", "[", "w", "for", "w", "in", "[", "\"stop\"", ",", "\"ep_len\"", "]", "if", "z", "==", "\"\"", "]", ",", "\n", "]", "\n", "]", ",", "\n", "log_json", "=", "os", ".", "path", ".", "join", "(", "config", ".", "OUTPUT_LOG_DIR", ",", "\"eval.json\"", ")", ",", "\n", ")", "\n", "\n", "for", "t", ",", "batch", "in", "enumerate", "(", "eval_loader", ")", ":", "\n", "                ", "idx", ",", "question", ",", "answer", ",", "actions", ",", "action_length", ",", "goal_pos", "=", "batch", "\n", "\n", "metrics_slug", "=", "{", "}", "\n", "imgs", "=", "[", "]", "# type:ignore", "\n", "for", "i", "in", "[", "10", ",", "30", ",", "50", ",", "\"rand_init\"", "]", ":", "\n", "                    ", "for", "j", "in", "[", "\"pred\"", ",", "\"fwd-only\"", "]", ":", "\n", "                        ", "question", "=", "question", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "controller_step", "=", "False", "\n", "planner_hidden", "=", "model", ".", "planner_nav_rnn", ".", "init_hidden", "(", "1", ")", "\n", "\n", "# get hierarchical action history", "\n", "(", "\n", "planner_actions_in", ",", "\n", "planner_img_feats", ",", "\n", "controller_step", ",", "\n", "controller_action_in", ",", "\n", "controller_img_feats", ",", "\n", "init_pos", ",", "\n", "controller_action_counter", ",", "\n", ")", "=", "nav_dataset", ".", "get_hierarchical_features_till_spawn", "(", "\n", "idx", ".", "item", "(", ")", ",", "\n", "actions", "[", "0", ",", ":", "action_length", ".", "item", "(", ")", "]", ".", "numpy", "(", ")", ",", "\n", "i", "if", "i", "!=", "\"rand_init\"", "else", "action_length", ".", "item", "(", ")", ",", "\n", "config", ".", "IL", ".", "NAV", ".", "max_controller_actions", ",", "\n", ")", "\n", "if", "j", "==", "\"pred\"", ":", "\n", "                            ", "planner_actions_in", "=", "planner_actions_in", ".", "to", "(", "\n", "self", ".", "device", "\n", ")", "\n", "planner_img_feats", "=", "planner_img_feats", ".", "to", "(", "\n", "self", ".", "device", "\n", ")", "\n", "\n", "for", "step", "in", "range", "(", "planner_actions_in", ".", "size", "(", "0", ")", ")", ":", "\n", "\n", "                                ", "(", "\n", "planner_scores", ",", "\n", "planner_hidden", ",", "\n", ")", "=", "model", ".", "planner_step", "(", "\n", "question", ",", "\n", "planner_img_feats", "[", "step", "]", "[", "\n", "(", "None", ",", ")", "*", "2", "\n", "]", ",", "# unsqueezing twice", "\n", "planner_actions_in", "[", "step", "]", ".", "view", "(", "1", ",", "1", ")", ",", "\n", "planner_hidden", ",", "\n", ")", "\n", "\n", "", "", "env", ".", "sim", ".", "set_agent_state", "(", "\n", "init_pos", ".", "position", ",", "init_pos", ".", "rotation", "\n", ")", "\n", "init_dist_to_target", "=", "env", ".", "sim", ".", "geodesic_distance", "(", "\n", "init_pos", ".", "position", ",", "goal_pos", "\n", ")", "\n", "\n", "if", "(", "\n", "init_dist_to_target", "<", "0", "\n", "or", "init_dist_to_target", "==", "float", "(", "\"inf\"", ")", "\n", ")", ":", "# unreachable", "\n", "                            ", "invalids", ".", "append", "(", "[", "idx", ".", "item", "(", ")", ",", "i", "]", ")", "\n", "continue", "\n", "\n", "", "dists_to_target", ",", "pos_queue", "=", "[", "init_dist_to_target", "]", ",", "[", "\n", "init_pos", "\n", "]", "\n", "if", "j", "==", "\"pred\"", ":", "\n", "                            ", "planner_actions", ",", "controller_actions", "=", "[", "]", ",", "[", "]", "\n", "\n", "if", "config", ".", "IL", ".", "NAV", ".", "max_controller_actions", ">", "1", ":", "\n", "                                ", "controller_action_counter", "=", "(", "\n", "controller_action_counter", "\n", "%", "config", ".", "IL", ".", "NAV", ".", "max_controller_actions", "\n", ")", "\n", "controller_action_counter", "=", "max", "(", "\n", "controller_action_counter", "-", "1", ",", "0", "\n", ")", "\n", "", "else", ":", "\n", "                                ", "controller_action_counter", "=", "0", "\n", "\n", "", "first_step", "=", "True", "\n", "first_step_is_controller", "=", "controller_step", "\n", "planner_step", "=", "True", "\n", "action", "=", "int", "(", "controller_action_in", ")", "\n", "\n", "", "img", "=", "None", "\n", "for", "episode_length", "in", "range", "(", "\n", "config", ".", "IL", ".", "NAV", ".", "max_episode_length", "\n", ")", ":", "\n", "                            ", "if", "j", "==", "\"pred\"", ":", "\n", "                                ", "if", "not", "first_step", ":", "\n", "                                    ", "if", "(", "\n", "i", "==", "30", "\n", ")", ":", "# saving results for 30-step walked back case", "\n", "                                        ", "imgs", ".", "append", "(", "img", ")", "\n", "", "img_feat", "=", "(", "\n", "eval_loader", ".", "dataset", ".", "get_img_features", "(", "\n", "img", ",", "preprocess", "=", "True", "\n", ")", ".", "view", "(", "1", ",", "1", ",", "4608", ")", "\n", ")", "\n", "", "else", ":", "\n", "                                    ", "img_feat", "=", "controller_img_feats", ".", "to", "(", "\n", "self", ".", "device", "\n", ")", ".", "view", "(", "1", ",", "1", ",", "4608", ")", "\n", "\n", "", "if", "not", "first_step", "or", "first_step_is_controller", ":", "\n", "# query controller to continue or not", "\n", "                                    ", "controller_action_in", "=", "(", "\n", "torch", ".", "LongTensor", "(", "1", ",", "1", ")", "\n", ".", "fill_", "(", "action", ")", "\n", ".", "to", "(", "self", ".", "device", ")", "\n", ")", "\n", "controller_scores", "=", "model", ".", "controller_step", "(", "\n", "img_feat", ",", "\n", "controller_action_in", ",", "\n", "planner_hidden", "[", "0", "]", ",", "\n", ")", "\n", "\n", "prob", "=", "F", ".", "softmax", "(", "controller_scores", ",", "dim", "=", "1", ")", "\n", "controller_action", "=", "int", "(", "\n", "prob", ".", "max", "(", "1", ")", "[", "1", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", ")", "\n", "\n", "if", "(", "\n", "controller_action", "==", "1", "\n", "and", "controller_action_counter", "\n", "<", "config", ".", "IL", ".", "NAV", ".", "max_controller_actions", "\n", "-", "1", "\n", ")", ":", "\n", "                                        ", "controller_action_counter", "+=", "1", "\n", "planner_step", "=", "False", "\n", "", "else", ":", "\n", "                                        ", "controller_action_counter", "=", "0", "\n", "planner_step", "=", "True", "\n", "controller_action", "=", "0", "\n", "\n", "", "controller_actions", ".", "append", "(", "\n", "controller_action", "\n", ")", "\n", "first_step", "=", "False", "\n", "\n", "", "if", "planner_step", ":", "\n", "                                    ", "if", "not", "first_step", ":", "\n", "                                        ", "action_in", "=", "(", "\n", "torch", ".", "LongTensor", "(", "1", ",", "1", ")", "\n", ".", "fill_", "(", "action", "+", "1", ")", "\n", ".", "to", "(", "self", ".", "device", ")", "\n", ")", "\n", "(", "\n", "planner_scores", ",", "\n", "planner_hidden", ",", "\n", ")", "=", "model", ".", "planner_step", "(", "\n", "question", ",", "\n", "img_feat", ",", "\n", "action_in", ",", "\n", "planner_hidden", ",", "\n", ")", "\n", "", "prob", "=", "F", ".", "softmax", "(", "planner_scores", ",", "dim", "=", "1", ")", "\n", "action", "=", "int", "(", "\n", "prob", ".", "max", "(", "1", ")", "[", "1", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", ")", "\n", "planner_actions", ".", "append", "(", "action", ")", "\n", "\n", "", "", "else", ":", "\n", "                                ", "action", "=", "0", "\n", "\n", "", "episode_done", "=", "(", "\n", "action", "==", "3", "\n", "or", "episode_length", "\n", ">=", "config", ".", "IL", ".", "NAV", ".", "max_episode_length", "\n", ")", "\n", "\n", "agent_pos", "=", "env", ".", "sim", ".", "get_agent_state", "(", ")", ".", "position", "\n", "\n", "dists_to_target", ".", "append", "(", "\n", "env", ".", "sim", ".", "geodesic_distance", "(", "agent_pos", ",", "goal_pos", ")", "\n", ")", "\n", "pos_queue", ".", "append", "(", "[", "agent_pos", "]", ")", "\n", "\n", "if", "episode_done", ":", "\n", "                                ", "break", "\n", "\n", "", "if", "action", "==", "0", ":", "\n", "                                ", "my_action", "=", "1", "# forward", "\n", "", "elif", "action", "==", "1", ":", "\n", "                                ", "my_action", "=", "2", "# left", "\n", "", "elif", "action", "==", "2", ":", "\n", "                                ", "my_action", "=", "3", "# right", "\n", "", "elif", "action", "==", "3", ":", "\n", "                                ", "my_action", "=", "0", "# stop", "\n", "\n", "", "observations", "=", "env", ".", "sim", ".", "step", "(", "my_action", ")", "\n", "img", "=", "observations", "[", "\"rgb\"", "]", "\n", "first_step", "=", "False", "\n", "\n", "# compute stats", "\n", "", "m", "=", "\"\"", "if", "j", "==", "\"pred\"", "else", "\"_f\"", "\n", "metrics_slug", "[", "\n", "\"d_T{}_{}\"", ".", "format", "(", "m", ",", "i", ")", "\n", "]", "=", "dists_to_target", "[", "-", "1", "]", "\n", "metrics_slug", "[", "\"d_D{}_{}\"", ".", "format", "(", "m", ",", "i", ")", "]", "=", "(", "\n", "dists_to_target", "[", "0", "]", "-", "dists_to_target", "[", "-", "1", "]", "\n", ")", "\n", "metrics_slug", "[", "\"d_min{}_{}\"", ".", "format", "(", "m", ",", "i", ")", "]", "=", "np", ".", "array", "(", "\n", "dists_to_target", "\n", ")", ".", "min", "(", ")", "\n", "\n", "if", "j", "!=", "\"fwd-only\"", ":", "\n", "                            ", "metrics_slug", "[", "\n", "\"ep_len_{}\"", ".", "format", "(", "i", ")", "\n", "]", "=", "episode_length", "\n", "if", "action", "==", "3", ":", "\n", "                                ", "metrics_slug", "[", "\"stop_{}\"", ".", "format", "(", "i", ")", "]", "=", "1", "\n", "", "else", ":", "\n", "                                ", "metrics_slug", "[", "\"stop_{}\"", ".", "format", "(", "i", ")", "]", "=", "0", "\n", "\n", "", "metrics_slug", "[", "\"d_0_{}\"", ".", "format", "(", "i", ")", "]", "=", "dists_to_target", "[", "\n", "0", "\n", "]", "\n", "\n", "# collate and update metrics", "\n", "", "", "", "metrics_list", "=", "[", "]", "\n", "for", "ind", ",", "i", "in", "enumerate", "(", "metrics", ".", "metric_names", ")", ":", "\n", "                    ", "if", "i", "not", "in", "metrics_slug", ":", "\n", "                        ", "metrics_list", ".", "append", "(", "metrics", ".", "metrics", "[", "ind", "]", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                        ", "metrics_list", ".", "append", "(", "metrics_slug", "[", "i", "]", ")", "\n", "\n", "# update metrics", "\n", "", "", "metrics", ".", "update", "(", "metrics_list", ")", "\n", "\n", "if", "t", "%", "config", ".", "LOG_INTERVAL", "==", "0", ":", "\n", "                    ", "logger", ".", "info", "(", "\n", "\"Valid cases: {}; Invalid cases: {}\"", ".", "format", "(", "\n", "(", "t", "+", "1", ")", "*", "8", "-", "len", "(", "invalids", ")", ",", "len", "(", "invalids", ")", "\n", ")", "\n", ")", "\n", "logger", ".", "info", "(", "\n", "\"EVAL: Avg metrics: {}\"", ".", "format", "(", "\n", "metrics", ".", "get_stat_string", "(", "mode", "=", "0", ")", "\n", ")", "\n", ")", "\n", "print", "(", "\n", "\"-----------------------------------------------------\"", "\n", ")", "\n", "\n", "", "if", "(", "\n", "config", ".", "EVAL_SAVE_RESULTS", "\n", "and", "t", "%", "config", ".", "EVAL_SAVE_RESULTS_INTERVAL", "==", "0", "\n", ")", ":", "\n", "                    ", "q_string", "=", "q_vocab_dict", ".", "token_idx_2_string", "(", "question", "[", "0", "]", ")", "\n", "logger", ".", "info", "(", "\"Question: {}\"", ".", "format", "(", "q_string", ")", ")", "\n", "\n", "self", ".", "_save_nav_results", "(", "\n", "checkpoint_path", ",", "\n", "t", ",", "\n", "question", ",", "\n", "imgs", ",", "\n", "q_vocab_dict", ",", "\n", "results_dir", ",", "\n", "writer", ",", "\n", "video_option", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.trainers.vqa_trainer.VQATrainer.__init__": [[33, 44], ["habitat_baselines.common.base_il_trainer.BaseILTrainer.__init__", "torch.cuda.is_available", "torch.device", "torch.device", "habitat.logger.info"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "config", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "device", "=", "(", "\n", "torch", ".", "device", "(", "\"cuda\"", ",", "self", ".", "config", ".", "TORCH_GPU_ID", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "else", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", ")", "\n", "\n", "if", "config", "is", "not", "None", ":", "\n", "            ", "logger", ".", "info", "(", "f\"config: {config}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.trainers.vqa_trainer.VQATrainer._make_results_dir": [[45, 49], ["vqa_trainer.VQATrainer.config.RESULTS_DIR.format", "os.makedirs"], "methods", ["None"], ["", "", "def", "_make_results_dir", "(", "self", ")", ":", "\n", "        ", "r\"\"\"Makes directory for saving VQA eval results.\"\"\"", "\n", "dir_name", "=", "self", ".", "config", ".", "RESULTS_DIR", ".", "format", "(", "split", "=", "\"val\"", ")", "\n", "os", ".", "makedirs", "(", "dir_name", ",", "exist_ok", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.trainers.vqa_trainer.VQATrainer._save_vqa_results": [[50, 103], ["episode_ids[].item", "q_vocab_dict.token_idx_2_string", "scores.max", "habitat.logger.info", "habitat.logger.info", "habitat.logger.info", "vqa_trainer.VQATrainer.config.RESULTS_DIR.format", "os.path.join", "habitat_baselines.utils.visualizations.utils.save_vqa_image_results", "sorted", "sorted", "ans_vocab_dict.word2idx_dict.keys", "ans_vocab_dict.word2idx_dict.keys"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.utils.VocabDict.token_idx_2_string", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.visualizations.utils.save_vqa_image_results"], ["", "def", "_save_vqa_results", "(", "\n", "self", ",", "\n", "ckpt_idx", ":", "int", ",", "\n", "episode_ids", ":", "torch", ".", "Tensor", ",", "\n", "questions", ":", "torch", ".", "Tensor", ",", "\n", "images", ":", "torch", ".", "Tensor", ",", "\n", "pred_scores", ":", "torch", ".", "Tensor", ",", "\n", "gt_answers", ":", "torch", ".", "Tensor", ",", "\n", "q_vocab_dict", ":", "VocabDict", ",", "\n", "ans_vocab_dict", ":", "VocabDict", ",", "\n", ")", "->", "None", ":", "\n", "\n", "        ", "r\"\"\"For saving VQA results.\n        Args:\n            ckpt_idx: idx of checkpoint being evaluated\n            episode_ids: episode ids of batch\n            questions: input questions to model\n            images: images' tensor containing input frames\n            pred_scores: model prediction scores\n            gt_answers: ground truth answers\n            ground_truth: ground truth answer\n            q_vocab_dict: Question VocabDict\n            ans_vocab_dict: Answer VocabDict\n\n        Returns:\n            None\n        \"\"\"", "\n", "episode_id", "=", "episode_ids", "[", "0", "]", ".", "item", "(", ")", "\n", "question", "=", "questions", "[", "0", "]", "\n", "images", "=", "images", "[", "0", "]", "\n", "gt_answer", "=", "gt_answers", "[", "0", "]", "\n", "scores", "=", "pred_scores", "[", "0", "]", "\n", "\n", "q_string", "=", "q_vocab_dict", ".", "token_idx_2_string", "(", "question", ")", "\n", "\n", "_", ",", "index", "=", "scores", ".", "max", "(", "0", ")", "\n", "pred_answer", "=", "sorted", "(", "ans_vocab_dict", ".", "word2idx_dict", ".", "keys", "(", ")", ")", "[", "index", "]", "\n", "gt_answer", "=", "sorted", "(", "ans_vocab_dict", ".", "word2idx_dict", ".", "keys", "(", ")", ")", "[", "gt_answer", "]", "\n", "\n", "logger", ".", "info", "(", "\"Question: {}\"", ".", "format", "(", "q_string", ")", ")", "\n", "logger", ".", "info", "(", "\"Predicted answer: {}\"", ".", "format", "(", "pred_answer", ")", ")", "\n", "logger", ".", "info", "(", "\"Ground-truth answer: {}\"", ".", "format", "(", "gt_answer", ")", ")", "\n", "\n", "result_path", "=", "self", ".", "config", ".", "RESULTS_DIR", ".", "format", "(", "\n", "split", "=", "self", ".", "config", ".", "TASK_CONFIG", ".", "DATASET", ".", "SPLIT", "\n", ")", "\n", "\n", "result_path", "=", "os", ".", "path", ".", "join", "(", "\n", "result_path", ",", "\"ckpt_{}_{}_image.jpg\"", ".", "format", "(", "ckpt_idx", ",", "episode_id", ")", "\n", ")", "\n", "\n", "save_vqa_image_results", "(", "\n", "images", ",", "q_string", ",", "pred_answer", ",", "gt_answer", ",", "result_path", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.trainers.vqa_trainer.VQATrainer.train": [[105, 266], ["habitat_baselines.il.data.data.EQADataset().shuffle().to_tuple().map", "torch.utils.data.DataLoader", "habitat.logger.info", "habitat_baselines.il.data.data.EQADataset().shuffle().to_tuple().map.get_vocab_dicts", "habitat_baselines.il.models.models.VqaLstmCnnAttentionModel", "torch.nn.CrossEntropyLoss", "torch.optim.Adam", "habitat_baselines.il.metrics.VqaMetric", "habitat.logger.info", "habitat_baselines.il.models.models.VqaLstmCnnAttentionModel.train().to", "filter", "habitat_baselines.il.models.models.VqaLstmCnnAttentionModel.cnn.eval", "habitat_baselines.common.tensorboard_utils.TensorboardWriter", "habitat_baselines.il.data.data.EQADataset().shuffle().to_tuple", "len", "habitat_baselines.il.models.models.VqaLstmCnnAttentionModel.parameters", "float", "os.path.join", "habitat_baselines.il.models.models.VqaLstmCnnAttentionModel.train", "time.time", "math.ceil", "time.time", "habitat.logger.info", "habitat.logger.info", "habitat.logger.info", "habitat.logger.info", "habitat.logger.info", "print", "vqa_trainer.VQATrainer.save_checkpoint", "torch.optim.Adam.zero_grad", "questions.to.to.to", "answers.to.to.to", "frame_queue.to.to.to", "habitat_baselines.il.models.models.VqaLstmCnnAttentionModel.", "torch.nn.CrossEntropyLoss.", "habitat_baselines.il.metrics.VqaMetric.compute_ranks", "habitat_baselines.il.metrics.VqaMetric.update", "torch.nn.CrossEntropyLoss.backward", "torch.optim.Adam.step", "habitat_baselines.il.metrics.VqaMetric.get_stats", "habitat_baselines.il.models.models.VqaLstmCnnAttentionModel.state_dict", "habitat_baselines.il.data.data.EQADataset().shuffle", "scores.data.cpu", "habitat.logger.info", "habitat.logger.info", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "habitat_baselines.il.metrics.VqaMetric.dump_log", "len", "torch.nn.CrossEntropyLoss.item", "habitat_baselines.il.metrics.VqaMetric.get_stat_string", "habitat_baselines.il.data.data.EQADataset", "range"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.map", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.nav_data.NavDataset.get_vocab_dicts", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_trainer.BaseTrainer.eval", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.skills.nn_skill.NnSkillPolicy.parameters", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.train", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.save_checkpoint", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.il.metrics.VqaMetric.compute_ranks", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.il.metrics.Metric.update", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.step", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.il.metrics.Metric.get_stats", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensorboard_utils.WeightsAndBiasesWriter.add_scalar", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensorboard_utils.WeightsAndBiasesWriter.add_scalar", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensorboard_utils.WeightsAndBiasesWriter.add_scalar", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensorboard_utils.WeightsAndBiasesWriter.add_scalar", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.il.metrics.Metric.dump_log", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.il.metrics.Metric.get_stat_string"], ["", "def", "train", "(", "self", ")", "->", "None", ":", "\n", "        ", "r\"\"\"Main method for training VQA (Answering) model of EQA.\n\n        Returns:\n            None\n        \"\"\"", "\n", "config", "=", "self", ".", "config", "\n", "\n", "# env = habitat.Env(config=config.TASK_CONFIG)", "\n", "\n", "vqa_dataset", "=", "(", "\n", "EQADataset", "(", "\n", "config", ",", "\n", "input_type", "=", "\"vqa\"", ",", "\n", "num_frames", "=", "config", ".", "IL", ".", "VQA", ".", "num_frames", ",", "\n", ")", "\n", ".", "shuffle", "(", "1000", ")", "\n", ".", "to_tuple", "(", "\n", "\"episode_id\"", ",", "\n", "\"question\"", ",", "\n", "\"answer\"", ",", "\n", "*", "[", "\"{0:0=3d}.jpg\"", ".", "format", "(", "x", ")", "for", "x", "in", "range", "(", "0", ",", "5", ")", "]", ",", "\n", ")", "\n", ".", "map", "(", "img_bytes_2_np_array", ")", "\n", ")", "\n", "\n", "train_loader", "=", "DataLoader", "(", "\n", "vqa_dataset", ",", "batch_size", "=", "config", ".", "IL", ".", "VQA", ".", "batch_size", "\n", ")", "\n", "\n", "logger", ".", "info", "(", "\"train_loader has {} samples\"", ".", "format", "(", "len", "(", "vqa_dataset", ")", ")", ")", "\n", "\n", "q_vocab_dict", ",", "ans_vocab_dict", "=", "vqa_dataset", ".", "get_vocab_dicts", "(", ")", "\n", "\n", "model_kwargs", "=", "{", "\n", "\"q_vocab\"", ":", "q_vocab_dict", ".", "word2idx_dict", ",", "\n", "\"ans_vocab\"", ":", "ans_vocab_dict", ".", "word2idx_dict", ",", "\n", "\"eqa_cnn_pretrain_ckpt_path\"", ":", "config", ".", "EQA_CNN_PRETRAIN_CKPT_PATH", ",", "\n", "\"freeze_encoder\"", ":", "config", ".", "IL", ".", "VQA", ".", "freeze_encoder", ",", "\n", "}", "\n", "\n", "model", "=", "VqaLstmCnnAttentionModel", "(", "**", "model_kwargs", ")", "\n", "\n", "lossFn", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "optim", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "float", "(", "config", ".", "IL", ".", "VQA", ".", "lr", ")", ",", "\n", ")", "\n", "\n", "metrics", "=", "VqaMetric", "(", "\n", "info", "=", "{", "\"split\"", ":", "\"train\"", "}", ",", "\n", "metric_names", "=", "[", "\n", "\"loss\"", ",", "\n", "\"accuracy\"", ",", "\n", "\"mean_rank\"", ",", "\n", "\"mean_reciprocal_rank\"", ",", "\n", "]", ",", "\n", "log_json", "=", "os", ".", "path", ".", "join", "(", "config", ".", "OUTPUT_LOG_DIR", ",", "\"train.json\"", ")", ",", "\n", ")", "\n", "\n", "t", ",", "epoch", "=", "0", ",", "1", "\n", "\n", "avg_loss", "=", "0.0", "\n", "avg_accuracy", "=", "0.0", "\n", "avg_mean_rank", "=", "0.0", "\n", "avg_mean_reciprocal_rank", "=", "0.0", "\n", "\n", "logger", ".", "info", "(", "model", ")", "\n", "model", ".", "train", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "if", "config", ".", "IL", ".", "VQA", ".", "freeze_encoder", ":", "\n", "            ", "model", ".", "cnn", ".", "eval", "(", ")", "\n", "\n", "", "with", "TensorboardWriter", "(", "\n", "config", ".", "TENSORBOARD_DIR", ",", "flush_secs", "=", "self", ".", "flush_secs", "\n", ")", "as", "writer", ":", "\n", "            ", "while", "epoch", "<=", "config", ".", "IL", ".", "VQA", ".", "max_epochs", ":", "\n", "                ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "for", "batch", "in", "train_loader", ":", "\n", "                    ", "t", "+=", "1", "\n", "_", ",", "questions", ",", "answers", ",", "frame_queue", "=", "batch", "\n", "optim", ".", "zero_grad", "(", ")", "\n", "\n", "questions", "=", "questions", ".", "to", "(", "self", ".", "device", ")", "\n", "answers", "=", "answers", ".", "to", "(", "self", ".", "device", ")", "\n", "frame_queue", "=", "frame_queue", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "scores", ",", "_", "=", "model", "(", "frame_queue", ",", "questions", ")", "\n", "loss", "=", "lossFn", "(", "scores", ",", "answers", ")", "\n", "\n", "# update metrics", "\n", "accuracy", ",", "ranks", "=", "metrics", ".", "compute_ranks", "(", "\n", "scores", ".", "data", ".", "cpu", "(", ")", ",", "answers", "\n", ")", "\n", "metrics", ".", "update", "(", "[", "loss", ".", "item", "(", ")", ",", "accuracy", ",", "ranks", ",", "1.0", "/", "ranks", "]", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "optim", ".", "step", "(", ")", "\n", "\n", "(", "\n", "metrics_loss", ",", "\n", "accuracy", ",", "\n", "mean_rank", ",", "\n", "mean_reciprocal_rank", ",", "\n", ")", "=", "metrics", ".", "get_stats", "(", ")", "\n", "\n", "avg_loss", "+=", "metrics_loss", "\n", "avg_accuracy", "+=", "accuracy", "\n", "avg_mean_rank", "+=", "mean_rank", "\n", "avg_mean_reciprocal_rank", "+=", "mean_reciprocal_rank", "\n", "\n", "if", "t", "%", "config", ".", "LOG_INTERVAL", "==", "0", ":", "\n", "                        ", "logger", ".", "info", "(", "\"Epoch: {}\"", ".", "format", "(", "epoch", ")", ")", "\n", "logger", ".", "info", "(", "metrics", ".", "get_stat_string", "(", ")", ")", "\n", "\n", "writer", ".", "add_scalar", "(", "\"loss\"", ",", "metrics_loss", ",", "t", ")", "\n", "writer", ".", "add_scalar", "(", "\"accuracy\"", ",", "accuracy", ",", "t", ")", "\n", "writer", ".", "add_scalar", "(", "\"mean_rank\"", ",", "mean_rank", ",", "t", ")", "\n", "writer", ".", "add_scalar", "(", "\n", "\"mean_reciprocal_rank\"", ",", "mean_reciprocal_rank", ",", "t", "\n", ")", "\n", "\n", "metrics", ".", "dump_log", "(", ")", "\n", "\n", "# Dataloader length for IterableDataset doesn't take into", "\n", "# account batch size for Pytorch v < 1.6.0", "\n", "", "", "num_batches", "=", "math", ".", "ceil", "(", "\n", "len", "(", "vqa_dataset", ")", "/", "config", ".", "IL", ".", "VQA", ".", "batch_size", "\n", ")", "\n", "\n", "avg_loss", "/=", "num_batches", "\n", "avg_accuracy", "/=", "num_batches", "\n", "avg_mean_rank", "/=", "num_batches", "\n", "avg_mean_reciprocal_rank", "/=", "num_batches", "\n", "\n", "end_time", "=", "time", ".", "time", "(", ")", "\n", "time_taken", "=", "\"{:.1f}\"", ".", "format", "(", "(", "end_time", "-", "start_time", ")", "/", "60", ")", "\n", "\n", "logger", ".", "info", "(", "\n", "\"Epoch {} completed. Time taken: {} minutes.\"", ".", "format", "(", "\n", "epoch", ",", "time_taken", "\n", ")", "\n", ")", "\n", "\n", "logger", ".", "info", "(", "\"Average loss: {:.2f}\"", ".", "format", "(", "avg_loss", ")", ")", "\n", "logger", ".", "info", "(", "\"Average accuracy: {:.2f}\"", ".", "format", "(", "avg_accuracy", ")", ")", "\n", "logger", ".", "info", "(", "\"Average mean rank: {:.2f}\"", ".", "format", "(", "avg_mean_rank", ")", ")", "\n", "logger", ".", "info", "(", "\n", "\"Average mean reciprocal rank: {:.2f}\"", ".", "format", "(", "\n", "avg_mean_reciprocal_rank", "\n", ")", "\n", ")", "\n", "\n", "print", "(", "\"-----------------------------------------\"", ")", "\n", "\n", "self", ".", "save_checkpoint", "(", "\n", "model", ".", "state_dict", "(", ")", ",", "\"epoch_{}.ckpt\"", ".", "format", "(", "epoch", ")", "\n", ")", "\n", "\n", "epoch", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.trainers.vqa_trainer.VQATrainer._eval_checkpoint": [[267, 419], ["config.defrost", "config.freeze", "habitat_baselines.il.data.data.EQADataset().shuffle().to_tuple().map", "torch.utils.data.DataLoader", "habitat.logger.info", "habitat_baselines.il.data.data.EQADataset().shuffle().to_tuple().map.get_vocab_dicts", "habitat_baselines.il.models.models.VqaLstmCnnAttentionModel", "torch.load", "habitat_baselines.il.models.models.VqaLstmCnnAttentionModel.load_state_dict", "torch.nn.CrossEntropyLoss", "habitat_baselines.il.models.models.VqaLstmCnnAttentionModel.eval", "habitat_baselines.il.models.models.VqaLstmCnnAttentionModel.cnn.eval", "habitat_baselines.il.models.models.VqaLstmCnnAttentionModel.to", "habitat_baselines.il.metrics.VqaMetric", "math.ceil", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "habitat.logger.info", "habitat.logger.info", "habitat.logger.info", "habitat.logger.info", "torch.no_grad", "habitat_baselines.il.data.data.EQADataset().shuffle().to_tuple", "len", "os.path.join", "questions.to.to.to", "answers.to.to.to", "frame_queue.to.to.to", "habitat_baselines.il.models.models.VqaLstmCnnAttentionModel.", "torch.nn.CrossEntropyLoss.", "habitat_baselines.il.metrics.VqaMetric.compute_ranks", "habitat_baselines.il.metrics.VqaMetric.update", "habitat_baselines.il.metrics.VqaMetric.get_stats", "len", "scores.data.cpu", "habitat.logger.info", "habitat_baselines.il.metrics.VqaMetric.dump_log", "vqa_trainer.VQATrainer._save_vqa_results", "habitat_baselines.il.data.data.EQADataset().shuffle", "torch.nn.CrossEntropyLoss.item", "habitat_baselines.il.metrics.VqaMetric.get_stat_string", "habitat_baselines.il.data.data.EQADataset", "range"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.map", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.nav_data.NavDataset.get_vocab_dicts", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.load", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_trainer.BaseTrainer.eval", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_trainer.BaseTrainer.eval", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensorboard_utils.WeightsAndBiasesWriter.add_scalar", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensorboard_utils.WeightsAndBiasesWriter.add_scalar", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensorboard_utils.WeightsAndBiasesWriter.add_scalar", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensorboard_utils.WeightsAndBiasesWriter.add_scalar", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.il.metrics.VqaMetric.compute_ranks", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.il.metrics.Metric.update", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.il.metrics.Metric.get_stats", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.il.metrics.Metric.dump_log", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.trainers.vqa_trainer.VQATrainer._save_vqa_results", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.il.metrics.Metric.get_stat_string"], ["", "", "", "def", "_eval_checkpoint", "(", "\n", "self", ",", "\n", "checkpoint_path", ":", "str", ",", "\n", "writer", ":", "TensorboardWriter", ",", "\n", "checkpoint_index", ":", "int", "=", "0", ",", "\n", ")", "->", "None", ":", "\n", "        ", "r\"\"\"Evaluates a single checkpoint.\n\n        Args:\n            checkpoint_path: path of checkpoint\n            writer: tensorboard writer object for logging to tensorboard\n            checkpoint_index: index of cur checkpoint for logging\n\n        Returns:\n            None\n        \"\"\"", "\n", "config", "=", "self", ".", "config", "\n", "\n", "config", ".", "defrost", "(", ")", "\n", "config", ".", "TASK_CONFIG", ".", "DATASET", ".", "SPLIT", "=", "self", ".", "config", ".", "EVAL", ".", "SPLIT", "\n", "config", ".", "freeze", "(", ")", "\n", "\n", "vqa_dataset", "=", "(", "\n", "EQADataset", "(", "\n", "config", ",", "\n", "input_type", "=", "\"vqa\"", ",", "\n", "num_frames", "=", "config", ".", "IL", ".", "VQA", ".", "num_frames", ",", "\n", ")", "\n", ".", "shuffle", "(", "1000", ")", "\n", ".", "to_tuple", "(", "\n", "\"episode_id\"", ",", "\n", "\"question\"", ",", "\n", "\"answer\"", ",", "\n", "*", "[", "\"{0:0=3d}.jpg\"", ".", "format", "(", "x", ")", "for", "x", "in", "range", "(", "0", ",", "5", ")", "]", ",", "\n", ")", "\n", ".", "map", "(", "img_bytes_2_np_array", ")", "\n", ")", "\n", "\n", "eval_loader", "=", "DataLoader", "(", "\n", "vqa_dataset", ",", "batch_size", "=", "config", ".", "IL", ".", "VQA", ".", "batch_size", "\n", ")", "\n", "\n", "logger", ".", "info", "(", "\"eval_loader has {} samples\"", ".", "format", "(", "len", "(", "vqa_dataset", ")", ")", ")", "\n", "\n", "q_vocab_dict", ",", "ans_vocab_dict", "=", "vqa_dataset", ".", "get_vocab_dicts", "(", ")", "\n", "\n", "model_kwargs", "=", "{", "\n", "\"q_vocab\"", ":", "q_vocab_dict", ".", "word2idx_dict", ",", "\n", "\"ans_vocab\"", ":", "ans_vocab_dict", ".", "word2idx_dict", ",", "\n", "\"eqa_cnn_pretrain_ckpt_path\"", ":", "config", ".", "EQA_CNN_PRETRAIN_CKPT_PATH", ",", "\n", "}", "\n", "model", "=", "VqaLstmCnnAttentionModel", "(", "**", "model_kwargs", ")", "\n", "\n", "state_dict", "=", "torch", ".", "load", "(", "\n", "checkpoint_path", ",", "map_location", "=", "{", "\"cuda:0\"", ":", "\"cpu\"", "}", "\n", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n", "lossFn", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "t", "=", "0", "\n", "\n", "avg_loss", "=", "0.0", "\n", "avg_accuracy", "=", "0.0", "\n", "avg_mean_rank", "=", "0.0", "\n", "avg_mean_reciprocal_rank", "=", "0.0", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "model", ".", "cnn", ".", "eval", "(", ")", "\n", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "metrics", "=", "VqaMetric", "(", "\n", "info", "=", "{", "\"split\"", ":", "\"val\"", "}", ",", "\n", "metric_names", "=", "[", "\n", "\"loss\"", ",", "\n", "\"accuracy\"", ",", "\n", "\"mean_rank\"", ",", "\n", "\"mean_reciprocal_rank\"", ",", "\n", "]", ",", "\n", "log_json", "=", "os", ".", "path", ".", "join", "(", "config", ".", "OUTPUT_LOG_DIR", ",", "\"eval.json\"", ")", ",", "\n", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "batch", "in", "eval_loader", ":", "\n", "                ", "t", "+=", "1", "\n", "episode_ids", ",", "questions", ",", "answers", ",", "frame_queue", "=", "batch", "\n", "questions", "=", "questions", ".", "to", "(", "self", ".", "device", ")", "\n", "answers", "=", "answers", ".", "to", "(", "self", ".", "device", ")", "\n", "frame_queue", "=", "frame_queue", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "scores", ",", "_", "=", "model", "(", "frame_queue", ",", "questions", ")", "\n", "\n", "loss", "=", "lossFn", "(", "scores", ",", "answers", ")", "\n", "\n", "accuracy", ",", "ranks", "=", "metrics", ".", "compute_ranks", "(", "\n", "scores", ".", "data", ".", "cpu", "(", ")", ",", "answers", "\n", ")", "\n", "metrics", ".", "update", "(", "[", "loss", ".", "item", "(", ")", ",", "accuracy", ",", "ranks", ",", "1.0", "/", "ranks", "]", ")", "\n", "\n", "(", "\n", "metrics_loss", ",", "\n", "accuracy", ",", "\n", "mean_rank", ",", "\n", "mean_reciprocal_rank", ",", "\n", ")", "=", "metrics", ".", "get_stats", "(", "mode", "=", "0", ")", "\n", "\n", "avg_loss", "+=", "metrics_loss", "\n", "avg_accuracy", "+=", "accuracy", "\n", "avg_mean_rank", "+=", "mean_rank", "\n", "avg_mean_reciprocal_rank", "+=", "mean_reciprocal_rank", "\n", "\n", "if", "t", "%", "config", ".", "LOG_INTERVAL", "==", "0", ":", "\n", "                    ", "logger", ".", "info", "(", "metrics", ".", "get_stat_string", "(", "mode", "=", "0", ")", ")", "\n", "metrics", ".", "dump_log", "(", ")", "\n", "\n", "", "if", "(", "\n", "config", ".", "EVAL_SAVE_RESULTS", "\n", "and", "t", "%", "config", ".", "EVAL_SAVE_RESULTS_INTERVAL", "==", "0", "\n", ")", ":", "\n", "\n", "                    ", "self", ".", "_save_vqa_results", "(", "\n", "checkpoint_index", ",", "\n", "episode_ids", ",", "\n", "questions", ",", "\n", "frame_queue", ",", "\n", "scores", ",", "\n", "answers", ",", "\n", "q_vocab_dict", ",", "\n", "ans_vocab_dict", ",", "\n", ")", "\n", "\n", "", "", "", "num_batches", "=", "math", ".", "ceil", "(", "len", "(", "vqa_dataset", ")", "/", "config", ".", "IL", ".", "VQA", ".", "batch_size", ")", "\n", "\n", "avg_loss", "/=", "num_batches", "\n", "avg_accuracy", "/=", "num_batches", "\n", "avg_mean_rank", "/=", "num_batches", "\n", "avg_mean_reciprocal_rank", "/=", "num_batches", "\n", "\n", "writer", ".", "add_scalar", "(", "\"avg val loss\"", ",", "avg_loss", ",", "checkpoint_index", ")", "\n", "writer", ".", "add_scalar", "(", "\"avg val accuracy\"", ",", "avg_accuracy", ",", "checkpoint_index", ")", "\n", "writer", ".", "add_scalar", "(", "\"avg val mean rank\"", ",", "avg_mean_rank", ",", "checkpoint_index", ")", "\n", "writer", ".", "add_scalar", "(", "\n", "\"avg val mean reciprocal rank\"", ",", "\n", "avg_mean_reciprocal_rank", ",", "\n", "checkpoint_index", ",", "\n", ")", "\n", "\n", "logger", ".", "info", "(", "\"Average loss: {:.2f}\"", ".", "format", "(", "avg_loss", ")", ")", "\n", "logger", ".", "info", "(", "\"Average accuracy: {:.2f}\"", ".", "format", "(", "avg_accuracy", ")", ")", "\n", "logger", ".", "info", "(", "\"Average mean rank: {:.2f}\"", ".", "format", "(", "avg_mean_rank", ")", ")", "\n", "logger", ".", "info", "(", "\n", "\"Average mean reciprocal rank: {:.2f}\"", ".", "format", "(", "\n", "avg_mean_reciprocal_rank", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.eqa_cnn_pretrain_data.EQACNNPretrainDataset.__init__": [[18, 88], ["config.DATASET_PATH.format", "int", "eqa_cnn_pretrain_data.EQACNNPretrainDataset.lmdb_env.close", "eqa_cnn_pretrain_data.EQACNNPretrainDataset.cache_exists", "habitat.Env", "habitat.logger.info", "habitat.logger.info", "lmdb.open", "tqdm.tqdm.tqdm", "habitat.logger.info", "eqa_cnn_pretrain_data.EQACNNPretrainDataset.env.close", "habitat.logger.info", "lmdb.open", "list", "eqa_cnn_pretrain_data.EQACNNPretrainDataset.load_scene", "tqdm.tqdm.tqdm", "len", "eqa_cnn_pretrain_data.EQACNNPretrainDataset.scene_ids.append", "eqa_cnn_pretrain_data.EQACNNPretrainDataset.scene_episode_dict[].append", "int", "eqa_cnn_pretrain_data.EQACNNPretrainDataset.scene_episode_dict.keys", "random.sample", "eqa_cnn_pretrain_data.EQACNNPretrainDataset.save_frames", "eqa_cnn_pretrain_data.EQACNNPretrainDataset.lmdb_env.begin().stat", "habitat.logger.error", "eqa_cnn_pretrain_data.EQACNNPretrainDataset.lmdb_env.begin"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.close", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.nav_data.NavDataset.cache_exists", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.close", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.nav_data.NavDataset.load_scene", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.spaces.ListSpace.sample", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.eqa_cnn_pretrain_data.EQACNNPretrainDataset.save_frames"], ["def", "__init__", "(", "self", ",", "config", ",", "mode", "=", "\"train\"", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            env (habitat.Env): Habitat environment\n            config: Config\n            mode: 'train'/'val'\n        \"\"\"", "\n", "self", ".", "config", "=", "config", ".", "TASK_CONFIG", "\n", "self", ".", "dataset_path", "=", "config", ".", "DATASET_PATH", ".", "format", "(", "split", "=", "mode", ")", "\n", "\n", "if", "not", "self", ".", "cache_exists", "(", ")", ":", "\n", "            ", "\"\"\"\n            for each scene > load scene in memory > save frames for each\n            episode corresponding to that scene\n            \"\"\"", "\n", "self", ".", "env", "=", "habitat", ".", "Env", "(", "config", "=", "self", ".", "config", ")", "\n", "self", ".", "episodes", "=", "self", ".", "env", ".", "_dataset", ".", "episodes", "\n", "\n", "logger", ".", "info", "(", "\n", "\"Dataset cache not found. Saving rgb, seg, depth scene images\"", "\n", ")", "\n", "logger", ".", "info", "(", "\n", "\"Number of {} episodes: {}\"", ".", "format", "(", "mode", ",", "len", "(", "self", ".", "episodes", ")", ")", "\n", ")", "\n", "\n", "self", ".", "scene_ids", ":", "List", "[", "str", "]", "=", "[", "]", "\n", "self", ".", "scene_episode_dict", "=", "{", "}", "\n", "\n", "# dict for storing list of episodes for each scene", "\n", "for", "episode", "in", "self", ".", "episodes", ":", "\n", "                ", "if", "episode", ".", "scene_id", "not", "in", "self", ".", "scene_ids", ":", "\n", "                    ", "self", ".", "scene_ids", ".", "append", "(", "episode", ".", "scene_id", ")", "\n", "self", ".", "scene_episode_dict", "[", "episode", ".", "scene_id", "]", "=", "[", "episode", "]", "\n", "", "else", ":", "\n", "                    ", "self", ".", "scene_episode_dict", "[", "episode", ".", "scene_id", "]", ".", "append", "(", "episode", ")", "\n", "\n", "", "", "self", ".", "lmdb_env", "=", "lmdb", ".", "open", "(", "\n", "self", ".", "dataset_path", ",", "\n", "map_size", "=", "int", "(", "1e11", ")", ",", "\n", "writemap", "=", "True", ",", "\n", ")", "\n", "\n", "self", ".", "count", "=", "0", "\n", "\n", "for", "scene", "in", "tqdm", "(", "list", "(", "self", ".", "scene_episode_dict", ".", "keys", "(", ")", ")", ")", ":", "\n", "                ", "self", ".", "load_scene", "(", "scene", ")", "\n", "for", "episode", "in", "tqdm", "(", "self", ".", "scene_episode_dict", "[", "scene", "]", ")", ":", "\n", "                    ", "try", ":", "\n", "# TODO: Consider alternative for shortest_paths", "\n", "                        ", "pos_queue", "=", "episode", ".", "shortest_paths", "[", "0", "]", "# type:ignore", "\n", "", "except", "AttributeError", "as", "e", ":", "\n", "                        ", "logger", ".", "error", "(", "e", ")", "\n", "\n", "", "random_pos", "=", "random", ".", "sample", "(", "pos_queue", ",", "9", ")", "\n", "self", ".", "save_frames", "(", "random_pos", ")", "\n", "\n", "", "", "logger", ".", "info", "(", "\"EQA-CNN-PRETRAIN database ready!\"", ")", "\n", "self", ".", "env", ".", "close", "(", ")", "\n", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "\"Dataset cache found.\"", ")", "\n", "self", ".", "lmdb_env", "=", "lmdb", ".", "open", "(", "\n", "self", ".", "dataset_path", ",", "\n", "readonly", "=", "True", ",", "\n", "lock", "=", "False", ",", "\n", ")", "\n", "\n", "", "self", ".", "dataset_length", "=", "int", "(", "self", ".", "lmdb_env", ".", "begin", "(", ")", ".", "stat", "(", ")", "[", "\"entries\"", "]", "/", "3", ")", "\n", "self", ".", "lmdb_env", ".", "close", "(", ")", "\n", "self", ".", "lmdb_env", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.eqa_cnn_pretrain_data.EQACNNPretrainDataset.save_frames": [[89, 125], ["eqa_cnn_pretrain_data.EQACNNPretrainDataset.env.sim.get_observations_at", "eqa_cnn_pretrain_data.EQACNNPretrainDataset.env.sim.semantic_annotations", "numpy.array", "numpy.take", "seg.astype.astype.astype", "int", "obj.category.index", "eqa_cnn_pretrain_data.EQACNNPretrainDataset.lmdb_env.begin", "txn.put", "txn.put", "txn.put", "rgb.tobytes", "depth.tobytes", "seg.astype.astype.tobytes", "obj.id.split", "range", "len"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.get_observations_at", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.habitat_simulator.habitat_simulator.HabitatSim.semantic_annotations"], ["", "def", "save_frames", "(", "self", ",", "pos_queue", ":", "List", "[", "ShortestPathPoint", "]", ")", "->", "None", ":", "\n", "        ", "r\"\"\"\n        Writes rgb, seg, depth frames to LMDB.\n        \"\"\"", "\n", "\n", "for", "pos", "in", "pos_queue", ":", "\n", "\n", "            ", "observation", "=", "self", ".", "env", ".", "sim", ".", "get_observations_at", "(", "\n", "pos", ".", "position", ",", "pos", ".", "rotation", "\n", ")", "\n", "\n", "depth", "=", "observation", "[", "\"depth\"", "]", "\n", "rgb", "=", "observation", "[", "\"rgb\"", "]", "\n", "\n", "scene", "=", "self", ".", "env", ".", "sim", ".", "semantic_annotations", "(", ")", "# type:ignore", "\n", "instance_id_to_label_id", "=", "{", "\n", "int", "(", "obj", ".", "id", ".", "split", "(", "\"_\"", ")", "[", "-", "1", "]", ")", ":", "obj", ".", "category", ".", "index", "(", ")", "\n", "for", "obj", "in", "scene", ".", "objects", "\n", "}", "\n", "self", ".", "mapping", "=", "np", ".", "array", "(", "\n", "[", "\n", "instance_id_to_label_id", "[", "i", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "instance_id_to_label_id", ")", ")", "\n", "]", "\n", ")", "\n", "seg", "=", "np", ".", "take", "(", "self", ".", "mapping", ",", "observation", "[", "\"semantic\"", "]", ")", "\n", "seg", "[", "seg", "==", "-", "1", "]", "=", "0", "\n", "seg", "=", "seg", ".", "astype", "(", "\"uint8\"", ")", "\n", "\n", "sample_key", "=", "\"{0:0=6d}\"", ".", "format", "(", "self", ".", "count", ")", "\n", "with", "self", ".", "lmdb_env", ".", "begin", "(", "write", "=", "True", ")", "as", "txn", ":", "\n", "                ", "txn", ".", "put", "(", "(", "sample_key", "+", "\"_rgb\"", ")", ".", "encode", "(", ")", ",", "rgb", ".", "tobytes", "(", ")", ")", "\n", "txn", ".", "put", "(", "(", "sample_key", "+", "\"_depth\"", ")", ".", "encode", "(", ")", ",", "depth", ".", "tobytes", "(", ")", ")", "\n", "txn", ".", "put", "(", "(", "sample_key", "+", "\"_seg\"", ")", ".", "encode", "(", ")", ",", "seg", ".", "tobytes", "(", ")", ")", "\n", "\n", "", "self", ".", "count", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.eqa_cnn_pretrain_data.EQACNNPretrainDataset.cache_exists": [[126, 133], ["os.path.exists", "os.listdir", "os.makedirs"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.exists"], ["", "", "def", "cache_exists", "(", "self", ")", "->", "bool", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "dataset_path", ")", ":", "\n", "            ", "if", "os", ".", "listdir", "(", "self", ".", "dataset_path", ")", ":", "\n", "                ", "return", "True", "\n", "", "", "else", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "dataset_path", ")", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.eqa_cnn_pretrain_data.EQACNNPretrainDataset.load_scene": [[134, 139], ["eqa_cnn_pretrain_data.EQACNNPretrainDataset.config.defrost", "eqa_cnn_pretrain_data.EQACNNPretrainDataset.config.freeze", "eqa_cnn_pretrain_data.EQACNNPretrainDataset.env.sim.reconfigure"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env.reconfigure"], ["", "def", "load_scene", "(", "self", ",", "scene", ")", "->", "None", ":", "\n", "        ", "self", ".", "config", ".", "defrost", "(", ")", "\n", "self", ".", "config", ".", "SIMULATOR", ".", "SCENE", "=", "scene", "\n", "self", ".", "config", ".", "freeze", "(", ")", "\n", "self", ".", "env", ".", "sim", ".", "reconfigure", "(", "self", ".", "config", ".", "SIMULATOR", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.eqa_cnn_pretrain_data.EQACNNPretrainDataset.__len__": [[140, 142], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "dataset_length", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.eqa_cnn_pretrain_data.EQACNNPretrainDataset.__getitem__": [[143, 175], ["eqa_cnn_pretrain_data.EQACNNPretrainDataset.lmdb_cursor.get", "numpy.frombuffer", "rgb.transpose().astype.transpose().astype.transpose().astype", "eqa_cnn_pretrain_data.EQACNNPretrainDataset.lmdb_cursor.get", "numpy.frombuffer", "numpy.frombuffer.reshape", "eqa_cnn_pretrain_data.EQACNNPretrainDataset.lmdb_cursor.get", "numpy.frombuffer", "numpy.frombuffer.reshape", "lmdb.open", "eqa_cnn_pretrain_data.EQACNNPretrainDataset.lmdb_env.begin", "eqa_cnn_pretrain_data.EQACNNPretrainDataset.lmdb_txn.cursor", "rgb_idx.encode", "numpy.frombuffer.reshape", "depth_idx.encode", "seg_idx.encode", "rgb.transpose().astype.transpose().astype.transpose", "int"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get"], ["", "def", "__getitem__", "(", "self", ",", "idx", ":", "int", ")", ":", "\n", "        ", "r\"\"\"Returns batches to trainer.\n\n        batch: (rgb, depth, seg)\n\n        \"\"\"", "\n", "if", "self", ".", "lmdb_env", "is", "None", ":", "\n", "            ", "self", ".", "lmdb_env", "=", "lmdb", ".", "open", "(", "\n", "self", ".", "dataset_path", ",", "\n", "map_size", "=", "int", "(", "1e11", ")", ",", "\n", "writemap", "=", "True", ",", "\n", ")", "\n", "self", ".", "lmdb_txn", "=", "self", ".", "lmdb_env", ".", "begin", "(", ")", "\n", "self", ".", "lmdb_cursor", "=", "self", ".", "lmdb_txn", ".", "cursor", "(", ")", "\n", "\n", "", "rgb_idx", "=", "\"{0:0=6d}_rgb\"", ".", "format", "(", "idx", ")", "\n", "rgb_binary", "=", "self", ".", "lmdb_cursor", ".", "get", "(", "rgb_idx", ".", "encode", "(", ")", ")", "\n", "rgb_np", "=", "np", ".", "frombuffer", "(", "rgb_binary", ",", "dtype", "=", "\"uint8\"", ")", "\n", "rgb", "=", "rgb_np", ".", "reshape", "(", "256", ",", "256", ",", "3", ")", "/", "255.0", "\n", "rgb", "=", "rgb", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "depth_idx", "=", "\"{0:0=6d}_depth\"", ".", "format", "(", "idx", ")", "\n", "depth_binary", "=", "self", ".", "lmdb_cursor", ".", "get", "(", "depth_idx", ".", "encode", "(", ")", ")", "\n", "depth_np", "=", "np", ".", "frombuffer", "(", "depth_binary", ",", "dtype", "=", "\"float32\"", ")", "\n", "depth", "=", "depth_np", ".", "reshape", "(", "1", ",", "256", ",", "256", ")", "\n", "\n", "seg_idx", "=", "\"{0:0=6d}_seg\"", ".", "format", "(", "idx", ")", "\n", "seg_binary", "=", "self", ".", "lmdb_cursor", ".", "get", "(", "seg_idx", ".", "encode", "(", ")", ")", "\n", "seg_np", "=", "np", ".", "frombuffer", "(", "seg_binary", ",", "dtype", "=", "\"uint8\"", ")", "\n", "seg", "=", "seg_np", ".", "reshape", "(", "256", ",", "256", ")", "\n", "\n", "return", "idx", ",", "rgb", ",", "depth", ",", "seg", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.data.EQADataset.__init__": [[27, 129], ["habitat.Env", "data.EQADataset.sort_episodes", "config.FRAME_DATASET_PATH.format", "data.EQADataset.calc_max_length", "data.EQADataset.restructure_ans_vocab", "webdataset.Curried", "webdataset.Curried", "webdataset.Dataset.__init__", "habitat_baselines.utils.common.get_scene_episode_dict", "data.EQADataset.cache_exists", "habitat.logger.info", "habitat.logger.info", "tqdm.tqdm.tqdm", "habitat.logger.info", "habitat_baselines.utils.common.create_tar_archive", "habitat.logger.info", "habitat.logger.info", "habitat_baselines.utils.common.delete_folder", "habitat.logger.info", "list", "data.EQADataset.load_scene", "tqdm.tqdm.tqdm", "webdataset.Curried.", "len", "data.EQADataset.scene_episode_dict.keys", "data.EQADataset.save_frame_queue"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.nav_data.NavDataset.sort_episodes", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.nav_data.NavDataset.calc_max_length", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.nav_data.NavDataset.restructure_ans_vocab", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.get_scene_episode_dict", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.nav_data.NavDataset.cache_exists", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.create_tar_archive", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.delete_folder", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.nav_data.NavDataset.load_scene", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.nav_data.NavDataset.save_frame_queue"], ["def", "__init__", "(", "\n", "self", ",", "\n", "config", ",", "\n", "input_type", ",", "\n", "num_frames", "=", "5", ",", "\n", "max_controller_actions", "=", "5", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            config: Config\n            input_type (string): Type of model being trained (\"vqa\", \"pacman\")\n            num_frames (int): number of frames used as input to VQA model\n            max_controller_actions (int):\n        \"\"\"", "\n", "self", ".", "config", "=", "config", ".", "TASK_CONFIG", "\n", "self", ".", "input_type", "=", "input_type", "\n", "self", ".", "num_frames", "=", "num_frames", "\n", "\n", "with", "habitat", ".", "Env", "(", "config", "=", "self", ".", "config", ")", "as", "self", ".", "env", ":", "\n", "            ", "self", ".", "episodes", "=", "self", ".", "env", ".", "_dataset", ".", "episodes", "\n", "\n", "# sorting and making episode ids consecutive for simpler indexing", "\n", "self", ".", "sort_episodes", "(", ")", "\n", "\n", "self", ".", "q_vocab", "=", "self", ".", "env", ".", "_dataset", ".", "question_vocab", "\n", "self", ".", "ans_vocab", "=", "self", ".", "env", ".", "_dataset", ".", "answer_vocab", "\n", "\n", "self", ".", "eval_save_results", "=", "config", ".", "EVAL_SAVE_RESULTS", "\n", "\n", "if", "self", ".", "config", ".", "DATASET", ".", "SPLIT", "==", "config", ".", "EVAL", ".", "SPLIT", ":", "\n", "                ", "self", ".", "mode", "=", "\"val\"", "\n", "", "else", ":", "\n", "                ", "self", ".", "mode", "=", "\"train\"", "\n", "\n", "", "self", ".", "frame_dataset_path", "=", "config", ".", "FRAME_DATASET_PATH", ".", "format", "(", "\n", "split", "=", "self", ".", "mode", "\n", ")", "\n", "\n", "# [TODO] can be done in mp3d_eqa_dataset when loading", "\n", "self", ".", "calc_max_length", "(", ")", "\n", "self", ".", "restructure_ans_vocab", "(", ")", "\n", "\n", "group_by_keys", "=", "filters", ".", "Curried", "(", "self", ".", "group_by_keys_", ")", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "urls", "=", "self", ".", "frame_dataset_path", "+", "\".tar\"", ",", "\n", "initial_pipeline", "=", "[", "group_by_keys", "(", ")", "]", ",", "\n", ")", "\n", "\n", "self", ".", "only_vqa_task", "=", "config", ".", "ONLY_VQA_TASK", "\n", "\n", "self", ".", "scene_episode_dict", "=", "get_scene_episode_dict", "(", "self", ".", "episodes", ")", "\n", "\n", "if", "not", "self", ".", "cache_exists", "(", ")", ":", "\n", "                ", "\"\"\"\n                for each scene > load scene in memory > save frames for each\n                episode corresponding to each scene\n                \"\"\"", "\n", "logger", ".", "info", "(", "\n", "\"[ Dataset cache not present / is incomplete. ]\\\n                    \\n[ Saving episode frames to disk. ]\"", "\n", ")", "\n", "\n", "logger", ".", "info", "(", "\n", "\"Number of {} episodes: {}\"", ".", "format", "(", "\n", "self", ".", "mode", ",", "len", "(", "self", ".", "episodes", ")", "\n", ")", "\n", ")", "\n", "\n", "for", "scene", "in", "tqdm", "(", "\n", "list", "(", "self", ".", "scene_episode_dict", ".", "keys", "(", ")", ")", ",", "\n", "desc", "=", "\"Going through all scenes from dataset\"", ",", "\n", ")", ":", "\n", "                    ", "self", ".", "load_scene", "(", "scene", ")", "\n", "\n", "for", "episode", "in", "tqdm", "(", "\n", "self", ".", "scene_episode_dict", "[", "scene", "]", ",", "\n", "desc", "=", "\"Saving episode frames for each scene\"", ",", "\n", ")", ":", "\n", "\n", "                        ", "if", "self", ".", "only_vqa_task", ":", "\n", "                            ", "pos_queue", "=", "episode", ".", "shortest_paths", "[", "0", "]", "[", "\n", "-", "self", ".", "num_frames", ":", "# noqa: E203", "\n", "]", "\n", "", "else", ":", "\n", "                            ", "pos_queue", "=", "episode", ".", "shortest_paths", "[", "0", "]", "\n", "\n", "", "self", ".", "save_frame_queue", "(", "pos_queue", ",", "episode", ".", "episode_id", ")", "\n", "\n", "", "", "logger", ".", "info", "(", "\"[ Saved all episodes' frames to disk. ]\"", ")", "\n", "\n", "create_tar_archive", "(", "\n", "self", ".", "frame_dataset_path", "+", "\".tar\"", ",", "\n", "self", ".", "frame_dataset_path", ",", "\n", ")", "\n", "\n", "logger", ".", "info", "(", "\"[ Tar archive created. ]\"", ")", "\n", "logger", ".", "info", "(", "\n", "\"[ Deleting dataset folder. This will take a few minutes. ]\"", "\n", ")", "\n", "delete_folder", "(", "self", ".", "frame_dataset_path", ")", "\n", "\n", "logger", ".", "info", "(", "\"[ Frame dataset is ready. ]\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.data.EQADataset.group_by_keys_": [[130, 179], ["habitat_baselines.utils.common.valid_sample", "keys", "suffix.lower.lower.lower", "habitat_baselines.utils.common.valid_sample", "dict", "int", "torch.LongTensor", "data.EQADataset.ans_vocab.word2idx", "ValueError", "len", "range", "len", "question.append", "dict.keys", "prefix.rfind"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.valid_sample", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.valid_sample", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.utils.VocabDict.word2idx"], ["", "", "", "def", "group_by_keys_", "(", "\n", "self", ",", "\n", "data", ",", "\n", "keys", ":", "Callable", "[", "[", "str", "]", ",", "Tuple", "[", "str", "]", "]", "=", "base_plus_ext", ",", "\n", "lcase", ":", "bool", "=", "True", ",", "\n", "suffixes", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Returns function over iterator that groups key, value pairs into samples-\n        a custom pipeline for grouping episode info & images in the webdataset.\n        keys: function that splits the key into key and extension (base_plus_ext)\n        lcase: convert suffixes to lower case (Default value = True)\n        \"\"\"", "\n", "current_sample", "=", "{", "}", "\n", "for", "fname", ",", "value", "in", "data", ":", "\n", "            ", "prefix", ",", "suffix", "=", "keys", "(", "fname", ")", "\n", "if", "prefix", "is", "None", ":", "\n", "                ", "continue", "\n", "", "if", "lcase", ":", "\n", "                ", "suffix", "=", "suffix", ".", "lower", "(", ")", "\n", "", "if", "not", "current_sample", "or", "prefix", "!=", "current_sample", "[", "\"__key__\"", "]", ":", "\n", "                ", "if", "valid_sample", "(", "current_sample", ")", ":", "\n", "                    ", "yield", "current_sample", "\n", "\n", "", "current_sample", "=", "dict", "(", "__key__", "=", "prefix", ")", "\n", "\n", "episode_id", "=", "int", "(", "prefix", "[", "prefix", ".", "rfind", "(", "\"/\"", ")", "+", "1", ":", "]", ")", "\n", "current_sample", "[", "\"episode_id\"", "]", "=", "self", ".", "episodes", "[", "\n", "episode_id", "\n", "]", ".", "episode_id", "\n", "\n", "question", "=", "self", ".", "episodes", "[", "episode_id", "]", ".", "question", ".", "question_tokens", "\n", "if", "len", "(", "question", ")", "<", "self", ".", "max_q_len", ":", "\n", "                    ", "diff", "=", "self", ".", "max_q_len", "-", "len", "(", "question", ")", "\n", "for", "_", "in", "range", "(", "diff", ")", ":", "\n", "                        ", "question", ".", "append", "(", "0", ")", "\n", "\n", "", "", "current_sample", "[", "\"question\"", "]", "=", "torch", ".", "LongTensor", "(", "question", ")", "\n", "current_sample", "[", "\"answer\"", "]", "=", "self", ".", "ans_vocab", ".", "word2idx", "(", "\n", "self", ".", "episodes", "[", "episode_id", "]", ".", "question", ".", "answer_text", "\n", ")", "\n", "", "if", "suffix", "in", "current_sample", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "f\"{fname}: duplicate file name in tar file {suffix} {current_sample.keys()}\"", "\n", ")", "\n", "", "if", "suffixes", "is", "None", "or", "suffix", "in", "suffixes", ":", "\n", "                ", "current_sample", "[", "suffix", "]", "=", "value", "\n", "\n", "", "", "if", "valid_sample", "(", "current_sample", ")", ":", "\n", "            ", "yield", "current_sample", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.data.EQADataset.calc_max_length": [[180, 190], ["max", "max", "len", "len"], "methods", ["None"], ["", "", "def", "calc_max_length", "(", "self", ")", "->", "None", ":", "\n", "        ", "r\"\"\"Calculates max length of questions and actions.\n        This will be used for padding questions and actions with 0s so that\n        they have same string length.\n        \"\"\"", "\n", "self", ".", "max_q_len", "=", "max", "(", "\n", "len", "(", "episode", ".", "question", ".", "question_tokens", ")", "for", "episode", "in", "self", ".", "episodes", "\n", ")", "\n", "self", ".", "max_action_len", "=", "max", "(", "\n", "len", "(", "episode", ".", "shortest_paths", "[", "0", "]", ")", "for", "episode", "in", "self", ".", "episodes", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.data.EQADataset.restructure_ans_vocab": [[192, 199], ["enumerate", "sorted", "data.EQADataset.ans_vocab.word2idx_dict.keys"], "methods", ["None"], ["", "def", "restructure_ans_vocab", "(", "self", ")", "->", "None", ":", "\n", "        ", "r\"\"\"\n        Restructures answer vocab so that each answer id corresponds to a\n        numerical index starting from 0 for first answer.\n        \"\"\"", "\n", "for", "idx", ",", "key", "in", "enumerate", "(", "sorted", "(", "self", ".", "ans_vocab", ".", "word2idx_dict", ".", "keys", "(", ")", ")", ")", ":", "\n", "            ", "self", ".", "ans_vocab", ".", "word2idx_dict", "[", "key", "]", "=", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.data.EQADataset.get_vocab_dicts": [[200, 203], ["None"], "methods", ["None"], ["", "", "def", "get_vocab_dicts", "(", "self", ")", "->", "Tuple", "[", "VocabDict", ",", "VocabDict", "]", ":", "\n", "        ", "r\"\"\"Returns Q&A VocabDicts\"\"\"", "\n", "return", "self", ".", "q_vocab", ",", "self", ".", "ans_vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.data.EQADataset.sort_episodes": [[204, 209], ["sorted", "enumerate", "int"], "methods", ["None"], ["", "def", "sort_episodes", "(", "self", ")", "->", "None", ":", "\n", "# TODO: can be done in mp3d_eqa_dataset class too?", "\n", "        ", "self", ".", "episodes", "=", "sorted", "(", "self", ".", "episodes", ",", "key", "=", "lambda", "x", ":", "int", "(", "x", ".", "episode_id", ")", ")", "\n", "for", "idx", ",", "ep", "in", "enumerate", "(", "self", ".", "episodes", ")", ":", "\n", "            ", "ep", ".", "episode_id", "=", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.data.EQADataset.save_frame_queue": [[210, 228], ["enumerate", "data.EQADataset.env.sim.get_observations_at", "os.path.join", "cv2.imwrite", "int"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.get_observations_at"], ["", "", "def", "save_frame_queue", "(", "\n", "self", ",", "\n", "pos_queue", ":", "List", "[", "ShortestPathPoint", "]", ",", "\n", "episode_id", ",", "\n", ")", "->", "None", ":", "\n", "        ", "r\"\"\"Writes episode's frame queue to disk.\"\"\"", "\n", "\n", "for", "idx", ",", "pos", "in", "enumerate", "(", "pos_queue", "[", ":", ":", "-", "1", "]", ")", ":", "\n", "            ", "observation", "=", "self", ".", "env", ".", "sim", ".", "get_observations_at", "(", "\n", "pos", ".", "position", ",", "pos", ".", "rotation", "\n", ")", "\n", "img", "=", "observation", "[", "\"rgb\"", "]", "\n", "idx", "=", "\"{0:0=3d}\"", ".", "format", "(", "idx", ")", "\n", "episode_id", "=", "\"{0:0=4d}\"", ".", "format", "(", "int", "(", "episode_id", ")", ")", "\n", "new_path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "frame_dataset_path", ",", "\"{}.{}\"", ".", "format", "(", "episode_id", ",", "idx", ")", "\n", ")", "\n", "cv2", ".", "imwrite", "(", "new_path", "+", "\".jpg\"", ",", "img", "[", "...", ",", ":", ":", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.data.EQADataset.get_frames": [[229, 239], ["numpy.array", "sorted", "os.path.join", "img.transpose.transpose.transpose", "frames.append", "os.listdir", "cv2.imread"], "methods", ["None"], ["", "", "def", "get_frames", "(", "self", ",", "frames_path", ",", "num", "=", "0", ")", ":", "\n", "        ", "r\"\"\"Fetches frames from disk.\"\"\"", "\n", "frames", "=", "[", "]", "\n", "for", "img", "in", "sorted", "(", "os", ".", "listdir", "(", "frames_path", ")", ")", "[", "-", "num", ":", "]", ":", "\n", "            ", "img_path", "=", "os", ".", "path", ".", "join", "(", "frames_path", ",", "img", ")", "\n", "img", "=", "cv2", ".", "imread", "(", "img_path", ")", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "img", "=", "img", "/", "255.0", "\n", "frames", ".", "append", "(", "img", ")", "\n", "", "return", "np", ".", "array", "(", "frames", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.data.EQADataset.cache_exists": [[240, 246], ["os.path.exists", "os.makedirs"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.exists"], ["", "def", "cache_exists", "(", "self", ")", "->", "bool", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "frame_dataset_path", "+", "\".tar\"", ")", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "frame_dataset_path", ",", "exist_ok", "=", "True", ")", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.data.EQADataset.load_scene": [[247, 252], ["data.EQADataset.config.defrost", "data.EQADataset.config.freeze", "data.EQADataset.env.sim.reconfigure"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env.reconfigure"], ["", "", "def", "load_scene", "(", "self", ",", "scene", ")", "->", "None", ":", "\n", "        ", "self", ".", "config", ".", "defrost", "(", ")", "\n", "self", ".", "config", ".", "SIMULATOR", ".", "SCENE", "=", "scene", "\n", "self", ".", "config", ".", "freeze", "(", ")", "\n", "self", ".", "env", ".", "sim", ".", "reconfigure", "(", "self", ".", "config", ".", "SIMULATOR", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.data.EQADataset.__len__": [[253, 255], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "len", "(", "self", ".", "episodes", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.nav_data.NavDataset.__init__": [[31, 143], ["nav_data.NavDataset.sort_episodes", "config.FRAME_DATASET_PATH.format", "nav_data.NavDataset.calc_max_length", "nav_data.NavDataset.restructure_ans_vocab", "habitat_baselines.il.models.models.MultitaskCNN", "nav_data.NavDataset.cnn.eval", "nav_data.NavDataset.cnn.to", "habitat_baselines.utils.common.get_scene_episode_dict", "nav_data.NavDataset.preprocess_actions", "nav_data.NavDataset.sort_episodes", "webdataset.Curried", "webdataset.Curried", "webdataset.Dataset.__init__", "tqdm.tqdm.tqdm", "nav_data.NavDataset.cache_exists", "habitat.logger.info", "habitat.logger.info", "tqdm.tqdm.tqdm", "habitat.logger.info", "habitat_baselines.utils.common.create_tar_archive", "habitat.logger.info", "habitat.logger.info", "habitat_baselines.utils.common.delete_folder", "habitat.logger.info", "nav_data.NavDataset.scene_episode_dict.keys", "list", "nav_data.NavDataset.load_scene", "tqdm.tqdm.tqdm", "webdataset.Curried.", "len", "nav_data.NavDataset.scene_episode_dict.keys", "nav_data.NavDataset.save_frame_queue"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.nav_data.NavDataset.sort_episodes", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.nav_data.NavDataset.calc_max_length", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.nav_data.NavDataset.restructure_ans_vocab", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_trainer.BaseTrainer.eval", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.get_scene_episode_dict", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.nav_data.NavDataset.preprocess_actions", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.nav_data.NavDataset.sort_episodes", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.nav_data.NavDataset.cache_exists", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.create_tar_archive", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.delete_folder", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.nav_data.NavDataset.load_scene", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.nav_data.NavDataset.save_frame_queue"], ["def", "__init__", "(", "\n", "self", ",", "\n", "config", ":", "Config", ",", "\n", "env", ":", "habitat", ".", "Env", ",", "\n", "device", ":", "torch", ".", "device", ",", "\n", "max_controller_actions", ":", "int", "=", "5", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            config: Config\n            env: habitat Env\n            device: torch.device\n            max_controller_actions (int)\n        \"\"\"", "\n", "self", ".", "config", "=", "config", ".", "TASK_CONFIG", "\n", "self", ".", "env", "=", "env", "\n", "self", ".", "episodes", "=", "self", ".", "env", ".", "_dataset", ".", "episodes", "# type:ignore", "\n", "self", ".", "max_controller_actions", "=", "max_controller_actions", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "sim", "=", "self", ".", "env", ".", "sim", "\n", "\n", "# sorting and making episode ids consecutive for simpler indexing", "\n", "self", ".", "sort_episodes", "(", ")", "\n", "\n", "self", ".", "q_vocab", "=", "self", ".", "env", ".", "_dataset", ".", "question_vocab", "# type:ignore", "\n", "self", ".", "ans_vocab", "=", "self", ".", "env", ".", "_dataset", ".", "answer_vocab", "# type:ignore", "\n", "\n", "self", ".", "eval_save_results", "=", "config", ".", "EVAL_SAVE_RESULTS", "\n", "\n", "if", "self", ".", "config", ".", "DATASET", ".", "SPLIT", "==", "config", ".", "EVAL", ".", "SPLIT", ":", "\n", "            ", "self", ".", "mode", "=", "\"val\"", "\n", "", "else", ":", "\n", "            ", "self", ".", "mode", "=", "\"train\"", "\n", "\n", "", "self", ".", "frame_dataset_path", "=", "config", ".", "FRAME_DATASET_PATH", ".", "format", "(", "\n", "split", "=", "self", ".", "mode", "\n", ")", "\n", "self", ".", "calc_max_length", "(", ")", "\n", "self", ".", "restructure_ans_vocab", "(", ")", "\n", "\n", "cnn_kwargs", "=", "{", "\n", "\"only_encoder\"", ":", "True", ",", "\n", "\"checkpoint_path\"", ":", "config", ".", "EQA_CNN_PRETRAIN_CKPT_PATH", ",", "\n", "}", "\n", "self", ".", "cnn", "=", "MultitaskCNN", "(", "**", "cnn_kwargs", ")", "\n", "self", ".", "cnn", ".", "eval", "(", ")", "\n", "self", ".", "cnn", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "scene_episode_dict", "=", "get_scene_episode_dict", "(", "self", ".", "episodes", ")", "\n", "self", ".", "preprocess_actions", "(", ")", "\n", "if", "self", ".", "mode", "==", "\"val\"", ":", "\n", "            ", "ctr", "=", "0", "\n", "# ids in a way that episodes with same scenes are grouped together", "\n", "for", "scene", "in", "tqdm", "(", "\n", "self", ".", "scene_episode_dict", ".", "keys", "(", ")", ",", "\n", "desc", "=", "\"going through all scenes from dataset\"", ",", "\n", ")", ":", "\n", "                ", "for", "episode", "in", "self", ".", "scene_episode_dict", "[", "scene", "]", ":", "\n", "                    ", "episode", ".", "episode_id", "=", "ctr", "\n", "ctr", "+=", "1", "\n", "\n", "", "", "", "self", ".", "sort_episodes", "(", "consecutive_ids", "=", "False", ")", "\n", "\n", "group_by_keys", "=", "filters", ".", "Curried", "(", "self", ".", "group_by_keys_", ")", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "urls", "=", "self", ".", "frame_dataset_path", "+", "\".tar\"", ",", "\n", "initial_pipeline", "=", "[", "group_by_keys", "(", ")", "]", ",", "\n", ")", "\n", "\n", "if", "not", "self", ".", "cache_exists", "(", ")", ":", "\n", "            ", "\"\"\"\n            for each scene > load scene in memory > save frames for each\n            episode corresponding to each scene\n            \"\"\"", "\n", "logger", ".", "info", "(", "\n", "\"[ Dataset cache not present / is incomplete. ]\\\n                \\n[ Saving episode frames to disk. ]\"", "\n", ")", "\n", "\n", "logger", ".", "info", "(", "\n", "\"Number of {} episodes: {}\"", ".", "format", "(", "\n", "self", ".", "mode", ",", "len", "(", "self", ".", "episodes", ")", "\n", ")", "\n", ")", "\n", "ctr", "=", "0", "\n", "for", "scene", "in", "tqdm", "(", "\n", "list", "(", "self", ".", "scene_episode_dict", ".", "keys", "(", ")", ")", ",", "\n", "desc", "=", "\"Going through all scenes from dataset\"", ",", "\n", ")", ":", "\n", "                ", "self", ".", "load_scene", "(", "scene", ")", "\n", "\n", "for", "episode", "in", "tqdm", "(", "\n", "self", ".", "scene_episode_dict", "[", "scene", "]", ",", "\n", "desc", "=", "\"Saving episode frames for each scene\"", ",", "\n", ")", ":", "\n", "                    ", "pos_queue", "=", "episode", ".", "shortest_paths", "[", "0", "]", "\n", "self", ".", "save_frame_queue", "(", "pos_queue", ",", "episode", ".", "episode_id", ")", "\n", "\n", "", "", "logger", ".", "info", "(", "\"[ Saved all episodes' frames to disk. ]\"", ")", "\n", "\n", "create_tar_archive", "(", "\n", "self", ".", "frame_dataset_path", "+", "\".tar\"", ",", "\n", "self", ".", "frame_dataset_path", ",", "\n", ")", "\n", "\n", "logger", ".", "info", "(", "\"[ Tar archive created. ]\"", ")", "\n", "logger", ".", "info", "(", "\n", "\"[ Deleting dataset folder. This will take a few minutes. ]\"", "\n", ")", "\n", "delete_folder", "(", "self", ".", "frame_dataset_path", ")", "\n", "\n", "logger", ".", "info", "(", "\"[ Frame dataset is ready. ]\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.nav_data.NavDataset.flat_to_hierarchical_actions": [[144, 179], ["range", "len", "len", "planner_actions.append", "pq_idx.append", "ph_idx.append", "cq_idx.append", "controller_actions.append", "controller_actions.append"], "methods", ["None"], ["", "", "def", "flat_to_hierarchical_actions", "(", "\n", "self", ",", "actions", ":", "Union", "[", "List", "[", "int", "]", ",", "np", ".", "ndarray", "]", ",", "controller_action_lim", ":", "int", "\n", ")", ":", "\n", "        ", "assert", "len", "(", "actions", ")", "!=", "0", "\n", "\n", "controller_action_ctr", "=", "0", "\n", "\n", "planner_actions", ",", "controller_actions", "=", "[", "1", "]", ",", "[", "]", "\n", "prev_action", "=", "1", "\n", "\n", "pq_idx", ",", "cq_idx", ",", "ph_idx", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "ph_trck", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "actions", ")", ")", ":", "\n", "            ", "if", "actions", "[", "i", "]", "!=", "prev_action", ":", "\n", "                ", "planner_actions", ".", "append", "(", "actions", "[", "i", "]", ")", "\n", "pq_idx", ".", "append", "(", "i", ")", "\n", "\n", "", "if", "i", ">", "0", ":", "\n", "                ", "ph_idx", ".", "append", "(", "ph_trck", ")", "\n", "if", "actions", "[", "i", "]", "==", "prev_action", ":", "\n", "                    ", "controller_actions", ".", "append", "(", "1", ")", "\n", "controller_action_ctr", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "controller_actions", ".", "append", "(", "0", ")", "\n", "controller_action_ctr", "=", "0", "\n", "ph_trck", "+=", "1", "\n", "", "cq_idx", ".", "append", "(", "i", ")", "\n", "\n", "", "prev_action", "=", "actions", "[", "i", "]", "\n", "\n", "if", "controller_action_ctr", "==", "controller_action_lim", "-", "1", ":", "\n", "                ", "prev_action", "=", "False", "\n", "\n", "", "", "return", "planner_actions", ",", "controller_actions", ",", "pq_idx", ",", "cq_idx", ",", "ph_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.nav_data.NavDataset.get_img_features": [[180, 192], ["torch.no_grad", "nav_data.NavDataset.cnn", "torch.from_numpy().float", "torch.from_numpy", "img.transpose"], "methods", ["None"], ["", "def", "get_img_features", "(", "\n", "self", ",", "img", ":", "np", ".", "ndarray", ",", "preprocess", ":", "bool", "=", "False", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "if", "preprocess", ":", "\n", "            ", "img_t", "=", "(", "\n", "(", "torch", ".", "from_numpy", "(", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", ".", "float", "(", ")", "/", "255.0", ")", "\n", ".", "view", "(", "1", ",", "3", ",", "256", ",", "256", ")", "\n", ".", "to", "(", "self", ".", "device", ")", "\n", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "return", "self", ".", "cnn", "(", "img_t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.nav_data.NavDataset.get_hierarchical_features_till_spawn": [[193, 256], ["len", "nav_data.NavDataset.flat_to_hierarchical_actions", "nav_data.NavDataset.get_img_features().cpu().numpy().copy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "len", "raw_img_feats[].copy", "raw_img_feats[].copy", "nav_data.NavDataset.get_img_features().cpu().numpy", "numpy.array", "len", "len", "nav_data.NavDataset.get_img_features().cpu", "nav_data.NavDataset.get_img_features"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.nav_data.NavDataset.flat_to_hierarchical_actions", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.nav_data.NavDataset.get_img_features"], ["", "", "def", "get_hierarchical_features_till_spawn", "(", "\n", "self", ",", "\n", "idx", ":", "int", ",", "\n", "actions", ":", "np", ".", "ndarray", ",", "\n", "backtrack_steps", ":", "int", "=", "0", ",", "\n", "max_controller_actions", ":", "int", "=", "5", ",", "\n", ")", ":", "\n", "        ", "action_length", "=", "len", "(", "actions", ")", "\n", "\n", "pa", ",", "ca", ",", "pq_idx", ",", "cq_idx", ",", "ph_idx", "=", "self", ".", "flat_to_hierarchical_actions", "(", "\n", "actions", "=", "actions", ",", "controller_action_lim", "=", "max_controller_actions", "\n", ")", "\n", "\n", "# count how many actions of same type have been encountered before", "\n", "# starting navigation", "\n", "\n", "backtrack_controller_steps", "=", "actions", "[", "\n", "0", ":", "action_length", "-", "backtrack_steps", "+", "1", ":", "# noqa: E203", "\n", "]", "[", ":", ":", "-", "1", "]", "\n", "counter", "=", "0", "\n", "\n", "if", "len", "(", "backtrack_controller_steps", ")", ">", "0", ":", "\n", "            ", "while", "(", "counter", "<=", "self", ".", "max_controller_actions", ")", "and", "(", "\n", "counter", "<", "len", "(", "backtrack_controller_steps", ")", "\n", "and", "(", "\n", "backtrack_controller_steps", "[", "counter", "]", "\n", "==", "backtrack_controller_steps", "[", "0", "]", "\n", ")", "\n", ")", ":", "\n", "                ", "counter", "+=", "1", "\n", "\n", "", "", "target_pos_idx", "=", "action_length", "-", "backtrack_steps", "\n", "\n", "controller_step", "=", "True", "\n", "if", "target_pos_idx", "in", "pq_idx", ":", "\n", "            ", "controller_step", "=", "False", "\n", "\n", "", "pq_idx_pruned", "=", "[", "v", "for", "v", "in", "pq_idx", "if", "v", "<=", "target_pos_idx", "]", "\n", "pa_pruned", "=", "pa", "[", ":", "len", "(", "pq_idx_pruned", ")", "+", "1", "]", "\n", "raw_img_feats", "=", "(", "\n", "self", ".", "get_img_features", "(", "self", ".", "frame_queue", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "copy", "(", ")", "\n", ")", "\n", "\n", "controller_img_feat", "=", "torch", ".", "from_numpy", "(", "\n", "raw_img_feats", "[", "target_pos_idx", "]", ".", "copy", "(", ")", "\n", ")", "\n", "controller_action_in", "=", "pa_pruned", "[", "-", "1", "]", "-", "2", "\n", "\n", "planner_img_feats", "=", "torch", ".", "from_numpy", "(", "\n", "raw_img_feats", "[", "pq_idx_pruned", "]", ".", "copy", "(", ")", "\n", ")", "\n", "planner_actions_in", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "pa_pruned", "[", ":", "-", "1", "]", ")", "-", "1", ")", "\n", "\n", "init_pos", "=", "self", ".", "episodes", "[", "idx", "]", ".", "shortest_paths", "[", "0", "]", "[", "target_pos_idx", "]", "\n", "\n", "return", "(", "\n", "planner_actions_in", ",", "\n", "planner_img_feats", ",", "\n", "controller_step", ",", "\n", "controller_action_in", ",", "\n", "controller_img_feat", ",", "\n", "init_pos", ",", "\n", "counter", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.nav_data.NavDataset.preprocess_actions": [[258, 307], ["len", "nav_data.NavDataset.flat_to_hierarchical_actions", "range", "torch.Tensor", "ep.actions.clone().fill_", "ep.actions.clone().fill_", "ep.actions.clone().fill_", "torch.Tensor", "torch.Tensor", "len", "ep.planner_pos_queue_idx.append", "ep.controller_pos_queue_idx.append", "torch.Tensor", "ep.actions.append", "len", "ep.actions.clone", "ep.actions.clone", "ep.actions.clone", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.nav_data.NavDataset.flat_to_hierarchical_actions"], ["", "def", "preprocess_actions", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        actions before -\n        0 - FWD; 1 - LEFT; 2 - RIGHT; 3 - STOP;\n        actions after -\n        0 - NULL; 1 - START; 2 - FWD; 3 - LEFT; 4 - RIGHT; 5 - STOP;\n        \"\"\"", "\n", "for", "ep", "in", "self", ".", "episodes", ":", "\n", "\n", "            ", "ep", ".", "actions", "=", "[", "x", ".", "action", "+", "2", "for", "x", "in", "ep", ".", "shortest_paths", "[", "0", "]", "]", "\n", "ep", ".", "action_length", "=", "len", "(", "ep", ".", "actions", ")", "\n", "(", "\n", "planner_actions", ",", "\n", "controller_actions", ",", "\n", "pq_idx", ",", "\n", "cq_idx", ",", "\n", "ph_idx", ",", "\n", ")", "=", "self", ".", "flat_to_hierarchical_actions", "(", "\n", "actions", "=", "ep", ".", "actions", ",", "\n", "controller_action_lim", "=", "self", ".", "max_controller_actions", ",", "\n", ")", "\n", "\n", "# padding actions with 0", "\n", "diff", "=", "self", ".", "max_action_len", "-", "ep", ".", "action_length", "\n", "for", "_", "in", "range", "(", "diff", ")", ":", "\n", "                ", "ep", ".", "actions", ".", "append", "(", "0", ")", "\n", "\n", "", "ep", ".", "actions", "=", "torch", ".", "Tensor", "(", "ep", ".", "actions", ")", "\n", "ep", ".", "planner_actions", "=", "ep", ".", "actions", ".", "clone", "(", ")", ".", "fill_", "(", "0", ")", "\n", "ep", ".", "controller_actions", "=", "ep", ".", "actions", ".", "clone", "(", ")", ".", "fill_", "(", "-", "1", ")", "\n", "\n", "ep", ".", "planner_hidden_idx", "=", "ep", ".", "actions", ".", "clone", "(", ")", ".", "fill_", "(", "0", ")", "\n", "ep", ".", "planner_pos_queue_idx", ",", "ep", ".", "controller_pos_queue_idx", "=", "[", "]", ",", "[", "]", "\n", "\n", "ep", ".", "planner_actions", "[", ":", "len", "(", "planner_actions", ")", "]", "=", "torch", ".", "Tensor", "(", "\n", "planner_actions", "\n", ")", "\n", "ep", ".", "controller_actions", "[", ":", "len", "(", "controller_actions", ")", "]", "=", "torch", ".", "Tensor", "(", "\n", "controller_actions", "\n", ")", "\n", "\n", "ep", ".", "planner_action_length", "=", "len", "(", "planner_actions", ")", "-", "1", "\n", "ep", ".", "controller_action_length", "=", "len", "(", "controller_actions", ")", "\n", "\n", "ep", ".", "planner_pos_queue_idx", ".", "append", "(", "pq_idx", ")", "\n", "ep", ".", "controller_pos_queue_idx", ".", "append", "(", "cq_idx", ")", "\n", "\n", "ep", ".", "planner_hidden_idx", "[", ":", "len", "(", "controller_actions", ")", "]", "=", "torch", ".", "Tensor", "(", "\n", "ph_idx", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.nav_data.NavDataset.group_by_keys_": [[309, 357], ["habitat_baselines.utils.common.valid_sample", "keys", "suffix.lower.lower.lower", "habitat_baselines.utils.common.valid_sample", "dict", "int", "numpy.array", "nav_data.NavDataset.ans_vocab.word2idx", "ValueError", "len", "range", "len", "question.append", "dict.keys", "prefix.rfind"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.valid_sample", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.valid_sample", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.datasets.utils.VocabDict.word2idx"], ["", "", "def", "group_by_keys_", "(", "\n", "self", ",", "\n", "data", ":", "Generator", ",", "\n", "keys", ":", "Callable", "[", "[", "str", "]", ",", "Tuple", "[", "str", "]", "]", "=", "base_plus_ext", ",", "\n", "lcase", ":", "bool", "=", "True", ",", "\n", "suffixes", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Returns function over iterator that groups key, value pairs into samples-\n        a custom pipeline for grouping episode info & images in the webdataset.\n        keys: function that splits the key into key and extension (base_plus_ext)\n        lcase: convert suffixes to lower case (Default value = True)\n        \"\"\"", "\n", "current_sample", "=", "{", "}", "\n", "for", "fname", ",", "value", "in", "data", ":", "\n", "            ", "prefix", ",", "suffix", "=", "keys", "(", "fname", ")", "\n", "if", "prefix", "is", "None", ":", "\n", "                ", "continue", "\n", "", "if", "lcase", ":", "\n", "                ", "suffix", "=", "suffix", ".", "lower", "(", ")", "\n", "", "if", "not", "current_sample", "or", "prefix", "!=", "current_sample", "[", "\"__key__\"", "]", ":", "\n", "                ", "if", "valid_sample", "(", "current_sample", ")", ":", "\n", "                    ", "yield", "current_sample", "\n", "\n", "", "current_sample", "=", "dict", "(", "__key__", "=", "prefix", ")", "\n", "episode_id", "=", "int", "(", "prefix", "[", "prefix", ".", "rfind", "(", "\"/\"", ")", "+", "1", ":", "]", ")", "\n", "current_sample", "[", "\"episode_id\"", "]", "=", "self", ".", "episodes", "[", "\n", "episode_id", "\n", "]", ".", "episode_id", "\n", "\n", "question", "=", "self", ".", "episodes", "[", "episode_id", "]", ".", "question", ".", "question_tokens", "\n", "if", "len", "(", "question", ")", "<", "self", ".", "max_q_len", ":", "\n", "                    ", "diff", "=", "self", ".", "max_q_len", "-", "len", "(", "question", ")", "\n", "for", "_", "in", "range", "(", "diff", ")", ":", "\n", "                        ", "question", ".", "append", "(", "0", ")", "\n", "\n", "", "", "current_sample", "[", "\"question\"", "]", "=", "np", ".", "array", "(", "question", ",", "dtype", "=", "np", ".", "int_", ")", "\n", "current_sample", "[", "\"answer\"", "]", "=", "self", ".", "ans_vocab", ".", "word2idx", "(", "\n", "self", ".", "episodes", "[", "episode_id", "]", ".", "question", ".", "answer_text", "\n", ")", "\n", "", "if", "suffix", "in", "current_sample", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "f\"{fname}: duplicate file name in tar file {suffix} {current_sample.keys()}\"", "\n", ")", "\n", "", "if", "suffixes", "is", "None", "or", "suffix", "in", "suffixes", ":", "\n", "                ", "current_sample", "[", "suffix", "]", "=", "value", "\n", "\n", "", "", "if", "valid_sample", "(", "current_sample", ")", ":", "\n", "            ", "yield", "current_sample", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.nav_data.NavDataset.calc_max_length": [[358, 368], ["max", "max", "len", "len"], "methods", ["None"], ["", "", "def", "calc_max_length", "(", "self", ")", "->", "None", ":", "\n", "        ", "r\"\"\"Calculates max length of questions and actions.\n        This will be used for padding questions and actions with 0s so that\n        they have same string length.\n        \"\"\"", "\n", "self", ".", "max_q_len", "=", "max", "(", "\n", "len", "(", "episode", ".", "question", ".", "question_tokens", ")", "for", "episode", "in", "self", ".", "episodes", "\n", ")", "\n", "self", ".", "max_action_len", "=", "max", "(", "\n", "len", "(", "episode", ".", "shortest_paths", "[", "0", "]", ")", "for", "episode", "in", "self", ".", "episodes", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.nav_data.NavDataset.restructure_ans_vocab": [[370, 377], ["enumerate", "sorted", "nav_data.NavDataset.ans_vocab.word2idx_dict.keys"], "methods", ["None"], ["", "def", "restructure_ans_vocab", "(", "self", ")", "->", "None", ":", "\n", "        ", "r\"\"\"\n        Restructures answer vocab so that each answer id corresponds to a\n        numerical index starting from 0 for first answer.\n        \"\"\"", "\n", "for", "idx", ",", "key", "in", "enumerate", "(", "sorted", "(", "self", ".", "ans_vocab", ".", "word2idx_dict", ".", "keys", "(", ")", ")", ")", ":", "\n", "            ", "self", ".", "ans_vocab", ".", "word2idx_dict", "[", "key", "]", "=", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.nav_data.NavDataset.get_vocab_dicts": [[378, 381], ["None"], "methods", ["None"], ["", "", "def", "get_vocab_dicts", "(", "self", ")", "->", "Tuple", "[", "VocabDict", ",", "VocabDict", "]", ":", "\n", "        ", "r\"\"\"Returns Q&A VocabDicts\"\"\"", "\n", "return", "self", ".", "q_vocab", ",", "self", ".", "ans_vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.nav_data.NavDataset.sort_episodes": [[382, 388], ["sorted", "enumerate", "int"], "methods", ["None"], ["", "def", "sort_episodes", "(", "self", ",", "consecutive_ids", ":", "bool", "=", "True", ")", "->", "None", ":", "\n", "# TODO: can be done in mp3d_eqa_dataset class too?", "\n", "        ", "self", ".", "episodes", "=", "sorted", "(", "self", ".", "episodes", ",", "key", "=", "lambda", "x", ":", "int", "(", "x", ".", "episode_id", ")", ")", "\n", "if", "consecutive_ids", ":", "\n", "            ", "for", "idx", ",", "ep", "in", "enumerate", "(", "self", ".", "episodes", ")", ":", "\n", "                ", "ep", ".", "episode_id", "=", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.nav_data.NavDataset.save_frame_queue": [[389, 406], ["enumerate", "nav_data.NavDataset.env.sim.get_observations_at", "os.path.join", "cv2.imwrite", "int"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.Simulator.get_observations_at"], ["", "", "", "def", "save_frame_queue", "(", "\n", "self", ",", "\n", "pos_queue", ":", "List", "[", "ShortestPathPoint", "]", ",", "\n", "episode_id", ":", "str", ",", "\n", ")", "->", "None", ":", "\n", "        ", "r\"\"\"Writes episode's frame queue to disk.\"\"\"", "\n", "for", "idx", ",", "pos", "in", "enumerate", "(", "pos_queue", ")", ":", "\n", "            ", "observation", "=", "self", ".", "env", ".", "sim", ".", "get_observations_at", "(", "\n", "pos", ".", "position", ",", "pos", ".", "rotation", "\n", ")", "\n", "img", "=", "observation", "[", "\"rgb\"", "]", "\n", "idx", "=", "\"{0:0=3d}\"", ".", "format", "(", "idx", ")", "\n", "episode_id", "=", "\"{0:0=4d}\"", ".", "format", "(", "int", "(", "episode_id", ")", ")", "\n", "new_path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "frame_dataset_path", ",", "\"{}.{}\"", ".", "format", "(", "episode_id", ",", "idx", ")", "\n", ")", "\n", "cv2", ".", "imwrite", "(", "new_path", "+", "\".jpg\"", ",", "img", "[", "...", ",", ":", ":", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.nav_data.NavDataset.cache_exists": [[407, 413], ["os.path.exists", "os.makedirs"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.exists"], ["", "", "def", "cache_exists", "(", "self", ")", "->", "bool", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "frame_dataset_path", "+", "\".tar\"", ")", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "frame_dataset_path", ",", "exist_ok", "=", "True", ")", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.nav_data.NavDataset.load_scene": [[414, 419], ["nav_data.NavDataset.config.defrost", "nav_data.NavDataset.config.freeze", "nav_data.NavDataset.env.sim.reconfigure"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env.reconfigure"], ["", "", "def", "load_scene", "(", "self", ",", "scene", ":", "str", ")", "->", "None", ":", "\n", "        ", "self", ".", "config", ".", "defrost", "(", ")", "\n", "self", ".", "config", ".", "SIMULATOR", ".", "SCENE", "=", "scene", "\n", "self", ".", "config", ".", "freeze", "(", ")", "\n", "self", ".", "env", ".", "sim", ".", "reconfigure", "(", "self", ".", "config", ".", "SIMULATOR", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.nav_data.NavDataset.map_dataset_sample": [[420, 540], ["numpy.array", "torch.Tensor().to", "nav_data.NavDataset.get_img_features().cpu().numpy().copy", "numpy.zeros", "nav_data.NavDataset.copy", "numpy.zeros", "planner_actions_in[].fill_", "planner_actions_out.clone().gt", "numpy.zeros", "controller_out.clone().gt", "range", "len", "range", "planner_actions.clone", "planner_actions[].clone", "len", "planner_actions_out[].fill_", "nav_data.NavDataset.episodes[].actions.clone", "len", "controller_actions_in[].fill_", "len", "controller_out[].fill_", "len", "question.append", "torch.Tensor", "habitat.logger.info", "nav_data.NavDataset.config.defrost", "nav_data.NavDataset.config.freeze", "nav_data.NavDataset.env.sim.reconfigure", "nav_data.NavDataset.get_img_features().cpu().numpy", "tuple", "planner_actions_out.clone", "tuple", "controller_out.clone", "img.transpose", "list", "nav_data.NavDataset.get_img_features().cpu", "controller_out[].sum", "x.values", "nav_data.NavDataset.get_img_features"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.Env.reconfigure", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.nav_data.NavDataset.get_img_features"], ["", "def", "map_dataset_sample", "(", "self", ",", "x", ":", "Dict", ")", "->", "Tuple", ":", "\n", "        ", "\"\"\"Mapper function to pre-process webdataset sample, example:\n        img features, planner & controller actions etc.\n        Args:\n            x: webdataset sample containing ep_id, question, answer and imgs\n        Returns:\n            Processed sample containing img features, planner & controller actions etc.\n        \"\"\"", "\n", "idx", "=", "x", "[", "\"episode_id\"", "]", "\n", "question", "=", "x", "[", "\"question\"", "]", "\n", "answer", "=", "x", "[", "\"answer\"", "]", "\n", "\n", "if", "len", "(", "question", ")", "<", "self", ".", "max_q_len", ":", "\n", "            ", "diff", "=", "self", ".", "max_q_len", "-", "len", "(", "question", ")", "\n", "for", "_", "in", "range", "(", "diff", ")", ":", "\n", "                ", "question", ".", "append", "(", "0", ")", "\n", "\n", "", "", "self", ".", "frame_queue", "=", "np", ".", "array", "(", "\n", "[", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "/", "255.0", "for", "img", "in", "list", "(", "x", ".", "values", "(", ")", ")", "[", "4", ":", "]", "]", "\n", ")", "\n", "self", ".", "frame_queue", "=", "torch", ".", "Tensor", "(", "self", ".", "frame_queue", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "if", "self", ".", "mode", "==", "\"val\"", ":", "\n", "# works only with batch size 1", "\n", "            ", "actions", "=", "self", ".", "episodes", "[", "idx", "]", ".", "actions", "\n", "action_length", "=", "self", ".", "episodes", "[", "idx", "]", ".", "action_length", "\n", "scene", "=", "self", ".", "episodes", "[", "idx", "]", ".", "scene_id", "\n", "if", "scene", "!=", "self", ".", "config", ".", "SIMULATOR", ".", "SCENE", ":", "\n", "                ", "logger", ".", "info", "(", "\"[ Loading scene - {}]\"", ".", "format", "(", "scene", ")", ")", "\n", "self", ".", "config", ".", "defrost", "(", ")", "\n", "self", ".", "config", ".", "SIMULATOR", ".", "SCENE", "=", "scene", "\n", "self", ".", "config", ".", "freeze", "(", ")", "\n", "self", ".", "env", ".", "sim", ".", "reconfigure", "(", "self", ".", "config", ".", "SIMULATOR", ")", "\n", "\n", "", "goal_pos", "=", "self", ".", "episodes", "[", "idx", "]", ".", "goals", "[", "0", "]", ".", "position", "\n", "\n", "return", "idx", ",", "question", ",", "answer", ",", "actions", ",", "action_length", ",", "goal_pos", "\n", "\n", "", "planner_actions", "=", "self", ".", "episodes", "[", "idx", "]", ".", "planner_actions", "\n", "controller_actions", "=", "self", ".", "episodes", "[", "idx", "]", ".", "controller_actions", "\n", "\n", "planner_hidden_idx", "=", "self", ".", "episodes", "[", "idx", "]", ".", "planner_hidden_idx", "\n", "\n", "planner_action_length", "=", "self", ".", "episodes", "[", "idx", "]", ".", "planner_action_length", "\n", "controller_action_length", "=", "self", ".", "episodes", "[", "idx", "]", ".", "controller_action_length", "\n", "\n", "raw_img_feats", "=", "(", "\n", "self", ".", "get_img_features", "(", "self", ".", "frame_queue", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "copy", "(", ")", "\n", ")", "\n", "img_feats", "=", "np", ".", "zeros", "(", "\n", "(", "self", ".", "max_action_len", ",", "raw_img_feats", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "np", ".", "float32", "\n", ")", "\n", "img_feats", "[", ":", "raw_img_feats", ".", "shape", "[", "0", "]", ",", ":", "]", "=", "raw_img_feats", ".", "copy", "(", ")", "\n", "\n", "planner_pos_queue_idx", "=", "self", ".", "episodes", "[", "idx", "]", ".", "planner_pos_queue_idx", "\n", "controller_pos_queue_idx", "=", "self", ".", "episodes", "[", "idx", "]", ".", "controller_pos_queue_idx", "\n", "\n", "planner_img_feats", "=", "np", ".", "zeros", "(", "\n", "(", "self", ".", "max_action_len", ",", "img_feats", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "np", ".", "float32", "\n", ")", "\n", "\n", "planner_img_feats", "[", "\n", ":", "self", ".", "episodes", "[", "idx", "]", ".", "planner_action_length", "\n", "]", "=", "img_feats", "[", "tuple", "(", "planner_pos_queue_idx", ")", "]", "\n", "\n", "planner_actions_in", "=", "planner_actions", ".", "clone", "(", ")", "-", "1", "\n", "planner_actions_out", "=", "planner_actions", "[", "1", ":", "]", ".", "clone", "(", ")", "-", "2", "\n", "\n", "planner_actions_in", "[", "planner_action_length", ":", "]", ".", "fill_", "(", "0", ")", "\n", "planner_mask", "=", "planner_actions_out", ".", "clone", "(", ")", ".", "gt", "(", "-", "1", ")", "\n", "\n", "if", "len", "(", "planner_actions_out", ")", ">", "planner_action_length", ":", "\n", "            ", "planner_actions_out", "[", "planner_action_length", ":", "]", ".", "fill_", "(", "0", ")", "\n", "\n", "", "controller_img_feats", "=", "np", ".", "zeros", "(", "\n", "(", "self", ".", "max_action_len", ",", "img_feats", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "np", ".", "float32", "\n", ")", "\n", "controller_img_feats", "[", ":", "controller_action_length", "]", "=", "img_feats", "[", "\n", "tuple", "(", "controller_pos_queue_idx", ")", "\n", "]", "\n", "\n", "controller_actions_in", "=", "self", ".", "episodes", "[", "idx", "]", ".", "actions", ".", "clone", "(", ")", "-", "2", "\n", "\n", "if", "len", "(", "controller_actions_in", ")", ">", "controller_action_length", ":", "\n", "            ", "controller_actions_in", "[", "controller_action_length", ":", "]", ".", "fill_", "(", "0", ")", "\n", "\n", "", "controller_out", "=", "controller_actions", "\n", "controller_mask", "=", "controller_out", ".", "clone", "(", ")", ".", "gt", "(", "-", "1", ")", "\n", "if", "len", "(", "controller_out", ")", ">", "controller_action_length", ":", "\n", "            ", "controller_out", "[", "controller_action_length", ":", "]", ".", "fill_", "(", "0", ")", "\n", "\n", "# zero out forced controller return", "\n", "", "for", "i", "in", "range", "(", "controller_action_length", ")", ":", "\n", "            ", "if", "(", "\n", "i", ">=", "self", ".", "max_controller_actions", "-", "1", "\n", "and", "controller_out", "[", "i", "]", "==", "0", "\n", "and", "(", "\n", "self", ".", "max_controller_actions", "==", "1", "\n", "or", "controller_out", "[", "\n", "i", "-", "self", ".", "max_controller_actions", "+", "1", ":", "i", "\n", "]", ".", "sum", "(", ")", "\n", "==", "self", ".", "max_controller_actions", "-", "1", "\n", ")", "\n", ")", ":", "\n", "                ", "controller_mask", "[", "i", "]", "=", "0", "\n", "", "", "return", "(", "\n", "idx", ",", "\n", "question", ",", "\n", "answer", ",", "\n", "planner_img_feats", ",", "\n", "planner_actions_in", ",", "\n", "planner_actions_out", ",", "\n", "planner_action_length", ",", "\n", "planner_mask", ",", "\n", "controller_img_feats", ",", "\n", "controller_actions_in", ",", "\n", "planner_hidden_idx", ",", "\n", "controller_out", ",", "\n", "controller_action_length", ",", "\n", "controller_mask", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.data.nav_data.NavDataset.__len__": [[542, 544], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "len", "(", "self", ".", "episodes", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.mappers.DirectDepthMapper.__init__": [[71, 93], ["torch.device", "torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "camera_height", "=", "0", ",", "\n", "near_th", "=", "0.1", ",", "\n", "far_th", "=", "4.0", ",", "\n", "h_min", "=", "0.0", ",", "\n", "h_max", "=", "1.0", ",", "\n", "map_size", "=", "40", ",", "\n", "map_cell_size", "=", "0.1", ",", "\n", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ",", "# noqa: B008", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", "DirectDepthMapper", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "near_th", "=", "near_th", "\n", "self", ".", "far_th", "=", "far_th", "\n", "self", ".", "h_min_th", "=", "h_min", "\n", "self", ".", "h_max_th", "=", "h_max", "\n", "self", ".", "camera_height", "=", "camera_height", "\n", "self", ".", "map_size_meters", "=", "map_size", "\n", "self", ".", "map_cell_size", "=", "map_cell_size", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.mappers.DirectDepthMapper.forward": [[94, 128], ["torch.eye().float", "pose.to.to.to", "mappers.depth2local3d", "mappers.pcl_to_obstacles", "float", "float", "int", "int", "len", "torch.zeros", "habitat_baselines.slambased.reprojection.reproject_local_to_global", "torch.eye", "depth.size", "depth.size", "torch.abs", "torch.abs", "habitat_baselines.slambased.reprojection.get_map_size_in_cells"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.mappers.depth2local3d", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.mappers.pcl_to_obstacles", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.reprojection.reproject_local_to_global", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.reprojection.get_map_size_in_cells"], ["", "def", "forward", "(", "self", ",", "depth", ",", "pose", "=", "torch", ".", "eye", "(", "4", ")", ".", "float", "(", ")", ")", ":", "# noqa: B008", "\n", "        ", "self", ".", "device", "=", "depth", ".", "device", "\n", "# Works for FOV = 90 degrees", "\n", "# Should be adjusted, if FOV changed", "\n", "self", ".", "fx", "=", "float", "(", "depth", ".", "size", "(", "1", ")", ")", "/", "2.0", "\n", "self", ".", "fy", "=", "float", "(", "depth", ".", "size", "(", "0", ")", ")", "/", "2.0", "\n", "self", ".", "cx", "=", "int", "(", "self", ".", "fx", ")", "-", "1", "\n", "self", ".", "cy", "=", "int", "(", "self", ".", "fy", ")", "-", "1", "\n", "pose", "=", "pose", ".", "to", "(", "self", ".", "device", ")", "\n", "local_3d_pcl", "=", "depth2local3d", "(", "depth", ",", "self", ".", "fx", ",", "self", ".", "fy", ",", "self", ".", "cx", ",", "self", ".", "cy", ")", "\n", "idxs", "=", "(", "torch", ".", "abs", "(", "local_3d_pcl", "[", ":", ",", "2", "]", ")", "<", "self", ".", "far_th", ")", "*", "(", "\n", "torch", ".", "abs", "(", "local_3d_pcl", "[", ":", ",", "2", "]", ")", ">=", "self", ".", "near_th", "\n", ")", "\n", "survived_points", "=", "local_3d_pcl", "[", "idxs", "]", "\n", "if", "len", "(", "survived_points", ")", "<", "20", ":", "\n", "            ", "map_size_in_cells", "=", "(", "\n", "get_map_size_in_cells", "(", "self", ".", "map_size_meters", ",", "self", ".", "map_cell_size", ")", "\n", "-", "1", "\n", ")", "\n", "init_map", "=", "torch", ".", "zeros", "(", "\n", "(", "map_size_in_cells", ",", "map_size_in_cells", ")", ",", "device", "=", "self", ".", "device", "\n", ")", "\n", "return", "init_map", "\n", "", "global_3d_pcl", "=", "reproject_local_to_global", "(", "survived_points", ",", "pose", ")", "[", ":", ",", ":", "3", "]", "\n", "# Because originally y looks down and from agent camera height", "\n", "global_3d_pcl", "[", ":", ",", "1", "]", "=", "-", "global_3d_pcl", "[", ":", ",", "1", "]", "+", "self", ".", "camera_height", "\n", "idxs", "=", "(", "global_3d_pcl", "[", ":", ",", "1", "]", ">", "self", ".", "h_min_th", ")", "*", "(", "\n", "global_3d_pcl", "[", ":", ",", "1", "]", "<", "self", ".", "h_max_th", "\n", ")", "\n", "global_3d_pcl", "=", "global_3d_pcl", "[", "idxs", "]", "\n", "obstacle_map", "=", "pcl_to_obstacles", "(", "\n", "global_3d_pcl", ",", "self", ".", "map_size_meters", ",", "self", ".", "map_cell_size", "\n", ")", "\n", "return", "obstacle_map", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.mappers.depth2local3d": [[18, 35], ["depth.squeeze().size", "torch.linspace().to", "torch.linspace().to", "torch.meshgrid", "depth.t().flatten", "torch.cat", "depth.squeeze", "torch.linspace", "torch.linspace", "depth.t", "depth.t().flatten.unsqueeze", "xv.flatten", "yv.flatten"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to"], ["def", "depth2local3d", "(", "depth", ",", "fx", ",", "fy", ",", "cx", ",", "cy", ")", ":", "\n", "    ", "r\"\"\"Projects depth map to 3d point cloud\n    with origin in the camera focus\n    \"\"\"", "\n", "device", "=", "depth", ".", "device", "\n", "h", ",", "w", "=", "depth", ".", "squeeze", "(", ")", ".", "size", "(", ")", "\n", "x", "=", "torch", ".", "linspace", "(", "0", ",", "w", "-", "1", ",", "w", ")", ".", "to", "(", "device", ")", "\n", "y", "=", "torch", ".", "linspace", "(", "0", ",", "h", "-", "1", ",", "h", ")", ".", "to", "(", "device", ")", "\n", "xv", ",", "yv", "=", "torch", ".", "meshgrid", "(", "[", "x", ",", "y", "]", ")", "\n", "dfl", "=", "depth", ".", "t", "(", ")", ".", "flatten", "(", ")", "\n", "return", "torch", ".", "cat", "(", "\n", "[", "\n", "(", "dfl", "*", "(", "xv", ".", "flatten", "(", ")", "-", "cx", ")", "/", "fx", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "# x", "\n", "(", "dfl", "*", "(", "yv", ".", "flatten", "(", ")", "-", "cy", ")", "/", "fy", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "# y", "\n", "dfl", ".", "unsqueeze", "(", "-", "1", ")", ",", "\n", "]", ",", "\n", "dim", "=", "1", ",", "\n", ")", "# z", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.mappers.pcl_to_obstacles": [[38, 62], ["torch.zeros", "pts3d.size", "torch.cat", "torch.round", "habitat_baselines.slambased.reprojection.get_map_size_in_cells", "len", "habitat_baselines.slambased.reprojection.project2d_pcl_into_worldmap", "len", "numpy.unique", "torch.from_numpy().to", "torch.round.detach().cpu().numpy", "torch.from_numpy", "torch.round.detach().cpu", "torch.round.detach"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.reprojection.get_map_size_in_cells", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.reprojection.project2d_pcl_into_worldmap", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to"], ["", "def", "pcl_to_obstacles", "(", "pts3d", ",", "map_size", "=", "40", ",", "cell_size", "=", "0.2", ",", "min_pts", "=", "10", ")", ":", "\n", "    ", "r\"\"\"Counts number of 3d points in 2d map cell.\n    Height is sum-pooled.\n    \"\"\"", "\n", "device", "=", "pts3d", ".", "device", "\n", "map_size_in_cells", "=", "get_map_size_in_cells", "(", "map_size", ",", "cell_size", ")", "-", "1", "\n", "init_map", "=", "torch", ".", "zeros", "(", "\n", "(", "map_size_in_cells", ",", "map_size_in_cells", ")", ",", "device", "=", "device", "\n", ")", "\n", "if", "len", "(", "pts3d", ")", "<=", "1", ":", "\n", "        ", "return", "init_map", "\n", "", "num_pts", ",", "dim", "=", "pts3d", ".", "size", "(", ")", "\n", "pts2d", "=", "torch", ".", "cat", "(", "[", "pts3d", "[", ":", ",", "2", ":", "3", "]", ",", "pts3d", "[", ":", ",", "0", ":", "1", "]", "]", ",", "dim", "=", "1", ")", "\n", "data_idxs", "=", "torch", ".", "round", "(", "\n", "project2d_pcl_into_worldmap", "(", "pts2d", ",", "map_size", ",", "cell_size", ")", "\n", ")", "\n", "if", "len", "(", "data_idxs", ")", ">", "min_pts", ":", "\n", "        ", "u", ",", "counts", "=", "np", ".", "unique", "(", "\n", "data_idxs", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "axis", "=", "0", ",", "return_counts", "=", "True", "\n", ")", "\n", "init_map", "[", "u", "[", ":", ",", "0", "]", ",", "u", "[", ":", ",", "1", "]", "]", "=", "torch", ".", "from_numpy", "(", "counts", ")", ".", "to", "(", "\n", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", "\n", ")", "\n", "", "return", "init_map", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.BasicBlock.__init__": [[66, 75], ["torch.nn.Module.__init__", "monodepth.conv3x3", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "monodepth.conv3x3", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.conv3x3", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.BasicBlock.forward": [[76, 93], ["monodepth.BasicBlock.conv1", "monodepth.BasicBlock.bn1", "monodepth.BasicBlock.relu", "monodepth.BasicBlock.conv2", "monodepth.BasicBlock.bn2", "monodepth.BasicBlock.relu", "monodepth.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.Bottleneck.__init__": [[98, 111], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.Bottleneck.forward": [[112, 133], ["monodepth.Bottleneck.conv1", "monodepth.Bottleneck.bn1", "monodepth.Bottleneck.relu", "monodepth.Bottleneck.conv2", "monodepth.Bottleneck.bn2", "monodepth.Bottleneck.relu", "monodepth.Bottleneck.conv3", "monodepth.Bottleneck.bn3", "monodepth.Bottleneck.relu", "monodepth.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.ResNet.__init__": [[136, 159], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "monodepth.ResNet._make_layer", "monodepth.ResNet._make_layer", "monodepth.ResNet._make_layer", "monodepth.ResNet._make_layer", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.Linear", "torch.nn.Linear", "monodepth.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.ResNet._make_layer", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.ResNet._make_layer", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.ResNet._make_layer", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.ResNet._make_layer": [[160, 181], ["layers.append", "range", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "block", "layers.append", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "self", ".", "inplanes", ",", "\n", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.ResNet.forward": [[182, 198], ["monodepth.ResNet.conv1", "monodepth.ResNet.bn1", "monodepth.ResNet.relu", "monodepth.ResNet.maxpool", "monodepth.ResNet.layer1", "monodepth.ResNet.layer2", "monodepth.ResNet.layer3", "monodepth.ResNet.layer4", "monodepth.ResNet.avgpool", "monodepth.ResNet.view", "monodepth.ResNet.fc", "monodepth.ResNet.size"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.model.__init__": [[260, 268], ["torch.nn.Module.__init__", "monodepth.D", "monodepth.MFF", "monodepth.R"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "Encoder", ",", "num_features", ",", "block_channel", ")", ":", "\n", "\n", "        ", "super", "(", "model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "E", "=", "Encoder", "\n", "self", ".", "D", "=", "D", "(", "num_features", ")", "\n", "self", ".", "MFF", "=", "MFF", "(", "block_channel", ")", "\n", "self", ".", "R", "=", "R", "(", "block_channel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.model.forward": [[269, 282], ["monodepth.model.E", "monodepth.model.D", "monodepth.model.MFF", "monodepth.model.R", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "monodepth.model.size", "monodepth.model.size"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_block1", ",", "x_block2", ",", "x_block3", ",", "x_block4", "=", "self", ".", "E", "(", "x", ")", "\n", "x_decoder", "=", "self", ".", "D", "(", "x_block1", ",", "x_block2", ",", "x_block3", ",", "x_block4", ")", "\n", "x_mff", "=", "self", ".", "MFF", "(", "\n", "x_block1", ",", "\n", "x_block2", ",", "\n", "x_block3", ",", "\n", "x_block4", ",", "\n", "[", "x_decoder", ".", "size", "(", "2", ")", ",", "x_decoder", ".", "size", "(", "3", ")", "]", ",", "\n", ")", "\n", "out", "=", "self", ".", "R", "(", "torch", ".", "cat", "(", "(", "x_decoder", ",", "x_mff", ")", ",", "1", ")", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth._UpProjection.__init__": [[285, 317], ["torch.nn.Sequential.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_input_features", ",", "num_output_features", ")", ":", "\n", "        ", "super", "(", "_UpProjection", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "num_input_features", ",", "\n", "num_output_features", ",", "\n", "kernel_size", "=", "5", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "2", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "num_output_features", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1_2", "=", "nn", ".", "Conv2d", "(", "\n", "num_output_features", ",", "\n", "num_output_features", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "self", ".", "bn1_2", "=", "nn", ".", "BatchNorm2d", "(", "num_output_features", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "num_input_features", ",", "\n", "num_output_features", ",", "\n", "kernel_size", "=", "5", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "2", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "num_output_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth._UpProjection.forward": [[318, 327], ["torch.nn.functional.upsample", "torch.nn.functional.upsample", "monodepth._UpProjection.relu", "monodepth._UpProjection.bn1_2", "monodepth._UpProjection.bn2", "monodepth._UpProjection.relu", "monodepth._UpProjection.bn1", "monodepth._UpProjection.conv1_2", "monodepth._UpProjection.conv2", "monodepth._UpProjection.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "size", ")", ":", "\n", "        ", "x", "=", "F", ".", "upsample", "(", "x", ",", "size", "=", "size", ",", "mode", "=", "\"bilinear\"", ")", "\n", "x_conv1", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "bran1", "=", "self", ".", "bn1_2", "(", "self", ".", "conv1_2", "(", "x_conv1", ")", ")", "\n", "bran2", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "\n", "out", "=", "self", ".", "relu", "(", "bran1", "+", "bran2", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.E_resnet.__init__": [[330, 341], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "original_model", ",", "num_features", "=", "2048", ")", ":", "\n", "        ", "super", "(", "E_resnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "original_model", ".", "conv1", "\n", "self", ".", "bn1", "=", "original_model", ".", "bn1", "\n", "self", ".", "relu", "=", "original_model", ".", "relu", "\n", "self", ".", "maxpool", "=", "original_model", ".", "maxpool", "\n", "\n", "self", ".", "layer1", "=", "original_model", ".", "layer1", "\n", "self", ".", "layer2", "=", "original_model", ".", "layer2", "\n", "self", ".", "layer3", "=", "original_model", ".", "layer3", "\n", "self", ".", "layer4", "=", "original_model", ".", "layer4", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.E_resnet.forward": [[342, 354], ["monodepth.E_resnet.conv1", "monodepth.E_resnet.bn1", "monodepth.E_resnet.relu", "monodepth.E_resnet.maxpool", "monodepth.E_resnet.layer1", "monodepth.E_resnet.layer2", "monodepth.E_resnet.layer3", "monodepth.E_resnet.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x_block1", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x_block2", "=", "self", ".", "layer2", "(", "x_block1", ")", "\n", "x_block3", "=", "self", ".", "layer3", "(", "x_block2", ")", "\n", "x_block4", "=", "self", ".", "layer4", "(", "x_block3", ")", "\n", "\n", "return", "x_block1", ",", "x_block2", ",", "x_block3", ",", "x_block4", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.D.__init__": [[357, 392], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "monodepth._UpProjection", "monodepth._UpProjection", "monodepth._UpProjection", "monodepth._UpProjection"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", "=", "2048", ")", ":", "\n", "        ", "super", "(", "D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "num_features", ",", "\n", "num_features", "//", "2", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "num_features", "=", "num_features", "//", "2", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "num_features", ")", "\n", "\n", "self", ".", "up1", "=", "_UpProjection", "(", "\n", "num_input_features", "=", "num_features", ",", "\n", "num_output_features", "=", "num_features", "//", "2", ",", "\n", ")", "\n", "num_features", "=", "num_features", "//", "2", "\n", "\n", "self", ".", "up2", "=", "_UpProjection", "(", "\n", "num_input_features", "=", "num_features", ",", "\n", "num_output_features", "=", "num_features", "//", "2", ",", "\n", ")", "\n", "num_features", "=", "num_features", "//", "2", "\n", "\n", "self", ".", "up3", "=", "_UpProjection", "(", "\n", "num_input_features", "=", "num_features", ",", "\n", "num_output_features", "=", "num_features", "//", "2", ",", "\n", ")", "\n", "num_features", "=", "num_features", "//", "2", "\n", "\n", "self", ".", "up4", "=", "_UpProjection", "(", "\n", "num_input_features", "=", "num_features", ",", "\n", "num_output_features", "=", "num_features", "//", "2", ",", "\n", ")", "\n", "num_features", "=", "num_features", "//", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.D.forward": [[393, 401], ["torch.nn.functional.relu", "torch.nn.functional.relu", "monodepth.D.up1", "monodepth.D.up2", "monodepth.D.up3", "monodepth.D.up4", "monodepth.D.bn", "monodepth.D.conv", "x_block3.size", "x_block3.size", "x_block2.size", "x_block2.size", "x_block1.size", "x_block1.size", "x_block1.size", "x_block1.size"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size"], ["", "def", "forward", "(", "self", ",", "x_block1", ",", "x_block2", ",", "x_block3", ",", "x_block4", ")", ":", "\n", "        ", "x_d0", "=", "F", ".", "relu", "(", "self", ".", "bn", "(", "self", ".", "conv", "(", "x_block4", ")", ")", ")", "\n", "x_d1", "=", "self", ".", "up1", "(", "x_d0", ",", "[", "x_block3", ".", "size", "(", "2", ")", ",", "x_block3", ".", "size", "(", "3", ")", "]", ")", "\n", "x_d2", "=", "self", ".", "up2", "(", "x_d1", ",", "[", "x_block2", ".", "size", "(", "2", ")", ",", "x_block2", ".", "size", "(", "3", ")", "]", ")", "\n", "x_d3", "=", "self", ".", "up3", "(", "x_d2", ",", "[", "x_block1", ".", "size", "(", "2", ")", ",", "x_block1", ".", "size", "(", "3", ")", "]", ")", "\n", "x_d4", "=", "self", ".", "up4", "(", "x_d3", ",", "[", "x_block1", ".", "size", "(", "2", ")", "*", "2", ",", "x_block1", ".", "size", "(", "3", ")", "*", "2", "]", ")", "\n", "\n", "return", "x_d4", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.MFF.__init__": [[404, 433], ["torch.nn.Module.__init__", "monodepth._UpProjection", "monodepth._UpProjection", "monodepth._UpProjection", "monodepth._UpProjection", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "block_channel", ",", "num_features", "=", "64", ")", ":", "\n", "\n", "        ", "super", "(", "MFF", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "up1", "=", "_UpProjection", "(", "\n", "num_input_features", "=", "block_channel", "[", "0", "]", ",", "num_output_features", "=", "16", "\n", ")", "\n", "\n", "self", ".", "up2", "=", "_UpProjection", "(", "\n", "num_input_features", "=", "block_channel", "[", "1", "]", ",", "num_output_features", "=", "16", "\n", ")", "\n", "\n", "self", ".", "up3", "=", "_UpProjection", "(", "\n", "num_input_features", "=", "block_channel", "[", "2", "]", ",", "num_output_features", "=", "16", "\n", ")", "\n", "\n", "self", ".", "up4", "=", "_UpProjection", "(", "\n", "num_input_features", "=", "block_channel", "[", "3", "]", ",", "num_output_features", "=", "16", "\n", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "num_features", ",", "\n", "num_features", ",", "\n", "kernel_size", "=", "5", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "2", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "num_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.MFF.forward": [[434, 444], ["monodepth.MFF.up1", "monodepth.MFF.up2", "monodepth.MFF.up3", "monodepth.MFF.up4", "monodepth.MFF.bn", "torch.nn.functional.relu", "torch.nn.functional.relu", "monodepth.MFF.conv", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x_block1", ",", "x_block2", ",", "x_block3", ",", "x_block4", ",", "size", ")", ":", "\n", "        ", "x_m1", "=", "self", ".", "up1", "(", "x_block1", ",", "size", ")", "\n", "x_m2", "=", "self", ".", "up2", "(", "x_block2", ",", "size", ")", "\n", "x_m3", "=", "self", ".", "up3", "(", "x_block3", ",", "size", ")", "\n", "x_m4", "=", "self", ".", "up4", "(", "x_block4", ",", "size", ")", "\n", "\n", "x", "=", "self", ".", "bn", "(", "self", ".", "conv", "(", "torch", ".", "cat", "(", "(", "x_m1", ",", "x_m2", ",", "x_m3", ",", "x_m4", ")", ",", "1", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.R.__init__": [[447, 474], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "block_channel", ")", ":", "\n", "\n", "        ", "super", "(", "R", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "num_features", "=", "64", "+", "block_channel", "[", "3", "]", "//", "32", "\n", "self", ".", "conv0", "=", "nn", ".", "Conv2d", "(", "\n", "num_features", ",", "\n", "num_features", ",", "\n", "kernel_size", "=", "5", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "2", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "self", ".", "bn0", "=", "nn", ".", "BatchNorm2d", "(", "num_features", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "num_features", ",", "\n", "num_features", ",", "\n", "kernel_size", "=", "5", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "2", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "num_features", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "num_features", ",", "1", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ",", "bias", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.R.forward": [[476, 488], ["monodepth.R.conv0", "monodepth.R.bn0", "torch.nn.functional.relu", "torch.nn.functional.relu", "monodepth.R.conv1", "monodepth.R.bn1", "torch.nn.functional.relu", "torch.nn.functional.relu", "monodepth.R.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x0", "=", "self", ".", "conv0", "(", "x", ")", "\n", "x0", "=", "self", ".", "bn0", "(", "x0", ")", "\n", "x0", "=", "F", ".", "relu", "(", "x0", ")", "\n", "\n", "x1", "=", "self", ".", "conv1", "(", "x0", ")", "\n", "x1", "=", "self", ".", "bn1", "(", "x1", ")", "\n", "x1", "=", "F", ".", "relu", "(", "x1", ")", "\n", "\n", "x2", "=", "self", ".", "conv2", "(", "x1", ")", "\n", "\n", "return", "x2", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.Scale.__init__": [[499, 501], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.Scale.__call__": [[502, 506], ["monodepth.Scale.changeScale"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.Scale.changeScale"], ["", "def", "__call__", "(", "self", ",", "image", ")", ":", "\n", "        ", "image", "=", "self", ".", "changeScale", "(", "image", ",", "self", ".", "size", ")", "\n", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.Scale.changeScale": [[507, 511], ["img.resize"], "methods", ["None"], ["", "def", "changeScale", "(", "self", ",", "img", ",", "size", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "ow", ",", "oh", "=", "size", "\n", "\n", "return", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "interpolation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.CenterCrop.__init__": [[514, 516], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.CenterCrop.__call__": [[517, 521], ["monodepth.CenterCrop.centerCrop"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.CenterCrop.centerCrop"], ["", "def", "__call__", "(", "self", ",", "image", ")", ":", "\n", "        ", "image", "=", "self", ".", "centerCrop", "(", "image", ",", "self", ".", "size", ")", "\n", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.CenterCrop.centerCrop": [[522, 535], ["int", "int", "image.crop.crop.crop", "round", "round"], "methods", ["None"], ["", "def", "centerCrop", "(", "self", ",", "image", ",", "size", ")", ":", "\n", "        ", "w1", ",", "h1", "=", "image", ".", "size", "\n", "tw", ",", "th", "=", "size", "\n", "\n", "if", "w1", "==", "tw", "and", "h1", "==", "th", ":", "\n", "            ", "return", "image", "\n", "\n", "", "x1", "=", "int", "(", "round", "(", "(", "w1", "-", "tw", ")", "/", "2.0", ")", ")", "\n", "y1", "=", "int", "(", "round", "(", "(", "h1", "-", "th", ")", "/", "2.0", ")", ")", "\n", "\n", "image", "=", "image", ".", "crop", "(", "(", "x1", ",", "y1", ",", "tw", "+", "x1", ",", "th", "+", "y1", ")", ")", "\n", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.ToTensor.__call__": [[543, 547], ["monodepth.ToTensor.to_tensor"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.ToTensor.to_tensor"], ["def", "__call__", "(", "self", ",", "image", ")", ":", "\n", "        ", "image", "=", "self", ".", "to_tensor", "(", "image", ")", "\n", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.ToTensor.to_tensor": [[548, 590], ["isinstance", "torch.ByteTensor.view", "torch.ByteTensor.view", "torch.ByteTensor.transpose().transpose().contiguous", "torch.ByteTensor.transpose().transpose().contiguous", "isinstance", "TypeError", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.ByteTensor.float().div", "torch.ByteTensor.float().div", "isinstance", "numpy.zeros", "pic.copyto", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.ByteTensor.float().div", "torch.ByteTensor.float().div", "monodepth._is_pil_image", "monodepth._is_numpy_image", "pic.transpose", "numpy.array", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "len", "torch.ByteTensor.transpose().transpose", "torch.ByteTensor.transpose().transpose", "type", "torch.ByteTensor.float", "torch.ByteTensor.float", "numpy.array", "torch.ByteStorage.from_buffer", "torch.ByteStorage.from_buffer", "torch.ByteStorage.from_buffer", "torch.ByteStorage.from_buffer", "torch.ByteTensor.float", "torch.ByteTensor.float", "pic.tobytes", "torch.ByteTensor.transpose", "torch.ByteTensor.transpose"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth._is_pil_image", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth._is_numpy_image"], ["", "def", "to_tensor", "(", "self", ",", "pic", ")", ":", "\n", "        ", "if", "not", "(", "_is_pil_image", "(", "pic", ")", "or", "_is_numpy_image", "(", "pic", ")", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "\"pic should be PIL Image or ndarray. Got {}\"", ".", "format", "(", "type", "(", "pic", ")", ")", "\n", ")", "\n", "\n", "", "if", "isinstance", "(", "pic", ",", "np", ".", "ndarray", ")", ":", "\n", "\n", "            ", "img", "=", "torch", ".", "from_numpy", "(", "pic", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ")", "\n", "return", "img", ".", "float", "(", ")", ".", "div", "(", "255", ")", "\n", "\n", "", "if", "accimage", "is", "not", "None", "and", "isinstance", "(", "pic", ",", "accimage", ".", "Image", ")", ":", "# type: ignore", "\n", "            ", "nppic", "=", "np", ".", "zeros", "(", "# type: ignore[unreachable]", "\n", "[", "pic", ".", "channels", ",", "pic", ".", "height", ",", "pic", ".", "width", "]", ",", "dtype", "=", "np", ".", "float32", "\n", ")", "\n", "pic", ".", "copyto", "(", "nppic", ")", "\n", "return", "torch", ".", "from_numpy", "(", "nppic", ")", "\n", "\n", "# handle PIL Image", "\n", "", "if", "pic", ".", "mode", "==", "\"I\"", ":", "\n", "            ", "img", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "pic", ",", "np", ".", "int32", ",", "copy", "=", "False", ")", ")", "\n", "", "elif", "pic", ".", "mode", "==", "\"I;16\"", ":", "\n", "            ", "img", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "pic", ",", "np", ".", "int16", ",", "copy", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "            ", "img", "=", "torch", ".", "ByteTensor", "(", "\n", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "pic", ".", "tobytes", "(", ")", ")", "# type: ignore", "\n", ")", "\n", "# PIL image mode: 1, L, P, I, F, RGB, YCbCr, RGBA, CMYK", "\n", "", "if", "pic", ".", "mode", "==", "\"YCbCr\"", ":", "\n", "            ", "nchannel", "=", "3", "\n", "", "elif", "pic", ".", "mode", "==", "\"I;16\"", ":", "\n", "            ", "nchannel", "=", "1", "\n", "", "else", ":", "\n", "            ", "nchannel", "=", "len", "(", "pic", ".", "mode", ")", "\n", "", "img", "=", "img", ".", "view", "(", "pic", ".", "size", "[", "1", "]", ",", "pic", ".", "size", "[", "0", "]", ",", "nchannel", ")", "\n", "# put it from HWC to CHW format", "\n", "# yikes, this transpose takes 80% of the loading time/CPU", "\n", "img", "=", "img", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "0", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "if", "isinstance", "(", "img", ",", "torch", ".", "ByteTensor", ")", ":", "\n", "            ", "return", "img", ".", "float", "(", ")", ".", "div", "(", "255", ")", "\n", "", "else", ":", "\n", "            ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.Normalize.__init__": [[593, 596], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.Normalize.__call__": [[597, 601], ["monodepth.Normalize.normalize"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.Normalize.normalize"], ["", "def", "__call__", "(", "self", ",", "image", ")", ":", "\n", "        ", "image", "=", "self", ".", "normalize", "(", "image", ",", "self", ".", "mean", ",", "self", ".", "std", ")", "\n", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.Normalize.normalize": [[602, 607], ["zip", "t.sub_().div_", "t.sub_"], "methods", ["None"], ["", "def", "normalize", "(", "self", ",", "tensor", ",", "mean", ",", "std", ")", ":", "\n", "        ", "for", "t", ",", "m", ",", "s", "in", "zip", "(", "tensor", ",", "mean", ",", "std", ")", ":", "\n", "            ", "t", ".", "sub_", "(", "m", ")", ".", "div_", "(", "s", ")", "\n", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.MonoDepthEstimator.__init__": [[634, 645], ["monodepth.define_model", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.load", "torch.load", "torch.load", "torch.load", "monodepth.MonoDepthEstimator.model.load_state_dict", "monodepth.MonoDepthEstimator.model.eval", "monodepth.MonoDepthEstimator.init_preprocessor", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.define_model", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.load", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.load", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.load", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.load", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_trainer.BaseTrainer.eval", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.MonoDepthEstimator.init_preprocessor"], ["    ", "def", "__init__", "(", "self", ",", "checkpoint", "=", "\"./pretrained_model/model_resnet\"", ")", ":", "\n", "        ", "self", ".", "model", "=", "define_model", "(", "\n", "is_resnet", "=", "True", ",", "is_densenet", "=", "False", ",", "is_senet", "=", "False", "\n", ")", "\n", "self", ".", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "self", ".", "model", ")", ".", "cuda", "(", ")", "\n", "cpt", "=", "torch", ".", "load", "(", "checkpoint", ")", "\n", "if", "\"state_dict\"", "in", "cpt", ":", "\n", "            ", "cpt", "=", "cpt", "[", "\"state_dict\"", "]", "\n", "", "self", ".", "model", ".", "load_state_dict", "(", "cpt", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "init_preprocessor", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.MonoDepthEstimator.init_preprocessor": [[646, 658], ["torchvision.transforms.Compose", "monodepth.Scale", "monodepth.ToTensor", "monodepth.Normalize"], "methods", ["None"], ["", "def", "init_preprocessor", "(", "self", ")", ":", "\n", "        ", "__imagenet_stats", "=", "{", "\n", "\"mean\"", ":", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "\"std\"", ":", "[", "0.229", ",", "0.224", ",", "0.225", "]", ",", "\n", "}", "\n", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "Scale", "(", "[", "320", ",", "240", "]", ")", ",", "\n", "# CenterCrop([304, 228]),", "\n", "ToTensor", "(", ")", ",", "\n", "Normalize", "(", "__imagenet_stats", "[", "\"mean\"", "]", ",", "__imagenet_stats", "[", "\"std\"", "]", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.MonoDepthEstimator.preprocess": [[661, 664], ["monodepth.MonoDepthEstimator.transform().unsqueeze", "monodepth.MonoDepthEstimator.cuda", "monodepth.MonoDepthEstimator.transform"], "methods", ["None"], ["", "def", "preprocess", "(", "self", ",", "image", ")", ":", "\n", "        ", "image_torch", "=", "self", ".", "transform", "(", "image", ")", ".", "unsqueeze", "(", "0", ")", "\n", "return", "image_torch", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.MonoDepthEstimator.compute_depth": [[665, 677], ["monodepth.MonoDepthEstimator.preprocess", "monodepth.MonoDepthEstimator.model", "monodepth.MonoDepthEstimator.view().data.cpu().numpy", "monodepth.MonoDepthEstimator.view().data.cpu", "monodepth.MonoDepthEstimator.view", "monodepth.MonoDepthEstimator.size", "monodepth.MonoDepthEstimator.size"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.MonoDepthEstimator.preprocess", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size"], ["", "def", "compute_depth", "(", "self", ",", "image", ")", ":", "\n", "# Input: image is a PIL image", "\n", "# Output: depth is a numpy array", "\n", "        ", "image_torch", "=", "self", ".", "preprocess", "(", "image", ")", "\n", "# print(image_torch.size())", "\n", "depth_torch", "=", "self", ".", "model", "(", "image_torch", ")", "\n", "depth", "=", "(", "\n", "depth_torch", ".", "view", "(", "depth_torch", ".", "size", "(", "2", ")", ",", "depth_torch", ".", "size", "(", "3", ")", ")", "\n", ".", "data", ".", "cpu", "(", ")", "\n", ".", "numpy", "(", ")", "\n", ")", "\n", "return", "depth", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.conv3x3": [[51, 60], ["torch.nn.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.resnet18": [[200, 209], ["monodepth.ResNet", "ResNet.load_state_dict", "torch.utils.model_zoo.load_url"], "function", ["None"], ["", "", "def", "resnet18", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Constructs a ResNet-18 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet18\"", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.resnet34": [[211, 220], ["monodepth.ResNet", "ResNet.load_state_dict", "torch.utils.model_zoo.load_url"], "function", ["None"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Constructs a ResNet-34 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet34\"", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.resnet50": [[222, 235], ["monodepth.ResNet", "ResNet.load_state_dict", "torch.utils.model_zoo.load_url"], "function", ["None"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Constructs a ResNet-50 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "\n", "model_zoo", ".", "load_url", "(", "\n", "model_urls", "[", "\"resnet50\"", "]", ",", "\"pretrained_model/encoder\"", "\n", ")", "\n", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.resnet101": [[237, 246], ["monodepth.ResNet", "ResNet.load_state_dict", "torch.utils.model_zoo.load_url"], "function", ["None"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Constructs a ResNet-101 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet101\"", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.resnet152": [[248, 257], ["monodepth.ResNet", "ResNet.load_state_dict", "torch.utils.model_zoo.load_url"], "function", ["None"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Constructs a ResNet-152 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "\"resnet152\"", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth._is_pil_image": [[490, 492], ["isinstance"], "function", ["None"], ["", "", "def", "_is_pil_image", "(", "img", ")", ":", "\n", "    ", "return", "isinstance", "(", "img", ",", "Image", ".", "Image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth._is_numpy_image": [[494, 496], ["isinstance"], "function", ["None"], ["", "def", "_is_numpy_image", "(", "img", ")", ":", "\n", "    ", "return", "isinstance", "(", "img", ",", "np", ".", "ndarray", ")", "and", "(", "img", ".", "ndim", "in", "{", "2", ",", "3", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.define_model": [[609, 631], ["monodepth.resnet50", "monodepth.E_resnet", "monodepth.model", "NotImplementedError", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.monodepth.resnet50"], ["", "", "def", "define_model", "(", "is_resnet", ",", "is_densenet", ",", "is_senet", ")", ":", "\n", "    ", "if", "is_resnet", ":", "\n", "        ", "original_model", "=", "resnet50", "(", "pretrained", "=", "False", ")", "\n", "Encoder", "=", "E_resnet", "(", "original_model", ")", "\n", "model1", "=", "model", "(", "\n", "Encoder", ",", "num_features", "=", "2048", ",", "block_channel", "=", "[", "256", ",", "512", ",", "1024", ",", "2048", "]", "\n", ")", "\n", "", "if", "is_densenet", ":", "\n", "# original_model = dendensenet161(pretrained=False)", "\n", "# Encoder = E_densenet(original_model)", "\n", "# model1 = model(", "\n", "#    Encoder, num_features=2208, block_channel=[192, 384, 1056, 2208]", "\n", "# )", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "", "if", "is_senet", ":", "\n", "# original_model = senet154(pretrained=False)", "\n", "# Encoder = E_senet(original_model)", "\n", "# model1 = model(", "\n", "#    Encoder, num_features=2048, block_channel=[256, 512, 1024, 2048]", "\n", "# )", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "", "return", "model1", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.utils.generate_2dgrid": [[14, 25], ["torch.stack", "torch.stack.view().permute", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace.repeat().t().contiguous().view", "torch.linspace.repeat", "torch.stack.view", "torch.linspace.repeat().t().contiguous", "torch.linspace.repeat().t", "torch.linspace.repeat"], "function", ["None"], ["\n", "from", "habitat", ".", "core", ".", "logging", "import", "logger", "\n", "from", "habitat", ".", "core", ".", "utils", "import", "try_cv2_import", "\n", "from", "habitat", ".", "utils", ".", "visualizations", "import", "maps", "\n", "\n", "cv2", "=", "try_cv2_import", "(", ")", "\n", "\n", "\n", "def", "paste_overlapping_image", "(", "\n", "background", ":", "np", ".", "ndarray", ",", "\n", "foreground", ":", "np", ".", "ndarray", ",", "\n", "location", ":", "Tuple", "[", "int", ",", "int", "]", ",", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.utils.str2bool": [[27, 34], ["v.lower", "v.lower", "ValueError"], "function", ["None"], [")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.utils.resize_pil": [[36, 40], ["PIL.Image.fromarray", "Image.fromarray.thumbnail", "numpy.array"], "function", ["None"], ["\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.utils.find_map_size": [[42, 49], ["int", "max"], "function", ["None"], ["foreground_size", "=", "foreground", ".", "shape", "[", ":", "2", "]", "\n", "min_pad", "=", "(", "\n", "max", "(", "0", ",", "foreground_size", "[", "0", "]", "//", "2", "-", "location", "[", "0", "]", ")", ",", "\n", "max", "(", "0", ",", "foreground_size", "[", "1", "]", "//", "2", "-", "location", "[", "1", "]", ")", ",", "\n", ")", "\n", "\n", "max_pad", "=", "(", "\n", "max", "(", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.utils.gettimestr": [[51, 53], ["time.strftime", "time.gmtime"], "function", ["None"], ["(", "location", "[", "0", "]", "+", "(", "foreground_size", "[", "0", "]", "-", "foreground_size", "[", "0", "]", "//", "2", ")", ")", "\n", "-", "background", ".", "shape", "[", "0", "]", ",", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.path_planners.SoftArgMin.__init__": [[38, 42], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "beta", "=", "5", ")", ":", "\n", "        ", "super", "(", "SoftArgMin", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "beta", "=", "beta", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.path_planners.SoftArgMin.forward": [[43, 51], ["torch.nn.functional.softmax", "habitat_baselines.slambased.utils.generate_2dgrid.view", "habitat_baselines.slambased.utils.generate_2dgrid", "torch.nn.functional.softmax.sum", "x.size", "x.size", "torch.nn.functional.softmax.expand_as"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.utils.generate_2dgrid", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size"], ["", "def", "forward", "(", "self", ",", "x", ",", "coords2d", "=", "None", ")", ":", "\n", "        ", "bx_sm", "=", "F", ".", "softmax", "(", "self", ".", "beta", "*", "(", "-", "x", ")", ".", "view", "(", "1", ",", "-", "1", ")", ",", "dim", "=", "1", ")", "\n", "if", "coords2d", "is", "None", ":", "\n", "            ", "coords2d", "=", "generate_2dgrid", "(", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ",", "False", ")", "\n", "", "coords2d_flat", "=", "coords2d", ".", "view", "(", "2", ",", "-", "1", ")", "\n", "return", "(", "bx_sm", ".", "expand_as", "(", "coords2d_flat", ")", "*", "coords2d_flat", ")", ".", "sum", "(", "\n", "dim", "=", "1", "\n", ")", "/", "bx_sm", ".", "sum", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.path_planners.HardArgMin.__init__": [[54, 57], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "HardArgMin", ",", "self", ")", ".", "__init__", "(", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.path_planners.HardArgMin.forward": [[58, 64], ["x.view().min", "habitat_baselines.slambased.utils.generate_2dgrid.view", "coords2d_flat[].view", "habitat_baselines.slambased.utils.generate_2dgrid", "x.view", "x.size", "x.size"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.utils.generate_2dgrid", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size"], ["", "def", "forward", "(", "self", ",", "x", ",", "coords2d", "=", "None", ")", ":", "\n", "        ", "val", ",", "idx", "=", "x", ".", "view", "(", "-", "1", ")", ".", "min", "(", "dim", "=", "0", ")", "\n", "if", "coords2d", "is", "None", ":", "\n", "            ", "coords2d", "=", "generate_2dgrid", "(", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ",", "False", ")", "\n", "", "coords2d_flat", "=", "coords2d", ".", "view", "(", "2", ",", "-", "1", ")", "\n", "return", "coords2d_flat", "[", ":", ",", "idx", "]", ".", "view", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.path_planners.DifferentiableStarPlanner.__init__": [[67, 138], ["torch.device", "torch.nn.Module.__init__", "path_planners.HardArgMin", "torch.nn.Conv2d", "torch.from_numpy", "path_planners.DifferentiableStarPlanner.neights2channels.to", "torch.nn.Conv2d", "torch.from_numpy", "path_planners.DifferentiableStarPlanner.preprocessNet.to", "path_planners.init_neights_to_channels", "numpy.array", "torch.nn.Conv2d", "torch.from_numpy", "path_planners.DifferentiableStarPlanner.gx_to_right.to", "torch.nn.Conv2d", "torch.from_numpy", "path_planners.DifferentiableStarPlanner.gx_to_left.to", "torch.nn.Conv2d", "torch.from_numpy", "path_planners.DifferentiableStarPlanner.gy_to_up.to", "torch.nn.Conv2d", "torch.from_numpy", "path_planners.DifferentiableStarPlanner.gy_to_down.to", "ValueError", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.path_planners.init_neights_to_channels", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "max_steps", "=", "500", ",", "\n", "visualize", "=", "False", ",", "\n", "preprocess", "=", "False", ",", "\n", "beta", "=", "100", ",", "\n", "connectivity", "=", "\"eight\"", ",", "\n", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ",", "# noqa: B008", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", "DifferentiableStarPlanner", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "eps", "=", "1e-12", "\n", "self", ".", "max_steps", "=", "max_steps", "\n", "self", ".", "visualize", "=", "visualize", "\n", "self", ".", "inf", "=", "1e7", "\n", "self", ".", "ob_cost", "=", "10000.0", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "beta", "=", "beta", "\n", "self", ".", "preprocess", "=", "preprocess", "\n", "# self.argmin = SoftArgMin(beta)", "\n", "self", ".", "argmin", "=", "HardArgMin", "(", ")", "\n", "self", ".", "neights2channels", "=", "nn", ".", "Conv2d", "(", "1", ",", "9", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "bias", "=", "False", ")", "\n", "self", ".", "neights2channels", ".", "weight", ".", "data", "=", "torch", ".", "from_numpy", "(", "\n", "init_neights_to_channels", "(", "3", ")", "\n", ")", "\n", "self", ".", "neights2channels", ".", "to", "(", "device", ")", "\n", "self", ".", "preprocessNet", "=", "nn", ".", "Conv2d", "(", "\n", "1", ",", "1", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "preprocessNet", ".", "weight", ".", "data", "=", "torch", ".", "from_numpy", "(", "\n", "np", ".", "array", "(", "\n", "[", "\n", "[", "\n", "[", "\n", "[", "0.00001", ",", "0.0001", ",", "0.00001", "]", ",", "\n", "[", "0.0001", ",", "1", ",", "0.0001", "]", ",", "\n", "[", "0.00001", ",", "0.0001", ",", "0.00001", "]", ",", "\n", "]", "\n", "]", "\n", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n", ")", "\n", "self", ".", "preprocessNet", ".", "to", "(", "device", ")", "\n", "if", "connectivity", "==", "\"eight\"", ":", "\n", "            ", "self", ".", "gx_to_right", "=", "nn", ".", "Conv2d", "(", "1", ",", "1", ",", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "bias", "=", "False", ")", "\n", "self", ".", "gx_to_right", ".", "weight", ".", "data", "=", "torch", ".", "from_numpy", "(", "\n", "np", ".", "array", "(", "[", "[", "[", "[", "0", ",", "1", ",", "-", "1", "]", "]", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", ")", "\n", "self", ".", "gx_to_right", ".", "to", "(", "device", ")", "\n", "\n", "self", ".", "gx_to_left", "=", "nn", ".", "Conv2d", "(", "1", ",", "1", ",", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "bias", "=", "False", ")", "\n", "self", ".", "gx_to_left", ".", "weight", ".", "data", "=", "torch", ".", "from_numpy", "(", "\n", "np", ".", "array", "(", "[", "[", "[", "[", "-", "1", ",", "1", ",", "0", "]", "]", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", ")", "\n", "self", ".", "gx_to_left", ".", "to", "(", "device", ")", "\n", "\n", "self", ".", "gy_to_up", "=", "nn", ".", "Conv2d", "(", "1", ",", "1", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "bias", "=", "False", ")", "\n", "self", ".", "gy_to_up", ".", "weight", ".", "data", "=", "torch", ".", "from_numpy", "(", "\n", "np", ".", "array", "(", "[", "[", "[", "[", "0", "]", ",", "[", "1", "]", ",", "[", "-", "1", "]", "]", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", ")", "\n", "self", ".", "gy_to_up", ".", "to", "(", "device", ")", "\n", "\n", "self", ".", "gy_to_down", "=", "nn", ".", "Conv2d", "(", "1", ",", "1", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "bias", "=", "False", ")", "\n", "self", ".", "gy_to_down", ".", "weight", ".", "data", "=", "torch", ".", "from_numpy", "(", "\n", "np", ".", "array", "(", "[", "[", "[", "[", "-", "1", "]", ",", "[", "1", "]", ",", "[", "0", "]", "]", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", ")", "\n", "self", ".", "gy_to_down", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Only \"eight\" connectivity now supported'", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.path_planners.DifferentiableStarPlanner.preprocess_obstacle_map": [[139, 143], ["path_planners.DifferentiableStarPlanner.preprocessNet"], "methods", ["None"], ["", "def", "preprocess_obstacle_map", "(", "self", ",", "obstacle_map", ")", ":", "\n", "        ", "if", "self", ".", "preprocess", ":", "\n", "            ", "return", "self", ".", "preprocessNet", "(", "obstacle_map", ")", "\n", "", "return", "obstacle_map", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.path_planners.DifferentiableStarPlanner.coords2grid": [[144, 150], ["grid.view().flip", "node_coords.squeeze", "torch.FloatTensor().to", "torch.FloatTensor().to", "grid.view", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to"], ["", "def", "coords2grid", "(", "self", ",", "node_coords", ",", "h", ",", "w", ")", ":", "\n", "        ", "grid", "=", "node_coords", ".", "squeeze", "(", ")", "-", "torch", ".", "FloatTensor", "(", "\n", "(", "h", "/", "2.0", ",", "w", "/", "2.0", ")", "\n", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "grid", "=", "grid", "/", "torch", ".", "FloatTensor", "(", "(", "h", "/", "2.0", ",", "w", "/", "2.0", ")", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "return", "grid", ".", "view", "(", "1", ",", "1", ",", "1", ",", "2", ")", ".", "flip", "(", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.path_planners.DifferentiableStarPlanner.init_closelistmap": [[151, 153], ["torch.zeros_like().float", "torch.zeros_like"], "methods", ["None"], ["", "def", "init_closelistmap", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "zeros_like", "(", "self", ".", "start_map", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.path_planners.DifferentiableStarPlanner.init_openlistmap": [[154, 156], ["path_planners.DifferentiableStarPlanner.start_map.clone"], "methods", ["None"], ["", "def", "init_openlistmap", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "start_map", ".", "clone", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.path_planners.DifferentiableStarPlanner.init_g_map": [[157, 163], ["torch.clamp", "torch.ones_like", "path_planners.DifferentiableStarPlanner.start_map.clone"], "methods", ["None"], ["", "def", "init_g_map", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "clamp", "(", "\n", "self", ".", "inf", "\n", "*", "(", "torch", ".", "ones_like", "(", "self", ".", "start_map", ")", "-", "self", ".", "start_map", ".", "clone", "(", ")", ")", ",", "\n", "min", "=", "0", ",", "\n", "max", "=", "self", ".", "inf", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.path_planners.DifferentiableStarPlanner.safe_roi_2d": [[165, 171], ["int", "int", "int", "int", "max", "min", "max", "min", "torch.round().item", "torch.round().item", "torch.round().item", "torch.round().item", "torch.round", "torch.round", "torch.round", "torch.round"], "methods", ["None"], ["", "def", "safe_roi_2d", "(", "self", ",", "ymin", ",", "ymax", ",", "xmin", ",", "xmax", ")", ":", "\n", "        ", "return", "(", "\n", "int", "(", "max", "(", "0", ",", "torch", ".", "round", "(", "ymin", ")", ".", "item", "(", ")", ")", ")", ",", "\n", "int", "(", "min", "(", "torch", ".", "round", "(", "ymax", ")", ".", "item", "(", ")", ",", "self", ".", "height", ")", ")", ",", "\n", "int", "(", "max", "(", "0", ",", "torch", ".", "round", "(", "xmin", ")", ".", "item", "(", ")", ")", ")", ",", "\n", "int", "(", "min", "(", "torch", ".", "round", "(", "xmax", ")", ".", "item", "(", ")", ",", "self", ".", "width", ")", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.path_planners.DifferentiableStarPlanner.forward": [[173, 327], ["path_planners.DifferentiableStarPlanner.preprocess_obstacle_map", "start_map.to", "torch.zeros_like().to", "coords.to", "goal_map.to", "torch.zeros_like().to", "obstacles.size", "obstacles.size", "torch.max", "path_planners.DifferentiableStarPlanner.calculate_local_path_costs", "path_planners.DifferentiableStarPlanner.init_g_map", "path_planners.DifferentiableStarPlanner.init_closelistmap", "path_planners.DifferentiableStarPlanner.init_openlistmap", "obstacles.to", "torch.device", "path_planners.DifferentiableStarPlanner.goal_map.view", "matplotlib.pyplot.subplots", "path_planners.DifferentiableStarPlanner.ax.imshow", "path_planners.DifferentiableStarPlanner.fig.canvas.draw", "int", "path_planners.DifferentiableStarPlanner.safe_roi_2d", "range", "path_planners.DifferentiableStarPlanner.reconstruct_path", "torch.zeros_like", "torch.zeros_like", "path_planners.DifferentiableStarPlanner.g_map.squeeze().cpu().detach().numpy().astype", "[].item", "[].item", "torch.sqrt().item", "path_planners.DifferentiableStarPlanner.neights2channels", "torch.min", "torch.max", "torch.nn.functional.relu", "torch.min", "torch.max", "torch.nn.functional.relu", "torch.min", "torch.max", "torch.nn.functional.relu", "path_planners.DifferentiableStarPlanner.g_map[].clone", "[].item", "[].item", "path_planners.DifferentiableStarPlanner.g_map.squeeze().cpu().detach().numpy", "torch.sqrt", "path_planners.DifferentiableStarPlanner.close_list_map.view", "path_planners.DifferentiableStarPlanner.g_map.view", "torch.nn.functional.max_pool2d", "torch.nn.functional.max_pool2d", "torch.nn.functional.max_pool2d", "path_planners.DifferentiableStarPlanner.g_map.squeeze().cpu().detach", "path_planners.DifferentiableStarPlanner.close_list_map.view", "path_planners.DifferentiableStarPlanner.g_map.view", "path_planners.DifferentiableStarPlanner.start_map.expand_as", "path_planners.DifferentiableStarPlanner.goal_map.expand_as", "path_planners.DifferentiableStarPlanner.neights2channels", "path_planners.DifferentiableStarPlanner.neights2channels", "path_planners.DifferentiableStarPlanner.g_map.squeeze().cpu", "torch.nn.functional.pad", "torch.nn.functional.pad", "path_planners.DifferentiableStarPlanner.g_map.squeeze"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.path_planners.DifferentiableStarPlanner.preprocess_obstacle_map", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.path_planners.DifferentiableStarPlanner.calculate_local_path_costs", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.path_planners.DifferentiableStarPlanner.init_g_map", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.path_planners.DifferentiableStarPlanner.init_closelistmap", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.path_planners.DifferentiableStarPlanner.init_openlistmap", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.path_planners.safe_roi_2d", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.path_planners.DifferentiableStarPlanner.reconstruct_path"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "obstacles", ",", "\n", "coords", ",", "\n", "start_map", ",", "\n", "goal_map", ",", "\n", "non_obstacle_cost_map", "=", "None", ",", "\n", "additional_steps", "=", "50", ",", "\n", "return_path", "=", "True", ",", "\n", ")", ":", "\n", "        ", "self", ".", "trav_init_time", "=", "0", "\n", "self", ".", "trav_mask_time", "=", "0", "\n", "self", ".", "trav_soft_time", "=", "0", "\n", "self", ".", "conv_time", "=", "0", "\n", "self", ".", "close_time", "=", "0", "\n", "\n", "self", ".", "obstacles", "=", "self", ".", "preprocess_obstacle_map", "(", "\n", "obstacles", ".", "to", "(", "self", ".", "device", ")", "\n", ")", "\n", "self", ".", "start_map", "=", "start_map", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "been_there", "=", "torch", ".", "zeros_like", "(", "self", ".", "start_map", ")", ".", "to", "(", "\n", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", ")", "\n", "self", ".", "coords", "=", "coords", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "goal_map", "=", "goal_map", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "been_there", "=", "torch", ".", "zeros_like", "(", "self", ".", "goal_map", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "height", "=", "obstacles", ".", "size", "(", "2", ")", "\n", "self", ".", "width", "=", "obstacles", ".", "size", "(", "3", ")", "\n", "m", ",", "goal_idx", "=", "torch", ".", "max", "(", "self", ".", "goal_map", ".", "view", "(", "-", "1", ")", ",", "0", ")", "\n", "c_map", "=", "self", ".", "calculate_local_path_costs", "(", "non_obstacle_cost_map", ")", "\n", "# c_map might be non persistent in map update", "\n", "self", ".", "g_map", "=", "self", ".", "init_g_map", "(", ")", "\n", "self", ".", "close_list_map", "=", "self", ".", "init_closelistmap", "(", ")", "\n", "self", ".", "open_list_map", "=", "self", ".", "init_openlistmap", "(", ")", "\n", "not_done", "=", "False", "\n", "step", "=", "0", "\n", "stopped_by_max_iter", "=", "False", "\n", "if", "self", ".", "visualize", ":", "\n", "            ", "self", ".", "fig", ",", "self", ".", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "1", ")", "\n", "self", ".", "image", "=", "self", ".", "ax", ".", "imshow", "(", "\n", "self", ".", "g_map", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "animated", "=", "True", ",", "\n", ")", "\n", "self", ".", "fig", ".", "canvas", ".", "draw", "(", ")", "\n", "", "not_done", "=", "(", "self", ".", "close_list_map", ".", "view", "(", "-", "1", ")", "[", "goal_idx", "]", ".", "item", "(", ")", "<", "1.0", ")", "or", "(", "\n", "self", ".", "g_map", ".", "view", "(", "-", "1", ")", "[", "goal_idx", "]", ".", "item", "(", ")", ">=", "0.9", "*", "self", ".", "ob_cost", "\n", ")", "\n", "rad", "=", "1", "\n", "self", ".", "start_coords", "=", "(", "\n", "(", "self", ".", "coords", "*", "self", ".", "start_map", ".", "expand_as", "(", "self", ".", "coords", ")", ")", "\n", ".", "sum", "(", "dim", "=", "2", ")", "\n", ".", "sum", "(", "dim", "=", "2", ")", "\n", ".", "squeeze", "(", ")", "\n", ")", "\n", "node_coords", "=", "self", ".", "start_coords", "\n", "self", ".", "goal_coords", "=", "(", "\n", "(", "self", ".", "coords", "*", "self", ".", "goal_map", ".", "expand_as", "(", "self", ".", "coords", ")", ")", "\n", ".", "sum", "(", "dim", "=", "2", ")", "\n", ".", "sum", "(", "dim", "=", "2", ")", "\n", ".", "squeeze", "(", ")", "\n", ")", "\n", "self", ".", "max_steps", "=", "4", "*", "int", "(", "\n", "torch", ".", "sqrt", "(", "\n", "(", "(", "self", ".", "start_coords", "-", "self", ".", "goal_coords", ")", "**", "2", ")", ".", "sum", "(", ")", "+", "1e-6", "\n", ")", ".", "item", "(", ")", "\n", ")", "\n", "while", "not_done", ":", "\n", "            ", "ymin", ",", "ymax", ",", "xmin", ",", "xmax", "=", "self", ".", "safe_roi_2d", "(", "\n", "node_coords", "[", "0", "]", "-", "rad", ",", "\n", "node_coords", "[", "0", "]", "+", "rad", "+", "1", ",", "\n", "node_coords", "[", "1", "]", "-", "rad", ",", "\n", "node_coords", "[", "1", "]", "+", "rad", "+", "1", ",", "\n", ")", "\n", "if", "(", "\n", "(", "ymin", "-", "1", ">", "0", ")", "\n", "and", "(", "xmin", "-", "1", ">", "0", ")", "\n", "and", "(", "ymax", "+", "1", "<", "self", ".", "height", ")", "\n", "and", "(", "xmax", "+", "1", "<", "self", ".", "width", ")", "\n", ")", ":", "\n", "                ", "n2c", "=", "self", ".", "neights2channels", "(", "\n", "self", ".", "g_map", "[", ":", ",", ":", ",", "ymin", "-", "1", ":", "ymax", "+", "1", ",", "xmin", "-", "1", ":", "xmax", "+", "1", "]", "\n", ")", "\n", "self", ".", "g_map", "[", ":", ",", ":", ",", "ymin", ":", "ymax", ",", "xmin", ":", "xmax", "]", "=", "torch", ".", "min", "(", "\n", "self", ".", "g_map", "[", ":", ",", ":", ",", "ymin", ":", "ymax", ",", "xmin", ":", "xmax", "]", ".", "clone", "(", ")", ",", "\n", "(", "n2c", "+", "c_map", "[", ":", ",", ":", ",", "ymin", ":", "ymax", ",", "xmin", ":", "xmax", "]", ")", ".", "min", "(", "\n", "dim", "=", "1", ",", "keepdim", "=", "True", "\n", ")", "[", "0", "]", ",", "\n", ")", "\n", "self", ".", "close_list_map", "[", ":", ",", ":", ",", "ymin", ":", "ymax", ",", "xmin", ":", "xmax", "]", "=", "torch", ".", "max", "(", "\n", "self", ".", "close_list_map", "[", ":", ",", ":", ",", "ymin", ":", "ymax", ",", "xmin", ":", "xmax", "]", ",", "\n", "self", ".", "open_list_map", "[", ":", ",", ":", ",", "ymin", ":", "ymax", ",", "xmin", ":", "xmax", "]", ",", "\n", ")", "\n", "self", ".", "open_list_map", "[", ":", ",", ":", ",", "ymin", ":", "ymax", ",", "xmin", ":", "xmax", "]", "=", "F", ".", "relu", "(", "\n", "F", ".", "max_pool2d", "(", "\n", "self", ".", "open_list_map", "[", "\n", ":", ",", ":", ",", "ymin", "-", "1", ":", "ymax", "+", "1", ",", "xmin", "-", "1", ":", "xmax", "+", "1", "\n", "]", ",", "\n", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", ")", "\n", "-", "self", ".", "close_list_map", "[", ":", ",", ":", ",", "ymin", ":", "ymax", ",", "xmin", ":", "xmax", "]", "\n", "-", "self", ".", "obstacles", "[", ":", ",", ":", ",", "ymin", ":", "ymax", ",", "xmin", ":", "xmax", "]", "\n", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "g_map", "=", "torch", ".", "min", "(", "\n", "self", ".", "g_map", ",", "\n", "(", "\n", "self", ".", "neights2channels", "(", "\n", "F", ".", "pad", "(", "self", ".", "g_map", ",", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\"replicate\"", ")", "\n", ")", "\n", "+", "c_map", "\n", ")", ".", "min", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", ",", "\n", ")", "\n", "self", ".", "close_list_map", "=", "torch", ".", "max", "(", "\n", "self", ".", "close_list_map", ",", "self", ".", "open_list_map", "\n", ")", "\n", "self", ".", "open_list_map", "=", "F", ".", "relu", "(", "\n", "F", ".", "max_pool2d", "(", "self", ".", "open_list_map", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "-", "self", ".", "close_list_map", "\n", "-", "self", ".", "obstacles", "\n", ")", "\n", "", "step", "+=", "1", "\n", "if", "step", ">=", "self", ".", "max_steps", ":", "\n", "                ", "stopped_by_max_iter", "=", "True", "\n", "break", "\n", "", "not_done", "=", "(", "\n", "self", ".", "close_list_map", ".", "view", "(", "-", "1", ")", "[", "goal_idx", "]", ".", "item", "(", ")", "<", "1.0", "\n", ")", "or", "(", "self", ".", "g_map", ".", "view", "(", "-", "1", ")", "[", "goal_idx", "]", ".", "item", "(", ")", ">=", "0.1", "*", "self", ".", "inf", ")", "\n", "rad", "+=", "1", "\n", "", "if", "not", "stopped_by_max_iter", ":", "\n", "            ", "for", "_", "in", "range", "(", "additional_steps", ")", ":", "\n", "# now propagating beyong start point", "\n", "                ", "self", ".", "g_map", "=", "torch", ".", "min", "(", "\n", "self", ".", "g_map", ",", "\n", "(", "\n", "self", ".", "neights2channels", "(", "\n", "F", ".", "pad", "(", "self", ".", "g_map", ",", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\"replicate\"", ")", "\n", ")", "\n", "+", "c_map", "\n", ")", ".", "min", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", ",", "\n", ")", "\n", "self", ".", "close_list_map", "=", "torch", ".", "max", "(", "\n", "self", ".", "close_list_map", ",", "self", ".", "open_list_map", "\n", ")", "\n", "self", ".", "open_list_map", "=", "F", ".", "relu", "(", "\n", "F", ".", "max_pool2d", "(", "self", ".", "open_list_map", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "-", "self", ".", "close_list_map", "\n", "-", "self", ".", "obstacles", "\n", ")", "\n", "", "", "if", "return_path", ":", "\n", "            ", "out_path", ",", "cost", "=", "self", ".", "reconstruct_path", "(", ")", "\n", "return", "out_path", ",", "cost", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.path_planners.DifferentiableStarPlanner.calculate_local_path_costs": [[328, 423], ["coords.size", "coords.size", "torch.nn.functional.pad", "torch.cat", "torch.ones_like().to", "non_obstacle_cost_map.to", "path_planners.DifferentiableStarPlanner.gx_to_left", "path_planners.DifferentiableStarPlanner.gx_to_right", "path_planners.DifferentiableStarPlanner.gy_to_up", "path_planners.DifferentiableStarPlanner.gy_to_down", "torch.clamp", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch.nn.functional.pad", "non_obstacle_cost_map.to.expand_as", "torch.ones_like", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to"], ["", "def", "calculate_local_path_costs", "(", "self", ",", "non_obstacle_cost_map", "=", "None", ")", ":", "\n", "        ", "coords", "=", "self", ".", "coords", "\n", "h", "=", "coords", ".", "size", "(", "2", ")", "\n", "w", "=", "coords", ".", "size", "(", "3", ")", "\n", "obstacles_pd", "=", "F", ".", "pad", "(", "self", ".", "obstacles", ",", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\"replicate\"", ")", "\n", "if", "non_obstacle_cost_map", "is", "None", ":", "\n", "            ", "learned_bias", "=", "torch", ".", "ones_like", "(", "self", ".", "obstacles", ")", ".", "to", "(", "\n", "obstacles_pd", ".", "device", "\n", ")", "\n", "", "else", ":", "\n", "            ", "learned_bias", "=", "non_obstacle_cost_map", ".", "to", "(", "obstacles_pd", ".", "device", ")", "\n", "", "left_diff_sq", "=", "(", "\n", "self", ".", "gx_to_left", "(", "\n", "F", ".", "pad", "(", "coords", "[", ":", ",", "1", ":", "2", ",", ":", ",", ":", "]", ",", "(", "1", ",", "1", ",", "0", ",", "0", ")", ",", "\"replicate\"", ")", "\n", ")", "\n", "**", "2", "\n", ")", "\n", "right_diff_sq", "=", "(", "\n", "self", ".", "gx_to_right", "(", "\n", "F", ".", "pad", "(", "coords", "[", ":", ",", "1", ":", "2", ",", ":", ",", ":", "]", ",", "(", "1", ",", "1", ",", "0", ",", "0", ")", ",", "\"replicate\"", ")", "\n", ")", "\n", "**", "2", "\n", ")", "\n", "up_diff_sq", "=", "(", "\n", "self", ".", "gy_to_up", "(", "\n", "F", ".", "pad", "(", "coords", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", ",", "(", "0", ",", "0", ",", "1", ",", "1", ")", ",", "\"replicate\"", ")", "\n", ")", "\n", "**", "2", "\n", ")", "\n", "down_diff_sq", "=", "(", "\n", "self", ".", "gy_to_down", "(", "\n", "F", ".", "pad", "(", "coords", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", ",", "(", "0", ",", "0", ",", "1", ",", "1", ")", ",", "\"replicate\"", ")", "\n", ")", "\n", "**", "2", "\n", ")", "\n", "out", "=", "torch", ".", "cat", "(", "\n", "[", "\n", "# Order in from up to down, from left to right", "\n", "# hopefully same as in PyTorch", "\n", "torch", ".", "sqrt", "(", "left_diff_sq", "+", "up_diff_sq", "+", "self", ".", "eps", ")", "\n", "+", "self", ".", "ob_cost", "\n", "*", "torch", ".", "max", "(", "\n", "obstacles_pd", "[", ":", ",", ":", ",", "0", ":", "h", ",", "0", ":", "w", "]", ",", "\n", "obstacles_pd", "[", ":", ",", ":", ",", "1", ":", "h", "+", "1", ",", "1", ":", "w", "+", "1", "]", ",", "\n", ")", ",", "\n", "torch", ".", "sqrt", "(", "left_diff_sq", "+", "self", ".", "eps", ")", "\n", "+", "self", ".", "ob_cost", "\n", "*", "torch", ".", "max", "(", "\n", "obstacles_pd", "[", ":", ",", ":", ",", "0", ":", "h", ",", "1", ":", "w", "+", "1", "]", ",", "\n", "obstacles_pd", "[", ":", ",", ":", ",", "1", ":", "h", "+", "1", ",", "1", ":", "w", "+", "1", "]", ",", "\n", ")", ",", "\n", "torch", ".", "sqrt", "(", "left_diff_sq", "+", "down_diff_sq", "+", "self", ".", "eps", ")", "\n", "+", "self", ".", "ob_cost", "\n", "*", "torch", ".", "max", "(", "\n", "obstacles_pd", "[", ":", ",", ":", ",", "2", ":", "h", "+", "2", ",", "0", ":", "w", "]", ",", "\n", "obstacles_pd", "[", ":", ",", ":", ",", "1", ":", "h", "+", "1", ",", "1", ":", "w", "+", "1", "]", ",", "\n", ")", ",", "\n", "torch", ".", "sqrt", "(", "up_diff_sq", "+", "self", ".", "eps", ")", "\n", "+", "self", ".", "ob_cost", "\n", "*", "torch", ".", "max", "(", "\n", "obstacles_pd", "[", ":", ",", ":", ",", "0", ":", "h", ",", "1", ":", "w", "+", "1", "]", ",", "\n", "obstacles_pd", "[", ":", ",", ":", ",", "1", ":", "h", "+", "1", ",", "1", ":", "w", "+", "1", "]", ",", "\n", ")", ",", "\n", "0", "*", "right_diff_sq", "\n", "+", "self", ".", "ob_cost", "\n", "*", "obstacles_pd", "[", ":", ",", ":", ",", "1", ":", "h", "+", "1", ",", "1", ":", "w", "+", "1", "]", ",", "# current center", "\n", "torch", ".", "sqrt", "(", "down_diff_sq", "+", "self", ".", "eps", ")", "\n", "+", "self", ".", "ob_cost", "\n", "*", "torch", ".", "max", "(", "\n", "obstacles_pd", "[", ":", ",", ":", ",", "2", ":", "h", "+", "2", ",", "1", ":", "w", "+", "1", "]", ",", "\n", "obstacles_pd", "[", ":", ",", ":", ",", "1", ":", "h", "+", "1", ",", "1", ":", "w", "+", "1", "]", ",", "\n", ")", ",", "\n", "torch", ".", "sqrt", "(", "right_diff_sq", "+", "up_diff_sq", "+", "self", ".", "eps", ")", "\n", "+", "self", ".", "ob_cost", "\n", "*", "torch", ".", "max", "(", "\n", "obstacles_pd", "[", ":", ",", ":", ",", "0", ":", "h", ",", "2", ":", "w", "+", "2", "]", ",", "\n", "obstacles_pd", "[", ":", ",", ":", ",", "1", ":", "h", "+", "1", ",", "1", ":", "w", "+", "1", "]", ",", "\n", ")", ",", "\n", "torch", ".", "sqrt", "(", "right_diff_sq", "+", "self", ".", "eps", ")", "\n", "+", "self", ".", "ob_cost", "\n", "*", "torch", ".", "max", "(", "\n", "obstacles_pd", "[", ":", ",", ":", ",", "1", ":", "h", "+", "1", ",", "2", ":", "w", "+", "2", "]", ",", "\n", "obstacles_pd", "[", ":", ",", ":", ",", "1", ":", "h", "+", "1", ",", "1", ":", "w", "+", "1", "]", ",", "\n", ")", ",", "\n", "torch", ".", "sqrt", "(", "right_diff_sq", "+", "down_diff_sq", "+", "self", ".", "eps", ")", "\n", "+", "self", ".", "ob_cost", "\n", "*", "torch", ".", "max", "(", "\n", "obstacles_pd", "[", ":", ",", ":", ",", "2", ":", "h", "+", "2", ",", "2", ":", "w", "+", "2", "]", ",", "\n", "obstacles_pd", "[", ":", ",", ":", ",", "1", ":", "h", "+", "1", ",", "1", ":", "w", "+", "1", "]", ",", "\n", ")", ",", "\n", "]", ",", "\n", "dim", "=", "1", ",", "\n", ")", "\n", "return", "out", "+", "torch", ".", "clamp", "(", "\n", "learned_bias", ".", "expand_as", "(", "out", ")", ",", "min", "=", "0", ",", "max", "=", "self", ".", "ob_cost", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.path_planners.DifferentiableStarPlanner.propagate_traversal": [[425, 465], ["path_planners.DifferentiableStarPlanner.safe_roi_2d", "[].clone", "path_planners.DifferentiableStarPlanner.argmin", "len", "torch.relu", "[].clone", "len", "[].clone.view", "[].clone.view", "torch.min().item", "len", "torch.relu.expand_as", "path_planners.f2ind", "path_planners.f2ind", "torch.min", "torch.randperm", "path_planners.f2ind", "path_planners.f2ind", "len", "torch.device"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.path_planners.safe_roi_2d", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.path_planners.f2ind", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.path_planners.f2ind", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.path_planners.f2ind", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.path_planners.f2ind"], ["", "def", "propagate_traversal", "(", "self", ",", "node_coords", ",", "close", ",", "g", ",", "coords", ")", ":", "\n", "        ", "ymin", ",", "ymax", ",", "xmin", ",", "xmax", "=", "self", ".", "safe_roi_2d", "(", "\n", "node_coords", "[", "0", "]", "-", "1", ",", "\n", "node_coords", "[", "0", "]", "+", "2", ",", "\n", "node_coords", "[", "1", "]", "-", "1", ",", "\n", "node_coords", "[", "1", "]", "+", "2", ",", "\n", ")", "\n", "mask", "=", "close", "[", ":", ",", ":", ",", "ymin", ":", "ymax", ",", "xmin", ":", "xmax", "]", ">", "0", "\n", "mask", "[", "\n", ":", ",", ":", ",", "f2ind", "(", "node_coords", ",", "0", ")", "-", "ymin", ",", "f2ind", "(", "node_coords", ",", "1", ")", "-", "xmin", "\n", "]", "=", "0", "\n", "mask", "=", "mask", ">", "0", "\n", "current_g_cost", "=", "g", "[", ":", ",", ":", ",", "ymin", ":", "ymax", ",", "xmin", ":", "xmax", "]", "[", "mask", "]", ".", "clone", "(", ")", "\n", "if", "len", "(", "current_g_cost", ".", "view", "(", "-", "1", ")", ")", "==", "0", ":", "\n", "# we are kind surrounded by obstacles,", "\n", "# but still need to output something", "\n", "            ", "mask", "=", "torch", ".", "relu", "(", "\n", "1.0", "-", "self", ".", "been_there", "[", ":", ",", ":", ",", "ymin", ":", "ymax", ",", "xmin", ":", "xmax", "]", "\n", ")", "\n", "mask", "[", "\n", ":", ",", "\n", ":", ",", "\n", "f2ind", "(", "node_coords", ",", "0", ")", "-", "ymin", ",", "\n", "f2ind", "(", "node_coords", ",", "1", ")", "-", "xmin", ",", "\n", "]", "=", "0", "\n", "mask", "=", "mask", ">", "0", "\n", "current_g_cost", "=", "g", "[", ":", ",", ":", ",", "ymin", ":", "ymax", ",", "xmin", ":", "xmax", "]", "[", "mask", "]", ".", "clone", "(", ")", "\n", "", "if", "len", "(", "current_g_cost", ".", "view", "(", "-", "1", ")", ")", ">", "1", ":", "\n", "            ", "current_g_cost", "=", "current_g_cost", "-", "torch", ".", "min", "(", "current_g_cost", ")", ".", "item", "(", ")", "\n", "current_g_cost", "=", "current_g_cost", "+", "0.41", "*", "torch", ".", "randperm", "(", "\n", "len", "(", "current_g_cost", ")", ",", "\n", "dtype", "=", "torch", ".", "float32", ",", "\n", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ",", "\n", ")", "/", "(", "len", "(", "current_g_cost", ")", ")", "\n", "#", "\n", "", "coords_roi", "=", "coords", "[", ":", ",", ":", ",", "ymin", ":", "ymax", ",", "xmin", ":", "xmax", "]", "\n", "out", "=", "self", ".", "argmin", "(", "\n", "current_g_cost", ",", "coords_roi", "[", "mask", ".", "expand_as", "(", "coords_roi", ")", "]", "\n", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.path_planners.DifferentiableStarPlanner.get_clean_costmap_and_goodmask": [[466, 472], ["torch.clamp", "torch.nn.functional.max_pool2d"], "methods", ["None"], ["", "def", "get_clean_costmap_and_goodmask", "(", "self", ")", ":", "\n", "        ", "good_mask", "=", "1", "-", "F", ".", "max_pool2d", "(", "self", ".", "obstacles", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "costmap", "=", "self", ".", "g_map", "\n", "obstacle_cost_corrected", "=", "10000.0", "\n", "sampling_map", "=", "torch", ".", "clamp", "(", "costmap", ",", "min", "=", "0", ",", "max", "=", "obstacle_cost_corrected", ")", "\n", "return", "sampling_map", ",", "good_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.path_planners.DifferentiableStarPlanner.reconstruct_path": [[473, 510], ["path_planners.DifferentiableStarPlanner.goal_coords.cpu", "path_planners.DifferentiableStarPlanner.start_coords.cpu", "path_planners.DifferentiableStarPlanner.cpu", "out_path.append", "path_planners.DifferentiableStarPlanner.close_list_map.cpu", "path_planners.DifferentiableStarPlanner.g_map.cpu", "path_planners.DifferentiableStarPlanner.coords.cpu", "path_planners.DifferentiableStarPlanner.been_there.cpu", "path_planners.DifferentiableStarPlanner.propagate_traversal", "out_path.append", "torch.norm().item", "[].long", "[].long", "print", "print", "ValueError", "torch.norm().item", "path_planners.f2ind", "path_planners.f2ind", "path_planners.f2ind", "path_planners.f2ind", "path_planners.f2ind", "path_planners.f2ind", "torch.norm", "torch.norm", "path_planners.DifferentiableStarPlanner.flatten", "path_planners.DifferentiableStarPlanner.flatten", "path_planners.DifferentiableStarPlanner.cpu"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.path_planners.DifferentiableStarPlanner.propagate_traversal", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.path_planners.f2ind", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.path_planners.f2ind", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.path_planners.f2ind", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.path_planners.f2ind", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.path_planners.f2ind", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.path_planners.f2ind"], ["", "def", "reconstruct_path", "(", "self", ")", ":", "\n", "        ", "out_path", "=", "[", "]", "\n", "goal_coords", "=", "self", ".", "goal_coords", ".", "cpu", "(", ")", "\n", "start_coords", "=", "self", ".", "start_coords", ".", "cpu", "(", ")", "\n", "\n", "cost", "=", "self", ".", "g_map", "[", ":", ",", ":", ",", "f2ind", "(", "goal_coords", ",", "0", ")", ",", "f2ind", "(", "goal_coords", ",", "1", ")", "]", "\n", "# Traversing", "\n", "done", "=", "False", "\n", "node_coords", "=", "goal_coords", ".", "cpu", "(", ")", "\n", "out_path", ".", "append", "(", "node_coords", ")", "\n", "self", ".", "been_there", "=", "0", "*", "self", ".", "been_there", ".", "cpu", "(", ")", "\n", "self", ".", "been_there", "[", "\n", ":", ",", ":", ",", "f2ind", "(", "node_coords", ",", "0", ")", ",", "f2ind", "(", "node_coords", ",", "1", ")", "\n", "]", "=", "1.0", "\n", "self", ".", "close_list_map", "=", "self", ".", "close_list_map", ".", "cpu", "(", ")", "\n", "self", ".", "g_map", "=", "self", ".", "g_map", ".", "cpu", "(", ")", "\n", "self", ".", "coords", "=", "self", ".", "coords", ".", "cpu", "(", ")", "\n", "count1", "=", "0", "\n", "while", "not", "done", ":", "\n", "            ", "node_coords", "=", "self", ".", "propagate_traversal", "(", "\n", "node_coords", ",", "self", ".", "close_list_map", ",", "self", ".", "g_map", ",", "self", ".", "coords", "\n", ")", "\n", "self", ".", "been_there", "[", "\n", ":", ",", ":", ",", "f2ind", "(", "node_coords", ",", "0", ")", ",", "f2ind", "(", "node_coords", ",", "1", ")", "\n", "]", "=", "1.0", "\n", "if", "torch", ".", "norm", "(", "node_coords", "-", "out_path", "[", "-", "1", "]", ",", "2", ")", ".", "item", "(", ")", "<", "0.3", ":", "\n", "                ", "y", "=", "node_coords", ".", "flatten", "(", ")", "[", "0", "]", ".", "long", "(", ")", "\n", "x", "=", "node_coords", ".", "flatten", "(", ")", "[", "1", "]", ".", "long", "(", ")", "\n", "print", "(", "self", ".", "g_map", "[", "0", ",", "0", ",", "y", "-", "2", ":", "y", "+", "3", ",", "x", "-", "2", ":", "x", "+", "3", "]", ")", "\n", "print", "(", "\"loop in out_path\"", ",", "node_coords", ")", "\n", "raise", "ValueError", "(", "\"loop in out_path\"", ")", "\n", "", "out_path", ".", "append", "(", "node_coords", ")", "\n", "done", "=", "torch", ".", "norm", "(", "node_coords", "-", "start_coords", ".", "cpu", "(", ")", ",", "2", ")", ".", "item", "(", ")", "<", "0.3", "\n", "count1", "+=", "1", "\n", "if", "count1", ">", "250", ":", "\n", "                ", "break", "\n", "", "", "return", "out_path", ",", "cost", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.path_planners.safe_roi_2d": [[16, 19], ["max", "min", "max", "min"], "function", ["None"], ["def", "safe_roi_2d", "(", "array2d", ",", "ymin", ",", "ymax", ",", "xmin", ",", "xmax", ")", ":", "\n", "    ", "(", "h", ",", "w", ")", "=", "array2d", ".", "shape", "\n", "return", "max", "(", "0", ",", "ymin", ")", ",", "min", "(", "ymax", ",", "h", ")", ",", "max", "(", "0", ",", "xmin", ")", ",", "min", "(", "xmax", ",", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.path_planners.f2ind": [[21, 24], ["torch.round().long", "torch.round"], "function", ["None"], ["", "def", "f2ind", "(", "ten", ",", "i", ")", ":", "\n", "# Float to index", "\n", "    ", "return", "torch", ".", "round", "(", "ten", "[", "i", "]", ")", ".", "long", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.path_planners.init_neights_to_channels": [[26, 35], ["numpy.zeros", "range", "range"], "function", ["None"], ["", "def", "init_neights_to_channels", "(", "ks", "=", "3", ")", ":", "\n", "    ", "r\"\"\"Convolutional kernel,\n    which maps nighborhood into channels\n    \"\"\"", "\n", "weights", "=", "np", ".", "zeros", "(", "(", "ks", "*", "ks", ",", "1", ",", "ks", ",", "ks", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "y", "in", "range", "(", "ks", ")", ":", "\n", "        ", "for", "x", "in", "range", "(", "ks", ")", ":", "\n", "            ", "weights", "[", "x", "*", "ks", "+", "y", ",", "0", ",", "y", ",", "x", "]", "=", "1.0", "\n", "", "", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.reprojection.p_zx": [[13, 15], ["None"], "function", ["None"], ["def", "p_zx", "(", "p", ")", ":", "\n", "    ", "return", "p", "[", "(", "0", ",", "2", ")", ",", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.reprojection.get_map_size_in_cells": [[17, 19], ["int", "math.ceil"], "function", ["None"], ["", "def", "get_map_size_in_cells", "(", "map_size_in_meters", ",", "cell_size_in_meters", ")", ":", "\n", "    ", "return", "int", "(", "ceil", "(", "map_size_in_meters", "/", "cell_size_in_meters", ")", ")", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.reprojection.get_pos_diff": [[21, 23], ["reprojection.p_zx", "reprojection.p_zx"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.reprojection.p_zx", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.reprojection.p_zx"], ["", "def", "get_pos_diff", "(", "p_init", ",", "p_fin", ")", ":", "\n", "    ", "return", "p_zx", "(", "p_fin", ")", "-", "p_zx", "(", "p_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.reprojection.get_distance": [[25, 27], ["torch.norm", "reprojection.get_pos_diff"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.reprojection.get_pos_diff"], ["", "def", "get_distance", "(", "p_init", ",", "p_fin", ")", ":", "\n", "    ", "return", "torch", ".", "norm", "(", "get_pos_diff", "(", "p_init", ",", "p_fin", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.reprojection.get_pos_diffs": [[29, 31], ["ps.size"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size"], ["", "def", "get_pos_diffs", "(", "ps", ")", ":", "\n", "    ", "return", "ps", "[", "1", ":", ",", "(", "0", ",", "2", ")", ",", "3", "]", "-", "ps", "[", ":", "(", "ps", ".", "size", "(", "0", ")", "-", "1", ")", ",", "(", "0", ",", "2", ")", ",", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.reprojection.angle_to_pi_2_minus_pi_2": [[33, 39], ["None"], "function", ["None"], ["", "def", "angle_to_pi_2_minus_pi_2", "(", "angle", ")", ":", "\n", "    ", "if", "angle", "<", "-", "np", ".", "pi", ":", "\n", "        ", "angle", "=", "2.0", "*", "np", ".", "pi", "+", "angle", "\n", "", "if", "angle", ">", "np", ".", "pi", ":", "\n", "        ", "angle", "=", "-", "2.0", "*", "np", ".", "pi", "+", "angle", "\n", "", "return", "angle", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.reprojection.get_direction": [[41, 54], ["reprojection.get_pos_diff", "reprojection.angle_to_pi_2_minus_pi_2", "torch.norm().item", "torch.atan2", "torch.atan2", "torch.abs().item", "torch.norm", "torch.abs"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.reprojection.get_pos_diff", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.reprojection.angle_to_pi_2_minus_pi_2"], ["", "def", "get_direction", "(", "p_init", ",", "p_fin", ",", "ang_th", "=", "0.2", ",", "pos_th", "=", "0.1", ")", ":", "\n", "    ", "pos_diff", "=", "get_pos_diff", "(", "p_init", ",", "p_fin", ")", "\n", "if", "torch", ".", "norm", "(", "pos_diff", ",", "2", ")", ".", "item", "(", ")", "<", "pos_th", ":", "\n", "        ", "return", "0", "\n", "", "else", ":", "\n", "        ", "needed_angle", "=", "torch", ".", "atan2", "(", "pos_diff", "[", "1", "]", ",", "pos_diff", "[", "0", "]", ")", "\n", "current_angle", "=", "torch", ".", "atan2", "(", "p_init", "[", "2", ",", "0", "]", ",", "p_init", "[", "0", ",", "0", "]", ")", "\n", "", "to_rotate", "=", "angle_to_pi_2_minus_pi_2", "(", "\n", "-", "np", ".", "pi", "/", "2.0", "+", "needed_angle", "-", "current_angle", "\n", ")", "\n", "if", "torch", ".", "abs", "(", "to_rotate", ")", ".", "item", "(", ")", "<", "ang_th", ":", "\n", "        ", "return", "0", "\n", "", "return", "to_rotate", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.reprojection.reproject_local_to_global": [[56, 76], ["xyz_local.size", "torch.mm", "torch.mm.t", "torch.cat", "p.squeeze", "torch.cat.t", "ValueError", "torch.ones"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size"], ["", "def", "reproject_local_to_global", "(", "xyz_local", ",", "p", ")", ":", "\n", "    ", "device", "=", "xyz_local", ".", "device", "\n", "num", ",", "dim", "=", "xyz_local", ".", "size", "(", ")", "\n", "if", "dim", "==", "3", ":", "\n", "        ", "xyz", "=", "torch", ".", "cat", "(", "\n", "[", "\n", "xyz_local", ",", "\n", "torch", ".", "ones", "(", "(", "num", ",", "1", ")", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", ",", "\n", "]", ",", "\n", "dim", "=", "1", ",", "\n", ")", "\n", "", "elif", "dim", "==", "4", ":", "\n", "        ", "xyz", "=", "xyz_local", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"3d point cloud dim is neighter 3, or 4 (homogeneous)\"", "\n", ")", "\n", "# print(xyz.shape, P.shape)", "\n", "", "xyz_global", "=", "torch", ".", "mm", "(", "p", ".", "squeeze", "(", ")", ",", "xyz", ".", "t", "(", ")", ")", "\n", "return", "xyz_global", ".", "t", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.reprojection.project2d_pcl_into_worldmap": [[78, 90], ["int", "torch.tensor", "torch.cat", "torch.mm", "math.floor", "torch.cat.t", "torch.mm.t", "zx.view", "torch.ones", "reprojection.get_map_size_in_cells", "len"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.reprojection.get_map_size_in_cells"], ["", "def", "project2d_pcl_into_worldmap", "(", "zx", ",", "map_size", ",", "cell_size", ")", ":", "\n", "    ", "device", "=", "zx", ".", "device", "\n", "shift", "=", "int", "(", "floor", "(", "get_map_size_in_cells", "(", "map_size", ",", "cell_size", ")", "/", "2.0", ")", ")", "\n", "topdown2index", "=", "torch", ".", "tensor", "(", "\n", "[", "[", "1.0", "/", "cell_size", ",", "0", ",", "shift", "]", ",", "[", "0", ",", "1.0", "/", "cell_size", ",", "shift", "]", ",", "[", "0", ",", "0", ",", "1", "]", "]", ",", "\n", "device", "=", "device", ",", "\n", ")", "\n", "world_coords_h", "=", "torch", ".", "cat", "(", "\n", "[", "zx", ".", "view", "(", "-", "1", ",", "2", ")", ",", "torch", ".", "ones", "(", "(", "len", "(", "zx", ")", ",", "1", ")", ",", "device", "=", "device", ")", "]", ",", "dim", "=", "1", "\n", ")", "\n", "world_coords", "=", "torch", ".", "mm", "(", "topdown2index", ",", "world_coords_h", ".", "t", "(", ")", ")", "\n", "return", "world_coords", ".", "t", "(", ")", "[", ":", ",", ":", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.reprojection.get_pose2d": [[92, 97], ["poses6d.view.view"], "function", ["None"], ["", "def", "get_pose2d", "(", "poses6d", ")", ":", "\n", "    ", "poses6d", "=", "poses6d", ".", "view", "(", "-", "1", ",", "4", ",", "4", ")", "\n", "poses2d", "=", "poses6d", "[", ":", ",", "(", "0", ",", "2", ")", "]", "\n", "poses2d", "=", "poses2d", "[", ":", ",", ":", ",", "(", "0", ",", "2", ",", "3", ")", "]", "\n", "return", "poses2d", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.reprojection.get_rotation_matrix": [[99, 107], ["angle_in_radians.view.view", "torch.sin", "torch.cos", "torch.cat", "torch.cat", "torch.cat"], "function", ["None"], ["", "def", "get_rotation_matrix", "(", "angle_in_radians", ")", ":", "\n", "    ", "angle_in_radians", "=", "angle_in_radians", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "\n", "sin_a", "=", "torch", ".", "sin", "(", "angle_in_radians", ")", "\n", "cos_a", "=", "torch", ".", "cos", "(", "angle_in_radians", ")", "\n", "a1x", "=", "torch", ".", "cat", "(", "[", "cos_a", ",", "sin_a", "]", ",", "dim", "=", "2", ")", "\n", "a2x", "=", "torch", ".", "cat", "(", "[", "-", "sin_a", ",", "cos_a", "]", ",", "dim", "=", "2", ")", "\n", "transform", "=", "torch", ".", "cat", "(", "[", "a1x", ",", "a2x", "]", ",", "dim", "=", "1", ")", "\n", "return", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.reprojection.normalize_zx_ori": [[109, 123], ["reprojection.get_pose2d", "torch.norm().view", "torch.cat", "torch.norm", "torch.cat", "torch.norm().view.expand", "p.size"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.reprojection.get_pose2d", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size"], ["", "def", "normalize_zx_ori", "(", "p", ")", ":", "\n", "    ", "p2d", "=", "get_pose2d", "(", "p", ")", "\n", "norms", "=", "torch", ".", "norm", "(", "p2d", "[", ":", ",", "0", ",", ":", "2", "]", ",", "dim", "=", "1", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "\n", "out", "=", "torch", ".", "cat", "(", "\n", "[", "\n", "torch", ".", "cat", "(", "\n", "[", "p", "[", ":", ",", ":", "3", ",", ":", "3", "]", "/", "norms", ".", "expand", "(", "p", ".", "size", "(", "0", ")", ",", "3", ",", "3", ")", ",", "p", "[", ":", ",", "3", ":", ",", ":", "3", "]", "]", ",", "\n", "dim", "=", "1", ",", "\n", ")", ",", "\n", "p", "[", ":", ",", ":", ",", "3", ":", "]", ",", "\n", "]", ",", "\n", "dim", "=", "2", ",", "\n", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.reprojection.add_rot_wps": [[125, 147], ["reprojection.normalize_zx_ori", "reprojection.get_pos_diffs", "torch.atan2", "reprojection.get_rotation_matrix", "normalize_zx_ori.clone", "torch.stack().squeeze", "out.permute().contiguous().view.permute().contiguous().view", "torch.stack", "out.permute().contiguous().view.permute().contiguous", "p.size", "p.size", "p.size", "p.size", "p.size", "p.size", "p.size", "p.size", "planned_tps_norm.clone.unsqueeze", "normalize_zx_ori.unsqueeze", "out.permute().contiguous().view.permute"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.reprojection.normalize_zx_ori", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.reprojection.get_pos_diffs", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.reprojection.get_rotation_matrix", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size"], ["", "def", "add_rot_wps", "(", "p", ")", ":", "\n", "    ", "planned_tps_norm", "=", "normalize_zx_ori", "(", "p", ")", "\n", "pos_diffs", "=", "get_pos_diffs", "(", "planned_tps_norm", ")", "\n", "\n", "angles", "=", "torch", ".", "atan2", "(", "pos_diffs", "[", ":", ",", "1", "]", ",", "pos_diffs", "[", ":", ",", "0", "]", ")", "\n", "rotmats", "=", "get_rotation_matrix", "(", "angles", ")", "\n", "planned_tps_norm", "[", ":", "p", ".", "size", "(", "0", ")", "-", "1", ",", "0", ",", "0", "]", "=", "rotmats", "[", ":", ",", "0", ",", "0", "]", "\n", "planned_tps_norm", "[", ":", "p", ".", "size", "(", "0", ")", "-", "1", ",", "0", ",", "2", "]", "=", "rotmats", "[", ":", ",", "0", ",", "1", "]", "\n", "planned_tps_norm", "[", ":", "p", ".", "size", "(", "0", ")", "-", "1", ",", "2", ",", "0", "]", "=", "rotmats", "[", ":", ",", "1", ",", "0", "]", "\n", "planned_tps_norm", "[", ":", "p", ".", "size", "(", "0", ")", "-", "1", ",", "2", ",", "2", "]", "=", "rotmats", "[", ":", ",", "1", ",", "1", "]", "\n", "\n", "planned_points2", "=", "planned_tps_norm", ".", "clone", "(", ")", "\n", "\n", "planned_points2", "[", "1", ":", ",", "0", ",", "0", "]", "=", "planned_tps_norm", "[", ":", "p", ".", "size", "(", "0", ")", "-", "1", ",", "0", ",", "0", "]", "\n", "planned_points2", "[", "1", ":", ",", "0", ",", "2", "]", "=", "planned_tps_norm", "[", ":", "p", ".", "size", "(", "0", ")", "-", "1", ",", "0", ",", "2", "]", "\n", "planned_points2", "[", "1", ":", ",", "2", ",", "0", "]", "=", "planned_tps_norm", "[", ":", "p", ".", "size", "(", "0", ")", "-", "1", ",", "2", ",", "0", "]", "\n", "planned_points2", "[", "1", ":", ",", "2", ",", "2", "]", "=", "planned_tps_norm", "[", ":", "p", ".", "size", "(", "0", ")", "-", "1", ",", "2", ",", "2", "]", "\n", "out", "=", "torch", ".", "stack", "(", "\n", "(", "planned_points2", ".", "unsqueeze", "(", "0", ")", ",", "planned_tps_norm", ".", "unsqueeze", "(", "0", ")", ")", ",", "dim", "=", "0", "\n", ")", ".", "squeeze", "(", ")", "\n", "out", "=", "out", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "4", ",", "4", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.reprojection.planned_path2tps": [[149, 178], ["torch.cat().view", "len", "torch.eye().unsqueeze().repeat", "int", "torch.tensor", "torch.bmm", "math.floor", "torch.tensor.inverse().unsqueeze().expand", "reprojection.add_rot_wps", "torch.cat", "torch.eye().unsqueeze", "reprojection.get_map_size_in_cells", "torch.tensor.inverse().unsqueeze", "torch.eye", "torch.tensor.inverse"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.reprojection.add_rot_wps", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.reprojection.get_map_size_in_cells"], ["", "def", "planned_path2tps", "(", "path", ",", "cell_size", ",", "map_size", ",", "agent_h", ",", "add_rot", "=", "False", ")", ":", "\n", "    ", "r\"\"\"Path is list of 2d coordinates from planner, in map cells.\n    tp is trajectory pose, 4x4 matrix - same format,\n    as in localization module\n    \"\"\"", "\n", "path", "=", "torch", ".", "cat", "(", "path", ")", ".", "view", "(", "-", "1", ",", "2", ")", "\n", "# print(path.size())", "\n", "num_pts", "=", "len", "(", "path", ")", "\n", "planned_tps", "=", "torch", ".", "eye", "(", "4", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "(", "num_pts", ",", "1", ",", "1", ")", ")", "\n", "planned_tps", "[", ":", ",", "0", ",", "3", "]", "=", "path", "[", ":", ",", "1", "]", "# switch back x and z", "\n", "planned_tps", "[", ":", ",", "1", ",", "3", "]", "=", "agent_h", "\n", "planned_tps", "[", ":", ",", "2", ",", "3", "]", "=", "path", "[", ":", ",", "0", "]", "# switch back x and z", "\n", "shift", "=", "int", "(", "floor", "(", "get_map_size_in_cells", "(", "map_size", ",", "cell_size", ")", "/", "2.0", ")", ")", "\n", "planned_tps", "[", ":", ",", "0", ",", "3", "]", "=", "planned_tps", "[", ":", ",", "0", ",", "3", "]", "-", "shift", "\n", "planned_tps", "[", ":", ",", "2", ",", "3", "]", "=", "planned_tps", "[", ":", ",", "2", ",", "3", "]", "-", "shift", "\n", "p", "=", "torch", ".", "tensor", "(", "\n", "[", "\n", "[", "1.0", "/", "cell_size", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1.0", "/", "cell_size", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1.0", "/", "cell_size", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "]", "\n", ")", "\n", "planned_tps", "=", "torch", ".", "bmm", "(", "\n", "p", ".", "inverse", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "num_pts", ",", "4", ",", "4", ")", ",", "planned_tps", "\n", ")", "\n", "if", "add_rot", ":", "\n", "        ", "return", "add_rot_wps", "(", "planned_tps", ")", "\n", "", "return", "planned_tps", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.reprojection.habitat_goalpos_to_tp": [[180, 208], ["torch.tensor().to", "torch.mm", "homogenize_p.size", "reprojection.homogenize_p", "homogenize_p.to", "torch.cat().reshape", "torch.tensor", "torch.cat", "torch.sin", "torch.cos", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.reprojection.homogenize_p", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to"], ["", "def", "habitat_goalpos_to_tp", "(", "ro_phi", ",", "p_curr", ")", ":", "\n", "    ", "r\"\"\"Convert distance and azimuth to\n    trajectory pose, 4x4 matrix - same format,\n    as in localization module\n    \"\"\"", "\n", "device", "=", "ro_phi", ".", "device", "\n", "offset", "=", "torch", ".", "tensor", "(", "\n", "[", "\n", "-", "ro_phi", "[", "0", "]", "*", "torch", ".", "sin", "(", "ro_phi", "[", "1", "]", ")", ",", "\n", "0", ",", "\n", "ro_phi", "[", "0", "]", "*", "torch", ".", "cos", "(", "ro_phi", "[", "1", "]", ")", ",", "\n", "]", "\n", ")", ".", "to", "(", "device", ")", "\n", "if", "p_curr", ".", "size", "(", "1", ")", "==", "3", ":", "\n", "        ", "p_curr", "=", "homogenize_p", "(", "p_curr", ")", "\n", "", "goal_tp", "=", "torch", ".", "mm", "(", "\n", "p_curr", ".", "to", "(", "device", ")", ",", "\n", "torch", ".", "cat", "(", "\n", "[", "\n", "offset", "\n", "*", "torch", ".", "tensor", "(", "\n", "[", "1.0", ",", "1.0", ",", "1.0", "]", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", "\n", ")", ",", "\n", "torch", ".", "tensor", "(", "[", "1.0", "]", ",", "device", "=", "device", ")", ",", "\n", "]", "\n", ")", ".", "reshape", "(", "4", ",", "1", ")", ",", "\n", ")", "\n", "return", "goal_tp", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.reprojection.habitat_goalpos_to_mapgoal_pos": [[210, 222], ["reprojection.habitat_goalpos_to_tp", "torch.eye().to", "reprojection.project_tps_into_worldmap", "torch.eye().to.view", "torch.eye"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.reprojection.habitat_goalpos_to_tp", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.reprojection.project_tps_into_worldmap"], ["", "def", "habitat_goalpos_to_mapgoal_pos", "(", "offset", ",", "p_curr", ",", "cell_size", ",", "map_size", ")", ":", "\n", "    ", "r\"\"\"Convert distance and azimuth to\n    map cell coordinates\n    \"\"\"", "\n", "device", "=", "offset", ".", "device", "\n", "goal_tp", "=", "habitat_goalpos_to_tp", "(", "offset", ",", "p_curr", ")", "\n", "goal_tp1", "=", "torch", ".", "eye", "(", "4", ")", ".", "to", "(", "device", ")", "\n", "goal_tp1", "[", ":", ",", "3", ":", "]", "=", "goal_tp", "\n", "projected_p", "=", "project_tps_into_worldmap", "(", "\n", "goal_tp1", ".", "view", "(", "1", ",", "4", ",", "4", ")", ",", "cell_size", ",", "map_size", "\n", ")", "\n", "return", "projected_p", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.reprojection.homogenize_p": [[224, 236], ["tps.view.view", "torch.cat", "tps.view.float", "torch.tensor().view().expand().to", "torch.tensor().view().expand", "tps.view.size", "torch.tensor().view", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size"], ["", "def", "homogenize_p", "(", "tps", ")", ":", "\n", "    ", "device", "=", "tps", ".", "device", "\n", "tps", "=", "tps", ".", "view", "(", "-", "1", ",", "3", ",", "4", ")", "\n", "return", "torch", ".", "cat", "(", "\n", "[", "\n", "tps", ".", "float", "(", ")", ",", "\n", "torch", ".", "tensor", "(", "[", "0", ",", "0", ",", "0", ",", "1.0", "]", ")", "\n", ".", "view", "(", "1", ",", "1", ",", "4", ")", "\n", ".", "expand", "(", "tps", ".", "size", "(", "0", ")", ",", "1", ",", "4", ")", "\n", ".", "to", "(", "device", ")", ",", "\n", "]", ",", "\n", "dim", "=", "1", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.reprojection.project_tps_into_worldmap": [[239, 269], ["isinstance", "torch.tensor().to", "torch.bmm", "int", "torch.tensor().to", "torch.cat", "torch.bmm.flip", "len", "torch.tensor().to.view().expand", "tps[].view", "math.floor", "torch.bmm", "torch.tensor", "tps.size", "torch.tensor", "torch.ones().to", "torch.tensor().to.unsqueeze().expand", "torch.floor", "torch.tensor().to.view", "reprojection.get_map_size_in_cells", "torch.cat.size", "torch.bmm.flip", "torch.ones", "torch.tensor().to.unsqueeze", "len"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.reprojection.get_map_size_in_cells", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size"], ["", "def", "project_tps_into_worldmap", "(", "tps", ",", "cell_size", ",", "map_size", ",", "do_floor", "=", "True", ")", ":", "\n", "    ", "r\"\"\"Convert 4x4 pose matrices (trajectory poses) to\n    map cell coordinates\n    \"\"\"", "\n", "if", "len", "(", "tps", ")", "==", "0", ":", "\n", "        ", "return", "[", "]", "\n", "", "if", "isinstance", "(", "tps", ",", "list", ")", ":", "\n", "        ", "return", "[", "]", "\n", "", "device", "=", "tps", ".", "device", "\n", "topdown_p", "=", "torch", ".", "tensor", "(", "[", "[", "1.0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1.0", ",", "0", "]", "]", ")", ".", "to", "(", "device", ")", "\n", "world_coords", "=", "torch", ".", "bmm", "(", "\n", "topdown_p", ".", "view", "(", "1", ",", "2", ",", "4", ")", ".", "expand", "(", "tps", ".", "size", "(", "0", ")", ",", "2", ",", "4", ")", ",", "\n", "tps", "[", ":", ",", ":", ",", "3", ":", "]", ".", "view", "(", "-", "1", ",", "4", ",", "1", ")", ",", "\n", ")", "\n", "shift", "=", "int", "(", "floor", "(", "get_map_size_in_cells", "(", "map_size", ",", "cell_size", ")", "/", "2.0", ")", ")", "\n", "topdown2index", "=", "torch", ".", "tensor", "(", "\n", "[", "[", "1.0", "/", "cell_size", ",", "0", ",", "shift", "]", ",", "[", "0", ",", "1.0", "/", "cell_size", ",", "shift", "]", ",", "[", "0", ",", "0", ",", "1", "]", "]", "\n", ")", ".", "to", "(", "device", ")", "\n", "world_coords_h", "=", "torch", ".", "cat", "(", "\n", "[", "world_coords", ",", "torch", ".", "ones", "(", "(", "len", "(", "world_coords", ")", ",", "1", ",", "1", ")", ")", ".", "to", "(", "device", ")", "]", ",", "dim", "=", "1", "\n", ")", "\n", "world_coords", "=", "torch", ".", "bmm", "(", "\n", "topdown2index", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "world_coords_h", ".", "size", "(", "0", ")", ",", "3", ",", "3", ")", ",", "\n", "world_coords_h", ",", "\n", ")", "[", ":", ",", ":", "2", ",", "0", "]", "\n", "if", "do_floor", ":", "\n", "        ", "return", "(", "\n", "torch", ".", "floor", "(", "world_coords", ".", "flip", "(", "1", ")", ")", "+", "1", "\n", ")", "# for having revesrve (z,x) ordering", "\n", "", "return", "world_coords", ".", "flip", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.reprojection.project_tps_into_worldmap_numpy": [[271, 294], ["isinstance", "numpy.array", "int", "numpy.array", "numpy.concatenate", "len", "numpy.matmul", "math.floor", "numpy.matmul", "world_coords[].astype", "np.array.reshape", "tps[].reshape", "numpy.ones", "reprojection.get_map_size_in_cells", "len"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.slambased.reprojection.get_map_size_in_cells"], ["", "def", "project_tps_into_worldmap_numpy", "(", "tps", ",", "slam_to_world", ",", "cell_size", ",", "map_size", ")", ":", "\n", "    ", "if", "len", "(", "tps", ")", "==", "0", ":", "\n", "        ", "return", "[", "]", "\n", "", "if", "isinstance", "(", "tps", ",", "list", ")", ":", "\n", "        ", "return", "[", "]", "\n", "# tps is expected in [n,4,4] format", "\n", "", "topdown_p", "=", "np", ".", "array", "(", "[", "[", "slam_to_world", ",", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "slam_to_world", ",", "0", "]", "]", ")", "\n", "try", ":", "\n", "        ", "world_coords", "=", "np", ".", "matmul", "(", "\n", "topdown_p", ".", "reshape", "(", "1", ",", "2", ",", "4", ")", ",", "tps", "[", ":", ",", ":", ",", "3", ":", "]", ".", "reshape", "(", "-", "1", ",", "4", ",", "1", ")", "\n", ")", "\n", "", "except", "BaseException", ":", "\n", "        ", "return", "[", "]", "\n", "", "shift", "=", "int", "(", "floor", "(", "get_map_size_in_cells", "(", "map_size", ",", "cell_size", ")", "/", "2.0", ")", ")", "\n", "topdown2index", "=", "np", ".", "array", "(", "\n", "[", "[", "1.0", "/", "cell_size", ",", "0", ",", "shift", "]", ",", "[", "0", ",", "1.0", "/", "cell_size", ",", "shift", "]", ",", "[", "0", ",", "0", ",", "1", "]", "]", "\n", ")", "\n", "world_coords_h", "=", "np", ".", "concatenate", "(", "\n", "[", "world_coords", ",", "np", ".", "ones", "(", "(", "len", "(", "world_coords", ")", ",", "1", ",", "1", ")", ")", "]", ",", "axis", "=", "1", "\n", ")", "\n", "world_coords", "=", "np", ".", "matmul", "(", "topdown2index", ",", "world_coords_h", ")", "[", ":", ",", ":", "2", ",", "0", "]", "\n", "return", "(", "\n", "world_coords", "[", ":", ",", ":", ":", "-", "1", "]", ".", "astype", "(", "np", ".", "int32", ")", "+", "1", "\n", ")", "# for having revesrve (z,x) ordering", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.ObservationTransformer.transform_observation_space": [[51, 55], ["None"], "methods", ["None"], ["def", "transform_observation_space", "(", "\n", "self", ",", "observation_space", ":", "spaces", ".", "Dict", ",", "**", "kwargs", "\n", ")", ":", "\n", "        ", "return", "observation_space", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.ObservationTransformer.from_config": [[56, 60], ["None"], "methods", ["None"], ["", "@", "classmethod", "\n", "@", "abc", ".", "abstractmethod", "\n", "def", "from_config", "(", "cls", ",", "config", ":", "Config", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.ObservationTransformer.forward": [[61, 65], ["None"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "observations", ":", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", "\n", ")", "->", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "return", "observations", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.ResizeShortestEdge.__init__": [[73, 89], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "size", ":", "int", ",", "\n", "channels_last", ":", "bool", "=", "True", ",", "\n", "trans_keys", ":", "Tuple", "[", "str", ",", "...", "]", "=", "(", "\"rgb\"", ",", "\"depth\"", ",", "\"semantic\"", ")", ",", "\n", "semantic_key", ":", "str", "=", "\"semantic\"", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Args:\n        size: The size you want to resize the shortest edge to\n        channels_last: indicates if channels is the last dimension\n        \"\"\"", "\n", "super", "(", "ResizeShortestEdge", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_size", ":", "int", "=", "size", "\n", "self", ".", "channels_last", ":", "bool", "=", "channels_last", "\n", "self", ".", "trans_keys", ":", "Tuple", "[", "str", ",", "...", "]", "=", "trans_keys", "\n", "self", ".", "semantic_key", "=", "semantic_key", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.ResizeShortestEdge.transform_observation_space": [[90, 117], ["copy.deepcopy", "habitat_baselines.utils.common.get_image_height_width", "int", "int", "habitat.core.logging.logger.info", "habitat_baselines.utils.common.overwrite_gym_box_shape", "min", "min"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.get_image_height_width", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.overwrite_gym_box_shape"], ["", "def", "transform_observation_space", "(", "\n", "self", ",", "\n", "observation_space", ":", "spaces", ".", "Dict", ",", "\n", ")", ":", "\n", "        ", "size", "=", "self", ".", "_size", "\n", "observation_space", "=", "copy", ".", "deepcopy", "(", "observation_space", ")", "\n", "if", "size", ":", "\n", "            ", "for", "key", "in", "observation_space", ".", "spaces", ":", "\n", "                ", "if", "key", "in", "self", ".", "trans_keys", ":", "\n", "# In the observation space dict, the channels are always last", "\n", "                    ", "h", ",", "w", "=", "get_image_height_width", "(", "\n", "observation_space", ".", "spaces", "[", "key", "]", ",", "channels_last", "=", "True", "\n", ")", "\n", "if", "size", "==", "min", "(", "h", ",", "w", ")", ":", "\n", "                        ", "continue", "\n", "", "scale", "=", "size", "/", "min", "(", "h", ",", "w", ")", "\n", "new_h", "=", "int", "(", "h", "*", "scale", ")", "\n", "new_w", "=", "int", "(", "w", "*", "scale", ")", "\n", "new_size", "=", "(", "new_h", ",", "new_w", ")", "\n", "logger", ".", "info", "(", "\n", "\"Resizing observation of %s: from %s to %s\"", "\n", "%", "(", "key", ",", "(", "h", ",", "w", ")", ",", "new_size", ")", "\n", ")", "\n", "observation_space", ".", "spaces", "[", "key", "]", "=", "overwrite_gym_box_shape", "(", "\n", "observation_space", ".", "spaces", "[", "key", "]", ",", "new_size", "\n", ")", "\n", "", "", "", "return", "observation_space", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.ResizeShortestEdge._transform_obs": [[118, 126], ["habitat_baselines.utils.common.image_resize_shortest_edge"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.image_resize_shortest_edge"], ["", "def", "_transform_obs", "(", "\n", "self", ",", "obs", ":", "torch", ".", "Tensor", ",", "interpolation_mode", ":", "str", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "image_resize_shortest_edge", "(", "\n", "obs", ",", "\n", "self", ".", "_size", ",", "\n", "channels_last", "=", "self", ".", "channels_last", ",", "\n", "interpolation_mode", "=", "interpolation_mode", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.ResizeShortestEdge.forward": [[128, 142], ["torch.no_grad", "obs_transformers.ResizeShortestEdge._transform_obs"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CenterCropper._transform_obs"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "forward", "(", "\n", "self", ",", "observations", ":", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", "\n", ")", "->", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "if", "self", ".", "_size", "is", "not", "None", ":", "\n", "            ", "for", "sensor", "in", "self", ".", "trans_keys", ":", "\n", "                ", "if", "sensor", "in", "observations", ":", "\n", "                    ", "interpolation_mode", "=", "\"area\"", "\n", "if", "self", ".", "semantic_key", "in", "sensor", ":", "\n", "                        ", "interpolation_mode", "=", "\"nearest\"", "\n", "", "observations", "[", "sensor", "]", "=", "self", ".", "_transform_obs", "(", "\n", "observations", "[", "sensor", "]", ",", "interpolation_mode", "\n", ")", "\n", "", "", "", "return", "observations", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.ResizeShortestEdge.from_config": [[143, 146], ["cls"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_config", "(", "cls", ",", "config", ":", "Config", ")", ":", "\n", "        ", "return", "cls", "(", "config", ".", "RL", ".", "POLICY", ".", "OBS_TRANSFORMS", ".", "RESIZE_SHORTEST_EDGE", ".", "SIZE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CenterCropper.__init__": [[152, 171], ["torch.nn.Module.__init__", "isinstance", "len", "int", "int"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "size", ":", "Union", "[", "numbers", ".", "Integral", ",", "Tuple", "[", "int", ",", "int", "]", "]", ",", "\n", "channels_last", ":", "bool", "=", "True", ",", "\n", "trans_keys", ":", "Tuple", "[", "str", ",", "...", "]", "=", "(", "\"rgb\"", ",", "\"depth\"", ",", "\"semantic\"", ")", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Args:\n        size: A sequence (h, w) or int of the size you wish to resize/center_crop.\n                If int, assumes square crop\n        channels_list: indicates if channels is the last dimension\n        trans_keys: The list of sensors it will try to centercrop.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "isinstance", "(", "size", ",", "numbers", ".", "Integral", ")", ":", "\n", "            ", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "assert", "len", "(", "size", ")", "==", "2", ",", "\"forced input size must be len of 2 (h, w)\"", "\n", "self", ".", "_size", "=", "size", "\n", "self", ".", "channels_last", "=", "channels_last", "\n", "self", ".", "trans_keys", "=", "trans_keys", "# TODO: Add to from_config constructor", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CenterCropper.transform_observation_space": [[172, 196], ["copy.deepcopy", "habitat_baselines.utils.common.get_image_height_width", "habitat.core.logging.logger.info", "habitat_baselines.utils.common.overwrite_gym_box_shape"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.get_image_height_width", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.overwrite_gym_box_shape"], ["", "def", "transform_observation_space", "(", "\n", "self", ",", "\n", "observation_space", ":", "spaces", ".", "Dict", ",", "\n", ")", ":", "\n", "        ", "size", "=", "self", ".", "_size", "\n", "observation_space", "=", "copy", ".", "deepcopy", "(", "observation_space", ")", "\n", "if", "size", ":", "\n", "            ", "for", "key", "in", "observation_space", ".", "spaces", ":", "\n", "                ", "if", "(", "\n", "key", "in", "self", ".", "trans_keys", "\n", "and", "observation_space", ".", "spaces", "[", "key", "]", ".", "shape", "[", "-", "3", ":", "-", "1", "]", "!=", "size", "\n", ")", ":", "\n", "                    ", "h", ",", "w", "=", "get_image_height_width", "(", "\n", "observation_space", ".", "spaces", "[", "key", "]", ",", "channels_last", "=", "True", "\n", ")", "\n", "logger", ".", "info", "(", "\n", "\"Center cropping observation size of %s from %s to %s\"", "\n", "%", "(", "key", ",", "(", "h", ",", "w", ")", ",", "size", ")", "\n", ")", "\n", "\n", "observation_space", ".", "spaces", "[", "key", "]", "=", "overwrite_gym_box_shape", "(", "\n", "observation_space", ".", "spaces", "[", "key", "]", ",", "size", "\n", ")", "\n", "", "", "", "return", "observation_space", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CenterCropper._transform_obs": [[197, 202], ["habitat_baselines.utils.common.center_crop"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.utils.center_crop"], ["", "def", "_transform_obs", "(", "self", ",", "obs", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "center_crop", "(", "\n", "obs", ",", "\n", "self", ".", "_size", ",", "\n", "channels_last", "=", "self", ".", "channels_last", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CenterCropper.forward": [[204, 217], ["torch.no_grad", "observations.update", "obs_transformers.CenterCropper._transform_obs"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.il.metrics.Metric.update", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CenterCropper._transform_obs"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "forward", "(", "\n", "self", ",", "observations", ":", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", "\n", ")", "->", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "if", "self", ".", "_size", "is", "not", "None", ":", "\n", "            ", "observations", ".", "update", "(", "\n", "{", "\n", "sensor", ":", "self", ".", "_transform_obs", "(", "observations", "[", "sensor", "]", ")", "\n", "for", "sensor", "in", "self", ".", "trans_keys", "\n", "if", "sensor", "in", "observations", "\n", "}", "\n", ")", "\n", "", "return", "observations", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CenterCropper.from_config": [[218, 225], ["cls"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_config", "(", "cls", ",", "config", ":", "Config", ")", ":", "\n", "        ", "cc_config", "=", "config", ".", "RL", ".", "POLICY", ".", "OBS_TRANSFORMS", ".", "CENTER_CROPPER", "\n", "return", "cls", "(", "\n", "(", "\n", "cc_config", ".", "HEIGHT", ",", "\n", "cc_config", ".", "WIDTH", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.__init__": [[242, 264], ["R.float"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "img_h", ":", "int", ",", "\n", "img_w", ":", "int", ",", "\n", "R", ":", "Optional", "[", "torch", ".", "Tensor", "]", "=", "None", ",", "\n", "depth_from", ":", "_DepthFrom", "=", "_DepthFrom", ".", "OPTI_CENTER", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Args:\n        img_h: (int) the height of camera image\n        img_w: (int) the width of camera image\n        R: (torch.Tensor) 3x3 rotation matrix of camera\n        depth_from: (_DepthFrom) the depth from z value or optical center\n        \"\"\"", "\n", "self", ".", "img_h", "=", "img_h", "\n", "self", ".", "img_w", "=", "img_w", "\n", "self", ".", "depth_from", "=", "depth_from", "\n", "\n", "# Camera rotation: points in world coord = R @ points in camera coord", "\n", "if", "R", "is", "not", "None", ":", "\n", "            ", "self", ".", "R", "=", "R", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "R", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.projection": [[265, 276], ["None"], "methods", ["None"], ["", "", "@", "abc", ".", "abstractmethod", "\n", "def", "projection", "(", "\n", "self", ",", "world_pts", ":", "torch", ".", "Tensor", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"Project points in world coord onto image planes.\n        Args:\n            world_pts: 3D points in world coord\n        Returns:\n            proj_pts: Projected points for grid_sample, -1 <= proj_pts <= 1\n            valid_mask: True if the point is valid (inside FoV)\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.unprojection": [[277, 289], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "unprojection", "(", "\n", "self", ",", "with_rotation", ":", "bool", "=", "True", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"Unproject 2D image points onto unit sphere.\n        Args:\n            with_rotation: If True, unprojected points is in world coord.\n                           If False, unprojected points is in camera coord.\n        Returns:\n            unproj_pts: Unprojected 3D points on unit sphere\n            valid_mask: True if the point is valid (inside FoV)\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.rotation": [[290, 297], ["torch.eye"], "methods", ["None"], ["", "@", "property", "\n", "def", "rotation", "(", "self", ")", ":", "\n", "        ", "\"\"\"Camera rotation: points in world coord = R @ points in camera coord\"\"\"", "\n", "if", "self", ".", "R", "is", "None", ":", "\n", "            ", "return", "torch", ".", "eye", "(", "3", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "R", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.shape": [[298, 302], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "shape", "(", "self", ")", ":", "\n", "        ", "\"\"\"Camera image shape: (img_h, img_w)\"\"\"", "\n", "return", "(", "self", ".", "img_h", ",", "self", ".", "img_w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size": [[303, 306], ["None"], "methods", ["None"], ["", "def", "size", "(", "self", ")", ":", "\n", "        ", "\"\"\"Camera image shape: (img_h, img_w)\"\"\"", "\n", "return", "self", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.camcoord2worldcoord": [[307, 322], ["torch.matmul", "torch.matmul.view", "pts.view"], "methods", ["None"], ["", "def", "camcoord2worldcoord", "(", "self", ",", "pts", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "\"\"\"Convert points in camera coords into points in world coords.\n        Args:\n            pts: 3D points in camera coords\n        Returns:\n            rotated_pts: 3D points in world coords\n        \"\"\"", "\n", "if", "self", ".", "R", "is", "None", ":", "\n", "            ", "return", "pts", "\n", "", "else", ":", "\n", "# Rotate points according to camera rotation", "\n", "            ", "_h", ",", "_w", ",", "_", "=", "pts", ".", "shape", "\n", "# points in world coord = R @ points in camera coord", "\n", "rotated_pts", "=", "torch", ".", "matmul", "(", "pts", ".", "view", "(", "(", "-", "1", ",", "3", ")", ")", ",", "self", ".", "R", ".", "T", ")", "# type: ignore", "\n", "return", "rotated_pts", ".", "view", "(", "_h", ",", "_w", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.worldcoord2camcoord": [[323, 338], ["torch.matmul", "torch.matmul.view", "pts.view"], "methods", ["None"], ["", "", "def", "worldcoord2camcoord", "(", "self", ",", "pts", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "\"\"\"Convert points in world coords into points in camera coords.\n        Args:\n            pts: 3D points in world coords\n        Returns:\n            rotated_pts: 3D points in camera coords\n        \"\"\"", "\n", "if", "self", ".", "R", "is", "None", ":", "\n", "            ", "return", "pts", "\n", "", "else", ":", "\n", "# Rotate points according to camera rotation", "\n", "            ", "_h", ",", "_w", ",", "_", "=", "pts", ".", "shape", "\n", "# points in camera coord = R.T @ points in world coord", "\n", "rotated_pts", "=", "torch", ".", "matmul", "(", "pts", ".", "view", "(", "(", "-", "1", ",", "3", ")", ")", ",", "self", ".", "R", ")", "\n", "return", "rotated_pts", ".", "view", "(", "_h", ",", "_w", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.PerspectiveProjection.__init__": [[343, 363], ["obs_transformers.CameraProjection.__init__", "max"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "img_h", ":", "int", ",", "\n", "img_w", ":", "int", ",", "\n", "f", ":", "Optional", "[", "float", "]", "=", "None", ",", "\n", "R", ":", "Optional", "[", "torch", ".", "Tensor", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Args:\n        img_h: (int) the height of camera image\n        img_w: (int) the width of camera image\n        f: (float) the focal length of camera\n        R: (torch.Tensor) 3x3 rotation matrix of camera\n        \"\"\"", "\n", "super", "(", "PerspectiveProjection", ",", "self", ")", ".", "__init__", "(", "\n", "img_h", ",", "img_w", ",", "R", ",", "_DepthFrom", ".", "Z_VAL", "\n", ")", "\n", "if", "f", "is", "None", ":", "\n", "            ", "self", ".", "f", "=", "max", "(", "img_h", ",", "img_w", ")", "/", "2", "\n", "", "else", ":", "\n", "            ", "self", ".", "f", "=", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.PerspectiveProjection.projection": [[364, 386], ["obs_transformers.PerspectiveProjection.worldcoord2camcoord", "torch.stack", "torch.abs", "torch.abs().max", "torch.abs"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.worldcoord2camcoord"], ["", "", "def", "projection", "(", "\n", "self", ",", "world_pts", ":", "torch", ".", "Tensor", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "# Rotate world points according to camera rotation", "\n", "        ", "world_pts", "=", "self", ".", "worldcoord2camcoord", "(", "world_pts", ")", "\n", "\n", "# Project points onto image plane", "\n", "img_pts", "=", "self", ".", "f", "*", "world_pts", "/", "torch", ".", "abs", "(", "world_pts", "[", "...", ",", "2", ":", "3", "]", ")", "\n", "cx", "=", "self", ".", "img_w", "/", "2", "\n", "cy", "=", "self", ".", "img_h", "/", "2", "\n", "u", "=", "img_pts", "[", "...", ",", "0", "]", "+", "cx", "\n", "v", "=", "img_pts", "[", "...", ",", "1", "]", "+", "cy", "\n", "\n", "# For grid_sample, -1 <= proj_pts <= 1", "\n", "mapx", "=", "2", "*", "u", "/", "self", ".", "img_w", "-", "1.0", "\n", "mapy", "=", "2", "*", "v", "/", "self", ".", "img_h", "-", "1.0", "\n", "proj_pts", "=", "torch", ".", "stack", "(", "[", "mapx", ",", "mapy", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# Valid mask", "\n", "valid_mask", "=", "torch", ".", "abs", "(", "proj_pts", ")", ".", "max", "(", "-", "1", ")", "[", "0", "]", "<=", "1", "# -1 <= grid.xy <= 1", "\n", "valid_mask", "*=", "img_pts", "[", "...", ",", "2", "]", ">", "0", "\n", "return", "proj_pts", ",", "valid_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.PerspectiveProjection.unprojection": [[387, 407], ["torch.meshgrid", "torch.full_like", "torch.stack", "torch.norm", "torch.full", "torch.arange", "torch.arange", "obs_transformers.PerspectiveProjection.camcoord2worldcoord"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.camcoord2worldcoord"], ["", "def", "unprojection", "(", "\n", "self", ",", "with_rotation", ":", "bool", "=", "True", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "v", ",", "u", "=", "torch", ".", "meshgrid", "(", "\n", "torch", ".", "arange", "(", "self", ".", "img_h", ")", ",", "torch", ".", "arange", "(", "self", ".", "img_w", ")", "\n", ")", "\n", "x", "=", "(", "u", "+", "0.5", ")", "-", "self", ".", "img_w", "/", "2", "\n", "y", "=", "(", "v", "+", "0.5", ")", "-", "self", ".", "img_h", "/", "2", "\n", "z", "=", "torch", ".", "full_like", "(", "x", ",", "self", ".", "f", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "unproj_pts", "=", "torch", ".", "stack", "(", "[", "x", ",", "y", ",", "z", "]", ",", "dim", "=", "-", "1", ")", "\n", "# Project on unit shpere", "\n", "unproj_pts", "/=", "torch", ".", "norm", "(", "unproj_pts", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "# All points in image are valid", "\n", "valid_mask", "=", "torch", ".", "full", "(", "unproj_pts", ".", "shape", "[", ":", "2", "]", ",", "True", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "\n", "# Rotate unproj_pts points according to camera rotation", "\n", "if", "with_rotation", ":", "\n", "            ", "unproj_pts", "=", "self", ".", "camcoord2worldcoord", "(", "unproj_pts", ")", "\n", "\n", "", "return", "unproj_pts", ",", "valid_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.EquirectProjection.__init__": [[412, 421], ["obs_transformers.CameraProjection.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "\n", "self", ",", "img_h", ":", "int", ",", "img_w", ":", "int", ",", "R", ":", "Optional", "[", "torch", ".", "Tensor", "]", "=", "None", "\n", ")", ":", "\n", "        ", "\"\"\"Args:\n        img_h: (int) the height of equirectanglar camera image\n        img_w: (int) the width of equirectanglar camera image\n        R: (torch.Tensor) 3x3 rotation matrix of camera\n        \"\"\"", "\n", "super", "(", "EquirectProjection", ",", "self", ")", ".", "__init__", "(", "img_h", ",", "img_w", ",", "R", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.EquirectProjection.projection": [[422, 442], ["obs_transformers.EquirectProjection.worldcoord2camcoord", "torch.atan2", "torch.sqrt", "torch.atan2", "torch.stack", "torch.full"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.worldcoord2camcoord"], ["", "def", "projection", "(", "\n", "self", ",", "world_pts", ":", "torch", ".", "Tensor", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "# Rotate world points according to camera rotation", "\n", "        ", "world_pts", "=", "self", ".", "worldcoord2camcoord", "(", "world_pts", ")", "\n", "\n", "x", ",", "y", ",", "z", "=", "world_pts", "[", "...", ",", "0", "]", ",", "world_pts", "[", "...", ",", "1", "]", ",", "world_pts", "[", "...", ",", "2", "]", "\n", "# x,y,z to theta, phi", "\n", "theta", "=", "torch", ".", "atan2", "(", "x", ",", "z", ")", "\n", "c", "=", "torch", ".", "sqrt", "(", "x", "*", "x", "+", "z", "*", "z", ")", "\n", "phi", "=", "torch", ".", "atan2", "(", "y", ",", "c", ")", "\n", "\n", "# For grid_sample, -1 <= proj_pts <= 1", "\n", "mapx", "=", "theta", "/", "np", ".", "pi", "\n", "mapy", "=", "phi", "/", "(", "np", ".", "pi", "/", "2", ")", "\n", "proj_pts", "=", "torch", ".", "stack", "(", "[", "mapx", ",", "mapy", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# All points in image are valid", "\n", "valid_mask", "=", "torch", ".", "full", "(", "proj_pts", ".", "shape", "[", ":", "2", "]", ",", "True", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "return", "proj_pts", ",", "valid_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.EquirectProjection.unprojection": [[443, 454], ["obs_transformers.EquirectProjection.get_theta_phi_map", "obs_transformers.EquirectProjection.angle2sphere", "torch.full", "obs_transformers.EquirectProjection.camcoord2worldcoord"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.EquirectProjection.get_theta_phi_map", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.EquirectProjection.angle2sphere", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.camcoord2worldcoord"], ["", "def", "unprojection", "(", "\n", "self", ",", "with_rotation", ":", "bool", "=", "True", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "theta_map", ",", "phi_map", "=", "self", ".", "get_theta_phi_map", "(", "self", ".", "img_h", ",", "self", ".", "img_w", ")", "\n", "unproj_pts", "=", "self", ".", "angle2sphere", "(", "theta_map", ",", "phi_map", ")", "\n", "# All points in image are valid", "\n", "valid_mask", "=", "torch", ".", "full", "(", "unproj_pts", ".", "shape", "[", ":", "2", "]", ",", "True", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "# Rotate unproj_pts points according to camera rotation", "\n", "if", "with_rotation", ":", "\n", "            ", "unproj_pts", "=", "self", ".", "camcoord2worldcoord", "(", "unproj_pts", ")", "\n", "", "return", "unproj_pts", ",", "valid_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.EquirectProjection.get_theta_phi_map": [[455, 465], ["torch.meshgrid", "torch.arange", "torch.arange"], "methods", ["None"], ["", "def", "get_theta_phi_map", "(", "\n", "self", ",", "img_h", ":", "int", ",", "img_w", ":", "int", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"Get theta and phi map for equirectangular image.\n        PI < theta_map < PI,  PI/2 < phi_map < PI/2\n        \"\"\"", "\n", "phi", ",", "theta", "=", "torch", ".", "meshgrid", "(", "torch", ".", "arange", "(", "img_h", ")", ",", "torch", ".", "arange", "(", "img_w", ")", ")", "\n", "theta_map", "=", "(", "theta", "+", "0.5", ")", "*", "2", "*", "np", ".", "pi", "/", "img_w", "-", "np", ".", "pi", "\n", "phi_map", "=", "(", "phi", "+", "0.5", ")", "*", "np", ".", "pi", "/", "img_h", "-", "np", ".", "pi", "/", "2", "\n", "return", "theta_map", ",", "phi_map", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.EquirectProjection.angle2sphere": [[466, 476], ["torch.sin", "torch.cos", "torch.sin", "torch.cos", "torch.stack"], "methods", ["None"], ["", "def", "angle2sphere", "(", "\n", "self", ",", "theta_map", ":", "torch", ".", "Tensor", ",", "phi_map", ":", "torch", ".", "Tensor", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"Project points on unit sphere based on theta and phi map.\"\"\"", "\n", "sin_theta", "=", "torch", ".", "sin", "(", "theta_map", ")", "\n", "cos_theta", "=", "torch", ".", "cos", "(", "theta_map", ")", "\n", "sin_phi", "=", "torch", ".", "sin", "(", "phi_map", ")", "\n", "cos_phi", "=", "torch", ".", "cos", "(", "phi_map", ")", "\n", "return", "torch", ".", "stack", "(", "\n", "[", "cos_phi", "*", "sin_theta", ",", "sin_phi", ",", "cos_phi", "*", "cos_theta", "]", ",", "dim", "=", "-", "1", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.FisheyeProjection.__init__": [[486, 513], ["obs_transformers.CameraProjection.__init__", "numpy.cos"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "img_h", ":", "int", ",", "\n", "img_w", ":", "int", ",", "\n", "fish_fov", ":", "float", ",", "\n", "cx", ":", "float", ",", "\n", "cy", ":", "float", ",", "\n", "fx", ":", "float", ",", "\n", "fy", ":", "float", ",", "\n", "xi", ":", "float", ",", "\n", "alpha", ":", "float", ",", "\n", "R", ":", "Optional", "[", "torch", ".", "Tensor", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Args:\n        img_h: (int) the height of fisheye camera image\n        img_w: (int) the width of fisheye camera image\n        fish_fov: (float) the fov of fisheye camera in degrees\n        cx, cy: (float) the optical center of the fisheye camera\n        fx, fy, xi, alpha: (float) the fisheye camera model parameters\n        R: (torch.Tensor) 3x3 rotation matrix of camera\n        \"\"\"", "\n", "super", "(", "FisheyeProjection", ",", "self", ")", ".", "__init__", "(", "img_h", ",", "img_w", ",", "R", ")", "\n", "\n", "self", ".", "fish_fov", "=", "fish_fov", "# FoV in degrees", "\n", "fov_rad", "=", "self", ".", "fish_fov", "/", "180", "*", "np", ".", "pi", "# FoV in radians", "\n", "self", ".", "fov_cos", "=", "np", ".", "cos", "(", "fov_rad", "/", "2", ")", "\n", "self", ".", "fish_param", "=", "[", "cx", ",", "cy", ",", "fx", ",", "fy", ",", "xi", ",", "alpha", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.FisheyeProjection.projection": [[514, 557], ["obs_transformers.FisheyeProjection.worldcoord2camcoord", "torch.sqrt", "torch.sqrt", "torch.stack", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.worldcoord2camcoord"], ["", "def", "projection", "(", "\n", "self", ",", "world_pts", ":", "torch", ".", "Tensor", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "# Rotate world points according to camera rotation", "\n", "        ", "world_pts", "=", "self", ".", "worldcoord2camcoord", "(", "world_pts", ")", "\n", "\n", "# Unpack parameters", "\n", "cx", ",", "cy", ",", "fx", ",", "fy", ",", "xi", ",", "alpha", "=", "self", ".", "fish_param", "\n", "# Unpack 3D world points", "\n", "x", ",", "y", ",", "z", "=", "world_pts", "[", "...", ",", "0", "]", ",", "world_pts", "[", "...", ",", "1", "]", ",", "world_pts", "[", "...", ",", "2", "]", "\n", "\n", "# Calculate fov", "\n", "world_pts_fov_cos", "=", "z", "# point3D @ z_axis", "\n", "fov_mask", "=", "world_pts_fov_cos", ">=", "self", ".", "fov_cos", "\n", "\n", "# Calculate projection", "\n", "x2", "=", "x", "*", "x", "\n", "y2", "=", "y", "*", "y", "\n", "z2", "=", "z", "*", "z", "\n", "d1", "=", "torch", ".", "sqrt", "(", "x2", "+", "y2", "+", "z2", ")", "\n", "zxi", "=", "xi", "*", "d1", "+", "z", "\n", "d2", "=", "torch", ".", "sqrt", "(", "x2", "+", "y2", "+", "zxi", "*", "zxi", ")", "\n", "\n", "div", "=", "alpha", "*", "d2", "+", "(", "1", "-", "alpha", ")", "*", "zxi", "\n", "u", "=", "fx", "*", "x", "/", "div", "+", "cx", "\n", "v", "=", "fy", "*", "y", "/", "div", "+", "cy", "\n", "\n", "# Projected points on image plane", "\n", "# For grid_sample, -1 <= proj_pts <= 1", "\n", "mapx", "=", "2", "*", "u", "/", "self", ".", "img_w", "-", "1.0", "\n", "mapy", "=", "2", "*", "v", "/", "self", ".", "img_h", "-", "1.0", "\n", "proj_pts", "=", "torch", ".", "stack", "(", "[", "mapx", ",", "mapy", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# Check valid area", "\n", "if", "alpha", "<=", "0.5", ":", "\n", "            ", "w1", "=", "alpha", "/", "(", "1", "-", "alpha", ")", "\n", "", "else", ":", "\n", "            ", "w1", "=", "(", "1", "-", "alpha", ")", "/", "alpha", "\n", "", "w2", "=", "w1", "+", "xi", "/", "np", ".", "sqrt", "(", "2", "*", "w1", "*", "xi", "+", "xi", "*", "xi", "+", "1", ")", "\n", "valid_mask", "=", "z", ">", "-", "w2", "*", "d1", "\n", "valid_mask", "*=", "fov_mask", "\n", "\n", "return", "proj_pts", ",", "valid_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.FisheyeProjection.unprojection": [[558, 595], ["torch.meshgrid", "torch.sqrt", "k.unsqueeze", "torch.stack", "obs_transformers.FisheyeProjection.camcoord2worldcoord", "torch.arange", "torch.arange", "torch.sqrt"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.camcoord2worldcoord"], ["", "def", "unprojection", "(", "\n", "self", ",", "with_rotation", ":", "bool", "=", "True", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "# Unpack parameters", "\n", "        ", "cx", ",", "cy", ",", "fx", ",", "fy", ",", "xi", ",", "alpha", "=", "self", ".", "fish_param", "\n", "\n", "# Calculate unprojection", "\n", "v", ",", "u", "=", "torch", ".", "meshgrid", "(", "\n", "[", "torch", ".", "arange", "(", "self", ".", "img_h", ")", ",", "torch", ".", "arange", "(", "self", ".", "img_w", ")", "]", "\n", ")", "\n", "mx", "=", "(", "u", "-", "cx", ")", "/", "fx", "\n", "my", "=", "(", "v", "-", "cy", ")", "/", "fy", "\n", "r2", "=", "mx", "*", "mx", "+", "my", "*", "my", "\n", "mz", "=", "(", "1", "-", "alpha", "*", "alpha", "*", "r2", ")", "/", "(", "\n", "alpha", "*", "torch", ".", "sqrt", "(", "1", "-", "(", "2", "*", "alpha", "-", "1", ")", "*", "r2", ")", "+", "1", "-", "alpha", "\n", ")", "\n", "mz2", "=", "mz", "*", "mz", "\n", "\n", "k1", "=", "mz", "*", "xi", "+", "torch", ".", "sqrt", "(", "mz2", "+", "(", "1", "-", "xi", "*", "xi", ")", "*", "r2", ")", "\n", "k2", "=", "mz2", "+", "r2", "\n", "k", "=", "k1", "/", "k2", "\n", "\n", "# Unprojected unit vectors", "\n", "unproj_pts", "=", "k", ".", "unsqueeze", "(", "-", "1", ")", "*", "torch", ".", "stack", "(", "[", "mx", ",", "my", ",", "mz", "]", ",", "dim", "=", "-", "1", ")", "\n", "unproj_pts", "[", "...", ",", "2", "]", "-=", "xi", "\n", "\n", "# Calculate fov", "\n", "unproj_fov_cos", "=", "unproj_pts", "[", "...", ",", "2", "]", "# unproj_pts @ z_axis", "\n", "fov_mask", "=", "unproj_fov_cos", ">=", "self", ".", "fov_cos", "\n", "if", "alpha", ">", "0.5", ":", "\n", "            ", "fov_mask", "*=", "r2", "<=", "(", "1", "/", "(", "2", "*", "alpha", "-", "1", ")", ")", "\n", "\n", "# Rotate unproj_pts points according to camera rotation", "\n", "", "if", "with_rotation", ":", "\n", "            ", "unproj_pts", "=", "self", ".", "camcoord2worldcoord", "(", "unproj_pts", ")", "\n", "\n", "", "return", "unproj_pts", ",", "fov_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.ProjectionConverter.__init__": [[602, 648], ["torch.nn.Module.__init__", "len", "len", "obs_transformers.ProjectionConverter.input_models[].size", "obs_transformers.ProjectionConverter.output_models[].size", "obs_transformers.ProjectionConverter.calculate_zfactor", "obs_transformers.ProjectionConverter.calculate_zfactor", "obs_transformers.ProjectionConverter.generate_grid", "isinstance", "isinstance", "it.size", "it.size"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.ProjectionConverter.calculate_zfactor", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.ProjectionConverter.calculate_zfactor", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.ProjectionConverter.generate_grid", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size"], ["def", "__init__", "(", "\n", "self", ",", "\n", "input_projections", ":", "Union", "[", "List", "[", "CameraProjection", "]", ",", "CameraProjection", "]", ",", "\n", "output_projections", ":", "Union", "[", "List", "[", "CameraProjection", "]", ",", "CameraProjection", "]", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Args:\n        input_projections: input images of projection models\n        output_projections: generated image of projection models\n        \"\"\"", "\n", "super", "(", "ProjectionConverter", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Convert to list", "\n", "if", "not", "isinstance", "(", "input_projections", ",", "list", ")", ":", "\n", "            ", "input_projections", "=", "[", "input_projections", "]", "\n", "", "if", "not", "isinstance", "(", "output_projections", ",", "list", ")", ":", "\n", "            ", "output_projections", "=", "[", "output_projections", "]", "\n", "\n", "", "self", ".", "input_models", "=", "input_projections", "\n", "self", ".", "output_models", "=", "output_projections", "\n", "self", ".", "input_len", "=", "len", "(", "self", ".", "input_models", ")", "\n", "self", ".", "output_len", "=", "len", "(", "self", ".", "output_models", ")", "\n", "\n", "# Check image size", "\n", "input_size", "=", "self", ".", "input_models", "[", "0", "]", ".", "size", "(", ")", "\n", "for", "it", "in", "self", ".", "input_models", ":", "\n", "            ", "assert", "(", "\n", "input_size", "==", "it", ".", "size", "(", ")", "\n", ")", ",", "\"All input models must have the same image size\"", "\n", "\n", "", "output_size", "=", "self", ".", "output_models", "[", "0", "]", ".", "size", "(", ")", "\n", "for", "it", "in", "self", ".", "output_models", ":", "\n", "            ", "assert", "(", "\n", "output_size", "==", "it", ".", "size", "(", ")", "\n", ")", ",", "\"All output models must have the same image size\"", "\n", "\n", "# Check if depth conversion is required", "\n", "# If depth is in z value in input, conversion is required", "\n", "", "self", ".", "input_zfactor", "=", "self", ".", "calculate_zfactor", "(", "self", ".", "input_models", ")", "\n", "# If depth is in z value in output, inverse conversion is required", "\n", "self", ".", "output_zfactor", "=", "self", ".", "calculate_zfactor", "(", "\n", "self", ".", "output_models", ",", "inverse", "=", "True", "\n", ")", "\n", "\n", "# grids shape: (output_len, input_len, output_img_h, output_img_w, 2)", "\n", "self", ".", "grids", "=", "self", ".", "generate_grid", "(", ")", "\n", "# _grids_cache shape: (batch_size*output_len*input_len, output_img_h, output_img_w, 2)", "\n", "self", ".", "_grids_cache", ":", "Optional", "[", "torch", ".", "Tensor", "]", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.ProjectionConverter._generate_grid_one_output": [[649, 667], ["output_model.unprojection", "torch.stack", "input_model.projection", "torch.stack.append"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.FisheyeProjection.unprojection", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.FisheyeProjection.projection"], ["", "def", "_generate_grid_one_output", "(", "\n", "self", ",", "output_model", ":", "CameraProjection", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "# Obtain points on unit sphere", "\n", "        ", "world_pts", ",", "not_assigned_mask", "=", "output_model", ".", "unprojection", "(", ")", "\n", "# Generate grid", "\n", "grids", "=", "[", "]", "\n", "for", "input_model", "in", "self", ".", "input_models", ":", "\n", "            ", "grid", ",", "input_mask", "=", "input_model", ".", "projection", "(", "world_pts", ")", "\n", "# Make sure each point is only assigned to single input", "\n", "input_mask", "*=", "not_assigned_mask", "\n", "# Values bigger than one will be ignored by grid_sample", "\n", "grid", "[", "~", "input_mask", "]", "=", "2", "\n", "# Update not_assigned_mask", "\n", "not_assigned_mask", "*=", "~", "input_mask", "\n", "grids", ".", "append", "(", "grid", ")", "\n", "", "grids", "=", "torch", ".", "stack", "(", "grids", ",", "dim", "=", "0", ")", "\n", "return", "grids", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.ProjectionConverter.generate_grid": [[668, 675], ["torch.cat", "obs_transformers.ProjectionConverter._generate_grid_one_output", "torch.cat.append", "obs_transformers.ProjectionConverter.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.ProjectionConverter._generate_grid_one_output"], ["", "def", "generate_grid", "(", "self", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "multi_output_grids", "=", "[", "]", "\n", "for", "output_model", "in", "self", ".", "output_models", ":", "\n", "            ", "grids", "=", "self", ".", "_generate_grid_one_output", "(", "output_model", ")", "\n", "multi_output_grids", ".", "append", "(", "grids", ".", "unsqueeze", "(", "1", ")", ")", "\n", "", "multi_output_grids", "=", "torch", ".", "cat", "(", "multi_output_grids", ",", "dim", "=", "1", ")", "\n", "return", "multi_output_grids", "# input_len, output_len, output_img_h, output_img_w, 2", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.ProjectionConverter._convert": [[676, 697], ["obs_transformers.ProjectionConverter.output_models[].size", "torch.nn.functional.grid_sample", "output.view().sum.view().sum.view().sum", "ValueError", "output.view().sum.view().sum.view"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size"], ["", "def", "_convert", "(", "self", ",", "batch", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"Takes a batch of images stacked in proper order and converts thems,\n        reduces batch size by input_len.\"\"\"", "\n", "batch_size", ",", "ch", ",", "_H", ",", "_W", "=", "batch", ".", "shape", "\n", "out_h", ",", "out_w", "=", "self", ".", "output_models", "[", "0", "]", ".", "size", "(", ")", "\n", "if", "batch_size", "==", "0", "or", "batch_size", "%", "self", ".", "input_len", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Batch size should be {self.input_len}x\"", ")", "\n", "", "output", "=", "torch", ".", "nn", ".", "functional", ".", "grid_sample", "(", "\n", "batch", ",", "\n", "self", ".", "_grids_cache", ",", "\n", "align_corners", "=", "True", ",", "\n", "padding_mode", "=", "\"zeros\"", ",", "\n", ")", "\n", "output", "=", "output", ".", "view", "(", "\n", "batch_size", "//", "self", ".", "input_len", ",", "\n", "self", ".", "input_len", ",", "\n", "ch", ",", "\n", "out_h", ",", "\n", "out_w", ",", "\n", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "return", "output", "# output_len * batch_size, ch, output_model.img_h, output_model.img_w", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.ProjectionConverter.to_converted_tensor": [[698, 739], ["batch.size", "obs_transformers.ProjectionConverter.output_models[].size", "obs_transformers.ProjectionConverter.grids.to", "batch.view().repeat().view", "obs_transformers.ProjectionConverter._grids_cache.to", "obs_transformers.ProjectionConverter._convert", "ValueError", "obs_transformers.ProjectionConverter.grids.repeat().view", "batch.view().repeat", "obs_transformers.ProjectionConverter._grids_cache.size", "batch.view().repeat().view.size", "obs_transformers.ProjectionConverter.grids.repeat", "batch.view"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.ProjectionConverter._convert", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size"], ["", "def", "to_converted_tensor", "(", "self", ",", "batch", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"Convert tensors based on projection models. If there are two\n        batches from two envs (R_1st, G_1st, B_1st) and (R_2nd, G_2nd, B_2nd),\n        the input order is [R_1st, G_1st, B_1st, R_2nd, G_2nd, B_2nd]\n        \"\"\"", "\n", "# batch tensor order should be NCHW", "\n", "batch_size", ",", "ch", ",", "in_h", ",", "in_w", "=", "batch", ".", "size", "(", ")", "\n", "\n", "out_h", ",", "out_w", "=", "self", ".", "output_models", "[", "0", "]", ".", "size", "(", ")", "\n", "\n", "# Check whether batch size is len(self.input_models) x", "\n", "if", "batch_size", "==", "0", "or", "batch_size", "%", "self", ".", "input_len", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Batch size should be {self.input_len}x\"", ")", "\n", "\n", "# How many sets of input.", "\n", "", "num_input_set", "=", "batch_size", "//", "self", ".", "input_len", "\n", "\n", "# to(device) is a NOOP after the first call", "\n", "self", ".", "grids", "=", "self", ".", "grids", ".", "to", "(", "batch", ".", "device", ")", "\n", "\n", "# Adjust batch for multiple outputs", "\n", "# batch must be [1st batch * output_len, 2nd batch * output_len, ...]", "\n", "# not that [1st batch, 2nd batch, ...] * output_len", "\n", "multi_out_batch", "=", "(", "\n", "batch", ".", "view", "(", "num_input_set", ",", "self", ".", "input_len", ",", "ch", ",", "in_h", ",", "in_w", ")", "\n", ".", "repeat", "(", "1", ",", "self", ".", "output_len", ",", "1", ",", "1", ",", "1", ")", "\n", ".", "view", "(", "self", ".", "output_len", "*", "batch_size", ",", "ch", ",", "in_h", ",", "in_w", ")", "\n", ")", "\n", "\n", "# Cache the repeated grids for subsequent batches", "\n", "if", "(", "\n", "self", ".", "_grids_cache", "is", "None", "\n", "or", "self", ".", "_grids_cache", ".", "size", "(", ")", "[", "0", "]", "!=", "multi_out_batch", ".", "size", "(", ")", "[", "0", "]", "\n", ")", ":", "\n", "# batch size is more than one", "\n", "            ", "self", ".", "_grids_cache", "=", "self", ".", "grids", ".", "repeat", "(", "\n", "num_input_set", ",", "1", ",", "1", ",", "1", ",", "1", "\n", ")", ".", "view", "(", "batch_size", "*", "self", ".", "output_len", ",", "out_h", ",", "out_w", ",", "2", ")", "\n", "", "self", ".", "_grids_cache", "=", "self", ".", "_grids_cache", ".", "to", "(", "batch", ".", "device", ")", "\n", "\n", "return", "self", ".", "_convert", "(", "multi_out_batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.ProjectionConverter.calculate_zfactor": [[740, 779], ["torch.stack", "cam.unprojection", "torch.stack.append", "torch.full", "torch.stack.append", "zval_to_optcenter.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.FisheyeProjection.unprojection"], ["", "def", "calculate_zfactor", "(", "\n", "self", ",", "projections", ":", "List", "[", "CameraProjection", "]", ",", "inverse", ":", "bool", "=", "False", "\n", ")", "->", "Optional", "[", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"Calculate z factor based on camera projection models. z_factor is\n        used for converting depth in z value to depth from optical center\n        (for input_models) or conversion of depth from optical center to depth\n        in z value (inverse = True, for output_models). Whether the conversion\n        is required or not is decided based on depth_from property of\n        CameraProjection class.\n        Args:\n            projections: input or output projection models\n            inverse: True to convert depth from optical center to z value\n                     False to convert z value to depth from optical center\n        Returns:\n            z_factors: z factor. Return None if conversion is not required.\n        \"\"\"", "\n", "z_factors", "=", "[", "]", "\n", "for", "cam", "in", "projections", ":", "\n", "            ", "if", "cam", ".", "depth_from", "==", "_DepthFrom", ".", "Z_VAL", ":", "\n", "                ", "pts_on_sphere", ",", "_", "=", "cam", ".", "unprojection", "(", "with_rotation", "=", "False", ")", "\n", "zval_to_optcenter", "=", "1", "/", "pts_on_sphere", "[", "...", ",", "2", "]", "\n", "z_factors", ".", "append", "(", "zval_to_optcenter", ".", "unsqueeze", "(", "0", ")", ")", "\n", "", "else", ":", "\n", "                ", "all_one", "=", "torch", ".", "full", "(", "\n", "(", "1", ",", "cam", ".", "img_h", ",", "cam", ".", "img_w", ")", ",", "1.0", ",", "dtype", "=", "torch", ".", "float", "\n", ")", "\n", "z_factors", ".", "append", "(", "all_one", ")", "\n", "", "", "z_factors", "=", "torch", ".", "stack", "(", "z_factors", ")", "\n", "\n", "if", "(", "z_factors", "==", "1.0", ")", ".", "all", "(", ")", ":", "\n", "# All input cameras have depth from optical center", "\n", "            ", "return", "None", "\n", "", "else", ":", "\n", "            ", "if", "not", "inverse", ":", "\n", "# for input_models", "\n", "                ", "return", "z_factors", "\n", "", "else", ":", "\n", "# for output_models", "\n", "                ", "return", "1", "/", "z_factors", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.ProjectionConverter.forward": [[780, 800], ["obs_transformers.ProjectionConverter.to_converted_tensor", "obs_transformers.ProjectionConverter.input_zfactor.to", "obs_transformers.ProjectionConverter.output_zfactor.to", "obs_transformers.ProjectionConverter.input_zfactor.repeat", "obs_transformers.ProjectionConverter.output_zfactor.repeat", "batch.size", "obs_transformers.ProjectionConverter.size"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.ProjectionConverter.to_converted_tensor", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size"], ["", "", "", "def", "forward", "(", "\n", "self", ",", "batch", ":", "torch", ".", "Tensor", ",", "is_depth", ":", "bool", "=", "False", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "\n", "# Depth conversion for input tensors", "\n", "        ", "if", "is_depth", "and", "self", ".", "input_zfactor", "is", "not", "None", ":", "\n", "            ", "input_b", "=", "batch", ".", "size", "(", ")", "[", "0", "]", "//", "self", ".", "input_len", "\n", "self", ".", "input_zfactor", "=", "self", ".", "input_zfactor", ".", "to", "(", "batch", ".", "device", ")", "\n", "batch", "=", "batch", "*", "self", ".", "input_zfactor", ".", "repeat", "(", "input_b", ",", "1", ",", "1", ",", "1", ")", "\n", "\n", "# Common operator to convert projection models", "\n", "", "out", "=", "self", ".", "to_converted_tensor", "(", "batch", ")", "\n", "\n", "# Depth conversion for output tensors", "\n", "if", "is_depth", "and", "self", ".", "output_zfactor", "is", "not", "None", ":", "\n", "            ", "output_b", "=", "out", ".", "size", "(", ")", "[", "0", "]", "//", "self", ".", "output_len", "\n", "self", ".", "output_zfactor", "=", "self", ".", "output_zfactor", ".", "to", "(", "batch", ".", "device", ")", "\n", "out", "=", "out", "*", "self", ".", "output_zfactor", ".", "repeat", "(", "output_b", ",", "1", ",", "1", ",", "1", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.Cube2Equirect.__init__": [[844, 857], ["obs_transformers.get_cubemap_projections", "obs_transformers.EquirectProjection", "obs_transformers.ProjectionConverter.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.get_cubemap_projections", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "equ_h", ":", "int", ",", "equ_w", ":", "int", ")", ":", "\n", "        ", "\"\"\"Args:\n        equ_h: (int) the height of the generated equirect\n        equ_w: (int) the width of the generated equirect\n        \"\"\"", "\n", "\n", "# Cubemap input", "\n", "input_projections", "=", "get_cubemap_projections", "(", ")", "\n", "\n", "# Equirectangular output", "\n", "output_projection", "=", "EquirectProjection", "(", "equ_h", ",", "equ_w", ")", "\n", "super", "(", "Cube2Equirect", ",", "self", ")", ".", "__init__", "(", "\n", "input_projections", ",", "output_projection", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.ProjectionTransformer.__init__": [[866, 899], ["torch.nn.Module.__init__", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "converter", ":", "ProjectionConverter", ",", "\n", "sensor_uuids", ":", "List", "[", "str", "]", ",", "\n", "image_shape", ":", "Tuple", "[", "int", ",", "int", "]", ",", "\n", "channels_last", ":", "bool", "=", "False", ",", "\n", "target_uuids", ":", "Optional", "[", "List", "[", "str", "]", "]", "=", "None", ",", "\n", "depth_key", ":", "str", "=", "\"depth\"", ",", "\n", ")", ":", "\n", "        ", "r\"\"\":param converter: ProjectionConverter class\n        :param sensor_uuids: List of sensor_uuids\n        :param image_shape: The shape of the output image (height, width)\n        :param channels_last: Are the channels last in the input\n        :param target_uuids: Optional List of which of the sensor_uuids to overwrite\n        :param depth_key: If sensor_uuids has depth_key substring, they are processed as depth\n        \"\"\"", "\n", "super", "(", "ProjectionTransformer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "num_sensors", "=", "len", "(", "sensor_uuids", ")", "\n", "assert", "(", "\n", "num_sensors", "%", "converter", ".", "input_len", "==", "0", "and", "num_sensors", "!=", "0", "\n", ")", ",", "f\"{len(sensor_uuids)}: length of sensors is not a multiple of {converter.input_len}\"", "\n", "# TODO verify attributes of the sensors in the config if possible. Think about API design", "\n", "assert", "(", "\n", "len", "(", "image_shape", ")", "==", "2", "\n", ")", ",", "f\"image_shape must be a tuple of (height, width), given: {image_shape}\"", "\n", "self", ".", "sensor_uuids", ":", "List", "[", "str", "]", "=", "sensor_uuids", "\n", "self", ".", "img_shape", ":", "Tuple", "[", "int", ",", "int", "]", "=", "image_shape", "\n", "self", ".", "channels_last", ":", "bool", "=", "channels_last", "\n", "self", ".", "converter", "=", "converter", "\n", "if", "target_uuids", "is", "None", ":", "\n", "            ", "target_uuids", "=", "self", ".", "sensor_uuids", "[", ":", ":", "6", "]", "\n", "", "self", ".", "target_uuids", ":", "List", "[", "str", "]", "=", "target_uuids", "\n", "self", ".", "depth_key", "=", "depth_key", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.ProjectionTransformer.transform_observation_space": [[900, 923], ["enumerate", "habitat_baselines.utils.common.get_image_height_width", "habitat.core.logging.logger.info", "habitat_baselines.utils.common.overwrite_gym_box_shape"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.get_image_height_width", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.overwrite_gym_box_shape"], ["", "def", "transform_observation_space", "(", "\n", "self", ",", "\n", "observation_space", ":", "spaces", ".", "Dict", ",", "\n", ")", ":", "\n", "        ", "r\"\"\"Transforms the target UUID's sensor obs_space so it matches the new shape (H, W)\"\"\"", "\n", "# Transforms the observation space to of the target UUID", "\n", "for", "i", ",", "key", "in", "enumerate", "(", "self", ".", "target_uuids", ")", ":", "\n", "            ", "assert", "(", "\n", "key", "in", "observation_space", ".", "spaces", "\n", ")", ",", "f\"{key} not found in observation space: {observation_space.spaces}\"", "\n", "h", ",", "w", "=", "get_image_height_width", "(", "\n", "observation_space", ".", "spaces", "[", "key", "]", ",", "channels_last", "=", "True", "\n", ")", "\n", "in_len", "=", "self", ".", "converter", ".", "input_len", "\n", "logger", ".", "info", "(", "\n", "f\"Overwrite sensor: {key} from size of ({h}, {w}) to image of\"", "\n", "f\" {self.img_shape} from sensors: {self.sensor_uuids[i*in_len:(i+1)*in_len]}\"", "\n", ")", "\n", "if", "(", "h", ",", "w", ")", "!=", "self", ".", "img_shape", ":", "\n", "                ", "observation_space", ".", "spaces", "[", "key", "]", "=", "overwrite_gym_box_shape", "(", "\n", "observation_space", ".", "spaces", "[", "key", "]", ",", "self", ".", "img_shape", "\n", ")", "\n", "", "", "return", "observation_space", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.ProjectionTransformer.forward": [[924, 958], ["torch.no_grad", "enumerate", "any", "torch.stack", "torch.flatten", "imgs.permute.permute.float", "obs_transformers.ProjectionTransformer.converter", "output.permute.permute.to", "imgs.permute.permute.permute", "output.permute.permute.permute"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "forward", "(", "\n", "self", ",", "observations", ":", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", "\n", ")", "->", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ":", "\n", "\n", "        ", "for", "i", ",", "target_sensor_uuid", "in", "enumerate", "(", "self", ".", "target_uuids", ")", ":", "\n", "# number of input and input sensor uuids", "\n", "            ", "in_len", "=", "self", ".", "converter", ".", "input_len", "\n", "in_sensor_uuids", "=", "self", ".", "sensor_uuids", "[", "i", "*", "in_len", ":", "(", "i", "+", "1", ")", "*", "in_len", "]", "\n", "\n", "# If the sensor is depth", "\n", "is_depth", "=", "any", "(", "self", ".", "depth_key", "in", "s", "for", "s", "in", "in_sensor_uuids", ")", "\n", "\n", "# The UUID we are overwriting", "\n", "assert", "target_sensor_uuid", "in", "in_sensor_uuids", "\n", "sensor_obs", "=", "[", "observations", "[", "sensor", "]", "for", "sensor", "in", "in_sensor_uuids", "]", "\n", "target_obs", "=", "observations", "[", "target_sensor_uuid", "]", "\n", "sensor_dtype", "=", "target_obs", ".", "dtype", "\n", "# Stacking along axis makes the flattening go in the right order.", "\n", "imgs", "=", "torch", ".", "stack", "(", "sensor_obs", ",", "dim", "=", "1", ")", "\n", "imgs", "=", "torch", ".", "flatten", "(", "imgs", ",", "end_dim", "=", "1", ")", "\n", "if", "not", "self", ".", "channels_last", ":", "\n", "                ", "imgs", "=", "imgs", ".", "permute", "(", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "# NHWC => NCHW", "\n", "", "imgs", "=", "imgs", ".", "float", "(", ")", "# NCHW", "\n", "# Here is where the projection conversion happens", "\n", "output", "=", "self", ".", "converter", "(", "imgs", ",", "is_depth", "=", "is_depth", ")", "\n", "\n", "# for debugging", "\n", "# torchvision.utils.save_image(output, f'sample_eqr_{target_sensor_uuid}.jpg', normalize=True, range=(0, 255) if 'rgb' in target_sensor_uuid else (0, 1))", "\n", "output", "=", "output", ".", "to", "(", "dtype", "=", "sensor_dtype", ")", "\n", "if", "not", "self", ".", "channels_last", ":", "\n", "                ", "output", "=", "output", ".", "permute", "(", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "# NCHW => NHWC", "\n", "", "observations", "[", "target_sensor_uuid", "]", "=", "output", "\n", "", "return", "observations", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CubeMap2Equirect.__init__": [[973, 996], ["obs_transformers.Cube2Equirect", "obs_transformers.ProjectionTransformer.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "sensor_uuids", ":", "List", "[", "str", "]", ",", "\n", "eq_shape", ":", "Tuple", "[", "int", ",", "int", "]", ",", "\n", "channels_last", ":", "bool", "=", "False", ",", "\n", "target_uuids", ":", "Optional", "[", "List", "[", "str", "]", "]", "=", "None", ",", "\n", "depth_key", ":", "str", "=", "\"depth\"", ",", "\n", ")", ":", "\n", "        ", "r\"\"\":param sensor_uuids: List of sensor_uuids: Back, Down, Front, Left, Right, Up.\n        :param eq_shape: The shape of the equirectangular output (height, width)\n        :param channels_last: Are the channels last in the input\n        :param target_uuids: Optional List of which of the sensor_uuids to overwrite\n        :param depth_key: If sensor_uuids has depth_key substring, they are processed as depth\n        \"\"\"", "\n", "\n", "converter", "=", "Cube2Equirect", "(", "eq_shape", "[", "0", "]", ",", "eq_shape", "[", "1", "]", ")", "\n", "super", "(", "CubeMap2Equirect", ",", "self", ")", ".", "__init__", "(", "\n", "converter", ",", "\n", "sensor_uuids", ",", "\n", "eq_shape", ",", "\n", "channels_last", ",", "\n", "target_uuids", ",", "\n", "depth_key", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CubeMap2Equirect.from_config": [[998, 1013], ["hasattr", "cls"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_config", "(", "cls", ",", "config", ")", ":", "\n", "        ", "cube2eq_config", "=", "config", ".", "RL", ".", "POLICY", ".", "OBS_TRANSFORMS", ".", "CUBE2EQ", "\n", "if", "hasattr", "(", "cube2eq_config", ",", "\"TARGET_UUIDS\"", ")", ":", "\n", "# Optional Config Value to specify target UUID", "\n", "            ", "target_uuids", "=", "cube2eq_config", ".", "TARGET_UUIDS", "\n", "", "else", ":", "\n", "            ", "target_uuids", "=", "None", "\n", "", "return", "cls", "(", "\n", "cube2eq_config", ".", "SENSOR_UUIDS", ",", "\n", "eq_shape", "=", "(", "\n", "cube2eq_config", ".", "HEIGHT", ",", "\n", "cube2eq_config", ".", "WIDTH", ",", "\n", ")", ",", "\n", "target_uuids", "=", "target_uuids", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.Cube2Fisheye.__init__": [[1022, 1051], ["obs_transformers.get_cubemap_projections", "obs_transformers.FisheyeProjection", "obs_transformers.ProjectionConverter.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.get_cubemap_projections", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "fish_h", ":", "int", ",", "\n", "fish_w", ":", "int", ",", "\n", "fish_fov", ":", "float", ",", "\n", "cx", ":", "float", ",", "\n", "cy", ":", "float", ",", "\n", "fx", ":", "float", ",", "\n", "fy", ":", "float", ",", "\n", "xi", ":", "float", ",", "\n", "alpha", ":", "float", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Args:\n        fish_h: (int) the height of the generated fisheye\n        fish_w: (int) the width of the generated fisheye\n        fish_fov: (float) the fov of the generated fisheye in degrees\n        cx, cy: (float) the optical center of the generated fisheye\n        fx, fy, xi, alpha: (float) the fisheye camera model parameters\n        \"\"\"", "\n", "\n", "# Cubemap input", "\n", "input_projections", "=", "get_cubemap_projections", "(", "fish_h", ",", "fish_w", ")", "\n", "\n", "# Fisheye output", "\n", "output_projection", "=", "FisheyeProjection", "(", "\n", "fish_h", ",", "fish_w", ",", "fish_fov", ",", "cx", ",", "cy", ",", "fx", ",", "fy", ",", "xi", ",", "alpha", "\n", ")", "\n", "super", "(", "Cube2Fisheye", ",", "self", ")", ".", "__init__", "(", "\n", "input_projections", ",", "output_projection", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CubeMap2Fisheye.__init__": [[1067, 1107], ["obs_transformers.Cube2Fisheye", "obs_transformers.ProjectionTransformer.__init__", "len", "min"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "sensor_uuids", ":", "List", "[", "str", "]", ",", "\n", "fish_shape", ":", "Tuple", "[", "int", ",", "int", "]", ",", "\n", "fish_fov", ":", "float", ",", "\n", "fish_params", ":", "Tuple", "[", "float", ",", "float", ",", "float", "]", ",", "\n", "channels_last", ":", "bool", "=", "False", ",", "\n", "target_uuids", ":", "Optional", "[", "List", "[", "str", "]", "]", "=", "None", ",", "\n", "depth_key", ":", "str", "=", "\"depth\"", ",", "\n", ")", ":", "\n", "        ", "r\"\"\":param sensor_uuids: List of sensor_uuids: Back, Down, Front, Left, Right, Up.\n        :param fish_shape: The shape of the fisheye output (height, width)\n        :param fish_fov: The FoV of the fisheye output in degrees\n        :param fish_params: The camera parameters of fisheye output (f, xi, alpha)\n        :param channels_last: Are the channels last in the input\n        :param target_uuids: Optional List of which of the sensor_uuids to overwrite\n        :param depth_key: If sensor_uuids has depth_key substring, they are processed as depth\n        \"\"\"", "\n", "\n", "assert", "(", "\n", "len", "(", "fish_params", ")", "==", "3", "\n", ")", ",", "\"fish_params must have three parameters (f, xi, alpha)\"", "\n", "# fisheye camera parameters", "\n", "fx", "=", "fish_params", "[", "0", "]", "*", "min", "(", "fish_shape", ")", "\n", "fy", "=", "fx", "\n", "cx", "=", "fish_shape", "[", "1", "]", "/", "2", "\n", "cy", "=", "fish_shape", "[", "0", "]", "/", "2", "\n", "xi", "=", "fish_params", "[", "1", "]", "\n", "alpha", "=", "fish_params", "[", "2", "]", "\n", "converter", ":", "ProjectionConverter", "=", "Cube2Fisheye", "(", "\n", "fish_shape", "[", "0", "]", ",", "fish_shape", "[", "1", "]", ",", "fish_fov", ",", "cx", ",", "cy", ",", "fx", ",", "fy", ",", "xi", ",", "alpha", "\n", ")", "\n", "\n", "super", "(", "CubeMap2Fisheye", ",", "self", ")", ".", "__init__", "(", "\n", "converter", ",", "\n", "sensor_uuids", ",", "\n", "fish_shape", ",", "\n", "channels_last", ",", "\n", "target_uuids", ",", "\n", "depth_key", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CubeMap2Fisheye.from_config": [[1109, 1126], ["hasattr", "cls"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_config", "(", "cls", ",", "config", ")", ":", "\n", "        ", "cube2fish_config", "=", "config", ".", "RL", ".", "POLICY", ".", "OBS_TRANSFORMS", ".", "CUBE2FISH", "\n", "if", "hasattr", "(", "cube2fish_config", ",", "\"TARGET_UUIDS\"", ")", ":", "\n", "# Optional Config Value to specify target UUID", "\n", "            ", "target_uuids", "=", "cube2fish_config", ".", "TARGET_UUIDS", "\n", "", "else", ":", "\n", "            ", "target_uuids", "=", "None", "\n", "", "return", "cls", "(", "\n", "cube2fish_config", ".", "SENSOR_UUIDS", ",", "\n", "fish_shape", "=", "(", "\n", "cube2fish_config", ".", "HEIGHT", ",", "\n", "cube2fish_config", ".", "WIDTH", ",", "\n", ")", ",", "\n", "fish_fov", "=", "cube2fish_config", ".", "FOV", ",", "\n", "fish_params", "=", "cube2fish_config", ".", "PARAMS", ",", "\n", "target_uuids", "=", "target_uuids", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.Equirect2Cube.__init__": [[1133, 1146], ["obs_transformers.EquirectProjection", "obs_transformers.get_cubemap_projections", "obs_transformers.ProjectionConverter.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.get_cubemap_projections", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "img_h", ":", "int", ",", "img_w", ":", "int", ")", ":", "\n", "        ", "\"\"\"Args:\n        img_h: (int) the height of the generated cubemap\n        img_w: (int) the width of the generated cubemap\n        \"\"\"", "\n", "\n", "# Equirectangular input", "\n", "input_projection", "=", "EquirectProjection", "(", "256", ",", "512", ")", "\n", "\n", "#  Cubemap output", "\n", "output_projections", "=", "get_cubemap_projections", "(", "img_h", ",", "img_w", ")", "\n", "super", "(", "Equirect2Cube", ",", "self", ")", ".", "__init__", "(", "\n", "input_projection", ",", "output_projections", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.Equirect2CubeMap.__init__": [[1157, 1180], ["obs_transformers.Equirect2Cube", "obs_transformers.ProjectionTransformer.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "sensor_uuids", ":", "List", "[", "str", "]", ",", "\n", "img_shape", ":", "Tuple", "[", "int", ",", "int", "]", ",", "\n", "channels_last", ":", "bool", "=", "False", ",", "\n", "target_uuids", ":", "Optional", "[", "List", "[", "str", "]", "]", "=", "None", ",", "\n", "depth_key", ":", "str", "=", "\"depth\"", ",", "\n", ")", ":", "\n", "        ", "r\"\"\":param sensor_uuids: List of sensor_uuids: Back, Down, Front, Left, Right, Up.\n        :param img_shape: The shape of the equirectangular output (height, width)\n        :param channels_last: Are the channels last in the input\n        :param target_uuids: Optional List of which of the sensor_uuids to overwrite\n        :param depth_key: If sensor_uuids has depth_key substring, they are processed as depth\n        \"\"\"", "\n", "\n", "converter", "=", "Equirect2Cube", "(", "img_shape", "[", "0", "]", ",", "img_shape", "[", "1", "]", ")", "\n", "super", "(", "Equirect2CubeMap", ",", "self", ")", ".", "__init__", "(", "\n", "converter", ",", "\n", "sensor_uuids", ",", "\n", "img_shape", ",", "\n", "channels_last", ",", "\n", "target_uuids", ",", "\n", "depth_key", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.Equirect2CubeMap.from_config": [[1182, 1198], ["hasattr", "cls"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_config", "(", "cls", ",", "config", ")", ":", "\n", "        ", "eq2cube_config", "=", "config", ".", "RL", ".", "POLICY", ".", "OBS_TRANSFORMS", ".", "EQ2CUBE", "\n", "\n", "if", "hasattr", "(", "eq2cube_config", ",", "\"TARGET_UUIDS\"", ")", ":", "\n", "# Optional Config Value to specify target UUID", "\n", "            ", "target_uuids", "=", "eq2cube_config", ".", "TARGET_UUIDS", "\n", "", "else", ":", "\n", "            ", "target_uuids", "=", "None", "\n", "", "return", "cls", "(", "\n", "eq2cube_config", ".", "SENSOR_UUIDS", ",", "\n", "img_shape", "=", "(", "\n", "eq2cube_config", ".", "HEIGHT", ",", "\n", "eq2cube_config", ".", "WIDTH", ",", "\n", ")", ",", "\n", "target_uuids", "=", "target_uuids", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.get_cubemap_projections": [[802, 837], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "obs_transformers.PerspectiveProjection", "projections.append"], "function", ["None"], ["", "", "def", "get_cubemap_projections", "(", "\n", "img_h", ":", "int", "=", "256", ",", "img_w", ":", "int", "=", "256", "\n", ")", "->", "List", "[", "CameraProjection", "]", ":", "\n", "    ", "\"\"\"Get cubemap camera projections that consist of six PerspectiveCameras.\n    The orders are 'BACK', 'DOWN', 'FRONT', 'LEFT', 'RIGHT', 'UP'.\n    Args:\n        img_h: (int) the height of camera image\n        img_w: (int) the width of camera image\n\n    The rotation matrices are equivalent to\n    .. code-block:: python\n        from scipy.spatial.transform import Rotation\n        rotations = [\n            Rotation.from_euler(\"y\", 180, degrees=True),  # Back\n            Rotation.from_euler(\"x\", -90, degrees=True),  # Down\n            Rotation.from_euler(\"x\", 0, degrees=True),  # Front\n            Rotation.from_euler(\"y\", -90, degrees=True),  # Left\n            Rotation.from_euler(\"y\", 90, degrees=True),  # Right\n            Rotation.from_euler(\"x\", 90, degrees=True)  # Up\n        ]\n    \"\"\"", "\n", "rotations", "=", "[", "\n", "torch", ".", "tensor", "(", "[", "[", "-", "1", ",", "0", ",", "0", "]", ",", "[", "0", ",", "1", ",", "0", "]", ",", "[", "0", ",", "0", ",", "-", "1", "]", "]", ")", ",", "# Back", "\n", "torch", ".", "tensor", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1", "]", ",", "[", "0", ",", "-", "1", ",", "0", "]", "]", ")", ",", "# Down", "\n", "torch", ".", "tensor", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "[", "0", ",", "1", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1", "]", "]", ")", ",", "# Front", "\n", "torch", ".", "tensor", "(", "[", "[", "0", ",", "0", ",", "-", "1", "]", ",", "[", "0", ",", "1", ",", "0", "]", ",", "[", "1", ",", "0", ",", "0", "]", "]", ")", ",", "# Left", "\n", "torch", ".", "tensor", "(", "[", "[", "0", ",", "0", ",", "1", "]", ",", "[", "0", ",", "1", ",", "0", "]", ",", "[", "-", "1", ",", "0", ",", "0", "]", "]", ")", ",", "# Right", "\n", "torch", ".", "tensor", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "-", "1", "]", ",", "[", "0", ",", "1", ",", "0", "]", "]", ")", ",", "# Up", "\n", "]", "\n", "\n", "projections", ":", "List", "[", "CameraProjection", "]", "=", "[", "]", "\n", "for", "rot", "in", "rotations", ":", "\n", "        ", "cam", "=", "PerspectiveProjection", "(", "img_h", ",", "img_w", ",", "R", "=", "rot", ")", "\n", "projections", ".", "append", "(", "cam", ")", "\n", "", "return", "projections", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.get_active_obs_transforms": [[1201, 1214], ["hasattr", "habitat_baselines.common.baseline_registry.baseline_registry.get_obs_transformer", "baseline_registry.get_obs_transformer.from_config", "active_obs_transforms.append"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.baseline_registry.BaselineRegistry.get_obs_transformer", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.Equirect2CubeMap.from_config"], ["", "", "def", "get_active_obs_transforms", "(", "config", ":", "Config", ")", "->", "List", "[", "ObservationTransformer", "]", ":", "\n", "    ", "active_obs_transforms", "=", "[", "]", "\n", "if", "hasattr", "(", "config", ".", "RL", ".", "POLICY", ",", "\"OBS_TRANSFORMS\"", ")", ":", "\n", "        ", "obs_transform_names", "=", "(", "\n", "config", ".", "RL", ".", "POLICY", ".", "OBS_TRANSFORMS", ".", "ENABLED_TRANSFORMS", "\n", ")", "\n", "for", "obs_transform_name", "in", "obs_transform_names", ":", "\n", "            ", "obs_trans_cls", "=", "baseline_registry", ".", "get_obs_transformer", "(", "\n", "obs_transform_name", "\n", ")", "\n", "obs_transform", "=", "obs_trans_cls", ".", "from_config", "(", "config", ")", "\n", "active_obs_transforms", ".", "append", "(", "obs_transform", ")", "\n", "", "", "return", "active_obs_transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.apply_obs_transforms_batch": [[1216, 1223], ["obs_transform"], "function", ["None"], ["", "def", "apply_obs_transforms_batch", "(", "\n", "batch", ":", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ",", "\n", "obs_transforms", ":", "Iterable", "[", "ObservationTransformer", "]", ",", "\n", ")", "->", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ":", "\n", "    ", "for", "obs_transform", "in", "obs_transforms", ":", "\n", "        ", "batch", "=", "obs_transform", "(", "batch", ")", "\n", "", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.apply_obs_transforms_obs_space": [[1225, 1231], ["obs_transform.transform_observation_space"], "function", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.ProjectionTransformer.transform_observation_space"], ["", "def", "apply_obs_transforms_obs_space", "(", "\n", "obs_space", ":", "spaces", ".", "Dict", ",", "obs_transforms", ":", "Iterable", "[", "ObservationTransformer", "]", "\n", ")", "->", "spaces", ".", "Dict", ":", "\n", "    ", "for", "obs_transform", "in", "obs_transforms", ":", "\n", "        ", "obs_space", "=", "obs_transform", ".", "transform_observation_space", "(", "obs_space", ")", "\n", "", "return", "obs_space", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensorboard_utils.TensorboardWriter.__init__": [[30, 44], ["torch.utils.tensorboard.SummaryWriter", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "log_dir", ":", "str", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "r\"\"\"A Wrapper for tensorboard SummaryWriter. It creates a dummy writer\n        when log_dir is empty string or None. It also has functionality that\n        generates tb video directly from numpy images.\n\n        Args:\n            log_dir: Save directory location. Will not write to disk if\n            log_dir is an empty string.\n            *args: Additional positional args for SummaryWriter\n            **kwargs: Additional keyword args for SummaryWriter\n        \"\"\"", "\n", "self", ".", "writer", "=", "None", "\n", "if", "log_dir", "is", "not", "None", "and", "len", "(", "log_dir", ")", ">", "0", ":", "\n", "            ", "self", ".", "writer", "=", "SummaryWriter", "(", "log_dir", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensorboard_utils.TensorboardWriter.__getattr__": [[45, 50], ["tensorboard_utils.TensorboardWriter.writer.__getattribute__"], "methods", ["None"], ["", "", "def", "__getattr__", "(", "self", ",", "item", ")", ":", "\n", "        ", "if", "self", ".", "writer", ":", "\n", "            ", "return", "self", ".", "writer", ".", "__getattribute__", "(", "item", ")", "\n", "", "else", ":", "\n", "            ", "return", "lambda", "*", "args", ",", "**", "kwargs", ":", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensorboard_utils.TensorboardWriter.__enter__": [[51, 53], ["None"], "methods", ["None"], ["", "", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensorboard_utils.TensorboardWriter.__exit__": [[54, 57], ["tensorboard_utils.TensorboardWriter.writer.close"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.env.RLEnv.close"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_val", ",", "exc_tb", ")", ":", "\n", "        ", "if", "self", ".", "writer", ":", "\n", "            ", "self", ".", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensorboard_utils.TensorboardWriter.add_video_from_np_images": [[58, 87], ["torch.cat", "video_tensor.permute().unsqueeze.permute().unsqueeze.permute().unsqueeze", "tensorboard_utils.TensorboardWriter.writer.add_video", "torch.from_numpy().unsqueeze", "tuple", "video_tensor.permute().unsqueeze.permute().unsqueeze.permute", "torch.from_numpy"], "methods", ["None"], ["", "", "def", "add_video_from_np_images", "(", "\n", "self", ",", "\n", "video_name", ":", "str", ",", "\n", "step_idx", ":", "int", ",", "\n", "images", ":", "List", "[", "np", ".", "ndarray", "]", ",", "\n", "fps", ":", "int", "=", "10", ",", "\n", ")", "->", "None", ":", "\n", "        ", "r\"\"\"Write video into tensorboard from images frames.\n\n        Args:\n            video_name: name of video string.\n            step_idx: int of checkpoint index to be displayed.\n            images: list of n frames. Each frame is a np.ndarray of shape.\n            fps: frame per second for output video.\n\n        Returns:\n            None.\n        \"\"\"", "\n", "if", "not", "self", ".", "writer", ":", "\n", "            ", "return", "\n", "# initial shape of np.ndarray list: N * (H, W, 3)", "\n", "", "frame_tensors", "=", "[", "\n", "torch", ".", "from_numpy", "(", "np_arr", ")", ".", "unsqueeze", "(", "0", ")", "for", "np_arr", "in", "images", "\n", "]", "\n", "video_tensor", "=", "torch", ".", "cat", "(", "tuple", "(", "frame_tensors", ")", ")", "\n", "video_tensor", "=", "video_tensor", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "unsqueeze", "(", "0", ")", "\n", "# final shape of video tensor: (1, n, 3, H, W)", "\n", "self", ".", "writer", ".", "add_video", "(", "\n", "video_name", ",", "video_tensor", ",", "fps", "=", "fps", ",", "global_step", "=", "step_idx", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensorboard_utils.WeightsAndBiasesWriter.__init__": [[91, 116], ["wandb.init", "ValueError", "os.environ.items", "k.startswith", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "r\"\"\"\n        Integrates with https://wandb.ai logging service.\n        \"\"\"", "\n", "wb_kwargs", "=", "{", "}", "\n", "if", "config", ".", "WB", ".", "PROJECT_NAME", "!=", "\"\"", ":", "\n", "            ", "wb_kwargs", "[", "\"project\"", "]", "=", "config", ".", "WB", ".", "PROJECT_NAME", "\n", "", "if", "config", ".", "WB", ".", "RUN_NAME", "!=", "\"\"", ":", "\n", "            ", "wb_kwargs", "[", "\"name\"", "]", "=", "config", ".", "WB", ".", "RUN_NAME", "\n", "", "if", "config", ".", "WB", ".", "ENTITY", "!=", "\"\"", ":", "\n", "            ", "wb_kwargs", "[", "\"entity\"", "]", "=", "config", ".", "WB", ".", "ENTITY", "\n", "", "if", "config", ".", "WB", ".", "GROUP", "!=", "\"\"", ":", "\n", "            ", "wb_kwargs", "[", "\"group\"", "]", "=", "config", ".", "WB", ".", "GROUP", "\n", "", "slurm_info_dict", "=", "{", "\n", "k", "[", "len", "(", "\"SLURM_\"", ")", ":", "]", ":", "v", "\n", "for", "k", ",", "v", "in", "os", ".", "environ", ".", "items", "(", ")", "\n", "if", "k", ".", "startswith", "(", "\"SLURM_\"", ")", "\n", "}", "\n", "if", "wandb", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Requested to log with wandb, but wandb is not installed.\"", "\n", ")", "\n", "\n", "", "self", ".", "run", "=", "wandb", ".", "init", "(", "\n", "config", "=", "{", "\"slurm\"", ":", "slurm_info_dict", ",", "**", "config", "}", ",", "**", "wb_kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensorboard_utils.WeightsAndBiasesWriter.__getattr__": [[118, 123], ["tensorboard_utils.WeightsAndBiasesWriter.writer.__getattribute__"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "item", ")", ":", "\n", "        ", "if", "self", ".", "writer", ":", "\n", "            ", "return", "self", ".", "writer", ".", "__getattribute__", "(", "item", ")", "\n", "", "else", ":", "\n", "            ", "return", "lambda", "*", "args", ",", "**", "kwargs", ":", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensorboard_utils.WeightsAndBiasesWriter.add_scalars": [[124, 130], ["wandb.log", "data_dict.items", "int", "k.replace"], "methods", ["None"], ["", "", "def", "add_scalars", "(", "self", ",", "log_group", ",", "data_dict", ",", "step_id", ")", ":", "\n", "        ", "log_data_dict", "=", "{", "\n", "f\"{log_group}/{k.replace(' ', '')}\"", ":", "v", "\n", "for", "k", ",", "v", "in", "data_dict", ".", "items", "(", ")", "\n", "}", "\n", "wandb", ".", "log", "(", "log_data_dict", ",", "step", "=", "int", "(", "step_id", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensorboard_utils.WeightsAndBiasesWriter.add_scalar": [[131, 133], ["wandb.log", "int"], "methods", ["None"], ["", "def", "add_scalar", "(", "self", ",", "key", ",", "value", ",", "step_id", ")", ":", "\n", "        ", "wandb", ".", "log", "(", "{", "key", ":", "value", "}", ",", "step", "=", "int", "(", "step_id", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensorboard_utils.WeightsAndBiasesWriter.__enter__": [[134, 136], ["None"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensorboard_utils.WeightsAndBiasesWriter.__exit__": [[137, 140], ["tensorboard_utils.WeightsAndBiasesWriter.run.finish"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_val", ",", "exc_tb", ")", ":", "\n", "        ", "if", "self", ".", "run", ":", "\n", "            ", "self", ".", "run", ".", "finish", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensorboard_utils.WeightsAndBiasesWriter.add_video_from_np_images": [[141, 145], ["NotImplementedError"], "methods", ["None"], ["", "", "def", "add_video_from_np_images", "(", "\n", "self", ",", "video_name", ":", "str", ",", "step_idx", ":", "int", ",", "images", ":", "np", ".", "ndarray", ",", "fps", ":", "int", "=", "10", "\n", ")", "->", "None", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Not supported\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensorboard_utils.get_writer": [[20, 27], ["tensorboard_utils.TensorboardWriter", "tensorboard_utils.WeightsAndBiasesWriter", "ValueError"], "function", ["None"], ["", "def", "get_writer", "(", "config", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "config", ".", "WRITER_TYPE", "==", "\"tb\"", ":", "\n", "        ", "return", "TensorboardWriter", "(", "config", ".", "TENSORBOARD_DIR", ",", "**", "kwargs", ")", "\n", "", "elif", "config", ".", "WRITER_TYPE", "==", "\"wb\"", ":", "\n", "        ", "return", "WeightsAndBiasesWriter", "(", "config", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unrecongized writer\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.__init__": [[19, 94], ["habitat_baselines.common.tensor_dict.TensorDict", "habitat_baselines.common.tensor_dict.TensorDict", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.from_numpy", "isinstance", "isinstance", "rollout_storage.RolloutStorage.buffers[].long", "rollout_storage.RolloutStorage.buffers[].long", "numpy.zeros", "range"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "numsteps", ",", "\n", "num_envs", ",", "\n", "observation_space", ",", "\n", "action_space", ",", "\n", "recurrent_hidden_state_size", ",", "\n", "num_recurrent_layers", "=", "1", ",", "\n", "action_shape", ":", "Optional", "[", "Tuple", "[", "int", "]", "]", "=", "None", ",", "\n", "is_double_buffered", ":", "bool", "=", "False", ",", "\n", "discrete_actions", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "        ", "self", ".", "buffers", "=", "TensorDict", "(", ")", "\n", "self", ".", "buffers", "[", "\"observations\"", "]", "=", "TensorDict", "(", ")", "\n", "\n", "for", "sensor", "in", "observation_space", ".", "spaces", ":", "\n", "            ", "self", ".", "buffers", "[", "\"observations\"", "]", "[", "sensor", "]", "=", "torch", ".", "from_numpy", "(", "\n", "np", ".", "zeros", "(", "\n", "(", "\n", "numsteps", "+", "1", ",", "\n", "num_envs", ",", "\n", "*", "observation_space", ".", "spaces", "[", "sensor", "]", ".", "shape", ",", "\n", ")", ",", "\n", "dtype", "=", "observation_space", ".", "spaces", "[", "sensor", "]", ".", "dtype", ",", "\n", ")", "\n", ")", "\n", "\n", "", "self", ".", "buffers", "[", "\"recurrent_hidden_states\"", "]", "=", "torch", ".", "zeros", "(", "\n", "numsteps", "+", "1", ",", "\n", "num_envs", ",", "\n", "num_recurrent_layers", ",", "\n", "recurrent_hidden_state_size", ",", "\n", ")", "\n", "\n", "self", ".", "buffers", "[", "\"rewards\"", "]", "=", "torch", ".", "zeros", "(", "numsteps", "+", "1", ",", "num_envs", ",", "1", ")", "\n", "self", ".", "buffers", "[", "\"value_preds\"", "]", "=", "torch", ".", "zeros", "(", "numsteps", "+", "1", ",", "num_envs", ",", "1", ")", "\n", "self", ".", "buffers", "[", "\"returns\"", "]", "=", "torch", ".", "zeros", "(", "numsteps", "+", "1", ",", "num_envs", ",", "1", ")", "\n", "\n", "self", ".", "buffers", "[", "\"action_log_probs\"", "]", "=", "torch", ".", "zeros", "(", "\n", "numsteps", "+", "1", ",", "num_envs", ",", "1", "\n", ")", "\n", "\n", "if", "action_shape", "is", "None", ":", "\n", "            ", "if", "action_space", ".", "__class__", ".", "__name__", "==", "\"ActionSpace\"", ":", "\n", "                ", "action_shape", "=", "(", "1", ",", ")", "\n", "", "else", ":", "\n", "                ", "action_shape", "=", "action_space", ".", "shape", "\n", "\n", "", "", "self", ".", "buffers", "[", "\"actions\"", "]", "=", "torch", ".", "zeros", "(", "\n", "numsteps", "+", "1", ",", "num_envs", ",", "*", "action_shape", "\n", ")", "\n", "self", ".", "buffers", "[", "\"prev_actions\"", "]", "=", "torch", ".", "zeros", "(", "\n", "numsteps", "+", "1", ",", "num_envs", ",", "*", "action_shape", "\n", ")", "\n", "if", "(", "\n", "discrete_actions", "\n", "and", "action_space", ".", "__class__", ".", "__name__", "==", "\"ActionSpace\"", "\n", ")", ":", "\n", "            ", "assert", "isinstance", "(", "self", ".", "buffers", "[", "\"actions\"", "]", ",", "torch", ".", "Tensor", ")", "\n", "assert", "isinstance", "(", "self", ".", "buffers", "[", "\"prev_actions\"", "]", ",", "torch", ".", "Tensor", ")", "\n", "self", ".", "buffers", "[", "\"actions\"", "]", "=", "self", ".", "buffers", "[", "\"actions\"", "]", ".", "long", "(", ")", "\n", "self", ".", "buffers", "[", "\"prev_actions\"", "]", "=", "self", ".", "buffers", "[", "\"prev_actions\"", "]", ".", "long", "(", ")", "\n", "\n", "", "self", ".", "buffers", "[", "\"masks\"", "]", "=", "torch", ".", "zeros", "(", "\n", "numsteps", "+", "1", ",", "num_envs", ",", "1", ",", "dtype", "=", "torch", ".", "bool", "\n", ")", "\n", "\n", "self", ".", "is_double_buffered", "=", "is_double_buffered", "\n", "self", ".", "_nbuffers", "=", "2", "if", "is_double_buffered", "else", "1", "\n", "self", ".", "_num_envs", "=", "num_envs", "\n", "\n", "assert", "(", "self", ".", "_num_envs", "%", "self", ".", "_nbuffers", ")", "==", "0", "\n", "\n", "self", ".", "numsteps", "=", "numsteps", "\n", "self", ".", "current_rollout_step_idxs", "=", "[", "0", "for", "_", "in", "range", "(", "self", ".", "_nbuffers", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.current_rollout_step_idx": [[95, 102], ["all"], "methods", ["None"], ["", "@", "property", "\n", "def", "current_rollout_step_idx", "(", "self", ")", "->", "int", ":", "\n", "        ", "assert", "all", "(", "\n", "s", "==", "self", ".", "current_rollout_step_idxs", "[", "0", "]", "\n", "for", "s", "in", "self", ".", "current_rollout_step_idxs", "\n", ")", "\n", "return", "self", ".", "current_rollout_step_idxs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to": [[103, 105], ["rollout_storage.RolloutStorage.buffers.map_in_place", "v.to"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.map_in_place", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.to"], ["", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "self", ".", "buffers", ".", "map_in_place", "(", "lambda", "v", ":", "v", ".", "to", "(", "device", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.insert": [[106, 154], ["dict", "dict", "slice", "int", "int", "len", "rollout_storage.RolloutStorage.buffers.set", "len", "rollout_storage.RolloutStorage.buffers.set", "dict.items", "dict.items"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.set", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.set"], ["", "def", "insert", "(", "\n", "self", ",", "\n", "next_observations", "=", "None", ",", "\n", "next_recurrent_hidden_states", "=", "None", ",", "\n", "actions", "=", "None", ",", "\n", "action_log_probs", "=", "None", ",", "\n", "value_preds", "=", "None", ",", "\n", "rewards", "=", "None", ",", "\n", "next_masks", "=", "None", ",", "\n", "buffer_index", ":", "int", "=", "0", ",", "\n", ")", ":", "\n", "        ", "if", "not", "self", ".", "is_double_buffered", ":", "\n", "            ", "assert", "buffer_index", "==", "0", "\n", "\n", "", "next_step", "=", "dict", "(", "\n", "observations", "=", "next_observations", ",", "\n", "recurrent_hidden_states", "=", "next_recurrent_hidden_states", ",", "\n", "prev_actions", "=", "actions", ",", "\n", "masks", "=", "next_masks", ",", "\n", ")", "\n", "\n", "current_step", "=", "dict", "(", "\n", "actions", "=", "actions", ",", "\n", "action_log_probs", "=", "action_log_probs", ",", "\n", "value_preds", "=", "value_preds", ",", "\n", "rewards", "=", "rewards", ",", "\n", ")", "\n", "\n", "next_step", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "next_step", ".", "items", "(", ")", "if", "v", "is", "not", "None", "}", "\n", "current_step", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "current_step", ".", "items", "(", ")", "if", "v", "is", "not", "None", "}", "\n", "\n", "env_slice", "=", "slice", "(", "\n", "int", "(", "buffer_index", "*", "self", ".", "_num_envs", "/", "self", ".", "_nbuffers", ")", ",", "\n", "int", "(", "(", "buffer_index", "+", "1", ")", "*", "self", ".", "_num_envs", "/", "self", ".", "_nbuffers", ")", ",", "\n", ")", "\n", "\n", "if", "len", "(", "next_step", ")", ">", "0", ":", "\n", "            ", "self", ".", "buffers", ".", "set", "(", "\n", "(", "self", ".", "current_rollout_step_idxs", "[", "buffer_index", "]", "+", "1", ",", "env_slice", ")", ",", "\n", "next_step", ",", "\n", "strict", "=", "False", ",", "\n", ")", "\n", "\n", "", "if", "len", "(", "current_step", ")", ">", "0", ":", "\n", "            ", "self", ".", "buffers", ".", "set", "(", "\n", "(", "self", ".", "current_rollout_step_idxs", "[", "buffer_index", "]", ",", "env_slice", ")", ",", "\n", "current_step", ",", "\n", "strict", "=", "False", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.advance_rollout": [[156, 158], ["None"], "methods", ["None"], ["", "", "def", "advance_rollout", "(", "self", ",", "buffer_index", ":", "int", "=", "0", ")", ":", "\n", "        ", "self", ".", "current_rollout_step_idxs", "[", "buffer_index", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.after_update": [[159, 164], ["None"], "methods", ["None"], ["", "def", "after_update", "(", "self", ")", ":", "\n", "        ", "self", ".", "buffers", "[", "0", "]", "=", "self", ".", "buffers", "[", "self", ".", "current_rollout_step_idx", "]", "\n", "\n", "self", ".", "current_rollout_step_idxs", "=", "[", "\n", "0", "for", "_", "in", "self", ".", "current_rollout_step_idxs", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.compute_returns": [[166, 195], ["isinstance", "reversed", "reversed", "range", "range"], "methods", ["None"], ["", "def", "compute_returns", "(", "self", ",", "next_value", ",", "use_gae", ",", "gamma", ",", "tau", ")", ":", "\n", "        ", "if", "use_gae", ":", "\n", "            ", "assert", "isinstance", "(", "self", ".", "buffers", "[", "\"value_preds\"", "]", ",", "torch", ".", "Tensor", ")", "\n", "self", ".", "buffers", "[", "\"value_preds\"", "]", "[", "\n", "self", ".", "current_rollout_step_idx", "\n", "]", "=", "next_value", "\n", "gae", "=", "0.0", "\n", "for", "step", "in", "reversed", "(", "range", "(", "self", ".", "current_rollout_step_idx", ")", ")", ":", "\n", "                ", "delta", "=", "(", "\n", "self", ".", "buffers", "[", "\"rewards\"", "]", "[", "step", "]", "\n", "+", "gamma", "\n", "*", "self", ".", "buffers", "[", "\"value_preds\"", "]", "[", "step", "+", "1", "]", "\n", "*", "self", ".", "buffers", "[", "\"masks\"", "]", "[", "step", "+", "1", "]", "\n", "-", "self", ".", "buffers", "[", "\"value_preds\"", "]", "[", "step", "]", "\n", ")", "\n", "gae", "=", "(", "\n", "delta", "+", "gamma", "*", "tau", "*", "gae", "*", "self", ".", "buffers", "[", "\"masks\"", "]", "[", "step", "+", "1", "]", "\n", ")", "\n", "self", ".", "buffers", "[", "\"returns\"", "]", "[", "step", "]", "=", "(", "# type: ignore", "\n", "gae", "+", "self", ".", "buffers", "[", "\"value_preds\"", "]", "[", "step", "]", "# type: ignore", "\n", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "buffers", "[", "\"returns\"", "]", "[", "self", ".", "current_rollout_step_idx", "]", "=", "next_value", "\n", "for", "step", "in", "reversed", "(", "range", "(", "self", ".", "current_rollout_step_idx", ")", ")", ":", "\n", "                ", "self", ".", "buffers", "[", "\"returns\"", "]", "[", "step", "]", "=", "(", "\n", "gamma", "\n", "*", "self", ".", "buffers", "[", "\"returns\"", "]", "[", "step", "+", "1", "]", "\n", "*", "self", ".", "buffers", "[", "\"masks\"", "]", "[", "step", "+", "1", "]", "\n", "+", "self", ".", "buffers", "[", "\"rewards\"", "]", "[", "step", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.rollout_storage.RolloutStorage.recurrent_generator": [[197, 226], ["advantages.size", "torch.randperm().chunk", "warnings.warn", "torch.randperm", "batch.map", "v.flatten"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.obs_transformers.CameraProjection.size", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.map"], ["", "", "", "def", "recurrent_generator", "(", "\n", "self", ",", "advantages", ",", "num_mini_batch", "\n", ")", "->", "Iterator", "[", "TensorDict", "]", ":", "\n", "        ", "num_environments", "=", "advantages", ".", "size", "(", "1", ")", "\n", "assert", "num_environments", ">=", "num_mini_batch", ",", "(", "\n", "\"Trainer requires the number of environments ({}) \"", "\n", "\"to be greater than or equal to the number of \"", "\n", "\"trainer mini batches ({}).\"", ".", "format", "(", "\n", "num_environments", ",", "num_mini_batch", "\n", ")", "\n", ")", "\n", "if", "num_environments", "%", "num_mini_batch", "!=", "0", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "\"Number of environments ({}) is not a multiple of the\"", "\n", "\" number of mini batches ({}).  This results in mini batches\"", "\n", "\" of different sizes, which can harm training performance.\"", ".", "format", "(", "\n", "num_environments", ",", "num_mini_batch", "\n", ")", "\n", ")", "\n", "", "for", "inds", "in", "torch", ".", "randperm", "(", "num_environments", ")", ".", "chunk", "(", "num_mini_batch", ")", ":", "\n", "            ", "batch", "=", "self", ".", "buffers", "[", "0", ":", "self", ".", "current_rollout_step_idx", ",", "inds", "]", "\n", "batch", "[", "\"advantages\"", "]", "=", "advantages", "[", "\n", "0", ":", "self", ".", "current_rollout_step_idx", ",", "inds", "\n", "]", "\n", "batch", "[", "\"recurrent_hidden_states\"", "]", "=", "batch", "[", "\n", "\"recurrent_hidden_states\"", "\n", "]", "[", "0", ":", "1", "]", "\n", "\n", "yield", "batch", ".", "map", "(", "lambda", "v", ":", "v", ".", "flatten", "(", "0", ",", "1", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.from_tree": [[36, 46], ["cls", "tree.items", "isinstance", "cls.from_tree", "torch.as_tensor"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.from_tree"], ["@", "classmethod", "\n", "def", "from_tree", "(", "cls", ",", "tree", ":", "DictTree", ")", "->", "\"TensorDict\"", ":", "\n", "        ", "res", "=", "cls", "(", ")", "\n", "for", "k", ",", "v", "in", "tree", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "                ", "res", "[", "k", "]", "=", "cls", ".", "from_tree", "(", "v", ")", "\n", "", "else", ":", "\n", "                ", "res", "[", "k", "]", "=", "torch", ".", "as_tensor", "(", "v", ")", "\n", "\n", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.to_tree": [[47, 56], ["dict", "tensor_dict.TensorDict.items", "isinstance", "v.to_tree"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.to_tree"], ["", "def", "to_tree", "(", "self", ")", "->", "DictTree", ":", "\n", "        ", "res", ":", "DictTree", "=", "dict", "(", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "TensorDict", ")", ":", "\n", "                ", "res", "[", "k", "]", "=", "v", ".", "to_tree", "(", ")", "\n", "", "else", ":", "\n", "                ", "res", "[", "k", "]", "=", "v", "\n", "\n", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.__getitem__": [[65, 72], ["isinstance", "super().__getitem__", "tensor_dict.TensorDict", "tensor_dict.TensorDict.items"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.__getitem__"], ["", "def", "__getitem__", "(", "\n", "self", ",", "index", ":", "Union", "[", "str", ",", "TensorIndexType", "]", "\n", ")", "->", "Union", "[", "\"TensorDict\"", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "if", "isinstance", "(", "index", ",", "str", ")", ":", "\n", "            ", "return", "super", "(", ")", ".", "__getitem__", "(", "index", ")", "\n", "", "else", ":", "\n", "            ", "return", "TensorDict", "(", "{", "k", ":", "v", "[", "index", "]", "for", "k", ",", "v", "in", "self", ".", "items", "(", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.set": [[91, 127], ["isinstance", "super().__setitem__", "tensor_dict.TensorDict.keys", "isinstance", "RuntimeError", "KeyError", "isinstance", "tensor_dict.TensorDict.keys", "value.keys", "isinstance", "tgt.set", "isinstance", "tgt[].copy_", "tensor_dict.TensorDict.keys", "value.keys", "KeyError", "torch.as_tensor"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.__setitem__", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.set"], ["", "def", "set", "(", "\n", "self", ",", "\n", "index", ":", "Union", "[", "str", ",", "TensorIndexType", "]", ",", "\n", "value", ":", "Union", "[", "torch", ".", "Tensor", ",", "\"TensorDict\"", ",", "DictTree", ",", "TensorLike", "]", ",", "\n", "strict", ":", "bool", "=", "True", ",", "\n", ")", "->", "None", ":", "\n", "        ", "if", "isinstance", "(", "index", ",", "str", ")", ":", "\n", "            ", "super", "(", ")", ".", "__setitem__", "(", "index", ",", "value", ")", "# type: ignore", "\n", "", "else", ":", "\n", "            ", "if", "not", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\n", "\"Set with indexing requires that the value is a dict\"", "\n", ")", "\n", "", "if", "strict", "and", "(", "self", ".", "keys", "(", ")", "!=", "value", ".", "keys", "(", ")", ")", ":", "\n", "                ", "raise", "KeyError", "(", "\n", "\"Keys don't match: Dest={} Source={}\"", ".", "format", "(", "\n", "self", ".", "keys", "(", ")", ",", "value", ".", "keys", "(", ")", "\n", ")", "\n", ")", "\n", "\n", "", "for", "k", "in", "self", ".", "keys", "(", ")", ":", "\n", "                ", "if", "k", "not", "in", "value", ":", "\n", "                    ", "if", "strict", ":", "\n", "                        ", "raise", "KeyError", "(", "f\"Key {k} not in new value dictionary\"", ")", "\n", "", "else", ":", "\n", "                        ", "continue", "\n", "\n", "", "", "v", "=", "value", "[", "k", "]", "\n", "tgt", "=", "self", "[", "k", "]", "\n", "\n", "if", "isinstance", "(", "v", ",", "(", "TensorDict", ",", "dict", ")", ")", ":", "\n", "                    ", "assert", "isinstance", "(", "tgt", ",", "TensorDict", ")", "\n", "tgt", ".", "set", "(", "index", ",", "v", ",", "strict", "=", "strict", ")", "\n", "", "else", ":", "\n", "                    ", "assert", "isinstance", "(", "tgt", ",", "torch", ".", "Tensor", ")", "\n", "tgt", "[", "index", "]", ".", "copy_", "(", "torch", ".", "as_tensor", "(", "v", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.__setitem__": [[144, 150], ["tensor_dict.TensorDict.set"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.set"], ["", "def", "__setitem__", "(", "\n", "self", ",", "\n", "index", ":", "Union", "[", "str", ",", "TensorIndexType", "]", ",", "\n", "value", ":", "Union", "[", "torch", ".", "Tensor", ",", "\"TensorDict\"", ",", "DictTree", ",", "TensorLike", "]", ",", "\n", ")", "->", "None", ":", "\n", "        ", "self", ".", "set", "(", "index", ",", "value", ")", "# type: ignore", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.map_func": [[151, 170], ["src.items", "tensor_dict.TensorDict", "isinstance", "func", "TensorDict.get", "cls.map_func", "isinstance"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.simulator.SensorSuite.get", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.map_func"], ["", "@", "classmethod", "\n", "def", "map_func", "(", "\n", "cls", ",", "\n", "func", ":", "Callable", "[", "[", "torch", ".", "Tensor", "]", ",", "torch", ".", "Tensor", "]", ",", "\n", "src", ":", "\"TensorDict\"", ",", "\n", "dst", ":", "Optional", "[", "\"TensorDict\"", "]", "=", "None", ",", "\n", ")", "->", "\"TensorDict\"", ":", "\n", "        ", "if", "dst", "is", "None", ":", "\n", "            ", "dst", "=", "TensorDict", "(", ")", "\n", "\n", "", "for", "k", ",", "v", "in", "src", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "dst", "[", "k", "]", "=", "func", "(", "v", ")", "\n", "", "else", ":", "\n", "                ", "sub_dst", "=", "dst", ".", "get", "(", "k", ",", "None", ")", "\n", "assert", "sub_dst", "is", "None", "or", "isinstance", "(", "sub_dst", ",", "TensorDict", ")", "\n", "dst", "[", "k", "]", "=", "cls", ".", "map_func", "(", "func", ",", "v", ",", "sub_dst", ")", "\n", "\n", "", "", "return", "dst", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.map": [[171, 175], ["tensor_dict.TensorDict.map_func"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.map_func"], ["", "def", "map", "(", "\n", "self", ",", "func", ":", "Callable", "[", "[", "torch", ".", "Tensor", "]", ",", "torch", ".", "Tensor", "]", "\n", ")", "->", "\"TensorDict\"", ":", "\n", "        ", "return", "self", ".", "map_func", "(", "func", ",", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.map_in_place": [[176, 180], ["tensor_dict.TensorDict.map_func"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.map_func"], ["", "def", "map_in_place", "(", "\n", "self", ",", "func", ":", "Callable", "[", "[", "torch", ".", "Tensor", "]", ",", "torch", ".", "Tensor", "]", "\n", ")", "->", "\"TensorDict\"", ":", "\n", "        ", "return", "self", ".", "map_func", "(", "func", ",", "self", ",", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.__deepcopy__": [[181, 183], ["tensor_dict.TensorDict.from_tree", "copy.deepcopy", "tensor_dict.TensorDict.to_tree"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.from_tree", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensor_dict.TensorDict.to_tree"], ["", "def", "__deepcopy__", "(", "self", ",", "_memo", "=", "None", ")", "->", "\"TensorDict\"", ":", "\n", "        ", "return", "TensorDict", ".", "from_tree", "(", "copy", ".", "deepcopy", "(", "self", ".", "to_tree", "(", ")", ",", "memo", "=", "_memo", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_trainer.BaseTrainer.train": [[37, 39], ["None"], "methods", ["None"], ["def", "train", "(", "self", ")", "->", "None", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_trainer.BaseTrainer._setup_eval_config": [[40, 75], ["base_trainer.BaseTrainer.config.clone", "base_trainer.BaseTrainer.defrost", "base_trainer.BaseTrainer.freeze", "base_trainer.BaseTrainer.merge_from_other_cfg", "base_trainer.BaseTrainer.merge_from_other_cfg", "base_trainer.BaseTrainer.merge_from_list", "base_trainer.BaseTrainer.merge_from_list", "habitat.logger.info", "base_trainer.BaseTrainer.config.clone", "base_trainer.BaseTrainer.merge_from_list"], "methods", ["None"], ["", "def", "_setup_eval_config", "(", "self", ",", "checkpoint_config", ":", "Config", ")", "->", "Config", ":", "\n", "        ", "r\"\"\"Sets up and returns a merged config for evaluation. Config\n            object saved from checkpoint is merged into config file specified\n            at evaluation time with the following overwrite priority:\n                  eval_opts > ckpt_opts > eval_cfg > ckpt_cfg\n            If the saved config is outdated, only the eval config is returned.\n\n        Args:\n            checkpoint_config: saved config from checkpoint.\n\n        Returns:\n            Config: merged config for eval.\n        \"\"\"", "\n", "\n", "config", "=", "self", ".", "config", ".", "clone", "(", ")", "\n", "\n", "ckpt_cmd_opts", "=", "checkpoint_config", ".", "CMD_TRAILING_OPTS", "\n", "eval_cmd_opts", "=", "config", ".", "CMD_TRAILING_OPTS", "\n", "\n", "try", ":", "\n", "            ", "config", ".", "merge_from_other_cfg", "(", "checkpoint_config", ")", "\n", "config", ".", "merge_from_other_cfg", "(", "self", ".", "config", ")", "\n", "config", ".", "merge_from_list", "(", "ckpt_cmd_opts", ")", "\n", "config", ".", "merge_from_list", "(", "eval_cmd_opts", ")", "\n", "", "except", "KeyError", ":", "\n", "            ", "logger", ".", "info", "(", "\"Saved config is outdated, using solely eval config\"", ")", "\n", "config", "=", "self", ".", "config", ".", "clone", "(", ")", "\n", "config", ".", "merge_from_list", "(", "eval_cmd_opts", ")", "\n", "", "config", ".", "defrost", "(", ")", "\n", "if", "config", ".", "TASK_CONFIG", ".", "DATASET", ".", "SPLIT", "==", "\"train\"", ":", "\n", "            ", "config", ".", "TASK_CONFIG", ".", "DATASET", ".", "SPLIT", "=", "\"val\"", "\n", "", "config", ".", "TASK_CONFIG", ".", "SIMULATOR", ".", "AGENT_0", ".", "SENSORS", "=", "self", ".", "config", ".", "SENSORS", "\n", "config", ".", "freeze", "(", ")", "\n", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_trainer.BaseTrainer.eval": [[76, 131], ["torch.cuda.is_available", "torch.device", "torch.device", "os.makedirs", "habitat_baselines.common.tensorboard_utils.get_writer", "os.path.isfile", "len", "len", "habitat_baselines.utils.common.get_checkpoint_id", "base_trainer.BaseTrainer._eval_checkpoint", "habitat.logger.info", "base_trainer.BaseTrainer._eval_checkpoint", "habitat_baselines.utils.common.poll_checkpoint_folder", "time.sleep"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.tensorboard_utils.get_writer", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.get_checkpoint_id", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer._eval_checkpoint", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer._eval_checkpoint", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.utils.common.poll_checkpoint_folder"], ["", "def", "eval", "(", "self", ")", "->", "None", ":", "\n", "        ", "r\"\"\"Main method of trainer evaluation. Calls _eval_checkpoint() that\n        is specified in Trainer class that inherits from BaseRLTrainer\n        or BaseILTrainer\n\n        Returns:\n            None\n        \"\"\"", "\n", "self", ".", "device", "=", "(", "\n", "torch", ".", "device", "(", "\"cuda\"", ",", "self", ".", "config", ".", "TORCH_GPU_ID", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "else", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", ")", "\n", "\n", "if", "\"tensorboard\"", "in", "self", ".", "config", ".", "VIDEO_OPTION", ":", "\n", "            ", "assert", "(", "\n", "len", "(", "self", ".", "config", ".", "TENSORBOARD_DIR", ")", ">", "0", "\n", ")", ",", "\"Must specify a tensorboard directory for video display\"", "\n", "os", ".", "makedirs", "(", "self", ".", "config", ".", "TENSORBOARD_DIR", ",", "exist_ok", "=", "True", ")", "\n", "", "if", "\"disk\"", "in", "self", ".", "config", ".", "VIDEO_OPTION", ":", "\n", "            ", "assert", "(", "\n", "len", "(", "self", ".", "config", ".", "VIDEO_DIR", ")", ">", "0", "\n", ")", ",", "\"Must specify a directory for storing videos on disk\"", "\n", "\n", "", "with", "get_writer", "(", "self", ".", "config", ",", "flush_secs", "=", "self", ".", "flush_secs", ")", "as", "writer", ":", "\n", "            ", "if", "os", ".", "path", ".", "isfile", "(", "self", ".", "config", ".", "EVAL_CKPT_PATH_DIR", ")", ":", "\n", "# evaluate singe checkpoint", "\n", "                ", "proposed_index", "=", "get_checkpoint_id", "(", "\n", "self", ".", "config", ".", "EVAL_CKPT_PATH_DIR", "\n", ")", "\n", "if", "proposed_index", "is", "not", "None", ":", "\n", "                    ", "ckpt_idx", "=", "proposed_index", "\n", "", "else", ":", "\n", "                    ", "ckpt_idx", "=", "0", "\n", "", "self", ".", "_eval_checkpoint", "(", "\n", "self", ".", "config", ".", "EVAL_CKPT_PATH_DIR", ",", "\n", "writer", ",", "\n", "checkpoint_index", "=", "ckpt_idx", ",", "\n", ")", "\n", "", "else", ":", "\n", "# evaluate multiple checkpoints in order", "\n", "                ", "prev_ckpt_ind", "=", "-", "1", "\n", "while", "True", ":", "\n", "                    ", "current_ckpt", "=", "None", "\n", "while", "current_ckpt", "is", "None", ":", "\n", "                        ", "current_ckpt", "=", "poll_checkpoint_folder", "(", "\n", "self", ".", "config", ".", "EVAL_CKPT_PATH_DIR", ",", "prev_ckpt_ind", "\n", ")", "\n", "time", ".", "sleep", "(", "2", ")", "# sleep for 2 secs before polling again", "\n", "", "logger", ".", "info", "(", "f\"=======current_ckpt: {current_ckpt}=======\"", ")", "# type: ignore", "\n", "prev_ckpt_ind", "+=", "1", "\n", "self", ".", "_eval_checkpoint", "(", "\n", "checkpoint_path", "=", "current_ckpt", ",", "\n", "writer", "=", "writer", ",", "\n", "checkpoint_index", "=", "prev_ckpt_ind", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_trainer.BaseTrainer._eval_checkpoint": [[133, 140], ["None"], "methods", ["None"], ["", "", "", "", "def", "_eval_checkpoint", "(", "\n", "self", ",", "\n", "checkpoint_path", ":", "str", ",", "\n", "writer", ":", "TensorboardWriter", ",", "\n", "checkpoint_index", ":", "int", "=", "0", ",", "\n", ")", "->", "None", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_trainer.BaseTrainer.save_checkpoint": [[141, 143], ["None"], "methods", ["None"], ["", "def", "save_checkpoint", "(", "self", ",", "file_name", ")", "->", "None", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_trainer.BaseTrainer.load_checkpoint": [[144, 146], ["None"], "methods", ["None"], ["", "def", "load_checkpoint", "(", "self", ",", "checkpoint_path", ",", "*", "args", ",", "**", "kwargs", ")", "->", "Dict", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_trainer.BaseRLTrainer.__init__": [[160, 199], ["super().__init__", "RuntimeError", "RuntimeError", "RuntimeError", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__"], ["def", "__init__", "(", "self", ",", "config", ":", "Config", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "config", "is", "not", "None", ",", "\"needs config file to initialize trainer\"", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "_flush_secs", "=", "30", "\n", "self", ".", "num_updates_done", "=", "0", "\n", "self", ".", "num_steps_done", "=", "0", "\n", "self", ".", "_last_checkpoint_percent", "=", "-", "1.0", "\n", "\n", "if", "config", ".", "NUM_UPDATES", "!=", "-", "1", "and", "config", ".", "TOTAL_NUM_STEPS", "!=", "-", "1", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"NUM_UPDATES and TOTAL_NUM_STEPS are both specified.  One must be -1.\\n\"", "\n", "\" NUM_UPDATES: {} TOTAL_NUM_STEPS: {}\"", ".", "format", "(", "\n", "config", ".", "NUM_UPDATES", ",", "config", ".", "TOTAL_NUM_STEPS", "\n", ")", "\n", ")", "\n", "\n", "", "if", "config", ".", "NUM_UPDATES", "==", "-", "1", "and", "config", ".", "TOTAL_NUM_STEPS", "==", "-", "1", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"One of NUM_UPDATES and TOTAL_NUM_STEPS must be specified.\\n\"", "\n", "\" NUM_UPDATES: {} TOTAL_NUM_STEPS: {}\"", ".", "format", "(", "\n", "config", ".", "NUM_UPDATES", ",", "config", ".", "TOTAL_NUM_STEPS", "\n", ")", "\n", ")", "\n", "\n", "", "if", "config", ".", "NUM_CHECKPOINTS", "!=", "-", "1", "and", "config", ".", "CHECKPOINT_INTERVAL", "!=", "-", "1", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"NUM_CHECKPOINTS and CHECKPOINT_INTERVAL are both specified.\"", "\n", "\"  One must be -1.\\n\"", "\n", "\" NUM_CHECKPOINTS: {} CHECKPOINT_INTERVAL: {}\"", ".", "format", "(", "\n", "config", ".", "NUM_CHECKPOINTS", ",", "config", ".", "CHECKPOINT_INTERVAL", "\n", ")", "\n", ")", "\n", "\n", "", "if", "config", ".", "NUM_CHECKPOINTS", "==", "-", "1", "and", "config", ".", "CHECKPOINT_INTERVAL", "==", "-", "1", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"One of NUM_CHECKPOINTS and CHECKPOINT_INTERVAL must be specified\"", "\n", "\" NUM_CHECKPOINTS: {} CHECKPOINT_INTERVAL: {}\"", ".", "format", "(", "\n", "config", ".", "NUM_CHECKPOINTS", ",", "config", ".", "CHECKPOINT_INTERVAL", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_trainer.BaseRLTrainer.percent_done": [[202, 207], ["None"], "methods", ["None"], ["", "", "def", "percent_done", "(", "self", ")", "->", "float", ":", "\n", "        ", "if", "self", ".", "config", ".", "NUM_UPDATES", "!=", "-", "1", ":", "\n", "            ", "return", "self", ".", "num_updates_done", "/", "self", ".", "config", ".", "NUM_UPDATES", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "num_steps_done", "/", "self", ".", "config", ".", "TOTAL_NUM_STEPS", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_trainer.BaseRLTrainer.is_done": [[208, 210], ["base_trainer.BaseRLTrainer.percent_done"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_trainer.BaseRLTrainer.percent_done"], ["", "", "def", "is_done", "(", "self", ")", "->", "bool", ":", "\n", "        ", "return", "self", ".", "percent_done", "(", ")", ">=", "1.0", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_trainer.BaseRLTrainer.should_checkpoint": [[211, 227], ["base_trainer.BaseRLTrainer.percent_done", "base_trainer.BaseRLTrainer.percent_done"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_trainer.BaseRLTrainer.percent_done", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_trainer.BaseRLTrainer.percent_done"], ["", "def", "should_checkpoint", "(", "self", ")", "->", "bool", ":", "\n", "        ", "needs_checkpoint", "=", "False", "\n", "if", "self", ".", "config", ".", "NUM_CHECKPOINTS", "!=", "-", "1", ":", "\n", "            ", "checkpoint_every", "=", "1", "/", "self", ".", "config", ".", "NUM_CHECKPOINTS", "\n", "if", "(", "\n", "self", ".", "_last_checkpoint_percent", "+", "checkpoint_every", "\n", "<", "self", ".", "percent_done", "(", ")", "\n", ")", ":", "\n", "                ", "needs_checkpoint", "=", "True", "\n", "self", ".", "_last_checkpoint_percent", "=", "self", ".", "percent_done", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "needs_checkpoint", "=", "(", "\n", "self", ".", "num_updates_done", "%", "self", ".", "config", ".", "CHECKPOINT_INTERVAL", "\n", ")", "==", "0", "\n", "\n", "", "return", "needs_checkpoint", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_trainer.BaseRLTrainer._should_save_resume_state": [[228, 240], ["habitat_baselines.rl.ddppo.ddp_utils.SAVE_STATE.is_set", "habitat_baselines.rl.ddppo.ddp_utils.is_slurm_batch_job", "int"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.ddppo.ddp_utils.is_slurm_batch_job"], ["", "def", "_should_save_resume_state", "(", "self", ")", "->", "bool", ":", "\n", "        ", "return", "SAVE_STATE", ".", "is_set", "(", ")", "or", "(", "\n", "(", "\n", "not", "self", ".", "config", ".", "RL", ".", "preemption", ".", "save_state_batch_only", "\n", "or", "is_slurm_batch_job", "(", ")", "\n", ")", "\n", "and", "(", "\n", "(", "\n", "int", "(", "self", ".", "num_updates_done", "+", "1", ")", "\n", "%", "self", ".", "config", ".", "RL", ".", "preemption", ".", "save_resume_state_interval", "\n", ")", "\n", "==", "0", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_trainer.BaseRLTrainer.flush_secs": [[247, 250], ["None"], "methods", ["None"], ["", "@", "flush_secs", ".", "setter", "\n", "def", "flush_secs", "(", "self", ",", "value", ":", "int", ")", ":", "\n", "        ", "self", ".", "_flush_secs", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_trainer.BaseRLTrainer.train": [[251, 253], ["None"], "methods", ["None"], ["", "def", "train", "(", "self", ")", "->", "None", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_trainer.BaseRLTrainer._eval_checkpoint": [[254, 272], ["None"], "methods", ["None"], ["", "def", "_eval_checkpoint", "(", "\n", "self", ",", "\n", "checkpoint_path", ":", "str", ",", "\n", "writer", ":", "TensorboardWriter", ",", "\n", "checkpoint_index", ":", "int", "=", "0", ",", "\n", ")", "->", "None", ":", "\n", "        ", "r\"\"\"Evaluates a single checkpoint. Trainer algorithms should\n        implement this.\n\n        Args:\n            checkpoint_path: path of checkpoint\n            writer: tensorboard writer object for logging to tensorboard\n            checkpoint_index: index of cur checkpoint for logging\n\n        Returns:\n            None\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_trainer.BaseRLTrainer.save_checkpoint": [[273, 275], ["None"], "methods", ["None"], ["", "def", "save_checkpoint", "(", "self", ",", "file_name", ")", "->", "None", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_trainer.BaseRLTrainer.load_checkpoint": [[276, 278], ["None"], "methods", ["None"], ["", "def", "load_checkpoint", "(", "self", ",", "checkpoint_path", ",", "*", "args", ",", "**", "kwargs", ")", "->", "Dict", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_trainer.BaseRLTrainer._pause_envs": [[279, 326], ["len", "list", "reversed", "batch.items", "range", "list.pop", "envs.pause_at"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.vector_env.VectorEnv.pause_at"], ["", "@", "staticmethod", "\n", "def", "_pause_envs", "(", "\n", "envs_to_pause", ":", "List", "[", "int", "]", ",", "\n", "envs", ":", "VectorEnv", ",", "\n", "test_recurrent_hidden_states", ":", "Tensor", ",", "\n", "not_done_masks", ":", "Tensor", ",", "\n", "current_episode_reward", ":", "Tensor", ",", "\n", "prev_actions", ":", "Tensor", ",", "\n", "batch", ":", "Dict", "[", "str", ",", "Tensor", "]", ",", "\n", "rgb_frames", ":", "Union", "[", "List", "[", "List", "[", "Any", "]", "]", ",", "List", "[", "List", "[", "ndarray", "]", "]", "]", ",", "\n", ")", "->", "Tuple", "[", "\n", "VectorEnv", ",", "\n", "Tensor", ",", "\n", "Tensor", ",", "\n", "Tensor", ",", "\n", "Tensor", ",", "\n", "Dict", "[", "str", ",", "Tensor", "]", ",", "\n", "List", "[", "List", "[", "Any", "]", "]", ",", "\n", "]", ":", "\n", "# pausing self.envs with no new episode", "\n", "        ", "if", "len", "(", "envs_to_pause", ")", ">", "0", ":", "\n", "            ", "state_index", "=", "list", "(", "range", "(", "envs", ".", "num_envs", ")", ")", "\n", "for", "idx", "in", "reversed", "(", "envs_to_pause", ")", ":", "\n", "                ", "state_index", ".", "pop", "(", "idx", ")", "\n", "envs", ".", "pause_at", "(", "idx", ")", "\n", "\n", "# indexing along the batch dimensions", "\n", "", "test_recurrent_hidden_states", "=", "test_recurrent_hidden_states", "[", "\n", "state_index", "\n", "]", "\n", "not_done_masks", "=", "not_done_masks", "[", "state_index", "]", "\n", "current_episode_reward", "=", "current_episode_reward", "[", "state_index", "]", "\n", "prev_actions", "=", "prev_actions", "[", "state_index", "]", "\n", "\n", "for", "k", ",", "v", "in", "batch", ".", "items", "(", ")", ":", "\n", "                ", "batch", "[", "k", "]", "=", "v", "[", "state_index", "]", "\n", "\n", "", "rgb_frames", "=", "[", "rgb_frames", "[", "i", "]", "for", "i", "in", "state_index", "]", "\n", "\n", "", "return", "(", "\n", "envs", ",", "\n", "test_recurrent_hidden_states", ",", "\n", "not_done_masks", ",", "\n", "current_episode_reward", ",", "\n", "prev_actions", ",", "\n", "batch", ",", "\n", "rgb_frames", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.baseline_registry.BaselineRegistry.register_trainer": [[29, 42], ["cls._register_impl"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry._register_impl"], ["    ", "@", "classmethod", "\n", "def", "register_trainer", "(", "cls", ",", "to_register", "=", "None", ",", "*", ",", "name", ":", "Optional", "[", "str", "]", "=", "None", ")", ":", "\n", "        ", "r\"\"\"Register a RL training algorithm to registry with key 'name'.\n\n        Args:\n            name: Key with which the trainer will be registered.\n                If None will use the name of the class.\n\n        \"\"\"", "\n", "from", "habitat_baselines", ".", "common", ".", "base_trainer", "import", "BaseTrainer", "\n", "\n", "return", "cls", ".", "_register_impl", "(", "\n", "\"trainer\"", ",", "to_register", ",", "name", ",", "assert_type", "=", "BaseTrainer", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.baseline_registry.BaselineRegistry.get_trainer": [[44, 47], ["cls._get_impl"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry._get_impl"], ["", "@", "classmethod", "\n", "def", "get_trainer", "(", "cls", ",", "name", ")", ":", "\n", "        ", "return", "cls", ".", "_get_impl", "(", "\"trainer\"", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.baseline_registry.BaselineRegistry.register_policy": [[48, 78], ["cls._register_impl"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry._register_impl"], ["", "@", "classmethod", "\n", "def", "register_policy", "(", "cls", ",", "to_register", "=", "None", ",", "*", ",", "name", ":", "Optional", "[", "str", "]", "=", "None", ")", ":", "\n", "        ", "r\"\"\"Register a RL policy with :p:`name`.\n\n        :param name: Key with which the policy will be registered.\n            If :py:`None` will use the name of the class\n\n        .. code:: py\n\n            from habitat_baselines.rl.ppo.policy import Policy\n            from habitat_baselines.common.baseline_registry import (\n                baseline_registry\n            )\n\n            @baseline_registry.register_policy\n            class MyPolicy(Policy):\n                pass\n\n\n            # or\n\n            @baseline_registry.register_policy(name=\"MyPolicyName\")\n            class MyPolicy(Policy):\n                pass\n\n        \"\"\"", "\n", "from", "habitat_baselines", ".", "rl", ".", "ppo", ".", "policy", "import", "Policy", "\n", "\n", "return", "cls", ".", "_register_impl", "(", "\n", "\"policy\"", ",", "to_register", ",", "name", ",", "assert_type", "=", "Policy", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.baseline_registry.BaselineRegistry.get_policy": [[80, 84], ["cls._get_impl"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry._get_impl"], ["", "@", "classmethod", "\n", "def", "get_policy", "(", "cls", ",", "name", ":", "str", ")", ":", "\n", "        ", "r\"\"\"Get the RL policy with :p:`name`.\"\"\"", "\n", "return", "cls", ".", "_get_impl", "(", "\"policy\"", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.baseline_registry.BaselineRegistry.register_obs_transformer": [[85, 122], ["cls._register_impl"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry._register_impl"], ["", "@", "classmethod", "\n", "def", "register_obs_transformer", "(", "\n", "cls", ",", "to_register", "=", "None", ",", "*", ",", "name", ":", "Optional", "[", "str", "]", "=", "None", "\n", ")", ":", "\n", "        ", "r\"\"\"Register a Observation Transformer with :p:`name`.\n\n        :param name: Key with which the policy will be registered.\n            If :py:`None` will use the name of the class\n\n        .. code:: py\n\n            from habitat_baselines.common.obs_transformers import ObservationTransformer\n            from habitat_baselines.common.baseline_registry import (\n                baseline_registry\n            )\n\n            @baseline_registry.register_policy\n            class MyObsTransformer(ObservationTransformer):\n                pass\n\n\n            # or\n\n            @baseline_registry.register_policy(name=\"MyTransformer\")\n            class MyObsTransformer(ObservationTransformer):\n                pass\n\n        \"\"\"", "\n", "from", "habitat_baselines", ".", "common", ".", "obs_transformers", "import", "(", "\n", "ObservationTransformer", ",", "\n", ")", "\n", "\n", "return", "cls", ".", "_register_impl", "(", "\n", "\"obs_transformer\"", ",", "\n", "to_register", ",", "\n", "name", ",", "\n", "assert_type", "=", "ObservationTransformer", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.baseline_registry.BaselineRegistry.get_obs_transformer": [[124, 128], ["cls._get_impl"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.core.registry.Registry._get_impl"], ["", "@", "classmethod", "\n", "def", "get_obs_transformer", "(", "cls", ",", "name", ":", "str", ")", ":", "\n", "        ", "r\"\"\"Get the Observation Transformer with :p:`name`.\"\"\"", "\n", "return", "cls", ".", "_get_impl", "(", "\"obs_transformer\"", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__": [[23, 29], ["habitat_baselines.common.base_trainer.BaseTrainer.__init__", "base_il_trainer.BaseILTrainer._make_dirs"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.__init__", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer._make_dirs"], ["def", "__init__", "(", "self", ",", "config", ":", "Config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "config", "is", "not", "None", ",", "\"needs config file to initialize trainer\"", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "_flush_secs", "=", "30", "\n", "self", ".", "_make_dirs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.flush_secs": [[34, 37], ["None"], "methods", ["None"], ["", "@", "flush_secs", ".", "setter", "\n", "def", "flush_secs", "(", "self", ",", "value", ":", "int", ")", ":", "\n", "        ", "self", ".", "_flush_secs", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer._make_dirs": [[38, 44], ["base_il_trainer.BaseILTrainer._make_log_dir", "base_il_trainer.BaseILTrainer._make_ckpt_dir", "base_il_trainer.BaseILTrainer._make_results_dir"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer._make_log_dir", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer._make_ckpt_dir", "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer._make_results_dir"], ["", "def", "_make_dirs", "(", "self", ")", "->", "None", ":", "\n", "        ", "r\"\"\"Makes directories for log files, checkpoints & results.\"\"\"", "\n", "self", ".", "_make_log_dir", "(", ")", "\n", "self", ".", "_make_ckpt_dir", "(", ")", "\n", "if", "self", ".", "config", ".", "EVAL_SAVE_RESULTS", ":", "\n", "            ", "self", ".", "_make_results_dir", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer._make_log_dir": [[45, 51], ["os.makedirs", "os.path.isdir"], "methods", ["None"], ["", "", "def", "_make_log_dir", "(", "self", ")", "->", "None", ":", "\n", "        ", "r\"\"\"Makes directory for writing log files.\"\"\"", "\n", "if", "self", ".", "config", ".", "LOG_METRICS", "and", "not", "os", ".", "path", ".", "isdir", "(", "\n", "self", ".", "config", ".", "OUTPUT_LOG_DIR", "\n", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "config", ".", "OUTPUT_LOG_DIR", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer._make_ckpt_dir": [[52, 56], ["os.path.isdir", "os.makedirs"], "methods", ["None"], ["", "", "def", "_make_ckpt_dir", "(", "self", ")", "->", "None", ":", "\n", "        ", "r\"\"\"Makes directory for saving model checkpoints.\"\"\"", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "self", ".", "config", ".", "CHECKPOINT_FOLDER", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "config", ".", "CHECKPOINT_FOLDER", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer._make_results_dir": [[57, 61], ["base_il_trainer.BaseILTrainer.config.RESULTS_DIR.format", "os.makedirs"], "methods", ["None"], ["", "", "def", "_make_results_dir", "(", "self", ")", "->", "None", ":", "\n", "        ", "r\"\"\"Makes directory for saving eval results.\"\"\"", "\n", "dir_name", "=", "self", ".", "config", ".", "RESULTS_DIR", ".", "format", "(", "split", "=", "\"val\"", ")", "\n", "os", ".", "makedirs", "(", "dir_name", ",", "exist_ok", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.train": [[62, 64], ["None"], "methods", ["None"], ["", "def", "train", "(", "self", ")", "->", "None", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer._eval_checkpoint": [[65, 83], ["None"], "methods", ["None"], ["", "def", "_eval_checkpoint", "(", "\n", "self", ",", "\n", "checkpoint_path", ":", "str", ",", "\n", "writer", ":", "TensorboardWriter", ",", "\n", "checkpoint_index", ":", "int", "=", "0", ",", "\n", ")", "->", "None", ":", "\n", "        ", "r\"\"\"Evaluates a single checkpoint. Trainer algorithms should\n        implement this.\n\n        Args:\n            checkpoint_path: path of checkpoint\n            writer: tensorboard writer object for logging to tensorboard\n            checkpoint_index: index of cur checkpoint for logging\n\n        Returns:\n            None\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.save_checkpoint": [[84, 96], ["torch.save", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_habitat-api.rearrange.utils.CacheHelper.save"], ["", "def", "save_checkpoint", "(", "self", ",", "state_dict", ":", "OrderedDict", ",", "file_name", ":", "str", ")", "->", "None", ":", "\n", "        ", "r\"\"\"Save checkpoint with specified name.\n\n        Args:\n            state_dict: model's state_dict\n            file_name: file name for checkpoint\n\n        Returns:\n            None\n        \"\"\"", "\n", "torch", ".", "save", "(", "\n", "state_dict", ",", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "CHECKPOINT_FOLDER", ",", "file_name", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_habitat-api.common.base_il_trainer.BaseILTrainer.load_checkpoint": [[98, 100], ["None"], "methods", ["None"], ["", "def", "load_checkpoint", "(", "self", ",", "checkpoint_path", ",", "*", "args", ",", "**", "kwargs", ")", "->", "Dict", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]]}