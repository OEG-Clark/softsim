{"home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.UMA-TEST.run_public.gather_sequence_info": [[10, 84], ["os.path.join", "os.path.join", "os.path.join", "os.path.exists", "os.path.exists", "os.path.join", "os.path.exists", "int", "os.path.join", "numpy.loadtxt", "numpy.loadtxt", "len", "cv2.imread", "len", "min", "max", "int", "int", "os.path.basename", "os.listdir", "os.path.basename", "next", "image_filenames.keys", "image_filenames.keys", "detections[].min", "detections[].max", "open", "dict", "int", "os.path.splitext", "iter", "l.split", "image_filenames.values", "f.read().splitlines", "isinstance", "f.read", "len"], "function", ["None"], ["def", "gather_sequence_info", "(", "sequence_dir", ",", "det_dir", ")", ":", "\n", "    ", "\"\"\"Gather sequence information, such as image filenames, detections,\n    groundtruth (if available).\n\n    Parameters\n    ----------\n    sequence_dir : str\n        Path to the MOTChallenge sequence directory.\n    detection_file : str\n        Path to the detection file.\n\n    Returns\n    -------\n    Dict\n        A dictionary of the following sequence information:\n\n        * sequence_name: Name of the sequence\n        * image_filenames: A dictionary that maps frame indices to image\n          filenames.\n        * detections: A numpy array of detections in MOTChallenge format.\n        * groundtruth: A numpy array of ground truth in MOTChallenge format.\n        * image_size: Image size (height, width).\n        * min_frame_idx: Index of the first frame.\n        * max_frame_idx: Index of the last frame.\n\n    \"\"\"", "\n", "image_dir", "=", "os", ".", "path", ".", "join", "(", "sequence_dir", ",", "\"img1\"", ")", "\n", "image_filenames", "=", "{", "\n", "int", "(", "os", ".", "path", ".", "splitext", "(", "f", ")", "[", "0", "]", ")", ":", "os", ".", "path", ".", "join", "(", "image_dir", ",", "f", ")", "\n", "for", "f", "in", "os", ".", "listdir", "(", "image_dir", ")", "}", "\n", "groundtruth_file", "=", "os", ".", "path", ".", "join", "(", "sequence_dir", ",", "\"gt/gt.txt\"", ")", "\n", "detection_dir", "=", "os", ".", "path", ".", "join", "(", "det_dir", ",", "'%s.txt'", "%", "os", ".", "path", ".", "basename", "(", "sequence_dir", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "detection_dir", ")", ":", "\n", "        ", "detections", "=", "np", ".", "loadtxt", "(", "detection_dir", ",", "delimiter", "=", "','", ")", "\n", "", "groundtruth", "=", "None", "\n", "if", "os", ".", "path", ".", "exists", "(", "groundtruth_file", ")", ":", "\n", "        ", "groundtruth", "=", "np", ".", "loadtxt", "(", "groundtruth_file", ",", "delimiter", "=", "','", ")", "\n", "\n", "", "if", "len", "(", "image_filenames", ")", ">", "0", ":", "\n", "        ", "image", "=", "cv2", ".", "imread", "(", "next", "(", "iter", "(", "image_filenames", ".", "values", "(", ")", ")", ")", ",", "\n", "cv2", ".", "IMREAD_GRAYSCALE", ")", "\n", "image_size", "=", "image", ".", "shape", "\n", "", "else", ":", "\n", "        ", "image_size", "=", "None", "\n", "\n", "", "if", "len", "(", "image_filenames", ")", ">", "0", ":", "\n", "        ", "min_frame_idx", "=", "min", "(", "image_filenames", ".", "keys", "(", ")", ")", "\n", "max_frame_idx", "=", "max", "(", "image_filenames", ".", "keys", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "min_frame_idx", "=", "int", "(", "detections", "[", ":", ",", "0", "]", ".", "min", "(", ")", ")", "\n", "max_frame_idx", "=", "int", "(", "detections", "[", ":", ",", "0", "]", ".", "max", "(", ")", ")", "\n", "\n", "", "info_filename", "=", "os", ".", "path", ".", "join", "(", "sequence_dir", ",", "\"seqinfo.ini\"", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "info_filename", ")", ":", "\n", "        ", "with", "open", "(", "info_filename", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "line_splits", "=", "[", "l", ".", "split", "(", "'='", ")", "for", "l", "in", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "[", "1", ":", "]", "]", "\n", "info_dict", "=", "dict", "(", "\n", "s", "for", "s", "in", "line_splits", "if", "isinstance", "(", "s", ",", "list", ")", "and", "len", "(", "s", ")", "==", "2", ")", "\n", "\n", "", "update_ms", "=", "1000", "/", "int", "(", "info_dict", "[", "\"frameRate\"", "]", ")", "\n", "", "else", ":", "\n", "        ", "update_ms", "=", "None", "\n", "\n", "", "seq_info", "=", "{", "\n", "\"sequence_name\"", ":", "os", ".", "path", ".", "basename", "(", "sequence_dir", ")", ",", "\n", "\"image_filenames\"", ":", "image_filenames", ",", "\n", "\"detections\"", ":", "detections", ",", "\n", "\"groundtruth\"", ":", "groundtruth", ",", "\n", "\"image_size\"", ":", "image_size", ",", "\n", "\"min_frame_idx\"", ":", "min_frame_idx", ",", "\n", "\"max_frame_idx\"", ":", "max_frame_idx", ",", "\n", "\"update_ms\"", ":", "update_ms", "\n", "}", "\n", "return", "seq_info", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.UMA-TEST.run_public.create_detections": [[86, 95], ["detection_mat[].astype", "detection_list.append", "tracker.detection.Detection"], "function", ["None"], ["", "def", "create_detections", "(", "detection_mat", ",", "frame_idx", ")", ":", "\n", "    ", "frame_indices", "=", "detection_mat", "[", ":", ",", "0", "]", ".", "astype", "(", "np", ".", "int", ")", "\n", "mask", "=", "frame_indices", "==", "frame_idx", "\n", "\n", "detection_list", "=", "[", "]", "\n", "for", "row", "in", "detection_mat", "[", "mask", "]", ":", "\n", "        ", "bbox", ",", "confidence", "=", "row", "[", "1", ":", "5", "]", ",", "row", "[", "5", "]", "\n", "detection_list", ".", "append", "(", "Detection", "(", "bbox", ",", "confidence", ")", ")", "\n", "", "return", "detection_list", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.UMA-TEST.run_public.run": [[97, 156], ["run_public.gather_sequence_info", "tracker.mot_tracker.MOT_Tracker", "configparser.ConfigParser", "configparser.ConfigParser.read", "int", "visualization.NoVisualization.run", "open", "os.path.join", "configparser.ConfigParser.get", "print", "run_public.create_detections", "time.time", "tracker.mot_tracker.MOT_Tracker.update", "runtime.append", "application_util.visualization.Visualization", "application_util.visualization.NoVisualization", "print", "results.append", "cv2.imread", "vis.set_image", "vis.draw_detections", "vis.draw_groundtruth", "vis.draw_trackers", "sum", "len", "int", "time.time", "cv2.imread.copy", "numpy.where", "t.is_tracked", "numpy.where", "numpy.where"], "function", ["home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.show_results.gather_sequence_info", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.show_results.Visualization.run", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.misc_utils.get", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.UMA-TEST.run_public.create_detections", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.tracker.track.Track.update", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.show_results.Visualization.set_image", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.visualization.Visualization.draw_detections", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.show_results.Visualization.draw_groundtruth", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.show_results.Visualization.draw_trackers", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.tracker.track.Track.is_tracked"], ["", "def", "run", "(", "sequence_dir", ",", "det_dir", ",", "checkpoint", ",", "output_file", ",", "\n", "max_age", ",", "context_amount", ",", "iou", ",", "\n", "occlusion_thres", ",", "association_thres", ",", "display", ")", ":", "\n", "\n", "    ", "seq_info", "=", "gather_sequence_info", "(", "sequence_dir", ",", "det_dir", ")", "\n", "tracker", "=", "MOT_Tracker", "(", "max_age", ",", "occlusion_thres", ",", "association_thres", ")", "\n", "\n", "conf", "=", "configparser", ".", "ConfigParser", "(", ")", "\n", "conf", ".", "read", "(", "os", ".", "path", ".", "join", "(", "sequence_dir", ",", "'seqinfo.ini'", ")", ")", "\n", "tracker", ".", "frame_rate", "=", "int", "(", "conf", ".", "get", "(", "'Sequence'", ",", "'frameRate'", ")", ")", "\n", "\n", "if", "display", ":", "\n", "        ", "gt", "=", "seq_info", "[", "'groundtruth'", "]", "[", "np", ".", "where", "(", "seq_info", "[", "'groundtruth'", "]", "[", ":", ",", "-", "2", "]", "==", "1", ")", "[", "0", "]", ",", ":", "]", "\n", "\n", "", "results", "=", "[", "]", "\n", "runtime", "=", "[", "]", "\n", "detections", "=", "seq_info", "[", "\"detections\"", "]", "\n", "def", "frame_callback", "(", "vis", ",", "detections", ",", "frame_idx", ",", "iou", ")", ":", "\n", "\n", "# Load image and generate detections.", "\n", "        ", "print", "(", "\"Processing frame %05d\"", "%", "frame_idx", ")", "\n", "frame_path", "=", "seq_info", "[", "'image_filenames'", "]", "[", "int", "(", "frame_idx", ")", "]", "\n", "detections", "=", "create_detections", "(", "detections", ",", "frame_idx", ")", "\n", "\n", "# Update tracker.", "\n", "before_time", "=", "time", ".", "time", "(", ")", "\n", "trackers", "=", "tracker", ".", "update", "(", "frame_path", ",", "checkpoint", ",", "context_amount", ",", "detections", ",", "iou", ")", "# tracking", "\n", "runtime", ".", "append", "(", "time", ".", "time", "(", ")", "-", "before_time", ")", "\n", "# Store results.", "\n", "for", "d", "in", "trackers", ":", "\n", "            ", "results", ".", "append", "(", "[", "\n", "frame_idx", ",", "d", "[", "4", "]", ",", "d", "[", "0", "]", ",", "d", "[", "1", "]", ",", "d", "[", "2", "]", ",", "d", "[", "3", "]", "]", ")", "\n", "\n", "# Update visualization.", "\n", "", "if", "display", ":", "\n", "            ", "image", "=", "cv2", ".", "imread", "(", "\n", "seq_info", "[", "\"image_filenames\"", "]", "[", "frame_idx", "]", ",", "cv2", ".", "IMREAD_COLOR", ")", "\n", "vis", ".", "set_image", "(", "image", ".", "copy", "(", ")", ")", "\n", "vis", ".", "draw_detections", "(", "detections", ")", "\n", "vis", ".", "draw_groundtruth", "(", "gt", "[", "np", ".", "where", "(", "gt", "[", ":", ",", "0", "]", "==", "frame_idx", ")", "[", "0", "]", ",", "1", "]", ",", "gt", "[", "np", ".", "where", "(", "gt", "[", ":", ",", "0", "]", "==", "frame_idx", ")", "[", "0", "]", ",", "2", ":", "6", "]", ")", "\n", "record_trks", "=", "[", "t", "for", "t", "in", "tracker", ".", "tracks", "if", "(", "t", ".", "is_tracked", "(", ")", "and", "t", ".", "time_since_update", "<=", "5", ")", "]", "\n", "vis", ".", "draw_trackers", "(", "record_trks", ")", "\n", "\n", "# Run tracker.", "\n", "", "", "if", "display", ":", "\n", "        ", "visualizer", "=", "visualization", ".", "Visualization", "(", "seq_info", ",", "detections", ",", "iou", ",", "update_ms", "=", "100", ")", "\n", "", "else", ":", "\n", "        ", "visualizer", "=", "visualization", ".", "NoVisualization", "(", "seq_info", ",", "detections", ",", "iou", ",", ")", "\n", "\n", "", "visualizer", ".", "run", "(", "frame_callback", ")", "\n", "\n", "# Store results.", "\n", "f", "=", "open", "(", "output_file", ",", "'w'", ")", "\n", "for", "row", "in", "results", ":", "\n", "        ", "print", "(", "'%d,%d,%.2f,%.2f,%.2f,%.2f,1,-1,-1,-1'", "%", "(", "\n", "row", "[", "0", "]", ",", "row", "[", "1", "]", ",", "row", "[", "2", "]", ",", "row", "[", "3", "]", ",", "row", "[", "4", "]", ",", "row", "[", "5", "]", ")", ",", "file", "=", "f", ")", "\n", "\n", "", "return", "sum", "(", "runtime", ")", "/", "len", "(", "runtime", ")", "*", "1000", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.image_viewer.ImageViewer.__init__": [[100, 112], ["numpy.zeros"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "update_ms", ",", "window_shape", "=", "(", "640", ",", "480", ")", ",", "caption", "=", "\"Figure 1\"", ")", ":", "\n", "        ", "self", ".", "_window_shape", "=", "window_shape", "\n", "self", ".", "_caption", "=", "caption", "\n", "self", ".", "_update_ms", "=", "update_ms", "\n", "self", ".", "_video_writer", "=", "None", "\n", "self", ".", "_user_fun", "=", "lambda", ":", "None", "\n", "self", ".", "_terminate", "=", "False", "\n", "\n", "self", ".", "image", "=", "np", ".", "zeros", "(", "self", ".", "_window_shape", "+", "(", "3", ",", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "self", ".", "_color", "=", "(", "0", ",", "0", ",", "0", ")", "\n", "self", ".", "text_color", "=", "(", "255", ",", "255", ",", "255", ")", "\n", "self", ".", "thickness", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.image_viewer.ImageViewer.color": [[117, 122], ["tuple", "len", "ValueError", "int"], "methods", ["None"], ["", "@", "color", ".", "setter", "\n", "def", "color", "(", "self", ",", "value", ")", ":", "\n", "        ", "if", "len", "(", "value", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"color must be tuple of 3\"", ")", "\n", "", "self", ".", "_color", "=", "tuple", "(", "int", "(", "c", ")", "for", "c", "in", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.image_viewer.ImageViewer.rectangle": [[123, 154], ["cv2.rectangle", "int", "int", "int", "int", "cv2.getTextSize", "cv2.rectangle", "cv2.putText"], "methods", ["home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.image_viewer.ImageViewer.rectangle", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.image_viewer.ImageViewer.rectangle"], ["", "def", "rectangle", "(", "self", ",", "x", ",", "y", ",", "w", ",", "h", ",", "label", "=", "None", ")", ":", "\n", "        ", "\"\"\"Draw a rectangle.\n\n        Parameters\n        ----------\n        x : float | int\n            Top left corner of the rectangle (x-axis).\n        y : float | int\n            Top let corner of the rectangle (y-axis).\n        w : float | int\n            Width of the rectangle.\n        h : float | int\n            Height of the rectangle.\n        label : Optional[str]\n            A text label that is placed at the top left corner of the\n            rectangle.\n\n        \"\"\"", "\n", "pt1", "=", "int", "(", "x", ")", ",", "int", "(", "y", ")", "\n", "pt2", "=", "int", "(", "x", "+", "w", ")", ",", "int", "(", "y", "+", "h", ")", "\n", "cv2", ".", "rectangle", "(", "self", ".", "image", ",", "pt1", ",", "pt2", ",", "self", ".", "_color", ",", "self", ".", "thickness", ")", "\n", "if", "label", "is", "not", "None", ":", "\n", "            ", "text_size", "=", "cv2", ".", "getTextSize", "(", "\n", "label", ",", "cv2", ".", "FONT_HERSHEY_PLAIN", ",", "3", ",", "self", ".", "thickness", ")", "\n", "\n", "center", "=", "pt1", "[", "0", "]", "+", "5", ",", "pt1", "[", "1", "]", "+", "5", "+", "text_size", "[", "0", "]", "[", "1", "]", "\n", "pt2", "=", "pt1", "[", "0", "]", "+", "10", "+", "text_size", "[", "0", "]", "[", "0", "]", ",", "pt1", "[", "1", "]", "+", "10", "+", "text_size", "[", "0", "]", "[", "1", "]", "\n", "cv2", ".", "rectangle", "(", "self", ".", "image", ",", "pt1", ",", "pt2", ",", "self", ".", "_color", ",", "-", "1", ")", "\n", "cv2", ".", "putText", "(", "self", ".", "image", ",", "label", ",", "center", ",", "cv2", ".", "FONT_HERSHEY_PLAIN", ",", "\n", "3", ",", "(", "255", ",", "255", ",", "255", ")", ",", "self", ".", "thickness", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.image_viewer.ImageViewer.circle": [[155, 184], ["int", "image_viewer.view_roi", "cv2.circle", "int", "int", "int", "int", "image_viewer.is_in_bounds", "int", "cv2.putText"], "methods", ["home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.image_viewer.view_roi", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.image_viewer.ImageViewer.circle", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.image_viewer.is_in_bounds"], ["", "", "def", "circle", "(", "self", ",", "x", ",", "y", ",", "radius", ",", "label", "=", "None", ")", ":", "\n", "        ", "\"\"\"Draw a circle.\n\n        Parameters\n        ----------\n        x : float | int\n            Center of the circle (x-axis).\n        y : float | int\n            Center of the circle (y-axis).\n        radius : float | int\n            Radius of the circle in pixels.\n        label : Optional[str]\n            A text label that is placed at the center of the circle.\n\n        \"\"\"", "\n", "image_size", "=", "int", "(", "radius", "+", "self", ".", "thickness", "+", "1.5", ")", "# actually half size", "\n", "roi", "=", "int", "(", "x", "-", "image_size", ")", ",", "int", "(", "y", "-", "image_size", ")", ",", "int", "(", "2", "*", "image_size", ")", ",", "int", "(", "2", "*", "image_size", ")", "\n", "if", "not", "is_in_bounds", "(", "self", ".", "image", ",", "roi", ")", ":", "\n", "            ", "return", "\n", "\n", "", "image", "=", "view_roi", "(", "self", ".", "image", ",", "roi", ")", "\n", "center", "=", "image", ".", "shape", "[", "1", "]", "//", "2", ",", "image", ".", "shape", "[", "0", "]", "//", "2", "\n", "cv2", ".", "circle", "(", "\n", "image", ",", "center", ",", "int", "(", "radius", "+", ".5", ")", ",", "self", ".", "_color", ",", "self", ".", "thickness", ")", "\n", "if", "label", "is", "not", "None", ":", "\n", "            ", "cv2", ".", "putText", "(", "\n", "self", ".", "image", ",", "label", ",", "center", ",", "cv2", ".", "FONT_HERSHEY_PLAIN", ",", "\n", "2", ",", "self", ".", "text_color", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.image_viewer.ImageViewer.gaussian": [[185, 211], ["numpy.linalg.eigh", "int", "cv2.ellipse", "vals.argsort", "numpy.sqrt", "int", "int", "int", "int", "cv2.putText", "numpy.arctan2"], "methods", ["None"], ["", "", "def", "gaussian", "(", "self", ",", "mean", ",", "covariance", ",", "label", "=", "None", ")", ":", "\n", "        ", "\"\"\"Draw 95% confidence ellipse of a 2-D Gaussian distribution.\n\n        Parameters\n        ----------\n        mean : array_like\n            The mean vector of the Gaussian distribution (ndim=1).\n        covariance : array_like\n            The 2x2 covariance matrix of the Gaussian distribution.\n        label : Optional[str]\n            A text label that is placed at the center of the ellipse.\n\n        \"\"\"", "\n", "# chi2inv(0.95, 2) = 5.9915", "\n", "vals", ",", "vecs", "=", "np", ".", "linalg", ".", "eigh", "(", "5.9915", "*", "covariance", ")", "\n", "indices", "=", "vals", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "\n", "vals", ",", "vecs", "=", "np", ".", "sqrt", "(", "vals", "[", "indices", "]", ")", ",", "vecs", "[", ":", ",", "indices", "]", "\n", "\n", "center", "=", "int", "(", "mean", "[", "0", "]", "+", ".5", ")", ",", "int", "(", "mean", "[", "1", "]", "+", ".5", ")", "\n", "axes", "=", "int", "(", "vals", "[", "0", "]", "+", ".5", ")", ",", "int", "(", "vals", "[", "1", "]", "+", ".5", ")", "\n", "angle", "=", "int", "(", "180.", "*", "np", ".", "arctan2", "(", "vecs", "[", "1", ",", "0", "]", ",", "vecs", "[", "0", ",", "0", "]", ")", "/", "np", ".", "pi", ")", "\n", "cv2", ".", "ellipse", "(", "\n", "self", ".", "image", ",", "center", ",", "axes", ",", "angle", ",", "0", ",", "360", ",", "self", ".", "_color", ",", "2", ")", "\n", "if", "label", "is", "not", "None", ":", "\n", "            ", "cv2", ".", "putText", "(", "self", ".", "image", ",", "label", ",", "center", ",", "cv2", ".", "FONT_HERSHEY_PLAIN", ",", "\n", "2", ",", "self", ".", "text_color", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.image_viewer.ImageViewer.annotate": [[212, 227], ["cv2.putText", "int", "int"], "methods", ["None"], ["", "", "def", "annotate", "(", "self", ",", "x", ",", "y", ",", "text", ")", ":", "\n", "        ", "\"\"\"Draws a text string at a given location.\n\n        Parameters\n        ----------\n        x : int | float\n            Bottom-left corner of the text in the image (x-axis).\n        y : int | float\n            Bottom-left corner of the text in the image (y-axis).\n        text : str\n            The text to be drawn.\n\n        \"\"\"", "\n", "cv2", ".", "putText", "(", "self", ".", "image", ",", "text", ",", "(", "int", "(", "x", ")", ",", "int", "(", "y", ")", ")", ",", "cv2", ".", "FONT_HERSHEY_PLAIN", ",", "\n", "2", ",", "self", ".", "text_color", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.image_viewer.ImageViewer.colored_points": [[228, 256], ["numpy.logical_and.reduce", "numpy.repeat().reshape", "len", "numpy.repeat", "len"], "methods", ["None"], ["", "def", "colored_points", "(", "self", ",", "points", ",", "colors", "=", "None", ",", "skip_index_check", "=", "False", ")", ":", "\n", "        ", "\"\"\"Draw a collection of points.\n\n        The point size is fixed to 1.\n\n        Parameters\n        ----------\n        points : ndarray\n            The Nx2 array of image locations, where the first dimension is\n            the x-coordinate and the second dimension is the y-coordinate.\n        colors : Optional[ndarray]\n            The Nx3 array of colors (dtype=np.uint8). If None, the current\n            color attribute is used.\n        skip_index_check : Optional[bool]\n            If True, index range checks are skipped. This is faster, but\n            requires all points to lie within the image dimensions.\n\n        \"\"\"", "\n", "if", "not", "skip_index_check", ":", "\n", "            ", "cond1", ",", "cond2", "=", "points", "[", ":", ",", "0", "]", ">=", "0", ",", "points", "[", ":", ",", "0", "]", "<", "480", "\n", "cond3", ",", "cond4", "=", "points", "[", ":", ",", "1", "]", ">=", "0", ",", "points", "[", ":", ",", "1", "]", "<", "640", "\n", "indices", "=", "np", ".", "logical_and", ".", "reduce", "(", "(", "cond1", ",", "cond2", ",", "cond3", ",", "cond4", ")", ")", "\n", "points", "=", "points", "[", "indices", ",", ":", "]", "\n", "", "if", "colors", "is", "None", ":", "\n", "            ", "colors", "=", "np", ".", "repeat", "(", "\n", "self", ".", "_color", ",", "len", "(", "points", ")", ")", ".", "reshape", "(", "3", ",", "len", "(", "points", ")", ")", ".", "T", "\n", "", "indices", "=", "(", "points", "+", ".5", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "self", ".", "image", "[", "indices", "[", ":", ",", "1", "]", ",", "indices", "[", ":", ",", "0", "]", ",", ":", "]", "=", "colors", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.image_viewer.ImageViewer.enable_videowriter": [[257, 278], ["cv2.VideoWriter_fourcc", "cv2.VideoWriter", "int"], "methods", ["None"], ["", "def", "enable_videowriter", "(", "self", ",", "output_filename", ",", "fourcc_string", "=", "\"MJPG\"", ",", "\n", "fps", "=", "None", ")", ":", "\n", "        ", "\"\"\" Write images to video file.\n\n        Parameters\n        ----------\n        output_filename : str\n            Output filename.\n        fourcc_string : str\n            The OpenCV FOURCC code that defines the video codec (check OpenCV\n            documentation for more information).\n        fps : Optional[float]\n            Frames per second. If None, configured according to current\n            parameters.\n\n        \"\"\"", "\n", "fourcc", "=", "cv2", ".", "VideoWriter_fourcc", "(", "*", "fourcc_string", ")", "\n", "if", "fps", "is", "None", ":", "\n", "            ", "fps", "=", "int", "(", "1000.", "/", "self", ".", "_update_ms", ")", "\n", "", "self", ".", "_video_writer", "=", "cv2", ".", "VideoWriter", "(", "\n", "output_filename", ",", "fourcc", ",", "fps", ",", "self", ".", "_window_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.image_viewer.ImageViewer.disable_videowriter": [[279, 283], ["None"], "methods", ["None"], ["", "def", "disable_videowriter", "(", "self", ")", ":", "\n", "        ", "\"\"\" Disable writing videos.\n        \"\"\"", "\n", "self", ".", "_video_writer", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.image_viewer.ImageViewer.run": [[284, 333], ["cv2.destroyWindow", "cv2.waitKey", "cv2.imshow", "time.time", "time.time", "max", "cv2.imshow", "cv2.waitKey", "int", "cv2.resize", "print", "image_viewer.ImageViewer._user_fun", "image_viewer.ImageViewer._video_writer.write", "print", "cv2.resize", "print", "str", "image_viewer.ImageViewer._user_fun"], "methods", ["home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.misc_utils.Tee.write"], ["", "def", "run", "(", "self", ",", "update_fun", "=", "None", ")", ":", "\n", "        ", "\"\"\"Start the image viewer.\n\n        This method blocks until the user requests to close the window.\n\n        Parameters\n        ----------\n        update_fun : Optional[Callable[] -> None]\n            An optional callable that is invoked at each frame. May be used\n            to play an animation/a video sequence.\n\n        \"\"\"", "\n", "if", "update_fun", "is", "not", "None", ":", "\n", "            ", "self", ".", "_user_fun", "=", "update_fun", "\n", "\n", "", "self", ".", "_terminate", ",", "is_paused", "=", "False", ",", "False", "\n", "# print(\"ImageViewer is paused, press space to start.\")", "\n", "while", "not", "self", ".", "_terminate", ":", "\n", "            ", "t0", "=", "time", ".", "time", "(", ")", "\n", "if", "not", "is_paused", ":", "\n", "                ", "self", ".", "_terminate", "=", "not", "self", ".", "_user_fun", "(", ")", "\n", "if", "self", ".", "_video_writer", "is", "not", "None", ":", "\n", "                    ", "self", ".", "_video_writer", ".", "write", "(", "\n", "cv2", ".", "resize", "(", "self", ".", "image", ",", "self", ".", "_window_shape", ")", ")", "\n", "", "", "t1", "=", "time", ".", "time", "(", ")", "\n", "remaining_time", "=", "max", "(", "1", ",", "int", "(", "self", ".", "_update_ms", "-", "1e3", "*", "(", "t1", "-", "t0", ")", ")", ")", "\n", "cv2", ".", "imshow", "(", "\n", "self", ".", "_caption", ",", "cv2", ".", "resize", "(", "self", ".", "image", ",", "self", ".", "_window_shape", "[", ":", "2", "]", ")", ")", "\n", "key", "=", "cv2", ".", "waitKey", "(", "remaining_time", ")", "\n", "if", "key", "&", "255", "==", "27", ":", "# ESC", "\n", "                ", "print", "(", "\"terminating\"", ")", "\n", "self", ".", "_terminate", "=", "True", "\n", "", "elif", "key", "&", "255", "==", "32", ":", "# ' '", "\n", "                ", "print", "(", "\"toggeling pause: \"", "+", "str", "(", "not", "is_paused", ")", ")", "\n", "is_paused", "=", "not", "is_paused", "\n", "", "elif", "key", "&", "255", "==", "115", ":", "# 's'", "\n", "                ", "print", "(", "\"stepping\"", ")", "\n", "self", ".", "_terminate", "=", "not", "self", ".", "_user_fun", "(", ")", "\n", "is_paused", "=", "True", "\n", "\n", "# Due to a bug in OpenCV we must call imshow after destroying the", "\n", "# window. This will make the window appear again as soon as waitKey", "\n", "# is called.", "\n", "#", "\n", "# see https://github.com/Itseez/opencv/issues/4535", "\n", "", "", "self", ".", "image", "[", ":", "]", "=", "0", "\n", "cv2", ".", "destroyWindow", "(", "self", ".", "_caption", ")", "\n", "cv2", ".", "waitKey", "(", "1", ")", "\n", "cv2", ".", "imshow", "(", "self", ".", "_caption", ",", "self", ".", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.image_viewer.ImageViewer.stop": [[334, 345], ["None"], "methods", ["None"], ["", "def", "stop", "(", "self", ")", ":", "\n", "        ", "\"\"\"Stop the control loop.\n\n        After calling this method, the viewer will stop execution before the\n        next frame and hand over control flow to the user.\n\n        Parameters\n        ----------\n\n        \"\"\"", "\n", "self", ".", "_terminate", "=", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.image_viewer.is_in_bounds": [[9, 31], ["None"], "function", ["None"], ["def", "is_in_bounds", "(", "mat", ",", "roi", ")", ":", "\n", "    ", "\"\"\"Check if ROI is fully contained in the image.\n\n    Parameters\n    ----------\n    mat : ndarray\n        An ndarray of ndim>=2.\n    roi : (int, int, int, int)\n        Region of interest (x, y, width, height) where (x, y) is the top-left\n        corner.\n\n    Returns\n    -------\n    bool\n        Returns true if the ROI is contain in mat.\n\n    \"\"\"", "\n", "if", "roi", "[", "0", "]", "<", "0", "or", "roi", "[", "0", "]", "+", "roi", "[", "2", "]", ">=", "mat", ".", "shape", "[", "1", "]", ":", "\n", "        ", "return", "False", "\n", "", "if", "roi", "[", "1", "]", "<", "0", "or", "roi", "[", "1", "]", "+", "roi", "[", "3", "]", ">=", "mat", ".", "shape", "[", "0", "]", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.image_viewer.view_roi": [[33, 58], ["None"], "function", ["None"], ["", "def", "view_roi", "(", "mat", ",", "roi", ")", ":", "\n", "    ", "\"\"\"Get sub-array.\n\n    The ROI must be valid, i.e., fully contained in the image.\n\n    Parameters\n    ----------\n    mat : ndarray\n        An ndarray of ndim=2 or ndim=3.\n    roi : (int, int, int, int)\n        Region of interest (x, y, width, height) where (x, y) is the top-left\n        corner.\n\n    Returns\n    -------\n    ndarray\n        A view of the roi.\n\n    \"\"\"", "\n", "sx", ",", "ex", "=", "roi", "[", "0", "]", ",", "roi", "[", "0", "]", "+", "roi", "[", "2", "]", "\n", "sy", ",", "ey", "=", "roi", "[", "1", "]", ",", "roi", "[", "1", "]", "+", "roi", "[", "3", "]", "\n", "if", "mat", ".", "ndim", "==", "2", ":", "\n", "        ", "return", "mat", "[", "sy", ":", "ey", ",", "sx", ":", "ex", "]", "\n", "", "else", ":", "\n", "        ", "return", "mat", "[", "sy", ":", "ey", ",", "sx", ":", "ex", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.visualization.NoVisualization.__init__": [[62, 67], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "seq_info", ",", "detections", ",", "iou", ")", ":", "\n", "        ", "self", ".", "frame_idx", "=", "seq_info", "[", "\"min_frame_idx\"", "]", "\n", "self", ".", "last_idx", "=", "seq_info", "[", "\"max_frame_idx\"", "]", "\n", "self", ".", "detections", "=", "detections", "\n", "self", ".", "iou", "=", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.visualization.NoVisualization.set_image": [[68, 70], ["None"], "methods", ["None"], ["", "def", "set_image", "(", "self", ",", "image", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.visualization.NoVisualization.draw_groundtruth": [[71, 73], ["None"], "methods", ["None"], ["", "def", "draw_groundtruth", "(", "self", ",", "track_ids", ",", "boxes", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.visualization.NoVisualization.draw_detections": [[74, 76], ["None"], "methods", ["None"], ["", "def", "draw_detections", "(", "self", ",", "detections", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.visualization.NoVisualization.draw_trackers": [[77, 79], ["None"], "methods", ["None"], ["", "def", "draw_trackers", "(", "self", ",", "trackers", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.visualization.NoVisualization.run": [[80, 87], ["frame_callback"], "methods", ["home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.show_results.frame_callback"], ["", "def", "run", "(", "self", ",", "frame_callback", ")", ":", "\n", "# while self.frame_idx <= self.last_idx:", "\n", "#     frame_callback(self, self.frame_idx, self.detections)", "\n", "#     self.frame_idx += 1", "\n", "        ", "while", "self", ".", "frame_idx", "<=", "self", ".", "last_idx", ":", "\n", "            ", "frame_callback", "(", "self", ",", "self", ".", "detections", ",", "self", ".", "frame_idx", ",", "self", ".", "iou", ")", "\n", "self", ".", "frame_idx", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.visualization.Visualization.__init__": [[93, 104], ["image_viewer.ImageViewer", "float", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "seq_info", ",", "detections", ",", "iou", ",", "update_ms", ")", ":", "\n", "        ", "image_shape", "=", "seq_info", "[", "\"image_size\"", "]", "[", ":", ":", "-", "1", "]", "\n", "aspect_ratio", "=", "float", "(", "image_shape", "[", "1", "]", ")", "/", "image_shape", "[", "0", "]", "\n", "image_shape", "=", "1024", ",", "int", "(", "aspect_ratio", "*", "1024", ")", "\n", "self", ".", "viewer", "=", "ImageViewer", "(", "\n", "update_ms", ",", "image_shape", ",", "\"Figure %s\"", "%", "seq_info", "[", "\"sequence_name\"", "]", ")", "\n", "self", ".", "viewer", ".", "thickness", "=", "2", "\n", "self", ".", "frame_idx", "=", "seq_info", "[", "\"min_frame_idx\"", "]", "\n", "self", ".", "last_idx", "=", "seq_info", "[", "\"max_frame_idx\"", "]", "\n", "self", ".", "detections", "=", "detections", "\n", "self", ".", "iou", "=", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.visualization.Visualization.run": [[105, 107], ["visualization.Visualization.viewer.run", "visualization.Visualization._update_fun"], "methods", ["home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.show_results.Visualization.run", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.show_results.Visualization._update_fun"], ["", "def", "run", "(", "self", ",", "frame_callback", ")", ":", "\n", "        ", "self", ".", "viewer", ".", "run", "(", "lambda", ":", "self", ".", "_update_fun", "(", "frame_callback", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.visualization.Visualization._update_fun": [[108, 114], ["frame_callback"], "methods", ["home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.show_results.frame_callback"], ["", "def", "_update_fun", "(", "self", ",", "frame_callback", ")", ":", "\n", "        ", "if", "self", ".", "frame_idx", ">", "self", ".", "last_idx", ":", "\n", "            ", "return", "False", "# Terminate", "\n", "", "frame_callback", "(", "self", ",", "self", ".", "detections", ",", "self", ".", "frame_idx", ",", "self", ".", "iou", ")", "\n", "self", ".", "frame_idx", "+=", "1", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.visualization.Visualization.set_image": [[115, 117], ["None"], "methods", ["None"], ["", "def", "set_image", "(", "self", ",", "image", ")", ":", "\n", "        ", "self", ".", "viewer", ".", "image", "=", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.visualization.Visualization.draw_groundtruth": [[118, 123], ["zip", "visualization.create_unique_color_uchar", "visualization.Visualization.viewer.rectangle", "box.astype", "str"], "methods", ["home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.show_results.create_unique_color_uchar", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.image_viewer.ImageViewer.rectangle"], ["", "def", "draw_groundtruth", "(", "self", ",", "track_ids", ",", "boxes", ")", ":", "\n", "        ", "self", ".", "viewer", ".", "thickness", "=", "2", "\n", "for", "track_id", ",", "box", "in", "zip", "(", "track_ids", ",", "boxes", ")", ":", "\n", "            ", "self", ".", "viewer", ".", "color", "=", "create_unique_color_uchar", "(", "track_id", ")", "\n", "self", ".", "viewer", ".", "rectangle", "(", "*", "box", ".", "astype", "(", "np", ".", "int", ")", ",", "label", "=", "str", "(", "track_id", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.visualization.Visualization.draw_detections": [[124, 129], ["enumerate", "visualization.Visualization.viewer.rectangle"], "methods", ["home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.image_viewer.ImageViewer.rectangle"], ["", "", "def", "draw_detections", "(", "self", ",", "detections", ")", ":", "\n", "        ", "self", ".", "viewer", ".", "thickness", "=", "2", "\n", "self", ".", "viewer", ".", "color", "=", "0", ",", "0", ",", "255", "\n", "for", "i", ",", "detection", "in", "enumerate", "(", "detections", ")", ":", "\n", "            ", "self", ".", "viewer", ".", "rectangle", "(", "*", "detection", ".", "tlwh", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.visualization.Visualization.draw_trackers": [[131, 137], ["visualization.create_unique_color_uchar", "visualization.Visualization.viewer.rectangle", "track.track_bbox.astype", "str"], "methods", ["home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.show_results.create_unique_color_uchar", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.image_viewer.ImageViewer.rectangle"], ["", "", "def", "draw_trackers", "(", "self", ",", "tracks", ")", ":", "\n", "        ", "self", ".", "viewer", ".", "thickness", "=", "2", "\n", "for", "track", "in", "tracks", ":", "\n", "            ", "self", ".", "viewer", ".", "color", "=", "create_unique_color_uchar", "(", "track", ".", "track_id", ")", "\n", "self", ".", "viewer", ".", "rectangle", "(", "\n", "*", "track", ".", "track_bbox", ".", "astype", "(", "np", ".", "int", ")", ",", "label", "=", "str", "(", "track", ".", "track_id", ")", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.visualization.create_unique_color_float": [[7, 30], ["colorsys.hsv_to_rgb", "int"], "function", ["None"], ["def", "create_unique_color_float", "(", "tag", ",", "hue_step", "=", "0.41", ")", ":", "\n", "    ", "\"\"\"Create a unique RGB color code for a given track id (tag).\n\n    The color code is generated in HSV color space by moving along the\n    hue angle and gradually changing the saturation.\n\n    Parameters\n    ----------\n    tag : int\n        The unique target identifying tag.\n    hue_step : float\n        Difference between two neighboring color codes in HSV space (more\n        specifically, the distance in hue channel).\n\n    Returns\n    -------\n    (float, float, float)\n        RGB color code in range [0, 1]\n\n    \"\"\"", "\n", "h", ",", "v", "=", "(", "tag", "*", "hue_step", ")", "%", "1", ",", "1.", "-", "(", "int", "(", "tag", "*", "hue_step", ")", "%", "4", ")", "/", "5.", "\n", "r", ",", "g", ",", "b", "=", "colorsys", ".", "hsv_to_rgb", "(", "h", ",", "1.", ",", "v", ")", "\n", "return", "r", ",", "g", ",", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.visualization.create_unique_color_uchar": [[32, 54], ["visualization.create_unique_color_float", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.show_results.create_unique_color_float"], ["", "def", "create_unique_color_uchar", "(", "tag", ",", "hue_step", "=", "0.41", ")", ":", "\n", "    ", "\"\"\"Create a unique RGB color code for a given track id (tag).\n\n    The color code is generated in HSV color space by moving along the\n    hue angle and gradually changing the saturation.\n\n    Parameters\n    ----------\n    tag : int\n        The unique target identifying tag.\n    hue_step : float\n        Difference between two neighboring color codes in HSV space (more\n        specifically, the distance in hue channel).\n\n    Returns\n    -------\n    (int, int, int)\n        RGB color code in range [0, 255]\n\n    \"\"\"", "\n", "r", ",", "g", ",", "b", "=", "create_unique_color_float", "(", "tag", ",", "hue_step", ")", "\n", "return", "int", "(", "255", "*", "r", ")", ",", "int", "(", "255", "*", "g", ")", ",", "int", "(", "255", "*", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.show_results.Track.__init__": [[10, 13], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "track_bbox", ",", "track_id", ")", ":", "\n", "        ", "self", ".", "track_bbox", "=", "track_bbox", "\n", "self", ".", "track_id", "=", "track_id", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.show_results.Visualization.__init__": [[172, 184], ["image_viewer.ImageViewer", "float", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "seq_info", ",", "update_ms", ")", ":", "\n", "        ", "image_shape", "=", "seq_info", "[", "\"image_size\"", "]", "[", ":", ":", "-", "1", "]", "\n", "aspect_ratio", "=", "float", "(", "image_shape", "[", "1", "]", ")", "/", "image_shape", "[", "0", "]", "\n", "image_shape", "=", "1024", ",", "int", "(", "aspect_ratio", "*", "1024", ")", "\n", "if", "update_ms", "is", "None", ":", "\n", "            ", "update_ms", "=", "seq_info", "[", "\"update_ms\"", "]", "\n", "", "self", ".", "viewer", "=", "ImageViewer", "(", "\n", "update_ms", ",", "image_shape", ",", "\"Figure %s\"", "%", "seq_info", "[", "\"sequence_name\"", "]", ")", "\n", "self", ".", "viewer", ".", "thickness", "=", "2", "\n", "self", ".", "frame_idx", "=", "seq_info", "[", "\"min_frame_idx\"", "]", "\n", "self", ".", "last_idx", "=", "seq_info", "[", "\"max_frame_idx\"", "]", "\n", "self", ".", "results", "=", "seq_info", "[", "\"results\"", "]", "\n", "# self.detections = detections", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.show_results.Visualization.run": [[187, 189], ["show_results.Visualization.viewer.run", "show_results.Visualization._update_fun"], "methods", ["home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.show_results.Visualization.run", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.show_results.Visualization._update_fun"], ["", "def", "run", "(", "self", ",", "frame_callback", ")", ":", "\n", "        ", "self", ".", "viewer", ".", "run", "(", "lambda", ":", "self", ".", "_update_fun", "(", "frame_callback", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.show_results.Visualization._update_fun": [[190, 196], ["show_results.frame_callback"], "methods", ["home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.show_results.frame_callback"], ["", "def", "_update_fun", "(", "self", ",", "frame_callback", ")", ":", "\n", "        ", "if", "self", ".", "frame_idx", ">", "self", ".", "last_idx", ":", "\n", "            ", "return", "False", "# Terminate", "\n", "", "frame_callback", "(", "self", ",", "self", ".", "frame_idx", ",", "self", ".", "results", ")", "\n", "self", ".", "frame_idx", "+=", "1", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.show_results.Visualization.set_image": [[197, 199], ["None"], "methods", ["None"], ["", "def", "set_image", "(", "self", ",", "image", ")", ":", "\n", "        ", "self", ".", "viewer", ".", "image", "=", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.show_results.Visualization.draw_groundtruth": [[200, 205], ["zip", "show_results.create_unique_color_uchar", "show_results.Visualization.viewer.rectangle", "box.astype", "str"], "methods", ["home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.show_results.create_unique_color_uchar", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.image_viewer.ImageViewer.rectangle"], ["", "def", "draw_groundtruth", "(", "self", ",", "track_ids", ",", "boxes", ")", ":", "\n", "        ", "self", ".", "viewer", ".", "thickness", "=", "2", "\n", "for", "track_id", ",", "box", "in", "zip", "(", "track_ids", ",", "boxes", ")", ":", "\n", "            ", "self", ".", "viewer", ".", "color", "=", "create_unique_color_uchar", "(", "track_id", ")", "\n", "self", ".", "viewer", ".", "rectangle", "(", "*", "box", ".", "astype", "(", "np", ".", "int", ")", ",", "label", "=", "str", "(", "track_id", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.show_results.Visualization.draw_trackers": [[212, 218], ["show_results.create_unique_color_uchar", "show_results.Visualization.viewer.rectangle", "track.track_bbox.astype", "str"], "methods", ["home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.show_results.create_unique_color_uchar", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.image_viewer.ImageViewer.rectangle"], ["", "", "def", "draw_trackers", "(", "self", ",", "tracks", ")", ":", "\n", "        ", "self", ".", "viewer", ".", "thickness", "=", "5", "\n", "for", "track", "in", "tracks", ":", "\n", "            ", "self", ".", "viewer", ".", "color", "=", "create_unique_color_uchar", "(", "track", ".", "track_id", ")", "\n", "self", ".", "viewer", ".", "rectangle", "(", "\n", "*", "track", ".", "track_bbox", ".", "astype", "(", "np", ".", "int", ")", ",", "label", "=", "str", "(", "track", ".", "track_id", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.show_results.gather_sequence_info": [[15, 99], ["os.path.join", "os.path.join", "os.path.join", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.join", "os.path.exists", "int", "os.path.join", "numpy.loadtxt", "numpy.loadtxt", "numpy.loadtxt", "len", "cv2.imread", "len", "min", "max", "int", "int", "os.path.basename", "os.listdir", "os.path.basename", "next", "image_filenames.keys", "image_filenames.keys", "detections[].min", "detections[].max", "open", "dict", "int", "os.path.splitext", "iter", "l.split", "image_filenames.values", "f.read().splitlines", "isinstance", "f.read", "len"], "function", ["None"], ["", "", "def", "gather_sequence_info", "(", "sequence_dir", ",", "det_dir", ",", "result_dir", ")", ":", "\n", "    ", "\"\"\"Gather sequence information, such as image filenames, detections,\n    groundtruth (if available).\n\n    Parameters\n    ----------\n    sequence_dir : str\n        Path to the MOTChallenge sequence directory.\n    detection_file : str\n        Path to the detection file.\n\n    Returns\n    -------\n    Dict\n        A dictionary of the following sequence information:\n\n        * sequence_name: Name of the sequence\n        * image_filenames: A dictionary that maps frame indices to image\n          filenames.\n        * detections: A numpy array of detections in MOTChallenge format.\n        * groundtruth: A numpy array of ground truth in MOTChallenge format.\n        * image_size: Image size (height, width).\n        * min_frame_idx: Index of the first frame.\n        * max_frame_idx: Index of the last frame.\n\n    \"\"\"", "\n", "image_dir", "=", "os", ".", "path", ".", "join", "(", "sequence_dir", ",", "\"img1\"", ")", "\n", "image_filenames", "=", "{", "\n", "int", "(", "os", ".", "path", ".", "splitext", "(", "f", ")", "[", "0", "]", ")", ":", "os", ".", "path", ".", "join", "(", "image_dir", ",", "f", ")", "\n", "for", "f", "in", "os", ".", "listdir", "(", "image_dir", ")", "}", "\n", "groundtruth_file", "=", "os", ".", "path", ".", "join", "(", "sequence_dir", ",", "\"gt/gt.txt\"", ")", "\n", "\n", "# detection_dir = os.path.join(sequence_dir, \"det\", \"det.txt\")", "\n", "detection_dir", "=", "os", ".", "path", ".", "join", "(", "det_dir", ",", "'%s.txt'", "%", "os", ".", "path", ".", "basename", "(", "sequence_dir", ")", ")", "\n", "# print(detection_dir)", "\n", "if", "os", ".", "path", ".", "exists", "(", "detection_dir", ")", ":", "\n", "        ", "detections", "=", "np", ".", "loadtxt", "(", "detection_dir", ",", "delimiter", "=", "','", ")", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "result_dir", ")", ":", "\n", "        ", "results", "=", "np", ".", "loadtxt", "(", "result_dir", ",", "delimiter", "=", "','", ")", "\n", "# results = results[results[:, 6] == 1.0, :]", "\n", "# index = (results[:,-1]).tolist().index(min(results[:,-1]))", "\n", "# print(results[index])", "\n", "", "groundtruth", "=", "None", "\n", "if", "os", ".", "path", ".", "exists", "(", "groundtruth_file", ")", ":", "\n", "        ", "groundtruth", "=", "np", ".", "loadtxt", "(", "groundtruth_file", ",", "delimiter", "=", "','", ")", "\n", "\n", "", "if", "len", "(", "image_filenames", ")", ">", "0", ":", "\n", "        ", "image", "=", "cv2", ".", "imread", "(", "next", "(", "iter", "(", "image_filenames", ".", "values", "(", ")", ")", ")", ",", "\n", "cv2", ".", "IMREAD_GRAYSCALE", ")", "\n", "image_size", "=", "image", ".", "shape", "\n", "", "else", ":", "\n", "        ", "image_size", "=", "None", "\n", "\n", "", "if", "len", "(", "image_filenames", ")", ">", "0", ":", "\n", "        ", "min_frame_idx", "=", "min", "(", "image_filenames", ".", "keys", "(", ")", ")", "\n", "max_frame_idx", "=", "max", "(", "image_filenames", ".", "keys", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "min_frame_idx", "=", "int", "(", "detections", "[", ":", ",", "0", "]", ".", "min", "(", ")", ")", "\n", "max_frame_idx", "=", "int", "(", "detections", "[", ":", ",", "0", "]", ".", "max", "(", ")", ")", "\n", "\n", "", "info_filename", "=", "os", ".", "path", ".", "join", "(", "sequence_dir", ",", "\"seqinfo.ini\"", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "info_filename", ")", ":", "\n", "        ", "with", "open", "(", "info_filename", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "line_splits", "=", "[", "l", ".", "split", "(", "'='", ")", "for", "l", "in", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "[", "1", ":", "]", "]", "\n", "info_dict", "=", "dict", "(", "\n", "s", "for", "s", "in", "line_splits", "if", "isinstance", "(", "s", ",", "list", ")", "and", "len", "(", "s", ")", "==", "2", ")", "\n", "\n", "", "update_ms", "=", "1000", "/", "int", "(", "info_dict", "[", "\"frameRate\"", "]", ")", "\n", "", "else", ":", "\n", "        ", "update_ms", "=", "None", "\n", "\n", "# feature_dim = detections.shape[1] - 10 if detections is not None else 0", "\n", "", "seq_info", "=", "{", "\n", "\"sequence_name\"", ":", "os", ".", "path", ".", "basename", "(", "sequence_dir", ")", ",", "\n", "\"image_filenames\"", ":", "image_filenames", ",", "\n", "\"detections\"", ":", "detections", ",", "\n", "\"groundtruth\"", ":", "groundtruth", ",", "\n", "\"image_size\"", ":", "image_size", ",", "\n", "\"min_frame_idx\"", ":", "min_frame_idx", ",", "\n", "\"max_frame_idx\"", ":", "max_frame_idx", ",", "\n", "\"update_ms\"", ":", "update_ms", ",", "\n", "\"results\"", ":", "results", "\n", "}", "\n", "return", "seq_info", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.show_results.frame_callback": [[101, 116], ["print", "results[].astype", "cv2.imread", "vis.set_image", "vis.draw_trackers", "record_trks.append", "cv2.imread.copy", "int", "show_results.Track"], "function", ["home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.show_results.Visualization.set_image", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.show_results.Visualization.draw_trackers"], ["", "def", "frame_callback", "(", "vis", ",", "frame_idx", ",", "results", ")", ":", "# \u8ddf\u8e2a\u8fc7\u7a0b", "\n", "\n", "    ", "print", "(", "\"Processing frame %05d\"", "%", "frame_idx", ")", "\n", "# if frame_idx>300:", "\n", "frame_indices", "=", "results", "[", ":", ",", "0", "]", ".", "astype", "(", "np", ".", "int", ")", "\n", "mask", "=", "frame_indices", "==", "frame_idx", "\n", "record_trks", "=", "[", "]", "\n", "for", "row", "in", "results", "[", "mask", "]", ":", "\n", "# bbox, confidence = row[2:6], row[6]", "\n", "        ", "bbox", ",", "id", "=", "row", "[", "2", ":", "6", "]", ",", "int", "(", "row", "[", "1", "]", ")", "\n", "record_trks", ".", "append", "(", "Track", "(", "bbox", ",", "id", ")", ")", "\n", "", "image", "=", "cv2", ".", "imread", "(", "\n", "seq_info", "[", "\"image_filenames\"", "]", "[", "frame_idx", "]", ",", "cv2", ".", "IMREAD_COLOR", ")", "\n", "vis", ".", "set_image", "(", "image", ".", "copy", "(", ")", ")", "\n", "vis", ".", "draw_trackers", "(", "record_trks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.show_results.create_unique_color_float": [[118, 141], ["colorsys.hsv_to_rgb", "int"], "function", ["None"], ["", "def", "create_unique_color_float", "(", "tag", ",", "hue_step", "=", "0.41", ")", ":", "\n", "    ", "\"\"\"Create a unique RGB color code for a given track id (tag).\n\n    The color code is generated in HSV color space by moving along the\n    hue angle and gradually changing the saturation.\n\n    Parameters\n    ----------\n    tag : int\n        The unique target identifying tag.\n    hue_step : float\n        Difference between two neighboring color codes in HSV space (more\n        specifically, the distance in hue channel).\n\n    Returns\n    -------\n    (float, float, float)\n        RGB color code in range [0, 1]\n\n    \"\"\"", "\n", "h", ",", "v", "=", "(", "tag", "*", "hue_step", ")", "%", "1", ",", "1.", "-", "(", "int", "(", "tag", "*", "hue_step", ")", "%", "4", ")", "/", "5.", "\n", "r", ",", "g", ",", "b", "=", "colorsys", ".", "hsv_to_rgb", "(", "h", ",", "1.", ",", "v", ")", "\n", "return", "r", ",", "g", ",", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.show_results.create_unique_color_uchar": [[143, 165], ["show_results.create_unique_color_float", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.show_results.create_unique_color_float"], ["", "def", "create_unique_color_uchar", "(", "tag", ",", "hue_step", "=", "0.41", ")", ":", "\n", "    ", "\"\"\"Create a unique RGB color code for a given track id (tag).\n\n    The color code is generated in HSV color space by moving along the\n    hue angle and gradually changing the saturation.\n\n    Parameters\n    ----------\n    tag : int\n        The unique target identifying tag.\n    hue_step : float\n        Difference between two neighboring color codes in HSV space (more\n        specifically, the distance in hue channel).\n\n    Returns\n    -------\n    (int, int, int)\n        RGB color code in range [0, 255]\n\n    \"\"\"", "\n", "r", ",", "g", ",", "b", "=", "create_unique_color_float", "(", "tag", ",", "hue_step", ")", "\n", "return", "int", "(", "255", "*", "r", ")", ",", "int", "(", "255", "*", "g", ")", ",", "int", "(", "255", "*", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.show_results.parse_args": [[220, 237], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.show_results.parse_args"], ["", "", "", "def", "parse_args", "(", ")", ":", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Siamese Tracking\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--sequence_dir\"", ",", "help", "=", "\"Path to the MOTChallenge sequence directory.\"", ",", "\n", "default", "=", "None", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--result_file\"", ",", "help", "=", "\"Tracking output in MOTChallenge file format.\"", ",", "\n", "default", "=", "None", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--detection_file\"", ",", "help", "=", "\"Path to custom detections (optional).\"", ",", "\n", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--update_ms\"", ",", "help", "=", "\"Time between consecutive frames in milliseconds. \"", "\n", "\"Defaults to the frame_rate specified in seqinfo.ini, if available.\"", ",", "\n", "default", "=", "None", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.tracker.detection.Detection.__init__": [[28, 31], ["numpy.asarray", "float"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "tlwh", ",", "confidence", ")", ":", "\n", "        ", "self", ".", "tlwh", "=", "np", ".", "asarray", "(", "tlwh", ",", "dtype", "=", "np", ".", "float", ")", "\n", "self", ".", "confidence", "=", "float", "(", "confidence", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.tracker.detection.Detection.to_tlbr": [[32, 39], ["detection.Detection.tlwh.copy"], "methods", ["None"], ["", "def", "to_tlbr", "(", "self", ")", ":", "\n", "        ", "\"\"\"Convert bounding box to format `(min x, min y, max x, max y)`, i.e.,\n        `(top left, bottom right)`.\n        \"\"\"", "\n", "ret", "=", "self", ".", "tlwh", ".", "copy", "(", ")", "\n", "ret", "[", "2", ":", "]", "+=", "ret", "[", ":", "2", "]", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.tracker.detection.Detection.to_xyah": [[40, 48], ["detection.Detection.tlwh.copy"], "methods", ["None"], ["", "def", "to_xyah", "(", "self", ")", ":", "\n", "        ", "\"\"\"Convert bounding box to format `(center x, center y, aspect ratio,\n        height)`, where the aspect ratio is `width / height`.\n        \"\"\"", "\n", "ret", "=", "self", ".", "tlwh", ".", "copy", "(", ")", "\n", "ret", "[", ":", "2", "]", "+=", "ret", "[", "2", ":", "]", "/", "2", "\n", "ret", "[", "2", "]", "/=", "ret", "[", "3", "]", "\n", "return", "ret", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.tracker.mot_tracker.MOT_Tracker.__init__": [[14, 23], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "max_age", ",", "occlusion_thres", ",", "association_thres", ")", ":", "\n", "        ", "self", ".", "max_age", "=", "max_age", "\n", "self", ".", "occlusion_thres", "=", "occlusion_thres", "\n", "self", ".", "association_thres", "=", "association_thres", "\n", "self", ".", "siamese", "=", "None", "\n", "self", ".", "sess", "=", "None", "\n", "self", ".", "tracks", "=", "[", "]", "# save all the targets", "\n", "self", ".", "_next_id", "=", "1", "\n", "self", ".", "frame_rate", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.tracker.mot_tracker.MOT_Tracker.initiate_siamese_tracker": [[24, 37], ["tracker.Siamese_utils.misc_utils.load_cfgs", "tensorflow.Graph", "tensorflow.GPUOptions", "tensorflow.ConfigProto", "tensorflow.Session", "inference_wrapper.InferenceWrapper.build_graph_from_config.", "tracker.Siamese_inference.Siamese_tracker.Siamese_Tracker", "tensorflow.Graph.as_default", "tracker.Siamese_inference.inference_wrapper.InferenceWrapper", "tracker.Siamese_inference.inference_wrapper.InferenceWrapper.build_graph_from_config"], "methods", ["home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.misc_utils.load_cfgs", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_inference.inference_wrapper.InferenceWrapper.build_graph_from_config"], ["", "@", "staticmethod", "\n", "def", "initiate_siamese_tracker", "(", "checkpoint", ",", "context_amount", ")", ":", "\n", "        ", "model_config", ",", "_", ",", "track_config", "=", "load_cfgs", "(", "checkpoint", ")", "\n", "g", "=", "tf", ".", "Graph", "(", ")", "\n", "with", "g", ".", "as_default", "(", ")", ":", "\n", "            ", "model", "=", "inference_wrapper", ".", "InferenceWrapper", "(", "context_amount", ")", "\n", "restore_fn", "=", "model", ".", "build_graph_from_config", "(", "model_config", ",", "track_config", ",", "checkpoint", ")", "\n", "", "gpu_options", "=", "tf", ".", "GPUOptions", "(", "allow_growth", "=", "True", ")", "\n", "sess_config", "=", "tf", ".", "ConfigProto", "(", "gpu_options", "=", "gpu_options", ")", "\n", "sess", "=", "tf", ".", "Session", "(", "graph", "=", "g", ",", "config", "=", "sess_config", ")", "\n", "restore_fn", "(", "sess", ")", "# load ckpt", "\n", "siamese", "=", "Siamese_Tracker", "(", "model", ",", "model_config", "=", "model_config", ",", "track_config", "=", "track_config", ")", "\n", "return", "sess", ",", "siamese", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.tracker.mot_tracker.MOT_Tracker.npair_distance": [[38, 57], ["numpy.zeros", "numpy.vstack", "numpy.reshape", "numpy.reshape", "numpy.dot", "range", "enumerate", "len", "numpy.asarray", "numpy.linalg.norm", "numpy.asarray", "numpy.linalg.norm", "numpy.mean"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "npair_distance", "(", "a", ",", "b", ",", "data_is_normalized", "=", "False", ")", ":", "\n", "        ", "result", "=", "np", ".", "zeros", "(", "(", "a", ".", "shape", "[", "0", "]", ",", "len", "(", "b", ")", ")", ")", "\n", "frames_count", "=", "[", "ele", ".", "shape", "[", "0", "]", "for", "ele", "in", "b", "]", "\n", "b", "=", "np", ".", "vstack", "(", "b", ")", "\n", "a", "=", "np", ".", "reshape", "(", "a", ",", "(", "a", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "b", "=", "np", ".", "reshape", "(", "b", ",", "(", "b", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "if", "not", "data_is_normalized", ":", "\n", "            ", "a", "=", "np", ".", "asarray", "(", "a", ")", "/", "np", ".", "linalg", ".", "norm", "(", "a", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "b", "=", "np", ".", "asarray", "(", "b", ")", "/", "np", ".", "linalg", ".", "norm", "(", "b", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "", "concat_targets_result", "=", "np", ".", "dot", "(", "a", ",", "b", ".", "T", ")", "\n", "\n", "for", "k", "in", "range", "(", "a", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "index", "=", "0", "\n", "for", "i", ",", "num", "in", "enumerate", "(", "frames_count", ")", ":", "\n", "                ", "result", "[", "k", ",", "i", "]", "=", "np", ".", "mean", "(", "concat_targets_result", "[", "k", ",", "index", ":", "index", "+", "num", "]", ")", "\n", "# result[k, i] = np.max(concat_targets_result[k, index:index + num])", "\n", "index", "+=", "num", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.tracker.mot_tracker.MOT_Tracker.iou": [[58, 74], ["numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum"], "methods", ["None"], ["", "@", "staticmethod", "\n", "@", "numba", ".", "jit", "\n", "def", "iou", "(", "bb_test", ",", "bb_gt", ")", ":", "\n", "        ", "\"\"\"\n        Computes IUO between two bboxes in the form [x1,y1,x2,y2]\n        \"\"\"", "\n", "xx1", "=", "np", ".", "maximum", "(", "bb_test", "[", "0", "]", ",", "bb_gt", "[", "0", "]", ")", "\n", "yy1", "=", "np", ".", "maximum", "(", "bb_test", "[", "1", "]", ",", "bb_gt", "[", "1", "]", ")", "\n", "xx2", "=", "np", ".", "minimum", "(", "bb_test", "[", "2", "]", ",", "bb_gt", "[", "2", "]", ")", "\n", "yy2", "=", "np", ".", "minimum", "(", "bb_test", "[", "3", "]", ",", "bb_gt", "[", "3", "]", ")", "\n", "w", "=", "np", ".", "maximum", "(", "0.", ",", "xx2", "-", "xx1", ")", "\n", "h", "=", "np", ".", "maximum", "(", "0.", ",", "yy2", "-", "yy1", ")", "\n", "wh", "=", "w", "*", "h", "\n", "o", "=", "wh", "/", "(", "(", "bb_test", "[", "2", "]", "-", "bb_test", "[", "0", "]", ")", "*", "(", "bb_test", "[", "3", "]", "-", "bb_test", "[", "1", "]", ")", "\n", "+", "(", "bb_gt", "[", "2", "]", "-", "bb_gt", "[", "0", "]", ")", "*", "(", "bb_gt", "[", "3", "]", "-", "bb_gt", "[", "1", "]", ")", "-", "wh", ")", "\n", "return", "(", "o", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.tracker.mot_tracker.MOT_Tracker.associate_detections_to_trackers": [[75, 118], ["sklearn.utils.linear_assignment_.linear_assignment", "enumerate", "enumerate", "len", "numpy.zeros", "enumerate", "len", "numpy.empty", "numpy.concatenate", "numpy.array", "numpy.array", "numpy.empty", "numpy.arange", "numpy.empty", "numpy.zeros", "enumerate", "unmatched_detections.append", "unmatched_trackers.append", "unmatched_detections.append", "unmatched_trackers.append", "numpy.concatenate.append", "len", "len", "len", "mot_tracker.MOT_Tracker.iou", "m.reshape"], "methods", ["home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.tracker.mot_tracker.MOT_Tracker.iou"], ["", "def", "associate_detections_to_trackers", "(", "self", ",", "detections", ",", "trackers", ",", "score_threshold", ",", "cos_matrix", "=", "None", ")", ":", "\n", "\n", "        ", "\"\"\"\n        For tracked targets, update bboxes.\n        For lost targets, associate with dets.\n        \"\"\"", "\n", "\n", "if", "(", "len", "(", "trackers", ")", "==", "0", ")", ":", "\n", "            ", "return", "np", ".", "empty", "(", "(", "0", ",", "2", ")", ",", "dtype", "=", "int", ")", ",", "np", ".", "arange", "(", "len", "(", "detections", ")", ")", ",", "np", ".", "empty", "(", "(", "0", ",", "5", ")", ",", "dtype", "=", "int", ")", ",", "np", ".", "zeros", "(", "(", "0", ",", "0", ")", ")", "\n", "\n", "", "if", "cos_matrix", "is", "not", "None", ":", "# for lost targets", "\n", "            ", "association_matrix", "=", "cos_matrix", "\n", "", "else", ":", "# for tracked targets", "\n", "            ", "association_matrix", "=", "np", ".", "zeros", "(", "(", "len", "(", "detections", ")", ",", "len", "(", "trackers", ")", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "d", ",", "det", "in", "enumerate", "(", "detections", ")", ":", "\n", "                ", "for", "t", ",", "trk", "in", "enumerate", "(", "trackers", ")", ":", "\n", "                    ", "association_matrix", "[", "d", ",", "t", "]", "=", "self", ".", "iou", "(", "det", ",", "trk", ")", "\n", "\n", "", "", "", "matched_indices", "=", "linear_assignment", "(", "-", "association_matrix", ")", "\n", "\n", "unmatched_detections", "=", "[", "]", "\n", "for", "d", ",", "det", "in", "enumerate", "(", "detections", ")", ":", "\n", "            ", "if", "(", "d", "not", "in", "matched_indices", "[", ":", ",", "0", "]", ")", ":", "\n", "                ", "unmatched_detections", ".", "append", "(", "d", ")", "\n", "", "", "unmatched_trackers", "=", "[", "]", "\n", "for", "t", ",", "trk", "in", "enumerate", "(", "trackers", ")", ":", "\n", "            ", "if", "(", "t", "not", "in", "matched_indices", "[", ":", ",", "1", "]", ")", ":", "\n", "                ", "unmatched_trackers", ".", "append", "(", "t", ")", "\n", "\n", "# filter out matched with low score", "\n", "", "", "matches", "=", "[", "]", "\n", "for", "m", "in", "matched_indices", ":", "\n", "            ", "if", "(", "association_matrix", "[", "m", "[", "0", "]", ",", "m", "[", "1", "]", "]", "<", "score_threshold", ")", ":", "\n", "                ", "unmatched_detections", ".", "append", "(", "m", "[", "0", "]", ")", "\n", "unmatched_trackers", ".", "append", "(", "m", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "matches", ".", "append", "(", "m", ".", "reshape", "(", "1", ",", "2", ")", ")", "\n", "", "", "if", "(", "len", "(", "matches", ")", "==", "0", ")", ":", "\n", "            ", "matches", "=", "np", ".", "empty", "(", "(", "0", ",", "2", ")", ",", "dtype", "=", "int", ")", "\n", "", "else", ":", "\n", "            ", "matches", "=", "np", ".", "concatenate", "(", "matches", ",", "axis", "=", "0", ")", "\n", "\n", "", "return", "matches", ",", "np", ".", "array", "(", "unmatched_detections", ")", ",", "np", ".", "array", "(", "unmatched_trackers", ")", ",", "association_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.tracker.mot_tracker.MOT_Tracker.initiate_track": [[119, 124], ["mot_tracker.MOT_Tracker.siamese.init_tracks", "mot_tracker.MOT_Tracker.tracks.append", "track.Track"], "methods", ["home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_inference.Siamese_tracker.Siamese_Tracker.init_tracks"], ["", "def", "initiate_track", "(", "self", ",", "detection", ",", "current_frame_path", ")", ":", "\n", "        ", "current_target_state", "=", "self", ".", "siamese", ".", "init_tracks", "(", "self", ".", "sess", ",", "detection", ",", "current_frame_path", ")", "\n", "self", ".", "tracks", ".", "append", "(", "Track", "(", "\n", "current_target_state", ",", "detection", ",", "self", ".", "_next_id", ",", "self", ".", "max_age", ")", ")", "\n", "self", ".", "_next_id", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.tracker.mot_tracker.MOT_Tracker.update": [[125, 238], ["int", "numpy.array", "numpy.zeros", "enumerate", "numpy.zeros.copy", "mot_tracker.MOT_Tracker.associate_detections_to_trackers", "enumerate", "numpy.zeros", "enumerate", "numpy.zeros.copy", "numpy.array", "mot_tracker.MOT_Tracker.associate_detections_to_trackers", "enumerate", "len", "reversed", "reversed", "numpy.empty", "mot_tracker.MOT_Tracker.initiate_siamese_tracker", "len", "numpy.array.copy", "t.is_tracked", "tracked_trks[].predict", "numpy.array.copy", "numpy.array", "mot_tracker.MOT_Tracker.npair_distance", "numpy.zeros", "mot_tracker.MOT_Tracker.initiate_track", "cv2.imread", "trk.is_tracked", "len", "numpy.concatenate", "os.basename().split", "t.is_tracked", "len", "int", "mot_tracker.MOT_Tracker.siamese.init_tracks", "trk.update", "trk.overlap_history.append", "len", "t.is_lost", "len", "len", "numpy.vstack", "mot_tracker.MOT_Tracker.siamese.init_tracks", "numpy.array.append", "dets_trk_embeding.append", "int", "trk.update", "mot_tracker.MOT_Tracker.tracks.pop", "ret.append", "trk.overlap_history.pop", "sum", "min", "len", "len", "len", "len", "trk.is_lost", "trk.is_insight", "numpy.concatenate().reshape", "os.basename", "numpy.concatenate", "numpy.where", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.tracker.mot_tracker.MOT_Tracker.associate_detections_to_trackers", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.tracker.mot_tracker.MOT_Tracker.associate_detections_to_trackers", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.tracker.mot_tracker.MOT_Tracker.initiate_siamese_tracker", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.tracker.track.Track.is_tracked", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.tracker.track.Track.predict", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.tracker.mot_tracker.MOT_Tracker.npair_distance", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.tracker.mot_tracker.MOT_Tracker.initiate_track", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.tracker.track.Track.is_tracked", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.tracker.track.Track.is_tracked", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_inference.Siamese_tracker.Siamese_Tracker.init_tracks", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.tracker.track.Track.update", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.tracker.track.Track.is_lost", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_inference.Siamese_tracker.Siamese_Tracker.init_tracks", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.tracker.track.Track.update", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.tracker.track.Track.is_lost", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.tracker.track.Track.is_insight"], ["", "def", "update", "(", "self", ",", "frame_path", ",", "checkpoint", ",", "context_amount", ",", "detections", ",", "iou", ")", ":", "\n", "\n", "# init", "\n", "        ", "frame_count", "=", "int", "(", "osp", ".", "basename", "(", "frame_path", ")", ".", "split", "(", "\".\"", ")", "[", "0", "]", ")", "\n", "if", "frame_count", "==", "1", ":", "\n", "            ", "self", ".", "sess", ",", "self", ".", "siamese", "=", "self", ".", "initiate_siamese_tracker", "(", "checkpoint", ",", "context_amount", ")", "\n", "", "dets", "=", "np", ".", "array", "(", "[", "d", ".", "tlwh", "for", "d", "in", "detections", "]", ")", "# dets: [x1,y1,w,h]", "\n", "if", "len", "(", "dets", ")", "==", "0", ":", "\n", "            ", "dets_tlrb", "=", "dets", "\n", "", "else", ":", "\n", "            ", "dets_tlrb", "=", "dets", ".", "copy", "(", ")", "\n", "dets_tlrb", "[", ":", ",", "2", ":", "]", "+=", "dets_tlrb", "[", ":", ",", ":", "2", "]", "# convert to [x1,y1,w,h] to [x1,y1,x2,y2]", "\n", "\n", "###########################   STEP 1: occlusion detection   #######################", "\n", "\n", "", "for", "t", "in", "self", ".", "tracks", ":", "\n", "            ", "if", "t", ".", "is_tracked", "(", ")", ":", "\n", "                ", "similarity", "=", "t", ".", "current_target_state", ".", "similarity", "\n", "if", "similarity", "<=", "self", ".", "occlusion_thres", "or", "t", ".", "average_overlap", "<", "0.5", ":", "\n", "                    ", "t", ".", "state", "=", "TrackState", ".", "Lost", "\n", "t", ".", "current_target_state", ".", "bbox", "=", "t", ".", "current_target_state", ".", "old_bbox", "\n", "t", ".", "current_target_state", ".", "scale_idx", "=", "t", ".", "current_target_state", ".", "old_scale_idx", "\n", "t", ".", "current_target_state", ".", "search_pos", "=", "t", ".", "current_target_state", ".", "old_search_pos", "\n", "\n", "###############################   STEP 2: update tracked targets   ###############################", "\n", "\n", "", "", "", "tracked_trks", "=", "[", "t", "for", "t", "in", "self", ".", "tracks", "if", "t", ".", "is_tracked", "(", ")", "]", "\n", "trks", "=", "np", ".", "zeros", "(", "(", "len", "(", "tracked_trks", ")", ",", "5", ")", ")", "# update tracked", "\n", "ret", "=", "[", "]", "\n", "for", "t", ",", "trk", "in", "enumerate", "(", "trks", ")", ":", "# TODO: batch prediction", "\n", "            ", "tracked_trks", "[", "t", "]", ".", "predict", "(", "self", ".", "sess", ",", "self", ".", "siamese", ",", "frame_path", ")", "\n", "pos", "=", "tracked_trks", "[", "t", "]", ".", "track_bbox", "\n", "trk", "[", ":", "]", "=", "[", "pos", "[", "0", "]", ",", "pos", "[", "1", "]", ",", "pos", "[", "2", "]", ",", "pos", "[", "3", "]", ",", "0", "]", "\n", "", "trks_tlrb", "=", "trks", ".", "copy", "(", ")", "\n", "trks_tlrb", "[", ":", ",", "2", ":", "4", "]", "+=", "trks_tlrb", "[", ":", ",", "0", ":", "2", "]", "# convert to [xl,yl,w,h] to [x1,y1,x2,y2]", "\n", "matched", ",", "unmatched_dets", ",", "unmatched_trks", ",", "iou_matrix", "=", "self", ".", "associate_detections_to_trackers", "(", "dets_tlrb", ",", "trks_tlrb", ",", "iou", ")", "# associate with detection", "\n", "\n", "for", "t", ",", "trk", "in", "enumerate", "(", "tracked_trks", ")", ":", "# refine bbox of matched track", "\n", "            ", "if", "t", "not", "in", "unmatched_trks", ":", "\n", "                ", "d", "=", "int", "(", "matched", "[", "np", ".", "where", "(", "matched", "[", ":", ",", "1", "]", "==", "t", ")", "[", "0", "]", ",", "0", "]", ")", "\n", "matched_iou", "=", "iou_matrix", "[", "d", ",", "t", "]", "\n", "det_state", "=", "self", ".", "siamese", ".", "init_tracks", "(", "self", ".", "sess", ",", "dets", "[", "d", ",", ":", "4", "]", ",", "frame_path", ")", "# TODO: batch prediction", "\n", "trk", ".", "update", "(", "dets", "[", "d", ",", ":", "4", "]", ",", "det_state", ".", "reid_templates", ",", "'tracked'", ",", "matched_iou", ",", "self", ".", "frame_rate", ")", "\n", "", "else", ":", "# update unmatched track", "\n", "                ", "trk", ".", "overlap_history", ".", "append", "(", "0", ")", "\n", "history_len", "=", "len", "(", "trk", ".", "overlap_history", ")", "\n", "if", "history_len", ">", "2", "*", "self", ".", "frame_rate", ":", "\n", "                    ", "trk", ".", "overlap_history", ".", "pop", "(", "0", ")", "\n", "", "trk", ".", "average_overlap", "=", "sum", "(", "trk", ".", "overlap_history", ")", "/", "min", "(", "2", "*", "self", ".", "frame_rate", ",", "history_len", ")", "\n", "\n", "###############################    STEP 3: update lost targets  ###############################", "\n", "\n", "", "", "lost_trks", "=", "[", "t", "for", "t", "in", "self", ".", "tracks", "if", "t", ".", "is_lost", "(", ")", "]", "\n", "for", "t", "in", "lost_trks", ":", "\n", "            ", "t", ".", "time_since_update", "+=", "1", "\n", "", "trks1", "=", "np", ".", "zeros", "(", "(", "len", "(", "lost_trks", ")", ",", "4", ")", ")", "\n", "for", "t", ",", "trk", "in", "enumerate", "(", "trks1", ")", ":", "\n", "            ", "pos", "=", "lost_trks", "[", "t", "]", ".", "track_bbox", "\n", "trk", "[", ":", "]", "=", "[", "pos", "[", "0", "]", ",", "pos", "[", "1", "]", ",", "pos", "[", "2", "]", ",", "pos", "[", "3", "]", "]", "\n", "", "trks_tlrb1", "=", "trks1", ".", "copy", "(", ")", "\n", "trks_tlrb1", "[", ":", ",", "2", ":", "]", "+=", "trks_tlrb1", "[", ":", ",", ":", "2", "]", "# convert to [xl,yt,w,h] to [x1,y1,xr,yb]", "\n", "dets_tlwh1", "=", "np", ".", "array", "(", "[", "dets", "[", "i", ",", ":", "4", "]", "for", "i", "in", "unmatched_dets", "]", ")", "# [xl,yt,w,h]", "\n", "\n", "if", "not", "len", "(", "dets_tlwh1", ")", "==", "0", ":", "\n", "            ", "dets_tlrb1", "=", "dets_tlwh1", ".", "copy", "(", ")", "\n", "dets_tlrb1", "[", ":", ",", "2", ":", "]", "+=", "dets_tlrb1", "[", ":", ",", ":", "2", "]", "\n", "", "else", ":", "\n", "            ", "dets_tlrb1", "=", "dets_tlwh1", "\n", "\n", "", "if", "not", "(", "len", "(", "lost_trks", ")", "==", "0", "or", "len", "(", "dets_tlwh1", ")", "==", "0", ")", ":", "\n", "            ", "lost_trks_templates", "=", "[", "np", ".", "vstack", "(", "trk", ".", "current_target_state", ".", "his_feature", ")", "for", "trk", "in", "lost_trks", "]", "\n", "dets_reid_embeding", ",", "dets_trk_embeding", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "unmatched_dets", ":", "\n", "                ", "det_state", "=", "self", ".", "siamese", ".", "init_tracks", "(", "self", ".", "sess", ",", "dets", "[", "i", ",", ":", "4", "]", ",", "frame_path", ")", "\n", "dets_reid_embeding", ".", "append", "(", "det_state", ".", "reid_templates", ")", "\n", "dets_trk_embeding", ".", "append", "(", "det_state", ".", "init_templates", ")", "\n", "", "dets_reid_embeding", "=", "np", ".", "array", "(", "dets_reid_embeding", ")", "\n", "cos_matrix", "=", "self", ".", "npair_distance", "(", "dets_reid_embeding", ",", "lost_trks_templates", ")", "# todo: add motion model to limit detections to be matched", "\n", "", "else", ":", "\n", "            ", "cos_matrix", "=", "np", ".", "zeros", "(", "(", "len", "(", "dets_tlrb1", ")", ",", "len", "(", "trks_tlrb1", ")", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "", "lost_matched", ",", "lost_unmatched_dets", ",", "lost_unmatched_trks", ",", "_", "=", "self", ".", "associate_detections_to_trackers", "(", "dets_tlrb1", ",", "trks_tlrb1", ",", "self", ".", "association_thres", ",", "cos_matrix", ")", "\n", "\n", "# update recover targets", "\n", "for", "t", ",", "trk", "in", "enumerate", "(", "lost_trks", ")", ":", "\n", "            ", "if", "(", "t", "not", "in", "lost_unmatched_trks", ")", ":", "\n", "                ", "d", "=", "int", "(", "lost_matched", "[", "np", ".", "where", "(", "lost_matched", "[", ":", ",", "1", "]", "==", "t", ")", "[", "0", "]", ",", "0", "]", ")", "\n", "trk", ".", "update", "(", "dets_tlwh1", "[", "d", ",", ":", "4", "]", ",", "[", "dets_reid_embeding", "[", "d", "]", ",", "dets_trk_embeding", "[", "d", "]", "]", ",", "'recover'", ")", "\n", "\n", "# initiate targets if not match with any dets", "\n", "", "", "for", "i", "in", "lost_unmatched_dets", ":", "\n", "            ", "self", ".", "initiate_track", "(", "dets_tlwh1", "[", "i", ",", ":", "4", "]", ",", "frame_path", ")", "# TODO: batch prediction", "\n", "\n", "###############################   STEP 4: post processing   ###############################", "\n", "\n", "# remove dead tracklet", "\n", "", "wh", "=", "cv2", ".", "imread", "(", "frame_path", ")", ".", "shape", "\n", "i", "=", "len", "(", "self", ".", "tracks", ")", "\n", "for", "trk", "in", "reversed", "(", "self", ".", "tracks", ")", ":", "\n", "            ", "i", "-=", "1", "\n", "if", "(", "trk", ".", "is_lost", "(", ")", "and", "trk", ".", "time_since_update", ">", "self", ".", "max_age", ")", "or", "not", "trk", ".", "is_insight", "(", "\n", "wh", ")", ":", "\n", "                ", "self", ".", "tracks", ".", "pop", "(", "i", ")", "\n", "\n", "# record results", "\n", "", "", "for", "trk", "in", "reversed", "(", "self", ".", "tracks", ")", ":", "\n", "            ", "d", "=", "trk", ".", "track_bbox", "\n", "if", "trk", ".", "is_tracked", "(", ")", ":", "\n", "                ", "ret", ".", "append", "(", "np", ".", "concatenate", "(", "(", "d", ",", "[", "trk", ".", "track_id", "]", ")", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", "# +1 as MOT benchmark requires positive", "\n", "\n", "", "", "if", "(", "len", "(", "ret", ")", ">", "0", ")", ":", "\n", "            ", "return", "np", ".", "concatenate", "(", "ret", ")", "\n", "", "return", "np", ".", "empty", "(", "(", "0", ",", "5", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.tracker.track.Track.__init__": [[12, 21], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "current_target_state", ",", "track_bbox", ",", "track_id", ",", "max_age", ")", ":", "\n", "        ", "self", ".", "current_target_state", "=", "current_target_state", "\n", "self", ".", "track_bbox", "=", "track_bbox", "\n", "self", ".", "track_id", "=", "track_id", "\n", "self", ".", "time_since_update", "=", "0", "\n", "self", ".", "state", "=", "TrackState", ".", "Tracked", "\n", "self", ".", "_max_age", "=", "max_age", "\n", "self", ".", "overlap_history", "=", "[", "1", "]", "\n", "self", ".", "average_overlap", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.tracker.track.Track.predict": [[22, 26], ["siamese.track"], "methods", ["home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_inference.Siamese_tracker.Siamese_Tracker.track"], ["", "def", "predict", "(", "self", ",", "sess", ",", "siamese", ",", "frame_path", ")", ":", "\n", "\n", "        ", "self", ".", "current_target_state", ",", "self", ".", "track_bbox", "=", "siamese", ".", "track", "(", "sess", ",", "self", ".", "current_target_state", ",", "frame_path", ")", "\n", "self", ".", "time_since_update", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.tracker.track.Track.update": [[27, 71], ["track.Track.overlap_history.append", "len", "tracker.Siamese_utils.infer_utils.convert_bbox_format", "numpy.array", "track.Track.current_target_state.his_feature.append", "tracker.Siamese_utils.infer_utils.Rectangle", "tracker.Siamese_utils.infer_utils.convert_bbox_format", "int", "numpy.array", "track.Track.current_target_state.his_feature.append", "track.Track.overlap_history.pop", "sum", "min", "tracker.Siamese_utils.infer_utils.Rectangle", "len", "track.Track.current_target_state.his_feature.pop", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.infer_utils.convert_bbox_format", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.infer_utils.convert_bbox_format"], ["", "def", "update", "(", "self", ",", "detection", ",", "det_embeding", ",", "mode", ",", "matched_iou", "=", "1.0", ",", "frame_rate", "=", "30", ")", ":", "\n", "        ", "self", ".", "time_since_update", "=", "0", "\n", "\n", "if", "mode", "==", "'tracked'", ":", "\n", "            ", "self", ".", "overlap_history", ".", "append", "(", "1", "if", "matched_iou", ">", "0.5", "else", "0", ")", "\n", "history_length", "=", "len", "(", "self", ".", "overlap_history", ")", "\n", "if", "history_length", ">", "2", "*", "frame_rate", ":", "\n", "                ", "self", ".", "overlap_history", ".", "pop", "(", "0", ")", "\n", "", "self", ".", "average_overlap", "=", "sum", "(", "self", ".", "overlap_history", ")", "/", "min", "(", "2", "*", "frame_rate", ",", "history_length", ")", "\n", "\n", "refine_detection", "=", "[", "0.5", "*", "self", ".", "track_bbox", "[", "0", "]", "+", "0.5", "*", "detection", "[", "0", "]", ",", "\n", "0.5", "*", "self", ".", "track_bbox", "[", "1", "]", "+", "0.5", "*", "detection", "[", "1", "]", ",", "\n", "0.5", "*", "self", ".", "track_bbox", "[", "2", "]", "+", "0.5", "*", "detection", "[", "2", "]", ",", "\n", "0.5", "*", "self", ".", "track_bbox", "[", "3", "]", "+", "0.5", "*", "detection", "[", "3", "]", "]", "# ltrb", "\n", "\n", "self", ".", "current_target_state", ".", "bbox", "=", "convert_bbox_format", "(", "Rectangle", "(", "refine_detection", "[", "0", "]", ",", "\n", "refine_detection", "[", "1", "]", ",", "\n", "refine_detection", "[", "2", "]", ",", "\n", "refine_detection", "[", "3", "]", ")", ",", "'center-based'", ")", "\n", "self", ".", "track_bbox", "=", "np", ".", "array", "(", "refine_detection", ")", "# track result", "\n", "self", ".", "current_target_state", ".", "his_feature", ".", "append", "(", "det_embeding", ")", "\n", "if", "len", "(", "self", ".", "current_target_state", ".", "his_feature", ")", ">", "frame_rate", ":", "\n", "                ", "self", ".", "current_target_state", ".", "his_feature", ".", "pop", "(", "0", ")", "\n", "\n", "", "return", "\n", "\n", "", "if", "mode", "==", "'recover'", ":", "\n", "\n", "            ", "self", ".", "state", "=", "TrackState", ".", "Tracked", "# re-tracked", "\n", "init_bb", "=", "Rectangle", "(", "int", "(", "detection", "[", "0", "]", ")", "-", "1", ",", "int", "(", "detection", "[", "1", "]", ")", "-", "1", ",", "int", "(", "detection", "[", "2", "]", ")", ",", "int", "(", "detection", "[", "3", "]", ")", ")", "# xl, yt, w, h", "\n", "bbox", "=", "convert_bbox_format", "(", "init_bb", ",", "'center-based'", ")", "\n", "self", ".", "current_target_state", ".", "bbox", "=", "bbox", "\n", "self", ".", "current_target_state", ".", "reid_templates", "=", "det_embeding", "[", "0", "]", "\n", "self", ".", "current_target_state", ".", "init_templates", "=", "det_embeding", "[", "1", "]", "\n", "self", ".", "current_target_state", ".", "scale_idx", "=", "int", "(", "1", ")", "\n", "self", ".", "current_target_state", ".", "similarity", "=", "1.0", "\n", "self", ".", "current_target_state", ".", "original_target_wh", "=", "[", "bbox", ".", "width", ",", "bbox", ".", "height", "]", "\n", "self", ".", "current_target_state", ".", "bbox_in", "=", "detection", "\n", "self", ".", "track_bbox", "=", "np", ".", "array", "(", "[", "init_bb", ".", "x", ",", "init_bb", ".", "y", ",", "init_bb", ".", "width", ",", "init_bb", ".", "height", "]", ")", "\n", "\n", "self", ".", "overlap_history", "=", "[", "1", "]", "\n", "self", ".", "average_overlap", "=", "1", "\n", "self", ".", "current_target_state", ".", "his_feature", "=", "[", "]", "\n", "self", ".", "current_target_state", ".", "his_feature", ".", "append", "(", "self", ".", "current_target_state", ".", "reid_templates", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.tracker.track.Track.is_tracked": [[72, 75], ["None"], "methods", ["None"], ["", "", "def", "is_tracked", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns True if this track is confirmed.\"\"\"", "\n", "return", "self", ".", "state", "==", "TrackState", ".", "Tracked", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.tracker.track.Track.is_lost": [[76, 79], ["None"], "methods", ["None"], ["", "def", "is_lost", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns True if this track is lost.\"\"\"", "\n", "return", "self", ".", "state", "==", "TrackState", ".", "Lost", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.tracker.track.Track.is_insight": [[81, 85], ["None"], "methods", ["None"], ["", "def", "is_insight", "(", "self", ",", "shape", ")", ":", "\n", "        ", "x", "=", "self", ".", "track_bbox", "[", "0", "]", "+", "self", ".", "track_bbox", "[", "2", "]", "/", "2", "\n", "y", "=", "self", ".", "track_bbox", "[", "1", "]", "+", "self", ".", "track_bbox", "[", "3", "]", "/", "2", "\n", "return", "x", ">", "1", "and", "y", ">", "1", "and", "x", "<", "shape", "[", "1", "]", "and", "y", "<", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_inference.convolutional_alexnet.convolutional_alexnet_arg_scope": [[9, 80], ["tracker.Siamese_utils.misc_utils.get", "tracker.Siamese_utils.misc_utils.get", "tracker.Siamese_utils.misc_utils.get", "tracker.Siamese_utils.misc_utils.get", "tracker.Siamese_utils.misc_utils.get", "slim.l2_regularizer", "logging.info", "slim.variance_scaling_initializer", "slim.xavier_initializer", "slim.arg_scope", "tracker.Siamese_utils.misc_utils.get", "slim.arg_scope", "slim.arg_scope"], "function", ["home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.misc_utils.get", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.misc_utils.get", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.misc_utils.get", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.misc_utils.get", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.misc_utils.get", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.misc_utils.get"], ["def", "convolutional_alexnet_arg_scope", "(", "embed_config", ",", "\n", "trainable", "=", "True", ",", "\n", "is_training", "=", "False", ")", ":", "\n", "  ", "\"\"\"Defines the default arg scope.\n\n  Args:\n    embed_config: A dictionary which contains configurations for the embedding function.\n    trainable: If the weights in the embedding function is trainable.\n    is_training: If the embedding function is built for training.\n\n  Returns:\n    An `arg_scope` to use for the convolutional_alexnet models.\n  \"\"\"", "\n", "# Only consider the model to be in training mode if it's trainable.", "\n", "# This is vital for batch_norm since moving_mean and moving_variance", "\n", "# will get updated even if not trainable.", "\n", "is_model_training", "=", "trainable", "and", "is_training", "\n", "\n", "if", "get", "(", "embed_config", ",", "'use_bn'", ",", "True", ")", ":", "\n", "    ", "batch_norm_scale", "=", "get", "(", "embed_config", ",", "'bn_scale'", ",", "True", ")", "\n", "batch_norm_decay", "=", "1", "-", "get", "(", "embed_config", ",", "'bn_momentum'", ",", "3e-4", ")", "\n", "batch_norm_epsilon", "=", "get", "(", "embed_config", ",", "'bn_epsilon'", ",", "1e-6", ")", "\n", "batch_norm_params", "=", "{", "\n", "\"scale\"", ":", "batch_norm_scale", ",", "\n", "# Decay for the moving averages.", "\n", "\"decay\"", ":", "batch_norm_decay", ",", "\n", "# Epsilon to prevent 0s in variance.", "\n", "\"epsilon\"", ":", "batch_norm_epsilon", ",", "\n", "\"trainable\"", ":", "trainable", ",", "\n", "\"is_training\"", ":", "is_model_training", ",", "\n", "# Collection containing the moving mean and moving variance.", "\n", "\"variables_collections\"", ":", "{", "\n", "\"beta\"", ":", "None", ",", "\n", "\"gamma\"", ":", "None", ",", "\n", "\"moving_mean\"", ":", "[", "\"moving_vars\"", "]", ",", "\n", "\"moving_variance\"", ":", "[", "\"moving_vars\"", "]", ",", "\n", "}", ",", "\n", "'updates_collections'", ":", "None", ",", "# Ensure that updates are done within a frame", "\n", "}", "\n", "normalizer_fn", "=", "slim", ".", "batch_norm", "\n", "", "else", ":", "\n", "    ", "batch_norm_params", "=", "{", "}", "\n", "normalizer_fn", "=", "None", "\n", "\n", "", "weight_decay", "=", "get", "(", "embed_config", ",", "'weight_decay'", ",", "5e-4", ")", "\n", "if", "trainable", ":", "\n", "    ", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "weight_decay", ")", "\n", "", "else", ":", "\n", "    ", "weights_regularizer", "=", "None", "\n", "\n", "", "init_method", "=", "get", "(", "embed_config", ",", "'init_method'", ",", "'kaiming_normal'", ")", "\n", "if", "is_model_training", ":", "\n", "    ", "logging", ".", "info", "(", "'embedding init method -- {}'", ".", "format", "(", "init_method", ")", ")", "\n", "", "if", "init_method", "==", "'kaiming_normal'", ":", "\n", "# The same setting as siamese-fc", "\n", "    ", "initializer", "=", "slim", ".", "variance_scaling_initializer", "(", "factor", "=", "2.0", ",", "mode", "=", "'FAN_OUT'", ",", "uniform", "=", "False", ")", "\n", "", "else", ":", "\n", "    ", "initializer", "=", "slim", ".", "xavier_initializer", "(", ")", "\n", "\n", "", "with", "slim", ".", "arg_scope", "(", "\n", "[", "slim", ".", "conv2d", "]", ",", "\n", "weights_regularizer", "=", "weights_regularizer", ",", "\n", "weights_initializer", "=", "initializer", ",", "\n", "padding", "=", "'VALID'", ",", "\n", "trainable", "=", "trainable", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "normalizer_fn", "=", "normalizer_fn", ",", "\n", "normalizer_params", "=", "batch_norm_params", ")", ":", "\n", "    ", "with", "slim", ".", "arg_scope", "(", "[", "slim", ".", "batch_norm", "]", ",", "**", "batch_norm_params", ")", ":", "\n", "      ", "with", "slim", ".", "arg_scope", "(", "[", "slim", ".", "batch_norm", "]", ",", "is_training", "=", "True", ")", "as", "arg_sc", ":", "\n", "        ", "return", "arg_sc", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_inference.convolutional_alexnet.convolutional_alexnet": [[82, 165], ["tensorflow.variable_scope", "slim.arg_scope", "slim.conv2d", "slim.max_pool2d", "slim.conv2d", "slim.max_pool2d", "slim.conv2d", "slim.conv2d", "slim.conv2d", "slim.conv2d", "tensorflow.name_scope", "convolutional_alexnet.convolutional_alexnet.attach_attention_module"], "function", ["None"], ["", "", "", "", "def", "convolutional_alexnet", "(", "inputs", ",", "stage", "=", "'init'", ",", "reuse", "=", "None", ",", "scope", "=", "'convolutional_alexnet'", ")", ":", "\n", "  ", "\"\"\"Defines the feature extractor of SiamFC.\n\n  Args:\n    inputs: a Tensor of shape [batch, h, w, c].\n    reuse: if the weights in the embedding function are reused.\n    scope: the variable scope of the computational graph.\n\n  Returns:\n    net: the computed features of the inputs.\n    end_points: the intermediate outputs of the embedding function.\n  \"\"\"", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "'convolutional_alexnet'", ",", "[", "inputs", "]", ",", "reuse", "=", "reuse", ")", "as", "sc", ":", "\n", "    ", "end_points_collection", "=", "sc", ".", "name", "+", "'_end_points'", "\n", "with", "slim", ".", "arg_scope", "(", "[", "slim", ".", "conv2d", ",", "slim", ".", "max_pool2d", "]", ",", "\n", "outputs_collections", "=", "end_points_collection", ")", ":", "\n", "\n", "      ", "net", "=", "inputs", "\n", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "96", ",", "[", "11", ",", "11", "]", ",", "2", ",", "scope", "=", "'conv1'", ")", "\n", "net", "=", "slim", ".", "max_pool2d", "(", "net", ",", "[", "3", ",", "3", "]", ",", "2", ",", "scope", "=", "'pool1'", ")", "\n", "\n", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "256", ",", "[", "5", ",", "5", "]", ",", "1", ",", "scope", "=", "'conv2'", ")", "\n", "net", "=", "slim", ".", "max_pool2d", "(", "net", ",", "[", "3", ",", "3", "]", ",", "2", ",", "scope", "=", "'pool2'", ")", "\n", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "384", ",", "[", "3", ",", "3", "]", ",", "1", ",", "scope", "=", "'conv3'", ")", "\n", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "384", ",", "[", "3", ",", "3", "]", ",", "1", ",", "scope", "=", "'conv4'", ")", "\n", "\n", "track_feature", "=", "slim", ".", "conv2d", "(", "net", ",", "256", ",", "[", "3", ",", "3", "]", ",", "1", ",", "activation_fn", "=", "None", ",", "normalizer_fn", "=", "None", ",", "scope", "=", "'conv5_track'", ")", "\n", "reid_feature", "=", "slim", ".", "conv2d", "(", "net", ",", "256", ",", "[", "3", ",", "3", "]", ",", "1", ",", "scope", "=", "'conv5_reid'", ")", "\n", "\n", "with", "tf", ".", "name_scope", "(", "'attention'", ")", ":", "\n", "        ", "def", "attach_attention_module", "(", "net", ",", "attention_module", ",", "block_scope", "=", "None", ",", "\n", "reuse", "=", "False", ")", ":", "\n", "          ", "def", "se_block", "(", "input_feature", ",", "name", ",", "reuse", "=", "False", ",", "ratio", "=", "4", ")", ":", "\n", "            ", "\"\"\"Contains the implementation of Squeeze-and-Excitation(SE) block.\n            As described in https://arxiv.org/abs/1709.01507.\n            \"\"\"", "\n", "\n", "kernel_initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "variance_scaling_initializer", "(", ")", "\n", "bias_initializer", "=", "tf", ".", "constant_initializer", "(", "value", "=", "0.0", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "              ", "channel", "=", "input_feature", ".", "get_shape", "(", ")", "[", "-", "1", "]", "\n", "# Global average pooling", "\n", "squeeze", "=", "tf", ".", "reduce_mean", "(", "input_feature", ",", "axis", "=", "[", "1", ",", "2", "]", ",", "keep_dims", "=", "True", ")", "\n", "assert", "squeeze", ".", "get_shape", "(", ")", "[", "1", ":", "]", "==", "(", "1", ",", "1", ",", "channel", ")", "\n", "excitation", "=", "tf", ".", "layers", ".", "dense", "(", "inputs", "=", "squeeze", ",", "\n", "units", "=", "channel", "//", "ratio", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "kernel_initializer", "=", "kernel_initializer", ",", "\n", "bias_initializer", "=", "bias_initializer", ",", "\n", "kernel_regularizer", "=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "5e-4", ")", ",", "\n", "name", "=", "'bottleneck_fc'", ",", "\n", "reuse", "=", "reuse", ")", "\n", "assert", "excitation", ".", "get_shape", "(", ")", "[", "1", ":", "]", "==", "(", "1", ",", "1", ",", "channel", "//", "ratio", ")", "\n", "excitation", "=", "tf", ".", "layers", ".", "dense", "(", "inputs", "=", "excitation", ",", "\n", "units", "=", "channel", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "sigmoid", ",", "\n", "kernel_initializer", "=", "kernel_initializer", ",", "\n", "bias_initializer", "=", "bias_initializer", ",", "\n", "kernel_regularizer", "=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "5e-4", ")", ",", "\n", "name", "=", "'recover_fc'", ",", "\n", "reuse", "=", "reuse", ")", "\n", "assert", "excitation", ".", "get_shape", "(", ")", "[", "1", ":", "]", "==", "(", "1", ",", "1", ",", "channel", ")", "\n", "scale", "=", "input_feature", "*", "excitation", "\n", "return", "scale", "\n", "\n", "", "", "if", "attention_module", "==", "'se_block'", ":", "# SE_block", "\n", "            ", "block_scope", "=", "'se_block'", "if", "block_scope", "is", "None", "else", "block_scope", "+", "'_SE'", "\n", "net", "=", "se_block", "(", "net", ",", "block_scope", ",", "reuse", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"'{}' is not supported attention module!\"", ".", "format", "(", "attention_module", ")", ")", "\n", "", "return", "net", "\n", "\n", "", "if", "CONFIG", ".", "ATTENTION", ":", "\n", "          ", "track_feature", "=", "attach_attention_module", "(", "track_feature", ",", "CONFIG", ".", "ATTENTION", ",", "'tracking'", ",", "reuse", "=", "reuse", ")", "\n", "reid_feature", "=", "attach_attention_module", "(", "reid_feature", ",", "CONFIG", ".", "ATTENTION", ",", "'re-id'", ",", "reuse", "=", "reuse", ")", "\n", "", "if", "stage", "==", "'init'", ":", "\n", "          ", "reid_feature", "=", "tf", ".", "reduce_mean", "(", "reid_feature", ",", "axis", "=", "[", "1", ",", "2", "]", ",", "keep_dims", "=", "True", ")", "# GAP", "\n", "reid_feature", "=", "tf", ".", "squeeze", "(", "reid_feature", ",", "[", "1", ",", "2", "]", ",", "name", "=", "'embedding/squeezed'", ")", "\n", "\n", "\n", "", "return", "track_feature", ",", "reid_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_inference.inference_wrapper.InferenceWrapper.__init__": [[18, 33], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "context_amount", ")", ":", "\n", "    ", "self", ".", "image", "=", "None", "\n", "self", ".", "target_bbox_feed", "=", "None", "\n", "self", ".", "search_images", "=", "None", "\n", "self", ".", "embeds", "=", "None", "\n", "self", ".", "init_templates", "=", "None", "\n", "self", ".", "init", "=", "None", "\n", "self", ".", "model_config", "=", "None", "\n", "self", ".", "track_config", "=", "None", "\n", "self", ".", "response_up", "=", "None", "\n", "self", ".", "response", "=", "None", "\n", "self", ".", "frame_templates", "=", "None", "\n", "self", ".", "instance_feature", "=", "None", "\n", "self", ".", "reid_embeds", "=", "None", "\n", "self", ".", "context_amount", "=", "context_amount", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_inference.inference_wrapper.InferenceWrapper.build_graph_from_config": [[34, 59], ["inference_wrapper.InferenceWrapper.build_model", "tensorflow.train.ExponentialMovingAverage", "tensorflow.train.ExponentialMovingAverage.variables_to_restore", "tf.train.ExponentialMovingAverage.variables_to_restore.items", "tensorflow.train.Saver", "os.isdir", "os.isdir", "tensorflow.train.latest_checkpoint", "logging.info", "tensorflow.train.Saver.restore", "logging.info", "ValueError", "os.path.basename", "os.path.basename", "os.path.basename", "os.path.basename", "key.split"], "methods", ["home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_inference.inference_wrapper.InferenceWrapper.build_model"], ["", "def", "build_graph_from_config", "(", "self", ",", "model_config", ",", "track_config", ",", "checkpoint_path", ")", ":", "\n", "    ", "\"\"\"Build the inference graph and return a restore function.\"\"\"", "\n", "self", ".", "build_model", "(", "model_config", ",", "track_config", ")", "\n", "ema", "=", "tf", ".", "train", ".", "ExponentialMovingAverage", "(", "0", ")", "\n", "variables_to_restore", "=", "ema", ".", "variables_to_restore", "(", "moving_avg_variables", "=", "[", "]", ")", "\n", "\n", "# Filter out State variables", "\n", "variables_to_restore_filterd", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "variables_to_restore", ".", "items", "(", ")", ":", "\n", "      ", "if", "key", ".", "split", "(", "'/'", ")", "[", "1", "]", "!=", "'State'", ":", "\n", "        ", "variables_to_restore_filterd", "[", "key", "]", "=", "value", "\n", "\n", "", "", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "variables_to_restore_filterd", ")", "\n", "\n", "if", "osp", ".", "isdir", "(", "checkpoint_path", ")", ":", "\n", "      ", "checkpoint_path", "=", "tf", ".", "train", ".", "latest_checkpoint", "(", "checkpoint_path", ")", "\n", "if", "not", "checkpoint_path", ":", "\n", "        ", "raise", "ValueError", "(", "\"No checkpoint file found in: {}\"", ".", "format", "(", "checkpoint_path", ")", ")", "\n", "\n", "", "", "def", "_restore_fn", "(", "sess", ")", ":", "\n", "      ", "logging", ".", "info", "(", "\"Loading model from checkpoint: %s\"", ",", "checkpoint_path", ")", "\n", "saver", ".", "restore", "(", "sess", ",", "checkpoint_path", ")", "\n", "logging", ".", "info", "(", "\"Successfully loaded checkpoint: %s\"", ",", "os", ".", "path", ".", "basename", "(", "checkpoint_path", ")", ")", "\n", "\n", "", "return", "_restore_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_inference.inference_wrapper.InferenceWrapper.build_model": [[60, 70], ["inference_wrapper.InferenceWrapper.build_inputs", "inference_wrapper.InferenceWrapper.build_search_images", "inference_wrapper.InferenceWrapper.build_template", "inference_wrapper.InferenceWrapper.build_detection", "inference_wrapper.InferenceWrapper.build_upsample", "tensorflow.no_op"], "methods", ["home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_inference.inference_wrapper.InferenceWrapper.build_inputs", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_inference.inference_wrapper.InferenceWrapper.build_search_images", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_inference.inference_wrapper.InferenceWrapper.build_template", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_inference.inference_wrapper.InferenceWrapper.build_detection", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_inference.inference_wrapper.InferenceWrapper.build_upsample"], ["", "def", "build_model", "(", "self", ",", "model_config", ",", "track_config", ")", ":", "\n", "    ", "self", ".", "model_config", "=", "model_config", "\n", "self", ".", "track_config", "=", "track_config", "\n", "\n", "self", ".", "build_inputs", "(", ")", "\n", "self", ".", "build_search_images", "(", ")", "\n", "self", ".", "build_template", "(", ")", "\n", "self", ".", "build_detection", "(", ")", "\n", "self", ".", "build_upsample", "(", ")", "\n", "self", ".", "dumb_op", "=", "tf", ".", "no_op", "(", "'dumb_operation'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_inference.inference_wrapper.InferenceWrapper.build_inputs": [[71, 82], ["tensorflow.placeholder", "tensorflow.read_file", "tensorflow.image.decode_jpeg", "tensorflow.to_float", "tensorflow.placeholder", "tensorflow.placeholder"], "methods", ["None"], ["", "def", "build_inputs", "(", "self", ")", ":", "\n", "    ", "filename", "=", "tf", ".", "placeholder", "(", "tf", ".", "string", ",", "[", "]", ",", "name", "=", "'filename'", ")", "\n", "image_file", "=", "tf", ".", "read_file", "(", "filename", ")", "\n", "image", "=", "tf", ".", "image", ".", "decode_jpeg", "(", "image_file", ",", "channels", "=", "3", ",", "dct_method", "=", "\"INTEGER_ACCURATE\"", ")", "\n", "image", "=", "tf", ".", "to_float", "(", "image", ")", "\n", "\n", "self", ".", "image", "=", "image", "\n", "self", ".", "target_bbox_feed", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "\n", "shape", "=", "[", "4", "]", ",", "\n", "name", "=", "'target_bbox_feed'", ")", "# center's y, x, height, width", "\n", "self", ".", "frame_templates", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "3", ",", "6", ",", "6", ",", "256", "]", ",", "name", "=", "'frame_templates_feed'", ")", "# track_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_inference.inference_wrapper.InferenceWrapper.build_search_images": [[83, 142], ["tensorflow.shape", "tensorflow.reduce_mean", "tensorflow.sqrt", "tensorflow.div", "tensorflow.div", "tensorflow.div", "tensorflow.stack", "tensorflow.stack", "tensorflow.expand_dims", "tensorflow.image.crop_and_resize", "numpy.arange", "tracker.Siamese_utils.misc_utils.get_center", "numpy.sum", "tensorflow.reduce_prod", "tensorflow.to_float", "tensorflow.to_float", "tensorflow.to_float", "tensorflow.div", "tensorflow.div", "tensorflow.concat", "tensorflow.stack.append", "scale_xs.append", "tensorflow.reduce_sum", "tensorflow.zeros", "tracker.Siamese_utils.misc_utils.get_center", "tracker.Siamese_utils.misc_utils.get_center"], "methods", ["home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.misc_utils.get_center", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.misc_utils.get_center", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.misc_utils.get_center"], ["", "def", "build_search_images", "(", "self", ")", ":", "\n", "    ", "\"\"\"Crop search images from the input image based on the last target position\n\n    1. The input image is scaled such that the area of target&context takes up to (scale_factor * z_image_size) ^ 2\n    2. Crop an image patch as large as x_image_size centered at the target center.\n    3. If the cropped image region is beyond the boundary of the input image, mean values are padded.\n    \"\"\"", "\n", "model_config", "=", "self", ".", "model_config", "\n", "track_config", "=", "self", ".", "track_config", "\n", "\n", "size_z", "=", "model_config", "[", "'z_image_size'", "]", "# 127", "\n", "size_x", "=", "track_config", "[", "'x_image_size'", "]", "# 255", "\n", "\n", "num_scales", "=", "track_config", "[", "'num_scales'", "]", "# 3", "\n", "scales", "=", "np", ".", "arange", "(", "num_scales", ")", "-", "get_center", "(", "num_scales", ")", "\n", "assert", "np", ".", "sum", "(", "scales", ")", "==", "0", ",", "'scales should be symmetric'", "\n", "search_factors", "=", "[", "track_config", "[", "'scale_step'", "]", "**", "x", "for", "x", "in", "scales", "]", "# pow(1.0375, -1), pow(1.0375, 0), pow(1.0375, 1)", "\n", "\n", "frame_sz", "=", "tf", ".", "shape", "(", "self", ".", "image", ")", "\n", "target_yx", "=", "self", ".", "target_bbox_feed", "[", "0", ":", "2", "]", "\n", "target_size", "=", "self", ".", "target_bbox_feed", "[", "2", ":", "4", "]", "\n", "avg_chan", "=", "tf", ".", "reduce_mean", "(", "self", ".", "image", ",", "axis", "=", "(", "0", ",", "1", ")", ",", "name", "=", "'avg_chan'", ")", "\n", "\n", "# Compute base values", "\n", "base_z_size", "=", "target_size", "# suppose [60, 120]", "\n", "base_z_context_size", "=", "base_z_size", "+", "self", ".", "context_amount", "*", "tf", ".", "reduce_sum", "(", "base_z_size", ")", "\n", "base_s_z", "=", "tf", ".", "sqrt", "(", "tf", ".", "reduce_prod", "(", "base_z_context_size", ")", ")", "# Canonical size, sqrt(87*147) = 113", "\n", "base_scale_z", "=", "tf", ".", "div", "(", "tf", ".", "to_float", "(", "size_z", ")", ",", "base_s_z", ")", "# 127 / 113 = 1.124", "\n", "d_search", "=", "(", "size_x", "-", "size_z", ")", "/", "2.0", "# 64", "\n", "base_pad", "=", "tf", ".", "div", "(", "d_search", ",", "base_scale_z", ")", "# 64 / 1.124 =57", "\n", "base_s_x", "=", "base_s_z", "+", "2", "*", "base_pad", "# 113 + 2*57 = 227", "\n", "base_scale_x", "=", "tf", ".", "div", "(", "tf", ".", "to_float", "(", "size_x", ")", ",", "base_s_x", ")", "# 255 / 227 = 1.123", "\n", "\n", "boxes", "=", "[", "]", "\n", "\n", "for", "factor", "in", "search_factors", ":", "\n", "      ", "s_x", "=", "factor", "*", "base_s_x", "# 1.0375 x 227", "\n", "frame_sz_1", "=", "tf", ".", "to_float", "(", "frame_sz", "[", "0", ":", "2", "]", "-", "1", ")", "\n", "# self.frame_shape = frame_sz_1", "\n", "topleft", "=", "tf", ".", "div", "(", "target_yx", "-", "get_center", "(", "s_x", ")", ",", "frame_sz_1", ")", "\n", "bottomright", "=", "tf", ".", "div", "(", "target_yx", "+", "get_center", "(", "s_x", ")", ",", "frame_sz_1", ")", "\n", "box", "=", "tf", ".", "concat", "(", "[", "topleft", ",", "bottomright", "]", ",", "axis", "=", "0", ")", "\n", "boxes", ".", "append", "(", "box", ")", "\n", "\n", "", "boxes", "=", "tf", ".", "stack", "(", "boxes", ")", "\n", "scale_xs", "=", "[", "]", "\n", "for", "factor", "in", "search_factors", ":", "\n", "      ", "scale_x", "=", "base_scale_x", "/", "factor", "\n", "scale_xs", ".", "append", "(", "scale_x", ")", "\n", "", "self", ".", "scale_xs", "=", "tf", ".", "stack", "(", "scale_xs", ")", "\n", "\n", "# Note we use different padding values for each image", "\n", "# while the original implementation uses only the average value", "\n", "# of the first image for all images.", "\n", "image_minus_avg", "=", "tf", ".", "expand_dims", "(", "self", ".", "image", "-", "avg_chan", ",", "0", ")", "\n", "image_cropped", "=", "tf", ".", "image", ".", "crop_and_resize", "(", "image_minus_avg", ",", "boxes", ",", "\n", "box_ind", "=", "tf", ".", "zeros", "(", "(", "track_config", "[", "'num_scales'", "]", ")", ",", "tf", ".", "int32", ")", ",", "\n", "crop_size", "=", "[", "size_x", ",", "size_x", "]", ")", "\n", "self", ".", "search_images", "=", "image_cropped", "+", "avg_chan", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_inference.inference_wrapper.InferenceWrapper.get_image_embedding": [[143, 157], ["tracker.Siamese_inference.convolutional_alexnet.convolutional_alexnet_arg_scope", "functools.wraps", "inference_wrapper.InferenceWrapper.get_image_embedding.embedding_fn"], "methods", ["home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_inference.convolutional_alexnet.convolutional_alexnet_arg_scope"], ["", "def", "get_image_embedding", "(", "self", ",", "images", ",", "stage", "=", "'init'", ",", "reuse", "=", "None", ")", ":", "\n", "\n", "      ", "config", "=", "self", ".", "model_config", "[", "'embed_config'", "]", "\n", "arg_scope", "=", "convolutional_alexnet_arg_scope", "(", "config", ",", "\n", "trainable", "=", "config", "[", "'train_embedding'", "]", ",", "\n", "is_training", "=", "False", ")", "\n", "\n", "@", "functools", ".", "wraps", "(", "convolutional_alexnet", ")", "\n", "def", "embedding_fn", "(", "images", ",", "stage", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "with", "slim", ".", "arg_scope", "(", "arg_scope", ")", ":", "\n", "          ", "return", "convolutional_alexnet", "(", "images", ",", "stage", "=", "stage", ",", "reuse", "=", "reuse", ")", "\n", "\n", "", "", "track_feature", ",", "reid_feature_squeeze", "=", "embedding_fn", "(", "images", ",", "stage", ",", "reuse", ")", "\n", "return", "track_feature", ",", "reid_feature_squeeze", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_inference.inference_wrapper.InferenceWrapper.build_template": [[158, 187], ["tracker.Siamese_utils.infer_utils.get_exemplar_images", "inference_wrapper.InferenceWrapper.get_image_embedding", "int", "tensorflow.identity", "tensorflow.identity", "tensorflow.stack", "tracker.Siamese_utils.misc_utils.get_center", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.get_variable", "range", "tensorflow.control_dependencies", "tensorflow.assign", "tensorflow.zeros", "tensorflow.stack.get_shape().as_list", "tensorflow.stack.get_shape"], "methods", ["home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.infer_utils.get_exemplar_images", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_inference.inference_wrapper.InferenceWrapper.get_image_embedding", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.misc_utils.get_center"], ["", "def", "build_template", "(", "self", ")", ":", "\n", "\n", "    ", "model_config", "=", "self", ".", "model_config", "\n", "track_config", "=", "self", ".", "track_config", "\n", "\n", "# Exemplar image lies at the center of the search image in the first frame", "\n", "exemplar_images", "=", "get_exemplar_images", "(", "self", ".", "search_images", ",", "[", "model_config", "[", "'z_image_size'", "]", ",", "\n", "model_config", "[", "'z_image_size'", "]", "]", ")", "\n", "\n", "self", ".", "exemplar", "=", "exemplar_images", "\n", "templates", ",", "reid_templates", "=", "self", ".", "get_image_embedding", "(", "exemplar_images", ",", "stage", "=", "'init'", ")", "\n", "\n", "center_scale", "=", "int", "(", "get_center", "(", "track_config", "[", "'num_scales'", "]", ")", ")", "\n", "center_template", "=", "tf", ".", "identity", "(", "templates", "[", "center_scale", "]", ")", "# Shared feature", "\n", "self", ".", "center_template", "=", "center_template", "\n", "self", ".", "reid_templates", "=", "tf", ".", "identity", "(", "reid_templates", "[", "center_scale", "]", ")", "\n", "\n", "\n", "templates", "=", "tf", ".", "stack", "(", "[", "center_template", "for", "_", "in", "range", "(", "track_config", "[", "'num_scales'", "]", ")", "]", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'target_template'", ")", ":", "\n", "# Store template in Variable such that we don't have to feed this template every time.", "\n", "      ", "with", "tf", ".", "variable_scope", "(", "'State'", ")", ":", "\n", "        ", "state", "=", "tf", ".", "get_variable", "(", "'exemplar'", ",", "\n", "initializer", "=", "tf", ".", "zeros", "(", "templates", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ",", "dtype", "=", "templates", ".", "dtype", ")", ",", "\n", "trainable", "=", "False", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "templates", "]", ")", ":", "\n", "          ", "self", ".", "init", "=", "tf", ".", "assign", "(", "state", ",", "templates", ",", "validate_shape", "=", "True", ")", "\n", "", "self", ".", "init_templates", "=", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_inference.inference_wrapper.InferenceWrapper.build_detection": [[188, 209], ["inference_wrapper.InferenceWrapper.get_image_embedding", "tensorflow.variable_scope", "tensorflow.map_fn", "tensorflow.squeeze", "tensorflow.get_variable", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.nn.conv2d", "inference_wrapper.InferenceWrapper.build_detection._translation_match"], "methods", ["home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_inference.inference_wrapper.InferenceWrapper.get_image_embedding"], ["", "", "", "def", "build_detection", "(", "self", ")", ":", "#  co-relation", "\n", "\n", "    ", "self", ".", "embeds", ",", "self", ".", "reid_embeds", "=", "self", ".", "get_image_embedding", "(", "self", ".", "search_images", ",", "stage", "=", "'track'", ",", "reuse", "=", "True", ")", "# [3, 22, 22, 256]", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'detection'", ")", ":", "\n", "      ", "def", "_translation_match", "(", "x", ",", "z", ")", ":", "\n", "        ", "x", "=", "tf", ".", "expand_dims", "(", "x", ",", "0", ")", "# [batch, in_height, in_width, in_channels]", "\n", "z", "=", "tf", ".", "expand_dims", "(", "z", ",", "-", "1", ")", "# [filter_height, filter_width, in_channels, out_channels]", "\n", "return", "tf", ".", "nn", ".", "conv2d", "(", "x", ",", "z", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'VALID'", ",", "name", "=", "'translation_match'", ")", "\n", "\n", "", "output", "=", "tf", ".", "map_fn", "(", "\n", "lambda", "x", ":", "_translation_match", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", ")", ",", "\n", "(", "self", ".", "embeds", ",", "self", ".", "frame_templates", ")", ",", "dtype", "=", "self", ".", "embeds", ".", "dtype", ")", "# of shape [3, 1, 17, 17, 1]", "\n", "output", "=", "tf", ".", "squeeze", "(", "output", ",", "[", "1", ",", "4", "]", ")", "# of shape e.g. [3, 17, 17]", "\n", "\n", "bias", "=", "tf", ".", "get_variable", "(", "'biases'", ",", "[", "1", "]", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "trainable", "=", "False", ")", "\n", "response", "=", "self", ".", "model_config", "[", "'adjust_response_config'", "]", "[", "'scale'", "]", "*", "output", "+", "bias", "\n", "self", ".", "response", "=", "response", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_inference.inference_wrapper.InferenceWrapper.build_upsample": [[210, 226], ["tensorflow.variable_scope", "tensorflow.expand_dims", "tensorflow.image.resize_images", "tensorflow.squeeze", "inference_wrapper.InferenceWrapper.response.get_shape().as_list", "inference_wrapper.InferenceWrapper.response.get_shape"], "methods", ["None"], ["", "", "def", "build_upsample", "(", "self", ")", ":", "\n", "    ", "\"\"\"Upsample response to obtain finer target position\"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "'upsample'", ")", ":", "\n", "      ", "response", "=", "tf", ".", "expand_dims", "(", "self", ".", "response", ",", "3", ")", "# [3,17,17,1]", "\n", "up_method", "=", "self", ".", "track_config", "[", "'upsample_method'", "]", "\n", "methods", "=", "{", "'bilinear'", ":", "tf", ".", "image", ".", "ResizeMethod", ".", "BILINEAR", ",", "\n", "'bicubic'", ":", "tf", ".", "image", ".", "ResizeMethod", ".", "BICUBIC", "}", "\n", "up_method", "=", "methods", "[", "up_method", "]", "\n", "response_spatial_size", "=", "self", ".", "response", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", ":", "3", "]", "\n", "up_size", "=", "[", "s", "*", "self", ".", "track_config", "[", "'upsample_factor'", "]", "for", "s", "in", "response_spatial_size", "]", "# [272,272]", "\n", "response_up", "=", "tf", ".", "image", ".", "resize_images", "(", "response", ",", "\n", "up_size", ",", "\n", "method", "=", "up_method", ",", "\n", "align_corners", "=", "True", ")", "\n", "response_up", "=", "tf", ".", "squeeze", "(", "response_up", ",", "[", "3", "]", ")", "# [3, 272, 272]", "\n", "self", ".", "response_up", "=", "response_up", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_inference.inference_wrapper.InferenceWrapper.initialize": [[227, 233], ["sess.run", "inference_wrapper.InferenceWrapper.init_templates.eval"], "methods", ["home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.show_results.Visualization.run"], ["", "", "def", "initialize", "(", "self", ",", "sess", ",", "input_feed", ")", ":", "\n", "    ", "image_path", ",", "target_bbox", "=", "input_feed", "\n", "_", ",", "_", ",", "reid_templates", "=", "sess", ".", "run", "(", "[", "self", ".", "scale_xs", ",", "self", ".", "init", ",", "self", ".", "reid_templates", "]", ",", "feed_dict", "=", "{", "'filename:0'", ":", "image_path", ",", "\"target_bbox_feed:0\"", ":", "target_bbox", ",", "}", ")", "\n", "init_templates", "=", "self", ".", "init_templates", ".", "eval", "(", "session", "=", "sess", ")", "\n", "\n", "return", "init_templates", ",", "reid_templates", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_inference.inference_wrapper.InferenceWrapper.inference_step": [[234, 252], ["sess.run"], "methods", ["home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.application_util.show_results.Visualization.run"], ["", "def", "inference_step", "(", "self", ",", "sess", ",", "input_feed", ")", ":", "\n", "    ", "image_path", ",", "target_bbox", ",", "frame_templates", "=", "input_feed", "#  input_feed = [filename, bbox_feed, templates]", "\n", "log_level", "=", "self", ".", "track_config", "[", "'log_level'", "]", "\n", "image_cropped_op", "=", "self", ".", "search_images", "if", "log_level", ">", "0", "else", "self", ".", "dumb_op", "\n", "image_cropped", ",", "scale_xs", ",", "response_up", ",", "instance_track", ",", "instance_reid", "=", "sess", ".", "run", "(", "\n", "fetches", "=", "[", "image_cropped_op", ",", "self", ".", "scale_xs", ",", "self", ".", "response_up", ",", "self", ".", "embeds", ",", "self", ".", "reid_embeds", "]", ",", "\n", "feed_dict", "=", "{", "\n", "\"filename:0\"", ":", "image_path", ",", "\n", "\"target_bbox_feed:0\"", ":", "target_bbox", ",", "\n", "\"frame_templates_feed:0\"", ":", "frame_templates", "}", ")", "\n", "\n", "output", "=", "{", "\n", "'scale_xs'", ":", "scale_xs", ",", "\n", "'response_up'", ":", "response_up", ",", "\n", "'instance'", ":", "instance_track", ",", "\n", "'instance_reid'", ":", "instance_reid", "\n", "}", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_inference.Siamese_tracker.TargetState.__init__": [[10, 24], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "bbox", ",", "search_pos", ",", "scale_idx", ",", "his_feature", ",", "original_search_center", ",", "original_target_wh", ",", "init_templates", ",", "reid_templates", ",", "similarity", ",", "bbox_in", ")", ":", "\n", "    ", "self", ".", "bbox", "=", "bbox", "# (cx, cy, w, h) in the original image", "\n", "self", ".", "search_pos", "=", "search_pos", "# target center position in the search image", "\n", "self", ".", "scale_idx", "=", "scale_idx", "# scale index in the searched scales", "\n", "self", ".", "original_search_center", "=", "original_search_center", "\n", "self", ".", "original_target_wh", "=", "original_target_wh", "\n", "self", ".", "init_templates", "=", "init_templates", "\n", "self", ".", "reid_templates", "=", "reid_templates", "\n", "self", ".", "similarity", "=", "similarity", "\n", "self", ".", "bbox_in", "=", "bbox_in", "\n", "self", ".", "his_feature", "=", "his_feature", "\n", "self", ".", "old_bbox", "=", "bbox", "\n", "self", ".", "old_scale_idx", "=", "scale_idx", "\n", "self", ".", "old_search_pos", "=", "search_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_inference.Siamese_tracker.Siamese_Tracker.__init__": [[29, 41], ["logging.info", "numpy.arange", "tracker.Siamese_utils.misc_utils.get_center"], "methods", ["home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.misc_utils.get_center"], ["def", "__init__", "(", "self", ",", "siamese_model", ",", "model_config", ",", "track_config", ")", ":", "\n", "    ", "self", ".", "siamese_model", "=", "siamese_model", "\n", "self", ".", "model_config", "=", "model_config", "\n", "self", ".", "track_config", "=", "track_config", "\n", "\n", "self", ".", "num_scales", "=", "track_config", "[", "'num_scales'", "]", "\n", "logging", ".", "info", "(", "'track num scales -- {}'", ".", "format", "(", "self", ".", "num_scales", ")", ")", "\n", "scales", "=", "np", ".", "arange", "(", "self", ".", "num_scales", ")", "-", "get_center", "(", "self", ".", "num_scales", ")", "\n", "self", ".", "search_factors", "=", "[", "self", ".", "track_config", "[", "'scale_step'", "]", "**", "x", "for", "x", "in", "scales", "]", "#0.963, 1, 1.0375", "\n", "self", ".", "x_image_size", "=", "track_config", "[", "'x_image_size'", "]", "# Search image size 255", "\n", "self", ".", "window", "=", "None", "# Cosine window", "\n", "self", ".", "log_level", "=", "track_config", "[", "'log_level'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_inference.Siamese_tracker.Siamese_Tracker.init_tracks": [[42, 71], ["tracker.Siamese_utils.infer_utils.Rectangle", "tracker.Siamese_utils.infer_utils.convert_bbox_format", "Siamese_tracker.Siamese_Tracker.siamese_model.initialize", "his_feature.append", "numpy.array", "Siamese_tracker.TargetState", "int", "int", "int", "int", "tracker.Siamese_utils.misc_utils.get_center", "tracker.Siamese_utils.misc_utils.get_center", "int", "tracker.Siamese_utils.misc_utils.get_center"], "methods", ["home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.infer_utils.convert_bbox_format", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_inference.inference_wrapper.InferenceWrapper.initialize", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.misc_utils.get_center", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.misc_utils.get_center", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.misc_utils.get_center"], ["", "def", "init_tracks", "(", "self", ",", "sess", ",", "det", ",", "filename", ")", ":", "\n", "\n", "# Get initial target bounding box and convert to center based", "\n", "    ", "init_bb", "=", "Rectangle", "(", "int", "(", "det", "[", "0", "]", ")", "-", "1", ",", "int", "(", "det", "[", "1", "]", ")", "-", "1", ",", "int", "(", "det", "[", "2", "]", ")", ",", "int", "(", "det", "[", "3", "]", ")", ")", "\n", "bbox", "=", "convert_bbox_format", "(", "init_bb", ",", "'center-based'", ")", "\n", "\n", "# Feed in the first frame image to set initial state.", "\n", "bbox_feed", "=", "[", "bbox", ".", "y", ",", "bbox", ".", "x", ",", "bbox", ".", "height", ",", "bbox", ".", "width", "]", "\n", "bbox_in", "=", "[", "init_bb", ".", "x", ",", "init_bb", ".", "y", ",", "init_bb", ".", "width", ",", "init_bb", ".", "height", "]", "\n", "input_feed", "=", "[", "filename", ",", "bbox_feed", "]", "\n", "templates", ",", "reid_templates", "=", "self", ".", "siamese_model", ".", "initialize", "(", "sess", ",", "input_feed", ")", "\n", "\n", "his_feature", "=", "[", "]", "\n", "his_feature", ".", "append", "(", "reid_templates", ")", "\n", "\n", "search_center", "=", "np", ".", "array", "(", "[", "get_center", "(", "self", ".", "x_image_size", ")", ",", "\n", "get_center", "(", "self", ".", "x_image_size", ")", "]", ")", "\n", "current_target_state", "=", "TargetState", "(", "bbox", "=", "bbox", ",", "\n", "search_pos", "=", "search_center", ",", "\n", "original_search_center", "=", "search_center", ",", "\n", "scale_idx", "=", "int", "(", "get_center", "(", "self", ".", "num_scales", ")", ")", ",", "\n", "original_target_wh", "=", "[", "bbox", ".", "width", ",", "bbox", ".", "height", "]", ",", "\n", "init_templates", "=", "templates", ",", "# used for SOT", "\n", "his_feature", "=", "his_feature", ",", "# used for re-id", "\n", "reid_templates", "=", "reid_templates", ",", "\n", "similarity", "=", "1.0", ",", "\n", "bbox_in", "=", "bbox_in", ",", "\n", ")", "# bbox_in  [x,y,w,h]", "\n", "return", "current_target_state", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_inference.Siamese_tracker.Siamese_Tracker.track": [[72, 248], ["Siamese_tracker.Siamese_Tracker.siamese_model.inference_step", "numpy.unravel_index", "numpy.array", "int", "numpy.maximum", "numpy.mean", "Siamese_tracker.Siamese_Tracker.track.npair_distance"], "methods", ["home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_inference.inference_wrapper.InferenceWrapper.inference_step", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.tracker.mot_tracker.MOT_Tracker.npair_distance"], ["", "def", "track", "(", "self", ",", "sess", ",", "current_target_state", ",", "filename", ")", ":", "\n", "    ", "\"\"\"Runs tracking on a single image sequence.\"\"\"", "\n", "\n", "def", "roi_align", "(", "image", ",", "disp_instance_feat", ",", "height", ",", "width", ")", ":", "\n", "      ", "\"\"\"\n      `image` is a 3-D array, representing the input feature map\n      `disp_instance_feat` box center\n      `height` and `width` are the desired spatial size of output feature map\n      \"\"\"", "\n", "crop_center", "=", "disp_instance_feat", "+", "get_center", "(", "image", ".", "shape", "[", "0", "]", ")", "\n", "crop_box", "=", "[", "np", ".", "maximum", "(", "crop_center", "[", "0", "]", "-", "3", ",", "0", ")", ",", "np", ".", "maximum", "(", "crop_center", "[", "1", "]", "-", "3", ",", "0", ")", ",", "\n", "np", ".", "minimum", "(", "crop_center", "[", "0", "]", "+", "3", ",", "image", ".", "shape", "[", "0", "]", ")", ",", "\n", "np", ".", "minimum", "(", "crop_center", "[", "1", "]", "+", "3", ",", "image", ".", "shape", "[", "0", "]", ")", "]", "\n", "if", "(", "int", "(", "crop_box", "[", "2", "]", "-", "crop_box", "[", "0", "]", ")", "!=", "6", ")", "or", "(", "int", "(", "crop_box", "[", "3", "]", "-", "crop_box", "[", "1", "]", ")", "!=", "6", ")", ":", "# pad if reach boundary", "\n", "        ", "image", "=", "np", ".", "pad", "(", "image", ",", "(", "(", "6", ",", "6", ")", ",", "(", "6", ",", "6", ")", ",", "(", "0", ",", "0", ")", ")", ",", "'constant'", ",", "constant_values", "=", "np", ".", "mean", "(", "image", ")", ")", "\n", "crop_center", "=", "crop_center", "+", "6", "\n", "crop_box", "=", "[", "crop_center", "[", "0", "]", "-", "3", ",", "crop_center", "[", "1", "]", "-", "3", ",", "crop_center", "[", "0", "]", "+", "3", ",", "crop_center", "[", "1", "]", "+", "3", "]", "\n", "\n", "", "crop_box", "=", "[", "ele", "/", "image", ".", "shape", "[", "0", "]", "for", "ele", "in", "crop_box", "]", "\n", "\n", "y_min", ",", "x_min", ",", "y_max", ",", "x_max", "=", "crop_box", "\n", "\n", "img_height", ",", "img_width", ",", "channel_num", "=", "image", ".", "shape", "\n", "\n", "feature_map", "=", "[", "]", "\n", "\n", "for", "y", "in", "np", ".", "linspace", "(", "y_min", ",", "y_max", ",", "height", ")", "*", "(", "img_height", "-", "1", ")", ":", "\n", "        ", "for", "x", "in", "np", ".", "linspace", "(", "x_min", ",", "x_max", ",", "width", ")", "*", "(", "img_height", "-", "1", ")", ":", "\n", "          ", "y_l", ",", "y_h", "=", "np", ".", "floor", "(", "y", ")", ".", "astype", "(", "'int32'", ")", ",", "np", ".", "ceil", "(", "y", ")", ".", "astype", "(", "'int32'", ")", "\n", "x_l", ",", "x_h", "=", "np", ".", "floor", "(", "x", ")", ".", "astype", "(", "'int32'", ")", ",", "np", ".", "ceil", "(", "x", ")", ".", "astype", "(", "'int32'", ")", "\n", "\n", "a", "=", "image", "[", "y_l", ",", "x_l", "]", "\n", "b", "=", "image", "[", "y_l", ",", "x_h", "]", "\n", "c", "=", "image", "[", "y_h", ",", "x_l", "]", "\n", "d", "=", "image", "[", "y_h", ",", "x_h", "]", "\n", "\n", "y_weight", "=", "y", "-", "y_l", "\n", "x_weight", "=", "x", "-", "x_l", "\n", "\n", "val", "=", "a", "*", "(", "1", "-", "x_weight", ")", "*", "(", "1", "-", "y_weight", ")", "+", "b", "*", "x_weight", "*", "(", "1", "-", "y_weight", ")", "+", "c", "*", "y_weight", "*", "(", "1", "-", "x_weight", ")", "+", "d", "*", "x_weight", "*", "y_weight", "\n", "\n", "feature_map", ".", "append", "(", "val", ")", "\n", "\n", "", "", "return", "np", ".", "array", "(", "feature_map", ")", ".", "reshape", "(", "height", ",", "width", ",", "channel_num", ")", "\n", "\n", "", "def", "roi_crop", "(", "disp_instance_feat", ",", "instance", ")", ":", "\n", "      ", "instance_pad", "=", "instance", ".", "copy", "(", ")", "\n", "crop_center", "=", "np", ".", "round", "(", "disp_instance_feat", "+", "get_center", "(", "instance_size", ")", ")", ".", "astype", "(", "int", ")", "\n", "crop_box", "=", "[", "np", ".", "maximum", "(", "crop_center", "[", "0", "]", "-", "3", ",", "0", ")", ",", "np", ".", "maximum", "(", "crop_center", "[", "1", "]", "-", "3", ",", "0", ")", ",", "\n", "np", ".", "minimum", "(", "crop_center", "[", "0", "]", "+", "3", ",", "instance_size", ")", ",", "\n", "np", ".", "minimum", "(", "crop_center", "[", "1", "]", "+", "3", ",", "instance_size", ")", "]", "\n", "if", "(", "int", "(", "crop_box", "[", "2", "]", "-", "crop_box", "[", "0", "]", ")", "!=", "6", ")", "or", "(", "int", "(", "crop_box", "[", "3", "]", "-", "crop_box", "[", "1", "]", ")", "!=", "6", ")", ":", "# padding if reach border", "\n", "        ", "instance_pad", "=", "np", ".", "pad", "(", "instance_pad", ",", "(", "(", "6", ",", "6", ")", ",", "(", "6", ",", "6", ")", ",", "(", "0", ",", "0", ")", ")", ",", "'constant'", ",", "constant_values", "=", "np", ".", "mean", "(", "instance_pad", ")", ")", "\n", "crop_center", "=", "crop_center", "+", "6", "\n", "crop_box", "=", "[", "crop_center", "[", "0", "]", "-", "3", ",", "crop_center", "[", "1", "]", "-", "3", ",", "crop_center", "[", "0", "]", "+", "3", ",", "crop_center", "[", "1", "]", "+", "3", "]", "\n", "# print(crop_box)", "\n", "", "instance_crop", "=", "instance_pad", "[", "crop_box", "[", "0", "]", ":", "crop_box", "[", "2", "]", ",", "crop_box", "[", "1", "]", ":", "crop_box", "[", "3", "]", ",", ":", "]", "\n", "return", "instance_crop", "\n", "\n", "", "def", "npair_distance", "(", "a", ",", "b", ",", "data_is_normalized", "=", "False", ")", ":", "\n", "        ", "b", "=", "np", ".", "vstack", "(", "b", ")", "\n", "a", "=", "np", ".", "reshape", "(", "a", ",", "(", "1", ",", "-", "1", ")", ")", "\n", "b", "=", "np", ".", "reshape", "(", "b", ",", "(", "b", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "if", "not", "data_is_normalized", ":", "\n", "            ", "a", "=", "np", ".", "asarray", "(", "a", ")", "/", "np", ".", "linalg", ".", "norm", "(", "a", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "b", "=", "np", ".", "asarray", "(", "b", ")", "/", "np", ".", "linalg", ".", "norm", "(", "b", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "", "return", "np", ".", "mean", "(", "np", ".", "dot", "(", "a", ",", "b", ".", "T", ")", ")", "\n", "\n", "", "current_target_state", ".", "old_bbox", "=", "current_target_state", ".", "bbox", "# [x_c,y_c,w,h]", "\n", "current_target_state", ".", "old_scale_idx", "=", "current_target_state", ".", "scale_idx", "\n", "current_target_state", ".", "old_search_pos", "=", "current_target_state", ".", "search_pos", "\n", "\n", "bbox_feed", "=", "[", "current_target_state", ".", "bbox", ".", "y", ",", "current_target_state", ".", "bbox", ".", "x", ",", "\n", "current_target_state", ".", "bbox", ".", "height", ",", "current_target_state", ".", "bbox", ".", "width", "]", "# center x y", "\n", "bbox_feed_ltwh", "=", "[", "current_target_state", ".", "bbox", ".", "x", "-", "current_target_state", ".", "bbox", ".", "width", "/", "2", ",", "\n", "current_target_state", ".", "bbox", ".", "y", "-", "current_target_state", ".", "bbox", ".", "height", "/", "2", ",", "\n", "current_target_state", ".", "bbox", ".", "width", ",", "current_target_state", ".", "bbox", ".", "height", "]", "\n", "\n", "templates", "=", "current_target_state", ".", "init_templates", "\n", "input_feed", "=", "[", "filename", ",", "bbox_feed", ",", "templates", "]", "\n", "outputs", "=", "self", ".", "siamese_model", ".", "inference_step", "(", "sess", ",", "input_feed", ")", "\n", "search_scale_list", "=", "outputs", "[", "'scale_xs'", "]", "\n", "response", "=", "outputs", "[", "'response_up'", "]", "# [3,272,272]", "\n", "instance", "=", "outputs", "[", "'instance'", "]", "# [3,22,22,256]", "\n", "reid_instance", "=", "outputs", "[", "'instance_reid'", "]", "# [3,22,22,256]", "\n", "response_size", "=", "response", ".", "shape", "[", "1", "]", "\n", "instance_size", "=", "instance", ".", "shape", "[", "1", "]", "\n", "\n", "# Choose the scale whole response map has the highest peak", "\n", "if", "self", ".", "num_scales", ">", "1", ":", "\n", "      ", "response_max", "=", "np", ".", "max", "(", "response", ",", "axis", "=", "(", "1", ",", "2", ")", ")", "\n", "penalties", "=", "self", ".", "track_config", "[", "'scale_penalty'", "]", "*", "np", ".", "ones", "(", "self", ".", "num_scales", ")", "\n", "current_scale_idx", "=", "int", "(", "get_center", "(", "self", ".", "num_scales", ")", ")", "\n", "penalties", "[", "current_scale_idx", "]", "=", "1.0", "\n", "response_penalized", "=", "response_max", "*", "penalties", "\n", "best_scale", "=", "np", ".", "argmax", "(", "response_penalized", ")", "\n", "", "else", ":", "\n", "      ", "best_scale", "=", "0", "\n", "\n", "", "response", "=", "response", "[", "best_scale", "]", "\n", "\n", "with", "np", ".", "errstate", "(", "all", "=", "'raise'", ")", ":", "# Raise error if something goes wrong", "\n", "      ", "response", "=", "response", "-", "np", ".", "min", "(", "response", ")", "\n", "response", "=", "response", "/", "np", ".", "sum", "(", "response", ")", "\n", "\n", "", "if", "self", ".", "window", "is", "None", ":", "# suppress the border", "\n", "      ", "window", "=", "np", ".", "dot", "(", "np", ".", "expand_dims", "(", "np", ".", "hanning", "(", "response_size", ")", ",", "1", ")", ",", "\n", "np", ".", "expand_dims", "(", "np", ".", "hanning", "(", "response_size", ")", ",", "0", ")", ")", "\n", "self", ".", "window", "=", "window", "/", "np", ".", "sum", "(", "window", ")", "# normalize window", "\n", "", "window_influence", "=", "self", ".", "track_config", "[", "'window_influence'", "]", "# 0.3", "\n", "response", "=", "(", "1", "-", "window_influence", ")", "*", "response", "+", "window_influence", "*", "self", ".", "window", "\n", "# Find maximum response", "\n", "r_max", ",", "c_max", "=", "np", ".", "unravel_index", "(", "response", ".", "argmax", "(", ")", ",", "response", ".", "shape", ")", "\n", "\n", "# Convert from crop-relative coordinates to frame coordinates", "\n", "p_coor", "=", "np", ".", "array", "(", "[", "r_max", ",", "c_max", "]", ")", "\n", "\n", "# displacement from the center in instance final representation (response comes from instance)", "\n", "disp_instance_final", "=", "p_coor", "-", "get_center", "(", "response_size", ")", "\n", "\n", "# ... in instance feature space ...", "\n", "upsample_factor", "=", "self", ".", "track_config", "[", "'upsample_factor'", "]", "\n", "disp_instance_feat", "=", "disp_instance_final", "/", "upsample_factor", "\n", "# ... Avoid empty position ...", "\n", "r_radius", "=", "int", "(", "response_size", "/", "upsample_factor", "/", "2", ")", "\n", "disp_instance_feat", "=", "np", ".", "maximum", "(", "np", ".", "minimum", "(", "disp_instance_feat", ",", "r_radius", ")", ",", "-", "r_radius", ")", "\n", "\n", "# ... in instance input ...", "\n", "disp_instance_input", "=", "disp_instance_feat", "*", "self", ".", "model_config", "[", "'embed_config'", "]", "[", "'stride'", "]", "\n", "# ... in instance original crop (in frame coordinates)", "\n", "disp_instance_frame", "=", "disp_instance_input", "/", "search_scale_list", "[", "best_scale", "]", "\n", "# Position within frame in frame coordinates", "\n", "y", "=", "current_target_state", ".", "bbox", ".", "y", "\n", "x", "=", "current_target_state", ".", "bbox", ".", "x", "\n", "y", "+=", "disp_instance_frame", "[", "0", "]", "\n", "x", "+=", "disp_instance_frame", "[", "1", "]", "\n", "\n", "# compute the similarity", "\n", "instance_reid_crop1", "=", "np", ".", "mean", "(", "roi_crop", "(", "disp_instance_feat", ",", "reid_instance", "[", "best_scale", "]", ")", ",", "axis", "=", "(", "0", ",", "1", ")", ")", "\n", "similarity1", "=", "npair_distance", "(", "instance_reid_crop1", ",", "current_target_state", ".", "his_feature", ")", "\n", "\n", "# instance_reid_crop2 = np.mean(roi_align(reid_instance[best_scale], disp_instance_feat, 6, 6), axis=(0, 1))", "\n", "# similarity2 = npair_distance(instance_reid_crop2, current_target_state.his_feature)", "\n", "\n", "current_target_state", ".", "similarity", "=", "similarity1", "\n", "\n", "# Target scale damping and saturation", "\n", "original_target_width", "=", "current_target_state", ".", "original_target_wh", "[", "0", "]", "\n", "original_target_height", "=", "current_target_state", ".", "original_target_wh", "[", "1", "]", "\n", "\n", "target_scale", "=", "current_target_state", ".", "bbox", ".", "height", "/", "original_target_height", "\n", "search_factor", "=", "self", ".", "search_factors", "[", "best_scale", "]", "\n", "scale_damp", "=", "self", ".", "track_config", "[", "'scale_damp'", "]", "# damping factor for scale update", "\n", "target_scale", "*=", "(", "(", "1", "-", "scale_damp", ")", "*", "1.0", "+", "scale_damp", "*", "search_factor", ")", "\n", "target_scale", "=", "np", ".", "maximum", "(", "0.5", ",", "np", ".", "minimum", "(", "1.5", ",", "target_scale", ")", ")", "\n", "\n", "# Some book keeping", "\n", "height", "=", "original_target_height", "*", "target_scale", "\n", "width", "=", "original_target_width", "*", "target_scale", "\n", "current_target_state", ".", "bbox", "=", "Rectangle", "(", "x", ",", "y", ",", "width", ",", "height", ")", "\n", "current_target_state", ".", "scale_idx", "=", "best_scale", "\n", "current_target_state", ".", "search_pos", "=", "current_target_state", ".", "original_search_center", "+", "disp_instance_input", "\n", "current_target_state", ".", "bbox_in", "=", "bbox_feed_ltwh", "\n", "\n", "assert", "0", "<=", "current_target_state", ".", "search_pos", "[", "0", "]", "<", "self", ".", "x_image_size", ",", "'target position in feature space should be no larger than input image size'", "\n", "assert", "0", "<=", "current_target_state", ".", "search_pos", "[", "1", "]", "<", "self", ".", "x_image_size", ",", "'target position in feature space should be no larger than input image size'", "\n", "\n", "track_bbox", "=", "convert_bbox_format", "(", "current_target_state", ".", "bbox", ",", "'top-left-based'", ")", "#  center -> top left", "\n", "track_bbox", "=", "np", ".", "array", "(", "[", "track_bbox", ".", "x", ",", "track_bbox", ".", "y", ",", "track_bbox", ".", "width", ",", "track_bbox", ".", "height", "]", ")", "\n", "\n", "return", "current_target_state", ",", "track_bbox", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.infer_utils.im2rgb": [[23, 27], ["len", "numpy.stack"], "function", ["None"], ["def", "im2rgb", "(", "im", ")", ":", "\n", "  ", "if", "len", "(", "im", ".", "shape", ")", "!=", "3", ":", "\n", "    ", "im", "=", "np", ".", "stack", "(", "[", "im", ",", "im", ",", "im", "]", ",", "-", "1", ")", "\n", "", "return", "im", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.infer_utils.convert_bbox_format": [[29, 40], ["Rectangle", "tracker.Siamese_utils.misc_utils.get_center", "tracker.Siamese_utils.misc_utils.get_center", "tracker.Siamese_utils.misc_utils.get_center", "tracker.Siamese_utils.misc_utils.get_center", "ValueError"], "function", ["home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.misc_utils.get_center", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.misc_utils.get_center", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.misc_utils.get_center", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.misc_utils.get_center"], ["", "def", "convert_bbox_format", "(", "bbox", ",", "to", ")", ":", "\n", "  ", "x", ",", "y", ",", "target_width", ",", "target_height", "=", "bbox", ".", "x", ",", "bbox", ".", "y", ",", "bbox", ".", "width", ",", "bbox", ".", "height", "\n", "if", "to", "==", "'top-left-based'", ":", "\n", "    ", "x", "-=", "get_center", "(", "target_width", ")", "\n", "y", "-=", "get_center", "(", "target_height", ")", "\n", "", "elif", "to", "==", "'center-based'", ":", "\n", "    ", "y", "+=", "get_center", "(", "target_height", ")", "\n", "x", "+=", "get_center", "(", "target_width", ")", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "\"Bbox format: {} was not recognized\"", ".", "format", "(", "to", ")", ")", "\n", "", "return", "Rectangle", "(", "x", ",", "y", ",", "target_width", ",", "target_height", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.infer_utils.get_exemplar_images": [[42, 68], ["tensorflow.name_scope", "tensorflow.to_int32", "tensorflow.to_int32", "tensorflow.to_int32", "tensorflow.to_int32", "tensorflow.map_fn", "tf.map_fn.set_shape", "images.get_shape().as_list", "tensorflow.tile", "tensorflow.round", "tensorflow.round", "images.get_shape", "tracker.Siamese_utils.misc_utils.get_center", "tracker.Siamese_utils.misc_utils.get_center", "tracker.Siamese_utils.misc_utils.get_center", "tracker.Siamese_utils.misc_utils.get_center"], "function", ["home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.misc_utils.get_center", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.misc_utils.get_center", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.misc_utils.get_center", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.misc_utils.get_center"], ["", "def", "get_exemplar_images", "(", "images", ",", "exemplar_size", ",", "targets_pos", "=", "None", ")", ":", "\n", "  ", "\"\"\"Crop exemplar image from input images\"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "'get_exemplar_image'", ")", ":", "\n", "    ", "batch_size", ",", "x_height", ",", "x_width", "=", "images", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", ":", "3", "]", "\n", "z_height", ",", "z_width", "=", "exemplar_size", "\n", "\n", "if", "targets_pos", "is", "None", ":", "\n", "      ", "target_pos_single", "=", "[", "[", "get_center", "(", "x_height", ")", ",", "get_center", "(", "x_width", ")", "]", "]", "\n", "targets_pos_", "=", "tf", ".", "tile", "(", "target_pos_single", ",", "[", "batch_size", ",", "1", "]", ")", "\n", "", "else", ":", "\n", "      ", "targets_pos_", "=", "targets_pos", "\n", "\n", "# convert to top-left corner based coordinates", "\n", "", "top", "=", "tf", ".", "to_int32", "(", "tf", ".", "round", "(", "targets_pos_", "[", ":", ",", "0", "]", "-", "get_center", "(", "z_height", ")", ")", ")", "\n", "bottom", "=", "tf", ".", "to_int32", "(", "top", "+", "z_height", ")", "\n", "left", "=", "tf", ".", "to_int32", "(", "tf", ".", "round", "(", "targets_pos_", "[", ":", ",", "1", "]", "-", "get_center", "(", "z_width", ")", ")", ")", "\n", "right", "=", "tf", ".", "to_int32", "(", "left", "+", "z_width", ")", "\n", "\n", "def", "_slice", "(", "x", ")", ":", "\n", "      ", "f", ",", "t", ",", "l", ",", "b", ",", "r", "=", "x", "\n", "c", "=", "f", "[", "t", ":", "b", ",", "l", ":", "r", "]", "\n", "return", "c", "\n", "\n", "", "exemplar_img", "=", "tf", ".", "map_fn", "(", "_slice", ",", "(", "images", ",", "top", ",", "left", ",", "bottom", ",", "right", ")", ",", "dtype", "=", "images", ".", "dtype", ")", "\n", "exemplar_img", ".", "set_shape", "(", "[", "batch_size", ",", "z_height", ",", "z_width", ",", "3", "]", ")", "\n", "return", "exemplar_img", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.infer_utils.get_crops": [[70, 101], ["numpy.sqrt", "infer_utils.get_subwindow_avg", "numpy.round", "numpy.round"], "function", ["home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.infer_utils.get_subwindow_avg"], ["", "", "def", "get_crops", "(", "im", ",", "bbox", ",", "size_z", ",", "size_x", ",", "context_amount", ")", ":", "\n", "  ", "\"\"\"Obtain image sub-window, padding with avg channel if area goes outside of border\n\n  Adapted from https://github.com/bertinetto/siamese-fc/blob/master/ILSVRC15-curation/save_crops.m#L46\n\n  Args:\n    im: Image ndarray\n    bbox: Named tuple (x, y, width, height) x, y corresponds to the crops center\n    size_z: Target + context size\n    size_x: The resultant crop size\n    context_amount: The amount of context\n\n  Returns:\n    image crop: Image ndarray\n  \"\"\"", "\n", "cy", ",", "cx", ",", "h", ",", "w", "=", "bbox", ".", "y", ",", "bbox", ".", "x", ",", "bbox", ".", "height", ",", "bbox", ".", "width", "\n", "wc_z", "=", "w", "+", "context_amount", "*", "(", "w", "+", "h", ")", "\n", "hc_z", "=", "h", "+", "context_amount", "*", "(", "w", "+", "h", ")", "\n", "s_z", "=", "np", ".", "sqrt", "(", "wc_z", "*", "hc_z", ")", "\n", "scale_z", "=", "size_z", "/", "s_z", "\n", "\n", "d_search", "=", "(", "size_x", "-", "size_z", ")", "/", "2", "\n", "pad", "=", "d_search", "/", "scale_z", "\n", "s_x", "=", "s_z", "+", "2", "*", "pad", "\n", "scale_x", "=", "size_x", "/", "s_x", "\n", "\n", "image_crop_x", ",", "_", ",", "_", ",", "_", ",", "_", "=", "get_subwindow_avg", "(", "im", ",", "[", "cy", ",", "cx", "]", ",", "\n", "[", "size_x", ",", "size_x", "]", ",", "\n", "[", "np", ".", "round", "(", "s_x", ")", ",", "np", ".", "round", "(", "s_x", ")", "]", ")", "\n", "\n", "return", "image_crop_x", ",", "scale_x", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.infer_utils.get_subwindow_avg": [[103, 145], ["numpy.int", "numpy.int", "numpy.int", "numpy.int", "numpy.int", "numpy.int", "numpy.int", "numpy.int", "numpy.mean", "numpy.mean", "numpy.mean", "tracker.Siamese_utils.misc_utils.get_center", "numpy.round", "numpy.round", "numpy.maximum", "numpy.maximum", "numpy.maximum", "numpy.maximum", "numpy.pad", "numpy.pad", "numpy.pad", "numpy.stack", "cv2.resize", "tuple"], "function", ["home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.misc_utils.get_center"], ["", "def", "get_subwindow_avg", "(", "im", ",", "pos", ",", "model_sz", ",", "original_sz", ")", ":", "\n", "# avg_chans = np.mean(im, axis=(0, 1)) # This version is 3x slower", "\n", "  ", "avg_chans", "=", "[", "np", ".", "mean", "(", "im", "[", ":", ",", ":", ",", "0", "]", ")", ",", "np", ".", "mean", "(", "im", "[", ":", ",", ":", ",", "1", "]", ")", ",", "np", ".", "mean", "(", "im", "[", ":", ",", ":", ",", "2", "]", ")", "]", "\n", "if", "not", "original_sz", ":", "\n", "    ", "original_sz", "=", "model_sz", "\n", "", "sz", "=", "original_sz", "\n", "im_sz", "=", "im", ".", "shape", "\n", "# make sure the size is not too small", "\n", "assert", "im_sz", "[", "0", "]", ">", "2", "and", "im_sz", "[", "1", "]", ">", "2", "\n", "c", "=", "[", "get_center", "(", "s", ")", "for", "s", "in", "sz", "]", "\n", "\n", "# check out-of-bounds coordinates, and set them to avg_chans", "\n", "context_xmin", "=", "np", ".", "int", "(", "np", ".", "round", "(", "pos", "[", "1", "]", "-", "c", "[", "1", "]", ")", ")", "\n", "context_xmax", "=", "np", ".", "int", "(", "context_xmin", "+", "sz", "[", "1", "]", "-", "1", ")", "\n", "context_ymin", "=", "np", ".", "int", "(", "np", ".", "round", "(", "pos", "[", "0", "]", "-", "c", "[", "0", "]", ")", ")", "\n", "context_ymax", "=", "np", ".", "int", "(", "context_ymin", "+", "sz", "[", "0", "]", "-", "1", ")", "\n", "left_pad", "=", "np", ".", "int", "(", "np", ".", "maximum", "(", "0", ",", "-", "context_xmin", ")", ")", "\n", "top_pad", "=", "np", ".", "int", "(", "np", ".", "maximum", "(", "0", ",", "-", "context_ymin", ")", ")", "\n", "right_pad", "=", "np", ".", "int", "(", "np", ".", "maximum", "(", "0", ",", "context_xmax", "-", "im_sz", "[", "1", "]", "+", "1", ")", ")", "\n", "bottom_pad", "=", "np", ".", "int", "(", "np", ".", "maximum", "(", "0", ",", "context_ymax", "-", "im_sz", "[", "0", "]", "+", "1", ")", ")", "\n", "\n", "context_xmin", "=", "context_xmin", "+", "left_pad", "\n", "context_xmax", "=", "context_xmax", "+", "left_pad", "\n", "context_ymin", "=", "context_ymin", "+", "top_pad", "\n", "context_ymax", "=", "context_ymax", "+", "top_pad", "\n", "if", "top_pad", ">", "0", "or", "bottom_pad", ">", "0", "or", "left_pad", ">", "0", "or", "right_pad", ">", "0", ":", "\n", "    ", "R", "=", "np", ".", "pad", "(", "im", "[", ":", ",", ":", ",", "0", "]", ",", "(", "(", "top_pad", ",", "bottom_pad", ")", ",", "(", "left_pad", ",", "right_pad", ")", ")", ",", "\n", "'constant'", ",", "constant_values", "=", "(", "avg_chans", "[", "0", "]", ")", ")", "\n", "G", "=", "np", ".", "pad", "(", "im", "[", ":", ",", ":", ",", "1", "]", ",", "(", "(", "top_pad", ",", "bottom_pad", ")", ",", "(", "left_pad", ",", "right_pad", ")", ")", ",", "\n", "'constant'", ",", "constant_values", "=", "(", "avg_chans", "[", "1", "]", ")", ")", "\n", "B", "=", "np", ".", "pad", "(", "im", "[", ":", ",", ":", ",", "2", "]", ",", "(", "(", "top_pad", ",", "bottom_pad", ")", ",", "(", "left_pad", ",", "right_pad", ")", ")", ",", "\n", "'constant'", ",", "constant_values", "=", "(", "avg_chans", "[", "2", "]", ")", ")", "\n", "\n", "im", "=", "np", ".", "stack", "(", "(", "R", ",", "G", ",", "B", ")", ",", "axis", "=", "2", ")", "\n", "\n", "", "im_patch_original", "=", "im", "[", "context_ymin", ":", "context_ymax", "+", "1", ",", "\n", "context_xmin", ":", "context_xmax", "+", "1", ",", ":", "]", "\n", "if", "not", "(", "model_sz", "[", "0", "]", "==", "original_sz", "[", "0", "]", "and", "model_sz", "[", "1", "]", "==", "original_sz", "[", "1", "]", ")", ":", "\n", "    ", "im_patch", "=", "resize", "(", "im_patch_original", ",", "tuple", "(", "model_sz", ")", ")", "\n", "", "else", ":", "\n", "    ", "im_patch", "=", "im_patch_original", "\n", "", "return", "im_patch", ",", "left_pad", ",", "top_pad", ",", "right_pad", ",", "bottom_pad", "\n", "", ""]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.misc_utils.Tee.__init__": [[110, 114], ["open"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", ",", "mode", ")", ":", "\n", "    ", "self", ".", "file", "=", "open", "(", "name", ",", "mode", ")", "\n", "self", ".", "stdout", "=", "sys", ".", "stdout", "\n", "sys", ".", "stdout", "=", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.misc_utils.Tee.close": [[115, 122], ["misc_utils.Tee.file.close"], "methods", ["home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.misc_utils.Tee.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "stdout", "is", "not", "None", ":", "\n", "      ", "sys", ".", "stdout", "=", "self", ".", "stdout", "\n", "self", ".", "stdout", "=", "None", "\n", "", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "      ", "self", ".", "file", ".", "close", "(", ")", "\n", "self", ".", "file", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.misc_utils.Tee.write": [[123, 126], ["misc_utils.Tee.file.write", "misc_utils.Tee.stdout.write"], "methods", ["home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.misc_utils.Tee.write", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.misc_utils.Tee.write"], ["", "", "def", "write", "(", "self", ",", "data", ")", ":", "\n", "    ", "self", ".", "file", ".", "write", "(", "data", ")", "\n", "self", ".", "stdout", ".", "write", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.misc_utils.Tee.flush": [[127, 130], ["misc_utils.Tee.file.flush", "misc_utils.Tee.stdout.flush"], "methods", ["home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.misc_utils.Tee.flush", "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.misc_utils.Tee.flush"], ["", "def", "flush", "(", "self", ")", ":", "\n", "    ", "self", ".", "file", ".", "flush", "(", ")", "\n", "self", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.misc_utils.Tee.__del__": [[131, 133], ["misc_utils.Tee.close"], "methods", ["home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.misc_utils.Tee.close"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "    ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.misc_utils.auto_select_gpu": [[21, 47], ["pynvml.nvmlInit", "pynvml.nvmlDeviceGetCount", "range", "pynvml.nvmlShutdown", "range", "logging.info", "logging.info", "pynvml.nvmlDeviceGetHandleByIndex", "pynvml.nvmlDeviceGetMemoryInfo"], "function", ["None"], ["", "def", "auto_select_gpu", "(", ")", ":", "\n", "  ", "\"\"\"Select gpu which has largest free memory\"\"\"", "\n", "if", "HAS_NVML", ":", "\n", "    ", "pynvml", ".", "nvmlInit", "(", ")", "\n", "deviceCount", "=", "pynvml", ".", "nvmlDeviceGetCount", "(", ")", "\n", "largest_free_mem", "=", "0", "\n", "largest_free_idx", "=", "0", "\n", "for", "i", "in", "range", "(", "deviceCount", ")", ":", "\n", "      ", "handle", "=", "pynvml", ".", "nvmlDeviceGetHandleByIndex", "(", "i", ")", "\n", "info", "=", "pynvml", ".", "nvmlDeviceGetMemoryInfo", "(", "handle", ")", "\n", "if", "info", ".", "free", ">", "largest_free_mem", ":", "\n", "        ", "largest_free_mem", "=", "info", ".", "free", "\n", "largest_free_idx", "=", "i", "\n", "", "", "pynvml", ".", "nvmlShutdown", "(", ")", "\n", "largest_free_mem", "=", "largest_free_mem", "/", "1024.", "/", "1024.", "# Convert to MB", "\n", "\n", "idx_to_gpu_id", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "deviceCount", ")", ":", "\n", "      ", "idx_to_gpu_id", "[", "i", "]", "=", "'{}'", ".", "format", "(", "i", ")", "\n", "\n", "", "gpu_id", "=", "idx_to_gpu_id", "[", "largest_free_idx", "]", "\n", "logging", ".", "info", "(", "'Using largest free memory GPU {} with free memory {}MB'", ".", "format", "(", "gpu_id", ",", "largest_free_mem", ")", ")", "\n", "return", "gpu_id", "\n", "", "else", ":", "\n", "    ", "logging", ".", "info", "(", "'nvidia-ml-py is not installed, automatically select gpu is disabled!'", ")", "\n", "return", "'0'", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.misc_utils.get_center": [[49, 51], ["None"], "function", ["None"], ["", "", "def", "get_center", "(", "x", ")", ":", "\n", "  ", "return", "(", "x", "-", "1.", ")", "/", "2.", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.misc_utils.get": [[53, 65], ["config.get", "logging.warning"], "function", ["home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.misc_utils.get"], ["", "def", "get", "(", "config", ",", "key", ",", "default", ")", ":", "\n", "  ", "\"\"\"Get value in config by key, use default if key is not set\n\n  This little function is useful for dynamical experimental settings.\n  For example, we can add a new configuration without worrying compatibility with older versions.\n  You can also achieve this by just calling config.get(key, default), but add a warning is even better : )\n  \"\"\"", "\n", "val", "=", "config", ".", "get", "(", "key", ")", "\n", "if", "val", "is", "None", ":", "\n", "    ", "logging", ".", "warning", "(", "'{} is not explicitly specified, using default value: {}'", ".", "format", "(", "key", ",", "default", ")", ")", "\n", "val", "=", "default", "\n", "", "return", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.misc_utils.mkdir_p": [[67, 76], ["os.makedirs", "os.path.isdir"], "function", ["None"], ["", "def", "mkdir_p", "(", "path", ")", ":", "\n", "  ", "\"\"\"mimic the behavior of mkdir -p in bash\"\"\"", "\n", "try", ":", "\n", "    ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "except", "OSError", "as", "exc", ":", "# Python >2.5", "\n", "    ", "if", "exc", ".", "errno", "==", "errno", ".", "EEXIST", "and", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "      ", "pass", "\n", "", "else", ":", "\n", "      ", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.misc_utils.tryfloat": [[78, 83], ["float"], "function", ["None"], ["", "", "", "def", "tryfloat", "(", "s", ")", ":", "\n", "  ", "try", ":", "\n", "    ", "return", "float", "(", "s", ")", "\n", "", "except", ":", "\n", "    ", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.misc_utils.alphanum_key": [[85, 90], ["misc_utils.tryfloat", "re.split"], "function", ["home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.misc_utils.tryfloat"], ["", "", "def", "alphanum_key", "(", "s", ")", ":", "\n", "  ", "\"\"\" Turn a string into a list of string and number chunks.\n      \"z23a\" -> [\"z\", 23, \"a\"]\n  \"\"\"", "\n", "return", "[", "tryfloat", "(", "c", ")", "for", "c", "in", "re", ".", "split", "(", "'([0-9.]+)'", ",", "s", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.misc_utils.sort_nicely": [[92, 95], ["sorted"], "function", ["None"], ["", "def", "sort_nicely", "(", "l", ")", ":", "\n", "  ", "\"\"\"Sort the given list in the way that humans expect.\"\"\"", "\n", "return", "sorted", "(", "l", ",", "key", "=", "alphanum_key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.misc_utils.save_cfgs": [[135, 143], ["open", "json.dump", "open", "json.dump", "open", "json.dump", "os.path.join", "os.path.join", "os.path.join"], "function", ["None"], ["", "", "def", "save_cfgs", "(", "train_dir", ",", "model_config", ",", "train_config", ",", "track_config", ")", ":", "\n", "  ", "\"\"\"Save all configurations in JSON format for future reference\"\"\"", "\n", "with", "open", "(", "osp", ".", "join", "(", "train_dir", ",", "'model_config.json'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "    ", "json", ".", "dump", "(", "model_config", ",", "f", ",", "indent", "=", "2", ")", "\n", "", "with", "open", "(", "osp", ".", "join", "(", "train_dir", ",", "'train_config.json'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "    ", "json", ".", "dump", "(", "train_config", ",", "f", ",", "indent", "=", "2", ")", "\n", "", "with", "open", "(", "osp", ".", "join", "(", "train_dir", ",", "'track_config.json'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "    ", "json", ".", "dump", "(", "track_config", ",", "f", ",", "indent", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yinjunbo_UMA-MOT.Siamese_utils.misc_utils.load_cfgs": [[145, 159], ["os.path.isdir", "os.path.dirname", "open", "json.load", "open", "json.load", "open", "json.load", "os.path.join", "os.path.join", "os.path.join"], "function", ["None"], ["", "", "def", "load_cfgs", "(", "checkpoint", ")", ":", "\n", "# print(checkpoint)", "\n", "# print(osp.isdir(checkpoint))", "\n", "  ", "if", "osp", ".", "isdir", "(", "checkpoint", ")", ":", "\n", "    ", "train_dir", "=", "checkpoint", "\n", "", "else", ":", "\n", "    ", "train_dir", "=", "osp", ".", "dirname", "(", "checkpoint", ")", "\n", "", "with", "open", "(", "osp", ".", "join", "(", "train_dir", ",", "'model_config.json'", ")", ",", "'r'", ")", "as", "f", ":", "\n", "    ", "model_config", "=", "json", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "osp", ".", "join", "(", "train_dir", ",", "'train_config.json'", ")", ",", "'r'", ")", "as", "f", ":", "\n", "    ", "train_config", "=", "json", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "osp", ".", "join", "(", "train_dir", ",", "'track_config.json'", ")", ",", "'r'", ")", "as", "f", ":", "\n", "    ", "track_config", "=", "json", ".", "load", "(", "f", ")", "\n", "", "return", "model_config", ",", "train_config", ",", "track_config", "\n", "", ""]]}