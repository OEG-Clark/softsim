{"home.repos.pwc.inspect_result.Muzammal-Naseer_NRP.None.networks.ResidualDenseBlock_5C.__init__": [[12, 21], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.Muzammal-Naseer_NRP.modules.module_util.ResidualBlock_noBN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nf", "=", "64", ",", "gc", "=", "32", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "ResidualDenseBlock_5C", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# gc: growth channel, i.e. intermediate channels", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "nf", ",", "gc", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "nf", "+", "gc", ",", "gc", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "nf", "+", "2", "*", "gc", ",", "gc", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "nf", "+", "3", "*", "gc", ",", "gc", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "nf", "+", "4", "*", "gc", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "lrelu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Muzammal-Naseer_NRP.None.networks.ResidualDenseBlock_5C.forward": [[22, 29], ["networks.ResidualDenseBlock_5C.lrelu", "networks.ResidualDenseBlock_5C.lrelu", "networks.ResidualDenseBlock_5C.lrelu", "networks.ResidualDenseBlock_5C.lrelu", "networks.ResidualDenseBlock_5C.conv5", "networks.ResidualDenseBlock_5C.conv1", "networks.ResidualDenseBlock_5C.conv2", "networks.ResidualDenseBlock_5C.conv3", "networks.ResidualDenseBlock_5C.conv4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "self", ".", "lrelu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x2", "=", "self", ".", "lrelu", "(", "self", ".", "conv2", "(", "torch", ".", "cat", "(", "(", "x", ",", "x1", ")", ",", "1", ")", ")", ")", "\n", "x3", "=", "self", ".", "lrelu", "(", "self", ".", "conv3", "(", "torch", ".", "cat", "(", "(", "x", ",", "x1", ",", "x2", ")", ",", "1", ")", ")", ")", "\n", "x4", "=", "self", ".", "lrelu", "(", "self", ".", "conv4", "(", "torch", ".", "cat", "(", "(", "x", ",", "x1", ",", "x2", ",", "x3", ")", ",", "1", ")", ")", ")", "\n", "x5", "=", "self", ".", "conv5", "(", "torch", ".", "cat", "(", "(", "x", ",", "x1", ",", "x2", ",", "x3", ",", "x4", ")", ",", "1", ")", ")", "\n", "return", "x5", "*", "0.2", "+", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Muzammal-Naseer_NRP.None.networks.RRDB.__init__": [[33, 38], ["torch.Module.__init__", "networks.ResidualDenseBlock_5C", "networks.ResidualDenseBlock_5C", "networks.ResidualDenseBlock_5C"], "methods", ["home.repos.pwc.inspect_result.Muzammal-Naseer_NRP.modules.module_util.ResidualBlock_noBN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nf", ",", "gc", "=", "32", ")", ":", "\n", "        ", "super", "(", "RRDB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "RDB1", "=", "ResidualDenseBlock_5C", "(", "nf", ",", "gc", ")", "\n", "self", ".", "RDB2", "=", "ResidualDenseBlock_5C", "(", "nf", ",", "gc", ")", "\n", "self", ".", "RDB3", "=", "ResidualDenseBlock_5C", "(", "nf", ",", "gc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Muzammal-Naseer_NRP.None.networks.RRDB.forward": [[39, 44], ["networks.RRDB.RDB1", "networks.RRDB.RDB2", "networks.RRDB.RDB3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "RDB1", "(", "x", ")", "\n", "out", "=", "self", ".", "RDB2", "(", "out", ")", "\n", "out", "=", "self", ".", "RDB3", "(", "out", ")", "\n", "return", "out", "*", "0.2", "+", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Muzammal-Naseer_NRP.None.networks.NRP.__init__": [[47, 54], ["torch.Module.__init__", "functools.partial", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "modules.make_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.Muzammal-Naseer_NRP.modules.module_util.ResidualBlock_noBN.__init__", "home.repos.pwc.inspect_result.Muzammal-Naseer_NRP.modules.module_util.make_layer"], ["    ", "def", "__init__", "(", "self", ",", "in_nc", ",", "out_nc", ",", "nf", ",", "nb", ",", "gc", "=", "32", ")", ":", "\n", "        ", "super", "(", "NRP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "RRDB_block_f", "=", "functools", ".", "partial", "(", "RRDB", ",", "nf", "=", "nf", ",", "gc", "=", "gc", ")", "\n", "\n", "self", ".", "conv_first", "=", "nn", ".", "Conv2d", "(", "in_nc", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "RRDB_trunk", "=", "mutil", ".", "make_layer", "(", "RRDB_block_f", ",", "nb", ")", "\n", "self", ".", "trunk_conv", "=", "nn", ".", "Conv2d", "(", "nf", ",", "3", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Muzammal-Naseer_NRP.None.networks.NRP.forward": [[55, 60], ["networks.NRP.conv_first", "networks.NRP.trunk_conv", "networks.NRP.RRDB_trunk"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "fea", "=", "self", ".", "conv_first", "(", "x", ")", "\n", "trunk", "=", "self", ".", "trunk_conv", "(", "self", ".", "RRDB_trunk", "(", "fea", ")", ")", "\n", "\n", "return", "trunk", "\n", "\n"]], "home.repos.pwc.inspect_result.Muzammal-Naseer_NRP.None.networks.NRP_resG.__init__": [[66, 76], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "functools.partial", "modules.make_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.Muzammal-Naseer_NRP.modules.module_util.ResidualBlock_noBN.__init__", "home.repos.pwc.inspect_result.Muzammal-Naseer_NRP.modules.module_util.make_layer"], ["    ", "def", "__init__", "(", "self", ",", "in_nc", "=", "3", ",", "out_nc", "=", "3", ",", "nf", "=", "64", ",", "nb", "=", "23", ")", ":", "\n", "        ", "super", "(", "NRP_resG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv_first", "=", "nn", ".", "Conv2d", "(", "in_nc", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "basic_block", "=", "functools", ".", "partial", "(", "mutil", ".", "ResidualBlock_noBN", ",", "nf", "=", "nf", ")", "\n", "self", ".", "recon_trunk", "=", "mutil", ".", "make_layer", "(", "basic_block", ",", "nb", ")", "\n", "self", ".", "conv_last", "=", "nn", ".", "Conv2d", "(", "nf", ",", "out_nc", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "\n", "# activation function", "\n", "self", ".", "lrelu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Muzammal-Naseer_NRP.None.networks.NRP_resG.forward": [[77, 81], ["networks.NRP_resG.lrelu", "networks.NRP_resG.conv_last", "networks.NRP_resG.conv_first", "networks.NRP_resG.recon_trunk"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "fea", "=", "self", ".", "lrelu", "(", "self", ".", "conv_first", "(", "x", ")", ")", "\n", "out", "=", "self", ".", "conv_last", "(", "self", ".", "recon_trunk", "(", "fea", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Muzammal-Naseer_NRP.None.bypass_nrp.normalize": [[40, 46], ["None"], "function", ["None"], ["def", "normalize", "(", "t", ")", ":", "\n", "    ", "t", "[", ":", ",", "0", ",", ":", ",", ":", "]", "=", "(", "t", "[", ":", ",", "0", ",", ":", ",", ":", "]", "-", "mean", "[", "0", "]", ")", "/", "std", "[", "0", "]", "\n", "t", "[", ":", ",", "1", ",", ":", ",", ":", "]", "=", "(", "t", "[", ":", ",", "1", ",", ":", ",", ":", "]", "-", "mean", "[", "1", "]", ")", "/", "std", "[", "1", "]", "\n", "t", "[", ":", ",", "2", ",", ":", ",", ":", "]", "=", "(", "t", "[", ":", ",", "2", ",", ":", ",", ":", "]", "-", "mean", "[", "2", "]", ")", "/", "std", "[", "2", "]", "\n", "\n", "return", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.Muzammal-Naseer_NRP.None.bypass_nrp.get_labs": [[88, 96], ["numpy.zeros", "range", "len", "numpy.random.random_integers", "len", "numpy.argmax", "numpy.random.random_integers"], "function", ["None"], ["def", "get_labs", "(", "y", ")", ":", "\n", "    ", "l", "=", "np", ".", "zeros", "(", "(", "len", "(", "y", ")", ",", "1000", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "y", ")", ")", ":", "\n", "        ", "r", "=", "np", ".", "random", ".", "random_integers", "(", "0", ",", "999", ")", "\n", "while", "r", "==", "np", ".", "argmax", "(", "y", "[", "i", "]", ")", ":", "\n", "            ", "r", "=", "np", ".", "random", ".", "random_integers", "(", "0", ",", "999", ")", "\n", "", "l", "[", "i", ",", "r", "]", "=", "1", "\n", "", "return", "l", "\n", "\n"]], "home.repos.pwc.inspect_result.Muzammal-Naseer_NRP.None.utils.custom_dataset.__init__": [[11, 15], ["torch.Dataset.__init__", "utils.get_image_paths"], "methods", ["home.repos.pwc.inspect_result.Muzammal-Naseer_NRP.modules.module_util.ResidualBlock_noBN.__init__", "home.repos.pwc.inspect_result.Muzammal-Naseer_NRP.None.utils.get_image_paths"], ["    ", "def", "__init__", "(", "self", ",", "dir_root", ")", ":", "\n", "        ", "super", "(", "custom_dataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "paths", "=", "get_image_paths", "(", "dir_root", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Muzammal-Naseer_NRP.None.utils.custom_dataset.__getitem__": [[16, 35], ["utils.read_img", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.cat.size", "torch.cat.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat.size", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "path.split", "numpy.ascontiguousarray", "numpy.transpose"], "methods", ["home.repos.pwc.inspect_result.Muzammal-Naseer_NRP.None.utils.read_img"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "# get  image", "\n", "        ", "path", "=", "self", ".", "paths", "[", "index", "]", "\n", "img", "=", "read_img", "(", "path", ")", "\n", "\n", "# BGR to RGB, HWC to CHW, numpy to tensor", "\n", "if", "img", ".", "shape", "[", "2", "]", "==", "3", ":", "\n", "            ", "img", "=", "img", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "", "img", "=", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "np", ".", "transpose", "(", "img", ",", "(", "2", ",", "0", ",", "1", ")", ")", ")", ")", ".", "float", "(", ")", "\n", "\n", "if", "img", ".", "size", "(", "0", ")", "==", "1", ":", "\n", "# stack greyscale image", "\n", "            ", "img", "=", "torch", ".", "cat", "(", "(", "img", ",", "img", ",", "img", ")", ",", "dim", "=", "0", ")", "\n", "", "if", "img", ".", "size", "(", "0", ")", "==", "4", ":", "\n", "# remove alpha channel", "\n", "            ", "img", "=", "img", "[", ":", "3", ",", ":", ",", ":", "]", "\n", "\n", "", "return", "img", ",", "path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Muzammal-Naseer_NRP.None.utils.custom_dataset.__len__": [[36, 38], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Muzammal-Naseer_NRP.None.utils._get_paths_from_images": [[40, 50], ["os.path.isdir", "sorted", "os.walk", "sorted", "os.path.join", "images.append"], "function", ["None"], ["", "", "def", "_get_paths_from_images", "(", "path", ")", ":", "\n", "    ", "'''get image path list from image folder'''", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "path", ")", ",", "'{:s} is not a valid directory'", ".", "format", "(", "path", ")", "\n", "images", "=", "[", "]", "\n", "for", "dirpath", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "path", ")", ")", ":", "\n", "        ", "for", "fname", "in", "sorted", "(", "fnames", ")", ":", "\n", "            ", "img_path", "=", "os", ".", "path", ".", "join", "(", "dirpath", ",", "fname", ")", "\n", "images", ".", "append", "(", "img_path", ")", "\n", "", "", "assert", "images", ",", "'{:s} has no valid image file'", ".", "format", "(", "path", ")", "\n", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.Muzammal-Naseer_NRP.None.utils.get_image_paths": [[52, 55], ["sorted", "utils._get_paths_from_images"], "function", ["home.repos.pwc.inspect_result.Muzammal-Naseer_NRP.None.utils._get_paths_from_images"], ["", "def", "get_image_paths", "(", "dataroot", ")", ":", "\n", "    ", "paths", "=", "sorted", "(", "_get_paths_from_images", "(", "dataroot", ")", ")", "\n", "return", "paths", "\n", "\n"]], "home.repos.pwc.inspect_result.Muzammal-Naseer_NRP.None.utils.read_img": [[57, 73], ["cv2.imread", "np.expand_dims.astype", "numpy.expand_dims"], "function", ["None"], ["", "def", "read_img", "(", "path", ",", "size", "=", "None", ")", ":", "\n", "    ", "'''read image by cv2 or from lmdb\n    return: Numpy float32, HWC, BGR, [0,1]'''", "\n", "img", "=", "cv2", ".", "imread", "(", "path", ",", "cv2", ".", "IMREAD_UNCHANGED", ")", "\n", "\n", "# Resizing for natural images", "\n", "# img = cv2.resize(img, (256, 256))", "\n", "# img = cv2.resize(img, (224, 224))", "\n", "\n", "img", "=", "img", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.", "\n", "if", "img", ".", "ndim", "==", "2", ":", "\n", "        ", "img", "=", "np", ".", "expand_dims", "(", "img", ",", "axis", "=", "2", ")", "\n", "# some images have 4 channels", "\n", "", "if", "img", ".", "shape", "[", "2", "]", ">", "3", ":", "\n", "        ", "img", "=", "img", "[", ":", ",", ":", ",", ":", "3", "]", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.Muzammal-Naseer_NRP.None.utils.tensor2img": [[75, 100], ["tensor.squeeze().float().cpu().clamp_.squeeze().float().cpu().clamp_", "tensor.squeeze().float().cpu().clamp_.dim", "tensor.numpy.astype", "len", "make_grid().numpy", "numpy.transpose", "tensor.squeeze().float().cpu().clamp_.squeeze().float().cpu", "tensor.squeeze().float().cpu().clamp_.numpy", "numpy.transpose", "make_grid", "tensor.squeeze().float().cpu().clamp_.numpy", "TypeError", "tensor.squeeze().float().cpu().clamp_.squeeze().float", "int", "tensor.squeeze().float().cpu().clamp_.squeeze", "math.sqrt"], "function", ["None"], ["", "def", "tensor2img", "(", "tensor", ",", "out_type", "=", "np", ".", "uint8", ",", "min_max", "=", "(", "0", ",", "1", ")", ")", ":", "\n", "    ", "'''\n    Converts a torch Tensor into an image Numpy array\n    Input: 4D(B,(3/1),H,W), 3D(C,H,W), or 2D(H,W), any range, RGB channel order\n    Output: 3D(H,W,C) or 2D(H,W), [0,255], np.uint8 (default)\n    '''", "\n", "tensor", "=", "tensor", ".", "squeeze", "(", ")", ".", "float", "(", ")", ".", "cpu", "(", ")", ".", "clamp_", "(", "*", "min_max", ")", "# clamp", "\n", "tensor", "=", "(", "tensor", "-", "min_max", "[", "0", "]", ")", "/", "(", "min_max", "[", "1", "]", "-", "min_max", "[", "0", "]", ")", "# to range [0,1]", "\n", "n_dim", "=", "tensor", ".", "dim", "(", ")", "\n", "if", "n_dim", "==", "4", ":", "\n", "        ", "n_img", "=", "len", "(", "tensor", ")", "\n", "img_np", "=", "make_grid", "(", "tensor", ",", "nrow", "=", "int", "(", "math", ".", "sqrt", "(", "n_img", ")", ")", ",", "normalize", "=", "False", ")", ".", "numpy", "(", ")", "\n", "img_np", "=", "np", ".", "transpose", "(", "img_np", "[", "[", "2", ",", "1", ",", "0", "]", ",", ":", ",", ":", "]", ",", "(", "1", ",", "2", ",", "0", ")", ")", "# HWC, BGR", "\n", "", "elif", "n_dim", "==", "3", ":", "\n", "        ", "img_np", "=", "tensor", ".", "numpy", "(", ")", "\n", "img_np", "=", "np", ".", "transpose", "(", "img_np", "[", "[", "2", ",", "1", ",", "0", "]", ",", ":", ",", ":", "]", ",", "(", "1", ",", "2", ",", "0", ")", ")", "# HWC, BGR", "\n", "", "elif", "n_dim", "==", "2", ":", "\n", "        ", "img_np", "=", "tensor", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "\n", "'Only support 4D, 3D and 2D tensor. But received with dimension: {:d}'", ".", "format", "(", "n_dim", ")", ")", "\n", "", "if", "out_type", "==", "np", ".", "uint8", ":", "\n", "        ", "img_np", "=", "(", "img_np", "*", "255.0", ")", ".", "round", "(", ")", "\n", "# Important. Unlike matlab, numpy.unit8() WILL NOT round by default.", "\n", "", "return", "img_np", ".", "astype", "(", "out_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Muzammal-Naseer_NRP.None.utils.save_img": [[102, 104], ["cv2.imwrite"], "function", ["None"], ["", "def", "save_img", "(", "img", ",", "img_path", ",", "mode", "=", "'RGB'", ")", ":", "\n", "    ", "cv2", ".", "imwrite", "(", "img_path", ",", "img", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Muzammal-Naseer_NRP.None.ssp.perceptual_criteria.__init__": [[47, 54], ["torch.Module.__init__", "torchvision.models.vgg16", "torchvision.models.vgg16", "torchvision.models.vgg16", "torchvision.models.vgg16", "torchvision.models.vgg16", "torchvision.models.vgg16", "torchvision.models.vgg16", "torchvision.models.vgg16", "torchvision.models.vgg16", "torchvision.models.vgg16", "torchvision.models.vgg16", "torchvision.models.vgg16", "torchvision.models.vgg16", "torchvision.models.vgg16", "torchvision.models.vgg16", "torchvision.models.vgg16", "[].eval", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.Sequential", "torch.Sequential", "torch.Sequential", "list"], "methods", ["home.repos.pwc.inspect_result.Muzammal-Naseer_NRP.modules.module_util.ResidualBlock_noBN.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "perceptual_criteria", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# you can try other models", "\n", "vgg16", "=", "torchvision", ".", "models", ".", "vgg16", "(", "pretrained", "=", "True", ")", "\n", "self", ".", "vgg16", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "vgg16", ".", "features", ")", ")", "[", ":", "args", ".", "ssp_layer", "]", ".", "eval", "(", ")", "\n", "# you can try other losses", "\n", "self", ".", "mse", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Muzammal-Naseer_NRP.None.ssp.perceptual_criteria.forward": [[55, 58], ["ssp.perceptual_criteria.mse", "ssp.perceptual_criteria.vgg16", "ssp.perceptual_criteria.vgg16"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "adv", ",", "org", ")", ":", "\n", "        ", "vgg_out", "=", "self", ".", "mse", "(", "self", ".", "vgg16", "(", "adv", ")", ",", "self", ".", "vgg16", "(", "org", ")", ")", "\n", "return", "vgg_out", "\n", "", "", "criterion", "=", "perceptual_criteria", "(", ")", "\n"]], "home.repos.pwc.inspect_result.Muzammal-Naseer_NRP.None.ssp.normalize": [[61, 67], ["None"], "function", ["None"], ["def", "normalize", "(", "t", ")", ":", "\n", "    ", "t", "[", ":", ",", "0", ",", ":", ",", ":", "]", "=", "(", "t", "[", ":", ",", "0", ",", ":", ",", ":", "]", "-", "mean", "[", "0", "]", ")", "/", "std", "[", "0", "]", "\n", "t", "[", ":", ",", "1", ",", ":", ",", ":", "]", "=", "(", "t", "[", ":", ",", "1", ",", ":", ",", ":", "]", "-", "mean", "[", "1", "]", ")", "/", "std", "[", "1", "]", "\n", "t", "[", ":", ",", "2", ",", ":", ",", ":", "]", "=", "(", "t", "[", ":", ",", "2", ",", ":", ",", ":", "]", "-", "mean", "[", "2", "]", ")", "/", "std", "[", "2", "]", "\n", "\n", "return", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.Muzammal-Naseer_NRP.modules.module_util.ResidualBlock_noBN.__init__": [[41, 48], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "module_util.initialize_weights"], "methods", ["home.repos.pwc.inspect_result.Muzammal-Naseer_NRP.modules.module_util.ResidualBlock_noBN.__init__", "home.repos.pwc.inspect_result.Muzammal-Naseer_NRP.modules.module_util.initialize_weights"], ["def", "__init__", "(", "self", ",", "nf", "=", "64", ")", ":", "\n", "        ", "super", "(", "ResidualBlock_noBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "\n", "# initialization", "\n", "initialize_weights", "(", "[", "self", ".", "conv1", ",", "self", ".", "conv2", "]", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Muzammal-Naseer_NRP.modules.module_util.ResidualBlock_noBN.forward": [[49, 54], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "module_util.ResidualBlock_noBN.conv2", "module_util.ResidualBlock_noBN.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ",", "inplace", "=", "True", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "return", "identity", "+", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Muzammal-Naseer_NRP.modules.module_util.initialize_weights": [[8, 26], ["isinstance", "net.modules", "isinstance", "torch.kaiming_normal_", "isinstance", "m.bias.data.zero_", "torch.kaiming_normal_", "isinstance", "m.bias.data.zero_", "torch.constant_", "torch.constant_"], "function", ["None"], ["def", "initialize_weights", "(", "net_l", ",", "scale", "=", "1", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "net_l", ",", "list", ")", ":", "\n", "        ", "net_l", "=", "[", "net_l", "]", "\n", "", "for", "net", "in", "net_l", ":", "\n", "        ", "for", "m", "in", "net", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "m", ".", "weight", ".", "data", "*=", "scale", "# for residual block", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "m", ".", "weight", ".", "data", "*=", "scale", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Muzammal-Naseer_NRP.modules.module_util.make_layer": [[28, 33], ["range", "torch.Sequential", "layers.append", "block"], "function", ["None"], ["", "", "", "", "def", "make_layer", "(", "block", ",", "n_layers", ")", ":", "\n", "    ", "layers", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "n_layers", ")", ":", "\n", "        ", "layers", ".", "append", "(", "block", "(", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]]}