{"home.repos.pwc.inspect_result.lancopku_AMM.process.vocab_processor.VocabularyProcessor.__init__": [[14, 24], ["vocab_processor.VocabularyProcessor.add", "vocab_processor.VocabularyProcessor.add", "vocab_processor.VocabularyProcessor.add", "vocab_processor.VocabularyProcessor.add"], "methods", ["home.repos.pwc.inspect_result.lancopku_AMM.process.vocab_processor.VocabularyProcessor.add", "home.repos.pwc.inspect_result.lancopku_AMM.process.vocab_processor.VocabularyProcessor.add", "home.repos.pwc.inspect_result.lancopku_AMM.process.vocab_processor.VocabularyProcessor.add", "home.repos.pwc.inspect_result.lancopku_AMM.process.vocab_processor.VocabularyProcessor.add"], ["    ", "def", "__init__", "(", "self", ",", "min_frequency", ":", "int", "=", "0", ")", ":", "\n", "        ", "self", ".", "_word2id", "=", "{", "}", "\n", "self", ".", "_id2word", "=", "{", "}", "\n", "self", ".", "_word_frequency", "=", "{", "}", "\n", "self", ".", "_min_frequency", "=", "min_frequency", "\n", "\n", "self", ".", "add", "(", "GO_TOKEN", ")", "\n", "self", ".", "add", "(", "EOS_TOKEN", ")", "\n", "self", ".", "add", "(", "PAD_TOKEN", ")", "\n", "self", ".", "add", "(", "UNKNOWN_TOKEN", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.process.vocab_processor.VocabularyProcessor.size": [[25, 27], ["len"], "methods", ["None"], ["", "def", "size", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "len", "(", "self", ".", "_word2id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.process.vocab_processor.VocabularyProcessor.add": [[28, 37], ["word.lower.lower.lower", "len"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "word", ":", "str", ",", "frequency", ":", "int", "=", "1", ")", ":", "\n", "        ", "word", "=", "word", ".", "lower", "(", ")", "\n", "if", "word", "in", "self", ".", "_word2id", ":", "\n", "            ", "self", ".", "_word_frequency", "[", "word", "]", "+=", "frequency", "\n", "", "else", ":", "\n", "            ", "word_id", "=", "len", "(", "self", ".", "_word2id", ")", "\n", "self", ".", "_word2id", "[", "word", "]", "=", "word_id", "\n", "self", ".", "_id2word", "[", "word_id", "]", "=", "word", "\n", "self", ".", "_word_frequency", "[", "word", "]", "=", "frequency", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.process.vocab_processor.VocabularyProcessor.fit": [[38, 47], ["VocabularyProcessor.VocabularyProcessor", "VocabularyProcessor.VocabularyProcessor._word_frequency.items", "VocabularyProcessor.VocabularyProcessor.__dict__.update", "VocabularyProcessor.VocabularyProcessor.add"], "methods", ["home.repos.pwc.inspect_result.lancopku_AMM.process.vocab_processor.VocabularyProcessor.add"], ["", "", "def", "fit", "(", "self", ")", ":", "\n", "        ", "vocab_processor", "=", "VocabularyProcessor", "(", ")", "\n", "for", "word", ",", "frequency", "in", "self", ".", "_word_frequency", ".", "items", "(", ")", ":", "\n", "            ", "if", "word", "not", "in", "SPECIAL_TOKENS", "and", "frequency", ">=", "self", ".", "_min_frequency", ":", "\n", "                ", "vocab_processor", ".", "add", "(", "word", ",", "frequency", ")", "\n", "\n", "", "", "min_frequency", "=", "self", ".", "_min_frequency", "\n", "self", ".", "__dict__", ".", "update", "(", "vocab_processor", ".", "__dict__", ")", "\n", "self", ".", "_min_frequency", "=", "min_frequency", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.process.vocab_processor.VocabularyProcessor.save": [[48, 51], ["open", "pickle.dump"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "filename", ":", "str", ")", ":", "\n", "        ", "with", "open", "(", "filename", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "self", ".", "__dict__", ",", "f", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.process.vocab_processor.VocabularyProcessor.restore": [[52, 55], ["open", "vocab_processor.VocabularyProcessor.__dict__.update", "pickle.load"], "methods", ["None"], ["", "", "def", "restore", "(", "self", ",", "filename", ":", "str", ")", ":", "\n", "        ", "with", "open", "(", "filename", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "self", ".", "__dict__", ".", "update", "(", "pickle", ".", "load", "(", "f", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.process.vocab_processor.VocabularyProcessor.word2id": [[56, 59], ["word.lower.lower.lower", "vocab_processor.VocabularyProcessor._word2id.get"], "methods", ["None"], ["", "", "def", "word2id", "(", "self", ",", "word", ":", "str", ")", "->", "int", ":", "\n", "        ", "word", "=", "word", ".", "lower", "(", ")", "\n", "return", "self", ".", "_word2id", ".", "get", "(", "word", ",", "self", ".", "_word2id", "[", "UNKNOWN_TOKEN", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.process.vocab_processor.VocabularyProcessor.id2word": [[60, 62], ["None"], "methods", ["None"], ["", "def", "id2word", "(", "self", ",", "word_id", ":", "int", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "_id2word", "[", "word_id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.process.vocab_processor.VocabularyProcessor.word_frequency": [[63, 66], ["word.lower.lower.lower"], "methods", ["None"], ["", "def", "word_frequency", "(", "self", ",", "word", ":", "str", ")", "->", "int", ":", "\n", "        ", "word", "=", "word", ".", "lower", "(", ")", "\n", "return", "self", ".", "_word_frequency", "[", "word", "]", "if", "word", "in", "self", ".", "_word2id", "else", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.process.vocab_processor.VocabularyProcessor.is_unknown": [[67, 70], ["word.lower.lower.lower"], "methods", ["None"], ["", "def", "is_unknown", "(", "self", ",", "word", ":", "str", ")", "->", "bool", ":", "\n", "        ", "word", "=", "word", ".", "lower", "(", ")", "\n", "return", "word", "not", "in", "self", ".", "_word2id", "or", "word", "==", "UNKNOWN_TOKEN", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lancopku_AMM.process.process.DataProcessor.finished": [[50, 57], ["all", "process.DataProcessor._get_dataset_node", "super().finished", "pathlib.Path().exists", "pathlib.Path().exists", "pathlib.Path", "pathlib.Path", "os.path.join", "os.path.join", "process.DataProcessor.__vocab_filename", "process.DataProcessor.__dataset_filename"], "methods", ["home.repos.pwc.inspect_result.lancopku_AMM.process.process.DataProcessor.finished", "home.repos.pwc.inspect_result.lancopku_AMM.process.process.DataProcessor.__vocab_filename", "home.repos.pwc.inspect_result.lancopku_AMM.process.process.DataProcessor.__dataset_filename"], ["    ", "def", "finished", "(", "self", ")", ":", "\n", "        ", "dst", "=", "self", ".", "_get_dataset_node", "(", ")", ".", "dst", "\n", "conditions", "=", "[", "\n", "super", "(", "DataProcessor", ",", "self", ")", ".", "finished", "(", ")", ",", "\n", "Path", "(", "os", ".", "path", ".", "join", "(", "dst", ",", "self", ".", "__vocab_filename", "(", ")", ")", ")", ".", "exists", "(", ")", ",", "\n", "Path", "(", "os", ".", "path", ".", "join", "(", "dst", ",", "self", ".", "__dataset_filename", "(", ")", ")", ")", ".", "exists", "(", ")", "]", "\n", "return", "all", "(", "conditions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.process.process.DataProcessor.check": [[58, 67], ["super().check", "process.DataProcessor._get_dataset_node", "pathlib.Path().exists", "FileNotFoundError", "pathlib.Path().exists", "FileNotFoundError", "pathlib.Path", "process.DataProcessor.__vocab_filename", "pathlib.Path", "process.DataProcessor.__dataset_filename", "os.path.join", "os.path.join", "process.DataProcessor.__vocab_filename", "process.DataProcessor.__dataset_filename"], "methods", ["home.repos.pwc.inspect_result.lancopku_AMM.process.process.DataProcessor.check", "home.repos.pwc.inspect_result.lancopku_AMM.process.process.DataProcessor.__vocab_filename", "home.repos.pwc.inspect_result.lancopku_AMM.process.process.DataProcessor.__dataset_filename", "home.repos.pwc.inspect_result.lancopku_AMM.process.process.DataProcessor.__vocab_filename", "home.repos.pwc.inspect_result.lancopku_AMM.process.process.DataProcessor.__dataset_filename"], ["", "def", "check", "(", "self", ")", ":", "\n", "        ", "super", "(", "DataProcessor", ",", "self", ")", ".", "check", "(", ")", "\n", "dst", "=", "self", ".", "_get_dataset_node", "(", ")", ".", "dst", "\n", "if", "not", "Path", "(", "os", ".", "path", ".", "join", "(", "dst", ",", "self", ".", "__vocab_filename", "(", ")", ")", ")", ".", "exists", "(", ")", ":", "\n", "            ", "raise", "FileNotFoundError", "(", "\n", "\"Vocabulary file '{}' does not exist\"", ".", "format", "(", "self", ".", "__vocab_filename", "(", ")", ")", ")", "\n", "", "if", "not", "Path", "(", "os", ".", "path", ".", "join", "(", "dst", ",", "self", ".", "__dataset_filename", "(", ")", ")", ")", ".", "exists", "(", ")", ":", "\n", "            ", "raise", "FileNotFoundError", "(", "\n", "\"Dataset file '{}' does not exist\"", ".", "format", "(", "self", ".", "__dataset_filename", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.process.process.DataProcessor._on_next": [[68, 97], ["os.makedirs", "os.path.join", "process.DataProcessor.__process_train_set", "process.DataProcessor.__process_test_set", "process.DataProcessor.__dataset_filename", "pathlib.Path().exists", "tqdm.tqdm.tqdm", "print", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.load", "os.path.join", "pathlib.Path", "process._conversation_to_qa_pairs", "process._tokenize", "process._tokenize"], "methods", ["home.repos.pwc.inspect_result.lancopku_AMM.process.process.DataProcessor.__process_train_set", "home.repos.pwc.inspect_result.lancopku_AMM.process.process.DataProcessor.__process_test_set", "home.repos.pwc.inspect_result.lancopku_AMM.process.process.DataProcessor.__dataset_filename", "home.repos.pwc.inspect_result.lancopku_AMM.process.process._conversation_to_qa_pairs", "home.repos.pwc.inspect_result.lancopku_AMM.process.process._tokenize", "home.repos.pwc.inspect_result.lancopku_AMM.process.process._tokenize"], ["", "", "def", "_on_next", "(", "self", ",", "src", ":", "str", ",", "dst", ":", "str", ",", "task", ":", "str", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dst", ",", "exist_ok", "=", "True", ")", "\n", "\n", "full_set_fp", "=", "os", ".", "path", ".", "join", "(", "dst", ",", "'full.dataset'", ")", "\n", "if", "not", "Path", "(", "full_set_fp", ")", ".", "exists", "(", ")", ":", "\n", "            ", "fn", "=", "{", "\n", "'cornell'", ":", "cornell_conversations", ",", "\n", "'daily'", ":", "daily_conversations", "\n", "}", "\n", "conversations", "=", "fn", "[", "task", "]", "(", "src", ")", "\n", "qa_pairs", "=", "[", "qa", "for", "c", "in", "conversations", "for", "qa", "in", "_conversation_to_qa_pairs", "(", "c", ")", "]", "\n", "qa_pairs", "=", "tqdm", "(", "qa_pairs", ",", "desc", "=", "'Tokenizing QA pairs'", ",", "leave", "=", "False", ")", "\n", "tokenized_qa_pairs", "=", "[", "(", "_tokenize", "(", "q", ")", ",", "_tokenize", "(", "a", ")", ")", "for", "q", ",", "a", "in", "qa_pairs", "if", "q", "and", "a", "]", "\n", "\n", "with", "open", "(", "full_set_fp", ",", "'wb'", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "tokenized_qa_pairs", ",", "f", ",", "-", "1", ")", "\n", "", "print", "(", "'Saved full dataset.'", ")", "\n", "", "else", ":", "\n", "            ", "with", "open", "(", "full_set_fp", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "tokenized_qa_pairs", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "", "train", "=", "self", ".", "__process_train_set", "(", "tokenized_qa_pairs", ",", "dst", ")", "\n", "test", "=", "self", ".", "__process_test_set", "(", "tokenized_qa_pairs", ",", "dst", ")", "\n", "\n", "data", "=", "{", "'train'", ":", "train", ",", "'test'", ":", "test", "}", "\n", "dataset_filename", "=", "self", ".", "__dataset_filename", "(", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "dst", ",", "dataset_filename", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "data", ",", "f", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.process.process.DataProcessor.__process_train_set": [[98, 120], ["len", "tqdm.tqdm.tqdm", "process.DataProcessor.hyperparameter", "process.vocab_processor.VocabularyProcessor", "tqdm.tqdm.tqdm", "process.vocab_processor.VocabularyProcessor.fit", "process.DataProcessor.__vocab_filename", "process.vocab_processor.VocabularyProcessor.save", "tqdm.tqdm.tqdm", "os.path.join", "round", "process.DataProcessor.__flatten_tokenized_utterance", "process.DataProcessor.__flatten_tokenized_utterance", "process.vocab_processor.VocabularyProcessor.add", "process._vecterize", "process._vecterize", "process._is_valid_sample"], "methods", ["home.repos.pwc.inspect_result.lancopku_AMM.process.vocab_processor.VocabularyProcessor.fit", "home.repos.pwc.inspect_result.lancopku_AMM.process.process.DataProcessor.__vocab_filename", "home.repos.pwc.inspect_result.lancopku_AMM.process.vocab_processor.VocabularyProcessor.save", "home.repos.pwc.inspect_result.lancopku_AMM.process.process.DataProcessor.__flatten_tokenized_utterance", "home.repos.pwc.inspect_result.lancopku_AMM.process.process.DataProcessor.__flatten_tokenized_utterance", "home.repos.pwc.inspect_result.lancopku_AMM.process.vocab_processor.VocabularyProcessor.add", "home.repos.pwc.inspect_result.lancopku_AMM.process.process._vecterize", "home.repos.pwc.inspect_result.lancopku_AMM.process.process._vecterize", "home.repos.pwc.inspect_result.lancopku_AMM.process.process._is_valid_sample"], ["", "", "def", "__process_train_set", "(", "self", ",", "tokenized_qa_pairs", ",", "dst", ":", "str", ")", ":", "\n", "        ", "n_samples", "=", "len", "(", "tokenized_qa_pairs", ")", "\n", "train", "=", "tokenized_qa_pairs", "[", ":", "round", "(", "n_samples", "*", "_DATA_SPLIT", ")", "]", "\n", "train", "=", "tqdm", "(", "train", ",", "desc", "=", "'Flattening QA pairs in training set'", ",", "leave", "=", "False", ")", "\n", "train", "=", "[", "\n", "(", "self", ".", "__flatten_tokenized_utterance", "(", "q", ",", "reverse", "=", "True", ")", ",", "\n", "self", ".", "__flatten_tokenized_utterance", "(", "a", ",", "reverse", "=", "False", ")", ")", "for", "q", ",", "a", "in", "train", "]", "\n", "\n", "min_frequency", "=", "self", ".", "hyperparameter", "(", "'min_frequency'", ")", "\n", "vocab_processor", "=", "VocabularyProcessor", "(", "min_frequency", "=", "min_frequency", ")", "\n", "for", "q", ",", "a", "in", "tqdm", "(", "train", ",", "desc", "=", "'Fitting vocabulary'", ",", "leave", "=", "False", ")", ":", "\n", "            ", "for", "word", "in", "q", "+", "a", ":", "\n", "                ", "vocab_processor", ".", "add", "(", "word", ")", "\n", "", "", "vocab_processor", ".", "fit", "(", ")", "\n", "vocab_filename", "=", "self", ".", "__vocab_filename", "(", ")", "\n", "vocab_processor", ".", "save", "(", "os", ".", "path", ".", "join", "(", "dst", ",", "vocab_filename", ")", ")", "\n", "\n", "train", "=", "tqdm", "(", "train", ",", "desc", "=", "'Vectorizing training samples'", ",", "leave", "=", "False", ")", "\n", "train", "=", "[", "(", "_vecterize", "(", "q", ",", "vocab_processor", ")", ",", "_vecterize", "(", "a", ",", "vocab_processor", ")", ")", "for", "q", ",", "a", "in", "train", "\n", "if", "_is_valid_sample", "(", "(", "q", ",", "a", ")", ",", "vocab_processor", ")", "]", "\n", "\n", "return", "train", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.process.process.DataProcessor.__process_test_set": [[121, 138], ["len", "tqdm.tqdm.tqdm", "process.vocab_processor.VocabularyProcessor", "process.DataProcessor.__vocab_filename", "process.vocab_processor.VocabularyProcessor.restore", "tqdm.tqdm.tqdm", "os.path.join", "round", "process.DataProcessor.__flatten_tokenized_utterance", "process.DataProcessor.__flatten_tokenized_utterance", "process._vecterize", "process._vecterize", "process._is_valid_sample"], "methods", ["home.repos.pwc.inspect_result.lancopku_AMM.process.process.DataProcessor.__vocab_filename", "home.repos.pwc.inspect_result.lancopku_AMM.process.vocab_processor.VocabularyProcessor.restore", "home.repos.pwc.inspect_result.lancopku_AMM.process.process.DataProcessor.__flatten_tokenized_utterance", "home.repos.pwc.inspect_result.lancopku_AMM.process.process.DataProcessor.__flatten_tokenized_utterance", "home.repos.pwc.inspect_result.lancopku_AMM.process.process._vecterize", "home.repos.pwc.inspect_result.lancopku_AMM.process.process._vecterize", "home.repos.pwc.inspect_result.lancopku_AMM.process.process._is_valid_sample"], ["", "def", "__process_test_set", "(", "self", ",", "tokenized_qa_pairs", ",", "dst", ":", "str", ")", ":", "\n", "        ", "n_samples", "=", "len", "(", "tokenized_qa_pairs", ")", "\n", "test", "=", "tokenized_qa_pairs", "[", "round", "(", "n_samples", "*", "_DATA_SPLIT", ")", ":", "]", "\n", "test", "=", "tqdm", "(", "test", ",", "desc", "=", "'Flattening QA pairs in testing set'", ",", "leave", "=", "False", ")", "\n", "test", "=", "[", "\n", "(", "self", ".", "__flatten_tokenized_utterance", "(", "q", ",", "reverse", "=", "True", ")", ",", "\n", "self", ".", "__flatten_tokenized_utterance", "(", "a", ",", "reverse", "=", "False", ")", ")", "for", "q", ",", "a", "in", "test", "]", "\n", "\n", "vocab_processor", "=", "VocabularyProcessor", "(", ")", "\n", "vocab_filename", "=", "self", ".", "__vocab_filename", "(", ")", "\n", "vocab_processor", ".", "restore", "(", "os", ".", "path", ".", "join", "(", "dst", ",", "vocab_filename", ")", ")", "\n", "\n", "test", "=", "tqdm", "(", "test", ",", "desc", "=", "'Vectorizing test samples'", ",", "leave", "=", "False", ")", "\n", "test", "=", "[", "(", "_vecterize", "(", "q", ",", "vocab_processor", ")", ",", "_vecterize", "(", "a", ",", "vocab_processor", ")", ")", "for", "q", ",", "a", "in", "test", "\n", "if", "_is_valid_sample", "(", "(", "q", ",", "a", ")", ",", "vocab_processor", ")", "]", "\n", "\n", "return", "test", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.process.process.DataProcessor.__flatten_tokenized_utterance": [[139, 156], ["reversed", "process.DataProcessor.hyperparameter", "len", "len"], "methods", ["None"], ["", "def", "__flatten_tokenized_utterance", "(", "self", ",", "utterance", ":", "List", "[", "List", "[", "str", "]", "]", ",", "reverse", "=", "False", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "flat", "=", "[", "]", "\n", "\n", "if", "reverse", ":", "\n", "            ", "utterance", "=", "reversed", "(", "utterance", ")", "\n", "\n", "", "for", "sent", "in", "utterance", ":", "\n", "            ", "max_sent_length", "=", "self", ".", "hyperparameter", "(", "'max_sent_length'", ")", "\n", "if", "len", "(", "flat", ")", "+", "len", "(", "sent", ")", "<=", "max_sent_length", ":", "\n", "                ", "if", "reverse", ":", "\n", "                    ", "flat", "=", "sent", "+", "flat", "\n", "", "else", ":", "\n", "                    ", "flat", "=", "flat", "+", "sent", "\n", "", "", "else", ":", "\n", "                ", "break", "\n", "\n", "", "", "return", "flat", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.process.process.DataProcessor.__vocab_filename": [[157, 161], ["process.DataProcessor.hyperparameter", "process.DataProcessor.hyperparameter"], "methods", ["None"], ["", "def", "__vocab_filename", "(", "self", ")", "->", "str", ":", "\n", "        ", "max_sent_length", "=", "self", ".", "hyperparameter", "(", "'max_sent_length'", ")", "\n", "min_frequency", "=", "self", ".", "hyperparameter", "(", "'min_frequency'", ")", "\n", "return", "'max_sent_length{}-min_frequency{}.vocab'", ".", "format", "(", "max_sent_length", ",", "min_frequency", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.process.process.DataProcessor.__dataset_filename": [[162, 166], ["process.DataProcessor.hyperparameter", "process.DataProcessor.hyperparameter"], "methods", ["None"], ["", "def", "__dataset_filename", "(", "self", ")", "->", "str", ":", "\n", "        ", "max_sent_length", "=", "self", ".", "hyperparameter", "(", "'max_sent_length'", ")", "\n", "min_frequency", "=", "self", ".", "hyperparameter", "(", "'min_frequency'", ")", "\n", "return", "'max_sent_length{}-min_frequency{}.dataset'", ".", "format", "(", "max_sent_length", ",", "min_frequency", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.process.process.DataProcessor._load_dataset": [[167, 189], ["process.vocab_processor.VocabularyProcessor", "process.vocab_processor.VocabularyProcessor.restore", "print", "process.DataProcessor._get_dataset_node", "open", "pickle.load", "os.path.join", "open", "os.path.join", "process.DataProcessor.__vocab_filename", "os.path.join", "process._tokenize", "process.DataProcessor.__flatten_tokenized_utterance", "process._vecterize", "zip", "process.vocab_processor.VocabularyProcessor.size", "len", "len", "process.DataProcessor.__dataset_filename"], "methods", ["home.repos.pwc.inspect_result.lancopku_AMM.process.vocab_processor.VocabularyProcessor.restore", "home.repos.pwc.inspect_result.lancopku_AMM.process.process.DataProcessor.__vocab_filename", "home.repos.pwc.inspect_result.lancopku_AMM.process.process._tokenize", "home.repos.pwc.inspect_result.lancopku_AMM.process.process.DataProcessor.__flatten_tokenized_utterance", "home.repos.pwc.inspect_result.lancopku_AMM.process.process._vecterize", "home.repos.pwc.inspect_result.lancopku_AMM.process.vocab_processor.VocabularyProcessor.size", "home.repos.pwc.inspect_result.lancopku_AMM.process.process.DataProcessor.__dataset_filename"], ["", "def", "_load_dataset", "(", "self", ")", ":", "\n", "        ", "dst", "=", "self", ".", "_get_dataset_node", "(", ")", ".", "dst", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "dst", ",", "self", ".", "__dataset_filename", "(", ")", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "data", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "vocab_processor", "=", "VocabularyProcessor", "(", ")", "\n", "vocab_processor", ".", "restore", "(", "os", ".", "path", ".", "join", "(", "dst", ",", "self", ".", "__vocab_filename", "(", ")", ")", ")", "\n", "data", "[", "'vocab_processor'", "]", "=", "vocab_processor", "\n", "\n", "# some fixed testing samples in 'test_samples.txt'", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "dst", ",", "'test_samples.txt'", ")", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "texts", "=", "[", "line", "[", ":", "-", "1", "]", "for", "line", "in", "f", "]", "\n", "questions", "=", "[", "_tokenize", "(", "text", ")", "for", "text", "in", "texts", "]", "\n", "questions", "=", "[", "self", ".", "__flatten_tokenized_utterance", "(", "q", ",", "reverse", "=", "True", ")", "for", "q", "in", "questions", "]", "\n", "questions", "=", "[", "_vecterize", "(", "q", ",", "vocab_processor", ")", "for", "q", "in", "questions", "]", "\n", "", "test_samples", "=", "[", "(", "(", "q", ",", "[", "]", ")", ",", "text", ")", "for", "q", ",", "text", "in", "zip", "(", "questions", ",", "texts", ")", "if", "q", "]", "\n", "data", "[", "'test_samples'", "]", "=", "test_samples", "\n", "\n", "print", "(", "'Loaded dataset: {} words, {} training samples, {} testing samples'", ".", "format", "(", "\n", "vocab_processor", ".", "size", "(", ")", ",", "len", "(", "data", "[", "'train'", "]", ")", ",", "len", "(", "data", "[", "'test'", "]", ")", ")", ")", "\n", "\n", "return", "data", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lancopku_AMM.process.process._conversation_to_qa_pairs": [[15, 23], ["len", "range", "qa_pairs.append"], "function", ["None"], ["def", "_conversation_to_qa_pairs", "(", "conversation", ":", "List", "[", "str", "]", ")", "->", "List", "[", "Tuple", "[", "str", ",", "str", "]", "]", ":", "\n", "    ", "qa_pairs", "=", "[", "]", "\n", "length", "=", "len", "(", "conversation", ")", "\n", "for", "i", "in", "range", "(", "length", "-", "1", ")", ":", "\n", "        ", "q", "=", "conversation", "[", "i", "]", "\n", "a", "=", "conversation", "[", "i", "+", "1", "]", "\n", "qa_pairs", ".", "append", "(", "(", "q", ",", "a", ")", ")", "\n", "", "return", "qa_pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.process.process._tokenize": [[25, 32], ["nltk.sent_tokenize", "nltk.word_tokenize", "range", "len", "sent[].lower"], "function", ["None"], ["", "def", "_tokenize", "(", "text", ":", "str", ")", "->", "List", "[", "List", "[", "str", "]", "]", ":", "\n", "    ", "sentences", "=", "nltk", ".", "sent_tokenize", "(", "text", ")", "\n", "sentences", "=", "[", "nltk", ".", "word_tokenize", "(", "sent", ")", "for", "sent", "in", "sentences", "]", "\n", "for", "sent", "in", "sentences", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "sent", ")", ")", ":", "\n", "            ", "sent", "[", "i", "]", "=", "sent", "[", "i", "]", ".", "lower", "(", ")", "\n", "", "", "return", "sentences", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.process.process._is_valid_sample": [[34, 43], ["all", "any", "all", "vocab_processor.is_unknown", "vocab_processor.is_unknown"], "function", ["home.repos.pwc.inspect_result.lancopku_AMM.process.vocab_processor.VocabularyProcessor.is_unknown", "home.repos.pwc.inspect_result.lancopku_AMM.process.vocab_processor.VocabularyProcessor.is_unknown"], ["", "def", "_is_valid_sample", "(", "sample", ":", "Tuple", "[", "List", "[", "str", "]", ",", "List", "[", "str", "]", "]", ",", "\n", "vocab_processor", ":", "VocabularyProcessor", ")", "->", "bool", ":", "\n", "    ", "q", ",", "a", "=", "sample", "\n", "conditions", "=", "[", "\n", "q", ",", "\n", "a", ",", "\n", "any", "(", "not", "vocab_processor", ".", "is_unknown", "(", "w", ")", "for", "w", "in", "q", ")", ",", "\n", "all", "(", "not", "vocab_processor", ".", "is_unknown", "(", "w", ")", "for", "w", "in", "a", ")", "]", "\n", "return", "all", "(", "conditions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.process.process._vecterize": [[45, 47], ["vocab_processor.word2id"], "function", ["home.repos.pwc.inspect_result.lancopku_AMM.process.vocab_processor.VocabularyProcessor.word2id"], ["", "def", "_vecterize", "(", "words", ":", "List", "[", "str", "]", ",", "vocab_processor", ":", "VocabularyProcessor", ")", "->", "List", "[", "int", "]", ":", "\n", "    ", "return", "[", "vocab_processor", ".", "word2id", "(", "w", ")", "for", "w", "in", "words", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.process.daily.daily_conversations": [[6, 11], ["os.path.join", "open", "line.split"], "function", ["None"], ["def", "daily_conversations", "(", "source_dir", ":", "str", ")", ":", "\n", "    ", "path", "=", "os", ".", "path", ".", "join", "(", "source_dir", ",", "_TEXT_FILE_NAME", ")", "\n", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "conversations", "=", "[", "line", ".", "split", "(", "' __eou__'", ")", "[", ":", "-", "1", "]", "for", "line", "in", "f", "]", "\n", "return", "conversations", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lancopku_AMM.process.cornell.cornell_conversations": [[11, 29], ["os.path.join", "os.path.join", "open", "open", "dict", "re.sub", "dict", "ast.literal_eval", "conversations.append", "zip", "zip", "dict.split", "dict.split"], "function", ["None"], ["def", "cornell_conversations", "(", "source_dir", ":", "str", ")", ":", "\n", "    ", "id2line", "=", "{", "}", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "source_dir", ",", "_MOVIE_LINES_FILE_NAME", ")", "\n", "with", "open", "(", "path", ",", "'r'", ",", "errors", "=", "'ignore'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "line", "=", "dict", "(", "zip", "(", "_MOVIE_LINES_FIELDS", ",", "line", ".", "split", "(", "' +++$+++ '", ")", ")", ")", "\n", "text", "=", "re", ".", "sub", "(", "'(\\n)|(<u>)|(</u>)|(\\[\\d\\])'", ",", "''", ",", "line", "[", "'text'", "]", ")", "\n", "id2line", "[", "line", "[", "'lineID'", "]", "]", "=", "text", "\n", "\n", "", "", "conversations", "=", "[", "]", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "source_dir", ",", "_MOVIE_CONVERSATIONS_FILE_NAME", ")", "\n", "with", "open", "(", "path", ",", "'r'", ",", "errors", "=", "'ignore'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "conv", "=", "dict", "(", "zip", "(", "_MOVIE_CONVERSATIONS_FIELDS", ",", "line", ".", "split", "(", "' +++$+++ '", ")", ")", ")", "\n", "line_ids", "=", "ast", ".", "literal_eval", "(", "conv", "[", "'utteranceIDs'", "]", ")", "\n", "conversations", ".", "append", "(", "[", "id2line", "[", "i", "]", "for", "i", "in", "line_ids", "]", ")", "\n", "\n", "", "", "return", "conversations", "\n", "", ""]], "home.repos.pwc.inspect_result.lancopku_AMM.fetch.fetch.Fetcher.fetch": [[8, 14], ["os.makedirs", "fetch.Fetcher._get_dataset_node"], "methods", ["None"], ["    ", "def", "fetch", "(", "self", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "fetch", ".", "util", ".", "DATA_ROOT", ",", "exist_ok", "=", "True", ")", "\n", "fetch_fn", "=", "{", "\n", "'cornell'", ":", "fetch_cornell", "\n", "}", "\n", "fetch_fn", "[", "task", "]", "(", "self", ".", "_get_dataset_node", "(", ")", ".", "src", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lancopku_AMM.fetch.util.download": [[8, 17], ["requests.Session", "session.get", "session.get.close", "open", "session.get.iter_content", "f.write"], "function", ["None"], ["def", "download", "(", "url", ",", "fp", ")", ":", "\n", "    ", "with", "requests", ".", "Session", "(", ")", "as", "session", ":", "\n", "        ", "response", "=", "session", ".", "get", "(", "url", ",", "stream", "=", "True", ")", "\n", "chunk_size", "=", "32768", "\n", "with", "open", "(", "fp", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "for", "chunk", "in", "response", ".", "iter_content", "(", "chunk_size", ")", ":", "\n", "                ", "if", "chunk", ":", "\n", "                    ", "f", ".", "write", "(", "chunk", ")", "\n", "", "", "", "response", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.fetch.util.unzip": [[19, 23], ["os.path.join", "shutil.unpack_archive", "os.remove"], "function", ["None"], ["", "", "def", "unzip", "(", "path", ",", "filename", ")", ":", "\n", "    ", "fp", "=", "os", ".", "path", ".", "join", "(", "path", ",", "filename", ")", "\n", "shutil", ".", "unpack_archive", "(", "fp", ",", "path", ")", "\n", "os", ".", "remove", "(", "fp", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lancopku_AMM.fetch.cornell.fetch_cornell": [[10, 20], ["os.listdir", "pathlib.Path().is_dir", "os.path.join", "fetch.util.download", "fetch.util.unzip", "os.path.join", "os.rename", "os.remove", "pathlib.Path", "os.path.join"], "function", ["home.repos.pwc.inspect_result.lancopku_AMM.fetch.util.download", "home.repos.pwc.inspect_result.lancopku_AMM.fetch.util.unzip"], ["\n", "def", "cornell_conversations", "(", "source_dir", ":", "str", ")", ":", "\n", "    ", "id2line", "=", "{", "}", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "source_dir", ",", "_MOVIE_LINES_FILE_NAME", ")", "\n", "with", "open", "(", "path", ",", "'r'", ",", "errors", "=", "'ignore'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "line", "=", "dict", "(", "zip", "(", "_MOVIE_LINES_FIELDS", ",", "line", ".", "split", "(", "' +++$+++ '", ")", ")", ")", "\n", "text", "=", "re", ".", "sub", "(", "'(\\n)|(<u>)|(</u>)|(\\[\\d\\])'", ",", "''", ",", "line", "[", "'text'", "]", ")", "\n", "id2line", "[", "line", "[", "'lineID'", "]", "]", "=", "text", "\n", "\n", "", "", "conversations", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.model.auto_encoder.AutoEncoderModel.__init__": [[9, 24], ["model.seq.Seq2SeqModel.__init__"], "methods", ["home.repos.pwc.inspect_result.lancopku_AMM.model.seq_attn.Seq2SeqAttentionModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", ":", "str", "=", "'auto'", ")", ":", "\n", "        ", "super", "(", "AutoEncoderModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "q_dec", "=", "None", "\n", "self", ".", "q_target", "=", "None", "\n", "self", ".", "q_weights", "=", "None", "\n", "self", ".", "a_enc", "=", "None", "\n", "\n", "self", ".", "q_dec_outputs", "=", "None", "\n", "self", ".", "a_dec_outputs", "=", "None", "\n", "\n", "self", ".", "q_loss_op", "=", "None", "\n", "self", ".", "q_train_op", "=", "None", "\n", "self", ".", "a_loss_op", "=", "None", "\n", "self", ".", "a_train_op", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.model.auto_encoder.AutoEncoderModel._build_placeholders": [[25, 39], ["super()._build_placeholders", "tf.name_scope", "tf.name_scope", "tf.name_scope", "tf.placeholder", "tf.placeholder", "tf.placeholder", "tf.placeholder", "range", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.lancopku_AMM.model.seq.Seq2SeqModel._build_placeholders"], ["", "def", "_build_placeholders", "(", "self", ")", ":", "\n", "        ", "super", "(", "AutoEncoderModel", ",", "self", ")", ".", "_build_placeholders", "(", ")", "\n", "\n", "with", "tf", ".", "name_scope", "(", "'placeholder'", ")", ":", "\n", "            ", "with", "tf", ".", "name_scope", "(", "'q'", ")", ":", "\n", "                ", "self", ".", "q_dec", "=", "[", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "]", ",", "name", "=", "'decoders'", ")", "for", "_", "in", "\n", "range", "(", "self", ".", "dec_length", ")", "]", "\n", "self", ".", "q_target", "=", "[", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "]", ",", "name", "=", "'target'", ")", "for", "_", "in", "\n", "range", "(", "self", ".", "dec_length", ")", "]", "\n", "self", ".", "q_weights", "=", "[", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "]", ",", "name", "=", "'weights'", ")", "for", "_", "in", "\n", "range", "(", "self", ".", "dec_length", ")", "]", "\n", "", "with", "tf", ".", "name_scope", "(", "'a'", ")", ":", "\n", "                ", "self", ".", "a_enc", "=", "[", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "]", ",", "name", "=", "'encoders'", ")", "for", "_", "in", "\n", "range", "(", "self", ".", "enc_length", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.model.auto_encoder.AutoEncoderModel._build_seq2seq": [[40, 114], ["super()._build_seq2seq", "tf.name_scope", "auto_encoder.AutoEncoderModel.hyperparameter", "tf.contrib.rnn.MultiRNNCell", "tf.contrib.rnn.MultiRNNCell", "auto_encoder.AutoEncoderModel.hyperparameter", "embedding_rnn_encoder", "embedding_rnn_decoder", "embedding_rnn_encoder", "embedding_rnn_decoder", "states_projection", "auto_encoder.AutoEncoderModel.output_projection.variables", "auto_encoder.AutoEncoderModel._vocab_size", "auto_encoder.AutoEncoderModel._vocab_size", "auto_encoder.AutoEncoderModel._vocab_size", "auto_encoder.AutoEncoderModel._vocab_size", "auto_encoder.AutoEncoderModel.hyperparameter", "embedding_attention_decoder", "embedding_rnn_decoder", "auto_encoder.AutoEncoderModel._create_rnn_cell", "auto_encoder.AutoEncoderModel._create_rnn_cell", "auto_encoder.AutoEncoderModel._vocab_size", "auto_encoder.AutoEncoderModel._vocab_size", "range", "range"], "methods", ["home.repos.pwc.inspect_result.lancopku_AMM.model.seq_attn.Seq2SeqAttentionModel._build_seq2seq", "home.repos.pwc.inspect_result.lancopku_AMM.model.tf_rnn_helper.embedding_rnn_encoder", "home.repos.pwc.inspect_result.lancopku_AMM.model.tf_rnn_helper.embedding_rnn_decoder", "home.repos.pwc.inspect_result.lancopku_AMM.model.tf_rnn_helper.embedding_rnn_encoder", "home.repos.pwc.inspect_result.lancopku_AMM.model.tf_rnn_helper.embedding_rnn_decoder", "home.repos.pwc.inspect_result.lancopku_AMM.model.tf_rnn_helper.states_projection", "home.repos.pwc.inspect_result.lancopku_AMM.model.seq.Projection.variables", "home.repos.pwc.inspect_result.lancopku_AMM.model.base.BasicChatbotModel._vocab_size", "home.repos.pwc.inspect_result.lancopku_AMM.model.base.BasicChatbotModel._vocab_size", "home.repos.pwc.inspect_result.lancopku_AMM.model.base.BasicChatbotModel._vocab_size", "home.repos.pwc.inspect_result.lancopku_AMM.model.base.BasicChatbotModel._vocab_size", "home.repos.pwc.inspect_result.lancopku_AMM.model.tf_rnn_helper.embedding_attention_decoder", "home.repos.pwc.inspect_result.lancopku_AMM.model.tf_rnn_helper.embedding_rnn_decoder", "home.repos.pwc.inspect_result.lancopku_AMM.model.seq.Seq2SeqModel._create_rnn_cell", "home.repos.pwc.inspect_result.lancopku_AMM.model.seq.Seq2SeqModel._create_rnn_cell", "home.repos.pwc.inspect_result.lancopku_AMM.model.base.BasicChatbotModel._vocab_size", "home.repos.pwc.inspect_result.lancopku_AMM.model.base.BasicChatbotModel._vocab_size"], ["", "", "", "def", "_build_seq2seq", "(", "self", ",", "mode", ":", "str", ")", ":", "\n", "        ", "super", "(", "AutoEncoderModel", ",", "self", ")", ".", "_build_seq2seq", "(", "mode", ")", "\n", "\n", "with", "tf", ".", "name_scope", "(", "'seq2seq'", ")", ":", "\n", "            ", "n_layers", "=", "self", ".", "hyperparameter", "(", "'n_layers'", ")", "\n", "\n", "q_cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "MultiRNNCell", "(", "\n", "[", "self", ".", "_create_rnn_cell", "(", "mode", ")", "for", "_", "in", "range", "(", "n_layers", ")", "]", ")", "\n", "a_cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "MultiRNNCell", "(", "\n", "[", "self", ".", "_create_rnn_cell", "(", "mode", ")", "for", "_", "in", "range", "(", "n_layers", ")", "]", ")", "\n", "\n", "embedding_size", "=", "self", ".", "hyperparameter", "(", "'embedding_size'", ")", "\n", "output_projection", "=", "self", ".", "output_projection", ".", "variables", "(", ")", "if", "self", ".", "output_projection", "else", "None", "\n", "\n", "q_states", ",", "q_attn_states", "=", "embedding_rnn_encoder", "(", "\n", "self", ".", "q_enc", ",", "\n", "q_cell", ",", "\n", "self", ".", "_vocab_size", "(", ")", ",", "\n", "embedding_size", ",", "\n", "scope", "=", "'q_encoder'", ")", "\n", "self", ".", "q_dec_outputs", ",", "_", "=", "embedding_rnn_decoder", "(", "\n", "self", ".", "q_dec", ",", "\n", "q_states", ",", "\n", "q_cell", ",", "\n", "self", ".", "_vocab_size", "(", ")", ",", "\n", "embedding_size", ",", "\n", "output_projection", "=", "output_projection", ",", "\n", "feed_previous", "=", "mode", "==", "'test'", ",", "\n", "scope", "=", "'q_decoder'", ")", "\n", "\n", "a_states", ",", "_", "=", "embedding_rnn_encoder", "(", "\n", "self", ".", "a_enc", ",", "\n", "a_cell", ",", "\n", "self", ".", "_vocab_size", "(", ")", ",", "\n", "embedding_size", ",", "\n", "scope", "=", "'a_encoder'", ")", "\n", "self", ".", "a_dec_outputs", ",", "_", "=", "embedding_rnn_decoder", "(", "\n", "self", ".", "a_dec", ",", "\n", "a_states", ",", "\n", "a_cell", ",", "\n", "self", ".", "_vocab_size", "(", ")", ",", "\n", "embedding_size", ",", "\n", "output_projection", "=", "output_projection", ",", "\n", "feed_previous", "=", "mode", "==", "'test'", ",", "\n", "scope", "=", "'a_decoder'", ")", "\n", "\n", "states_p", "=", "states_projection", "(", "\n", "q_states", ",", "\n", "self", ".", "hyperparameter", "(", "'hidden_size'", ")", ",", "\n", "activate_fn", "=", "tf", ".", "nn", ".", "tanh", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "if", "'attn'", "in", "self", ".", "name", ":", "# with attention", "\n", "                ", "self", ".", "seq_dec_outputs", ",", "_", "=", "embedding_attention_decoder", "(", "\n", "self", ".", "a_dec", ",", "\n", "states_p", ",", "\n", "q_attn_states", ",", "\n", "a_cell", ",", "\n", "self", ".", "_vocab_size", "(", ")", ",", "\n", "embedding_size", ",", "\n", "output_projection", "=", "output_projection", ",", "\n", "feed_previous", "=", "mode", "==", "'test'", ",", "\n", "scope", "=", "'seq_decoder'", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "seq_dec_outputs", ",", "_", "=", "embedding_rnn_decoder", "(", "\n", "self", ".", "a_dec", ",", "\n", "states_p", ",", "\n", "a_cell", ",", "\n", "self", ".", "_vocab_size", "(", ")", ",", "\n", "embedding_size", ",", "\n", "output_projection", "=", "output_projection", ",", "\n", "feed_previous", "=", "mode", "==", "'test'", ",", "\n", "scope", "=", "'seq_decoder'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.model.auto_encoder.AutoEncoderModel._build_optimize_ops": [[115, 133], ["super()._build_optimize_ops", "tf.contrib.legacy_seq2seq.sequence_loss", "tf.contrib.legacy_seq2seq.sequence_loss", "auto_encoder.AutoEncoderModel.optimizer.minimize", "auto_encoder.AutoEncoderModel.optimizer.minimize", "auto_encoder.AutoEncoderModel._vocab_size", "auto_encoder.AutoEncoderModel._vocab_size"], "methods", ["home.repos.pwc.inspect_result.lancopku_AMM.model.seq.Seq2SeqModel._build_optimize_ops", "home.repos.pwc.inspect_result.lancopku_AMM.model.base.BasicChatbotModel._vocab_size", "home.repos.pwc.inspect_result.lancopku_AMM.model.base.BasicChatbotModel._vocab_size"], ["", "", "", "def", "_build_optimize_ops", "(", "self", ")", ":", "\n", "        ", "super", "(", "AutoEncoderModel", ",", "self", ")", ".", "_build_optimize_ops", "(", ")", "\n", "\n", "self", ".", "q_loss_op", "=", "tf", ".", "contrib", ".", "legacy_seq2seq", ".", "sequence_loss", "(", "\n", "self", ".", "q_dec_outputs", ",", "\n", "self", ".", "q_target", ",", "\n", "self", ".", "q_weights", ",", "\n", "self", ".", "_vocab_size", "(", ")", ",", "\n", "softmax_loss_function", "=", "self", ".", "_sampled_softmax_fn", "if", "self", ".", "output_projection", "else", "None", ")", "\n", "self", ".", "a_loss_op", "=", "tf", ".", "contrib", ".", "legacy_seq2seq", ".", "sequence_loss", "(", "\n", "self", ".", "a_dec_outputs", ",", "\n", "self", ".", "a_target", ",", "\n", "self", ".", "a_weights", ",", "\n", "self", ".", "_vocab_size", "(", ")", ",", "\n", "softmax_loss_function", "=", "self", ".", "_sampled_softmax_fn", "if", "self", ".", "output_projection", "else", "None", ")", "\n", "\n", "self", ".", "q_train_op", "=", "self", ".", "optimizer", ".", "minimize", "(", "self", ".", "q_loss_op", ")", "\n", "self", ".", "a_train_op", "=", "self", ".", "optimizer", ".", "minimize", "(", "self", ".", "a_loss_op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.model.auto_encoder.AutoEncoderModel._train_step": [[134, 159], ["range", "range", "auto_encoder.AutoEncoderModel.sess.run", "auto_encoder.AutoEncoderModel.sess.run", "math.exp", "tqdm.tqdm.tqdm.write", "auto_encoder.AutoEncoderModel.training_parameter", "float", "float"], "methods", ["None"], ["", "def", "_train_step", "(", "self", ",", "batch", ":", "Batch", ")", ":", "\n", "        ", "feed_dict", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "self", ".", "enc_length", ")", ":", "\n", "            ", "feed_dict", "[", "self", ".", "q_enc", "[", "i", "]", "]", "=", "batch", ".", "q_enc_seq", "[", "i", "]", "\n", "feed_dict", "[", "self", ".", "a_enc", "[", "i", "]", "]", "=", "batch", ".", "a_enc_seq", "[", "i", "]", "\n", "", "for", "i", "in", "range", "(", "self", ".", "dec_length", ")", ":", "\n", "            ", "feed_dict", "[", "self", ".", "q_dec", "[", "i", "]", "]", "=", "batch", ".", "q_dec_seq", "[", "i", "]", "\n", "feed_dict", "[", "self", ".", "q_target", "[", "i", "]", "]", "=", "batch", ".", "q_target_seq", "[", "i", "]", "\n", "feed_dict", "[", "self", ".", "q_weights", "[", "i", "]", "]", "=", "batch", ".", "q_weights", "[", "i", "]", "\n", "feed_dict", "[", "self", ".", "a_dec", "[", "i", "]", "]", "=", "batch", ".", "a_dec_seq", "[", "i", "]", "\n", "feed_dict", "[", "self", ".", "a_target", "[", "i", "]", "]", "=", "batch", ".", "a_target_seq", "[", "i", "]", "\n", "feed_dict", "[", "self", ".", "a_weights", "[", "i", "]", "]", "=", "batch", ".", "a_weights", "[", "i", "]", "\n", "\n", "", "_", ",", "q_loss", ",", "_", ",", "a_loss", "=", "self", ".", "sess", ".", "run", "(", "\n", "[", "self", ".", "q_train_op", ",", "self", ".", "q_loss_op", ",", "self", ".", "a_train_op", ",", "self", ".", "a_loss_op", "]", ",", "\n", "feed_dict", "=", "feed_dict", ")", "\n", "\n", "_", ",", "loss", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "seq_train_op", ",", "self", ".", "seq_loss_op", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "\n", "# Print training status", "\n", "if", "self", ".", "global_step", "%", "self", ".", "training_parameter", "(", "'print_interval'", ")", "==", "0", ":", "\n", "            ", "perplexity", "=", "math", ".", "exp", "(", "float", "(", "loss", ")", "if", "loss", "<", "300", "else", "float", "(", "'inf'", ")", ")", "\n", "tqdm", ".", "write", "(", "\n", "'----- Step %d -- Q Loss %.2f -- A Loss %.2f -- Loss %.2f -- Perplexity %.2f'", "%", "(", "\n", "self", ".", "global_step", ",", "q_loss", ",", "a_loss", ",", "loss", ",", "perplexity", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.lancopku_AMM.model.base.BasicChatbotModel.__init__": [[16, 26], ["mlbootstrap.model.BasicModel.__init__"], "methods", ["home.repos.pwc.inspect_result.lancopku_AMM.model.seq_attn.Seq2SeqAttentionModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", ":", "str", "=", "'basic_chatbot_model'", ")", ":", "\n", "        ", "super", "(", "BasicChatbotModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "enc_length", "=", "None", "\n", "self", ".", "dec_length", "=", "None", "\n", "\n", "self", ".", "sess", ":", "tf", ".", "Session", "=", "None", "\n", "self", ".", "saver", ":", "tf", ".", "train", ".", "Saver", "=", "None", "\n", "\n", "self", ".", "global_step", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.model.base.BasicChatbotModel.train": [[27, 53], ["base.BasicChatbotModel._restore_model_settings", "base.BasicChatbotModel._build_graph", "base.BasicChatbotModel._create_session", "base.BasicChatbotModel._restore_checkpoint", "print", "base.BasicChatbotModel.training_parameter", "range", "print", "base.BasicChatbotModel.training_parameter", "print", "datetime.datetime.now", "base.BasicChatbotModel._get_batches", "tqdm.tqdm.tqdm", "datetime.datetime.now", "print", "base.BasicChatbotModel._train_step", "base.BasicChatbotModel._save_checkpoint", "base.BasicChatbotModel.training_parameter"], "methods", ["home.repos.pwc.inspect_result.lancopku_AMM.model.base.BasicChatbotModel._restore_model_settings", "home.repos.pwc.inspect_result.lancopku_AMM.model.seq.Seq2SeqModel._build_graph", "home.repos.pwc.inspect_result.lancopku_AMM.model.base.BasicChatbotModel._create_session", "home.repos.pwc.inspect_result.lancopku_AMM.model.base.BasicChatbotModel._restore_checkpoint", "home.repos.pwc.inspect_result.lancopku_AMM.model.base.BasicChatbotModel._get_batches", "home.repos.pwc.inspect_result.lancopku_AMM.model.seq.Seq2SeqModel._train_step", "home.repos.pwc.inspect_result.lancopku_AMM.model.base.BasicChatbotModel._save_checkpoint"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "self", ".", "_restore_model_settings", "(", ")", "\n", "self", ".", "_build_graph", "(", "'train'", ")", "\n", "self", ".", "_create_session", "(", ")", "\n", "self", ".", "_restore_checkpoint", "(", ")", "\n", "\n", "print", "(", "'Start training ...'", ")", "\n", "epoch", "=", "self", ".", "training_parameter", "(", "'epoch'", ")", "\n", "\n", "for", "e", "in", "range", "(", "1", ",", "epoch", "+", "1", ")", ":", "\n", "            ", "print", "(", ")", "\n", "learning_rate", "=", "self", ".", "training_parameter", "(", "'learning_rate'", ")", "\n", "print", "(", "\n", "'----- Epoch {}/{} ; (learning_rate={}) -----'", ".", "format", "(", "e", ",", "epoch", ",", "learning_rate", ")", ")", "\n", "\n", "tic", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "batches", "=", "self", ".", "_get_batches", "(", "'train'", ")", "\n", "for", "batch", "in", "tqdm", "(", "batches", ",", "desc", "=", "'Training'", ")", ":", "\n", "                ", "self", ".", "global_step", "+=", "1", "\n", "self", ".", "_train_step", "(", "batch", ")", "\n", "\n", "if", "self", ".", "global_step", "%", "self", ".", "training_parameter", "(", "'save_interval'", ")", "==", "0", ":", "\n", "                    ", "self", ".", "_save_checkpoint", "(", ")", "\n", "\n", "", "", "toc", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "print", "(", "'Epoch finished in {}'", ".", "format", "(", "toc", "-", "tic", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.model.base.BasicChatbotModel._restore_model_settings": [[54, 68], ["os.path.join", "os.makedirs", "os.path.join", "os.path.exists", "base.BasicChatbotModel.hyperparameter", "open", "yaml.load"], "methods", ["None"], ["", "", "def", "_restore_model_settings", "(", "self", ")", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_config", "[", "'model'", "]", "[", "'save_path'", "]", ",", "self", ".", "name", ")", "\n", "os", ".", "makedirs", "(", "path", ",", "exist_ok", "=", "True", ")", "\n", "status_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "_MODEL_STATUS_FILENAME", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "status_path", ")", ":", "\n", "            ", "with", "open", "(", "status_path", ",", "'r'", ")", "as", "stream", ":", "\n", "                ", "model_status", "=", "yaml", ".", "load", "(", "stream", ")", "\n", "self", ".", "global_step", "=", "model_status", "[", "'global_step'", "]", "\n", "self", ".", "_config", "[", "'hyperparameter'", "]", "=", "model_status", "[", "'hyperparameter'", "]", "\n", "\n", "", "", "max_sent_length", "=", "self", ".", "hyperparameter", "(", "'max_sent_length'", ")", "\n", "self", ".", "enc_length", "=", "max_sent_length", "\n", "self", ".", "dec_length", "=", "max_sent_length", "+", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.model.base.BasicChatbotModel._build_graph": [[69, 71], ["None"], "methods", ["None"], ["", "def", "_build_graph", "(", "self", ",", "mode", ":", "str", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.model.base.BasicChatbotModel._create_session": [[72, 78], ["tensorflow.Session", "tensorflow.train.Saver", "tensorflow.ConfigProto", "tensorflow.GPUOptions"], "methods", ["None"], ["", "def", "_create_session", "(", "self", ")", ":", "\n", "        ", "self", ".", "sess", "=", "tf", ".", "Session", "(", "config", "=", "tf", ".", "ConfigProto", "(", "\n", "allow_soft_placement", "=", "True", ",", "\n", "gpu_options", "=", "tf", ".", "GPUOptions", "(", "allow_growth", "=", "True", ")", "\n", ")", ")", "\n", "self", ".", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.model.base.BasicChatbotModel._restore_checkpoint": [[79, 93], ["os.path.join", "os.makedirs", "os.path.join", "os.path.exists", "tensorflow.train.get_checkpoint_state", "base.BasicChatbotModel.sess.run", "base.BasicChatbotModel.saver.restore", "print", "exit", "tensorflow.global_variables_initializer"], "methods", ["home.repos.pwc.inspect_result.lancopku_AMM.process.vocab_processor.VocabularyProcessor.restore"], ["", "def", "_restore_checkpoint", "(", "self", ")", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_config", "[", "'model'", "]", "[", "'save_path'", "]", ",", "self", ".", "name", ")", "\n", "os", ".", "makedirs", "(", "path", ",", "exist_ok", "=", "True", ")", "\n", "status_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "_MODEL_STATUS_FILENAME", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "status_path", ")", ":", "\n", "            ", "ckpt", "=", "tf", ".", "train", ".", "get_checkpoint_state", "(", "path", ")", "\n", "if", "ckpt", "and", "ckpt", ".", "model_checkpoint_path", ":", "\n", "                ", "self", ".", "saver", ".", "restore", "(", "self", ".", "sess", ",", "ckpt", ".", "model_checkpoint_path", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'No checkpoint found'", ")", "\n", "exit", "(", "1", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.model.base.BasicChatbotModel._save_checkpoint": [[94, 104], ["tqdm.tqdm.tqdm.write", "os.path.join", "os.makedirs", "base.BasicChatbotModel._save_model_status", "os.path.join", "base.BasicChatbotModel.saver.save", "tqdm.tqdm.tqdm.write"], "methods", ["home.repos.pwc.inspect_result.lancopku_AMM.model.base.BasicChatbotModel._save_model_status", "home.repos.pwc.inspect_result.lancopku_AMM.process.vocab_processor.VocabularyProcessor.save"], ["", "", "def", "_save_checkpoint", "(", "self", ")", ":", "\n", "        ", "tqdm", ".", "write", "(", "\"Checkpoint reached: saving model (don't stop the run) ...\"", ")", "\n", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_config", "[", "'model'", "]", "[", "'save_path'", "]", ",", "self", ".", "name", ")", "\n", "os", ".", "makedirs", "(", "path", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "_save_model_status", "(", "path", ")", "\n", "\n", "model_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'model'", ")", "\n", "self", ".", "saver", ".", "save", "(", "self", ".", "sess", ",", "model_path", ",", "global_step", "=", "self", ".", "global_step", ")", "\n", "tqdm", ".", "write", "(", "'Model saved.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.model.base.BasicChatbotModel._save_model_status": [[105, 112], ["os.path.join", "open", "yaml.dump"], "methods", ["None"], ["", "def", "_save_model_status", "(", "self", ",", "path", ":", "str", ")", ":", "\n", "        ", "model_status", "=", "{", "\n", "'hyperparameter'", ":", "self", ".", "_config", "[", "'hyperparameter'", "]", ",", "\n", "'global_step'", ":", "self", ".", "global_step", "}", "\n", "status_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "_MODEL_STATUS_FILENAME", ")", "\n", "with", "open", "(", "status_path", ",", "'w'", ")", "as", "stream", ":", "\n", "            ", "yaml", ".", "dump", "(", "model_status", ",", "stream", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.model.base.BasicChatbotModel._train_step": [[113, 115], ["None"], "methods", ["None"], ["", "", "def", "_train_step", "(", "self", ",", "batch", ":", "Batch", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.model.base.BasicChatbotModel._vocab_size": [[116, 118], ["base.BasicChatbotModel.dataset[].size"], "methods", ["home.repos.pwc.inspect_result.lancopku_AMM.process.vocab_processor.VocabularyProcessor.size"], ["", "def", "_vocab_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dataset", "[", "'vocab_processor'", "]", ".", "size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.model.base.BasicChatbotModel._get_batches": [[119, 127], ["base.BasicChatbotModel.training_parameter", "random.shuffle", "base.BasicChatbotModel._create_batch", "range", "min", "len", "len"], "methods", ["home.repos.pwc.inspect_result.lancopku_AMM.model.base.BasicChatbotModel._create_batch"], ["", "def", "_get_batches", "(", "self", ",", "mode", ":", "str", ")", "->", "List", "[", "Batch", "]", ":", "\n", "        ", "if", "mode", "==", "'train'", ":", "\n", "            ", "random", ".", "shuffle", "(", "self", ".", "dataset", "[", "mode", "]", ")", "\n", "", "samples", "=", "self", ".", "dataset", "[", "mode", "]", "\n", "batch_size", "=", "self", ".", "training_parameter", "(", "'batch_size'", ")", "\n", "samples_list", "=", "[", "samples", "[", "i", ":", "min", "(", "i", "+", "batch_size", ",", "len", "(", "samples", ")", ")", "]", "for", "i", "in", "\n", "range", "(", "0", ",", "len", "(", "samples", ")", ",", "batch_size", ")", "]", "\n", "return", "[", "self", ".", "_create_batch", "(", "samples", ")", "for", "samples", "in", "samples_list", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.model.base.BasicChatbotModel._create_batch": [[128, 191], ["model.batch.Batch", "vocab_processor.word2id", "vocab_processor.word2id", "vocab_processor.word2id", "base.BasicChatbotModel._create_batch.__transpose"], "methods", ["home.repos.pwc.inspect_result.lancopku_AMM.process.vocab_processor.VocabularyProcessor.word2id", "home.repos.pwc.inspect_result.lancopku_AMM.process.vocab_processor.VocabularyProcessor.word2id", "home.repos.pwc.inspect_result.lancopku_AMM.process.vocab_processor.VocabularyProcessor.word2id"], ["", "def", "_create_batch", "(", "self", ",", "samples", ":", "List", "[", "Tuple", "[", "List", ",", "List", "]", "]", ")", "->", "Batch", ":", "\n", "        ", "batch", "=", "Batch", "(", ")", "\n", "vocab_processor", ":", "VocabularyProcessor", "=", "self", ".", "dataset", "[", "'vocab_processor'", "]", "\n", "go_id", "=", "vocab_processor", ".", "word2id", "(", "GO_TOKEN", ")", "\n", "eos_id", "=", "vocab_processor", ".", "word2id", "(", "EOS_TOKEN", ")", "\n", "pad_id", "=", "vocab_processor", ".", "word2id", "(", "PAD_TOKEN", ")", "\n", "\n", "for", "q", ",", "a", "in", "samples", ":", "\n", "            ", "def", "__pad", "(", "arr", ",", "pad_token", ",", "length", ",", "from_left", "=", "False", ")", ":", "\n", "                ", "if", "len", "(", "arr", ")", ">=", "length", ":", "\n", "                    ", "return", "arr", "\n", "", "padding", "=", "[", "pad_token", "]", "*", "(", "length", "-", "len", "(", "arr", ")", ")", "\n", "if", "from_left", ":", "\n", "                    ", "arr", "=", "padding", "+", "arr", "\n", "", "else", ":", "\n", "                    ", "arr", "=", "arr", "+", "padding", "\n", "", "return", "arr", "\n", "\n", "", "q_enc_seq", "=", "__pad", "(", "list", "(", "reversed", "(", "q", ")", ")", ",", "pad_id", ",", "self", ".", "enc_length", ",", "from_left", "=", "True", ")", "\n", "batch", ".", "q_enc_seq", ".", "append", "(", "q_enc_seq", ")", "\n", "\n", "q_dec_seq", "=", "__pad", "(", "[", "go_id", "]", "+", "q", "+", "[", "eos_id", "]", ",", "pad_id", ",", "self", ".", "dec_length", ")", "\n", "batch", ".", "q_dec_seq", ".", "append", "(", "q_dec_seq", ")", "\n", "\n", "q_target_seq", "=", "__pad", "(", "q", "+", "[", "eos_id", "]", ",", "pad_id", ",", "self", ".", "dec_length", ")", "\n", "batch", ".", "q_target_seq", ".", "append", "(", "q_target_seq", ")", "\n", "\n", "q_weights", "=", "__pad", "(", "[", "1.0", "]", "*", "len", "(", "q", ")", ",", "0.0", ",", "self", ".", "dec_length", ")", "\n", "batch", ".", "q_weights", ".", "append", "(", "q_weights", ")", "\n", "\n", "a_enc_seq", "=", "__pad", "(", "list", "(", "reversed", "(", "a", ")", ")", ",", "pad_id", ",", "self", ".", "enc_length", ",", "from_left", "=", "True", ")", "\n", "batch", ".", "a_enc_seq", ".", "append", "(", "a_enc_seq", ")", "\n", "\n", "a_dec_seq", "=", "__pad", "(", "[", "go_id", "]", "+", "a", "+", "[", "eos_id", "]", ",", "pad_id", ",", "self", ".", "dec_length", ")", "\n", "batch", ".", "a_dec_seq", ".", "append", "(", "a_dec_seq", ")", "\n", "\n", "a_target_seq", "=", "__pad", "(", "a", "+", "[", "eos_id", "]", ",", "pad_id", ",", "self", ".", "dec_length", ")", "\n", "batch", ".", "a_target_seq", ".", "append", "(", "a_target_seq", ")", "\n", "\n", "a_weights", "=", "__pad", "(", "[", "1.0", "]", "*", "len", "(", "a", ")", ",", "0.0", ",", "self", ".", "dec_length", ")", "\n", "batch", ".", "a_weights", ".", "append", "(", "a_weights", ")", "\n", "\n", "", "def", "__transpose", "(", "arr", ")", ":", "\n", "            ", "len1", "=", "len", "(", "arr", ")", "\n", "len2", "=", "len", "(", "arr", "[", "0", "]", ")", "\n", "result", "=", "[", "]", "\n", "for", "_i", "in", "range", "(", "len2", ")", ":", "\n", "                ", "next_arr", "=", "[", "]", "\n", "for", "_j", "in", "range", "(", "len1", ")", ":", "\n", "                    ", "next_arr", ".", "append", "(", "arr", "[", "_j", "]", "[", "_i", "]", ")", "\n", "", "result", ".", "append", "(", "next_arr", ")", "\n", "", "return", "result", "\n", "\n", "", "batch", ".", "q_enc_seq", "=", "__transpose", "(", "batch", ".", "q_enc_seq", ")", "\n", "batch", ".", "q_dec_seq", "=", "__transpose", "(", "batch", ".", "q_dec_seq", ")", "\n", "batch", ".", "q_target_seq", "=", "__transpose", "(", "batch", ".", "q_target_seq", ")", "\n", "batch", ".", "q_weights", "=", "__transpose", "(", "batch", ".", "q_weights", ")", "\n", "batch", ".", "a_enc_seq", "=", "__transpose", "(", "batch", ".", "a_enc_seq", ")", "\n", "batch", ".", "a_dec_seq", "=", "__transpose", "(", "batch", ".", "a_dec_seq", ")", "\n", "batch", ".", "a_target_seq", "=", "__transpose", "(", "batch", ".", "a_target_seq", ")", "\n", "batch", ".", "a_weights", "=", "__transpose", "(", "batch", ".", "a_weights", ")", "\n", "\n", "return", "batch", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lancopku_AMM.model.seq.Projection.__init__": [[16, 22], ["len", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.constant_initializer"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "shape", ":", "List", "[", "int", "]", ",", "scope", "=", "None", ",", "dtype", "=", "None", ")", ":", "\n", "        ", "self", ".", "scope", "=", "scope", "\n", "assert", "len", "(", "shape", ")", "==", "2", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "dtype", "=", "dtype", ")", ":", "\n", "            ", "self", ".", "W", "=", "tf", ".", "get_variable", "(", "'weight'", ",", "shape", ")", "\n", "self", ".", "b", "=", "tf", ".", "get_variable", "(", "'bias'", ",", "shape", "[", "1", ":", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.model.seq.Projection.variables": [[23, 25], ["None"], "methods", ["None"], ["", "", "def", "variables", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "W", ",", "self", ".", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.model.seq.Projection.__call__": [[26, 29], ["tensorflow.name_scope"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "self", ".", "scope", ")", ":", "\n", "            ", "return", "x", "@", "self", ".", "W", "+", "self", ".", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.model.seq.Seq2SeqModel.__init__": [[32, 49], ["model.base.BasicChatbotModel.__init__"], "methods", ["home.repos.pwc.inspect_result.lancopku_AMM.model.seq_attn.Seq2SeqAttentionModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", ":", "str", "=", "'seq'", ")", ":", "\n", "        ", "super", "(", "Seq2SeqModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "q_enc", "=", "None", "\n", "self", ".", "a_dec", "=", "None", "\n", "self", ".", "a_target", "=", "None", "\n", "self", ".", "a_weights", "=", "None", "\n", "\n", "self", ".", "seq_dec_outputs", "=", "None", "\n", "\n", "self", ".", "output_projection", ":", "Projection", "=", "None", "\n", "\n", "self", ".", "outputs", "=", "None", "\n", "\n", "self", ".", "optimizer", "=", "None", "\n", "\n", "self", ".", "seq_loss_op", "=", "None", "\n", "self", ".", "seq_train_op", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.model.seq.Seq2SeqModel._build_graph": [[50, 58], ["print", "seq.Seq2SeqModel._build_placeholders", "seq.Seq2SeqModel._build_seq2seq", "seq.Seq2SeqModel._build_optimize_ops", "seq.Seq2SeqModel._build_outputs_op"], "methods", ["home.repos.pwc.inspect_result.lancopku_AMM.model.seq.Seq2SeqModel._build_placeholders", "home.repos.pwc.inspect_result.lancopku_AMM.model.seq_attn.Seq2SeqAttentionModel._build_seq2seq", "home.repos.pwc.inspect_result.lancopku_AMM.model.seq.Seq2SeqModel._build_optimize_ops", "home.repos.pwc.inspect_result.lancopku_AMM.model.seq.Seq2SeqModel._build_outputs_op"], ["", "def", "_build_graph", "(", "self", ",", "mode", ":", "str", ")", ":", "\n", "        ", "print", "(", "'Building graph ...'", ")", "\n", "self", ".", "_build_placeholders", "(", ")", "\n", "self", ".", "_build_seq2seq", "(", "mode", ")", "\n", "if", "mode", "==", "'train'", ":", "\n", "            ", "self", ".", "_build_optimize_ops", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_build_outputs_op", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.model.seq.Seq2SeqModel._build_placeholders": [[59, 71], ["tensorflow.name_scope", "tensorflow.name_scope", "tensorflow.name_scope", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "range", "range", "range", "range"], "methods", ["None"], ["", "", "def", "_build_placeholders", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'placeholder'", ")", ":", "\n", "            ", "with", "tf", ".", "name_scope", "(", "'q'", ")", ":", "\n", "                ", "self", ".", "q_enc", "=", "[", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "]", ",", "name", "=", "'encoders'", ")", "for", "_", "in", "\n", "range", "(", "self", ".", "enc_length", ")", "]", "\n", "", "with", "tf", ".", "name_scope", "(", "'a'", ")", ":", "\n", "                ", "self", ".", "a_dec", "=", "[", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "]", ",", "name", "=", "'decoders'", ")", "for", "_", "in", "\n", "range", "(", "self", ".", "dec_length", ")", "]", "\n", "self", ".", "a_target", "=", "[", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "]", ",", "name", "=", "'target'", ")", "for", "_", "in", "\n", "range", "(", "self", ".", "dec_length", ")", "]", "\n", "self", ".", "a_weights", "=", "[", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "]", ",", "name", "=", "'weights'", ")", "for", "_", "in", "\n", "range", "(", "self", ".", "dec_length", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.model.seq.Seq2SeqModel._build_seq2seq": [[72, 97], ["tensorflow.name_scope", "seq.Seq2SeqModel.hyperparameter", "tensorflow.contrib.rnn.MultiRNNCell", "seq.Seq2SeqModel.hyperparameter", "tensorflow.contrib.legacy_seq2seq.embedding_rnn_seq2seq", "seq.Seq2SeqModel.hyperparameter", "seq.Seq2SeqModel._vocab_size", "seq.Seq2SeqModel._vocab_size", "seq.Seq2SeqModel.hyperparameter", "seq.Projection", "seq.Seq2SeqModel.output_projection.variables", "seq.Seq2SeqModel._vocab_size", "seq.Seq2SeqModel._vocab_size", "seq.Seq2SeqModel._create_rnn_cell", "range"], "methods", ["home.repos.pwc.inspect_result.lancopku_AMM.model.base.BasicChatbotModel._vocab_size", "home.repos.pwc.inspect_result.lancopku_AMM.model.base.BasicChatbotModel._vocab_size", "home.repos.pwc.inspect_result.lancopku_AMM.model.seq.Projection.variables", "home.repos.pwc.inspect_result.lancopku_AMM.model.base.BasicChatbotModel._vocab_size", "home.repos.pwc.inspect_result.lancopku_AMM.model.base.BasicChatbotModel._vocab_size", "home.repos.pwc.inspect_result.lancopku_AMM.model.seq.Seq2SeqModel._create_rnn_cell"], ["", "", "", "def", "_build_seq2seq", "(", "self", ",", "mode", ":", "str", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'seq2seq'", ")", ":", "\n", "            ", "if", "0", "<", "self", ".", "hyperparameter", "(", "'n_sampled'", ")", "<", "self", ".", "_vocab_size", "(", ")", ":", "\n", "                ", "vocab_size", "=", "self", ".", "_vocab_size", "(", ")", "\n", "hidden_size", "=", "self", ".", "hyperparameter", "(", "'hidden_size'", ")", "\n", "self", ".", "output_projection", "=", "Projection", "(", "\n", "[", "hidden_size", ",", "vocab_size", "]", ",", "scope", "=", "'output_projection'", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "", "n_layers", "=", "self", ".", "hyperparameter", "(", "'n_layers'", ")", "\n", "cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "MultiRNNCell", "(", "\n", "[", "self", ".", "_create_rnn_cell", "(", "mode", ")", "for", "_", "in", "range", "(", "n_layers", ")", "]", ")", "\n", "\n", "embedding_size", "=", "self", ".", "hyperparameter", "(", "'embedding_size'", ")", "\n", "output_projection", "=", "self", ".", "output_projection", ".", "variables", "(", ")", "if", "self", ".", "output_projection", "else", "None", "\n", "\n", "self", ".", "seq_dec_outputs", ",", "_", "=", "tf", ".", "contrib", ".", "legacy_seq2seq", ".", "embedding_rnn_seq2seq", "(", "\n", "self", ".", "q_enc", ",", "\n", "self", ".", "a_dec", ",", "\n", "cell", ",", "\n", "self", ".", "_vocab_size", "(", ")", ",", "\n", "self", ".", "_vocab_size", "(", ")", ",", "\n", "embedding_size", "=", "embedding_size", ",", "\n", "output_projection", "=", "output_projection", ",", "\n", "feed_previous", "=", "mode", "==", "'test'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.model.seq.Seq2SeqModel._create_rnn_cell": [[98, 110], ["seq.Seq2SeqModel.hyperparameter", "tensorflow.contrib.rnn.BasicLSTMCell", "seq.Seq2SeqModel.hyperparameter", "tensorflow.contrib.rnn.DropoutWrapper"], "methods", ["None"], ["", "", "def", "_create_rnn_cell", "(", "self", ",", "mode", ":", "str", ")", ":", "\n", "        ", "hidden_size", "=", "self", ".", "hyperparameter", "(", "'hidden_size'", ")", "\n", "cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "BasicLSTMCell", "(", "hidden_size", ")", "\n", "\n", "if", "mode", "==", "'train'", ":", "\n", "            ", "dropout_keep_prob", "=", "self", ".", "hyperparameter", "(", "'dropout'", ")", "\n", "cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "DropoutWrapper", "(", "\n", "cell", ",", "\n", "input_keep_prob", "=", "1.0", ",", "\n", "output_keep_prob", "=", "dropout_keep_prob", ")", "\n", "\n", "", "return", "cell", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.model.seq.Seq2SeqModel._build_optimize_ops": [[111, 123], ["tensorflow.train.AdamOptimizer", "tensorflow.contrib.legacy_seq2seq.sequence_loss", "seq.Seq2SeqModel.optimizer.minimize", "seq.Seq2SeqModel._vocab_size", "seq.Seq2SeqModel.training_parameter"], "methods", ["home.repos.pwc.inspect_result.lancopku_AMM.model.base.BasicChatbotModel._vocab_size"], ["", "def", "_build_optimize_ops", "(", "self", ")", ":", "\n", "        ", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "\n", "learning_rate", "=", "self", ".", "training_parameter", "(", "'learning_rate'", ")", ")", "\n", "\n", "self", ".", "seq_loss_op", "=", "tf", ".", "contrib", ".", "legacy_seq2seq", ".", "sequence_loss", "(", "\n", "self", ".", "seq_dec_outputs", ",", "\n", "self", ".", "a_target", ",", "\n", "self", ".", "a_weights", ",", "\n", "self", ".", "_vocab_size", "(", ")", ",", "\n", "softmax_loss_function", "=", "self", ".", "_sampled_softmax_fn", "if", "self", ".", "output_projection", "else", "None", "\n", ")", "\n", "self", ".", "seq_train_op", "=", "self", ".", "optimizer", ".", "minimize", "(", "self", ".", "seq_loss_op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.model.seq.Seq2SeqModel._build_outputs_op": [[124, 131], ["tensorflow.argmax", "seq.Seq2SeqModel.output_projection"], "methods", ["None"], ["", "def", "_build_outputs_op", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "output_projection", ":", "\n", "            ", "self", ".", "outputs", "=", "self", ".", "seq_dec_outputs", "\n", "", "else", ":", "\n", "            ", "self", ".", "outputs", "=", "[", "self", ".", "output_projection", "(", "o", ")", "for", "o", "in", "self", ".", "seq_dec_outputs", "]", "\n", "\n", "", "self", ".", "outputs", "=", "[", "tf", ".", "argmax", "(", "o", ",", "axis", "=", "1", ")", "for", "o", "in", "self", ".", "outputs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.model.seq.Seq2SeqModel._sampled_softmax_fn": [[132, 144], ["tensorflow.reshape", "tensorflow.transpose", "tensorflow.cast", "tensorflow.nn.sampled_softmax_loss", "seq.Seq2SeqModel.hyperparameter", "seq.Seq2SeqModel._vocab_size"], "methods", ["home.repos.pwc.inspect_result.lancopku_AMM.model.base.BasicChatbotModel._vocab_size"], ["", "def", "_sampled_softmax_fn", "(", "self", ",", "labels", ",", "logits", ")", ":", "\n", "        ", "labels", "=", "tf", ".", "reshape", "(", "labels", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "W_t", "=", "tf", ".", "transpose", "(", "self", ".", "output_projection", ".", "W", ")", "\n", "logits", "=", "tf", ".", "cast", "(", "logits", ",", "tf", ".", "float32", ")", "\n", "\n", "return", "tf", ".", "nn", ".", "sampled_softmax_loss", "(", "\n", "W_t", ",", "\n", "self", ".", "output_projection", ".", "b", ",", "\n", "labels", ",", "\n", "logits", ",", "\n", "self", ".", "hyperparameter", "(", "'n_sampled'", ")", ",", "\n", "self", ".", "_vocab_size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.model.seq.Seq2SeqModel._train_step": [[145, 161], ["range", "range", "seq.Seq2SeqModel.sess.run", "math.exp", "tqdm.tqdm.tqdm.write", "seq.Seq2SeqModel.training_parameter", "float", "float"], "methods", ["None"], ["", "def", "_train_step", "(", "self", ",", "batch", ":", "Batch", ")", ":", "\n", "        ", "feed_dict", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "self", ".", "enc_length", ")", ":", "\n", "            ", "feed_dict", "[", "self", ".", "q_enc", "[", "i", "]", "]", "=", "batch", ".", "q_enc_seq", "[", "i", "]", "\n", "", "for", "i", "in", "range", "(", "self", ".", "dec_length", ")", ":", "\n", "            ", "feed_dict", "[", "self", ".", "a_dec", "[", "i", "]", "]", "=", "batch", ".", "a_dec_seq", "[", "i", "]", "\n", "feed_dict", "[", "self", ".", "a_target", "[", "i", "]", "]", "=", "batch", ".", "a_target_seq", "[", "i", "]", "\n", "feed_dict", "[", "self", ".", "a_weights", "[", "i", "]", "]", "=", "batch", ".", "a_weights", "[", "i", "]", "\n", "\n", "", "_", ",", "loss", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "seq_train_op", ",", "self", ".", "seq_loss_op", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "\n", "# Print training status", "\n", "if", "self", ".", "global_step", "%", "self", ".", "training_parameter", "(", "'print_interval'", ")", "==", "0", ":", "\n", "            ", "perplexity", "=", "math", ".", "exp", "(", "float", "(", "loss", ")", "if", "loss", "<", "300", "else", "float", "(", "'inf'", ")", ")", "\n", "tqdm", ".", "write", "(", "'----- Step %d -- Loss %.2f -- Perplexity %.2f'", "%", "(", "\n", "self", ".", "global_step", ",", "loss", ",", "perplexity", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.model.seq.Seq2SeqModel.evaluate": [[162, 192], ["seq.Seq2SeqModel._restore_model_settings", "seq.Seq2SeqModel._build_graph", "seq.Seq2SeqModel._create_session", "seq.Seq2SeqModel._restore_checkpoint", "print", "seq.Seq2SeqModel._get_batches", "tqdm.tqdm.tqdm", "seq.Seq2SeqModel._write_evaluation_results", "range", "seq.Seq2SeqModel.sess.run", "numpy.transpose().tolist", "numpy.transpose().tolist", "numpy.transpose().tolist", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.lancopku_AMM.model.base.BasicChatbotModel._restore_model_settings", "home.repos.pwc.inspect_result.lancopku_AMM.model.seq.Seq2SeqModel._build_graph", "home.repos.pwc.inspect_result.lancopku_AMM.model.base.BasicChatbotModel._create_session", "home.repos.pwc.inspect_result.lancopku_AMM.model.base.BasicChatbotModel._restore_checkpoint", "home.repos.pwc.inspect_result.lancopku_AMM.model.base.BasicChatbotModel._get_batches", "home.repos.pwc.inspect_result.lancopku_AMM.model.seq.Seq2SeqModel._write_evaluation_results"], ["", "", "def", "evaluate", "(", "self", ")", ":", "\n", "        ", "self", ".", "_restore_model_settings", "(", ")", "\n", "self", ".", "_build_graph", "(", "'test'", ")", "\n", "self", ".", "_create_session", "(", ")", "\n", "self", ".", "_restore_checkpoint", "(", ")", "\n", "\n", "print", "(", "'Start testing ...'", ")", "\n", "batches", "=", "self", ".", "_get_batches", "(", "'test'", ")", "\n", "test_samples", "=", "[", "qa", "for", "qa", ",", "_", "in", "self", ".", "dataset", "[", "'test_samples'", "]", "]", "\n", "test_samples_text", "=", "[", "text", "for", "_", ",", "text", "in", "self", ".", "dataset", "[", "'test_samples'", "]", "]", "\n", "# batches = [self._create_batch(test_samples)]", "\n", "all_inputs", "=", "[", "]", "\n", "all_outputs", "=", "[", "]", "\n", "all_references", "=", "[", "]", "\n", "\n", "for", "batch", "in", "tqdm", "(", "batches", ",", "desc", "=", "'Testing'", ")", ":", "\n", "            ", "feed_dict", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "self", ".", "enc_length", ")", ":", "\n", "                ", "feed_dict", "[", "self", ".", "q_enc", "[", "i", "]", "]", "=", "batch", ".", "q_enc_seq", "[", "i", "]", "\n", "", "feed_dict", "[", "self", ".", "a_dec", "[", "0", "]", "]", "=", "batch", ".", "a_dec_seq", "[", "0", "]", "\n", "\n", "[", "outputs", "]", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "outputs", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "all_outputs", "+=", "np", ".", "transpose", "(", "np", ".", "array", "(", "outputs", ")", ")", ".", "tolist", "(", ")", "\n", "all_inputs", "+=", "np", ".", "transpose", "(", "np", ".", "array", "(", "batch", ".", "q_enc_seq", ")", ")", ".", "tolist", "(", ")", "\n", "all_references", "+=", "np", ".", "transpose", "(", "np", ".", "array", "(", "batch", ".", "a_target_seq", ")", ")", ".", "tolist", "(", ")", "\n", "\n", "# self._write_test_samples_literal(test_samples_text, all_outputs)", "\n", "# self._write_test_samples_results(all_outputs)", "\n", "# self._wirte_test_literal(all_inputs, all_outputs)", "\n", "", "self", ".", "_write_evaluation_results", "(", "all_outputs", ",", "all_references", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.model.seq.Seq2SeqModel._write_test_samples_results": [[193, 210], ["results.update", "os.path.join", "os.path.join", "seq.Seq2SeqModel._ids2tokens", "set", "set", "set", "dict", "open", "json.dump", "range", "len", "grams[].add", "len", "tuple", "len", "grams.items"], "methods", ["home.repos.pwc.inspect_result.lancopku_AMM.model.seq.Seq2SeqModel._ids2tokens", "home.repos.pwc.inspect_result.lancopku_AMM.process.vocab_processor.VocabularyProcessor.add"], ["", "def", "_write_test_samples_results", "(", "self", ",", "outputs", ":", "List", "[", "List", "[", "int", "]", "]", ")", ":", "\n", "        ", "results", "=", "{", "}", "\n", "outputs", "=", "[", "self", ".", "_ids2tokens", "(", "tokens", ")", "for", "tokens", "in", "outputs", "]", "\n", "\n", "grams", "=", "{", "1", ":", "set", "(", ")", ",", "2", ":", "set", "(", ")", ",", "3", ":", "set", "(", ")", "}", "\n", "for", "g", "in", "grams", ":", "\n", "            ", "for", "tokens", "in", "outputs", ":", "\n", "                ", "for", "i", "in", "range", "(", "len", "(", "tokens", ")", ")", ":", "\n", "                    ", "if", "i", "+", "g", ">=", "len", "(", "tokens", ")", ":", "\n", "                        ", "break", "\n", "", "grams", "[", "g", "]", ".", "add", "(", "tuple", "(", "tokens", "[", "i", ":", "i", "+", "g", "]", ")", ")", "\n", "", "", "", "results", ".", "update", "(", "dict", "(", "(", "'{}-gram'", ".", "format", "(", "n", ")", ",", "len", "(", "v", ")", ")", "for", "n", ",", "v", "in", "grams", ".", "items", "(", ")", ")", ")", "\n", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_config", "[", "'model'", "]", "[", "'save_path'", "]", ",", "self", ".", "name", ")", "\n", "result_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'test_samples_results.json'", ")", "\n", "with", "open", "(", "result_path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "results", ",", "f", ",", "indent", "=", "2", ",", "sort_keys", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.model.seq.Seq2SeqModel._write_evaluation_results": [[211, 243], ["tqdm.tqdm.tqdm", "enumerate", "results.update", "os.path.join", "os.path.join", "seq.Seq2SeqModel._ids2tokens", "seq.Seq2SeqModel._ids2tokens", "nltk.translate.bleu_score.SmoothingFunction", "numpy.average", "set", "set", "set", "dict", "open", "json.dump", "range", "zip", "nltk.translate.bleu_score.sentence_bleu", "len", "grams[].add", "len", "tuple", "len", "grams.items"], "methods", ["home.repos.pwc.inspect_result.lancopku_AMM.model.seq.Seq2SeqModel._ids2tokens", "home.repos.pwc.inspect_result.lancopku_AMM.model.seq.Seq2SeqModel._ids2tokens", "home.repos.pwc.inspect_result.lancopku_AMM.process.vocab_processor.VocabularyProcessor.add"], ["", "", "def", "_write_evaluation_results", "(", "self", ",", "outputs", ":", "List", "[", "List", "[", "int", "]", "]", ",", "references", ":", "List", "[", "List", "[", "int", "]", "]", "=", "None", ")", ":", "\n", "        ", "results", "=", "{", "}", "\n", "outputs", "=", "[", "self", ".", "_ids2tokens", "(", "tokens", ")", "for", "tokens", "in", "outputs", "]", "\n", "references", "=", "[", "self", ".", "_ids2tokens", "(", "tokens", ")", "for", "tokens", "in", "references", "]", "\n", "\n", "weights", "=", "[", "\n", "(", "1", ",", "0", ",", "0", ",", "0", ")", ",", "\n", "(", "0.5", ",", "0.5", ",", "0", ",", "0", ")", ",", "\n", "(", "0.33", ",", "0.33", ",", "0.33", ",", "0", ")", ",", "\n", "(", "0.25", ",", "0.25", ",", "0.25", ",", "0.25", ")", "\n", "]", "\n", "\n", "smoothing_fn", "=", "SmoothingFunction", "(", ")", ".", "method1", "\n", "pairs", "=", "tqdm", "(", "[", "i", "for", "i", "in", "zip", "(", "outputs", ",", "references", ")", "]", ",", "desc", "=", "'Computing BLEU score'", ")", "\n", "scores", "=", "[", "np", ".", "average", "(", "\n", "[", "sentence_bleu", "(", "[", "ref", "]", ",", "pred", ",", "weights", "=", "w", ",", "smoothing_function", "=", "smoothing_fn", ")", "for", "pred", ",", "ref", "in", "pairs", "]", ")", "for", "w", "in", "weights", "]", "\n", "for", "i", ",", "score", "in", "enumerate", "(", "scores", ")", ":", "\n", "            ", "results", "[", "'BLEU-{}'", ".", "format", "(", "i", "+", "1", ")", "]", "=", "score", "\n", "\n", "", "grams", "=", "{", "1", ":", "set", "(", ")", ",", "2", ":", "set", "(", ")", ",", "3", ":", "set", "(", ")", "}", "\n", "for", "g", "in", "grams", ":", "\n", "            ", "for", "tokens", "in", "outputs", ":", "\n", "                ", "for", "i", "in", "range", "(", "len", "(", "tokens", ")", ")", ":", "\n", "                    ", "if", "i", "+", "g", ">=", "len", "(", "tokens", ")", ":", "\n", "                        ", "break", "\n", "", "grams", "[", "g", "]", ".", "add", "(", "tuple", "(", "tokens", "[", "i", ":", "i", "+", "g", "]", ")", ")", "\n", "", "", "", "results", ".", "update", "(", "dict", "(", "(", "'{}-gram'", ".", "format", "(", "n", ")", ",", "len", "(", "v", ")", ")", "for", "n", ",", "v", "in", "grams", ".", "items", "(", ")", ")", ")", "\n", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_config", "[", "'model'", "]", "[", "'save_path'", "]", ",", "self", ".", "name", ")", "\n", "result_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'evaluation_results.json'", ")", "\n", "with", "open", "(", "result_path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "results", ",", "f", ",", "indent", "=", "2", ",", "sort_keys", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.model.seq.Seq2SeqModel._wirte_test_literal": [[244, 255], ["os.path.join", "os.path.join", "seq.Seq2SeqModel._ids2tokens", "seq.Seq2SeqModel._ids2tokens", "seq.Seq2SeqModel._tokens2literal", "seq.Seq2SeqModel._tokens2literal", "open", "zip", "f.write"], "methods", ["home.repos.pwc.inspect_result.lancopku_AMM.model.seq.Seq2SeqModel._ids2tokens", "home.repos.pwc.inspect_result.lancopku_AMM.model.seq.Seq2SeqModel._ids2tokens", "home.repos.pwc.inspect_result.lancopku_AMM.model.seq.Seq2SeqModel._tokens2literal", "home.repos.pwc.inspect_result.lancopku_AMM.model.seq.Seq2SeqModel._tokens2literal"], ["", "", "def", "_wirte_test_literal", "(", "self", ",", "inputs", ":", "List", "[", "List", "[", "int", "]", "]", ",", "outputs", ":", "List", "[", "List", "[", "int", "]", "]", ")", ":", "\n", "        ", "inputs", "=", "[", "self", ".", "_ids2tokens", "(", "tokens", ",", "reverse", "=", "True", ")", "for", "tokens", "in", "inputs", "]", "\n", "outputs", "=", "[", "self", ".", "_ids2tokens", "(", "tokens", ")", "for", "tokens", "in", "outputs", "]", "\n", "inputs", "=", "[", "self", ".", "_tokens2literal", "(", "sent", ")", "for", "sent", "in", "inputs", "]", "\n", "outputs", "=", "[", "self", ".", "_tokens2literal", "(", "sent", ")", "for", "sent", "in", "outputs", "]", "\n", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_config", "[", "'model'", "]", "[", "'save_path'", "]", ",", "self", ".", "name", ")", "\n", "test_literal_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'test_samples.txt'", ")", "\n", "with", "open", "(", "test_literal_path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "for", "q", ",", "a", "in", "zip", "(", "inputs", ",", "outputs", ")", ":", "\n", "                ", "f", ".", "write", "(", "q", "+", "' +++$+++ '", "+", "a", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.model.seq.Seq2SeqModel._write_test_samples_literal": [[256, 265], ["os.path.join", "os.path.join", "seq.Seq2SeqModel._ids2tokens", "seq.Seq2SeqModel._tokens2literal", "open", "zip", "f.write"], "methods", ["home.repos.pwc.inspect_result.lancopku_AMM.model.seq.Seq2SeqModel._ids2tokens", "home.repos.pwc.inspect_result.lancopku_AMM.model.seq.Seq2SeqModel._tokens2literal"], ["", "", "", "def", "_write_test_samples_literal", "(", "self", ",", "text", ":", "List", "[", "str", "]", ",", "outputs", ":", "List", "[", "List", "[", "int", "]", "]", ")", ":", "\n", "        ", "outputs", "=", "[", "self", ".", "_ids2tokens", "(", "tokens", ")", "for", "tokens", "in", "outputs", "]", "\n", "outputs", "=", "[", "self", ".", "_tokens2literal", "(", "sent", ")", "for", "sent", "in", "outputs", "]", "\n", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_config", "[", "'model'", "]", "[", "'save_path'", "]", ",", "self", ".", "name", ")", "\n", "test_literal_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'example_questions.txt'", ")", "\n", "with", "open", "(", "test_literal_path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "for", "q", ",", "a", "in", "zip", "(", "text", ",", "outputs", ")", ":", "\n", "                ", "f", ".", "write", "(", "q", "+", "' +++$+++ '", "+", "a", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.model.seq.Seq2SeqModel._ids2tokens": [[266, 283], ["reversed", "vocab_processor.id2word", "sent.append"], "methods", ["home.repos.pwc.inspect_result.lancopku_AMM.process.vocab_processor.VocabularyProcessor.id2word"], ["", "", "", "def", "_ids2tokens", "(", "self", ",", "seq", ":", "List", "[", "int", "]", ",", "reverse", "=", "False", ")", ":", "\n", "        ", "if", "not", "seq", ":", "\n", "            ", "return", "''", "\n", "\n", "", "if", "reverse", ":", "\n", "            ", "seq", "=", "reversed", "(", "seq", ")", "\n", "\n", "", "vocab_processor", ":", "VocabularyProcessor", "=", "self", ".", "dataset", "[", "'vocab_processor'", "]", "\n", "sent", "=", "[", "]", "\n", "for", "word_id", "in", "seq", ":", "\n", "            ", "word", "=", "vocab_processor", ".", "id2word", "(", "word_id", ")", "\n", "if", "word", "==", "EOS_TOKEN", ":", "\n", "                ", "break", "\n", "", "elif", "word", "not", "in", "[", "GO_TOKEN", ",", "PAD_TOKEN", "]", ":", "\n", "                ", "sent", ".", "append", "(", "word", ")", "\n", "\n", "", "", "return", "sent", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.model.seq.Seq2SeqModel._tokens2literal": [[284, 289], ["text.strip().capitalize", "text.strip", "t.startswith"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_tokens2literal", "(", "sent", ":", "List", "[", "str", "]", ")", ":", "\n", "        ", "text", "=", "''", ".", "join", "(", "\n", "[", "' '", "+", "t", "if", "not", "t", ".", "startswith", "(", "\"'\"", ")", "and", "t", "not", "in", "string", ".", "punctuation", "else", "t", "for", "t", "in", "sent", "]", ")", "\n", "return", "text", ".", "strip", "(", ")", ".", "capitalize", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lancopku_AMM.model.batch.Batch.__init__": [[2, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "q_enc_seq", "=", "[", "]", "\n", "self", ".", "q_dec_seq", "=", "[", "]", "\n", "self", ".", "q_target_seq", "=", "[", "]", "\n", "self", ".", "q_weights", "=", "[", "]", "\n", "self", ".", "a_enc_seq", "=", "[", "]", "\n", "self", ".", "a_dec_seq", "=", "[", "]", "\n", "self", ".", "a_target_seq", "=", "[", "]", "\n", "self", ".", "a_weights", "=", "[", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lancopku_AMM.model.tf_rnn_helper.embedding_rnn_encoder": [[14, 36], ["tensorflow.python.ops.variable_scope.variable_scope", "copy.deepcopy", "tensorflow.contrib.rnn.python.ops.core_rnn_cell.EmbeddingWrapper", "tensorflow.python.ops.rnn.static_rnn", "tensorflow.python.ops.array_ops.concat", "tensorflow.python.ops.array_ops.reshape"], "function", ["None"], ["def", "embedding_rnn_encoder", "(", "encoder_inputs", ",", "\n", "cell", ",", "\n", "num_symbols", ",", "\n", "embedding_size", ",", "\n", "scope", "=", "None", ",", "\n", "dtype", "=", "None", ")", ":", "\n", "    ", "with", "variable_scope", ".", "variable_scope", "(", "scope", "or", "\"embedding_rnn_encoder\"", ",", "dtype", "=", "dtype", ")", "as", "scope", ":", "\n", "        ", "dtype", "=", "scope", ".", "dtype", "\n", "\n", "# Note that we use a deep copy of the original cell", "\n", "encoder_cell", "=", "copy", ".", "deepcopy", "(", "cell", ")", "\n", "encoder_cell", "=", "core_rnn_cell", ".", "EmbeddingWrapper", "(", "\n", "encoder_cell", ",", "\n", "embedding_classes", "=", "num_symbols", ",", "\n", "embedding_size", "=", "embedding_size", ")", "\n", "encoder_outputs", ",", "encoder_state", "=", "rnn", ".", "static_rnn", "(", "\n", "encoder_cell", ",", "encoder_inputs", ",", "dtype", "=", "dtype", ")", "\n", "\n", "top_states", "=", "[", "array_ops", ".", "reshape", "(", "e", ",", "[", "-", "1", ",", "1", ",", "cell", ".", "output_size", "]", ")", "for", "e", "in", "encoder_outputs", "]", "\n", "attention_states", "=", "array_ops", ".", "concat", "(", "top_states", ",", "1", ")", "\n", "\n", "return", "encoder_state", ",", "attention_states", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.model.tf_rnn_helper.embedding_rnn_decoder": [[38, 59], ["tensorflow.python.ops.variable_scope.variable_scope", "tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.embedding_rnn_decoder", "tensorflow.contrib.rnn.python.ops.core_rnn_cell.OutputProjectionWrapper"], "function", ["home.repos.pwc.inspect_result.lancopku_AMM.model.tf_rnn_helper.embedding_rnn_decoder"], ["", "", "def", "embedding_rnn_decoder", "(", "decoder_inputs", ",", "\n", "initial_state", ",", "\n", "cell", ",", "\n", "num_symbols", ",", "\n", "embedding_size", ",", "\n", "output_projection", "=", "None", ",", "\n", "feed_previous", "=", "False", ",", "\n", "scope", "=", "None", ")", ":", "\n", "    ", "with", "variable_scope", ".", "variable_scope", "(", "scope", "or", "\"embedding_rnn_decoder\"", ")", ":", "\n", "# Node that we use the original cell", "\n", "        ", "if", "output_projection", "is", "None", ":", "\n", "            ", "cell", "=", "core_rnn_cell", ".", "OutputProjectionWrapper", "(", "cell", ",", "num_symbols", ")", "\n", "\n", "", "return", "tf_embedding_rnn_decoder", "(", "\n", "decoder_inputs", ",", "\n", "initial_state", ",", "\n", "cell", ",", "\n", "num_symbols", ",", "\n", "embedding_size", ",", "\n", "output_projection", "=", "output_projection", ",", "\n", "feed_previous", "=", "feed_previous", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.model.tf_rnn_helper.embedding_attention_decoder": [[61, 90], ["tensorflow.python.ops.variable_scope.variable_scope", "tensorflow.contrib.legacy_seq2seq.python.ops.seq2seq.embedding_attention_decoder", "tensorflow.contrib.rnn.python.ops.core_rnn_cell.OutputProjectionWrapper"], "function", ["home.repos.pwc.inspect_result.lancopku_AMM.model.tf_rnn_helper.embedding_attention_decoder"], ["", "", "def", "embedding_attention_decoder", "(", "decoder_inputs", ",", "\n", "initial_state", ",", "\n", "attention_states", ",", "\n", "cell", ",", "\n", "num_symbols", ",", "\n", "embedding_size", ",", "\n", "num_heads", "=", "1", ",", "\n", "output_size", "=", "None", ",", "\n", "output_projection", "=", "None", ",", "\n", "feed_previous", "=", "False", ",", "\n", "scope", "=", "None", ",", "\n", "initial_state_attention", "=", "False", ")", ":", "\n", "    ", "with", "variable_scope", ".", "variable_scope", "(", "scope", "or", "\"embedding_attention_decoder\"", ")", ":", "\n", "        ", "if", "output_projection", "is", "None", ":", "\n", "            ", "cell", "=", "core_rnn_cell", ".", "OutputProjectionWrapper", "(", "cell", ",", "num_symbols", ")", "\n", "output_size", "=", "num_symbols", "\n", "\n", "", "return", "tf_embedding_attention_decoder", "(", "\n", "decoder_inputs", ",", "\n", "initial_state", ",", "\n", "attention_states", ",", "\n", "cell", ",", "\n", "num_symbols", ",", "\n", "embedding_size", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "output_size", "=", "output_size", ",", "\n", "output_projection", "=", "output_projection", ",", "\n", "feed_previous", "=", "feed_previous", ",", "\n", "initial_state_attention", "=", "initial_state_attention", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.model.tf_rnn_helper.create_projection_params": [[92, 103], ["tensorflow.python.ops.variable_scope.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "scope.set_dtype"], "function", ["None"], ["", "", "def", "create_projection_params", "(", "size", ",", "dtype", "=", "None", ",", "scope", "=", "None", ")", ":", "\n", "    ", "with", "variable_scope", ".", "variable_scope", "(", "scope", "or", "\"projection_params\"", ")", "as", "scope", ":", "\n", "        ", "if", "dtype", "is", "not", "None", ":", "\n", "            ", "scope", ".", "set_dtype", "(", "dtype", ")", "\n", "", "else", ":", "\n", "            ", "dtype", "=", "scope", ".", "dtype", "\n", "\n", "", "p_w", "=", "tf", ".", "get_variable", "(", "'weights'", ",", "(", "size", ",", "size", ")", ",", "dtype", "=", "dtype", ")", "\n", "p_b", "=", "tf", ".", "get_variable", "(", "'bias'", ",", "(", "size", ",", ")", ",", "dtype", "=", "dtype", ")", "\n", "\n", "return", "p_w", ",", "p_b", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.model.tf_rnn_helper.states_projection": [[105, 139], ["tensorflow.python.ops.variable_scope.variable_scope", "scope.set_dtype", "type", "tuple", "tf_rnn_helper.states_projection.state_projection"], "function", ["None"], ["", "", "def", "states_projection", "(", "states", ",", "\n", "hidden_size", ",", "\n", "activate_fn", "=", "None", ",", "\n", "dtype", "=", "None", ",", "\n", "scope", "=", "None", ")", ":", "\n", "    ", "with", "variable_scope", ".", "variable_scope", "(", "scope", "or", "\"states_projection\"", ")", "as", "scope", ":", "\n", "        ", "if", "dtype", "is", "not", "None", ":", "\n", "            ", "scope", ".", "set_dtype", "(", "dtype", ")", "\n", "", "else", ":", "\n", "            ", "dtype", "=", "scope", ".", "dtype", "\n", "\n", "", "def", "state_projection", "(", "state", ",", "_scope", "=", "None", ")", ":", "\n", "            ", "with", "variable_scope", ".", "variable_scope", "(", "_scope", ")", ":", "\n", "                ", "if", "isinstance", "(", "state", ",", "LSTMStateTuple", ")", ":", "\n", "                    ", "c_w", ",", "c_b", "=", "create_projection_params", "(", "hidden_size", ",", "dtype", "=", "dtype", ",", "scope", "=", "'c'", ")", "\n", "c", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "state", ".", "c", ",", "c_w", ",", "c_b", ",", "name", "=", "'c'", ")", "\n", "h_w", ",", "h_b", "=", "create_projection_params", "(", "hidden_size", ",", "dtype", "=", "dtype", ",", "scope", "=", "'h'", ")", "\n", "h", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "state", ".", "h", ",", "h_w", ",", "h_b", ",", "name", "=", "'h'", ")", "\n", "if", "activate_fn", ":", "\n", "                        ", "c", "=", "activate_fn", "(", "c", ")", "\n", "h", "=", "activate_fn", "(", "h", ")", "\n", "", "return", "LSTMStateTuple", "(", "c", ",", "h", ")", "\n", "", "else", ":", "\n", "                    ", "p_w", ",", "p_b", "=", "create_projection_params", "(", "hidden_size", ",", "dtype", "=", "dtype", ")", "\n", "p", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "state", ",", "p_w", ",", "p_b", ")", "\n", "if", "activate_fn", ":", "\n", "                        ", "p", "=", "activate_fn", "(", "p", ")", "\n", "", "return", "p", "\n", "\n", "", "", "", "if", "type", "(", "states", ")", "==", "tuple", ":", "\n", "            ", "return", "tuple", "(", "\n", "state_projection", "(", "state", ",", "'layer_{}'", ".", "format", "(", "i", ")", ")", "for", "i", ",", "state", "in", "enumerate", "(", "states", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "state_projection", "(", "states", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.lancopku_AMM.model.seq_attn.Seq2SeqAttentionModel.__init__": [[6, 8], ["model.seq.Seq2SeqModel.__init__"], "methods", ["home.repos.pwc.inspect_result.lancopku_AMM.model.seq_attn.Seq2SeqAttentionModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", ":", "str", "=", "'seq-attn'", ")", ":", "\n", "        ", "super", "(", "Seq2SeqAttentionModel", ",", "self", ")", ".", "__init__", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lancopku_AMM.model.seq_attn.Seq2SeqAttentionModel._build_seq2seq": [[9, 30], ["super()._build_seq2seq", "tensorflow.name_scope", "seq_attn.Seq2SeqAttentionModel.hyperparameter", "tensorflow.contrib.rnn.MultiRNNCell", "seq_attn.Seq2SeqAttentionModel.hyperparameter", "tensorflow.contrib.legacy_seq2seq.embedding_attention_seq2seq", "seq_attn.Seq2SeqAttentionModel.output_projection.variables", "seq_attn.Seq2SeqAttentionModel._vocab_size", "seq_attn.Seq2SeqAttentionModel._vocab_size", "seq_attn.Seq2SeqAttentionModel._create_rnn_cell", "range"], "methods", ["home.repos.pwc.inspect_result.lancopku_AMM.model.seq_attn.Seq2SeqAttentionModel._build_seq2seq", "home.repos.pwc.inspect_result.lancopku_AMM.model.seq.Projection.variables", "home.repos.pwc.inspect_result.lancopku_AMM.model.base.BasicChatbotModel._vocab_size", "home.repos.pwc.inspect_result.lancopku_AMM.model.base.BasicChatbotModel._vocab_size", "home.repos.pwc.inspect_result.lancopku_AMM.model.seq.Seq2SeqModel._create_rnn_cell"], ["", "def", "_build_seq2seq", "(", "self", ",", "mode", ":", "str", ")", ":", "\n", "        ", "super", "(", "Seq2SeqAttentionModel", ",", "self", ")", ".", "_build_seq2seq", "(", "mode", ")", "\n", "\n", "with", "tf", ".", "name_scope", "(", "'seq2seq'", ")", ":", "\n", "            ", "n_layers", "=", "self", ".", "hyperparameter", "(", "'n_layers'", ")", "\n", "cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "MultiRNNCell", "(", "\n", "[", "self", ".", "_create_rnn_cell", "(", "mode", ")", "for", "_", "in", "range", "(", "n_layers", ")", "]", ")", "\n", "\n", "embedding_size", "=", "self", ".", "hyperparameter", "(", "'embedding_size'", ")", "\n", "output_projection", "=", "self", ".", "output_projection", ".", "variables", "(", ")", "if", "self", ".", "output_projection", "else", "None", "\n", "\n", "self", ".", "seq_dec_outputs", ",", "_", "=", "tf", ".", "contrib", ".", "legacy_seq2seq", ".", "embedding_attention_seq2seq", "(", "\n", "self", ".", "q_enc", ",", "\n", "self", ".", "a_dec", ",", "\n", "cell", ",", "\n", "self", ".", "_vocab_size", "(", ")", ",", "\n", "self", ".", "_vocab_size", "(", ")", ",", "\n", "embedding_size", ",", "\n", "output_projection", "=", "output_projection", ",", "\n", "feed_previous", "=", "mode", "==", "'test'", ")", "\n", "", "", "", ""]]}