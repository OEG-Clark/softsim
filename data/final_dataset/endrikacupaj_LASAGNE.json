{"home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.graph.TypeRelationGraph.__init__": [[11, 26], ["list", "json.loads", "json.loads", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "graph.TypeRelationGraph._create_edges", "torch_geometric.data.Data().to", "vocab.stoi.keys", "open().read", "open().read", "torch_geometric.data.Data", "open", "open", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.graph.TypeRelationGraph._create_edges"], ["    ", "def", "__init__", "(", "self", ",", "vocab", ",", "type_path", "=", "f'{ROOT_PATH}'", ")", ":", "\n", "        ", "self", ".", "vocab", "=", "vocab", "\n", "self", ".", "existing_nodes", "=", "list", "(", "vocab", ".", "stoi", ".", "keys", "(", ")", ")", "\n", "self", ".", "type_triples", "=", "json", ".", "loads", "(", "open", "(", "f'{type_path}/knowledge_graph/wikidata_type_dict.json'", ")", ".", "read", "(", ")", ")", "\n", "self", ".", "bert_embeddings", "=", "json", ".", "loads", "(", "open", "(", "f'{type_path}/knowledge_graph/node_embeddings.json'", ")", ".", "read", "(", ")", ")", "\n", "self", ".", "nodes", "=", "torch", ".", "tensor", "(", "[", "self", ".", "bert_embeddings", "[", "node", "]", "for", "node", "in", "self", ".", "existing_nodes", "]", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "start", "=", "[", "]", "\n", "self", ".", "end", "=", "[", "]", "\n", "self", ".", "existing_edges", "=", "[", "]", "\n", "\n", "# create edges", "\n", "self", ".", "_create_edges", "(", ")", "\n", "\n", "# create PyG graph", "\n", "self", ".", "data", "=", "Data", "(", "x", "=", "self", ".", "nodes", ",", "edge_index", "=", "torch", ".", "LongTensor", "(", "[", "self", ".", "start", ",", "self", ".", "end", "]", ")", ")", ".", "to", "(", "DEVICE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.graph.TypeRelationGraph._create_edges": [[27, 37], ["graph.TypeRelationGraph._add_edge", "graph.TypeRelationGraph._add_edge"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.graph.TypeRelationGraph._add_edge", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.graph.TypeRelationGraph._add_edge"], ["", "def", "_create_edges", "(", "self", ")", ":", "\n", "# extract graph data from KG", "\n", "        ", "for", "head", "in", "self", ".", "type_triples", ":", "\n", "            ", "if", "head", "in", "self", ".", "vocab", ".", "stoi", ":", "# only types that are in vocab", "\n", "                ", "for", "relation", "in", "self", ".", "type_triples", "[", "head", "]", ":", "\n", "                    ", "if", "relation", "in", "self", ".", "vocab", ".", "stoi", ":", "# only predicates that are in vocab", "\n", "                        ", "self", ".", "_add_edge", "(", "head", ",", "relation", ")", "# add head -> relation edge", "\n", "for", "tail", "in", "self", ".", "type_triples", "[", "head", "]", "[", "relation", "]", ":", "\n", "                            ", "if", "tail", "in", "self", ".", "vocab", ".", "stoi", ":", "\n", "                                ", "self", ".", "_add_edge", "(", "relation", ",", "tail", ")", "# add relation -> tail edge", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.graph.TypeRelationGraph._add_edge": [[38, 43], ["graph.TypeRelationGraph.start.append", "graph.TypeRelationGraph.end.append", "graph.TypeRelationGraph.existing_edges.append", "graph.TypeRelationGraph.existing_nodes.index", "graph.TypeRelationGraph.existing_nodes.index"], "methods", ["None"], ["", "", "", "", "", "", "", "def", "_add_edge", "(", "self", ",", "start", ",", "end", ")", ":", "\n", "        ", "if", "f'{start}->{end}'", "not", "in", "self", ".", "existing_edges", ":", "\n", "            ", "self", ".", "start", ".", "append", "(", "self", ".", "existing_nodes", ".", "index", "(", "start", ")", ")", "\n", "self", ".", "end", ".", "append", "(", "self", ".", "existing_nodes", ".", "index", "(", "end", ")", ")", "\n", "self", ".", "existing_edges", ".", "append", "(", "f'{start}->{end}'", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.inference.main": [[30, 56], ["dataset.CSQADataset", "dataset.CSQADataset.get_vocabs", "dataset.CSQADataset.get_inference_data", "logger.info", "logger.info", "logger.info", "logger.info", "model.LASAGNE().to", "logger.info", "LASAGNE().to.load_state_dict", "logger.info", "utils.Predictor", "utils.Inference().construct_actions", "torch.load", "torch.load", "model.LASAGNE", "utils.Inference", "len"], "function", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.dataset.CSQADataset.get_vocabs", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.dataset.CSQADataset.get_inference_data", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Inference.construct_actions"], ["", "def", "main", "(", ")", ":", "\n", "# load data", "\n", "    ", "dataset", "=", "CSQADataset", "(", ")", "\n", "vocabs", "=", "dataset", ".", "get_vocabs", "(", ")", "\n", "inference_data", "=", "dataset", ".", "get_inference_data", "(", "args", ".", "inference_partition", ")", "\n", "\n", "logger", ".", "info", "(", "f'Inference partition: {args.inference_partition}'", ")", "\n", "logger", ".", "info", "(", "f'Inference question type: {args.question_type}'", ")", "\n", "logger", ".", "info", "(", "'Inference data prepared'", ")", "\n", "logger", ".", "info", "(", "f\"Num of inference data: {len(inference_data)}\"", ")", "\n", "\n", "# load model", "\n", "model", "=", "LASAGNE", "(", "vocabs", ")", ".", "to", "(", "DEVICE", ")", "\n", "\n", "logger", ".", "info", "(", "f\"=> loading checkpoint '{args.model_path}'\"", ")", "\n", "if", "DEVICE", ".", "type", "==", "'cpu'", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "f'{ROOT_PATH}/{args.model_path}'", ",", "encoding", "=", "'latin1'", ",", "map_location", "=", "'cpu'", ")", "\n", "", "else", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "f'{ROOT_PATH}/{args.model_path}'", ",", "encoding", "=", "'latin1'", ")", "\n", "", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "logger", ".", "info", "(", "f\"=> loaded checkpoint '{args.model_path}' (epoch {checkpoint['epoch']})\"", ")", "\n", "\n", "# construct actions", "\n", "predictor", "=", "Predictor", "(", "model", ",", "vocabs", ",", "DEVICE", ")", "\n", "Inference", "(", ")", ".", "construct_actions", "(", "inference_data", ",", "predictor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.train.main": [[40, 118], ["dataset.CSQADataset", "dataset.CSQADataset.get_vocabs", "dataset.CSQADataset.get_data", "model.LASAGNE().to", "utils.init_weights", "logger.info", "utils.NoamOpt", "torchtext.data.BucketIterator.splits", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "range", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "os.path.isfile", "float", "train.train", "model.LASAGNE", "LASAGNE().to.parameters", "logger.info", "torch.load", "torch.load", "torch.load", "LASAGNE().to.load_state_dict", "utils.NoamOpt.optimizer.load_state_dict", "logger.info", "logger.info", "float", "train.validate", "min", "utils.save_checkpoint", "logger.info", "sum", "len", "len", "len", "len", "len", "len", "len", "len", "LASAGNE().to.state_dict", "utils.NoamOpt.optimizer.state_dict", "p.numel", "LASAGNE().to.parameters"], "function", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.dataset.CSQADataset.get_vocabs", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.dataset.CSQADataset.get_data", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.init_weights", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.scripts.pyg_test.train", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.train.validate", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.save_checkpoint"], ["", "def", "main", "(", ")", ":", "\n", "# load data", "\n", "    ", "dataset", "=", "CSQADataset", "(", ")", "\n", "vocabs", "=", "dataset", ".", "get_vocabs", "(", ")", "\n", "train_data", ",", "val_data", ",", "_", "=", "dataset", ".", "get_data", "(", ")", "\n", "\n", "# load model", "\n", "model", "=", "LASAGNE", "(", "vocabs", ")", ".", "to", "(", "DEVICE", ")", "\n", "\n", "# initialize model weights", "\n", "init_weights", "(", "model", ")", "\n", "\n", "logger", ".", "info", "(", "f'The model has {sum(p.numel() for p in model.parameters() if p.requires_grad):,} trainable parameters'", ")", "\n", "\n", "# define loss function (criterion)", "\n", "criterion", "=", "{", "\n", "LOGICAL_FORM", ":", "SingleTaskLoss", ",", "\n", "NER", ":", "SingleTaskLoss", ",", "\n", "COREF", ":", "SingleTaskLoss", ",", "\n", "GRAPH", ":", "SingleTaskLoss", ",", "\n", "MULTITASK", ":", "MultiTaskLoss", "\n", "}", "[", "args", ".", "task", "]", "(", "ignore_index", "=", "vocabs", "[", "LOGICAL_FORM", "]", ".", "stoi", "[", "PAD_TOKEN", "]", ")", "\n", "\n", "# define optimizer", "\n", "optimizer", "=", "NoamOpt", "(", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "0", ",", "betas", "=", "(", "0.9", ",", "0.98", ")", ",", "eps", "=", "1e-9", ")", ")", "\n", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "logger", ".", "info", "(", "f\"=> loading checkpoint '{args.resume}''\"", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "args", ".", "start_epoch", "=", "checkpoint", "[", "EPOCH", "]", "\n", "best_val", "=", "checkpoint", "[", "BEST_VAL", "]", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "STATE_DICT", "]", ")", "\n", "optimizer", ".", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "OPTIMIZER", "]", ")", "\n", "logger", ".", "info", "(", "f\"=> loaded checkpoint '{args.resume}' (epoch {checkpoint[EPOCH]})\"", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "f\"=> no checkpoint found at '{args.resume}'\"", ")", "\n", "best_val", "=", "float", "(", "'inf'", ")", "\n", "", "", "else", ":", "\n", "        ", "best_val", "=", "float", "(", "'inf'", ")", "\n", "\n", "# prepare training and validation loader", "\n", "", "train_loader", ",", "val_loader", "=", "BucketIterator", ".", "splits", "(", "(", "train_data", ",", "val_data", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "sort_within_batch", "=", "False", ",", "\n", "sort_key", "=", "lambda", "x", ":", "len", "(", "x", ".", "input", ")", ",", "\n", "device", "=", "DEVICE", ")", "\n", "\n", "logger", ".", "info", "(", "'Loaders prepared.'", ")", "\n", "logger", ".", "info", "(", "f\"Training data: {len(train_data.examples)}\"", ")", "\n", "logger", ".", "info", "(", "f\"Validation data: {len(val_data.examples)}\"", ")", "\n", "logger", ".", "info", "(", "f'Question example: {train_data.examples[0].input}'", ")", "\n", "logger", ".", "info", "(", "f'Logical form example: {train_data.examples[0].logical_form}'", ")", "\n", "logger", ".", "info", "(", "f\"Unique tokens in input vocabulary: {len(vocabs[INPUT])}\"", ")", "\n", "logger", ".", "info", "(", "f\"Unique tokens in logical form vocabulary: {len(vocabs[LOGICAL_FORM])}\"", ")", "\n", "logger", ".", "info", "(", "f\"Unique tokens in ner vocabulary: {len(vocabs[NER])}\"", ")", "\n", "logger", ".", "info", "(", "f\"Unique tokens in coref vocabulary: {len(vocabs[COREF])}\"", ")", "\n", "logger", ".", "info", "(", "f\"Number of nodes in the graph: {len(vocabs[GRAPH])}\"", ")", "\n", "logger", ".", "info", "(", "f'Batch: {args.batch_size}'", ")", "\n", "logger", ".", "info", "(", "f'Epochs: {args.epochs}'", ")", "\n", "\n", "# run epochs", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "# train for one epoch", "\n", "        ", "train", "(", "train_loader", ",", "model", ",", "vocabs", ",", "criterion", ",", "optimizer", ",", "epoch", ")", "\n", "\n", "# evaluate on validation set", "\n", "if", "(", "epoch", "+", "1", ")", "%", "args", ".", "valfreq", "==", "0", ":", "\n", "            ", "val_loss", "=", "validate", "(", "val_loader", ",", "model", ",", "vocabs", ",", "criterion", ")", "\n", "# if val_loss < best_val:", "\n", "best_val", "=", "min", "(", "val_loss", ",", "best_val", ")", "# log every validation step", "\n", "save_checkpoint", "(", "{", "\n", "EPOCH", ":", "epoch", "+", "1", ",", "\n", "STATE_DICT", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "BEST_VAL", ":", "best_val", ",", "\n", "OPTIMIZER", ":", "optimizer", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "CURR_VAL", ":", "val_loss", "}", ")", "\n", "logger", ".", "info", "(", "f'* Val loss: {val_loss:.4f}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.train.train": [[119, 163], ["utils.AverageMeter", "utils.AverageMeter", "model.train", "time.time", "enumerate", "model", "utils.AverageMeter.update", "optimizer.zero_grad", "loss.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "optimizer.step", "utils.AverageMeter.update", "time.time", "logger.info", "logical_form[].contiguous().view", "ner.contiguous().view", "coref.contiguous().view", "graph[].contiguous().view", "criterion", "criterion", "input.size", "model.parameters", "time.time", "logical_form[].contiguous", "ner.contiguous", "coref.contiguous", "graph[].contiguous", "len"], "function", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.scripts.pyg_test.train", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_executor.meters.F1scoreMeter.update", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.NoamOpt.zero_grad", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.NoamOpt.step", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_executor.meters.F1scoreMeter.update"], ["", "", "", "def", "train", "(", "train_loader", ",", "model", ",", "vocabs", ",", "criterion", ",", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "# get inputs", "\n", "        ", "input", "=", "batch", ".", "input", "\n", "logical_form", "=", "batch", ".", "logical_form", "\n", "ner", "=", "batch", ".", "ner", "\n", "coref", "=", "batch", ".", "coref", "\n", "graph", "=", "batch", ".", "graph", "\n", "\n", "# compute output", "\n", "output", "=", "model", "(", "input", ",", "logical_form", "[", ":", ",", ":", "-", "1", "]", ")", "\n", "\n", "# prepare targets", "\n", "target", "=", "{", "\n", "LOGICAL_FORM", ":", "logical_form", "[", ":", ",", "1", ":", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", ",", "# (batch_size * trg_len)", "\n", "NER", ":", "ner", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", ",", "\n", "COREF", ":", "coref", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", ",", "\n", "GRAPH", ":", "graph", "[", ":", ",", "1", ":", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "}", "\n", "\n", "# compute loss", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "if", "args", ".", "task", "==", "MULTITASK", "else", "criterion", "(", "output", "[", "args", ".", "task", "]", ",", "target", "[", "args", ".", "task", "]", ")", "\n", "\n", "# record loss", "\n", "losses", ".", "update", "(", "loss", ".", "data", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute gradient and do Adam step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "clip", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "logger", ".", "info", "(", "f'Epoch: {epoch+1} - Train loss: {losses.val:.4f} ({losses.avg:.4f}) - Batch: {((i+1)/len(train_loader))*100:.2f}% - Time: {batch_time.sum:0.2f}s'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.train.validate": [[164, 197], ["utils.AverageMeter", "model.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "model", "utils.AverageMeter.update", "logical_form[].contiguous().view", "ner.contiguous().view", "coref.contiguous().view", "graph[].contiguous().view", "criterion", "criterion", "input.size", "logical_form[].contiguous", "ner.contiguous", "coref.contiguous", "graph[].contiguous"], "function", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_executor.meters.F1scoreMeter.update"], ["", "", "def", "validate", "(", "val_loader", ",", "model", ",", "vocabs", ",", "criterion", ")", ":", "\n", "    ", "losses", "=", "AverageMeter", "(", ")", "\n", "\n", "# switch to evaluate mode", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "_", ",", "batch", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "# get inputs", "\n", "            ", "input", "=", "batch", ".", "input", "\n", "logical_form", "=", "batch", ".", "logical_form", "\n", "ner", "=", "batch", ".", "ner", "\n", "coref", "=", "batch", ".", "coref", "\n", "graph", "=", "batch", ".", "graph", "\n", "\n", "# compute output", "\n", "output", "=", "model", "(", "input", ",", "logical_form", "[", ":", ",", ":", "-", "1", "]", ")", "\n", "\n", "# prepare targets", "\n", "target", "=", "{", "\n", "LOGICAL_FORM", ":", "logical_form", "[", ":", ",", "1", ":", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", ",", "# (batch_size * trg_len)", "\n", "NER", ":", "ner", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", ",", "\n", "COREF", ":", "coref", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", ",", "\n", "GRAPH", ":", "graph", "[", ":", ",", "1", ":", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "}", "\n", "\n", "# compute loss", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "if", "args", ".", "task", "==", "MULTITASK", "else", "criterion", "(", "output", "[", "args", ".", "task", "]", ",", "target", "[", "args", ".", "task", "]", ")", "\n", "\n", "# record loss", "\n", "losses", ".", "update", "(", "loss", ".", "data", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "", "", "return", "losses", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.dataset.CSQADataset.__init__": [[10, 15], ["dataset.CSQADataset.load_data_and_fields", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.dataset.CSQADataset.load_data_and_fields"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "train_path", "=", "str", "(", "ROOT_PATH", ".", "parent", ")", "+", "args", ".", "data_path", "+", "'/train/*'", "\n", "self", ".", "val_path", "=", "str", "(", "ROOT_PATH", ".", "parent", ")", "+", "args", ".", "data_path", "+", "'/val/*'", "\n", "self", ".", "test_path", "=", "str", "(", "ROOT_PATH", ".", "parent", ")", "+", "args", ".", "data_path", "+", "'/test/*'", "\n", "self", ".", "load_data_and_fields", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.dataset.CSQADataset._prepare_data": [[16, 240], ["range", "len", "input_data.append", "helper_data[].append", "reversed", "next_user.copy", "next_system.copy", "reversed", "user.copy", "system.copy", "len", "len", "len", "len", "len", "len", "next_user.copy", "next_system.copy", "input.extend", "ner_tag.extend", "input.append", "ner_tag.append", "input.append", "ner_tag.append", "input.append", "ner_tag.append", "input.append", "ner_tag.append", "input.append", "ner_tag.append", "coref.extend", "coref.append", "reversed", "coref.append", "reversed", "user.copy", "system.copy", "input.extend", "ner_tag.extend", "input.append", "ner_tag.append", "input.append", "ner_tag.append", "input.append", "ner_tag.append", "coref.extend", "coref.append", "reversed", "coref.append", "reversed", "logical_form.append", "graph_cls.append", "list", "next_user.copy", "next_system.copy", "input.append", "ner_tag.append", "input.append", "ner_tag.append", "coref.append", "coref.append", "user.copy", "system.copy", "input.append", "ner_tag.append", "input.append", "ner_tag.append", "coref.append", "coref.append", "logical_form.append", "graph_cls.append", "reversed", "str", "str", "coref.append", "coref.append", "coref.append", "coref.append", "str", "str", "coref.append", "coref.append", "coref.append", "coref.append", "logical_form.append", "graph_cls.append", "action_entities.index", "action_entities.index", "str", "str", "str", "str", "action_entities.index", "action_entities.index", "str", "str", "str", "str", "logical_form.append", "graph_cls.append", "action_entities.index", "action_entities.index", "action_entities.index", "action_entities.index", "action_entities.index", "action_entities.index", "action_entities.index", "action_entities.index", "logical_form.append", "graph_cls.append", "Exception"], "methods", ["None"], ["", "def", "_prepare_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "input_data", "=", "[", "]", "\n", "helper_data", "=", "{", "QUESTION_TYPE", ":", "[", "]", "}", "\n", "for", "conversation", "in", "data", ":", "\n", "            ", "prev_user_conv", "=", "None", "\n", "prev_system_conv", "=", "None", "\n", "is_clarification", "=", "False", "\n", "is_history_ner_spurious", "=", "False", "\n", "turns", "=", "len", "(", "conversation", ")", "//", "2", "\n", "for", "i", "in", "range", "(", "turns", ")", ":", "\n", "                ", "input", "=", "[", "]", "\n", "logical_form", "=", "[", "]", "\n", "ner_tag", "=", "[", "]", "\n", "coref", "=", "[", "]", "\n", "graph_cls", "=", "[", "]", "\n", "\n", "if", "is_clarification", ":", "\n", "                    ", "is_clarification", "=", "False", "\n", "continue", "\n", "\n", "", "user", "=", "conversation", "[", "2", "*", "i", "]", "\n", "system", "=", "conversation", "[", "2", "*", "i", "+", "1", "]", "\n", "\n", "if", "user", "[", "'question-type'", "]", "==", "'Clarification'", ":", "\n", "# get next context", "\n", "                    ", "is_clarification", "=", "True", "\n", "next_user", "=", "conversation", "[", "2", "*", "(", "i", "+", "1", ")", "]", "\n", "next_system", "=", "conversation", "[", "2", "*", "(", "i", "+", "1", ")", "+", "1", "]", "\n", "\n", "# skip if ner history is spurious", "\n", "if", "is_history_ner_spurious", ":", "\n", "                        ", "is_history_ner_spurious", "=", "False", "\n", "if", "not", "next_user", "[", "'is_ner_spurious'", "]", "and", "not", "next_system", "[", "'is_ner_spurious'", "]", ":", "\n", "                            ", "prev_user_conv", "=", "next_user", ".", "copy", "(", ")", "\n", "prev_system_conv", "=", "next_system", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "                            ", "is_history_ner_spurious", "=", "True", "\n", "", "continue", "\n", "\n", "# skip if ner is spurious", "\n", "", "if", "user", "[", "'is_ner_spurious'", "]", "or", "system", "[", "'is_ner_spurious'", "]", "or", "next_user", "[", "'is_ner_spurious'", "]", "or", "next_system", "[", "'is_ner_spurious'", "]", ":", "\n", "                        ", "is_history_ner_spurious", "=", "True", "\n", "continue", "\n", "\n", "# skip if no gold action (or spurious)", "\n", "", "if", "'gold_actions'", "not", "in", "next_system", "or", "next_system", "[", "'is_spurious'", "]", ":", "\n", "                        ", "prev_user_conv", "=", "next_user", ".", "copy", "(", ")", "\n", "prev_system_conv", "=", "next_system", ".", "copy", "(", ")", "\n", "continue", "\n", "\n", "", "if", "i", "==", "0", ":", "# NA + [SEP] + NA + [SEP] + current_question", "\n", "                        ", "input", ".", "extend", "(", "[", "NA_TOKEN", ",", "SEP_TOKEN", ",", "NA_TOKEN", ",", "SEP_TOKEN", "]", ")", "\n", "ner_tag", ".", "extend", "(", "[", "O", ",", "O", ",", "O", ",", "O", "]", ")", "\n", "", "else", ":", "\n", "# add prev context user", "\n", "                        ", "for", "context", "in", "prev_user_conv", "[", "'context'", "]", ":", "\n", "                            ", "input", ".", "append", "(", "context", "[", "1", "]", ")", "\n", "ner_tag", ".", "append", "(", "f'{context[-1]}-{context[-2]}'", "if", "context", "[", "-", "1", "]", "in", "[", "B", ",", "I", "]", "else", "context", "[", "-", "1", "]", ")", "\n", "\n", "# sep token", "\n", "", "input", ".", "append", "(", "SEP_TOKEN", ")", "\n", "ner_tag", ".", "append", "(", "O", ")", "\n", "\n", "# add prev context answer", "\n", "for", "context", "in", "prev_system_conv", "[", "'context'", "]", ":", "\n", "                            ", "input", ".", "append", "(", "context", "[", "1", "]", ")", "\n", "ner_tag", ".", "append", "(", "f'{context[-1]}-{context[-2]}'", "if", "context", "[", "-", "1", "]", "in", "[", "B", ",", "I", "]", "else", "context", "[", "-", "1", "]", ")", "\n", "\n", "# sep token", "\n", "", "input", ".", "append", "(", "SEP_TOKEN", ")", "\n", "ner_tag", ".", "append", "(", "O", ")", "\n", "\n", "# user context", "\n", "", "for", "context", "in", "user", "[", "'context'", "]", ":", "\n", "                        ", "input", ".", "append", "(", "context", "[", "1", "]", ")", "\n", "ner_tag", ".", "append", "(", "f'{context[-1]}-{context[-2]}'", "if", "context", "[", "-", "1", "]", "in", "[", "B", ",", "I", "]", "else", "context", "[", "-", "1", "]", ")", "\n", "\n", "# system context", "\n", "", "for", "context", "in", "system", "[", "'context'", "]", ":", "\n", "                        ", "input", ".", "append", "(", "context", "[", "1", "]", ")", "\n", "ner_tag", ".", "append", "(", "f'{context[-1]}-{context[-2]}'", "if", "context", "[", "-", "1", "]", "in", "[", "B", ",", "I", "]", "else", "context", "[", "-", "1", "]", ")", "\n", "\n", "# next user context", "\n", "", "for", "context", "in", "next_user", "[", "'context'", "]", ":", "\n", "                        ", "input", ".", "append", "(", "context", "[", "1", "]", ")", "\n", "ner_tag", ".", "append", "(", "f'{context[-1]}-{context[-2]}'", "if", "context", "[", "-", "1", "]", "in", "[", "B", ",", "I", "]", "else", "context", "[", "-", "1", "]", ")", "\n", "\n", "# coref entities - prepare coref values", "\n", "", "action_entities", "=", "[", "action", "[", "1", "]", "for", "action", "in", "next_system", "[", "GOLD_ACTIONS", "]", "if", "action", "[", "0", "]", "==", "ENTITY", "]", "\n", "for", "context", "in", "reversed", "(", "user", "[", "'context'", "]", "+", "system", "[", "'context'", "]", "+", "next_user", "[", "'context'", "]", ")", ":", "\n", "                        ", "if", "context", "[", "2", "]", "in", "action_entities", "and", "context", "[", "4", "]", "==", "B", "and", "str", "(", "action_entities", ".", "index", "(", "context", "[", "2", "]", ")", ")", "not", "in", "coref", ":", "\n", "                            ", "coref", ".", "append", "(", "str", "(", "action_entities", ".", "index", "(", "context", "[", "2", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "                            ", "coref", ".", "append", "(", "NA_TOKEN", ")", "\n", "\n", "", "", "if", "i", "==", "0", ":", "\n", "                        ", "coref", ".", "extend", "(", "[", "NA_TOKEN", ",", "NA_TOKEN", ",", "NA_TOKEN", ",", "NA_TOKEN", "]", ")", "\n", "", "else", ":", "\n", "                        ", "coref", ".", "append", "(", "NA_TOKEN", ")", "\n", "for", "context", "in", "reversed", "(", "prev_system_conv", "[", "'context'", "]", ")", ":", "\n", "                            ", "if", "context", "[", "2", "]", "in", "action_entities", "and", "context", "[", "4", "]", "==", "B", "and", "str", "(", "action_entities", ".", "index", "(", "context", "[", "2", "]", ")", ")", "not", "in", "coref", ":", "\n", "                                ", "coref", ".", "append", "(", "str", "(", "action_entities", ".", "index", "(", "context", "[", "2", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "                                ", "coref", ".", "append", "(", "NA_TOKEN", ")", "\n", "\n", "", "", "coref", ".", "append", "(", "NA_TOKEN", ")", "\n", "for", "context", "in", "reversed", "(", "prev_user_conv", "[", "'context'", "]", ")", ":", "\n", "                            ", "if", "context", "[", "2", "]", "in", "action_entities", "and", "context", "[", "4", "]", "==", "B", "and", "str", "(", "action_entities", ".", "index", "(", "context", "[", "2", "]", ")", ")", "not", "in", "coref", ":", "\n", "                                ", "coref", ".", "append", "(", "str", "(", "action_entities", ".", "index", "(", "context", "[", "2", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "                                ", "coref", ".", "append", "(", "NA_TOKEN", ")", "\n", "\n", "# get gold actions", "\n", "", "", "", "gold_actions", "=", "next_system", "[", "GOLD_ACTIONS", "]", "\n", "\n", "# track context history", "\n", "prev_user_conv", "=", "next_user", ".", "copy", "(", ")", "\n", "prev_system_conv", "=", "next_system", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "                    ", "if", "is_history_ner_spurious", ":", "# skip if history is ner spurious", "\n", "                        ", "is_history_ner_spurious", "=", "False", "\n", "if", "not", "user", "[", "'is_ner_spurious'", "]", "and", "not", "system", "[", "'is_ner_spurious'", "]", ":", "\n", "                            ", "prev_user_conv", "=", "user", ".", "copy", "(", ")", "\n", "prev_system_conv", "=", "system", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "                            ", "is_history_ner_spurious", "=", "True", "\n", "\n", "", "continue", "\n", "", "if", "user", "[", "'is_ner_spurious'", "]", "or", "system", "[", "'is_ner_spurious'", "]", ":", "# skip if ner is spurious", "\n", "                        ", "is_history_ner_spurious", "=", "True", "\n", "continue", "\n", "\n", "", "if", "GOLD_ACTIONS", "not", "in", "system", "or", "system", "[", "'is_spurious'", "]", ":", "# skip if logical form is spurious", "\n", "                        ", "prev_user_conv", "=", "user", ".", "copy", "(", ")", "\n", "prev_system_conv", "=", "system", ".", "copy", "(", ")", "\n", "continue", "\n", "\n", "", "if", "i", "==", "0", ":", "# NA + [SEP] + NA + [SEP] + current_question", "\n", "                        ", "input", ".", "extend", "(", "[", "NA_TOKEN", ",", "SEP_TOKEN", ",", "NA_TOKEN", ",", "SEP_TOKEN", "]", ")", "\n", "ner_tag", ".", "extend", "(", "[", "O", ",", "O", ",", "O", ",", "O", "]", ")", "\n", "", "else", ":", "\n", "# add prev context user", "\n", "                        ", "for", "context", "in", "prev_user_conv", "[", "'context'", "]", ":", "\n", "                            ", "input", ".", "append", "(", "context", "[", "1", "]", ")", "\n", "ner_tag", ".", "append", "(", "f'{context[-1]}-{context[-2]}'", "if", "context", "[", "-", "1", "]", "in", "[", "B", ",", "I", "]", "else", "context", "[", "-", "1", "]", ")", "\n", "\n", "# sep token", "\n", "", "input", ".", "append", "(", "SEP_TOKEN", ")", "\n", "ner_tag", ".", "append", "(", "O", ")", "\n", "\n", "# add prev context answer", "\n", "for", "context", "in", "prev_system_conv", "[", "'context'", "]", ":", "\n", "                            ", "input", ".", "append", "(", "context", "[", "1", "]", ")", "\n", "ner_tag", ".", "append", "(", "f'{context[-1]}-{context[-2]}'", "if", "context", "[", "-", "1", "]", "in", "[", "B", ",", "I", "]", "else", "context", "[", "-", "1", "]", ")", "\n", "\n", "# sep token", "\n", "", "input", ".", "append", "(", "SEP_TOKEN", ")", "\n", "ner_tag", ".", "append", "(", "O", ")", "\n", "\n", "# user context", "\n", "", "for", "context", "in", "user", "[", "'context'", "]", ":", "\n", "                        ", "input", ".", "append", "(", "context", "[", "1", "]", ")", "\n", "ner_tag", ".", "append", "(", "f'{context[-1]}-{context[-2]}'", "if", "context", "[", "-", "1", "]", "in", "[", "B", ",", "I", "]", "else", "context", "[", "-", "1", "]", ")", "\n", "\n", "# coref entities - prepare coref values", "\n", "", "action_entities", "=", "[", "action", "[", "1", "]", "for", "action", "in", "system", "[", "GOLD_ACTIONS", "]", "if", "action", "[", "0", "]", "==", "ENTITY", "]", "\n", "for", "context", "in", "reversed", "(", "user", "[", "'context'", "]", ")", ":", "\n", "                        ", "if", "context", "[", "2", "]", "in", "action_entities", "and", "context", "[", "4", "]", "==", "B", "and", "str", "(", "action_entities", ".", "index", "(", "context", "[", "2", "]", ")", ")", "not", "in", "coref", "and", "user", "[", "'description'", "]", "not", "in", "[", "'Simple Question|Mult. Entity'", ",", "'Verification|one entity, multiple entities (as object) referred indirectly'", "]", ":", "\n", "                            ", "coref", ".", "append", "(", "str", "(", "action_entities", ".", "index", "(", "context", "[", "2", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "                            ", "coref", ".", "append", "(", "NA_TOKEN", ")", "\n", "\n", "", "", "if", "i", "==", "0", ":", "\n", "                        ", "coref", ".", "extend", "(", "[", "NA_TOKEN", ",", "NA_TOKEN", ",", "NA_TOKEN", ",", "NA_TOKEN", "]", ")", "\n", "", "else", ":", "\n", "                        ", "coref", ".", "append", "(", "NA_TOKEN", ")", "\n", "for", "context", "in", "reversed", "(", "prev_system_conv", "[", "'context'", "]", ")", ":", "\n", "                            ", "if", "context", "[", "2", "]", "in", "action_entities", "and", "context", "[", "4", "]", "==", "B", "and", "str", "(", "action_entities", ".", "index", "(", "context", "[", "2", "]", ")", ")", "not", "in", "coref", "and", "user", "[", "'description'", "]", "not", "in", "[", "'Simple Question|Mult. Entity'", ",", "'Verification|one entity, multiple entities (as object) referred indirectly'", "]", ":", "\n", "                                ", "coref", ".", "append", "(", "str", "(", "action_entities", ".", "index", "(", "context", "[", "2", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "                                ", "coref", ".", "append", "(", "NA_TOKEN", ")", "\n", "\n", "", "", "coref", ".", "append", "(", "NA_TOKEN", ")", "\n", "for", "context", "in", "reversed", "(", "prev_user_conv", "[", "'context'", "]", ")", ":", "\n", "                            ", "if", "context", "[", "2", "]", "in", "action_entities", "and", "context", "[", "4", "]", "==", "B", "and", "str", "(", "action_entities", ".", "index", "(", "context", "[", "2", "]", ")", ")", "not", "in", "coref", "and", "user", "[", "'description'", "]", "not", "in", "[", "'Simple Question|Mult. Entity'", ",", "'Verification|one entity, multiple entities (as object) referred indirectly'", "]", ":", "\n", "                                ", "coref", ".", "append", "(", "str", "(", "action_entities", ".", "index", "(", "context", "[", "2", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "                                ", "coref", ".", "append", "(", "NA_TOKEN", ")", "\n", "\n", "# get gold actions", "\n", "", "", "", "gold_actions", "=", "system", "[", "GOLD_ACTIONS", "]", "\n", "\n", "# track context history", "\n", "prev_user_conv", "=", "user", ".", "copy", "(", ")", "\n", "prev_system_conv", "=", "system", ".", "copy", "(", ")", "\n", "\n", "# prepare logical form", "\n", "", "for", "action", "in", "gold_actions", ":", "\n", "                    ", "if", "action", "[", "0", "]", "==", "ACTION", ":", "\n", "                        ", "logical_form", ".", "append", "(", "action", "[", "1", "]", ")", "\n", "graph_cls", ".", "append", "(", "NA_TOKEN", ")", "\n", "", "elif", "action", "[", "0", "]", "==", "RELATION", ":", "\n", "                        ", "logical_form", ".", "append", "(", "RELATION", ")", "\n", "graph_cls", ".", "append", "(", "action", "[", "1", "]", ")", "\n", "", "elif", "action", "[", "0", "]", "==", "TYPE", ":", "\n", "                        ", "logical_form", ".", "append", "(", "TYPE", ")", "\n", "graph_cls", ".", "append", "(", "action", "[", "1", "]", ")", "\n", "", "elif", "action", "[", "0", "]", "==", "ENTITY", ":", "\n", "                        ", "logical_form", ".", "append", "(", "PREV_ANSWER", "if", "action", "[", "1", "]", "==", "PREV_ANSWER", "else", "ENTITY", ")", "\n", "graph_cls", ".", "append", "(", "NA_TOKEN", ")", "\n", "", "elif", "action", "[", "0", "]", "==", "VALUE", ":", "\n", "                        ", "logical_form", ".", "append", "(", "action", "[", "0", "]", ")", "\n", "graph_cls", ".", "append", "(", "NA_TOKEN", ")", "\n", "", "else", ":", "\n", "                        ", "raise", "Exception", "(", "f'Unkown logical form action {action[0]}'", ")", "\n", "\n", "", "", "assert", "len", "(", "input", ")", "==", "len", "(", "ner_tag", ")", "\n", "assert", "len", "(", "input", ")", "==", "len", "(", "coref", ")", "\n", "assert", "len", "(", "logical_form", ")", "==", "len", "(", "graph_cls", ")", "\n", "\n", "input_data", ".", "append", "(", "[", "input", ",", "logical_form", ",", "ner_tag", ",", "list", "(", "reversed", "(", "coref", ")", ")", ",", "graph_cls", "]", ")", "\n", "helper_data", "[", "QUESTION_TYPE", "]", ".", "append", "(", "user", "[", "'question-type'", "]", ")", "\n", "\n", "", "", "return", "input_data", ",", "helper_data", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.dataset.CSQADataset.get_inference_data": [[241, 389], ["glob.glob.glob", "transformers.BertTokenizer.from_pretrained", "range", "glob.glob.glob", "ValueError", "open", "partition.append", "len", "inference_data.append", "json.load", "next_user.copy", "next_system.copy", "user.copy", "system.copy", "len", "tokenizer", "prev_system_conv[].isnumeric", "input.extend", "input.append", "input.append", "input.append", "input.append", "input.append", "context_entities.extend", "context_entities.extend", "context_entities.extend", "input.extend", "input.append", "input.append", "tokenizer", "input.append", "context_entities.extend", "context_entities.extend", "prev_system_conv[].lower", "input.append", "input.append", "input.append", "input.append", "user[].lower", "enumerate", "enumerate", "[].isnumeric"], "methods", ["None"], ["", "def", "get_inference_data", "(", "self", ",", "inference_partition", ")", ":", "\n", "        ", "if", "inference_partition", "==", "'val'", ":", "\n", "            ", "files", "=", "glob", "(", "self", ".", "val_path", "+", "'/*.json'", ")", "\n", "", "elif", "inference_partition", "==", "'test'", ":", "\n", "            ", "files", "=", "glob", "(", "self", ".", "test_path", "+", "'/*.json'", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f'Unknown inference partion {inference_partition}'", ")", "\n", "\n", "", "partition", "=", "[", "]", "\n", "for", "f", "in", "files", ":", "\n", "            ", "with", "open", "(", "f", ")", "as", "json_file", ":", "\n", "                ", "partition", ".", "append", "(", "json", ".", "load", "(", "json_file", ")", ")", "\n", "\n", "", "", "tokenizer", "=", "BertTokenizer", ".", "from_pretrained", "(", "'bert-base-uncased'", ")", ".", "tokenize", "\n", "inference_data", "=", "[", "]", "\n", "\n", "for", "conversation", "in", "partition", ":", "\n", "            ", "is_clarification", "=", "False", "\n", "prev_user_conv", "=", "{", "}", "\n", "prev_system_conv", "=", "{", "}", "\n", "turns", "=", "len", "(", "conversation", ")", "//", "2", "\n", "for", "i", "in", "range", "(", "turns", ")", ":", "\n", "                ", "input", "=", "[", "]", "\n", "gold_entities", "=", "[", "]", "\n", "\n", "if", "is_clarification", ":", "\n", "                    ", "is_clarification", "=", "False", "\n", "continue", "\n", "\n", "", "user", "=", "conversation", "[", "2", "*", "i", "]", "\n", "system", "=", "conversation", "[", "2", "*", "i", "+", "1", "]", "\n", "\n", "if", "i", ">", "0", "and", "'context'", "not", "in", "prev_system_conv", ":", "\n", "                    ", "if", "len", "(", "prev_system_conv", "[", "'entities_in_utterance'", "]", ")", ">", "0", ":", "\n", "                        ", "tok_utterance", "=", "tokenizer", "(", "prev_system_conv", "[", "'utterance'", "]", ".", "lower", "(", ")", ")", "\n", "prev_system_conv", "[", "'context'", "]", "=", "[", "[", "i", ",", "tok", "]", "for", "i", ",", "tok", "in", "enumerate", "(", "tok_utterance", ")", "]", "\n", "", "elif", "prev_system_conv", "[", "'utterance'", "]", ".", "isnumeric", "(", ")", ":", "\n", "                        ", "prev_system_conv", "[", "'context'", "]", "=", "[", "[", "0", ",", "'num'", "]", "]", "\n", "", "elif", "prev_system_conv", "[", "'utterance'", "]", "==", "'YES'", ":", "\n", "                        ", "prev_system_conv", "[", "'context'", "]", "=", "[", "[", "0", ",", "'yes'", "]", "]", "\n", "", "elif", "prev_system_conv", "[", "'utterance'", "]", "==", "'NO'", ":", "\n", "                        ", "prev_system_conv", "[", "'context'", "]", "=", "[", "[", "0", ",", "'no'", "]", "]", "\n", "", "elif", "prev_system_conv", "[", "'utterance'", "]", "==", "'YES and NO respectively'", ":", "\n", "                        ", "prev_system_conv", "[", "'context'", "]", "=", "[", "[", "0", ",", "'no'", "]", "]", "\n", "", "elif", "prev_system_conv", "[", "'utterance'", "]", "==", "'NO and YES respectively'", ":", "\n", "                        ", "prev_system_conv", "[", "'context'", "]", "=", "[", "[", "0", ",", "'no'", "]", "]", "\n", "", "elif", "prev_system_conv", "[", "'utterance'", "]", "[", "0", "]", ".", "isnumeric", "(", ")", ":", "\n", "                        ", "prev_system_conv", "[", "'context'", "]", "=", "[", "[", "0", ",", "'num'", "]", "]", "\n", "\n", "", "", "if", "user", "[", "'question-type'", "]", "==", "'Clarification'", ":", "\n", "# get next context", "\n", "                    ", "is_clarification", "=", "True", "\n", "next_user", "=", "conversation", "[", "2", "*", "(", "i", "+", "1", ")", "]", "\n", "next_system", "=", "conversation", "[", "2", "*", "(", "i", "+", "1", ")", "+", "1", "]", "\n", "\n", "if", "i", "==", "0", ":", "# NA + [SEP] + NA + [SEP] + current_question", "\n", "                        ", "input", ".", "extend", "(", "[", "NA_TOKEN", ",", "SEP_TOKEN", ",", "NA_TOKEN", ",", "SEP_TOKEN", "]", ")", "\n", "", "else", ":", "\n", "# add prev context user", "\n", "                        ", "for", "context", "in", "prev_user_conv", "[", "'context'", "]", ":", "\n", "                            ", "input", ".", "append", "(", "context", "[", "1", "]", ")", "\n", "\n", "# sep token", "\n", "", "input", ".", "append", "(", "SEP_TOKEN", ")", "\n", "\n", "# add prev context answer", "\n", "for", "context", "in", "prev_system_conv", "[", "'context'", "]", ":", "\n", "                            ", "input", ".", "append", "(", "context", "[", "1", "]", ")", "\n", "\n", "# sep token", "\n", "", "input", ".", "append", "(", "SEP_TOKEN", ")", "\n", "\n", "# user context", "\n", "", "for", "context", "in", "user", "[", "'context'", "]", ":", "\n", "                        ", "input", ".", "append", "(", "context", "[", "1", "]", ")", "\n", "\n", "# system context", "\n", "", "for", "context", "in", "system", "[", "'context'", "]", ":", "\n", "                        ", "input", ".", "append", "(", "context", "[", "1", "]", ")", "\n", "\n", "# next user context", "\n", "", "for", "context", "in", "next_user", "[", "'context'", "]", ":", "\n", "                        ", "input", ".", "append", "(", "context", "[", "1", "]", ")", "\n", "\n", "", "question_type", "=", "[", "user", "[", "'question-type'", "]", ",", "next_user", "[", "'question-type'", "]", "]", "if", "'question-type'", "in", "next_user", "else", "user", "[", "'question-type'", "]", "\n", "results", "=", "next_system", "[", "'all_entities'", "]", "\n", "answer", "=", "next_system", "[", "'utterance'", "]", "\n", "gold_actions", "=", "next_system", "[", "GOLD_ACTIONS", "]", "if", "GOLD_ACTIONS", "in", "next_system", "else", "None", "\n", "prev_answer", "=", "prev_system_conv", "[", "'all_entities'", "]", "if", "'all_entities'", "in", "prev_system_conv", "else", "None", "\n", "context_entities", "=", "user", "[", "'entities_in_utterance'", "]", "+", "system", "[", "'entities_in_utterance'", "]", "\n", "if", "'entities_in_utterance'", "in", "next_user", ":", "context_entities", ".", "extend", "(", "next_user", "[", "'entities_in_utterance'", "]", ")", "\n", "if", "'entities_in_utterance'", "in", "prev_user_conv", ":", "context_entities", ".", "extend", "(", "prev_user_conv", "[", "'entities_in_utterance'", "]", ")", "\n", "if", "'entities_in_utterance'", "in", "prev_system_conv", ":", "context_entities", ".", "extend", "(", "prev_system_conv", "[", "'entities_in_utterance'", "]", ")", "\n", "\n", "# track context history", "\n", "prev_user_conv", "=", "next_user", ".", "copy", "(", ")", "\n", "prev_system_conv", "=", "next_system", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "                    ", "if", "i", "==", "0", ":", "# NA + [SEP] + NA + [SEP] + current_question", "\n", "                        ", "input", ".", "extend", "(", "[", "NA_TOKEN", ",", "SEP_TOKEN", ",", "NA_TOKEN", ",", "SEP_TOKEN", "]", ")", "\n", "", "else", ":", "\n", "# add prev context user", "\n", "                        ", "for", "context", "in", "prev_user_conv", "[", "'context'", "]", ":", "\n", "                            ", "input", ".", "append", "(", "context", "[", "1", "]", ")", "\n", "\n", "# sep token", "\n", "", "input", ".", "append", "(", "SEP_TOKEN", ")", "\n", "\n", "# add prev context answer", "\n", "for", "context", "in", "prev_system_conv", "[", "'context'", "]", ":", "\n", "                            ", "input", ".", "append", "(", "context", "[", "1", "]", ")", "\n", "\n", "# sep token", "\n", "", "input", ".", "append", "(", "SEP_TOKEN", ")", "\n", "\n", "", "if", "'context'", "not", "in", "user", ":", "\n", "                        ", "tok_utterance", "=", "tokenizer", "(", "user", "[", "'utterance'", "]", ".", "lower", "(", ")", ")", "\n", "user", "[", "'context'", "]", "=", "[", "[", "i", ",", "tok", "]", "for", "i", ",", "tok", "in", "enumerate", "(", "tok_utterance", ")", "]", "\n", "\n", "# user context", "\n", "", "for", "context", "in", "user", "[", "'context'", "]", ":", "\n", "                        ", "input", ".", "append", "(", "context", "[", "1", "]", ")", "\n", "\n", "", "question_type", "=", "user", "[", "'question-type'", "]", "\n", "results", "=", "system", "[", "'all_entities'", "]", "\n", "answer", "=", "system", "[", "'utterance'", "]", "\n", "gold_actions", "=", "system", "[", "GOLD_ACTIONS", "]", "if", "GOLD_ACTIONS", "in", "system", "else", "None", "\n", "prev_results", "=", "prev_system_conv", "[", "'all_entities'", "]", "if", "'all_entities'", "in", "prev_system_conv", "else", "None", "\n", "context_entities", "=", "user", "[", "'entities_in_utterance'", "]", "+", "system", "[", "'entities_in_utterance'", "]", "\n", "if", "'entities_in_utterance'", "in", "prev_user_conv", ":", "context_entities", ".", "extend", "(", "prev_user_conv", "[", "'entities_in_utterance'", "]", ")", "\n", "if", "'entities_in_utterance'", "in", "prev_system_conv", ":", "context_entities", ".", "extend", "(", "prev_system_conv", "[", "'entities_in_utterance'", "]", ")", "\n", "\n", "# track context history", "\n", "prev_user_conv", "=", "user", ".", "copy", "(", ")", "\n", "prev_system_conv", "=", "system", ".", "copy", "(", ")", "\n", "\n", "", "inference_data", ".", "append", "(", "{", "\n", "QUESTION_TYPE", ":", "question_type", ",", "\n", "QUESTION", ":", "user", "[", "'utterance'", "]", ",", "\n", "CONTEXT_QUESTION", ":", "input", ",", "\n", "CONTEXT_ENTITIES", ":", "context_entities", ",", "\n", "ANSWER", ":", "answer", ",", "\n", "RESULTS", ":", "results", ",", "\n", "PREV_RESULTS", ":", "prev_results", ",", "\n", "GOLD_ACTIONS", ":", "gold_actions", "\n", "}", ")", "\n", "\n", "", "", "return", "inference_data", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.dataset.CSQADataset._make_torchtext_dataset": [[390, 393], ["torchtext.data.Dataset", "torchtext.data.Example.fromlist"], "methods", ["None"], ["", "def", "_make_torchtext_dataset", "(", "self", ",", "data", ",", "fields", ")", ":", "\n", "        ", "examples", "=", "[", "Example", ".", "fromlist", "(", "i", ",", "fields", ")", "for", "i", "in", "data", "]", "\n", "return", "Dataset", "(", "examples", ",", "fields", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.dataset.CSQADataset.load_data_and_fields": [[394, 465], ["glob.glob.glob", "glob.glob.glob", "glob.glob.glob", "dataset.CSQADataset._prepare_data", "dataset.CSQADataset._prepare_data", "dataset.CSQADataset._prepare_data", "torchtext.data.Field", "torchtext.data.Field", "torchtext.data.Field", "torchtext.data.Field", "torchtext.data.Field", "dataset.CSQADataset._make_torchtext_dataset", "dataset.CSQADataset._make_torchtext_dataset", "dataset.CSQADataset._make_torchtext_dataset", "dataset.CSQADataset.input_field.build_vocab", "dataset.CSQADataset.lf_field.build_vocab", "dataset.CSQADataset.ner_field.build_vocab", "dataset.CSQADataset.coref_field.build_vocab", "dataset.CSQADataset.graph_field.build_vocab", "open", "train.append", "open", "val.append", "open", "test.append", "json.load", "json.load", "json.load"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.dataset.CSQADataset._prepare_data", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.dataset.CSQADataset._prepare_data", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.dataset.CSQADataset._prepare_data", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.dataset.CSQADataset._make_torchtext_dataset", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.dataset.CSQADataset._make_torchtext_dataset", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.dataset.CSQADataset._make_torchtext_dataset"], ["", "def", "load_data_and_fields", "(", "self", ")", ":", "\n", "        ", "train", ",", "val", ",", "test", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "# read data", "\n", "train_files", "=", "glob", "(", "self", ".", "train_path", "+", "'/*.json'", ")", "\n", "for", "f", "in", "train_files", ":", "\n", "            ", "with", "open", "(", "f", ")", "as", "json_file", ":", "\n", "                ", "train", ".", "append", "(", "json", ".", "load", "(", "json_file", ")", ")", "\n", "\n", "", "", "val_files", "=", "glob", "(", "self", ".", "val_path", "+", "'/*.json'", ")", "\n", "for", "f", "in", "val_files", ":", "\n", "            ", "with", "open", "(", "f", ")", "as", "json_file", ":", "\n", "                ", "val", ".", "append", "(", "json", ".", "load", "(", "json_file", ")", ")", "\n", "\n", "", "", "test_files", "=", "glob", "(", "self", ".", "test_path", "+", "'/*.json'", ")", "\n", "for", "f", "in", "test_files", ":", "\n", "            ", "with", "open", "(", "f", ")", "as", "json_file", ":", "\n", "                ", "test", ".", "append", "(", "json", ".", "load", "(", "json_file", ")", ")", "\n", "\n", "# prepare data", "\n", "", "", "train", ",", "self", ".", "train_helper", "=", "self", ".", "_prepare_data", "(", "train", ")", "\n", "val", ",", "self", ".", "val_helper", "=", "self", ".", "_prepare_data", "(", "val", ")", "\n", "test", ",", "self", ".", "test_helper", "=", "self", ".", "_prepare_data", "(", "test", ")", "\n", "\n", "# create fields", "\n", "self", ".", "input_field", "=", "Field", "(", "init_token", "=", "START_TOKEN", ",", "\n", "eos_token", "=", "CTX_TOKEN", ",", "\n", "pad_token", "=", "PAD_TOKEN", ",", "\n", "unk_token", "=", "UNK_TOKEN", ",", "\n", "lower", "=", "True", ",", "\n", "batch_first", "=", "True", ")", "\n", "\n", "self", ".", "lf_field", "=", "Field", "(", "init_token", "=", "START_TOKEN", ",", "\n", "eos_token", "=", "END_TOKEN", ",", "\n", "pad_token", "=", "PAD_TOKEN", ",", "\n", "unk_token", "=", "UNK_TOKEN", ",", "\n", "lower", "=", "True", ",", "\n", "batch_first", "=", "True", ")", "\n", "\n", "self", ".", "ner_field", "=", "Field", "(", "init_token", "=", "O", ",", "\n", "eos_token", "=", "O", ",", "\n", "pad_token", "=", "PAD_TOKEN", ",", "\n", "unk_token", "=", "O", ",", "\n", "batch_first", "=", "True", ")", "\n", "\n", "self", ".", "coref_field", "=", "Field", "(", "init_token", "=", "'0'", ",", "\n", "eos_token", "=", "'0'", ",", "\n", "pad_token", "=", "PAD_TOKEN", ",", "\n", "unk_token", "=", "'0'", ",", "\n", "batch_first", "=", "True", ")", "\n", "\n", "self", ".", "graph_field", "=", "Field", "(", "init_token", "=", "NA_TOKEN", ",", "\n", "eos_token", "=", "NA_TOKEN", ",", "\n", "pad_token", "=", "PAD_TOKEN", ",", "\n", "unk_token", "=", "NA_TOKEN", ",", "\n", "batch_first", "=", "True", ")", "\n", "\n", "fields_tuple", "=", "[", "(", "INPUT", ",", "self", ".", "input_field", ")", ",", "(", "LOGICAL_FORM", ",", "self", ".", "lf_field", ")", ",", "\n", "(", "NER", ",", "self", ".", "ner_field", ")", ",", "(", "COREF", ",", "self", ".", "coref_field", ")", ",", "\n", "(", "GRAPH", ",", "self", ".", "graph_field", ")", "]", "\n", "\n", "# create toechtext datasets", "\n", "self", ".", "train_data", "=", "self", ".", "_make_torchtext_dataset", "(", "train", ",", "fields_tuple", ")", "\n", "self", ".", "val_data", "=", "self", ".", "_make_torchtext_dataset", "(", "val", ",", "fields_tuple", ")", "\n", "self", ".", "test_data", "=", "self", ".", "_make_torchtext_dataset", "(", "test", ",", "fields_tuple", ")", "\n", "\n", "# build vocabularies", "\n", "self", ".", "input_field", ".", "build_vocab", "(", "self", ".", "train_data", ",", "self", ".", "val_data", ",", "self", ".", "test_data", ",", "min_freq", "=", "0", ",", "vectors", "=", "'glove.840B.300d'", ")", "\n", "self", ".", "lf_field", ".", "build_vocab", "(", "self", ".", "train_data", ",", "self", ".", "val_data", ",", "self", ".", "test_data", ",", "min_freq", "=", "0", ")", "\n", "self", ".", "ner_field", ".", "build_vocab", "(", "self", ".", "train_data", ",", "self", ".", "val_data", ",", "self", ".", "test_data", ",", "min_freq", "=", "0", ")", "\n", "self", ".", "coref_field", ".", "build_vocab", "(", "self", ".", "train_data", ",", "self", ".", "val_data", ",", "self", ".", "test_data", ",", "min_freq", "=", "0", ")", "\n", "self", ".", "graph_field", ".", "build_vocab", "(", "self", ".", "train_data", ",", "self", ".", "val_data", ",", "self", ".", "test_data", ",", "min_freq", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.dataset.CSQADataset.get_data": [[466, 468], ["None"], "methods", ["None"], ["", "def", "get_data", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "train_data", ",", "self", ".", "val_data", ",", "self", ".", "test_data", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.dataset.CSQADataset.get_data_helper": [[469, 471], ["None"], "methods", ["None"], ["", "def", "get_data_helper", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "train_helper", ",", "self", ".", "val_helper", ",", "self", ".", "test_helper", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.dataset.CSQADataset.get_fields": [[472, 479], ["None"], "methods", ["None"], ["", "def", "get_fields", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "INPUT", ":", "self", ".", "input_field", ",", "\n", "LOGICAL_FORM", ":", "self", ".", "lf_field", ",", "\n", "NER", ":", "self", ".", "ner_field", ",", "\n", "COREF", ":", "self", ".", "coref_field", ",", "\n", "GRAPH", ":", "self", ".", "graph_field", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.dataset.CSQADataset.get_vocabs": [[481, 488], ["None"], "methods", ["None"], ["", "def", "get_vocabs", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "INPUT", ":", "self", ".", "input_field", ".", "vocab", ",", "\n", "LOGICAL_FORM", ":", "self", ".", "lf_field", ".", "vocab", ",", "\n", "NER", ":", "self", ".", "ner_field", ".", "vocab", ",", "\n", "COREF", ":", "self", ".", "coref_field", ".", "vocab", ",", "\n", "GRAPH", ":", "self", ".", "graph_field", ".", "vocab", ",", "\n", "}", ""]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.test.main": [[36, 96], ["dataset.CSQADataset", "dataset.CSQADataset.get_vocabs", "dataset.CSQADataset.get_data", "dataset.CSQADataset.get_data_helper", "model.LASAGNE().to", "logger.info", "LASAGNE().to.load_state_dict", "logger.info", "torchtext.data.BucketIterator.splits", "logger.info", "logger.info", "logger.info", "test.test", "logger.info", "test.test", "logger.info", "utils.Predictor", "utils.Scorer", "utils.Scorer.data_score", "utils.Scorer.write_results", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "logger.info", "results.items", "model.LASAGNE", "logger.info", "question_type_results.items", "len", "len", "len", "logger.info"], "function", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.dataset.CSQADataset.get_vocabs", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.dataset.CSQADataset.get_data", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.dataset.CSQADataset.get_data_helper", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.scripts.pyg_test.test", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.scripts.pyg_test.test", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Scorer.data_score", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Scorer.write_results"], ["", "def", "main", "(", ")", ":", "\n", "# load data", "\n", "    ", "dataset", "=", "CSQADataset", "(", ")", "\n", "vocabs", "=", "dataset", ".", "get_vocabs", "(", ")", "\n", "_", ",", "val_data", ",", "test_data", "=", "dataset", ".", "get_data", "(", ")", "\n", "_", ",", "val_helper", ",", "test_helper", "=", "dataset", ".", "get_data_helper", "(", ")", "\n", "\n", "# load model", "\n", "model", "=", "LASAGNE", "(", "vocabs", ")", ".", "to", "(", "DEVICE", ")", "\n", "\n", "# define loss function (criterion)", "\n", "criterion", "=", "{", "\n", "LOGICAL_FORM", ":", "SingleTaskLoss", ",", "\n", "NER", ":", "SingleTaskLoss", ",", "\n", "COREF", ":", "SingleTaskLoss", ",", "\n", "GRAPH", ":", "SingleTaskLoss", ",", "\n", "MULTITASK", ":", "MultiTaskLoss", "\n", "}", "[", "args", ".", "task", "]", "(", "ignore_index", "=", "vocabs", "[", "LOGICAL_FORM", "]", ".", "stoi", "[", "PAD_TOKEN", "]", ")", "\n", "\n", "logger", ".", "info", "(", "f\"=> loading checkpoint '{args.model_path}'\"", ")", "\n", "if", "DEVICE", ".", "type", "==", "'cpu'", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "f'{ROOT_PATH}/{args.model_path}'", ",", "encoding", "=", "'latin1'", ",", "map_location", "=", "'cpu'", ")", "\n", "", "else", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "f'{ROOT_PATH}/{args.model_path}'", ",", "encoding", "=", "'latin1'", ")", "\n", "", "args", ".", "start_epoch", "=", "checkpoint", "[", "EPOCH", "]", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "STATE_DICT", "]", ")", "\n", "logger", ".", "info", "(", "f\"=> loaded checkpoint '{args.model_path}' (epoch {checkpoint[EPOCH]})\"", ")", "\n", "\n", "# prepare training and validation loader", "\n", "val_loader", ",", "test_loader", "=", "BucketIterator", ".", "splits", "(", "(", "val_data", ",", "test_data", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "sort_within_batch", "=", "False", ",", "\n", "sort_key", "=", "lambda", "x", ":", "len", "(", "x", ".", "input", ")", ",", "\n", "device", "=", "DEVICE", ")", "\n", "\n", "logger", ".", "info", "(", "'Loaders prepared.'", ")", "\n", "logger", ".", "info", "(", "f\"Validation data: {len(val_data.examples)}\"", ")", "\n", "logger", ".", "info", "(", "f\"Test data: {len(test_data.examples)}\"", ")", "\n", "\n", "# calculate loss", "\n", "val_loss", "=", "test", "(", "val_loader", ",", "model", ",", "vocabs", ",", "criterion", ")", "\n", "logger", ".", "info", "(", "f'* Val Loss: {val_loss:.4f}'", ")", "\n", "test_loss", "=", "test", "(", "test_loader", ",", "model", ",", "vocabs", ",", "criterion", ")", "\n", "logger", ".", "info", "(", "f'* Test Loss: {test_loss:.4f}'", ")", "\n", "\n", "# calculate accuracy", "\n", "predictor", "=", "Predictor", "(", "model", ",", "vocabs", ",", "DEVICE", ")", "\n", "# val_scorer = Scorer()", "\n", "test_scorer", "=", "Scorer", "(", ")", "\n", "# val_scorer.data_score(val_data.examples, val_helper, predictor)", "\n", "test_scorer", ".", "data_score", "(", "test_data", ".", "examples", ",", "test_helper", ",", "predictor", ")", "\n", "test_scorer", ".", "write_results", "(", ")", "\n", "\n", "# log results", "\n", "for", "partition", ",", "results", "in", "[", "[", "'Test'", ",", "test_scorer", ".", "results", "]", "]", ":", "# [['Val', val_scorer.results], ['Test', test_scorer.results]]:", "\n", "        ", "logger", ".", "info", "(", "f'* {partition} Data Results:'", ")", "\n", "for", "question_type", ",", "question_type_results", "in", "results", ".", "items", "(", ")", ":", "\n", "            ", "logger", ".", "info", "(", "f'\\t{question_type}:'", ")", "\n", "for", "task", ",", "task_result", "in", "question_type_results", ".", "items", "(", ")", ":", "\n", "                ", "logger", ".", "info", "(", "f'\\t\\t{task}: {task_result.accuracy:.4f}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.test.test": [[97, 130], ["utils.AverageMeter", "model.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "model", "utils.AverageMeter.update", "logical_form[].contiguous().view", "ner.contiguous().view", "coref.contiguous().view", "graph[].contiguous().view", "criterion", "criterion", "input.size", "logical_form[].contiguous", "ner.contiguous", "coref.contiguous", "graph[].contiguous"], "function", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_executor.meters.F1scoreMeter.update"], ["", "", "", "", "def", "test", "(", "loader", ",", "model", ",", "vocabs", ",", "criterion", ")", ":", "\n", "    ", "losses", "=", "AverageMeter", "(", ")", "\n", "\n", "# switch to evaluate mode", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "_", ",", "batch", "in", "enumerate", "(", "loader", ")", ":", "\n", "# get inputs", "\n", "            ", "input", "=", "batch", ".", "input", "\n", "logical_form", "=", "batch", ".", "logical_form", "\n", "ner", "=", "batch", ".", "ner", "\n", "coref", "=", "batch", ".", "coref", "\n", "graph", "=", "batch", ".", "graph", "\n", "\n", "# compute output", "\n", "output", "=", "model", "(", "input", ",", "logical_form", "[", ":", ",", ":", "-", "1", "]", ")", "\n", "\n", "# prepare targets", "\n", "target", "=", "{", "\n", "LOGICAL_FORM", ":", "logical_form", "[", ":", ",", "1", ":", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", ",", "# (batch_size * trg_len)", "\n", "NER", ":", "ner", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", ",", "\n", "COREF", ":", "coref", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", ",", "\n", "GRAPH", ":", "graph", "[", ":", ",", "1", ":", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "}", "\n", "\n", "# compute loss", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "if", "args", ".", "task", "==", "MULTITASK", "else", "criterion", "(", "output", "[", "args", ".", "task", "]", ",", "target", "[", "args", ".", "task", "]", ")", "\n", "\n", "# record loss", "\n", "losses", ".", "update", "(", "loss", ".", "data", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "", "", "return", "losses", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.model.LASAGNE.__init__": [[13, 22], ["torch.Module.__init__", "model.Encoder", "model.Decoder", "model.NerNet", "model.CorefNet", "model.GraphNet", "len", "len", "graph.TypeRelationGraph", "len"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.comparative.Comparative.__init__"], ["    ", "def", "__init__", "(", "self", ",", "vocabs", ")", ":", "\n", "        ", "super", "(", "LASAGNE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vocabs", "=", "vocabs", "\n", "self", ".", "encoder", "=", "Encoder", "(", "vocabs", "[", "INPUT", "]", ",", "DEVICE", ")", "\n", "self", ".", "decoder", "=", "Decoder", "(", "vocabs", "[", "LOGICAL_FORM", "]", ",", "DEVICE", ")", "\n", "self", ".", "ner", "=", "NerNet", "(", "len", "(", "vocabs", "[", "NER", "]", ")", ")", "\n", "self", ".", "coref", "=", "CorefNet", "(", "len", "(", "vocabs", "[", "COREF", "]", ")", ")", "\n", "self", ".", "graph", "=", "TypeRelationGraph", "(", "vocabs", "[", "GRAPH", "]", ")", ".", "data", "\n", "self", ".", "graph_net", "=", "GraphNet", "(", "len", "(", "vocabs", "[", "GRAPH", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.model.LASAGNE.forward": [[23, 36], ["model.LASAGNE.encoder", "model.LASAGNE.ner", "model.LASAGNE.coref", "model.LASAGNE.decoder", "model.LASAGNE.graph_net", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "src_tokens", ",", "trg_tokens", ")", ":", "\n", "        ", "encoder_out", "=", "self", ".", "encoder", "(", "src_tokens", ")", "\n", "ner_out", ",", "ner_h", "=", "self", ".", "ner", "(", "encoder_out", ")", "\n", "coref_out", "=", "self", ".", "coref", "(", "torch", ".", "cat", "(", "[", "encoder_out", ",", "ner_h", "]", ",", "dim", "=", "-", "1", ")", ")", "\n", "decoder_out", ",", "decoder_h", "=", "self", ".", "decoder", "(", "src_tokens", ",", "trg_tokens", ",", "encoder_out", ")", "\n", "encoder_ctx", "=", "encoder_out", "[", ":", ",", "-", "1", ":", ",", ":", "]", "\n", "graph_out", "=", "self", ".", "graph_net", "(", "encoder_ctx", ",", "decoder_h", ",", "self", ".", "graph", ")", "\n", "\n", "return", "{", "\n", "LOGICAL_FORM", ":", "decoder_out", ",", "\n", "NER", ":", "ner_out", ",", "\n", "COREF", ":", "coref_out", ",", "\n", "GRAPH", ":", "graph_out", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.model.LASAGNE._predict_encoder": [[38, 48], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.LASAGNE.encoder", "model.LASAGNE.ner", "model.LASAGNE.coref", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "_predict_encoder", "(", "self", ",", "src_tensor", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "encoder_out", "=", "self", ".", "encoder", "(", "src_tensor", ")", "\n", "ner_out", ",", "ner_h", "=", "self", ".", "ner", "(", "encoder_out", ")", "\n", "coref_out", "=", "self", ".", "coref", "(", "torch", ".", "cat", "(", "[", "encoder_out", ",", "ner_h", "]", ",", "dim", "=", "-", "1", ")", ")", "\n", "\n", "", "return", "{", "\n", "ENCODER_OUT", ":", "encoder_out", ",", "\n", "NER", ":", "ner_out", ",", "\n", "COREF", ":", "coref_out", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.model.LASAGNE._predict_decoder": [[50, 59], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.LASAGNE.decoder", "model.LASAGNE.graph_net"], "methods", ["None"], ["", "def", "_predict_decoder", "(", "self", ",", "src_tokens", ",", "trg_tokens", ",", "encoder_out", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "decoder_out", ",", "decoder_h", "=", "self", ".", "decoder", "(", "src_tokens", ",", "trg_tokens", ",", "encoder_out", ")", "\n", "encoder_ctx", "=", "encoder_out", "[", ":", ",", "-", "1", ":", ",", ":", "]", "\n", "graph_out", "=", "self", ".", "graph_net", "(", "encoder_ctx", ",", "decoder_h", ",", "self", ".", "graph", ")", "\n", "\n", "return", "{", "\n", "DECODER_OUT", ":", "decoder_out", ",", "\n", "GRAPH", ":", "graph_out", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.model.LstmFlatten.forward": [[62, 64], ["x[].squeeze"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "[", "0", "]", ".", "squeeze", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.model.Flatten.forward": [[66, 68], ["x.contiguous().view", "x.contiguous"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "x", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.model.NerNet.__init__": [[70, 82], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.LSTM", "torch.LSTM", "torch.LSTM", "model.LstmFlatten", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "model.Flatten", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.comparative.Comparative.__init__", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.LSTM", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.LSTM", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.LSTM", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Linear", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Linear", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Linear"], ["    ", "def", "__init__", "(", "self", ",", "tags", ",", "dropout", "=", "args", ".", "dropout", ")", ":", "\n", "        ", "super", "(", "NerNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ner_lstm", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "LSTM", "(", "input_size", "=", "args", ".", "emb_dim", ",", "hidden_size", "=", "args", ".", "emb_dim", ",", "batch_first", "=", "True", ")", ",", "\n", "LstmFlatten", "(", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", "\n", ")", "\n", "\n", "self", ".", "ner_linear", "=", "nn", ".", "Sequential", "(", "\n", "Flatten", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "args", ".", "emb_dim", ",", "tags", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.model.NerNet.forward": [[84, 87], ["model.NerNet.ner_lstm", "model.NerNet.ner_linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "self", ".", "ner_lstm", "(", "x", ")", "\n", "return", "self", ".", "ner_linear", "(", "h", ")", ",", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.model.CorefNet.__init__": [[89, 97], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "model.Flatten", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.comparative.Comparative.__init__", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Linear", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Linear", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Linear", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Linear", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Linear", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Linear"], ["    ", "def", "__init__", "(", "self", ",", "tags", ",", "dropout", "=", "args", ".", "dropout", ")", ":", "\n", "        ", "super", "(", "CorefNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "seq_net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "args", ".", "emb_dim", "*", "2", ",", "args", ".", "emb_dim", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "Flatten", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "args", ".", "emb_dim", ",", "tags", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.model.CorefNet.forward": [[99, 101], ["model.CorefNet.seq_net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "seq_net", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.model.GraphNet.__init__": [[103, 115], ["torch.Module.__init__", "torch_geometric.nn.GATConv", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "model.Flatten", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.comparative.Comparative.__init__", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Linear", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Linear", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Linear", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Linear", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Linear", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Linear", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Linear", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Linear", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Linear", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Linear", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Linear", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Linear"], ["    ", "def", "__init__", "(", "self", ",", "num_nodes", ")", ":", "\n", "        ", "super", "(", "GraphNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gat", "=", "GATConv", "(", "args", ".", "bert_dim", ",", "args", ".", "emb_dim", ",", "heads", "=", "args", ".", "graph_heads", ",", "dropout", "=", "args", ".", "dropout", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "args", ".", "dropout", ")", "\n", "self", ".", "linear_out", "=", "nn", ".", "Linear", "(", "(", "args", ".", "emb_dim", "*", "args", ".", "graph_heads", ")", "+", "args", ".", "emb_dim", ",", "args", ".", "emb_dim", ")", "\n", "self", ".", "score", "=", "nn", ".", "Linear", "(", "args", ".", "emb_dim", ",", "1", ")", "\n", "self", ".", "context_net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "args", ".", "emb_dim", "*", "2", ",", "args", ".", "emb_dim", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "Flatten", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "args", ".", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "args", ".", "emb_dim", ",", "num_nodes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.model.GraphNet.forward": [[117, 124], ["model.GraphNet.gat", "model.GraphNet.dropout", "model.GraphNet.linear_out", "model.GraphNet.context_net", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.Flatten", "model.GraphNet.score().squeeze().unsqueeze().repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "encoder_ctx.repeat", "model.GraphNet.unsqueeze().repeat", "model.GraphNet.score().squeeze().unsqueeze", "encoder_ctx.expand", "model.GraphNet.unsqueeze", "model.GraphNet.score().squeeze", "model.GraphNet.score"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "encoder_ctx", ",", "decoder_h", ",", "graph", ")", ":", "\n", "        ", "g", "=", "self", ".", "gat", "(", "graph", ".", "x", ",", "graph", ".", "edge_index", ")", "\n", "g", "=", "self", ".", "dropout", "(", "g", ")", "\n", "g", "=", "self", ".", "linear_out", "(", "torch", ".", "cat", "(", "[", "encoder_ctx", ".", "repeat", "(", "1", ",", "graph", ".", "x", ".", "shape", "[", "0", "]", ",", "1", ")", ",", "g", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "encoder_ctx", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ")", "]", ",", "dim", "=", "-", "1", ")", ")", "\n", "g", "=", "Flatten", "(", ")", "(", "self", ".", "score", "(", "g", ")", ".", "squeeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "decoder_h", ".", "shape", "[", "1", "]", ",", "1", ")", ")", "\n", "x", "=", "self", ".", "context_net", "(", "torch", ".", "cat", "(", "[", "encoder_ctx", ".", "expand", "(", "decoder_h", ".", "shape", ")", ",", "decoder_h", "]", ",", "dim", "=", "-", "1", ")", ")", "\n", "return", "x", "*", "g", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.model.Encoder.__init__": [[126, 141], ["torch.Module.__init__", "len", "vocabulary.vectors.size", "math.sqrt", "torch.Embedding", "torch.Embedding", "torch.Embedding", "model.Encoder.embed_tokens.weight.data.copy_", "model.PositionalEmbedding", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "model.EncoderLayer", "range"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.comparative.Comparative.__init__", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Embedding", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Embedding", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Embedding"], ["    ", "def", "__init__", "(", "self", ",", "vocabulary", ",", "device", ",", "embed_dim", "=", "args", ".", "emb_dim", ",", "layers", "=", "args", ".", "layers", ",", "\n", "heads", "=", "args", ".", "heads", ",", "pf_dim", "=", "args", ".", "pf_dim", ",", "dropout", "=", "args", ".", "dropout", ",", "max_positions", "=", "args", ".", "max_positions", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "input_dim", "=", "len", "(", "vocabulary", ")", "\n", "self", ".", "padding_idx", "=", "vocabulary", ".", "stoi", "[", "PAD_TOKEN", "]", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "device", "=", "device", "\n", "\n", "input_dim", ",", "embed_dim", "=", "vocabulary", ".", "vectors", ".", "size", "(", ")", "\n", "self", ".", "scale", "=", "math", ".", "sqrt", "(", "embed_dim", ")", "\n", "self", ".", "embed_tokens", "=", "nn", ".", "Embedding", "(", "input_dim", ",", "embed_dim", ")", "\n", "self", ".", "embed_tokens", ".", "weight", ".", "data", ".", "copy_", "(", "vocabulary", ".", "vectors", ")", "\n", "self", ".", "embed_positions", "=", "PositionalEmbedding", "(", "embed_dim", ",", "dropout", ",", "max_positions", ")", "\n", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "EncoderLayer", "(", "embed_dim", ",", "heads", ",", "pf_dim", ",", "dropout", ",", "device", ")", "for", "_", "in", "range", "(", "layers", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.model.Encoder.forward": [[142, 153], ["model.Encoder.embed_positions", "torch.dropout", "torch.dropout", "torch.dropout", "model.Encoder.embed_tokens", "layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "src_tokens", ")", ":", "\n", "        ", "src_mask", "=", "(", "src_tokens", "!=", "self", ".", "padding_idx", ")", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "x", "=", "self", ".", "embed_tokens", "(", "src_tokens", ")", "*", "self", ".", "scale", "\n", "x", "+=", "self", ".", "embed_positions", "(", "src_tokens", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "x", "=", "layer", "(", "x", ",", "src_mask", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.model.EncoderLayer.__init__": [[155, 162], ["torch.Module.__init__", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "model.MultiHeadedAttention", "model.PositionwiseFeedforward", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.comparative.Comparative.__init__"], ["    ", "def", "__init__", "(", "self", ",", "embed_dim", ",", "heads", ",", "pf_dim", ",", "dropout", ",", "device", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "embed_dim", ")", "\n", "self", ".", "self_attn", "=", "MultiHeadedAttention", "(", "embed_dim", ",", "heads", ",", "dropout", ",", "device", ")", "\n", "self", ".", "pos_ff", "=", "PositionwiseFeedforward", "(", "embed_dim", ",", "pf_dim", ",", "dropout", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.model.EncoderLayer.forward": [[163, 168], ["model.EncoderLayer.layer_norm", "model.EncoderLayer.layer_norm", "model.EncoderLayer.dropout", "model.EncoderLayer.dropout", "model.EncoderLayer.self_attn", "model.EncoderLayer.pos_ff"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "src_tokens", ",", "src_mask", ")", ":", "\n", "        ", "x", "=", "self", ".", "layer_norm", "(", "src_tokens", "+", "self", ".", "dropout", "(", "self", ".", "self_attn", "(", "src_tokens", ",", "src_tokens", ",", "src_tokens", ",", "src_mask", ")", ")", ")", "\n", "x", "=", "self", ".", "layer_norm", "(", "x", "+", "self", ".", "dropout", "(", "self", ".", "pos_ff", "(", "x", ")", ")", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.model.Decoder.__init__": [[170, 188], ["torch.Module.__init__", "len", "math.sqrt", "torch.Embedding", "torch.Embedding", "torch.Embedding", "model.PositionalEmbedding", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.Linear", "model.DecoderLayer", "range"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.comparative.Comparative.__init__", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Embedding", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Embedding", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Embedding", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Linear", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Linear", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Linear"], ["    ", "def", "__init__", "(", "self", ",", "vocabulary", ",", "device", ",", "embed_dim", "=", "args", ".", "emb_dim", ",", "layers", "=", "args", ".", "layers", ",", "\n", "heads", "=", "args", ".", "heads", ",", "pf_dim", "=", "args", ".", "pf_dim", ",", "dropout", "=", "args", ".", "dropout", ",", "max_positions", "=", "args", ".", "max_positions", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "output_dim", "=", "len", "(", "vocabulary", ")", "\n", "self", ".", "pad_id", "=", "vocabulary", ".", "stoi", "[", "PAD_TOKEN", "]", "\n", "self", ".", "pf_dim", "=", "pf_dim", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "max_positions", "=", "max_positions", "\n", "\n", "self", ".", "scale", "=", "math", ".", "sqrt", "(", "embed_dim", ")", "\n", "self", ".", "embed_tokens", "=", "nn", ".", "Embedding", "(", "output_dim", ",", "embed_dim", ")", "\n", "self", ".", "embed_positions", "=", "PositionalEmbedding", "(", "embed_dim", ",", "dropout", ",", "max_positions", ")", "\n", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "DecoderLayer", "(", "embed_dim", ",", "heads", ",", "pf_dim", ",", "dropout", ",", "device", ")", "for", "_", "in", "range", "(", "layers", ")", "]", ")", "\n", "\n", "self", ".", "linear_out", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "output_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.model.Decoder.make_masks": [[189, 196], ["torch.tril().bool", "torch.tril().bool", "torch.tril().bool", "torch.tril().bool", "torch.tril().bool", "torch.tril().bool", "torch.tril().bool", "torch.tril().bool", "torch.tril().bool", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "def", "make_masks", "(", "self", ",", "src_tokens", ",", "trg_tokens", ")", ":", "\n", "        ", "src_mask", "=", "(", "src_tokens", "!=", "self", ".", "pad_id", ")", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "trg_pad_mask", "=", "(", "trg_tokens", "!=", "self", ".", "pad_id", ")", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "3", ")", "\n", "trg_len", "=", "trg_tokens", ".", "shape", "[", "1", "]", "\n", "trg_sub_mask", "=", "torch", ".", "tril", "(", "torch", ".", "ones", "(", "(", "trg_len", ",", "trg_len", ")", ",", "device", "=", "self", ".", "device", ")", ")", ".", "bool", "(", ")", "\n", "trg_mask", "=", "trg_pad_mask", "&", "trg_sub_mask", "\n", "return", "src_mask", ",", "trg_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.model.Decoder.forward": [[197, 211], ["model.Decoder.make_masks", "model.Decoder.embed_positions", "torch.dropout", "torch.dropout", "torch.dropout", "layer.contiguous().view", "model.Decoder.linear_out", "model.Decoder.embed_tokens", "layer", "layer.contiguous"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.model.Decoder.make_masks"], ["", "def", "forward", "(", "self", ",", "src_tokens", ",", "trg_tokens", ",", "encoder_out", ")", ":", "\n", "        ", "src_mask", ",", "trg_mask", "=", "self", ".", "make_masks", "(", "src_tokens", ",", "trg_tokens", ")", "\n", "\n", "x", "=", "self", ".", "embed_tokens", "(", "trg_tokens", ")", "*", "self", ".", "scale", "\n", "x", "+=", "self", ".", "embed_positions", "(", "trg_tokens", ")", "\n", "h", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "h", "=", "layer", "(", "h", ",", "encoder_out", ",", "trg_mask", ",", "src_mask", ")", "\n", "\n", "", "x", "=", "h", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "h", ".", "shape", "[", "-", "1", "]", ")", "\n", "x", "=", "self", ".", "linear_out", "(", "x", ")", "\n", "\n", "return", "x", ",", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.model.DecoderLayer.__init__": [[213, 220], ["torch.Module.__init__", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "model.MultiHeadedAttention", "model.MultiHeadedAttention", "model.PositionwiseFeedforward", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.comparative.Comparative.__init__"], ["    ", "def", "__init__", "(", "self", ",", "embed_dim", ",", "heads", ",", "pf_dim", ",", "dropout", ",", "device", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "embed_dim", ")", "\n", "self", ".", "self_attn", "=", "MultiHeadedAttention", "(", "embed_dim", ",", "heads", ",", "dropout", ",", "device", ")", "\n", "self", ".", "src_attn", "=", "MultiHeadedAttention", "(", "embed_dim", ",", "heads", ",", "dropout", ",", "device", ")", "\n", "self", ".", "pos_ff", "=", "PositionwiseFeedforward", "(", "embed_dim", ",", "pf_dim", ",", "dropout", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.model.DecoderLayer.forward": [[221, 227], ["model.DecoderLayer.layer_norm", "model.DecoderLayer.layer_norm", "model.DecoderLayer.layer_norm", "model.DecoderLayer.dropout", "model.DecoderLayer.dropout", "model.DecoderLayer.dropout", "model.DecoderLayer.self_attn", "model.DecoderLayer.src_attn", "model.DecoderLayer.pos_ff"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "embed_trg", ",", "embed_src", ",", "trg_mask", ",", "src_mask", ")", ":", "\n", "        ", "x", "=", "self", ".", "layer_norm", "(", "embed_trg", "+", "self", ".", "dropout", "(", "self", ".", "self_attn", "(", "embed_trg", ",", "embed_trg", ",", "embed_trg", ",", "trg_mask", ")", ")", ")", "\n", "x", "=", "self", ".", "layer_norm", "(", "x", "+", "self", ".", "dropout", "(", "self", ".", "src_attn", "(", "x", ",", "embed_src", ",", "embed_src", ",", "src_mask", ")", ")", ")", "\n", "x", "=", "self", ".", "layer_norm", "(", "x", "+", "self", ".", "dropout", "(", "self", ".", "pos_ff", "(", "x", ")", ")", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.model.MultiHeadedAttention.__init__": [[229, 243], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.sqrt().to", "torch.sqrt().to", "torch.sqrt().to", "torch.sqrt().to", "torch.sqrt().to", "torch.sqrt().to", "torch.sqrt().to", "torch.sqrt().to", "torch.sqrt().to", "torch.Linear", "torch.Linear", "torch.Linear", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.comparative.Comparative.__init__", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Linear", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Linear", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Linear", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Linear", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Linear", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Linear", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Linear", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Linear", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Linear", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Linear", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Linear", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Linear"], ["    ", "def", "__init__", "(", "self", ",", "embed_dim", ",", "heads", ",", "dropout", ",", "device", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "embed_dim", "%", "heads", "==", "0", "\n", "self", ".", "attn_dim", "=", "embed_dim", "//", "heads", "\n", "self", ".", "heads", "=", "heads", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "self", ".", "linear_q", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "embed_dim", ")", "\n", "self", ".", "linear_k", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "embed_dim", ")", "\n", "self", ".", "linear_v", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "embed_dim", ")", "\n", "\n", "self", ".", "scale", "=", "torch", ".", "sqrt", "(", "torch", ".", "FloatTensor", "(", "[", "self", ".", "attn_dim", "]", ")", ")", ".", "to", "(", "device", ")", "\n", "\n", "self", ".", "linear_out", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "embed_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.model.MultiHeadedAttention.forward": [[244, 269], ["model.MultiHeadedAttention.linear_q", "model.MultiHeadedAttention.linear_k", "model.MultiHeadedAttention.linear_v", "Q.view().permute.view().permute.view().permute", "K.view().permute.view().permute.view().permute", "V.view().permute.view().permute.view().permute", "torch.softmax", "torch.softmax", "torch.softmax", "torch.dropout", "torch.dropout", "torch.dropout", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "model.MultiHeadedAttention.permute().contiguous", "model.MultiHeadedAttention.view", "model.MultiHeadedAttention.linear_out", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "energy.masked_fill.masked_fill.masked_fill", "Q.view().permute.view().permute.view", "K.view().permute.view().permute.view", "V.view().permute.view().permute.view", "K.view().permute.view().permute.permute", "model.MultiHeadedAttention.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "query", ",", "key", ",", "value", ",", "mask", "=", "None", ")", ":", "\n", "        ", "batch_size", "=", "query", ".", "shape", "[", "0", "]", "\n", "\n", "Q", "=", "self", ".", "linear_q", "(", "query", ")", "\n", "K", "=", "self", ".", "linear_k", "(", "key", ")", "\n", "V", "=", "self", ".", "linear_v", "(", "value", ")", "\n", "\n", "Q", "=", "Q", ".", "view", "(", "batch_size", ",", "-", "1", ",", "self", ".", "heads", ",", "self", ".", "attn_dim", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "# (batch, heads, sent_len, attn_dim)", "\n", "K", "=", "K", ".", "view", "(", "batch_size", ",", "-", "1", ",", "self", ".", "heads", ",", "self", ".", "attn_dim", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "# (batch, heads, sent_len, attn_dim)", "\n", "V", "=", "V", ".", "view", "(", "batch_size", ",", "-", "1", ",", "self", ".", "heads", ",", "self", ".", "attn_dim", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "# (batch, heads, sent_len, attn_dim)", "\n", "\n", "energy", "=", "torch", ".", "matmul", "(", "Q", ",", "K", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ")", ")", "/", "self", ".", "scale", "# (batch, heads, sent_len, sent_len)", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "energy", "=", "energy", ".", "masked_fill", "(", "mask", "==", "0", ",", "-", "1e10", ")", "\n", "\n", "", "attention", "=", "F", ".", "softmax", "(", "energy", ",", "dim", "=", "-", "1", ")", "# (batch, heads, sent_len, sent_len)", "\n", "attention", "=", "F", ".", "dropout", "(", "attention", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "x", "=", "torch", ".", "matmul", "(", "attention", ",", "V", ")", "# (batch, heads, sent_len, attn_dim)", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", "# (batch, sent_len, heads, attn_dim)", "\n", "x", "=", "x", ".", "view", "(", "batch_size", ",", "-", "1", ",", "self", ".", "heads", "*", "(", "self", ".", "attn_dim", ")", ")", "# (batch, sent_len, embed_dim)", "\n", "x", "=", "self", ".", "linear_out", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.model.PositionwiseFeedforward.__init__": [[271, 276], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.comparative.Comparative.__init__", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Linear", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Linear", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Linear", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Linear", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Linear", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Linear"], ["    ", "def", "__init__", "(", "self", ",", "embed_dim", ",", "pf_dim", ",", "dropout", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear_1", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "pf_dim", ")", "\n", "self", ".", "linear_2", "=", "nn", ".", "Linear", "(", "pf_dim", ",", "embed_dim", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.model.PositionwiseFeedforward.forward": [[277, 282], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "model.PositionwiseFeedforward.linear_2", "model.PositionwiseFeedforward.linear_1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "torch", ".", "relu", "(", "self", ".", "linear_1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "return", "self", ".", "linear_2", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.model.PositionalEmbedding.__init__": [[284, 293], ["torch.Module.__init__", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "pos_embed.unsqueeze.unsqueeze.unsqueeze", "model.PositionalEmbedding.register_buffer", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "math.log"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.comparative.Comparative.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "dropout", ",", "max_len", "=", "5000", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "pos_embed", "=", "torch", ".", "zeros", "(", "max_len", ",", "d_model", ")", "\n", "position", "=", "torch", ".", "arange", "(", "0.", ",", "max_len", ")", ".", "unsqueeze", "(", "1", ")", "\n", "div_term", "=", "torch", ".", "exp", "(", "torch", ".", "arange", "(", "0.", ",", "d_model", ",", "2", ")", "*", "-", "(", "math", ".", "log", "(", "10000.0", ")", "/", "d_model", ")", ")", "\n", "pos_embed", "[", ":", ",", "0", ":", ":", "2", "]", "=", "torch", ".", "sin", "(", "position", "*", "div_term", ")", "\n", "pos_embed", "[", ":", ",", "1", ":", ":", "2", "]", "=", "torch", ".", "cos", "(", "position", "*", "div_term", ")", "\n", "pos_embed", "=", "pos_embed", ".", "unsqueeze", "(", "0", ")", "\n", "self", ".", "register_buffer", "(", "'pos_embed'", ",", "pos_embed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.model.PositionalEmbedding.forward": [[294, 296], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "Variable", "(", "self", ".", "pos_embed", "[", ":", ",", ":", "x", ".", "size", "(", "1", ")", "]", ",", "requires_grad", "=", "False", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.NoamOpt.__init__": [[27, 34], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "model_size", "=", "args", ".", "emb_dim", ",", "factor", "=", "args", ".", "factor", ",", "warmup", "=", "args", ".", "warmup", ")", ":", "\n", "        ", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "_step", "=", "0", "\n", "self", ".", "warmup", "=", "warmup", "\n", "self", ".", "factor", "=", "factor", "\n", "self", ".", "model_size", "=", "model_size", "\n", "self", ".", "_rate", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.NoamOpt.step": [[35, 43], ["utils.NoamOpt.rate", "utils.NoamOpt.optimizer.step"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.NoamOpt.rate", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.NoamOpt.step"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "\"Update parameters and rate\"", "\n", "self", ".", "_step", "+=", "1", "\n", "rate", "=", "self", ".", "rate", "(", ")", "\n", "for", "p", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "            ", "p", "[", "'lr'", "]", "=", "rate", "\n", "", "self", ".", "_rate", "=", "rate", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.NoamOpt.rate": [[44, 51], ["min"], "methods", ["None"], ["", "def", "rate", "(", "self", ",", "step", "=", "None", ")", ":", "\n", "        ", "\"Implement `lrate` above\"", "\n", "if", "step", "is", "None", ":", "\n", "            ", "step", "=", "self", ".", "_step", "\n", "", "return", "self", ".", "factor", "*", "(", "self", ".", "model_size", "**", "(", "-", "0.5", ")", "*", "\n", "min", "(", "step", "**", "(", "-", "0.5", ")", ",", "step", "*", "self", ".", "warmup", "**", "(", "-", "1.5", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.NoamOpt.zero_grad": [[52, 54], ["utils.NoamOpt.optimizer.zero_grad"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.NoamOpt.zero_grad"], ["", "def", "zero_grad", "(", "self", ")", ":", "\n", "        ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.AverageMeter.__init__": [[58, 60], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_executor.meters.F1scoreMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.AverageMeter.reset": [[61, 66], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.AverageMeter.update": [[67, 72], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Predictor.__init__": [[75, 79], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "model", ",", "vocabs", ",", "device", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "self", ".", "vocabs", "=", "vocabs", "\n", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Predictor.predict": [[80, 120], ["utils.Predictor.model.eval", "torch.LongTensor().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.Predictor.model._predict_encoder", "encoder_step[].argmax().tolist", "encoder_step[].argmax().tolist", "range", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "torch.LongTensor().unsqueeze().to", "utils.Predictor.model._predict_decoder", "[].item", "[].item", "lf_out.append", "graph_out.append", "t.lower", "encoder_step[].argmax", "encoder_step[].argmax", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "decoder_step[].argmax", "decoder_step[].argmax", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.model.LASAGNE._predict_encoder", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.model.LASAGNE._predict_decoder", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.actions.ActionOperator.argmax", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.actions.ActionOperator.argmax", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.actions.ActionOperator.argmax", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.actions.ActionOperator.argmax"], ["", "def", "predict", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"Perform prediction on given input example\"\"\"", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "model_out", "=", "{", "}", "\n", "# prepare input", "\n", "tokenized_sentence", "=", "[", "START_TOKEN", "]", "+", "[", "t", ".", "lower", "(", ")", "for", "t", "in", "input", "]", "+", "[", "CTX_TOKEN", "]", "\n", "numericalized", "=", "[", "self", ".", "vocabs", "[", "INPUT", "]", ".", "stoi", "[", "token", "]", "if", "token", "in", "self", ".", "vocabs", "[", "INPUT", "]", ".", "stoi", "else", "self", ".", "vocabs", "[", "INPUT", "]", ".", "stoi", "[", "UNK_TOKEN", "]", "for", "token", "in", "tokenized_sentence", "]", "\n", "src_tensor", "=", "torch", ".", "LongTensor", "(", "numericalized", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# get ner, coref predictions", "\n", "            ", "encoder_step", "=", "self", ".", "model", ".", "_predict_encoder", "(", "src_tensor", ")", "\n", "ner_out", "=", "encoder_step", "[", "NER", "]", ".", "argmax", "(", "1", ")", ".", "tolist", "(", ")", "\n", "coref_out", "=", "encoder_step", "[", "COREF", "]", ".", "argmax", "(", "1", ")", ".", "tolist", "(", ")", "\n", "\n", "# get logical form, predicate and type prediction", "\n", "lf_out", "=", "[", "self", ".", "vocabs", "[", "LOGICAL_FORM", "]", ".", "stoi", "[", "START_TOKEN", "]", "]", "\n", "graph_out", "=", "[", "self", ".", "vocabs", "[", "GRAPH", "]", ".", "stoi", "[", "NA_TOKEN", "]", "]", "\n", "\n", "for", "_", "in", "range", "(", "self", ".", "model", ".", "decoder", ".", "max_positions", ")", ":", "\n", "                ", "lf_tensor", "=", "torch", ".", "LongTensor", "(", "lf_out", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "decoder_step", "=", "self", ".", "model", ".", "_predict_decoder", "(", "src_tensor", ",", "lf_tensor", ",", "encoder_step", "[", "ENCODER_OUT", "]", ")", "\n", "\n", "pred_lf", "=", "decoder_step", "[", "DECODER_OUT", "]", ".", "argmax", "(", "1", ")", "[", "-", "1", "]", ".", "item", "(", ")", "\n", "pred_graph", "=", "decoder_step", "[", "GRAPH", "]", ".", "argmax", "(", "1", ")", "[", "-", "1", "]", ".", "item", "(", ")", "\n", "\n", "if", "pred_lf", "==", "self", ".", "vocabs", "[", "LOGICAL_FORM", "]", ".", "stoi", "[", "END_TOKEN", "]", ":", "\n", "                    ", "break", "\n", "\n", "", "lf_out", ".", "append", "(", "pred_lf", ")", "\n", "graph_out", ".", "append", "(", "pred_graph", ")", "\n", "\n", "# translate top predictions into vocab tokens", "\n", "", "", "model_out", "[", "LOGICAL_FORM", "]", "=", "[", "self", ".", "vocabs", "[", "LOGICAL_FORM", "]", ".", "itos", "[", "i", "]", "for", "i", "in", "lf_out", "]", "[", "1", ":", "]", "\n", "model_out", "[", "NER", "]", "=", "[", "self", ".", "vocabs", "[", "NER", "]", ".", "itos", "[", "i", "]", "for", "i", "in", "ner_out", "]", "[", "1", ":", "-", "1", "]", "\n", "model_out", "[", "COREF", "]", "=", "[", "self", ".", "vocabs", "[", "COREF", "]", ".", "itos", "[", "i", "]", "for", "i", "in", "coref_out", "]", "[", "1", ":", "-", "1", "]", "\n", "model_out", "[", "GRAPH", "]", "=", "[", "self", ".", "vocabs", "[", "GRAPH", "]", ".", "itos", "[", "i", "]", "for", "i", "in", "graph_out", "]", "[", "1", ":", "]", "\n", "\n", "return", "model_out", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.AccuracyMeter.__init__": [[122, 124], ["utils.AccuracyMeter.reset"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_executor.meters.F1scoreMeter.reset"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.AccuracyMeter.reset": [[125, 129], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "correct", "=", "0", "\n", "self", ".", "wrong", "=", "0", "\n", "self", ".", "accuracy", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.AccuracyMeter.update": [[130, 137], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "gold", ",", "result", ")", ":", "\n", "        ", "if", "gold", "==", "result", ":", "\n", "            ", "self", ".", "correct", "+=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "wrong", "+=", "1", "\n", "\n", "", "self", ".", "accuracy", "=", "self", ".", "correct", "/", "(", "self", ".", "correct", "+", "self", ".", "wrong", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Scorer.__init__": [[140, 157], ["utils.AccuracyMeter", "utils.AccuracyMeter", "utils.AccuracyMeter", "utils.AccuracyMeter", "utils.AccuracyMeter", "utils.AccuracyMeter", "utils.AccuracyMeter", "utils.AccuracyMeter", "utils.AccuracyMeter", "utils.AccuracyMeter", "utils.AccuracyMeter"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "tasks", "=", "[", "TOTAL", ",", "LOGICAL_FORM", ",", "NER", ",", "COREF", ",", "GRAPH", "]", "\n", "self", ".", "results", "=", "{", "\n", "OVERALL", ":", "{", "task", ":", "AccuracyMeter", "(", ")", "for", "task", "in", "self", ".", "tasks", "}", ",", "\n", "CLARIFICATION", ":", "{", "task", ":", "AccuracyMeter", "(", ")", "for", "task", "in", "self", ".", "tasks", "}", ",", "\n", "COMPARATIVE", ":", "{", "task", ":", "AccuracyMeter", "(", ")", "for", "task", "in", "self", ".", "tasks", "}", ",", "\n", "LOGICAL", ":", "{", "task", ":", "AccuracyMeter", "(", ")", "for", "task", "in", "self", ".", "tasks", "}", ",", "\n", "QUANTITATIVE", ":", "{", "task", ":", "AccuracyMeter", "(", ")", "for", "task", "in", "self", ".", "tasks", "}", ",", "\n", "SIMPLE_COREFERENCED", ":", "{", "task", ":", "AccuracyMeter", "(", ")", "for", "task", "in", "self", ".", "tasks", "}", ",", "\n", "SIMPLE_DIRECT", ":", "{", "task", ":", "AccuracyMeter", "(", ")", "for", "task", "in", "self", ".", "tasks", "}", ",", "\n", "SIMPLE_ELLIPSIS", ":", "{", "task", ":", "AccuracyMeter", "(", ")", "for", "task", "in", "self", ".", "tasks", "}", ",", "\n", "# -------------------------------------------", "\n", "VERIFICATION", ":", "{", "task", ":", "AccuracyMeter", "(", ")", "for", "task", "in", "self", ".", "tasks", "}", ",", "\n", "QUANTITATIVE_COUNT", ":", "{", "task", ":", "AccuracyMeter", "(", ")", "for", "task", "in", "self", ".", "tasks", "}", ",", "\n", "COMPARATIVE_COUNT", ":", "{", "task", ":", "AccuracyMeter", "(", ")", "for", "task", "in", "self", ".", "tasks", "}", ",", "\n", "}", "\n", "self", ".", "data_dict", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Scorer.data_score": [[158, 216], ["enumerate", "zip", "predictor.predict", "[].update", "[].update", "[].update", "[].update", "[].update", "[].update", "[].update", "[].update", "[].update", "[].update", "utils.Scorer.data_dict.append", "t.lower", "logger.info", "utils.Scorer.results[].items", "logger.info"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Predictor.predict", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_executor.meters.F1scoreMeter.update", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_executor.meters.F1scoreMeter.update", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_executor.meters.F1scoreMeter.update", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_executor.meters.F1scoreMeter.update", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_executor.meters.F1scoreMeter.update", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_executor.meters.F1scoreMeter.update", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_executor.meters.F1scoreMeter.update", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_executor.meters.F1scoreMeter.update", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_executor.meters.F1scoreMeter.update", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_executor.meters.F1scoreMeter.update"], ["", "def", "data_score", "(", "self", ",", "data", ",", "helper", ",", "predictor", ")", ":", "\n", "        ", "\"\"\"Score complete list of data\"\"\"", "\n", "for", "i", ",", "(", "example", ",", "q_type", ")", "in", "enumerate", "(", "zip", "(", "data", ",", "helper", "[", "'question_type'", "]", ")", ")", ":", "\n", "# prepare references", "\n", "            ", "ref_lf", "=", "[", "t", ".", "lower", "(", ")", "for", "t", "in", "example", ".", "logical_form", "]", "\n", "ref_ner", "=", "example", ".", "ner", "\n", "ref_coref", "=", "example", ".", "coref", "\n", "ref_graph", "=", "example", ".", "graph", "\n", "\n", "# get model hypothesis", "\n", "hypothesis", "=", "predictor", ".", "predict", "(", "example", ".", "input", ")", "\n", "\n", "# check correctness", "\n", "correct_lf", "=", "1", "if", "ref_lf", "==", "hypothesis", "[", "LOGICAL_FORM", "]", "else", "0", "\n", "correct_ner", "=", "1", "if", "ref_ner", "==", "hypothesis", "[", "NER", "]", "else", "0", "\n", "correct_coref", "=", "1", "if", "ref_coref", "==", "hypothesis", "[", "COREF", "]", "else", "0", "\n", "correct_graph", "=", "1", "if", "ref_graph", "==", "hypothesis", "[", "GRAPH", "]", "else", "0", "\n", "\n", "# save results", "\n", "gold", "=", "1", "\n", "res", "=", "1", "if", "correct_lf", "and", "correct_ner", "and", "correct_coref", "and", "correct_graph", "else", "0", "\n", "# Question type", "\n", "self", ".", "results", "[", "q_type", "]", "[", "TOTAL", "]", ".", "update", "(", "gold", ",", "res", ")", "\n", "self", ".", "results", "[", "q_type", "]", "[", "LOGICAL_FORM", "]", ".", "update", "(", "ref_lf", ",", "hypothesis", "[", "LOGICAL_FORM", "]", ")", "\n", "self", ".", "results", "[", "q_type", "]", "[", "NER", "]", ".", "update", "(", "ref_ner", ",", "hypothesis", "[", "NER", "]", ")", "\n", "self", ".", "results", "[", "q_type", "]", "[", "COREF", "]", ".", "update", "(", "ref_coref", ",", "hypothesis", "[", "COREF", "]", ")", "\n", "self", ".", "results", "[", "q_type", "]", "[", "GRAPH", "]", ".", "update", "(", "ref_graph", ",", "hypothesis", "[", "GRAPH", "]", ")", "\n", "# Overall", "\n", "self", ".", "results", "[", "OVERALL", "]", "[", "TOTAL", "]", ".", "update", "(", "gold", ",", "res", ")", "\n", "self", ".", "results", "[", "OVERALL", "]", "[", "LOGICAL_FORM", "]", ".", "update", "(", "ref_lf", ",", "hypothesis", "[", "LOGICAL_FORM", "]", ")", "\n", "self", ".", "results", "[", "OVERALL", "]", "[", "NER", "]", ".", "update", "(", "ref_ner", ",", "hypothesis", "[", "NER", "]", ")", "\n", "self", ".", "results", "[", "OVERALL", "]", "[", "COREF", "]", ".", "update", "(", "ref_coref", ",", "hypothesis", "[", "COREF", "]", ")", "\n", "self", ".", "results", "[", "OVERALL", "]", "[", "GRAPH", "]", ".", "update", "(", "ref_graph", ",", "hypothesis", "[", "GRAPH", "]", ")", "\n", "\n", "# save data", "\n", "self", ".", "data_dict", ".", "append", "(", "{", "\n", "INPUT", ":", "example", ".", "input", ",", "\n", "LOGICAL_FORM", ":", "hypothesis", "[", "LOGICAL_FORM", "]", ",", "\n", "f'{LOGICAL_FORM}_gold'", ":", "example", ".", "logical_form", ",", "\n", "NER", ":", "hypothesis", "[", "NER", "]", ",", "\n", "f'{NER}_gold'", ":", "example", ".", "ner", ",", "\n", "COREF", ":", "hypothesis", "[", "COREF", "]", ",", "\n", "f'{COREF}_gold'", ":", "example", ".", "coref", ",", "\n", "GRAPH", ":", "hypothesis", "[", "GRAPH", "]", ",", "\n", "f'{GRAPH}_gold'", ":", "example", ".", "graph", ",", "\n", "# ------------------------------------", "\n", "f'{LOGICAL_FORM}_correct'", ":", "correct_lf", ",", "\n", "f'{NER}_correct'", ":", "correct_ner", ",", "\n", "f'{COREF}_correct'", ":", "correct_coref", ",", "\n", "f'{GRAPH}_correct'", ":", "correct_graph", ",", "\n", "IS_CORRECT", ":", "res", ",", "\n", "QUESTION_TYPE", ":", "q_type", "\n", "}", ")", "\n", "\n", "if", "(", "i", "+", "1", ")", "%", "500", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "f'* {OVERALL} Data Results {i+1}:'", ")", "\n", "for", "task", ",", "task_result", "in", "self", ".", "results", "[", "OVERALL", "]", ".", "items", "(", ")", ":", "\n", "                    ", "logger", ".", "info", "(", "f'\\t\\t{task}: {task_result.accuracy:.4f}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Scorer.write_results": [[217, 224], ["json.dumps", "re.sub", "re.sub", "re.sub", "open", "json_file.write"], "methods", ["None"], ["", "", "", "", "def", "write_results", "(", "self", ")", ":", "\n", "        ", "save_dict", "=", "json", ".", "dumps", "(", "self", ".", "data_dict", ",", "indent", "=", "4", ")", "\n", "save_dict_no_space_1", "=", "re", ".", "sub", "(", "r'\": \\[\\s+'", ",", "'\": ['", ",", "save_dict", ")", "\n", "save_dict_no_space_2", "=", "re", ".", "sub", "(", "r'\",\\s+'", ",", "'\", '", ",", "save_dict_no_space_1", ")", "\n", "save_dict_no_space_3", "=", "re", ".", "sub", "(", "r'\"\\s+\\]'", ",", "'\"]'", ",", "save_dict_no_space_2", ")", "\n", "with", "open", "(", "f'{ROOT_PATH}/{args.path_error_analysis}/error_analysis.json'", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "json_file", ":", "\n", "            ", "json_file", ".", "write", "(", "save_dict_no_space_3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Scorer.reset": [[225, 229], ["None"], "methods", ["None"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Reset object properties\"\"\"", "\n", "self", ".", "results", "=", "[", "]", "\n", "self", ".", "instances", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Inference.__init__": [[231, 235], ["transformers.BertTokenizer.from_pretrained", "elasticsearch.Elasticsearch"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "tokenizer", "=", "BertTokenizer", ".", "from_pretrained", "(", "BERT_BASE_UNCASED", ")", "\n", "self", ".", "es", "=", "Elasticsearch", "(", "[", "{", "'host'", ":", "'localhost'", ",", "'port'", ":", "9200", "}", "]", ")", "# connect to elastic search server", "\n", "self", ".", "inference_actions", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Inference.construct_actions": [[236, 333], ["time.perf_counter", "enumerate", "utils.Inference.write_inference_actions", "predictor.predict", "enumerate", "utils.Inference.inference_actions.append", "time.perf_counter", "print", "actions.append", "collections.OrderedDict", "collections.OrderedDict", "utils.Inference.create_ner_idx_ent_dict", "str", "list", "enumerate", "predicate_prediction[].startswith", "collections.OrderedDict.values", "enumerate", "collections.OrderedDict.items", "actions.append", "print", "type_prediction[].startswith", "tag.split", "enumerate", "enumerate", "len", "collections.OrderedDict.items", "actions.append", "print", "actions.append", "str", "actions.append", "print", "len", "tag.startswith", "tag.startswith", "list", "str", "print", "actions.append", "actions.append", "actions.append", "print", "actions.append", "actions.append", "actions.append", "collections.OrderedDict.values", "actions.append", "print", "actions.append", "print", "actions.append", "print", "actions.append", "utils.Inference.get_value", "utils.Inference.popitem", "utils.Inference.popitem"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Inference.write_inference_actions", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Predictor.predict", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Inference.create_ner_idx_ent_dict", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Inference.get_value"], ["", "def", "construct_actions", "(", "self", ",", "inference_data", ",", "predictor", ")", ":", "\n", "        ", "tic", "=", "time", ".", "perf_counter", "(", ")", "\n", "# based on model outpus create a final logical form to execute", "\n", "question_type_inference_data", "=", "[", "data", "for", "data", "in", "inference_data", "if", "args", ".", "question_type", "in", "data", "[", "QUESTION_TYPE", "]", "]", "\n", "for", "i", ",", "sample", "in", "enumerate", "(", "question_type_inference_data", ")", ":", "\n", "            ", "predictions", "=", "predictor", ".", "predict", "(", "sample", "[", "'context_question'", "]", ")", "\n", "actions", "=", "[", "]", "\n", "logical_form_prediction", "=", "predictions", "[", "LOGICAL_FORM", "]", "\n", "ent_count_pos", "=", "0", "\n", "for", "j", ",", "action", "in", "enumerate", "(", "logical_form_prediction", ")", ":", "\n", "                ", "if", "action", "not", "in", "[", "ENTITY", ",", "RELATION", ",", "TYPE", ",", "VALUE", ",", "PREV_ANSWER", "]", ":", "\n", "                    ", "actions", ".", "append", "(", "[", "ACTION", ",", "action", "]", ")", "\n", "", "elif", "action", "==", "ENTITY", ":", "\n", "# get predictions", "\n", "                    ", "context_question", "=", "sample", "[", "CONTEXT_QUESTION", "]", "\n", "ner_prediction", "=", "predictions", "[", "NER", "]", "\n", "coref_prediction", "=", "predictions", "[", "COREF", "]", "\n", "# get their indices", "\n", "ner_indices", "=", "OrderedDict", "(", "{", "k", ":", "tag", ".", "split", "(", "'-'", ")", "[", "-", "1", "]", "for", "k", ",", "tag", "in", "enumerate", "(", "ner_prediction", ")", "if", "tag", ".", "startswith", "(", "B", ")", "or", "tag", ".", "startswith", "(", "I", ")", "}", ")", "\n", "coref_indices", "=", "OrderedDict", "(", "{", "k", ":", "tag", "for", "k", ",", "tag", "in", "enumerate", "(", "coref_prediction", ")", "if", "tag", "not", "in", "[", "'NA'", "]", "}", ")", "\n", "# create a ner dictionary with index as key and entity as value", "\n", "ner_idx_ent", "=", "self", ".", "create_ner_idx_ent_dict", "(", "ner_indices", ",", "context_question", ")", "\n", "if", "str", "(", "ent_count_pos", ")", "not", "in", "list", "(", "coref_indices", ".", "values", "(", ")", ")", ":", "\n", "                        ", "if", "args", ".", "question_type", "in", "[", "CLARIFICATION", ",", "QUANTITATIVE_COUNT", "]", "and", "len", "(", "list", "(", "coref_indices", ".", "values", "(", ")", ")", ")", "==", "ent_count_pos", ":", "# simple constraint for clarification and quantitative count", "\n", "                            ", "for", "l", ",", "(", "cidx", ",", "ctag", ")", "in", "enumerate", "(", "coref_indices", ".", "items", "(", ")", ")", ":", "\n", "                                ", "if", "ctag", "==", "str", "(", "ent_count_pos", "-", "1", ")", ":", "\n", "                                    ", "if", "cidx", "in", "ner_idx_ent", ":", "\n", "                                        ", "actions", ".", "append", "(", "[", "ENTITY", ",", "ner_idx_ent", "[", "cidx", "]", "[", "0", "]", "]", ")", "\n", "break", "\n", "", "else", ":", "\n", "                                        ", "print", "(", "f'Coref index {cidx} not in ner entities!'", ")", "\n", "actions", ".", "append", "(", "[", "ENTITY", ",", "ENTITY", "]", ")", "\n", "break", "\n", "", "", "", "try", ":", "\n", "                                ", "actions", ".", "append", "(", "[", "ENTITY", ",", "ner_idx_ent", ".", "popitem", "(", ")", "[", "1", "]", "[", "0", "]", "]", ")", "\n", "", "except", ":", "\n", "                                ", "print", "(", "'No coref indices!'", ")", "\n", "actions", ".", "append", "(", "[", "ENTITY", ",", "ENTITY", "]", ")", "\n", "", "", "elif", "args", ".", "question_type", "in", "[", "VERIFICATION", ",", "SIMPLE_DIRECT", ",", "CLARIFICATION", "]", "and", "ent_count_pos", "==", "0", "and", "not", "coref_indices", ":", "# simple constraint for verification and simple question (direct)", "\n", "                            ", "try", ":", "\n", "                                ", "actions", ".", "append", "(", "[", "ENTITY", ",", "ner_idx_ent", ".", "popitem", "(", ")", "[", "1", "]", "[", "0", "]", "]", ")", "\n", "", "except", ":", "\n", "                                ", "print", "(", "'No coref indices!'", ")", "\n", "actions", ".", "append", "(", "[", "ENTITY", ",", "ENTITY", "]", ")", "\n", "", "", "else", ":", "\n", "# TODO here things get hard, we will need to use all ner entites and see if it works", "\n", "                            ", "print", "(", "'No coref indices!'", ")", "\n", "actions", ".", "append", "(", "[", "ENTITY", ",", "ENTITY", "]", ")", "\n", "", "", "else", ":", "\n", "                        ", "for", "l", ",", "(", "cidx", ",", "ctag", ")", "in", "enumerate", "(", "coref_indices", ".", "items", "(", ")", ")", ":", "\n", "                            ", "if", "ctag", "==", "str", "(", "ent_count_pos", ")", ":", "\n", "                                ", "if", "cidx", "in", "ner_idx_ent", ":", "\n", "                                    ", "actions", ".", "append", "(", "[", "ENTITY", ",", "ner_idx_ent", "[", "cidx", "]", "[", "0", "]", "]", ")", "\n", "break", "\n", "", "else", ":", "\n", "                                    ", "print", "(", "f'Coref index {cidx} not in ner entities!'", ")", "\n", "actions", ".", "append", "(", "[", "ENTITY", ",", "ENTITY", "]", ")", "\n", "break", "\n", "# update entity position counter", "\n", "", "", "", "", "ent_count_pos", "+=", "1", "\n", "", "elif", "action", "==", "RELATION", ":", "\n", "                    ", "predicate_prediction", "=", "predictions", "[", "GRAPH", "]", "\n", "if", "predicate_prediction", "[", "j", "]", ".", "startswith", "(", "'P'", ")", ":", "\n", "                        ", "actions", ".", "append", "(", "[", "RELATION", ",", "predicate_prediction", "[", "j", "]", "]", ")", "\n", "", "else", ":", "# Predicate", "\n", "                        ", "print", "(", "f'Predicate prediction not in correct position: {sample}'", ")", "\n", "", "", "elif", "action", "==", "TYPE", ":", "\n", "                    ", "type_prediction", "=", "predictions", "[", "GRAPH", "]", "\n", "if", "type_prediction", "[", "j", "]", ".", "startswith", "(", "'Q'", ")", ":", "\n", "                        ", "actions", ".", "append", "(", "[", "TYPE", ",", "type_prediction", "[", "j", "]", "]", ")", "\n", "", "else", ":", "# Type", "\n", "                        ", "print", "(", "f'Type prediction not in correct position: {sample}'", ")", "\n", "", "", "elif", "action", "==", "VALUE", ":", "\n", "                    ", "try", ":", "\n", "                        ", "actions", ".", "append", "(", "[", "VALUE", ",", "self", ".", "get_value", "(", "sample", "[", "QUESTION", "]", ")", "]", ")", "\n", "", "except", "Exception", "as", "ex", ":", "\n", "                        ", "print", "(", "ex", ")", "\n", "actions", ".", "append", "(", "[", "VALUE", ",", "'0'", "]", ")", "\n", "", "", "elif", "action", "==", "PREV_ANSWER", ":", "\n", "                    ", "actions", ".", "append", "(", "[", "ENTITY", ",", "PREV_ANSWER", "]", ")", "\n", "\n", "", "", "self", ".", "inference_actions", ".", "append", "(", "{", "\n", "QUESTION_TYPE", ":", "sample", "[", "QUESTION_TYPE", "]", ",", "\n", "QUESTION", ":", "sample", "[", "QUESTION", "]", ",", "\n", "ANSWER", ":", "sample", "[", "ANSWER", "]", ",", "\n", "ACTIONS", ":", "actions", ",", "\n", "RESULTS", ":", "sample", "[", "RESULTS", "]", ",", "\n", "PREV_RESULTS", ":", "sample", "[", "PREV_RESULTS", "]", ",", "\n", "GOLD_ACTIONS", ":", "sample", "[", "GOLD_ACTIONS", "]", "if", "GOLD_ACTIONS", "in", "sample", "else", "[", "]", ",", "\n", "IS_CORRECT", ":", "1", "if", "GOLD_ACTIONS", "in", "sample", "and", "sample", "[", "GOLD_ACTIONS", "]", "==", "actions", "else", "0", "\n", "}", ")", "\n", "\n", "if", "(", "i", "+", "1", ")", "%", "100", "==", "0", ":", "\n", "                ", "toc", "=", "time", ".", "perf_counter", "(", ")", "\n", "print", "(", "f'==> Finished action construction {((i+1)/len(question_type_inference_data))*100:.2f}% -- {toc - tic:0.2f}s'", ")", "\n", "\n", "", "", "self", ".", "write_inference_actions", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Inference.create_ner_idx_ent_dict": [[334, 365], ["collections.OrderedDict", "ner_indices.items", "utils.Inference.tokenizer.convert_tokens_to_string().replace", "utils.Inference.elasticsearch_query", "ent_idx.append", "utils.Inference.tokenizer.convert_tokens_to_string().replace", "utils.Inference.elasticsearch_query", "utils.Inference.tokenizer.convert_tokens_to_string", "utils.Inference.tokenizer.convert_tokens_to_string"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Inference.elasticsearch_query", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Inference.elasticsearch_query"], ["", "def", "create_ner_idx_ent_dict", "(", "self", ",", "ner_indices", ",", "context_question", ")", ":", "\n", "        ", "ent_idx", "=", "[", "]", "\n", "ner_idx_ent", "=", "OrderedDict", "(", ")", "\n", "for", "index", ",", "span_type", "in", "ner_indices", ".", "items", "(", ")", ":", "\n", "            ", "if", "not", "ent_idx", "or", "index", "-", "1", "==", "ent_idx", "[", "-", "1", "]", "[", "0", "]", ":", "\n", "                ", "ent_idx", ".", "append", "(", "[", "index", ",", "span_type", "]", ")", "# check wether token start with ## then include previous token also from context_question", "\n", "", "else", ":", "\n", "# get ent tokens from input context", "\n", "                ", "ent_tokens", "=", "[", "context_question", "[", "idx", "]", "for", "idx", ",", "_", "in", "ent_idx", "]", "\n", "# get string from tokens using tokenizer", "\n", "ent_string", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_string", "(", "ent_tokens", ")", ".", "replace", "(", "'##'", ",", "''", ")", "\n", "# get elastic search results", "\n", "es_results", "=", "self", ".", "elasticsearch_query", "(", "ent_string", ",", "ent_idx", "[", "0", "]", "[", "1", "]", ")", "# use type from B tag only", "\n", "# add idices to dict", "\n", "if", "es_results", ":", "\n", "                    ", "for", "idx", ",", "_", "in", "ent_idx", ":", "\n", "                        ", "ner_idx_ent", "[", "idx", "]", "=", "es_results", "\n", "# clean ent_idx", "\n", "", "", "ent_idx", "=", "[", "[", "index", ",", "span_type", "]", "]", "\n", "", "", "if", "ent_idx", ":", "\n", "# get ent tokens from input context", "\n", "            ", "ent_tokens", "=", "[", "context_question", "[", "idx", "]", "for", "idx", ",", "_", "in", "ent_idx", "]", "\n", "# get string from tokens using tokenizer", "\n", "ent_string", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_string", "(", "ent_tokens", ")", ".", "replace", "(", "'##'", ",", "''", ")", "\n", "# get elastic search results", "\n", "es_results", "=", "self", ".", "elasticsearch_query", "(", "ent_string", ",", "ent_idx", "[", "0", "]", "[", "1", "]", ")", "\n", "# add idices to dict", "\n", "if", "es_results", ":", "\n", "                ", "for", "idx", ",", "_", "in", "ent_idx", ":", "\n", "                    ", "ner_idx_ent", "[", "idx", "]", "=", "es_results", "\n", "", "", "", "return", "ner_idx_ent", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Inference.elasticsearch_query": [[366, 372], ["utils.Inference.es.search", "results.append", "unidecode.unidecode.unidecode"], "methods", ["None"], ["", "def", "elasticsearch_query", "(", "self", ",", "query", ",", "filter_type", ",", "res_size", "=", "50", ")", ":", "\n", "        ", "res", "=", "self", ".", "es", ".", "search", "(", "index", "=", "'csqa_wikidata'", ",", "doc_type", "=", "'entities'", ",", "body", "=", "{", "'size'", ":", "res_size", ",", "'query'", ":", "{", "'match'", ":", "{", "'label'", ":", "{", "'query'", ":", "unidecode", "(", "query", ")", ",", "'fuzziness'", ":", "'AUTO'", "}", "}", "}", "}", ")", "\n", "results", "=", "[", "]", "\n", "for", "hit", "in", "res", "[", "'hits'", "]", "[", "'hits'", "]", ":", "results", ".", "append", "(", "[", "hit", "[", "'_source'", "]", "[", "'id'", "]", ",", "hit", "[", "'_source'", "]", "[", "'type'", "]", "]", ")", "\n", "filtered_results", "=", "[", "res", "for", "res", "in", "results", "if", "filter_type", "in", "res", "[", "1", "]", "]", "\n", "return", "[", "res", "[", "0", "]", "for", "res", "in", "filtered_results", "]", "if", "filtered_results", "else", "[", "res", "[", "0", "]", "for", "res", "in", "results", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Inference.get_value": [[373, 393], ["question.split", "question.split", "question.split", "re.search().group", "question.split", "re.search().group", "re.search", "question.split", "re.search().group", "re.search", "question.split", "re.search().group", "question.split", "re.search", "question.split", "re.search().group", "print", "question.split", "re.search", "question.split", "re.search", "question.split", "question.split"], "methods", ["None"], ["", "def", "get_value", "(", "self", ",", "question", ")", ":", "\n", "        ", "if", "'min'", "in", "question", ".", "split", "(", ")", ":", "\n", "            ", "value", "=", "'0'", "\n", "", "elif", "'max'", "in", "question", ".", "split", "(", ")", ":", "\n", "            ", "value", "=", "'0'", "\n", "", "elif", "'exactly'", "in", "question", ".", "split", "(", ")", ":", "\n", "            ", "value", "=", "re", ".", "search", "(", "r'\\d+'", ",", "question", ".", "split", "(", "'exactly'", ")", "[", "1", "]", ")", ".", "group", "(", ")", "\n", "", "elif", "'approximately'", "in", "question", ".", "split", "(", ")", ":", "\n", "            ", "value", "=", "re", ".", "search", "(", "r'\\d+'", ",", "question", ".", "split", "(", "'approximately'", ")", "[", "1", "]", ")", ".", "group", "(", ")", "\n", "", "elif", "'around'", "in", "question", ".", "split", "(", ")", ":", "\n", "            ", "value", "=", "re", ".", "search", "(", "r'\\d+'", ",", "question", ".", "split", "(", "'around'", ")", "[", "1", "]", ")", ".", "group", "(", ")", "\n", "", "elif", "'atmost'", "in", "question", ".", "split", "(", ")", ":", "\n", "            ", "value", "=", "re", ".", "search", "(", "r'\\d+'", ",", "question", ".", "split", "(", "'atmost'", ")", "[", "1", "]", ")", ".", "group", "(", ")", "\n", "", "elif", "'atleast'", "in", "question", ".", "split", "(", ")", ":", "\n", "            ", "value", "=", "re", ".", "search", "(", "r'\\d+'", ",", "question", ".", "split", "(", "'atleast'", ")", "[", "1", "]", ")", ".", "group", "(", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "f'Could not extract value from question: {question}'", ")", "\n", "value", "=", "'0'", "\n", "\n", "", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Inference.write_inference_actions": [[394, 397], ["open", "json_file.write", "json.dumps", "[].rsplit", "args.model_path.rsplit"], "methods", ["None"], ["", "def", "write_inference_actions", "(", "self", ")", ":", "\n", "        ", "with", "open", "(", "f'{ROOT_PATH}/{args.path_inference}/{args.model_path.rsplit(\"/\", 1)[-1].rsplit(\".\", 2)[0]}_{args.inference_partition}_{args.question_type}.json'", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "json_file", ":", "\n", "            ", "json_file", ".", "write", "(", "json", ".", "dumps", "(", "self", ".", "inference_actions", ",", "indent", "=", "4", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.SingleTaskLoss.__init__": [[404, 407], ["torch.Module.__init__", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.comparative.Comparative.__init__"], ["def", "__init__", "(", "self", ",", "ignore_index", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "ignore_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.SingleTaskLoss.forward": [[408, 410], ["utils.SingleTaskLoss.criterion"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "output", ",", "target", ")", ":", "\n", "        ", "return", "self", ".", "criterion", "(", "output", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.MultiTaskLoss.__init__": [[413, 422], ["torch.Module.__init__", "utils.SingleTaskLoss", "utils.SingleTaskLoss", "utils.SingleTaskLoss", "utils.SingleTaskLoss", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.comparative.Comparative.__init__"], ["def", "__init__", "(", "self", ",", "ignore_index", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lf_loss", "=", "SingleTaskLoss", "(", "ignore_index", ")", "\n", "self", ".", "ner_loss", "=", "SingleTaskLoss", "(", "ignore_index", ")", "\n", "self", ".", "coref_loss", "=", "SingleTaskLoss", "(", "ignore_index", ")", "\n", "self", ".", "graph_loss", "=", "SingleTaskLoss", "(", "ignore_index", ")", "\n", "\n", "self", ".", "mml_emp", "=", "torch", ".", "Tensor", "(", "[", "True", ",", "True", ",", "True", ",", "True", "]", ")", "\n", "self", ".", "log_vars", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "len", "(", "self", ".", "mml_emp", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.MultiTaskLoss.forward": [[423, 445], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.log", "torch.log", "torch.log", "torch.log", "utils.MultiTaskLoss.lf_loss", "utils.MultiTaskLoss.ner_loss", "utils.MultiTaskLoss.coref_loss", "utils.MultiTaskLoss.graph_loss", "losses.mean", "utils.MultiTaskLoss.mml_emp.to().to", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "utils.MultiTaskLoss.mml_emp.to"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "output", ",", "target", ")", ":", "\n", "# weighted loss", "\n", "        ", "task_losses", "=", "torch", ".", "stack", "(", "(", "\n", "self", ".", "lf_loss", "(", "output", "[", "LOGICAL_FORM", "]", ",", "target", "[", "LOGICAL_FORM", "]", ")", ",", "\n", "self", ".", "ner_loss", "(", "output", "[", "NER", "]", ",", "target", "[", "NER", "]", ")", ",", "\n", "self", ".", "coref_loss", "(", "output", "[", "COREF", "]", ",", "target", "[", "COREF", "]", ")", ",", "\n", "self", ".", "graph_loss", "(", "output", "[", "GRAPH", "]", ",", "target", "[", "GRAPH", "]", ")", "\n", ")", ")", "\n", "\n", "dtype", "=", "task_losses", ".", "dtype", "\n", "stds", "=", "(", "torch", ".", "exp", "(", "self", ".", "log_vars", ")", "**", "(", "1", "/", "2", ")", ")", ".", "to", "(", "DEVICE", ")", ".", "to", "(", "dtype", ")", "\n", "weights", "=", "1", "/", "(", "(", "self", ".", "mml_emp", ".", "to", "(", "DEVICE", ")", ".", "to", "(", "dtype", ")", "+", "1", ")", "*", "(", "stds", "**", "2", ")", ")", "\n", "\n", "losses", "=", "weights", "*", "task_losses", "+", "torch", ".", "log", "(", "stds", ")", "\n", "\n", "return", "{", "\n", "LOGICAL_FORM", ":", "losses", "[", "0", "]", ",", "\n", "NER", ":", "losses", "[", "1", "]", ",", "\n", "COREF", ":", "losses", "[", "2", "]", ",", "\n", "GRAPH", ":", "losses", "[", "3", "]", ",", "\n", "MULTITASK", ":", "losses", ".", "mean", "(", ")", "\n", "}", "[", "args", ".", "task", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.save_checkpoint": [[398, 401], ["torch.save", "torch.save"], "function", ["None"], ["", "", "", "def", "save_checkpoint", "(", "state", ")", ":", "\n", "    ", "filename", "=", "f'{ROOT_PATH}/{args.snapshots}/{MODEL_NAME}_e{state[EPOCH]}_v{state[CURR_VAL]:.4f}_{args.task}.pth.tar'", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.init_weights": [[446, 451], ["model.parameters", "p.dim", "torch.init.xavier_uniform_"], "function", ["None"], ["", "", "def", "init_weights", "(", "model", ")", ":", "\n", "# initialize model parameters with Glorot / fan_avg", "\n", "    ", "for", "p", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "if", "p", ".", "dim", "(", ")", ">", "1", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_uniform_", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Embedding": [[452, 458], ["torch.Embedding", "torch.init.uniform_", "torch.init.constant_"], "function", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Embedding"], ["", "", "", "def", "Embedding", "(", "num_embeddings", ",", "embedding_dim", ",", "padding_idx", ")", ":", "\n", "    ", "\"\"\"Embedding layer\"\"\"", "\n", "m", "=", "nn", ".", "Embedding", "(", "num_embeddings", ",", "embedding_dim", ",", "padding_idx", "=", "padding_idx", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "m", ".", "weight", ",", "-", "0.1", ",", "0.1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", "[", "padding_idx", "]", ",", "0", ")", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Linear": [[459, 466], ["torch.Linear", "nn.Linear.weight.data.uniform_", "nn.Linear.bias.data.uniform_"], "function", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Linear"], ["", "def", "Linear", "(", "in_features", ",", "out_features", ",", "bias", "=", "True", ")", ":", "\n", "    ", "\"\"\"Linear layer\"\"\"", "\n", "m", "=", "nn", ".", "Linear", "(", "in_features", ",", "out_features", ",", "bias", "=", "bias", ")", "\n", "m", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "0.1", ",", "0.1", ")", "\n", "if", "bias", ":", "\n", "        ", "m", ".", "bias", ".", "data", ".", "uniform_", "(", "-", "0.1", ",", "0.1", ")", "\n", "", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.LSTM": [[467, 474], ["torch.LSTM", "nn.LSTM.named_parameters", "param.data.uniform_"], "function", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.LSTM"], ["", "def", "LSTM", "(", "input_size", ",", "hidden_size", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"LSTM layer\"\"\"", "\n", "m", "=", "nn", ".", "LSTM", "(", "input_size", ",", "hidden_size", ",", "**", "kwargs", ")", "\n", "for", "name", ",", "param", "in", "m", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "'weight'", "in", "name", "or", "'bias'", "in", "name", ":", "\n", "            ", "param", ".", "data", ".", "uniform_", "(", "-", "0.1", ",", "0.1", ")", "\n", "", "", "return", "m", "", "", ""]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.args.get_parser": [[3, 66], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "get_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'LASAGNE'", ")", "\n", "\n", "# general", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "default", "=", "1234", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--no-cuda'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--cuda_device'", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "\n", "# data", "\n", "parser", ".", "add_argument", "(", "'--data_path'", ",", "default", "=", "'/data/final/csqa'", ")", "\n", "\n", "# experiments", "\n", "parser", ".", "add_argument", "(", "'--snapshots'", ",", "default", "=", "'experiments/snapshots'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--path_results'", ",", "default", "=", "'experiments/results'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--path_error_analysis'", ",", "default", "=", "'experiments/error_analysis'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--path_inference'", ",", "default", "=", "'experiments/inference'", ",", "type", "=", "str", ")", "\n", "\n", "# task", "\n", "parser", ".", "add_argument", "(", "'--task'", ",", "default", "=", "'multitask'", ",", "choices", "=", "[", "'multitask'", ",", "\n", "'logical_form'", ",", "\n", "'ner'", ",", "\n", "'coref'", ",", "\n", "'graph'", "]", ",", "type", "=", "str", ")", "\n", "\n", "# model", "\n", "parser", ".", "add_argument", "(", "'--emb_dim'", ",", "default", "=", "300", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "default", "=", "0.1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--heads'", ",", "default", "=", "6", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--layers'", ",", "default", "=", "2", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--max_positions'", ",", "default", "=", "1000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--pf_dim'", ",", "default", "=", "300", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--graph_heads'", ",", "default", "=", "2", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--bert_dim'", ",", "default", "=", "3072", ",", "type", "=", "int", ")", "\n", "\n", "# training", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "default", "=", "0.0001", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "default", "=", "0.9", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup'", ",", "default", "=", "4000", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--factor'", ",", "default", "=", "1", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "default", "=", "0", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "default", "=", "20", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--start_epoch'", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--valfreq'", ",", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "default", "=", "''", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--clip'", ",", "default", "=", "5", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "default", "=", "50", ",", "type", "=", "int", ")", "\n", "\n", "# test and inference", "\n", "parser", ".", "add_argument", "(", "'--model_path'", ",", "default", "=", "'experiments/snapshots/'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--inference_partition'", ",", "default", "=", "'test'", ",", "choices", "=", "[", "'val'", ",", "'test'", "]", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--question_type'", ",", "default", "=", "'Clarification'", ",", "\n", "choices", "=", "[", "'Clarification'", ",", "\n", "'Comparative Reasoning (All)'", ",", "\n", "'Logical Reasoning (All)'", ",", "\n", "'Quantitative Reasoning (All)'", ",", "\n", "'Simple Question (Coreferenced)'", ",", "\n", "'Simple Question (Direct)'", ",", "\n", "'Simple Question (Ellipsis)'", ",", "\n", "'Verification (Boolean) (All)'", ",", "\n", "'Quantitative Reasoning (Count) (All)'", ",", "\n", "'Comparative Reasoning (Count) (All)'", "]", ",", "type", "=", "str", ")", "\n", "\n", "return", "parser", "", "", ""]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.knowledge_graph.knowledge_graph.KnowledgeGraph.__init__": [[8, 57], ["time.perf_counter", "ujson.loads", "print", "ujson.loads", "print", "ujson.loads", "print", "ujson.loads", "print", "ujson.loads", "ujson.loads", "print", "ujson.loads", "print", "ujson.loads", "ujson.loads", "print", "open().read", "open().read", "open().read", "open().read", "open().read", "open().read", "open().read", "open().read", "open().read", "open", "open", "open", "open", "open", "open", "open", "open", "open", "time.perf_counter", "time.perf_counter", "time.perf_counter", "time.perf_counter", "time.perf_counter", "time.perf_counter", "time.perf_counter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "wikidata_path", "=", "f'{ROOT_PATH}'", ")", ":", "\n", "        ", "tic", "=", "time", ".", "perf_counter", "(", ")", "\n", "\n", "# id -> entity label", "\n", "self", ".", "id_entity", "=", "ujson", ".", "loads", "(", "open", "(", "f'{wikidata_path}/items_wikidata_n.json'", ")", ".", "read", "(", ")", ")", "\n", "print", "(", "f'Loaded id_entity {time.perf_counter()-tic:0.2f}s'", ")", "\n", "\n", "# id -> relation label", "\n", "self", ".", "id_relation", "=", "ujson", ".", "loads", "(", "open", "(", "f'{wikidata_path}/filtered_property_wikidata4.json'", ")", ".", "read", "(", ")", ")", "\n", "print", "(", "f'Loaded id_relation {time.perf_counter()-tic:0.2f}s'", ")", "\n", "\n", "# entity -> type", "\n", "self", ".", "entity_type", "=", "ujson", ".", "loads", "(", "open", "(", "f'{wikidata_path}/entity_type.json'", ")", ".", "read", "(", ")", ")", "# dict[e] -> type", "\n", "print", "(", "f'Loaded entity_type {time.perf_counter()-tic:0.2f}s'", ")", "\n", "\n", "# type -> relation -> type", "\n", "self", ".", "type_triples", "=", "ujson", ".", "loads", "(", "open", "(", "f'{wikidata_path}/wikidata_type_dict.json'", ")", ".", "read", "(", ")", ")", "\n", "print", "(", "f'Loaded type_triples {time.perf_counter()-tic:0.2f}s'", ")", "\n", "\n", "# subject -> relation -> object", "\n", "self", ".", "subject_triples_1", "=", "ujson", ".", "loads", "(", "open", "(", "f'{wikidata_path}/wikidata_short_1.json'", ")", ".", "read", "(", ")", ")", "\n", "self", ".", "subject_triples_2", "=", "ujson", ".", "loads", "(", "open", "(", "f'{wikidata_path}/wikidata_short_2.json'", ")", ".", "read", "(", ")", ")", "\n", "self", ".", "subject_triples", "=", "{", "**", "self", ".", "subject_triples_1", ",", "**", "self", ".", "subject_triples_2", "}", "\n", "print", "(", "f'Loaded subject_triples {time.perf_counter()-tic:0.2f}s'", ")", "\n", "\n", "# object -> relation -> subject", "\n", "self", ".", "object_triples", "=", "ujson", ".", "loads", "(", "open", "(", "f'{wikidata_path}/comp_wikidata_rev.json'", ")", ".", "read", "(", ")", ")", "\n", "print", "(", "f'Loaded object_triples {time.perf_counter()-tic:0.2f}s'", ")", "\n", "\n", "# relation -> subject -> object | relation -> object -> subject", "\n", "self", ".", "relation_subject_object", "=", "ujson", ".", "loads", "(", "open", "(", "f'{wikidata_path}/relation_subject_object.json'", ")", ".", "read", "(", ")", ")", "\n", "self", ".", "relation_object_subject", "=", "ujson", ".", "loads", "(", "open", "(", "f'{wikidata_path}/relation_object_subject.json'", ")", ".", "read", "(", ")", ")", "\n", "print", "(", "f'Loaded relation_triples {time.perf_counter()-tic:0.2f}s'", ")", "\n", "\n", "# labels", "\n", "self", ".", "labels", "=", "{", "\n", "'entity'", ":", "self", ".", "id_entity", ",", "# dict[e] -> label", "\n", "'relation'", ":", "self", ".", "id_relation", "# dict[r] -> label", "\n", "}", "\n", "\n", "# triples", "\n", "self", ".", "triples", "=", "{", "\n", "'subject'", ":", "self", ".", "subject_triples", ",", "# dict[s][r] -> [o1, o2, o3]", "\n", "'object'", ":", "self", ".", "object_triples", ",", "# dict[o][r] -> [s1, s2, s3]", "\n", "'relation'", ":", "{", "\n", "'subject'", ":", "self", ".", "relation_subject_object", ",", "# dict[r][s] -> [o1, o2, o3]", "\n", "'object'", ":", "self", ".", "relation_object_subject", "# dict[r][o] -> [s1, s2, s3]", "\n", "}", ",", "\n", "'type'", ":", "self", ".", "type_triples", "# dict[t][r] -> [t1, t2, t3]", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.scripts.dgl_test.GCN.__init__": [[23, 42], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "dgl_test.GCN.layers.append", "range", "dgl_test.GCN.layers.append", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "dgl.nn.pytorch.GraphConv", "dgl_test.GCN.layers.append", "dgl.nn.pytorch.GraphConv", "dgl.nn.pytorch.GraphConv"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.comparative.Comparative.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "g", ",", "\n", "in_feats", ",", "\n", "n_hidden", ",", "\n", "n_classes", ",", "\n", "n_layers", ",", "\n", "activation", ",", "\n", "dropout", ")", ":", "\n", "        ", "super", "(", "GCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "g", "=", "g", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "# input layer", "\n", "self", ".", "layers", ".", "append", "(", "GraphConv", "(", "in_feats", ",", "n_hidden", ",", "activation", "=", "activation", ")", ")", "\n", "# hidden layers", "\n", "for", "i", "in", "range", "(", "n_layers", "-", "1", ")", ":", "\n", "            ", "self", ".", "layers", ".", "append", "(", "GraphConv", "(", "n_hidden", ",", "n_hidden", ",", "activation", "=", "activation", ")", ")", "\n", "# output layer", "\n", "", "self", ".", "layers", ".", "append", "(", "GraphConv", "(", "n_hidden", ",", "n_classes", ")", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.scripts.dgl_test.GCN.forward": [[43, 50], ["enumerate", "layer", "dgl_test.GCN.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ")", ":", "\n", "        ", "h", "=", "features", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "if", "i", "!=", "0", ":", "\n", "                ", "h", "=", "self", ".", "dropout", "(", "h", ")", "\n", "", "h", "=", "layer", "(", "self", ".", "g", ",", "h", ")", "\n", "", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.scripts.dgl_test.evaluate": [[51, 60], ["model.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "len", "torch.sum.item"], "function", ["None"], ["", "", "def", "evaluate", "(", "model", ",", "features", ",", "labels", ",", "mask", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "logits", "=", "model", "(", "features", ")", "\n", "logits", "=", "logits", "[", "mask", "]", "\n", "labels", "=", "labels", "[", "mask", "]", "\n", "_", ",", "indices", "=", "torch", ".", "max", "(", "logits", ",", "dim", "=", "1", ")", "\n", "correct", "=", "torch", ".", "sum", "(", "indices", "==", "labels", ")", "\n", "return", "correct", ".", "item", "(", ")", "*", "1.0", "/", "len", "(", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.scripts.dgl_test.main": [[61, 150], ["dgl.data.citation_graph.CoraDataset", "dgl_test..ndata[].type", "dgl_test..ndata[].type", "dgl_test..ndata[].type", "dgl.data.citation_graph.CoraDataset.graph.number_of_edges", "print", "dgl_test..number_of_edges", "dgl_test..in_degrees().float", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "norm.cuda.unsqueeze", "dgl_test.GCN", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "range", "print", "dgl_test.evaluate", "print", "dgl_test..int().to", "dgl.remove_self_loop", "dgl.add_self_loop", "norm.cuda.cuda", "GCN.cuda", "GCN.parameters", "GCN.train", "GCN.", "torch.nn.CrossEntropyLoss.", "torch.optim.Adam.zero_grad", "loss_fcn.backward", "torch.optim.Adam.step", "dgl_test.evaluate", "print", "dgl_test..in_degrees", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "time.time", "dur.append", "dgl_test..int", "g.ndata[].type.int().sum().item", "g.ndata[].type.int().sum().item", "g.ndata[].type.int().sum().item", "numpy.mean", "loss_fcn.item", "time.time", "g.ndata[].type.int().sum", "g.ndata[].type.int().sum", "g.ndata[].type.int().sum", "numpy.mean", "g.ndata[].type.int", "g.ndata[].type.int", "g.ndata[].type.int"], "function", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.scripts.dgl_test.evaluate", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.scripts.pyg_test.train", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.NoamOpt.zero_grad", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.NoamOpt.step", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.scripts.dgl_test.evaluate"], ["", "", "def", "main", "(", "args", ")", ":", "\n", "# load and preprocess dataset", "\n", "    ", "data", "=", "CoraDataset", "(", ")", "\n", "# data = CiteseerGraphDataset()", "\n", "# data = PubmedGraphDataset()", "\n", "\n", "g", "=", "data", "[", "0", "]", "\n", "if", "args", ".", "gpu", "<", "0", ":", "\n", "        ", "cuda", "=", "False", "\n", "", "else", ":", "\n", "        ", "cuda", "=", "True", "\n", "g", "=", "g", ".", "int", "(", ")", ".", "to", "(", "args", ".", "gpu", ")", "\n", "\n", "", "features", "=", "g", ".", "ndata", "[", "'feat'", "]", "\n", "labels", "=", "g", ".", "ndata", "[", "'label'", "]", "\n", "train_mask", "=", "g", ".", "ndata", "[", "'train_mask'", "]", ".", "type", "(", "torch", ".", "LongTensor", ")", "\n", "val_mask", "=", "g", ".", "ndata", "[", "'val_mask'", "]", ".", "type", "(", "torch", ".", "LongTensor", ")", "\n", "test_mask", "=", "g", ".", "ndata", "[", "'test_mask'", "]", ".", "type", "(", "torch", ".", "LongTensor", ")", "\n", "in_feats", "=", "features", ".", "shape", "[", "1", "]", "\n", "n_classes", "=", "data", ".", "num_labels", "\n", "n_edges", "=", "data", ".", "graph", ".", "number_of_edges", "(", ")", "\n", "print", "(", "\"\"\"----Data statistics------'\n      #Edges %d\n      #Classes %d\n      #Train samples %d\n      #Val samples %d\n      #Test samples %d\"\"\"", "%", "\n", "(", "n_edges", ",", "n_classes", ",", "\n", "train_mask", ".", "int", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "\n", "val_mask", ".", "int", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "\n", "test_mask", ".", "int", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", ")", ")", "\n", "\n", "# add self loop", "\n", "if", "args", ".", "self_loop", ":", "\n", "        ", "g", "=", "dgl", ".", "remove_self_loop", "(", "g", ")", "\n", "g", "=", "dgl", ".", "add_self_loop", "(", "g", ")", "\n", "", "n_edges", "=", "g", ".", "number_of_edges", "(", ")", "\n", "\n", "# normalization", "\n", "degs", "=", "g", ".", "in_degrees", "(", ")", ".", "float", "(", ")", "\n", "norm", "=", "torch", ".", "pow", "(", "degs", ",", "-", "0.5", ")", "\n", "norm", "[", "torch", ".", "isinf", "(", "norm", ")", "]", "=", "0", "\n", "if", "cuda", ":", "\n", "        ", "norm", "=", "norm", ".", "cuda", "(", ")", "\n", "", "g", ".", "ndata", "[", "'norm'", "]", "=", "norm", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "# create GCN model", "\n", "model", "=", "GCN", "(", "g", ",", "\n", "in_feats", ",", "\n", "args", ".", "n_hidden", ",", "\n", "n_classes", ",", "\n", "args", ".", "n_layers", ",", "\n", "F", ".", "relu", ",", "\n", "args", ".", "dropout", ")", "\n", "\n", "if", "cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "", "loss_fcn", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "# use optimizer", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "# initialize graph", "\n", "dur", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "args", ".", "n_epochs", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "if", "epoch", ">=", "3", ":", "\n", "            ", "t0", "=", "time", ".", "time", "(", ")", "\n", "# forward", "\n", "", "logits", "=", "model", "(", "features", ")", "\n", "loss", "=", "loss_fcn", "(", "logits", "[", "train_mask", "]", ",", "labels", "[", "train_mask", "]", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "epoch", ">=", "3", ":", "\n", "            ", "dur", ".", "append", "(", "time", ".", "time", "(", ")", "-", "t0", ")", "\n", "\n", "", "acc", "=", "evaluate", "(", "model", ",", "features", ",", "labels", ",", "val_mask", ")", "\n", "print", "(", "\"Epoch {:05d} | Time(s) {:.4f} | Loss {:.4f} | Accuracy {:.4f} | \"", "\n", "\"ETputs(KTEPS) {:.2f}\"", ".", "format", "(", "epoch", ",", "np", ".", "mean", "(", "dur", ")", ",", "loss", ".", "item", "(", ")", ",", "\n", "acc", ",", "n_edges", "/", "np", ".", "mean", "(", "dur", ")", "/", "1000", ")", ")", "\n", "\n", "", "print", "(", ")", "\n", "acc", "=", "evaluate", "(", "model", ",", "features", ",", "labels", ",", "test_mask", ")", "\n", "print", "(", "\"Test accuracy {:.2%}\"", ".", "format", "(", "acc", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.scripts.pyg_test.Net.__init__": [[16, 22], ["super().__init__", "torch_geometric.nn.GATConv", "torch_geometric.nn.GATConv"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.comparative.Comparative.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "GATConv", "(", "dataset", ".", "num_features", ",", "8", ",", "heads", "=", "8", ",", "dropout", "=", "0.6", ")", "\n", "# On the Pubmed dataset, use heads=8 in conv2.", "\n", "self", ".", "conv2", "=", "GATConv", "(", "8", "*", "8", ",", "dataset", ".", "num_classes", ",", "heads", "=", "1", ",", "concat", "=", "False", ",", "\n", "dropout", "=", "0.6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.scripts.pyg_test.Net.forward": [[23, 29], ["torch.dropout", "torch.dropout", "torch.elu", "torch.elu", "torch.dropout", "torch.dropout", "pyg_test.Net.conv2", "torch.log_softmax", "torch.log_softmax", "pyg_test.Net.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "x", "=", "F", ".", "dropout", "(", "data", ".", "x", ",", "p", "=", "0.6", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "F", ".", "elu", "(", "self", ".", "conv1", "(", "x", ",", "data", ".", "edge_index", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "0.6", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ",", "data", ".", "edge_index", ")", "\n", "return", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.scripts.pyg_test.train": [[36, 41], ["model.train", "optimizer.zero_grad", "torch.nll_loss().backward", "optimizer.step", "torch.nll_loss", "model"], "function", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.scripts.pyg_test.train", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.NoamOpt.zero_grad", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.NoamOpt.step"], ["def", "train", "(", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "F", ".", "nll_loss", "(", "model", "(", ")", "[", "data", ".", "train_mask", "]", ",", "data", ".", "y", "[", "data", ".", "train_mask", "]", ")", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.scripts.pyg_test.test": [[43, 51], ["model.eval", "data", "model", "accs.append", "logits[].max", "pred.eq().sum().item", "mask.sum().item", "pred.eq().sum", "mask.sum", "pred.eq"], "function", ["None"], ["", "def", "test", "(", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "logits", ",", "accs", "=", "model", "(", ")", ",", "[", "]", "\n", "for", "_", ",", "mask", "in", "data", "(", "'train_mask'", ",", "'val_mask'", ",", "'test_mask'", ")", ":", "\n", "        ", "pred", "=", "logits", "[", "mask", "]", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "acc", "=", "pred", ".", "eq", "(", "data", ".", "y", "[", "mask", "]", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "accs", ".", "append", "(", "acc", ")", "\n", "", "return", "accs", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.scripts.graph_test.GraphModel.__init__": [[11, 16], ["torch.Module.__init__", "torch_geometric.nn.GATConv", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.comparative.Comparative.__init__", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Linear", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.None.utils.Linear"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "GraphModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "GATConv", "(", "300", ",", "300", ",", "heads", "=", "2", ",", "concat", "=", "False", ",", "dropout", "=", "0.6", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "300", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.scripts.graph_test.GraphModel.forward": [[17, 22], ["graph_test.GraphModel.conv1", "graph_test.GraphModel.relu", "graph_test.GraphModel.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "data", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "data", ".", "x", ",", "data", ".", "edge_index", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "linear", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.scripts.prepare_data.create_entity_type": [[11, 29], ["tqdm.tqdm", "json.dump", "type_ents.keys", "open", "ent_type[].append", "str"], "function", ["None"], ["def", "create_entity_type", "(", "type_ents", ",", "wiki_path", ")", ":", "\n", "    ", "'''\n    Build a dictionary\n    key: ids of entity\n    values: ids of type\n    '''", "\n", "ent_type", "=", "{", "}", "\n", "\n", "for", "t", "in", "tqdm", "(", "type_ents", ".", "keys", "(", ")", ")", ":", "\n", "        ", "for", "e", "in", "type_ents", "[", "t", "]", ":", "\n", "            ", "if", "e", "in", "ent_type", ":", "\n", "                ", "ent_type", "[", "e", "]", ".", "append", "(", "t", ")", "\n", "", "else", ":", "\n", "                ", "ent_type", "[", "e", "]", "=", "[", "t", "]", "\n", "\n", "", "", "", "json", ".", "dump", "(", "ent_type", ",", "open", "(", "str", "(", "ROOT_PATH", ".", "parent", ")", "+", "f'/{wiki_path}/entity_type.json'", ",", "'w'", ")", ")", "\n", "\n", "return", "ent_type", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.scripts.prepare_data.create_pred_sub_ob": [[30, 43], ["tqdm.tqdm", "json.dump", "triples[].keys", "open", "[].append", "str"], "function", ["None"], ["", "def", "create_pred_sub_ob", "(", "triples", ",", "wiki_path", ")", ":", "\n", "    ", "pred_sub_ob", "=", "{", "}", "\n", "\n", "for", "e", "in", "tqdm", "(", "triples", ")", ":", "\n", "        ", "for", "p", "in", "triples", "[", "e", "]", ".", "keys", "(", ")", ":", "\n", "            ", "if", "p", "not", "in", "pred_sub_ob", ":", "\n", "                ", "pred_sub_ob", "[", "p", "]", "=", "{", "}", "\n", "\n", "", "pred_sub_ob", "[", "p", "]", "[", "e", "]", "=", "[", "]", "\n", "for", "o", "in", "triples", "[", "e", "]", "[", "p", "]", ":", "\n", "                ", "pred_sub_ob", "[", "p", "]", "[", "e", "]", ".", "append", "(", "o", ")", "\n", "\n", "", "", "", "json", ".", "dump", "(", "pred_sub_ob", ",", "open", "(", "str", "(", "ROOT_PATH", ".", "parent", ")", "+", "f'/{wiki_path}/relation_subject_object.json'", ",", "'w'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.scripts.prepare_data.create_pred_ob_sub": [[45, 58], ["tqdm.tqdm", "json.dump", "object_invTriples[].keys", "open", "[].append", "str"], "function", ["None"], ["", "def", "create_pred_ob_sub", "(", "object_invTriples", ",", "wiki_path", ")", ":", "\n", "    ", "pred_ob_sub", "=", "{", "}", "\n", "\n", "for", "e", "in", "tqdm", "(", "object_invTriples", ")", ":", "\n", "        ", "for", "p", "in", "object_invTriples", "[", "e", "]", ".", "keys", "(", ")", ":", "\n", "            ", "if", "p", "not", "in", "pred_ob_sub", ":", "\n", "                ", "pred_ob_sub", "[", "p", "]", "=", "{", "}", "\n", "\n", "", "pred_ob_sub", "[", "p", "]", "[", "e", "]", "=", "[", "]", "\n", "for", "s", "in", "object_invTriples", "[", "e", "]", "[", "p", "]", ":", "\n", "                ", "pred_ob_sub", "[", "p", "]", "[", "e", "]", ".", "append", "(", "s", ")", "\n", "\n", "", "", "", "json", ".", "dump", "(", "pred_ob_sub", ",", "open", "(", "str", "(", "ROOT_PATH", ".", "parent", ")", "+", "f'/{wiki_path}/relation_object_subject.json'", ",", "'w'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_executor.actions.ActionOperator.__init__": [[2, 4], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "kg", ")", ":", "\n", "        ", "self", ".", "kg", "=", "kg", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_executor.actions.ActionOperator.find": [[5, 16], ["isinstance", "set", "actions.ActionOperator.find_set", "set"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.actions.ActionOperator.find_set"], ["", "def", "find", "(", "self", ",", "e", ",", "p", ")", ":", "\n", "        ", "if", "isinstance", "(", "e", ",", "list", ")", ":", "\n", "            ", "return", "self", ".", "find_set", "(", "e", ",", "p", ")", "\n", "\n", "", "if", "e", "is", "None", "or", "p", "is", "None", ":", "\n", "            ", "return", "None", "\n", "\n", "", "if", "e", "not", "in", "self", ".", "kg", ".", "triples", "[", "'subject'", "]", "or", "p", "not", "in", "self", ".", "kg", ".", "triples", "[", "'subject'", "]", "[", "e", "]", ":", "\n", "            ", "return", "set", "(", ")", "\n", "\n", "", "return", "set", "(", "self", ".", "kg", ".", "triples", "[", "'subject'", "]", "[", "e", "]", "[", "p", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_executor.actions.ActionOperator.find_reverse": [[17, 28], ["isinstance", "set", "actions.ActionOperator.find_reverse_set", "set"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.actions.ActionOperator.find_reverse_set"], ["", "def", "find_reverse", "(", "self", ",", "e", ",", "p", ")", ":", "\n", "        ", "if", "isinstance", "(", "e", ",", "list", ")", ":", "\n", "            ", "return", "self", ".", "find_reverse_set", "(", "e", ",", "p", ")", "\n", "\n", "", "if", "e", "is", "None", "or", "p", "is", "None", ":", "\n", "            ", "return", "None", "\n", "\n", "", "if", "e", "not", "in", "self", ".", "kg", ".", "triples", "[", "'object'", "]", "or", "p", "not", "in", "self", ".", "kg", ".", "triples", "[", "'object'", "]", "[", "e", "]", ":", "\n", "            ", "return", "set", "(", ")", "\n", "\n", "", "return", "set", "(", "self", ".", "kg", ".", "triples", "[", "'object'", "]", "[", "e", "]", "[", "p", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_executor.actions.ActionOperator.find_set": [[29, 35], ["set", "set.update", "actions.ActionOperator.find"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_executor.meters.F1scoreMeter.update", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.actions.ActionOperator.find"], ["", "def", "find_set", "(", "self", ",", "e_set", ",", "p", ")", ":", "\n", "        ", "result_set", "=", "set", "(", ")", "\n", "for", "e", "in", "e_set", ":", "\n", "            ", "result_set", ".", "update", "(", "self", ".", "find", "(", "e", ",", "p", ")", ")", "\n", "\n", "", "return", "result_set", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_executor.actions.ActionOperator.find_reverse_set": [[36, 42], ["set", "set.update", "actions.ActionOperator.find_reverse"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_executor.meters.F1scoreMeter.update", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.actions.ActionOperator.find_reverse"], ["", "def", "find_reverse_set", "(", "self", ",", "e_set", ",", "p", ")", ":", "\n", "        ", "result_set", "=", "set", "(", ")", "\n", "for", "e", "in", "e_set", ":", "\n", "            ", "result_set", ".", "update", "(", "self", ".", "find_reverse", "(", "e", ",", "p", ")", ")", "\n", "\n", "", "return", "result_set", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_executor.actions.ActionOperator.filter_type": [[43, 54], ["set", "type", "set.add"], "methods", ["None"], ["", "def", "filter_type", "(", "self", ",", "ent_set", ",", "typ", ")", ":", "\n", "        ", "if", "type", "(", "ent_set", ")", "is", "not", "set", "or", "typ", "is", "None", ":", "\n", "            ", "return", "None", "\n", "\n", "", "result", "=", "set", "(", ")", "\n", "\n", "for", "o", "in", "ent_set", ":", "\n", "            ", "if", "(", "o", "in", "self", ".", "kg", ".", "entity_type", "and", "typ", "in", "self", ".", "kg", ".", "entity_type", "[", "o", "]", ")", ":", "\n", "                ", "result", ".", "add", "(", "o", ")", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_executor.actions.ActionOperator.filter_multi_types": [[55, 67], ["set", "type", "type", "set.add", "len", "typ_set.intersection", "set"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.actions.ActionOperator.intersection"], ["", "def", "filter_multi_types", "(", "self", ",", "ent_set", ",", "t1", ",", "t2", ")", ":", "\n", "        ", "typ_set", "=", "{", "t1", ",", "t2", "}", "\n", "if", "type", "(", "ent_set", ")", "is", "not", "set", "or", "type", "(", "typ_set", ")", "is", "not", "set", ":", "\n", "            ", "return", "None", "\n", "\n", "", "result", "=", "set", "(", ")", "\n", "\n", "for", "o", "in", "ent_set", ":", "\n", "            ", "if", "(", "o", "in", "self", ".", "kg", ".", "entity_type", "and", "len", "(", "typ_set", ".", "intersection", "(", "set", "(", "self", ".", "kg", ".", "entity_type", "[", "o", "]", ")", ")", ")", ">", "0", ")", ":", "\n", "                ", "result", ".", "add", "(", "o", ")", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_executor.actions.ActionOperator.find_tuple_counts": [[68, 84], ["dict"], "methods", ["None"], ["", "def", "find_tuple_counts", "(", "self", ",", "r", ",", "t1", ",", "t2", ")", ":", "\n", "        ", "if", "r", "is", "None", "or", "t1", "is", "None", "or", "t2", "is", "None", ":", "\n", "            ", "return", "None", "\n", "\n", "", "tuple_count", "=", "dict", "(", ")", "\n", "\n", "for", "s", "in", "self", ".", "kg", ".", "triples", "[", "'relation'", "]", "[", "'subject'", "]", "[", "r", "]", ":", "\n", "            ", "if", "(", "s", "in", "self", ".", "kg", ".", "entity_type", "and", "t1", "in", "self", ".", "kg", ".", "entity_type", "[", "s", "]", ")", ":", "\n", "                ", "count", "=", "0", "\n", "for", "o", "in", "self", ".", "kg", ".", "triples", "[", "'relation'", "]", "[", "'subject'", "]", "[", "r", "]", "[", "s", "]", ":", "\n", "                    ", "if", "(", "o", "in", "self", ".", "kg", ".", "entity_type", "and", "t2", "in", "self", ".", "kg", ".", "entity_type", "[", "o", "]", ")", ":", "\n", "                        ", "count", "+=", "1", "\n", "\n", "", "", "tuple_count", "[", "s", "]", "=", "count", "\n", "\n", "", "", "return", "tuple_count", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_executor.actions.ActionOperator.find_reverse_tuple_counts": [[85, 101], ["dict"], "methods", ["None"], ["", "def", "find_reverse_tuple_counts", "(", "self", ",", "r", ",", "t1", ",", "t2", ")", ":", "\n", "        ", "if", "r", "is", "None", "or", "t1", "is", "None", "or", "t2", "is", "None", ":", "\n", "            ", "return", "None", "\n", "\n", "", "tuple_count", "=", "dict", "(", ")", "\n", "\n", "for", "o", "in", "self", ".", "kg", ".", "triples", "[", "'relation'", "]", "[", "'object'", "]", "[", "r", "]", ":", "\n", "            ", "if", "(", "o", "in", "self", ".", "kg", ".", "entity_type", "and", "t1", "in", "self", ".", "kg", ".", "entity_type", "[", "o", "]", ")", ":", "\n", "                ", "count", "=", "0", "\n", "for", "s", "in", "self", ".", "kg", ".", "triples", "[", "'relation'", "]", "[", "'object'", "]", "[", "r", "]", "[", "o", "]", ":", "\n", "                    ", "if", "(", "s", "in", "self", ".", "kg", ".", "entity_type", "and", "t2", "in", "self", ".", "kg", ".", "entity_type", "[", "s", "]", ")", ":", "\n", "                        ", "count", "+=", "1", "\n", "\n", "", "", "tuple_count", "[", "o", "]", "=", "count", "\n", "\n", "", "", "return", "tuple_count", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_executor.actions.ActionOperator.greater": [[102, 104], ["set", "type_dict.items"], "methods", ["None"], ["", "def", "greater", "(", "self", ",", "type_dict", ",", "value", ")", ":", "\n", "        ", "return", "set", "(", "[", "k", "for", "k", ",", "v", "in", "type_dict", ".", "items", "(", ")", "if", "v", ">", "value", "and", "v", ">=", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_executor.actions.ActionOperator.less": [[105, 107], ["set", "type_dict.items"], "methods", ["None"], ["", "def", "less", "(", "self", ",", "type_dict", ",", "value", ")", ":", "\n", "        ", "return", "set", "(", "[", "k", "for", "k", ",", "v", "in", "type_dict", ".", "items", "(", ")", "if", "v", "<", "value", "and", "v", ">=", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_executor.actions.ActionOperator.equal": [[108, 110], ["set", "type_dict.items"], "methods", ["None"], ["", "def", "equal", "(", "self", ",", "type_dict", ",", "value", ")", ":", "\n", "        ", "return", "set", "(", "[", "k", "for", "k", ",", "v", "in", "type_dict", ".", "items", "(", ")", "if", "v", "==", "value", "and", "v", ">=", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_executor.actions.ActionOperator.approx": [[111, 115], ["set", "type_dict.items"], "methods", ["None"], ["", "def", "approx", "(", "self", ",", "type_dict", ",", "value", ",", "interval", "=", "15", ")", ":", "\n", "# ambiguous action", "\n", "# simply check for more than 0", "\n", "        ", "return", "set", "(", "[", "k", "for", "k", ",", "v", "in", "type_dict", ".", "items", "(", ")", "if", "v", ">", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_executor.actions.ActionOperator.atmost": [[116, 118], ["set", "type_dict.items"], "methods", ["None"], ["", "def", "atmost", "(", "self", ",", "type_dict", ",", "max_value", ")", ":", "\n", "        ", "return", "set", "(", "[", "k", "for", "k", ",", "v", "in", "type_dict", ".", "items", "(", ")", "if", "v", "<=", "max_value", "and", "v", ">=", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_executor.actions.ActionOperator.atleast": [[119, 121], ["set", "type_dict.items"], "methods", ["None"], ["", "def", "atleast", "(", "self", ",", "type_dict", ",", "min_value", ")", ":", "\n", "        ", "return", "set", "(", "[", "k", "for", "k", ",", "v", "in", "type_dict", ".", "items", "(", ")", "if", "v", ">=", "min_value", "and", "v", ">=", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_executor.actions.ActionOperator.argmin": [[122, 125], ["min", "set", "type_dict.values", "type_dict.items"], "methods", ["None"], ["", "def", "argmin", "(", "self", ",", "type_dict", ",", "value", "=", "0", ")", ":", "\n", "        ", "min_value", "=", "min", "(", "type_dict", ".", "values", "(", ")", ")", "\n", "return", "set", "(", "[", "k", "for", "k", ",", "v", "in", "type_dict", ".", "items", "(", ")", "if", "v", "==", "min_value", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_executor.actions.ActionOperator.argmax": [[126, 129], ["max", "set", "type_dict.values", "type_dict.items"], "methods", ["None"], ["", "def", "argmax", "(", "self", ",", "type_dict", ",", "value", "=", "0", ")", ":", "\n", "        ", "max_value", "=", "max", "(", "type_dict", ".", "values", "(", ")", ")", "\n", "return", "set", "(", "[", "k", "for", "k", ",", "v", "in", "type_dict", ".", "items", "(", ")", "if", "v", "==", "max_value", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_executor.actions.ActionOperator.is_in": [[130, 132], ["set().issubset", "set"], "methods", ["None"], ["", "def", "is_in", "(", "self", ",", "ent", ",", "set_ent", ")", ":", "\n", "        ", "return", "set", "(", "ent", ")", ".", "issubset", "(", "set_ent", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_executor.actions.ActionOperator.count": [[133, 135], ["len"], "methods", ["None"], ["", "def", "count", "(", "self", ",", "in_set", ")", ":", "\n", "        ", "return", "len", "(", "in_set", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_executor.actions.ActionOperator.union": [[136, 141], ["all", "args[].union", "isinstance", "args[].get", "args[].get", "set", "set"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.actions.ActionOperator.union"], ["", "def", "union", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "if", "all", "(", "isinstance", "(", "x", ",", "set", ")", "for", "x", "in", "args", ")", ":", "\n", "            ", "return", "args", "[", "0", "]", ".", "union", "(", "*", "args", ")", "\n", "", "else", ":", "\n", "            ", "return", "{", "k", ":", "args", "[", "0", "]", ".", "get", "(", "k", ",", "0", ")", "+", "args", "[", "1", "]", ".", "get", "(", "k", ",", "0", ")", "for", "k", "in", "set", "(", "args", "[", "0", "]", ")", "|", "set", "(", "args", "[", "1", "]", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_executor.actions.ActionOperator.intersection": [[142, 144], ["s1.intersection"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.actions.ActionOperator.intersection"], ["", "", "def", "intersection", "(", "self", ",", "s1", ",", "s2", ")", ":", "\n", "        ", "return", "s1", ".", "intersection", "(", "s2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_executor.actions.ActionOperator.difference": [[145, 147], ["s1.difference"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.actions.ActionOperator.difference"], ["", "def", "difference", "(", "self", ",", "s1", ",", "s2", ")", ":", "\n", "        ", "return", "s1", ".", "difference", "(", "s2", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_executor.meters.AccuracyMeter.__init__": [[3, 5], ["meters.AccuracyMeter.reset"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_executor.meters.F1scoreMeter.reset"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_executor.meters.AccuracyMeter.reset": [[6, 10], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "correct", "=", "0", "\n", "self", ".", "wrong", "=", "0", "\n", "self", ".", "accuracy", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_executor.meters.AccuracyMeter.update": [[11, 18], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "gold", ",", "result", ")", ":", "\n", "        ", "if", "gold", "==", "result", ":", "\n", "            ", "self", ".", "correct", "+=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "wrong", "+=", "1", "\n", "\n", "", "self", ".", "accuracy", "=", "self", ".", "correct", "/", "(", "self", ".", "correct", "+", "self", ".", "wrong", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_executor.meters.F1scoreMeter.__init__": [[20, 22], ["meters.F1scoreMeter.reset"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_executor.meters.F1scoreMeter.reset"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_executor.meters.F1scoreMeter.reset": [[23, 30], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "tp", "=", "0", "\n", "self", ".", "fp", "=", "0", "\n", "self", ".", "fn", "=", "0", "\n", "self", ".", "precision", "=", "0", "\n", "self", ".", "recall", "=", "0", "\n", "self", ".", "f1_score", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_executor.meters.F1scoreMeter.update": [[31, 41], ["len", "len", "len", "result.intersection", "result.difference", "gold.difference"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.actions.ActionOperator.intersection", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.actions.ActionOperator.difference", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.actions.ActionOperator.difference"], ["", "def", "update", "(", "self", ",", "gold", ",", "result", ")", ":", "\n", "        ", "self", ".", "tp", "+=", "len", "(", "result", ".", "intersection", "(", "gold", ")", ")", "\n", "self", ".", "fp", "+=", "len", "(", "result", ".", "difference", "(", "gold", ")", ")", "\n", "self", ".", "fn", "+=", "len", "(", "gold", ".", "difference", "(", "result", ")", ")", "\n", "if", "self", ".", "tp", ">", "0", "or", "self", ".", "fp", ">", "0", ":", "\n", "            ", "self", ".", "precision", "=", "self", ".", "tp", "/", "(", "self", ".", "tp", "+", "self", ".", "fp", ")", "\n", "", "if", "self", ".", "tp", ">", "0", "or", "self", ".", "fn", ">", "0", ":", "\n", "            ", "self", ".", "recall", "=", "self", ".", "tp", "/", "(", "self", ".", "tp", "+", "self", ".", "fn", ")", "\n", "", "if", "self", ".", "precision", ">", "0", "or", "self", ".", "recall", ">", "0", ":", "\n", "            ", "self", ".", "f1_score", "=", "2", "*", "self", ".", "precision", "*", "self", ".", "recall", "/", "(", "self", ".", "precision", "+", "self", ".", "recall", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_executor.executor.ActionExecutor.__init__": [[9, 11], ["actions.ActionOperator"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "kg", ")", ":", "\n", "        ", "self", ".", "operator", "=", "ActionOperator", "(", "kg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_executor.executor.ActionExecutor._parse_actions": [[12, 43], ["collections.OrderedDict", "enumerate", "reversed", "actions_to_execute[].append", "reversed", "list", "int", "str", "str", "str", "collections.OrderedDict.keys", "action[].isnumeric", "list", "actions_to_execute[].append", "len", "actions_to_execute[].append", "actions_to_execute[].append", "actions_to_execute[].append", "collections.OrderedDict.keys", "len", "str", "int", "len", "str", "str", "str", "str", "str", "str", "str"], "methods", ["None"], ["", "def", "_parse_actions", "(", "self", ",", "actions", ")", ":", "\n", "        ", "actions_to_execute", "=", "OrderedDict", "(", ")", "\n", "for", "i", ",", "action", "in", "enumerate", "(", "actions", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "actions_to_execute", "[", "str", "(", "i", ")", "]", "=", "[", "action", "[", "1", "]", "]", "\n", "continue", "\n", "\n", "", "if", "action", "[", "0", "]", "==", "'action'", ":", "\n", "                ", "actions_to_execute", "[", "str", "(", "i", ")", "]", "=", "[", "action", "[", "1", "]", "]", "\n", "if", "actions", "[", "i", "-", "1", "]", "[", "0", "]", "==", "'action'", ":", "\n", "# child of previous action", "\n", "                    ", "actions_to_execute", "[", "str", "(", "i", "-", "1", ")", "]", ".", "append", "(", "str", "(", "i", ")", ")", "\n", "", "else", ":", "\n", "                    ", "for", "k", "in", "reversed", "(", "list", "(", "actions_to_execute", ".", "keys", "(", ")", ")", "[", ":", "-", "1", "]", ")", ":", "\n", "                        ", "if", "(", "len", "(", "actions_to_execute", "[", "k", "]", ")", "-", "1", ")", "<", "action_input_size_constrain", "[", "actions_to_execute", "[", "k", "]", "[", "0", "]", "]", ":", "\n", "                            ", "actions_to_execute", "[", "str", "(", "k", ")", "]", ".", "append", "(", "str", "(", "i", ")", ")", "\n", "break", "\n", "", "", "", "", "else", ":", "\n", "                ", "for", "j", "in", "reversed", "(", "list", "(", "actions_to_execute", ".", "keys", "(", ")", ")", ")", ":", "\n", "                    ", "j", "=", "int", "(", "j", ")", "\n", "if", "actions", "[", "j", "]", "[", "0", "]", "==", "'action'", "and", "len", "(", "actions_to_execute", "[", "str", "(", "j", ")", "]", ")", "<", "action_input_size_constrain", "[", "actions", "[", "j", "]", "[", "1", "]", "]", "+", "1", ":", "\n", "# child of previous action", "\n", "                        ", "if", "action", "[", "1", "]", ".", "isnumeric", "(", ")", ":", "\n", "                            ", "actions_to_execute", "[", "str", "(", "j", ")", "]", ".", "append", "(", "int", "(", "action", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                            ", "actions_to_execute", "[", "str", "(", "j", ")", "]", ".", "append", "(", "action", "[", "1", "]", ")", "\n", "", "break", "\n", "", "elif", "actions", "[", "j", "]", "[", "0", "]", "!=", "'action'", "and", "len", "(", "actions_to_execute", "[", "str", "(", "j", ")", "]", ")", "<", "action_input_size_constrain", "[", "actions", "[", "j", "]", "[", "1", "]", "]", "+", "1", ":", "\n", "                        ", "actions_to_execute", "[", "str", "(", "j", ")", "]", ".", "append", "(", "action", "[", "1", "]", ")", "\n", "\n", "", "", "", "", "return", "actions_to_execute", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_executor.executor.ActionExecutor._execute_actions": [[44, 80], ["collections.OrderedDict", "reversed", "next", "actions_to_execute.items", "new_value.copy", "reversed", "new_value.append", "collections.OrderedDict.values", "isinstance", "v.isnumeric", "new_value.append", "len", "getattr", "len", "list", "getattr", "len", "actions_to_execute.keys", "getattr", "len", "NotImplementedError", "getattr"], "methods", ["None"], ["", "def", "_execute_actions", "(", "self", ",", "actions_to_execute", ")", ":", "\n", "# execute actions on kg", "\n", "        ", "partial_results", "=", "OrderedDict", "(", ")", "\n", "for", "key", ",", "value", "in", "reversed", "(", "actions_to_execute", ".", "items", "(", ")", ")", ":", "\n", "            ", "if", "key", "==", "list", "(", "actions_to_execute", ".", "keys", "(", ")", ")", "[", "0", "]", "and", "value", "[", "0", "]", "==", "'count'", ":", "\n", "                ", "continue", "\n", "# create new values in case getting children results", "\n", "", "new_value", "=", "[", "]", "\n", "for", "v", "in", "value", ":", "\n", "                ", "if", "isinstance", "(", "v", ",", "str", ")", "and", "v", ".", "isnumeric", "(", ")", ":", "\n", "                    ", "new_value", ".", "append", "(", "partial_results", "[", "v", "]", ")", "\n", "continue", "\n", "", "new_value", ".", "append", "(", "v", ")", "\n", "\n", "", "value", "=", "new_value", ".", "copy", "(", ")", "\n", "\n", "# execute action", "\n", "action", "=", "value", "[", "0", "]", "\n", "if", "action", "==", "'union'", "and", "len", "(", "value", ")", ">=", "2", ":", "\n", "                ", "partial_results", "[", "key", "]", "=", "getattr", "(", "self", ".", "operator", ",", "action", ")", "(", "*", "value", "[", "1", ":", "]", ")", "\n", "", "elif", "len", "(", "value", ")", "==", "2", ":", "\n", "                ", "arg", "=", "value", "[", "1", "]", "\n", "partial_results", "[", "key", "]", "=", "getattr", "(", "self", ".", "operator", ",", "action", ")", "(", "arg", ")", "\n", "", "elif", "len", "(", "value", ")", "==", "3", ":", "\n", "                ", "arg_1", "=", "value", "[", "1", "]", "\n", "arg_2", "=", "value", "[", "2", "]", "\n", "partial_results", "[", "key", "]", "=", "getattr", "(", "self", ".", "operator", ",", "action", ")", "(", "arg_1", ",", "arg_2", ")", "\n", "", "elif", "len", "(", "value", ")", "==", "4", ":", "\n", "                ", "arg_1", "=", "value", "[", "1", "]", "\n", "arg_2", "=", "value", "[", "2", "]", "\n", "arg_3", "=", "value", "[", "3", "]", "\n", "partial_results", "[", "key", "]", "=", "getattr", "(", "self", ".", "operator", ",", "action", ")", "(", "arg_1", ",", "arg_2", ",", "arg_3", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'Not implemented for more than 3 inputs!'", ")", "\n", "\n", "", "", "return", "next", "(", "reversed", "(", "partial_results", ".", "values", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_executor.executor.ActionExecutor.__call__": [[82, 94], ["executor.ActionExecutor._parse_actions", "executor.ActionExecutor.items", "executor.ActionExecutor._execute_actions", "[].startswith"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_executor.executor.ActionExecutor._parse_actions", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_executor.executor.ActionExecutor._execute_actions"], ["", "def", "__call__", "(", "self", ",", "actions", ",", "prev_results", ",", "question_type", ")", ":", "\n", "        ", "if", "question_type", "in", "[", "'Logical Reasoning (All)'", ",", "'Quantitative Reasoning (All)'", ",", "'Comparative Reasoning (All)'", ",", "'Clarification'", ",", "'Quantitative Reasoning (Count) (All)'", ",", "'Comparative Reasoning (Count) (All)'", "]", ":", "\n", "            ", "action_input_size_constrain", "[", "'union'", "]", "=", "2", "\n", "# parse actions", "\n", "", "actions_to_execute", "=", "self", ".", "_parse_actions", "(", "actions", ")", "\n", "for", "key", ",", "value", "in", "actions_to_execute", ".", "items", "(", ")", ":", "\n", "            ", "if", "actions_to_execute", "[", "key", "]", "[", "1", "]", "==", "'prev_answer'", ":", "\n", "                ", "actions_to_execute", "[", "key", "]", "[", "1", "]", "=", "prev_results", "\n", "", "elif", "actions_to_execute", "[", "key", "]", "[", "0", "]", "==", "'is_in'", "and", "actions_to_execute", "[", "key", "]", "[", "1", "]", ".", "startswith", "(", "'Q'", ")", ":", "\n", "                ", "actions_to_execute", "[", "key", "]", "[", "1", "]", "=", "[", "actions_to_execute", "[", "key", "]", "[", "1", "]", "]", "\n", "# execute actions and return results", "\n", "", "", "return", "self", ".", "_execute_actions", "(", "actions_to_execute", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.annotate.ActionAnnotator.__init__": [[16, 25], ["action_annotators.actions.ActionOperator", "action_annotators.simple.Simple", "action_annotators.verification.Verification", "action_annotators.quantitative.Quantitative", "action_annotators.logical.Logical", "action_annotators.comparative.Comparative", "action_annotators.clarification.Clarification"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "kg", ")", ":", "\n", "# load operations and annotators", "\n", "        ", "self", ".", "operator", "=", "ActionOperator", "(", "kg", ")", "\n", "self", ".", "simple_annotator", "=", "Simple", "(", "self", ".", "operator", ")", "\n", "self", ".", "verification_annotator", "=", "Verification", "(", "self", ".", "operator", ")", "\n", "self", ".", "quantitative_annotator", "=", "Quantitative", "(", "self", ".", "operator", ")", "\n", "self", ".", "logical_annotator", "=", "Logical", "(", "self", ".", "operator", ")", "\n", "self", ".", "comparative_annotator", "=", "Comparative", "(", "self", ".", "operator", ")", "\n", "self", ".", "clarification_annotator", "=", "Clarification", "(", "self", ".", "simple_annotator", ",", "self", ".", "quantitative_annotator", ",", "self", ".", "comparative_annotator", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.annotate.ActionAnnotator.__call__": [[26, 79], ["range", "len", "new_conversation.append", "new_conversation.append", "annotate.ActionAnnotator.simple_annotator", "new_conversation.append", "new_conversation.append", "annotate.ActionAnnotator.verification_annotator", "annotate.ActionAnnotator.quantitative_annotator", "annotate.ActionAnnotator.logical_annotator", "annotate.ActionAnnotator.comparative_annotator", "annotate.ActionAnnotator.clarification_annotator", "Exception"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "conversation", ")", ":", "\n", "# process conversation", "\n", "        ", "prev_user", "=", "None", "\n", "prev_system", "=", "None", "\n", "new_conversation", "=", "[", "]", "\n", "\n", "is_clarification", "=", "False", "\n", "turns", "=", "len", "(", "conversation", ")", "//", "2", "\n", "\n", "for", "i", "in", "range", "(", "turns", ")", ":", "\n", "            ", "if", "is_clarification", ":", "\n", "                ", "is_clarification", "=", "False", "\n", "continue", "\n", "", "user", "=", "conversation", "[", "2", "*", "i", "]", "\n", "system", "=", "conversation", "[", "2", "*", "i", "+", "1", "]", "\n", "\n", "if", "user", "[", "'question-type'", "]", "in", "[", "'Simple Question (Direct)'", ",", "'Simple Question (Coreferenced)'", ",", "'Simple Question (Ellipsis)'", "]", ":", "\n", "                ", "user", ",", "system", "=", "self", ".", "simple_annotator", "(", "user", ",", "system", ")", "\n", "", "elif", "user", "[", "'question-type'", "]", "==", "'Verification (Boolean) (All)'", ":", "\n", "                ", "user", ",", "system", "=", "self", ".", "verification_annotator", "(", "user", ",", "system", ",", "prev_system", ")", "\n", "", "elif", "user", "[", "'question-type'", "]", "in", "[", "'Quantitative Reasoning (Count) (All)'", ",", "'Quantitative Reasoning (All)'", "]", ":", "\n", "                ", "user", ",", "system", "=", "self", ".", "quantitative_annotator", "(", "user", ",", "system", ")", "\n", "", "elif", "user", "[", "'question-type'", "]", "==", "'Logical Reasoning (All)'", ":", "\n", "                ", "user", ",", "system", "=", "self", ".", "logical_annotator", "(", "user", ",", "system", ")", "\n", "", "elif", "user", "[", "'question-type'", "]", "in", "[", "'Comparative Reasoning (Count) (All)'", ",", "'Comparative Reasoning (All)'", "]", ":", "\n", "                ", "user", ",", "system", "=", "self", ".", "comparative_annotator", "(", "user", ",", "system", ",", "prev_user", ",", "prev_system", ")", "\n", "", "elif", "user", "[", "'question-type'", "]", "==", "'Clarification'", ":", "\n", "                ", "is_clarification", "=", "True", "\n", "next_user", "=", "conversation", "[", "2", "*", "(", "i", "+", "1", ")", "]", "\n", "next_system", "=", "conversation", "[", "2", "*", "(", "i", "+", "1", ")", "+", "1", "]", "\n", "user", ",", "next_system", "=", "self", ".", "clarification_annotator", "(", "{", "\n", "'prev_user'", ":", "prev_user", ",", "\n", "'prev_system'", ":", "prev_system", ",", "\n", "'user'", ":", "user", ",", "\n", "'system'", ":", "system", ",", "\n", "'next_user'", ":", "next_user", ",", "\n", "'next_system'", ":", "next_system", "\n", "}", ")", "\n", "", "else", ":", "\n", "                ", "raise", "Exception", "(", "f'Unknown question type: {user}'", ")", "\n", "\n", "", "prev_user", "=", "user", "\n", "prev_system", "=", "system", "\n", "new_conversation", ".", "append", "(", "user", ")", "\n", "new_conversation", ".", "append", "(", "system", ")", "\n", "\n", "if", "is_clarification", ":", "\n", "                ", "prev_user", "=", "next_user", "\n", "prev_system", "=", "next_system", "\n", "new_conversation", ".", "append", "(", "next_user", ")", "\n", "new_conversation", ".", "append", "(", "next_system", ")", "\n", "\n", "", "", "return", "new_conversation", "", "", "", ""]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.actions.ActionOperator.__init__": [[2, 4], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "kg", ")", ":", "\n", "        ", "self", ".", "kg", "=", "kg", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.actions.ActionOperator.find": [[5, 16], ["isinstance", "set", "actions.ActionOperator.find_set", "set"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.actions.ActionOperator.find_set"], ["", "def", "find", "(", "self", ",", "e", ",", "p", ")", ":", "\n", "        ", "if", "isinstance", "(", "e", ",", "list", ")", ":", "\n", "            ", "return", "self", ".", "find_set", "(", "e", ",", "p", ")", "\n", "\n", "", "if", "e", "is", "None", "or", "p", "is", "None", ":", "\n", "            ", "return", "None", "\n", "\n", "", "if", "e", "not", "in", "self", ".", "kg", ".", "triples", "[", "'subject'", "]", "or", "p", "not", "in", "self", ".", "kg", ".", "triples", "[", "'subject'", "]", "[", "e", "]", ":", "\n", "            ", "return", "set", "(", ")", "\n", "\n", "", "return", "set", "(", "self", ".", "kg", ".", "triples", "[", "'subject'", "]", "[", "e", "]", "[", "p", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.actions.ActionOperator.find_set": [[17, 23], ["set", "set.update", "actions.ActionOperator.find"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_executor.meters.F1scoreMeter.update", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.actions.ActionOperator.find"], ["", "def", "find_reverse", "(", "self", ",", "e", ",", "p", ")", ":", "\n", "        ", "if", "isinstance", "(", "e", ",", "list", ")", ":", "\n", "            ", "return", "self", ".", "find_reverse_set", "(", "e", ",", "p", ")", "\n", "\n", "", "if", "e", "is", "None", "or", "p", "is", "None", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.actions.ActionOperator.find_reverse": [[24, 35], ["isinstance", "set", "actions.ActionOperator.find_reverse_set", "set"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.actions.ActionOperator.find_reverse_set"], ["", "if", "e", "not", "in", "self", ".", "kg", ".", "triples", "[", "'object'", "]", "or", "p", "not", "in", "self", ".", "kg", ".", "triples", "[", "'object'", "]", "[", "e", "]", ":", "\n", "            ", "return", "set", "(", ")", "\n", "\n", "", "return", "set", "(", "self", ".", "kg", ".", "triples", "[", "'object'", "]", "[", "e", "]", "[", "p", "]", ")", "\n", "\n", "", "def", "find_set", "(", "self", ",", "e_set", ",", "p", ")", ":", "\n", "        ", "result_set", "=", "set", "(", ")", "\n", "for", "e", "in", "e_set", ":", "\n", "            ", "result_set", ".", "update", "(", "self", ".", "find", "(", "e", ",", "p", ")", ")", "\n", "\n", "", "return", "result_set", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.actions.ActionOperator.find_reverse_set": [[36, 42], ["set", "set.update", "actions.ActionOperator.find_reverse"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_executor.meters.F1scoreMeter.update", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.actions.ActionOperator.find_reverse"], ["", "def", "find_reverse_set", "(", "self", ",", "e_set", ",", "p", ")", ":", "\n", "        ", "result_set", "=", "set", "(", ")", "\n", "for", "e", "in", "e_set", ":", "\n", "            ", "result_set", ".", "update", "(", "self", ".", "find_reverse", "(", "e", ",", "p", ")", ")", "\n", "\n", "", "return", "result_set", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.actions.ActionOperator.filter_type": [[43, 54], ["set", "type", "set.add"], "methods", ["None"], ["", "def", "filter_type", "(", "self", ",", "ent_set", ",", "typ", ")", ":", "\n", "        ", "if", "type", "(", "ent_set", ")", "is", "not", "set", "or", "typ", "is", "None", ":", "\n", "            ", "return", "None", "\n", "\n", "", "result", "=", "set", "(", ")", "\n", "\n", "for", "o", "in", "ent_set", ":", "\n", "            ", "if", "(", "o", "in", "self", ".", "kg", ".", "entity_type", "and", "typ", "in", "self", ".", "kg", ".", "entity_type", "[", "o", "]", ")", ":", "\n", "                ", "result", ".", "add", "(", "o", ")", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.actions.ActionOperator.filter_multi_types": [[55, 67], ["set", "type", "type", "set.add", "len", "typ_set.intersection", "set"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.actions.ActionOperator.intersection"], ["", "def", "filter_multi_types", "(", "self", ",", "ent_set", ",", "t1", ",", "t2", ")", ":", "\n", "        ", "typ_set", "=", "{", "t1", ",", "t2", "}", "\n", "if", "type", "(", "ent_set", ")", "is", "not", "set", "or", "type", "(", "typ_set", ")", "is", "not", "set", ":", "\n", "            ", "return", "None", "\n", "\n", "", "result", "=", "set", "(", ")", "\n", "\n", "for", "o", "in", "ent_set", ":", "\n", "            ", "if", "(", "o", "in", "self", ".", "kg", ".", "entity_type", "and", "len", "(", "typ_set", ".", "intersection", "(", "set", "(", "self", ".", "kg", ".", "entity_type", "[", "o", "]", ")", ")", ")", ">", "0", ")", ":", "\n", "                ", "result", ".", "add", "(", "o", ")", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.actions.ActionOperator.find_tuple_counts": [[68, 84], ["dict"], "methods", ["None"], ["", "def", "find_tuple_counts", "(", "self", ",", "r", ",", "t1", ",", "t2", ")", ":", "\n", "        ", "if", "r", "is", "None", "or", "t1", "is", "None", "or", "t2", "is", "None", ":", "\n", "            ", "return", "None", "\n", "\n", "", "tuple_count", "=", "dict", "(", ")", "\n", "\n", "for", "s", "in", "self", ".", "kg", ".", "triples", "[", "'relation'", "]", "[", "'subject'", "]", "[", "r", "]", ":", "\n", "            ", "if", "(", "s", "in", "self", ".", "kg", ".", "entity_type", "and", "t1", "in", "self", ".", "kg", ".", "entity_type", "[", "s", "]", ")", ":", "\n", "                ", "count", "=", "0", "\n", "for", "o", "in", "self", ".", "kg", ".", "triples", "[", "'relation'", "]", "[", "'subject'", "]", "[", "r", "]", "[", "s", "]", ":", "\n", "                    ", "if", "(", "o", "in", "self", ".", "kg", ".", "entity_type", "and", "t2", "in", "self", ".", "kg", ".", "entity_type", "[", "o", "]", ")", ":", "\n", "                        ", "count", "+=", "1", "\n", "\n", "", "", "tuple_count", "[", "s", "]", "=", "count", "\n", "\n", "", "", "return", "tuple_count", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.actions.ActionOperator.find_reverse_tuple_counts": [[85, 101], ["dict"], "methods", ["None"], ["", "def", "find_reverse_tuple_counts", "(", "self", ",", "r", ",", "t1", ",", "t2", ")", ":", "\n", "        ", "if", "r", "is", "None", "or", "t1", "is", "None", "or", "t2", "is", "None", ":", "\n", "            ", "return", "None", "\n", "\n", "", "tuple_count", "=", "dict", "(", ")", "\n", "\n", "for", "o", "in", "self", ".", "kg", ".", "triples", "[", "'relation'", "]", "[", "'object'", "]", "[", "r", "]", ":", "\n", "            ", "if", "(", "o", "in", "self", ".", "kg", ".", "entity_type", "and", "t1", "in", "self", ".", "kg", ".", "entity_type", "[", "o", "]", ")", ":", "\n", "                ", "count", "=", "0", "\n", "for", "s", "in", "self", ".", "kg", ".", "triples", "[", "'relation'", "]", "[", "'object'", "]", "[", "r", "]", "[", "o", "]", ":", "\n", "                    ", "if", "(", "s", "in", "self", ".", "kg", ".", "entity_type", "and", "t2", "in", "self", ".", "kg", ".", "entity_type", "[", "s", "]", ")", ":", "\n", "                        ", "count", "+=", "1", "\n", "\n", "", "", "tuple_count", "[", "o", "]", "=", "count", "\n", "\n", "", "", "return", "tuple_count", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.actions.ActionOperator.greater": [[102, 104], ["set", "type_dict.items"], "methods", ["None"], ["", "def", "greater", "(", "self", ",", "type_dict", ",", "value", ")", ":", "\n", "        ", "return", "set", "(", "[", "k", "for", "k", ",", "v", "in", "type_dict", ".", "items", "(", ")", "if", "v", ">", "value", "and", "v", ">=", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.actions.ActionOperator.less": [[105, 107], ["set", "type_dict.items"], "methods", ["None"], ["", "def", "less", "(", "self", ",", "type_dict", ",", "value", ")", ":", "\n", "        ", "return", "set", "(", "[", "k", "for", "k", ",", "v", "in", "type_dict", ".", "items", "(", ")", "if", "v", "<", "value", "and", "v", ">=", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.actions.ActionOperator.equal": [[108, 110], ["set", "type_dict.items"], "methods", ["None"], ["", "def", "equal", "(", "self", ",", "type_dict", ",", "value", ")", ":", "\n", "        ", "return", "set", "(", "[", "k", "for", "k", ",", "v", "in", "type_dict", ".", "items", "(", ")", "if", "v", "==", "value", "and", "v", ">=", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.actions.ActionOperator.approx": [[111, 115], ["set", "type_dict.items"], "methods", ["None"], ["", "def", "approx", "(", "self", ",", "type_dict", ",", "value", ",", "interval", "=", "15", ")", ":", "\n", "# ambiguous action", "\n", "# simply check for more than 0", "\n", "        ", "return", "set", "(", "[", "k", "for", "k", ",", "v", "in", "type_dict", ".", "items", "(", ")", "if", "v", ">", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.actions.ActionOperator.atmost": [[116, 118], ["set", "type_dict.items"], "methods", ["None"], ["", "def", "atmost", "(", "self", ",", "type_dict", ",", "max_value", ")", ":", "\n", "        ", "return", "set", "(", "[", "k", "for", "k", ",", "v", "in", "type_dict", ".", "items", "(", ")", "if", "v", "<=", "max_value", "and", "v", ">=", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.actions.ActionOperator.atleast": [[119, 121], ["set", "type_dict.items"], "methods", ["None"], ["", "def", "atleast", "(", "self", ",", "type_dict", ",", "min_value", ")", ":", "\n", "        ", "return", "set", "(", "[", "k", "for", "k", ",", "v", "in", "type_dict", ".", "items", "(", ")", "if", "v", ">=", "min_value", "and", "v", ">=", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.actions.ActionOperator.argmin": [[122, 125], ["min", "set", "type_dict.values", "type_dict.items"], "methods", ["None"], ["", "def", "argmin", "(", "self", ",", "type_dict", ",", "value", "=", "0", ")", ":", "\n", "        ", "min_value", "=", "min", "(", "type_dict", ".", "values", "(", ")", ")", "\n", "return", "set", "(", "[", "k", "for", "k", ",", "v", "in", "type_dict", ".", "items", "(", ")", "if", "v", "==", "min_value", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.actions.ActionOperator.argmax": [[126, 129], ["max", "set", "type_dict.values", "type_dict.items"], "methods", ["None"], ["", "def", "argmax", "(", "self", ",", "type_dict", ",", "value", "=", "0", ")", ":", "\n", "        ", "max_value", "=", "max", "(", "type_dict", ".", "values", "(", ")", ")", "\n", "return", "set", "(", "[", "k", "for", "k", ",", "v", "in", "type_dict", ".", "items", "(", ")", "if", "v", "==", "max_value", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.actions.ActionOperator.is_in": [[130, 132], ["set().issubset", "set"], "methods", ["None"], ["", "def", "is_in", "(", "self", ",", "ent", ",", "set_ent", ")", ":", "\n", "        ", "return", "set", "(", "ent", ")", ".", "issubset", "(", "set_ent", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.actions.ActionOperator.count": [[133, 135], ["len"], "methods", ["None"], ["", "def", "count", "(", "self", ",", "in_set", ")", ":", "\n", "        ", "return", "len", "(", "in_set", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.actions.ActionOperator.union": [[136, 141], ["all", "args[].union", "isinstance", "args[].get", "args[].get", "set", "set"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.actions.ActionOperator.union"], ["", "def", "union", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "if", "all", "(", "isinstance", "(", "x", ",", "set", ")", "for", "x", "in", "args", ")", ":", "\n", "            ", "return", "args", "[", "0", "]", ".", "union", "(", "*", "args", ")", "\n", "", "else", ":", "\n", "            ", "return", "{", "k", ":", "args", "[", "0", "]", ".", "get", "(", "k", ",", "0", ")", "+", "args", "[", "1", "]", ".", "get", "(", "k", ",", "0", ")", "for", "k", "in", "set", "(", "args", "[", "0", "]", ")", "|", "set", "(", "args", "[", "1", "]", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.actions.ActionOperator.intersection": [[142, 144], ["s1.intersection"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.actions.ActionOperator.intersection"], ["", "", "def", "intersection", "(", "self", ",", "s1", ",", "s2", ")", ":", "\n", "        ", "return", "s1", ".", "intersection", "(", "s2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.actions.ActionOperator.difference": [[145, 147], ["s1.difference"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.actions.ActionOperator.difference"], ["", "def", "difference", "(", "self", ",", "s1", ",", "s2", ")", ":", "\n", "        ", "return", "s1", ".", "difference", "(", "s2", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.quantitative.Quantitative.__init__": [[21, 23], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "operator", ")", ":", "\n", "        ", "self", ".", "operator", "=", "operator", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.quantitative.Quantitative.__call__": [[24, 71], ["Exception", "quantitative.Quantitative.quantitative_complex_single_type", "quantitative.Quantitative.quantitative_complex_multi_type", "quantitative.Quantitative.quantitative_complex_multi_type", "quantitative.Quantitative.quantitative_complex_single_type", "quantitative.Quantitative.quantitative_simple_multi_type", "quantitative.Quantitative.quantitative_simple_multi_type", "quantitative.Quantitative.quantitative_simple_single_type", "quantitative.Quantitative.quantitative_simple_single_type", "quantitative.Quantitative.quantitative_simple_multi_type", "quantitative.Quantitative.quantitative_simple_single_type", "quantitative.Quantitative.quantitative_complex_multi_type", "quantitative.Quantitative.quantitative_complex_single_type", "quantitative.Quantitative.quantitative_simple_single_type"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.quantitative.Quantitative.quantitative_complex_single_type", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.quantitative.Quantitative.quantitative_complex_multi_type", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.quantitative.Quantitative.quantitative_complex_multi_type", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.quantitative.Quantitative.quantitative_complex_single_type", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.quantitative.Quantitative.quantitative_simple_multi_type", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.quantitative.Quantitative.quantitative_simple_multi_type", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.quantitative.Quantitative.quantitative_simple_single_type", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.quantitative.Quantitative.quantitative_simple_single_type", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.quantitative.Quantitative.quantitative_simple_multi_type", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.quantitative.Quantitative.quantitative_simple_single_type", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.quantitative.Quantitative.quantitative_complex_multi_type", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.quantitative.Quantitative.quantitative_complex_single_type", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.quantitative.Quantitative.quantitative_simple_single_type"], ["", "def", "__call__", "(", "self", ",", "user", ",", "system", ")", ":", "\n", "# Clarification questions, will be handled from clarification class", "\n", "        ", "if", "'description'", "not", "in", "user", ":", "\n", "            ", "return", "user", ",", "system", "\n", "\n", "# Quantitative Reasoning (All)", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Quantitative|Min/Max|Single entity type'", ":", "\n", "            ", "return", "self", ".", "quantitative_complex_single_type", "(", "user", ",", "system", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Quantitative|Min/Max|Mult. entity type'", ":", "\n", "            ", "return", "self", ".", "quantitative_complex_multi_type", "(", "user", ",", "system", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Quantitative|Atleast/ Atmost/ Approx. the same/Equal|Mult. entity type'", ":", "\n", "            ", "return", "self", ".", "quantitative_complex_multi_type", "(", "user", ",", "system", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Quantitative|Atleast/ Atmost/ Approx. the same/Equal|Single entity type'", ":", "\n", "            ", "return", "self", ".", "quantitative_complex_single_type", "(", "user", ",", "system", ")", "\n", "\n", "# Quantitative Reasoning (Count) (All)", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Quantitative|Count|Logical operators'", ":", "\n", "            ", "return", "self", ".", "quantitative_simple_multi_type", "(", "user", ",", "system", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Quantitative|Count|Mult. entity type'", ":", "\n", "            ", "return", "self", ".", "quantitative_simple_multi_type", "(", "user", ",", "system", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Quantitative|Count|Single entity type'", ":", "\n", "            ", "return", "self", ".", "quantitative_simple_single_type", "(", "user", ",", "system", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Quantitative|Count|Single entity type|Indirect'", ":", "\n", "            ", "return", "self", ".", "quantitative_simple_single_type", "(", "user", ",", "system", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Quantitative|Count|Logical operators|Indirect'", ":", "\n", "            ", "return", "self", ".", "quantitative_simple_multi_type", "(", "user", ",", "system", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Quantitative|Count|Single entity type|Incomplete'", ":", "\n", "            ", "return", "self", ".", "quantitative_simple_single_type", "(", "user", ",", "system", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Quantitative|Count over Atleast/ Atmost/ Approx. the same/Equal|Mult. entity type'", ":", "\n", "            ", "return", "self", ".", "quantitative_complex_multi_type", "(", "user", ",", "system", ",", "True", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Quantitative|Count over Atleast/ Atmost/ Approx. the same/Equal|Single entity type'", ":", "\n", "            ", "return", "self", ".", "quantitative_complex_single_type", "(", "user", ",", "system", ",", "True", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Incomplete count-based ques'", ":", "\n", "            ", "return", "self", ".", "quantitative_simple_single_type", "(", "user", ",", "system", ")", "\n", "\n", "", "raise", "Exception", "(", "f'Description could not be found: {user[\"description\"]}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.quantitative.Quantitative.quantitative_simple_single_type": [[72, 103], ["quantitative.Quantitative.parse_quantitative_simple_single_type", "find_operator", "filter_operator", "str", "len", "str", "len"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.quantitative.Quantitative.parse_quantitative_simple_single_type"], ["", "def", "quantitative_simple_single_type", "(", "self", ",", "user", ",", "system", ")", ":", "\n", "# parse input", "\n", "        ", "data", "=", "self", ".", "parse_quantitative_simple_single_type", "(", "user", ",", "system", ")", "\n", "\n", "# extract values", "\n", "count_operator", "=", "data", "[", "'count_operator'", "]", "\n", "filter_operator", "=", "data", "[", "'filter_operator'", "]", "\n", "find_operator", "=", "data", "[", "'find_operator'", "]", "\n", "entity", "=", "data", "[", "'entity'", "]", "\n", "relation", "=", "data", "[", "'relation'", "]", "\n", "typ", "=", "data", "[", "'type'", "]", "\n", "gold", "=", "data", "[", "'gold'", "]", "\n", "\n", "# get results", "\n", "ent", "=", "find_operator", "(", "entity", ",", "relation", ")", "\n", "result", "=", "filter_operator", "(", "ent", ",", "typ", ")", "\n", "\n", "assert", "gold", "==", "result", "or", "system", "[", "'utterance'", "]", "==", "str", "(", "len", "(", "result", ")", ")", "\n", "\n", "system", "[", "'gold_actions'", "]", "=", "[", "\n", "[", "'action'", ",", "count_operator", ".", "__name__", "]", ",", "\n", "[", "'action'", ",", "filter_operator", ".", "__name__", "]", ",", "\n", "[", "'action'", ",", "find_operator", ".", "__name__", "]", ",", "\n", "[", "'entity'", ",", "entity", "]", ",", "\n", "[", "'relation'", ",", "relation", "]", ",", "\n", "[", "'type'", ",", "typ", "]", "\n", "]", "\n", "\n", "system", "[", "'is_spurious'", "]", "=", "False", "if", "gold", "==", "result", "or", "system", "[", "'utterance'", "]", "==", "str", "(", "len", "(", "result", ")", ")", "else", "True", "\n", "\n", "return", "user", ",", "system", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.quantitative.Quantitative.quantitative_simple_multi_type": [[104, 150], ["quantitative.Quantitative.parse_quantitative_simple_multi_type", "find_operator", "find_operator", "filter_operator", "filter_operator", "lo", "gold.issubset"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.quantitative.Quantitative.parse_quantitative_simple_multi_type"], ["", "def", "quantitative_simple_multi_type", "(", "self", ",", "user", ",", "system", ")", ":", "\n", "# parse input", "\n", "        ", "data", "=", "self", ".", "parse_quantitative_simple_multi_type", "(", "user", ",", "system", ")", "\n", "\n", "# extract values", "\n", "count_operator", "=", "data", "[", "'count_operator'", "]", "\n", "logical_operator", "=", "data", "[", "'logical_operator'", "]", "\n", "filter_operator", "=", "data", "[", "'filter_operator'", "]", "\n", "find_operator", "=", "data", "[", "'find_operator'", "]", "\n", "entities", "=", "data", "[", "'entities'", "]", "\n", "relations", "=", "data", "[", "'relations'", "]", "\n", "types", "=", "data", "[", "'types'", "]", "\n", "gold", "=", "data", "[", "'gold'", "]", "\n", "\n", "# get results", "\n", "ent_1", "=", "find_operator", "(", "entities", "[", "0", "]", ",", "relations", "[", "0", "]", ")", "\n", "ent_2", "=", "find_operator", "(", "entities", "[", "1", "]", ",", "relations", "[", "1", "]", ")", "\n", "filter_ent_1", "=", "filter_operator", "(", "ent_1", ",", "types", "[", "0", "]", ")", "\n", "filter_ent_2", "=", "filter_operator", "(", "ent_2", ",", "types", "[", "1", "]", ")", "\n", "\n", "for", "lo", "in", "logical_operator", ":", "\n", "            ", "result", "=", "lo", "(", "filter_ent_1", ",", "filter_ent_2", ")", "\n", "if", "gold", "==", "result", "or", "gold", ".", "issubset", "(", "result", ")", ":", "\n", "                ", "logical_operator", "=", "lo", "\n", "break", "\n", "\n", "", "", "assert", "gold", "==", "result", "\n", "\n", "system", "[", "'gold_actions'", "]", "=", "[", "\n", "[", "'action'", ",", "count_operator", ".", "__name__", "]", ",", "\n", "[", "'action'", ",", "logical_operator", ".", "__name__", "]", ",", "\n", "[", "'action'", ",", "filter_operator", ".", "__name__", "]", ",", "\n", "[", "'action'", ",", "find_operator", ".", "__name__", "]", ",", "\n", "[", "'entity'", ",", "entities", "[", "0", "]", "]", ",", "\n", "[", "'relation'", ",", "relations", "[", "0", "]", "]", ",", "\n", "[", "'type'", ",", "types", "[", "0", "]", "]", ",", "\n", "[", "'action'", ",", "filter_operator", ".", "__name__", "]", ",", "\n", "[", "'action'", ",", "find_operator", ".", "__name__", "]", ",", "\n", "[", "'entity'", ",", "entities", "[", "1", "]", "]", ",", "\n", "[", "'relation'", ",", "relations", "[", "1", "]", "]", ",", "\n", "[", "'type'", ",", "types", "[", "1", "]", "]", ",", "\n", "]", "\n", "\n", "system", "[", "'is_spurious'", "]", "=", "False", "if", "gold", "==", "result", "else", "True", "\n", "\n", "return", "user", ",", "system", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.quantitative.Quantitative.quantitative_complex_single_type": [[151, 200], ["quantitative.Quantitative.parse_quantitative_complex_single_type", "to", "to", "gold.issubset", "gold.issubset", "system[].insert", "system[].append", "len", "quantitative_operator", "len", "quantitative_operator", "set", "gold.issubset", "gold.issubset", "gold.issubset", "gold.issubset", "gold.issubset", "to.keys", "str", "set", "set", "to.keys", "to.keys"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.quantitative.Quantitative.parse_quantitative_complex_single_type"], ["", "def", "quantitative_complex_single_type", "(", "self", ",", "user", ",", "system", ",", "is_count", "=", "False", ")", ":", "\n", "# parse input", "\n", "        ", "data", "=", "self", ".", "parse_quantitative_complex_single_type", "(", "user", ",", "system", ")", "\n", "\n", "# extract values", "\n", "count_operator", "=", "data", "[", "'count_operator'", "]", "\n", "quantitative_operator", "=", "data", "[", "'quantitative_operator'", "]", "\n", "tuple_operator", "=", "data", "[", "'tuple_operator'", "]", "\n", "quantitative_value", "=", "data", "[", "'quantitative_value'", "]", "\n", "relation", "=", "data", "[", "'relation'", "]", "\n", "type_1", "=", "data", "[", "'type_1'", "]", "\n", "type_2", "=", "data", "[", "'type_2'", "]", "\n", "gold", "=", "data", "[", "'gold'", "]", "\n", "\n", "# get results", "\n", "for", "to", "in", "tuple_operator", ":", "\n", "            ", "type_dict", "=", "to", "(", "relation", ",", "type_1", ",", "type_2", ")", "\n", "if", "len", "(", "type_dict", ")", ">", "0", ":", "\n", "                ", "result", "=", "quantitative_operator", "(", "type_dict", ",", "quantitative_value", ")", "\n", "if", "gold", "==", "result", "or", "gold", ".", "issubset", "(", "result", ")", "or", "gold", ".", "issubset", "(", "set", "(", "type_dict", ".", "keys", "(", ")", ")", ")", ":", "\n", "                    ", "tuple_operator", "=", "to", "\n", "break", "\n", "", "", "type_dict", "=", "to", "(", "relation", ",", "type_2", ",", "type_1", ")", "\n", "if", "len", "(", "type_dict", ")", ">", "0", ":", "\n", "                ", "result", "=", "quantitative_operator", "(", "type_dict", ",", "quantitative_value", ")", "\n", "if", "gold", "==", "result", "or", "gold", ".", "issubset", "(", "result", ")", "or", "gold", ".", "issubset", "(", "set", "(", "type_dict", ".", "keys", "(", ")", ")", ")", ":", "\n", "                    ", "tuple_operator", "=", "to", "\n", "type_1", ",", "type_2", "=", "type_2", ",", "type_1", "\n", "break", "\n", "\n", "", "", "", "assert", "gold", "==", "result", "or", "gold", ".", "issubset", "(", "result", ")", "or", "gold", ".", "issubset", "(", "set", "(", "type_dict", ".", "keys", "(", ")", ")", ")", "\n", "\n", "system", "[", "'gold_actions'", "]", "=", "[", "\n", "[", "'action'", ",", "quantitative_operator", ".", "__name__", "]", ",", "\n", "[", "'action'", ",", "tuple_operator", ".", "__name__", "]", ",", "\n", "[", "'relation'", ",", "relation", "]", ",", "\n", "[", "'type'", ",", "type_1", "]", ",", "\n", "[", "'type'", ",", "type_2", "]", ",", "\n", "]", "\n", "\n", "if", "is_count", ":", "\n", "            ", "system", "[", "'gold_actions'", "]", ".", "insert", "(", "0", ",", "[", "'action'", ",", "count_operator", ".", "__name__", "]", ")", "\n", "\n", "", "if", "quantitative_operator", ".", "__name__", "not", "in", "[", "'argmin'", ",", "'argmax'", "]", ":", "\n", "            ", "system", "[", "'gold_actions'", "]", ".", "append", "(", "[", "'value'", ",", "str", "(", "quantitative_value", ")", "]", ")", "\n", "\n", "", "system", "[", "'is_spurious'", "]", "=", "False", "if", "gold", "==", "result", "or", "gold", ".", "issubset", "(", "result", ")", "else", "True", "\n", "\n", "return", "user", ",", "system", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.quantitative.Quantitative.quantitative_complex_multi_type": [[201, 247], ["quantitative.Quantitative.parse_quantitative_complex_multi_type", "tuple_operator", "tuple_operator", "logical_operator", "quantitative_operator", "gold.issubset", "gold.issubset", "system[].insert", "system[].append", "set", "gold.issubset", "logical_operator.keys", "str"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.quantitative.Quantitative.parse_quantitative_complex_multi_type"], ["", "def", "quantitative_complex_multi_type", "(", "self", ",", "user", ",", "system", ",", "is_count", "=", "False", ")", ":", "\n", "# parse input", "\n", "        ", "data", "=", "self", ".", "parse_quantitative_complex_multi_type", "(", "user", ",", "system", ")", "\n", "\n", "# extract values", "\n", "count_operator", "=", "data", "[", "'count_operator'", "]", "\n", "quantitative_operator", "=", "data", "[", "'quantitative_operator'", "]", "\n", "logical_operator", "=", "data", "[", "'logical_operator'", "]", "\n", "tuple_operator", "=", "data", "[", "'tuple_operator'", "]", "\n", "quantitative_value", "=", "data", "[", "'quantitative_value'", "]", "\n", "relation", "=", "data", "[", "'relation'", "]", "\n", "base_type", "=", "data", "[", "'base_type'", "]", "\n", "type_1", "=", "data", "[", "'type_1'", "]", "\n", "type_2", "=", "data", "[", "'type_2'", "]", "\n", "gold", "=", "data", "[", "'gold'", "]", "\n", "\n", "# get results", "\n", "type_dict_1", "=", "tuple_operator", "(", "relation", ",", "base_type", ",", "type_1", ")", "\n", "type_dict_2", "=", "tuple_operator", "(", "relation", ",", "base_type", ",", "type_2", ")", "\n", "type_dict", "=", "logical_operator", "(", "type_dict_1", ",", "type_dict_2", ")", "\n", "result", "=", "quantitative_operator", "(", "type_dict", ",", "quantitative_value", ")", "\n", "\n", "assert", "gold", "==", "result", "or", "gold", ".", "issubset", "(", "result", ")", "or", "gold", ".", "issubset", "(", "set", "(", "type_dict", ".", "keys", "(", ")", ")", ")", "\n", "\n", "system", "[", "'gold_actions'", "]", "=", "[", "\n", "[", "'action'", ",", "quantitative_operator", ".", "__name__", "]", ",", "\n", "[", "'action'", ",", "logical_operator", ".", "__name__", "]", ",", "\n", "[", "'action'", ",", "tuple_operator", ".", "__name__", "]", ",", "\n", "[", "'relation'", ",", "relation", "]", ",", "\n", "[", "'type'", ",", "base_type", "]", ",", "\n", "[", "'type'", ",", "type_1", "]", ",", "\n", "[", "'action'", ",", "tuple_operator", ".", "__name__", "]", ",", "\n", "[", "'relation'", ",", "relation", "]", ",", "\n", "[", "'type'", ",", "base_type", "]", ",", "\n", "[", "'type'", ",", "type_2", "]", "\n", "]", "\n", "\n", "if", "is_count", ":", "\n", "            ", "system", "[", "'gold_actions'", "]", ".", "insert", "(", "0", ",", "[", "'action'", ",", "count_operator", ".", "__name__", "]", ")", "\n", "\n", "", "if", "quantitative_operator", ".", "__name__", "not", "in", "[", "'argmin'", ",", "'argmax'", "]", ":", "\n", "            ", "system", "[", "'gold_actions'", "]", ".", "append", "(", "[", "'value'", ",", "str", "(", "quantitative_value", ")", "]", ")", "\n", "\n", "", "system", "[", "'is_spurious'", "]", "=", "False", "if", "gold", "==", "result", "or", "gold", ".", "issubset", "(", "result", ")", "else", "True", "\n", "\n", "return", "user", ",", "system", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.quantitative.Quantitative.parse_quantitative_simple_single_type": [[248, 271], ["[].split", "active_set[].startswith", "active_set[].startswith", "set", "Exception"], "methods", ["None"], ["", "def", "parse_quantitative_simple_single_type", "(", "self", ",", "user", ",", "system", ")", ":", "\n", "        ", "active_set", "=", "system", "[", "'active_set'", "]", "[", "0", "]", "[", "1", ":", "-", "1", "]", ".", "split", "(", "','", ")", "\n", "if", "active_set", "[", "0", "]", ".", "startswith", "(", "'c'", ")", ":", "\n", "            ", "find_operator", "=", "self", ".", "operator", ".", "find_reverse", "\n", "entity", "=", "active_set", "[", "2", "]", "\n", "relation", "=", "active_set", "[", "1", "]", "\n", "typ", "=", "active_set", "[", "0", "]", "[", "2", ":", "-", "1", "]", "\n", "", "elif", "active_set", "[", "0", "]", ".", "startswith", "(", "'Q'", ")", ":", "\n", "            ", "find_operator", "=", "self", ".", "operator", ".", "find", "\n", "entity", "=", "active_set", "[", "0", "]", "\n", "relation", "=", "active_set", "[", "1", "]", "\n", "typ", "=", "active_set", "[", "2", "]", "[", "2", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "f'Wrong active set: {user}'", ")", "\n", "\n", "", "return", "{", "\n", "'count_operator'", ":", "self", ".", "operator", ".", "count", ",", "\n", "'filter_operator'", ":", "self", ".", "operator", ".", "filter_type", ",", "\n", "'find_operator'", ":", "find_operator", ",", "\n", "'entity'", ":", "entity", ",", "\n", "'relation'", ":", "relation", ",", "\n", "'type'", ":", "typ", ",", "\n", "'gold'", ":", "set", "(", "system", "[", "'all_entities'", "]", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.quantitative.Quantitative.parse_quantitative_complex_single_type": [[273, 288], ["quantitative.Quantitative.get_quantitative_operators", "len", "len", "set"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.quantitative.Quantitative.get_quantitative_operators"], ["", "def", "parse_quantitative_complex_single_type", "(", "self", ",", "user", ",", "system", ")", ":", "\n", "        ", "assert", "len", "(", "user", "[", "'relations'", "]", ")", "==", "1", "\n", "assert", "len", "(", "user", "[", "'type_list'", "]", ")", "==", "2", "\n", "\n", "operators", "=", "self", ".", "get_quantitative_operators", "(", "user", ")", "\n", "\n", "return", "{", "\n", "'count_operator'", ":", "self", ".", "operator", ".", "count", ",", "\n", "'quantitative_operator'", ":", "operators", "[", "'quantitative_operator'", "]", ",", "\n", "'tuple_operator'", ":", "[", "self", ".", "operator", ".", "find_tuple_counts", ",", "self", ".", "operator", ".", "find_reverse_tuple_counts", "]", ",", "\n", "'quantitative_value'", ":", "operators", "[", "'value'", "]", ",", "\n", "'relation'", ":", "user", "[", "'relations'", "]", "[", "0", "]", ",", "\n", "'type_1'", ":", "user", "[", "'type_list'", "]", "[", "0", "]", ",", "\n", "'type_2'", ":", "user", "[", "'type_list'", "]", "[", "1", "]", ",", "\n", "'gold'", ":", "set", "(", "system", "[", "'all_entities'", "]", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.quantitative.Quantitative.parse_quantitative_simple_multi_type": [[290, 319], ["active_set[].split", "active_set[].startswith", "set", "entities.append", "relations.append", "types.append", "active_set[].startswith", "entities.append", "relations.append", "types.append", "Exception"], "methods", ["None"], ["", "def", "parse_quantitative_simple_multi_type", "(", "self", ",", "user", ",", "system", ")", ":", "\n", "        ", "entities", "=", "[", "]", "\n", "relations", "=", "[", "]", "\n", "types", "=", "[", "]", "\n", "\n", "for", "active_set", "in", "system", "[", "'active_set'", "]", ":", "\n", "            ", "active_set", "=", "active_set", "[", "1", ":", "-", "1", "]", ".", "split", "(", "','", ")", "\n", "if", "active_set", "[", "0", "]", ".", "startswith", "(", "'c'", ")", ":", "\n", "                ", "find_operator", "=", "self", ".", "operator", ".", "find_reverse", "\n", "entities", ".", "append", "(", "active_set", "[", "2", "]", ")", "\n", "relations", ".", "append", "(", "active_set", "[", "1", "]", ")", "\n", "types", ".", "append", "(", "active_set", "[", "0", "]", "[", "2", ":", "-", "1", "]", ")", "\n", "", "elif", "active_set", "[", "0", "]", ".", "startswith", "(", "'Q'", ")", ":", "\n", "                ", "find_operator", "=", "self", ".", "operator", ".", "find", "\n", "entities", ".", "append", "(", "active_set", "[", "0", "]", ")", "\n", "relations", ".", "append", "(", "active_set", "[", "1", "]", ")", "\n", "types", ".", "append", "(", "active_set", "[", "2", "]", "[", "2", ":", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "raise", "Exception", "(", "f'Wrong active set: {user}'", ")", "\n", "\n", "", "", "return", "{", "\n", "'count_operator'", ":", "self", ".", "operator", ".", "count", ",", "\n", "'logical_operator'", ":", "[", "self", ".", "operator", ".", "intersection", ",", "self", ".", "operator", ".", "union", "]", ",", "\n", "'filter_operator'", ":", "self", ".", "operator", ".", "filter_type", ",", "\n", "'find_operator'", ":", "find_operator", ",", "\n", "'entities'", ":", "entities", ",", "\n", "'relations'", ":", "relations", ",", "\n", "'types'", ":", "types", ",", "\n", "'gold'", ":", "set", "(", "system", "[", "'all_entities'", "]", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.quantitative.Quantitative.parse_quantitative_complex_multi_type": [[321, 359], ["[].split", "quantitative.Quantitative.get_quantitative_operators", "len", "len", "active_set[].index", "set", "set", "set", "active_set[].index", "Exception"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.quantitative.Quantitative.get_quantitative_operators"], ["", "def", "parse_quantitative_complex_multi_type", "(", "self", ",", "user", ",", "system", ")", ":", "\n", "        ", "assert", "len", "(", "user", "[", "'relations'", "]", ")", "==", "1", "\n", "assert", "len", "(", "user", "[", "'type_list'", "]", ")", "==", "3", "\n", "\n", "active_set", "=", "system", "[", "'active_set'", "]", "[", "0", "]", "[", "1", ":", "-", "1", "]", ".", "split", "(", "','", ")", "\n", "if", "'|'", "in", "active_set", "[", "0", "]", ":", "\n", "            ", "tuple_operator", "=", "self", ".", "operator", ".", "find_reverse_tuple_counts", "\n", "relation", "=", "active_set", "[", "1", "]", "\n", "base_type", "=", "active_set", "[", "-", "1", "]", "[", "2", ":", "-", "1", "]", "\n", "sep_idx", "=", "active_set", "[", "0", "]", ".", "index", "(", "'|'", ")", "\n", "type_1", "=", "active_set", "[", "0", "]", "[", "2", ":", "sep_idx", "-", "1", "]", "\n", "type_2", "=", "active_set", "[", "0", "]", "[", "sep_idx", "+", "3", ":", "-", "1", "]", "\n", "", "elif", "'|'", "in", "active_set", "[", "-", "1", "]", ":", "\n", "            ", "tuple_operator", "=", "self", ".", "operator", ".", "find_tuple_counts", "\n", "relation", "=", "active_set", "[", "1", "]", "\n", "base_type", "=", "active_set", "[", "0", "]", "[", "2", ":", "-", "1", "]", "\n", "sep_idx", "=", "active_set", "[", "-", "1", "]", ".", "index", "(", "'|'", ")", "\n", "type_1", "=", "active_set", "[", "-", "1", "]", "[", "2", ":", "sep_idx", "-", "1", "]", "\n", "type_2", "=", "active_set", "[", "-", "1", "]", "[", "sep_idx", "+", "3", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "f'Wrong active set {user}'", ")", "\n", "\n", "", "assert", "set", "(", "[", "base_type", ",", "type_1", ",", "type_2", "]", ")", "==", "set", "(", "user", "[", "'type_list'", "]", ")", ",", "f'Active set and type list are inconsistent: {user, system}'", "\n", "assert", "relation", "in", "user", "[", "'relations'", "]", ",", "f'Active set and relation list are inconsistent: {user, system}'", "\n", "\n", "operators", "=", "self", ".", "get_quantitative_operators", "(", "user", ")", "\n", "\n", "return", "{", "\n", "'count_operator'", ":", "self", ".", "operator", ".", "count", ",", "\n", "'quantitative_operator'", ":", "operators", "[", "'quantitative_operator'", "]", ",", "\n", "'logical_operator'", ":", "operators", "[", "'logical_operator'", "]", ",", "\n", "'tuple_operator'", ":", "tuple_operator", ",", "\n", "'quantitative_value'", ":", "operators", "[", "'value'", "]", ",", "\n", "'relation'", ":", "relation", ",", "\n", "'base_type'", ":", "base_type", ",", "\n", "'type_1'", ":", "type_1", ",", "\n", "'type_2'", ":", "type_2", ",", "\n", "'gold'", ":", "set", "(", "system", "[", "'all_entities'", "]", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.quantitative.Quantitative.get_quantitative_operators": [[361, 390], ["user[].split", "int", "user[].split", "user[].split", "re.search().group", "user[].split", "re.search().group", "re.search", "user[].split", "re.search().group", "re.search", "user[].split", "re.search().group", "user[].split", "re.search", "user[].split", "re.search().group", "Exception", "user[].split", "re.search", "user[].split", "re.search", "user[].split", "user[].split"], "methods", ["None"], ["", "def", "get_quantitative_operators", "(", "self", ",", "user", ")", ":", "\n", "        ", "if", "'min'", "in", "user", "[", "'utterance'", "]", ".", "split", "(", ")", ":", "\n", "            ", "operator", "=", "self", ".", "operator", ".", "argmin", "\n", "value", "=", "'0'", "\n", "", "elif", "'max'", "in", "user", "[", "'utterance'", "]", ".", "split", "(", ")", ":", "\n", "            ", "operator", "=", "self", ".", "operator", ".", "argmax", "\n", "value", "=", "'0'", "\n", "", "elif", "'exactly'", "in", "user", "[", "'utterance'", "]", ".", "split", "(", ")", ":", "\n", "            ", "operator", "=", "self", ".", "operator", ".", "equal", "\n", "value", "=", "re", ".", "search", "(", "r'\\d+'", ",", "user", "[", "'utterance'", "]", ".", "split", "(", "'exactly'", ")", "[", "1", "]", ")", ".", "group", "(", ")", "\n", "", "elif", "'approximately'", "in", "user", "[", "'utterance'", "]", ".", "split", "(", ")", ":", "\n", "            ", "operator", "=", "self", ".", "operator", ".", "approx", "\n", "value", "=", "re", ".", "search", "(", "r'\\d+'", ",", "user", "[", "'utterance'", "]", ".", "split", "(", "'approximately'", ")", "[", "1", "]", ")", ".", "group", "(", ")", "\n", "", "elif", "'around'", "in", "user", "[", "'utterance'", "]", ".", "split", "(", ")", ":", "\n", "            ", "operator", "=", "self", ".", "operator", ".", "approx", "\n", "value", "=", "re", ".", "search", "(", "r'\\d+'", ",", "user", "[", "'utterance'", "]", ".", "split", "(", "'around'", ")", "[", "1", "]", ")", ".", "group", "(", ")", "\n", "", "elif", "'atmost'", "in", "user", "[", "'utterance'", "]", ".", "split", "(", ")", ":", "\n", "            ", "operator", "=", "self", ".", "operator", ".", "atmost", "\n", "value", "=", "re", ".", "search", "(", "r'\\d+'", ",", "user", "[", "'utterance'", "]", ".", "split", "(", "'atmost'", ")", "[", "1", "]", ")", ".", "group", "(", ")", "\n", "", "elif", "'atleast'", "in", "user", "[", "'utterance'", "]", ".", "split", "(", ")", ":", "\n", "            ", "operator", "=", "self", ".", "operator", ".", "atleast", "\n", "value", "=", "re", ".", "search", "(", "r'\\d+'", ",", "user", "[", "'utterance'", "]", ".", "split", "(", "'atleast'", ")", "[", "1", "]", ")", ".", "group", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "f'Unkown quantitative operator for question: {user[\"utterance\"]}'", ")", "\n", "\n", "", "return", "{", "\n", "'quantitative_operator'", ":", "operator", ",", "\n", "'value'", ":", "int", "(", "value", ")", ",", "\n", "'logical_operator'", ":", "self", ".", "operator", ".", "union", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.simple.Simple.__init__": [[16, 18], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "operator", ")", ":", "\n", "        ", "self", ".", "operator", "=", "operator", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.simple.Simple.__call__": [[19, 49], ["Exception", "simple.Simple.simple_question_single_entity", "simple.Simple.simple_question_single_entity", "simple.Simple.simple_question_multi_entities", "simple.Simple.simple_question_multi_entities", "simple.Simple.simple_question_single_entity", "simple.Simple.simple_question_ellipsis", "simple.Simple.simple_question_ellipsis"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.simple.Simple.simple_question_single_entity", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.simple.Simple.simple_question_single_entity", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.simple.Simple.simple_question_multi_entities", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.simple.Simple.simple_question_multi_entities", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.simple.Simple.simple_question_single_entity", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.simple.Simple.simple_question_ellipsis", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.simple.Simple.simple_question_ellipsis"], ["", "def", "__call__", "(", "self", ",", "user", ",", "system", ")", ":", "\n", "# Clarification questions, will be handled from clarification class", "\n", "        ", "if", "'description'", "not", "in", "user", ":", "\n", "            ", "return", "user", ",", "system", "\n", "\n", "# Simple Question (Direct)", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Simple Question|Single Entity'", ":", "\n", "            ", "return", "self", ".", "simple_question_single_entity", "(", "user", ",", "system", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Simple Question'", ":", "\n", "            ", "return", "self", ".", "simple_question_single_entity", "(", "user", ",", "system", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Simple Question|Mult. Entity|Indirect'", ":", "\n", "            ", "return", "self", ".", "simple_question_multi_entities", "(", "user", ",", "system", ")", "\n", "\n", "# Simple Question (Coreferenced)", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Simple Question|Mult. Entity'", ":", "\n", "            ", "return", "self", ".", "simple_question_multi_entities", "(", "user", ",", "system", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Simple Question|Single Entity|Indirect'", ":", "\n", "            ", "return", "self", ".", "simple_question_single_entity", "(", "user", ",", "system", ")", "\n", "\n", "# Simple Question (Ellipsis)", "\n", "", "if", "user", "[", "'description'", "]", "==", "'only subject is changed, parent and predicate remains same'", ":", "\n", "            ", "return", "self", ".", "simple_question_ellipsis", "(", "user", ",", "system", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Incomplete|object parent is changed, subject and predicate remain same'", ":", "\n", "            ", "return", "self", ".", "simple_question_ellipsis", "(", "user", ",", "system", ")", "\n", "\n", "", "raise", "Exception", "(", "f'Description could not be found: {user[\"description\"]}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.simple.Simple.simple_question_single_entity": [[50, 84], ["simple.Simple.parse_simple_question_single_entity", "find", "filter_operator"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.simple.Simple.parse_simple_question_single_entity", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.actions.ActionOperator.find"], ["", "def", "simple_question_single_entity", "(", "self", ",", "user", ",", "system", ")", ":", "\n", "# parse input", "\n", "        ", "data", "=", "self", ".", "parse_simple_question_single_entity", "(", "user", ",", "system", ")", "\n", "\n", "# extract values", "\n", "filter_operator", "=", "data", "[", "'filter_operator'", "]", "\n", "find_operator", "=", "data", "[", "'find_operator'", "]", "\n", "entity", "=", "data", "[", "'entity'", "]", "\n", "relation", "=", "data", "[", "'relation'", "]", "\n", "typ", "=", "data", "[", "'type'", "]", "\n", "gold", "=", "data", "[", "'gold'", "]", "\n", "\n", "# get results", "\n", "for", "find", "in", "find_operator", ":", "\n", "            ", "ent", "=", "find", "(", "entity", ",", "relation", ")", "\n", "result", "=", "filter_operator", "(", "ent", ",", "typ", ")", "\n", "\n", "if", "gold", "==", "result", ":", "\n", "                ", "find_operator", "=", "find", "\n", "break", "\n", "\n", "", "", "assert", "gold", "==", "result", "\n", "\n", "system", "[", "'gold_actions'", "]", "=", "[", "\n", "[", "'action'", ",", "filter_operator", ".", "__name__", "]", ",", "\n", "[", "'action'", ",", "find_operator", ".", "__name__", "]", ",", "\n", "[", "'entity'", ",", "entity", "]", ",", "\n", "[", "'relation'", ",", "relation", "]", ",", "\n", "[", "'type'", ",", "typ", "]", "\n", "]", "\n", "\n", "system", "[", "'is_spurious'", "]", "=", "False", "if", "gold", "==", "result", "else", "True", "\n", "\n", "return", "user", ",", "system", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.simple.Simple.simple_question_multi_entities": [[85, 158], ["simple.Simple.parse_simple_question_multi_entities", "len", "len", "len", "len", "len", "len", "find", "filter_operator", "logical_operator", "find_op_entities.items", "ValueError", "filter_operator.issubset", "filter_entities.append", "system[].extend", "next", "iter", "find_op_entities.values"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.simple.Simple.parse_simple_question_multi_entities", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.actions.ActionOperator.find"], ["", "def", "simple_question_multi_entities", "(", "self", ",", "user", ",", "system", ")", ":", "\n", "# parse input", "\n", "        ", "data", "=", "self", ".", "parse_simple_question_multi_entities", "(", "user", ",", "system", ")", "\n", "\n", "# extract values", "\n", "logical_operator", "=", "data", "[", "'logical_operator'", "]", "\n", "filter_operator", "=", "data", "[", "'filter_operator'", "]", "\n", "find_operator", "=", "data", "[", "'find_operator'", "]", "\n", "entities", "=", "data", "[", "'entity'", "]", "\n", "relation", "=", "data", "[", "'relation'", "]", "\n", "typ", "=", "data", "[", "'type'", "]", "\n", "gold", "=", "data", "[", "'gold'", "]", "\n", "\n", "# get results", "\n", "find_op_entities", "=", "{", "}", "\n", "for", "find", "in", "find_operator", ":", "\n", "            ", "filter_entities", "=", "[", "]", "\n", "for", "entity", "in", "entities", ":", "\n", "                ", "ent", "=", "find", "(", "entity", ",", "relation", ")", "\n", "filter_ent", "=", "filter_operator", "(", "ent", ",", "typ", ")", "\n", "if", "filter_ent", "and", "filter_ent", ".", "issubset", "(", "gold", ")", ":", "\n", "                    ", "filter_entities", ".", "append", "(", "filter_ent", ")", "\n", "find_op_entities", "[", "entity", "]", "=", "find", "\n", "\n", "", "", "if", "filter_entities", ":", "\n", "                ", "result", "=", "logical_operator", "(", "*", "filter_entities", ")", "\n", "\n", "if", "gold", "==", "result", ":", "\n", "                    ", "break", "\n", "\n", "", "", "", "assert", "len", "(", "find_op_entities", ")", "<=", "len", "(", "entities", ")", "\n", "\n", "# For multiple entities we might have entities that do not affect the final result", "\n", "# We have to include them on the actions with normal find operator", "\n", "# We can skip for now", "\n", "if", "len", "(", "find_op_entities", ")", "<", "len", "(", "entities", ")", ":", "\n", "            ", "for", "ent", "in", "entities", ":", "\n", "                ", "if", "ent", "not", "in", "find_op_entities", ":", "\n", "                    ", "find_op_entities", "[", "ent", "]", "=", "find_operator", "[", "0", "]", "\n", "\n", "", "", "", "assert", "len", "(", "find_op_entities", ")", "==", "len", "(", "entities", ")", "\n", "\n", "assert", "gold", "==", "result", "\n", "\n", "if", "user", "[", "'description'", "]", "==", "'Simple Question|Mult. Entity'", ":", "\n", "            ", "system", "[", "'gold_actions'", "]", "=", "[", "\n", "# ['action', logical_operator.__name__],", "\n", "[", "'action'", ",", "filter_operator", ".", "__name__", "]", ",", "\n", "[", "'action'", ",", "next", "(", "iter", "(", "find_op_entities", ".", "values", "(", ")", ")", ")", ".", "__name__", "]", ",", "\n", "[", "'entity'", ",", "'prev_answer'", "]", ",", "\n", "[", "'relation'", ",", "relation", "]", ",", "\n", "[", "'type'", ",", "typ", "]", "\n", "]", "\n", "", "elif", "user", "[", "'description'", "]", "==", "'Simple Question|Mult. Entity|Indirect'", ":", "\n", "# This type of logical form introduces a big bias for the model.", "\n", "# We need to replace this with a more general logical form", "\n", "            ", "system", "[", "'gold_actions'", "]", "=", "[", "\n", "[", "'action'", ",", "logical_operator", ".", "__name__", "]", ",", "\n", "]", "\n", "for", "entity", ",", "find", "in", "find_op_entities", ".", "items", "(", ")", ":", "\n", "                ", "system", "[", "'gold_actions'", "]", ".", "extend", "(", "[", "\n", "[", "'action'", ",", "filter_operator", ".", "__name__", "]", ",", "\n", "[", "'action'", ",", "find", ".", "__name__", "]", ",", "\n", "[", "'entity'", ",", "entity", "]", ",", "\n", "[", "'relation'", ",", "relation", "]", ",", "\n", "[", "'type'", ",", "typ", "]", "\n", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f'Unknown user description: {user}'", ")", "\n", "\n", "", "system", "[", "'is_spurious'", "]", "=", "False", "if", "gold", "==", "result", "else", "True", "\n", "\n", "return", "user", ",", "system", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.simple.Simple.simple_question_ellipsis": [[159, 193], ["simple.Simple.parse_simple_question_ellipsis", "find", "filter_operator"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.simple.Simple.parse_simple_question_ellipsis", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.actions.ActionOperator.find"], ["", "def", "simple_question_ellipsis", "(", "self", ",", "user", ",", "system", ")", ":", "\n", "# parse input", "\n", "        ", "data", "=", "self", ".", "parse_simple_question_ellipsis", "(", "user", ",", "system", ")", "\n", "\n", "# extract values", "\n", "filter_operator", "=", "data", "[", "'filter_operator'", "]", "\n", "find_operator", "=", "data", "[", "'find_operator'", "]", "\n", "entity", "=", "data", "[", "'entity'", "]", "\n", "relation", "=", "data", "[", "'relation'", "]", "\n", "typ", "=", "data", "[", "'type'", "]", "\n", "gold", "=", "data", "[", "'gold'", "]", "\n", "\n", "# get results", "\n", "for", "find", "in", "find_operator", ":", "\n", "            ", "ent", "=", "find", "(", "entity", ",", "relation", ")", "\n", "result", "=", "filter_operator", "(", "ent", ",", "typ", ")", "\n", "\n", "if", "gold", "==", "result", ":", "\n", "                ", "find_operator", "=", "find", "\n", "break", "\n", "\n", "", "", "assert", "gold", "==", "result", "\n", "\n", "system", "[", "'gold_actions'", "]", "=", "[", "\n", "[", "'action'", ",", "filter_operator", ".", "__name__", "]", ",", "\n", "[", "'action'", ",", "find_operator", ".", "__name__", "]", ",", "\n", "[", "'entity'", ",", "entity", "]", ",", "\n", "[", "'relation'", ",", "relation", "]", ",", "\n", "[", "'type'", ",", "typ", "]", "\n", "]", "\n", "\n", "system", "[", "'is_spurious'", "]", "=", "False", "if", "gold", "==", "result", "else", "True", "\n", "\n", "return", "user", ",", "system", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.simple.Simple.parse_simple_question_single_entity": [[194, 211], ["len", "len", "len", "set"], "methods", ["None"], ["", "def", "parse_simple_question_single_entity", "(", "self", ",", "user", ",", "system", ")", ":", "\n", "        ", "assert", "len", "(", "user", "[", "'entities_in_utterance'", "]", ")", "==", "1", "\n", "assert", "len", "(", "user", "[", "'relations'", "]", ")", "==", "1", "\n", "assert", "len", "(", "user", "[", "'type_list'", "]", ")", "==", "1", "\n", "\n", "find_operator", "=", "[", "self", ".", "operator", ".", "find", ",", "self", ".", "operator", ".", "find_reverse", "]", "\n", "entity", "=", "user", "[", "'entities_in_utterance'", "]", "[", "0", "]", "\n", "relation", "=", "user", "[", "'relations'", "]", "[", "0", "]", "\n", "typ", "=", "user", "[", "'type_list'", "]", "[", "0", "]", "\n", "\n", "return", "{", "\n", "'filter_operator'", ":", "self", ".", "operator", ".", "filter_type", ",", "\n", "'find_operator'", ":", "find_operator", ",", "\n", "'entity'", ":", "entity", ",", "\n", "'relation'", ":", "relation", ",", "\n", "'type'", ":", "typ", ",", "\n", "'gold'", ":", "set", "(", "system", "[", "'all_entities'", "]", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.simple.Simple.parse_simple_question_multi_entities": [[213, 226], ["len", "len", "len", "set"], "methods", ["None"], ["", "def", "parse_simple_question_multi_entities", "(", "self", ",", "user", ",", "system", ")", ":", "\n", "        ", "assert", "len", "(", "user", "[", "'entities_in_utterance'", "]", ")", ">=", "1", "\n", "assert", "len", "(", "user", "[", "'relations'", "]", ")", "==", "1", "\n", "assert", "len", "(", "user", "[", "'type_list'", "]", ")", "==", "1", "\n", "\n", "return", "{", "\n", "'logical_operator'", ":", "self", ".", "operator", ".", "union", ",", "\n", "'filter_operator'", ":", "self", ".", "operator", ".", "filter_type", ",", "\n", "'find_operator'", ":", "[", "self", ".", "operator", ".", "find", ",", "self", ".", "operator", ".", "find_reverse", "]", ",", "\n", "'entity'", ":", "user", "[", "'entities_in_utterance'", "]", ",", "\n", "'relation'", ":", "user", "[", "'relations'", "]", "[", "0", "]", ",", "\n", "'type'", ":", "user", "[", "'type_list'", "]", "[", "0", "]", ",", "\n", "'gold'", ":", "set", "(", "system", "[", "'all_entities'", "]", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.simple.Simple.parse_simple_question_ellipsis": [[228, 251], ["[].split", "active_set[].startswith", "len", "active_set[].startswith", "set", "Exception"], "methods", ["None"], ["", "def", "parse_simple_question_ellipsis", "(", "self", ",", "user", ",", "system", ")", ":", "\n", "        ", "assert", "len", "(", "system", "[", "'active_set'", "]", ")", "==", "1", "\n", "\n", "active_set", "=", "system", "[", "'active_set'", "]", "[", "0", "]", "[", "1", ":", "-", "1", "]", ".", "split", "(", "','", ")", "\n", "if", "active_set", "[", "0", "]", ".", "startswith", "(", "'c'", ")", ":", "\n", "            ", "entity", "=", "active_set", "[", "2", "]", "\n", "relation", "=", "active_set", "[", "1", "]", "\n", "typ", "=", "active_set", "[", "0", "]", "[", "2", ":", "-", "1", "]", "\n", "", "elif", "active_set", "[", "0", "]", ".", "startswith", "(", "'Q'", ")", ":", "\n", "            ", "entity", "=", "active_set", "[", "0", "]", "\n", "relation", "=", "active_set", "[", "1", "]", "\n", "typ", "=", "active_set", "[", "2", "]", "[", "2", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "f'Wrong active set: {user}'", ")", "\n", "\n", "", "return", "{", "\n", "'logical_operator'", ":", "self", ".", "operator", ".", "union", ",", "\n", "'filter_operator'", ":", "self", ".", "operator", ".", "filter_type", ",", "\n", "'find_operator'", ":", "[", "self", ".", "operator", ".", "find", ",", "self", ".", "operator", ".", "find_reverse", "]", ",", "\n", "'entity'", ":", "entity", ",", "\n", "'relation'", ":", "relation", ",", "\n", "'type'", ":", "typ", ",", "\n", "'gold'", ":", "set", "(", "system", "[", "'all_entities'", "]", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.clarification.Clarification.__init__": [[12, 16], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "simple", ",", "quantitative", ",", "comparative", ")", ":", "\n", "        ", "self", ".", "simple", "=", "simple", "\n", "self", ".", "quantitative", "=", "quantitative", "\n", "self", ".", "comparative", "=", "comparative", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.clarification.Clarification.__call__": [[17, 49], ["Exception", "Exception", "clarification.Clarification.simple.simple_question_single_entity", "clarification.Clarification.comparative.comparative_single_entity", "clarification.Clarification.quantitative.quantitative_simple_single_type", "clarification.Clarification.comparative.comparative_single_entity", "clarification.Clarification.quantitative.quantitative_simple_multi_type", "clarification.Clarification.comparative.comparative_multi_entities", "clarification.Clarification.comparative.comparative_multi_entities"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.simple.Simple.simple_question_single_entity", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.comparative.Comparative.comparative_single_entity", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.quantitative.Quantitative.quantitative_simple_single_type", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.comparative.Comparative.comparative_single_entity", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.quantitative.Quantitative.quantitative_simple_multi_type", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.comparative.Comparative.comparative_multi_entities", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.comparative.Comparative.comparative_multi_entities"], ["", "def", "__call__", "(", "self", ",", "conv_chunk", ")", ":", "\n", "# Clarification", "\n", "        ", "if", "'description'", "not", "in", "conv_chunk", "[", "'user'", "]", ":", "\n", "            ", "raise", "Exception", "(", "f'No description for question:\\n{conv_chunk[\"user\"]}'", ")", "\n", "\n", "", "if", "conv_chunk", "[", "'user'", "]", "[", "'description'", "]", "!=", "'Simple Question|Single Entity|Indirect'", ":", "\n", "            ", "return", "conv_chunk", "[", "'user'", "]", ",", "conv_chunk", "[", "'next_system'", "]", "\n", "\n", "", "if", "conv_chunk", "[", "'user'", "]", "[", "'description'", "]", "==", "'Simple Question|Single Entity|Indirect'", ":", "\n", "            ", "return", "self", ".", "simple", ".", "simple_question_single_entity", "(", "conv_chunk", "[", "'user'", "]", ",", "conv_chunk", "[", "'next_system'", "]", ")", "\n", "\n", "", "if", "conv_chunk", "[", "'user'", "]", "[", "'description'", "]", "==", "'Comparative|More/Less|Single entity type|Indirect'", ":", "\n", "            ", "prev_ent", "=", "conv_chunk", "[", "'system'", "]", "[", "'entities_in_utterance'", "]", "if", "conv_chunk", "[", "'next_user'", "]", "[", "'utterance'", "]", "==", "'Yes'", "else", "conv_chunk", "[", "'next_user'", "]", "[", "'entities'", "]", "\n", "return", "self", ".", "comparative", ".", "comparative_single_entity", "(", "conv_chunk", "[", "'user'", "]", ",", "conv_chunk", "[", "'next_system'", "]", ",", "prev_ent", "=", "prev_ent", "[", "0", "]", ")", "\n", "\n", "", "if", "conv_chunk", "[", "'user'", "]", "[", "'description'", "]", "==", "'Quantitative|Count|Single entity type|Indirect'", ":", "\n", "            ", "return", "self", ".", "quantitative", ".", "quantitative_simple_single_type", "(", "conv_chunk", "[", "'user'", "]", ",", "conv_chunk", "[", "'next_system'", "]", ")", "\n", "\n", "", "if", "conv_chunk", "[", "'user'", "]", "[", "'description'", "]", "==", "'Comparative|Count over More/Less|Single entity type|Indirect'", ":", "\n", "            ", "prev_ent", "=", "conv_chunk", "[", "'system'", "]", "[", "'entities_in_utterance'", "]", "if", "conv_chunk", "[", "'next_user'", "]", "[", "'utterance'", "]", "==", "'Yes'", "else", "conv_chunk", "[", "'next_user'", "]", "[", "'entities'", "]", "\n", "return", "self", ".", "comparative", ".", "comparative_single_entity", "(", "conv_chunk", "[", "'user'", "]", ",", "conv_chunk", "[", "'next_system'", "]", ",", "prev_ent", "=", "prev_ent", "[", "0", "]", ",", "is_count", "=", "True", ")", "\n", "\n", "", "if", "conv_chunk", "[", "'user'", "]", "[", "'description'", "]", "==", "'Quantitative|Count|Logical operators|Indirect'", ":", "\n", "            ", "return", "self", ".", "quantitative", ".", "quantitative_simple_multi_type", "(", "conv_chunk", "[", "'user'", "]", ",", "conv_chunk", "[", "'next_system'", "]", ")", "\n", "\n", "", "if", "conv_chunk", "[", "'user'", "]", "[", "'description'", "]", "==", "'Comparative|Count over More/Less|Mult. entity type|Indirect'", ":", "\n", "            ", "return", "self", ".", "comparative", ".", "comparative_multi_entities", "(", "conv_chunk", "[", "'user'", "]", ",", "conv_chunk", "[", "'next_system'", "]", ",", "prev_ent", "=", "conv_chunk", "[", "'prev_system'", "]", "[", "'entities_in_utterance'", "]", "[", "0", "]", ",", "is_count", "=", "True", ")", "\n", "\n", "", "if", "conv_chunk", "[", "'user'", "]", "[", "'description'", "]", "==", "'Comparative|More/Less|Mult. entity type|Indirect'", ":", "\n", "            ", "return", "self", ".", "comparative", ".", "comparative_multi_entities", "(", "conv_chunk", "[", "'user'", "]", ",", "conv_chunk", "[", "'next_system'", "]", ",", "prev_ent", "=", "conv_chunk", "[", "'prev_system'", "]", "[", "'entities_in_utterance'", "]", "[", "0", "]", ")", "\n", "\n", "", "raise", "Exception", "(", "f'Description could not be found: {conv_chunk[\"user\"][\"description\"]}'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.logical.Logical.__init__": [[14, 16], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "operator", ")", ":", "\n", "        ", "self", ".", "operator", "=", "operator", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.logical.Logical.__call__": [[17, 50], ["Exception", "Exception", "logical.Logical.logical", "logical.Logical.logical", "logical.Logical.logical", "logical.Logical.logical", "logical.Logical.logical", "logical.Logical.logical", "logical.Logical.logical", "logical.Logical.logical", "logical.Logical.logical"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.logical.Logical.logical", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.logical.Logical.logical", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.logical.Logical.logical", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.logical.Logical.logical", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.logical.Logical.logical", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.logical.Logical.logical", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.logical.Logical.logical", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.logical.Logical.logical", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.logical.Logical.logical"], ["", "def", "__call__", "(", "self", ",", "user", ",", "system", ")", ":", "\n", "# Logical Reasoning (All)", "\n", "        ", "if", "'description'", "not", "in", "user", ":", "\n", "            ", "raise", "Exception", "(", "f'No description for question:\\n{user}'", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Logical|Difference|Multiple_Relation'", ":", "\n", "            ", "return", "self", ".", "logical", "(", "user", ",", "system", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Logical|Union|Single_Relation'", ":", "\n", "            ", "return", "self", ".", "logical", "(", "user", ",", "system", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Logical|Union|Multiple_Relation'", ":", "\n", "            ", "return", "self", ".", "logical", "(", "user", ",", "system", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Logical|Intersection|Single_Relation|Incomplete'", ":", "\n", "            ", "return", "self", ".", "logical", "(", "user", ",", "system", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Logical|Difference|Single_Relation|Incomplete'", ":", "\n", "            ", "return", "self", ".", "logical", "(", "user", ",", "system", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Logical|Difference|Single_Relation'", ":", "\n", "            ", "return", "self", ".", "logical", "(", "user", ",", "system", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Logical|Intersection|Single_Relation'", ":", "\n", "            ", "return", "self", ".", "logical", "(", "user", ",", "system", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Logical|Intersection|Multiple_Relation'", ":", "\n", "            ", "return", "self", ".", "logical", "(", "user", ",", "system", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Logical|Union|Single_Relation|Incomplete'", ":", "\n", "            ", "return", "self", ".", "logical", "(", "user", ",", "system", ")", "\n", "\n", "", "raise", "Exception", "(", "f'Description could not be found: {user[\"description\"]}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.logical.Logical.logical": [[51, 86], ["logical.Logical.parse_logical", "logical_operator", "filter_operator"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.logical.Logical.parse_logical"], ["", "def", "logical", "(", "self", ",", "user", ",", "system", ")", ":", "\n", "# parse input", "\n", "        ", "data", "=", "self", ".", "parse_logical", "(", "user", ",", "system", ")", "\n", "\n", "# extract values", "\n", "logical_operator", "=", "data", "[", "'logical_operator'", "]", "\n", "filter_operator", "=", "data", "[", "'filter_operator'", "]", "\n", "first_set", "=", "data", "[", "'first_set'", "]", "\n", "second_set", "=", "data", "[", "'second_set'", "]", "\n", "typ", "=", "data", "[", "'type'", "]", "\n", "gold", "=", "data", "[", "'gold'", "]", "\n", "\n", "# get results", "\n", "set_1", "=", "first_set", "[", "'find_operator'", "]", "(", "first_set", "[", "'entity'", "]", ",", "first_set", "[", "'relation'", "]", ")", "\n", "set_2", "=", "second_set", "[", "'find_operator'", "]", "(", "second_set", "[", "'entity'", "]", ",", "second_set", "[", "'relation'", "]", ")", "\n", "set_result", "=", "logical_operator", "(", "set_1", ",", "set_2", ")", "\n", "result", "=", "filter_operator", "(", "set_result", ",", "typ", ")", "\n", "\n", "assert", "gold", "==", "result", "\n", "\n", "system", "[", "'gold_actions'", "]", "=", "[", "\n", "[", "'action'", ",", "filter_operator", ".", "__name__", "]", ",", "\n", "[", "'action'", ",", "logical_operator", ".", "__name__", "]", ",", "\n", "[", "'action'", ",", "first_set", "[", "'find_operator'", "]", ".", "__name__", "]", ",", "\n", "[", "'entity'", ",", "first_set", "[", "'entity'", "]", "]", ",", "\n", "[", "'relation'", ",", "first_set", "[", "'relation'", "]", "]", ",", "\n", "[", "'action'", ",", "second_set", "[", "'find_operator'", "]", ".", "__name__", "]", ",", "\n", "[", "'entity'", ",", "second_set", "[", "'entity'", "]", "]", ",", "\n", "[", "'relation'", ",", "second_set", "[", "'relation'", "]", "]", ",", "\n", "[", "'type'", ",", "typ", "]", ",", "\n", "]", "\n", "\n", "system", "[", "'is_spurious'", "]", "=", "False", "if", "gold", "==", "result", "else", "True", "\n", "\n", "return", "user", ",", "system", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.logical.Logical.parse_logical": [[87, 117], ["len", "[].startswith", "[].split", "logical.Logical.parse_active_set", "logical.Logical.parse_active_set", "[].startswith", "set", "active_set[].replace", "[].split", "logical.Logical.parse_active_set", "logical.Logical.parse_active_set", "[].startswith", "active_set[].replace", "[].split", "logical.Logical.parse_active_set", "logical.Logical.parse_active_set", "Exception", "active_set[].replace"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.logical.Logical.parse_active_set", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.logical.Logical.parse_active_set", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.logical.Logical.parse_active_set", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.logical.Logical.parse_active_set", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.logical.Logical.parse_active_set", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.logical.Logical.parse_active_set"], ["", "def", "parse_logical", "(", "self", ",", "user", ",", "system", ")", ":", "\n", "        ", "assert", "len", "(", "system", "[", "'active_set'", "]", ")", "==", "1", "\n", "\n", "if", "system", "[", "'active_set'", "]", "[", "0", "]", ".", "startswith", "(", "'AND'", ")", "and", "'NOT'", "in", "system", "[", "'active_set'", "]", "[", "0", "]", ":", "# Difference", "\n", "            ", "logical_operator", "=", "self", ".", "operator", ".", "difference", "\n", "active_set", "=", "system", "[", "'active_set'", "]", "[", "0", "]", ".", "split", "(", "', NOT'", ")", "\n", "first_set", "=", "self", ".", "parse_active_set", "(", "active_set", "[", "0", "]", ".", "replace", "(", "'AND('", ",", "''", ")", ")", "\n", "second_set", "=", "self", ".", "parse_active_set", "(", "active_set", "[", "1", "]", "[", "1", ":", "-", "2", "]", ")", "\n", "", "elif", "system", "[", "'active_set'", "]", "[", "0", "]", ".", "startswith", "(", "'OR'", ")", ":", "# Union", "\n", "            ", "logical_operator", "=", "self", ".", "operator", ".", "union", "\n", "active_set", "=", "system", "[", "'active_set'", "]", "[", "0", "]", ".", "split", "(", "', '", ")", "\n", "first_set", "=", "self", ".", "parse_active_set", "(", "active_set", "[", "0", "]", ".", "replace", "(", "'OR('", ",", "''", ")", ")", "\n", "second_set", "=", "self", ".", "parse_active_set", "(", "active_set", "[", "1", "]", "[", ":", "-", "1", "]", ")", "\n", "", "elif", "system", "[", "'active_set'", "]", "[", "0", "]", ".", "startswith", "(", "'AND'", ")", ":", "# Intersection", "\n", "            ", "logical_operator", "=", "self", ".", "operator", ".", "intersection", "\n", "active_set", "=", "system", "[", "'active_set'", "]", "[", "0", "]", ".", "split", "(", "', '", ")", "\n", "first_set", "=", "self", ".", "parse_active_set", "(", "active_set", "[", "0", "]", ".", "replace", "(", "'AND('", ",", "''", ")", ")", "\n", "second_set", "=", "self", ".", "parse_active_set", "(", "active_set", "[", "1", "]", "[", ":", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "f'Wrong active set {user}'", ")", "\n", "\n", "", "assert", "first_set", "[", "'type'", "]", "==", "second_set", "[", "'type'", "]", "\n", "\n", "return", "{", "\n", "'logical_operator'", ":", "logical_operator", ",", "\n", "'filter_operator'", ":", "self", ".", "operator", ".", "filter_type", ",", "\n", "'first_set'", ":", "first_set", ",", "\n", "'second_set'", ":", "second_set", ",", "\n", "'type'", ":", "first_set", "[", "'type'", "]", ",", "\n", "'gold'", ":", "set", "(", "system", "[", "'all_entities'", "]", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.logical.Logical.parse_active_set": [[119, 139], ["active_set[].split", "active_set_splited[].startswith", "active_set_splited[].startswith", "Exception"], "methods", ["None"], ["", "def", "parse_active_set", "(", "self", ",", "active_set", ")", ":", "\n", "        ", "active_set_splited", "=", "active_set", "[", "1", ":", "-", "1", "]", ".", "split", "(", "','", ")", "\n", "if", "active_set_splited", "[", "0", "]", ".", "startswith", "(", "'c'", ")", ":", "\n", "            ", "find_operator", "=", "self", ".", "operator", ".", "find_reverse", "\n", "entity", "=", "active_set_splited", "[", "2", "]", "\n", "relation", "=", "active_set_splited", "[", "1", "]", "\n", "typ", "=", "active_set_splited", "[", "0", "]", "[", "2", ":", "-", "1", "]", "\n", "", "elif", "active_set_splited", "[", "0", "]", ".", "startswith", "(", "'Q'", ")", ":", "\n", "            ", "find_operator", "=", "self", ".", "operator", ".", "find", "\n", "entity", "=", "active_set_splited", "[", "0", "]", "\n", "relation", "=", "active_set_splited", "[", "1", "]", "\n", "typ", "=", "active_set_splited", "[", "2", "]", "[", "2", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "f\"Can not parse active set: {active_set}\"", ")", "\n", "\n", "", "return", "{", "\n", "'find_operator'", ":", "find_operator", ",", "\n", "'entity'", ":", "entity", ",", "\n", "'relation'", ":", "relation", ",", "\n", "'type'", ":", "typ", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.verification.Verification.__init__": [[11, 13], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "operator", ")", ":", "\n", "        ", "self", ".", "operator", "=", "operator", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.verification.Verification.__call__": [[14, 35], ["Exception", "verification.Verification.verification_multi_entities", "verification.Verification.verification_multi_entities", "verification.Verification.verification_direct", "verification.Verification.verification_direct", "verification.Verification.verification_direct", "verification.Verification.verification_indirect"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.verification.Verification.verification_multi_entities", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.verification.Verification.verification_multi_entities", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.verification.Verification.verification_direct", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.verification.Verification.verification_direct", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.verification.Verification.verification_direct", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.verification.Verification.verification_indirect"], ["", "def", "__call__", "(", "self", ",", "user", ",", "system", ",", "prev_system", ")", ":", "\n", "# Verification (Boolean) (All)", "\n", "        ", "if", "user", "[", "'description'", "]", "==", "'Verification|3 entities, 2 direct, 2(direct) are query entities, subject is indirect'", ":", "\n", "            ", "return", "self", ".", "verification_multi_entities", "(", "user", ",", "system", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Verification|3 entities, all direct, 2 are query entities'", ":", "\n", "            ", "return", "self", ".", "verification_multi_entities", "(", "user", ",", "system", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Verification|2 entities, one direct and one indirect, object is indirect'", ":", "\n", "            ", "return", "self", ".", "verification_direct", "(", "user", ",", "system", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Verification|2 entities, one direct and one indirect, subject is indirect'", ":", "\n", "            ", "return", "self", ".", "verification_direct", "(", "user", ",", "system", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Verification|2 entities, both direct'", ":", "\n", "            ", "return", "self", ".", "verification_direct", "(", "user", ",", "system", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Verification|one entity, multiple entities (as object) referred indirectly'", ":", "\n", "            ", "return", "self", ".", "verification_indirect", "(", "user", ",", "system", ",", "prev_ent", "=", "prev_system", "[", "'entities_in_utterance'", "]", ")", "\n", "\n", "", "raise", "Exception", "(", "f'Description could not be found: {user[\"description\"]}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.verification.Verification.verification_direct": [[36, 72], ["verification.Verification.parse_verification_direct", "list", "find", "verification_operator", "reversed"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.verification.Verification.parse_verification_direct", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.actions.ActionOperator.find"], ["", "def", "verification_direct", "(", "self", ",", "user", ",", "system", ")", ":", "\n", "# parse input", "\n", "        ", "data", "=", "self", ".", "parse_verification_direct", "(", "user", ",", "system", ")", "\n", "\n", "# extract values", "\n", "verification_operator", "=", "data", "[", "'verification_operator'", "]", "\n", "find_operator", "=", "data", "[", "'find_operator'", "]", "\n", "entities", "=", "data", "[", "'entities'", "]", "\n", "relation", "=", "data", "[", "'relation'", "]", "\n", "gold", "=", "data", "[", "'gold'", "]", "\n", "\n", "# get results", "\n", "for", "find", "in", "find_operator", ":", "\n", "            ", "for", "entities_", "in", "[", "entities", ",", "list", "(", "reversed", "(", "entities", ")", ")", "]", ":", "\n", "                ", "set_ent", "=", "find", "(", "entities_", "[", "0", "]", ",", "relation", ")", "\n", "result", "=", "verification_operator", "(", "[", "entities_", "[", "1", "]", "]", ",", "set_ent", ")", "\n", "if", "gold", "==", "result", ":", "\n", "                    ", "find_operator", "=", "find", "\n", "entities", "=", "[", "entities_", "[", "0", "]", ",", "entities_", "[", "1", "]", "]", "\n", "break", "\n", "", "", "if", "gold", "==", "result", ":", "\n", "                ", "break", "\n", "\n", "", "", "assert", "gold", "==", "result", "\n", "\n", "system", "[", "'gold_actions'", "]", "=", "[", "\n", "[", "'action'", ",", "verification_operator", ".", "__name__", "]", ",", "\n", "[", "'entity'", ",", "entities", "[", "1", "]", "]", ",", "\n", "[", "'action'", ",", "find_operator", ".", "__name__", "]", ",", "\n", "[", "'entity'", ",", "entities", "[", "0", "]", "]", ",", "\n", "[", "'relation'", ",", "relation", "]", "\n", "]", "\n", "\n", "system", "[", "'is_spurious'", "]", "=", "False", "if", "gold", "==", "result", "else", "True", "\n", "\n", "return", "user", ",", "system", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.verification.Verification.verification_multi_entities": [[73, 109], ["verification.Verification.parse_verification_multi_entities", "find_operator", "find_operator", "logical_operator", "verification_operator"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.verification.Verification.parse_verification_multi_entities"], ["", "def", "verification_multi_entities", "(", "self", ",", "user", ",", "system", ")", ":", "\n", "# parse input", "\n", "        ", "data", "=", "self", ".", "parse_verification_multi_entities", "(", "user", ",", "system", ")", "\n", "\n", "# extract values", "\n", "verification_operator", "=", "data", "[", "'verification_operator'", "]", "\n", "logical_operator", "=", "data", "[", "'logical_operator'", "]", "\n", "find_operator", "=", "data", "[", "'find_operator'", "]", "\n", "base_entity", "=", "data", "[", "'base_entity'", "]", "\n", "relation", "=", "data", "[", "'relation'", "]", "\n", "entities", "=", "data", "[", "'entities'", "]", "\n", "gold", "=", "data", "[", "'gold'", "]", "\n", "\n", "# get results", "\n", "ent_1", "=", "find_operator", "(", "entities", "[", "0", "]", ",", "relation", ")", "\n", "ent_2", "=", "find_operator", "(", "entities", "[", "1", "]", ",", "relation", ")", "\n", "intersection", "=", "logical_operator", "(", "ent_1", ",", "ent_2", ")", "\n", "result", "=", "verification_operator", "(", "[", "base_entity", "]", ",", "intersection", ")", "\n", "\n", "assert", "gold", "==", "result", "\n", "\n", "system", "[", "'gold_actions'", "]", "=", "[", "\n", "[", "'action'", ",", "verification_operator", ".", "__name__", "]", ",", "\n", "[", "'entity'", ",", "base_entity", "]", ",", "\n", "[", "'action'", ",", "logical_operator", ".", "__name__", "]", ",", "\n", "[", "'action'", ",", "find_operator", ".", "__name__", "]", ",", "\n", "[", "'entity'", ",", "entities", "[", "0", "]", "]", ",", "\n", "[", "'relation'", ",", "relation", "]", ",", "\n", "[", "'action'", ",", "find_operator", ".", "__name__", "]", ",", "\n", "[", "'entity'", ",", "entities", "[", "1", "]", "]", ",", "\n", "[", "'relation'", ",", "relation", "]", "\n", "]", "\n", "\n", "system", "[", "'is_spurious'", "]", "=", "False", "if", "gold", "==", "result", "else", "True", "\n", "\n", "return", "user", ",", "system", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.verification.Verification.verification_indirect": [[110, 143], ["verification.Verification.parse_verification_indirect", "find", "verification_operator"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.verification.Verification.parse_verification_indirect", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.actions.ActionOperator.find"], ["", "def", "verification_indirect", "(", "self", ",", "user", ",", "system", ",", "prev_ent", ")", ":", "\n", "# parse input", "\n", "        ", "data", "=", "self", ".", "parse_verification_indirect", "(", "user", ",", "system", ",", "prev_ent", ")", "\n", "\n", "# extract values", "\n", "verification_operator", "=", "data", "[", "'verification_operator'", "]", "\n", "find_operator", "=", "data", "[", "'find_operator'", "]", "\n", "base_entity", "=", "data", "[", "'base_entity'", "]", "\n", "relation", "=", "data", "[", "'relation'", "]", "\n", "entities", "=", "data", "[", "'entities'", "]", "\n", "gold", "=", "data", "[", "'gold'", "]", "\n", "\n", "# get results", "\n", "for", "find", "in", "find_operator", ":", "\n", "            ", "set_ent", "=", "find", "(", "base_entity", ",", "relation", ")", "\n", "result", "=", "verification_operator", "(", "entities", ",", "set_ent", ")", "\n", "if", "gold", "==", "result", ":", "\n", "                ", "find_operator", "=", "find", "\n", "break", "\n", "\n", "", "", "assert", "gold", "==", "result", "\n", "\n", "system", "[", "'gold_actions'", "]", "=", "[", "\n", "[", "'action'", ",", "verification_operator", ".", "__name__", "]", ",", "\n", "[", "'entity'", ",", "'prev_answer'", "]", ",", "\n", "[", "'action'", ",", "find_operator", ".", "__name__", "]", ",", "\n", "[", "'entity'", ",", "base_entity", "]", ",", "\n", "[", "'relation'", ",", "relation", "]", "\n", "]", "\n", "\n", "system", "[", "'is_spurious'", "]", "=", "False", "if", "gold", "==", "result", "else", "True", "\n", "\n", "return", "user", ",", "system", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.verification.Verification.parse_verification_direct": [[144, 154], ["len", "len"], "methods", ["None"], ["", "def", "parse_verification_direct", "(", "self", ",", "user", ",", "system", ")", ":", "\n", "        ", "assert", "len", "(", "user", "[", "'entities_in_utterance'", "]", ")", "==", "2", "\n", "assert", "len", "(", "user", "[", "'relations'", "]", ")", "==", "1", "\n", "\n", "return", "{", "\n", "'verification_operator'", ":", "self", ".", "operator", ".", "is_in", ",", "\n", "'find_operator'", ":", "[", "self", ".", "operator", ".", "find", ",", "self", ".", "operator", ".", "find_reverse", "]", ",", "\n", "'entities'", ":", "user", "[", "'entities_in_utterance'", "]", ",", "\n", "'relation'", ":", "user", "[", "'relations'", "]", "[", "0", "]", ",", "\n", "'gold'", ":", "True", "if", "system", "[", "'utterance'", "]", "==", "'YES'", "else", "False", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.verification.Verification.parse_verification_multi_entities": [[156, 183], ["[].split", "[].split", "len", "Exception"], "methods", ["None"], ["", "def", "parse_verification_multi_entities", "(", "self", ",", "user", ",", "system", ")", ":", "\n", "        ", "assert", "len", "(", "system", "[", "'active_set'", "]", ")", "==", "2", "\n", "\n", "active_set_1", "=", "system", "[", "'active_set'", "]", "[", "0", "]", "[", "1", ":", "-", "1", "]", ".", "split", "(", "','", ")", "\n", "active_set_2", "=", "system", "[", "'active_set'", "]", "[", "1", "]", "[", "1", ":", "-", "1", "]", ".", "split", "(", "','", ")", "\n", "\n", "if", "active_set_1", "[", "0", "]", "==", "active_set_2", "[", "0", "]", ":", "\n", "            ", "find_operator", "=", "self", ".", "operator", ".", "find_reverse", "\n", "base_entity", "=", "active_set_1", "[", "0", "]", "\n", "relation", "=", "active_set_1", "[", "1", "]", "\n", "entities", "=", "[", "active_set_1", "[", "-", "1", "]", ",", "active_set_2", "[", "-", "1", "]", "]", "\n", "", "elif", "active_set_1", "[", "-", "1", "]", "==", "active_set_2", "[", "-", "1", "]", ":", "\n", "            ", "find_operator", "=", "self", ".", "operator", ".", "find", "\n", "base_entity", "=", "active_set_1", "[", "-", "1", "]", "\n", "relation", "=", "active_set_1", "[", "1", "]", "\n", "entities", "=", "[", "active_set_1", "[", "0", "]", ",", "active_set_2", "[", "0", "]", "]", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "f'Wrong active set {user}'", ")", "\n", "\n", "", "return", "{", "\n", "'verification_operator'", ":", "self", ".", "operator", ".", "is_in", ",", "\n", "'logical_operator'", ":", "self", ".", "operator", ".", "intersection", ",", "\n", "'find_operator'", ":", "find_operator", ",", "\n", "'base_entity'", ":", "base_entity", ",", "\n", "'relation'", ":", "relation", ",", "\n", "'entities'", ":", "entities", ",", "\n", "'gold'", ":", "True", "if", "system", "[", "'utterance'", "]", "==", "'YES'", "else", "False", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.verification.Verification.parse_verification_indirect": [[185, 196], ["len", "len"], "methods", ["None"], ["", "def", "parse_verification_indirect", "(", "self", ",", "user", ",", "system", ",", "prev_ent", ")", ":", "\n", "        ", "assert", "len", "(", "user", "[", "'entities_in_utterance'", "]", ")", "==", "1", "\n", "assert", "len", "(", "user", "[", "'relations'", "]", ")", "==", "1", "\n", "\n", "return", "{", "\n", "'verification_operator'", ":", "self", ".", "operator", ".", "is_in", ",", "\n", "'find_operator'", ":", "[", "self", ".", "operator", ".", "find", ",", "self", ".", "operator", ".", "find_reverse", "]", ",", "\n", "'base_entity'", ":", "user", "[", "'entities_in_utterance'", "]", "[", "0", "]", ",", "\n", "'relation'", ":", "user", "[", "'relations'", "]", "[", "0", "]", ",", "\n", "'entities'", ":", "prev_ent", ",", "\n", "'gold'", ":", "True", "if", "system", "[", "'utterance'", "]", "==", "'YES'", "else", "False", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.comparative.Comparative.__init__": [[19, 21], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "operator", ")", ":", "\n", "        ", "self", ".", "operator", "=", "operator", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.comparative.Comparative.__call__": [[22, 66], ["Exception", "comparative.Comparative.comparative_single_entity", "comparative.Comparative.comparative_multi_entities", "comparative.Comparative.comparative_single_entity", "comparative.Comparative.comparative_multi_entities", "comparative.Comparative.comparative_multi_entities", "comparative.Comparative.comparative_single_entity", "comparative.Comparative.comparative_single_entity", "comparative.Comparative.comparative_multi_entities", "comparative.Comparative.comparative_single_entity", "comparative.Comparative.comparative_multi_entities", "comparative.Comparative.comparative_single_entity", "comparative.Comparative.comparative_multi_entities"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.comparative.Comparative.comparative_single_entity", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.comparative.Comparative.comparative_multi_entities", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.comparative.Comparative.comparative_single_entity", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.comparative.Comparative.comparative_multi_entities", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.comparative.Comparative.comparative_multi_entities", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.comparative.Comparative.comparative_single_entity", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.comparative.Comparative.comparative_single_entity", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.comparative.Comparative.comparative_multi_entities", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.comparative.Comparative.comparative_single_entity", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.comparative.Comparative.comparative_multi_entities", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.comparative.Comparative.comparative_single_entity", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.comparative.Comparative.comparative_multi_entities"], ["", "def", "__call__", "(", "self", ",", "user", ",", "system", ",", "prev_user", ",", "prev_system", ")", ":", "\n", "# Clarification questions, will be handled from clarification class", "\n", "        ", "if", "'description'", "not", "in", "user", ":", "\n", "            ", "return", "user", ",", "system", "\n", "\n", "# Comparative Reasoning (All)", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Comparative|More/Less|Single entity type'", ":", "\n", "            ", "return", "self", ".", "comparative_single_entity", "(", "user", ",", "system", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Comparative|More/Less|Mult. entity type'", ":", "\n", "            ", "return", "self", ".", "comparative_multi_entities", "(", "user", ",", "system", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Comparative|More/Less|Single entity type|Indirect'", ":", "\n", "            ", "return", "self", ".", "comparative_single_entity", "(", "user", ",", "system", ",", "prev_ent", "=", "prev_system", "[", "'entities_in_utterance'", "]", "[", "0", "]", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Comparative|More/Less|Mult. entity type|Incomplete'", ":", "\n", "            ", "return", "self", ".", "comparative_multi_entities", "(", "user", ",", "system", ",", "prev_q", "=", "prev_user", "[", "'utterance'", "]", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Comparative|More/Less|Mult. entity type|Indirect'", ":", "\n", "            ", "return", "self", ".", "comparative_multi_entities", "(", "user", ",", "system", ",", "prev_ent", "=", "prev_system", "[", "'entities_in_utterance'", "]", "[", "0", "]", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Comparative|More/Less|Single entity type|Incomplete'", ":", "\n", "            ", "return", "self", ".", "comparative_single_entity", "(", "user", ",", "system", ",", "prev_q", "=", "prev_user", "[", "'utterance'", "]", ")", "\n", "\n", "# Comparative Reasoning (Count) (All)", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Comparative|Count over More/Less|Single entity type|Incomplete'", ":", "\n", "            ", "return", "self", ".", "comparative_single_entity", "(", "user", ",", "system", ",", "prev_q", "=", "prev_user", "[", "'utterance'", "]", ",", "is_count", "=", "True", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Comparative|Count over More/Less|Mult. entity type'", ":", "\n", "            ", "return", "self", ".", "comparative_multi_entities", "(", "user", ",", "system", ",", "is_count", "=", "True", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Comparative|Count over More/Less|Single entity type|Indirect'", ":", "\n", "            ", "return", "self", ".", "comparative_single_entity", "(", "user", ",", "system", ",", "prev_ent", "=", "prev_system", "[", "'entities_in_utterance'", "]", "[", "0", "]", ",", "is_count", "=", "True", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Comparative|Count over More/Less|Mult. entity type|Indirect'", ":", "\n", "            ", "return", "self", ".", "comparative_multi_entities", "(", "user", ",", "system", ",", "prev_ent", "=", "prev_system", "[", "'entities_in_utterance'", "]", "[", "0", "]", ",", "is_count", "=", "True", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Comparative|Count over More/Less|Single entity type'", ":", "\n", "            ", "return", "self", ".", "comparative_single_entity", "(", "user", ",", "system", ",", "is_count", "=", "True", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Comparative|Count over More/Less|Mult. entity type|Incomplete'", ":", "\n", "            ", "return", "self", ".", "comparative_multi_entities", "(", "user", ",", "system", ",", "prev_q", "=", "prev_user", "[", "'utterance'", "]", ",", "is_count", "=", "True", ")", "\n", "\n", "", "raise", "Exception", "(", "f'Description could not be found: {user[\"description\"]}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.comparative.Comparative.comparative_single_entity": [[67, 116], ["comparative.Comparative.parse_comparative_single_entity", "comparative.Comparative.get_comparative_single_entity_results", "gold.issubset", "gold.issubset", "system[].insert", "set", "gold.issubset", "type_dict.keys"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.comparative.Comparative.parse_comparative_single_entity", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.comparative.Comparative.get_comparative_single_entity_results"], ["", "def", "comparative_single_entity", "(", "self", ",", "user", ",", "system", ",", "prev_q", "=", "None", ",", "prev_ent", "=", "None", ",", "is_count", "=", "False", ")", ":", "\n", "# parse input", "\n", "        ", "data", "=", "self", ".", "parse_comparative_single_entity", "(", "user", ",", "system", ",", "prev_q", ",", "prev_ent", ")", "\n", "\n", "# get results", "\n", "data", "=", "self", ".", "get_comparative_single_entity_results", "(", "data", ",", "user", "[", "'utterance'", "]", "if", "not", "prev_q", "else", "prev_q", ")", "\n", "\n", "# for some comparative single entity we do not have results at all, we need to exclude them", "\n", "if", "not", "data", ":", "\n", "            ", "system", "[", "'is_spurious'", "]", "=", "True", "\n", "return", "user", ",", "system", "\n", "\n", "# extract values", "\n", "", "count_operator", "=", "data", "[", "'count_operator'", "]", "\n", "comperative_operator", "=", "data", "[", "'comperative_operator'", "]", "\n", "filter_operator", "=", "data", "[", "'filter_operator'", "]", "\n", "tuple_operator", "=", "data", "[", "'tuple_operator'", "]", "\n", "find_operator", "=", "data", "[", "'find_operator'", "]", "\n", "entity", "=", "data", "[", "'entity'", "]", "\n", "relation", "=", "data", "[", "'relation'", "]", "\n", "ent_type", "=", "data", "[", "'ent_type'", "]", "\n", "type_1", "=", "data", "[", "'type_1'", "]", "\n", "type_2", "=", "data", "[", "'type_2'", "]", "\n", "gold", "=", "data", "[", "'gold'", "]", "\n", "type_dict", "=", "data", "[", "'type_dict'", "]", "\n", "result", "=", "data", "[", "'result'", "]", "\n", "\n", "assert", "gold", "==", "result", "or", "gold", ".", "issubset", "(", "result", ")", "or", "gold", ".", "issubset", "(", "set", "(", "type_dict", ".", "keys", "(", ")", ")", ")", "\n", "\n", "system", "[", "'gold_actions'", "]", "=", "[", "\n", "[", "'action'", ",", "comperative_operator", ".", "__name__", "]", ",", "\n", "[", "'action'", ",", "tuple_operator", ".", "__name__", "]", ",", "\n", "[", "'relation'", ",", "relation", "]", ",", "\n", "[", "'type'", ",", "type_1", "]", ",", "\n", "[", "'type'", ",", "type_2", "]", ",", "\n", "[", "'action'", ",", "count_operator", ".", "__name__", "]", ",", "\n", "[", "'action'", ",", "filter_operator", ".", "__name__", "]", ",", "\n", "[", "'action'", ",", "find_operator", ".", "__name__", "]", ",", "\n", "[", "'entity'", ",", "entity", "]", ",", "\n", "[", "'relation'", ",", "relation", "]", ",", "\n", "[", "'type'", ",", "ent_type", "]", "\n", "]", "\n", "\n", "if", "is_count", ":", "\n", "            ", "system", "[", "'gold_actions'", "]", ".", "insert", "(", "0", ",", "[", "'action'", ",", "count_operator", ".", "__name__", "]", ")", "\n", "\n", "", "system", "[", "'is_spurious'", "]", "=", "False", "if", "gold", "==", "result", "or", "gold", ".", "issubset", "(", "result", ")", "else", "True", "\n", "\n", "return", "user", ",", "system", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.comparative.Comparative.comparative_multi_entities": [[117, 172], ["comparative.Comparative.parse_comparative_multi_entities", "find_operator", "filter_operator", "count_operator", "tuple_operator", "tuple_operator", "logical_operator", "comperative_operator", "gold.issubset", "gold.issubset", "system[].insert", "set", "gold.issubset", "logical_operator.keys"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.comparative.Comparative.parse_comparative_multi_entities"], ["", "def", "comparative_multi_entities", "(", "self", ",", "user", ",", "system", ",", "prev_q", "=", "None", ",", "prev_ent", "=", "None", ",", "is_count", "=", "False", ")", ":", "\n", "# parse input", "\n", "        ", "data", "=", "self", ".", "parse_comparative_multi_entities", "(", "user", ",", "system", ",", "prev_q", ",", "prev_ent", ")", "\n", "\n", "# extract values", "\n", "count_operator", "=", "data", "[", "'count_operator'", "]", "\n", "comperative_operator", "=", "data", "[", "'comperative_operator'", "]", "\n", "filter_operator", "=", "data", "[", "'filter_operator'", "]", "\n", "logical_operator", "=", "data", "[", "'logical_operator'", "]", "\n", "tuple_operator", "=", "data", "[", "'tuple_operator'", "]", "\n", "find_operator", "=", "data", "[", "'find_operator'", "]", "\n", "entity", "=", "data", "[", "'entity'", "]", "\n", "relation", "=", "data", "[", "'relation'", "]", "\n", "base_type", "=", "data", "[", "'base_type'", "]", "\n", "type_1", "=", "data", "[", "'type_1'", "]", "\n", "type_2", "=", "data", "[", "'type_2'", "]", "\n", "gold", "=", "data", "[", "'gold'", "]", "\n", "\n", "# get results", "\n", "ent", "=", "find_operator", "(", "entity", ",", "relation", ")", "\n", "filter_ent", "=", "filter_operator", "(", "ent", ",", "type_1", ",", "type_2", ")", "\n", "ent_count", "=", "count_operator", "(", "filter_ent", ")", "\n", "type_dict_1", "=", "tuple_operator", "(", "relation", ",", "base_type", ",", "type_1", ")", "\n", "type_dict_2", "=", "tuple_operator", "(", "relation", ",", "base_type", ",", "type_2", ")", "\n", "type_dict", "=", "logical_operator", "(", "type_dict_1", ",", "type_dict_2", ")", "\n", "result", "=", "comperative_operator", "(", "type_dict", ",", "ent_count", ")", "\n", "\n", "assert", "gold", "==", "result", "or", "gold", ".", "issubset", "(", "result", ")", "or", "gold", ".", "issubset", "(", "set", "(", "type_dict", ".", "keys", "(", ")", ")", ")", "\n", "\n", "system", "[", "'gold_actions'", "]", "=", "[", "\n", "[", "'action'", ",", "comperative_operator", ".", "__name__", "]", ",", "\n", "[", "'action'", ",", "logical_operator", ".", "__name__", "]", ",", "\n", "[", "'action'", ",", "tuple_operator", ".", "__name__", "]", ",", "\n", "[", "'relation'", ",", "relation", "]", ",", "\n", "[", "'type'", ",", "base_type", "]", ",", "\n", "[", "'type'", ",", "type_1", "]", ",", "\n", "[", "'action'", ",", "tuple_operator", ".", "__name__", "]", ",", "\n", "[", "'relation'", ",", "relation", "]", ",", "\n", "[", "'type'", ",", "base_type", "]", ",", "\n", "[", "'type'", ",", "type_2", "]", ",", "\n", "[", "'action'", ",", "count_operator", ".", "__name__", "]", ",", "\n", "[", "'action'", ",", "filter_operator", ".", "__name__", "]", ",", "\n", "[", "'action'", ",", "find_operator", ".", "__name__", "]", ",", "\n", "[", "'entity'", ",", "entity", "]", ",", "\n", "[", "'relation'", ",", "relation", "]", ",", "\n", "[", "'type'", ",", "type_1", "]", ",", "\n", "[", "'type'", ",", "type_2", "]", "\n", "]", "\n", "\n", "if", "is_count", ":", "\n", "            ", "system", "[", "'gold_actions'", "]", ".", "insert", "(", "0", ",", "[", "'action'", ",", "count_operator", ".", "__name__", "]", ")", "\n", "\n", "", "system", "[", "'is_spurious'", "]", "=", "False", "if", "gold", "==", "result", "or", "gold", ".", "issubset", "(", "result", ")", "else", "True", "\n", "\n", "return", "user", ",", "system", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.comparative.Comparative.parse_comparative_single_entity": [[173, 196], ["[].split", "len", "len", "comparative.Comparative.get_comperative_operator", "set", "len"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.comparative.Comparative.get_comperative_operator"], ["", "def", "parse_comparative_single_entity", "(", "self", ",", "user", ",", "system", ",", "prev_q", ",", "prev_ent", ")", ":", "\n", "        ", "assert", "len", "(", "user", "[", "'relations'", "]", ")", "==", "1", "\n", "assert", "len", "(", "user", "[", "'type_list'", "]", ")", "==", "2", "\n", "assert", "len", "(", "user", "[", "'entities_in_utterance'", "]", ")", "==", "1", "or", "prev_ent", "!=", "None", "\n", "\n", "active_set", "=", "system", "[", "'active_set'", "]", "[", "0", "]", "[", "1", ":", "-", "1", "]", ".", "split", "(", "','", ")", "\n", "\n", "entity", "=", "user", "[", "'entities_in_utterance'", "]", "[", "0", "]", "if", "user", "[", "'entities_in_utterance'", "]", "else", "prev_ent", "\n", "relation", "=", "user", "[", "'relations'", "]", "[", "0", "]", "\n", "type_1", "=", "user", "[", "'type_list'", "]", "[", "0", "]", "\n", "type_2", "=", "user", "[", "'type_list'", "]", "[", "1", "]", "\n", "\n", "return", "{", "\n", "'count_operator'", ":", "self", ".", "operator", ".", "count", ",", "\n", "'comperative_operator'", ":", "self", ".", "get_comperative_operator", "(", "user", ",", "prev_q", ")", ",", "\n", "'filter_operator'", ":", "self", ".", "operator", ".", "filter_type", ",", "\n", "'tuple_operator'", ":", "[", "self", ".", "operator", ".", "find_tuple_counts", ",", "self", ".", "operator", ".", "find_reverse_tuple_counts", "]", ",", "\n", "'find_operator'", ":", "[", "self", ".", "operator", ".", "find", ",", "self", ".", "operator", ".", "find_reverse", "]", ",", "\n", "'entity'", ":", "entity", ",", "\n", "'relation'", ":", "relation", ",", "\n", "'type_1'", ":", "type_1", ",", "\n", "'type_2'", ":", "type_2", ",", "\n", "'gold'", ":", "set", "(", "system", "[", "'all_entities'", "]", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.comparative.Comparative.parse_comparative_multi_entities": [[198, 241], ["[].split", "len", "len", "active_set[].index", "set", "set", "comparative.Comparative.get_comperative_operator", "set", "len", "active_set[].index", "Exception"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.comparative.Comparative.get_comperative_operator"], ["", "def", "parse_comparative_multi_entities", "(", "self", ",", "user", ",", "system", ",", "prev_q", ",", "prev_ent", ")", ":", "\n", "        ", "assert", "len", "(", "user", "[", "'relations'", "]", ")", "==", "1", "\n", "assert", "len", "(", "user", "[", "'type_list'", "]", ")", "==", "3", "\n", "assert", "len", "(", "user", "[", "'entities_in_utterance'", "]", ")", "==", "1", "or", "prev_ent", "!=", "None", "\n", "\n", "active_set", "=", "system", "[", "'active_set'", "]", "[", "0", "]", "[", "1", ":", "-", "1", "]", ".", "split", "(", "','", ")", "\n", "\n", "entity", "=", "user", "[", "'entities_in_utterance'", "]", "[", "0", "]", "if", "user", "[", "'entities_in_utterance'", "]", "else", "prev_ent", "\n", "relation", "=", "active_set", "[", "1", "]", "\n", "\n", "if", "'|'", "in", "active_set", "[", "0", "]", ":", "\n", "            ", "find_operator", "=", "self", ".", "operator", ".", "find_reverse", "\n", "tuple_operator", "=", "self", ".", "operator", ".", "find_reverse_tuple_counts", "\n", "base_type", "=", "active_set", "[", "-", "1", "]", "[", "2", ":", "-", "1", "]", "\n", "sep_idx", "=", "active_set", "[", "0", "]", ".", "index", "(", "'|'", ")", "\n", "type_1", "=", "active_set", "[", "0", "]", "[", "2", ":", "sep_idx", "-", "1", "]", "\n", "type_2", "=", "active_set", "[", "0", "]", "[", "sep_idx", "+", "3", ":", "-", "1", "]", "\n", "", "elif", "'|'", "in", "active_set", "[", "-", "1", "]", ":", "\n", "            ", "find_operator", "=", "self", ".", "operator", ".", "find", "\n", "tuple_operator", "=", "self", ".", "operator", ".", "find_tuple_counts", "\n", "base_type", "=", "active_set", "[", "0", "]", "[", "2", ":", "-", "1", "]", "\n", "sep_idx", "=", "active_set", "[", "-", "1", "]", ".", "index", "(", "'|'", ")", "\n", "type_1", "=", "active_set", "[", "-", "1", "]", "[", "2", ":", "sep_idx", "-", "1", "]", "\n", "type_2", "=", "active_set", "[", "-", "1", "]", "[", "sep_idx", "+", "3", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "f'Wrong active set {user}'", ")", "\n", "\n", "", "assert", "set", "(", "[", "base_type", ",", "type_1", ",", "type_2", "]", ")", "==", "set", "(", "user", "[", "'type_list'", "]", ")", ",", "f'Active set and type list are inconsistent: {user, system}'", "\n", "assert", "relation", "in", "user", "[", "'relations'", "]", ",", "f'Active set and relation list are inconsistent: {user, system}'", "\n", "\n", "return", "{", "\n", "'count_operator'", ":", "self", ".", "operator", ".", "count", ",", "\n", "'comperative_operator'", ":", "self", ".", "get_comperative_operator", "(", "user", ",", "prev_q", ")", ",", "\n", "'filter_operator'", ":", "self", ".", "operator", ".", "filter_multi_types", ",", "\n", "'tuple_operator'", ":", "tuple_operator", ",", "\n", "'logical_operator'", ":", "self", ".", "operator", ".", "union", ",", "\n", "'find_operator'", ":", "find_operator", ",", "\n", "'entity'", ":", "entity", ",", "\n", "'relation'", ":", "relation", ",", "\n", "'base_type'", ":", "base_type", ",", "\n", "'type_1'", ":", "type_1", ",", "\n", "'type_2'", ":", "type_2", ",", "\n", "'gold'", ":", "set", "(", "system", "[", "'all_entities'", "]", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.comparative.Comparative.get_comparative_single_entity_results": [[243, 309], ["to", "gold.issubset", "to", "gold.issubset", "Exception", "len", "dict", "dict", "find", "filter_operator", "count_operator", "set", "comperative_operator", "gold.issubset", "dict", "user_utterance.split", "user_utterance.split", "to.keys", "symmetric_difference.append", "len", "len", "sorted", "len", "gold.symmetric_difference"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.actions.ActionOperator.find"], ["", "def", "get_comparative_single_entity_results", "(", "self", ",", "data", ",", "user_utterance", ")", ":", "\n", "# extract values", "\n", "        ", "count_operator", "=", "data", "[", "'count_operator'", "]", "\n", "comperative_operator", "=", "data", "[", "'comperative_operator'", "]", "\n", "filter_operator", "=", "data", "[", "'filter_operator'", "]", "\n", "tuple_operator", "=", "data", "[", "'tuple_operator'", "]", "\n", "find_operator", "=", "data", "[", "'find_operator'", "]", "\n", "entity", "=", "data", "[", "'entity'", "]", "\n", "relation", "=", "data", "[", "'relation'", "]", "\n", "type_1", "=", "data", "[", "'type_1'", "]", "\n", "type_2", "=", "data", "[", "'type_2'", "]", "\n", "gold", "=", "data", "[", "'gold'", "]", "\n", "\n", "# find correct tuple_dict", "\n", "for", "to", "in", "tuple_operator", ":", "\n", "            ", "type_dict", "=", "to", "(", "relation", ",", "type_1", ",", "type_2", ")", "\n", "if", "gold", ".", "issubset", "(", "type_dict", ")", ":", "\n", "                ", "tuple_operator", "=", "to", "\n", "break", "\n", "", "type_dict", "=", "to", "(", "relation", ",", "type_2", ",", "type_1", ")", "\n", "if", "gold", ".", "issubset", "(", "type_dict", ")", ":", "\n", "                ", "type_1", ",", "type_2", "=", "type_2", ",", "type_1", "\n", "tuple_operator", "=", "to", "\n", "break", "\n", "", "type_dict", "=", "None", "\n", "\n", "", "if", "type_dict", "==", "None", ":", "\n", "            ", "raise", "Exception", "(", "f'Could not find correct type_dict: {user_utterance}'", ")", "\n", "\n", "", "symmetric_difference", "=", "[", "]", "\n", "for", "find", "in", "find_operator", ":", "\n", "            ", "for", "typ", "in", "[", "type_1", ",", "type_2", "]", ":", "\n", "                ", "ent", "=", "find", "(", "entity", ",", "relation", ")", "\n", "filter_ent", "=", "filter_operator", "(", "ent", ",", "typ", ")", "\n", "count", "=", "count_operator", "(", "filter_ent", ")", "\n", "if", "'approximately'", "in", "user_utterance", ".", "split", "(", ")", "or", "'around'", "in", "user_utterance", ".", "split", "(", ")", ":", "\n", "                    ", "result", "=", "set", "(", "type_dict", ".", "keys", "(", ")", ")", "\n", "", "else", ":", "\n", "                    ", "result", "=", "comperative_operator", "(", "type_dict", ",", "count", ")", "\n", "# if len(result) == 0:", "\n", "#     continue", "\n", "", "new_data", "=", "{", "\n", "'tuple_operator'", ":", "tuple_operator", ",", "\n", "'find_operator'", ":", "find", ",", "\n", "'ent_type'", ":", "typ", ",", "\n", "'type_1'", ":", "type_1", ",", "\n", "'type_2'", ":", "type_2", ",", "\n", "'type_dict'", ":", "type_dict", ",", "\n", "'result'", ":", "result", "\n", "}", "\n", "if", "gold", "==", "result", "or", "gold", ".", "issubset", "(", "result", ")", ":", "\n", "                    ", "return", "dict", "(", "data", ",", "**", "new_data", ")", "\n", "", "elif", "len", "(", "result", ")", ">", "0", "or", "len", "(", "ent", ")", ">", "0", ":", "\n", "# else:", "\n", "                    ", "symmetric_difference", ".", "append", "(", "[", "new_data", ",", "len", "(", "gold", ".", "symmetric_difference", "(", "result", ")", ")", "]", ")", "\n", "\n", "# If none of the above worked then there is a problem with the question.", "\n", "# In this case we return the result with the lowest symmetric_difference from our gold.", "\n", "# A problematic question is: Which administrative territories have diplomatic relationships with less number of administrative territories than Honduras ?", "\n", "# Where on gold we have 25 entities and all of them have 0 count but one has 15 (on our type_dict).", "\n", "# Our comperative operator is (<) and the filtered entity is count 1, wich means we can find 24 gold entities except the one with count 15!!!", "\n", "# Therefore questions like this cannot be queried even though we have the correct query/logical form/action.", "\n", "", "", "", "if", "len", "(", "symmetric_difference", ")", ">", "0", ":", "\n", "            ", "return", "dict", "(", "data", ",", "**", "sorted", "(", "symmetric_difference", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.action_annotators.comparative.Comparative.get_comperative_operator": [[310, 332], ["question.split", "question.split", "question.split", "question.split", "question.split", "question.split", "question.split", "question.split", "Exception"], "methods", ["None"], ["", "", "def", "get_comperative_operator", "(", "self", ",", "user", ",", "prev_q", ")", ":", "\n", "        ", "question", "=", "prev_q", "if", "prev_q", "!=", "None", "else", "user", "[", "'utterance'", "]", "\n", "if", "'more'", "in", "question", ".", "split", "(", ")", ":", "\n", "            ", "operator", "=", "self", ".", "operator", ".", "greater", "\n", "", "elif", "'greater'", "in", "question", ".", "split", "(", ")", ":", "\n", "            ", "operator", "=", "self", ".", "operator", ".", "greater", "\n", "", "elif", "'less'", "in", "question", ".", "split", "(", ")", ":", "\n", "            ", "operator", "=", "self", ".", "operator", ".", "less", "\n", "", "elif", "'lesser'", "in", "question", ".", "split", "(", ")", ":", "\n", "            ", "operator", "=", "self", ".", "operator", ".", "less", "\n", "", "elif", "'equal'", "in", "question", ".", "split", "(", ")", ":", "\n", "            ", "operator", "=", "self", ".", "operator", ".", "equal", "\n", "", "elif", "'exactly'", "in", "question", ".", "split", "(", ")", ":", "\n", "            ", "operator", "=", "self", ".", "operator", ".", "equal", "\n", "", "elif", "'approximately'", "in", "question", ".", "split", "(", ")", ":", "\n", "            ", "operator", "=", "self", ".", "operator", ".", "approx", "\n", "", "elif", "'around'", "in", "question", ".", "split", "(", ")", ":", "\n", "            ", "operator", "=", "self", ".", "operator", ".", "approx", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "f'Unkown quantitative operator for question: {user[\"utterance\"]}'", ")", "\n", "\n", "", "return", "operator", "\n", "", "", ""]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.annotate.NERAnnotator.__init__": [[22, 36], ["annotate.NERAnnotator._read_preprocessed_data", "ner_annotators.simple.Simple", "ner_annotators.verification.Verification", "ner_annotators.quantitative.Quantitative", "ner_annotators.logical.Logical", "ner_annotators.comparative.Comparative", "ner_annotators.clarification.Clarification", "transformers.BertTokenizer.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.annotate.NERAnnotator._read_preprocessed_data"], ["self", ".", "logical_annotator", "=", "Logical", "(", "self", ".", "operator", ")", "\n", "self", ".", "comparative_annotator", "=", "Comparative", "(", "self", ".", "operator", ")", "\n", "self", ".", "clarification_annotator", "=", "Clarification", "(", "self", ".", "simple_annotator", ",", "self", ".", "quantitative_annotator", ",", "self", ".", "comparative_annotator", ")", "\n", "\n", "", "def", "__call__", "(", "self", ",", "conversation", ")", ":", "\n", "# process conversation", "\n", "        ", "prev_user", "=", "None", "\n", "prev_system", "=", "None", "\n", "new_conversation", "=", "[", "]", "\n", "\n", "is_clarification", "=", "False", "\n", "turns", "=", "len", "(", "conversation", ")", "//", "2", "\n", "\n", "for", "i", "in", "range", "(", "turns", ")", ":", "\n", "            ", "if", "is_clarification", ":", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.annotate.NERAnnotator._read_preprocessed_data": [[37, 69], ["glob.glob.glob", "glob.glob.glob", "glob.glob.glob", "glob.glob.glob", "zip", "preprocessed_data[].extend", "preprocessed_data[].extend", "preprocessed_data[].extend", "preprocessed_data[].extend", "[].rsplit", "[].rsplit", "line.rstrip", "line.rstrip", "line.rstrip", "line.rstrip", "len", "len", "open", "open", "open", "open", "[].rsplit", "c_path.rsplit", "c_path.rsplit"], "methods", ["None"], ["                ", "is_clarification", "=", "False", "\n", "continue", "\n", "", "user", "=", "conversation", "[", "2", "*", "i", "]", "\n", "system", "=", "conversation", "[", "2", "*", "i", "+", "1", "]", "\n", "\n", "if", "user", "[", "'question-type'", "]", "in", "[", "'Simple Question (Direct)'", ",", "'Simple Question (Coreferenced)'", ",", "'Simple Question (Ellipsis)'", "]", ":", "\n", "                ", "user", ",", "system", "=", "self", ".", "simple_annotator", "(", "user", ",", "system", ")", "\n", "", "elif", "user", "[", "'question-type'", "]", "==", "'Verification (Boolean) (All)'", ":", "\n", "                ", "user", ",", "system", "=", "self", ".", "verification_annotator", "(", "user", ",", "system", ",", "prev_system", ")", "\n", "", "elif", "user", "[", "'question-type'", "]", "in", "[", "'Quantitative Reasoning (Count) (All)'", ",", "'Quantitative Reasoning (All)'", "]", ":", "\n", "                ", "user", ",", "system", "=", "self", ".", "quantitative_annotator", "(", "user", ",", "system", ")", "\n", "", "elif", "user", "[", "'question-type'", "]", "==", "'Logical Reasoning (All)'", ":", "\n", "                ", "user", ",", "system", "=", "self", ".", "logical_annotator", "(", "user", ",", "system", ")", "\n", "", "elif", "user", "[", "'question-type'", "]", "in", "[", "'Comparative Reasoning (Count) (All)'", ",", "'Comparative Reasoning (All)'", "]", ":", "\n", "                ", "user", ",", "system", "=", "self", ".", "comparative_annotator", "(", "user", ",", "system", ",", "prev_user", ",", "prev_system", ")", "\n", "", "elif", "user", "[", "'question-type'", "]", "==", "'Clarification'", ":", "\n", "                ", "is_clarification", "=", "True", "\n", "next_user", "=", "conversation", "[", "2", "*", "(", "i", "+", "1", ")", "]", "\n", "next_system", "=", "conversation", "[", "2", "*", "(", "i", "+", "1", ")", "+", "1", "]", "\n", "user", ",", "next_system", "=", "self", ".", "clarification_annotator", "(", "{", "\n", "'prev_user'", ":", "prev_user", ",", "\n", "'prev_system'", ":", "prev_system", ",", "\n", "'user'", ":", "user", ",", "\n", "'system'", ":", "system", ",", "\n", "'next_user'", ":", "next_user", ",", "\n", "'next_system'", ":", "next_system", "\n", "}", ")", "\n", "", "else", ":", "\n", "                ", "raise", "Exception", "(", "f'Unknown question type: {user}'", ")", "\n", "\n", "", "prev_user", "=", "user", "\n", "prev_system", "=", "system", "\n", "new_conversation", ".", "append", "(", "user", ")", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.annotate.NERAnnotator.__call__": [[70, 130], ["range", "len", "unidecode.unidecode.unidecode", "unidecode.unidecode.unidecode", "new_conversation.append", "new_conversation.append", "annotate.NERAnnotator.simple_annotator", "new_conversation.append", "new_conversation.append", "annotate.NERAnnotator.verification_annotator", "annotate.NERAnnotator.quantitative_annotator", "annotate.NERAnnotator.logical_annotator", "annotate.NERAnnotator.comparative_annotator", "unidecode.unidecode.unidecode", "unidecode.unidecode.unidecode", "annotate.NERAnnotator.clarification_annotator", "Exception"], "methods", ["None"], ["new_conversation", ".", "append", "(", "system", ")", "\n", "\n", "if", "is_clarification", ":", "\n", "                ", "prev_user", "=", "next_user", "\n", "prev_system", "=", "next_system", "\n", "new_conversation", ".", "append", "(", "next_user", ")", "\n", "new_conversation", ".", "append", "(", "next_system", ")", "\n", "\n", "", "", "return", "new_conversation", "", "", "", ""]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.quantitative.Quantitative.__init__": [[21, 23], ["ner_annotators.ner_base.NERBase.__init__"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.comparative.Comparative.__init__"], ["    ", "def", "__init__", "(", "self", ",", "operator", ")", ":", "\n", "        ", "self", ".", "operator", "=", "operator", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.quantitative.Quantitative.__call__": [[24, 71], ["Exception", "quantitative.Quantitative.indirect_question", "quantitative.Quantitative.indirect_question", "quantitative.Quantitative.indirect_question", "quantitative.Quantitative.indirect_question", "quantitative.Quantitative.new_direct_question", "quantitative.Quantitative.new_direct_question", "quantitative.Quantitative.new_direct_question", "quantitative.Quantitative.indirect_question", "quantitative.Quantitative.indirect_question", "quantitative.Quantitative.ellipsis_question", "quantitative.Quantitative.indirect_question", "quantitative.Quantitative.indirect_question", "quantitative.Quantitative.ellipsis_question"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.indirect_question", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.indirect_question", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.indirect_question", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.indirect_question", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.new_direct_question", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.new_direct_question", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.new_direct_question", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.indirect_question", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.indirect_question", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.ellipsis_question", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.indirect_question", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.indirect_question", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.ellipsis_question"], ["", "def", "__call__", "(", "self", ",", "user", ",", "system", ")", ":", "\n", "# Clarification questions, will be handled from clarification class", "\n", "        ", "if", "'description'", "not", "in", "user", ":", "\n", "            ", "return", "user", ",", "system", "\n", "\n", "# Quantitative Reasoning (All)", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Quantitative|Min/Max|Single entity type'", ":", "\n", "            ", "return", "self", ".", "quantitative_complex_single_type", "(", "user", ",", "system", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Quantitative|Min/Max|Mult. entity type'", ":", "\n", "            ", "return", "self", ".", "quantitative_complex_multi_type", "(", "user", ",", "system", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Quantitative|Atleast/ Atmost/ Approx. the same/Equal|Mult. entity type'", ":", "\n", "            ", "return", "self", ".", "quantitative_complex_multi_type", "(", "user", ",", "system", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Quantitative|Atleast/ Atmost/ Approx. the same/Equal|Single entity type'", ":", "\n", "            ", "return", "self", ".", "quantitative_complex_single_type", "(", "user", ",", "system", ")", "\n", "\n", "# Quantitative Reasoning (Count) (All)", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Quantitative|Count|Logical operators'", ":", "\n", "            ", "return", "self", ".", "quantitative_simple_multi_type", "(", "user", ",", "system", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Quantitative|Count|Mult. entity type'", ":", "\n", "            ", "return", "self", ".", "quantitative_simple_multi_type", "(", "user", ",", "system", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Quantitative|Count|Single entity type'", ":", "\n", "            ", "return", "self", ".", "quantitative_simple_single_type", "(", "user", ",", "system", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Quantitative|Count|Single entity type|Indirect'", ":", "\n", "            ", "return", "self", ".", "quantitative_simple_single_type", "(", "user", ",", "system", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Quantitative|Count|Logical operators|Indirect'", ":", "\n", "            ", "return", "self", ".", "quantitative_simple_multi_type", "(", "user", ",", "system", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Quantitative|Count|Single entity type|Incomplete'", ":", "\n", "            ", "return", "self", ".", "quantitative_simple_single_type", "(", "user", ",", "system", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Quantitative|Count over Atleast/ Atmost/ Approx. the same/Equal|Mult. entity type'", ":", "\n", "            ", "return", "self", ".", "quantitative_complex_multi_type", "(", "user", ",", "system", ",", "True", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Quantitative|Count over Atleast/ Atmost/ Approx. the same/Equal|Single entity type'", ":", "\n", "            ", "return", "self", ".", "quantitative_complex_single_type", "(", "user", ",", "system", ",", "True", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Incomplete count-based ques'", ":", "\n", "            ", "return", "self", ".", "quantitative_simple_single_type", "(", "user", ",", "system", ")", "\n", "\n", "", "raise", "Exception", "(", "f'Description could not be found: {user[\"description\"]}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.simple.Simple.__init__": [[17, 19], ["ner_annotators.ner_base.NERBase.__init__"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.comparative.Comparative.__init__"], ["        ", "self", ".", "operator", "=", "operator", "\n", "\n", "", "def", "__call__", "(", "self", ",", "user", ",", "system", ")", ":", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.simple.Simple.__call__": [[20, 50], ["Exception", "simple.Simple.new_direct_question", "simple.Simple.new_direct_question", "simple.Simple.new_direct_question", "simple.Simple.indirect_question", "simple.Simple.indirect_question", "simple.Simple.ellipsis_question", "simple.Simple.ellipsis_question"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.new_direct_question", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.new_direct_question", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.new_direct_question", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.indirect_question", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.indirect_question", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.ellipsis_question", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.ellipsis_question"], ["# Clarification questions, will be handled from clarification class", "\n", "        ", "if", "'description'", "not", "in", "user", ":", "\n", "            ", "return", "user", ",", "system", "\n", "\n", "# Simple Question (Direct)", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Simple Question|Single Entity'", ":", "\n", "            ", "return", "self", ".", "simple_question_single_entity", "(", "user", ",", "system", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Simple Question'", ":", "\n", "            ", "return", "self", ".", "simple_question_single_entity", "(", "user", ",", "system", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Simple Question|Mult. Entity|Indirect'", ":", "\n", "            ", "return", "self", ".", "simple_question_multi_entities", "(", "user", ",", "system", ")", "\n", "\n", "# Simple Question (Coreferenced)", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Simple Question|Mult. Entity'", ":", "\n", "            ", "return", "self", ".", "simple_question_multi_entities", "(", "user", ",", "system", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Simple Question|Single Entity|Indirect'", ":", "\n", "            ", "return", "self", ".", "simple_question_single_entity", "(", "user", ",", "system", ")", "\n", "\n", "# Simple Question (Ellipsis)", "\n", "", "if", "user", "[", "'description'", "]", "==", "'only subject is changed, parent and predicate remains same'", ":", "\n", "            ", "return", "self", ".", "simple_question_ellipsis", "(", "user", ",", "system", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Incomplete|object parent is changed, subject and predicate remain same'", ":", "\n", "            ", "return", "self", ".", "simple_question_ellipsis", "(", "user", ",", "system", ")", "\n", "\n", "", "raise", "Exception", "(", "f'Description could not be found: {user[\"description\"]}'", ")", "\n", "\n", "", "def", "simple_question_single_entity", "(", "self", ",", "user", ",", "system", ")", ":", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.clarification.Clarification.__init__": [[13, 18], ["ner_annotators.ner_base.NERBase.__init__"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.comparative.Comparative.__init__"], ["        ", "self", ".", "simple", "=", "simple", "\n", "self", ".", "quantitative", "=", "quantitative", "\n", "self", ".", "comparative", "=", "comparative", "\n", "\n", "", "def", "__call__", "(", "self", ",", "conv_chunk", ")", ":", "\n", "# Clarification", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.clarification.Clarification.__call__": [[19, 60], ["Exception", "Exception", "clarification.Clarification.indirect_question", "clarification.Clarification.clarification_question", "clarification.Clarification.indirect_question", "clarification.Clarification.clarification_question", "clarification.Clarification.indirect_question", "clarification.Clarification.clarification_question", "clarification.Clarification.indirect_question", "clarification.Clarification.clarification_question", "clarification.Clarification.indirect_question", "clarification.Clarification.clarification_question", "clarification.Clarification.indirect_question", "clarification.Clarification.clarification_question", "clarification.Clarification.indirect_question", "clarification.Clarification.clarification_question"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.indirect_question", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.clarification_question", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.indirect_question", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.clarification_question", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.indirect_question", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.clarification_question", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.indirect_question", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.clarification_question", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.indirect_question", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.clarification_question", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.indirect_question", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.clarification_question", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.indirect_question", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.clarification_question"], ["        ", "if", "'description'", "not", "in", "conv_chunk", "[", "'user'", "]", ":", "\n", "            ", "raise", "Exception", "(", "f'No description for question:\\n{conv_chunk[\"user\"]}'", ")", "\n", "\n", "", "if", "conv_chunk", "[", "'user'", "]", "[", "'description'", "]", "!=", "'Simple Question|Single Entity|Indirect'", ":", "\n", "            ", "return", "conv_chunk", "[", "'user'", "]", ",", "conv_chunk", "[", "'next_system'", "]", "\n", "\n", "", "if", "conv_chunk", "[", "'user'", "]", "[", "'description'", "]", "==", "'Simple Question|Single Entity|Indirect'", ":", "\n", "            ", "return", "self", ".", "simple", ".", "simple_question_single_entity", "(", "conv_chunk", "[", "'user'", "]", ",", "conv_chunk", "[", "'next_system'", "]", ")", "\n", "\n", "", "if", "conv_chunk", "[", "'user'", "]", "[", "'description'", "]", "==", "'Comparative|More/Less|Single entity type|Indirect'", ":", "\n", "            ", "prev_ent", "=", "conv_chunk", "[", "'system'", "]", "[", "'entities_in_utterance'", "]", "if", "conv_chunk", "[", "'next_user'", "]", "[", "'utterance'", "]", "==", "'Yes'", "else", "conv_chunk", "[", "'next_user'", "]", "[", "'entities'", "]", "\n", "return", "self", ".", "comparative", ".", "comparative_single_entity", "(", "conv_chunk", "[", "'user'", "]", ",", "conv_chunk", "[", "'next_system'", "]", ",", "prev_ent", "=", "prev_ent", "[", "0", "]", ")", "\n", "\n", "", "if", "conv_chunk", "[", "'user'", "]", "[", "'description'", "]", "==", "'Quantitative|Count|Single entity type|Indirect'", ":", "\n", "            ", "return", "self", ".", "quantitative", ".", "quantitative_simple_single_type", "(", "conv_chunk", "[", "'user'", "]", ",", "conv_chunk", "[", "'next_system'", "]", ")", "\n", "\n", "", "if", "conv_chunk", "[", "'user'", "]", "[", "'description'", "]", "==", "'Comparative|Count over More/Less|Single entity type|Indirect'", ":", "\n", "            ", "prev_ent", "=", "conv_chunk", "[", "'system'", "]", "[", "'entities_in_utterance'", "]", "if", "conv_chunk", "[", "'next_user'", "]", "[", "'utterance'", "]", "==", "'Yes'", "else", "conv_chunk", "[", "'next_user'", "]", "[", "'entities'", "]", "\n", "return", "self", ".", "comparative", ".", "comparative_single_entity", "(", "conv_chunk", "[", "'user'", "]", ",", "conv_chunk", "[", "'next_system'", "]", ",", "prev_ent", "=", "prev_ent", "[", "0", "]", ",", "is_count", "=", "True", ")", "\n", "\n", "", "if", "conv_chunk", "[", "'user'", "]", "[", "'description'", "]", "==", "'Quantitative|Count|Logical operators|Indirect'", ":", "\n", "            ", "return", "self", ".", "quantitative", ".", "quantitative_simple_multi_type", "(", "conv_chunk", "[", "'user'", "]", ",", "conv_chunk", "[", "'next_system'", "]", ")", "\n", "\n", "", "if", "conv_chunk", "[", "'user'", "]", "[", "'description'", "]", "==", "'Comparative|Count over More/Less|Mult. entity type|Indirect'", ":", "\n", "            ", "return", "self", ".", "comparative", ".", "comparative_multi_entities", "(", "conv_chunk", "[", "'user'", "]", ",", "conv_chunk", "[", "'next_system'", "]", ",", "prev_ent", "=", "conv_chunk", "[", "'prev_system'", "]", "[", "'entities_in_utterance'", "]", "[", "0", "]", ",", "is_count", "=", "True", ")", "\n", "\n", "", "if", "conv_chunk", "[", "'user'", "]", "[", "'description'", "]", "==", "'Comparative|More/Less|Mult. entity type|Indirect'", ":", "\n", "            ", "return", "self", ".", "comparative", ".", "comparative_multi_entities", "(", "conv_chunk", "[", "'user'", "]", ",", "conv_chunk", "[", "'next_system'", "]", ",", "prev_ent", "=", "conv_chunk", "[", "'prev_system'", "]", "[", "'entities_in_utterance'", "]", "[", "0", "]", ")", "\n", "\n", "", "raise", "Exception", "(", "f'Description could not be found: {conv_chunk[\"user\"][\"description\"]}'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.__init__": [[3, 7], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "kg", ",", "preprocessed_data", ",", "tokenizer", ")", ":", "\n", "        ", "self", ".", "kg", "=", "kg", "\n", "self", ".", "preprocessed_data", "=", "preprocessed_data", "\n", "self", ".", "tokenizer", "=", "tokenizer", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.find_entity_in_utterance": [[8, 15], ["len", "enumerate", "results.append"], "methods", ["None"], ["", "def", "find_entity_in_utterance", "(", "self", ",", "entity", ",", "utterance", ")", ":", "\n", "        ", "results", "=", "[", "]", "\n", "ent_len", "=", "len", "(", "entity", ")", "\n", "for", "ind", "in", "(", "i", "for", "i", ",", "e", "in", "enumerate", "(", "utterance", ")", "if", "e", "==", "entity", "[", "0", "]", ")", ":", "\n", "            ", "if", "utterance", "[", "ind", ":", "ind", "+", "ent_len", "]", "==", "entity", ":", "\n", "                ", "results", ".", "append", "(", "(", "ind", ",", "ind", "+", "ent_len", "-", "1", ")", ")", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.new_direct_question": [[16, 61], ["unidecode.unidecode.unidecode", "ner_base.NERBase.tokenizer", "enumerate", "ner_base.NERBase.get_system_context", "user[].lower", "ner_base.NERBase.tokenizer", "ent_data.items", "utter_context.append", "unidecode.unidecode.unidecode", "ner_base.NERBase.find_entity_in_utterance", "ner_base.NERBase.log_error", "ner_base.NERBase.get_type", "ent_label.lower", "print", "ner_base.NERBase.log_error", "list", "range"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.get_system_context", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.find_entity_in_utterance", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.log_error", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.get_type", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.log_error"], ["", "def", "new_direct_question", "(", "self", ",", "user", ",", "system", ",", "is_verification", "=", "False", ")", ":", "\n", "        ", "utterance", "=", "unidecode", "(", "user", "[", "'utterance'", "]", ".", "lower", "(", ")", ")", "\n", "entities", "=", "user", "[", "'entities_in_utterance'", "]", "\n", "\n", "context", "=", "self", ".", "tokenizer", "(", "utterance", ")", "\n", "ent_data", "=", "{", "}", "\n", "for", "entity", "in", "entities", ":", "\n", "            ", "ent_label", "=", "self", ".", "kg", ".", "id_entity", "[", "entity", "]", "\n", "tok_ent", "=", "self", ".", "tokenizer", "(", "unidecode", "(", "ent_label", ".", "lower", "(", ")", ")", ")", "\n", "try", ":", "\n", "                ", "ent_in_utter", "=", "self", ".", "find_entity_in_utterance", "(", "tok_ent", ",", "context", ")", "\n", "", "except", "Exception", "as", "ex", ":", "\n", "                ", "print", "(", "ex", ")", "\n", "self", ".", "log_error", "(", "'Entity not found on utterance'", ",", "user", "[", "'utterance'", "]", ")", "\n", "user", "[", "'is_ner_spurious'", "]", "=", "True", "\n", "system", "[", "'is_ner_spurious'", "]", "=", "True", "\n", "return", "user", ",", "system", "\n", "", "if", "not", "is_verification", "and", "not", "ent_in_utter", ":", "\n", "                ", "self", ".", "log_error", "(", "'Entity not found on utterance'", ",", "user", "[", "'utterance'", "]", ")", "\n", "user", "[", "'is_ner_spurious'", "]", "=", "True", "\n", "system", "[", "'is_ner_spurious'", "]", "=", "True", "\n", "return", "user", ",", "system", "\n", "", "ent_data", "[", "entity", "]", "=", "{", "\n", "'type'", ":", "self", ".", "get_type", "(", "entity", ")", ",", "\n", "'ent_label'", ":", "ent_label", ",", "\n", "'tok_ent'", ":", "tok_ent", ",", "\n", "'indices'", ":", "list", "(", "range", "(", "ent_in_utter", "[", "0", "]", "[", "0", "]", ",", "ent_in_utter", "[", "0", "]", "[", "1", "]", "+", "1", ")", ")", "if", "ent_in_utter", "else", "[", "]", "\n", "}", "\n", "\n", "", "utter_context", "=", "[", "]", "\n", "for", "i", ",", "word", "in", "enumerate", "(", "context", ")", ":", "\n", "            ", "word_context", "=", "[", "i", ",", "word", ",", "'NA'", ",", "'NA'", ",", "'O'", "]", "\n", "for", "ent", ",", "data", "in", "ent_data", ".", "items", "(", ")", ":", "\n", "                ", "if", "i", "in", "data", "[", "'indices'", "]", ":", "\n", "                    ", "word_context", "[", "-", "1", "]", "=", "'B'", "if", "data", "[", "'indices'", "]", "and", "i", "==", "data", "[", "'indices'", "]", "[", "0", "]", "else", "'I'", "\n", "word_context", "[", "-", "2", "]", "=", "data", "[", "'type'", "]", "\n", "word_context", "[", "-", "3", "]", "=", "ent", "\n", "", "", "utter_context", ".", "append", "(", "word_context", ")", "\n", "\n", "", "user", "[", "'context'", "]", "=", "utter_context", "\n", "system", "[", "'context'", "]", "=", "self", ".", "get_system_context", "(", "system", ")", "\n", "user", "[", "'is_ner_spurious'", "]", "=", "False", "\n", "system", "[", "'is_ner_spurious'", "]", "=", "False", "\n", "\n", "return", "user", ",", "system", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.direct_question": [[62, 124], ["ner_base.NERBase.extract_data_from_direct", "set", "enumerate", "ner_base.NERBase.get_system_context", "ner_base.NERBase.get_type", "new_context.copy.index", "enumerate", "len", "len", "ner_base.NERBase.log_error", "new_context.append", "ner_tags.append", "new_context.append", "new_context.extend", "new_context.copy", "set.add", "ent_tags.append", "ent_tags.append", "ner_tags.append"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.extract_data_from_direct", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.get_system_context", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.get_type", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.log_error"], ["", "def", "direct_question", "(", "self", ",", "user", ",", "system", ")", ":", "\n", "# get data", "\n", "        ", "data", "=", "self", ".", "extract_data_from_direct", "(", "user", ",", "system", ")", "\n", "\n", "if", "not", "data", ":", "\n", "            ", "user", "[", "'is_ner_spurious'", "]", "=", "True", "\n", "system", "[", "'is_ner_spurious'", "]", "=", "True", "\n", "return", "user", ",", "system", "\n", "\n", "", "utterance", "=", "data", "[", "'utterance'", "]", "\n", "context", "=", "data", "[", "'context'", "]", "\n", "entities", "=", "data", "[", "'entities'", "]", "\n", "\n", "# get entity texts from tokenized utterance and create IOB-tags", "\n", "ent_tags", "=", "[", "]", "\n", "seen_ents", "=", "set", "(", ")", "\n", "for", "entity", "in", "entities", ":", "\n", "            ", "assert", "entity", "in", "context", ",", "utterance", "\n", "ent_type", "=", "self", ".", "get_type", "(", "entity", ")", "\n", "ent_idx", "=", "context", ".", "index", "(", "entity", ")", "\n", "before_ent_idx", "=", "ent_idx", "-", "1", "# context.index(context[ent_idx-1])", "\n", "word_after_ent", "=", "context", "[", "ent_idx", "+", "1", "]", "\n", "new_context", "=", "[", "]", "\n", "for", "word_idx", ",", "word", "in", "enumerate", "(", "utterance", ")", ":", "\n", "                ", "if", "word_idx", "<=", "before_ent_idx", ":", "\n", "                    ", "new_context", ".", "append", "(", "word", ")", "\n", "continue", "\n", "", "if", "word", "==", "word_after_ent", ":", "\n", "                    ", "new_context", ".", "extend", "(", "context", "[", "ent_idx", "+", "1", ":", "]", ")", "\n", "context", "=", "new_context", ".", "copy", "(", ")", "\n", "break", "\n", "", "if", "entity", "not", "in", "seen_ents", ":", "\n", "                    ", "seen_ents", ".", "add", "(", "entity", ")", "\n", "ent_tags", ".", "append", "(", "[", "word_idx", ",", "word", ",", "entity", ",", "ent_type", ",", "'B'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "ent_tags", ".", "append", "(", "[", "word_idx", ",", "word", ",", "entity", ",", "ent_type", ",", "'I'", "]", ")", "\n", "", "new_context", ".", "append", "(", "word", ")", "\n", "\n", "# final ner list", "\n", "", "", "tag_idx", "=", "[", "tag", "[", "0", "]", "for", "tag", "in", "ent_tags", "]", "\n", "ner_tags", "=", "[", "]", "\n", "for", "i", ",", "word_utter", "in", "enumerate", "(", "utterance", ")", ":", "\n", "            ", "if", "i", "not", "in", "tag_idx", ":", "\n", "                ", "ner_tags", ".", "append", "(", "[", "i", ",", "word_utter", ",", "'NA'", ",", "'NA'", ",", "'O'", "]", ")", "\n", "continue", "\n", "", "for", "tag", "in", "ent_tags", ":", "\n", "                ", "if", "i", "==", "tag", "[", "0", "]", ":", "\n", "                    ", "ner_tags", ".", "append", "(", "tag", ")", "\n", "\n", "", "", "", "if", "len", "(", "ner_tags", ")", "!=", "len", "(", "utterance", ")", ":", "\n", "# something went wrong, write example on txt file", "\n", "            ", "self", ".", "log_error", "(", "'No match'", ",", "user", "[", "\"utterance\"", "]", ")", "\n", "user", "[", "'is_ner_spurious'", "]", "=", "True", "\n", "system", "[", "'is_ner_spurious'", "]", "=", "True", "\n", "return", "user", ",", "system", "\n", "\n", "", "user", "[", "'context'", "]", "=", "ner_tags", "\n", "system", "[", "'context'", "]", "=", "self", ".", "get_system_context", "(", "system", ")", "\n", "user", "[", "'is_ner_spurious'", "]", "=", "False", "\n", "system", "[", "'is_ner_spurious'", "]", "=", "False", "\n", "\n", "return", "user", ",", "system", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.indirect_question": [[125, 131], ["ner_base.NERBase.get_system_context", "enumerate", "ner_base.NERBase.tokenizer", "user[].lower"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.get_system_context"], ["", "def", "indirect_question", "(", "self", ",", "user", ",", "system", ")", ":", "\n", "        ", "user", "[", "'context'", "]", "=", "[", "[", "i", ",", "word", ",", "'NA'", ",", "'NA'", ",", "'O'", "]", "for", "i", ",", "word", "in", "enumerate", "(", "self", ".", "tokenizer", "(", "user", "[", "'utterance'", "]", ".", "lower", "(", ")", ")", ")", "]", "\n", "system", "[", "'context'", "]", "=", "self", ".", "get_system_context", "(", "system", ")", "\n", "user", "[", "'is_ner_spurious'", "]", "=", "False", "\n", "system", "[", "'is_ner_spurious'", "]", "=", "False", "\n", "return", "user", ",", "system", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.ellipsis_question": [[132, 157], ["ner_base.NERBase.get_type", "ner_base.NERBase.tokenizer", "ner_base.NERBase.index", "enumerate", "ner_base.NERBase.get_system_context", "user[].lower", "ner_tags.append", "ner_tags.append", "ner_tags.append"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.get_type", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.get_system_context"], ["", "def", "ellipsis_question", "(", "self", ",", "user", ",", "system", ",", "key_word", "=", "'about'", ")", ":", "\n", "# check entity type", "\n", "        ", "entity", "=", "user", "[", "'entities_in_utterance'", "]", "[", "0", "]", "\n", "ent_type", "=", "self", ".", "get_type", "(", "entity", ")", "\n", "\n", "# get about index for identifying the entity", "\n", "tok_utterance", "=", "self", ".", "tokenizer", "(", "user", "[", "'utterance'", "]", ".", "lower", "(", ")", ")", "\n", "key_word_idx", "=", "tok_utterance", ".", "index", "(", "key_word", ")", "\n", "\n", "# create ner tags", "\n", "ner_tags", "=", "[", "]", "\n", "for", "i", ",", "word", "in", "enumerate", "(", "tok_utterance", ")", ":", "\n", "            ", "if", "i", "<=", "key_word_idx", ":", "\n", "                ", "ner_tags", ".", "append", "(", "[", "i", ",", "word", ",", "'NA'", ",", "'NA'", ",", "'O'", "]", ")", "\n", "", "elif", "i", "==", "key_word_idx", "+", "1", ":", "\n", "                ", "ner_tags", ".", "append", "(", "[", "i", ",", "word", ",", "entity", ",", "ent_type", ",", "'B'", "]", ")", "\n", "", "else", ":", "\n", "                ", "ner_tags", ".", "append", "(", "[", "i", ",", "word", ",", "entity", ",", "ent_type", ",", "'I'", "]", ")", "\n", "\n", "", "", "user", "[", "'context'", "]", "=", "ner_tags", "\n", "system", "[", "'context'", "]", "=", "self", ".", "get_system_context", "(", "system", ")", "\n", "user", "[", "'is_ner_spurious'", "]", "=", "False", "\n", "system", "[", "'is_ner_spurious'", "]", "=", "False", "\n", "\n", "return", "user", ",", "system", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.clarification_question": [[158, 187], ["ner_base.NERBase.tokenizer", "ner_base.NERBase.get_system_context", "user[].lower", "enumerate", "ner_base.NERBase.get_type", "ner_base.NERBase.index", "ner_base.NERBase.index", "enumerate", "ner_tags.append", "ner_tags.append", "ner_tags.append", "ner_tags.append"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.get_system_context", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.get_type"], ["", "def", "clarification_question", "(", "self", ",", "user", ",", "system", ")", ":", "\n", "# get about index for identifying the entity", "\n", "        ", "tok_utterance", "=", "self", ".", "tokenizer", "(", "user", "[", "'utterance'", "]", ".", "lower", "(", ")", ")", "\n", "\n", "# create ner tags", "\n", "ner_tags", "=", "[", "]", "\n", "if", "user", "[", "'utterance'", "]", "==", "'Yes'", ":", "\n", "            ", "for", "i", ",", "word", "in", "enumerate", "(", "tok_utterance", ")", ":", "\n", "                ", "ner_tags", ".", "append", "(", "[", "i", ",", "word", ",", "'NA'", ",", "'NA'", ",", "'O'", "]", ")", "\n", "", "", "else", ":", "\n", "# check entity type", "\n", "            ", "entity", "=", "user", "[", "'entities'", "]", "[", "0", "]", "\n", "ent_type", "=", "self", ".", "get_type", "(", "entity", ")", "\n", "meant_idx", "=", "tok_utterance", ".", "index", "(", "'meant'", ")", "\n", "dot_idx", "=", "tok_utterance", ".", "index", "(", "'could'", ")", "\n", "for", "i", ",", "word", "in", "enumerate", "(", "tok_utterance", ")", ":", "\n", "                ", "if", "i", "<=", "meant_idx", "or", "i", ">=", "dot_idx", ":", "\n", "                    ", "ner_tags", ".", "append", "(", "[", "i", ",", "word", ",", "'NA'", ",", "'NA'", ",", "'O'", "]", ")", "\n", "", "elif", "i", "==", "meant_idx", "+", "1", ":", "\n", "                    ", "ner_tags", ".", "append", "(", "[", "i", ",", "word", ",", "entity", ",", "ent_type", ",", "'B'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "ner_tags", ".", "append", "(", "[", "i", ",", "word", ",", "entity", ",", "ent_type", ",", "'I'", "]", ")", "\n", "\n", "", "", "", "user", "[", "'context'", "]", "=", "ner_tags", "\n", "system", "[", "'context'", "]", "=", "self", ".", "get_system_context", "(", "system", ")", "\n", "user", "[", "'is_ner_spurious'", "]", "=", "False", "\n", "system", "[", "'is_ner_spurious'", "]", "=", "False", "\n", "\n", "return", "user", ",", "system", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.extract_data_from_direct": [[188, 221], ["ner_base.NERBase.get_index_from_preprocessed", "ner_base.NERBase.tokenizer", "context.split", "entities.split", "tok_context.append", "ordered_entities.append", "tok_context.extend", "ner_base.NERBase.tokenizer"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.get_index_from_preprocessed"], ["", "def", "extract_data_from_direct", "(", "self", ",", "user", ",", "system", ")", ":", "\n", "# get index from preprocessed", "\n", "        ", "index", "=", "self", ".", "get_index_from_preprocessed", "(", "user", ")", "\n", "if", "not", "index", ":", "# if no index then skip", "\n", "            ", "return", "{", "}", "\n", "\n", "# get data based on index", "\n", "", "utterance", "=", "self", ".", "preprocessed_data", "[", "'utterances'", "]", "[", "index", "]", "\n", "context", "=", "self", ".", "preprocessed_data", "[", "'contexts'", "]", "[", "index", "]", "\n", "entities", "=", "self", ".", "preprocessed_data", "[", "'entities'", "]", "[", "index", "]", "\n", "\n", "if", "not", "entities", ":", "# if no index then skip", "\n", "            ", "return", "{", "}", "\n", "\n", "", "entities", "=", "entities", ".", "split", "(", "'|'", ")", "if", "entities", "!=", "''", "else", "[", "]", "\n", "tok_utterance", "=", "self", ".", "tokenizer", "(", "utterance", ")", "\n", "\n", "# we do not want the tokenizer to split wikidata ids for the context utterance", "\n", "tok_context", "=", "[", "]", "\n", "ordered_entities", "=", "[", "]", "\n", "for", "cont", "in", "context", ".", "split", "(", ")", ":", "\n", "            ", "if", "cont", "in", "entities", ":", "\n", "                ", "tok_context", ".", "append", "(", "cont", ")", "\n", "ordered_entities", ".", "append", "(", "cont", ")", "\n", "", "else", ":", "\n", "                ", "tok_context", ".", "extend", "(", "self", ".", "tokenizer", "(", "cont", ")", ")", "\n", "\n", "# TODO check for Simple Question|Mult. Entity|Indirect", "\n", "\n", "", "", "return", "{", "\n", "'utterance'", ":", "tok_utterance", ",", "\n", "'context'", ":", "tok_context", ",", "\n", "'entities'", ":", "ordered_entities", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.get_index_from_preprocessed": [[223, 276], ["ner_base.NERBase.preprocessed_data[].index", "range", "len", "ner_base.NERBase.log_error", "entities.split", "ner_base.NERBase.log_error", "len", "ner_base.NERBase.preprocessed_data[].index", "utterance.startswith", "len"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.log_error", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.log_error"], ["", "def", "get_index_from_preprocessed", "(", "self", ",", "user", ")", ":", "\n", "# some entities contain unicode characters", "\n", "# we identify them by including one by one the characters in the utterance", "\n", "        ", "if", "user", "[", "'utterance'", "]", "in", "self", ".", "preprocessed_data", "[", "'utterances'", "]", ":", "\n", "            ", "return", "self", ".", "preprocessed_data", "[", "'utterances'", "]", ".", "index", "(", "user", "[", "'utterance'", "]", ")", "\n", "", "else", ":", "\n", "            ", "index", "=", "None", "\n", "filtered_utterances", "=", "self", ".", "preprocessed_data", "[", "'utterances'", "]", "\n", "index_to_remove", "=", "[", "]", "\n", "user_utterance", "=", "''", "\n", "# search forward", "\n", "for", "i", "in", "range", "(", "len", "(", "user", "[", "'utterance'", "]", ")", ")", ":", "\n", "                ", "user_utterance", "+=", "user", "[", "'utterance'", "]", "[", "i", "]", "\n", "# user_utterance = user['utterance'][:i]", "\n", "# for itr in reversed(index_to_remove):", "\n", "#     user_utterance = user_utterance[:itr] + user_utterance[itr+1:]", "\n", "results", "=", "[", "utterance", "for", "utterance", "in", "filtered_utterances", "if", "utterance", ".", "startswith", "(", "user_utterance", ")", "]", "\n", "if", "len", "(", "results", ")", "==", "1", ":", "\n", "                    ", "index", "=", "self", ".", "preprocessed_data", "[", "'utterances'", "]", ".", "index", "(", "results", "[", "0", "]", ")", "\n", "break", "\n", "", "elif", "len", "(", "results", ")", "==", "0", ":", "\n", "                    ", "user_utterance", "=", "user_utterance", "[", ":", "-", "1", "]", "\n", "# index_to_remove.append(i)", "\n", "", "else", ":", "\n", "                    ", "filtered_utterances", "=", "results", "\n", "# search backward", "\n", "# if not index:", "\n", "#     filtered_utterances = self.preprocessed_data['utterances']", "\n", "#     index_to_remove = []", "\n", "#     for i in range(len(user['utterance'])):", "\n", "#         user_utterance = user['utterance'][::-1][:i]", "\n", "#         for itr in reversed(index_to_remove):", "\n", "#             user_utterance = user_utterance[:itr] + user_utterance[itr+1:]", "\n", "#         results = [utterance for utterance in filtered_utterances if utterance[::-1].startswith(user_utterance)]", "\n", "#         if len(results) == 1:", "\n", "#             index = self.preprocessed_data['utterances'].index(results[0])", "\n", "#             break", "\n", "#         elif len(results) == 0:", "\n", "#             index_to_remove.append(i)", "\n", "#         else:", "\n", "#             filtered_utterances = results", "\n", "\n", "", "", "if", "not", "index", ":", "\n", "                ", "self", ".", "log_error", "(", "'No preprocessed'", ",", "user", "[", "\"utterance\"", "]", ")", "\n", "return", "None", "\n", "\n", "", "entities", "=", "self", ".", "preprocessed_data", "[", "'entities'", "]", "[", "index", "]", "\n", "entities", "=", "entities", ".", "split", "(", "'|'", ")", "if", "entities", "!=", "''", "else", "[", "]", "\n", "if", "entities", "!=", "user", "[", "'entities_in_utterance'", "]", ":", "# if no index then skip", "\n", "                ", "self", ".", "log_error", "(", "'No entity match'", ",", "user", "[", "\"utterance\"", "]", ")", "\n", "return", "None", "\n", "\n", "", "return", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.get_system_context": [[277, 305], ["len", "enumerate", "system[].isnumeric", "ner_base.NERBase.get_type", "enumerate", "ner_tags.append", "ner_base.NERBase.tokenizer", "len", "ner_tags.append", "ner_tags.append", "label.lower", "ner_tags.append", "ner_tags.append", "ner_tags.append", "ner_tags.append", "ner_tags.append"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.get_type"], ["", "", "def", "get_system_context", "(", "self", ",", "system", ")", ":", "\n", "        ", "ner_tags", "=", "[", "]", "\n", "if", "len", "(", "system", "[", "'entities_in_utterance'", "]", ")", ">", "0", ":", "\n", "            ", "idx_counter", "=", "0", "\n", "for", "j", ",", "entity", "in", "enumerate", "(", "system", "[", "'entities_in_utterance'", "]", ")", ":", "\n", "                ", "ent_type", "=", "self", ".", "get_type", "(", "entity", ")", "\n", "label", "=", "self", ".", "kg", ".", "id_entity", "[", "entity", "]", "\n", "for", "i", ",", "word", "in", "enumerate", "(", "self", ".", "tokenizer", "(", "label", ".", "lower", "(", ")", ")", ")", ":", "\n", "                    ", "if", "i", "==", "0", ":", "\n", "                        ", "ner_tags", ".", "append", "(", "[", "idx_counter", "+", "i", ",", "word", ",", "entity", ",", "ent_type", ",", "'B'", "]", ")", "\n", "", "else", ":", "\n", "                        ", "ner_tags", ".", "append", "(", "[", "idx_counter", "+", "i", ",", "word", ",", "entity", ",", "ent_type", ",", "'I'", "]", ")", "\n", "\n", "", "", "if", "j", "+", "1", "<", "len", "(", "system", "[", "'entities_in_utterance'", "]", ")", ":", "\n", "                    ", "ner_tags", ".", "append", "(", "[", "idx_counter", "+", "i", "+", "1", ",", "','", ",", "'NA'", ",", "'NA'", ",", "'O'", "]", ")", "\n", "idx_counter", "=", "idx_counter", "+", "i", "+", "2", "\n", "", "", "", "elif", "system", "[", "'utterance'", "]", ".", "isnumeric", "(", ")", ":", "\n", "            ", "ner_tags", ".", "append", "(", "[", "0", ",", "'num'", ",", "'NA'", ",", "'NA'", ",", "'O'", "]", ")", "\n", "", "elif", "system", "[", "'utterance'", "]", "==", "'YES'", ":", "\n", "            ", "ner_tags", ".", "append", "(", "[", "0", ",", "'yes'", ",", "'NA'", ",", "'NA'", ",", "'O'", "]", ")", "\n", "", "elif", "system", "[", "'utterance'", "]", "==", "'NO'", ":", "\n", "            ", "ner_tags", ".", "append", "(", "[", "0", ",", "'no'", ",", "'NA'", ",", "'NA'", ",", "'O'", "]", ")", "\n", "", "elif", "system", "[", "'utterance'", "]", "==", "'YES and NO respectively'", ":", "\n", "            ", "ner_tags", ".", "append", "(", "[", "0", ",", "'no'", ",", "'NA'", ",", "'NA'", ",", "'O'", "]", ")", "\n", "", "elif", "system", "[", "'utterance'", "]", "==", "'NO and YES respectively'", ":", "\n", "            ", "ner_tags", ".", "append", "(", "[", "0", ",", "'no'", ",", "'NA'", ",", "'NA'", ",", "'O'", "]", ")", "\n", "\n", "", "return", "ner_tags", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.get_type": [[306, 312], ["ner_base.NERBase.log_error"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.log_error"], ["", "def", "get_type", "(", "self", ",", "entity", ")", ":", "\n", "        ", "if", "entity", "not", "in", "self", ".", "kg", ".", "entity_type", ":", "\n", "            ", "self", ".", "log_error", "(", "'No type'", ",", "entity", ")", "\n", "return", "'NA'", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "kg", ".", "entity_type", "[", "entity", "]", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.log_error": [[313, 317], ["open", "open.write", "open.close"], "methods", ["None"], ["", "", "def", "log_error", "(", "self", ",", "txt", ",", "context", ")", ":", "\n", "        ", "unicoce_txt", "=", "open", "(", "'TOFIX.txt'", ",", "'a'", ")", "\n", "unicoce_txt", ".", "write", "(", "f'{self.__class__.__name__}\\t{txt}\\t{context}\\n'", ")", "\n", "unicoce_txt", ".", "close", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.logical.Logical.__init__": [[15, 17], ["ner_annotators.ner_base.NERBase.__init__"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.comparative.Comparative.__init__"], ["        ", "self", ".", "operator", "=", "operator", "\n", "\n", "", "def", "__call__", "(", "self", ",", "user", ",", "system", ")", ":", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.logical.Logical.__call__": [[18, 51], ["Exception", "Exception", "logical.Logical.new_direct_question", "logical.Logical.new_direct_question", "logical.Logical.new_direct_question", "logical.Logical.ellipsis_question", "logical.Logical.ellipsis_question", "logical.Logical.new_direct_question", "logical.Logical.new_direct_question", "logical.Logical.new_direct_question", "logical.Logical.ellipsis_question"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.new_direct_question", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.new_direct_question", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.new_direct_question", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.ellipsis_question", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.ellipsis_question", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.new_direct_question", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.new_direct_question", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.new_direct_question", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.ellipsis_question"], ["# Logical Reasoning (All)", "\n", "        ", "if", "'description'", "not", "in", "user", ":", "\n", "            ", "raise", "Exception", "(", "f'No description for question:\\n{user}'", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Logical|Difference|Multiple_Relation'", ":", "\n", "            ", "return", "self", ".", "logical", "(", "user", ",", "system", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Logical|Union|Single_Relation'", ":", "\n", "            ", "return", "self", ".", "logical", "(", "user", ",", "system", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Logical|Union|Multiple_Relation'", ":", "\n", "            ", "return", "self", ".", "logical", "(", "user", ",", "system", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Logical|Intersection|Single_Relation|Incomplete'", ":", "\n", "            ", "return", "self", ".", "logical", "(", "user", ",", "system", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Logical|Difference|Single_Relation|Incomplete'", ":", "\n", "            ", "return", "self", ".", "logical", "(", "user", ",", "system", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Logical|Difference|Single_Relation'", ":", "\n", "            ", "return", "self", ".", "logical", "(", "user", ",", "system", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Logical|Intersection|Single_Relation'", ":", "\n", "            ", "return", "self", ".", "logical", "(", "user", ",", "system", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Logical|Intersection|Multiple_Relation'", ":", "\n", "            ", "return", "self", ".", "logical", "(", "user", ",", "system", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Logical|Union|Single_Relation|Incomplete'", ":", "\n", "            ", "return", "self", ".", "logical", "(", "user", ",", "system", ")", "\n", "\n", "", "raise", "Exception", "(", "f'Description could not be found: {user[\"description\"]}'", ")", "\n", "\n", "", "def", "logical", "(", "self", ",", "user", ",", "system", ")", ":", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.verification.Verification.__init__": [[12, 14], ["ner_annotators.ner_base.NERBase.__init__"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.comparative.Comparative.__init__"], ["        ", "self", ".", "operator", "=", "operator", "\n", "\n", "", "def", "__call__", "(", "self", ",", "user", ",", "system", ",", "prev_system", ")", ":", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.verification.Verification.__call__": [[15, 36], ["Exception", "verification.Verification.new_direct_question", "verification.Verification.new_direct_question", "verification.Verification.new_direct_question", "verification.Verification.new_direct_question", "verification.Verification.new_direct_question", "verification.Verification.new_direct_question"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.new_direct_question", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.new_direct_question", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.new_direct_question", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.new_direct_question", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.new_direct_question", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.new_direct_question"], ["# Verification (Boolean) (All)", "\n", "        ", "if", "user", "[", "'description'", "]", "==", "'Verification|3 entities, 2 direct, 2(direct) are query entities, subject is indirect'", ":", "\n", "            ", "return", "self", ".", "verification_multi_entities", "(", "user", ",", "system", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Verification|3 entities, all direct, 2 are query entities'", ":", "\n", "            ", "return", "self", ".", "verification_multi_entities", "(", "user", ",", "system", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Verification|2 entities, one direct and one indirect, object is indirect'", ":", "\n", "            ", "return", "self", ".", "verification_direct", "(", "user", ",", "system", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Verification|2 entities, one direct and one indirect, subject is indirect'", ":", "\n", "            ", "return", "self", ".", "verification_direct", "(", "user", ",", "system", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Verification|2 entities, both direct'", ":", "\n", "            ", "return", "self", ".", "verification_direct", "(", "user", ",", "system", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Verification|one entity, multiple entities (as object) referred indirectly'", ":", "\n", "            ", "return", "self", ".", "verification_indirect", "(", "user", ",", "system", ",", "prev_ent", "=", "prev_system", "[", "'entities_in_utterance'", "]", ")", "\n", "\n", "", "raise", "Exception", "(", "f'Description could not be found: {user[\"description\"]}'", ")", "\n", "\n", "", "def", "verification_direct", "(", "self", ",", "user", ",", "system", ")", ":", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.comparative.Comparative.__init__": [[20, 22], ["ner_annotators.ner_base.NERBase.__init__"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.comparative.Comparative.__init__"], ["        ", "self", ".", "operator", "=", "operator", "\n", "\n", "", "def", "__call__", "(", "self", ",", "user", ",", "system", ",", "prev_user", ",", "prev_system", ")", ":", "\n"]], "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.comparative.Comparative.__call__": [[23, 67], ["Exception", "comparative.Comparative.new_direct_question", "comparative.Comparative.new_direct_question", "comparative.Comparative.indirect_question", "comparative.Comparative.ellipsis_question", "comparative.Comparative.indirect_question", "comparative.Comparative.ellipsis_question", "comparative.Comparative.ellipsis_question", "comparative.Comparative.new_direct_question", "comparative.Comparative.indirect_question", "comparative.Comparative.indirect_question", "comparative.Comparative.new_direct_question", "comparative.Comparative.ellipsis_question"], "methods", ["home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.new_direct_question", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.new_direct_question", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.indirect_question", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.ellipsis_question", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.indirect_question", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.ellipsis_question", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.ellipsis_question", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.new_direct_question", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.indirect_question", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.indirect_question", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.new_direct_question", "home.repos.pwc.inspect_result.endrikacupaj_LASAGNE.ner_annotators.ner_base.NERBase.ellipsis_question"], ["# Clarification questions, will be handled from clarification class", "\n", "        ", "if", "'description'", "not", "in", "user", ":", "\n", "            ", "return", "user", ",", "system", "\n", "\n", "# Comparative Reasoning (All)", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Comparative|More/Less|Single entity type'", ":", "\n", "            ", "return", "self", ".", "comparative_single_entity", "(", "user", ",", "system", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Comparative|More/Less|Mult. entity type'", ":", "\n", "            ", "return", "self", ".", "comparative_multi_entities", "(", "user", ",", "system", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Comparative|More/Less|Single entity type|Indirect'", ":", "\n", "            ", "return", "self", ".", "comparative_single_entity", "(", "user", ",", "system", ",", "prev_ent", "=", "prev_system", "[", "'entities_in_utterance'", "]", "[", "0", "]", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Comparative|More/Less|Mult. entity type|Incomplete'", ":", "\n", "            ", "return", "self", ".", "comparative_multi_entities", "(", "user", ",", "system", ",", "prev_q", "=", "prev_user", "[", "'utterance'", "]", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Comparative|More/Less|Mult. entity type|Indirect'", ":", "\n", "            ", "return", "self", ".", "comparative_multi_entities", "(", "user", ",", "system", ",", "prev_ent", "=", "prev_system", "[", "'entities_in_utterance'", "]", "[", "0", "]", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Comparative|More/Less|Single entity type|Incomplete'", ":", "\n", "            ", "return", "self", ".", "comparative_single_entity", "(", "user", ",", "system", ",", "prev_q", "=", "prev_user", "[", "'utterance'", "]", ")", "\n", "\n", "# Comparative Reasoning (Count) (All)", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Comparative|Count over More/Less|Single entity type|Incomplete'", ":", "\n", "            ", "return", "self", ".", "comparative_single_entity", "(", "user", ",", "system", ",", "prev_q", "=", "prev_user", "[", "'utterance'", "]", ",", "is_count", "=", "True", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Comparative|Count over More/Less|Mult. entity type'", ":", "\n", "            ", "return", "self", ".", "comparative_multi_entities", "(", "user", ",", "system", ",", "is_count", "=", "True", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Comparative|Count over More/Less|Single entity type|Indirect'", ":", "\n", "            ", "return", "self", ".", "comparative_single_entity", "(", "user", ",", "system", ",", "prev_ent", "=", "prev_system", "[", "'entities_in_utterance'", "]", "[", "0", "]", ",", "is_count", "=", "True", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Comparative|Count over More/Less|Mult. entity type|Indirect'", ":", "\n", "            ", "return", "self", ".", "comparative_multi_entities", "(", "user", ",", "system", ",", "prev_ent", "=", "prev_system", "[", "'entities_in_utterance'", "]", "[", "0", "]", ",", "is_count", "=", "True", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Comparative|Count over More/Less|Single entity type'", ":", "\n", "            ", "return", "self", ".", "comparative_single_entity", "(", "user", ",", "system", ",", "is_count", "=", "True", ")", "\n", "\n", "", "if", "user", "[", "'description'", "]", "==", "'Comparative|Count over More/Less|Mult. entity type|Incomplete'", ":", "\n", "            ", "return", "self", ".", "comparative_multi_entities", "(", "user", ",", "system", ",", "prev_q", "=", "prev_user", "[", "'utterance'", "]", ",", "is_count", "=", "True", ")", "\n", "\n", "", "raise", "Exception", "(", "f'Description could not be found: {user[\"description\"]}'", ")", "\n", "\n", "", "def", "comparative_single_entity", "(", "self", ",", "user", ",", "system", ",", "prev_q", "=", "None", ",", "prev_ent", "=", "None", ",", "is_count", "=", "False", ")", ":", "\n"]]}