{"home.repos.pwc.inspect_result.weiyithu_nerfingmvs.None.options.config_parser": [[2, 101], ["configargparse.ArgumentParser", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "config_parser", "(", ")", ":", "\n", "\n", "    ", "parser", "=", "configargparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--config'", ",", "is_config_file", "=", "True", ",", "\n", "help", "=", "'config file path'", ")", "\n", "parser", ".", "add_argument", "(", "\"--expname\"", ",", "type", "=", "str", ",", "\n", "help", "=", "'experiment name'", ")", "\n", "parser", ".", "add_argument", "(", "\"--basedir\"", ",", "type", "=", "str", ",", "default", "=", "'./logs/'", ",", "\n", "help", "=", "'where to store ckpts and logs'", ")", "\n", "parser", ".", "add_argument", "(", "\"--datadir\"", ",", "type", "=", "str", ",", "default", "=", "'./data/llff/fern'", ",", "\n", "help", "=", "'input data directory'", ")", "\n", "parser", ".", "add_argument", "(", "\"--demo\"", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'if demo, no evaluation'", ")", "\n", "\n", "# depth priors options", "\n", "parser", ".", "add_argument", "(", "\"--depth_N_rand\"", ",", "type", "=", "int", ",", "default", "=", "4", ",", "\n", "help", "=", "'batch size for depth'", ")", "\n", "parser", ".", "add_argument", "(", "\"--depth_N_iters\"", ",", "type", "=", "int", ",", "default", "=", "151", ",", "\n", "help", "=", "'number of iterations for depth'", ")", "\n", "parser", ".", "add_argument", "(", "\"--depth_H\"", ",", "type", "=", "int", ",", "default", "=", "288", ",", "\n", "help", "=", "'the height of depth image (must be 16x)'", ")", "\n", "parser", ".", "add_argument", "(", "\"--depth_W\"", ",", "type", "=", "int", ",", "default", "=", "384", ",", "\n", "help", "=", "'the width of depth image (must be 16x)'", ")", "\n", "parser", ".", "add_argument", "(", "\"--depth_lrate\"", ",", "type", "=", "float", ",", "default", "=", "4e-4", ",", "\n", "help", "=", "'learning rate for depth'", ")", "\n", "parser", ".", "add_argument", "(", "\"--depth_i_weights\"", ",", "type", "=", "int", ",", "default", "=", "50", ",", "\n", "help", "=", "'frequency of weight ckpt saving for depth'", ")", "\n", "parser", ".", "add_argument", "(", "\"--depth_i_print\"", ",", "type", "=", "int", ",", "default", "=", "20", ",", "\n", "help", "=", "'frequency of console printout and metric loggin'", ")", "\n", "\n", "# nerf options", "\n", "parser", ".", "add_argument", "(", "\"--netdepth\"", ",", "type", "=", "int", ",", "default", "=", "8", ",", "\n", "help", "=", "'layers in network'", ")", "\n", "parser", ".", "add_argument", "(", "\"--netwidth\"", ",", "type", "=", "int", ",", "default", "=", "256", ",", "\n", "help", "=", "'channels per layer'", ")", "\n", "parser", ".", "add_argument", "(", "\"--N_rand\"", ",", "type", "=", "int", ",", "default", "=", "32", "*", "32", "*", "4", ",", "\n", "help", "=", "'batch size (number of random rays per gradient step)'", ")", "\n", "parser", ".", "add_argument", "(", "\"--N_iters\"", ",", "type", "=", "int", ",", "default", "=", "200001", ",", "\n", "help", "=", "'number of iterations'", ")", "\n", "parser", ".", "add_argument", "(", "\"--lrate\"", ",", "type", "=", "float", ",", "default", "=", "5e-4", ",", "\n", "help", "=", "'learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "\"--lrate_decay\"", ",", "type", "=", "int", ",", "default", "=", "250", ",", "\n", "help", "=", "'exponential learning rate decay (in 1000 steps)'", ")", "\n", "parser", ".", "add_argument", "(", "\"--chunk\"", ",", "type", "=", "int", ",", "default", "=", "1024", "*", "32", ",", "\n", "help", "=", "'number of rays processed in parallel, decrease if running out of memory'", ")", "\n", "parser", ".", "add_argument", "(", "\"--netchunk\"", ",", "type", "=", "int", ",", "default", "=", "1024", "*", "64", ",", "\n", "help", "=", "'number of pts sent through network in parallel, decrease if running out of memory'", ")", "\n", "parser", ".", "add_argument", "(", "\"--no_reload\"", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'do not reload weights from saved ckpt'", ")", "\n", "parser", ".", "add_argument", "(", "\"--ft_path\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'specific weights npy file to reload for coarse network'", ")", "\n", "parser", ".", "add_argument", "(", "\"--N_samples\"", ",", "type", "=", "int", ",", "default", "=", "64", ",", "\n", "help", "=", "'number of coarse samples per ray'", ")", "\n", "parser", ".", "add_argument", "(", "\"--perturb\"", ",", "type", "=", "float", ",", "default", "=", "1.", ",", "\n", "help", "=", "'set to 0. for no jitter, 1. for jitter'", ")", "\n", "parser", ".", "add_argument", "(", "\"--use_viewdirs\"", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'use full 5D input instead of 3D'", ")", "\n", "parser", ".", "add_argument", "(", "\"--i_embed\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'set 0 for default positional encoding, -1 for none'", ")", "\n", "parser", ".", "add_argument", "(", "\"--multires\"", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "'log2 of max freq for positional encoding (3D location)'", ")", "\n", "parser", ".", "add_argument", "(", "\"--multires_views\"", ",", "type", "=", "int", ",", "default", "=", "4", ",", "\n", "help", "=", "'log2 of max freq for positional encoding (2D direction)'", ")", "\n", "parser", ".", "add_argument", "(", "\"--raw_noise_std\"", ",", "type", "=", "float", ",", "default", "=", "0.", ",", "\n", "help", "=", "'std dev of noise added to regularize sigma_a output, 1e0 recommended'", ")", "\n", "parser", ".", "add_argument", "(", "\"--render_only\"", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'do not optimize, reload weights and render out render_poses path'", ")", "\n", "parser", ".", "add_argument", "(", "\"--render_test\"", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'render the test set instead of render_poses path'", ")", "\n", "parser", ".", "add_argument", "(", "\"--render_factor\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'downsampling factor to speed up rendering, set 4 or 8 for fast preview'", ")", "\n", "parser", ".", "add_argument", "(", "\"--white_bkgd\"", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'set to render synthetic data on a white bkgd (always use for dvoxels)'", ")", "\n", "parser", ".", "add_argument", "(", "\"--factor\"", ",", "type", "=", "int", ",", "default", "=", "8", ",", "\n", "help", "=", "'downsample factor for LLFF images'", ")", "\n", "parser", ".", "add_argument", "(", "\"--N_views\"", ",", "type", "=", "int", ",", "default", "=", "120", ",", "\n", "help", "=", "'the number of render views'", ")", "\n", "parser", ".", "add_argument", "(", "\"--no_ndc\"", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'do not use normalized device coordinates (set for non-forward facing scenes)'", ")", "\n", "parser", ".", "add_argument", "(", "\"--lindisp\"", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'sampling linearly in disparity rather than depth'", ")", "\n", "parser", ".", "add_argument", "(", "\"--spherify\"", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'set for spherical 360 scenes'", ")", "\n", "parser", ".", "add_argument", "(", "\"--near\"", ",", "type", "=", "float", ",", "default", "=", "0.05", ",", "\n", "help", "=", "'abs near bound'", ")", "\n", "parser", ".", "add_argument", "(", "\"--far\"", ",", "type", "=", "float", ",", "default", "=", "0.15", ",", "\n", "help", "=", "'abs far bound'", ")", "\n", "parser", ".", "add_argument", "(", "\"--topk\"", ",", "type", "=", "int", ",", "default", "=", "4", ",", "\n", "help", "=", "'topk for consis error'", ")", "\n", "parser", ".", "add_argument", "(", "\"--i_print\"", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "'frequency of console printout and metric loggin'", ")", "\n", "parser", ".", "add_argument", "(", "\"--i_weights\"", ",", "type", "=", "int", ",", "default", "=", "20000", ",", "\n", "help", "=", "'frequency of weight ckpt saving'", ")", "\n", "\n", "# filter options", "\n", "parser", ".", "add_argument", "(", "\"--worker_num\"", ",", "type", "=", "int", ",", "default", "=", "8", ",", "\n", "help", "=", "'the number of worker for multiprocessing'", ")", "\n", "\n", "return", "parser", "", "", ""]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.initialize.main": [[4, 28], ["os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "open", "sorted", "os.path.join", "vars", "getattr", "file.write", "open", "file.write", "open().read", "open"], "function", ["None"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "basedir", "=", "args", ".", "basedir", "\n", "expname", "=", "args", ".", "expname", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "basedir", ",", "expname", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "basedir", ",", "expname", ",", "'depth_priors'", ",", "'checkpoints'", ")", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "basedir", ",", "expname", ",", "'depth_priors'", ",", "'results'", ")", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "basedir", ",", "expname", ",", "'depth_priors'", ",", "'summary'", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "basedir", ",", "expname", ",", "'nerf'", ",", "'checkpoints'", ")", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "basedir", ",", "expname", ",", "'nerf'", ",", "'results'", ")", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "basedir", ",", "expname", ",", "'nerf'", ",", "'summary'", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "basedir", ",", "expname", ",", "'filter'", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "f", "=", "os", ".", "path", ".", "join", "(", "basedir", ",", "expname", ",", "'args.txt'", ")", "\n", "with", "open", "(", "f", ",", "'w'", ")", "as", "file", ":", "\n", "        ", "for", "arg", "in", "sorted", "(", "vars", "(", "args", ")", ")", ":", "\n", "            ", "attr", "=", "getattr", "(", "args", ",", "arg", ")", "\n", "file", ".", "write", "(", "'{} = {}\\n'", ".", "format", "(", "arg", ",", "attr", ")", ")", "\n", "", "", "if", "args", ".", "config", "is", "not", "None", ":", "\n", "        ", "f", "=", "os", ".", "path", ".", "join", "(", "basedir", ",", "expname", ",", "'config.txt'", ")", "\n", "with", "open", "(", "f", ",", "'w'", ")", "as", "file", ":", "\n", "            ", "file", ".", "write", "(", "open", "(", "args", ".", "config", ",", "'r'", ")", ".", "read", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.load_llff._minify": [[8, 63], ["os.path.join", "os.path.exists", "os.getcwd", "os.path.join", "os.path.join", "open", "f_list.readlines", "os.path.join", "os.path.join", "isinstance", "os.path.join", "os.path.exists", "print", "os.makedirs", "check_output", "print", "os.chdir", "check_output", "os.chdir", "print", "os.path.exists", "os.path.exists", "os.path.join", "open", "f_list.readlines", "f.strip", "any", "imgs[].split", "check_output", "print", "os.path.join", "f.endswith"], "function", ["None"], ["def", "_minify", "(", "basedir", ",", "factors", "=", "[", "]", ",", "resolutions", "=", "[", "]", ")", ":", "\n", "    ", "needtoload", "=", "False", "\n", "for", "r", "in", "factors", ":", "\n", "        ", "imgdir", "=", "os", ".", "path", ".", "join", "(", "basedir", ",", "'images_{}'", ".", "format", "(", "r", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "imgdir", ")", ":", "\n", "            ", "needtoload", "=", "True", "\n", "", "", "for", "r", "in", "resolutions", ":", "\n", "        ", "imgdir", "=", "os", ".", "path", ".", "join", "(", "basedir", ",", "'images_{}x{}'", ".", "format", "(", "r", "[", "1", "]", ",", "r", "[", "0", "]", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "imgdir", ")", ":", "\n", "            ", "needtoload", "=", "True", "\n", "", "", "if", "not", "needtoload", ":", "\n", "        ", "return", "\n", "\n", "", "from", "shutil", "import", "copy", "\n", "from", "subprocess", "import", "check_output", "\n", "\n", "imgdir", "=", "os", ".", "path", ".", "join", "(", "basedir", ",", "'images'", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "basedir", ",", "'train.txt'", ")", ",", "'r'", ")", "as", "f_list", ":", "\n", "        ", "lines", "=", "f_list", ".", "readlines", "(", ")", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "basedir", ",", "'test.txt'", ")", ")", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "basedir", ",", "'test.txt'", ")", ",", "'r'", ")", "as", "f_list", ":", "\n", "            ", "lines", "+=", "f_list", ".", "readlines", "(", ")", "\n", "", "", "imgs", "=", "[", "os", ".", "path", ".", "join", "(", "imgdir", ",", "f", ".", "strip", "(", ")", ")", "for", "f", "in", "lines", "]", "\n", "imgs", "=", "[", "f", "for", "f", "in", "imgs", "if", "any", "(", "[", "f", ".", "endswith", "(", "ex", ")", "for", "ex", "in", "[", "'JPG'", ",", "'jpg'", ",", "'png'", ",", "'jpeg'", ",", "'PNG'", "]", "]", ")", "]", "\n", "imgdir_orig", "=", "imgdir", "\n", "\n", "wd", "=", "os", ".", "getcwd", "(", ")", "\n", "\n", "for", "r", "in", "factors", "+", "resolutions", ":", "\n", "        ", "if", "isinstance", "(", "r", ",", "int", ")", ":", "\n", "            ", "name", "=", "'images_{}'", ".", "format", "(", "r", ")", "\n", "resizearg", "=", "'{}%'", ".", "format", "(", "100.", "/", "r", ")", "\n", "", "else", ":", "\n", "            ", "name", "=", "'images_{}x{}'", ".", "format", "(", "r", "[", "1", "]", ",", "r", "[", "0", "]", ")", "\n", "resizearg", "=", "'{}x{}'", ".", "format", "(", "r", "[", "1", "]", ",", "r", "[", "0", "]", ")", "\n", "", "imgdir", "=", "os", ".", "path", ".", "join", "(", "basedir", ",", "name", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "imgdir", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "print", "(", "'Minifying'", ",", "r", ",", "basedir", ")", "\n", "\n", "os", ".", "makedirs", "(", "imgdir", ")", "\n", "check_output", "(", "'cp {}/* {}'", ".", "format", "(", "imgdir_orig", ",", "imgdir", ")", ",", "shell", "=", "True", ")", "\n", "\n", "ext", "=", "imgs", "[", "0", "]", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "\n", "args", "=", "' '", ".", "join", "(", "[", "'mogrify'", ",", "'-resize'", ",", "resizearg", ",", "'-format'", ",", "'png'", ",", "'*.{}'", ".", "format", "(", "ext", ")", "]", ")", "\n", "print", "(", "args", ")", "\n", "os", ".", "chdir", "(", "imgdir", ")", "\n", "check_output", "(", "args", ",", "shell", "=", "True", ")", "\n", "os", ".", "chdir", "(", "wd", ")", "\n", "\n", "if", "ext", "!=", "'png'", ":", "\n", "            ", "check_output", "(", "'rm {}/*.{}'", ".", "format", "(", "imgdir", ",", "ext", ")", ",", "shell", "=", "True", ")", "\n", "print", "(", "'Removed duplicates'", ")", "\n", "", "print", "(", "'Done'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.load_llff._load_data": [[67, 133], ["numpy.load", "poses_arr[].reshape().transpose", "poses_arr[].transpose", "os.path.join", "os.path.exists", "numpy.array().reshape", "numpy.stack", "print", "os.path.join", "imageio.imread", "load_llff._minify", "os.path.exists", "print", "open", "f_list.readlines", "os.path.join", "os.path.join", "len", "print", "imageio.imread", "f.endswith", "poses_arr[].reshape", "os.path.join", "int", "load_llff._minify", "os.path.join", "open", "f_list.readlines", "f.strip().replace", "numpy.array", "imageio.imread", "sorted", "float", "int", "load_llff._minify", "os.path.join", "len", "imageio.imread", "load_llff._load_data.imread"], "function", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.load_llff._minify", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.load_llff._minify", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.load_llff._minify"], ["", "", "def", "_load_data", "(", "basedir", ",", "factor", "=", "None", ",", "width", "=", "None", ",", "height", "=", "None", ",", "load_imgs", "=", "True", ")", ":", "\n", "\n", "    ", "poses_arr", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "basedir", ",", "'poses_bounds.npy'", ")", ")", "\n", "poses", "=", "poses_arr", "[", ":", ",", ":", "-", "2", "]", ".", "reshape", "(", "[", "-", "1", ",", "3", ",", "5", "]", ")", ".", "transpose", "(", "[", "1", ",", "2", ",", "0", "]", ")", "\n", "bds", "=", "poses_arr", "[", ":", ",", "-", "2", ":", "]", ".", "transpose", "(", "[", "1", ",", "0", "]", ")", "\n", "\n", "img0", "=", "[", "os", ".", "path", ".", "join", "(", "basedir", ",", "'images'", ",", "f", ")", "for", "f", "in", "sorted", "(", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "basedir", ",", "'images'", ")", ")", ")", "if", "f", ".", "endswith", "(", "'JPG'", ")", "or", "f", ".", "endswith", "(", "'jpg'", ")", "or", "f", ".", "endswith", "(", "'png'", ")", "]", "[", "0", "]", "\n", "sh", "=", "imageio", ".", "imread", "(", "img0", ")", ".", "shape", "\n", "\n", "sfx", "=", "''", "\n", "\n", "if", "factor", "is", "not", "None", ":", "\n", "        ", "sfx", "=", "'_{}'", ".", "format", "(", "factor", ")", "\n", "_minify", "(", "basedir", ",", "factors", "=", "[", "factor", "]", ")", "\n", "factor", "=", "factor", "\n", "", "elif", "height", "is", "not", "None", ":", "\n", "        ", "factor", "=", "sh", "[", "0", "]", "/", "float", "(", "height", ")", "\n", "width", "=", "int", "(", "sh", "[", "1", "]", "/", "factor", ")", "\n", "_minify", "(", "basedir", ",", "resolutions", "=", "[", "[", "height", ",", "width", "]", "]", ")", "\n", "sfx", "=", "'_{}x{}'", ".", "format", "(", "width", ",", "height", ")", "\n", "", "elif", "width", "is", "not", "None", ":", "\n", "        ", "factor", "=", "sh", "[", "1", "]", "/", "float", "(", "width", ")", "\n", "height", "=", "int", "(", "sh", "[", "0", "]", "/", "factor", ")", "\n", "_minify", "(", "basedir", ",", "resolutions", "=", "[", "[", "height", ",", "width", "]", "]", ")", "\n", "sfx", "=", "'_{}x{}'", ".", "format", "(", "width", ",", "height", ")", "\n", "", "else", ":", "\n", "        ", "factor", "=", "1", "\n", "\n", "", "imgdir", "=", "os", ".", "path", ".", "join", "(", "basedir", ",", "'images'", "+", "sfx", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "imgdir", ")", ":", "\n", "        ", "print", "(", "imgdir", ",", "'does not exist, returning'", ")", "\n", "return", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "basedir", ",", "'train.txt'", ")", ",", "'r'", ")", "as", "f_list", ":", "\n", "        ", "lines", "=", "f_list", ".", "readlines", "(", ")", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "basedir", ",", "'test.txt'", ")", ")", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "basedir", ",", "'test.txt'", ")", ",", "'r'", ")", "as", "f_list", ":", "\n", "            ", "lines", "+=", "f_list", ".", "readlines", "(", ")", "\n", "\n", "", "", "imgfiles", "=", "[", "os", ".", "path", ".", "join", "(", "imgdir", ",", "f", ".", "strip", "(", ")", ".", "replace", "(", "'.jpg'", ",", "'.png'", ")", ")", "for", "f", "in", "lines", "]", "\n", "if", "poses", ".", "shape", "[", "-", "1", "]", "!=", "len", "(", "imgfiles", ")", ":", "\n", "        ", "print", "(", "'Mismatch between imgs {} and poses {} !!!!'", ".", "format", "(", "len", "(", "imgfiles", ")", ",", "poses", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "return", "\n", "\n", "", "sh", "=", "imageio", ".", "imread", "(", "imgfiles", "[", "0", "]", ")", ".", "shape", "\n", "poses", "[", ":", "2", ",", "4", ",", ":", "]", "=", "np", ".", "array", "(", "sh", "[", ":", "2", "]", ")", ".", "reshape", "(", "[", "2", ",", "1", "]", ")", "\n", "poses", "[", "2", ",", "4", ",", ":", "]", "=", "poses", "[", "2", ",", "4", ",", ":", "]", "*", "1.", "/", "factor", "\n", "\n", "if", "not", "load_imgs", ":", "\n", "        ", "return", "poses", ",", "bds", "\n", "\n", "", "def", "imread", "(", "f", ")", ":", "\n", "        ", "if", "f", ".", "endswith", "(", "'png'", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "return", "imageio", ".", "imread", "(", "f", ",", "ignoregamma", "=", "True", ")", "\n", "", "except", ":", "\n", "                ", "return", "imageio", ".", "imread", "(", "f", ")", "\n", "", "", "else", ":", "\n", "            ", "return", "imageio", ".", "imread", "(", "f", ")", "\n", "\n", "", "", "imgs", "=", "imgs", "=", "[", "imread", "(", "f", ")", "[", "...", ",", ":", "3", "]", "/", "255.", "for", "f", "in", "imgfiles", "]", "\n", "imgs", "=", "np", ".", "stack", "(", "imgs", ",", "-", "1", ")", "\n", "\n", "print", "(", "'Loaded image data'", ",", "imgs", ".", "shape", ",", "poses", "[", ":", ",", "-", "1", ",", "0", "]", ")", "\n", "return", "poses", ",", "bds", ",", "imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.load_llff.normalize": [[139, 141], ["numpy.linalg.norm"], "function", ["None"], ["", "def", "normalize", "(", "x", ")", ":", "\n", "    ", "return", "x", "/", "np", ".", "linalg", ".", "norm", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.load_llff.viewmatrix": [[142, 149], ["load_llff.normalize", "load_llff.normalize", "load_llff.normalize", "numpy.stack", "numpy.cross", "numpy.cross"], "function", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.load_llff.normalize", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.load_llff.normalize", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.load_llff.normalize"], ["", "def", "viewmatrix", "(", "z", ",", "up", ",", "pos", ")", ":", "\n", "    ", "vec2", "=", "normalize", "(", "z", ")", "\n", "vec1_avg", "=", "up", "\n", "vec0", "=", "normalize", "(", "np", ".", "cross", "(", "vec1_avg", ",", "vec2", ")", ")", "\n", "vec1", "=", "normalize", "(", "np", ".", "cross", "(", "vec2", ",", "vec0", ")", ")", "\n", "m", "=", "np", ".", "stack", "(", "[", "vec0", ",", "vec1", ",", "vec2", ",", "pos", "]", ",", "1", ")", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.load_llff.ptstocam": [[150, 153], ["numpy.matmul"], "function", ["None"], ["", "def", "ptstocam", "(", "pts", ",", "c2w", ")", ":", "\n", "    ", "tt", "=", "np", ".", "matmul", "(", "c2w", "[", ":", "3", ",", ":", "3", "]", ".", "T", ",", "(", "pts", "-", "c2w", "[", ":", "3", ",", "3", "]", ")", "[", "...", ",", "np", ".", "newaxis", "]", ")", "[", "...", ",", "0", "]", "\n", "return", "tt", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.load_llff.poses_avg": [[154, 164], ["poses[].mean", "load_llff.normalize", "poses[].sum", "numpy.concatenate", "poses[].sum", "load_llff.viewmatrix"], "function", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.load_llff.normalize", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.load_llff.viewmatrix"], ["", "def", "poses_avg", "(", "poses", ")", ":", "\n", "\n", "    ", "hwf", "=", "poses", "[", "0", ",", ":", "3", ",", "-", "1", ":", "]", "\n", "\n", "center", "=", "poses", "[", ":", ",", ":", "3", ",", "3", "]", ".", "mean", "(", "0", ")", "\n", "vec2", "=", "normalize", "(", "poses", "[", ":", ",", ":", "3", ",", "2", "]", ".", "sum", "(", "0", ")", ")", "\n", "up", "=", "poses", "[", ":", ",", ":", "3", ",", "1", "]", ".", "sum", "(", "0", ")", "\n", "c2w", "=", "np", ".", "concatenate", "(", "[", "viewmatrix", "(", "vec2", ",", "up", ",", "center", ")", ",", "hwf", "]", ",", "1", ")", "\n", "\n", "return", "c2w", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.load_llff.render_path_spiral": [[167, 177], ["numpy.array", "numpy.linspace", "numpy.dot", "load_llff.normalize", "render_poses.append", "list", "numpy.concatenate", "numpy.array", "numpy.dot", "numpy.array", "load_llff.viewmatrix", "numpy.cos", "numpy.sin", "numpy.sin"], "function", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.load_llff.normalize", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.load_llff.viewmatrix"], ["", "def", "render_path_spiral", "(", "c2w", ",", "up", ",", "rads", ",", "focal", ",", "zdelta", ",", "zrate", ",", "rots", ",", "N", ")", ":", "\n", "    ", "render_poses", "=", "[", "]", "\n", "rads", "=", "np", ".", "array", "(", "list", "(", "rads", ")", "+", "[", "1.", "]", ")", "\n", "hwf", "=", "c2w", "[", ":", ",", "4", ":", "5", "]", "\n", "\n", "for", "theta", "in", "np", ".", "linspace", "(", "0.", ",", "2.", "*", "np", ".", "pi", "*", "rots", ",", "N", "+", "1", ")", "[", ":", "-", "1", "]", ":", "\n", "        ", "c", "=", "np", ".", "dot", "(", "c2w", "[", ":", "3", ",", ":", "4", "]", ",", "np", ".", "array", "(", "[", "np", ".", "cos", "(", "theta", ")", ",", "-", "np", ".", "sin", "(", "theta", ")", ",", "-", "np", ".", "sin", "(", "theta", "*", "zrate", ")", ",", "1.", "]", ")", "*", "rads", ")", "\n", "z", "=", "normalize", "(", "c", "-", "np", ".", "dot", "(", "c2w", "[", ":", "3", ",", ":", "4", "]", ",", "np", ".", "array", "(", "[", "0", ",", "0", ",", "-", "focal", ",", "1.", "]", ")", ")", ")", "\n", "render_poses", ".", "append", "(", "np", ".", "concatenate", "(", "[", "viewmatrix", "(", "z", ",", "up", ",", "c", ")", ",", "hwf", "]", ",", "1", ")", ")", "\n", "", "return", "render_poses", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.load_llff.recenter_poses": [[180, 193], ["numpy.reshape", "load_llff.poses_avg", "numpy.concatenate", "numpy.tile", "numpy.concatenate", "numpy.reshape", "numpy.linalg.inv", "numpy.np.float32"], "function", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.load_llff.poses_avg"], ["", "def", "recenter_poses", "(", "poses", ")", ":", "\n", "\n", "    ", "poses_", "=", "poses", "+", "0", "\n", "bottom", "=", "np", ".", "reshape", "(", "[", "0", ",", "0", ",", "0", ",", "1.", "]", ",", "[", "1", ",", "4", "]", ")", "\n", "c2w", "=", "poses_avg", "(", "poses", ")", "\n", "c2w", "=", "np", ".", "concatenate", "(", "[", "c2w", "[", ":", "3", ",", ":", "4", "]", ",", "bottom", "]", ",", "-", "2", ")", "\n", "bottom", "=", "np", ".", "tile", "(", "np", ".", "reshape", "(", "bottom", ",", "[", "1", ",", "1", ",", "4", "]", ")", ",", "[", "poses", ".", "shape", "[", "0", "]", ",", "1", ",", "1", "]", ")", "\n", "poses", "=", "np", ".", "concatenate", "(", "[", "poses", "[", ":", ",", ":", "3", ",", ":", "4", "]", ",", "bottom", "]", ",", "-", "2", ")", "\n", "\n", "poses", "=", "np", ".", "linalg", ".", "inv", "(", "c2w", ")", "@", "poses", "\n", "poses_", "[", ":", ",", ":", "3", ",", ":", "4", "]", "=", "poses", "[", ":", ",", ":", "3", ",", ":", "4", "]", "\n", "poses", "=", "poses_", "\n", "return", "poses", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.load_llff.spherify_poses": [[198, 255], ["load_llff.spherify_poses.min_line_dist"], "function", ["None"], ["", "def", "spherify_poses", "(", "poses", ",", "bds", ",", "N", ")", ":", "\n", "\n", "    ", "p34_to_44", "=", "lambda", "p", ":", "np", ".", "concatenate", "(", "[", "p", ",", "np", ".", "tile", "(", "np", ".", "reshape", "(", "np", ".", "eye", "(", "4", ")", "[", "-", "1", ",", ":", "]", ",", "[", "1", ",", "1", ",", "4", "]", ")", ",", "[", "p", ".", "shape", "[", "0", "]", ",", "1", ",", "1", "]", ")", "]", ",", "1", ")", "\n", "\n", "rays_d", "=", "poses", "[", ":", ",", ":", "3", ",", "2", ":", "3", "]", "\n", "rays_o", "=", "poses", "[", ":", ",", ":", "3", ",", "3", ":", "4", "]", "\n", "\n", "def", "min_line_dist", "(", "rays_o", ",", "rays_d", ")", ":", "\n", "        ", "A_i", "=", "np", ".", "eye", "(", "3", ")", "-", "rays_d", "*", "np", ".", "transpose", "(", "rays_d", ",", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "b_i", "=", "-", "A_i", "@", "rays_o", "\n", "pt_mindist", "=", "np", ".", "squeeze", "(", "-", "np", ".", "linalg", ".", "inv", "(", "(", "np", ".", "transpose", "(", "A_i", ",", "[", "0", ",", "2", ",", "1", "]", ")", "@", "A_i", ")", ".", "mean", "(", "0", ")", ")", "@", "(", "b_i", ")", ".", "mean", "(", "0", ")", ")", "\n", "return", "pt_mindist", "\n", "\n", "", "pt_mindist", "=", "min_line_dist", "(", "rays_o", ",", "rays_d", ")", "\n", "\n", "center", "=", "pt_mindist", "\n", "up", "=", "(", "poses", "[", ":", ",", ":", "3", ",", "3", "]", "-", "center", ")", ".", "mean", "(", "0", ")", "\n", "\n", "vec0", "=", "normalize", "(", "up", ")", "\n", "vec1", "=", "normalize", "(", "np", ".", "cross", "(", "[", ".1", ",", ".2", ",", ".3", "]", ",", "vec0", ")", ")", "\n", "vec2", "=", "normalize", "(", "np", ".", "cross", "(", "vec0", ",", "vec1", ")", ")", "\n", "pos", "=", "center", "\n", "c2w", "=", "np", ".", "stack", "(", "[", "vec1", ",", "vec2", ",", "vec0", ",", "pos", "]", ",", "1", ")", "\n", "\n", "poses_reset", "=", "np", ".", "linalg", ".", "inv", "(", "p34_to_44", "(", "c2w", "[", "None", "]", ")", ")", "@", "p34_to_44", "(", "poses", "[", ":", ",", ":", "3", ",", ":", "4", "]", ")", "\n", "\n", "rad", "=", "np", ".", "sqrt", "(", "np", ".", "mean", "(", "np", ".", "sum", "(", "np", ".", "square", "(", "poses_reset", "[", ":", ",", ":", "3", ",", "3", "]", ")", ",", "-", "1", ")", ")", ")", "\n", "\n", "sc", "=", "1.", "/", "rad", "\n", "poses_reset", "[", ":", ",", ":", "3", ",", "3", "]", "*=", "sc", "\n", "bds", "*=", "sc", "\n", "rad", "*=", "sc", "\n", "\n", "centroid", "=", "np", ".", "mean", "(", "poses_reset", "[", ":", ",", ":", "3", ",", "3", "]", ",", "0", ")", "\n", "zh", "=", "centroid", "[", "2", "]", "\n", "radcircle", "=", "np", ".", "sqrt", "(", "rad", "**", "2", "-", "zh", "**", "2", ")", "\n", "new_poses", "=", "[", "]", "\n", "\n", "for", "th", "in", "np", ".", "linspace", "(", "0.", ",", "2.", "*", "np", ".", "pi", ",", "N", ")", ":", "\n", "\n", "        ", "camorigin", "=", "np", ".", "array", "(", "[", "radcircle", "*", "np", ".", "cos", "(", "th", ")", ",", "radcircle", "*", "np", ".", "sin", "(", "th", ")", ",", "zh", "]", ")", "\n", "up", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "-", "1.", "]", ")", "\n", "\n", "vec2", "=", "normalize", "(", "camorigin", ")", "\n", "vec0", "=", "normalize", "(", "np", ".", "cross", "(", "vec2", ",", "up", ")", ")", "\n", "vec1", "=", "normalize", "(", "np", ".", "cross", "(", "vec2", ",", "vec0", ")", ")", "\n", "pos", "=", "camorigin", "\n", "p", "=", "np", ".", "stack", "(", "[", "vec0", ",", "vec1", ",", "vec2", ",", "pos", "]", ",", "1", ")", "\n", "\n", "new_poses", ".", "append", "(", "p", ")", "\n", "\n", "", "new_poses", "=", "np", ".", "stack", "(", "new_poses", ",", "0", ")", "\n", "\n", "new_poses", "=", "np", ".", "concatenate", "(", "[", "new_poses", ",", "np", ".", "broadcast_to", "(", "poses", "[", "0", ",", ":", "3", ",", "-", "1", ":", "]", ",", "new_poses", "[", ":", ",", ":", "3", ",", "-", "1", ":", "]", ".", "shape", ")", "]", ",", "-", "1", ")", "\n", "poses_reset", "=", "np", ".", "concatenate", "(", "[", "poses_reset", "[", ":", ",", ":", "3", ",", ":", "4", "]", ",", "np", ".", "broadcast_to", "(", "poses", "[", "0", ",", ":", "3", ",", "-", "1", ":", "]", ",", "poses_reset", "[", ":", ",", ":", "3", ",", "-", "1", ":", "]", ".", "shape", ")", "]", ",", "-", "1", ")", "\n", "\n", "return", "poses_reset", ",", "new_poses", ",", "bds", ",", "sc", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.load_llff.load_llff_data": [[257, 339], ["load_llff._load_data", "print", "numpy.concatenate", "numpy.moveaxis().astype", "numpy.moveaxis().astype", "numpy.moveaxis().astype", "numpy.array().astype", "load_llff.poses_avg", "print", "print", "numpy.sum", "images.astype.astype", "recenter_poses.astype", "os.path.exists", "np.moveaxis().astype.min", "np.moveaxis().astype.max", "load_llff.recenter_poses", "load_llff.spherify_poses", "load_llff.poses_avg", "print", "print", "load_llff.normalize", "numpy.percentile", "load_llff.render_path_spiral", "numpy.square", "open", "f_list.readlines", "list", "os.path.join", "numpy.moveaxis", "numpy.moveaxis", "numpy.moveaxis", "poses[].sum", "numpy.abs", "numpy.array", "os.path.join", "numpy.arange", "open", "f_list.readlines", "list", "np.moveaxis().astype.min", "np.moveaxis().astype.min", "np.moveaxis().astype.max", "len", "os.path.join", "numpy.arange", "len", "len"], "function", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.load_llff._load_data", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.load_llff.poses_avg", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.load_llff.recenter_poses", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.load_llff.spherify_poses", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.load_llff.poses_avg", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.load_llff.normalize", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.load_llff.render_path_spiral"], ["", "def", "load_llff_data", "(", "basedir", ",", "factor", "=", "8", ",", "recenter", "=", "True", ",", "bd_factor", "=", ".75", ",", "spherify", "=", "False", ",", "path_zflat", "=", "False", ",", "N_views", "=", "120", ")", ":", "\n", "\n", "    ", "poses", ",", "bds", ",", "imgs", "=", "_load_data", "(", "basedir", ",", "factor", "=", "factor", ")", "# factor=8 downsamples original imgs by 8x", "\n", "print", "(", "'Loaded'", ",", "basedir", ",", "bds", ".", "min", "(", ")", ",", "bds", ".", "max", "(", ")", ")", "\n", "\n", "# Correct rotation matrix ordering and move variable dim to axis 0", "\n", "poses", "=", "np", ".", "concatenate", "(", "[", "poses", "[", ":", ",", "1", ":", "2", ",", ":", "]", ",", "-", "poses", "[", ":", ",", "0", ":", "1", ",", ":", "]", ",", "poses", "[", ":", ",", "2", ":", ",", ":", "]", "]", ",", "1", ")", "\n", "poses", "=", "np", ".", "moveaxis", "(", "poses", ",", "-", "1", ",", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "imgs", "=", "np", ".", "moveaxis", "(", "imgs", ",", "-", "1", ",", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "images", "=", "imgs", "\n", "bds", "=", "np", ".", "moveaxis", "(", "bds", ",", "-", "1", ",", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# Rescale if bd_factor is provided", "\n", "sc", "=", "1.", "if", "bd_factor", "is", "None", "else", "1.", "/", "(", "bds", ".", "min", "(", ")", "*", "bd_factor", ")", "\n", "poses", "[", ":", ",", ":", "3", ",", "3", "]", "*=", "sc", "\n", "bds", "*=", "sc", "\n", "\n", "if", "recenter", ":", "\n", "        ", "poses", "=", "recenter_poses", "(", "poses", ")", "\n", "\n", "", "if", "spherify", ":", "\n", "        ", "poses", ",", "render_poses", ",", "bds", ",", "sc_spherify", "=", "spherify_poses", "(", "poses", ",", "bds", ",", "N_views", ")", "\n", "sc", "*=", "sc_spherify", "\n", "\n", "", "else", ":", "\n", "\n", "        ", "c2w", "=", "poses_avg", "(", "poses", ")", "\n", "print", "(", "'recentered'", ",", "c2w", ".", "shape", ")", "\n", "print", "(", "c2w", "[", ":", "3", ",", ":", "4", "]", ")", "\n", "\n", "## Get spiral", "\n", "# Get average pose", "\n", "up", "=", "normalize", "(", "poses", "[", ":", ",", ":", "3", ",", "1", "]", ".", "sum", "(", "0", ")", ")", "\n", "\n", "# Find a reasonable \"focus depth\" for this dataset", "\n", "close_depth", ",", "inf_depth", "=", "bds", ".", "min", "(", ")", "*", ".9", ",", "bds", ".", "max", "(", ")", "*", "5.", "\n", "dt", "=", ".75", "\n", "mean_dz", "=", "1.", "/", "(", "(", "(", "1.", "-", "dt", ")", "/", "close_depth", "+", "dt", "/", "inf_depth", ")", ")", "\n", "focal", "=", "mean_dz", "\n", "\n", "# Get radii for spiral path", "\n", "shrink_factor", "=", ".8", "\n", "zdelta", "=", "close_depth", "*", ".2", "\n", "tt", "=", "poses", "[", ":", ",", ":", "3", ",", "3", "]", "# ptstocam(poses[:3,3,:].T, c2w).T", "\n", "rads", "=", "np", ".", "percentile", "(", "np", ".", "abs", "(", "tt", ")", ",", "90", ",", "0", ")", "\n", "c2w_path", "=", "c2w", "\n", "N_rots", "=", "2", "\n", "if", "path_zflat", ":", "\n", "#             zloc = np.percentile(tt, 10, 0)[2]", "\n", "            ", "zloc", "=", "-", "close_depth", "*", ".1", "\n", "c2w_path", "[", ":", "3", ",", "3", "]", "=", "c2w_path", "[", ":", "3", ",", "3", "]", "+", "zloc", "*", "c2w_path", "[", ":", "3", ",", "2", "]", "\n", "rads", "[", "2", "]", "=", "0.", "\n", "N_rots", "=", "1", "\n", "N_views", "/=", "2", "\n", "\n", "# Generate poses for spiral path", "\n", "", "render_poses", "=", "render_path_spiral", "(", "c2w_path", ",", "up", ",", "rads", ",", "focal", ",", "zdelta", ",", "zrate", "=", ".5", ",", "rots", "=", "N_rots", ",", "N", "=", "N_views", ")", "\n", "\n", "\n", "", "render_poses", "=", "np", ".", "array", "(", "render_poses", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "c2w", "=", "poses_avg", "(", "poses", ")", "\n", "print", "(", "'Data:'", ")", "\n", "print", "(", "poses", ".", "shape", ",", "images", ".", "shape", ",", "bds", ".", "shape", ")", "\n", "\n", "dists", "=", "np", ".", "sum", "(", "np", ".", "square", "(", "c2w", "[", ":", "3", ",", "3", "]", "-", "poses", "[", ":", ",", ":", "3", ",", "3", "]", ")", ",", "-", "1", ")", "\n", "\n", "images", "=", "images", ".", "astype", "(", "np", ".", "float32", ")", "\n", "poses", "=", "poses", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "basedir", ",", "'train.txt'", ")", ",", "'r'", ")", "as", "f_list", ":", "\n", "        ", "lines", "=", "f_list", ".", "readlines", "(", ")", "\n", "i_train", "=", "list", "(", "np", ".", "arange", "(", "len", "(", "lines", ")", ")", ")", "\n", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "basedir", ",", "'test.txt'", ")", ")", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "basedir", ",", "'test.txt'", ")", ",", "'r'", ")", "as", "f_list", ":", "\n", "            ", "lines", "=", "f_list", ".", "readlines", "(", ")", "\n", "i_test", "=", "list", "(", "np", ".", "arange", "(", "len", "(", "lines", ")", ")", "+", "len", "(", "i_train", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "i_test", "=", "[", "]", "\n", "\n", "", "return", "images", ",", "poses", ",", "bds", ",", "render_poses", ",", "i_train", ",", "i_test", ",", "sc", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.depth_priors.create_depth_model": [[18, 53], ["models.depth_priors.mannequin_challenge_model.MannequinChallengeModel", "models.depth_priors.mannequin_challenge_model.MannequinChallengeModel.parameters", "torch.optim.Adam", "os.path.join", "os.path.join", "print", "print", "torch.load", "torch.optim.Adam.load_state_dict", "models.depth_priors.mannequin_challenge_model.MannequinChallengeModel.model.netG.load_state_dict", "sorted", "len", "os.listdir"], "function", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.depth_priors.mannequin_challenge_model.MannequinChallengeModel.parameters"], ["def", "create_depth_model", "(", "args", ")", ":", "\n", "    ", "\"\"\"Instantiate depth model.\n    \"\"\"", "\n", "depth_model", "=", "MannequinChallengeModel", "(", ")", "\n", "grad_vars", "=", "depth_model", ".", "parameters", "(", ")", "\n", "# Create optimizer", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "params", "=", "grad_vars", ",", "lr", "=", "args", ".", "depth_lrate", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ")", "\n", "\n", "start", "=", "0", "\n", "basedir", "=", "args", ".", "basedir", "\n", "expname", "=", "args", ".", "expname", "\n", "ckpt_path", "=", "os", ".", "path", ".", "join", "(", "basedir", ",", "expname", ",", "'depth_priors'", ",", "'checkpoints'", ")", "\n", "\n", "# Load checkpoints", "\n", "ckpts", "=", "[", "os", ".", "path", ".", "join", "(", "ckpt_path", ",", "f", ")", "for", "f", "in", "sorted", "(", "os", ".", "listdir", "(", "ckpt_path", ")", ")", "if", "'tar'", "in", "f", "]", "\n", "\n", "if", "len", "(", "ckpts", ")", ">", "0", "and", "not", "args", ".", "no_reload", ":", "\n", "        ", "print", "(", "'Found ckpts'", ",", "ckpts", ")", "\n", "ckpt_path", "=", "ckpts", "[", "-", "1", "]", "\n", "print", "(", "'Reloading from'", ",", "ckpt_path", ")", "\n", "ckpt", "=", "torch", ".", "load", "(", "ckpt_path", ")", "\n", "\n", "start", "=", "ckpt", "[", "'global_step'", "]", "\n", "optimizer", ".", "load_state_dict", "(", "ckpt", "[", "'optimizer_state_dict'", "]", ")", "\n", "\n", "decay_rate", "=", "0.1", "\n", "decay_steps", "=", "args", ".", "depth_N_iters", "\n", "\n", "new_lrate", "=", "args", ".", "depth_lrate", "*", "(", "decay_rate", "**", "(", "start", "/", "decay_steps", ")", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "new_lrate", "\n", "\n", "", "depth_model", ".", "model", ".", "netG", ".", "load_state_dict", "(", "ckpt", "[", "'netG_state_dict'", "]", ")", "\n", "\n", "", "return", "depth_model", ",", "start", ",", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.depth_priors.train": [[56, 132], ["print", "load_img_list", "depth_priors.create_depth_model", "os.path.join", "torch.utils.tensorboard.SummaryWriter", "load_rgbs", "load_rgbs.clone", "load_colmap", "torch.from_numpy().to", "torch.from_numpy().to", "depth_model.train", "tqdm.trange", "print", "print", "os.path.join", "os.path.join", "depth_model", "compute_depth_loss", "optimizer_depth.zero_grad", "compute_depth_loss.backward", "optimizer_depth.step", "torch.no_grad", "depth_model.eval", "enumerate", "torch.from_numpy", "torch.from_numpy", "print", "torch.randperm", "os.path.join", "torch.save", "print", "tqdm.tqdm.write", "depth_model.forward().cpu().numpy", "visualize_depth", "cv2.imwrite", "numpy.save", "os.path.join", "image_name.split", "os.path.join", "os.path.join", "depth_model.model.netG.state_dict", "optimizer_depth.state_dict", "depth_model.forward().cpu", "compute_depth_loss.item", "depth_model.forward"], "function", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.io_utils.load_img_list", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.depth_priors.create_depth_model", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.io_utils.load_rgbs", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.io_utils.load_colmap", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.depth_priors.mannequin_challenge_model.MannequinChallengeModel.train", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.depth_priors_utils.compute_depth_loss", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.depth_priors.mannequin_challenge_model.MannequinChallengeModel.eval", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.pix2pix_model.Pix2PixModel.save", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.io_utils.visualize_depth", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.pix2pix_model.Pix2PixModel.save", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.nerf.run_nerf_helpers.NeRF.forward"], ["", "def", "train", "(", "args", ")", ":", "\n", "    ", "print", "(", "'Depths prior training begins !'", ")", "\n", "image_list", "=", "load_img_list", "(", "args", ".", "datadir", ")", "\n", "depth_model", ",", "global_step_depth", ",", "optimizer_depth", "=", "create_depth_model", "(", "args", ")", "\n", "\n", "# Summary writers", "\n", "save_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "basedir", ",", "args", ".", "expname", ",", "'depth_priors'", ")", "\n", "writer", "=", "SummaryWriter", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'summary'", ")", ")", "\n", "\n", "\n", "images", "=", "load_rgbs", "(", "image_list", ",", "os", ".", "path", ".", "join", "(", "args", ".", "datadir", ",", "'images'", ")", ",", "\n", "args", ".", "depth_H", ",", "args", ".", "depth_W", ")", "\n", "images_train", "=", "images", ".", "clone", "(", ")", "\n", "depths", ",", "masks", "=", "load_colmap", "(", "image_list", ",", "args", ".", "datadir", ",", "\n", "args", ".", "depth_H", ",", "args", ".", "depth_W", ")", "\n", "\n", "depths_train", "=", "torch", ".", "from_numpy", "(", "depths", ")", ".", "to", "(", "device", ")", "\n", "depths_mask_train", "=", "torch", ".", "from_numpy", "(", "masks", ")", ".", "to", "(", "device", ")", "\n", "\n", "N_rand_depth", "=", "args", ".", "depth_N_rand", "\n", "N_iters_depth", "=", "args", ".", "depth_N_iters", "\n", "\n", "i_batch", "=", "0", "\n", "depth_model", ".", "train", "(", ")", "\n", "start", "=", "global_step_depth", "+", "1", "\n", "\n", "for", "i", "in", "trange", "(", "start", ",", "N_iters_depth", ")", ":", "\n", "        ", "batch", "=", "images_train", "[", "i_batch", ":", "i_batch", "+", "N_rand_depth", "]", "\n", "depth_gt", ",", "mask_gt", "=", "depths_train", "[", "i_batch", ":", "i_batch", "+", "N_rand_depth", "]", ",", "depths_mask_train", "[", "i_batch", ":", "i_batch", "+", "N_rand_depth", "]", "\n", "depth_pred", "=", "depth_model", "(", "batch", ")", "\n", "loss", "=", "compute_depth_loss", "(", "depth_pred", ",", "depth_gt", ",", "mask_gt", ")", "\n", "\n", "optimizer_depth", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer_depth", ".", "step", "(", ")", "\n", "decay_rate", "=", "0.1", "\n", "decay_steps", "=", "args", ".", "depth_N_iters", "\n", "new_lrate", "=", "args", ".", "depth_lrate", "*", "(", "decay_rate", "**", "(", "i", "/", "decay_steps", ")", ")", "\n", "for", "param_group", "in", "optimizer_depth", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "new_lrate", "\n", "", "i_batch", "+=", "N_rand_depth", "\n", "\n", "if", "i_batch", ">=", "images_train", ".", "shape", "[", "0", "]", ":", "\n", "\n", "            ", "print", "(", "\"Shuffle depth data after an epoch!\"", ")", "\n", "rand_idx", "=", "torch", ".", "randperm", "(", "images_train", ".", "shape", "[", "0", "]", ")", "\n", "images_train", "=", "images_train", "[", "rand_idx", "]", "\n", "depths_train", "=", "depths_train", "[", "rand_idx", "]", "\n", "depths_mask_train", "=", "depths_mask_train", "[", "rand_idx", "]", "\n", "i_batch", "=", "0", "\n", "\n", "", "if", "i", "%", "args", ".", "depth_i_weights", "==", "0", ":", "\n", "            ", "path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'checkpoints'", ",", "'{:06d}.tar'", ".", "format", "(", "i", ")", ")", "\n", "torch", ".", "save", "(", "{", "\n", "'global_step'", ":", "i", ",", "\n", "'netG_state_dict'", ":", "depth_model", ".", "model", ".", "netG", ".", "state_dict", "(", ")", ",", "\n", "'optimizer_state_dict'", ":", "optimizer_depth", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "path", ")", "\n", "print", "(", "'Saved checkpoints at'", ",", "path", ")", "\n", "\n", "", "if", "i", "%", "args", ".", "depth_i_print", "==", "0", ":", "\n", "            ", "tqdm", ".", "write", "(", "f\"[TRAIN] Iter: {i} Loss: {loss.item()}\"", ")", "\n", "\n", "", "global_step_depth", "+=", "1", "\n", "", "print", "(", "'depths prior training done!'", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "depth_model", ".", "eval", "(", ")", "\n", "for", "i", ",", "image_name", "in", "enumerate", "(", "image_list", ")", ":", "\n", "            ", "frame_id", "=", "image_name", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "batch", "=", "images", "[", "i", ":", "i", "+", "1", "]", "\n", "depth_pred", "=", "depth_model", ".", "forward", "(", "batch", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "depth_color", "=", "visualize_depth", "(", "depth_pred", ")", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'results'", ",", "'{}_depth.png'", ".", "format", "(", "frame_id", ")", ")", ",", "depth_color", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'results'", ",", "'{}_depth.npy'", ".", "format", "(", "frame_id", ")", ")", ",", "depth_pred", ")", "\n", "", "", "print", "(", "'results have been saved in {}'", ".", "format", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'results'", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.run_nerf.batchify": [[27, 35], ["torch.cat", "torch.cat", "torch.cat", "fn", "range"], "function", ["None"], ["def", "batchify", "(", "fn", ",", "chunk", ")", ":", "\n", "    ", "\"\"\"Constructs a version of 'fn' that applies to smaller batches.\n    \"\"\"", "\n", "if", "chunk", "is", "None", ":", "\n", "        ", "return", "fn", "\n", "", "def", "ret", "(", "inputs", ")", ":", "\n", "        ", "return", "torch", ".", "cat", "(", "[", "fn", "(", "inputs", "[", "i", ":", "i", "+", "chunk", "]", ")", "for", "i", "in", "range", "(", "0", ",", "inputs", ".", "shape", "[", "0", "]", ",", "chunk", ")", "]", ",", "0", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.run_nerf.run_network": [[37, 52], ["torch.reshape", "torch.reshape", "torch.reshape", "embed_fn", "torch.reshape", "torch.reshape", "torch.reshape", "viewdirs[].expand", "torch.reshape", "torch.reshape", "torch.reshape", "embeddirs_fn", "torch.cat", "torch.cat", "torch.cat", "run_nerf.batchify", "list"], "function", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.run_nerf.batchify"], ["", "def", "run_network", "(", "inputs", ",", "viewdirs", ",", "fn", ",", "embed_fn", ",", "embeddirs_fn", ",", "netchunk", "=", "1024", "*", "64", ")", ":", "\n", "    ", "\"\"\"Prepares inputs and applies network 'fn'.\n    \"\"\"", "\n", "inputs_flat", "=", "torch", ".", "reshape", "(", "inputs", ",", "[", "-", "1", ",", "inputs", ".", "shape", "[", "-", "1", "]", "]", ")", "\n", "embedded", "=", "embed_fn", "(", "inputs_flat", ")", "\n", "\n", "if", "viewdirs", "is", "not", "None", ":", "\n", "        ", "input_dirs", "=", "viewdirs", "[", ":", ",", "None", "]", ".", "expand", "(", "inputs", ".", "shape", ")", "\n", "input_dirs_flat", "=", "torch", ".", "reshape", "(", "input_dirs", ",", "[", "-", "1", ",", "input_dirs", ".", "shape", "[", "-", "1", "]", "]", ")", "\n", "embedded_dirs", "=", "embeddirs_fn", "(", "input_dirs_flat", ")", "\n", "embedded", "=", "torch", ".", "cat", "(", "[", "embedded", ",", "embedded_dirs", "]", ",", "-", "1", ")", "\n", "\n", "", "outputs_flat", "=", "batchify", "(", "fn", ",", "netchunk", ")", "(", "embedded", ")", "\n", "outputs", "=", "torch", ".", "reshape", "(", "outputs_flat", ",", "list", "(", "inputs", ".", "shape", "[", ":", "-", "1", "]", ")", "+", "[", "outputs_flat", ".", "shape", "[", "-", "1", "]", "]", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.run_nerf.batchify_rays": [[54, 67], ["range", "run_nerf.render_rays", "torch.cat", "torch.cat", "torch.cat", "all_ret[].append"], "function", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.run_nerf.render_rays"], ["", "def", "batchify_rays", "(", "rays_flat", ",", "chunk", "=", "1024", "*", "32", ",", "depth_priors", "=", "None", ",", "depth_confidences", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Render rays in smaller minibatches to avoid OOM.\n    \"\"\"", "\n", "all_ret", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "0", ",", "rays_flat", ".", "shape", "[", "0", "]", ",", "chunk", ")", ":", "\n", "        ", "ret", "=", "render_rays", "(", "rays_flat", "[", "i", ":", "i", "+", "chunk", "]", ",", "depth_priors", "=", "depth_priors", "[", "i", ":", "i", "+", "chunk", "]", ",", "depth_confidences", "=", "depth_confidences", "[", "i", ":", "i", "+", "chunk", "]", ",", "**", "kwargs", ")", "\n", "for", "k", "in", "ret", ":", "\n", "            ", "if", "k", "not", "in", "all_ret", ":", "\n", "                ", "all_ret", "[", "k", "]", "=", "[", "]", "\n", "", "all_ret", "[", "k", "]", ".", "append", "(", "ret", "[", "k", "]", ")", "\n", "\n", "", "", "all_ret", "=", "{", "k", ":", "torch", ".", "cat", "(", "all_ret", "[", "k", "]", ",", "0", ")", "for", "k", "in", "all_ret", "}", "\n", "return", "all_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.run_nerf.render": [[69, 143], ["torch.reshape().float", "torch.reshape().float", "torch.reshape().float", "torch.reshape().float", "torch.reshape().float", "torch.reshape().float", "torch.reshape().float", "torch.reshape().float", "torch.reshape().float", "torch.reshape().float", "torch.reshape().float", "torch.reshape().float", "torch.cat", "torch.cat", "torch.cat", "run_nerf.batchify_rays", "get_rays", "torch.reshape().float", "torch.reshape().float", "torch.reshape().float", "torch.reshape().float.clone", "torch.reshape().float.clone", "ndc_rays", "torch.cat", "torch.cat", "torch.cat", "torch.reshape", "torch.reshape", "torch.reshape", "get_rays", "torch.norm", "torch.norm", "torch.norm", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "list", "list", "torch.reshape", "torch.reshape", "torch.reshape"], "function", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.run_nerf.batchify_rays", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.nerf.run_nerf_helpers.get_rays", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.nerf.run_nerf_helpers.ndc_rays", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.nerf.run_nerf_helpers.get_rays"], ["", "def", "render", "(", "H", ",", "W", ",", "focal", ",", "chunk", "=", "1024", "*", "32", ",", "rays", "=", "None", ",", "c2w", "=", "None", ",", "ndc", "=", "True", ",", "\n", "near", "=", "0.", ",", "far", "=", "1.", ",", "\n", "use_viewdirs", "=", "False", ",", "c2w_staticcam", "=", "None", ",", "depth_priors", "=", "None", ",", "depth_confidences", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Render rays\n    Args:\n      H: int. Height of image in pixels.\n      W: int. Width of image in pixels.\n      focal: float. Focal length of pinhole camera.\n      chunk: int. Maximum number of rays to process simultaneously. Used to\n        control maximum memory usage. Does not affect final results.\n      rays: array of shape [2, batch_size, 3]. Ray origin and direction for\n        each example in batch.\n      c2w: array of shape [3, 4]. Camera-to-world transformation matrix.\n      ndc: bool. If True, represent ray origin, direction in NDC coordinates.\n      near: float or array of shape [batch_size]. Nearest distance for a ray.\n      far: float or array of shape [batch_size]. Farthest distance for a ray.\n      use_viewdirs: bool. If True, use viewing direction of a point in space in model.\n      c2w_staticcam: array of shape [3, 4]. If not None, use this transformation matrix for\n       camera while using other c2w argument for viewing directions.\n    Returns:\n      rgb_map: [batch_size, 3]. Predicted RGB values for rays.\n      disp_map: [batch_size]. Disparity map. Inverse of depth.\n      acc_map: [batch_size]. Accumulated opacity (alpha) along a ray.\n      extras: dict with everything returned by render_rays().\n    \"\"\"", "\n", "if", "c2w", "is", "not", "None", ":", "\n", "# special case to render full image", "\n", "        ", "rays_o", ",", "rays_d", "=", "get_rays", "(", "H", ",", "W", ",", "focal", ",", "c2w", ")", "\n", "", "else", ":", "\n", "# use provided ray batch", "\n", "        ", "rays_o", ",", "rays_d", "=", "rays", "\n", "\n", "", "if", "use_viewdirs", ":", "\n", "# provide ray directions as input", "\n", "        ", "viewdirs", "=", "rays_d", "\n", "if", "c2w_staticcam", "is", "not", "None", ":", "\n", "# special case to visualize effect of viewdirs", "\n", "            ", "rays_o", ",", "rays_d", "=", "get_rays", "(", "H", ",", "W", ",", "focal", ",", "c2w_staticcam", ")", "\n", "", "viewdirs", "=", "viewdirs", "/", "torch", ".", "norm", "(", "viewdirs", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "viewdirs", "=", "torch", ".", "reshape", "(", "viewdirs", ",", "[", "-", "1", ",", "3", "]", ")", ".", "float", "(", ")", "\n", "\n", "", "sh", "=", "rays_d", ".", "shape", "# [..., 3]", "\n", "if", "ndc", ":", "\n", "# for forward facing scenes", "\n", "        ", "rays_o_ori", "=", "rays_o", ".", "clone", "(", ")", "\n", "rays_d_ori", "=", "rays_d", ".", "clone", "(", ")", "\n", "rays_o", ",", "rays_d", "=", "ndc_rays", "(", "H", ",", "W", ",", "focal", ",", "1.", ",", "rays_o", ",", "rays_d", ")", "\n", "\n", "# Create ray batch", "\n", "", "rays_o", "=", "torch", ".", "reshape", "(", "rays_o", ",", "[", "-", "1", ",", "3", "]", ")", ".", "float", "(", ")", "\n", "rays_d", "=", "torch", ".", "reshape", "(", "rays_d", ",", "[", "-", "1", ",", "3", "]", ")", ".", "float", "(", ")", "\n", "depth_priors", "=", "torch", ".", "reshape", "(", "depth_priors", ",", "[", "-", "1", "]", ")", ".", "float", "(", ")", "\n", "depth_confidences", "=", "torch", ".", "reshape", "(", "depth_confidences", ",", "[", "-", "1", "]", ")", ".", "float", "(", ")", "\n", "\n", "near", ",", "far", "=", "near", "*", "torch", ".", "ones_like", "(", "rays_d", "[", "...", ",", ":", "1", "]", ")", ",", "far", "*", "torch", ".", "ones_like", "(", "rays_d", "[", "...", ",", ":", "1", "]", ")", "\n", "rays", "=", "torch", ".", "cat", "(", "[", "rays_o", ",", "rays_d", ",", "near", ",", "far", "]", ",", "-", "1", ")", "\n", "if", "use_viewdirs", ":", "\n", "        ", "rays", "=", "torch", ".", "cat", "(", "[", "rays", ",", "viewdirs", "]", ",", "-", "1", ")", "\n", "\n", "# Render and reshape", "\n", "", "all_ret", "=", "batchify_rays", "(", "rays", ",", "chunk", ",", "depth_priors", ",", "depth_confidences", ",", "**", "kwargs", ")", "\n", "for", "k", "in", "all_ret", ":", "\n", "        ", "k_sh", "=", "list", "(", "sh", "[", ":", "-", "1", "]", ")", "+", "list", "(", "all_ret", "[", "k", "]", ".", "shape", "[", "1", ":", "]", ")", "\n", "all_ret", "[", "k", "]", "=", "torch", ".", "reshape", "(", "all_ret", "[", "k", "]", ",", "k_sh", ")", "\n", "\n", "", "if", "ndc", ":", "\n", "        ", "all_ret", "[", "'depth_map'", "]", "=", "-", "1", "/", "rays_d_ori", "[", ":", ",", "2", "]", "*", "(", "1", "/", "(", "1", "-", "all_ret", "[", "'depth_map'", "]", ")", "+", "rays_o_ori", "[", ":", ",", "2", "]", ")", "\n", "\n", "", "k_extract", "=", "[", "'rgb_map'", ",", "'disp_map'", ",", "'acc_map'", ",", "'depth_map'", "]", "\n", "ret_list", "=", "[", "all_ret", "[", "k", "]", "for", "k", "in", "k_extract", "]", "\n", "ret_dict", "=", "{", "k", ":", "all_ret", "[", "k", "]", "for", "k", "in", "all_ret", "if", "k", "not", "in", "k_extract", "}", "\n", "\n", "return", "ret_list", "+", "[", "ret_dict", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.run_nerf.render_path": [[145, 187], ["enumerate", "numpy.stack", "numpy.stack", "torch.stack", "torch.stack", "torch.stack", "tqdm.tqdm", "run_nerf.render", "np.stack.append", "np.stack.append", "torch.stack.append", "torch.stack.cpu().numpy", "rgb.cpu().numpy", "disp.cpu().numpy", "print", "to8b", "os.path.join", "imageio.imwrite", "os.path.join", "numpy.save", "visualize_depth", "os.path.join", "cv2.imwrite", "image_list[].split", "depth.cpu().numpy", "torch.stack.cpu", "rgb.cpu", "disp.cpu", "depth.cpu().numpy", "depth.cpu", "depth.cpu"], "function", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.run_nerf.render", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.pix2pix_model.Pix2PixModel.save", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.io_utils.visualize_depth"], ["", "def", "render_path", "(", "render_poses", ",", "hwf", ",", "chunk", ",", "render_kwargs", ",", "image_list", ",", "sc", ",", "\n", "depth_priors", "=", "None", ",", "depth_confidences", "=", "None", ",", "savedir", "=", "None", ",", "render_factor", "=", "0", ")", ":", "\n", "\n", "    ", "H", ",", "W", ",", "focal", "=", "hwf", "\n", "\n", "if", "render_factor", "!=", "0", ":", "\n", "# Render downsampled for speed", "\n", "        ", "H", "=", "H", "//", "render_factor", "\n", "W", "=", "W", "//", "render_factor", "\n", "focal", "=", "focal", "/", "render_factor", "\n", "\n", "", "rgbs", "=", "[", "]", "\n", "disps", "=", "[", "]", "\n", "depths", "=", "[", "]", "\n", "\n", "for", "i", ",", "c2w", "in", "enumerate", "(", "tqdm", "(", "render_poses", ")", ")", ":", "\n", "        ", "rgb", ",", "disp", ",", "acc", ",", "depth", ",", "_", "=", "render", "(", "H", ",", "W", ",", "focal", ",", "depth_priors", "=", "depth_priors", "[", "i", "]", ",", "depth_confidences", "=", "depth_confidences", "[", "i", "]", ",", "chunk", "=", "chunk", ",", "c2w", "=", "c2w", "[", ":", "3", ",", ":", "4", "]", ",", "**", "render_kwargs", ")", "\n", "rgbs", ".", "append", "(", "rgb", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "disps", ".", "append", "(", "disp", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "depths", ".", "append", "(", "depth", ")", "\n", "if", "i", "==", "0", ":", "\n", "            ", "print", "(", "rgb", ".", "shape", ",", "disp", ".", "shape", ")", "\n", "\n", "\n", "", "if", "savedir", "is", "not", "None", ":", "\n", "            ", "rgb8", "=", "to8b", "(", "rgbs", "[", "-", "1", "]", ")", "\n", "frame_id", "=", "image_list", "[", "i", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "savedir", ",", "'{}.png'", ".", "format", "(", "frame_id", ")", ")", "\n", "imageio", ".", "imwrite", "(", "filename", ",", "rgb8", ")", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "savedir", ",", "'{}_depth.npy'", ".", "format", "(", "frame_id", ")", ")", "\n", "np", ".", "save", "(", "filename", ",", "depth", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "/", "sc", ")", "\n", "disp_visual", "=", "visualize_depth", "(", "depth", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "savedir", ",", "'{}_depth.png'", ".", "format", "(", "frame_id", ")", ")", "\n", "cv2", ".", "imwrite", "(", "filename", ",", "disp_visual", ")", "\n", "\n", "\n", "\n", "", "", "rgbs", "=", "np", ".", "stack", "(", "rgbs", ",", "0", ")", "\n", "disps", "=", "np", ".", "stack", "(", "disps", ",", "0", ")", "\n", "depths", "=", "torch", ".", "stack", "(", "depths", ",", "0", ")", "\n", "\n", "return", "rgbs", ",", "disps", ",", "depths", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.run_nerf.create_nerf": [[190, 281], ["get_embedder", "NeRF().to", "list", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "get_embedder", "NeRF().to.parameters", "run_nerf.run_network", "print", "torch.load", "torch.load", "torch.load", "torch.optim.Adam.load_state_dict", "NeRF().to.load_state_dict", "os.path.join", "print", "print", "NeRF", "os.path.join", "print", "torch.load", "torch.load", "torch.load", "torch.optim.Adam.load_state_dict", "NeRF().to.load_state_dict", "sorted", "len", "os.listdir"], "function", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.nerf.run_nerf_helpers.get_embedder", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.nerf.run_nerf_helpers.get_embedder", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.depth_priors.mannequin_challenge_model.MannequinChallengeModel.parameters", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.run_nerf.run_network"], ["", "def", "create_nerf", "(", "args", ")", ":", "\n", "    ", "\"\"\"Instantiate NeRF's MLP model.\n    \"\"\"", "\n", "embed_fn", ",", "input_ch", "=", "get_embedder", "(", "args", ".", "multires", ",", "args", ".", "i_embed", ")", "\n", "\n", "input_ch_views", "=", "0", "\n", "embeddirs_fn", "=", "None", "\n", "if", "args", ".", "use_viewdirs", ":", "\n", "        ", "embeddirs_fn", ",", "input_ch_views", "=", "get_embedder", "(", "args", ".", "multires_views", ",", "args", ".", "i_embed", ")", "\n", "", "output_ch", "=", "4", "\n", "skips", "=", "[", "4", "]", "\n", "model", "=", "NeRF", "(", "D", "=", "args", ".", "netdepth", ",", "W", "=", "args", ".", "netwidth", ",", "\n", "input_ch", "=", "input_ch", ",", "output_ch", "=", "output_ch", ",", "skips", "=", "skips", ",", "\n", "input_ch_views", "=", "input_ch_views", ",", "use_viewdirs", "=", "args", ".", "use_viewdirs", ")", ".", "to", "(", "device", ")", "\n", "grad_vars", "=", "list", "(", "model", ".", "parameters", "(", ")", ")", "\n", "\n", "network_query_fn", "=", "lambda", "inputs", ",", "viewdirs", ",", "network_fn", ":", "run_network", "(", "inputs", ",", "viewdirs", ",", "network_fn", ",", "\n", "embed_fn", "=", "embed_fn", ",", "\n", "embeddirs_fn", "=", "embeddirs_fn", ",", "\n", "netchunk", "=", "args", ".", "netchunk", ")", "\n", "\n", "# Create optimizer", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "params", "=", "grad_vars", ",", "lr", "=", "args", ".", "lrate", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ")", "\n", "\n", "start", "=", "0", "\n", "basedir", "=", "args", ".", "basedir", "\n", "expname", "=", "args", ".", "expname", "\n", "\n", "##########################", "\n", "\n", "# Load checkpoints", "\n", "if", "args", ".", "ft_path", "is", "not", "None", "and", "args", ".", "ft_path", "!=", "'None'", ":", "\n", "        ", "ckpts", "=", "[", "args", ".", "ft_path", "]", "\n", "ckpt_path", "=", "ckpts", "[", "-", "1", "]", "\n", "print", "(", "'Reloading from'", ",", "ckpt_path", ")", "\n", "ckpt", "=", "torch", ".", "load", "(", "ckpt_path", ")", "\n", "\n", "#start = 0", "\n", "start", "=", "ckpt", "[", "'global_step'", "]", "\n", "optimizer", ".", "load_state_dict", "(", "ckpt", "[", "'optimizer_state_dict'", "]", ")", "\n", "\n", "decay_rate", "=", "0.1", "\n", "decay_steps", "=", "args", ".", "lrate_decay", "*", "1000", "\n", "new_lrate", "=", "args", ".", "lrate", "*", "(", "decay_rate", "**", "(", "start", "/", "decay_steps", ")", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "new_lrate", "\n", "\n", "# Load model", "\n", "", "model", ".", "load_state_dict", "(", "ckpt", "[", "'network_fn_state_dict'", "]", ")", "\n", "\n", "", "else", ":", "\n", "        ", "ckpt_path", "=", "os", ".", "path", ".", "join", "(", "basedir", ",", "expname", ",", "'nerf'", ",", "'checkpoints'", ")", "\n", "ckpts", "=", "[", "os", ".", "path", ".", "join", "(", "ckpt_path", ",", "f", ")", "for", "f", "in", "sorted", "(", "os", ".", "listdir", "(", "ckpt_path", ")", ")", "if", "'tar'", "in", "f", "]", "\n", "\n", "print", "(", "'Found ckpts'", ",", "ckpts", ")", "\n", "if", "len", "(", "ckpts", ")", ">", "0", "and", "not", "args", ".", "no_reload", ":", "\n", "            ", "ckpt_path", "=", "ckpts", "[", "-", "1", "]", "\n", "print", "(", "'Reloading from'", ",", "ckpt_path", ")", "\n", "ckpt", "=", "torch", ".", "load", "(", "ckpt_path", ")", "\n", "\n", "start", "=", "ckpt", "[", "'global_step'", "]", "\n", "optimizer", ".", "load_state_dict", "(", "ckpt", "[", "'optimizer_state_dict'", "]", ")", "\n", "\n", "# Load model", "\n", "model", ".", "load_state_dict", "(", "ckpt", "[", "'network_fn_state_dict'", "]", ")", "\n", "\n", "##########################", "\n", "\n", "", "", "render_kwargs_train", "=", "{", "\n", "'network_query_fn'", ":", "network_query_fn", ",", "\n", "'perturb'", ":", "args", ".", "perturb", ",", "\n", "'N_samples'", ":", "args", ".", "N_samples", ",", "\n", "'network_fn'", ":", "model", ",", "\n", "'use_viewdirs'", ":", "args", ".", "use_viewdirs", ",", "\n", "'white_bkgd'", ":", "args", ".", "white_bkgd", ",", "\n", "'raw_noise_std'", ":", "args", ".", "raw_noise_std", ",", "\n", "'near_bound'", ":", "args", ".", "near", ",", "\n", "'far_bound'", ":", "args", ".", "far", ",", "\n", "}", "\n", "\n", "# NDC only good for LLFF-style forward facing data", "\n", "if", "args", ".", "no_ndc", ":", "\n", "        ", "print", "(", "'Not ndc!'", ")", "\n", "render_kwargs_train", "[", "'ndc'", "]", "=", "False", "\n", "render_kwargs_train", "[", "'lindisp'", "]", "=", "args", ".", "lindisp", "\n", "\n", "", "render_kwargs_test", "=", "{", "k", ":", "render_kwargs_train", "[", "k", "]", "for", "k", "in", "render_kwargs_train", "}", "\n", "render_kwargs_test", "[", "'perturb'", "]", "=", "False", "\n", "render_kwargs_test", "[", "'raw_noise_std'", "]", "=", "0.", "\n", "\n", "return", "render_kwargs_train", ",", "render_kwargs_test", ",", "start", ",", "grad_vars", ",", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.run_nerf.raw2outputs": [[283, 325], ["torch.cat", "torch.cat", "torch.cat", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "raw2alpha", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.norm", "torch.norm", "torch.norm", "torch.max", "torch.max", "torch.max", "torch.exp", "torch.exp", "torch.exp", "torch.Tensor().expand", "torch.Tensor().expand", "torch.Tensor().expand", "torch.randn", "torch.randn", "torch.randn", "numpy.random.seed", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.cumprod", "torch.cumprod", "torch.cumprod", "numpy.random.rand", "torch.cat", "torch.cat", "torch.cat", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.sum", "torch.sum", "torch.sum", "torch.Tensor", "torch.Tensor", "torch.Tensor", "act_fn", "list", "torch.ones", "torch.ones", "torch.ones"], "function", ["None"], ["", "def", "raw2outputs", "(", "raw", ",", "z_vals", ",", "rays_d", ",", "raw_noise_std", "=", "0", ",", "white_bkgd", "=", "False", ",", "pytest", "=", "False", ")", ":", "\n", "    ", "\"\"\"Transforms model's predictions to semantically meaningful values.\n    Args:\n        raw: [num_rays, num_samples along ray, 4]. Prediction from model.\n        z_vals: [num_rays, num_samples along ray]. Integration time.\n        rays_d: [num_rays, 3]. Direction of each ray.\n    Returns:\n        rgb_map: [num_rays, 3]. Estimated RGB color of a ray.\n        disp_map: [num_rays]. Disparity map. Inverse of depth map.\n        acc_map: [num_rays]. Sum of weights along each ray.\n        weights: [num_rays, num_samples]. Weights assigned to each sampled color.\n        depth_map: [num_rays]. Estimated distance to object.\n    \"\"\"", "\n", "raw2alpha", "=", "lambda", "raw", ",", "dists", ",", "act_fn", "=", "F", ".", "relu", ":", "1.", "-", "torch", ".", "exp", "(", "-", "act_fn", "(", "raw", ")", "*", "dists", ")", "\n", "\n", "dists", "=", "z_vals", "[", "...", ",", "1", ":", "]", "-", "z_vals", "[", "...", ",", ":", "-", "1", "]", "\n", "dists", "=", "torch", ".", "cat", "(", "[", "dists", ",", "torch", ".", "Tensor", "(", "[", "1e10", "]", ")", ".", "expand", "(", "dists", "[", "...", ",", ":", "1", "]", ".", "shape", ")", "]", ",", "-", "1", ")", "# [N_rays, N_samples]", "\n", "\n", "dists", "=", "dists", "*", "torch", ".", "norm", "(", "rays_d", "[", "...", ",", "None", ",", ":", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "rgb", "=", "torch", ".", "sigmoid", "(", "raw", "[", "...", ",", ":", "3", "]", ")", "# [N_rays, N_samples, 3]", "\n", "noise", "=", "0.", "\n", "if", "raw_noise_std", ">", "0.", ":", "\n", "        ", "noise", "=", "torch", ".", "randn", "(", "raw", "[", "...", ",", "3", "]", ".", "shape", ")", "*", "raw_noise_std", "\n", "\n", "# Overwrite randomly sampled data if pytest", "\n", "if", "pytest", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "noise", "=", "np", ".", "random", ".", "rand", "(", "*", "list", "(", "raw", "[", "...", ",", "3", "]", ".", "shape", ")", ")", "*", "raw_noise_std", "\n", "noise", "=", "torch", ".", "Tensor", "(", "noise", ")", "\n", "\n", "", "", "alpha", "=", "raw2alpha", "(", "raw", "[", "...", ",", "3", "]", "+", "noise", ",", "dists", ")", "# [N_rays, N_samples]", "\n", "weights", "=", "alpha", "*", "torch", ".", "cumprod", "(", "torch", ".", "cat", "(", "[", "torch", ".", "ones", "(", "(", "alpha", ".", "shape", "[", "0", "]", ",", "1", ")", ")", ",", "1.", "-", "alpha", "+", "1e-10", "]", ",", "-", "1", ")", ",", "-", "1", ")", "[", ":", ",", ":", "-", "1", "]", "\n", "rgb_map", "=", "torch", ".", "sum", "(", "weights", "[", "...", ",", "None", "]", "*", "rgb", ",", "-", "2", ")", "# [N_rays, 3]", "\n", "\n", "depth_map", "=", "torch", ".", "sum", "(", "weights", "*", "z_vals", ",", "-", "1", ")", "\n", "disp_map", "=", "1.", "/", "torch", ".", "max", "(", "1e-10", "*", "torch", ".", "ones_like", "(", "depth_map", ")", ",", "depth_map", "/", "torch", ".", "sum", "(", "weights", ",", "-", "1", ")", ")", "\n", "acc_map", "=", "torch", ".", "sum", "(", "weights", ",", "-", "1", ")", "\n", "if", "white_bkgd", ":", "\n", "        ", "rgb_map", "=", "rgb_map", "+", "(", "1.", "-", "acc_map", "[", "...", ",", "None", "]", ")", "\n", "\n", "", "return", "rgb_map", ",", "disp_map", ",", "acc_map", ",", "weights", ",", "depth_map", ",", "rgb", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.run_nerf.render_rays": [[327, 416], ["torch.reshape", "torch.reshape", "torch.reshape", "torch.linspace", "torch.linspace", "torch.linspace", "z_vals.expand.expand", "network_query_fn", "run_nerf.raw2outputs", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.rand", "torch.rand", "torch.rand", "numpy.random.seed", "numpy.random.rand", "torch.Tensor", "torch.Tensor", "torch.Tensor", "print", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "list", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isinf", "torch.isinf", "torch.isinf"], "function", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.run_nerf.raw2outputs"], ["", "def", "render_rays", "(", "ray_batch", ",", "\n", "network_fn", ",", "\n", "network_query_fn", ",", "\n", "N_samples", ",", "\n", "depth_priors", ",", "\n", "depth_confidences", ",", "\n", "retraw", "=", "False", ",", "\n", "lindisp", "=", "False", ",", "\n", "perturb", "=", "0.", ",", "\n", "white_bkgd", "=", "False", ",", "\n", "raw_noise_std", "=", "0.", ",", "\n", "pytest", "=", "False", ",", "\n", "near_bound", "=", "None", ",", "\n", "far_bound", "=", "None", ")", ":", "\n", "    ", "\"\"\"Volumetric rendering.\n    Args:\n      ray_batch: array of shape [batch_size, ...]. All information necessary\n        for sampling along a ray, including: ray origin, ray direction, min\n        dist, max dist, and unit-magnitude viewing direction.\n      network_fn: function. Model for predicting RGB and density at each point\n        in space.\n      network_query_fn: function used for passing queries to network_fn.\n      N_samples: int. Number of different times to sample along each ray.\n      retraw: bool. If True, include model's raw, unprocessed predictions.\n      lindisp: bool. If True, sample linearly in inverse depth rather than in depth.\n      perturb: float, 0 or 1. If non-zero, each ray is sampled at stratified\n        random points in time.\n      white_bkgd: bool. If True, assume a white background.\n      raw_noise_std: ...\n    Returns:\n      rgb_map: [num_rays, 3]. Estimated RGB color of a ray. Comes from fine model.\n      disp_map: [num_rays]. Disparity map. 1 / depth.\n      acc_map: [num_rays]. Accumulated opacity along each ray. Comes from fine model.\n      raw: [num_rays, num_samples, 4]. Raw predictions from model.\n      rgb0: See rgb_map. Output for coarse model.\n      disp0: See disp_map. Output for coarse model.\n      acc0: See acc_map. Output for coarse model.\n      z_std: [num_rays]. Standard deviation of distances along ray for each\n        sample.\n    \"\"\"", "\n", "N_rays", "=", "ray_batch", ".", "shape", "[", "0", "]", "\n", "rays_o", ",", "rays_d", "=", "ray_batch", "[", ":", ",", "0", ":", "3", "]", ",", "ray_batch", "[", ":", ",", "3", ":", "6", "]", "# [N_rays, 3] each", "\n", "viewdirs", "=", "ray_batch", "[", ":", ",", "-", "3", ":", "]", "if", "ray_batch", ".", "shape", "[", "-", "1", "]", ">", "8", "else", "None", "\n", "bounds", "=", "torch", ".", "reshape", "(", "ray_batch", "[", "...", ",", "6", ":", "8", "]", ",", "[", "-", "1", ",", "1", ",", "2", "]", ")", "\n", "\n", "\n", "near", "=", "(", "depth_priors", "*", "(", "1", "-", "torch", ".", "clamp", "(", "depth_confidences", ",", "min", "=", "near_bound", ",", "max", "=", "far_bound", ")", ")", ")", ".", "unsqueeze", "(", "1", ")", "\n", "far", "=", "(", "depth_priors", "*", "(", "1", "+", "torch", ".", "clamp", "(", "depth_confidences", ",", "min", "=", "near_bound", ",", "max", "=", "far_bound", ")", ")", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "t_vals", "=", "torch", ".", "linspace", "(", "0.", ",", "1.", ",", "steps", "=", "N_samples", ")", "\n", "if", "not", "lindisp", ":", "\n", "        ", "z_vals", "=", "near", "*", "(", "1.", "-", "t_vals", ")", "+", "far", "*", "(", "t_vals", ")", "\n", "", "else", ":", "\n", "        ", "z_vals", "=", "1.", "/", "(", "1.", "/", "near", "*", "(", "1.", "-", "t_vals", ")", "+", "1.", "/", "far", "*", "(", "t_vals", ")", ")", "\n", "\n", "", "z_vals", "=", "z_vals", ".", "expand", "(", "[", "N_rays", ",", "N_samples", "]", ")", "\n", "\n", "if", "perturb", ">", "0.", ":", "\n", "# get intervals between samples", "\n", "        ", "mids", "=", ".5", "*", "(", "z_vals", "[", "...", ",", "1", ":", "]", "+", "z_vals", "[", "...", ",", ":", "-", "1", "]", ")", "\n", "upper", "=", "torch", ".", "cat", "(", "[", "mids", ",", "z_vals", "[", "...", ",", "-", "1", ":", "]", "]", ",", "-", "1", ")", "\n", "lower", "=", "torch", ".", "cat", "(", "[", "z_vals", "[", "...", ",", ":", "1", "]", ",", "mids", "]", ",", "-", "1", ")", "\n", "# stratified samples in those intervals", "\n", "t_rand", "=", "torch", ".", "rand", "(", "z_vals", ".", "shape", ")", "\n", "\n", "# Pytest, overwrite u with numpy's fixed random numbers", "\n", "if", "pytest", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "t_rand", "=", "np", ".", "random", ".", "rand", "(", "*", "list", "(", "z_vals", ".", "shape", ")", ")", "\n", "t_rand", "=", "torch", ".", "Tensor", "(", "t_rand", ")", "\n", "\n", "", "z_vals", "=", "lower", "+", "(", "upper", "-", "lower", ")", "*", "t_rand", "\n", "\n", "", "pts", "=", "rays_o", "[", "...", ",", "None", ",", ":", "]", "+", "rays_d", "[", "...", ",", "None", ",", ":", "]", "*", "z_vals", "[", "...", ",", ":", ",", "None", "]", "# [N_rays, N_samples, 3]", "\n", "\n", "\n", "#     raw = run_network(pts)", "\n", "raw", "=", "network_query_fn", "(", "pts", ",", "viewdirs", ",", "network_fn", ")", "\n", "rgb_map", ",", "disp_map", ",", "acc_map", ",", "weights", ",", "depth_map", ",", "rgb", "=", "raw2outputs", "(", "raw", ",", "z_vals", ",", "rays_d", ",", "raw_noise_std", ",", "white_bkgd", ",", "pytest", "=", "pytest", ")", "\n", "\n", "ret", "=", "{", "'rgb_map'", ":", "rgb_map", ",", "'disp_map'", ":", "disp_map", ",", "'acc_map'", ":", "acc_map", ",", "'depth_map'", ":", "depth_map", ",", "\"weights\"", ":", "weights", "}", "\n", "if", "retraw", ":", "\n", "        ", "ret", "[", "'raw'", "]", "=", "raw", "\n", "\n", "", "for", "k", "in", "ret", ":", "\n", "        ", "if", "(", "torch", ".", "isnan", "(", "ret", "[", "k", "]", ")", ".", "any", "(", ")", "or", "torch", ".", "isinf", "(", "ret", "[", "k", "]", ")", ".", "any", "(", ")", ")", "and", "DEBUG", ":", "\n", "            ", "print", "(", "f\"! [Numerical Error] {k} contains nan or inf.\"", ")", "\n", "\n", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.run_nerf.train": [[421, 625], ["print", "load_llff.load_llff_data", "print", "load_img_list", "load_colmap", "load_img_list", "load_depths", "align_scales", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "cal_depth_confidences", "print", "print", "run_nerf.create_nerf", "render_kwargs_train.update", "render_kwargs_test.update", "os.path.join", "print", "numpy.stack", "print", "numpy.concatenate", "numpy.stack", "numpy.concatenate", "numpy.transpose", "numpy.stack", "numpy.reshape", "torch.Tensor().to.astype", "print", "numpy.random.shuffle", "print", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "print", "print", "print", "torch.utils.tensorboard.SummaryWriter", "tqdm.trange", "len", "int", "int", "os.path.join", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "bottom.repeat().to.repeat().to", "torch.cat", "torch.cat", "torch.cat", "torch.from_numpy().to.clone", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "print", "os.path.join", "time.time", "torch.transpose", "torch.transpose", "torch.transpose", "run_nerf.render", "optimizer.zero_grad", "img2mse", "mse2psnr", "loss.backward", "optimizer.step", "torch.no_grad", "torch.no_grad", "torch.no_grad", "os.path.join", "os.makedirs", "run_nerf.render_path", "print", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "numpy.ndarray.min", "numpy.ndarray.max", "torch.no_grad", "torch.no_grad", "torch.no_grad", "os.makedirs", "run_nerf.render_path", "print", "get_rays_np", "cal_depth_confidences.astype", "numpy.ones().astype", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "print", "torch.randperm", "torch.randperm", "torch.randperm", "time.time", "os.path.join", "torch.save", "torch.save", "torch.save", "print", "tqdm.tqdm.write", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "bottom.repeat().to.repeat", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "os.path.join", "os.path.join", "loss.item", "mse2psnr.item", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "numpy.ones", "render_kwargs_train[].state_dict", "optimizer.state_dict", "loss.item", "mse2psnr.item", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.load_llff.load_llff_data", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.io_utils.load_img_list", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.io_utils.load_colmap", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.io_utils.load_img_list", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.io_utils.load_depths", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.nerf_utils.align_scales", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.nerf_utils.cal_depth_confidences", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.run_nerf.create_nerf", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.run_nerf.render", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.run_nerf.render_path", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.run_nerf.render_path", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.nerf.run_nerf_helpers.get_rays_np", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.pix2pix_model.Pix2PixModel.save", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.pix2pix_model.Pix2PixModel.save", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.pix2pix_model.Pix2PixModel.save"], ["", "def", "train", "(", "args", ")", ":", "\n", "    ", "print", "(", "'Nerf begins !'", ")", "\n", "# Load data  ", "\n", "images", ",", "poses", ",", "bds", ",", "render_poses", ",", "i_train", ",", "i_test", ",", "sc", "=", "load_llff_data", "(", "args", ".", "datadir", ",", "args", ".", "factor", ",", "\n", "recenter", "=", "True", ",", "bd_factor", "=", ".75", ",", "\n", "spherify", "=", "args", ".", "spherify", ",", "N_views", "=", "args", ".", "N_views", ")", "\n", "if", "len", "(", "i_test", ")", ">", "0", ":", "\n", "        ", "load_test", "=", "True", "\n", "", "else", ":", "\n", "        ", "load_test", "=", "False", "\n", "\n", "", "hwf", "=", "poses", "[", "0", ",", ":", "3", ",", "-", "1", "]", "\n", "poses", "=", "poses", "[", ":", ",", ":", "3", ",", ":", "4", "]", "\n", "print", "(", "'Loaded llff'", ",", "images", ".", "shape", ",", "render_poses", ".", "shape", ",", "hwf", ",", "args", ".", "datadir", ")", "\n", "\n", "H", ",", "W", ",", "focal", "=", "hwf", "\n", "H", ",", "W", "=", "int", "(", "H", ")", ",", "int", "(", "W", ")", "\n", "hwf", "=", "[", "H", ",", "W", ",", "focal", "]", "\n", "\n", "image_list", "=", "load_img_list", "(", "args", ".", "datadir", ",", "load_test", "=", "load_test", ")", "\n", "colmap_depths", ",", "colmap_masks", "=", "load_colmap", "(", "image_list", ",", "args", ".", "datadir", ",", "H", ",", "W", ")", "\n", "\n", "image_list_train", "=", "load_img_list", "(", "args", ".", "datadir", ",", "load_test", "=", "False", ")", "\n", "depth_priors", "=", "load_depths", "(", "image_list_train", ",", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "basedir", ",", "args", ".", "expname", ",", "'depth_priors'", ",", "'results'", ")", ",", "\n", "H", ",", "W", ")", "\n", "\n", "depth_priors", "=", "align_scales", "(", "depth_priors", ",", "colmap_depths", ",", "colmap_masks", ",", "\n", "poses", ",", "sc", ",", "i_train", ",", "i_test", ")", "\n", "\n", "poses_tensor", "=", "torch", ".", "from_numpy", "(", "poses", ")", ".", "to", "(", "device", ")", "\n", "K", "=", "torch", ".", "FloatTensor", "(", "[", "[", "focal", ",", "0", ",", "-", "W", "/", "2.0", ",", "0", "]", ",", "\n", "[", "0", ",", "-", "focal", ",", "-", "H", "/", "2.0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "-", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", "]", ")", ".", "to", "(", "device", ")", "\n", "if", "poses_tensor", ".", "shape", "[", "1", "]", "==", "3", ":", "\n", "        ", "bottom", "=", "torch", ".", "FloatTensor", "(", "[", "0", ",", "0", ",", "0", ",", "1", "]", ")", ".", "unsqueeze", "(", "0", ")", "\n", "bottom", "=", "bottom", ".", "repeat", "(", "poses_tensor", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ")", ".", "to", "(", "poses_tensor", ".", "device", ")", "\n", "T", "=", "torch", ".", "cat", "(", "[", "poses_tensor", ",", "bottom", "]", ",", "1", ")", "\n", "", "else", ":", "\n", "        ", "T", "=", "poses_tensor", ".", "clone", "(", ")", "\n", "\n", "", "depth_confidences", "=", "cal_depth_confidences", "(", "torch", ".", "from_numpy", "(", "depth_priors", ")", ".", "to", "(", "device", ")", ",", "\n", "T", ",", "K", ",", "i_train", ",", "args", ".", "topk", ")", "\n", "\n", "print", "(", "'DEFINING BOUNDS'", ")", "\n", "if", "args", ".", "no_ndc", ":", "\n", "        ", "near", "=", "np", ".", "ndarray", ".", "min", "(", "bds", ")", "*", ".9", "\n", "far", "=", "np", ".", "ndarray", ".", "max", "(", "bds", ")", "*", "1.", "\n", "", "else", ":", "\n", "        ", "near", "=", "0.", "\n", "far", "=", "1.", "\n", "", "print", "(", "'NEAR FAR'", ",", "near", ",", "far", ")", "\n", "\n", "\n", "# Create nerf model", "\n", "render_kwargs_train", ",", "render_kwargs_test", ",", "start", ",", "grad_vars", ",", "optimizer", "=", "create_nerf", "(", "args", ")", "\n", "global_step", "=", "start", "\n", "\n", "bds_dict", "=", "{", "\n", "'near'", ":", "near", ",", "\n", "'far'", ":", "far", ",", "\n", "}", "\n", "render_kwargs_train", ".", "update", "(", "bds_dict", ")", "\n", "render_kwargs_test", ".", "update", "(", "bds_dict", ")", "\n", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "basedir", ",", "args", ".", "expname", ",", "'nerf'", ")", "\n", "\n", "# Short circuit if only rendering out from trained model", "\n", "if", "args", ".", "render_only", ":", "\n", "        ", "print", "(", "'RENDER ONLY'", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "args", ".", "render_test", ":", "\n", "                ", "testsavedir", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "'results'", ",", "\n", "'renderonly_{}_{:06d}'", ".", "format", "(", "'test'", ",", "start", ")", ")", "\n", "render_poses", "=", "poses_tensor", "[", "i_test", "]", "\n", "depth_priors", "=", "depth_priors", "[", "i_test", "]", "\n", "depth_confidences", "=", "depth_confidences", "[", "i_test", "]", "\n", "image_list", "=", "image_list", "[", "i_test", "]", "\n", "", "else", ":", "\n", "                ", "testsavedir", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "'results'", ",", "\n", "'renderonly_{}_{:06d}'", ".", "format", "(", "'train'", ",", "start", ")", ")", "\n", "render_poses", "=", "poses_tensor", "[", "i_train", "]", "\n", "depth_priors", "=", "depth_priors", "[", "i_train", "]", "\n", "depth_confidences", "=", "depth_confidences", "[", "i_train", "]", "\n", "image_list", "=", "image_list", "[", "i_train", "]", "\n", "\n", "", "os", ".", "makedirs", "(", "testsavedir", ",", "exist_ok", "=", "True", ")", "\n", "rgbs", ",", "disps", ",", "depths", "=", "render_path", "(", "render_poses", ",", "hwf", ",", "args", ".", "chunk", ",", "render_kwargs_test", ",", "sc", "=", "sc", ",", "\n", "depth_priors", "=", "torch", ".", "from_numpy", "(", "depth_priors", ")", ".", "to", "(", "device", ")", ",", "\n", "depth_confidences", "=", "torch", ".", "from_numpy", "(", "depth_confidences", ")", ".", "to", "(", "device", ")", ",", "\n", "savedir", "=", "testsavedir", ",", "render_factor", "=", "args", ".", "render_factor", ",", "\n", "image_list", "=", "image_list", ")", "\n", "print", "(", "'Done rendering'", ",", "testsavedir", ")", "\n", "\n", "return", "\n", "\n", "# Prepare raybatch tensor if batching random rays", "\n", "", "", "N_rand", "=", "args", ".", "N_rand", "\n", "\n", "# For random ray batching", "\n", "print", "(", "'get rays'", ")", "\n", "rays", "=", "np", ".", "stack", "(", "[", "get_rays_np", "(", "H", ",", "W", ",", "focal", ",", "p", ")", "for", "p", "in", "poses", "[", ":", ",", ":", "3", ",", ":", "4", "]", "]", ",", "0", ")", "# [N, ro+rd, H, W, 3]", "\n", "print", "(", "'done, concats'", ")", "\n", "rays_rgb", "=", "np", ".", "concatenate", "(", "[", "rays", ",", "images", "[", ":", ",", "None", "]", "]", ",", "1", ")", "# [N, ro+rd+rgb, H, W, 3]", "\n", "depths_pri", "=", "np", ".", "stack", "(", "[", "depth_priors", ",", "depth_confidences", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "np", ".", "ones", "(", "colmap_depths", ".", "shape", ")", ".", "astype", "(", "np", ".", "float32", ")", "]", ",", "-", "1", ")", "#[N, H, W, 3]", "\n", "rays_rgb", "=", "np", ".", "concatenate", "(", "[", "rays_rgb", ",", "depths_pri", "[", ":", ",", "None", "]", "]", ",", "1", ")", "\n", "rays_rgb", "=", "np", ".", "transpose", "(", "rays_rgb", ",", "[", "0", ",", "2", ",", "3", ",", "1", ",", "4", "]", ")", "# [N, H, W, ro+rd+rgb(d)+prior, 3]", "\n", "rays_rgb", "=", "np", ".", "stack", "(", "[", "rays_rgb", "[", "i", "]", "for", "i", "in", "i_train", "]", ",", "0", ")", "# train images only", "\n", "rays_rgb", "=", "np", ".", "reshape", "(", "rays_rgb", ",", "[", "-", "1", ",", "4", ",", "3", "]", ")", "\n", "\n", "rays_rgb", "=", "rays_rgb", ".", "astype", "(", "np", ".", "float32", ")", "\n", "print", "(", "'shuffle rays'", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "rays_rgb", ")", "\n", "print", "(", "'done'", ")", "\n", "i_batch", "=", "0", "\n", "\n", "# Move training data to GPU", "\n", "images", "=", "torch", ".", "Tensor", "(", "images", ")", ".", "to", "(", "device", ")", "\n", "poses", "=", "torch", ".", "Tensor", "(", "poses", ")", ".", "to", "(", "device", ")", "\n", "rays_rgb", "=", "torch", ".", "Tensor", "(", "rays_rgb", ")", ".", "to", "(", "device", ")", "\n", "\n", "\n", "N_iters", "=", "args", ".", "N_iters", "\n", "\n", "print", "(", "args", ".", "chunk", ")", "\n", "print", "(", "'TRAIN views are'", ",", "i_train", ")", "\n", "print", "(", "'TEST views are'", ",", "i_test", ")", "\n", "\n", "# Summary writers", "\n", "writer", "=", "SummaryWriter", "(", "os", ".", "path", ".", "join", "(", "args", ".", "basedir", ",", "args", ".", "expname", ",", "'nerf'", ",", "'summary'", ")", ")", "\n", "\n", "start", "=", "start", "+", "1", "\n", "for", "i", "in", "trange", "(", "start", ",", "N_iters", ")", ":", "\n", "        ", "time0", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Random over all images", "\n", "batch", "=", "rays_rgb", "[", "i_batch", ":", "i_batch", "+", "N_rand", "]", "# [B, 2+1, 3*?]", "\n", "batch", "=", "torch", ".", "transpose", "(", "batch", ",", "0", ",", "1", ")", "\n", "batch_rays", ",", "target_s", "=", "batch", "[", ":", "2", "]", ",", "batch", "[", "2", "]", "\n", "target_prior", "=", "batch", "[", "3", "]", "\n", "i_batch", "+=", "N_rand", "\n", "if", "i_batch", ">=", "rays_rgb", ".", "shape", "[", "0", "]", ":", "\n", "            ", "print", "(", "\"Shuffle data after an epoch!\"", ")", "\n", "rand_idx", "=", "torch", ".", "randperm", "(", "rays_rgb", ".", "shape", "[", "0", "]", ")", "\n", "rays_rgb", "=", "rays_rgb", "[", "rand_idx", "]", "\n", "i_batch", "=", "0", "\n", "\n", "#####  Core optimization loop  #####", "\n", "", "rgb", ",", "disp", ",", "acc", ",", "depth", ",", "extras", "=", "render", "(", "H", ",", "W", ",", "focal", ",", "chunk", "=", "args", ".", "chunk", ",", "rays", "=", "batch_rays", ",", "\n", "depth_priors", "=", "target_prior", "[", ":", ",", "0", "]", ",", "\n", "depth_confidences", "=", "target_prior", "[", ":", ",", "1", "]", ",", "\n", "retraw", "=", "True", ",", "**", "render_kwargs_train", ")", "\n", "#pdb.set_trace()", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "img_loss", "=", "img2mse", "(", "rgb", ",", "target_s", ")", "\n", "trans", "=", "extras", "[", "'raw'", "]", "[", "...", ",", "-", "1", "]", "\n", "loss", "=", "img_loss", "\n", "psnr", "=", "mse2psnr", "(", "img_loss", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# NOTE: IMPORTANT!", "\n", "###   update learning rate   ###", "\n", "decay_rate", "=", "0.1", "\n", "decay_steps", "=", "args", ".", "lrate_decay", "*", "1000", "\n", "new_lrate", "=", "args", ".", "lrate", "*", "(", "decay_rate", "**", "(", "global_step", "/", "decay_steps", ")", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "new_lrate", "\n", "################################", "\n", "\n", "", "dt", "=", "time", ".", "time", "(", ")", "-", "time0", "\n", "\n", "# Rest is logging", "\n", "if", "i", "%", "args", ".", "i_weights", "==", "0", ":", "\n", "            ", "path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "'checkpoints'", ",", "'{:06d}.tar'", ".", "format", "(", "i", ")", ")", "\n", "torch", ".", "save", "(", "{", "\n", "'global_step'", ":", "global_step", ",", "\n", "'network_fn_state_dict'", ":", "render_kwargs_train", "[", "'network_fn'", "]", ".", "state_dict", "(", ")", ",", "\n", "'optimizer_state_dict'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "path", ")", "\n", "print", "(", "'Saved checkpoints at'", ",", "path", ")", "\n", "\n", "\n", "", "if", "i", "%", "args", ".", "i_print", "==", "0", ":", "\n", "            ", "tqdm", ".", "write", "(", "f\"[TRAIN] Iter: {i} Loss: {loss.item()}  PSNR: {psnr.item()}\"", ")", "\n", "writer", ".", "add_scalar", "(", "\"Loss\"", ",", "loss", ".", "item", "(", ")", ",", "i", ")", "\n", "writer", ".", "add_scalar", "(", "\"PSNR\"", ",", "psnr", ".", "item", "(", ")", ",", "i", ")", "\n", "\n", "", "global_step", "+=", "1", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "testsavedir", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "'results'", ")", "\n", "render_poses", "=", "poses_tensor", "\n", "\n", "os", ".", "makedirs", "(", "testsavedir", ",", "exist_ok", "=", "True", ")", "\n", "rgbs", ",", "disps", ",", "depths", "=", "render_path", "(", "render_poses", ",", "hwf", ",", "args", ".", "chunk", ",", "render_kwargs_test", ",", "sc", "=", "sc", ",", "\n", "depth_priors", "=", "torch", ".", "from_numpy", "(", "depth_priors", ")", ".", "to", "(", "device", ")", ",", "\n", "depth_confidences", "=", "torch", ".", "from_numpy", "(", "depth_confidences", ")", ".", "to", "(", "device", ")", ",", "\n", "savedir", "=", "testsavedir", ",", "render_factor", "=", "args", ".", "render_factor", ",", "\n", "image_list", "=", "image_list", ")", "\n", "print", "(", "'Done rendering'", ",", "testsavedir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.evaluation.main": [[9, 37], ["load_img_list", "os.path.join", "os.path.join", "os.path.join", "load_depths", "load_depths", "load_depths", "load_gt_depths", "print", "depth_evaluation", "print", "depth_evaluation", "print", "depth_evaluation", "load_img_list", "list", "load_rgbs_np", "load_rgbs_np", "print", "os.path.join", "torch.no_grad", "rgb_evaluation", "set", "set"], "function", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.io_utils.load_img_list", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.io_utils.load_depths", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.io_utils.load_depths", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.io_utils.load_depths", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.io_utils.load_gt_depths", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.evaluation_utils.depth_evaluation", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.evaluation_utils.depth_evaluation", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.evaluation_utils.depth_evaluation", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.io_utils.load_img_list", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.io_utils.load_rgbs_np", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.io_utils.load_rgbs_np", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.evaluation_utils.rgb_evaluation"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "image_list", "=", "load_img_list", "(", "args", ".", "datadir", ",", "load_test", "=", "False", ")", "\n", "prior_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "basedir", ",", "args", ".", "expname", ",", "'depth_priors'", ",", "'results'", ")", "\n", "nerf_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "basedir", ",", "args", ".", "expname", ",", "'nerf'", ",", "'results'", ")", "\n", "filter_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "basedir", ",", "args", ".", "expname", ",", "'filter'", ")", "\n", "\n", "prior_depths", "=", "load_depths", "(", "image_list", ",", "prior_path", ")", "\n", "nerf_depths", "=", "load_depths", "(", "image_list", ",", "nerf_path", ")", "\n", "filter_depths", "=", "load_depths", "(", "image_list", ",", "filter_path", ")", "\n", "gt_depths", ",", "_", "=", "load_gt_depths", "(", "image_list", ",", "args", ".", "datadir", ")", "\n", "\n", "print", "(", "\"prior depth evaluation:\"", ")", "\n", "depth_evaluation", "(", "gt_depths", ",", "prior_depths", ",", "savedir", "=", "prior_path", ")", "\n", "print", "(", "\"nerf depth evaluation:\"", ")", "\n", "depth_evaluation", "(", "gt_depths", ",", "nerf_depths", ",", "savedir", "=", "nerf_path", ")", "\n", "print", "(", "\"filter depth evaluation:\"", ")", "\n", "depth_evaluation", "(", "gt_depths", ",", "filter_depths", ",", "savedir", "=", "filter_path", ")", "\n", "\n", "image_list_all", "=", "load_img_list", "(", "args", ".", "datadir", ",", "load_test", "=", "True", ")", "\n", "image_list_test", "=", "list", "(", "set", "(", "image_list_all", ")", "-", "set", "(", "image_list", ")", ")", "\n", "nerf_rgbs", "=", "load_rgbs_np", "(", "image_list_test", ",", "nerf_path", ",", "\n", "use_cv2", "=", "False", ",", "is_png", "=", "True", ")", "\n", "gt_rgbs", "=", "load_rgbs_np", "(", "image_list_test", ",", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "datadir", ",", "'images_{}'", ".", "format", "(", "args", ".", "factor", ")", ")", ",", "\n", "use_cv2", "=", "False", ",", "is_png", "=", "True", ")", "\n", "print", "(", "\"nerf novel view synthesis evaluation:\"", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "rgb_evaluation", "(", "gt_rgbs", ",", "nerf_rgbs", ",", "savedir", "=", "nerf_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.filter.BilateralGrid.__init__": [[59, 75], ["rgb2yuv", "numpy.dstack", "numpy.dstack.reshape", "filter.BilateralGrid._compute_factorization", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.filter_utils.rgb2yuv", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.filter.BilateralGrid._compute_factorization"], ["    ", "def", "__init__", "(", "self", ",", "im", ",", "sigma_spatial", "=", "32", ",", "sigma_luma", "=", "8", ",", "sigma_chroma", "=", "8", ")", ":", "\n", "        ", "im_yuv", "=", "rgb2yuv", "(", "im", ")", "\n", "# Compute 5-dimensional XYLUV bilateral-space coordinates", "\n", "Iy", ",", "Ix", "=", "np", ".", "mgrid", "[", ":", "im", ".", "shape", "[", "0", "]", ",", ":", "im", ".", "shape", "[", "1", "]", "]", "\n", "x_coords", "=", "(", "Ix", "/", "sigma_spatial", ")", ".", "astype", "(", "int", ")", "\n", "y_coords", "=", "(", "Iy", "/", "sigma_spatial", ")", ".", "astype", "(", "int", ")", "\n", "luma_coords", "=", "(", "im_yuv", "[", "...", ",", "0", "]", "/", "sigma_luma", ")", ".", "astype", "(", "int", ")", "\n", "chroma_coords", "=", "(", "im_yuv", "[", "...", ",", "1", ":", "]", "/", "sigma_chroma", ")", ".", "astype", "(", "int", ")", "\n", "coords", "=", "np", ".", "dstack", "(", "(", "x_coords", ",", "y_coords", ",", "luma_coords", ",", "chroma_coords", ")", ")", "\n", "coords_flat", "=", "coords", ".", "reshape", "(", "-", "1", ",", "coords", ".", "shape", "[", "-", "1", "]", ")", "\n", "self", ".", "npixels", ",", "self", ".", "dim", "=", "coords_flat", ".", "shape", "\n", "# Hacky \"hash vector\" for coordinates,", "\n", "# Requires all scaled coordinates be < MAX_VAL", "\n", "self", ".", "hash_vec", "=", "(", "MAX_VAL", "**", "np", ".", "arange", "(", "self", ".", "dim", ")", ")", "\n", "# Construct S and B matrix", "\n", "self", ".", "_compute_factorization", "(", "coords_flat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.filter.BilateralGrid._compute_factorization": [[76, 100], ["filter.BilateralGrid._hash_coords", "numpy.unique", "len", "scipy.sparse.csr_matrix", "range", "filter.BilateralGrid.blurs.append", "numpy.ones", "numpy.zeros", "filter.BilateralGrid._hash_coords", "filter.get_valid_idx", "numpy.arange", "scipy.sparse.csr_matrix", "numpy.ones", "len"], "methods", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.filter.BilateralGrid._hash_coords", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.filter.BilateralGrid._hash_coords", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.filter.get_valid_idx"], ["", "def", "_compute_factorization", "(", "self", ",", "coords_flat", ")", ":", "\n", "# Hash each coordinate in grid to a unique value", "\n", "        ", "hashed_coords", "=", "self", ".", "_hash_coords", "(", "coords_flat", ")", "\n", "unique_hashes", ",", "unique_idx", ",", "idx", "=", "np", ".", "unique", "(", "hashed_coords", ",", "return_index", "=", "True", ",", "return_inverse", "=", "True", ")", "\n", "# Identify unique set of vertices", "\n", "unique_coords", "=", "coords_flat", "[", "unique_idx", "]", "\n", "self", ".", "nvertices", "=", "len", "(", "unique_coords", ")", "\n", "# Construct sparse splat matrix that maps from pixels to vertices", "\n", "self", ".", "S", "=", "csr_matrix", "(", "(", "np", ".", "ones", "(", "self", ".", "npixels", ")", ",", "(", "idx", ",", "np", ".", "arange", "(", "self", ".", "npixels", ")", ")", ")", ")", "\n", "# Construct sparse blur matrices.", "\n", "# Note that these represent [1 0 1] blurs, excluding the central element", "\n", "self", ".", "blurs", "=", "[", "]", "\n", "for", "d", "in", "range", "(", "self", ".", "dim", ")", ":", "\n", "            ", "blur", "=", "0.0", "\n", "for", "offset", "in", "(", "-", "1", ",", "1", ")", ":", "\n", "                ", "offset_vec", "=", "np", ".", "zeros", "(", "(", "1", ",", "self", ".", "dim", ")", ")", "\n", "offset_vec", "[", ":", ",", "d", "]", "=", "offset", "\n", "neighbor_hash", "=", "self", ".", "_hash_coords", "(", "unique_coords", "+", "offset_vec", ")", "\n", "valid_coord", ",", "idx", "=", "get_valid_idx", "(", "unique_hashes", ",", "neighbor_hash", ")", "\n", "blur", "=", "blur", "+", "csr_matrix", "(", "(", "np", ".", "ones", "(", "(", "len", "(", "valid_coord", ")", ",", ")", ")", ",", "\n", "(", "valid_coord", ",", "idx", ")", ")", ",", "\n", "shape", "=", "(", "self", ".", "nvertices", ",", "self", ".", "nvertices", ")", ")", "\n", "", "self", ".", "blurs", ".", "append", "(", "blur", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.filter.BilateralGrid._hash_coords": [[101, 104], ["numpy.dot", "coord.reshape"], "methods", ["None"], ["", "", "def", "_hash_coords", "(", "self", ",", "coord", ")", ":", "\n", "        ", "\"\"\"Hacky function to turn a coordinate into a unique value\"\"\"", "\n", "return", "np", ".", "dot", "(", "coord", ".", "reshape", "(", "-", "1", ",", "self", ".", "dim", ")", ",", "self", ".", "hash_vec", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.filter.BilateralGrid.splat": [[105, 107], ["filter.BilateralGrid.S.dot"], "methods", ["None"], ["", "def", "splat", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "S", ".", "dot", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.filter.BilateralGrid.slice": [[108, 110], ["filter.BilateralGrid.S.T.dot"], "methods", ["None"], ["", "def", "slice", "(", "self", ",", "y", ")", ":", "\n", "        ", "return", "self", ".", "S", ".", "T", ".", "dot", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.filter.BilateralGrid.blur": [[111, 118], ["blur.dot"], "methods", ["None"], ["", "def", "blur", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Blur a bilateral-space vector with a 1 2 1 kernel in each dimension\"\"\"", "\n", "assert", "x", ".", "shape", "[", "0", "]", "==", "self", ".", "nvertices", "\n", "out", "=", "2", "*", "self", ".", "dim", "*", "x", "\n", "for", "blur", "in", "self", ".", "blurs", ":", "\n", "            ", "out", "+=", "blur", ".", "dot", "(", "x", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.filter.BilateralGrid.filter": [[119, 123], ["filter.BilateralGrid.slice", "filter.BilateralGrid.slice", "filter.BilateralGrid.blur", "filter.BilateralGrid.blur", "filter.BilateralGrid.splat", "filter.BilateralGrid.splat", "numpy.ones_like"], "methods", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.filter.BilateralGrid.slice", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.filter.BilateralGrid.slice", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.filter_utils.blur", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.filter_utils.blur", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.filter.BilateralGrid.splat", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.filter.BilateralGrid.splat"], ["", "def", "filter", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Apply bilateral filter to an input x\"\"\"", "\n", "return", "self", ".", "slice", "(", "self", ".", "blur", "(", "self", ".", "splat", "(", "x", ")", ")", ")", "/", "self", ".", "slice", "(", "self", ".", "blur", "(", "self", ".", "splat", "(", "np", ".", "ones_like", "(", "x", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.filter.BilateralSolver.__init__": [[127, 131], ["bistochastize"], "methods", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.filter_utils.bistochastize"], ["    ", "def", "__init__", "(", "self", ",", "grid", ",", "params", ")", ":", "\n", "        ", "self", ".", "grid", "=", "grid", "\n", "self", ".", "params", "=", "params", "\n", "self", ".", "Dn", ",", "self", ".", "Dm", "=", "bistochastize", "(", "grid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.filter.BilateralSolver.solve": [[132, 154], ["filter.BilateralSolver.grid.splat", "scipy.sparse.diags", "filter.BilateralSolver.grid.splat", "numpy.maximum", "scipy.sparse.diags", "numpy.empty_like", "range", "filter.BilateralSolver.grid.slice", "filter.BilateralSolver.Dn.dot", "A.diagonal", "filter.BilateralSolver.grid.splat", "scipy.sparse.linalg.cg", "w.reshape.reshape.reshape", "filter.BilateralSolver.grid.blur"], "methods", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.filter.BilateralGrid.splat", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.filter.BilateralGrid.splat", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.filter.BilateralGrid.slice", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.filter.BilateralGrid.splat", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.filter_utils.blur"], ["", "def", "solve", "(", "self", ",", "x", ",", "w", ")", ":", "\n", "# Check that w is a vector or a nx1 matrix", "\n", "        ", "if", "w", ".", "ndim", "==", "2", ":", "\n", "            ", "assert", "(", "w", ".", "shape", "[", "1", "]", "==", "1", ")", "\n", "", "elif", "w", ".", "dim", "==", "1", ":", "\n", "            ", "w", "=", "w", ".", "reshape", "(", "w", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "", "A_smooth", "=", "(", "self", ".", "Dm", "-", "self", ".", "Dn", ".", "dot", "(", "self", ".", "grid", ".", "blur", "(", "self", ".", "Dn", ")", ")", ")", "\n", "w_splat", "=", "self", ".", "grid", ".", "splat", "(", "w", ")", "\n", "A_data", "=", "diags", "(", "w_splat", "[", ":", ",", "0", "]", ",", "0", ")", "\n", "A", "=", "self", ".", "params", "[", "\"lam\"", "]", "*", "A_smooth", "+", "A_data", "\n", "xw", "=", "x", "*", "w", "\n", "b", "=", "self", ".", "grid", ".", "splat", "(", "xw", ")", "\n", "# Use simple Jacobi preconditioner", "\n", "A_diag", "=", "np", ".", "maximum", "(", "A", ".", "diagonal", "(", ")", ",", "self", ".", "params", "[", "\"A_diag_min\"", "]", ")", "\n", "M", "=", "diags", "(", "1", "/", "A_diag", ",", "0", ")", "\n", "# Flat initialization", "\n", "y0", "=", "self", ".", "grid", ".", "splat", "(", "xw", ")", "/", "(", "w_splat", "+", "1e-10", ")", "\n", "yhat", "=", "np", ".", "empty_like", "(", "y0", ")", "\n", "for", "d", "in", "range", "(", "x", ".", "shape", "[", "-", "1", "]", ")", ":", "\n", "            ", "yhat", "[", "...", ",", "d", "]", ",", "info", "=", "cg", "(", "A", ",", "b", "[", "...", ",", "d", "]", ",", "x0", "=", "y0", "[", "...", ",", "d", "]", ",", "M", "=", "M", ",", "maxiter", "=", "self", ".", "params", "[", "\"cg_maxiter\"", "]", ",", "tol", "=", "self", ".", "params", "[", "\"cg_tol\"", "]", ")", "\n", "", "xhat", "=", "self", ".", "grid", ".", "slice", "(", "yhat", ")", "\n", "return", "xhat", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.filter.planar_filter": [[15, 46], ["numpy.array", "numpy.meshgrid", "solve_image_ldl3", "numpy.mean", "filt", "numpy.ones_like", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.filter_utils.solve_image_ldl3"], ["def", "planar_filter", "(", "Z", ",", "filt", ",", "eps", ")", ":", "\n", "# Solve for the plane at each pixel in `Z`, where the plane fit is computed", "\n", "# by using `filt` (a function that blurs something of the same size and shape", "\n", "# as `Z` by taking a linear non-negative combination of inputs) to weight", "\n", "# pixels in Z, and `eps` regularizes the output to be fronto-parallel.", "\n", "# Returns (Zx, Zy, Zz), which is a plane parameterization for each pixel:", "\n", "# the derivative wrt x and y, and the offset (which can itself be used as", "\n", "# \"the\" filtered output).", "\n", "\n", "# Note: This isn't the same code as in the paper. I flipped x and y to match", "\n", "# a more pythonic (x, y) convention, and I had to flip a sign on the output", "\n", "# slopes to make the unit tests pass(this may be a bug in the paper's math).", "\n", "# Also, I decided to not regularize the \"offset\" component of the plane fit,", "\n", "# which means that setting eps -> infinity gives the output (0, 0, filt(Z)).", "\n", "  ", "xy_shape", "=", "np", ".", "array", "(", "Z", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "xy_scale", "=", "2", "/", "np", ".", "mean", "(", "xy_shape", "-", "1", ")", "# Scaling the x, y coords to be in ~[0, 1]", "\n", "x", ",", "y", "=", "np", ".", "meshgrid", "(", "*", "[", "(", "np", ".", "arange", "(", "s", ")", "-", "(", "s", "-", "1", ")", "/", "2", ")", "*", "xy_scale", "for", "s", "in", "xy_shape", "]", ",", "indexing", "=", "'ij'", ")", "\n", "[", "F1", ",", "Fx", ",", "Fy", ",", "Fz", ",", "Fxx", ",", "Fxy", ",", "Fxz", ",", "Fyy", ",", "Fyz", "]", "=", "[", "\n", "filt", "(", "t", ")", "for", "t", "in", "[", "\n", "np", ".", "ones_like", "(", "x", ")", ",", "x", ",", "y", ",", "Z", ",", "x", "**", "2", ",", "x", "*", "y", ",", "x", "*", "Z", ",", "y", "**", "2", ",", "y", "*", "Z", "]", "]", "\n", "A11", "=", "F1", "*", "x", "**", "2", "-", "2", "*", "x", "*", "Fx", "+", "Fxx", "+", "eps", "**", "2", "\n", "A22", "=", "F1", "*", "y", "**", "2", "-", "2", "*", "y", "*", "Fy", "+", "Fyy", "+", "eps", "**", "2", "\n", "A12", "=", "F1", "*", "y", "*", "x", "-", "x", "*", "Fy", "-", "y", "*", "Fx", "+", "Fxy", "\n", "A13", "=", "F1", "*", "x", "-", "Fx", "\n", "A23", "=", "F1", "*", "y", "-", "Fy", "\n", "A33", "=", "F1", "# + eps**2", "\n", "b1", "=", "Fz", "*", "x", "-", "Fxz", "\n", "b2", "=", "Fz", "*", "y", "-", "Fyz", "\n", "b3", "=", "Fz", "\n", "Zx", ",", "Zy", ",", "Zz", "=", "solve_image_ldl3", "(", "A11", ",", "A12", ",", "A13", ",", "A22", ",", "A23", ",", "A33", ",", "b1", ",", "b2", ",", "b3", ")", "\n", "return", "-", "Zx", "*", "xy_scale", ",", "-", "Zy", "*", "xy_scale", ",", "Zz", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.filter.get_valid_idx": [[48, 57], ["numpy.searchsorted", "numpy.clip", "numpy.flatnonzero", "len"], "function", ["None"], ["", "def", "get_valid_idx", "(", "valid", ",", "candidates", ")", ":", "\n", "    ", "\"\"\"Find which values are present in a list and where they are located\"\"\"", "\n", "locs", "=", "np", ".", "searchsorted", "(", "valid", ",", "candidates", ")", "\n", "# Handle edge case where the candidate is larger than all valid values", "\n", "locs", "=", "np", ".", "clip", "(", "locs", ",", "0", ",", "len", "(", "valid", ")", "-", "1", ")", "\n", "# Identify which values are actually present", "\n", "valid_idx", "=", "np", ".", "flatnonzero", "(", "valid", "[", "locs", "]", "==", "candidates", ")", "\n", "locs", "=", "locs", "[", "valid_idx", "]", "\n", "return", "valid_idx", ",", "locs", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.filter.process": [[156, 184], ["print", "filter.BilateralGrid", "filter.planar_filter", "visualize_depth", "cv2.imwrite", "numpy.save", "Z.reshape().astype", "W.reshape().astype", "BilateralSolver().solve().reshape", "Z.reshape", "W.reshape", "filter.BilateralSolver.solve", "filter.BilateralSolver"], "function", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.filter.planar_filter", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.io_utils.visualize_depth", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.pix2pix_model.Pix2PixModel.save", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.filter.BilateralSolver.solve"], ["", "", "def", "process", "(", "info", ")", ":", "\n", "    ", "img", ",", "Z", ",", "W", ",", "save_path", "=", "info", "\n", "print", "(", "'processing '", "+", "save_path", ")", "\n", "grid_params", "=", "{", "\n", "'sigma_luma'", ":", "8", ",", "\n", "'sigma_chroma'", ":", "8", ",", "\n", "'sigma_spatial'", ":", "8", "\n", "}", "\n", "\n", "bs_params", "=", "{", "\n", "'lam'", ":", "128", ",", "#The strength of the smoothness parameter", "\n", "'A_diag_min'", ":", "1e-5", ",", "# Clamp the diagonal of the A diagonal in the Jacobi preconditioner.", "\n", "'cg_tol'", ":", "1e-5", ",", "# The tolerance on the convergence in PCG", "\n", "'cg_maxiter'", ":", "25", "# The number of PCG iterations", "\n", "}", "\n", "\n", "grid", "=", "BilateralGrid", "(", "img", ",", "**", "grid_params", ")", "\n", "\n", "def", "bf_solver", "(", "Z", ")", ":", "\n", "        ", "t", "=", "Z", ".", "reshape", "(", "-", "1", ",", "1", ")", ".", "astype", "(", "np", ".", "double", ")", "\n", "c", "=", "W", ".", "reshape", "(", "-", "1", ",", "1", ")", ".", "astype", "(", "np", ".", "double", ")", "\n", "return", "BilateralSolver", "(", "grid", ",", "bs_params", ")", ".", "solve", "(", "t", ",", "c", ")", ".", "reshape", "(", "Z", ".", "shape", ")", "\n", "\n", "", "Zx", ",", "Zy", ",", "filter_depth", "=", "planar_filter", "(", "Z", ",", "bf_solver", ",", "1", ")", "\n", "\n", "color_depth", "=", "visualize_depth", "(", "filter_depth", ")", "\n", "cv2", ".", "imwrite", "(", "save_path", "+", "'.png'", ",", "color_depth", ")", "\n", "np", ".", "save", "(", "save_path", "+", "'.npy'", ",", "filter_depth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.filter.main": [[186, 206], ["print", "load_img_list", "load_rgbs_np", "load_depths", "load_rgbs_np", "multiprocessing.Pool", "multiprocessing.Pool.map_async", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "os.path.join", "os.path.join", "os.path.join", "numpy.abs().mean", "os.path.join", "range", "numpy.abs", "img_name.split"], "function", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.io_utils.load_img_list", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.io_utils.load_rgbs_np", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.io_utils.load_depths", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.io_utils.load_rgbs_np"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "print", "(", "'Filtering begins !'", ")", "\n", "image_list", "=", "load_img_list", "(", "args", ".", "datadir", ",", "load_test", "=", "False", ")", "\n", "pred_rgbs", "=", "load_rgbs_np", "(", "image_list", ",", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "basedir", ",", "args", ".", "expname", ",", "'nerf'", ",", "'results'", ")", ",", "\n", "is_png", "=", "True", ")", "\n", "pred_depths", "=", "load_depths", "(", "image_list", ",", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "basedir", ",", "args", ".", "expname", ",", "'nerf'", ",", "'results'", ")", ")", "\n", "N", ",", "H", ",", "W", ",", "_", "=", "pred_rgbs", ".", "shape", "\n", "gt_rgbs", "=", "load_rgbs_np", "(", "image_list", ",", "os", ".", "path", ".", "join", "(", "args", ".", "datadir", ",", "'images'", ")", ",", "\n", "H", "=", "H", ",", "W", "=", "W", ")", "\n", "confidences", "=", "1", "-", "np", ".", "abs", "(", "pred_rgbs", "/", "255.0", "-", "gt_rgbs", "/", "255.0", ")", ".", "mean", "(", "-", "1", ")", "\n", "save_path", "=", "[", "os", ".", "path", ".", "join", "(", "args", ".", "basedir", ",", "args", ".", "expname", ",", "'filter'", ",", "img_name", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "for", "img_name", "in", "image_list", "]", "\n", "info_list", "=", "[", "(", "gt_rgbs", "[", "i", "]", ",", "pred_depths", "[", "i", "]", ",", "confidences", "[", "i", "]", ",", "save_path", "[", "i", "]", ")", "\n", "for", "i", "in", "range", "(", "N", ")", "]", "\n", "p", "=", "multiprocessing", ".", "Pool", "(", "args", ".", "worker_num", ")", "\n", "p", ".", "map_async", "(", "process", ",", "info_list", ")", "\n", "p", ".", "close", "(", ")", "\n", "p", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.colmap_read_model.Image.qvec2rotmat": [[49, 51], ["colmap_read_model.Image.qvec2rotmat"], "methods", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.colmap_read_model.qvec2rotmat"], ["    ", "def", "qvec2rotmat", "(", "self", ")", ":", "\n", "        ", "return", "qvec2rotmat", "(", "self", ".", "qvec", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.colmap_read_model.read_next_bytes": [[70, 80], ["fid.read", "struct.unpack"], "function", ["None"], ["def", "read_next_bytes", "(", "fid", ",", "num_bytes", ",", "format_char_sequence", ",", "endian_character", "=", "\"<\"", ")", ":", "\n", "    ", "\"\"\"Read and unpack the next bytes from a binary file.\n    :param fid:\n    :param num_bytes: Sum of combination of {2, 4, 8}, e.g. 2, 6, 16, 30, etc.\n    :param format_char_sequence: List of {c, e, f, d, h, H, i, I, l, L, q, Q}.\n    :param endian_character: Any of {@, =, <, >, !}\n    :return: Tuple of read and unpacked values.\n    \"\"\"", "\n", "data", "=", "fid", ".", "read", "(", "num_bytes", ")", "\n", "return", "struct", ".", "unpack", "(", "endian_character", "+", "format_char_sequence", ",", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.colmap_read_model.read_cameras_text": [[82, 106], ["open", "fid.readline", "line.strip.strip", "line.strip.split", "int", "int", "int", "numpy.array", "Camera", "len", "tuple", "map"], "function", ["None"], ["", "def", "read_cameras_text", "(", "path", ")", ":", "\n", "    ", "\"\"\"\n    see: src/base/reconstruction.cc\n        void Reconstruction::WriteCamerasText(const std::string& path)\n        void Reconstruction::ReadCamerasText(const std::string& path)\n    \"\"\"", "\n", "cameras", "=", "{", "}", "\n", "with", "open", "(", "path", ",", "\"r\"", ")", "as", "fid", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "line", "=", "fid", ".", "readline", "(", ")", "\n", "if", "not", "line", ":", "\n", "                ", "break", "\n", "", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "len", "(", "line", ")", ">", "0", "and", "line", "[", "0", "]", "!=", "\"#\"", ":", "\n", "                ", "elems", "=", "line", ".", "split", "(", ")", "\n", "camera_id", "=", "int", "(", "elems", "[", "0", "]", ")", "\n", "model", "=", "elems", "[", "1", "]", "\n", "width", "=", "int", "(", "elems", "[", "2", "]", ")", "\n", "height", "=", "int", "(", "elems", "[", "3", "]", ")", "\n", "params", "=", "np", ".", "array", "(", "tuple", "(", "map", "(", "float", ",", "elems", "[", "4", ":", "]", ")", ")", ")", "\n", "cameras", "[", "camera_id", "]", "=", "Camera", "(", "id", "=", "camera_id", ",", "model", "=", "model", ",", "\n", "width", "=", "width", ",", "height", "=", "height", ",", "\n", "params", "=", "params", ")", "\n", "", "", "", "return", "cameras", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.colmap_read_model.read_cameras_binary": [[108, 135], ["open", "range", "colmap_read_model.read_next_bytes", "colmap_read_model.read_next_bytes", "colmap_read_model.read_next_bytes", "Camera", "len", "numpy.array"], "function", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.colmap_read_model.read_next_bytes", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.colmap_read_model.read_next_bytes", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.colmap_read_model.read_next_bytes"], ["", "def", "read_cameras_binary", "(", "path_to_model_file", ")", ":", "\n", "    ", "\"\"\"\n    see: src/base/reconstruction.cc\n        void Reconstruction::WriteCamerasBinary(const std::string& path)\n        void Reconstruction::ReadCamerasBinary(const std::string& path)\n    \"\"\"", "\n", "cameras", "=", "{", "}", "\n", "with", "open", "(", "path_to_model_file", ",", "\"rb\"", ")", "as", "fid", ":", "\n", "        ", "num_cameras", "=", "read_next_bytes", "(", "fid", ",", "8", ",", "\"Q\"", ")", "[", "0", "]", "\n", "for", "camera_line_index", "in", "range", "(", "num_cameras", ")", ":", "\n", "            ", "camera_properties", "=", "read_next_bytes", "(", "\n", "fid", ",", "num_bytes", "=", "24", ",", "format_char_sequence", "=", "\"iiQQ\"", ")", "\n", "camera_id", "=", "camera_properties", "[", "0", "]", "\n", "model_id", "=", "camera_properties", "[", "1", "]", "\n", "model_name", "=", "CAMERA_MODEL_IDS", "[", "camera_properties", "[", "1", "]", "]", ".", "model_name", "\n", "width", "=", "camera_properties", "[", "2", "]", "\n", "height", "=", "camera_properties", "[", "3", "]", "\n", "num_params", "=", "CAMERA_MODEL_IDS", "[", "model_id", "]", ".", "num_params", "\n", "params", "=", "read_next_bytes", "(", "fid", ",", "num_bytes", "=", "8", "*", "num_params", ",", "\n", "format_char_sequence", "=", "\"d\"", "*", "num_params", ")", "\n", "cameras", "[", "camera_id", "]", "=", "Camera", "(", "id", "=", "camera_id", ",", "\n", "model", "=", "model_name", ",", "\n", "width", "=", "width", ",", "\n", "height", "=", "height", ",", "\n", "params", "=", "np", ".", "array", "(", "params", ")", ")", "\n", "", "assert", "len", "(", "cameras", ")", "==", "num_cameras", "\n", "", "return", "cameras", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.colmap_read_model.read_images_text": [[137, 166], ["open", "fid.readline", "line.strip.strip", "line.strip.split", "int", "numpy.array", "numpy.array", "int", "fid.readline().split", "numpy.column_stack", "numpy.array", "colmap_read_model.Image", "len", "tuple", "tuple", "tuple", "map", "map", "fid.readline", "tuple", "tuple", "map", "map", "map"], "function", ["None"], ["", "def", "read_images_text", "(", "path", ")", ":", "\n", "    ", "\"\"\"\n    see: src/base/reconstruction.cc\n        void Reconstruction::ReadImagesText(const std::string& path)\n        void Reconstruction::WriteImagesText(const std::string& path)\n    \"\"\"", "\n", "images", "=", "{", "}", "\n", "with", "open", "(", "path", ",", "\"r\"", ")", "as", "fid", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "line", "=", "fid", ".", "readline", "(", ")", "\n", "if", "not", "line", ":", "\n", "                ", "break", "\n", "", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "len", "(", "line", ")", ">", "0", "and", "line", "[", "0", "]", "!=", "\"#\"", ":", "\n", "                ", "elems", "=", "line", ".", "split", "(", ")", "\n", "image_id", "=", "int", "(", "elems", "[", "0", "]", ")", "\n", "qvec", "=", "np", ".", "array", "(", "tuple", "(", "map", "(", "float", ",", "elems", "[", "1", ":", "5", "]", ")", ")", ")", "\n", "tvec", "=", "np", ".", "array", "(", "tuple", "(", "map", "(", "float", ",", "elems", "[", "5", ":", "8", "]", ")", ")", ")", "\n", "camera_id", "=", "int", "(", "elems", "[", "8", "]", ")", "\n", "image_name", "=", "elems", "[", "9", "]", "\n", "elems", "=", "fid", ".", "readline", "(", ")", ".", "split", "(", ")", "\n", "xys", "=", "np", ".", "column_stack", "(", "[", "tuple", "(", "map", "(", "float", ",", "elems", "[", "0", ":", ":", "3", "]", ")", ")", ",", "\n", "tuple", "(", "map", "(", "float", ",", "elems", "[", "1", ":", ":", "3", "]", ")", ")", "]", ")", "\n", "point3D_ids", "=", "np", ".", "array", "(", "tuple", "(", "map", "(", "int", ",", "elems", "[", "2", ":", ":", "3", "]", ")", ")", ")", "\n", "images", "[", "image_id", "]", "=", "Image", "(", "\n", "id", "=", "image_id", ",", "qvec", "=", "qvec", ",", "tvec", "=", "tvec", ",", "\n", "camera_id", "=", "camera_id", ",", "name", "=", "image_name", ",", "\n", "xys", "=", "xys", ",", "point3D_ids", "=", "point3D_ids", ")", "\n", "", "", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.colmap_read_model.read_images_binary": [[168, 201], ["open", "range", "colmap_read_model.read_next_bytes", "colmap_read_model.read_next_bytes", "numpy.array", "numpy.array", "colmap_read_model.read_next_bytes", "numpy.column_stack", "numpy.array", "colmap_read_model.Image", "colmap_read_model.read_next_bytes", "current_char.decode", "colmap_read_model.read_next_bytes", "tuple", "colmap_read_model.read_next_bytes", "tuple", "tuple", "map", "map", "map"], "function", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.colmap_read_model.read_next_bytes", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.colmap_read_model.read_next_bytes", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.colmap_read_model.read_next_bytes", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.colmap_read_model.read_next_bytes", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.colmap_read_model.read_next_bytes", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.colmap_read_model.read_next_bytes"], ["", "def", "read_images_binary", "(", "path_to_model_file", ")", ":", "\n", "    ", "\"\"\"\n    see: src/base/reconstruction.cc\n        void Reconstruction::ReadImagesBinary(const std::string& path)\n        void Reconstruction::WriteImagesBinary(const std::string& path)\n    \"\"\"", "\n", "images", "=", "{", "}", "\n", "with", "open", "(", "path_to_model_file", ",", "\"rb\"", ")", "as", "fid", ":", "\n", "        ", "num_reg_images", "=", "read_next_bytes", "(", "fid", ",", "8", ",", "\"Q\"", ")", "[", "0", "]", "\n", "for", "image_index", "in", "range", "(", "num_reg_images", ")", ":", "\n", "            ", "binary_image_properties", "=", "read_next_bytes", "(", "\n", "fid", ",", "num_bytes", "=", "64", ",", "format_char_sequence", "=", "\"idddddddi\"", ")", "\n", "image_id", "=", "binary_image_properties", "[", "0", "]", "\n", "qvec", "=", "np", ".", "array", "(", "binary_image_properties", "[", "1", ":", "5", "]", ")", "\n", "tvec", "=", "np", ".", "array", "(", "binary_image_properties", "[", "5", ":", "8", "]", ")", "\n", "camera_id", "=", "binary_image_properties", "[", "8", "]", "\n", "image_name", "=", "\"\"", "\n", "current_char", "=", "read_next_bytes", "(", "fid", ",", "1", ",", "\"c\"", ")", "[", "0", "]", "\n", "while", "current_char", "!=", "b\"\\x00\"", ":", "# look for the ASCII 0 entry", "\n", "                ", "image_name", "+=", "current_char", ".", "decode", "(", "\"utf-8\"", ")", "\n", "current_char", "=", "read_next_bytes", "(", "fid", ",", "1", ",", "\"c\"", ")", "[", "0", "]", "\n", "", "num_points2D", "=", "read_next_bytes", "(", "fid", ",", "num_bytes", "=", "8", ",", "\n", "format_char_sequence", "=", "\"Q\"", ")", "[", "0", "]", "\n", "x_y_id_s", "=", "read_next_bytes", "(", "fid", ",", "num_bytes", "=", "24", "*", "num_points2D", ",", "\n", "format_char_sequence", "=", "\"ddq\"", "*", "num_points2D", ")", "\n", "xys", "=", "np", ".", "column_stack", "(", "[", "tuple", "(", "map", "(", "float", ",", "x_y_id_s", "[", "0", ":", ":", "3", "]", ")", ")", ",", "\n", "tuple", "(", "map", "(", "float", ",", "x_y_id_s", "[", "1", ":", ":", "3", "]", ")", ")", "]", ")", "\n", "point3D_ids", "=", "np", ".", "array", "(", "tuple", "(", "map", "(", "int", ",", "x_y_id_s", "[", "2", ":", ":", "3", "]", ")", ")", ")", "\n", "images", "[", "image_id", "]", "=", "Image", "(", "\n", "id", "=", "image_id", ",", "qvec", "=", "qvec", ",", "tvec", "=", "tvec", ",", "\n", "camera_id", "=", "camera_id", ",", "name", "=", "image_name", ",", "\n", "xys", "=", "xys", ",", "point3D_ids", "=", "point3D_ids", ")", "\n", "", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.colmap_read_model.read_points3D_text": [[203, 228], ["open", "fid.readline", "line.strip.strip", "line.strip.split", "int", "numpy.array", "numpy.array", "float", "numpy.array", "numpy.array", "Point3D", "len", "tuple", "tuple", "tuple", "tuple", "map", "map", "map", "map"], "function", ["None"], ["", "def", "read_points3D_text", "(", "path", ")", ":", "\n", "    ", "\"\"\"\n    see: src/base/reconstruction.cc\n        void Reconstruction::ReadPoints3DText(const std::string& path)\n        void Reconstruction::WritePoints3DText(const std::string& path)\n    \"\"\"", "\n", "points3D", "=", "{", "}", "\n", "with", "open", "(", "path", ",", "\"r\"", ")", "as", "fid", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "line", "=", "fid", ".", "readline", "(", ")", "\n", "if", "not", "line", ":", "\n", "                ", "break", "\n", "", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "len", "(", "line", ")", ">", "0", "and", "line", "[", "0", "]", "!=", "\"#\"", ":", "\n", "                ", "elems", "=", "line", ".", "split", "(", ")", "\n", "point3D_id", "=", "int", "(", "elems", "[", "0", "]", ")", "\n", "xyz", "=", "np", ".", "array", "(", "tuple", "(", "map", "(", "float", ",", "elems", "[", "1", ":", "4", "]", ")", ")", ")", "\n", "rgb", "=", "np", ".", "array", "(", "tuple", "(", "map", "(", "int", ",", "elems", "[", "4", ":", "7", "]", ")", ")", ")", "\n", "error", "=", "float", "(", "elems", "[", "7", "]", ")", "\n", "image_ids", "=", "np", ".", "array", "(", "tuple", "(", "map", "(", "int", ",", "elems", "[", "8", ":", ":", "2", "]", ")", ")", ")", "\n", "point2D_idxs", "=", "np", ".", "array", "(", "tuple", "(", "map", "(", "int", ",", "elems", "[", "9", ":", ":", "2", "]", ")", ")", ")", "\n", "points3D", "[", "point3D_id", "]", "=", "Point3D", "(", "id", "=", "point3D_id", ",", "xyz", "=", "xyz", ",", "rgb", "=", "rgb", ",", "\n", "error", "=", "error", ",", "image_ids", "=", "image_ids", ",", "\n", "point2D_idxs", "=", "point2D_idxs", ")", "\n", "", "", "", "return", "points3D", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.colmap_read_model.read_points3d_binary": [[230, 258], ["open", "range", "colmap_read_model.read_next_bytes", "colmap_read_model.read_next_bytes", "numpy.array", "numpy.array", "numpy.array", "colmap_read_model.read_next_bytes", "numpy.array", "numpy.array", "Point3D", "colmap_read_model.read_next_bytes", "tuple", "tuple", "map", "map"], "function", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.colmap_read_model.read_next_bytes", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.colmap_read_model.read_next_bytes", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.colmap_read_model.read_next_bytes", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.colmap_read_model.read_next_bytes"], ["", "def", "read_points3d_binary", "(", "path_to_model_file", ")", ":", "\n", "    ", "\"\"\"\n    see: src/base/reconstruction.cc\n        void Reconstruction::ReadPoints3DBinary(const std::string& path)\n        void Reconstruction::WritePoints3DBinary(const std::string& path)\n    \"\"\"", "\n", "points3D", "=", "{", "}", "\n", "with", "open", "(", "path_to_model_file", ",", "\"rb\"", ")", "as", "fid", ":", "\n", "        ", "num_points", "=", "read_next_bytes", "(", "fid", ",", "8", ",", "\"Q\"", ")", "[", "0", "]", "\n", "for", "point_line_index", "in", "range", "(", "num_points", ")", ":", "\n", "            ", "binary_point_line_properties", "=", "read_next_bytes", "(", "\n", "fid", ",", "num_bytes", "=", "43", ",", "format_char_sequence", "=", "\"QdddBBBd\"", ")", "\n", "point3D_id", "=", "binary_point_line_properties", "[", "0", "]", "\n", "xyz", "=", "np", ".", "array", "(", "binary_point_line_properties", "[", "1", ":", "4", "]", ")", "\n", "rgb", "=", "np", ".", "array", "(", "binary_point_line_properties", "[", "4", ":", "7", "]", ")", "\n", "error", "=", "np", ".", "array", "(", "binary_point_line_properties", "[", "7", "]", ")", "\n", "track_length", "=", "read_next_bytes", "(", "\n", "fid", ",", "num_bytes", "=", "8", ",", "format_char_sequence", "=", "\"Q\"", ")", "[", "0", "]", "\n", "track_elems", "=", "read_next_bytes", "(", "\n", "fid", ",", "num_bytes", "=", "8", "*", "track_length", ",", "\n", "format_char_sequence", "=", "\"ii\"", "*", "track_length", ")", "\n", "image_ids", "=", "np", ".", "array", "(", "tuple", "(", "map", "(", "int", ",", "track_elems", "[", "0", ":", ":", "2", "]", ")", ")", ")", "\n", "point2D_idxs", "=", "np", ".", "array", "(", "tuple", "(", "map", "(", "int", ",", "track_elems", "[", "1", ":", ":", "2", "]", ")", ")", ")", "\n", "points3D", "[", "point3D_id", "]", "=", "Point3D", "(", "\n", "id", "=", "point3D_id", ",", "xyz", "=", "xyz", ",", "rgb", "=", "rgb", ",", "\n", "error", "=", "error", ",", "image_ids", "=", "image_ids", ",", "\n", "point2D_idxs", "=", "point2D_idxs", ")", "\n", "", "", "return", "points3D", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.colmap_read_model.read_model": [[260, 270], ["colmap_read_model.read_cameras_text", "colmap_read_model.read_images_text", "colmap_read_model.read_points3D_text", "colmap_read_model.read_cameras_binary", "colmap_read_model.read_images_binary", "colmap_read_model.read_points3d_binary", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.colmap_read_model.read_cameras_text", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.colmap_read_model.read_images_text", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.colmap_read_model.read_points3D_text", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.colmap_read_model.read_cameras_binary", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.colmap_read_model.read_images_binary", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.colmap_read_model.read_points3d_binary"], ["", "def", "read_model", "(", "path", ",", "ext", ")", ":", "\n", "    ", "if", "ext", "==", "\".txt\"", ":", "\n", "        ", "cameras", "=", "read_cameras_text", "(", "os", ".", "path", ".", "join", "(", "path", ",", "\"cameras\"", "+", "ext", ")", ")", "\n", "images", "=", "read_images_text", "(", "os", ".", "path", ".", "join", "(", "path", ",", "\"images\"", "+", "ext", ")", ")", "\n", "points3D", "=", "read_points3D_text", "(", "os", ".", "path", ".", "join", "(", "path", ",", "\"points3D\"", ")", "+", "ext", ")", "\n", "", "else", ":", "\n", "        ", "cameras", "=", "read_cameras_binary", "(", "os", ".", "path", ".", "join", "(", "path", ",", "\"cameras\"", "+", "ext", ")", ")", "\n", "images", "=", "read_images_binary", "(", "os", ".", "path", ".", "join", "(", "path", ",", "\"images\"", "+", "ext", ")", ")", "\n", "points3D", "=", "read_points3d_binary", "(", "os", ".", "path", ".", "join", "(", "path", ",", "\"points3D\"", ")", "+", "ext", ")", "\n", "", "return", "cameras", ",", "images", ",", "points3D", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.colmap_read_model.qvec2rotmat": [[272, 283], ["numpy.array"], "function", ["None"], ["", "def", "qvec2rotmat", "(", "qvec", ")", ":", "\n", "    ", "return", "np", ".", "array", "(", "[", "\n", "[", "1", "-", "2", "*", "qvec", "[", "2", "]", "**", "2", "-", "2", "*", "qvec", "[", "3", "]", "**", "2", ",", "\n", "2", "*", "qvec", "[", "1", "]", "*", "qvec", "[", "2", "]", "-", "2", "*", "qvec", "[", "0", "]", "*", "qvec", "[", "3", "]", ",", "\n", "2", "*", "qvec", "[", "3", "]", "*", "qvec", "[", "1", "]", "+", "2", "*", "qvec", "[", "0", "]", "*", "qvec", "[", "2", "]", "]", ",", "\n", "[", "2", "*", "qvec", "[", "1", "]", "*", "qvec", "[", "2", "]", "+", "2", "*", "qvec", "[", "0", "]", "*", "qvec", "[", "3", "]", ",", "\n", "1", "-", "2", "*", "qvec", "[", "1", "]", "**", "2", "-", "2", "*", "qvec", "[", "3", "]", "**", "2", ",", "\n", "2", "*", "qvec", "[", "2", "]", "*", "qvec", "[", "3", "]", "-", "2", "*", "qvec", "[", "0", "]", "*", "qvec", "[", "1", "]", "]", ",", "\n", "[", "2", "*", "qvec", "[", "3", "]", "*", "qvec", "[", "1", "]", "-", "2", "*", "qvec", "[", "0", "]", "*", "qvec", "[", "2", "]", ",", "\n", "2", "*", "qvec", "[", "2", "]", "*", "qvec", "[", "3", "]", "+", "2", "*", "qvec", "[", "0", "]", "*", "qvec", "[", "1", "]", ",", "\n", "1", "-", "2", "*", "qvec", "[", "1", "]", "**", "2", "-", "2", "*", "qvec", "[", "2", "]", "**", "2", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.colmap_read_model.rotmat2qvec": [[285, 297], ["numpy.linalg.eigh", "numpy.array", "numpy.argmax"], "function", ["None"], ["", "def", "rotmat2qvec", "(", "R", ")", ":", "\n", "    ", "Rxx", ",", "Ryx", ",", "Rzx", ",", "Rxy", ",", "Ryy", ",", "Rzy", ",", "Rxz", ",", "Ryz", ",", "Rzz", "=", "R", ".", "flat", "\n", "K", "=", "np", ".", "array", "(", "[", "\n", "[", "Rxx", "-", "Ryy", "-", "Rzz", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "Ryx", "+", "Rxy", ",", "Ryy", "-", "Rxx", "-", "Rzz", ",", "0", ",", "0", "]", ",", "\n", "[", "Rzx", "+", "Rxz", ",", "Rzy", "+", "Ryz", ",", "Rzz", "-", "Rxx", "-", "Ryy", ",", "0", "]", ",", "\n", "[", "Ryz", "-", "Rzy", ",", "Rzx", "-", "Rxz", ",", "Rxy", "-", "Ryx", ",", "Rxx", "+", "Ryy", "+", "Rzz", "]", "]", ")", "/", "3.0", "\n", "eigvals", ",", "eigvecs", "=", "np", ".", "linalg", ".", "eigh", "(", "K", ")", "\n", "qvec", "=", "eigvecs", "[", "[", "3", ",", "0", ",", "1", ",", "2", "]", ",", "np", ".", "argmax", "(", "eigvals", ")", "]", "\n", "if", "qvec", "[", "0", "]", "<", "0", ":", "\n", "        ", "qvec", "*=", "-", "1", "\n", "", "return", "qvec", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.colmap_read_model.main": [[299, 309], ["colmap_read_model.read_model", "print", "print", "print", "len", "print", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.colmap_read_model.read_model"], ["", "def", "main", "(", ")", ":", "\n", "    ", "if", "len", "(", "sys", ".", "argv", ")", "!=", "3", ":", "\n", "        ", "print", "(", "\"Usage: python read_model.py path/to/model/folder [.txt,.bin]\"", ")", "\n", "return", "\n", "\n", "", "cameras", ",", "images", ",", "points3D", "=", "read_model", "(", "path", "=", "sys", ".", "argv", "[", "1", "]", ",", "ext", "=", "sys", ".", "argv", "[", "2", "]", ")", "\n", "\n", "print", "(", "\"num_cameras:\"", ",", "len", "(", "cameras", ")", ")", "\n", "print", "(", "\"num_images:\"", ",", "len", "(", "images", ")", ")", "\n", "print", "(", "\"num_points3D:\"", ",", "len", "(", "points3D", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.nerf_utils.align_scales": [[6, 22], ["range", "numpy.stack", "np.concatenate.append", "len", "nerf_utils.cal_neighbor_idx", "numpy.concatenate", "numpy.concatenate", "numpy.median", "numpy.median"], "function", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.nerf_utils.cal_neighbor_idx"], ["def", "align_scales", "(", "depth_priors", ",", "colmap_depths", ",", "colmap_masks", ",", "poses", ",", "sc", ",", "i_train", ",", "i_test", ")", ":", "\n", "    ", "ratio_priors", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "depth_priors", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "ratio_priors", ".", "append", "(", "np", ".", "median", "(", "colmap_depths", "[", "i", "]", "[", "colmap_masks", "[", "i", "]", "]", ")", "/", "np", ".", "median", "(", "depth_priors", "[", "i", "]", "[", "colmap_masks", "[", "i", "]", "]", ")", ")", "\n", "", "ratio_priors", "=", "np", ".", "stack", "(", "ratio_priors", ")", "\n", "ratio_priors", "=", "ratio_priors", "[", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", "\n", "\n", "if", "len", "(", "i_test", ")", ">", "0", ":", "\n", "        ", "neighbor_idx", "=", "cal_neighbor_idx", "(", "poses", ",", "i_train", ",", "i_test", ")", "\n", "depth_priors_test", "=", "depth_priors", "[", "i_train", "]", "[", "neighbor_idx", "]", "\n", "ratio_priors_test", "=", "ratio_priors", "[", "i_train", "]", "[", "neighbor_idx", "]", "\n", "depth_priors", "=", "np", ".", "concatenate", "(", "[", "depth_priors", ",", "depth_priors_test", "]", ",", "axis", "=", "0", ")", "\n", "ratio_priors", "=", "np", ".", "concatenate", "(", "[", "ratio_priors", ",", "ratio_priors_test", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "depth_priors", "=", "depth_priors", "*", "sc", "*", "ratio_priors", "#align scales", "\n", "return", "depth_priors", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.nerf_utils.cal_depth_confidences": [[23, 48], ["len", "torch.inverse", "torch.inverse", "torch.inverse", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.inverse", "torch.inverse", "torch.inverse", "nerf_utils.calculate_coords", "nerf_utils.BackprojectDepth", "range", "numpy.stack", "numpy.stack", "cam_points[].repeat", "torch.matmul", "torch.matmul", "torch.matmul", "nerf_utils.Project3D", "nerf_utils.Project3D_depth", "torch.grid_sample().squeeze", "error.topk", "depth_confidence.mean().cpu().numpy.mean().cpu().numpy", "depth_confidences.append", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "T[].repeat", "torch.abs", "torch.abs", "torch.abs", "torch.grid_sample", "depth_confidence.mean().cpu().numpy.mean().cpu", "depths[].unsqueeze", "depth_confidence.mean().cpu().numpy.mean"], "function", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.nerf_utils.calculate_coords", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.nerf_utils.BackprojectDepth", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.nerf_utils.Project3D", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.nerf_utils.Project3D_depth"], ["", "def", "cal_depth_confidences", "(", "depths", ",", "T", ",", "K", ",", "i_train", ",", "topk", "=", "4", ")", ":", "\n", "    ", "_", ",", "H", ",", "W", "=", "depths", ".", "shape", "\n", "view_num", "=", "len", "(", "i_train", ")", "\n", "invK", "=", "torch", ".", "inverse", "(", "K", ")", "\n", "batch_K", "=", "torch", ".", "unsqueeze", "(", "K", ",", "0", ")", ".", "repeat", "(", "view_num", ",", "1", ",", "1", ")", "\n", "batch_invK", "=", "torch", ".", "unsqueeze", "(", "invK", ",", "0", ")", ".", "repeat", "(", "depths", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ")", "\n", "T_train", "=", "T", "[", "i_train", "]", "\n", "invT", "=", "torch", ".", "inverse", "(", "T_train", ")", "\n", "pix_coords", "=", "calculate_coords", "(", "W", ",", "H", ")", "\n", "cam_points", "=", "BackprojectDepth", "(", "depths", ",", "batch_invK", ",", "pix_coords", ")", "\n", "depth_confidences", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "depths", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "cam_points_i", "=", "cam_points", "[", "i", ":", "i", "+", "1", "]", ".", "repeat", "(", "view_num", ",", "1", ",", "1", ")", "\n", "T_i", "=", "torch", ".", "matmul", "(", "invT", ",", "T", "[", "i", ":", "i", "+", "1", "]", ".", "repeat", "(", "view_num", ",", "1", ",", "1", ")", ")", "\n", "pix_coords_ref", "=", "Project3D", "(", "cam_points_i", ",", "batch_K", ",", "T_i", ",", "H", ",", "W", ")", "\n", "depths_", "=", "Project3D_depth", "(", "cam_points_i", ",", "batch_K", ",", "T_i", ",", "H", ",", "W", ")", "\n", "depths_proj", "=", "F", ".", "grid_sample", "(", "depths", "[", "i_train", "]", ".", "unsqueeze", "(", "1", ")", ",", "pix_coords_ref", ",", "\n", "padding_mode", "=", "\"zeros\"", ")", ".", "squeeze", "(", ")", "\n", "error", "=", "torch", ".", "abs", "(", "depths_proj", "-", "depths_", ")", "/", "(", "depths_", "+", "1e-7", ")", "\n", "depth_confidence", ",", "_", "=", "error", ".", "topk", "(", "k", "=", "topk", ",", "dim", "=", "0", ",", "largest", "=", "False", ")", "\n", "depth_confidence", "=", "depth_confidence", ".", "mean", "(", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "depth_confidences", ".", "append", "(", "depth_confidence", ")", "\n", "", "return", "np", ".", "stack", "(", "depth_confidences", ",", "0", ")", "\n", "return", "np", ".", "stack", "(", "depth_confidences", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.nerf_utils.calculate_coords": [[49, 59], ["numpy.meshgrid", "numpy.stack().astype", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.stack", "torch.stack", "torch.stack", "torch.ones", "torch.ones", "torch.ones", "torch.cat.to", "torch.cat", "torch.cat", "torch.cat", "range", "range", "numpy.stack", "id_coords[].view", "id_coords[].view"], "function", ["None"], ["", "def", "calculate_coords", "(", "W", ",", "H", ")", ":", "\n", "    ", "meshgrid", "=", "np", ".", "meshgrid", "(", "range", "(", "W", ")", ",", "range", "(", "H", ")", ",", "indexing", "=", "'xy'", ")", "\n", "id_coords", "=", "np", ".", "stack", "(", "meshgrid", ",", "axis", "=", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "id_coords", "=", "torch", ".", "from_numpy", "(", "id_coords", ")", "\n", "pix_coords", "=", "torch", ".", "stack", "(", "\n", "[", "id_coords", "[", "0", "]", ".", "view", "(", "-", "1", ")", ",", "id_coords", "[", "1", "]", ".", "view", "(", "-", "1", ")", "]", ",", "0", ")", "\n", "ones", "=", "torch", ".", "ones", "(", "1", ",", "H", "*", "W", ")", "\n", "pix_coords", "=", "pix_coords", ".", "to", "(", "ones", ".", "device", ")", "\n", "pix_coords", "=", "torch", ".", "cat", "(", "[", "pix_coords", ",", "ones", "]", ",", "0", ")", "\n", "return", "pix_coords", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.nerf_utils.BackprojectDepth": [[60, 67], ["torch.ones", "torch.ones", "torch.ones", "torch.matmul", "torch.matmul", "torch.matmul", "torch.cat", "torch.cat", "torch.cat", "depth.view"], "function", ["None"], ["", "def", "BackprojectDepth", "(", "depth", ",", "invK", ",", "pix_coords", ")", ":", "\n", "    ", "batch_size", ",", "H", ",", "W", "=", "depth", ".", "shape", "\n", "ones", "=", "torch", ".", "ones", "(", "batch_size", ",", "1", ",", "H", "*", "W", ")", "\n", "cam_points", "=", "torch", ".", "matmul", "(", "invK", "[", ":", ",", ":", "3", ",", ":", "3", "]", ",", "pix_coords", ")", "\n", "cam_points", "=", "depth", ".", "view", "(", "batch_size", ",", "1", ",", "-", "1", ")", "*", "cam_points", "\n", "cam_points", "=", "torch", ".", "cat", "(", "[", "cam_points", ",", "ones", "]", ",", "1", ")", "\n", "return", "cam_points", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.nerf_utils.Project3D": [[68, 81], ["torch.matmul", "torch.matmul", "torch.matmul", "pix_coords.permute.view", "pix_coords.permute.permute", "torch.matmul", "torch.matmul", "torch.matmul", "cam_points[].unsqueeze"], "function", ["None"], ["", "def", "Project3D", "(", "points", ",", "K", ",", "T", ",", "H", ",", "W", ",", "eps", "=", "1e-7", ")", ":", "\n", "    ", "batch_size", "=", "points", ".", "shape", "[", "0", "]", "\n", "P", "=", "torch", ".", "matmul", "(", "K", ",", "T", ")", "[", ":", ",", ":", "3", ",", ":", "]", "\n", "\n", "cam_points", "=", "torch", ".", "matmul", "(", "P", ",", "points", ")", "\n", "\n", "pix_coords", "=", "cam_points", "[", ":", ",", ":", "2", ",", ":", "]", "/", "(", "cam_points", "[", ":", ",", "2", ",", ":", "]", ".", "unsqueeze", "(", "1", ")", "+", "eps", ")", "\n", "pix_coords", "=", "pix_coords", ".", "view", "(", "batch_size", ",", "2", ",", "H", ",", "W", ")", "\n", "pix_coords", "=", "pix_coords", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "pix_coords", "[", "...", ",", "0", "]", "/=", "W", "-", "1", "\n", "pix_coords", "[", "...", ",", "1", "]", "/=", "H", "-", "1", "\n", "pix_coords", "=", "(", "pix_coords", "-", "0.5", ")", "*", "2", "\n", "return", "pix_coords", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.nerf_utils.Project3D_depth": [[82, 88], ["torch.matmul", "torch.matmul", "torch.matmul", "cam_points[].view", "torch.matmul", "torch.matmul", "torch.matmul"], "function", ["None"], ["", "def", "Project3D_depth", "(", "points", ",", "K", ",", "T", ",", "H", ",", "W", ",", "eps", "=", "1e-7", ")", ":", "\n", "    ", "batch_size", "=", "points", ".", "shape", "[", "0", "]", "\n", "P", "=", "torch", ".", "matmul", "(", "K", ",", "T", ")", "[", ":", ",", ":", "3", ",", ":", "]", "\n", "\n", "cam_points", "=", "torch", ".", "matmul", "(", "P", ",", "points", ")", "\n", "return", "cam_points", "[", ":", ",", "2", ",", ":", "]", ".", "view", "(", "batch_size", ",", "H", ",", "W", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.nerf_utils.cal_neighbor_idx": [[89, 109], ["range", "numpy.argsort", "numpy.argsort", "[].repeat", "[].repeat", "numpy.argmin", "angles.append", "trans.append", "numpy.stack", "numpy.stack", "len", "len", "nerf_utils.vec_from_R", "[].copy", "poses[].copy", "numpy.arange", "numpy.arange", "len", "len"], "function", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.nerf_utils.vec_from_R"], ["", "def", "cal_neighbor_idx", "(", "poses", ",", "i_train", ",", "i_test", ")", ":", "\n", "    ", "angles", "=", "[", "]", "\n", "trans", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "poses", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "angles", ".", "append", "(", "vec_from_R", "(", "poses", "[", "i", "]", ".", "copy", "(", ")", ")", ")", "\n", "trans", ".", "append", "(", "poses", "[", "i", "]", "[", ":", "3", ",", "3", "]", ".", "copy", "(", ")", ")", "\n", "", "angles", ",", "trans", "=", "np", ".", "stack", "(", "angles", ")", ",", "np", ".", "stack", "(", "trans", ")", "\n", "angle_dis", "=", "angles", "[", "i_test", "]", "[", ":", ",", "None", "]", "-", "angles", "[", "i_train", "]", "[", "None", ",", ":", "]", "\n", "tran_dis", "=", "trans", "[", "i_test", "]", "[", ":", ",", "None", "]", "-", "trans", "[", "i_train", "]", "[", "None", ",", ":", "]", "\n", "angle_dis", "=", "(", "angle_dis", "**", "2", ")", ".", "sum", "(", "-", "1", ")", "\n", "angle_sort", "=", "np", ".", "argsort", "(", "angle_dis", ",", "axis", "=", "1", ")", "\n", "tran_dis", "=", "(", "tran_dis", "**", "2", ")", ".", "sum", "(", "-", "1", ")", "\n", "tran_sort", "=", "np", ".", "argsort", "(", "tran_dis", ",", "axis", "=", "1", ")", "\n", "x_range", "=", "np", ".", "arange", "(", "len", "(", "i_test", ")", ")", "[", ":", ",", "None", "]", ".", "repeat", "(", "len", "(", "i_train", ")", ",", "axis", "=", "1", ")", "\n", "y_range", "=", "np", ".", "arange", "(", "len", "(", "i_train", ")", ")", "[", "None", "]", ".", "repeat", "(", "len", "(", "i_test", ")", ",", "axis", "=", "0", ")", "\n", "angle_dis", "[", "x_range", ",", "angle_sort", "]", "=", "y_range", "\n", "tran_dis", "[", "x_range", ",", "tran_sort", "]", "=", "y_range", "\n", "final_score", "=", "100", "*", "(", "angle_dis", "+", "tran_dis", ")", "+", "angle_dis", "\n", "neighbor_idx", "=", "np", ".", "argmin", "(", "final_score", ",", "axis", "=", "1", ")", "\n", "return", "neighbor_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.nerf_utils.vec_from_R": [[110, 116], ["numpy.stack", "numpy.linalg.norm", "numpy.arcsin", "rot[].transpose"], "function", ["None"], ["", "def", "vec_from_R", "(", "rot", ")", ":", "\n", "    ", "temp", "=", "(", "rot", "[", ":", "3", ",", ":", "3", "]", "-", "rot", "[", ":", "3", ",", ":", "3", "]", ".", "transpose", "(", "1", ",", "0", ")", ")", "/", "2", "\n", "angle_vec", "=", "np", ".", "stack", "(", "[", "temp", "[", "2", "]", "[", "1", "]", ",", "-", "temp", "[", "2", "]", "[", "0", "]", ",", "temp", "[", "1", "]", "[", "0", "]", "]", ")", "\n", "angle", "=", "np", ".", "linalg", ".", "norm", "(", "angle_vec", ")", "\n", "axis", "=", "angle_vec", "/", "angle", "\n", "return", "np", ".", "arcsin", "(", "angle", ")", "*", "axis", "\n", "", ""]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.filter_utils.rgb2yuv": [[18, 20], ["numpy.tensordot"], "function", ["None"], ["def", "rgb2yuv", "(", "im", ")", ":", "\n", "    ", "return", "(", "np", ".", "tensordot", "(", "im", ",", "RGB_TO_YUV", ",", "(", "[", "2", "]", ",", "[", "1", "]", ")", ")", "+", "YUV_OFFSET", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.filter_utils.yuv2rgb": [[21, 23], ["numpy.tensordot", "im.astype"], "function", ["None"], ["", "def", "yuv2rgb", "(", "im", ")", ":", "\n", "    ", "return", "np", ".", "tensordot", "(", "im", ".", "astype", "(", "float", ")", "-", "YUV_OFFSET", ",", "YUV_TO_RGB", ",", "(", "[", "2", "]", ",", "[", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.filter_utils.solve_image_ldl3": [[26, 41], ["None"], "function", ["None"], ["", "def", "solve_image_ldl3", "(", "A11", ",", "A12", ",", "A13", ",", "A22", ",", "A23", ",", "A33", ",", "b1", ",", "b2", ",", "b3", ")", ":", "\n", "# An unrolled LDL solver for a 3x3 symmetric linear system.", "\n", "  ", "d1", "=", "A11", "\n", "L12", "=", "A12", "/", "d1", "\n", "d2", "=", "A22", "-", "L12", "*", "A12", "\n", "L13", "=", "A13", "/", "d1", "\n", "L23", "=", "(", "A23", "-", "L13", "*", "A12", ")", "/", "d2", "\n", "d3", "=", "A33", "-", "L13", "*", "A13", "-", "L23", "*", "L23", "*", "d2", "+", "1e-10", "\n", "y1", "=", "b1", "\n", "y2", "=", "b2", "-", "L12", "*", "y1", "\n", "y3", "=", "b3", "-", "L13", "*", "y1", "-", "L23", "*", "y2", "\n", "x3", "=", "y3", "/", "d3", "\n", "x2", "=", "y2", "/", "d2", "-", "L23", "*", "x3", "\n", "x1", "=", "y1", "/", "d1", "-", "L12", "*", "x2", "-", "L13", "*", "x3", "\n", "return", "x1", ",", "x2", ",", "x3", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.filter_utils.blur": [[44, 60], ["X.copy", "range", "range", "range", "range"], "function", ["None"], ["", "def", "blur", "(", "X", ",", "alpha", ")", ":", "\n", "# Do an exponential decay filter on the outermost two dimensions of X.", "\n", "# Equivalent to convolving an image with a Laplacian blur.", "\n", "  ", "Y", "=", "X", ".", "copy", "(", ")", "\n", "for", "i", "in", "range", "(", "Y", ".", "shape", "[", "-", "1", "]", "-", "1", ")", ":", "\n", "    ", "Y", "[", "...", ",", "i", "+", "1", "]", "+=", "alpha", "*", "Y", "[", "...", ",", "i", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "Y", ".", "shape", "[", "-", "1", "]", "-", "1", ")", "[", ":", ":", "-", "1", "]", ":", "\n", "    ", "Y", "[", "...", ",", "i", "]", "+=", "alpha", "*", "Y", "[", "...", ",", "i", "+", "1", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "Y", ".", "shape", "[", "-", "2", "]", "-", "1", ")", ":", "\n", "    ", "Y", "[", "...", ",", "i", "+", "1", ",", ":", "]", "+=", "alpha", "*", "Y", "[", "...", ",", "i", ",", ":", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "Y", ".", "shape", "[", "-", "2", "]", "-", "1", ")", "[", ":", ":", "-", "1", "]", ":", "\n", "    ", "Y", "[", "...", ",", "i", ",", ":", "]", "+=", "alpha", "*", "Y", "[", "...", ",", "i", "+", "1", ",", ":", "]", "\n", "", "return", "Y", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.filter_utils.bistochastize": [[61, 73], ["grid.splat", "numpy.ones", "range", "scipy.sparse.diags", "scipy.sparse.diags", "numpy.ones", "numpy.sqrt", "grid.blur", "grid.blur"], "function", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.src.filter.BilateralGrid.splat", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.filter_utils.blur", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.filter_utils.blur"], ["", "def", "bistochastize", "(", "grid", ",", "maxiter", "=", "10", ")", ":", "\n", "    ", "\"\"\"Compute diagonal matrices to bistochastize a bilateral grid\"\"\"", "\n", "m", "=", "grid", ".", "splat", "(", "np", ".", "ones", "(", "grid", ".", "npixels", ")", ")", "\n", "n", "=", "np", ".", "ones", "(", "grid", ".", "nvertices", ")", "\n", "for", "i", "in", "range", "(", "maxiter", ")", ":", "\n", "        ", "n", "=", "np", ".", "sqrt", "(", "n", "*", "m", "/", "(", "grid", ".", "blur", "(", "n", ")", "+", "1e-10", ")", ")", "\n", "# Correct m to satisfy the assumption of bistochastization regardless", "\n", "# of how many iterations have been run.", "\n", "", "m", "=", "n", "*", "grid", ".", "blur", "(", "n", ")", "\n", "Dm", "=", "diags", "(", "m", ",", "0", ")", "\n", "Dn", "=", "diags", "(", "n", ",", "0", ")", "\n", "return", "Dn", ",", "Dm", "\n", "", ""]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.depth_priors_utils.compute_depth_loss": [[3, 14], ["zip", "torch.stack().mean", "torch.log", "torch.log", "torch.abs", "loss_list.append", "mask.sum", "torch.stack", "torch.abs.sum", "mask.sum"], "function", ["None"], ["def", "compute_depth_loss", "(", "depth_pred", ",", "depth_gt", ",", "mask_gt", ")", ":", "\n", "    ", "loss_list", "=", "[", "]", "\n", "for", "pred", ",", "gt", ",", "mask", "in", "zip", "(", "depth_pred", ",", "depth_gt", ",", "mask_gt", ")", ":", "\n", "        ", "log_pred", "=", "torch", ".", "log", "(", "pred", "[", "mask", "]", ")", "\n", "log_target", "=", "torch", ".", "log", "(", "gt", "[", "mask", "]", ")", "\n", "alpha", "=", "(", "log_target", "-", "log_pred", ")", ".", "sum", "(", ")", "/", "mask", ".", "sum", "(", ")", "\n", "log_diff", "=", "torch", ".", "abs", "(", "(", "log_pred", "-", "log_target", "+", "alpha", ")", ")", "\n", "d", "=", "0.05", "*", "0.2", "*", "(", "log_diff", ".", "sum", "(", ")", "/", "mask", ".", "sum", "(", ")", ")", "\n", "loss_list", ".", "append", "(", "d", ")", "\n", "\n", "", "return", "torch", ".", "stack", "(", "loss_list", ",", "0", ")", ".", "mean", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.colmap_utils.read_array": [[10, 26], ["np.fromfile.reshape", "numpy.transpose().squeeze", "open", "numpy.genfromtxt", "fid.seek", "fid.read", "numpy.fromfile", "fid.read", "numpy.transpose"], "function", ["None"], ["def", "read_array", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "\"rb\"", ")", "as", "fid", ":", "\n", "        ", "width", ",", "height", ",", "channels", "=", "np", ".", "genfromtxt", "(", "fid", ",", "delimiter", "=", "\"&\"", ",", "max_rows", "=", "1", ",", "\n", "usecols", "=", "(", "0", ",", "1", ",", "2", ")", ",", "dtype", "=", "int", ")", "\n", "fid", ".", "seek", "(", "0", ")", "\n", "num_delimiter", "=", "0", "\n", "byte", "=", "fid", ".", "read", "(", "1", ")", "\n", "while", "True", ":", "\n", "            ", "if", "byte", "==", "b\"&\"", ":", "\n", "                ", "num_delimiter", "+=", "1", "\n", "if", "num_delimiter", ">=", "3", ":", "\n", "                    ", "break", "\n", "", "", "byte", "=", "fid", ".", "read", "(", "1", ")", "\n", "", "array", "=", "np", ".", "fromfile", "(", "fid", ",", "np", ".", "float32", ")", "\n", "", "array", "=", "array", ".", "reshape", "(", "(", "width", ",", "height", ",", "channels", ")", ",", "order", "=", "\"F\"", ")", "\n", "return", "np", ".", "transpose", "(", "array", ",", "(", "1", ",", "0", ",", "2", ")", ")", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.colmap_utils.load_point_vis": [[27, 36], ["open", "print", "range", "struct.unpack", "range", "f.read", "struct.unpack", "struct.unpack", "f.read", "f.read"], "function", ["None"], ["", "def", "load_point_vis", "(", "path", ",", "masks", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "n", "=", "struct", ".", "unpack", "(", "'<Q'", ",", "f", ".", "read", "(", "8", ")", ")", "[", "0", "]", "\n", "print", "(", "'point number: {}'", ".", "format", "(", "n", ")", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "m", "=", "struct", ".", "unpack", "(", "'<I'", ",", "f", ".", "read", "(", "4", ")", ")", "[", "0", "]", "\n", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "                ", "idx", ",", "u", ",", "v", "=", "struct", ".", "unpack", "(", "'<III'", ",", "f", ".", "read", "(", "4", "*", "3", ")", ")", "\n", "masks", "[", "idx", "]", "[", "v", ",", "u", "]", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.colmap_utils.read_ply_mask": [[37, 51], ["os.path.join", "os.path.join", "colmap_read_model.read_images_binary", "os.exists", "colmap_utils.load_point_vis", "os.path.dirname", "os.path.dirname", "os.path.join", "os.path.join", "numpy.zeros", "colmap_read_model.read_images_binary.items", "os.path.dirname", "os.path.dirname", "colmap_utils.read_array", "zip"], "function", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.colmap_read_model.read_images_binary", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.colmap_utils.load_point_vis", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.colmap_utils.read_array"], ["", "", "", "", "def", "read_ply_mask", "(", "path", ")", ":", "\n", "    ", "images_bin_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "path", ")", ",", "'sparse'", ",", "'images.bin'", ")", "\n", "images", "=", "read_images_binary", "(", "images_bin_path", ")", "\n", "names", "=", "[", "dd", "[", "1", "]", ".", "name", "for", "dd", "in", "images", ".", "items", "(", ")", "]", "\n", "shapes", "=", "{", "}", "\n", "for", "name", "in", "names", ":", "\n", "        ", "depth_fname", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "path", ")", ",", "'stereo'", ",", "'depth_maps'", ",", "name", "+", "'.geometric.bin'", ")", "\n", "shapes", "[", "name", "]", "=", "read_array", "(", "depth_fname", ")", ".", "shape", "\n", "\n", "", "ply_vis_path", "=", "path", "+", "'.vis'", "\n", "assert", "osp", ".", "exists", "(", "ply_vis_path", ")", "\n", "masks", "=", "[", "np", ".", "zeros", "(", "shapes", "[", "name", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "for", "name", "in", "names", "]", "\n", "load_point_vis", "(", "ply_vis_path", ",", "masks", ")", "\n", "return", "{", "name", ":", "mask", "for", "name", ",", "mask", "in", "zip", "(", "names", ",", "masks", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.evaluation_utils.compute_errors": [[8, 27], ["numpy.maximum", "numpy.sqrt", "numpy.sqrt", "numpy.mean", "numpy.mean", "np.sqrt.mean", "np.sqrt.mean", "numpy.log", "numpy.log", "numpy.abs"], "function", ["None"], ["def", "compute_errors", "(", "gt", ",", "pred", ")", ":", "\n", "    ", "\"\"\"Computation of error metrics between predicted and ground truth depths\n    \"\"\"", "\n", "thresh", "=", "np", ".", "maximum", "(", "(", "gt", "/", "pred", ")", ",", "(", "pred", "/", "gt", ")", ")", "\n", "a1", "=", "(", "thresh", "<", "1.25", ")", ".", "mean", "(", ")", "\n", "a2", "=", "(", "thresh", "<", "1.25", "**", "2", ")", ".", "mean", "(", ")", "\n", "a3", "=", "(", "thresh", "<", "1.25", "**", "3", ")", ".", "mean", "(", ")", "\n", "\n", "rmse", "=", "(", "gt", "-", "pred", ")", "**", "2", "\n", "rmse", "=", "np", ".", "sqrt", "(", "rmse", ".", "mean", "(", ")", ")", "\n", "\n", "rmse_log", "=", "(", "np", ".", "log", "(", "gt", ")", "-", "np", ".", "log", "(", "pred", ")", ")", "**", "2", "\n", "rmse_log", "=", "np", ".", "sqrt", "(", "rmse_log", ".", "mean", "(", ")", ")", "\n", "\n", "abs_rel", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "gt", "-", "pred", ")", "/", "gt", ")", "\n", "\n", "sq_rel", "=", "np", ".", "mean", "(", "(", "(", "gt", "-", "pred", ")", "**", "2", ")", "/", "gt", ")", "\n", "\n", "return", "abs_rel", ",", "sq_rel", ",", "rmse", ",", "rmse_log", ",", "a1", ",", "a2", ",", "a3", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.evaluation_utils.depth_evaluation": [[29, 80], ["range", "range", "numpy.array().mean", "print", "print", "print", "cv2.resize", "pred_depths_valid.append", "gt_depths_valid.append", "numpy.median", "numpy.median", "len", "errors.append", "mask.sum", "numpy.concatenate", "numpy.concatenate", "evaluation_utils.compute_errors", "numpy.array", "open", "f.writelines", "f.writelines", "cv2.resize", "os.path.join", "pred_mask.astype", "np.array().mean.tolist", "np.array().mean.tolist"], "function", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.evaluation_utils.compute_errors"], ["", "def", "depth_evaluation", "(", "gt_depths", ",", "pred_depths", ",", "savedir", "=", "None", ",", "pred_masks", "=", "None", ",", "min_depth", "=", "0.1", ",", "max_depth", "=", "20", ")", ":", "\n", "    ", "assert", "gt_depths", ".", "shape", "[", "0", "]", "==", "pred_depths", ".", "shape", "[", "0", "]", "\n", "\n", "gt_depths_valid", "=", "[", "]", "\n", "pred_depths_valid", "=", "[", "]", "\n", "errors", "=", "[", "]", "\n", "num", "=", "gt_depths", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "        ", "gt_depth", "=", "gt_depths", "[", "i", "]", "\n", "mask", "=", "(", "gt_depth", ">", "min_depth", ")", "*", "(", "gt_depth", "<", "max_depth", ")", "\n", "gt_height", ",", "gt_width", "=", "gt_depth", ".", "shape", "[", ":", "2", "]", "\n", "\n", "pred_depth", "=", "cv2", ".", "resize", "(", "pred_depths", "[", "i", "]", ",", "(", "gt_width", ",", "gt_height", ")", ")", "\n", "\n", "if", "pred_masks", "is", "not", "None", ":", "\n", "            ", "pred_mask", "=", "pred_masks", "[", "i", "]", "\n", "pred_mask", "=", "cv2", ".", "resize", "(", "pred_mask", ".", "astype", "(", "np", ".", "uint8", ")", ",", "(", "gt_width", ",", "gt_height", ")", ")", ">", "0.5", "\n", "mask", "=", "mask", "*", "pred_mask", "\n", "\n", "", "if", "mask", ".", "sum", "(", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "\n", "", "pred_depth", "=", "pred_depth", "[", "mask", "]", "\n", "gt_depth", "=", "gt_depth", "[", "mask", "]", "\n", "\n", "pred_depths_valid", ".", "append", "(", "pred_depth", ")", "\n", "gt_depths_valid", ".", "append", "(", "gt_depth", ")", "\n", "\n", "", "ratio", "=", "np", ".", "median", "(", "np", ".", "concatenate", "(", "gt_depths_valid", ")", ")", "/", "np", ".", "median", "(", "np", ".", "concatenate", "(", "pred_depths_valid", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "pred_depths_valid", ")", ")", ":", "\n", "        ", "gt_depth", "=", "gt_depths_valid", "[", "i", "]", "\n", "pred_depth", "=", "pred_depths_valid", "[", "i", "]", "\n", "\n", "pred_depth", "*=", "ratio", "\n", "pred_depth", "[", "pred_depth", "<", "min_depth", "]", "=", "min_depth", "\n", "pred_depth", "[", "pred_depth", ">", "max_depth", "]", "=", "max_depth", "\n", "\n", "errors", ".", "append", "(", "compute_errors", "(", "gt_depth", ",", "pred_depth", ")", ")", "\n", "\n", "", "mean_errors", "=", "np", ".", "array", "(", "errors", ")", ".", "mean", "(", "0", ")", "\n", "\n", "print", "(", "\"\\n  \"", "+", "(", "\"{:>8} | \"", "*", "7", ")", ".", "format", "(", "\"abs_rel\"", ",", "\"sq_rel\"", ",", "\"rmse\"", ",", "\"rmse_log\"", ",", "\"a1\"", ",", "\"a2\"", ",", "\"a3\"", ")", ")", "\n", "print", "(", "(", "\"&{: 8.3f}  \"", "*", "7", ")", ".", "format", "(", "*", "mean_errors", ".", "tolist", "(", ")", ")", "+", "\"\\\\\\\\\"", ")", "\n", "print", "(", "\"\\n-> Done!\"", ")", "\n", "\n", "if", "savedir", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "savedir", ",", "'depth_evaluation.txt'", ")", ",", "'a'", ")", "as", "f", ":", "\n", "            ", "f", ".", "writelines", "(", "(", "\"{:>8} | \"", "*", "7", ")", ".", "format", "(", "\"abs_rel\"", ",", "\"sq_rel\"", ",", "\"rmse\"", ",", "\"rmse_log\"", ",", "\"a1\"", ",", "\"a2\"", ",", "\"a3\"", ")", "+", "'\\n'", ")", "\n", "f", ".", "writelines", "(", "(", "\"&{: 8.3f}  \"", "*", "7", ")", ".", "format", "(", "*", "mean_errors", ".", "tolist", "(", ")", ")", "+", "\"\\\\\\\\\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.evaluation_utils.rgb_evaluation": [[81, 109], ["gts.astype.astype", "predicts.astype.astype", "print", "lpips.LPIPS", "torch.from_numpy().type().cuda", "torch.from_numpy().type().cuda", "range", "numpy.concatenate().mean", "range", "numpy.array().mean", "gts.astype.max", "int", "lpips.LPIPS.", "lpips_list.append", "ssim_list.append", "open", "f.writelines", "print", "torch.from_numpy().type", "torch.from_numpy().type", "numpy.ceil", "lpips_metric.cpu().numpy", "numpy.concatenate", "skimage.measure.compare_ssim", "numpy.array", "os.path.join", "numpy.log10", "torch.from_numpy", "torch.from_numpy", "lpips_metric.cpu"], "function", ["None"], ["", "", "", "def", "rgb_evaluation", "(", "gts", ",", "predicts", ",", "savedir", ")", ":", "\n", "    ", "assert", "gts", ".", "max", "(", ")", "<=", "1", "\n", "gts", "=", "gts", ".", "astype", "(", "np", ".", "float32", ")", "\n", "predicts", "=", "predicts", ".", "astype", "(", "np", ".", "float32", ")", "\n", "ssim_list", "=", "[", "]", "\n", "lpips_list", "=", "[", "]", "\n", "mse", "=", "(", "(", "gts", "-", "predicts", ")", "**", "2", ")", ".", "mean", "(", "-", "1", ")", ".", "mean", "(", "-", "1", ")", ".", "mean", "(", "-", "1", ")", "\n", "print", "(", "mse", ".", "shape", ")", "\n", "psnr", "=", "(", "-", "10", "*", "np", ".", "log10", "(", "mse", ")", ")", ".", "mean", "(", ")", "\n", "lpips_metric", "=", "lpips", ".", "LPIPS", "(", "net", "=", "'alex'", ",", "version", "=", "'0.1'", ")", "\n", "gts_torch", "=", "torch", ".", "from_numpy", "(", "(", "2", "*", "gts", "-", "1", ")", ".", "transpose", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "cuda", "(", ")", "\n", "predicts_torch", "=", "torch", ".", "from_numpy", "(", "(", "2", "*", "predicts", "-", "1", ")", ".", "transpose", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "cuda", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "int", "(", "np", ".", "ceil", "(", "gts_torch", ".", "shape", "[", "0", "]", "/", "10.0", ")", ")", ")", ":", "\n", "        ", "temp", "=", "lpips_metric", "(", "gts_torch", "[", "i", "*", "10", ":", "(", "i", "+", "1", ")", "*", "10", "]", ",", "predicts_torch", "[", "i", "*", "10", ":", "(", "i", "+", "1", ")", "*", "10", "]", ")", "\n", "lpips_list", ".", "append", "(", "temp", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "lpips_", "=", "np", ".", "concatenate", "(", "lpips_list", ",", "0", ")", ".", "mean", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "gts", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "gt", "=", "gts", "[", "i", "]", "\n", "predict", "=", "predicts", "[", "i", "]", "\n", "ssim_list", ".", "append", "(", "skimage", ".", "measure", ".", "compare_ssim", "(", "gt", ",", "predict", ",", "multichannel", "=", "True", ")", ")", "\n", "", "ssim", "=", "np", ".", "array", "(", "ssim_list", ")", ".", "mean", "(", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "savedir", ",", "'rgb_evaluation.txt'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "result", "=", "'psnr: {0}, ssim: {1}, lpips: {2}'", ".", "format", "(", "psnr", ",", "ssim", ",", "lpips_", ")", "\n", "f", ".", "writelines", "(", "result", ")", "\n", "print", "(", "result", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.io_utils.load_img_list": [[11, 21], ["open", "f.readlines", "os.path.join", "line.strip", "open", "f.readlines", "os.path.join", "line.strip"], "function", ["None"], ["def", "load_img_list", "(", "datadir", ",", "load_test", "=", "False", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "datadir", ",", "'train.txt'", ")", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "image_list", "=", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "lines", "]", "\n", "\n", "", "if", "load_test", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "datadir", ",", "'test.txt'", ")", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "image_list", "+=", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "lines", "]", "\n", "", "", "return", "image_list", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.io_utils.load_colmap": [[22, 40], ["os.path.join", "colmap_utils.read_ply_mask", "os.path.join", "colmap_utils.read_array", "depths.append", "masks.append", "numpy.stack", "numpy.stack", "cv2.resize", "cv2.resize"], "function", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.colmap_utils.read_ply_mask", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.colmap_utils.read_array"], ["", "def", "load_colmap", "(", "image_list", ",", "datadir", ",", "H", "=", "None", ",", "W", "=", "None", ")", ":", "\n", "    ", "depths", "=", "[", "]", "\n", "masks", "=", "[", "]", "\n", "\n", "ply_path", "=", "os", ".", "path", ".", "join", "(", "datadir", ",", "'dense'", ",", "'fused.ply'", ")", "\n", "ply_masks", "=", "read_ply_mask", "(", "ply_path", ")", "\n", "\n", "for", "image_name", "in", "image_list", ":", "\n", "        ", "depth_path", "=", "os", ".", "path", ".", "join", "(", "datadir", ",", "'dense/stereo/depth_maps'", ",", "image_name", "+", "'.geometric.bin'", ")", "\n", "depth", "=", "read_array", "(", "depth_path", ")", "\n", "mask", "=", "ply_masks", "[", "image_name", "]", "\n", "if", "H", "is", "not", "None", ":", "\n", "            ", "depth_resize", "=", "cv2", ".", "resize", "(", "depth", ",", "(", "W", ",", "H", ")", ")", "\n", "mask_resize", "=", "cv2", ".", "resize", "(", "mask", ",", "(", "W", ",", "H", ")", ")", "\n", "", "depths", ".", "append", "(", "depth_resize", ")", "\n", "masks", ".", "append", "(", "mask_resize", ">", "0.5", ")", "\n", "\n", "", "return", "np", ".", "stack", "(", "depths", ")", ",", "np", ".", "stack", "(", "masks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.io_utils.load_gt_depths": [[41, 62], ["os.path.join", "cv2.imread", "numpy.stack", "numpy.stack", "image_name.split", "cv2.imread.astype", "cv2.resize", "cv2.resize", "depths.append", "masks.append", "depths.append", "masks.append"], "function", ["None"], ["", "def", "load_gt_depths", "(", "image_list", ",", "datadir", ",", "H", "=", "None", ",", "W", "=", "None", ")", ":", "\n", "    ", "depths", "=", "[", "]", "\n", "masks", "=", "[", "]", "\n", "\n", "for", "image_name", "in", "image_list", ":", "\n", "        ", "frame_id", "=", "image_name", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "depth_path", "=", "os", ".", "path", ".", "join", "(", "datadir", ",", "'depth'", ",", "'{}.png'", ".", "format", "(", "frame_id", ")", ")", "\n", "depth", "=", "cv2", ".", "imread", "(", "depth_path", ",", "cv2", ".", "IMREAD_UNCHANGED", ")", "\n", "depth", "=", "depth", ".", "astype", "(", "np", ".", "float32", ")", "/", "1000", "\n", "\n", "if", "H", "is", "not", "None", ":", "\n", "            ", "mask", "=", "(", "depth", ">", "0", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "depth_resize", "=", "cv2", ".", "resize", "(", "depth", ",", "(", "W", ",", "H", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "mask_resize", "=", "cv2", ".", "resize", "(", "mask", ",", "(", "W", ",", "H", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "depths", ".", "append", "(", "depth_resize", ")", "\n", "masks", ".", "append", "(", "mask_resize", ">", "0.5", ")", "\n", "", "else", ":", "\n", "            ", "depths", ".", "append", "(", "depth", ")", "\n", "masks", ".", "append", "(", "depth", ">", "0", ")", "\n", "\n", "", "", "return", "np", ".", "stack", "(", "depths", ")", ",", "np", ".", "stack", "(", "masks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.io_utils.load_depths": [[63, 80], ["numpy.stack", "os.path.join", "numpy.load", "image_name.split", "os.path.exists", "os.path.join", "cv2.resize", "depths.append", "depths.append"], "function", ["None"], ["", "def", "load_depths", "(", "image_list", ",", "datadir", ",", "H", "=", "None", ",", "W", "=", "None", ")", ":", "\n", "    ", "depths", "=", "[", "]", "\n", "\n", "for", "image_name", "in", "image_list", ":", "\n", "        ", "frame_id", "=", "image_name", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "depth_path", "=", "os", ".", "path", ".", "join", "(", "datadir", ",", "'{}_depth.npy'", ".", "format", "(", "frame_id", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "depth_path", ")", ":", "\n", "            ", "depth_path", "=", "os", ".", "path", ".", "join", "(", "datadir", ",", "'{}.npy'", ".", "format", "(", "frame_id", ")", ")", "\n", "", "depth", "=", "np", ".", "load", "(", "depth_path", ")", "\n", "\n", "if", "H", "is", "not", "None", ":", "\n", "            ", "depth_resize", "=", "cv2", ".", "resize", "(", "depth", ",", "(", "W", ",", "H", ")", ")", "\n", "depths", ".", "append", "(", "depth_resize", ")", "\n", "", "else", ":", "\n", "            ", "depths", ".", "append", "(", "depth", ")", "\n", "\n", "", "", "return", "np", ".", "stack", "(", "depths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.io_utils.pil_loader": [[81, 88], ["open", "Image.open", "img.convert"], "function", ["None"], ["", "def", "pil_loader", "(", "path", ")", ":", "\n", "    ", "from", "PIL", "import", "Image", "\n", "# open path as file to avoid ResourceWarning", "\n", "# (https://github.com/python-pillow/Pillow/issues/835)", "\n", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "with", "Image", ".", "open", "(", "f", ")", "as", "img", ":", "\n", "            ", "return", "img", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.io_utils.load_rgbs": [[89, 106], ["torchvision.transforms.ToTensor", "torchvision.transforms.Resize", "torch.stack", "os.path.join", "io_utils.pil_loader", "rgbs.append", "image_name.replace.replace", "transforms.Resize.", "transforms.ToTensor."], "function", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.io_utils.pil_loader"], ["", "", "", "def", "load_rgbs", "(", "image_list", ",", "datadir", ",", "H", "=", "None", ",", "W", "=", "None", ",", "is_png", "=", "False", ")", ":", "\n", "    ", "from", "PIL", "import", "Image", "\n", "to_tensor", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "resize", "=", "transforms", ".", "Resize", "(", "(", "H", ",", "W", ")", ",", "interpolation", "=", "Image", ".", "ANTIALIAS", ")", "\n", "rgbs", "=", "[", "]", "\n", "\n", "for", "image_name", "in", "image_list", ":", "\n", "        ", "if", "is_png", ":", "\n", "            ", "image_name", "=", "image_name", ".", "replace", "(", "'.jpg'", ",", "'.png'", ")", "\n", "", "rgb_path", "=", "os", ".", "path", ".", "join", "(", "datadir", ",", "image_name", ")", "\n", "rgb", "=", "pil_loader", "(", "rgb_path", ")", "\n", "if", "H", "is", "not", "None", ":", "\n", "            ", "rgb", "=", "resize", "(", "rgb", ")", "\n", "\n", "", "rgbs", ".", "append", "(", "to_tensor", "(", "rgb", ")", ")", "\n", "\n", "", "return", "torch", ".", "stack", "(", "rgbs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.io_utils.load_rgbs_np": [[107, 128], ["numpy.stack", "os.path.join", "rgbs.append", "image_name.replace.replace", "cv2.imread", "cv2.resize", "resize", "imageio.imread"], "function", ["None"], ["", "def", "load_rgbs_np", "(", "image_list", ",", "datadir", ",", "H", "=", "None", ",", "W", "=", "None", ",", "is_png", "=", "False", ",", "use_cv2", "=", "True", ")", ":", "\n", "    ", "rgbs", "=", "[", "]", "\n", "\n", "for", "image_name", "in", "image_list", ":", "\n", "        ", "if", "is_png", ":", "\n", "            ", "image_name", "=", "image_name", ".", "replace", "(", "'.jpg'", ",", "'.png'", ")", "\n", "", "rgb_path", "=", "os", ".", "path", ".", "join", "(", "datadir", ",", "image_name", ")", "\n", "if", "use_cv2", ":", "\n", "            ", "rgb", "=", "cv2", ".", "imread", "(", "rgb_path", ")", "\n", "", "else", ":", "\n", "            ", "rgb", "=", "imageio", ".", "imread", "(", "rgb_path", ")", "[", "...", ",", ":", "3", "]", "/", "255.0", "\n", "\n", "", "if", "H", "is", "not", "None", ":", "\n", "            ", "if", "use_cv2", ":", "\n", "                ", "rgb", "=", "cv2", ".", "resize", "(", "rgb", ",", "(", "W", ",", "H", ")", ")", "\n", "", "else", ":", "\n", "                ", "rgb", "=", "resize", "(", "rgb", ",", "(", "W", ",", "H", ")", ")", "\n", "\n", "", "", "rgbs", ".", "append", "(", "rgb", ")", "\n", "\n", "", "return", "np", ".", "stack", "(", "rgbs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.io_utils.visualize_depth": [[129, 153], ["numpy.logical_or", "numpy.uint8", "cv2.applyColorMap", "numpy.isnan", "numpy.logical_not", "numpy.logical_not", "numpy.percentile", "numpy.percentile", "numpy.isfinite", "numpy.logical_not", "numpy.logical_not"], "function", ["None"], ["", "def", "visualize_depth", "(", "depth", ",", "mask", "=", "None", ",", "depth_min", "=", "None", ",", "depth_max", "=", "None", ",", "direct", "=", "False", ")", ":", "\n", "    ", "\"\"\"Visualize the depth map with colormap.\n       Rescales the values so that depth_min and depth_max map to 0 and 1,\n       respectively.\n    \"\"\"", "\n", "if", "not", "direct", ":", "\n", "        ", "depth", "=", "1.0", "/", "(", "depth", "+", "1e-6", ")", "\n", "", "invalid_mask", "=", "np", ".", "logical_or", "(", "np", ".", "isnan", "(", "depth", ")", ",", "np", ".", "logical_not", "(", "np", ".", "isfinite", "(", "depth", ")", ")", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "        ", "invalid_mask", "+=", "np", ".", "logical_not", "(", "mask", ")", "\n", "", "if", "depth_min", "is", "None", ":", "\n", "        ", "depth_min", "=", "np", ".", "percentile", "(", "depth", "[", "np", ".", "logical_not", "(", "invalid_mask", ")", "]", ",", "5", ")", "\n", "", "if", "depth_max", "is", "None", ":", "\n", "        ", "depth_max", "=", "np", ".", "percentile", "(", "depth", "[", "np", ".", "logical_not", "(", "invalid_mask", ")", "]", ",", "95", ")", "\n", "", "depth", "[", "depth", "<", "depth_min", "]", "=", "depth_min", "\n", "depth", "[", "depth", ">", "depth_max", "]", "=", "depth_max", "\n", "depth", "[", "invalid_mask", "]", "=", "depth_max", "\n", "\n", "depth_scaled", "=", "(", "depth", "-", "depth_min", ")", "/", "(", "depth_max", "-", "depth_min", ")", "\n", "depth_scaled_uint8", "=", "np", ".", "uint8", "(", "depth_scaled", "*", "255", ")", "\n", "depth_color", "=", "cv2", ".", "applyColorMap", "(", "depth_scaled_uint8", ",", "cv2", ".", "COLORMAP_MAGMA", ")", "\n", "depth_color", "[", "invalid_mask", ",", ":", "]", "=", "0", "\n", "\n", "return", "depth_color", "", "", ""]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.pose_utils.load_colmap_data": [[11, 70], ["os.path.join", "utils.read_cameras_binary", "list", "print", "numpy.array().reshape", "os.path.join", "utils.read_images_binary", "numpy.array().reshape", "print", "os.path.exists", "numpy.stack", "numpy.linalg.inv", "c2w_mats[].transpose", "numpy.concatenate", "os.path.join", "utils.read_points3d_binary", "numpy.concatenate", "read_model.read_cameras_binary.keys", "len", "len", "open", "f.readlines", "os.path.join", "len", "len", "print", "exit", "im.qvec2rotmat", "im.tvec.reshape", "numpy.concatenate", "np.stack.append", "numpy.array", "numpy.array", "os.path.join", "range", "open", "f.readlines", "numpy.tile", "len", "os.path.join", "range", "numpy.concatenate", "line.strip", "perm.append", "len", "line.strip", "perm.append"], "function", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.colmap_read_model.read_cameras_binary", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.colmap_read_model.read_images_binary", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.colmap_read_model.read_points3d_binary", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.colmap_read_model.qvec2rotmat"], ["def", "load_colmap_data", "(", "realdir", ")", ":", "\n", "\n", "    ", "camerasfile", "=", "os", ".", "path", ".", "join", "(", "realdir", ",", "'sparse/0/cameras.bin'", ")", "\n", "camdata", "=", "read_model", ".", "read_cameras_binary", "(", "camerasfile", ")", "\n", "\n", "# cam = camdata[camdata.keys()[0]]", "\n", "list_of_keys", "=", "list", "(", "camdata", ".", "keys", "(", ")", ")", "\n", "cam", "=", "camdata", "[", "list_of_keys", "[", "0", "]", "]", "\n", "print", "(", "'Cameras'", ",", "len", "(", "cam", ")", ")", "\n", "\n", "h", ",", "w", ",", "f", "=", "cam", ".", "height", ",", "cam", ".", "width", ",", "cam", ".", "params", "[", "0", "]", "\n", "# w, h, f = factor * w, factor * h, factor * f", "\n", "hwf", "=", "np", ".", "array", "(", "[", "h", ",", "w", ",", "f", "]", ")", ".", "reshape", "(", "[", "3", ",", "1", "]", ")", "\n", "\n", "imagesfile", "=", "os", ".", "path", ".", "join", "(", "realdir", ",", "'sparse/0/images.bin'", ")", "\n", "imdata", "=", "read_model", ".", "read_images_binary", "(", "imagesfile", ")", "\n", "\n", "w2c_mats", "=", "[", "]", "\n", "bottom", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", ",", "1.", "]", ")", ".", "reshape", "(", "[", "1", ",", "4", "]", ")", "\n", "\n", "names", "=", "[", "imdata", "[", "k", "]", ".", "name", "for", "k", "in", "imdata", "]", "\n", "print", "(", "'Images #'", ",", "len", "(", "names", ")", ")", "\n", "perm", "=", "[", "]", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "realdir", ",", "'train.txt'", ")", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "names", ")", ")", ":", "\n", "                ", "if", "names", "[", "i", "]", "==", "line", ".", "strip", "(", ")", ":", "\n", "                    ", "perm", ".", "append", "(", "i", ")", "\n", "", "", "", "", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "realdir", ",", "'test.txt'", ")", ")", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "realdir", ",", "'test.txt'", ")", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "                ", "for", "i", "in", "range", "(", "len", "(", "names", ")", ")", ":", "\n", "                    ", "if", "names", "[", "i", "]", "==", "line", ".", "strip", "(", ")", ":", "\n", "                        ", "perm", ".", "append", "(", "i", ")", "\n", "", "", "", "", "", "if", "len", "(", "names", ")", "!=", "len", "(", "perm", ")", ":", "\n", "        ", "print", "(", "'COLMAP fails for some images!'", ")", "\n", "exit", "(", ")", "\n", "", "for", "k", "in", "imdata", ":", "\n", "        ", "im", "=", "imdata", "[", "k", "]", "\n", "R", "=", "im", ".", "qvec2rotmat", "(", ")", "\n", "t", "=", "im", ".", "tvec", ".", "reshape", "(", "[", "3", ",", "1", "]", ")", "\n", "m", "=", "np", ".", "concatenate", "(", "[", "np", ".", "concatenate", "(", "[", "R", ",", "t", "]", ",", "1", ")", ",", "bottom", "]", ",", "0", ")", "\n", "w2c_mats", ".", "append", "(", "m", ")", "\n", "\n", "", "w2c_mats", "=", "np", ".", "stack", "(", "w2c_mats", ",", "0", ")", "\n", "c2w_mats", "=", "np", ".", "linalg", ".", "inv", "(", "w2c_mats", ")", "\n", "\n", "poses", "=", "c2w_mats", "[", ":", ",", ":", "3", ",", ":", "4", "]", ".", "transpose", "(", "[", "1", ",", "2", ",", "0", "]", ")", "\n", "poses", "=", "np", ".", "concatenate", "(", "[", "poses", ",", "np", ".", "tile", "(", "hwf", "[", "...", ",", "np", ".", "newaxis", "]", ",", "[", "1", ",", "1", ",", "poses", ".", "shape", "[", "-", "1", "]", "]", ")", "]", ",", "1", ")", "\n", "\n", "points3dfile", "=", "os", ".", "path", ".", "join", "(", "realdir", ",", "'sparse/0/points3D.bin'", ")", "\n", "pts3d", "=", "read_model", ".", "read_points3d_binary", "(", "points3dfile", ")", "\n", "\n", "# must switch to [-u, r, -t] from [r, -u, t], NOT [r, u, -t]", "\n", "poses", "=", "np", ".", "concatenate", "(", "[", "poses", "[", ":", ",", "1", ":", "2", ",", ":", "]", ",", "poses", "[", ":", ",", "0", ":", "1", ",", ":", "]", ",", "-", "poses", "[", ":", ",", "2", ":", "3", ",", ":", "]", ",", "poses", "[", ":", ",", "3", ":", "4", ",", ":", "]", ",", "poses", "[", ":", ",", "4", ":", "5", ",", ":", "]", "]", ",", "1", ")", "\n", "\n", "return", "poses", ",", "pts3d", ",", "perm", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.pose_utils.save_poses": [[72, 105], ["numpy.array", "numpy.array", "print", "numpy.sum", "print", "numpy.array", "numpy.save", "np.array.append", "np.array.append", "valid_z.min", "valid_z.max", "valid_z.mean", "np.array.append", "os.path.join", "numpy.percentile", "numpy.percentile", "numpy.concatenate", "len", "print", "pts_arr[].transpose", "poses[].ravel", "numpy.array"], "function", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.pix2pix_model.Pix2PixModel.save"], ["", "def", "save_poses", "(", "basedir", ",", "poses", ",", "pts3d", ",", "perm", ")", ":", "\n", "    ", "pts_arr", "=", "[", "]", "\n", "vis_arr", "=", "[", "]", "\n", "for", "k", "in", "pts3d", ":", "\n", "        ", "pts_arr", ".", "append", "(", "pts3d", "[", "k", "]", ".", "xyz", ")", "\n", "cams", "=", "[", "0", "]", "*", "poses", ".", "shape", "[", "-", "1", "]", "\n", "for", "ind", "in", "pts3d", "[", "k", "]", ".", "image_ids", ":", "\n", "            ", "if", "len", "(", "cams", ")", "<", "ind", "-", "1", ":", "\n", "                ", "print", "(", "'ERROR: the correct camera poses for current points cannot be accessed'", ")", "\n", "return", "\n", "", "cams", "[", "ind", "-", "1", "]", "=", "1", "\n", "", "vis_arr", ".", "append", "(", "cams", ")", "\n", "\n", "", "pts_arr", "=", "np", ".", "array", "(", "pts_arr", ")", "\n", "vis_arr", "=", "np", ".", "array", "(", "vis_arr", ")", "\n", "print", "(", "'Points'", ",", "pts_arr", ".", "shape", ",", "'Visibility'", ",", "vis_arr", ".", "shape", ")", "\n", "\n", "zvals", "=", "np", ".", "sum", "(", "-", "(", "pts_arr", "[", ":", ",", "np", ".", "newaxis", ",", ":", "]", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", "-", "poses", "[", ":", "3", ",", "3", ":", "4", ",", ":", "]", ")", "*", "poses", "[", ":", "3", ",", "2", ":", "3", ",", ":", "]", ",", "0", ")", "\n", "valid_z", "=", "zvals", "[", "vis_arr", "==", "1", "]", "\n", "print", "(", "'Depth stats'", ",", "valid_z", ".", "min", "(", ")", ",", "valid_z", ".", "max", "(", ")", ",", "valid_z", ".", "mean", "(", ")", ")", "\n", "\n", "save_arr", "=", "[", "]", "\n", "for", "i", "in", "perm", ":", "\n", "        ", "vis", "=", "vis_arr", "[", ":", ",", "i", "]", "\n", "zs", "=", "zvals", "[", ":", ",", "i", "]", "\n", "zs", "=", "zs", "[", "vis", "==", "1", "]", "\n", "close_depth", ",", "inf_depth", "=", "np", ".", "percentile", "(", "zs", ",", ".1", ")", ",", "np", ".", "percentile", "(", "zs", ",", "99.9", ")", "\n", "# print( i, close_depth, inf_depth )", "\n", "\n", "save_arr", ".", "append", "(", "np", ".", "concatenate", "(", "[", "poses", "[", "...", ",", "i", "]", ".", "ravel", "(", ")", ",", "np", ".", "array", "(", "[", "close_depth", ",", "inf_depth", "]", ")", "]", ",", "0", ")", ")", "\n", "", "save_arr", "=", "np", ".", "array", "(", "save_arr", ")", "\n", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "basedir", ",", "'poses_bounds.npy'", ")", ",", "save_arr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.pose_utils.minify_v0": [[109, 154], ["os.path.join", "numpy.stack", "os.path.join", "os.path.join", "list", "numpy.reshape", "numpy.mean", "os.path.join", "isinstance", "os.path.join", "os.path.exists", "print", "isinstance", "os.makedirs", "range", "os.path.exists", "os.path.exists", "sorted", "any", "pose_utils.minify_v0.downsample"], "function", ["None"], ["", "def", "minify_v0", "(", "basedir", ",", "factors", "=", "[", "]", ",", "resolutions", "=", "[", "]", ")", ":", "\n", "    ", "needtoload", "=", "False", "\n", "for", "r", "in", "factors", ":", "\n", "        ", "imgdir", "=", "os", ".", "path", ".", "join", "(", "basedir", ",", "'images_{}'", ".", "format", "(", "r", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "imgdir", ")", ":", "\n", "            ", "needtoload", "=", "True", "\n", "", "", "for", "r", "in", "resolutions", ":", "\n", "        ", "imgdir", "=", "os", ".", "path", ".", "join", "(", "basedir", ",", "'images_{}x{}'", ".", "format", "(", "r", "[", "1", "]", ",", "r", "[", "0", "]", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "imgdir", ")", ":", "\n", "            ", "needtoload", "=", "True", "\n", "", "", "if", "not", "needtoload", ":", "\n", "        ", "return", "\n", "\n", "", "def", "downsample", "(", "imgs", ",", "f", ")", ":", "\n", "        ", "sh", "=", "list", "(", "imgs", ".", "shape", ")", "\n", "sh", "=", "sh", "[", ":", "-", "3", "]", "+", "[", "sh", "[", "-", "3", "]", "//", "f", ",", "f", ",", "sh", "[", "-", "2", "]", "//", "f", ",", "f", ",", "sh", "[", "-", "1", "]", "]", "\n", "imgs", "=", "np", ".", "reshape", "(", "imgs", ",", "sh", ")", "\n", "imgs", "=", "np", ".", "mean", "(", "imgs", ",", "(", "-", "2", ",", "-", "4", ")", ")", "\n", "return", "imgs", "\n", "\n", "", "imgdir", "=", "os", ".", "path", ".", "join", "(", "basedir", ",", "'images'", ")", "\n", "imgs", "=", "[", "os", ".", "path", ".", "join", "(", "imgdir", ",", "f", ")", "for", "f", "in", "sorted", "(", "os", ".", "listdir", "(", "imgdir", ")", ")", "]", "\n", "imgs", "=", "[", "f", "for", "f", "in", "imgs", "if", "any", "(", "[", "f", ".", "endswith", "(", "ex", ")", "for", "ex", "in", "[", "'JPG'", ",", "'jpg'", ",", "'png'", ",", "'jpeg'", ",", "'PNG'", "]", "]", ")", "]", "\n", "imgs", "=", "np", ".", "stack", "(", "[", "imageio", ".", "imread", "(", "img", ")", "/", "255.", "for", "img", "in", "imgs", "]", ",", "0", ")", "\n", "\n", "for", "r", "in", "factors", "+", "resolutions", ":", "\n", "        ", "if", "isinstance", "(", "r", ",", "int", ")", ":", "\n", "            ", "name", "=", "'images_{}'", ".", "format", "(", "r", ")", "\n", "", "else", ":", "\n", "            ", "name", "=", "'images_{}x{}'", ".", "format", "(", "r", "[", "1", "]", ",", "r", "[", "0", "]", ")", "\n", "", "imgdir", "=", "os", ".", "path", ".", "join", "(", "basedir", ",", "name", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "imgdir", ")", ":", "\n", "            ", "continue", "\n", "", "print", "(", "'Minifying'", ",", "r", ",", "basedir", ")", "\n", "\n", "if", "isinstance", "(", "r", ",", "int", ")", ":", "\n", "            ", "imgs_down", "=", "downsample", "(", "imgs", ",", "r", ")", "\n", "", "else", ":", "\n", "            ", "imgs_down", "=", "skimage", ".", "transform", ".", "resize", "(", "imgs", ",", "[", "imgs", ".", "shape", "[", "0", "]", ",", "r", "[", "0", "]", ",", "r", "[", "1", "]", ",", "imgs", ".", "shape", "[", "-", "1", "]", "]", ",", "\n", "order", "=", "1", ",", "mode", "=", "'constant'", ",", "cval", "=", "0", ",", "clip", "=", "True", ",", "preserve_range", "=", "False", ",", "\n", "anti_aliasing", "=", "True", ",", "anti_aliasing_sigma", "=", "None", ")", "\n", "\n", "", "os", ".", "makedirs", "(", "imgdir", ")", "\n", "for", "i", "in", "range", "(", "imgs_down", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "imageio", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "imgdir", ",", "'image{:03d}.png'", ".", "format", "(", "i", ")", ")", ",", "(", "255", "*", "imgs_down", "[", "i", "]", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.pose_utils.minify": [[158, 208], ["os.path.join", "os.getcwd", "os.path.join", "os.path.join", "os.path.join", "isinstance", "os.path.join", "os.path.exists", "print", "os.makedirs", "check_output", "print", "os.chdir", "check_output", "os.chdir", "print", "os.path.exists", "os.path.exists", "sorted", "any", "imgs[].split", "check_output", "print", "os.listdir", "int", "f.endswith"], "function", ["None"], ["", "", "", "def", "minify", "(", "basedir", ",", "factors", "=", "[", "]", ",", "resolutions", "=", "[", "]", ")", ":", "\n", "    ", "needtoload", "=", "False", "\n", "for", "r", "in", "factors", ":", "\n", "        ", "imgdir", "=", "os", ".", "path", ".", "join", "(", "basedir", ",", "'images_{}'", ".", "format", "(", "r", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "imgdir", ")", ":", "\n", "            ", "needtoload", "=", "True", "\n", "", "", "for", "r", "in", "resolutions", ":", "\n", "        ", "imgdir", "=", "os", ".", "path", ".", "join", "(", "basedir", ",", "'images_{}x{}'", ".", "format", "(", "r", "[", "1", "]", ",", "r", "[", "0", "]", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "imgdir", ")", ":", "\n", "            ", "needtoload", "=", "True", "\n", "", "", "if", "not", "needtoload", ":", "\n", "        ", "return", "\n", "\n", "", "from", "shutil", "import", "copy", "\n", "from", "subprocess", "import", "check_output", "\n", "\n", "imgdir", "=", "os", ".", "path", ".", "join", "(", "basedir", ",", "'images'", ")", "\n", "imgs", "=", "[", "os", ".", "path", ".", "join", "(", "imgdir", ",", "f", ")", "for", "f", "in", "sorted", "(", "os", ".", "listdir", "(", "imgdir", ")", ")", "]", "\n", "imgs", "=", "[", "f", "for", "f", "in", "imgs", "if", "any", "(", "[", "f", ".", "endswith", "(", "ex", ")", "for", "ex", "in", "[", "'JPG'", ",", "'jpg'", ",", "'png'", ",", "'jpeg'", ",", "'PNG'", "]", "]", ")", "]", "\n", "imgdir_orig", "=", "imgdir", "\n", "\n", "wd", "=", "os", ".", "getcwd", "(", ")", "\n", "\n", "for", "r", "in", "factors", "+", "resolutions", ":", "\n", "        ", "if", "isinstance", "(", "r", ",", "int", ")", ":", "\n", "            ", "name", "=", "'images_{}'", ".", "format", "(", "r", ")", "\n", "resizearg", "=", "'{}%'", ".", "format", "(", "int", "(", "100.", "/", "r", ")", ")", "\n", "", "else", ":", "\n", "            ", "name", "=", "'images_{}x{}'", ".", "format", "(", "r", "[", "1", "]", ",", "r", "[", "0", "]", ")", "\n", "resizearg", "=", "'{}x{}'", ".", "format", "(", "r", "[", "1", "]", ",", "r", "[", "0", "]", ")", "\n", "", "imgdir", "=", "os", ".", "path", ".", "join", "(", "basedir", ",", "name", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "imgdir", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "print", "(", "'Minifying'", ",", "r", ",", "basedir", ")", "\n", "\n", "os", ".", "makedirs", "(", "imgdir", ")", "\n", "check_output", "(", "'cp {}/* {}'", ".", "format", "(", "imgdir_orig", ",", "imgdir", ")", ",", "shell", "=", "True", ")", "\n", "\n", "ext", "=", "imgs", "[", "0", "]", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "\n", "args", "=", "' '", ".", "join", "(", "[", "'mogrify'", ",", "'-resize'", ",", "resizearg", ",", "'-format'", ",", "'png'", ",", "'*.{}'", ".", "format", "(", "ext", ")", "]", ")", "\n", "print", "(", "args", ")", "\n", "os", ".", "chdir", "(", "imgdir", ")", "\n", "check_output", "(", "args", ",", "shell", "=", "True", ")", "\n", "os", ".", "chdir", "(", "wd", ")", "\n", "\n", "if", "ext", "!=", "'png'", ":", "\n", "            ", "check_output", "(", "'rm {}/*.{}'", ".", "format", "(", "imgdir", ",", "ext", ")", ",", "shell", "=", "True", ")", "\n", "print", "(", "'Removed duplicates'", ")", "\n", "", "print", "(", "'Done'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.pose_utils.load_data": [[212, 270], ["numpy.load", "poses_arr[].reshape().transpose", "poses_arr[].transpose", "os.path.join", "numpy.array().reshape", "numpy.stack", "print", "os.path.join", "imageio.imread", "pose_utils.minify", "os.path.exists", "print", "os.path.join", "len", "print", "imageio.imread", "f.endswith", "poses_arr[].reshape", "os.path.join", "int", "pose_utils.minify", "sorted", "numpy.array", "imageio.imread", "imageio.imread", "sorted", "float", "int", "pose_utils.minify", "os.listdir", "f.endswith", "f.endswith", "f.endswith", "len", "pose_utils.load_data.imread"], "function", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.pose_utils.minify", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.pose_utils.minify", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.pose_utils.minify"], ["", "", "def", "load_data", "(", "basedir", ",", "factor", "=", "None", ",", "width", "=", "None", ",", "height", "=", "None", ",", "load_imgs", "=", "True", ")", ":", "\n", "\n", "    ", "poses_arr", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "basedir", ",", "'poses_bounds.npy'", ")", ")", "\n", "poses", "=", "poses_arr", "[", ":", ",", ":", "-", "2", "]", ".", "reshape", "(", "[", "-", "1", ",", "3", ",", "5", "]", ")", ".", "transpose", "(", "[", "1", ",", "2", ",", "0", "]", ")", "\n", "bds", "=", "poses_arr", "[", ":", ",", "-", "2", ":", "]", ".", "transpose", "(", "[", "1", ",", "0", "]", ")", "\n", "\n", "img0", "=", "[", "os", ".", "path", ".", "join", "(", "basedir", ",", "'images'", ",", "f", ")", "for", "f", "in", "sorted", "(", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "basedir", ",", "'images'", ")", ")", ")", "if", "f", ".", "endswith", "(", "'JPG'", ")", "or", "f", ".", "endswith", "(", "'jpg'", ")", "or", "f", ".", "endswith", "(", "'png'", ")", "]", "[", "0", "]", "\n", "sh", "=", "imageio", ".", "imread", "(", "img0", ")", ".", "shape", "\n", "\n", "sfx", "=", "''", "\n", "\n", "if", "factor", "is", "not", "None", ":", "\n", "        ", "sfx", "=", "'_{}'", ".", "format", "(", "factor", ")", "\n", "minify", "(", "basedir", ",", "factors", "=", "[", "factor", "]", ")", "\n", "factor", "=", "factor", "\n", "", "elif", "height", "is", "not", "None", ":", "\n", "        ", "factor", "=", "sh", "[", "0", "]", "/", "float", "(", "height", ")", "\n", "width", "=", "int", "(", "sh", "[", "1", "]", "/", "factor", ")", "\n", "minify", "(", "basedir", ",", "resolutions", "=", "[", "[", "height", ",", "width", "]", "]", ")", "\n", "sfx", "=", "'_{}x{}'", ".", "format", "(", "width", ",", "height", ")", "\n", "", "elif", "width", "is", "not", "None", ":", "\n", "        ", "factor", "=", "sh", "[", "1", "]", "/", "float", "(", "width", ")", "\n", "height", "=", "int", "(", "sh", "[", "0", "]", "/", "factor", ")", "\n", "minify", "(", "basedir", ",", "resolutions", "=", "[", "[", "height", ",", "width", "]", "]", ")", "\n", "sfx", "=", "'_{}x{}'", ".", "format", "(", "width", ",", "height", ")", "\n", "", "else", ":", "\n", "        ", "factor", "=", "1", "\n", "\n", "", "imgdir", "=", "os", ".", "path", ".", "join", "(", "basedir", ",", "'images'", "+", "sfx", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "imgdir", ")", ":", "\n", "        ", "print", "(", "imgdir", ",", "'does not exist, returning'", ")", "\n", "return", "\n", "\n", "", "imgfiles", "=", "[", "os", ".", "path", ".", "join", "(", "imgdir", ",", "f", ")", "for", "f", "in", "sorted", "(", "os", ".", "listdir", "(", "imgdir", ")", ")", "if", "f", ".", "endswith", "(", "'JPG'", ")", "or", "f", ".", "endswith", "(", "'jpg'", ")", "or", "f", ".", "endswith", "(", "'png'", ")", "]", "\n", "if", "poses", ".", "shape", "[", "-", "1", "]", "!=", "len", "(", "imgfiles", ")", ":", "\n", "        ", "print", "(", "'Mismatch between imgs {} and poses {} !!!!'", ".", "format", "(", "len", "(", "imgfiles", ")", ",", "poses", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "return", "\n", "\n", "", "sh", "=", "imageio", ".", "imread", "(", "imgfiles", "[", "0", "]", ")", ".", "shape", "\n", "poses", "[", ":", "2", ",", "4", ",", ":", "]", "=", "np", ".", "array", "(", "sh", "[", ":", "2", "]", ")", ".", "reshape", "(", "[", "2", ",", "1", "]", ")", "\n", "poses", "[", "2", ",", "4", ",", ":", "]", "=", "poses", "[", "2", ",", "4", ",", ":", "]", "*", "1.", "/", "factor", "\n", "\n", "if", "not", "load_imgs", ":", "\n", "        ", "return", "poses", ",", "bds", "\n", "\n", "# imgs = [imageio.imread(f, ignoregamma=True)[...,:3]/255. for f in imgfiles]", "\n", "", "def", "imread", "(", "f", ")", ":", "\n", "        ", "if", "f", ".", "endswith", "(", "'png'", ")", ":", "\n", "            ", "return", "imageio", ".", "imread", "(", "f", ",", "ignoregamma", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "return", "imageio", ".", "imread", "(", "f", ")", "\n", "\n", "", "", "imgs", "=", "imgs", "=", "[", "imread", "(", "f", ")", "[", "...", ",", ":", "3", "]", "/", "255.", "for", "f", "in", "imgfiles", "]", "\n", "imgs", "=", "np", ".", "stack", "(", "imgs", ",", "-", "1", ")", "\n", "\n", "print", "(", "'Loaded image data'", ",", "imgs", ".", "shape", ",", "poses", "[", ":", ",", "-", "1", ",", "0", "]", ")", "\n", "return", "poses", ",", "bds", ",", "imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.pose_utils.gen_poses": [[275, 290], ["print", "pose_utils.load_colmap_data", "pose_utils.save_poses", "print", "print", "pose_utils.minify"], "function", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.pose_utils.load_colmap_data", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.pose_utils.save_poses", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.utils.pose_utils.minify"], ["", "def", "gen_poses", "(", "basedir", ",", "factors", "=", "None", ")", ":", "\n", "\n", "    ", "print", "(", "'Post-colmap'", ")", "\n", "\n", "poses", ",", "pts3d", ",", "perm", "=", "load_colmap_data", "(", "basedir", ")", "\n", "\n", "save_poses", "(", "basedir", ",", "poses", ",", "pts3d", ",", "perm", ")", "\n", "\n", "if", "factors", "is", "not", "None", ":", "\n", "        ", "print", "(", "'Factors:'", ",", "factors", ")", "\n", "minify", "(", "basedir", ",", "factors", ")", "\n", "\n", "", "print", "(", "'Done with imgs2poses'", ")", "\n", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.depth_priors.mannequin_challenge_model.SuppressedStdout.__enter__": [[39, 42], ["open"], "methods", ["None"], ["    ", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_original_stdout", "=", "sys", ".", "stdout", "\n", "sys", ".", "stdout", "=", "open", "(", "os", ".", "devnull", ",", "\"w\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.depth_priors.mannequin_challenge_model.SuppressedStdout.__exit__": [[43, 46], ["sys.stdout.close"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "exception_type", ",", "exception_value", ",", "traceback", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "close", "(", ")", "\n", "sys", ".", "stdout", "=", "self", ".", "_original_stdout", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.depth_priors.mannequin_challenge_model.MannequinChallengeModel.__init__": [[53, 74], ["depth_model.DepthModel.__init__", "mannequin_challenge.options.train_options.TrainOptions", "mannequin_challenge.options.train_options.TrainOptions.initialize", "mannequin_challenge.options.train_options.TrainOptions.parser.parse_args", "mannequin_challenge_model.get_model_from_url", "mannequin_challenge_model.SuppressedStdout", "FixedMcModel", "os.path.dirname", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.nerf.run_nerf_helpers.NeRF.__init__", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.depth_priors.mannequin_challenge_model.get_model_from_url"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "parser", "=", "TrainOptions", "(", ")", "\n", "parser", ".", "initialize", "(", ")", "\n", "params", "=", "parser", ".", "parser", ".", "parse_args", "(", "[", "\"--input\"", ",", "\"single_view\"", "]", ")", "\n", "params", ".", "isTrain", "=", "False", "\n", "\n", "model_file", "=", "get_model_from_url", "(", "\n", "\"https://storage.googleapis.com/mannequinchallenge-data/checkpoints/best_depth_Ours_Bilinear_inc_3_net_G.pth\"", ",", "\n", "\"mc.pth\"", ",", "path_root", "=", "os", ".", "path", ".", "dirname", "(", "__file__", ")", "\n", ")", "\n", "\n", "class", "FixedMcModel", "(", "pix2pix_model", ".", "Pix2PixModel", ")", ":", "\n", "# Override the load function, so we can load the snapshot stored", "\n", "# in our specific location.", "\n", "            ", "def", "load_network", "(", "self", ",", "network", ",", "network_label", ",", "epoch_label", ")", ":", "\n", "                ", "return", "torch", ".", "load", "(", "model_file", ")", "\n", "\n", "", "", "with", "SuppressedStdout", "(", ")", ":", "\n", "            ", "self", ".", "model", "=", "FixedMcModel", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.depth_priors.mannequin_challenge_model.MannequinChallengeModel.train": [[75, 77], ["mannequin_challenge_model.MannequinChallengeModel.model.switch_to_train"], "methods", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.pix2pix_model.Pix2PixModel.switch_to_train"], ["", "", "def", "train", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", ".", "switch_to_train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.depth_priors.mannequin_challenge_model.MannequinChallengeModel.eval": [[78, 80], ["mannequin_challenge_model.MannequinChallengeModel.model.switch_to_eval"], "methods", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.pix2pix_model.Pix2PixModel.switch_to_eval"], ["", "def", "eval", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", ".", "switch_to_eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.depth_priors.mannequin_challenge_model.MannequinChallengeModel.parameters": [[81, 83], ["mannequin_challenge_model.MannequinChallengeModel.model.netG.parameters"], "methods", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.depth_priors.mannequin_challenge_model.MannequinChallengeModel.parameters"], ["", "def", "parameters", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "netG", ".", "parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.depth_priors.mannequin_challenge_model.MannequinChallengeModel.estimate_depth": [[84, 102], ["torch.Variable", "torch.Variable", "images.reshape.reshape.reshape", "mannequin_challenge_model.MannequinChallengeModel.model.netG.forward", "mannequin_challenge_model.MannequinChallengeModel.model.prediction_d.reshape", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "mannequin_challenge_model.MannequinChallengeModel.model.prediction_d.squeeze", "images.reshape.reshape.cuda"], "methods", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.nerf.run_nerf_helpers.NeRF.forward"], ["", "def", "estimate_depth", "(", "self", ",", "images", ")", ":", "\n", "        ", "images", "=", "autograd", ".", "Variable", "(", "images", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n", "# Reshape ...CHW -> XCHW", "\n", "shape", "=", "images", ".", "shape", "\n", "C", ",", "H", ",", "W", "=", "shape", "[", "-", "3", ":", "]", "\n", "images", "=", "images", ".", "reshape", "(", "-", "1", ",", "C", ",", "H", ",", "W", ")", "\n", "\n", "self", ".", "model", ".", "prediction_d", ",", "_", "=", "self", ".", "model", ".", "netG", ".", "forward", "(", "images", ")", "\n", "\n", "# Reshape X1HW -> BNHW", "\n", "out_shape", "=", "shape", "[", ":", "-", "3", "]", "+", "self", ".", "model", ".", "prediction_d", ".", "shape", "[", "-", "2", ":", "]", "\n", "self", ".", "model", ".", "prediction_d", "=", "self", ".", "model", ".", "prediction_d", ".", "reshape", "(", "out_shape", ")", "\n", "\n", "self", ".", "model", ".", "prediction_d", "=", "torch", ".", "exp", "(", "self", ".", "model", ".", "prediction_d", ")", "\n", "self", ".", "model", ".", "prediction_d", "=", "self", ".", "model", ".", "prediction_d", ".", "squeeze", "(", "-", "3", ")", "\n", "\n", "return", "self", ".", "model", ".", "prediction_d", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.depth_priors.mannequin_challenge_model.MannequinChallengeModel.save": [[103, 106], ["mannequin_challenge_model.MannequinChallengeModel.model.netG.state_dict", "torch.save", "torch.save", "torch.save", "torch.save"], "methods", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.pix2pix_model.Pix2PixModel.save", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.pix2pix_model.Pix2PixModel.save", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.pix2pix_model.Pix2PixModel.save", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.pix2pix_model.Pix2PixModel.save"], ["", "def", "save", "(", "self", ",", "file_name", ")", ":", "\n", "        ", "state_dict", "=", "self", ".", "model", ".", "netG", ".", "state_dict", "(", ")", "\n", "torch", ".", "save", "(", "state_dict", ",", "file_name", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.depth_priors.mannequin_challenge_model.get_model_from_url": [[14, 37], ["os.path.join", "os.path.exists", "local_path.rstrip.rstrip", "os.makedirs", "os.path.isfile", "print", "os.path.dirname", "print", "print", "wget.download", "print", "os.remove", "zipfile.ZipFile", "f.extractall"], "function", ["None"], ["def", "get_model_from_url", "(", "url", ":", "str", ",", "local_path", ":", "str", ",", "is_zip", ":", "bool", "=", "False", ",", "path_root", ":", "str", "=", "\"checkpoints\"", ")", "->", "str", ":", "\n", "    ", "local_path", "=", "os", ".", "path", ".", "join", "(", "path_root", ",", "local_path", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "local_path", ")", ":", "\n", "        ", "print", "(", "f\"Found cache {local_path}\"", ")", "\n", "return", "local_path", "\n", "\n", "# download", "\n", "", "local_path", "=", "local_path", ".", "rstrip", "(", "os", ".", "sep", ")", "\n", "download_path", "=", "local_path", "if", "not", "is_zip", "else", "f\"{local_path}.zip\"", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "download_path", ")", ",", "exist_ok", "=", "True", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "download_path", ")", ":", "\n", "        ", "print", "(", "f\"Found cache {download_path}\"", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "f\"Dowloading {url} to {download_path} ...\"", ")", "\n", "wget", ".", "download", "(", "url", ",", "download_path", ")", "\n", "\n", "", "if", "is_zip", ":", "\n", "        ", "print", "(", "f\"Unziping {download_path} to {local_path}\"", ")", "\n", "with", "ZipFile", "(", "download_path", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "f", ".", "extractall", "(", "local_path", ")", "\n", "", "os", ".", "remove", "(", "download_path", ")", "\n", "\n", "", "return", "local_path", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.depth_priors.depth_model.DepthModel.__init__": [[9, 11], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.nerf.run_nerf_helpers.NeRF.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.depth_priors.depth_model.DepthModel.forward": [[12, 31], ["depth_model.DepthModel.estimate_depth", "metadata[].unsqueeze().cuda", "metadata[].unsqueeze"], "methods", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.depth_priors.depth_model.DepthModel.estimate_depth"], ["", "def", "forward", "(", "self", ",", "images", ",", "metadata", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Images should be feed in the format (N, C, H, W). Channels are in BGR\n        order and values in [0, 1].\n\n        Metadata is not used by the depth models itself, only here, for value\n        transformations.\n\n        metadata[\"scales\"]: (optional, can be None) specifies a post-scale\n            transformation of the depth values. Format (1, N, 1).\n        \"\"\"", "\n", "depth", "=", "self", ".", "estimate_depth", "(", "images", ")", "\n", "\n", "if", "metadata", "is", "not", "None", ":", "\n", "            ", "if", "\"scales\"", "in", "metadata", ":", "\n", "                ", "factor", "=", "metadata", "[", "\"scales\"", "]", ".", "unsqueeze", "(", "3", ")", ".", "cuda", "(", ")", "\n", "depth", "=", "depth", "*", "factor", "\n", "\n", "", "", "return", "depth", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.depth_priors.depth_model.DepthModel.estimate_depth": [[32, 35], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "estimate_depth", "(", "self", ",", "images", ",", "metadata", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.depth_priors.depth_model.DepthModel.save": [[36, 39], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "save", "(", "self", ",", "label", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.util.util.mkdirs": [[22, 28], ["isinstance", "util.mkdir", "isinstance", "util.mkdir"], "function", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.util.util.mkdir", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.util.util.mkdir"], ["def", "mkdirs", "(", "paths", ")", ":", "\n", "    ", "if", "isinstance", "(", "paths", ",", "list", ")", "and", "not", "isinstance", "(", "paths", ",", "str", ")", ":", "\n", "        ", "for", "path", "in", "paths", ":", "\n", "            ", "mkdir", "(", "path", ")", "\n", "", "", "else", ":", "\n", "        ", "mkdir", "(", "paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.util.util.mkdir": [[30, 33], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "", "def", "mkdir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.LaplacianLayer.__init__": [[139, 147], ["torch.Module.__init__", "torch.FloatTensor().view().cuda", "torch.FloatTensor().view().cuda", "torch.FloatTensor().view().cuda", "torch.FloatTensor().view().cuda", "torch.FloatTensor().view().cuda", "torch.FloatTensor().view().cuda", "torch.FloatTensor().view().cuda", "torch.FloatTensor().view().cuda", "torch.FloatTensor().view().cuda", "torch.FloatTensor().view().cuda", "torch.FloatTensor().view().cuda", "torch.FloatTensor().view().cuda", "torch.FloatTensor().view().cuda", "torch.FloatTensor().view().cuda", "torch.FloatTensor().view().cuda", "torch.FloatTensor().view().cuda", "torch.FloatTensor().view().cuda", "torch.FloatTensor().view().cuda", "torch.FloatTensor().view().cuda", "torch.FloatTensor().view().cuda", "torch.FloatTensor().view().cuda", "torch.FloatTensor().view().cuda", "torch.FloatTensor().view().cuda", "torch.FloatTensor().view().cuda", "torch.FloatTensor().view().cuda", "torch.FloatTensor().view().cuda", "torch.FloatTensor().view().cuda", "torch.FloatTensor().view().cuda", "torch.FloatTensor().view().cuda", "torch.FloatTensor().view().cuda", "torch.FloatTensor().view().cuda", "torch.FloatTensor().view().cuda", "networks.LaplacianLayer.register_buffer", "networks.LaplacianLayer.register_buffer", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.nerf.run_nerf_helpers.NeRF.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "LaplacianLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "w_nom", "=", "torch", ".", "FloatTensor", "(", "[", "[", "0", ",", "-", "1", ",", "0", "]", ",", "[", "-", "1", ",", "4", ",", "-", "1", "]", ",", "\n", "[", "0", ",", "-", "1", ",", "0", "]", "]", ")", ".", "view", "(", "1", ",", "1", ",", "3", ",", "3", ")", ".", "cuda", "(", ")", "\n", "w_den", "=", "torch", ".", "FloatTensor", "(", "[", "[", "0", ",", "1", ",", "0", "]", ",", "[", "1", ",", "4", ",", "1", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", "]", ")", ".", "view", "(", "1", ",", "1", ",", "3", ",", "3", ")", ".", "cuda", "(", ")", "\n", "self", ".", "register_buffer", "(", "'w_nom'", ",", "w_nom", ")", "\n", "self", ".", "register_buffer", "(", "'w_den'", ",", "w_den", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.LaplacianLayer.forward": [[148, 174], ["input.size", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "input.dim", "input.view", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d.abs", "torch.nn.functional.conv2d.abs", "torch.nn.functional.conv2d.abs", "torch.nn.functional.conv2d.abs", "input.dim", "input.unsqueeze().unsqueeze.view", "input.dim", "input.dim", "input.dim", "input.dim", "input.unsqueeze", "input.unsqueeze().unsqueeze", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.nn.functional.conv2d.abs", "torch.nn.functional.conv2d.abs", "torch.nn.functional.conv2d.abs", "torch.nn.functional.conv2d.abs", "input.dim", "input.unsqueeze().unsqueeze.squeeze", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "input.dim", "input.unsqueeze().unsqueeze.squeeze().squeeze", "input.unsqueeze", "input.unsqueeze().unsqueeze.squeeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "do_normalize", "=", "True", ")", ":", "\n", "        ", "assert", "(", "input", ".", "dim", "(", ")", "==", "2", "or", "input", ".", "dim", "(", ")", "==", "3", "or", "input", ".", "dim", "(", ")", "==", "4", ")", "\n", "input_size", "=", "input", ".", "size", "(", ")", "\n", "if", "input", ".", "dim", "(", ")", "==", "4", ":", "\n", "            ", "x", "=", "input", ".", "view", "(", "input_size", "[", "0", "]", "*", "input_size", "[", "1", "]", ",", "1", ",", "input_size", "[", "2", "]", ",", "\n", "input_size", "[", "3", "]", ")", "\n", "", "elif", "input", ".", "dim", "(", ")", "==", "3", ":", "\n", "            ", "x", "=", "input", ".", "unsqueeze", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "input", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "", "x_nom", "=", "torch", ".", "nn", ".", "functional", ".", "conv2d", "(", "\n", "input", "=", "x", ",", "weight", "=", "autograd", ".", "Variable", "(", "self", ".", "w_nom", ")", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "if", "do_normalize", ":", "\n", "            ", "x_den", "=", "torch", ".", "nn", ".", "functional", ".", "conv2d", "(", "\n", "input", "=", "x", ",", "weight", "=", "autograd", ".", "Variable", "(", "self", ".", "w_den", ")", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "# x_den = x.std() + 1e-5", "\n", "x", "=", "(", "x_nom", ".", "abs", "(", ")", "/", "x_den", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "x_nom", ".", "abs", "(", ")", "\n", "", "if", "input", ".", "dim", "(", ")", "==", "4", ":", "\n", "            ", "return", "x", ".", "view", "(", "input_size", "[", "0", "]", ",", "input_size", "[", "1", "]", ",", "input_size", "[", "2", "]", "-", "2", ",", "\n", "input_size", "[", "3", "]", "-", "2", ")", "\n", "", "elif", "input", ".", "dim", "(", ")", "==", "3", ":", "\n", "            ", "return", "x", ".", "squeeze", "(", "1", ")", "\n", "", "elif", "input", ".", "dim", "(", ")", "==", "2", ":", "\n", "            ", "return", "x", ".", "squeeze", "(", "0", ")", ".", "squeeze", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.JointLoss.__init__": [[178, 192], ["torch.Module.__init__", "networks.LaplacianLayer"], "methods", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.nerf.run_nerf_helpers.NeRF.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "JointLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "w_si_mse", "=", "1.0", "\n", "self", ".", "w_l1_rel", "=", "1.0", "\n", "self", ".", "w_confidence", "=", "1.0", "\n", "self", ".", "w_grad", "=", "0.75", "\n", "self", ".", "w_sm", "=", "0.1", "\n", "self", ".", "w_sm1", "=", "0.075", "\n", "self", ".", "w_sm2", "=", "0.1", "\n", "self", ".", "w_normal", "=", "0.5", "\n", "self", ".", "num_scales", "=", "5", "\n", "self", ".", "total_loss", "=", "None", "\n", "self", ".", "laplacian_func", "=", "LaplacianLayer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.JointLoss.LaplacianSmoothnessLoss": [[193, 199], ["networks.JointLoss.laplacian_func", "networks.JointLoss.laplacian_func", "x.mean", "networks.JointLoss.mean"], "methods", ["None"], ["", "def", "LaplacianSmoothnessLoss", "(", "self", ",", "depth", ",", "img", ")", ":", "\n", "        ", "img_lap", "=", "self", ".", "laplacian_func", "(", "img", ",", "do_normalize", "=", "False", ")", "\n", "depth_lap", "=", "self", ".", "laplacian_func", "(", "depth", ",", "do_normalize", "=", "False", ")", "\n", "\n", "x", "=", "(", "-", "img_lap", ".", "mean", "(", "1", ")", ")", ".", "exp", "(", ")", "*", "(", "depth_lap", ")", "\n", "return", "x", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.JointLoss.compute_image_aware_2nd_smoothness_cost": [[200, 209], ["networks.gradient", "networks.gradient", "networks.gradient", "depth_grad_y2.abs().mean", "depth_grad_yx.abs().mean", "depth_grad_x2.abs().mean", "depth_grad_xy.abs().mean", "depth_grad_y2.abs", "depth_grad_yx.abs", "depth_grad_x2.abs", "depth_grad_xy.abs"], "methods", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.gradient", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.gradient", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.gradient"], ["", "def", "compute_image_aware_2nd_smoothness_cost", "(", "self", ",", "depth", ",", "img", ")", ":", "\n", "        ", "depth_grad_x", ",", "depth_grad_y", "=", "gradient", "(", "depth", ",", "do_normalize", "=", "False", ")", "\n", "depth_grad_x2", ",", "depth_grad_xy", "=", "gradient", "(", "\n", "depth_grad_x", ",", "do_normalize", "=", "False", ")", "\n", "depth_grad_yx", ",", "depth_grad_y2", "=", "gradient", "(", "\n", "depth_grad_y", ",", "do_normalize", "=", "False", ")", "\n", "return", "depth_grad_x2", ".", "abs", "(", ")", ".", "mean", "(", ")", "+", "depth_grad_xy", ".", "abs", "(", ")", ".", "mean", "(", ")", "+", "depth_grad_yx", ".", "abs", "(", ")", ".", "mean", "(", ")", "+", "depth_grad_y2", ".", "abs", "(", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.JointLoss.compute_image_aware_1st_smoothness_cost": [[210, 224], ["networks.gradient", "networks.gradient", "img.dim", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "img_grad_x.abs().mean", "img_grad_y.abs().mean", "img_grad_x.abs().mean", "img_grad_y.abs().mean", "img_grad_x.abs", "img_grad_y.abs", "img_grad_x.abs", "img_grad_y.abs", "depth_grad_x.abs", "depth_grad_y.abs", "depth_grad_x.abs", "depth_grad_y.abs"], "methods", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.gradient", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.gradient"], ["", "def", "compute_image_aware_1st_smoothness_cost", "(", "self", ",", "depth", ",", "img", ")", ":", "\n", "        ", "depth_grad_x", ",", "depth_grad_y", "=", "gradient", "(", "depth", ",", "do_normalize", "=", "False", ")", "\n", "img_grad_x", ",", "img_grad_y", "=", "gradient", "(", "img", ",", "do_normalize", "=", "False", ")", "\n", "if", "img", ".", "dim", "(", ")", "==", "3", ":", "\n", "            ", "weight_x", "=", "torch", ".", "exp", "(", "-", "img_grad_x", ".", "abs", "(", ")", ".", "mean", "(", "0", ")", ")", "\n", "weight_y", "=", "torch", ".", "exp", "(", "-", "img_grad_y", ".", "abs", "(", ")", ".", "mean", "(", "0", ")", ")", "\n", "cost", "=", "(", "(", "depth_grad_x", ".", "abs", "(", ")", "*", "weight_x", ")", "[", ":", "-", "1", ",", ":", "]", "+", "\n", "(", "depth_grad_y", ".", "abs", "(", ")", "*", "weight_y", ")", "[", ":", ",", ":", "-", "1", "]", ")", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "weight_x", "=", "torch", ".", "exp", "(", "-", "img_grad_x", ".", "abs", "(", ")", ".", "mean", "(", "1", ")", ")", "\n", "weight_y", "=", "torch", ".", "exp", "(", "-", "img_grad_y", ".", "abs", "(", ")", ".", "mean", "(", "1", ")", ")", "\n", "cost", "=", "(", "(", "depth_grad_x", ".", "abs", "(", ")", "*", "weight_x", ")", "[", ":", ",", ":", "-", "1", ",", ":", "]", "+", "\n", "(", "depth_grad_y", ".", "abs", "(", ")", "*", "weight_y", ")", "[", ":", ",", ":", ",", ":", "-", "1", "]", ")", ".", "mean", "(", ")", "\n", "", "return", "cost", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.JointLoss.SecondOrderLoss": [[225, 248], ["torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "SecondOrderLoss", "(", "self", ",", "log_pred_d", ",", "mask", ",", "log_gt", ")", ":", "\n", "        ", "N", "=", "torch", ".", "sum", "(", "mask", ")", "+", "1e-6", "\n", "\n", "v_pred_lap", "=", "log_pred_d", "[", ":", "-", "2", ",", ":", "]", "-", "2", "*", "log_pred_d", "[", "1", ":", "-", "1", ",", ":", "]", "+", "log_pred_d", "[", "2", ":", ",", ":", "]", "\n", "v_gt_lap", "=", "log_gt", "[", ":", "-", "2", ",", ":", "]", "-", "2", "*", "log_gt", "[", "1", ":", "-", "1", ",", ":", "]", "+", "log_gt", "[", "2", ":", ",", ":", "]", "\n", "\n", "v_diff", "=", "torch", ".", "abs", "(", "v_pred_lap", "-", "v_gt_lap", ")", "\n", "v_mask", "=", "torch", ".", "mul", "(", "torch", ".", "mul", "(", "mask", "[", ":", "-", "2", ",", ":", "]", ",", "mask", "[", "2", ":", ",", ":", "]", ")", ",", "mask", "[", "1", ":", "-", "1", ",", ":", "]", ")", "\n", "v_lap_term", "=", "torch", ".", "mul", "(", "v_diff", ",", "v_mask", ")", "\n", "\n", "h_pred_lap", "=", "log_pred_d", "[", ":", ",", ":", "-", "2", "]", "-", "2", "*", "log_pred_d", "[", ":", ",", "1", ":", "-", "1", "]", "+", "log_pred_d", "[", ":", ",", "2", ":", "]", "\n", "h_gt_lap", "=", "log_gt", "[", ":", ",", ":", "-", "2", "]", "-", "2", "*", "log_gt", "[", ":", ",", "1", ":", "-", "1", "]", "+", "log_gt", "[", ":", ",", "2", ":", "]", "\n", "\n", "h_diff", "=", "torch", ".", "abs", "(", "h_pred_lap", "-", "h_gt_lap", ")", "\n", "h_mask", "=", "torch", ".", "mul", "(", "torch", ".", "mul", "(", "mask", "[", ":", ",", ":", "-", "2", "]", ",", "mask", "[", ":", ",", "2", ":", "]", ")", ",", "mask", "[", ":", ",", "1", ":", "-", "1", "]", ")", "\n", "h_lap_term", "=", "torch", ".", "mul", "(", "h_diff", ",", "h_mask", ")", "\n", "\n", "second_order_term", "=", "torch", ".", "sum", "(", "v_lap_term", ")", "+", "torch", ".", "sum", "(", "h_lap_term", ")", "\n", "second_order_term", "=", "second_order_term", "/", "N", "\n", "\n", "return", "second_order_term", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.JointLoss.GradientLoss": [[249, 266], ["torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "GradientLoss", "(", "self", ",", "log_prediction_d", ",", "mask", ",", "log_gt", ")", ":", "\n", "        ", "log_d_diff", "=", "log_prediction_d", "-", "log_gt", "\n", "\n", "v_gradient", "=", "torch", ".", "abs", "(", "log_d_diff", "[", ":", ",", ":", "-", "2", ",", ":", "]", "-", "log_d_diff", "[", ":", ",", "2", ":", ",", ":", "]", ")", "\n", "v_mask", "=", "torch", ".", "mul", "(", "mask", "[", ":", ",", ":", "-", "2", ",", ":", "]", ",", "mask", "[", ":", ",", "2", ":", ",", ":", "]", ")", "\n", "v_gradient", "=", "torch", ".", "mul", "(", "v_gradient", ",", "v_mask", ")", "\n", "\n", "h_gradient", "=", "torch", ".", "abs", "(", "log_d_diff", "[", ":", ",", ":", ",", ":", "-", "2", "]", "-", "log_d_diff", "[", ":", ",", ":", ",", "2", ":", "]", ")", "\n", "h_mask", "=", "torch", ".", "mul", "(", "mask", "[", ":", ",", ":", ",", ":", "-", "2", "]", ",", "mask", "[", ":", ",", ":", ",", "2", ":", "]", ")", "\n", "h_gradient", "=", "torch", ".", "mul", "(", "h_gradient", ",", "h_mask", ")", "\n", "\n", "N", "=", "torch", ".", "sum", "(", "h_mask", ")", "+", "torch", ".", "sum", "(", "v_mask", ")", "+", "EPSILON", "\n", "\n", "gradient_loss", "=", "torch", ".", "sum", "(", "h_gradient", ")", "+", "torch", ".", "sum", "(", "v_gradient", ")", "\n", "gradient_loss", "=", "gradient_loss", "/", "N", "\n", "\n", "return", "gradient_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.JointLoss.DeMonGradientLoss": [[267, 290], ["torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "DeMonGradientLoss", "(", "self", ",", "prediction_d", ",", "mask", ",", "gt_d", ")", ":", "\n", "\n", "        ", "v_mask", "=", "torch", ".", "mul", "(", "mask", "[", ":", ",", ":", "-", "2", ",", ":", "]", ",", "mask", "[", ":", ",", "2", ":", ",", ":", "]", ")", "\n", "v_grad_pred", "=", "(", "prediction_d", "[", ":", ",", ":", "-", "2", ",", ":", "]", "-", "prediction_d", "[", ":", ",", "2", ":", ",", ":", "]", ")", "/", "(", "\n", "prediction_d", "[", ":", ",", ":", "-", "2", ",", ":", "]", "+", "prediction_d", "[", ":", ",", "2", ":", ",", ":", "]", "+", "EPSILON", ")", "\n", "v_grad_gt", "=", "(", "gt_d", "[", ":", ",", ":", "-", "2", ",", ":", "]", "-", "gt_d", "[", ":", ",", "2", ":", ",", ":", "]", ")", "/", "(", "\n", "gt_d", "[", ":", ",", ":", "-", "2", ",", ":", "]", "+", "gt_d", "[", ":", ",", "2", ":", ",", ":", "]", "+", "EPSILON", ")", "\n", "v_grad_term", "=", "v_mask", "*", "torch", ".", "abs", "(", "v_grad_pred", "-", "v_grad_gt", ")", "\n", "\n", "h_mask", "=", "torch", ".", "mul", "(", "mask", "[", ":", ",", ":", ",", ":", "-", "2", "]", ",", "mask", "[", ":", ",", ":", ",", "2", ":", "]", ")", "\n", "h_grad_pred", "=", "(", "prediction_d", "[", ":", ",", ":", ",", ":", "-", "2", "]", "-", "prediction_d", "[", ":", ",", ":", ",", "2", ":", "]", ")", "/", "(", "\n", "prediction_d", "[", ":", ",", ":", ",", ":", "-", "2", "]", "+", "prediction_d", "[", ":", ",", ":", ",", "2", ":", "]", "+", "EPSILON", ")", "\n", "h_grad_gt", "=", "(", "gt_d", "[", ":", ",", ":", ",", ":", "-", "2", "]", "-", "gt_d", "[", ":", ",", ":", ",", "2", ":", "]", ")", "/", "(", "\n", "gt_d", "[", ":", ",", ":", ",", ":", "-", "2", "]", "+", "gt_d", "[", ":", ",", ":", ",", "2", ":", "]", "+", "EPSILON", ")", "\n", "\n", "h_grad_term", "=", "h_mask", "*", "torch", ".", "abs", "(", "h_grad_pred", "-", "h_grad_gt", ")", "\n", "\n", "N", "=", "torch", ".", "sum", "(", "h_mask", ")", "+", "torch", ".", "sum", "(", "v_mask", ")", "+", "EPSILON", "\n", "\n", "gradient_loss", "=", "torch", ".", "sum", "(", "v_grad_term", ")", "+", "torch", ".", "sum", "(", "h_grad_term", ")", "\n", "gradient_loss", "=", "gradient_loss", "/", "N", "\n", "\n", "return", "gradient_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.JointLoss.Data_Loss": [[291, 301], ["torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "Data_Loss", "(", "self", ",", "log_prediction_d", ",", "mask", ",", "log_gt", ")", ":", "\n", "        ", "N", "=", "torch", ".", "sum", "(", "mask", ")", "+", "EPSILON", "\n", "log_d_diff", "=", "log_prediction_d", "-", "log_gt", "\n", "log_d_diff", "=", "torch", ".", "mul", "(", "log_d_diff", ",", "mask", ")", "\n", "s1", "=", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "log_d_diff", ",", "2", ")", ")", "/", "N", "\n", "s2", "=", "(", "torch", ".", "sum", "(", "log_d_diff", ")", "*", "torch", ".", "sum", "(", "log_d_diff", ")", ")", "/", "(", "N", "*", "N", ")", "\n", "\n", "data_loss", "=", "s1", "-", "s2", "\n", "\n", "return", "data_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.JointLoss.Confidence_Loss": [[302, 324], ["N.item.item.item", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.median().item", "torch.median().item", "torch.median().item", "torch.median().item", "torch.median().item", "torch.median().item", "torch.median().item", "torch.median().item", "torch.median().item", "torch.median().item", "torch.median().item", "torch.median().item", "torch.median().item", "torch.median().item", "torch.median().item", "torch.median().item", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median"], "methods", ["None"], ["", "def", "Confidence_Loss", "(", "self", ",", "pred_confidence", ",", "mask", ",", "pred_d", ",", "gt_d", ")", ":", "\n", "# using least square to find scaling factor", "\n", "        ", "N", "=", "torch", ".", "sum", "(", "mask", ")", "+", "EPSILON", "\n", "N", "=", "N", ".", "item", "(", ")", "\n", "\n", "if", "N", ">", "0.5", ":", "\n", "            ", "scale_factor", "=", "torch", ".", "median", "(", "\n", "gt_d", ".", "data", "[", "mask", ".", "data", ">", "0.1", "]", "/", "\n", "(", "pred_d", ".", "data", "[", "mask", ".", "data", ">", "0.1", "]", "+", "EPSILON", ")", ")", ".", "item", "(", ")", "\n", "pred_d_aligned", "=", "pred_d", "*", "scale_factor", "\n", "\n", "error", "=", "torch", ".", "abs", "(", "pred_d_aligned", ".", "data", "-", "\n", "gt_d", ".", "data", ")", "/", "(", "gt_d", ".", "data", "+", "EPSILON", ")", "\n", "error", "=", "torch", ".", "exp", "(", "-", "error", "*", "2.0", ")", "\n", "\n", "error_var", "=", "autograd", ".", "Variable", "(", "error", ",", "requires_grad", "=", "False", ")", "\n", "u_loss", "=", "mask", "*", "torch", ".", "abs", "(", "pred_confidence", "-", "error_var", ")", "\n", "confidence_term", "=", "torch", ".", "sum", "(", "u_loss", ")", "/", "N", "\n", "", "else", ":", "\n", "            ", "confidence_term", "=", "0.0", "\n", "\n", "", "return", "confidence_term", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.JointLoss.Normal_Loss": [[325, 359], ["pred_d.unsqueeze().repeat", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "pred_d.unsqueeze"], "methods", ["None"], ["", "def", "Normal_Loss", "(", "self", ",", "pred_d", ",", "gt_d", ",", "mask", ",", "normalized_p_3d", ",", "p_3d_gt", ")", ":", "\n", "\n", "        ", "p_3d_pred", "=", "normalized_p_3d", "*", "pred_d", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "2", ",", "1", ",", "1", ")", "\n", "\n", "x_mask", "=", "mask", "[", ":", ",", "1", ":", "-", "1", ",", ":", "-", "2", "]", "*", "mask", "[", ":", ",", "1", ":", "-", "1", ",", "2", ":", "]", "\n", "y_mask", "=", "mask", "[", ":", ",", ":", "-", "2", ",", "1", ":", "-", "1", "]", "*", "mask", "[", ":", ",", "2", ":", ",", "1", ":", "-", "1", "]", "\n", "\n", "final_mask", "=", "y_mask", "*", "x_mask", "\n", "\n", "grad_x_pred", "=", "(", "pred_d", "[", ":", ",", "1", ":", "-", "1", ",", ":", "-", "2", "]", "-", "pred_d", "[", ":", ",", "1", ":", "-", "1", ",", "2", ":", "]", ")", "/", "(", "\n", "p_3d_pred", "[", ":", ",", "0", ",", "1", ":", "-", "1", ",", ":", "-", "2", "]", "-", "p_3d_pred", "[", ":", ",", "0", ",", "1", ":", "-", "1", ",", "2", ":", "]", "+", "EPSILON", ")", "\n", "grad_x_gt", "=", "(", "gt_d", "[", ":", ",", "1", ":", "-", "1", ",", ":", "-", "2", "]", "-", "gt_d", "[", ":", ",", "1", ":", "-", "1", ",", "2", ":", "]", ")", "/", "(", "\n", "p_3d_gt", "[", ":", ",", "0", ",", "1", ":", "-", "1", ",", ":", "-", "2", "]", "-", "p_3d_gt", "[", ":", ",", "0", ",", "1", ":", "-", "1", ",", "2", ":", "]", "+", "EPSILON", ")", "\n", "\n", "grad_y_pred", "=", "(", "pred_d", "[", ":", ",", ":", "-", "2", ",", "1", ":", "-", "1", "]", "-", "pred_d", "[", ":", ",", "2", ":", ",", "1", ":", "-", "1", "]", ")", "/", "(", "\n", "p_3d_pred", "[", ":", ",", "1", ",", ":", "-", "2", ",", "1", ":", "-", "1", "]", "-", "p_3d_pred", "[", ":", ",", "1", ",", "2", ":", ",", "1", ":", "-", "1", "]", "+", "EPSILON", ")", "\n", "grad_y_gt", "=", "(", "gt_d", "[", ":", ",", ":", "-", "2", ",", "1", ":", "-", "1", "]", "-", "gt_d", "[", ":", ",", "2", ":", ",", "1", ":", "-", "1", "]", ")", "/", "(", "\n", "p_3d_gt", "[", ":", ",", "1", ",", ":", "-", "2", ",", "1", ":", "-", "1", "]", "-", "p_3d_gt", "[", ":", ",", "1", ",", "2", ":", ",", "1", ":", "-", "1", "]", "+", "EPSILON", ")", "\n", "\n", "norm_pred", "=", "torch", ".", "sqrt", "(", "grad_x_pred", "*", "grad_x_pred", "+", "\n", "grad_y_pred", "*", "grad_y_pred", "+", "1.0", ")", "+", "EPSILON", "\n", "norm_gt", "=", "torch", ".", "sqrt", "(", "grad_x_gt", "*", "grad_x_gt", "+", "grad_y_gt", "*", "grad_y_gt", "+", "\n", "1.0", ")", "+", "EPSILON", "\n", "\n", "dot_product", "=", "grad_x_gt", "*", "grad_x_pred", "+", "grad_y_gt", "*", "grad_y_pred", "+", "1.0", "\n", "dot_product", "=", "dot_product", "*", "final_mask", "\n", "\n", "N", "=", "torch", ".", "sum", "(", "final_mask", ")", "+", "EPSILON", "\n", "\n", "normal_term", "=", "dot_product", "/", "(", "norm_pred", "*", "norm_gt", ")", "\n", "\n", "normal_term", "=", "1.0", "-", "torch", ".", "sum", "(", "normal_term", ")", "/", "N", "\n", "\n", "return", "normal_term", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.JointLoss.Weighted_Data_Loss": [[360, 370], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "def", "Weighted_Data_Loss", "(", "self", ",", "log_prediction_d", ",", "w_mask", ",", "log_gt", ")", ":", "\n", "        ", "log_d_diff", "=", "log_prediction_d", "-", "log_gt", "\n", "\n", "wx_2", "=", "torch", ".", "sum", "(", "w_mask", "*", "torch", ".", "pow", "(", "log_d_diff", ",", "2", ")", ")", "\n", "wx", "=", "torch", ".", "sum", "(", "w_mask", "*", "log_d_diff", ")", "\n", "w_sum", "=", "torch", ".", "sum", "(", "w_mask", ")", "\n", "total_term", "=", "w_sum", "*", "wx_2", "-", "torch", ".", "pow", "(", "wx", ",", "2", ")", "\n", "N", "=", "w_sum", "*", "w_sum", "+", "EPSILON", "\n", "\n", "return", "total_term", "/", "N", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.JointLoss.L1_inv_loss": [[371, 379], ["torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "L1_inv_loss", "(", "self", ",", "pred_d_aligned", ",", "mask", ",", "depth_gt", ")", ":", "\n", "\n", "        ", "l1_inv_error", "=", "torch", ".", "abs", "(", "1.", "/", "(", "depth_gt", "+", "EPSILON", ")", "-", "1.", "/", "\n", "(", "EPSILON", "+", "pred_d_aligned", ")", ")", "\n", "l1_inv_error", "=", "l1_inv_error", "*", "mask", "\n", "num_valid_pixels", "=", "torch", ".", "sum", "(", "mask", ")", "+", "EPSILON", "\n", "\n", "return", "torch", ".", "sum", "(", "l1_inv_error", ")", "/", "num_valid_pixels", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.JointLoss.L1RelLoss": [[380, 388], ["torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "L1RelLoss", "(", "self", ",", "pred_d_aligned", ",", "mask", ",", "depth_gt", ")", ":", "\n", "        ", "l1_rel_error", "=", "torch", ".", "abs", "(", "depth_gt", "-", "pred_d_aligned", ")", "\n", "l1_rel_error", "=", "l1_rel_error", "*", "mask", "\n", "l1_rel_error", "=", "l1_rel_error", "/", "torch", ".", "abs", "(", "depth_gt", "+", "pred_d_aligned", "+", "1e-8", ")", "\n", "\n", "num_valid_pixels", "=", "torch", ".", "sum", "(", "mask", ")", "+", "EPSILON", "\n", "return", "torch", ".", "sum", "(", "l1_rel_error", ")", "/", "num_valid_pixels", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.JointLoss.L1_rel_loss": [[389, 398], ["torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "L1_rel_loss", "(", "self", ",", "pred_d_aligned", ",", "mask", ",", "depth_gt", ")", ":", "\n", "\n", "        ", "l1_rel_error", "=", "torch", ".", "abs", "(", "depth_gt", "-", "pred_d_aligned", ")", "\n", "l1_rel_error", "=", "l1_rel_error", "*", "mask", "\n", "l1_rel_error", "=", "l1_rel_error", "/", "torch", ".", "abs", "(", "depth_gt", "+", "1e-8", ")", "\n", "\n", "num_valid_pixels", "=", "torch", ".", "sum", "(", "mask", ")", "+", "EPSILON", "\n", "\n", "return", "torch", ".", "sum", "(", "l1_rel_error", ")", "/", "num_valid_pixels", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.JointLoss.compute_si_rmse": [[399, 461], ["targets[].cuda", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "targets[].cuda", "range", "targets[].cuda", "targets[].cuda.size", "networks.JointLoss.Data_Loss", "networks.JointLoss.Data_Loss", "networks.JointLoss.Data_Loss", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.JointLoss.Data_Loss", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.JointLoss.Data_Loss", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.JointLoss.Data_Loss"], ["", "def", "compute_si_rmse", "(", "self", ",", "pred_log_d", ",", "targets", ")", ":", "\n", "        ", "gt_mask", "=", "targets", "[", "'gt_mask'", "]", ".", "cuda", "(", ")", "\n", "log_d_gt", "=", "torch", ".", "log", "(", "targets", "[", "'depth_gt'", "]", ".", "cuda", "(", ")", ")", "\n", "env_mask", "=", "targets", "[", "'env_mask'", "]", ".", "cuda", "(", ")", "\n", "\n", "human_gt_mask", "=", "(", "1.0", "-", "env_mask", ")", "*", "gt_mask", "\n", "env_gt_mask", "=", "env_mask", "*", "gt_mask", "\n", "\n", "si_rmse_full", "=", "0.0", "\n", "si_rmse_human", "=", "0.0", "\n", "si_rmse_env", "=", "0.0", "\n", "\n", "si_rmse_inter", "=", "0.0", "\n", "si_rmse_intra", "=", "0.0", "\n", "\n", "# compute full error", "\n", "for", "i", "in", "range", "(", "0", ",", "gt_mask", ".", "size", "(", "0", ")", ")", ":", "\n", "\n", "            ", "mse_full", "=", "self", ".", "Data_Loss", "(", "pred_log_d", "[", "i", ",", ":", ",", ":", "]", ",", "gt_mask", "[", "i", ",", ":", ",", ":", "]", ",", "\n", "log_d_gt", "[", "i", ",", ":", ",", ":", "]", ")", "\n", "mse_env", "=", "self", ".", "Data_Loss", "(", "pred_log_d", "[", "i", ",", ":", ",", ":", "]", ",", "env_gt_mask", "[", "i", ",", ":", ",", ":", "]", ",", "\n", "log_d_gt", "[", "i", ",", ":", ",", ":", "]", ")", "\n", "mse_intra", "=", "self", ".", "Data_Loss", "(", "pred_log_d", "[", "i", ",", ":", ",", ":", "]", ",", "human_gt_mask", "[", "i", ",", ":", ",", ":", "]", ",", "\n", "log_d_gt", "[", "i", ",", ":", ",", ":", "]", ")", "\n", "\n", "# compute human error", "\n", "n_full", "=", "torch", ".", "sum", "(", "gt_mask", "[", "i", ",", ":", ",", ":", "]", ")", "\n", "n_human", "=", "torch", ".", "sum", "(", "human_gt_mask", "[", "i", ",", ":", ",", ":", "]", ")", "\n", "n_env", "=", "torch", ".", "sum", "(", "env_gt_mask", "[", "i", ",", ":", ",", ":", "]", ")", "\n", "\n", "log_diff", "=", "pred_log_d", "[", "i", ",", ":", ",", ":", "]", "-", "log_d_gt", "[", "i", ",", ":", ",", ":", "]", "\n", "log_diff_mask", "=", "log_diff", "*", "gt_mask", "[", "i", ",", ":", ",", ":", "]", "\n", "\n", "# full human error", "\n", "sum_sq_log_diff", "=", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "log_diff_mask", ",", "2", ")", ")", "\n", "sum_log_diff", "=", "torch", ".", "sum", "(", "log_diff_mask", ")", "\n", "\n", "per_pixel_error", "=", "n_full", "*", "torch", ".", "pow", "(", "\n", "log_diff", ",", "2", ")", "+", "sum_sq_log_diff", "-", "2", "*", "sum_log_diff", "*", "log_diff", "\n", "per_pixel_error", "=", "per_pixel_error", "*", "human_gt_mask", "[", "i", ",", ":", ",", ":", "]", "\n", "\n", "mse_human", "=", "torch", ".", "sum", "(", "per_pixel_error", ")", "/", "(", "n_human", "*", "n_full", "+", "EPSILON", ")", "\n", "\n", "# inter class mse error", "\n", "log_diff_env_mask", "=", "log_diff", "*", "env_gt_mask", "[", "i", ",", ":", ",", ":", "]", "\n", "sum_sq_log_env_diff", "=", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "log_diff_env_mask", ",", "2", ")", ")", "\n", "sum_log_env_diff", "=", "torch", ".", "sum", "(", "log_diff_env_mask", ")", "\n", "\n", "inter_error", "=", "n_env", "*", "torch", ".", "pow", "(", "\n", "log_diff", ",", "2", ")", "+", "sum_sq_log_env_diff", "-", "2", "*", "sum_log_env_diff", "*", "log_diff", "\n", "inter_error", "=", "inter_error", "*", "human_gt_mask", "[", "i", ",", ":", ",", ":", "]", "\n", "\n", "mse_inter", "=", "torch", ".", "sum", "(", "inter_error", ")", "/", "(", "n_human", "*", "n_env", "+", "EPSILON", ")", "\n", "\n", "si_rmse_full", "+=", "torch", ".", "sqrt", "(", "2.0", "*", "mse_full", ")", "\n", "si_rmse_human", "+=", "torch", ".", "sqrt", "(", "mse_human", ")", "\n", "si_rmse_env", "+=", "torch", ".", "sqrt", "(", "2.0", "*", "mse_env", ")", "\n", "si_rmse_intra", "+=", "torch", ".", "sqrt", "(", "2.0", "*", "mse_intra", ")", "\n", "si_rmse_inter", "+=", "torch", ".", "sqrt", "(", "mse_inter", ")", "\n", "\n", "", "return", "si_rmse_full", ",", "si_rmse_human", ",", "si_rmse_env", ",", "si_rmse_intra", ",", "si_rmse_inter", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.JointLoss.compute_l1_rel_error": [[462, 485], ["range", "gt_mask.size", "d_gt[].cpu().numpy", "pred_d[].cpu().numpy", "gt_mask[].cpu().numpy", "numpy.linalg.lstsq", "numpy.sum", "numpy.expand_dims", "d_gt[].cpu", "pred_d[].cpu", "gt_mask[].cpu", "numpy.sum", "numpy.abs"], "methods", ["None"], ["", "def", "compute_l1_rel_error", "(", "self", ",", "pred_d", ",", "targets", ")", ":", "\n", "        ", "gt_mask", "=", "targets", "[", "'gt_mask'", "]", "\n", "d_gt", "=", "targets", "[", "'depth_gt'", "]", "\n", "\n", "rel_full", "=", "0.", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "gt_mask", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "gt_d_np", "=", "d_gt", "[", "i", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pred_d_np", "=", "pred_d", "[", "i", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "gt_mask_np", "=", "gt_mask", "[", "i", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "scale_factor", "=", "np", ".", "linalg", ".", "lstsq", "(", "\n", "np", ".", "expand_dims", "(", "pred_d_np", "[", "gt_mask_np", ">", "1e-8", "]", ",", "axis", "=", "-", "1", ")", ",", "\n", "gt_d_np", "[", "gt_mask_np", ">", "1e-8", "]", ")", "\n", "scale_factor", "=", "scale_factor", "[", "0", "]", "[", "0", "]", "\n", "\n", "pred_d_aligned_np", "=", "pred_d_np", "*", "scale_factor", "\n", "\n", "total_full_rel", "=", "np", ".", "sum", "(", "gt_mask_np", "*", "np", ".", "abs", "(", "gt_d_np", "-", "pred_d_aligned_np", ")", "/", "\n", "(", "gt_d_np", "+", "EPSILON", ")", ")", "\n", "rel_full", "+=", "total_full_rel", "/", "(", "np", ".", "sum", "(", "gt_mask_np", ")", "+", "EPSILON", ")", "\n", "\n", "", "return", "rel_full", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.JointLoss.compute_rmse_error": [[486, 510], ["range", "gt_mask.size", "d_gt[].cpu().numpy", "pred_d[].cpu().numpy", "gt_mask[].cpu().numpy", "numpy.linalg.lstsq", "numpy.sum", "numpy.sqrt", "numpy.expand_dims", "d_gt[].cpu", "pred_d[].cpu", "gt_mask[].cpu", "numpy.square", "numpy.sum"], "methods", ["None"], ["", "def", "compute_rmse_error", "(", "self", ",", "pred_d", ",", "targets", ")", ":", "\n", "        ", "gt_mask", "=", "targets", "[", "'gt_mask'", "]", "\n", "d_gt", "=", "targets", "[", "'depth_gt'", "]", "\n", "\n", "rmse_full", "=", "0.", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "gt_mask", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "gt_d_np", "=", "d_gt", "[", "i", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pred_d_np", "=", "pred_d", "[", "i", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "gt_mask_np", "=", "gt_mask", "[", "i", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "scale_factor", "=", "np", ".", "linalg", ".", "lstsq", "(", "\n", "np", ".", "expand_dims", "(", "pred_d_np", "[", "gt_mask_np", ">", "1e-8", "]", ",", "axis", "=", "-", "1", ")", ",", "\n", "gt_d_np", "[", "gt_mask_np", ">", "1e-8", "]", ")", "\n", "scale_factor", "=", "scale_factor", "[", "0", "]", "[", "0", "]", "\n", "\n", "pred_d_aligned_np", "=", "pred_d_np", "*", "scale_factor", "\n", "\n", "total_full_rmse", "=", "np", ".", "sum", "(", "gt_mask_np", "*", "\n", "np", ".", "square", "(", "gt_d_np", "-", "pred_d_aligned_np", ")", ")", "\n", "rmse_full", "+=", "np", ".", "sqrt", "(", "total_full_rmse", "/", "\n", "(", "np", ".", "sum", "(", "gt_mask_np", ")", "+", "EPSILON", ")", ")", "\n", "\n", "", "return", "rmse_full", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.JointLoss.Data_Human_Loss": [[511, 528], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "def", "Data_Human_Loss", "(", "self", ",", "pred_log_d", ",", "gt_mask", ",", "human_gt_mask", ",", "log_d_gt", ")", ":", "\n", "        ", "n_full", "=", "torch", ".", "sum", "(", "gt_mask", ")", "\n", "n_human", "=", "torch", ".", "sum", "(", "human_gt_mask", ")", "\n", "\n", "log_diff", "=", "pred_log_d", "-", "log_d_gt", "\n", "log_diff_mask", "=", "log_diff", "*", "gt_mask", "\n", "\n", "sum_sq_log_diff", "=", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "log_diff_mask", ",", "2", ")", ")", "\n", "sum_log_diff", "=", "torch", ".", "sum", "(", "log_diff_mask", ")", "\n", "\n", "inter_error", "=", "n_full", "*", "torch", ".", "pow", "(", "\n", "log_diff", ",", "2", ")", "+", "sum_sq_log_diff", "-", "2", "*", "sum_log_diff", "*", "log_diff", "\n", "inter_error", "=", "inter_error", "*", "human_gt_mask", "\n", "\n", "mse_human", "=", "torch", ".", "sum", "(", "inter_error", ")", "/", "(", "n_human", "*", "n_full", "+", "EPSILON", ")", "\n", "mse_human", "=", "mse_human", "/", "2.0", "\n", "return", "mse_human", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.JointLoss.__call__": [[529, 621], ["torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "mask_0.size", "range", "print", "print", "print", "total_loss.item", "targets[].cuda", "targets[].cuda", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "networks.JointLoss.GradientLoss", "networks.JointLoss.GradientLoss", "networks.JointLoss.GradientLoss", "networks.JointLoss.GradientLoss", "networks.JointLoss.GradientLoss", "networks.JointLoss.compute_image_aware_1st_smoothness_cost", "networks.JointLoss.compute_image_aware_1st_smoothness_cost", "networks.JointLoss.compute_image_aware_1st_smoothness_cost", "networks.JointLoss.compute_image_aware_1st_smoothness_cost", "networks.JointLoss.compute_image_aware_1st_smoothness_cost", "networks.JointLoss.LaplacianSmoothnessLoss", "networks.JointLoss.LaplacianSmoothnessLoss", "networks.JointLoss.LaplacianSmoothnessLoss", "networks.JointLoss.LaplacianSmoothnessLoss", "networks.JointLoss.LaplacianSmoothnessLoss", "targets[].cuda", "data_term.item", "grad_term.item", "sm_term.item", "networks.JointLoss.Data_Loss", "networks.JointLoss.Data_Human_Loss", "networks.JointLoss.Data_Loss"], "methods", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.JointLoss.GradientLoss", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.JointLoss.GradientLoss", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.JointLoss.GradientLoss", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.JointLoss.GradientLoss", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.JointLoss.GradientLoss", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.JointLoss.compute_image_aware_1st_smoothness_cost", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.JointLoss.compute_image_aware_1st_smoothness_cost", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.JointLoss.compute_image_aware_1st_smoothness_cost", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.JointLoss.compute_image_aware_1st_smoothness_cost", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.JointLoss.compute_image_aware_1st_smoothness_cost", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.JointLoss.LaplacianSmoothnessLoss", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.JointLoss.LaplacianSmoothnessLoss", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.JointLoss.LaplacianSmoothnessLoss", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.JointLoss.LaplacianSmoothnessLoss", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.JointLoss.LaplacianSmoothnessLoss", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.JointLoss.Data_Loss", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.JointLoss.Data_Human_Loss", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.JointLoss.Data_Loss"], ["", "def", "__call__", "(", "self", ",", "input_images", ",", "log_pred_d_0", ",", "pred_confidence", ",", "targets", ")", ":", "\n", "\n", "        ", "log_pred_d_1", "=", "log_pred_d_0", "[", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", "\n", "log_pred_d_2", "=", "log_pred_d_1", "[", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", "\n", "log_pred_d_3", "=", "log_pred_d_2", "[", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", "\n", "log_pred_d_4", "=", "log_pred_d_3", "[", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", "\n", "\n", "input_0", "=", "input_images", "\n", "input_1", "=", "input_0", "[", ":", ",", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", "\n", "input_2", "=", "input_1", "[", ":", ",", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", "\n", "input_3", "=", "input_2", "[", ":", ",", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", "\n", "input_4", "=", "input_3", "[", ":", ",", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", "\n", "\n", "d_gt_0", "=", "autograd", ".", "Variable", "(", "targets", "[", "'depth_gt'", "]", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", "\n", "log_d_gt_0", "=", "torch", ".", "log", "(", "d_gt_0", ")", "\n", "log_d_gt_1", "=", "log_d_gt_0", "[", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", "\n", "log_d_gt_2", "=", "log_d_gt_1", "[", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", "\n", "log_d_gt_3", "=", "log_d_gt_2", "[", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", "\n", "log_d_gt_4", "=", "log_d_gt_3", "[", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", "\n", "\n", "gt_mask", "=", "autograd", ".", "Variable", "(", "targets", "[", "'gt_mask'", "]", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", "\n", "human_mask", "=", "1.0", "-", "autograd", ".", "Variable", "(", "targets", "[", "'env_mask'", "]", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", "\n", "human_gt_mask", "=", "human_mask", "*", "gt_mask", "\n", "\n", "mask_0", "=", "gt_mask", "\n", "mask_1", "=", "mask_0", "[", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", "\n", "mask_2", "=", "mask_1", "[", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", "\n", "mask_3", "=", "mask_2", "[", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", "\n", "mask_4", "=", "mask_3", "[", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", "\n", "\n", "data_term", "=", "0.0", "\n", "grad_term", "=", "0.0", "\n", "sm_term", "=", "0.0", "\n", "confidence_term", "=", "0.0", "\n", "\n", "num_samples", "=", "mask_0", ".", "size", "(", "0", ")", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "num_samples", ")", ":", "\n", "            ", "if", "self", ".", "opt", ".", "human_data_term", ">", "0.1", ":", "\n", "                ", "data_term", "+=", "(", "self", ".", "w_si_mse", "/", "num_samples", "*", "self", ".", "Data_Loss", "(", "\n", "log_pred_d_0", "[", "i", ",", ":", ",", ":", "]", ",", "mask_0", "[", "i", ",", ":", ",", ":", "]", ",", "log_d_gt_0", "[", "i", ",", ":", ",", ":", "]", ")", ")", "\n", "data_term", "+=", "(", "self", ".", "w_si_mse", "/", "num_samples", "*", "0.5", "*", "self", ".", "Data_Human_Loss", "(", "\n", "log_pred_d_0", "[", "i", ",", ":", ",", ":", "]", ",", "mask_0", "[", "i", ",", "\n", ":", ",", ":", "]", ",", "human_gt_mask", "[", "i", ",", ":", ",", ":", "]", ",", "\n", "log_d_gt_0", "[", "i", ",", ":", ",", ":", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "data_term", "+=", "(", "self", ".", "w_si_mse", "/", "num_samples", "*", "1.5", "*", "self", ".", "Data_Loss", "(", "\n", "log_pred_d_0", "[", "i", ",", ":", ",", ":", "]", ",", "mask_0", "[", "i", ",", ":", ",", ":", "]", ",", "log_d_gt_0", "[", "i", ",", ":", ",", ":", "]", ")", ")", "\n", "\n", "", "", "grad_term", "+=", "self", ".", "w_grad", "*", "self", ".", "GradientLoss", "(", "log_pred_d_0", ",", "mask_0", ",", "\n", "log_d_gt_0", ")", "\n", "grad_term", "+=", "self", ".", "w_grad", "*", "self", ".", "GradientLoss", "(", "log_pred_d_1", ",", "mask_1", ",", "\n", "log_d_gt_1", ")", "\n", "grad_term", "+=", "self", ".", "w_grad", "*", "self", ".", "GradientLoss", "(", "log_pred_d_2", ",", "mask_2", ",", "\n", "log_d_gt_2", ")", "\n", "grad_term", "+=", "self", ".", "w_grad", "*", "self", ".", "GradientLoss", "(", "log_pred_d_3", ",", "mask_3", ",", "\n", "log_d_gt_3", ")", "\n", "grad_term", "+=", "self", ".", "w_grad", "*", "self", ".", "GradientLoss", "(", "log_pred_d_4", ",", "mask_4", ",", "\n", "log_d_gt_4", ")", "\n", "\n", "sm_term", "+=", "self", ".", "w_sm1", "*", "self", ".", "compute_image_aware_1st_smoothness_cost", "(", "\n", "log_pred_d_0", ",", "input_0", ")", "\n", "sm_term", "+=", "(", "self", ".", "w_sm1", "*", "0.5", "*", "self", ".", "compute_image_aware_1st_smoothness_cost", "(", "\n", "log_pred_d_1", ",", "input_1", ")", ")", "\n", "sm_term", "+=", "(", "self", ".", "w_sm1", "*", "0.25", "*", "self", ".", "compute_image_aware_1st_smoothness_cost", "(", "\n", "log_pred_d_2", ",", "input_2", ")", ")", "\n", "sm_term", "+=", "(", "self", ".", "w_sm1", "*", "0.125", "*", "self", ".", "compute_image_aware_1st_smoothness_cost", "(", "\n", "log_pred_d_3", ",", "input_3", ")", ")", "\n", "sm_term", "+=", "(", "self", ".", "w_sm1", "*", "0.0625", "*", "self", ".", "compute_image_aware_1st_smoothness_cost", "(", "\n", "log_pred_d_4", ",", "input_4", ")", ")", "\n", "\n", "sm_term", "+=", "self", ".", "w_sm2", "*", "self", ".", "LaplacianSmoothnessLoss", "(", "log_pred_d_0", ",", "input_0", ")", "\n", "sm_term", "+=", "self", ".", "w_sm2", "*", "0.5", "*", "self", ".", "LaplacianSmoothnessLoss", "(", "\n", "log_pred_d_1", ",", "input_1", ")", "\n", "sm_term", "+=", "self", ".", "w_sm2", "*", "0.25", "*", "self", ".", "LaplacianSmoothnessLoss", "(", "\n", "log_pred_d_2", ",", "input_2", ")", "\n", "sm_term", "+=", "self", ".", "w_sm2", "*", "0.125", "*", "self", ".", "LaplacianSmoothnessLoss", "(", "\n", "log_pred_d_3", ",", "input_3", ")", "\n", "sm_term", "+=", "self", ".", "w_sm2", "*", "0.0625", "*", "self", ".", "LaplacianSmoothnessLoss", "(", "\n", "log_pred_d_4", ",", "input_4", ")", "\n", "\n", "print", "(", "'data_term %f'", "%", "data_term", ".", "item", "(", ")", ")", "\n", "print", "(", "'grad_term %f'", "%", "grad_term", ".", "item", "(", ")", ")", "\n", "print", "(", "'sm_term %f'", "%", "sm_term", ".", "item", "(", ")", ")", "\n", "\n", "total_loss", "=", "data_term", "+", "grad_term", "+", "sm_term", "+", "confidence_term", "\n", "\n", "self", ".", "total_loss", "=", "total_loss", "\n", "\n", "return", "total_loss", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.JointLoss.get_loss_var": [[622, 624], ["None"], "methods", ["None"], ["", "def", "get_loss_var", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total_loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.gradient": [[28, 51], ["input.dim", "input.dim", "input.dim"], "function", ["None"], ["def", "gradient", "(", "input", ",", "do_normalize", "=", "False", ")", ":", "\n", "    ", "if", "input", ".", "dim", "(", ")", "==", "2", ":", "\n", "        ", "D_ry", "=", "input", "[", "1", ":", ",", ":", "]", "\n", "D_ly", "=", "input", "[", ":", "-", "1", ",", ":", "]", "\n", "D_rx", "=", "input", "[", ":", ",", "1", ":", "]", "\n", "D_lx", "=", "input", "[", ":", ",", ":", "-", "1", "]", "\n", "", "elif", "input", ".", "dim", "(", ")", "==", "3", ":", "\n", "        ", "D_ry", "=", "input", "[", ":", ",", "1", ":", ",", ":", "]", "\n", "D_ly", "=", "input", "[", ":", ",", ":", "-", "1", ",", ":", "]", "\n", "D_rx", "=", "input", "[", ":", ",", ":", ",", "1", ":", "]", "\n", "D_lx", "=", "input", "[", ":", ",", ":", ",", ":", "-", "1", "]", "\n", "", "elif", "input", ".", "dim", "(", ")", "==", "4", ":", "\n", "        ", "D_ry", "=", "input", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "\n", "D_ly", "=", "input", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", "\n", "D_rx", "=", "input", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "\n", "D_lx", "=", "input", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", "\n", "\n", "", "Dx", "=", "D_rx", "-", "D_lx", "\n", "Dy", "=", "D_ry", "-", "D_ly", "\n", "if", "do_normalize", ":", "\n", "        ", "Dx", "=", "Dx", "/", "(", "D_rx", "+", "D_lx", "+", "EPSILON", ")", "\n", "Dy", "=", "Dy", "/", "(", "D_ry", "+", "D_ly", "+", "EPSILON", ")", "\n", "", "return", "Dx", ",", "Dy", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.init_weights": [[53, 78], ["print", "net.apply", "hasattr", "torch.init.normal_", "hasattr", "torch.init.constant_", "classname.find", "torch.init.normal_", "torch.init.constant_", "classname.find", "classname.find", "torch.init.xavier_normal_", "torch.init.kaiming_normal_", "torch.init.orthogonal_", "NotImplementedError"], "function", ["None"], ["", "def", "init_weights", "(", "net", ",", "init_type", "=", "'normal'", ",", "gain", "=", "0.02", ")", ":", "\n", "\n", "    ", "def", "init_func", "(", "m", ")", ":", "\n", "        ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "hasattr", "(", "m", ",", "'weight'", ")", "and", "(", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", "or", "\n", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ")", ":", "\n", "            ", "if", "init_type", "==", "'normal'", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "gain", ")", "\n", "", "elif", "init_type", "==", "'xavier'", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "", "elif", "init_type", "==", "'kaiming'", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "init_type", "==", "'orthogonal'", ":", "\n", "                ", "nn", ".", "init", ".", "orthogonal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "\n", "'initialization method [%s] is not implemented'", "%", "init_type", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "gain", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n", "", "", "print", "(", "'initialize network with %s'", "%", "init_type", ")", "\n", "net", ".", "apply", "(", "init_func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.get_scheduler": [[80, 99], ["torch.lr_scheduler.LambdaLR", "torch.lr_scheduler.StepLR", "torch.lr_scheduler.ReduceLROnPlateau", "NotImplementedError", "max", "float"], "function", ["None"], ["", "def", "get_scheduler", "(", "optimizer", ",", "opt", ")", ":", "\n", "    ", "if", "opt", ".", "lr_policy", "==", "'lambda'", ":", "\n", "\n", "        ", "def", "lambda_rule", "(", "epoch", ")", ":", "\n", "            ", "lr_l", "=", "1.0", "-", "max", "(", "0", ",", "epoch", "+", "1", "+", "opt", ".", "epoch_count", "-", "\n", "opt", ".", "niter", ")", "/", "float", "(", "opt", ".", "niter_decay", "+", "1", ")", "\n", "return", "lr_l", "\n", "\n", "", "scheduler", "=", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "lr_lambda", "=", "lambda_rule", ")", "\n", "", "elif", "opt", ".", "lr_policy", "==", "'step'", ":", "\n", "        ", "scheduler", "=", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "\n", "optimizer", ",", "step_size", "=", "opt", ".", "lr_decay_epoch", ",", "gamma", "=", "0.5", ")", "\n", "", "elif", "opt", ".", "lr_policy", "==", "'plateau'", ":", "\n", "        ", "scheduler", "=", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "\n", "optimizer", ",", "mode", "=", "'min'", ",", "factor", "=", "0.2", ",", "threshold", "=", "0.01", ",", "patience", "=", "5", ")", "\n", "", "else", ":", "\n", "        ", "return", "NotImplementedError", "(", "'learning rate policy [%s] is not implemented'", ",", "\n", "opt", ".", "lr_policy", ")", "\n", "", "return", "scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.get_norm_layer": [[101, 113], ["functools.partial", "functools.partial", "NotImplementedError"], "function", ["None"], ["", "def", "get_norm_layer", "(", "norm_type", "=", "'instance'", ")", ":", "\n", "    ", "if", "norm_type", "==", "'batch'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "BatchNorm2d", ",", "affine", "=", "True", ")", "\n", "", "elif", "norm_type", "==", "'instance'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "\n", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ",", "track_running_stats", "=", "True", ")", "\n", "", "elif", "norm_type", "==", "'none'", ":", "\n", "        ", "norm_layer", "=", "None", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'normalization layer [%s] is not found'", "%", "\n", "norm_type", ")", "\n", "", "return", "norm_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.init_net": [[115, 122], ["networks.init_weights", "len", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.nn.DataParallel.to", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel"], "function", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.init_weights"], ["", "def", "init_net", "(", "net", ",", "init_type", "=", "'normal'", ",", "init_gain", "=", "0.02", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "net", ".", "to", "(", "gpu_ids", "[", "0", "]", ")", "\n", "net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "net", ",", "gpu_ids", ")", "\n", "", "init_weights", "(", "net", ",", "init_type", ",", "gain", "=", "init_gain", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.print_network": [[124, 130], ["net_.parameters", "print", "print", "param.numel"], "function", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.depth_priors.mannequin_challenge_model.MannequinChallengeModel.parameters"], ["", "def", "print_network", "(", "net_", ")", ":", "\n", "    ", "num_params", "=", "0", "\n", "for", "param", "in", "net_", ".", "parameters", "(", ")", ":", "\n", "        ", "num_params", "+=", "param", ".", "numel", "(", ")", "\n", "", "print", "(", "net_", ")", "\n", "print", "(", "'Total number of parameters: %d'", "%", "num_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.hourglass.inception.__init__": [[20, 47], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "hourglass.inception.convs.append", "range", "torch.Sequential", "torch.Sequential", "len", "int", "torch.Sequential", "torch.Sequential", "hourglass.inception.convs.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.nerf.run_nerf_helpers.NeRF.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "config", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "super", "(", "inception", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "# Base 1*1 conv layer", "\n", "self", ".", "convs", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "input_size", ",", "config", "[", "0", "]", "[", "0", "]", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "config", "[", "0", "]", "[", "0", "]", ",", "affine", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", ")", "\n", "\n", "# Additional layers", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "config", ")", ")", ":", "\n", "            ", "filt", "=", "config", "[", "i", "]", "[", "0", "]", "\n", "pad", "=", "int", "(", "(", "filt", "-", "1", ")", "/", "2", ")", "\n", "out_a", "=", "config", "[", "i", "]", "[", "1", "]", "\n", "out_b", "=", "config", "[", "i", "]", "[", "2", "]", "\n", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "input_size", ",", "out_a", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_a", ",", "affine", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_a", ",", "out_b", ",", "filt", ",", "padding", "=", "pad", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_b", ",", "affine", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "\n", ")", "\n", "self", ".", "convs", ".", "append", "(", "conv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.hourglass.inception.__repr__": [[48, 50], ["str"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"inception\"", "+", "str", "(", "self", ".", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.hourglass.inception.forward": [[51, 56], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "ret.append", "conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "ret", "=", "[", "]", "\n", "for", "conv", "in", "(", "self", ".", "convs", ")", ":", "\n", "            ", "ret", ".", "append", "(", "conv", "(", "x", ")", ")", "\n", "", "return", "torch", ".", "cat", "(", "ret", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.hourglass.Channels1.__init__": [[59, 75], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "hourglass.Channels1.list.append", "hourglass.Channels1.list.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "hourglass.inception", "hourglass.inception", "torch.AvgPool2d", "torch.AvgPool2d", "hourglass.inception", "hourglass.inception", "hourglass.inception", "torch.UpsamplingBilinear2d", "torch.UpsamplingBilinear2d"], "methods", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.nerf.run_nerf_helpers.NeRF.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Channels1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "list", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "inception", "(", "256", ",", "[", "[", "64", "]", ",", "[", "3", ",", "32", ",", "64", "]", ",", "[", "5", ",", "32", ",", "64", "]", ",", "[", "7", ",", "32", ",", "64", "]", "]", ")", ",", "\n", "inception", "(", "256", ",", "[", "[", "64", "]", ",", "[", "3", ",", "32", ",", "64", "]", ",", "[", "5", ",", "32", ",", "64", "]", ",", "[", "7", ",", "32", ",", "64", "]", "]", ")", "\n", ")", "\n", ")", "# EE", "\n", "self", ".", "list", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "AvgPool2d", "(", "2", ")", ",", "\n", "inception", "(", "256", ",", "[", "[", "64", "]", ",", "[", "3", ",", "32", ",", "64", "]", ",", "[", "5", ",", "32", ",", "64", "]", ",", "[", "7", ",", "32", ",", "64", "]", "]", ")", ",", "\n", "inception", "(", "256", ",", "[", "[", "64", "]", ",", "[", "3", ",", "32", ",", "64", "]", ",", "[", "5", ",", "32", ",", "64", "]", ",", "[", "7", ",", "32", ",", "64", "]", "]", ")", ",", "\n", "inception", "(", "256", ",", "[", "[", "64", "]", ",", "[", "3", ",", "32", ",", "64", "]", ",", "[", "5", ",", "32", ",", "64", "]", ",", "[", "7", ",", "32", ",", "64", "]", "]", ")", ",", "\n", "nn", ".", "UpsamplingBilinear2d", "(", "scale_factor", "=", "2", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.hourglass.Channels1.forward": [[78, 80], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "list", "[", "0", "]", "(", "x", ")", "+", "self", ".", "list", "[", "1", "]", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.hourglass.Channels2.__init__": [[83, 101], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "hourglass.Channels2.list.append", "hourglass.Channels2.list.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "hourglass.inception", "hourglass.inception", "torch.AvgPool2d", "torch.AvgPool2d", "hourglass.inception", "hourglass.inception", "hourglass.Channels1", "hourglass.inception", "hourglass.inception", "torch.UpsamplingBilinear2d", "torch.UpsamplingBilinear2d"], "methods", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.nerf.run_nerf_helpers.NeRF.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Channels2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "list", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "inception", "(", "256", ",", "[", "[", "64", "]", ",", "[", "3", ",", "32", ",", "64", "]", ",", "[", "5", ",", "32", ",", "64", "]", ",", "[", "7", ",", "32", ",", "64", "]", "]", ")", ",", "\n", "inception", "(", "256", ",", "[", "[", "64", "]", ",", "[", "3", ",", "64", ",", "64", "]", ",", "[", "7", ",", "64", ",", "64", "]", ",", "[", "11", ",", "64", ",", "64", "]", "]", ")", "\n", ")", "\n", ")", "# EF", "\n", "self", ".", "list", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "AvgPool2d", "(", "2", ")", ",", "\n", "inception", "(", "256", ",", "[", "[", "64", "]", ",", "[", "3", ",", "32", ",", "64", "]", ",", "[", "5", ",", "32", ",", "64", "]", ",", "[", "7", ",", "32", ",", "64", "]", "]", ")", ",", "\n", "inception", "(", "256", ",", "[", "[", "64", "]", ",", "[", "3", ",", "32", ",", "64", "]", ",", "[", "5", ",", "32", ",", "64", "]", ",", "[", "7", ",", "32", ",", "64", "]", "]", ")", ",", "\n", "Channels1", "(", ")", ",", "\n", "inception", "(", "256", ",", "[", "[", "64", "]", ",", "[", "3", ",", "32", ",", "64", "]", ",", "[", "5", ",", "32", ",", "64", "]", ",", "[", "7", ",", "32", ",", "64", "]", "]", ")", ",", "\n", "inception", "(", "256", ",", "[", "[", "64", "]", ",", "[", "3", ",", "64", ",", "64", "]", ",", "[", "7", ",", "64", ",", "64", "]", ",", "[", "11", ",", "64", ",", "64", "]", "]", ")", ",", "\n", "nn", ".", "UpsamplingBilinear2d", "(", "scale_factor", "=", "2", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.hourglass.Channels2.forward": [[104, 106], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "list", "[", "0", "]", "(", "x", ")", "+", "self", ".", "list", "[", "1", "]", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.hourglass.Channels3.__init__": [[109, 127], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "hourglass.Channels3.list.append", "hourglass.Channels3.list.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "hourglass.inception", "hourglass.inception", "hourglass.Channels2", "hourglass.inception", "hourglass.inception", "torch.UpsamplingBilinear2d", "torch.UpsamplingBilinear2d", "hourglass.inception", "hourglass.inception"], "methods", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.nerf.run_nerf_helpers.NeRF.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Channels3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "list", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "AvgPool2d", "(", "2", ")", ",", "\n", "inception", "(", "128", ",", "[", "[", "32", "]", ",", "[", "3", ",", "32", ",", "32", "]", ",", "[", "5", ",", "32", ",", "32", "]", ",", "[", "7", ",", "32", ",", "32", "]", "]", ")", ",", "\n", "inception", "(", "128", ",", "[", "[", "64", "]", ",", "[", "3", ",", "32", ",", "64", "]", ",", "[", "5", ",", "32", ",", "64", "]", ",", "[", "7", ",", "32", ",", "64", "]", "]", ")", ",", "\n", "Channels2", "(", ")", ",", "\n", "inception", "(", "256", ",", "[", "[", "64", "]", ",", "[", "3", ",", "32", ",", "64", "]", ",", "[", "5", ",", "32", ",", "64", "]", ",", "[", "7", ",", "32", ",", "64", "]", "]", ")", ",", "\n", "inception", "(", "256", ",", "[", "[", "32", "]", ",", "[", "3", ",", "32", ",", "32", "]", ",", "[", "5", ",", "32", ",", "32", "]", ",", "[", "7", ",", "32", ",", "32", "]", "]", ")", ",", "\n", "nn", ".", "UpsamplingBilinear2d", "(", "scale_factor", "=", "2", ")", "\n", ")", "\n", ")", "# BD2EG", "\n", "self", ".", "list", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "inception", "(", "128", ",", "[", "[", "32", "]", ",", "[", "3", ",", "32", ",", "32", "]", ",", "[", "5", ",", "32", ",", "32", "]", ",", "[", "7", ",", "32", ",", "32", "]", "]", ")", ",", "\n", "inception", "(", "128", ",", "[", "[", "32", "]", ",", "[", "3", ",", "64", ",", "32", "]", ",", "[", "7", ",", "64", ",", "32", "]", ",", "[", "11", ",", "64", ",", "32", "]", "]", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.hourglass.Channels3.forward": [[130, 132], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "list", "[", "0", "]", "(", "x", ")", "+", "self", ".", "list", "[", "1", "]", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.hourglass.Channels4.__init__": [[135, 152], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "hourglass.Channels4.list.append", "hourglass.Channels4.list.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "hourglass.inception", "hourglass.inception", "hourglass.Channels3", "hourglass.inception", "hourglass.inception", "torch.UpsamplingBilinear2d", "torch.UpsamplingBilinear2d", "hourglass.inception"], "methods", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.nerf.run_nerf_helpers.NeRF.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Channels4", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "list", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "AvgPool2d", "(", "2", ")", ",", "\n", "inception", "(", "128", ",", "[", "[", "32", "]", ",", "[", "3", ",", "32", ",", "32", "]", ",", "[", "5", ",", "32", ",", "32", "]", ",", "[", "7", ",", "32", ",", "32", "]", "]", ")", ",", "\n", "inception", "(", "128", ",", "[", "[", "32", "]", ",", "[", "3", ",", "32", ",", "32", "]", ",", "[", "5", ",", "32", ",", "32", "]", ",", "[", "7", ",", "32", ",", "32", "]", "]", ")", ",", "\n", "Channels3", "(", ")", ",", "\n", "inception", "(", "128", ",", "[", "[", "32", "]", ",", "[", "3", ",", "64", ",", "32", "]", ",", "[", "5", ",", "64", ",", "32", "]", ",", "[", "7", ",", "64", ",", "32", "]", "]", ")", ",", "\n", "inception", "(", "128", ",", "[", "[", "16", "]", ",", "[", "3", ",", "32", ",", "16", "]", ",", "[", "7", ",", "32", ",", "16", "]", ",", "[", "11", ",", "32", ",", "16", "]", "]", ")", ",", "\n", "nn", ".", "UpsamplingBilinear2d", "(", "scale_factor", "=", "2", ")", "\n", ")", "\n", ")", "# BB3BA", "\n", "self", ".", "list", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "inception", "(", "128", ",", "[", "[", "16", "]", ",", "[", "3", ",", "64", ",", "16", "]", ",", "[", "7", ",", "64", ",", "16", "]", ",", "[", "11", ",", "64", ",", "16", "]", "]", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.hourglass.Channels4.forward": [[155, 157], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "list", "[", "0", "]", "(", "x", ")", "+", "self", ".", "list", "[", "1", "]", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.hourglass.HourglassModel.__init__": [[160, 174], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "hourglass.Channels4", "torch.Conv2d", "torch.Conv2d", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.nerf.run_nerf_helpers.NeRF.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_input", ")", ":", "\n", "        ", "super", "(", "HourglassModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "seq", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_input", ",", "128", ",", "7", ",", "padding", "=", "3", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "Channels4", "(", ")", ",", "\n", ")", "\n", "\n", "uncertainty_layer", "=", "[", "\n", "nn", ".", "Conv2d", "(", "64", ",", "1", ",", "3", ",", "padding", "=", "1", ")", ",", "torch", ".", "nn", ".", "Sigmoid", "(", ")", "]", "\n", "self", ".", "uncertainty_layer", "=", "torch", ".", "nn", ".", "Sequential", "(", "*", "uncertainty_layer", ")", "\n", "self", ".", "pred_layer", "=", "nn", ".", "Conv2d", "(", "64", ",", "1", ",", "3", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.hourglass.HourglassModel.forward": [[175, 182], ["hourglass.HourglassModel.seq", "hourglass.HourglassModel.pred_layer", "hourglass.HourglassModel.uncertainty_layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_", ")", ":", "\n", "        ", "pred_feature", "=", "self", ".", "seq", "(", "input_", ")", "\n", "\n", "pred_d", "=", "self", ".", "pred_layer", "(", "pred_feature", ")", "\n", "pred_confidence", "=", "self", ".", "uncertainty_layer", "(", "pred_feature", ")", "\n", "\n", "return", "pred_d", ",", "pred_confidence", "\n", "", "", ""]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.base_model.BaseModel.name": [[20, 22], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'BaseModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.base_model.BaseModel.initialize": [[23, 29], ["os.path.join"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "gpu_ids", "=", "opt", ".", "gpu_ids", "\n", "self", ".", "isTrain", "=", "opt", ".", "isTrain", "\n", "self", ".", "Tensor", "=", "torch", ".", "cuda", ".", "FloatTensor", "if", "self", ".", "gpu_ids", "else", "torch", ".", "Tensor", "\n", "self", ".", "save_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.base_model.BaseModel.set_input": [[30, 32], ["None"], "methods", ["None"], ["", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "        ", "self", ".", "input", "=", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.base_model.BaseModel.forward": [[33, 35], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.base_model.BaseModel.test": [[37, 39], ["None"], "methods", ["None"], ["", "def", "test", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.base_model.BaseModel.get_image_paths": [[40, 42], ["None"], "methods", ["None"], ["", "def", "get_image_paths", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.base_model.BaseModel.optimize_parameters": [[43, 45], ["None"], "methods", ["None"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.base_model.BaseModel.get_current_visuals": [[46, 48], ["None"], "methods", ["None"], ["", "def", "get_current_visuals", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.base_model.BaseModel.get_current_errors": [[49, 51], ["None"], "methods", ["None"], ["", "def", "get_current_errors", "(", "self", ")", ":", "\n", "        ", "return", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.base_model.BaseModel.save": [[52, 54], ["None"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "label", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.base_model.BaseModel.save_network": [[56, 62], ["os.path.join", "torch.save", "network.cpu().state_dict", "len", "torch.cuda.is_available", "network.cuda", "network.cpu"], "methods", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.pix2pix_model.Pix2PixModel.save"], ["", "def", "save_network", "(", "self", ",", "network", ",", "network_label", ",", "epoch_label", ",", "gpu_ids", ")", ":", "\n", "        ", "save_filename", "=", "'_%s_net_%s.pth'", "%", "(", "epoch_label", ",", "network_label", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "save_filename", ")", "\n", "torch", ".", "save", "(", "network", ".", "cpu", "(", ")", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "if", "len", "(", "gpu_ids", ")", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "network", ".", "cuda", "(", "gpu_ids", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.base_model.BaseModel.load_network": [[64, 70], ["os.path.join", "print", "torch.load"], "methods", ["None"], ["", "", "def", "load_network", "(", "self", ",", "network", ",", "network_label", ",", "epoch_label", ")", ":", "\n", "        ", "save_filename", "=", "'%s_net_%s.pth'", "%", "(", "epoch_label", ",", "network_label", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "save_filename", ")", "\n", "print", "(", "save_path", ")", "\n", "model", "=", "torch", ".", "load", "(", "save_path", ")", "\n", "return", "model", "\n", "# network.load_state_dict(torch.load(save_path))", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.base_model.BaseModel.update_learning_rate": [[72, 74], ["None"], "methods", ["None"], ["", "def", "update_learning_rate", "(", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.pix2pix_model.HourglassVariant.__init__": [[34, 53], ["super().__init__", "list", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential.children", "torch.nn.Sequential.children", "torch.nn.Sequential.children", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.nerf.run_nerf_helpers.NeRF.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_input", ",", "model", ")", ":", "\n", "        ", "super", "(", "HourglassVariant", ",", "self", ")", ".", "__init__", "(", ")", "\n", "layer_list", "=", "list", "(", "model", ".", "children", "(", ")", ")", "\n", "removed", "=", "layer_list", "[", "1", ":", "-", "1", "]", "\n", "self", ".", "pred_layer", "=", "layer_list", "[", "-", "1", "]", "\n", "model", "=", "torch", ".", "nn", ".", "Sequential", "(", "*", "removed", ")", "\n", "\n", "uncertainty_layer", "=", "[", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "64", ",", "1", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ")", ",", "\n", "torch", ".", "nn", ".", "Sigmoid", "(", ")", "\n", "]", "\n", "self", ".", "uncertainty_layer", "=", "torch", ".", "nn", ".", "Sequential", "(", "*", "uncertainty_layer", ")", "\n", "new_input_layer", "=", "torch", ".", "nn", ".", "Conv2d", "(", "\n", "num_input", ",", "128", ",", "(", "7", ",", "7", ")", ",", "(", "1", ",", "1", ")", ",", "(", "3", ",", "3", ")", ")", "\n", "\n", "nn", ".", "init", ".", "normal_", "(", "new_input_layer", ".", "weight", ".", "data", ",", "0.0", ",", "0.02", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "new_input_layer", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n", "self", ".", "new_model", "=", "torch", ".", "nn", ".", "Sequential", "(", "new_input_layer", ",", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.pix2pix_model.HourglassVariant.forward": [[54, 61], ["pix2pix_model.HourglassVariant.new_model", "pix2pix_model.HourglassVariant.pred_layer", "pix2pix_model.HourglassVariant.uncertainty_layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_", ")", ":", "\n", "        ", "pred_feature", "=", "self", ".", "new_model", "(", "input_", ")", "\n", "\n", "pred_d", "=", "self", ".", "pred_layer", "(", "pred_feature", ")", "\n", "pred_confidence", "=", "self", ".", "uncertainty_layer", "(", "pred_feature", ")", "\n", "\n", "return", "pred_d", ",", "pred_confidence", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.pix2pix_model.Pix2PixModel.name": [[65, 67], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'Pix2PixModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.pix2pix_model.Pix2PixModel.__init__": [[68, 129], ["pix2pix_model.Pix2PixModel.initialize", "pix2pix_model.Pix2PixModel.netG.train", "print", "hourglass.HourglassModel", "print", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel.to", "torch.nn.DataParallel.to", "torch.nn.DataParallel.to", "print", "sys.exit", "networks.JointLoss", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "networks.get_scheduler", "print", "networks.print_network", "print", "torch.nn.DataParallel.load_state_dict", "torch.nn.DataParallel.load_state_dict", "torch.nn.DataParallel.load_state_dict", "pix2pix_model.Pix2PixModel.netG.parameters", "ValueError", "pix2pix_model.Pix2PixModel.load_network", "pix2pix_model.Pix2PixModel.load_network", "pix2pix_model.Pix2PixModel.load_network", "print", "sys.exit"], "methods", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.depth_priors.mannequin_challenge_model.MannequinChallengeModel.train", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.get_scheduler", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.print_network", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.depth_priors.mannequin_challenge_model.MannequinChallengeModel.parameters", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.base_model.BaseModel.load_network"], ["", "def", "__init__", "(", "self", ",", "opt", ",", "_isTrain", "=", "False", ")", ":", "\n", "        ", "self", ".", "initialize", "(", "opt", ")", "\n", "\n", "self", ".", "mode", "=", "opt", ".", "mode", "\n", "if", "opt", ".", "input", "==", "'single_view'", ":", "\n", "            ", "self", ".", "num_input", "=", "3", "\n", "", "elif", "opt", ".", "input", "==", "'two_view'", ":", "\n", "            ", "self", ".", "num_input", "=", "6", "\n", "", "elif", "opt", ".", "input", "==", "'two_view_k'", ":", "\n", "            ", "self", ".", "num_input", "=", "7", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown input type %s\"", "%", "opt", ".", "input", ")", "\n", "\n", "", "if", "self", ".", "mode", "==", "'Ours_Bilinear'", ":", "\n", "            ", "print", "(", "\n", "'======================================  DIW NETWORK TRAIN FROM %s======================='", "\n", "%", "self", ".", "mode", ")", "\n", "\n", "new_model", "=", "hourglass", ".", "HourglassModel", "(", "self", ".", "num_input", ")", "\n", "\n", "print", "(", "\n", "'===================Loading Pretrained Model OURS ==================================='", "\n", ")", "\n", "\n", "if", "not", "_isTrain", ":", "\n", "                ", "if", "self", ".", "num_input", "==", "7", ":", "\n", "                    ", "model_parameters", "=", "self", ".", "load_network", "(", "\n", "new_model", ",", "'G'", ",", "'best_depth_Ours_Bilinear_inc_7'", ")", "\n", "", "elif", "self", ".", "num_input", "==", "3", ":", "\n", "                    ", "model_parameters", "=", "self", ".", "load_network", "(", "\n", "new_model", ",", "'G'", ",", "'best_depth_Ours_Bilinear_inc_3'", ")", "\n", "", "elif", "self", ".", "num_input", "==", "6", ":", "\n", "                    ", "model_parameters", "=", "self", ".", "load_network", "(", "\n", "new_model", ",", "'G'", ",", "'best_depth_Ours_Bilinear_inc_6'", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "'Something Wrong'", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n", "", "new_model", ".", "load_state_dict", "(", "model_parameters", ")", "\n", "\n", "", "new_model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "new_model", ")", "\n", "new_model", ".", "to", "(", "\"cuda\"", ")", "\n", "\n", "self", ".", "netG", "=", "new_model", "\n", "\n", "", "else", ":", "\n", "            ", "print", "(", "'ONLY SUPPORT Ours_Bilinear'", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n", "", "self", ".", "old_lr", "=", "opt", ".", "lr", "\n", "self", ".", "netG", ".", "train", "(", ")", "\n", "\n", "if", "True", ":", "\n", "            ", "self", ".", "criterion_joint", "=", "networks", ".", "JointLoss", "(", "opt", ")", "\n", "# initialize optimizers", "\n", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "self", ".", "netG", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ")", "\n", "self", ".", "scheduler", "=", "networks", ".", "get_scheduler", "(", "self", ".", "optimizer_G", ",", "opt", ")", "\n", "print", "(", "'---------- Networks initialized -------------'", ")", "\n", "networks", ".", "print_network", "(", "self", ".", "netG", ")", "\n", "print", "(", "'-----------------------------------------------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.pix2pix_model.Pix2PixModel.set_writer": [[130, 132], ["None"], "methods", ["None"], ["", "", "def", "set_writer", "(", "self", ",", "writer", ")", ":", "\n", "        ", "self", ".", "writer", "=", "writer", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.pix2pix_model.Pix2PixModel.set_input": [[133, 136], ["None"], "methods", ["None"], ["", "def", "set_input", "(", "self", ",", "stack_imgs", ",", "targets", ")", ":", "\n", "        ", "self", ".", "input", "=", "stack_imgs", "\n", "self", ".", "targets", "=", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.pix2pix_model.Pix2PixModel.forward": [[137, 177], ["torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "pix2pix_model.Pix2PixModel.netG.forward", "pix2pix_model.Pix2PixModel.prediction_d.squeeze", "pix2pix_model.Pix2PixModel.pred_confidence.squeeze", "pix2pix_model.Pix2PixModel.input.cuda", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.Variable", "torch.Variable", "torch.Variable", "pix2pix_model.Pix2PixModel.targets[].cuda", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "print", "sys.exit", "pix2pix_model.Pix2PixModel.targets[].cuda", "pix2pix_model.Pix2PixModel.targets[].cuda", "pix2pix_model.Pix2PixModel.targets[].cuda", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "pix2pix_model.Pix2PixModel.targets[].cuda", "pix2pix_model.Pix2PixModel.targets[].cuda"], "methods", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.nerf.run_nerf_helpers.NeRF.forward"], ["", "def", "forward", "(", "self", ")", ":", "\n", "\n", "# run first network", "\n", "        ", "self", ".", "input_images", "=", "autograd", ".", "Variable", "(", "self", ".", "input", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", "\n", "human_mask", "=", "1.0", "-", "autograd", ".", "Variable", "(", "\n", "self", ".", "targets", "[", "'env_mask'", "]", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", ".", "unsqueeze", "(", "1", ")", "\n", "keypoints_img", "=", "autograd", ".", "Variable", "(", "\n", "self", ".", "targets", "[", "'keypoints_img'", "]", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "# stack inputs", "\n", "stack_inputs", "=", "None", "\n", "\n", "if", "self", ".", "num_input", "==", "7", ":", "\n", "            ", "input_log_depth", "=", "autograd", ".", "Variable", "(", "\n", "self", ".", "targets", "[", "'input_log_depth'", "]", ".", "cuda", "(", ")", ",", "\n", "requires_grad", "=", "False", ")", ".", "unsqueeze", "(", "1", ")", "\n", "input_confidence", "=", "autograd", ".", "Variable", "(", "\n", "self", ".", "targets", "[", "'input_confidence'", "]", ".", "cuda", "(", ")", ",", "\n", "requires_grad", "=", "False", ")", ".", "unsqueeze", "(", "1", ")", "\n", "stack_inputs", "=", "torch", ".", "cat", "(", "(", "self", ".", "input_images", ",", "human_mask", ",", "keypoints_img", ",", "\n", "input_log_depth", ",", "input_confidence", ")", ",", "1", ")", "\n", "", "elif", "self", ".", "num_input", "==", "6", ":", "\n", "            ", "input_log_depth", "=", "autograd", ".", "Variable", "(", "\n", "self", ".", "targets", "[", "'input_log_depth'", "]", ".", "cuda", "(", ")", ",", "\n", "requires_grad", "=", "False", ")", ".", "unsqueeze", "(", "1", ")", "\n", "input_confidence", "=", "autograd", ".", "Variable", "(", "\n", "self", ".", "targets", "[", "'input_confidence'", "]", ".", "cuda", "(", ")", ",", "\n", "requires_grad", "=", "False", ")", ".", "unsqueeze", "(", "1", ")", "\n", "stack_inputs", "=", "torch", ".", "cat", "(", "\n", "(", "self", ".", "input_images", ",", "human_mask", ",", "input_log_depth", ",", "input_confidence", ")", ",", "1", ")", "\n", "", "elif", "self", ".", "num_input", "==", "3", ":", "\n", "            ", "stack_inputs", "=", "self", ".", "input_images", "\n", "", "else", ":", "\n", "            ", "print", "(", "'SOMETHING WRONG with num_input !!!!!!!!!!!!!!!!!!!!!!!'", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n", "", "self", ".", "prediction_d", ",", "self", ".", "pred_confidence", "=", "self", ".", "netG", ".", "forward", "(", "\n", "stack_inputs", ")", "\n", "self", ".", "prediction_d", "=", "self", ".", "prediction_d", ".", "squeeze", "(", "1", ")", "\n", "self", ".", "pred_confidence", "=", "self", ".", "pred_confidence", ".", "squeeze", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.pix2pix_model.Pix2PixModel.get_image_paths": [[178, 180], ["None"], "methods", ["None"], ["", "def", "get_image_paths", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "image_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.pix2pix_model.Pix2PixModel.write_summary": [[181, 245], ["torch.exp().unsqueeze().repeat", "torch.exp().unsqueeze().repeat", "torch.exp().unsqueeze().repeat", "torch.exp().unsqueeze().repeat", "torch.exp().unsqueeze().repeat", "torch.exp().unsqueeze().repeat", "torch.exp().unsqueeze().repeat", "torch.exp().unsqueeze().repeat", "torch.exp().unsqueeze().repeat", "targets[].unsqueeze().repeat", "numpy.percentile", "targets[].unsqueeze().repeat", "pred_confidence.data.unsqueeze().repeat", "pix2pix_model.Pix2PixModel.writer.add_image", "pix2pix_model.Pix2PixModel.writer.add_image", "pix2pix_model.Pix2PixModel.writer.add_image", "pix2pix_model.Pix2PixModel.writer.add_image", "pix2pix_model.Pix2PixModel.writer.add_image", "pix2pix_model.Pix2PixModel.writer.add_image", "pix2pix_model.Pix2PixModel.writer.add_image", "pix2pix_model.Pix2PixModel.writer.add_image", "targets[].unsqueeze().repeat", "torch.exp().unsqueeze().repeat.numpy", "torch.exp().unsqueeze().repeat.numpy", "torch.exp().unsqueeze().repeat.numpy", "targets[].unsqueeze().repeat", "pix2pix_model.Pix2PixModel.writer.add_scalar", "torchvision.make_grid", "torchvision.make_grid", "torchvision.make_grid", "torchvision.make_grid", "torchvision.make_grid", "torchvision.make_grid", "torchvision.make_grid", "torchvision.make_grid", "torch.exp().unsqueeze", "torch.exp().unsqueeze", "torch.exp().unsqueeze", "torch.exp().unsqueeze", "torch.exp().unsqueeze", "torch.exp().unsqueeze", "torch.exp().unsqueeze", "torch.exp().unsqueeze", "torch.exp().unsqueeze", "targets[].unsqueeze", "targets[].unsqueeze", "pred_confidence.data.unsqueeze", "input_images[].data.cpu", "targets[].unsqueeze", "targets[].unsqueeze", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "prediction_d.data.cpu"], "methods", ["None"], ["", "def", "write_summary", "(", "self", ",", "\n", "mode_name", ",", "\n", "input_images", ",", "\n", "prediction_d", ",", "\n", "pred_confidence", ",", "\n", "targets", ",", "\n", "n_iter", ",", "\n", "loss", "=", "None", ")", ":", "\n", "\n", "        ", "invere_depth_pred", "=", "torch", ".", "exp", "(", "-", "prediction_d", ".", "data", ".", "cpu", "(", ")", ")", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "\n", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "\n", "invere_depth_gt", "=", "1.0", "/", "targets", "[", "'depth_gt'", "]", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "gt_mask", "=", "targets", "[", "'gt_mask'", "]", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "\n", "invere_depth_gt", "=", "invere_depth_gt", "*", "gt_mask", "\n", "min_depth", ",", "max_depth", "=", "np", ".", "percentile", "(", "\n", "invere_depth_pred", ".", "numpy", "(", ")", ",", "[", "1", ",", "99", "]", ")", "\n", "invere_depth_pred", "[", "invere_depth_pred", ">", "max_depth", "]", "=", "0.0", "\n", "invere_depth_pred", "[", "invere_depth_pred", "<", "min_depth", "]", "=", "0.0", "\n", "\n", "inv_depth_mask", "=", "invere_depth_pred", "*", "gt_mask", "\n", "\n", "human_mask", "=", "1.0", "-", "targets", "[", "'env_mask'", "]", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "input_confidence", "=", "targets", "[", "'input_confidence'", "]", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "\n", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "pred_confidence_saved", "=", "pred_confidence", ".", "data", ".", "unsqueeze", "(", "\n", "1", ")", ".", "repeat", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "\n", "if", "loss", ":", "\n", "            ", "self", ".", "writer", ".", "add_scalar", "(", "mode_name", "+", "'/loss'", ",", "loss", ",", "n_iter", ")", "\n", "\n", "", "self", ".", "writer", ".", "add_image", "(", "\n", "mode_name", "+", "'/image'", ",", "\n", "vutils", ".", "make_grid", "(", "\n", "input_images", "[", ":", "8", ",", ":", ",", ":", ",", ":", "]", ".", "data", ".", "cpu", "(", ")", ",", "normalize", "=", "True", ")", ",", "\n", "n_iter", ")", "\n", "self", ".", "writer", ".", "add_image", "(", "\n", "mode_name", "+", "'/pred_full'", ",", "\n", "vutils", ".", "make_grid", "(", "invere_depth_pred", "[", ":", "8", ",", ":", ",", ":", ",", ":", "]", ",", "normalize", "=", "True", ")", ",", "\n", "n_iter", ")", "\n", "self", ".", "writer", ".", "add_image", "(", "\n", "mode_name", "+", "'/pred_mask'", ",", "\n", "vutils", ".", "make_grid", "(", "inv_depth_mask", "[", ":", "8", ",", ":", ",", ":", ",", ":", "]", ",", "normalize", "=", "True", ")", ",", "n_iter", ")", "\n", "self", ".", "writer", ".", "add_image", "(", "\n", "mode_name", "+", "'/pred_confidence'", ",", "\n", "vutils", ".", "make_grid", "(", "\n", "pred_confidence_saved", "[", ":", "8", ",", ":", ",", ":", ",", ":", "]", ",", "normalize", "=", "True", ")", ",", "\n", "n_iter", ")", "\n", "\n", "self", ".", "writer", ".", "add_image", "(", "\n", "mode_name", "+", "'/gt_depth'", ",", "\n", "vutils", ".", "make_grid", "(", "invere_depth_gt", "[", ":", "8", ",", ":", ",", ":", ",", ":", "]", ",", "normalize", "=", "True", ")", ",", "n_iter", ")", "\n", "self", ".", "writer", ".", "add_image", "(", "\n", "mode_name", "+", "'/gt_mask'", ",", "\n", "vutils", ".", "make_grid", "(", "gt_mask", "[", ":", "8", ",", ":", ",", ":", ",", ":", "]", ",", "normalize", "=", "True", ")", ",", "n_iter", ")", "\n", "\n", "self", ".", "writer", ".", "add_image", "(", "\n", "mode_name", "+", "'/human_mask'", ",", "\n", "vutils", ".", "make_grid", "(", "human_mask", "[", ":", "8", ",", ":", ",", ":", ",", ":", "]", ",", "normalize", "=", "True", ")", ",", "n_iter", ")", "\n", "self", ".", "writer", ".", "add_image", "(", "\n", "mode_name", "+", "'/input_confidence'", ",", "\n", "vutils", ".", "make_grid", "(", "input_confidence", "[", ":", "8", ",", ":", ",", ":", ",", ":", "]", ",", "normalize", "=", "True", ")", ",", "n_iter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.pix2pix_model.Pix2PixModel.backward_G": [[246, 260], ["pix2pix_model.Pix2PixModel.criterion_joint", "print", "pix2pix_model.Pix2PixModel.criterion_joint.get_loss_var", "pix2pix_model.Pix2PixModel.loss_joint_var.backward", "pix2pix_model.Pix2PixModel.write_summary"], "methods", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.JointLoss.get_loss_var", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.pix2pix_model.Pix2PixModel.write_summary"], ["", "def", "backward_G", "(", "self", ",", "n_iter", ")", ":", "\n", "# Combined loss", "\n", "        ", "self", ".", "loss_joint", "=", "self", ".", "criterion_joint", "(", "self", ".", "input_images", ",", "self", ".", "prediction_d", ",", "\n", "self", ".", "pred_confidence", ",", "self", ".", "targets", ")", "\n", "print", "(", "'Train loss is %f '", "%", "self", ".", "loss_joint", ")", "\n", "\n", "# add to tensorboard", "\n", "if", "n_iter", "%", "100", "==", "0", ":", "\n", "            ", "self", ".", "write_summary", "(", "'Train'", ",", "self", ".", "input_images", ",", "self", ".", "prediction_d", ",", "\n", "self", ".", "pred_confidence", ",", "self", ".", "targets", ",", "n_iter", ",", "\n", "self", ".", "loss_joint", ")", "\n", "\n", "", "self", ".", "loss_joint_var", "=", "self", ".", "criterion_joint", ".", "get_loss_var", "(", ")", "\n", "self", ".", "loss_joint_var", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.pix2pix_model.Pix2PixModel.optimize_parameters": [[261, 266], ["pix2pix_model.Pix2PixModel.forward", "pix2pix_model.Pix2PixModel.optimizer_G.zero_grad", "pix2pix_model.Pix2PixModel.backward_G", "pix2pix_model.Pix2PixModel.optimizer_G.step"], "methods", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.nerf.run_nerf_helpers.NeRF.forward", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.pix2pix_model.Pix2PixModel.backward_G"], ["", "def", "optimize_parameters", "(", "self", ",", "n_iter", ")", ":", "\n", "        ", "self", ".", "forward", "(", ")", "\n", "self", ".", "optimizer_G", ".", "zero_grad", "(", ")", "\n", "self", ".", "backward_G", "(", "n_iter", ")", "\n", "self", ".", "optimizer_G", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.pix2pix_model.Pix2PixModel.evlaute_M_error": [[267, 311], ["torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "pix2pix_model.Pix2PixModel.netG.forward", "prediction_d.squeeze", "pix2pix_model.Pix2PixModel.criterion_joint.compute_si_rmse", "input_.cuda", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "sc_inv_full.item", "sc_inv_human.item", "sc_inv_env.item", "sc_inv_intra.item", "sc_inv_inter.item", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.Variable", "torch.Variable", "torch.Variable", "targets[].cuda", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "print", "sys.exit", "targets[].cuda", "targets[].cuda", "targets[].cuda", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "targets[].cuda", "targets[].cuda"], "methods", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.nerf.run_nerf_helpers.NeRF.forward", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.JointLoss.compute_si_rmse"], ["", "def", "evlaute_M_error", "(", "self", ",", "input_", ",", "targets", ",", "n_iter", ",", "write_to_summary", ")", ":", "\n", "# switch to evaluation mode", "\n", "        ", "input_imgs", "=", "autograd", ".", "Variable", "(", "input_", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", "\n", "# stack inputs", "\n", "human_mask", "=", "1.0", "-", "autograd", ".", "Variable", "(", "\n", "targets", "[", "'env_mask'", "]", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", ".", "unsqueeze", "(", "1", ")", "\n", "keypoints_img", "=", "autograd", ".", "Variable", "(", "\n", "targets", "[", "'keypoints_img'", "]", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "if", "self", ".", "num_input", "==", "7", ":", "\n", "            ", "input_log_depth", "=", "autograd", ".", "Variable", "(", "\n", "targets", "[", "'input_log_depth'", "]", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", ".", "unsqueeze", "(", "1", ")", "\n", "input_confidence", "=", "autograd", ".", "Variable", "(", "\n", "targets", "[", "'input_confidence'", "]", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", ".", "unsqueeze", "(", "1", ")", "\n", "stack_inputs", "=", "torch", ".", "cat", "(", "(", "input_imgs", ",", "human_mask", ",", "keypoints_img", ",", "\n", "input_log_depth", ",", "input_confidence", ")", ",", "1", ")", "\n", "", "elif", "self", ".", "num_input", "==", "6", ":", "\n", "            ", "input_log_depth", "=", "autograd", ".", "Variable", "(", "\n", "targets", "[", "'input_log_depth'", "]", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", ".", "unsqueeze", "(", "1", ")", "\n", "input_confidence", "=", "autograd", ".", "Variable", "(", "\n", "targets", "[", "'input_confidence'", "]", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", ".", "unsqueeze", "(", "1", ")", "\n", "stack_inputs", "=", "torch", ".", "cat", "(", "\n", "(", "input_imgs", ",", "human_mask", ",", "input_log_depth", ",", "input_confidence", ")", ",", "1", ")", "\n", "", "elif", "self", ".", "num_input", "==", "3", ":", "\n", "            ", "stack_inputs", "=", "input_imgs", "\n", "", "else", ":", "\n", "            ", "print", "(", "'SOMETHING WRONG!!!!!!!!!!!!!!!!!!!!!!!'", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n", "", "prediction_d", ",", "_", "=", "self", ".", "netG", ".", "forward", "(", "stack_inputs", ")", "\n", "\n", "pred_log_d", "=", "prediction_d", ".", "squeeze", "(", "1", ")", "\n", "\n", "sc_inv_full", ",", "sc_inv_human", ",", "sc_inv_env", ",", "sc_inv_intra", ",", "sc_inv_inter", "=", "self", ".", "criterion_joint", ".", "compute_si_rmse", "(", "\n", "pred_log_d", ".", "data", ",", "targets", ")", "\n", "sc_inv_errors", "=", "[", "\n", "sc_inv_full", ".", "item", "(", ")", ",", "\n", "sc_inv_human", ".", "item", "(", ")", ",", "\n", "sc_inv_env", ".", "item", "(", ")", ",", "\n", "sc_inv_intra", ".", "item", "(", ")", ",", "\n", "sc_inv_inter", ".", "item", "(", ")", "\n", "]", "\n", "\n", "return", "sc_inv_errors", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.pix2pix_model.Pix2PixModel.eval_save_tum_img": [[312, 384], ["torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "pix2pix_model.Pix2PixModel.netG.forward", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "pred_confidence.squeeze.squeeze.squeeze", "range", "input_.cuda", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.exp.squeeze", "torch.exp.squeeze", "torch.exp.squeeze", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "len", "torch.exp.data[].cpu().numpy", "torch.exp.data[].cpu().numpy", "torch.exp.data[].cpu().numpy", "numpy.transpose", "print", "h5py.File", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "input_imgs[].cpu().numpy", "torch.Variable", "torch.Variable", "torch.Variable", "targets[].cuda", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "print", "sys.exit", "[].split", "torch.exp.data[].cpu", "torch.exp.data[].cpu", "torch.exp.data[].cpu", "[].split", "targets[].cuda", "targets[].cuda", "targets[].cuda", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "input_imgs[].cpu", "targets[].cuda", "targets[].cuda"], "methods", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.nerf.run_nerf_helpers.NeRF.forward"], ["", "def", "eval_save_tum_img", "(", "self", ",", "input_", ",", "targets", ",", "save_path", ")", ":", "\n", "        ", "input_imgs", "=", "autograd", ".", "Variable", "(", "input_", ".", "cuda", "(", ")", ")", "\n", "human_mask", "=", "1.0", "-", "autograd", ".", "Variable", "(", "\n", "targets", "[", "'env_mask'", "]", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", ".", "unsqueeze", "(", "1", ")", "\n", "keypoints_img", "=", "autograd", ".", "Variable", "(", "\n", "targets", "[", "'keypoints_img'", "]", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "if", "self", ".", "num_input", "==", "7", ":", "\n", "            ", "input_log_depth", "=", "autograd", ".", "Variable", "(", "\n", "targets", "[", "'input_log_depth'", "]", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", ".", "unsqueeze", "(", "1", ")", "\n", "input_confidence", "=", "autograd", ".", "Variable", "(", "\n", "targets", "[", "'input_confidence'", "]", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", ".", "unsqueeze", "(", "1", ")", "\n", "stack_inputs", "=", "torch", ".", "cat", "(", "(", "input_imgs", ",", "human_mask", ",", "keypoints_img", ",", "\n", "input_log_depth", ",", "input_confidence", ")", ",", "1", ")", "\n", "", "elif", "self", ".", "num_input", "==", "6", ":", "\n", "            ", "input_log_depth", "=", "autograd", ".", "Variable", "(", "\n", "targets", "[", "'input_log_depth'", "]", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", ".", "unsqueeze", "(", "1", ")", "\n", "input_confidence", "=", "autograd", ".", "Variable", "(", "\n", "targets", "[", "'input_confidence'", "]", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", ".", "unsqueeze", "(", "1", ")", "\n", "stack_inputs", "=", "torch", ".", "cat", "(", "\n", "(", "input_imgs", ",", "human_mask", ",", "input_log_depth", ",", "input_confidence", ")", ",", "1", ")", "\n", "", "elif", "self", ".", "num_input", "==", "3", ":", "\n", "            ", "stack_inputs", "=", "input_imgs", "\n", "", "else", ":", "\n", "            ", "print", "(", "'SOMETHING WRONG!!!!!!!!!!!!!!!!!!!!!!!'", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n", "", "prediction_d", ",", "pred_confidence", "=", "self", ".", "netG", ".", "forward", "(", "stack_inputs", ")", "\n", "prediction_d", "=", "torch", ".", "exp", "(", "prediction_d", ".", "squeeze", "(", "1", ")", ")", "\n", "pred_confidence", "=", "pred_confidence", ".", "squeeze", "(", "1", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "0", ",", "len", "(", "targets", "[", "'img_1_path'", "]", ")", ")", ":", "\n", "\n", "            ", "youtube_dir", "=", "save_path", "+", "targets", "[", "'img_1_path'", "]", "[", "i", "]", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "youtube_dir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "youtube_dir", ")", "\n", "\n", "", "pred_d_ref", "=", "prediction_d", ".", "data", "[", "i", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "saved_img", "=", "np", ".", "transpose", "(", "\n", "input_imgs", "[", "i", ",", ":", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "\n", "output_path", "=", "youtube_dir", "+", "'/'", "+", "targets", "[", "'img_1_path'", "]", "[", "i", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "\n", "print", "(", "'output_path'", ",", "output_path", ")", "\n", "input_confidence", "=", "targets", "[", "'input_confidence'", "]", "[", "i", "]", "\n", "gt_depth", "=", "targets", "[", "'depth_gt'", "]", "[", "i", "]", "\n", "gt_mask", "=", "targets", "[", "'gt_mask'", "]", "[", "i", "]", "\n", "human_mask", "=", "1.0", "-", "targets", "[", "'env_mask'", "]", "[", "i", "]", "\n", "\n", "# K = targets['K'][i]", "\n", "# T_1_G = targets['T_1_G'][i]", "\n", "\n", "hdf5_file_write", "=", "h5py", ".", "File", "(", "output_path", ",", "'w'", ")", "\n", "hdf5_file_write", ".", "create_dataset", "(", "\n", "'/prediction/img'", ",", "data", "=", "saved_img", ",", "dtype", "=", "'float32'", ")", "\n", "hdf5_file_write", ".", "create_dataset", "(", "\n", "'/prediction/pred_depth'", ",", "data", "=", "pred_d_ref", ",", "dtype", "=", "'float32'", ")", "\n", "hdf5_file_write", ".", "create_dataset", "(", "\n", "'/prediction/gt_depth'", ",", "data", "=", "gt_depth", ",", "dtype", "=", "'float32'", ")", "\n", "hdf5_file_write", ".", "create_dataset", "(", "\n", "'/prediction/gt_mask'", ",", "data", "=", "gt_mask", ",", "dtype", "=", "'float32'", ")", "\n", "hdf5_file_write", ".", "create_dataset", "(", "\n", "'/prediction/input_confidence'", ",", "\n", "data", "=", "input_confidence", ",", "\n", "dtype", "=", "'float32'", ")", "\n", "hdf5_file_write", ".", "create_dataset", "(", "\n", "'/prediction/human_mask'", ",", "data", "=", "human_mask", ",", "dtype", "=", "'float32'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.pix2pix_model.Pix2PixModel.evaluate_tum_error": [[385, 433], ["torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "pix2pix_model.Pix2PixModel.netG.forward", "prediction_d.squeeze", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "pix2pix_model.Pix2PixModel.criterion_joint.compute_si_rmse", "pix2pix_model.Pix2PixModel.criterion_joint.compute_l1_rel_error", "pix2pix_model.Pix2PixModel.criterion_joint.compute_rmse_error", "input_.cuda", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "sc_inv_full.item", "sc_inv_human.item", "sc_inv_env.item", "sc_inv_intra.item", "sc_inv_inter.item", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.Variable", "torch.Variable", "torch.Variable", "targets[].cuda", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "print", "sys.exit", "targets[].cuda", "targets[].cuda", "targets[].cuda", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "targets[].cuda", "targets[].cuda"], "methods", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.nerf.run_nerf_helpers.NeRF.forward", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.JointLoss.compute_si_rmse", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.JointLoss.compute_l1_rel_error", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.networks.JointLoss.compute_rmse_error"], ["", "", "def", "evaluate_tum_error", "(", "self", ",", "input_", ",", "targets", ",", "n_iter", ",", "write_to_summary", ")", ":", "\n", "        ", "input_imgs", "=", "autograd", ".", "Variable", "(", "input_", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", "\n", "human_mask", "=", "1.0", "-", "autograd", ".", "Variable", "(", "\n", "targets", "[", "'env_mask'", "]", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", ".", "unsqueeze", "(", "1", ")", "\n", "keypoints_img", "=", "autograd", ".", "Variable", "(", "\n", "targets", "[", "'keypoints_img'", "]", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "if", "self", ".", "num_input", "==", "7", ":", "\n", "            ", "input_log_depth", "=", "autograd", ".", "Variable", "(", "\n", "targets", "[", "'input_log_depth'", "]", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", ".", "unsqueeze", "(", "1", ")", "\n", "input_confidence", "=", "autograd", ".", "Variable", "(", "\n", "targets", "[", "'input_confidence'", "]", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", ".", "unsqueeze", "(", "1", ")", "\n", "stack_inputs", "=", "torch", ".", "cat", "(", "(", "input_imgs", ",", "human_mask", ",", "keypoints_img", ",", "\n", "input_log_depth", ",", "input_confidence", ")", ",", "1", ")", "\n", "", "elif", "self", ".", "num_input", "==", "6", ":", "\n", "            ", "input_log_depth", "=", "autograd", ".", "Variable", "(", "\n", "targets", "[", "'input_log_depth'", "]", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", ".", "unsqueeze", "(", "1", ")", "\n", "input_confidence", "=", "autograd", ".", "Variable", "(", "\n", "targets", "[", "'input_confidence'", "]", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", ".", "unsqueeze", "(", "1", ")", "\n", "stack_inputs", "=", "torch", ".", "cat", "(", "\n", "(", "input_imgs", ",", "human_mask", ",", "input_log_depth", ",", "input_confidence", ")", ",", "1", ")", "\n", "", "elif", "self", ".", "num_input", "==", "3", ":", "\n", "            ", "stack_inputs", "=", "input_imgs", "\n", "", "else", ":", "\n", "            ", "print", "(", "'SOMETHING WRONG!!!!!!!!!!!!!!!!!!!!!!!'", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n", "", "prediction_d", ",", "_", "=", "self", ".", "netG", ".", "forward", "(", "stack_inputs", ")", "\n", "\n", "pred_log_d", "=", "prediction_d", ".", "squeeze", "(", "1", ")", "\n", "pred_d", "=", "torch", ".", "exp", "(", "pred_log_d", ")", "\n", "\n", "sc_inv_full", ",", "sc_inv_human", ",", "sc_inv_env", ",", "sc_inv_intra", ",", "sc_inv_inter", "=", "self", ".", "criterion_joint", ".", "compute_si_rmse", "(", "\n", "pred_log_d", ".", "data", ",", "targets", ")", "\n", "l1_rel_full", "=", "self", ".", "criterion_joint", ".", "compute_l1_rel_error", "(", "\n", "pred_d", ".", "data", ",", "targets", ")", "\n", "RMSE_full", "=", "self", ".", "criterion_joint", ".", "compute_rmse_error", "(", "\n", "pred_d", ".", "data", ",", "targets", ")", "\n", "\n", "sc_inv_errors", "=", "[", "\n", "sc_inv_full", ".", "item", "(", ")", ",", "\n", "sc_inv_human", ".", "item", "(", ")", ",", "\n", "sc_inv_env", ".", "item", "(", ")", ",", "\n", "sc_inv_intra", ".", "item", "(", ")", ",", "\n", "sc_inv_inter", ".", "item", "(", ")", "\n", "]", "\n", "\n", "return", "sc_inv_errors", ",", "l1_rel_full", ",", "RMSE_full", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.pix2pix_model.Pix2PixModel.eval_save_img": [[434, 521], ["torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "pix2pix_model.Pix2PixModel.netG.forward", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "range", "input_.cuda", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "prediction_log_d.squeeze", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "len", "print", "torch.exp.data[].cpu().numpy", "torch.exp.data[].cpu().numpy", "torch.exp.data[].cpu().numpy", "numpy.transpose", "human_mask.data[].cpu().numpy", "h5py.File", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.close", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "input_imgs[].cpu().numpy", "torch.Variable", "torch.Variable", "torch.Variable", "targets[].cuda", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "print", "sys.exit", "[].split", "torch.exp.data[].cpu", "torch.exp.data[].cpu", "torch.exp.data[].cpu", "human_mask.data[].cpu", "[].split", "targets[].cuda", "targets[].cuda", "targets[].cuda", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "input_imgs[].cpu", "torch.Variable", "torch.Variable", "torch.Variable", "targets[].cuda", "targets[].cuda", "targets[].cuda"], "methods", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.nerf.run_nerf_helpers.NeRF.forward"], ["", "def", "eval_save_img", "(", "self", ",", "input_", ",", "targets", ",", "save_path", ")", ":", "\n", "        ", "input_imgs", "=", "autograd", ".", "Variable", "(", "input_", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", "\n", "human_mask", "=", "1.0", "-", "autograd", ".", "Variable", "(", "\n", "targets", "[", "'env_mask'", "]", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", ".", "unsqueeze", "(", "1", ")", "\n", "keypoints_img", "=", "autograd", ".", "Variable", "(", "\n", "targets", "[", "'keypoints_img'", "]", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "if", "self", ".", "num_input", "==", "7", ":", "\n", "            ", "input_log_depth", "=", "autograd", ".", "Variable", "(", "\n", "targets", "[", "'input_log_depth'", "]", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", ".", "unsqueeze", "(", "1", ")", "\n", "input_confidence", "=", "autograd", ".", "Variable", "(", "\n", "targets", "[", "'input_confidence'", "]", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", ".", "unsqueeze", "(", "1", ")", "\n", "stack_inputs", "=", "torch", ".", "cat", "(", "(", "input_imgs", ",", "human_mask", ",", "keypoints_img", ",", "\n", "input_log_depth", ",", "input_confidence", ")", ",", "1", ")", "\n", "", "elif", "self", ".", "num_input", "==", "6", ":", "\n", "            ", "human_mask", "=", "1.0", "-", "autograd", ".", "Variable", "(", "\n", "targets", "[", "'env_mask'", "]", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", ".", "unsqueeze", "(", "1", ")", "\n", "input_log_depth", "=", "autograd", ".", "Variable", "(", "\n", "targets", "[", "'input_log_depth'", "]", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", ".", "unsqueeze", "(", "1", ")", "\n", "input_confidence", "=", "autograd", ".", "Variable", "(", "\n", "targets", "[", "'input_confidence'", "]", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", ".", "unsqueeze", "(", "1", ")", "\n", "stack_inputs", "=", "torch", ".", "cat", "(", "\n", "(", "input_imgs", ",", "human_mask", ",", "input_log_depth", ",", "input_confidence", ")", ",", "1", ")", "\n", "", "elif", "self", ".", "num_input", "==", "3", ":", "\n", "            ", "stack_inputs", "=", "input_imgs", "\n", "", "else", ":", "\n", "            ", "print", "(", "'SOMETHING WRONG!!!!!!!!!!!!!!!!!!!!!!!'", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n", "", "prediction_log_d", ",", "_", "=", "self", ".", "netG", ".", "forward", "(", "stack_inputs", ")", "\n", "prediction_d", "=", "torch", ".", "exp", "(", "prediction_log_d", ".", "squeeze", "(", "1", ")", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "0", ",", "len", "(", "targets", "[", "'img_1_path'", "]", ")", ")", ":", "\n", "\n", "            ", "youtube_dir", "=", "save_path", "+", "targets", "[", "'img_1_path'", "]", "[", "i", "]", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "\n", "\n", "print", "(", "'youtube_dir '", ",", "youtube_dir", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "youtube_dir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "youtube_dir", ")", "\n", "\n", "", "pred_d_ref", "=", "prediction_d", ".", "data", "[", "i", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "saved_img", "=", "np", ".", "transpose", "(", "\n", "input_imgs", "[", "i", ",", ":", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "human_mask_ref", "=", "human_mask", ".", "data", "[", "i", ",", "0", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "output_path", "=", "youtube_dir", "+", "'/'", "+", "targets", "[", "'img_1_path'", "]", "[", "i", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "gt_depth_ref", "=", "targets", "[", "'depth_gt'", "]", "[", "i", "]", "\n", "gt_mask_ref", "=", "targets", "[", "'gt_mask'", "]", "[", "i", "]", "\n", "input_confidence_ref", "=", "targets", "[", "'input_confidence'", "]", "[", "i", "]", "\n", "keypoints_img", "=", "targets", "[", "'keypoints_img'", "]", "[", "i", "]", "\n", "\n", "input_depth_final_ref", "=", "targets", "[", "'input_depth_final'", "]", "[", "i", "]", "\n", "full_flow", "=", "targets", "[", "'full_flow'", "]", "[", "i", "]", "\n", "img_2", "=", "targets", "[", "'img_2'", "]", "[", "i", "]", "\n", "\n", "K", "=", "targets", "[", "'K'", "]", "[", "i", "]", "\n", "T_1_G", "=", "targets", "[", "'T_1_G'", "]", "[", "i", "]", "\n", "\n", "hdf5_file_write", "=", "h5py", ".", "File", "(", "output_path", ",", "'w'", ")", "\n", "hdf5_file_write", ".", "create_dataset", "(", "'/prediction/img'", ",", "data", "=", "saved_img", ")", "\n", "hdf5_file_write", ".", "create_dataset", "(", "\n", "'/prediction/pred_depth'", ",", "data", "=", "pred_d_ref", ")", "\n", "\n", "hdf5_file_write", ".", "create_dataset", "(", "\n", "'/prediction/gt_depth'", ",", "data", "=", "gt_depth_ref", ")", "\n", "hdf5_file_write", ".", "create_dataset", "(", "\n", "'/prediction/gt_mask'", ",", "data", "=", "gt_mask_ref", ")", "\n", "hdf5_file_write", ".", "create_dataset", "(", "\n", "'/prediction/human_mask'", ",", "data", "=", "human_mask_ref", ")", "\n", "hdf5_file_write", ".", "create_dataset", "(", "\n", "'/prediction/input_confidence'", ",", "data", "=", "input_confidence_ref", ")", "\n", "hdf5_file_write", ".", "create_dataset", "(", "\n", "'/prediction/input_pp_depth'", ",", "data", "=", "input_depth_final_ref", ")", "\n", "hdf5_file_write", ".", "create_dataset", "(", "\n", "'/prediction/keypoints_img'", ",", "data", "=", "keypoints_img", ")", "\n", "hdf5_file_write", ".", "create_dataset", "(", "\n", "'/prediction/full_flow'", ",", "data", "=", "full_flow", ")", "\n", "hdf5_file_write", ".", "create_dataset", "(", "'/prediction/img_2'", ",", "data", "=", "img_2", ")", "\n", "\n", "hdf5_file_write", ".", "create_dataset", "(", "'/prediction/K'", ",", "data", "=", "K", ")", "\n", "hdf5_file_write", ".", "create_dataset", "(", "'/prediction/T_1_G'", ",", "data", "=", "T_1_G", ")", "\n", "hdf5_file_write", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.pix2pix_model.Pix2PixModel.run_and_save_videos_prediction": [[522, 612], ["torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "pix2pix_model.Pix2PixModel.netG.forward", "prediction_d.squeeze", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "pred_confidence.squeeze.squeeze.squeeze", "range", "input_.cuda", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "torch.Variable().unsqueeze", "targets[].cuda", "targets[].cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "len", "numpy.transpose", "torch.exp.data[].cpu().numpy", "torch.exp.data[].cpu().numpy", "torch.exp.data[].cpu().numpy", "pred_confidence.squeeze.squeeze.data[].cpu().numpy", "human_mask.data[].cpu().numpy", "torch.Variable.data[].cpu().numpy", "input_depth[].data.cpu().numpy", "input_confidence[].data.cpu().numpy", "full_flow[].data.cpu().numpy", "print", "h5py.File", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.close", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "input_imgs[].cpu().numpy", "torch.Variable", "torch.Variable", "torch.Variable", "targets[].cuda", "targets[].cuda", "targets[].cuda", "print", "sys.exit", "[].split", "torch.exp.data[].cpu", "torch.exp.data[].cpu", "torch.exp.data[].cpu", "pred_confidence.squeeze.squeeze.data[].cpu", "human_mask.data[].cpu", "torch.Variable.data[].cpu", "input_depth[].data.cpu", "input_confidence[].data.cpu", "full_flow[].data.cpu", "[].split", "targets[].cuda", "input_imgs[].cpu"], "methods", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.nerf.run_nerf_helpers.NeRF.forward"], ["", "", "def", "run_and_save_videos_prediction", "(", "self", ",", "input_", ",", "targets", ",", "save_path", ")", ":", "\n", "        ", "input_imgs", "=", "autograd", ".", "Variable", "(", "input_", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n", "human_mask", "=", "1.0", "-", "autograd", ".", "Variable", "(", "\n", "targets", "[", "'env_mask'", "]", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", ".", "unsqueeze", "(", "1", ")", "\n", "input_log_depth", "=", "autograd", ".", "Variable", "(", "\n", "targets", "[", "'input_log_depth'", "]", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", ".", "unsqueeze", "(", "1", ")", "\n", "input_confidence", "=", "autograd", ".", "Variable", "(", "\n", "targets", "[", "'input_confidence'", "]", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", ".", "unsqueeze", "(", "1", ")", "\n", "keypoints_img", "=", "autograd", ".", "Variable", "(", "\n", "targets", "[", "'keypoints_img'", "]", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "mvs_depth", "=", "autograd", ".", "Variable", "(", "targets", "[", "'mvs_depth'", "]", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", "\n", "input_depth", "=", "autograd", ".", "Variable", "(", "\n", "targets", "[", "'input_depth'", "]", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n", "full_flow", "=", "targets", "[", "'full_flow'", "]", "\n", "\n", "if", "self", ".", "num_input", "==", "7", ":", "\n", "            ", "stack_inputs", "=", "torch", ".", "cat", "(", "(", "input_imgs", ",", "human_mask", ",", "keypoints_img", ",", "\n", "input_log_depth", ",", "input_confidence", ")", ",", "1", ")", "\n", "", "elif", "self", ".", "num_input", "==", "6", ":", "\n", "            ", "stack_inputs", "=", "torch", ".", "cat", "(", "\n", "(", "input_imgs", ",", "human_mask", ",", "input_log_depth", ",", "input_confidence", ")", ",", "1", ")", "\n", "", "elif", "self", ".", "num_input", "==", "3", ":", "\n", "            ", "stack_inputs", "=", "input_imgs", "\n", "", "else", ":", "\n", "            ", "print", "(", "'SOMETHING WRONG!!!!!!!!!!!!!!!!!!!!!!!'", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n", "", "prediction_d", ",", "pred_confidence", "=", "self", ".", "netG", ".", "forward", "(", "stack_inputs", ")", "\n", "\n", "pred_log_d", "=", "prediction_d", ".", "squeeze", "(", "1", ")", "\n", "pred_d", "=", "torch", ".", "exp", "(", "pred_log_d", ")", "\n", "pred_confidence", "=", "pred_confidence", ".", "squeeze", "(", "1", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "0", ",", "len", "(", "targets", "[", "'img_1_path'", "]", ")", ")", ":", "\n", "\n", "            ", "youtube_dir", "=", "save_path", "+", "targets", "[", "'img_1_path'", "]", "[", "i", "]", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "youtube_dir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "youtube_dir", ")", "\n", "\n", "", "saved_img", "=", "np", ".", "transpose", "(", "\n", "input_imgs", "[", "i", ",", ":", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "\n", "pred_d_ref", "=", "pred_d", ".", "data", "[", "i", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pred_confidence_ref", "=", "pred_confidence", ".", "data", "[", "i", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "human_mask_ref", "=", "human_mask", ".", "data", "[", "i", ",", "0", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "mvs_depth_ref", "=", "mvs_depth", ".", "data", "[", "i", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "input_depth_ref", "=", "input_depth", "[", "i", ",", ":", ",", ":", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "input_confidence_ref", "=", "input_confidence", "[", "i", ",", "0", ",", ":", ",", ":", "]", ".", "data", ".", "cpu", "(", "\n", ")", ".", "numpy", "(", ")", "\n", "full_flow_ref", "=", "full_flow", "[", "i", ",", ":", ",", ":", ",", ":", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "output_path", "=", "youtube_dir", "+", "'/'", "+", "targets", "[", "'img_1_path'", "]", "[", "i", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "\n", "K", "=", "targets", "[", "'K'", "]", "[", "i", "]", "\n", "T_1_G", "=", "targets", "[", "'T_1_G'", "]", "[", "i", "]", "\n", "original_mvs_depth", "=", "targets", "[", "'original_mvs_depth'", "]", "[", "i", "]", "\n", "\n", "print", "(", "'output_path'", ",", "output_path", ")", "\n", "hdf5_file_write", "=", "h5py", ".", "File", "(", "output_path", ",", "'w'", ")", "\n", "hdf5_file_write", ".", "create_dataset", "(", "'/prediction/img'", ",", "data", "=", "saved_img", ")", "\n", "hdf5_file_write", ".", "create_dataset", "(", "\n", "'/prediction/pred_depth'", ",", "data", "=", "pred_d_ref", ")", "\n", "hdf5_file_write", ".", "create_dataset", "(", "'/prediction/K'", ",", "data", "=", "K", ")", "\n", "hdf5_file_write", ".", "create_dataset", "(", "'/prediction/T_1_G'", ",", "data", "=", "T_1_G", ")", "\n", "hdf5_file_write", ".", "create_dataset", "(", "\n", "'/prediction/confidence'", ",", "data", "=", "pred_confidence_ref", ")", "\n", "hdf5_file_write", ".", "create_dataset", "(", "\n", "'/prediction/human_mask'", ",", "data", "=", "human_mask_ref", ")", "\n", "hdf5_file_write", ".", "create_dataset", "(", "\n", "'/prediction/input_depth'", ",", "data", "=", "input_depth_ref", ")", "\n", "hdf5_file_write", ".", "create_dataset", "(", "\n", "'/prediction/input_confidence'", ",", "data", "=", "input_confidence_ref", ")", "\n", "hdf5_file_write", ".", "create_dataset", "(", "\n", "'/prediction/mvs_depth'", ",", "data", "=", "mvs_depth_ref", ")", "\n", "hdf5_file_write", ".", "create_dataset", "(", "\n", "'/prediction/full_flow'", ",", "data", "=", "full_flow_ref", ")", "\n", "hdf5_file_write", ".", "create_dataset", "(", "\n", "'/prediction/original_mvs_depth'", ",", "data", "=", "original_mvs_depth", ")", "\n", "\n", "hdf5_file_write", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.pix2pix_model.Pix2PixModel.run_and_save_DAVIS": [[613, 648], ["torch.Variable", "torch.Variable", "torch.Variable", "pix2pix_model.Pix2PixModel.netG.forward", "prediction_d.squeeze", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "range", "input_.cuda", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "len", "numpy.transpose", "torch.exp.data[].cpu().numpy", "torch.exp.data[].cpu().numpy", "torch.exp.data[].cpu().numpy", "print", "numpy.tile", "numpy.concatenate", "skimage.io.imsave", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "input_imgs[].cpu().numpy", "numpy.max", "numpy.expand_dims", "[].split", "torch.exp.data[].cpu", "torch.exp.data[].cpu", "torch.exp.data[].cpu", "[].split", "input_imgs[].cpu"], "methods", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.nerf.run_nerf_helpers.NeRF.forward"], ["", "", "def", "run_and_save_DAVIS", "(", "self", ",", "input_", ",", "targets", ",", "save_path", ")", ":", "\n", "        ", "assert", "(", "self", ".", "num_input", "==", "3", ")", "\n", "input_imgs", "=", "autograd", ".", "Variable", "(", "input_", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n", "stack_inputs", "=", "input_imgs", "\n", "\n", "prediction_d", ",", "pred_confidence", "=", "self", ".", "netG", ".", "forward", "(", "stack_inputs", ")", "\n", "pred_log_d", "=", "prediction_d", ".", "squeeze", "(", "1", ")", "\n", "pred_d", "=", "torch", ".", "exp", "(", "pred_log_d", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "0", ",", "len", "(", "targets", "[", "'img_1_path'", "]", ")", ")", ":", "\n", "\n", "            ", "youtube_dir", "=", "save_path", "+", "targets", "[", "'img_1_path'", "]", "[", "i", "]", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "youtube_dir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "youtube_dir", ")", "\n", "\n", "", "saved_img", "=", "np", ".", "transpose", "(", "\n", "input_imgs", "[", "i", ",", ":", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "\n", "pred_d_ref", "=", "pred_d", ".", "data", "[", "i", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "output_path", "=", "youtube_dir", "+", "'/'", "+", "targets", "[", "'img_1_path'", "]", "[", "i", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "print", "(", "output_path", ")", "\n", "disparity", "=", "1.", "/", "pred_d_ref", "\n", "disparity", "=", "disparity", "/", "np", ".", "max", "(", "disparity", ")", "\n", "disparity", "=", "np", ".", "tile", "(", "np", ".", "expand_dims", "(", "disparity", ",", "axis", "=", "-", "1", ")", ",", "(", "1", ",", "1", ",", "3", ")", ")", "\n", "saved_imgs", "=", "np", ".", "concatenate", "(", "(", "saved_img", ",", "disparity", ")", ",", "axis", "=", "1", ")", "\n", "saved_imgs", "=", "(", "saved_imgs", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "imsave", "(", "output_path", ",", "saved_imgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.pix2pix_model.Pix2PixModel.switch_to_train": [[649, 651], ["pix2pix_model.Pix2PixModel.netG.train"], "methods", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.depth_priors.mannequin_challenge_model.MannequinChallengeModel.train"], ["", "", "def", "switch_to_train", "(", "self", ")", ":", "\n", "        ", "self", ".", "netG", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.pix2pix_model.Pix2PixModel.switch_to_eval": [[652, 654], ["pix2pix_model.Pix2PixModel.netG.eval"], "methods", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.depth_priors.mannequin_challenge_model.MannequinChallengeModel.eval"], ["", "def", "switch_to_eval", "(", "self", ")", ":", "\n", "        ", "self", ".", "netG", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.pix2pix_model.Pix2PixModel.save": [[655, 657], ["pix2pix_model.Pix2PixModel.save_network"], "methods", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.base_model.BaseModel.save_network"], ["", "def", "save", "(", "self", ",", "label", ")", ":", "\n", "        ", "self", ".", "save_network", "(", "self", ".", "netG", ",", "'G'", ",", "label", ",", "self", ".", "gpu_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.models.pix2pix_model.Pix2PixModel.update_learning_rate": [[658, 662], ["pix2pix_model.Pix2PixModel.scheduler.step", "print"], "methods", ["None"], ["", "def", "update_learning_rate", "(", "self", ")", ":", "\n", "        ", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "lr", "=", "self", ".", "optimizer_G", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "print", "(", "'Current learning rate = %.7f'", "%", "lr", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.options.train_options.TrainOptions.initialize": [[19, 62], ["base_options.BaseOptions.initialize", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument"], "methods", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.options.base_options.BaseOptions.initialize"], ["    ", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "BaseOptions", ".", "initialize", "(", "self", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--display_freq'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "'frequency of showing training results on screen'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--print_freq'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "'frequency of showing training results on console'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--save_latest_freq'", ",", "type", "=", "int", ",", "\n", "default", "=", "5000", ",", "help", "=", "'frequency of saving the latest results'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--save_epoch_freq'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "\n", "help", "=", "'frequency of saving checkpoints at the end of epochs'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--continue_train'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'continue training: load the latest model'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "'--phase'", ",", "type", "=", "str", ",", "default", "=", "'train'", ",", "help", "=", "'train, val, test, etc'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--which_epoch'", ",", "type", "=", "str", ",", "default", "=", "'latest'", ",", "\n", "help", "=", "'which epoch to load? set to latest to use latest cached model'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "'--niter'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'# of iter at starting learning rate'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--niter_decay'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "'# of iter to linearly decay learning rate to zero'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lr_decay_epoch'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "\n", "help", "=", "'# of epoch to linearly decay learning rate to zero'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lr_policy'", ",", "type", "=", "str", ",", "default", "=", "'step'", ",", "\n", "help", "=", "'learning rate policy: lambda|step|plateau'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "'--beta1'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'momentum term of adam'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.0004", ",", "help", "=", "'initial learning rate for adam'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_lsgan'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'do *not* use least square GAN, if false, use vanilla GAN'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "'--lambda_A'", ",", "type", "=", "float", ",", "default", "=", "10.0", ",", "help", "=", "'weight for cycle loss (A -> B -> A)'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "'--lambda_B'", ",", "type", "=", "float", ",", "default", "=", "10.0", ",", "help", "=", "'weight for cycle loss (B -> A -> B)'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--pool_size'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "\n", "help", "=", "'the size of image buffer that stores previously generated images'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_html'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'do not save intermediate training results to [opt.checkpoints_dir]/[opt.name]/web/'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_flip'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'if specified, do not flip the images for data argumentation'", ")", "\n", "\n", "self", ".", "isTrain", "=", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.options.base_options.BaseOptions.__init__": [[21, 24], ["argparse.ArgumentParser"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "self", ".", "initialized", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.options.base_options.BaseOptions.initialize": [[25, 78], ["base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "float"], "methods", ["None"], ["", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "self", ".", "parser", ".", "add_argument", "(", "\n", "'--input'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "choices", "=", "[", "'single_view'", ",", "'two_view'", ",", "'two_view_k'", "]", ",", "\n", "help", "=", "'type of input. One of \"single_view\", \"two_view\" (no human keypoints),'", "\n", "'\"two_view_k\" (with human keypoints)'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--simple_keypoints'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'which epoch to load? set to latest to use latest cached model'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--mode'", ",", "type", "=", "str", ",", "default", "=", "'Ours_Bilinear'", ",", "\n", "help", "=", "'which epoch to load? set to latest to use latest cached model'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--human_data_term'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'which epoch to load? set to latest to use latest cached model'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "'--batchSize'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "help", "=", "'input batch size'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "'--loadSize'", ",", "type", "=", "int", ",", "default", "=", "286", ",", "help", "=", "'scale images to this size'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "'--fineSize'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'then crop to this size'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "'--output_nc'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'# of output image channels'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "'--ngf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of gen filters in first conv layer'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "'--ndf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of discrim filters in first conv layer'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--which_model_netG'", ",", "type", "=", "str", ",", "\n", "default", "=", "'unet_256'", ",", "help", "=", "'selects model to use for netG'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "'--gpu_ids'", ",", "type", "=", "str", ",", "default", "=", "'0,1,2,3'", ",", "help", "=", "'gpu ids: e.g. 0  0,1,2, 0,2'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--name'", ",", "type", "=", "str", ",", "default", "=", "'test_local'", ",", "\n", "help", "=", "'name of the experiment. It decides where to store samples and models'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'pix2pix'", ",", "\n", "help", "=", "'chooses which model to use. cycle_gan, one_direction_test, pix2pix, ...'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "'--nThreads'", ",", "default", "=", "2", ",", "type", "=", "int", ",", "help", "=", "'# threads for loading data'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--checkpoints_dir'", ",", "type", "=", "str", ",", "\n", "default", "=", "'./checkpoints/'", ",", "help", "=", "'models are saved here'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--norm'", ",", "type", "=", "str", ",", "default", "=", "'instance'", ",", "\n", "help", "=", "'instance normalization or batch normalization'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--serial_batches'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'if true, takes images in order to make batches, otherwise takes them randomly'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "'--display_winsize'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'display window size'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "'--display_id'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'window id of the web display'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--identity'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "\n", "help", "=", "'use identity mapping. Setting identity other than 1 has an effect of scaling the weight of the identity mapping loss. For example, if the weight of the identity loss should be 10 times smaller than the weight of the reconstruction loss, please set optidentity = 0.1'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "'--use_dropout'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use dropout for the generator'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--max_dataset_size'", ",", "type", "=", "int", ",", "default", "=", "float", "(", "\n", "\"inf\"", ")", ",", "help", "=", "'Maximum number of samples allowed per dataset. If the dataset directory contains more than max_dataset_size, only a subset is loaded.'", ")", "\n", "\n", "self", ".", "initialized", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.options.base_options.BaseOptions.parse": [[79, 109], ["base_options.BaseOptions.parser.parse_args", "base_options.BaseOptions.opt.gpu_ids.split", "vars", "print", "sorted", "print", "os.path.join", "util.util.util.mkdirs", "os.path.join", "base_options.BaseOptions.initialize", "int", "vars.items", "print", "open", "opt_file.write", "sorted", "opt_file.write", "base_options.BaseOptions.opt.gpu_ids.append", "vars.items", "opt_file.write", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.util.util.mkdirs", "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.options.base_options.BaseOptions.initialize"], ["", "def", "parse", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "initialized", ":", "\n", "            ", "self", ".", "initialize", "(", ")", "\n", "", "self", ".", "opt", "=", "self", ".", "parser", ".", "parse_args", "(", ")", "\n", "self", ".", "opt", ".", "isTrain", "=", "self", ".", "isTrain", "# train or test", "\n", "\n", "str_ids", "=", "self", ".", "opt", ".", "gpu_ids", ".", "split", "(", "','", ")", "\n", "self", ".", "opt", ".", "gpu_ids", "=", "[", "]", "\n", "for", "str_id", "in", "str_ids", ":", "\n", "            ", "id", "=", "int", "(", "str_id", ")", "\n", "if", "id", ">=", "0", ":", "\n", "                ", "self", ".", "opt", ".", "gpu_ids", ".", "append", "(", "id", ")", "\n", "\n", "", "", "args", "=", "vars", "(", "self", ".", "opt", ")", "\n", "\n", "print", "(", "'------------ Options -------------'", ")", "\n", "for", "k", ",", "v", "in", "sorted", "(", "args", ".", "items", "(", ")", ")", ":", "\n", "            ", "print", "(", "'%s: %s'", "%", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ")", ")", "\n", "", "print", "(", "'-------------- End ----------------'", ")", "\n", "\n", "# save to the disk", "\n", "expr_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "checkpoints_dir", ",", "self", ".", "opt", ".", "name", ")", "\n", "util", ".", "mkdirs", "(", "expr_dir", ")", "\n", "file_name", "=", "os", ".", "path", ".", "join", "(", "expr_dir", ",", "'opt.txt'", ")", "\n", "with", "open", "(", "file_name", ",", "'wt'", ")", "as", "opt_file", ":", "\n", "            ", "opt_file", ".", "write", "(", "'------------ Options -------------\\n'", ")", "\n", "for", "k", ",", "v", "in", "sorted", "(", "args", ".", "items", "(", ")", ")", ":", "\n", "                ", "opt_file", ".", "write", "(", "'%s: %s\\n'", "%", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ")", ")", "\n", "", "opt_file", ".", "write", "(", "'-------------- End ----------------\\n'", ")", "\n", "", "return", "self", ".", "opt", "\n", "", "", ""]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.nerf.run_nerf_helpers.Embedder.__init__": [[20, 23], ["run_nerf_helpers.Embedder.create_embedding_fn"], "methods", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.nerf.run_nerf_helpers.Embedder.create_embedding_fn"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "kwargs", "=", "kwargs", "\n", "self", ".", "create_embedding_fn", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.nerf.run_nerf_helpers.Embedder.create_embedding_fn": [[24, 47], ["embed_fns.append", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "embed_fns.append", "p_fn"], "methods", ["None"], ["", "def", "create_embedding_fn", "(", "self", ")", ":", "\n", "        ", "embed_fns", "=", "[", "]", "\n", "d", "=", "self", ".", "kwargs", "[", "'input_dims'", "]", "\n", "out_dim", "=", "0", "\n", "if", "self", ".", "kwargs", "[", "'include_input'", "]", ":", "\n", "            ", "embed_fns", ".", "append", "(", "lambda", "x", ":", "x", ")", "\n", "out_dim", "+=", "d", "\n", "\n", "", "max_freq", "=", "self", ".", "kwargs", "[", "'max_freq_log2'", "]", "\n", "N_freqs", "=", "self", ".", "kwargs", "[", "'num_freqs'", "]", "\n", "\n", "if", "self", ".", "kwargs", "[", "'log_sampling'", "]", ":", "\n", "            ", "freq_bands", "=", "2.", "**", "torch", ".", "linspace", "(", "0.", ",", "max_freq", ",", "steps", "=", "N_freqs", ")", "\n", "", "else", ":", "\n", "            ", "freq_bands", "=", "torch", ".", "linspace", "(", "2.", "**", "0.", ",", "2.", "**", "max_freq", ",", "steps", "=", "N_freqs", ")", "\n", "\n", "", "for", "freq", "in", "freq_bands", ":", "\n", "            ", "for", "p_fn", "in", "self", ".", "kwargs", "[", "'periodic_fns'", "]", ":", "\n", "                ", "embed_fns", ".", "append", "(", "lambda", "x", ",", "p_fn", "=", "p_fn", ",", "freq", "=", "freq", ":", "p_fn", "(", "x", "*", "freq", ")", ")", "\n", "out_dim", "+=", "d", "\n", "\n", "", "", "self", ".", "embed_fns", "=", "embed_fns", "\n", "self", ".", "out_dim", "=", "out_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.nerf.run_nerf_helpers.Embedder.embed": [[48, 50], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "fn"], "methods", ["None"], ["", "def", "embed", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "return", "torch", ".", "cat", "(", "[", "fn", "(", "inputs", ")", "for", "fn", "in", "self", ".", "embed_fns", "]", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.nerf.run_nerf_helpers.NeRF.__init__": [[72, 99], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "range"], "methods", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.nerf.run_nerf_helpers.NeRF.__init__"], ["    ", "def", "__init__", "(", "self", ",", "D", "=", "8", ",", "W", "=", "256", ",", "input_ch", "=", "3", ",", "input_ch_views", "=", "3", ",", "output_ch", "=", "4", ",", "skips", "=", "[", "4", "]", ",", "use_viewdirs", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        \"\"\"", "\n", "super", "(", "NeRF", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "D", "=", "D", "\n", "self", ".", "W", "=", "W", "\n", "self", ".", "input_ch", "=", "input_ch", "\n", "self", ".", "input_ch_views", "=", "input_ch_views", "\n", "self", ".", "skips", "=", "skips", "\n", "self", ".", "use_viewdirs", "=", "use_viewdirs", "\n", "\n", "self", ".", "pts_linears", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "Linear", "(", "input_ch", ",", "W", ")", "]", "+", "[", "nn", ".", "Linear", "(", "W", ",", "W", ")", "if", "i", "not", "in", "self", ".", "skips", "else", "nn", ".", "Linear", "(", "W", "+", "input_ch", ",", "W", ")", "for", "i", "in", "range", "(", "D", "-", "1", ")", "]", ")", "\n", "\n", "### Implementation according to the official code release (https://github.com/bmild/nerf/blob/master/run_nerf_helpers.py#L104-L105)", "\n", "self", ".", "views_linears", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "input_ch_views", "+", "W", ",", "W", "//", "2", ")", "]", ")", "\n", "\n", "### Implementation according to the paper", "\n", "# self.views_linears = nn.ModuleList(", "\n", "#     [nn.Linear(input_ch_views + W, W//2)] + [nn.Linear(W//2, W//2) for i in range(D//2)])", "\n", "\n", "if", "use_viewdirs", ":", "\n", "            ", "self", ".", "feature_linear", "=", "nn", ".", "Linear", "(", "W", ",", "W", ")", "\n", "self", ".", "alpha_linear", "=", "nn", ".", "Linear", "(", "W", ",", "1", ")", "\n", "self", ".", "rgb_linear", "=", "nn", ".", "Linear", "(", "W", "//", "2", ",", "3", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "output_linear", "=", "nn", ".", "Linear", "(", "W", ",", "output_ch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.nerf.run_nerf_helpers.NeRF.forward": [[100, 124], ["torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "enumerate", "torch.relu", "torch.relu", "torch.relu", "run_nerf_helpers.NeRF.alpha_linear", "run_nerf_helpers.NeRF.feature_linear", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "enumerate", "run_nerf_helpers.NeRF.rgb_linear", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "run_nerf_helpers.NeRF.output_linear", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "input_pts", ",", "input_views", "=", "torch", ".", "split", "(", "x", ",", "[", "self", ".", "input_ch", ",", "self", ".", "input_ch_views", "]", ",", "dim", "=", "-", "1", ")", "\n", "h", "=", "input_pts", "\n", "for", "i", ",", "l", "in", "enumerate", "(", "self", ".", "pts_linears", ")", ":", "\n", "            ", "h", "=", "self", ".", "pts_linears", "[", "i", "]", "(", "h", ")", "\n", "h", "=", "F", ".", "relu", "(", "h", ")", "\n", "if", "i", "in", "self", ".", "skips", ":", "\n", "                ", "h", "=", "torch", ".", "cat", "(", "[", "input_pts", ",", "h", "]", ",", "-", "1", ")", "\n", "\n", "", "", "if", "self", ".", "use_viewdirs", ":", "\n", "            ", "alpha", "=", "self", ".", "alpha_linear", "(", "h", ")", "\n", "feature", "=", "self", ".", "feature_linear", "(", "h", ")", "\n", "h", "=", "torch", ".", "cat", "(", "[", "feature", ",", "input_views", "]", ",", "-", "1", ")", "\n", "\n", "for", "i", ",", "l", "in", "enumerate", "(", "self", ".", "views_linears", ")", ":", "\n", "                ", "h", "=", "self", ".", "views_linears", "[", "i", "]", "(", "h", ")", "\n", "h", "=", "F", ".", "relu", "(", "h", ")", "\n", "\n", "", "rgb", "=", "self", ".", "rgb_linear", "(", "h", ")", "\n", "outputs", "=", "torch", ".", "cat", "(", "[", "rgb", ",", "alpha", "]", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "outputs", "=", "self", ".", "output_linear", "(", "h", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.nerf.run_nerf_helpers.NeRF.load_weights_from_keras": [[125, 153], ["range", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.transpose"], "methods", ["None"], ["", "def", "load_weights_from_keras", "(", "self", ",", "weights", ")", ":", "\n", "        ", "assert", "self", ".", "use_viewdirs", ",", "\"Not implemented if use_viewdirs=False\"", "\n", "\n", "# Load pts_linears", "\n", "for", "i", "in", "range", "(", "self", ".", "D", ")", ":", "\n", "            ", "idx_pts_linears", "=", "2", "*", "i", "\n", "self", ".", "pts_linears", "[", "i", "]", ".", "weight", ".", "data", "=", "torch", ".", "from_numpy", "(", "np", ".", "transpose", "(", "weights", "[", "idx_pts_linears", "]", ")", ")", "\n", "self", ".", "pts_linears", "[", "i", "]", ".", "bias", ".", "data", "=", "torch", ".", "from_numpy", "(", "np", ".", "transpose", "(", "weights", "[", "idx_pts_linears", "+", "1", "]", ")", ")", "\n", "\n", "# Load feature_linear", "\n", "", "idx_feature_linear", "=", "2", "*", "self", ".", "D", "\n", "self", ".", "feature_linear", ".", "weight", ".", "data", "=", "torch", ".", "from_numpy", "(", "np", ".", "transpose", "(", "weights", "[", "idx_feature_linear", "]", ")", ")", "\n", "self", ".", "feature_linear", ".", "bias", ".", "data", "=", "torch", ".", "from_numpy", "(", "np", ".", "transpose", "(", "weights", "[", "idx_feature_linear", "+", "1", "]", ")", ")", "\n", "\n", "# Load views_linears", "\n", "idx_views_linears", "=", "2", "*", "self", ".", "D", "+", "2", "\n", "self", ".", "views_linears", "[", "0", "]", ".", "weight", ".", "data", "=", "torch", ".", "from_numpy", "(", "np", ".", "transpose", "(", "weights", "[", "idx_views_linears", "]", ")", ")", "\n", "self", ".", "views_linears", "[", "0", "]", ".", "bias", ".", "data", "=", "torch", ".", "from_numpy", "(", "np", ".", "transpose", "(", "weights", "[", "idx_views_linears", "+", "1", "]", ")", ")", "\n", "\n", "# Load rgb_linear", "\n", "idx_rbg_linear", "=", "2", "*", "self", ".", "D", "+", "4", "\n", "self", ".", "rgb_linear", ".", "weight", ".", "data", "=", "torch", ".", "from_numpy", "(", "np", ".", "transpose", "(", "weights", "[", "idx_rbg_linear", "]", ")", ")", "\n", "self", ".", "rgb_linear", ".", "bias", ".", "data", "=", "torch", ".", "from_numpy", "(", "np", ".", "transpose", "(", "weights", "[", "idx_rbg_linear", "+", "1", "]", ")", ")", "\n", "\n", "# Load alpha_linear", "\n", "idx_alpha_linear", "=", "2", "*", "self", ".", "D", "+", "6", "\n", "self", ".", "alpha_linear", ".", "weight", ".", "data", "=", "torch", ".", "from_numpy", "(", "np", ".", "transpose", "(", "weights", "[", "idx_alpha_linear", "]", ")", ")", "\n", "self", ".", "alpha_linear", ".", "bias", ".", "data", "=", "torch", ".", "from_numpy", "(", "np", ".", "transpose", "(", "weights", "[", "idx_alpha_linear", "+", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.nerf.run_nerf_helpers.get_embedder": [[52, 68], ["run_nerf_helpers.Embedder", "eo.embed", "torch.Identity"], "function", ["home.repos.pwc.inspect_result.weiyithu_nerfingmvs.nerf.run_nerf_helpers.Embedder.embed"], ["", "", "def", "get_embedder", "(", "multires", ",", "i", "=", "0", ")", ":", "\n", "    ", "if", "i", "==", "-", "1", ":", "\n", "        ", "return", "nn", ".", "Identity", "(", ")", ",", "3", "\n", "\n", "", "embed_kwargs", "=", "{", "\n", "'include_input'", ":", "True", ",", "\n", "'input_dims'", ":", "3", ",", "\n", "'max_freq_log2'", ":", "multires", "-", "1", ",", "\n", "'num_freqs'", ":", "multires", ",", "\n", "'log_sampling'", ":", "True", ",", "\n", "'periodic_fns'", ":", "[", "torch", ".", "sin", ",", "torch", ".", "cos", "]", ",", "\n", "}", "\n", "\n", "embedder_obj", "=", "Embedder", "(", "**", "embed_kwargs", ")", "\n", "embed", "=", "lambda", "x", ",", "eo", "=", "embedder_obj", ":", "eo", ".", "embed", "(", "x", ")", "\n", "return", "embed", ",", "embedder_obj", ".", "out_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.nerf.run_nerf_helpers.get_rays": [[157, 167], ["torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "i.t.t", "j.t.t", "torch.stack", "torch.stack", "torch.stack", "torch.sum", "torch.sum", "torch.sum", "c2w[].expand", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "function", ["None"], ["", "", "def", "get_rays", "(", "H", ",", "W", ",", "focal", ",", "c2w", ")", ":", "\n", "    ", "i", ",", "j", "=", "torch", ".", "meshgrid", "(", "torch", ".", "linspace", "(", "0", ",", "W", "-", "1", ",", "W", ")", ",", "torch", ".", "linspace", "(", "0", ",", "H", "-", "1", ",", "H", ")", ")", "# pytorch's meshgrid has indexing='ij'", "\n", "i", "=", "i", ".", "t", "(", ")", "\n", "j", "=", "j", ".", "t", "(", ")", "\n", "dirs", "=", "torch", ".", "stack", "(", "[", "(", "i", "-", "W", "*", ".5", ")", "/", "focal", ",", "-", "(", "j", "-", "H", "*", ".5", ")", "/", "focal", ",", "-", "torch", ".", "ones_like", "(", "i", ")", "]", ",", "-", "1", ")", "\n", "# Rotate ray directions from camera frame to the world frame", "\n", "rays_d", "=", "torch", ".", "sum", "(", "dirs", "[", "...", ",", "np", ".", "newaxis", ",", ":", "]", "*", "c2w", "[", ":", "3", ",", ":", "3", "]", ",", "-", "1", ")", "# dot product, equals to: [c2w.dot(dir) for dir in dirs]", "\n", "# Translate camera frame's origin to the world frame. It is the origin of all rays.", "\n", "rays_o", "=", "c2w", "[", ":", "3", ",", "-", "1", "]", ".", "expand", "(", "rays_d", ".", "shape", ")", "\n", "return", "rays_o", ",", "rays_d", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.nerf.run_nerf_helpers.get_rays_np": [[169, 177], ["numpy.meshgrid", "numpy.stack", "numpy.sum", "numpy.broadcast_to", "numpy.arange", "numpy.arange", "numpy.shape", "numpy.ones_like"], "function", ["None"], ["", "def", "get_rays_np", "(", "H", ",", "W", ",", "focal", ",", "c2w", ")", ":", "\n", "    ", "i", ",", "j", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "W", ",", "dtype", "=", "np", ".", "float32", ")", ",", "np", ".", "arange", "(", "H", ",", "dtype", "=", "np", ".", "float32", ")", ",", "indexing", "=", "'xy'", ")", "\n", "dirs", "=", "np", ".", "stack", "(", "[", "(", "i", "-", "W", "*", ".5", ")", "/", "focal", ",", "-", "(", "j", "-", "H", "*", ".5", ")", "/", "focal", ",", "-", "np", ".", "ones_like", "(", "i", ")", "]", ",", "-", "1", ")", "\n", "# Rotate ray directions from camera frame to the world frame", "\n", "rays_d", "=", "np", ".", "sum", "(", "dirs", "[", "...", ",", "np", ".", "newaxis", ",", ":", "]", "*", "c2w", "[", ":", "3", ",", ":", "3", "]", ",", "-", "1", ")", "# dot product, equals to: [c2w.dot(dir) for dir in dirs]", "\n", "# Translate camera frame's origin to the world frame. It is the origin of all rays.", "\n", "rays_o", "=", "np", ".", "broadcast_to", "(", "c2w", "[", ":", "3", ",", "-", "1", "]", ",", "np", ".", "shape", "(", "rays_d", ")", ")", "\n", "return", "rays_o", ",", "rays_d", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_nerfingmvs.nerf.run_nerf_helpers.ndc_rays": [[179, 196], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "function", ["None"], ["", "def", "ndc_rays", "(", "H", ",", "W", ",", "focal", ",", "near", ",", "rays_o", ",", "rays_d", ")", ":", "\n", "# Shift ray origins to near plane", "\n", "    ", "t", "=", "-", "(", "near", "+", "rays_o", "[", "...", ",", "2", "]", ")", "/", "rays_d", "[", "...", ",", "2", "]", "\n", "rays_o", "=", "rays_o", "+", "t", "[", "...", ",", "None", "]", "*", "rays_d", "\n", "# Projection", "\n", "o0", "=", "-", "1.", "/", "(", "W", "/", "(", "2.", "*", "focal", ")", ")", "*", "rays_o", "[", "...", ",", "0", "]", "/", "rays_o", "[", "...", ",", "2", "]", "\n", "o1", "=", "-", "1.", "/", "(", "H", "/", "(", "2.", "*", "focal", ")", ")", "*", "rays_o", "[", "...", ",", "1", "]", "/", "rays_o", "[", "...", ",", "2", "]", "\n", "o2", "=", "1.", "+", "2.", "*", "near", "/", "rays_o", "[", "...", ",", "2", "]", "\n", "\n", "d0", "=", "-", "1.", "/", "(", "W", "/", "(", "2.", "*", "focal", ")", ")", "*", "(", "rays_d", "[", "...", ",", "0", "]", "/", "rays_d", "[", "...", ",", "2", "]", "-", "rays_o", "[", "...", ",", "0", "]", "/", "rays_o", "[", "...", ",", "2", "]", ")", "\n", "d1", "=", "-", "1.", "/", "(", "H", "/", "(", "2.", "*", "focal", ")", ")", "*", "(", "rays_d", "[", "...", ",", "1", "]", "/", "rays_d", "[", "...", ",", "2", "]", "-", "rays_o", "[", "...", ",", "1", "]", "/", "rays_o", "[", "...", ",", "2", "]", ")", "\n", "d2", "=", "-", "2.", "*", "near", "/", "rays_o", "[", "...", ",", "2", "]", "\n", "\n", "rays_o", "=", "torch", ".", "stack", "(", "[", "o0", ",", "o1", ",", "o2", "]", ",", "-", "1", ")", "\n", "rays_d", "=", "torch", ".", "stack", "(", "[", "d0", ",", "d1", ",", "d2", "]", ",", "-", "1", ")", "\n", "\n", "return", "rays_o", ",", "rays_d", "\n", "\n"]]}