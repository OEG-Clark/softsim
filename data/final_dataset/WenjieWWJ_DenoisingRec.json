{"home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.T_CE.main.worker_init_fn": [[94, 96], ["numpy.random.seed"], "function", ["None"], ["def", "worker_init_fn", "(", "worker_id", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "2019", "+", "worker_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.T_CE.main.drop_rate_schedule": [[148, 155], ["numpy.linspace"], "function", ["None"], ["", "def", "drop_rate_schedule", "(", "iteration", ")", ":", "\n", "\n", "\t", "drop_rate", "=", "np", ".", "linspace", "(", "0", ",", "args", ".", "drop_rate", "**", "args", ".", "exponent", ",", "args", ".", "num_gradual", ")", "\n", "if", "iteration", "<", "args", ".", "num_gradual", ":", "\n", "\t\t", "return", "drop_rate", "[", "iteration", "]", "\n", "", "else", ":", "\n", "\t\t", "return", "args", ".", "drop_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.T_CE.main.eval": [[158, 180], ["model.eval", "valid_loader.dataset.ng_sample", "print", "print", "user.cuda.cuda", "item.cuda.cuda", "label.float().cuda.float().cuda", "model", "loss.loss_function", "loss.loss_function.detach", "main.drop_rate_schedule", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "label.float().cuda.float", "os.path.exists", "os.mkdir"], "function", ["home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.R_CE.main.eval", "home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.R_CE.data_utils.NCFData.ng_sample", "home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.R_CE.loss.loss_function", "home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.T_CE.main.drop_rate_schedule"], ["", "", "def", "eval", "(", "model", ",", "valid_loader", ",", "best_loss", ",", "count", ")", ":", "\n", "\n", "\t", "model", ".", "eval", "(", ")", "\n", "epoch_loss", "=", "0", "\n", "valid_loader", ".", "dataset", ".", "ng_sample", "(", ")", "# negative sampling", "\n", "for", "user", ",", "item", ",", "label", ",", "noisy_or_not", "in", "valid_loader", ":", "\n", "\t\t", "user", "=", "user", ".", "cuda", "(", ")", "\n", "item", "=", "item", ".", "cuda", "(", ")", "\n", "label", "=", "label", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "prediction", "=", "model", "(", "user", ",", "item", ")", "\n", "loss", "=", "loss_function", "(", "prediction", ",", "label", ",", "drop_rate_schedule", "(", "count", ")", ")", "\n", "epoch_loss", "+=", "loss", ".", "detach", "(", ")", "\n", "", "print", "(", "\"################### EVAL ######################\"", ")", "\n", "print", "(", "\"Eval loss:{}\"", ".", "format", "(", "epoch_loss", ")", ")", "\n", "if", "epoch_loss", "<", "best_loss", ":", "\n", "\t\t", "best_loss", "=", "epoch_loss", "\n", "if", "args", ".", "out", ":", "\n", "\t\t\t", "if", "not", "os", ".", "path", ".", "exists", "(", "model_path", ")", ":", "\n", "\t\t\t\t", "os", ".", "mkdir", "(", "model_path", ")", "\n", "", "torch", ".", "save", "(", "model", ",", "'{}{}_{}-{}.pth'", ".", "format", "(", "model_path", ",", "args", ".", "model", ",", "args", ".", "drop_rate", ",", "args", ".", "num_gradual", ")", ")", "\n", "", "", "return", "best_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.T_CE.main.test": [[182, 190], ["model.eval", "evaluate.test_all_users", "print", "print", "print"], "function", ["home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.R_CE.main.eval", "home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.R_CE.evaluate.test_all_users"], ["", "def", "test", "(", "model", ",", "test_data_pos", ",", "user_pos", ")", ":", "\n", "\t", "top_k", "=", "args", ".", "top_k", "\n", "model", ".", "eval", "(", ")", "\n", "_", ",", "recall", ",", "NDCG", ",", "_", "=", "evaluate", ".", "test_all_users", "(", "model", ",", "4096", ",", "item_num", ",", "test_data_pos", ",", "user_pos", ",", "top_k", ")", "\n", "\n", "print", "(", "\"################### TEST ######################\"", ")", "\n", "print", "(", "\"Recall {:.4f}-{:.4f}\"", ".", "format", "(", "recall", "[", "0", "]", ",", "recall", "[", "1", "]", ")", ")", "\n", "print", "(", "\"NDCG {:.4f}-{:.4f}\"", ".", "format", "(", "NDCG", "[", "0", "]", ",", "NDCG", "[", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.T_CE.evaluate.test_all_users": [[7, 39], ["evaluate.compute_acc", "torch.Tensor().long().cuda", "range", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "model", "torch.cat", "torch.topk", "indices.cpu().numpy().tolist.cpu().numpy().tolist", "predictedIndices.append", "GroundTruth.append", "torch.Tensor().long().cuda", "model", "torch.Tensor().float().cuda", "torch.Tensor().long", "torch.cat", "torch.Tensor().long", "torch.Tensor().long", "indices.cpu().numpy().tolist.cpu().numpy", "torch.Tensor().long", "torch.Tensor().float", "torch.Tensor", "torch.Tensor", "torch.Tensor", "indices.cpu().numpy().tolist.cpu", "torch.Tensor", "torch.Tensor", "range", "range"], "function", ["home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.R_CE.evaluate.compute_acc"], ["def", "test_all_users", "(", "model", ",", "batch_size", ",", "item_num", ",", "test_data_pos", ",", "user_pos", ",", "top_k", ")", ":", "\n", "\n", "    ", "predictedIndices", "=", "[", "]", "\n", "GroundTruth", "=", "[", "]", "\n", "for", "u", "in", "test_data_pos", ":", "\n", "        ", "batch_num", "=", "item_num", "//", "batch_size", "\n", "batch_user", "=", "torch", ".", "Tensor", "(", "[", "u", "]", "*", "batch_size", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "st", ",", "ed", "=", "0", ",", "batch_size", "\n", "for", "i", "in", "range", "(", "batch_num", ")", ":", "\n", "            ", "batch_item", "=", "torch", ".", "Tensor", "(", "[", "i", "for", "i", "in", "range", "(", "st", ",", "ed", ")", "]", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "pred", "=", "model", "(", "batch_user", ",", "batch_item", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "predictions", "=", "pred", "\n", "", "else", ":", "\n", "                ", "predictions", "=", "torch", ".", "cat", "(", "[", "predictions", ",", "pred", "]", ",", "0", ")", "\n", "", "st", ",", "ed", "=", "st", "+", "batch_size", ",", "ed", "+", "batch_size", "\n", "", "ed", "=", "ed", "-", "batch_size", "\n", "batch_item", "=", "torch", ".", "Tensor", "(", "[", "i", "for", "i", "in", "range", "(", "ed", ",", "item_num", ")", "]", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "batch_user", "=", "torch", ".", "Tensor", "(", "[", "u", "]", "*", "(", "item_num", "-", "ed", ")", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "pred", "=", "model", "(", "batch_user", ",", "batch_item", ")", "\n", "predictions", "=", "torch", ".", "cat", "(", "[", "predictions", ",", "pred", "]", ",", "0", ")", "\n", "test_data_mask", "=", "[", "0", "]", "*", "item_num", "\n", "if", "u", "in", "user_pos", ":", "\n", "            ", "for", "i", "in", "user_pos", "[", "u", "]", ":", "\n", "                ", "test_data_mask", "[", "i", "]", "=", "-", "9999", "\n", "", "", "predictions", "=", "predictions", "+", "torch", ".", "Tensor", "(", "test_data_mask", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "_", ",", "indices", "=", "torch", ".", "topk", "(", "predictions", ",", "top_k", "[", "-", "1", "]", ")", "\n", "indices", "=", "indices", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "predictedIndices", ".", "append", "(", "indices", ")", "\n", "GroundTruth", ".", "append", "(", "test_data_pos", "[", "u", "]", ")", "\n", "", "precision", ",", "recall", ",", "NDCG", ",", "MRR", "=", "compute_acc", "(", "GroundTruth", ",", "predictedIndices", ",", "top_k", ")", "\n", "return", "precision", ",", "recall", ",", "NDCG", ",", "MRR", "\n", "\n"]], "home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.T_CE.evaluate.compute_acc": [[40, 88], ["range", "len", "range", "precision.append", "recall.append", "NDCG.append", "MRR.append", "len", "len", "len", "range", "len", "len", "len", "len", "len", "math.log2", "math.log2"], "function", ["None"], ["", "def", "compute_acc", "(", "GroundTruth", ",", "predictedIndices", ",", "topN", ")", ":", "\n", "    ", "precision", "=", "[", "]", "\n", "recall", "=", "[", "]", "\n", "NDCG", "=", "[", "]", "\n", "MRR", "=", "[", "]", "\n", "\n", "for", "index", "in", "range", "(", "len", "(", "topN", ")", ")", ":", "\n", "        ", "sumForPrecision", "=", "0", "\n", "sumForRecall", "=", "0", "\n", "sumForNdcg", "=", "0", "\n", "sumForMRR", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "predictedIndices", ")", ")", ":", "# for a user,", "\n", "            ", "if", "len", "(", "GroundTruth", "[", "i", "]", ")", "!=", "0", ":", "\n", "                ", "mrrFlag", "=", "True", "\n", "userHit", "=", "0", "\n", "userMRR", "=", "0", "\n", "dcg", "=", "0", "\n", "idcg", "=", "0", "\n", "idcgCount", "=", "len", "(", "GroundTruth", "[", "i", "]", ")", "\n", "ndcg", "=", "0", "\n", "hit", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "topN", "[", "index", "]", ")", ":", "\n", "                    ", "if", "predictedIndices", "[", "i", "]", "[", "j", "]", "in", "GroundTruth", "[", "i", "]", ":", "\n", "# if Hit!", "\n", "                        ", "dcg", "+=", "1.0", "/", "math", ".", "log2", "(", "j", "+", "2", ")", "\n", "if", "mrrFlag", ":", "\n", "                            ", "userMRR", "=", "(", "1.0", "/", "(", "j", "+", "1.0", ")", ")", "\n", "mrrFlag", "=", "False", "\n", "", "userHit", "+=", "1", "\n", "\n", "", "if", "idcgCount", ">", "0", ":", "\n", "                        ", "idcg", "+=", "1.0", "/", "math", ".", "log2", "(", "j", "+", "2", ")", "\n", "idcgCount", "=", "idcgCount", "-", "1", "\n", "\n", "", "", "if", "(", "idcg", "!=", "0", ")", ":", "\n", "                    ", "ndcg", "+=", "(", "dcg", "/", "idcg", ")", "\n", "\n", "", "sumForPrecision", "+=", "userHit", "/", "topN", "[", "index", "]", "\n", "sumForRecall", "+=", "userHit", "/", "len", "(", "GroundTruth", "[", "i", "]", ")", "\n", "sumForNdcg", "+=", "ndcg", "\n", "sumForMRR", "+=", "userMRR", "\n", "\n", "", "", "precision", ".", "append", "(", "sumForPrecision", "/", "len", "(", "predictedIndices", ")", ")", "\n", "recall", ".", "append", "(", "sumForRecall", "/", "len", "(", "predictedIndices", ")", ")", "\n", "NDCG", ".", "append", "(", "sumForNdcg", "/", "len", "(", "predictedIndices", ")", ")", "\n", "MRR", ".", "append", "(", "sumForMRR", "/", "len", "(", "predictedIndices", ")", ")", "\n", "\n", "", "return", "precision", ",", "recall", ",", "NDCG", ",", "MRR", "\n", "\n"]], "home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.T_CE.data_utils.NCFData.__init__": [[89, 105], ["torch.Dataset.__init__", "range", "range", "len", "len"], "methods", ["home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.R_CE.model.NCF.__init__"], ["\t", "def", "__init__", "(", "self", ",", "features", ",", "\n", "num_item", ",", "train_mat", "=", "None", ",", "num_ng", "=", "0", ",", "is_training", "=", "0", ",", "noisy_or_not", "=", "None", ")", ":", "\n", "\t\t", "super", "(", "NCFData", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\"\"\" Note that the labels are only useful when training, we thus \n\t\t\tadd them in the ng_sample() function.\n\t\t\"\"\"", "\n", "self", ".", "features_ps", "=", "features", "\n", "if", "is_training", "==", "0", ":", "\n", "\t\t\t", "self", ".", "noisy_or_not", "=", "noisy_or_not", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "noisy_or_not", "=", "[", "0", "for", "_", "in", "range", "(", "len", "(", "features", ")", ")", "]", "\n", "", "self", ".", "num_item", "=", "num_item", "\n", "self", ".", "train_mat", "=", "train_mat", "\n", "self", ".", "num_ng", "=", "num_ng", "\n", "self", ".", "is_training", "=", "is_training", "\n", "self", ".", "labels", "=", "[", "0", "for", "_", "in", "range", "(", "len", "(", "features", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.T_CE.data_utils.NCFData.ng_sample": [[106, 124], ["range", "len", "len", "numpy.random.randint", "data_utils.NCFData.features_ng.append", "range", "range", "numpy.random.randint", "len", "len", "range", "len"], "methods", ["None"], ["", "def", "ng_sample", "(", "self", ")", ":", "\n", "\t\t", "assert", "self", ".", "is_training", "!=", "2", ",", "'no need to sampling when testing'", "\n", "\n", "self", ".", "features_ng", "=", "[", "]", "\n", "for", "x", "in", "self", ".", "features_ps", ":", "\n", "\t\t\t", "u", "=", "x", "[", "0", "]", "\n", "for", "t", "in", "range", "(", "self", ".", "num_ng", ")", ":", "\n", "\t\t\t\t", "j", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "num_item", ")", "\n", "while", "(", "u", ",", "j", ")", "in", "self", ".", "train_mat", ":", "\n", "\t\t\t\t\t", "j", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "num_item", ")", "\n", "", "self", ".", "features_ng", ".", "append", "(", "[", "u", ",", "j", "]", ")", "\n", "\n", "", "", "labels_ps", "=", "[", "1", "for", "_", "in", "range", "(", "len", "(", "self", ".", "features_ps", ")", ")", "]", "\n", "labels_ng", "=", "[", "0", "for", "_", "in", "range", "(", "len", "(", "self", ".", "features_ng", ")", ")", "]", "\n", "self", ".", "noisy_or_not_fill", "=", "self", ".", "noisy_or_not", "+", "[", "1", "for", "_", "in", "range", "(", "len", "(", "self", ".", "features_ng", ")", ")", "]", "\n", "self", ".", "features_fill", "=", "self", ".", "features_ps", "+", "self", ".", "features_ng", "\n", "assert", "len", "(", "self", ".", "noisy_or_not_fill", ")", "==", "len", "(", "self", ".", "features_fill", ")", "\n", "self", ".", "labels_fill", "=", "labels_ps", "+", "labels_ng", "\n", "\n"]], "home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.T_CE.data_utils.NCFData.__len__": [[125, 127], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "return", "(", "self", ".", "num_ng", "+", "1", ")", "*", "len", "(", "self", ".", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.T_CE.data_utils.NCFData.__getitem__": [[128, 142], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "features", "=", "self", ".", "features_fill", "if", "self", ".", "is_training", "!=", "2", "else", "self", ".", "features_ps", "\n", "labels", "=", "self", ".", "labels_fill", "if", "self", ".", "is_training", "!=", "2", "else", "self", ".", "labels", "\n", "noisy_or_not", "=", "self", ".", "noisy_or_not_fill", "if", "self", ".", "is_training", "!=", "2", "else", "self", ".", "noisy_or_not", "\n", "\n", "user", "=", "features", "[", "idx", "]", "[", "0", "]", "\n", "item", "=", "features", "[", "idx", "]", "[", "1", "]", "\n", "label", "=", "labels", "[", "idx", "]", "\n", "noisy_label", "=", "noisy_or_not", "[", "idx", "]", "\n", "\n", "return", "user", ",", "item", ",", "label", ",", "noisy_label", "\n", "\n"]], "home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.T_CE.data_utils.load_all": [[9, 86], ["pandas.read_csv", "print", "print", "train_data.values.tolist.values.tolist", "scipy.dok_matrix", "pandas.read_csv", "valid_data.values.tolist.values.tolist", "scipy.dok_matrix", "train_data_list.append", "train_data_noisy.append", "valid_data_list.append", "open", "fd.readline", "train_data[].max", "train_data[].max", "user_pos[].append", "user_pos[].append", "fd.readline.split", "fd.readline", "int", "int", "test_data_pos[].append", "eval", "eval"], "function", ["home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.R_CE.main.eval", "home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.R_CE.main.eval"], ["def", "load_all", "(", "dataset", ",", "data_path", ")", ":", "\n", "\n", "\t", "train_rating", "=", "data_path", "+", "'{}.train.rating'", ".", "format", "(", "dataset", ")", "\n", "valid_rating", "=", "data_path", "+", "'{}.valid.rating'", ".", "format", "(", "dataset", ")", "\n", "test_negative", "=", "data_path", "+", "'{}.test.negative'", ".", "format", "(", "dataset", ")", "\n", "\n", "################# load training data #################\t", "\n", "train_data", "=", "pd", ".", "read_csv", "(", "\n", "train_rating", ",", "\n", "sep", "=", "'\\t'", ",", "header", "=", "None", ",", "names", "=", "[", "'user'", ",", "'item'", ",", "'noisy'", "]", ",", "\n", "usecols", "=", "[", "0", ",", "1", ",", "2", "]", ",", "dtype", "=", "{", "0", ":", "np", ".", "int32", ",", "1", ":", "np", ".", "int32", ",", "2", ":", "np", ".", "int32", "}", ")", "\n", "\n", "if", "dataset", "==", "\"adressa\"", ":", "\n", "\t\t", "user_num", "=", "212231", "\n", "item_num", "=", "6596", "\n", "", "else", ":", "\n", "\t\t", "user_num", "=", "train_data", "[", "'user'", "]", ".", "max", "(", ")", "+", "1", "\n", "item_num", "=", "train_data", "[", "'item'", "]", ".", "max", "(", ")", "+", "1", "\n", "", "print", "(", "\"user, item num\"", ")", "\n", "print", "(", "user_num", ",", "item_num", ")", "\n", "train_data", "=", "train_data", ".", "values", ".", "tolist", "(", ")", "\n", "\n", "# load ratings as a dok matrix", "\n", "train_mat", "=", "sp", ".", "dok_matrix", "(", "(", "user_num", ",", "item_num", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "train_data_list", "=", "[", "]", "\n", "train_data_noisy", "=", "[", "]", "\n", "for", "x", "in", "train_data", ":", "\n", "\t\t", "train_mat", "[", "x", "[", "0", "]", ",", "x", "[", "1", "]", "]", "=", "1.0", "\n", "train_data_list", ".", "append", "(", "[", "x", "[", "0", "]", ",", "x", "[", "1", "]", "]", ")", "\n", "train_data_noisy", ".", "append", "(", "x", "[", "2", "]", ")", "\n", "\n", "################# load validation data #################", "\n", "", "valid_data", "=", "pd", ".", "read_csv", "(", "\n", "valid_rating", ",", "\n", "sep", "=", "'\\t'", ",", "header", "=", "None", ",", "names", "=", "[", "'user'", ",", "'item'", ",", "'noisy'", "]", ",", "\n", "usecols", "=", "[", "0", ",", "1", ",", "2", "]", ",", "dtype", "=", "{", "0", ":", "np", ".", "int32", ",", "1", ":", "np", ".", "int32", ",", "2", ":", "np", ".", "int32", "}", ")", "\n", "valid_data", "=", "valid_data", ".", "values", ".", "tolist", "(", ")", "\n", "valid_data_list", "=", "[", "]", "\n", "for", "x", "in", "valid_data", ":", "\n", "\t\t", "valid_data_list", ".", "append", "(", "[", "x", "[", "0", "]", ",", "x", "[", "1", "]", "]", ")", "\n", "\n", "", "user_pos", "=", "{", "}", "\n", "for", "x", "in", "train_data_list", ":", "\n", "\t\t", "if", "x", "[", "0", "]", "in", "user_pos", ":", "\n", "\t\t\t", "user_pos", "[", "x", "[", "0", "]", "]", ".", "append", "(", "x", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "\t\t\t", "user_pos", "[", "x", "[", "0", "]", "]", "=", "[", "x", "[", "1", "]", "]", "\n", "", "", "for", "x", "in", "valid_data_list", ":", "\n", "\t\t", "if", "x", "[", "0", "]", "in", "user_pos", ":", "\n", "\t\t\t", "user_pos", "[", "x", "[", "0", "]", "]", ".", "append", "(", "x", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "\t\t\t", "user_pos", "[", "x", "[", "0", "]", "]", "=", "[", "x", "[", "1", "]", "]", "\n", "\n", "\n", "################# load testing data #################", "\n", "", "", "test_mat", "=", "sp", ".", "dok_matrix", "(", "(", "user_num", ",", "item_num", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "test_data_pos", "=", "{", "}", "\n", "with", "open", "(", "test_negative", ",", "'r'", ")", "as", "fd", ":", "\n", "\t\t", "line", "=", "fd", ".", "readline", "(", ")", "\n", "while", "line", "!=", "None", "and", "line", "!=", "''", ":", "\n", "\t\t\t", "arr", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "if", "dataset", "==", "\"adressa\"", ":", "\n", "\t\t\t\t", "u", "=", "eval", "(", "arr", "[", "0", "]", ")", "[", "0", "]", "\n", "i", "=", "eval", "(", "arr", "[", "0", "]", ")", "[", "1", "]", "\n", "", "else", ":", "\n", "\t\t\t\t", "u", "=", "int", "(", "arr", "[", "0", "]", ")", "\n", "i", "=", "int", "(", "arr", "[", "1", "]", ")", "\n", "", "if", "u", "in", "test_data_pos", ":", "\n", "\t\t\t\t", "test_data_pos", "[", "u", "]", ".", "append", "(", "i", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "test_data_pos", "[", "u", "]", "=", "[", "i", "]", "\n", "", "test_mat", "[", "u", ",", "i", "]", "=", "1.0", "\n", "line", "=", "fd", ".", "readline", "(", ")", "\n", "\n", "\n", "", "", "return", "train_data_list", ",", "valid_data_list", ",", "test_data_pos", ",", "user_pos", ",", "user_num", ",", "item_num", ",", "train_mat", ",", "train_data_noisy", "\n", "\n"]], "home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.T_CE.inference.test": [[62, 70], ["model.eval", "evaluate.test_all_users", "print", "print", "print"], "function", ["home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.R_CE.main.eval", "home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.R_CE.evaluate.test_all_users"], ["def", "test", "(", "model", ",", "test_data_pos", ",", "user_pos", ")", ":", "\n", "\t", "top_k", "=", "args", ".", "top_k", "\n", "model", ".", "eval", "(", ")", "\n", "_", ",", "recall", ",", "NDCG", ",", "_", "=", "evaluate", ".", "test_all_users", "(", "model", ",", "4096", ",", "item_num", ",", "test_data_pos", ",", "user_pos", ",", "top_k", ")", "\n", "\n", "print", "(", "\"################### TEST ######################\"", ")", "\n", "print", "(", "\"Recall {:.4f}-{:.4f}\"", ".", "format", "(", "recall", "[", "0", "]", ",", "recall", "[", "1", "]", ")", ")", "\n", "print", "(", "\"NDCG {:.4f}-{:.4f}\"", ".", "format", "(", "NDCG", "[", "0", "]", ",", "NDCG", "[", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.T_CE.loss.loss_function": [[8, 23], ["torch.binary_cross_entropy_with_logits", "numpy.argsort().cuda", "int", "torch.binary_cross_entropy_with_logits", "numpy.argsort", "len", "loss_mul.cpu"], "function", ["None"], ["def", "loss_function", "(", "y", ",", "t", ",", "drop_rate", ")", ":", "\n", "    ", "loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "y", ",", "t", ",", "reduce", "=", "False", ")", "\n", "\n", "loss_mul", "=", "loss", "*", "t", "\n", "ind_sorted", "=", "np", ".", "argsort", "(", "loss_mul", ".", "cpu", "(", ")", ".", "data", ")", ".", "cuda", "(", ")", "\n", "loss_sorted", "=", "loss", "[", "ind_sorted", "]", "\n", "\n", "remember_rate", "=", "1", "-", "drop_rate", "\n", "num_remember", "=", "int", "(", "remember_rate", "*", "len", "(", "loss_sorted", ")", ")", "\n", "\n", "ind_update", "=", "ind_sorted", "[", ":", "num_remember", "]", "\n", "\n", "loss_update", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "y", "[", "ind_update", "]", ",", "t", "[", "ind_update", "]", ")", "\n", "\n", "return", "loss_update", "\n", "", ""]], "home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.T_CE.model.NCF.__init__": [[7, 47], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "model.NCF._init_weight_", "MLP_modules.append", "MLP_modules.append", "MLP_modules.append", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.R_CE.model.NCF.__init__", "home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.R_CE.model.NCF._init_weight_"], ["\t", "def", "__init__", "(", "self", ",", "user_num", ",", "item_num", ",", "factor_num", ",", "num_layers", ",", "\n", "dropout", ",", "model", ",", "GMF_model", "=", "None", ",", "MLP_model", "=", "None", ")", ":", "\n", "\t\t", "super", "(", "NCF", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\"\"\"\n\t\tuser_num: number of users;\n\t\titem_num: number of items;\n\t\tfactor_num: number of predictive factors;\n\t\tnum_layers: the number of layers in MLP model;\n\t\tdropout: dropout rate between fully connected layers;\n\t\tmodel: 'MLP', 'GMF', 'NeuMF-end', and 'NeuMF-pre';\n\t\tGMF_model: pre-trained GMF weights;\n\t\tMLP_model: pre-trained MLP weights.\n\t\t\"\"\"", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "GMF_model", "=", "GMF_model", "\n", "self", ".", "MLP_model", "=", "MLP_model", "\n", "\n", "self", ".", "embed_user_GMF", "=", "nn", ".", "Embedding", "(", "user_num", ",", "factor_num", ")", "\n", "self", ".", "embed_item_GMF", "=", "nn", ".", "Embedding", "(", "item_num", ",", "factor_num", ")", "\n", "self", ".", "embed_user_MLP", "=", "nn", ".", "Embedding", "(", "\n", "user_num", ",", "factor_num", "*", "(", "2", "**", "(", "num_layers", "-", "1", ")", ")", ")", "\n", "self", ".", "embed_item_MLP", "=", "nn", ".", "Embedding", "(", "\n", "item_num", ",", "factor_num", "*", "(", "2", "**", "(", "num_layers", "-", "1", ")", ")", ")", "\n", "\n", "MLP_modules", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "\t\t\t", "input_size", "=", "factor_num", "*", "(", "2", "**", "(", "num_layers", "-", "i", ")", ")", "\n", "MLP_modules", ".", "append", "(", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "dropout", ")", ")", "\n", "MLP_modules", ".", "append", "(", "nn", ".", "Linear", "(", "input_size", ",", "input_size", "//", "2", ")", ")", "\n", "MLP_modules", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "", "self", ".", "MLP_layers", "=", "nn", ".", "Sequential", "(", "*", "MLP_modules", ")", "\n", "\n", "if", "self", ".", "model", "in", "[", "'MLP'", ",", "'GMF'", "]", ":", "\n", "\t\t\t", "predict_size", "=", "factor_num", "\n", "", "else", ":", "\n", "\t\t\t", "predict_size", "=", "factor_num", "*", "2", "\n", "", "self", ".", "predict_layer", "=", "nn", ".", "Linear", "(", "predict_size", ",", "1", ")", "\n", "\n", "self", ".", "_init_weight_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.T_CE.model.NCF._init_weight_": [[48, 92], ["torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "model.NCF.modules", "model.NCF.embed_user_GMF.weight.data.copy_", "model.NCF.embed_item_GMF.weight.data.copy_", "model.NCF.embed_user_MLP.weight.data.copy_", "model.NCF.embed_item_MLP.weight.data.copy_", "zip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.NCF.predict_layer.weight.data.copy_", "model.NCF.predict_layer.bias.data.copy_", "isinstance", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "isinstance", "m.bias.data.zero_", "isinstance", "isinstance", "m1.weight.data.copy_", "m1.bias.data.copy_"], "methods", ["None"], ["", "def", "_init_weight_", "(", "self", ")", ":", "\n", "\t\t", "\"\"\" We leave the weights initialization here. \"\"\"", "\n", "if", "not", "self", ".", "model", "==", "'NeuMF-pre'", ":", "\n", "\t\t\t", "nn", ".", "init", ".", "normal_", "(", "self", ".", "embed_user_GMF", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "embed_user_MLP", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "embed_item_GMF", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "embed_item_MLP", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "\n", "for", "m", "in", "self", ".", "MLP_layers", ":", "\n", "\t\t\t\t", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "\t\t\t\t\t", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "", "", "nn", ".", "init", ".", "kaiming_uniform_", "(", "self", ".", "predict_layer", ".", "weight", ",", "\n", "a", "=", "1", ",", "nonlinearity", "=", "'sigmoid'", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "\t\t\t\t", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "\t\t\t\t\t", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "", "else", ":", "\n", "# embedding layers", "\n", "\t\t\t", "self", ".", "embed_user_GMF", ".", "weight", ".", "data", ".", "copy_", "(", "\n", "self", ".", "GMF_model", ".", "embed_user_GMF", ".", "weight", ")", "\n", "self", ".", "embed_item_GMF", ".", "weight", ".", "data", ".", "copy_", "(", "\n", "self", ".", "GMF_model", ".", "embed_item_GMF", ".", "weight", ")", "\n", "self", ".", "embed_user_MLP", ".", "weight", ".", "data", ".", "copy_", "(", "\n", "self", ".", "MLP_model", ".", "embed_user_MLP", ".", "weight", ")", "\n", "self", ".", "embed_item_MLP", ".", "weight", ".", "data", ".", "copy_", "(", "\n", "self", ".", "MLP_model", ".", "embed_item_MLP", ".", "weight", ")", "\n", "\n", "# mlp layers", "\n", "for", "(", "m1", ",", "m2", ")", "in", "zip", "(", "\n", "self", ".", "MLP_layers", ",", "self", ".", "MLP_model", ".", "MLP_layers", ")", ":", "\n", "\t\t\t\t", "if", "isinstance", "(", "m1", ",", "nn", ".", "Linear", ")", "and", "isinstance", "(", "m2", ",", "nn", ".", "Linear", ")", ":", "\n", "\t\t\t\t\t", "m1", ".", "weight", ".", "data", ".", "copy_", "(", "m2", ".", "weight", ")", "\n", "m1", ".", "bias", ".", "data", ".", "copy_", "(", "m2", ".", "bias", ")", "\n", "\n", "# predict layers", "\n", "", "", "predict_weight", "=", "torch", ".", "cat", "(", "[", "\n", "self", ".", "GMF_model", ".", "predict_layer", ".", "weight", ",", "\n", "self", ".", "MLP_model", ".", "predict_layer", ".", "weight", "]", ",", "dim", "=", "1", ")", "\n", "precit_bias", "=", "self", ".", "GMF_model", ".", "predict_layer", ".", "bias", "+", "self", ".", "MLP_model", ".", "predict_layer", ".", "bias", "\n", "\n", "self", ".", "predict_layer", ".", "weight", ".", "data", ".", "copy_", "(", "0.5", "*", "predict_weight", ")", "\n", "self", ".", "predict_layer", ".", "bias", ".", "data", ".", "copy_", "(", "0.5", "*", "precit_bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.T_CE.model.NCF.forward": [[93, 113], ["model.NCF.predict_layer", "model.NCF.view", "model.NCF.embed_user_GMF", "model.NCF.embed_item_GMF", "model.NCF.embed_user_MLP", "model.NCF.embed_item_MLP", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.NCF.MLP_layers", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "user", ",", "item", ")", ":", "\n", "\t\t", "if", "not", "self", ".", "model", "==", "'MLP'", ":", "\n", "\t\t\t", "embed_user_GMF", "=", "self", ".", "embed_user_GMF", "(", "user", ")", "\n", "embed_item_GMF", "=", "self", ".", "embed_item_GMF", "(", "item", ")", "\n", "output_GMF", "=", "embed_user_GMF", "*", "embed_item_GMF", "\n", "", "if", "not", "self", ".", "model", "==", "'GMF'", ":", "\n", "\t\t\t", "embed_user_MLP", "=", "self", ".", "embed_user_MLP", "(", "user", ")", "\n", "embed_item_MLP", "=", "self", ".", "embed_item_MLP", "(", "item", ")", "\n", "interaction", "=", "torch", ".", "cat", "(", "(", "embed_user_MLP", ",", "embed_item_MLP", ")", ",", "-", "1", ")", "\n", "output_MLP", "=", "self", ".", "MLP_layers", "(", "interaction", ")", "\n", "\n", "", "if", "self", ".", "model", "==", "'GMF'", ":", "\n", "\t\t\t", "concat", "=", "output_GMF", "\n", "", "elif", "self", ".", "model", "==", "'MLP'", ":", "\n", "\t\t\t", "concat", "=", "output_MLP", "\n", "", "else", ":", "\n", "\t\t\t", "concat", "=", "torch", ".", "cat", "(", "(", "output_GMF", ",", "output_MLP", ")", ",", "-", "1", ")", "\n", "\n", "", "prediction", "=", "self", ".", "predict_layer", "(", "concat", ")", "\n", "return", "prediction", ".", "view", "(", "-", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.R_CE.main.worker_init_fn": [[86, 88], ["numpy.random.seed"], "function", ["None"], ["cudnn", ".", "benchmark", "=", "True", "\n", "\n", "torch", ".", "manual_seed", "(", "2019", ")", "# cpu", "\n"]], "home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.R_CE.main.eval": [[140, 162], ["model.eval", "valid_loader.dataset.ng_sample", "print", "print", "user.cuda.cuda", "item.cuda.cuda", "label.float().cuda.float().cuda", "model", "loss.loss_function", "loss.loss_function.detach", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "label.float().cuda.float", "os.path.exists", "os.mkdir"], "function", ["home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.R_CE.main.eval", "home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.R_CE.data_utils.NCFData.ng_sample", "home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.R_CE.loss.loss_function"], ["if", "args", ".", "model", "==", "'NeuMF-pre'", ":", "\n", "\t", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "", "else", ":", "\n", "\t", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "\n", "# writer = SummaryWriter() # for visualization", "\n", "\n", "# define drop rate schedule", "\n", "", "def", "drop_rate_schedule", "(", "iteration", ")", ":", "\n", "\n", "\t", "drop_rate", "=", "np", ".", "linspace", "(", "0", ",", "args", ".", "drop_rate", "**", "args", ".", "exponent", ",", "args", ".", "num_gradual", ")", "\n", "if", "iteration", "<", "args", ".", "num_gradual", ":", "\n", "\t\t", "return", "drop_rate", "[", "iteration", "]", "\n", "", "else", ":", "\n", "\t\t", "return", "args", ".", "drop_rate", "\n", "\n", "\n", "########################### Eval #####################################", "\n", "", "", "def", "eval", "(", "model", ",", "valid_loader", ",", "best_loss", ",", "count", ")", ":", "\n", "\n", "\t", "model", ".", "eval", "(", ")", "\n", "epoch_loss", "=", "0", "\n", "valid_loader", ".", "dataset", ".", "ng_sample", "(", ")", "# negative sampling", "\n"]], "home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.R_CE.main.test": [[164, 172], ["model.eval", "evaluate.test_all_users", "print", "print", "print"], "function", ["home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.R_CE.main.eval", "home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.R_CE.evaluate.test_all_users"], ["\t\t", "user", "=", "user", ".", "cuda", "(", ")", "\n", "item", "=", "item", ".", "cuda", "(", ")", "\n", "label", "=", "label", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "prediction", "=", "model", "(", "user", ",", "item", ")", "\n", "loss", "=", "loss_function", "(", "prediction", ",", "label", ",", "drop_rate_schedule", "(", "count", ")", ")", "\n", "epoch_loss", "+=", "loss", ".", "detach", "(", ")", "\n", "", "print", "(", "\"################### EVAL ######################\"", ")", "\n", "print", "(", "\"Eval loss:{}\"", ".", "format", "(", "epoch_loss", ")", ")", "\n"]], "home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.R_CE.evaluate.test_all_users": [[7, 39], ["evaluate.compute_acc", "torch.Tensor().long().cuda", "range", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "model", "torch.cat", "torch.topk", "indices.cpu().numpy().tolist.cpu().numpy().tolist", "predictedIndices.append", "GroundTruth.append", "torch.Tensor().long().cuda", "model", "torch.Tensor().float().cuda", "torch.Tensor().long", "torch.cat", "torch.Tensor().long", "torch.Tensor().long", "indices.cpu().numpy().tolist.cpu().numpy", "torch.Tensor().long", "torch.Tensor().float", "torch.Tensor", "torch.Tensor", "torch.Tensor", "indices.cpu().numpy().tolist.cpu", "torch.Tensor", "torch.Tensor", "range", "range"], "function", ["home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.R_CE.evaluate.compute_acc"], ["def", "test_all_users", "(", "model", ",", "batch_size", ",", "item_num", ",", "test_data_pos", ",", "user_pos", ",", "top_k", ")", ":", "\n", "\n", "    ", "predictedIndices", "=", "[", "]", "\n", "GroundTruth", "=", "[", "]", "\n", "for", "u", "in", "test_data_pos", ":", "\n", "        ", "batch_num", "=", "item_num", "//", "batch_size", "\n", "batch_user", "=", "torch", ".", "Tensor", "(", "[", "u", "]", "*", "batch_size", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "st", ",", "ed", "=", "0", ",", "batch_size", "\n", "for", "i", "in", "range", "(", "batch_num", ")", ":", "\n", "            ", "batch_item", "=", "torch", ".", "Tensor", "(", "[", "i", "for", "i", "in", "range", "(", "st", ",", "ed", ")", "]", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "pred", "=", "model", "(", "batch_user", ",", "batch_item", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "predictions", "=", "pred", "\n", "", "else", ":", "\n", "                ", "predictions", "=", "torch", ".", "cat", "(", "[", "predictions", ",", "pred", "]", ",", "0", ")", "\n", "", "st", ",", "ed", "=", "st", "+", "batch_size", ",", "ed", "+", "batch_size", "\n", "", "ed", "=", "ed", "-", "batch_size", "\n", "batch_item", "=", "torch", ".", "Tensor", "(", "[", "i", "for", "i", "in", "range", "(", "ed", ",", "item_num", ")", "]", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "batch_user", "=", "torch", ".", "Tensor", "(", "[", "u", "]", "*", "(", "item_num", "-", "ed", ")", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "pred", "=", "model", "(", "batch_user", ",", "batch_item", ")", "\n", "predictions", "=", "torch", ".", "cat", "(", "[", "predictions", ",", "pred", "]", ",", "0", ")", "\n", "test_data_mask", "=", "[", "0", "]", "*", "item_num", "\n", "if", "u", "in", "user_pos", ":", "\n", "            ", "for", "i", "in", "user_pos", "[", "u", "]", ":", "\n", "                ", "test_data_mask", "[", "i", "]", "=", "-", "9999", "\n", "", "", "predictions", "=", "predictions", "+", "torch", ".", "Tensor", "(", "test_data_mask", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "_", ",", "indices", "=", "torch", ".", "topk", "(", "predictions", ",", "top_k", "[", "-", "1", "]", ")", "\n", "indices", "=", "indices", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "predictedIndices", ".", "append", "(", "indices", ")", "\n", "GroundTruth", ".", "append", "(", "test_data_pos", "[", "u", "]", ")", "\n", "", "precision", ",", "recall", ",", "NDCG", ",", "MRR", "=", "compute_acc", "(", "GroundTruth", ",", "predictedIndices", ",", "top_k", ")", "\n", "return", "precision", ",", "recall", ",", "NDCG", ",", "MRR", "\n", "\n"]], "home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.R_CE.evaluate.compute_acc": [[40, 88], ["range", "len", "range", "precision.append", "recall.append", "NDCG.append", "MRR.append", "len", "len", "len", "range", "len", "len", "len", "len", "len", "math.log2", "math.log2"], "function", ["None"], ["", "def", "compute_acc", "(", "GroundTruth", ",", "predictedIndices", ",", "topN", ")", ":", "\n", "    ", "precision", "=", "[", "]", "\n", "recall", "=", "[", "]", "\n", "NDCG", "=", "[", "]", "\n", "MRR", "=", "[", "]", "\n", "\n", "for", "index", "in", "range", "(", "len", "(", "topN", ")", ")", ":", "\n", "        ", "sumForPrecision", "=", "0", "\n", "sumForRecall", "=", "0", "\n", "sumForNdcg", "=", "0", "\n", "sumForMRR", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "predictedIndices", ")", ")", ":", "# for a user,", "\n", "            ", "if", "len", "(", "GroundTruth", "[", "i", "]", ")", "!=", "0", ":", "\n", "                ", "mrrFlag", "=", "True", "\n", "userHit", "=", "0", "\n", "userMRR", "=", "0", "\n", "dcg", "=", "0", "\n", "idcg", "=", "0", "\n", "idcgCount", "=", "len", "(", "GroundTruth", "[", "i", "]", ")", "\n", "ndcg", "=", "0", "\n", "hit", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "topN", "[", "index", "]", ")", ":", "\n", "                    ", "if", "predictedIndices", "[", "i", "]", "[", "j", "]", "in", "GroundTruth", "[", "i", "]", ":", "\n", "# if Hit!", "\n", "                        ", "dcg", "+=", "1.0", "/", "math", ".", "log2", "(", "j", "+", "2", ")", "\n", "if", "mrrFlag", ":", "\n", "                            ", "userMRR", "=", "(", "1.0", "/", "(", "j", "+", "1.0", ")", ")", "\n", "mrrFlag", "=", "False", "\n", "", "userHit", "+=", "1", "\n", "\n", "", "if", "idcgCount", ">", "0", ":", "\n", "                        ", "idcg", "+=", "1.0", "/", "math", ".", "log2", "(", "j", "+", "2", ")", "\n", "idcgCount", "=", "idcgCount", "-", "1", "\n", "\n", "", "", "if", "(", "idcg", "!=", "0", ")", ":", "\n", "                    ", "ndcg", "+=", "(", "dcg", "/", "idcg", ")", "\n", "\n", "", "sumForPrecision", "+=", "userHit", "/", "topN", "[", "index", "]", "\n", "sumForRecall", "+=", "userHit", "/", "len", "(", "GroundTruth", "[", "i", "]", ")", "\n", "sumForNdcg", "+=", "ndcg", "\n", "sumForMRR", "+=", "userMRR", "\n", "\n", "", "", "precision", ".", "append", "(", "sumForPrecision", "/", "len", "(", "predictedIndices", ")", ")", "\n", "recall", ".", "append", "(", "sumForRecall", "/", "len", "(", "predictedIndices", ")", ")", "\n", "NDCG", ".", "append", "(", "sumForNdcg", "/", "len", "(", "predictedIndices", ")", ")", "\n", "MRR", ".", "append", "(", "sumForMRR", "/", "len", "(", "predictedIndices", ")", ")", "\n", "\n", "", "return", "precision", ",", "recall", ",", "NDCG", ",", "MRR", "\n", "\n"]], "home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.R_CE.data_utils.NCFData.__init__": [[89, 105], ["torch.Dataset.__init__", "range", "range", "len", "len"], "methods", ["home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.R_CE.model.NCF.__init__"], ["\t", "def", "__init__", "(", "self", ",", "features", ",", "\n", "num_item", ",", "train_mat", "=", "None", ",", "num_ng", "=", "0", ",", "is_training", "=", "0", ",", "noisy_or_not", "=", "None", ")", ":", "\n", "\t\t", "super", "(", "NCFData", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\"\"\" Note that the labels are only useful when training, we thus \n\t\t\tadd them in the ng_sample() function.\n\t\t\"\"\"", "\n", "self", ".", "features_ps", "=", "features", "\n", "if", "is_training", "==", "0", ":", "\n", "\t\t\t", "self", ".", "noisy_or_not", "=", "noisy_or_not", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "noisy_or_not", "=", "[", "0", "for", "_", "in", "range", "(", "len", "(", "features", ")", ")", "]", "\n", "", "self", ".", "num_item", "=", "num_item", "\n", "self", ".", "train_mat", "=", "train_mat", "\n", "self", ".", "num_ng", "=", "num_ng", "\n", "self", ".", "is_training", "=", "is_training", "\n", "self", ".", "labels", "=", "[", "0", "for", "_", "in", "range", "(", "len", "(", "features", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.R_CE.data_utils.NCFData.ng_sample": [[106, 124], ["range", "len", "len", "numpy.random.randint", "data_utils.NCFData.features_ng.append", "range", "range", "numpy.random.randint", "len", "len", "range", "len"], "methods", ["None"], ["", "def", "ng_sample", "(", "self", ")", ":", "\n", "\t\t", "assert", "self", ".", "is_training", "!=", "2", ",", "'no need to sampling when testing'", "\n", "\n", "self", ".", "features_ng", "=", "[", "]", "\n", "for", "x", "in", "self", ".", "features_ps", ":", "\n", "\t\t\t", "u", "=", "x", "[", "0", "]", "\n", "for", "t", "in", "range", "(", "self", ".", "num_ng", ")", ":", "\n", "\t\t\t\t", "j", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "num_item", ")", "\n", "while", "(", "u", ",", "j", ")", "in", "self", ".", "train_mat", ":", "\n", "\t\t\t\t\t", "j", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "num_item", ")", "\n", "", "self", ".", "features_ng", ".", "append", "(", "[", "u", ",", "j", "]", ")", "\n", "\n", "", "", "labels_ps", "=", "[", "1", "for", "_", "in", "range", "(", "len", "(", "self", ".", "features_ps", ")", ")", "]", "\n", "labels_ng", "=", "[", "0", "for", "_", "in", "range", "(", "len", "(", "self", ".", "features_ng", ")", ")", "]", "\n", "self", ".", "noisy_or_not_fill", "=", "self", ".", "noisy_or_not", "+", "[", "1", "for", "_", "in", "range", "(", "len", "(", "self", ".", "features_ng", ")", ")", "]", "\n", "self", ".", "features_fill", "=", "self", ".", "features_ps", "+", "self", ".", "features_ng", "\n", "assert", "len", "(", "self", ".", "noisy_or_not_fill", ")", "==", "len", "(", "self", ".", "features_fill", ")", "\n", "self", ".", "labels_fill", "=", "labels_ps", "+", "labels_ng", "\n", "\n"]], "home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.R_CE.data_utils.NCFData.__len__": [[125, 127], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "return", "(", "self", ".", "num_ng", "+", "1", ")", "*", "len", "(", "self", ".", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.R_CE.data_utils.NCFData.__getitem__": [[128, 142], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "features", "=", "self", ".", "features_fill", "if", "self", ".", "is_training", "!=", "2", "else", "self", ".", "features_ps", "\n", "labels", "=", "self", ".", "labels_fill", "if", "self", ".", "is_training", "!=", "2", "else", "self", ".", "labels", "\n", "noisy_or_not", "=", "self", ".", "noisy_or_not_fill", "if", "self", ".", "is_training", "!=", "2", "else", "self", ".", "noisy_or_not", "\n", "\n", "user", "=", "features", "[", "idx", "]", "[", "0", "]", "\n", "item", "=", "features", "[", "idx", "]", "[", "1", "]", "\n", "label", "=", "labels", "[", "idx", "]", "\n", "noisy_label", "=", "noisy_or_not", "[", "idx", "]", "\n", "\n", "return", "user", ",", "item", ",", "label", ",", "noisy_label", "\n", "\n"]], "home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.R_CE.data_utils.load_all": [[9, 86], ["pandas.read_csv", "print", "print", "train_data.values.tolist.values.tolist", "scipy.dok_matrix", "pandas.read_csv", "valid_data.values.tolist.values.tolist", "scipy.dok_matrix", "train_data_list.append", "train_data_noisy.append", "valid_data_list.append", "open", "fd.readline", "train_data[].max", "train_data[].max", "user_pos[].append", "user_pos[].append", "fd.readline.split", "fd.readline", "int", "int", "test_data_pos[].append", "eval", "eval"], "function", ["home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.R_CE.main.eval", "home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.R_CE.main.eval"], ["def", "load_all", "(", "dataset", ",", "data_path", ")", ":", "\n", "\n", "\t", "train_rating", "=", "data_path", "+", "'{}.train.rating'", ".", "format", "(", "dataset", ")", "\n", "valid_rating", "=", "data_path", "+", "'{}.valid.rating'", ".", "format", "(", "dataset", ")", "\n", "test_negative", "=", "data_path", "+", "'{}.test.negative'", ".", "format", "(", "dataset", ")", "\n", "\n", "################# load training data #################\t", "\n", "train_data", "=", "pd", ".", "read_csv", "(", "\n", "train_rating", ",", "\n", "sep", "=", "'\\t'", ",", "header", "=", "None", ",", "names", "=", "[", "'user'", ",", "'item'", ",", "'noisy'", "]", ",", "\n", "usecols", "=", "[", "0", ",", "1", ",", "2", "]", ",", "dtype", "=", "{", "0", ":", "np", ".", "int32", ",", "1", ":", "np", ".", "int32", ",", "2", ":", "np", ".", "int32", "}", ")", "\n", "\n", "if", "dataset", "==", "\"adressa\"", ":", "\n", "\t\t", "user_num", "=", "212231", "\n", "item_num", "=", "6596", "\n", "", "else", ":", "\n", "\t\t", "user_num", "=", "train_data", "[", "'user'", "]", ".", "max", "(", ")", "+", "1", "\n", "item_num", "=", "train_data", "[", "'item'", "]", ".", "max", "(", ")", "+", "1", "\n", "", "print", "(", "\"user, item num\"", ")", "\n", "print", "(", "user_num", ",", "item_num", ")", "\n", "train_data", "=", "train_data", ".", "values", ".", "tolist", "(", ")", "\n", "\n", "# load ratings as a dok matrix", "\n", "train_mat", "=", "sp", ".", "dok_matrix", "(", "(", "user_num", ",", "item_num", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "train_data_list", "=", "[", "]", "\n", "train_data_noisy", "=", "[", "]", "\n", "for", "x", "in", "train_data", ":", "\n", "\t\t", "train_mat", "[", "x", "[", "0", "]", ",", "x", "[", "1", "]", "]", "=", "1.0", "\n", "train_data_list", ".", "append", "(", "[", "x", "[", "0", "]", ",", "x", "[", "1", "]", "]", ")", "\n", "train_data_noisy", ".", "append", "(", "x", "[", "2", "]", ")", "\n", "\n", "################# load validation data #################", "\n", "", "valid_data", "=", "pd", ".", "read_csv", "(", "\n", "valid_rating", ",", "\n", "sep", "=", "'\\t'", ",", "header", "=", "None", ",", "names", "=", "[", "'user'", ",", "'item'", ",", "'noisy'", "]", ",", "\n", "usecols", "=", "[", "0", ",", "1", ",", "2", "]", ",", "dtype", "=", "{", "0", ":", "np", ".", "int32", ",", "1", ":", "np", ".", "int32", ",", "2", ":", "np", ".", "int32", "}", ")", "\n", "valid_data", "=", "valid_data", ".", "values", ".", "tolist", "(", ")", "\n", "valid_data_list", "=", "[", "]", "\n", "for", "x", "in", "valid_data", ":", "\n", "\t\t", "valid_data_list", ".", "append", "(", "[", "x", "[", "0", "]", ",", "x", "[", "1", "]", "]", ")", "\n", "\n", "", "user_pos", "=", "{", "}", "\n", "for", "x", "in", "train_data_list", ":", "\n", "\t\t", "if", "x", "[", "0", "]", "in", "user_pos", ":", "\n", "\t\t\t", "user_pos", "[", "x", "[", "0", "]", "]", ".", "append", "(", "x", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "\t\t\t", "user_pos", "[", "x", "[", "0", "]", "]", "=", "[", "x", "[", "1", "]", "]", "\n", "", "", "for", "x", "in", "valid_data_list", ":", "\n", "\t\t", "if", "x", "[", "0", "]", "in", "user_pos", ":", "\n", "\t\t\t", "user_pos", "[", "x", "[", "0", "]", "]", ".", "append", "(", "x", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "\t\t\t", "user_pos", "[", "x", "[", "0", "]", "]", "=", "[", "x", "[", "1", "]", "]", "\n", "\n", "\n", "################# load testing data #################", "\n", "", "", "test_mat", "=", "sp", ".", "dok_matrix", "(", "(", "user_num", ",", "item_num", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "test_data_pos", "=", "{", "}", "\n", "with", "open", "(", "test_negative", ",", "'r'", ")", "as", "fd", ":", "\n", "\t\t", "line", "=", "fd", ".", "readline", "(", ")", "\n", "while", "line", "!=", "None", "and", "line", "!=", "''", ":", "\n", "\t\t\t", "arr", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "if", "dataset", "==", "\"adressa\"", ":", "\n", "\t\t\t\t", "u", "=", "eval", "(", "arr", "[", "0", "]", ")", "[", "0", "]", "\n", "i", "=", "eval", "(", "arr", "[", "0", "]", ")", "[", "1", "]", "\n", "", "else", ":", "\n", "\t\t\t\t", "u", "=", "int", "(", "arr", "[", "0", "]", ")", "\n", "i", "=", "int", "(", "arr", "[", "1", "]", ")", "\n", "", "if", "u", "in", "test_data_pos", ":", "\n", "\t\t\t\t", "test_data_pos", "[", "u", "]", ".", "append", "(", "i", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "test_data_pos", "[", "u", "]", "=", "[", "i", "]", "\n", "", "test_mat", "[", "u", ",", "i", "]", "=", "1.0", "\n", "line", "=", "fd", ".", "readline", "(", ")", "\n", "\n", "\n", "", "", "return", "train_data_list", ",", "valid_data_list", ",", "test_data_pos", ",", "user_pos", ",", "user_num", ",", "item_num", ",", "train_mat", ",", "train_data_noisy", "\n", "\n"]], "home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.R_CE.inference.test": [[65, 73], ["model.eval", "evaluate.test_all_users", "print", "print", "print"], "function", ["home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.R_CE.main.eval", "home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.R_CE.evaluate.test_all_users"], ["_", ",", "recall", ",", "NDCG", ",", "_", "=", "evaluate", ".", "test_all_users", "(", "model", ",", "4096", ",", "item_num", ",", "test_data_pos", ",", "user_pos", ",", "top_k", ")", "\n", "\n", "print", "(", "\"################### TEST ######################\"", ")", "\n", "print", "(", "\"Recall {:.4f}-{:.4f}\"", ".", "format", "(", "recall", "[", "0", "]", ",", "recall", "[", "1", "]", ")", ")", "\n", "print", "(", "\"NDCG {:.4f}-{:.4f}\"", ".", "format", "(", "NDCG", "[", "0", "]", ",", "NDCG", "[", "1", "]", ")", ")", "\n", "\n", "", "test", "(", "test_model", ",", "test_data_pos", ",", "user_pos", ")", "\n", "\n", ""]], "home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.R_CE.loss.loss_function": [[8, 16], ["torch.binary_cross_entropy_with_logits", "torch.sigmoid().detach", "torch.sigmoid().detach", "torch.sigmoid().detach", "torch.mean", "torch.mean", "torch.mean", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "function", ["None"], ["def", "loss_function", "(", "y", ",", "t", ",", "drop_rate", ")", ":", "\n", "    ", "loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "y", ",", "t", ",", "reduce", "=", "False", ")", "\n", "\n", "loss_mul", "=", "loss", "*", "t", "\n", "ind_sorted", "=", "np", ".", "argsort", "(", "loss_mul", ".", "cpu", "(", ")", ".", "data", ")", ".", "cuda", "(", ")", "\n", "loss_sorted", "=", "loss", "[", "ind_sorted", "]", "\n", "\n", "remember_rate", "=", "1", "-", "drop_rate", "\n", "num_remember", "=", "int", "(", "remember_rate", "*", "len", "(", "loss_sorted", ")", ")", "\n"]], "home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.R_CE.model.NCF.__init__": [[7, 47], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "model.NCF._init_weight_", "MLP_modules.append", "MLP_modules.append", "MLP_modules.append", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.R_CE.model.NCF.__init__", "home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.R_CE.model.NCF._init_weight_"], ["\t", "def", "__init__", "(", "self", ",", "user_num", ",", "item_num", ",", "factor_num", ",", "num_layers", ",", "\n", "dropout", ",", "model", ",", "GMF_model", "=", "None", ",", "MLP_model", "=", "None", ")", ":", "\n", "\t\t", "super", "(", "NCF", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\"\"\"\n\t\tuser_num: number of users;\n\t\titem_num: number of items;\n\t\tfactor_num: number of predictive factors;\n\t\tnum_layers: the number of layers in MLP model;\n\t\tdropout: dropout rate between fully connected layers;\n\t\tmodel: 'MLP', 'GMF', 'NeuMF-end', and 'NeuMF-pre';\n\t\tGMF_model: pre-trained GMF weights;\n\t\tMLP_model: pre-trained MLP weights.\n\t\t\"\"\"", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "GMF_model", "=", "GMF_model", "\n", "self", ".", "MLP_model", "=", "MLP_model", "\n", "\n", "self", ".", "embed_user_GMF", "=", "nn", ".", "Embedding", "(", "user_num", ",", "factor_num", ")", "\n", "self", ".", "embed_item_GMF", "=", "nn", ".", "Embedding", "(", "item_num", ",", "factor_num", ")", "\n", "self", ".", "embed_user_MLP", "=", "nn", ".", "Embedding", "(", "\n", "user_num", ",", "factor_num", "*", "(", "2", "**", "(", "num_layers", "-", "1", ")", ")", ")", "\n", "self", ".", "embed_item_MLP", "=", "nn", ".", "Embedding", "(", "\n", "item_num", ",", "factor_num", "*", "(", "2", "**", "(", "num_layers", "-", "1", ")", ")", ")", "\n", "\n", "MLP_modules", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "\t\t\t", "input_size", "=", "factor_num", "*", "(", "2", "**", "(", "num_layers", "-", "i", ")", ")", "\n", "MLP_modules", ".", "append", "(", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "dropout", ")", ")", "\n", "MLP_modules", ".", "append", "(", "nn", ".", "Linear", "(", "input_size", ",", "input_size", "//", "2", ")", ")", "\n", "MLP_modules", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "", "self", ".", "MLP_layers", "=", "nn", ".", "Sequential", "(", "*", "MLP_modules", ")", "\n", "\n", "if", "self", ".", "model", "in", "[", "'MLP'", ",", "'GMF'", "]", ":", "\n", "\t\t\t", "predict_size", "=", "factor_num", "\n", "", "else", ":", "\n", "\t\t\t", "predict_size", "=", "factor_num", "*", "2", "\n", "", "self", ".", "predict_layer", "=", "nn", ".", "Linear", "(", "predict_size", ",", "1", ")", "\n", "\n", "self", ".", "_init_weight_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.R_CE.model.NCF._init_weight_": [[48, 92], ["torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "model.NCF.modules", "model.NCF.embed_user_GMF.weight.data.copy_", "model.NCF.embed_item_GMF.weight.data.copy_", "model.NCF.embed_user_MLP.weight.data.copy_", "model.NCF.embed_item_MLP.weight.data.copy_", "zip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.NCF.predict_layer.weight.data.copy_", "model.NCF.predict_layer.bias.data.copy_", "isinstance", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "isinstance", "m.bias.data.zero_", "isinstance", "isinstance", "m1.weight.data.copy_", "m1.bias.data.copy_"], "methods", ["None"], ["", "def", "_init_weight_", "(", "self", ")", ":", "\n", "\t\t", "\"\"\" We leave the weights initialization here. \"\"\"", "\n", "if", "not", "self", ".", "model", "==", "'NeuMF-pre'", ":", "\n", "\t\t\t", "nn", ".", "init", ".", "normal_", "(", "self", ".", "embed_user_GMF", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "embed_user_MLP", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "embed_item_GMF", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "embed_item_MLP", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "\n", "for", "m", "in", "self", ".", "MLP_layers", ":", "\n", "\t\t\t\t", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "\t\t\t\t\t", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "", "", "nn", ".", "init", ".", "kaiming_uniform_", "(", "self", ".", "predict_layer", ".", "weight", ",", "\n", "a", "=", "1", ",", "nonlinearity", "=", "'sigmoid'", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "\t\t\t\t", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "\t\t\t\t\t", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "", "else", ":", "\n", "# embedding layers", "\n", "\t\t\t", "self", ".", "embed_user_GMF", ".", "weight", ".", "data", ".", "copy_", "(", "\n", "self", ".", "GMF_model", ".", "embed_user_GMF", ".", "weight", ")", "\n", "self", ".", "embed_item_GMF", ".", "weight", ".", "data", ".", "copy_", "(", "\n", "self", ".", "GMF_model", ".", "embed_item_GMF", ".", "weight", ")", "\n", "self", ".", "embed_user_MLP", ".", "weight", ".", "data", ".", "copy_", "(", "\n", "self", ".", "MLP_model", ".", "embed_user_MLP", ".", "weight", ")", "\n", "self", ".", "embed_item_MLP", ".", "weight", ".", "data", ".", "copy_", "(", "\n", "self", ".", "MLP_model", ".", "embed_item_MLP", ".", "weight", ")", "\n", "\n", "# mlp layers", "\n", "for", "(", "m1", ",", "m2", ")", "in", "zip", "(", "\n", "self", ".", "MLP_layers", ",", "self", ".", "MLP_model", ".", "MLP_layers", ")", ":", "\n", "\t\t\t\t", "if", "isinstance", "(", "m1", ",", "nn", ".", "Linear", ")", "and", "isinstance", "(", "m2", ",", "nn", ".", "Linear", ")", ":", "\n", "\t\t\t\t\t", "m1", ".", "weight", ".", "data", ".", "copy_", "(", "m2", ".", "weight", ")", "\n", "m1", ".", "bias", ".", "data", ".", "copy_", "(", "m2", ".", "bias", ")", "\n", "\n", "# predict layers", "\n", "", "", "predict_weight", "=", "torch", ".", "cat", "(", "[", "\n", "self", ".", "GMF_model", ".", "predict_layer", ".", "weight", ",", "\n", "self", ".", "MLP_model", ".", "predict_layer", ".", "weight", "]", ",", "dim", "=", "1", ")", "\n", "precit_bias", "=", "self", ".", "GMF_model", ".", "predict_layer", ".", "bias", "+", "self", ".", "MLP_model", ".", "predict_layer", ".", "bias", "\n", "\n", "self", ".", "predict_layer", ".", "weight", ".", "data", ".", "copy_", "(", "0.5", "*", "predict_weight", ")", "\n", "self", ".", "predict_layer", ".", "bias", ".", "data", ".", "copy_", "(", "0.5", "*", "precit_bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.WenjieWWJ_DenoisingRec.R_CE.model.NCF.forward": [[93, 113], ["model.NCF.predict_layer", "model.NCF.view", "model.NCF.embed_user_GMF", "model.NCF.embed_item_GMF", "model.NCF.embed_user_MLP", "model.NCF.embed_item_MLP", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.NCF.MLP_layers", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "user", ",", "item", ")", ":", "\n", "\t\t", "if", "not", "self", ".", "model", "==", "'MLP'", ":", "\n", "\t\t\t", "embed_user_GMF", "=", "self", ".", "embed_user_GMF", "(", "user", ")", "\n", "embed_item_GMF", "=", "self", ".", "embed_item_GMF", "(", "item", ")", "\n", "output_GMF", "=", "embed_user_GMF", "*", "embed_item_GMF", "\n", "", "if", "not", "self", ".", "model", "==", "'GMF'", ":", "\n", "\t\t\t", "embed_user_MLP", "=", "self", ".", "embed_user_MLP", "(", "user", ")", "\n", "embed_item_MLP", "=", "self", ".", "embed_item_MLP", "(", "item", ")", "\n", "interaction", "=", "torch", ".", "cat", "(", "(", "embed_user_MLP", ",", "embed_item_MLP", ")", ",", "-", "1", ")", "\n", "output_MLP", "=", "self", ".", "MLP_layers", "(", "interaction", ")", "\n", "\n", "", "if", "self", ".", "model", "==", "'GMF'", ":", "\n", "\t\t\t", "concat", "=", "output_GMF", "\n", "", "elif", "self", ".", "model", "==", "'MLP'", ":", "\n", "\t\t\t", "concat", "=", "output_MLP", "\n", "", "else", ":", "\n", "\t\t\t", "concat", "=", "torch", ".", "cat", "(", "(", "output_GMF", ",", "output_MLP", ")", ",", "-", "1", ")", "\n", "\n", "", "prediction", "=", "self", ".", "predict_layer", "(", "concat", ")", "\n", "return", "prediction", ".", "view", "(", "-", "1", ")", "\n", "", "", ""]]}