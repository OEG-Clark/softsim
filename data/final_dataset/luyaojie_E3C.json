{"home.repos.pwc.inspect_result.luyaojie_E3C.utils.tbf_utils.Mention.__init__": [[53, 60], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "doc_id", ",", "mention_id", ",", "offset", ",", "text", ",", "event_type", ",", "realis", ")", ":", "\n", "        ", "self", ".", "doc_id", "=", "doc_id", "\n", "self", ".", "mention_id", "=", "mention_id", "\n", "self", ".", "offset", "=", "offset", "\n", "self", ".", "text", "=", "text", "\n", "self", ".", "event_type", "=", "event_type", "\n", "self", ".", "realis", "=", "realis", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.utils.tbf_utils.Mention.get_from_line": [[61, 70], ["line.split", "tbf_utils.Mention"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_from_line", "(", "line", ")", ":", "\n", "        ", "att", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "return", "Mention", "(", "doc_id", "=", "att", "[", "1", "]", ",", "\n", "mention_id", "=", "att", "[", "2", "]", ",", "\n", "offset", "=", "att", "[", "3", "]", ",", "\n", "text", "=", "att", "[", "4", "]", ",", "\n", "event_type", "=", "att", "[", "5", "]", ",", "\n", "realis", "=", "att", "[", "6", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.utils.tbf_utils.Mention.to_line": [[71, 74], ["None"], "methods", ["None"], ["", "def", "to_line", "(", "self", ")", ":", "\n", "        ", "return", "\"\\t\"", ".", "join", "(", "[", "'rich_ere'", ",", "self", ".", "doc_id", ",", "self", ".", "mention_id", ",", "self", ".", "offset", ",", "\n", "self", ".", "text", ",", "self", ".", "event_type", ",", "self", ".", "realis", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.utils.tbf_utils.Coreference.__init__": [[77, 80], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "coref_id", ",", "mention_list", ")", ":", "\n", "        ", "self", ".", "coref_id", "=", "coref_id", "\n", "self", ".", "mention_list", "=", "mention_list", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.utils.tbf_utils.Coreference.get_from_line": [[81, 86], ["line.split", "tbf_utils.Coreference", "att[].split"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_from_line", "(", "line", ")", ":", "\n", "        ", "att", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "return", "Coreference", "(", "coref_id", "=", "att", "[", "1", "]", ",", "\n", "mention_list", "=", "att", "[", "2", "]", ".", "split", "(", "','", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.utils.tbf_utils.Coreference.to_line": [[87, 91], ["None"], "methods", ["None"], ["", "def", "to_line", "(", "self", ")", ":", "\n", "        ", "return", "\"\\t\"", ".", "join", "(", "[", "'@Coreference'", ",", "\n", "self", ".", "coref_id", ",", "\n", "','", ".", "join", "(", "self", ".", "mention_list", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.utils.tbf_utils.Coreference.to_line_with_type": [[92, 98], ["None"], "methods", ["None"], ["", "def", "to_line_with_type", "(", "self", ",", "mention_dict", ")", ":", "\n", "        ", "return", "\"\\t\"", ".", "join", "(", "[", "'@Coreference'", ",", "\n", "self", ".", "coref_id", ",", "\n", "','", ".", "join", "(", "self", ".", "mention_list", ")", ",", "\n", "'\\n'", "+", "' | '", ".", "join", "(", "[", "mention_dict", "[", "mention", "]", ".", "event_type", "for", "mention", "in", "self", ".", "mention_list", "]", ")", ",", "\n", "'\\n'", "+", "' | '", ".", "join", "(", "[", "mention_dict", "[", "mention", "]", ".", "text", "for", "mention", "in", "self", ".", "mention_list", "]", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.utils.tbf_utils.Document.__init__": [[102, 107], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "doc_id", ",", "mention_list", ",", "coref_list", ")", ":", "\n", "        ", "self", ".", "doc_id", "=", "doc_id", "\n", "self", ".", "mention_list", "=", "mention_list", "\n", "self", ".", "coref_list", "=", "coref_list", "\n", "self", ".", "mention_dict", "=", "{", "mention", ".", "mention_id", ":", "mention", "for", "mention", "in", "mention_list", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.utils.tbf_utils.Document.get_from_lines": [[108, 121], ["list", "list", "line.strip", "lines[].split", "line.startswith", "tbf_utils.Document", "line.startswith", "tbf_utils.Coreference.get_from_line", "tbf_utils.Mention.get_from_line"], "methods", ["home.repos.pwc.inspect_result.luyaojie_E3C.utils.tbf_utils.Coreference.get_from_line", "home.repos.pwc.inspect_result.luyaojie_E3C.utils.tbf_utils.Coreference.get_from_line"], ["", "@", "staticmethod", "\n", "def", "get_from_lines", "(", "lines", ")", ":", "\n", "        ", "lines", "=", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "lines", "]", "\n", "doc_id", "=", "lines", "[", "0", "]", ".", "split", "(", ")", "[", "1", "]", "\n", "mention_list", "=", "list", "(", ")", "\n", "coref_list", "=", "list", "(", ")", "\n", "for", "line", "in", "lines", "[", "1", ":", "]", ":", "\n", "            ", "if", "line", ".", "startswith", "(", "\"#EndOfDocument\"", ")", ":", "\n", "                ", "return", "Document", "(", "doc_id", ",", "mention_list", "=", "mention_list", ",", "coref_list", "=", "coref_list", ")", "\n", "", "elif", "line", ".", "startswith", "(", "\"@Coreference\"", ")", ":", "\n", "                ", "coref_list", "+=", "[", "Coreference", ".", "get_from_line", "(", "line", ")", "]", "\n", "", "else", ":", "\n", "                ", "mention_list", "+=", "[", "Mention", ".", "get_from_line", "(", "line", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.utils.tbf_utils.Document.delete_mention_in_doc": [[122, 131], ["tbf_utils.Document.delete_mention_in_coref", "enumerate", "tbf_utils.Document.mention_list.pop"], "methods", ["home.repos.pwc.inspect_result.luyaojie_E3C.utils.tbf_utils.Document.delete_mention_in_coref"], ["", "", "", "def", "delete_mention_in_doc", "(", "self", ",", "mention_id", ")", ":", "\n", "        ", "self", ".", "delete_mention_in_coref", "(", "mention_id", ")", "\n", "to_delete", "=", "-", "1", "\n", "for", "index", ",", "mention", "in", "enumerate", "(", "self", ".", "mention_list", ")", ":", "\n", "            ", "if", "mention", ".", "mention_id", "==", "mention_id", ":", "\n", "                ", "to_delete", "=", "index", "\n", "break", "\n", "", "", "if", "to_delete", ">=", "0", ":", "\n", "            ", "self", ".", "mention_list", ".", "pop", "(", "to_delete", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.utils.tbf_utils.Document.delete_mention_in_coref": [[132, 150], ["enumerate", "enumerate", "tbf_utils.Document.coref_list.pop", "coref.mention_list.pop", "len"], "methods", ["None"], ["", "", "def", "delete_mention_in_coref", "(", "self", ",", "mention_id", ")", ":", "\n", "        ", "to_delete", "=", "-", "1", "\n", "for", "coref", "in", "self", ".", "coref_list", ":", "\n", "            ", "for", "index", ",", "mention_id_in_coref", "in", "enumerate", "(", "coref", ".", "mention_list", ")", ":", "\n", "                ", "if", "mention_id_in_coref", "==", "mention_id", ":", "\n", "                    ", "to_delete", "=", "index", "\n", "break", "\n", "", "", "if", "to_delete", ">=", "0", ":", "\n", "                ", "coref", ".", "mention_list", ".", "pop", "(", "to_delete", ")", "\n", "break", "\n", "\n", "", "", "to_delete", "=", "-", "1", "\n", "for", "index", ",", "coref", "in", "enumerate", "(", "self", ".", "coref_list", ")", ":", "\n", "            ", "if", "len", "(", "coref", ".", "mention_list", ")", "==", "0", ":", "\n", "                ", "to_delete", "=", "index", "\n", "break", "\n", "", "", "if", "to_delete", ">=", "0", ":", "\n", "            ", "self", ".", "coref_list", ".", "pop", "(", "to_delete", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.utils.tbf_utils.Document.to_lines": [[151, 166], ["list", "set", "set.add", "mention.to_line", "len", "coref.to_line"], "methods", ["home.repos.pwc.inspect_result.luyaojie_E3C.utils.tbf_utils.Coreference.to_line", "home.repos.pwc.inspect_result.luyaojie_E3C.utils.tbf_utils.Coreference.to_line"], ["", "", "def", "to_lines", "(", "self", ")", ":", "\n", "        ", "result", "=", "list", "(", ")", "\n", "result", "+=", "[", "'#BeginOfDocument %s'", "%", "self", ".", "doc_id", "]", "\n", "writed_mention_set", "=", "set", "(", ")", "\n", "for", "mention", "in", "self", ".", "mention_list", ":", "\n", "            ", "if", "mention", ".", "mention_id", "in", "writed_mention_set", ":", "\n", "                ", "continue", "\n", "", "writed_mention_set", ".", "add", "(", "mention", ".", "mention_id", ")", "\n", "result", "+=", "[", "mention", ".", "to_line", "(", ")", "]", "\n", "", "for", "coref", "in", "self", ".", "coref_list", ":", "\n", "            ", "if", "len", "(", "coref", ".", "mention_list", ")", "==", "1", ":", "\n", "                ", "continue", "\n", "", "result", "+=", "[", "coref", ".", "to_line", "(", ")", "]", "\n", "", "result", "+=", "[", "\"#EndOfDocument\"", "]", "\n", "return", "'\\n'", ".", "join", "(", "result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.utils.tbf_utils.Document.to_lines_with_type": [[167, 182], ["list", "set", "set.add", "mention.to_line", "len", "coref.to_line_with_type"], "methods", ["home.repos.pwc.inspect_result.luyaojie_E3C.utils.tbf_utils.Coreference.to_line", "home.repos.pwc.inspect_result.luyaojie_E3C.utils.tbf_utils.Coreference.to_line_with_type"], ["", "def", "to_lines_with_type", "(", "self", ")", ":", "\n", "        ", "result", "=", "list", "(", ")", "\n", "result", "+=", "[", "'#BeginOfDocument %s'", "%", "self", ".", "doc_id", "]", "\n", "writed_mention_set", "=", "set", "(", ")", "\n", "for", "mention", "in", "self", ".", "mention_list", ":", "\n", "            ", "if", "mention", ".", "mention_id", "in", "writed_mention_set", ":", "\n", "                ", "continue", "\n", "", "writed_mention_set", ".", "add", "(", "mention", ".", "mention_id", ")", "\n", "result", "+=", "[", "mention", ".", "to_line", "(", ")", "]", "\n", "", "for", "coref", "in", "self", ".", "coref_list", ":", "\n", "            ", "if", "len", "(", "coref", ".", "mention_list", ")", "==", "1", ":", "\n", "                ", "continue", "\n", "", "result", "+=", "[", "coref", ".", "to_line_with_type", "(", "self", ".", "mention_dict", ")", "]", "\n", "", "result", "+=", "[", "\"#EndOfDocument\"", "]", "\n", "return", "'\\n'", ".", "join", "(", "result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.utils.tbf_utils.split_tbf": [[29, 43], ["open().readlines", "list", "line.startswith", "line.startswith", "open"], "function", ["None"], ["def", "split_tbf", "(", "filename", ")", ":", "\n", "    ", "lines", "=", "open", "(", "filename", ")", ".", "readlines", "(", ")", "\n", "document_list", "=", "list", "(", ")", "\n", "document", "=", "None", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "if", "line", ".", "startswith", "(", "'#BeginOfDocument'", ")", ":", "\n", "            ", "document", "=", "[", "line", "]", "\n", "", "else", ":", "\n", "            ", "document", "+=", "[", "line", "]", "\n", "", "if", "line", ".", "startswith", "(", "'#EndOfDocument'", ")", ":", "\n", "            ", "document_list", "+=", "[", "document", "]", "\n", "document", "=", "None", "\n", "\n", "", "", "return", "document_list", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.utils.tbf_utils.load_document_dict_from_tbf": [[45, 50], ["tbf_utils.split_tbf", "tbf_utils.Document.get_from_lines"], "function", ["home.repos.pwc.inspect_result.luyaojie_E3C.utils.tbf_utils.split_tbf", "home.repos.pwc.inspect_result.luyaojie_E3C.utils.tbf_utils.Document.get_from_lines"], ["", "def", "load_document_dict_from_tbf", "(", "filename", ")", ":", "\n", "    ", "document_list", "=", "split_tbf", "(", "filename", ")", "\n", "document_list", "=", "[", "Document", ".", "get_from_lines", "(", "document", ")", "for", "document", "in", "document_list", "]", "\n", "document_dict", "=", "{", "document", ".", "doc_id", ":", "document", "for", "document", "in", "document_list", "}", "\n", "return", "document_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.utils.debug_utils.pprint_tensor": [[6, 9], ["print", "print", "x.size", "type"], "function", ["None"], ["def", "pprint_tensor", "(", "x", ",", "name", ")", ":", "\n", "    ", "print", "(", "\"tensor %s: %s with %s\"", "%", "(", "name", ",", "x", ".", "size", "(", ")", ",", "type", "(", "x", ")", ")", ")", "\n", "print", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.utils.cluster_decoding_utils.ClusterDecoder.__init__": [[77, 81], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "antecedent_indices", ",", "vocab", ",", "positive_label_size", "=", "18", ")", ":", "\n", "        ", "self", ".", "_antecedent_indices", "=", "antecedent_indices", "\n", "self", ".", "_vocab", "=", "vocab", "\n", "self", ".", "_positive_label_size", "=", "positive_label_size", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.utils.cluster_decoding_utils.ClusterDecoder.get_label_name": [[82, 84], ["cluster_decoding_utils.ClusterDecoder._vocab.get_token_from_index"], "methods", ["None"], ["", "def", "get_label_name", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "_vocab", ".", "get_token_from_index", "(", "index", ",", "'labels'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.utils.cluster_decoding_utils.ClusterDecoder.get_antecedent_span": [[85, 90], ["coref_antecedent_span[].item", "coref_antecedent_span[].item"], "methods", ["None"], ["", "def", "get_antecedent_span", "(", "self", ",", "top_spans", ",", "span_index", ",", "coref_antecedent_index", ")", ":", "\n", "        ", "antecedent_span_index", "=", "coref_antecedent_index", "-", "(", "self", ".", "_positive_label_size", "+", "1", ")", "\n", "coref_antecedent_span_index", "=", "self", ".", "_antecedent_indices", "[", "span_index", ",", "antecedent_span_index", "]", "\n", "coref_antecedent_span", "=", "top_spans", "[", "coref_antecedent_span_index", "]", "\n", "return", "coref_antecedent_span", "[", "0", "]", ".", "item", "(", ")", ",", "coref_antecedent_span", "[", "1", "]", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.utils.cluster_decoding_utils.ClusterDecoder.decode": [[91, 94], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "decode", "(", "self", ",", "top_spans", ",", "coreference_scores", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.utils.cluster_decoding_utils.TypeGuidedClusterDecoder.__init__": [[98, 100], ["cluster_decoding_utils.ClusterDecoder.__init__"], "methods", ["home.repos.pwc.inspect_result.luyaojie_E3C.scripts.convert_predict_to_tbf.Document.__init__"], ["    ", "def", "__init__", "(", "self", ",", "antecedent_indices", ",", "vocab", ",", "positive_label_size", "=", "18", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "antecedent_indices", ",", "vocab", ",", "positive_label_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.utils.cluster_decoding_utils.TypeGuidedClusterDecoder.decode": [[101, 166], ["list", "dict", "dict", "enumerate", "cluster_decoding_utils.add_single_mention_as_cluster_to_clusters", "cluster_decoding_utils.change_list_clusters_to_tuple_clusters", "list", "list", "positive_top_spans_dict.items", "zip", "tuple", "torch.argsort().tolist", "cluster_decoding_utils.list_partition", "tuple.tolist", "len", "cluster_decoding_utils.TypeGuidedClusterDecoder.get_label_name", "cluster_decoding_utils.TypeGuidedClusterDecoder.get_antecedent_span", "positive_top_spans_dict.get", "cluster_decoding_utils.add_mention_to_cluster", "cluster_decoding_utils.add_mention_to_cluster", "positive_top_spans_dict.items", "torch.argsort", "torch.argsort().tolist.index"], "methods", ["home.repos.pwc.inspect_result.luyaojie_E3C.utils.cluster_decoding_utils.add_single_mention_as_cluster_to_clusters", "home.repos.pwc.inspect_result.luyaojie_E3C.utils.cluster_decoding_utils.change_list_clusters_to_tuple_clusters", "home.repos.pwc.inspect_result.luyaojie_E3C.utils.cluster_decoding_utils.list_partition", "home.repos.pwc.inspect_result.luyaojie_E3C.utils.cluster_decoding_utils.ClusterDecoder.get_label_name", "home.repos.pwc.inspect_result.luyaojie_E3C.utils.cluster_decoding_utils.ClusterDecoder.get_antecedent_span", "home.repos.pwc.inspect_result.luyaojie_E3C.utils.cluster_decoding_utils.add_mention_to_cluster", "home.repos.pwc.inspect_result.luyaojie_E3C.utils.cluster_decoding_utils.add_mention_to_cluster"], ["", "def", "decode", "(", "self", ",", "top_spans", ",", "coreference_scores", ")", ":", "\n", "        ", "clusters", "=", "list", "(", ")", "\n", "spans_to_cluster_ids", ":", "Dict", "[", "Tuple", "[", "int", ",", "int", "]", ",", "int", "]", "=", "dict", "(", ")", "\n", "positive_top_spans_dict", ":", "Dict", "[", "Tuple", "[", "int", ",", "int", "]", ",", "str", "]", "=", "dict", "(", ")", "\n", "for", "span_index", ",", "(", "current_span", ",", "coreference_score", ")", "in", "enumerate", "(", "zip", "(", "top_spans", ",", "coreference_scores", ")", ")", ":", "\n", "\n", "            ", "current_span", "=", "tuple", "(", "current_span", ".", "tolist", "(", ")", ")", "\n", "sorted_indices", "=", "torch", ".", "argsort", "(", "coreference_score", ",", "descending", "=", "True", ")", ".", "tolist", "(", ")", "\n", "\n", "# 0 is NIL Span, find antecedent index greater than 0", "\n", "positive_antecedent_indices", "=", "sorted_indices", "[", ":", "sorted_indices", ".", "index", "(", "0", ")", "]", "\n", "\n", "if", "len", "(", "positive_antecedent_indices", ")", "==", "0", ":", "\n", "# NIL Span", "\n", "                ", "continue", "\n", "\n", "", "label_antecedent_indices", ",", "coref_antecedent_indices", "=", "list_partition", "(", "positive_antecedent_indices", "[", ":", "1", "]", ",", "\n", "self", ".", "_positive_label_size", ")", "\n", "if", "sorted_indices", "[", "0", "]", "in", "label_antecedent_indices", ":", "\n", "# Label Scores is bigger", "\n", "# this span links to label", "\n", "# Add span to Positive Span Dict", "\n", "                ", "current_span_label", "=", "self", ".", "get_label_name", "(", "label_antecedent_indices", "[", "0", "]", ")", "\n", "positive_top_spans_dict", "[", "current_span", "]", "=", "current_span_label", "\n", "", "else", ":", "\n", "                ", "antecedent_index", "=", "coref_antecedent_indices", "[", "0", "]", "\n", "antecedent_span", "=", "self", ".", "get_antecedent_span", "(", "top_spans", ",", "\n", "span_index", ",", "\n", "antecedent_index", ")", "\n", "\n", "antecedent_span_label", "=", "positive_top_spans_dict", ".", "get", "(", "antecedent_span", ",", "None", ")", "\n", "\n", "if", "antecedent_span_label", "is", "None", ":", "\n", "# print(\"Antecedent is None, skip this pair\")", "\n", "                    ", "continue", "\n", "\n", "# this span's label is same to antecedent span's label", "\n", "", "positive_top_spans_dict", "[", "current_span", "]", "=", "antecedent_span_label", "\n", "\n", "predicted_cluster_id", "=", "add_mention_to_cluster", "(", "antecedent_span", ",", "\n", "spans_to_cluster_ids", ",", "\n", "clusters", ")", "\n", "\n", "add_mention_to_cluster", "(", "current_span", ",", "\n", "spans_to_cluster_ids", ",", "\n", "clusters", ",", "\n", "predicted_cluster_id", ")", "\n", "\n", "", "", "pred_label_spans", "=", "[", "(", "span_key", "[", "0", "]", ",", "span_key", "[", "1", "]", ",", "span_label", ")", "\n", "for", "span_key", ",", "span_label", "in", "positive_top_spans_dict", ".", "items", "(", ")", "]", "\n", "\n", "add_single_mention_as_cluster_to_clusters", "(", "pred_label_spans", ",", "spans_to_cluster_ids", ",", "clusters", ")", "\n", "\n", "change_list_clusters_to_tuple_clusters", "(", "clusters", ")", "\n", "\n", "positive_top_spans", "=", "list", "(", ")", "\n", "positive_top_spans_labels", "=", "list", "(", ")", "\n", "for", "span", ",", "span_label", "in", "positive_top_spans_dict", ".", "items", "(", ")", ":", "\n", "            ", "positive_top_spans", "+=", "[", "span", "]", "\n", "positive_top_spans_labels", "+=", "[", "span_label", "]", "\n", "\n", "", "return", "{", "\"positive_top_spans\"", ":", "positive_top_spans", ",", "\n", "\"positive_top_spans_labels\"", ":", "positive_top_spans_labels", ",", "\n", "\"pred_label_spans\"", ":", "pred_label_spans", ",", "\n", "\"clusters\"", ":", "clusters", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.utils.cluster_decoding_utils.prepare_cluster": [[11, 15], ["list"], "function", ["None"], ["def", "prepare_cluster", "(", ")", ":", "\n", "    ", "clusters", "=", "list", "(", ")", "\n", "spans_to_cluster_ids", ":", "Dict", "[", "Tuple", "[", "int", ",", "int", "]", ",", "int", "]", "=", "{", "}", "\n", "return", "clusters", ",", "spans_to_cluster_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.utils.cluster_decoding_utils.list_partition": [[17, 25], ["list", "list"], "function", ["None"], ["", "def", "list_partition", "(", "numbers", ",", "value", ")", ":", "\n", "    ", "left_numbers", ",", "right_numbers", "=", "list", "(", ")", ",", "list", "(", ")", "\n", "for", "number", "in", "numbers", ":", "\n", "        ", "if", "number", "<=", "value", ":", "\n", "            ", "left_numbers", "+=", "[", "number", "]", "\n", "", "else", ":", "\n", "            ", "right_numbers", "+=", "[", "number", "]", "\n", "", "", "return", "left_numbers", ",", "right_numbers", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.utils.cluster_decoding_utils.add_mention_to_cluster": [[27, 52], ["clusters[].add", "len", "clusters.append"], "function", ["None"], ["", "def", "add_mention_to_cluster", "(", "mention_span", ":", "Tuple", "[", "int", ",", "int", "]", ",", "spans_to_cluster_ids", ",", "clusters", ",", "cluster_id", ":", "int", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Add Mention to Cluster\n    :param mention_span: (start, end)\n    :param spans_to_cluster_ids: (start, end) -> cluster id\n    :param clusters: cluster id -> {(start1, end1), (start2, end2)}\n    :param cluster_id:\n    :return:\n    \"\"\"", "\n", "if", "cluster_id", "is", "not", "None", ":", "\n", "        ", "clusters", "[", "cluster_id", "]", ".", "add", "(", "mention_span", ")", "\n", "spans_to_cluster_ids", "[", "mention_span", "]", "=", "cluster_id", "\n", "return", "cluster_id", "\n", "\n", "# Cluster ID is None, add antecedent", "\n", "", "if", "mention_span", "in", "spans_to_cluster_ids", ":", "\n", "        ", "predicted_cluster_id", ":", "int", "=", "spans_to_cluster_ids", "[", "mention_span", "]", "\n", "", "else", ":", "\n", "# We start a new cluster.", "\n", "        ", "predicted_cluster_id", "=", "len", "(", "clusters", ")", "\n", "# Append a new cluster containing only this span.", "\n", "clusters", ".", "append", "(", "{", "mention_span", "}", ")", "\n", "# Record the new id of this span.", "\n", "spans_to_cluster_ids", "[", "mention_span", "]", "=", "predicted_cluster_id", "\n", "", "return", "predicted_cluster_id", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.utils.cluster_decoding_utils.change_list_clusters_to_tuple_clusters": [[54, 58], ["range", "len", "tuple"], "function", ["None"], ["", "def", "change_list_clusters_to_tuple_clusters", "(", "clusters", ")", ":", "\n", "    ", "for", "cluster_index", "in", "range", "(", "len", "(", "clusters", ")", ")", ":", "\n", "        ", "clusters", "[", "cluster_index", "]", "=", "tuple", "(", "clusters", "[", "cluster_index", "]", ")", "\n", "", "return", "clusters", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.utils.cluster_decoding_utils.add_single_mention_as_cluster_to_clusters": [[60, 74], ["cluster_decoding_utils.add_mention_to_cluster"], "function", ["home.repos.pwc.inspect_result.luyaojie_E3C.utils.cluster_decoding_utils.add_mention_to_cluster"], ["", "def", "add_single_mention_as_cluster_to_clusters", "(", "pred_label_spans", ",", "spans_to_cluster_ids", ",", "clusters", ")", ":", "\n", "    ", "\"\"\"\n\n    :param pred_label_spans: ``list``\n        [(start1, end1, label1), (start2, end2, label2), ...]\n    :param spans_to_cluster_ids:\n    :param clusters:\n    :return:\n    \"\"\"", "\n", "for", "span_start", ",", "span_end", ",", "span_label", "in", "pred_label_spans", ":", "\n", "        ", "span_key", "=", "(", "span_start", ",", "span_end", ")", "\n", "if", "span_key", "not", "in", "spans_to_cluster_ids", ":", "\n", "            ", "add_mention_to_cluster", "(", "span_key", ",", "spans_to_cluster_ids", ",", "clusters", ")", "\n", "", "", "return", "clusters", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.utils.cluster_decoding_utils.node_decode": [[169, 202], ["output_dict[].detach().cpu", "output_dict[].detach().cpu", "output_dict[].detach().cpu", "list", "list", "list", "list", "zip", "cluster_decoding_utils.TypeGuidedClusterDecoder", "NotImplementedError", "cluster_decoding_utils.TypeGuidedClusterDecoder.decode", "output_dict[].detach", "output_dict[].detach", "output_dict[].detach"], "function", ["home.repos.pwc.inspect_result.luyaojie_E3C.models.end_to_end_event_coreference.End2EndEventCoreferenceResolver.decode"], ["", "", "def", "node_decode", "(", "output_dict", ",", "vocab", ",", "positive_label_size", "=", "18", ",", "decoding_algorithm", "=", "'type-guided'", ",", "type_threshold", "=", "-", "1", ")", ":", "\n", "# A tensor of shape (batch_size, num_spans_to_keep, 2), representing", "\n", "# the start and end indices of each span.", "\n", "    ", "batch_top_spans", "=", "output_dict", "[", "\"top_spans\"", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "batch_coreference_scores", "=", "output_dict", "[", "'coreference_scores'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "\n", "# A tensor of shape (num_spans_to_keep, max_antecedents), representing the indices", "\n", "# of the predicted antecedents with respect to the 2nd dimension of ``batch_top_spans``", "\n", "# for each antecedent we considered.", "\n", "antecedent_indices", "=", "output_dict", "[", "\"antecedent_indices\"", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "\n", "if", "decoding_algorithm", "==", "'type-guided'", ":", "\n", "        ", "cluster_decoder", "=", "TypeGuidedClusterDecoder", "(", "antecedent_indices", ",", "vocab", ",", "positive_label_size", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Decoding Algorithm Not Implemented: %s'", "%", "decoding_algorithm", ")", "\n", "\n", "", "batch_positive_top_spans", "=", "list", "(", ")", "\n", "batch_positive_top_spans_labels", "=", "list", "(", ")", "\n", "batch_pred_label_spans", "=", "list", "(", ")", "\n", "batch_clusters", "=", "list", "(", ")", "\n", "\n", "for", "top_spans", ",", "coreference_scores", "in", "zip", "(", "batch_top_spans", ",", "batch_coreference_scores", ")", ":", "\n", "        ", "result", "=", "cluster_decoder", ".", "decode", "(", "top_spans", ",", "coreference_scores", ")", "\n", "batch_positive_top_spans", "+=", "[", "result", "[", "'positive_top_spans'", "]", "]", "\n", "batch_positive_top_spans_labels", "+=", "[", "result", "[", "'positive_top_spans_labels'", "]", "]", "\n", "batch_pred_label_spans", "+=", "[", "result", "[", "'pred_label_spans'", "]", "]", "\n", "batch_clusters", "+=", "[", "result", "[", "'clusters'", "]", "]", "\n", "\n", "", "output_dict", "[", "'top_spans'", "]", "=", "batch_positive_top_spans", "\n", "output_dict", "[", "'top_type_labels'", "]", "=", "batch_positive_top_spans_labels", "\n", "output_dict", "[", "'clusters'", "]", "=", "batch_clusters", "\n", "output_dict", "[", "'pred_label_spans'", "]", "=", "batch_pred_label_spans", "\n", "return", "output_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.predictors.event_coref_predictor.EventCorefPredictor.__init__": [[23, 29], ["allennlp.predictors.predictor.Predictor.__init__", "allennlp.common.util.get_spacy_model"], "methods", ["home.repos.pwc.inspect_result.luyaojie_E3C.scripts.convert_predict_to_tbf.Document.__init__"], ["def", "__init__", "(", "self", ",", "model", ":", "Model", ",", "dataset_reader", ":", "DatasetReader", ",", "language", ":", "str", "=", "'en_core_web_sm'", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model", ",", "dataset_reader", ")", "\n", "\n", "# We have to use spacy to tokenise our document here, because we need", "\n", "# to also know sentence boundaries to propose valid mentions.", "\n", "self", ".", "_spacy", "=", "get_spacy_model", "(", "language", ",", "pos_tags", "=", "True", ",", "parse", "=", "True", ",", "ner", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.predictors.event_coref_predictor.EventCorefPredictor.predict": [[30, 63], ["event_coref_predictor.EventCorefPredictor.predict_json"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "document", ":", "str", ")", "->", "JsonDict", ":", "\n", "        ", "\"\"\"\n        Predict the coreference clusters in the given document.\n\n        .. code-block:: js\n\n            {\n            \"document\": [tokenised document text]\n            \"clusters\":\n              [\n                [\n                  [start_index, end_index],\n                  [start_index, end_index]\n                ],\n                [\n                  [start_index, end_index],\n                  [start_index, end_index],\n                  [start_index, end_index],\n                ],\n                ....\n              ]\n            }\n\n        Parameters\n        ----------\n        document : ``str``\n            A string representation of a document.\n\n        Returns\n        -------\n        A dictionary representation of the predicted coreference clusters.\n        \"\"\"", "\n", "return", "self", ".", "predict_json", "(", "{", "\"document\"", ":", "document", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.predictors.event_coref_predictor.EventCorefPredictor.predict_tokenized": [[64, 79], ["event_coref_predictor.EventCorefPredictor._words_list_to_instance", "event_coref_predictor.EventCorefPredictor.predict_instance"], "methods", ["home.repos.pwc.inspect_result.luyaojie_E3C.predictors.event_coref_predictor.EventCorefPredictor._words_list_to_instance"], ["", "def", "predict_tokenized", "(", "self", ",", "tokenized_document", ":", "List", "[", "str", "]", ")", "->", "JsonDict", ":", "\n", "        ", "\"\"\"\n        Predict the coreference clusters in the given document.\n\n        Parameters\n        ----------\n        tokenized_document : ``List[str]``\n            A list of words representation of a tokenized document.\n\n        Returns\n        -------\n        A dictionary representation of the predicted coreference clusters.\n        \"\"\"", "\n", "instance", "=", "self", ".", "_words_list_to_instance", "(", "tokenized_document", ")", "\n", "return", "self", ".", "predict_instance", "(", "instance", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.predictors.event_coref_predictor.EventCorefPredictor.replace_corefs": [[80, 120], ["list", "range"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "replace_corefs", "(", "document", ":", "Doc", ",", "clusters", ":", "List", "[", "List", "[", "List", "[", "int", "]", "]", "]", ")", "->", "str", ":", "\n", "        ", "\"\"\"\n        Uses a list of coreference clusters to convert a spacy document into a\n        string, where each coreference is replaced by its main mention.\n        \"\"\"", "\n", "# Original tokens with correct whitespace", "\n", "resolved", "=", "list", "(", "tok", ".", "text_with_ws", "for", "tok", "in", "document", ")", "\n", "\n", "for", "cluster", "in", "clusters", ":", "\n", "# The main mention is the first item in the cluster", "\n", "            ", "mention_start", ",", "mention_end", "=", "cluster", "[", "0", "]", "[", "0", "]", ",", "cluster", "[", "0", "]", "[", "1", "]", "+", "1", "\n", "mention_span", "=", "document", "[", "mention_start", ":", "mention_end", "]", "\n", "\n", "# The coreferences are all items following the first in the cluster", "\n", "for", "coref", "in", "cluster", "[", "1", ":", "]", ":", "\n", "                ", "final_token", "=", "document", "[", "coref", "[", "1", "]", "]", "\n", "# In both of the following cases, the first token in the coreference", "\n", "# is replaced with the main mention, while all subsequent tokens", "\n", "# are masked out with \"\", so that they can be elimated from", "\n", "# the returned document during \"\".join(resolved).", "\n", "\n", "# The first case attempts to correctly handle possessive coreferences", "\n", "# by inserting \"'s\" between the mention and the final whitespace", "\n", "# These include my, his, her, their, our, etc.", "\n", "\n", "# Disclaimer: Grammar errors can occur when the main mention is plural,", "\n", "# e.g. \"zebras\" becomes \"zebras's\" because this case isn't", "\n", "# being explictly checked and handled.", "\n", "\n", "if", "final_token", ".", "tag_", "in", "[", "\"PRP$\"", ",", "\"POS\"", "]", ":", "\n", "                    ", "resolved", "[", "coref", "[", "0", "]", "]", "=", "mention_span", ".", "text", "+", "\"'s\"", "+", "final_token", ".", "whitespace_", "\n", "", "else", ":", "\n", "# If not possessive, then replace first token with main mention directly", "\n", "                    ", "resolved", "[", "coref", "[", "0", "]", "]", "=", "mention_span", ".", "text", "+", "final_token", ".", "whitespace_", "\n", "# Mask out remaining tokens", "\n", "", "for", "i", "in", "range", "(", "coref", "[", "0", "]", "+", "1", ",", "coref", "[", "1", "]", "+", "1", ")", ":", "\n", "                    ", "resolved", "[", "i", "]", "=", "\"\"", "\n", "\n", "", "", "", "return", "\"\"", ".", "join", "(", "resolved", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.predictors.event_coref_predictor.EventCorefPredictor.coref_resolved": [[121, 143], ["event_coref_predictor.EventCorefPredictor._spacy", "event_coref_predictor.EventCorefPredictor.predict().get", "event_coref_predictor.EventCorefPredictor.replace_corefs", "event_coref_predictor.EventCorefPredictor.predict"], "methods", ["home.repos.pwc.inspect_result.luyaojie_E3C.predictors.event_coref_predictor.EventCorefPredictor.replace_corefs", "home.repos.pwc.inspect_result.luyaojie_E3C.predictors.event_coref_predictor.EventCorefPredictor.predict"], ["", "def", "coref_resolved", "(", "self", ",", "document", ":", "str", ")", "->", "str", ":", "\n", "        ", "\"\"\"\n        Produce a document where each coreference is replaced by the its main mention\n\n        Parameters\n        ----------\n        document : ``str``\n            A string representation of a document.\n\n        Returns\n        -------\n        A string with each coference replaced by its main mention\n        \"\"\"", "\n", "\n", "spacy_document", "=", "self", ".", "_spacy", "(", "document", ")", "\n", "clusters", "=", "self", ".", "predict", "(", "document", ")", ".", "get", "(", "\"clusters\"", ")", "\n", "\n", "# Passing a document with no coreferences returns its original form", "\n", "if", "not", "clusters", ":", "\n", "            ", "return", "document", "\n", "\n", "", "return", "self", ".", "replace_corefs", "(", "spacy_document", ",", "clusters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.predictors.event_coref_predictor.EventCorefPredictor._words_list_to_instance": [[144, 157], ["spacy.tokens.Doc", "filter", "event_coref_predictor.EventCorefPredictor._dataset_reader.text_to_instance"], "methods", ["None"], ["", "def", "_words_list_to_instance", "(", "self", ",", "words", ":", "List", "[", "str", "]", ")", "->", "Instance", ":", "\n", "        ", "\"\"\"\n        Create an instance from words list represent an already tokenized document,\n        for skipping tokenization when that information already exist for the user\n        \"\"\"", "\n", "spacy_document", "=", "Doc", "(", "self", ".", "_spacy", ".", "vocab", ",", "words", "=", "words", ")", "\n", "for", "pipe", "in", "filter", "(", "None", ",", "self", ".", "_spacy", ".", "pipeline", ")", ":", "\n", "            ", "pipe", "[", "1", "]", "(", "spacy_document", ")", "\n", "\n", "", "sentences", "=", "[", "[", "token", ".", "text", "for", "token", "in", "sentence", "]", "for", "sentence", "in", "\n", "spacy_document", ".", "sents", "]", "# pylint: disable=not-an-iterable", "\n", "instance", "=", "self", ".", "_dataset_reader", ".", "text_to_instance", "(", "sentences", ")", "\n", "return", "instance", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.predictors.event_coref_predictor.EventCorefPredictor._json_to_instance": [[158, 162], ["event_coref_predictor.EventCorefPredictor._dataset_reader.text_to_instance"], "methods", ["None"], ["", "@", "overrides", "\n", "def", "_json_to_instance", "(", "self", ",", "json_dict", ":", "JsonDict", ")", "->", "Instance", ":", "\n", "        ", "sentences", "=", "[", "sentence", "[", "'tokens'", "]", "for", "sentence", "in", "json_dict", "[", "\"sentences\"", "]", "]", "\n", "return", "self", ".", "_dataset_reader", ".", "text_to_instance", "(", "sentences", ",", "doc_id", "=", "json_dict", "[", "'id'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.predictors.event_coref_predictor.TypeGuidedEventCorefPredictor.__init__": [[166, 169], ["event_coref_predictor.EventCorefPredictor.__init__"], "methods", ["home.repos.pwc.inspect_result.luyaojie_E3C.scripts.convert_predict_to_tbf.Document.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ":", "Model", ",", "dataset_reader", ":", "DatasetReader", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model", ",", "dataset_reader", ")", "\n", "self", ".", "_model", ".", "_decoding", "=", "\"type-guided\"", "\n", "", "", ""]], "home.repos.pwc.inspect_result.luyaojie_E3C.modules.pruner.Pruner.__init__": [[20, 23], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.luyaojie_E3C.scripts.convert_predict_to_tbf.Document.__init__"], ["def", "__init__", "(", "self", ",", "scorer", ":", "torch", ".", "nn", ".", "Module", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_scorer", "=", "scorer", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.modules.pruner.Pruner.forward": [[24, 131], ["isinstance", "num_items_to_keep.max", "mask.unsqueeze.unsqueeze.unsqueeze", "embeddings.size", "pruner.Pruner._scorer", "allennlp.nn.util.replace_masked_values", "allennlp.nn.util.replace_masked_values.topk", "allennlp.nn.util.get_mask_from_sequence_lengths", "top_indices_mask.byte.byte.byte", "torch.where.squeeze", "torch.where.max", "fill_value.unsqueeze.unsqueeze.unsqueeze", "torch.where", "torch.sort", "allennlp.nn.util.flatten_and_batch_shift_indices", "allennlp.nn.util.batched_index_select", "allennlp.nn.util.batched_index_select", "sequence_mask.squeeze().byte.squeeze().byte.squeeze().byte", "top_mask.long.long.long", "allennlp.nn.util.batched_index_select", "mask.unsqueeze.unsqueeze.size", "ValueError", "torch.ones", "allennlp.nn.util.replace_masked_values.size", "allennlp.nn.util.replace_masked_values.dim", "sequence_mask.squeeze().byte.squeeze().byte.squeeze", "allennlp.nn.util.replace_masked_values.size"], "methods", ["None"], ["", "@", "overrides", "\n", "def", "forward", "(", "self", ",", "# pylint: disable=arguments-differ", "\n", "embeddings", ":", "torch", ".", "FloatTensor", ",", "\n", "mask", ":", "torch", ".", "LongTensor", ",", "\n", "num_items_to_keep", ":", "Union", "[", "int", ",", "torch", ".", "LongTensor", "]", ")", "->", "Tuple", "[", "torch", ".", "FloatTensor", ",", "torch", ".", "LongTensor", ",", "\n", "torch", ".", "LongTensor", ",", "torch", ".", "FloatTensor", "]", ":", "\n", "        ", "\"\"\"\n        Extracts the top-k scoring items with respect to the scorer. We additionally return\n        the indices of the top-k in their original order, not ordered by score, so that downstream\n        components can rely on the original ordering (e.g., for knowing what spans are valid\n        antecedents in a coreference resolution model). May use the same k for all sentences in\n        minibatch, or different k for each.\n\n        Parameters\n        ----------\n        embeddings : ``torch.FloatTensor``, required.\n            A tensor of shape (batch_size, num_items, embedding_size), containing an embedding for\n            each item in the list that we want to prune.\n        mask : ``torch.LongTensor``, required.\n            A tensor of shape (batch_size, num_items), denoting unpadded elements of\n            ``embeddings``.\n        num_items_to_keep : ``Union[int, torch.LongTensor]``, required.\n            If a tensor of shape (batch_size), specifies the number of items to keep for each\n            individual sentence in minibatch.\n            If an int, keep the same number of items for all sentences.\n\n        Returns\n        -------\n        top_embeddings : ``torch.FloatTensor``\n            The representations of the top-k scoring items.\n            Has shape (batch_size, max_num_items_to_keep, embedding_size).\n        top_mask : ``torch.LongTensor``\n            The corresponding mask for ``top_embeddings``.\n            Has shape (batch_size, max_num_items_to_keep).\n        top_indices : ``torch.IntTensor``\n            The indices of the top-k scoring items into the original ``embeddings``\n            tensor. This is returned because it can be useful to retain pointers to\n            the original items, if each item is being scored by multiple distinct\n            scorers, for instance. Has shape (batch_size, max_num_items_to_keep).\n        top_item_scores : ``torch.FloatTensor``\n            The values of the top-k scoring items.\n            Has shape (batch_size, max_num_items_to_keep, 1).\n        \"\"\"", "\n", "# If an int was given for number of items to keep, construct tensor by repeating the value.", "\n", "if", "isinstance", "(", "num_items_to_keep", ",", "int", ")", ":", "\n", "            ", "batch_size", "=", "mask", ".", "size", "(", "0", ")", "\n", "# Put the tensor on same device as the mask.", "\n", "num_items_to_keep", "=", "num_items_to_keep", "*", "torch", ".", "ones", "(", "[", "batch_size", "]", ",", "dtype", "=", "torch", ".", "long", ",", "\n", "device", "=", "mask", ".", "device", ")", "\n", "\n", "", "max_items_to_keep", "=", "num_items_to_keep", ".", "max", "(", ")", "\n", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "-", "1", ")", "\n", "num_items", "=", "embeddings", ".", "size", "(", "1", ")", "\n", "# Shape: (batch_size, num_items, 1)", "\n", "scores", "=", "self", ".", "_scorer", "(", "embeddings", ")", "\n", "\n", "if", "scores", ".", "size", "(", "-", "1", ")", "!=", "1", "or", "scores", ".", "dim", "(", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "f\"The scorer passed to Pruner must produce a tensor of shape\"", "\n", "f\"(batch_size, num_items, 1), but found shape {scores.size()}\"", ")", "\n", "# Make sure that we don't select any masked items by setting their scores to be very", "\n", "# negative.  These are logits, typically, so -1e20 should be plenty negative.", "\n", "", "scores", "=", "util", ".", "replace_masked_values", "(", "scores", ",", "mask", ",", "-", "1e20", ")", "\n", "\n", "# Shape: (batch_size, max_num_items_to_keep, 1)", "\n", "_", ",", "top_indices", "=", "scores", ".", "topk", "(", "max_items_to_keep", ",", "1", ")", "\n", "\n", "# Mask based on number of items to keep for each sentence.", "\n", "# Shape: (batch_size, max_num_items_to_keep)", "\n", "top_indices_mask", "=", "util", ".", "get_mask_from_sequence_lengths", "(", "num_items_to_keep", ",", "max_items_to_keep", ")", "\n", "top_indices_mask", "=", "top_indices_mask", ".", "byte", "(", ")", "\n", "\n", "# Shape: (batch_size, max_num_items_to_keep)", "\n", "top_indices", "=", "top_indices", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "# Fill all masked indices with largest \"top\" index for that sentence, so that all masked", "\n", "# indices will be sorted to the end.", "\n", "# Shape: (batch_size, 1)", "\n", "fill_value", ",", "_", "=", "top_indices", ".", "max", "(", "dim", "=", "1", ")", "\n", "fill_value", "=", "fill_value", ".", "unsqueeze", "(", "-", "1", ")", "\n", "# Shape: (batch_size, max_num_items_to_keep)", "\n", "top_indices", "=", "torch", ".", "where", "(", "top_indices_mask", ",", "top_indices", ",", "fill_value", ")", "\n", "\n", "# Now we order the selected indices in increasing order with", "\n", "# respect to their indices (and hence, with respect to the", "\n", "# order they originally appeared in the ``embeddings`` tensor).", "\n", "top_indices", ",", "_", "=", "torch", ".", "sort", "(", "top_indices", ",", "1", ")", "\n", "# Shape: (batch_size * max_num_items_to_keep)", "\n", "# torch.index_select only accepts 1D indices, but here", "\n", "# we need to select items for each element in the batch.", "\n", "flat_top_indices", "=", "util", ".", "flatten_and_batch_shift_indices", "(", "top_indices", ",", "num_items", ")", "\n", "\n", "# Shape: (batch_size, max_num_items_to_keep, embedding_size)", "\n", "top_embeddings", "=", "util", ".", "batched_index_select", "(", "embeddings", ",", "top_indices", ",", "flat_top_indices", ")", "\n", "\n", "# Combine the masks on spans that are out-of-bounds, and the mask on spans that are outside", "\n", "# the top k for each sentence.", "\n", "# Shape: (batch_size, max_num_items_to_keep)", "\n", "sequence_mask", "=", "util", ".", "batched_index_select", "(", "mask", ",", "top_indices", ",", "flat_top_indices", ")", "\n", "sequence_mask", "=", "sequence_mask", ".", "squeeze", "(", "-", "1", ")", ".", "byte", "(", ")", "\n", "top_mask", "=", "top_indices_mask", "&", "sequence_mask", "\n", "top_mask", "=", "top_mask", ".", "long", "(", ")", "\n", "\n", "# Shape: (batch_size, max_num_items_to_keep, 1)", "\n", "top_scores", "=", "util", ".", "batched_index_select", "(", "scores", ",", "top_indices", ",", "flat_top_indices", ")", "\n", "\n", "return", "top_embeddings", ",", "top_mask", ",", "top_indices", ",", "top_scores", "\n", "", "", ""]], "home.repos.pwc.inspect_result.luyaojie_E3C.analysis.analysis_jsonl.main": [[8, 51], ["open", "json.loads", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "print", "input", "span_entity_dict[].add", "span_mention_dict[].append", "len", "len", "print", "print"], "function", ["None"], ["def", "main", "(", ")", ":", "\n", "    ", "in_filename", "=", "sys", ".", "argv", "[", "1", "]", "\n", "\n", "with", "open", "(", "in_filename", ")", "as", "fin", ":", "\n", "        ", "for", "line", "in", "fin", ":", "\n", "            ", "document", "=", "json", ".", "loads", "(", "line", ")", "\n", "entity_mention_dict", "=", "defaultdict", "(", "set", ")", "\n", "event_mention_dict", "=", "defaultdict", "(", "dict", ")", "\n", "mention_to_entity_dict", "=", "defaultdict", "(", "str", ")", "\n", "span_entity_dict", "=", "defaultdict", "(", "set", ")", "\n", "span_mention_dict", "=", "defaultdict", "(", "list", ")", "\n", "\n", "for", "entity", "in", "document", "[", "'entity'", "]", ":", "\n", "                ", "entity_mention_dict", "[", "entity", "[", "'id'", "]", "]", "=", "{", "mention", "[", "'id'", "]", "for", "mention", "in", "entity", "[", "'mentions'", "]", "}", "\n", "for", "mention", "in", "entity", "[", "'mentions'", "]", ":", "\n", "                    ", "mention_to_entity_dict", "[", "mention", "[", "'id'", "]", "]", "=", "entity", "[", "'id'", "]", "\n", "\n", "", "", "for", "filler", "in", "document", "[", "'filler'", "]", ":", "\n", "                ", "mention_to_entity_dict", "[", "filler", "[", "'id'", "]", "]", "=", "filler", "[", "'id'", "]", "\n", "\n", "", "for", "event", "in", "document", "[", "'event'", "]", ":", "\n", "                ", "for", "mention", "in", "event", "[", "'mentions'", "]", ":", "\n", "                    ", "mention_dict", "=", "[", "\n", "\"%s_%s_%s\"", "%", "(", "mention_to_entity_dict", "[", "argument", "[", "'id'", "]", "]", ",", "argument", "[", "'id'", "]", ",", "argument", "[", "'role'", "]", ")", "\n", "for", "argument", "in", "mention", "[", "'arguments'", "]", "]", "\n", "mention_id", "=", "mention", "[", "'id'", "]", "\n", "mention_subtype", "=", "mention", "[", "'subtype'", "]", "\n", "mention_span", "=", "mention", "[", "'nugget'", "]", "[", "'span'", "]", "\n", "mention_key", "=", "'_'", ".", "join", "(", "[", "mention_id", ",", "mention_subtype", ",", "mention_span", "]", ")", "\n", "event_mention_dict", "[", "event", "[", "'id'", "]", "]", "[", "mention_key", "]", "=", "mention_dict", "\n", "span_entity_dict", "[", "mention_span", "]", ".", "add", "(", "event", "[", "'id'", "]", ")", "\n", "span_mention_dict", "[", "mention_span", "]", ".", "append", "(", "mention", ")", "\n", "", "", "print", "(", "document", "[", "'id'", "]", ")", "\n", "\n", "for", "span", "in", "span_entity_dict", ":", "\n", "                ", "if", "len", "(", "span_entity_dict", "[", "span", "]", ")", ">", "1", ":", "\n", "                    ", "for", "entity_id", "in", "span_entity_dict", "[", "span", "]", ":", "\n", "                        ", "print", "(", "event_mention_dict", "[", "entity_id", "]", ")", "\n", "\n", "", "", "", "for", "span", "in", "span_mention_dict", ":", "\n", "                ", "if", "len", "(", "span_mention_dict", "[", "span", "]", ")", ">", "1", ":", "\n", "                    ", "print", "(", "span_mention_dict", "[", "span", "]", ")", "\n", "", "", "input", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.analysis.retrieve_tbf_for_jsonl.main": [[11, 28], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "src.utils.tbf_utils.load_document_dict_from_tbf", "list", "codecs.open", "codecs.open", "output.write", "json.loads", "gold_document_dict[].to_lines"], "function", ["home.repos.pwc.inspect_result.luyaojie_E3C.utils.tbf_utils.load_document_dict_from_tbf", "home.repos.pwc.inspect_result.luyaojie_E3C.utils.tbf_utils.Document.to_lines"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-i'", ",", "dest", "=", "'jsonl_path'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-t'", ",", "dest", "=", "'tbf_path'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-o'", ",", "dest", "=", "'output'", ",", "required", "=", "True", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "gold_document_dict", "=", "load_document_dict_from_tbf", "(", "args", ".", "tbf_path", ")", "\n", "new_tbf_list", "=", "list", "(", ")", "\n", "with", "codecs", ".", "open", "(", "args", ".", "jsonl_path", ",", "'r'", ",", "'utf8'", ")", "as", "fin", ":", "\n", "        ", "for", "doc_json", "in", "fin", ":", "\n", "            ", "document", "=", "json", ".", "loads", "(", "doc_json", ")", "\n", "doc_id", "=", "document", "[", "'id'", "]", "\n", "new_tbf_list", "+=", "[", "gold_document_dict", "[", "doc_id", "]", ".", "to_lines", "(", ")", "]", "\n", "\n", "", "", "with", "codecs", ".", "open", "(", "args", ".", "output", ",", "'w'", ",", "'utf8'", ")", "as", "output", ":", "\n", "        ", "output", ".", "write", "(", "'\\n'", ".", "join", "(", "new_tbf_list", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.analysis.stat_jsonl.format_number": [[24, 26], ["None"], "function", ["None"], ["def", "format_number", "(", "value", ")", ":", "\n", "    ", "return", "f'{value:,}'", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.analysis.stat_jsonl.count_one_file": [[28, 66], ["collections.Counter", "open", "json.loads", "collections.Counter.update", "collections.Counter.update", "collections.Counter.update", "collections.Counter.update", "collections.Counter.update", "collections.Counter.update", "collections.Counter.update"], "function", ["home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.BLANCScorer.update", "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.BLANCScorer.update", "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.BLANCScorer.update", "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.BLANCScorer.update", "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.BLANCScorer.update", "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.BLANCScorer.update", "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.BLANCScorer.update"], ["", "def", "count_one_file", "(", "in_filename", ",", "file_type", ")", ":", "\n", "    ", "counter", "=", "Counter", "(", ")", "\n", "with", "open", "(", "in_filename", ")", "as", "fin", ":", "\n", "        ", "for", "line", "in", "fin", ":", "\n", "            ", "document", "=", "json", ".", "loads", "(", "line", ")", "\n", "counter", ".", "update", "(", "[", "'doc'", "]", ")", "\n", "for", "sentence", "in", "document", "[", "'sentences'", "]", ":", "\n", "                ", "counter", ".", "update", "(", "[", "'sent'", "]", ")", "\n", "for", "token", "in", "sentence", "[", "'tokens'", "]", ":", "\n", "                    ", "counter", ".", "update", "(", "[", "'token'", "]", ")", "\n", "\n", "", "", "for", "event", "in", "document", "[", "'event'", "]", ":", "\n", "                ", "event_type", "=", "event", "[", "'mentions'", "]", "[", "0", "]", "[", "'type'", "]", "+", "':'", "+", "event", "[", "'mentions'", "]", "[", "0", "]", "[", "'subtype'", "]", "\n", "\n", "counter", ".", "update", "(", "[", "'event*'", "]", ")", "\n", "for", "mention", "in", "event", "[", "'mentions'", "]", ":", "\n", "                    ", "counter", ".", "update", "(", "[", "'mention*'", "]", ")", "\n", "\n", "# if len(event['mentions']) == 1:", "\n", "#     counter.update(['SingleMention*'])", "\n", "# else:", "\n", "#     counter.update(['MultiMention*'])", "\n", "\n", "", "if", "event_type", "in", "kbp_label_set", ":", "\n", "\n", "                    ", "counter", ".", "update", "(", "[", "'event'", "]", ")", "\n", "for", "mention", "in", "event", "[", "'mentions'", "]", ":", "\n", "                        ", "counter", ".", "update", "(", "[", "'mention'", "]", ")", "\n", "\n", "# if len(event['mentions']) == 1:", "\n", "#     counter.update(['SingleMention'])", "\n", "# else:", "\n", "#     counter.update(['MultiMention'])", "\n", "\n", "", "", "", "", "for", "key", "in", "keys", ":", "\n", "            ", "value", "=", "counter", "[", "key", "]", "\n", "# print(\"%s, %s: %s\" % (file_type, key, value))", "\n", "", "", "return", "counter", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.analysis.stat_jsonl.main": [[68, 97], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "collections.Counter", "dict", "os.path.isdir", "list", "zip", "print", "print", "stat_jsonl.count_one_file", "stat_jsonl.count_one_file", "collections.Counter.update", "tabulate.tabulate", "stat_jsonl.format_number"], "function", ["home.repos.pwc.inspect_result.luyaojie_E3C.analysis.stat_jsonl.count_one_file", "home.repos.pwc.inspect_result.luyaojie_E3C.analysis.stat_jsonl.count_one_file", "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.BLANCScorer.update", "home.repos.pwc.inspect_result.luyaojie_E3C.analysis.stat_jsonl.format_number"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-data'", ",", "dest", "=", "'data'", ")", "\n", "options", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "global_counter", "=", "Counter", "(", ")", "\n", "data_table_dict", "=", "dict", "(", ")", "\n", "\n", "if", "os", ".", "path", ".", "isdir", "(", "options", ".", "data", ")", ":", "\n", "\n", "        ", "for", "file_type", "in", "[", "'train'", ",", "'valid'", ",", "'test'", "]", ":", "\n", "            ", "in_filename", "=", "options", ".", "data", "+", "os", ".", "sep", "+", "file_type", "+", "'.jsonl'", "\n", "counter", "=", "count_one_file", "(", "in_filename", ",", "file_type", ")", "\n", "data_table_dict", "[", "file_type", "]", "=", "counter", "\n", "global_counter", ".", "update", "(", "counter", ")", "\n", "\n", "", "row_keys", "=", "[", "'train'", ",", "'valid'", ",", "'test'", ",", "'total'", "]", "\n", "\n", "data_table", "=", "list", "(", ")", "\n", "data_table_dict", "[", "'total'", "]", "=", "global_counter", "\n", "for", "key", ",", "show_key", "in", "zip", "(", "keys", ",", "show_keys", ")", ":", "\n", "            ", "data_row", "=", "[", "show_key", "]", "+", "[", "format_number", "(", "data_table_dict", "[", "row", "]", "[", "key", "]", ")", "for", "row", "in", "row_keys", "]", "\n", "data_table", "+=", "[", "data_row", "]", "\n", "\n", "", "print", "(", "tabulate", ".", "tabulate", "(", "data_table", ",", "headers", "=", "[", "]", "+", "row_keys", ",", "tablefmt", "=", "'latex'", ",", "stralign", "=", "'right'", ")", ",", ")", "\n", "", "else", ":", "\n", "        ", "in_filename", "=", "options", ".", "data", "\n", "print", "(", "in_filename", ")", "\n", "count_one_file", "(", "in_filename", ",", "\"File\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.analysis.generate_tbf_from_jsonl.first_upcase": [[27, 29], ["str.upper"], "function", ["None"], ["def", "first_upcase", "(", "word", ")", ":", "\n", "    ", "return", "str", ".", "upper", "(", "word", "[", "0", "]", ")", "+", "word", "[", "1", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.analysis.generate_tbf_from_jsonl.process_span_offset": [[31, 34], ["span.split", "int", "int"], "function", ["None"], ["", "def", "process_span_offset", "(", "span", ")", ":", "\n", "    ", "left", ",", "right", "=", "span", ".", "split", "(", "'-'", ")", "\n", "return", "'%s,%s'", "%", "(", "int", "(", "left", ")", ",", "int", "(", "right", ")", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.analysis.generate_tbf_from_jsonl.main": [[36, 72], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "list", "codecs.open", "codecs.open", "output.write", "list", "list", "json.loads", "list", "len", "mention[].replace", "mention[].replace", "generate_tbf_from_jsonl.process_span_offset", "generate_tbf_from_jsonl.first_upcase", "event[].replace", "generate_tbf_from_jsonl.first_upcase", "generate_tbf_from_jsonl.first_upcase"], "function", ["home.repos.pwc.inspect_result.luyaojie_E3C.analysis.generate_tbf_from_jsonl.process_span_offset", "home.repos.pwc.inspect_result.luyaojie_E3C.analysis.generate_tbf_from_jsonl.first_upcase", "home.repos.pwc.inspect_result.luyaojie_E3C.analysis.generate_tbf_from_jsonl.first_upcase", "home.repos.pwc.inspect_result.luyaojie_E3C.analysis.generate_tbf_from_jsonl.first_upcase"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-i'", ",", "dest", "=", "'jsonl_path'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-o'", ",", "dest", "=", "'output'", ",", "required", "=", "True", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "new_tbf_list", "=", "list", "(", ")", "\n", "with", "codecs", ".", "open", "(", "args", ".", "jsonl_path", ",", "'r'", ",", "'utf8'", ")", "as", "fin", ":", "\n", "        ", "for", "doc_json", "in", "fin", ":", "\n", "            ", "line_list", "=", "list", "(", ")", "\n", "coref_list", "=", "list", "(", ")", "\n", "document", "=", "json", ".", "loads", "(", "doc_json", ")", "\n", "doc_id", "=", "document", "[", "'id'", "]", "\n", "line_list", "+=", "[", "'#BeginOfDocument %s'", "%", "doc_id", "]", "\n", "for", "event", "in", "document", "[", "'event'", "]", ":", "\n", "                ", "if", "'%s%s'", "%", "(", "event", "[", "'mentions'", "]", "[", "0", "]", "[", "'type'", "]", ",", "event", "[", "'mentions'", "]", "[", "0", "]", "[", "'subtype'", "]", ")", "not", "in", "kbp_label_set", ":", "\n", "                    ", "continue", "\n", "", "mention_id_list", "=", "list", "(", ")", "\n", "for", "mention", "in", "event", "[", "'mentions'", "]", ":", "\n", "# rich_ere\tENG_NW_001278_20130113_F00013PQC\tE835\t108,114\tarrest\tJustice_Arrest-Jail\tActual", "\n", "                    ", "line_list", "+=", "[", "'richere\\t%s\\t%s\\t%s\\t%s\\t%s\\t%s'", "%", "(", "doc_id", ",", "\n", "mention", "[", "'id'", "]", ".", "replace", "(", "'em-'", ",", "'E'", ")", ",", "\n", "process_span_offset", "(", "mention", "[", "'nugget'", "]", "[", "'span'", "]", ")", ",", "\n", "mention", "[", "'nugget'", "]", "[", "'text'", "]", ",", "\n", "'%s_%s'", "%", "(", "first_upcase", "(", "mention", "[", "'type'", "]", ")", ",", "\n", "first_upcase", "(", "mention", "[", "'subtype'", "]", ")", ")", ",", "\n", "first_upcase", "(", "mention", "[", "'realis'", "]", ")", ")", ",", "\n", "]", "\n", "mention_id_list", "+=", "[", "mention", "[", "'id'", "]", ".", "replace", "(", "'em-'", ",", "'E'", ")", "]", "\n", "", "if", "len", "(", "mention_id_list", ")", ">", "1", ":", "\n", "                    ", "coref_list", "+=", "[", "'@Coreference\\t%s\\t%s'", "%", "(", "event", "[", "'id'", "]", ".", "replace", "(", "'h-'", ",", "'C'", ")", ",", "','", ".", "join", "(", "mention_id_list", ")", ")", "]", "\n", "", "", "line_list", "+=", "coref_list", "\n", "line_list", "+=", "[", "'#EndOfDocument'", "]", "\n", "new_tbf_list", "+=", "line_list", "\n", "\n", "", "", "with", "codecs", ".", "open", "(", "args", ".", "output", ",", "'w'", ",", "'utf8'", ")", "as", "output", ":", "\n", "        ", "output", ".", "write", "(", "'\\n'", ".", "join", "(", "new_tbf_list", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.models.end_to_end_event_coreference.End2EndEventCoreferenceResolver.__init__": [[75, 223], ["allennlp.nn.InitializerApplicator", "allennlp.models.model.Model.__init__", "logger.info", "allennlp.modules.TimeDistributed", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "allennlp.modules.Pruner", "allennlp.modules.TimeDistributed", "logger.info", "allennlp.modules.token_embedders.Embedding", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "allennlp.modules.token_embedders.Embedding", "src.metrics.mention_f1.TopSpanMentionTypeF1", "src.metrics.event_coref_scores.EventCorefScores", "allennlp.training.metrics.Average", "allennlp.training.metrics.Average", "allennlp.training.metrics.Average", "allennlp.training.metrics.Average", "allennlp.training.metrics.Average", "allennlp.training.metrics.Average", "initializer", "allennlp.modules.TimeDistributed", "allennlp.modules.TimeDistributed", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "vocab.get_token_from_index", "context_layer.get_output_dim", "text_field_embedder.get_output_dim", "allennlp.modules.span_extractors.EndpointSpanExtractor", "allennlp.modules.span_extractors.SelfAttentiveSpanExtractor", "text_field_embedder.get_output_dim", "allennlp.modules.span_extractors.SelfAttentiveSpanExtractor", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "end_to_end_event_coreference.End2EndEventCoreferenceResolver._event_embedding.get_output_dim", "vocab.get_vocab_size", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "antecedent_feedforward.get_output_dim", "end_to_end_event_coreference.End2EndEventCoreferenceResolver._endpoint_span_extractor.get_output_dim", "end_to_end_event_coreference.End2EndEventCoreferenceResolver._attentive_span_extractor.get_output_dim", "allennlp.modules.seq2seq_encoders.IntraSentenceAttentionEncoder", "text_field_embedder.get_output_dim", "allennlp.modules.span_extractors.EndpointSpanExtractor", "allennlp.modules.seq2seq_encoders.IntraSentenceAttentionEncoder", "end_to_end_event_coreference.End2EndEventCoreferenceResolver._attentive_span_extractor.get_output_dim", "allennlp.modules.TimeDistributed", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "vocab.get_vocab_size", "end_to_end_event_coreference.End2EndEventCoreferenceResolver._event_embedding.get_output_dim", "mention_feedforward.get_output_dim", "allennlp.modules.similarity_functions.DotProductSimilarity", "NotImplementedError", "allennlp.modules.similarity_functions.DotProductSimilarity", "NotImplementedError", "end_to_end_event_coreference.End2EndEventCoreferenceResolver._attentive_span_extractor.get_output_dim", "end_to_end_event_coreference.End2EndEventCoreferenceResolver._endpoint_span_extractor.get_output_dim", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.luyaojie_E3C.scripts.convert_predict_to_tbf.Document.__init__"], ["def", "__init__", "(", "self", ",", "\n", "vocab", ":", "Vocabulary", ",", "\n", "text_field_embedder", ":", "TextFieldEmbedder", ",", "\n", "mention_feedforward", ":", "FeedForward", ",", "\n", "antecedent_feedforward", ":", "FeedForward", ",", "\n", "feature_size", ":", "int", ",", "\n", "context_layer", ":", "Seq2SeqEncoder", "=", "None", ",", "\n", "max_span_width", ":", "int", "=", "1", ",", "\n", "spans_per_word", ":", "float", "=", "0.1", ",", "\n", "max_antecedents", ":", "int", "=", "50", ",", "\n", "lexical_dropout", ":", "float", "=", "0.2", ",", "\n", "pretrain_ed", ":", "bool", "=", "False", ",", "\n", "pretrain_coref", ":", "bool", "=", "False", ",", "\n", "coref_loss_weight", ":", "float", "=", "1.0", ",", "\n", "bce_loss_weight", ":", "float", "=", "1.0", ",", "\n", "bce_pos_weight", ":", "float", "=", "None", ",", "\n", "local_window_size", ":", "int", "=", "10", ",", "\n", "attention_type", ":", "str", "=", "'dot'", ",", "\n", "decoding", ":", "str", "=", "'type-guided'", ",", "\n", "type_threshold", ":", "float", "=", "-", "1.", ",", "\n", "type_refine", ":", "bool", "=", "True", ",", "\n", "type_match_in_eval", ":", "bool", "=", "True", ",", "\n", "initializer", ":", "InitializerApplicator", "=", "InitializerApplicator", "(", ")", ",", "\n", "regularizer", ":", "Optional", "[", "RegularizerApplicator", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "super", "(", "End2EndEventCoreferenceResolver", ",", "self", ")", ".", "__init__", "(", "vocab", ",", "regularizer", ")", "\n", "logger", ".", "info", "(", "vocab", ")", "\n", "self", ".", "_text_field_embedder", "=", "text_field_embedder", "\n", "self", ".", "_context_layer", "=", "context_layer", "\n", "self", ".", "_antecedent_feedforward", "=", "TimeDistributed", "(", "antecedent_feedforward", ")", "\n", "self", ".", "_event_scorer", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "TimeDistributed", "(", "mention_feedforward", ")", ",", "\n", "TimeDistributed", "(", "torch", ".", "nn", ".", "Linear", "(", "mention_feedforward", ".", "get_output_dim", "(", ")", ",", "1", ")", ")", "\n", ")", "\n", "self", ".", "_pretrain_ed", "=", "pretrain_ed", "\n", "self", ".", "_pretrain_coref", "=", "pretrain_coref", "\n", "\n", "self", ".", "_mention_pruner", "=", "Pruner", "(", "self", ".", "_event_scorer", ")", "\n", "self", ".", "_antecedent_scorer", "=", "TimeDistributed", "(", "torch", ".", "nn", ".", "Linear", "(", "antecedent_feedforward", ".", "get_output_dim", "(", ")", ",", "1", ")", ")", "\n", "\n", "self", ".", "_local_window_size", "=", "local_window_size", "\n", "self", ".", "_attention_type", "=", "attention_type", "\n", "self", ".", "_decoding", "=", "decoding", "\n", "self", ".", "_type_threshold", "=", "type_threshold", "\n", "logger", ".", "info", "(", "vocab", ".", "get_token_from_index", "(", "0", ",", "\"labels\"", ")", ")", "\n", "\n", "if", "context_layer", "is", "not", "None", ":", "\n", "            ", "endpoint_span_extractor_dim", "=", "context_layer", ".", "get_output_dim", "(", ")", "\n", "attentive_span_extractor_dim", "=", "text_field_embedder", ".", "get_output_dim", "(", ")", "\n", "self", ".", "_endpoint_span_extractor", "=", "EndpointSpanExtractor", "(", "endpoint_span_extractor_dim", ",", "\n", "combination", "=", "\"x,y\"", ",", "\n", "num_width_embeddings", "=", "max_span_width", ",", "\n", "span_width_embedding_dim", "=", "feature_size", ")", "\n", "self", ".", "_attentive_span_extractor", "=", "SelfAttentiveSpanExtractor", "(", "input_dim", "=", "attentive_span_extractor_dim", ")", "\n", "span_embedding_size", "=", "self", ".", "_endpoint_span_extractor", ".", "get_output_dim", "(", ")", "+", "self", ".", "_attentive_span_extractor", ".", "get_output_dim", "(", ")", "\n", "\n", "if", "self", ".", "_local_window_size", "<=", "0", ":", "\n", "                ", "self", ".", "_attention_layer", "=", "None", "\n", "", "else", ":", "\n", "                ", "if", "self", ".", "_attention_type", "==", "'dot'", ":", "\n", "                    ", "similarity_function", "=", "DotProductSimilarity", "(", "scale_output", "=", "True", ")", "\n", "num_head", "=", "1", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "(", "'Attention Type: %s'", "%", "self", ".", "_attention_type", ")", "\n", "", "self", ".", "_attention_layer", "=", "IntraSentenceAttentionEncoder", "(", "input_dim", "=", "attentive_span_extractor_dim", ",", "\n", "similarity_function", "=", "similarity_function", ",", "\n", "combination", "=", "'2'", ",", "\n", "num_attention_heads", "=", "num_head", "\n", ")", "\n", "", "", "else", ":", "\n", "            ", "attentive_span_extractor_dim", "=", "text_field_embedder", ".", "get_output_dim", "(", ")", "\n", "\n", "if", "max_span_width", ">", "1", ":", "\n", "                ", "endpoint_span_extractor_dim", "=", "text_field_embedder", ".", "get_output_dim", "(", ")", "\n", "self", ".", "_endpoint_span_extractor", "=", "EndpointSpanExtractor", "(", "endpoint_span_extractor_dim", ",", "\n", "combination", "=", "\"x,y\"", ",", "\n", "num_width_embeddings", "=", "max_span_width", ",", "\n", "span_width_embedding_dim", "=", "feature_size", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "_endpoint_span_extractor", "=", "None", "\n", "\n", "", "self", ".", "_attentive_span_extractor", "=", "SelfAttentiveSpanExtractor", "(", "input_dim", "=", "attentive_span_extractor_dim", ")", "\n", "\n", "if", "self", ".", "_local_window_size", "<=", "0", ":", "\n", "                ", "self", ".", "_attention_layer", "=", "None", "\n", "", "else", ":", "\n", "                ", "if", "self", ".", "_attention_type", "==", "'dot'", ":", "\n", "                    ", "similarity_function", "=", "DotProductSimilarity", "(", "scale_output", "=", "True", ")", "\n", "num_head", "=", "1", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "(", "'Attention Type: %s'", "%", "self", ".", "_attention_type", ")", "\n", "", "self", ".", "_attention_layer", "=", "IntraSentenceAttentionEncoder", "(", "input_dim", "=", "attentive_span_extractor_dim", ",", "\n", "similarity_function", "=", "similarity_function", ",", "\n", "combination", "=", "'2'", ",", "\n", "num_attention_heads", "=", "num_head", "\n", ")", "\n", "\n", "", "if", "self", ".", "_endpoint_span_extractor", "is", "not", "None", ":", "\n", "                ", "span_embedding_size", "=", "self", ".", "_attentive_span_extractor", ".", "get_output_dim", "(", ")", "+", "self", ".", "_endpoint_span_extractor", ".", "get_output_dim", "(", ")", "\n", "", "else", ":", "\n", "                ", "span_embedding_size", "=", "self", ".", "_attentive_span_extractor", ".", "get_output_dim", "(", ")", "\n", "\n", "", "", "if", "type_refine", ":", "\n", "            ", "self", ".", "_type_refine_gate", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "TimeDistributed", "(", "torch", ".", "nn", ".", "Linear", "(", "span_embedding_size", "*", "2", ",", "span_embedding_size", ")", ")", ",", "\n", "torch", ".", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_type_refine_gate", "=", "None", "\n", "\n", "# NIL for Unified Event", "\n", "", "self", ".", "_event_embedding", "=", "Embedding", "(", "num_embeddings", "=", "vocab", ".", "get_vocab_size", "(", "'labels'", ")", ",", "\n", "embedding_dim", "=", "span_embedding_size", ")", "\n", "self", ".", "_event_embedding_map", "=", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "_event_embedding", ".", "get_output_dim", "(", ")", "*", "2", ",", "\n", "self", ".", "_event_embedding", ".", "get_output_dim", "(", ")", ")", "\n", "\n", "self", ".", "_positive_label_size", "=", "vocab", ".", "get_vocab_size", "(", "'labels'", ")", "-", "1", "\n", "\n", "# 10 possible distance buckets.", "\n", "self", ".", "_num_distance_buckets", "=", "10", "\n", "self", ".", "_distance_embedding", "=", "Embedding", "(", "self", ".", "_num_distance_buckets", ",", "feature_size", ")", "\n", "self", ".", "_coref_loss_weight", "=", "coref_loss_weight", "\n", "self", ".", "_bce_loss_weight", "=", "bce_loss_weight", "\n", "self", ".", "_bce_pos_weight", "=", "bce_pos_weight", "\n", "\n", "self", ".", "_max_span_width", "=", "max_span_width", "\n", "self", ".", "_spans_per_word", "=", "spans_per_word", "\n", "self", ".", "_max_antecedents", "=", "max_antecedents", "\n", "\n", "self", ".", "_mention_f1_score", "=", "TopSpanMentionTypeF1", "(", ")", "\n", "self", ".", "_conll_coref_scores", "=", "EventCorefScores", "(", "mapping_type", "=", "type_match_in_eval", ")", "\n", "self", ".", "_type_loss_metric", "=", "Average", "(", ")", "\n", "self", ".", "_realis_loss_metric", "=", "Average", "(", ")", "\n", "self", ".", "_coref_loss_metric", "=", "Average", "(", ")", "\n", "self", ".", "_coref_label_metric", "=", "Average", "(", ")", "\n", "self", ".", "_type_label_metric", "=", "Average", "(", ")", "\n", "self", ".", "_nil_label_metric", "=", "Average", "(", ")", "\n", "\n", "if", "self", ".", "_bce_pos_weight", ":", "\n", "            ", "self", ".", "_bce_loss", "=", "BCEWithLogitsLoss", "(", "reduction", "=", "'none'", ",", "pos_weight", "=", "torch", ".", "tensor", "(", "self", ".", "_bce_pos_weight", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_bce_loss", "=", "BCEWithLogitsLoss", "(", "reduction", "=", "'none'", ")", "\n", "\n", "", "if", "lexical_dropout", ">", "0", ":", "\n", "            ", "self", ".", "_lexical_dropout", "=", "torch", ".", "nn", ".", "Dropout", "(", "p", "=", "lexical_dropout", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_lexical_dropout", "=", "lambda", "x", ":", "x", "\n", "\n", "", "initializer", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.models.end_to_end_event_coreference.End2EndEventCoreferenceResolver._get_event_embedding": [[224, 245], ["torch.stack().transpose", "torch.stack().transpose", "torch.stack().transpose", "torch.stack().transpose", "event_indices.expand.expand.expand", "end_to_end_event_coreference.End2EndEventCoreferenceResolver._event_embedding", "event_embeddings.unsqueeze().expand.unsqueeze().expand.reshape", "end_to_end_event_coreference.End2EndEventCoreferenceResolver._event_embedding_map.forward", "event_embeddings.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "allennlp.nn.util.get_range_vector", "event_embeddings.unsqueeze().expand.unsqueeze().expand.size", "span_mask.size", "event_embeddings.unsqueeze().expand.unsqueeze().expand.size", "event_embeddings.unsqueeze().expand.unsqueeze().expand.size", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "event_indices.expand.expand.size", "event_indices.expand.expand.size", "event_embeddings.unsqueeze().expand.unsqueeze().expand.size", "event_embeddings.unsqueeze().expand.unsqueeze().expand.size", "event_embeddings.unsqueeze().expand.unsqueeze().expand.unsqueeze", "allennlp.nn.util.get_device_of", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["home.repos.pwc.inspect_result.luyaojie_E3C.models.end_to_end_event_coreference.End2EndEventCoreferenceResolver.forward"], ["", "def", "_get_event_embedding", "(", "self", ",", "span_mask", ")", ":", "\n", "        ", "\"\"\"\n        :param span_mask:\n            (batch, top_span_size, 1)\n        :return:\n            (batch, top_span_size, positive_label_size)\n        \"\"\"", "\n", "event_indices", "=", "util", ".", "get_range_vector", "(", "self", ".", "_positive_label_size", ",", "device", "=", "util", ".", "get_device_of", "(", "span_mask", ")", ")", "+", "1", "\n", "event_indices", "=", "torch", ".", "stack", "(", "[", "torch", ".", "zeros_like", "(", "event_indices", ")", ",", "event_indices", "]", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "event_indices", "=", "event_indices", ".", "expand", "(", "[", "event_indices", ".", "size", "(", "0", ")", ",", "event_indices", ".", "size", "(", "1", ")", "]", ")", "\n", "\n", "event_embeddings", "=", "self", ".", "_event_embedding", "(", "event_indices", ")", "\n", "event_embeddings", "=", "event_embeddings", ".", "reshape", "(", "event_embeddings", ".", "size", "(", "0", ")", ",", "\n", "event_embeddings", ".", "size", "(", "1", ")", "*", "event_embeddings", ".", "size", "(", "2", ")", ")", "\n", "\n", "event_embeddings", "=", "self", ".", "_event_embedding_map", ".", "forward", "(", "event_embeddings", ")", "\n", "event_embeddings", "=", "event_embeddings", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "span_mask", ".", "size", "(", "0", ")", ",", "\n", "event_embeddings", ".", "size", "(", "0", ")", ",", "\n", "event_embeddings", ".", "size", "(", "1", ")", ",", "\n", ")", "\n", "return", "event_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.models.end_to_end_event_coreference.End2EndEventCoreferenceResolver._get_type_antecedent_labels": [[246, 262], ["allennlp.nn.util.get_range_vector", "top_event_type_labels.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "end_to_end_event_coreference.End2EndEventCoreferenceResolver.vocab.get_vocab_size", "allennlp.nn.util.get_device_of", "top_event_type_labels.unsqueeze().expand.unsqueeze().expand.unsqueeze", "top_event_type_labels.unsqueeze().expand.unsqueeze().expand.size", "top_event_type_labels.unsqueeze().expand.unsqueeze().expand.size", "allennlp.nn.util.get_range_vector.size"], "methods", ["None"], ["", "def", "_get_type_antecedent_labels", "(", "self", ",", "top_event_type_labels", ")", ":", "\n", "        ", "\"\"\"\n        :param top_event_type_labels:\n            (batch, top_span_size, 1)\n        :return:\n            (batch, top_span_size, positive_label_size)\n        \"\"\"", "\n", "event_indices", "=", "util", ".", "get_range_vector", "(", "self", ".", "vocab", ".", "get_vocab_size", "(", "'labels'", ")", ",", "\n", "device", "=", "util", ".", "get_device_of", "(", "top_event_type_labels", ")", ")", "\n", "\n", "top_event_type_labels", "=", "top_event_type_labels", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "[", "top_event_type_labels", ".", "size", "(", "0", ")", ",", "\n", "top_event_type_labels", ".", "size", "(", "1", ")", ",", "\n", "event_indices", ".", "size", "(", "0", ")", "]", ")", "\n", "\n", "type_antecedent_labels", "=", "(", "top_event_type_labels", "==", "event_indices", ")", ".", "float", "(", ")", "\n", "return", "type_antecedent_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.models.end_to_end_event_coreference.End2EndEventCoreferenceResolver._type_refine_embedding": [[263, 278], ["torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.softmax.new_zeros", "torch.softmax.new_zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "end_to_end_event_coreference.End2EndEventCoreferenceResolver._type_refine_gate", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.softmax.size", "torch.softmax.size", "torch.softmax.size", "torch.softmax.size", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "_type_refine_embedding", "(", "self", ",", "top_embeddings", ",", "event_embeddings", ")", ":", "\n", "# (batch, top_span_size, emb_size) bmm", "\n", "        ", "event_prob", "=", "torch", ".", "bmm", "(", "top_embeddings", ",", "torch", ".", "transpose", "(", "event_embeddings", ",", "1", ",", "2", ")", ")", "\n", "shape", "=", "[", "event_prob", ".", "size", "(", "0", ")", ",", "event_prob", ".", "size", "(", "1", ")", ",", "1", "]", "\n", "dummy_scores", "=", "event_prob", ".", "new_zeros", "(", "*", "shape", ")", "\n", "\n", "event_prob", "=", "torch", ".", "cat", "(", "[", "dummy_scores", ",", "event_prob", "]", ",", "-", "1", ")", "\n", "event_prob", "=", "torch", ".", "softmax", "(", "event_prob", ",", "-", "1", ")", "\n", "\n", "event_rep", "=", "torch", ".", "bmm", "(", "event_prob", "[", ":", ",", ":", ",", "1", ":", "]", ",", "event_embeddings", ")", "+", "event_prob", "[", ":", ",", ":", ",", ":", "1", "]", "*", "top_embeddings", "\n", "\n", "refine_gate", "=", "self", ".", "_type_refine_gate", "(", "torch", ".", "cat", "(", "[", "event_rep", ",", "top_embeddings", "]", ",", "-", "1", ")", ")", "\n", "\n", "top_embeddings", "=", "refine_gate", "*", "top_embeddings", "+", "(", "1", "-", "refine_gate", ")", "*", "event_rep", "\n", "return", "top_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.models.end_to_end_event_coreference.End2EndEventCoreferenceResolver._local_attention": [[279, 292], ["allennlp.nn.util.get_device_of", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "end_to_end_event_coreference.End2EndEventCoreferenceResolver._attention_layer", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "text_mask.size", "text_mask.size"], "methods", ["None"], ["", "def", "_local_attention", "(", "self", ",", "raw_contextualized_embeddings", ",", "text_mask", ")", ":", "\n", "        ", "device", "=", "util", ".", "get_device_of", "(", "raw_contextualized_embeddings", ")", "\n", "if", "device", "<", "0", ":", "\n", "            ", "device", "=", "'cpu'", "\n", "", "attention_mask", "=", "torch", ".", "ones", "(", "(", "text_mask", ".", "size", "(", "1", ")", ",", "text_mask", ".", "size", "(", "1", ")", ")", ",", "device", "=", "device", ")", "\n", "# attention_mask = attention_mask - torch.eye(text_mask.size(1),", "\n", "#                                             device=util.get_device_of(contextualized_embeddings))", "\n", "new_attention_mask", "=", "text_mask", "[", ":", ",", ":", ",", "None", "]", "*", "attention_mask", "\n", "new_attention_mask", "=", "torch", ".", "triu", "(", "torch", ".", "tril", "(", "new_attention_mask", ",", "self", ".", "_local_window_size", ")", ",", "\n", "-", "self", ".", "_local_window_size", ")", "\n", "new_contextualized_embeddings", "=", "self", ".", "_attention_layer", "(", "raw_contextualized_embeddings", ",", "\n", "new_attention_mask", ")", "\n", "return", "new_contextualized_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.models.end_to_end_event_coreference.End2EndEventCoreferenceResolver.forward": [[293, 585], ["end_to_end_event_coreference.End2EndEventCoreferenceResolver._lexical_dropout", "end_to_end_event_coreference.End2EndEventCoreferenceResolver.size", "torch.relu().long.size", "allennlp.nn.util.get_text_field_mask().float", "torch.relu().long", "torch.relu().long", "int", "end_to_end_event_coreference.End2EndEventCoreferenceResolver._mention_pruner", "end_to_end_event_coreference.End2EndEventCoreferenceResolver._get_event_embedding", "top_mask.expand_as().clone.expand_as().clone.unsqueeze", "allennlp.nn.util.flatten_and_batch_shift_indices", "allennlp.nn.util.batched_index_select", "min", "end_to_end_event_coreference._generate_valid_antecedents", "allennlp.nn.util.flattened_index_select", "allennlp.nn.util.flattened_index_select().squeeze", "end_to_end_event_coreference.End2EndEventCoreferenceResolver._combine_event_embeddings_and_cluster_antecedent_embeddings", "end_to_end_event_coreference.End2EndEventCoreferenceResolver._compute_span_pair_embeddings", "end_to_end_event_coreference.End2EndEventCoreferenceResolver._event_scorer", "event_type_prior_scores.transpose().expand.transpose().expand.transpose().expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "end_to_end_event_coreference.End2EndEventCoreferenceResolver._compute_coreference_scores", "end_to_end_event_coreference.End2EndEventCoreferenceResolver.max", "end_to_end_event_coreference.End2EndEventCoreferenceResolver._text_field_embedder", "end_to_end_event_coreference.End2EndEventCoreferenceResolver._context_layer", "end_to_end_event_coreference.End2EndEventCoreferenceResolver._endpoint_span_extractor", "end_to_end_event_coreference.End2EndEventCoreferenceResolver._attentive_span_extractor", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "list", "end_to_end_event_coreference.End2EndEventCoreferenceResolver._attentive_span_extractor", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "math.floor", "allennlp.nn.util.get_device_of", "end_to_end_event_coreference.End2EndEventCoreferenceResolver._type_refine_embedding", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "end_to_end_event_coreference.End2EndEventCoreferenceResolver._get_type_antecedent_labels", "allennlp.nn.util.batched_index_select", "allennlp.nn.util.flattened_index_select().squeeze", "valid_antecedent_log_mask.long", "end_to_end_event_coreference.End2EndEventCoreferenceResolver._compute_antecedent_gold_labels", "allennlp.nn.util.masked_log_softmax", "end_to_end_event_coreference.End2EndEventCoreferenceResolver.decode", "end_to_end_event_coreference.End2EndEventCoreferenceResolver._mention_f1_score", "end_to_end_event_coreference.End2EndEventCoreferenceResolver._conll_coref_scores", "end_to_end_event_coreference.End2EndEventCoreferenceResolver._type_loss_metric", "end_to_end_event_coreference.End2EndEventCoreferenceResolver._coref_loss_metric", "end_to_end_event_coreference.End2EndEventCoreferenceResolver._coref_loss_metric", "allennlp.nn.util.get_text_field_mask", "torch.relu", "torch.relu", "end_to_end_event_coreference.End2EndEventCoreferenceResolver._local_attention", "end_to_end_event_coreference.End2EndEventCoreferenceResolver._local_attention", "end_to_end_event_coreference.End2EndEventCoreferenceResolver._endpoint_span_extractor", "allennlp.nn.util.flattened_index_select", "event_type_prior_scores.transpose().expand.transpose().expand.transpose", "coref_labels.unsqueeze", "end_to_end_event_coreference.End2EndEventCoreferenceResolver._bce_loss.forward", "bce_loss.sum", "top_mask.expand_as().clone.expand_as().clone.expand_as().clone", "end_to_end_event_coreference.End2EndEventCoreferenceResolver.log", "allennlp.nn.util.logsumexp().sum", "bce_loss.item", "negative_marginal_log_likelihood.item", "x.get", "torch.relu().long.float", "allennlp.nn.util.flattened_index_select", "end_to_end_event_coreference.End2EndEventCoreferenceResolver._event_scorer.forward().squeeze", "top_mask.expand_as().clone.expand_as().clone.expand_as", "allennlp.nn.util.logsumexp", "end_to_end_event_coreference.End2EndEventCoreferenceResolver._event_scorer.forward"], "methods", ["home.repos.pwc.inspect_result.luyaojie_E3C.models.end_to_end_event_coreference.End2EndEventCoreferenceResolver._get_event_embedding", "home.repos.pwc.inspect_result.luyaojie_E3C.models.end_to_end_event_coreference._generate_valid_antecedents", "home.repos.pwc.inspect_result.luyaojie_E3C.models.end_to_end_event_coreference.End2EndEventCoreferenceResolver._combine_event_embeddings_and_cluster_antecedent_embeddings", "home.repos.pwc.inspect_result.luyaojie_E3C.models.end_to_end_event_coreference.End2EndEventCoreferenceResolver._compute_span_pair_embeddings", "home.repos.pwc.inspect_result.luyaojie_E3C.models.end_to_end_event_coreference.End2EndEventCoreferenceResolver._compute_coreference_scores", "home.repos.pwc.inspect_result.luyaojie_E3C.models.end_to_end_event_coreference.End2EndEventCoreferenceResolver._type_refine_embedding", "home.repos.pwc.inspect_result.luyaojie_E3C.models.end_to_end_event_coreference.End2EndEventCoreferenceResolver._get_type_antecedent_labels", "home.repos.pwc.inspect_result.luyaojie_E3C.models.end_to_end_event_coreference.End2EndEventCoreferenceResolver._compute_antecedent_gold_labels", "home.repos.pwc.inspect_result.luyaojie_E3C.models.end_to_end_event_coreference.End2EndEventCoreferenceResolver.decode", "home.repos.pwc.inspect_result.luyaojie_E3C.models.end_to_end_event_coreference.End2EndEventCoreferenceResolver._local_attention", "home.repos.pwc.inspect_result.luyaojie_E3C.models.end_to_end_event_coreference.End2EndEventCoreferenceResolver._local_attention", "home.repos.pwc.inspect_result.luyaojie_E3C.models.end_to_end_event_coreference.End2EndEventCoreferenceResolver.forward", "home.repos.pwc.inspect_result.luyaojie_E3C.models.end_to_end_event_coreference.End2EndEventCoreferenceResolver.forward"], ["", "@", "overrides", "\n", "def", "forward", "(", "self", ",", "# type: ignore", "\n", "text", ":", "Dict", "[", "str", ",", "torch", ".", "LongTensor", "]", ",", "\n", "spans", ":", "torch", ".", "IntTensor", ",", "\n", "coref_labels", ":", "torch", ".", "IntTensor", "=", "None", ",", "\n", "event_type_labels", ":", "torch", ".", "IntTensor", "=", "None", ",", "\n", "realis_labels", ":", "torch", ".", "IntTensor", "=", "None", ",", "\n", "metadata", ":", "List", "[", "Dict", "[", "str", ",", "Any", "]", "]", "=", "None", ")", "->", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ":", "\n", "# pylint: disable=arguments-differ", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        text : ``Dict[str, torch.LongTensor]``, required.\n            The output of a ``TextField`` representing the text of\n            the document.\n        spans : ``torch.IntTensor``, required.\n            A tensor of shape (batch_size, num_spans, 2), representing the inclusive start and end\n            indices of candidate spans for mentions. Comes from a ``ListField[SpanField]`` of\n            indices into the text of the document.\n        coref_labels : ``torch.IntTensor``, optional (default = None).\n            A tensor of shape (batch_size, num_spans), representing the cluster ids\n            of each span, or -1 for those which do not appear in any clusters.\n        event_type_labels : ``torch.IntTensor``, optional (default = None).\n            A tensor of shape (batch_size, num_spans), representing the event label of the specific span.\n        realis_labels : ``torch.IntTensor``, optional (default = None).\n            A tensor of shape (batch_size, num_spans), representing the realis label of the specific span.\n        metadata : ``List[Dict[str, Any]]``, optional (default = None).\n            A metadata dictionary for each instance in the batch. We use the \"original_text\" and \"clusters\" keys\n            from this dictionary, which respectively have the original text and the annotated gold coreference\n            clusters for that instance.\n\n        Returns\n        -------\n        An output dictionary consisting of:\n        top_spans : ``torch.IntTensor``\n            A tensor of shape ``(batch_size, num_spans_to_keep, 2)`` representing\n            the start and end word indices of the top spans that survived the pruning stage.\n        antecedent_indices : ``torch.IntTensor``\n            A tensor of shape ``(num_spans_to_keep, max_antecedents)`` representing for each top span\n            the index (with respect to top_spans) of the possible antecedents the model considered.\n        predicted_antecedents : ``torch.IntTensor``\n            A tensor of shape ``(batch_size, num_spans_to_keep)`` representing, for each top span, the\n            index (with respect to antecedent_indices) of the most likely antecedent. -1 means there\n            was no predicted link.\n        loss : ``torch.FloatTensor``, optional\n            A scalar loss to be optimised.\n        \"\"\"", "\n", "# Shape: (batch_size, document_length, embedding_size)", "\n", "text_embeddings", "=", "self", ".", "_lexical_dropout", "(", "self", ".", "_text_field_embedder", "(", "text", ")", ")", "\n", "\n", "document_length", "=", "text_embeddings", ".", "size", "(", "1", ")", "\n", "num_spans", "=", "spans", ".", "size", "(", "1", ")", "\n", "\n", "# Shape: (batch_size, document_length)", "\n", "text_mask", "=", "util", ".", "get_text_field_mask", "(", "text", ")", ".", "float", "(", ")", "\n", "# Shape: (batch_size, num_spans)", "\n", "span_mask", "=", "(", "spans", "[", ":", ",", ":", ",", "0", "]", ">=", "0", ")", ".", "squeeze", "(", "-", "1", ")", ".", "float", "(", ")", "\n", "# SpanFields return -1 when they are used as padding. As we do", "\n", "# some comparisons based on span widths when we attend over the", "\n", "# span representations that we generate from these indices, we", "\n", "# need them to be <= 0. This is only relevant in edge cases where", "\n", "# the number of spans we consider after the pruning stage is >= the", "\n", "# total number of spans, because in this case, it is possible we might", "\n", "# consider a masked span.", "\n", "# Shape: (batch_size, num_spans, 2)", "\n", "spans", "=", "F", ".", "relu", "(", "spans", ".", "float", "(", ")", ")", ".", "long", "(", ")", "\n", "\n", "if", "self", ".", "_context_layer", ":", "\n", "# Shape: (batch_size, document_length, encoding_dim)", "\n", "            ", "raw_contextualized_embeddings", "=", "self", ".", "_context_layer", "(", "text_embeddings", ",", "text_mask", ")", "\n", "\n", "if", "self", ".", "_attention_layer", "is", "not", "None", ":", "\n", "                ", "new_contextualized_embeddings", "=", "self", ".", "_local_attention", "(", "\n", "raw_contextualized_embeddings", "=", "raw_contextualized_embeddings", ",", "\n", "text_mask", "=", "text_mask", "\n", ")", "\n", "", "else", ":", "\n", "                ", "new_contextualized_embeddings", "=", "raw_contextualized_embeddings", "\n", "\n", "# Shape: (batch_size, num_spans, 2 * encoding_dim + feature_size)", "\n", "", "endpoint_span_embeddings", "=", "self", ".", "_endpoint_span_extractor", "(", "new_contextualized_embeddings", ",", "spans", ")", "\n", "# Shape: (batch_size, num_spans, embedding_size)", "\n", "attended_span_embeddings", "=", "self", ".", "_attentive_span_extractor", "(", "text_embeddings", ",", "spans", ")", "\n", "\n", "# Shape: (batch_size, num_spans, embedding_size + 2 * encoding_dim + feature_size)", "\n", "# span_embeddings = torch.cat([endpoint_span_embeddings, attended_span_embeddings], -1)", "\n", "span_embeddings", "=", "torch", ".", "cat", "(", "[", "endpoint_span_embeddings", ",", "attended_span_embeddings", "]", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "raw_contextualized_embeddings", "=", "text_embeddings", "\n", "\n", "if", "self", ".", "_attention_layer", "is", "not", "None", ":", "\n", "                ", "new_contextualized_embeddings", "=", "self", ".", "_local_attention", "(", "\n", "raw_contextualized_embeddings", "=", "raw_contextualized_embeddings", ",", "\n", "text_mask", "=", "text_mask", "\n", ")", "\n", "", "else", ":", "\n", "                ", "new_contextualized_embeddings", "=", "raw_contextualized_embeddings", "\n", "\n", "", "span_embeddings_list", "=", "list", "(", ")", "\n", "attended_span_embeddings", "=", "self", ".", "_attentive_span_extractor", "(", "new_contextualized_embeddings", ",", "spans", ")", "\n", "span_embeddings_list", "+=", "[", "attended_span_embeddings", "]", "\n", "if", "self", ".", "_endpoint_span_extractor", "is", "not", "None", ":", "\n", "# Shape: (batch_size, num_spans, embedding_size)", "\n", "                ", "endpoint_span_embeddings", "=", "self", ".", "_endpoint_span_extractor", "(", "text_embeddings", ",", "spans", ")", "\n", "span_embeddings_list", "+=", "[", "endpoint_span_embeddings", "]", "\n", "", "span_embeddings", "=", "torch", ".", "cat", "(", "span_embeddings_list", ",", "-", "1", ")", "\n", "\n", "# event_scores = self._event_classifier.forward(span_embeddings)", "\n", "# Shape: (batch_size, num_spans, num_event_realis_label)", "\n", "# Shape: (batch_size, num_spans, num_event_realis_label)", "\n", "# event_realis_scores = self._event_realis_classifier.forward(span_embeddings)", "\n", "\n", "# Prune based on mention scores.", "\n", "", "num_spans_to_keep_according_doc_len", "=", "int", "(", "math", ".", "floor", "(", "self", ".", "_spans_per_word", "*", "document_length", ")", ")", "\n", "\n", "(", "top_embeddings", ",", "top_mask", ",", "top_indices", ",", "top_scores", ")", "=", "self", ".", "_mention_pruner", "(", "span_embeddings", ",", "\n", "span_mask", ",", "\n", "num_spans_to_keep_according_doc_len", ",", "\n", ")", "\n", "\n", "event_embeddings", "=", "self", ".", "_get_event_embedding", "(", "span_mask", ")", "\n", "top_mask", "=", "top_mask", ".", "unsqueeze", "(", "-", "1", ")", "\n", "# Shape: (batch_size * num_spans_to_keep)", "\n", "# torch.index_select only accepts 1D indices, but here", "\n", "# we need to select spans for each element in the batch.", "\n", "# This reformats the indices to take into account their", "\n", "# index into the batch. We precompute this here to make", "\n", "# the multiple calls to util.batched_index_select below more efficient.", "\n", "flat_top_span_indices", "=", "util", ".", "flatten_and_batch_shift_indices", "(", "top_indices", ",", "num_spans", ")", "\n", "# Compute final predictions for which spans to consider as mentions.", "\n", "# Shape: (batch_size, num_spans_to_keep, 2)", "\n", "top_spans", "=", "util", ".", "batched_index_select", "(", "spans", ",", "\n", "top_indices", ",", "\n", "flat_top_span_indices", ")", "\n", "\n", "# Compute indices for antecedent spans to consider.", "\n", "max_antecedents", "=", "min", "(", "self", ".", "_max_antecedents", ",", "num_spans_to_keep_according_doc_len", ")", "\n", "\n", "# top_span_embeddings = top_span_embeddings.detach()", "\n", "# top_span_mention_scores = top_span_mention_scores.detach()", "\n", "\n", "# Now that we have our variables in terms of num_spans_to_keep, we need to", "\n", "# compare span pairs to decide each span's antecedent. Each span can only", "\n", "# have prior spans as antecedents, and we only consider up to max_antecedents", "\n", "# prior spans. So the first thing we do is construct a matrix mapping a span's", "\n", "#  index to the indices of its allowed antecedents. Note that this is independent", "\n", "#  of the batch dimension - it's just a function of the span's position in", "\n", "# top_spans. The spans are in document order, so we can just use the relative", "\n", "# index of the spans to know which other spans are allowed antecedents.", "\n", "\n", "# Once we have this matrix, we reformat our variables again to get embeddings", "\n", "# for all valid antecedents for each span. This gives us variables with shapes", "\n", "#  like (batch_size, num_spans_to_keep, max_antecedents, embedding_size), which", "\n", "#  we can use to make coreference decisions between valid span pairs.", "\n", "\n", "# Shapes:", "\n", "# (num_spans_to_keep, max_antecedents),", "\n", "# (1, max_antecedents),", "\n", "# (1, num_spans_to_keep, max_antecedents)", "\n", "valid_antecedent_indices", ",", "valid_antecedent_offsets", ",", "valid_antecedent_log_mask", "=", "_generate_valid_antecedents", "(", "num_spans_to_keep_according_doc_len", ",", "\n", "max_antecedents", ",", "\n", "util", ".", "get_device_of", "(", "text_mask", ")", ")", "\n", "\n", "if", "self", ".", "_type_refine_gate", "is", "not", "None", ":", "\n", "            ", "top_embeddings", "=", "self", ".", "_type_refine_embedding", "(", "top_embeddings", ",", "event_embeddings", ")", "\n", "\n", "# Select tensors relating to the antecedent spans.", "\n", "# Shape: (batch_size, num_spans_to_keep, max_antecedents, embedding_size)", "\n", "", "candidate_antecedent_embeddings", "=", "util", ".", "flattened_index_select", "(", "top_embeddings", ",", "\n", "valid_antecedent_indices", ")", "\n", "# Shape: (batch_size, num_spans_to_keep, max_antecedents)", "\n", "candidate_antecedent_mention_scores", "=", "util", ".", "flattened_index_select", "(", "top_scores", ",", "\n", "valid_antecedent_indices", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "# Shape: (batch_size, num_spans_to_keep, event_type_size + max_antecedents, embedding_size)", "\n", "candidate_antecedent_embeddings", "=", "self", ".", "_combine_event_embeddings_and_cluster_antecedent_embeddings", "(", "\n", "event_embeddings", ",", "\n", "candidate_antecedent_embeddings", ")", "\n", "\n", "# Compute antecedent scores.", "\n", "# Shape: (batch_size, num_spans_to_keep, event_type_size + max_antecedents, embedding_size)", "\n", "span_pair_embeddings", "=", "self", ".", "_compute_span_pair_embeddings", "(", "top_embeddings", ",", "\n", "candidate_antecedent_embeddings", ",", "\n", "valid_antecedent_offsets", ")", "\n", "# (batch_size, event_type_size, 1)", "\n", "event_type_prior_scores", "=", "self", ".", "_event_scorer", "(", "event_embeddings", ")", "\n", "# (batch_size, num_spans_to_keep, event_type_size)", "\n", "event_type_prior_scores", "=", "event_type_prior_scores", ".", "transpose", "(", "1", ",", "2", ")", ".", "expand", "(", "\n", "candidate_antecedent_mention_scores", ".", "size", "(", "0", ")", ",", "\n", "candidate_antecedent_mention_scores", ".", "size", "(", "1", ")", ",", "\n", "-", "1", ")", "\n", "\n", "# (batch_size, num_spans_to_keep, event_type_size + max_antecedents)", "\n", "candidate_antecedent_mention_scores", "=", "torch", ".", "cat", "(", "[", "event_type_prior_scores", ",", "\n", "candidate_antecedent_mention_scores", "]", ",", "\n", "-", "1", ")", "\n", "\n", "# Shape: (batch_size, num_spans_to_keep, 1 + event_type_size + max_antecedents)", "\n", "coreference_scores", "=", "self", ".", "_compute_coreference_scores", "(", "span_pair_embeddings", ",", "\n", "top_scores", ",", "\n", "candidate_antecedent_mention_scores", ",", "\n", "valid_antecedent_log_mask", ")", "\n", "\n", "# We now have, for each span which survived the pruning stage,", "\n", "# a predicted antecedent. This implies a clustering if we group", "\n", "# mentions which refer to each other in a chain.", "\n", "# Shape: (batch_size, num_spans_to_keep)", "\n", "_", ",", "predicted_antecedents", "=", "coreference_scores", ".", "max", "(", "2", ")", "\n", "# Subtract one here because index 0 is the \"no antecedent\" class,", "\n", "# so this makes the indices line up with actual spans if the prediction", "\n", "# is greater than -1.", "\n", "predicted_antecedents", "-=", "1", "\n", "\n", "output_dict", "=", "{", "\"top_spans\"", ":", "top_spans", ",", "\n", "\"antecedent_indices\"", ":", "valid_antecedent_indices", ",", "\n", "\"predicted_antecedents\"", ":", "predicted_antecedents", ",", "\n", "\"coreference_scores\"", ":", "coreference_scores", ",", "\n", "}", "\n", "\n", "if", "coref_labels", "is", "not", "None", "and", "event_type_labels", "is", "not", "None", ":", "\n", "\n", "            ", "pruned_event_type_labels", "=", "torch", ".", "gather", "(", "event_type_labels", ",", "1", ",", "top_indices", ")", "\n", "type_antecedent_labels", "=", "self", ".", "_get_type_antecedent_labels", "(", "pruned_event_type_labels", ")", "\n", "\n", "# Find the gold labels for the spans which we kept.", "\n", "pruned_gold_labels", "=", "util", ".", "batched_index_select", "(", "coref_labels", ".", "unsqueeze", "(", "-", "1", ")", ",", "\n", "top_indices", ",", "\n", "flat_top_span_indices", ")", "\n", "\n", "antecedent_labels", "=", "util", ".", "flattened_index_select", "(", "pruned_gold_labels", ",", "\n", "valid_antecedent_indices", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "antecedent_labels", "+=", "valid_antecedent_log_mask", ".", "long", "(", ")", "\n", "\n", "# Compute labels.", "\n", "# Shape: (batch_size, num_spans_to_keep, max_antecedents + 1)", "\n", "gold_antecedent_labels", "=", "self", ".", "_compute_antecedent_gold_labels", "(", "pruned_gold_labels", ",", "\n", "type_antecedent_labels", ",", "\n", "antecedent_labels", ")", "\n", "\n", "bce_loss", "=", "self", ".", "_bce_loss", ".", "forward", "(", "self", ".", "_event_scorer", ".", "forward", "(", "span_embeddings", ")", ".", "squeeze", "(", "-", "1", ")", ",", "\n", "(", "event_type_labels", ">", "0", ")", ".", "float", "(", ")", ")", "*", "span_mask", "\n", "bce_loss", "=", "bce_loss", ".", "sum", "(", ")", "*", "self", ".", "_bce_loss_weight", "\n", "\n", "# Now, compute the loss using the negative marginal log-likelihood.", "\n", "# This is equal to the log of the sum of the probabilities of all antecedent predictions", "\n", "# that would be consistent with the data, in the sense that we are minimising, for a", "\n", "# given span, the negative marginal log likelihood of all antecedents which are in the", "\n", "# same gold cluster as the span we are currently considering. Each span i predicts a", "\n", "# single antecedent j, but there might be several prior mentions k in the same", "\n", "# coreference cluster that would be valid antecedents. Our loss is the sum of the", "\n", "# probability assigned to all valid antecedents. This is a valid objective for", "\n", "# clustering as we don't mind which antecedent is predicted, so long as they are in", "\n", "#  the same coreference cluster.", "\n", "\n", "if", "self", ".", "_pretrain_ed", ":", "\n", "# All antecedent mask is 0", "\n", "                ", "top_mask", "=", "top_mask", ".", "expand_as", "(", "coreference_scores", ")", ".", "clone", "(", ")", "\n", "top_mask", "[", ":", ",", ":", ",", "self", ".", "_positive_label_size", "+", "2", ":", "]", "=", "0", "\n", "\n", "", "coreference_log_probs", "=", "util", ".", "masked_log_softmax", "(", "coreference_scores", ",", "top_mask", ")", "\n", "correct_antecedent_log_probs", "=", "coreference_log_probs", "+", "gold_antecedent_labels", ".", "log", "(", ")", "\n", "negative_marginal_log_likelihood", "=", "-", "util", ".", "logsumexp", "(", "correct_antecedent_log_probs", ")", ".", "sum", "(", ")", "\n", "coref_loss", "=", "negative_marginal_log_likelihood", "*", "self", ".", "_coref_loss_weight", "\n", "\n", "output_dict", "[", "\"loss\"", "]", "=", "coref_loss", "+", "bce_loss", "\n", "\n", "decoded_result", "=", "self", ".", "decode", "(", "output_dict", ")", "\n", "\n", "pred_label_spans_list", "=", "decoded_result", "[", "'pred_label_spans'", "]", "\n", "gold_label_spans_list", "=", "[", "m", "[", "'gold_label_spans'", "]", "for", "m", "in", "metadata", "]", "\n", "\n", "self", ".", "_mention_f1_score", "(", "pred_label_spans_list", ",", "\n", "gold_label_spans_list", ",", "\n", ")", "\n", "self", ".", "_conll_coref_scores", "(", "decoded_result", "[", "'clusters'", "]", ",", "\n", "metadata", ",", "\n", "pred_label_spans_list", ",", "\n", "gold_label_spans_list", ")", "\n", "\n", "self", ".", "_type_loss_metric", "(", "bce_loss", ".", "item", "(", ")", ")", "\n", "self", ".", "_coref_loss_metric", "(", "negative_marginal_log_likelihood", ".", "item", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_coref_loss_metric", "(", "0.", ")", "\n", "\n", "", "if", "metadata", "is", "not", "None", ":", "\n", "            ", "output_dict", "[", "\"document\"", "]", "=", "[", "x", "[", "\"original_text\"", "]", "for", "x", "in", "metadata", "]", "\n", "output_dict", "[", "\"offset\"", "]", "=", "[", "x", "[", "\"token_offset\"", "]", "for", "x", "in", "metadata", "]", "\n", "output_dict", "[", "'doc_id'", "]", "=", "[", "x", ".", "get", "(", "\"doc_id\"", ",", "None", ")", "for", "x", "in", "metadata", "]", "\n", "\n", "", "return", "output_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.models.end_to_end_event_coreference.End2EndEventCoreferenceResolver.decode": [[586, 610], ["src.utils.cluster_decoding_utils.node_decode"], "methods", ["home.repos.pwc.inspect_result.luyaojie_E3C.utils.cluster_decoding_utils.node_decode"], ["", "@", "overrides", "\n", "def", "decode", "(", "self", ",", "output_dict", ":", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ")", ":", "\n", "        ", "\"\"\"\n        Converts the list of spans and predicted antecedent indices into clusters\n        of spans for each element in the batch.\n\n        Parameters\n        ----------\n        output_dict : ``Dict[str, torch.Tensor]``, required.\n            The result of calling :func:`forward` on an instance or batch of instances.\n\n        Returns\n        -------\n        The same output dictionary, but with an additional ``clusters`` key:\n\n        clusters : ``List[List[List[Tuple[int, int]]]]``\n            A nested list, representing, for each instance in the batch, the list of clusters,\n            which are in turn comprised of a list of (start, end) inclusive spans into the\n            original document.\n        \"\"\"", "\n", "return", "node_decode", "(", "output_dict", ",", "\n", "self", ".", "vocab", ",", "decoding_algorithm", "=", "self", ".", "_decoding", ",", "\n", "positive_label_size", "=", "self", ".", "_positive_label_size", ",", "\n", "type_threshold", "=", "self", ".", "_type_threshold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.models.end_to_end_event_coreference.End2EndEventCoreferenceResolver.get_metrics": [[611, 628], ["end_to_end_event_coreference.End2EndEventCoreferenceResolver._mention_f1_score.get_metric", "end_to_end_event_coreference.End2EndEventCoreferenceResolver._conll_coref_scores.get_metric", "end_to_end_event_coreference.End2EndEventCoreferenceResolver._nil_label_metric.get_metric", "end_to_end_event_coreference.End2EndEventCoreferenceResolver._type_label_metric.get_metric", "end_to_end_event_coreference.End2EndEventCoreferenceResolver._coref_label_metric.get_metric", "end_to_end_event_coreference.End2EndEventCoreferenceResolver._type_loss_metric.get_metric", "end_to_end_event_coreference.End2EndEventCoreferenceResolver._coref_loss_metric.get_metric"], "methods", ["home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.EventCorefScores.get_metric", "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.EventCorefScores.get_metric", "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.EventCorefScores.get_metric", "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.EventCorefScores.get_metric", "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.EventCorefScores.get_metric", "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.EventCorefScores.get_metric", "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.EventCorefScores.get_metric"], ["", "@", "overrides", "\n", "def", "get_metrics", "(", "self", ",", "reset", ":", "bool", "=", "False", ")", "->", "Dict", "[", "str", ",", "float", "]", ":", "\n", "        ", "mention_result", "=", "self", ".", "_mention_f1_score", ".", "get_metric", "(", "reset", ")", "\n", "coref_precision", ",", "coref_recall", ",", "coref_f1", "=", "self", ".", "_conll_coref_scores", ".", "get_metric", "(", "reset", ")", "\n", "\n", "return", "{", "\"c_p\"", ":", "coref_precision", ",", "\n", "\"c_r\"", ":", "coref_recall", ",", "\n", "\"c_f1\"", ":", "coref_f1", ",", "\n", "\"m_p\"", ":", "mention_result", "[", "'precision'", "]", ",", "\n", "\"m_r\"", ":", "mention_result", "[", "'recall'", "]", ",", "\n", "\"m_f1\"", ":", "mention_result", "[", "'f1-score'", "]", ",", "\n", "\"nil\"", ":", "self", ".", "_nil_label_metric", ".", "get_metric", "(", "reset", ")", ",", "\n", "\"type\"", ":", "self", ".", "_type_label_metric", ".", "get_metric", "(", "reset", ")", ",", "\n", "\"coref\"", ":", "self", ".", "_coref_label_metric", ".", "get_metric", "(", "reset", ")", ",", "\n", "\"t_l\"", ":", "self", ".", "_type_loss_metric", ".", "get_metric", "(", "reset", ")", ",", "\n", "\"c_l\"", ":", "self", ".", "_coref_loss_metric", ".", "get_metric", "(", "reset", ")", ",", "\n", "\"a_f1\"", ":", "(", "mention_result", "[", "'f1-score'", "]", "+", "coref_f1", ")", "/", "2.", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.models.end_to_end_event_coreference.End2EndEventCoreferenceResolver._combine_event_embeddings_and_cluster_antecedent_embeddings": [[629, 648], ["event_embeddings.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "event_embeddings.unsqueeze().expand.unsqueeze().expand.unsqueeze", "antecedent_embeddings.size", "antecedent_embeddings.size", "event_embeddings.unsqueeze().expand.unsqueeze().expand.size", "antecedent_embeddings.size"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_combine_event_embeddings_and_cluster_antecedent_embeddings", "(", "event_embeddings", ":", "torch", ".", "FloatTensor", ",", "\n", "antecedent_embeddings", ":", "torch", ".", "FloatTensor", ")", ":", "\n", "        ", "\"\"\"\n        event_embeddings: ``torch.FloatTensor``, required.\n            Embedding representations of the event types. Has shape\n            (batch_size, event_type_size, embedding_size).\n        antecedent_embeddings : ``torch.FloatTensor``, required.\n            Embedding representations of the antecedent spans we are considering\n            for each top span. Has shape\n            (batch_size, num_spans_to_keep, max_antecedents, embedding_size).\n        return:\n            (batch_size, num_spans_to_keep, max_antecedents + event_type_size, embedding_size)\n        \"\"\"", "\n", "event_embeddings", "=", "event_embeddings", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "(", "antecedent_embeddings", ".", "size", "(", "0", ")", ",", "\n", "antecedent_embeddings", ".", "size", "(", "1", ")", ",", "\n", "event_embeddings", ".", "size", "(", "1", ")", ",", "\n", "antecedent_embeddings", ".", "size", "(", "3", ")", ",", ")", ")", "\n", "return", "torch", ".", "cat", "(", "[", "event_embeddings", ",", "antecedent_embeddings", "]", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.models.end_to_end_event_coreference.End2EndEventCoreferenceResolver._compute_span_pair_embeddings": [[649, 707], ["top_span_embeddings.unsqueeze().expand_as", "allennlp.nn.util.bucket_values", "allennlp.nn.util.bucket_values.new_zeros", "end_to_end_event_coreference.End2EndEventCoreferenceResolver._distance_embedding", "antecedent_distance_embeddings.expand.expand.unsqueeze", "antecedent_distance_embeddings.expand.expand.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "antecedent_embeddings.size", "antecedent_embeddings.size", "antecedent_embeddings.size", "antecedent_distance_embeddings.expand.expand.size", "top_span_embeddings.unsqueeze"], "methods", ["None"], ["", "def", "_compute_span_pair_embeddings", "(", "self", ",", "\n", "top_span_embeddings", ":", "torch", ".", "FloatTensor", ",", "\n", "antecedent_embeddings", ":", "torch", ".", "FloatTensor", ",", "\n", "antecedent_offsets", ":", "torch", ".", "FloatTensor", ")", ":", "\n", "        ", "\"\"\"\n        Computes an embedding representation of pairs of spans for the pairwise scoring function\n        to consider. This includes both the original span representations, the element-wise\n        similarity of the span representations, and an embedding representation of the distance\n        between the two spans.\n\n        Parameters\n        ---------- shape\n            (batch_size, event_type_size, embedding_size).\n        top_span_embeddings : ``torch.FloatTensor``, required.\n            Embedding representations of the top spans. Has shape\n            (batch_size, num_spans_to_keep, embedding_size).\n        antecedent_embeddings : ``torch.FloatTensor``, required.\n            Embedding representations of the antecedent spans we are considering\n            for each top span. Has shape\n            (batch_size, num_spans_to_keep, event_type_size + max_antecedents, embedding_size).\n        antecedent_offsets : ``torch.IntTensor``, required.\n            The offsets between each top span and its antecedent spans in terms\n            of spans we are considering. Has shape (1, max_antecedents).\n\n        Returns\n        -------\n        span_pair_embeddings : ``torch.FloatTensor``\n            Embedding representation of the pair of spans to consider. Has shape\n            (batch_size, num_spans_to_keep, max_antecedents, embedding_size)\n        \"\"\"", "\n", "# Shape: (batch_size, num_spans_to_keep, max_antecedents, embedding_size)", "\n", "target_embeddings", "=", "top_span_embeddings", ".", "unsqueeze", "(", "2", ")", ".", "expand_as", "(", "antecedent_embeddings", ")", "\n", "\n", "# Shape: (1, max_antecedents)", "\n", "bucket_values", "=", "util", ".", "bucket_values", "(", "antecedent_offsets", ",", "num_total_buckets", "=", "self", ".", "_num_distance_buckets", ")", "\n", "# (1, event_type)", "\n", "label_bucket_values", "=", "bucket_values", ".", "new_zeros", "(", "(", "1", ",", "self", ".", "_positive_label_size", ")", ")", "\n", "# Shape: (1, max_antecedents + event_type_size, embedding_size)", "\n", "antecedent_distance_embeddings", "=", "self", ".", "_distance_embedding", "(", "\n", "torch", ".", "cat", "(", "[", "bucket_values", ",", "label_bucket_values", "]", ",", "1", ")", "\n", ")", "\n", "\n", "# Shape: (1, 1, max_antecedents + event_type_size, embedding_size)", "\n", "antecedent_distance_embeddings", "=", "antecedent_distance_embeddings", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "expanded_distance_embeddings_shape", "=", "(", "antecedent_embeddings", ".", "size", "(", "0", ")", ",", "\n", "antecedent_embeddings", ".", "size", "(", "1", ")", ",", "\n", "antecedent_embeddings", ".", "size", "(", "2", ")", ",", "\n", "antecedent_distance_embeddings", ".", "size", "(", "-", "1", ")", ")", "\n", "# Shape: (batch_size, num_spans_to_keep, max_antecedents + event_type_size, embedding_size)", "\n", "antecedent_distance_embeddings", "=", "antecedent_distance_embeddings", ".", "expand", "(", "*", "expanded_distance_embeddings_shape", ")", "\n", "\n", "# Shape: (batch_size, num_spans_to_keep, max_antecedents + event_type_size, embedding_size)", "\n", "span_pair_embeddings", "=", "torch", ".", "cat", "(", "[", "target_embeddings", ",", "\n", "antecedent_embeddings", ",", "\n", "antecedent_embeddings", "*", "target_embeddings", ",", "\n", "antecedent_distance_embeddings", "]", ",", "-", "1", ")", "\n", "return", "span_pair_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.models.end_to_end_event_coreference.End2EndEventCoreferenceResolver._compute_antecedent_gold_labels": [[708, 764], ["top_span_labels.expand_as", "end_to_end_event_coreference.End2EndEventCoreferenceResolver._coref_label_metric", "end_to_end_event_coreference.End2EndEventCoreferenceResolver._nil_label_metric", "end_to_end_event_coreference.End2EndEventCoreferenceResolver._type_label_metric", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "pairwise_labels.sum"], "methods", ["None"], ["", "def", "_compute_antecedent_gold_labels", "(", "self", ",", "\n", "top_span_labels", ":", "torch", ".", "IntTensor", ",", "\n", "type_antecedent_labels", ":", "torch", ".", "IntTensor", ",", "\n", "antecedent_labels", ":", "torch", ".", "IntTensor", ")", ":", "\n", "        ", "\"\"\"\n        Generates a binary indicator for every pair of spans. This label is one if and\n        only if the pair of spans belong to the same cluster. The labels are augmented\n        with a dummy antecedent at the zeroth position, which represents the prediction\n        that a span does not have any antecedent.\n\n        Parameters\n        ----------\n        top_span_labels : ``torch.IntTensor``, required.\n            The cluster id label for every span. The id is arbitrary,\n            as we just care about the clustering. Has shape (batch_size, num_spans_to_keep).\n        antecedent_labels : ``torch.IntTensor``, required.\n            The cluster id label for every antecedent span. The id is arbitrary,\n            as we just care about the clustering. Has shape\n            (batch_size, num_spans_to_keep, max_antecedents).\n\n        Returns\n        -------\n        pairwise_labels_with_dummy_label : ``torch.FloatTensor``\n            A binary tensor representing whether a given pair of spans belong to\n            the same cluster in the gold clustering.\n            Has shape (batch_size, num_spans_to_keep, max_antecedents + 1).\n\n        \"\"\"", "\n", "# Shape: (batch_size, num_spans_to_keep, max_antecedents)", "\n", "# print(top_span_labels)", "\n", "# print(antecedent_labels)", "\n", "\n", "target_labels", "=", "top_span_labels", ".", "expand_as", "(", "antecedent_labels", ")", "\n", "same_cluster_indicator", "=", "(", "target_labels", "==", "antecedent_labels", ")", ".", "float", "(", ")", "\n", "non_dummy_indicator", "=", "(", "target_labels", ">=", "0", ")", ".", "float", "(", ")", "\n", "pairwise_labels", "=", "same_cluster_indicator", "*", "non_dummy_indicator", "\n", "\n", "if", "self", ".", "_pretrain_ed", ":", "\n", "            ", "pairwise_labels", "=", "pairwise_labels", "*", "0", "\n", "", "else", ":", "\n", "# for pairwise_labels without type_antecedent_labels", "\n", "            ", "pairwise_labels_indicator", "=", "(", "pairwise_labels", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", ">", "0", ")", ".", "float", "(", ")", "\n", "type_antecedent_labels", "=", "type_antecedent_labels", "*", "(", "1", "-", "pairwise_labels_indicator", ")", "\n", "\n", "", "self", ".", "_coref_label_metric", "(", "torch", ".", "sum", "(", "pairwise_labels", ")", ".", "item", "(", ")", ")", "\n", "self", ".", "_nil_label_metric", "(", "torch", ".", "sum", "(", "type_antecedent_labels", "[", ":", ",", ":", ",", "0", "]", ")", ".", "item", "(", ")", ")", "\n", "self", ".", "_type_label_metric", "(", "torch", ".", "sum", "(", "type_antecedent_labels", "[", ":", ",", ":", ",", "1", ":", "self", ".", "_positive_label_size", "+", "1", "]", ")", ".", "item", "(", ")", ")", "\n", "\n", "# print(pairwise_labels)", "\n", "#", "\n", "# # Shape: (batch_size, num_spans_to_keep, 1)", "\n", "# dummy_labels = (1 - pairwise_labels).prod(-1, keepdim=True)", "\n", "\n", "# Shape: (batch_size, num_spans_to_keep, event_type_size + max_antecedents + 1)", "\n", "pairwise_labels_with_dummy_label", "=", "torch", ".", "cat", "(", "[", "type_antecedent_labels", ",", "pairwise_labels", "]", ",", "-", "1", ")", "\n", "return", "pairwise_labels_with_dummy_label", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.models.end_to_end_event_coreference.End2EndEventCoreferenceResolver._compute_coreference_scores": [[765, 818], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "end_to_end_event_coreference.End2EndEventCoreferenceResolver._antecedent_scorer().squeeze", "end_to_end_event_coreference.End2EndEventCoreferenceResolver.new_zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "end_to_end_event_coreference.End2EndEventCoreferenceResolver.size", "end_to_end_event_coreference.End2EndEventCoreferenceResolver.size", "torch.cat.new_zeros", "torch.cat.new_zeros", "end_to_end_event_coreference.End2EndEventCoreferenceResolver._antecedent_scorer", "end_to_end_event_coreference.End2EndEventCoreferenceResolver._antecedent_feedforward", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size"], "methods", ["None"], ["", "def", "_compute_coreference_scores", "(", "self", ",", "\n", "pairwise_embeddings", ":", "torch", ".", "FloatTensor", ",", "\n", "top_span_mention_scores", ":", "torch", ".", "FloatTensor", ",", "\n", "antecedent_mention_scores", ":", "torch", ".", "FloatTensor", ",", "\n", "antecedent_log_mask", ":", "torch", ".", "FloatTensor", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "\"\"\"\n        Computes scores for every pair of spans. Additionally, a dummy label is included,\n        representing the decision that the span is not coreferent with anything. For the dummy\n        label, the score is always zero. For the true antecedent spans, the score consists of\n        the pairwise antecedent score and the unary mention scores for the span and its\n        antecedent. The factoring allows the model to blame many of the absent links on bad\n        spans, enabling the pruning strategy used in the forward pass.\n\n        Parameters\n        ----------\n        pairwise_embeddings: ``torch.FloatTensor``, required.\n            Embedding representations of pairs of spans. Has shape\n            (batch_size, num_spans_to_keep, max_antecedents, encoding_dim)\n        top_span_mention_scores: ``torch.FloatTensor``, required.\n            Mention scores for every span. Has shape\n            (batch_size, num_spans_to_keep, max_antecedents).\n        antecedent_mention_scores: ``torch.FloatTensor``, required.\n            Mention scores for every antecedent. Has shape\n            (batch_size, num_spans_to_keep, max_antecedents).\n        antecedent_log_mask: ``torch.FloatTensor``, required.\n            The log of the mask for valid antecedents.\n\n        Returns\n        -------\n        coreference_scores: ``torch.FloatTensor``\n            A tensor of shape (batch_size, num_spans_to_keep, max_antecedents + 1),\n            representing the unormalised score for each (span, antecedent) pair\n            we considered.\n\n        \"\"\"", "\n", "antecedent_log_mask", "=", "torch", ".", "cat", "(", "[", "antecedent_log_mask", ".", "new_zeros", "(", "(", "antecedent_log_mask", ".", "size", "(", "0", ")", ",", "\n", "antecedent_log_mask", ".", "size", "(", "1", ")", ",", "\n", "self", ".", "_positive_label_size", ")", ")", ",", "\n", "antecedent_log_mask", "]", ",", "\n", "-", "1", ")", "\n", "# Shape: (batch_size, num_spans_to_keep, max_antecedents)", "\n", "antecedent_scores", "=", "self", ".", "_antecedent_scorer", "(", "\n", "self", ".", "_antecedent_feedforward", "(", "pairwise_embeddings", ")", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "antecedent_scores", "+=", "top_span_mention_scores", "+", "antecedent_mention_scores", "\n", "antecedent_scores", "+=", "antecedent_log_mask", "\n", "\n", "# Shape: (batch_size, num_spans_to_keep, 1)", "\n", "shape", "=", "[", "antecedent_scores", ".", "size", "(", "0", ")", ",", "antecedent_scores", ".", "size", "(", "1", ")", ",", "1", "]", "\n", "dummy_scores", "=", "antecedent_scores", ".", "new_zeros", "(", "*", "shape", ")", "\n", "\n", "# Shape: (batch_size, num_spans_to_keep, max_antecedents + 1)", "\n", "coreference_scores", "=", "torch", ".", "cat", "(", "[", "dummy_scores", ",", "antecedent_scores", "]", ",", "-", "1", ")", "\n", "return", "coreference_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.models.end_to_end_event_coreference._generate_valid_antecedents": [[820, 881], ["allennlp.nn.util.get_range_vector().unsqueeze", "torch.relu().long", "allennlp.nn.util.get_range_vector", "torch.relu", "allennlp.nn.util.get_range_vector", "raw_antecedent_indices.float"], "function", ["None"], ["", "", "def", "_generate_valid_antecedents", "(", "num_spans_to_keep", ":", "int", ",", "\n", "max_antecedents", ":", "int", ",", "\n", "device", ":", "int", ")", "->", "Tuple", "[", "torch", ".", "IntTensor", ",", "\n", "torch", ".", "IntTensor", ",", "\n", "torch", ".", "FloatTensor", "]", ":", "\n", "    ", "\"\"\"\n    This method generates possible antecedents per span which survived the pruning\n    stage. This procedure is `generic across the batch`. The reason this is the case is\n    that each span in a batch can be coreferent with any previous span, but here we\n    are computing the possible `indices` of these spans. So, regardless of the batch,\n    the 1st span _cannot_ have any antecedents, because there are none to select from.\n    Similarly, each element can only predict previous spans, so this returns a matrix\n    of shape (num_spans_to_keep, max_antecedents), where the (i,j)-th index is equal to\n    (i - 1) - j if j <= i, or zero otherwise.\n\n    Parameters\n    ----------\n    num_spans_to_keep : ``int``, required.\n        The number of spans that were kept while pruning.\n    max_antecedents : ``int``, required.\n        The maximum number of antecedent spans to consider for every span.\n    device: ``int``, required.\n        The CUDA device to use.\n\n    Returns\n    -------\n    valid_antecedent_indices : ``torch.IntTensor``\n        The indices of every antecedent to consider with respect to the top k spans.\n        Has shape ``(num_spans_to_keep, max_antecedents)``.\n    valid_antecedent_offsets : ``torch.IntTensor``\n        The distance between the span and each of its antecedents in terms of the number\n        of considered spans (i.e not the word distance between the spans).\n        Has shape ``(1, max_antecedents)``.\n    valid_antecedent_log_mask : ``torch.FloatTensor``\n        The logged mask representing whether each antecedent span is valid. Required since\n        different spans have different numbers of valid antecedents. For example, the first\n        span in the document should have no valid antecedents.\n        Has shape ``(1, num_spans_to_keep, max_antecedents)``.\n    \"\"\"", "\n", "# Shape: (num_spans_to_keep, 1)", "\n", "target_indices", "=", "util", ".", "get_range_vector", "(", "num_spans_to_keep", ",", "device", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "# Shape: (1, max_antecedents)", "\n", "valid_antecedent_offsets", "=", "(", "util", ".", "get_range_vector", "(", "max_antecedents", ",", "device", ")", "+", "1", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "# This is a broadcasted subtraction.", "\n", "# Shape: (num_spans_to_keep, max_antecedents)", "\n", "raw_antecedent_indices", "=", "target_indices", "-", "valid_antecedent_offsets", "\n", "\n", "# In our matrix of indices, the upper triangular part will be negative", "\n", "# because the offsets will be > the target indices. We want to mask these,", "\n", "# because these are exactly the indices which we don't want to predict, per span.", "\n", "# We're generating a logspace mask here because we will eventually create a", "\n", "# distribution over these indices, so we need the 0 elements of the mask to be -inf", "\n", "# in order to not mess up the normalisation of the distribution.", "\n", "# Shape: (1, num_spans_to_keep, max_antecedents)", "\n", "valid_antecedent_log_mask", "=", "(", "raw_antecedent_indices", ">=", "0", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "log", "(", ")", "\n", "\n", "# Shape: (num_spans_to_keep, max_antecedents)", "\n", "valid_antecedent_indices", "=", "F", ".", "relu", "(", "raw_antecedent_indices", ".", "float", "(", ")", ")", ".", "long", "(", ")", "\n", "return", "valid_antecedent_indices", ",", "valid_antecedent_offsets", ",", "valid_antecedent_log_mask", "\n", "", ""]], "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.mention_f1.MentionF1.__init__": [[16, 20], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "_num_gold_mentions", "=", "0", "\n", "self", ".", "_num_predicted_mentions", "=", "0", "\n", "self", ".", "_num_recalled_mentions", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.mention_f1.MentionF1.__call__": [[21, 32], ["zip", "batched_top_spans.data.tolist", "len", "len", "len"], "methods", ["None"], ["", "@", "overrides", "\n", "def", "__call__", "(", "self", ",", "# type: ignore", "\n", "batched_top_spans", ":", "torch", ".", "Tensor", ",", "\n", "batched_metadata", ":", "List", "[", "Dict", "[", "str", ",", "Any", "]", "]", ")", ":", "\n", "        ", "for", "top_spans", ",", "metadata", "in", "zip", "(", "batched_top_spans", ".", "data", ".", "tolist", "(", ")", ",", "batched_metadata", ")", ":", "\n", "            ", "gold_mentions", ":", "Set", "[", "Tuple", "[", "int", ",", "int", "]", "]", "=", "{", "mention", "for", "cluster", "in", "metadata", "[", "\"clusters\"", "]", "\n", "for", "mention", "in", "cluster", "}", "\n", "predicted_spans", ":", "Set", "[", "Tuple", "[", "int", ",", "int", "]", "]", "=", "{", "(", "span", "[", "0", "]", ",", "span", "[", "1", "]", ")", "for", "span", "in", "top_spans", "}", "\n", "self", ".", "_num_gold_mentions", "+=", "len", "(", "gold_mentions", ")", "\n", "self", ".", "_num_recalled_mentions", "+=", "len", "(", "gold_mentions", "&", "predicted_spans", ")", "\n", "self", ".", "_num_predicted_mentions", "+=", "len", "(", "predicted_spans", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.mention_f1.MentionF1.get_metric": [[33, 55], ["mention_f1.MentionF1.reset", "float", "float"], "methods", ["home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.EventCorefScores.reset"], ["", "", "@", "overrides", "\n", "def", "get_metric", "(", "self", ",", "reset", ":", "bool", "=", "False", ")", "->", "Dict", ":", "\n", "        ", "if", "self", ".", "_num_gold_mentions", "==", "0", ":", "\n", "            ", "recall", "=", "0.0", "\n", "", "else", ":", "\n", "            ", "recall", "=", "self", ".", "_num_recalled_mentions", "/", "float", "(", "self", ".", "_num_gold_mentions", ")", "\n", "\n", "", "if", "self", ".", "_num_predicted_mentions", "==", "0", ":", "\n", "            ", "precision", "=", "0.0", "\n", "", "else", ":", "\n", "            ", "precision", "=", "self", ".", "_num_recalled_mentions", "/", "float", "(", "self", ".", "_num_predicted_mentions", ")", "\n", "\n", "", "if", "self", ".", "_num_predicted_mentions", "!=", "0", "and", "self", ".", "_num_gold_mentions", "!=", "0", "and", "self", ".", "_num_recalled_mentions", "!=", "0", ":", "\n", "            ", "f1", "=", "2", "*", "precision", "*", "recall", "/", "(", "precision", "+", "recall", ")", "\n", "", "else", ":", "\n", "            ", "f1", "=", "0.0", "\n", "\n", "", "if", "reset", ":", "\n", "            ", "self", ".", "reset", "(", ")", "\n", "", "return", "{", "'precision'", ":", "precision", ",", "\n", "'recall'", ":", "recall", ",", "\n", "'f1-score'", ":", "f1", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.mention_f1.MentionF1.reset": [[56, 61], ["None"], "methods", ["None"], ["", "@", "overrides", "\n", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_num_predicted_mentions", "=", "0", "\n", "self", ".", "_num_gold_mentions", "=", "0", "\n", "self", ".", "_num_recalled_mentions", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.mention_f1.MentionTypeF1.__init__": [[65, 68], ["mention_f1.MentionF1.__init__"], "methods", ["home.repos.pwc.inspect_result.luyaojie_E3C.scripts.convert_predict_to_tbf.Document.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nil_index", "=", "0", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_nil_index", "=", "nil_index", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.mention_f1.MentionTypeF1.__call__": [[69, 83], ["zip", "torch.sum().long", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "@", "overrides", "\n", "def", "__call__", "(", "self", ",", "# type: ignore", "\n", "event_type_predict_label", ":", "torch", ".", "Tensor", ",", "\n", "event_type_labels", ":", "torch", ".", "Tensor", ",", "\n", "span_mask", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "for", "predict_label", ",", "golden_label", ",", "mask", "in", "zip", "(", "event_type_predict_label", ",", "event_type_labels", ",", "span_mask", ")", ":", "\n", "            ", "length", "=", "torch", ".", "sum", "(", "mask", ")", ".", "long", "(", ")", "\n", "predict_label", "=", "predict_label", "[", ":", "length", "]", "\n", "golden_label", "=", "golden_label", "[", ":", "length", "]", "\n", "\n", "self", ".", "_num_gold_mentions", "+=", "torch", ".", "sum", "(", "golden_label", "!=", "self", ".", "_nil_index", ")", ".", "item", "(", ")", "\n", "self", ".", "_num_recalled_mentions", "+=", "torch", ".", "sum", "(", "\n", "(", "predict_label", "==", "golden_label", ")", "&", "(", "golden_label", "!=", "self", ".", "_nil_index", ")", ")", ".", "item", "(", ")", "\n", "self", ".", "_num_predicted_mentions", "+=", "torch", ".", "sum", "(", "predict_label", "!=", "self", ".", "_nil_index", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.mention_f1.TopSpanMentionTypeF1.__init__": [[87, 90], ["mention_f1.MentionF1.__init__"], "methods", ["home.repos.pwc.inspect_result.luyaojie_E3C.scripts.convert_predict_to_tbf.Document.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nil_index", "=", "0", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_nil_index", "=", "nil_index", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.mention_f1.TopSpanMentionTypeF1.__call__": [[91, 102], ["zip", "set", "set", "len", "len", "len"], "methods", ["None"], ["", "@", "overrides", "\n", "def", "__call__", "(", "self", ",", "# type: ignore", "\n", "batch_pred_label_spans", ",", "\n", "batch_gold_label_spans", "\n", ")", ":", "\n", "        ", "for", "pred_label_spans", ",", "gold_label_spans", "in", "zip", "(", "batch_pred_label_spans", ",", "batch_gold_label_spans", ")", ":", "\n", "            ", "predicted_spans", "=", "set", "(", "pred_label_spans", ")", "\n", "gold_mentions", "=", "set", "(", "gold_label_spans", ")", "\n", "self", ".", "_num_gold_mentions", "+=", "len", "(", "gold_mentions", ")", "\n", "self", ".", "_num_recalled_mentions", "+=", "len", "(", "gold_mentions", "&", "predicted_spans", ")", "\n", "self", ".", "_num_predicted_mentions", "+=", "len", "(", "predicted_spans", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.boolean_f1.BooleanF1.__init__": [[31, 47], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", "->", "None", ":", "\n", "# statistics", "\n", "# the total number of true positive instances under each class", "\n", "# Shape: (num_classes, )", "\n", "        ", "self", ".", "_true_positive_sum", "=", "0.", "\n", "# the total number of instances", "\n", "# Shape: (num_classes, )", "\n", "self", ".", "_total_sum", "=", "0.", "\n", "# the total number of instances under each _predicted_ class,", "\n", "# including true positives and false positives", "\n", "# Shape: (num_classes, )", "\n", "self", ".", "_pred_sum", "=", "0.", "\n", "# the total number of instances under each _true_ class,", "\n", "# including true positives and false negatives", "\n", "# Shape: (num_classes, )", "\n", "self", ".", "_true_sum", "=", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.boolean_f1.BooleanF1.__call__": [[48, 89], ["boolean_f1.BooleanF1.unwrap_to_tensors", "predictions.view.view.size", "predictions.view.view.view", "gold_labels.view.view.view", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "predictions.view.view.size", "gold_labels.view.view.size", "torch.ones().bool", "predictions.view.view.size", "mask.size", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.ones", "predictions.view.view.size"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "\n", "predictions", ":", "torch", ".", "BoolTensor", ",", "\n", "gold_labels", ":", "torch", ".", "BoolTensor", ",", "\n", "mask", ":", "Optional", "[", "torch", ".", "Tensor", "]", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        predictions : ``torch.Tensor``, required.\n            A tensor of predictions of shape (batch_size, ...).\n        gold_labels : ``torch.Tensor``, required.\n            A tensor of the same shape as ``predictions``.\n        mask: ``torch.Tensor``, optional (default = None).\n            A tensor of the same shape as ``predictions``.\n        \"\"\"", "\n", "assert", "predictions", ".", "size", "(", ")", "==", "gold_labels", ".", "size", "(", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "assert", "predictions", ".", "size", "(", ")", "==", "mask", ".", "size", "(", ")", "\n", "\n", "", "predictions", ",", "gold_labels", ",", "mask", "=", "self", ".", "unwrap_to_tensors", "(", "predictions", ",", "gold_labels", ",", "mask", ")", "\n", "batch_size", "=", "predictions", ".", "size", "(", "0", ")", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "# We can multiply by the mask up front, because we're just checking equality below, and", "\n", "# this way everything that's masked will be equal.", "\n", "            ", "predictions", "=", "predictions", "*", "mask", "\n", "gold_labels", "=", "gold_labels", "*", "mask", "\n", "\n", "# We want to skip predictions that are completely masked;", "\n", "# so we'll keep predictions that aren't.", "\n", "keep", "=", "mask", "\n", "", "else", ":", "\n", "            ", "keep", "=", "torch", ".", "ones", "(", "predictions", ".", "size", "(", ")", ")", ".", "bool", "(", ")", "\n", "\n", "", "predictions", "=", "predictions", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "gold_labels", "=", "gold_labels", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "\n", "# \u53ea\u6709 true \u88ab\u8ba1\u7b97", "\n", "self", ".", "_true_positive_sum", "+=", "torch", ".", "sum", "(", "predictions", "&", "gold_labels", "&", "keep", ")", ".", "item", "(", ")", "\n", "self", ".", "_true_sum", "+=", "torch", ".", "sum", "(", "(", "predictions", "==", "gold_labels", ")", "&", "keep", ")", ".", "item", "(", ")", "\n", "self", ".", "_pred_sum", "+=", "torch", ".", "sum", "(", "predictions", "&", "keep", ")", ".", "item", "(", ")", "\n", "self", ".", "_total_sum", "+=", "torch", ".", "sum", "(", "gold_labels", "&", "keep", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.boolean_f1.BooleanF1.safe_div": [[90, 96], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "safe_div", "(", "numerator", ",", "denominator", ")", ":", "\n", "        ", "if", "denominator", "==", "0.", ":", "\n", "            ", "return", "0.", "\n", "", "else", ":", "\n", "            ", "return", "numerator", "/", "denominator", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.boolean_f1.BooleanF1.get_metric": [[97, 115], ["boolean_f1.BooleanF1.safe_div", "boolean_f1.BooleanF1.safe_div", "boolean_f1.BooleanF1.safe_div", "boolean_f1.BooleanF1.reset"], "methods", ["home.repos.pwc.inspect_result.luyaojie_E3C.metrics.boolean_f1.BooleanF1.safe_div", "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.boolean_f1.BooleanF1.safe_div", "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.boolean_f1.BooleanF1.safe_div", "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.EventCorefScores.reset"], ["", "", "def", "get_metric", "(", "self", ",", "reset", ":", "bool", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Returns\n        -------\n        The accumulated accuracy.\n        \"\"\"", "\n", "precision", "=", "self", ".", "safe_div", "(", "self", ".", "_true_positive_sum", ",", "self", ".", "_pred_sum", ")", "\n", "recall", "=", "self", ".", "safe_div", "(", "self", ".", "_true_positive_sum", ",", "self", ".", "_total_sum", ")", "\n", "f1", "=", "self", ".", "safe_div", "(", "2", "*", "precision", "*", "recall", ",", "precision", "+", "recall", ")", "\n", "metric", "=", "{", "'precision'", ":", "precision", ",", "\n", "'recall'", ":", "recall", ",", "\n", "'fscore'", ":", "f1", ",", "\n", "'tp'", ":", "self", ".", "_true_positive_sum", ",", "\n", "'pred'", ":", "self", ".", "_pred_sum", ",", "\n", "'gold'", ":", "self", ".", "_total_sum", "}", "\n", "if", "reset", ":", "\n", "            ", "self", ".", "reset", "(", ")", "\n", "", "return", "metric", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.boolean_f1.BooleanF1.reset": [[116, 122], ["None"], "methods", ["None"], ["", "@", "overrides", "\n", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_true_positive_sum", "=", "0.0", "\n", "self", ".", "_true_sum", "=", "0.0", "\n", "self", ".", "_pred_sum", "=", "0.0", "\n", "self", ".", "_total_sum", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.EventCorefScores.__init__": [[144, 148], ["event_coref_scores.Scorer", "event_coref_scores.BLANCScorer"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mapping_type", "=", "False", ")", "->", "None", ":", "\n", "        ", "self", ".", "scorers", "=", "[", "Scorer", "(", "m", ")", "for", "m", "in", "(", "Scorer", ".", "muc", ",", "Scorer", ".", "b_cubed", ",", "Scorer", ".", "ceafe", ")", "]", "\n", "self", ".", "scorers", "+=", "[", "BLANCScorer", "(", ")", "]", "\n", "self", ".", "_mapping_type", "=", "mapping_type", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.EventCorefScores.__call__": [[149, 190], ["enumerate", "event_coref_scores.clusters_to_mention_to_predicted", "event_coref_scores.EventCorefScores.get_gold_clusters", "event_coref_scores.combine_cluster_with_label", "event_coref_scores.combine_cluster_with_label", "event_coref_scores.split_cluster_with_different_label", "event_coref_scores.split_cluster_with_different_label", "event_coref_scores.clusters_to_mention_to_predicted", "event_coref_scores.clusters_to_mention_to_predicted", "event_coref_scores.output_mapping_conll", "scorer.update"], "methods", ["home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.clusters_to_mention_to_predicted", "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.EventCorefScores.get_gold_clusters", "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.combine_cluster_with_label", "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.combine_cluster_with_label", "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.split_cluster_with_different_label", "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.split_cluster_with_different_label", "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.clusters_to_mention_to_predicted", "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.clusters_to_mention_to_predicted", "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.output_mapping_conll", "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.BLANCScorer.update"], ["", "@", "overrides", "\n", "def", "__call__", "(", "self", ",", "# type: ignore", "\n", "predicted_clusters_list", ",", "\n", "metadata_list", ",", "\n", "pred_label_spans", "=", "None", ",", "\n", "gold_label_spans", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        predicted_clusters_list : ``List[List[Tuple[Tuple[Int, Int], Tuple[Int, Int], ...]]]``\n\n            [((start11, end11), (start12, end12), (start13, end13), ),\n             ((start21, end21), (start22, end22), ),\n            ]\n        \"\"\"", "\n", "for", "i", ",", "metadata", "in", "enumerate", "(", "metadata_list", ")", ":", "\n", "            ", "predicted_clusters", "=", "predicted_clusters_list", "[", "i", "]", "\n", "mention_to_predicted", "=", "clusters_to_mention_to_predicted", "(", "predicted_clusters", ")", "\n", "gold_clusters", ",", "mention_to_gold", "=", "self", ".", "get_gold_clusters", "(", "metadata", "[", "\"clusters\"", "]", ")", "\n", "\n", "if", "self", ".", "_mapping_type", ":", "\n", "                ", "assert", "pred_label_spans", "is", "not", "None", "\n", "assert", "gold_label_spans", "is", "not", "None", "\n", "\n", "predicted_clusters", "=", "combine_cluster_with_label", "(", "pred_label_spans", "[", "i", "]", ",", "predicted_clusters", ")", "\n", "gold_clusters", "=", "combine_cluster_with_label", "(", "gold_label_spans", "[", "i", "]", ",", "gold_clusters", ")", "\n", "\n", "predicted_clusters", "=", "split_cluster_with_different_label", "(", "predicted_clusters", ")", "\n", "gold_clusters", "=", "split_cluster_with_different_label", "(", "gold_clusters", ")", "\n", "\n", "mention_to_predicted", "=", "clusters_to_mention_to_predicted", "(", "predicted_clusters", ")", "\n", "mention_to_gold", "=", "clusters_to_mention_to_predicted", "(", "gold_clusters", ")", "\n", "\n", "", "if", "DEBUG", ":", "\n", "                ", "output_mapping_conll", "(", "mention_to_predicted", "=", "mention_to_predicted", ",", "\n", "mention_to_gold", "=", "mention_to_gold", ",", "\n", "metadata", "=", "metadata", ")", "\n", "\n", "", "for", "scorer", "in", "self", ".", "scorers", ":", "\n", "                ", "scorer", ".", "update", "(", "predicted_clusters", ",", "gold_clusters", ",", "mention_to_predicted", ",", "mention_to_gold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.EventCorefScores.get_metric": [[191, 202], ["tuple", "event_coref_scores.EventCorefScores.reset", "e.get_precision", "e.get_recall", "e.get_f1", "print", "sum", "len", "scorer.get_f1", "metric"], "methods", ["home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.EventCorefScores.reset", "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.BLANCScorer.get_precision", "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.BLANCScorer.get_recall", "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.BLANCScorer.get_f1", "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.BLANCScorer.get_f1"], ["", "", "", "@", "overrides", "\n", "def", "get_metric", "(", "self", ",", "reset", ":", "bool", "=", "False", ")", "->", "Tuple", "[", "float", ",", "float", ",", "float", "]", ":", "\n", "        ", "metrics", "=", "(", "lambda", "e", ":", "e", ".", "get_precision", "(", ")", ",", "lambda", "e", ":", "e", ".", "get_recall", "(", ")", ",", "lambda", "e", ":", "e", ".", "get_f1", "(", ")", ")", "\n", "precision", ",", "recall", ",", "f1_score", "=", "tuple", "(", "sum", "(", "metric", "(", "e", ")", "for", "e", "in", "self", ".", "scorers", ")", "/", "len", "(", "self", ".", "scorers", ")", "\n", "for", "metric", "in", "metrics", ")", "\n", "if", "DEBUG", ":", "\n", "            ", "for", "scorer", "in", "self", ".", "scorers", ":", "\n", "                ", "print", "(", "scorer", ",", "scorer", ".", "get_f1", "(", ")", ")", "\n", "", "", "if", "reset", ":", "\n", "            ", "self", ".", "reset", "(", ")", "\n", "", "return", "precision", ",", "recall", ",", "f1_score", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.EventCorefScores.reset": [[203, 206], ["event_coref_scores.Scorer"], "methods", ["None"], ["", "@", "overrides", "\n", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "scorers", "=", "[", "Scorer", "(", "metric", ")", "for", "metric", "in", "(", "Scorer", ".", "muc", ",", "Scorer", ".", "b_cubed", ",", "Scorer", ".", "ceafe", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.EventCorefScores.get_gold_clusters": [[207, 215], ["tuple", "tuple"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_gold_clusters", "(", "gold_clusters", ")", ":", "\n", "        ", "gold_clusters", "=", "[", "tuple", "(", "tuple", "(", "m", ")", "for", "m", "in", "gc", ")", "for", "gc", "in", "gold_clusters", "]", "\n", "mention_to_gold", "=", "{", "}", "\n", "for", "gold_cluster", "in", "gold_clusters", ":", "\n", "            ", "for", "mention", "in", "gold_cluster", ":", "\n", "                ", "mention_to_gold", "[", "mention", "]", "=", "gold_cluster", "\n", "", "", "return", "gold_clusters", ",", "mention_to_gold", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.Scorer.__init__": [[223, 229], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "metric", ")", ":", "\n", "        ", "self", ".", "precision_numerator", "=", "0", "\n", "self", ".", "precision_denominator", "=", "0", "\n", "self", ".", "recall_numerator", "=", "0", "\n", "self", ".", "recall_denominator", "=", "0", "\n", "self", ".", "metric", "=", "metric", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.Scorer.__repr__": [[230, 232], ["str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ".", "metric", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.Scorer.update": [[233, 243], ["event_coref_scores.Scorer.metric", "event_coref_scores.Scorer.metric", "event_coref_scores.Scorer.metric"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "predicted", ",", "gold", ",", "mention_to_predicted", ",", "mention_to_gold", ")", ":", "\n", "        ", "if", "self", ".", "metric", "==", "self", ".", "ceafe", ":", "# pylint: disable=comparison-with-callable", "\n", "            ", "p_num", ",", "p_den", ",", "r_num", ",", "r_den", "=", "self", ".", "metric", "(", "predicted", ",", "gold", ")", "\n", "", "else", ":", "\n", "            ", "p_num", ",", "p_den", "=", "self", ".", "metric", "(", "predicted", ",", "mention_to_gold", ")", "\n", "r_num", ",", "r_den", "=", "self", ".", "metric", "(", "gold", ",", "mention_to_predicted", ")", "\n", "", "self", ".", "precision_numerator", "+=", "p_num", "\n", "self", ".", "precision_denominator", "+=", "p_den", "\n", "self", ".", "recall_numerator", "+=", "r_num", "\n", "self", ".", "recall_denominator", "+=", "r_den", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.Scorer.get_f1": [[244, 250], ["float", "float"], "methods", ["None"], ["", "def", "get_f1", "(", "self", ")", ":", "\n", "        ", "precision", "=", "0", "if", "self", ".", "precision_denominator", "==", "0", "else", "self", ".", "precision_numerator", "/", "float", "(", "self", ".", "precision_denominator", ")", "\n", "recall", "=", "0", "if", "self", ".", "recall_denominator", "==", "0", "else", "self", ".", "recall_numerator", "/", "float", "(", "self", ".", "recall_denominator", ")", "\n", "return", "0", "if", "precision", "+", "recall", "==", "0", "else", "2", "*", "precision", "*", "recall", "/", "(", "precision", "+", "recall", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.Scorer.get_recall": [[251, 256], ["float"], "methods", ["None"], ["", "def", "get_recall", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "recall_numerator", "==", "0", ":", "\n", "            ", "return", "0", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "recall_numerator", "/", "float", "(", "self", ".", "recall_denominator", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.Scorer.get_precision": [[257, 262], ["float"], "methods", ["None"], ["", "", "def", "get_precision", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "precision_numerator", "==", "0", ":", "\n", "            ", "return", "0", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "precision_numerator", "/", "float", "(", "self", ".", "precision_denominator", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.Scorer.get_prf": [[263, 265], ["event_coref_scores.Scorer.get_precision", "event_coref_scores.Scorer.get_recall", "event_coref_scores.Scorer.get_f1"], "methods", ["home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.BLANCScorer.get_precision", "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.BLANCScorer.get_recall", "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.BLANCScorer.get_f1"], ["", "", "def", "get_prf", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "get_precision", "(", ")", ",", "self", ".", "get_recall", "(", ")", ",", "self", ".", "get_f1", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.Scorer.b_cubed": [[266, 288], ["collections.Counter", "collections.Counter.items", "len", "float", "len", "tuple"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "b_cubed", "(", "clusters", ",", "mention_to_gold", ")", ":", "\n", "        ", "\"\"\"\n        Averaged per-mention precision and recall.\n        <https://pdfs.semanticscholar.org/cfe3/c24695f1c14b78a5b8e95bcbd1c666140fd1.pdf>\n        \"\"\"", "\n", "numerator", ",", "denominator", "=", "0", ",", "0", "\n", "for", "cluster", "in", "clusters", ":", "\n", "# TAC 2017 Event also evaluate cluster size is 1.", "\n", "# if len(cluster) == 1:", "\n", "#     continue", "\n", "            ", "gold_counts", "=", "Counter", "(", ")", "\n", "correct", "=", "0", "\n", "for", "mention", "in", "cluster", ":", "\n", "                ", "if", "mention", "in", "mention_to_gold", ":", "\n", "                    ", "gold_counts", "[", "tuple", "(", "mention_to_gold", "[", "mention", "]", ")", "]", "+=", "1", "\n", "", "", "for", "cluster2", ",", "count", "in", "gold_counts", ".", "items", "(", ")", ":", "\n", "# if len(cluster2) != 1:", "\n", "                ", "correct", "+=", "count", "*", "count", "\n", "", "numerator", "+=", "correct", "/", "float", "(", "len", "(", "cluster", ")", ")", "\n", "denominator", "+=", "len", "(", "cluster", ")", "\n", "", "return", "numerator", ",", "denominator", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.Scorer.muc": [[289, 308], ["len", "set", "len", "len", "set.add"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "muc", "(", "clusters", ",", "mention_to_gold", ")", ":", "\n", "        ", "\"\"\"\n        Counts the mentions in each predicted cluster which need to be re-allocated in\n        order for each predicted cluster to be contained by the respective gold cluster.\n        <https://aclweb.org/anthology/M/M95/M95-1005.pdf>\n        \"\"\"", "\n", "true_p", ",", "all_p", "=", "0", ",", "0", "\n", "for", "cluster", "in", "clusters", ":", "\n", "            ", "all_p", "+=", "len", "(", "cluster", ")", "-", "1", "\n", "true_p", "+=", "len", "(", "cluster", ")", "\n", "linked", "=", "set", "(", ")", "\n", "for", "mention", "in", "cluster", ":", "\n", "                ", "if", "mention", "in", "mention_to_gold", ":", "\n", "                    ", "linked", ".", "add", "(", "mention_to_gold", "[", "mention", "]", ")", "\n", "", "else", ":", "\n", "                    ", "true_p", "-=", "1", "\n", "", "", "true_p", "-=", "len", "(", "linked", ")", "\n", "", "return", "true_p", ",", "all_p", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.Scorer.phi4": [[309, 317], ["float", "len", "len", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "phi4", "(", "gold_clustering", ",", "predicted_clustering", ")", ":", "\n", "        ", "\"\"\"\n        Subroutine for ceafe. Computes the mention F measure between gold and\n        predicted mentions in a cluster.\n        \"\"\"", "\n", "return", "2", "*", "len", "(", "[", "mention", "for", "mention", "in", "gold_clustering", "if", "mention", "in", "predicted_clustering", "]", ")", "/", "float", "(", "len", "(", "gold_clustering", ")", "+", "len", "(", "predicted_clustering", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.Scorer.ceafe": [[318, 336], ["numpy.zeros", "enumerate", "scipy.optimize.linear_sum_assignment", "sum", "enumerate", "len", "len", "len", "len", "event_coref_scores.Scorer.phi4"], "methods", ["home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.Scorer.phi4"], ["", "@", "staticmethod", "\n", "def", "ceafe", "(", "clusters", ",", "gold_clusters", ")", ":", "\n", "        ", "\"\"\"\n        Computes the  Constrained EntityAlignment F-Measure (CEAF) for evaluating coreference.\n        Gold and predicted mentions are aligned into clusterings which maximise a metric - in\n        this case, the F measure between gold and predicted clusters.\n\n        <https://www.semanticscholar.org/paper/On-Coreference-Resolution-Performance-Metrics-Luo/de133c1f22d0dfe12539e25dda70f28672459b99>\n        \"\"\"", "\n", "# TAC 2017 Event also evaluate cluster size is 1.", "\n", "# clusters = [cluster for cluster in clusters if len(cluster) != 1]", "\n", "scores", "=", "np", ".", "zeros", "(", "(", "len", "(", "gold_clusters", ")", ",", "len", "(", "clusters", ")", ")", ")", "\n", "for", "i", ",", "gold_cluster", "in", "enumerate", "(", "gold_clusters", ")", ":", "\n", "            ", "for", "j", ",", "cluster", "in", "enumerate", "(", "clusters", ")", ":", "\n", "                ", "scores", "[", "i", ",", "j", "]", "=", "Scorer", ".", "phi4", "(", "gold_cluster", ",", "cluster", ")", "\n", "", "", "row", ",", "col", "=", "linear_sum_assignment", "(", "-", "scores", ")", "\n", "similarity", "=", "sum", "(", "scores", "[", "row", ",", "col", "]", ")", "\n", "return", "similarity", ",", "len", "(", "clusters", ")", ",", "similarity", ",", "len", "(", "gold_clusters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.BLANCScorer.__init__": [[340, 349], ["event_coref_scores.Scorer.__init__"], "methods", ["home.repos.pwc.inspect_result.luyaojie_E3C.scripts.convert_predict_to_tbf.Document.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "metric", "=", "BLANCScorer", ".", "blanc", ")", "\n", "self", ".", "coreference_numerator", "=", "0", "\n", "self", ".", "coreference_precision_denominator", "=", "0", "\n", "self", ".", "coreference_recall_denominator", "=", "0", "\n", "\n", "self", ".", "non_coreference_numerator", "=", "0", "\n", "self", ".", "non_coreference_precision_denominator", "=", "0", "\n", "self", ".", "non_coreference_recall_denominator", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.BLANCScorer.update": [[350, 360], ["event_coref_scores.BLANCScorer.blanc"], "methods", ["home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.BLANCScorer.blanc"], ["", "@", "overrides", "\n", "def", "update", "(", "self", ",", "predicted", ",", "gold", ",", "mention_to_predicted", ",", "mention_to_gold", ")", ":", "\n", "        ", "cn", ",", "cpd", ",", "crd", ",", "ncn", ",", "ncpd", ",", "ncrd", "=", "self", ".", "blanc", "(", "predicted", ",", "gold", ")", "\n", "self", ".", "coreference_numerator", "+=", "cn", "\n", "self", ".", "coreference_precision_denominator", "+=", "cpd", "\n", "self", ".", "coreference_recall_denominator", "+=", "crd", "\n", "\n", "self", ".", "non_coreference_numerator", "+=", "ncn", "\n", "self", ".", "non_coreference_precision_denominator", "+=", "ncpd", "\n", "self", ".", "non_coreference_recall_denominator", "+=", "ncrd", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.BLANCScorer.compute_p_r": [[361, 375], ["float", "float"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "compute_p_r", "(", "non_coreference_numerator", ",", "non_coreference_denominator", ",", "\n", "coreference_numerator", ",", "coreference_denominator", ")", ":", "\n", "        ", "if", "non_coreference_numerator", "==", "0", ":", "\n", "            ", "non_coref_recall", "=", "0", "\n", "", "else", ":", "\n", "            ", "non_coref_recall", "=", "non_coreference_numerator", "/", "float", "(", "non_coreference_denominator", ")", "\n", "\n", "", "if", "coreference_numerator", "==", "0", ":", "\n", "            ", "coref_recall", "=", "0", "\n", "", "else", ":", "\n", "            ", "coref_recall", "=", "coreference_numerator", "/", "float", "(", "coreference_denominator", ")", "\n", "\n", "", "return", "(", "non_coref_recall", "+", "coref_recall", ")", "/", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.BLANCScorer.get_recall": [[376, 382], ["event_coref_scores.BLANCScorer.compute_p_r"], "methods", ["home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.BLANCScorer.compute_p_r"], ["", "@", "overrides", "\n", "def", "get_recall", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "compute_p_r", "(", "self", ".", "non_coreference_numerator", ",", "\n", "self", ".", "non_coreference_recall_denominator", ",", "\n", "self", ".", "coreference_numerator", ",", "\n", "self", ".", "coreference_recall_denominator", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.BLANCScorer.get_precision": [[383, 389], ["event_coref_scores.BLANCScorer.compute_p_r"], "methods", ["home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.BLANCScorer.compute_p_r"], ["", "@", "overrides", "\n", "def", "get_precision", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "compute_p_r", "(", "self", ".", "non_coreference_numerator", ",", "\n", "self", ".", "non_coreference_precision_denominator", ",", "\n", "self", ".", "coreference_numerator", ",", "\n", "self", ".", "coreference_precision_denominator", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.BLANCScorer.get_f1": [[390, 395], ["event_coref_scores.BLANCScorer.get_precision", "event_coref_scores.BLANCScorer.get_recall"], "methods", ["home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.BLANCScorer.get_precision", "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.BLANCScorer.get_recall"], ["", "@", "overrides", "\n", "def", "get_f1", "(", "self", ")", ":", "\n", "        ", "precision", "=", "self", ".", "get_precision", "(", ")", "\n", "recall", "=", "self", ".", "get_recall", "(", ")", "\n", "return", "0", "if", "precision", "+", "recall", "==", "0", "else", "2", "*", "precision", "*", "recall", "/", "(", "precision", "+", "recall", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.BLANCScorer.get_conference_set": [[396, 428], ["set", "set", "set", "len", "set.add", "set.add", "set.add", "min", "max", "set.add", "min", "max"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_conference_set", "(", "clusters", ")", ":", "\n", "        ", "mention_set", "=", "set", "(", ")", "\n", "coreference_link_set", "=", "set", "(", ")", "\n", "non_coreference_link_set", "=", "set", "(", ")", "\n", "\n", "for", "cluster", "in", "clusters", ":", "\n", "            ", "if", "len", "(", "cluster", ")", "==", "1", ":", "\n", "# Same Mention Skip", "\n", "# coreference_link_set.add((cluster[0], cluster[0]))", "\n", "                ", "mention_set", ".", "add", "(", "cluster", "[", "0", "]", ")", "\n", "\n", "", "for", "mention1", "in", "cluster", ":", "\n", "                ", "mention_set", ".", "add", "(", "mention1", ")", "\n", "for", "mention2", "in", "cluster", ":", "\n", "# Same Mention Skip", "\n", "                    ", "if", "mention1", "==", "mention2", ":", "\n", "                        ", "continue", "\n", "", "mention_pair", "=", "(", "min", "(", "mention1", ",", "mention2", ")", ",", "max", "(", "mention1", ",", "mention2", ")", ")", "\n", "coreference_link_set", ".", "add", "(", "mention_pair", ")", "\n", "\n", "", "", "", "for", "mention1", "in", "mention_set", ":", "\n", "            ", "for", "mention2", "in", "mention_set", ":", "\n", "\n", "# Same Mention Skip", "\n", "                ", "if", "mention1", "==", "mention2", ":", "\n", "                    ", "continue", "\n", "\n", "", "mention_pair", "=", "(", "min", "(", "mention1", ",", "mention2", ")", ",", "max", "(", "mention1", ",", "mention2", ")", ")", "\n", "if", "mention_pair", "not", "in", "coreference_link_set", ":", "\n", "                    ", "non_coreference_link_set", ".", "add", "(", "mention_pair", ")", "\n", "", "", "", "return", "coreference_link_set", ",", "non_coreference_link_set", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.BLANCScorer.blanc": [[429, 453], ["event_coref_scores.BLANCScorer.get_conference_set", "event_coref_scores.BLANCScorer.get_conference_set", "len", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.BLANCScorer.get_conference_set", "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.BLANCScorer.get_conference_set"], ["", "@", "staticmethod", "\n", "def", "blanc", "(", "predicted", ",", "gold", ")", ":", "\n", "        ", "\"\"\"\n        BLANC: Implementing the Rand Index for coreference evaluation.\n        Let C_k and C_r be the set of coreference links in the key and response respectively,\n        and N_k and N_r be the set of non-coreference links in the key and response respectively.\n        The coreference F-measure, R_c = |C_k \\cap C_r| / |C_k|, P_c = |C_k \\cap C_r| / |C_r|\n        The non-coreference F-measure, R_n = |N_k \\cap N_r| / |N_k|, P_c = |N_k \\cap N_r| / |N_r|\n        The final-coreference F-measure, F = (F_c + F_n) / 2\n\n        <https://pdfs.semanticscholar.org/c37d/0caf05d586a242faf8394e6f7684d0479ba2.pdf>\n        \"\"\"", "\n", "pred_coref_link_set", ",", "pred_non_coref_link_set", "=", "BLANCScorer", ".", "get_conference_set", "(", "predicted", ")", "\n", "gold_coref_link_set", ",", "gold_non_coref_link_set", "=", "BLANCScorer", ".", "get_conference_set", "(", "gold", ")", "\n", "\n", "coreference_numerator", "=", "len", "(", "pred_coref_link_set", "&", "gold_coref_link_set", ")", "\n", "coreference_precision_denominator", "=", "len", "(", "pred_coref_link_set", ")", "\n", "coreference_recall_denominator", "=", "len", "(", "gold_coref_link_set", ")", "\n", "\n", "non_coreference_numerator", "=", "len", "(", "pred_non_coref_link_set", "&", "gold_non_coref_link_set", ")", "\n", "non_coreference_precision_denominator", "=", "len", "(", "pred_non_coref_link_set", ")", "\n", "non_coreference_recall_denominator", "=", "len", "(", "gold_non_coref_link_set", ")", "\n", "\n", "return", "coreference_numerator", ",", "coreference_precision_denominator", ",", "coreference_recall_denominator", ",", "non_coreference_numerator", ",", "non_coreference_precision_denominator", ",", "non_coreference_recall_denominator", "\n", "", "", ""]], "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.to_span_label_dict": [[21, 33], ["dict", "zip", "top_spans.tolist", "labels.tolist", "tuple"], "function", ["None"], ["", "def", "to_span_label_dict", "(", "top_spans", ",", "labels", ")", ":", "\n", "    ", "\"\"\"\n\n    :param top_spans: ``torch.Tensor`` (Top Span, 2)\n    :param labels: ``torch.Tensor`` (Top Span, 1)\n    :return:\n        (start, end) -> label\n    \"\"\"", "\n", "span_label_dict", "=", "dict", "(", ")", "\n", "for", "span", ",", "label", "in", "zip", "(", "top_spans", ".", "tolist", "(", ")", ",", "labels", ".", "tolist", "(", ")", ")", ":", "\n", "        ", "span_label_dict", "[", "tuple", "(", "span", ")", "]", "=", "label", "\n", "", "return", "span_label_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.get_mention_to_cluster_id_dict": [[35, 46], ["dict", "mention_to_clusters.values", "dict", "len"], "function", ["None"], ["", "def", "get_mention_to_cluster_id_dict", "(", "mention_to_clusters", ")", ":", "\n", "    ", "cluster_id_dict", "=", "dict", "(", ")", "\n", "for", "cluster", "in", "mention_to_clusters", ".", "values", "(", ")", ":", "\n", "        ", "if", "cluster", "not", "in", "cluster_id_dict", ":", "\n", "            ", "cluster_id_dict", "[", "cluster", "]", "=", "len", "(", "cluster_id_dict", ")", "\n", "\n", "", "", "mention_to_cluster_id_dict", "=", "dict", "(", ")", "\n", "for", "mention", "in", "mention_to_clusters", ":", "\n", "        ", "mention_to_cluster_id_dict", "[", "mention", "]", "=", "cluster_id_dict", "[", "mention_to_clusters", "[", "mention", "]", "]", "\n", "\n", "", "return", "mention_to_cluster_id_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.to_conll": [[48, 64], ["list", "enumerate"], "function", ["None"], ["", "def", "to_conll", "(", "mentions_clusters_list", ",", "tokens", ",", "doc_id", ")", ":", "\n", "    ", "output", "=", "list", "(", ")", "\n", "output", "+=", "[", "\"#begin document (%s); part 000\"", "%", "doc_id", "]", "\n", "for", "mention_index", ",", "(", "mention", ",", "cluster_id", ")", "in", "enumerate", "(", "mentions_clusters_list", ")", ":", "\n", "        ", "if", "mention", "is", "None", ":", "\n", "            ", "output", "+=", "[", "\"%s\\t%s\\t%s\\t(%s)\"", "%", "(", "doc_id", ",", "\n", "mention_index", ",", "\n", "\"None\"", ",", "\n", "'-'", ")", "]", "\n", "", "else", ":", "\n", "            ", "output", "+=", "[", "\"%s\\t%s\\t%s\\t(%s)\"", "%", "(", "doc_id", ",", "\n", "mention_index", ",", "\n", "\"_\"", ".", "join", "(", "tokens", "[", "mention", "[", "0", "]", ":", "mention", "[", "1", "]", "+", "1", "]", ")", ",", "\n", "cluster_id", ")", "]", "\n", "", "", "output", "+=", "[", "\"#end document\"", "]", "\n", "return", "'\\n'", ".", "join", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.mapping_predict_golden": [[66, 83], ["mention_to_gold.keys"], "function", ["None"], ["", "def", "mapping_predict_golden", "(", "mention_to_gold", ",", "mention_to_pred", ")", ":", "\n", "    ", "mention_to_gold_list", "=", "[", "(", "key", ",", "mention_to_gold", "[", "key", "]", ")", "for", "key", "in", "mention_to_gold", ".", "keys", "(", ")", "]", "\n", "mention_to_pred_list", "=", "[", "]", "\n", "for", "gm", "in", "mention_to_gold", ":", "\n", "        ", "if", "gm", "not", "in", "mention_to_pred", ":", "\n", "            ", "mention_to_gold_list", "+=", "[", "(", "None", ",", "'-'", ")", "]", "\n", "\n", "", "", "for", "gm", ",", "_", "in", "mention_to_gold_list", ":", "\n", "        ", "if", "gm", "in", "mention_to_pred", ":", "\n", "            ", "mention_to_pred_list", "+=", "[", "(", "gm", ",", "mention_to_pred", "[", "gm", "]", ")", "]", "\n", "", "else", ":", "\n", "            ", "mention_to_pred_list", "+=", "[", "(", "None", ",", "'-'", ")", "]", "\n", "\n", "", "", "for", "pm", "in", "mention_to_pred", ":", "\n", "        ", "if", "pm", "not", "in", "mention_to_gold", ":", "\n", "            ", "mention_to_pred_list", "+=", "[", "(", "pm", ",", "mention_to_pred", "[", "pm", "]", ")", "]", "\n", "", "", "return", "mention_to_gold_list", ",", "mention_to_pred_list", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.output_mapping_conll": [[85, 101], ["get_ordered_dict", "get_ordered_dict", "document_span_output.write", "event_coref_scores.mapping_predict_golden", "event_coref_scores.to_conll", "event_coref_scores.to_conll", "pred_output.write", "gold_output.write", "collections.OrderedDict", "event_coref_scores.get_mention_to_cluster_id_dict", "event_coref_scores.get_mention_to_cluster_id_dict", "len", "sorted", "x.keys"], "function", ["home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.mapping_predict_golden", "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.to_conll", "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.to_conll", "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.get_mention_to_cluster_id_dict", "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.get_mention_to_cluster_id_dict"], ["", "def", "output_mapping_conll", "(", "mention_to_gold", ",", "mention_to_predicted", ",", "metadata", ")", ":", "\n", "    ", "get_ordered_dict", "=", "lambda", "x", ":", "OrderedDict", "(", "{", "key", ":", "x", "[", "key", "]", "for", "key", "in", "sorted", "(", "x", ".", "keys", "(", ")", ")", "}", ")", "\n", "mention_to_gold", "=", "get_ordered_dict", "(", "mention_to_gold", ")", "\n", "mention_to_predicted", "=", "get_ordered_dict", "(", "mention_to_predicted", ")", "\n", "\n", "document_span_output", ".", "write", "(", "'%s\\t%s\\n'", "%", "(", "metadata", "[", "'doc_id'", "]", ",", "len", "(", "mention_to_predicted", ")", ")", ")", "\n", "result", "=", "mapping_predict_golden", "(", "get_mention_to_cluster_id_dict", "(", "mention_to_gold", ")", ",", "\n", "get_mention_to_cluster_id_dict", "(", "mention_to_predicted", ")", ")", "\n", "mention_to_gold_list", ",", "mention_to_pred_list", "=", "result", "\n", "\n", "predict_list", "=", "to_conll", "(", "mention_to_pred_list", ",", "metadata", "[", "'original_text'", "]", ",", "\n", "metadata", "[", "'doc_id'", "]", ")", "\n", "golden_list", "=", "to_conll", "(", "mention_to_gold_list", ",", "metadata", "[", "'original_text'", "]", ",", "\n", "metadata", "[", "'doc_id'", "]", ")", "\n", "pred_output", ".", "write", "(", "predict_list", "+", "'\\n'", ")", "\n", "gold_output", ".", "write", "(", "golden_list", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.clusters_to_mention_to_predicted": [[103, 109], ["dict"], "function", ["None"], ["", "def", "clusters_to_mention_to_predicted", "(", "clusters", ")", ":", "\n", "    ", "mention_to_predicted", "=", "dict", "(", ")", "\n", "for", "cluster", "in", "clusters", ":", "\n", "        ", "for", "mention", "in", "cluster", ":", "\n", "            ", "mention_to_predicted", "[", "mention", "]", "=", "cluster", "\n", "", "", "return", "mention_to_predicted", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.span_label_list_to_dict": [[111, 116], ["dict"], "function", ["None"], ["", "def", "span_label_list_to_dict", "(", "span_list", ")", ":", "\n", "    ", "span_dict", "=", "dict", "(", ")", "\n", "for", "span", "in", "span_list", ":", "\n", "        ", "span_dict", "[", "(", "span", "[", "0", "]", ",", "span", "[", "1", "]", ")", "]", "=", "span", "[", "2", "]", "\n", "", "return", "span_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.combine_cluster_with_label": [[118, 128], ["list", "event_coref_scores.span_label_list_to_dict", "list", "tuple", "len"], "function", ["home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.span_label_list_to_dict"], ["", "def", "combine_cluster_with_label", "(", "span_list", ",", "clusters", ")", ":", "\n", "    ", "new_clusters", "=", "list", "(", ")", "\n", "predicted_dict", "=", "span_label_list_to_dict", "(", "span_list", ")", "\n", "for", "cluster", "in", "clusters", ":", "\n", "        ", "new_cluster", "=", "list", "(", ")", "\n", "for", "mention", "in", "cluster", ":", "\n", "            ", "assert", "len", "(", "mention", ")", "==", "2", "\n", "new_cluster", "+=", "[", "(", "mention", "[", "0", "]", ",", "mention", "[", "1", "]", ",", "predicted_dict", "[", "(", "mention", "[", "0", "]", ",", "mention", "[", "1", "]", ")", "]", ")", "]", "\n", "", "new_clusters", "+=", "[", "tuple", "(", "new_cluster", ")", "]", "\n", "", "return", "new_clusters", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.metrics.event_coref_scores.split_cluster_with_different_label": [[130, 140], ["list", "collections.defaultdict", "collections.defaultdict.items", "len", "tuple"], "function", ["None"], ["", "def", "split_cluster_with_different_label", "(", "clusters", ")", ":", "\n", "    ", "new_clusters", "=", "list", "(", ")", "\n", "for", "cluster", "in", "clusters", ":", "\n", "        ", "new_label_cluster", "=", "defaultdict", "(", "list", ")", "\n", "for", "mention", "in", "cluster", ":", "\n", "            ", "assert", "len", "(", "mention", ")", "==", "3", "\n", "new_label_cluster", "[", "mention", "[", "2", "]", "]", "+=", "[", "mention", "]", "\n", "", "for", "label", ",", "new_cluster", "in", "new_label_cluster", ".", "items", "(", ")", ":", "\n", "            ", "new_clusters", "+=", "[", "tuple", "(", "new_cluster", ")", "]", "\n", "", "", "return", "new_clusters", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.scripts.summary_result.get_conll_scores": [[21, 54], ["os.path.exists", "open", "line.strip.strip", "line.strip.startswith", "isinstance", "float", "line.strip.replace().replace().strip", "line.strip.startswith", "line.strip.split", "line.strip.startswith", "line.strip.replace().replace", "line.strip.endswith", "line.strip.startswith", "line.strip.split", "line.strip.startswith", "line.strip.replace", "line.strip.split", "line.strip.split", "line.strip.split", "line.strip.startswith", "line.strip.split", "line.strip.split", "line.strip.split", "print"], "function", ["None"], ["def", "get_conll_scores", "(", "filename", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "filename", ")", ":", "\n", "        ", "return", "{", "}", "\n", "", "scores_by_metric", "=", "{", "}", "\n", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", ".", "startswith", "(", "\"==>\"", ")", ":", "\n", "                ", "filename", "=", "line", ".", "replace", "(", "'==>'", ",", "''", ")", ".", "replace", "(", "'<=='", ",", "''", ")", ".", "strip", "(", ")", "\n", "scores_by_metric", "[", "'filename'", "]", "=", "filename", "\n", "", "elif", "line", ".", "startswith", "(", "\"Metric\"", ")", "and", "not", "line", ".", "endswith", "(", "'*'", ")", ":", "\n", "                ", "att", "=", "line", ".", "split", "(", ")", "\n", "name", "=", "att", "[", "2", "]", "\n", "f1", "=", "att", "[", "-", "1", "]", "\n", "scores_by_metric", "[", "name", "]", "=", "f1", "\n", "", "elif", "line", ".", "startswith", "(", "'Overall Average CoNLL score'", ")", ":", "\n", "                ", "name", "=", "\"AVG-F\"", "\n", "f1", "=", "line", ".", "split", "(", ")", "[", "-", "1", "]", "\n", "scores_by_metric", "[", "name", "]", "=", "f1", "\n", "", "elif", "line", ".", "startswith", "(", "'mention_type\\t'", ")", ":", "\n", "                ", "scores_by_metric", "[", "'mention_type'", "]", "=", "line", ".", "split", "(", ")", "[", "3", "]", "\n", "scores_by_metric", "[", "'mention_type_r'", "]", "=", "line", ".", "split", "(", ")", "[", "2", "]", "\n", "scores_by_metric", "[", "'mention_type_p'", "]", "=", "line", ".", "split", "(", ")", "[", "1", "]", "\n", "", "elif", "line", ".", "startswith", "(", "'plain\\t'", ")", ":", "\n", "                ", "scores_by_metric", "[", "'plain'", "]", "=", "line", ".", "split", "(", ")", "[", "3", "]", "\n", "scores_by_metric", "[", "'plain_r'", "]", "=", "line", ".", "split", "(", ")", "[", "2", "]", "\n", "scores_by_metric", "[", "'plain_p'", "]", "=", "line", ".", "split", "(", ")", "[", "1", "]", "\n", "", "elif", "line", ".", "startswith", "(", "'[WARNING]'", ")", ":", "\n", "                ", "print", "(", "line", ")", "\n", "", "", "", "for", "key", "in", "scores_by_metric", ":", "\n", "        ", "if", "not", "isinstance", "(", "scores_by_metric", "[", "key", "]", ",", "float", ")", ":", "\n", "            ", "scores_by_metric", "[", "key", "]", "=", "float", "(", "scores_by_metric", "[", "key", "]", ")", "\n", "", "", "return", "scores_by_metric", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.scripts.summary_result.overall_run_result": [[56, 72], ["collections.defaultdict", "dict", "dict", "numpy.array().mean", "numpy.array().max", "re.subn", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "overall_run_result", "(", "final_result_summary", ")", ":", "\n", "    ", "result_dict", "=", "defaultdict", "(", "list", ")", "\n", "mean_result_dict", "=", "dict", "(", ")", "\n", "max_result_dict", "=", "dict", "(", ")", "\n", "\n", "for", "result", "in", "final_result_summary", ":", "\n", "        ", "name", "=", "re", ".", "subn", "(", "r\"_run\\d+\"", ",", "\"\"", ",", "result", "[", "0", "]", ")", "[", "0", "]", "\n", "result_dict", "[", "name", "]", "+=", "[", "result", "[", "1", ":", "]", "]", "\n", "\n", "", "for", "name", "in", "result_dict", ":", "\n", "# run_time = '-%d-Run' % len(result_dict[name])", "\n", "        ", "run_time", "=", "''", "\n", "mean_result_dict", "[", "name", "+", "run_time", "]", "=", "np", ".", "array", "(", "result_dict", "[", "name", "]", ")", ".", "mean", "(", "0", ")", "\n", "max_result_dict", "[", "name", "+", "run_time", "]", "=", "np", ".", "array", "(", "result_dict", "[", "name", "]", ")", ".", "max", "(", "0", ")", "\n", "\n", "", "return", "{", "'mean'", ":", "mean_result_dict", ",", "'max'", ":", "max_result_dict", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.scripts.summary_result.dict_to_table": [[74, 80], ["list", "overall_result.items", "value.tolist"], "function", ["None"], ["", "def", "dict_to_table", "(", "overall_result", ")", ":", "\n", "    ", "data_table", "=", "list", "(", ")", "\n", "for", "name", ",", "value", "in", "overall_result", ".", "items", "(", ")", ":", "\n", "        ", "row", "=", "[", "name", "]", "+", "value", ".", "tolist", "(", ")", "\n", "data_table", "+=", "[", "row", "]", "\n", "", "return", "data_table", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.scripts.summary_result.main": [[82, 128], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.parse_args", "collections.defaultdict", "list", "print", "print", "collections.OrderedDict", "tabulate.tabulate", "summary_result.overall_run_result", "summary_result.get_conll_scores", "summary_result.dict_to_table", "print", "print", "summary_result.dict_to_table", "print", "print", "os.path.exists", "get_conll_scores.get", "result[].get", "result[].get", "numpy.mean", "numpy.mean", "numpy.max", "numpy.max", "tabulate.tabulate", "tabulate.tabulate"], "function", ["home.repos.pwc.inspect_result.luyaojie_E3C.scripts.summary_result.overall_run_result", "home.repos.pwc.inspect_result.luyaojie_E3C.scripts.conll_coref_score_stream.get_conll_scores", "home.repos.pwc.inspect_result.luyaojie_E3C.scripts.summary_result.dict_to_table", "home.repos.pwc.inspect_result.luyaojie_E3C.scripts.summary_result.dict_to_table"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-m'", ",", "nargs", "=", "'+'", ",", "required", "=", "True", ",", "dest", "=", "'model_list'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'-f'", ",", "dest", "=", "'table_format'", ",", "default", "=", "'grid'", ")", "\n", "parser", ".", "add_argument", "(", "'-mean'", ",", "dest", "=", "'mean'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'-max'", ",", "dest", "=", "'max'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "set_defaults", "(", "ace", "=", "True", ")", "\n", "option", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "final_result_summary", "=", "defaultdict", "(", "list", ")", "\n", "data_table", "=", "list", "(", ")", "\n", "header", "=", "[", "'model_path'", "]", "\n", "for", "fn", "in", "expected_file_list", ":", "\n", "        ", "header", "+=", "[", "fn", "+", "'Type-F'", ",", "fn", "+", "'AVG-'", "]", "\n", "\n", "", "for", "model_folder", "in", "option", ".", "model_list", ":", "\n", "        ", "print", "(", "model_folder", ")", "\n", "result", "=", "OrderedDict", "(", ")", "\n", "for", "filename_suffix", "in", "expected_file_list", ":", "\n", "            ", "filename", "=", "model_folder", "+", "os", ".", "sep", "+", "filename_suffix", "+", "'eval.result'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "filename", ")", ":", "\n", "                ", "filename", "=", "model_folder", "+", "os", ".", "sep", "+", "filename_suffix", "+", "'-eval.result'", "\n", "", "scores", "=", "get_conll_scores", "(", "filename", ")", "\n", "result", "[", "filename_suffix", "]", "=", "scores", "\n", "final_result_summary", "[", "filename_suffix", "]", "+=", "[", "scores", ".", "get", "(", "'AVG-F'", ",", "0.", ")", "]", "\n", "", "row", "=", "[", "model_folder", "]", "\n", "for", "fn", "in", "result", ":", "\n", "            ", "row", "+=", "[", "result", "[", "fn", "]", ".", "get", "(", "'mention_type'", ",", "0.", ")", ",", "result", "[", "fn", "]", ".", "get", "(", "'AVG-F'", ",", "0.", ")", "]", "\n", "", "data_table", "+=", "[", "row", "]", "\n", "\n", "", "mean_row", "=", "[", "'mean'", "]", "+", "[", "\"%.2f\"", "%", "numpy", ".", "mean", "(", "final_result_summary", "[", "fn", "]", ")", "for", "fn", "in", "expected_file_list", "]", "\n", "max_row", "=", "[", "'max'", "]", "+", "[", "\"%.2f\"", "%", "numpy", ".", "max", "(", "final_result_summary", "[", "fn", "]", ")", "for", "fn", "in", "expected_file_list", "]", "\n", "print", "(", "tabulate", "(", "data_table", "+", "[", "mean_row", "]", "+", "[", "max_row", "]", ",", "headers", "=", "header", ",", "tablefmt", "=", "option", ".", "table_format", ")", ")", "\n", "\n", "if", "option", ".", "mean", "or", "option", ".", "max", ":", "\n", "        ", "overall_result", "=", "overall_run_result", "(", "data_table", "[", "1", ":", "]", ")", "\n", "\n", "if", "option", ".", "mean", ":", "\n", "            ", "mean_data_table", "=", "dict_to_table", "(", "overall_result", "[", "'mean'", "]", ")", "\n", "print", "(", "'Mean over Run'", ")", "\n", "print", "(", "tabulate", "(", "mean_data_table", ",", "headers", "=", "header", ",", "tablefmt", "=", "option", ".", "table_format", ")", ")", "\n", "\n", "", "if", "option", ".", "max", ":", "\n", "            ", "mean_data_table", "=", "dict_to_table", "(", "overall_result", "[", "'max'", "]", ")", "\n", "print", "(", "'Max  over Run'", ")", "\n", "print", "(", "tabulate", "(", "mean_data_table", ",", "headers", "=", "header", ",", "tablefmt", "=", "option", ".", "table_format", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.scripts.convert_predict_to_tbf.Span.__init__": [[13, 17], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "top_indices", ",", "type_label", ",", "realis_label", ")", ":", "\n", "        ", "self", ".", "_top_indices", "=", "top_indices", "\n", "self", ".", "_type_label", "=", "type_label", "\n", "self", ".", "_realis_label", "=", "realis_label", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.scripts.convert_predict_to_tbf.Document.__init__": [[20, 31], ["doc_dict.get", "doc_dict.get", "convert_predict_to_tbf.Document.init_span_index_dict", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.luyaojie_E3C.scripts.convert_predict_to_tbf.Document.init_span_index_dict"], ["    ", "def", "__init__", "(", "self", ",", "doc_dict", ":", "JsonDict", ",", "system", "=", "'System'", ")", ":", "\n", "        ", "self", ".", "_offset_list", "=", "doc_dict", "[", "'offset'", "]", "\n", "self", ".", "_top_spans", "=", "doc_dict", "[", "'top_spans'", "]", "\n", "self", ".", "_top_type_list", "=", "doc_dict", "[", "'top_type_labels'", "]", "\n", "self", ".", "_top_realis_list", "=", "doc_dict", ".", "get", "(", "'top_realis_labels'", ",", "[", "'Actual'", "]", "*", "len", "(", "doc_dict", "[", "'top_type_labels'", "]", ")", ")", "\n", "self", ".", "_doc_id", "=", "doc_dict", "[", "'doc_id'", "]", "\n", "self", ".", "_clusters", "=", "doc_dict", ".", "get", "(", "'clusters'", ",", "[", "]", ")", "\n", "self", ".", "_token_list", "=", "doc_dict", "[", "'document'", "]", "\n", "self", ".", "_span_index_dict", "=", "self", ".", "init_span_index_dict", "(", "doc_dict", ")", "\n", "self", ".", "_system", "=", "system", "\n", "assert", "len", "(", "self", ".", "_token_list", ")", "==", "len", "(", "self", ".", "_offset_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.scripts.convert_predict_to_tbf.Document.init_span_index_dict": [[32, 37], ["dict", "len", "convert_predict_to_tbf.Document.get_span_offset"], "methods", ["home.repos.pwc.inspect_result.luyaojie_E3C.scripts.convert_predict_to_tbf.Document.get_span_offset"], ["", "def", "init_span_index_dict", "(", "self", ",", "doc_dict", ":", "JsonDict", ")", ":", "\n", "        ", "_span_index_dict", "=", "dict", "(", ")", "\n", "for", "_span", "in", "doc_dict", "[", "'top_spans'", "]", ":", "\n", "            ", "_span_index_dict", "[", "self", ".", "get_span_offset", "(", "_span", ")", "]", "=", "len", "(", "_span_index_dict", ")", "\n", "", "return", "_span_index_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.scripts.convert_predict_to_tbf.Document.get_span_offset": [[38, 40], ["None"], "methods", ["None"], ["", "def", "get_span_offset", "(", "self", ",", "span", ")", ":", "\n", "        ", "return", "\"%s,%s\"", "%", "(", "self", ".", "_offset_list", "[", "span", "[", "0", "]", "]", "[", "0", "]", ",", "self", ".", "_offset_list", "[", "span", "[", "-", "1", "]", "]", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.scripts.convert_predict_to_tbf.Document.get_span_type": [[41, 43], ["convert_predict_to_tbf.Document.get_span_offset"], "methods", ["home.repos.pwc.inspect_result.luyaojie_E3C.scripts.convert_predict_to_tbf.Document.get_span_offset"], ["", "def", "get_span_type", "(", "self", ",", "span", ")", ":", "\n", "        ", "return", "\"%s\"", "%", "self", ".", "_top_type_list", "[", "self", ".", "_span_index_dict", "[", "self", ".", "get_span_offset", "(", "span", ")", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.scripts.convert_predict_to_tbf.Document.get_span_realis": [[44, 46], ["convert_predict_to_tbf.Document.get_span_offset"], "methods", ["home.repos.pwc.inspect_result.luyaojie_E3C.scripts.convert_predict_to_tbf.Document.get_span_offset"], ["", "def", "get_span_realis", "(", "self", ",", "span", ")", ":", "\n", "        ", "return", "\"%s\"", "%", "self", ".", "_top_realis_list", "[", "self", ".", "_span_index_dict", "[", "self", ".", "get_span_offset", "(", "span", ")", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.scripts.convert_predict_to_tbf.Document.get_span_str": [[47, 49], ["None"], "methods", ["None"], ["", "def", "get_span_str", "(", "self", ",", "span", ")", ":", "\n", "        ", "return", "' '", ".", "join", "(", "self", ".", "_token_list", "[", "span", "[", "0", "]", ":", "span", "[", "-", "1", "]", "+", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.scripts.convert_predict_to_tbf.Document.iter_span": [[50, 53], ["None"], "methods", ["None"], ["", "def", "iter_span", "(", "self", ")", ":", "\n", "        ", "for", "span", "in", "self", ".", "_top_spans", ":", "\n", "            ", "yield", "span", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.scripts.convert_predict_to_tbf.Document.iter_cluster": [[54, 57], ["None"], "methods", ["None"], ["", "", "def", "iter_cluster", "(", "self", ")", ":", "\n", "        ", "for", "cluster", "in", "self", ".", "_clusters", ":", "\n", "            ", "yield", "cluster", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.scripts.convert_predict_to_tbf.Document.convert_span": [[58, 70], ["convert_predict_to_tbf.Document.get_span_offset", "convert_predict_to_tbf.Document.get_span_str", "convert_predict_to_tbf.Document.get_span_type", "convert_predict_to_tbf.Document.get_span_realis"], "methods", ["home.repos.pwc.inspect_result.luyaojie_E3C.scripts.convert_predict_to_tbf.Document.get_span_offset", "home.repos.pwc.inspect_result.luyaojie_E3C.scripts.convert_predict_to_tbf.Document.get_span_str", "home.repos.pwc.inspect_result.luyaojie_E3C.scripts.convert_predict_to_tbf.Document.get_span_type", "home.repos.pwc.inspect_result.luyaojie_E3C.scripts.convert_predict_to_tbf.Document.get_span_realis"], ["", "", "def", "convert_span", "(", "self", ",", "span", ")", ":", "\n", "        ", "offset", "=", "self", ".", "get_span_offset", "(", "span", ")", "\n", "token_str", "=", "self", ".", "get_span_str", "(", "span", ")", "\n", "span_type", "=", "self", ".", "get_span_type", "(", "span", ")", "\n", "span_realis", "=", "self", ".", "get_span_realis", "(", "span", ")", "\n", "return", "'\\t'", ".", "join", "(", "[", "self", ".", "_system", ",", "\n", "self", ".", "_doc_id", ",", "\n", "'E%s'", "%", "self", ".", "_span_index_dict", "[", "offset", "]", ",", "\n", "offset", ",", "\n", "token_str", ",", "\n", "span_type", ",", "\n", "\"Actual\"", "if", "span_realis", "in", "escape_set", "else", "span_realis", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.scripts.convert_predict_to_tbf.Document.convert_cluster": [[71, 75], ["convert_predict_to_tbf.Document.get_span_offset"], "methods", ["home.repos.pwc.inspect_result.luyaojie_E3C.scripts.convert_predict_to_tbf.Document.get_span_offset"], ["", "def", "convert_cluster", "(", "self", ",", "cluster", ",", "cluster_index", ")", ":", "\n", "        ", "return", "'\\t'", ".", "join", "(", "[", "'@Coreference'", ",", "\n", "'C%s'", "%", "cluster_index", ",", "\n", "','", ".", "join", "(", "[", "'E%s'", "%", "self", ".", "_span_index_dict", "[", "self", ".", "get_span_offset", "(", "span", ")", "]", "for", "span", "in", "cluster", "]", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.scripts.convert_predict_to_tbf.convert_json_to_tbf": [[77, 92], ["convert_predict_to_tbf.Document", "list", "convert_predict_to_tbf.Document.iter_span", "enumerate", "convert_predict_to_tbf.Document.iter_cluster", "convert_predict_to_tbf.Document.get_span_type", "convert_predict_to_tbf.Document.convert_span", "len", "convert_predict_to_tbf.Document.convert_cluster"], "function", ["home.repos.pwc.inspect_result.luyaojie_E3C.scripts.convert_predict_to_tbf.Document.iter_span", "home.repos.pwc.inspect_result.luyaojie_E3C.scripts.convert_predict_to_tbf.Document.iter_cluster", "home.repos.pwc.inspect_result.luyaojie_E3C.scripts.convert_predict_to_tbf.Document.get_span_type", "home.repos.pwc.inspect_result.luyaojie_E3C.scripts.convert_predict_to_tbf.Document.convert_span", "home.repos.pwc.inspect_result.luyaojie_E3C.scripts.convert_predict_to_tbf.Document.convert_cluster"], ["", "", "def", "convert_json_to_tbf", "(", "doc_dict", ":", "JsonDict", ")", ":", "\n", "    ", "document", "=", "Document", "(", "doc_dict", ",", "'system'", ")", "\n", "tb_list", "=", "list", "(", ")", "\n", "doc_id", "=", "doc_dict", "[", "'doc_id'", "]", "\n", "tb_list", "+=", "[", "\"#BeginOfDocument %s\"", "%", "doc_id", "]", "\n", "for", "span", "in", "document", ".", "iter_span", "(", ")", ":", "\n", "        ", "if", "document", ".", "get_span_type", "(", "span", ")", "in", "escape_set", ":", "\n", "            ", "continue", "\n", "", "tb_list", "+=", "[", "document", ".", "convert_span", "(", "span", ")", "]", "\n", "", "for", "cluster_index", ",", "cluster", "in", "enumerate", "(", "document", ".", "iter_cluster", "(", ")", ")", ":", "\n", "        ", "if", "len", "(", "cluster", ")", "==", "1", ":", "\n", "            ", "continue", "\n", "", "tb_list", "+=", "[", "document", ".", "convert_cluster", "(", "cluster", ",", "cluster_index", ")", "]", "\n", "", "tb_list", "+=", "[", "\"#EndOfDocument\"", "]", "\n", "return", "tb_list", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.scripts.convert_predict_to_tbf.main": [[94, 103], ["open", "open", "convert_predict_to_tbf.convert_json_to_tbf", "open.write", "open.write", "json.loads"], "function", ["home.repos.pwc.inspect_result.luyaojie_E3C.scripts.convert_predict_to_tbf.convert_json_to_tbf"], ["", "def", "main", "(", ")", ":", "\n", "    ", "input_filename", "=", "sys", ".", "argv", "[", "1", "]", "\n", "output_filename", "=", "sys", ".", "argv", "[", "2", "]", "\n", "output", "=", "open", "(", "output_filename", ",", "'w'", ")", "\n", "with", "open", "(", "input_filename", ")", "as", "fin", ":", "\n", "        ", "for", "line", "in", "fin", ":", "\n", "            ", "tb_list", "=", "convert_json_to_tbf", "(", "json", ".", "loads", "(", "line", ")", ")", "\n", "output", ".", "write", "(", "'\\n'", ".", "join", "(", "tb_list", ")", ")", "\n", "output", ".", "write", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.scripts.convert_plain_tbf.main": [[7, 17], ["open", "open", "line.strip().split", "output.write", "len", "line.strip"], "function", ["None"], ["def", "main", "(", ")", ":", "\n", "    ", "tbf_file", "=", "sys", ".", "argv", "[", "1", "]", "\n", "plain_file", "=", "sys", ".", "argv", "[", "1", "]", "+", "'.plain'", "\n", "with", "open", "(", "plain_file", ",", "'w'", ")", "as", "output", ":", "\n", "        ", "for", "line", "in", "open", "(", "tbf_file", ")", ":", "\n", "            ", "att", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "if", "len", "(", "att", ")", "==", "7", ":", "\n", "                ", "att", "[", "5", "]", "=", "'event'", "\n", "att", "[", "6", "]", "=", "'Other'", "\n", "", "output", ".", "write", "(", "'\\t'", ".", "join", "(", "att", ")", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.scripts.extract_doc_id.main": [[7, 24], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.path.exists", "os.makedirs", "open", "json.loads", "open", "output.write"], "function", ["None"], ["def", "main", "(", ")", ":", "\n", "    ", "file_type_list", "=", "[", "'train'", ",", "'valid'", ",", "'test'", "]", "\n", "import", "argparse", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-i'", ",", "dest", "=", "'input_folder'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'-o'", ",", "dest", "=", "'output_folder'", ",", "type", "=", "str", ")", "\n", "options", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "options", ".", "output_folder", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "options", ".", "output_folder", ")", "\n", "\n", "", "for", "file_type", "in", "file_type_list", ":", "\n", "        ", "filename", "=", "options", ".", "input_folder", "+", "os", ".", "sep", "+", "file_type", "+", "'.jsonl'", "\n", "file_list", "=", "[", "json", ".", "loads", "(", "line", ")", "[", "'id'", "]", "for", "line", "in", "open", "(", "filename", ")", "]", "\n", "with", "open", "(", "options", ".", "output_folder", "+", "os", ".", "sep", "+", "file_type", "+", "'.filelist'", ",", "'w'", ")", "as", "output", ":", "\n", "            ", "for", "line", "in", "file_list", ":", "\n", "                ", "output", ".", "write", "(", "line", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.scripts.conll_coref_score_stream.pprint": [[9, 15], ["print", "separator.join", "scores_by_metric.get"], "function", ["None"], ["def", "pprint", "(", "scores_by_metric", ")", ":", "\n", "    ", "output_list", "=", "[", "]", "\n", "for", "key", "in", "[", "'filename'", ",", "'mention_type_p'", ",", "'mention_type_r'", ",", "'mention_type'", ",", "'bcub'", ",", "'ceafe'", ",", "'muc'", ",", "'blanc'", ",", "\n", "'AVG-F'", "]", ":", "\n", "        ", "output_list", "+=", "[", "scores_by_metric", ".", "get", "(", "key", ",", "'00.00'", ")", "]", "\n", "", "print", "(", "separator", ".", "join", "(", "output_list", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.luyaojie_E3C.scripts.conll_coref_score_stream.get_conll_scores": [[17, 45], ["print", "separator.join", "line.strip.strip", "line.strip.startswith", "line.strip.endswith", "line.strip.replace().replace().strip", "conll_coref_score_stream.pprint", "line.strip.startswith", "line.strip.split", "line.strip.startswith", "line.strip.replace().replace", "line.strip.endswith", "line.strip.startswith", "line.strip.split", "line.strip.replace", "line.strip.split", "line.strip.split", "line.strip.split"], "function", ["home.repos.pwc.inspect_result.luyaojie_E3C.scripts.conll_coref_score_stream.pprint"], ["", "def", "get_conll_scores", "(", ")", ":", "\n", "    ", "scores_by_metric", "=", "{", "}", "\n", "print", "(", "separator", ".", "join", "(", "[", "'filename'", ",", "'mention_type_p'", ",", "'mention_type_r'", ",", "'mention_type'", ",", "'bcub'", ",", "'ceafe'", ",", "'muc'", ",", "'blanc'", ",", "'AVG-F'", "]", ")", ")", "\n", "with", "sys", ".", "stdin", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", ".", "startswith", "(", "\"==>\"", ")", ":", "\n", "                ", "filename", "=", "line", ".", "replace", "(", "'==>'", ",", "''", ")", ".", "replace", "(", "'<=='", ",", "''", ")", ".", "strip", "(", ")", "\n", "scores_by_metric", "[", "'filename'", "]", "=", "filename", "\n", "", "elif", "line", ".", "startswith", "(", "\"Metric\"", ")", "and", "not", "line", ".", "endswith", "(", "'*'", ")", ":", "\n", "                ", "att", "=", "line", ".", "split", "(", ")", "\n", "name", "=", "att", "[", "2", "]", "\n", "f1", "=", "att", "[", "-", "1", "]", "\n", "scores_by_metric", "[", "name", "]", "=", "f1", "\n", "", "elif", "line", ".", "startswith", "(", "'Overall Average CoNLL score'", ")", ":", "\n", "                ", "name", "=", "\"AVG-F\"", "\n", "f1", "=", "line", ".", "split", "(", ")", "[", "-", "1", "]", "\n", "scores_by_metric", "[", "name", "]", "=", "f1", "\n", "", "elif", "line", ".", "startswith", "(", "'mention_type\\t'", ")", ":", "\n", "                ", "scores_by_metric", "[", "'mention_type'", "]", "=", "line", ".", "split", "(", ")", "[", "3", "]", "\n", "scores_by_metric", "[", "'mention_type_r'", "]", "=", "line", ".", "split", "(", ")", "[", "2", "]", "\n", "scores_by_metric", "[", "'mention_type_p'", "]", "=", "line", ".", "split", "(", ")", "[", "1", "]", "\n", "# elif line.startswith('[WARNING]'):", "\n", "#     print(line)", "\n", "", "if", "line", ".", "endswith", "(", "'Evaluation Done.'", ")", ":", "\n", "                ", "pprint", "(", "scores_by_metric", ")", "\n", "scores_by_metric", "=", "{", "}", "\n", "", "", "", "return", "scores_by_metric", "\n", "\n"]]}