{"home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.dm_hamiltonian_dynamics_suite.load_datasets.filter_based_on_keys": [[28, 43], ["ValueError", "len", "ValueError", "len"], "function", ["None"], ["def", "filter_based_on_keys", "(", "\n", "example", ":", "Mapping", "[", "str", ",", "T", "]", ",", "\n", "keys_to_preserve", ":", "Sequence", "[", "str", "]", ",", "\n", "single_key_return_array", ":", "bool", "=", "False", "\n", ")", "->", "Union", "[", "T", ",", "Mapping", "[", "str", ",", "T", "]", "]", ":", "\n", "  ", "\"\"\"Filters the contents of the mapping, to return only the keys given in `keys_to_preserve`.\"\"\"", "\n", "if", "not", "keys_to_preserve", ":", "\n", "    ", "raise", "ValueError", "(", "\"You must provide at least one key to preserve.\"", ")", "\n", "", "if", "len", "(", "keys_to_preserve", ")", "==", "1", "and", "single_key_return_array", ":", "\n", "    ", "return", "example", "[", "keys_to_preserve", "[", "0", "]", "]", "\n", "", "elif", "single_key_return_array", ":", "\n", "    ", "raise", "ValueError", "(", "f\"You have provided {len(keys_to_preserve)}>1 keys to \"", "\n", "f\"preserve and have also set \"", "\n", "f\"single_key_return_array=True.\"", ")", "\n", "", "return", "{", "k", ":", "example", "[", "k", "]", "for", "k", "in", "keys_to_preserve", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.dm_hamiltonian_dynamics_suite.load_datasets.preprocess_batch": [[45, 135], ["jax.tree_map.get", "jax.tree_map", "jax.tree_map", "ValueError", "jax.tree_map.get", "ValueError", "isinstance", "ValueError", "tensorflow.random.uniform", "jax.tree_map", "tensorflow.reshape", "tensorflow.shape", "tensorflow.range", "isinstance", "tensorflow.gather_nd", "tf.gather_nd.set_shape", "tensorflow.cast", "tf.gather_nd.shape[].as_list", "type", "tensorflow.cast", "tensorflow.cast", "tensorflow.image.convert_image_dtype", "list", "list"], "function", ["None"], ["", "def", "preprocess_batch", "(", "\n", "batch", ":", "Mapping", "[", "str", ",", "Any", "]", ",", "\n", "num_local_devices", ":", "int", ",", "\n", "multi_device", ":", "bool", ",", "\n", "sub_sample_length", ":", "Optional", "[", "int", "]", ",", "\n", "dtype", ":", "str", "=", "\"float32\"", "\n", ")", "->", "Mapping", "[", "str", ",", "Any", "]", ":", "\n", "  ", "\"\"\"Function to preprocess the data for a batch.\n\n  This performs two functions:\n    1.If 'sub_sample_length' is not None, it randomly subsamples every example\n    along the second (time) axis to return an array of the requested length.\n     Note that this assumes that all arrays have the same length.\n    2. Converts all arrays to the provided data type using\n      `tf.image.convert_image_dtype`.\n    3. Reshapes the array based on the number of local devices.\n\n  Args:\n    batch: Dictionary with the full batch.\n    num_local_devices: The number of local devices.\n    multi_device: Whether to prepare the batch for multi device training.\n    sub_sample_length: The sub-sampling length requested.\n    dtype: String for the dtype, must be a floating-point type.\n\n  Returns:\n    The preprocessed batch.\n  \"\"\"", "\n", "if", "dtype", "not", "in", "(", "\"float32\"", ",", "\"float64\"", ")", ":", "\n", "    ", "raise", "ValueError", "(", "\"The provided dtype must be a floating point dtype.\"", ")", "\n", "", "tensor", "=", "batch", ".", "get", "(", "\"image\"", ",", "batch", ".", "get", "(", "\"x\"", ",", "None", ")", ")", "\n", "if", "tensor", "is", "None", ":", "\n", "    ", "raise", "ValueError", "(", "\"We need either the key 'image' or 'x' to be present in \"", "\n", "\"the batch provided.\"", ")", "\n", "", "if", "not", "isinstance", "(", "tensor", ",", "tf", ".", "Tensor", ")", ":", "\n", "    ", "raise", "ValueError", "(", "f\"Expecting the value for key 'image' or 'x' to be a \"", "\n", "f\"tf.Tensor, instead got {type(tensor)}.\"", ")", "\n", "# `n` here represents the batch size", "\n", "", "n", "=", "tensor", ".", "shape", "[", "0", "]", "or", "tf", ".", "shape", "(", "tensor", ")", "[", "0", "]", "\n", "# `t` here represents number of time steps in the batch", "\n", "t", "=", "tensor", ".", "shape", "[", "1", "]", "\n", "if", "sub_sample_length", "is", "not", "None", ":", "\n", "# Sample random index for each example in the batch", "\n", "    ", "limit", "=", "t", "-", "sub_sample_length", "+", "1", "\n", "start", "=", "tf", ".", "random", ".", "uniform", "(", "shape", "=", "[", "n", "]", ",", "maxval", "=", "limit", ",", "dtype", "=", "\"int32\"", ")", "\n", "indices", "=", "tf", ".", "range", "(", "sub_sample_length", ")", "[", "None", ",", ":", ",", "None", "]", "+", "start", "[", ":", ",", "None", ",", "None", "]", "\n", "def", "index", "(", "x", ")", ":", "\n", "      ", "\"\"\"Indexes every array in the batch according to the sampled indices and length, if its second dimensions is equal to `t`.\"\"\"", "\n", "if", "x", ".", "shape", ".", "rank", ">", "1", "and", "x", ".", "shape", "[", "1", "]", "==", "t", ":", "\n", "        ", "if", "isinstance", "(", "n", ",", "tf", ".", "Tensor", ")", ":", "\n", "          ", "shape", "=", "[", "None", ",", "sub_sample_length", "]", "+", "list", "(", "x", ".", "shape", "[", "2", ":", "]", ")", "\n", "", "else", ":", "\n", "          ", "shape", "=", "[", "n", ",", "sub_sample_length", "]", "+", "list", "(", "x", ".", "shape", "[", "2", ":", "]", ")", "\n", "", "x", "=", "tf", ".", "gather_nd", "(", "x", ",", "indices", ",", "batch_dims", "=", "1", ")", "\n", "x", ".", "set_shape", "(", "shape", ")", "\n", "", "return", "x", "\n", "\n", "", "batch", "=", "jax", ".", "tree_map", "(", "index", ",", "batch", ")", "\n", "\n", "", "def", "convert_fn", "(", "x", ")", ":", "\n", "    ", "\"\"\"Converts the value of `x` to the provided precision dtype.\n\n      Integer valued arrays, with data type different from int32 and int64 are\n      assumed to represent compressed images and are converted via\n      `tf.image.convert_image_dtype`. For any other data types (float or int)\n      their type is preserved, but their precision is changed based on the\n      target `dtype`. For instance, if `dtype=float32` the float64 variables are\n      converted to float32 and int64 values are converted to int32.\n\n    Args:\n      x: The input array.\n\n    Returns:\n      The converted output array.\n    \"\"\"", "\n", "if", "x", ".", "dtype", "==", "tf", ".", "int64", ":", "\n", "      ", "return", "tf", ".", "cast", "(", "x", ",", "\"int32\"", ")", "if", "dtype", "==", "\"float32\"", "else", "x", "\n", "", "elif", "x", ".", "dtype", "==", "tf", ".", "int32", ":", "\n", "      ", "return", "tf", ".", "cast", "(", "x", ",", "\"int64\"", ")", "if", "dtype", "==", "\"float64\"", "else", "x", "\n", "", "elif", "x", ".", "dtype", "==", "tf", ".", "float64", "or", "x", ".", "dtype", "==", "tf", ".", "float32", ":", "\n", "      ", "return", "tf", ".", "cast", "(", "x", ",", "dtype", "=", "dtype", ")", "\n", "", "else", ":", "\n", "      ", "return", "tf", ".", "image", ".", "convert_image_dtype", "(", "x", ",", "dtype", "=", "dtype", ")", "\n", "\n", "", "", "batch", "=", "jax", ".", "tree_map", "(", "convert_fn", ",", "batch", ")", "\n", "if", "not", "multi_device", ":", "\n", "    ", "return", "batch", "\n", "", "def", "reshape_for_jax_pmap", "(", "x", ")", ":", "\n", "    ", "\"\"\"Reshapes values such that their leading dimension is the number of local devices.\"\"\"", "\n", "return", "tf", ".", "reshape", "(", "x", ",", "[", "num_local_devices", ",", "-", "1", "]", "+", "x", ".", "shape", "[", "1", ":", "]", ".", "as_list", "(", ")", ")", "\n", "", "return", "jax", ".", "tree_map", "(", "reshape_for_jax_pmap", ",", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.dm_hamiltonian_dynamics_suite.load_datasets.load_filenames_and_parse_fn": [[137, 187], ["os.path.join", "os.path.join", "os.path.exists", "ValueError", "os.path.exists", "ValueError", "open", "dict", "dict", "dict", "tensorflow.io.parse_single_example", "dict", "dict.items", "tuple", "tensorflow.reshape", "line.split", "[].split", "tensorflow.io.FixedLenFeature", "tensorflow.image.decode_png", "tensorflow.sparse.to_dense", "name.split", "int", "line.split", "tensorflow.io.VarLenFeature", "tensorflow.io.VarLenFeature", "tensorflow.bitcast", "dict", "shape_string.split", "line.split"], "function", ["None"], ["", "def", "load_filenames_and_parse_fn", "(", "\n", "path", ":", "str", ",", "\n", "tfrecord_prefix", ":", "str", "\n", ")", "->", "Tuple", "[", "Tuple", "[", "str", "]", ",", "Callable", "[", "[", "str", "]", ",", "Mapping", "[", "str", ",", "Any", "]", "]", "]", ":", "\n", "  ", "\"\"\"Returns the file names and read_fn based on the number of shards.\"\"\"", "\n", "file_name", "=", "os", ".", "path", ".", "join", "(", "path", ",", "f\"{tfrecord_prefix}.tfrecord\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "file_name", ")", ":", "\n", "    ", "raise", "ValueError", "(", "f\"The dataset file {file_name} does not exist.\"", ")", "\n", "", "features_file", "=", "os", ".", "path", ".", "join", "(", "path", ",", "\"features.txt\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "features_file", ")", ":", "\n", "    ", "raise", "ValueError", "(", "f\"The dataset features file {features_file} does not \"", "\n", "f\"exist.\"", ")", "\n", "", "with", "open", "(", "features_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "    ", "dtype_dict", "=", "dict", "(", ")", "\n", "shapes_dict", "=", "dict", "(", ")", "\n", "parsing_description", "=", "dict", "(", ")", "\n", "for", "line", "in", "f", ":", "\n", "      ", "key", "=", "line", ".", "split", "(", "\", \"", ")", "[", "0", "]", "\n", "shape_string", "=", "line", ".", "split", "(", "\"(\"", ")", "[", "1", "]", ".", "split", "(", "\")\"", ")", "[", "0", "]", "\n", "shapes_dict", "[", "key", "]", "=", "tuple", "(", "int", "(", "s", ")", "for", "s", "in", "shape_string", ".", "split", "(", "\",\"", ")", "if", "s", ")", "\n", "dtype_dict", "[", "key", "]", "=", "line", ".", "split", "(", "\", \"", ")", "[", "-", "1", "]", "[", ":", "-", "1", "]", "\n", "if", "dtype_dict", "[", "key", "]", "==", "\"uint8\"", ":", "\n", "        ", "parsing_description", "[", "key", "]", "=", "tf", ".", "io", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "string", ")", "\n", "", "elif", "dtype_dict", "[", "key", "]", "in", "(", "\"float32\"", ",", "\"float64\"", ")", ":", "\n", "        ", "parsing_description", "[", "key", "]", "=", "tf", ".", "io", ".", "VarLenFeature", "(", "tf", ".", "int64", ")", "\n", "", "else", ":", "\n", "        ", "parsing_description", "[", "key", "]", "=", "tf", ".", "io", ".", "VarLenFeature", "(", "dtype_dict", "[", "key", "]", ")", "\n", "\n", "", "", "", "def", "parse_fn", "(", "example_proto", ":", "str", ")", "->", "Mapping", "[", "str", ",", "Any", "]", ":", "\n", "    ", "raw", "=", "tf", ".", "io", ".", "parse_single_example", "(", "example_proto", ",", "parsing_description", ")", "\n", "parsed", "=", "dict", "(", ")", "\n", "for", "name", ",", "dtype", "in", "dtype_dict", ".", "items", "(", ")", ":", "\n", "      ", "value", "=", "raw", "[", "name", "]", "\n", "if", "dtype", "==", "\"uint8\"", ":", "\n", "        ", "value", "=", "tf", ".", "image", ".", "decode_png", "(", "value", ")", "\n", "", "else", ":", "\n", "        ", "value", "=", "tf", ".", "sparse", ".", "to_dense", "(", "value", ")", "\n", "if", "dtype", "in", "(", "\"float32\"", ",", "\"float64\"", ")", ":", "\n", "          ", "value", "=", "tf", ".", "bitcast", "(", "value", ",", "type", "=", "dtype", ")", "\n", "", "", "value", "=", "tf", ".", "reshape", "(", "value", ",", "shapes_dict", "[", "name", "]", ")", "\n", "if", "\"/\"", "in", "name", ":", "\n", "        ", "k1", ",", "k2", "=", "name", ".", "split", "(", "\"/\"", ")", "\n", "if", "k1", "not", "in", "parsed", ":", "\n", "          ", "parsed", "[", "k1", "]", "=", "dict", "(", ")", "\n", "", "parsed", "[", "k1", "]", "[", "k2", "]", "=", "value", "\n", "", "else", ":", "\n", "        ", "parsed", "[", "name", "]", "=", "value", "\n", "", "", "return", "parsed", "\n", "\n", "", "return", "(", "file_name", ",", ")", ",", "parse_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.dm_hamiltonian_dynamics_suite.load_datasets.load_parsed_dataset": [[189, 226], ["load_datasets.load_filenames_and_parse_fn", "tensorflow.data.TFRecordDataset", "max", "tensorflow.data.Options", "ds.map.with_options", "jax.process_index", "ds.map.shard", "ds.map.map", "ds.map.map", "os.cpu_count", "load_datasets.load_filenames_and_parse_fn.parse_fn", "load_datasets.filter_based_on_keys"], "function", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.dm_hamiltonian_dynamics_suite.load_datasets.load_filenames_and_parse_fn", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.BoxRegion.max", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.dm_hamiltonian_dynamics_suite.load_datasets.filter_based_on_keys"], ["", "def", "load_parsed_dataset", "(", "\n", "path", ":", "str", ",", "\n", "tfrecord_prefix", ":", "str", ",", "\n", "num_shards", ":", "int", ",", "\n", "shard_index", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "keys_to_preserve", ":", "Optional", "[", "Sequence", "[", "str", "]", "]", "=", "None", "\n", ")", "->", "tf", ".", "data", ".", "Dataset", ":", "\n", "  ", "\"\"\"Loads a dataset and shards it based on jax devices.\"\"\"", "\n", "shard_index", "=", "shard_index", "or", "jax", ".", "process_index", "(", ")", "\n", "file_names", ",", "parse_fn", "=", "load_filenames_and_parse_fn", "(", "\n", "path", "=", "path", ",", "\n", "tfrecord_prefix", "=", "tfrecord_prefix", ",", "\n", ")", "\n", "\n", "ds", "=", "tf", ".", "data", ".", "TFRecordDataset", "(", "file_names", ")", "\n", "\n", "threads", "=", "max", "(", "1", ",", "os", ".", "cpu_count", "(", ")", "-", "4", ")", "\n", "options", "=", "tf", ".", "data", ".", "Options", "(", ")", "\n", "options", ".", "threading", ".", "private_threadpool_size", "=", "threads", "\n", "options", ".", "threading", ".", "max_intra_op_parallelism", "=", "1", "\n", "ds", "=", "ds", ".", "with_options", "(", "options", ")", "\n", "\n", "# Shard if we don't shard by files", "\n", "if", "num_shards", "!=", "1", ":", "\n", "    ", "ds", "=", "ds", ".", "shard", "(", "num_shards", ",", "shard_index", ")", "\n", "\n", "# Parse the examples one by one", "\n", "", "if", "keys_to_preserve", "is", "not", "None", ":", "\n", "# Optionally also filter them based on the keys provided", "\n", "    ", "def", "parse_filter", "(", "example_proto", ")", ":", "\n", "      ", "example", "=", "parse_fn", "(", "example_proto", ")", "\n", "return", "filter_based_on_keys", "(", "example", ",", "keys_to_preserve", "=", "keys_to_preserve", ")", "\n", "", "ds", "=", "ds", ".", "map", "(", "parse_filter", ",", "num_parallel_calls", "=", "tf", ".", "data", ".", "experimental", ".", "AUTOTUNE", ")", "\n", "", "else", ":", "\n", "    ", "ds", "=", "ds", ".", "map", "(", "parse_fn", ",", "num_parallel_calls", "=", "tf", ".", "data", ".", "experimental", ".", "AUTOTUNE", ")", "\n", "\n", "", "return", "ds", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.dm_hamiltonian_dynamics_suite.load_datasets.load_dataset": [[228, 301], ["functools.partial", "jax.local_device_count", "tensorflow.name_scope", "load_datasets.load_parsed_dataset", "ds.shuffle.repeat", "ds.shuffle.batch", "ds.shuffle.map", "ds.shuffle.prefetch", "jax.local_device_count", "ds.shuffle.cache", "ds.shuffle.shuffle"], "function", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.dm_hamiltonian_dynamics_suite.load_datasets.load_parsed_dataset"], ["", "def", "load_dataset", "(", "\n", "path", ":", "str", ",", "\n", "tfrecord_prefix", ":", "str", ",", "\n", "sub_sample_length", ":", "Optional", "[", "int", "]", ",", "\n", "per_device_batch_size", ":", "int", ",", "\n", "num_epochs", ":", "Optional", "[", "int", "]", ",", "\n", "drop_remainder", ":", "bool", ",", "\n", "multi_device", ":", "bool", "=", "False", ",", "\n", "num_shards", ":", "int", "=", "1", ",", "\n", "shard_index", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "keys_to_preserve", ":", "Optional", "[", "Sequence", "[", "str", "]", "]", "=", "None", ",", "\n", "shuffle", ":", "bool", "=", "False", ",", "\n", "cache", ":", "bool", "=", "True", ",", "\n", "shuffle_buffer", ":", "Optional", "[", "int", "]", "=", "10000", ",", "\n", "dtype", ":", "str", "=", "\"float32\"", ",", "\n", "seed", ":", "Optional", "[", "int", "]", "=", "None", "\n", ")", "->", "tf", ".", "data", ".", "Dataset", ":", "\n", "  ", "\"\"\"Creates a tensorflow.Dataset pipeline from an TFRecord dataset.\n\n  Args:\n    path: The path to the dataset.\n    tfrecord_prefix: The dataset prefix.\n    sub_sample_length: The length of the sequences that will be returned.\n      If this is `None` the dataset will return full length sequences.\n      If this is an `int` it will subsample each sequence uniformly at random\n      for a sequence of the provided size. Note that all examples in the dataset\n      must be at least this long, otherwise the tensorflow code might crash.\n    per_device_batch_size: The batch size to use on a single device. The actual\n      batch size is this multiplied by the number of devices.\n    num_epochs: The number of times to repeat the full dataset.\n    drop_remainder: If the number of examples in the dataset are not divisible\n      evenly by the batch size, whether each epoch to drop the remaining\n      examples, or to construct a batch with batch size smaller than usual.\n    multi_device: Whether to load the dataset prepared for multi-device use\n      (e.g. pmap) with leading dimension equal to the number of local devices.\n    num_shards: If you want to shard the dataset, you must specify how many\n      shards you want to use.\n    shard_index: The shard index for this host. If `None` will use\n      `jax.process_index()`.\n    keys_to_preserve: Explicit specification which keys to keep from the dataset\n    shuffle: Whether to shuffle examples in the dataset.\n    cache: Whether to use cache in the tf.Dataset.\n    shuffle_buffer: Size of the shuffling buffer.\n    dtype: What data type to convert the data to.\n    seed: Seed to pass to the loader.\n  Returns:\n    A tensorflow dataset object.\n  \"\"\"", "\n", "per_host_batch_size", "=", "per_device_batch_size", "*", "jax", ".", "local_device_count", "(", ")", "\n", "# Preprocessing function", "\n", "batch_fn", "=", "functools", ".", "partial", "(", "\n", "preprocess_batch", ",", "\n", "num_local_devices", "=", "jax", ".", "local_device_count", "(", ")", ",", "\n", "multi_device", "=", "multi_device", ",", "\n", "sub_sample_length", "=", "sub_sample_length", ",", "\n", "dtype", "=", "dtype", ")", "\n", "\n", "with", "tf", ".", "name_scope", "(", "\"dataset\"", ")", ":", "\n", "    ", "ds", "=", "load_parsed_dataset", "(", "\n", "path", "=", "path", ",", "\n", "tfrecord_prefix", "=", "tfrecord_prefix", ",", "\n", "num_shards", "=", "num_shards", ",", "\n", "shard_index", "=", "shard_index", ",", "\n", "keys_to_preserve", "=", "keys_to_preserve", ",", "\n", ")", "\n", "if", "cache", ":", "\n", "      ", "ds", "=", "ds", ".", "cache", "(", ")", "\n", "", "if", "shuffle", ":", "\n", "      ", "ds", "=", "ds", ".", "shuffle", "(", "shuffle_buffer", ",", "seed", "=", "seed", ")", "\n", "", "ds", "=", "ds", ".", "repeat", "(", "num_epochs", ")", "\n", "ds", "=", "ds", ".", "batch", "(", "per_host_batch_size", ",", "drop_remainder", "=", "drop_remainder", ")", "\n", "ds", "=", "ds", ".", "map", "(", "batch_fn", ",", "num_parallel_calls", "=", "tf", ".", "data", ".", "experimental", ".", "AUTOTUNE", ")", "\n", "return", "ds", ".", "prefetch", "(", "tf", ".", "data", ".", "experimental", ".", "AUTOTUNE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.dm_hamiltonian_dynamics_suite.load_datasets.dataset_as_iter": [[303, 307], ["tensorflow_datasets.as_numpy", "dataset_func"], "function", ["None"], ["", "", "def", "dataset_as_iter", "(", "dataset_func", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "  ", "def", "iterable_func", "(", ")", ":", "\n", "    ", "yield", "from", "tfds", ".", "as_numpy", "(", "dataset_func", "(", "*", "args", ",", "**", "kwargs", ")", ")", "\n", "", "return", "iterable_func", "\n", "", ""]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.dm_hamiltonian_dynamics_suite.datasets.open_spiel_available": [[45, 47], ["None"], "function", ["None"], ["", "def", "open_spiel_available", "(", ")", "->", "bool", ":", "\n", "  ", "return", "_OPEN_SPIEL_INSTALLED", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.dm_hamiltonian_dynamics_suite.datasets.set_up_folder": [[49, 57], ["os.path.exists", "os.makedirs", "shutil.rmtree", "os.makedirs"], "function", ["None"], ["", "def", "set_up_folder", "(", "folder", ":", "str", ",", "overwrite", ":", "bool", ")", "->", "None", ":", "\n", "  ", "\"\"\"Sets up the folder needed for the dataset (optionally clearing it).\"\"\"", "\n", "if", "os", ".", "path", ".", "exists", "(", "folder", ")", ":", "\n", "    ", "if", "overwrite", ":", "\n", "      ", "shutil", ".", "rmtree", "(", "folder", ")", "\n", "os", ".", "makedirs", "(", "folder", ")", "\n", "", "", "else", ":", "\n", "    ", "os", ".", "makedirs", "(", "folder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.dm_hamiltonian_dynamics_suite.datasets.save_features": [[59, 79], ["example_dict.items", "isinstance", "datasets.save_features", "isinstance", "isinstance", "v.numpy.numpy", "NotImplementedError", "file.write", "file.write", "type"], "function", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.dm_hamiltonian_dynamics_suite.datasets.save_features"], ["", "", "def", "save_features", "(", "\n", "file", ":", "TextIO", ",", "\n", "example_dict", ":", "Mapping", "[", "str", ",", "Any", "]", ",", "\n", "prefix", ":", "str", "=", "\"\"", "\n", ")", "->", "None", ":", "\n", "  ", "\"\"\"Saves the features file used for loading.\"\"\"", "\n", "for", "k", ",", "v", "in", "example_dict", ".", "items", "(", ")", ":", "\n", "    ", "if", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "      ", "save_features", "(", "file", ",", "v", ",", "prefix", "=", "f\"{prefix}{k}/\"", ")", "\n", "", "else", ":", "\n", "      ", "if", "isinstance", "(", "v", ",", "tf", ".", "Tensor", ")", ":", "\n", "        ", "v", "=", "v", ".", "numpy", "(", ")", "\n", "", "if", "isinstance", "(", "v", ",", "(", "np", ".", "ndarray", ",", "jnp", ".", "ndarray", ")", ")", ":", "\n", "# int32 are promoted to int64", "\n", "        ", "if", "v", ".", "dtype", "==", "np", ".", "int32", ":", "\n", "          ", "file", ".", "write", "(", "f\"{prefix}{k}, {v.shape}, {np.int64}\\n\"", ")", "\n", "", "else", ":", "\n", "          ", "file", ".", "write", "(", "f\"{prefix}{k}, {v.shape}, {v.dtype}\\n\"", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f\"Currently the only supported feature types \"", "\n", "f\"are tf.Tensor, np.ndarray and jnp.ndarray. \"", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.dm_hamiltonian_dynamics_suite.datasets.encode_example": [[83, 119], ["dict", "example_dict.items", "isinstance", "isinstance", "v.reshape.numpy", "encode_example().items", "isinstance", "NotImplementedError", "datasets.encode_example", "tensorflow.image.encode_png().numpy", "tensorflow.train.Feature", "v.reshape.reshape", "v.reshape.reshape().astype", "tensorflow.train.Feature", "v.reshape.reshape().view", "tensorflow.train.Feature", "tensorflow.image.encode_png", "tensorflow.train.BytesList", "type", "v.reshape.reshape", "tensorflow.train.Int64List", "v.reshape.reshape", "tensorflow.train.Int64List"], "function", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.dm_hamiltonian_dynamics_suite.datasets.encode_example"], ["", "", "", "", "def", "encode_example", "(", "example_dict", ":", "Mapping", "[", "str", ",", "Any", "]", ")", "->", "Mapping", "[", "str", ",", "Any", "]", ":", "\n", "  ", "\"\"\"Encodes a single trajectory into a TFRecord example.\"\"\"", "\n", "result_dict", "=", "dict", "(", ")", "\n", "for", "k", ",", "v", "in", "example_dict", ".", "items", "(", ")", ":", "\n", "    ", "if", "isinstance", "(", "v", ",", "tf", ".", "Tensor", ")", ":", "\n", "      ", "v", "=", "v", ".", "numpy", "(", ")", "\n", "", "if", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "      ", "for", "ki", ",", "vi", "in", "encode_example", "(", "v", ")", ".", "items", "(", ")", ":", "\n", "        ", "result_dict", "[", "f\"{k}/{ki}\"", "]", "=", "vi", "\n", "", "", "elif", "isinstance", "(", "v", ",", "(", "np", ".", "ndarray", ",", "jnp", ".", "ndarray", ")", ")", ":", "\n", "      ", "if", "v", ".", "dtype", "==", "np", ".", "uint8", ":", "\n", "# We encode images to png", "\n", "        ", "if", "v", ".", "ndim", "==", "4", ":", "\n", "# Since encode_png accepts only a single image for a batch of images", "\n", "# we just stack them over their first axis.", "\n", "          ", "v", "=", "v", ".", "reshape", "(", "(", "-", "1", ",", ")", "+", "v", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "", "image_string", "=", "tf", ".", "image", ".", "encode_png", "(", "v", ")", ".", "numpy", "(", ")", "\n", "result_dict", "[", "k", "]", "=", "tf", ".", "train", ".", "Feature", "(", "\n", "bytes_list", "=", "tf", ".", "train", ".", "BytesList", "(", "value", "=", "[", "image_string", "]", ")", ")", "\n", "", "elif", "v", ".", "dtype", "==", "np", ".", "int32", ":", "\n", "# int32 are promoted to int64", "\n", "        ", "value", "=", "v", ".", "reshape", "(", "[", "-", "1", "]", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "result_dict", "[", "k", "]", "=", "tf", ".", "train", ".", "Feature", "(", "\n", "int64_list", "=", "tf", ".", "train", ".", "Int64List", "(", "value", "=", "value", ")", ")", "\n", "", "else", ":", "\n", "# Since tf.Records do not support reading float64, here for any values", "\n", "# we interpret them as int64 and store them in this format, in order", "\n", "# when reading to be able to recover the float64 values.", "\n", "        ", "value", "=", "v", ".", "reshape", "(", "[", "-", "1", "]", ")", ".", "view", "(", "np", ".", "int64", ")", "\n", "result_dict", "[", "k", "]", "=", "tf", ".", "train", ".", "Feature", "(", "\n", "int64_list", "=", "tf", ".", "train", ".", "Int64List", "(", "value", "=", "value", ")", ")", "\n", "", "", "else", ":", "\n", "      ", "raise", "NotImplementedError", "(", "f\"Currently the only supported feature types \"", "\n", "f\"are tf.Tensor, np.ndarray and jnp.ndarray. \"", "\n", "f\"Encountered value of type {type(v)}.\"", ")", "\n", "", "", "return", "result_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.dm_hamiltonian_dynamics_suite.datasets.transform_dataset": [[121, 151], ["datasets.set_up_folder", "os.path.join", "os.path.join", "os.path.exists", "tensorflow.io.TFRecordWriter", "absl.logging.info", "absl.logging.info", "os.remove", "tensorflow.train.Example", "writer.write", "tf.train.Example.SerializeToString", "open", "datasets.save_features", "tensorflow.train.Features", "datasets.encode_example"], "function", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.dm_hamiltonian_dynamics_suite.datasets.set_up_folder", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.dm_hamiltonian_dynamics_suite.datasets.save_features", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.dm_hamiltonian_dynamics_suite.datasets.encode_example"], ["", "def", "transform_dataset", "(", "\n", "generator", ":", "Generator", "[", "Mapping", "[", "str", ",", "Any", "]", ",", "None", ",", "None", "]", ",", "\n", "destination_folder", ":", "str", ",", "\n", "prefix", ":", "str", ",", "\n", "overwrite", ":", "bool", "\n", ")", "->", "None", ":", "\n", "  ", "\"\"\"Copies the dataset from the source folder to the destination as a TFRecord dataset.\"\"\"", "\n", "set_up_folder", "(", "destination_folder", ",", "overwrite", ")", "\n", "features_path", "=", "os", ".", "path", ".", "join", "(", "destination_folder", ",", "\"features.txt\"", ")", "\n", "features_saved", "=", "False", "\n", "\n", "file_path", "=", "os", ".", "path", ".", "join", "(", "destination_folder", ",", "f\"{prefix}.tfrecord\"", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "file_path", ")", ":", "\n", "    ", "if", "not", "overwrite", ":", "\n", "      ", "logging", ".", "info", "(", "\"The file with prefix %s already exist. Skipping.\"", ",", "prefix", ")", "\n", "# We assume that the features file must be present in this case.", "\n", "return", "\n", "", "else", ":", "\n", "      ", "logging", ".", "info", "(", "\"The file with prefix %s already exist and overwrite=True.\"", "\n", "\" Deleting.\"", ",", "prefix", ")", "\n", "os", ".", "remove", "(", "file_path", ")", "\n", "", "", "with", "tf", ".", "io", ".", "TFRecordWriter", "(", "file_path", ")", "as", "writer", ":", "\n", "    ", "for", "element", "in", "generator", ":", "\n", "      ", "if", "not", "features_saved", ":", "\n", "        ", "with", "open", "(", "features_path", ",", "\"w\"", ")", "as", "f", ":", "\n", "          ", "save_features", "(", "f", ",", "element", ")", "\n", "", "features_saved", "=", "True", "\n", "", "example", "=", "tf", ".", "train", ".", "Example", "(", "features", "=", "tf", ".", "train", ".", "Features", "(", "\n", "feature", "=", "encode_example", "(", "element", ")", ")", ")", "\n", "writer", ".", "write", "(", "example", ".", "SerializeToString", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.dm_hamiltonian_dynamics_suite.datasets.generate_sample": [[153, 183], ["numpy.random.randint", "jax.random.fold_in", "jax.random.fold_in", "system.generate_and_render_dt", "numpy.linspace", "sub_sample_index.astype.astype", "jax.tree_map", "jax.tree_map", "jax.tree_map.keys", "jax.random.PRNGKey", "jax.random.PRNGKey"], "function", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.multiagent_dynamics.game_dynamics.ZeroSumGame.generate_and_render_dt"], ["", "", "", "def", "generate_sample", "(", "\n", "index", ":", "int", ",", "\n", "system", ":", "n_body", ".", "hamiltonian", ".", "HamiltonianSystem", ",", "\n", "dt", ":", "float", ",", "\n", "num_steps", ":", "int", ",", "\n", "steps_per_dt", ":", "int", "\n", ")", "->", "Mapping", "[", "str", ",", "jnp", ".", "ndarray", "]", ":", "\n", "  ", "\"\"\"Simulates a single trajectory of the system.\"\"\"", "\n", "seed", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "2", "*", "32", "-", "1", ")", "\n", "prng_key", "=", "jax", ".", "random", ".", "fold_in", "(", "jax", ".", "random", ".", "PRNGKey", "(", "seed", ")", ",", "index", ")", "\n", "total_steps", "=", "num_steps", "*", "steps_per_dt", "\n", "total_dt", "=", "dt", "/", "steps_per_dt", "\n", "result", "=", "system", ".", "generate_and_render_dt", "(", "\n", "num_trajectories", "=", "1", ",", "\n", "rng_key", "=", "prng_key", ",", "\n", "t0", "=", "0.0", ",", "\n", "dt", "=", "total_dt", ",", "\n", "num_steps", "=", "total_steps", ")", "\n", "sub_sample_index", "=", "np", ".", "linspace", "(", "0.0", ",", "total_steps", ",", "num_steps", "+", "1", ")", "\n", "sub_sample_index", "=", "sub_sample_index", ".", "astype", "(", "\"int64\"", ")", "\n", "def", "sub_sample", "(", "x", ")", ":", "\n", "    ", "if", "x", ".", "ndim", ">", "1", "and", "x", ".", "shape", "[", "1", "]", "==", "total_steps", "+", "1", ":", "\n", "      ", "return", "x", "[", "0", ",", "sub_sample_index", "]", "\n", "", "else", ":", "\n", "      ", "return", "x", "\n", "", "", "result", "=", "jax", ".", "tree_map", "(", "sub_sample", ",", "result", ")", "\n", "for", "k", "in", "result", ".", "keys", "(", ")", ":", "\n", "    ", "if", "\"image\"", "in", "k", ":", "\n", "      ", "result", "[", "k", "]", "=", "(", "result", "[", "k", "]", "*", "255.0", ")", ".", "astype", "(", "\"uint8\"", ")", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.dm_hamiltonian_dynamics_suite.datasets.create_pipeline": [[185, 217], ["list", "list", "open", "datasets.save_features", "tensorflow.io.TFRecordWriter", "range", "tensorflow.io.TFRecordWriter", "range", "generate", "generate", "tensorflow.train.Example", "writer.write", "generate", "tensorflow.train.Example", "writer.write", "tuple", "tuple", "list.append", "tf.train.Example.SerializeToString", "list.append", "tf.train.Example.SerializeToString", "tensorflow.train.Features", "tensorflow.train.Features", "datasets.encode_example", "datasets.encode_example"], "function", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.dm_hamiltonian_dynamics_suite.datasets.save_features", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.dm_hamiltonian_dynamics_suite.datasets.encode_example", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.dm_hamiltonian_dynamics_suite.datasets.encode_example"], ["", "def", "create_pipeline", "(", "\n", "generate", ":", "Callable", "[", "[", "int", "]", ",", "Mapping", "[", "str", ",", "jnp", ".", "ndarray", "]", "]", ",", "\n", "output_path", ":", "str", ",", "\n", "num_train", ":", "int", ",", "\n", "num_test", ":", "int", ",", "\n", "return_generated_examples", ":", "bool", "=", "False", ",", "\n", ")", "->", "Callable", "[", "[", "]", ",", "PipelineOutput", "]", ":", "\n", "  ", "\"\"\"Runs the generation pipeline for the HML datasets.\"\"\"", "\n", "def", "pipeline", "(", ")", "->", "PipelineOutput", ":", "\n", "    ", "train_examples", "=", "list", "(", ")", "\n", "test_examples", "=", "list", "(", ")", "\n", "with", "open", "(", "f\"{output_path}/features.txt\"", ",", "\"w\"", ")", "as", "f", ":", "\n", "      ", "save_features", "(", "f", ",", "generate", "(", "0", ")", ")", "\n", "", "with", "tf", ".", "io", ".", "TFRecordWriter", "(", "f\"{output_path}/train.tfrecord\"", ")", "as", "writer", ":", "\n", "      ", "for", "i", "in", "range", "(", "num_train", ")", ":", "\n", "        ", "example", "=", "generate", "(", "i", ")", "\n", "if", "return_generated_examples", ":", "\n", "          ", "train_examples", ".", "append", "(", "example", ")", "\n", "", "example", "=", "tf", ".", "train", ".", "Example", "(", "features", "=", "tf", ".", "train", ".", "Features", "(", "\n", "feature", "=", "encode_example", "(", "example", ")", ")", ")", "\n", "writer", ".", "write", "(", "example", ".", "SerializeToString", "(", ")", ")", "\n", "", "", "with", "tf", ".", "io", ".", "TFRecordWriter", "(", "f\"{output_path}/test.tfrecord\"", ")", "as", "writer", ":", "\n", "      ", "for", "i", "in", "range", "(", "num_test", ")", ":", "\n", "        ", "example", "=", "generate", "(", "num_train", "+", "i", ")", "\n", "if", "return_generated_examples", ":", "\n", "          ", "test_examples", ".", "append", "(", "example", ")", "\n", "", "example", "=", "tf", ".", "train", ".", "Example", "(", "features", "=", "tf", ".", "train", ".", "Features", "(", "\n", "feature", "=", "encode_example", "(", "example", ")", ")", ")", "\n", "writer", ".", "write", "(", "example", ".", "SerializeToString", "(", ")", ")", "\n", "", "", "if", "return_generated_examples", ":", "\n", "      ", "return", "tuple", "(", "train_examples", ")", ",", "tuple", "(", "test_examples", ")", "\n", "", "", "return", "pipeline", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.dm_hamiltonian_dynamics_suite.datasets.generate_full_dataset": [[219, 246], ["str().replace", "os.path.join", "datasets.set_up_folder", "globals().get", "cls", "functools.partial", "datasets.create_pipeline", "create_pipeline.", "dataset.upper", "str", "dataset.lower", "globals", "config"], "function", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.dm_hamiltonian_dynamics_suite.datasets.set_up_folder", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.dm_hamiltonian_dynamics_suite.datasets.create_pipeline"], ["", "def", "generate_full_dataset", "(", "\n", "folder", ":", "str", ",", "\n", "dataset", ":", "str", ",", "\n", "dt", ":", "float", ",", "\n", "num_steps", ":", "int", ",", "\n", "steps_per_dt", ":", "int", ",", "\n", "num_train", ":", "int", ",", "\n", "num_test", ":", "int", ",", "\n", "overwrite", ":", "bool", ",", "\n", "return_generated_examples", ":", "bool", "=", "False", ",", "\n", ")", "->", "PipelineOutput", ":", "\n", "  ", "\"\"\"Runs the data generation.\"\"\"", "\n", "dt_str", "=", "str", "(", "dt", ")", ".", "replace", "(", "\".\"", ",", "\"_\"", ")", "\n", "folder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "dataset", ".", "lower", "(", ")", "+", "f\"_dt_{dt_str}\"", ")", "\n", "set_up_folder", "(", "folder", ",", "overwrite", ")", "\n", "\n", "cls", ",", "config", "=", "globals", "(", ")", ".", "get", "(", "dataset", ".", "upper", "(", ")", ")", "\n", "system", "=", "cls", "(", "**", "config", "(", ")", ")", "\n", "generate", "=", "functools", ".", "partial", "(", "\n", "generate_sample", ",", "\n", "system", "=", "system", ",", "\n", "dt", "=", "dt", ",", "\n", "num_steps", "=", "num_steps", ",", "\n", "steps_per_dt", "=", "steps_per_dt", ")", "\n", "pipeline", "=", "create_pipeline", "(", "\n", "generate", ",", "folder", ",", "num_train", ",", "num_test", ",", "return_generated_examples", ")", "\n", "return", "pipeline", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.dm_hamiltonian_dynamics_suite.datasets.no_open_spiel_func": [[389, 391], ["ValueError"], "function", ["None"], ["def", "no_open_spiel_func", "(", "*", "_", ",", "**", "__", ")", ":", "\n", "  ", "raise", "ValueError", "(", "\"You must download and install `open_spiel` first in \"", "\n", "\"order to use the game_dynamics datasets. See \"", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.dm_hamiltonian_dynamics_suite.generate_dataset.main": [[53, 78], ["len", "ValueError", "dm_hamiltonian_dynamics_suite.molecular_dynamics.generate_dataset.generate_lammps_dataset", "dm_hamiltonian_dynamics_suite.datasets.generate_full_dataset"], "function", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.molecular_dynamics.generate_dataset.generate_lammps_dataset", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.dm_hamiltonian_dynamics_suite.datasets.generate_full_dataset"], ["def", "main", "(", "argv", ")", ":", "\n", "  ", "if", "len", "(", "argv", ")", ">", "1", ":", "\n", "    ", "raise", "ValueError", "(", "f\"Unexpected args: {argv[1:]}\"", ")", "\n", "", "if", "FLAGS", ".", "dataset", "==", "\"molecular_dynamics\"", ":", "\n", "    ", "generate_dataset", ".", "generate_lammps_dataset", "(", "\n", "lammps_file", "=", "FLAGS", ".", "lammps_file", ",", "\n", "folder", "=", "FLAGS", ".", "output_path", ",", "\n", "dt", "=", "FLAGS", ".", "dt", ",", "\n", "num_steps", "=", "FLAGS", ".", "num_steps", ",", "\n", "num_train", "=", "FLAGS", ".", "num_train", ",", "\n", "num_test", "=", "FLAGS", ".", "num_test", ",", "\n", "shuffle", "=", "FLAGS", ".", "shuffle", ",", "\n", "seed", "=", "FLAGS", ".", "seed", ",", "\n", "overwrite", "=", "FLAGS", ".", "overwrite", ",", "\n", ")", "\n", "", "else", ":", "\n", "    ", "datasets", ".", "generate_full_dataset", "(", "\n", "folder", "=", "FLAGS", ".", "folder", ",", "\n", "dataset", "=", "FLAGS", ".", "dataset", ",", "\n", "dt", "=", "FLAGS", ".", "dt", ",", "\n", "num_steps", "=", "FLAGS", ".", "num_steps", ",", "\n", "steps_per_dt", "=", "FLAGS", ".", "steps_per_dt", ",", "\n", "num_train", "=", "FLAGS", ".", "num_train", ",", "\n", "num_test", "=", "FLAGS", ".", "num_test", ",", "\n", "overwrite", "=", "FLAGS", ".", "overwrite", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.simple_analytic.PotentialFreeSystem.__init__": [[40, 57], ["dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.TimeIndependentHamiltonianSystem.__init__", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.multiagent_dynamics.game_dynamics.ZeroSumGame.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "system_dims", ":", "int", ",", "\n", "eigen_values_range", ":", "utils", ".", "BoxRegion", ",", "\n", "init_vector_range", ":", "utils", ".", "BoxRegion", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", "system_dims", "=", "system_dims", ",", "**", "kwargs", ")", "\n", "if", "eigen_values_range", ".", "dims", "!=", "0", "and", "eigen_values_range", ".", "dims", "!=", "system_dims", ":", "\n", "      ", "raise", "ValueError", "(", "f\"The eigen_values_range must be of the same dimensions \"", "\n", "f\"as the system dimensions, but is \"", "\n", "f\"{eigen_values_range.dims}.\"", ")", "\n", "", "if", "init_vector_range", ".", "dims", "!=", "0", "and", "init_vector_range", ".", "dims", "!=", "system_dims", ":", "\n", "      ", "raise", "ValueError", "(", "f\"The init_vector_range must be of the same dimensions \"", "\n", "f\"as the system dimensions, but is \"", "\n", "f\"{init_vector_range.dims}.\"", ")", "\n", "", "self", ".", "eigen_values_range", "=", "eigen_values_range", "\n", "self", ".", "init_vector_range", "=", "init_vector_range", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.simple_analytic.PotentialFreeSystem._hamiltonian": [[58, 69], ["len", "jax.sum", "jax.sum", "jax.matmul", "jax.matmul"], "methods", ["None"], ["", "def", "_hamiltonian", "(", "\n", "self", ",", "\n", "y", ":", "phase_space", ".", "PhaseSpace", ",", "\n", "params", ":", "utils", ".", "Params", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "jnp", ".", "ndarray", ":", "\n", "    ", "assert", "len", "(", "params", ")", "==", "1", "\n", "matrix", "=", "params", "[", "\"matrix\"", "]", "\n", "potential", "=", "0", "\n", "kinetic", "=", "jnp", ".", "sum", "(", "jnp", ".", "matmul", "(", "y", ".", "p", ",", "matrix", ")", "*", "y", ".", "p", ",", "axis", "=", "-", "1", ")", "/", "2", "\n", "return", "potential", "+", "kinetic", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.simple_analytic.PotentialFreeSystem.sample_y": [[70, 82], ["jax.uniform", "jax.uniform", "simple_analytic.PotentialFreeSystem.init_vector_range.convert_from_unit_interval", "dm_hamiltonian_dynamics_suite.hamiltonian_systems.phase_space.PhaseSpace.from_state"], "methods", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.BoxRegion.convert_from_unit_interval", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.phase_space.PhaseSpace.from_state"], ["", "def", "sample_y", "(", "\n", "self", ",", "\n", "num_samples", ":", "int", ",", "\n", "params", ":", "utils", ".", "Params", ",", "\n", "rng_key", ":", "jnp", ".", "ndarray", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "phase_space", ".", "PhaseSpace", ":", "\n", "# Sample random state", "\n", "    ", "y", "=", "jnr", ".", "uniform", "(", "rng_key", ",", "[", "num_samples", ",", "2", "*", "self", ".", "system_dims", "]", ",", "\n", "dtype", "=", "self", ".", "dtype", ")", "\n", "y", "=", "self", ".", "init_vector_range", ".", "convert_from_unit_interval", "(", "y", ")", "\n", "return", "phase_space", ".", "PhaseSpace", ".", "from_state", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.simple_analytic.PotentialFreeSystem.sample_params": [[83, 98], ["jax.split", "jax.split", "jax.normal", "jax.normal", "jax.linalg.qr", "jax.linalg.qr", "jax.uniform", "jax.uniform", "simple_analytic.PotentialFreeSystem.eigen_values_range.convert_from_unit_interval", "jax.matmul", "jax.matmul", "dict", "jax.swapaxes", "jax.swapaxes"], "methods", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.BoxRegion.convert_from_unit_interval"], ["", "def", "sample_params", "(", "\n", "self", ",", "\n", "num_samples", ":", "int", ",", "\n", "rng_key", ":", "jnp", ".", "ndarray", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "utils", ".", "Params", ":", "\n", "    ", "key1", ",", "key2", "=", "jnr", ".", "split", "(", "rng_key", ")", "\n", "matrix_shape", "=", "[", "num_samples", ",", "self", ".", "system_dims", ",", "self", ".", "system_dims", "]", "\n", "gaussian", "=", "jnr", ".", "normal", "(", "key1", ",", "matrix_shape", ")", "\n", "q", ",", "_", "=", "jnp", ".", "linalg", ".", "qr", "(", "gaussian", ")", "\n", "eigs", "=", "jnr", ".", "uniform", "(", "key2", ",", "[", "num_samples", ",", "self", ".", "system_dims", "]", ")", "\n", "eigs", "=", "self", ".", "eigen_values_range", ".", "convert_from_unit_interval", "(", "eigs", ")", "\n", "q_eigs", "=", "q", "*", "eigs", "[", "...", ",", "None", "]", "\n", "matrix", "=", "jnp", ".", "matmul", "(", "q_eigs", ",", "jnp", ".", "swapaxes", "(", "q_eigs", ",", "-", "2", ",", "-", "1", ")", ")", "\n", "return", "dict", "(", "matrix", "=", "matrix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.simple_analytic.PotentialFreeSystem.simulate_analytically": [[99, 115], ["dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.expand_to_rank_right", "dm_hamiltonian_dynamics_suite.hamiltonian_systems.phase_space.PhaseSpace", "len", "jax.ones_like", "jax.ones_like", "dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.vecmul"], "methods", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.expand_to_rank_right", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.vecmul"], ["", "def", "simulate_analytically", "(", "\n", "self", ",", "\n", "y0", ":", "phase_space", ".", "PhaseSpace", ",", "\n", "t0", ":", "utils", ".", "FloatArray", ",", "\n", "t_eval", ":", "jnp", ".", "ndarray", ",", "\n", "params", ":", "utils", ".", "Params", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "Optional", "[", "phase_space", ".", "PhaseSpace", "]", ":", "\n", "    ", "if", "self", ".", "friction", "!=", "0.0", ":", "\n", "      ", "return", "None", "\n", "", "assert", "len", "(", "params", ")", "==", "1", "\n", "matrix", "=", "params", "[", "\"matrix\"", "]", "\n", "t", "=", "utils", ".", "expand_to_rank_right", "(", "t_eval", "-", "t0", ",", "y0", ".", "q", ".", "ndim", "+", "1", ")", "\n", "q", "=", "y0", ".", "q", "[", "None", "]", "+", "utils", ".", "vecmul", "(", "matrix", ",", "y0", ".", "p", ")", "[", "None", "]", "*", "t", "\n", "p", "=", "y0", ".", "p", "[", "None", "]", "*", "jnp", ".", "ones_like", "(", "t", ")", "\n", "return", "phase_space", ".", "PhaseSpace", "(", "position", "=", "q", ",", "momentum", "=", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.simple_analytic.PotentialFreeSystem.canvas_bounds": [[116, 118], ["NotImplementedError"], "methods", ["None"], ["", "def", "canvas_bounds", "(", "self", ")", "->", "utils", ".", "BoxRegion", ":", "\n", "    ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.simple_analytic.PotentialFreeSystem.canvas_position": [[119, 125], ["NotImplementedError"], "methods", ["None"], ["", "def", "canvas_position", "(", "\n", "self", ",", "\n", "position", ":", "jnp", ".", "ndarray", ",", "\n", "params", ":", "utils", ".", "Params", "\n", ")", "->", "jnp", ".", "ndarray", ":", "\n", "    ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.simple_analytic.PotentialFreeSystem.render_trajectories": [[126, 134], ["NotImplementedError"], "methods", ["None"], ["", "def", "render_trajectories", "(", "\n", "self", ",", "\n", "position", ":", "jnp", ".", "ndarray", ",", "\n", "params", ":", "utils", ".", "Params", ",", "\n", "rng_key", ":", "jnp", ".", "ndarray", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "Tuple", "[", "jnp", ".", "ndarray", ",", "utils", ".", "Params", "]", ":", "\n", "    ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.simple_analytic.KineticFreeSystem._hamiltonian": [[150, 161], ["len", "jax.sum", "jax.sum", "jax.matmul", "jax.matmul"], "methods", ["None"], ["def", "_hamiltonian", "(", "\n", "self", ",", "\n", "y", ":", "phase_space", ".", "PhaseSpace", ",", "\n", "params", ":", "utils", ".", "Params", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "jnp", ".", "ndarray", ":", "\n", "    ", "assert", "len", "(", "params", ")", "==", "1", "\n", "matrix", "=", "params", "[", "\"matrix\"", "]", "\n", "potential", "=", "jnp", ".", "sum", "(", "jnp", ".", "matmul", "(", "y", ".", "q", ",", "matrix", ")", "*", "y", ".", "q", ",", "axis", "=", "-", "1", ")", "/", "2", "\n", "kinetic", "=", "0", "\n", "return", "potential", "+", "kinetic", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.simple_analytic.KineticFreeSystem.simulate_analytically": [[162, 178], ["dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.expand_to_rank_right", "dm_hamiltonian_dynamics_suite.hamiltonian_systems.phase_space.PhaseSpace", "len", "jax.ones_like", "jax.ones_like", "dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.vecmul"], "methods", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.expand_to_rank_right", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.vecmul"], ["", "def", "simulate_analytically", "(", "\n", "self", ",", "\n", "y0", ":", "phase_space", ".", "PhaseSpace", ",", "\n", "t0", ":", "utils", ".", "FloatArray", ",", "\n", "t_eval", ":", "jnp", ".", "ndarray", ",", "\n", "params", ":", "utils", ".", "Params", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "Optional", "[", "phase_space", ".", "PhaseSpace", "]", ":", "\n", "    ", "if", "self", ".", "friction", "!=", "0.0", ":", "\n", "      ", "return", "None", "\n", "", "assert", "len", "(", "params", ")", "==", "1", "\n", "matrix", "=", "params", "[", "\"matrix\"", "]", "\n", "t", "=", "utils", ".", "expand_to_rank_right", "(", "t_eval", "-", "t0", ",", "y0", ".", "q", ".", "ndim", "+", "1", ")", "\n", "q", "=", "y0", ".", "q", "[", "None", "]", "*", "jnp", ".", "ones_like", "(", "t", ")", "\n", "p", "=", "y0", ".", "p", "[", "None", "]", "-", "utils", ".", "vecmul", "(", "matrix", ",", "y0", ".", "q", ")", "[", "None", "]", "*", "t", "\n", "return", "phase_space", ".", "PhaseSpace", "(", "position", "=", "q", ",", "momentum", "=", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.simple_analytic.KineticFreeSystem.canvas_bounds": [[179, 181], ["NotImplementedError"], "methods", ["None"], ["", "def", "canvas_bounds", "(", "self", ")", "->", "utils", ".", "BoxRegion", ":", "\n", "    ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.simple_analytic.KineticFreeSystem.canvas_position": [[182, 188], ["NotImplementedError"], "methods", ["None"], ["", "def", "canvas_position", "(", "\n", "self", ",", "\n", "position", ":", "jnp", ".", "ndarray", ",", "\n", "params", ":", "utils", ".", "Params", "\n", ")", "->", "jnp", ".", "ndarray", ":", "\n", "    ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.simple_analytic.KineticFreeSystem.render_trajectories": [[189, 197], ["NotImplementedError"], "methods", ["None"], ["", "def", "render_trajectories", "(", "\n", "self", ",", "\n", "position", ":", "jnp", ".", "ndarray", ",", "\n", "params", ":", "utils", ".", "Params", ",", "\n", "rng_key", ":", "jnp", ".", "ndarray", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "Tuple", "[", "jnp", ".", "ndarray", ",", "utils", ".", "Params", "]", ":", "\n", "    ", "raise", "NotImplementedError", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.ideal_pendulum.IdealPendulum.__init__": [[47, 66], ["dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.TimeIndependentHamiltonianSystem.__init__", "functools.partial", "jax.vmap", "jax.vmap", "jax.vmap", "jax.vmap", "ideal_pendulum.IdealPendulum.full_canvas_bounds"], "methods", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.multiagent_dynamics.game_dynamics.ZeroSumGame.__init__", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.full_canvas_bounds"], ["def", "__init__", "(", "\n", "self", ",", "\n", "m_range", ":", "utils", ".", "BoxRegion", ",", "\n", "g_range", ":", "utils", ".", "BoxRegion", ",", "\n", "l_range", ":", "utils", ".", "BoxRegion", ",", "\n", "radius_range", ":", "utils", ".", "BoxRegion", ",", "\n", "uniform_annulus", ":", "bool", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", "system_dims", "=", "1", ",", "**", "kwargs", ")", "\n", "self", ".", "m_range", "=", "m_range", "\n", "self", ".", "g_range", "=", "g_range", "\n", "self", ".", "l_range", "=", "l_range", "\n", "self", ".", "radius_range", "=", "radius_range", "\n", "self", ".", "uniform_annulus", "=", "uniform_annulus", "\n", "render", "=", "functools", ".", "partial", "(", "utils", ".", "render_particles_trajectory", ",", "\n", "canvas_limits", "=", "self", ".", "full_canvas_bounds", "(", ")", ",", "\n", "resolution", "=", "self", ".", "resolution", ",", "\n", "num_colors", "=", "self", ".", "num_colors", ")", "\n", "self", ".", "_batch_render", "=", "jax", ".", "vmap", "(", "render", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.ideal_pendulum.IdealPendulum._hamiltonian": [[67, 80], ["len", "jax.cos", "jax.cos"], "methods", ["None"], ["", "def", "_hamiltonian", "(", "\n", "self", ",", "\n", "y", ":", "phase_space", ".", "PhaseSpace", ",", "\n", "params", ":", "utils", ".", "Params", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "jnp", ".", "ndarray", ":", "\n", "    ", "assert", "len", "(", "params", ")", "==", "3", "\n", "m", "=", "params", "[", "\"m\"", "]", "\n", "l", "=", "params", "[", "\"l\"", "]", "\n", "g", "=", "params", "[", "\"g\"", "]", "\n", "potential", "=", "m", "*", "g", "*", "l", "*", "(", "1", "-", "jnp", ".", "cos", "(", "y", ".", "q", "[", "...", ",", "0", "]", ")", ")", "\n", "kinetic", "=", "y", ".", "p", "[", "...", ",", "0", "]", "**", "2", "/", "(", "2", "*", "m", "*", "l", "**", "2", ")", "\n", "return", "potential", "+", "kinetic", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.ideal_pendulum.IdealPendulum.sample_y": [[81, 91], ["dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.uniform_annulus", "dm_hamiltonian_dynamics_suite.hamiltonian_systems.phase_space.PhaseSpace.from_state", "dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.uniform_annulus.astype"], "methods", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.uniform_annulus", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.phase_space.PhaseSpace.from_state"], ["", "def", "sample_y", "(", "\n", "self", ",", "\n", "num_samples", ":", "int", ",", "\n", "params", ":", "utils", ".", "Params", ",", "\n", "rng_key", ":", "jnp", ".", "ndarray", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "phase_space", ".", "PhaseSpace", ":", "\n", "    ", "state", "=", "utils", ".", "uniform_annulus", "(", "\n", "rng_key", ",", "num_samples", ",", "2", ",", "self", ".", "radius_range", ",", "self", ".", "uniform_annulus", ")", "\n", "return", "phase_space", ".", "PhaseSpace", ".", "from_state", "(", "state", ".", "astype", "(", "self", ".", "dtype", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.ideal_pendulum.IdealPendulum.sample_params": [[92, 106], ["jax.random.split", "jax.random.split", "jax.random.split", "jax.random.split", "jax.random.uniform", "jax.random.uniform", "jax.random.uniform", "jax.random.uniform", "jax.random.uniform", "jax.random.uniform", "jax.random.uniform", "jax.random.uniform", "jax.random.uniform", "jax.random.uniform", "jax.random.uniform", "jax.random.uniform", "dict"], "methods", ["None"], ["", "def", "sample_params", "(", "\n", "self", ",", "\n", "num_samples", ":", "int", ",", "\n", "rng_key", ":", "jnp", ".", "ndarray", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "utils", ".", "Params", ":", "\n", "    ", "key1", ",", "key2", ",", "key3", "=", "jax", ".", "random", ".", "split", "(", "rng_key", ",", "3", ")", "\n", "m", "=", "jax", ".", "random", ".", "uniform", "(", "key1", ",", "[", "num_samples", "]", ",", "minval", "=", "self", ".", "m_range", ".", "min", ",", "\n", "maxval", "=", "self", ".", "m_range", ".", "max", ")", "\n", "l", "=", "jax", ".", "random", ".", "uniform", "(", "key2", ",", "[", "num_samples", "]", ",", "minval", "=", "self", ".", "l_range", ".", "min", ",", "\n", "maxval", "=", "self", ".", "l_range", ".", "max", ")", "\n", "g", "=", "jax", ".", "random", ".", "uniform", "(", "key3", ",", "[", "num_samples", "]", ",", "minval", "=", "self", ".", "g_range", ".", "min", ",", "\n", "maxval", "=", "self", ".", "g_range", ".", "max", ")", "\n", "return", "dict", "(", "m", "=", "m", ",", "l", "=", "l", ",", "g", "=", "g", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.ideal_pendulum.IdealPendulum.simulate_analytically": [[107, 116], ["None"], "methods", ["None"], ["", "def", "simulate_analytically", "(", "\n", "self", ",", "\n", "y0", ":", "phase_space", ".", "PhaseSpace", ",", "\n", "t0", ":", "utils", ".", "FloatArray", ",", "\n", "t_eval", ":", "jnp", ".", "ndarray", ",", "\n", "params", ":", "utils", ".", "Params", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "Optional", "[", "phase_space", ".", "PhaseSpace", "]", ":", "\n", "    ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.ideal_pendulum.IdealPendulum.canvas_bounds": [[117, 120], ["dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.BoxRegion", "jax.sqrt", "jax.sqrt"], "methods", ["None"], ["", "def", "canvas_bounds", "(", "self", ")", "->", "utils", ".", "BoxRegion", ":", "\n", "    ", "max_d", "=", "self", ".", "l_range", ".", "max", "+", "jnp", ".", "sqrt", "(", "self", ".", "m_range", ".", "max", "/", "jnp", ".", "pi", ")", "\n", "return", "utils", ".", "BoxRegion", "(", "-", "max_d", ",", "max_d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.ideal_pendulum.IdealPendulum.canvas_position": [[121, 130], ["dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.expand_to_rank_right", "jax.stack", "jax.stack", "jax.sin", "jax.sin", "jax.cos", "jax.cos"], "methods", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.expand_to_rank_right"], ["", "def", "canvas_position", "(", "\n", "self", ",", "\n", "position", ":", "jnp", ".", "ndarray", ",", "\n", "params", ":", "utils", ".", "Params", "\n", ")", "->", "jnp", ".", "ndarray", ":", "\n", "    ", "l", "=", "utils", ".", "expand_to_rank_right", "(", "params", "[", "\"l\"", "]", ",", "2", ")", "\n", "y", "=", "jnp", ".", "sin", "(", "position", "[", "...", ",", "0", "]", "-", "jnp", ".", "pi", "/", "2.0", ")", "*", "l", "\n", "x", "=", "jnp", ".", "cos", "(", "position", "[", "...", ",", "1", "]", "-", "jnp", ".", "pi", "/", "2.0", ")", "*", "l", "\n", "return", "jnp", ".", "stack", "(", "[", "x", ",", "y", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.ideal_pendulum.IdealPendulum.render_trajectories": [[131, 159], ["dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.expand_to_rank_right", "jax.random.split", "jax.random.split", "jax.random.split", "jax.random.split", "ideal_pendulum.IdealPendulum.canvas_position", "jax.sqrt", "jax.sqrt", "ideal_pendulum.IdealPendulum._batch_render", "len", "jax.random.uniform", "jax.random.uniform", "jax.random.uniform", "jax.random.uniform", "ideal_pendulum.IdealPendulum.random_offset_bounds().convert_from_unit_interval", "jax.zeros", "jax.zeros", "jax.zeros().astype", "jax.zeros().astype", "jax.random.randint", "jax.random.randint", "jax.random.randint", "jax.random.randint", "dict", "ideal_pendulum.IdealPendulum.random_offset_bounds", "jax.zeros", "jax.zeros"], "methods", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.expand_to_rank_right", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.canvas_position", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.BoxRegion.convert_from_unit_interval", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.random_offset_bounds"], ["", "def", "render_trajectories", "(", "\n", "self", ",", "\n", "position", ":", "jnp", ".", "ndarray", ",", "\n", "params", ":", "utils", ".", "Params", ",", "\n", "rng_key", ":", "jnp", ".", "ndarray", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "Tuple", "[", "jnp", ".", "ndarray", ",", "utils", ".", "Params", "]", ":", "\n", "    ", "n", ",", "_", ",", "d", "=", "position", ".", "shape", "\n", "assert", "d", "==", "self", ".", "system_dims", "\n", "assert", "len", "(", "params", ")", "==", "3", "\n", "m", "=", "utils", ".", "expand_to_rank_right", "(", "params", "[", "\"m\"", "]", ",", "2", ")", "\n", "key1", ",", "key2", "=", "jax", ".", "random", ".", "split", "(", "rng_key", ",", "2", ")", "\n", "particles", "=", "self", ".", "canvas_position", "(", "position", ",", "params", ")", "\n", "if", "self", ".", "randomize_canvas_location", ":", "\n", "      ", "offset", "=", "jax", ".", "random", ".", "uniform", "(", "key1", ",", "shape", "=", "[", "n", ",", "2", "]", ")", "\n", "offset", "=", "self", ".", "random_offset_bounds", "(", ")", ".", "convert_from_unit_interval", "(", "offset", ")", "\n", "", "else", ":", "\n", "      ", "offset", "=", "jnp", ".", "zeros", "(", "shape", "=", "[", "n", ",", "2", "]", ")", "\n", "", "particles", "=", "particles", "+", "offset", "[", ":", ",", "None", ",", ":", "]", "\n", "particles", "=", "particles", "[", "...", ",", "None", ",", ":", "]", "\n", "particles_radius", "=", "jnp", ".", "sqrt", "(", "m", "/", "jnp", ".", "pi", ")", "\n", "if", "self", ".", "num_colors", "==", "1", ":", "\n", "      ", "color_index", "=", "jnp", ".", "zeros", "(", "[", "n", ",", "1", "]", ")", ".", "astype", "(", "\"int64\"", ")", "\n", "", "else", ":", "\n", "      ", "color_index", "=", "jax", ".", "random", ".", "randint", "(", "\n", "key", "=", "key2", ",", "shape", "=", "[", "n", ",", "1", "]", ",", "minval", "=", "0", ",", "maxval", "=", "self", ".", "num_colors", ")", "\n", "", "images", "=", "self", ".", "_batch_render", "(", "particles", ",", "particles_radius", ",", "color_index", ")", "\n", "return", "images", ",", "dict", "(", "offset", "=", "offset", ",", "color_index", "=", "color_index", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.ideal_mass_spring.IdealMassSpring.__init__": [[49, 68], ["dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.TimeIndependentHamiltonianSystem.__init__", "functools.partial", "jax.vmap", "jax.vmap", "jax.vmap", "jax.vmap", "ideal_mass_spring.IdealMassSpring.full_canvas_bounds"], "methods", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.multiagent_dynamics.game_dynamics.ZeroSumGame.__init__", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.full_canvas_bounds"], ["def", "__init__", "(", "\n", "self", ",", "\n", "k_range", ":", "utils", ".", "BoxRegion", ",", "\n", "m_range", ":", "utils", ".", "BoxRegion", ",", "\n", "radius_range", ":", "utils", ".", "BoxRegion", ",", "\n", "uniform_annulus", ":", "bool", "=", "True", ",", "\n", "randomize_x", ":", "bool", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", "system_dims", "=", "1", ",", "**", "kwargs", ")", "\n", "self", ".", "k_range", "=", "k_range", "\n", "self", ".", "m_range", "=", "m_range", "\n", "self", ".", "radius_range", "=", "radius_range", "\n", "self", ".", "uniform_annulus", "=", "uniform_annulus", "\n", "self", ".", "randomize_x", "=", "randomize_x", "\n", "render", "=", "functools", ".", "partial", "(", "utils", ".", "render_particles_trajectory", ",", "\n", "canvas_limits", "=", "self", ".", "full_canvas_bounds", "(", ")", ",", "\n", "resolution", "=", "self", ".", "resolution", ",", "\n", "num_colors", "=", "self", ".", "num_colors", ")", "\n", "self", ".", "_batch_render", "=", "jax", ".", "vmap", "(", "render", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.ideal_mass_spring.IdealMassSpring._hamiltonian": [[69, 81], ["len"], "methods", ["None"], ["", "def", "_hamiltonian", "(", "\n", "self", ",", "\n", "y", ":", "phase_space", ".", "PhaseSpace", ",", "\n", "params", ":", "utils", ".", "Params", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "jnp", ".", "ndarray", ":", "\n", "    ", "assert", "len", "(", "params", ")", "==", "2", "\n", "k", "=", "params", "[", "\"k\"", "]", "\n", "m", "=", "params", "[", "\"m\"", "]", "\n", "potential", "=", "k", "*", "y", ".", "q", "[", "...", ",", "0", "]", "**", "2", "/", "2", "\n", "kinetic", "=", "y", ".", "p", "[", "...", ",", "0", "]", "**", "2", "/", "(", "2", "*", "m", ")", "\n", "return", "potential", "+", "kinetic", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.ideal_mass_spring.IdealMassSpring.sample_y": [[82, 97], ["dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.uniform_annulus", "dm_hamiltonian_dynamics_suite.hamiltonian_systems.phase_space.PhaseSpace", "len", "jax.sqrt", "jax.sqrt"], "methods", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.uniform_annulus"], ["", "def", "sample_y", "(", "\n", "self", ",", "\n", "num_samples", ":", "int", ",", "\n", "params", ":", "utils", ".", "Params", ",", "\n", "rng_key", ":", "jnp", ".", "ndarray", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "phase_space", ".", "PhaseSpace", ":", "\n", "    ", "assert", "len", "(", "params", ")", "==", "2", "\n", "k", "=", "params", "[", "\"k\"", "]", "\n", "m", "=", "params", "[", "\"m\"", "]", "\n", "state", "=", "utils", ".", "uniform_annulus", "(", "\n", "rng_key", ",", "num_samples", ",", "2", ",", "self", ".", "radius_range", ",", "self", ".", "uniform_annulus", ")", "\n", "q", "=", "state", "[", "...", ",", ":", "1", "]", "\n", "p", "=", "state", "[", "...", ",", "1", ":", "]", "*", "jnp", ".", "sqrt", "(", "k", "*", "m", ")", "\n", "return", "phase_space", ".", "PhaseSpace", "(", "position", "=", "q", ",", "momentum", "=", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.ideal_mass_spring.IdealMassSpring.sample_params": [[98, 110], ["jax.random.split", "jax.random.split", "jax.random.split", "jax.random.split", "jax.random.uniform", "jax.random.uniform", "jax.random.uniform", "jax.random.uniform", "jax.random.uniform", "jax.random.uniform", "jax.random.uniform", "jax.random.uniform", "dict"], "methods", ["None"], ["", "def", "sample_params", "(", "\n", "self", ",", "\n", "num_samples", ":", "int", ",", "\n", "rng_key", ":", "jnp", ".", "ndarray", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "utils", ".", "Params", ":", "\n", "    ", "key1", ",", "key2", "=", "jax", ".", "random", ".", "split", "(", "rng_key", ")", "\n", "k", "=", "jax", ".", "random", ".", "uniform", "(", "key1", ",", "[", "num_samples", "]", ",", "minval", "=", "self", ".", "k_range", ".", "min", ",", "\n", "maxval", "=", "self", ".", "k_range", ".", "max", ")", "\n", "m", "=", "jax", ".", "random", ".", "uniform", "(", "key2", ",", "[", "num_samples", "]", ",", "minval", "=", "self", ".", "m_range", ".", "min", ",", "\n", "maxval", "=", "self", ".", "m_range", ".", "max", ")", "\n", "return", "dict", "(", "k", "=", "k", ",", "m", "=", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.ideal_mass_spring.IdealMassSpring.simulate_analytically": [[111, 134], ["jax.sqrt().astype", "jax.sqrt().astype", "jax.sqrt", "jax.sqrt", "jax.arctan2", "jax.arctan2", "dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.expand_to_rank_right", "dm_hamiltonian_dynamics_suite.hamiltonian_systems.phase_space.PhaseSpace", "len", "jax.cos", "jax.cos", "jax.sin", "jax.sin", "jax.sqrt", "jax.sqrt"], "methods", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.expand_to_rank_right"], ["", "def", "simulate_analytically", "(", "\n", "self", ",", "\n", "y0", ":", "phase_space", ".", "PhaseSpace", ",", "\n", "t0", ":", "utils", ".", "FloatArray", ",", "\n", "t_eval", ":", "jnp", ".", "ndarray", ",", "\n", "params", ":", "utils", ".", "Params", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "Optional", "[", "phase_space", ".", "PhaseSpace", "]", ":", "\n", "    ", "if", "self", ".", "friction", "!=", "0.0", ":", "\n", "      ", "return", "None", "\n", "", "assert", "len", "(", "params", ")", "==", "2", "\n", "k", "=", "params", "[", "\"k\"", "]", "\n", "m", "=", "params", "[", "\"m\"", "]", "\n", "t", "=", "t_eval", "-", "t0", "\n", "w", "=", "jnp", ".", "sqrt", "(", "k", "/", "m", ")", ".", "astype", "(", "self", ".", "dtype", ")", "\n", "a", "=", "jnp", ".", "sqrt", "(", "y0", ".", "q", "[", "...", ",", "0", "]", "**", "2", "+", "y0", ".", "p", "[", "...", ",", "0", "]", "**", "2", "/", "(", "k", "*", "m", ")", ")", "\n", "b", "=", "jnp", ".", "arctan2", "(", "-", "y0", ".", "p", "[", "...", ",", "0", "]", ",", "y0", ".", "q", "[", "...", ",", "0", "]", "*", "m", "*", "w", ")", "\n", "w", ",", "a", ",", "b", ",", "m", "=", "w", "[", "...", ",", "None", "]", ",", "a", "[", "...", ",", "None", "]", ",", "b", "[", "...", ",", "None", "]", ",", "m", "[", "...", ",", "None", "]", "\n", "t", "=", "utils", ".", "expand_to_rank_right", "(", "t", ",", "y0", ".", "q", ".", "ndim", "+", "1", ")", "\n", "\n", "q", "=", "a", "*", "jnp", ".", "cos", "(", "w", "*", "t", "+", "b", ")", "\n", "p", "=", "-", "a", "*", "m", "*", "w", "*", "jnp", ".", "sin", "(", "w", "*", "t", "+", "b", ")", "\n", "return", "phase_space", ".", "PhaseSpace", "(", "position", "=", "q", ",", "momentum", "=", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.ideal_mass_spring.IdealMassSpring.canvas_bounds": [[135, 139], ["jax.sqrt", "jax.sqrt", "dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.BoxRegion"], "methods", ["None"], ["", "def", "canvas_bounds", "(", "self", ")", "->", "utils", ".", "BoxRegion", ":", "\n", "    ", "max_x", "=", "self", ".", "radius_range", ".", "max", "\n", "max_r", "=", "jnp", ".", "sqrt", "(", "self", ".", "m_range", ".", "max", "/", "jnp", ".", "pi", ")", "\n", "return", "utils", ".", "BoxRegion", "(", "-", "max_x", "-", "max_r", ",", "max_x", "+", "max_r", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.ideal_mass_spring.IdealMassSpring.canvas_position": [[140, 146], ["jax.stack", "jax.stack", "jax.zeros_like", "jax.zeros_like"], "methods", ["None"], ["", "def", "canvas_position", "(", "\n", "self", ",", "\n", "position", ":", "jnp", ".", "ndarray", ",", "\n", "params", ":", "utils", ".", "Params", "\n", ")", "->", "jnp", ".", "ndarray", ":", "\n", "    ", "return", "jnp", ".", "stack", "(", "[", "jnp", ".", "zeros_like", "(", "position", ")", ",", "position", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.ideal_mass_spring.IdealMassSpring.render_trajectories": [[147, 179], ["jax.random.split", "jax.random.split", "jax.random.split", "jax.random.split", "dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.expand_to_rank_right", "ideal_mass_spring.IdealMassSpring.canvas_position", "jax.sqrt", "jax.sqrt", "ideal_mass_spring.IdealMassSpring._batch_render", "len", "jax.random.uniform", "jax.random.uniform", "jax.random.uniform", "jax.random.uniform", "jax.zeros_like", "jax.zeros_like", "jax.stack", "jax.stack", "jax.zeros", "jax.zeros", "jax.random.uniform", "jax.random.uniform", "jax.random.uniform", "jax.random.uniform", "ideal_mass_spring.IdealMassSpring.random_offset_bounds().convert_from_unit_interval", "jax.zeros().astype", "jax.zeros().astype", "jax.random.randint", "jax.random.randint", "jax.random.randint", "jax.random.randint", "dict", "ideal_mass_spring.IdealMassSpring.random_offset_bounds", "jax.zeros", "jax.zeros"], "methods", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.expand_to_rank_right", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.canvas_position", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.BoxRegion.convert_from_unit_interval", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.random_offset_bounds"], ["", "def", "render_trajectories", "(", "\n", "self", ",", "\n", "position", ":", "jnp", ".", "ndarray", ",", "\n", "params", ":", "utils", ".", "Params", ",", "\n", "rng_key", ":", "jnp", ".", "ndarray", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "Tuple", "[", "jnp", ".", "ndarray", ",", "utils", ".", "Params", "]", ":", "\n", "    ", "n", ",", "_", ",", "d", "=", "position", ".", "shape", "\n", "assert", "d", "==", "self", ".", "system_dims", "\n", "assert", "len", "(", "params", ")", "==", "2", "\n", "key1", ",", "key2", "=", "jax", ".", "random", ".", "split", "(", "rng_key", ")", "\n", "m", "=", "utils", ".", "expand_to_rank_right", "(", "params", "[", "\"m\"", "]", ",", "2", ")", "\n", "particles", "=", "self", ".", "canvas_position", "(", "position", ",", "params", ")", "\n", "if", "self", ".", "randomize_x", ":", "\n", "      ", "x_offset", "=", "jax", ".", "random", ".", "uniform", "(", "key1", ",", "shape", "=", "[", "n", "]", ")", "\n", "y_offset", "=", "jnp", ".", "zeros_like", "(", "x_offset", ")", "\n", "offset", "=", "jnp", ".", "stack", "(", "[", "x_offset", ",", "y_offset", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "      ", "offset", "=", "jnp", ".", "zeros", "(", "[", "n", ",", "d", "]", ")", "\n", "", "if", "self", ".", "randomize_canvas_location", ":", "\n", "      ", "offset_", "=", "jax", ".", "random", ".", "uniform", "(", "key2", ",", "shape", "=", "[", "n", ",", "d", "]", ")", "\n", "offset_", "=", "self", ".", "random_offset_bounds", "(", ")", ".", "convert_from_unit_interval", "(", "offset_", ")", "\n", "offset", "=", "offset", "+", "offset_", "\n", "", "particles", "=", "particles", "+", "offset", "[", ":", ",", "None", ",", "None", ",", ":", "]", "\n", "particles_radius", "=", "jnp", ".", "sqrt", "(", "m", "/", "jnp", ".", "pi", ")", "\n", "if", "self", ".", "num_colors", "==", "1", ":", "\n", "      ", "color_index", "=", "jnp", ".", "zeros", "(", "[", "n", ",", "1", "]", ")", ".", "astype", "(", "\"int64\"", ")", "\n", "", "else", ":", "\n", "      ", "color_index", "=", "jax", ".", "random", ".", "randint", "(", "\n", "key", "=", "rng_key", ",", "shape", "=", "[", "n", ",", "1", "]", ",", "minval", "=", "0", ",", "maxval", "=", "self", ".", "num_colors", ")", "\n", "", "images", "=", "self", ".", "_batch_render", "(", "particles", ",", "particles_radius", ",", "color_index", ")", "\n", "return", "images", ",", "dict", "(", "offset", "=", "offset", ",", "color_index", "=", "color_index", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.phase_space.PhaseSpace.__init__": [[27, 30], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "position", ":", "jnp", ".", "ndarray", ",", "momentum", ":", "jnp", ".", "ndarray", ")", ":", "\n", "    ", "self", ".", "_position", "=", "position", "\n", "self", ".", "_momentum", "=", "momentum", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.phase_space.PhaseSpace.position": [[31, 35], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "position", "(", "self", ")", "->", "jnp", ".", "ndarray", ":", "\n", "    ", "\"\"\"The position element of the phase space.\"\"\"", "\n", "return", "self", ".", "_position", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.phase_space.PhaseSpace.momentum": [[36, 40], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "momentum", "(", "self", ")", "->", "jnp", ".", "ndarray", ":", "\n", "    ", "\"\"\"The momentum element of the phase space.\"\"\"", "\n", "return", "self", ".", "_momentum", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.phase_space.PhaseSpace.q": [[41, 45], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "q", "(", "self", ")", "->", "jnp", ".", "ndarray", ":", "\n", "    ", "\"\"\"A shorthand for the position element of the phase space.\"\"\"", "\n", "return", "self", ".", "_position", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.phase_space.PhaseSpace.p": [[46, 50], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "p", "(", "self", ")", "->", "jnp", ".", "ndarray", ":", "\n", "    ", "\"\"\"A shorthand for the momentum element of the phase space.\"\"\"", "\n", "return", "self", ".", "_momentum", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.phase_space.PhaseSpace.single_state": [[51, 55], ["jax.numpy.concatenate"], "methods", ["None"], ["", "@", "property", "\n", "def", "single_state", "(", "self", ")", "->", "jnp", ".", "ndarray", ":", "\n", "    ", "\"\"\"Returns the concatenation of position and momentum.\"\"\"", "\n", "return", "jnp", ".", "concatenate", "(", "[", "self", ".", "q", ",", "self", ".", "p", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.phase_space.PhaseSpace.ndim": [[56, 60], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ndim", "(", "self", ")", "->", "int", ":", "\n", "    ", "\"\"\"Returns the number of dimensions of the position array.\"\"\"", "\n", "return", "self", ".", "q", ".", "ndim", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.phase_space.PhaseSpace.from_state": [[61, 65], ["jax.numpy.split", "cls"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_state", "(", "cls", ":", "Type", "[", "\"PhaseSpace\"", "]", ",", "state", ":", "jnp", ".", "ndarray", ")", "->", "\"PhaseSpace\"", ":", "\n", "    ", "q", ",", "p", "=", "jnp", ".", "split", "(", "state", ",", "2", ",", "axis", "=", "-", "1", ")", "\n", "return", "cls", "(", "position", "=", "q", ",", "momentum", "=", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.phase_space.PhaseSpace.__str__": [[66, 68], ["type"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", "->", "str", ":", "\n", "    ", "return", "f\"{type(self).__name__}(q={self.position}, p={self.momentum})\"", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.phase_space.PhaseSpace.__repr__": [[69, 71], ["phase_space.PhaseSpace.__str__"], "methods", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.BoxRegion.__str__"], ["", "def", "__repr__", "(", "self", ")", "->", "str", ":", "\n", "    ", "return", "self", ".", "__str__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.phase_space.TangentPhaseSpace.__add__": [[76, 88], ["isinstance", "phase_space.TangentPhaseSpace", "isinstance", "phase_space.PhaseSpace", "ValueError", "type"], "methods", ["None"], ["def", "__add__", "(", "\n", "self", ",", "\n", "other", ":", "Union", "[", "PhaseSpace", ",", "\"TangentPhaseSpace\"", "]", ",", "\n", ")", "->", "Union", "[", "PhaseSpace", ",", "\"TangentPhaseSpace\"", "]", ":", "\n", "    ", "if", "isinstance", "(", "other", ",", "TangentPhaseSpace", ")", ":", "\n", "      ", "return", "TangentPhaseSpace", "(", "position", "=", "self", ".", "q", "+", "other", ".", "q", ",", "\n", "momentum", "=", "self", ".", "p", "+", "other", ".", "p", ")", "\n", "", "elif", "isinstance", "(", "other", ",", "PhaseSpace", ")", ":", "\n", "      ", "return", "PhaseSpace", "(", "position", "=", "self", ".", "q", "+", "other", ".", "q", ",", "\n", "momentum", "=", "self", ".", "p", "+", "other", ".", "p", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "f\"Can not add TangentPhaseSpace and {type(other)}.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.phase_space.TangentPhaseSpace.__radd__": [[89, 94], ["phase_space.TangentPhaseSpace.__add__"], "methods", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.phase_space.TangentPhaseSpace.__add__"], ["", "", "def", "__radd__", "(", "\n", "self", ",", "\n", "other", ":", "Union", "[", "PhaseSpace", ",", "\"TangentPhaseSpace\"", "]", "\n", ")", "->", "Union", "[", "PhaseSpace", ",", "\"TangentPhaseSpace\"", "]", ":", "\n", "    ", "return", "self", ".", "__add__", "(", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.phase_space.TangentPhaseSpace.__mul__": [[95, 98], ["phase_space.TangentPhaseSpace"], "methods", ["None"], ["", "def", "__mul__", "(", "self", ",", "other", ":", "jnp", ".", "ndarray", ")", "->", "\"TangentPhaseSpace\"", ":", "\n", "    ", "return", "TangentPhaseSpace", "(", "position", "=", "self", ".", "q", "*", "other", ",", "\n", "momentum", "=", "self", ".", "p", "*", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.phase_space.TangentPhaseSpace.__rmul__": [[99, 101], ["phase_space.TangentPhaseSpace.__mul__"], "methods", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.phase_space.TangentPhaseSpace.__mul__"], ["", "def", "__rmul__", "(", "self", ",", "other", ")", ":", "\n", "    ", "return", "self", ".", "__mul__", "(", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.phase_space.TangentPhaseSpace.zero": [[102, 105], ["cls", "jax.numpy.asarray", "jax.numpy.asarray"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "zero", "(", "cls", ":", "Type", "[", "\"TangentPhaseSpace\"", "]", ")", "->", "\"TangentPhaseSpace\"", ":", "\n", "    ", "return", "cls", "(", "position", "=", "jnp", ".", "asarray", "(", "0.0", ")", ",", "momentum", "=", "jnp", ".", "asarray", "(", "0.0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.phase_space.poisson_bracket_with_q_and_p": [[132, 142], ["phase_space.TangentPhaseSpace", "jax.grad", "jax.numpy.sum", "f"], "function", ["None"], ["def", "poisson_bracket_with_q_and_p", "(", "\n", "f", ":", "HamiltonianFunction", "\n", ")", "->", "SymplecticTangentFunction", ":", "\n", "  ", "\"\"\"Returns a function that computes the Poisson brackets {q,f} and {p,f}.\"\"\"", "\n", "def", "bracket", "(", "t", ":", "jnp", ".", "ndarray", ",", "y", ":", "PhaseSpace", ")", "->", "TangentPhaseSpace", ":", "\n", "# Use the summation trick for getting gradient", "\n", "# Note that the first argument to the hamiltonian is t", "\n", "    ", "grad", "=", "jax", ".", "grad", "(", "lambda", "*", "args", ":", "jnp", ".", "sum", "(", "f", "(", "*", "args", ")", ")", ",", "argnums", "=", "1", ")", "(", "t", ",", "y", ")", "\n", "return", "TangentPhaseSpace", "(", "position", "=", "grad", ".", "p", ",", "momentum", "=", "-", "grad", ".", "q", ")", "\n", "", "return", "bracket", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.phase_space.transform_symplectic_tangent_function_using_array": [[144, 151], ["functools.wraps", "func", "phase_space.PhaseSpace.from_state"], "function", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.phase_space.PhaseSpace.from_state"], ["", "def", "transform_symplectic_tangent_function_using_array", "(", "\n", "func", ":", "SymplecticTangentFunction", "\n", ")", "->", "SymplecticTangentFunctionArray", ":", "\n", "  ", "@", "functools", ".", "wraps", "(", "func", ")", "\n", "def", "wrapped", "(", "t", ":", "jnp", ".", "ndarray", ",", "state", ":", "jnp", ".", "ndarray", ")", "->", "jnp", ".", "ndarray", ":", "\n", "    ", "return", "func", "(", "t", ",", "PhaseSpace", ".", "from_state", "(", "state", ")", ")", ".", "single_state", "\n", "", "return", "wrapped", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.ideal_double_pendulum.IdealDoublePendulum.__init__": [[52, 72], ["dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.TimeIndependentHamiltonianSystem.__init__", "functools.partial", "jax.vmap", "jax.vmap", "jax.vmap", "jax.vmap", "ideal_double_pendulum.IdealDoublePendulum.full_canvas_bounds"], "methods", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.multiagent_dynamics.game_dynamics.ZeroSumGame.__init__", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.full_canvas_bounds"], ["def", "__init__", "(", "\n", "self", ",", "\n", "m_range", ":", "utils", ".", "BoxRegion", ",", "\n", "g_range", ":", "utils", ".", "BoxRegion", ",", "\n", "l_range", ":", "utils", ".", "BoxRegion", ",", "\n", "radius_range", ":", "utils", ".", "BoxRegion", ",", "\n", "uniform_annulus", ":", "bool", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", "system_dims", "=", "2", ",", "**", "kwargs", ")", "\n", "self", ".", "m_range", "=", "m_range", "\n", "self", ".", "g_range", "=", "g_range", "\n", "self", ".", "l_range", "=", "l_range", "\n", "self", ".", "radius_range", "=", "radius_range", "\n", "self", ".", "uniform_annulus", "=", "uniform_annulus", "\n", "render", "=", "functools", ".", "partial", "(", "\n", "utils", ".", "render_particles_trajectory", ",", "\n", "canvas_limits", "=", "self", ".", "full_canvas_bounds", "(", ")", ",", "\n", "resolution", "=", "self", ".", "resolution", ",", "\n", "num_colors", "=", "self", ".", "num_colors", ")", "\n", "self", ".", "_batch_render", "=", "jax", ".", "vmap", "(", "render", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.ideal_double_pendulum.IdealDoublePendulum._hamiltonian": [[73, 97], ["len", "jax.cos", "jax.cos", "jax.cos", "jax.cos", "jax.cos", "jax.cos", "jax.sin", "jax.sin"], "methods", ["None"], ["", "def", "_hamiltonian", "(", "\n", "self", ",", "\n", "y", ":", "phase_space", ".", "PhaseSpace", ",", "\n", "params", ":", "utils", ".", "Params", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "jnp", ".", "ndarray", ":", "\n", "    ", "assert", "len", "(", "params", ")", "==", "5", "\n", "m_1", "=", "params", "[", "\"m_1\"", "]", "\n", "l_1", "=", "params", "[", "\"l_1\"", "]", "\n", "m_2", "=", "params", "[", "\"m_2\"", "]", "\n", "l_2", "=", "params", "[", "\"l_2\"", "]", "\n", "g", "=", "params", "[", "\"g\"", "]", "\n", "\n", "q_1", ",", "q_2", "=", "y", ".", "q", "[", "...", ",", "0", "]", ",", "y", ".", "q", "[", "...", ",", "1", "]", "\n", "p_1", ",", "p_2", "=", "y", ".", "p", "[", "...", ",", "0", "]", ",", "y", ".", "p", "[", "...", ",", "1", "]", "\n", "\n", "a_1", "=", "m_2", "*", "l_2", "**", "2", "*", "p_1", "**", "2", "\n", "a_2", "=", "(", "m_1", "+", "m_2", ")", "*", "l_1", "**", "2", "*", "p_2", "**", "2", "\n", "a_3", "=", "2", "*", "m_2", "*", "l_1", "*", "l_2", "*", "p_1", "*", "p_2", "*", "jnp", ".", "cos", "(", "q_1", "-", "q_2", ")", "\n", "b_1", "=", "2", "*", "m_2", "*", "l_1", "**", "2", "*", "l_2", "**", "2", "\n", "b_2", "=", "(", "m_1", "+", "m_2", "*", "jnp", ".", "sin", "(", "q_1", "-", "q_2", ")", "**", "2", ")", "\n", "c_1", "=", "(", "m_1", "+", "m_2", ")", "*", "g", "*", "l_1", "*", "jnp", ".", "cos", "(", "q_1", ")", "\n", "c_2", "=", "m_2", "*", "g", "*", "l_2", "*", "jnp", ".", "cos", "(", "q_2", ")", "\n", "return", "(", "a_1", "+", "a_2", "-", "a_3", ")", "/", "(", "b_1", "*", "b_2", ")", "-", "c_1", "-", "c_2", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.ideal_double_pendulum.IdealDoublePendulum.sample_y": [[98, 113], ["jax.random.split", "jax.random.split", "jax.random.split", "jax.random.split", "dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.uniform_annulus", "dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.uniform_annulus", "jax.stack", "jax.stack", "dm_hamiltonian_dynamics_suite.hamiltonian_systems.phase_space.PhaseSpace.from_state", "jax.stack.astype"], "methods", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.uniform_annulus", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.uniform_annulus", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.phase_space.PhaseSpace.from_state"], ["", "def", "sample_y", "(", "\n", "self", ",", "\n", "num_samples", ":", "int", ",", "\n", "params", ":", "utils", ".", "Params", ",", "\n", "rng_key", ":", "jnp", ".", "ndarray", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "phase_space", ".", "PhaseSpace", ":", "\n", "    ", "key1", ",", "key2", "=", "jax", ".", "random", ".", "split", "(", "rng_key", ")", "\n", "state_1", "=", "utils", ".", "uniform_annulus", "(", "\n", "key1", ",", "num_samples", ",", "2", ",", "self", ".", "radius_range", ",", "self", ".", "uniform_annulus", ")", "\n", "state_2", "=", "utils", ".", "uniform_annulus", "(", "\n", "key2", ",", "num_samples", ",", "2", ",", "self", ".", "radius_range", ",", "self", ".", "uniform_annulus", ")", "\n", "state", "=", "jnp", ".", "stack", "(", "[", "state_1", "[", "...", ",", "0", "]", ",", "state_2", "[", "...", ",", "0", "]", ",", "\n", "state_1", "[", "...", ",", "1", "]", ",", "state_2", "[", "...", ",", "1", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "return", "phase_space", ".", "PhaseSpace", ".", "from_state", "(", "state", ".", "astype", "(", "self", ".", "dtype", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.ideal_double_pendulum.IdealDoublePendulum.sample_params": [[114, 132], ["jax.random.split", "jax.random.split", "jax.random.split", "jax.random.split", "jax.random.uniform", "jax.random.uniform", "jax.random.uniform", "jax.random.uniform", "jax.random.uniform", "jax.random.uniform", "jax.random.uniform", "jax.random.uniform", "jax.random.uniform", "jax.random.uniform", "jax.random.uniform", "jax.random.uniform", "jax.random.uniform", "jax.random.uniform", "jax.random.uniform", "jax.random.uniform", "jax.random.uniform", "jax.random.uniform", "jax.random.uniform", "jax.random.uniform", "dict"], "methods", ["None"], ["", "def", "sample_params", "(", "\n", "self", ",", "\n", "num_samples", ":", "int", ",", "\n", "rng_key", ":", "jnp", ".", "ndarray", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "utils", ".", "Params", ":", "\n", "    ", "keys", "=", "jax", ".", "random", ".", "split", "(", "rng_key", ",", "5", ")", "\n", "m_1", "=", "jax", ".", "random", ".", "uniform", "(", "keys", "[", "0", "]", ",", "[", "num_samples", "]", ",", "minval", "=", "self", ".", "m_range", ".", "min", ",", "\n", "maxval", "=", "self", ".", "m_range", ".", "max", ")", "\n", "m_2", "=", "jax", ".", "random", ".", "uniform", "(", "keys", "[", "1", "]", ",", "[", "num_samples", "]", ",", "minval", "=", "self", ".", "m_range", ".", "min", ",", "\n", "maxval", "=", "self", ".", "m_range", ".", "max", ")", "\n", "l_1", "=", "jax", ".", "random", ".", "uniform", "(", "keys", "[", "2", "]", ",", "[", "num_samples", "]", ",", "minval", "=", "self", ".", "l_range", ".", "min", ",", "\n", "maxval", "=", "self", ".", "l_range", ".", "max", ")", "\n", "l_2", "=", "jax", ".", "random", ".", "uniform", "(", "keys", "[", "3", "]", ",", "[", "num_samples", "]", ",", "minval", "=", "self", ".", "l_range", ".", "min", ",", "\n", "maxval", "=", "self", ".", "l_range", ".", "max", ")", "\n", "g", "=", "jax", ".", "random", ".", "uniform", "(", "keys", "[", "4", "]", ",", "[", "num_samples", "]", ",", "minval", "=", "self", ".", "g_range", ".", "min", ",", "\n", "maxval", "=", "self", ".", "g_range", ".", "max", ")", "\n", "return", "dict", "(", "m_1", "=", "m_1", ",", "m_2", "=", "m_2", ",", "l_1", "=", "l_1", ",", "l_2", "=", "l_2", ",", "g", "=", "g", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.ideal_double_pendulum.IdealDoublePendulum.simulate_analytically": [[133, 142], ["None"], "methods", ["None"], ["", "def", "simulate_analytically", "(", "\n", "self", ",", "\n", "y0", ":", "phase_space", ".", "PhaseSpace", ",", "\n", "t0", ":", "utils", ".", "FloatArray", ",", "\n", "t_eval", ":", "jnp", ".", "ndarray", ",", "\n", "params", ":", "utils", ".", "Params", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "Optional", "[", "phase_space", ".", "PhaseSpace", "]", ":", "\n", "    ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.ideal_double_pendulum.IdealDoublePendulum.canvas_bounds": [[143, 146], ["dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.BoxRegion", "jax.sqrt", "jax.sqrt"], "methods", ["None"], ["", "def", "canvas_bounds", "(", "self", ")", "->", "utils", ".", "BoxRegion", ":", "\n", "    ", "max_d", "=", "2", "*", "self", ".", "l_range", ".", "max", "+", "jnp", ".", "sqrt", "(", "self", ".", "m_range", ".", "max", "/", "jnp", ".", "pi", ")", "\n", "return", "utils", ".", "BoxRegion", "(", "-", "max_d", ",", "max_d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.ideal_double_pendulum.IdealDoublePendulum.canvas_position": [[147, 161], ["dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.expand_to_rank_right", "dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.expand_to_rank_right", "jax.stack", "jax.stack", "jax.stack", "jax.stack", "jax.stack", "jax.stack", "jax.sin", "jax.sin", "jax.cos", "jax.cos", "jax.sin", "jax.sin", "jax.cos", "jax.cos"], "methods", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.expand_to_rank_right", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.expand_to_rank_right"], ["", "def", "canvas_position", "(", "\n", "self", ",", "\n", "position", ":", "jnp", ".", "ndarray", ",", "\n", "params", ":", "utils", ".", "Params", "\n", ")", "->", "jnp", ".", "ndarray", ":", "\n", "    ", "l_1", "=", "utils", ".", "expand_to_rank_right", "(", "params", "[", "\"l_1\"", "]", ",", "2", ")", "\n", "l_2", "=", "utils", ".", "expand_to_rank_right", "(", "params", "[", "\"l_2\"", "]", ",", "2", ")", "\n", "y_1", "=", "jnp", ".", "sin", "(", "position", "[", "...", ",", "0", "]", "-", "jnp", ".", "pi", "/", "2.0", ")", "*", "l_1", "\n", "x_1", "=", "jnp", ".", "cos", "(", "position", "[", "...", ",", "0", "]", "-", "jnp", ".", "pi", "/", "2.0", ")", "*", "l_1", "\n", "position_1", "=", "jnp", ".", "stack", "(", "[", "x_1", ",", "y_1", "]", ",", "axis", "=", "-", "1", ")", "\n", "y_2", "=", "jnp", ".", "sin", "(", "position", "[", "...", ",", "1", "]", "-", "jnp", ".", "pi", "/", "2.0", ")", "*", "l_2", "\n", "x_2", "=", "jnp", ".", "cos", "(", "position", "[", "...", ",", "1", "]", "-", "jnp", ".", "pi", "/", "2.0", ")", "*", "l_2", "\n", "position_2", "=", "jnp", ".", "stack", "(", "[", "x_2", ",", "y_2", "]", ",", "axis", "=", "-", "1", ")", "\n", "return", "jnp", ".", "stack", "(", "[", "position_1", ",", "position_2", "]", ",", "axis", "=", "-", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.ideal_double_pendulum.IdealDoublePendulum.render_trajectories": [[162, 199], ["jax.random.split", "jax.random.split", "jax.random.split", "jax.random.split", "ideal_double_pendulum.IdealDoublePendulum.canvas_position", "jax.stack", "jax.stack", "jax.sqrt", "jax.sqrt", "jax.sqrt", "jax.sqrt", "jax.stack", "jax.stack", "ideal_double_pendulum.IdealDoublePendulum._batch_render", "len", "jax.random.uniform", "jax.random.uniform", "jax.random.uniform", "jax.random.uniform", "ideal_double_pendulum.IdealDoublePendulum.random_offset_bounds().convert_from_unit_interval", "jax.zeros", "jax.zeros", "jax.zeros().astype", "jax.zeros().astype", "dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.random_int_k_from_n", "dict", "ideal_double_pendulum.IdealDoublePendulum.random_offset_bounds", "jax.zeros", "jax.zeros"], "methods", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.canvas_position", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.BoxRegion.convert_from_unit_interval", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.random_int_k_from_n", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.random_offset_bounds"], ["", "def", "render_trajectories", "(", "\n", "self", ",", "\n", "position", ":", "jnp", ".", "ndarray", ",", "\n", "params", ":", "utils", ".", "Params", ",", "\n", "rng_key", ":", "jnp", ".", "ndarray", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "Tuple", "[", "jnp", ".", "ndarray", ",", "utils", ".", "Params", "]", ":", "\n", "    ", "n", ",", "_", ",", "d", "=", "position", ".", "shape", "\n", "assert", "d", "==", "self", ".", "system_dims", "\n", "assert", "len", "(", "params", ")", "==", "5", "\n", "key1", ",", "key2", "=", "jax", ".", "random", ".", "split", "(", "rng_key", ",", "2", ")", "\n", "m_1", "=", "params", "[", "\"m_1\"", "]", "\n", "m_2", "=", "params", "[", "\"m_2\"", "]", "\n", "position", "=", "self", ".", "canvas_position", "(", "position", ",", "params", ")", "\n", "position_1", ",", "position_2", "=", "position", "[", "...", ",", "0", ",", ":", "]", ",", "position", "[", "...", ",", "1", ",", ":", "]", "\n", "if", "self", ".", "randomize_canvas_location", ":", "\n", "      ", "offset", "=", "jax", ".", "random", ".", "uniform", "(", "key1", ",", "shape", "=", "[", "n", ",", "2", "]", ")", "\n", "offset", "=", "self", ".", "random_offset_bounds", "(", ")", ".", "convert_from_unit_interval", "(", "offset", ")", "\n", "", "else", ":", "\n", "      ", "offset", "=", "jnp", ".", "zeros", "(", "[", "n", ",", "2", "]", ")", "\n", "", "position_1", "=", "position_1", "+", "offset", "[", ":", ",", "None", ",", ":", "]", "\n", "position_2", "=", "position_1", "+", "position_2", "\n", "particles", "=", "jnp", ".", "stack", "(", "[", "position_1", ",", "position_2", "]", ",", "axis", "=", "-", "2", ")", "\n", "radius_1", "=", "jnp", ".", "sqrt", "(", "m_1", "/", "jnp", ".", "pi", ")", "\n", "radius_2", "=", "jnp", ".", "sqrt", "(", "m_2", "/", "jnp", ".", "pi", ")", "\n", "particles_radius", "=", "jnp", ".", "stack", "(", "[", "radius_1", ",", "radius_2", "]", ",", "axis", "=", "-", "1", ")", "\n", "if", "self", ".", "num_colors", "==", "1", ":", "\n", "      ", "color_index", "=", "jnp", ".", "zeros", "(", "[", "n", ",", "2", "]", ")", ".", "astype", "(", "\"int64\"", ")", "\n", "", "else", ":", "\n", "      ", "color_index", "=", "utils", ".", "random_int_k_from_n", "(", "\n", "key2", ",", "\n", "num_samples", "=", "n", ",", "\n", "n", "=", "self", ".", "num_colors", ",", "\n", "k", "=", "2", "\n", ")", "\n", "", "images", "=", "self", ".", "_batch_render", "(", "particles", ",", "particles_radius", ",", "color_index", ")", "\n", "return", "images", ",", "dict", "(", "offset", "=", "offset", ",", "color_index", "=", "color_index", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.n_body.NBodySystem.__init__": [[48, 70], ["dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.TimeIndependentHamiltonianSystem.__init__", "functools.partial", "jax.vmap", "jax.vmap", "jax.vmap", "jax.vmap", "n_body.NBodySystem.full_canvas_bounds"], "methods", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.multiagent_dynamics.game_dynamics.ZeroSumGame.__init__", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.full_canvas_bounds"], ["def", "__init__", "(", "\n", "self", ",", "\n", "n", ":", "int", ",", "\n", "space_dims", ":", "int", ",", "\n", "m_range", ":", "utils", ".", "BoxRegion", ",", "\n", "g_range", ":", "utils", ".", "BoxRegion", ",", "\n", "provided_canvas_bounds", ":", "utils", ".", "BoxRegion", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "super", "(", "NBodySystem", ",", "self", ")", ".", "__init__", "(", "\n", "system_dims", "=", "n", "*", "space_dims", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "self", ".", "n", "=", "n", "\n", "self", ".", "space_dims", "=", "space_dims", "\n", "self", ".", "m_range", "=", "m_range", "\n", "self", ".", "g_range", "=", "g_range", "\n", "self", ".", "provided_canvas_bounds", "=", "provided_canvas_bounds", "\n", "render", "=", "functools", ".", "partial", "(", "utils", ".", "render_particles_trajectory", ",", "\n", "canvas_limits", "=", "self", ".", "full_canvas_bounds", "(", ")", ",", "\n", "resolution", "=", "self", ".", "resolution", ",", "\n", "num_colors", "=", "self", ".", "num_colors", ")", "\n", "self", ".", "_batch_render", "=", "jax", ".", "vmap", "(", "render", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.n_body.NBodySystem._hamiltonian": [[71, 98], ["y.q.reshape", "y.p.reshape", "jax.matmul", "jax.matmul", "jax.diagonal", "jax.diagonal", "jax.sqrt", "jax.sqrt", "kinetic.sum.sum.sum", "len", "jax.swapaxes", "jax.swapaxes", "jax.sum", "jax.sum", "jax.identity", "jax.identity", "products.sum", "jax.identity", "jax.identity"], "methods", ["None"], ["", "def", "_hamiltonian", "(", "\n", "self", ",", "\n", "y", ":", "phase_space", ".", "PhaseSpace", ",", "\n", "params", ":", "utils", ".", "Params", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "jnp", ".", "ndarray", ":", "\n", "    ", "assert", "len", "(", "params", ")", "==", "2", "\n", "m", "=", "params", "[", "\"m\"", "]", "\n", "g", "=", "params", "[", "\"g\"", "]", "\n", "q", "=", "y", ".", "q", ".", "reshape", "(", "[", "-", "1", ",", "self", ".", "n", ",", "self", ".", "space_dims", "]", ")", "\n", "p", "=", "y", ".", "p", ".", "reshape", "(", "[", "-", "1", ",", "self", ".", "n", ",", "self", ".", "space_dims", "]", ")", "\n", "\n", "q_ij", "=", "jnp", ".", "matmul", "(", "q", ",", "jnp", ".", "swapaxes", "(", "q", ",", "axis1", "=", "-", "1", ",", "axis2", "=", "-", "2", ")", ")", "\n", "q_ii", "=", "jnp", ".", "diagonal", "(", "q_ij", ",", "axis1", "=", "-", "1", ",", "axis2", "=", "-", "2", ")", "\n", "q_ij_norms_2", "=", "q_ii", "[", ":", ",", "None", ",", ":", "]", "+", "q_ii", "[", ":", ",", ":", ",", "None", "]", "-", "2.0", "*", "q_ij", "\n", "# Adding identity so that on the diagonal the norms are not 0", "\n", "q_ij_norms", "=", "jnp", ".", "sqrt", "(", "q_ij_norms_2", "+", "jnp", ".", "identity", "(", "self", ".", "n", ")", ")", "\n", "masses_ij", "=", "m", "[", ":", ",", "None", ",", ":", "]", "*", "m", "[", ":", ",", ":", ",", "None", "]", "\n", "# Remove masses in the diagonal so that those potentials are 0", "\n", "masses_ij", "=", "masses_ij", "-", "masses_ij", "*", "jnp", ".", "identity", "(", "self", ".", "n", ")", "[", "None", "]", "\n", "# Compute pairwise interactions", "\n", "products", "=", "g", "[", ":", ",", "None", ",", "None", "]", "*", "masses_ij", "/", "q_ij_norms", "\n", "# Note that here we are summing both i->j and j->i hence the division by 2", "\n", "potential", "=", "-", "products", ".", "sum", "(", "axis", "=", "(", "-", "2", ",", "-", "1", ")", ")", "/", "2", "\n", "kinetic", "=", "jnp", ".", "sum", "(", "p", "**", "2", ",", "axis", "=", "-", "1", ")", "/", "(", "2.0", "*", "m", ")", "\n", "kinetic", "=", "kinetic", ".", "sum", "(", "axis", "=", "-", "1", ")", "\n", "return", "potential", "+", "kinetic", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.n_body.NBodySystem.sample_y": [[99, 108], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "sample_y", "(", "\n", "self", ",", "\n", "num_samples", ":", "int", ",", "\n", "params", ":", "utils", ".", "Params", ",", "\n", "rng_key", ":", "jnp", ".", "ndarray", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "phase_space", ".", "PhaseSpace", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.n_body.NBodySystem.sample_params": [[109, 121], ["jax.random.split", "jax.random.split", "jax.random.split", "jax.random.split", "jax.random.uniform", "jax.random.uniform", "jax.random.uniform", "jax.random.uniform", "jax.random.uniform", "jax.random.uniform", "jax.random.uniform", "jax.random.uniform", "dict"], "methods", ["None"], ["", "def", "sample_params", "(", "\n", "self", ",", "\n", "num_samples", ":", "int", ",", "\n", "rng_key", ":", "jnp", ".", "ndarray", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "utils", ".", "Params", ":", "\n", "    ", "key1", ",", "key2", "=", "jax", ".", "random", ".", "split", "(", "rng_key", ")", "\n", "m", "=", "jax", ".", "random", ".", "uniform", "(", "key1", ",", "[", "num_samples", ",", "self", ".", "n", "]", ",", "minval", "=", "self", ".", "m_range", ".", "min", ",", "\n", "maxval", "=", "self", ".", "m_range", ".", "max", ")", "\n", "g", "=", "jax", ".", "random", ".", "uniform", "(", "key2", ",", "[", "num_samples", "]", ",", "minval", "=", "self", ".", "g_range", ".", "min", ",", "\n", "maxval", "=", "self", ".", "g_range", ".", "max", ")", "\n", "return", "dict", "(", "m", "=", "m", ",", "g", "=", "g", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.n_body.NBodySystem.simulate_analytically": [[122, 131], ["None"], "methods", ["None"], ["", "def", "simulate_analytically", "(", "\n", "self", ",", "\n", "y0", ":", "phase_space", ".", "PhaseSpace", ",", "\n", "t0", ":", "utils", ".", "FloatArray", ",", "\n", "t_eval", ":", "jnp", ".", "ndarray", ",", "\n", "params", ":", "utils", ".", "Params", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "Optional", "[", "phase_space", ".", "PhaseSpace", "]", ":", "\n", "    ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.n_body.NBodySystem.canvas_bounds": [[132, 134], ["None"], "methods", ["None"], ["", "def", "canvas_bounds", "(", "self", ")", "->", "utils", ".", "BoxRegion", ":", "\n", "    ", "return", "self", ".", "provided_canvas_bounds", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.n_body.NBodySystem.canvas_position": [[135, 141], ["None"], "methods", ["None"], ["", "def", "canvas_position", "(", "\n", "self", ",", "\n", "position", ":", "jnp", ".", "ndarray", ",", "\n", "params", ":", "utils", ".", "Params", "\n", ")", "->", "jnp", ".", "ndarray", ":", "\n", "    ", "return", "position", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.n_body.NBodySystem.render_trajectories": [[142, 176], ["jax.random.split", "jax.random.split", "jax.random.split", "jax.random.split", "dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.expand_to_rank_right", "position.reshape", "jax.sqrt", "jax.sqrt", "n_body.NBodySystem._batch_render", "len", "jax.random.uniform", "jax.random.uniform", "jax.random.uniform", "jax.random.uniform", "n_body.NBodySystem.random_offset_bounds().convert_from_unit_interval", "jax.zeros", "jax.zeros", "jax.zeros().astype", "jax.zeros().astype", "dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.random_int_k_from_n", "dict", "ValueError", "n_body.NBodySystem.random_offset_bounds", "jax.zeros", "jax.zeros"], "methods", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.expand_to_rank_right", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.BoxRegion.convert_from_unit_interval", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.random_int_k_from_n", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.random_offset_bounds"], ["", "def", "render_trajectories", "(", "\n", "self", ",", "\n", "position", ":", "jnp", ".", "ndarray", ",", "\n", "params", ":", "utils", ".", "Params", ",", "\n", "rng_key", ":", "jnp", ".", "ndarray", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "Tuple", "[", "jnp", ".", "ndarray", ",", "utils", ".", "Params", "]", ":", "\n", "    ", "n", ",", "_", ",", "d", "=", "position", ".", "shape", "\n", "assert", "d", "==", "self", ".", "system_dims", "\n", "assert", "len", "(", "params", ")", "==", "2", "\n", "key1", ",", "key2", "=", "jax", ".", "random", ".", "split", "(", "rng_key", ",", "2", ")", "\n", "m", "=", "utils", ".", "expand_to_rank_right", "(", "params", "[", "\"m\"", "]", ",", "2", ")", "\n", "particles", "=", "position", ".", "reshape", "(", "[", "n", ",", "-", "1", ",", "self", ".", "n", ",", "self", ".", "space_dims", "]", ")", "\n", "if", "self", ".", "randomize_canvas_location", ":", "\n", "      ", "offset", "=", "jax", ".", "random", ".", "uniform", "(", "key1", ",", "shape", "=", "[", "n", ",", "self", ".", "space_dims", "]", ")", "\n", "offset", "=", "self", ".", "random_offset_bounds", "(", ")", ".", "convert_from_unit_interval", "(", "offset", ")", "\n", "", "else", ":", "\n", "      ", "offset", "=", "jnp", ".", "zeros", "(", "shape", "=", "[", "n", ",", "self", ".", "space_dims", "]", ")", "\n", "", "particles", "=", "particles", "+", "offset", "[", ":", ",", "None", ",", "None", ",", ":", "]", "\n", "particles_radius", "=", "jnp", ".", "sqrt", "(", "m", "/", "jnp", ".", "pi", ")", "\n", "if", "self", ".", "num_colors", "==", "1", ":", "\n", "      ", "color_index", "=", "jnp", ".", "zeros", "(", "[", "n", ",", "self", ".", "n", "]", ")", ".", "astype", "(", "\"int64\"", ")", "\n", "", "else", ":", "\n", "      ", "if", "self", ".", "num_colors", "<", "self", ".", "n", ":", "\n", "        ", "raise", "ValueError", "(", "\"The number of colors must be at least the number of \"", "\n", "\"objects or 1.\"", ")", "\n", "", "color_index", "=", "utils", ".", "random_int_k_from_n", "(", "\n", "key2", ",", "\n", "num_samples", "=", "n", ",", "\n", "n", "=", "self", ".", "num_colors", ",", "\n", "k", "=", "self", ".", "n", "\n", ")", "\n", "", "images", "=", "self", ".", "_batch_render", "(", "particles", ",", "particles_radius", ",", "color_index", ")", "\n", "return", "images", ",", "dict", "(", "offset", "=", "offset", ",", "color_index", "=", "color_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.n_body.TwoBodySystem.__init__": [[181, 194], ["n_body.NBodySystem.__init__"], "methods", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.multiagent_dynamics.game_dynamics.ZeroSumGame.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "m_range", ":", "utils", ".", "BoxRegion", ",", "\n", "g_range", ":", "utils", ".", "BoxRegion", ",", "\n", "radius_range", ":", "utils", ".", "BoxRegion", ",", "\n", "provided_canvas_bounds", ":", "utils", ".", "BoxRegion", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "self", ".", "radius_range", "=", "radius_range", "\n", "super", "(", ")", ".", "__init__", "(", "n", "=", "2", ",", "space_dims", "=", "2", ",", "\n", "m_range", "=", "m_range", ",", "\n", "g_range", "=", "g_range", ",", "\n", "provided_canvas_bounds", "=", "provided_canvas_bounds", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.n_body.TwoBodySystem.sample_y": [[195, 217], ["jax.random.uniform", "jax.random.uniform", "jax.random.uniform", "jax.random.uniform", "n_body.TwoBodySystem.radius_range.convert_from_unit_interval", "jax.sqrt", "jax.sqrt", "jax.repeat", "jax.repeat", "jax.repeat", "jax.repeat", "pos.reshape.reshape.reshape", "vel.reshape.reshape.reshape", "dm_hamiltonian_dynamics_suite.hamiltonian_systems.phase_space.PhaseSpace", "jax.sum", "jax.sum", "jax.flip", "jax.flip", "jax.asarray().reshape", "jax.asarray().reshape", "pos.reshape.reshape.reshape", "vel.reshape.reshape.reshape", "jax.asarray().reshape", "jax.asarray().reshape", "jax.asarray().reshape", "jax.asarray().reshape", "jax.asarray", "jax.asarray", "jax.asarray", "jax.asarray", "jax.asarray", "jax.asarray"], "methods", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.BoxRegion.convert_from_unit_interval"], ["", "def", "sample_y", "(", "\n", "self", ",", "\n", "num_samples", ":", "int", ",", "\n", "params", ":", "utils", ".", "Params", ",", "\n", "rng_key", ":", "jnp", ".", "ndarray", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "phase_space", ".", "PhaseSpace", ":", "\n", "    ", "pos", "=", "jax", ".", "random", ".", "uniform", "(", "rng_key", ",", "[", "num_samples", ",", "self", ".", "n", "]", ")", "\n", "pos", "=", "self", ".", "radius_range", ".", "convert_from_unit_interval", "(", "pos", ")", "\n", "r", "=", "jnp", ".", "sqrt", "(", "jnp", ".", "sum", "(", "pos", "**", "2", ",", "axis", "=", "-", "1", ")", ")", "\n", "\n", "vel", "=", "jnp", ".", "flip", "(", "pos", ",", "axis", "=", "-", "1", ")", "/", "(", "2", "*", "r", "[", "...", ",", "None", "]", "**", "1.5", ")", "\n", "vel", "=", "vel", "*", "jnp", ".", "asarray", "(", "[", "1.0", ",", "-", "1.0", "]", ")", ".", "reshape", "(", "[", "1", ",", "2", "]", ")", "\n", "\n", "pos", "=", "jnp", ".", "repeat", "(", "pos", ".", "reshape", "(", "[", "num_samples", ",", "1", ",", "-", "1", "]", ")", ",", "repeats", "=", "self", ".", "n", ",", "axis", "=", "1", ")", "\n", "vel", "=", "jnp", ".", "repeat", "(", "vel", ".", "reshape", "(", "[", "num_samples", ",", "1", ",", "-", "1", "]", ")", ",", "repeats", "=", "self", ".", "n", ",", "axis", "=", "1", ")", "\n", "\n", "pos", "=", "pos", "*", "jnp", ".", "asarray", "(", "[", "1.0", ",", "-", "1.0", "]", ")", ".", "reshape", "(", "[", "1", ",", "2", ",", "1", "]", ")", "\n", "vel", "=", "vel", "*", "jnp", ".", "asarray", "(", "[", "1.0", ",", "-", "1.0", "]", ")", ".", "reshape", "(", "[", "1", ",", "2", ",", "1", "]", ")", "\n", "pos", "=", "pos", ".", "reshape", "(", "[", "num_samples", ",", "-", "1", "]", ")", "\n", "vel", "=", "vel", ".", "reshape", "(", "[", "num_samples", ",", "-", "1", "]", ")", "\n", "return", "phase_space", ".", "PhaseSpace", "(", "position", "=", "pos", ",", "momentum", "=", "vel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.n_body.ThreeBody2DSystem.__init__": [[222, 235], ["n_body.NBodySystem.__init__"], "methods", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.multiagent_dynamics.game_dynamics.ZeroSumGame.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "m_range", ":", "utils", ".", "BoxRegion", ",", "\n", "g_range", ":", "utils", ".", "BoxRegion", ",", "\n", "radius_range", ":", "utils", ".", "BoxRegion", ",", "\n", "provided_canvas_bounds", ":", "utils", ".", "BoxRegion", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "self", ".", "radius_range", "=", "radius_range", "\n", "super", "(", ")", ".", "__init__", "(", "n", "=", "3", ",", "space_dims", "=", "2", ",", "\n", "m_range", "=", "m_range", ",", "\n", "g_range", "=", "g_range", ",", "\n", "provided_canvas_bounds", "=", "provided_canvas_bounds", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.n_body.ThreeBody2DSystem.sample_y": [[236, 263], ["jax.asarray", "jax.asarray", "jax.random.uniform", "jax.random.uniform", "jax.random.uniform", "jax.random.uniform", "n_body.ThreeBody2DSystem.radius_range.convert_from_unit_interval", "jax.matmul", "jax.matmul", "jax.matmul", "jax.matmul", "jax.concatenate", "jax.concatenate", "jax.sqrt", "jax.sqrt", "jax.matmul", "jax.matmul", "jax.matmul", "jax.matmul", "jax.concatenate", "jax.concatenate", "dm_hamiltonian_dynamics_suite.hamiltonian_systems.phase_space.PhaseSpace", "jax.random.uniform", "jax.random.uniform", "jax.random.uniform", "jax.random.uniform", "jax.linalg.norm", "jax.linalg.norm", "jax.sin", "jax.sin", "jax.flip", "jax.flip", "jax.cos", "jax.cos", "jax.sin", "jax.sin", "jax.cos", "jax.cos", "jax.sin", "jax.sin", "jax.cos", "jax.cos"], "methods", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.BoxRegion.convert_from_unit_interval"], ["", "def", "sample_y", "(", "\n", "self", ",", "\n", "num_samples", ":", "int", ",", "\n", "params", ":", "utils", ".", "Params", ",", "\n", "rng_key", ":", "jnp", ".", "ndarray", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "phase_space", ".", "PhaseSpace", ":", "\n", "    ", "theta", "=", "2", "*", "jnp", ".", "pi", "/", "3", "\n", "rot", "=", "jnp", ".", "asarray", "(", "[", "[", "jnp", ".", "cos", "(", "theta", ")", ",", "-", "jnp", ".", "sin", "(", "theta", ")", "]", ",", "\n", "[", "jnp", ".", "sin", "(", "theta", ")", ",", "jnp", ".", "cos", "(", "theta", ")", "]", "]", ")", "\n", "p1", "=", "2", "*", "jax", ".", "random", ".", "uniform", "(", "rng_key", ",", "[", "num_samples", ",", "2", "]", ")", "-", "1.0", "\n", "r", "=", "jax", ".", "random", ".", "uniform", "(", "rng_key", ",", "[", "num_samples", "]", ")", "\n", "r", "=", "self", ".", "radius_range", ".", "convert_from_unit_interval", "(", "r", ")", "\n", "\n", "p1", "*=", "(", "r", "/", "jnp", ".", "linalg", ".", "norm", "(", "p1", ",", "axis", "=", "-", "1", ")", ")", "[", ":", ",", "None", "]", "\n", "p2", "=", "jnp", ".", "matmul", "(", "p1", ",", "rot", ".", "T", ")", "\n", "p3", "=", "jnp", ".", "matmul", "(", "p2", ",", "rot", ".", "T", ")", "\n", "p", "=", "jnp", ".", "concatenate", "(", "[", "p1", ",", "p2", ",", "p3", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "# scale factor to get circular trajectories", "\n", "factor", "=", "jnp", ".", "sqrt", "(", "jnp", ".", "sin", "(", "jnp", ".", "pi", "/", "3", ")", "/", "(", "2", "*", "jnp", ".", "cos", "(", "jnp", ".", "pi", "/", "6", ")", "**", "2", ")", ")", "\n", "# velocity that yields a circular orbit", "\n", "v1", "=", "jnp", ".", "flip", "(", "p1", ",", "axis", "=", "-", "1", ")", "*", "factor", "/", "r", "[", ":", ",", "None", "]", "**", "1.5", "\n", "v2", "=", "jnp", ".", "matmul", "(", "v1", ",", "rot", ".", "T", ")", "\n", "v3", "=", "jnp", ".", "matmul", "(", "v2", ",", "rot", ".", "T", ")", "\n", "v", "=", "jnp", ".", "concatenate", "(", "[", "v1", ",", "v2", ",", "v3", "]", ",", "axis", "=", "-", "1", ")", "\n", "return", "phase_space", ".", "PhaseSpace", "(", "position", "=", "p", ",", "momentum", "=", "v", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.__init__": [[44, 103], ["dict", "hamiltonian.HamiltonianSystem._scipy_ivp_kwargs.update", "dict", "ValueError"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "system_dims", ":", "int", ",", "\n", "randomize_canvas_location", ":", "bool", "=", "True", ",", "\n", "random_canvas_extra_ratio", ":", "float", "=", "0.4", ",", "\n", "try_analytic_solution", ":", "bool", "=", "True", ",", "\n", "friction", ":", "float", "=", "0.0", ",", "\n", "method", ":", "Union", "[", "str", ",", "Integrator", "]", "=", "\"scipy\"", ",", "\n", "num_colors", ":", "int", "=", "6", ",", "\n", "image_resolution", ":", "int", "=", "32", ",", "\n", "dtype", ":", "str", "=", "\"float32\"", ",", "\n", "steps_per_dt", ":", "int", "=", "1", ",", "\n", "stiff", ":", "bool", "=", "False", ",", "\n", "extra_ivp_kwargs", ":", "Optional", "[", "Mapping", "[", "str", ",", "Union", "[", "str", ",", "int", ",", "float", "]", "]", "]", "=", "None", ")", ":", "\n", "    ", "\"\"\"Initializes some global properties.\n\n    Args:\n      system_dims: Dimensionality of the positions (not joint state).\n      randomize_canvas_location: Whether to add random offset to images.\n      random_canvas_extra_ratio: How much to be the extra random ofsset.\n      try_analytic_solution: If True, first tries to solve the system\n        analytically possible. If False, alway integrates systems numerically.\n      friction: This changes the dynamics to non-conservative. The new\n          dynamics are formulated as follows:\n            dq/dt = dH/dp\n            dp/dt = - dH/dq - friction * dH/dp\n          This implies that the Hamiltonian energy decreases over time:\n            dH/dt = dH/dq^T dq/dt + dH/dp^T dp/dt = - friction * ||dH/dp||_2^2\n      method: \"scipy\" or a callable of type `Integrator`.\n      num_colors: The number of possible colors to use for rendering.\n      image_resolution: For generated images their resolution.\n      dtype: What dtype to use for the generated data.\n      steps_per_dt: Number of inner steps to use per a single observation dt.\n      stiff: Whether the problem represents a stiff system.\n      extra_ivp_kwargs: Extra arguments to the scipy solver.\n    Raises:\n      ValueError: if `dtype` is not 'float32' or 'float64'.\n    \"\"\"", "\n", "self", ".", "_system_dims", "=", "system_dims", "\n", "self", ".", "_randomize_canvas_location", "=", "randomize_canvas_location", "\n", "self", ".", "_random_canvas_extra_ratio", "=", "random_canvas_extra_ratio", "\n", "self", ".", "_try_analytic_solution", "=", "try_analytic_solution", "\n", "self", ".", "_friction", "=", "friction", "\n", "self", ".", "_method", "=", "method", "\n", "self", ".", "_num_colors", "=", "num_colors", "\n", "self", ".", "_resolution", "=", "image_resolution", "\n", "self", ".", "_dtype", "=", "dtype", "\n", "self", ".", "_stiff", "=", "stiff", "\n", "self", ".", "_steps_per_dt", "=", "steps_per_dt", "\n", "if", "dtype", "==", "\"float64\"", ":", "\n", "      ", "self", ".", "_scipy_ivp_kwargs", "=", "dict", "(", "rtol", "=", "1e-12", ",", "atol", "=", "1e-12", ")", "\n", "", "elif", "dtype", "==", "\"float32\"", ":", "\n", "      ", "self", ".", "_scipy_ivp_kwargs", "=", "dict", "(", "rtol", "=", "1e-9", ",", "atol", "=", "1e-9", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "\"Currently we only support float64 and float32 dtypes.\"", ")", "\n", "", "if", "stiff", ":", "\n", "      ", "self", ".", "_scipy_ivp_kwargs", "[", "\"method\"", "]", "=", "\"Radau\"", "\n", "", "if", "extra_ivp_kwargs", "is", "not", "None", ":", "\n", "      ", "self", ".", "_scipy_ivp_kwargs", ".", "update", "(", "extra_ivp_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.system_dims": [[104, 107], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "system_dims", "(", "self", ")", "->", "int", ":", "\n", "    ", "return", "self", ".", "_system_dims", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.randomize_canvas_location": [[108, 111], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "randomize_canvas_location", "(", "self", ")", "->", "bool", ":", "\n", "    ", "return", "self", ".", "_randomize_canvas_location", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.random_canvas_extra_ratio": [[112, 115], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "random_canvas_extra_ratio", "(", "self", ")", "->", "float", ":", "\n", "    ", "return", "self", ".", "_random_canvas_extra_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.try_analytic_solution": [[116, 119], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "try_analytic_solution", "(", "self", ")", "->", "bool", ":", "\n", "    ", "return", "self", ".", "_try_analytic_solution", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.friction": [[120, 123], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "friction", "(", "self", ")", "->", "float", ":", "\n", "    ", "return", "self", ".", "_friction", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.method": [[124, 127], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "method", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_method", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.num_colors": [[128, 131], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_colors", "(", "self", ")", "->", "int", ":", "\n", "    ", "return", "self", ".", "_num_colors", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.resolution": [[132, 135], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "resolution", "(", "self", ")", "->", "int", ":", "\n", "    ", "return", "self", ".", "_resolution", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.dtype": [[136, 139], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dtype", "(", "self", ")", "->", "str", ":", "\n", "    ", "return", "self", ".", "_dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.stiff": [[140, 143], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "stiff", "(", "self", ")", "->", "bool", ":", "\n", "    ", "return", "self", ".", "_stiff", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.steps_per_dt": [[144, 147], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "steps_per_dt", "(", "self", ")", "->", "int", ":", "\n", "    ", "return", "self", ".", "_steps_per_dt", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.scipy_ivp_kwargs": [[148, 151], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "scipy_ivp_kwargs", "(", "self", ")", "->", "Mapping", "[", "str", ",", "Union", "[", "str", ",", "int", ",", "float", "]", "]", ":", "\n", "    ", "return", "self", ".", "_scipy_ivp_kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.parametrized_hamiltonian": [[152, 161], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "parametrized_hamiltonian", "(", "\n", "self", ",", "\n", "t", ":", "jnp", ".", "ndarray", ",", "\n", "y", ":", "phase_space", ".", "PhaseSpace", ",", "\n", "params", ":", "utils", ".", "Params", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "jnp", ".", "ndarray", ":", "\n", "    ", "\"\"\"Calculates the Hamiltonian.\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.hamiltonian_from_params": [[162, 170], ["hamiltonian.HamiltonianSystem.parametrized_hamiltonian"], "methods", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.TimeIndependentHamiltonianSystem.parametrized_hamiltonian"], ["", "def", "hamiltonian_from_params", "(", "\n", "self", ",", "\n", "params", ":", "utils", ".", "Params", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "phase_space", ".", "HamiltonianFunction", ":", "\n", "    ", "def", "hamiltonian", "(", "t", ":", "jnp", ".", "ndarray", ",", "y", ":", "phase_space", ".", "PhaseSpace", ")", "->", "jnp", ".", "ndarray", ":", "\n", "      ", "return", "self", ".", "parametrized_hamiltonian", "(", "t", ",", "y", ",", "params", ",", "**", "kwargs", ")", "\n", "", "return", "hamiltonian", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.sample_y": [[171, 180], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "sample_y", "(", "\n", "self", ",", "\n", "num_samples", ":", "int", ",", "\n", "params", ":", "utils", ".", "Params", ",", "\n", "rng_key", ":", "jnp", ".", "ndarray", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "phase_space", ".", "PhaseSpace", ":", "\n", "    ", "\"\"\"Samples randomly initial states.\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.sample_params": [[181, 189], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "sample_params", "(", "\n", "self", ",", "\n", "num_samples", ":", "int", ",", "\n", "rng_key", ":", "jnp", ".", "ndarray", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "utils", ".", "Params", ":", "\n", "    ", "\"\"\"Samples randomly parameters.\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.simulate_analytically": [[190, 200], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "simulate_analytically", "(", "\n", "self", ",", "\n", "y0", ":", "phase_space", ".", "PhaseSpace", ",", "\n", "t0", ":", "utils", ".", "FloatArray", ",", "\n", "t_eval", ":", "jnp", ".", "ndarray", ",", "\n", "params", ":", "utils", ".", "Params", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "Optional", "[", "phase_space", ".", "PhaseSpace", "]", ":", "\n", "    ", "\"\"\"If analytic solution exist returns it, else returns None.\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.simulate_analytically_dt": [[201, 213], ["dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.dt_to_t_eval", "hamiltonian.HamiltonianSystem.simulate_analytically"], "methods", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.dt_to_t_eval", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.simulate_analytically"], ["", "def", "simulate_analytically_dt", "(", "\n", "self", ",", "\n", "y0", ":", "phase_space", ".", "PhaseSpace", ",", "\n", "t0", ":", "utils", ".", "FloatArray", ",", "\n", "dt", ":", "utils", ".", "FloatArray", ",", "\n", "num_steps", ":", "int", ",", "\n", "params", ":", "utils", ".", "Params", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "Optional", "[", "phase_space", ".", "PhaseSpace", "]", ":", "\n", "    ", "\"\"\"Same as `simulate_analytically` but uses `dt` and `num_steps`.\"\"\"", "\n", "t_eval", "=", "utils", ".", "dt_to_t_eval", "(", "t0", ",", "dt", ",", "num_steps", ")", "\n", "return", "self", ".", "simulate_analytically", "(", "y0", ",", "t0", ",", "t_eval", ",", "params", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.canvas_bounds": [[214, 217], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "canvas_bounds", "(", "self", ")", "->", "utils", ".", "BoxRegion", ":", "\n", "    ", "\"\"\"Returns the limits of the canvas for rendering.\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.random_offset_bounds": [[218, 224], ["dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.BoxRegion", "hamiltonian.HamiltonianSystem.canvas_bounds"], "methods", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.canvas_bounds"], ["", "def", "random_offset_bounds", "(", "self", ")", "->", "utils", ".", "BoxRegion", ":", "\n", "    ", "\"\"\"Returns any extra randomized offset that can be given to the canvas.\"\"\"", "\n", "extra_size", "=", "self", ".", "random_canvas_extra_ratio", "*", "self", ".", "canvas_bounds", "(", ")", ".", "size", "/", "2", "\n", "return", "utils", ".", "BoxRegion", "(", "\n", "minimum", "=", "-", "extra_size", ",", "\n", "maximum", "=", "extra_size", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.full_canvas_bounds": [[226, 234], ["dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.BoxRegion", "hamiltonian.HamiltonianSystem.canvas_bounds", "hamiltonian.HamiltonianSystem.canvas_bounds", "hamiltonian.HamiltonianSystem.random_offset_bounds", "hamiltonian.HamiltonianSystem.canvas_bounds", "hamiltonian.HamiltonianSystem.random_offset_bounds"], "methods", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.canvas_bounds", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.canvas_bounds", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.random_offset_bounds", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.canvas_bounds", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.random_offset_bounds"], ["", "def", "full_canvas_bounds", "(", "self", ")", "->", "utils", ".", "BoxRegion", ":", "\n", "    ", "if", "self", ".", "randomize_canvas_location", ":", "\n", "      ", "return", "utils", ".", "BoxRegion", "(", "\n", "self", ".", "canvas_bounds", "(", ")", ".", "min", "+", "self", ".", "random_offset_bounds", "(", ")", ".", "min", ",", "\n", "self", ".", "canvas_bounds", "(", ")", ".", "max", "+", "self", ".", "random_offset_bounds", "(", ")", ".", "max", ",", "\n", ")", "\n", "", "else", ":", "\n", "      ", "return", "self", ".", "canvas_bounds", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.canvas_position": [[235, 242], ["None"], "methods", ["None"], ["", "", "@", "abc", ".", "abstractmethod", "\n", "def", "canvas_position", "(", "\n", "self", ",", "\n", "position", ":", "jnp", ".", "ndarray", ",", "\n", "params", ":", "utils", ".", "Params", "\n", ")", "->", "jnp", ".", "ndarray", ":", "\n", "    ", "\"\"\"Returns the canvas position given the position vectors and the parameters.\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.render_trajectories": [[243, 252], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "render_trajectories", "(", "\n", "self", ",", "\n", "position", ":", "jnp", ".", "ndarray", ",", "\n", "params", ":", "utils", ".", "Params", ",", "\n", "rng_key", ":", "jnp", ".", "ndarray", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "Tuple", "[", "jnp", ".", "ndarray", ",", "utils", ".", "Params", "]", ":", "\n", "    ", "\"\"\"Renders the positions q into an image.\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.simulate_scipy": [[253, 288], ["jax.concatenate", "jax.concatenate", "jax.concatenate", "y0.reshape.reshape.reshape", "hamiltonian.HamiltonianSystem.HamiltonianSystem.hamiltonian_from_params", "dict", "dict.update", "scipy.integrate.solve_ivp", "scipy.integrate.solve_ivp.y.reshape", "dm_hamiltonian_dynamics_suite.hamiltonian_systems.phase_space.PhaseSpace.from_state", "float", "dm_hamiltonian_dynamics_suite.hamiltonian_systems.phase_space.poisson_bracket_with_q_and_p", "dm_hamiltonian_dynamics_suite.hamiltonian_systems.phase_space.poisson_bracket_with_q_and_p.", "phase_space.poisson_bracket_with_q_and_p.single_state.reshape", "jax.moveaxis", "jax.moveaxis", "jax.moveaxis", "dm_hamiltonian_dynamics_suite.hamiltonian_systems.phase_space.PhaseSpace.from_state", "dm_hamiltonian_dynamics_suite.hamiltonian_systems.phase_space.TangentPhaseSpace", "dict", "y.reshape", "jax.zeros_like", "jax.zeros_like", "jax.zeros_like"], "methods", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.hamiltonian_from_params", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.phase_space.PhaseSpace.from_state", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.phase_space.poisson_bracket_with_q_and_p", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.phase_space.PhaseSpace.from_state"], ["", "def", "simulate_scipy", "(", "\n", "self", ",", "\n", "y0", ":", "phase_space", ".", "PhaseSpace", ",", "\n", "t0", ":", "utils", ".", "FloatArray", ",", "\n", "t_eval", ":", "jnp", ".", "ndarray", ",", "\n", "params", ":", "utils", ".", "Params", ",", "\n", "ivp_kwargs", "=", "None", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "phase_space", ".", "PhaseSpace", ":", "\n", "    ", "\"\"\"Simulates the system using scipy.integrate.solve_ivp.\"\"\"", "\n", "t_span", "=", "(", "t0", ",", "float", "(", "t_eval", "[", "-", "1", "]", ")", ")", "\n", "y0", "=", "jnp", ".", "concatenate", "(", "[", "y0", ".", "q", ",", "y0", ".", "p", "]", ",", "axis", "=", "-", "1", ")", "\n", "y_shape", "=", "y0", ".", "shape", "\n", "y0", "=", "y0", ".", "reshape", "(", "[", "-", "1", "]", ")", "\n", "hamiltonian", "=", "self", ".", "hamiltonian_from_params", "(", "params", ",", "**", "kwargs", ")", "\n", "@", "jax", ".", "jit", "\n", "def", "fun", "(", "t", ",", "y", ")", ":", "\n", "      ", "f", "=", "phase_space", ".", "poisson_bracket_with_q_and_p", "(", "hamiltonian", ")", "\n", "dy", "=", "f", "(", "t", ",", "phase_space", ".", "PhaseSpace", ".", "from_state", "(", "y", ".", "reshape", "(", "y_shape", ")", ")", ")", "\n", "if", "self", ".", "friction", "!=", "0.0", ":", "\n", "        ", "friction_term", "=", "phase_space", ".", "TangentPhaseSpace", "(", "\n", "position", "=", "jnp", ".", "zeros_like", "(", "dy", ".", "position", ")", ",", "\n", "momentum", "=", "-", "self", ".", "friction", "*", "dy", ".", "position", ")", "\n", "dy", "=", "dy", "+", "friction_term", "\n", "", "return", "dy", ".", "single_state", ".", "reshape", "(", "[", "-", "1", "]", ")", "\n", "", "kwargs", "=", "dict", "(", "**", "self", ".", "scipy_ivp_kwargs", ")", "\n", "kwargs", ".", "update", "(", "ivp_kwargs", "or", "dict", "(", ")", ")", "\n", "solution", "=", "integrate", ".", "solve_ivp", "(", "\n", "fun", "=", "fun", ",", "\n", "t_span", "=", "t_span", ",", "\n", "y0", "=", "y0", ",", "\n", "t_eval", "=", "t_eval", ",", "\n", "**", "kwargs", ")", "\n", "y_final", "=", "solution", ".", "y", ".", "reshape", "(", "y_shape", "+", "(", "t_eval", ".", "size", ",", ")", ")", "\n", "return", "phase_space", ".", "PhaseSpace", ".", "from_state", "(", "jnp", ".", "moveaxis", "(", "y_final", ",", "-", "1", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.simulate_scipy_dt": [[289, 302], ["dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.dt_to_t_eval", "hamiltonian.HamiltonianSystem.simulate_scipy"], "methods", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.dt_to_t_eval", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.simulate_scipy"], ["", "def", "simulate_scipy_dt", "(", "\n", "self", ",", "\n", "y0", ":", "phase_space", ".", "PhaseSpace", ",", "\n", "t0", ":", "utils", ".", "FloatArray", ",", "\n", "dt", ":", "utils", ".", "FloatArray", ",", "\n", "num_steps", ":", "int", ",", "\n", "params", ":", "utils", ".", "Params", ",", "\n", "ivp_kwargs", "=", "None", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "phase_space", ".", "PhaseSpace", ":", "\n", "    ", "\"\"\"Same as `simulate_scipy` but uses `dt` and `num_steps`.\"\"\"", "\n", "t_eval", "=", "utils", ".", "dt_to_t_eval", "(", "t0", ",", "dt", ",", "num_steps", ")", "\n", "return", "self", ".", "simulate_scipy", "(", "y0", ",", "t0", ",", "t_eval", ",", "params", ",", "ivp_kwargs", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.simulate_integrator": [[303, 320], ["hamiltonian.HamiltonianSystem.simulate_integrator_dt", "dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.t_eval_to_dt"], "methods", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.simulate_integrator_dt", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.t_eval_to_dt"], ["", "def", "simulate_integrator", "(", "\n", "self", ",", "\n", "y0", ":", "phase_space", ".", "PhaseSpace", ",", "\n", "t0", ":", "utils", ".", "FloatArray", ",", "\n", "t_eval", ":", "jnp", ".", "ndarray", ",", "\n", "params", ":", "utils", ".", "Params", ",", "\n", "method", ":", "Union", "[", "str", ",", "Integrator", "]", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "phase_space", ".", "PhaseSpace", ":", "\n", "    ", "\"\"\"Simulates the system using an integrator from integrators.py module.\"\"\"", "\n", "return", "self", ".", "simulate_integrator_dt", "(", "\n", "y0", "=", "y0", ",", "\n", "t0", "=", "t0", ",", "\n", "dt", "=", "utils", ".", "t_eval_to_dt", "(", "t0", ",", "t_eval", ")", ",", "\n", "params", "=", "params", ",", "\n", "method", "=", "method", ",", "\n", "**", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.simulate_integrator_dt": [[322, 360], ["hamiltonian.HamiltonianSystem.HamiltonianSystem.hamiltonian_from_params", "hamiltonian.HamiltonianSystem.HamiltonianSystem.method"], "methods", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.hamiltonian_from_params", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.method"], ["", "def", "simulate_integrator_dt", "(", "\n", "self", ",", "\n", "y0", ":", "phase_space", ".", "PhaseSpace", ",", "\n", "t0", ":", "Union", "[", "float", ",", "jnp", ".", "ndarray", "]", ",", "\n", "dt", ":", "Union", "[", "float", ",", "jnp", ".", "ndarray", "]", ",", "\n", "params", ":", "utils", ".", "Params", ",", "\n", "method", ":", "Integrator", ",", "\n", "num_steps", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "phase_space", ".", "PhaseSpace", ":", "\n", "    ", "\"\"\"Same as `simulate_integrator` but uses `dt` and `num_steps`.\"\"\"", "\n", "hamiltonian", "=", "self", ".", "hamiltonian_from_params", "(", "params", ",", "**", "kwargs", ")", "\n", "if", "self", ".", "friction", "==", "0.0", ":", "\n", "      ", "return", "method", "(", "\n", "hamiltonian", ",", "\n", "y0", ",", "\n", "t0", ",", "\n", "dt", ",", "\n", "num_steps", ",", "\n", "self", ".", "steps_per_dt", ",", "\n", ")", "[", "1", "]", "\n", "", "else", ":", "\n", "      ", "def", "dy_dt", "(", "t", ":", "jnp", ".", "ndarray", ",", "y", ":", "phase_space", ".", "PhaseSpace", ")", ":", "\n", "        ", "f", "=", "phase_space", ".", "poisson_bracket_with_q_and_p", "(", "hamiltonian", ")", "\n", "dy", "=", "f", "(", "t", ",", "y", ")", "\n", "friction_term", "=", "phase_space", ".", "TangentPhaseSpace", "(", "\n", "position", "=", "jnp", ".", "zeros_like", "(", "dy", ".", "position", ")", ",", "\n", "momentum", "=", "-", "self", ".", "friction", "*", "dy", ".", "position", ")", "\n", "return", "dy", "+", "friction_term", "\n", "\n", "", "return", "method", "(", "\n", "dy_dt", ",", "\n", "y0", ",", "\n", "t0", ",", "\n", "dt", ",", "\n", "num_steps", ",", "\n", "self", ".", "steps_per_dt", ",", "\n", ")", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.generate_trajectories": [[361, 387], ["hamiltonian.HamiltonianSystem.generate_trajectories_dt", "dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.t_eval_to_dt"], "methods", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.generate_trajectories_dt", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.t_eval_to_dt"], ["", "", "def", "generate_trajectories", "(", "\n", "self", ",", "\n", "y0", ":", "phase_space", ".", "PhaseSpace", ",", "\n", "t0", ":", "utils", ".", "FloatArray", ",", "\n", "t_eval", ":", "jnp", ".", "ndarray", ",", "\n", "params", ":", "utils", ".", "Params", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "phase_space", ".", "PhaseSpace", ":", "\n", "    ", "\"\"\"Generates trajectories of the system in phase space.\n\n    Args:\n      y0: Initial state.\n      t0: The time instance of the initial state y0.\n      t_eval: Times at which to return the computed solution.\n      params: Any parameters of the Hamiltonian.\n      **kwargs: Any extra things that go into the hamiltonian.\n\n    Returns:\n      A phase_space.PhaseSpace instance of size NxTxD.\n    \"\"\"", "\n", "return", "self", ".", "generate_trajectories_dt", "(", "\n", "y0", "=", "y0", ",", "\n", "t0", "=", "t0", ",", "\n", "dt", "=", "utils", ".", "t_eval_to_dt", "(", "t0", ",", "t_eval", ")", ",", "\n", "params", "=", "params", ",", "\n", "**", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.generate_trajectories_dt": [[389, 450], ["ValueError", "ValueError", "ValueError", "hamiltonian.HamiltonianSystem.simulate_analytically_dt", "hamiltonian.HamiltonianSystem.simulate_scipy_dt", "hamiltonian.HamiltonianSystem.simulate_integrator_dt", "jax.tree_map", "jax.tree_map", "jax.tree_map", "jax.tree_map", "jax.tree_map", "jax.tree_map", "jax.tree_map", "jax.tree_map", "jax.tree_map", "yts.append", "yts.append", "hamiltonian.HamiltonianSystem.simulate_integrator_dt", "yts.append", "len", "jax.tree_multimap", "jax.tree_multimap", "jax.tree_multimap", "jax.tree_multimap", "jax.tree_multimap", "jax.tree_multimap", "jax.tree_multimap", "jax.tree_multimap", "jax.tree_multimap", "NotImplementedError", "jax.tree_map", "jax.tree_map", "jax.tree_map", "jax.tree_map", "jax.tree_map", "jax.tree_map", "jax.tree_map", "jax.tree_map", "jax.tree_map", "jax.flip", "jax.flip", "jax.flip", "jax.concatenate", "jax.concatenate", "jax.concatenate"], "methods", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.simulate_analytically_dt", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.simulate_scipy_dt", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.simulate_integrator_dt", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.simulate_integrator_dt"], ["", "def", "generate_trajectories_dt", "(", "\n", "self", ",", "\n", "y0", ":", "phase_space", ".", "PhaseSpace", ",", "\n", "t0", ":", "utils", ".", "FloatArray", ",", "\n", "dt", ":", "utils", ".", "FloatArray", ",", "\n", "params", ":", "utils", ".", "Params", ",", "\n", "num_steps_forward", ":", "int", ",", "\n", "include_t0", ":", "bool", "=", "False", ",", "\n", "num_steps_backward", ":", "int", "=", "0", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "phase_space", ".", "PhaseSpace", ":", "\n", "    ", "\"\"\"Same as `generate_trajectories` but uses `dt` and `num_steps`.\"\"\"", "\n", "if", "num_steps_forward", "<", "0", "or", "num_steps_backward", "<", "0", ":", "\n", "      ", "raise", "ValueError", "(", "\"num_steps_forward and num_steps_backward can not be \"", "\n", "\"negative.\"", ")", "\n", "", "if", "num_steps_forward", "==", "0", "and", "num_steps_backward", "==", "0", ":", "\n", "      ", "raise", "ValueError", "(", "\"You need one of num_steps_forward or \"", "\n", "\"num_of_steps_backward to be positive.\"", ")", "\n", "", "if", "num_steps_forward", ">", "0", "and", "num_steps_backward", ">", "0", "and", "not", "include_t0", ":", "\n", "      ", "raise", "ValueError", "(", "\"When both num_steps_forward and num_steps_backward are \"", "\n", "\"positive include_t0 should be True.\"", ")", "\n", "\n", "", "if", "self", ".", "try_analytic_solution", "and", "num_steps_backward", "==", "0", ":", "\n", "# Try to use analytical solution", "\n", "      ", "y", "=", "self", ".", "simulate_analytically_dt", "(", "y0", ",", "t0", ",", "dt", ",", "num_steps_forward", ",", "params", ",", "\n", "**", "kwargs", ")", "\n", "if", "y", "is", "not", "None", ":", "\n", "        ", "return", "y", "\n", "", "", "if", "self", ".", "method", "==", "\"scipy\"", ":", "\n", "      ", "if", "num_steps_backward", ">", "0", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "", "return", "self", ".", "simulate_scipy_dt", "(", "y0", ",", "t0", ",", "dt", ",", "num_steps_forward", ",", "params", ",", "\n", "**", "kwargs", ")", "\n", "", "yts", "=", "[", "]", "\n", "if", "num_steps_backward", ">", "0", ":", "\n", "      ", "yt", "=", "self", ".", "simulate_integrator_dt", "(", "\n", "y0", "=", "y0", ",", "\n", "t0", "=", "t0", ",", "\n", "dt", "=", "-", "dt", ",", "\n", "params", "=", "params", ",", "\n", "method", "=", "self", ".", "method", ",", "\n", "num_steps", "=", "num_steps_backward", ",", "\n", "**", "kwargs", ")", "\n", "yt", "=", "jax", ".", "tree_map", "(", "lambda", "x", ":", "jnp", ".", "flip", "(", "x", ",", "axis", "=", "0", ")", ",", "yt", ")", "\n", "yts", ".", "append", "(", "yt", ")", "\n", "", "if", "include_t0", ":", "\n", "      ", "yts", ".", "append", "(", "jax", ".", "tree_map", "(", "lambda", "x", ":", "x", "[", "None", "]", ",", "y0", ")", ")", "\n", "", "if", "num_steps_forward", ">", "0", ":", "\n", "      ", "yt", "=", "self", ".", "simulate_integrator_dt", "(", "\n", "y0", "=", "y0", ",", "\n", "t0", "=", "t0", ",", "\n", "dt", "=", "dt", ",", "\n", "params", "=", "params", ",", "\n", "method", "=", "self", ".", "method", ",", "\n", "num_steps", "=", "num_steps_forward", ",", "\n", "**", "kwargs", ")", "\n", "yts", ".", "append", "(", "yt", ")", "\n", "", "if", "len", "(", "yts", ")", ">", "1", ":", "\n", "      ", "return", "jax", ".", "tree_multimap", "(", "lambda", "*", "a", ":", "jnp", ".", "concatenate", "(", "a", ",", "axis", "=", "0", ")", ",", "*", "yts", ")", "\n", "", "else", ":", "\n", "      ", "return", "yts", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.generate_and_render": [[451, 493], ["hamiltonian.HamiltonianSystem.generate_and_render_dt", "dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.t_eval_to_dt"], "methods", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.multiagent_dynamics.game_dynamics.ZeroSumGame.generate_and_render_dt", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.t_eval_to_dt"], ["", "", "def", "generate_and_render", "(", "\n", "self", ",", "\n", "num_trajectories", ":", "int", ",", "\n", "rng_key", ":", "jnp", ".", "ndarray", ",", "\n", "t0", ":", "utils", ".", "FloatArray", ",", "\n", "t_eval", ":", "utils", ".", "FloatArray", ",", "\n", "y0", ":", "Optional", "[", "phase_space", ".", "PhaseSpace", "]", "=", "None", ",", "\n", "params", ":", "Optional", "[", "utils", ".", "Params", "]", "=", "None", ",", "\n", "within_canvas_bounds", ":", "bool", "=", "True", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "Mapping", "[", "str", ",", "Any", "]", ":", "\n", "    ", "\"\"\"Generates trajectories and renders them.\n\n    Args:\n      num_trajectories: The number of trajectories to generate.\n      rng_key: PRNG key for sampling any random numbers.\n      t0: The time instance of the initial state y0.\n      t_eval: Times at which to return the computed solution.\n      y0: Initial state. If None will be sampled with `self.sample_y`\n      params: Parameters of the Hamiltonian. If None will be sampled with\n        `self.sample_params`\n      within_canvas_bounds: Re-samples y0 until the trajectories is within\n        the canvas bounds.\n      **kwargs: Any extra things that go into the hamiltonian.\n\n    Returns:\n      A dictionary containing the following elements:\n        \"x\": A numpy array representation of the PhaseSpace vector.\n        \"dx_dt\": The time derivative of \"x\".\n        \"image\": An image representation of the state.\n        \"other\": A dict of other parameters of the system that are not part of\n        the state.\n    \"\"\"", "\n", "return", "self", ".", "generate_and_render_dt", "(", "\n", "num_trajectories", "=", "num_trajectories", ",", "\n", "rng_key", "=", "rng_key", ",", "\n", "t0", "=", "t0", ",", "\n", "dt", "=", "utils", ".", "t_eval_to_dt", "(", "t0", ",", "t_eval", ")", ",", "\n", "y0", "=", "y0", ",", "\n", "params", "=", "params", ",", "\n", "within_canvas_bounds", "=", "within_canvas_bounds", ",", "\n", "**", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.generate_and_render_dt": [[495, 563], ["hamiltonian.HamiltonianSystem.HamiltonianSystem.generate_trajectories_dt", "jax.tree_map", "jax.tree_map", "jax.tree_map", "jax.tree_map", "jax.tree_map", "jax.tree_map", "jax.tree_map", "jax.tree_map", "jax.tree_map", "jax.tree_multimap", "jax.tree_multimap", "jax.tree_multimap", "jax.tree_multimap", "jax.tree_multimap", "jax.tree_multimap", "jax.tree_multimap", "jax.tree_multimap", "jax.tree_multimap", "hamiltonian.HamiltonianSystem.HamiltonianSystem.hamiltonian_from_params", "jax.vmap", "jax.vmap", "jax.vmap", "jax.vmap", "jax.vmap", "jax.vmap", "jax.vmap", "jax.vmap", "jax.vmap", "isinstance", "jax.asarray().astype", "jax.asarray().astype", "jax.asarray().astype", "jax.cumsum", "jax.cumsum", "jax.cumsum", "jax.vmap.", "jax.vmap.", "jax.vmap.", "jax.split", "jax.split", "jax.split", "hamiltonian.HamiltonianSystem.HamiltonianSystem.render_trajectories", "hamiltonian.HamiltonianSystem.HamiltonianSystem.update", "dict", "ValueError", "jax.split", "jax.split", "jax.split", "hamiltonian.HamiltonianSystem.HamiltonianSystem.sample_params", "jax.split", "jax.split", "jax.split", "hamiltonian.HamiltonianSystem.HamiltonianSystem.sample_y", "jax.tree_multimap", "jax.tree_multimap", "jax.tree_multimap", "jax.tree_multimap", "jax.tree_multimap", "jax.tree_multimap", "jax.tree_multimap", "jax.tree_multimap", "jax.tree_multimap", "dm_hamiltonian_dynamics_suite.hamiltonian_systems.phase_space.poisson_bracket_with_q_and_p", "jax.asarray", "jax.asarray", "jax.asarray", "jax.concatenate", "jax.concatenate", "jax.concatenate", "jax.swapaxes", "jax.swapaxes", "jax.swapaxes", "jax.concatenate", "jax.concatenate", "jax.concatenate", "len", "range", "print", "jax.split", "jax.split", "jax.split", "hamiltonian.HamiltonianSystem.HamiltonianSystem.sample_params", "jax.split", "jax.split", "jax.split", "hamiltonian.HamiltonianSystem.HamiltonianSystem.sample_y", "hamiltonian.HamiltonianSystem.HamiltonianSystem.generate_trajectories_dt", "jax.tree_map", "jax.tree_map", "jax.tree_map", "jax.tree_map", "jax.tree_map", "jax.tree_map", "jax.tree_map", "jax.tree_map", "jax.tree_map", "jax.tree_multimap", "jax.tree_multimap", "jax.tree_multimap", "jax.tree_multimap", "jax.tree_multimap", "jax.tree_multimap", "jax.tree_multimap", "jax.tree_multimap", "jax.tree_multimap", "jax.asarray", "jax.asarray", "jax.asarray", "jax.tree_map", "jax.tree_map", "jax.tree_map", "jax.tree_map", "jax.tree_map", "jax.tree_map", "jax.tree_map", "jax.tree_map", "jax.tree_map", "hamiltonian.HamiltonianSystem.HamiltonianSystem.canvas_position", "len", "len", "jax.stack", "jax.stack", "jax.stack", "jax.all", "jax.all", "jax.all", "jax.all", "jax.all", "jax.all", "valid.append", "jax.swapaxes", "jax.swapaxes", "jax.swapaxes", "jax.concatenate", "jax.concatenate", "jax.concatenate", "hamiltonian.HamiltonianSystem.HamiltonianSystem.canvas_bounds", "hamiltonian.HamiltonianSystem.HamiltonianSystem.canvas_bounds"], "methods", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.generate_trajectories_dt", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.hamiltonian_from_params", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.multiagent_dynamics.game_dynamics.ZeroSumGame.render_trajectories", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.sample_params", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.sample_y", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.phase_space.poisson_bracket_with_q_and_p", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.sample_params", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.sample_y", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.generate_trajectories_dt", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.canvas_position", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.canvas_bounds", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.HamiltonianSystem.canvas_bounds"], ["", "def", "generate_and_render_dt", "(", "\n", "self", ",", "\n", "num_trajectories", ":", "int", ",", "\n", "rng_key", ":", "jnp", ".", "ndarray", ",", "\n", "t0", ":", "utils", ".", "FloatArray", ",", "\n", "dt", ":", "utils", ".", "FloatArray", ",", "\n", "num_steps", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "y0", ":", "Optional", "[", "phase_space", ".", "PhaseSpace", "]", "=", "None", ",", "\n", "params", ":", "Optional", "[", "utils", ".", "Params", "]", "=", "None", ",", "\n", "within_canvas_bounds", ":", "bool", "=", "True", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "Mapping", "[", "str", ",", "Any", "]", ":", "\n", "    ", "\"\"\"Same as `generate_and_render` but uses `dt` and `num_steps`.\"\"\"", "\n", "if", "within_canvas_bounds", "and", "(", "y0", "is", "not", "None", "or", "params", "is", "not", "None", ")", ":", "\n", "      ", "raise", "ValueError", "(", "\"Within canvas bounds is valid only when y0 and params \"", "\n", "\"are None.\"", ")", "\n", "", "if", "params", "is", "None", ":", "\n", "      ", "rng_key", ",", "key", "=", "jnr", ".", "split", "(", "rng_key", ")", "\n", "params", "=", "self", ".", "sample_params", "(", "num_trajectories", ",", "rng_key", ",", "**", "kwargs", ")", "\n", "", "if", "y0", "is", "None", ":", "\n", "      ", "rng_key", ",", "key", "=", "jnr", ".", "split", "(", "rng_key", ")", "\n", "y0", "=", "self", ".", "sample_y", "(", "num_trajectories", ",", "params", ",", "key", ",", "**", "kwargs", ")", "\n", "\n", "# Generate the phase-space trajectories", "\n", "", "x", "=", "self", ".", "generate_trajectories_dt", "(", "y0", ",", "t0", ",", "dt", ",", "params", ",", "num_steps", ",", "**", "kwargs", ")", "\n", "# Make batch leading dimension", "\n", "x", "=", "jax", ".", "tree_map", "(", "lambda", "x_", ":", "jnp", ".", "swapaxes", "(", "x_", ",", "0", ",", "1", ")", ",", "x", ")", "\n", "x", "=", "jax", ".", "tree_multimap", "(", "lambda", "i", ",", "j", ":", "jnp", ".", "concatenate", "(", "[", "i", "[", ":", ",", "None", "]", ",", "j", "]", ",", "axis", "=", "1", ")", ",", "\n", "y0", ",", "x", ")", "\n", "if", "within_canvas_bounds", ":", "\n", "# Check for valid trajectories", "\n", "      ", "valid", "=", "[", "]", "\n", "while", "len", "(", "valid", ")", "<", "num_trajectories", ":", "\n", "        ", "for", "idx", "in", "range", "(", "x", ".", "q", ".", "shape", "[", "0", "]", ")", ":", "\n", "          ", "x_idx", ",", "params_idx", "=", "jax", ".", "tree_map", "(", "lambda", "a", ",", "i", "=", "idx", ":", "a", "[", "i", "]", ",", "(", "x", ",", "params", ")", ")", "\n", "position", "=", "self", ".", "canvas_position", "(", "x_idx", ".", "q", ",", "params_idx", ")", "\n", "if", "(", "jnp", ".", "all", "(", "position", ">=", "self", ".", "canvas_bounds", "(", ")", ".", "min", ")", "and", "\n", "jnp", ".", "all", "(", "position", "<=", "self", ".", "canvas_bounds", "(", ")", ".", "max", ")", ")", ":", "\n", "            ", "valid", ".", "append", "(", "(", "x_idx", ",", "params_idx", ")", ")", "\n", "", "", "if", "len", "(", "valid", ")", "==", "num_trajectories", ":", "\n", "          ", "break", "\n", "", "new_trajectories", "=", "num_trajectories", "-", "len", "(", "valid", ")", "\n", "print", "(", "f\"Generating {new_trajectories} new trajectories.\"", ")", "\n", "rng_key", ",", "key", "=", "jnr", ".", "split", "(", "rng_key", ")", "\n", "params", "=", "self", ".", "sample_params", "(", "new_trajectories", ",", "rng_key", ",", "**", "kwargs", ")", "\n", "rng_key", ",", "key", "=", "jnr", ".", "split", "(", "rng_key", ")", "\n", "y0", "=", "self", ".", "sample_y", "(", "new_trajectories", ",", "params", ",", "key", ",", "**", "kwargs", ")", "\n", "x", "=", "self", ".", "generate_trajectories_dt", "(", "y0", ",", "t0", ",", "dt", ",", "params", ",", "num_steps", ",", "\n", "**", "kwargs", ")", "\n", "x", "=", "jax", ".", "tree_map", "(", "lambda", "x_", ":", "jnp", ".", "swapaxes", "(", "x_", ",", "0", ",", "1", ")", ",", "x", ")", "\n", "x", "=", "jax", ".", "tree_multimap", "(", "lambda", "i", ",", "j", ":", "# pylint:disable=g-long-lambda", "\n", "jnp", ".", "concatenate", "(", "[", "i", "[", ":", ",", "None", "]", ",", "j", "]", ",", "axis", "=", "1", ")", ",", "y0", ",", "x", ")", "\n", "", "x", ",", "params", "=", "jax", ".", "tree_multimap", "(", "lambda", "*", "args", ":", "jnp", ".", "stack", "(", "args", ",", "axis", "=", "0", ")", ",", "\n", "*", "valid", ")", "\n", "\n", "", "hamiltonian", "=", "self", ".", "hamiltonian_from_params", "(", "params", ",", "**", "kwargs", ")", "\n", "df_dt", "=", "jax", ".", "vmap", "(", "phase_space", ".", "poisson_bracket_with_q_and_p", "(", "hamiltonian", ")", ",", "\n", "in_axes", "=", "[", "0", ",", "1", "]", ",", "out_axes", "=", "1", ")", "\n", "if", "isinstance", "(", "dt", ",", "float", ")", ":", "\n", "      ", "dt", "=", "jnp", ".", "asarray", "(", "[", "dt", "]", "*", "num_steps", ",", "dtype", "=", "x", ".", "q", ".", "dtype", ")", "\n", "", "t0", "=", "jnp", ".", "asarray", "(", "t0", ")", ".", "astype", "(", "dt", ".", "dtype", ")", "\n", "t", "=", "jnp", ".", "cumsum", "(", "jnp", ".", "concatenate", "(", "[", "t0", "[", "None", "]", ",", "dt", "]", ",", "axis", "=", "0", ")", ",", "axis", "=", "0", ")", "\n", "dx_dt", "=", "df_dt", "(", "t", ",", "x", ")", "\n", "rng_key", ",", "key", "=", "jnr", ".", "split", "(", "rng_key", ")", "\n", "image", ",", "extra", "=", "self", ".", "render_trajectories", "(", "x", ".", "q", ",", "params", ",", "rng_key", ",", "**", "kwargs", ")", "\n", "params", ".", "update", "(", "extra", ")", "\n", "return", "dict", "(", "x", "=", "x", ".", "single_state", ",", "dx_dt", "=", "dx_dt", ".", "single_state", ",", "\n", "image", "=", "image", ",", "other", "=", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.TimeIndependentHamiltonianSystem._hamiltonian": [[568, 576], ["None"], "methods", ["None"], ["@", "abc", ".", "abstractmethod", "\n", "def", "_hamiltonian", "(", "\n", "self", ",", "\n", "y", ":", "phase_space", ".", "PhaseSpace", ",", "\n", "params", ":", "utils", ".", "Params", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "jnp", ".", "ndarray", ":", "\n", "    ", "\"\"\"Computes the time independent Hamiltonian.\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.TimeIndependentHamiltonianSystem.parametrized_hamiltonian": [[577, 585], ["hamiltonian.TimeIndependentHamiltonianSystem._hamiltonian"], "methods", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.hamiltonian.TimeIndependentHamiltonianSystem._hamiltonian"], ["", "def", "parametrized_hamiltonian", "(", "\n", "self", ",", "\n", "t", ":", "jnp", ".", "ndarray", ",", "\n", "y", ":", "phase_space", ".", "PhaseSpace", ",", "\n", "params", ":", "utils", ".", "Params", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "jnp", ".", "ndarray", ":", "\n", "    ", "return", "self", ".", "_hamiltonian", "(", "y", ",", "params", ",", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.BoxRegion.__init__": [[32, 41], ["jax.asarray", "jax.asarray", "jax.asarray", "jax.asarray", "jax.asarray", "jax.asarray", "ValueError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "minimum", ":", "FloatArray", ",", "maximum", ":", "FloatArray", ")", ":", "\n", "    ", "minimum", "=", "jnp", ".", "asarray", "(", "minimum", ")", "\n", "maximum", "=", "jnp", ".", "asarray", "(", "maximum", ")", "\n", "if", "minimum", ".", "shape", "!=", "maximum", ".", "shape", ":", "\n", "      ", "raise", "ValueError", "(", "f\"The passed values for minimum and maximum should have \"", "\n", "f\"the same shape, but had shapes: {minimum.shape} \"", "\n", "f\"and {maximum.shape}.\"", ")", "\n", "", "self", ".", "_minimum", "=", "minimum", "\n", "self", ".", "_maximum", "=", "maximum", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.BoxRegion.min": [[42, 45], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "min", "(", "self", ")", "->", "jnp", ".", "ndarray", ":", "\n", "    ", "return", "self", ".", "_minimum", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.BoxRegion.max": [[46, 49], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "max", "(", "self", ")", "->", "jnp", ".", "ndarray", ":", "\n", "    ", "return", "self", ".", "_maximum", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.BoxRegion.size": [[50, 53], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "size", "(", "self", ")", "->", "jnp", ".", "ndarray", ":", "\n", "    ", "return", "self", ".", "max", "-", "self", ".", "min", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.BoxRegion.dims": [[54, 59], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dims", "(", "self", ")", "->", "int", ":", "\n", "    ", "if", "self", ".", "min", ".", "ndim", "!=", "0", ":", "\n", "      ", "return", "self", ".", "min", ".", "shape", "[", "-", "1", "]", "\n", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.BoxRegion.convert_to_unit_interval": [[60, 62], ["None"], "methods", ["None"], ["", "def", "convert_to_unit_interval", "(", "self", ",", "value", ":", "jnp", ".", "ndarray", ")", "->", "jnp", ".", "ndarray", ":", "\n", "    ", "return", "(", "value", "-", "self", ".", "min", ")", "/", "self", ".", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.BoxRegion.convert_from_unit_interval": [[63, 65], ["None"], "methods", ["None"], ["", "def", "convert_from_unit_interval", "(", "self", ",", "value", ":", "jnp", ".", "ndarray", ")", "->", "jnp", ".", "ndarray", ":", "\n", "    ", "return", "value", "*", "self", ".", "size", "+", "self", ".", "min", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.BoxRegion.__str__": [[66, 68], ["type"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", "->", "str", ":", "\n", "    ", "return", "f\"{type(self).__name__}(min={self.min}, max={self.max})\"", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.BoxRegion.__repr__": [[69, 71], ["utils.BoxRegion.__str__"], "methods", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.BoxRegion.__str__"], ["", "def", "__repr__", "(", "self", ")", "->", "str", ":", "\n", "    ", "return", "self", ".", "__str__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.expand_to_rank_right": [[73, 79], ["x.reshape"], "function", ["None"], ["", "", "def", "expand_to_rank_right", "(", "x", ":", "jnp", ".", "ndarray", ",", "rank", ":", "int", ")", "->", "jnp", ".", "ndarray", ":", "\n", "  ", "if", "x", ".", "ndim", "==", "rank", ":", "\n", "    ", "return", "x", "\n", "", "assert", "x", ".", "ndim", "<", "rank", "\n", "new_shape", "=", "x", ".", "shape", "+", "(", "1", ",", ")", "*", "(", "rank", "-", "x", ".", "ndim", ")", "\n", "return", "x", ".", "reshape", "(", "new_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.expand_to_rank_left": [[81, 87], ["x.reshape"], "function", ["None"], ["", "def", "expand_to_rank_left", "(", "x", ":", "jnp", ".", "ndarray", ",", "rank", ":", "int", ")", "->", "int", ":", "\n", "  ", "if", "x", ".", "ndim", "==", "rank", ":", "\n", "    ", "return", "x", "\n", "", "assert", "x", ".", "ndim", "<", "rank", "\n", "new_shape", "=", "(", "1", ",", ")", "*", "(", "rank", "-", "x", ".", "ndim", ")", "+", "x", ".", "shape", "\n", "return", "x", ".", "reshape", "(", "new_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.vecmul": [[89, 91], ["jax.matmul"], "function", ["None"], ["", "def", "vecmul", "(", "matrix", ":", "jnp", ".", "ndarray", ",", "vector", ":", "jnp", ".", "ndarray", ")", "->", "jnp", ".", "ndarray", ":", "\n", "  ", "return", "jnp", ".", "matmul", "(", "matrix", ",", "vector", "[", "...", ",", "None", "]", ")", "[", "...", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.dt_to_t_eval": [[93, 101], ["isinstance", "isinstance", "numpy.asarray", "numpy.arange().reshape", "jax.arange", "numpy.arange"], "function", ["None"], ["", "def", "dt_to_t_eval", "(", "t0", ":", "FloatArray", ",", "dt", ":", "FloatArray", ",", "num_steps", ":", "int", ")", "->", "jnp", ".", "ndarray", ":", "\n", "  ", "if", "(", "isinstance", "(", "t0", ",", "(", "float", ",", "np", ".", "ndarray", ")", ")", "and", "\n", "isinstance", "(", "dt", ",", "(", "float", ",", "np", ".", "ndarray", ")", ")", ")", ":", "\n", "    ", "dt", "=", "np", ".", "asarray", "(", "dt", ")", "[", "None", "]", "\n", "shape", "=", "[", "num_steps", "]", "+", "[", "1", "]", "*", "(", "dt", ".", "ndim", "-", "1", ")", "\n", "return", "t0", "+", "dt", "*", "np", ".", "arange", "(", "1", ",", "num_steps", "+", "1", ")", ".", "reshape", "(", "shape", ")", "\n", "", "else", ":", "\n", "    ", "return", "t0", "+", "dt", "*", "jnp", ".", "arange", "(", "1", ",", "num_steps", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.t_eval_to_dt": [[103, 107], ["jax.concatenate", "jax.ones_like"], "function", ["None"], ["", "", "def", "t_eval_to_dt", "(", "t0", ":", "FloatArray", ",", "t_eval", ":", "FloatArray", ")", "->", "jnp", ".", "ndarray", ":", "\n", "  ", "t", "=", "jnp", ".", "ones_like", "(", "t_eval", "[", ":", "1", "]", ")", "*", "t0", "\n", "t", "=", "jnp", ".", "concatenate", "(", "[", "t", ",", "t_eval", "]", ",", "axis", "=", "0", ")", "\n", "return", "t", "[", "1", ":", "]", "-", "t", "[", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.simple_loop": [[109, 138], ["range", "jax.tree_multimap", "jax.tree_multimap", "jax.tree_multimap", "ValueError", "ValueError", "utils.simple_loop.step"], "function", ["None"], ["", "def", "simple_loop", "(", "\n", "f", ",", "\n", "x0", ":", "jnp", ".", "ndarray", ",", "\n", "t_args", ":", "Optional", "[", "jnp", ".", "ndarray", "]", "=", "None", ",", "\n", "num_steps", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "use_scan", ":", "bool", "=", "True", "\n", ")", "->", "Tuple", "[", "jnp", ".", "ndarray", ",", "jnp", ".", "ndarray", "]", ":", "\n", "  ", "\"\"\"Runs a simple loop that outputs the evolved variable at every time step.\"\"\"", "\n", "if", "t_args", "is", "None", "and", "num_steps", "is", "None", ":", "\n", "    ", "raise", "ValueError", "(", "\"Exactly one of `t_args` and `num_steps` should be \"", "\n", "\"provided.\"", ")", "\n", "", "if", "t_args", "is", "not", "None", "and", "num_steps", "is", "not", "None", ":", "\n", "    ", "raise", "ValueError", "(", "\"Exactly one of `t_args` and `num_steps` should be \"", "\n", "\"provided.\"", ")", "\n", "\n", "", "def", "step", "(", "x_t", ",", "t_arg", ")", ":", "\n", "    ", "x_next", "=", "f", "(", "x_t", ")", "if", "t_arg", "is", "None", "else", "f", "(", "x_t", ",", "t_arg", ")", "\n", "return", "x_next", ",", "x_next", "\n", "", "if", "use_scan", ":", "\n", "    ", "return", "lax", ".", "scan", "(", "step", ",", "init", "=", "x0", ",", "xs", "=", "t_args", ",", "length", "=", "num_steps", ")", "[", "1", "]", "\n", "\n", "", "y", "=", "[", "]", "\n", "x", "=", "x0", "\n", "num_steps", "=", "t_args", ".", "shape", "[", "0", "]", "if", "t_args", "is", "not", "None", "else", "num_steps", "\n", "t_args", "=", "[", "None", "]", "*", "num_steps", "if", "t_args", "is", "None", "else", "t_args", "\n", "for", "i", "in", "range", "(", "num_steps", ")", ":", "\n", "    ", "x", ",", "_", "=", "step", "(", "x", ",", "t_args", "[", "i", "]", ")", "\n", "y", ".", "append", "(", "x", ")", "\n", "", "return", "jax", ".", "tree_multimap", "(", "lambda", "*", "args", ":", "jnp", ".", "stack", "(", "args", ",", "axis", "=", "0", ")", ",", "*", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.hsv2rgb": [[140, 163], ["jax.floor", "jax.stack().astype", "jax.stack", "jax.stack", "jax.stack", "jax.stack", "jax.stack", "jax.stack", "jax.stack"], "function", ["None"], ["", "def", "hsv2rgb", "(", "array", ":", "jnp", ".", "ndarray", ")", "->", "jnp", ".", "ndarray", ":", "\n", "  ", "\"\"\"Converts an HSV float array image to RGB.\"\"\"", "\n", "hi", "=", "jnp", ".", "floor", "(", "array", "[", "...", ",", "0", "]", "*", "6", ")", "\n", "f", "=", "array", "[", "...", ",", "0", "]", "*", "6", "-", "hi", "\n", "p", "=", "array", "[", "...", ",", "2", "]", "*", "(", "1", "-", "array", "[", "...", ",", "1", "]", ")", "\n", "q", "=", "array", "[", "...", ",", "2", "]", "*", "(", "1", "-", "f", "*", "array", "[", "...", ",", "1", "]", ")", "\n", "t", "=", "array", "[", "...", ",", "2", "]", "*", "(", "1", "-", "(", "1", "-", "f", ")", "*", "array", "[", "...", ",", "1", "]", ")", "\n", "v", "=", "array", "[", "...", ",", "2", "]", "\n", "\n", "hi", "=", "jnp", ".", "stack", "(", "[", "hi", ",", "hi", ",", "hi", "]", ",", "axis", "=", "-", "1", ")", ".", "astype", "(", "jnp", ".", "uint8", ")", "%", "6", "\n", "hi_is_0", "=", "hi", "==", "0", "\n", "hi_is_1", "=", "hi", "==", "1", "\n", "hi_is_2", "=", "hi", "==", "2", "\n", "hi_is_3", "=", "hi", "==", "3", "\n", "hi_is_4", "=", "hi", "==", "4", "\n", "hi_is_5", "=", "hi", "==", "5", "\n", "out", "=", "(", "hi_is_0", "*", "jnp", ".", "stack", "(", "(", "v", ",", "t", ",", "p", ")", ",", "axis", "=", "-", "1", ")", "+", "\n", "hi_is_1", "*", "jnp", ".", "stack", "(", "(", "q", ",", "v", ",", "p", ")", ",", "axis", "=", "-", "1", ")", "+", "\n", "hi_is_2", "*", "jnp", ".", "stack", "(", "(", "p", ",", "v", ",", "t", ")", ",", "axis", "=", "-", "1", ")", "+", "\n", "hi_is_3", "*", "jnp", ".", "stack", "(", "(", "p", ",", "q", ",", "v", ")", ",", "axis", "=", "-", "1", ")", "+", "\n", "hi_is_4", "*", "jnp", ".", "stack", "(", "(", "t", ",", "p", ",", "v", ")", ",", "axis", "=", "-", "1", ")", "+", "\n", "hi_is_5", "*", "jnp", ".", "stack", "(", "(", "v", ",", "p", ",", "q", ")", ",", "axis", "=", "-", "1", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.render_particles_trajectory": [[165, 247], ["jax.asarray", "jax.asarray", "jax.asarray", "jax.asarray", "canvas_limits.convert_to_unit_interval", "jax.linspace", "jax.ones", "jax.ones", "jax.stack", "utils.hsv2rgb", "jax.linspace", "jax.meshgrid", "jax.sqrt", "jax.zeros", "jax.ones_like", "zip", "jax.full", "jax.full", "jax.ones", "jax.ones", "jax.exp", "jax.ones_like", "jax.split", "jax.split"], "function", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.BoxRegion.convert_to_unit_interval", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.hsv2rgb"], ["", "def", "render_particles_trajectory", "(", "\n", "particles", ":", "jnp", ".", "ndarray", ",", "\n", "particles_radius", ":", "FloatArray", ",", "\n", "color_indices", ":", "FloatArray", ",", "\n", "canvas_limits", ":", "BoxRegion", ",", "\n", "resolution", ":", "int", ",", "\n", "num_colors", ":", "int", ",", "\n", "background_color", ":", "Tuple", "[", "float", ",", "float", ",", "float", "]", "=", "(", "0.321", ",", "0.349", ",", "0.368", ")", ",", "\n", "temperature", ":", "FloatArray", "=", "80.0", ")", ":", "\n", "  ", "\"\"\"Renders n particles in different colors for a full trajectory.\n\n  NB: The default background color is not black as we have experienced issues\n    when training models with black background.\n\n  Args:\n    particles: Array of size (t, n, 2)\n      The last 2 dimensions define the x, y coordinates of each particle.\n    particles_radius: Array of size (n,) or a single value.\n      Defines the radius of each particle.\n    color_indices: Array of size (n,) or a single value.\n      Defines the color of each particle.\n    canvas_limits: List of 2 lists or Array of size (2, 2)\n      First row defines the limit over x and second over y.\n    resolution: int\n      The resolution of the produced images.\n    num_colors: int\n      The number of possible colors to use.\n    background_color: List or Array of size (3)\n      The color for the background. Default to black.\n    temperature: float\n      The temperature of the sigmoid distance metric used to the center of the\n      particles.\n\n  Returns:\n    An array of size (t, resolution, resolution, 3) with the produced images.\n  \"\"\"", "\n", "particles", "=", "jnp", ".", "asarray", "(", "particles", ")", "\n", "assert", "particles", ".", "ndim", "==", "3", "\n", "assert", "particles", ".", "shape", "[", "-", "1", "]", "==", "2", "\n", "t", ",", "n", "=", "particles", ".", "shape", "[", ":", "2", "]", "\n", "particles_radius", "=", "jnp", ".", "asarray", "(", "particles_radius", ")", "\n", "if", "particles_radius", ".", "ndim", "==", "0", ":", "\n", "    ", "particles_radius", "=", "jnp", ".", "full", "(", "[", "n", "]", ",", "particles_radius", ")", "\n", "", "assert", "particles_radius", ".", "shape", "==", "(", "n", ",", ")", "\n", "color_indices", "=", "jnp", ".", "asarray", "(", "color_indices", ")", "\n", "if", "color_indices", ".", "ndim", "==", "0", ":", "\n", "    ", "color_indices", "=", "jnp", ".", "full", "(", "[", "n", "]", ",", "color_indices", ")", "\n", "", "assert", "color_indices", ".", "shape", "==", "(", "n", ",", ")", ",", "f\"Colors shape: {color_indices.shape}\"", "\n", "background_color", "=", "jnp", ".", "asarray", "(", "background_color", ")", "\n", "assert", "background_color", ".", "shape", "==", "(", "3", ",", ")", "\n", "\n", "particles", "=", "canvas_limits", ".", "convert_to_unit_interval", "(", "particles", ")", "\n", "canvas_size", "=", "canvas_limits", ".", "max", "-", "canvas_limits", ".", "min", "\n", "canvas_size", "=", "canvas_size", "[", "0", "]", "if", "canvas_size", ".", "ndim", "==", "1", "else", "canvas_size", "\n", "particles_radius", "=", "particles_radius", "/", "canvas_size", "\n", "images", "=", "jnp", ".", "ones", "(", "[", "t", ",", "resolution", ",", "resolution", ",", "3", "]", ")", "*", "background_color", "\n", "\n", "hues", "=", "jnp", ".", "linspace", "(", "0", ",", "1", ",", "num", "=", "num_colors", ",", "endpoint", "=", "False", ")", "\n", "colors", "=", "hues", "[", "color_indices", "]", "[", "None", ",", ":", ",", "None", ",", "None", "]", "\n", "s_channel", "=", "jnp", ".", "ones", "(", "(", "t", ",", "n", ",", "resolution", ",", "resolution", ")", ")", "\n", "v_channel", "=", "jnp", ".", "ones", "(", "(", "t", ",", "n", ",", "resolution", ",", "resolution", ")", ")", "\n", "h_channel", "=", "jnp", ".", "ones", "(", "(", "t", ",", "n", ",", "resolution", ",", "resolution", ")", ")", "*", "colors", "\n", "hsv_imgs", "=", "jnp", ".", "stack", "(", "(", "h_channel", ",", "s_channel", ",", "v_channel", ")", ",", "axis", "=", "-", "1", ")", "\n", "rgb_imgs", "=", "hsv2rgb", "(", "hsv_imgs", ")", "\n", "images", "=", "[", "img", "[", ":", ",", "0", "]", "for", "img", "in", "jnp", ".", "split", "(", "rgb_imgs", ",", "n", ",", "axis", "=", "1", ")", "]", "+", "[", "images", "]", "\n", "\n", "grid", "=", "jnp", ".", "linspace", "(", "0.0", ",", "1.0", ",", "resolution", ")", "\n", "dx", ",", "dy", "=", "jnp", ".", "meshgrid", "(", "grid", ",", "grid", ")", "\n", "dx", ",", "dy", "=", "dx", "[", "None", ",", "None", "]", ",", "dy", "[", "None", ",", "None", "]", "\n", "x", ",", "y", "=", "particles", "[", "...", ",", "0", "]", "[", "...", ",", "None", ",", "None", "]", ",", "particles", "[", "...", ",", "1", "]", "[", "...", ",", "None", ",", "None", "]", "\n", "d", "=", "jnp", ".", "sqrt", "(", "(", "x", "-", "dx", ")", "**", "2", "+", "(", "y", "-", "dy", ")", "**", "2", ")", "\n", "particles_radius", "=", "particles_radius", "[", "...", ",", "None", ",", "None", "]", "\n", "mask", "=", "1.0", "/", "(", "1.0", "+", "jnp", ".", "exp", "(", "(", "d", "-", "particles_radius", ")", "*", "temperature", ")", ")", "\n", "masks", "=", "(", "[", "m", "[", ":", ",", "0", ",", "...", ",", "None", "]", "for", "m", "in", "jnp", ".", "split", "(", "mask", ",", "n", ",", "axis", "=", "1", ")", "]", "+", "\n", "[", "jnp", ".", "ones_like", "(", "images", "[", "0", "]", ")", "]", ")", "\n", "\n", "final_image", "=", "jnp", ".", "zeros", "(", "[", "t", ",", "resolution", ",", "resolution", ",", "3", "]", ")", "\n", "c", "=", "jnp", ".", "ones_like", "(", "images", "[", "0", "]", ")", "\n", "for", "img", ",", "m", "in", "zip", "(", "images", ",", "masks", ")", ":", "\n", "    ", "final_image", "=", "final_image", "+", "c", "*", "m", "*", "img", "\n", "c", "=", "c", "*", "(", "1", "-", "m", ")", "\n", "", "return", "final_image", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.uniform_annulus": [[249, 269], ["jax.split", "jax.normal", "jax.linalg.norm", "jax.uniform", "utils.BoxRegion", "jax.sqrt", "utils.BoxRegion.convert_from_unit_interval", "utils.BoxRegion.convert_from_unit_interval"], "function", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.BoxRegion.convert_from_unit_interval", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.BoxRegion.convert_from_unit_interval"], ["", "def", "uniform_annulus", "(", "\n", "key", ":", "jnp", ".", "ndarray", ",", "\n", "num_samples", ":", "int", ",", "\n", "dim_samples", ":", "int", ",", "\n", "radius_range", ":", "BoxRegion", ",", "\n", "uniform", ":", "bool", "\n", ")", "->", "jnp", ".", "ndarray", ":", "\n", "  ", "\"\"\"Samples points uniformly in the annulus defined by radius range.\"\"\"", "\n", "key1", ",", "key2", "=", "jnr", ".", "split", "(", "key", ")", "\n", "direction", "=", "jnr", ".", "normal", "(", "key1", ",", "[", "num_samples", ",", "dim_samples", "]", ")", "\n", "norms", "=", "jnp", ".", "linalg", ".", "norm", "(", "direction", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "direction", "=", "direction", "/", "norms", "\n", "# Sample a radius uniformly between [min_radius, max_radius]", "\n", "r", "=", "jnr", ".", "uniform", "(", "key2", ",", "[", "num_samples", "]", ")", "\n", "if", "uniform", ":", "\n", "    ", "radius_range", "=", "BoxRegion", "(", "radius_range", ".", "min", "**", "2", ",", "radius_range", ".", "max", "**", "2", ")", "\n", "r", "=", "jnp", ".", "sqrt", "(", "radius_range", ".", "convert_from_unit_interval", "(", "r", ")", ")", "\n", "", "else", ":", "\n", "    ", "r", "=", "radius_range", ".", "convert_from_unit_interval", "(", "r", ")", "\n", "", "return", "direction", "*", "r", "[", ":", ",", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.random_int_k_from_n": [[275, 287], ["jax.repeat", "multi_shuffle", "ValueError", "jax.arange().reshape", "jax.split", "jax.arange"], "function", ["None"], ["def", "random_int_k_from_n", "(", "\n", "rng", ":", "jnp", ".", "ndarray", ",", "\n", "num_samples", ":", "int", ",", "\n", "n", ":", "int", ",", "\n", "k", ":", "int", "\n", ")", "->", "jnp", ".", "ndarray", ":", "\n", "  ", "\"\"\"Samples randomly k integers from 1 to n.\"\"\"", "\n", "if", "k", ">", "n", ":", "\n", "    ", "raise", "ValueError", "(", "f\"k should be less than or equal to n, but got k={k} and \"", "\n", "f\"n={n}.\"", ")", "\n", "", "x", "=", "jnp", ".", "repeat", "(", "jnp", ".", "arange", "(", "n", ")", ".", "reshape", "(", "[", "1", ",", "n", "]", ")", ",", "num_samples", ",", "axis", "=", "0", ")", "\n", "return", "multi_shuffle", "(", "x", ",", "jnr", ".", "split", "(", "rng", ",", "num_samples", ")", ",", "k", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.multiagent_dynamics.game_dynamics.ZeroSumGame.__init__": [[62, 74], ["game_dynamics.get_payoff_tensor", "getattr", "open_spiel.python.egt.dynamics.MultiPopulationDynamics", "dict"], "methods", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.multiagent_dynamics.game_dynamics.get_payoff_tensor"], ["def", "__init__", "(", "\n", "self", ",", "\n", "game_name", ":", "str", ",", "\n", "dynamics", ":", "str", "=", "'replicator'", ",", "\n", "method", ":", "str", "=", "'scipy'", ")", ":", "\n", "    ", "self", ".", "payoff_tensor", "=", "get_payoff_tensor", "(", "game_name", ")", "\n", "assert", "self", ".", "payoff_tensor", ".", "shape", "[", "0", "]", "==", "2", ",", "'Only supports two-player games.'", "\n", "dyn_fun", "=", "getattr", "(", "egt_dynamics", ",", "dynamics", ")", "\n", "self", ".", "dynamics", "=", "egt_dynamics", ".", "MultiPopulationDynamics", "(", "\n", "self", ".", "payoff_tensor", ",", "dyn_fun", ")", "\n", "self", ".", "method", "=", "method", "\n", "self", ".", "scipy_ivp_kwargs", "=", "dict", "(", "rtol", "=", "1e-12", ",", "atol", "=", "1e-12", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.multiagent_dynamics.game_dynamics.ZeroSumGame.sample_x0": [[75, 83], ["jax.split", "jax.split", "game_dynamics.sample_from_simplex", "game_dynamics.sample_from_simplex", "jax.hstack", "jax.hstack"], "methods", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.multiagent_dynamics.game_dynamics.sample_from_simplex", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.multiagent_dynamics.game_dynamics.sample_from_simplex"], ["", "def", "sample_x0", "(", "self", ",", "num_samples", ":", "int", ",", "rng_key", ":", "jnp", ".", "ndarray", ")", "->", "jnp", ".", "ndarray", ":", "\n", "    ", "\"\"\"Samples initial states.\"\"\"", "\n", "nrows", ",", "ncols", "=", "self", ".", "payoff_tensor", ".", "shape", "[", "1", ":", "]", "\n", "key1", ",", "key2", "=", "jnr", ".", "split", "(", "rng_key", ")", "\n", "x0_1", "=", "sample_from_simplex", "(", "num_samples", ",", "key1", ",", "dim", "=", "nrows", ")", "\n", "x0_2", "=", "sample_from_simplex", "(", "num_samples", ",", "key2", ",", "dim", "=", "ncols", ")", "\n", "x0", "=", "jnp", ".", "hstack", "(", "(", "x0_1", ",", "x0_2", ")", ")", "\n", "return", "x0", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.multiagent_dynamics.game_dynamics.ZeroSumGame.generate_trajectories": [[84, 120], ["scipy.integrate.solve_ivp", "scipy.integrate.solve_ivp.y.reshape", "numpy.moveaxis", "ValueError", "y.reshape.reshape.reshape", "numpy.apply_along_axis", "numpy.apply_along_axis.reshape", "float", "x0.reshape"], "methods", ["None"], ["", "def", "generate_trajectories", "(", "\n", "self", ",", "\n", "x0", ":", "jnp", ".", "ndarray", ",", "\n", "t0", ":", "utils", ".", "FloatArray", ",", "\n", "t_eval", ":", "jnp", ".", "ndarray", "\n", ")", "->", "jnp", ".", "ndarray", ":", "\n", "    ", "\"\"\"Generates trajectories of the system in phase space.\n\n    Args:\n      x0: Initial state.\n      t0: The time instance of the initial state y0.\n      t_eval: Times at which to return the computed solution.\n\n    Returns:\n      Trajectories of size BxTxD (batch, time, phase-space-dim).\n    \"\"\"", "\n", "if", "self", ".", "method", "==", "'scipy'", ":", "\n", "      ", "x0_shape", "=", "x0", ".", "shape", "\n", "\n", "def", "fun", "(", "_", ",", "y", ")", ":", "\n", "        ", "y", "=", "y", ".", "reshape", "(", "x0_shape", ")", "\n", "y_next", "=", "np", ".", "apply_along_axis", "(", "self", ".", "dynamics", ",", "-", "1", ",", "y", ")", "\n", "return", "y_next", ".", "reshape", "(", "[", "-", "1", "]", ")", "\n", "\n", "", "t_span", "=", "(", "t0", ",", "float", "(", "t_eval", "[", "-", "1", "]", ")", ")", "\n", "solution", "=", "scipy", ".", "integrate", ".", "solve_ivp", "(", "\n", "fun", "=", "fun", ",", "\n", "t_span", "=", "t_span", ",", "\n", "y0", "=", "x0", ".", "reshape", "(", "[", "-", "1", "]", ")", ",", "# Scipy requires flat input.", "\n", "t_eval", "=", "t_eval", ",", "\n", "**", "self", ".", "scipy_ivp_kwargs", ")", "\n", "x", "=", "solution", ".", "y", ".", "reshape", "(", "x0_shape", "+", "(", "t_eval", ".", "size", ",", ")", ")", "\n", "x", "=", "np", ".", "moveaxis", "(", "x", ",", "-", "1", ",", "1", ")", "# Make time 2nd dimension.", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "f'Method={self.method} not supported.'", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.multiagent_dynamics.game_dynamics.ZeroSumGame.render_trajectories": [[121, 143], ["x_1.repeat().reshape.repeat().reshape.repeat().reshape", "x_2.swapaxes.swapaxes.repeat().reshape", "x_2.swapaxes.swapaxes.swapaxes", "numpy.stack", "numpy.repeat", "numpy.expand_dims", "x_1.repeat().reshape.repeat().reshape.repeat", "x_2.swapaxes.swapaxes.repeat", "game_dynamics.tile_array", "numpy.squeeze", "numpy.ceil().astype", "numpy.ceil().astype", "numpy.ceil", "numpy.ceil"], "methods", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.multiagent_dynamics.game_dynamics.tile_array"], ["", "def", "render_trajectories", "(", "self", ",", "x", ":", "jnp", ".", "ndarray", ")", "->", "jnp", ".", "ndarray", ":", "\n", "    ", "\"\"\"Maps from policies to joint-policy space.\"\"\"", "\n", "nrows", ",", "ncols", "=", "self", ".", "payoff_tensor", ".", "shape", "[", "1", ":", "]", "\n", "x_1", "=", "x", "[", "...", ",", ":", "nrows", "]", "\n", "x_2", "=", "x", "[", "...", ",", "nrows", ":", "]", "\n", "x_1", "=", "x_1", ".", "repeat", "(", "ncols", ",", "axis", "=", "-", "1", ")", ".", "reshape", "(", "x", ".", "shape", "[", ":", "-", "1", "]", "+", "(", "nrows", ",", "ncols", ",", ")", ")", "\n", "x_2", "=", "x_2", ".", "repeat", "(", "nrows", ",", "axis", "=", "-", "1", ")", ".", "reshape", "(", "x", ".", "shape", "[", ":", "-", "1", "]", "+", "(", "nrows", ",", "ncols", ",", ")", ")", "\n", "x_2", "=", "x_2", ".", "swapaxes", "(", "-", "2", ",", "-", "1", ")", "\n", "image", "=", "x_1", "*", "x_2", "\n", "\n", "# Rescale to 32 x 32 from the original 2x2 or 3x3 data by expanding the", "\n", "# matrix to the nearest to 32 multiple of 2 or 3, evenly tiling it with the", "\n", "# original values, and then taking a 32x32 top left slice of it", "\n", "temp_image", "=", "[", "\n", "tile_array", "(", "x", ",", "np", ".", "ceil", "(", "32", "/", "x", ".", "shape", "[", "0", "]", ")", ".", "astype", "(", "'int'", ")", ",", "\n", "np", ".", "ceil", "(", "32", "/", "x", ".", "shape", "[", "1", "]", ")", ".", "astype", "(", "'int'", ")", ")", "[", ":", "32", ",", ":", "32", "]", "\n", "for", "x", "in", "np", ".", "squeeze", "(", "image", ")", "\n", "]", "\n", "image", "=", "np", ".", "stack", "(", "temp_image", ")", "\n", "image", "=", "np", ".", "repeat", "(", "np", ".", "expand_dims", "(", "image", ",", "-", "1", ")", ",", "3", ",", "axis", "=", "-", "1", ")", "\n", "\n", "return", "image", "[", "None", ",", "...", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.multiagent_dynamics.game_dynamics.ZeroSumGame.generate_and_render": [[144, 173], ["jax.split", "jax.split", "game_dynamics.ZeroSumGame.sample_x0", "game_dynamics.ZeroSumGame.generate_trajectories", "numpy.concatenate", "numpy.apply_along_axis", "game_dynamics.ZeroSumGame.render_trajectories", "dict"], "methods", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.multiagent_dynamics.game_dynamics.ZeroSumGame.sample_x0", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.multiagent_dynamics.game_dynamics.ZeroSumGame.generate_trajectories", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.multiagent_dynamics.game_dynamics.ZeroSumGame.render_trajectories"], ["", "def", "generate_and_render", "(", "\n", "self", ",", "\n", "num_trajectories", ":", "int", ",", "\n", "rng_key", ":", "jnp", ".", "ndarray", ",", "\n", "t0", ":", "utils", ".", "FloatArray", ",", "\n", "t_eval", ":", "utils", ".", "FloatArray", "\n", ")", "->", "Mapping", "[", "str", ",", "Any", "]", ":", "\n", "    ", "\"\"\"Generates trajectories and renders them.\n\n    Args:\n      num_trajectories: The number of trajectories to generate.\n      rng_key: PRNG key for sampling any random numbers.\n      t0: The time instance of the initial state y0.\n      t_eval: Times at which to return the computed solution.\n\n    Returns:\n      A dictionary containing the following elements:\n        'x': A numpy array representation of the phase space vector.\n        'dx_dt': The time derivative of 'x'.\n        'image': An image representation of the state.\n    \"\"\"", "\n", "rng_key", ",", "key", "=", "jnr", ".", "split", "(", "rng_key", ")", "\n", "x0", "=", "self", ".", "sample_x0", "(", "num_trajectories", ",", "key", ")", "\n", "x", "=", "self", ".", "generate_trajectories", "(", "x0", ",", "t0", ",", "t_eval", ")", "\n", "x", "=", "np", ".", "concatenate", "(", "[", "x0", "[", ":", ",", "None", "]", ",", "x", "]", ",", "axis", "=", "1", ")", "# Add initial state.", "\n", "dx_dt", "=", "np", ".", "apply_along_axis", "(", "self", ".", "dynamics", ",", "-", "1", ",", "x", ")", "\n", "image", "=", "self", ".", "render_trajectories", "(", "x", ")", "\n", "\n", "return", "dict", "(", "x", "=", "x", ",", "dx_dt", "=", "dx_dt", ",", "image", "=", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.multiagent_dynamics.game_dynamics.ZeroSumGame.generate_and_render_dt": [[174, 185], ["dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.dt_to_t_eval", "game_dynamics.ZeroSumGame.generate_and_render"], "methods", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.dt_to_t_eval", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.multiagent_dynamics.game_dynamics.ZeroSumGame.generate_and_render"], ["", "def", "generate_and_render_dt", "(", "\n", "self", ",", "\n", "num_trajectories", ":", "int", ",", "\n", "rng_key", ":", "jnp", ".", "ndarray", ",", "\n", "t0", ":", "utils", ".", "FloatArray", ",", "\n", "dt", ":", "utils", ".", "FloatArray", ",", "\n", "num_steps", ":", "int", "\n", ")", "->", "Mapping", "[", "str", ",", "Any", "]", ":", "\n", "    ", "\"\"\"Same as `generate_and_render` but uses `dt` and `num_steps`.\"\"\"", "\n", "t_eval", "=", "utils", ".", "dt_to_t_eval", "(", "t0", ",", "dt", ",", "num_steps", ")", "\n", "return", "self", ".", "generate_and_render", "(", "num_trajectories", ",", "rng_key", ",", "t0", ",", "t_eval", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.multiagent_dynamics.game_dynamics.sample_from_simplex": [[29, 42], ["jax.uniform", "jax.sort", "jax.hstack", "jax.zeros", "jax.ones"], "function", ["None"], ["def", "sample_from_simplex", "(", "\n", "num_samples", ":", "int", ",", "\n", "rng", ":", "jnp", ".", "ndarray", ",", "\n", "dim", ":", "int", "=", "3", ",", "\n", "vmin", ":", "float", "=", "0.", "\n", ")", "->", "jnp", ".", "ndarray", ":", "\n", "  ", "\"\"\"Samples random points from a k-simplex. See D. B. Rubin (1981), p131.\"\"\"", "\n", "# This is a jax version of open_spiel.python.egt.utils.sample_from_simplex.", "\n", "assert", "vmin", ">=", "0.", "\n", "p", "=", "jnr", ".", "uniform", "(", "rng", ",", "shape", "=", "(", "num_samples", ",", "dim", "-", "1", ")", ")", "\n", "p", "=", "jnp", ".", "sort", "(", "p", ",", "axis", "=", "1", ")", "\n", "p", "=", "jnp", ".", "hstack", "(", "(", "jnp", ".", "zeros", "(", "(", "num_samples", ",", "1", ")", ")", ",", "p", ",", "jnp", ".", "ones", "(", "(", "num_samples", ",", "1", ")", ")", ")", ")", "\n", "return", "(", "p", "[", ":", ",", "1", ":", "]", "-", "p", "[", ":", ",", "0", ":", "-", "1", "]", ")", "*", "(", "1", "-", "2", "*", "vmin", ")", "+", "vmin", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.multiagent_dynamics.game_dynamics.get_payoff_tensor": [[44, 50], ["open_spiel.python.pybind11.pyspiel.extensive_to_tensor_game", "open_spiel.python.egt.utils.game_payoffs_array", "open_spiel.python.pybind11.pyspiel.load_game", "pyspiel.extensive_to_tensor_game.get_type"], "function", ["None"], ["", "def", "get_payoff_tensor", "(", "game_name", ":", "str", ")", "->", "jnp", ".", "ndarray", ":", "\n", "  ", "\"\"\"Returns the payoff tensor of a game.\"\"\"", "\n", "game", "=", "pyspiel", ".", "extensive_to_tensor_game", "(", "pyspiel", ".", "load_game", "(", "game_name", ")", ")", "\n", "assert", "game", ".", "get_type", "(", ")", ".", "utility", "==", "pyspiel", ".", "GameType", ".", "Utility", ".", "ZERO_SUM", "\n", "payoff_tensor", "=", "egt_utils", ".", "game_payoffs_array", "(", "game", ")", "\n", "return", "payoff_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.multiagent_dynamics.game_dynamics.tile_array": [[52, 57], ["numpy.lib.stride_tricks.as_strided", "numpy.lib.stride_tricks.as_strided.reshape"], "function", ["None"], ["", "def", "tile_array", "(", "a", ":", "jnp", ".", "ndarray", ",", "b0", ":", "int", ",", "b1", ":", "int", ")", "->", "jnp", ".", "ndarray", ":", "\n", "  ", "r", ",", "c", "=", "a", ".", "shape", "# number of rows/columns", "\n", "rs", ",", "cs", "=", "a", ".", "strides", "# row/column strides", "\n", "x", "=", "as_strided", "(", "a", ",", "(", "r", ",", "b0", ",", "c", ",", "b1", ")", ",", "(", "rs", ",", "0", ",", "cs", ",", "0", ")", ")", "# view a as larger 4D array", "\n", "return", "x", ".", "reshape", "(", "r", "*", "b0", ",", "c", "*", "b1", ")", "# create new 2D array", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.tests.test_datasets.TestToyDataset.compare_structures_all_the_same": [[46, 61], ["test_datasets.TestToyDataset.assertEqual", "tensorflow.image.convert_image_dtype().numpy", "zip", "jax.tree_structure", "jax.tree_structure", "jax.tree_leaves", "jax.tree_leaves", "test_datasets.TestToyDataset.assertEqual", "test_datasets.TestToyDataset.assertEqual", "test_datasets.TestToyDataset.assertTrue", "tensorflow.image.convert_image_dtype", "jax.numpy.allclose"], "methods", ["None"], ["def", "compare_structures_all_the_same", "(", "self", ",", "example", ",", "batched_example", ")", ":", "\n", "    ", "\"\"\"Compares that the two examples are identical in structure and value.\"\"\"", "\n", "self", ".", "assertEqual", "(", "\n", "jax", ".", "tree_structure", "(", "example", ")", ",", "\n", "jax", ".", "tree_structure", "(", "batched_example", ")", ",", "\n", "\"Structures should be the same.\"", "\n", ")", "\n", "# The real example image is not converted however", "\n", "example", "[", "\"image\"", "]", "=", "tf", ".", "image", ".", "convert_image_dtype", "(", "\n", "example", "[", "\"image\"", "]", ",", "dtype", "=", "batched_example", "[", "\"image\"", "]", ".", "dtype", ")", ".", "numpy", "(", ")", "\n", "for", "v1", ",", "v2", "in", "zip", "(", "jax", ".", "tree_leaves", "(", "example", ")", ",", "\n", "jax", ".", "tree_leaves", "(", "batched_example", ")", ")", ":", "\n", "      ", "self", ".", "assertEqual", "(", "v1", ".", "dtype", ",", "v2", ".", "dtype", ",", "\"Dtypes should be the same.\"", ")", "\n", "self", ".", "assertEqual", "(", "(", "1", ",", ")", "+", "v1", ".", "shape", ",", "v2", ".", "shape", ",", "\"Shapes should be the same.\"", ")", "\n", "self", ".", "assertTrue", "(", "jnp", ".", "allclose", "(", "v1", ",", "v2", "[", "0", "]", ")", ",", "\"Values should be the same.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.tests.test_datasets.TestToyDataset.test_dataset": [[62, 129], ["absl.testing.parameterized.parameters", "dm_hamiltonian_dynamics_suite.datasets.generate_full_dataset", "dm_hamiltonian_dynamics_suite.load_datasets.dataset_as_iter", "tuple", "test_datasets.TestToyDataset.assertEqual", "zip", "dm_hamiltonian_dynamics_suite.load_datasets.dataset_as_iter", "tuple", "test_datasets.TestToyDataset.assertEqual", "zip", "str().replace", "len", "len", "test_datasets.TestToyDataset.compare_structures_all_the_same", "len", "len", "test_datasets.TestToyDataset.compare_structures_all_the_same", "dataset.lower", "os.path.join", "os.path.join", "str", "dm_hamiltonian_dynamics_suite.load_datasets.dataset_as_iter.", "dm_hamiltonian_dynamics_suite.load_datasets.dataset_as_iter."], "methods", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.dm_hamiltonian_dynamics_suite.datasets.generate_full_dataset", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.dm_hamiltonian_dynamics_suite.load_datasets.dataset_as_iter", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.dm_hamiltonian_dynamics_suite.load_datasets.dataset_as_iter", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.tests.test_datasets.TestToyDataset.compare_structures_all_the_same", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.tests.test_datasets.TestToyDataset.compare_structures_all_the_same"], ["", "", "@", "parameterized", ".", "parameters", "(", "DATASETS_TO_TEST", ")", "\n", "def", "test_dataset", "(", "\n", "self", ",", "\n", "dataset", ",", "\n", "folder", ":", "str", "=", "\"/tmp/dm_hamiltonian_dynamics_suite/tests/\"", ",", "\n", "dt", ":", "float", "=", "0.1", ",", "\n", "num_steps", ":", "int", "=", "100", ",", "\n", "steps_per_dt", ":", "int", "=", "10", ",", "\n", "num_train", ":", "int", "=", "10", ",", "\n", "num_test", ":", "int", "=", "10", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Checks that the dataset generation and loading are working correctly.\"\"\"", "\n", "\n", "# Generate the dataset", "\n", "train_examples", ",", "test_examples", "=", "datasets", ".", "generate_full_dataset", "(", "\n", "folder", "=", "folder", ",", "\n", "dataset", "=", "dataset", ",", "\n", "dt", "=", "dt", ",", "\n", "num_steps", "=", "num_steps", ",", "\n", "steps_per_dt", "=", "steps_per_dt", ",", "\n", "num_train", "=", "num_train", ",", "\n", "num_test", "=", "num_test", ",", "\n", "overwrite", "=", "True", ",", "\n", "return_generated_examples", "=", "True", ",", "\n", ")", "\n", "\n", "# Load train dataset", "\n", "dataset_path", "=", "dataset", ".", "lower", "(", ")", "+", "\"_dt_\"", "+", "str", "(", "dt", ")", ".", "replace", "(", "\".\"", ",", "\"_\"", ")", "\n", "ds", "=", "load_datasets", ".", "dataset_as_iter", "(", "\n", "load_datasets", ".", "load_dataset", ",", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "dataset_path", ")", ",", "\n", "tfrecord_prefix", "=", "\"train\"", ",", "\n", "sub_sample_length", "=", "None", ",", "\n", "per_device_batch_size", "=", "1", ",", "\n", "num_epochs", "=", "1", ",", "\n", "drop_remainder", "=", "False", ",", "\n", "dtype", "=", "\"float64\"", "\n", ")", "\n", "examples", "=", "tuple", "(", "x", "for", "x", "in", "ds", "(", ")", ")", "\n", "self", ".", "assertEqual", "(", "\n", "len", "(", "train_examples", ")", ",", "len", "(", "examples", ")", ",", "\n", "\"Number of training examples not the same.\"", "\n", ")", "\n", "# Compare individual examples", "\n", "for", "example_1", ",", "example_2", "in", "zip", "(", "train_examples", ",", "examples", ")", ":", "\n", "      ", "self", ".", "compare_structures_all_the_same", "(", "example_1", ",", "example_2", ")", "\n", "\n", "# Load test dataset", "\n", "", "ds", "=", "load_datasets", ".", "dataset_as_iter", "(", "\n", "load_datasets", ".", "load_dataset", ",", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "dataset_path", ")", ",", "\n", "tfrecord_prefix", "=", "\"test\"", ",", "\n", "sub_sample_length", "=", "None", ",", "\n", "per_device_batch_size", "=", "1", ",", "\n", "num_epochs", "=", "1", ",", "\n", "drop_remainder", "=", "False", ",", "\n", "dtype", "=", "\"float64\"", "\n", ")", "\n", "\n", "examples", "=", "tuple", "(", "x", "for", "x", "in", "ds", "(", ")", ")", "\n", "self", ".", "assertEqual", "(", "\n", "len", "(", "test_examples", ")", ",", "len", "(", "examples", ")", ",", "\n", "\"Number of test examples not the same.\"", "\n", ")", "\n", "# Compare individual examples", "\n", "for", "example_1", ",", "example_2", "in", "zip", "(", "test_examples", ",", "examples", ")", ":", "\n", "      ", "self", ".", "compare_structures_all_the_same", "(", "example_1", ",", "example_2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.molecular_dynamics.generate_dataset.read_trajectory": [[36, 83], ["f.read.split", "int", "numpy.fromstring", "range", "open", "f.read", "len", "numpy.array", "records.append", "numpy.array", "l.split"], "function", ["None"], ["\"How many internal steps to do per a single observation \"", "\n", "\"step.\"", ")", "\n", "flags", ".", "DEFINE_integer", "(", "\"num_train\"", ",", "None", ",", "\n", "\"The number of training examples to generate.\"", ")", "\n", "flags", ".", "DEFINE_integer", "(", "\"num_test\"", ",", "None", ",", "\n", "\"The number of test examples to generate.\"", ")", "\n", "flags", ".", "DEFINE_boolean", "(", "\"overwrite\"", ",", "False", ",", "\"Overwrites previous data.\"", ")", "\n", "\n", "flags", ".", "mark_flag_as_required", "(", "\"folder\"", ")", "\n", "flags", ".", "mark_flag_as_required", "(", "\"dataset\"", ")", "\n", "flags", ".", "mark_flag_as_required", "(", "\"dt\"", ")", "\n", "flags", ".", "mark_flag_as_required", "(", "\"num_steps\"", ")", "\n", "flags", ".", "mark_flag_as_required", "(", "\"num_train\"", ")", "\n", "flags", ".", "mark_flag_as_required", "(", "\"num_test\"", ")", "\n", "FLAGS", "=", "flags", ".", "FLAGS", "\n", "\n", "\n", "def", "main", "(", "argv", ")", ":", "\n", "  ", "if", "len", "(", "argv", ")", ">", "1", ":", "\n", "    ", "raise", "ValueError", "(", "f\"Unexpected args: {argv[1:]}\"", ")", "\n", "", "if", "FLAGS", ".", "dataset", "==", "\"molecular_dynamics\"", ":", "\n", "    ", "generate_dataset", ".", "generate_lammps_dataset", "(", "\n", "lammps_file", "=", "FLAGS", ".", "lammps_file", ",", "\n", "folder", "=", "FLAGS", ".", "output_path", ",", "\n", "dt", "=", "FLAGS", ".", "dt", ",", "\n", "num_steps", "=", "FLAGS", ".", "num_steps", ",", "\n", "num_train", "=", "FLAGS", ".", "num_train", ",", "\n", "num_test", "=", "FLAGS", ".", "num_test", ",", "\n", "shuffle", "=", "FLAGS", ".", "shuffle", ",", "\n", "seed", "=", "FLAGS", ".", "seed", ",", "\n", "overwrite", "=", "FLAGS", ".", "overwrite", ",", "\n", ")", "\n", "", "else", ":", "\n", "    ", "datasets", ".", "generate_full_dataset", "(", "\n", "folder", "=", "FLAGS", ".", "folder", ",", "\n", "dataset", "=", "FLAGS", ".", "dataset", ",", "\n", "dt", "=", "FLAGS", ".", "dt", ",", "\n", "num_steps", "=", "FLAGS", ".", "num_steps", ",", "\n", "steps_per_dt", "=", "FLAGS", ".", "steps_per_dt", ",", "\n", "num_train", "=", "FLAGS", ".", "num_train", ",", "\n", "num_test", "=", "FLAGS", ".", "num_test", ",", "\n", "overwrite", "=", "FLAGS", ".", "overwrite", "\n", ")", "\n", "\n", "\n", "", "", "if", "__name__", "==", "\"__main__\"", ":", "\n", "  ", "jax", ".", "config", ".", "update", "(", "\"jax_enable_x64\"", ",", "True", ")", "\n", "app", ".", "run", "(", "main", ")", "\n"]], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.molecular_dynamics.generate_dataset.flatten_record": [[85, 96], ["q.reshape", "p.reshape", "numpy.concatenate", "ValueError", "list", "list"], "function", ["None"], []], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.molecular_dynamics.generate_dataset.render_images": [[98, 127], ["particles.reshape.reshape", "numpy.arange", "dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.BoxRegion", "dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.render_particles_trajectory", "ValueError"], "function", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.hamiltonian_systems.utils.render_particles_trajectory"], []], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.molecular_dynamics.generate_dataset.convert_sequence": [[129, 146], ["numpy.empty", "numpy.empty", "range", "generate_dataset.render_images", "numpy.array", "dict", "ValueError", "generate_dataset.flatten_record", "generate_dataset.flatten_record"], "function", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.molecular_dynamics.generate_dataset.render_images", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.molecular_dynamics.generate_dataset.flatten_record", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.molecular_dynamics.generate_dataset.flatten_record"], []], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.molecular_dynamics.generate_dataset.write_to_file": [[148, 162], ["dm_hamiltonian_dynamics_suite.datasets.transform_dataset", "generate_dataset.write_to_file.generator"], "function", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.dm_hamiltonian_dynamics_suite.datasets.transform_dataset"], []], "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.molecular_dynamics.generate_dataset.generate_lammps_dataset": [[164, 205], ["generate_dataset.read_trajectory", "records.reshape.reshape", "print", "generate_dataset.write_to_file", "print", "generate_dataset.write_to_file", "ValueError", "ValueError", "ValueError", "numpy.random.RandomState().shuffle", "numpy.random.RandomState"], "function", ["home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.molecular_dynamics.generate_dataset.read_trajectory", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.molecular_dynamics.generate_dataset.write_to_file", "home.repos.pwc.inspect_result.deepmind_dm_hamiltonian_dynamics_suite.molecular_dynamics.generate_dataset.write_to_file"], []]}