{"home.repos.pwc.inspect_result.dmzou_SCAT.None.utilMol.MolFromGraphs": [[13, 47], ["rdkit.Chem.RWMol", "range", "enumerate", "mol.GetMol.GetMol", "len", "rdkit.Chem.Atom", "mol.GetMol.AddAtom", "enumerate", "mol.GetMol.AddBond", "mol.GetMol.AddBond"], "function", ["None"], ["def", "MolFromGraphs", "(", "node_list", ",", "adjacency_matrix", ")", ":", "\n", "\n", "# create empty editable mol object", "\n", "    ", "mol", "=", "Chem", ".", "RWMol", "(", ")", "\n", "\n", "# add atoms to mol and keep track of index", "\n", "node_to_idx", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "node_list", ")", ")", ":", "\n", "        ", "a", "=", "Chem", ".", "Atom", "(", "node_list", "[", "i", "]", ")", "\n", "molIdx", "=", "mol", ".", "AddAtom", "(", "a", ")", "\n", "node_to_idx", "[", "i", "]", "=", "molIdx", "\n", "\n", "# add bonds between adjacent atoms", "\n", "", "for", "ix", ",", "row", "in", "enumerate", "(", "adjacency_matrix", ")", ":", "\n", "        ", "for", "iy", ",", "bond", "in", "enumerate", "(", "row", ")", ":", "\n", "\n", "# only traverse half the matrix", "\n", "            ", "if", "iy", "<=", "ix", ":", "\n", "                ", "continue", "\n", "\n", "# add relevant bond type (there are many more of these)", "\n", "", "if", "bond", "==", "0", ":", "\n", "                ", "continue", "\n", "", "elif", "bond", "==", "1", ":", "\n", "                ", "bond_type", "=", "Chem", ".", "rdchem", ".", "BondType", ".", "SINGLE", "\n", "mol", ".", "AddBond", "(", "node_to_idx", "[", "ix", "]", ",", "node_to_idx", "[", "iy", "]", ",", "bond_type", ")", "\n", "", "elif", "bond", "==", "2", ":", "\n", "                ", "bond_type", "=", "Chem", ".", "rdchem", ".", "BondType", ".", "DOUBLE", "\n", "mol", ".", "AddBond", "(", "node_to_idx", "[", "ix", "]", ",", "node_to_idx", "[", "iy", "]", ",", "bond_type", ")", "\n", "\n", "# Convert RWMol to Mol object", "\n", "", "", "", "mol", "=", "mol", ".", "GetMol", "(", ")", "\n", "\n", "return", "mol", "\n", "\n"]], "home.repos.pwc.inspect_result.dmzou_SCAT.None.utilMol.moltosvg": [[48, 62], ["rdkit.Chem.Mol", "rdkit.Chem.Draw.rdMolDraw2D.MolDraw2DSVG", "rdMolDraw2D.MolDraw2DSVG.DrawMolecule", "rdMolDraw2D.MolDraw2DSVG.FinishDrawing", "rdMolDraw2D.MolDraw2DSVG.GetDrawingText", "mol.ToBinary", "Chem.Mol.GetNumConformers", "rdkit.Chem.rdDepictor.Compute2DCoords", "rdkit.Chem.Kekulize", "rdkit.Chem.Mol", "mol.ToBinary"], "function", ["None"], ["", "def", "moltosvg", "(", "mol", ",", "molSize", "=", "(", "450", ",", "150", ")", ",", "kekulize", "=", "True", ")", ":", "\n", "    ", "mc", "=", "Chem", ".", "Mol", "(", "mol", ".", "ToBinary", "(", ")", ")", "\n", "if", "kekulize", ":", "\n", "        ", "try", ":", "\n", "            ", "Chem", ".", "Kekulize", "(", "mc", ")", "\n", "", "except", ":", "\n", "            ", "mc", "=", "Chem", ".", "Mol", "(", "mol", ".", "ToBinary", "(", ")", ")", "\n", "", "", "if", "not", "mc", ".", "GetNumConformers", "(", ")", ":", "\n", "        ", "rdDepictor", ".", "Compute2DCoords", "(", "mc", ")", "\n", "", "drawer", "=", "rdMolDraw2D", ".", "MolDraw2DSVG", "(", "molSize", "[", "0", "]", ",", "molSize", "[", "1", "]", ")", "\n", "drawer", ".", "DrawMolecule", "(", "mc", ")", "\n", "drawer", ".", "FinishDrawing", "(", ")", "\n", "svg", "=", "drawer", ".", "GetDrawingText", "(", ")", "\n", "return", "svg", "\n", "\n"]], "home.repos.pwc.inspect_result.dmzou_SCAT.None.utilMol.render_svg": [[63, 68], ["IPython.display.SVG", "svg.replace"], "function", ["None"], ["", "def", "render_svg", "(", "svg", ")", ":", "\n", "# It seems that the svg renderer used doesn't quite hit the spec.", "\n", "# Here are some fixes to make it work in the notebook, although I think", "\n", "# the underlying issue needs to be resolved at the generation step", "\n", "    ", "return", "SVG", "(", "svg", ".", "replace", "(", "'svg:'", ",", "''", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dmzou_SCAT.None.utilMol.atom_to_hot": [[75, 87], ["numpy.zeros", "range", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "len", "len"], "function", ["None"], ["", "def", "atom_to_hot", "(", "atom", ")", ":", "\n", "    ", "'''transfer atom numbers to one-hot vectors'''", "\n", "A", "=", "np", ".", "zeros", "(", "(", "5", ",", "len", "(", "atom", ")", ")", ")", "\n", "dict_atom", "=", "{", "6", ":", "np", ".", "array", "(", "[", "1.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ")", ",", "\n", "8", ":", "np", ".", "array", "(", "[", "0.", ",", "1.", ",", "0.", ",", "0.", ",", "0.", "]", ")", ",", "\n", "7", ":", "np", ".", "array", "(", "[", "0.", ",", "0.", ",", "1.", ",", "0.", ",", "0.", "]", ")", ",", "\n", "9", ":", "np", ".", "array", "(", "[", "0.", ",", "0.", ",", "0.", ",", "1.", ",", "0.", "]", ")", ",", "\n", "0", ":", "np", ".", "array", "(", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "1.", "]", ")", "\n", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "atom", ")", ")", ":", "\n", "        ", "A", "[", ":", ",", "i", "]", "=", "dict_atom", "[", "atom", "[", "i", "]", "]", "\n", "", "return", "A", "", "", ""]], "home.repos.pwc.inspect_result.dmzou_SCAT.None.scat.propLayer": [[12, 26], ["range", "range", "y.append", "idx.append", "idx.append", "numpy.matmul", "numpy.matmul"], "function", ["None"], ["def", "propLayer", "(", "f", ",", "lamb", ",", "V", ",", "K", "=", "4", ",", "N", "=", "1", ")", ":", "\n", "# K: scale; N: bandwidth", "\n", "    ", "idx", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "K", ")", ":", "\n", "        ", "if", "k", "==", "0", ":", "\n", "            ", "idx", ".", "append", "(", "lamb", "<", "N", ")", "\n", "", "else", ":", "\n", "            ", "idx", ".", "append", "(", "(", "lamb", ">=", "2", "**", "(", "k", "-", "1", ")", "*", "N", ")", "*", "(", "lamb", "<", "2", "**", "k", "*", "N", ")", ")", "\n", "\n", "", "", "y", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "K", ")", ":", "\n", "        ", "y", ".", "append", "(", "np", ".", "matmul", "(", "np", ".", "matmul", "(", "V", "[", ":", ",", "idx", "[", "k", "]", "]", ",", "V", "[", ":", ",", "idx", "[", "k", "]", "]", ".", "T", ")", ",", "f", ")", ")", "\n", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.dmzou_SCAT.None.scat.phi": [[31, 34], ["numpy.sinc"], "function", ["None"], ["def", "phi", "(", "lamb", ")", ":", "\n", "    ", "phi", "=", "np", ".", "sinc", "(", "2", "*", "lamb", ")", "\n", "return", "phi", "\n", "\n"]], "home.repos.pwc.inspect_result.dmzou_SCAT.None.scat.psi": [[35, 38], ["numpy.sinc", "numpy.cos"], "function", ["None"], ["", "def", "psi", "(", "lamb", ")", ":", "\n", "    ", "psi", "=", "np", ".", "sinc", "(", "lamb", ")", "*", "(", "1", "-", "np", ".", "cos", "(", "np", ".", "pi", "*", "lamb", ")", ")", "\n", "return", "psi", "\n", "\n"]], "home.repos.pwc.inspect_result.dmzou_SCAT.None.scat.propLayerHaar": [[39, 50], ["range", "numpy.diag", "y.append", "scat.phi", "scat.psi", "numpy.matmul", "numpy.matmul", "numpy.matmul"], "function", ["home.repos.pwc.inspect_result.dmzou_SCAT.None.scat.phi", "home.repos.pwc.inspect_result.dmzou_SCAT.None.scat.psi"], ["", "def", "propLayerHaar", "(", "f", ",", "lamb", ",", "V", ",", "J", "=", "3", ")", ":", "# to replace propLayer", "\n", "    ", "y", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "J", ")", ":", "\n", "        ", "j", "=", "J", "-", "k", "\n", "if", "j", "==", "J", ":", "\n", "            ", "H", "=", "phi", "(", "2", "**", "j", "*", "lamb", ")", "\n", "", "else", ":", "\n", "            ", "H", "=", "psi", "(", "2", "**", "(", "-", "j", ")", "*", "lamb", ")", "\n", "", "H", "=", "np", ".", "diag", "(", "H", ")", "\n", "y", ".", "append", "(", "np", ".", "matmul", "(", "np", ".", "matmul", "(", "np", ".", "matmul", "(", "V", ",", "H", ")", ",", "V", ".", "T", ")", ",", "f", ")", ")", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.dmzou_SCAT.None.scat.getRep": [[53, 68], ["scat.propLayer", "np.concatenate.append", "y_next.extend", "range", "numpy.concatenate", "propLayer.pop", "range", "tuple", "len", "y_next.pop", "numpy.absolute", "scat.propLayer", "np.concatenate.append", "y_next.extend", "propLayer.pop"], "function", ["home.repos.pwc.inspect_result.dmzou_SCAT.None.scat.propLayer", "home.repos.pwc.inspect_result.dmzou_SCAT.None.scat.propLayer"], ["def", "getRep", "(", "f", ",", "lamb", ",", "V", ",", "layer", "=", "3", ",", "N", "=", "1", ")", ":", "\n", "    ", "y_out", "=", "[", "]", "\n", "y_next", "=", "[", "]", "\n", "y", "=", "propLayer", "(", "f", ",", "lamb", ",", "V", ",", "N", "=", "N", ")", "\n", "y_out", ".", "append", "(", "y", ".", "pop", "(", "0", ")", ")", "\n", "y_next", ".", "extend", "(", "y", ")", "\n", "for", "i", "in", "range", "(", "layer", "-", "1", ")", ":", "\n", "        ", "for", "k", "in", "range", "(", "len", "(", "y_next", ")", ")", ":", "\n", "            ", "ftemp", "=", "y_next", ".", "pop", "(", "0", ")", "\n", "ftemp", "=", "np", ".", "absolute", "(", "ftemp", ")", "\n", "y", "=", "propLayer", "(", "ftemp", ",", "lamb", ",", "V", ",", "N", "=", "N", ")", "\n", "y_out", ".", "append", "(", "y", ".", "pop", "(", "0", ")", ")", "\n", "y_next", ".", "extend", "(", "y", ")", "\n", "", "", "y_out", "=", "np", ".", "concatenate", "(", "tuple", "(", "y_out", ")", ",", "axis", "=", "1", ")", "# use this to form a single matrix", "\n", "return", "y_out", "\n", "\n"]], "home.repos.pwc.inspect_result.dmzou_SCAT.None.scat.diffusion_scat": [[73, 103], ["networkx.from_scipy_sparse_matrix", "numpy.array", "numpy.diag", "numpy.matmul", "numpy.linalg.matrix_power", "range", "range", "numpy.concatenate", "numpy.matmul", "numpy.matmul", "range", "tuple", "numpy.max", "numpy.sqrt", "W.todense", "numpy.eye", "psi.append", "numpy.matmul", "psi.append", "numpy.absolute", "len", "y_next.pop", "numpy.absolute", "np.concatenate.extend", "y_next_new.extend", "list", "numpy.matmul", "numpy.shape", "numpy.eye", "numpy.matmul", "numpy.absolute", "numpy.shape"], "function", ["None"], ["", "def", "diffusion_scat", "(", "f", ",", "W", ",", "K", "=", "3", ",", "t", "=", "3", ",", "layer", "=", "3", ")", ":", "\n", "    ", "G", "=", "nx", ".", "from_scipy_sparse_matrix", "(", "W", ")", "\n", "D", "=", "np", ".", "array", "(", "[", "np", ".", "max", "(", "(", "d", ",", "1", ")", ")", "for", "(", "temp", ",", "d", ")", "in", "list", "(", "G", ".", "degree", ")", "]", ")", "\n", "Dhalf", "=", "np", ".", "diag", "(", "1", "/", "np", ".", "sqrt", "(", "D", ")", ")", "\n", "A", "=", "np", ".", "matmul", "(", "np", ".", "matmul", "(", "Dhalf", ",", "W", ".", "todense", "(", ")", ")", ",", "Dhalf", ")", "\n", "T", "=", "(", "np", ".", "eye", "(", "np", ".", "shape", "(", "D", ")", "[", "0", "]", ")", "+", "A", ")", "/", "2", "\n", "U", "=", "np", ".", "linalg", ".", "matrix_power", "(", "T", ",", "t", ")", "\n", "psi", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "K", ")", ":", "\n", "        ", "if", "idx", "==", "0", ":", "\n", "            ", "psi", ".", "append", "(", "np", ".", "eye", "(", "np", ".", "shape", "(", "D", ")", "[", "0", "]", ")", "-", "T", ")", "\n", "", "else", ":", "\n", "            ", "T0", "=", "T", "\n", "T", "=", "np", ".", "matmul", "(", "T0", ",", "T0", ")", "\n", "psi", ".", "append", "(", "T0", "-", "T", ")", "\n", "\n", "", "", "y_next", "=", "[", "f", "]", "\n", "y_out", "=", "[", "np", ".", "matmul", "(", "U", ",", "np", ".", "absolute", "(", "f", ")", ")", "]", "\n", "\n", "for", "i", "in", "range", "(", "layer", "-", "1", ")", ":", "\n", "        ", "for", "k", "in", "range", "(", "len", "(", "y_next", ")", ")", ":", "\n", "            ", "y_next_new", "=", "[", "]", "\n", "ftemp", "=", "y_next", ".", "pop", "(", "0", ")", "\n", "ftemp", "=", "np", ".", "absolute", "(", "ftemp", ")", "\n", "y", "=", "[", "np", ".", "matmul", "(", "fltr", ",", "ftemp", ")", "for", "fltr", "in", "psi", "]", "\n", "y_out", ".", "extend", "(", "[", "np", ".", "matmul", "(", "U", ",", "np", ".", "absolute", "(", "y_temp", ")", ")", "for", "y_temp", "in", "y", "]", ")", "\n", "y_next_new", ".", "extend", "(", "y", ")", "\n", "", "y_next", "=", "y_next_new", "\n", "", "y_out", "=", "np", ".", "concatenate", "(", "tuple", "(", "y_out", ")", ",", "axis", "=", "0", ")", "# use this to form a single matrix", "\n", "return", "y_out", "\n", "\n"]], "home.repos.pwc.inspect_result.dmzou_SCAT.None.scat.gaussianization_whiten": [[109, 122], ["sklearn.decomposition.PCA", "sklearn.decomposition.PCA.fit", "numpy.matmul", "numpy.matmul", "numpy.sqrt", "numpy.diag"], "function", ["None"], ["", "def", "gaussianization_whiten", "(", "A", ",", "pca", "=", "True", ",", "num_of_components", "=", "8", ")", ":", "\n", "    ", "'''A is data matrix with size (# of sample) X (# of dimension)'''", "\n", "if", "not", "pca", ":", "\n", "        ", "num_of_components", "=", "A", ".", "shape", "[", "1", "]", "\n", "", "pca", "=", "PCA", "(", "n_components", "=", "num_of_components", ")", "\n", "pca", ".", "fit", "(", "A", ")", "\n", "A_mean", "=", "pca", ".", "mean_", "\n", "V", "=", "pca", ".", "components_", "\n", "lamb", "=", "pca", ".", "explained_variance_", "\n", "lamb_invhalf", "=", "1", "/", "np", ".", "sqrt", "(", "lamb", ")", "\n", "Sigma_invhalf", "=", "np", ".", "matmul", "(", "np", ".", "diag", "(", "lamb_invhalf", ")", ",", "V", ")", "\n", "A_gaussian", "=", "np", ".", "matmul", "(", "Sigma_invhalf", ",", "(", "A", "-", "A_mean", ")", ".", "T", ")", "\n", "return", "A_gaussian", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.dmzou_SCAT.None.scat.gaussianization_spherize": [[124, 132], ["sklearn.preprocessing.normalize", "numpy.mean", "sklearn.decomposition.PCA", "sklearn.decomposition.PCA.fit_transform"], "function", ["None"], ["", "def", "gaussianization_spherize", "(", "A", ",", "pca", "=", "True", ",", "num_of_components", "=", "8", ")", ":", "\n", "    ", "'''A is data matrix with size (# of sample) X (# of dimension)'''", "\n", "\n", "A", "=", "A", "-", "np", ".", "mean", "(", "A", ",", "axis", "=", "0", ")", "\n", "if", "pca", ":", "\n", "        ", "pca_model", "=", "PCA", "(", "n_components", "=", "num_of_components", ")", "\n", "A", "=", "pca_model", ".", "fit_transform", "(", "A", ")", "\n", "", "return", "normalize", "(", "A", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.dmzou_SCAT.None.example.parse_index_file": [[18, 24], ["open", "index.append", "int", "line.strip"], "function", ["None"], ["def", "parse_index_file", "(", "filename", ")", ":", "\n", "    ", "\"\"\"Parse index file.\"\"\"", "\n", "index", "=", "[", "]", "\n", "for", "line", "in", "open", "(", "filename", ")", ":", "\n", "        ", "index", ".", "append", "(", "int", "(", "line", ".", "strip", "(", ")", ")", ")", "\n", "", "return", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.dmzou_SCAT.None.example.sample_mask": [[26, 31], ["numpy.zeros", "numpy.array"], "function", ["None"], ["", "def", "sample_mask", "(", "idx", ",", "l", ")", ":", "\n", "    ", "\"\"\"Create mask.\"\"\"", "\n", "mask", "=", "np", ".", "zeros", "(", "l", ")", "\n", "mask", "[", "idx", "]", "=", "1", "\n", "return", "np", ".", "array", "(", "mask", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dmzou_SCAT.None.example.load_data": [[33, 82], ["range", "tuple", "example.parse_index_file", "numpy.sort", "scipy.vstack().tolil", "networkx.adjacency_matrix", "numpy.vstack", "np.sort.tolist", "range", "range", "example.sample_mask", "example.sample_mask", "example.sample_mask", "numpy.zeros", "numpy.zeros", "numpy.zeros", "len", "range", "scipy.lil_matrix", "numpy.zeros", "networkx.from_dict_of_lists", "len", "len", "open", "min", "scipy.vstack", "len", "objects.append", "objects.append", "max", "len", "len", "pickle.load", "pickle.load", "min", "min"], "function", ["home.repos.pwc.inspect_result.dmzou_SCAT.None.trainCora.parse_index_file", "home.repos.pwc.inspect_result.dmzou_SCAT.None.example.sample_mask", "home.repos.pwc.inspect_result.dmzou_SCAT.None.example.sample_mask", "home.repos.pwc.inspect_result.dmzou_SCAT.None.example.sample_mask"], ["", "def", "load_data", "(", "dataset_str", ")", ":", "\n", "    ", "\"\"\"Load data.\"\"\"", "\n", "names", "=", "[", "'x'", ",", "'y'", ",", "'tx'", ",", "'ty'", ",", "'allx'", ",", "'ally'", ",", "'graph'", "]", "\n", "objects", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "names", ")", ")", ":", "\n", "        ", "with", "open", "(", "\"data/ind.{}.{}\"", ".", "format", "(", "dataset_str", ",", "names", "[", "i", "]", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "if", "sys", ".", "version_info", ">", "(", "3", ",", "0", ")", ":", "\n", "                ", "objects", ".", "append", "(", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", ")", "\n", "", "else", ":", "\n", "                ", "objects", ".", "append", "(", "pickle", ".", "load", "(", "f", ")", ")", "\n", "\n", "", "", "", "x", ",", "y", ",", "tx", ",", "ty", ",", "allx", ",", "ally", ",", "graph", "=", "tuple", "(", "objects", ")", "\n", "test_idx_reorder", "=", "parse_index_file", "(", "\"data/ind.{}.test.index\"", ".", "format", "(", "dataset_str", ")", ")", "\n", "test_idx_range", "=", "np", ".", "sort", "(", "test_idx_reorder", ")", "\n", "\n", "if", "dataset_str", "==", "'citeseer'", ":", "\n", "# Fix citeseer dataset (there are some isolated nodes in the graph)", "\n", "# Find isolated nodes, add them as zero-vecs into the right position", "\n", "        ", "test_idx_range_full", "=", "range", "(", "min", "(", "test_idx_reorder", ")", ",", "max", "(", "test_idx_reorder", ")", "+", "1", ")", "\n", "tx_extended", "=", "sp", ".", "lil_matrix", "(", "(", "len", "(", "test_idx_range_full", ")", ",", "x", ".", "shape", "[", "1", "]", ")", ")", "\n", "tx_extended", "[", "test_idx_range", "-", "min", "(", "test_idx_range", ")", ",", ":", "]", "=", "tx", "\n", "tx", "=", "tx_extended", "\n", "ty_extended", "=", "np", ".", "zeros", "(", "(", "len", "(", "test_idx_range_full", ")", ",", "y", ".", "shape", "[", "1", "]", ")", ")", "\n", "ty_extended", "[", "test_idx_range", "-", "min", "(", "test_idx_range", ")", ",", ":", "]", "=", "ty", "\n", "ty", "=", "ty_extended", "\n", "\n", "", "features", "=", "sp", ".", "vstack", "(", "(", "allx", ",", "tx", ")", ")", ".", "tolil", "(", ")", "\n", "features", "[", "test_idx_reorder", ",", ":", "]", "=", "features", "[", "test_idx_range", ",", ":", "]", "\n", "adj", "=", "nx", ".", "adjacency_matrix", "(", "nx", ".", "from_dict_of_lists", "(", "graph", ")", ")", "\n", "\n", "labels", "=", "np", ".", "vstack", "(", "(", "ally", ",", "ty", ")", ")", "\n", "labels", "[", "test_idx_reorder", ",", ":", "]", "=", "labels", "[", "test_idx_range", ",", ":", "]", "\n", "\n", "idx_test", "=", "test_idx_range", ".", "tolist", "(", ")", "\n", "idx_train", "=", "range", "(", "len", "(", "y", ")", ")", "\n", "idx_val", "=", "range", "(", "len", "(", "y", ")", ",", "len", "(", "y", ")", "+", "500", ")", "\n", "\n", "train_mask", "=", "sample_mask", "(", "idx_train", ",", "labels", ".", "shape", "[", "0", "]", ")", "\n", "val_mask", "=", "sample_mask", "(", "idx_val", ",", "labels", ".", "shape", "[", "0", "]", ")", "\n", "test_mask", "=", "sample_mask", "(", "idx_test", ",", "labels", ".", "shape", "[", "0", "]", ")", "\n", "\n", "y_train", "=", "np", ".", "zeros", "(", "labels", ".", "shape", ")", "\n", "y_val", "=", "np", ".", "zeros", "(", "labels", ".", "shape", ")", "\n", "y_test", "=", "np", ".", "zeros", "(", "labels", ".", "shape", ")", "\n", "y_train", "[", "train_mask", ",", ":", "]", "=", "labels", "[", "train_mask", ",", ":", "]", "\n", "y_val", "[", "val_mask", ",", ":", "]", "=", "labels", "[", "val_mask", ",", ":", "]", "\n", "y_test", "[", "test_mask", ",", ":", "]", "=", "labels", "[", "test_mask", ",", ":", "]", "\n", "\n", "return", "adj", ",", "features", ",", "y_train", ",", "y_val", ",", "y_test", ",", "train_mask", ",", "val_mask", ",", "test_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.dmzou_SCAT.None.trainQM9.fcn": [[163, 181], ["tensorflow.reshape", "utils.leaky_relu", "utils.leaky_relu", "utils.leaky_relu", "utils.leaky_relu", "tensorflow.reshape", "tensorflow.reshape", "utils.leaky_relu", "utils.leaky_relu", "utils.leaky_relu", "utils.leaky_relu", "tensorflow.reshape", "utils.leaky_relu", "tensorflow.transpose", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.transpose", "tensorflow.transpose"], "function", ["home.repos.pwc.inspect_result.dmzou_SCAT.None.utils.leaky_relu", "home.repos.pwc.inspect_result.dmzou_SCAT.None.utils.leaky_relu", "home.repos.pwc.inspect_result.dmzou_SCAT.None.utils.leaky_relu", "home.repos.pwc.inspect_result.dmzou_SCAT.None.utils.leaky_relu", "home.repos.pwc.inspect_result.dmzou_SCAT.None.utils.leaky_relu", "home.repos.pwc.inspect_result.dmzou_SCAT.None.utils.leaky_relu", "home.repos.pwc.inspect_result.dmzou_SCAT.None.utils.leaky_relu", "home.repos.pwc.inspect_result.dmzou_SCAT.None.utils.leaky_relu", "home.repos.pwc.inspect_result.dmzou_SCAT.None.utils.leaky_relu"], ["def", "fcn", "(", "x", ")", ":", "\n", "    ", "out1", "=", "tf", ".", "reshape", "(", "x", ",", "(", "-", "1", ",", "dim_atom", "*", "dim_final_feature", ")", ")", "\n", "out1", "=", "leaky_relu", "(", "tf", ".", "matmul", "(", "out1", ",", "W1", ")", "+", "b1", ")", "\n", "out1", "=", "leaky_relu", "(", "tf", ".", "matmul", "(", "out1", ",", "W11", ")", "+", "b11", ")", "\n", "out1", "=", "leaky_relu", "(", "tf", ".", "matmul", "(", "out1", ",", "W12", ")", "+", "b12", ")", "\n", "out1", "=", "leaky_relu", "(", "tf", ".", "matmul", "(", "out1", ",", "W13", ")", "+", "b13", ")", "\n", "out1", "=", "tf", ".", "reshape", "(", "out1", ",", "(", "-", "1", ",", "dim_atom", ",", "dim_final_1", ")", ")", "\n", "\n", "\n", "out2", "=", "tf", ".", "reshape", "(", "x", ",", "(", "-", "1", ",", "dim_atom", "*", "dim_final_feature", ")", ")", "\n", "out2", "=", "leaky_relu", "(", "tf", ".", "matmul", "(", "out2", ",", "W2", ")", "+", "b2", ")", "\n", "out2", "=", "leaky_relu", "(", "tf", ".", "matmul", "(", "out2", ",", "W21", ")", "+", "b21", ")", "\n", "out2", "=", "leaky_relu", "(", "tf", ".", "matmul", "(", "out2", ",", "W22", ")", "+", "b22", ")", "\n", "out2", "=", "leaky_relu", "(", "tf", ".", "matmul", "(", "out2", ",", "W23", ")", "+", "b23", ")", "\n", "out2", "=", "tf", ".", "reshape", "(", "out2", ",", "[", "-", "1", ",", "dim_atom", ",", "dim_bond_type", ",", "15", "]", ")", "\n", "out2", "=", "leaky_relu", "(", "tf", ".", "matmul", "(", "tf", ".", "transpose", "(", "out2", ",", "perm", "=", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", ",", "tf", ".", "transpose", "(", "out2", ",", "perm", "=", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", ")", ")", "\n", "out2", "=", "tf", ".", "transpose", "(", "out2", ",", "perm", "=", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", "\n", "return", "[", "out1", ",", "out2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dmzou_SCAT.None.trainCora.parse_index_file": [[35, 40], ["open", "index.append", "int", "line.strip"], "function", ["None"], ["def", "parse_index_file", "(", "filename", ")", ":", "\n", "    ", "index", "=", "[", "]", "\n", "for", "line", "in", "open", "(", "filename", ")", ":", "\n", "        ", "index", ".", "append", "(", "int", "(", "line", ".", "strip", "(", ")", ")", ")", "\n", "", "return", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.dmzou_SCAT.None.trainCora.load_data": [[42, 66], ["range", "tuple", "trainCora.parse_index_file", "numpy.sort", "scipy.vstack().tolil", "networkx.adjacency_matrix", "len", "range", "scipy.lil_matrix", "networkx.from_dict_of_lists", "open", "objects.append", "min", "scipy.vstack", "pickle.load", "max", "len", "min"], "function", ["home.repos.pwc.inspect_result.dmzou_SCAT.None.trainCora.parse_index_file"], ["", "def", "load_data", "(", "dataset", ")", ":", "\n", "# load the data: x, tx, allx, graph", "\n", "    ", "names", "=", "[", "'x'", ",", "'tx'", ",", "'allx'", ",", "'graph'", "]", "\n", "objects", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "names", ")", ")", ":", "\n", "        ", "with", "open", "(", "\"data/ind.{}.{}\"", ".", "format", "(", "dataset", ",", "names", "[", "i", "]", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "objects", ".", "append", "(", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", ")", "\n", "", "", "x", ",", "tx", ",", "allx", ",", "graph", "=", "tuple", "(", "objects", ")", "\n", "test_idx_reorder", "=", "parse_index_file", "(", "\"data/ind.{}.test.index\"", ".", "format", "(", "dataset", ")", ")", "\n", "test_idx_range", "=", "np", ".", "sort", "(", "test_idx_reorder", ")", "\n", "\n", "if", "dataset", "==", "'citeseer'", ":", "\n", "# Fix citeseer dataset (there are some isolated nodes in the graph)", "\n", "# Find isolated nodes, add them as zero-vecs into the right position", "\n", "        ", "test_idx_range_full", "=", "range", "(", "min", "(", "test_idx_reorder", ")", ",", "max", "(", "test_idx_reorder", ")", "+", "1", ")", "\n", "tx_extended", "=", "sp", ".", "lil_matrix", "(", "(", "len", "(", "test_idx_range_full", ")", ",", "x", ".", "shape", "[", "1", "]", ")", ")", "\n", "tx_extended", "[", "test_idx_range", "-", "min", "(", "test_idx_range", ")", ",", ":", "]", "=", "tx", "\n", "tx", "=", "tx_extended", "\n", "\n", "", "features", "=", "sp", ".", "vstack", "(", "(", "allx", ",", "tx", ")", ")", ".", "tolil", "(", ")", "\n", "features", "[", "test_idx_reorder", ",", ":", "]", "=", "features", "[", "test_idx_range", ",", ":", "]", "\n", "adj", "=", "nx", ".", "adjacency_matrix", "(", "nx", ".", "from_dict_of_lists", "(", "graph", ")", ")", "\n", "\n", "return", "adj", ",", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.dmzou_SCAT.None.trainCora.sparse_to_tuple": [[68, 75], ["numpy.vstack().transpose", "scipy.isspmatrix_coo", "sparse_mx.tocoo.tocoo", "numpy.vstack"], "function", ["None"], ["", "def", "sparse_to_tuple", "(", "sparse_mx", ")", ":", "\n", "    ", "if", "not", "sp", ".", "isspmatrix_coo", "(", "sparse_mx", ")", ":", "\n", "        ", "sparse_mx", "=", "sparse_mx", ".", "tocoo", "(", ")", "\n", "", "coords", "=", "np", ".", "vstack", "(", "(", "sparse_mx", ".", "row", ",", "sparse_mx", ".", "col", ")", ")", ".", "transpose", "(", ")", "\n", "values", "=", "sparse_mx", ".", "data", "\n", "shape", "=", "sparse_mx", ".", "shape", "\n", "return", "coords", ",", "values", ",", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.dmzou_SCAT.None.trainCora.preprocess_graph": [[77, 84], ["scipy.coo_matrix", "numpy.array", "scipy.diags", "adj_.dot().transpose().dot().tocoo", "trainCora.sparse_to_tuple", "scipy.eye", "adj_.sum", "numpy.power().flatten", "adj_.dot().transpose().dot", "numpy.power", "adj_.dot().transpose", "adj_.dot"], "function", ["home.repos.pwc.inspect_result.dmzou_SCAT.None.trainCora.sparse_to_tuple"], ["", "def", "preprocess_graph", "(", "adj", ")", ":", "\n", "    ", "adj", "=", "sp", ".", "coo_matrix", "(", "adj", ")", "\n", "adj_", "=", "adj", "+", "sp", ".", "eye", "(", "adj", ".", "shape", "[", "0", "]", ")", "\n", "rowsum", "=", "np", ".", "array", "(", "adj_", ".", "sum", "(", "1", ")", ")", "\n", "degree_mat_inv_sqrt", "=", "sp", ".", "diags", "(", "np", ".", "power", "(", "rowsum", ",", "-", "0.5", ")", ".", "flatten", "(", ")", ")", "\n", "adj_normalized", "=", "adj_", ".", "dot", "(", "degree_mat_inv_sqrt", ")", ".", "transpose", "(", ")", ".", "dot", "(", "degree_mat_inv_sqrt", ")", ".", "tocoo", "(", ")", "\n", "return", "sparse_to_tuple", "(", "adj_normalized", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dmzou_SCAT.None.trainCora.construct_feed_dict": [[86, 93], ["dict", "dict.update", "dict.update", "dict.update"], "function", ["None"], ["", "def", "construct_feed_dict", "(", "adj_normalized", ",", "adj", ",", "features", ",", "placeholders", ")", ":", "\n", "# construct feed dictionary", "\n", "    ", "feed_dict", "=", "dict", "(", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'features'", "]", ":", "features", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'adj'", "]", ":", "adj_normalized", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'adj_orig'", "]", ":", "adj", "}", ")", "\n", "return", "feed_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dmzou_SCAT.None.trainCora.mask_test_edges": [[95, 175], ["adj.eliminate_zeros", "scipy.triu", "trainCora.sparse_to_tuple", "int", "int", "list", "numpy.random.shuffle", "numpy.delete", "numpy.ones", "scipy.csr_matrix", "scipy.dia_matrix", "numpy.diag().sum", "trainCora.sparse_to_tuple", "numpy.floor", "numpy.floor", "range", "numpy.hstack", "numpy.all", "numpy.any", "len", "len", "numpy.random.randint", "numpy.random.randint", "trainCora.mask_test_edges.ismember"], "function", ["home.repos.pwc.inspect_result.dmzou_SCAT.None.trainCora.sparse_to_tuple", "home.repos.pwc.inspect_result.dmzou_SCAT.None.trainCora.sparse_to_tuple"], ["", "def", "mask_test_edges", "(", "adj", ")", ":", "\n", "# Function to build test set with 10% positive links", "\n", "# NOTE: Splits are randomized and results might slightly deviate from reported numbers in the paper.", "\n", "# TODO: Clean up.", "\n", "\n", "# Remove diagonal elements", "\n", "    ", "adj", "=", "adj", "-", "sp", ".", "dia_matrix", "(", "(", "adj", ".", "diagonal", "(", ")", "[", "np", ".", "newaxis", ",", ":", "]", ",", "[", "0", "]", ")", ",", "shape", "=", "adj", ".", "shape", ")", "\n", "adj", ".", "eliminate_zeros", "(", ")", "\n", "# Check that diag is zero:", "\n", "assert", "np", ".", "diag", "(", "adj", ".", "todense", "(", ")", ")", ".", "sum", "(", ")", "==", "0", "\n", "\n", "adj_triu", "=", "sp", ".", "triu", "(", "adj", ")", "\n", "adj_tuple", "=", "sparse_to_tuple", "(", "adj_triu", ")", "\n", "edges", "=", "adj_tuple", "[", "0", "]", "\n", "edges_all", "=", "sparse_to_tuple", "(", "adj", ")", "[", "0", "]", "\n", "num_test", "=", "int", "(", "np", ".", "floor", "(", "edges", ".", "shape", "[", "0", "]", "/", "10.", ")", ")", "\n", "num_val", "=", "int", "(", "np", ".", "floor", "(", "edges", ".", "shape", "[", "0", "]", "/", "20.", ")", ")", "\n", "\n", "all_edge_idx", "=", "list", "(", "range", "(", "edges", ".", "shape", "[", "0", "]", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "all_edge_idx", ")", "\n", "val_edge_idx", "=", "all_edge_idx", "[", ":", "num_val", "]", "\n", "test_edge_idx", "=", "all_edge_idx", "[", "num_val", ":", "(", "num_val", "+", "num_test", ")", "]", "\n", "test_edges", "=", "edges", "[", "test_edge_idx", "]", "\n", "val_edges", "=", "edges", "[", "val_edge_idx", "]", "\n", "train_edges", "=", "np", ".", "delete", "(", "edges", ",", "np", ".", "hstack", "(", "[", "test_edge_idx", ",", "val_edge_idx", "]", ")", ",", "axis", "=", "0", ")", "\n", "\n", "def", "ismember", "(", "a", ",", "b", ",", "tol", "=", "5", ")", ":", "\n", "        ", "rows_close", "=", "np", ".", "all", "(", "np", ".", "round", "(", "a", "-", "b", "[", ":", ",", "None", "]", ",", "tol", ")", "==", "0", ",", "axis", "=", "-", "1", ")", "\n", "return", "np", ".", "any", "(", "rows_close", ")", "\n", "\n", "", "test_edges_false", "=", "[", "]", "\n", "while", "len", "(", "test_edges_false", ")", "<", "len", "(", "test_edges", ")", ":", "\n", "        ", "idx_i", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "adj", ".", "shape", "[", "0", "]", ")", "\n", "idx_j", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "adj", ".", "shape", "[", "0", "]", ")", "\n", "if", "idx_i", "==", "idx_j", ":", "\n", "            ", "continue", "\n", "", "if", "ismember", "(", "[", "idx_i", ",", "idx_j", "]", ",", "edges_all", ")", ":", "\n", "            ", "continue", "\n", "", "if", "test_edges_false", ":", "\n", "            ", "if", "ismember", "(", "[", "idx_j", ",", "idx_i", "]", ",", "np", ".", "array", "(", "test_edges_false", ")", ")", ":", "\n", "                ", "continue", "\n", "", "if", "ismember", "(", "[", "idx_i", ",", "idx_j", "]", ",", "np", ".", "array", "(", "test_edges_false", ")", ")", ":", "\n", "                ", "continue", "\n", "", "", "test_edges_false", ".", "append", "(", "[", "idx_i", ",", "idx_j", "]", ")", "\n", "\n", "", "val_edges_false", "=", "[", "]", "\n", "while", "len", "(", "val_edges_false", ")", "<", "len", "(", "val_edges", ")", ":", "\n", "        ", "idx_i", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "adj", ".", "shape", "[", "0", "]", ")", "\n", "idx_j", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "adj", ".", "shape", "[", "0", "]", ")", "\n", "if", "idx_i", "==", "idx_j", ":", "\n", "            ", "continue", "\n", "", "if", "ismember", "(", "[", "idx_i", ",", "idx_j", "]", ",", "train_edges", ")", ":", "\n", "            ", "continue", "\n", "", "if", "ismember", "(", "[", "idx_j", ",", "idx_i", "]", ",", "train_edges", ")", ":", "\n", "            ", "continue", "\n", "", "if", "ismember", "(", "[", "idx_i", ",", "idx_j", "]", ",", "val_edges", ")", ":", "\n", "            ", "continue", "\n", "", "if", "ismember", "(", "[", "idx_j", ",", "idx_i", "]", ",", "val_edges", ")", ":", "\n", "            ", "continue", "\n", "", "if", "val_edges_false", ":", "\n", "            ", "if", "ismember", "(", "[", "idx_j", ",", "idx_i", "]", ",", "np", ".", "array", "(", "val_edges_false", ")", ")", ":", "\n", "                ", "continue", "\n", "", "if", "ismember", "(", "[", "idx_i", ",", "idx_j", "]", ",", "np", ".", "array", "(", "val_edges_false", ")", ")", ":", "\n", "                ", "continue", "\n", "", "", "val_edges_false", ".", "append", "(", "[", "idx_i", ",", "idx_j", "]", ")", "\n", "\n", "", "assert", "~", "ismember", "(", "test_edges_false", ",", "edges_all", ")", "\n", "assert", "~", "ismember", "(", "val_edges_false", ",", "edges_all", ")", "\n", "assert", "~", "ismember", "(", "val_edges", ",", "train_edges", ")", "\n", "assert", "~", "ismember", "(", "test_edges", ",", "train_edges", ")", "\n", "assert", "~", "ismember", "(", "val_edges", ",", "test_edges", ")", "\n", "\n", "data", "=", "np", ".", "ones", "(", "train_edges", ".", "shape", "[", "0", "]", ")", "\n", "\n", "# Re-build adj matrix", "\n", "adj_train", "=", "sp", ".", "csr_matrix", "(", "(", "data", ",", "(", "train_edges", "[", ":", ",", "0", "]", ",", "train_edges", "[", ":", ",", "1", "]", ")", ")", ",", "shape", "=", "adj", ".", "shape", ")", "\n", "adj_train", "=", "adj_train", "+", "adj_train", ".", "T", "\n", "\n", "# NOTE: these edge lists only contain single direction of edge!", "\n", "return", "adj_train", ",", "train_edges", ",", "val_edges", ",", "val_edges_false", ",", "test_edges", ",", "test_edges_false", "\n", "\n"]], "home.repos.pwc.inspect_result.dmzou_SCAT.None.trainCora.dim_reduction": [[233, 242], ["sklearn.decomposition.PCA", "sklearn.decomposition.PCA.fit_transform", "sklearn.preprocessing.StandardScaler", "range", "sklearn.preprocessing.StandardScaler.fit_transform().reshape", "numpy.shape", "sklearn.preprocessing.StandardScaler.fit_transform", "A_pca[].reshape"], "function", ["None"], ["def", "dim_reduction", "(", "A", ",", "pca", "=", "True", ",", "num_of_components", "=", "128", ")", ":", "\n", "    ", "if", "not", "pca", ":", "\n", "        ", "num_of_components", "=", "A", ".", "shape", "[", "1", "]", "\n", "", "pca", "=", "PCA", "(", "n_components", "=", "num_of_components", ")", "\n", "A_pca", "=", "pca", ".", "fit_transform", "(", "A", ")", "\n", "scaler", "=", "StandardScaler", "(", ")", "\n", "for", "i", "in", "range", "(", "np", ".", "shape", "(", "A_pca", ")", "[", "0", "]", ")", ":", "\n", "        ", "A_pca", "[", "i", ",", ":", "]", "=", "scaler", ".", "fit_transform", "(", "A_pca", "[", "i", ",", ":", "]", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", ".", "reshape", "(", "-", "1", ")", "\n", "", "return", "A_pca", "\n", "\n"]], "home.repos.pwc.inspect_result.dmzou_SCAT.None.trainCora.fcn": [[285, 294], ["tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.multiply", "tensorflow.reduce_mean", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.exp"], "function", ["None"], ["def", "fcn", "(", "x", ")", ":", "\n", "    ", "x1", "=", "x", "[", ":", ",", ":", "dim_final_feature", "]", "\n", "x2", "=", "x", "[", ":", ",", "dim_final_feature", ":", "]", "\n", "out1", "=", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "matmul", "(", "x1", ",", "W", ")", "+", "b", ")", "\n", "out2", "=", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "matmul", "(", "x2", ",", "W", ")", "+", "b", ")", "\n", "out_linear", "=", "tf", ".", "multiply", "(", "out1", ",", "out2", ")", "\n", "out_linear", "=", "tf", ".", "reduce_mean", "(", "out_linear", ",", "axis", "=", "1", ")", "\n", "out", "=", "1", "/", "(", "1", "+", "tf", ".", "exp", "(", "-", "out_linear", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.dmzou_SCAT.None.trainCora.get_roc_score": [[308, 323], ["sess.run", "sess.run", "numpy.hstack", "numpy.hstack", "roc_auc_score", "average_precision_score", "trainCora.fcn", "trainCora.fcn", "numpy.ones", "numpy.zeros", "len", "len"], "function", ["home.repos.pwc.inspect_result.dmzou_SCAT.None.trainFashion.fcn", "home.repos.pwc.inspect_result.dmzou_SCAT.None.trainFashion.fcn"], ["def", "get_roc_score", "(", "test_features", ",", "test_features_false", ")", ":", "\n", "    ", "preds", "=", "sess", ".", "run", "(", "\n", "fcn", "(", "X", ")", ",", "\n", "feed_dict", "=", "{", "X", ":", "test_features", "}", "\n", ")", "\n", "preds_neg", "=", "sess", ".", "run", "(", "\n", "fcn", "(", "X", ")", ",", "\n", "feed_dict", "=", "{", "X", ":", "test_features_false", "}", "\n", ")", "\n", "# predict on test set of edges", "\n", "preds_all", "=", "np", ".", "hstack", "(", "[", "preds", ",", "preds_neg", "]", ")", "\n", "labels_all", "=", "np", ".", "hstack", "(", "[", "np", ".", "ones", "(", "len", "(", "preds", ")", ")", ",", "np", ".", "zeros", "(", "len", "(", "preds", ")", ")", "]", ")", "\n", "roc_score", "=", "roc_auc_score", "(", "labels_all", ",", "preds_all", ")", "\n", "ap_score", "=", "average_precision_score", "(", "labels_all", ",", "preds_all", ")", "\n", "return", "roc_score", ",", "ap_score", "\n", "\n"]], "home.repos.pwc.inspect_result.dmzou_SCAT.None.utils.xavier_init": [[15, 19], ["tensorflow.random_normal", "tensorflow.sqrt"], "function", ["None"], ["def", "xavier_init", "(", "size", ")", ":", "\n", "    ", "in_dim", "=", "size", "[", "0", "]", "\n", "xavier_stddev", "=", "1.", "/", "tf", ".", "sqrt", "(", "in_dim", "/", "2.", ")", "\n", "return", "tf", ".", "random_normal", "(", "shape", "=", "size", ",", "stddev", "=", "xavier_stddev", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dmzou_SCAT.None.utils.leaky_relu": [[21, 23], ["tensorflow.nn.relu", "tensorflow.nn.relu"], "function", ["None"], ["", "def", "leaky_relu", "(", "x", ",", "alpha", "=", "0.2", ")", ":", "\n", "  ", "return", "tf", ".", "nn", ".", "relu", "(", "x", ")", "-", "alpha", "*", "tf", ".", "nn", ".", "relu", "(", "-", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dmzou_SCAT.None.utils.sample_z": [[26, 28], ["numpy.random.normal"], "function", ["None"], ["", "def", "sample_z", "(", "n", ")", ":", "\n", "    ", "return", "np", ".", "random", ".", "normal", "(", "loc", "=", "0.0", ",", "scale", "=", "1.0", ",", "size", "=", "[", "n", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dmzou_SCAT.None.utils.sample_z_2d": [[29, 31], ["numpy.random.normal"], "function", ["None"], ["", "def", "sample_z_2d", "(", "m", ",", "n", ")", ":", "\n", "    ", "return", "np", ".", "random", ".", "normal", "(", "loc", "=", "0.0", ",", "scale", "=", "1.0", ",", "size", "=", "[", "m", ",", "n", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dmzou_SCAT.None.utils.sample_z_full": [[33, 36], ["numpy.random.multivariate_normal"], "function", ["None"], ["", "def", "sample_z_full", "(", "mu", ",", "cov", ",", "size", ")", ":", "\n", "    ", "gaus", "=", "np", ".", "random", ".", "multivariate_normal", "(", "mean", "=", "mu", ",", "cov", "=", "cov", ",", "size", "=", "size", ")", "\n", "return", "gaus", "\n", "\n"]], "home.repos.pwc.inspect_result.dmzou_SCAT.None.utils.tensor_tolist": [[38, 43], ["range", "A_list.append"], "function", ["None"], ["", "def", "tensor_tolist", "(", "A", ")", ":", "\n", "    ", "A_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "A", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "A_list", ".", "append", "(", "A", "[", "i", ",", ":", "]", ")", "\n", "", "return", "A_list", "\n", "\n"]], "home.repos.pwc.inspect_result.dmzou_SCAT.None.utils.one_hot": [[45, 48], ["numpy.array().reshape", "numpy.eye", "numpy.array"], "function", ["None"], ["", "def", "one_hot", "(", "data", ",", "n", "=", "0", ")", ":", "\n", "    ", "targets", "=", "np", ".", "array", "(", "data", ")", ".", "reshape", "(", "-", "1", ")", "\n", "return", "np", ".", "eye", "(", "n", ")", "[", "targets", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.dmzou_SCAT.None.trainFashion.fcn": [[141, 149], ["utils.leaky_relu", "tensorflow.nn.dropout", "utils.leaky_relu", "tensorflow.nn.dropout", "tensorflow.matmul", "tensorflow.tanh", "tensorflow.matmul", "tensorflow.matmul"], "function", ["home.repos.pwc.inspect_result.dmzou_SCAT.None.utils.leaky_relu", "home.repos.pwc.inspect_result.dmzou_SCAT.None.utils.leaky_relu"], ["def", "fcn", "(", "x", ")", ":", "\n", "    ", "out1", "=", "leaky_relu", "(", "tf", ".", "matmul", "(", "x", ",", "W1", ")", "+", "b1", ")", "\n", "out1", "=", "tf", ".", "nn", ".", "dropout", "(", "out1", ",", "keep_prob", "=", "keep_prob", ")", "\n", "out2", "=", "leaky_relu", "(", "tf", ".", "matmul", "(", "out1", ",", "W2", ")", "+", "b2", ")", "\n", "out2", "=", "tf", ".", "nn", ".", "dropout", "(", "out2", ",", "keep_prob", "=", "keep_prob", ")", "\n", "out3", "=", "tf", ".", "matmul", "(", "out2", ",", "W3", ")", "+", "b3", "\n", "out", "=", "tf", ".", "tanh", "(", "out3", ")", "/", "2", "\n", "return", "out", "\n", "\n"]]}