{"home.repos.pwc.inspect_result.BenevolentAI_RELVM.sup.__init__.MaximumLikelihoodMentionLevel.__init__": [[26, 43], ["optimiser", "trainer_unsup", "tensorflow.train.Checkpoint", "tensorflow.train.Checkpoint.restore", "model", "os.path.join"], "methods", ["None"], []], "home.repos.pwc.inspect_result.BenevolentAI_RELVM.sup.__init__.MaximumLikelihoodMentionLevel.load_data": [[176, 245], ["numpy.memmap", "numpy.memmap", "numpy.memmap", "numpy.memmap", "numpy.memmap", "numpy.memmap", "numpy.memmap", "numpy.memmap", "numpy.memmap", "numpy.memmap", "numpy.memmap", "numpy.memmap", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], []], "home.repos.pwc.inspect_result.BenevolentAI_RELVM.sup.__init__.MaximumLikelihoodMentionLevel.create_dataset": [[246, 281], ["tensorflow.data.Dataset.from_generator", "numpy.random.randint", "numpy.int32", "numpy.int32", "numpy.int32", "numpy.int32", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.BenevolentAI_RELVM.sup.__init__.MaximumLikelihoodMentionLevel.train": [[283, 329], ["__init__.MaximumLikelihoodMentionLevel.create_dataset", "__init__.MaximumLikelihoodMentionLevel.enumerate", "time.perf_counter", "__init__.MaximumLikelihoodMentionLevel.trainer.optimise", "print", "__init__.MaximumLikelihoodMentionLevel.test", "__init__.MaximumLikelihoodMentionLevel.checkpoint.write", "os.path.join", "str", "str", "time.perf_counter", "__init__.MaximumLikelihoodMentionLevel.numpy", "str", "i.numpy"], "methods", ["home.repos.pwc.inspect_result.BenevolentAI_RELVM.unsup.__init__.Run.create_dataset", "home.repos.pwc.inspect_result.BenevolentAI_RELVM.unsup.__init__.SGVB.optimise", "home.repos.pwc.inspect_result.BenevolentAI_RELVM.sup.__init__.MaximumLikelihoodPairLevel.test"], []], "home.repos.pwc.inspect_result.BenevolentAI_RELVM.sup.__init__.MaximumLikelihoodMentionLevel.test": [[330, 416], ["time.perf_counter", "range", "numpy.concatenate", "numpy.concatenate", "numpy.save", "numpy.save", "__init__.precision_recall_f1", "print", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "__init__.MaximumLikelihoodMentionLevel.trainer.classify", "numpy.concatenate.append", "numpy.concatenate.append", "os.path.join", "os.path.join", "__init__.optimise_threshold", "numpy.argmax", "numpy.int32", "numpy.int32", "numpy.int32", "numpy.int32", "__init__.MaximumLikelihoodMentionLevel.trainer.objective().numpy", "len", "log_probs_n.numpy", "r_pred_n.numpy", "__init__.MaximumLikelihoodMentionLevel.label_types.index", "range", "str", "__init__.MaximumLikelihoodMentionLevel.trainer.objective", "numpy.arange", "len", "len", "str", "time.perf_counter", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.BenevolentAI_RELVM.sup.__init__.precision_recall_f1", "home.repos.pwc.inspect_result.BenevolentAI_RELVM.sup.__init__.MaximumLikelihoodPairLevel.classify", "home.repos.pwc.inspect_result.BenevolentAI_RELVM.sup.__init__.optimise_threshold", "home.repos.pwc.inspect_result.BenevolentAI_RELVM.sup.__init__.MaximumLikelihoodPairLevel.objective"], []], "home.repos.pwc.inspect_result.BenevolentAI_RELVM.sup.__init__.MaximumLikelihoodPairLevel.__init__": [[194, 211], ["optimiser", "trainer_unsup", "tensorflow.train.Checkpoint", "tensorflow.train.Checkpoint.restore", "model", "os.path.join"], "methods", ["None"], []], "home.repos.pwc.inspect_result.BenevolentAI_RELVM.sup.__init__.MaximumLikelihoodPairLevel.load_data": [[492, 547], ["numpy.memmap", "numpy.memmap", "numpy.memmap", "numpy.memmap", "numpy.memmap", "numpy.memmap", "numpy.memmap", "numpy.memmap", "numpy.memmap", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], []], "home.repos.pwc.inspect_result.BenevolentAI_RELVM.sup.__init__.MaximumLikelihoodPairLevel.create_dataset": [[548, 615], ["tensorflow.data.Dataset.from_generator", "numpy.random.randint", "numpy.int32", "numpy.int32", "numpy.int32", "numpy.array", "numpy.array", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "range", "range", "len", "len", "numpy.random.randint", "numpy.random.randint", "__init__.MaximumLikelihoodPairLevel.label_types.index", "numpy.ones", "str", "str", "str", "str", "len", "len", "numpy.array.append", "numpy.array.append", "str", "str", "str", "str", "str", "str", "str", "str"], "methods", ["None"], []], "home.repos.pwc.inspect_result.BenevolentAI_RELVM.sup.__init__.MaximumLikelihoodPairLevel.train": [[616, 664], ["__init__.MaximumLikelihoodPairLevel.create_dataset", "__init__.MaximumLikelihoodPairLevel.enumerate", "time.perf_counter", "__init__.MaximumLikelihoodPairLevel.trainer.optimise", "print", "__init__.MaximumLikelihoodPairLevel.test", "__init__.MaximumLikelihoodPairLevel.checkpoint.write", "os.path.join", "str", "str", "time.perf_counter", "__init__.MaximumLikelihoodPairLevel.numpy", "str", "i.numpy"], "methods", ["home.repos.pwc.inspect_result.BenevolentAI_RELVM.unsup.__init__.Run.create_dataset", "home.repos.pwc.inspect_result.BenevolentAI_RELVM.unsup.__init__.SGVB.optimise", "home.repos.pwc.inspect_result.BenevolentAI_RELVM.sup.__init__.MaximumLikelihoodPairLevel.test"], []], "home.repos.pwc.inspect_result.BenevolentAI_RELVM.sup.__init__.MaximumLikelihoodPairLevel.test": [[665, 752], ["time.perf_counter", "range", "numpy.concatenate", "numpy.concatenate", "numpy.save", "numpy.save", "__init__.precision_recall_f1", "print", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "__init__.MaximumLikelihoodPairLevel.trainer.classify", "numpy.concatenate.append", "numpy.concatenate.append", "os.path.join", "os.path.join", "__init__.optimise_threshold", "numpy.argmax", "numpy.int32", "numpy.int32", "numpy.int32", "__init__.MaximumLikelihoodPairLevel.trainer.objective().numpy", "len", "log_probs_n.numpy", "r_pred_n.numpy", "__init__.MaximumLikelihoodPairLevel.label_types.index", "range", "str", "__init__.MaximumLikelihoodPairLevel.trainer.objective", "numpy.arange", "len", "len", "str", "time.perf_counter", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.BenevolentAI_RELVM.sup.__init__.precision_recall_f1", "home.repos.pwc.inspect_result.BenevolentAI_RELVM.sup.__init__.MaximumLikelihoodPairLevel.classify", "home.repos.pwc.inspect_result.BenevolentAI_RELVM.sup.__init__.optimise_threshold", "home.repos.pwc.inspect_result.BenevolentAI_RELVM.sup.__init__.MaximumLikelihoodPairLevel.objective"], []], "home.repos.pwc.inspect_result.BenevolentAI_RELVM.sup.__init__.precision_recall_f1": [[8, 47], ["range", "len", "label_types.index", "label_types.index", "label_types.index"], "function", ["None"], []], "home.repos.pwc.inspect_result.BenevolentAI_RELVM.sup.__init__.optimise_threshold": [[49, 95], ["numpy.linspace", "numpy.argmax", "__init__.precision_recall_f1", "f1s.append", "numpy.argmax", "numpy.arange", "label_types.index", "range", "len", "len"], "function", ["home.repos.pwc.inspect_result.BenevolentAI_RELVM.sup.__init__.precision_recall_f1"], []], "home.repos.pwc.inspect_result.BenevolentAI_RELVM.sup.__init__.MaximumLikelihoodMentionLevel.log_p_r": [[44, 74], ["__init__.MaximumLikelihoodMentionLevel.trainer_unsup.get_samples_z", "__init__.MaximumLikelihoodMentionLevel.model.log_p_r"], "methods", ["home.repos.pwc.inspect_result.BenevolentAI_RELVM.generative.__init__.ConditionalInfiniteMixtureLSTMAutoregressive.get_samples_z", "home.repos.pwc.inspect_result.BenevolentAI_RELVM.classification.__init__.Classification.log_p_r"], []], "home.repos.pwc.inspect_result.BenevolentAI_RELVM.sup.__init__.MaximumLikelihoodMentionLevel.objective": [[75, 104], ["__init__.MaximumLikelihoodMentionLevel.log_p_r", "tensorflow.reduce_mean"], "methods", ["home.repos.pwc.inspect_result.BenevolentAI_RELVM.classification.__init__.Classification.log_p_r"], []], "home.repos.pwc.inspect_result.BenevolentAI_RELVM.sup.__init__.MaximumLikelihoodMentionLevel.optimise": [[105, 141], ["tape.gradient", "__init__.MaximumLikelihoodMentionLevel.optimiser.apply_gradients", "tensorflow.GradientTape", "__init__.MaximumLikelihoodMentionLevel.log_p_r", "tensorflow.reduce_mean", "zip"], "methods", ["home.repos.pwc.inspect_result.BenevolentAI_RELVM.classification.__init__.Classification.log_p_r"], []], "home.repos.pwc.inspect_result.BenevolentAI_RELVM.sup.__init__.MaximumLikelihoodMentionLevel.classify": [[142, 171], ["__init__.MaximumLikelihoodMentionLevel.trainer_unsup.get_samples_z", "__init__.MaximumLikelihoodMentionLevel.model.predict"], "methods", ["home.repos.pwc.inspect_result.BenevolentAI_RELVM.generative.__init__.ConditionalInfiniteMixtureLSTMAutoregressive.get_samples_z", "home.repos.pwc.inspect_result.BenevolentAI_RELVM.classification.__init__.Classification.predict"], []], "home.repos.pwc.inspect_result.BenevolentAI_RELVM.sup.__init__.MaximumLikelihoodPairLevel.log_p_r": [[212, 239], ["__init__.MaximumLikelihoodPairLevel.trainer_unsup.get_samples_z_prior", "__init__.MaximumLikelihoodPairLevel.model.log_p_r"], "methods", ["home.repos.pwc.inspect_result.BenevolentAI_RELVM.unsup.__init__.SGVB.get_samples_z_prior", "home.repos.pwc.inspect_result.BenevolentAI_RELVM.classification.__init__.Classification.log_p_r"], []], "home.repos.pwc.inspect_result.BenevolentAI_RELVM.sup.__init__.MaximumLikelihoodPairLevel.objective": [[240, 267], ["__init__.MaximumLikelihoodPairLevel.log_p_r", "tensorflow.reduce_mean"], "methods", ["home.repos.pwc.inspect_result.BenevolentAI_RELVM.classification.__init__.Classification.log_p_r"], []], "home.repos.pwc.inspect_result.BenevolentAI_RELVM.sup.__init__.MaximumLikelihoodPairLevel.optimise": [[268, 302], ["tape.gradient", "__init__.MaximumLikelihoodPairLevel.optimiser.apply_gradients", "tensorflow.GradientTape", "__init__.MaximumLikelihoodPairLevel.log_p_r", "tensorflow.reduce_mean", "zip"], "methods", ["home.repos.pwc.inspect_result.BenevolentAI_RELVM.classification.__init__.Classification.log_p_r"], []], "home.repos.pwc.inspect_result.BenevolentAI_RELVM.sup.__init__.MaximumLikelihoodPairLevel.classify": [[303, 330], ["__init__.MaximumLikelihoodPairLevel.trainer_unsup.get_samples_z_prior", "__init__.MaximumLikelihoodPairLevel.model.predict"], "methods", ["home.repos.pwc.inspect_result.BenevolentAI_RELVM.unsup.__init__.SGVB.get_samples_z_prior", "home.repos.pwc.inspect_result.BenevolentAI_RELVM.classification.__init__.Classification.predict"], []], "home.repos.pwc.inspect_result.BenevolentAI_RELVM.unsup.__init__.Run.__init__": [[39, 65], ["tensorflow.distribute.MirroredStrategy", "__init__.Run.load_data", "tensorflow.train.Checkpoint", "__init__.Run.strategy.scope", "trainer", "__init__.Run.checkpoint.restore", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.BenevolentAI_RELVM.unsup.__init__.Run.load_data"], []], "home.repos.pwc.inspect_result.BenevolentAI_RELVM.unsup.__init__.Run.load_data": [[66, 96], ["numpy.memmap", "numpy.memmap", "numpy.memmap", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], []], "home.repos.pwc.inspect_result.BenevolentAI_RELVM.unsup.__init__.Run.create_dataset": [[97, 136], ["tensorflow.data.Dataset.from_generator", "numpy.random.choice", "numpy.int32", "numpy.int32", "numpy.int32", "numpy.float32", "numpy.float32", "numpy.minimum", "numpy.tile"], "methods", ["None"], []], "home.repos.pwc.inspect_result.BenevolentAI_RELVM.unsup.__init__.Run.train": [[138, 192], ["__init__.Run.create_dataset", "__init__.Run.strategy.experimental_distribute_dataset", "numpy.zeros", "__init__.Run.checkpoint.write", "__init__.Run.strategy.scope", "os.path.join", "time.perf_counter", "__init__.Run.trainer.optimise", "elbo.numpy", "kl.numpy", "print", "__init__.Run.checkpoint.write", "os.path.join", "str", "str", "time.perf_counter", "kl.numpy", "str", "elbo.numpy", "str"], "methods", ["home.repos.pwc.inspect_result.BenevolentAI_RELVM.unsup.__init__.Run.create_dataset", "home.repos.pwc.inspect_result.BenevolentAI_RELVM.unsup.__init__.SGVB.optimise"], []], "home.repos.pwc.inspect_result.BenevolentAI_RELVM.unsup.__init__.SGVB.__init__": [[31, 50], ["optimiser", "tensorflow.Variable", "tensorflow.Variable", "gen_model", "rec_model"], "methods", ["None"], []], "home.repos.pwc.inspect_result.BenevolentAI_RELVM.unsup.__init__.SGVB.get_samples_z": [[51, 83], ["tensorflow.gather", "tensorflow.gather", "tensorflow.gather", "tensorflow.not_equal", "__init__.SGVB.rec_model.get_params_and_samples", "__init__.SGVB.gen_model.get_samples_z"], "methods", ["home.repos.pwc.inspect_result.BenevolentAI_RELVM.recognition.__init__.GaussianBiLSTM.get_params_and_samples", "home.repos.pwc.inspect_result.BenevolentAI_RELVM.generative.__init__.ConditionalInfiniteMixtureLSTMAutoregressive.get_samples_z"], []], "home.repos.pwc.inspect_result.BenevolentAI_RELVM.unsup.__init__.SGVB.get_samples_z_prior": [[84, 112], ["tensorflow.gather", "tensorflow.gather", "__init__.SGVB.gen_model.get_samples_u", "__init__.SGVB.gen_model.get_samples_z"], "methods", ["home.repos.pwc.inspect_result.BenevolentAI_RELVM.generative.__init__.ConditionalInfiniteMixtureLSTMAutoregressive.get_samples_u", "home.repos.pwc.inspect_result.BenevolentAI_RELVM.generative.__init__.ConditionalInfiniteMixtureLSTMAutoregressive.get_samples_z"], []], "home.repos.pwc.inspect_result.BenevolentAI_RELVM.unsup.__init__.SGVB.elbo_and_kl": [[113, 162], ["tensorflow.gather", "tensorflow.gather", "tensorflow.gather", "tensorflow.not_equal", "__init__.SGVB.rec_model.get_params_and_samples", "tensorflow.cast", "__init__.SGVB.gen_model.log_p_c", "__init__.SGVB.gen_model.kl_u", "tensorflow.reduce_sum"], "methods", ["home.repos.pwc.inspect_result.BenevolentAI_RELVM.recognition.__init__.GaussianBiLSTM.get_params_and_samples", "home.repos.pwc.inspect_result.BenevolentAI_RELVM.generative.__init__.ConditionalInfiniteMixtureLSTMAutoregressive.log_p_c", "home.repos.pwc.inspect_result.BenevolentAI_RELVM.generative.__init__.ConditionalInfiniteMixtureLSTMAutoregressive.kl_u"], []], "home.repos.pwc.inspect_result.BenevolentAI_RELVM.unsup.__init__.SGVB.optimise": [[163, 216], ["__init__.SGVB.strategy.experimental_run_v2", "__init__.SGVB.strategy.reduce", "__init__.SGVB.strategy.reduce", "tape.gradient", "__init__.SGVB.optimiser.apply_gradients", "tensorflow.GradientTape", "__init__.SGVB.elbo_and_kl", "zip", "tensorflow.cast", "tensorflow.reduce_sum"], "methods", ["home.repos.pwc.inspect_result.BenevolentAI_RELVM.unsup.__init__.SGVB.elbo_and_kl"], []], "home.repos.pwc.inspect_result.BenevolentAI_RELVM.classification.__init__.Classification.__init__": [[18, 29], ["__init__.Classification.nn", "print", "str", "sum", "tensorflow.size().numpy", "tensorflow.size"], "methods", ["home.repos.pwc.inspect_result.BenevolentAI_RELVM.recognition.__init__.GaussianBiLSTM.nn"], []], "home.repos.pwc.inspect_result.BenevolentAI_RELVM.classification.__init__.Classification.nn": [[30, 59], ["tensorflow.keras.Input", "range", "tensorflow.keras.Model", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Concatenate"], "methods", ["None"], []], "home.repos.pwc.inspect_result.BenevolentAI_RELVM.classification.__init__.Classification.log_p_r": [[60, 94], ["tensorflow.reshape", "__init__.Classification.model", "tensorflow.reshape", "tensorflow.reduce_mean", "tensorflow.one_hot", "tensorflow.reduce_sum", "tensorflow.math.log"], "methods", ["None"], []], "home.repos.pwc.inspect_result.BenevolentAI_RELVM.classification.__init__.Classification.predict": [[95, 124], ["tensorflow.reshape", "__init__.Classification.model", "tensorflow.reshape", "tensorflow.reduce_mean", "tensorflow.math.argmax", "tensorflow.math.log"], "methods", ["None"], []], "home.repos.pwc.inspect_result.BenevolentAI_RELVM.generative.__init__.ConditionalInfiniteMixtureLSTMAutoregressive.__init__": [[25, 39], ["__init__.ConditionalInfiniteMixtureLSTMAutoregressive.nn_z", "__init__.ConditionalInfiniteMixtureLSTMAutoregressive.nn_context", "print", "str", "sum", "tensorflow.size().numpy", "tensorflow.size"], "methods", ["home.repos.pwc.inspect_result.BenevolentAI_RELVM.generative.__init__.ConditionalInfiniteMixtureLSTMAutoregressive.nn_z", "home.repos.pwc.inspect_result.BenevolentAI_RELVM.generative.__init__.ConditionalInfiniteMixtureLSTMAutoregressive.nn_context"], []], "home.repos.pwc.inspect_result.BenevolentAI_RELVM.generative.__init__.ConditionalInfiniteMixtureLSTMAutoregressive.nn_z": [[40, 83], ["tensorflow.keras.Input", "tensorflow.keras.Input", "tensorflow.keras.Input", "range", "tensorflow.keras.Model", "tensorflow.keras.layers.Lambda", "tensorflow.keras.layers.Lambda", "tensorflow.keras.layers.Multiply", "tensorflow.keras.layers.Concatenate", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Concatenate", "tensorflow.keras.initializers.RandomNormal", "tensorflow.norm", "tensorflow.norm"], "methods", ["None"], []], "home.repos.pwc.inspect_result.BenevolentAI_RELVM.generative.__init__.ConditionalInfiniteMixtureLSTMAutoregressive.nn_context": [[84, 145], ["tensorflow.keras.Input", "tensorflow.keras.Input", "tensorflow.keras.Input", "tensorflow.keras.Input", "range", "range", "tensorflow.keras.Model", "tensorflow.keras.layers.RepeatVector", "tensorflow.keras.layers.Lambda", "tensorflow.keras.layers.ZeroPadding1D", "tensorflow.keras.layers.Concatenate", "tensorflow.keras.layers.RepeatVector", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.LSTM", "tensorflow.keras.layers.Concatenate"], "methods", ["None"], []], "home.repos.pwc.inspect_result.BenevolentAI_RELVM.generative.__init__.ConditionalInfiniteMixtureLSTMAutoregressive.kl_u": [[146, 168], ["tensorflow.reduce_sum", "tensorflow.math.log", "tensorflow.ones_like"], "methods", ["None"], []], "home.repos.pwc.inspect_result.BenevolentAI_RELVM.generative.__init__.ConditionalInfiniteMixtureLSTMAutoregressive.get_samples_u": [[169, 189], ["tensorflow.random.normal"], "methods", ["None"], []], "home.repos.pwc.inspect_result.BenevolentAI_RELVM.generative.__init__.ConditionalInfiniteMixtureLSTMAutoregressive.get_samples_z": [[190, 231], ["tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "__init__.ConditionalInfiniteMixtureLSTMAutoregressive.model_z", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.random.normal", "tensorflow.tile", "tensorflow.tile", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.sqrt"], "methods", ["None"], []], "home.repos.pwc.inspect_result.BenevolentAI_RELVM.generative.__init__.ConditionalInfiniteMixtureLSTMAutoregressive.log_p_c": [[232, 294], ["tensorflow.reshape", "tensorflow.reshape", "__init__.ConditionalInfiniteMixtureLSTMAutoregressive.get_samples_z", "tensorflow.reshape", "tensorflow.tile", "tensorflow.reshape", "__init__.ConditionalInfiniteMixtureLSTMAutoregressive.model_context", "tensorflow.reshape", "tensorflow.tile", "tensorflow.reduce_sum", "tensorflow.where", "tensorflow.reshape", "tensorflow.reduce_logsumexp", "tensorflow.reshape", "tensorflow.where", "tensorflow.cast", "tensorflow.reduce_mean", "tensorflow.tile", "tensorflow.tile", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.zeros_like", "tensorflow.matmul", "tensorflow.zeros_like", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_sum", "tensorflow.reduce_sum"], "methods", ["home.repos.pwc.inspect_result.BenevolentAI_RELVM.generative.__init__.ConditionalInfiniteMixtureLSTMAutoregressive.get_samples_z"], []], "home.repos.pwc.inspect_result.BenevolentAI_RELVM.recognition.__init__.GaussianBiLSTM.__init__": [[20, 32], ["__init__.GaussianBiLSTM.nn", "print", "str", "sum", "tensorflow.size().numpy", "tensorflow.size"], "methods", ["home.repos.pwc.inspect_result.BenevolentAI_RELVM.recognition.__init__.GaussianBiLSTM.nn"], []], "home.repos.pwc.inspect_result.BenevolentAI_RELVM.recognition.__init__.GaussianBiLSTM.nn": [[33, 91], ["tensorflow.keras.Input", "tensorflow.keras.Input", "tensorflow.keras.Input", "tensorflow.keras.Input", "range", "range", "tensorflow.keras.Model", "tensorflow.keras.layers.Concatenate", "tensorflow.keras.layers.Lambda", "tensorflow.keras.layers.Lambda", "tensorflow.keras.layers.Multiply", "tensorflow.keras.layers.Concatenate", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.LSTM", "tensorflow.keras.layers.LSTM", "tensorflow.keras.layers.Dense", "tensorflow.norm", "tensorflow.norm"], "methods", ["None"], []], "home.repos.pwc.inspect_result.BenevolentAI_RELVM.recognition.__init__.GaussianBiLSTM.get_params_and_samples": [[92, 129], ["__init__.GaussianBiLSTM.model", "tensorflow.tile", "tensorflow.tile", "tensorflow.random.normal", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.sqrt"], "methods", ["None"], []], "home.repos.pwc.inspect_result.BenevolentAI_RELVM.tests.test_unsup.UnsupTest.make_memmaps": [[124, 162], ["test_unsup.UnsupTest.make_memmaps.create_mmap"], "methods", ["None"], ["    ", "def", "make_memmaps", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Make the memory-mapped Numpy arrays which will store the final data.\n\n        entities_x : np.memmap\n            The first entity in a sentence.\n            The first column contains the index to the UUIDS;\n            the second contains the index\n            to the entity type.\n        entities_y : np.memmap\n            The second entity in a sentence.\n            The first column contains the index to the UUIDS;\n            the second contains the index\n            to the entity type.\n        contexts : np.memmap\n            The indices to the processing vocabulary for the context of\n            each sentence.\n        \"\"\"", "\n", "\n", "def", "create_mmap", "(", "filename", ",", "n_indices", ",", "num_data", ")", ":", "\n", "            ", "full_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "filename", ")", "\n", "mm", "=", "np", ".", "memmap", "(", "full_path", ",", "\n", "dtype", "=", "np", ".", "uint16", ",", "mode", "=", "'w+'", ",", "\n", "shape", "=", "(", "num_data", ",", "1", ")", ")", "\n", "mm", "[", ":", ",", "0", "]", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "n_indices", ",", "num_data", ")", "\n", "mmap_files_to_delete", ".", "append", "(", "full_path", ")", "\n", "\n", "", "def", "create_context_mmap", "(", "filename", ",", "n_indices", ",", "num_data", ")", ":", "\n", "            ", "full_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "filename", ")", "\n", "mm", "=", "np", ".", "memmap", "(", "full_path", ",", "\n", "dtype", "=", "np", ".", "uint16", ",", "mode", "=", "'w+'", ",", "\n", "shape", "=", "(", "num_data", ",", "max_len", ")", ")", "\n", "mm", "[", ":", "]", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "n_indices", ",", "size", "=", "(", "num_data", ",", "max_len", ")", ")", "\n", "mmap_files_to_delete", ".", "append", "(", "full_path", ")", "\n", "\n", "", "create_mmap", "(", "'entities_x.mmap'", ",", "len", "(", "entity_types", ")", ",", "num_data", ")", "\n", "create_mmap", "(", "'entities_y.mmap'", ",", "len", "(", "entity_types", ")", ",", "num_data", ")", "\n", "create_context_mmap", "(", "'contexts.mmap'", ",", "len", "(", "vocab", ")", ",", "num_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BenevolentAI_RELVM.tests.test_unsup.UnsupTest.delete_memmaps_unsup": [[163, 169], ["os.remove"], "methods", ["None"], ["", "def", "delete_memmaps_unsup", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Deletes the mock memmap data created above for the test\n        \"\"\"", "\n", "for", "f", "in", "mmap_files_to_delete", ":", "\n", "            ", "os", ".", "remove", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BenevolentAI_RELVM.tests.test_unsup.UnsupTest.setUp": [[170, 192], ["test_unsup.UnsupTest.make_memmaps", "run.unsup.Run.unsup.Run", "run.unsup.Run.unsup.Run.train", "test_unsup.UnsupTest.assertAlmostEqual", "test_unsup.UnsupTest.assertAlmostEqual", "test_unsup.UnsupTest.delete_memmaps_unsup", "numpy.shape"], "methods", ["home.repos.pwc.inspect_result.BenevolentAI_RELVM.tests.test_classification_pair.SupPairTest.make_memmaps", "home.repos.pwc.inspect_result.BenevolentAI_RELVM.unsup.__init__.Run.train", "home.repos.pwc.inspect_result.BenevolentAI_RELVM.tests.test_classification_pair.SupPairTest.delete_memmaps_unsup"], ["", "", "def", "setUp", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "make_memmaps", "(", ")", "\n", "\n", "run", "=", "Run", "(", "data_dir", "=", "data_dir", ",", "vocab", "=", "vocab", ",", "entity_types", "=", "entity_types", ",", "\n", "num_data", "=", "num_data", ",", "max_len", "=", "max_len", ",", "trainer", "=", "Trainer", ",", "\n", "trainer_kwargs", "=", "trainer_kwargs", ",", "out_dir", "=", "out_dir", ",", "\n", "pre_trained", "=", "pre_trained", ",", "pre_trained_dir", "=", "pre_trained_dir", ")", "\n", "\n", "elbo_kl", "=", "run", ".", "train", "(", "n_iter", "=", "n_iter_train", ",", "n_batch", "=", "n_batch_train", ",", "\n", "n_samples", "=", "n_samples_train", ",", "\n", "n_iter_warm_up", "=", "n_iter_warm_up_train", ")", "\n", "\n", "last_row_to_test", "=", "np", ".", "shape", "(", "elbo_kl", ")", "[", "0", "]", "-", "1", "\n", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "elbo_kl", "[", "last_row_to_test", ",", "0", "]", ",", "expected_elbo_kl", "[", "0", "]", ",", "places", "=", "5", ")", "\n", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "elbo_kl", "[", "last_row_to_test", ",", "1", "]", ",", "expected_elbo_kl", "[", "1", "]", ",", "places", "=", "5", ")", "\n", "\n", "self", ".", "delete_memmaps_unsup", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BenevolentAI_RELVM.tests.test_classification_mention.SupMentionTest.make_memmaps": [[167, 211], ["test_classification_mention.SupMentionTest.make_memmaps.create_mmap"], "methods", ["None"], ["    ", "def", "make_memmaps", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        entities_x_{train,valid,test} : np.memmap\n            The indices to `entity_types` for the first entity in the\n            {train,valid,test} data.\n        entities_y_{train,valid,test} : np.memmap\n            The indices to `entity_types` for the second entity in the\n            {train,valid,test} data.\n        labels_{train,valid,test} : np.memmap\n            The indices to `label_types` for the labels for each entity pair\n            in the {train,valid,test} data.\n        contexts_{train,valid,test}.mmap :\n            These are two-dimensional arrays. The ith row contains the indices\n            to vocab.json from the unsupervised data directory for the ith\n            context.\n        \"\"\"", "\n", "def", "create_mmap", "(", "filename", ",", "n_indices", ",", "num_data", ")", ":", "\n", "            ", "full_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "filename", ")", "\n", "mm", "=", "np", ".", "memmap", "(", "\n", "full_path", ",", "dtype", "=", "np", ".", "uint16", ",", "mode", "=", "'w+'", ",", "shape", "=", "(", "num_data", ",", "1", ")", ")", "\n", "mm", "[", ":", ",", "0", "]", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "n_indices", ",", "num_data", ")", "\n", "mmap_files_to_delete", ".", "append", "(", "full_path", ")", "\n", "\n", "", "def", "create_context_mmap", "(", "filename", ",", "n_indices", ",", "num_data", ")", ":", "\n", "            ", "full_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "filename", ")", "\n", "mm", "=", "np", ".", "memmap", "(", "full_path", ",", "dtype", "=", "np", ".", "uint16", ",", "mode", "=", "'w+'", ",", "\n", "shape", "=", "(", "num_data", ",", "max_len", ")", ")", "\n", "mm", "[", ":", "]", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "n_indices", ",", "size", "=", "(", "num_data", ",", "max_len", ")", ")", "\n", "mmap_files_to_delete", ".", "append", "(", "full_path", ")", "\n", "\n", "", "create_mmap", "(", "'entities_x_train.mmap'", ",", "len", "(", "entity_types", ")", ",", "num_data_train", ")", "\n", "create_mmap", "(", "'entities_y_train.mmap'", ",", "len", "(", "entity_types", ")", ",", "num_data_train", ")", "\n", "create_mmap", "(", "'labels_train.mmap'", ",", "len", "(", "label_types", ")", ",", "num_data_train", ")", "\n", "create_context_mmap", "(", "'contexts_train.mmap'", ",", "len", "(", "vocab", ")", ",", "num_data_train", ")", "\n", "\n", "create_mmap", "(", "'entities_x_valid.mmap'", ",", "len", "(", "entity_types", ")", ",", "num_data_valid", ")", "\n", "create_mmap", "(", "'entities_y_valid.mmap'", ",", "len", "(", "entity_types", ")", ",", "num_data_valid", ")", "\n", "create_mmap", "(", "'labels_valid.mmap'", ",", "len", "(", "label_types", ")", ",", "num_data_valid", ")", "\n", "create_context_mmap", "(", "'contexts_valid.mmap'", ",", "len", "(", "vocab", ")", ",", "num_data_valid", ")", "\n", "\n", "create_mmap", "(", "'entities_x_test.mmap'", ",", "len", "(", "entity_types", ")", ",", "num_data_test", ")", "\n", "create_mmap", "(", "'entities_y_test.mmap'", ",", "len", "(", "entity_types", ")", ",", "num_data_test", ")", "\n", "create_mmap", "(", "'labels_test.mmap'", ",", "len", "(", "label_types", ")", ",", "num_data_test", ")", "\n", "create_context_mmap", "(", "'contexts_test.mmap'", ",", "len", "(", "vocab", ")", ",", "num_data_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BenevolentAI_RELVM.tests.test_classification_mention.SupMentionTest.delete_memmaps_unsup": [[212, 218], ["os.remove"], "methods", ["None"], ["", "def", "delete_memmaps_unsup", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Deletes the mock memmap data created above for the test\n        \"\"\"", "\n", "for", "f", "in", "mmap_files_to_delete", ":", "\n", "            ", "os", ".", "remove", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BenevolentAI_RELVM.tests.test_classification_mention.SupMentionTest.setUp": [[219, 242], ["test_classification_mention.SupMentionTest.make_memmaps", "run.sup.MaximumLikelihoodMentionLevel.sup.MaximumLikelihoodMentionLevel", "run.sup.MaximumLikelihoodMentionLevel.sup.MaximumLikelihoodMentionLevel.train", "run.sup.MaximumLikelihoodMentionLevel.sup.MaximumLikelihoodMentionLevel.test", "test_classification_mention.SupMentionTest.delete_memmaps_unsup", "test_classification_mention.SupMentionTest.assertAlmostEqual", "test_classification_mention.SupMentionTest.assertAlmostEqual"], "methods", ["home.repos.pwc.inspect_result.BenevolentAI_RELVM.tests.test_classification_pair.SupPairTest.make_memmaps", "home.repos.pwc.inspect_result.BenevolentAI_RELVM.unsup.__init__.Run.train", "home.repos.pwc.inspect_result.BenevolentAI_RELVM.sup.__init__.MaximumLikelihoodPairLevel.test", "home.repos.pwc.inspect_result.BenevolentAI_RELVM.tests.test_classification_pair.SupPairTest.delete_memmaps_unsup"], ["", "", "def", "setUp", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "make_memmaps", "(", ")", "\n", "\n", "run", "=", "Run", "(", "data_dir", "=", "data_dir", ",", "vocab", "=", "vocab", ",", "entity_types", "=", "entity_types", ",", "\n", "label_types", "=", "label_types", ",", "neg_label", "=", "neg_label", ",", "\n", "num_data_train", "=", "num_data_train", ",", "num_data_valid", "=", "num_data_valid", ",", "\n", "num_data_test", "=", "num_data_test", ",", "\n", "max_len", "=", "max_len", ",", "trainer", "=", "Trainer", ",", "\n", "trainer_kwargs", "=", "trainer_kwargs", ",", "out_dir", "=", "out_dir", ",", "\n", "pre_trained", "=", "pre_trained", ",", "pre_trained_dir", "=", "pre_trained_dir", ")", "\n", "\n", "run", ".", "train", "(", "n_iter", "=", "n_iter_train", ",", "n_batch", "=", "n_batch_train", ",", "\n", "n_samples", "=", "n_samples_train", ",", "val_freq", "=", "val_freq", ",", "\n", "n_batch_val", "=", "n_batch_val", ",", "n_samples_val", "=", "n_samples_val", ")", "\n", "\n", "obj", ",", "f1", "=", "run", ".", "test", "(", "'test'", ",", "n_batch", "=", "n_batch_test", ",", "\n", "n_samples", "=", "n_samples_test", ")", "\n", "\n", "self", ".", "delete_memmaps_unsup", "(", ")", "\n", "\n", "self", ".", "assertAlmostEqual", "(", "obj", ",", "-", "5.176733016967773", ",", "places", "=", "5", ")", "\n", "self", ".", "assertAlmostEqual", "(", "f1", ",", "0.46153846153846156", ",", "places", "=", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BenevolentAI_RELVM.tests.test_classification_pair.SupPairTest.make_memmaps": [[170, 200], ["test_classification_pair.SupPairTest.make_memmaps.create_mmap"], "methods", ["None"], ["    ", "def", "make_memmaps", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        entities_x_{train,valid,test} : np.memmap\n            The indices to `entity_types` for the first entity in the\n            {train,valid,test} data.\n        entities_y_{train,valid,test} : np.memmap\n            The indices to `entity_types` for the second entity in the\n            {train,valid,test} data.\n        labels_{train,valid,test} : np.memmap\n            The indices to `label_types` for the labels for each entity pair\n            in the {train,valid,test} data.\n        \"\"\"", "\n", "def", "create_mmap", "(", "filename", ",", "n_indices", ",", "num_data", ")", ":", "\n", "            ", "full_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "filename", ")", "\n", "mm", "=", "np", ".", "memmap", "(", "full_path", ",", "\n", "dtype", "=", "np", ".", "uint16", ",", "mode", "=", "'w+'", ",", "shape", "=", "(", "num_data", ",", "1", ")", ")", "\n", "mm", "[", ":", ",", "0", "]", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "n_indices", ",", "num_data", ")", "\n", "mmap_files_to_delete", ".", "append", "(", "full_path", ")", "\n", "\n", "", "create_mmap", "(", "'entities_x_train.mmap'", ",", "len", "(", "entity_types", ")", ",", "num_data_train", ")", "\n", "create_mmap", "(", "'entities_y_train.mmap'", ",", "len", "(", "entity_types", ")", ",", "num_data_train", ")", "\n", "create_mmap", "(", "'labels_train.mmap'", ",", "len", "(", "label_types", ")", ",", "num_data_train", ")", "\n", "\n", "create_mmap", "(", "'entities_x_valid.mmap'", ",", "len", "(", "entity_types", ")", ",", "num_data_valid", ")", "\n", "create_mmap", "(", "'entities_y_valid.mmap'", ",", "len", "(", "entity_types", ")", ",", "num_data_valid", ")", "\n", "create_mmap", "(", "'labels_valid.mmap'", ",", "len", "(", "label_types", ")", ",", "num_data_valid", ")", "\n", "\n", "create_mmap", "(", "'entities_x_test.mmap'", ",", "len", "(", "entity_types", ")", ",", "num_data_test", ")", "\n", "create_mmap", "(", "'entities_y_test.mmap'", ",", "len", "(", "entity_types", ")", ",", "num_data_test", ")", "\n", "create_mmap", "(", "'labels_test.mmap'", ",", "len", "(", "label_types", ")", ",", "num_data_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BenevolentAI_RELVM.tests.test_classification_pair.SupPairTest.delete_memmaps_unsup": [[201, 207], ["os.remove"], "methods", ["None"], ["", "def", "delete_memmaps_unsup", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Deletes the mock memmap data created above for the test\n        \"\"\"", "\n", "for", "f", "in", "mmap_files_to_delete", ":", "\n", "            ", "os", ".", "remove", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BenevolentAI_RELVM.tests.test_classification_pair.SupPairTest.setUp": [[208, 234], ["test_classification_pair.SupPairTest.make_memmaps", "run.sup.MaximumLikelihoodPairLevel.sup.MaximumLikelihoodPairLevel", "run.sup.MaximumLikelihoodPairLevel.sup.MaximumLikelihoodPairLevel.train", "run.sup.MaximumLikelihoodPairLevel.sup.MaximumLikelihoodPairLevel.test", "test_classification_pair.SupPairTest.delete_memmaps_unsup", "test_classification_pair.SupPairTest.assertAlmostEqual", "test_classification_pair.SupPairTest.assertAlmostEqual"], "methods", ["home.repos.pwc.inspect_result.BenevolentAI_RELVM.tests.test_classification_pair.SupPairTest.make_memmaps", "home.repos.pwc.inspect_result.BenevolentAI_RELVM.unsup.__init__.Run.train", "home.repos.pwc.inspect_result.BenevolentAI_RELVM.sup.__init__.MaximumLikelihoodPairLevel.test", "home.repos.pwc.inspect_result.BenevolentAI_RELVM.tests.test_classification_pair.SupPairTest.delete_memmaps_unsup"], ["", "", "def", "setUp", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "make_memmaps", "(", ")", "\n", "\n", "run", "=", "Run", "(", "data_dir", "=", "data_dir", ",", "vocab", "=", "vocab", ",", "entity_types", "=", "entity_types", ",", "\n", "pos_entity_pairs", "=", "pos_entity_pairs", ",", "label_types", "=", "label_types", ",", "\n", "neg_label", "=", "neg_label", ",", "num_data_train", "=", "num_data_train", ",", "\n", "num_data_valid", "=", "num_data_valid", ",", "num_data_test", "=", "num_data_test", ",", "\n", "max_len", "=", "max_len", ",", "trainer", "=", "Trainer", ",", "\n", "trainer_kwargs", "=", "trainer_kwargs", ",", "out_dir", "=", "out_dir", ",", "\n", "pre_trained", "=", "pre_trained", ",", "pre_trained_dir", "=", "pre_trained_dir", ")", "\n", "\n", "run", ".", "train", "(", "n_iter", "=", "n_iter_train", ",", "n_batch", "=", "n_batch_train", ",", "\n", "n_neg", "=", "n_neg_train", ",", "n_samples", "=", "n_samples_train", ",", "\n", "val_freq", "=", "val_freq", ",", "n_batch_val", "=", "n_batch_val", ",", "\n", "n_samples_val", "=", "n_samples_val", ")", "\n", "\n", "obj", ",", "f1", "=", "run", ".", "test", "(", "'test'", ",", "n_batch", "=", "n_batch_test", ",", "\n", "n_samples", "=", "n_samples_test", ",", "\n", "eval_at_optimal_threshold", "=", "True", ",", "min_threshold", "=", "0.99", ",", "\n", "max_threshold", "=", "0.9995", ",", "num", "=", "20", ")", "\n", "\n", "self", ".", "delete_memmaps_unsup", "(", ")", "\n", "\n", "self", ".", "assertAlmostEqual", "(", "obj", ",", "-", "9.338354110717773", ",", "places", "=", "5", ")", "\n", "self", ".", "assertAlmostEqual", "(", "f1", ",", "0", ",", "places", "=", "5", ")", "\n", "\n"]]}