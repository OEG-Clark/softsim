{"home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.Cifar10-ResNet-TensorFlow.cifar10-resnet-gn.Model.__init__": [[56, 59], ["ModelDesc.__init__"], "methods", ["home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.resnet_gn.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n", ")", ":", "\n", "        ", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n", "=", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.Cifar10-ResNet-TensorFlow.cifar10-resnet-gn.Model.inputs": [[60, 63], ["tensorflow.TensorSpec", "tensorflow.TensorSpec"], "methods", ["None"], ["", "def", "inputs", "(", "self", ")", ":", "\n", "        ", "return", "[", "tf", ".", "TensorSpec", "(", "[", "None", ",", "32", ",", "32", ",", "3", "]", ",", "tf", ".", "float32", ",", "'input'", ")", ",", "\n", "tf", ".", "TensorSpec", "(", "[", "None", "]", ",", "tf", ".", "int32", ",", "'label'", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.Cifar10-ResNet-TensorFlow.cifar10-resnet-gn.Model.build_graph": [[64, 130], ["tensorflow.test.is_gpu_available", "tensorflow.transpose", "FullyConnected", "tensorflow.nn.softmax", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.reduce_mean", "tensorflow.to_float", "tensorpack.tfutils.summary.add_moving_summary", "tensorflow.train.exponential_decay", "tensorflow.multiply", "tensorpack.tfutils.summary.add_moving_summary", "tensorpack.tfutils.summary.add_param_summary", "tensorflow.add_n", "tensorflow.pad.get_shape().as_list", "argscope", "argscope", "Conv2D", "cifar10-resnet-gn.Model.build_graph.residual"], "methods", ["None"], ["", "def", "build_graph", "(", "self", ",", "image", ",", "label", ")", ":", "\n", "        ", "image", "=", "image", "/", "128.0", "\n", "assert", "tf", ".", "test", ".", "is_gpu_available", "(", ")", "\n", "image", "=", "tf", ".", "transpose", "(", "image", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "\n", "def", "residual", "(", "name", ",", "l", ",", "increase_dim", "=", "False", ",", "first", "=", "False", ")", ":", "\n", "            ", "shape", "=", "l", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "in_channel", "=", "shape", "[", "1", "]", "\n", "\n", "if", "increase_dim", ":", "\n", "                ", "out_channel", "=", "in_channel", "*", "2", "\n", "stride1", "=", "2", "\n", "", "else", ":", "\n", "                ", "out_channel", "=", "in_channel", "\n", "stride1", "=", "1", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "                ", "b1", "=", "l", "if", "first", "else", "GNReLU", "(", "l", ")", "\n", "c1", "=", "Conv2D", "(", "'conv1'", ",", "b1", ",", "out_channel", ",", "strides", "=", "stride1", ",", "activation", "=", "GNReLU", ")", "\n", "c2", "=", "Conv2D", "(", "'conv2'", ",", "c1", ",", "out_channel", ")", "\n", "if", "increase_dim", ":", "\n", "                    ", "l", "=", "AvgPooling", "(", "'pool'", ",", "l", ",", "2", ")", "\n", "l", "=", "tf", ".", "pad", "(", "l", ",", "[", "[", "0", ",", "0", "]", ",", "[", "in_channel", "//", "2", ",", "in_channel", "//", "2", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "\n", "", "l", "=", "c2", "+", "l", "\n", "return", "l", "\n", "\n", "", "", "with", "argscope", "(", "[", "Conv2D", ",", "AvgPooling", ",", "BatchNorm", ",", "GlobalAvgPooling", "]", ",", "data_format", "=", "'channels_first'", ")", ",", "argscope", "(", "Conv2D", ",", "use_bias", "=", "False", ",", "kernel_size", "=", "3", ",", "\n", "kernel_initializer", "=", "tf", ".", "variance_scaling_initializer", "(", "scale", "=", "2.0", ",", "mode", "=", "'fan_out'", ")", ")", ":", "\n", "            ", "l", "=", "Conv2D", "(", "'conv0'", ",", "image", ",", "16", ",", "activation", "=", "GNReLU", ")", "\n", "l", "=", "residual", "(", "'res1.0'", ",", "l", ",", "first", "=", "True", ")", "\n", "for", "k", "in", "range", "(", "1", ",", "self", ".", "n", ")", ":", "\n", "                ", "l", "=", "residual", "(", "'res1.{}'", ".", "format", "(", "k", ")", ",", "l", ")", "\n", "# 32,c=16", "\n", "\n", "", "l", "=", "residual", "(", "'res2.0'", ",", "l", ",", "increase_dim", "=", "True", ")", "\n", "for", "k", "in", "range", "(", "1", ",", "self", ".", "n", ")", ":", "\n", "                ", "l", "=", "residual", "(", "'res2.{}'", ".", "format", "(", "k", ")", ",", "l", ")", "\n", "# 16,c=32", "\n", "\n", "", "l", "=", "residual", "(", "'res3.0'", ",", "l", ",", "increase_dim", "=", "True", ")", "\n", "for", "k", "in", "range", "(", "1", ",", "self", ".", "n", ")", ":", "\n", "                ", "l", "=", "residual", "(", "'res3.'", "+", "str", "(", "k", ")", ",", "l", ")", "\n", "", "l", "=", "GNReLU", "(", "'bnlast'", ",", "l", ")", "\n", "# 8,c=64", "\n", "l", "=", "GlobalAvgPooling", "(", "'gap'", ",", "l", ")", "\n", "\n", "", "logits", "=", "FullyConnected", "(", "'linear'", ",", "l", ",", "10", ")", "\n", "tf", ".", "nn", ".", "softmax", "(", "logits", ",", "name", "=", "'output'", ")", "\n", "\n", "cost", "=", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "logits", "=", "logits", ",", "labels", "=", "label", ")", "\n", "cost", "=", "tf", ".", "reduce_mean", "(", "cost", ",", "name", "=", "'cross_entropy_loss'", ")", "\n", "\n", "wrong", "=", "tf", ".", "to_float", "(", "tf", ".", "logical_not", "(", "tf", ".", "nn", ".", "in_top_k", "(", "logits", ",", "label", ",", "1", ")", ")", ",", "name", "=", "'wrong_vector'", ")", "\n", "# monitor training error", "\n", "add_moving_summary", "(", "tf", ".", "reduce_mean", "(", "wrong", ",", "name", "=", "'train_error'", ")", ")", "\n", "\n", "# weight decay on all W of fc layers", "\n", "wd_w", "=", "tf", ".", "train", ".", "exponential_decay", "(", "0.0002", ",", "get_global_step_var", "(", ")", ",", "\n", "480000", ",", "0.2", ",", "True", ")", "\n", "wd_cost", "=", "tf", ".", "multiply", "(", "wd_w", ",", "regularize_cost", "(", "'.*/W'", ",", "tf", ".", "nn", ".", "l2_loss", ")", ",", "name", "=", "'wd_cost'", ")", "\n", "add_moving_summary", "(", "cost", ",", "wd_cost", ")", "\n", "\n", "add_param_summary", "(", "(", "'.*/W'", ",", "[", "'histogram'", "]", ")", ")", "# monitor W", "\n", "return", "tf", ".", "add_n", "(", "[", "cost", ",", "wd_cost", "]", ",", "name", "=", "'cost'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.Cifar10-ResNet-TensorFlow.cifar10-resnet-gn.Model.optimizer": [[131, 135], ["tensorflow.get_variable", "tensorflow.train.MomentumOptimizer"], "methods", ["None"], ["", "def", "optimizer", "(", "self", ")", ":", "\n", "        ", "lr", "=", "tf", ".", "get_variable", "(", "'learning_rate'", ",", "initializer", "=", "0.01", ",", "trainable", "=", "False", ")", "\n", "opt", "=", "tf", ".", "train", ".", "MomentumOptimizer", "(", "lr", ",", "0.9", ")", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.Cifar10-ResNet-TensorFlow.cifar10-resnet-gn.GroupNorm": [[19, 47], ["tensorflow.constant_initializer", "tf.reshape.get_shape().as_list", "len", "tensorflow.shape", "tensorflow.reshape", "tensorflow.nn.moments", "tensorflow.get_variable", "tensorflow.reshape", "tensorflow.get_variable", "tensorflow.reshape", "tensorflow.nn.batch_normalization", "tensorflow.reshape", "tensorflow.stack", "tf.reshape.get_shape", "tensorflow.constant_initializer"], "function", ["None"], ["def", "GroupNorm", "(", "x", ",", "group", ",", "gamma_initializer", "=", "tf", ".", "constant_initializer", "(", "1.", ")", ")", ":", "\n", "    ", "\"\"\"\n    https://arxiv.org/abs/1803.08494\n    \"\"\"", "\n", "shape", "=", "x", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "ndims", "=", "len", "(", "shape", ")", "\n", "assert", "ndims", "==", "4", ",", "shape", "\n", "chan", "=", "shape", "[", "1", "]", "\n", "assert", "chan", "%", "group", "==", "0", ",", "chan", "\n", "group_size", "=", "chan", "//", "group", "\n", "\n", "orig_shape", "=", "tf", ".", "shape", "(", "x", ")", "\n", "h", ",", "w", "=", "orig_shape", "[", "2", "]", ",", "orig_shape", "[", "3", "]", "\n", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "tf", ".", "stack", "(", "[", "-", "1", ",", "group", ",", "group_size", ",", "h", ",", "w", "]", ")", ")", "\n", "\n", "mean", ",", "var", "=", "tf", ".", "nn", ".", "moments", "(", "x", ",", "[", "2", ",", "3", ",", "4", "]", ",", "keep_dims", "=", "True", ")", "\n", "\n", "new_shape", "=", "[", "1", ",", "group", ",", "group_size", ",", "1", ",", "1", "]", "\n", "\n", "beta", "=", "tf", ".", "get_variable", "(", "'beta'", ",", "[", "chan", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", ")", ")", "\n", "beta", "=", "tf", ".", "reshape", "(", "beta", ",", "new_shape", ")", "\n", "\n", "gamma", "=", "tf", ".", "get_variable", "(", "'gamma'", ",", "[", "chan", "]", ",", "initializer", "=", "gamma_initializer", ")", "\n", "gamma", "=", "tf", ".", "reshape", "(", "gamma", ",", "new_shape", ")", "\n", "\n", "out", "=", "tf", ".", "nn", ".", "batch_normalization", "(", "x", ",", "mean", ",", "var", ",", "beta", ",", "gamma", ",", "1e-5", ",", "name", "=", "'output'", ")", "\n", "return", "tf", ".", "reshape", "(", "out", ",", "orig_shape", ",", "name", "=", "'output'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.Cifar10-ResNet-TensorFlow.cifar10-resnet-gn.GNReLU": [[49, 53], ["layer_register", "cifar10-resnet-gn.GroupNorm", "tensorflow.nn.relu"], "function", ["home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-TensorFlow.resnet_model.GroupNorm"], ["", "@", "layer_register", "(", "use_scope", "=", "None", ")", "\n", "def", "GNReLU", "(", "x", ",", "name", "=", "None", ")", ":", "\n", "    ", "x", "=", "GroupNorm", "(", "x", ",", "8", ")", "\n", "return", "tf", ".", "nn", ".", "relu", "(", "x", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.Cifar10-ResNet-TensorFlow.cifar10-resnet-gn.get_data": [[137, 157], ["tensorpack.dataflow.dataset.Cifar10", "MultiProcessRunner.get_per_pixel_mean", "AugmentImageComponent", "BatchData", "MultiProcessRunner", "imgaug.CenterPaste", "imgaug.RandomCrop", "imgaug.Flip", "imgaug.MapImage", "imgaug.MapImage"], "function", ["None"], ["", "", "def", "get_data", "(", "train_or_test", ")", ":", "\n", "    ", "isTrain", "=", "train_or_test", "==", "'train'", "\n", "ds", "=", "dataset", ".", "Cifar10", "(", "train_or_test", ")", "\n", "pp_mean", "=", "ds", ".", "get_per_pixel_mean", "(", ")", "\n", "if", "isTrain", ":", "\n", "        ", "augmentors", "=", "[", "\n", "imgaug", ".", "CenterPaste", "(", "(", "40", ",", "40", ")", ")", ",", "\n", "imgaug", ".", "RandomCrop", "(", "(", "32", ",", "32", ")", ")", ",", "\n", "imgaug", ".", "Flip", "(", "horiz", "=", "True", ")", ",", "\n", "imgaug", ".", "MapImage", "(", "lambda", "x", ":", "x", "-", "pp_mean", ")", ",", "\n", "]", "\n", "", "else", ":", "\n", "        ", "augmentors", "=", "[", "\n", "imgaug", ".", "MapImage", "(", "lambda", "x", ":", "x", "-", "pp_mean", ")", "\n", "]", "\n", "", "ds", "=", "AugmentImageComponent", "(", "ds", ",", "augmentors", ")", "\n", "ds", "=", "BatchData", "(", "ds", ",", "BATCH_SIZE", ",", "remainder", "=", "not", "isTrain", ")", "\n", "if", "isTrain", ":", "\n", "        ", "ds", "=", "MultiProcessRunner", "(", "ds", ",", "3", ",", "2", ")", "\n", "", "return", "ds", "\n", "\n"]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.main.AverageMeter.__init__": [[338, 340], ["main.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.main.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.main.AverageMeter.reset": [[341, 346], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.main.AverageMeter.update": [[347, 352], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.main.main": [[71, 104], ["parser.parse_args", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "warnings.warn", "warnings.warn", "int", "torch.spawn", "main.main_worker"], "function", ["home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.main.main_worker"], ["def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "warnings", ".", "warn", "(", "'You have chosen to seed training. '", "\n", "'This will turn on the CUDNN deterministic setting, '", "\n", "'which can slow down your training considerably! '", "\n", "'You may see unexpected behavior when restarting '", "\n", "'from checkpoints.'", ")", "\n", "\n", "", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "warnings", ".", "warn", "(", "'You have chosen a specific GPU. This will completely '", "\n", "'disable data parallelism.'", ")", "\n", "\n", "", "if", "args", ".", "dist_url", "==", "\"env://\"", "and", "args", ".", "world_size", "==", "-", "1", ":", "\n", "        ", "args", ".", "world_size", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "\n", "\n", "", "args", ".", "distributed", "=", "args", ".", "world_size", ">", "1", "or", "args", ".", "multiprocessing_distributed", "\n", "\n", "ngpus_per_node", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "# Since we have ngpus_per_node processes per node, the total world_size", "\n", "# needs to be adjusted accordingly", "\n", "        ", "args", ".", "world_size", "=", "ngpus_per_node", "*", "args", ".", "world_size", "\n", "# Use torch.multiprocessing.spawn to launch distributed processes: the", "\n", "# main_worker process function", "\n", "mp", ".", "spawn", "(", "main_worker", ",", "nprocs", "=", "ngpus_per_node", ",", "args", "=", "(", "ngpus_per_node", ",", "args", ")", ")", "\n", "", "else", ":", "\n", "# Simply call main_worker function", "\n", "        ", "main_worker", "(", "args", ".", "gpu", ",", "ngpus_per_node", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.main.main_worker": [[106, 234], ["print", "resnet_gn.resnet50", "torch.CrossEntropyLoss().cuda", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "os.path.join", "os.path.join", "torchvision.Normalize", "torchvision.ImageFolder", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "range", "print", "torch.init_process_group", "torch.nn.DataParallel().cuda.parameters", "os.path.isfile", "torchvision.Compose", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torchvision.ImageFolder", "main.validate", "main.adjust_learning_rate", "main.train", "main.validate", "max", "int", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.DataParallel().cuda.cuda", "int", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.DataParallel().cuda.cuda", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.DataParallel().cuda.cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.CrossEntropyLoss", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.DataParallel().cuda.load_state_dict", "torch.optim.SGD.load_state_dict", "print", "print", "torchvision.Compose", "torch.utils.data.distributed.DistributedSampler.set_epoch", "main.save_checkpoint", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "torch.nn.DataParallel().cuda.state_dict", "torch.optim.SGD.state_dict"], "function", ["home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.resnet_gn.resnet50", "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.main.validate", "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.main.adjust_learning_rate", "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.main.train", "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.main.validate", "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.main.save_checkpoint"], ["", "", "def", "main_worker", "(", "gpu", ",", "ngpus_per_node", ",", "args", ")", ":", "\n", "    ", "global", "best_acc1", "\n", "args", ".", "gpu", "=", "gpu", "\n", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"Use GPU: {} for training\"", ".", "format", "(", "args", ".", "gpu", ")", ")", "\n", "\n", "", "if", "args", ".", "distributed", ":", "\n", "        ", "if", "args", ".", "dist_url", "==", "\"env://\"", "and", "args", ".", "rank", "==", "-", "1", ":", "\n", "            ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "\"RANK\"", "]", ")", "\n", "", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "# For multiprocessing distributed training, rank needs to be the", "\n", "# global rank among all the processes", "\n", "            ", "args", ".", "rank", "=", "args", ".", "rank", "*", "ngpus_per_node", "+", "gpu", "\n", "", "dist", ".", "init_process_group", "(", "backend", "=", "args", ".", "dist_backend", ",", "init_method", "=", "args", ".", "dist_url", ",", "\n", "world_size", "=", "args", ".", "world_size", ",", "rank", "=", "args", ".", "rank", ")", "\n", "# create model", "\n", "", "print", "(", "\"=> creating model '{}'\"", ".", "format", "(", "'resnet50'", ")", ")", "\n", "model", "=", "resnet50", "(", ")", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "# For multiprocessing distributed, DistributedDataParallel constructor", "\n", "# should always set the single device scope, otherwise,", "\n", "# DistributedDataParallel will use all available devices.", "\n", "        ", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "# When using a single GPU per process and per", "\n", "# DistributedDataParallel, we need to divide the batch size", "\n", "# ourselves based on the total number of GPUs we have", "\n", "args", ".", "batch_size", "=", "int", "(", "args", ".", "batch_size", "/", "ngpus_per_node", ")", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "args", ".", "gpu", "]", ")", "\n", "", "else", ":", "\n", "            ", "model", ".", "cuda", "(", ")", "\n", "# DistributedDataParallel will divide and allocate batch_size to all", "\n", "# available GPUs if device_ids are not set", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ")", "\n", "", "", "elif", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", "=", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "", "else", ":", "\n", "# DataParallel will divide and allocate batch_size to all available GPUs", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "\n", "# define loss function (criterion) and optimizer", "\n", "", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "# optionally resume from a checkpoint", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "best_acc1", "=", "checkpoint", "[", "'best_acc1'", "]", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "print", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "args", ".", "resume", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "\n", "", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# Data loading code", "\n", "traindir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'train'", ")", "\n", "valdir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'val'", ")", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n", "train_dataset", "=", "datasets", ".", "ImageFolder", "(", "\n", "traindir", ",", "\n", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ")", "\n", "", "else", ":", "\n", "        ", "train_sampler", "=", "None", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "train_sampler", ")", "\n", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "ImageFolder", "(", "valdir", ",", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "if", "args", ".", "evaluate", ":", "\n", "        ", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "args", ")", "\n", "return", "\n", "\n", "", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "if", "args", ".", "distributed", ":", "\n", "            ", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", "\n", "\n", "# train for one epoch", "\n", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ")", "\n", "\n", "# evaluate on validation set", "\n", "acc1", "=", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "args", ")", "\n", "\n", "# remember best acc@1 and save checkpoint", "\n", "is_best", "=", "acc1", ">", "best_acc1", "\n", "best_acc1", "=", "max", "(", "acc1", ",", "best_acc1", ")", "\n", "\n", "if", "not", "args", ".", "multiprocessing_distributed", "or", "(", "args", ".", "multiprocessing_distributed", "\n", "and", "args", ".", "rank", "%", "ngpus_per_node", "==", "0", ")", ":", "\n", "            ", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'best_acc1'", ":", "best_acc1", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "is_best", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.main.train": [[236, 283], ["main.AverageMeter", "main.AverageMeter", "main.AverageMeter", "main.AverageMeter", "main.AverageMeter", "model.train", "time.time", "enumerate", "main.AverageMeter.update", "target.cuda.cuda", "model", "criterion", "main.accuracy", "main.AverageMeter.update", "main.AverageMeter.update", "main.AverageMeter.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "main.AverageMeter.update", "time.time", "input.cuda.cuda", "criterion.item", "input.cuda.size", "input.cuda.size", "input.cuda.size", "print", "time.time", "time.time", "len"], "function", ["home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.main.train", "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.main.AverageMeter.update", "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.main.accuracy", "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.main.AverageMeter.update", "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.main.AverageMeter.update", "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.main.AverageMeter.update", "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.main.AverageMeter.update"], ["", "", "", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "# measure data loading time", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "input", "=", "input", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "", "target", "=", "target", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "output", "=", "model", "(", "input", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "print", "(", "'Epoch: [{0}][{1}/{2}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Data {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Acc@1 {top1.val:.3f} ({top1.avg:.3f})\\t'", "\n", "'Acc@5 {top5.val:.3f} ({top5.avg:.3f})'", ".", "format", "(", "\n", "epoch", ",", "i", ",", "len", "(", "train_loader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "data_time", "=", "data_time", ",", "loss", "=", "losses", ",", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.main.validate": [[285, 328], ["main.AverageMeter", "main.AverageMeter", "main.AverageMeter", "main.AverageMeter", "model.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "time.time", "enumerate", "print", "target.cuda.cuda", "model", "criterion", "main.accuracy", "main.AverageMeter.update", "main.AverageMeter.update", "main.AverageMeter.update", "main.AverageMeter.update", "time.time", "input.cuda.cuda", "criterion.item", "input.cuda.size", "input.cuda.size", "input.cuda.size", "print", "time.time", "len"], "function", ["home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.main.accuracy", "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.main.AverageMeter.update", "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.main.AverageMeter.update", "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.main.AverageMeter.update", "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.main.AverageMeter.update"], ["", "", "", "def", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "args", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "# switch to evaluate mode", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "            ", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "                ", "input", "=", "input", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "", "target", "=", "target", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "output", "=", "model", "(", "input", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                ", "print", "(", "'Test: [{0}/{1}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Acc@1 {top1.val:.3f} ({top1.avg:.3f})\\t'", "\n", "'Acc@5 {top5.val:.3f} ({top5.avg:.3f})'", ".", "format", "(", "\n", "i", ",", "len", "(", "val_loader", ")", ",", "batch_time", "=", "batch_time", ",", "loss", "=", "losses", ",", "\n", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "\n", "", "", "print", "(", "' * Acc@1 {top1.avg:.3f} Acc@5 {top5.avg:.3f}'", "\n", ".", "format", "(", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "\n", "", "return", "top1", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.main.save_checkpoint": [[330, 334], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "shutil.copyfile"], "function", ["None"], ["", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "filename", "=", "'checkpoint.pth.tar'", ")", ":", "\n", "    ", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "filename", ",", "'model_best.pth.tar'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.main.adjust_learning_rate": [[354, 359], ["None"], "function", ["None"], ["", "", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by 10 every 30 epochs\"\"\"", "\n", "lr", "=", "args", ".", "lr", "*", "(", "0.1", "**", "(", "epoch", "//", "30", ")", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.main.accuracy": [[361, 376], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.resnet.BasicBlock.__init__": [[28, 37], ["torch.Module.__init__", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.resnet_gn.ResNet.__init__", "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.resnet_gn.conv3x3", "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.resnet_gn.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.resnet.BasicBlock.forward": [[38, 55], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.resnet.Bottleneck.__init__": [[60, 72], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.resnet_gn.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.resnet.Bottleneck.forward": [[73, 94], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.resnet.ResNet.__init__": [[98, 124], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "resnet.ResNet.modules", "resnet.ResNet.modules", "isinstance", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "print", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.resnet_gn.ResNet.__init__", "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.resnet_gn.ResNet._make_layer", "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.resnet_gn.ResNet._make_layer", "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.resnet_gn.ResNet._make_layer", "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.resnet_gn.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                ", "print", "(", "\"INIT BN \"", ",", "m", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.resnet.ResNet._make_layer": [[125, 141], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.resnet.ResNet.forward": [[142, 158], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.avgpool", "resnet.ResNet.view", "resnet.ResNet.fc", "resnet.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.resnet.conv3x3": [[19, 23], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.resnet.resnet18": [[160, 170], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "", "def", "resnet18", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet18'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.resnet.resnet34": [[172, 182], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet34'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.resnet.resnet50": [[184, 194], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.resnet.resnet101": [[196, 206], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet101'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.resnet.resnet152": [[208, 218], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet152'", "]", ")", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.resnet_gn.Bottleneck.__init__": [[18, 34], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "resnet_gn.gn_init", "resnet_gn.gn_init", "resnet_gn.gn_init"], "methods", ["home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.resnet_gn.ResNet.__init__", "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-TensorFlow.resnet_model.GroupNorm", "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-TensorFlow.resnet_model.GroupNorm", "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-TensorFlow.resnet_model.GroupNorm", "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-TensorFlow.resnet_model.GroupNorm", "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-TensorFlow.resnet_model.GroupNorm", "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-TensorFlow.resnet_model.GroupNorm", "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.resnet_gn.gn_init", "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.resnet_gn.gn_init", "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.resnet_gn.gn_init"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "GroupNorm", "(", "32", ",", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "GroupNorm", "(", "32", ",", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "GroupNorm", "(", "32", ",", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "gn_init", "(", "self", ".", "bn1", ")", "\n", "gn_init", "(", "self", ".", "bn2", ")", "\n", "gn_init", "(", "self", ".", "bn3", ",", "zero_init", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.resnet_gn.Bottleneck.forward": [[35, 56], ["resnet_gn.Bottleneck.conv1", "resnet_gn.Bottleneck.bn1", "resnet_gn.Bottleneck.relu", "resnet_gn.Bottleneck.conv2", "resnet_gn.Bottleneck.bn2", "resnet_gn.Bottleneck.relu", "resnet_gn.Bottleneck.conv3", "resnet_gn.Bottleneck.bn3", "resnet_gn.Bottleneck.relu", "resnet_gn.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.resnet_gn.ResNet.__init__": [[71, 90], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet_gn.ResNet._make_layer", "resnet_gn.ResNet._make_layer", "resnet_gn.ResNet._make_layer", "resnet_gn.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "resnet_gn.ResNet.modules", "resnet_gn.gn_init", "isinstance", "resnet_gn.conv2d_init"], "methods", ["home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.resnet_gn.ResNet.__init__", "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-TensorFlow.resnet_model.GroupNorm", "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-TensorFlow.resnet_model.GroupNorm", "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.resnet_gn.ResNet._make_layer", "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.resnet_gn.ResNet._make_layer", "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.resnet_gn.ResNet._make_layer", "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.resnet_gn.ResNet._make_layer", "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.resnet_gn.gn_init", "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.resnet_gn.conv2d_init"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "GroupNorm", "(", "32", ",", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "conv2d_init", "(", "m", ")", "\n", "", "", "gn_init", "(", "self", ".", "bn1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.resnet_gn.ResNet._make_layer": [[91, 110], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "isinstance", "resnet_gn.gn_init", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "block"], "methods", ["home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.resnet_gn.gn_init", "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-TensorFlow.resnet_model.GroupNorm", "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-TensorFlow.resnet_model.GroupNorm"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "32", ",", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "m", "=", "downsample", "[", "1", "]", "\n", "assert", "isinstance", "(", "m", ",", "nn", ".", "GroupNorm", ")", "\n", "gn_init", "(", "m", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.resnet_gn.ResNet.forward": [[111, 127], ["resnet_gn.ResNet.conv1", "resnet_gn.ResNet.bn1", "resnet_gn.ResNet.relu", "resnet_gn.ResNet.maxpool", "resnet_gn.ResNet.layer1", "resnet_gn.ResNet.layer2", "resnet_gn.ResNet.layer3", "resnet_gn.ResNet.layer4", "resnet_gn.ResNet.avgpool", "resnet_gn.ResNet.view", "resnet_gn.ResNet.fc", "resnet_gn.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.resnet_gn.conv3x3": [[9, 13], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.resnet_gn.conv2d_init": [[58, 62], ["isinstance", "m.weight.data.normal_", "math.sqrt"], "function", ["None"], ["", "", "def", "conv2d_init", "(", "m", ")", ":", "\n", "    ", "assert", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "\n", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.resnet_gn.gn_init": [[63, 67], ["isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "function", ["None"], ["", "def", "gn_init", "(", "m", ",", "zero_init", "=", "False", ")", ":", "\n", "    ", "assert", "isinstance", "(", "m", ",", "nn", ".", "GroupNorm", ")", "\n", "m", ".", "weight", ".", "data", ".", "fill_", "(", "0.", "if", "zero_init", "else", "1.", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.resnet_gn.resnet50": [[129, 132], ["resnet_gn.ResNet"], "function", ["None"], ["", "", "def", "resnet50", "(", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-PyTorch.resnet_gn.resnet101": [[133, 136], ["resnet_gn.ResNet"], "function", ["None"], ["", "def", "resnet101", "(", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-TensorFlow.resnet_model.GroupNorm": [[16, 46], ["tensorpack.models.layer_register", "tensorflow.constant_initializer", "tf.reshape.get_shape().as_list", "len", "tensorflow.shape", "tensorflow.reshape", "tensorflow.nn.moments", "tensorflow.get_variable", "tensorflow.reshape", "tensorflow.get_variable", "tensorflow.reshape", "tensorflow.nn.batch_normalization", "tensorflow.reshape", "tensorflow.stack", "tf.reshape.get_shape", "tensorflow.constant_initializer"], "function", ["None"], ["@", "layer_register", "(", "log_shape", "=", "True", ")", "\n", "def", "GroupNorm", "(", "x", ",", "group", "=", "32", ",", "gamma_initializer", "=", "tf", ".", "constant_initializer", "(", "1.", ")", ")", ":", "\n", "    ", "\"\"\"\n    https://arxiv.org/abs/1803.08494\n    \"\"\"", "\n", "shape", "=", "x", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "ndims", "=", "len", "(", "shape", ")", "\n", "assert", "ndims", "in", "[", "2", ",", "4", "]", "\n", "chan", "=", "shape", "[", "1", "]", "\n", "\n", "assert", "chan", "%", "group", "==", "0", ",", "chan", "\n", "group_size", "=", "chan", "//", "group", "\n", "\n", "orig_shape", "=", "tf", ".", "shape", "(", "x", ")", "\n", "h", ",", "w", "=", "orig_shape", "[", "2", "]", ",", "orig_shape", "[", "3", "]", "\n", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "tf", ".", "stack", "(", "[", "-", "1", ",", "group", ",", "group_size", ",", "h", ",", "w", "]", ")", ")", "\n", "\n", "mean", ",", "var", "=", "tf", ".", "nn", ".", "moments", "(", "x", ",", "[", "2", ",", "3", ",", "4", "]", ",", "keep_dims", "=", "True", ")", "\n", "\n", "new_shape", "=", "[", "1", ",", "group", ",", "group_size", ",", "1", ",", "1", "]", "\n", "\n", "beta", "=", "tf", ".", "get_variable", "(", "'beta'", ",", "[", "chan", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", ")", ")", "\n", "beta", "=", "tf", ".", "reshape", "(", "beta", ",", "new_shape", ")", "\n", "\n", "gamma", "=", "tf", ".", "get_variable", "(", "'gamma'", ",", "[", "chan", "]", ",", "initializer", "=", "gamma_initializer", ")", "\n", "gamma", "=", "tf", ".", "reshape", "(", "gamma", ",", "new_shape", ")", "\n", "\n", "out", "=", "tf", ".", "nn", ".", "batch_normalization", "(", "x", ",", "mean", ",", "var", ",", "beta", ",", "gamma", ",", "1e-5", ",", "name", "=", "'output'", ")", "\n", "return", "tf", ".", "reshape", "(", "out", ",", "orig_shape", ",", "name", "=", "'output'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-TensorFlow.resnet_model.GNReLU": [[48, 51], ["resnet_model.GroupNorm", "tensorflow.nn.relu"], "function", ["home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-TensorFlow.resnet_model.GroupNorm"], ["", "def", "GNReLU", "(", "x", ",", "name", "=", "None", ")", ":", "\n", "    ", "x", "=", "GroupNorm", "(", "'gn'", ",", "x", ")", "\n", "return", "tf", ".", "nn", ".", "relu", "(", "x", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-TensorFlow.resnet_model.resnet_shortcut": [[53, 59], ["l.get_shape().as_list", "tensorpack.models.Conv2D", "l.get_shape"], "function", ["None"], ["", "def", "resnet_shortcut", "(", "l", ",", "n_out", ",", "stride", ",", "activation", "=", "tf", ".", "identity", ")", ":", "\n", "    ", "n_in", "=", "l", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "if", "n_in", "!=", "n_out", ":", "# change dimension when channel is not the same", "\n", "        ", "return", "Conv2D", "(", "'convshortcut'", ",", "l", ",", "n_out", ",", "1", ",", "strides", "=", "stride", ",", "activation", "=", "activation", ")", "\n", "", "else", ":", "\n", "        ", "return", "l", "\n", "\n"]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-TensorFlow.resnet_model.get_gn": [[61, 69], ["resnet_model.GroupNorm", "resnet_model.GroupNorm", "tensorflow.zeros_initializer"], "function", ["home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-TensorFlow.resnet_model.GroupNorm", "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-TensorFlow.resnet_model.GroupNorm"], ["", "", "def", "get_gn", "(", "zero_init", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Zero init gamma is good for resnet. See https://arxiv.org/abs/1706.02677.\n    \"\"\"", "\n", "if", "zero_init", ":", "\n", "        ", "return", "lambda", "x", ",", "name", "=", "None", ":", "GroupNorm", "(", "'gn'", ",", "x", ",", "gamma_initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "lambda", "x", ",", "name", "=", "None", ":", "GroupNorm", "(", "'gn'", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-TensorFlow.resnet_model.resnet_bottleneck": [[71, 86], ["tensorpack.models.Conv2D", "tensorpack.models.Conv2D", "tensorflow.nn.relu", "tensorpack.models.Conv2D", "tensorflow.pad", "tensorpack.models.Conv2D", "resnet_model.get_gn", "resnet_model.resnet_shortcut", "resnet_model.get_gn"], "function", ["home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-TensorFlow.resnet_model.get_gn", "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-TensorFlow.resnet_model.resnet_shortcut", "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-TensorFlow.resnet_model.get_gn"], ["", "", "def", "resnet_bottleneck", "(", "l", ",", "ch_out", ",", "stride", ",", "stride_first", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    stride_first: original resnet put stride on first conv. fb.resnet.torch put stride on second conv.\n    \"\"\"", "\n", "shortcut", "=", "l", "\n", "l", "=", "Conv2D", "(", "'conv1'", ",", "l", ",", "ch_out", ",", "1", ",", "strides", "=", "stride", "if", "stride_first", "else", "1", ",", "activation", "=", "GNReLU", ")", "\n", "if", "stride", "==", "1", ":", "\n", "        ", "l", "=", "Conv2D", "(", "'conv2'", ",", "l", ",", "ch_out", ",", "3", ",", "strides", "=", "1", "if", "stride_first", "else", "stride", ",", "activation", "=", "GNReLU", ")", "\n", "", "else", ":", "\n", "        ", "l", "=", "tf", ".", "pad", "(", "l", ",", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", "]", ")", "\n", "l", "=", "Conv2D", "(", "'conv2'", ",", "l", ",", "ch_out", ",", "3", ",", "strides", "=", "1", "if", "stride_first", "else", "\n", "stride", ",", "activation", "=", "GNReLU", ",", "padding", "=", "'VALID'", ")", "\n", "", "l", "=", "Conv2D", "(", "'conv3'", ",", "l", ",", "ch_out", "*", "4", ",", "1", ",", "activation", "=", "get_gn", "(", "zero_init", "=", "True", ")", ")", "\n", "return", "tf", ".", "nn", ".", "relu", "(", "l", "+", "\n", "resnet_shortcut", "(", "shortcut", ",", "ch_out", "*", "4", ",", "stride", ",", "activation", "=", "get_gn", "(", "zero_init", "=", "False", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-TensorFlow.resnet_model.resnet_group": [[87, 93], ["tensorflow.variable_scope", "range", "tensorflow.variable_scope", "block_func"], "function", ["None"], ["", "def", "resnet_group", "(", "l", ",", "name", ",", "block_func", ",", "features", ",", "count", ",", "stride", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "0", ",", "count", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'block{}'", ".", "format", "(", "i", ")", ")", ":", "\n", "                ", "l", "=", "block_func", "(", "l", ",", "features", ",", "stride", "if", "i", "==", "0", "else", "1", ")", "\n", "", "", "", "return", "l", "\n", "\n"]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-TensorFlow.resnet_model.resnet_backbone": [[95, 112], ["tensorpack.tfutils.argscope.argscope", "tensorpack.models.LinearWrap().tf.pad().Conv2D().tf.pad().MaxPooling().apply().apply().apply().apply().GlobalAvgPooling().FullyConnected", "tensorflow.variance_scaling_initializer", "tensorpack.models.LinearWrap().tf.pad().Conv2D().tf.pad().MaxPooling().apply().apply().apply().apply().GlobalAvgPooling", "tensorflow.random_normal_initializer", "tensorpack.models.LinearWrap().tf.pad().Conv2D().tf.pad().MaxPooling().apply().apply().apply().apply", "tensorpack.models.LinearWrap().tf.pad().Conv2D().tf.pad().MaxPooling().apply().apply().apply", "tensorpack.models.LinearWrap().tf.pad().Conv2D().tf.pad().MaxPooling().apply().apply", "tensorpack.models.LinearWrap().tf.pad().Conv2D().tf.pad().MaxPooling().apply", "tensorpack.models.LinearWrap().tf.pad().Conv2D().tf.pad().MaxPooling", "tensorpack.models.LinearWrap().tf.pad().Conv2D().tf.pad", "tensorpack.models.LinearWrap().tf.pad().Conv2D", "tensorpack.models.LinearWrap().tf.pad", "tensorpack.models.LinearWrap"], "function", ["None"], ["", "def", "resnet_backbone", "(", "image", ",", "num_blocks", ",", "group_func", ",", "block_func", ")", ":", "\n", "    ", "with", "argscope", "(", "Conv2D", ",", "use_bias", "=", "False", ",", "\n", "kernel_initializer", "=", "tf", ".", "variance_scaling_initializer", "(", "\n", "scale", "=", "2.0", ",", "mode", "=", "'fan_out'", ",", "distribution", "=", "'untruncated_normal'", ")", ")", ":", "\n", "        ", "logits", "=", "(", "LinearWrap", "(", "image", ")", "\n", ".", "tf", ".", "pad", "(", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "3", ",", "3", "]", ",", "[", "3", ",", "3", "]", "]", ")", "\n", ".", "Conv2D", "(", "'conv0'", ",", "64", ",", "7", ",", "strides", "=", "2", ",", "activation", "=", "GNReLU", ",", "padding", "=", "'VALID'", ")", "\n", ".", "tf", ".", "pad", "(", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", "]", ")", "\n", ".", "MaxPooling", "(", "'pool0'", ",", "shape", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "'VALID'", ")", "\n", ".", "apply", "(", "group_func", ",", "'group0'", ",", "block_func", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "1", ")", "\n", ".", "apply", "(", "group_func", ",", "'group1'", ",", "block_func", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "2", ")", "\n", ".", "apply", "(", "group_func", ",", "'group2'", ",", "block_func", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "2", ")", "\n", ".", "apply", "(", "group_func", ",", "'group3'", ",", "block_func", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "2", ")", "\n", ".", "GlobalAvgPooling", "(", "'gap'", ")", "\n", ".", "FullyConnected", "(", "'linear'", ",", "1000", ",", "\n", "kernel_initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "0.01", ")", ")", "(", ")", ")", "\n", "", "return", "logits", "\n", "", ""]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-TensorFlow.imagenet-resnet-gn.Model.get_logits": [[39, 56], ["tensorflow.nn.moments", "tensorpack.tfutils.argscope", "tensorpack.tfutils.varreplace.remap_variables", "resnet_model.resnet_backbone", "v.name.endswith", "tensorflow.sqrt"], "methods", ["home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-TensorFlow.resnet_model.resnet_backbone"], ["def", "get_logits", "(", "self", ",", "image", ")", ":", "\n", "\n", "        ", "def", "weight_standardization", "(", "v", ")", ":", "\n", "            ", "if", "not", "self", ".", "use_WS", ":", "\n", "                ", "return", "v", "\n", "", "if", "(", "not", "v", ".", "name", ".", "endswith", "(", "'/W:0'", ")", ")", "or", "v", ".", "shape", ".", "ndims", "!=", "4", ":", "\n", "                ", "return", "v", "\n", "", "mean", ",", "var", "=", "tf", ".", "nn", ".", "moments", "(", "v", ",", "[", "0", ",", "1", ",", "2", "]", ",", "keep_dims", "=", "True", ")", "\n", "v", "=", "(", "v", "-", "mean", ")", "/", "(", "tf", ".", "sqrt", "(", "var", ")", "+", "1e-5", ")", "\n", "return", "v", "\n", "\n", "", "num_blocks", "=", "{", "50", ":", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "101", ":", "[", "3", ",", "4", ",", "23", ",", "3", "]", "}", "[", "self", ".", "depth", "]", "\n", "block_func", "=", "resnet_bottleneck", "\n", "with", "argscope", "(", "[", "Conv2D", ",", "MaxPooling", ",", "GlobalAvgPooling", "]", ",", "data_format", "=", "self", ".", "data_format", ")", ",", "varreplace", ".", "remap_variables", "(", "weight_standardization", ")", ":", "\n", "            ", "return", "resnet_backbone", "(", "\n", "image", ",", "num_blocks", ",", "resnet_group", ",", "block_func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-TensorFlow.imagenet-resnet-gn.get_config": [[58, 108], ["max", "tensorpack.train.TrainConfig", "tensorpack.utils.gpu.get_num_gpu", "tensorpack.logger.info", "tensorpack.dataflow.FakeData", "tensorpack.logger.info", "imagenet_utils.get_imagenet_dataflow", "imagenet_utils.get_imagenet_dataflow", "tensorpack.logger.info", "min", "ModelSaver", "EstimatedTimeLeft", "GPUUtilizationTracker", "ScheduledHyperParamSetter", "callbacks.append", "ClassificationError", "ClassificationError", "callbacks.append", "callbacks.append", "ScheduledHyperParamSetter", "InferenceRunner", "DataParallelInferenceRunner", "tensorpack.QueueInput", "list", "range"], "function", ["home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-TensorFlow.imagenet_utils.get_imagenet_dataflow", "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-TensorFlow.imagenet_utils.get_imagenet_dataflow"], ["", "", "", "def", "get_config", "(", "model", ",", "fake", "=", "False", ")", ":", "\n", "    ", "nr_tower", "=", "max", "(", "get_num_gpu", "(", ")", ",", "1", ")", "\n", "assert", "args", ".", "batch", "%", "nr_tower", "==", "0", "\n", "batch", "=", "args", ".", "batch", "//", "nr_tower", "\n", "\n", "if", "fake", ":", "\n", "        ", "logger", ".", "info", "(", "\"For benchmark, batch size is fixed to 64 per tower.\"", ")", "\n", "dataset_train", "=", "FakeData", "(", "\n", "[", "[", "64", ",", "224", ",", "224", ",", "3", "]", ",", "[", "64", "]", "]", ",", "1000", ",", "random", "=", "False", ",", "dtype", "=", "'uint8'", ")", "\n", "callbacks", "=", "[", "]", "\n", "steps_per_epoch", "=", "100", "\n", "", "else", ":", "\n", "        ", "logger", ".", "info", "(", "\"Running on {} towers. Batch size per tower: {}\"", ".", "format", "(", "nr_tower", ",", "batch", ")", ")", "\n", "\n", "dataset_train", "=", "get_imagenet_dataflow", "(", "args", ".", "data", ",", "'train'", ",", "batch", ")", "\n", "dataset_val", "=", "get_imagenet_dataflow", "(", "args", ".", "data", ",", "'val'", ",", "min", "(", "64", ",", "batch", ")", ")", "\n", "steps_per_epoch", "=", "1281167", "//", "args", ".", "batch", "\n", "\n", "BASE_LR", "=", "0.1", "*", "args", ".", "batch", "/", "256.0", "\n", "logger", ".", "info", "(", "\"BASELR: {}\"", ".", "format", "(", "BASE_LR", ")", ")", "\n", "callbacks", "=", "[", "\n", "ModelSaver", "(", ")", ",", "\n", "EstimatedTimeLeft", "(", ")", ",", "\n", "GPUUtilizationTracker", "(", ")", ",", "\n", "ScheduledHyperParamSetter", "(", "\n", "'learning_rate'", ",", "[", "(", "0", ",", "BASE_LR", ")", ",", "(", "30", ",", "BASE_LR", "*", "1e-1", ")", ",", "(", "60", ",", "BASE_LR", "*", "1e-2", ")", ",", "\n", "(", "90", ",", "BASE_LR", "*", "1e-3", ")", "]", ")", ",", "\n", "]", "\n", "if", "BASE_LR", ">", "0.1", ":", "\n", "            ", "callbacks", ".", "append", "(", "\n", "ScheduledHyperParamSetter", "(", "\n", "'learning_rate'", ",", "[", "(", "0", ",", "0.1", ")", ",", "(", "5", "*", "steps_per_epoch", ",", "BASE_LR", ")", "]", ",", "\n", "interp", "=", "'linear'", ",", "step_based", "=", "True", ")", ")", "\n", "\n", "", "infs", "=", "[", "ClassificationError", "(", "'wrong-top1'", ",", "'val-error-top1'", ")", ",", "\n", "ClassificationError", "(", "'wrong-top5'", ",", "'val-error-top5'", ")", "]", "\n", "if", "nr_tower", "==", "1", ":", "\n", "# single-GPU inference with queue prefetch", "\n", "            ", "callbacks", ".", "append", "(", "InferenceRunner", "(", "QueueInput", "(", "dataset_val", ")", ",", "infs", ")", ")", "\n", "", "else", ":", "\n", "# multi-GPU inference (with mandatory queue prefetch)", "\n", "            ", "callbacks", ".", "append", "(", "DataParallelInferenceRunner", "(", "\n", "dataset_val", ",", "infs", ",", "list", "(", "range", "(", "nr_tower", ")", ")", ")", ")", "\n", "\n", "", "", "return", "TrainConfig", "(", "\n", "model", "=", "model", ",", "\n", "dataflow", "=", "dataset_train", ",", "\n", "callbacks", "=", "callbacks", ",", "\n", "steps_per_epoch", "=", "steps_per_epoch", ",", "\n", "max_epoch", "=", "100", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-TensorFlow.imagenet_utils.ImageNetModel.inputs": [[166, 169], ["tensorflow.TensorSpec", "tensorflow.TensorSpec"], "methods", ["None"], ["def", "inputs", "(", "self", ")", ":", "\n", "        ", "return", "[", "tf", ".", "TensorSpec", "(", "[", "None", ",", "self", ".", "image_shape", ",", "self", ".", "image_shape", ",", "3", "]", ",", "self", ".", "image_dtype", ",", "'input'", ")", ",", "\n", "tf", ".", "TensorSpec", "(", "[", "None", "]", ",", "tf", ".", "int32", ",", "'label'", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-TensorFlow.imagenet_utils.ImageNetModel.build_graph": [[170, 195], ["imagenet_utils.ImageNetModel.image_preprocess", "imagenet_utils.ImageNetModel.get_logits", "imagenet_utils.ImageNetModel.compute_loss_and_error", "tensorflow.transpose", "tensorpack.models.regularize_cost", "tensorpack.tfutils.summary.add_moving_summary", "tensorflow.add_n", "tensorflow.identity", "tensorpack.tfutils.summary.add_moving_summary", "tensorpack.utils.logger.info", "tensorflow.contrib.layers.l2_regularizer"], "methods", ["home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-TensorFlow.imagenet_utils.ImageNetModel.image_preprocess", "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-TensorFlow.imagenet_utils.ImageNetModel.get_logits", "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-TensorFlow.imagenet_utils.ImageNetModel.compute_loss_and_error"], ["", "def", "build_graph", "(", "self", ",", "image", ",", "label", ")", ":", "\n", "        ", "image", "=", "self", ".", "image_preprocess", "(", "image", ")", "\n", "assert", "self", ".", "data_format", "in", "[", "'NCHW'", ",", "'NHWC'", "]", "\n", "if", "self", ".", "data_format", "==", "'NCHW'", ":", "\n", "            ", "image", "=", "tf", ".", "transpose", "(", "image", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "\n", "", "logits", "=", "self", ".", "get_logits", "(", "image", ")", "\n", "loss", "=", "ImageNetModel", ".", "compute_loss_and_error", "(", "\n", "logits", ",", "label", ",", "label_smoothing", "=", "self", ".", "label_smoothing", ")", "\n", "\n", "if", "self", ".", "weight_decay", ">", "0", ":", "\n", "            ", "wd_loss", "=", "regularize_cost", "(", "self", ".", "weight_decay_pattern", ",", "\n", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "self", ".", "weight_decay", ")", ",", "\n", "name", "=", "'l2_regularize_loss'", ")", "\n", "add_moving_summary", "(", "loss", ",", "wd_loss", ")", "\n", "total_cost", "=", "tf", ".", "add_n", "(", "[", "loss", ",", "wd_loss", "]", ",", "name", "=", "'cost'", ")", "\n", "", "else", ":", "\n", "            ", "total_cost", "=", "tf", ".", "identity", "(", "loss", ",", "name", "=", "'cost'", ")", "\n", "add_moving_summary", "(", "total_cost", ")", "\n", "\n", "", "if", "self", ".", "loss_scale", "!=", "1.", ":", "\n", "            ", "logger", ".", "info", "(", "\"Scaling the total loss by {} ...\"", ".", "format", "(", "self", ".", "loss_scale", ")", ")", "\n", "return", "total_cost", "*", "self", ".", "loss_scale", "\n", "", "else", ":", "\n", "            ", "return", "total_cost", "\n", "\n"]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-TensorFlow.imagenet_utils.ImageNetModel.get_logits": [[196, 205], ["None"], "methods", ["None"], ["", "", "@", "abstractmethod", "\n", "def", "get_logits", "(", "self", ",", "image", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            image: 4D tensor of ``self.input_shape`` in ``self.data_format``\n\n        Returns:\n            Nx#class logits\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-TensorFlow.imagenet_utils.ImageNetModel.optimizer": [[206, 210], ["tensorflow.get_variable", "tensorflow.summary.scalar", "tensorflow.train.MomentumOptimizer"], "methods", ["None"], ["", "def", "optimizer", "(", "self", ")", ":", "\n", "        ", "lr", "=", "tf", ".", "get_variable", "(", "'learning_rate'", ",", "initializer", "=", "0.1", ",", "trainable", "=", "False", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'learning_rate-summary'", ",", "lr", ")", "\n", "return", "tf", ".", "train", ".", "MomentumOptimizer", "(", "lr", ",", "0.9", ",", "use_nesterov", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-TensorFlow.imagenet_utils.ImageNetModel.image_preprocess": [[211, 224], ["tensorflow.name_scope", "tensorflow.cast", "tensorflow.constant", "tensorflow.constant"], "methods", ["None"], ["", "def", "image_preprocess", "(", "self", ",", "image", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'image_preprocess'", ")", ":", "\n", "            ", "if", "image", ".", "dtype", ".", "base_dtype", "!=", "tf", ".", "float32", ":", "\n", "                ", "image", "=", "tf", ".", "cast", "(", "image", ",", "tf", ".", "float32", ")", "\n", "", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "# rgb", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "if", "self", ".", "image_bgr", ":", "\n", "                ", "mean", "=", "mean", "[", ":", ":", "-", "1", "]", "\n", "std", "=", "std", "[", ":", ":", "-", "1", "]", "\n", "", "image_mean", "=", "tf", ".", "constant", "(", "mean", ",", "dtype", "=", "tf", ".", "float32", ")", "*", "255.", "\n", "image_std", "=", "tf", ".", "constant", "(", "std", ",", "dtype", "=", "tf", ".", "float32", ")", "*", "255.", "\n", "image", "=", "(", "image", "-", "image_mean", ")", "/", "image_std", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-TensorFlow.imagenet_utils.ImageNetModel.compute_loss_and_error": [[225, 247], ["tensorflow.reduce_mean", "imagenet_utils.ImageNetModel.compute_loss_and_error.prediction_incorrect"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "compute_loss_and_error", "(", "logits", ",", "label", ",", "label_smoothing", "=", "0.", ")", ":", "\n", "        ", "if", "label_smoothing", "==", "0.", ":", "\n", "            ", "loss", "=", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "logits", "=", "logits", ",", "labels", "=", "label", ")", "\n", "", "else", ":", "\n", "            ", "nclass", "=", "logits", ".", "shape", "[", "-", "1", "]", "\n", "loss", "=", "tf", ".", "losses", ".", "softmax_cross_entropy", "(", "\n", "tf", ".", "one_hot", "(", "label", ",", "nclass", ")", ",", "\n", "logits", ",", "label_smoothing", "=", "label_smoothing", ")", "\n", "", "loss", "=", "tf", ".", "reduce_mean", "(", "loss", ",", "name", "=", "'xentropy-loss'", ")", "\n", "\n", "def", "prediction_incorrect", "(", "logits", ",", "label", ",", "topk", "=", "1", ",", "name", "=", "'incorrect_vector'", ")", ":", "\n", "            ", "with", "tf", ".", "name_scope", "(", "'prediction_incorrect'", ")", ":", "\n", "                ", "x", "=", "tf", ".", "logical_not", "(", "tf", ".", "nn", ".", "in_top_k", "(", "logits", ",", "label", ",", "topk", ")", ")", "\n", "", "return", "tf", ".", "cast", "(", "x", ",", "tf", ".", "float32", ",", "name", "=", "name", ")", "\n", "\n", "", "wrong", "=", "prediction_incorrect", "(", "logits", ",", "label", ",", "1", ",", "name", "=", "'wrong-top1'", ")", "\n", "add_moving_summary", "(", "tf", ".", "reduce_mean", "(", "wrong", ",", "name", "=", "'train-error-top1'", ")", ")", "\n", "\n", "wrong", "=", "prediction_incorrect", "(", "logits", ",", "label", ",", "5", ",", "name", "=", "'wrong-top5'", ")", "\n", "add_moving_summary", "(", "tf", ".", "reduce_mean", "(", "wrong", ",", "name", "=", "'train-error-top5'", ")", ")", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-TensorFlow.imagenet_utils.fbresnet_augmentor": [[32, 63], ["tensorpack.dataflow.imgaug.GoogleNetRandomCropAndResize", "tensorpack.dataflow.imgaug.Flip", "tensorpack.dataflow.imgaug.ToFloat32", "tensorpack.dataflow.imgaug.RandomOrderAug", "tensorpack.dataflow.imgaug.ResizeShortestEdge", "tensorpack.dataflow.imgaug.CenterCrop", "tensorpack.dataflow.imgaug.ToFloat32", "tensorpack.dataflow.imgaug.BrightnessScale", "tensorpack.dataflow.imgaug.Contrast", "tensorpack.dataflow.imgaug.Saturation", "tensorpack.dataflow.imgaug.Lighting", "numpy.asarray", "numpy.array"], "function", ["None"], ["def", "fbresnet_augmentor", "(", "isTrain", ")", ":", "\n", "    ", "\"\"\"\n    Augmentor used in fb.resnet.torch, for BGR images in range [0,255].\n    \"\"\"", "\n", "if", "isTrain", ":", "\n", "        ", "augmentors", "=", "[", "\n", "imgaug", ".", "GoogleNetRandomCropAndResize", "(", ")", ",", "\n", "imgaug", ".", "Flip", "(", "horiz", "=", "True", ")", ",", "\n", "imgaug", ".", "ToFloat32", "(", ")", ",", "\n", "imgaug", ".", "RandomOrderAug", "(", "\n", "[", "imgaug", ".", "BrightnessScale", "(", "(", "0.6", ",", "1.4", ")", ",", "clip", "=", "False", ")", ",", "\n", "imgaug", ".", "Contrast", "(", "(", "0.6", ",", "1.4", ")", ",", "rgb", "=", "False", ",", "clip", "=", "False", ")", ",", "\n", "imgaug", ".", "Saturation", "(", "0.4", ",", "rgb", "=", "False", ")", ",", "\n", "# rgb-bgr conversion for the constants copied from fb.resnet.torch", "\n", "imgaug", ".", "Lighting", "(", "0.1", ",", "\n", "eigval", "=", "np", ".", "asarray", "(", "\n", "[", "0.2175", ",", "0.0188", ",", "0.0045", "]", "[", ":", ":", "-", "1", "]", ")", "*", "255.0", ",", "\n", "eigvec", "=", "np", ".", "array", "(", "\n", "[", "[", "-", "0.5675", ",", "0.7192", ",", "0.4009", "]", ",", "\n", "[", "-", "0.5808", ",", "-", "0.0045", ",", "-", "0.8140", "]", ",", "\n", "[", "-", "0.5836", ",", "-", "0.6948", ",", "0.4203", "]", "]", ",", "\n", "dtype", "=", "'float32'", ")", "[", ":", ":", "-", "1", ",", ":", ":", "-", "1", "]", "\n", ")", "]", ")", ",", "\n", "]", "\n", "", "else", ":", "\n", "        ", "augmentors", "=", "[", "\n", "imgaug", ".", "ResizeShortestEdge", "(", "256", ",", "cv2", ".", "INTER_LINEAR", ")", ",", "\n", "imgaug", ".", "CenterCrop", "(", "(", "224", ",", "224", ")", ")", ",", "\n", "imgaug", ".", "ToFloat32", "(", ")", ",", "\n", "]", "\n", "", "return", "augmentors", "\n", "\n"]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-TensorFlow.imagenet_utils.get_imagenet_dataflow": [[65, 100], ["isinstance", "tensorpack.dataflow.imgaug.AugmentorList", "imagenet_utils.fbresnet_augmentor", "min", "cv2.imread", "fbresnet_augmentor.augment", "tensorpack.dataflow.dataset.ILSVRC12Files", "MultiProcessMapDataZMQ", "tensorpack.dataflow.BatchData", "tensorpack.dataflow.dataset.ILSVRC12Files", "tensorpack.dataflow.MultiThreadMapData", "tensorpack.dataflow.BatchData", "tensorpack.dataflow.MultiProcessRunnerZMQ", "multiprocessing.cpu_count"], "function", ["home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-TensorFlow.imagenet_utils.fbresnet_augmentor"], ["", "def", "get_imagenet_dataflow", "(", "\n", "datadir", ",", "name", ",", "batch_size", ",", "\n", "augmentors", "=", "None", ",", "parallel", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        augmentors (list[imgaug.Augmentor]): Defaults to `fbresnet_augmentor(isTrain)`\n\n    Returns: A DataFlow which produces BGR images and labels.\n    \"\"\"", "\n", "assert", "name", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", "\n", "isTrain", "=", "name", "==", "'train'", "\n", "assert", "datadir", "is", "not", "None", "\n", "if", "augmentors", "is", "None", ":", "\n", "        ", "augmentors", "=", "fbresnet_augmentor", "(", "isTrain", ")", "\n", "", "assert", "isinstance", "(", "augmentors", ",", "list", ")", "\n", "augmentors", "=", "AugmentorList", "(", "augmentors", ")", "\n", "if", "parallel", "is", "None", ":", "\n", "        ", "parallel", "=", "min", "(", "40", ",", "multiprocessing", ".", "cpu_count", "(", ")", "//", "2", ")", "# assuming hyperthreading", "\n", "\n", "", "def", "mapf", "(", "dp", ")", ":", "\n", "        ", "fname", ",", "label", "=", "dp", "\n", "img", "=", "cv2", ".", "imread", "(", "fname", ")", "\n", "img", "=", "augmentors", ".", "augment", "(", "img", ")", "\n", "return", "img", ",", "label", "\n", "\n", "", "if", "isTrain", ":", "\n", "        ", "ds", "=", "dataset", ".", "ILSVRC12Files", "(", "datadir", ",", "name", ",", "shuffle", "=", "True", ")", "\n", "ds", "=", "MultiProcessMapDataZMQ", "(", "ds", ",", "parallel", ",", "mapf", ",", "buffer_size", "=", "2000", ")", "\n", "ds", "=", "BatchData", "(", "ds", ",", "batch_size", ",", "remainder", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "ds", "=", "dataset", ".", "ILSVRC12Files", "(", "datadir", ",", "name", ",", "shuffle", "=", "False", ")", "\n", "ds", "=", "MultiThreadMapData", "(", "ds", ",", "parallel", ",", "mapf", ",", "buffer_size", "=", "2000", ",", "strict", "=", "True", ")", "\n", "ds", "=", "BatchData", "(", "ds", ",", "batch_size", ",", "remainder", "=", "True", ")", "\n", "ds", "=", "MultiProcessRunnerZMQ", "(", "ds", ",", "1", ")", "\n", "", "return", "ds", "\n", "\n"]], "home.repos.pwc.inspect_result.ppwwyyxx_GroupNorm-reproduce.ImageNet-ResNet-TensorFlow.imagenet_utils.eval_on_ILSVRC12": [[107, 127], ["tensorpack.predict.PredictConfig", "tensorpack.predict.FeedfreePredictor", "tqdm.trange", "print", "print", "tensorpack.utils.stats.RatioCounter", "tensorpack.utils.stats.RatioCounter", "tensorpack.input_source.StagingInput", "dataflow.size", "tensorpack.predict.FeedfreePredictor.", "acc1.feed", "acc5.feed", "tensorpack.input_source.QueueInput", "top1.sum", "top5.sum"], "function", ["None"], ["def", "eval_on_ILSVRC12", "(", "model", ",", "sessinit", ",", "dataflow", ")", ":", "\n", "    ", "pred_config", "=", "PredictConfig", "(", "\n", "model", "=", "model", ",", "\n", "session_init", "=", "sessinit", ",", "\n", "input_names", "=", "[", "'input'", ",", "'label'", "]", ",", "\n", "output_names", "=", "[", "'wrong-top1'", ",", "'wrong-top5'", "]", "\n", ")", "\n", "acc1", ",", "acc5", "=", "RatioCounter", "(", ")", ",", "RatioCounter", "(", ")", "\n", "\n", "# This does not have a visible improvement over naive predictor,", "\n", "# but will have an improvement if image_dtype is set to float32.", "\n", "pred", "=", "FeedfreePredictor", "(", "pred_config", ",", "StagingInput", "(", "QueueInput", "(", "dataflow", ")", ",", "device", "=", "'/gpu:0'", ")", ")", "\n", "for", "_", "in", "tqdm", ".", "trange", "(", "dataflow", ".", "size", "(", ")", ")", ":", "\n", "        ", "top1", ",", "top5", "=", "pred", "(", ")", "\n", "batch_size", "=", "top1", ".", "shape", "[", "0", "]", "\n", "acc1", ".", "feed", "(", "top1", ".", "sum", "(", ")", ",", "batch_size", ")", "\n", "acc5", ".", "feed", "(", "top5", ".", "sum", "(", ")", ",", "batch_size", ")", "\n", "\n", "", "print", "(", "\"Top1 Error: {}\"", ".", "format", "(", "acc1", ".", "ratio", ")", ")", "\n", "print", "(", "\"Top5 Error: {}\"", ".", "format", "(", "acc5", ".", "ratio", ")", ")", "\n", "\n"]]}