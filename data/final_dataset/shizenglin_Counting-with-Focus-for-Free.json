{"home.repos.pwc.inspect_result.shizenglin_Counting-with-Focus-for-Free.code.model.counting_model.__init__": [[12, 39], ["model.counting_model.build_model"], "methods", ["home.repos.pwc.inspect_result.shizenglin_Counting-with-Focus-for-Free.code.model.counting_model.build_model"], ["    ", "def", "__init__", "(", "self", ",", "sess", ",", "param_set", ")", ":", "\n", "        ", "self", ".", "sess", "=", "sess", "\n", "self", ".", "phase", "=", "param_set", "[", "'phase'", "]", "\n", "self", ".", "batch_size", "=", "param_set", "[", "'batch_size'", "]", "\n", "self", ".", "inputI_width_size", "=", "param_set", "[", "'inputI_width_size'", "]", "\n", "self", ".", "inputI_height_size", "=", "param_set", "[", "'inputI_height_size'", "]", "\n", "self", ".", "inputI_chn", "=", "param_set", "[", "'inputI_chn'", "]", "\n", "self", ".", "output_chn", "=", "param_set", "[", "'output_chn'", "]", "\n", "self", ".", "trainImagePath", "=", "param_set", "[", "'trainImagePath'", "]", "\n", "self", ".", "trainDmapPath", "=", "param_set", "[", "'trainDmapPath'", "]", "\n", "self", ".", "trainPmapPath", "=", "param_set", "[", "'trainPmapPath'", "]", "\n", "self", ".", "testImagePath", "=", "param_set", "[", "'testImagePath'", "]", "\n", "self", ".", "testDmapPath", "=", "param_set", "[", "'testDmapPath'", "]", "\n", "self", ".", "testPmapPath", "=", "param_set", "[", "'testPmapPath'", "]", "\n", "self", ".", "chkpoint_dir", "=", "param_set", "[", "'chkpoint_dir'", "]", "\n", "self", ".", "lr", "=", "param_set", "[", "'learning_rate'", "]", "\n", "self", ".", "beta1", "=", "param_set", "[", "'beta1'", "]", "\n", "self", ".", "epoch", "=", "param_set", "[", "'epoch'", "]", "\n", "self", ".", "model_name", "=", "param_set", "[", "'model_name'", "]", "\n", "self", ".", "save_intval", "=", "param_set", "[", "'save_intval'", "]", "\n", "self", ".", "labeling_dir", "=", "param_set", "[", "'labeling_dir'", "]", "\n", "self", ".", "result_dir", "=", "param_set", "[", "'result_dir'", "]", "\n", "self", ".", "log_dir", "=", "param_set", "[", "'log_dir'", "]", "\n", "self", ".", "density_level", "=", "param_set", "[", "'density_level'", "]", "\n", "self", ".", "inputI_size", "=", "[", "self", ".", "inputI_width_size", ",", "self", ".", "inputI_height_size", "]", "\n", "# build model graph", "\n", "self", ".", "build_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shizenglin_Counting-with-Focus-for-Free.code.model.counting_model.focal_loss_num_func": [[41, 56], ["tf.one_hot", "tf.nn.softmax", "range", "tf.reduce_mean", "tf.log", "tf.pow", "tf.clip_by_value"], "methods", ["None"], ["", "def", "focal_loss_num_func", "(", "self", ",", "logits", ",", "labels", ",", "alpha", "=", "0.25", ",", "gamma", "=", "2.0", ")", ":", "\n", "        ", "\"\"\"\n        Loss = weighted * -target*log(softmax(logits))\n        :param logits: probability score\n        :param labels: ground_truth\n        :return: softmax-weighted loss\n        \"\"\"", "\n", "gt", "=", "tf", ".", "one_hot", "(", "labels", ",", "self", ".", "density_level", ")", "\n", "softmaxpred", "=", "tf", ".", "nn", ".", "softmax", "(", "logits", ")", "\n", "loss", "=", "0", "\n", "for", "i", "in", "range", "(", "self", ".", "density_level", ")", ":", "\n", "            ", "gti", "=", "gt", "[", ":", ",", "i", "]", "\n", "predi", "=", "softmaxpred", "[", ":", ",", "i", "]", "\n", "loss", "=", "loss", "+", "tf", ".", "reduce_mean", "(", "gti", "*", "tf", ".", "pow", "(", "1", "-", "predi", ",", "gamma", ")", "*", "tf", ".", "log", "(", "tf", ".", "clip_by_value", "(", "predi", ",", "0.005", ",", "1", ")", ")", ")", "\n", "", "return", "-", "loss", "/", "self", ".", "density_level", "\n", "\n"]], "home.repos.pwc.inspect_result.shizenglin_Counting-with-Focus-for-Free.code.model.counting_model.focal_loss_func": [[58, 74], ["tf.one_hot", "tf.nn.softmax", "range", "tf.reduce_mean", "tf.reduce_sum", "tf.reduce_sum", "tf.log", "tf.pow", "tf.clip_by_value"], "methods", ["None"], ["", "def", "focal_loss_func", "(", "self", ",", "logits", ",", "labels", ",", "alpha", "=", "0.25", ",", "gamma", "=", "2.0", ")", ":", "\n", "        ", "\"\"\"\n        Loss = weighted * -target*log(softmax(logits))\n        :param logits: probability score\n        :param labels: ground_truth\n        :return: softmax-weighted loss\n        \"\"\"", "\n", "gt", "=", "tf", ".", "one_hot", "(", "labels", ",", "2", ")", "\n", "softmaxpred", "=", "tf", ".", "nn", ".", "softmax", "(", "logits", ")", "\n", "loss", "=", "0", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "gti", "=", "gt", "[", ":", ",", ":", ",", ":", ",", "i", "]", "\n", "predi", "=", "softmaxpred", "[", ":", ",", ":", ",", ":", ",", "i", "]", "\n", "weighted", "=", "1", "-", "(", "tf", ".", "reduce_sum", "(", "gti", ")", "/", "tf", ".", "reduce_sum", "(", "gt", ")", ")", "\n", "loss", "=", "loss", "+", "tf", ".", "reduce_mean", "(", "weighted", "*", "gti", "*", "tf", ".", "pow", "(", "1", "-", "predi", ",", "gamma", ")", "*", "tf", ".", "log", "(", "tf", ".", "clip_by_value", "(", "predi", ",", "0.005", ",", "1", ")", ")", ")", "\n", "", "return", "-", "loss", "/", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.shizenglin_Counting-with-Focus-for-Free.code.model.counting_model.l1_loss": [[75, 91], ["tf.abs", "tf.truediv", "tf.subtract", "tf.multiply", "tf.reduce_sum", "tf.reduce_sum", "tf.reduce_sum", "tf.size", "tf.cast", "tf.cast"], "methods", ["None"], ["", "def", "l1_loss", "(", "self", ",", "prediction", ",", "ground_truth", ",", "weight_map", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param prediction: the current prediction of the ground truth.\n        :param ground_truth: the measurement you are approximating with regression.\n        :return: mean of the l1 loss.\n        \"\"\"", "\n", "absolute_residuals", "=", "tf", ".", "abs", "(", "tf", ".", "subtract", "(", "prediction", "[", ":", ",", ":", ",", ":", ",", "0", "]", ",", "ground_truth", ")", ")", "\n", "if", "weight_map", "is", "not", "None", ":", "\n", "            ", "absolute_residuals", "=", "tf", ".", "multiply", "(", "absolute_residuals", ",", "weight_map", ")", "\n", "sum_residuals", "=", "tf", ".", "reduce_sum", "(", "absolute_residuals", ")", "\n", "sum_weights", "=", "tf", ".", "reduce_sum", "(", "weight_map", ")", "\n", "", "else", ":", "\n", "            ", "sum_residuals", "=", "tf", ".", "reduce_sum", "(", "absolute_residuals", ")", "\n", "sum_weights", "=", "tf", ".", "size", "(", "absolute_residuals", ")", "\n", "", "return", "tf", ".", "truediv", "(", "tf", ".", "cast", "(", "sum_residuals", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "tf", ".", "cast", "(", "sum_weights", ",", "dtype", "=", "tf", ".", "float32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shizenglin_Counting-with-Focus-for-Free.code.model.counting_model.l2_loss": [[93, 105], ["tf.subtract", "tf.nn.l2_loss", "tf.size", "tf.truediv", "tf.cast", "tf.cast"], "methods", ["home.repos.pwc.inspect_result.shizenglin_Counting-with-Focus-for-Free.code.model.counting_model.l2_loss"], ["", "def", "l2_loss", "(", "self", ",", "prediction", ",", "ground_truth", ")", ":", "\n", "        ", "\"\"\"\n        :param prediction: the current prediction of the ground truth.\n        :param ground_truth: the measurement you are approximating with regression.\n        :return: sum(differences squared) / 2 - Note, no square root\n        \"\"\"", "\n", "\n", "residuals", "=", "tf", ".", "subtract", "(", "prediction", "[", ":", ",", ":", ",", ":", ",", "0", "]", ",", "ground_truth", ")", "\n", "sum_residuals", "=", "tf", ".", "nn", ".", "l2_loss", "(", "residuals", ")", "\n", "sum_weights", "=", "tf", ".", "size", "(", "residuals", ")", "\n", "return", "tf", ".", "truediv", "(", "tf", ".", "cast", "(", "sum_residuals", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "tf", ".", "cast", "(", "sum_weights", ",", "dtype", "=", "tf", ".", "float32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shizenglin_Counting-with-Focus-for-Free.code.model.counting_model.seg_dice": [[107, 120], ["numpy.unique", "range", "len", "numpy.sum", "dice_c.append", "numpy.sum"], "methods", ["None"], ["", "def", "seg_dice", "(", "self", ",", "move_img", ",", "refer_img", ")", ":", "\n", "# list of classes", "\n", "        ", "c_list", "=", "np", ".", "unique", "(", "refer_img", ")", "\n", "\n", "dice_c", "=", "[", "]", "\n", "for", "c", "in", "range", "(", "len", "(", "c_list", ")", ")", ":", "\n", "# intersection", "\n", "            ", "ints", "=", "np", ".", "sum", "(", "(", "(", "move_img", "==", "c_list", "[", "c", "]", ")", "*", "1", ")", "*", "(", "(", "refer_img", "==", "c_list", "[", "c", "]", ")", "*", "1", ")", ")", "\n", "# sum", "\n", "sums", "=", "np", ".", "sum", "(", "(", "(", "move_img", "==", "c_list", "[", "c", "]", ")", "*", "1", ")", "+", "(", "(", "refer_img", "==", "c_list", "[", "c", "]", ")", "*", "1", ")", ")", "+", "0.0001", "\n", "dice_c", ".", "append", "(", "(", "2.0", "*", "ints", ")", "/", "sums", ")", "\n", "\n", "", "return", "dice_c", "\n", "\n"]], "home.repos.pwc.inspect_result.shizenglin_Counting-with-Focus-for-Free.code.model.counting_model.build_model": [[122, 148], ["tf.placeholder", "tf.placeholder", "tf.placeholder", "tf.placeholder", "print", "model.counting_model.focus_network", "model.counting_model.focal_loss_num_func", "tf.trainable_variables", "tf.train.Saver", "model.counting_model.l2_loss", "model.counting_model.focal_loss_func", "model.counting_model.l1_loss"], "methods", ["home.repos.pwc.inspect_result.shizenglin_Counting-with-Focus-for-Free.code.model.counting_model.focus_network", "home.repos.pwc.inspect_result.shizenglin_Counting-with-Focus-for-Free.code.model.counting_model.focal_loss_num_func", "home.repos.pwc.inspect_result.shizenglin_Counting-with-Focus-for-Free.code.model.counting_model.l2_loss", "home.repos.pwc.inspect_result.shizenglin_Counting-with-Focus-for-Free.code.model.counting_model.focal_loss_func", "home.repos.pwc.inspect_result.shizenglin_Counting-with-Focus-for-Free.code.model.counting_model.l1_loss"], ["", "def", "build_model", "(", "self", ")", ":", "\n", "# input", "\n", "        ", "self", ".", "input_Img", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "None", ",", "None", ",", "self", ".", "inputI_chn", "]", ",", "name", "=", "'input_Img'", ")", "\n", "self", ".", "input_Dmap", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "None", ",", "None", "]", ",", "name", "=", "'input_Dmap'", ")", "\n", "self", ".", "input_Pmap", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "None", ",", "None", "]", ",", "name", "=", "'input_Pmap'", ")", "\n", "self", ".", "input_num", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ",", "name", "=", "'input_num'", ")", "\n", "\n", "print", "(", "'Model:'", "+", "self", ".", "model_name", ")", "\n", "self", ".", "pred_pprob", ",", "self", ".", "soft_pprob", ",", "self", ".", "pred_plabel", ",", "self", ".", "pred_dprob", ",", "self", ".", "pred_num", "=", "self", ".", "focus_network", "(", "self", ".", "input_Img", ")", "\n", "\n", "# =========density estimation loss=========", "\n", "self", ".", "density_loss", "=", "10", "*", "self", ".", "l1_loss", "(", "self", ".", "pred_dprob", ",", "self", ".", "input_Dmap", ")", "+", "self", ".", "l2_loss", "(", "self", ".", "pred_dprob", ",", "self", ".", "input_Dmap", ")", "\n", "# =========segmentation loss=========", "\n", "self", ".", "segment_loss", "=", "10", "*", "self", ".", "focal_loss_func", "(", "self", ".", "pred_pprob", ",", "self", ".", "input_Pmap", ")", "\n", "# =========global density prediction loss=========", "\n", "self", ".", "global_density_loss", "=", "self", ".", "focal_loss_num_func", "(", "self", ".", "pred_num", ",", "self", ".", "input_num", ")", "\n", "# =========density estimation loss=========", "\n", "self", ".", "total_loss", "=", "self", ".", "density_loss", "+", "self", ".", "segment_loss", "+", "self", ".", "global_density_loss", "\n", "\n", "#tf.summary.scalar('training_loss',self.total_loss)", "\n", "\n", "# trainable variables", "\n", "self", ".", "u_vars", "=", "tf", ".", "trainable_variables", "(", ")", "\n", "\n", "# create model saver", "\n", "self", ".", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "max_to_keep", "=", "1000", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shizenglin_Counting-with-Focus-for-Free.code.model.counting_model.focus_network": [[149, 242], ["conv_bn_relu", "print", "print", "bottleneck_block", "print", "print", "bottleneck_block", "print", "print", "bottleneck_block", "bottleneck_block", "print", "print", "bottleneck_block", "bottleneck_block", "print", "print", "bottleneck_block", "bottleneck_block", "print", "print", "bottleneck_block", "bottleneck_block", "print", "print", "bottleneck_block", "bottleneck_block", "print", "print", "bottleneck_block", "bottleneck_block", "print", "print", "tf.concat", "conv_bn_relu_x2", "conv_bn_relu_x2", "print", "print", "deconv_bn_relu", "conv_bn_relu_x2", "print", "print", "deconv_bn_relu", "conv_bn_relu_x2", "print", "print", "deconv_bn_relu", "conv_bn_relu", "print", "print", "conv2d", "tf.nn.softmax", "tf.argmax", "bilinear_pooling", "tf.layers.dense", "tf.layers.dense", "tf.sigmoid", "couple_map", "conv2d", "conv_bn_relu.get_shape", "bottleneck_block.get_shape", "bottleneck_block.get_shape", "bottleneck_block.get_shape", "bottleneck_block.get_shape", "bottleneck_block.get_shape", "bottleneck_block.get_shape", "bottleneck_block.get_shape", "bottleneck_block.get_shape", "conv_bn_relu_x2.get_shape", "conv_bn_relu_x2.get_shape", "conv_bn_relu_x2.get_shape", "conv_bn_relu.get_shape", "tf.stop_gradient"], "methods", ["None"], ["", "def", "focus_network", "(", "self", ",", "inputI", ")", ":", "\n", "        ", "phase_flag", "=", "True", "\n", "concat_dim", "=", "3", "\n", "#***************encoder level0***************        ", "\n", "conv1", "=", "conv_bn_relu", "(", "input", "=", "inputI", ",", "output_chn", "=", "16", ",", "kernel_size", "=", "7", ",", "stride", "=", "1", ",", "dilation", "=", "(", "1", ",", "1", ")", ",", "use_bias", "=", "False", ",", "is_training", "=", "phase_flag", ",", "name", "=", "'conv1'", ")", "\n", "print", "(", "\"output of encoder level0:\"", ")", "\n", "print", "(", "conv1", ".", "get_shape", "(", ")", ")", "\n", "\n", "#***************encoder level1***************        ", "\n", "res_block1", "=", "bottleneck_block", "(", "input", "=", "conv1", ",", "input_chn", "=", "16", ",", "output_chn", "=", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "(", "1", ",", "1", ")", ",", "use_bias", "=", "False", ",", "is_training", "=", "phase_flag", ",", "name", "=", "'res_block1'", ")", "\n", "print", "(", "\"output of encoder level1:\"", ")", "\n", "print", "(", "res_block1", ".", "get_shape", "(", ")", ")", "\n", "\n", "#*************encoder level2*************** ", "\n", "res_block2", "=", "bottleneck_block", "(", "input", "=", "res_block1", ",", "input_chn", "=", "16", ",", "output_chn", "=", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "dilation", "=", "(", "1", ",", "1", ")", ",", "use_bias", "=", "False", ",", "is_training", "=", "phase_flag", ",", "name", "=", "'res_block2'", ")", "\n", "print", "(", "\"output of encoder level2:\"", ")", "\n", "print", "(", "res_block2", ".", "get_shape", "(", ")", ")", "\n", "\n", "#*************encoder level3*************** ", "\n", "res_block3", "=", "bottleneck_block", "(", "input", "=", "res_block2", ",", "input_chn", "=", "32", ",", "output_chn", "=", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "dilation", "=", "(", "1", ",", "1", ")", ",", "use_bias", "=", "False", ",", "is_training", "=", "phase_flag", ",", "name", "=", "'res_block3'", ")", "\n", "res_block3", "=", "bottleneck_block", "(", "input", "=", "res_block3", ",", "input_chn", "=", "64", ",", "output_chn", "=", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "(", "1", ",", "1", ")", ",", "use_bias", "=", "False", ",", "is_training", "=", "phase_flag", ",", "name", "=", "'res_block3_1'", ")", "\n", "print", "(", "\"output of encoder level3:\"", ")", "\n", "print", "(", "res_block3", ".", "get_shape", "(", ")", ")", "\n", "\n", "#*************encoder level4*************** ", "\n", "res_block4", "=", "bottleneck_block", "(", "input", "=", "res_block3", ",", "input_chn", "=", "64", ",", "output_chn", "=", "96", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "dilation", "=", "(", "1", ",", "1", ")", ",", "use_bias", "=", "False", ",", "is_training", "=", "phase_flag", ",", "name", "=", "'res_block4'", ")", "\n", "res_block4", "=", "bottleneck_block", "(", "input", "=", "res_block4", ",", "input_chn", "=", "96", ",", "output_chn", "=", "96", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "(", "1", ",", "1", ")", ",", "use_bias", "=", "False", ",", "is_training", "=", "phase_flag", ",", "name", "=", "'res_block4_1'", ")", "\n", "print", "(", "\"output of encoder level4:\"", ")", "\n", "print", "(", "res_block4", ".", "get_shape", "(", ")", ")", "\n", "\n", "#*************encoder level5*************** ", "\n", "res_block5", "=", "bottleneck_block", "(", "input", "=", "res_block4", ",", "input_chn", "=", "96", ",", "output_chn", "=", "96", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "(", "2", ",", "2", ")", ",", "use_bias", "=", "False", ",", "is_training", "=", "phase_flag", ",", "name", "=", "'res_block5'", ")", "\n", "res_block5", "=", "bottleneck_block", "(", "input", "=", "res_block5", ",", "input_chn", "=", "96", ",", "output_chn", "=", "96", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "(", "2", ",", "2", ")", ",", "use_bias", "=", "False", ",", "is_training", "=", "phase_flag", ",", "name", "=", "'res_block5_1'", ")", "\n", "print", "(", "\"output of encoder level5:\"", ")", "\n", "print", "(", "res_block5", ".", "get_shape", "(", ")", ")", "\n", "\n", "#*************encoder level6*************** ", "\n", "res_block6", "=", "bottleneck_block", "(", "input", "=", "res_block5", ",", "input_chn", "=", "96", ",", "output_chn", "=", "96", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "(", "4", ",", "4", ")", ",", "use_bias", "=", "False", ",", "is_training", "=", "phase_flag", ",", "name", "=", "'res_block6'", ")", "\n", "res_block6", "=", "bottleneck_block", "(", "input", "=", "res_block6", ",", "input_chn", "=", "96", ",", "output_chn", "=", "96", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "(", "4", ",", "4", ")", ",", "use_bias", "=", "False", ",", "is_training", "=", "phase_flag", ",", "name", "=", "'res_block6_1'", ")", "\n", "print", "(", "\"output of encoder level6:\"", ")", "\n", "print", "(", "res_block6", ".", "get_shape", "(", ")", ")", "\n", "\n", "#*************decoder level7***************", "\n", "res_block7", "=", "bottleneck_block", "(", "input", "=", "res_block6", ",", "input_chn", "=", "96", ",", "output_chn", "=", "96", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "(", "2", ",", "2", ")", ",", "use_bias", "=", "False", ",", "is_training", "=", "phase_flag", ",", "name", "=", "'res_block7'", ")", "\n", "res_block7", "=", "bottleneck_block", "(", "input", "=", "res_block7", ",", "input_chn", "=", "96", ",", "output_chn", "=", "96", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "(", "2", ",", "2", ")", ",", "use_bias", "=", "False", ",", "is_training", "=", "phase_flag", ",", "name", "=", "'res_block7_1'", ")", "\n", "print", "(", "\"output of decoder level7:\"", ")", "\n", "print", "(", "res_block7", ".", "get_shape", "(", ")", ")", "\n", "\n", "#*************decoder level8***************", "\n", "res_block8", "=", "bottleneck_block", "(", "input", "=", "res_block7", ",", "input_chn", "=", "96", ",", "output_chn", "=", "96", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "(", "1", ",", "1", ")", ",", "use_bias", "=", "False", ",", "is_training", "=", "phase_flag", ",", "name", "=", "'res_block8'", ")", "\n", "res_block8", "=", "bottleneck_block", "(", "input", "=", "res_block8", ",", "input_chn", "=", "96", ",", "output_chn", "=", "96", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "(", "1", ",", "1", ")", ",", "use_bias", "=", "False", ",", "is_training", "=", "phase_flag", ",", "name", "=", "'res_block8_1'", ")", "\n", "print", "(", "\"output of decoder level8:\"", ")", "\n", "print", "(", "res_block8", ".", "get_shape", "(", ")", ")", "\n", "\n", "#*************decoder level9***************", "\n", "concat2", "=", "tf", ".", "concat", "(", "[", "res_block4", ",", "res_block5", ",", "res_block7", ",", "res_block8", "]", ",", "axis", "=", "concat_dim", ",", "name", "=", "'concat2'", ")", "\n", "res_block9", "=", "conv_bn_relu_x2", "(", "input", "=", "concat2", ",", "output_chn", "=", "96", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "(", "1", ",", "1", ")", ",", "use_bias", "=", "False", ",", "is_training", "=", "phase_flag", ",", "name", "=", "'res_block9'", ")", "\n", "res_block9", "=", "conv_bn_relu_x2", "(", "input", "=", "res_block9", ",", "output_chn", "=", "96", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "(", "1", ",", "1", ")", ",", "use_bias", "=", "False", ",", "is_training", "=", "phase_flag", ",", "name", "=", "'res_block9_1'", ")", "\n", "print", "(", "\"output of decoder level9:\"", ")", "\n", "print", "(", "res_block9", ".", "get_shape", "(", ")", ")", "\n", "\n", "#*************decoder level10***************     ", "\n", "deconv1_upsample", "=", "deconv_bn_relu", "(", "input", "=", "res_block9", ",", "output_chn", "=", "64", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "is_training", "=", "phase_flag", ",", "name", "=", "'deconv1_upsample'", ")", "\n", "deconv1_conv1", "=", "conv_bn_relu_x2", "(", "input", "=", "deconv1_upsample", ",", "output_chn", "=", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "(", "1", ",", "1", ")", ",", "use_bias", "=", "False", ",", "is_training", "=", "phase_flag", ",", "name", "=", "'deconv1_conv1'", ")", "\n", "print", "(", "\"output of decoder level10:\"", ")", "\n", "print", "(", "deconv1_conv1", ".", "get_shape", "(", ")", ")", "\n", "\n", "#*************decoder level11***************", "\n", "deconv2_upsample", "=", "deconv_bn_relu", "(", "input", "=", "deconv1_conv1", ",", "output_chn", "=", "32", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "is_training", "=", "phase_flag", ",", "name", "=", "'deconv2_upsample'", ")", "\n", "deconv2_conv1", "=", "conv_bn_relu_x2", "(", "input", "=", "deconv2_upsample", ",", "output_chn", "=", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "(", "1", ",", "1", ")", ",", "use_bias", "=", "False", ",", "is_training", "=", "phase_flag", ",", "name", "=", "'deconv2_conv1'", ")", "\n", "print", "(", "\"output of decoder level11:\"", ")", "\n", "print", "(", "deconv2_conv1", ".", "get_shape", "(", ")", ")", "\n", "\n", "#*************decoder level12***************", "\n", "deconv3_upsample", "=", "deconv_bn_relu", "(", "input", "=", "deconv2_conv1", ",", "output_chn", "=", "16", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "is_training", "=", "phase_flag", ",", "name", "=", "'deconv3_upsample'", ")", "\n", "deconv3_conv1", "=", "conv_bn_relu", "(", "input", "=", "deconv3_upsample", ",", "output_chn", "=", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "(", "1", ",", "1", ")", ",", "use_bias", "=", "False", ",", "is_training", "=", "phase_flag", ",", "name", "=", "'deconv3_conv1'", ")", "\n", "print", "(", "\"output of decoder level12:\"", ")", "\n", "print", "(", "deconv3_conv1", ".", "get_shape", "(", ")", ")", "\n", "\n", "pred_pprob", "=", "conv2d", "(", "input", "=", "deconv3_conv1", ",", "output_chn", "=", "2", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "dilation", "=", "(", "1", ",", "1", ")", ",", "use_bias", "=", "True", ",", "name", "=", "'pred_pprob'", ")", "\n", "soft_pprob", "=", "tf", ".", "nn", ".", "softmax", "(", "pred_pprob", ",", "name", "=", "'soft_pred_pprob'", ")", "\n", "pred_plabel", "=", "tf", ".", "argmax", "(", "soft_pprob", ",", "axis", "=", "3", ",", "name", "=", "'argmax'", ")", "\n", "\n", "pre_bilinear", "=", "bilinear_pooling", "(", "deconv3_conv1", ")", "\n", "pred_number", "=", "tf", ".", "layers", ".", "dense", "(", "pre_bilinear", ",", "self", ".", "density_level", ",", "name", "=", "'pred_number'", ")", "\n", "\n", "num_attention", "=", "tf", ".", "layers", ".", "dense", "(", "pre_bilinear", ",", "16", ",", "name", "=", "'num_attention'", ")", "\n", "soft_num_attention", "=", "tf", ".", "sigmoid", "(", "num_attention", ",", "name", "=", "'soft_num_attention'", ")", "\n", "\n", "pred_dprob_mul", "=", "couple_map", "(", "tf", ".", "stop_gradient", "(", "soft_pprob", ")", ",", "deconv3_conv1", ",", "soft_num_attention", ")", "\n", "pred_dprob", "=", "conv2d", "(", "input", "=", "pred_dprob_mul", ",", "output_chn", "=", "1", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "dilation", "=", "(", "1", ",", "1", ")", ",", "use_bias", "=", "True", ",", "name", "=", "'pred_dprob'", ")", "\n", "\n", "return", "pred_pprob", ",", "soft_pprob", ",", "pred_plabel", ",", "pred_dprob", ",", "pred_number", "\n", "\n"]], "home.repos.pwc.inspect_result.shizenglin_Counting-with-Focus-for-Free.code.model.counting_model.train": [[244, 304], ["tf.train.AdamOptimizer().minimize", "tf.global_variables_initializer", "model.counting_model.sess.run", "open", "model.counting_model.load_chkpoint", "glob.glob.glob", "glob.glob.glob.sort", "glob.glob.glob", "glob.glob.glob.sort", "glob.glob.glob", "glob.glob.glob.sort", "model.counting_model.test_training", "numpy.arange", "time.time", "numpy.arange", "open.close", "print", "open.write", "print", "open.write", "len", "numpy.random.shuffle", "print", "open.write", "open.flush", "model.counting_model.test_training", "time.time", "tf.train.AdamOptimizer", "utils.get_batch_patches", "model.counting_model.sess.run", "model.counting_model.save_chkpoint", "time.time", "len", "time.time", "len"], "methods", ["home.repos.pwc.inspect_result.shizenglin_Counting-with-Focus-for-Free.code.model.counting_model.load_chkpoint", "home.repos.pwc.inspect_result.shizenglin_Counting-with-Focus-for-Free.code.model.counting_model.test_training", "home.repos.pwc.inspect_result.shizenglin_Counting-with-Focus-for-Free.code.model.counting_model.test_training", "home.repos.pwc.inspect_result.shizenglin_Counting-with-Focus-for-Free.code.utils.get_batch_patches", "home.repos.pwc.inspect_result.shizenglin_Counting-with-Focus-for-Free.code.model.counting_model.save_chkpoint"], ["", "def", "train", "(", "self", ")", ":", "\n", "\n", "        ", "u_optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", ".", "minimize", "(", "self", ".", "total_loss", ",", "var_list", "=", "self", ".", "u_vars", ")", "\n", "\n", "# initialization", "\n", "init_op", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "self", ".", "sess", ".", "run", "(", "init_op", ")", "\n", "\n", "#self.merged = tf.summary.merge_all()", "\n", "\n", "# save .log", "\n", "#self.log_writer = tf.summary.FileWriter(self.log_dir, self.sess.graph)", "\n", "log_file", "=", "open", "(", "self", ".", "result_dir", "+", "'/'", "+", "self", ".", "model_name", "+", "\"_log.txt\"", ",", "\"w\"", ")", "\n", "\n", "if", "self", ".", "load_chkpoint", "(", "self", ".", "chkpoint_dir", ")", ":", "\n", "            ", "print", "(", "\" [*] Load SUCCESS\\n\"", ")", "\n", "log_file", ".", "write", "(", "\" [*] Load SUCCESS\\n\"", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\" [!] Load failed...\\n\"", ")", "\n", "log_file", ".", "write", "(", "\" [!] Load failed...\\n\"", ")", "\n", "\n", "", "img_list", "=", "glob", "(", "'{}/*.jpg'", ".", "format", "(", "self", ".", "trainImagePath", ")", ")", "\n", "img_list", ".", "sort", "(", ")", "\n", "dmap_list", "=", "glob", "(", "'{}/*.mat'", ".", "format", "(", "self", ".", "trainDmapPath", ")", ")", "\n", "dmap_list", ".", "sort", "(", ")", "\n", "pmap_list", "=", "glob", "(", "'{}/*.mat'", ".", "format", "(", "self", ".", "trainPmapPath", ")", ")", "\n", "pmap_list", ".", "sort", "(", ")", "\n", "\n", "self", ".", "test_training", "(", "0", ",", "log_file", ")", "\n", "\n", "rand_idx", "=", "np", ".", "arange", "(", "len", "(", "img_list", ")", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "for", "epoch", "in", "np", ".", "arange", "(", "self", ".", "epoch", ")", ":", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "rand_idx", ")", "\n", "epoch_total_loss", "=", "0.0", "\n", "for", "i_dx", "in", "rand_idx", ":", "\n", "# train batch", "\n", "                ", "img_path", "=", "img_list", "[", "i_dx", "]", "\n", "dmap_path", "=", "dmap_list", "[", "i_dx", "]", "\n", "pmap_path", "=", "pmap_list", "[", "i_dx", "]", "\n", "batch_img", ",", "batch_dmap", ",", "batch_pmap", ",", "batch_num", "=", "get_batch_patches", "(", "img_path", ",", "dmap_path", ",", "pmap_path", ",", "self", ".", "inputI_size", ",", "self", ".", "batch_size", ")", "\n", "\n", "_", ",", "cur_train_loss", "=", "self", ".", "sess", ".", "run", "(", "[", "u_optimizer", ",", "self", ".", "total_loss", "]", ",", "feed_dict", "=", "{", "self", ".", "input_Img", ":", "batch_img", ",", "self", ".", "input_Dmap", ":", "batch_dmap", ",", "self", ".", "input_Pmap", ":", "batch_pmap", ",", "self", ".", "input_num", ":", "batch_num", "}", ")", "\n", "\n", "#count += 1", "\n", "#self.log_writer.add_summary(summary, count)", "\n", "\n", "epoch_total_loss", "+=", "cur_train_loss", "\n", "\n", "#if np.mod(epoch+1, 2) == 0:", "\n", "", "print", "(", "\"Epoch: [%d] time: %4.4f, train_loss: %.8f\\n\"", "%", "(", "epoch", "+", "1", ",", "time", ".", "time", "(", ")", "-", "start_time", ",", "epoch_total_loss", "/", "len", "(", "img_list", ")", ")", ")", "\n", "log_file", ".", "write", "(", "\"Epoch: [%d] time: %4.4f, train_loss: %.8f\\n\"", "%", "(", "epoch", "+", "1", ",", "time", ".", "time", "(", ")", "-", "start_time", ",", "epoch_total_loss", "/", "len", "(", "img_list", ")", ")", ")", "\n", "log_file", ".", "flush", "(", ")", "\n", "self", ".", "test_training", "(", "epoch", "+", "1", ",", "log_file", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "epoch", "+", "1", ">", "0", ":", "#np.mod(epoch+1, self.save_intval) == 0:", "\n", "                ", "self", ".", "save_chkpoint", "(", "self", ".", "chkpoint_dir", ",", "self", ".", "model_name", ",", "epoch", "+", "1", ")", "\n", "\n", "", "", "log_file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shizenglin_Counting-with-Focus-for-Free.code.model.counting_model.test_training": [[305, 350], ["glob.glob.glob", "glob.glob.glob.sort", "glob.glob.glob", "glob.glob.glob.sort", "glob.glob.glob", "glob.glob.glob.sort", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "numpy.mean", "numpy.mean", "pow", "print", "log_file.write", "log_file.flush", "len", "utils.load_data_pairs", "min", "min", "skimage.transform.resize", "img_data.reshape.reshape.reshape", "skimage.transform.resize", "pmap_data.reshape.reshape.reshape", "model.counting_model.sess.run", "model.counting_model.seg_dice", "numpy.asarray", "abs", "pow", "numpy.mean", "len", "len", "len", "int", "int", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.shizenglin_Counting-with-Focus-for-Free.code.utils.load_data_pairs", "home.repos.pwc.inspect_result.shizenglin_Counting-with-Focus-for-Free.code.model.counting_model.seg_dice"], ["", "def", "test_training", "(", "self", ",", "step", ",", "log_file", ")", ":", "\n", "\n", "        ", "test_img_list", "=", "glob", "(", "'{}/*.jpg'", ".", "format", "(", "self", ".", "testImagePath", ")", ")", "\n", "test_img_list", ".", "sort", "(", ")", "\n", "test_dmap_list", "=", "glob", "(", "'{}/*.mat'", ".", "format", "(", "self", ".", "testDmapPath", ")", ")", "\n", "test_dmap_list", ".", "sort", "(", ")", "\n", "test_pmap_list", "=", "glob", "(", "'{}/*.mat'", ".", "format", "(", "self", ".", "testPmapPath", ")", ")", "\n", "test_pmap_list", ".", "sort", "(", ")", "\n", "\n", "all_mae", "=", "np", ".", "zeros", "(", "[", "len", "(", "test_img_list", ")", "]", ")", "\n", "all_rmse", "=", "np", ".", "zeros", "(", "[", "len", "(", "test_img_list", ")", "]", ")", "\n", "all_dice", "=", "np", ".", "zeros", "(", "[", "len", "(", "test_img_list", ")", ",", "2", "]", ")", "\n", "\n", "for", "k", "in", "range", "(", "0", ",", "len", "(", "test_img_list", ")", ")", ":", "\n", "#print k", "\n", "            ", "img_path", "=", "test_img_list", "[", "k", "]", "\n", "dmap_path", "=", "test_dmap_list", "[", "k", "]", "\n", "pmap_path", "=", "test_pmap_list", "[", "k", "]", "\n", "img_data", ",", "dmap_data", ",", "pmap_data", "=", "load_data_pairs", "(", "img_path", ",", "dmap_path", ",", "pmap_path", ")", "\n", "\n", "w", ",", "h", ",", "c", "=", "img_data", ".", "shape", "\n", "w", "=", "min", "(", "int", "(", "w", "/", "8", ")", "*", "8", ",", "1920", ")", "\n", "h", "=", "min", "(", "int", "(", "h", "/", "8", ")", "*", "8", ",", "1920", ")", "\n", "\n", "img_data", "=", "resize", "(", "img_data", ",", "(", "w", ",", "h", ",", "c", ")", ",", "preserve_range", "=", "True", ")", "\n", "img_data", "=", "img_data", ".", "reshape", "(", "1", ",", "w", ",", "h", ",", "c", ")", "\n", "dmap_data", "=", "dmap_data", "/", "100.0", "\n", "pmap_data", "=", "resize", "(", "pmap_data", ",", "(", "w", ",", "h", ")", ",", "preserve_range", "=", "True", ")", "\n", "pmap_data", "[", "pmap_data", "<", "1", "]", "=", "0", "\n", "pmap_data", "=", "pmap_data", ".", "reshape", "(", "1", ",", "w", ",", "h", ")", "\n", "\n", "predicted_label", ",", "soft_pprob", ",", "pred_plabel", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "pred_dprob", ",", "self", ".", "soft_pprob", ",", "self", ".", "pred_plabel", "]", ",", "feed_dict", "=", "{", "self", ".", "input_Img", ":", "img_data", "}", ")", "\n", "predicted_label", "/=", "100.0", "\n", "\n", "k_dice_c", "=", "self", ".", "seg_dice", "(", "pred_plabel", ",", "pmap_data", ")", "\n", "all_dice", "[", "k", ",", ":", "]", "=", "np", ".", "asarray", "(", "k_dice_c", ")", "\n", "all_mae", "[", "k", "]", "=", "abs", "(", "np", ".", "sum", "(", "predicted_label", ")", "-", "np", ".", "sum", "(", "dmap_data", ")", ")", "\n", "all_rmse", "[", "k", "]", "=", "pow", "(", "(", "np", ".", "sum", "(", "predicted_label", ")", "-", "np", ".", "sum", "(", "dmap_data", ")", ")", ",", "2", ")", "\n", "\n", "", "mean_dice", "=", "np", ".", "mean", "(", "all_dice", ",", "axis", "=", "0", ")", "\n", "mean_mae", "=", "np", ".", "mean", "(", "all_mae", ",", "axis", "=", "0", ")", "\n", "mean_rmse", "=", "pow", "(", "np", ".", "mean", "(", "all_rmse", ",", "axis", "=", "0", ")", ",", "0.5", ")", "\n", "print", "(", "\"Epoch: [%d], mae: %s, rmse:%s, dice:%s\\n\"", "%", "(", "step", ",", "mean_mae", ",", "mean_rmse", ",", "mean_dice", ")", ")", "\n", "log_file", ".", "write", "(", "\"Epoch: [%d], mae: %s, rmse:%s, dice:%s\\n\"", "%", "(", "step", ",", "mean_mae", ",", "mean_rmse", ",", "mean_dice", ")", ")", "\n", "log_file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shizenglin_Counting-with-Focus-for-Free.code.model.counting_model.test": [[351, 420], ["print", "tf.global_variables_initializer", "model.counting_model.sess.run", "model.counting_model.load_chkpoint", "glob.glob.glob", "glob.glob.glob.sort", "glob.glob.glob", "glob.glob.glob.sort", "glob.glob.glob", "glob.glob.glob.sort", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "numpy.mean", "numpy.mean", "pow", "print", "print", "print", "os.path.exists", "os.makedirs", "os.makedirs", "len", "utils.load_data_pairs", "test_img_list[].rfind", "test_img_list[].rfind", "min", "min", "skimage.transform.resize", "img_data.reshape.reshape.reshape", "skimage.transform.resize", "pmap_data.reshape.reshape.reshape", "model.counting_model.sess.run", "os.path.join", "utils.SaveDmap", "os.path.join", "utils.SavePmap", "model.counting_model.seg_dice", "numpy.asarray", "abs", "pow", "numpy.mean", "len", "len", "len", "int", "int", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.shizenglin_Counting-with-Focus-for-Free.code.model.counting_model.load_chkpoint", "home.repos.pwc.inspect_result.shizenglin_Counting-with-Focus-for-Free.code.utils.load_data_pairs", "home.repos.pwc.inspect_result.shizenglin_Counting-with-Focus-for-Free.code.utils.SaveDmap", "home.repos.pwc.inspect_result.shizenglin_Counting-with-Focus-for-Free.code.utils.SavePmap", "home.repos.pwc.inspect_result.shizenglin_Counting-with-Focus-for-Free.code.model.counting_model.seg_dice"], ["", "def", "test", "(", "self", ")", ":", "\n", "\n", "        ", "print", "(", "\"Starting test Process:\\n\"", ")", "\n", "\n", "init_op", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "self", ".", "sess", ".", "run", "(", "init_op", ")", "\n", "\n", "if", "self", ".", "load_chkpoint", "(", "self", ".", "chkpoint_dir", ")", ":", "\n", "            ", "print", "(", "\" [*] Load SUCCESS\"", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\" [!] Load failed...\"", ")", "\n", "\n", "# get file list of testing dataset", "\n", "", "test_img_list", "=", "glob", "(", "'{}/*.jpg'", ".", "format", "(", "self", ".", "testImagePath", ")", ")", "\n", "test_img_list", ".", "sort", "(", ")", "\n", "test_dmap_list", "=", "glob", "(", "'{}/*.mat'", ".", "format", "(", "self", ".", "testDmapPath", ")", ")", "\n", "test_dmap_list", ".", "sort", "(", ")", "\n", "test_pmap_list", "=", "glob", "(", "'{}/*.mat'", ".", "format", "(", "self", ".", "testPmapPath", ")", ")", "\n", "test_pmap_list", ".", "sort", "(", ")", "\n", "\n", "all_mae", "=", "np", ".", "zeros", "(", "[", "len", "(", "test_img_list", ")", "]", ")", "\n", "all_rmse", "=", "np", ".", "zeros", "(", "[", "len", "(", "test_img_list", ")", "]", ")", "\n", "all_dice", "=", "np", ".", "zeros", "(", "[", "len", "(", "test_img_list", ")", ",", "2", "]", ")", "\n", "\n", "save_labeling_dir", "=", "self", ".", "labeling_dir", "+", "'/'", "+", "self", ".", "model_name", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_labeling_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_labeling_dir", "+", "'/dmap'", ")", "\n", "os", ".", "makedirs", "(", "save_labeling_dir", "+", "'/pmap'", ")", "\n", "\n", "", "for", "k", "in", "range", "(", "0", ",", "len", "(", "test_img_list", ")", ")", ":", "\n", "#print k", "\n", "            ", "img_path", "=", "test_img_list", "[", "k", "]", "\n", "dmap_path", "=", "test_dmap_list", "[", "k", "]", "\n", "pmap_path", "=", "test_pmap_list", "[", "k", "]", "\n", "img_data", ",", "dmap_data", ",", "pmap_data", "=", "load_data_pairs", "(", "img_path", ",", "dmap_path", ",", "pmap_path", ")", "\n", "\n", "name_index", "=", "test_img_list", "[", "k", "]", ".", "rfind", "(", "'/'", ")", "\n", "name_index_1", "=", "test_img_list", "[", "k", "]", ".", "rfind", "(", "'.'", ")", "\n", "file_name", "=", "test_img_list", "[", "k", "]", "[", "name_index", "+", "1", ":", "name_index_1", "]", "\n", "\n", "w", ",", "h", ",", "c", "=", "img_data", ".", "shape", "\n", "w", "=", "min", "(", "int", "(", "w", "/", "8", ")", "*", "8", ",", "1920", ")", "\n", "h", "=", "min", "(", "int", "(", "h", "/", "8", ")", "*", "8", ",", "1920", ")", "\n", "\n", "img_data", "=", "resize", "(", "img_data", ",", "(", "w", ",", "h", ",", "c", ")", ",", "preserve_range", "=", "True", ")", "\n", "img_data", "=", "img_data", ".", "reshape", "(", "1", ",", "w", ",", "h", ",", "c", ")", "\n", "dmap_data", "=", "dmap_data", "/", "100.0", "\n", "pmap_data", "=", "resize", "(", "pmap_data", ",", "(", "w", ",", "h", ")", ",", "preserve_range", "=", "True", ")", "\n", "pmap_data", "[", "pmap_data", "<", "1", "]", "=", "0", "\n", "pmap_data", "=", "pmap_data", ".", "reshape", "(", "1", ",", "w", ",", "h", ")", "\n", "\n", "predicted_label", ",", "soft_pprob", ",", "pred_plabel", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "pred_dprob", ",", "self", ".", "soft_pprob", ",", "self", ".", "pred_plabel", "]", ",", "feed_dict", "=", "{", "self", ".", "input_Img", ":", "img_data", "}", ")", "\n", "predicted_label", "/=", "100.0", "\n", "\n", "labeling_path", "=", "os", ".", "path", ".", "join", "(", "save_labeling_dir", "+", "'/dmap'", ",", "(", "'DMAP_'", "+", "file_name", ")", ")", "\n", "SaveDmap", "(", "predicted_label", "[", "0", ",", ":", ",", ":", ",", "0", "]", ",", "labeling_path", ")", "\n", "\n", "labeling_path", "=", "os", ".", "path", ".", "join", "(", "save_labeling_dir", "+", "'/pmap'", ",", "(", "'PMAP_'", "+", "file_name", ")", ")", "\n", "SavePmap", "(", "soft_pprob", "[", "0", ",", ":", ",", ":", ",", "1", "]", ",", "labeling_path", ")", "\n", "\n", "k_dice_c", "=", "self", ".", "seg_dice", "(", "pred_plabel", ",", "pmap_data", ")", "\n", "all_dice", "[", "k", ",", ":", "]", "=", "np", ".", "asarray", "(", "k_dice_c", ")", "\n", "all_mae", "[", "k", "]", "=", "abs", "(", "np", ".", "sum", "(", "predicted_label", ")", "-", "np", ".", "sum", "(", "dmap_data", ")", ")", "\n", "all_rmse", "[", "k", "]", "=", "pow", "(", "(", "np", ".", "sum", "(", "predicted_label", ")", "-", "np", ".", "sum", "(", "dmap_data", ")", ")", ",", "2", ")", "\n", "\n", "", "mean_dice", "=", "np", ".", "mean", "(", "all_dice", ",", "axis", "=", "0", ")", "\n", "mean_mae", "=", "np", ".", "mean", "(", "all_mae", ",", "axis", "=", "0", ")", "\n", "mean_rmse", "=", "pow", "(", "np", ".", "mean", "(", "all_rmse", ",", "axis", "=", "0", ")", ",", "0.5", ")", "\n", "print", "(", "\"mae: %s, rmse:%s, dice:%s\\n\"", "%", "(", "mean_mae", ",", "mean_rmse", ",", "mean_dice", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shizenglin_Counting-with-Focus-for-Free.code.model.counting_model.save_chkpoint": [[422, 429], ["os.path.join", "model.counting_model.saver.save", "os.path.exists", "os.makedirs", "os.path.join"], "methods", ["None"], ["", "def", "save_chkpoint", "(", "self", ",", "checkpoint_dir", ",", "model_name", ",", "step", ")", ":", "\n", "        ", "checkpoint_dir", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "self", ".", "model_name", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "checkpoint_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "checkpoint_dir", ")", "\n", "\n", "", "self", ".", "saver", ".", "save", "(", "self", ".", "sess", ",", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "model_name", ")", ",", "global_step", "=", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shizenglin_Counting-with-Focus-for-Free.code.model.counting_model.load_chkpoint": [[431, 443], ["print", "os.path.join", "tf.train.get_checkpoint_state", "os.path.basename", "model.counting_model.saver.restore", "os.path.join"], "methods", ["None"], ["", "def", "load_chkpoint", "(", "self", ",", "checkpoint_dir", ")", ":", "\n", "        ", "print", "(", "\" [*] Reading checkpoint...\"", ")", "\n", "\n", "checkpoint_dir", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "self", ".", "model_name", ")", "\n", "\n", "ckpt", "=", "tf", ".", "train", ".", "get_checkpoint_state", "(", "checkpoint_dir", ")", "\n", "if", "ckpt", "and", "ckpt", ".", "model_checkpoint_path", ":", "\n", "            ", "ckpt_name", "=", "os", ".", "path", ".", "basename", "(", "ckpt", ".", "model_checkpoint_path", ")", "\n", "self", ".", "saver", ".", "restore", "(", "self", ".", "sess", ",", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "ckpt_name", ")", ")", "\n", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.shizenglin_Counting-with-Focus-for-Free.code.ini_file_io.load_train_ini": [[4, 40], ["ConfigParser.ConfigParser", "ConfigParser.ConfigParser.read", "ConfigParser.ConfigParser.sections", "range", "len", "dict", "param_sections.append", "ConfigParser.ConfigParser.get", "ConfigParser.ConfigParser.getint", "ConfigParser.ConfigParser.getfloat", "ConfigParser.ConfigParser.getfloat", "ConfigParser.ConfigParser.getint", "ConfigParser.ConfigParser.getint", "ConfigParser.ConfigParser.get", "ConfigParser.ConfigParser.get", "ConfigParser.ConfigParser.get", "ConfigParser.ConfigParser.get", "ConfigParser.ConfigParser.get", "ConfigParser.ConfigParser.get", "ConfigParser.ConfigParser.get", "ConfigParser.ConfigParser.get", "ConfigParser.ConfigParser.get", "ConfigParser.ConfigParser.get", "ConfigParser.ConfigParser.getint", "ConfigParser.ConfigParser.getfloat", "ConfigParser.ConfigParser.getfloat", "ConfigParser.ConfigParser.getint", "ConfigParser.ConfigParser.get", "ConfigParser.ConfigParser.getint"], "function", ["None"], ["def", "load_train_ini", "(", "ini_file", ")", ":", "\n", "# initialize", "\n", "    ", "cf", "=", "ConfigParser", ".", "ConfigParser", "(", ")", "\n", "cf", ".", "read", "(", "ini_file", ")", "\n", "# dictionary list", "\n", "param_sections", "=", "[", "]", "\n", "\n", "s", "=", "cf", ".", "sections", "(", ")", "\n", "for", "d", "in", "range", "(", "len", "(", "s", ")", ")", ":", "\n", "# create dictionary", "\n", "        ", "level_dict", "=", "dict", "(", "phase", "=", "cf", ".", "get", "(", "s", "[", "d", "]", ",", "\"phase\"", ")", ",", "\n", "batch_size", "=", "cf", ".", "getint", "(", "s", "[", "d", "]", ",", "\"batch_size\"", ")", ",", "\n", "inputI_width_size", "=", "cf", ".", "getfloat", "(", "s", "[", "d", "]", ",", "\"inputI_width_size\"", ")", ",", "\n", "inputI_height_size", "=", "cf", ".", "getfloat", "(", "s", "[", "d", "]", ",", "\"inputI_height_size\"", ")", ",", "\n", "inputI_chn", "=", "cf", ".", "getint", "(", "s", "[", "d", "]", ",", "\"inputI_chn\"", ")", ",", "\n", "output_chn", "=", "cf", ".", "getint", "(", "s", "[", "d", "]", ",", "\"output_chn\"", ")", ",", "\n", "trainImagePath", "=", "cf", ".", "get", "(", "s", "[", "d", "]", ",", "\"trainImagePath\"", ")", ",", "\n", "trainDmapPath", "=", "cf", ".", "get", "(", "s", "[", "d", "]", ",", "\"trainDmapPath\"", ")", ",", "\n", "trainPmapPath", "=", "cf", ".", "get", "(", "s", "[", "d", "]", ",", "\"trainPmapPath\"", ")", ",", "\n", "testImagePath", "=", "cf", ".", "get", "(", "s", "[", "d", "]", ",", "\"testImagePath\"", ")", ",", "\n", "testDmapPath", "=", "cf", ".", "get", "(", "s", "[", "d", "]", ",", "\"testDmapPath\"", ")", ",", "\n", "testPmapPath", "=", "cf", ".", "get", "(", "s", "[", "d", "]", ",", "\"testPmapPath\"", ")", ",", "\n", "chkpoint_dir", "=", "cf", ".", "get", "(", "s", "[", "d", "]", ",", "\"chkpoint_dir\"", ")", ",", "\n", "result_dir", "=", "cf", ".", "get", "(", "s", "[", "d", "]", ",", "\"result_dir\"", ")", ",", "\n", "labeling_dir", "=", "cf", ".", "get", "(", "s", "[", "d", "]", ",", "\"labeling_dir\"", ")", ",", "\n", "log_dir", "=", "cf", ".", "get", "(", "s", "[", "d", "]", ",", "\"log_dir\"", ")", ",", "\n", "density_level", "=", "cf", ".", "getint", "(", "s", "[", "d", "]", ",", "\"density_level\"", ")", ",", "\n", "learning_rate", "=", "cf", ".", "getfloat", "(", "s", "[", "d", "]", ",", "\"learning_rate\"", ")", ",", "\n", "beta1", "=", "cf", ".", "getfloat", "(", "s", "[", "d", "]", ",", "\"beta1\"", ")", ",", "\n", "epoch", "=", "cf", ".", "getint", "(", "s", "[", "d", "]", ",", "\"epoch\"", ")", ",", "\n", "model_name", "=", "cf", ".", "get", "(", "s", "[", "d", "]", ",", "\"model_name\"", ")", ",", "\n", "save_intval", "=", "cf", ".", "getint", "(", "s", "[", "d", "]", ",", "\"save_intval\"", ")", ")", "\n", "# add to list", "\n", "param_sections", ".", "append", "(", "level_dict", ")", "\n", "\n", "", "return", "param_sections", "\n", "", ""]], "home.repos.pwc.inspect_result.shizenglin_Counting-with-Focus-for-Free.code.utils.SaveDmap": [[9, 16], ["scipy.savemat", "PIL.Image.fromarray", "Image.fromarray.save", "numpy.array().astype", "numpy.min", "numpy.max", "numpy.min", "numpy.array"], "function", ["None"], ["def", "SaveDmap", "(", "predicted_label", ",", "labeling_path", ")", ":", "\n", "\n", "    ", "sio", ".", "savemat", "(", "labeling_path", "+", "'.mat'", ",", "{", "'dmap'", ":", "predicted_label", "}", ")", "\n", "\n", "predicted_label", "=", "(", "predicted_label", "-", "np", ".", "min", "(", "predicted_label", ")", ")", "/", "(", "np", ".", "max", "(", "predicted_label", ")", "-", "np", ".", "min", "(", "predicted_label", ")", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "np", ".", "array", "(", "predicted_label", "*", "255.0", ")", ".", "astype", "(", "'uint8'", ")", ")", "\n", "img", ".", "save", "(", "labeling_path", "+", "'.jpg'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shizenglin_Counting-with-Focus-for-Free.code.utils.SaveMap": [[17, 20], ["scipy.savemat"], "function", ["None"], ["", "def", "SaveMap", "(", "predicted_label", ",", "labeling_path", ")", ":", "\n", "\n", "    ", "sio", ".", "savemat", "(", "labeling_path", "+", "'.mat'", ",", "{", "'map'", ":", "predicted_label", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shizenglin_Counting-with-Focus-for-Free.code.utils.SavePmap": [[21, 25], ["PIL.Image.fromarray", "Image.fromarray.save", "numpy.array().astype", "numpy.array"], "function", ["None"], ["", "def", "SavePmap", "(", "predicted_label", ",", "labeling_path", ")", ":", "\n", "\n", "    ", "img", "=", "Image", ".", "fromarray", "(", "np", ".", "array", "(", "predicted_label", "*", "255", ")", ".", "astype", "(", "'uint8'", ")", ")", "\n", "img", ".", "save", "(", "labeling_path", "+", "'.jpg'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shizenglin_Counting-with-Focus-for-Free.code.utils.ReadImage": [[26, 38], ["numpy.array", "PIL.Image.open", "skimage.transform.rescale", "len", "numpy.tile"], "function", ["None"], ["", "def", "ReadImage", "(", "imPath", ",", "mirror", "=", "False", ",", "scale", "=", "1.0", ")", ":", "\n", "    ", "\"\"\"\n    Read gray images.\n    \"\"\"", "\n", "imArr", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "imPath", ")", ")", "#.convert('L'))", "\n", "if", "(", "scale", "!=", "1", ")", ":", "\n", "        ", "imArr", "=", "rescale", "(", "imArr", ",", "scale", ",", "preserve_range", "=", "True", ")", "\n", "", "if", "(", "len", "(", "imArr", ".", "shape", ")", "<", "3", ")", ":", "\n", "        ", "imArr", "=", "imArr", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "imArr", "=", "np", ".", "tile", "(", "imArr", ",", "(", "1", ",", "1", ",", "3", ")", ")", "\n", "\n", "", "return", "imArr", "\n", "\n"]], "home.repos.pwc.inspect_result.shizenglin_Counting-with-Focus-for-Free.code.utils.ResizeDmap": [[39, 50], ["numpy.zeros().astype", "xrange", "densitymap[].sum", "skimage.transform.rescale", "rescale_densitymap[].sum", "numpy.zeros", "int", "int"], "function", ["None"], ["", "def", "ResizeDmap", "(", "densitymap", ",", "scale", "=", "1.0", ")", ":", "\n", "\n", "    ", "b", ",", "w", ",", "h", "=", "densitymap", ".", "shape", "\n", "rescale_densitymap", "=", "np", ".", "zeros", "(", "[", "b", ",", "int", "(", "w", "*", "scale", ")", ",", "int", "(", "h", "*", "scale", ")", "]", ")", ".", "astype", "(", "'float32'", ")", "\n", "for", "i", "in", "xrange", "(", "b", ")", ":", "\n", "        ", "dmap_sum", "=", "densitymap", "[", "i", ",", ":", ",", ":", "]", ".", "sum", "(", ")", "\n", "rescale_densitymap", "[", "i", ",", ":", ",", ":", "]", "=", "rescale", "(", "densitymap", "[", "i", ",", ":", ",", ":", "]", ",", "scale", ",", "preserve_range", "=", "True", ")", "\n", "res_sum", "=", "rescale_densitymap", "[", "i", ",", ":", ",", ":", "]", ".", "sum", "(", ")", "\n", "if", "res_sum", "!=", "0", ":", "\n", "            ", "rescale_densitymap", "[", "i", ",", ":", ",", ":", "]", "=", "rescale_densitymap", "[", "i", ",", ":", ",", ":", "]", "*", "(", "dmap_sum", "/", "res_sum", ")", "\n", "", "", "return", "rescale_densitymap", "\n", "\n"]], "home.repos.pwc.inspect_result.shizenglin_Counting-with-Focus-for-Free.code.utils.ResizePmap": [[51, 58], ["numpy.zeros().astype", "xrange", "skimage.transform.rescale", "numpy.zeros", "int", "int"], "function", ["None"], ["", "def", "ResizePmap", "(", "pmap", ",", "scale", "=", "1.0", ")", ":", "\n", "\n", "    ", "b", ",", "w", ",", "h", "=", "pmap", ".", "shape", "\n", "rescale_pmap", "=", "np", ".", "zeros", "(", "[", "b", ",", "int", "(", "w", "*", "scale", ")", ",", "int", "(", "h", "*", "scale", ")", "]", ")", ".", "astype", "(", "'float32'", ")", "\n", "for", "i", "in", "xrange", "(", "b", ")", ":", "\n", "        ", "rescale_pmap", "[", "i", ",", ":", ",", ":", "]", "=", "rescale", "(", "pmap", "[", "i", ",", ":", ",", ":", "]", ",", "scale", ",", "preserve_range", "=", "True", ")", "#", "\n", "", "return", "rescale_pmap", "\n", "\n"]], "home.repos.pwc.inspect_result.shizenglin_Counting-with-Focus-for-Free.code.utils.ReadMap": [[59, 65], ["scipy.loadmat"], "function", ["None"], ["", "def", "ReadMap", "(", "mapPath", ",", "name", ")", ":", "\n", "    ", "\"\"\"\n    Load the density map from matfile.\n    \"\"\"", "\n", "map_data", "=", "sio", ".", "loadmat", "(", "mapPath", ")", "\n", "return", "map_data", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shizenglin_Counting-with-Focus-for-Free.code.utils.load_data_pairs": [[66, 80], ["utils.ReadImage", "utils.ReadMap", "utils.ReadMap", "img_data.astype.astype", "dmap_data.astype.astype", "pmap_data.astype.astype"], "function", ["home.repos.pwc.inspect_result.shizenglin_Counting-with-Focus-for-Free.code.utils.ReadImage", "home.repos.pwc.inspect_result.shizenglin_Counting-with-Focus-for-Free.code.utils.ReadMap", "home.repos.pwc.inspect_result.shizenglin_Counting-with-Focus-for-Free.code.utils.ReadMap"], ["", "def", "load_data_pairs", "(", "img_path", ",", "dmap_path", ",", "pmap_path", ")", ":", "\n", "\n", "    ", "img_data", "=", "ReadImage", "(", "img_path", ")", "\n", "dmap_data", "=", "ReadMap", "(", "dmap_path", ",", "'dmap'", ")", "\n", "pmap_data", "=", "ReadMap", "(", "pmap_path", ",", "'pmap'", ")", "\n", "\n", "img_data", "=", "img_data", ".", "astype", "(", "'float32'", ")", "\n", "dmap_data", "=", "dmap_data", ".", "astype", "(", "'float32'", ")", "\n", "pmap_data", "=", "pmap_data", ".", "astype", "(", "'int32'", ")", "\n", "\n", "dmap_data", "=", "dmap_data", "*", "100.0", "\n", "img_data", "=", "img_data", "/", "255.0", "\n", "\n", "return", "img_data", ",", "dmap_data", ",", "pmap_data", "\n", "\n"]], "home.repos.pwc.inspect_result.shizenglin_Counting-with-Focus-for-Free.code.utils.get_batch_patches": [[81, 122], ["utils.load_data_pairs", "int", "int", "numpy.zeros().astype", "numpy.zeros().astype", "numpy.zeros().astype", "numpy.zeros().astype", "np.fliplr.astype", "np.fliplr.astype", "np.fliplr.astype", "range", "numpy.random.random", "numpy.fliplr", "numpy.fliplr", "numpy.fliplr", "randint", "randint", "numpy.array", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "copy.deepcopy.sum"], "function", ["home.repos.pwc.inspect_result.shizenglin_Counting-with-Focus-for-Free.code.utils.load_data_pairs"], ["", "def", "get_batch_patches", "(", "img_path", ",", "dmap_path", ",", "pmap_path", ",", "patch_dim", ",", "batch_size", ")", ":", "\n", "    ", "rand_img", ",", "rand_dmap", ",", "rand_pmap", "=", "load_data_pairs", "(", "img_path", ",", "dmap_path", ",", "pmap_path", ")", "\n", "\n", "if", "np", ".", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "rand_img", "=", "np", ".", "fliplr", "(", "rand_img", ")", "\n", "rand_dmap", "=", "np", ".", "fliplr", "(", "rand_dmap", ")", "\n", "rand_pmap", "=", "np", ".", "fliplr", "(", "rand_pmap", ")", "\n", "\n", "", "w", ",", "h", ",", "c", "=", "rand_img", ".", "shape", "\n", "\n", "patch_width", "=", "int", "(", "patch_dim", "[", "0", "]", ")", "\n", "patch_heigh", "=", "int", "(", "patch_dim", "[", "1", "]", ")", "\n", "\n", "batch_img", "=", "np", ".", "zeros", "(", "[", "batch_size", ",", "patch_width", ",", "patch_heigh", ",", "c", "]", ")", ".", "astype", "(", "'float32'", ")", "\n", "batch_dmap", "=", "np", ".", "zeros", "(", "[", "batch_size", ",", "patch_width", ",", "patch_heigh", "]", ")", ".", "astype", "(", "'float32'", ")", "\n", "batch_pmap", "=", "np", ".", "zeros", "(", "[", "batch_size", ",", "patch_width", ",", "patch_heigh", "]", ")", ".", "astype", "(", "'int32'", ")", "\n", "batch_num", "=", "np", ".", "zeros", "(", "[", "batch_size", "]", ")", ".", "astype", "(", "'int32'", ")", "\n", "\n", "rand_img", "=", "rand_img", ".", "astype", "(", "'float32'", ")", "\n", "rand_dmap", "=", "rand_dmap", ".", "astype", "(", "'float32'", ")", "\n", "rand_pmap", "=", "rand_pmap", ".", "astype", "(", "'int32'", ")", "\n", "\n", "for", "k", "in", "range", "(", "batch_size", ")", ":", "\n", "# randomly select a box anchor        ", "\n", "        ", "w_rand", "=", "randint", "(", "0", ",", "w", "-", "patch_width", ")", "\n", "h_rand", "=", "randint", "(", "0", ",", "h", "-", "patch_heigh", ")", "\n", "\n", "pos", "=", "np", ".", "array", "(", "[", "w_rand", ",", "h_rand", "]", ")", "\n", "# crop", "\n", "img_norm", "=", "copy", ".", "deepcopy", "(", "rand_img", "[", "pos", "[", "0", "]", ":", "pos", "[", "0", "]", "+", "patch_width", ",", "pos", "[", "1", "]", ":", "pos", "[", "1", "]", "+", "patch_heigh", ",", ":", "]", ")", "\n", "dmap_temp", "=", "copy", ".", "deepcopy", "(", "rand_dmap", "[", "pos", "[", "0", "]", ":", "pos", "[", "0", "]", "+", "patch_width", ",", "pos", "[", "1", "]", ":", "pos", "[", "1", "]", "+", "patch_heigh", "]", ")", "\n", "pmap_temp", "=", "copy", ".", "deepcopy", "(", "rand_pmap", "[", "pos", "[", "0", "]", ":", "pos", "[", "0", "]", "+", "patch_width", ",", "pos", "[", "1", "]", ":", "pos", "[", "1", "]", "+", "patch_heigh", "]", ")", "\n", "\n", "batch_img", "[", "k", ",", ":", ",", ":", ",", ":", "]", "=", "img_norm", "\n", "batch_dmap", "[", "k", ",", ":", ",", ":", "]", "=", "dmap_temp", "\n", "batch_pmap", "[", "k", ",", ":", ",", ":", "]", "=", "pmap_temp", "\n", "# global density step siz, L which is estimated by equation 5 in the paper", "\n", "L", "=", "8", "\n", "batch_num", "[", "k", "]", "=", "dmap_temp", ".", "sum", "(", ")", "/", "L", "\n", "\n", "", "return", "batch_img", ",", "batch_dmap", ",", "batch_pmap", ",", "batch_num", "\n", "", ""]]}