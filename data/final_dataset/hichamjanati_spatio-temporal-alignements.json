{"home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.theoretical-bound.plot_bound.gauss": [[18, 26], ["numpy.arange", "numpy.exp", "np.exp.sum"], "function", ["None"], ["def", "gauss", "(", "size", ",", "mean", ",", "std", ",", "mass", ")", ":", "\n", "    ", "\"\"\"return a 1D histogram for a gaussian distribution (n bins, mean m and std s)\n    \"\"\"", "\n", "x", "=", "np", ".", "arange", "(", "size", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "h", "=", "np", ".", "exp", "(", "-", "(", "x", "-", "mean", ")", "**", "2", "/", "(", "2", "*", "std", "**", "2", ")", ")", "\n", "h", "=", "h", "[", ":", ",", "None", "]", "/", "h", ".", "sum", "(", ")", "\n", "h", "*=", "mass", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.theoretical-bound.plot_bound.compute_sdtw": [[28, 35], ["sdtw.distance.SquaredEuclidean", "sdtw.SoftDTW().compute", "print", "sdtw.SoftDTW"], "function", ["home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.distance.SinkhornDistance.compute"], ["", "def", "compute_sdtw", "(", "signal", ",", "beta", ",", "T", ",", "k", ",", "start", ",", "end", ")", ":", "\n", "    ", "x", "=", "signal", "[", "start", ":", "end", "]", "\n", "y", "=", "signal", "[", "start", "+", "k", ":", "end", "+", "k", "]", "\n", "D", "=", "SquaredEuclidean", "(", "x", ",", "y", ")", "\n", "o", "=", "SoftDTW", "(", "D", ",", "gamma", "=", "beta", ")", ".", "compute", "(", ")", "\n", "print", "(", "\"Out of %s\"", "%", "k", ")", "\n", "return", "o", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.theoretical-bound.plot_bound.psi": [[37, 47], ["numpy.array", "numpy.arange", "numpy.log", "fi.append", "abs", "numpy.sum"], "function", ["None"], ["", "def", "psi", "(", "m", ",", "ks", ")", ":", "\n", "    ", "c", "=", "1", "+", "2", "**", "0.5", "\n", "a", "=", "1", "-", "1", "/", "c", "\n", "fi", "=", "[", "]", "\n", "# - a / ((ms * (c - 2) + 1))", "\n", "for", "k", "in", "ks", ":", "\n", "        ", "i", "=", "np", ".", "arange", "(", "abs", "(", "k", ")", ")", "\n", "f", "=", "np", ".", "log", "(", "1", "+", "a", "*", "i", "/", "(", "m", "-", "i", ")", ")", "\n", "fi", ".", "append", "(", "np", ".", "sum", "(", "f", ")", ")", "\n", "", "return", "np", ".", "array", "(", "fi", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.theoretical-bound.plot_bound.phi": [[49, 58], ["numpy.array", "numpy.arange", "numpy.log", "fi.append", "abs", "numpy.sum"], "function", ["None"], ["", "def", "phi", "(", "m", ",", "ks", ")", ":", "\n", "    ", "c", "=", "1", "+", "2", "**", "0.5", "\n", "a", "=", "1", "-", "1", "/", "c", "\n", "fi", "=", "[", "]", "\n", "for", "k", "in", "ks", ":", "\n", "        ", "i", "=", "np", ".", "arange", "(", "abs", "(", "k", ")", ")", "\n", "f", "=", "np", ".", "log", "(", "1", "-", "(", "a", "*", "i", "+", "1", "/", "c", ")", "/", "(", "i", "+", "m", ")", ")", "\n", "fi", ".", "append", "(", "np", ".", "sum", "(", "f", ")", ")", "\n", "", "return", "np", ".", "array", "(", "fi", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.theoretical-bound.plot_bound.get_quadratic_bound": [[60, 67], ["abs", "abs"], "function", ["None"], ["", "def", "get_quadratic_bound", "(", "ks", ",", "m", ",", "mp", ")", ":", "\n", "    ", "c", "=", "1", "+", "2", "**", "0.5", "\n", "a", "=", "1", "-", "1", "/", "c", "\n", "quadratic", "=", "a", "*", "(", "1", "/", "m", "+", "1", "/", "(", "m", "+", "mp", ")", ")", "\n", "quadratic", "*=", "0.5", "*", "(", "abs", "(", "ks", ")", "*", "(", "abs", "(", "ks", ")", "-", "1", ")", ")", "\n", "quadratic", "+=", "ks", "/", "(", "c", "*", "(", "m", "+", "mp", ")", ")", "\n", "return", "quadratic", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.theoretical-bound.plot_example.gauss": [[19, 28], ["numpy.arange", "numpy.exp", "np.exp.sum"], "function", ["None"], ["def", "gauss", "(", "size", ",", "mean", ",", "std", ",", "mass", ")", ":", "\n", "    ", "\"\"\"return a 1D histogram for a gaussian distribution\n    (n bins, mean m and std s)\n    \"\"\"", "\n", "x", "=", "np", ".", "arange", "(", "size", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "h", "=", "np", ".", "exp", "(", "-", "(", "x", "-", "mean", ")", "**", "2", "/", "(", "2", "*", "std", "**", "2", ")", ")", "\n", "h", "=", "h", "[", ":", ",", "None", "]", "/", "h", ".", "sum", "(", ")", "\n", "h", "*=", "mass", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.theoretical-bound.plot_example.gaussian_mixture": [[30, 42], ["zip", "numpy.array().sum", "np.array().sum.append", "zip", "plot_example.gauss", "numpy.array"], "function", ["home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.theoretical-bound.plot_example.gauss"], ["", "def", "gaussian_mixture", "(", "means", ",", "sds", ",", "values", ",", "gaps", ",", "T", ",", "mass", "=", "10", ",", "offset", "=", "True", ")", ":", "\n", "    ", "x", "=", "[", "]", "\n", "for", "m", ",", "sd", "in", "zip", "(", "means", ",", "sds", ")", ":", "\n", "        ", "x", ".", "append", "(", "gauss", "(", "T", ",", "m", ",", "sd", ",", "mass", ")", ")", "\n", "", "x", "=", "np", ".", "array", "(", "x", ")", ".", "sum", "(", "0", ")", "\n", "\n", "if", "offset", ":", "\n", "        ", "starts", "=", "np", ".", "r_", "[", "-", "gaps", "[", "0", "]", ",", "means", "]", "\n", "ends", "=", "np", ".", "r_", "[", "means", ",", "10", "*", "T", "]", "\n", "for", "start", ",", "end", ",", "value", ",", "gap", "in", "zip", "(", "starts", ",", "ends", ",", "values", ",", "gaps", ")", ":", "\n", "            ", "x", "[", "start", "+", "gap", ":", "end", "-", "gap", "]", "=", "value", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.theoretical-bound.plot_example.generate_path": [[44, 72], ["numpy.random.RandomState", "numpy.array", "numpy.array", "numpy.stack", "np.array.append", "np.array.append", "np.random.RandomState.rand"], "function", ["None"], ["", "def", "generate_path", "(", "start_x", ",", "start_y", ",", "end_x", ",", "end_y", ",", "weight_x", "=", "0.33", ",", "\n", "weight_y", "=", "0.77", ",", "seed", "=", "None", ")", ":", "\n", "    ", "path_x", "=", "[", "start_x", "]", "\n", "path_y", "=", "[", "start_y", "]", "\n", "x", ",", "y", "=", "start_x", ",", "start_y", "\n", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "while", "(", "(", "x", ",", "y", ")", "!=", "(", "end_x", ",", "end_y", ")", ")", ":", "\n", "        ", "if", "x", "==", "end_x", "or", "y", "==", "end_y", ":", "\n", "            ", "if", "x", "==", "end_x", ":", "\n", "                ", "y", "+=", "1", "\n", "", "elif", "y", "==", "end_y", ":", "\n", "                ", "x", "+=", "1", "\n", "", "", "else", ":", "\n", "            ", "u", "=", "rng", ".", "rand", "(", ")", "\n", "if", "u", "<=", "weight_x", ":", "\n", "                ", "x", "+=", "1", "\n", "", "elif", "u", ">=", "weight_y", ":", "\n", "                ", "y", "+=", "1", "\n", "", "else", ":", "\n", "                ", "x", "+=", "1", "\n", "y", "+=", "1", "\n", "", "", "path_x", ".", "append", "(", "x", ")", "\n", "path_y", ".", "append", "(", "y", ")", "\n", "", "path_x", "=", "np", ".", "array", "(", "path_x", ")", "\n", "path_y", "=", "np", ".", "array", "(", "path_y", ")", "\n", "\n", "path", "=", "np", ".", "stack", "(", "(", "path_x", ",", "path_y", ")", ")", "\n", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.theoretical-bound.plot_example.make_full_path": [[74, 92], ["zip", "plot_example.generate_path", "paths.append", "numpy.hstack", "plot_example.generate_path", "numpy.arange", "numpy.arange", "numpy.stack", "paths.append", "paths.append"], "function", ["home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.theoretical-bound.plot_example.generate_path", "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.theoretical-bound.plot_example.generate_path"], ["", "def", "make_full_path", "(", "start_links", ",", "end_links", ",", "finals", ",", "seed", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "start", "=", "(", "0", ",", "0", ")", "\n", "paths", "=", "[", "]", "\n", "for", "(", "start_link", ",", "end_link", ")", "in", "(", "zip", "(", "start_links", ",", "end_links", ")", ")", ":", "\n", "        ", "path", "=", "generate_path", "(", "start", "[", "0", "]", ",", "start", "[", "1", "]", ",", "start_link", "[", "0", "]", ",", "start_link", "[", "1", "]", ",", "\n", "seed", "=", "seed", ",", "**", "kwargs", ")", "\n", "link_x", "=", "np", ".", "arange", "(", "start_link", "[", "0", "]", "+", "1", ",", "end_link", "[", "0", "]", ")", "\n", "link_y", "=", "np", ".", "arange", "(", "start_link", "[", "1", "]", "+", "1", ",", "end_link", "[", "1", "]", ")", "\n", "start", "=", "end_link", "\n", "link", "=", "np", ".", "stack", "(", "(", "link_x", ",", "link_y", ")", ")", "\n", "paths", ".", "append", "(", "path", ")", "\n", "paths", ".", "append", "(", "link", ")", "\n", "\n", "", "path1", "=", "generate_path", "(", "end_link", "[", "0", "]", ",", "end_link", "[", "1", "]", ",", "finals", "[", "0", "]", ",", "finals", "[", "1", "]", ",", "\n", "seed", "=", "seed", ",", "**", "kwargs", ")", "\n", "paths", ".", "append", "(", "path1", ")", "\n", "path", "=", "np", ".", "hstack", "(", "paths", ")", "\n", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.theoretical-bound.plot_example.plot1D_mat": [[94, 136], ["matplotlib.pyplot.figure", "matplotlib.gridspec.GridSpec", "numpy.arange", "numpy.arange", "matplotlib.pyplot.subplot", "plt.subplot.imshow", "plt.subplot.grid", "plt.subplot.xaxis.set_minor_locator", "plt.subplot.yaxis.set_minor_locator", "zip", "matplotlib.pyplot.subplot", "plt.subplot.plot", "plt.subplot.set_yticks", "plt.subplot.set_xticks", "plt.subplot.set_title", "plt.subplot.set_xlim", "matplotlib.pyplot.subplot", "plt.subplot.plot", "plt.subplot.invert_yaxis", "plt.subplot.set_xticks", "plt.subplot.set_yticks", "plt.subplot.invert_yaxis", "plt.subplot.set_ylim", "matplotlib.pyplot.tight_layout", "matplotlib.ticker.MultipleLocator", "matplotlib.ticker.MultipleLocator", "plt.subplot.imshow", "matplotlib.colors.Normalize", "len", "len", "numpy.nanmax"], "function", ["home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.chars.plot_chars.imshow", "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.chars.plot_chars.imshow"], ["", "def", "plot1D_mat", "(", "a", ",", "b", ",", "M", ",", "paths", ",", "title", "=", "''", ")", ":", "\n", "    ", "\"\"\" Plot matrix M  with the source and target 1D distribution\n    \"\"\"", "\n", "\n", "plt", ".", "rcParams", "[", "'xtick.bottom'", "]", "=", "plt", ".", "rcParams", "[", "'xtick.labelbottom'", "]", "=", "False", "\n", "plt", ".", "rcParams", "[", "'xtick.top'", "]", "=", "plt", ".", "rcParams", "[", "'xtick.labeltop'", "]", "=", "True", "\n", "f", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "6", ",", "6", ")", ")", "\n", "na", ",", "nb", "=", "M", ".", "shape", "\n", "\n", "gs", "=", "gridspec", ".", "GridSpec", "(", "4", ",", "4", ",", "figure", "=", "f", ")", "\n", "\n", "xa", "=", "np", ".", "arange", "(", "na", ")", "\n", "xb", "=", "np", ".", "arange", "(", "nb", ")", "\n", "\n", "ax", "=", "plt", ".", "subplot", "(", "gs", "[", "1", ":", ",", ":", "-", "1", "]", ")", "\n", "ax", ".", "imshow", "(", "M", ".", "T", ",", "interpolation", "=", "'gaussian'", ",", "cmap", "=", "\"OrRd\"", ",", "\n", "norm", "=", "Normalize", "(", "vmin", "=", "0.", ",", "vmax", "=", "np", ".", "nanmax", "(", "M", ")", ")", ")", "\n", "ax", ".", "grid", "(", "which", "=", "\"both\"", ",", "alpha", "=", "0.5", ")", "\n", "ax", ".", "xaxis", ".", "set_minor_locator", "(", "MultipleLocator", "(", "5", ")", ")", "\n", "ax", ".", "yaxis", ".", "set_minor_locator", "(", "MultipleLocator", "(", "5", ")", ")", "\n", "\n", "for", "path", ",", "cmap", "in", "zip", "(", "paths", ",", "cmaps", ")", ":", "\n", "        ", "ax", ".", "imshow", "(", "path", ",", "cmap", "=", "cmap", ",", "vmin", "=", "0", ",", "vmax", "=", "1", ")", "\n", "\n", "", "ax1", "=", "plt", ".", "subplot", "(", "gs", "[", "0", ",", ":", "-", "1", "]", ")", "\n", "ax1", ".", "plot", "(", "xa", ",", "a", ",", "'r'", ",", "label", "=", "'Target distribution'", ")", "\n", "ax1", ".", "set_yticks", "(", "[", "0", ",", "5", ",", "10", ",", "15", ",", "20", "]", ")", "\n", "ax1", ".", "set_xticks", "(", "[", "]", ")", "\n", "\n", "ax1", ".", "set_title", "(", "title", ")", "\n", "ax1", ".", "set_xlim", "(", "[", "0", ",", "len", "(", "b", ")", "]", ")", "\n", "\n", "ax2", "=", "plt", ".", "subplot", "(", "gs", "[", "1", ":", ",", "-", "1", "]", ")", "\n", "ax2", ".", "plot", "(", "b", ",", "xb", ",", "'b'", ",", "label", "=", "'Source distribution'", ")", "\n", "ax2", ".", "invert_yaxis", "(", ")", "\n", "ax2", ".", "set_xticks", "(", "[", "0", ",", "5", ",", "10", ",", "15", ",", "20", "]", ")", "\n", "ax2", ".", "set_yticks", "(", "(", ")", ")", "\n", "\n", "ax2", ".", "invert_yaxis", "(", ")", "\n", "ax2", ".", "set_ylim", "(", "[", "len", "(", "a", ")", ",", "0", "]", ")", "\n", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "# plt.subplots_adjust(wspace=0.3, hspace=0.2)", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.distance.SinkhornDistance.__init__": [[13, 35], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "x", ",", "y", ",", "K", ",", "return_grad", "=", "True", ",", "\n", "ot", "=", "True", ",", "autodiff", "=", "False", ",", "warmstart", "=", "True", ",", "\n", "amari", "=", "None", ",", "**", "ot_params", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        x: array, shape = [m, d]\n            First time series.\n        y: array, shape = [n, d]\n            Second time series.\n        \"\"\"", "\n", "self", ".", "x", "=", "x", "\n", "self", ".", "y", "=", "y", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "ot_params", "=", "ot_params", "\n", "self", ".", "autodiff", "=", "autodiff", "\n", "self", ".", "return_grad", "=", "return_grad", "\n", "self", ".", "ot", "=", "ot", "\n", "self", ".", "warmstart", "=", "warmstart", "\n", "self", ".", "Kb", ",", "self", ".", "axx", ",", "self", ".", "ayy", ",", "self", ".", "fyky", "=", "None", ",", "None", ",", "None", ",", "None", "\n", "self", ".", "amari", "=", "amari", "\n", "self", ".", "_multiple", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.distance.SinkhornDistance.update_x_y": [[36, 42], ["None"], "methods", ["None"], ["", "def", "update_x_y", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "\"\"\"Set the parameters\"\"\"", "\n", "self", ".", "x", "=", "x", "\n", "if", "self", ".", "y", "!=", "y", ":", "\n", "            ", "self", ".", "fyky", "=", "None", "\n", "", "self", ".", "y", "=", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.distance.SinkhornDistance.compute": [[43, 121], ["ww.reshape.reshape.reshape", "utils.tonumpy", "gc.collect", "torch.cuda.empty_cache", "distance.SinkhornDistance.y.ndimension", "distance.SinkhornDistance.x.ndimension", "distance.SinkhornDistance.y.reshape", "len", "len", "sdtw.distance.SquaredEuclidean", "sdtw.distance.SquaredEuclidean.compute", "sinkhorn.amarikl", "sinkhorn.divergencekl", "len", "G.squeeze.squeeze.reshape", "torch.zeros_like", "w.squeeze.squeeze.squeeze", "len", "utils.tonumpy().reshape", "utils.tonumpy().reshape", "Ksum.ndimension", "sinkhorn.convol_imgs", "len", "enumerate", "enumerate", "G.squeeze.squeeze.squeeze", "utils.tonumpy", "utils.tonumpy", "enumerate", "distance.SinkhornDistance.y.t", "wxy_k.backward", "distance.SinkhornDistance.x.grad.zero_"], "methods", ["home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.utils.tonumpy", "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.distance.SinkhornDistance.compute", "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.amarikl", "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.divergencekl", "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.convol_imgs", "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.utils.tonumpy", "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.utils.tonumpy"], ["", "def", "compute", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Compute distance matrix.\n        Returns\n        -------\n        D: array, shape = [m, n]\n            Distance matrix.\n        \"\"\"", "\n", "if", "self", ".", "y", ".", "ndimension", "(", ")", ">", "self", ".", "x", ".", "ndimension", "(", ")", ":", "\n", "            ", "n_time_series", ",", "length_y", "=", "self", ".", "y", ".", "shape", "[", ":", "2", "]", "\n", "self", ".", "_multiple", "=", "True", "\n", "self", ".", "y", "=", "self", ".", "y", ".", "reshape", "(", "n_time_series", "*", "length_y", ",", "\n", "*", "self", ".", "y", ".", "shape", "[", "2", ":", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_multiple", "=", "False", "\n", "n_time_series", ",", "length_y", "=", "1", ",", "len", "(", "self", ".", "y", ")", "\n", "\n", "", "if", "not", "self", ".", "ot", ":", "\n", "            ", "n", "=", "len", "(", "self", ".", "x", ")", "\n", "m", "=", "len", "(", "self", ".", "y", ")", "\n", "D", "=", "SquaredEuclidean", "(", "tonumpy", "(", "self", ".", "x", ")", ".", "reshape", "(", "n", ",", "-", "1", ")", ",", "\n", "tonumpy", "(", "self", ".", "y", ")", ".", "reshape", "(", "m", ",", "-", "1", ")", ")", "\n", "return", "D", ".", "compute", "(", ")", "\n", "# if self.dirac:", "\n", "#     self.x = self.x.reshape(m, -1)", "\n", "#     self.y = self.y.reshape(n, -1)", "\n", "#     ix = torch.argmax(self.x, dim=-1)", "\n", "#     iy = torch.argmax(self.y, dim=-1)", "\n", "#     w = self.K[ix][:, iy]", "\n", "#     return tonumpy(w)", "\n", "", "if", "self", ".", "amari", "is", "not", "None", ":", "\n", "            ", "Ksum", "=", "self", ".", "amari", "**", "self", ".", "ot_params", "[", "\"gamma\"", "]", "\n", "if", "Ksum", ".", "ndimension", "(", ")", "==", "2", ":", "\n", "                ", "self", ".", "ytild", "=", "convol_imgs", "(", "self", ".", "y", "/", "Ksum", "[", "None", ",", ":", "]", ",", "self", ".", "K", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "ytild", "=", "(", "self", ".", "K", "/", "Ksum", "[", ":", ",", "None", "]", ")", ".", "mm", "(", "self", ".", "y", ".", "t", "(", ")", ")", ".", "t", "(", ")", "\n", "", "normalize", "=", "self", ".", "fyky", "is", "None", "\n", "ww", ",", "G", ",", "Kb", ",", "fyky", "=", "amarikl", "(", "self", ".", "x", ",", "self", ".", "y", ",", "self", ".", "ytild", ",", "self", ".", "K", ",", "\n", "normalize", "=", "normalize", ",", "\n", "compute_grad", "=", "self", ".", "return_grad", ",", "\n", "Kb", "=", "self", ".", "fyky", ",", "\n", "**", "self", ".", "ot_params", ")", "\n", "ww", "=", "ww", "-", "fyky", "[", "None", ",", ":", "]", "\n", "if", "self", ".", "warmstart", ":", "\n", "                ", "self", ".", "Kb", "=", "Kb", "\n", "", "self", ".", "fyky", "=", "fyky", "\n", "", "else", ":", "\n", "            ", "ww", ",", "G", ",", "Kb", ",", "axx", ",", "ayy", "=", "divergencekl", "(", "self", ".", "x", ",", "self", ".", "y", ",", "self", ".", "K", ",", "\n", "compute_grad", "=", "self", ".", "return_grad", ",", "\n", "Kb", "=", "self", ".", "Kb", ",", "axx", "=", "self", ".", "axx", ",", "\n", "**", "self", ".", "ot_params", ")", "\n", "\n", "", "ww", "=", "ww", ".", "reshape", "(", "len", "(", "ww", ")", ",", "n_time_series", ",", "length_y", ")", "\n", "if", "self", ".", "return_grad", ":", "\n", "            ", "G", "=", "G", ".", "reshape", "(", "len", "(", "ww", ")", ",", "n_time_series", ",", "length_y", ",", "*", "G", ".", "shape", "[", "2", ":", "]", ")", "\n", "self", ".", "jac", "=", "torch", ".", "zeros_like", "(", "G", ")", "\n", "if", "self", ".", "autodiff", ":", "\n", "                ", "for", "i", ",", "wx", "in", "enumerate", "(", "ww", ")", ":", "\n", "                    ", "for", "k", ",", "wxy", "in", "enumerate", "(", "wx", ")", ":", "\n", "                        ", "for", "j", ",", "wxy_k", "in", "enumerate", "(", "wxy", ")", ":", "\n", "                            ", "wxy_k", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "self", ".", "jac", "[", "i", ",", "k", ",", "j", "]", "=", "self", ".", "x", ".", "grad", "[", "i", "]", "\n", "self", ".", "x", ".", "grad", ".", "zero_", "(", ")", "\n", "", "", "", "", "else", ":", "\n", "                ", "if", "not", "self", ".", "_multiple", ":", "\n", "                    ", "G", "=", "G", ".", "squeeze", "(", ")", "\n", "", "self", ".", "jac", "=", "G", "\n", "", "", "w", "=", "tonumpy", "(", "ww", ")", "\n", "if", "not", "self", ".", "_multiple", ":", "\n", "            ", "w", "=", "w", ".", "squeeze", "(", ")", "\n", "\n", "", "del", "ww", "\n", "gc", ".", "collect", "(", ")", "\n", "\n", "self", ".", "_dist_matrix", "=", "w", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "return", "w", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sta.dtw": [[12, 18], ["pyts.metrics.dtw.accumulated_cost_matrix", "pyts.metrics.dtw._return_results"], "function", ["None"], ["def", "dtw", "(", "cost_mat", ",", "return_path", "=", "False", ")", ":", "\n", "    ", "acc_cost_mat", "=", "accumulated_cost_matrix", "(", "cost_mat", ")", "\n", "dtw_dist", "=", "acc_cost_mat", "[", "-", "1", ",", "-", "1", "]", "\n", "res", "=", "_return_results", "(", "dtw_dist", ",", "cost_mat", ",", "acc_cost_mat", ",", "\n", "False", ",", "False", ",", "return_path", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sta.sta_distances": [[20, 96], ["numpy.asarray", "isinstance", "distance.SinkhornDistance", "distance.SinkhornDistance.compute", "numpy.zeros", "enumerate", "ValueError", "torch.tensor", "torch.tensor", "torch.tensor", "isinstance", "torch.tensor.ndimension", "utils.tonumpy", "utils.tonumpy", "numpy.zeros", "range", "len", "torch.tensor", "len", "len", "sdtw.SoftDTW", "sdtw.SoftDTW.compute", "sta.dtw", "sdtw.SoftDTW.grad"], "function", ["home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.distance.SinkhornDistance.compute", "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.utils.tonumpy", "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.utils.tonumpy", "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.distance.SinkhornDistance.compute", "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sta.dtw"], ["", "def", "sta_distances", "(", "x", ",", "y", ",", "metric", ",", "beta", "=", "0.01", ",", "epsilon", "=", "0.01", ",", "\n", "gamma", "=", "1.", ",", "return_grad", "=", "False", ",", "device", "=", "\"cpu\"", ",", "\n", "return_cost_mat", "=", "False", ",", "dtype", "=", "torch", ".", "float64", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Compute STA distance matrix between spacial time series.\n\n    Parameters:\n    -----------\n\n    x: tensor (n_timestamps_1, dimension_1, dimension_2, ...)\n    y: tensor (n_time_series, n_timestamps_2, dimension_1, dimension_2, ...)\n    metric: tensor (dimension, dimension)\n        OT ground kernel\n    beta: float\n        hyperparameter of SoftDTW\n\n    Returns:\n    --------\n\n    sta: float or array (n_time_series)\n        distances between x and y\n    \"\"\"", "\n", "betas", "=", "np", ".", "asarray", "(", "beta", ")", "\n", "if", "(", "betas", "==", "0", ")", ".", "sum", "(", ")", "and", "return_grad", ":", "\n", "        ", "raise", "ValueError", "(", "\"Stak is not differentiable with beta == 0.\"", ")", "\n", "", "if", "isinstance", "(", "x", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "x", "=", "torch", ".", "tensor", "(", "x", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "y", "=", "torch", ".", "tensor", "(", "y", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "metric", "=", "torch", ".", "tensor", "(", "metric", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "if", "isinstance", "(", "kwargs", "[", "\"amari\"", "]", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "kwargs", "[", "\"amari\"", "]", "=", "torch", ".", "tensor", "(", "kwargs", "[", "\"amari\"", "]", ",", "\n", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "\n", "", "", "if", "x", ".", "ndimension", "(", ")", "==", "3", ":", "\n", "        ", "data_is_img", "=", "True", "\n", "", "else", ":", "\n", "        ", "data_is_img", "=", "False", "\n", "\n", "", "W", "=", "SinkhornDistance", "(", "x", ",", "y", ",", "metric", ",", "epsilon", "=", "epsilon", ",", "\n", "gamma", "=", "gamma", ",", "return_grad", "=", "return_grad", ",", "**", "kwargs", ")", "\n", "cost_matrices", "=", "W", ".", "compute", "(", ")", "\n", "\n", "if", "return_grad", ":", "\n", "        ", "w_gradients", "=", "tonumpy", "(", "W", ".", "jac", ")", "\n", "\n", "", "if", "cost_matrices", ".", "ndim", "==", "2", ":", "\n", "        ", "cost_matrices", "=", "cost_matrices", "[", ":", ",", "None", "]", "\n", "if", "return_grad", ":", "\n", "            ", "w_gradients", "=", "w_gradients", "[", ":", ",", "None", "]", "\n", "", "", "n_timestamps_x", ",", "n_time_series", ",", "n_timestamps_y", "=", "cost_matrices", ".", "shape", "\n", "\n", "if", "return_grad", ":", "\n", "        ", "w_gradients", "=", "tonumpy", "(", "W", ".", "jac", ")", "\n", "gradient", "=", "np", ".", "zeros", "(", "(", "len", "(", "betas", ")", ",", "n_timestamps_y", ",", "n_time_series", ",", "\n", "*", "x", ".", "shape", "[", "1", ":", "]", ")", ")", "\n", "del", "W", ".", "jac", "\n", "", "sta_values", "=", "np", ".", "zeros", "(", "(", "len", "(", "betas", ")", ",", "n_time_series", ")", ")", "\n", "for", "k", ",", "beta", "in", "enumerate", "(", "betas", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "n_time_series", ")", ":", "\n", "            ", "if", "beta", ":", "\n", "                ", "sdtw", "=", "SoftDTW", "(", "cost_matrices", "[", ":", ",", "i", "]", ",", "gamma", "=", "beta", ")", "\n", "sta_values", "[", "k", ",", "i", "]", "=", "sdtw", ".", "compute", "(", ")", "\n", "if", "return_grad", ":", "\n", "                    ", "E", "=", "sdtw", ".", "grad", "(", ")", "[", ":", ",", ":", ",", "None", "]", "\n", "if", "data_is_img", ":", "\n", "                        ", "E", "=", "E", "[", ":", ",", ":", ",", ":", ",", "None", "]", "\n", "", "gradient", "[", "k", ",", ":", ",", "i", "]", "=", "(", "w_gradients", "[", ":", ",", "i", "]", "*", "E", ")", ".", "sum", "(", "axis", "=", "1", ")", "\n", "", "", "else", ":", "\n", "                ", "sta_values", "[", "k", ",", "i", "]", "=", "dtw", "(", "cost_matrices", "[", ":", ",", "i", "]", ")", "\n", "", "", "", "if", "len", "(", "betas", ")", "==", "1", ":", "\n", "        ", "sta_values", "=", "sta_values", "[", "0", "]", "\n", "gradient", "=", "gradient", "[", "0", "]", "\n", "", "if", "return_grad", ":", "\n", "        ", "return", "sta_values", ",", "gradient", "\n", "", "if", "return_cost_mat", ":", "\n", "        ", "return", "sta_values", "\n", "", "return", "sta_values", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sta.sta_distances_parallel": [[98, 117], ["len", "print", "torch.tensor", "torch.tensor", "torch.tensor", "sta.sta_distances", "torch.cuda.set_device", "X[].copy", "X[].copy", "K.copy"], "function", ["home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sta.sta_distances"], ["", "def", "sta_distances_parallel", "(", "X", ",", "i", ",", "K", ",", "betas", ",", "epsilon", ",", "gamma", ",", "n_gpu_devices", "=", "0", ")", ":", "\n", "    ", "\"\"\"Computes all the sta distances STA(X[i], X[i:]) for many betas.\"\"\"", "\n", "n", "=", "len", "(", "X", ")", "\n", "print", "(", "f\"Doing {i} / {n} ...\"", ")", "\n", "\n", "# set the GPU device", "\n", "if", "n_gpu_devices", ":", "\n", "        ", "device_id", "=", "i", "%", "n_gpu_devices", "\n", "device", "=", "\"cuda:%s\"", "%", "device_id", "\n", "torch", ".", "cuda", ".", "set_device", "(", "device_id", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "\"cpu\"", "\n", "\n", "", "x", "=", "torch", ".", "tensor", "(", "X", "[", "i", "]", ".", "copy", "(", ")", ",", "dtype", "=", "torch", ".", "float64", ",", "device", "=", "device", ")", "\n", "y", "=", "torch", ".", "tensor", "(", "X", "[", "i", ":", "]", ".", "copy", "(", ")", ",", "dtype", "=", "torch", ".", "float64", ",", "device", "=", "device", ")", "\n", "met", "=", "torch", ".", "tensor", "(", "K", ".", "copy", "(", ")", ",", "dtype", "=", "torch", ".", "float64", ",", "device", "=", "device", ")", "\n", "out", "=", "sta_distances", "(", "x", ",", "y", ",", "met", ",", "betas", ",", "epsilon", ",", "gamma", ",", "\n", "device", "=", "device", ",", "amari", "=", "None", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sta.sta_matrix": [[119, 144], ["len", "joblib.Parallel", "range", "joblib.Parallel.", "numpy.zeros", "enumerate", "samples.append", "samples.append", "range", "joblib.delayed", "X.copy", "K.copy", "len", "len"], "function", ["None"], ["", "def", "sta_matrix", "(", "X", ",", "betas", ",", "K", ",", "epsilon", ",", "gamma", ",", "n_jobs", "=", "1", ",", "n_gpu_devices", "=", "0", ")", ":", "\n", "    ", "\"\"\"Computes the STA distance matrix in parallel.\"\"\"", "\n", "n_samples", "=", "len", "(", "X", ")", "\n", "pll", "=", "Parallel", "(", "n_jobs", "=", "n_jobs", ",", "backend", "=", "\"multiprocessing\"", ")", "\n", "samples", "=", "[", "]", "\n", "count", "=", "0", "\n", "for", "i", "in", "range", "(", "n_samples", ")", ":", "\n", "        ", "samples", ".", "append", "(", "i", ")", "\n", "count", "+=", "1", "\n", "if", "count", "==", "n_samples", ":", "\n", "            ", "break", "\n", "", "samples", ".", "append", "(", "n_samples", "-", "1", "-", "i", ")", "\n", "count", "+=", "1", "\n", "if", "count", "==", "n_samples", ":", "\n", "            ", "break", "\n", "", "", "iterator", "=", "(", "delayed", "(", "sta_distances_parallel", ")", "(", "X", ".", "copy", "(", ")", ",", "i", ",", "K", ".", "copy", "(", ")", ",", "betas", ",", "\n", "epsilon", ",", "gamma", ",", "n_gpu_devices", ")", "\n", "for", "i", "in", "samples", ")", "\n", "out", "=", "pll", "(", "iterator", ")", "\n", "matrix", "=", "np", ".", "zeros", "(", "(", "len", "(", "betas", ")", ",", "n_samples", ",", "n_samples", ")", ")", "\n", "for", "i", ",", "n", "in", "enumerate", "(", "samples", ")", ":", "\n", "        ", "for", "k", "in", "range", "(", "len", "(", "betas", ")", ")", ":", "\n", "            ", "matrix", "[", "k", ",", "n", ",", "n", ":", "]", "=", "out", "[", "i", "]", "[", "k", "]", "\n", "matrix", "[", "k", ",", "n", ":", ",", "n", "]", "=", "out", "[", "i", "]", "[", "k", "]", "\n", "", "", "return", "matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sta.compute_sdtw": [[146, 158], ["x.reshape.reshape", "y.reshape.reshape", "sdtw.distance.SquaredEuclidean", "print", "len", "len", "sdtw.SoftDTW().compute", "D.compute.compute", "sta.dtw", "sdtw.SoftDTW"], "function", ["home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.distance.SinkhornDistance.compute", "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.distance.SinkhornDistance.compute", "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sta.dtw"], ["", "def", "compute_sdtw", "(", "x", ",", "y", ",", "beta", ",", "i", ")", ":", "\n", "    ", "\"\"\"Computes soft-dtw in parallel between a pair of time series x and y.\"\"\"", "\n", "x", "=", "x", ".", "reshape", "(", "len", "(", "x", ")", ",", "-", "1", ")", "\n", "y", "=", "y", ".", "reshape", "(", "len", "(", "y", ")", ",", "-", "1", ")", "\n", "D", "=", "SquaredEuclidean", "(", "x", ",", "y", ")", "\n", "if", "beta", ":", "\n", "        ", "o", "=", "SoftDTW", "(", "D", ",", "gamma", "=", "beta", ")", ".", "compute", "(", ")", "\n", "", "else", ":", "\n", "        ", "D", "=", "D", ".", "compute", "(", ")", "\n", "o", "=", "dtw", "(", "D", ")", "\n", "", "print", "(", "\"Softdtw out of %s\"", "%", "i", ")", "\n", "return", "o", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sta.sdtw_matrix": [[160, 181], ["joblib.Parallel", "len", "X.reshape.reshape", "joblib.Parallel.", "numpy.array", "numpy.zeros", "range", "range", "range", "joblib.delayed", "enumerate"], "function", ["None"], ["", "def", "sdtw_matrix", "(", "X", ",", "beta", ",", "n_jobs", "=", "1", ")", ":", "\n", "    ", "\"\"\"Computes the soft-dtw distance matrix in parallel for the whole data.\"\"\"", "\n", "pll", "=", "Parallel", "(", "n_jobs", ")", "\n", "n_samples", "=", "len", "(", "X", ")", "\n", "X", "=", "X", ".", "reshape", "(", "n_samples", ",", "X", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", "chunks", "=", "[", "(", "X", "[", "i", "]", ",", "X", "[", "j", "]", ")", "for", "i", "in", "range", "(", "n_samples", ")", "\n", "for", "j", "in", "range", "(", "i", ",", "n_samples", ")", "]", "\n", "iterator", "=", "(", "delayed", "(", "compute_sdtw", ")", "(", "x", ",", "y", ",", "beta", ",", "i", ")", "\n", "for", "i", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "chunks", ")", ")", "\n", "out", "=", "pll", "(", "iterator", ")", "\n", "out", "=", "np", ".", "array", "(", "out", ")", "\n", "\n", "matrix", "=", "np", ".", "zeros", "(", "(", "n_samples", ",", "n_samples", ")", ")", "\n", "start", "=", "0", "\n", "end", "=", "n_samples", "\n", "for", "i", "in", "range", "(", "n_samples", ")", ":", "\n", "        ", "matrix", "[", "i", ",", "i", ":", "]", "=", "out", "[", "start", ":", "end", "]", "\n", "start", "=", "end", "\n", "end", "=", "end", "+", "n_samples", "-", "i", "-", "1", "\n", "", "matrix", "=", "0.5", "*", "(", "matrix", "+", "matrix", ".", "T", ")", "\n", "return", "matrix", "\n", "", ""]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.wimg": [[6, 60], ["torch.ones_like", "torch.ones_like.clone", "K.mm().t", "range", "K.t().mm().t", "K.mm().t", "warnings.warn", "K.mm", "torch.no_grad", "abs().max().item", "log[].append", "K.mm().t", "K.t().mm", "K.mm", "K.mm().t", "K.mm().t", "abs().max", "K.mm", "K.t", "torch.log", "torch.log", "K.mm", "K.mm", "abs"], "function", ["None"], ["def", "wimg", "(", "p", ",", "q", ",", "K", ",", "epsilon", "=", "0.01", ",", "maxiter", "=", "2000", ",", "tol", "=", "1e-7", ",", "verbose", "=", "False", ",", "\n", "f0", "=", "0.", ")", ":", "\n", "    ", "\"\"\"Compute the Wasserstein divergence between histograms.\n\n    Parameters\n    ----------\n    p: numpy array (width, width)\n        Must be non-negative.\n    q: numpy array (width, width)\n        Must be non-negative.\n    M: numpy array (width, width)\n        One dimensional kernel.\n        if None, taken as euclidean gram matrix over [1:n_features]\n        normalized by its median.\n    epsilon: float > 0.\n        Entropy weight. (optional, default 5 / n_features)\n    maxiter: int > 0.\n        Maximum number of iterations of the Sinkhorn algorithm.\n    tol: float >= 0.\n        Precision threshold of the Sinkhorn algorithm.\n        (optional, default 1e-10)\n    returnlog: boolean.\n        default False. if True, a list of errors is returned.\n    returnmarginal: boolean.\n        default False. if True, returns the transport marginal.\n\n    Returns\n    -------\n    float.\n    Wasserstein divergence between p and q.\n\n    \"\"\"", "\n", "bold", "=", "torch", ".", "ones_like", "(", "p", ",", "requires_grad", "=", "False", ")", "\n", "b", "=", "bold", ".", "clone", "(", ")", "\n", "Kb", "=", "K", ".", "mm", "(", "K", ".", "mm", "(", "b", ")", ".", "t", "(", ")", ")", ".", "t", "(", ")", "\n", "log", "=", "{", "'cstr'", ":", "[", "]", ",", "'flag'", ":", "0", "}", "\n", "cstr", "=", "10", "\n", "for", "i", "in", "range", "(", "maxiter", ")", ":", "\n", "        ", "a", "=", "p", "/", "Kb", "\n", "Ka", "=", "K", ".", "t", "(", ")", ".", "mm", "(", "K", ".", "mm", "(", "a", ")", ".", "t", "(", ")", ")", ".", "t", "(", ")", "\n", "b", "=", "q", "/", "Ka", "\n", "Kb", "=", "K", ".", "mm", "(", "K", ".", "mm", "(", "b", ")", ".", "t", "(", ")", ")", ".", "t", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "cstr", "=", "abs", "(", "Kb", "*", "a", "-", "p", ")", ".", "max", "(", ")", ".", "item", "(", ")", "\n", "log", "[", "\"cstr\"", "]", ".", "append", "(", "cstr", ")", "\n", "\n", "if", "cstr", "<", "tol", ":", "\n", "                ", "break", "\n", "", "", "", "if", "i", "==", "maxiter", "-", "1", "and", "verbose", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"*** Maxiter reached ! err = {} ***\"", ".", "format", "(", "cstr", ")", ")", "\n", "log", "[", "'flag'", "]", "=", "3", "\n", "", "f", "=", "(", "torch", ".", "log", "(", "a", "+", "1e-100", ")", "*", "p", "+", "torch", ".", "log", "(", "b", "+", "1e-100", ")", "*", "q", ")", ".", "sum", "(", ")", "*", "epsilon", "\n", "f", "+=", "f0", "\n", "return", "f", ",", "0.", ",", "Kb", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.wbarycenter": [[62, 118], ["torch.ones_like", "torch.ones_like.clone", "sinkhorn.convol_imgs", "range", "sinkhorn.convol_imgs", "sinkhorn.convol_imgs", "warnings.warn", "K.t", "numpy.prod", "torch.no_grad", "abs().max().item", "log[].append", "abs().max", "torch.log", "torch.log", "abs"], "function", ["home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.convol_imgs", "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.convol_imgs", "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.convol_imgs"], ["", "def", "wbarycenter", "(", "P", ",", "K", ",", "epsilon", "=", "0.01", ",", "maxiter", "=", "2000", ",", "tol", "=", "1e-7", ",", "verbose", "=", "False", ",", "\n", "f0", "=", "0.", ")", ":", "\n", "    ", "\"\"\"Compute the Wasserstein divergence between histograms.\n\n    Parameters\n    ----------\n    p: numpy array (n_hists, width, width)\n        Must be non-negative.\n    M: numpy array (width, width)\n        One dimensional kernel.\n        if None, taken as euclidean gram matrix over [1:n_features]\n        normalized by its median.\n    epsilon: float > 0.\n        Entropy weight. (optional, default 5 / n_features)\n    maxiter: int > 0.\n        Maximum number of iterations of the Sinkhorn algorithm.\n    tol: float >= 0.\n        Precision threshold of the Sinkhorn algorithm.\n        (optional, default 1e-10)\n    returnlog: boolean.\n        default False. if True, a list of errors is returned.\n    returnmarginal: boolean.\n        default False. if True, returns the transport marginal.\n\n    Returns\n    -------\n    float.\n    Wasserstein barycenter of P.\n\n    \"\"\"", "\n", "n_hists", ",", "width", ",", "_", "=", "P", ".", "shape", "\n", "bold", "=", "torch", ".", "ones_like", "(", "P", ",", "requires_grad", "=", "False", ")", "\n", "b", "=", "bold", ".", "clone", "(", ")", "\n", "Kb", "=", "convol_imgs", "(", "b", ",", "K", ")", "\n", "log", "=", "{", "'cstr'", ":", "[", "]", ",", "'obj'", ":", "[", "]", ",", "'flag'", ":", "0", "}", "\n", "cstr", "=", "10", "\n", "for", "i", "in", "range", "(", "maxiter", ")", ":", "\n", "        ", "a", "=", "P", "/", "Kb", "\n", "Ka", "=", "convol_imgs", "(", "a", ",", "K", ".", "t", "(", ")", ")", "\n", "q", "=", "np", ".", "prod", "(", "Ka", ",", "dim", "=", "0", ")", "**", "(", "1", "/", "n_hists", ")", "\n", "Q", "=", "q", "[", "None", ",", ":", ",", ":", "]", "\n", "b", "=", "Q", "/", "Ka", "\n", "Kb", "=", "convol_imgs", "(", "b", ",", "K", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "cstr", "=", "abs", "(", "a", "*", "Kb", "-", "P", ")", ".", "max", "(", ")", ".", "item", "(", ")", "\n", "log", "[", "\"cstr\"", "]", ".", "append", "(", "cstr", ")", "\n", "\n", "if", "cstr", "<", "tol", "and", "0", ":", "\n", "                ", "break", "\n", "", "", "", "if", "i", "==", "maxiter", "-", "1", "and", "verbose", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"*** Maxiter reached ! err = {} ***\"", ".", "format", "(", "cstr", ")", ")", "\n", "log", "[", "'flag'", "]", "=", "3", "\n", "", "f", "=", "(", "torch", ".", "log", "(", "a", "+", "1e-100", ")", "*", "P", "+", "torch", ".", "log", "(", "b", "+", "1e-100", ")", "*", "Q", ")", ".", "sum", "(", ")", "\n", "f", "*=", "epsilon", "\n", "f", "+=", "f0", "\n", "return", "q", ",", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.wbarycenterkl": [[120, 178], ["torch.ones_like", "torch.ones_like.clone", "sinkhorn.convol_imgs", "range", "sinkhorn.convol_imgs", "sinkhorn.convol_imgs", "warnings.warn", "K.t", "torch.no_grad", "abs().max().item", "log[].append", "P.sum", "abs().max", "abs"], "function", ["home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.convol_imgs", "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.convol_imgs", "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.convol_imgs"], ["", "def", "wbarycenterkl", "(", "P", ",", "K", ",", "epsilon", "=", "0.01", ",", "gamma", "=", "1", ",", "maxiter", "=", "2000", ",", "tol", "=", "1e-7", ",", "\n", "verbose", "=", "False", ",", "f0", "=", "0.", ")", ":", "\n", "    ", "\"\"\"Compute the Wasserstein divergence between histograms.\n\n    Parameters\n    ----------\n    p: numpy array (n_hists, width, width)\n        Must be non-negative.\n    M: numpy array (width, width)\n        One dimensional kernel.\n        if None, taken as euclidean gram matrix over [1:n_features]\n        normalized by its median.\n    epsilon: float > 0.\n        Entropy weight. (optional, default 5 / n_features)\n    maxiter: int > 0.\n        Maximum number of iterations of the Sinkhorn algorithm.\n    tol: float >= 0.\n        Precision threshold of the Sinkhorn algorithm.\n        (optional, default 1e-10)\n    returnlog: boolean.\n        default False. if True, a list of errors is returned.\n    returnmarginal: boolean.\n        default False. if True, returns the transport marginal.\n\n    Returns\n    -------\n    float.\n    Wasserstein barycenter of P.\n\n    \"\"\"", "\n", "n_hists", ",", "width", ",", "_", "=", "P", ".", "shape", "\n", "bold", "=", "torch", ".", "ones_like", "(", "P", ",", "requires_grad", "=", "False", ")", "\n", "b", "=", "bold", ".", "clone", "(", ")", "\n", "Kb", "=", "convol_imgs", "(", "b", ",", "K", ")", "\n", "log", "=", "{", "'cstr'", ":", "[", "]", ",", "'obj'", ":", "[", "]", ",", "'flag'", ":", "0", "}", "\n", "cstr", "=", "10", "\n", "fi", "=", "gamma", "/", "(", "gamma", "+", "epsilon", ")", "\n", "for", "i", "in", "range", "(", "maxiter", ")", ":", "\n", "        ", "a", "=", "(", "P", "/", "Kb", ")", "**", "fi", "\n", "Ka", "=", "convol_imgs", "(", "a", ",", "K", ".", "t", "(", ")", ")", "\n", "q", "=", "(", "(", "Ka", "**", "(", "1", "-", "fi", ")", ")", ".", "mean", "(", "dim", "=", "0", ")", ")", "\n", "q", "=", "q", "**", "(", "1", "/", "(", "1", "-", "fi", ")", ")", "\n", "Q", "=", "q", "[", "None", ",", ":", ",", ":", "]", "\n", "b", "=", "(", "Q", "/", "Ka", ")", "**", "fi", "\n", "Kb", "=", "convol_imgs", "(", "b", ",", "K", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "cstr", "=", "abs", "(", "a", "*", "Kb", "-", "P", ")", ".", "max", "(", ")", ".", "item", "(", ")", "\n", "log", "[", "\"cstr\"", "]", ".", "append", "(", "cstr", ")", "\n", "\n", "if", "cstr", "<", "tol", ":", "\n", "                ", "break", "\n", "", "", "", "if", "i", "==", "maxiter", "-", "1", "and", "verbose", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"*** Maxiter reached ! err = {} ***\"", ".", "format", "(", "cstr", ")", ")", "\n", "log", "[", "'flag'", "]", "=", "3", "\n", "", "plsum", "=", "(", "a", "*", "Kb", ")", ".", "sum", "(", ")", "\n", "f", "=", "-", "(", "epsilon", "+", "2", "*", "gamma", ")", "*", "plsum", "+", "gamma", "*", "(", "P", ".", "sum", "(", ")", ")", "\n", "f", "+=", "f0", "\n", "return", "q", ",", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.convol_imgs": [[180, 184], ["torch.einsum", "torch.einsum"], "function", ["None"], ["", "def", "convol_imgs", "(", "imgs", ",", "K", ")", ":", "\n", "    ", "kx", "=", "torch", ".", "einsum", "(", "\"...ij,kjl->kil\"", ",", "K", ",", "imgs", ")", "\n", "kxy", "=", "torch", ".", "einsum", "(", "\"...ij,klj->kli\"", ",", "K", ",", "kx", ")", "\n", "return", "kxy", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.convol_old": [[186, 191], ["torch.zeros_like", "enumerate", "K.mm().t", "K.mm", "K.mm().t", "K.mm"], "function", ["None"], ["", "def", "convol_old", "(", "imgs", ",", "K", ")", ":", "\n", "    ", "kxy", "=", "torch", ".", "zeros_like", "(", "imgs", ")", "\n", "for", "i", ",", "img", "in", "enumerate", "(", "imgs", ")", ":", "\n", "        ", "kxy", "[", "i", "]", "=", "K", ".", "mm", "(", "K", ".", "mm", "(", "img", ")", ".", "t", "(", ")", ")", ".", "t", "(", ")", "\n", "", "return", "kxy", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.wimg_parallel": [[193, 251], ["torch.ones_like", "torch.ones_like.clone", "sinkhorn.convol_imgs", "range", "Q.ndimension", "sinkhorn.convol_imgs", "sinkhorn.convol_imgs", "warnings.warn", "K.t", "torch.no_grad", "abs().mean().item", "log[].append", "abs().mean", "torch.log", "torch.log", "abs"], "function", ["home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.convol_imgs", "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.convol_imgs", "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.convol_imgs"], ["", "def", "wimg_parallel", "(", "p", ",", "Q", ",", "K", ",", "epsilon", "=", "0.01", ",", "maxiter", "=", "2000", ",", "tol", "=", "1e-7", ",", "\n", "verbose", "=", "False", ",", "f0", "=", "0.", ")", ":", "\n", "    ", "\"\"\"Compute the Wasserstein divergence between histograms.\n\n    Parameters\n    ----------\n    p: numpy array (width, width)\n        Must be non-negative.\n    Q: numpy array (n_imgs, width, width)\n        Must be non-negative.\n    M: numpy array (width, width)\n        One dimensional kernel.\n        if None, taken as euclidean gram matrix over [1:n_features]\n        normalized by its median.\n    epsilon: float > 0.\n        Entropy weight. (optional, default 5 / n_features)\n    maxiter: int > 0.\n        Maximum number of iterations of the Sinkhorn algorithm.\n    tol: float >= 0.\n        Precision threshold of the Sinkhorn algorithm.\n        (optional, default 1e-10)\n    returnlog: boolean.\n        default False. if True, a list of errors is returned.\n    returnmarginal: boolean.\n        default False. if True, returns the transport marginal.\n\n    Returns\n    -------\n    float.\n    Wasserstein divergence between p and q.\n\n    \"\"\"", "\n", "if", "Q", ".", "ndimension", "(", ")", "==", "2", ":", "\n", "        ", "Q", "=", "Q", "[", "None", ",", ":", ",", ":", "]", "\n", "", "bold", "=", "torch", ".", "ones_like", "(", "Q", ",", "requires_grad", "=", "False", ")", "\n", "b", "=", "bold", ".", "clone", "(", ")", "\n", "Kb", "=", "convol_imgs", "(", "b", ",", "K", ")", "\n", "log", "=", "{", "'cstr'", ":", "[", "]", ",", "'obj'", ":", "[", "]", ",", "'flag'", ":", "0", ",", "'a'", ":", "[", "]", ",", "'b'", ":", "[", "]", "}", "\n", "cstr", "=", "10", "\n", "for", "i", "in", "range", "(", "maxiter", ")", ":", "\n", "        ", "a", "=", "p", "/", "Kb", "\n", "Ka", "=", "convol_imgs", "(", "a", ",", "K", ".", "t", "(", ")", ")", "\n", "b", "=", "Q", "/", "Ka", "\n", "Kb", "=", "convol_imgs", "(", "b", ",", "K", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "cstr", "=", "abs", "(", "Kb", "*", "a", "-", "p", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "log", "[", "\"cstr\"", "]", ".", "append", "(", "cstr", ")", "\n", "\n", "if", "cstr", "<", "tol", ":", "\n", "                ", "break", "\n", "", "", "", "if", "i", "==", "maxiter", "-", "1", "and", "verbose", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"*** Maxiter reached ! err = {} ***\"", ".", "format", "(", "cstr", ")", ")", "\n", "log", "[", "'flag'", "]", "=", "3", "\n", "", "f", "=", "(", "torch", ".", "log", "(", "a", "+", "1e-100", ")", "*", "p", "+", "torch", ".", "log", "(", "b", "+", "1e-100", ")", "*", "Q", ")", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ")", ")", "\n", "f", "*=", "epsilon", "\n", "f", "+=", "f0", "\n", "\n", "return", "f", ",", "a", ",", "Kb", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.wkl": [[253, 332], ["Q.t.t", "Q.t.sum", "p.sum", "torch.ones_like", "range", "Q.t.ndimension", "sinkhorn.wimg_parallel", "K.mm", "K.t().mm", "K.mm", "warnings.warn", "torch.ones_like", "torch.no_grad", "b.clone", "log[].append", "g.t", "K.t", "abs().max", "max", "abs().max", "abs().max", "abs", "abs", "abs"], "function", ["home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.wimg_parallel"], ["", "def", "wkl", "(", "p", ",", "Q", ",", "K", ",", "epsilon", "=", "0.01", ",", "gamma", "=", "1.", ",", "maxiter", "=", "2000", ",", "tol", "=", "1e-7", ",", "\n", "verbose", "=", "False", ",", "f0", "=", "0.", ",", "compute_grad", "=", "False", ",", "Kb", "=", "None", ")", ":", "\n", "    ", "\"\"\"Compute the Wasserstein divergence between histograms.\n\n    Parameters\n    ----------\n    p: numpy array (width, width)\n        Must be non-negative.\n    Q: numpy array (n_imgs, width, width)\n        Must be non-negative.\n    M: numpy array (width, width)\n        One dimensional kernel.\n        if None, taken as euclidean gram matrix over [1:n_features]\n        normalized by its median.\n    epsilon: float > 0.\n        Entropy weight. (optional, default 5 / n_features)\n    maxiter: int > 0.\n        Maximum number of iterations of the Sinkhorn algorithm.\n    tol: float >= 0.\n        Precision threshold of the Sinkhorn algorithm.\n        (optional, default 1e-10)\n    returnlog: boolean.\n        default False. if True, a list of errors is returned.\n    returnmarginal: boolean.\n        default False. if True, returns the transport marginal.\n\n    Returns\n    -------\n    float.\n    Wasserstein divergence between p and q.\n\n    \"\"\"", "\n", "Q", "=", "Q", ".", "t", "(", ")", "\n", "if", "Q", ".", "ndimension", "(", ")", "==", "1", ":", "\n", "        ", "Q", "=", "Q", "[", ":", ",", "None", "]", "\n", "", "Qs", "=", "Q", ".", "sum", "(", "dim", "=", "0", ")", "\n", "psum", "=", "p", ".", "sum", "(", ")", "\n", "f", "=", "gamma", "*", "(", "Qs", "+", "psum", ")", "\n", "idx", "=", "Qs", ">", "-", "1", "\n", "if", "compute_grad", ":", "\n", "        ", "g", "=", "gamma", "*", "(", "1", "-", "10", "**", "(", "20", "*", "epsilon", "/", "gamma", ")", ")", "*", "torch", ".", "ones_like", "(", "Q", ")", "\n", "", "Q", "=", "Q", "[", ":", ",", "idx", "]", "\n", "if", "gamma", "==", "0.", ":", "\n", "        ", "return", "wimg_parallel", "(", "p", ",", "Q", ",", "K", ",", "epsilon", ",", "maxiter", ",", "tol", ",", "verbose", ")", "\n", "", "if", "psum", "<", "-", "1", ":", "\n", "        ", "return", "f", ",", "g", "\n", "", "fi", "=", "gamma", "/", "(", "gamma", "+", "epsilon", ")", "\n", "\n", "log", "=", "{", "'cstr'", ":", "[", "]", ",", "'obj'", ":", "[", "]", ",", "'flag'", ":", "0", ",", "'a'", ":", "[", "]", ",", "'b'", ":", "[", "]", "}", "\n", "cstr", "=", "10", "\n", "bold", "=", "torch", ".", "ones_like", "(", "Q", ",", "requires_grad", "=", "False", ")", "\n", "if", "Kb", "is", "None", ":", "\n", "        ", "Kb", "=", "K", ".", "mm", "(", "bold", ")", "\n", "", "for", "i", "in", "range", "(", "maxiter", ")", ":", "\n", "        ", "a", "=", "(", "p", "[", ":", ",", "None", "]", "/", "Kb", ")", "**", "fi", "\n", "Ka", "=", "K", ".", "t", "(", ")", ".", "mm", "(", "a", ")", "\n", "b", "=", "(", "Q", "/", "Ka", ")", "**", "fi", "\n", "Kb", "=", "K", ".", "mm", "(", "b", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "i", "%", "10", "==", "0", ":", "\n", "                ", "cstr", "=", "abs", "(", "bold", "-", "b", ")", ".", "max", "(", ")", "\n", "cstr", "/=", "max", "(", "1", ",", "abs", "(", "bold", ")", ".", "max", "(", ")", ",", "abs", "(", "b", ")", ".", "max", "(", ")", ")", "\n", "", "bold", "=", "b", ".", "clone", "(", ")", "\n", "log", "[", "\"cstr\"", "]", ".", "append", "(", "cstr", ")", "\n", "\n", "if", "cstr", "<", "tol", ":", "\n", "                ", "break", "\n", "", "", "", "if", "i", "==", "maxiter", "-", "1", "and", "verbose", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"*** Maxiter reached ! err = {} ***\"", ".", "format", "(", "cstr", ")", ")", "\n", "log", "[", "'flag'", "]", "=", "3", "\n", "", "plsum", "=", "(", "a", "*", "Kb", ")", ".", "sum", "(", "0", ")", "\n", "f", "[", "idx", "]", "+=", "epsilon", "*", "(", "f0", "-", "plsum", ")", "\n", "f", "[", "idx", "]", "+=", "-", "2", "*", "gamma", "*", "plsum", "\n", "# M = - epsilon * torch.log(K)", "\n", "# f = (convol_imgs(b, M * K) * a).sum((1, 2))", "\n", "if", "compute_grad", ":", "\n", "        ", "g", "=", "gamma", "*", "(", "1", "-", "a", "**", "(", "-", "epsilon", "/", "gamma", ")", ")", "\n", "return", "f", ",", "g", ".", "t", "(", ")", ",", "Kb", "\n", "", "return", "f", ",", "0.", ",", "Kb", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.wkllog": [[334, 418], ["torch.log.sum", "torch.log.sum", "torch.log", "torch.log", "torch.zeros_like", "torch.logsumexp", "range", "sinkhorn.wimg_parallel", "torch.logsumexp", "torch.logsumexp", "torch.exp().sum().item", "warnings.warn", "torch.ones_like", "torch.no_grad", "log[].append", "torch.exp", "K.t", "torch.exp().sum", "abs", "max", "torch.exp"], "function", ["home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.wimg_parallel"], ["", "def", "wkllog", "(", "p", ",", "q", ",", "K", ",", "epsilon", "=", "0.01", ",", "gamma", "=", "1.", ",", "maxiter", "=", "2000", ",", "tol", "=", "1e-7", ",", "\n", "verbose", "=", "False", ",", "f0", "=", "0.", ",", "compute_grad", "=", "False", ")", ":", "\n", "    ", "\"\"\"Compute the Wasserstein divergence between histograms.\n\n    Parameters\n    ----------\n    p: numpy array (width, width)\n        Must be non-negative.\n    Q: numpy array (n_imgs, width, width)\n        Must be non-negative.\n    M: numpy array (width, width)\n        One dimensional kernel.\n        if None, taken as euclidean gram matrix over [1:n_features]\n        normalized by its median.\n    epsilon: float > 0.\n        Entropy weight. (optional, default 5 / n_features)\n    maxiter: int > 0.\n        Maximum number of iterations of the Sinkhorn algorithm.\n    tol: float >= 0.\n        Precision threshold of the Sinkhorn algorithm.\n        (optional, default 1e-10)\n    returnlog: boolean.\n        default False. if True, a list of errors is returned.\n    returnmarginal: boolean.\n        default False. if True, returns the transport marginal.\n\n    Returns\n    -------\n    float.\n    Wasserstein divergence between p and q.\n\n    \"\"\"", "\n", "if", "gamma", "==", "0.", ":", "\n", "        ", "return", "wimg_parallel", "(", "p", ",", "q", ",", "K", ",", "epsilon", ",", "maxiter", ",", "tol", ",", "verbose", ")", "\n", "", "fi", "=", "gamma", "/", "(", "gamma", "+", "epsilon", ")", "\n", "\n", "log", "=", "{", "'cstr'", ":", "[", "]", ",", "'obj'", ":", "[", "]", ",", "'flag'", ":", "0", ",", "'a'", ":", "[", "]", ",", "'b'", ":", "[", "]", "}", "\n", "cstr", "=", "10", "\n", "if", "compute_grad", ":", "\n", "        ", "g", "=", "(", "1", "-", "10", "**", "(", "20", "*", "epsilon", "/", "gamma", ")", ")", "*", "torch", ".", "ones_like", "(", "p", ")", "\n", "", "ps", "=", "p", ".", "sum", "(", ")", "\n", "qs", "=", "q", ".", "sum", "(", ")", "\n", "if", "ps", "<", "-", "1", "or", "qs", "<", "-", "1", ":", "\n", "        ", "return", "gamma", "*", "(", "qs", "+", "ps", ")", ",", "g", "\n", "# if support:", "\n", "", "support_p", "=", "p", ">", "-", "1e-10", "\n", "support_q", "=", "q", ">", "-", "1e-10", "\n", "\n", "p", "=", "torch", ".", "log", "(", "p", "+", "1e-15", ")", "\n", "q", "=", "torch", ".", "log", "(", "q", "+", "1e-15", ")", "\n", "K", "=", "K", "-", "1e-100", "\n", "p", "=", "p", "[", "support_p", "]", "\n", "q", "=", "q", "[", "support_q", "]", "\n", "\n", "K", "=", "K", "[", "support_p", "]", "\n", "K", "=", "K", "[", ":", ",", "support_q", "]", "\n", "b", "=", "torch", ".", "zeros_like", "(", "q", ",", "requires_grad", "=", "False", ")", "\n", "Kb", "=", "torch", ".", "logsumexp", "(", "K", "+", "b", "[", "None", ",", ":", "]", ",", "dim", "=", "1", ")", "\n", "psumold", "=", "0.", "\n", "for", "i", "in", "range", "(", "maxiter", ")", ":", "\n", "        ", "a", "=", "fi", "*", "(", "p", "-", "Kb", ")", "\n", "Ka", "=", "torch", ".", "logsumexp", "(", "K", ".", "t", "(", ")", "+", "a", "[", "None", ",", ":", "]", ",", "dim", "=", "1", ")", "\n", "b", "=", "fi", "*", "(", "q", "-", "Ka", ")", "\n", "Kb", "=", "torch", ".", "logsumexp", "(", "K", "+", "b", "[", "None", ",", ":", "]", ",", "dim", "=", "1", ")", "\n", "psum", "=", "torch", ".", "exp", "(", "a", "+", "Kb", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "cstr", "=", "abs", "(", "psumold", "-", "psum", ")", "/", "max", "(", "1", ",", "psumold", ",", "psum", ")", "\n", "psumold", "=", "psum", "\n", "log", "[", "\"cstr\"", "]", ".", "append", "(", "cstr", ")", "\n", "\n", "if", "cstr", "<", "tol", ":", "\n", "                ", "break", "\n", "", "", "", "if", "i", "==", "maxiter", "-", "1", "and", "verbose", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"*** Maxiter reached ! err = {} ***\"", ".", "format", "(", "cstr", ")", ")", "\n", "log", "[", "'flag'", "]", "=", "3", "\n", "", "f", "=", "epsilon", "*", "(", "f0", "-", "psum", ")", "\n", "f", "=", "f", "+", "gamma", "*", "(", "ps", "+", "qs", "-", "2", "*", "psum", ")", "\n", "# M = - epsilon * torch.log(K)", "\n", "# f = (convol_imgs(b, M * K) * a).sum((1, 2))", "\n", "if", "compute_grad", ":", "\n", "        ", "g", "=", "1", "-", "torch", ".", "exp", "(", "-", "epsilon", "*", "a", "/", "gamma", ")", "\n", "g", "*=", "gamma", "\n", "return", "f", ",", "g", ",", "Kb", "\n", "", "return", "f", ",", "0", ",", "Kb", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.negentropy_img": [[420, 487], ["torch.ones_like.clone", "range", "P.ndimension", "torch.ones_like", "sinkhorn.convol_imgs", "warnings.warn", "torch.no_grad", "torch.ones_like.clone", "log[].append", "abs().max", "max", "torch.ones_like.max", "a.clone.max", "abs", "P.sum", "torch.log"], "function", ["home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.convol_imgs"], ["", "def", "negentropy_img", "(", "P", ",", "K", ",", "epsilon", "=", "0.01", ",", "gamma", "=", "1.", ",", "maxiter", "=", "100", ",", "tol", "=", "1e-7", ",", "\n", "verbose", "=", "False", ",", "f0", "=", "0.", ",", "compute_grad", "=", "False", ",", "a", "=", "None", ")", ":", "\n", "    ", "\"\"\"Compute the Negentropy term W(p, p) elementwise.\n\n    Parameters\n    ----------\n    P: numpy array (n_hists, width, width)\n        Must be non-negative.\n    M: numpy array (width, width)\n        One dimensional kernel.\n        if None, taken as euclidean gram matrix over [1:n_features]\n        normalized by its median.\n    epsilon: float > 0.\n        Entropy weight. (optional, default 5 / n_features)\n    maxiter: int > 0.\n        Maximum number of iterations of the Sinkhorn algorithm.\n    tol: float >= 0.\n        Precision threshold of the Sinkhorn algorithm.\n        (optional, default 1e-10)\n    returnlog: boolean.\n        default False. if True, a list of errors is returned.\n    returnmarginal: boolean.\n        default False. if True, returns the transport marginal.\n\n    Returns\n    -------\n    float.\n    Wasserstein divergence between p and q.\n\n    \"\"\"", "\n", "if", "P", ".", "ndimension", "(", ")", "==", "2", ":", "\n", "        ", "P", "=", "P", "[", "None", ",", ":", ",", ":", "]", "\n", "", "if", "gamma", "==", "0.", ":", "\n", "        ", "fi", "=", "1.", "\n", "", "else", ":", "\n", "        ", "fi", "=", "gamma", "/", "(", "gamma", "+", "epsilon", ")", "\n", "", "if", "a", "is", "None", ":", "\n", "        ", "a", "=", "torch", ".", "ones_like", "(", "P", ",", "requires_grad", "=", "False", ")", "\n", "", "aold", "=", "a", ".", "clone", "(", ")", "\n", "log", "=", "{", "'cstr'", ":", "[", "]", ",", "'obj'", ":", "[", "]", ",", "'flag'", ":", "0", "}", "\n", "cstr", "=", "10", "\n", "# torch.set_grad_enabled(grad)", "\n", "for", "i", "in", "range", "(", "maxiter", ")", ":", "\n", "        ", "Ka", "=", "convol_imgs", "(", "a", ",", "K", ")", "\n", "a", "=", "a", "**", "0.5", "*", "(", "P", "/", "Ka", ")", "**", "(", "fi", "/", "2", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "cstr", "=", "abs", "(", "a", "-", "aold", ")", ".", "max", "(", ")", "/", "max", "(", "1", ",", "a", ".", "max", "(", ")", ",", "aold", ".", "max", "(", ")", ")", "\n", "aold", "=", "a", ".", "clone", "(", ")", "\n", "log", "[", "\"cstr\"", "]", ".", "append", "(", "cstr", ")", "\n", "\n", "if", "cstr", "<", "tol", ":", "\n", "                ", "break", "\n", "", "", "", "if", "i", "==", "maxiter", "-", "1", "and", "verbose", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"*** Maxiter reached ! err = {} ***\"", ".", "format", "(", "cstr", ")", ")", "\n", "log", "[", "'flag'", "]", "=", "3", "\n", "", "if", "gamma", ":", "\n", "        ", "psum", "=", "(", "a", "*", "Ka", ")", ".", "sum", "(", "(", "1", ",", "2", ")", ")", "\n", "f", "=", "-", "epsilon", "*", "psum", "\n", "f", "=", "f", "+", "gamma", "*", "(", "2", "*", "P", ".", "sum", "(", "(", "1", ",", "2", ")", ")", "-", "2", "*", "psum", ")", "\n", "", "else", ":", "\n", "        ", "f", "=", "2", "*", "(", "P", "*", "torch", ".", "log", "(", "a", "+", "1e-100", ")", ")", ".", "sum", "(", "(", "1", ",", "2", ")", ")", "\n", "", "f", "=", "f", "+", "epsilon", "*", "f0", "\n", "if", "compute_grad", ":", "\n", "        ", "grad", "=", "gamma", "*", "(", "1", "-", "a", "**", "(", "-", "epsilon", "/", "gamma", ")", ")", "\n", "return", "f", ",", "grad", ",", "a", "\n", "", "return", "f", ",", "0.", ",", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.negentropy": [[489, 557], ["P.t.t", "torch.ones_like", "a.clone.clone", "range", "P.t.ndimension", "K.mm", "warnings.warn", "torch.no_grad", "aold.clone.clone", "log[].append", "grad.t", "abs().max", "max", "aold.clone.max", "a.clone.max", "abs", "P.t.sum", "torch.log"], "function", ["None"], ["", "def", "negentropy", "(", "P", ",", "K", ",", "epsilon", "=", "0.01", ",", "gamma", "=", "1.", ",", "maxiter", "=", "100", ",", "tol", "=", "1e-7", ",", "\n", "verbose", "=", "False", ",", "f0", "=", "0.", ",", "compute_grad", "=", "False", ",", "a", "=", "None", ")", ":", "\n", "    ", "\"\"\"Compute the Negentropy term W(p, p) elementwise.\n\n    Parameters\n    ----------\n    P: numpy array (n_hists, width, width)\n        Must be non-negative.\n    M: numpy array (width, width)\n        One dimensional kernel.\n        if None, taken as euclidean gram matrix over [1:n_features]\n        normalized by its median.\n    epsilon: float > 0.\n        Entropy weight. (optional, default 5 / n_features)\n    maxiter: int > 0.\n        Maximum number of iterations of the Sinkhorn algorithm.\n    tol: float >= 0.\n        Precision threshold of the Sinkhorn algorithm.\n        (optional, default 1e-10)\n    returnlog: boolean.\n        default False. if True, a list of errors is returned.\n    returnmarginal: boolean.\n        default False. if True, returns the transport marginal.\n\n    Returns\n    -------\n    float.\n    Wasserstein divergence between p and q.\n\n    \"\"\"", "\n", "P", "=", "P", ".", "t", "(", ")", "\n", "if", "P", ".", "ndimension", "(", ")", "==", "1", ":", "\n", "        ", "P", "=", "P", "[", ":", ",", "None", "]", "\n", "", "if", "gamma", "==", "0.", ":", "\n", "        ", "fi", "=", "1.", "\n", "", "else", ":", "\n", "        ", "fi", "=", "gamma", "/", "(", "gamma", "+", "epsilon", ")", "\n", "", "aold", "=", "torch", ".", "ones_like", "(", "P", ",", "requires_grad", "=", "False", ")", "\n", "\n", "a", "=", "aold", ".", "clone", "(", ")", "\n", "log", "=", "{", "'cstr'", ":", "[", "]", ",", "'obj'", ":", "[", "]", ",", "'flag'", ":", "0", "}", "\n", "cstr", "=", "10", "\n", "# torch.set_grad_enabled(grad)", "\n", "for", "i", "in", "range", "(", "maxiter", ")", ":", "\n", "        ", "Ka", "=", "K", ".", "mm", "(", "a", ")", "\n", "a", "=", "a", "**", "0.5", "*", "(", "P", "/", "Ka", ")", "**", "(", "fi", "/", "2", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "cstr", "=", "abs", "(", "a", "-", "aold", ")", ".", "max", "(", ")", "/", "max", "(", "1", ",", "a", ".", "max", "(", ")", ",", "aold", ".", "max", "(", ")", ")", "\n", "aold", "=", "a", ".", "clone", "(", ")", "\n", "log", "[", "\"cstr\"", "]", ".", "append", "(", "cstr", ")", "\n", "\n", "if", "cstr", "<", "tol", ":", "\n", "                ", "break", "\n", "", "", "", "if", "i", "==", "maxiter", "-", "1", "and", "verbose", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"*** Maxiter reached ! err = {} ***\"", ".", "format", "(", "cstr", ")", ")", "\n", "log", "[", "'flag'", "]", "=", "3", "\n", "", "if", "gamma", ":", "\n", "        ", "psum", "=", "(", "a", "*", "Ka", ")", ".", "sum", "(", "(", "0", ")", ")", "\n", "f", "=", "-", "epsilon", "*", "psum", "\n", "f", "=", "f", "+", "gamma", "*", "(", "2", "*", "P", ".", "sum", "(", "0", ")", "-", "2", "*", "psum", ")", "\n", "", "else", ":", "\n", "        ", "f", "=", "2", "*", "(", "P", "*", "torch", ".", "log", "(", "a", "+", "1e-100", ")", ")", ".", "sum", "(", "0", ")", "\n", "", "f", "=", "f", "+", "epsilon", "*", "f0", "\n", "if", "compute_grad", ":", "\n", "        ", "grad", "=", "gamma", "*", "(", "1", "-", "a", "**", "(", "-", "epsilon", "/", "gamma", ")", ")", "\n", "return", "f", ",", "grad", ".", "t", "(", ")", ",", "a", "\n", "", "return", "f", ",", "0.", ",", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.negentropy_log_": [[559, 636], ["p.sum", "torch.log", "torch.zeros_like", "torch.zeros_like.clone", "range", "torch.ones_like", "torch.logsumexp", "torch.exp().sum().item", "warnings.warn", "torch.ones_like", "torch.no_grad", "log[].append", "torch.exp", "torch.exp().sum", "abs", "max", "torch.exp"], "function", ["None"], ["", "def", "negentropy_log_", "(", "p", ",", "K", ",", "epsilon", "=", "0.01", ",", "gamma", "=", "1.", ",", "maxiter", "=", "2000", ",", "tol", "=", "1e-7", ",", "\n", "verbose", "=", "False", ",", "f0", "=", "0.", ",", "compute_grad", "=", "False", ",", "a", "=", "None", ")", ":", "\n", "    ", "\"\"\"Compute the Negentropy term W(p, p) elementwise.\n\n    Parameters\n    ----------\n    P: numpy array (n_hists, width, width)\n        Must be non-negative.\n    M: numpy array (width, width)\n        One dimensional kernel.\n        if None, taken as euclidean gram matrix over [1:n_features]\n        normalized by its median.\n    epsilon: float > 0.\n        Entropy weight. (optional, default 5 / n_features)\n    maxiter: int > 0.\n        Maximum number of iterations of the Sinkhorn algorithm.\n    tol: float >= 0.\n        Precision threshold of the Sinkhorn algorithm.\n        (optional, default 1e-10)\n    returnlog: boolean.\n        default False. if True, a list of errors is returned.\n    returnmarginal: boolean.\n        default False. if True, returns the transport marginal.\n\n    Returns\n    -------\n    float.\n    Wasserstein divergence between p and q.\n\n    \"\"\"", "\n", "\n", "if", "gamma", "==", "0.", ":", "\n", "        ", "fi", "=", "1.", "\n", "", "else", ":", "\n", "        ", "fi", "=", "gamma", "/", "(", "gamma", "+", "epsilon", ")", "\n", "", "if", "compute_grad", ":", "\n", "        ", "grad", "=", "(", "1", "-", "10", "**", "(", "20", "*", "epsilon", "/", "gamma", ")", ")", "*", "torch", ".", "ones_like", "(", "p", ")", "\n", "", "ps", "=", "p", ".", "sum", "(", ")", "\n", "# if support:", "\n", "support_p", "=", "p", ">", "-", "1e-10", "\n", "p", "=", "p", "[", "support_p", "]", "\n", "logp", "=", "torch", ".", "log", "(", "p", "+", "1e-10", ")", "\n", "K", "=", "K", "-", "1e-100", "\n", "grad", "=", "(", "1", "-", "10", "**", "(", "20", "*", "epsilon", "/", "gamma", ")", ")", "*", "torch", ".", "ones_like", "(", "p", ")", "\n", "\n", "K", "=", "K", "[", "support_p", "]", "[", ":", ",", "support_p", "]", "\n", "aold", "=", "torch", ".", "zeros_like", "(", "p", ",", "requires_grad", "=", "False", ")", "\n", "a", "=", "aold", ".", "clone", "(", ")", "\n", "log", "=", "{", "'cstr'", ":", "[", "]", ",", "'obj'", ":", "[", "]", ",", "'flag'", ":", "0", "}", "\n", "cstr", "=", "10", "\n", "psumold", "=", "0.", "\n", "for", "i", "in", "range", "(", "maxiter", ")", ":", "\n", "        ", "ka", "=", "torch", ".", "logsumexp", "(", "K", "+", "a", "[", "None", ",", ":", "]", ",", "dim", "=", "1", ")", "\n", "a", "=", "0.5", "*", "(", "a", "+", "fi", "*", "(", "logp", "-", "ka", ")", ")", "\n", "psum", "=", "torch", ".", "exp", "(", "a", "+", "ka", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "cstr", "=", "abs", "(", "psumold", "-", "psum", ")", "/", "max", "(", "1", ",", "psumold", ",", "psum", ")", "\n", "psumold", "=", "psum", "\n", "log", "[", "\"cstr\"", "]", ".", "append", "(", "cstr", ")", "\n", "\n", "if", "cstr", "<", "tol", ":", "\n", "                ", "break", "\n", "", "", "", "if", "i", "==", "maxiter", "-", "1", "and", "verbose", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"*** Maxiter reached ! err = {} ***\"", ".", "format", "(", "cstr", ")", ")", "\n", "log", "[", "'flag'", "]", "=", "3", "\n", "", "if", "gamma", ":", "\n", "        ", "f", "=", "-", "epsilon", "*", "psum", "\n", "f", "+=", "gamma", "*", "(", "2", "*", "ps", "-", "2", "*", "psum", ")", "\n", "", "else", ":", "\n", "        ", "f", "=", "2", "*", "(", "p", "*", "a", ")", ".", "sum", "(", ")", "\n", "", "f", "+=", "epsilon", "*", "f0", "\n", "if", "compute_grad", ":", "\n", "        ", "grad", "[", "support_p", "]", "=", "1", "-", "torch", ".", "exp", "(", "-", "epsilon", "*", "a", "/", "gamma", ")", "\n", "grad", "*=", "gamma", "\n", "return", "f", ",", "grad", ",", "a", "\n", "", "return", "f", ",", "0.", ",", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.negentropy_log": [[638, 653], ["torch.zeros", "torch.zeros_like", "enumerate", "P.ndimension", "sinkhorn.negentropy_log_"], "function", ["home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.negentropy_log_"], ["", "def", "negentropy_log", "(", "P", ",", "K", ",", "epsilon", "=", "0.01", ",", "gamma", "=", "1.", ",", "maxiter", "=", "100", ",", "tol", "=", "1e-7", ",", "\n", "verbose", "=", "False", ",", "f0", "=", "0.", ",", "compute_grad", "=", "False", ",", "a", "=", "None", ")", ":", "\n", "    ", "if", "P", ".", "ndimension", "(", ")", "==", "1", ":", "\n", "        ", "P", "=", "P", "[", "None", ",", ":", "]", "\n", "", "n_times", ",", "dimension", "=", "P", ".", "shape", "\n", "f", "=", "torch", ".", "zeros", "(", "n_times", ",", "dtype", "=", "P", ".", "dtype", ",", "device", "=", "P", ".", "device", ")", "\n", "grad", "=", "torch", ".", "zeros_like", "(", "P", ")", "\n", "for", "i", ",", "p", "in", "enumerate", "(", "P", ")", ":", "\n", "        ", "ff", ",", "gg", "=", "negentropy_log_", "(", "p", ",", "K", ",", "epsilon", ",", "gamma", ",", "maxiter", ",", "tol", ",", "\n", "verbose", ",", "f0", ",", "compute_grad", "=", "compute_grad", ")", "\n", "f", "[", "i", "]", "=", "ff", "\n", "grad", "[", "i", "]", "=", "gg", "\n", "", "if", "compute_grad", ":", "\n", "        ", "return", "f", ",", "grad", ",", "a", "\n", "", "return", "f", ",", "0.", ",", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.wimgkl": [[655, 731], ["Q.sum", "p.sum", "torch.ones_like", "torch.ones_like.clone", "range", "Q.ndimension", "sinkhorn.wimg_parallel", "sinkhorn.convol_imgs", "sinkhorn.convol_imgs", "sinkhorn.convol_imgs", "warnings.warn", "K.t", "torch.no_grad", "torch.ones_like.clone", "log[].append", "abs().max", "max", "torch.isnan().any", "abs().max", "abs().max", "abs", "torch.isnan", "abs", "abs"], "function", ["home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.wimg_parallel", "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.convol_imgs", "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.convol_imgs", "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.convol_imgs"], ["", "def", "wimgkl", "(", "p", ",", "Q", ",", "K", ",", "epsilon", "=", "0.01", ",", "gamma", "=", "1.", ",", "maxiter", "=", "2000", ",", "tol", "=", "1e-7", ",", "\n", "verbose", "=", "False", ",", "f0", "=", "0.", ",", "compute_grad", "=", "False", ",", "Kb", "=", "None", ")", ":", "\n", "    ", "\"\"\"Compute the Wasserstein divergence between histograms.\n\n    Parameters\n    ----------\n    p: numpy array (width, width)\n        Must be non-negative.\n    Q: numpy array (n_imgs, width, width)\n        Must be non-negative.\n    M: numpy array (width, width)\n        One dimensional kernel.\n        if None, taken as euclidean gram matrix over [1:n_features]\n        normalized by its median.\n    epsilon: float > 0.\n        Entropy weight. (optional, default 5 / n_features)\n    maxiter: int > 0.\n        Maximum number of iterations of the Sinkhorn algorithm.\n    tol: float >= 0.\n        Precision threshold of the Sinkhorn algorithm.\n        (optional, default 1e-10)\n    returnlog: boolean.\n        default False. if True, a list of errors is returned.\n    returnmarginal: boolean.\n        default False. if True, returns the transport marginal.\n\n    Returns\n    -------\n    float.\n    Wasserstein divergence between p and q.\n\n    \"\"\"", "\n", "if", "Q", ".", "ndimension", "(", ")", "==", "2", ":", "\n", "        ", "Q", "=", "Q", "[", "None", ",", ":", ",", ":", "]", "\n", "", "Qs", "=", "Q", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ")", ")", "\n", "psum", "=", "p", ".", "sum", "(", ")", "\n", "f", "=", "gamma", "*", "(", "Qs", "+", "psum", ")", "\n", "\n", "if", "gamma", "==", "0.", ":", "\n", "        ", "return", "wimg_parallel", "(", "p", ",", "Q", ",", "K", ",", "epsilon", ",", "maxiter", ",", "tol", ",", "verbose", ")", "\n", "", "fi", "=", "gamma", "/", "(", "gamma", "+", "epsilon", ")", "\n", "\n", "log", "=", "{", "'cstr'", ":", "[", "]", ",", "'obj'", ":", "[", "]", ",", "'flag'", ":", "0", ",", "'a'", ":", "[", "]", ",", "'b'", ":", "[", "]", "}", "\n", "cstr", "=", "10", "\n", "b", "=", "torch", ".", "ones_like", "(", "Q", ",", "requires_grad", "=", "False", ")", "\n", "if", "Kb", "is", "None", ":", "\n", "        ", "Kb", "=", "convol_imgs", "(", "b", ",", "K", ")", "\n", "", "bold", "=", "b", ".", "clone", "(", ")", "\n", "for", "i", "in", "range", "(", "maxiter", ")", ":", "\n", "        ", "a", "=", "(", "p", "/", "Kb", ")", "**", "fi", "\n", "Ka", "=", "convol_imgs", "(", "a", ",", "K", ".", "t", "(", ")", ")", "\n", "b", "=", "(", "Q", "/", "Ka", ")", "**", "fi", "\n", "Kb", "=", "convol_imgs", "(", "b", ",", "K", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "i", "%", "10", "==", "0", ":", "\n", "                ", "cstr", "=", "abs", "(", "bold", "-", "b", ")", ".", "max", "(", ")", "\n", "cstr", "/=", "max", "(", "1", ",", "abs", "(", "bold", ")", ".", "max", "(", ")", ",", "abs", "(", "b", ")", ".", "max", "(", ")", ")", "\n", "", "bold", "=", "b", ".", "clone", "(", ")", "\n", "log", "[", "\"cstr\"", "]", ".", "append", "(", "cstr", ")", "\n", "\n", "if", "cstr", "<", "tol", ":", "\n", "                ", "break", "\n", "\n", "", "if", "cstr", "<", "tol", "or", "torch", ".", "isnan", "(", "psum", ")", ".", "any", "(", ")", ":", "\n", "                ", "break", "\n", "", "", "", "if", "i", "==", "maxiter", "-", "1", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"*** Maxiter reached ! err = {} ***\"", ".", "format", "(", "cstr", ")", ")", "\n", "log", "[", "'flag'", "]", "=", "3", "\n", "", "plsum", "=", "(", "a", "*", "Kb", ")", ".", "sum", "(", "(", "1", ",", "2", ")", ")", "\n", "\n", "f", "+=", "epsilon", "*", "(", "f0", "-", "plsum", ")", "\n", "f", "+=", "-", "2", "*", "gamma", "*", "plsum", "\n", "if", "compute_grad", ":", "\n", "        ", "g", "=", "gamma", "*", "(", "1", "-", "a", "**", "(", "-", "epsilon", "/", "gamma", ")", ")", "\n", "return", "f", ",", "g", ",", "Kb", "\n", "", "return", "f", ",", "0.", ",", "Kb", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.convol_huge_imgs": [[733, 738], ["sinkhorn.convol_imgs", "out.reshape.reshape", "imgs.reshape"], "function", ["home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.convol_imgs"], ["", "def", "convol_huge_imgs", "(", "imgs", ",", "K", ")", ":", "\n", "    ", "n", ",", "m", ",", "dimension", ",", "dimension", "=", "imgs", ".", "shape", "\n", "out", "=", "convol_imgs", "(", "imgs", ".", "reshape", "(", "n", "*", "m", ",", "dimension", ",", "dimension", ")", ",", "K", ")", "\n", "out", "=", "out", ".", "reshape", "(", "n", ",", "m", ",", "dimension", ",", "dimension", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.convol_huge": [[740, 745], ["K.mm", "out.reshape.reshape", "imgs.reshape"], "function", ["None"], ["", "def", "convol_huge", "(", "imgs", ",", "K", ")", ":", "\n", "    ", "dimension", ",", "n", ",", "m", "=", "imgs", ".", "shape", "\n", "out", "=", "K", ".", "mm", "(", "imgs", ".", "reshape", "(", "dimension", ",", "n", "*", "m", ")", ")", "\n", "out", "=", "out", ".", "reshape", "(", "dimension", ",", "n", ",", "m", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.convol_huge_log": [[747, 753], ["imgs.reshape.reshape", "torch.logsumexp", "out.reshape.reshape"], "function", ["None"], ["", "def", "convol_huge_log", "(", "imgs", ",", "C", ")", ":", "\n", "    ", "dimension", ",", "n", ",", "m", "=", "imgs", ".", "shape", "\n", "imgs", "=", "imgs", ".", "reshape", "(", "dimension", ",", "n", "*", "m", ")", "\n", "out", "=", "torch", ".", "logsumexp", "(", "C", "[", ":", ",", ":", ",", "None", "]", "+", "imgs", "[", "None", ",", ":", "]", ",", "dim", "=", "1", ")", "\n", "out", "=", "out", ".", "reshape", "(", "dimension", ",", "n", ",", "m", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.convol_imgs_log": [[755, 761], ["torch.logsumexp", "torch.logsumexp", "torch.logsumexp.reshape", "C.t"], "function", ["None"], ["", "def", "convol_imgs_log", "(", "imgs", ",", "C", ")", ":", "\n", "    ", "\"\"\"Compute log separable kernal application.\"\"\"", "\n", "n", ",", "dimension", ",", "dimension", "=", "imgs", ".", "shape", "\n", "x", "=", "(", "torch", ".", "logsumexp", "(", "C", "[", "None", ",", "None", ",", ":", ",", ":", "]", "+", "imgs", "[", ":", ",", ":", ",", "None", "]", ",", "dim", "=", "-", "1", ")", ")", "\n", "x", "=", "torch", ".", "logsumexp", "(", "C", ".", "t", "(", ")", "[", "None", ",", ":", ",", ":", ",", "None", "]", "+", "x", "[", ":", ",", ":", ",", "None", "]", ",", "dim", "=", "1", ")", "\n", "return", "x", ".", "reshape", "(", "n", ",", "dimension", ",", "dimension", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.convol_huge_imgs_log": [[763, 770], ["imgs.reshape.reshape", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp.reshape", "C.t"], "function", ["None"], ["", "def", "convol_huge_imgs_log", "(", "imgs", ",", "C", ")", ":", "\n", "    ", "\"\"\"Compute log separable kernal application.\"\"\"", "\n", "n", ",", "m", ",", "dimension", ",", "dimension", "=", "imgs", ".", "shape", "\n", "imgs", "=", "imgs", ".", "reshape", "(", "n", "*", "m", ",", "dimension", ",", "dimension", ")", "\n", "x", "=", "(", "torch", ".", "logsumexp", "(", "C", "[", "None", ",", "None", ",", ":", ",", ":", "]", "+", "imgs", "[", ":", ",", ":", ",", "None", "]", ",", "dim", "=", "-", "1", ")", ")", "\n", "x", "=", "torch", ".", "logsumexp", "(", "C", ".", "t", "(", ")", "[", "None", ",", ":", ",", ":", ",", "None", "]", "+", "x", "[", ":", ",", ":", ",", "None", "]", ",", "dim", "=", "1", ")", "\n", "return", "x", ".", "reshape", "(", "n", ",", "m", ",", "dimension", ",", "dimension", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.monster_img": [[772, 863], ["Q.sum", "P.sum", "b.clone", "range", "range", "Q.ndimension", "P.ndimension", "torch.ones", "sinkhorn.convol_huge_imgs", "sinkhorn.convol_huge_imgs", "sinkhorn.convol_huge_imgs", "warnings.warn", "len", "range", "len", "torch.ones_like", "K.t", "torch.no_grad", "b.clone", "log[].append", "torch.isnan().any", "len", "abs().max", "max", "warnings.warn", "abs().max", "abs().max", "torch.isnan", "abs", "abs", "abs"], "function", ["home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.convol_huge_imgs", "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.convol_huge_imgs", "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.convol_huge_imgs"], ["", "def", "monster_img", "(", "P", ",", "Q", ",", "K", ",", "epsilon", "=", "0.01", ",", "gamma", "=", "1.", ",", "maxiter", "=", "2000", ",", "tol", "=", "1e-8", ",", "\n", "verbose", "=", "False", ",", "f0", "=", "0.", ",", "compute_grad", "=", "False", ",", "Kb", "=", "None", ")", ":", "\n", "    ", "\"\"\"Compute the Wasserstein divergence between histograms.\n\n    Parameters\n    ----------\n    p: numpy array (width, width)\n        Must be non-negative.\n    Q: numpy array (n_imgs, width, width)\n        Must be non-negative.\n    M: numpy array (width, width)\n        One dimensional kernel.\n        if None, taken as euclidean gram matrix over [1:n_features]\n        normalized by its median.\n    epsilon: float > 0.\n        Entropy weight. (optional, default 5 / n_features)\n    maxiter: int > 0.\n        Maximum number of iterations of the Sinkhorn algorithm.\n    tol: float >= 0.\n        Precision threshold of the Sinkhorn algorithm.\n        (optional, default 1e-10)\n    returnlog: boolean.\n        default False. if True, a list of errors is returned.\n    returnmarginal: boolean.\n        default False. if True, returns the transport marginal.\n\n    Returns\n    -------\n    float.\n    Wasserstein divergence between p and q.\n\n    \"\"\"", "\n", "if", "Q", ".", "ndimension", "(", ")", "==", "2", ":", "\n", "        ", "Q", "=", "Q", "[", "None", ",", ":", ",", ":", "]", "\n", "", "if", "P", ".", "ndimension", "(", ")", "==", "2", ":", "\n", "        ", "P", "=", "P", "[", "None", ",", ":", ",", ":", "]", "\n", "", "Qs", "=", "Q", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ")", ")", "\n", "Ps", "=", "P", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ")", ")", "\n", "\n", "f", "=", "gamma", "*", "(", "Qs", "[", "None", ",", ":", "]", "+", "Ps", "[", ":", ",", "None", "]", ")", "+", "epsilon", "*", "f0", "\n", "idq", "=", "Qs", ">", "-", "1e-2", "\n", "idp", "=", "Ps", ">", "-", "1e-2", "\n", "if", "compute_grad", ":", "\n", "        ", "g", "=", "torch", ".", "ones", "(", "len", "(", "P", ")", ",", "*", "Q", ".", "shape", ",", "dtype", "=", "Q", ".", "dtype", ",", "device", "=", "Q", ".", "device", ")", "\n", "g", "*=", "gamma", "*", "(", "1", "-", "10", "**", "(", "20", "*", "epsilon", "/", "gamma", ")", ")", "\n", "", "Q", "=", "Q", "[", "idq", "]", "\n", "P", "=", "P", "[", "idp", "]", "\n", "\n", "fi", "=", "gamma", "/", "(", "gamma", "+", "epsilon", ")", "\n", "\n", "log", "=", "{", "'cstr'", ":", "[", "]", ",", "'obj'", ":", "[", "]", ",", "'flag'", ":", "0", ",", "'a'", ":", "[", "]", ",", "'b'", ":", "[", "]", "}", "\n", "cstr", "=", "10", "\n", "if", "Kb", "is", "None", ":", "\n", "        ", "b", "=", "torch", ".", "ones_like", "(", "Q", ")", "[", "None", ",", ":", "]", "\n", "Kb", "=", "convol_huge_imgs", "(", "b", ",", "K", ")", "\n", "\n", "", "bold", "=", "b", ".", "clone", "(", ")", "\n", "for", "i", "in", "range", "(", "maxiter", ")", ":", "\n", "        ", "a", "=", "(", "P", "[", ":", ",", "None", ",", ":", ",", ":", "]", "/", "Kb", ")", "**", "fi", "\n", "Ka", "=", "convol_huge_imgs", "(", "a", ",", "K", ".", "t", "(", ")", ")", "\n", "b", "=", "(", "Q", "[", "None", ",", ":", ",", ":", ",", ":", "]", "/", "Ka", ")", "**", "fi", "\n", "Kb", "=", "convol_huge_imgs", "(", "b", ",", "K", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "i", "%", "10", "==", "0", ":", "\n", "                ", "cstr", "=", "abs", "(", "bold", "-", "b", ")", ".", "max", "(", ")", "\n", "cstr", "/=", "max", "(", "1", ",", "abs", "(", "bold", ")", ".", "max", "(", ")", ",", "abs", "(", "b", ")", ".", "max", "(", ")", ")", "\n", "", "bold", "=", "b", ".", "clone", "(", ")", "\n", "log", "[", "\"cstr\"", "]", ".", "append", "(", "cstr", ")", "\n", "\n", "if", "cstr", "<", "tol", ":", "\n", "                ", "break", "\n", "", "if", "torch", ".", "isnan", "(", "Kb", ")", ".", "any", "(", ")", ":", "\n", "                ", "warnings", ".", "warn", "(", "\"Numerical Errors ! Stopped at last stable \"", "\n", "\"iteration.\"", ")", "\n", "break", "\n", "", "", "", "if", "i", "==", "maxiter", "-", "1", "and", "verbose", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"*** Maxiter reached ! err = {} ***\"", ".", "format", "(", "cstr", ")", ")", "\n", "log", "[", "'flag'", "]", "=", "3", "\n", "", "plsum", "=", "(", "a", "*", "Kb", ")", ".", "sum", "(", "(", "2", ",", "3", ")", ")", "\n", "\n", "for", "j", "in", "range", "(", "len", "(", "Q", ")", ")", ":", "\n", "        ", "if", "idq", "[", "j", "]", ":", "\n", "            ", "f", "[", "idp", ",", "j", "]", "+=", "-", "(", "epsilon", "+", "2", "*", "gamma", ")", "*", "plsum", "[", ":", ",", "j", "]", "\n", "\n", "", "", "if", "compute_grad", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "Q", ")", ")", ":", "\n", "            ", "if", "idq", "[", "j", "]", ":", "\n", "                ", "g", "[", "idp", ",", "j", "]", "=", "gamma", "*", "(", "1", "-", "a", "[", ":", ",", "j", "]", "**", "(", "-", "epsilon", "/", "gamma", ")", ")", "\n", "", "", "return", "f", ",", "g", ",", "Kb", "\n", "", "return", "f", ",", "0.", ",", "Kb", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.monster_img_log": [[865, 943], ["torch.log.sum", "torch.log.sum", "torch.log", "torch.log", "torch.zeros", "sinkhorn.convol_huge_imgs_log", "torch.zeros.clone", "range", "torch.log.ndimension", "torch.log.ndimension", "torch.ones", "len", "sinkhorn.convol_huge_imgs_log", "sinkhorn.convol_huge_imgs_log", "warnings.warn", "torch.exp().sum", "len", "K.t", "torch.no_grad", "torch.isnan().any", "torch.zeros.clone", "log[].append", "ValueError", "abs().max", "max", "torch.exp", "torch.exp", "torch.isnan", "abs().max", "abs().max", "abs", "abs", "abs"], "function", ["home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.convol_huge_imgs_log", "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.convol_huge_imgs_log", "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.convol_huge_imgs_log"], ["", "def", "monster_img_log", "(", "P", ",", "Q", ",", "K", ",", "epsilon", "=", "0.01", ",", "gamma", "=", "1.", ",", "maxiter", "=", "2000", ",", "tol", "=", "1e-7", ",", "\n", "verbose", "=", "False", ",", "f0", "=", "0.", ",", "compute_grad", "=", "False", ",", "Kb", "=", "None", ")", ":", "\n", "    ", "\"\"\"Compute the Wasserstein divergence between histograms.\n\n    Parameters\n    ----------\n    p: numpy array (width, width)\n        Must be non-negative.\n    Q: numpy array (n_imgs, width, width)\n        Must be non-negative.\n    M: numpy array (width, width)\n        One dimensional kernel.\n        if None, taken as euclidean gram matrix over [1:n_features]\n        normalized by its median.\n    epsilon: float > 0.\n        Entropy weight. (optional, default 5 / n_features)\n    maxiter: int > 0.\n        Maximum number of iterations of the Sinkhorn algorithm.\n    tol: float >= 0.\n        Precision threshold of the Sinkhorn algorithm.\n        (optional, default 1e-10)\n    returnlog: boolean.\n        default False. if True, a list of errors is returned.\n    returnmarginal: boolean.\n        default False. if True, returns the transport marginal.\n\n    Returns\n    -------\n    float.\n    Wasserstein divergence between p and q.\n\n    \"\"\"", "\n", "if", "Q", ".", "ndimension", "(", ")", "==", "2", ":", "\n", "        ", "Q", "=", "Q", "[", "None", ",", ":", ",", ":", "]", "\n", "", "if", "P", ".", "ndimension", "(", ")", "==", "2", ":", "\n", "        ", "P", "=", "P", "[", "None", ",", ":", ",", ":", "]", "\n", "", "Qs", "=", "Q", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ")", ")", "\n", "Ps", "=", "P", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ")", ")", "\n", "f", "=", "gamma", "*", "(", "Qs", "[", "None", ",", ":", "]", "+", "Ps", "[", ":", ",", "None", "]", ")", "+", "epsilon", "*", "f0", "\n", "P", "=", "torch", ".", "log", "(", "P", "+", "1e-100", ")", "\n", "Q", "=", "torch", ".", "log", "(", "Q", "+", "1e-100", ")", "\n", "\n", "if", "compute_grad", ":", "\n", "        ", "g", "=", "torch", ".", "ones", "(", "len", "(", "P", ")", ",", "*", "Q", ".", "shape", ",", "dtype", "=", "Q", ".", "dtype", ",", "device", "=", "Q", ".", "device", ")", "\n", "\n", "", "fi", "=", "gamma", "/", "(", "gamma", "+", "epsilon", ")", "\n", "\n", "log", "=", "{", "'cstr'", ":", "[", "]", ",", "'obj'", ":", "[", "]", ",", "'flag'", ":", "0", ",", "'a'", ":", "[", "]", ",", "'b'", ":", "[", "]", "}", "\n", "cstr", "=", "10", "\n", "b", "=", "torch", ".", "zeros", "(", "len", "(", "Ps", ")", ",", "*", "Q", ".", "shape", ",", "dtype", "=", "Q", ".", "dtype", ",", "device", "=", "Q", ".", "device", ")", "\n", "Kb", "=", "convol_huge_imgs_log", "(", "b", ",", "K", ")", "\n", "bold", "=", "b", ".", "clone", "(", ")", "\n", "for", "i", "in", "range", "(", "maxiter", ")", ":", "\n", "        ", "a", "=", "fi", "*", "(", "P", "[", ":", ",", "None", ",", ":", ",", ":", "]", "-", "Kb", ")", "\n", "Ka", "=", "convol_huge_imgs_log", "(", "a", ",", "K", ".", "t", "(", ")", ")", "\n", "b", "=", "fi", "*", "(", "Q", "[", "None", ",", ":", ",", ":", ",", ":", "]", "-", "Ka", ")", "\n", "Kb", "=", "convol_huge_imgs_log", "(", "b", ",", "K", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "torch", ".", "isnan", "(", "Kb", ")", ".", "any", "(", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"Nan values found in Sinkhorn :(\"", ")", "\n", "", "if", "i", "%", "10", "==", "0", ":", "\n", "                ", "cstr", "=", "abs", "(", "bold", "-", "b", ")", ".", "max", "(", ")", "\n", "cstr", "/=", "max", "(", "1", ",", "abs", "(", "bold", ")", ".", "max", "(", ")", ",", "abs", "(", "b", ")", ".", "max", "(", ")", ")", "\n", "", "bold", "=", "b", ".", "clone", "(", ")", "\n", "log", "[", "\"cstr\"", "]", ".", "append", "(", "cstr", ")", "\n", "\n", "if", "cstr", "<", "tol", ":", "\n", "                ", "break", "\n", "", "", "", "if", "i", "==", "maxiter", "-", "1", "and", "verbose", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"*** Maxiter reached ! err = {} ***\"", ".", "format", "(", "cstr", ")", ")", "\n", "log", "[", "'flag'", "]", "=", "3", "\n", "\n", "", "f", "+=", "-", "(", "epsilon", "+", "2", "*", "gamma", ")", "*", "torch", ".", "exp", "(", "a", "+", "Kb", ")", ".", "sum", "(", "(", "2", ",", "3", ")", ")", "\n", "\n", "if", "compute_grad", ":", "\n", "        ", "g", "=", "gamma", "*", "(", "1", "-", "torch", ".", "exp", "(", "-", "a", "*", "epsilon", "/", "gamma", ")", ")", "\n", "return", "f", ",", "g", ",", "Kb", "\n", "", "return", "f", ",", "0.", ",", "Kb", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.monster": [[945, 1038], ["Q.t.t", "P.t.t", "Q.t.sum", "P.t.sum", "torch.ones.clone", "range", "range", "torch.ones", "Q.t.ndimension", "P.t.ndimension", "torch.ones", "sinkhorn.convol_huge", "sinkhorn.convol_huge", "sinkhorn.convol_huge", "warnings.warn", "range", "len", "K.t", "torch.no_grad", "torch.ones.clone", "log[].append", "torch.isnan().any", "abs().max", "max", "warnings.warn", "abs().max", "abs().max", "torch.isnan", "abs", "abs", "abs", "a[].t"], "function", ["home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.convol_huge", "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.convol_huge", "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.convol_huge"], ["", "def", "monster", "(", "P", ",", "Q", ",", "K", ",", "epsilon", "=", "0.01", ",", "gamma", "=", "1.", ",", "maxiter", "=", "2000", ",", "tol", "=", "1e-7", ",", "\n", "verbose", "=", "False", ",", "f0", "=", "0.", ",", "compute_grad", "=", "False", ",", "Kb", "=", "None", ")", ":", "\n", "    ", "\"\"\"Compute the Wasserstein divergence between histograms.\n\n    Parameters\n    ----------\n    p: numpy array (width, width)\n        Must be non-negative.\n    Q: numpy array (n_imgs, width, width)\n        Must be non-negative.\n    M: numpy array (width, width)\n        One dimensional kernel.\n        if None, taken as euclidean gram matrix over [1:n_features]\n        normalized by its median.\n    epsilon: float > 0.\n        Entropy weight. (optional, default 5 / n_features)\n    maxiter: int > 0.\n        Maximum number of iterations of the Sinkhorn algorithm.\n    tol: float >= 0.\n        Precision threshold of the Sinkhorn algorithm.\n        (optional, default 1e-10)\n    returnlog: boolean.\n        default False. if True, a list of errors is returned.\n    returnmarginal: boolean.\n        default False. if True, returns the transport marginal.\n\n    Returns\n    -------\n    float.\n    Wasserstein divergence between p and q.\n\n    \"\"\"", "\n", "if", "compute_grad", ":", "\n", "        ", "g", "=", "torch", ".", "ones", "(", "len", "(", "P", ")", ",", "*", "Q", ".", "shape", ",", "dtype", "=", "Q", ".", "dtype", ",", "device", "=", "Q", ".", "device", ")", "\n", "g", "*=", "gamma", "*", "(", "1", "-", "10", "**", "(", "20", "*", "epsilon", "/", "gamma", ")", ")", "\n", "", "Q", "=", "Q", ".", "t", "(", ")", "\n", "P", "=", "P", ".", "t", "(", ")", "\n", "if", "Q", ".", "ndimension", "(", ")", "==", "1", ":", "\n", "        ", "Q", "=", "Q", "[", ":", ",", "None", "]", "\n", "", "if", "P", ".", "ndimension", "(", ")", "==", "1", ":", "\n", "        ", "P", "=", "P", "[", ":", ",", "None", "]", "\n", "", "Qs", "=", "Q", ".", "sum", "(", "dim", "=", "0", ")", "\n", "Ps", "=", "P", ".", "sum", "(", "dim", "=", "0", ")", "\n", "f", "=", "gamma", "*", "(", "Qs", "[", "None", ",", ":", "]", "+", "Ps", "[", ":", ",", "None", "]", ")", "+", "epsilon", "*", "f0", "\n", "n", ",", "m", "=", "f", ".", "shape", "\n", "idq", "=", "Qs", ">", "-", "1e-2", "\n", "idp", "=", "Ps", ">", "-", "1e-2", "\n", "\n", "Q", "=", "Q", "[", ":", ",", "idq", "]", "\n", "P", "=", "P", "[", ":", ",", "idp", "]", "\n", "\n", "fi", "=", "gamma", "/", "(", "gamma", "+", "epsilon", ")", "\n", "\n", "log", "=", "{", "'cstr'", ":", "[", "]", ",", "'obj'", ":", "[", "]", ",", "'flag'", ":", "0", ",", "'a'", ":", "[", "]", ",", "'b'", ":", "[", "]", "}", "\n", "cstr", "=", "10", "\n", "if", "Kb", "is", "None", ":", "\n", "        ", "b", "=", "torch", ".", "ones", "(", "(", "*", "P", ".", "shape", ",", "Q", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "P", ".", "dtype", ",", "device", "=", "P", ".", "device", ")", "\n", "Kb", "=", "convol_huge", "(", "b", ",", "K", ")", "\n", "\n", "", "bold", "=", "b", ".", "clone", "(", ")", "\n", "for", "i", "in", "range", "(", "maxiter", ")", ":", "\n", "        ", "a", "=", "(", "P", "[", ":", ",", ":", ",", "None", "]", "/", "Kb", ")", "**", "fi", "\n", "Ka", "=", "convol_huge", "(", "a", ",", "K", ".", "t", "(", ")", ")", "\n", "b", "=", "(", "Q", "[", ":", ",", "None", ",", ":", "]", "/", "Ka", ")", "**", "fi", "\n", "Kb", "=", "convol_huge", "(", "b", ",", "K", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "i", "%", "10", "==", "0", ":", "\n", "                ", "cstr", "=", "abs", "(", "bold", "-", "b", ")", ".", "max", "(", ")", "\n", "cstr", "/=", "max", "(", "1", ",", "abs", "(", "bold", ")", ".", "max", "(", ")", ",", "abs", "(", "b", ")", ".", "max", "(", ")", ")", "\n", "", "bold", "=", "b", ".", "clone", "(", ")", "\n", "log", "[", "\"cstr\"", "]", ".", "append", "(", "cstr", ")", "\n", "\n", "if", "cstr", "<", "tol", ":", "\n", "                ", "break", "\n", "", "if", "torch", ".", "isnan", "(", "Kb", ")", ".", "any", "(", ")", ":", "\n", "                ", "warnings", ".", "warn", "(", "\"Numerical Errors ! Stopped at last stable \"", "\n", "\"iteration.\"", ")", "\n", "break", "\n", "", "", "", "if", "i", "==", "maxiter", "-", "1", "and", "verbose", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"*** Maxiter reached ! err = {} ***\"", ".", "format", "(", "cstr", ")", ")", "\n", "log", "[", "'flag'", "]", "=", "3", "\n", "", "plsum", "=", "(", "a", "*", "Kb", ")", ".", "sum", "(", "0", ")", "\n", "\n", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "        ", "if", "idq", "[", "j", "]", ":", "\n", "            ", "f", "[", "idp", ",", "j", "]", "+=", "-", "(", "epsilon", "+", "2", "*", "gamma", ")", "*", "plsum", "[", ":", ",", "j", "]", "\n", "", "", "if", "compute_grad", ":", "\n", "        ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "            ", "if", "idq", "[", "j", "]", ":", "\n", "                ", "g", "[", "idp", ",", "j", "]", "=", "gamma", "*", "(", "1", "-", "a", "[", ":", ",", ":", ",", "j", "]", ".", "t", "(", ")", "**", "(", "-", "epsilon", "/", "gamma", ")", ")", "\n", "", "", "return", "f", ",", "g", ",", "Kb", "\n", "", "return", "f", ",", "0.", ",", "Kb", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.monster_log": [[1040, 1132], ["Q.t.t", "P.t.t", "Q.t.sum", "P.t.sum", "torch.zeros_like", "torch.zeros_like.clone", "range", "numpy.exp().sum", "range", "torch.ones", "Q.t.ndimension", "P.t.ndimension", "sinkhorn.convol_huge_log", "sinkhorn.convol_huge_log", "sinkhorn.convol_huge_log", "warnings.warn", "range", "len", "K.t", "torch.no_grad", "torch.zeros_like.clone", "log[].append", "numpy.exp", "abs().max", "max", "abs().max", "abs().max", "torch.exp", "abs", "abs", "abs"], "function", ["home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.convol_huge_log", "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.convol_huge_log", "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.convol_huge_log"], ["", "def", "monster_log", "(", "P", ",", "Q", ",", "K", ",", "epsilon", "=", "0.01", ",", "gamma", "=", "1.", ",", "maxiter", "=", "2000", ",", "tol", "=", "1e-7", ",", "\n", "verbose", "=", "False", ",", "f0", "=", "0.", ",", "compute_grad", "=", "False", ",", "Kb", "=", "None", ")", ":", "\n", "    ", "\"\"\"Compute the Wasserstein divergence between histograms.\n\n    Parameters\n    ----------\n    p: numpy array (width, width)\n        Must be non-negative.\n    Q: numpy array (n_imgs, width, width)\n        Must be non-negative.\n    M: numpy array (width, width)\n        One dimensional kernel.\n        if None, taken as euclidean gram matrix over [1:n_features]\n        normalized by its median.\n    epsilon: float > 0.\n        Entropy weight. (optional, default 5 / n_features)\n    maxiter: int > 0.\n        Maximum number of iterations of the Sinkhorn algorithm.\n    tol: float >= 0.\n        Precision threshold of the Sinkhorn algorithm.\n        (optional, default 1e-10)\n    returnlog: boolean.\n        default False. if True, a list of errors is returned.\n    returnmarginal: boolean.\n        default False. if True, returns the transport marginal.\n\n    Returns\n    -------\n    float.\n    Wasserstein divergence between p and q.\n\n    \"\"\"", "\n", "if", "compute_grad", ":", "\n", "        ", "g", "=", "torch", ".", "ones", "(", "len", "(", "P", ")", ",", "*", "Q", ".", "shape", ",", "dtype", "=", "Q", ".", "dtype", ",", "device", "=", "Q", ".", "device", ")", "\n", "g", "*=", "gamma", "*", "(", "1", "-", "10", "**", "(", "20", "*", "epsilon", "/", "gamma", ")", ")", "\n", "", "Q", "=", "Q", ".", "t", "(", ")", "\n", "P", "=", "P", ".", "t", "(", ")", "\n", "if", "Q", ".", "ndimension", "(", ")", "==", "1", ":", "\n", "        ", "Q", "=", "Q", "[", ":", ",", "None", "]", "\n", "", "if", "P", ".", "ndimension", "(", ")", "==", "1", ":", "\n", "        ", "P", "=", "P", "[", ":", ",", "None", "]", "\n", "", "Qs", "=", "Q", ".", "sum", "(", "dim", "=", "0", ")", "\n", "Ps", "=", "P", ".", "sum", "(", "dim", "=", "0", ")", "\n", "f", "=", "gamma", "*", "(", "Qs", "[", "None", ",", ":", "]", "+", "Ps", "[", ":", ",", "None", "]", ")", "+", "epsilon", "*", "f0", "\n", "n", ",", "m", "=", "f", ".", "shape", "\n", "idq", "=", "Qs", ">", "-", "1e-2", "\n", "idp", "=", "Ps", ">", "-", "1e-2", "\n", "\n", "Q", "=", "Q", "[", ":", ",", "idp", "]", "\n", "P", "=", "P", "[", ":", ",", "idq", "]", "\n", "\n", "fi", "=", "gamma", "/", "(", "gamma", "+", "epsilon", ")", "\n", "\n", "log", "=", "{", "'cstr'", ":", "[", "]", ",", "'obj'", ":", "[", "]", ",", "'flag'", ":", "0", ",", "'a'", ":", "[", "]", ",", "'b'", ":", "[", "]", "}", "\n", "cstr", "=", "10", "\n", "b", "=", "torch", ".", "zeros_like", "(", "(", "*", "P", ".", "shape", ",", "Q", ".", "shape", "[", "1", "]", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n", "if", "Kb", "is", "None", ":", "\n", "        ", "Kb", "=", "convol_huge_log", "(", "b", ",", "K", ")", "\n", "\n", "", "bold", "=", "b", ".", "clone", "(", ")", "\n", "for", "i", "in", "range", "(", "maxiter", ")", ":", "\n", "        ", "a", "=", "fi", "*", "(", "P", "[", ":", ",", ":", ",", "None", "]", "-", "Kb", ")", "\n", "Ka", "=", "convol_huge_log", "(", "a", ",", "K", ".", "t", "(", ")", ")", "\n", "b", "=", "fi", "*", "(", "Q", "[", ":", ",", "None", ",", ":", "]", "-", "Ka", ")", "\n", "Kb", "=", "convol_huge_log", "(", "b", ",", "K", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "i", "%", "10", "==", "0", ":", "\n", "                ", "cstr", "=", "abs", "(", "bold", "-", "b", ")", ".", "max", "(", ")", "\n", "cstr", "/=", "max", "(", "1", ",", "abs", "(", "bold", ")", ".", "max", "(", ")", ",", "abs", "(", "b", ")", ".", "max", "(", ")", ")", "\n", "", "bold", "=", "b", ".", "clone", "(", ")", "\n", "log", "[", "\"cstr\"", "]", ".", "append", "(", "cstr", ")", "\n", "\n", "if", "cstr", "<", "tol", ":", "\n", "                ", "break", "\n", "\n", "", "", "", "if", "i", "==", "maxiter", "-", "1", "and", "verbose", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"*** Maxiter reached ! err = {} ***\"", ".", "format", "(", "cstr", ")", ")", "\n", "log", "[", "'flag'", "]", "=", "3", "\n", "", "plsum", "=", "np", ".", "exp", "(", "a", "+", "Kb", ")", ".", "sum", "(", "0", ")", "\n", "\n", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "        ", "if", "idq", "[", "j", "]", ":", "\n", "            ", "f", "[", "idp", ",", "j", "]", "+=", "-", "(", "epsilon", "+", "2", "*", "gamma", ")", "*", "plsum", "[", ":", ",", "j", "]", "\n", "", "", "if", "compute_grad", ":", "\n", "        ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "            ", "if", "idq", "[", "j", "]", ":", "\n", "                ", "g", "[", "idp", ",", "j", "]", "=", "1", "-", "torch", ".", "exp", "(", "-", "epsilon", "*", "a", "[", ":", ",", ":", ",", "j", "]", "/", "gamma", ")", "\n", "g", "[", "idp", ",", "j", "]", "*=", "gamma", "\n", "", "", "return", "f", ",", "g", ",", "Kb", "\n", "", "return", "f", ",", "0.", ",", "Kb", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.divergencekl": [[1134, 1163], ["wxy", "wxx", "wxx", "P.ndimension", "P.ndimension"], "function", ["None"], ["", "def", "divergencekl", "(", "P", ",", "Q", ",", "K", ",", "epsilon", "=", "0.01", ",", "gamma", "=", "1.", ",", "maxiter", "=", "2000", ",", "tol", "=", "1e-7", ",", "\n", "verbose", "=", "False", ",", "f0", "=", "0.", ",", "compute_grad", "=", "False", ",", "log", "=", "False", ",", "\n", "Kb", "=", "None", ",", "axx", "=", "None", ",", "ayy", "=", "None", ")", ":", "\n", "    ", "if", "log", ":", "\n", "        ", "if", "P", ".", "ndimension", "(", ")", "==", "3", ":", "\n", "            ", "wxy", "=", "monster_img_log", "\n", "wxx", "=", "negentropy_img_log", "\n", "", "else", ":", "\n", "            ", "wxy", "=", "monster_log", "\n", "wxx", "=", "negentropy_log", "\n", "", "", "else", ":", "\n", "        ", "if", "P", ".", "ndimension", "(", ")", "==", "3", ":", "\n", "            ", "wxy", "=", "monster_img", "\n", "wxx", "=", "negentropy_img", "\n", "", "else", ":", "\n", "            ", "wxy", "=", "monster", "\n", "wxx", "=", "negentropy", "\n", "", "", "fxy", ",", "gxy", ",", "Kb", "=", "wxy", "(", "P", ",", "Q", ",", "K", ",", "epsilon", ",", "gamma", ",", "maxiter", ",", "tol", ",", "\n", "verbose", ",", "f0", ",", "compute_grad", ",", "Kb", "=", "Kb", ")", "\n", "fxx", ",", "gxx", ",", "axx", "=", "wxx", "(", "P", ",", "K", ",", "epsilon", ",", "gamma", ",", "maxiter", ",", "tol", ",", "\n", "verbose", ",", "f0", ",", "compute_grad", ",", "a", "=", "axx", ")", "\n", "fyy", ",", "_", ",", "ayy", "=", "wxx", "(", "Q", ",", "K", ",", "epsilon", ",", "gamma", ",", "maxiter", ",", "tol", ",", "\n", "verbose", ",", "f0", ",", "compute_grad", "=", "False", ",", "a", "=", "ayy", ")", "\n", "f", "=", "fxy", "-", "0.5", "*", "(", "fxx", "[", ":", ",", "None", "]", "+", "fyy", "[", "None", ",", ":", "]", ")", "\n", "G", "=", "0.", "\n", "if", "compute_grad", ":", "\n", "        ", "G", "=", "gxy", "-", "gxx", "[", ":", ",", "None", "]", "\n", "# del fxy, gxy, fxx, gxx, fyy", "\n", "", "return", "f", ",", "G", ",", "Kb", ",", "axx", ",", "ayy", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.negentropy_img_log": [[1165, 1233], ["torch.log.sum", "torch.log", "torch.zeros_like.clone", "range", "torch.log.ndimension", "torch.zeros_like", "sinkhorn.convol_imgs_log", "warnings.warn", "torch.exp().sum", "torch.no_grad", "torch.zeros_like.clone", "log[].append", "abs().max", "max", "torch.exp", "torch.exp", "torch.zeros_like.max", "a.clone.max", "abs"], "function", ["home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.convol_imgs_log"], ["", "def", "negentropy_img_log", "(", "P", ",", "K", ",", "epsilon", "=", "0.01", ",", "gamma", "=", "1.", ",", "maxiter", "=", "100", ",", "tol", "=", "1e-7", ",", "\n", "verbose", "=", "False", ",", "f0", "=", "0.", ",", "compute_grad", "=", "False", ",", "a", "=", "None", ")", ":", "\n", "    ", "\"\"\"Compute the Negentropy term W(p, p) elementwise.\n\n    Parameters\n    ----------\n    P: numpy array (n_hists, width, width)\n        Must be non-negative.\n    M: numpy array (width, width)\n        One dimensional kernel.\n        if None, taken as euclidean gram matrix over [1:n_features]\n        normalized by its median.\n    epsilon: float > 0.\n        Entropy weight. (optional, default 5 / n_features)\n    maxiter: int > 0.\n        Maximum number of iterations of the Sinkhorn algorithm.\n    tol: float >= 0.\n        Precision threshold of the Sinkhorn algorithm.\n        (optional, default 1e-10)\n    returnlog: boolean.\n        default False. if True, a list of errors is returned.\n    returnmarginal: boolean.\n        default False. if True, returns the transport marginal.\n\n    Returns\n    -------\n    float.\n    Wasserstein divergence between p and q.\n\n    \"\"\"", "\n", "if", "P", ".", "ndimension", "(", ")", "==", "2", ":", "\n", "        ", "P", "=", "P", "[", "None", ",", ":", ",", ":", "]", "\n", "", "if", "gamma", "==", "0.", ":", "\n", "        ", "fi", "=", "1.", "\n", "", "else", ":", "\n", "        ", "fi", "=", "gamma", "/", "(", "gamma", "+", "epsilon", ")", "\n", "", "Ps", "=", "P", ".", "sum", "(", "(", "1", ",", "2", ")", ")", "\n", "P", "=", "torch", ".", "log", "(", "P", "+", "1e-10", ")", "\n", "if", "a", "is", "None", ":", "\n", "        ", "a", "=", "torch", ".", "zeros_like", "(", "P", ",", "requires_grad", "=", "False", ")", "\n", "", "aold", "=", "a", ".", "clone", "(", ")", "\n", "log", "=", "{", "'cstr'", ":", "[", "]", ",", "'obj'", ":", "[", "]", ",", "'flag'", ":", "0", "}", "\n", "cstr", "=", "10", "\n", "# torch.set_grad_enabled(grad)", "\n", "for", "i", "in", "range", "(", "maxiter", ")", ":", "\n", "        ", "Ka", "=", "convol_imgs_log", "(", "a", ",", "K", ")", "\n", "a", "=", "0.5", "*", "(", "a", "+", "fi", "*", "(", "P", "-", "Ka", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "cstr", "=", "abs", "(", "a", "-", "aold", ")", ".", "max", "(", ")", "/", "max", "(", "1", ",", "a", ".", "max", "(", ")", ",", "aold", ".", "max", "(", ")", ")", "\n", "aold", "=", "a", ".", "clone", "(", ")", "\n", "log", "[", "\"cstr\"", "]", ".", "append", "(", "cstr", ")", "\n", "\n", "if", "cstr", "<", "tol", ":", "\n", "                ", "break", "\n", "", "", "", "if", "i", "==", "maxiter", "-", "1", "and", "verbose", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"*** Maxiter reached ! err = {} ***\"", ".", "format", "(", "cstr", ")", ")", "\n", "log", "[", "'flag'", "]", "=", "3", "\n", "", "if", "gamma", ":", "\n", "        ", "psum", "=", "torch", ".", "exp", "(", "a", "+", "Ka", ")", ".", "sum", "(", "(", "1", ",", "2", ")", ")", "\n", "f", "=", "-", "epsilon", "*", "psum", "\n", "f", "=", "f", "+", "gamma", "*", "(", "2", "*", "Ps", "-", "2", "*", "psum", ")", "\n", "", "else", ":", "\n", "        ", "f", "=", "2", "*", "(", "P", "*", "a", ")", ".", "sum", "(", "(", "1", ",", "2", ")", ")", "\n", "", "f", "=", "f", "+", "epsilon", "*", "f0", "\n", "if", "compute_grad", ":", "\n", "        ", "grad", "=", "gamma", "*", "(", "1", "-", "torch", ".", "exp", "(", "-", "a", "*", "epsilon", "/", "gamma", ")", ")", "\n", "return", "f", ",", "grad", ",", "a", "\n", "", "return", "f", ",", "0.", ",", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.wimgkl_parallel": [[1235, 1305], ["Q.sum", "P.sum", "torch.ones_like", "torch.zeros", "range", "Q.ndimension", "torch.ones_like.clone", "sinkhorn.convol_imgs", "len", "sinkhorn.convol_imgs", "sinkhorn.convol_imgs", "warnings.warn", "K.t", "torch.no_grad", "log[].append", "abs().max", "max", "torch.isnan().any", "torch.zeros.max", "plsum.max", "abs", "torch.isnan"], "function", ["home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.convol_imgs", "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.convol_imgs", "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.convol_imgs"], ["", "def", "wimgkl_parallel", "(", "P", ",", "Q", ",", "K", ",", "epsilon", "=", "0.01", ",", "gamma", "=", "1.", ",", "maxiter", "=", "2000", ",", "tol", "=", "1e-7", ",", "\n", "verbose", "=", "False", ",", "f0", "=", "0.", ",", "compute_grad", "=", "False", ",", "Kb", "=", "None", ")", ":", "\n", "    ", "\"\"\"Compute the Wasserstein divergence (p1, q1), (p2, q2) ...\n\n    Parameters\n    ----------\n    P: numpy array (width, width)\n        Must be non-negative.\n    Q: numpy array (n_imgs, width, width)\n        Must be non-negative.\n    M: numpy array (width, width)\n        One dimensional kernel.\n        if None, taken as euclidean gram matrix over [1:n_features]\n        normalized by its median.\n    epsilon: float > 0.\n        Entropy weight. (optional, default 5 / n_features)\n    maxiter: int > 0.\n        Maximum number of iterations of the Sinkhorn algorithm.\n    tol: float >= 0.\n        Precision threshold of the Sinkhorn algorithm.\n        (optional, default 1e-10)\n    returnlog: boolean.\n        default False. if True, a list of errors is returned.\n    returnmarginal: boolean.\n        default False. if True, returns the transport marginal.\n\n    Returns\n    -------\n    float.\n    Wasserstein divergence between p and q.\n\n    \"\"\"", "\n", "if", "Q", ".", "ndimension", "(", ")", "==", "2", ":", "\n", "        ", "Q", "=", "Q", "[", "None", ",", ":", ",", ":", "]", "\n", "", "Qs", "=", "Q", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ")", ")", "\n", "Ps", "=", "P", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ")", ")", "\n", "f", "=", "gamma", "*", "(", "Qs", "+", "Ps", ")", "\n", "\n", "fi", "=", "gamma", "/", "(", "gamma", "+", "epsilon", ")", "\n", "\n", "log", "=", "{", "'cstr'", ":", "[", "]", ",", "'obj'", ":", "[", "]", ",", "'flag'", ":", "0", ",", "'a'", ":", "[", "]", ",", "'b'", ":", "[", "]", "}", "\n", "cstr", "=", "10", "\n", "bold", "=", "torch", ".", "ones_like", "(", "Q", ",", "requires_grad", "=", "False", ")", "\n", "if", "Kb", "is", "None", ":", "\n", "        ", "b", "=", "bold", ".", "clone", "(", ")", "\n", "Kb", "=", "convol_imgs", "(", "b", ",", "K", ")", "\n", "", "plsumold", "=", "torch", ".", "zeros", "(", "len", "(", "Q", ")", ",", "dtype", "=", "Q", ".", "dtype", ",", "device", "=", "Q", ".", "device", ")", "\n", "for", "i", "in", "range", "(", "maxiter", ")", ":", "\n", "        ", "a", "=", "(", "P", "/", "Kb", ")", "**", "fi", "\n", "Ka", "=", "convol_imgs", "(", "a", ",", "K", ".", "t", "(", ")", ")", "\n", "b", "=", "(", "Q", "/", "Ka", ")", "**", "fi", "\n", "Kb", "=", "convol_imgs", "(", "b", ",", "K", ")", "\n", "plsum", "=", "(", "a", "*", "Kb", ")", ".", "sum", "(", "(", "1", ",", "2", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "cstr", "=", "abs", "(", "plsumold", "-", "plsum", ")", ".", "max", "(", ")", "/", "max", "(", "1", ",", "plsumold", ".", "max", "(", ")", ",", "\n", "plsum", ".", "max", "(", ")", ")", "\n", "plsumold", "=", "plsum", "\n", "log", "[", "\"cstr\"", "]", ".", "append", "(", "cstr", ")", "\n", "\n", "if", "cstr", "<", "tol", "or", "torch", ".", "isnan", "(", "plsum", ")", ".", "any", "(", ")", ":", "\n", "                ", "break", "\n", "", "", "", "if", "i", "==", "maxiter", "-", "1", "and", "verbose", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"*** Maxiter reached ! err = {} ***\"", ".", "format", "(", "cstr", ")", ")", "\n", "log", "[", "'flag'", "]", "=", "3", "\n", "", "f", "+=", "epsilon", "*", "(", "f0", "-", "plsum", ")", "\n", "f", "+=", "-", "2", "*", "gamma", "*", "plsum", "\n", "if", "compute_grad", ":", "\n", "        ", "g", "=", "gamma", "*", "(", "1", "-", "a", "**", "(", "-", "epsilon", "/", "gamma", ")", ")", "\n", "return", "f", ",", "g", ",", "Kb", "\n", "", "return", "f", ",", "0.", ",", "Kb", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.wkl_parallel": [[1307, 1388], ["Q.t.t", "P.t.t", "Q.t.sum", "P.t.sum", "torch.ones_like", "torch.ones_like", "range", "Q.t.ndimension", "P.t.ndimension", "b.clone.clone", "K.mm", "K.mm", "K.t().mm", "K.mm", "warnings.warn", "torch.no_grad", "bold.clone.clone", "log[].append", "K.t", "abs().max", "max", "abs().max", "abs().max", "abs", "abs", "abs"], "function", ["None"], ["", "def", "wkl_parallel", "(", "P", ",", "Q", ",", "K", ",", "epsilon", "=", "0.01", ",", "gamma", "=", "1.", ",", "maxiter", "=", "2000", ",", "tol", "=", "1e-7", ",", "\n", "verbose", "=", "False", ",", "f0", "=", "0.", ",", "compute_grad", "=", "False", ",", "Kb", "=", "None", ")", ":", "\n", "    ", "\"\"\"Compute the Wasserstein divergence (p1, q1), (p2, q2) ...\n\n    Parameters\n    ----------\n    P: numpy array (n_hists, dimension)\n        Must be non-negative.\n    Q: numpy array (n_hists, dimension)\n        Must be non-negative.\n    M: numpy array (width, width)\n        One dimensional kernel.\n        if None, taken as euclidean gram matrix over [1:n_features]\n        normalized by its median.\n    epsilon: float > 0.\n        Entropy weight. (optional, default 5 / n_features)\n    maxiter: int > 0.\n        Maximum number of iterations of the Sinkhorn algorithm.\n    tol: float >= 0.\n        Precision threshold of the Sinkhorn algorithm.\n        (optional, default 1e-10)\n    returnlog: boolean.\n        default False. if True, a list of errors is returned.\n    returnmarginal: boolean.\n        default False. if True, returns the transport marginal.\n\n    Returns\n    -------\n    float.\n    Wasserstein divergence between p and q.\n\n    \"\"\"", "\n", "Q", "=", "Q", ".", "t", "(", ")", "\n", "P", "=", "P", ".", "t", "(", ")", "\n", "if", "Q", ".", "ndimension", "(", ")", "==", "1", ":", "\n", "        ", "Q", "=", "Q", "[", ":", ",", "None", "]", "\n", "", "if", "P", ".", "ndimension", "(", ")", "==", "1", ":", "\n", "        ", "P", "=", "P", "[", ":", ",", "None", "]", "\n", "\n", "", "Qs", "=", "Q", ".", "sum", "(", "dim", "=", "0", ")", "\n", "Ps", "=", "P", ".", "sum", "(", "dim", "=", "0", ")", "\n", "f", "=", "gamma", "*", "(", "Qs", "+", "Ps", ")", "\n", "\n", "fi", "=", "gamma", "/", "(", "gamma", "+", "epsilon", ")", "\n", "\n", "log", "=", "{", "'cstr'", ":", "[", "]", ",", "'obj'", ":", "[", "]", ",", "'flag'", ":", "0", ",", "'a'", ":", "[", "]", ",", "'b'", ":", "[", "]", "}", "\n", "cstr", "=", "10", "\n", "bold", "=", "torch", ".", "ones_like", "(", "Q", ",", "requires_grad", "=", "False", ")", "\n", "if", "Kb", "is", "None", ":", "\n", "        ", "b", "=", "bold", ".", "clone", "(", ")", "\n", "Kb", "=", "K", ".", "mm", "(", "b", ")", "\n", "", "log", "=", "{", "'cstr'", ":", "[", "]", ",", "'obj'", ":", "[", "]", ",", "'flag'", ":", "0", ",", "'a'", ":", "[", "]", ",", "'b'", ":", "[", "]", "}", "\n", "cstr", "=", "10", "\n", "bold", "=", "torch", ".", "ones_like", "(", "Q", ",", "requires_grad", "=", "False", ")", "\n", "if", "Kb", "is", "None", ":", "\n", "        ", "Kb", "=", "K", ".", "mm", "(", "bold", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "maxiter", ")", ":", "\n", "        ", "a", "=", "(", "P", "/", "Kb", ")", "**", "fi", "\n", "Ka", "=", "K", ".", "t", "(", ")", ".", "mm", "(", "a", ")", "\n", "b", "=", "(", "Q", "/", "Ka", ")", "**", "fi", "\n", "Kb", "=", "K", ".", "mm", "(", "b", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "i", "%", "10", "==", "0", ":", "\n", "                ", "cstr", "=", "abs", "(", "bold", "-", "b", ")", ".", "max", "(", ")", "\n", "cstr", "/=", "max", "(", "1", ",", "abs", "(", "bold", ")", ".", "max", "(", ")", ",", "abs", "(", "b", ")", ".", "max", "(", ")", ")", "\n", "", "bold", "=", "b", ".", "clone", "(", ")", "\n", "log", "[", "\"cstr\"", "]", ".", "append", "(", "cstr", ")", "\n", "\n", "if", "cstr", "<", "tol", ":", "\n", "                ", "break", "\n", "", "", "", "if", "i", "==", "maxiter", "-", "1", "and", "verbose", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"*** Maxiter reached ! err = {} ***\"", ".", "format", "(", "cstr", ")", ")", "\n", "log", "[", "'flag'", "]", "=", "3", "\n", "", "plsum", "=", "(", "a", "*", "Kb", ")", ".", "sum", "(", "0", ")", "\n", "f", "+=", "epsilon", "*", "(", "f0", "-", "plsum", ")", "\n", "f", "+=", "-", "2", "*", "gamma", "*", "plsum", "\n", "if", "compute_grad", ":", "\n", "        ", "g", "=", "gamma", "*", "(", "1", "-", "a", "**", "(", "-", "epsilon", "/", "gamma", ")", ")", "\n", "return", "f", ",", "g", ",", "Kb", "\n", "", "return", "f", ",", "0.", ",", "Kb", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.sinkhorn.amarikl": [[1390, 1419], ["wxy", "wsym", "torch.zeros", "P.ndimension", "P.ndimension", "len"], "function", ["None"], ["", "def", "amarikl", "(", "P", ",", "Q", ",", "Qtild", ",", "K", ",", "epsilon", "=", "0.01", ",", "gamma", "=", "1.", ",", "maxiter", "=", "2000", ",", "tol", "=", "1e-7", ",", "\n", "verbose", "=", "False", ",", "f0", "=", "0.", ",", "compute_grad", "=", "False", ",", "log", "=", "False", ",", "\n", "Kb", "=", "None", ",", "normalize", "=", "True", ")", ":", "\n", "    ", "if", "log", ":", "\n", "        ", "if", "P", ".", "ndimension", "(", ")", "==", "3", ":", "\n", "            ", "wxy", "=", "monster_img_log", "\n", "wsym", "=", "wimgkl_parallel", "\n", "", "else", ":", "\n", "            ", "wxy", "=", "monster", "\n", "wsym", "=", "wimgkl_parallel", "\n", "", "", "else", ":", "\n", "        ", "if", "P", ".", "ndimension", "(", ")", "==", "3", ":", "\n", "            ", "wxy", "=", "monster_img", "\n", "wsym", "=", "wimgkl_parallel", "\n", "", "else", ":", "\n", "            ", "wxy", "=", "monster", "\n", "wsym", "=", "wkl_parallel", "\n", "", "", "fxy", ",", "gxy", ",", "Kb", "=", "wxy", "(", "P", ",", "Qtild", ",", "K", ",", "epsilon", ",", "gamma", ",", "maxiter", ",", "tol", ",", "\n", "verbose", ",", "f0", ",", "compute_grad", ",", "Kb", "=", "Kb", ")", "\n", "if", "normalize", ":", "\n", "        ", "fyky", ",", "_", ",", "_", "=", "wsym", "(", "Q", ",", "Qtild", ",", "K", ",", "epsilon", ",", "gamma", ",", "maxiter", ",", "tol", ",", "\n", "verbose", ",", "f0", ",", "compute_grad", ")", "\n", "", "else", ":", "\n", "        ", "fyky", "=", "torch", ".", "zeros", "(", "len", "(", "Q", ")", ",", "dtype", "=", "P", ".", "dtype", ")", "\n", "", "G", "=", "0.", "\n", "if", "compute_grad", ":", "\n", "        ", "G", "=", "gxy", "\n", "# del fxy, gxy, fxx, gxx, fyy", "\n", "", "return", "fxy", ",", "G", ",", "Kb", ",", "fyky", "\n", "", ""]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.utils.groundmetric": [[6, 34], ["numpy.arange().reshape().astype", "numpy.arange().reshape().astype", "numpy.meshgrid", "abs", "numpy.median", "numpy.arange().reshape", "numpy.arange().reshape", "numpy.arange", "numpy.arange"], "function", ["None"], ["def", "groundmetric", "(", "width", ",", "height", "=", "None", ",", "p", "=", "2", ",", "normed", "=", "False", ")", ":", "\n", "    ", "\"\"\"Compute ground metric matrix on the 1D grid 0:`n_features`.\n\n    Parameters\n    ----------\n    width : int\n        width of the matrix\n    height : int (optional, default equal to width)\n        height of the matrix\n    p: int > 0.\n        Power to raise the pairwise distance metrix. Quadratic by default.\n    normed: boolean (default True)\n        If True, the matrix is divided by its median.\n\n    Returns\n    -------\n    M: 2D array (width, height).\n\n    \"\"\"", "\n", "if", "height", "is", "None", ":", "\n", "        ", "height", "=", "width", "\n", "", "x", "=", "np", ".", "arange", "(", "0", ",", "width", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", ".", "astype", "(", "float", ")", "\n", "y", "=", "np", ".", "arange", "(", "0", ",", "height", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", ".", "astype", "(", "float", ")", "\n", "xx", ",", "yy", "=", "np", ".", "meshgrid", "(", "x", ",", "y", ")", "\n", "M", "=", "abs", "(", "xx", "-", "yy", ")", "**", "p", "\n", "if", "normed", ":", "\n", "        ", "M", "/=", "np", ".", "median", "(", "M", ")", "\n", "", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.utils.groundmetric_img": [[36, 60], ["utils.groundmetric", "utils.groundmetric2d", "numpy.median"], "function", ["home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.utils.groundmetric", "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.utils.groundmetric2d"], ["", "def", "groundmetric_img", "(", "width", ",", "height", "=", "None", ",", "p", "=", "2", ",", "normed", "=", "False", ")", ":", "\n", "    ", "\"\"\"Compute ground metric for convolutional Wasserstein.\n\n    Parameters\n    ----------\n\n    width, height : int,\n        shape of images\n    p: int, optional (default 2)\n        Power to raise the pairwise distance metrix. Quadratic by default.\n    normed: boolean (default True)\n        If True, the matrix is divided by its median.\n    Returns\n    -------\n    M: 2D array (width, height).\n    \"\"\"", "\n", "if", "height", "is", "None", ":", "\n", "        ", "height", "=", "width", "\n", "", "M", "=", "groundmetric", "(", "width", ",", "height", ",", "p", "=", "2", ",", "normed", "=", "False", ")", "\n", "if", "normed", ":", "\n", "        ", "Mlarge", "=", "groundmetric2d", "(", "width", ",", "height", ",", "p", "=", "2", ",", "normed", "=", "False", ")", "\n", "median", "=", "np", ".", "median", "(", "Mlarge", ")", "\n", "M", "/=", "median", "\n", "", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.utils.groundmetric2d": [[62, 88], ["utils.groundmetric", "groundmetric.reshape", "numpy.median"], "function", ["home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.utils.groundmetric"], ["", "def", "groundmetric2d", "(", "width", ",", "height", "=", "None", ",", "p", "=", "1", ",", "normed", "=", "False", ")", ":", "\n", "    ", "\"\"\"Compute ground metric matrix on the 2D grid (width, height).\n\n    Parameters\n    ----------\n    n_features: int > 0.\n    p: int > 0.\n        Power to raise the pairwise distance metrix. Quadratic by default.\n    normed: boolean (default True)\n        If True, the matrix is divided by its median.\n\n    Returns\n    -------\n    M: 2D array (n_features, n_features).\n\n    \"\"\"", "\n", "if", "height", "is", "None", ":", "\n", "        ", "height", "=", "width", "\n", "", "n_features", "=", "width", "*", "height", "\n", "M", "=", "groundmetric", "(", "width", ",", "height", ",", "p", "=", "2", ",", "normed", "=", "False", ")", "\n", "M", "=", "M", "[", ":", ",", "np", ".", "newaxis", ",", ":", ",", "np", ".", "newaxis", "]", "+", "M", "[", "np", ".", "newaxis", ",", ":", ",", "np", ".", "newaxis", ",", ":", "]", "\n", "M", "=", "M", ".", "reshape", "(", "n_features", ",", "n_features", ")", "**", "(", "p", "/", "2", ")", "\n", "\n", "if", "normed", ":", "\n", "        ", "M", "/=", "np", ".", "median", "(", "M", ")", "\n", "", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.utils.compute_gamma": [[90, 94], ["utils.get_module", "max", "M.max", "get_module.log"], "function", ["home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.utils.get_module"], ["", "def", "compute_gamma", "(", "tau", ",", "M", ")", ":", "\n", "    ", "\"\"\"Compute the sufficient KL weight for a full mass minimum.\"\"\"", "\n", "xp", "=", "get_module", "(", "M", ")", "\n", "return", "max", "(", "0.", ",", "-", "M", ".", "max", "(", ")", "/", "(", "2", "*", "xp", ".", "log", "(", "tau", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.utils.show_ts": [[96, 110], ["X.min", "X.max", "enumerate", "axes[].set_ylabel", "matplotlib.pyplot.subplots", "zip", "ax.imshow", "ax.set_xticks", "ax.set_yticks", "ax.set_title"], "function", ["home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.chars.plot_chars.imshow"], ["", "def", "show_ts", "(", "X", ",", "axes", "=", "None", ",", "title", "=", "\"\"", ",", "cmap", "=", "None", ",", "show_time", "=", "False", ",", "\n", "normalize", "=", "True", ")", ":", "\n", "    ", "T", ",", "p", ",", "p", "=", "X", ".", "shape", "\n", "vmin", "=", "X", ".", "min", "(", ")", "\n", "vmax", "=", "X", ".", "max", "(", ")", "\n", "if", "axes", "is", "None", ":", "\n", "        ", "f", ",", "axes", "=", "plt", ".", "subplots", "(", "T", ",", "1", ")", "\n", "", "for", "i", ",", "(", "img", ",", "ax", ")", "in", "enumerate", "(", "zip", "(", "X", ",", "axes", ")", ")", ":", "\n", "        ", "ax", ".", "imshow", "(", "img", ",", "cmap", "=", "cmap", ",", "vmin", "=", "vmin", ",", "vmax", "=", "vmax", ")", "\n", "ax", ".", "set_xticks", "(", "[", "]", ")", "\n", "ax", ".", "set_yticks", "(", "[", "]", ")", "\n", "if", "show_time", ":", "\n", "            ", "ax", ".", "set_title", "(", "f\"t = {i}\"", ")", "\n", "", "", "axes", "[", "0", "]", ".", "set_ylabel", "(", "title", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.utils.prox_simplex_all": [[112, 129], ["x[].nelement", "torch.cumsum", "torch.argmax", "torch.clamp", "torch.clamp.reshape", "x.reshape.ndimension", "x.reshape.reshape", "x.reshape.reshape", "torch.sort", "torch.cumsum", "len", "torch.argmax.type().to", "torch.arange", "torch.arange", "torch.argmax.type", "len"], "function", ["None"], ["", "def", "prox_simplex_all", "(", "x", ")", ":", "\n", "    ", "\"\"\"Projection on the simplex.\"\"\"", "\n", "shape", "=", "x", ".", "shape", "\n", "if", "x", ".", "ndimension", "(", ")", "==", "2", ":", "\n", "        ", "x", "=", "x", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "x", "=", "x", ".", "reshape", "(", "len", "(", "x", ")", ",", "-", "1", ")", "\n", "", "size", "=", "x", "[", "0", "]", ".", "nelement", "(", ")", "\n", "u", "=", "torch", ".", "sort", "(", "x", ",", "dim", "=", "1", ",", "descending", "=", "True", ")", "[", "0", "]", "\n", "cu", "=", "torch", ".", "cumsum", "(", "u", ",", "dim", "=", "1", ")", "-", "1", "\n", "ucu", "=", "u", "-", "cu", "/", "torch", ".", "arange", "(", "1.", ",", "size", "+", "1.", ",", "dtype", "=", "x", ".", "dtype", ",", "\n", "device", "=", "x", ".", "device", ")", "[", "None", ",", ":", "]", "\n", "cucu", "=", "torch", ".", "cumsum", "(", "ucu", ",", "dim", "=", "1", ")", "\n", "ss", "=", "torch", ".", "argmax", "(", "cucu", ",", "dim", "=", "1", ")", "\n", "vv", "=", "cu", "[", "torch", ".", "arange", "(", "len", "(", "x", ")", ")", ",", "ss", "]", "/", "(", "ss", ".", "type", "(", "x", ".", "dtype", ")", ".", "to", "(", "x", ".", "device", ")", "+", "1.", ")", "\n", "p", "=", "torch", ".", "clamp", "(", "x", "-", "vv", "[", ":", ",", "None", "]", ",", "0.", ",", "None", ")", "\n", "return", "p", ".", "reshape", "(", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.utils.get_module": [[131, 136], ["type"], "function", ["None"], ["", "def", "get_module", "(", "x", ")", ":", "\n", "    ", "if", "type", "(", "x", ")", "==", "np", ".", "ndarray", ":", "\n", "        ", "return", "np", "\n", "", "else", ":", "\n", "        ", "return", "torch", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.utils.kl": [[138, 158], ["utils.get_module", "get_module.zeros_like", "get_module.log"], "function", ["home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.utils.get_module"], ["", "", "def", "kl", "(", "p", ",", "q", ")", ":", "\n", "    ", "\"\"\"Compute Kullback-Leibler divergence.\n\n    Compute the element-wise sum of:\n    `p * log(p / q) + p - q`.\n\n    Parameters\n    ----------\n    p: array-like.\n        must be positive.\n    q: array-like.\n        must be positive, same shape and dimension of `p`.\n\n    \"\"\"", "\n", "xp", "=", "get_module", "(", "p", ")", "\n", "logpq", "=", "xp", ".", "zeros_like", "(", "p", ")", "\n", "logpq", "[", "p", ">", "0", "]", "=", "xp", ".", "log", "(", "p", "[", "p", ">", "0", "]", "/", "(", "q", "[", "p", ">", "0", "]", "+", "1e-300", ")", ")", "\n", "kl", "=", "(", "p", "*", "logpq", "+", "q", "-", "p", ")", "\n", "\n", "return", "kl", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.utils.wklobjective_plan": [[160, 167], ["kl().sum", "utils.kl", "utils.kl", "margs.sum", "plan.sum", "plan.sum", "utils.kl"], "function", ["home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.utils.kl", "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.utils.kl", "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.utils.kl"], ["", "def", "wklobjective_plan", "(", "plan", ",", "p", ",", "q", ",", "K", ",", "epsilon", ",", "gamma", ")", ":", "\n", "    ", "\"\"\"Compute unbalanced ot objective function naively.\"\"\"", "\n", "f", "=", "epsilon", "*", "kl", "(", "plan", ",", "K", ")", ".", "sum", "(", ")", "\n", "margs", "=", "kl", "(", "plan", ".", "sum", "(", "1", ")", ",", "p", ")", "+", "kl", "(", "plan", ".", "sum", "(", "0", ")", ",", "q", ")", "\n", "f", "+=", "gamma", "*", "margs", ".", "sum", "(", ")", "\n", "\n", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.utils.wklobjective": [[169, 179], ["utils.get_module", "utils.kl", "get_module.log"], "function", ["home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.utils.get_module", "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.utils.kl"], ["", "def", "wklobjective", "(", "a", ",", "Kb", ",", "p", ",", "q", ",", "f0", ",", "epsilon", ",", "gamma", ",", "u", "=", "0", ")", ":", "\n", "    ", "\"\"\"Compute unbalanced ot objective function for solver monitoring.\"\"\"", "\n", "xp", "=", "get_module", "(", "a", ")", "\n", "aKb", "=", "a", "*", "Kb", "\n", "f", "=", "gamma", "*", "kl", "(", "aKb", ",", "p", ")", "\n", "f", "+=", "(", "aKb", "*", "(", "epsilon", "*", "xp", ".", "log", "(", "a", "+", "1e-300", ")", "+", "u", "-", "epsilon", "-", "gamma", ")", ")", "\n", "f", "+=", "f0", "\n", "f", "+=", "gamma", "*", "q", "\n", "\n", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.utils.tonumpy": [[181, 185], ["isinstance", "x.detach().cpu().numpy", "x.detach().cpu", "x.detach"], "function", ["None"], ["", "def", "tonumpy", "(", "x", ")", ":", "\n", "    ", "if", "isinstance", "(", "x", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "x", "\n", "", "return", "x", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.utils.fancy_imshow": [[187, 200], ["ax.imshow", "range", "matplotlib.pyplot.subplots", "range", "numpy.round", "ax.text"], "function", ["home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.chars.plot_chars.imshow"], ["", "def", "fancy_imshow", "(", "matrix", ",", "ax", "=", "None", ")", ":", "\n", "    ", "\"\"\"imshow with values\"\"\"", "\n", "# The normal figure", "\n", "if", "ax", "is", "None", ":", "\n", "        ", "f", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "1", ")", "\n", "", "ax", ".", "imshow", "(", "matrix", ",", "interpolation", "=", "'None'", ",", "\n", "cmap", "=", "'viridis'", ",", "alpha", "=", "0.6", ")", "\n", "n_cols", ",", "n_rows", "=", "matrix", ".", "shape", "\n", "for", "j", "in", "range", "(", "n_cols", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "n_rows", ")", ":", "\n", "            ", "label", "=", "np", ".", "round", "(", "matrix", ".", "T", "[", "i", ",", "j", "]", ",", "2", ")", "\n", "ax", ".", "text", "(", "i", ",", "j", ",", "label", ",", "color", "=", "'black'", ",", "ha", "=", "'center'", ",", "va", "=", "'center'", ")", "\n", "", "", "return", "ax", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.utils.generate_time_series": [[202, 217], ["numpy.random.RandomState", "numpy.arange", "np.random.RandomState.randint", "torch.tensor", "torch.tensor", "numpy.zeros", "numpy.zeros", "np.random.RandomState.rand", "np.random.RandomState.rand"], "function", ["None"], ["", "def", "generate_time_series", "(", "dimension", ",", "n_times", ",", "seed", "=", "42", ",", "device", "=", "\"cpu\"", ",", "\n", "dtype", "=", "torch", ".", "float64", ",", "required_grad_X", "=", "True", ")", ":", "\n", "    ", "\"\"\"Fake time series.\"\"\"", "\n", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "x", "=", "np", ".", "zeros", "(", "(", "n_times", ",", "dimension", ",", "dimension", ")", ")", "+", "0.001", "\n", "y", "=", "np", ".", "zeros", "(", "(", "n_times", ",", "dimension", ",", "dimension", ")", ")", "+", "0.001", "\n", "ts", "=", "np", ".", "arange", "(", "n_times", ")", "\n", "index_x", ",", "index_y", "=", "rng", ".", "randint", "(", "dimension", ",", "size", "=", "(", "2", ",", "n_times", ")", ")", "\n", "x", "[", "ts", ",", "index_x", ",", "index_y", "]", "=", "rng", ".", "rand", "(", "n_times", ")", "+", "1.", "\n", "y", "[", "ts", ",", "index_y", ",", "index_x", "]", "=", "rng", ".", "rand", "(", "n_times", ")", "+", "1.", "\n", "\n", "X", "=", "torch", ".", "tensor", "(", "x", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ",", "\n", "requires_grad", "=", "required_grad_X", ")", "\n", "Y", "=", "torch", ".", "tensor", "(", "y", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ",", "requires_grad", "=", "False", ")", "\n", "return", "X", ",", "Y", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.utils.cost_matrix": [[219, 229], ["utils.groundmetric", "utils.groundmetric2d", "numpy.median", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.utils.groundmetric", "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.sta.utils.groundmetric2d"], ["", "def", "cost_matrix", "(", "dimension", ",", "device", "=", "\"cpu\"", ",", "dtype", "=", "torch", ".", "float64", ")", ":", "\n", "    ", "Mimg", "=", "groundmetric", "(", "dimension", ",", "p", "=", "2", ",", "normed", "=", "False", ")", "\n", "M", "=", "groundmetric2d", "(", "dimension", ",", "p", "=", "2", ",", "normed", "=", "False", ")", "\n", "m", "=", "np", ".", "median", "(", "M", ")", "\n", "Mimg", "/=", "m", "\n", "M", "/=", "m", "\n", "Mimg", "=", "torch", ".", "tensor", "(", "Mimg", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ",", "requires_grad", "=", "False", ")", "\n", "M", "=", "torch", ".", "tensor", "(", "M", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ",", "requires_grad", "=", "False", ")", "\n", "\n", "return", "M", ",", "Mimg", "\n", "", ""]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.chars.process_chars.process_data": [[9, 46], ["scipy.io.loadmat", "len", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "enumerate", "int", "numpy.empty().astype", "range", "numpy.loadtxt", "list", "d.cumsum.cumsum", "integer_data.append", "int.max", "numpy.ones", "numpy.zeros", "numpy.where", "abs().max", "d.cumsum.astype", "d.cumsum.max", "numpy.empty", "scipy.ndimage.filters.gaussian_filter.cumsum", "scipy.ndimage.filters.gaussian_filter", "numpy.unique", "int", "len", "abs", "d.cumsum.min", "np.empty.max", "numpy.arange", "len", "len"], "function", ["None"], ["def", "process_data", "(", "n_classes", "=", "2", ",", "t_steps", "=", "21", ",", "scale", "=", "14.5", ",", "plot", "=", "False", ",", "sigma", "=", "0.", ")", ":", "\n", "    ", "\"\"\"Loads the raw coordinates data and produces spatio-temporal data.\"\"\"", "\n", "labels", "=", "np", ".", "loadtxt", "(", "\"data/labels.csv\"", ",", "delimiter", "=", "\",\"", ")", "[", ":", "n_max", "]", "\n", "i_max", "=", "np", ".", "where", "(", "labels", "==", "n_classes", ")", "[", "0", "]", "[", "-", "1", "]", "\n", "mat", "=", "loadmat", "(", "\"data/chars.mat\"", ")", "\n", "data", "=", "list", "(", "mat", "[", "\"mixout\"", "]", "[", "0", "]", ")", "[", ":", "i_max", "]", "\n", "n_samples", "=", "len", "(", "data", ")", "\n", "times", "=", "np", ".", "empty", "(", "n_samples", ")", "\n", "x", "=", "np", ".", "empty", "(", "(", "n_samples", ",", "2", ")", ")", "\n", "n_pixels", "=", "np", ".", "empty", "(", "n_samples", ")", "\n", "dimension", "=", "np", ".", "empty", "(", "n_samples", ")", "\n", "integer_data", "=", "[", "]", "\n", "for", "i", ",", "d", "in", "enumerate", "(", "data", ")", ":", "\n", "        ", "d", "=", "d", ".", "cumsum", "(", "axis", "=", "1", ")", "\n", "d", "*=", "scale", "/", "abs", "(", "d", "[", ":", "2", "]", ")", ".", "max", "(", ")", "\n", "d", "=", "d", ".", "astype", "(", "int", ")", "[", ":", "2", "]", "\n", "times", "[", "i", "]", "=", "d", "[", ":", ",", ":", ":", "1", "]", ".", "size", "//", "2", "\n", "d", "+=", "-", "d", ".", "min", "(", "axis", "=", "1", ")", "[", ":", ",", "None", "]", "+", "2", "\n", "integer_data", ".", "append", "(", "d", ")", "\n", "n_pixels", "[", "i", "]", "=", "np", ".", "unique", "(", "d", ",", "axis", "=", "1", ")", ".", "shape", "[", "1", "]", "\n", "dimension", "[", "i", "]", "=", "d", ".", "max", "(", ")", "+", "2", "\n", "\n", "", "dimension", "=", "int", "(", "dimension", ".", "max", "(", ")", ")", "\n", "X", "=", "np", ".", "ones", "(", "(", "n_samples", ",", "int", "(", "times", ".", "max", "(", ")", ")", ",", "dimension", ",", "dimension", ")", ")", "*", "np", ".", "nan", "\n", "true_lengths", "=", "np", ".", "empty", "(", "n_samples", ")", ".", "astype", "(", "int", ")", "\n", "for", "i", "in", "range", "(", "n_samples", ")", ":", "\n", "        ", "true_length", "=", "integer_data", "[", "i", "]", "[", ":", ",", ":", ":", "t_steps", "]", ".", "shape", "[", "1", "]", "\n", "true_lengths", "[", "i", "]", "=", "true_length", "\n", "x", ",", "y", "=", "integer_data", "[", "i", "]", "\n", "img", "=", "np", ".", "zeros", "(", "(", "len", "(", "x", ")", ",", "dimension", ",", "dimension", ")", ")", "\n", "img", "[", "np", ".", "arange", "(", "len", "(", "x", ")", ")", ",", "x", ",", "y", "]", "=", "1", "\n", "img", "=", "(", "img", ".", "cumsum", "(", "axis", "=", "0", ")", ">", "0.", ")", "\n", "if", "sigma", ":", "\n", "            ", "img", "=", "gaussian_filter", "(", "img", ",", "sigma", ")", "\n", "", "X", "[", "i", ",", ":", "len", "(", "img", ")", "]", "=", "img", "\n", "\n", "", "return", "X", "[", ":", ",", ":", ":", "t_steps", "]", ",", "labels", "[", ":", "n_samples", "]", ",", "true_lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.chars.plot_chars.imshow": [[17, 33], ["enumerate", "matplotlib.pyplot.subplots", "axes.ravel", "ax.imshow", "ax.set_xticks", "ax.set_yticks", "ax.set_title", "ax.set_ylabel"], "function", ["home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.chars.plot_chars.imshow"], ["def", "imshow", "(", "x", ",", "cmap", "=", "cm", ".", "Greys", ",", "axes", "=", "None", ",", "titles", "=", "None", ",", "letter", "=", "\"\"", ")", ":", "\n", "    ", "n_times", ",", "dimension", ",", "dimension", "=", "x", ".", "shape", "\n", "if", "axes", "is", "None", ":", "\n", "        ", "f", ",", "axes", "=", "plt", ".", "subplots", "(", "1", ",", "n_times", ",", "figsize", "=", "(", "2", "*", "n_times", ",", "2", ")", ",", "\n", "sharex", "=", "True", ",", "sharey", "=", "True", ")", "\n", "\n", "", "for", "j", ",", "ax", "in", "enumerate", "(", "axes", ".", "ravel", "(", ")", ")", ":", "\n", "        ", "img", "=", "x", "[", "j", "]", ".", "T", "\n", "ax", ".", "imshow", "(", "img", ",", "origin", "=", "\"lower\"", ",", "cmap", "=", "cmap", ")", "\n", "if", "titles", ":", "\n", "            ", "ax", ".", "set_title", "(", "titles", "[", "j", "]", ")", "\n", "", "ax", ".", "set_xticks", "(", "[", "]", ")", "\n", "ax", ".", "set_yticks", "(", "[", "]", ")", "\n", "if", "j", "==", "0", ":", "\n", "            ", "ax", ".", "set_ylabel", "(", "letter", ")", "\n", "", "", "return", "axes", "\n", "\n"]], "home.repos.pwc.inspect_result.hichamjanati_spatio-temporal-alignements.brain-imaging.run_tsne_brain.generate_samples": [[15, 38], ["numpy.random.RandomState", "len", "np.random.RandomState.choice", "numpy.zeros().astype", "numpy.arange", "numpy.exp", "numpy.exp", "enumerate", "np.exp.dot", "numpy.zeros", "np.random.RandomState.rand", "np.exp.dot", "numpy.ones", "numpy.arange"], "function", ["None"], ["def", "generate_samples", "(", "n_samples", ",", "n_times", ",", "time_point", ",", "space_points", ",", "M", ",", "\n", "smoothing_time", "=", "1.", ",", "smoothing_space", "=", "0.01", ",", "\n", "seed", "=", "None", ")", ":", "\n", "    ", "\"\"\"Simulate brain signals at a time_point and in a random vertex among\n       `space_points`.\"\"\"", "\n", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "n_features", "=", "len", "(", "M", ")", "\n", "time_points", "=", "(", "np", ".", "ones", "(", "n_samples", ")", "*", "time_point", ")", ".", "astype", "(", "int", ")", "\n", "space_points", "=", "rng", ".", "choice", "(", "space_points", ",", "size", "=", "n_samples", ")", "\n", "signals", "=", "np", ".", "zeros", "(", "(", "n_samples", ",", "n_times", ",", "n_features", ")", ")", ".", "astype", "(", "float", ")", "\n", "values", "=", "rng", ".", "rand", "(", "n_samples", ")", "*", "2", "+", "1", "\n", "signals", "[", "np", ".", "arange", "(", "n_samples", ")", ",", "time_points", ",", "space_points", "]", "=", "values", "\n", "\n", "# create temporal and spatial gaussian filters to smooth the data", "\n", "times", "=", "np", ".", "arange", "(", "n_times", ")", "\n", "metric", "=", "(", "times", "[", ":", ",", "None", "]", "-", "times", "[", "None", ",", ":", "]", ")", "**", "2", "\n", "kernel_time", "=", "np", ".", "exp", "(", "-", "metric", "/", "smoothing_time", ")", "\n", "kernel_space", "=", "np", ".", "exp", "(", "-", "M", "/", "smoothing_space", ")", "\n", "\n", "for", "i", ",", "signal", "in", "enumerate", "(", "signals", ")", ":", "\n", "        ", "signals", "[", "i", "]", "=", "kernel_space", ".", "dot", "(", "signal", ".", "T", ")", ".", "T", "\n", "signals", "[", "i", "]", "=", "kernel_time", ".", "dot", "(", "signal", ")", "\n", "", "return", "signals", "\n", "\n"]]}