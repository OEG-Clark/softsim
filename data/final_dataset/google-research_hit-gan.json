{"home.repos.pwc.inspect_result.google-research_hit-gan.None.run.main": [[111, 184], ["trainers.gan_trainer.GANTrainer", "gan_trainer.GANTrainer.build", "len", "absl.app.UsageError", "tensorflow.distribute.cluster_resolver.TPUClusterResolver", "tensorflow.config.experimental_connect_to_cluster", "tensorflow.tpu.experimental.initialize_tpu_system", "absl.logging.info", "absl.logging.info", "absl.logging.info", "tensorflow.distribute.experimental.TPUStrategy", "tensorflow.distribute.MirroredStrategy", "absl.logging.info", "gan_trainer.GANTrainer.train", "gan_trainer.GANTrainer.evaluate", "ValueError"], "function", ["home.repos.pwc.inspect_result.google-research_hit-gan.models.discriminators.Block.build", "home.repos.pwc.inspect_result.google-research_hit-gan.trainers.base_trainer.BaseTrainer.train", "home.repos.pwc.inspect_result.google-research_hit-gan.trainers.base_trainer.BaseTrainer.evaluate"], ["def", "main", "(", "argv", ")", ":", "\n", "  ", "if", "len", "(", "argv", ")", ">", "1", ":", "\n", "    ", "raise", "app", ".", "UsageError", "(", "'Too many command-line arguments.'", ")", "\n", "\n", "", "strategy", "=", "None", "\n", "if", "FLAGS", ".", "use_tpu", ":", "\n", "    ", "cluster", "=", "tf", ".", "distribute", ".", "cluster_resolver", ".", "TPUClusterResolver", "(", "FLAGS", ".", "master", ")", "\n", "tf", ".", "config", ".", "experimental_connect_to_cluster", "(", "cluster", ")", "\n", "topology", "=", "tf", ".", "tpu", ".", "experimental", ".", "initialize_tpu_system", "(", "cluster", ")", "\n", "logging", ".", "info", "(", "'Topology:'", ")", "\n", "logging", ".", "info", "(", "'num_tasks: %d'", ",", "topology", ".", "num_tasks", ")", "\n", "logging", ".", "info", "(", "'num_tpus_per_task: %d'", ",", "topology", ".", "num_tpus_per_task", ")", "\n", "strategy", "=", "tf", ".", "distribute", ".", "experimental", ".", "TPUStrategy", "(", "cluster", ")", "\n", "", "else", ":", "\n", "# For (multiple) GPUs.", "\n", "    ", "strategy", "=", "tf", ".", "distribute", ".", "MirroredStrategy", "(", ")", "\n", "logging", ".", "info", "(", "'Running using MirroredStrategy on %d replicas'", ",", "\n", "strategy", ".", "num_replicas_in_sync", ")", "\n", "\n", "", "generator_args", "=", "{", "\n", "'output_size'", ":", "FLAGS", ".", "image_crop_size", ",", "\n", "}", "\n", "\n", "discriminator_args", "=", "{", "\n", "'input_size'", ":", "FLAGS", ".", "image_crop_size", ",", "\n", "'channel_multiplier'", ":", "FLAGS", ".", "channel_multiplier", ",", "\n", "'blur_resample'", ":", "FLAGS", ".", "blur_resample", "\n", "}", "\n", "\n", "base_trainer_args", "=", "{", "\n", "'strategy'", ":", "strategy", ",", "\n", "'model_dir'", ":", "FLAGS", ".", "model_dir", ",", "\n", "'train_batch_size'", ":", "FLAGS", ".", "train_batch_size", ",", "\n", "'eval_batch_size'", ":", "FLAGS", ".", "eval_batch_size", ",", "\n", "'dataset'", ":", "FLAGS", ".", "dataset", ",", "\n", "'train_steps'", ":", "FLAGS", ".", "train_steps", ",", "\n", "'data_dir'", ":", "FLAGS", ".", "data_dir", ",", "\n", "'image_crop_size'", ":", "FLAGS", ".", "image_crop_size", ",", "\n", "'image_aspect_ratio'", ":", "FLAGS", ".", "image_aspect_ratio", ",", "\n", "'image_crop_proportion'", ":", "FLAGS", ".", "image_crop_proportion", ",", "\n", "'random_flip'", ":", "FLAGS", ".", "random_flip", ",", "\n", "'record_every_n_steps'", ":", "FLAGS", ".", "record_every_n_steps", ",", "\n", "'save_every_n_steps'", ":", "FLAGS", ".", "save_every_n_steps", ",", "\n", "'keep_checkpoint_max'", ":", "FLAGS", ".", "keep_checkpoint_max", "\n", "}", "\n", "\n", "gan_trainer_args", "=", "{", "\n", "'latent_dim'", ":", "FLAGS", ".", "latent_dim", ",", "\n", "'generator_lr'", ":", "FLAGS", ".", "generator_lr", ",", "\n", "'discriminator_lr'", ":", "FLAGS", ".", "discriminator_lr", ",", "\n", "'beta1'", ":", "FLAGS", ".", "beta1", ",", "\n", "'beta2'", ":", "FLAGS", ".", "beta2", ",", "\n", "'use_ema_model'", ":", "FLAGS", ".", "use_ema_model", ",", "\n", "'ema_decay'", ":", "FLAGS", ".", "ema_decay", ",", "\n", "'ema_inital_step'", ":", "FLAGS", ".", "ema_inital_step", ",", "\n", "'use_consistency_regularization'", ":", "FLAGS", ".", "use_consistency_regularization", ",", "\n", "'consistency_regularization_cost'", ":", "FLAGS", ".", "consistency_regularization_cost", ",", "\n", "'augment_policy'", ":", "FLAGS", ".", "augment_policy", ",", "\n", "'gan_loss_type'", ":", "FLAGS", ".", "gan_loss_type", ",", "\n", "'grad_penalty_type'", ":", "FLAGS", ".", "grad_penalty_type", ",", "\n", "'grad_penalty_cost'", ":", "FLAGS", ".", "grad_penalty_cost", "\n", "}", "\n", "\n", "trainer", "=", "gan_trainer", ".", "GANTrainer", "(", "generator_args", ",", "discriminator_args", ",", "\n", "**", "gan_trainer_args", ",", "**", "base_trainer_args", ")", "\n", "trainer", ".", "build", "(", ")", "\n", "\n", "if", "FLAGS", ".", "mode", "==", "'train'", ":", "\n", "    ", "trainer", ".", "train", "(", ")", "\n", "", "elif", "FLAGS", ".", "mode", "==", "'eval'", ":", "\n", "    ", "trainer", ".", "evaluate", "(", ")", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "'Trainer mode {} not supported'", ".", "format", "(", "FLAGS", ".", "mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.utils.moving_averages.assign_ema_vars_from_initial_values": [[21, 48], ["tensorflow.distribute.get_replica_context", "ema_var.assign", "zip", "tf.distribute.get_replica_context.merge_call", "tensorflow.distribute.in_cross_replica_context", "strategy.extended.reduce_to", "moving_averages.assign_ema_vars_from_initial_values._assign_all_in_cross_replica_context_fn"], "function", ["None"], ["def", "assign_ema_vars_from_initial_values", "(", "ema_variables", ",", "initial_values", ")", ":", "\n", "  ", "\"\"\"Assigns EMA variables from initial values.\"\"\"", "\n", "\n", "def", "_assign_one_var_fn", "(", "ema_var", ",", "value", ")", ":", "\n", "    ", "ema_var", ".", "assign", "(", "value", ")", "\n", "\n", "", "def", "_assign_all_in_cross_replica_context_fn", "(", "strategy", ",", "ema_vars", ",", "values", ")", ":", "\n", "    ", "for", "ema_var", ",", "value", "in", "zip", "(", "ema_vars", ",", "values", ")", ":", "\n", "      ", "value", "=", "strategy", ".", "extended", ".", "reduce_to", "(", "\n", "tf", ".", "distribute", ".", "ReduceOp", ".", "MEAN", ",", "value", ",", "ema_var", ")", "\n", "if", "ema_var", ".", "trainable", ":", "\n", "        ", "strategy", ".", "extended", ".", "update", "(", "ema_var", ",", "_assign_one_var_fn", ",", "args", "=", "(", "value", ",", ")", ")", "\n", "", "else", ":", "\n", "        ", "_assign_one_var_fn", "(", "ema_var", ",", "value", ")", "\n", "\n", "", "", "", "replica_context", "=", "tf", ".", "distribute", ".", "get_replica_context", "(", ")", "\n", "if", "replica_context", ":", "\n", "    ", "replica_context", ".", "merge_call", "(", "_assign_all_in_cross_replica_context_fn", ",", "\n", "args", "=", "(", "ema_variables", ",", "initial_values", ")", ")", "\n", "", "else", ":", "\n", "    ", "if", "tf", ".", "distribute", ".", "in_cross_replica_context", "(", ")", ":", "\n", "      ", "_assign_all_in_cross_replica_context_fn", "(", "tf", ".", "distribute", ".", "get_strategy", "(", ")", ",", "\n", "ema_variables", ",", "\n", "initial_values", ")", "\n", "", "else", ":", "\n", "      ", "for", "ema_var", ",", "value", "in", "zip", "(", "ema_variables", ",", "initial_values", ")", ":", "\n", "        ", "_assign_one_var_fn", "(", "ema_var", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.utils.moving_averages.update_ema_variables": [[50, 83], ["tensorflow.distribute.get_replica_context", "ema_var.assign_sub", "zip", "tf.distribute.get_replica_context.merge_call", "tensorflow.distribute.in_cross_replica_context", "strategy.extended.reduce_to", "moving_averages.update_ema_variables._update_all_in_cross_replica_context_fn"], "function", ["None"], ["", "", "", "", "def", "update_ema_variables", "(", "ema_variables", ",", "new_values", ",", "ema_decay", ")", ":", "\n", "  ", "\"\"\"Updates EMA variables.\"\"\"", "\n", "# Update rule is following:", "\n", "#   ema_var := ema_var * ema_decay + var * (1 - ema_decay)", "\n", "# which is equivalent to:", "\n", "#   ema_var -= (1 - ema_decay) * (ema_var - var)", "\n", "\n", "one_minus_decay", "=", "1.0", "-", "ema_decay", "\n", "\n", "def", "_update_one_var_fn", "(", "ema_var", ",", "value", ")", ":", "\n", "    ", "ema_var", ".", "assign_sub", "(", "(", "ema_var", "-", "value", ")", "*", "one_minus_decay", ")", "\n", "\n", "", "def", "_update_all_in_cross_replica_context_fn", "(", "strategy", ",", "ema_vars", ",", "values", ")", ":", "\n", "    ", "for", "ema_var", ",", "value", "in", "zip", "(", "ema_vars", ",", "values", ")", ":", "\n", "      ", "value", "=", "strategy", ".", "extended", ".", "reduce_to", "(", "\n", "tf", ".", "distribute", ".", "ReduceOp", ".", "MEAN", ",", "value", ",", "ema_var", ")", "\n", "if", "ema_var", ".", "trainable", ":", "\n", "        ", "strategy", ".", "extended", ".", "update", "(", "ema_var", ",", "_update_one_var_fn", ",", "args", "=", "(", "value", ",", ")", ")", "\n", "", "else", ":", "\n", "        ", "_update_one_var_fn", "(", "ema_var", ",", "value", ")", "\n", "\n", "", "", "", "replica_context", "=", "tf", ".", "distribute", ".", "get_replica_context", "(", ")", "\n", "if", "replica_context", ":", "\n", "    ", "replica_context", ".", "merge_call", "(", "_update_all_in_cross_replica_context_fn", ",", "\n", "args", "=", "(", "ema_variables", ",", "new_values", ")", ")", "\n", "", "else", ":", "\n", "    ", "if", "tf", ".", "distribute", ".", "in_cross_replica_context", "(", ")", ":", "\n", "      ", "_update_all_in_cross_replica_context_fn", "(", "tf", ".", "distribute", ".", "get_strategy", "(", ")", ",", "\n", "ema_variables", ",", "\n", "new_values", ")", "\n", "", "else", ":", "\n", "      ", "for", "ema_var", ",", "value", "in", "zip", "(", "ema_variables", ",", "new_values", ")", ":", "\n", "        ", "_update_one_var_fn", "(", "ema_var", ",", "value", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.google-research_hit-gan.utils.dataset_utils.preprocess_image": [[27, 86], ["round", "tensorflow.cast", "tensorflow.image.resize", "tensorflow.image.random_flip_left_right", "tensorflow.image.convert_image_dtype", "utils.data_utils.center_crop", "utils.data_utils.random_crop"], "function", ["home.repos.pwc.inspect_result.google-research_hit-gan.utils.data_utils.center_crop", "home.repos.pwc.inspect_result.google-research_hit-gan.utils.data_utils.random_crop"], ["def", "preprocess_image", "(", "image", ":", "tf", ".", "Tensor", ",", "\n", "crop_size", ":", "int", ",", "\n", "aspect_ratio", ":", "float", "=", "1.0", ",", "\n", "crop_mode", ":", "Text", "=", "'fixed'", ",", "\n", "crop_proportion", ":", "float", "=", "1.0", ",", "\n", "method", ":", "Text", "=", "tf", ".", "image", ".", "ResizeMethod", ".", "BICUBIC", ",", "\n", "flip", ":", "bool", "=", "False", ",", "\n", "normalize", ":", "bool", "=", "True", ",", "\n", "antialias", ":", "bool", "=", "True", ")", "->", "tf", ".", "Tensor", ":", "\n", "  ", "\"\"\"Preprocesses the given image.\n\n  Args:\n    image: `Tensor` representing an image of arbitrary size.\n    crop_size: Width of output image.\n    aspect_ratio: The ratio of image width/height.\n    crop_mode: Mode for cropping images, including 'fixed', 'random_crop', and\n      'center_crop'.\n    crop_proportion: Proportion of image to retain along the less-cropped side.\n    method: Resize method for image processing.\n    flip: Whether or not to flip left and right of an image.\n    normalize: Whether to normalize the output image.\n    antialias: Whether to use an anti-aliasing filter.\n\n  Returns:\n    A preprocessed image `Tensor` of range [-1, 1] if normalized.\n  \"\"\"", "\n", "crop_width", "=", "crop_size", "\n", "crop_height", "=", "round", "(", "crop_size", "/", "aspect_ratio", ")", "\n", "\n", "if", "crop_mode", "==", "'fixed'", ":", "\n", "    ", "resized", "=", "tf", ".", "image", ".", "resize", "(", "\n", "image", ",", "(", "crop_height", ",", "crop_width", ")", ",", "method", "=", "method", ",", "antialias", "=", "antialias", ")", "\n", "", "elif", "crop_mode", "==", "'center_crop'", ":", "\n", "    ", "resized", "=", "data_utils", ".", "center_crop", "(", "\n", "image", ",", "\n", "crop_height", ",", "\n", "crop_width", ",", "\n", "crop_proportion", "=", "crop_proportion", ",", "\n", "method", "=", "method", ",", "\n", "antialias", "=", "antialias", ")", "\n", "", "elif", "crop_mode", "==", "'random_crop'", ":", "\n", "    ", "resized", "=", "data_utils", ".", "random_crop", "(", "\n", "image", ",", "\n", "crop_height", ",", "\n", "crop_width", ",", "\n", "crop_proportion", "=", "crop_proportion", ",", "\n", "method", "=", "method", ",", "\n", "antialias", "=", "antialias", ")", "\n", "", "else", ":", "\n", "    ", "raise", "NotImplementedError", "\n", "\n", "", "if", "flip", ":", "\n", "    ", "resized", "=", "tf", ".", "image", ".", "random_flip_left_right", "(", "resized", ")", "\n", "\n", "", "resized", "=", "tf", ".", "cast", "(", "resized", ",", "dtype", "=", "image", ".", "dtype", ")", "\n", "if", "normalize", ":", "\n", "    ", "resized", "=", "tf", ".", "image", ".", "convert_image_dtype", "(", "resized", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "resized", "=", "(", "resized", "-", "0.5", ")", "/", "0.5", "\n", "", "return", "resized", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.utils.dataset_utils.get_preprocess_fn": [[88, 105], ["functools.partial"], "function", ["None"], ["", "def", "get_preprocess_fn", "(", "crop_size", ":", "int", ",", "\n", "aspect_ratio", ":", "float", "=", "1.0", ",", "\n", "crop_mode", ":", "Text", "=", "'fixed'", ",", "\n", "crop_proportion", ":", "float", "=", "1.0", ",", "\n", "method", ":", "Text", "=", "tf", ".", "image", ".", "ResizeMethod", ".", "BICUBIC", ",", "\n", "flip", ":", "bool", "=", "False", ",", "\n", "normalize", ":", "bool", "=", "True", ")", ":", "\n", "  ", "\"\"\"Gets function that accepts an image and returns a preprocessed image.\"\"\"", "\n", "return", "functools", ".", "partial", "(", "\n", "preprocess_image", ",", "\n", "crop_size", "=", "crop_size", ",", "\n", "aspect_ratio", "=", "aspect_ratio", ",", "\n", "crop_mode", "=", "crop_mode", ",", "\n", "crop_proportion", "=", "crop_proportion", ",", "\n", "method", "=", "method", ",", "\n", "flip", "=", "flip", ",", "\n", "normalize", "=", "normalize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.utils.dataset_utils.build_distributed_dataset": [[107, 113], ["dataset_utils.build_input_fn", "strategy.experimental_distribute_datasets_from_function"], "function", ["home.repos.pwc.inspect_result.google-research_hit-gan.utils.dataset_utils.build_input_fn"], ["", "def", "build_distributed_dataset", "(", "\n", "builder", ",", "strategy", ":", "tf", ".", "distribute", ".", "Strategy", ",", "\n", "**", "kwargs", ":", "Any", ")", "->", "tf", ".", "distribute", ".", "DistributedDataset", ":", "\n", "  ", "\"\"\"Builds the distributed dataset.\"\"\"", "\n", "input_fn", "=", "build_input_fn", "(", "builder", ",", "**", "kwargs", ")", "\n", "return", "strategy", ".", "experimental_distribute_datasets_from_function", "(", "input_fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.utils.dataset_utils.build_input_fn": [[115, 173], ["input_context.get_per_replica_batch_size", "absl.logging.info", "absl.logging.info", "builder.get_dataset", "absl.logging.info", "builder.get_dataset_map_fn", "dataset.repeat.map", "dataset.repeat.batch", "dataset.repeat.prefetch", "dataset.repeat.shard", "dataset.repeat.cache", "dataset.repeat.shuffle", "dataset.repeat.repeat"], "function", ["home.repos.pwc.inspect_result.google-research_hit-gan.utils.datasets.get_dataset", "home.repos.pwc.inspect_result.google-research_hit-gan.utils.datasets.FFHQ.get_dataset_map_fn"], ["", "def", "build_input_fn", "(", "builder", ",", "\n", "global_batch_size", ":", "int", ",", "\n", "image_crop_size", ":", "int", ",", "\n", "image_aspect_ratio", ":", "int", ",", "\n", "image_crop_proportion", ":", "int", ",", "\n", "random_flip", ":", "bool", ",", "\n", "training", ":", "bool", "=", "False", ",", "\n", "cache", ":", "bool", "=", "False", ")", ":", "\n", "  ", "\"\"\"Builds input function.\n\n  Args:\n    builder: Dataset builder for the specified dataset.\n    global_batch_size: Global batch size.\n    image_crop_size: Width of output image.\n    image_aspect_ratio: The ratio of image width/height.\n    image_crop_proportion: Proportion of image to retain along the less-cropped\n      side.\n    random_flip: Whether or not to flip left and right of an image.\n    training: Whether the data are used for training.\n    cache: Whether to cache the elements in this dataset.\n\n  Returns:\n    A function that accepts a dict of params and returns a tuple of images and\n    features.\n  \"\"\"", "\n", "\n", "def", "input_fn", "(", "input_context", ")", ":", "\n", "    ", "\"\"\"Inner input function.\"\"\"", "\n", "batch_size", "=", "input_context", ".", "get_per_replica_batch_size", "(", "global_batch_size", ")", "\n", "logging", ".", "info", "(", "'Global batch size: %d'", ",", "global_batch_size", ")", "\n", "logging", ".", "info", "(", "'Per-replica batch size: %d'", ",", "batch_size", ")", "\n", "\n", "dataset", "=", "builder", ".", "get_dataset", "(", "training", "=", "training", ")", "\n", "logging", ".", "info", "(", "'num_input_pipelines: %d'", ",", "input_context", ".", "num_input_pipelines", ")", "\n", "# The dataset is always sharded by number of hosts.", "\n", "# num_input_pipelines is the number of hosts rather than number of cores.", "\n", "if", "input_context", ".", "num_input_pipelines", ">", "1", ":", "\n", "      ", "dataset", "=", "dataset", ".", "shard", "(", "input_context", ".", "num_input_pipelines", ",", "\n", "input_context", ".", "input_pipeline_id", ")", "\n", "", "if", "cache", ":", "\n", "      ", "dataset", "=", "dataset", ".", "cache", "(", ")", "\n", "", "if", "training", ":", "\n", "      ", "buffer_multiplier", "=", "10", "\n", "dataset", "=", "dataset", ".", "shuffle", "(", "batch_size", "*", "buffer_multiplier", ")", "\n", "dataset", "=", "dataset", ".", "repeat", "(", "-", "1", ")", "\n", "", "map_fn", "=", "builder", ".", "get_dataset_map_fn", "(", "\n", "image_crop_size", "=", "image_crop_size", ",", "\n", "image_aspect_ratio", "=", "image_aspect_ratio", ",", "\n", "image_crop_proportion", "=", "image_crop_proportion", ",", "\n", "random_flip", "=", "random_flip", ",", "\n", "training", "=", "training", ")", "\n", "dataset", "=", "dataset", ".", "map", "(", "\n", "map_fn", ",", "num_parallel_calls", "=", "tf", ".", "data", ".", "experimental", ".", "AUTOTUNE", ")", "\n", "dataset", "=", "dataset", ".", "batch", "(", "batch_size", ",", "drop_remainder", "=", "training", ")", "\n", "dataset", "=", "dataset", ".", "prefetch", "(", "tf", ".", "data", ".", "experimental", ".", "AUTOTUNE", ")", "\n", "return", "dataset", "\n", "\n", "", "return", "input_fn", "\n", "", ""]], "home.repos.pwc.inspect_result.google-research_hit-gan.utils.data_utils.to_images": [[23, 35], ["tensorflow.clip_by_value"], "function", ["None"], ["def", "to_images", "(", "inputs", ":", "tf", ".", "Tensor", ")", "->", "tf", ".", "Tensor", ":", "\n", "  ", "\"\"\"Converts input tensors into images.\n\n  Args:\n    inputs: The input tensors ranging from [-1.0, 1.0].\n\n  Returns:\n    Output images ranging from [0.0, 1.0].\n  \"\"\"", "\n", "images", "=", "tf", ".", "clip_by_value", "(", "inputs", ",", "-", "1.0", ",", "1.0", ")", "\n", "images", "=", "(", "images", "+", "1.0", ")", "*", "0.5", "\n", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.utils.data_utils._compute_crop_shape": [[37, 76], ["tensorflow.cast", "tensorflow.cast", "tensorflow.cond", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.math.rint", "tensorflow.math.rint", "tensorflow.math.rint", "tensorflow.math.rint"], "function", ["None"], ["", "def", "_compute_crop_shape", "(", "image_height", ":", "int", ",", "image_width", ":", "int", ",", "\n", "aspect_ratio", ":", "float", ",", "crop_proportion", ":", "float", ")", ":", "\n", "  ", "\"\"\"Computes aspect ratio-preserving shape for image crop.\n\n  The resulting shape retains `crop_proportion` along one side and a proportion\n  less than or equal to `crop_proportion` along the other side.\n\n  Args:\n    image_height: Height of image to be cropped.\n    image_width: Width of image to be cropped.\n    aspect_ratio: Desired aspect ratio (width / height) of output.\n    crop_proportion: Proportion of image to retain along the less-cropped side.\n\n  Returns:\n    crop_height: Height of image after cropping.\n    crop_width: Width of image after cropping.\n  \"\"\"", "\n", "image_width_float", "=", "tf", ".", "cast", "(", "image_width", ",", "tf", ".", "float32", ")", "\n", "image_height_float", "=", "tf", ".", "cast", "(", "image_height", ",", "tf", ".", "float32", ")", "\n", "\n", "def", "_requested_aspect_ratio_wider_than_image", "(", ")", ":", "\n", "    ", "crop_height", "=", "tf", ".", "cast", "(", "\n", "tf", ".", "math", ".", "rint", "(", "crop_proportion", "/", "aspect_ratio", "*", "image_width_float", ")", ",", "\n", "tf", ".", "int32", ")", "\n", "crop_width", "=", "tf", ".", "cast", "(", "\n", "tf", ".", "math", ".", "rint", "(", "crop_proportion", "*", "image_width_float", ")", ",", "tf", ".", "int32", ")", "\n", "return", "crop_height", ",", "crop_width", "\n", "\n", "", "def", "_image_wider_than_requested_aspect_ratio", "(", ")", ":", "\n", "    ", "crop_height", "=", "tf", ".", "cast", "(", "\n", "tf", ".", "math", ".", "rint", "(", "crop_proportion", "*", "image_height_float", ")", ",", "tf", ".", "int32", ")", "\n", "crop_width", "=", "tf", ".", "cast", "(", "\n", "tf", ".", "math", ".", "rint", "(", "crop_proportion", "*", "aspect_ratio", "*", "image_height_float", ")", ",", "\n", "tf", ".", "int32", ")", "\n", "return", "crop_height", ",", "crop_width", "\n", "\n", "", "return", "tf", ".", "cond", "(", "aspect_ratio", ">", "image_width_float", "/", "image_height_float", ",", "\n", "_requested_aspect_ratio_wider_than_image", ",", "\n", "_image_wider_than_requested_aspect_ratio", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.utils.data_utils.center_crop": [[78, 110], ["tensorflow.shape", "data_utils._compute_crop_shape", "tensorflow.image.crop_to_bounding_box", "tensorflow.image.resize"], "function", ["home.repos.pwc.inspect_result.google-research_hit-gan.utils.data_utils._compute_crop_shape"], ["", "def", "center_crop", "(", "image", ":", "tf", ".", "Tensor", ",", "\n", "height", ":", "int", ",", "\n", "width", ":", "int", ",", "\n", "crop_proportion", ":", "float", ",", "\n", "method", ":", "Text", "=", "tf", ".", "image", ".", "ResizeMethod", ".", "BICUBIC", ",", "\n", "antialias", ":", "bool", "=", "False", ")", "->", "tf", ".", "Tensor", ":", "\n", "  ", "\"\"\"Crops to center of image and rescales to desired size.\n\n  Args:\n    image: Image Tensor to crop.\n    height: Height of image to be cropped.\n    width: Width of image to be cropped.\n    crop_proportion: Proportion of image to retain along the less-cropped side.\n    method: Resize method for image processing.\n    antialias: Whether to use an anti-aliasing filter.\n\n  Returns:\n    A `height` x `width` x channels Tensor holding a central crop of `image`.\n  \"\"\"", "\n", "shape", "=", "tf", ".", "shape", "(", "image", ")", "\n", "image_height", "=", "shape", "[", "0", "]", "\n", "image_width", "=", "shape", "[", "1", "]", "\n", "crop_height", ",", "crop_width", "=", "_compute_crop_shape", "(", "\n", "image_height", ",", "image_width", ",", "height", "/", "width", ",", "crop_proportion", ")", "\n", "offset_height", "=", "(", "(", "image_height", "-", "crop_height", ")", "+", "1", ")", "//", "2", "\n", "offset_width", "=", "(", "(", "image_width", "-", "crop_width", ")", "+", "1", ")", "//", "2", "\n", "image", "=", "tf", ".", "image", ".", "crop_to_bounding_box", "(", "\n", "image", ",", "offset_height", ",", "offset_width", ",", "crop_height", ",", "crop_width", ")", "\n", "\n", "image", "=", "tf", ".", "image", ".", "resize", "(", "\n", "image", ",", "(", "height", ",", "width", ")", ",", "method", "=", "method", ",", "antialias", "=", "antialias", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.utils.data_utils.random_crop": [[112, 142], ["tensorflow.shape", "data_utils._compute_crop_shape", "tensorflow.image.random_crop", "tensorflow.image.resize"], "function", ["home.repos.pwc.inspect_result.google-research_hit-gan.utils.data_utils._compute_crop_shape", "home.repos.pwc.inspect_result.google-research_hit-gan.utils.data_utils.random_crop"], ["", "def", "random_crop", "(", "image", ":", "tf", ".", "Tensor", ",", "\n", "height", ":", "int", ",", "\n", "width", ":", "int", ",", "\n", "crop_proportion", ":", "float", ",", "\n", "method", ":", "Text", "=", "tf", ".", "image", ".", "ResizeMethod", ".", "BICUBIC", ",", "\n", "antialias", ":", "bool", "=", "False", ",", "\n", "seed", ":", "Optional", "[", "int", "]", "=", "None", ")", "->", "tf", ".", "Tensor", ":", "\n", "  ", "\"\"\"Randomly crops image and rescales to desired size.\n\n  Args:\n    image: Image Tensor to crop.\n    height: Height of image to be cropped.\n    width: Width of image to be cropped.\n    crop_proportion: Proportion of image to retain along the less-cropped side.\n    method: Resize method for image processing.\n    antialias: Whether to use an anti-aliasing filter.\n    seed: An integer used to create a random seed.\n\n  Returns:\n    A `height` x `width` x channels Tensor holding a central crop of `image`.\n  \"\"\"", "\n", "shape", "=", "tf", ".", "shape", "(", "image", ")", "\n", "image_height", "=", "shape", "[", "0", "]", "\n", "image_width", "=", "shape", "[", "1", "]", "\n", "crop_height", ",", "crop_width", "=", "_compute_crop_shape", "(", "image_height", ",", "image_width", ",", "\n", "height", "/", "width", ",", "crop_proportion", ")", "\n", "image", "=", "tf", ".", "image", ".", "random_crop", "(", "image", ",", "(", "crop_height", ",", "crop_width", ",", "3", ")", ",", "seed", "=", "seed", ")", "\n", "image", "=", "tf", ".", "image", ".", "resize", "(", "\n", "image", ",", "(", "height", ",", "width", ")", ",", "method", "=", "method", ",", "antialias", "=", "antialias", ")", "\n", "return", "image", "\n", "", ""]], "home.repos.pwc.inspect_result.google-research_hit-gan.utils.metrics.reset_metrics": [[23, 26], ["metrics.items", "metric.reset_states"], "function", ["None"], ["def", "reset_metrics", "(", "metrics", ")", ":", "\n", "  ", "for", "_", ",", "metric", "in", "metrics", ".", "items", "(", ")", ":", "\n", "    ", "metric", ".", "reset_states", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.utils.metrics.update_metrics": [[28, 31], ["kwargs.items", "metrics[].update_state"], "function", ["None"], ["", "", "def", "update_metrics", "(", "metrics", ",", "**", "kwargs", ")", ":", "\n", "  ", "for", "metric_name", ",", "metric_value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "    ", "metrics", "[", "metric_name", "]", ".", "update_state", "(", "metric_value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.utils.metrics.log_and_write_metrics_to_summary": [[33, 39], ["metrics.items", "metric.result", "absl.logging.info", "tensorflow.summary.scalar", "step.numpy", "metric.result.numpy().astype", "metric.result.numpy"], "function", ["None"], ["", "", "def", "log_and_write_metrics_to_summary", "(", "metrics", ",", "step", ")", ":", "\n", "  ", "for", "_", ",", "metric", "in", "metrics", ".", "items", "(", ")", ":", "\n", "    ", "metric_value", "=", "metric", ".", "result", "(", ")", "\n", "logging", ".", "info", "(", "'Step: [%d] %s = %f'", ",", "step", ".", "numpy", "(", ")", ",", "metric", ".", "name", ",", "\n", "metric_value", ".", "numpy", "(", ")", ".", "astype", "(", "float", ")", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "metric", ".", "name", ",", "metric_value", ",", "step", "=", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.utils.metrics.log_images_to_summary": [[41, 46], ["tensorflow.split", "range", "min", "tensorflow.summary.image"], "function", ["None"], ["", "", "def", "log_images_to_summary", "(", "name", ",", "images", ",", "step", ",", "max_outputs", ")", ":", "\n", "  ", "num_images", "=", "images", ".", "shape", "[", "0", "]", "\n", "splits", "=", "tf", ".", "split", "(", "images", ",", "num_or_size_splits", "=", "num_images", ",", "axis", "=", "0", ")", "\n", "for", "i", "in", "range", "(", "min", "(", "num_images", ",", "max_outputs", ")", ")", ":", "\n", "    ", "tf", ".", "summary", ".", "image", "(", "'{}/{}'", ".", "format", "(", "name", ",", "i", ")", ",", "splits", "[", "i", "]", ",", "step", "=", "step", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.google-research_hit-gan.utils.diff_augment.augment": [[29, 39], ["policy.split", "tensorflow.transpose", "tensorflow.transpose", "f"], "function", ["None"], ["def", "augment", "(", "x", ",", "policy", "=", "''", ",", "channels_first", "=", "False", ")", ":", "\n", "  ", "if", "policy", ":", "\n", "    ", "if", "channels_first", ":", "\n", "      ", "x", "=", "tf", ".", "transpose", "(", "x", ",", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", "\n", "", "for", "p", "in", "policy", ".", "split", "(", "','", ")", ":", "\n", "      ", "for", "f", "in", "AUGMENT_FNS", "[", "p", "]", ":", "\n", "        ", "x", "=", "f", "(", "x", ")", "\n", "", "", "if", "channels_first", ":", "\n", "      ", "x", "=", "tf", ".", "transpose", "(", "x", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.utils.diff_augment.rand_brightness": [[41, 45], ["tensorflow.random.uniform", "tensorflow.shape"], "function", ["None"], ["", "def", "rand_brightness", "(", "x", ")", ":", "\n", "  ", "magnitude", "=", "tf", ".", "random", ".", "uniform", "(", "[", "tf", ".", "shape", "(", "x", ")", "[", "0", "]", ",", "1", ",", "1", ",", "1", "]", ")", "-", "0.5", "\n", "x", "=", "x", "+", "magnitude", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.utils.diff_augment.rand_saturation": [[47, 52], ["tensorflow.reduce_mean", "tensorflow.random.uniform", "tensorflow.shape"], "function", ["None"], ["", "def", "rand_saturation", "(", "x", ")", ":", "\n", "  ", "magnitude", "=", "tf", ".", "random", ".", "uniform", "(", "[", "tf", ".", "shape", "(", "x", ")", "[", "0", "]", ",", "1", ",", "1", ",", "1", "]", ")", "*", "2", "\n", "x_mean", "=", "tf", ".", "reduce_mean", "(", "x", ",", "axis", "=", "3", ",", "keepdims", "=", "True", ")", "\n", "x", "=", "(", "x", "-", "x_mean", ")", "*", "magnitude", "+", "x_mean", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.utils.diff_augment.rand_contrast": [[54, 59], ["tensorflow.reduce_mean", "tensorflow.random.uniform", "tensorflow.shape"], "function", ["None"], ["", "def", "rand_contrast", "(", "x", ")", ":", "\n", "  ", "magnitude", "=", "tf", ".", "random", ".", "uniform", "(", "[", "tf", ".", "shape", "(", "x", ")", "[", "0", "]", ",", "1", ",", "1", ",", "1", "]", ")", "+", "0.5", "\n", "x_mean", "=", "tf", ".", "reduce_mean", "(", "x", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ",", "keepdims", "=", "True", ")", "\n", "x", "=", "(", "x", "-", "x_mean", ")", "*", "magnitude", "+", "x_mean", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.utils.diff_augment.rand_translation": [[61, 91], ["tensorflow.cast", "tensorflow.random.uniform", "tensorflow.random.uniform", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.gather_nd", "tensorflow.transpose", "tensorflow.shape", "tensorflow.shape", "tensorflow.pad", "tensorflow.expand_dims", "tensorflow.gather_nd", "tensorflow.pad", "tensorflow.expand_dims", "tensorflow.cast", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.transpose", "tensorflow.range", "tensorflow.range"], "function", ["None"], ["", "def", "rand_translation", "(", "x", ",", "ratio", "=", "0.125", ")", ":", "\n", "  ", "\"\"\"Random translation.\"\"\"", "\n", "batch_size", "=", "tf", ".", "shape", "(", "x", ")", "[", "0", "]", "\n", "image_size", "=", "tf", ".", "shape", "(", "x", ")", "[", "1", ":", "3", "]", "\n", "shift", "=", "tf", ".", "cast", "(", "tf", ".", "cast", "(", "image_size", ",", "tf", ".", "float32", ")", "*", "ratio", "+", "0.5", ",", "tf", ".", "int32", ")", "\n", "translation_x", "=", "tf", ".", "random", ".", "uniform", "(", "[", "batch_size", ",", "1", "]", ",", "\n", "-", "shift", "[", "0", "]", ",", "\n", "shift", "[", "0", "]", "+", "1", ",", "\n", "dtype", "=", "tf", ".", "int32", ")", "\n", "translation_y", "=", "tf", ".", "random", ".", "uniform", "(", "[", "batch_size", ",", "1", "]", ",", "\n", "-", "shift", "[", "1", "]", ",", "\n", "shift", "[", "1", "]", "+", "1", ",", "\n", "dtype", "=", "tf", ".", "int32", ")", "\n", "grid_x", "=", "tf", ".", "clip_by_value", "(", "\n", "tf", ".", "expand_dims", "(", "tf", ".", "range", "(", "image_size", "[", "0", "]", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "0", ")", "+", "\n", "translation_x", "+", "1", ",", "0", ",", "image_size", "[", "0", "]", "+", "1", ")", "\n", "grid_y", "=", "tf", ".", "clip_by_value", "(", "\n", "tf", ".", "expand_dims", "(", "tf", ".", "range", "(", "image_size", "[", "1", "]", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "0", ")", "+", "\n", "translation_y", "+", "1", ",", "0", ",", "image_size", "[", "1", "]", "+", "1", ")", "\n", "x", "=", "tf", ".", "gather_nd", "(", "\n", "tf", ".", "pad", "(", "x", ",", "[", "[", "0", ",", "0", "]", ",", "[", "1", ",", "1", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", "]", ")", ",", "\n", "tf", ".", "expand_dims", "(", "grid_x", ",", "-", "1", ")", ",", "\n", "batch_dims", "=", "1", ")", "\n", "x", "=", "tf", ".", "transpose", "(", "\n", "tf", ".", "gather_nd", "(", "\n", "tf", ".", "pad", "(", "\n", "tf", ".", "transpose", "(", "x", ",", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", ",", "[", "[", "0", ",", "0", "]", ",", "[", "1", ",", "1", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", "]", ")", ",", "\n", "tf", ".", "expand_dims", "(", "grid_y", ",", "-", "1", ")", ",", "\n", "batch_dims", "=", "1", ")", ",", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.utils.diff_augment.rand_cutout": [[93, 125], ["tensorflow.cast", "tensorflow.random.uniform", "tensorflow.random.uniform", "tensorflow.meshgrid", "tensorflow.stack", "tensorflow.stack", "tensorflow.maximum", "tensorflow.minimum", "tensorflow.maximum", "tensorflow.shape", "tensorflow.shape", "tensorflow.range", "tensorflow.range", "tensorflow.range", "tensorflow.reshape", "tensorflow.expand_dims", "tensorflow.scatter_nd", "tensorflow.cast", "tensorflow.shape", "tensorflow.shape", "tensorflow.ones"], "function", ["None"], ["", "def", "rand_cutout", "(", "x", ",", "ratio", "=", "0.5", ")", ":", "\n", "  ", "\"\"\"Random Cutout.\"\"\"", "\n", "batch_size", "=", "tf", ".", "shape", "(", "x", ")", "[", "0", "]", "\n", "image_size", "=", "tf", ".", "shape", "(", "x", ")", "[", "1", ":", "3", "]", "\n", "cutout_size", "=", "tf", ".", "cast", "(", "tf", ".", "cast", "(", "image_size", ",", "tf", ".", "float32", ")", "*", "ratio", "+", "0.5", ",", "tf", ".", "int32", ")", "\n", "offset_x", "=", "tf", ".", "random", ".", "uniform", "(", "[", "tf", ".", "shape", "(", "x", ")", "[", "0", "]", ",", "1", ",", "1", "]", ",", "\n", "maxval", "=", "image_size", "[", "0", "]", "+", "(", "1", "-", "cutout_size", "[", "0", "]", "%", "2", ")", ",", "\n", "dtype", "=", "tf", ".", "int32", ")", "\n", "offset_y", "=", "tf", ".", "random", ".", "uniform", "(", "[", "tf", ".", "shape", "(", "x", ")", "[", "0", "]", ",", "1", ",", "1", "]", ",", "\n", "maxval", "=", "image_size", "[", "1", "]", "+", "(", "1", "-", "cutout_size", "[", "1", "]", "%", "2", ")", ",", "\n", "dtype", "=", "tf", ".", "int32", ")", "\n", "grid_batch", ",", "grid_x", ",", "grid_y", "=", "tf", ".", "meshgrid", "(", "\n", "tf", ".", "range", "(", "batch_size", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "\n", "tf", ".", "range", "(", "cutout_size", "[", "0", "]", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "\n", "tf", ".", "range", "(", "cutout_size", "[", "1", "]", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "\n", "indexing", "=", "'ij'", ")", "\n", "cutout_grid", "=", "tf", ".", "stack", "(", "[", "\n", "grid_batch", ",", "grid_x", "+", "offset_x", "-", "cutout_size", "[", "0", "]", "//", "2", ",", "\n", "grid_y", "+", "offset_y", "-", "cutout_size", "[", "1", "]", "//", "2", "\n", "]", ",", "\n", "axis", "=", "-", "1", ")", "\n", "mask_shape", "=", "tf", ".", "stack", "(", "[", "batch_size", ",", "image_size", "[", "0", "]", ",", "image_size", "[", "1", "]", "]", ")", "\n", "cutout_grid", "=", "tf", ".", "maximum", "(", "cutout_grid", ",", "0", ")", "\n", "cutout_grid", "=", "tf", ".", "minimum", "(", "cutout_grid", ",", "tf", ".", "reshape", "(", "mask_shape", "-", "1", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "3", "]", ")", ")", "\n", "mask", "=", "tf", ".", "maximum", "(", "\n", "1", "-", "tf", ".", "scatter_nd", "(", "\n", "cutout_grid", ",", "\n", "tf", ".", "ones", "(", "[", "batch_size", ",", "cutout_size", "[", "0", "]", ",", "cutout_size", "[", "1", "]", "]", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", ",", "mask_shape", ")", ",", "0", ")", "\n", "x", "=", "x", "*", "tf", ".", "expand_dims", "(", "mask", ",", "axis", "=", "3", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.utils.inception_utils.restore_inception_model": [[24, 37], ["tensorflow.keras.applications.InceptionV3", "tensorflow.keras.Model", "tf.keras.applications.InceptionV3.get_layer"], "function", ["None"], ["def", "restore_inception_model", "(", "weights", "=", "\"imagenet\"", ")", ":", "\n", "  ", "\"\"\"Loads Inception V3 Model.\"\"\"", "\n", "inception_v3", "=", "tf", ".", "keras", ".", "applications", ".", "InceptionV3", "(", "\n", "include_top", "=", "True", ",", "\n", "weights", "=", "weights", ",", "\n", "input_shape", "=", "(", "299", ",", "299", ",", "3", ")", ",", "\n", "classifier_activation", "=", "None", ")", "\n", "\n", "layer_names", "=", "[", "\"avg_pool\"", ",", "\"predictions\"", "]", "\n", "layers", "=", "[", "inception_v3", ".", "get_layer", "(", "name", ")", ".", "output", "for", "name", "in", "layer_names", "]", "\n", "model", "=", "tf", ".", "keras", ".", "Model", "(", "inputs", "=", "inception_v3", ".", "input", ",", "outputs", "=", "layers", ")", "\n", "model", ".", "trainable", "=", "False", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.utils.inception_utils.run_inception_model": [[39, 72], ["iter", "inception_utils.run_inception_model.run"], "function", ["None"], ["", "def", "run_inception_model", "(", "ds", ",", "model", ",", "steps", ",", "strategy", ",", "map_fn", "=", "None", ")", ":", "\n", "  ", "\"\"\"Runs Inception V3 Model to get activations and logits.\"\"\"", "\n", "def", "get_images", "(", "inputs", ")", ":", "\n", "    ", "return", "inputs", "[", "\"images\"", "]", "\n", "\n", "", "if", "map_fn", "is", "None", ":", "\n", "    ", "map_fn", "=", "get_images", "\n", "\n", "", "def", "step_fn", "(", "inputs", ")", ":", "\n", "    ", "images", "=", "map_fn", "(", "inputs", ")", "\n", "images", "=", "tf", ".", "image", ".", "resize", "(", "\n", "images", ",", "\n", "INCEPTION_DEFAULT_IMAGE_SIZE", ",", "\n", "method", "=", "tf", ".", "image", ".", "ResizeMethod", ".", "BILINEAR", ")", "\n", "batch_activations", ",", "batch_logits", "=", "model", "(", "images", ",", "training", "=", "False", ")", "\n", "return", "batch_activations", ",", "batch_logits", "\n", "\n", "", "@", "tf", ".", "function", "\n", "def", "run", "(", "iterator", ")", ":", "\n", "    ", "activations", "=", "tf", ".", "TensorArray", "(", "tf", ".", "float32", ",", "size", "=", "0", ",", "dynamic_size", "=", "True", ")", "\n", "logits", "=", "tf", ".", "TensorArray", "(", "tf", ".", "float32", ",", "size", "=", "0", ",", "dynamic_size", "=", "True", ")", "\n", "for", "i", "in", "tf", ".", "range", "(", "steps", ")", ":", "\n", "      ", "batch_activations", ",", "batch_logits", "=", "strategy", ".", "run", "(", "\n", "step_fn", ",", "args", "=", "(", "next", "(", "iterator", ")", ",", ")", ")", "\n", "batch_activations", "=", "strategy", ".", "gather", "(", "batch_activations", ",", "axis", "=", "0", ")", "\n", "batch_logits", "=", "strategy", ".", "gather", "(", "batch_logits", ",", "axis", "=", "0", ")", "\n", "activations", "=", "activations", ".", "write", "(", "i", ",", "batch_activations", ")", "\n", "logits", "=", "logits", ".", "write", "(", "i", ",", "batch_logits", ")", "\n", "", "return", "activations", ".", "concat", "(", ")", ",", "logits", ".", "concat", "(", ")", "\n", "\n", "", "iterator", "=", "iter", "(", "ds", ")", "\n", "activations", ",", "logits", "=", "run", "(", "iterator", ")", "\n", "return", "activations", ",", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.utils.inception_utils._symmetric_matrix_square_root": [[74, 84], ["tensorflow.linalg.svd", "tensorflow.compat.v1.where", "tensorflow.matmul", "tensorflow.less", "tensorflow.sqrt", "tensorflow.matmul", "tensorflow.linalg.tensor_diag"], "function", ["None"], ["", "def", "_symmetric_matrix_square_root", "(", "mat", ",", "eps", "=", "1e-10", ")", ":", "\n", "  ", "\"\"\"Computes square root of a symmetric matrix.\"\"\"", "\n", "# Unlike numpy, tensorflow's return order is (s, u, v)", "\n", "s", ",", "u", ",", "v", "=", "tf", ".", "linalg", ".", "svd", "(", "mat", ")", "\n", "# sqrt is unstable around 0, just use 0 in such case", "\n", "si", "=", "tf", ".", "compat", ".", "v1", ".", "where", "(", "tf", ".", "less", "(", "s", ",", "eps", ")", ",", "s", ",", "tf", ".", "sqrt", "(", "s", ")", ")", "\n", "# Note that the v returned by Tensorflow is v = V", "\n", "# (when referencing the equation A = U S V^T)", "\n", "# This is unlike Numpy which returns v = V^T", "\n", "return", "tf", ".", "matmul", "(", "tf", ".", "matmul", "(", "u", ",", "tf", ".", "linalg", ".", "tensor_diag", "(", "si", ")", ")", ",", "v", ",", "transpose_b", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.utils.inception_utils._trace_sqrt_product": [[86, 90], ["inception_utils._symmetric_matrix_square_root", "tensorflow.matmul", "tensorflow.linalg.trace", "tensorflow.matmul", "inception_utils._symmetric_matrix_square_root"], "function", ["home.repos.pwc.inspect_result.google-research_hit-gan.utils.inception_utils._symmetric_matrix_square_root", "home.repos.pwc.inspect_result.google-research_hit-gan.utils.inception_utils._symmetric_matrix_square_root"], ["", "def", "_trace_sqrt_product", "(", "sigma", ",", "sigma_v", ")", ":", "\n", "  ", "sqrt_sigma", "=", "_symmetric_matrix_square_root", "(", "sigma", ")", "\n", "sqrt_a_sigmav_a", "=", "tf", ".", "matmul", "(", "sqrt_sigma", ",", "tf", ".", "matmul", "(", "sigma_v", ",", "sqrt_sigma", ")", ")", "\n", "return", "tf", ".", "linalg", ".", "trace", "(", "_symmetric_matrix_square_root", "(", "sqrt_a_sigmav_a", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.utils.inception_utils._kl_divergence": [[92, 113], ["tensorflow.reduce_sum", "tensorflow.nn.log_softmax", "tensorflow.math.log"], "function", ["None"], ["", "def", "_kl_divergence", "(", "p", ",", "p_logits", ",", "q", ")", ":", "\n", "  ", "\"\"\"Computes the Kullback-Liebler divergence between p and q.\n\n  This function uses p's logits in some places to improve numerical stability.\n  Specifically:\n  KL(p || q) = sum[ p * log(p / q) ]\n    = sum[ p * ( log(p)                - log(q) ) ]\n    = sum[ p * ( log_softmax(p_logits) - log(q) ) ]\n\n  Args:\n    p: A 2-D floating-point Tensor p_ij, where `i` corresponds to the minibatch\n      example and `j` corresponds to the probability of being in class `j`.\n    p_logits: A 2-D floating-point Tensor corresponding to logits for `p`.\n    q: A 1-D floating-point Tensor, where q_j corresponds to the probability of\n      class `j`.\n  Returns:\n    KL divergence between two distributions. Output dimension is 1D, one entry\n    per distribution in `p`.\n  \"\"\"", "\n", "return", "tf", ".", "reduce_sum", "(", "\n", "p", "*", "(", "tf", ".", "nn", ".", "log_softmax", "(", "p_logits", ")", "-", "tf", ".", "math", ".", "log", "(", "q", ")", ")", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.utils.inception_utils.frechet_inception_distance": [[115, 143], ["tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.cast", "tensorflow.cast", "inception_utils._trace_sqrt_product", "tensorflow.reduce_sum", "tensorflow_probability.stats.covariance", "tensorflow_probability.stats.covariance", "tensorflow.linalg.trace", "tensorflow.math.squared_difference", "tensorflow.shape", "tensorflow.shape"], "function", ["home.repos.pwc.inspect_result.google-research_hit-gan.utils.inception_utils._trace_sqrt_product"], ["", "def", "frechet_inception_distance", "(", "avg_pools1", ",", "avg_pools2", ")", ":", "\n", "  ", "\"\"\"FID for evaluating a generative model.\"\"\"", "\n", "m", "=", "tf", ".", "reduce_mean", "(", "avg_pools1", ",", "axis", "=", "0", ")", "\n", "m_w", "=", "tf", ".", "reduce_mean", "(", "avg_pools2", ",", "axis", "=", "0", ")", "\n", "\n", "# Calculate the unbiased covariance matrix of first activations.", "\n", "num_examples_real", "=", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "input", "=", "avg_pools1", ")", "[", "0", "]", ",", "tf", ".", "float32", ")", "\n", "sigma", "=", "(", "\n", "num_examples_real", "/", "(", "num_examples_real", "-", "1", ")", "*", "\n", "tfp", ".", "stats", ".", "covariance", "(", "avg_pools1", ")", ")", "\n", "\n", "# Calculate the unbiased covariance matrix of second activations.", "\n", "num_examples_generated", "=", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "input", "=", "avg_pools2", ")", "[", "0", "]", ",", "tf", ".", "float32", ")", "\n", "sigma_w", "=", "(", "\n", "num_examples_generated", "/", "(", "num_examples_generated", "-", "1", ")", "*", "\n", "tfp", ".", "stats", ".", "covariance", "(", "avg_pools2", ")", ")", "\n", "\n", "# Find the Tr(sqrt(sigma sigma_w)) component of FID", "\n", "sqrt_trace_component", "=", "_trace_sqrt_product", "(", "sigma", ",", "sigma_w", ")", "\n", "\n", "# First the covariance component.", "\n", "# Here, note that trace(A + B) = trace(A) + trace(B)", "\n", "trace", "=", "tf", ".", "linalg", ".", "trace", "(", "sigma", "+", "sigma_w", ")", "-", "2.0", "*", "sqrt_trace_component", "\n", "\n", "# Next the distance between means.", "\n", "mean", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "math", ".", "squared_difference", "(", "m", ",", "m_w", ")", ")", "\n", "fid", "=", "trace", "+", "mean", "\n", "return", "fid", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.utils.inception_utils.inception_score": [[145, 160], ["tensorflow.split", "int", "tensorflow.nn.softmax", "tensorflow.math.reduce_mean", "inception_utils._kl_divergence", "tensorflow.math.reduce_mean", "scores.append", "tensorflow.math.reduce_mean", "tensorflow.math.reduce_std", "tensorflow.shape", "tensorflow.exp"], "function", ["home.repos.pwc.inspect_result.google-research_hit-gan.utils.inception_utils._kl_divergence"], ["", "def", "inception_score", "(", "logits", ",", "num_splits", "=", "None", ",", "num_images_per_split", "=", "5000", ")", ":", "\n", "  ", "\"\"\"Inception score for evaluating a generative model.\"\"\"", "\n", "if", "num_splits", "is", "None", ":", "\n", "    ", "num_samples", "=", "tf", ".", "shape", "(", "logits", ")", "[", "0", "]", "\n", "num_splits", "=", "int", "(", "num_samples", "//", "num_images_per_split", ")", "\n", "\n", "", "scores", "=", "[", "]", "\n", "splits", "=", "tf", ".", "split", "(", "logits", ",", "num_or_size_splits", "=", "num_splits", ",", "axis", "=", "0", ")", "\n", "for", "p_logits", "in", "splits", ":", "\n", "    ", "p", "=", "tf", ".", "nn", ".", "softmax", "(", "p_logits", ",", "axis", "=", "-", "1", ")", "\n", "q", "=", "tf", ".", "math", ".", "reduce_mean", "(", "p", ",", "axis", "=", "0", ")", "\n", "kl", "=", "_kl_divergence", "(", "p", ",", "p_logits", ",", "q", ")", "\n", "log_scores", "=", "tf", ".", "math", ".", "reduce_mean", "(", "kl", ")", "\n", "scores", ".", "append", "(", "tf", ".", "exp", "(", "log_scores", ")", ")", "\n", "", "return", "tf", ".", "math", ".", "reduce_mean", "(", "scores", ")", ",", "tf", ".", "math", ".", "reduce_std", "(", "scores", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.google-research_hit-gan.utils.losses.l1_loss": [[21, 23], ["tensorflow.reduce_mean", "tensorflow.keras.losses.mean_absolute_error"], "function", ["None"], ["def", "l1_loss", "(", "y_true", ",", "y_pred", ")", ":", "\n", "  ", "return", "tf", ".", "reduce_mean", "(", "tf", ".", "keras", ".", "losses", ".", "mean_absolute_error", "(", "y_true", ",", "y_pred", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.utils.losses.l2_loss": [[25, 27], ["tensorflow.reduce_mean", "tensorflow.keras.losses.mean_squared_error"], "function", ["None"], ["", "def", "l2_loss", "(", "y_true", ",", "y_pred", ")", ":", "\n", "  ", "return", "tf", ".", "reduce_mean", "(", "tf", ".", "keras", ".", "losses", ".", "mean_squared_error", "(", "y_true", ",", "y_pred", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.utils.losses.r1_gradient_penalty": [[29, 42], ["tape.gradient", "tensorflow.reshape", "tensorflow.reduce_sum", "tensorflow.shape", "tensorflow.GradientTape", "tape.watch", "discriminator", "tensorflow.square", "tensorflow.reduce_mean"], "function", ["None"], ["", "def", "r1_gradient_penalty", "(", "discriminator", ",", "inputs", ",", "penalty_cost", "=", "1.0", ")", ":", "\n", "  ", "\"\"\"Calculates R1 gradient penalty for the discriminator.\"\"\"", "\n", "batch_size", "=", "tf", ".", "shape", "(", "inputs", ")", "[", "0", "]", "\n", "\n", "with", "tf", ".", "GradientTape", "(", ")", "as", "tape", ":", "\n", "    ", "tape", ".", "watch", "(", "inputs", ")", "\n", "outputs", "=", "discriminator", "(", "inputs", ",", "training", "=", "True", ")", "\n", "\n", "", "gradients", "=", "tape", ".", "gradient", "(", "outputs", ",", "inputs", ")", "\n", "gradients", "=", "tf", ".", "reshape", "(", "gradients", ",", "(", "batch_size", ",", "-", "1", ")", ")", "\n", "penalty", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "gradients", ")", ",", "axis", "=", "-", "1", ")", "\n", "penalty", "=", "tf", ".", "reduce_mean", "(", "penalty", ")", "*", "penalty_cost", "\n", "return", "outputs", ",", "penalty", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.utils.losses.wgan_gradient_penalty": [[44, 63], ["tensorflow.random.uniform", "tape.gradient", "tensorflow.reshape", "tensorflow.norm", "tensorflow.reduce_mean", "tensorflow.shape", "tensorflow.GradientTape", "tape.watch", "discriminator", "tensorflow.reduce_mean"], "function", ["None"], ["", "def", "wgan_gradient_penalty", "(", "discriminator", ",", "\n", "real_inputs", ",", "\n", "fake_inputs", ",", "\n", "penalty_cost", "=", "1.0", ")", ":", "\n", "  ", "\"\"\"Calculates WGAN gradient penalty for the discriminator.\"\"\"", "\n", "batch_size", "=", "tf", ".", "shape", "(", "real_inputs", ")", "[", "0", "]", "\n", "\n", "eps", "=", "tf", ".", "random", ".", "uniform", "(", "shape", "=", "(", "batch_size", ",", "*", "real_inputs", ".", "shape", "[", "1", ":", "]", ")", ")", "\n", "rand_inputs", "=", "eps", "*", "real_inputs", "+", "(", "1", "-", "eps", ")", "*", "fake_inputs", "\n", "with", "tf", ".", "GradientTape", "(", ")", "as", "tape", ":", "\n", "    ", "tape", ".", "watch", "(", "rand_inputs", ")", "\n", "rand_outputs", "=", "discriminator", "(", "rand_inputs", ",", "training", "=", "True", ")", "\n", "\n", "", "gradients", "=", "tape", ".", "gradient", "(", "rand_outputs", ",", "rand_inputs", ")", "\n", "gradients", "=", "tf", ".", "reshape", "(", "gradients", ",", "(", "batch_size", ",", "-", "1", ")", ")", "\n", "penalty", "=", "tf", ".", "norm", "(", "gradients", ",", "axis", "=", "-", "1", ")", "\n", "penalty", "=", "tf", ".", "reduce_mean", "(", "(", "penalty", "-", "1.0", ")", "**", "2", ")", "\n", "penalty", "=", "tf", ".", "reduce_mean", "(", "penalty", ")", "*", "penalty_cost", "\n", "return", "rand_outputs", ",", "penalty", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.utils.losses.discriminator_loss": [[65, 76], ["tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "ValueError", "tensorflow.math.softplus", "tensorflow.math.softplus"], "function", ["None"], ["", "def", "discriminator_loss", "(", "real_logits", ",", "fake_logits", ",", "loss_type", "=", "'hinge'", ")", ":", "\n", "  ", "\"\"\"Calculates losses for the discriminator.\"\"\"", "\n", "if", "loss_type", "==", "'hinge'", ":", "\n", "    ", "real_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "relu", "(", "1.0", "-", "real_logits", ")", ")", "\n", "fake_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "relu", "(", "1.0", "+", "fake_logits", ")", ")", "\n", "", "elif", "loss_type", "==", "'non-saturating'", ":", "\n", "    ", "real_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "math", ".", "softplus", "(", "-", "real_logits", ")", ")", "\n", "fake_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "math", ".", "softplus", "(", "fake_logits", ")", ")", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "'Discriminator loss {} not supported'", ".", "format", "(", "loss_type", ")", ")", "\n", "", "return", "real_loss", "+", "fake_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.utils.losses.generator_loss": [[78, 87], ["tensorflow.reduce_mean", "tensorflow.reduce_mean", "ValueError", "tensorflow.math.softplus"], "function", ["None"], ["", "def", "generator_loss", "(", "fake_logits", ",", "loss_type", "=", "'hinge'", ")", ":", "\n", "  ", "\"\"\"Calculates losses for the generator.\"\"\"", "\n", "if", "loss_type", "==", "'hinge'", ":", "\n", "    ", "fake_loss", "=", "-", "tf", ".", "reduce_mean", "(", "fake_logits", ")", "\n", "", "elif", "loss_type", "==", "'non-saturating'", ":", "\n", "    ", "fake_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "math", ".", "softplus", "(", "-", "fake_logits", ")", ")", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "'Generator loss {} not supported'", ".", "format", "(", "loss_type", ")", ")", "\n", "", "return", "fake_loss", "\n", "", ""]], "home.repos.pwc.inspect_result.google-research_hit-gan.utils.datasets.DatasetBuilder.__init__": [[32, 41], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "dataset_name", ":", "Text", ",", "\n", "data_dir", ":", "Optional", "[", "Text", "]", "=", "None", ",", "\n", "train_crop_mode", ":", "Text", "=", "\"fixed\"", ",", "\n", "eval_crop_mode", ":", "Text", "=", "\"fixed\"", ")", "->", "None", ":", "\n", "    ", "self", ".", "_dataset_name", "=", "dataset_name", "\n", "self", ".", "_data_dir", "=", "data_dir", "\n", "self", ".", "_train_crop_mode", "=", "train_crop_mode", "\n", "self", ".", "_eval_crop_mode", "=", "eval_crop_mode", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.utils.datasets.DatasetBuilder.get_num_examples": [[42, 45], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "get_num_examples", "(", "self", ",", "training", ":", "bool", "=", "False", ")", "->", "int", ":", "\n", "    ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.utils.datasets.DatasetBuilder.get_dataset": [[46, 49], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "get_dataset", "(", "self", ",", "training", ":", "bool", "=", "False", ")", "->", "tf", ".", "data", ".", "Dataset", ":", "\n", "    ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.utils.datasets.DatasetBuilder.get_dataset_map_fn": [[50, 71], ["utils.dataset_utils.get_preprocess_fn", "dict", "utils.dataset_utils.get_preprocess_fn."], "methods", ["home.repos.pwc.inspect_result.google-research_hit-gan.utils.dataset_utils.get_preprocess_fn"], ["", "def", "get_dataset_map_fn", "(", "self", ",", "\n", "image_crop_size", ":", "int", ",", "\n", "image_aspect_ratio", ":", "float", "=", "1.0", ",", "\n", "image_crop_proportion", ":", "float", "=", "1.0", ",", "\n", "random_flip", ":", "bool", "=", "False", ",", "\n", "training", ":", "bool", "=", "False", ")", ":", "\n", "    ", "\"\"\"Gets dataset mapping function.\"\"\"", "\n", "crop_mode", "=", "self", ".", "_train_crop_mode", "if", "training", "else", "self", ".", "_eval_crop_mode", "\n", "preprocess_fn", "=", "dataset_utils", ".", "get_preprocess_fn", "(", "\n", "image_crop_size", ",", "\n", "aspect_ratio", "=", "image_aspect_ratio", ",", "\n", "crop_mode", "=", "crop_mode", ",", "\n", "crop_proportion", "=", "image_crop_proportion", ",", "\n", "method", "=", "tf", ".", "image", ".", "ResizeMethod", ".", "BICUBIC", ",", "\n", "flip", "=", "random_flip", ",", "\n", "normalize", "=", "True", ")", "\n", "\n", "def", "map_fn", "(", "features", ")", ":", "\n", "      ", "return", "dict", "(", "images", "=", "preprocess_fn", "(", "features", "[", "\"image\"", "]", ")", ")", "\n", "\n", "", "return", "map_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.utils.datasets.TFDSBuilder.__init__": [[76, 86], ["datasets.DatasetBuilder.__init__", "tensorflow_datasets.builder", "tensorflow_datasets.builder.download_and_prepare"], "methods", ["home.repos.pwc.inspect_result.google-research_hit-gan.models.discriminators.StyleGANDiscriminator.__init__"], ["def", "__init__", "(", "self", ",", "\n", "train_split", ":", "Text", "=", "\"train\"", ",", "\n", "eval_split", ":", "Text", "=", "\"test\"", ",", "\n", "**", "kwargs", ":", "Any", ")", "->", "None", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "builder", "=", "tfds", ".", "builder", "(", "self", ".", "_dataset_name", ",", "data_dir", "=", "self", ".", "_data_dir", ")", "\n", "builder", ".", "download_and_prepare", "(", ")", "\n", "self", ".", "_builder", "=", "builder", "\n", "self", ".", "_train_split", "=", "train_split", "\n", "self", ".", "_eval_split", "=", "eval_split", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.utils.datasets.TFDSBuilder.get_num_examples": [[87, 90], ["None"], "methods", ["None"], ["", "def", "get_num_examples", "(", "self", ",", "training", ":", "bool", "=", "False", ")", "->", "int", ":", "\n", "    ", "split", "=", "self", ".", "_train_split", "if", "training", "else", "self", ".", "_eval_split", "\n", "return", "self", ".", "_builder", ".", "info", ".", "splits", "[", "split", "]", ".", "num_examples", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.utils.datasets.TFDSBuilder.get_dataset": [[91, 95], ["datasets.TFDSBuilder._builder.as_dataset"], "methods", ["None"], ["", "def", "get_dataset", "(", "self", ",", "training", ":", "bool", "=", "False", ")", "->", "tf", ".", "data", ".", "Dataset", ":", "\n", "    ", "split", "=", "self", ".", "_train_split", "if", "training", "else", "self", ".", "_eval_split", "\n", "dataset", "=", "self", ".", "_builder", ".", "as_dataset", "(", "split", ",", "shuffle_files", "=", "training", ")", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.utils.datasets.FFHQ.__init__": [[108, 117], ["datasets.DatasetBuilder.__init__", "int", "int", "os.path.join", "math.log2", "datasets.FFHQ._dataset_name.split"], "methods", ["home.repos.pwc.inspect_result.google-research_hit-gan.models.discriminators.StyleGANDiscriminator.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ":", "Any", ")", "->", "None", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "resolution", "=", "int", "(", "self", ".", "_dataset_name", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ")", "\n", "log2_resolution", "=", "int", "(", "math", ".", "log2", "(", "resolution", ")", ")", "\n", "data_dir", "=", "self", ".", "_data_dir", "\n", "\n", "self", ".", "_resolution", "=", "resolution", "\n", "self", ".", "_tfrecord_path", "=", "os", ".", "path", ".", "join", "(", "\n", "data_dir", ",", "\"ffhq-r{:02d}.tfrecords\"", ".", "format", "(", "log2_resolution", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.utils.datasets.FFHQ.get_num_examples": [[118, 120], ["None"], "methods", ["None"], ["", "def", "get_num_examples", "(", "self", ",", "training", ":", "bool", "=", "False", ")", "->", "int", ":", "\n", "    ", "return", "self", ".", "DATASET_SIZE", "if", "training", "else", "self", ".", "EVAL_DATASET_SIZE", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.utils.datasets.FFHQ.get_dataset": [[121, 127], ["tensorflow.data.TFRecordDataset", "dataset.take.take.take"], "methods", ["None"], ["", "def", "get_dataset", "(", "self", ",", "training", ":", "bool", "=", "False", ")", "->", "tf", ".", "data", ".", "Dataset", ":", "\n", "    ", "dataset", "=", "tf", ".", "data", ".", "TFRecordDataset", "(", "\n", "self", ".", "_tfrecord_path", ",", "buffer_size", "=", "256", "<<", "20", ")", "\n", "dataset", "=", "dataset", ".", "take", "(", "\n", "self", ".", "DATASET_SIZE", "if", "training", "else", "self", ".", "EVAL_DATASET_SIZE", ")", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.utils.datasets.FFHQ.get_dataset_map_fn": [[128, 151], ["datasets.DatasetBuilder.get_dataset_map_fn", "tensorflow.io.parse_single_example", "tensorflow.io.decode_raw", "tensorflow.reshape", "tensorflow.transpose", "super().get_dataset_map_fn.", "tensorflow.io.FixedLenFeature", "dict"], "methods", ["home.repos.pwc.inspect_result.google-research_hit-gan.utils.datasets.FFHQ.get_dataset_map_fn"], ["", "def", "get_dataset_map_fn", "(", "self", ",", "\n", "image_crop_size", ":", "int", ",", "\n", "image_aspect_ratio", ":", "float", "=", "1.0", ",", "\n", "image_crop_proportion", ":", "float", "=", "1.0", ",", "\n", "random_flip", ":", "bool", "=", "False", ",", "\n", "training", ":", "bool", "=", "False", ")", ":", "\n", "    ", "\"\"\"Gets dataset mapping function.\"\"\"", "\n", "preprocess_fn", "=", "super", "(", ")", ".", "get_dataset_map_fn", "(", "\n", "image_crop_size", "=", "image_crop_size", ",", "\n", "image_aspect_ratio", "=", "image_aspect_ratio", ",", "\n", "image_crop_proportion", "=", "image_crop_proportion", ",", "\n", "random_flip", "=", "random_flip", ",", "\n", "training", "=", "training", ")", "\n", "\n", "def", "map_fn", "(", "record", ")", ":", "\n", "      ", "features", "=", "{", "\"data\"", ":", "tf", ".", "io", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "string", ")", "}", "\n", "parsed_example", "=", "tf", ".", "io", ".", "parse_single_example", "(", "record", ",", "features", ")", "\n", "data", "=", "tf", ".", "io", ".", "decode_raw", "(", "parsed_example", "[", "\"data\"", "]", ",", "tf", ".", "uint8", ")", "\n", "image", "=", "tf", ".", "reshape", "(", "data", ",", "shape", "=", "(", "3", ",", "self", ".", "_resolution", ",", "self", ".", "_resolution", ")", ")", "\n", "image", "=", "tf", ".", "transpose", "(", "image", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "return", "preprocess_fn", "(", "dict", "(", "image", "=", "image", ")", ")", "\n", "\n", "", "return", "map_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.utils.datasets.get_dataset": [[153, 189], ["datasets.TFDSBuilder", "datasets.TFDSBuilder", "dataset_name.startswith", "datasets.TFDSBuilder", "datasets.FFHQ", "ValueError"], "function", ["None"], ["", "", "def", "get_dataset", "(", "dataset_name", ":", "Text", ",", "\n", "data_dir", ":", "Optional", "[", "Text", "]", "=", "None", ")", "->", "DatasetBuilder", ":", "\n", "  ", "\"\"\"Gets the DatasetBuilder object by the dataset name.\"\"\"", "\n", "if", "dataset_name", "==", "\"cifar10\"", ":", "\n", "    ", "dataset", "=", "TFDSBuilder", "(", "\n", "dataset_name", "=", "dataset_name", ",", "\n", "data_dir", "=", "data_dir", ",", "\n", "train_crop_mode", "=", "\"fixed\"", ",", "\n", "eval_crop_mode", "=", "\"fixed\"", ",", "\n", "train_split", "=", "\"train\"", ",", "\n", "eval_split", "=", "\"test\"", ")", "\n", "", "elif", "dataset_name", "==", "\"imagenet2012\"", ":", "\n", "    ", "dataset", "=", "TFDSBuilder", "(", "\n", "dataset_name", "=", "dataset_name", ",", "\n", "data_dir", "=", "data_dir", ",", "\n", "train_crop_mode", "=", "\"random_crop\"", ",", "\n", "eval_crop_mode", "=", "\"center_crop\"", ",", "\n", "train_split", "=", "\"train\"", ",", "\n", "eval_split", "=", "\"validation[:50000]\"", ")", "\n", "", "elif", "dataset_name", ".", "startswith", "(", "\"celeb_a_hq\"", ")", ":", "\n", "    ", "dataset", "=", "TFDSBuilder", "(", "\n", "dataset_name", "=", "dataset_name", ",", "\n", "data_dir", "=", "data_dir", ",", "\n", "train_crop_mode", "=", "\"fixed\"", ",", "\n", "eval_crop_mode", "=", "\"fixed\"", ",", "\n", "train_split", "=", "\"train\"", ",", "\n", "eval_split", "=", "\"train\"", ")", "\n", "", "elif", "dataset_name", "in", "[", "\"ffhq/{}\"", ".", "format", "(", "r", ")", "for", "r", "in", "FFHQ", ".", "RESOLUTIONS", "]", ":", "\n", "    ", "dataset", "=", "FFHQ", "(", "\n", "dataset_name", "=", "dataset_name", ",", "\n", "data_dir", "=", "data_dir", ",", "\n", "train_crop_mode", "=", "\"fixed\"", ",", "\n", "eval_crop_mode", "=", "\"fixed\"", ")", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "\"{} is not a recognized dataset\"", ".", "format", "(", "dataset_name", ")", ")", "\n", "", "return", "dataset", "\n", "", ""]], "home.repos.pwc.inspect_result.google-research_hit-gan.trainers.base_trainer.BaseTrainer.__init__": [[38, 99], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "strategy", ",", "\n", "model_dir", ":", "Text", ",", "\n", "train_batch_size", ":", "int", ",", "\n", "eval_batch_size", ":", "int", ",", "\n", "dataset", ":", "Text", ",", "\n", "train_steps", ":", "int", ",", "\n", "data_dir", ":", "Optional", "[", "Text", "]", "=", "None", ",", "\n", "image_crop_size", ":", "int", "=", "256", ",", "\n", "image_aspect_ratio", ":", "float", "=", "1.0", ",", "\n", "image_crop_proportion", ":", "float", "=", "1.0", ",", "\n", "random_flip", ":", "bool", "=", "False", ",", "\n", "record_every_n_steps", ":", "int", "=", "100", ",", "\n", "save_every_n_steps", ":", "int", "=", "1000", ",", "\n", "batch_every_n_steps", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "keep_checkpoint_max", ":", "int", "=", "50", ")", ":", "\n", "    ", "\"\"\"Initializer.\n\n    Args:\n      strategy: A tf.distribute.Strategy object for the dsitributed strategy.\n      model_dir: A string for the save path of trained models.\n      train_batch_size: An integer for the training batch size.\n      eval_batch_size: An integer for the evaluation batch size.\n      dataset: A string for the dataset name.\n      train_steps: An integer for the number of training steps.\n      data_dir: A string for the path of the dataset.\n      image_crop_size: An integer for the size of cropped images.\n      image_aspect_ratio: A float for the aspect ratio of images.\n      image_crop_proportion: A float for the crop proportion of images.\n      random_flip: Whether to use random flip.\n      record_every_n_steps: An integer for the number of steps to record.\n      save_every_n_steps: An integer for the number of steps to save models.\n      batch_every_n_steps: An integer for the number of steps to batch.\n      keep_checkpoint_max: An integer for the maximum number of checkpoints to\n        keep.\n    \"\"\"", "\n", "self", ".", "train_batch_size", "=", "train_batch_size", "\n", "self", ".", "eval_batch_size", "=", "eval_batch_size", "\n", "self", ".", "train_steps", "=", "train_steps", "\n", "self", ".", "keep_checkpoint_max", "=", "keep_checkpoint_max", "\n", "self", ".", "record_every_n_steps", "=", "record_every_n_steps", "\n", "self", ".", "save_every_n_steps", "=", "save_every_n_steps", "\n", "self", ".", "batch_every_n_steps", "=", "batch_every_n_steps", "\n", "\n", "if", "self", ".", "batch_every_n_steps", "is", "None", ":", "\n", "      ", "self", ".", "batch_every_n_steps", "=", "self", ".", "record_every_n_steps", "\n", "\n", "", "self", ".", "objects", "=", "{", "}", "\n", "self", ".", "train_metrics", "=", "{", "}", "\n", "self", ".", "eval_metrics", "=", "{", "}", "\n", "self", ".", "global_step", "=", "None", "\n", "\n", "self", ".", "strategy", "=", "strategy", "\n", "self", ".", "model_dir", "=", "model_dir", "\n", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "data_dir", "=", "data_dir", "\n", "self", ".", "image_crop_size", "=", "image_crop_size", "\n", "self", ".", "image_aspect_ratio", "=", "image_aspect_ratio", "\n", "self", ".", "image_crop_proportion", "=", "image_crop_proportion", "\n", "self", ".", "random_flip", "=", "random_flip", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.trainers.base_trainer.BaseTrainer.build": [[100, 107], ["base_trainer.BaseTrainer._build_dataset", "tensorflow.summary.create_file_writer", "base_trainer.BaseTrainer.strategy.scope", "base_trainer.BaseTrainer._build_models", "base_trainer.BaseTrainer._build_optimizers", "base_trainer.BaseTrainer._build_metrics"], "methods", ["home.repos.pwc.inspect_result.google-research_hit-gan.trainers.base_trainer.BaseTrainer._build_dataset", "home.repos.pwc.inspect_result.google-research_hit-gan.trainers.gan_trainer.GANTrainer._build_models", "home.repos.pwc.inspect_result.google-research_hit-gan.trainers.gan_trainer.GANTrainer._build_optimizers", "home.repos.pwc.inspect_result.google-research_hit-gan.trainers.gan_trainer.GANTrainer._build_metrics"], ["", "def", "build", "(", "self", ")", ":", "\n", "    ", "self", ".", "_build_dataset", "(", ")", "\n", "with", "self", ".", "strategy", ".", "scope", "(", ")", ":", "\n", "      ", "self", ".", "_build_models", "(", ")", "\n", "self", ".", "_build_optimizers", "(", ")", "\n", "self", ".", "_build_metrics", "(", ")", "\n", "", "self", ".", "summary_writer", "=", "tf", ".", "summary", ".", "create_file_writer", "(", "self", ".", "model_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.trainers.base_trainer.BaseTrainer._build_models": [[108, 111], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "_build_models", "(", "self", ")", ":", "\n", "    ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.trainers.base_trainer.BaseTrainer._build_optimizers": [[112, 115], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "_build_optimizers", "(", "self", ")", ":", "\n", "    ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.trainers.base_trainer.BaseTrainer._build_metrics": [[116, 119], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "_build_metrics", "(", "self", ")", ":", "\n", "    ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.trainers.base_trainer.BaseTrainer._build_dataset": [[120, 136], ["utils.datasets.get_dataset", "utils.datasets.get_dataset.get_num_examples", "utils.datasets.get_dataset.get_num_examples", "int", "int", "absl.logging.info", "absl.logging.info", "absl.logging.info", "absl.logging.info", "math.ceil"], "methods", ["home.repos.pwc.inspect_result.google-research_hit-gan.utils.datasets.get_dataset", "home.repos.pwc.inspect_result.google-research_hit-gan.utils.datasets.FFHQ.get_num_examples", "home.repos.pwc.inspect_result.google-research_hit-gan.utils.datasets.FFHQ.get_num_examples"], ["", "def", "_build_dataset", "(", "self", ")", ":", "\n", "    ", "\"\"\"Builds the training or evaluation dataset.\"\"\"", "\n", "builder", "=", "datasets", ".", "get_dataset", "(", "self", ".", "dataset", ",", "data_dir", "=", "self", ".", "data_dir", ")", "\n", "num_train_examples", "=", "builder", ".", "get_num_examples", "(", "training", "=", "True", ")", "\n", "num_eval_examples", "=", "builder", ".", "get_num_examples", "(", "training", "=", "False", ")", "\n", "\n", "self", ".", "steps_per_epoch", "=", "int", "(", "num_train_examples", "//", "self", ".", "train_batch_size", ")", "\n", "self", ".", "eval_steps", "=", "int", "(", "math", ".", "ceil", "(", "num_eval_examples", "/", "self", ".", "eval_batch_size", ")", ")", "\n", "self", ".", "builder", "=", "builder", "\n", "self", ".", "num_train_examples", "=", "num_train_examples", "\n", "self", ".", "num_eval_examples", "=", "num_eval_examples", "\n", "\n", "logging", ".", "info", "(", "'# train examples: %d'", ",", "num_train_examples", ")", "\n", "logging", ".", "info", "(", "'# train_steps: %d'", ",", "self", ".", "train_steps", ")", "\n", "logging", ".", "info", "(", "'# eval examples: %d'", ",", "num_eval_examples", ")", "\n", "logging", ".", "info", "(", "'# eval steps: %d'", ",", "self", ".", "eval_steps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.trainers.base_trainer.BaseTrainer._train_one_step": [[137, 140], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "_train_one_step", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.trainers.base_trainer.BaseTrainer._evaluate_one_step": [[141, 144], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "_evaluate_one_step", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.trainers.base_trainer.BaseTrainer._should_record": [[145, 149], ["tensorflow.greater_equal", "tensorflow.equal", "tensorflow.logical_or"], "methods", ["None"], ["", "def", "_should_record", "(", "self", ",", "step", ")", ":", "\n", "    ", "last_step", "=", "tf", ".", "greater_equal", "(", "step", ",", "self", ".", "train_steps", ")", "\n", "should_record", "=", "tf", ".", "equal", "(", "step", "%", "self", ".", "record_every_n_steps", ",", "0", ")", "\n", "return", "tf", ".", "logical_or", "(", "should_record", ",", "last_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.trainers.base_trainer.BaseTrainer._should_save": [[150, 154], ["tensorflow.greater_equal", "tensorflow.equal", "tensorflow.logical_or"], "methods", ["None"], ["", "def", "_should_save", "(", "self", ",", "step", ")", ":", "\n", "    ", "last_step", "=", "tf", ".", "greater_equal", "(", "step", ",", "self", ".", "train_steps", ")", "\n", "should_save", "=", "tf", ".", "equal", "(", "step", "%", "self", ".", "save_every_n_steps", ",", "0", ")", "\n", "return", "tf", ".", "logical_or", "(", "should_save", ",", "last_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.trainers.base_trainer.BaseTrainer._log_images": [[155, 182], ["iter", "tensorflow.concat", "utils.metrics.log_images_to_summary", "next", "base_trainer.BaseTrainer.strategy.gather", "utils.data_utils.to_images", "base_trainer.BaseTrainer.strategy.run", "base_trainer.BaseTrainer.strategy.gather", "utils.data_utils.to_images", "tensorflow.concat", "tensorflow.concat.append", "base_trainer.BaseTrainer._evaluate_one_step", "step_fn"], "methods", ["home.repos.pwc.inspect_result.google-research_hit-gan.utils.metrics.log_images_to_summary", "home.repos.pwc.inspect_result.google-research_hit-gan.utils.data_utils.to_images", "home.repos.pwc.inspect_result.google-research_hit-gan.utils.data_utils.to_images", "home.repos.pwc.inspect_result.google-research_hit-gan.trainers.gan_trainer.GANTrainer._evaluate_one_step"], ["", "def", "_log_images", "(", "self", ",", "name", ",", "ds", ",", "max_outputs", "=", "64", ",", "step_fn", "=", "None", ")", ":", "\n", "    ", "\"\"\"Logs images to tf.summary.\"\"\"", "\n", "@", "tf", ".", "function", "\n", "def", "run_one_step", "(", "inputs", ")", ":", "\n", "      ", "if", "step_fn", "is", "None", ":", "\n", "        ", "return", "self", ".", "_evaluate_one_step", "(", "inputs", ")", "\n", "", "else", ":", "\n", "        ", "return", "step_fn", "(", "inputs", ")", "\n", "\n", "", "", "outputs", "=", "[", "]", "\n", "num_outputs", "=", "0", "\n", "iterator", "=", "iter", "(", "ds", ")", "\n", "while", "num_outputs", "<", "max_outputs", ":", "\n", "      ", "inputs", "=", "next", "(", "iterator", ")", "\n", "batch_images", "=", "self", ".", "strategy", ".", "gather", "(", "inputs", "[", "'images'", "]", ",", "axis", "=", "0", ")", "\n", "batch_images", "=", "data_utils", ".", "to_images", "(", "batch_images", ")", "\n", "\n", "batch_outputs", "=", "self", ".", "strategy", ".", "run", "(", "run_one_step", ",", "args", "=", "(", "inputs", ",", ")", ")", "\n", "batch_outputs", "=", "self", ".", "strategy", ".", "gather", "(", "batch_outputs", ",", "axis", "=", "0", ")", "\n", "batch_outputs", "=", "data_utils", ".", "to_images", "(", "batch_outputs", ")", "\n", "\n", "batch_outputs", "=", "tf", ".", "concat", "(", "(", "batch_images", ",", "batch_outputs", ")", ",", "axis", "=", "2", ")", "\n", "outputs", ".", "append", "(", "batch_outputs", ")", "\n", "num_outputs", "+=", "batch_outputs", ".", "shape", "[", "0", "]", "\n", "\n", "", "outputs", "=", "tf", ".", "concat", "(", "outputs", ",", "axis", "=", "0", ")", "\n", "metrics", ".", "log_images_to_summary", "(", "name", ",", "outputs", ",", "self", ".", "global_step", ",", "max_outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.trainers.base_trainer.BaseTrainer.train": [[183, 227], ["iter", "utils.metrics.reset_metrics", "absl.logging.info", "base_trainer.BaseTrainer.strategy.scope", "utils.dataset_utils.build_distributed_dataset", "base_trainer.BaseTrainer.restore_from_checkpoint", "tensorflow.range", "base_trainer.BaseTrainer.strategy.run", "base_trainer.BaseTrainer.summary_writer.as_default", "time.time", "base_trainer.BaseTrainer.train.train_multiple_steps"], "methods", ["home.repos.pwc.inspect_result.google-research_hit-gan.utils.metrics.reset_metrics", "home.repos.pwc.inspect_result.google-research_hit-gan.utils.dataset_utils.build_distributed_dataset", "home.repos.pwc.inspect_result.google-research_hit-gan.trainers.base_trainer.BaseTrainer.restore_from_checkpoint"], ["", "def", "train", "(", "self", ")", ":", "\n", "    ", "\"\"\"Trains the model.\"\"\"", "\n", "with", "self", ".", "strategy", ".", "scope", "(", ")", ":", "\n", "      ", "train_ds", "=", "dataset_utils", ".", "build_distributed_dataset", "(", "\n", "self", ".", "builder", ",", "\n", "self", ".", "strategy", ",", "\n", "global_batch_size", "=", "self", ".", "train_batch_size", ",", "\n", "image_crop_size", "=", "self", ".", "image_crop_size", ",", "\n", "image_aspect_ratio", "=", "self", ".", "image_aspect_ratio", ",", "\n", "image_crop_proportion", "=", "self", ".", "image_crop_proportion", ",", "\n", "random_flip", "=", "self", ".", "random_flip", ",", "\n", "training", "=", "True", ",", "\n", "cache", "=", "False", ")", "\n", "checkpoint_manager", "=", "self", ".", "restore_from_checkpoint", "(", ")", "\n", "\n", "", "@", "tf", ".", "function", "\n", "def", "train_multiple_steps", "(", "iterator", ")", ":", "\n", "      ", "for", "_", "in", "tf", ".", "range", "(", "self", ".", "batch_every_n_steps", ")", ":", "\n", "        ", "self", ".", "strategy", ".", "run", "(", "self", ".", "_train_one_step", ",", "args", "=", "(", "next", "(", "iterator", ")", ",", ")", ")", "\n", "\n", "", "", "current_step", "=", "self", ".", "global_step", "\n", "iterator", "=", "iter", "(", "train_ds", ")", "\n", "metrics", ".", "reset_metrics", "(", "self", ".", "train_metrics", ")", "\n", "\n", "while", "current_step", "<", "self", ".", "train_steps", ":", "\n", "      ", "with", "self", ".", "summary_writer", ".", "as_default", "(", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "train_multiple_steps", "(", "iterator", ")", "\n", "duration", "=", "(", "time", ".", "time", "(", ")", "-", "start", ")", "\n", "\n", "with", "tf", ".", "summary", ".", "record_if", "(", "self", ".", "_should_record", "(", "current_step", ")", ")", ":", "\n", "          ", "tf", ".", "summary", ".", "scalar", "(", "'train/batch_time'", ",", "duration", ",", "step", "=", "current_step", ")", "\n", "metrics", ".", "log_and_write_metrics_to_summary", "(", "self", ".", "train_metrics", ",", "\n", "current_step", ")", "\n", "\n", "", "if", "self", ".", "_should_record", "(", "current_step", ")", ":", "\n", "          ", "metrics", ".", "reset_metrics", "(", "self", ".", "train_metrics", ")", "\n", "\n", "", "if", "self", ".", "_should_save", "(", "current_step", ")", ":", "\n", "          ", "checkpoint_manager", ".", "save", "(", "current_step", ")", "\n", "logging", ".", "info", "(", "'Completed: %d / %d steps'", ",", "current_step", ".", "numpy", "(", ")", ",", "\n", "self", ".", "train_steps", ")", "\n", "", "self", ".", "summary_writer", ".", "flush", "(", ")", "\n", "", "", "logging", ".", "info", "(", "'Training complete...'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.trainers.base_trainer.BaseTrainer.evaluate": [[228, 292], ["utils.metrics.reset_metrics", "utils.inception_utils.run_inception_model", "tensorflow.train.checkpoints_iterator", "absl.logging.info", "base_trainer.BaseTrainer.strategy.scope", "utils.dataset_utils.build_distributed_dataset", "utils.inception_utils.restore_inception_model", "absl.logging.info", "base_trainer.BaseTrainer.strategy.scope", "base_trainer.BaseTrainer.restore_from_checkpoint", "absl.logging.info", "base_trainer.BaseTrainer.summary_writer.as_default", "time.time", "utils.inception_utils.run_inception_model", "utils.inception_utils.frechet_inception_distance", "utils.inception_utils.inception_score", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "base_trainer.BaseTrainer._log_images", "utils.metrics.log_and_write_metrics_to_summary", "utils.metrics.reset_metrics", "base_trainer.BaseTrainer.summary_writer.flush", "base_trainer.BaseTrainer.save_best_checkpoint", "global_step.numpy", "base_trainer.BaseTrainer.global_step.numpy", "time.time"], "methods", ["home.repos.pwc.inspect_result.google-research_hit-gan.utils.metrics.reset_metrics", "home.repos.pwc.inspect_result.google-research_hit-gan.utils.inception_utils.run_inception_model", "home.repos.pwc.inspect_result.google-research_hit-gan.utils.dataset_utils.build_distributed_dataset", "home.repos.pwc.inspect_result.google-research_hit-gan.utils.inception_utils.restore_inception_model", "home.repos.pwc.inspect_result.google-research_hit-gan.trainers.base_trainer.BaseTrainer.restore_from_checkpoint", "home.repos.pwc.inspect_result.google-research_hit-gan.utils.inception_utils.run_inception_model", "home.repos.pwc.inspect_result.google-research_hit-gan.utils.inception_utils.frechet_inception_distance", "home.repos.pwc.inspect_result.google-research_hit-gan.utils.inception_utils.inception_score", "home.repos.pwc.inspect_result.google-research_hit-gan.trainers.base_trainer.BaseTrainer._log_images", "home.repos.pwc.inspect_result.google-research_hit-gan.utils.metrics.log_and_write_metrics_to_summary", "home.repos.pwc.inspect_result.google-research_hit-gan.utils.metrics.reset_metrics", "home.repos.pwc.inspect_result.google-research_hit-gan.trainers.base_trainer.BaseTrainer.save_best_checkpoint"], ["", "def", "evaluate", "(", "self", ")", ":", "\n", "    ", "\"\"\"Evaluates the model.\"\"\"", "\n", "evaluated_last_checkpoint", "=", "False", "\n", "metrics", ".", "reset_metrics", "(", "self", ".", "eval_metrics", ")", "\n", "\n", "with", "self", ".", "strategy", ".", "scope", "(", ")", ":", "\n", "      ", "eval_ds", "=", "dataset_utils", ".", "build_distributed_dataset", "(", "\n", "self", ".", "builder", ",", "\n", "self", ".", "strategy", ",", "\n", "global_batch_size", "=", "self", ".", "eval_batch_size", ",", "\n", "image_crop_size", "=", "self", ".", "image_crop_size", ",", "\n", "image_aspect_ratio", "=", "self", ".", "image_aspect_ratio", ",", "\n", "image_crop_proportion", "=", "self", ".", "image_crop_proportion", ",", "\n", "random_flip", "=", "False", ",", "\n", "training", "=", "False", ",", "\n", "cache", "=", "False", ")", "\n", "inception_model", "=", "inception_utils", ".", "restore_inception_model", "(", ")", "\n", "\n", "", "activations", ",", "_", "=", "inception_utils", ".", "run_inception_model", "(", "\n", "eval_ds", ",", "inception_model", ",", "steps", "=", "self", ".", "eval_steps", ",", "strategy", "=", "self", ".", "strategy", ")", "\n", "\n", "def", "timeout_fn", "(", ")", ":", "\n", "      ", "\"\"\"Timeout function to stop the evaluation.\"\"\"", "\n", "return", "evaluated_last_checkpoint", "\n", "\n", "", "for", "_", "in", "tf", ".", "train", ".", "checkpoints_iterator", "(", "\n", "self", ".", "model_dir", ",", "timeout", "=", "1", ",", "timeout_fn", "=", "timeout_fn", ")", ":", "\n", "\n", "      ", "with", "self", ".", "strategy", ".", "scope", "(", ")", ":", "\n", "        ", "self", ".", "restore_from_checkpoint", "(", ")", "\n", "logging", ".", "info", "(", "'Last checkpoint [iteration: %d] restored at %s.'", ",", "\n", "self", ".", "global_step", ".", "numpy", "(", ")", ",", "self", ".", "model_dir", ")", "\n", "\n", "", "global_step", "=", "self", ".", "global_step", "\n", "if", "global_step", ">=", "self", ".", "train_steps", ":", "\n", "        ", "evaluated_last_checkpoint", "=", "True", "\n", "\n", "", "with", "self", ".", "summary_writer", ".", "as_default", "(", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "gen_activations", ",", "gen_logits", "=", "inception_utils", ".", "run_inception_model", "(", "\n", "eval_ds", ",", "\n", "inception_model", ",", "\n", "steps", "=", "self", ".", "eval_steps", ",", "\n", "strategy", "=", "self", ".", "strategy", ",", "\n", "map_fn", "=", "self", ".", "_evaluate_one_step", ")", "\n", "frechet_inception_distance", "=", "inception_utils", ".", "frechet_inception_distance", "(", "\n", "activations", ",", "gen_activations", ")", "\n", "inception_score", ",", "_", "=", "inception_utils", ".", "inception_score", "(", "gen_logits", ")", "\n", "duration", "=", "(", "time", ".", "time", "(", ")", "-", "start", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'eval/eval_time'", ",", "duration", ",", "step", "=", "global_step", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "\n", "'eval/frechet_inception_distance'", ",", "\n", "frechet_inception_distance", ",", "\n", "step", "=", "global_step", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "\n", "'eval/inception_score'", ",", "inception_score", ",", "step", "=", "global_step", ")", "\n", "\n", "self", ".", "_log_images", "(", "'eval/reconstructions'", ",", "eval_ds", ")", "\n", "metrics", ".", "log_and_write_metrics_to_summary", "(", "self", ".", "eval_metrics", ",", "global_step", ")", "\n", "metrics", ".", "reset_metrics", "(", "self", ".", "eval_metrics", ")", "\n", "self", ".", "summary_writer", ".", "flush", "(", ")", "\n", "self", ".", "save_best_checkpoint", "(", "frechet_inception_distance", ")", "\n", "", "logging", ".", "info", "(", "'Finished evaluation for step %d'", ",", "global_step", ".", "numpy", "(", ")", ")", "\n", "", "logging", ".", "info", "(", "'Evaluation complete...'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.trainers.base_trainer.BaseTrainer.restore_from_checkpoint": [[293, 312], ["tensorflow.train.Checkpoint", "tensorflow.train.CheckpointManager", "tensorflow.train.Checkpoint.restore().expect_partial", "tensorflow.train.Checkpoint.restore"], "methods", ["None"], ["", "def", "restore_from_checkpoint", "(", "self", ",", "checkpoint_path", "=", "None", ")", ":", "\n", "    ", "\"\"\"Restores the checkpoint (if one exists on the path).\n\n    Args:\n      checkpoint_path: The path where checkpoints are restored.\n\n    Returns:\n      The tf.train.CheckpointManager object.\n    \"\"\"", "\n", "checkpoint", "=", "tf", ".", "train", ".", "Checkpoint", "(", "**", "self", ".", "objects", ")", "\n", "checkpoint_manager", "=", "tf", ".", "train", ".", "CheckpointManager", "(", "\n", "checkpoint", ",", "\n", "directory", "=", "self", ".", "model_dir", ",", "\n", "max_to_keep", "=", "self", ".", "keep_checkpoint_max", ")", "\n", "\n", "if", "checkpoint_path", "is", "None", ":", "\n", "      ", "checkpoint_path", "=", "checkpoint_manager", ".", "latest_checkpoint", "\n", "", "checkpoint", ".", "restore", "(", "checkpoint_path", ")", ".", "expect_partial", "(", ")", "\n", "return", "checkpoint_manager", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.trainers.base_trainer.BaseTrainer.save_best_checkpoint": [[313, 344], ["os.path.join", "tensorflow.train.latest_checkpoint", "tensorflow.Variable", "tensorflow.train.Checkpoint", "tensorflow.train.CheckpointManager", "tensorflow.train.CheckpointManager.save", "tensorflow.Variable", "tensorflow.train.Checkpoint", "tensorflow.train.Checkpoint.restore().expect_partial", "tensorflow.train.Checkpoint.restore"], "methods", ["None"], ["", "def", "save_best_checkpoint", "(", "self", ",", "current_frechet_inception_distance", ")", ":", "\n", "    ", "\"\"\"Saves the current checkpoint (if it is the best one).\n\n    Args:\n      current_frechet_inception_distance: FID of the checkpoint.\n\n    Returns:\n      Whether the current checkpoint has been saved.\n    \"\"\"", "\n", "checkpoint_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "model_dir", ",", "'best_checkpoint'", ")", "\n", "checkpoint_path", "=", "tf", ".", "train", ".", "latest_checkpoint", "(", "checkpoint_dir", ")", "\n", "\n", "if", "checkpoint_path", "is", "not", "None", ":", "\n", "      ", "frechet_inception_distance", "=", "tf", ".", "Variable", "(", "\n", "initial_value", "=", "0", ",", "dtype", "=", "tf", ".", "float32", ",", "trainable", "=", "False", ")", "\n", "checkpoint", "=", "tf", ".", "train", ".", "Checkpoint", "(", "\n", "frechet_inception_distance", "=", "frechet_inception_distance", ")", "\n", "checkpoint", ".", "restore", "(", "checkpoint_path", ")", ".", "expect_partial", "(", ")", "\n", "if", "current_frechet_inception_distance", ">=", "frechet_inception_distance", ":", "\n", "        ", "return", "False", "\n", "\n", "", "", "frechet_inception_distance", "=", "tf", ".", "Variable", "(", "\n", "initial_value", "=", "current_frechet_inception_distance", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "trainable", "=", "False", ")", "\n", "checkpoint", "=", "tf", ".", "train", ".", "Checkpoint", "(", "\n", "frechet_inception_distance", "=", "frechet_inception_distance", ",", "**", "self", ".", "objects", ")", "\n", "checkpoint_manager", "=", "tf", ".", "train", ".", "CheckpointManager", "(", "\n", "checkpoint", ",", "directory", "=", "checkpoint_dir", ",", "max_to_keep", "=", "1", ")", "\n", "checkpoint_manager", ".", "save", "(", "self", ".", "global_step", ")", "\n", "return", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.google-research_hit-gan.trainers.gan_trainer.GANTrainer.__init__": [[34, 91], ["trainers.base_trainer.BaseTrainer.__init__"], "methods", ["home.repos.pwc.inspect_result.google-research_hit-gan.models.discriminators.StyleGANDiscriminator.__init__"], ["def", "__init__", "(", "self", ",", "\n", "generator_kwargs", ":", "Dict", "[", "Text", ",", "Any", "]", ",", "\n", "discriminator_kwargs", ":", "Dict", "[", "Text", ",", "Any", "]", ",", "\n", "latent_dim", ":", "int", ",", "\n", "generator_lr", ":", "float", ",", "\n", "discriminator_lr", ":", "float", ",", "\n", "beta1", ":", "float", ",", "\n", "beta2", ":", "float", ",", "\n", "use_ema_model", ":", "bool", "=", "False", ",", "\n", "ema_decay", ":", "float", "=", "0.999", ",", "\n", "ema_inital_step", ":", "int", "=", "1", ",", "\n", "use_consistency_regularization", ":", "bool", "=", "False", ",", "\n", "consistency_regularization_cost", ":", "float", "=", "10.0", ",", "\n", "augment_policy", ":", "Text", "=", "'color,translation,cutout'", ",", "\n", "gan_loss_type", ":", "Text", "=", "'non-saturating'", ",", "\n", "grad_penalty_type", ":", "Text", "=", "'r1'", ",", "\n", "grad_penalty_cost", ":", "float", "=", "10.0", ",", "\n", "**", "kwargs", ":", "Any", ")", "->", "None", ":", "\n", "    ", "\"\"\"Initializer.\n\n    Args:\n      generator_kwargs: Arguments for the generator.\n      discriminator_kwargs: Arguments for the discriminator.\n      latent_dim: An integer for the input latent dimension.\n      generator_lr: A float for the learning rate of the generator.\n      discriminator_lr: A float for the learning rate of the discriminator.\n      beta1: A float for the beta1 value of Adam optimizer.\n      beta2: A float for the beta2 value of Adam optimizer.\n      use_ema_model: Whether to use EMA weights for the generator.\n      ema_decay: A float of the decay value of EMA.\n      ema_inital_step: An integer for the initial step of EMA.\n      use_consistency_regularization: Whether to use bCR for the discriminator.\n      consistency_regularization_cost: A float for the weight of the bCR.\n      augment_policy: A string for the policy of augmentation.\n      gan_loss_type: A string for the GAN loss type (non-saturating or hinge).\n      grad_penalty_type: A string for the gradieht penalty type (None or r1 or\n        wgan).\n      grad_penalty_cost: A float for the weight of the gradieht penalty.\n      **kwargs: Any other arguments for keras Layer.\n    \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "_generator_kwargs", "=", "generator_kwargs", "\n", "self", ".", "_discriminator_kwargs", "=", "discriminator_kwargs", "\n", "self", ".", "_latent_dim", "=", "latent_dim", "\n", "self", ".", "_generator_lr", "=", "generator_lr", "\n", "self", ".", "_discriminator_lr", "=", "discriminator_lr", "\n", "self", ".", "_beta1", "=", "beta1", "\n", "self", ".", "_beta2", "=", "beta2", "\n", "self", ".", "_use_ema_model", "=", "use_ema_model", "\n", "self", ".", "_ema_decay", "=", "ema_decay", "\n", "self", ".", "_ema_inital_step", "=", "ema_inital_step", "\n", "self", ".", "_use_consistency_regularization", "=", "use_consistency_regularization", "\n", "self", ".", "_consistency_regularization_cost", "=", "consistency_regularization_cost", "\n", "self", ".", "_augment_policy", "=", "augment_policy", "\n", "self", ".", "_gan_loss_type", "=", "gan_loss_type", "\n", "self", ".", "_grad_penalty_type", "=", "grad_penalty_type", "\n", "self", ".", "_grad_penalty_cost", "=", "grad_penalty_cost", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.trainers.gan_trainer.GANTrainer._build_models": [[92, 102], ["models.generators.HiTGenerator", "models.discriminators.StyleGANDiscriminator", "models.generators.HiTGenerator"], "methods", ["None"], ["", "def", "_build_models", "(", "self", ")", ":", "\n", "    ", "self", ".", "generator", "=", "generators", ".", "HiTGenerator", "(", "**", "self", ".", "_generator_kwargs", ")", "\n", "self", ".", "discriminator", "=", "discriminators", ".", "StyleGANDiscriminator", "(", "\n", "**", "self", ".", "_discriminator_kwargs", ")", "\n", "self", ".", "objects", "[", "'generator'", "]", "=", "self", ".", "generator", "\n", "self", ".", "objects", "[", "'discriminator'", "]", "=", "self", ".", "discriminator", "\n", "\n", "if", "self", ".", "_use_ema_model", ":", "\n", "      ", "self", ".", "ema_generator", "=", "generators", ".", "HiTGenerator", "(", "**", "self", ".", "_generator_kwargs", ")", "\n", "self", ".", "objects", "[", "'ema_generator'", "]", "=", "self", ".", "ema_generator", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.trainers.gan_trainer.GANTrainer._build_optimizers": [[103, 113], ["tensorflow.keras.optimizers.Adam", "tensorflow.keras.optimizers.Adam"], "methods", ["None"], ["", "", "def", "_build_optimizers", "(", "self", ")", ":", "\n", "    ", "self", ".", "generator_optim", "=", "tf", ".", "keras", ".", "optimizers", ".", "Adam", "(", "\n", "self", ".", "_generator_lr", ",", "beta_1", "=", "self", ".", "_beta1", ",", "beta_2", "=", "self", ".", "_beta2", ")", "\n", "self", ".", "discriminator_optim", "=", "tf", ".", "keras", ".", "optimizers", ".", "Adam", "(", "\n", "self", ".", "_discriminator_lr", ",", "beta_1", "=", "self", ".", "_beta1", ",", "beta_2", "=", "self", ".", "_beta2", ")", "\n", "self", ".", "global_step", "=", "self", ".", "generator_optim", ".", "iterations", "\n", "\n", "self", ".", "objects", "[", "'generator_optim'", "]", "=", "self", ".", "generator_optim", "\n", "self", ".", "objects", "[", "'discriminator_optim'", "]", "=", "self", ".", "discriminator_optim", "\n", "self", ".", "objects", "[", "'global_step'", "]", "=", "self", ".", "global_step", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.trainers.gan_trainer.GANTrainer._build_metrics": [[114, 127], ["tensorflow.keras.metrics.Mean"], "methods", ["None"], ["", "def", "_build_metrics", "(", "self", ")", ":", "\n", "    ", "metric_names", "=", "[", "\n", "'generator_lr'", ",", "\n", "'generator_total_loss'", ",", "\n", "'discriminator_lr'", ",", "\n", "'discriminator_total_loss'", ",", "\n", "'gradient_penalty'", ",", "\n", "'consistency_loss'", ",", "\n", "]", "\n", "\n", "for", "metric_name", "in", "metric_names", ":", "\n", "      ", "self", ".", "train_metrics", "[", "metric_name", "]", "=", "tf", ".", "keras", ".", "metrics", ".", "Mean", "(", "\n", "'train/{}'", ".", "format", "(", "metric_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.trainers.gan_trainer.GANTrainer._update_ema_model": [[128, 137], ["tensorflow.greater_equal", "tensorflow.greater", "utils.moving_averages.update_ema_variables", "utils.moving_averages.assign_ema_vars_from_initial_values"], "methods", ["home.repos.pwc.inspect_result.google-research_hit-gan.utils.moving_averages.update_ema_variables", "home.repos.pwc.inspect_result.google-research_hit-gan.utils.moving_averages.assign_ema_vars_from_initial_values"], ["", "", "def", "_update_ema_model", "(", "self", ")", ":", "\n", "    ", "if", "tf", ".", "greater_equal", "(", "self", ".", "global_step", ",", "self", ".", "_ema_inital_step", ")", ":", "\n", "      ", "if", "tf", ".", "greater", "(", "self", ".", "global_step", ",", "self", ".", "_ema_inital_step", ")", ":", "\n", "        ", "moving_averages", ".", "update_ema_variables", "(", "self", ".", "ema_generator", ".", "variables", ",", "\n", "self", ".", "generator", ".", "variables", ",", "\n", "self", ".", "_ema_decay", ")", "\n", "", "else", ":", "\n", "        ", "moving_averages", ".", "assign_ema_vars_from_initial_values", "(", "\n", "self", ".", "ema_generator", ".", "variables", ",", "self", ".", "generator", ".", "variables", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.trainers.gan_trainer.GANTrainer._train_one_step": [[138, 223], ["generator_tape.gradient", "discriminator_tape.gradient", "gan_trainer.GANTrainer.generator_optim.apply_gradients", "gan_trainer.GANTrainer.discriminator_optim.apply_gradients", "tensorflow.shape", "tensorflow.GradientTape", "tensorflow.GradientTape", "tensorflow.random.normal", "gan_trainer.GANTrainer.generator", "gan_trainer.GANTrainer.discriminator", "utils.losses.generator_loss", "utils.metrics.update_metrics", "zip", "zip", "gan_trainer.GANTrainer._update_ema_model", "utils.losses.r1_gradient_penalty", "utils.diff_augment.augment", "utils.diff_augment.augment", "tensorflow.stop_gradient", "tensorflow.stop_gradient", "tensorflow.concat", "gan_trainer.GANTrainer.discriminator", "tensorflow.split", "tensorflow.constant", "gan_trainer.GANTrainer.ema_generator.build", "gan_trainer.GANTrainer.discriminator", "utils.losses.wgan_gradient_penalty", "utils.losses.discriminator_loss", "gan_trainer.GANTrainer.discriminator", "tensorflow.constant", "ValueError", "utils.losses.l2_loss", "utils.losses.l2_loss"], "methods", ["home.repos.pwc.inspect_result.google-research_hit-gan.utils.losses.generator_loss", "home.repos.pwc.inspect_result.google-research_hit-gan.utils.metrics.update_metrics", "home.repos.pwc.inspect_result.google-research_hit-gan.trainers.gan_trainer.GANTrainer._update_ema_model", "home.repos.pwc.inspect_result.google-research_hit-gan.utils.losses.r1_gradient_penalty", "home.repos.pwc.inspect_result.google-research_hit-gan.utils.diff_augment.augment", "home.repos.pwc.inspect_result.google-research_hit-gan.utils.diff_augment.augment", "home.repos.pwc.inspect_result.google-research_hit-gan.models.discriminators.Block.build", "home.repos.pwc.inspect_result.google-research_hit-gan.utils.losses.wgan_gradient_penalty", "home.repos.pwc.inspect_result.google-research_hit-gan.utils.losses.discriminator_loss", "home.repos.pwc.inspect_result.google-research_hit-gan.utils.losses.l2_loss", "home.repos.pwc.inspect_result.google-research_hit-gan.utils.losses.l2_loss"], ["", "", "", "def", "_train_one_step", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "real_images", "=", "inputs", "[", "'images'", "]", "\n", "batch_size", "=", "tf", ".", "shape", "(", "real_images", ")", "[", "0", "]", "\n", "\n", "with", "tf", ".", "GradientTape", "(", ")", "as", "generator_tape", ",", "tf", ".", "GradientTape", "(", "\n", ")", "as", "discriminator_tape", ":", "\n", "      ", "latent_codes", "=", "tf", ".", "random", ".", "normal", "(", "shape", "=", "(", "batch_size", ",", "self", ".", "_latent_dim", ")", ")", "\n", "fake_images", "=", "self", ".", "generator", "(", "latent_codes", ",", "training", "=", "True", ")", "\n", "fake_logits", "=", "self", ".", "discriminator", "(", "fake_images", ",", "training", "=", "True", ")", "\n", "\n", "if", "self", ".", "_grad_penalty_type", "==", "'r1'", ":", "\n", "        ", "real_logits", ",", "grad_penalty", "=", "losses", ".", "r1_gradient_penalty", "(", "\n", "self", ".", "discriminator", ",", "\n", "real_images", ",", "\n", "penalty_cost", "=", "self", ".", "_grad_penalty_cost", ")", "\n", "", "elif", "self", ".", "_grad_penalty_type", "==", "'wgan'", ":", "\n", "        ", "real_logits", "=", "self", ".", "discriminator", "(", "real_images", ",", "training", "=", "True", ")", "\n", "_", ",", "grad_penalty", "=", "losses", ".", "wgan_gradient_penalty", "(", "\n", "self", ".", "discriminator", ",", "\n", "real_images", ",", "\n", "fake_images", ",", "\n", "penalty_cost", "=", "self", ".", "_grad_penalty_cost", ")", "\n", "", "elif", "self", ".", "_grad_penalty_type", "is", "None", ":", "\n", "        ", "real_logits", "=", "self", ".", "discriminator", "(", "real_images", ",", "training", "=", "True", ")", "\n", "grad_penalty", "=", "tf", ".", "constant", "(", "0.0", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'{} is not a recognized gradient penalty type'", ".", "format", "(", "\n", "self", ".", "_grad_penalty_type", ")", ")", "\n", "\n", "", "if", "self", ".", "_use_consistency_regularization", ":", "\n", "        ", "real_augmented_images", "=", "diff_augment", ".", "augment", "(", "\n", "real_images", ",", "policy", "=", "self", ".", "_augment_policy", ")", "\n", "fake_augmented_images", "=", "diff_augment", ".", "augment", "(", "\n", "fake_images", ",", "policy", "=", "self", ".", "_augment_policy", ")", "\n", "real_augmented_images", "=", "tf", ".", "stop_gradient", "(", "real_augmented_images", ")", "\n", "fake_augmented_images", "=", "tf", ".", "stop_gradient", "(", "fake_augmented_images", ")", "\n", "\n", "augmented_images", "=", "tf", ".", "concat", "(", "\n", "(", "real_augmented_images", ",", "fake_augmented_images", ")", ",", "axis", "=", "0", ")", "\n", "augmented_logits", "=", "self", ".", "discriminator", "(", "augmented_images", ",", "training", "=", "True", ")", "\n", "real_augmented_logits", ",", "fake_augmented_logits", "=", "tf", ".", "split", "(", "\n", "augmented_logits", ",", "num_or_size_splits", "=", "2", ",", "axis", "=", "0", ")", "\n", "consistency_loss", "=", "self", ".", "_consistency_regularization_cost", "*", "(", "\n", "losses", ".", "l2_loss", "(", "real_logits", ",", "real_augmented_logits", ")", "+", "\n", "losses", ".", "l2_loss", "(", "fake_logits", ",", "fake_augmented_logits", ")", ")", "\n", "", "else", ":", "\n", "        ", "consistency_loss", "=", "tf", ".", "constant", "(", "0.0", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "", "generator_total_loss", "=", "losses", ".", "generator_loss", "(", "\n", "fake_logits", ",", "loss_type", "=", "self", ".", "_gan_loss_type", ")", "\n", "discriminator_total_loss", "=", "losses", ".", "discriminator_loss", "(", "\n", "real_logits", ",", "fake_logits", ",", "\n", "loss_type", "=", "self", ".", "_gan_loss_type", ")", "+", "grad_penalty", "+", "consistency_loss", "\n", "\n", "metrics", ".", "update_metrics", "(", "\n", "self", ".", "train_metrics", ",", "\n", "generator_lr", "=", "self", ".", "generator_optim", ".", "lr", ",", "\n", "generator_total_loss", "=", "generator_total_loss", ",", "\n", "discriminator_lr", "=", "self", ".", "discriminator_optim", ".", "lr", ",", "\n", "gradient_penalty", "=", "grad_penalty", ",", "\n", "consistency_loss", "=", "consistency_loss", ",", "\n", "discriminator_total_loss", "=", "discriminator_total_loss", ",", "\n", ")", "\n", "\n", "# The default behavior of `apply_gradients` is to sum gradients from all", "\n", "# replicas so we divide the loss by the number of replicas so that the", "\n", "# mean gradient is applied.", "\n", "generator_total_loss", "=", "(", "\n", "generator_total_loss", "/", "self", ".", "strategy", ".", "num_replicas_in_sync", ")", "\n", "discriminator_total_loss", "=", "(", "\n", "discriminator_total_loss", "/", "self", ".", "strategy", ".", "num_replicas_in_sync", ")", "\n", "\n", "", "generator_grads", "=", "generator_tape", ".", "gradient", "(", "\n", "generator_total_loss", ",", "self", ".", "generator", ".", "trainable_variables", ")", "\n", "discriminator_grads", "=", "discriminator_tape", ".", "gradient", "(", "\n", "discriminator_total_loss", ",", "self", ".", "discriminator", ".", "trainable_variables", ")", "\n", "self", ".", "generator_optim", ".", "apply_gradients", "(", "\n", "zip", "(", "generator_grads", ",", "self", ".", "generator", ".", "trainable_variables", ")", ")", "\n", "self", ".", "discriminator_optim", ".", "apply_gradients", "(", "\n", "zip", "(", "discriminator_grads", ",", "self", ".", "discriminator", ".", "trainable_variables", ")", ")", "\n", "\n", "if", "self", ".", "_use_ema_model", ":", "\n", "      ", "if", "not", "self", ".", "ema_generator", ".", "built", ":", "\n", "        ", "self", ".", "ema_generator", ".", "build", "(", "latent_codes", ".", "shape", ")", "\n", "", "self", ".", "_update_ema_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.trainers.gan_trainer.GANTrainer._evaluate_one_step": [[224, 234], ["tensorflow.random.normal", "tensorflow.clip_by_value", "tensorflow.shape", "gan_trainer.GANTrainer.ema_generator", "gan_trainer.GANTrainer.generator"], "methods", ["None"], ["", "", "def", "_evaluate_one_step", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "batch_size", "=", "tf", ".", "shape", "(", "inputs", "[", "'images'", "]", ")", "[", "0", "]", "\n", "\n", "latent_codes", "=", "tf", ".", "random", ".", "normal", "(", "shape", "=", "(", "batch_size", ",", "self", ".", "_latent_dim", ")", ")", "\n", "if", "self", ".", "_use_ema_model", ":", "\n", "      ", "outputs", "=", "self", ".", "ema_generator", "(", "latent_codes", ",", "training", "=", "False", ")", "\n", "", "else", ":", "\n", "      ", "outputs", "=", "self", ".", "generator", "(", "latent_codes", ",", "training", "=", "False", ")", "\n", "", "outputs", "=", "tf", ".", "clip_by_value", "(", "outputs", ",", "-", "1.0", ",", "1.0", ")", "\n", "return", "outputs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.google-research_hit-gan.models.generators.Block.__init__": [[58, 94], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.google-research_hit-gan.models.discriminators.StyleGANDiscriminator.__init__"], ["def", "__init__", "(", "self", ",", "\n", "attn_axes", ":", "List", "[", "List", "[", "int", "]", "]", ",", "\n", "num_heads", ":", "int", "=", "4", ",", "\n", "dropout", ":", "float", "=", "0.0", ",", "\n", "attn_dropout", ":", "float", "=", "0.0", ",", "\n", "attn_type", ":", "Text", "=", "\"multi_head\"", ",", "\n", "norm_type", ":", "Text", "=", "\"layer\"", ",", "\n", "activation", ":", "Callable", "[", "...", ",", "tf", ".", "Tensor", "]", "=", "tf", ".", "nn", ".", "gelu", ",", "\n", "kernel_initializer", "=", "\"glorot_uniform\"", ",", "\n", "bias_initializer", "=", "\"zeros\"", ",", "\n", "**", "kwargs", ":", "Any", ")", "->", "None", ":", "\n", "    ", "\"\"\"Initializer.\n\n    Args:\n      attn_axes: A list for the list of axes over which the attention is\n        applied.\n      num_heads: An integer for the number of attention heads.\n      dropout: A float for the dropout rate for MLP.\n      attn_dropout: A float for the dropout for attention.\n      attn_type: A string for attention type (\"multi_head\" or \"multi_query\").\n      norm_type: A string for the type of normalization.\n      activation: Activation function.\n      kernel_initializer: Initialization function of dense kenrels.\n      bias_initializer: Initialization function of dense biases.\n      **kwargs: Additional arguments for `tf.keras.layers.Layer`.\n    \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "_attn_axes", "=", "attn_axes", "\n", "self", ".", "_num_heads", "=", "num_heads", "\n", "self", ".", "_dropout", "=", "dropout", "\n", "self", ".", "_attn_dropout", "=", "attn_dropout", "\n", "self", ".", "_attn_type", "=", "attn_type", "\n", "self", ".", "_norm_type", "=", "norm_type", "\n", "self", ".", "_activation", "=", "activation", "\n", "self", ".", "_kernel_initializer", "=", "kernel_initializer", "\n", "self", ".", "_bias_initializer", "=", "bias_initializer", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.models.generators.Block.build": [[95, 122], ["isinstance", "dict", "models.layers.MultiAxisAttention", "models.layers.make_norm_layer", "tensorflow.keras.layers.Dropout", "models.layers.MLP", "super().build"], "methods", ["home.repos.pwc.inspect_result.google-research_hit-gan.models.layers.make_norm_layer", "home.repos.pwc.inspect_result.google-research_hit-gan.models.discriminators.Block.build"], ["", "def", "build", "(", "self", ",", "input_shapes", ":", "Union", "[", "tf", ".", "TensorShape", ",", "Tuple", "[", "tf", ".", "TensorShape", ",", "\n", "tf", ".", "TensorShape", "]", "]", ")", ":", "\n", "    ", "if", "isinstance", "(", "input_shapes", ",", "tuple", ")", ":", "\n", "      ", "input_dim", "=", "input_shapes", "[", "0", "]", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "      ", "input_dim", "=", "input_shapes", "[", "-", "1", "]", "\n", "\n", "", "common_kwargs", "=", "dict", "(", "\n", "kernel_initializer", "=", "self", ".", "_kernel_initializer", ",", "\n", "bias_initializer", "=", "self", ".", "_bias_initializer", ")", "\n", "\n", "self", ".", "attention_layer", "=", "layers", ".", "MultiAxisAttention", "(", "\n", "num_heads", "=", "self", ".", "_num_heads", ",", "\n", "key_dim", "=", "input_dim", "//", "self", ".", "_num_heads", ",", "\n", "attn_axes", "=", "self", ".", "_attn_axes", ",", "\n", "attn_type", "=", "self", ".", "_attn_type", ",", "\n", "dropout", "=", "self", ".", "_attn_dropout", ",", "\n", "**", "common_kwargs", ")", "\n", "\n", "self", ".", "norm", "=", "layers", ".", "make_norm_layer", "(", "self", ".", "_norm_type", ")", "\n", "self", ".", "dropout_layer", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "self", ".", "_dropout", ")", "\n", "self", ".", "mlp_block", "=", "layers", ".", "MLP", "(", "\n", "dropout", "=", "self", ".", "_dropout", ",", "\n", "norm_type", "=", "self", ".", "_norm_type", ",", "\n", "activation", "=", "self", ".", "_activation", ",", "\n", "**", "common_kwargs", ")", "\n", "super", "(", ")", ".", "build", "(", "input_shapes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.models.generators.Block.call": [[123, 142], ["isinstance", "generators.Block.norm", "generators.Block.attention_layer", "generators.Block.dropout_layer", "generators.Block.mlp_block"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "\n", "inputs", ":", "Union", "[", "tf", ".", "Tensor", ",", "Tuple", "[", "tf", ".", "Tensor", ",", "tf", ".", "Tensor", "]", "]", ",", "\n", "training", ":", "Optional", "[", "bool", "]", "=", "None", ")", "->", "tf", ".", "Tensor", ":", "\n", "    ", "if", "isinstance", "(", "inputs", ",", "tuple", ")", ":", "\n", "      ", "queries", ",", "values", "=", "inputs", "\n", "", "else", ":", "\n", "      ", "queries", "=", "inputs", "\n", "values", "=", "None", "\n", "\n", "", "outputs", "=", "self", ".", "norm", "(", "queries", ",", "training", "=", "training", ")", "\n", "if", "values", "is", "None", ":", "\n", "      ", "values", "=", "outputs", "\n", "\n", "", "outputs", "=", "self", ".", "attention_layer", "(", "outputs", ",", "values", ",", "training", "=", "training", ")", "\n", "outputs", "=", "self", ".", "dropout_layer", "(", "outputs", ",", "training", "=", "training", ")", "\n", "outputs", "=", "outputs", "+", "queries", "\n", "\n", "outputs", "=", "self", ".", "mlp_block", "(", "outputs", ",", "training", "=", "training", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.models.generators.HiTGenerator.__init__": [[147, 255], ["super().__init__", "len", "dict", "dict", "tensorflow.keras.Sequential", "tensorflow.keras.Sequential", "range", "generators.HiTGenerator.position_embeddings.append", "tensorflow.keras.Sequential", "tensorflow.keras.Sequential.add", "range", "generators.HiTGenerator.blocks.append", "tensorflow.keras.initializers.TruncatedNormal", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Reshape", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Reshape", "models.layers.PositionEmbedding", "models.layers.make_norm_layer", "models.layers.PositionEmbedding", "generators.Block", "generators.HiTGenerator.to_rgb_layers.append", "generators.HiTGenerator.to_rgb_layers.append", "generators.HiTGenerator.umsamplings.append", "ValueError", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "models.layers.SkipToRGB", "models.layers.PixelShuffle", "models.layers.MLP", "generators.Block"], "methods", ["home.repos.pwc.inspect_result.google-research_hit-gan.models.discriminators.StyleGANDiscriminator.__init__", "home.repos.pwc.inspect_result.google-research_hit-gan.models.layers.make_norm_layer"], ["def", "__init__", "(", "self", ",", "\n", "output_size", ":", "int", ",", "\n", "output_dim", ":", "int", "=", "3", ",", "\n", "attn_type", ":", "Text", "=", "\"multi_query\"", ",", "\n", "norm_type", ":", "Text", "=", "\"batch\"", ",", "\n", "activation", ":", "Callable", "[", "...", ",", "tf", ".", "Tensor", "]", "=", "tf", ".", "nn", ".", "gelu", ",", "\n", "**", "kwargs", ":", "Any", ")", "->", "None", ":", "\n", "    ", "\"\"\"Initializer.\n\n    Args:\n      output_size: An integer for the output size.\n      output_dim: An integer for the output channel dimension.\n      attn_type: A string for attention type (\"multi_head\" or \"multi_query\").\n      norm_type: A string for the type of normalization.\n      activation: Activation function.\n      **kwargs: Additional arguments for `tf.keras.layers.Layer`.\n    \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "if", "output_size", "==", "128", ":", "\n", "      ", "num_layers_per_block", "=", "[", "2", ",", "2", ",", "2", ",", "2", ",", "2", "]", "\n", "channel_dim_per_block", "=", "[", "512", ",", "512", ",", "256", ",", "128", ",", "128", "]", "\n", "num_heads_per_block", "=", "[", "16", ",", "8", ",", "4", ",", "4", ",", "4", "]", "\n", "patch_size_per_block", "=", "[", "4", ",", "4", ",", "8", ",", "8", ",", "None", "]", "\n", "", "elif", "output_size", "==", "256", ":", "\n", "      ", "num_layers_per_block", "=", "[", "2", ",", "2", ",", "2", ",", "2", ",", "1", ",", "1", "]", "\n", "channel_dim_per_block", "=", "[", "512", ",", "512", ",", "256", ",", "128", ",", "64", ",", "64", "]", "\n", "num_heads_per_block", "=", "[", "16", ",", "8", ",", "4", ",", "4", ",", "4", ",", "4", "]", "\n", "patch_size_per_block", "=", "[", "4", ",", "4", ",", "8", ",", "8", ",", "None", ",", "None", "]", "\n", "", "elif", "output_size", "==", "1024", ":", "\n", "      ", "num_layers_per_block", "=", "[", "2", ",", "2", ",", "2", ",", "2", ",", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "channel_dim_per_block", "=", "[", "512", ",", "512", ",", "256", ",", "128", ",", "64", ",", "64", ",", "32", ",", "32", "]", "\n", "num_heads_per_block", "=", "[", "16", ",", "8", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", "]", "\n", "patch_size_per_block", "=", "[", "4", ",", "4", ",", "8", ",", "8", ",", "None", ",", "None", ",", "None", ",", "None", "]", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "\"Only input_size of 128, 256 or 1024 is supported.\"", ")", "\n", "\n", "", "self", ".", "_patch_size_per_block", "=", "patch_size_per_block", "\n", "self", ".", "_num_blocks", "=", "len", "(", "num_layers_per_block", ")", "\n", "\n", "initial_patch_size", "=", "8", "\n", "initial_patch_dim", "=", "channel_dim_per_block", "[", "0", "]", "\n", "embedding_dim", "=", "initial_patch_dim", "\n", "embedding_size", "=", "4", "\n", "\n", "dilated_attention_axes", "=", "[", "1", "]", "\n", "local_attention_axes", "=", "[", "2", "]", "\n", "full_attention_axes", "=", "dilated_attention_axes", "+", "local_attention_axes", "\n", "\n", "common_kwargs", "=", "dict", "(", "\n", "kernel_initializer", "=", "tf", ".", "keras", ".", "initializers", ".", "TruncatedNormal", "(", "stddev", "=", "0.02", ")", ",", "\n", "bias_initializer", "=", "\"zeros\"", ")", "\n", "block_kwargs", "=", "dict", "(", "norm_type", "=", "norm_type", ",", "activation", "=", "activation", ")", "\n", "\n", "self", ".", "dense_layer", "=", "tf", ".", "keras", ".", "Sequential", "(", "[", "\n", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "initial_patch_dim", "*", "initial_patch_size", "**", "2", ",", "\n", "**", "common_kwargs", ")", ",", "\n", "tf", ".", "keras", ".", "layers", ".", "Reshape", "(", "\n", "(", "initial_patch_size", ",", "initial_patch_size", ",", "initial_patch_dim", ")", ")", "\n", "]", ")", "\n", "self", ".", "embedding_layer", "=", "tf", ".", "keras", ".", "Sequential", "(", "[", "\n", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "embedding_dim", "*", "embedding_size", "**", "2", ",", "\n", "**", "common_kwargs", ")", ",", "\n", "tf", ".", "keras", ".", "layers", ".", "Reshape", "(", "(", "1", ",", "embedding_size", "**", "2", ",", "embedding_dim", ")", ")", ",", "\n", "layers", ".", "PositionEmbedding", "(", ")", ",", "\n", "layers", ".", "make_norm_layer", "(", "norm_type", ")", "\n", "]", ")", "\n", "\n", "self", ".", "position_embeddings", "=", "[", "]", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "self", ".", "umsamplings", "=", "[", "]", "\n", "self", ".", "to_rgb_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "_num_blocks", ")", ":", "\n", "      ", "num_heads", "=", "num_heads_per_block", "[", "i", "]", "\n", "patch_size", "=", "self", ".", "_patch_size_per_block", "[", "i", "]", "\n", "\n", "self", ".", "position_embeddings", ".", "append", "(", "layers", ".", "PositionEmbedding", "(", ")", ")", "\n", "block", "=", "tf", ".", "keras", ".", "Sequential", "(", ")", "\n", "block", ".", "add", "(", "\n", "Block", "(", "\n", "num_heads", "=", "num_heads", ",", "\n", "attn_axes", "=", "[", "full_attention_axes", "]", ",", "\n", "attn_type", "=", "attn_type", ",", "\n", "**", "block_kwargs", ",", "\n", "**", "common_kwargs", ")", ")", "\n", "\n", "for", "_", "in", "range", "(", "num_layers_per_block", "[", "i", "]", ")", ":", "\n", "        ", "if", "patch_size", "is", "None", ":", "\n", "          ", "block", ".", "add", "(", "layers", ".", "MLP", "(", "**", "block_kwargs", ",", "**", "common_kwargs", ")", ")", "\n", "", "else", ":", "\n", "          ", "block", ".", "add", "(", "\n", "Block", "(", "\n", "num_heads", "=", "num_heads", ",", "\n", "attn_axes", "=", "[", "local_attention_axes", ",", "dilated_attention_axes", "]", ",", "\n", "attn_type", "=", "attn_type", ",", "\n", "**", "block_kwargs", ",", "\n", "**", "common_kwargs", ")", ")", "\n", "", "", "self", ".", "blocks", ".", "append", "(", "block", ")", "\n", "\n", "if", "patch_size", "is", "None", ":", "\n", "        ", "self", ".", "to_rgb_layers", ".", "append", "(", "\n", "layers", ".", "SkipToRGB", "(", "output_dim", ",", "norm_type", "=", "norm_type", ",", "**", "common_kwargs", ")", ")", "\n", "", "else", ":", "\n", "        ", "self", ".", "to_rgb_layers", ".", "append", "(", "None", ")", "\n", "\n", "", "if", "i", "<", "self", ".", "_num_blocks", "-", "1", ":", "\n", "        ", "self", ".", "umsamplings", ".", "append", "(", "\n", "layers", ".", "PixelShuffle", "(", "\n", "output_dim", "=", "channel_dim_per_block", "[", "i", "+", "1", "]", ",", "**", "common_kwargs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.models.generators.HiTGenerator.call": [[256, 288], ["generators.HiTGenerator.dense_layer", "generators.HiTGenerator.embedding_layer", "range", "generators.block_images", "generators.unblock_images"], "methods", ["home.repos.pwc.inspect_result.google-research_hit-gan.models.generators.block_images", "home.repos.pwc.inspect_result.google-research_hit-gan.models.generators.unblock_images"], ["", "", "", "def", "call", "(", "self", ",", "inputs", ":", "tf", ".", "Tensor", ",", "training", ":", "Optional", "[", "bool", "]", "=", "None", ")", ":", "\n", "    ", "\"\"\"Computes a forward pass of the generator block.\n\n    Args:\n      inputs: The input latent codes with the shape (batch_size, channel_dim).\n      training: Boolean, whether training or not.\n\n    Returns:\n      The output feature map.\n    \"\"\"", "\n", "outputs", "=", "self", ".", "dense_layer", "(", "inputs", ")", "\n", "embeddings", "=", "self", ".", "embedding_layer", "(", "inputs", ",", "training", "=", "training", ")", "\n", "images", "=", "None", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "_num_blocks", ")", ":", "\n", "      ", "outputs", "=", "self", ".", "position_embeddings", "[", "i", "]", "(", "outputs", ")", "\n", "patch_size", "=", "self", ".", "_patch_size_per_block", "[", "i", "]", "\n", "if", "patch_size", "is", "not", "None", ":", "\n", "        ", "grid_size", "=", "outputs", ".", "shape", "[", "2", "]", "//", "patch_size", "\n", "outputs", "=", "block_images", "(", "outputs", ",", "patch_size", ")", "\n", "outputs", "=", "self", ".", "blocks", "[", "i", "]", "(", "(", "outputs", ",", "embeddings", ")", ",", "training", "=", "training", ")", "\n", "outputs", "=", "unblock_images", "(", "outputs", ",", "grid_size", ",", "patch_size", ")", "\n", "", "else", ":", "\n", "        ", "outputs", "=", "self", ".", "blocks", "[", "i", "]", "(", "(", "outputs", ",", "embeddings", ")", ",", "training", "=", "training", ")", "\n", "\n", "", "if", "self", ".", "to_rgb_layers", "[", "i", "]", "is", "not", "None", ":", "\n", "        ", "images", "=", "self", ".", "to_rgb_layers", "[", "i", "]", "(", "outputs", ",", "images", ",", "training", "=", "training", ")", "\n", "\n", "", "if", "i", "<", "self", ".", "_num_blocks", "-", "1", ":", "\n", "        ", "outputs", "=", "self", ".", "umsamplings", "[", "i", "]", "(", "outputs", ")", "\n", "\n", "", "", "return", "images", "\n", "", "", ""]], "home.repos.pwc.inspect_result.google-research_hit-gan.models.generators.block_images": [[25, 37], ["tensorflow.nn.space_to_depth", "tensorflow.reshape"], "function", ["None"], ["def", "block_images", "(", "inputs", ":", "tf", ".", "Tensor", ",", "patch_size", ":", "int", ")", "->", "tf", ".", "Tensor", ":", "\n", "  ", "\"\"\"Converts the image to blocked patches.\"\"\"", "\n", "# inputs: (batch_size, height, width, channels)", "\n", "_", ",", "height", ",", "width", ",", "channel_dim", "=", "inputs", ".", "shape", "\n", "patch_length", "=", "patch_size", "**", "2", "\n", "\n", "outputs", "=", "tf", ".", "nn", ".", "space_to_depth", "(", "inputs", ",", "patch_size", ")", "\n", "outputs", "=", "tf", ".", "reshape", "(", "\n", "outputs", ",", "\n", "shape", "=", "(", "-", "1", ",", "height", "*", "width", "//", "patch_length", ",", "patch_length", ",", "channel_dim", ")", ")", "\n", "# outputs: (batch_size, grid_h * grid_w, patch_h * patch_w, channels)", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.models.generators.unblock_images": [[39, 53], ["tensorflow.reshape", "tensorflow.nn.depth_to_space"], "function", ["None"], ["", "def", "unblock_images", "(", "inputs", ":", "tf", ".", "Tensor", ",", "grid_size", ":", "int", ",", "\n", "patch_size", ":", "int", ")", "->", "tf", ".", "Tensor", ":", "\n", "  ", "\"\"\"Converts blocked patches to the image.\"\"\"", "\n", "# inputs: (batch_size, grid_h * grid_w, patch_h * patch_w, channels)", "\n", "grid_width", "=", "grid_size", "\n", "grid_height", "=", "inputs", ".", "shape", "[", "1", "]", "//", "grid_width", "\n", "channel_dim", "=", "inputs", ".", "shape", "[", "3", "]", "\n", "\n", "outputs", "=", "tf", ".", "reshape", "(", "\n", "inputs", ",", "\n", "shape", "=", "(", "-", "1", ",", "grid_height", ",", "grid_width", ",", "patch_size", "**", "2", "*", "channel_dim", ")", ")", "\n", "outputs", "=", "tf", ".", "nn", ".", "depth_to_space", "(", "outputs", ",", "patch_size", ")", "\n", "# outputs: (batch_size, height, width, channels)", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.models.layers.PositionEmbedding.build": [[132, 143], ["layers.PositionEmbedding.add_weight", "super().build", "tensorflow.keras.initializers.TruncatedNormal"], "methods", ["home.repos.pwc.inspect_result.google-research_hit-gan.models.discriminators.Block.build"], ["def", "build", "(", "self", ",", "input_shape", ":", "tf", ".", "TensorShape", ")", "->", "None", ":", "\n", "    ", "input_dim", "=", "input_shape", "[", "-", "1", "]", "\n", "input_height", "=", "input_shape", "[", "-", "3", "]", "\n", "input_width", "=", "input_shape", "[", "-", "2", "]", "\n", "\n", "self", ".", "embedding_weight", "=", "self", ".", "add_weight", "(", "\n", "\"embedding_weight\"", ",", "\n", "shape", "=", "(", "1", ",", "input_height", ",", "input_width", ",", "input_dim", ")", ",", "\n", "initializer", "=", "tf", ".", "keras", ".", "initializers", ".", "TruncatedNormal", "(", "stddev", "=", "0.02", ")", ",", "\n", "trainable", "=", "True", ")", "\n", "super", "(", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.models.layers.PositionEmbedding.call": [[144, 146], ["None"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ":", "tf", ".", "Tensor", ")", "->", "tf", ".", "Tensor", ":", "\n", "    ", "return", "inputs", "+", "self", ".", "embedding_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.models.layers.SkipToRGB.__init__": [[151, 175], ["super().__init__", "tensorflow.keras.Sequential", "tensorflow.keras.layers.UpSampling2D", "layers.make_norm_layer", "tensorflow.keras.layers.Dense"], "methods", ["home.repos.pwc.inspect_result.google-research_hit-gan.models.discriminators.StyleGANDiscriminator.__init__", "home.repos.pwc.inspect_result.google-research_hit-gan.models.layers.make_norm_layer"], ["def", "__init__", "(", "self", ",", "\n", "output_dim", ":", "int", "=", "3", ",", "\n", "norm_type", ":", "Text", "=", "\"layer\"", ",", "\n", "kernel_initializer", "=", "\"glorot_uniform\"", ",", "\n", "bias_initializer", "=", "\"zeros\"", ",", "\n", "**", "kwargs", ":", "Any", ")", "->", "None", ":", "\n", "    ", "\"\"\"Initializer.\n\n    Args:\n      output_dim: An integer for the output channel dimension.\n      norm_type: A string for the type of normalization.\n      kernel_initializer: Initialization function of dense kenrels.\n      bias_initializer: Initialization function of dense biases.\n      **kwargs: Additional arguments for `tf.keras.layers.Layer`.\n    \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "output_layer", "=", "tf", ".", "keras", ".", "Sequential", "(", "[", "\n", "make_norm_layer", "(", "norm_type", ")", ",", "\n", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "\n", "output_dim", ",", "\n", "kernel_initializer", "=", "kernel_initializer", ",", "\n", "bias_initializer", "=", "bias_initializer", ")", "\n", "]", ")", "\n", "self", ".", "upsample", "=", "tf", ".", "keras", ".", "layers", ".", "UpSampling2D", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.models.layers.SkipToRGB.call": [[176, 185], ["layers.SkipToRGB.output_layer", "layers.SkipToRGB.upsample"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "\n", "inputs", ":", "tf", ".", "Tensor", ",", "\n", "skip_inputs", ":", "Optional", "[", "tf", ".", "Tensor", "]", ",", "\n", "training", ":", "Optional", "[", "bool", "]", "=", "None", ")", "->", "tf", ".", "Tensor", ":", "\n", "    ", "outputs", "=", "self", ".", "output_layer", "(", "inputs", ",", "training", "=", "training", ")", "\n", "if", "skip_inputs", "is", "not", "None", ":", "\n", "      ", "skip_outputs", "=", "self", ".", "upsample", "(", "skip_inputs", ")", "\n", "outputs", "=", "skip_outputs", "+", "outputs", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.models.layers.PixelShuffle.__init__": [[190, 207], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.google-research_hit-gan.models.discriminators.StyleGANDiscriminator.__init__"], ["def", "__init__", "(", "self", ",", "\n", "output_dim", ":", "int", ",", "\n", "kernel_initializer", "=", "\"glorot_uniform\"", ",", "\n", "bias_initializer", "=", "\"zeros\"", ",", "\n", "**", "kwargs", ":", "Any", ")", "->", "None", ":", "\n", "    ", "\"\"\"Initializer.\n\n    Args:\n      output_dim: An integer for the output channel dimension.\n      kernel_initializer: Initialization function of dense kenrels.\n      bias_initializer: Initialization function of dense biases.\n      **kwargs: Additional arguments for `tf.keras.layers.Layer`.\n    \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "_output_dim", "=", "output_dim", "\n", "self", ".", "_kernel_initializer", "=", "kernel_initializer", "\n", "self", ".", "_bias_initializer", "=", "bias_initializer", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.models.layers.PixelShuffle.build": [[208, 217], ["super().build", "tensorflow.keras.layers.Dense"], "methods", ["home.repos.pwc.inspect_result.google-research_hit-gan.models.discriminators.Block.build"], ["", "def", "build", "(", "self", ",", "input_shape", ":", "tf", ".", "TensorShape", ")", "->", "None", ":", "\n", "    ", "if", "input_shape", "[", "-", "1", "]", "//", "4", "==", "self", ".", "_output_dim", ":", "\n", "      ", "self", ".", "dense_layer", "=", "None", "\n", "", "else", ":", "\n", "      ", "self", ".", "dense_layer", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "\n", "self", ".", "_output_dim", ",", "\n", "kernel_initializer", "=", "self", ".", "_kernel_initializer", ",", "\n", "bias_initializer", "=", "self", ".", "_bias_initializer", ")", "\n", "", "super", "(", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.models.layers.PixelShuffle.call": [[218, 223], ["tensorflow.nn.depth_to_space", "layers.PixelShuffle.dense_layer"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ":", "tf", ".", "Tensor", ")", "->", "tf", ".", "Tensor", ":", "\n", "    ", "outputs", "=", "tf", ".", "nn", ".", "depth_to_space", "(", "inputs", ",", "2", ")", "\n", "if", "self", ".", "dense_layer", "is", "not", "None", ":", "\n", "      ", "outputs", "=", "self", ".", "dense_layer", "(", "outputs", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.models.layers.MLP.__init__": [[228, 254], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.google-research_hit-gan.models.discriminators.StyleGANDiscriminator.__init__"], ["def", "__init__", "(", "self", ",", "\n", "expansion", ":", "int", "=", "4", ",", "\n", "dropout", ":", "float", "=", "0.", ",", "\n", "norm_type", ":", "Text", "=", "\"batch\"", ",", "\n", "activation", ":", "Callable", "[", "...", ",", "tf", ".", "Tensor", "]", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "kernel_initializer", "=", "\"glorot_uniform\"", ",", "\n", "bias_initializer", "=", "\"zeros\"", ",", "\n", "**", "kwargs", ":", "Any", ")", "->", "None", ":", "\n", "    ", "\"\"\"Initializer.\n\n    Args:\n      expansion: An integer for the expansion ratio of the hidden dimension.\n      dropout: A float for the dropout rate after dense layers.\n      norm_type: A string for the type of normalization.\n      activation: Activation function.\n      kernel_initializer: Initialization function of dense kenrels.\n      bias_initializer: Initialization function of dense biases.\n      **kwargs: Additional arguments for `tf.keras.layers.Layer`.\n    \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "_expansion", "=", "expansion", "\n", "self", ".", "_dropout", "=", "dropout", "\n", "self", ".", "_norm_type", "=", "norm_type", "\n", "self", ".", "_activation", "=", "activation", "\n", "self", ".", "_kernel_initializer", "=", "kernel_initializer", "\n", "self", ".", "_bias_initializer", "=", "bias_initializer", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.models.layers.MLP.build": [[255, 272], ["dict", "layers.make_norm_layer", "tensorflow.keras.Sequential", "super().build", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dropout"], "methods", ["home.repos.pwc.inspect_result.google-research_hit-gan.models.layers.make_norm_layer", "home.repos.pwc.inspect_result.google-research_hit-gan.models.discriminators.Block.build"], ["", "def", "build", "(", "self", ",", "input_shape", ":", "tf", ".", "TensorShape", ")", "->", "None", ":", "\n", "    ", "input_dim", "=", "input_shape", "[", "-", "1", "]", "\n", "common_kwargs", "=", "dict", "(", "\n", "kernel_initializer", "=", "self", ".", "_kernel_initializer", ",", "\n", "bias_initializer", "=", "self", ".", "_bias_initializer", ")", "\n", "\n", "self", ".", "norm_layer", "=", "make_norm_layer", "(", "self", ".", "_norm_type", ")", "\n", "self", ".", "mlp_block", "=", "tf", ".", "keras", ".", "Sequential", "(", "[", "\n", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "\n", "input_dim", "*", "self", ".", "_expansion", ",", "\n", "activation", "=", "self", ".", "_activation", ",", "\n", "**", "common_kwargs", ")", ",", "\n", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "self", ".", "_dropout", ")", ",", "\n", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "input_dim", ",", "**", "common_kwargs", ")", ",", "\n", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "self", ".", "_dropout", ")", "\n", "]", ")", "\n", "super", "(", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.models.layers.MLP.call": [[273, 279], ["layers.MLP.norm_layer", "layers.MLP.mlp_block"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "\n", "inputs", ":", "tf", ".", "Tensor", ",", "\n", "training", ":", "Optional", "[", "bool", "]", "=", "None", ")", "->", "tf", ".", "Tensor", ":", "\n", "    ", "outputs", "=", "self", ".", "norm_layer", "(", "inputs", ",", "training", "=", "training", ")", "\n", "outputs", "=", "self", ".", "mlp_block", "(", "outputs", ",", "training", "=", "training", ")", "\n", "return", "outputs", "+", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.models.layers.MultiAxisAttention.__init__": [[284, 318], ["super().__init__", "math.sqrt", "float"], "methods", ["home.repos.pwc.inspect_result.google-research_hit-gan.models.discriminators.StyleGANDiscriminator.__init__"], ["def", "__init__", "(", "self", ",", "\n", "num_heads", ":", "int", ",", "\n", "key_dim", ":", "int", ",", "\n", "attn_axes", ":", "List", "[", "List", "[", "int", "]", "]", ",", "\n", "attn_type", ":", "Text", "=", "\"multi_head\"", ",", "\n", "use_bias", ":", "bool", "=", "True", ",", "\n", "dropout", ":", "float", "=", "0.0", ",", "\n", "kernel_initializer", "=", "\"glorot_uniform\"", ",", "\n", "bias_initializer", "=", "\"zeros\"", ",", "\n", "**", "kwargs", ":", "Any", ")", "->", "None", ":", "\n", "    ", "\"\"\"Initializer.\n\n    Args:\n      num_heads: An integer for the number of attention heads.\n      key_dim: An integer for the size of each attention head.\n      attn_axes: A list for the list of axes over which the attention is\n        applied.\n      attn_type: A string for attention type (\"multi_head\" or \"multi_query\").\n      use_bias: A boolean for whether the dense layers use biases.\n      dropout: A float for the dropout rate after dense layers.\n      kernel_initializer: Initialization function of dense kenrels.\n      bias_initializer: Initialization function of dense biases.\n      **kwargs: Additional arguments for `tf.keras.layers.Layer`.\n    \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "_num_heads", "=", "num_heads", "\n", "self", ".", "_key_dim", "=", "key_dim", "\n", "self", ".", "_attn_axes", "=", "attn_axes", "\n", "self", ".", "_attn_type", "=", "attn_type", "\n", "self", ".", "_use_bias", "=", "use_bias", "\n", "self", ".", "_dropout", "=", "dropout", "\n", "self", ".", "_scale", "=", "math", ".", "sqrt", "(", "float", "(", "key_dim", ")", ")", "\n", "self", ".", "_kernel_initializer", "=", "kernel_initializer", "\n", "self", ".", "_bias_initializer", "=", "bias_initializer", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.models.layers.MultiAxisAttention.build": [[319, 379], ["dict", "layers._build_proj_equation", "tensorflow.keras.layers.experimental.EinsumDense", "tensorflow.keras.layers.experimental.EinsumDense", "tensorflow.keras.layers.experimental.EinsumDense", "layers._build_proj_equation", "tensorflow.keras.layers.experimental.EinsumDense", "tensorflow.keras.layers.Dropout", "super().build", "tuple", "layers._build_attention_equation", "tuple", "layers.MultiAxisAttention._dot_product_equations.append", "layers.MultiAxisAttention._combine_equations.append", "layers.MultiAxisAttention.softmax_layers.append", "layers._get_output_shape", "ValueError", "layers._get_output_shape", "layers._get_output_shape", "range", "tensorflow.keras.layers.Softmax", "len", "layers._get_output_shape", "len"], "methods", ["home.repos.pwc.inspect_result.google-research_hit-gan.models.layers._build_proj_equation", "home.repos.pwc.inspect_result.google-research_hit-gan.models.layers._build_proj_equation", "home.repos.pwc.inspect_result.google-research_hit-gan.models.discriminators.Block.build", "home.repos.pwc.inspect_result.google-research_hit-gan.models.layers._build_attention_equation", "home.repos.pwc.inspect_result.google-research_hit-gan.models.layers._get_output_shape", "home.repos.pwc.inspect_result.google-research_hit-gan.models.layers._get_output_shape", "home.repos.pwc.inspect_result.google-research_hit-gan.models.layers._get_output_shape", "home.repos.pwc.inspect_result.google-research_hit-gan.models.layers._get_output_shape"], ["", "def", "build", "(", "self", ",", "input_shape", ":", "tf", ".", "TensorShape", ")", "->", "None", ":", "\n", "    ", "input_dim", "=", "input_shape", "[", "-", "1", "]", "\n", "free_dims", "=", "input_shape", ".", "rank", "-", "1", "\n", "common_kwargs", "=", "dict", "(", "\n", "kernel_initializer", "=", "self", ".", "_kernel_initializer", ",", "\n", "bias_initializer", "=", "self", ".", "_bias_initializer", ")", "\n", "\n", "einsum_equation", ",", "bias_axes", ",", "output_rank", "=", "_build_proj_equation", "(", "\n", "free_dims", ",", "bound_dims", "=", "1", ",", "output_dims", "=", "2", ")", "\n", "self", ".", "query_dense", "=", "tf", ".", "keras", ".", "layers", ".", "experimental", ".", "EinsumDense", "(", "\n", "einsum_equation", ",", "\n", "output_shape", "=", "_get_output_shape", "(", "output_rank", "-", "1", ",", "\n", "[", "self", ".", "_num_heads", ",", "self", ".", "_key_dim", "]", ")", ",", "\n", "bias_axes", "=", "bias_axes", "if", "self", ".", "_use_bias", "else", "None", ",", "\n", "**", "common_kwargs", ")", "\n", "\n", "if", "self", ".", "_attn_type", "==", "\"multi_head\"", ":", "\n", "      ", "num_heads", "=", "self", ".", "_num_heads", "\n", "", "elif", "self", ".", "_attn_type", "==", "\"multi_query\"", ":", "\n", "      ", "num_heads", "=", "1", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "\"{} is not a recognized attention type\"", ".", "format", "(", "self", ".", "_attn_type", ")", ")", "\n", "", "self", ".", "key_dense", "=", "tf", ".", "keras", ".", "layers", ".", "experimental", ".", "EinsumDense", "(", "\n", "einsum_equation", ",", "\n", "output_shape", "=", "_get_output_shape", "(", "output_rank", "-", "1", ",", "\n", "[", "num_heads", ",", "self", ".", "_key_dim", "]", ")", ",", "\n", "bias_axes", "=", "bias_axes", "if", "self", ".", "_use_bias", "else", "None", ",", "\n", "**", "common_kwargs", ")", "\n", "self", ".", "value_dense", "=", "tf", ".", "keras", ".", "layers", ".", "experimental", ".", "EinsumDense", "(", "\n", "einsum_equation", ",", "\n", "output_shape", "=", "_get_output_shape", "(", "output_rank", "-", "1", ",", "\n", "[", "num_heads", ",", "self", ".", "_key_dim", "]", ")", ",", "\n", "bias_axes", "=", "bias_axes", "if", "self", ".", "_use_bias", "else", "None", ",", "\n", "**", "common_kwargs", ")", "\n", "\n", "self", ".", "_dot_product_equations", "=", "[", "]", "\n", "self", ".", "_combine_equations", "=", "[", "]", "\n", "self", ".", "softmax_layers", "=", "[", "]", "\n", "for", "attn_axes", "in", "self", ".", "_attn_axes", ":", "\n", "      ", "attn_axes", "=", "tuple", "(", "attn_axes", ")", "\n", "(", "dot_product_equation", ",", "combine_equation", ",", "\n", "attn_scores_rank", ")", "=", "_build_attention_equation", "(", "output_rank", ",", "attn_axes", ")", "\n", "norm_axes", "=", "tuple", "(", "\n", "range", "(", "attn_scores_rank", "-", "len", "(", "attn_axes", ")", ",", "attn_scores_rank", ")", ")", "\n", "self", ".", "_dot_product_equations", ".", "append", "(", "dot_product_equation", ")", "\n", "self", ".", "_combine_equations", ".", "append", "(", "combine_equation", ")", "\n", "self", ".", "softmax_layers", ".", "append", "(", "tf", ".", "keras", ".", "layers", ".", "Softmax", "(", "axis", "=", "norm_axes", ")", ")", "\n", "\n", "", "output_shape", "=", "[", "input_dim", "]", "\n", "einsum_equation", ",", "bias_axes", ",", "output_rank", "=", "_build_proj_equation", "(", "\n", "free_dims", ",", "bound_dims", "=", "2", ",", "output_dims", "=", "len", "(", "output_shape", ")", ")", "\n", "self", ".", "output_dense", "=", "tf", ".", "keras", ".", "layers", ".", "experimental", ".", "EinsumDense", "(", "\n", "einsum_equation", ",", "\n", "output_shape", "=", "_get_output_shape", "(", "output_rank", "-", "1", ",", "output_shape", ")", ",", "\n", "bias_axes", "=", "bias_axes", "if", "self", ".", "_use_bias", "else", "None", ",", "\n", "**", "common_kwargs", ")", "\n", "\n", "self", ".", "dropout_layer", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "self", ".", "_dropout", ")", "\n", "super", "(", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.models.layers.MultiAxisAttention.call": [[380, 408], ["layers.MultiAxisAttention.query_dense", "layers.MultiAxisAttention.key_dense", "layers.MultiAxisAttention.value_dense", "len", "tensorflow.split", "tensorflow.split", "tensorflow.split", "range", "tensorflow.concat", "layers.MultiAxisAttention.output_dense", "tensorflow.repeat", "tensorflow.repeat", "layers.MultiAxisAttention.dropout_layer", "layers.MultiAxisAttention.append", "tensorflow.einsum", "tensorflow.einsum"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "\n", "queries", ":", "tf", ".", "Tensor", ",", "\n", "values", ":", "tf", ".", "Tensor", ",", "\n", "training", ":", "Optional", "[", "bool", "]", "=", "None", ")", "->", "tf", ".", "Tensor", ":", "\n", "    ", "queries", "=", "self", ".", "query_dense", "(", "queries", ")", "\n", "keys", "=", "self", ".", "key_dense", "(", "values", ")", "\n", "values", "=", "self", ".", "value_dense", "(", "values", ")", "\n", "if", "self", ".", "_attn_type", "==", "\"multi_query\"", ":", "\n", "      ", "keys", "=", "tf", ".", "repeat", "(", "keys", ",", "[", "self", ".", "_num_heads", "]", ",", "axis", "=", "-", "2", ")", "\n", "values", "=", "tf", ".", "repeat", "(", "values", ",", "[", "self", ".", "_num_heads", "]", ",", "axis", "=", "-", "2", ")", "\n", "\n", "", "num_axes", "=", "len", "(", "self", ".", "_attn_axes", ")", "\n", "queries", "=", "tf", ".", "split", "(", "queries", ",", "num_or_size_splits", "=", "num_axes", ",", "axis", "=", "-", "2", ")", "\n", "keys", "=", "tf", ".", "split", "(", "keys", ",", "num_or_size_splits", "=", "num_axes", ",", "axis", "=", "-", "2", ")", "\n", "values", "=", "tf", ".", "split", "(", "values", ",", "num_or_size_splits", "=", "num_axes", ",", "axis", "=", "-", "2", ")", "\n", "\n", "outputs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_axes", ")", ":", "\n", "      ", "attn_scores", "=", "tf", ".", "einsum", "(", "self", ".", "_dot_product_equations", "[", "i", "]", ",", "keys", "[", "i", "]", ",", "\n", "queries", "[", "i", "]", ")", "/", "self", ".", "_scale", "\n", "attn_scores", "=", "self", ".", "softmax_layers", "[", "i", "]", "(", "attn_scores", ")", "\n", "attn_scores", "=", "self", ".", "dropout_layer", "(", "attn_scores", ",", "training", "=", "training", ")", "\n", "outputs", ".", "append", "(", "\n", "tf", ".", "einsum", "(", "self", ".", "_combine_equations", "[", "i", "]", ",", "attn_scores", ",", "values", "[", "i", "]", ")", ")", "\n", "\n", "", "outputs", "=", "tf", ".", "concat", "(", "outputs", ",", "axis", "=", "-", "2", ")", "\n", "outputs", "=", "self", ".", "output_dense", "(", "outputs", ")", "\n", "return", "outputs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.google-research_hit-gan.models.layers._build_attention_equation": [[28, 72], ["tuple", "range", "len", "numpy.delete", "range"], "function", ["None"], ["def", "_build_attention_equation", "(", "rank", ",", "attn_axes", ")", ":", "\n", "  ", "\"\"\"Builds einsum equations for the attention computation.\n\n  Query, key, value inputs after projection are expected to have the shape as:\n  (bs, <non-attention dims>, <attention dims>, num_heads, channels).\n  bs and <non-attention dims> are treated as <batch dims>.\n  The attention operations can be generalized:\n  (1) Query-key dot product:\n  (<batch dims>, <query attention dims>, num_heads, channels), (<batch dims>,\n  <key attention dims>, num_heads, channels) -> (<batch dims>,\n  num_heads, <query attention dims>, <key attention dims>)\n  (2) Combination:\n  (<batch dims>, num_heads, <query attention dims>, <key attention dims>),\n  (<batch dims>, <value attention dims>, num_heads, channels) -> (<batch dims>,\n  <query attention dims>, num_heads, channels)\n\n  Args:\n    rank: the rank of query, key, value tensors.\n    attn_axes: a list/tuple of axes, [-1, rank), that will do attention.\n\n  Returns:\n    Einsum equations.\n  \"\"\"", "\n", "target_notation", "=", "_CHR_IDX", "[", ":", "rank", "]", "\n", "# `batch_dims` includes the head dim.", "\n", "batch_dims", "=", "tuple", "(", "np", ".", "delete", "(", "range", "(", "rank", ")", ",", "attn_axes", "+", "(", "rank", "-", "1", ",", ")", ")", ")", "\n", "letter_offset", "=", "rank", "\n", "source_notation", "=", "\"\"", "\n", "for", "i", "in", "range", "(", "rank", ")", ":", "\n", "    ", "if", "i", "in", "batch_dims", "or", "i", "==", "rank", "-", "1", ":", "\n", "      ", "source_notation", "+=", "target_notation", "[", "i", "]", "\n", "", "else", ":", "\n", "      ", "source_notation", "+=", "_CHR_IDX", "[", "letter_offset", "]", "\n", "letter_offset", "+=", "1", "\n", "\n", "", "", "product_notation", "=", "\"\"", ".", "join", "(", "[", "target_notation", "[", "i", "]", "for", "i", "in", "batch_dims", "]", "+", "\n", "[", "target_notation", "[", "i", "]", "for", "i", "in", "attn_axes", "]", "+", "\n", "[", "source_notation", "[", "i", "]", "for", "i", "in", "attn_axes", "]", ")", "\n", "dot_product_equation", "=", "\"%s,%s->%s\"", "%", "(", "source_notation", ",", "target_notation", ",", "\n", "product_notation", ")", "\n", "attn_scores_rank", "=", "len", "(", "product_notation", ")", "\n", "combine_equation", "=", "\"%s,%s->%s\"", "%", "(", "product_notation", ",", "source_notation", ",", "\n", "target_notation", ")", "\n", "return", "dot_product_equation", ",", "combine_equation", ",", "attn_scores_rank", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.models.layers._build_proj_equation": [[74, 101], ["range", "range", "range", "len"], "function", ["None"], ["", "def", "_build_proj_equation", "(", "free_dims", ",", "bound_dims", ",", "output_dims", ")", ":", "\n", "  ", "\"\"\"Builds an einsum equation for projections inside multi-head attention.\"\"\"", "\n", "input_str", "=", "\"\"", "\n", "kernel_str", "=", "\"\"", "\n", "output_str", "=", "\"\"", "\n", "bias_axes", "=", "\"\"", "\n", "letter_offset", "=", "0", "\n", "for", "i", "in", "range", "(", "free_dims", ")", ":", "\n", "    ", "char", "=", "_CHR_IDX", "[", "i", "+", "letter_offset", "]", "\n", "input_str", "+=", "char", "\n", "output_str", "+=", "char", "\n", "\n", "", "letter_offset", "+=", "free_dims", "\n", "for", "i", "in", "range", "(", "bound_dims", ")", ":", "\n", "    ", "char", "=", "_CHR_IDX", "[", "i", "+", "letter_offset", "]", "\n", "input_str", "+=", "char", "\n", "kernel_str", "+=", "char", "\n", "\n", "", "letter_offset", "+=", "bound_dims", "\n", "for", "i", "in", "range", "(", "output_dims", ")", ":", "\n", "    ", "char", "=", "_CHR_IDX", "[", "i", "+", "letter_offset", "]", "\n", "kernel_str", "+=", "char", "\n", "output_str", "+=", "char", "\n", "bias_axes", "+=", "char", "\n", "", "equation", "=", "\"%s,%s->%s\"", "%", "(", "input_str", ",", "kernel_str", ",", "output_str", ")", "\n", "\n", "return", "equation", ",", "bias_axes", ",", "len", "(", "output_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.models.layers._get_output_shape": [[103, 105], ["list", "len"], "function", ["None"], ["", "def", "_get_output_shape", "(", "output_rank", ",", "known_last_dims", ")", ":", "\n", "  ", "return", "[", "None", "]", "*", "(", "output_rank", "-", "len", "(", "known_last_dims", ")", ")", "+", "list", "(", "known_last_dims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.models.layers.make_norm_layer": [[107, 127], ["tensorflow.keras.layers.Layer", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.experimental.SyncBatchNormalization", "tensorflow.keras.layers.LayerNormalization", "ValueError"], "function", ["None"], ["", "def", "make_norm_layer", "(", "\n", "norm_type", ":", "Optional", "[", "Text", "]", "=", "\"batch\"", ")", "->", "tf", ".", "keras", ".", "layers", ".", "Layer", ":", "\n", "  ", "\"\"\"Makes the normalization layer.\n\n  Args:\n    norm_type: A string for the type of normalization.\n\n  Returns:\n    A `tf.keras.layers.Layer` instance.\n  \"\"\"", "\n", "if", "norm_type", "is", "None", ":", "\n", "    ", "return", "tf", ".", "keras", ".", "layers", ".", "Layer", "(", ")", "# Identity.", "\n", "", "elif", "norm_type", "==", "\"batch\"", ":", "\n", "    ", "return", "tf", ".", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "\n", "", "elif", "norm_type", "==", "\"syncbatch\"", ":", "\n", "    ", "return", "tf", ".", "keras", ".", "layers", ".", "experimental", ".", "SyncBatchNormalization", "(", ")", "\n", "", "elif", "norm_type", "==", "\"layer\"", ":", "\n", "    ", "return", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "1e-6", ")", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "\"{} is not a recognized norm type\"", ".", "format", "(", "norm_type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.models.discriminators.BlurPool2D.__init__": [[32, 72], ["super().__init__", "tensorflow.constant", "tensorflow.reduce_sum", "tensorflow.reshape", "ValueError"], "methods", ["home.repos.pwc.inspect_result.google-research_hit-gan.models.discriminators.StyleGANDiscriminator.__init__"], ["def", "__init__", "(", "self", ",", "\n", "filter_size", ":", "int", "=", "3", ",", "\n", "strides", ":", "Tuple", "[", "int", ",", "int", ",", "int", ",", "int", "]", "=", "(", "1", ",", "2", ",", "2", ",", "1", ")", ",", "\n", "padding", ":", "Text", "=", "\"SAME\"", ",", "\n", "**", "kwargs", ":", "Any", ")", "->", "None", ":", "\n", "    ", "\"\"\"Initializes the BlurPool2D layer.\n\n    Args:\n      filter_size: The size (height and width) of the blurring filter.\n      strides: The stride for convolution of the blurring filter for each\n        dimension of the inputs.\n      padding: One of 'VALID' or 'SAME', specifying the padding type used for\n        convolution.\n      **kwargs: Keyword arguments forwarded to super().__init__().\n\n    Raises:\n      ValueError: If filter_size is not 3, 4, 5, 6 or 7.\n    \"\"\"", "\n", "if", "filter_size", "not", "in", "[", "3", ",", "4", ",", "5", ",", "6", ",", "7", "]", ":", "\n", "      ", "raise", "ValueError", "(", "\"Only filter_size of 3, 4, 5, 6 or 7 is supported.\"", ")", "\n", "", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "_strides", "=", "strides", "\n", "self", ".", "_padding", "=", "padding", "\n", "\n", "if", "filter_size", "==", "3", ":", "\n", "      ", "self", ".", "_filter", "=", "[", "1.", ",", "2.", ",", "1.", "]", "\n", "", "elif", "filter_size", "==", "4", ":", "\n", "      ", "self", ".", "_filter", "=", "[", "1.", ",", "3.", ",", "3.", ",", "1.", "]", "\n", "", "elif", "filter_size", "==", "5", ":", "\n", "      ", "self", ".", "_filter", "=", "[", "1.", ",", "4.", ",", "6.", ",", "4.", ",", "1.", "]", "\n", "", "elif", "filter_size", "==", "6", ":", "\n", "      ", "self", ".", "_filter", "=", "[", "1.", ",", "5.", ",", "10.", ",", "10.", ",", "5.", ",", "1.", "]", "\n", "", "elif", "filter_size", "==", "7", ":", "\n", "      ", "self", ".", "_filter", "=", "[", "1.", ",", "6.", ",", "15.", ",", "20.", ",", "15.", ",", "6.", ",", "1.", "]", "\n", "\n", "", "self", ".", "_filter", "=", "tf", ".", "constant", "(", "self", ".", "_filter", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "_filter", "=", "self", ".", "_filter", "[", ":", ",", "None", "]", "*", "self", ".", "_filter", "[", "None", ",", ":", "]", "\n", "self", ".", "_filter", "/=", "tf", ".", "reduce_sum", "(", "self", ".", "_filter", ")", "\n", "self", ".", "_filter", "=", "tf", ".", "reshape", "(", "\n", "self", ".", "_filter", ",", "[", "self", ".", "_filter", ".", "shape", "[", "0", "]", ",", "self", ".", "_filter", ".", "shape", "[", "1", "]", ",", "1", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.models.discriminators.BlurPool2D.build": [[73, 76], ["tensorflow.tile", "super().build"], "methods", ["home.repos.pwc.inspect_result.google-research_hit-gan.models.discriminators.Block.build"], ["", "def", "build", "(", "self", ",", "input_shape", ":", "tf", ".", "TensorShape", ")", "->", "None", ":", "\n", "    ", "self", ".", "_filter", "=", "tf", ".", "tile", "(", "self", ".", "_filter", ",", "[", "1", ",", "1", ",", "input_shape", "[", "-", "1", "]", ",", "1", "]", ")", "\n", "super", "(", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.models.discriminators.BlurPool2D.call": [[77, 84], ["tensorflow.nn.depthwise_conv2d"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ":", "tf", ".", "Tensor", ")", "->", "tf", ".", "Tensor", ":", "\n", "    ", "\"\"\"Calls the BlurPool2D layer on the given inputs.\"\"\"", "\n", "return", "tf", ".", "nn", ".", "depthwise_conv2d", "(", "\n", "input", "=", "inputs", ",", "\n", "filter", "=", "self", ".", "_filter", ",", "\n", "strides", "=", "self", ".", "_strides", ",", "\n", "padding", "=", "self", ".", "_padding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.models.discriminators.MinibatchStddev.__init__": [[93, 107], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.google-research_hit-gan.models.discriminators.StyleGANDiscriminator.__init__"], ["def", "__init__", "(", "self", ",", "\n", "group_size", ":", "int", "=", "4", ",", "\n", "num_features", ":", "int", "=", "1", ",", "\n", "**", "kwargs", ":", "Any", ")", "->", "None", ":", "\n", "    ", "\"\"\"Initializer.\n\n    Args:\n      group_size: The size of the group to split the input batch to.\n      num_features: The number to split the input channels to.\n      **kwargs: Any other arguments for keras Layer.\n    \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "_group_size", "=", "group_size", "\n", "self", ".", "_num_features", "=", "num_features", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.models.discriminators.MinibatchStddev.call": [[108, 124], ["tensorflow.minimum", "tensorflow.reshape", "tensorflow.math.reduce_variance", "tensorflow.math.sqrt", "tensorflow.reduce_mean", "tensorflow.squeeze", "tensorflow.tile", "tensorflow.concat", "tensorflow.shape"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ":", "tf", ".", "Tensor", ")", "->", "tf", ".", "Tensor", ":", "\n", "    ", "batch_size", "=", "tf", ".", "shape", "(", "inputs", ")", "[", "0", "]", "\n", "group_size", "=", "tf", ".", "minimum", "(", "batch_size", ",", "self", ".", "_group_size", ")", "\n", "\n", "outputs", "=", "tf", ".", "reshape", "(", "\n", "inputs", ",", "\n", "shape", "=", "(", "group_size", ",", "-", "1", ",", "inputs", ".", "shape", "[", "1", "]", ",", "inputs", ".", "shape", "[", "2", "]", ",", "\n", "self", ".", "_num_features", ",", "inputs", ".", "shape", "[", "3", "]", "//", "self", ".", "_num_features", ")", ")", "\n", "outputs", "=", "tf", ".", "math", ".", "reduce_variance", "(", "outputs", ",", "axis", "=", "0", ")", "\n", "outputs", "=", "tf", ".", "math", ".", "sqrt", "(", "outputs", "+", "1e-8", ")", "\n", "outputs", "=", "tf", ".", "reduce_mean", "(", "outputs", ",", "axis", "=", "(", "1", ",", "2", ",", "4", ")", ",", "keepdims", "=", "True", ")", "\n", "outputs", "=", "tf", ".", "squeeze", "(", "outputs", ",", "axis", "=", "-", "1", ")", "\n", "outputs", "=", "tf", ".", "tile", "(", "outputs", ",", "\n", "(", "group_size", ",", "inputs", ".", "shape", "[", "1", "]", ",", "inputs", ".", "shape", "[", "2", "]", ",", "1", ")", ")", "\n", "outputs", "=", "tf", ".", "concat", "(", "(", "inputs", ",", "outputs", ")", ",", "axis", "=", "-", "1", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.models.discriminators.EqualDense.__init__": [[129, 146], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.google-research_hit-gan.models.discriminators.StyleGANDiscriminator.__init__"], ["def", "__init__", "(", "self", ",", "\n", "units", ":", "int", ",", "\n", "use_bias", ":", "bool", "=", "True", ",", "\n", "lr_multiplier", ":", "float", "=", "1.", ",", "\n", "**", "kwargs", ":", "Any", ")", "->", "None", ":", "\n", "    ", "\"\"\"Initializer.\n\n    Args:\n      units: The number of output channels.\n      use_bias: Whether the layer uses a bias vector.\n      lr_multiplier: learning rate multiplier.\n      **kwargs: Any other arguments for keras Layer.\n    \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "_units", "=", "units", "\n", "self", ".", "_use_bias", "=", "use_bias", "\n", "self", ".", "_lr_multiplier", "=", "lr_multiplier", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.models.discriminators.EqualDense.build": [[147, 159], ["discriminators.EqualDense.add_weight", "super().build", "discriminators.EqualDense.add_weight", "math.sqrt", "tensorflow.keras.initializers.RandomNormal"], "methods", ["home.repos.pwc.inspect_result.google-research_hit-gan.models.discriminators.Block.build"], ["", "def", "build", "(", "self", ",", "input_shape", ":", "tf", ".", "TensorShape", ")", "->", "None", ":", "\n", "    ", "input_dim", "=", "input_shape", "[", "-", "1", "]", "\n", "self", ".", "_scale", "=", "(", "1.", "/", "math", ".", "sqrt", "(", "input_dim", ")", ")", "*", "self", ".", "_lr_multiplier", "\n", "self", ".", "kernel", "=", "self", ".", "add_weight", "(", "\n", "\"kernel\"", ",", "\n", "shape", "=", "(", "input_dim", ",", "self", ".", "_units", ")", ",", "\n", "initializer", "=", "tf", ".", "keras", ".", "initializers", ".", "RandomNormal", "(", "\n", "mean", "=", "0.", ",", "stddev", "=", "1.", "/", "self", ".", "_lr_multiplier", ")", ")", "\n", "if", "self", ".", "_use_bias", ":", "\n", "      ", "self", ".", "bias", "=", "self", ".", "add_weight", "(", "\n", "\"bias\"", ",", "shape", "=", "(", "self", ".", "_units", ",", ")", ",", "initializer", "=", "\"zeros\"", ")", "\n", "", "super", "(", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.models.discriminators.EqualDense.call": [[160, 165], ["tensorflow.matmul", "tensorflow.nn.bias_add"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ":", "tf", ".", "Tensor", ")", "->", "tf", ".", "Tensor", ":", "\n", "    ", "outputs", "=", "tf", ".", "matmul", "(", "inputs", ",", "self", ".", "kernel", "*", "self", ".", "_scale", ")", "\n", "if", "self", ".", "_use_bias", ":", "\n", "      ", "outputs", "=", "tf", ".", "nn", ".", "bias_add", "(", "outputs", ",", "self", ".", "bias", "*", "self", ".", "_lr_multiplier", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.models.discriminators.EqualConv2D.__init__": [[170, 195], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.google-research_hit-gan.models.discriminators.StyleGANDiscriminator.__init__"], ["def", "__init__", "(", "self", ",", "\n", "filters", ":", "int", ",", "\n", "kernel_size", ":", "int", ",", "\n", "strides", ":", "Tuple", "[", "int", ",", "int", "]", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", ":", "Text", "=", "\"VALID\"", ",", "\n", "use_bias", ":", "bool", "=", "True", ",", "\n", "**", "kwargs", ":", "Any", ")", "->", "None", ":", "\n", "    ", "\"\"\"Initializer.\n\n    Args:\n      filters: The number of output channels.\n      kernel_size: An integer for the height and width of the 2D convolution\n        window.\n      strides: An integer for the strides of the convolution along the height\n        and width.\n      padding: The type of padding (\"VALID\" or \"SAME\").\n      use_bias: Whether the layer uses a bias vector.\n      **kwargs: Any other arguments for keras Layer.\n    \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "_filters", "=", "filters", "\n", "self", ".", "_kernel_size", "=", "kernel_size", "\n", "self", ".", "_strides", "=", "strides", "\n", "self", ".", "_padding", "=", "padding", "\n", "self", ".", "_use_bias", "=", "use_bias", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.models.discriminators.EqualConv2D.build": [[196, 207], ["discriminators.EqualConv2D.add_weight", "super().build", "math.sqrt", "discriminators.EqualConv2D.add_weight", "tensorflow.keras.initializers.RandomNormal"], "methods", ["home.repos.pwc.inspect_result.google-research_hit-gan.models.discriminators.Block.build"], ["", "def", "build", "(", "self", ",", "input_shape", ":", "tf", ".", "TensorShape", ")", "->", "None", ":", "\n", "    ", "input_dim", "=", "input_shape", "[", "-", "1", "]", "\n", "self", ".", "_scale", "=", "1.", "/", "math", ".", "sqrt", "(", "input_dim", "*", "self", ".", "_kernel_size", "**", "2", ")", "\n", "self", ".", "kernel", "=", "self", ".", "add_weight", "(", "\n", "\"kernel\"", ",", "\n", "shape", "=", "(", "self", ".", "_kernel_size", ",", "self", ".", "_kernel_size", ",", "input_dim", ",", "self", ".", "_filters", ")", ",", "\n", "initializer", "=", "tf", ".", "keras", ".", "initializers", ".", "RandomNormal", "(", "mean", "=", "0.", ",", "stddev", "=", "1.", ")", ")", "\n", "if", "self", ".", "_use_bias", ":", "\n", "      ", "self", ".", "bias", "=", "self", ".", "add_weight", "(", "\n", "\"bias\"", ",", "shape", "=", "(", "self", ".", "_filters", ",", ")", ",", "initializer", "=", "\"zeros\"", ")", "\n", "", "super", "(", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.models.discriminators.EqualConv2D.call": [[208, 217], ["tensorflow.nn.conv2d", "tensorflow.nn.bias_add"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ":", "tf", ".", "Tensor", ")", "->", "tf", ".", "Tensor", ":", "\n", "    ", "outputs", "=", "tf", ".", "nn", ".", "conv2d", "(", "\n", "inputs", ",", "\n", "self", ".", "kernel", "*", "self", ".", "_scale", ",", "\n", "strides", "=", "self", ".", "_strides", ",", "\n", "padding", "=", "self", ".", "_padding", ")", "\n", "if", "self", ".", "_use_bias", ":", "\n", "      ", "outputs", "=", "tf", ".", "nn", ".", "bias_add", "(", "outputs", ",", "self", ".", "bias", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.models.discriminators.Block.__init__": [[222, 244], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.google-research_hit-gan.models.discriminators.StyleGANDiscriminator.__init__"], ["def", "__init__", "(", "self", ",", "\n", "filters", ":", "int", ",", "\n", "relu_slope", ":", "float", ",", "\n", "blur_resample", ":", "bool", "=", "False", ",", "\n", "conv2d_cls", ":", "Type", "[", "Union", "[", "tf", ".", "keras", ".", "layers", ".", "Conv2D", ",", "\n", "EqualConv2D", "]", "]", "=", "tf", ".", "keras", ".", "layers", ".", "Conv2D", ",", "\n", "**", "kwargs", ":", "Any", ")", ":", "\n", "    ", "\"\"\"Initializer.\n\n    Args:\n      filters: The number of output channels.\n      relu_slope: A float for the negative slope coefficient.\n      blur_resample: Whether the blur downsample is used.\n      conv2d_cls: The type of Conv2D layer (`EqualConv2D` or\n        `tf.keras.layers.Conv2D`).\n      **kwargs: Any other arguments for keras Layer.\n    \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "_filters", "=", "filters", "\n", "self", ".", "_relu_slope", "=", "relu_slope", "\n", "self", ".", "_blur_resample", "=", "blur_resample", "\n", "self", ".", "_conv2d_cls", "=", "conv2d_cls", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.models.discriminators.Block._make_pooling_layer": [[245, 249], ["discriminators.BlurPool2D", "tensorflow.keras.layers.AveragePooling2D"], "methods", ["None"], ["", "def", "_make_pooling_layer", "(", "self", ")", ":", "\n", "    ", "return", "BlurPool2D", "(", "\n", "filter_size", "=", "4", "\n", ")", "if", "self", ".", "_blur_resample", "else", "tf", ".", "keras", ".", "layers", ".", "AveragePooling2D", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.models.discriminators.Block.build": [[250, 265], ["tensorflow.keras.Sequential", "tensorflow.keras.Sequential", "super().build", "discriminators.Block._make_pooling_layer", "discriminators.Block._conv2d_cls", "discriminators.Block._conv2d_cls", "tensorflow.keras.layers.LeakyReLU", "discriminators.Block._make_pooling_layer", "discriminators.Block._conv2d_cls", "tensorflow.keras.layers.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.google-research_hit-gan.models.discriminators.Block.build", "home.repos.pwc.inspect_result.google-research_hit-gan.models.discriminators.Block._make_pooling_layer", "home.repos.pwc.inspect_result.google-research_hit-gan.models.discriminators.Block._make_pooling_layer"], ["", "def", "build", "(", "self", ",", "input_shape", ":", "tf", ".", "TensorShape", ")", "->", "None", ":", "\n", "    ", "input_dim", "=", "input_shape", "[", "-", "1", "]", "\n", "\n", "self", ".", "skip_layers", "=", "tf", ".", "keras", ".", "Sequential", "(", "[", "\n", "self", ".", "_make_pooling_layer", "(", ")", ",", "\n", "self", ".", "_conv2d_cls", "(", "self", ".", "_filters", ",", "1", ",", "use_bias", "=", "False", ")", "\n", "]", ")", "\n", "self", ".", "conv_layers", "=", "tf", ".", "keras", ".", "Sequential", "(", "[", "\n", "self", ".", "_conv2d_cls", "(", "input_dim", ",", "3", ",", "padding", "=", "\"SAME\"", ")", ",", "\n", "tf", ".", "keras", ".", "layers", ".", "LeakyReLU", "(", "self", ".", "_relu_slope", ")", ",", "\n", "self", ".", "_make_pooling_layer", "(", ")", ",", "\n", "self", ".", "_conv2d_cls", "(", "self", ".", "_filters", ",", "3", ",", "padding", "=", "\"SAME\"", ")", ",", "\n", "tf", ".", "keras", ".", "layers", ".", "LeakyReLU", "(", "self", ".", "_relu_slope", ")", "\n", "]", ")", "\n", "super", "(", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.models.discriminators.Block.call": [[266, 271], ["discriminators.Block.conv_layers", "discriminators.Block.skip_layers", "math.sqrt"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ":", "tf", ".", "Tensor", ")", "->", "tf", ".", "Tensor", ":", "\n", "    ", "outputs", "=", "self", ".", "conv_layers", "(", "inputs", ")", "\n", "inputs", "=", "self", ".", "skip_layers", "(", "inputs", ")", "\n", "outputs", "=", "(", "outputs", "+", "inputs", ")", "/", "math", ".", "sqrt", "(", "2.", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.models.discriminators.StyleGANDiscriminator.__init__": [[281, 335], ["super().__init__", "tensorflow.keras.Sequential", "int", "range", "tensorflow.keras.Sequential", "math.log2", "discriminators.StyleGANDiscriminator.conv_blocks.add", "discriminators.StyleGANDiscriminator.conv_blocks.add", "conv2d_cls", "tensorflow.keras.layers.LeakyReLU", "discriminators.Block", "discriminators.MinibatchStddev", "conv2d_cls", "tensorflow.keras.layers.LeakyReLU", "tensorflow.keras.layers.Flatten", "dense_cls", "tensorflow.keras.layers.LeakyReLU", "dense_cls"], "methods", ["home.repos.pwc.inspect_result.google-research_hit-gan.models.discriminators.StyleGANDiscriminator.__init__"], ["def", "__init__", "(", "self", ",", "\n", "input_size", ":", "int", ",", "\n", "channel_multiplier", ":", "int", "=", "1", ",", "\n", "blur_resample", ":", "bool", "=", "False", ",", "\n", "use_equalized_lr", ":", "bool", "=", "False", ",", "\n", "use_batch_stddev", ":", "bool", "=", "False", ",", "\n", "**", "kwargs", ":", "Any", ")", ":", "\n", "    ", "\"\"\"Initializer.\n\n    Args:\n      input_size: An integer for the input image size.\n      channel_multiplier: An integer for the factor of channel dimensions.\n      blur_resample: Whether the blur downsample is used.\n      use_equalized_lr: Whether the equalized learning rate is used.\n      use_batch_stddev: Whether the minibatch standard deviation is used.\n      **kwargs: Any other arguments for keras Layer.\n    \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "relu_slope", "=", "0.2", "\n", "channel_dim", "=", "{", "\n", "4", ":", "512", ",", "\n", "8", ":", "512", ",", "\n", "16", ":", "512", ",", "\n", "32", ":", "512", ",", "\n", "64", ":", "256", "*", "channel_multiplier", ",", "\n", "128", ":", "128", "*", "channel_multiplier", ",", "\n", "256", ":", "64", "*", "channel_multiplier", ",", "\n", "512", ":", "32", "*", "channel_multiplier", ",", "\n", "1024", ":", "16", "*", "channel_multiplier", ",", "\n", "}", "\n", "\n", "dense_cls", "=", "EqualDense", "if", "use_equalized_lr", "else", "tf", ".", "keras", ".", "layers", ".", "Dense", "\n", "conv2d_cls", "=", "EqualConv2D", "if", "use_equalized_lr", "else", "tf", ".", "keras", ".", "layers", ".", "Conv2D", "\n", "\n", "self", ".", "conv_blocks", "=", "tf", ".", "keras", ".", "Sequential", "(", "[", "\n", "conv2d_cls", "(", "channel_dim", "[", "input_size", "]", ",", "3", ",", "padding", "=", "\"SAME\"", ")", ",", "\n", "tf", ".", "keras", ".", "layers", ".", "LeakyReLU", "(", "relu_slope", ")", "\n", "]", ")", "\n", "log_size", "=", "int", "(", "math", ".", "log2", "(", "input_size", ")", ")", "\n", "for", "i", "in", "range", "(", "log_size", ",", "2", ",", "-", "1", ")", ":", "\n", "      ", "self", ".", "conv_blocks", ".", "add", "(", "\n", "Block", "(", "channel_dim", "[", "2", "**", "(", "i", "-", "1", ")", "]", ",", "relu_slope", ",", "blur_resample", ",", "conv2d_cls", ")", ")", "\n", "\n", "", "if", "use_batch_stddev", ":", "\n", "      ", "self", ".", "conv_blocks", ".", "add", "(", "MinibatchStddev", "(", ")", ")", "\n", "\n", "", "self", ".", "final_layers", "=", "tf", ".", "keras", ".", "Sequential", "(", "[", "\n", "conv2d_cls", "(", "channel_dim", "[", "4", "]", ",", "3", ",", "padding", "=", "\"SAME\"", ")", ",", "\n", "tf", ".", "keras", ".", "layers", ".", "LeakyReLU", "(", "relu_slope", ")", ",", "\n", "tf", ".", "keras", ".", "layers", ".", "Flatten", "(", ")", ",", "\n", "dense_cls", "(", "channel_dim", "[", "4", "]", ")", ",", "\n", "tf", ".", "keras", ".", "layers", ".", "LeakyReLU", "(", "relu_slope", ")", ",", "\n", "dense_cls", "(", "1", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.google-research_hit-gan.models.discriminators.StyleGANDiscriminator.call": [[337, 341], ["discriminators.StyleGANDiscriminator.conv_blocks", "discriminators.StyleGANDiscriminator.final_layers"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ":", "tf", ".", "Tensor", ")", "->", "tf", ".", "Tensor", ":", "\n", "    ", "outputs", "=", "self", ".", "conv_blocks", "(", "inputs", ")", "\n", "outputs", "=", "self", ".", "final_layers", "(", "outputs", ")", "\n", "return", "outputs", "\n", "", "", ""]]}