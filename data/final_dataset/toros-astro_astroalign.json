{"home.repos.pwc.inspect_result.toros-astro_astroalign.None.ez_setup.ContextualZipFile.__enter__": [[76, 78], ["None"], "methods", ["None"], ["def", "__enter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.None.ez_setup.ContextualZipFile.__exit__": [[79, 81], ["ez_setup.ContextualZipFile.close"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "type", ",", "value", ",", "traceback", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.None.ez_setup.ContextualZipFile.__new__": [[82, 87], ["hasattr", "zipfile.ZipFile.__new__", "zipfile.ZipFile"], "methods", ["home.repos.pwc.inspect_result.toros-astro_astroalign.None.ez_setup.ContextualZipFile.__new__"], ["", "def", "__new__", "(", "cls", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Construct a ZipFile or ContextualZipFile as appropriate.\"\"\"", "\n", "if", "hasattr", "(", "zipfile", ".", "ZipFile", ",", "'__exit__'", ")", ":", "\n", "            ", "return", "zipfile", ".", "ZipFile", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "return", "super", "(", "ContextualZipFile", ",", "cls", ")", ".", "__new__", "(", "cls", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.None.ez_setup._python_cmd": [[38, 46], ["subprocess.call"], "function", ["None"], ["def", "_python_cmd", "(", "*", "args", ")", ":", "\n", "    ", "\"\"\"\n    Execute a command.\n\n    Return True if the command succeeded.\n    \"\"\"", "\n", "args", "=", "(", "sys", ".", "executable", ",", ")", "+", "args", "\n", "return", "subprocess", ".", "call", "(", "args", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.None.ez_setup._install": [[48, 58], ["ez_setup.archive_context", "distutils.log.warn", "ez_setup._python_cmd", "distutils.log.warn", "distutils.log.warn"], "function", ["home.repos.pwc.inspect_result.toros-astro_astroalign.None.ez_setup.archive_context", "home.repos.pwc.inspect_result.toros-astro_astroalign.None.ez_setup._python_cmd"], ["", "def", "_install", "(", "archive_filename", ",", "install_args", "=", "(", ")", ")", ":", "\n", "    ", "\"\"\"Install Setuptools.\"\"\"", "\n", "with", "archive_context", "(", "archive_filename", ")", ":", "\n", "# installing", "\n", "        ", "log", ".", "warn", "(", "'Installing Setuptools'", ")", "\n", "if", "not", "_python_cmd", "(", "'setup.py'", ",", "'install'", ",", "*", "install_args", ")", ":", "\n", "            ", "log", ".", "warn", "(", "'Something went wrong during the installation.'", ")", "\n", "log", ".", "warn", "(", "'See the error message above.'", ")", "\n", "# exitcode will be 2", "\n", "return", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.None.ez_setup._build_egg": [[60, 70], ["distutils.log.warn", "ez_setup.archive_context", "distutils.log.warn", "ez_setup._python_cmd", "os.path.exists", "IOError"], "function", ["home.repos.pwc.inspect_result.toros-astro_astroalign.None.ez_setup.archive_context", "home.repos.pwc.inspect_result.toros-astro_astroalign.None.ez_setup._python_cmd"], ["", "", "", "def", "_build_egg", "(", "egg", ",", "archive_filename", ",", "to_dir", ")", ":", "\n", "    ", "\"\"\"Build Setuptools egg.\"\"\"", "\n", "with", "archive_context", "(", "archive_filename", ")", ":", "\n", "# building an egg", "\n", "        ", "log", ".", "warn", "(", "'Building a Setuptools egg in %s'", ",", "to_dir", ")", "\n", "_python_cmd", "(", "'setup.py'", ",", "'-q'", ",", "'bdist_egg'", ",", "'--dist-dir'", ",", "to_dir", ")", "\n", "# returning the result", "\n", "", "log", ".", "warn", "(", "egg", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "egg", ")", ":", "\n", "        ", "raise", "IOError", "(", "'Could not build the egg.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.None.ez_setup.archive_context": [[89, 113], ["tempfile.mkdtemp", "distutils.log.warn", "os.getcwd", "os.chdir", "os.path.join", "os.chdir", "distutils.log.warn", "os.chdir", "shutil.rmtree", "ez_setup.ContextualZipFile", "archive.extractall", "os.listdir"], "function", ["None"], ["", "", "@", "contextlib", ".", "contextmanager", "\n", "def", "archive_context", "(", "filename", ")", ":", "\n", "    ", "\"\"\"\n    Unzip filename to a temporary directory, set to the cwd.\n\n    The unzipped target is cleaned up after.\n    \"\"\"", "\n", "tmpdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "log", ".", "warn", "(", "'Extracting in %s'", ",", "tmpdir", ")", "\n", "old_wd", "=", "os", ".", "getcwd", "(", ")", "\n", "try", ":", "\n", "        ", "os", ".", "chdir", "(", "tmpdir", ")", "\n", "with", "ContextualZipFile", "(", "filename", ")", "as", "archive", ":", "\n", "            ", "archive", ".", "extractall", "(", ")", "\n", "\n", "# going in the directory", "\n", "", "subdir", "=", "os", ".", "path", ".", "join", "(", "tmpdir", ",", "os", ".", "listdir", "(", "tmpdir", ")", "[", "0", "]", ")", "\n", "os", ".", "chdir", "(", "subdir", ")", "\n", "log", ".", "warn", "(", "'Now working in %s'", ",", "subdir", ")", "\n", "yield", "\n", "\n", "", "finally", ":", "\n", "        ", "os", ".", "chdir", "(", "old_wd", ")", "\n", "shutil", ".", "rmtree", "(", "tmpdir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.None.ez_setup._do_download": [[115, 132], ["os.path.join", "sys.path.insert", "os.path.exists", "ez_setup.download_setuptools", "ez_setup._build_egg"], "function", ["home.repos.pwc.inspect_result.toros-astro_astroalign.None.ez_setup.download_setuptools", "home.repos.pwc.inspect_result.toros-astro_astroalign.None.ez_setup._build_egg"], ["", "", "def", "_do_download", "(", "version", ",", "download_base", ",", "to_dir", ",", "download_delay", ")", ":", "\n", "    ", "\"\"\"Download Setuptools.\"\"\"", "\n", "egg", "=", "os", ".", "path", ".", "join", "(", "to_dir", ",", "'setuptools-%s-py%d.%d.egg'", "\n", "%", "(", "version", ",", "sys", ".", "version_info", "[", "0", "]", ",", "sys", ".", "version_info", "[", "1", "]", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "egg", ")", ":", "\n", "        ", "archive", "=", "download_setuptools", "(", "version", ",", "download_base", ",", "\n", "to_dir", ",", "download_delay", ")", "\n", "_build_egg", "(", "egg", ",", "archive", ",", "to_dir", ")", "\n", "", "sys", ".", "path", ".", "insert", "(", "0", ",", "egg", ")", "\n", "\n", "# Remove previously-imported pkg_resources if present (see", "\n", "# https://bitbucket.org/pypa/setuptools/pull-request/7/ for details).", "\n", "if", "'pkg_resources'", "in", "sys", ".", "modules", ":", "\n", "        ", "del", "sys", ".", "modules", "[", "'pkg_resources'", "]", "\n", "\n", "", "import", "setuptools", "\n", "setuptools", ".", "bootstrap_install_from", "=", "egg", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.None.ez_setup.use_setuptools": [[134, 171], ["os.path.abspath", "set().intersection", "ez_setup._do_download", "pkg_resources.require", "set", "ez_setup._unload_pkg_resources", "ez_setup._conflict_bail"], "function", ["home.repos.pwc.inspect_result.toros-astro_astroalign.None.ez_setup._do_download", "home.repos.pwc.inspect_result.toros-astro_astroalign.None.ez_setup._unload_pkg_resources", "home.repos.pwc.inspect_result.toros-astro_astroalign.None.ez_setup._conflict_bail"], ["", "def", "use_setuptools", "(", "\n", "version", "=", "DEFAULT_VERSION", ",", "download_base", "=", "DEFAULT_URL", ",", "\n", "to_dir", "=", "DEFAULT_SAVE_DIR", ",", "download_delay", "=", "15", ")", ":", "\n", "    ", "\"\"\"\n    Ensure that a setuptools version is installed.\n\n    Return None. Raise SystemExit if the requested version\n    or later cannot be installed.\n    \"\"\"", "\n", "to_dir", "=", "os", ".", "path", ".", "abspath", "(", "to_dir", ")", "\n", "\n", "# prior to importing, capture the module state for", "\n", "# representative modules.", "\n", "rep_modules", "=", "'pkg_resources'", ",", "'setuptools'", "\n", "imported", "=", "set", "(", "sys", ".", "modules", ")", ".", "intersection", "(", "rep_modules", ")", "\n", "\n", "try", ":", "\n", "        ", "import", "pkg_resources", "\n", "pkg_resources", ".", "require", "(", "\"setuptools>=\"", "+", "version", ")", "\n", "# a suitable version is already installed", "\n", "return", "\n", "", "except", "ImportError", ":", "\n", "# pkg_resources not available; setuptools is not installed; download", "\n", "        ", "pass", "\n", "", "except", "pkg_resources", ".", "DistributionNotFound", ":", "\n", "# no version of setuptools was found; allow download", "\n", "        ", "pass", "\n", "", "except", "pkg_resources", ".", "VersionConflict", "as", "VC_err", ":", "\n", "        ", "if", "imported", ":", "\n", "            ", "_conflict_bail", "(", "VC_err", ",", "version", ")", "\n", "\n", "# otherwise, unload pkg_resources to allow the downloaded version to", "\n", "#  take precedence.", "\n", "", "del", "pkg_resources", "\n", "_unload_pkg_resources", "(", ")", "\n", "\n", "", "return", "_do_download", "(", "version", ",", "download_base", ",", "to_dir", ",", "download_delay", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.None.ez_setup._conflict_bail": [[173, 189], ["textwrap.dedent", "textwrap.dedent.format", "sys.stderr.write", "sys.exit", "locals"], "function", ["None"], ["", "def", "_conflict_bail", "(", "VC_err", ",", "version", ")", ":", "\n", "    ", "\"\"\"\n    Setuptools was imported prior to invocation, so it is\n    unsafe to unload it. Bail out.\n    \"\"\"", "\n", "conflict_tmpl", "=", "textwrap", ".", "dedent", "(", "\"\"\"\n        The required version of setuptools (>={version}) is not available,\n        and can't be installed while this script is running. Please\n        install a more recent version first, using\n        'easy_install -U setuptools'.\n\n        (Currently using {VC_err.args[0]!r})\n        \"\"\"", ")", "\n", "msg", "=", "conflict_tmpl", ".", "format", "(", "**", "locals", "(", ")", ")", "\n", "sys", ".", "stderr", ".", "write", "(", "msg", ")", "\n", "sys", ".", "exit", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.None.ez_setup._unload_pkg_resources": [[191, 198], ["name.startswith"], "function", ["None"], ["", "def", "_unload_pkg_resources", "(", ")", ":", "\n", "    ", "del_modules", "=", "[", "\n", "name", "for", "name", "in", "sys", ".", "modules", "\n", "if", "name", ".", "startswith", "(", "'pkg_resources'", ")", "\n", "]", "\n", "for", "mod_name", "in", "del_modules", ":", "\n", "        ", "del", "sys", ".", "modules", "[", "mod_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.None.ez_setup._clean_check": [[200, 212], ["subprocess.check_call", "os.access", "os.unlink"], "function", ["None"], ["", "", "def", "_clean_check", "(", "cmd", ",", "target", ")", ":", "\n", "    ", "\"\"\"\n    Run the command to download target.\n\n    If the command fails, clean up before re-raising the error.\n    \"\"\"", "\n", "try", ":", "\n", "        ", "subprocess", ".", "check_call", "(", "cmd", ")", "\n", "", "except", "subprocess", ".", "CalledProcessError", ":", "\n", "        ", "if", "os", ".", "access", "(", "target", ",", "os", ".", "F_OK", ")", ":", "\n", "            ", "os", ".", "unlink", "(", "target", ")", "\n", "", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.None.ez_setup.download_file_powershell": [[214, 234], ["os.path.abspath", "ez_setup._clean_check", "vars"], "function", ["home.repos.pwc.inspect_result.toros-astro_astroalign.None.ez_setup._clean_check"], ["", "", "def", "download_file_powershell", "(", "url", ",", "target", ")", ":", "\n", "    ", "\"\"\"\n    Download the file at url to target using Powershell.\n\n    Powershell will validate trust.\n    Raise an exception if the command cannot complete.\n    \"\"\"", "\n", "target", "=", "os", ".", "path", ".", "abspath", "(", "target", ")", "\n", "ps_cmd", "=", "(", "\n", "\"[System.Net.WebRequest]::DefaultWebProxy.Credentials = \"", "\n", "\"[System.Net.CredentialCache]::DefaultCredentials; \"", "\n", "\"(new-object System.Net.WebClient).DownloadFile(%(url)r, %(target)r)\"", "\n", "%", "vars", "(", ")", "\n", ")", "\n", "cmd", "=", "[", "\n", "'powershell'", ",", "\n", "'-Command'", ",", "\n", "ps_cmd", ",", "\n", "]", "\n", "_clean_check", "(", "cmd", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.None.ez_setup.has_powershell": [[236, 247], ["platform.system", "open", "subprocess.check_call"], "function", ["None"], ["", "def", "has_powershell", "(", ")", ":", "\n", "    ", "\"\"\"Determine if Powershell is available.\"\"\"", "\n", "if", "platform", ".", "system", "(", ")", "!=", "'Windows'", ":", "\n", "        ", "return", "False", "\n", "", "cmd", "=", "[", "'powershell'", ",", "'-Command'", ",", "'echo test'", "]", "\n", "with", "open", "(", "os", ".", "path", ".", "devnull", ",", "'wb'", ")", "as", "devnull", ":", "\n", "        ", "try", ":", "\n", "            ", "subprocess", ".", "check_call", "(", "cmd", ",", "stdout", "=", "devnull", ",", "stderr", "=", "devnull", ")", "\n", "", "except", "Exception", ":", "\n", "            ", "return", "False", "\n", "", "", "return", "True", "\n", "", "download_file_powershell", ".", "viable", "=", "has_powershell", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.None.ez_setup.download_file_curl": [[250, 253], ["ez_setup._clean_check"], "function", ["home.repos.pwc.inspect_result.toros-astro_astroalign.None.ez_setup._clean_check"], ["def", "download_file_curl", "(", "url", ",", "target", ")", ":", "\n", "    ", "cmd", "=", "[", "'curl'", ",", "url", ",", "'--silent'", ",", "'--output'", ",", "target", "]", "\n", "_clean_check", "(", "cmd", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.None.ez_setup.has_curl": [[255, 263], ["open", "subprocess.check_call"], "function", ["None"], ["", "def", "has_curl", "(", ")", ":", "\n", "    ", "cmd", "=", "[", "'curl'", ",", "'--version'", "]", "\n", "with", "open", "(", "os", ".", "path", ".", "devnull", ",", "'wb'", ")", "as", "devnull", ":", "\n", "        ", "try", ":", "\n", "            ", "subprocess", ".", "check_call", "(", "cmd", ",", "stdout", "=", "devnull", ",", "stderr", "=", "devnull", ")", "\n", "", "except", "Exception", ":", "\n", "            ", "return", "False", "\n", "", "", "return", "True", "\n", "", "download_file_curl", ".", "viable", "=", "has_curl", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.None.ez_setup.download_file_wget": [[266, 269], ["ez_setup._clean_check"], "function", ["home.repos.pwc.inspect_result.toros-astro_astroalign.None.ez_setup._clean_check"], ["def", "download_file_wget", "(", "url", ",", "target", ")", ":", "\n", "    ", "cmd", "=", "[", "'wget'", ",", "url", ",", "'--quiet'", ",", "'--output-document'", ",", "target", "]", "\n", "_clean_check", "(", "cmd", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.None.ez_setup.has_wget": [[271, 279], ["open", "subprocess.check_call"], "function", ["None"], ["", "def", "has_wget", "(", ")", ":", "\n", "    ", "cmd", "=", "[", "'wget'", ",", "'--version'", "]", "\n", "with", "open", "(", "os", ".", "path", ".", "devnull", ",", "'wb'", ")", "as", "devnull", ":", "\n", "        ", "try", ":", "\n", "            ", "subprocess", ".", "check_call", "(", "cmd", ",", "stdout", "=", "devnull", ",", "stderr", "=", "devnull", ")", "\n", "", "except", "Exception", ":", "\n", "            ", "return", "False", "\n", "", "", "return", "True", "\n", "", "download_file_wget", ".", "viable", "=", "has_wget", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.None.ez_setup.download_file_insecure": [[282, 294], ["urlopen", "urlopen.read", "urlopen.close", "open", "dst.write"], "function", ["None"], ["def", "download_file_insecure", "(", "url", ",", "target", ")", ":", "\n", "    ", "\"\"\"Use Python to download the file, without connection authentication.\"\"\"", "\n", "src", "=", "urlopen", "(", "url", ")", "\n", "try", ":", "\n", "# Read all the data in one block.", "\n", "        ", "data", "=", "src", ".", "read", "(", ")", "\n", "", "finally", ":", "\n", "        ", "src", ".", "close", "(", ")", "\n", "\n", "# Write all the data in one block to avoid creating a partial file.", "\n", "", "with", "open", "(", "target", ",", "\"wb\"", ")", "as", "dst", ":", "\n", "        ", "dst", ".", "write", "(", "data", ")", "\n", "", "", "download_file_insecure", ".", "viable", "=", "lambda", ":", "True", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.None.ez_setup.get_best_downloader": [[297, 306], ["next", "dl.viable"], "function", ["None"], ["def", "get_best_downloader", "(", ")", ":", "\n", "    ", "downloaders", "=", "(", "\n", "download_file_powershell", ",", "\n", "download_file_curl", ",", "\n", "download_file_wget", ",", "\n", "download_file_insecure", ",", "\n", ")", "\n", "viable_downloaders", "=", "(", "dl", "for", "dl", "in", "downloaders", "if", "dl", ".", "viable", "(", ")", ")", "\n", "return", "next", "(", "viable_downloaders", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.None.ez_setup.download_setuptools": [[308, 334], ["os.path.abspath", "os.path.join", "os.path.realpath", "os.path.exists", "distutils.log.warn", "downloader_factory", "downloader_factory."], "function", ["None"], ["", "def", "download_setuptools", "(", "\n", "version", "=", "DEFAULT_VERSION", ",", "download_base", "=", "DEFAULT_URL", ",", "\n", "to_dir", "=", "DEFAULT_SAVE_DIR", ",", "delay", "=", "15", ",", "\n", "downloader_factory", "=", "get_best_downloader", ")", ":", "\n", "    ", "\"\"\"\n    Download setuptools from a specified location and return its filename.\n\n    `version` should be a valid setuptools version number that is available\n    as an sdist for download under the `download_base` URL (which should end\n    with a '/'). `to_dir` is the directory where the egg will be downloaded.\n    `delay` is the number of seconds to pause before an actual download\n    attempt.\n\n    ``downloader_factory`` should be a function taking no arguments and\n    returning a function for downloading a URL to a target.\n    \"\"\"", "\n", "# making sure we use the absolute path", "\n", "to_dir", "=", "os", ".", "path", ".", "abspath", "(", "to_dir", ")", "\n", "zip_name", "=", "\"setuptools-%s.zip\"", "%", "version", "\n", "url", "=", "download_base", "+", "zip_name", "\n", "saveto", "=", "os", ".", "path", ".", "join", "(", "to_dir", ",", "zip_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "saveto", ")", ":", "# Avoid repeated downloads", "\n", "        ", "log", ".", "warn", "(", "\"Downloading %s\"", ",", "url", ")", "\n", "downloader", "=", "downloader_factory", "(", ")", "\n", "downloader", "(", "url", ",", "saveto", ")", "\n", "", "return", "os", ".", "path", ".", "realpath", "(", "saveto", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.None.ez_setup._build_install_args": [[336, 343], ["None"], "function", ["None"], ["", "def", "_build_install_args", "(", "options", ")", ":", "\n", "    ", "\"\"\"\n    Build the arguments to 'python setup.py install' on the setuptools package.\n\n    Returns list of command line arguments.\n    \"\"\"", "\n", "return", "[", "'--user'", "]", "if", "options", ".", "user_install", "else", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.None.ez_setup._parse_args": [[345, 372], ["optparse.OptionParser", "optparse.OptionParser.add_option", "optparse.OptionParser.add_option", "optparse.OptionParser.add_option", "optparse.OptionParser.add_option", "optparse.OptionParser.add_option", "optparse.OptionParser.parse_args"], "function", ["None"], ["", "def", "_parse_args", "(", ")", ":", "\n", "    ", "\"\"\"Parse the command line for options.\"\"\"", "\n", "parser", "=", "optparse", ".", "OptionParser", "(", ")", "\n", "parser", ".", "add_option", "(", "\n", "'--user'", ",", "dest", "=", "'user_install'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'install in user site package (requires Python 2.6 or later)'", ")", "\n", "parser", ".", "add_option", "(", "\n", "'--download-base'", ",", "dest", "=", "'download_base'", ",", "metavar", "=", "\"URL\"", ",", "\n", "default", "=", "DEFAULT_URL", ",", "\n", "help", "=", "'alternative URL from where to download the setuptools package'", ")", "\n", "parser", ".", "add_option", "(", "\n", "'--insecure'", ",", "dest", "=", "'downloader_factory'", ",", "action", "=", "'store_const'", ",", "\n", "const", "=", "lambda", ":", "download_file_insecure", ",", "default", "=", "get_best_downloader", ",", "\n", "help", "=", "'Use internal, non-validating downloader'", "\n", ")", "\n", "parser", ".", "add_option", "(", "\n", "'--version'", ",", "help", "=", "\"Specify which version to download\"", ",", "\n", "default", "=", "DEFAULT_VERSION", ",", "\n", ")", "\n", "parser", ".", "add_option", "(", "\n", "'--to-dir'", ",", "\n", "help", "=", "\"Directory to save (and re-use) package\"", ",", "\n", "default", "=", "DEFAULT_SAVE_DIR", ",", "\n", ")", "\n", "options", ",", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "# positional arguments are ignored", "\n", "return", "options", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.None.ez_setup._download_args": [[374, 381], ["dict"], "function", ["None"], ["", "def", "_download_args", "(", "options", ")", ":", "\n", "    ", "\"\"\"Return args for download_setuptools function from cmdline args.\"\"\"", "\n", "return", "dict", "(", "\n", "version", "=", "options", ".", "version", ",", "\n", "download_base", "=", "options", ".", "download_base", ",", "\n", "downloader_factory", "=", "options", ".", "downloader_factory", ",", "\n", "to_dir", "=", "options", ".", "to_dir", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.None.ez_setup.main": [[384, 389], ["ez_setup._parse_args", "ez_setup.download_setuptools", "ez_setup._install", "ez_setup._build_install_args", "ez_setup._download_args"], "function", ["home.repos.pwc.inspect_result.toros-astro_astroalign.None.ez_setup._parse_args", "home.repos.pwc.inspect_result.toros-astro_astroalign.None.ez_setup.download_setuptools", "home.repos.pwc.inspect_result.toros-astro_astroalign.None.ez_setup._install", "home.repos.pwc.inspect_result.toros-astro_astroalign.None.ez_setup._build_install_args", "home.repos.pwc.inspect_result.toros-astro_astroalign.None.ez_setup._download_args"], ["", "def", "main", "(", ")", ":", "\n", "    ", "\"\"\"Install or upgrade setuptools and EasyInstall.\"\"\"", "\n", "options", "=", "_parse_args", "(", ")", "\n", "archive", "=", "download_setuptools", "(", "**", "_download_args", "(", "options", ")", ")", "\n", "return", "_install", "(", "archive", ",", "_build_install_args", "(", "options", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.None.setup.run": [[79, 92], ["setuptools.setup"], "function", ["None"], ["def", "run", "(", ")", ":", "\n", "    ", "setup", "(", "\n", "name", "=", "\"astroalign\"", ",", "\n", "version", "=", "AA_VERSION", ",", "\n", "description", "=", "\"Astrometric Alignment of Images\"", ",", "\n", "long_description", "=", "LONG_DESCRIPTION", ",", "\n", "long_description_content_type", "=", "\"text/markdown\"", ",", "\n", "author", "=", "\"Martin Beroiz\"", ",", "\n", "author_email", "=", "\"martinberoiz@gmail.com\"", ",", "\n", "url", "=", "\"https://astroalign.readthedocs.io/\"", ",", "\n", "py_modules", "=", "[", "\"astroalign\"", ",", "\"ez_setup\"", "]", ",", "\n", "install_requires", "=", "REQUIREMENTS", ",", "\n", "test_suite", "=", "\"tests\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign._MatchTransform.__init__": [[170, 173], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "source", ",", "target", ")", ":", "\n", "        ", "self", ".", "source", "=", "source", "\n", "self", ".", "target", "=", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign._MatchTransform.fit": [[174, 189], ["skimage.transform.estimate_transform", "data.reshape"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"\n        Return the best 2D similarity transform from the points given in data.\n\n        data: N sets of similar corresponding triangles.\n            3 indices for a triangle in ref\n            and the 3 indices for the corresponding triangle in target;\n            arranged in a (N, 3, 2) array.\n        \"\"\"", "\n", "d1", ",", "d2", ",", "d3", "=", "data", ".", "shape", "\n", "s", ",", "d", "=", "data", ".", "reshape", "(", "d1", "*", "d2", ",", "d3", ")", ".", "T", "\n", "approx_t", "=", "estimate_transform", "(", "\n", "\"similarity\"", ",", "self", ".", "source", "[", "s", "]", ",", "self", ".", "target", "[", "d", "]", "\n", ")", "\n", "return", "approx_t", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign._MatchTransform.get_error": [[190, 198], ["approx_t.residuals().reshape", "approx_t.residuals().reshape.max", "data.reshape", "approx_t.residuals"], "methods", ["None"], ["", "def", "get_error", "(", "self", ",", "data", ",", "approx_t", ")", ":", "\n", "        ", "d1", ",", "d2", ",", "d3", "=", "data", ".", "shape", "\n", "s", ",", "d", "=", "data", ".", "reshape", "(", "d1", "*", "d2", ",", "d3", ")", ".", "T", "\n", "resid", "=", "approx_t", ".", "residuals", "(", "self", ".", "source", "[", "s", "]", ",", "self", ".", "target", "[", "d", "]", ")", ".", "reshape", "(", "\n", "d1", ",", "d2", "\n", ")", "\n", "error", "=", "resid", ".", "max", "(", "axis", "=", "1", ")", "\n", "return", "error", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign._invariantfeatures": [[87, 97], ["numpy.sort", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["None"], ["def", "_invariantfeatures", "(", "x1", ",", "x2", ",", "x3", ")", ":", "\n", "    ", "\"Given 3 points x1, x2, x3, return the invariant features for the set.\"", "\n", "sides", "=", "_np", ".", "sort", "(", "\n", "[", "\n", "_np", ".", "linalg", ".", "norm", "(", "x1", "-", "x2", ")", ",", "\n", "_np", ".", "linalg", ".", "norm", "(", "x2", "-", "x3", ")", ",", "\n", "_np", ".", "linalg", ".", "norm", "(", "x1", "-", "x3", ")", ",", "\n", "]", "\n", ")", "\n", "return", "[", "sides", "[", "2", "]", "/", "sides", "[", "1", "]", ",", "sides", "[", "1", "]", "/", "sides", "[", "0", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign._arrangetriplet": [[99, 125], ["numpy.array", "list", "numpy.argsort", "Counter", "Counter", "Counter", "numpy.array", "map", "side_ind[].flatten", "side_ind[].flatten", "side_ind[].flatten", "Counter.most_common", "Counter.most_common", "Counter.most_common"], "function", ["None"], ["", "def", "_arrangetriplet", "(", "sources", ",", "vertex_indices", ")", ":", "\n", "    ", "\"\"\"Return vertex_indices ordered in an (a, b, c) form where:\n      a is the vertex defined by L1 & L2\n      b is the vertex defined by L2 & L3\n      c is the vertex defined by L3 & L1\n    and L1 < L2 < L3 are the sides of the triangle\n    defined by vertex_indices.\"\"\"", "\n", "ind1", ",", "ind2", ",", "ind3", "=", "vertex_indices", "\n", "x1", ",", "x2", ",", "x3", "=", "sources", "[", "vertex_indices", "]", "\n", "\n", "side_ind", "=", "_np", ".", "array", "(", "[", "(", "ind1", ",", "ind2", ")", ",", "(", "ind2", ",", "ind3", ")", ",", "(", "ind3", ",", "ind1", ")", "]", ")", "\n", "side_lengths", "=", "list", "(", "map", "(", "_np", ".", "linalg", ".", "norm", ",", "(", "x1", "-", "x2", ",", "x2", "-", "x3", ",", "x3", "-", "x1", ")", ")", ")", "\n", "l1_ind", ",", "l2_ind", ",", "l3_ind", "=", "_np", ".", "argsort", "(", "side_lengths", ")", "\n", "\n", "# the most common vertex in the list of vertices for two sides is the", "\n", "# point at which they meet.", "\n", "from", "collections", "import", "Counter", "\n", "\n", "count", "=", "Counter", "(", "side_ind", "[", "[", "l1_ind", ",", "l2_ind", "]", "]", ".", "flatten", "(", ")", ")", "\n", "a", "=", "count", ".", "most_common", "(", "1", ")", "[", "0", "]", "[", "0", "]", "\n", "count", "=", "Counter", "(", "side_ind", "[", "[", "l2_ind", ",", "l3_ind", "]", "]", ".", "flatten", "(", ")", ")", "\n", "b", "=", "count", ".", "most_common", "(", "1", ")", "[", "0", "]", "[", "0", "]", "\n", "count", "=", "Counter", "(", "side_ind", "[", "[", "l3_ind", ",", "l1_ind", "]", "]", ".", "flatten", "(", ")", ")", "\n", "c", "=", "count", ".", "most_common", "(", "1", ")", "[", "0", "]", "[", "0", "]", "\n", "\n", "return", "_np", ".", "array", "(", "[", "a", ",", "b", ",", "c", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign._generate_invariants": [[127, 167], ["partial", "KDTree", "min", "len", "KDTree.query", "triang_vrtx.extend", "inv.extend", "numpy.array", "numpy.array", "partial.", "enumerate", "combinations", "astroalign._invariantfeatures", "list"], "function", ["home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign._invariantfeatures"], ["", "def", "_generate_invariants", "(", "sources", ")", ":", "\n", "    ", "\"\"\"Return an array of (unique) invariants derived from the array `sources`.\n    Return an array of the indices of `sources` that correspond to each\n    invariant, arranged as described in _arrangetriplet.\"\"\"", "\n", "from", "scipy", ".", "spatial", "import", "KDTree", "\n", "from", "itertools", "import", "combinations", "\n", "from", "functools", "import", "partial", "\n", "\n", "arrange", "=", "partial", "(", "_arrangetriplet", ",", "sources", "=", "sources", ")", "\n", "\n", "inv", "=", "[", "]", "\n", "triang_vrtx", "=", "[", "]", "\n", "coordtree", "=", "KDTree", "(", "sources", ")", "\n", "# The number of nearest neighbors to request (to work with few sources)", "\n", "knn", "=", "min", "(", "len", "(", "sources", ")", ",", "NUM_NEAREST_NEIGHBORS", ")", "\n", "for", "asrc", "in", "sources", ":", "\n", "        ", "__", ",", "indx", "=", "coordtree", ".", "query", "(", "asrc", ",", "knn", ")", "\n", "\n", "# Generate all possible triangles with the 5 indx provided, and store", "\n", "# them with the order (a, b, c) defined in _arrangetriplet", "\n", "all_asterism_triang", "=", "[", "\n", "arrange", "(", "vertex_indices", "=", "list", "(", "cmb", ")", ")", "for", "cmb", "in", "combinations", "(", "indx", ",", "3", ")", "\n", "]", "\n", "triang_vrtx", ".", "extend", "(", "all_asterism_triang", ")", "\n", "\n", "inv", ".", "extend", "(", "\n", "[", "\n", "_invariantfeatures", "(", "*", "sources", "[", "triplet", "]", ")", "\n", "for", "triplet", "in", "all_asterism_triang", "\n", "]", "\n", ")", "\n", "\n", "# Remove here all possible duplicate triangles", "\n", "", "uniq_ind", "=", "[", "\n", "pos", "for", "(", "pos", ",", "elem", ")", "in", "enumerate", "(", "inv", ")", "if", "elem", "not", "in", "inv", "[", "pos", "+", "1", ":", "]", "\n", "]", "\n", "inv_uniq", "=", "_np", ".", "array", "(", "inv", ")", "[", "uniq_ind", "]", "\n", "triang_vrtx_uniq", "=", "_np", ".", "array", "(", "triang_vrtx", ")", "[", "uniq_ind", "]", "\n", "\n", "return", "inv_uniq", ",", "triang_vrtx_uniq", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign._data": [[200, 205], ["hasattr", "isinstance"], "function", ["None"], ["", "", "def", "_data", "(", "image", ")", ":", "\n", "    ", "if", "hasattr", "(", "image", ",", "\"data\"", ")", "and", "isinstance", "(", "image", ".", "data", ",", "_np", ".", "ndarray", ")", ":", "\n", "        ", "return", "image", ".", "data", "\n", "", "else", ":", "\n", "        ", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign._bw": [[207, 212], ["numpy.mean"], "function", ["None"], ["", "", "def", "_bw", "(", "image", ")", ":", "\n", "    ", "\"Return a 2D numpy array for an array of arbitrary channels\"", "\n", "if", "image", ".", "ndim", "==", "2", ":", "\n", "        ", "return", "image", "\n", "", "return", "_np", ".", "mean", "(", "image", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign._shape": [[214, 220], ["None"], "function", ["None"], ["", "def", "_shape", "(", "image", ")", ":", "\n", "    ", "\"Return a 2D shape for the image, ignoring channel info\"", "\n", "if", "image", ".", "ndim", "==", "2", ":", "\n", "        ", "return", "image", ".", "shape", "\n", "", "h", ",", "w", ",", "ch", "=", "image", ".", "shape", "\n", "return", "h", ",", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign.find_transform": [[222, 362], ["astroalign._generate_invariants", "KDTree", "astroalign._generate_invariants", "KDTree", "KDTree.query_ball_tree", "zip", "numpy.array", "astroalign._MatchTransform", "len", "max", "triangle_inliers.reshape", "set", "numpy.array", "len", "ValueError", "len", "ValueError", "min", "astroalign._MatchTransform.fit", "numpy.arange", "astroalign._ransac", "skimage.transform.matrix_transform", "numpy.linalg.norm", "len", "TypeError", "len", "TypeError", "_np.array.append", "int", "len", "len", "tuple", "numpy.array", "astroalign._find_sources", "numpy.array", "astroalign._find_sources", "list", "len", "len", "inl_dict.items", "astroalign._data", "astroalign._bw", "astroalign._data", "astroalign._bw", "zip", "astroalign._data", "astroalign._data"], "function", ["home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign._generate_invariants", "home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign._generate_invariants", "home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign._MatchTransform.fit", "home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign._ransac", "home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign._find_sources", "home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign._find_sources", "home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign._data", "home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign._bw", "home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign._data", "home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign._bw", "home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign._data", "home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign._data"], ["", "def", "find_transform", "(", "\n", "source", ",", "target", ",", "max_control_points", "=", "50", ",", "detection_sigma", "=", "5", ",", "min_area", "=", "5", "\n", ")", ":", "\n", "    ", "\"\"\"Estimate the transform between ``source`` and ``target``.\n\n    Return a SimilarityTransform object ``T`` that maps pixel x, y indices from\n    the source image s = (x, y) into the target (destination) image t = (x, y).\n    T contains parameters of the tranformation: ``T.rotation``,\n    ``T.translation``, ``T.scale``, ``T.params``.\n\n    Args:\n        source (array-like): Either a NumPy, CCData or NDData array of the\n            source image to be transformed or an interable of (x, y)\n            coordinates of the target control points.\n        target (array-like): Either a NumPy, CCData or NDData array of the\n            target (destination) image or an interable of (x, y) coordinates of\n            the target control points.\n        max_control_points: The maximum number of control point-sources to find\n            the transformation.\n        detection_sigma: Factor of background std-dev above which is considered\n            a detection. This value is ignored if input are not images.\n        min_area: Minimum number of connected pixels to be considered a source.\n            This value is ignored if input are not images.\n\n    Returns:\n        The transformation object and a tuple of corresponding star positions\n        in source and target.::\n\n            T, (source_pos_array, target_pos_array)\n\n    Raises:\n        TypeError: If input type of ``source`` or ``target`` is not supported.\n        ValueError: If it cannot find more than 3 stars on any input.\n    \"\"\"", "\n", "from", "scipy", ".", "spatial", "import", "KDTree", "\n", "\n", "try", ":", "\n", "        ", "if", "len", "(", "_data", "(", "source", ")", "[", "0", "]", ")", "==", "2", ":", "\n", "# Assume it's a list of (x, y) pairs", "\n", "            ", "source_controlp", "=", "_np", ".", "array", "(", "source", ")", "[", ":", "max_control_points", "]", "\n", "", "else", ":", "\n", "# Assume it's a 2D image", "\n", "            ", "source_controlp", "=", "_find_sources", "(", "\n", "_bw", "(", "_data", "(", "source", ")", ")", ",", "\n", "detection_sigma", "=", "detection_sigma", ",", "\n", "min_area", "=", "min_area", ",", "\n", ")", "[", ":", "max_control_points", "]", "\n", "", "", "except", "Exception", ":", "\n", "        ", "raise", "TypeError", "(", "\"Input type for source not supported.\"", ")", "\n", "\n", "", "try", ":", "\n", "        ", "if", "len", "(", "_data", "(", "target", ")", "[", "0", "]", ")", "==", "2", ":", "\n", "# Assume it's a list of (x, y) pairs", "\n", "            ", "target_controlp", "=", "_np", ".", "array", "(", "target", ")", "[", ":", "max_control_points", "]", "\n", "", "else", ":", "\n", "# Assume it's a 2D image", "\n", "            ", "target_controlp", "=", "_find_sources", "(", "\n", "_bw", "(", "_data", "(", "target", ")", ")", ",", "\n", "detection_sigma", "=", "detection_sigma", ",", "\n", "min_area", "=", "min_area", ",", "\n", ")", "[", ":", "max_control_points", "]", "\n", "", "", "except", "Exception", ":", "\n", "        ", "raise", "TypeError", "(", "\"Input type for target not supported.\"", ")", "\n", "\n", "# Check for low number of reference points", "\n", "", "if", "len", "(", "source_controlp", ")", "<", "3", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"Reference stars in source image are less than the \"", "\n", "\"minimum value (3).\"", "\n", ")", "\n", "", "if", "len", "(", "target_controlp", ")", "<", "3", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"Reference stars in target image are less than the \"", "\n", "\"minimum value (3).\"", "\n", ")", "\n", "\n", "", "source_invariants", ",", "source_asterisms", "=", "_generate_invariants", "(", "source_controlp", ")", "\n", "source_invariant_tree", "=", "KDTree", "(", "source_invariants", ")", "\n", "\n", "target_invariants", ",", "target_asterisms", "=", "_generate_invariants", "(", "target_controlp", ")", "\n", "target_invariant_tree", "=", "KDTree", "(", "target_invariants", ")", "\n", "\n", "# r = 0.1 is the maximum search distance, 0.1 is an empirical value that", "\n", "# returns about the same number of matches than inputs", "\n", "# matches_list is a list of lists such that for each element", "\n", "# source_invariant_tree.data[i], matches_list[i] is a list of the indices", "\n", "# of its neighbors in target_invariant_tree.data", "\n", "matches_list", "=", "source_invariant_tree", ".", "query_ball_tree", "(", "\n", "target_invariant_tree", ",", "r", "=", "0.1", "\n", ")", "\n", "\n", "# matches unravels the previous list of matches into pairs of source and", "\n", "# target control point matches.", "\n", "# matches is a (N, 3, 2) array. N sets of similar corresponding triangles.", "\n", "# 3 indices for a triangle in ref", "\n", "# and the 3 indices for the corresponding triangle in target;", "\n", "matches", "=", "[", "]", "\n", "# t1 is an asterism in source, t2 in target", "\n", "for", "t1", ",", "t2_list", "in", "zip", "(", "source_asterisms", ",", "matches_list", ")", ":", "\n", "        ", "for", "t2", "in", "target_asterisms", "[", "t2_list", "]", ":", "\n", "            ", "matches", ".", "append", "(", "list", "(", "zip", "(", "t1", ",", "t2", ")", ")", ")", "\n", "", "", "matches", "=", "_np", ".", "array", "(", "matches", ")", "\n", "\n", "inv_model", "=", "_MatchTransform", "(", "source_controlp", ",", "target_controlp", ")", "\n", "n_invariants", "=", "len", "(", "matches", ")", "\n", "max_iter", "=", "n_invariants", "\n", "# Set the minimum matches to be between 1 and 10 asterisms", "\n", "min_matches", "=", "max", "(", "1", ",", "min", "(", "10", ",", "int", "(", "n_invariants", "*", "MIN_MATCHES_FRACTION", ")", ")", ")", "\n", "if", "(", "len", "(", "source_controlp", ")", "==", "3", "or", "len", "(", "target_controlp", ")", "==", "3", ")", "and", "len", "(", "\n", "matches", "\n", ")", "==", "1", ":", "\n", "        ", "best_t", "=", "inv_model", ".", "fit", "(", "matches", ")", "\n", "inlier_ind", "=", "_np", ".", "arange", "(", "len", "(", "matches", ")", ")", "# All of the indices", "\n", "", "else", ":", "\n", "        ", "best_t", ",", "inlier_ind", "=", "_ransac", "(", "\n", "matches", ",", "inv_model", ",", "1", ",", "max_iter", ",", "PIXEL_TOL", ",", "min_matches", "\n", ")", "\n", "", "triangle_inliers", "=", "matches", "[", "inlier_ind", "]", "\n", "d1", ",", "d2", ",", "d3", "=", "triangle_inliers", ".", "shape", "\n", "inl_arr", "=", "triangle_inliers", ".", "reshape", "(", "d1", "*", "d2", ",", "d3", ")", "\n", "inl_unique", "=", "set", "(", "tuple", "(", "pair", ")", "for", "pair", "in", "inl_arr", ")", "\n", "# In the next, multiple assignements to the same source point s are removed", "\n", "# We keep the pair (s, t) with the lowest reprojection error.", "\n", "inl_dict", "=", "{", "}", "\n", "for", "s_i", ",", "t_i", "in", "inl_unique", ":", "\n", "# calculate error", "\n", "        ", "s_vertex", "=", "source_controlp", "[", "s_i", "]", "\n", "t_vertex", "=", "target_controlp", "[", "t_i", "]", "\n", "t_vertex_pred", "=", "matrix_transform", "(", "s_vertex", ",", "best_t", ".", "params", ")", "\n", "error", "=", "_np", ".", "linalg", ".", "norm", "(", "t_vertex_pred", "-", "t_vertex", ")", "\n", "\n", "# if s_i not in dict, or if its error is smaller than previous error", "\n", "if", "s_i", "not", "in", "inl_dict", "or", "(", "error", "<", "inl_dict", "[", "s_i", "]", "[", "1", "]", ")", ":", "\n", "            ", "inl_dict", "[", "s_i", "]", "=", "(", "t_i", ",", "error", ")", "\n", "", "", "inl_arr_unique", "=", "_np", ".", "array", "(", "\n", "[", "[", "s_i", ",", "t_i", "]", "for", "s_i", ",", "(", "t_i", ",", "e", ")", "in", "inl_dict", ".", "items", "(", ")", "]", "\n", ")", "\n", "s", ",", "d", "=", "inl_arr_unique", ".", "T", "\n", "\n", "return", "best_t", ",", "(", "source_controlp", "[", "s", "]", ",", "target_controlp", "[", "d", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign.apply_transform": [[364, 427], ["astroalign._data", "warp", "warp", "astroalign._data", "numpy.zeros", "hasattr", "numpy.array", "numpy.median", "astroalign._shape", "warp", "_np.array.astype"], "function", ["home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign._data", "home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign._data", "home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign._shape"], ["", "def", "apply_transform", "(", "\n", "transform", ",", "source", ",", "target", ",", "fill_value", "=", "None", ",", "propagate_mask", "=", "False", "\n", ")", ":", "\n", "    ", "\"\"\"Applies the transformation ``transform`` to ``source``.\n\n    The output image will have the same shape as ``target``.\n\n    Args:\n        transform: A scikit-image ``SimilarityTransform`` object.\n        source (numpy array): A 2D NumPy, CCData or NDData array of the source\n            image to be transformed.\n        target (numpy array): A 2D NumPy, CCData or NDData array of the target\n            image. Only used to set the output image shape.\n        fill_value (float): A value to fill in the areas of aligned_image\n            where footprint == True.\n        propagate_mask (bool): Wether to propagate the mask in source.mask\n            onto footprint.\n\n    Return:\n        A tuple (aligned_image, footprint).\n        aligned_image is a numpy 2D array of the transformed source\n        footprint is a mask 2D array with True on the regions\n        with no pixel information.\n    \"\"\"", "\n", "from", "skimage", ".", "transform", "import", "warp", "\n", "\n", "source_data", "=", "_data", "(", "source", ")", "\n", "target_shape", "=", "_data", "(", "target", ")", ".", "shape", "\n", "\n", "aligned_image", "=", "warp", "(", "\n", "source_data", ",", "\n", "inverse_map", "=", "transform", ".", "inverse", ",", "\n", "output_shape", "=", "target_shape", ",", "\n", "order", "=", "3", ",", "\n", "mode", "=", "\"constant\"", ",", "\n", "cval", "=", "_np", ".", "median", "(", "source_data", ")", ",", "\n", "clip", "=", "True", ",", "\n", "preserve_range", "=", "True", ",", "\n", ")", "\n", "\n", "footprint", "=", "warp", "(", "\n", "_np", ".", "zeros", "(", "_shape", "(", "source_data", ")", ",", "dtype", "=", "\"float32\"", ")", ",", "\n", "inverse_map", "=", "transform", ".", "inverse", ",", "\n", "output_shape", "=", "target_shape", ",", "\n", "cval", "=", "1.0", ",", "\n", ")", "\n", "footprint", "=", "footprint", ">", "0.4", "\n", "\n", "if", "hasattr", "(", "source", ",", "\"mask\"", ")", "and", "propagate_mask", ":", "\n", "        ", "source_mask", "=", "_np", ".", "array", "(", "source", ".", "mask", ")", "\n", "if", "source_mask", ".", "shape", "==", "source_data", ".", "shape", ":", "\n", "            ", "source_mask_rot", "=", "warp", "(", "\n", "source_mask", ".", "astype", "(", "\"float32\"", ")", ",", "\n", "inverse_map", "=", "transform", ".", "inverse", ",", "\n", "output_shape", "=", "target_shape", ",", "\n", "cval", "=", "1.0", ",", "\n", ")", "\n", "source_mask_rot", "=", "source_mask_rot", ">", "0.4", "\n", "footprint", "=", "footprint", "|", "source_mask_rot", "\n", "", "", "if", "fill_value", "is", "not", "None", ":", "\n", "        ", "aligned_image", "[", "footprint", "]", "=", "fill_value", "\n", "\n", "", "return", "aligned_image", ",", "footprint", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign.register": [[429, 474], ["astroalign.find_transform", "astroalign.apply_transform"], "function", ["home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign.find_transform", "home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign.apply_transform"], ["", "def", "register", "(", "\n", "source", ",", "\n", "target", ",", "\n", "fill_value", "=", "None", ",", "\n", "propagate_mask", "=", "False", ",", "\n", "max_control_points", "=", "50", ",", "\n", "detection_sigma", "=", "5", ",", "\n", "min_area", "=", "5", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Transform ``source`` to coincide pixel to pixel with ``target``.\n\n    Args:\n        source (numpy array): A 2D NumPy, CCData or NDData array of the source\n            image to be transformed.\n        target (numpy array): A 2D NumPy, CCData or NDData array of the target\n            image. Used to set the output image shape as well.\n        fill_value (float): A value to fill in the areas of aligned_image\n            where footprint == True.\n        propagate_mask (bool): Wether to propagate the mask in source.mask\n            onto footprint.\n        max_control_points: The maximum number of control point-sources to find\n            the transformation.\n        detection_sigma: Factor of background std-dev above which is considered\n            a detection.\n        min_area: Minimum number of connected pixels to be considered a source.\n\n    Return:\n        A tuple (aligned_image, footprint).\n        aligned_image is a numpy 2D array of the transformed source\n        footprint is a mask 2D array with True on the regions\n        with no pixel information.\n\n\n    \"\"\"", "\n", "t", ",", "__", "=", "find_transform", "(", "\n", "source", "=", "source", ",", "\n", "target", "=", "target", ",", "\n", "max_control_points", "=", "max_control_points", ",", "\n", "detection_sigma", "=", "detection_sigma", ",", "\n", "min_area", "=", "min_area", ",", "\n", ")", "\n", "aligned_image", ",", "footprint", "=", "apply_transform", "(", "\n", "t", ",", "source", ",", "target", ",", "fill_value", ",", "propagate_mask", "\n", ")", "\n", "return", "aligned_image", ",", "footprint", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign._find_sources": [[476, 490], ["isinstance", "sep.Background", "sep.extract", "sep.extract.sort", "numpy.array", "img.filled().astype", "img.astype", "sep.Background.back", "img.filled", "numpy.median"], "function", ["None"], ["", "def", "_find_sources", "(", "img", ",", "detection_sigma", "=", "5", ",", "min_area", "=", "5", ")", ":", "\n", "    ", "\"Return sources (x, y) sorted by brightness.\"", "\n", "\n", "import", "sep", "\n", "\n", "if", "isinstance", "(", "img", ",", "_np", ".", "ma", ".", "MaskedArray", ")", ":", "\n", "        ", "image", "=", "img", ".", "filled", "(", "fill_value", "=", "_np", ".", "median", "(", "img", ")", ")", ".", "astype", "(", "\"float32\"", ")", "\n", "", "else", ":", "\n", "        ", "image", "=", "img", ".", "astype", "(", "\"float32\"", ")", "\n", "", "bkg", "=", "sep", ".", "Background", "(", "image", ")", "\n", "thresh", "=", "detection_sigma", "*", "bkg", ".", "globalrms", "\n", "sources", "=", "sep", ".", "extract", "(", "image", "-", "bkg", ".", "back", "(", ")", ",", "thresh", ",", "minarea", "=", "min_area", ")", "\n", "sources", ".", "sort", "(", "order", "=", "\"flux\"", ")", "\n", "return", "_np", ".", "array", "(", "[", "[", "asrc", "[", "\"x\"", "]", ",", "asrc", "[", "\"y\"", "]", "]", "for", "asrc", "in", "sources", "[", ":", ":", "-", "1", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign._ransac": [[530, 579], ["numpy.arange", "numpy.random.shuffle", "model.fit", "model.get_error", "astroalign.MaxIterError", "len", "numpy.concatenate", "model.fit", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign._MatchTransform.fit", "home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign._MatchTransform.get_error", "home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign._MatchTransform.fit"], ["", "def", "_ransac", "(", "data", ",", "model", ",", "min_data_points", ",", "max_iter", ",", "thresh", ",", "min_matches", ")", ":", "\n", "    ", "\"\"\"fit model parameters to data using the RANSAC algorithm\n\n    This implementation written from pseudocode found at\n    http://en.wikipedia.org/w/index.php?title=RANSAC&oldid=116358182\n\n    Given:\n        data: a set of data points\n        model: a model that can be fitted to data points\n        min_data_points: the minimum number of data values required to fit the\n            model\n        max_iter: the maximum number of iterations allowed in the algorithm\n        thresh: a threshold value to determine when a data point fits a model\n        min_matches: the min number of matches required to assert that a model\n            fits well to data\n    Return:\n        bestfit: model parameters which best fit the data (or nil if no good\n                  model is found)\"\"\"", "\n", "iterations", "=", "0", "\n", "bestfit", "=", "None", "\n", "best_inlier_idxs", "=", "None", "\n", "n_data", "=", "data", ".", "shape", "[", "0", "]", "\n", "n", "=", "min_data_points", "\n", "all_idxs", "=", "_np", ".", "arange", "(", "n_data", ")", "\n", "\n", "while", "iterations", "<", "max_iter", ":", "\n", "# Partition indices into two random subsets", "\n", "        ", "_np", ".", "random", ".", "shuffle", "(", "all_idxs", ")", "\n", "maybe_idxs", ",", "test_idxs", "=", "all_idxs", "[", ":", "n", "]", ",", "all_idxs", "[", "n", ":", "]", "\n", "maybeinliers", "=", "data", "[", "maybe_idxs", ",", ":", "]", "\n", "test_points", "=", "data", "[", "test_idxs", ",", ":", "]", "\n", "maybemodel", "=", "model", ".", "fit", "(", "maybeinliers", ")", "\n", "test_err", "=", "model", ".", "get_error", "(", "test_points", ",", "maybemodel", ")", "\n", "# select indices of rows with accepted points", "\n", "also_idxs", "=", "test_idxs", "[", "test_err", "<", "thresh", "]", "\n", "alsoinliers", "=", "data", "[", "also_idxs", ",", ":", "]", "\n", "if", "len", "(", "alsoinliers", ")", ">=", "min_matches", ":", "\n", "            ", "betterdata", "=", "_np", ".", "concatenate", "(", "(", "maybeinliers", ",", "alsoinliers", ")", ")", "\n", "bestfit", "=", "model", ".", "fit", "(", "betterdata", ")", "\n", "best_inlier_idxs", "=", "_np", ".", "concatenate", "(", "(", "maybe_idxs", ",", "also_idxs", ")", ")", "\n", "break", "\n", "", "iterations", "+=", "1", "\n", "", "if", "bestfit", "is", "None", ":", "\n", "        ", "raise", "MaxIterError", "(", "\n", "\"Max iterations exceeded while trying to find \"", "\n", "\"acceptable transformation.\"", "\n", ")", "\n", "\n", "", "return", "bestfit", ",", "best_inlier_idxs", "\n", "", ""]], "home.repos.pwc.inspect_result.toros-astro_astroalign.benchmarks.time_regression.CLI.__init__": [[205, 312], ["argparse.ArgumentParser", "time_regression.CLI._parser.set_defaults", "time_regression.CLI._parser.add_argument", "time_regression.CLI._parser.add_subparsers", "time_regression.CLI.add_parser", "time_regression.CLI.add_parser.set_defaults", "time_regression.CLI.add_parser.add_argument", "time_regression.CLI.add_parser.add_argument", "time_regression.CLI.add_parser.add_argument", "time_regression.CLI.add_parser.add_argument", "time_regression.CLI.add_parser.add_argument", "time_regression.CLI.add_parser.add_argument", "time_regression.CLI.add_parser.add_argument", "time_regression.CLI.add_parser.add_argument", "time_regression.CLI.add_parser.add_argument", "time_regression.CLI.add_parser.add_argument", "time_regression.CLI.add_parser", "time_regression.CLI.add_parser.set_defaults", "time_regression.CLI.add_parser.add_argument", "time_regression.CLI.add_parser", "time_regression.CLI.add_parser.set_defaults", "time_regression.CLI.add_parser.add_argument", "time_regression.CLI.add_parser.add_argument", "time_regression.CLI.add_parser.add_argument", "max", "min", "argparse.FileType", "argparse.FileType", "argparse.FileType", "time_regression.CLI.parser.print_usage", "max", "max"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "\"Astroalign time benchmark tool based on timeit\"", ")", "\n", "self", ".", "_parser", ".", "set_defaults", "(", "\n", "callback", "=", "lambda", "ns", ":", "self", ".", "parser", ".", "print_usage", "(", ")", ")", "\n", "\n", "self", ".", "_parser", ".", "add_argument", "(", "\n", "'--version'", ",", "action", "=", "'version'", ",", "version", "=", "'%(prog)s 2019.10'", ")", "\n", "\n", "subparsers", "=", "self", ".", "_parser", ".", "add_subparsers", "(", ")", "\n", "\n", "# =====================================================================", "\n", "# benchmark subparser", "\n", "# =====================================================================", "\n", "\n", "benchmark", "=", "subparsers", ".", "add_parser", "(", "\n", "\"benchmark\"", ",", "\n", "help", "=", "\"Execute and collect the regression benchmark of astroalign\"", ")", "\n", "benchmark", ".", "set_defaults", "(", "callback", "=", "self", ".", "benchmark_command", ")", "\n", "\n", "benchmark", ".", "add_argument", "(", "\n", "\"--max\"", ",", "dest", "=", "\"max_size\"", ",", "type", "=", "int", ",", "default", "=", "max", "(", "SIZES", ")", ",", "\n", "help", "=", "(", "\"The size in pixels of the bigger square image. \"", "\n", "f\"(defaults={max(SIZES)}).\"", ")", ")", "\n", "\n", "benchmark", ".", "add_argument", "(", "\n", "\"--min\"", ",", "dest", "=", "\"min_size\"", ",", "type", "=", "int", ",", "default", "=", "min", "(", "SIZES", ")", ",", "\n", "help", "=", "(", "\"The size in pixels of the smallest square image. \"", "\n", "f\"(defaults={max(SIZES)}).\"", ")", ")", "\n", "\n", "benchmark", ".", "add_argument", "(", "\n", "\"--step\"", ",", "dest", "=", "\"step_size\"", ",", "type", "=", "int", ",", "default", "=", "STEP", ",", "\n", "help", "=", "f\"The size between every image (defaults={STEP}).\"", ")", "\n", "\n", "benchmark", ".", "add_argument", "(", "\n", "\"--stars\"", ",", "dest", "=", "\"stars\"", ",", "type", "=", "int", ",", "default", "=", "STARS", ",", "\n", "help", "=", "(", "\"The total numbers of stars in the image \"", "\n", "f\"(defaults={STARS}).\"", ")", ")", "\n", "\n", "benchmark", ".", "add_argument", "(", "\n", "\"--noise\"", ",", "dest", "=", "\"noise\"", ",", "type", "=", "int", ",", "default", "=", "NOISE", ",", "\n", "help", "=", "f\"lambda parameter for poisson noise (default={NOISE})\"", ")", "\n", "\n", "benchmark", ".", "add_argument", "(", "\n", "\"--number\"", ",", "dest", "=", "\"comb_number\"", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "(", "\"How many random images pairs must be created for one \"", "\n", "f\"size (default={COMB_NUMBER}).\"", ")", ")", "\n", "\n", "benchmark", ".", "add_argument", "(", "\n", "\"--seed\"", ",", "dest", "=", "\"seed\"", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "(", "\"Random seed used to initialize the pseudo-random number \"", "\n", "\"generator. if seed is None, then random-state will try to \"", "\n", "\"read data from /dev/urandom (or the Windows analogue) if \"", "\n", "\"available or seed from the clock otherwise \"", "\n", "\"(default=None).\"", ")", ")", "\n", "\n", "benchmark", ".", "add_argument", "(", "\n", "\"--repeats\"", ",", "dest", "=", "\"repeats\"", ",", "type", "=", "int", ",", "default", "=", "REPEATS", ",", "\n", "help", "=", "(", "\"How many measurements must be taken for every image pair. \"", "\n", "\"The final 'time' is the lower bound of all the times. \"", "\n", "\"Docs: https://docs.python.org/3.7/library/timeit.html\"", ")", ")", "\n", "\n", "benchmark", ".", "add_argument", "(", "\n", "\"--jobs\"", ",", "dest", "=", "\"n_jobs\"", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "\n", "help", "=", "(", "\"The number of CPU to run the benchmars. \"", "\n", "\"-1 uses all the available CPUS (default=-1)\"", ")", ")", "\n", "\n", "benchmark", ".", "add_argument", "(", "\n", "\"--out\"", ",", "\"-o\"", ",", "dest", "=", "\"out\"", ",", "required", "=", "True", ",", "\n", "type", "=", "argparse", ".", "FileType", "(", "'w'", ")", ",", "\n", "help", "=", "\"Output file path. The data was stored in CSV format\"", ")", "\n", "\n", "# =====================================================================", "\n", "# describe subparser", "\n", "# =====================================================================", "\n", "\n", "describe", "=", "subparsers", ".", "add_parser", "(", "\n", "\"describe\"", ",", "\n", "help", "=", "\"Show a resume and (optionally) of the benchmark results\"", ")", "\n", "describe", ".", "set_defaults", "(", "callback", "=", "self", ".", "describe_command", ")", "\n", "\n", "describe", ".", "add_argument", "(", "\n", "\"--file\"", ",", "\"-f\"", ",", "dest", "=", "\"file\"", ",", "required", "=", "True", ",", "\n", "type", "=", "argparse", ".", "FileType", "(", "'r'", ")", ",", "\n", "help", "=", "\"File path of the time benchmark data in CSV format\"", ")", "\n", "\n", "# =====================================================================", "\n", "# plot subparser", "\n", "# =====================================================================", "\n", "\n", "plot", "=", "subparsers", ".", "add_parser", "(", "\n", "\"plot\"", ",", "help", "=", "\"Show three boxplots of a given results\"", ")", "\n", "plot", ".", "set_defaults", "(", "callback", "=", "self", ".", "plot_command", ")", "\n", "\n", "plot", ".", "add_argument", "(", "\n", "\"--file\"", ",", "\"-f\"", ",", "dest", "=", "\"file\"", ",", "required", "=", "True", ",", "\n", "type", "=", "argparse", ".", "FileType", "(", "'r'", ")", ",", "\n", "help", "=", "\"File path of the time benchmark data in CSV format\"", ")", "\n", "\n", "plot", ".", "add_argument", "(", "\n", "\"--size\"", ",", "dest", "=", "\"size\"", ",", "nargs", "=", "2", ",", "type", "=", "float", ",", "\n", "help", "=", "(", "\"The size of the entire figure in inches in the format \"", "\n", "f\"'width height' (default={DEFAULT_SIZE}).\"", ")", ")", "\n", "\n", "plot", ".", "add_argument", "(", "\n", "\"--out\"", ",", "\"-o\"", ",", "dest", "=", "\"out\"", ",", "\n", "help", "=", "(", "\"A file to store the generated plot. \"", "\n", "\"By default the default matplotlib backend shows the plot\"", ")", ")", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.benchmarks.time_regression.CLI.parse_and_run": [[314, 317], ["time_regression.CLI._parser.parse_args", "time_regression.CLI.callback"], "methods", ["None"], ["", "def", "parse_and_run", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "ns", "=", "self", ".", "_parser", ".", "parse_args", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "return", "ns", ".", "callback", "(", "ns", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.benchmarks.time_regression.CLI.plot_command": [[318, 341], ["pandas.read_csv", "plt.subplots", "fig.set_size_inches", "time_regression.plot", "fig.suptitle", "plt.tight_layout", "print", "fig.canvas.set_window_title", "plt.show", "print", "plt.savefig", "print"], "methods", ["home.repos.pwc.inspect_result.toros-astro_astroalign.benchmarks.time_bench.plot"], ["", "def", "plot_command", "(", "self", ",", "ns", ")", ":", "\n", "        ", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "\n", "results", "=", "pd", ".", "read_csv", "(", "ns", ".", "file", ")", "\n", "\n", "size", "=", "ns", ".", "size", "if", "ns", ".", "size", "else", "DEFAULT_SIZE", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "fig", ".", "set_size_inches", "(", "*", "size", ")", "\n", "\n", "plot", "(", "results", ",", "ax", ")", "\n", "\n", "fig", ".", "suptitle", "(", "\"\"", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "if", "ns", ".", "out", "is", "None", ":", "\n", "            ", "print", "(", "f\"Showing plot for data stored in '{ns.file.name}'...\"", ")", "\n", "fig", ".", "canvas", ".", "set_window_title", "(", "f\"{self.parser.prog} - {ns.file.name}\"", ")", "\n", "plt", ".", "show", "(", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\n", "f\"Storing plot for data in '{ns.file.name}' -> '{ns.out}'...\"", ")", "\n", "plt", ".", "savefig", "(", "ns", ".", "out", ")", "\n", "print", "(", "\"DONE!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.benchmarks.time_regression.CLI.describe_command": [[342, 353], ["pandas.read_csv", "time_regression.describe", "print", "print", "print", "print", "print", "len"], "methods", ["home.repos.pwc.inspect_result.toros-astro_astroalign.benchmarks.time_bench.describe"], ["", "", "def", "describe_command", "(", "self", ",", "ns", ")", ":", "\n", "        ", "results", "=", "pd", ".", "read_csv", "(", "ns", ".", "file", ")", "\n", "\n", "repetitions", ",", "resume", "=", "describe", "(", "results", ")", "\n", "\n", "print", "(", "f\"Executed: {len(results)} cases\"", ")", "\n", "\n", "print", "(", "f\"\\twith {repetitions} repetitions \\n\"", ")", "\n", "print", "(", "\">>>>> Resume <<<<<\"", ")", "\n", "print", "(", "resume", ")", "\n", "print", "(", "\"\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.benchmarks.time_regression.CLI.benchmark_command": [[354, 379], ["print", "print", "time_regression.benchmark", "time_regression.describe", "print", "print", "print", "print", "print", "benchmark.to_csv", "print", "time_regression.CLI._parser.error", "now", "now", "len", "now"], "methods", ["home.repos.pwc.inspect_result.toros-astro_astroalign.benchmarks.time_bench.benchmark", "home.repos.pwc.inspect_result.toros-astro_astroalign.benchmarks.time_bench.describe"], ["", "def", "benchmark_command", "(", "self", ",", "ns", ")", ":", "\n", "        ", "if", "ns", ".", "step_size", "<=", "0", ":", "\n", "            ", "self", ".", "_parser", ".", "error", "(", "f\"'step' must be > 0. Found {ns.step_size}\"", ")", "\n", "\n", "", "now", "=", "dt", ".", "datetime", ".", "now", "\n", "\n", "print", "(", "\n", "f\"[{now()}] Starting benchmark for astroalign {aa.__version__}...\"", ")", "\n", "print", "(", "\"\"", ")", "\n", "results", "=", "benchmark", "(", "\n", "max_size", "=", "ns", ".", "max_size", ",", "min_size", "=", "ns", ".", "min_size", ",", "step_size", "=", "ns", ".", "step_size", ",", "\n", "stars", "=", "ns", ".", "stars", ",", "noise", "=", "ns", ".", "noise", ",", "seed", "=", "ns", ".", "seed", ",", "\n", "repeats", "=", "ns", ".", "repeats", ",", "n_jobs", "=", "ns", ".", "n_jobs", ",", "comb_number", "=", "ns", ".", "comb_number", ")", "\n", "\n", "repetitions", ",", "resume", "=", "describe", "(", "results", ")", "\n", "\n", "print", "(", "f\"[{now()}] Executed: {len(results)} cases\"", ")", "\n", "\n", "print", "(", "f\"\\twith {repetitions} repetitions \\n\"", ")", "\n", "print", "(", "\">>>>> Resume <<<<<\"", ")", "\n", "print", "(", "resume", ")", "\n", "print", "(", "\"\"", ")", "\n", "\n", "results", ".", "to_csv", "(", "ns", ".", "out", ",", "index", "=", "False", ")", "\n", "print", "(", "f\"[{now()}] Data stored in '{ns.out.name}'\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.benchmarks.time_regression.CLI.parser": [[380, 383], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "parser", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_parser", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.benchmarks.time_regression.get_images": [[80, 88], ["numpy.random.seed", "tests.test_align.simulate_image_pair"], "function", ["home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.simulate_image_pair"], ["def", "get_images", "(", "size", ",", "stars", ",", "noise", ",", "seed", ")", ":", "\n", "    ", "\"\"\"Retrieves a pair source and target image\"\"\"", "\n", "if", "seed", "is", "not", "None", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "", "shape", "=", "(", "size", ",", "size", ")", "\n", "source", ",", "target", "=", "simulate_image_pair", "(", "\n", "shape", "=", "shape", ",", "num_stars", "=", "stars", ",", "noise_level", "=", "noise", ")", "[", ":", "2", "]", "\n", "return", "source", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.benchmarks.time_regression.get_parameters": [[90, 117], ["int", "numpy.linspace", "sklearn.model_selection.ParameterGrid", "numpy.random.RandomState", "np.random.RandomState.randint", "enumerate", "list", "len"], "function", ["None"], ["", "def", "get_parameters", "(", "min_size", ",", "max_size", ",", "step_size", ",", "stars", ",", "\n", "noise", ",", "seed", ",", "comb_number", ",", "repeats", ")", ":", "\n", "    ", "\"\"\"Create a list of dictionaries with all the combinations of the given\n    parameters.\n\n    \"\"\"", "\n", "\n", "sample_size", "=", "int", "(", "(", "max_size", "-", "min_size", ")", "/", "step_size", ")", "\n", "sizes", "=", "np", ".", "linspace", "(", "min_size", ",", "max_size", ",", "sample_size", ",", "dtype", "=", "int", ")", "\n", "\n", "grid", "=", "ParameterGrid", "(", "{", "\n", "\"size\"", ":", "sizes", ",", "\"stars\"", ":", "[", "stars", "]", ",", "\n", "\"noise\"", ":", "[", "noise", "]", ",", "\"repeats\"", ":", "[", "repeats", "]", "}", ")", "\n", "grid", "=", "list", "(", "grid", ")", "*", "comb_number", "\n", "\n", "# set the random state for run in parallel", "\n", "random", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "images_seeds", "=", "random", ".", "randint", "(", "1_000_000", ",", "size", "=", "len", "(", "grid", ")", ")", "\n", "\n", "for", "idx", ",", "g", "in", "enumerate", "(", "grid", ")", ":", "\n", "        ", "g", "[", "\"idx\"", "]", "=", "idx", "\n", "g", "[", "\"seed\"", "]", "=", "seed", "\n", "g", "[", "\"min_size\"", "]", "=", "min_size", "\n", "g", "[", "\"max_size\"", "]", "=", "max_size", "\n", "g", "[", "\"step_size\"", "]", "=", "step_size", "\n", "g", "[", "\"images_seed\"", "]", "=", "images_seeds", "[", "idx", "]", "\n", "", "return", "grid", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.benchmarks.time_regression._test": [[119, 149], ["time_regression.get_images", "timeit.Timer", "collections.OrderedDict", "timeit.Timer.repeat", "numpy.min", "enumerate", "timeit.Timer.autorange", "numpy.array"], "function", ["home.repos.pwc.inspect_result.toros-astro_astroalign.benchmarks.time_bench.get_images"], ["", "def", "_test", "(", "idx", ",", "min_size", ",", "max_size", ",", "step_size", ",", "size", ",", "\n", "stars", ",", "noise", ",", "seed", ",", "repeats", ",", "images_seed", ")", ":", "\n", "\n", "# create the two images", "\n", "    ", "source", ",", "target", "=", "get_images", "(", "\n", "size", "=", "size", ",", "stars", "=", "stars", ",", "noise", "=", "noise", ",", "seed", "=", "images_seed", ")", "\n", "\n", "# create the timer", "\n", "test_globals", "=", "{", "\"aa\"", ":", "aa", ",", "\"source\"", ":", "source", ",", "\"target\"", ":", "target", "}", "\n", "timer", "=", "timeit", ".", "Timer", "(", "stmt", "=", "STATEMENT", ",", "globals", "=", "test_globals", ")", "\n", "\n", "# find the number of loops", "\n", "loops", "=", "timer", ".", "autorange", "(", ")", "[", "0", "]", "\n", "\n", "# create a copy of the params to be returned ad result", "\n", "result", "=", "OrderedDict", "(", "{", "\n", "\"idx\"", ":", "idx", ",", "\"min_size\"", ":", "min_size", ",", "\"max_size\"", ":", "max_size", ",", "\n", "\"step_size\"", ":", "step_size", ",", "\"size\"", ":", "size", ",", "\"noise\"", ":", "noise", ",", "\n", "\"stars\"", ":", "stars", ",", "\"seed\"", ":", "seed", ",", "\"images_seed\"", ":", "images_seed", ",", "\n", "\"repeats\"", ":", "repeats", ",", "\"loops\"", ":", "loops", "}", ")", "\n", "\n", "# execute the timeit", "\n", "times", "=", "timer", ".", "repeat", "(", "repeats", ",", "loops", ")", "\n", "\n", "# store the times into the result", "\n", "result", "[", "\"time\"", "]", "=", "np", ".", "min", "(", "np", ".", "array", "(", "times", ")", "/", "loops", ")", "\n", "for", "tidx", ",", "time", "in", "enumerate", "(", "times", ")", ":", "\n", "        ", "result", "[", "f\"time_{tidx}\"", "]", "=", "time", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.benchmarks.time_regression.benchmark": [[151, 166], ["min", "max", "time_regression.get_parameters", "pandas.DataFrame", "joblib.Parallel", "parallel", "joblib.delayed", "tqdm.tqdm"], "function", ["home.repos.pwc.inspect_result.toros-astro_astroalign.benchmarks.time_bench.get_parameters"], ["", "def", "benchmark", "(", "min_size", "=", "min", "(", "SIZES", ")", ",", "max_size", "=", "max", "(", "SIZES", ")", ",", "step_size", "=", "STEP", ",", "\n", "stars", "=", "STARS", ",", "noise", "=", "NOISE", ",", "seed", "=", "None", ",", "repeats", "=", "REPEATS", ",", "\n", "n_jobs", "=", "-", "1", ",", "comb_number", "=", "COMB_NUMBER", ")", ":", "\n", "\n", "    ", "grid", "=", "get_parameters", "(", "\n", "min_size", "=", "min_size", ",", "max_size", "=", "max_size", ",", "step_size", "=", "step_size", ",", "\n", "repeats", "=", "repeats", ",", "stars", "=", "stars", ",", "noise", "=", "noise", ",", "seed", "=", "seed", ",", "\n", "comb_number", "=", "comb_number", ")", "\n", "\n", "with", "joblib", ".", "Parallel", "(", "n_jobs", "=", "n_jobs", ")", "as", "parallel", ":", "\n", "        ", "results", "=", "parallel", "(", "\n", "joblib", ".", "delayed", "(", "_test", ")", "(", "**", "params", ")", "for", "params", "in", "tqdm", ".", "tqdm", "(", "grid", ")", ")", "\n", "\n", "", "df", "=", "pd", ".", "DataFrame", "(", "results", ")", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.benchmarks.time_regression.describe": [[168, 172], ["results[].describe"], "function", ["home.repos.pwc.inspect_result.toros-astro_astroalign.benchmarks.time_bench.describe"], ["", "def", "describe", "(", "results", ")", ":", "\n", "    ", "repetitions", "=", "results", ".", "repeats", ".", "values", "[", "0", "]", "\n", "resume", "=", "results", "[", "[", "\"time\"", ",", "\"size\"", ",", "\"loops\"", "]", "]", ".", "describe", "(", ")", "\n", "return", "repetitions", ",", "resume", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.benchmarks.time_regression.plot": [[174, 197], ["df.plot.scatter", "df[].values.reshape", "sklearn.linear_model.LinearRegression().fit", "LinearRegression().fit.predict", "sklearn.metrics.mean_squared_error", "sklearn.metrics.r2_score", "ax.plot", "ax.set_title", "ax.set_xlabel", "ax.set_ylabel", "sklearn.linear_model.LinearRegression"], "function", ["home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign._MatchTransform.fit", "home.repos.pwc.inspect_result.toros-astro_astroalign.benchmarks.time_bench.plot"], ["", "def", "plot", "(", "results", ",", "ax", ")", ":", "\n", "    ", "df", "=", "results", "[", "[", "\"size\"", ",", "\"time\"", "]", "]", "\n", "\n", "df", ".", "plot", ".", "scatter", "(", "x", "=", "'size'", ",", "y", "=", "'time'", ",", "c", "=", "'LightBlue'", ",", "ax", "=", "ax", ",", "marker", "=", "\".\"", ")", "\n", "\n", "# linear regression", "\n", "x", "=", "df", "[", "\"size\"", "]", ".", "values", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "y", "=", "df", "[", "\"time\"", "]", ".", "values", "\n", "linear", "=", "LinearRegression", "(", ")", ".", "fit", "(", "x", ",", "y", ")", "\n", "y_pred", "=", "linear", ".", "predict", "(", "x", ")", "\n", "\n", "mqe", "=", "mean_squared_error", "(", "y", ",", "y_pred", ")", "\n", "r2", "=", "r2_score", "(", "y", ",", "y_pred", ")", "\n", "\n", "ax", ".", "plot", "(", "x", ",", "y_pred", ",", "color", "=", "'DarkBlue'", ",", "linewidth", "=", "2", ")", "\n", "\n", "ax", ".", "set_title", "(", "\n", "\"Linear regression between size and time \"", "\n", "f\"\\n$mse={mqe:.3f}$ - $R^2={r2:.3f}$\"", ")", "\n", "ax", ".", "set_xlabel", "(", "\"Size\"", ")", "\n", "ax", ".", "set_ylabel", "(", "\"Seconds\"", ")", "\n", "\n", "return", "ax", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.benchmarks.flux_bench.CLI.__init__": [[196, 282], ["argparse.ArgumentParser", "flux_bench.CLI._parser.set_defaults", "flux_bench.CLI._parser.add_argument", "flux_bench.CLI._parser.add_subparsers", "flux_bench.CLI.add_parser", "flux_bench.CLI.add_parser.set_defaults", "flux_bench.CLI.add_parser.add_argument", "flux_bench.CLI.add_parser.add_argument", "flux_bench.CLI.add_parser.add_argument", "flux_bench.CLI.add_parser.add_argument", "flux_bench.CLI.add_parser.add_argument", "flux_bench.CLI.add_parser.add_argument", "flux_bench.CLI.add_parser", "flux_bench.CLI.add_parser.set_defaults", "flux_bench.CLI.add_parser.add_argument", "flux_bench.CLI.add_parser", "flux_bench.CLI.add_parser.set_defaults", "flux_bench.CLI.add_parser.add_argument", "flux_bench.CLI.add_parser.add_argument", "flux_bench.CLI.add_parser.add_argument", "argparse.FileType", "argparse.FileType", "argparse.FileType", "flux_bench.CLI.parser.print_usage"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "\"Astroalign flux benchmark tool\"", ")", "\n", "self", ".", "_parser", ".", "set_defaults", "(", "\n", "callback", "=", "lambda", "ns", ":", "self", ".", "parser", ".", "print_usage", "(", ")", ")", "\n", "\n", "self", ".", "_parser", ".", "add_argument", "(", "\n", "'--version'", ",", "action", "=", "'version'", ",", "version", "=", "'%(prog)s 2019.10'", ")", "\n", "\n", "subparsers", "=", "self", ".", "_parser", ".", "add_subparsers", "(", ")", "\n", "\n", "# =====================================================================", "\n", "# benchmark subparser", "\n", "# =====================================================================", "\n", "\n", "benchmark", "=", "subparsers", ".", "add_parser", "(", "\n", "\"benchmark\"", ",", "\n", "help", "=", "\"Execute and collect the flux benchmark data of astroalign\"", ")", "\n", "benchmark", ".", "set_defaults", "(", "callback", "=", "self", ".", "benchmark_command", ")", "\n", "\n", "benchmark", ".", "add_argument", "(", "\n", "\"--size\"", ",", "dest", "=", "\"size\"", ",", "type", "=", "int", ",", "default", "=", "SIZE", ",", "\n", "help", "=", "(", "\"The size in pixels of the image. This parameter creates \"", "\n", "f\"square figure (defaults={SIZE}).\"", ")", ")", "\n", "\n", "benchmark", ".", "add_argument", "(", "\n", "\"--stars\"", ",", "dest", "=", "\"stars\"", ",", "type", "=", "int", ",", "default", "=", "STARS", ",", "\n", "help", "=", "(", "\"The total numbers of stars in the image \"", "\n", "f\"(defaults={STARS}).\"", ")", ")", "\n", "\n", "benchmark", ".", "add_argument", "(", "\n", "\"--noise\"", ",", "dest", "=", "\"noise\"", ",", "type", "=", "int", ",", "default", "=", "NOISE", ",", "\n", "help", "=", "f\"lambda parameter for poisson noise (default={NOISE})\"", ")", "\n", "\n", "benchmark", ".", "add_argument", "(", "\n", "\"--number\"", ",", "dest", "=", "\"repeats\"", ",", "type", "=", "int", ",", "default", "=", "REPEATS", ",", "\n", "help", "=", "f\"How many flux tests must be executed (default={REPEATS})\"", ")", "\n", "\n", "benchmark", ".", "add_argument", "(", "\n", "\"--seed\"", ",", "dest", "=", "\"seed\"", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "(", "\"Random seed used to initialize the pseudo-random number \"", "\n", "\"generator. if seed is None, then random-state will try to \"", "\n", "\"read data from /dev/urandom (or the Windows analogue) if \"", "\n", "\"available or seed from the clock otherwise \"", "\n", "\"(default=None).\"", ")", ")", "\n", "\n", "benchmark", ".", "add_argument", "(", "\n", "\"--out\"", ",", "\"-o\"", ",", "dest", "=", "\"out\"", ",", "required", "=", "True", ",", "\n", "type", "=", "argparse", ".", "FileType", "(", "'w'", ")", ",", "\n", "help", "=", "\"Output file path. The data was stored in CSV format\"", ")", "\n", "\n", "# =====================================================================", "\n", "# describe subparser", "\n", "# =====================================================================", "\n", "\n", "describe", "=", "subparsers", ".", "add_parser", "(", "\n", "\"describe\"", ",", "\n", "help", "=", "\"Show a resume and (optionally) of the benchmark results\"", ")", "\n", "describe", ".", "set_defaults", "(", "callback", "=", "self", ".", "describe_command", ")", "\n", "\n", "describe", ".", "add_argument", "(", "\n", "\"--file\"", ",", "\"-f\"", ",", "dest", "=", "\"file\"", ",", "required", "=", "True", ",", "\n", "type", "=", "argparse", ".", "FileType", "(", "'r'", ")", ",", "\n", "help", "=", "\"File path of the flux benchmark data in CSV format\"", ")", "\n", "\n", "# =====================================================================", "\n", "# plot subparser", "\n", "# =====================================================================", "\n", "\n", "plot", "=", "subparsers", ".", "add_parser", "(", "\n", "\"plot\"", ",", "help", "=", "\"Show the histogram of a given results\"", ")", "\n", "plot", ".", "set_defaults", "(", "callback", "=", "self", ".", "plot_command", ")", "\n", "\n", "plot", ".", "add_argument", "(", "\n", "\"--file\"", ",", "\"-f\"", ",", "dest", "=", "\"file\"", ",", "required", "=", "True", ",", "\n", "type", "=", "argparse", ".", "FileType", "(", "'r'", ")", ",", "\n", "help", "=", "\"File path of the flux benchmark data in CSV format\"", ")", "\n", "\n", "plot", ".", "add_argument", "(", "\n", "\"--size\"", ",", "dest", "=", "\"size\"", ",", "nargs", "=", "2", ",", "type", "=", "float", ",", "\n", "help", "=", "(", "\"The size of the entire figure in inches in the format \"", "\n", "f\"'width height' (default={DEFAULT_SIZE}).\"", ")", ")", "\n", "\n", "plot", ".", "add_argument", "(", "\n", "\"--out\"", ",", "\"-o\"", ",", "dest", "=", "\"out\"", ",", "\n", "help", "=", "(", "\"A file to store the generated plot. \"", "\n", "\"By default the default matplotlib backend shows the plot\"", ")", ")", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.benchmarks.flux_bench.CLI.parse_and_run": [[284, 287], ["flux_bench.CLI._parser.parse_args", "flux_bench.CLI.callback"], "methods", ["None"], ["", "def", "parse_and_run", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "ns", "=", "self", ".", "_parser", ".", "parse_args", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "return", "ns", ".", "callback", "(", "ns", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.benchmarks.flux_bench.CLI.plot_command": [[288, 311], ["pandas.read_csv", "plt.subplots", "fig.set_size_inches", "flux_bench.plot", "fig.suptitle", "plt.tight_layout", "print", "fig.canvas.set_window_title", "plt.show", "print", "plt.savefig", "print"], "methods", ["home.repos.pwc.inspect_result.toros-astro_astroalign.benchmarks.time_bench.plot"], ["", "def", "plot_command", "(", "self", ",", "ns", ")", ":", "\n", "        ", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "\n", "results", "=", "pd", ".", "read_csv", "(", "ns", ".", "file", ")", "\n", "\n", "size", "=", "ns", ".", "size", "if", "ns", ".", "size", "else", "DEFAULT_SIZE", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "fig", ".", "set_size_inches", "(", "*", "size", ")", "\n", "\n", "plot", "(", "results", ",", "ax", ")", "\n", "\n", "fig", ".", "suptitle", "(", "\"\"", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "if", "ns", ".", "out", "is", "None", ":", "\n", "            ", "print", "(", "f\"Showing plot for data stored in '{ns.file.name}'...\"", ")", "\n", "fig", ".", "canvas", ".", "set_window_title", "(", "f\"{self.parser.prog} - {ns.file.name}\"", ")", "\n", "plt", ".", "show", "(", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\n", "f\"Storing plot for data in '{ns.file.name}' -> '{ns.out}'...\"", ")", "\n", "plt", ".", "savefig", "(", "ns", ".", "out", ")", "\n", "print", "(", "\"DONE!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.benchmarks.flux_bench.CLI.describe_command": [[312, 322], ["pandas.read_csv", "flux_bench.describe", "print", "print", "print", "print", "print", "len"], "methods", ["home.repos.pwc.inspect_result.toros-astro_astroalign.benchmarks.time_bench.describe"], ["", "", "def", "describe_command", "(", "self", ",", "ns", ")", ":", "\n", "        ", "results", "=", "pd", ".", "read_csv", "(", "ns", ".", "file", ")", "\n", "\n", "repetitions", ",", "resume", "=", "describe", "(", "results", ")", "\n", "\n", "print", "(", "f\"Data size: {len(results)}\"", ")", "\n", "print", "(", "f\"\\twith {repetitions} repetitions \\n\"", ")", "\n", "print", "(", "\">>>>> Resume <<<<<\"", ")", "\n", "print", "(", "resume", ")", "\n", "print", "(", "\"\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.benchmarks.flux_bench.CLI.benchmark_command": [[323, 347], ["print", "print", "flux_bench.benchmark", "flux_bench.describe", "print", "print", "print", "print", "print", "benchmark.to_csv", "flux_bench.CLI._parser.error", "now", "now", "len"], "methods", ["home.repos.pwc.inspect_result.toros-astro_astroalign.benchmarks.time_bench.benchmark", "home.repos.pwc.inspect_result.toros-astro_astroalign.benchmarks.time_bench.describe"], ["", "def", "benchmark_command", "(", "self", ",", "ns", ")", ":", "\n", "        ", "if", "ns", ".", "repeats", "<=", "0", ":", "\n", "            ", "self", ".", "_parser", ".", "error", "(", "f\"'repeats' must be > 0. Found {ns.repeats}\"", ")", "\n", "\n", "", "now", "=", "dt", ".", "datetime", ".", "now", "\n", "\n", "print", "(", "\n", "f\"[{now()}] Starting flux benchmark \"", "\n", "f\"for astroalign {aa.__version__}...\"", ")", "\n", "print", "(", "\"\"", ")", "\n", "results", "=", "benchmark", "(", "\n", "size", "=", "ns", ".", "size", ",", "stars", "=", "ns", ".", "stars", ",", "noise", "=", "ns", ".", "noise", ",", "\n", "repeats", "=", "ns", ".", "repeats", ",", "seed", "=", "ns", ".", "seed", ")", "\n", "\n", "repetitions", ",", "resume", "=", "describe", "(", "results", ")", "\n", "\n", "print", "(", "f\"[{now()}] Data size: {len(results)}\"", ")", "\n", "print", "(", "f\"\\twith {repetitions} repetitions \\n\"", ")", "\n", "\n", "print", "(", "\">>>>> Resume <<<<<\"", ")", "\n", "print", "(", "resume", ")", "\n", "print", "(", "\"\"", ")", "\n", "\n", "results", ".", "to_csv", "(", "ns", ".", "out", ",", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.benchmarks.flux_bench.CLI.parser": [[348, 351], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "parser", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_parser", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.benchmarks.flux_bench.get_image": [[71, 79], ["numpy.random.seed", "tests.test_align.simulate_image_single"], "function", ["home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.simulate_image_single"], ["def", "get_image", "(", "size", ",", "stars", ",", "noise", ",", "seed", ")", ":", "\n", "    ", "\"\"\"Retrieves a single image\"\"\"", "\n", "if", "seed", "is", "not", "None", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "", "shape", "=", "(", "size", ",", "size", ")", "\n", "image", "=", "simulate_image_single", "(", "\n", "shape", "=", "shape", ",", "num_stars", "=", "stars", ",", "noise_level", "=", "noise", ")", "[", ":", "2", "]", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.benchmarks.flux_bench.benchmark": [[81, 158], ["flux_bench.get_image", "numpy.ascontiguousarray", "sep.Background", "sep.extract", "sep.extract.sort", "sep.sum_circle", "range", "pandas.concat", "numpy.random.randint", "skimage.transform.SimilarityTransform", "numpy.zeros", "astroalign.apply_transform", "sep.sum_circle", "pandas.DataFrame", "numpy.array", "numpy.array", "numpy.array", "scipy.stats.linregress", "dframes.append", "sep.Background.back", "sep.Background.back", "numpy.array", "skimage.transform.SimilarityTransform.", "numpy.random.random", "sep.Background.back", "sum", "sum", "sum", "numpy.random.random", "numpy.array"], "function", ["home.repos.pwc.inspect_result.toros-astro_astroalign.benchmarks.flux_bench.get_image", "home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign.apply_transform"], ["", "def", "benchmark", "(", "size", "=", "SIZE", ",", "stars", "=", "STARS", ",", "noise", "=", "NOISE", ",", "repeats", "=", "REPEATS", ",", "seed", "=", "None", ")", ":", "\n", "# get image", "\n", "    ", "image", "=", "get_image", "(", "size", ",", "stars", ",", "noise", ",", "seed", ")", "\n", "imagedata", "=", "np", ".", "ascontiguousarray", "(", "image", "[", "0", "]", ")", "\n", "\n", "# detect sources (we know where they are, actually)", "\n", "bkg", "=", "sep", ".", "Background", "(", "imagedata", ")", "\n", "thresh", "=", "3.", "*", "bkg", ".", "globalrms", "\n", "sources", "=", "sep", ".", "extract", "(", "imagedata", "-", "bkg", ".", "back", "(", ")", ",", "thresh", ")", "\n", "sources", ".", "sort", "(", "order", "=", "'flux'", ")", "\n", "\n", "# perform photometry", "\n", "flux", ",", "fluxerr", ",", "flag", "=", "sep", ".", "sum_circle", "(", "\n", "imagedata", "-", "bkg", ".", "back", "(", ")", ",", "sources", "[", "'x'", "]", ",", "\n", "sources", "[", "'y'", "]", ",", "3.0", ",", "err", "=", "bkg", ".", "globalrms", ",", "gain", "=", "1.0", ")", "\n", "\n", "dframes", "=", "[", "]", "\n", "# transform it", "\n", "for", "i_trsf", "in", "range", "(", "repeats", ")", ":", "\n", "        ", "dx", ",", "dy", "=", "np", ".", "random", ".", "randint", "(", "\n", "low", "=", "-", "1", "*", "size", "/", "32.", ",", "high", "=", "size", "/", "32.", ",", "size", "=", "2", ")", "\n", "theta", "=", "(", "np", ".", "random", ".", "random", "(", ")", "-", "0.5", ")", "*", "0.125", "*", "np", ".", "pi", "\n", "s", "=", "0.85", "+", "np", ".", "random", ".", "random", "(", ")", "*", "0.3", "\n", "trf", "=", "SimilarityTransform", "(", "\n", "translation", "=", "(", "dx", ",", "dy", ")", ",", "rotation", "=", "theta", ",", "scale", "=", "s", ")", "\n", "\n", "target", "=", "np", ".", "zeros", "(", "shape", "=", "np", ".", "array", "(", "imagedata", ".", "shape", ")", "*", "2", ")", "\n", "newimage", "=", "aa", ".", "apply_transform", "(", "trf", ",", "imagedata", "-", "bkg", ".", "back", "(", ")", ",", "target", ")", "\n", "\n", "# perform photometry on new places", "\n", "src_coords", "=", "np", ".", "array", "(", "[", "sources", "[", "'x'", "]", ",", "sources", "[", "'y'", "]", "]", ")", ".", "T", "\n", "new_coords", "=", "trf", "(", "src_coords", ")", ".", "T", "\n", "nflux", ",", "nfluxerr", ",", "nflag", "=", "sep", ".", "sum_circle", "(", "\n", "newimage", "[", "0", "]", ",", "new_coords", "[", "0", "]", ",", "new_coords", "[", "1", "]", ",", "3.0", "*", "s", ",", "\n", "err", "=", "bkg", ".", "globalrms", ",", "gain", "=", "1.0", ")", "\n", "\n", "# compare fluxes", "\n", "good_flux", "=", "nflag", "==", "0", "\n", "new_to_orig", "=", "nflux", "[", "good_flux", "]", "/", "flux", "[", "good_flux", "]", "\n", "\n", "# put everything in a pd dataframe", "\n", "df", "=", "pd", ".", "DataFrame", "(", ")", "\n", "\n", "df", "[", "\"idx\"", "]", "=", "np", ".", "array", "(", "[", "i_trsf", "]", "*", "sum", "(", "good_flux", ")", ")", "\n", "df", "[", "\"seed\"", "]", "=", "np", ".", "array", "(", "[", "seed", "]", "*", "sum", "(", "good_flux", ")", ")", "\n", "df", "[", "\"repeats\"", "]", "=", "np", ".", "array", "(", "[", "repeats", "]", "*", "sum", "(", "good_flux", ")", ")", "\n", "\n", "df", "[", "'orig_x'", "]", "=", "sources", "[", "'x'", "]", "[", "good_flux", "]", "\n", "df", "[", "'orig_y'", "]", "=", "sources", "[", "'y'", "]", "[", "good_flux", "]", "\n", "df", "[", "'orig_flux'", "]", "=", "flux", "[", "good_flux", "]", "\n", "df", "[", "'orig_fluxerr'", "]", "=", "fluxerr", "[", "good_flux", "]", "\n", "df", "[", "'orig_flag'", "]", "=", "flag", "[", "good_flux", "]", "\n", "\n", "df", "[", "'new_x'", "]", "=", "new_coords", "[", "0", "]", "[", "good_flux", "]", "\n", "df", "[", "'new_y'", "]", "=", "new_coords", "[", "1", "]", "[", "good_flux", "]", "\n", "df", "[", "'new_flux'", "]", "=", "nflux", "[", "good_flux", "]", "\n", "df", "[", "'new_fluxerr'", "]", "=", "nfluxerr", "[", "good_flux", "]", "\n", "df", "[", "'new_flag'", "]", "=", "nflag", "[", "good_flux", "]", "\n", "\n", "df", "[", "'flux_ratio'", "]", "=", "new_to_orig", "\n", "\n", "df", "[", "'trf_theta'", "]", "=", "theta", "\n", "df", "[", "'trf_dx'", "]", "=", "dx", "\n", "df", "[", "'trf_dy'", "]", "=", "dy", "\n", "df", "[", "'trf_scale'", "]", "=", "s", "\n", "\n", "slp", ",", "intpt", ",", "r_val", ",", "p_val", ",", "std_err", "=", "stats", ".", "linregress", "(", "\n", "flux", "[", "good_flux", "]", ",", "nflux", "[", "good_flux", "]", ")", "\n", "df", "[", "'stats_slope'", "]", "=", "slp", "\n", "df", "[", "'stats_intpt'", "]", "=", "intpt", "\n", "df", "[", "'flux_per_area_ratio'", "]", "=", "df", "[", "'flux_ratio'", "]", "/", "(", "df", "[", "'trf_scale'", "]", "**", "2", ")", "\n", "\n", "dframes", ".", "append", "(", "df", ")", "\n", "\n", "", "final_df", "=", "pd", ".", "concat", "(", "dframes", ")", "\n", "\n", "return", "final_df", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.benchmarks.flux_bench.describe": [[160, 164], ["results[].describe"], "function", ["home.repos.pwc.inspect_result.toros-astro_astroalign.benchmarks.time_bench.describe"], ["", "def", "describe", "(", "results", ")", ":", "\n", "    ", "repetitions", "=", "results", ".", "repeats", ".", "values", "[", "0", "]", "\n", "resume", "=", "results", "[", "[", "\"flux_per_area_ratio\"", "]", "]", ".", "describe", "(", ")", "\n", "return", "repetitions", ",", "resume", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.benchmarks.flux_bench.plot": [[166, 188], ["numpy.arange", "ax.hist", "ax.plot", "ax.legend", "ax.set_title", "ax.set_xlabel", "ax.set_ylabel", "scipy.stats.norm.pdf", "numpy.mean", "numpy.std"], "function", ["home.repos.pwc.inspect_result.toros-astro_astroalign.benchmarks.time_bench.plot"], ["", "def", "plot", "(", "results", ",", "ax", ")", ":", "\n", "\n", "    ", "bins", "=", "np", ".", "arange", "(", "0.95", ",", "1.05", ",", "0.001", ")", "\n", "ax", ".", "hist", "(", "\n", "results", ".", "flux_per_area_ratio", ",", "normed", "=", "True", ",", "\n", "histtype", "=", "'step'", ",", "bins", "=", "bins", ",", "label", "=", "'Data'", ")", "\n", "\n", "ax", ".", "plot", "(", "\n", "bins", "+", "(", "bins", "[", "1", "]", "-", "bins", "[", "0", "]", ")", "/", "2.", ",", "\n", "stats", ".", "norm", ".", "pdf", "(", "\n", "bins", ",", "\n", "loc", "=", "np", ".", "mean", "(", "results", ".", "flux_per_area_ratio", ")", ",", "\n", "scale", "=", "np", ".", "std", "(", "results", ".", "flux_per_area_ratio", ")", ")", ",", "\n", "label", "=", "'Gaussian'", ")", "\n", "\n", "ax", ".", "legend", "(", "loc", "=", "'best'", ")", "\n", "\n", "ax", ".", "set_title", "(", "\"Flux ratio per unit area\"", ")", "\n", "ax", ".", "set_xlabel", "(", "'Flux ratio per unit area'", ")", "\n", "ax", ".", "set_ylabel", "(", "'Normalized N'", ")", "\n", "\n", "return", "ax", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.benchmarks.time_bench.CLI.__init__": [[188, 294], ["argparse.ArgumentParser", "time_bench.CLI._parser.set_defaults", "time_bench.CLI._parser.add_argument", "time_bench.CLI._parser.add_subparsers", "time_bench.CLI.add_parser", "time_bench.CLI.add_parser.set_defaults", "time_bench.CLI.add_parser.add_argument", "time_bench.CLI.add_parser.add_argument", "time_bench.CLI.add_parser.add_argument", "time_bench.CLI.add_parser.add_argument", "time_bench.CLI.add_parser.add_argument", "time_bench.CLI.add_parser.add_argument", "time_bench.CLI.add_parser.add_argument", "time_bench.CLI.add_parser.add_argument", "time_bench.CLI.add_parser", "time_bench.CLI.add_parser.set_defaults", "time_bench.CLI.add_parser.add_argument", "time_bench.CLI.add_parser", "time_bench.CLI.add_parser.set_defaults", "time_bench.CLI.add_parser.add_argument", "time_bench.CLI.add_parser.add_argument", "time_bench.CLI.add_parser.add_argument", "time_bench.CLI.add_parser.add_argument", "argparse.FileType", "argparse.FileType", "argparse.FileType", "list", "time_bench.CLI.parser.print_usage", "COLSROWS.keys"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "\"Astroalign time benchmark tool based on timeit\"", ")", "\n", "self", ".", "_parser", ".", "set_defaults", "(", "\n", "callback", "=", "lambda", "ns", ":", "self", ".", "parser", ".", "print_usage", "(", ")", ")", "\n", "\n", "self", ".", "_parser", ".", "add_argument", "(", "\n", "'--version'", ",", "action", "=", "'version'", ",", "version", "=", "'%(prog)s 2019.10'", ")", "\n", "\n", "subparsers", "=", "self", ".", "_parser", ".", "add_subparsers", "(", ")", "\n", "\n", "# =====================================================================", "\n", "# benchmark subparser", "\n", "# =====================================================================", "\n", "\n", "benchmark", "=", "subparsers", ".", "add_parser", "(", "\n", "\"benchmark\"", ",", "\n", "help", "=", "\"Execute and collect the benchmark data of astroalign\"", ")", "\n", "benchmark", ".", "set_defaults", "(", "callback", "=", "self", ".", "benchmark_command", ")", "\n", "\n", "benchmark", ".", "add_argument", "(", "\n", "\"--sizes\"", ",", "dest", "=", "\"sizes\"", ",", "type", "=", "int", ",", "default", "=", "SIZES", ",", "nargs", "=", "\"+\"", ",", "\n", "help", "=", "(", "\"The size in pixels of the image. This parameter creates \"", "\n", "f\"square figure (defaults={SIZES}).\"", ")", ")", "\n", "\n", "benchmark", ".", "add_argument", "(", "\n", "\"--stars\"", ",", "dest", "=", "\"stars\"", ",", "type", "=", "int", ",", "default", "=", "STARS", ",", "nargs", "=", "\"+\"", ",", "\n", "help", "=", "(", "\"The total numbers of stars in the image \"", "\n", "f\"(defaults={STARS}).\"", ")", ")", "\n", "\n", "benchmark", ".", "add_argument", "(", "\n", "\"--noises\"", ",", "dest", "=", "\"noises\"", ",", "type", "=", "int", ",", "default", "=", "NOISES", ",", "nargs", "=", "\"+\"", ",", "\n", "help", "=", "f\"lambda parameter for poisson noise (default={NOISES})\"", ")", "\n", "\n", "benchmark", ".", "add_argument", "(", "\n", "\"--number\"", ",", "dest", "=", "\"comb_number\"", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "(", "\"How many random images pairs must be created for one \"", "\n", "\"combination of sizes, stars and noise (default=10).\"", ")", ")", "\n", "\n", "benchmark", ".", "add_argument", "(", "\n", "\"--seed\"", ",", "dest", "=", "\"seed\"", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "(", "\"Random seed used to initialize the pseudo-random number \"", "\n", "\"generator. if seed is None, then random-state will try to \"", "\n", "\"read data from /dev/urandom (or the Windows analogue) if \"", "\n", "\"available or seed from the clock otherwise \"", "\n", "\"(default=None).\"", ")", ")", "\n", "\n", "benchmark", ".", "add_argument", "(", "\n", "\"--repeats\"", ",", "dest", "=", "\"repeats\"", ",", "type", "=", "int", ",", "default", "=", "REPEATS", ",", "\n", "help", "=", "(", "\"How many measurements must be taken for every image pair. \"", "\n", "\"The final 'time' is the lower bound of all the times. \"", "\n", "\"Docs: https://docs.python.org/3.7/library/timeit.html\"", ")", ")", "\n", "\n", "benchmark", ".", "add_argument", "(", "\n", "\"--jobs\"", ",", "dest", "=", "\"n_jobs\"", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "\n", "help", "=", "(", "\"The number of CPU to run the benchmars. \"", "\n", "\"-1 uses all the available CPUS (default=-1)\"", ")", ")", "\n", "\n", "benchmark", ".", "add_argument", "(", "\n", "\"--out\"", ",", "\"-o\"", ",", "dest", "=", "\"out\"", ",", "required", "=", "True", ",", "\n", "type", "=", "argparse", ".", "FileType", "(", "'w'", ")", ",", "\n", "help", "=", "\"Output file path. The data was stored in CSV format\"", ")", "\n", "\n", "# =====================================================================", "\n", "# describe subparser", "\n", "# =====================================================================", "\n", "\n", "describe", "=", "subparsers", ".", "add_parser", "(", "\n", "\"describe\"", ",", "\n", "help", "=", "\"Show a resume and (optionally) of the benchmark results\"", ")", "\n", "describe", ".", "set_defaults", "(", "callback", "=", "self", ".", "describe_command", ")", "\n", "\n", "describe", ".", "add_argument", "(", "\n", "\"--file\"", ",", "\"-f\"", ",", "dest", "=", "\"file\"", ",", "required", "=", "True", ",", "\n", "type", "=", "argparse", ".", "FileType", "(", "'r'", ")", ",", "\n", "help", "=", "\"File path of the time benchmark data in CSV format\"", ")", "\n", "\n", "# =====================================================================", "\n", "# plot subparser", "\n", "# =====================================================================", "\n", "\n", "plot", "=", "subparsers", ".", "add_parser", "(", "\n", "\"plot\"", ",", "help", "=", "\"Show three boxplots of a given results\"", ")", "\n", "plot", ".", "set_defaults", "(", "callback", "=", "self", ".", "plot_command", ")", "\n", "\n", "plot", ".", "add_argument", "(", "\n", "\"--file\"", ",", "\"-f\"", ",", "dest", "=", "\"file\"", ",", "required", "=", "True", ",", "\n", "type", "=", "argparse", ".", "FileType", "(", "'r'", ")", ",", "\n", "help", "=", "\"File path of the time benchmark data in CSV format\"", ")", "\n", "\n", "plot", ".", "add_argument", "(", "\n", "\"--orientation\"", ",", "dest", "=", "\"orientation\"", ",", "\n", "choices", "=", "list", "(", "COLSROWS", ".", "keys", "(", ")", ")", ",", "default", "=", "\"horizontal\"", ",", "\n", "help", "=", "(", "\"If the plots will be a single row (horizontal) \"", "\n", "f\"or vertical for a single column (default='horizontal')\"", ")", ")", "\n", "\n", "plot", ".", "add_argument", "(", "\n", "\"--size\"", ",", "dest", "=", "\"size\"", ",", "nargs", "=", "2", ",", "type", "=", "float", ",", "\n", "help", "=", "(", "\"The size of the entire figure in inches in the format \"", "\n", "\"'width height' for horizontal orientation the size by \"", "\n", "f\"default is {DEFAULT_SIZES['horizontal']} and for \"", "\n", "f\"vertical {DEFAULT_SIZES['vertical']}.\"", ")", ")", "\n", "\n", "plot", ".", "add_argument", "(", "\n", "\"--out\"", ",", "\"-o\"", ",", "dest", "=", "\"out\"", ",", "\n", "help", "=", "(", "\"A file to store the generated plot. \"", "\n", "\"By default the default matplotlib backend shows the plot\"", ")", ")", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.benchmarks.time_bench.CLI.parse_and_run": [[296, 299], ["time_bench.CLI._parser.parse_args", "time_bench.CLI.callback"], "methods", ["None"], ["", "def", "parse_and_run", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "ns", "=", "self", ".", "_parser", ".", "parse_args", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "return", "ns", ".", "callback", "(", "ns", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.benchmarks.time_bench.CLI.plot_command": [[300, 324], ["pandas.read_csv", "plt.subplots", "fig.set_size_inches", "time_bench.plot", "fig.suptitle", "plt.tight_layout", "print", "fig.canvas.set_window_title", "plt.show", "print", "plt.savefig", "print"], "methods", ["home.repos.pwc.inspect_result.toros-astro_astroalign.benchmarks.time_bench.plot"], ["", "def", "plot_command", "(", "self", ",", "ns", ")", ":", "\n", "        ", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "\n", "results", "=", "pd", ".", "read_csv", "(", "ns", ".", "file", ")", "\n", "\n", "orientation", "=", "COLSROWS", "[", "ns", ".", "orientation", "]", "\n", "size", "=", "ns", ".", "size", "if", "ns", ".", "size", "else", "DEFAULT_SIZES", "[", "ns", ".", "orientation", "]", "\n", "\n", "fig", ",", "axes", "=", "plt", ".", "subplots", "(", "**", "orientation", ")", "\n", "fig", ".", "set_size_inches", "(", "*", "size", ")", "\n", "\n", "plot", "(", "results", ",", "*", "axes", ")", "\n", "\n", "fig", ".", "suptitle", "(", "\"\"", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "if", "ns", ".", "out", "is", "None", ":", "\n", "            ", "print", "(", "f\"Showing plot for data stored in '{ns.file.name}'...\"", ")", "\n", "fig", ".", "canvas", ".", "set_window_title", "(", "f\"{self.parser.prog} - {ns.file.name}\"", ")", "\n", "plt", ".", "show", "(", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\n", "f\"Storing plot for data in '{ns.file.name}' -> '{ns.out}'...\"", ")", "\n", "plt", ".", "savefig", "(", "ns", ".", "out", ")", "\n", "print", "(", "\"DONE!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.benchmarks.time_bench.CLI.describe_command": [[325, 336], ["pandas.read_csv", "time_bench.describe", "print", "print", "print", "print", "print", "len"], "methods", ["home.repos.pwc.inspect_result.toros-astro_astroalign.benchmarks.time_bench.describe"], ["", "", "def", "describe_command", "(", "self", ",", "ns", ")", ":", "\n", "        ", "results", "=", "pd", ".", "read_csv", "(", "ns", ".", "file", ")", "\n", "\n", "repetitions", ",", "resume", "=", "describe", "(", "results", ")", "\n", "\n", "print", "(", "f\"Executed: {len(results)} cases\"", ")", "\n", "\n", "print", "(", "f\"\\twith {repetitions} repetitions \\n\"", ")", "\n", "print", "(", "\">>>>> Resume <<<<<\"", ")", "\n", "print", "(", "resume", ")", "\n", "print", "(", "\"\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.benchmarks.time_bench.CLI.benchmark_command": [[337, 362], ["print", "print", "time_bench.benchmark", "time_bench.describe", "print", "print", "print", "print", "print", "benchmark.to_csv", "print", "time_bench.CLI._parser.error", "now", "now", "len", "now"], "methods", ["home.repos.pwc.inspect_result.toros-astro_astroalign.benchmarks.time_bench.benchmark", "home.repos.pwc.inspect_result.toros-astro_astroalign.benchmarks.time_bench.describe"], ["", "def", "benchmark_command", "(", "self", ",", "ns", ")", ":", "\n", "        ", "if", "ns", ".", "repeats", "<=", "0", ":", "\n", "            ", "self", ".", "_parser", ".", "error", "(", "f\"'repeats' must be > 0. Found {ns.repeats}\"", ")", "\n", "\n", "", "now", "=", "dt", ".", "datetime", ".", "now", "\n", "\n", "print", "(", "\n", "f\"[{now()}] Starting benchmark for astroalign {aa.__version__}...\"", ")", "\n", "print", "(", "\"\"", ")", "\n", "results", "=", "benchmark", "(", "\n", "sizes", "=", "ns", ".", "sizes", ",", "stars", "=", "ns", ".", "stars", ",", "noises", "=", "ns", ".", "noises", ",", "\n", "comb_number", "=", "ns", ".", "comb_number", ",", "seed", "=", "ns", ".", "seed", ",", "\n", "repeats", "=", "ns", ".", "repeats", ",", "n_jobs", "=", "ns", ".", "n_jobs", ")", "\n", "\n", "repetitions", ",", "resume", "=", "describe", "(", "results", ")", "\n", "\n", "print", "(", "f\"[{now()}] Executed: {len(results)} cases\"", ")", "\n", "\n", "print", "(", "f\"\\twith {repetitions} repetitions \\n\"", ")", "\n", "print", "(", "\">>>>> Resume <<<<<\"", ")", "\n", "print", "(", "resume", ")", "\n", "print", "(", "\"\"", ")", "\n", "\n", "results", ".", "to_csv", "(", "ns", ".", "out", ",", "index", "=", "False", ")", "\n", "print", "(", "f\"[{now()}] Data stored in '{ns.out.name}'\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.benchmarks.time_bench.CLI.parser": [[363, 366], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "parser", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_parser", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.benchmarks.time_bench.get_images": [[84, 92], ["numpy.random.seed", "tests.test_align.simulate_image_pair"], "function", ["home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.simulate_image_pair"], ["def", "get_images", "(", "size", ",", "stars", ",", "noise", ",", "seed", ")", ":", "\n", "    ", "\"\"\"Retrieves a pair source and target image\"\"\"", "\n", "if", "seed", "is", "not", "None", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "", "shape", "=", "(", "size", ",", "size", ")", "\n", "source", ",", "target", "=", "simulate_image_pair", "(", "\n", "shape", "=", "shape", ",", "num_stars", "=", "stars", ",", "noise_level", "=", "noise", ")", "[", ":", "2", "]", "\n", "return", "source", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.benchmarks.time_bench.get_parameters": [[94, 114], ["sklearn.model_selection.ParameterGrid", "numpy.random.RandomState", "np.random.RandomState.randint", "enumerate", "list", "len"], "function", ["None"], ["", "def", "get_parameters", "(", "sizes", ",", "stars", ",", "noises", ",", "comb_number", ",", "repeats", ",", "seed", ")", ":", "\n", "    ", "\"\"\"Create a list of dictionaries with all the combinations of the given\n    parameters.\n\n    \"\"\"", "\n", "grid", "=", "ParameterGrid", "(", "{", "\n", "\"size\"", ":", "sizes", ",", "\"stars\"", ":", "stars", ",", "\"noise\"", ":", "noises", "}", ")", "\n", "grid", "=", "list", "(", "grid", ")", "*", "comb_number", "\n", "\n", "# set the random state for run in parallel", "\n", "random", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "images_seeds", "=", "random", ".", "randint", "(", "1_000_000", ",", "size", "=", "len", "(", "grid", ")", ")", "\n", "\n", "for", "idx", ",", "g", "in", "enumerate", "(", "grid", ")", ":", "\n", "        ", "g", "[", "\"idx\"", "]", "=", "idx", "\n", "g", "[", "\"seed\"", "]", "=", "seed", "\n", "g", "[", "\"images_seed\"", "]", "=", "images_seeds", "[", "idx", "]", "\n", "g", "[", "\"repeats\"", "]", "=", "repeats", "\n", "\n", "", "return", "grid", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.benchmarks.time_bench._test": [[116, 143], ["time_bench.get_images", "timeit.Timer", "collections.OrderedDict", "timeit.Timer.repeat", "numpy.min", "enumerate", "timeit.Timer.autorange", "numpy.array"], "function", ["home.repos.pwc.inspect_result.toros-astro_astroalign.benchmarks.time_bench.get_images"], ["", "def", "_test", "(", "idx", ",", "size", ",", "stars", ",", "noise", ",", "seed", ",", "images_seed", ",", "repeats", ")", ":", "\n", "\n", "# create the two images", "\n", "    ", "source", ",", "target", "=", "get_images", "(", "\n", "size", "=", "size", ",", "stars", "=", "stars", ",", "noise", "=", "noise", ",", "seed", "=", "images_seed", ")", "\n", "\n", "# create the timer", "\n", "test_globals", "=", "{", "\"aa\"", ":", "aa", ",", "\"source\"", ":", "source", ",", "\"target\"", ":", "target", "}", "\n", "timer", "=", "timeit", ".", "Timer", "(", "stmt", "=", "STATEMENT", ",", "globals", "=", "test_globals", ")", "\n", "\n", "# find the number of loops", "\n", "loops", "=", "timer", ".", "autorange", "(", ")", "[", "0", "]", "\n", "\n", "# create a copy of the params to be returned ad result", "\n", "result", "=", "OrderedDict", "(", "{", "\n", "\"idx\"", ":", "idx", ",", "\"size\"", ":", "size", ",", "\"noise\"", ":", "noise", ",", "\"stars\"", ":", "stars", ",", "\"seed\"", ":", "seed", ",", "\n", "\"images_seed\"", ":", "images_seed", ",", "\"repeats\"", ":", "repeats", ",", "\"loops\"", ":", "loops", "}", ")", "\n", "\n", "# execute the timeit", "\n", "times", "=", "timer", ".", "repeat", "(", "repeats", ",", "loops", ")", "\n", "\n", "# store the times into the result", "\n", "result", "[", "\"time\"", "]", "=", "np", ".", "min", "(", "np", ".", "array", "(", "times", ")", "/", "loops", ")", "\n", "for", "tidx", ",", "time", "in", "enumerate", "(", "times", ")", ":", "\n", "        ", "result", "[", "f\"time_{tidx}\"", "]", "=", "time", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.benchmarks.time_bench.benchmark": [[145, 158], ["time_bench.get_parameters", "pandas.DataFrame", "joblib.Parallel", "parallel", "joblib.delayed", "tqdm.tqdm"], "function", ["home.repos.pwc.inspect_result.toros-astro_astroalign.benchmarks.time_bench.get_parameters"], ["", "def", "benchmark", "(", "sizes", "=", "SIZES", ",", "stars", "=", "STARS", ",", "noises", "=", "NOISES", ",", "\n", "comb_number", "=", "10", ",", "seed", "=", "None", ",", "repeats", "=", "REPEATS", ",", "n_jobs", "=", "-", "1", ")", ":", "\n", "\n", "    ", "grid", "=", "get_parameters", "(", "\n", "sizes", "=", "sizes", ",", "stars", "=", "stars", ",", "noises", "=", "noises", ",", "\n", "comb_number", "=", "comb_number", ",", "seed", "=", "seed", ",", "repeats", "=", "repeats", ")", "\n", "\n", "with", "joblib", ".", "Parallel", "(", "n_jobs", "=", "n_jobs", ")", "as", "parallel", ":", "\n", "        ", "results", "=", "parallel", "(", "\n", "joblib", ".", "delayed", "(", "_test", ")", "(", "**", "params", ")", "for", "params", "in", "tqdm", ".", "tqdm", "(", "grid", ")", ")", "\n", "\n", "", "df", "=", "pd", ".", "DataFrame", "(", "results", ")", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.benchmarks.time_bench.describe": [[160, 164], ["results[].describe"], "function", ["home.repos.pwc.inspect_result.toros-astro_astroalign.benchmarks.time_bench.describe"], ["", "def", "describe", "(", "results", ")", ":", "\n", "    ", "repetitions", "=", "results", ".", "repeats", ".", "values", "[", "0", "]", "\n", "resume", "=", "results", "[", "[", "\"time\"", ",", "\"loops\"", "]", "]", ".", "describe", "(", ")", "\n", "return", "repetitions", ",", "resume", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.benchmarks.time_bench.plot": [[166, 180], ["time_bench.plot.plots"], "function", ["None"], ["", "def", "plot", "(", "results", ",", "ax_size", ",", "ax_stars", ",", "ax_noise", ")", ":", "\n", "    ", "results", "=", "results", "[", "[", "\"size\"", ",", "\"stars\"", ",", "\"noise\"", ",", "\"time\"", "]", "]", "\n", "\n", "def", "plots", "(", "df", ",", "by", ",", "ax", ")", ":", "\n", "        ", "df", ".", "boxplot", "(", "by", "=", "by", ",", "column", "=", "[", "\"time\"", "]", ",", "grid", "=", "False", ",", "ax", "=", "ax", ")", "\n", "ax", ".", "set_title", "(", "f\"Time by {by.title()}\"", ")", "\n", "ax", ".", "set_ylabel", "(", "\"Seconds\"", ")", "\n", "ax", ".", "set_xlabel", "(", "by", ".", "title", "(", ")", ")", "\n", "\n", "", "plots", "(", "results", ",", "\"noise\"", ",", "ax_noise", ")", "\n", "plots", "(", "results", ",", "\"stars\"", ",", "ax_stars", ")", "\n", "plots", "(", "results", ",", "\"size\"", ",", "ax_size", ")", "\n", "\n", "return", "(", "ax_size", ",", "ax_stars", ",", "ax_noise", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.TestAlign.setUp": [[198, 218], ["test_align.simulate_image_pair", "numpy.zeros", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.simulate_image_pair"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "h", "=", "512", "# image height", "\n", "self", ".", "w", "=", "512", "# image width", "\n", "self", ".", "x_offset", "=", "10", "\n", "self", ".", "y_offset", "=", "-", "20", "\n", "self", ".", "rot_angle", "=", "50.0", "*", "np", ".", "pi", "/", "180.0", "\n", "(", "\n", "self", ".", "image", ",", "\n", "self", ".", "image_ref", ",", "\n", "self", ".", "star_ref_pos", ",", "\n", "self", ".", "star_new_pos", ",", "\n", ")", "=", "simulate_image_pair", "(", "\n", "shape", "=", "(", "self", ".", "h", ",", "self", ".", "w", ")", ",", "\n", "translation", "=", "(", "self", ".", "x_offset", ",", "self", ".", "y_offset", ")", ",", "\n", "rot_angle_deg", "=", "50.0", ",", "\n", ")", "\n", "self", ".", "image_mask", "=", "np", ".", "zeros", "(", "(", "self", ".", "h", ",", "self", ".", "w", ")", ",", "dtype", "=", "\"bool\"", ")", "\n", "self", ".", "image_ref_mask", "=", "np", ".", "zeros", "(", "(", "self", ".", "h", ",", "self", ".", "w", ")", ",", "dtype", "=", "\"bool\"", ")", "\n", "self", ".", "image_mask", "[", "10", ":", "30", ",", "70", ":", "90", "]", "=", "True", "\n", "self", ".", "image_ref_mask", "[", "10", ":", "30", ",", "20", ":", "50", "]", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.TestAlign.test_find_transform_givensources": [[219, 256], ["numpy.array", "numpy.array", "skimage.transform.estimate_transform", "numpy.random.shuffle", "astroalign.find_transform", "test_align.TestAlign.assertLess", "test_align.TestAlign.assertLess", "test_align.TestAlign.assertLess", "test_align.TestAlign.assertEqual", "test_align.TestAlign.assertEqual", "test_align.TestAlign.assertEqual", "skimage.transform.matrix_transform", "test_align.TestAlign.assertLess", "numpy.array", "numpy.linalg.norm", "numpy.linalg.norm", "mm.dot", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "methods", ["home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign.find_transform"], ["", "def", "test_find_transform_givensources", "(", "self", ")", ":", "\n", "\n", "        ", "source", "=", "np", ".", "array", "(", "\n", "[", "\n", "[", "1.4", ",", "2.2", "]", ",", "\n", "[", "5.3", ",", "1.0", "]", ",", "\n", "[", "3.7", ",", "1.5", "]", ",", "\n", "[", "10.1", ",", "9.6", "]", ",", "\n", "[", "1.3", ",", "10.2", "]", ",", "\n", "[", "7.1", ",", "2.0", "]", ",", "\n", "]", "\n", ")", "\n", "nsrc", "=", "source", ".", "shape", "[", "0", "]", "\n", "scale", "=", "1.5", "# scaling parameter", "\n", "alpha", "=", "np", ".", "pi", "/", "8.0", "# rotation angle", "\n", "mm", "=", "scale", "*", "np", ".", "array", "(", "\n", "[", "[", "np", ".", "cos", "(", "alpha", ")", ",", "-", "np", ".", "sin", "(", "alpha", ")", "]", ",", "[", "np", ".", "sin", "(", "alpha", ")", ",", "np", ".", "cos", "(", "alpha", ")", "]", "]", "\n", ")", "\n", "tx", ",", "ty", "=", "2.0", ",", "1.0", "# translation parameters", "\n", "transl", "=", "np", ".", "array", "(", "[", "nsrc", "*", "[", "tx", "]", ",", "nsrc", "*", "[", "ty", "]", "]", ")", "\n", "dest", "=", "(", "mm", ".", "dot", "(", "source", ".", "T", ")", "+", "transl", ")", ".", "T", "\n", "t_true", "=", "estimate_transform", "(", "\"similarity\"", ",", "source", ",", "dest", ")", "\n", "\n", "# disorder dest points so they don't match the order of source", "\n", "np", ".", "random", ".", "shuffle", "(", "dest", ")", "\n", "\n", "t", ",", "(", "src_pts", ",", "dst_pts", ")", "=", "aa", ".", "find_transform", "(", "source", ",", "dest", ")", "\n", "self", ".", "assertLess", "(", "t_true", ".", "scale", "-", "t", ".", "scale", ",", "1e-10", ")", "\n", "self", ".", "assertLess", "(", "t_true", ".", "rotation", "-", "t", ".", "rotation", ",", "1e-10", ")", "\n", "self", ".", "assertLess", "(", "\n", "np", ".", "linalg", ".", "norm", "(", "t_true", ".", "translation", "-", "t", ".", "translation", ")", ",", "1e-10", "\n", ")", "\n", "self", ".", "assertEqual", "(", "src_pts", ".", "shape", "[", "0", "]", ",", "dst_pts", ".", "shape", "[", "0", "]", ")", "\n", "self", ".", "assertEqual", "(", "src_pts", ".", "shape", "[", "1", "]", ",", "2", ")", "\n", "self", ".", "assertEqual", "(", "dst_pts", ".", "shape", "[", "1", "]", ",", "2", ")", "\n", "dst_pts_test", "=", "matrix_transform", "(", "src_pts", ",", "t", ".", "params", ")", "\n", "self", ".", "assertLess", "(", "np", ".", "linalg", ".", "norm", "(", "dst_pts_test", "-", "dst_pts", ")", ",", "1e-10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.TestAlign.compare_image": [[257, 280], ["the_image.astype", "sep.Background", "sep.extract", "numpy.array", "KDTree", "KDTree.query_ball_point", "len", "sep.Background.back"], "methods", ["None"], ["", "def", "compare_image", "(", "self", ",", "the_image", ")", ":", "\n", "        ", "\"\"\"Return the fraction of sources found in the reference image\"\"\"", "\n", "# pixel comparison is not good, doesn't work. Compare catalogs.", "\n", "full_algn", "=", "the_image", ".", "astype", "(", "\"float32\"", ")", "\n", "import", "sep", "\n", "\n", "bkg", "=", "sep", ".", "Background", "(", "full_algn", ")", "\n", "thresh", "=", "3.0", "*", "bkg", ".", "globalrms", "\n", "allobjs", "=", "sep", ".", "extract", "(", "full_algn", "-", "bkg", ".", "back", "(", ")", ",", "thresh", ")", "\n", "allxy", "=", "np", ".", "array", "(", "[", "[", "obj", "[", "\"x\"", "]", ",", "obj", "[", "\"y\"", "]", "]", "for", "obj", "in", "allobjs", "]", ")", "\n", "\n", "from", "scipy", ".", "spatial", "import", "KDTree", "\n", "\n", "ref_coordtree", "=", "KDTree", "(", "self", ".", "star_ref_pos", ")", "\n", "\n", "# Compare here srcs list with self.star_ref_pos", "\n", "num_sources", "=", "0", "\n", "for", "asrc", "in", "allxy", ":", "\n", "            ", "found_source", "=", "ref_coordtree", ".", "query_ball_point", "(", "asrc", ",", "3", ")", "\n", "if", "found_source", ":", "\n", "                ", "num_sources", "+=", "1", "\n", "", "", "fraction_found", "=", "num_sources", "/", "len", "(", "allxy", ")", "\n", "return", "fraction_found", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.TestAlign.test_register": [[281, 290], ["astroalign.register", "test_align.TestAlign.assertIsInstance", "test_align.TestAlign.assertIsInstance", "test_align.TestAlign.assertIs", "test_align.TestAlign.compare_image", "test_align.TestAlign.assertGreater", "numpy.dtype"], "methods", ["home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign.register", "home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.TestColorImages.compare_image"], ["", "def", "test_register", "(", "self", ")", ":", "\n", "        ", "registered_img", ",", "footp", "=", "aa", ".", "register", "(", "\n", "source", "=", "self", ".", "image", ",", "target", "=", "self", ".", "image_ref", "\n", ")", "\n", "self", ".", "assertIsInstance", "(", "registered_img", ",", "np", ".", "ndarray", ")", "\n", "self", ".", "assertIsInstance", "(", "footp", ",", "np", ".", "ndarray", ")", "\n", "self", ".", "assertIs", "(", "footp", ".", "dtype", ",", "np", ".", "dtype", "(", "\"bool\"", ")", ")", "\n", "fraction", "=", "self", ".", "compare_image", "(", "registered_img", ")", "\n", "self", ".", "assertGreater", "(", "fraction", ",", "0.85", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.TestAlign.test_register_nddata": [[291, 302], ["astropy.nddata.NDData", "astropy.nddata.NDData", "astroalign.register", "test_align.TestAlign.assertIsInstance", "test_align.TestAlign.assertIsInstance", "test_align.TestAlign.assertIs", "test_align.TestAlign.compare_image", "test_align.TestAlign.assertGreater", "numpy.dtype"], "methods", ["home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign.register", "home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.TestColorImages.compare_image"], ["", "def", "test_register_nddata", "(", "self", ")", ":", "\n", "        ", "nd_image", "=", "NDData", "(", "self", ".", "image", ",", "mask", "=", "self", ".", "image_mask", ")", "\n", "nd_image_ref", "=", "NDData", "(", "self", ".", "image_ref", ",", "mask", "=", "self", ".", "image_ref_mask", ")", "\n", "registered_img", ",", "footp", "=", "aa", ".", "register", "(", "\n", "source", "=", "nd_image", ",", "target", "=", "nd_image_ref", "\n", ")", "\n", "self", ".", "assertIsInstance", "(", "registered_img", ",", "np", ".", "ndarray", ")", "\n", "self", ".", "assertIsInstance", "(", "footp", ",", "np", ".", "ndarray", ")", "\n", "self", ".", "assertIs", "(", "footp", ".", "dtype", ",", "np", ".", "dtype", "(", "\"bool\"", ")", ")", "\n", "fraction", "=", "self", ".", "compare_image", "(", "registered_img", ")", "\n", "self", ".", "assertGreater", "(", "fraction", ",", "0.85", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.TestAlign.test_register_ccddata": [[303, 324], ["ccdproc.CCDData", "ccdproc.CCDData", "astroalign.register", "test_align.TestAlign.assertIsInstance", "test_align.TestAlign.assertIsInstance", "test_align.TestAlign.assertIs", "test_align.TestAlign.compare_image", "test_align.TestAlign.assertGreater", "numpy.dtype"], "methods", ["home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign.register", "home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.TestColorImages.compare_image"], ["", "def", "test_register_ccddata", "(", "self", ")", ":", "\n", "        ", "ccd_image", "=", "CCDData", "(", "\n", "self", ".", "image", ",", "\n", "mask", "=", "self", ".", "image_mask", ",", "\n", "meta", "=", "{", "\"object\"", ":", "\"fake galaxy\"", ",", "\"filter\"", ":", "\"R\"", "}", ",", "\n", "unit", "=", "\"adu\"", ",", "\n", ")", "\n", "ccd_image_ref", "=", "CCDData", "(", "\n", "self", ".", "image_ref", ",", "\n", "mask", "=", "self", ".", "image_ref_mask", ",", "\n", "meta", "=", "{", "\"object\"", ":", "\"fake galaxy\"", ",", "\"filter\"", ":", "\"R\"", "}", ",", "\n", "unit", "=", "\"adu\"", ",", "\n", ")", "\n", "registered_img", ",", "footp", "=", "aa", ".", "register", "(", "\n", "source", "=", "ccd_image", ",", "target", "=", "ccd_image_ref", "\n", ")", "\n", "self", ".", "assertIsInstance", "(", "registered_img", ",", "np", ".", "ndarray", ")", "\n", "self", ".", "assertIsInstance", "(", "footp", ",", "np", ".", "ndarray", ")", "\n", "self", ".", "assertIs", "(", "footp", ".", "dtype", ",", "np", ".", "dtype", "(", "\"bool\"", ")", ")", "\n", "fraction", "=", "self", ".", "compare_image", "(", "registered_img", ")", "\n", "self", ".", "assertGreater", "(", "fraction", ",", "0.85", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.TestAlign.test_register_npma": [[325, 336], ["numpy.ma.array", "numpy.ma.array", "astroalign.register", "test_align.TestAlign.assertIsInstance", "test_align.TestAlign.assertIsInstance", "test_align.TestAlign.assertIs", "test_align.TestAlign.compare_image", "test_align.TestAlign.assertGreater", "numpy.dtype"], "methods", ["home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign.register", "home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.TestColorImages.compare_image"], ["", "def", "test_register_npma", "(", "self", ")", ":", "\n", "        ", "ma_image", "=", "np", ".", "ma", ".", "array", "(", "self", ".", "image", ",", "mask", "=", "self", ".", "image_mask", ")", "\n", "ma_image_ref", "=", "np", ".", "ma", ".", "array", "(", "self", ".", "image_ref", ",", "mask", "=", "self", ".", "image_ref_mask", ")", "\n", "registered_img", ",", "footp", "=", "aa", ".", "register", "(", "\n", "source", "=", "ma_image", ",", "target", "=", "ma_image_ref", "\n", ")", "\n", "self", ".", "assertIsInstance", "(", "registered_img", ",", "np", ".", "ndarray", ")", "\n", "self", ".", "assertIsInstance", "(", "footp", ",", "np", ".", "ndarray", ")", "\n", "self", ".", "assertIs", "(", "footp", ".", "dtype", ",", "np", ".", "dtype", "(", "\"bool\"", ")", ")", "\n", "fraction", "=", "self", ".", "compare_image", "(", "registered_img", ")", "\n", "self", ".", "assertGreater", "(", "fraction", ",", "0.85", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.TestAlign.test_apply_transform_nddata": [[337, 364], ["skimage.transform.SimilarityTransform", "astropy.nddata.NDData", "astroalign.apply_transform", "numpy.linalg.norm", "test_align.TestAlign.assertLess", "test_align.TestAlign.assertTrue", "astropy.nddata.NDData", "astroalign.apply_transform", "numpy.linalg.norm", "test_align.TestAlign.assertLess", "test_align.TestAlign.assertTrue", "numpy.array", "all", "numpy.array", "all", "numpy.array", "err_mask.flatten", "numpy.array", "err_mask.flatten"], "methods", ["home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign.apply_transform", "home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign.apply_transform"], ["", "def", "test_apply_transform_nddata", "(", "self", ")", ":", "\n", "        ", "transf", "=", "SimilarityTransform", "(", "rotation", "=", "np", ".", "pi", "/", "2.0", ",", "translation", "=", "(", "1", ",", "0", ")", ")", "\n", "\n", "nd", "=", "NDData", "(", "\n", "[", "[", "0.0", ",", "1.0", "]", ",", "[", "2.0", ",", "3.0", "]", "]", ",", "mask", "=", "[", "[", "True", ",", "False", "]", ",", "[", "False", ",", "False", "]", "]", "\n", ")", "\n", "registered_img", ",", "footp", "=", "aa", ".", "apply_transform", "(", "\n", "transf", ",", "nd", ",", "nd", ",", "propagate_mask", "=", "True", "\n", ")", "\n", "err", "=", "np", ".", "linalg", ".", "norm", "(", "\n", "registered_img", "-", "np", ".", "array", "(", "[", "[", "2.0", ",", "0.0", "]", ",", "[", "3.0", ",", "1.0", "]", "]", ")", "\n", ")", "\n", "self", ".", "assertLess", "(", "err", ",", "1e-6", ")", "\n", "err_mask", "=", "footp", "==", "np", ".", "array", "(", "[", "[", "False", ",", "True", "]", ",", "[", "False", ",", "False", "]", "]", ")", "\n", "self", ".", "assertTrue", "(", "all", "(", "err_mask", ".", "flatten", "(", ")", ")", ")", "\n", "\n", "# Test now if there is no assigned mask during creation", "\n", "nd", "=", "NDData", "(", "[", "[", "0.0", ",", "1.0", "]", ",", "[", "2.0", ",", "3.0", "]", "]", ")", "\n", "registered_img", ",", "footp", "=", "aa", ".", "apply_transform", "(", "\n", "transf", ",", "nd", ",", "nd", ",", "propagate_mask", "=", "True", "\n", ")", "\n", "err", "=", "np", ".", "linalg", ".", "norm", "(", "\n", "registered_img", "-", "np", ".", "array", "(", "[", "[", "2.0", ",", "0.0", "]", ",", "[", "3.0", ",", "1.0", "]", "]", ")", "\n", ")", "\n", "self", ".", "assertLess", "(", "err", ",", "1e-6", ")", "\n", "err_mask", "=", "footp", "==", "np", ".", "array", "(", "[", "[", "False", ",", "False", "]", ",", "[", "False", ",", "False", "]", "]", ")", "\n", "self", ".", "assertTrue", "(", "all", "(", "err_mask", ".", "flatten", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.TestAlign.test_apply_transform_ccddata": [[365, 394], ["skimage.transform.SimilarityTransform", "ccdproc.CCDData", "astroalign.apply_transform", "numpy.linalg.norm", "test_align.TestAlign.assertLess", "test_align.TestAlign.assertTrue", "ccdproc.CCDData", "astroalign.apply_transform", "numpy.linalg.norm", "test_align.TestAlign.assertLess", "test_align.TestAlign.assertTrue", "numpy.array", "all", "numpy.array", "all", "numpy.array", "err_mask.flatten", "numpy.array", "err_mask.flatten"], "methods", ["home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign.apply_transform", "home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign.apply_transform"], ["", "def", "test_apply_transform_ccddata", "(", "self", ")", ":", "\n", "\n", "        ", "transf", "=", "SimilarityTransform", "(", "rotation", "=", "np", ".", "pi", "/", "2.0", ",", "translation", "=", "(", "1", ",", "0", ")", ")", "\n", "\n", "cd", "=", "CCDData", "(", "\n", "[", "[", "0.0", ",", "1.0", "]", ",", "[", "2.0", ",", "3.0", "]", "]", ",", "\n", "mask", "=", "[", "[", "True", ",", "False", "]", ",", "[", "False", ",", "False", "]", "]", ",", "\n", "unit", "=", "\"adu\"", ",", "\n", ")", "\n", "registered_img", ",", "footp", "=", "aa", ".", "apply_transform", "(", "\n", "transf", ",", "cd", ",", "cd", ",", "propagate_mask", "=", "True", "\n", ")", "\n", "err", "=", "np", ".", "linalg", ".", "norm", "(", "\n", "registered_img", "-", "np", ".", "array", "(", "[", "[", "2.0", ",", "0.0", "]", ",", "[", "3.0", ",", "1.0", "]", "]", ")", "\n", ")", "\n", "self", ".", "assertLess", "(", "err", ",", "1e-6", ")", "\n", "err_mask", "=", "footp", "==", "np", ".", "array", "(", "[", "[", "False", ",", "True", "]", ",", "[", "False", ",", "False", "]", "]", ")", "\n", "self", ".", "assertTrue", "(", "all", "(", "err_mask", ".", "flatten", "(", ")", ")", ")", "\n", "\n", "cd", "=", "CCDData", "(", "[", "[", "0.0", ",", "1.0", "]", ",", "[", "2.0", ",", "3.0", "]", "]", ",", "unit", "=", "\"adu\"", ")", "\n", "registered_img", ",", "footp", "=", "aa", ".", "apply_transform", "(", "\n", "transf", ",", "cd", ",", "cd", ",", "propagate_mask", "=", "True", "\n", ")", "\n", "err", "=", "np", ".", "linalg", ".", "norm", "(", "\n", "registered_img", "-", "np", ".", "array", "(", "[", "[", "2.0", ",", "0.0", "]", ",", "[", "3.0", ",", "1.0", "]", "]", ")", "\n", ")", "\n", "self", ".", "assertLess", "(", "err", ",", "1e-6", ")", "\n", "err_mask", "=", "footp", "==", "np", ".", "array", "(", "[", "[", "False", ",", "False", "]", ",", "[", "False", ",", "False", "]", "]", ")", "\n", "self", ".", "assertTrue", "(", "all", "(", "err_mask", ".", "flatten", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.TestAlign.test_apply_transform_npma": [[395, 423], ["skimage.transform.SimilarityTransform", "numpy.array", "numpy.ma.array", "astroalign.apply_transform", "numpy.linalg.norm", "test_align.TestAlign.assertLess", "test_align.TestAlign.assertTrue", "numpy.ma.array", "astroalign.apply_transform", "numpy.linalg.norm", "test_align.TestAlign.assertLess", "test_align.TestAlign.assertTrue", "numpy.array", "all", "numpy.array", "all", "numpy.array", "err_mask.flatten", "numpy.array", "err_mask.flatten"], "methods", ["home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign.apply_transform", "home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign.apply_transform"], ["", "def", "test_apply_transform_npma", "(", "self", ")", ":", "\n", "        ", "from", "skimage", ".", "transform", "import", "SimilarityTransform", "\n", "\n", "transf", "=", "SimilarityTransform", "(", "rotation", "=", "np", ".", "pi", "/", "2.0", ",", "translation", "=", "(", "1", ",", "0", ")", ")", "\n", "nparr", "=", "np", ".", "array", "(", "[", "[", "0.0", ",", "1.0", "]", ",", "[", "2.0", ",", "3.0", "]", "]", ")", "\n", "mask", "=", "[", "[", "True", ",", "False", "]", ",", "[", "False", ",", "False", "]", "]", "\n", "\n", "ma", "=", "np", ".", "ma", ".", "array", "(", "nparr", ",", "mask", "=", "mask", ")", "\n", "registered_img", ",", "footp", "=", "aa", ".", "apply_transform", "(", "\n", "transf", ",", "ma", ",", "ma", ",", "propagate_mask", "=", "True", "\n", ")", "\n", "err", "=", "np", ".", "linalg", ".", "norm", "(", "\n", "registered_img", "-", "np", ".", "array", "(", "[", "[", "2.0", ",", "0.0", "]", ",", "[", "3.0", ",", "1.0", "]", "]", ")", "\n", ")", "\n", "self", ".", "assertLess", "(", "err", ",", "1e-6", ")", "\n", "err_mask", "=", "footp", "==", "np", ".", "array", "(", "[", "[", "False", ",", "True", "]", ",", "[", "False", ",", "False", "]", "]", ")", "\n", "self", ".", "assertTrue", "(", "all", "(", "err_mask", ".", "flatten", "(", ")", ")", ")", "\n", "\n", "ma", "=", "np", ".", "ma", ".", "array", "(", "nparr", ")", "\n", "registered_img", ",", "footp", "=", "aa", ".", "apply_transform", "(", "\n", "transf", ",", "ma", ",", "ma", ",", "propagate_mask", "=", "True", "\n", ")", "\n", "err", "=", "np", ".", "linalg", ".", "norm", "(", "\n", "registered_img", "-", "np", ".", "array", "(", "[", "[", "2.0", ",", "0.0", "]", ",", "[", "3.0", ",", "1.0", "]", "]", ")", "\n", ")", "\n", "self", ".", "assertLess", "(", "err", ",", "1e-6", ")", "\n", "err_mask", "=", "footp", "==", "np", ".", "array", "(", "[", "[", "False", ",", "False", "]", ",", "[", "False", ",", "False", "]", "]", ")", "\n", "self", ".", "assertTrue", "(", "all", "(", "err_mask", ".", "flatten", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.TestAlign.test_fill_value": [[424, 430], ["astroalign.register", "test_align.TestAlign.assertTrue", "test_align.TestAlign.assertTrue", "all", "all"], "methods", ["home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign.register"], ["", "def", "test_fill_value", "(", "self", ")", ":", "\n", "        ", "registered_img", ",", "footp", "=", "aa", ".", "register", "(", "\n", "source", "=", "self", ".", "image", ",", "target", "=", "self", ".", "image_ref", ",", "fill_value", "=", "-", "9999.99", "\n", ")", "\n", "self", ".", "assertTrue", "(", "all", "(", "registered_img", "[", "footp", "]", "==", "-", "9999.99", ")", ")", "\n", "self", ".", "assertTrue", "(", "all", "(", "registered_img", "[", "~", "footp", "]", "!=", "-", "9999.99", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.TestAlign.test_find_sources": [[431, 446], ["astroalign._find_sources", "KDTree", "test_align.TestAlign.assertGreater", "KDTree.query_ball_point", "float", "float", "len"], "methods", ["home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign._find_sources"], ["", "def", "test_find_sources", "(", "self", ")", ":", "\n", "        ", "srcs", "=", "aa", ".", "_find_sources", "(", "self", ".", "image_ref", ")", "\n", "\n", "from", "scipy", ".", "spatial", "import", "KDTree", "\n", "\n", "ref_coordtree", "=", "KDTree", "(", "self", ".", "star_ref_pos", ")", "\n", "\n", "# Compare here srcs list with self.star_ref_pos", "\n", "num_sources", "=", "0", "\n", "for", "asrc", "in", "srcs", ":", "\n", "            ", "found_source", "=", "ref_coordtree", ".", "query_ball_point", "(", "asrc", ",", "3", ")", "\n", "if", "found_source", ":", "\n", "                ", "num_sources", "+=", "1", "\n", "", "", "fraction_found", "=", "float", "(", "num_sources", ")", "/", "float", "(", "len", "(", "srcs", ")", ")", "\n", "self", ".", "assertGreater", "(", "fraction_found", ",", "0.85", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.TestAlign.test_dtypes": [[447, 453], ["astroalign.register", "astroalign.register", "astroalign.register", "astroalign.register", "test_align.TestAlign.image.astype", "test_align.TestAlign.image.astype", "test_align.TestAlign.image.astype", "test_align.TestAlign.image.astype"], "methods", ["home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign.register", "home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign.register", "home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign.register", "home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign.register"], ["", "def", "test_dtypes", "(", "self", ")", ":", "\n", "# aa.register(self.image.astype('float16'), self.image_ref)", "\n", "        ", "aa", ".", "register", "(", "self", ".", "image", ".", "astype", "(", "\"float32\"", ")", ",", "self", ".", "image_ref", ")", "\n", "aa", ".", "register", "(", "self", ".", "image", ".", "astype", "(", "\"float64\"", ")", ",", "self", ".", "image_ref", ")", "\n", "aa", ".", "register", "(", "self", ".", "image", ".", "astype", "(", "\"int32\"", ")", ",", "self", ".", "image_ref", ")", "\n", "aa", ".", "register", "(", "self", ".", "image", ".", "astype", "(", "\"int64\"", ")", ",", "self", ".", "image_ref", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.TestAlign.test_consistent_invert": [[454, 462], ["astroalign.find_transform", "astroalign.find_transform", "tinv.params.dot", "test_align.TestAlign.assertLess", "numpy.random.rand", "t.params.dot", "numpy.linalg.norm", "numpy.linalg.norm"], "methods", ["home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign.find_transform", "home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign.find_transform"], ["", "def", "test_consistent_invert", "(", "self", ")", ":", "\n", "        ", "t", ",", "__", "=", "aa", ".", "find_transform", "(", "self", ".", "image", ",", "self", ".", "image_ref", ")", "\n", "tinv", ",", "__", "=", "aa", ".", "find_transform", "(", "self", ".", "image_ref", ",", "self", ".", "image", ")", "\n", "rpoint", "=", "np", ".", "random", ".", "rand", "(", "3", ")", "*", "self", ".", "h", "\n", "rpoint", "[", "2", "]", "=", "1.0", "\n", "rtransf", "=", "tinv", ".", "params", ".", "dot", "(", "t", ".", "params", ".", "dot", "(", "rpoint", ")", ")", "\n", "err", "=", "np", ".", "linalg", ".", "norm", "(", "rpoint", "-", "rtransf", ")", "/", "np", ".", "linalg", ".", "norm", "(", "rpoint", ")", "\n", "self", ".", "assertLess", "(", "err", ",", "1e-2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.TestAlign.test_unrepeated_sources": [[463, 488], ["numpy.array", "numpy.array", "numpy.array", "astroalign.find_transform", "test_align.TestAlign.assertEqual", "test_align.TestAlign.assertLessEqual", "set", "test_align.TestAlign.assertEqual", "set", "test_align.TestAlign.assertEqual", "test_align.TestAlign.assertTrue", "test_align.TestAlign.assertTrue", "len", "len", "len", "len", "len", "len", "len", "len", "numpy.array.dot", "set", "set", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "methods", ["home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign.find_transform"], ["", "def", "test_unrepeated_sources", "(", "self", ")", ":", "\n", "        ", "source", "=", "np", ".", "array", "(", "\n", "[", "[", "0.0", ",", "2.0", "]", ",", "[", "1.0", ",", "3.0", "]", ",", "[", "2.1", ",", "1.75", "]", ",", "[", "3.5", ",", "1.0", "]", ",", "[", "4.0", ",", "2.0", "]", "]", "\n", ")", "\n", "R", "=", "np", ".", "array", "(", "\n", "[", "\n", "[", "np", ".", "cos", "(", "30.0", "*", "np", ".", "pi", "/", "180", ")", ",", "np", ".", "sin", "(", "30.0", "*", "np", ".", "pi", "/", "180", ")", "]", ",", "\n", "[", "-", "np", ".", "sin", "(", "30.0", "*", "np", ".", "pi", "/", "180", ")", ",", "np", ".", "cos", "(", "30.0", "*", "np", ".", "pi", "/", "180", ")", "]", ",", "\n", "]", "\n", ")", "\n", "tr", "=", "np", ".", "array", "(", "[", "-", "0.5", ",", "2.5", "]", ")", "\n", "target", "=", "R", ".", "dot", "(", "source", ".", "T", ")", ".", "T", "+", "tr", "\n", "best_t", ",", "(", "s_list", ",", "t_list", ")", "=", "aa", ".", "find_transform", "(", "source", ",", "target", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "s_list", ")", ",", "len", "(", "t_list", ")", ")", "\n", "self", ".", "assertLessEqual", "(", "len", "(", "s_list", ")", ",", "len", "(", "source", ")", ")", "\n", "# Assert no repeated sources used", "\n", "source_set", "=", "set", "(", "(", "x", ",", "y", ")", "for", "x", ",", "y", "in", "s_list", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "s_list", ")", ",", "len", "(", "source_set", ")", ")", "\n", "# Assert no repeated targets used", "\n", "target_set", "=", "set", "(", "(", "x", ",", "y", ")", "for", "x", ",", "y", "in", "t_list", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "t_list", ")", ",", "len", "(", "target_set", ")", ")", "\n", "# Assert s_list is a subset of source", "\n", "self", ".", "assertTrue", "(", "source_set", "<=", "set", "(", "(", "x", ",", "y", ")", "for", "x", ",", "y", "in", "source", ")", ")", "\n", "# Assert t_list is a subset of target", "\n", "self", ".", "assertTrue", "(", "target_set", "<=", "set", "(", "(", "x", ",", "y", ")", "for", "x", ",", "y", "in", "target", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.TestFewSources.setUp": [[491, 497], ["None"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "h", "=", "512", "# image height", "\n", "self", ".", "w", "=", "512", "# image width", "\n", "self", ".", "x_offset", "=", "10", "\n", "self", ".", "y_offset", "=", "-", "20", "\n", "self", ".", "rot_angle", "=", "50.0", "*", "np", ".", "pi", "/", "180.0", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.TestFewSources.check_if_findtransform_ok": [[498, 546], ["numpy.array", "test_align.simulate_image_pair", "test_align.TestFewSources.star_new_pos.copy", "skimage.transform.estimate_transform", "numpy.random.shuffle", "astroalign.find_transform", "test_align.TestFewSources.assertLess", "test_align.TestFewSources.assertLess", "test_align.TestFewSources.assertLess", "test_align.TestFewSources.assertEqual", "test_align.TestFewSources.assertLessEqual", "test_align.TestFewSources.assertEqual", "test_align.TestFewSources.assertEqual", "skimage.transform.matrix_transform", "test_align.TestFewSources.assertLess", "numpy.array", "numpy.array", "numpy.linalg.norm", "numpy.linalg.norm"], "methods", ["home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.simulate_image_pair", "home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign.find_transform"], ["", "def", "check_if_findtransform_ok", "(", "self", ",", "numstars", ")", ":", "\n", "        ", "\"\"\"Helper function to test find_transform with common test code\n        for 3, 4, 5, and 6 stars\"\"\"", "\n", "\n", "if", "numstars", ">", "6", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "# x and y of stars in the ref frame (int's)", "\n", "", "self", ".", "star_refx", "=", "np", ".", "array", "(", "[", "100", ",", "120", ",", "400", ",", "400", ",", "200", ",", "200", "]", ")", "[", ":", "numstars", "]", "\n", "self", ".", "star_refy", "=", "np", ".", "array", "(", "[", "150", ",", "200", ",", "200", ",", "320", ",", "210", ",", "350", "]", ")", "[", ":", "numstars", "]", "\n", "self", ".", "num_stars", "=", "numstars", "\n", "# Fluxes of stars", "\n", "self", ".", "star_f", "=", "np", ".", "array", "(", "numstars", "*", "[", "700.0", "]", ")", "\n", "\n", "(", "\n", "self", ".", "image", ",", "\n", "self", ".", "image_ref", ",", "\n", "self", ".", "star_ref_pos", ",", "\n", "self", ".", "star_new_pos", ",", "\n", ")", "=", "simulate_image_pair", "(", "\n", "shape", "=", "(", "self", ".", "h", ",", "self", ".", "w", ")", ",", "\n", "translation", "=", "(", "self", ".", "x_offset", ",", "self", ".", "y_offset", ")", ",", "\n", "rot_angle_deg", "=", "50.0", ",", "\n", "num_stars", "=", "self", ".", "num_stars", ",", "\n", "star_refx", "=", "self", ".", "star_refx", ",", "\n", "star_refy", "=", "self", ".", "star_refy", ",", "\n", "star_flux", "=", "self", ".", "star_f", ",", "\n", ")", "\n", "\n", "source", "=", "self", ".", "star_ref_pos", "\n", "dest", "=", "self", ".", "star_new_pos", ".", "copy", "(", ")", "\n", "t_true", "=", "estimate_transform", "(", "\"similarity\"", ",", "source", ",", "dest", ")", "\n", "\n", "# disorder dest points so they don't match the order of source", "\n", "np", ".", "random", ".", "shuffle", "(", "dest", ")", "\n", "\n", "t", ",", "(", "src_pts", ",", "dst_pts", ")", "=", "aa", ".", "find_transform", "(", "source", ",", "dest", ")", "\n", "self", ".", "assertLess", "(", "t_true", ".", "scale", "-", "t", ".", "scale", ",", "1e-10", ")", "\n", "self", ".", "assertLess", "(", "t_true", ".", "rotation", "-", "t", ".", "rotation", ",", "1e-10", ")", "\n", "self", ".", "assertLess", "(", "\n", "np", ".", "linalg", ".", "norm", "(", "t_true", ".", "translation", "-", "t", ".", "translation", ")", ",", "1.0", "\n", ")", "\n", "self", ".", "assertEqual", "(", "src_pts", ".", "shape", "[", "0", "]", ",", "dst_pts", ".", "shape", "[", "0", "]", ")", "\n", "self", ".", "assertLessEqual", "(", "src_pts", ".", "shape", "[", "0", "]", ",", "source", ".", "shape", "[", "0", "]", ")", "\n", "self", ".", "assertEqual", "(", "src_pts", ".", "shape", "[", "1", "]", ",", "2", ")", "\n", "self", ".", "assertEqual", "(", "dst_pts", ".", "shape", "[", "1", "]", ",", "2", ")", "\n", "dst_pts_test", "=", "matrix_transform", "(", "src_pts", ",", "t", ".", "params", ")", "\n", "self", ".", "assertLess", "(", "np", ".", "linalg", ".", "norm", "(", "dst_pts_test", "-", "dst_pts", ")", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.TestFewSources.test_find_transform_twosources": [[547, 550], ["test_align.TestFewSources.assertRaises", "test_align.TestFewSources.check_if_findtransform_ok"], "methods", ["home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.TestFewSources.check_if_findtransform_ok"], ["", "def", "test_find_transform_twosources", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "assertRaises", "(", "Exception", ")", ":", "\n", "            ", "self", ".", "check_if_findtransform_ok", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.TestFewSources.test_find_transform_threesources": [[551, 553], ["test_align.TestFewSources.check_if_findtransform_ok"], "methods", ["home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.TestFewSources.check_if_findtransform_ok"], ["", "", "def", "test_find_transform_threesources", "(", "self", ")", ":", "\n", "        ", "self", ".", "check_if_findtransform_ok", "(", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.TestFewSources.test_find_transform_foursources": [[554, 556], ["test_align.TestFewSources.check_if_findtransform_ok"], "methods", ["home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.TestFewSources.check_if_findtransform_ok"], ["", "def", "test_find_transform_foursources", "(", "self", ")", ":", "\n", "        ", "self", ".", "check_if_findtransform_ok", "(", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.TestFewSources.test_find_transform_fivesources": [[557, 559], ["test_align.TestFewSources.check_if_findtransform_ok"], "methods", ["home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.TestFewSources.check_if_findtransform_ok"], ["", "def", "test_find_transform_fivesources", "(", "self", ")", ":", "\n", "        ", "self", ".", "check_if_findtransform_ok", "(", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.TestFewSources.test_find_transform_sixsources": [[560, 562], ["test_align.TestFewSources.check_if_findtransform_ok"], "methods", ["home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.TestFewSources.check_if_findtransform_ok"], ["", "def", "test_find_transform_sixsources", "(", "self", ")", ":", "\n", "        ", "self", ".", "check_if_findtransform_ok", "(", "6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.TestFewSources.check_if_register_ok": [[563, 606], ["numpy.array", "test_align.simulate_image_pair", "astroalign.register", "test_align.TestFewSources.star_new_pos.copy", "skimage.transform.estimate_transform", "astroalign.apply_transform", "test_align.TestFewSources.assertLess", "numpy.array", "numpy.array", "numpy.linalg.norm", "numpy.linalg.norm"], "methods", ["home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.simulate_image_pair", "home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign.register", "home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign.apply_transform"], ["", "def", "check_if_register_ok", "(", "self", ",", "numstars", ")", ":", "\n", "        ", "\"\"\"Helper function to test register with common test code\n        for 3, 4, 5, and 6 stars\"\"\"", "\n", "\n", "if", "numstars", ">", "6", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "# x and y of stars in the ref frame (int's)", "\n", "", "self", ".", "star_refx", "=", "np", ".", "array", "(", "[", "100", ",", "120", ",", "400", ",", "400", ",", "200", ",", "200", "]", ")", "[", ":", "numstars", "]", "\n", "self", ".", "star_refy", "=", "np", ".", "array", "(", "[", "150", ",", "200", ",", "200", ",", "320", ",", "210", ",", "350", "]", ")", "[", ":", "numstars", "]", "\n", "self", ".", "num_stars", "=", "numstars", "\n", "# Fluxes of stars", "\n", "self", ".", "star_f", "=", "np", ".", "array", "(", "numstars", "*", "[", "700.0", "]", ")", "\n", "\n", "(", "\n", "self", ".", "image", ",", "\n", "self", ".", "image_ref", ",", "\n", "self", ".", "star_ref_pos", ",", "\n", "self", ".", "star_new_pos", ",", "\n", ")", "=", "simulate_image_pair", "(", "\n", "shape", "=", "(", "self", ".", "h", ",", "self", ".", "w", ")", ",", "\n", "translation", "=", "(", "self", ".", "x_offset", ",", "self", ".", "y_offset", ")", ",", "\n", "rot_angle_deg", "=", "50.0", ",", "\n", "noise_level", "=", "50", ",", "\n", "num_stars", "=", "self", ".", "num_stars", ",", "\n", "star_refx", "=", "self", ".", "star_refx", ",", "\n", "star_refy", "=", "self", ".", "star_refy", ",", "\n", "star_flux", "=", "self", ".", "star_f", ",", "\n", ")", "\n", "\n", "aligned", ",", "footprint", "=", "aa", ".", "register", "(", "self", ".", "image_ref", ",", "self", ".", "image", ")", "\n", "\n", "source", "=", "self", ".", "star_ref_pos", "\n", "dest", "=", "self", ".", "star_new_pos", ".", "copy", "(", ")", "\n", "t_true", "=", "estimate_transform", "(", "\"similarity\"", ",", "source", ",", "dest", ")", "\n", "aligned_true", ",", "fp", "=", "aa", ".", "apply_transform", "(", "\n", "t_true", ",", "self", ".", "image_ref", ",", "self", ".", "image", "\n", ")", "\n", "\n", "err", "=", "np", ".", "linalg", ".", "norm", "(", "(", "aligned_true", "-", "aligned", ")", "[", "fp", "]", ",", "1", ")", "/", "np", ".", "linalg", ".", "norm", "(", "\n", "(", "aligned_true", ")", "[", "fp", "]", ",", "1", "\n", ")", "\n", "self", ".", "assertLess", "(", "err", ",", "1e-1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.TestFewSources.test_register_twosources": [[607, 610], ["test_align.TestFewSources.assertRaises", "test_align.TestFewSources.check_if_register_ok"], "methods", ["home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.TestFewSources.check_if_register_ok"], ["", "def", "test_register_twosources", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "assertRaises", "(", "Exception", ")", ":", "\n", "            ", "self", ".", "check_if_register_ok", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.TestFewSources.test_register_threesources": [[611, 613], ["test_align.TestFewSources.check_if_register_ok"], "methods", ["home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.TestFewSources.check_if_register_ok"], ["", "", "def", "test_register_threesources", "(", "self", ")", ":", "\n", "        ", "self", ".", "check_if_register_ok", "(", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.TestFewSources.test_register_foursources": [[614, 616], ["test_align.TestFewSources.check_if_register_ok"], "methods", ["home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.TestFewSources.check_if_register_ok"], ["", "def", "test_register_foursources", "(", "self", ")", ":", "\n", "        ", "self", ".", "check_if_register_ok", "(", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.TestFewSources.test_register_fivesources": [[617, 619], ["test_align.TestFewSources.check_if_register_ok"], "methods", ["home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.TestFewSources.check_if_register_ok"], ["", "def", "test_register_fivesources", "(", "self", ")", ":", "\n", "        ", "self", ".", "check_if_register_ok", "(", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.TestFewSources.test_register_sixsources": [[620, 622], ["test_align.TestFewSources.check_if_register_ok"], "methods", ["home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.TestFewSources.check_if_register_ok"], ["", "def", "test_register_sixsources", "(", "self", ")", ":", "\n", "        ", "self", ".", "check_if_register_ok", "(", "6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.TestColorImages.setUp": [[625, 668], ["test_align.simulate_image_pair", "numpy.array", "numpy.array", "numpy.moveaxis", "numpy.moveaxis", "numpy.array", "numpy.array", "numpy.moveaxis", "numpy.moveaxis", "image_new.copy", "image_new.copy", "image_new.copy", "image_ref.copy", "image_ref.copy", "image_ref.copy", "image_new.copy", "image_new.copy", "image_new.copy", "image_ref.copy", "image_ref.copy", "image_ref.copy", "numpy.ones", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.simulate_image_pair"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "h", "=", "512", "# image height", "\n", "self", ".", "w", "=", "512", "# image width", "\n", "self", ".", "x_offset", "=", "10", "\n", "self", ".", "y_offset", "=", "-", "20", "\n", "self", ".", "rot_angle", "=", "50.0", "*", "np", ".", "pi", "/", "180.0", "\n", "(", "\n", "image_new", ",", "\n", "image_ref", ",", "\n", "self", ".", "star_ref_pos", ",", "\n", "self", ".", "star_new_pos", ",", "\n", ")", "=", "simulate_image_pair", "(", "\n", "shape", "=", "(", "self", ".", "h", ",", "self", ".", "w", ")", ",", "\n", "translation", "=", "(", "self", ".", "x_offset", ",", "self", ".", "y_offset", ")", ",", "\n", "rot_angle_deg", "=", "50.0", ",", "\n", ")", "\n", "self", ".", "image_rgb_new", "=", "np", ".", "array", "(", "\n", "[", "image_new", ".", "copy", "(", ")", ",", "image_new", ".", "copy", "(", ")", ",", "image_new", ".", "copy", "(", ")", "]", "\n", ")", "\n", "self", ".", "image_rgb_ref", "=", "np", ".", "array", "(", "\n", "[", "image_ref", ".", "copy", "(", ")", ",", "image_ref", ".", "copy", "(", ")", ",", "image_ref", ".", "copy", "(", ")", "]", "\n", ")", "\n", "self", ".", "image_rgb_new", "=", "np", ".", "moveaxis", "(", "self", ".", "image_rgb_new", ",", "0", ",", "-", "1", ")", "\n", "self", ".", "image_rgb_ref", "=", "np", ".", "moveaxis", "(", "self", ".", "image_rgb_ref", ",", "0", ",", "-", "1", ")", "\n", "\n", "self", ".", "image_rgba_new", "=", "np", ".", "array", "(", "\n", "[", "\n", "image_new", ".", "copy", "(", ")", ",", "\n", "image_new", ".", "copy", "(", ")", ",", "\n", "image_new", ".", "copy", "(", ")", ",", "\n", "255.0", "*", "np", ".", "ones", "(", "image_new", ".", "shape", ")", ",", "\n", "]", "\n", ")", "\n", "self", ".", "image_rgba_ref", "=", "np", ".", "array", "(", "\n", "[", "\n", "image_ref", ".", "copy", "(", ")", ",", "\n", "image_ref", ".", "copy", "(", ")", ",", "\n", "image_ref", ".", "copy", "(", ")", ",", "\n", "255.0", "*", "np", ".", "ones", "(", "image_new", ".", "shape", ")", ",", "\n", "]", "\n", ")", "\n", "self", ".", "image_rgba_new", "=", "np", ".", "moveaxis", "(", "self", ".", "image_rgba_new", ",", "0", ",", "-", "1", ")", "\n", "self", ".", "image_rgba_ref", "=", "np", ".", "moveaxis", "(", "self", ".", "image_rgba_ref", ",", "0", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.TestColorImages.compare_image": [[669, 692], ["numpy.mean", "sep.Background", "sep.extract", "numpy.array", "KDTree", "KDTree.query_ball_point", "len", "sep.Background.back"], "methods", ["None"], ["", "def", "compare_image", "(", "self", ",", "the_image", ")", ":", "\n", "        ", "\"\"\"Return the fraction of sources found in the reference image\"\"\"", "\n", "# pixel comparison is not good, doesn't work. Compare catalogs.", "\n", "full_algn", "=", "np", ".", "mean", "(", "the_image", ",", "axis", "=", "-", "1", ",", "dtype", "=", "\"float32\"", ")", "\n", "import", "sep", "\n", "\n", "bkg", "=", "sep", ".", "Background", "(", "full_algn", ")", "\n", "thresh", "=", "3.0", "*", "bkg", ".", "globalrms", "\n", "allobjs", "=", "sep", ".", "extract", "(", "full_algn", "-", "bkg", ".", "back", "(", ")", ",", "thresh", ")", "\n", "allxy", "=", "np", ".", "array", "(", "[", "[", "obj", "[", "\"x\"", "]", ",", "obj", "[", "\"y\"", "]", "]", "for", "obj", "in", "allobjs", "]", ")", "\n", "\n", "from", "scipy", ".", "spatial", "import", "KDTree", "\n", "\n", "ref_coordtree", "=", "KDTree", "(", "self", ".", "star_ref_pos", ")", "\n", "\n", "# Compare here srcs list with self.star_ref_pos", "\n", "num_sources", "=", "0", "\n", "for", "asrc", "in", "allxy", ":", "\n", "            ", "found_source", "=", "ref_coordtree", ".", "query_ball_point", "(", "asrc", ",", "3", ")", "\n", "if", "found_source", ":", "\n", "                ", "num_sources", "+=", "1", "\n", "", "", "fraction_found", "=", "num_sources", "/", "len", "(", "allxy", ")", "\n", "return", "fraction_found", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.TestColorImages.test_register_rgb_channels": [[693, 703], ["astroalign.register", "test_align.TestColorImages.assertEqual", "test_align.TestColorImages.compare_image", "test_align.TestColorImages.assertGreater", "test_align.TestColorImages.assertTrue", "test_align.TestColorImages.assertTrue"], "methods", ["home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign.register", "home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.TestColorImages.compare_image"], ["", "def", "test_register_rgb_channels", "(", "self", ")", ":", "\n", "        ", "\"Test register works with RGB images\"", "\n", "registered", ",", "footp", "=", "aa", ".", "register", "(", "\n", "source", "=", "self", ".", "image_rgb_new", ",", "target", "=", "self", ".", "image_rgb_ref", "\n", ")", "\n", "self", ".", "assertEqual", "(", "registered", ".", "ndim", ",", "self", ".", "image_rgb_new", ".", "ndim", ")", "\n", "fraction", "=", "self", ".", "compare_image", "(", "registered", ")", "\n", "self", ".", "assertGreater", "(", "fraction", ",", "0.70", ")", "\n", "self", ".", "assertTrue", "(", "footp", ".", "ndim", "==", "2", ")", "\n", "self", ".", "assertTrue", "(", "footp", ".", "shape", "==", "(", "self", ".", "h", ",", "self", ".", "w", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.TestColorImages.test_register_rgba_channels": [[704, 714], ["astroalign.register", "test_align.TestColorImages.assertEqual", "test_align.TestColorImages.compare_image", "test_align.TestColorImages.assertGreater", "test_align.TestColorImages.assertTrue", "test_align.TestColorImages.assertTrue"], "methods", ["home.repos.pwc.inspect_result.toros-astro_astroalign.None.astroalign.register", "home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.TestColorImages.compare_image"], ["", "def", "test_register_rgba_channels", "(", "self", ")", ":", "\n", "        ", "\"Test register works with RGB images\"", "\n", "registered", ",", "footp", "=", "aa", ".", "register", "(", "\n", "source", "=", "self", ".", "image_rgba_new", ",", "target", "=", "self", ".", "image_rgba_ref", "\n", ")", "\n", "self", ".", "assertEqual", "(", "registered", ".", "ndim", ",", "self", ".", "image_rgba_new", ".", "ndim", ")", "\n", "fraction", "=", "self", ".", "compare_image", "(", "registered", ")", "\n", "self", ".", "assertGreater", "(", "fraction", ",", "0.70", ")", "\n", "self", ".", "assertTrue", "(", "footp", ".", "ndim", "==", "2", ")", "\n", "self", ".", "assertTrue", "(", "footp", ".", "shape", "==", "(", "self", ".", "h", ",", "self", ".", "w", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.gauss": [[32, 42], ["numpy.meshgrid", "numpy.exp", "np.exp.sum", "range", "range"], "function", ["None"], ["def", "gauss", "(", "shape", "=", "(", "11", ",", "11", ")", ",", "center", "=", "None", ",", "sx", "=", "2", ",", "sy", "=", "2", ")", ":", "\n", "    ", "\"Returns a Gaussian of given shape, normalized to 1.\"", "\n", "h", ",", "w", "=", "shape", "\n", "if", "center", "is", "None", ":", "\n", "        ", "center", "=", "(", "(", "h", "-", "1", ")", "/", "2.0", ",", "(", "w", "-", "1", ")", "/", "2.0", ")", "\n", "", "x0", ",", "y0", "=", "center", "\n", "x", ",", "y", "=", "np", ".", "meshgrid", "(", "range", "(", "w", ")", ",", "range", "(", "h", ")", ")", "\n", "krnl", "=", "np", ".", "exp", "(", "-", "0.5", "*", "(", "(", "x", "-", "x0", ")", "**", "2", "/", "sx", "**", "2", "+", "(", "y", "-", "y0", ")", "**", "2", "/", "sy", "**", "2", ")", ")", "\n", "krnl", "/=", "krnl", ".", "sum", "(", ")", "\n", "return", "krnl", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.simulate_image_pair": [[44, 137], ["test_align.gauss", "numpy.random.poisson().astype", "numpy.random.poisson().astype", "zip", "signal.convolve2d", "zip", "numpy.array", "numpy.array", "zip", "signal.convolve2d", "numpy.array", "numpy.array", "max", "numpy.random.randint", "numpy.random.randint", "numpy.array().astype", "newx.append", "newy.append", "numpy.array().astype", "list", "list", "numpy.sqrt", "abs", "abs", "numpy.random.poisson", "numpy.random.poisson", "inframe.append", "inframe.append", "zip", "zip", "signal.convolve2d.std", "numpy.random.pareto", "numpy.array", "numpy.array", "int", "int", "int", "int", "int", "int", "numpy.cos", "numpy.sin", "numpy.sin", "numpy.cos", "int", "int"], "function", ["home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.gauss"], ["", "def", "simulate_image_pair", "(", "\n", "shape", "=", "(", "512", ",", "512", ")", ",", "\n", "kshape", "=", "(", "10", ",", "10", ")", ",", "\n", "noise_level", "=", "500", ",", "\n", "gshape", "=", "(", "21", ",", "21", ")", ",", "\n", "gsigma", "=", "1.5", ",", "\n", "translation", "=", "(", "10", ",", "-", "20", ")", ",", "\n", "rot_angle_deg", "=", "50.0", ",", "\n", "num_stars", "=", "1500", ",", "\n", "star_refx", "=", "None", ",", "\n", "star_refy", "=", "None", ",", "\n", "star_flux", "=", "None", ",", "\n", ")", ":", "\n", "    ", "from", "scipy", "import", "signal", "\n", "\n", "h", ",", "w", "=", "shape", "# image height and width", "\n", "kh", ",", "kw", "=", "kshape", "# kernel height and width", "\n", "psf", "=", "gauss", "(", "shape", "=", "gshape", ",", "sx", "=", "gsigma", ",", "sy", "=", "gsigma", ")", "\n", "# Transformation parameters", "\n", "x_offset", ",", "y_offset", "=", "translation", "\n", "\n", "rot_angle", "=", "rot_angle_deg", "*", "np", ".", "pi", "/", "180.0", "\n", "\n", "big_r", "=", "0.5", "*", "np", ".", "sqrt", "(", "h", "**", "2", "+", "w", "**", "2", ")", "+", "max", "(", "abs", "(", "x_offset", ")", ",", "abs", "(", "y_offset", ")", ")", "\n", "\n", "image_ref", "=", "np", ".", "random", ".", "poisson", "(", "noise_level", ",", "size", "=", "(", "h", "+", "kh", ",", "w", "+", "kw", ")", ")", ".", "astype", "(", "\n", "\"float64\"", "\n", ")", "\n", "image", "=", "np", ".", "random", ".", "poisson", "(", "noise_level", ",", "size", "=", "(", "h", "+", "kh", ",", "w", "+", "kw", ")", ")", ".", "astype", "(", "\n", "\"float64\"", "\n", ")", "\n", "\n", "# x and y of stars in the ref frame (int's)", "\n", "if", "star_refx", "is", "None", ":", "\n", "        ", "star_refx", "=", "np", ".", "random", ".", "randint", "(", "\n", "low", "=", "int", "(", "-", "big_r", ")", "+", "w", "/", "2", ",", "high", "=", "int", "(", "big_r", ")", "+", "w", "/", "2", ",", "size", "=", "(", "num_stars", ",", ")", "\n", ")", "\n", "", "if", "star_refy", "is", "None", ":", "\n", "        ", "star_refy", "=", "np", ".", "random", ".", "randint", "(", "\n", "low", "=", "int", "(", "-", "big_r", ")", "+", "h", "/", "2", ",", "high", "=", "int", "(", "big_r", ")", "+", "h", "/", "2", ",", "size", "=", "(", "num_stars", ",", ")", "\n", ")", "\n", "# Fluxes of stars", "\n", "", "if", "star_flux", "is", "None", ":", "\n", "        ", "a", ",", "m", "=", "0.8", ",", "3.0", "*", "image_ref", ".", "std", "(", ")", "# This are Pareto dist coeff's", "\n", "star_flux", "=", "(", "1.0", "+", "np", ".", "random", ".", "pareto", "(", "a", ",", "num_stars", ")", ")", "*", "m", "\n", "\n", "# inframe will contain the stars in the reference image", "\n", "", "inframe", "=", "[", "]", "\n", "ymax", ",", "xmax", "=", "image_ref", ".", "shape", "\n", "for", "x", ",", "y", ",", "f", "in", "zip", "(", "star_refx", ",", "star_refy", ",", "star_flux", ")", ":", "\n", "        ", "if", "x", ">", "0", "and", "x", "<", "xmax", "and", "y", ">", "0", "and", "y", "<", "ymax", ":", "\n", "            ", "inframe", ".", "append", "(", "(", "int", "(", "x", ")", ",", "int", "(", "y", ")", ",", "f", ")", ")", "\n", "", "", "ref_cols", ",", "ref_rows", ",", "ref_flux", "=", "np", ".", "array", "(", "inframe", ")", ".", "astype", "(", "int", ")", ".", "T", "\n", "\n", "image_ref", "[", "ref_rows", ",", "ref_cols", "]", "+=", "ref_flux", "\n", "image_ref", "=", "signal", ".", "convolve2d", "(", "image_ref", ",", "psf", ",", "mode", "=", "\"same\"", ")", "\n", "image_ref", "=", "image_ref", "[", "kh", "//", "2", ":", "-", "kh", "//", "2", ",", "kw", "//", "2", ":", "-", "kw", "//", "2", "]", "\n", "# Adjust here the positions of rows and cols after cropping image", "\n", "ref_cols", "-=", "kw", "//", "2", "\n", "ref_rows", "-=", "kh", "//", "2", "\n", "\n", "newx", ",", "newy", "=", "[", "]", ",", "[", "]", "\n", "for", "x", ",", "y", "in", "zip", "(", "star_refx", ",", "star_refy", ")", ":", "\n", "        ", "x", "-=", "w", "/", "2", "\n", "y", "-=", "h", "/", "2", "\n", "xp", "=", "x", "*", "np", ".", "cos", "(", "rot_angle", ")", "-", "y", "*", "np", ".", "sin", "(", "rot_angle", ")", "+", "x_offset", "\n", "yp", "=", "x", "*", "np", ".", "sin", "(", "rot_angle", ")", "+", "y", "*", "np", ".", "cos", "(", "rot_angle", ")", "+", "y_offset", "\n", "xp", "+=", "w", "/", "2", "\n", "yp", "+=", "h", "/", "2", "\n", "newx", ".", "append", "(", "xp", ")", "\n", "newy", ".", "append", "(", "yp", ")", "\n", "# x and y of stars in the new frame (float's)", "\n", "", "star_newx", "=", "np", ".", "array", "(", "newx", ")", "\n", "star_newy", "=", "np", ".", "array", "(", "newy", ")", "\n", "\n", "inframe", "=", "[", "]", "\n", "ymax", ",", "xmax", "=", "image", ".", "shape", "\n", "for", "x", ",", "y", ",", "f", "in", "zip", "(", "star_newx", ",", "star_newy", ",", "star_flux", ")", ":", "\n", "        ", "if", "x", ">", "0", "and", "x", "<", "xmax", "and", "y", ">", "0", "and", "y", "<", "xmax", ":", "\n", "            ", "inframe", ".", "append", "(", "(", "int", "(", "x", ")", ",", "int", "(", "y", ")", ",", "f", ")", ")", "\n", "", "", "new_cols", ",", "new_rows", ",", "new_flux", "=", "np", ".", "array", "(", "inframe", ")", ".", "astype", "(", "int", ")", ".", "T", "\n", "\n", "image", "[", "new_rows", ",", "new_cols", "]", "+=", "new_flux", "\n", "image", "=", "signal", ".", "convolve2d", "(", "image", ",", "psf", ",", "mode", "=", "\"same\"", ")", "\n", "image", "=", "image", "[", "kh", "//", "2", ":", "-", "kh", "//", "2", ",", "kw", "//", "2", ":", "-", "kw", "//", "2", "]", "\n", "# Adjust here the positions of rows and cols after cropping image", "\n", "new_cols", "-=", "kw", "//", "2", "\n", "new_rows", "-=", "kh", "//", "2", "\n", "\n", "star_ref_pos", "=", "np", ".", "array", "(", "list", "(", "zip", "(", "ref_cols", ",", "ref_rows", ")", ")", ")", "\n", "star_new_pos", "=", "np", ".", "array", "(", "list", "(", "zip", "(", "new_cols", ",", "new_rows", ")", ")", ")", "\n", "\n", "return", "image", ",", "image_ref", ",", "star_ref_pos", ",", "star_new_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.simulate_image_single": [[139, 195], ["test_align.gauss", "numpy.random.poisson().astype", "zip", "signal.convolve2d", "numpy.array", "numpy.sqrt", "numpy.random.randint", "numpy.random.randint", "numpy.array().astype", "list", "numpy.random.poisson", "inframe.append", "zip", "signal.convolve2d.std", "numpy.random.pareto", "numpy.array", "int", "int", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.toros-astro_astroalign.tests.test_align.gauss"], ["", "def", "simulate_image_single", "(", "\n", "shape", "=", "(", "512", ",", "512", ")", ",", "\n", "kshape", "=", "(", "10", ",", "10", ")", ",", "\n", "noise_level", "=", "500", ",", "\n", "gshape", "=", "(", "21", ",", "21", ")", ",", "\n", "gsigma", "=", "1.5", ",", "\n", "num_stars", "=", "1500", ",", "\n", "star_refx", "=", "None", ",", "\n", "star_refy", "=", "None", ",", "\n", "star_flux", "=", "None", ",", "\n", ")", ":", "\n", "    ", "from", "scipy", "import", "signal", "\n", "\n", "h", ",", "w", "=", "shape", "# image height and width", "\n", "kh", ",", "kw", "=", "kshape", "# kernel height and width", "\n", "psf", "=", "gauss", "(", "shape", "=", "gshape", ",", "sx", "=", "gsigma", ",", "sy", "=", "gsigma", ")", "\n", "\n", "big_r", "=", "0.5", "*", "np", ".", "sqrt", "(", "h", "**", "2", "+", "w", "**", "2", ")", "\n", "\n", "# Sky background", "\n", "image", "=", "np", ".", "random", ".", "poisson", "(", "noise_level", ",", "size", "=", "(", "h", "+", "kh", ",", "w", "+", "kw", ")", ")", ".", "astype", "(", "\n", "\"float64\"", "\n", ")", "\n", "\n", "# x and y of stars in the ref frame (int's)", "\n", "if", "star_refx", "is", "None", ":", "\n", "        ", "star_refx", "=", "np", ".", "random", ".", "randint", "(", "\n", "low", "=", "int", "(", "-", "big_r", ")", "+", "w", "/", "2", ",", "high", "=", "int", "(", "big_r", ")", "+", "w", "/", "2", ",", "size", "=", "(", "num_stars", ",", ")", "\n", ")", "\n", "", "if", "star_refy", "is", "None", ":", "\n", "        ", "star_refy", "=", "np", ".", "random", ".", "randint", "(", "\n", "low", "=", "int", "(", "-", "big_r", ")", "+", "h", "/", "2", ",", "high", "=", "int", "(", "big_r", ")", "+", "h", "/", "2", ",", "size", "=", "(", "num_stars", ",", ")", "\n", ")", "\n", "# Fluxes of stars", "\n", "", "if", "star_flux", "is", "None", ":", "\n", "        ", "a", ",", "m", "=", "0.8", ",", "3.0", "*", "image", ".", "std", "(", ")", "# This are Pareto dist coeff's", "\n", "star_flux", "=", "(", "1.0", "+", "np", ".", "random", ".", "pareto", "(", "a", ",", "num_stars", ")", ")", "*", "m", "\n", "\n", "# inframe will contain the stars in the reference image", "\n", "", "inframe", "=", "[", "]", "\n", "ymax", ",", "xmax", "=", "image", ".", "shape", "\n", "for", "x", ",", "y", ",", "f", "in", "zip", "(", "star_refx", ",", "star_refy", ",", "star_flux", ")", ":", "\n", "        ", "if", "x", ">", "0", "and", "x", "<", "xmax", "and", "y", ">", "0", "and", "y", "<", "ymax", ":", "\n", "            ", "inframe", ".", "append", "(", "(", "int", "(", "x", ")", ",", "int", "(", "y", ")", ",", "f", ")", ")", "\n", "", "", "cols", ",", "rows", ",", "flux", "=", "np", ".", "array", "(", "inframe", ")", ".", "astype", "(", "int", ")", ".", "T", "\n", "\n", "image", "[", "rows", ",", "cols", "]", "+=", "flux", "\n", "image", "=", "signal", ".", "convolve2d", "(", "image", ",", "psf", ",", "mode", "=", "\"same\"", ")", "\n", "image", "=", "image", "[", "kh", "//", "2", ":", "-", "kh", "//", "2", ",", "kw", "//", "2", ":", "-", "kw", "//", "2", "]", "\n", "# Adjust here the positions of rows and cols after cropping image", "\n", "cols", "-=", "kw", "//", "2", "\n", "rows", "-=", "kh", "//", "2", "\n", "\n", "star_pos", "=", "np", ".", "array", "(", "list", "(", "zip", "(", "cols", ",", "rows", ")", ")", ")", "\n", "\n", "return", "image", ",", "star_pos", "\n", "\n"]]}