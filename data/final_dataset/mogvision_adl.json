{"home.repos.pwc.inspect_result.mogvision_adl.PyTorch.inference.Test.__init__": [[43, 59], ["utils.util.boolean_string"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.util.utils.boolean_string"], ["    ", "def", "__init__", "(", "self", ",", "\n", "device", ",", "\n", "num_workers", ",", "\n", "args", ",", "\n", "config", ",", "\n", "eval_params", ")", ":", "\n", "\n", "# Device config", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "args", ".", "save_images", "=", "util", ".", "boolean_string", "(", "self", ".", "args", ".", "save_images", ")", "\n", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "config", "=", "config", "[", "'data'", "]", "\n", "self", ".", "num_workers", "=", "num_workers", "\n", "self", ".", "eval_params", "=", "eval_params", "\n", "self", ".", "sigma", "=", "config", "[", "'data'", "]", "[", "'test_stdVec'", "]", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.PyTorch.inference.Test.__call__": [[61, 111], ["utils.util.makedirs_fn", "utils.util.get_model", "utils.dataloader_test.DataLoader_cls", "utils.dataloader_test.DataLoader_cls.", "utils.util.get_model.eval", "str", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "int", "batch_i[].to().to", "batch_i[].to().to", "utils.util.get_model.", "print", "print", "inference.Test.eval_params.items", "print", "os.path.splitext", "[].split", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "utils.util.makedirs_fn", "torchvision.utils.save_image", "torchvision.utils.save_image", "torchvision.utils.save_image", "fn", "print", "int", "batch_i[].to", "batch_i[].to", "file_.split", "file_.split"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.util.utils.makedirs_fn", "home.repos.pwc.inspect_result.mogvision_adl.utils.util.get_model", "home.repos.pwc.inspect_result.mogvision_adl.util.utils.makedirs_fn"], ["", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "load_save_device", "=", "self", ".", "config", "[", "'localhost'", "]", "if", "self", ".", "config", "[", "'localhost'", "]", "is", "not", "None", "else", "None", "\n", "\n", "output_dir", "=", "util", ".", "makedirs_fn", "(", "root_dir", ",", "self", ".", "args", ".", "EXPERIMENT", ",", "'results'", ",", "str", "(", "int", "(", "self", ".", "sigma", ")", ")", ")", "\n", "\n", "# Load model =============", "\n", "ckpt_dir", "=", "f'{root_dir}/{self.args.EXPERIMENT}/ADL/checkpoints'", "\n", "model_name", "=", "'efficient_Unet'", "\n", "model", "=", "util", ".", "get_model", "(", "model_name", ",", "self", ".", "args", ".", "CHANNELS_NUM", ",", "self", ".", "args", ".", "CHANNELS_NUM", ",", "ckpt_dir", ",", "device", ")", "\n", "\n", "\n", "# Load Data =============", "\n", "dataLoader_obj", "=", "DataLoader_cls", "(", "num_workers", "=", "self", ".", "num_workers", ",", "\n", "channels_num", "=", "self", ".", "args", ".", "CHANNELS_NUM", ",", "\n", "test_ds_dir", "=", "self", ".", "args", ".", "test_dirs", ",", "\n", "config", "=", "self", ".", "config", "\n", ")", "\n", "ds_test_loader", "=", "dataLoader_obj", "(", ")", "\n", "\n", "\n", "# apply model and get results", "\n", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "batch_i", "in", "enumerate", "(", "ds_test_loader", ")", ":", "\n", "                ", "extension", "=", "os", ".", "path", ".", "splitext", "(", "batch_i", "[", "'filename'", "]", "[", "0", "]", ")", "[", "1", "]", "\n", "file_", "=", "batch_i", "[", "'filename'", "]", "[", "0", "]", ".", "split", "(", "extension", ")", "[", "0", "]", "\n", "out_filename", "=", "f'ADL_sigma_{int(self.sigma)}_{file_}{extension}'", "\n", "#file_=batch_i['dir'][0]+batch_i['filename'][0]", "\n", "\n", "# prediction", "\n", "gt", "=", "batch_i", "[", "'x'", "]", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "inp", "=", "batch_i", "[", "'y'", "]", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "\n", "ypred", ",", "_", ",", "_", "=", "model", "(", "inp", ")", "\n", "print", "(", "torch", ".", "min", "(", "ypred", ")", ",", "torch", ".", "max", "(", "ypred", ")", ")", "\n", "\n", "if", "self", ".", "args", ".", "save_images", ":", "\n", "                    ", "filename", "=", "file_", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "out_dir", "=", "util", ".", "makedirs_fn", "(", "output_dir", ",", "'/'", ".", "join", "(", "file_", ".", "split", "(", "'/'", ")", "[", "0", ":", "-", "1", "]", ")", ")", "\n", "save_image", "(", "inp", ",", "f'{out_dir}/{filename}_inp.png'", ")", "\n", "save_image", "(", "ypred", ",", "f'{out_dir}/{filename}_pred.png'", ")", "\n", "save_image", "(", "gt", ",", "f'{out_dir}/{filename}_gt.png'", ")", "\n", "\n", "\n", "# evaluation", "\n", "", "print", "(", "out_filename", ")", "\n", "for", "key", ",", "fn", "in", "self", ".", "eval_params", ".", "items", "(", ")", ":", "\n", "                    ", "val", "=", "fn", "(", "gt", ",", "ypred", ")", "\n", "print", "(", "f'{key}: {val:.3f}'", ")", "\n", "", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.PyTorch.train.Train.__init__": [[53, 94], ["utils.util.struct_cls", "utils.util.struct_cls", "utils.util.struct_cls.config.update", "utils.util.struct_cls", "utils.util.struct_cls.config.update", "utils.util.struct_cls", "utils.util.struct_cls.config.update"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "\n", "args", ":", "ArgumentParser", ",", "\n", "config", ":", "Dict", ",", "\n", "loss_denoiser", ":", "Dict", ",", "\n", "eval_params_denoiser", ":", "Dict", ",", "\n", "loss_weights_denoiser", ":", "Dict", ",", "\n", "gpus", ":", "int", ")", ":", "\n", "\t\t", "self", ".", "args", "=", "args", "\n", "self", ".", "config_data", "=", "config", "[", "'data'", "]", "\n", "self", ".", "gpus", "=", "gpus", "\n", "\n", "# Configure DistributedDataParallel (DDP) ", "\n", "ddp", "=", "util", ".", "struct_cls", "(", ")", "\n", "ddp", ".", "rank", "=", "0", "\n", "ddp", ".", "world_size", "=", "1", "\n", "self", ".", "ddp", "=", "ddp", "\n", "\n", "# Denoiser", "\n", "denoiser", "=", "util", ".", "struct_cls", "(", ")", "\n", "denoiser", ".", "loss", "=", "loss_denoiser", "\n", "denoiser", ".", "loss_weights", "=", "loss_weights_denoiser", "\n", "denoiser", ".", "eval_params", "=", "eval_params_denoiser", "\n", "denoiser", ".", "config", "=", "config", "[", "'denoiser'", "]", "\n", "denoiser", ".", "config", ".", "update", "(", "config", "[", "'STEPS'", "]", ")", "\n", "denoiser", ".", "model", "=", "args", ".", "DENOISER", "\n", "self", ".", "denoiser", "=", "denoiser", "\n", "\n", "\n", "# Discriminator", "\n", "disc", "=", "util", ".", "struct_cls", "(", ")", "\n", "disc", ".", "config", "=", "config", "[", "'discriminator'", "]", "\n", "disc", ".", "config", ".", "update", "(", "config", "[", "'STEPS'", "]", ")", "\n", "disc", ".", "model", "=", "disc", ".", "config", "[", "'model'", "]", "\n", "self", ".", "disc", "=", "disc", "\n", "\n", "# ADL", "\n", "adl", "=", "util", ".", "struct_cls", "(", ")", "\n", "adl", ".", "model", "=", "config", "[", "'model'", "]", "\n", "adl", ".", "config", "=", "config", "[", "'ADL'", "]", "\n", "adl", ".", "config", ".", "update", "(", "config", "[", "'STEPS'", "]", ")", "\n", "self", ".", "adl", "=", "adl", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.PyTorch.train.Train.__call__": [[96, 122], ["utils.util.prep", "torch.spawn", "torch.spawn", "torch.spawn", "torch.spawn", "torch.spawn", "train.main", "utils.util.prep", "utils.util.prep", "utils.util.prep", "utils.util.prep"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.utils.util.prep", "home.repos.pwc.inspect_result.mogvision_adl.PyTorch.train.main", "home.repos.pwc.inspect_result.mogvision_adl.utils.util.prep", "home.repos.pwc.inspect_result.mogvision_adl.utils.util.prep", "home.repos.pwc.inspect_result.mogvision_adl.utils.util.prep", "home.repos.pwc.inspect_result.mogvision_adl.utils.util.prep"], ["", "def", "__call__", "(", "self", ",", "PHASE", ")", ":", "\n", "\n", "\t\t", "if", "PHASE", "==", "1", ":", "\n", "# get denoiser`s params", "\n", "\t\t\t", "params", "=", "util", ".", "prep", "(", "self", ".", "denoiser", ",", "'denoiser'", ",", "dir_path", ",", "args", ".", "EXPERIMENT", ")", "\n", "\n", "", "elif", "PHASE", "==", "2", ":", "\n", "# get discriminator`s params", "\n", "\t\t\t", "params", "=", "util", ".", "prep", "(", "self", ".", "disc", ",", "'discriminator'", ",", "dir_path", ",", "args", ".", "EXPERIMENT", ")", "\n", "\n", "", "elif", "PHASE", "==", "3", ":", "\n", "# get ADL`s params", "\n", "\t\t\t", "params", "=", "util", ".", "prep", "(", "self", ".", "adl", ",", "'ADL'", ",", "dir_path", ",", "args", ".", "EXPERIMENT", ")", "\n", "params", ".", "denoiser", "=", "util", ".", "prep", "(", "self", ".", "denoiser", ",", "'denoiser'", ",", "dir_path", ",", "args", ".", "EXPERIMENT", ")", "\n", "params", ".", "disc", "=", "util", ".", "prep", "(", "self", ".", "disc", ",", "'discriminator'", ",", "dir_path", ",", "args", ".", "EXPERIMENT", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "distributed", ":", "\n", "\t\t\t", "world_size", "=", "self", ".", "ddp", ".", "world_size", "*", "self", ".", "gpus", "\n", "mp", ".", "spawn", "(", "main_dist", ",", "\n", "args", "=", "(", "world_size", ",", "self", ".", "args", ",", "self", ".", "config_data", ",", "\n", "self", ".", "ddp", ",", "params", ",", "PHASE", ")", ",", "\n", "nprocs", "=", "world_size", ",", "\n", "join", "=", "True", "\n", ")", "\n", "", "else", ":", "\n", "\t\t\t", "main", "(", "self", ".", "args", ",", "self", ".", "config_data", ",", "params", ",", "PHASE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.PyTorch.train.main": [[127, 176], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "print", "utils.dataloader.DataLoader_cls", "utils.dataloader.DataLoader_cls.", "print", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "zip", "model.denoiser_trainer.Denoiser_Trainer", "model.denoiser_trainer.Denoiser_Trainer.", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "int", "int", "len", "len", "len", "enumerate", "model.discriminator_trainer.Discriminator_Trainer", "model.discriminator_trainer.Discriminator_Trainer.", "print", "model.adl_trainer.ADL_Trainer", "model.adl_trainer.ADL_Trainer.", "data[].size", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "function", ["None"], ["", "", "", "def", "main", "(", "args", ",", "config_data", ",", "params", ",", "PHASE", ")", ":", "\n", "\t", "\"\"\" single gpu trainer\"\"\"", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "print", "(", "\"Using {} for training\"", ".", "format", "(", "device", ")", ")", "\n", "\n", "# Load Data =============", "\n", "dataLoader_obj", "=", "DataLoader_cls", "(", "batch_size", "=", "int", "(", "config_data", "[", "'batch_size'", "]", ")", ",", "\n", "num_workers", "=", "int", "(", "args", ".", "num_workers", ")", ",", "\n", "channels_num", "=", "args", ".", "CHANNELS_NUM", ",", "\n", "train_ds_dir", "=", "args", ".", "train_dirs", ",", "\n", "test_ds_dir", "=", "args", ".", "test_dirs", ",", "\n", "config", "=", "config_data", ",", "\n", "distributed", "=", "False", ")", "\n", "ds_train_loader", ",", "ds_valid_loader", ",", "ds_test_loader", "=", "dataLoader_obj", "(", ")", "\n", "print", "(", "'Train size: {} batches\\nVal size: {} batches \\nTest size: {} batches'", ".", "format", "(", "len", "(", "ds_train_loader", ")", ",", "\n", "len", "(", "ds_valid_loader", ")", ",", "len", "(", "ds_test_loader", ")", ")", ")", "\n", "\n", "if", "Debug", ":", "\n", "\t\t", "for", "mode", ",", "ds", "in", "zip", "(", "[", "'train'", ",", "'val'", ",", "'test'", "]", ",", "[", "ds_train_loader", ",", "ds_valid_loader", ",", "ds_test_loader", "]", ")", ":", "\n", "\t\t\t", "for", "batch_idx", ",", "data", "in", "enumerate", "(", "ds", ",", "0", ")", ":", "\n", "\t\t\t\t", "print", "(", "'{}: {}-gpu: {}>>> {}, {}, [{:0.3f},{:0.3f}]'", ".", "format", "(", "mode", ",", "batch_idx", ",", "device", ",", "\n", "data", "[", "'filename'", "]", ",", "data", "[", "'x'", "]", ".", "size", "(", ")", ",", "torch", ".", "min", "(", "data", "[", "'y'", "]", ")", ",", "torch", ".", "max", "(", "data", "[", "'y'", "]", ")", ")", ")", "\n", "", "", "return", "\n", "\n", "\n", "# create writer =============", "\n", "", "writer_numerical", "=", "SummaryWriter", "(", "params", ".", "writer_numerical_dir", ")", "\n", "writer_imgs", "=", "SummaryWriter", "(", "params", ".", "writer_imgs_dir", ")", "\n", "\n", "if", "PHASE", "==", "1", ":", "\n", "# Warmup denoiser =============", "\n", "\t\t", "denoiser_module", "=", "Denoiser_Trainer", "(", "params", ",", "device", ",", "\n", "args", ".", "CHANNELS_NUM", ",", "args", ".", "CHANNELS_NUM", ",", "\n", "writer_numerical", ",", "writer_imgs", ",", "distributed", "=", "False", ")", "\n", "denoiser_module", "(", "ds_train_loader", ",", "ds_valid_loader", ",", "ds_test_loader", ")", "\n", "", "elif", "PHASE", "==", "2", ":", "\n", "# Warmup discriminator =============", "\n", "\t\t", "discriminator_module", "=", "Discriminator_Trainer", "(", "params", ",", "device", ",", "\n", "args", ".", "CHANNELS_NUM", ",", "args", ".", "CHANNELS_NUM", ",", "\n", "writer_numerical", ",", "writer_imgs", ",", "distributed", "=", "False", ")", "\n", "discriminator_module", "(", "ds_train_loader", ")", "\n", "\n", "", "elif", "PHASE", "==", "3", ":", "\n", "# Run ADL =============", "\n", "\t\t", "adl_module", "=", "ADL_Trainer", "(", "params", ",", "device", ",", "\n", "args", ".", "CHANNELS_NUM", ",", "args", ".", "CHANNELS_NUM", ",", "\n", "writer_numerical", ",", "writer_imgs", ",", "distributed", "=", "False", ")", "\n", "adl_module", "(", "ds_train_loader", ",", "ds_valid_loader", ",", "ds_test_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.PyTorch.train.main_dist": [[178, 247], ["torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.init_process_group", "int", "int", "utils.dataloader.DataLoader_cls", "utils.dataloader.DataLoader_cls.", "torch.barrier", "utils.util.cleanup", "print", "zip", "utils.util.cleanup", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "model.denoiser_trainer.Denoiser_Trainer", "model.denoiser_trainer.Denoiser_Trainer.", "enumerate", "model.discriminator_trainer.Discriminator_Trainer", "model.discriminator_trainer.Discriminator_Trainer.", "len", "len", "len", "print", "model.adl_trainer.ADL_Trainer", "model.adl_trainer.ADL_Trainer.", "data[].size"], "function", ["home.repos.pwc.inspect_result.mogvision_adl.utils.util.cleanup", "home.repos.pwc.inspect_result.mogvision_adl.utils.util.cleanup"], ["", "", "def", "main_dist", "(", "gpu", ",", "ngpus_per_node", ",", "\n", "args", ",", "config_data", ",", "ddp", ",", "\n", "params", ",", "PHASE", ")", ":", "\n", "\n", "# Configure DDP =============", "\n", "\t", "ddp", ".", "gpu", "=", "gpu", "\n", "ddp", ".", "rank", "=", "ddp", ".", "rank", "*", "ngpus_per_node", "+", "gpu", "\n", "torch", ".", "cuda", ".", "set_device", "(", "ddp", ".", "gpu", ")", "\n", "\n", "dist", ".", "init_process_group", "(", "backend", "=", "'nccl'", ",", "init_method", "=", "'tcp://127.0.0.1:2345'", ",", "\n", "world_size", "=", "ddp", ".", "world_size", ",", "rank", "=", "ddp", ".", "rank", ")", "\n", "\n", "batch_size", "=", "int", "(", "config_data", "[", "'batch_size'", "]", "/", "ngpus_per_node", ")", "\n", "num_workers", "=", "int", "(", "args", ".", "num_workers", "/", "ngpus_per_node", ")", "\n", "\n", "# Load Data =============", "\n", "dataLoader_obj", "=", "DataLoader_cls", "(", "batch_size", "=", "batch_size", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "channels_num", "=", "args", ".", "CHANNELS_NUM", ",", "\n", "train_ds_dir", "=", "args", ".", "train_dirs", ",", "\n", "test_ds_dir", "=", "args", ".", "test_dirs", ",", "\n", "config", "=", "config_data", ",", "\n", "distributed", "=", "True", ")", "\n", "ds_train_loader", ",", "ds_valid_loader", ",", "ds_test_loader", "=", "dataLoader_obj", "(", ")", "\n", "if", "ddp", ".", "rank", "==", "0", ":", "\n", "\t\t", "print", "(", "'Train size: {} batches\\nVal size: {} batches\\nTest size: {} batches'", ".", "format", "(", "len", "(", "ds_train_loader", ")", ",", "\n", "len", "(", "ds_valid_loader", ")", ",", "len", "(", "ds_test_loader", ")", ")", ")", "\n", "\n", "", "if", "Debug", ":", "\n", "\t\t", "for", "mode", ",", "ds", "in", "zip", "(", "[", "'train'", ",", "'val'", ",", "'test'", "]", ",", "[", "ds_train_loader", ",", "ds_valid_loader", ",", "ds_test_loader", "]", ")", ":", "\n", "\t\t\t", "for", "batch_idx", ",", "data", "in", "enumerate", "(", "ds", ",", "0", ")", ":", "\n", "\t\t\t\t", "print", "(", "'{}: {}-gpu: {}>>> {}, {}'", ".", "format", "(", "mode", ",", "batch_idx", ",", "gpu", ",", "\n", "data", "[", "'filename'", "]", ",", "data", "[", "'x'", "]", ".", "size", "(", ")", ",", ")", ")", "\n", "", "", "util", ".", "cleanup", "(", ")", "\n", "return", "\n", "\n", "# synchronize gpus =============", "\n", "", "dist", ".", "barrier", "(", ")", "\n", "\n", "# Create writer =============", "\n", "if", "ddp", ".", "rank", "==", "0", ":", "\n", "\t\t", "writer_numerical", "=", "SummaryWriter", "(", "params", ".", "writer_numerical_dir", ")", "\n", "writer_imgs", "=", "SummaryWriter", "(", "params", ".", "writer_imgs_dir", ")", "\n", "", "else", ":", "\n", "\t\t", "writer_numerical", "=", "writer_imgs", "=", "None", "\n", "\n", "\n", "", "if", "PHASE", "==", "1", ":", "\n", "# Warmup denoiser =============", "\n", "\t\t", "denoiser_module", "=", "Denoiser_Trainer", "(", "params", ",", "ddp", ".", "rank", ",", "\n", "args", ".", "CHANNELS_NUM", ",", "args", ".", "CHANNELS_NUM", ",", "\n", "writer_numerical", ",", "writer_imgs", ",", "distributed", "=", "True", ")", "\n", "denoiser_module", "(", "ds_train_loader", ",", "ds_valid_loader", ",", "ds_test_loader", ")", "\n", "\n", "", "elif", "PHASE", "==", "2", ":", "\n", "# Warmup discriminator =============", "\n", "\t\t", "discriminator_module", "=", "Discriminator_Trainer", "(", "params", ",", "ddp", ".", "rank", ",", "\n", "args", ".", "CHANNELS_NUM", ",", "args", ".", "CHANNELS_NUM", ",", "\n", "writer_numerical", ",", "writer_imgs", ",", "distributed", "=", "True", ")", "\n", "discriminator_module", "(", "ds_train_loader", ")", "\n", "\n", "", "elif", "PHASE", "==", "3", ":", "\n", "# Run ADL =============", "\n", "\t\t", "adl_module", "=", "ADL_Trainer", "(", "params", ",", "ddp", ".", "rank", ",", "\n", "args", ".", "CHANNELS_NUM", ",", "args", ".", "CHANNELS_NUM", ",", "\n", "writer_numerical", ",", "writer_imgs", ",", "distributed", "=", "True", ")", "\n", "adl_module", "(", "ds_train_loader", ",", "ds_valid_loader", ",", "ds_test_loader", ")", "\n", "\n", "", "util", ".", "cleanup", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.utils.transform_collections.ToTensor_fn.__call__": [[9, 14], ["sample.keys", "torch.from_numpy", "isinstance"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "for", "k", "in", "sample", ".", "keys", "(", ")", ":", "\n", "            ", "if", "(", "sample", "[", "k", "]", "is", "not", "False", ")", "and", "(", "not", "isinstance", "(", "sample", "[", "k", "]", ",", "str", ")", ")", ":", "\n", "                ", "sample", "[", "k", "]", "=", "torch", ".", "from_numpy", "(", "sample", "[", "k", "]", ")", "\n", "", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.utils.transform_collections.Normalization.__call__": [[17, 22], ["sample.keys", "isinstance"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "for", "k", "in", "sample", ".", "keys", "(", ")", ":", "\n", "            ", "if", "(", "sample", "[", "k", "]", "is", "not", "False", ")", "and", "(", "not", "isinstance", "(", "sample", "[", "k", "]", ",", "str", ")", ")", ":", "\n", "                ", "sample", "[", "k", "]", "/=", "255.", "\n", "", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.utils.transform_collections.ImRotate90.__init__": [[25, 27], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "p", ")", ":", "\n", "        ", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.utils.transform_collections.ImRotate90.__call__": [[28, 38], ["numpy.random.randint", "numpy.random.randint", "sample.keys", "numpy.rot90().copy", "isinstance", "numpy.rot90"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "assert", "1", ">=", "self", ".", "p", ">=", "0", ",", "'p is limited in [0 1]'", "\n", "p", "=", "self", ".", "p", "*", "100", "\n", "\n", "if", "np", ".", "random", ".", "randint", "(", "100", ",", "size", "=", "1", ")", "<=", "p", ":", "\n", "            ", "rand_", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "4", ",", "size", "=", "1", ")", "\n", "for", "k", "in", "sample", ".", "keys", "(", ")", ":", "\n", "                ", "if", "(", "sample", "[", "k", "]", "is", "not", "False", ")", "and", "(", "not", "isinstance", "(", "sample", "[", "k", "]", ",", "str", ")", ")", ":", "\n", "                    ", "sample", "[", "k", "]", "=", "np", ".", "rot90", "(", "sample", "[", "k", "]", ",", "k", "=", "rand_", ",", "axes", "=", "(", "0", ",", "1", ")", ")", ".", "copy", "(", ")", "\n", "", "", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.utils.transform_collections.AddGaussianNoise.__init__": [[43, 51], ["numpy.random.uniform", "numpy.max"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "noise_level", ":", "Union", "[", "Iterable", "[", "float", "]", ",", "float", "]", ",", "Training", ":", "bool", ")", ":", "\n", "        ", "for", "noise_", "in", "noise_level", ":", "\n", "            ", "assert", "noise_", ">=", "0.", ",", "'Enter valid noise level!'", "\n", "\n", "", "if", "Training", ":", "\n", "            ", "self", ".", "noise_level", "=", "np", ".", "random", ".", "uniform", "(", "low", "=", "noise_level", "[", "0", "]", ",", "high", "=", "noise_level", "[", "1", "]", ",", "size", "=", "(", "1", ",", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "noise_level", "=", "np", ".", "max", "(", "noise_level", ")", "# get the maximum noise value for test", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.utils.transform_collections.AddGaussianNoise.__call__": [[52, 60], ["sample.keys", "numpy.random.normal"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "for", "key", "in", "sample", ".", "keys", "(", ")", ":", "\n", "            ", "if", "sample", "[", "'x'", "]", "is", "not", "False", ":", "\n", "                ", "sample", "[", "'y'", "]", "=", "sample", "[", "'x'", "]", "+", "np", ".", "random", ".", "normal", "(", "loc", "=", "0.0", ",", "\n", "scale", "=", "self", ".", "noise_level", "/", "255.", ",", "\n", "size", "=", "(", "sample", "[", "'x'", "]", ".", "shape", ")", "\n", ")", "\n", "", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.utils.transform_collections.ImFlip_lr.__init__": [[64, 66], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "p", ")", ":", "\n", "        ", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.utils.transform_collections.ImFlip_lr.__call__": [[67, 76], ["numpy.random.randint().item", "sample.keys", "numpy.random.randint", "numpy.fliplr().copy", "isinstance", "numpy.fliplr"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "\n", "        ", "assert", "1", ">=", "self", ".", "p", ">=", "0", ",", "'p is limited in [0 1]'", "\n", "p", "=", "self", ".", "p", "*", "100", "\n", "if", "np", ".", "random", ".", "randint", "(", "100", ",", "size", "=", "1", ")", ".", "item", "(", ")", "<=", "p", ":", "\n", "            ", "for", "k", "in", "sample", ".", "keys", "(", ")", ":", "\n", "                ", "if", "(", "sample", "[", "k", "]", "is", "not", "False", ")", "and", "(", "not", "isinstance", "(", "sample", "[", "k", "]", ",", "str", ")", ")", ":", "\n", "                    ", "sample", "[", "k", "]", "=", "np", ".", "fliplr", "(", "sample", "[", "k", "]", ")", ".", "copy", "(", ")", "\n", "", "", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.utils.transform_collections.ImFlip_ud.__init__": [[80, 82], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "p", ")", ":", "\n", "        ", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.utils.transform_collections.ImFlip_ud.__call__": [[83, 92], ["numpy.random.randint().item", "sample.keys", "numpy.random.randint", "numpy.flipud().copy", "isinstance", "numpy.flipud"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "assert", "1", ">=", "self", ".", "p", ">=", "0", ",", "'p is limited in [0 1]'", "\n", "p", "=", "self", ".", "p", "*", "100", "\n", "\n", "if", "np", ".", "random", ".", "randint", "(", "100", ",", "size", "=", "1", ")", ".", "item", "(", ")", "<=", "p", ":", "\n", "            ", "for", "k", "in", "sample", ".", "keys", "(", ")", ":", "\n", "                ", "if", "(", "sample", "[", "k", "]", "is", "not", "False", ")", "and", "(", "not", "isinstance", "(", "sample", "[", "k", "]", ",", "str", ")", ")", ":", "\n", "                    ", "sample", "[", "k", "]", "=", "np", ".", "flipud", "(", "sample", "[", "k", "]", ")", ".", "copy", "(", ")", "\n", "", "", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.utils.transform_collections.Channel_transpose.__init__": [[96, 99], ["isinstance", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transpose_tuple", ")", ":", "\n", "        ", "assert", "isinstance", "(", "transpose_tuple", ",", "tuple", ")", "and", "len", "(", "transpose_tuple", ")", "==", "3", ",", "\"Invalid transposed tuple\"", "\n", "self", ".", "transpose_tuple", "=", "transpose_tuple", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.utils.transform_collections.Channel_transpose.__call__": [[100, 105], ["sample.keys", "numpy.transpose", "isinstance"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "for", "k", "in", "sample", ".", "keys", "(", ")", ":", "\n", "            ", "if", "(", "sample", "[", "k", "]", "is", "not", "False", ")", "and", "(", "not", "isinstance", "(", "sample", "[", "k", "]", ",", "str", ")", ")", ":", "\n", "                ", "sample", "[", "k", "]", "=", "np", ".", "transpose", "(", "sample", "[", "k", "]", ",", "self", ".", "transpose_tuple", ")", "\n", "", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.utils.transform_collections.Transform_training": [[108, 115], ["torchvision.transforms.Compose", "transform_collections.Normalization", "transform_collections.ImFlip_lr", "transform_collections.ImFlip_ud", "transform_collections.AddGaussianNoise", "transform_collections.Channel_transpose", "transform_collections.ToTensor_fn"], "function", ["None"], ["", "", "def", "Transform_training", "(", "noise_level", ":", "Union", "[", "Iterable", "[", "float", "]", ",", "float", "]", ",", "Training", ":", "bool", ",", "transpose_tuple", "=", "(", "2", ",", "0", ",", "1", ")", ",", "p", "=", "0.5", ")", ":", "\n", "    ", "return", "transforms", ".", "Compose", "(", "[", "Normalization", "(", ")", ",", "\n", "ImFlip_lr", "(", "p", ")", ",", "\n", "ImFlip_ud", "(", "p", ")", ",", "\n", "AddGaussianNoise", "(", "noise_level", ",", "Training", ")", ",", "\n", "Channel_transpose", "(", "transpose_tuple", ")", ",", "\n", "ToTensor_fn", "(", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.utils.transform_collections.Test_denoising": [[118, 123], ["torchvision.transforms.Compose", "transform_collections.Normalization", "transform_collections.Channel_transpose", "transform_collections.AddGaussianNoise", "transform_collections.ToTensor_fn"], "function", ["None"], ["", "def", "Test_denoising", "(", "noise_level", ":", "Union", "[", "list", ",", "float", "]", ",", "Training", ":", "bool", ",", "transpose_tuple", "=", "(", "2", ",", "0", ",", "1", ")", ",", "p", "=", "0.5", ")", ":", "\n", "    ", "return", "transforms", ".", "Compose", "(", "[", "Normalization", "(", ")", ",", "\n", "Channel_transpose", "(", "transpose_tuple", ")", ",", "\n", "AddGaussianNoise", "(", "noise_level", ",", "Training", ")", ",", "\n", "ToTensor_fn", "(", ")", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.utils.dataloader_test.DataLoader_cls.__init__": [[23, 54], ["dataloader_test._get_dir"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.utils.dataloader._get_dir"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_workers", ":", "int", ",", "\n", "channels_num", ":", "int", ",", "\n", "test_ds_dir", ":", "Union", "[", "str", ",", "list", "]", ",", "\n", "config", ":", "Union", "[", "str", ",", "list", "]", "\n", ")", "->", "Union", "[", "DataLoader", ",", "DataLoader", ",", "DataLoader", "]", ":", "\n", "        ", "r\"\"\"Data loader using DDP\n        \n        Args:\n            num_workers: number of workers. It will be divided by the number of gpus\n            channels_num: input channels (RGB:3, grey:1)\n            train_ds_dir: A list of directories for training datasets\n            config: configuration file for data\n        \"\"\"", "\n", "\n", "\n", "# chech the directories", "\n", "self", ".", "test_dir", "=", "_get_dir", "(", "test_ds_dir", ")", "\n", "\n", "# dataloader params", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "DL_params", "=", "{", "'batch_size'", ":", "1", ",", "\n", "'num_workers'", ":", "num_workers", ",", "\n", "}", "\n", "\n", "# x: ground-truth, y: noisy sample (if False, we will add synthesized noise to x)", "\n", "self", ".", "data_mode", "=", "{", "'y'", ":", "False", ",", "'x'", ":", "True", ",", "'mask'", ":", "False", ",", "'filename'", ":", "False", "}", "\n", "self", ".", "DS_params", "=", "{", "'data_mode'", ":", "self", ".", "data_mode", ",", "\n", "'task_mode'", ":", "config", "[", "'task_mode'", "]", ",", "\n", "'WHC'", ":", "[", "config", "[", "'W'", "]", ",", "config", "[", "'H'", "]", ",", "channels_num", "]", ",", "\n", "'img_format'", ":", "config", "[", "'img_types'", "]", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.utils.dataloader_test.DataLoader_cls.__call__": [[56, 68], ["dataloader_test._get_files", "dataloader_test.Dataset_cls", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.utils.dataloader._get_files"], ["", "def", "__call__", "(", "self", ")", ":", "\n", "\n", "# create dataloader for teste", "\n", "        ", "img_files", "=", "_get_files", "(", "self", ".", "test_dir", ",", "self", ".", "config", "[", "'img_types'", "]", ",", "self", ".", "data_mode", ")", "\n", "Dataset_Test", "=", "Dataset_cls", "(", "img_files", "=", "img_files", ",", "\n", "Training", "=", "False", ",", "\n", "noise_level", "=", "self", ".", "config", "[", "'test_stdVec'", "]", ",", "\n", "**", "self", ".", "DS_params", ")", "\n", "test_loader", "=", "DataLoader", "(", "dataset", "=", "Dataset_Test", ",", "shuffle", "=", "False", ",", "\n", "collate_fn", "=", "collate_fn", ",", "**", "self", ".", "DL_params", ")", "\n", "\n", "return", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.utils.dataloader_test.Dataset_cls.__init__": [[156, 187], ["torch.utils.data.Dataset.__init__", "dataloader_test._initilize_data_mode"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader_test.DataLoader.__init__", "home.repos.pwc.inspect_result.mogvision_adl.utils.dataloader._initilize_data_mode"], ["    ", "def", "__init__", "(", "self", ",", "\n", "img_files", ":", "str", ",", "\n", "Training", ":", "bool", ",", "\n", "data_mode", ":", "Dict", "[", "str", ",", "bool", "]", ",", "\n", "task_mode", ":", "str", ",", "\n", "noise_level", ":", "Union", "[", "list", ",", "float", "]", ",", "\n", "WHC", ":", "list", ",", "\n", "img_format", ":", "list", ",", "\n", "keep_last_n_dirs", ":", "int", "=", "3", "\n", ")", ":", "\n", "        ", "r\"\"\" Dataset class for one dataset\n\n        Args:\n            img_files: the filenames of images\n            Training: whether testing or training\n            data_mode: type of input images\n            task_mode: DEN=Denoising, etc\n            noise_level: the level of noise\n            WHC: [Width, height, depth]\n            img_format: extension of images\n            keep_last_n_dirs: save last n directories of a filename\n        \"\"\"", "\n", "super", "(", "Dataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "data_mode", "=", "_initilize_data_mode", "(", "data_mode", ")", "\n", "self", ".", "task_mode", "=", "task_mode", "\n", "self", ".", "noise_level", "=", "noise_level", "\n", "self", ".", "WHC", "=", "WHC", "\n", "self", ".", "Training", "=", "Training", "\n", "self", ".", "img_files", "=", "img_files", "\n", "self", ".", "keep_last_n_dirs", "=", "keep_last_n_dirs", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.utils.dataloader_test.Dataset_cls.__len__": [[188, 190], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_files", "[", "'x'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.utils.dataloader_test.Dataset_cls.__getitem__": [[192, 220], ["dataloader_test._initilize_data_mode", "dataloader_test._im_read_resize", "str", "dataloader_test._im_read_resize", "dataloader_test._im_read_resize", "utils.transform_collections.Test_denoising", "utils.transform_collections.Test_denoising.", "[].rsplit"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.utils.dataloader._initilize_data_mode", "home.repos.pwc.inspect_result.mogvision_adl.utils.dataloader._im_read_resize", "home.repos.pwc.inspect_result.mogvision_adl.utils.dataloader._im_read_resize", "home.repos.pwc.inspect_result.mogvision_adl.utils.dataloader._im_read_resize", "home.repos.pwc.inspect_result.mogvision_adl.utils.transform_collections.Test_denoising"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "sample_index", "=", "_initilize_data_mode", "(", "self", ".", "data_mode", ")", "\n", "\n", "try", ":", "\n", "            ", "if", "self", ".", "data_mode", "[", "'x'", "]", ":", "\n", "                ", "sample_index", "[", "'x'", "]", "=", "_im_read_resize", "(", "self", ".", "img_files", "[", "'x'", "]", "[", "index", "]", ",", "self", ".", "WHC", ")", "\n", "sample_index", "[", "'filename'", "]", "=", "str", "(", "'/'", ".", "join", "(", "\n", "self", ".", "img_files", "[", "'x'", "]", "[", "index", "]", ".", "rsplit", "(", "'/'", ",", "self", ".", "keep_last_n_dirs", ")", "[", "1", ":", "]", "\n", ")", ")", "\n", "\n", "# check the size of images.", "\n", "", "if", "(", "sample_index", "[", "'x'", "]", ".", "ndim", "<", "3", ")", "or", "(", "sample_index", "[", "'x'", "]", ".", "shape", "[", "2", "]", "!=", "self", ".", "WHC", "[", "2", "]", ")", ":", "\n", "                ", "return", "None", "\n", "\n", "", "if", "self", ".", "data_mode", "[", "'y'", "]", ":", "\n", "                ", "sample_index", "[", "'y'", "]", "=", "_im_read_resize", "(", "self", ".", "img_files", "[", "'y'", "]", "[", "index", "]", ",", "self", ".", "WHC", ")", "\n", "\n", "", "if", "self", ".", "data_mode", "[", "'mask'", "]", ":", "\n", "                ", "sample_index", "[", "'mask'", "]", "=", "_im_read_resize", "(", "self", ".", "img_files", "[", "'mask'", "]", "[", "index", "]", ",", "self", ".", "WHC", ")", "\n", "\n", "", "if", "self", ".", "task_mode", "==", "'DEN'", ":", "\n", "                ", "T", "=", "Test_denoising", "(", "self", ".", "noise_level", ",", "self", ".", "Training", ")", "\n", "return", "T", "(", "sample_index", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n", "", "", "except", "IOError", ":", "\n", "            ", "pass", "", "", "", "", ""]], "home.repos.pwc.inspect_result.mogvision_adl.utils.dataloader_test.collate_fn": [[70, 74], ["list", "torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate", "filter"], "function", ["None"], ["", "", "def", "collate_fn", "(", "batch", ")", ":", "\n", "    ", "\"\"\"remove bad samples\"\"\"", "\n", "batch", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "is", "not", "None", ",", "batch", ")", ")", "\n", "return", "torch", ".", "utils", ".", "data", ".", "dataloader", ".", "default_collate", "(", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.utils.dataloader_test._get_dir": [[76, 85], ["type", "list", "dirs.append", "list", "map"], "function", ["None"], ["", "def", "_get_dir", "(", "_dir", ":", "Callable", "[", "[", "Union", "[", "list", ",", "str", "]", "]", ",", "str", "]", ")", "->", "list", ":", "\n", "    ", "\"\"\"check and get directories\"\"\"", "\n", "if", "type", "(", "_dir", ")", "==", "str", ":", "\n", "        ", "_dir", "=", "list", "(", "[", "_dir", ",", "]", ")", "\n", "\n", "", "dirs", "=", "[", "]", "\n", "for", "item", "in", "_dir", ":", "\n", "        ", "dirs", ".", "append", "(", "\"\"", ".", "join", "(", "list", "(", "map", "(", "lambda", "c", ":", "c", "if", "c", "not", "in", "r'[,*?!:\"<>|] \\\\'", "else", "''", ",", "item", ")", ")", ")", ")", "\n", "", "return", "dirs", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.utils.dataloader_test._initilize_data_mode": [[87, 95], ["data_mode_.update"], "function", ["None"], ["", "def", "_initilize_data_mode", "(", "data_mode", ":", "Dict", "[", "str", ",", "bool", "]", ")", "->", "Dict", "[", "str", ",", "Any", "]", ":", "\n", "    ", "\"\"\" Ininitlize data mode by the input data mode\"\"\"", "\n", "\n", "data_mode_", "=", "{", "key", ":", "False", "for", "key", "in", "[", "'y'", ",", "'x'", ",", "'mask'", "]", "}", "\n", "if", "data_mode", "is", "not", "None", ":", "\n", "        ", "data_mode_", ".", "update", "(", "data_mode", ")", "\n", "\n", "", "return", "data_mode_", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.utils.dataloader_test._get_files": [[96, 121], ["list", "dataloader_test._initilize_data_mode", "os.path.join", "os.path.join", "os.walk", "name.lower().endswith", "files.replace", "files.replace", "tuple", "name.lower"], "function", ["home.repos.pwc.inspect_result.mogvision_adl.utils.dataloader._initilize_data_mode"], ["", "def", "_get_files", "(", "dirs_", ":", "Union", "[", "list", ",", "Iterable", "[", "str", "]", "]", ",", "img_format", ",", "data_mode", ")", ":", "\n", "    ", "\"\"\" get image files\n        in-args:\n            dirs_: list of data directories\n        out-args: \n            img_dirs: list of the address of all avail images\n    \"\"\"", "\n", "dirs_", "=", "list", "(", "dirs_", ")", "\n", "img_dirs", "=", "_initilize_data_mode", "(", "data_mode", ")", "\n", "\n", "if", "data_mode", "[", "'y'", "]", ":", "\n", "        ", "dirs_", "=", "[", "os", ".", "path", ".", "join", "(", "dir_", ",", "'HR'", ")", "for", "dir_", "in", "dirs_", "]", "\n", "\n", "", "img_dirs", "[", "'x'", "]", "=", "[", "os", ".", "path", ".", "join", "(", "path", ",", "name", ")", "\n", "for", "dir_i", "in", "dirs_", "\n", "for", "path", ",", "subdirs", ",", "files_", "in", "os", ".", "walk", "(", "dir_i", ")", "\n", "for", "name", "in", "files_", "\n", "if", "name", ".", "lower", "(", ")", ".", "endswith", "(", "tuple", "(", "img_format", ")", ")", "]", "\n", "if", "data_mode", "[", "'y'", "]", ":", "\n", "        ", "img_dirs", "[", "'y'", "]", "=", "[", "files", ".", "replace", "(", "'/HR/'", ",", "'/LR/'", ")", "for", "files", "in", "x_files", "]", "\n", "\n", "", "if", "data_mode", "[", "'mask'", "]", ":", "\n", "        ", "img_dirs", "[", "'mask'", "]", "=", "[", "files", ".", "replace", "(", "'/HR/'", ",", "'/mask/'", ")", "for", "files", "in", "x_files", "]", "\n", "\n", "", "return", "img_dirs", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.utils.dataloader_test._im_read_resize": [[127, 151], ["skimage.io.imread().astype", "list", "skimage.transform.resize", "numpy.array", "isinstance", "map", "skimage.color.rgb2gray", "numpy.expand_dims", "skimage.transform.resize", "len", "skimage.io.imread"], "function", ["None"], ["", "def", "_im_read_resize", "(", "PATH", ":", "str", ",", "WHC", ":", "Tuple", "[", "int", ",", "Iterable", "[", "int", "]", "]", ")", ":", "\n", "    ", "\"\"\"read and resize images\"\"\"", "\n", "\n", "assert", "isinstance", "(", "WHC", ",", "(", "list", ",", "tuple", ")", ")", "and", "len", "(", "WHC", ")", "==", "3", ",", "\"Invalid tuple for width, height, channel\"", "\n", "Width", ",", "Height", ",", "Channel", "=", "WHC", "[", "0", "]", ",", "WHC", "[", "1", "]", ",", "WHC", "[", "2", "]", "\n", "\n", "img", "=", "io", ".", "imread", "(", "PATH", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "WH", "=", "img", ".", "shape", "[", "0", ":", "2", "]", "\n", "\n", "# because of pyramid structure, the data size must be dividable by `blocks`", "\n", "blocks", "=", "8", "\n", "WH", "=", "list", "(", "map", "(", "lambda", "x", ":", "(", "x", "//", "blocks", ")", "*", "blocks", ",", "WH", ")", ")", "\n", "img", "=", "transform", ".", "resize", "(", "img", ",", "WH", ")", "\n", "\n", "if", "Channel", "==", "1", ":", "\n", "        ", "img", "=", "color", ".", "rgb2gray", "(", "img", ")", "\n", "\n", "", "if", "img", ".", "ndim", "==", "2", ":", "\n", "        ", "img", "=", "np", ".", "expand_dims", "(", "img", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "if", "Width", ">", "0", "and", "Height", ">", "0", ":", "\n", "        ", "img", "=", "transform", ".", "resize", "(", "img", ",", "(", "Height", ",", "Width", ")", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.utils.dataloader.DataLoader_cls.__init__": [[23, 70], ["dataloader._get_dir", "dataloader._get_dir"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.utils.dataloader._get_dir", "home.repos.pwc.inspect_result.mogvision_adl.utils.dataloader._get_dir"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_workers", ":", "int", ",", "\n", "batch_size", ":", "int", ",", "\n", "channels_num", ":", "int", ",", "\n", "train_ds_dir", ":", "Union", "[", "str", ",", "list", "]", ",", "\n", "test_ds_dir", ":", "Union", "[", "str", ",", "list", "]", ",", "\n", "config", ":", "Union", "[", "str", ",", "list", "]", ",", "\n", "distributed", ":", "bool", "\n", ")", "->", "Union", "[", "DataLoader", ",", "DataLoader", ",", "DataLoader", "]", ":", "\n", "        ", "r\"\"\"Data loader using DDP\n        \n        Args:\n            num_workers: number of workers. It will be divided by the number of gpus\n            batch_size: the size of batches. It will be divided by the number of gpus\n            channels_num: input channels (RGB:3, grey:1)\n            train_ds_dir: A list of directories for training datasets\n            test_ds_dir: A list of directories for test datasets\n            config: configuration file for data\n        \"\"\"", "\n", "\n", "self", ".", "distributed", "=", "distributed", "\n", "\n", "# chech the directories", "\n", "self", ".", "train_dir", "=", "_get_dir", "(", "train_ds_dir", ")", "\n", "self", ".", "test_dir", "=", "_get_dir", "(", "test_ds_dir", ")", "\n", "\n", "\n", "# dataloader params", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "shuffle", "=", "config", "[", "'shuffle'", "]", "\n", "self", ".", "train_valid_ratio", "=", "config", "[", "'train_valid_ratio'", "]", "\n", "self", ".", "num_valid_max", "=", "config", "[", "'num_valid_max'", "]", "\n", "self", ".", "random_seed", "=", "config", "[", "'random_seed'", "]", "\n", "\n", "\n", "self", ".", "DL_params", "=", "{", "'batch_size'", ":", "batch_size", ",", "\n", "'num_workers'", ":", "num_workers", ",", "\n", "'pin_memory'", ":", "config", "[", "'pin_memory'", "]", ",", "\n", "'drop_last'", ":", "config", "[", "'drop_last'", "]", "\n", "}", "\n", "\n", "# x: ground-truth, y: noisy sample (if False, we will add synthesized noise to x)", "\n", "self", ".", "data_mode", "=", "{", "'y'", ":", "False", ",", "'x'", ":", "True", ",", "'mask'", ":", "False", ",", "'filename'", ":", "False", "}", "\n", "self", ".", "DS_params", "=", "{", "'data_mode'", ":", "self", ".", "data_mode", ",", "\n", "'task_mode'", ":", "config", "[", "'task_mode'", "]", ",", "\n", "'WHC'", ":", "[", "config", "[", "'W'", "]", ",", "config", "[", "'H'", "]", ",", "channels_num", "]", ",", "\n", "'img_format'", ":", "config", "[", "'img_types'", "]", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.utils.dataloader.DataLoader_cls.__call__": [[72, 132], ["dataloader._get_files", "dataloader.DataLoader_cls._train_valid_sampler", "dataloader._get_files", "dataloader.Dataset_cls", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "len", "dataloader.Dataset_cls", "dataloader.Dataset_cls", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "dataloader.Dataset_cls", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "dataloader.DataLoader_cls.data_mode.items", "dataloader.DataLoader_cls.data_mode.items"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.utils.dataloader._get_files", "home.repos.pwc.inspect_result.mogvision_adl.utils.dataloader.DataLoader_cls._train_valid_sampler", "home.repos.pwc.inspect_result.mogvision_adl.utils.dataloader._get_files"], ["", "def", "__call__", "(", "self", ")", ":", "\n", "\n", "# get train & validation datasets", "\n", "        ", "img_files", "=", "_get_files", "(", "self", ".", "train_dir", ",", "self", ".", "config", "[", "'img_types'", "]", ",", "self", ".", "data_mode", ")", "\n", "\n", "# divide the datasets into train and validation", "\n", "train_idx", ",", "valid_idx", "=", "self", ".", "_train_valid_sampler", "(", "len", "(", "img_files", "[", "'x'", "]", ")", ")", "\n", "\n", "if", "self", ".", "distributed", ":", "\n", "# create Dataset_cls: TRAIN", "\n", "            ", "img_files_train", "=", "{", "key", ":", "[", "img_files", "[", "key", "]", "[", "idx", "]", "for", "idx", "in", "train_idx", "]", "\n", "for", "key", ",", "val", "in", "self", ".", "data_mode", ".", "items", "(", ")", "if", "val", "}", "\n", "Dataset_Train", "=", "Dataset_cls", "(", "img_files", "=", "img_files_train", ",", "\n", "Training", "=", "True", ",", "\n", "noise_level", "=", "self", ".", "config", "[", "'train_std_interval'", "]", ",", "\n", "**", "self", ".", "DS_params", ")", "\n", "# create Dataset_cls: VALID", "\n", "img_files_valid", "=", "{", "key", ":", "[", "img_files", "[", "key", "]", "[", "idx", "]", "for", "idx", "in", "valid_idx", "]", "\n", "for", "key", ",", "val", "in", "self", ".", "data_mode", ".", "items", "(", ")", "if", "val", "}", "\n", "Dataset_Valid", "=", "Dataset_cls", "(", "img_files", "=", "img_files_valid", ",", "\n", "Training", "=", "True", ",", "\n", "noise_level", "=", "self", ".", "config", "[", "'train_std_interval'", "]", ",", "\n", "**", "self", ".", "DS_params", ")", "\n", "# create sampler", "\n", "train_sampler", "=", "DistributedSampler", "(", "Dataset_Train", ",", "drop_last", "=", "self", ".", "config", "[", "'drop_last'", "]", ",", "\n", "seed", "=", "self", ".", "random_seed", ",", "shuffle", "=", "self", ".", "shuffle", ")", "\n", "valid_sampler", "=", "DistributedSampler", "(", "Dataset_Valid", ",", "drop_last", "=", "self", ".", "config", "[", "'drop_last'", "]", ",", "\n", "seed", "=", "self", ".", "random_seed", ",", "shuffle", "=", "self", ".", "shuffle", ")", "\n", "\n", "# create data loader", "\n", "train_loader", "=", "DataLoader", "(", "dataset", "=", "Dataset_Train", ",", "sampler", "=", "train_sampler", ",", "\n", "**", "self", ".", "DL_params", ")", "\n", "valid_loader", "=", "DataLoader", "(", "dataset", "=", "Dataset_Valid", ",", "sampler", "=", "valid_sampler", ",", "\n", "collate_fn", "=", "collate_fn", ",", "**", "self", ".", "DL_params", ")", "\n", "\n", "", "else", ":", "\n", "# create Dataset_cls", "\n", "            ", "Dataset_Train", "=", "Dataset_cls", "(", "img_files", "=", "img_files", ",", "\n", "Training", "=", "True", ",", "\n", "noise_level", "=", "self", ".", "config", "[", "'train_std_interval'", "]", ",", "\n", "**", "self", ".", "DS_params", ")", "\n", "train_sampler", "=", "SubsetRandomSampler", "(", "train_idx", ")", "\n", "valid_sampler", "=", "SubsetRandomSampler", "(", "valid_idx", ")", "\n", "\n", "train_loader", "=", "DataLoader", "(", "dataset", "=", "Dataset_Train", ",", "sampler", "=", "train_sampler", ",", "\n", "**", "self", ".", "DL_params", ")", "\n", "valid_loader", "=", "DataLoader", "(", "dataset", "=", "Dataset_Train", ",", "sampler", "=", "valid_sampler", ",", "\n", "collate_fn", "=", "collate_fn", ",", "**", "self", ".", "DL_params", ")", "\n", "\n", "\n", "# create dataloader for teste", "\n", "", "img_files", "=", "_get_files", "(", "self", ".", "test_dir", ",", "self", ".", "config", "[", "'img_types'", "]", ",", "self", ".", "data_mode", ")", "\n", "Dataset_Test", "=", "Dataset_cls", "(", "img_files", "=", "img_files", ",", "\n", "Training", "=", "False", ",", "\n", "noise_level", "=", "self", ".", "config", "[", "'test_stdVec'", "]", ",", "\n", "**", "self", ".", "DS_params", ")", "\n", "test_loader", "=", "DataLoader", "(", "dataset", "=", "Dataset_Test", ",", "shuffle", "=", "False", ",", "\n", "collate_fn", "=", "collate_fn", ",", "**", "self", ".", "DL_params", ")", "\n", "\n", "return", "train_loader", ",", "valid_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.utils.dataloader.DataLoader_cls._train_valid_sampler": [[135, 154], ["list", "int", "range", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed", "numpy.random.shuffle"], "methods", ["None"], ["", "def", "_train_valid_sampler", "(", "self", ",", "len_train_valid", ")", ":", "\n", "        ", "\"\"\"sampler for training and validation\"\"\"", "\n", "\n", "split", "=", "len_train_valid", "-", "int", "(", "self", ".", "train_valid_ratio", "*", "len_train_valid", ")", "\n", "\n", "# check the upper limit of validation samples", "\n", "if", "split", ">", "self", ".", "num_valid_max", ":", "\n", "            ", "split", "=", "self", ".", "num_valid_max", "\n", "\n", "", "indices", "=", "list", "(", "range", "(", "len_train_valid", ")", ")", "\n", "\n", "if", "self", ".", "shuffle", ":", "\n", "            ", "torch", ".", "manual_seed", "(", "self", ".", "random_seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "self", ".", "random_seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "self", ".", "random_seed", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "indices", ")", "\n", "\n", "", "train_idx", ",", "valid_idx", "=", "indices", "[", "split", ":", "]", ",", "indices", "[", ":", "split", "]", "\n", "return", "train_idx", ",", "valid_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.utils.dataloader.Dataset_cls.__init__": [[239, 270], ["torch.utils.data.Dataset.__init__", "dataloader._initilize_data_mode"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader_test.DataLoader.__init__", "home.repos.pwc.inspect_result.mogvision_adl.utils.dataloader._initilize_data_mode"], ["    ", "def", "__init__", "(", "self", ",", "\n", "img_files", ":", "str", ",", "\n", "Training", ":", "bool", ",", "\n", "data_mode", ":", "Dict", "[", "str", ",", "bool", "]", ",", "\n", "task_mode", ":", "str", ",", "\n", "noise_level", ":", "Union", "[", "list", ",", "float", "]", ",", "\n", "WHC", ":", "list", ",", "\n", "img_format", ":", "list", ",", "\n", "keep_last_n_dirs", ":", "int", "=", "3", "\n", ")", ":", "\n", "        ", "r\"\"\" Dataset class for one dataset\n\n        Args:\n            img_files: lsit of filenames\n            Training: whether testing or training\n            data_mode: type of input images\n            task_mode: DEN=Denoising, etc\n            noise_level: the level of noise\n            WHC: [Width, height, depth]\n            img_format: extension of images\n            keep_last_n_dirs: save last n directories of a filename\n        \"\"\"", "\n", "super", "(", "Dataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "data_mode", "=", "_initilize_data_mode", "(", "data_mode", ")", "\n", "self", ".", "task_mode", "=", "task_mode", "\n", "self", ".", "noise_level", "=", "noise_level", "\n", "self", ".", "WHC", "=", "WHC", "\n", "self", ".", "Training", "=", "Training", "\n", "self", ".", "img_files", "=", "img_files", "\n", "self", ".", "keep_last_n_dirs", "=", "keep_last_n_dirs", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.utils.dataloader.Dataset_cls.__len__": [[271, 273], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_files", "[", "'x'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.utils.dataloader.Dataset_cls.__getitem__": [[275, 303], ["dataloader._initilize_data_mode", "dataloader._im_read_resize", "str", "dataloader._im_read_resize", "dataloader._im_read_resize", "utils.transform_collections.Transform_training", "utils.transform_collections.Transform_training.", "[].rsplit"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.utils.dataloader._initilize_data_mode", "home.repos.pwc.inspect_result.mogvision_adl.utils.dataloader._im_read_resize", "home.repos.pwc.inspect_result.mogvision_adl.utils.dataloader._im_read_resize", "home.repos.pwc.inspect_result.mogvision_adl.utils.dataloader._im_read_resize", "home.repos.pwc.inspect_result.mogvision_adl.utils.transform_collections.Transform_training"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "sample_index", "=", "_initilize_data_mode", "(", "self", ".", "data_mode", ")", "\n", "\n", "try", ":", "\n", "            ", "if", "self", ".", "data_mode", "[", "'x'", "]", ":", "\n", "                ", "sample_index", "[", "'x'", "]", "=", "_im_read_resize", "(", "self", ".", "img_files", "[", "'x'", "]", "[", "index", "]", ",", "self", ".", "WHC", ")", "\n", "sample_index", "[", "'filename'", "]", "=", "str", "(", "'/'", ".", "join", "(", "\n", "self", ".", "img_files", "[", "'x'", "]", "[", "index", "]", ".", "rsplit", "(", "'/'", ",", "self", ".", "keep_last_n_dirs", ")", "[", "1", ":", "]", "\n", ")", ")", "\n", "\n", "# check the size of images.", "\n", "", "if", "(", "sample_index", "[", "'x'", "]", ".", "ndim", "<", "3", ")", "or", "(", "sample_index", "[", "'x'", "]", ".", "shape", "[", "2", "]", "!=", "self", ".", "WHC", "[", "2", "]", ")", ":", "\n", "                ", "return", "None", "\n", "\n", "", "if", "self", ".", "data_mode", "[", "'y'", "]", ":", "\n", "                ", "sample_index", "[", "'y'", "]", "=", "_im_read_resize", "(", "self", ".", "img_files", "[", "'y'", "]", "[", "index", "]", ",", "self", ".", "WHC", ")", "\n", "\n", "", "if", "self", ".", "data_mode", "[", "'mask'", "]", ":", "\n", "                ", "sample_index", "[", "'mask'", "]", "=", "_im_read_resize", "(", "self", ".", "img_files", "[", "'mask'", "]", "[", "index", "]", ",", "self", ".", "WHC", ")", "\n", "\n", "", "if", "self", ".", "task_mode", "==", "'DEN'", ":", "\n", "                ", "T", "=", "Transform_training", "(", "self", ".", "noise_level", ",", "self", ".", "Training", ")", "\n", "return", "T", "(", "sample_index", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n", "", "", "except", "IOError", ":", "\n", "            ", "pass", "", "", "", "", ""]], "home.repos.pwc.inspect_result.mogvision_adl.utils.dataloader.collate_fn": [[156, 160], ["list", "torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate", "filter"], "function", ["None"], ["", "", "def", "collate_fn", "(", "batch", ")", ":", "\n", "    ", "\"\"\"remove bad samples\"\"\"", "\n", "batch", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "is", "not", "None", ",", "batch", ")", ")", "\n", "return", "torch", ".", "utils", ".", "data", ".", "dataloader", ".", "default_collate", "(", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.utils.dataloader._get_dir": [[162, 171], ["type", "list", "dirs.append", "list", "map"], "function", ["None"], ["", "def", "_get_dir", "(", "_dir", ":", "Callable", "[", "[", "Union", "[", "list", ",", "str", "]", "]", ",", "str", "]", ")", "->", "list", ":", "\n", "    ", "\"\"\"check and get directories\"\"\"", "\n", "if", "type", "(", "_dir", ")", "==", "str", ":", "\n", "        ", "_dir", "=", "list", "(", "[", "_dir", ",", "]", ")", "\n", "\n", "", "dirs", "=", "[", "]", "\n", "for", "item", "in", "_dir", ":", "\n", "        ", "dirs", ".", "append", "(", "\"\"", ".", "join", "(", "list", "(", "map", "(", "lambda", "c", ":", "c", "if", "c", "not", "in", "r'[,*?!:\"<>|] \\\\'", "else", "''", ",", "item", ")", ")", ")", ")", "\n", "", "return", "dirs", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.utils.dataloader._initilize_data_mode": [[173, 181], ["data_mode_.update"], "function", ["None"], ["", "def", "_initilize_data_mode", "(", "data_mode", ":", "Dict", "[", "str", ",", "bool", "]", ")", "->", "Dict", "[", "str", ",", "Any", "]", ":", "\n", "    ", "\"\"\" Ininitlize data mode by the input data mode\"\"\"", "\n", "\n", "data_mode_", "=", "{", "key", ":", "False", "for", "key", "in", "[", "'y'", ",", "'x'", ",", "'mask'", "]", "}", "\n", "if", "data_mode", "is", "not", "None", ":", "\n", "        ", "data_mode_", ".", "update", "(", "data_mode", ")", "\n", "\n", "", "return", "data_mode_", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.utils.dataloader._get_files": [[182, 207], ["list", "dataloader._initilize_data_mode", "os.path.join", "os.path.join", "os.walk", "name.lower().endswith", "files.replace", "files.replace", "tuple", "name.lower"], "function", ["home.repos.pwc.inspect_result.mogvision_adl.utils.dataloader._initilize_data_mode"], ["", "def", "_get_files", "(", "dirs_", ":", "Union", "[", "list", ",", "Iterable", "[", "str", "]", "]", ",", "img_format", ",", "data_mode", ")", ":", "\n", "    ", "\"\"\" get image files\n        in-args:\n            dirs_: list of data directories\n        out-args: \n            img_dirs: list of the address of all avail images\n    \"\"\"", "\n", "dirs_", "=", "list", "(", "dirs_", ")", "\n", "img_dirs", "=", "_initilize_data_mode", "(", "data_mode", ")", "\n", "\n", "if", "data_mode", "[", "'y'", "]", ":", "\n", "        ", "dirs_", "=", "[", "os", ".", "path", ".", "join", "(", "dir_", ",", "'HR'", ")", "for", "dir_", "in", "dirs_", "]", "\n", "\n", "", "img_dirs", "[", "'x'", "]", "=", "[", "os", ".", "path", ".", "join", "(", "path", ",", "name", ")", "\n", "for", "dir_i", "in", "dirs_", "\n", "for", "path", ",", "subdirs", ",", "files_", "in", "os", ".", "walk", "(", "dir_i", ")", "\n", "for", "name", "in", "files_", "\n", "if", "name", ".", "lower", "(", ")", ".", "endswith", "(", "tuple", "(", "img_format", ")", ")", "]", "\n", "if", "data_mode", "[", "'y'", "]", ":", "\n", "        ", "img_dirs", "[", "'y'", "]", "=", "[", "files", ".", "replace", "(", "'/HR/'", ",", "'/LR/'", ")", "for", "files", "in", "x_files", "]", "\n", "\n", "", "if", "data_mode", "[", "'mask'", "]", ":", "\n", "        ", "img_dirs", "[", "'mask'", "]", "=", "[", "files", ".", "replace", "(", "'/HR/'", ",", "'/mask/'", ")", "for", "files", "in", "x_files", "]", "\n", "\n", "", "return", "img_dirs", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.utils.dataloader._im_read_resize": [[210, 234], ["skimage.io.imread().astype", "list", "skimage.transform.resize", "numpy.array", "isinstance", "map", "skimage.color.rgb2gray", "numpy.expand_dims", "skimage.transform.resize", "len", "skimage.io.imread"], "function", ["None"], ["", "def", "_im_read_resize", "(", "PATH", ":", "str", ",", "WHC", ":", "Tuple", "[", "int", ",", "Iterable", "[", "int", "]", "]", ")", ":", "\n", "    ", "\"\"\"read and resize images\"\"\"", "\n", "\n", "assert", "isinstance", "(", "WHC", ",", "(", "list", ",", "tuple", ")", ")", "and", "len", "(", "WHC", ")", "==", "3", ",", "\"Invalid tuple for width, height, channel\"", "\n", "Width", ",", "Height", ",", "Channel", "=", "WHC", "[", "0", "]", ",", "WHC", "[", "1", "]", ",", "WHC", "[", "2", "]", "\n", "\n", "img", "=", "io", ".", "imread", "(", "PATH", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "WH", "=", "img", ".", "shape", "[", "0", ":", "2", "]", "\n", "\n", "# because of pyramid structure, the data size must be dividable by `blocks`", "\n", "blocks", "=", "8", "\n", "WH", "=", "list", "(", "map", "(", "lambda", "x", ":", "(", "x", "//", "blocks", ")", "*", "blocks", ",", "WH", ")", ")", "\n", "img", "=", "transform", ".", "resize", "(", "img", ",", "WH", ")", "\n", "\n", "if", "Channel", "==", "1", ":", "\n", "        ", "img", "=", "color", ".", "rgb2gray", "(", "img", ")", "\n", "\n", "", "if", "img", ".", "ndim", "==", "2", ":", "\n", "        ", "img", "=", "np", ".", "expand_dims", "(", "img", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "if", "Width", ">", "0", "and", "Height", ">", "0", ":", "\n", "        ", "img", "=", "transform", ".", "resize", "(", "img", ",", "(", "Height", ",", "Width", ")", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.utils.util.SSIM.__init__": [[203, 209], ["super().__init__", "util.create_window"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader_test.DataLoader.__init__", "home.repos.pwc.inspect_result.mogvision_adl.utils.util.create_window"], ["    ", "def", "__init__", "(", "self", ",", "window_size", "=", "11", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "SSIM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "window_size", "=", "window_size", "\n", "self", ".", "size_average", "=", "size_average", "\n", "self", ".", "channel", "=", "1", "\n", "self", ".", "window", "=", "create_window", "(", "window_size", ",", "self", ".", "channel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.utils.util.SSIM.forward": [[210, 227], ["img1.size", "util._ssim", "util.create_window", "window.cuda.cuda.type_as", "util.SSIM.window.data.type", "img1.data.type", "window.cuda.cuda.cuda", "img1.get_device"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.utils.util._ssim", "home.repos.pwc.inspect_result.mogvision_adl.utils.util.create_window"], ["", "def", "forward", "(", "self", ",", "img1", ",", "img2", ")", ":", "\n", "        ", "(", "_", ",", "channel", ",", "_", ",", "_", ")", "=", "img1", ".", "size", "(", ")", "\n", "\n", "if", "channel", "==", "self", ".", "channel", "and", "self", ".", "window", ".", "data", ".", "type", "(", ")", "==", "img1", ".", "data", ".", "type", "(", ")", ":", "\n", "            ", "window", "=", "self", ".", "window", "\n", "", "else", ":", "\n", "            ", "window", "=", "create_window", "(", "self", ".", "window_size", ",", "channel", ")", "\n", "\n", "if", "img1", ".", "is_cuda", ":", "\n", "                ", "window", "=", "window", ".", "cuda", "(", "img1", ".", "get_device", "(", ")", ")", "\n", "", "window", "=", "window", ".", "type_as", "(", "img1", ")", "\n", "\n", "self", ".", "window", "=", "window", "\n", "self", ".", "channel", "=", "channel", "\n", "\n", "\n", "", "return", "_ssim", "(", "img1", ",", "img2", ",", "window", ",", "self", ".", "window_size", ",", "channel", ",", "self", ".", "size_average", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.utils.util.boolean_string": [[21, 26], ["s.lower"], "function", ["None"], ["def", "boolean_string", "(", "s", ")", ":", "\n", "    ", "if", "s", ".", "lower", "(", ")", "==", "'true'", ":", "\n", "        ", "return", "True", "\n", "", "else", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.utils.util.makedirs_fn": [[30, 37], ["os.path.join", "os.path.exists", "os.makedirs"], "function", ["None"], ["", "def", "makedirs_fn", "(", "*", "argv", ")", ":", "\n", "    ", "path_", "=", "[", "arg", "for", "arg", "in", "argv", "if", "arg", "]", "\n", "path_", "=", "os", ".", "path", ".", "join", "(", "*", "path_", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path_", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path_", ")", "\n", "#tf.gfile.MakeDirs(path_)", "\n", "", "return", "path_", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.utils.util.read_config": [[40, 54], ["STEPS.update", "json.load.update", "open", "json.load"], "function", ["None"], ["", "def", "read_config", "(", "config_dir", ")", ":", "\n", "    ", "STEPS", "=", "{", "}", "\n", "with", "open", "(", "config_dir", ",", "'rb'", ")", "as", "file", ":", "\n", "        ", "config", "=", "json", ".", "load", "(", "file", ")", "\n", "#config.get('AnyParams', anyValues???)", "\n", "\n", "", "STEPS", ".", "update", "(", "{", "\n", "'val_per_step'", ":", "100", ",", "\n", "'test_per_step'", ":", "200", ",", "\n", "'checkpoint_per_step'", ":", "200", ",", "\n", "}", ")", "\n", "\n", "config", ".", "update", "(", "{", "'STEPS'", ":", "STEPS", "}", ")", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.utils.util.rmtree_dirs": [[56, 64], ["os.path.exists", "shutil.rmtree", "print", "print", "print"], "function", ["None"], ["", "def", "rmtree_dirs", "(", "dst_dir", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "dst_dir", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "shutil", ".", "rmtree", "(", "dst_dir", ")", "\n", "print", "(", "f\"'{dst_dir}' removed successfully!\"", ")", "\n", "", "except", "OSError", "as", "error", ":", "\n", "            ", "print", "(", "error", ")", "\n", "print", "(", "f\" '{dst_dir}' can not be removed!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.utils.util.get_dist_info": [[67, 82], ["torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "int", "str", "torch.init_process_group", "warnings.warn"], "function", ["None"], ["", "", "", "def", "get_dist_info", "(", "rank", ")", ":", "\n", "    ", "rank", ",", "world_size", ",", "num_gpus", "=", "0", ",", "1", ",", "1", "\n", "num_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "if", "num_gpus", "is", "None", ":", "\n", "        ", "warnings", ".", "warn", "(", "'[warning!] GPU not detected!'", ")", "\n", "\n", "", "torch", ".", "cuda", ".", "set_device", "(", "rank", "%", "num_gpus", ")", "\n", "world_size", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "\n", "os", ".", "environ", "[", "'RANK'", "]", "=", "str", "(", "rank", ")", "\n", "dist", ".", "init_process_group", "(", "backend", "=", "\"nccl\"", ",", "\n", "init_method", "=", "'tcp://127.0.0.1:2345'", ",", "\n", "world_size", "=", "world_size", ",", "\n", "rank", "=", "rank", ")", "\n", "\n", "return", "rank", ",", "world_size", ",", "num_gpus", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.utils.util.cleanup": [[84, 86], ["torch.destroy_process_group"], "function", ["None"], ["", "def", "cleanup", "(", ")", ":", "\n", "    ", "dist", ".", "destroy_process_group", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.utils.util.prep": [[88, 98], ["util.makedirs_fn", "util.makedirs_fn"], "function", ["home.repos.pwc.inspect_result.mogvision_adl.util.utils.makedirs_fn", "home.repos.pwc.inspect_result.mogvision_adl.util.utils.makedirs_fn"], ["", "def", "prep", "(", "param", ",", "mode", ",", "dir_path", ",", "experiment", ")", ":", "\n", "# prepare the directories", "\n", "    ", "param", ".", "ckpt_dir", "=", "makedirs_fn", "(", "dir_path", ",", "experiment", ",", "mode", ",", "'checkpoints'", ")", "\n", "param", ".", "log_dir", "=", "makedirs_fn", "(", "dir_path", ",", "experiment", ",", "mode", ",", "'logs'", ")", "\n", "\n", "# prepare writers", "\n", "param", ".", "writer_numerical_dir", "=", "f'{param.log_dir}/numerical'", "\n", "param", ".", "writer_imgs_dir", "=", "f'{param.log_dir}/images'", "\n", "\n", "return", "param", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.utils.util.save_model": [[102, 110], ["isinstance", "model.state_dict", "model.state_dict.items", "torch.save", "torch.save", "torch.save", "param.cpu"], "function", ["None"], ["", "def", "save_model", "(", "model", ",", "file_", ")", ":", "\n", "    ", "if", "isinstance", "(", "model", ",", "(", "DataParallel", ",", "DistributedDataParallel", ")", ")", ":", "\n", "        ", "model", "=", "model", ".", "module", "\n", "\n", "", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "for", "key", ",", "param", "in", "model_dict", ".", "items", "(", ")", ":", "\n", "        ", "model_dict", "[", "key", "]", "=", "param", ".", "cpu", "(", ")", "\n", "", "torch", ".", "save", "(", "model_dict", ",", "file_", ")", "\n", "#torch.save(self.model.state_dict(), file_)", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.utils.util.load_model": [[113, 122], ["isinstance", "torch.load", "torch.load", "torch.load", "model.load_state_dict", "torch.load.keys"], "function", ["None"], ["", "def", "load_model", "(", "model", ",", "model_path", ",", "param_key", "=", "'params'", ")", ":", "\n", "    ", "if", "isinstance", "(", "model", ",", "(", "DataParallel", ",", "DistributedDataParallel", ")", ")", ":", "\n", "        ", "model", "=", "model", ".", "module", "\n", "\n", "", "model_dict", "=", "torch", ".", "load", "(", "model_path", ")", "\n", "if", "param_key", "in", "model_dict", ".", "keys", "(", ")", ":", "\n", "        ", "model_dict", "=", "model_dict", "[", "param_key", "]", "\n", "", "model", ".", "load_state_dict", "(", "model_dict", ",", "strict", "=", "True", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.utils.util.get_model": [[124, 148], ["util.get_model._get_denoiser"], "function", ["home.repos.pwc.inspect_result.mogvision_adl.model.adl_trainer.ADL_Trainer._get_denoiser"], ["", "def", "get_model", "(", "model_name", ",", "in_channels", ",", "out_channels", ",", "ckpt_dir", ",", "device", ",", "\n", "prefix", "=", "'ckpts_step_'", ",", "suffix", "=", "'.pt'", ")", ":", "\n", "        ", "\"\"\"We get the model and then load its last saved one if avail\"\"\"", "\n", "\n", "def", "_get_denoiser", "(", "model_name", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "            ", "\"\"\" get denoiser model\"\"\"", "\n", "module_", "=", "getattr", "(", "MODELS", ",", "model_name", ")", "\n", "return", "module_", "(", "in_channels", ",", "out_channels", ")", "\n", "\n", "# get model", "\n", "", "model", "=", "_get_denoiser", "(", "model_name", ",", "in_channels", ",", "out_channels", ")", "\n", "\n", "\n", "# load the last saved model if avail", "\n", "model_path", "=", "None", "\n", "if", "os", ".", "path", ".", "exists", "(", "ckpt_dir", ")", ":", "\n", "            ", "step_ids", "=", "[", "int", "(", "dir_", ".", "split", "(", "prefix", ")", "[", "-", "1", "]", ".", "split", "(", "suffix", ")", "[", "0", "]", ")", "for", "dir_", "in", "os", ".", "listdir", "(", "ckpt_dir", ")", "]", "\n", "if", "len", "(", "step_ids", ")", ">", "0", ":", "\n", "                ", "step_num", "=", "max", "(", "step_ids", ")", "\n", "model_path", "=", "f\"{ckpt_dir}/{prefix}{step_num}{suffix}\"", "\n", "\n", "", "", "model", "=", "load_model", "(", "model", ",", "model_path", ",", "param_key", "=", "'params'", ")", "\n", "print", "(", "f\"[i] Restoring the model from step {step_num}.\"", ")", "\n", "return", "model", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.utils.util.find_free_port": [[156, 165], ["socket.socket", "socket.socket.bind", "socket.socket.close", "socket.socket.getsockname"], "function", ["None"], ["def", "find_free_port", "(", ")", ":", "\n", "# Copied from https://github.com/facebookresearch/detectron2/blob/main/detectron2/engine/launch.py # noqa: E501", "\n", "    ", "sock", "=", "socket", ".", "socket", "(", "socket", ".", "AF_INET", ",", "socket", ".", "SOCK_STREAM", ")", "\n", "# Binding to port 0 will cause the OS to find an available port for us", "\n", "sock", ".", "bind", "(", "(", "''", ",", "0", ")", ")", "\n", "port", "=", "sock", ".", "getsockname", "(", ")", "[", "1", "]", "\n", "sock", ".", "close", "(", ")", "\n", "# NOTE: there is still a chance the port could be taken by other processes.", "\n", "return", "port", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.utils.util.gaussian": [[170, 173], ["torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor.sum", "math.exp", "range", "float"], "function", ["None"], ["", "def", "gaussian", "(", "window_size", ",", "sigma", ")", ":", "\n", "    ", "gauss", "=", "torch", ".", "Tensor", "(", "[", "exp", "(", "-", "(", "x", "-", "window_size", "//", "2", ")", "**", "2", "/", "float", "(", "2", "*", "sigma", "**", "2", ")", ")", "for", "x", "in", "range", "(", "window_size", ")", "]", ")", "\n", "return", "gauss", "/", "gauss", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.utils.util.create_window": [[174, 179], ["gaussian().unsqueeze", "gaussian().unsqueeze.mm().float().unsqueeze().unsqueeze", "torch.autograd.Variable", "_1D_window.mm().float().unsqueeze().unsqueeze.expand().contiguous", "util.gaussian", "gaussian().unsqueeze.mm().float().unsqueeze", "_1D_window.mm().float().unsqueeze().unsqueeze.expand", "gaussian().unsqueeze.mm().float", "gaussian().unsqueeze.mm", "gaussian().unsqueeze.t"], "function", ["home.repos.pwc.inspect_result.mogvision_adl.utils.util.gaussian"], ["", "def", "create_window", "(", "window_size", ",", "channel", ")", ":", "\n", "    ", "_1D_window", "=", "gaussian", "(", "window_size", ",", "1.5", ")", ".", "unsqueeze", "(", "1", ")", "\n", "_2D_window", "=", "_1D_window", ".", "mm", "(", "_1D_window", ".", "t", "(", ")", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "window", "=", "Variable", "(", "_2D_window", ".", "expand", "(", "channel", ",", "1", ",", "window_size", ",", "window_size", ")", ".", "contiguous", "(", ")", ")", "\n", "return", "window", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.utils.util._ssim": [[180, 201], ["torch.conv2d", "torch.conv2d", "F.conv2d.pow", "F.conv2d.pow", "torch.conv2d", "torch.conv2d", "torch.conv2d", "ssim_map.mean", "ssim_map.mean().mean().mean", "ssim_map.mean().mean", "ssim_map.mean"], "function", ["None"], ["", "def", "_ssim", "(", "img1", ",", "img2", ",", "window", ",", "window_size", ",", "channel", ",", "size_average", "=", "True", ")", ":", "\n", "    ", "mu1", "=", "F", ".", "conv2d", "(", "img1", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "\n", "mu2", "=", "F", ".", "conv2d", "(", "img2", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "\n", "\n", "mu1_sq", "=", "mu1", ".", "pow", "(", "2", ")", "\n", "mu2_sq", "=", "mu2", ".", "pow", "(", "2", ")", "\n", "mu1_mu2", "=", "mu1", "*", "mu2", "\n", "\n", "sigma1_sq", "=", "F", ".", "conv2d", "(", "img1", "*", "img1", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "-", "mu1_sq", "\n", "sigma2_sq", "=", "F", ".", "conv2d", "(", "img2", "*", "img2", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "-", "mu2_sq", "\n", "sigma12", "=", "F", ".", "conv2d", "(", "img1", "*", "img2", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "-", "mu1_mu2", "\n", "\n", "C1", "=", "0.01", "**", "2", "\n", "C2", "=", "0.03", "**", "2", "\n", "\n", "ssim_map", "=", "(", "(", "2", "*", "mu1_mu2", "+", "C1", ")", "*", "(", "2", "*", "sigma12", "+", "C2", ")", ")", "/", "(", "(", "mu1_sq", "+", "mu2_sq", "+", "C1", ")", "*", "(", "sigma1_sq", "+", "sigma2_sq", "+", "C2", ")", ")", "\n", "\n", "if", "size_average", ":", "\n", "        ", "return", "ssim_map", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "ssim_map", ".", "mean", "(", "1", ")", ".", "mean", "(", "1", ")", ".", "mean", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.utils.util.ssim": [[228, 237], ["img1.size", "util.create_window", "window.cuda.type_as", "util._ssim", "window.cuda.cuda", "img1.get_device"], "function", ["home.repos.pwc.inspect_result.mogvision_adl.utils.util.create_window", "home.repos.pwc.inspect_result.mogvision_adl.utils.util._ssim"], ["", "", "def", "ssim", "(", "img1", ",", "img2", ",", "window_size", "=", "11", ",", "size_average", "=", "True", ")", ":", "\n", "    ", "(", "_", ",", "channel", ",", "_", ",", "_", ")", "=", "img1", ".", "size", "(", ")", "\n", "window", "=", "create_window", "(", "window_size", ",", "channel", ")", "\n", "\n", "if", "img1", ".", "is_cuda", ":", "\n", "        ", "window", "=", "window", ".", "cuda", "(", "img1", ".", "get_device", "(", ")", ")", "\n", "", "window", "=", "window", ".", "type_as", "(", "img1", ")", "\n", "\n", "return", "_ssim", "(", "img1", ",", "img2", ",", "window", ",", "window_size", ",", "channel", ",", "size_average", ")", "", "", ""]], "home.repos.pwc.inspect_result.mogvision_adl.model.denoiser_trainer.Denoiser_Trainer.__init__": [[16, 55], ["object.__init__", "util.utils.struct_cls", "tensorflow.saved_model.SaveOptions", "tensorflow.saved_model.LoadOptions", "strategy.scope", "denoiser_trainer.Denoiser_Trainer._get_model", "denoiser_trainer.Denoiser_Trainer._get_optimiers", "util.utils.get_model_summary"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader_test.DataLoader.__init__", "home.repos.pwc.inspect_result.mogvision_adl.model.discriminator_trainer.Discriminator_Trainer._get_model", "home.repos.pwc.inspect_result.mogvision_adl.model.discriminator_trainer.Discriminator_Trainer._get_optimiers", "home.repos.pwc.inspect_result.mogvision_adl.util.utils.get_model_summary"], ["    ", "def", "__init__", "(", "self", ",", "\n", "denoiser", ":", "Dict", ",", "\n", "device", ":", "Union", "[", "str", ",", "int", "]", ",", "\n", "in_channels", ":", "int", ",", "\n", "out_channels", ":", "int", ",", "\n", "writer_numerical", ":", "SummaryWriter", ",", "\n", "writer_imgs", ":", "SummaryWriter", ",", "\n", "distributed", ",", "\n", ")", "->", "None", ":", "\n", "        ", "r\"\"\"Denoiser trainer\n        \n        Args:\n            denoiser: current rank\n            device: cuda device no.\n            in_channels: input channels (RGB:3, grey:1)\n            out_channels: output channels (RGB:3, grey:1)\n        \"\"\"", "\n", "super", "(", "Denoiser_Trainer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "rank", "=", "device", "if", "distributed", "else", "0", "\n", "self", ".", "distributed", "=", "distributed", "\n", "\n", "self", ".", "epochs", "=", "denoiser", ".", "config", "[", "'epochs'", "]", "\n", "self", ".", "lr", "=", "denoiser", ".", "config", "[", "'lr'", "]", "\n", "\n", "self", ".", "metrics", "=", "denoiser", ".", "eval_params", "\n", "self", ".", "print_model", "=", "denoiser", ".", "config", "[", "'print_model'", "]", "\n", "\n", "self", ".", "loss", "=", "denoiser", ".", "loss", "\n", "self", ".", "loss_weights", "=", "denoiser", ".", "loss_weights", "\n", "\n", "self", ".", "write_path", "=", "denoiser", ".", "log_dir", "\n", "self", ".", "checkpoints_path", "=", "denoiser", ".", "ckpt_dir", "\n", "\n", "self", ".", "validation_per_step", "=", "denoiser", ".", "config", "[", "'val_per_step'", "]", "\n", "self", ".", "test_per_step", "=", "denoiser", ".", "config", "[", "'test_per_step'", "]", "\n", "self", ".", "ckpts_per_step", "=", "denoiser", ".", "config", "[", "'checkpoint_per_step'", "]", "\n", "\n", "# get and distribute the model ", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.denoiser_trainer.Denoiser_Trainer.__call__": [[57, 94], ["tensorflow.print", "tensorflow.distribute.get_replica_context", "denoiser_trainer.Denoiser_Trainer_module", "denoiser_trainer.Denoiser_Trainer._get_lr", "Denoiser_Trainer_module.compile", "Denoiser_Trainer_module.fit"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.model.discriminator_trainer.Discriminator_Trainer._get_lr", "home.repos.pwc.inspect_result.mogvision_adl.model.trainer.Multiple_Steps_Trainer.compile", "home.repos.pwc.inspect_result.mogvision_adl.model.trainer.Multiple_Steps_Trainer.fit"], ["in_channels", ",", "out_channels", ",", "\n", "self", ".", "checkpoints_path", ")", "\n", "\n", "# get optimizer", "\n", "self", ".", "optimizer", ",", "self", ".", "scheduler", "=", "self", ".", "_get_optimizer", "(", "self", ".", "model", ",", "\n", "denoiser", ".", "config", "[", "'optimizer'", "]", ",", "\n", "denoiser", ".", "config", "[", "'lr_scheduler'", "]", ",", "\n", "denoiser", ".", "config", "[", "'lr'", "]", ")", "\n", "\n", "# get writers", "\n", "self", ".", "writer_numerical", "=", "writer_numerical", "\n", "self", ".", "writer_imgs", "=", "writer_imgs", "\n", "\n", "\n", "", "def", "__call__", "(", "self", ",", "\n", "ds_train_loader", ":", "DataLoader", ",", "\n", "ds_valid_loader", ":", "DataLoader", ",", "\n", "ds_test_loader", ":", "DataLoader", "\n", ")", "->", "bool", ":", "\n", "        ", "if", "self", ".", "rank", "==", "0", ":", "\n", "            ", "print", "(", "\"[i] Configuring denoiser...\"", ")", "\n", "", "trainer", "=", "Denoiser_Trainer_module", "(", "rank", "=", "self", ".", "rank", ",", "\n", "model", "=", "self", ".", "model", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", "lr", "=", "self", ".", "lr", ",", "\n", "writer_numerical", "=", "self", ".", "writer_numerical", ",", "\n", "writer_imgs", "=", "self", ".", "writer_imgs", ",", "\n", "checkpoints_path", "=", "self", ".", "checkpoints_path", ",", "\n", "print_model", "=", "self", ".", "print_model", ")", "\n", "if", "self", ".", "rank", "==", "0", ":", "\n", "            ", "print", "(", "\"[i] Compiling denoiser...\"", ")", "\n", "", "trainer", ".", "compile", "(", "optimizer", "=", "self", ".", "optimizer", ",", "\n", "scheduler", "=", "self", ".", "scheduler", ",", "\n", "loss", "=", "self", ".", "loss", ",", "\n", "loss_weights", "=", "self", ".", "loss_weights", ",", "\n", "metrics", "=", "self", ".", "metrics", ",", "\n", "distributed", "=", "self", ".", "distributed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.denoiser_trainer.Denoiser_Trainer._get_denoiser": [[108, 111], ["getattr", "getattr."], "methods", ["None"], ["", "def", "_get_denoiser", "(", "self", ",", "model_name", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "\"\"\" get denoiser model\"\"\"", "\n", "module_", "=", "getattr", "(", "MODELS", ",", "model_name", ")", "\n", "return", "module_", "(", "in_channels", ",", "out_channels", ")", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.denoiser_trainer.Denoiser_Trainer._get_model": [[113, 133], ["os.path.exists", "tensorflow.print", "denoiser_trainer.Denoiser_Trainer._get_denoiser", "util.utils.rmtree_dirs", "util.utils.rmtree_dirs", "tensorflow.keras.models.load_model", "tensorflow.print", "int", "len", "max", "os.listdir", "dir_.split"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.model.adl_trainer.ADL_Trainer._get_denoiser", "home.repos.pwc.inspect_result.mogvision_adl.util.utils.rmtree_dirs", "home.repos.pwc.inspect_result.mogvision_adl.util.utils.rmtree_dirs", "home.repos.pwc.inspect_result.mogvision_adl.util.utils.load_model"], ["\n", "", "def", "_get_model", "(", "self", ",", "mode", ",", "model_name", ",", "in_channels", ",", "out_channels", ",", "ckpt_dir", ",", "\n", "prefix", "=", "'ckpts_step_'", ",", "suffix", "=", "'.pt'", ")", ":", "\n", "        ", "\"\"\"We get the model and then load its last saved one if avail\"\"\"", "\n", "\n", "# get model", "\n", "model", "=", "self", ".", "_get_denoiser", "(", "model_name", ",", "in_channels", ",", "out_channels", ")", "\n", "\n", "# load the last saved model if avail", "\n", "model_path", "=", "None", "\n", "if", "os", ".", "path", ".", "exists", "(", "ckpt_dir", ")", ":", "\n", "            ", "step_ids", "=", "[", "int", "(", "dir_", ".", "split", "(", "prefix", ")", "[", "-", "1", "]", ".", "split", "(", "suffix", ")", "[", "0", "]", ")", "for", "dir_", "in", "os", ".", "listdir", "(", "ckpt_dir", ")", "]", "\n", "if", "len", "(", "step_ids", ")", ">", "0", ":", "\n", "                ", "step_num", "=", "max", "(", "step_ids", ")", "\n", "model_path", "=", "f\"{ckpt_dir}/{prefix}{step_num}{suffix}\"", "\n", "\n", "", "", "if", "model_path", ":", "\n", "            ", "model", "=", "load_model", "(", "model", ",", "model_path", ")", "\n", "print", "(", "f\"[i] {mode}-GPU{self.rank}: Restoring the model from step {step_num}.\"", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "f\"[i] {mode}-GPU{self.rank}: Creating a new model.\"", ")", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.denoiser_trainer.Denoiser_Trainer._get_optimizer": [[147, 165], ["torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "NotImplementedError", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "model.parameters", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "NotImplementedError", "list", "range"], "methods", ["None"], ["", "def", "_get_optimizer", "(", "self", ",", "model", ",", "optimizer_name", ",", "scheduler_dict", ",", "lr", ")", ":", "\n", "        ", "\"\"\"get the optimizer and lr_scheduler\"\"\"", "\n", "\n", "if", "optimizer_name", "==", "\"Adam\"", ":", "\n", "            ", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'optimizer not implemented'", ")", "\n", "\n", "", "if", "scheduler_dict", "[", "'type'", "]", "==", "\"ReduceLROnPlateau\"", ":", "\n", "            ", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "optimizer", ",", "**", "scheduler_dict", "[", "'kwargs'", "]", ")", "\n", "", "elif", "scheduler_dict", "[", "'type'", "]", "==", "\"MultiStepLR\"", ":", "\n", "            ", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "\n", "milestones", "=", "list", "(", "range", "(", "50000", ",", "500000", ",", "50000", ")", ")", ",", "\n", "**", "scheduler_dict", "[", "'kwargs'", "]", ",", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'lr not implemented'", ")", "\n", "\n", "", "return", "optimizer", ",", "scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.denoiser_trainer.Denoiser_Trainer_module.__init__": [[137, 176], ["tensorflow.cast", "model.trainer.Multiple_Steps_Trainer.__init__"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader_test.DataLoader.__init__"], ["            ", "model", "=", "model", ".", "cuda", "(", "self", ".", "device", ")", "\n", "model", "=", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "self", ".", "device", "]", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "\n", "", "return", "model", "\n", "\n", "\n", "\n", "", "def", "_get_optimizer", "(", "self", ",", "model", ",", "optimizer_name", ",", "scheduler_dict", ",", "lr", ")", ":", "\n", "        ", "\"\"\"get the optimizer and lr_scheduler\"\"\"", "\n", "\n", "if", "optimizer_name", "==", "\"Adam\"", ":", "\n", "            ", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'optimizer not implemented'", ")", "\n", "\n", "", "if", "scheduler_dict", "[", "'type'", "]", "==", "\"ReduceLROnPlateau\"", ":", "\n", "            ", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "optimizer", ",", "**", "scheduler_dict", "[", "'kwargs'", "]", ")", "\n", "", "elif", "scheduler_dict", "[", "'type'", "]", "==", "\"MultiStepLR\"", ":", "\n", "            ", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "\n", "milestones", "=", "list", "(", "range", "(", "50000", ",", "500000", ",", "50000", ")", ")", ",", "\n", "**", "scheduler_dict", "[", "'kwargs'", "]", ",", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'lr not implemented'", ")", "\n", "\n", "", "return", "optimizer", ",", "scheduler", "\n", "\n", "\n", "\n", "", "", "class", "Denoiser_Trainer_module", "(", "trainer", ".", "Trainer", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "\n", "rank", ":", "Union", "[", "str", ",", "int", "]", ",", "\n", "model", ":", "DistributedDataParallel", ",", "\n", "device", ":", "Union", "[", "str", ",", "int", "]", ",", "\n", "lr", ":", "optim", ".", "lr_scheduler", ",", "\n", "writer_numerical", ":", "SummaryWriter", ",", "\n", "writer_imgs", ":", "SummaryWriter", ",", "\n", "checkpoints_path", ":", "str", ",", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.denoiser_trainer.Denoiser_Trainer_module._compile": [[177, 201], ["denoiser_trainer._loss_weights"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.model.discriminator_trainer._loss_weights"], ["print_model", ":", "bool", "\n", ")", ":", "\n", "\n", "        ", "self", ".", "rank", "=", "rank", "\n", "self", ".", "writer_numerical", "=", "writer_numerical", "\n", "self", ".", "model", "=", "model", "\n", "\n", "if", "self", ".", "rank", "==", "0", "and", "print_model", ":", "\n", "            ", "model_params", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "self", ".", "model", ".", "parameters", "(", ")", ")", "\n", "print", "(", "f'[info] Denoiser`s params: {model_params}'", ")", "\n", "\n", "", "self", ".", "device", "=", "device", "\n", "self", ".", "lr", "=", "lr", "\n", "\n", "super", "(", "Denoiser_Trainer_module", ",", "self", ")", ".", "__init__", "(", "\n", "rank", "=", "rank", ",", "\n", "writer_numerical", "=", "writer_numerical", ",", "\n", "writer_imgs", "=", "writer_imgs", ",", "\n", "ckpts_path", "=", "checkpoints_path", "\n", ")", "\n", "\n", "", "def", "_compile", "(", "self", ",", "\n", "optimizer", ":", "optim", ",", "\n", "scheduler", ":", "optim", ".", "lr_scheduler", ",", "\n", "loss", ":", "Dict", "[", "str", ",", "Callable", "[", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ",", "torch", ".", "Tensor", "]", "]", "=", "None", ",", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.denoiser_trainer.Denoiser_Trainer_module._get_train_one_batch": [[223, 255], ["torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "data[].to().cuda", "denoiser_trainer.Denoiser_Trainer_module._rescale_gt_2d", "data[].to().cuda", "denoiser_trainer.Denoiser_Trainer_module.model", "denoiser_trainer.Denoiser_Trainer_module.loss.items", "summary.items", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "data[].to", "data[].to", "fn", "denoiser_trainer.Denoiser_Trainer_module.writer_numerical.add_scalar", "fn", "fn"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.model.adl_trainer.ADL_Trainer_module._rescale_gt_2d"], ["", "def", "_get_train_one_batch", "(", "self", ",", "data", ",", "step_i", ",", "data_type", "=", "None", ")", ":", "\n", "        ", "\"\"\"training function for one batch\"\"\"", "\n", "\n", "# initilize the total loss value", "\n", "loss_tot", "=", "torch", ".", "tensor", "(", "0.0", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "cuda", "(", "self", ".", "device", ")", "\n", "\n", "# get ground-truth (gt)", "\n", "gt", "=", "data", "[", "'x'", "]", ".", "to", "(", "torch", ".", "float32", ")", ".", "cuda", "(", "self", ".", "device", ")", "\n", "gt_x2", ",", "gt_x4", "=", "self", ".", "_rescale_gt_2d", "(", "gt", ")", "\n", "\n", "# get prediction", "\n", "y", "=", "data", "[", "'y'", "]", ".", "to", "(", "torch", ".", "float32", ")", ".", "cuda", "(", "self", ".", "device", ")", "\n", "y_pred", ",", "y_pred_x2", ",", "y_pred_x4", "=", "self", ".", "model", "(", "y", ")", "\n", "\n", "\n", "# apply evaluation metrics", "\n", "summary", "=", "{", "}", "\n", "for", "name", ",", "fn", "in", "self", ".", "loss", ".", "items", "(", ")", ":", "\n", "            ", "loss_", "=", "fn", "(", "gt", ",", "y_pred", ")", "+", "fn", "(", "gt_x2", ",", "y_pred_x2", ")", "+", "fn", "(", "gt_x4", ",", "y_pred_x4", ")", "\n", "\n", "#criterion[name].append(loss_cur)", "\n", "loss_tot", "=", "loss_tot", "+", "loss_", "*", "self", ".", "loss_weights", "[", "name", "]", "\n", "summary", "[", "'/loss/'", "+", "name", "]", "=", "loss_", "\n", "\n", "", "summary", "[", "'/loss/'", "+", "'loss_tot'", "]", "=", "loss_tot", "\n", "\n", "# write to logger", "\n", "if", "self", ".", "rank", "==", "0", ":", "\n", "            ", "for", "key", ",", "val", "in", "summary", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "writer_numerical", ".", "add_scalar", "(", "key", ",", "val", ",", "step_i", ")", "\n", "\n", "", "", "return", "summary", ",", "loss_tot", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.denoiser_trainer.Denoiser_Trainer_module._rescale_gt_2d": [[256, 263], ["torch.interpolate().clamp", "torch.interpolate().clamp", "torch.interpolate().clamp", "torch.interpolate().clamp", "torch.interpolate().clamp", "torch.interpolate().clamp", "torch.interpolate().clamp", "torch.interpolate().clamp", "torch.interpolate().clamp.to().cuda", "torch.interpolate().clamp.to().cuda", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate().clamp.to", "torch.interpolate().clamp.to"], "methods", ["None"], ["", "def", "_rescale_gt_2d", "(", "self", ",", "im", ")", ":", "\n", "        ", "\"\"\" downsacle image by factor 2 and 4 \"\"\"", "\n", "im_x2", "=", "F", ".", "interpolate", "(", "im", ",", "size", "=", "(", "im", ".", "shape", "[", "2", "]", "//", "2", ",", "im", ".", "shape", "[", "3", "]", "//", "2", ")", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "False", ")", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "1.0", ")", "\n", "im_x4", "=", "F", ".", "interpolate", "(", "im", ",", "size", "=", "(", "im", ".", "shape", "[", "2", "]", "//", "4", ",", "im", ".", "shape", "[", "3", "]", "//", "4", ")", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "False", ")", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "1.0", ")", "\n", "return", "im_x2", ".", "to", "(", "torch", ".", "float32", ")", ".", "cuda", "(", "self", ".", "device", ")", ",", "im_x4", ".", "to", "(", "torch", ".", "float32", ")", ".", "cuda", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.denoiser_trainer._loss_weights": [[340, 346], ["weights_.update"], "function", ["None"], []], "home.repos.pwc.inspect_result.mogvision_adl.model.trainer.Trainer.__init__": [[17, 35], ["abc.ABC.__init__"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader_test.DataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "rank", ":", "int", ",", "\n", "ckpts_path", ":", "str", ",", "\n", "writer_numerical", ":", "str", ",", "\n", "writer_imgs", ":", "str", ")", ":", "\n", "        ", "r\"\"\"A trainer which can be trained with the API.\n        Args:\n            rank: current rank\n            ckpts_path: Path to the checkpoints file\n            writer_numerical: summary file for storing numerical logging\n            writer_imgs: summary file for storing the first images of the last batch\n        \"\"\"", "\n", "super", "(", "Trainer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "writer_numerical", "=", "writer_numerical", "\n", "self", ".", "writer_imgs", "=", "writer_imgs", "\n", "self", ".", "ckpts_path", "=", "ckpts_path", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.trainer.Trainer.compile": [[36, 40], ["trainer.Trainer._compile"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.model.discriminator_trainer.Discriminator_Trainer_module._compile"], ["", "def", "compile", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"Configures the trainer for training.\"\"\"", "\n", "self", ".", "_compile", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "compiled", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.trainer.Trainer.fit": [[41, 155], ["trainer.Trainer.model.train", "range", "ValueError", "len", "enumerate", "trainer.Trainer.writer_numerical.close", "trainer.Trainer.writer_imgs.close", "trainer.Trainer.train", "trainer.Trainer._get_test", "len", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "trainer.Trainer.train", "trainer.Trainer.train", "len", "trainer.Trainer._get_val", "print", "trainer.Trainer._print_summary", "len", "trainer.Trainer._print_summary", "trainer.Trainer._save_model", "trainer.Trainer._save_model", "print", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "trainer.Trainer.train", "trainer.Trainer.train", "opt_disc.zero_grad", "loss_disc.backward", "opt_disc.step", "len", "trainer.Trainer._print_summary", "print", "print", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "datetime.datetime.datetime.now", "param.ljust", "param.ljust"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.model.trainer.Trainer.train", "home.repos.pwc.inspect_result.mogvision_adl.model.trainer.Trainer.train", "home.repos.pwc.inspect_result.mogvision_adl.model.trainer.Trainer._get_test", "home.repos.pwc.inspect_result.mogvision_adl.model.trainer.Trainer.train", "home.repos.pwc.inspect_result.mogvision_adl.model.trainer.Trainer.train", "home.repos.pwc.inspect_result.mogvision_adl.model.trainer.Trainer._get_val", "home.repos.pwc.inspect_result.mogvision_adl.model.trainer.Multiple_Steps_Trainer._print_summary", "home.repos.pwc.inspect_result.mogvision_adl.model.trainer.Multiple_Steps_Trainer._print_summary", "home.repos.pwc.inspect_result.mogvision_adl.model.trainer.Trainer._save_model", "home.repos.pwc.inspect_result.mogvision_adl.model.trainer.Trainer._save_model", "home.repos.pwc.inspect_result.mogvision_adl.model.trainer.Trainer.train", "home.repos.pwc.inspect_result.mogvision_adl.model.trainer.Trainer.train", "home.repos.pwc.inspect_result.mogvision_adl.model.trainer.Multiple_Steps_Trainer._print_summary"], ["", "def", "fit", "(", "self", ",", "\n", "train_data", ",", "\n", "validation_data", ",", "\n", "test_data", ",", "\n", "epochs", ":", "int", "=", "100", ",", "\n", "validation_per_step", ":", "int", "=", "1000", ",", "\n", "test_per_step", ":", "int", "=", "5000", ",", "\n", "ckpts_per_step", ":", "int", "=", "5000", ",", "\n", "**", "kwargs", ")", ":", "\n", "\n", "# check whether compiled was excuted ...", "\n", "        ", "if", "not", "self", ".", "compiled", ":", "\n", "            ", "raise", "ValueError", "(", "\"Please call compile() before training!\"", ")", "\n", "\n", "# check wether we have test data", "\n", "", "if", "test_data", "is", "None", ":", "\n", "            ", "test_data", "=", "{", "}", "\n", "\n", "", "decay", "=", "0.", "\n", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "steps", "=", "epochs", "*", "len", "(", "train_data", ")", "\n", "for", "epoch", "in", "range", "(", "epochs", ")", ":", "\n", "            ", "for", "i", ",", "batch_i", "in", "enumerate", "(", "train_data", ")", ":", "\n", "                ", "step_i", "=", "epoch", "*", "len", "(", "train_data", ")", "+", "i", "\n", "\n", "############################################", "\n", "#                1/4: Training", "\n", "############################################", "\n", "if", "self", ".", "mode", "==", "'denoiser'", ":", "\n", "# train denoiser", "\n", "                    ", "summary_train", ",", "_", "=", "self", ".", "train", "(", "batch_i", ",", "self", ".", "optimizer", ",", "self", ".", "scheduler", ",", "None", ",", "step_i", ")", "\n", "\n", "\n", "", "elif", "self", ".", "mode", "==", "'discriminator'", ":", "\n", "                    ", "loss_tot", "=", "torch", ".", "tensor", "(", "0.0", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "cuda", "(", "self", ".", "device", ")", "\n", "\n", "# train fakse samples", "\n", "summary_train", ",", "_", "=", "self", ".", "train", "(", "batch_i", ",", "self", ".", "optimizer", ",", "self", ".", "scheduler", ",", "None", ",", "step_i", ")", "\n", "\n", "# train true samples", "\n", "_", ",", "loss_", "=", "self", ".", "train", "(", "batch_i", ",", "self", ".", "optimizer", ",", "self", ".", "scheduler", ",", "'gt'", ",", "step_i", ")", "\n", "\n", "loss_tot", "+=", "loss_", "\n", "summary_train", "[", "'/loss/'", "+", "'loss_tot'", "]", "=", "loss_tot", "\n", "\n", "\n", "", "elif", "self", ".", "mode", "==", "'ADL'", ":", "\n", "                    ", "loss_tot", "=", "torch", ".", "tensor", "(", "0.0", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "cuda", "(", "self", ".", "device", ")", "\n", "\n", "# Run the discriminator for true sample", "\n", "_", ",", "loss_disc", "=", "self", ".", "train", "(", "batch_i", ",", "self", ".", "optimizer", "[", "'opt_disc'", "]", ",", "\n", "self", ".", "scheduler", "[", "'sched_disc'", "]", ",", "'gt'", ",", "step_i", ")", "\n", "loss_tot", "+=", "loss_disc", "\n", "\n", "# Run the discriminator for fake sample # run the denoiser", "\n", "summary_train", ",", "loss_den", "=", "self", ".", "train", "(", "batch_i", ",", "self", ".", "optimizer", "[", "'optimizer'", "]", ",", "\n", "self", ".", "scheduler", "[", "'scheduler'", "]", ",", "None", ",", "step_i", ")", "\n", "\n", "loss_disc", "=", "summary_train", "[", "'/loss/disc_loss_tot'", "]", "\n", "opt_disc", "=", "self", ".", "optimizer", "[", "'opt_disc'", "]", "\n", "opt_disc", ".", "zero_grad", "(", ")", "\n", "loss_disc", ".", "backward", "(", ")", "\n", "opt_disc", ".", "step", "(", ")", "\n", "loss_tot", "+=", "loss_disc", "\n", "summary_train", "[", "'/loss/disc_loss_tot'", "]", "=", "loss_tot", "\n", "\n", "\n", "############################################", "\n", "#                2/4: Validation", "\n", "############################################", "\n", "", "if", "(", "step_i", ">", "0", ")", "and", "(", "step_i", "%", "validation_per_step", "==", "0", ")", ":", "\n", "                    ", "if", "len", "(", "validation_data", ")", ">", "0", ":", "\n", "                        ", "summary_val", "=", "self", ".", "_get_val", "(", "self", ".", "model", ",", "validation_data", ",", "step_i", ")", "\n", "\n", "# print out the summary", "\n", "", "if", "self", ".", "rank", "==", "0", ":", "\n", "                        ", "print", "(", "f\"\\n{datetime.now()}\\tstep: <<<<< {step_i}/{steps} >>>>>\"", ")", "\n", "self", ".", "_print_summary", "(", "'TRAIN'", ",", "summary_train", ")", "\n", "if", "len", "(", "validation_data", ")", ">", "0", ":", "\n", "                            ", "self", ".", "_print_summary", "(", "'VALIDATION'", ",", "summary_val", ")", "\n", "\n", "# print lr", "\n", "", "param", "=", "'LR'", "\n", "\n", "if", "self", ".", "mode", "==", "'ADL'", ":", "\n", "                            ", "opt", "=", "self", ".", "optimizer", "[", "'optimizer'", "]", "\n", "print", "(", "f'{param.ljust(11)}-> {opt.param_groups[0][\"lr\"]:0.8f}'", ")", "\n", "", "else", ":", "\n", "                            ", "print", "(", "f'{param.ljust(11)}-> {self.optimizer.param_groups[0][\"lr\"]:0.8f}'", ")", "\n", "\n", "############################################", "\n", "#                 3/4: Test", "\n", "############################################", "\n", "", "", "", "if", "(", "step_i", ">", "0", ")", "and", "(", "step_i", "%", "test_per_step", "==", "0", ")", "and", "(", "len", "(", "test_data", ")", ">", "0", ")", ":", "\n", "                    ", "summary_test", "=", "self", ".", "_get_test", "(", "self", ".", "model", ",", "test_data", ",", "step_i", ")", "\n", "if", "self", ".", "rank", "==", "0", ":", "\n", "                        ", "self", ".", "_print_summary", "(", "'TEST'", ",", "summary_test", ")", "\n", "\n", "############################################", "\n", "#              4/4: Checkpoint", "\n", "############################################", "\n", "", "", "if", "(", "self", ".", "rank", "==", "0", ")", "and", "(", "step_i", ">", "0", ")", "and", "(", "step_i", "%", "ckpts_per_step", "==", "0", ")", ":", "\n", "                    ", "if", "self", ".", "mode", "==", "'ADL'", ":", "\n", "                        ", "self", ".", "_save_model", "(", "self", ".", "model", ",", "step_i", ",", "self", ".", "optimizer", "[", "'optimizer'", "]", ")", "\n", "", "else", ":", "\n", "                        ", "self", ".", "_save_model", "(", "self", ".", "model", ",", "step_i", ",", "self", ".", "optimizer", ")", "\n", "print", "(", "\"[i] The checkpoint is stored with id: \"", ",", "step_i", ")", "\n", "\n", "\n", "", "", "", "", "if", "self", ".", "rank", "==", "0", ":", "\n", "            ", "self", ".", "writer_numerical", ".", "close", "(", ")", "\n", "self", ".", "writer_imgs", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.trainer.Trainer.train": [[156, 163], ["trainer.Trainer._get_train_one_batch", "optimizer.zero_grad", "loss.backward", "optimizer.step", "scheduler.step"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.model.discriminator_trainer.Discriminator_Trainer_module._get_train_one_batch"], ["", "", "def", "train", "(", "self", ",", "batch_i", ",", "optimizer", ",", "scheduler", ",", "data_type", ",", "step_i", ")", ":", "\n", "        ", "summary", ",", "loss", "=", "self", ".", "_get_train_one_batch", "(", "batch_i", ",", "step_i", ",", "data_type", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "return", "summary", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.trainer.Trainer._get_val": [[165, 214], ["model.eval", "trainer.Trainer.metrics.copy", "trainer.Trainer.metrics.items", "trainer.Trainer.metrics.keys", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "batch_i[].to().cuda", "batch_i[].to().cuda", "trainer.Trainer.model", "trainer.Trainer.metrics.items", "torchvision.utils.make_grid", "trainer.Trainer.writer_imgs.add_image", "torchvision.utils.make_grid", "trainer.Trainer.writer_imgs.add_image", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "fn", "batch_i[].to", "batch_i[].to", "trainer.Trainer.writer_numerical.add_scalar"], "methods", ["None"], ["", "def", "_get_val", "(", "self", ",", "model", ",", "validation_data", ",", "step_i", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "\n", "summary", "=", "self", ".", "metrics", ".", "copy", "(", ")", "\n", "for", "name", ",", "fn", "in", "self", ".", "metrics", ".", "items", "(", ")", ":", "\n", "            ", "summary", "[", "name", "]", "=", "torch", ".", "tensor", "(", "0.0", ",", "dtype", "=", "torch", ".", "float64", ")", ".", "cuda", "(", "self", ".", "device", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "batch_i", "in", "enumerate", "(", "validation_data", ")", ":", "\n", "\n", "# get ground-truth", "\n", "                ", "GT", "=", "batch_i", "[", "'x'", "]", ".", "to", "(", "torch", ".", "float32", ")", ".", "cuda", "(", "self", ".", "device", ")", "\n", "\n", "# get noisy data", "\n", "y", "=", "batch_i", "[", "'y'", "]", ".", "to", "(", "torch", ".", "float32", ")", ".", "cuda", "(", "self", ".", "device", ")", "\n", "\n", "#prediction", "\n", "y_pred", ",", "_", ",", "_", "=", "self", ".", "model", "(", "y", ")", "\n", "\n", "# apply evaluation metrics", "\n", "for", "name", ",", "fn", "in", "self", ".", "metrics", ".", "items", "(", ")", ":", "\n", "                    ", "val", "=", "fn", "(", "GT", ",", "y_pred", ")", "\n", "summary", "[", "name", "]", "+=", "val", "\n", "if", "self", ".", "rank", "==", "0", ":", "\n", "                        ", "self", ".", "writer_numerical", ".", "add_scalar", "(", "'VAL/'", "+", "name", ",", "val", ",", "step_i", ")", "\n", "\n", "\n", "# save the images of the last ietration", "\n", "", "", "", "if", "self", ".", "rank", "==", "0", "and", "SAVE_IMGS", ":", "\n", "                ", "grid", "=", "make_grid", "(", "GT", ")", "\n", "self", ".", "writer_imgs", ".", "add_image", "(", "'VAL/GT/'", ",", "grid", ",", "0", ")", "\n", "\n", "grid", "=", "make_grid", "(", "y_pred", ")", "\n", "self", ".", "writer_imgs", ".", "add_image", "(", "'VAL/y_pred/'", ",", "grid", ",", "0", ")", "\n", "\n", "# save other scales", "\n", "#grid = make_grid(y_pred_x2)", "\n", "#self.writer_imgs.add_image('VAL/y_pred_x2/', grid, 0)", "\n", "\n", "#grid = make_grid(y_pred_x4)", "\n", "#self.writer_imgs.add_image('VAL/y_pred_x4/', grid, 0)", "\n", "\n", "#save_image(y_pred,    f'{self.log_dir_imgs}/val_{step_i}_.png')", "\n", "\n", "\n", "# take average over all results", "\n", "", "", "for", "name", "in", "self", ".", "metrics", ".", "keys", "(", ")", ":", "\n", "            ", "summary", "[", "name", "]", "/=", "(", "i", "+", "1.", ")", "\n", "", "return", "summary", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.trainer.Trainer._get_test": [[216, 258], ["model.eval", "trainer.Trainer.metrics.copy", "trainer.Trainer.metrics.items", "trainer.Trainer.metrics.keys", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "batch_i[].to().cuda", "batch_i[].to().cuda", "trainer.Trainer.model", "trainer.Trainer.metrics.items", "torchvision.utils.make_grid", "trainer.Trainer.writer_imgs.add_image", "torchvision.utils.make_grid", "trainer.Trainer.writer_imgs.add_image", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "fn", "batch_i[].to", "batch_i[].to", "trainer.Trainer.writer_numerical.add_scalar"], "methods", ["None"], ["", "def", "_get_test", "(", "self", ",", "model", ",", "test_data", ",", "step_i", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "\n", "summary", "=", "self", ".", "metrics", ".", "copy", "(", ")", "\n", "for", "name", ",", "fn", "in", "self", ".", "metrics", ".", "items", "(", ")", ":", "\n", "            ", "summary", "[", "name", "]", "=", "torch", ".", "tensor", "(", "0.0", ",", "dtype", "=", "torch", ".", "float64", ")", ".", "cuda", "(", "self", ".", "device", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "batch_i", "in", "enumerate", "(", "test_data", ")", ":", "\n", "\n", "                ", "GT", "=", "batch_i", "[", "'x'", "]", ".", "to", "(", "torch", ".", "float32", ")", ".", "cuda", "(", "self", ".", "device", ")", "\n", "y", "=", "batch_i", "[", "'y'", "]", ".", "to", "(", "torch", ".", "float32", ")", ".", "cuda", "(", "self", ".", "device", ")", "\n", "\n", "#prediction", "\n", "y_pred", ",", "_", ",", "_", "=", "self", ".", "model", "(", "y", ")", "\n", "\n", "for", "name", ",", "fn", "in", "self", ".", "metrics", ".", "items", "(", ")", ":", "\n", "                    ", "metric", "=", "fn", "(", "GT", ",", "y_pred", ")", "\n", "summary", "[", "name", "]", "+=", "metric", "\n", "if", "self", ".", "rank", "==", "0", ":", "\n", "                        ", "self", ".", "writer_numerical", ".", "add_scalar", "(", "'TEST/'", "+", "name", ",", "metric", ",", "step_i", ")", "\n", "\n", "# save the images of the last ietration", "\n", "", "", "", "if", "self", ".", "rank", "==", "0", "and", "SAVE_IMGS", ":", "\n", "                ", "grid", "=", "make_grid", "(", "GT", ")", "\n", "self", ".", "writer_imgs", ".", "add_image", "(", "'TEST/GT/'", ",", "grid", ",", "0", ")", "\n", "\n", "grid", "=", "make_grid", "(", "y_pred", ")", "\n", "self", ".", "writer_imgs", ".", "add_image", "(", "'TEST/y_pred/'", ",", "grid", ",", "0", ")", "\n", "\n", "# save other scales", "\n", "#grid = make_grid(y_pred_x2)", "\n", "#self.writer_imgs.add_image('TEST/y_pred_x2/', grid, 0)", "\n", "\n", "#grid = make_grid(y_pred_x4)", "\n", "#self.writer_imgs.add_image('TEST/y_pred_x4/', grid, 0)", "\n", "\n", "\n", "# take average over all results", "\n", "", "", "for", "name", "in", "self", ".", "metrics", ".", "keys", "(", ")", ":", "\n", "            ", "summary", "[", "name", "]", "/=", "(", "i", "+", "1.", ")", "\n", "", "return", "summary", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.trainer.Trainer._save_model": [[261, 271], ["utils.util.save_model"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.utils.util.save_model"], ["", "def", "_save_model", "(", "self", ",", "model", ",", "step_i", ",", "optimizer", ")", ":", "\n", "        ", "file_", "=", "f\"{self.ckpts_path}/ckpts_step_{step_i}.pt\"", "\n", "save_model", "(", "model", ",", "file_", ")", "\n", "'''\n        torch.save({\n                    'step': step_i,\n                    'model_state_dict': model.state_dict(),\n                    'optimizer_state_dict': optimizer.state_dict(),\n                    }, file_)\n        '''", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.trainer.Trainer._print_summary": [[272, 286], ["print", "len", "summary.items", "print", "summary.keys", "key.split", "print", "print", "prefix.ljust", "key.ljust", "key.ljust"], "methods", ["None"], ["", "def", "_print_summary", "(", "self", ",", "prefix", ",", "summary", ")", ":", "\n", "        ", "precision", "=", "'0.5f'", "\n", "print", "(", "f'{prefix.ljust(11)}-> '", ",", "end", "=", "''", ")", "\n", "keys_num", "=", "len", "(", "summary", ".", "keys", "(", ")", ")", "\n", "\n", "counter", "=", "1", "\n", "for", "key", ",", "value", "in", "summary", ".", "items", "(", ")", ":", "\n", "            ", "key", "=", "key", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "if", "counter", "<", "keys_num", ":", "\n", "                ", "print", "(", "f\"{key.ljust(4)}: {value:.4f}\"", ",", "end", "=", "' | '", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "f\"{key.ljust(4)}: {value:.4f}\"", ",", "end", "=", "' '", ")", "\n", "", "counter", "+=", "1", "\n", "", "print", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mogvision_adl.model.loss.Loss_L1": [[9, 11], ["MAE_obj.__call__"], "function", ["home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader_test.DataLoader.__call__"], ["def", "Loss_L1", "(", "x_gt", ",", "yhat", ")", ":", "\n", "  ", "return", "MAE_obj", ".", "__call__", "(", "x_gt", ",", "yhat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.loss.pyr_Loss": [[79, 146], ["tensorflow.constant", "loss.pyr_Loss._convolve"], "function", ["None"], ["y_pred", "=", "torch", ".", "clamp", "(", "y_pred", ",", "0", ",", "1", ")", "\n", "\n", "#change it to a function", "\n", "loss_all", "=", "0.", "\n", "for", "b", "in", "range", "(", "B", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "n_channels", ")", ":", "\n", "            ", "x_hist", "=", "torch", ".", "histc", "(", "x_gt", "[", "b", ",", "i", ",", ":", ",", ":", "]", ",", "bins", "=", "256", ",", "min", "=", "0", ",", "max", "=", "1.", ")", "\n", "y_hist", "=", "torch", ".", "histc", "(", "y_pred", "[", "b", ",", "i", ",", ":", ",", ":", "]", ",", "bins", "=", "256", ",", "min", "=", "0", ",", "max", "=", "1.", ")", "\n", "loss_all", "+=", "log_cosh_torch", "(", "x_hist", ",", "y_hist", ")", "\n", "\n", "", "", "return", "loss_all", "/", "torch", ".", "prod", "(", "torch", ".", "tensor", "(", "x_gt", ".", "size", "(", ")", ")", ")", "", "", ""]], "home.repos.pwc.inspect_result.mogvision_adl.model.loss.log_cosh_torch": [[65, 70], ["torch.mean", "torch.mean", "torch.mean", "loss.log_cosh_torch._logcosh"], "function", ["None"], ["", "def", "log_cosh_torch", "(", "x_gt", ",", "y_pred", ")", ":", "\n", "    ", "def", "_logcosh", "(", "x", ")", ":", "\n", "        ", "return", "x", "+", "torch", ".", "nn", ".", "functional", ".", "softplus", "(", "-", "2.", "*", "x", ",", "beta", "=", "1", ",", "threshold", "=", "10", ")", "-", "torch", ".", "log", "(", "torch", ".", "tensor", "(", "2.", ")", ")", ".", "to", "(", "x", ".", "dtype", ")", "\n", "\n", "", "return", "torch", ".", "mean", "(", "_logcosh", "(", "x_gt", "-", "y_pred", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.loss.Hist_loss": [[36, 72], ["tensorflow.zeros", "tensorflow.range", "tensorflow.math.reduce_prod", "tensorflow.divide", "tensorflow.nn.compute_average_loss", "tensorflow.keras.losses.LogCosh", "tf.keras.losses.LogCosh.", "tensorflow.constant", "tensorflow.clip_by_value", "tensorflow.reshape", "tensorflow.stack", "tensorflow.cast", "loss.Hist_loss.tf_histogram"], "function", ["None"], ["\n", "", "B", "=", "x_gt", ".", "size", "(", ")", "[", "0", "]", "\n", "per_batch_loss", "=", "torch", ".", "Tensor", "(", "[", "0.", "]", ")", "\n", "ker_base", "=", "[", "0.002566", ",", "0.1655", ",", "0.6638", ",", "0.1655", ",", "0.002566", "]", "\n", "\n", "x_blur", "=", "_convolve", "(", "x_gt", ",", "ker_base", ",", "1", ")", "\n", "y_blur", "=", "_convolve", "(", "yhat", ",", "ker_base", ",", "1", ")", "\n", "\n", "ker_base", "=", "[", "1.", ",", "4.", ",", "6.", ",", "4.", ",", "1.", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "levels", "+", "1", ")", ":", "\n", "        ", "x_blur_cur", "=", "_convolve", "(", "x_blur", ",", "ker_base", ",", "i", ")", "\n", "y_blur_cur", "=", "_convolve", "(", "y_blur", ",", "ker_base", ",", "i", ")", "\n", "\n", "# get detail", "\n", "Di_x", "=", "x_blur", "-", "x_blur_cur", "\n", "Di_y", "=", "y_blur", "-", "y_blur_cur", "\n", "\n", "# update x, y", "\n", "x_blur", "=", "x_blur_cur", "\n", "y_blur", "=", "y_blur_cur", "\n", "\n", "x_ravel", "=", "torch", ".", "reshape", "(", "Di_x", ",", "[", "B", ",", "-", "1", "]", ")", "\n", "y_ravel", "=", "torch", ".", "reshape", "(", "Di_y", ",", "[", "B", ",", "-", "1", "]", ")", "\n", "per_batch_loss", "=", "MAE_obj", "(", "x_ravel", ",", "y_ravel", ")", "\n", "\n", "", "return", "per_batch_loss", "\n", "\n", "\n", "\n", "", "def", "log_cosh_torch", "(", "x_gt", ",", "y_pred", ")", ":", "\n", "    ", "def", "_logcosh", "(", "x", ")", ":", "\n", "        ", "return", "x", "+", "torch", ".", "nn", ".", "functional", ".", "softplus", "(", "-", "2.", "*", "x", ",", "beta", "=", "1", ",", "threshold", "=", "10", ")", "-", "torch", ".", "log", "(", "torch", ".", "tensor", "(", "2.", ")", ")", ".", "to", "(", "x", ".", "dtype", ")", "\n", "\n", "", "return", "torch", ".", "mean", "(", "_logcosh", "(", "x_gt", "-", "y_pred", ")", ")", "\n", "\n", "# Histogram loss 2D", "\n", "", "def", "Hist_loss", "(", "x_gt", ",", "y_pred", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.MODELS.FeatureExtrator.__init__": [[18, 35], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "int", "int"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader_test.DataLoader.__init__"], ["  ", "def", "__init__", "(", "self", ",", "in_ch", ",", "num_filter", ",", "bias", "=", "False", ")", ":", "\n", "    ", "super", "(", "FeatureExtrator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_ch", ",", "out_channels", "=", "num_filter", "//", "2", ",", "\n", "kernel_size", "=", "7", ",", "dilation", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "3", ",", "bias", "=", "bias", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_ch", ",", "out_channels", "=", "num_filter", "//", "2", ",", "\n", "kernel_size", "=", "7", ",", "dilation", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "6", ",", "bias", "=", "bias", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_ch", ",", "out_channels", "=", "num_filter", "//", "2", ",", "\n", "kernel_size", "=", "7", ",", "dilation", "=", "(", "4", ",", "4", ")", ",", "padding", "=", "12", ",", "bias", "=", "bias", ")", "\n", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "int", "(", "1.5", "*", "num_filter", ")", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "num_filter", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "int", "(", "1.5", "*", "num_filter", ")", ",", "out_channels", "=", "num_filter", ",", "\n", "kernel_size", "=", "7", ",", "stride", "=", "1", ",", "padding", "=", "3", ",", "bias", "=", "bias", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_ch", ",", "out_channels", "=", "num_filter", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.MODELS.FeatureExtrator.forward": [[36, 48], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "MODELS.FeatureExtrator.relu", "MODELS.FeatureExtrator.bn2", "MODELS.FeatureExtrator.conv5", "MODELS.FeatureExtrator.bn1", "MODELS.FeatureExtrator.conv4", "MODELS.FeatureExtrator.conv1", "MODELS.FeatureExtrator.conv2", "MODELS.FeatureExtrator.conv3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "    ", "x", "=", "torch", ".", "cat", "(", "(", "self", ".", "conv1", "(", "inp", ")", ",", "self", ".", "conv2", "(", "inp", ")", ",", "self", ".", "conv3", "(", "inp", ")", ")", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "\n", "x", "=", "self", ".", "bn2", "(", "self", ".", "conv4", "(", "x", ")", ")", "\n", "\n", "# Shortcut Connection", "\n", "s", "=", "self", ".", "conv5", "(", "inp", ")", "\n", "\n", "# Addition", "\n", "x", "=", "x", "+", "s", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.MODELS.Residual_block.__init__": [[51, 59], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader_test.DataLoader.__init__"], ["  ", "def", "__init__", "(", "self", ",", "in_ch", ",", "out_ch", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ":", "\n", "    ", "super", "(", "Residual_block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_ch", ",", "out_ch", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "out_ch", ",", "out_ch", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "bias", "=", "bias", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "in_ch", ",", "out_ch", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "padding", "=", "(", "0", ",", "0", ")", ",", "bias", "=", "bias", ")", "\n", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_ch", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.MODELS.Residual_block.forward": [[60, 73], ["MODELS.Residual_block.relu", "MODELS.Residual_block.relu", "MODELS.Residual_block.conv3", "MODELS.Residual_block.relu", "MODELS.Residual_block.bn", "MODELS.Residual_block.bn", "MODELS.Residual_block.conv1", "MODELS.Residual_block.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "    ", "x", "=", "self", ".", "relu", "(", "self", ".", "bn", "(", "self", ".", "conv1", "(", "inp", ")", ")", ")", "\n", "x", "=", "self", ".", "relu", "(", "self", ".", "bn", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "\n", "# Shortcut Connection", "\n", "s", "=", "self", ".", "conv3", "(", "inp", ")", "\n", "\n", "# Addition ", "\n", "x", "=", "x", "+", "s", "\n", "\n", "# Activation", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.MODELS.Decoder_block.__init__": [[78, 85], ["torch.Module.__init__", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "MODELS.Residual_block"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader_test.DataLoader.__init__"], ["  ", "def", "__init__", "(", "self", ",", "in_ch", ",", "skip_ch", ",", "out_ch", ")", ":", "\n", "    ", "super", "(", "Decoder_block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "\n", "self", ".", "up_sampling", "=", "nn", ".", "ConvTranspose2d", "(", "in_ch", ",", "out_ch", ",", "3", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "output_padding", "=", "1", ")", "#nn.Upsample(scale_factor=2)", "\n", "self", ".", "resblock", "=", "Residual_block", "(", "out_ch", "+", "skip_ch", ",", "out_ch", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.MODELS.Decoder_block.forward": [[86, 92], ["MODELS.Decoder_block.up_sampling", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "MODELS.Decoder_block.resblock"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ",", "skip_features", ")", ":", "\n", "    ", "x", "=", "self", ".", "up_sampling", "(", "inp", ")", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "skip_features", ")", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "resblock", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.MODELS.Transformer.__init__": [[95, 111], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "MODELS.Residual_block"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader_test.DataLoader.__init__"], ["  ", "def", "__init__", "(", "self", ",", "in_ch", ",", "out_ch", ",", "repeat", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ":", "\n", "    ", "super", "(", "Transformer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "layers", "=", "[", "]", "\n", "ch_tmp", "=", "in_ch", "\n", "for", "r", "in", "range", "(", "0", ",", "repeat", ")", ":", "\n", "        ", "layers", ".", "append", "(", "\n", "Residual_block", "(", "ch_tmp", ",", "ch_tmp", "//", "2", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", ")", "\n", "ch_tmp", "=", "ch_tmp", "//", "2", "\n", "\n", "", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ch_tmp", ",", "out_ch", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.MODELS.Transformer.forward": [[113, 117], ["MODELS.Transformer.layers", "MODELS.Transformer.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "layers", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.MODELS.Disc_Transformer.__init__": [[120, 136], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "MODELS.Residual_block"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader_test.DataLoader.__init__"], ["  ", "def", "__init__", "(", "self", ",", "in_ch", ",", "out_ch", ",", "repeat", ",", "negative_slope", "=", "0.01", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ":", "\n", "    ", "super", "(", "Disc_Transformer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "layers", "=", "[", "]", "\n", "ch_tmp", "=", "in_ch", "\n", "for", "r", "in", "range", "(", "0", ",", "repeat", ")", ":", "\n", "        ", "layers", ".", "append", "(", "\n", "Residual_block", "(", "ch_tmp", ",", "ch_tmp", "//", "2", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", ")", "\n", "ch_tmp", "=", "ch_tmp", "//", "2", "\n", "\n", "", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "self", ".", "negative_slope", "=", "negative_slope", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ch_tmp", ",", "out_ch", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.MODELS.Disc_Transformer.forward": [[139, 144], ["MODELS.Disc_Transformer.layers", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "MODELS.Disc_Transformer.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "layers", "(", "x", ")", "\n", "x", "=", "F", ".", "leaky_relu", "(", "x", ",", "negative_slope", "=", "self", ".", "negative_slope", ",", "inplace", "=", "False", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.MODELS.efficient_Unet.__init__": [[147, 183], ["torch.Module.__init__", "MODELS.FeatureExtrator", "MODELS.Residual_block", "MODELS.Residual_block", "MODELS.Residual_block", "MODELS.Residual_block", "MODELS.Decoder_block", "MODELS.Decoder_block", "MODELS.Decoder_block", "MODELS.Transformer", "MODELS.Transformer", "MODELS.Transformer"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader_test.DataLoader.__init__"], ["  ", "def", "__init__", "(", "self", ",", "in_ch", ",", "out_ch", ",", "filter_base", "=", "32", ",", "bias", "=", "False", ")", ":", "\n", "    ", "super", "(", "efficient_Unet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "f1", "=", "3", "*", "filter_base", "\n", "f2", "=", "f1", "+", "filter_base", "\n", "f3", "=", "f2", "+", "filter_base", "\n", "fb", "=", "f3", "+", "filter_base", "\n", "\n", "#Feature extractor", "\n", "self", ".", "feature_extractor", "=", "FeatureExtrator", "(", "in_ch", ",", "f1", ")", "#[B,C,W,H]-->[B,f1,W,H]", "\n", "\n", "#Encoder1", "\n", "self", ".", "down_0", "=", "Residual_block", "(", "in_ch", ",", "f1", ",", "stride", "=", "1", ")", "#[B,C,W,H]-->[B,f1,W,H]", "\n", "\n", "#Encoder2", "\n", "self", ".", "down_1", "=", "Residual_block", "(", "f1", ",", "f2", ",", "stride", "=", "2", ")", "#[B,f1,W,H]-->[B,f2,W/2,H/2]", "\n", "\n", "#Encoder3", "\n", "self", ".", "down_2", "=", "Residual_block", "(", "f2", ",", "f3", ",", "stride", "=", "2", ")", "#[B,f2,W/2,H/2]-->[B,f3,W/4,H/4]", "\n", "\n", "#Bridge", "\n", "self", ".", "bridge", "=", "Residual_block", "(", "f3", ",", "fb", ",", "stride", "=", "2", ")", "#[B,f3,W/4,H/4]-->[B,fb,W/8,H/8]", "\n", "\n", "#Decoder1", "\n", "self", ".", "Decoder_block1", "=", "Decoder_block", "(", "fb", ",", "f3", ",", "f3", ")", "#[B,fb,W/8,H/8]-->[B,f3,W/4,H/4]", "\n", "\n", "#Decoder2", "\n", "self", ".", "Decoder_block2", "=", "Decoder_block", "(", "f3", ",", "f2", ",", "f2", ")", "#[B,f3-->[B,f2,W/2,H/2]", "\n", "\n", "#Decoder3", "\n", "self", ".", "Decoder_block3", "=", "Decoder_block", "(", "f2", ",", "2", "*", "f1", ",", "f1", ")", "#[B,f2,W/4,H/4]-->[B,f1,W,H]", "\n", "\n", "\n", "# Transformers", "\n", "self", ".", "Transformer1", "=", "Transformer", "(", "f1", ",", "out_ch", ",", "1", ",", "stride", "=", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "Transformer2", "=", "Transformer", "(", "f2", ",", "out_ch", ",", "2", ",", "stride", "=", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "Transformer3", "=", "Transformer", "(", "f3", ",", "out_ch", ",", "3", ",", "stride", "=", "1", ",", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.MODELS.efficient_Unet.forward": [[184, 216], ["MODELS.efficient_Unet.feature_extractor", "MODELS.efficient_Unet.down_0", "MODELS.efficient_Unet.down_1", "MODELS.efficient_Unet.down_2", "MODELS.efficient_Unet.bridge", "MODELS.efficient_Unet.Decoder_block1", "MODELS.efficient_Unet.Transformer3", "MODELS.efficient_Unet.Decoder_block2", "MODELS.efficient_Unet.Transformer2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "MODELS.efficient_Unet.Decoder_block3", "MODELS.efficient_Unet.Transformer1", "MODELS.efficient_Unet.clone", "MODELS.efficient_Unet.clone"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "#Feature extractor", "\n", "    ", "s0", "=", "self", ".", "feature_extractor", "(", "inp", ")", "\n", "\n", "#Encoder1", "\n", "s1", "=", "self", ".", "down_0", "(", "inp", ")", "\n", "\n", "#Encoder2", "\n", "s2", "=", "self", ".", "down_1", "(", "s1", ")", "\n", "\n", "#Encoder3", "\n", "s3", "=", "self", ".", "down_2", "(", "s2", ")", "\n", "\n", "#Bridge", "\n", "b", "=", "self", ".", "bridge", "(", "s3", ")", "\n", "\n", "#Decoder1", "\n", "x", "=", "self", ".", "Decoder_block1", "(", "b", ",", "s3", ")", "\n", "yhat_x4", "=", "self", ".", "Transformer3", "(", "x", ".", "clone", "(", ")", ")", "\n", "\n", "\n", "#Decoder2", "\n", "x", "=", "self", ".", "Decoder_block2", "(", "x", ",", "s2", ")", "\n", "yhat_x2", "=", "self", ".", "Transformer2", "(", "x", ".", "clone", "(", ")", ")", "\n", "\n", "\n", "#Decoder3", "\n", "s1_con", "=", "torch", ".", "cat", "(", "(", "s1", ",", "s0", ")", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "Decoder_block3", "(", "x", ",", "s1_con", ")", "\n", "yhat", "=", "self", ".", "Transformer1", "(", "x", ")", "\n", "\n", "return", "yhat", ",", "yhat_x2", ",", "yhat_x4", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.MODELS.Efficient_Unet_disc.__init__": [[223, 260], ["torch.Module.__init__", "MODELS.Residual_block", "MODELS.Residual_block", "MODELS.Residual_block", "MODELS.Residual_block", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "MODELS.Decoder_block", "MODELS.Decoder_block", "MODELS.Decoder_block", "MODELS.Disc_Transformer", "MODELS.Disc_Transformer", "MODELS.Disc_Transformer"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader_test.DataLoader.__init__"], ["  ", "def", "__init__", "(", "self", ",", "in_ch", ",", "out_ch", ",", "negative_slope", ",", "filter_base", "=", "16", ",", "bias", "=", "False", ")", ":", "\n", "    ", "super", "(", "Efficient_Unet_disc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "f1", "=", "filter_base", "\n", "f2", "=", "2", "*", "f1", "\n", "f3", "=", "2", "*", "f2", "\n", "f4", "=", "2", "*", "f3", "\n", "f5", "=", "f4", "\n", "fb", "=", "f5", "\n", "\n", "#Encoder1", "\n", "self", ".", "down_0", "=", "Residual_block", "(", "in_ch", ",", "f1", ",", "stride", "=", "1", ")", "#[B,C,W,H]-->[B,f1,W,H]", "\n", "\n", "#Encoder2", "\n", "self", ".", "down_1", "=", "Residual_block", "(", "f1", ",", "f2", ",", "stride", "=", "2", ")", "#[B,f1,W,H]-->[B,f2,W/2,H/2]", "\n", "\n", "#Encoder3", "\n", "self", ".", "down_2", "=", "Residual_block", "(", "f2", ",", "f3", ",", "stride", "=", "2", ")", "#[B,f2,W/2,H/2]-->[B,f3,W/4,H/4]", "\n", "\n", "#Bridge", "\n", "self", ".", "bridge", "=", "Residual_block", "(", "f3", ",", "fb", ",", "stride", "=", "2", ")", "#[B,f3,W/4,H/4]-->[B,fb,W/8,H/8]", "\n", "self", ".", "bridge_map", "=", "nn", ".", "Conv2d", "(", "fb", ",", "fb", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "(", "0", ",", "0", ")", ",", "bias", "=", "bias", ")", "\n", "\n", "\n", "#Decoder1", "\n", "self", ".", "Decoder_block1", "=", "Decoder_block", "(", "fb", ",", "f3", ",", "f3", ")", "#[B,fb,W/8,H/8]-->[B,f3,W/4,H/4]", "\n", "\n", "#Decoder2", "\n", "self", ".", "Decoder_block2", "=", "Decoder_block", "(", "f3", ",", "f2", ",", "f2", ")", "#[B,f3-->[B,f2,W/2,H/2]", "\n", "\n", "#Decoder3", "\n", "self", ".", "Decoder_block3", "=", "Decoder_block", "(", "f2", ",", "f1", ",", "f1", ")", "#[B,f2,W/4,H/4]-->[B,f1,W,H]", "\n", "\n", "\n", "# Transformers", "\n", "self", ".", "Disc_Transformer1", "=", "Disc_Transformer", "(", "f1", ",", "out_ch", ",", "1", ",", "stride", "=", "1", ",", "negative_slope", "=", "negative_slope", ",", "bias", "=", "bias", ")", "\n", "self", ".", "Disc_Transformer2", "=", "Disc_Transformer", "(", "f2", ",", "out_ch", ",", "2", ",", "stride", "=", "1", ",", "negative_slope", "=", "negative_slope", ",", "bias", "=", "bias", ")", "\n", "self", ".", "Disc_Transformer3", "=", "Disc_Transformer", "(", "f3", ",", "out_ch", ",", "3", ",", "stride", "=", "1", ",", "negative_slope", "=", "negative_slope", ",", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.MODELS.Efficient_Unet_disc.forward": [[261, 291], ["MODELS.Efficient_Unet_disc.down_0", "MODELS.Efficient_Unet_disc.down_1", "MODELS.Efficient_Unet_disc.down_2", "MODELS.Efficient_Unet_disc.bridge", "MODELS.Efficient_Unet_disc.bridge_map", "MODELS.Efficient_Unet_disc.Decoder_block1", "MODELS.Efficient_Unet_disc.Disc_Transformer3", "MODELS.Efficient_Unet_disc.Decoder_block2", "MODELS.Efficient_Unet_disc.Disc_Transformer2", "MODELS.Efficient_Unet_disc.Decoder_block3", "MODELS.Efficient_Unet_disc.Disc_Transformer1", "MODELS.Efficient_Unet_disc.clone", "MODELS.Efficient_Unet_disc.clone", "MODELS.Efficient_Unet_disc.clone"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "\n", "#Encoder1", "\n", "    ", "s1", "=", "self", ".", "down_0", "(", "inp", ")", "\n", "\n", "#Encoder2", "\n", "s2", "=", "self", ".", "down_1", "(", "s1", ")", "\n", "\n", "#Encoder3", "\n", "s3", "=", "self", ".", "down_2", "(", "s2", ")", "\n", "\n", "#Bridge", "\n", "b", "=", "self", ".", "bridge", "(", "s3", ")", "\n", "bridge_map", "=", "self", ".", "bridge_map", "(", "b", ")", "\n", "\n", "#Decoder1", "\n", "x", "=", "self", ".", "Decoder_block1", "(", "b", ",", "s3", ")", "\n", "yhat_x4_map", "=", "self", ".", "Disc_Transformer3", "(", "x", ".", "clone", "(", ")", ")", "\n", "\n", "\n", "#Decoder2", "\n", "x", "=", "self", ".", "Decoder_block2", "(", "x", ",", "s2", ")", "\n", "yhat_x2_map", "=", "self", ".", "Disc_Transformer2", "(", "x", ".", "clone", "(", ")", ")", "\n", "\n", "\n", "#Decoder3", "\n", "x", "=", "self", ".", "Decoder_block3", "(", "x", ",", "s1", ")", "\n", "yhat_x0_map", "=", "self", ".", "Disc_Transformer1", "(", "x", ".", "clone", "(", ")", ")", "\n", "\n", "return", "bridge_map", ",", "yhat_x0_map", ",", "yhat_x2_map", ",", "yhat_x4_map", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.metric.MetricEval.psnr": [[13, 39], ["torch.device", "torch.tensor", "tuple", "torch.pow().mean", "torch.sum().to", "TypeError", "ValueError", "torch.max", "torch.round", "torch.round", "range", "torch.pow", "torch.sum", "torch.round.double", "torch.round.view_as().double", "torch.log10", "torch.round.view_as", "torch.sqrt"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "psnr", "(", "gt", ":", "Sequence", "[", "torch", ".", "Tensor", "]", ",", "\n", "y_pred", ":", "Sequence", "[", "torch", ".", "Tensor", "]", ",", "\n", "device", ":", "Union", "[", "str", ",", "torch", ".", "device", "]", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "psnr_", "=", "torch", ".", "tensor", "(", "0.0", ",", "dtype", "=", "torch", ".", "float64", ",", "device", "=", "device", ")", "\n", "B", "=", "gt", ".", "shape", "[", "0", "]", "\n", "\n", "if", "gt", ".", "dtype", "!=", "y_pred", ".", "dtype", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "f\"Expected gt and y_pred to have the same data type. Got y_pred: {gt.dtype} and y: {y_pred.dtype}.\"", "\n", ")", "\n", "\n", "", "if", "gt", ".", "shape", "!=", "y_pred", ".", "shape", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "f\"Expected gt and y_pred to have the same shape. Got y_pred: {gt.shape} and y: {y_pred.shape}.\"", "\n", ")", "\n", "\n", "", "if", "torch", ".", "max", "(", "gt", ")", "<=", "1.", ":", "\n", "            ", "gt", "=", "torch", ".", "round", "(", "gt", "*", "255.", ")", "\n", "y_pred", "=", "torch", ".", "round", "(", "y_pred", "*", "255.", ")", "\n", "\n", "", "dim", "=", "tuple", "(", "range", "(", "1", ",", "gt", ".", "ndim", ")", ")", "\n", "mse_error", "=", "torch", ".", "pow", "(", "y_pred", ".", "double", "(", ")", "-", "gt", ".", "view_as", "(", "y_pred", ")", ".", "double", "(", ")", ",", "2", ")", ".", "mean", "(", "dim", "=", "dim", ")", "\n", "psnr_", "=", "torch", ".", "sum", "(", "20.0", "*", "torch", ".", "log10", "(", "255.", "/", "torch", ".", "sqrt", "(", "mse_error", "+", "1e-10", ")", ")", ")", ".", "to", "(", "device", "=", "device", ")", "\n", "return", "psnr_", "/", "B", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.metric.MetricEval.ssim": [[41, 70], ["torch.device", "torch.tensor", "utils.util.ssim", "TypeError", "ValueError", "torch.round", "torch.round", "torch.max"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.model.metrics.MetricEval.ssim"], ["", "@", "staticmethod", "\n", "def", "ssim", "(", "gt", ":", "Sequence", "[", "torch", ".", "Tensor", "]", ",", "\n", "y_pred", ":", "Sequence", "[", "torch", ".", "Tensor", "]", ",", "\n", "device", ":", "Union", "[", "str", ",", "torch", ".", "device", "]", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ",", "\n", "data_range", ":", "Union", "[", "int", ",", "float", "]", "=", "1.", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "ssim_", "=", "torch", ".", "tensor", "(", "0.0", ",", "dtype", "=", "torch", ".", "float64", ",", "device", "=", "device", ")", "\n", "B", "=", "gt", ".", "shape", "[", "0", "]", "\n", "\n", "if", "gt", ".", "dtype", "!=", "y_pred", ".", "dtype", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "f\"Expected gt and y_pred to have the same data type. Got y_pred: {gt.dtype} and y: {y_pred.dtype}.\"", "\n", ")", "\n", "\n", "", "if", "gt", ".", "shape", "!=", "y_pred", ".", "shape", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "f\"Expected gt and y_pred to have the same shape. Got y_pred: {gt.shape} and y: {y_pred.shape}.\"", "\n", ")", "\n", "\n", "", "if", "torch", ".", "max", "(", "gt", ")", "<=", "1.", "or", "data_range", "==", "1", ":", "\n", "            ", "gt", "=", "torch", ".", "round", "(", "gt", "*", "255.", ")", "\n", "y_pred", "=", "torch", ".", "round", "(", "y_pred", "*", "255.", ")", "\n", "\n", "#metric = SSIM(data_range=255.)", "\n", "#metric.attach(default_evaluator, 'ssim')", "\n", "#state = default_evaluator.run([[y_pred, gt]])", "\n", "#ssim_ = state.metrics['ssim']", "\n", "", "ssim_", "=", "ssim_fn", "(", "gt", ",", "y_pred", ")", "\n", "return", "ssim_", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mogvision_adl.model.adl_trainer.ADL_Trainer.__init__": [[16, 84], ["object.__init__", "util.utils.struct_cls", "tensorflow.saved_model.SaveOptions", "tensorflow.saved_model.LoadOptions", "strategy.scope", "adl_trainer.ADL_Trainer._get_denoiser", "adl_trainer.ADL_Trainer._get_discriminator", "os.path.join", "adl_trainer.ADL_Trainer._get_model", "os.path.join", "adl_trainer.ADL_Trainer._get_model", "adl_trainer.ADL_Trainer._get_optimiers", "adl_trainer.ADL_Trainer._get_lr", "util.utils.rmtree_dirs", "util.utils.rmtree_dirs", "util.utils.get_model_summary", "util.utils.get_model_summary", "os.path.join", "adl_trainer.ADL_Trainer._get_model"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader_test.DataLoader.__init__", "home.repos.pwc.inspect_result.mogvision_adl.model.adl_trainer.ADL_Trainer._get_denoiser", "home.repos.pwc.inspect_result.mogvision_adl.model.discriminator_trainer.Discriminator_Trainer._get_discriminator", "home.repos.pwc.inspect_result.mogvision_adl.model.discriminator_trainer.Discriminator_Trainer._get_model", "home.repos.pwc.inspect_result.mogvision_adl.model.discriminator_trainer.Discriminator_Trainer._get_model", "home.repos.pwc.inspect_result.mogvision_adl.model.discriminator_trainer.Discriminator_Trainer._get_optimiers", "home.repos.pwc.inspect_result.mogvision_adl.model.discriminator_trainer.Discriminator_Trainer._get_lr", "home.repos.pwc.inspect_result.mogvision_adl.util.utils.rmtree_dirs", "home.repos.pwc.inspect_result.mogvision_adl.util.utils.rmtree_dirs", "home.repos.pwc.inspect_result.mogvision_adl.util.utils.get_model_summary", "home.repos.pwc.inspect_result.mogvision_adl.util.utils.get_model_summary", "home.repos.pwc.inspect_result.mogvision_adl.model.discriminator_trainer.Discriminator_Trainer._get_model"], ["\n", "class", "ADL_Trainer", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "\n", "adl", ":", "Dict", ",", "\n", "device", ":", "Union", "[", "str", ",", "int", "]", ",", "\n", "in_channels", ":", "int", ",", "\n", "out_channels", ":", "int", ",", "\n", "writer_numerical", ":", "SummaryWriter", ",", "\n", "writer_imgs", ":", "SummaryWriter", ",", "\n", "distributed", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "ADL_Trainer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "rank", "=", "device", "if", "distributed", "else", "0", "\n", "self", ".", "distributed", "=", "distributed", "\n", "\n", "self", ".", "epochs", "=", "adl", ".", "config", "[", "'epochs'", "]", "\n", "self", ".", "lr", "=", "adl", ".", "config", "[", "'lr'", "]", "\n", "self", ".", "print_model", "=", "adl", ".", "config", "[", "'print_model'", "]", "\n", "\n", "self", ".", "metrics", "=", "adl", ".", "denoiser", ".", "eval_params", "\n", "\n", "self", ".", "loss", "=", "adl", ".", "denoiser", ".", "loss", "\n", "self", ".", "loss_weights", "=", "adl", ".", "denoiser", ".", "loss_weights", "\n", "\n", "self", ".", "write_path", "=", "adl", ".", "log_dir", "\n", "self", ".", "checkpoints_path", "=", "adl", ".", "ckpt_dir", "\n", "\n", "self", ".", "validation_per_step", "=", "adl", ".", "config", "[", "'val_per_step'", "]", "\n", "self", ".", "test_per_step", "=", "adl", ".", "config", "[", "'test_per_step'", "]", "\n", "self", ".", "ckpts_per_step", "=", "adl", ".", "config", "[", "'checkpoint_per_step'", "]", "\n", "\n", "\n", "# get and distribute the model ", "\n", "self", ".", "model", ",", "self", ".", "model_disc", "=", "self", ".", "_get_model", "(", "'ADL'", ",", "\n", "adl", ",", "in_channels", ",", "out_channels", ",", "\n", "self", ".", "checkpoints_path", ")", "\n", "\n", "# get optimizer", "\n", "self", ".", "optimizer", ",", "self", ".", "scheduler", "=", "self", ".", "_get_optimizer", "(", "self", ".", "model", ",", "\n", "adl", ".", "config", "[", "'optimizer'", "]", ",", "\n", "adl", ".", "config", "[", "'lr_scheduler'", "]", ",", "\n", "adl", ".", "config", "[", "'lr'", "]", ")", "\n", "\n", "# get writers", "\n", "self", ".", "writer_numerical", "=", "writer_numerical", "\n", "self", ".", "writer_imgs", "=", "writer_imgs", "\n", "\n", "\n", "", "def", "__call__", "(", "self", ",", "\n", "ds_train_loader", ",", "\n", "ds_valid_loader", ",", "\n", "ds_test_loader", "\n", ")", "->", "bool", ":", "\n", "\n", "        ", "if", "self", ".", "rank", "==", "0", ":", "\n", "            ", "print", "(", "\"[i] Configuring ADL...\"", ")", "\n", "", "trainer", "=", "ADL_Trainer_module", "(", "rank", "=", "self", ".", "rank", ",", "\n", "model_denoiser", "=", "self", ".", "model", ",", "\n", "model_disc", "=", "self", ".", "model_disc", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", "lr", "=", "self", ".", "lr", ",", "\n", "writer_numerical", "=", "self", ".", "writer_numerical", ",", "\n", "writer_imgs", "=", "self", ".", "writer_imgs", ",", "\n", "checkpoints_path", "=", "self", ".", "checkpoints_path", ",", "\n", "print_model", "=", "self", ".", "print_model", ")", "\n", "if", "self", ".", "rank", "==", "0", ":", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.adl_trainer.ADL_Trainer.__call__": [[85, 125], ["tensorflow.print", "tensorflow.distribute.get_replica_context", "adl_trainer.ADL_Trainer.strategy.scope", "adl_trainer.ADL_Trainer_module", "ADL_Trainer_module.compile", "ADL_Trainer_module.fit", "adl_trainer.ADL_Trainer._get_optimiers"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.model.trainer.Multiple_Steps_Trainer.compile", "home.repos.pwc.inspect_result.mogvision_adl.model.trainer.Multiple_Steps_Trainer.fit", "home.repos.pwc.inspect_result.mogvision_adl.model.discriminator_trainer.Discriminator_Trainer._get_optimiers"], ["            ", "print", "(", "\"[i] Compiling ADL...\"", ")", "\n", "", "trainer", ".", "compile", "(", "optimizer", "=", "self", ".", "optimizer", ",", "\n", "scheduler", "=", "self", ".", "scheduler", ",", "\n", "loss", "=", "self", ".", "loss", ",", "\n", "loss_weights", "=", "self", ".", "loss_weights", ",", "\n", "metrics", "=", "self", ".", "metrics", ",", "\n", "distributed", "=", "self", ".", "distributed", ")", "\n", "\n", "if", "self", ".", "rank", "==", "0", ":", "\n", "            ", "print", "(", "\"[i] Fitting ADL...\"", ")", "\n", "", "trainer", ".", "fit", "(", "train_data", "=", "ds_train_loader", ",", "\n", "validation_data", "=", "ds_valid_loader", ",", "\n", "test_data", "=", "ds_test_loader", ",", "\n", "epochs", "=", "self", ".", "epochs", ",", "\n", "validation_per_step", "=", "self", ".", "validation_per_step", ",", "\n", "test_per_step", "=", "self", ".", "test_per_step", ",", "\n", "ckpts_per_step", "=", "self", ".", "ckpts_per_step", ")", "\n", "\n", "return", "True", "\n", "\n", "\n", "\n", "", "def", "_get_denoiser", "(", "self", ",", "model_name", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "\"\"\" get denoiser model\"\"\"", "\n", "module_", "=", "getattr", "(", "MODELS", ",", "model_name", ")", "\n", "return", "module_", "(", "in_channels", ",", "out_channels", ")", "\n", "\n", "", "def", "_get_discriminator", "(", "self", ",", "model_name", ",", "in_channels", ",", "out_channels", ",", "negative_slope", ")", ":", "\n", "        ", "\"\"\" get discriminator model\"\"\"", "\n", "module_", "=", "getattr", "(", "MODELS", ",", "model_name", ")", "\n", "return", "module_", "(", "in_channels", ",", "out_channels", ",", "negative_slope", ")", "\n", "\n", "\n", "", "def", "_get_model", "(", "self", ",", "mode", ",", "adl", ",", "\n", "in_channels", ",", "out_channels", ",", "\n", "ckpt_dir", ")", ":", "\n", "        ", "\"\"\"We get the model and then load its last saved one if avail\"\"\"", "\n", "\n", "# get models", "\n", "model", "=", "self", ".", "_get_denoiser", "(", "adl", ".", "denoiser", ".", "model", ",", "in_channels", ",", "out_channels", ")", "\n", "model_disc", "=", "self", ".", "_get_discriminator", "(", "adl", ".", "disc", ".", "model", ",", "in_channels", ",", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.adl_trainer.ADL_Trainer._get_denoiser": [[127, 130], ["getattr", "getattr."], "methods", ["None"], ["\n", "\n", "if", "self", ".", "distributed", ":", "\n", "# map model into DDP", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.adl_trainer.ADL_Trainer._get_discriminator": [[131, 134], ["getattr", "getattr."], "methods", ["None"], ["            ", "model", "=", "model", ".", "cuda", "(", "self", ".", "device", ")", "\n", "model", "=", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "self", ".", "device", "]", ")", "\n", "\n", "model_disc", "=", "model_disc", ".", "cuda", "(", "self", ".", "device", ")", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.adl_trainer.ADL_Trainer._get_model": [[135, 150], ["os.path.exists", "tensorflow.print", "tensorflow.keras.models.load_model", "tensorflow.print", "int", "len", "max", "os.listdir", "dir_.split"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.util.utils.load_model"], ["model_disc", "=", "DistributedDataParallel", "(", "model_disc", ",", "device_ids", "=", "[", "self", ".", "device", "]", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "model_disc", "=", "model_disc", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# load the saved denoiser model if avail", "\n", "", "model", "=", "self", ".", "_restore_model", "(", "'ADL:denoiser'", ",", "adl", ".", "denoiser", ".", "ckpt_dir", ",", "model", ",", "self", ".", "device", ")", "\n", "model_disc", "=", "self", ".", "_restore_model", "(", "'ADL:disc'", ",", "adl", ".", "disc", ".", "ckpt_dir", ",", "model_disc", ",", "self", ".", "device", ")", "\n", "\n", "# load the adl denoiser if avail", "\n", "model", "=", "self", ".", "_restore_model", "(", "'ADL'", ",", "adl", ".", "ckpt_dir", ",", "model", ",", "self", ".", "device", ")", "\n", "\n", "return", "model", ",", "model_disc", "\n", "\n", "\n", "", "def", "_restore_model", "(", "self", ",", "mode", ",", "ckpt_dir", ",", "model", ",", "device", ",", "prefix", "=", "'ckpts_step_'", ",", "suffix", "=", "'.pt'", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.adl_trainer.ADL_Trainer._restore_model": [[150, 165], ["os.path.exists", "utils.util.load_model.to", "utils.util.load_model", "print", "print", "int", "len", "max", "os.listdir", "[].split", "dir_.split"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.util.utils.load_model"], ["", "def", "_restore_model", "(", "self", ",", "mode", ",", "ckpt_dir", ",", "model", ",", "device", ",", "prefix", "=", "'ckpts_step_'", ",", "suffix", "=", "'.pt'", ")", ":", "\n", "        ", "model_path", "=", "None", "\n", "if", "os", ".", "path", ".", "exists", "(", "ckpt_dir", ")", ":", "\n", "            ", "step_ids", "=", "[", "int", "(", "dir_", ".", "split", "(", "prefix", ")", "[", "-", "1", "]", ".", "split", "(", "suffix", ")", "[", "0", "]", ")", "for", "dir_", "in", "os", ".", "listdir", "(", "ckpt_dir", ")", "]", "\n", "if", "len", "(", "step_ids", ")", ">", "0", ":", "\n", "                ", "step_num", "=", "max", "(", "step_ids", ")", "\n", "model_path", "=", "f\"{ckpt_dir}/{prefix}{step_num}{suffix}\"", "\n", "\n", "", "", "if", "model_path", ":", "\n", "            ", "model", "=", "load_model", "(", "model", ",", "model_path", ")", "\n", "print", "(", "f\"[i] {mode}-GPU{self.rank}: Restoring the model from step {step_num}.\"", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "f\"[i] {mode}-GPU{self.rank}: Creating a new model.\"", ")", "\n", "\n", "", "return", "model", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.adl_trainer.ADL_Trainer._get_optimizer": [[168, 190], ["torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "model.parameters", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "NotImplementedError", "list", "range"], "methods", ["None"], ["", "def", "_get_optimizer", "(", "self", ",", "model", ",", "optimizer_name", ",", "scheduler_dict", ",", "lr", ")", ":", "\n", "        ", "if", "optimizer_name", "==", "\"Adam\"", ":", "\n", "            ", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "\n", "", "if", "scheduler_dict", "[", "'type'", "]", "==", "\"ReduceLROnPlateau\"", ":", "\n", "            ", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "optimizer", ",", "**", "scheduler_dict", "[", "'kwargs'", "]", ")", "\n", "", "elif", "scheduler_dict", "[", "'type'", "]", "==", "\"MultiStepLR\"", ":", "\n", "            ", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "\n", "milestones", "=", "list", "(", "range", "(", "50000", ",", "500000", ",", "50000", ")", ")", ",", "\n", "**", "scheduler_dict", "[", "'kwargs'", "]", ",", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'lr not implemented'", ")", "\n", "\n", "", "return", "{", "\n", "'optimizer'", ":", "optimizer", ",", "\n", "'opt_disc'", ":", "optimizer", "\n", "}", ",", "{", "\n", "'scheduler'", ":", "scheduler", ",", "\n", "'sched_disc'", ":", "scheduler", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.adl_trainer.ADL_Trainer_module.__init__": [[165, 208], ["tensorflow.cast", "model.trainer.Multiple_Steps_Trainer.__init__"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader_test.DataLoader.__init__"], ["\n", "\n", "\n", "", "def", "_get_optimizer", "(", "self", ",", "model", ",", "optimizer_name", ",", "scheduler_dict", ",", "lr", ")", ":", "\n", "        ", "if", "optimizer_name", "==", "\"Adam\"", ":", "\n", "            ", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "\n", "", "if", "scheduler_dict", "[", "'type'", "]", "==", "\"ReduceLROnPlateau\"", ":", "\n", "            ", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "optimizer", ",", "**", "scheduler_dict", "[", "'kwargs'", "]", ")", "\n", "", "elif", "scheduler_dict", "[", "'type'", "]", "==", "\"MultiStepLR\"", ":", "\n", "            ", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "\n", "milestones", "=", "list", "(", "range", "(", "50000", ",", "500000", ",", "50000", ")", ")", ",", "\n", "**", "scheduler_dict", "[", "'kwargs'", "]", ",", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'lr not implemented'", ")", "\n", "\n", "", "return", "{", "\n", "'optimizer'", ":", "optimizer", ",", "\n", "'opt_disc'", ":", "optimizer", "\n", "}", ",", "{", "\n", "'scheduler'", ":", "scheduler", ",", "\n", "'sched_disc'", ":", "scheduler", "\n", "}", "\n", "\n", "\n", "\n", "", "", "class", "ADL_Trainer_module", "(", "trainer", ".", "Trainer", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "\n", "rank", ":", "Union", "[", "str", ",", "int", "]", ",", "\n", "model_denoiser", ":", "DistributedDataParallel", ",", "\n", "model_disc", ":", "DistributedDataParallel", ",", "\n", "device", ":", "Union", "[", "str", ",", "int", "]", ",", "\n", "lr", ":", "optim", ".", "lr_scheduler", ",", "\n", "writer_numerical", ":", "SummaryWriter", ",", "\n", "writer_imgs", ":", "SummaryWriter", ",", "\n", "checkpoints_path", ":", "str", ",", "\n", "print_model", ":", "bool", "\n", ")", ":", "\n", "\n", "        ", "self", ".", "rank", "=", "rank", "\n", "self", ".", "writer_numerical", "=", "writer_numerical", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.adl_trainer.ADL_Trainer_module._compile": [[209, 239], ["adl_trainer._loss_weights", "adl_trainer._loss_weights"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.model.discriminator_trainer._loss_weights", "home.repos.pwc.inspect_result.mogvision_adl.model.discriminator_trainer._loss_weights"], ["self", ".", "model", "=", "model_denoiser", "\n", "self", ".", "model_disc", "=", "model_disc", "\n", "\n", "if", "self", ".", "rank", "==", "0", "and", "print_model", ":", "\n", "            ", "model_params", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "self", ".", "model", ".", "parameters", "(", ")", ")", "\n", "print", "(", "f'[info] Denoiser`s params: {model_params}'", ")", "\n", "\n", "model_params", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "self", ".", "model_disc", ".", "parameters", "(", ")", ")", "\n", "print", "(", "f'[info] Discriminator`s params: {model_params}'", ")", "\n", "\n", "", "self", ".", "device", "=", "device", "\n", "self", ".", "lr", "=", "lr", "\n", "\n", "super", "(", "ADL_Trainer_module", ",", "self", ")", ".", "__init__", "(", "\n", "rank", "=", "rank", ",", "\n", "writer_numerical", "=", "writer_numerical", ",", "\n", "writer_imgs", "=", "writer_imgs", ",", "\n", "ckpts_path", "=", "checkpoints_path", "\n", ")", "\n", "\n", "", "def", "_compile", "(", "self", ",", "\n", "optimizer", ":", "optim", ",", "\n", "scheduler", ":", "optim", ".", "lr_scheduler", ",", "\n", "loss", ":", "Dict", "[", "str", ",", "Callable", "[", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ",", "torch", ".", "Tensor", "]", "]", "=", "None", ",", "\n", "loss_weights", ":", "Dict", "[", "str", ",", "float", "]", "=", "None", ",", "\n", "metrics", ":", "Dict", "[", "str", ",", "Callable", "[", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ",", "torch", ".", "Tensor", "]", "]", "=", "{", "}", ",", "\n", "mode", "=", "'ADL'", ",", "\n", "distributed", ":", "bool", "=", "False", "\n", ")", "->", "None", ":", "\n", "        "]], "home.repos.pwc.inspect_result.mogvision_adl.model.adl_trainer.ADL_Trainer_module._get_train_one_batch": [[254, 313], ["torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "data[].to().cuda", "adl_trainer.ADL_Trainer_module.model_disc", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "data[].to().cuda", "adl_trainer.ADL_Trainer_module._rescale_gt_2d", "data[].to().cuda", "adl_trainer.ADL_Trainer_module.model", "adl_trainer.ADL_Trainer_module.loss.items", "adl_trainer.ADL_Trainer_module.model_disc", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "summary.items", "RELU", "RELU", "adl_trainer.ADL_Trainer_module.writer_numerical.add_scalar", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "data[].to", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "data[].to", "data[].to", "fn", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "fn", "fn"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.model.adl_trainer.ADL_Trainer_module._rescale_gt_2d"], ["", "def", "_get_train_one_batch", "(", "self", ",", "data", ",", "step_i", ",", "data_type", "=", "None", ")", ":", "\n", "        ", "\"\"\"train the denoiser for one batch\"\"\"", "\n", "summary", "=", "{", "}", "\n", "\n", "if", "data_type", "==", "'gt'", ":", "\n", "            ", "loss", "=", "torch", ".", "tensor", "(", "0.0", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "cuda", "(", "self", ".", "device", ")", "\n", "\n", "# Run the discriminator ------------------------", "\n", "# Compute the loss for the true sample", "\n", "gt", "=", "data", "[", "'x'", "]", ".", "to", "(", "torch", ".", "float32", ")", ".", "cuda", "(", "self", ".", "device", ")", "\n", "gt_bridge", ",", "gt_x0", ",", "gt_x2", ",", "gt_x4", "=", "self", ".", "model_disc", "(", "gt", ")", "\n", "B", "=", "gt", ".", "shape", "[", "0", "]", "\n", "\n", "true_ravel", "=", "torch", ".", "concat", "(", "[", "torch", ".", "reshape", "(", "gt_bridge", ",", "[", "B", ",", "-", "1", "]", ")", ",", "\n", "torch", ".", "reshape", "(", "gt_x0", ",", "[", "B", ",", "-", "1", "]", ")", ",", "\n", "torch", ".", "reshape", "(", "gt_x2", ",", "[", "B", ",", "-", "1", "]", ")", ",", "\n", "torch", ".", "reshape", "(", "gt_x4", ",", "[", "B", ",", "-", "1", "]", ")", "\n", "]", ",", "axis", "=", "-", "1", ")", "\n", "loss_disc", "=", "torch", ".", "mean", "(", "RELU", "(", "1.0", "-", "true_ravel", ")", ")", "\n", "summary", "[", "'/loss/'", "+", "'disc_loss_tot'", "]", "=", "loss_disc", "\n", "loss", "=", "loss_disc", "\n", "\n", "\n", "\n", "", "else", ":", "\n", "# Run the denoiser model -------------------------            ", "\n", "            ", "loss", "=", "torch", ".", "tensor", "(", "0.0", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "cuda", "(", "self", ".", "device", ")", "\n", "gt", "=", "data", "[", "'x'", "]", ".", "to", "(", "torch", ".", "float32", ")", ".", "cuda", "(", "self", ".", "device", ")", "\n", "gt_x2", ",", "gt_x4", "=", "self", ".", "_rescale_gt_2d", "(", "gt", ")", "\n", "\n", "#prediction", "\n", "y", "=", "data", "[", "'y'", "]", ".", "to", "(", "torch", ".", "float32", ")", ".", "cuda", "(", "self", ".", "device", ")", "\n", "y_pred", ",", "y_pred_x2", ",", "y_pred_x4", "=", "self", ".", "model", "(", "y", ")", "\n", "B", "=", "y", ".", "shape", "[", "0", "]", "\n", "\n", "for", "name", ",", "fn", "in", "self", ".", "loss", ".", "items", "(", ")", ":", "\n", "                ", "loss_", "=", "fn", "(", "gt", ",", "y_pred", ")", "+", "fn", "(", "gt_x2", ",", "y_pred_x2", ")", "+", "fn", "(", "gt_x4", ",", "y_pred_x4", ")", "\n", "\n", "#criterion[name].append(loss_cur)", "\n", "loss", "=", "loss", "+", "loss_", "*", "self", ".", "loss_weights", "[", "name", "]", "\n", "summary", "[", "'/loss/'", "+", "name", "]", "=", "loss_", "\n", "", "summary", "[", "'/loss/'", "+", "'loss_tot'", "]", "=", "loss", "\n", "\n", "# Run the discriminator -------------------------", "\n", "y_bridge", ",", "y_pred", ",", "y_pred_x2", ",", "y_pred_x4", "=", "self", ".", "model_disc", "(", "y", ")", "\n", "\n", "# Compute the loss for the true sample", "\n", "pred_ravel", "=", "torch", ".", "concat", "(", "[", "torch", ".", "reshape", "(", "y_bridge", ",", "[", "B", ",", "-", "1", "]", ")", ",", "\n", "torch", ".", "reshape", "(", "y_pred", ",", "[", "B", ",", "-", "1", "]", ")", ",", "\n", "torch", ".", "reshape", "(", "y_pred_x2", ",", "[", "B", ",", "-", "1", "]", ")", ",", "\n", "torch", ".", "reshape", "(", "y_pred_x4", ",", "[", "B", ",", "-", "1", "]", ")", "\n", "]", ",", "axis", "=", "-", "1", ")", "\n", "loss_disc", "=", "torch", ".", "mean", "(", "RELU", "(", "1.0", "+", "pred_ravel", ")", ")", "\n", "summary", "[", "'/loss/'", "+", "'disc_loss_tot'", "]", "=", "loss_disc", "\n", "\n", "", "if", "self", ".", "rank", "==", "0", ":", "\n", "            ", "for", "key", ",", "val", "in", "summary", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "writer_numerical", ".", "add_scalar", "(", "key", ",", "val", ",", "step_i", ")", "\n", "", "", "return", "summary", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.adl_trainer.ADL_Trainer_module._rescale_gt_2d": [[314, 321], ["torch.interpolate().clamp", "torch.interpolate().clamp", "torch.interpolate().clamp", "torch.interpolate().clamp", "torch.interpolate().clamp", "torch.interpolate().clamp", "torch.interpolate().clamp", "torch.interpolate().clamp", "torch.interpolate().clamp.to().cuda", "torch.interpolate().clamp.to().cuda", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate().clamp.to", "torch.interpolate().clamp.to"], "methods", ["None"], ["", "def", "_rescale_gt_2d", "(", "self", ",", "im", ")", ":", "\n", "        ", "\"\"\" downsacle image by factor 2 and 4 \"\"\"", "\n", "im_x2", "=", "F", ".", "interpolate", "(", "im", ",", "size", "=", "(", "im", ".", "shape", "[", "2", "]", "//", "2", ",", "im", ".", "shape", "[", "3", "]", "//", "2", ")", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "False", ")", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "1.0", ")", "\n", "im_x4", "=", "F", ".", "interpolate", "(", "im", ",", "size", "=", "(", "im", ".", "shape", "[", "2", "]", "//", "4", ",", "im", ".", "shape", "[", "3", "]", "//", "4", ")", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "False", ")", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "1.0", ")", "\n", "return", "im_x2", ".", "to", "(", "torch", ".", "float32", ")", ".", "cuda", "(", "self", ".", "device", ")", ",", "im_x4", ".", "to", "(", "torch", ".", "float32", ")", ".", "cuda", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.adl_trainer._loss_weights": [[402, 411], ["weights_.update"], "function", ["None"], []], "home.repos.pwc.inspect_result.mogvision_adl.model.discriminator_trainer.Discriminator_Trainer.__init__": [[18, 59], ["object.__init__", "util.utils.struct_cls", "tensorflow.saved_model.SaveOptions", "tensorflow.saved_model.LoadOptions", "strategy.scope", "discriminator_trainer.Discriminator_Trainer._get_model", "discriminator_trainer.Discriminator_Trainer._get_optimiers", "util.utils.get_model_summary"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader_test.DataLoader.__init__", "home.repos.pwc.inspect_result.mogvision_adl.model.discriminator_trainer.Discriminator_Trainer._get_model", "home.repos.pwc.inspect_result.mogvision_adl.model.discriminator_trainer.Discriminator_Trainer._get_optimiers", "home.repos.pwc.inspect_result.mogvision_adl.util.utils.get_model_summary"], ["class", "Discriminator_Trainer", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "\n", "disc", ",", "\n", "device", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "writer_numerical", ",", "\n", "writer_imgs", ",", "\n", "distributed", "\n", ")", "->", "None", ":", "\n", "        ", "r\"\"\"\n        Args:\n            optimizer: .\n            los\n        \"\"\"", "\n", "super", "(", "Discriminator_Trainer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "rank", "=", "device", "if", "distributed", "else", "0", "\n", "self", ".", "distributed", "=", "distributed", "\n", "\n", "self", ".", "epochs", "=", "disc", ".", "config", "[", "'epochs'", "]", "\n", "self", ".", "lr", "=", "disc", ".", "config", "[", "'lr'", "]", "\n", "self", ".", "print_model", "=", "disc", ".", "config", "[", "'print_model'", "]", "\n", "\n", "self", ".", "write_path", "=", "disc", ".", "log_dir", "\n", "self", ".", "checkpoints_path", "=", "disc", ".", "ckpt_dir", "\n", "\n", "self", ".", "validation_per_step", "=", "disc", ".", "config", "[", "'val_per_step'", "]", "\n", "self", ".", "test_per_step", "=", "disc", ".", "config", "[", "'test_per_step'", "]", "\n", "self", ".", "ckpts_per_step", "=", "disc", ".", "config", "[", "'checkpoint_per_step'", "]", "\n", "\n", "# get and distribute the model ", "\n", "self", ".", "model", "=", "self", ".", "_get_model", "(", "'discriminator'", ",", "disc", ".", "model", ",", "\n", "in_channels", ",", "out_channels", ",", "\n", "self", ".", "checkpoints_path", ",", "\n", "disc", ".", "config", "[", "'negative_slope'", "]", ")", "\n", "\n", "\n", "# get optimizer", "\n", "self", ".", "optimizer", ",", "self", ".", "scheduler", "=", "self", ".", "_get_optimizer", "(", "self", ".", "model", ",", "\n", "disc", ".", "config", "[", "'optimizer'", "]", ",", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.discriminator_trainer.Discriminator_Trainer.__call__": [[61, 98], ["tensorflow.print", "tensorflow.distribute.get_replica_context", "discriminator_trainer.Discriminator_Trainer.strategy.scope", "discriminator_trainer.Discriminator_Trainer_module", "discriminator_trainer.Discriminator_Trainer._get_lr", "Discriminator_Trainer_module.compile", "Discriminator_Trainer_module.fit"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.model.discriminator_trainer.Discriminator_Trainer._get_lr", "home.repos.pwc.inspect_result.mogvision_adl.model.trainer.Multiple_Steps_Trainer.compile", "home.repos.pwc.inspect_result.mogvision_adl.model.trainer.Multiple_Steps_Trainer.fit"], ["disc", ".", "config", "[", "'lr'", "]", ")", "\n", "\n", "# get writers", "\n", "self", ".", "writer_numerical", "=", "writer_numerical", "\n", "self", ".", "writer_imgs", "=", "writer_imgs", "\n", "\n", "\n", "", "def", "__call__", "(", "self", ",", "\n", "ds_train_loader", "\n", ")", "->", "bool", ":", "\n", "\n", "        ", "if", "self", ".", "rank", "==", "0", ":", "\n", "            ", "print", "(", "\"[i] Configuring discriminator...\"", ")", "\n", "", "trainer", "=", "Discriminator_Trainer_module", "(", "rank", "=", "self", ".", "rank", ",", "\n", "model", "=", "self", ".", "model", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", "lr", "=", "self", ".", "lr", ",", "\n", "writer_numerical", "=", "self", ".", "writer_numerical", ",", "\n", "writer_imgs", "=", "self", ".", "writer_imgs", ",", "\n", "checkpoints_path", "=", "self", ".", "checkpoints_path", ",", "\n", "print_model", "=", "self", ".", "print_model", ")", "\n", "if", "self", ".", "rank", "==", "0", ":", "\n", "            ", "print", "(", "\"[i] Compiling discriminator...\"", ")", "\n", "", "trainer", ".", "compile", "(", "optimizer", "=", "self", ".", "optimizer", ",", "\n", "scheduler", "=", "self", ".", "scheduler", ",", "\n", "loss", "=", "{", "}", ",", "\n", "loss_weights", "=", "{", "}", ",", "\n", "metrics", "=", "{", "}", ",", "\n", "distributed", "=", "self", ".", "distributed", ")", "\n", "\n", "if", "self", ".", "rank", "==", "0", ":", "\n", "            ", "print", "(", "\"[i] Fitting discriminator...\"", ")", "\n", "", "trainer", ".", "fit", "(", "train_data", "=", "ds_train_loader", ",", "\n", "validation_data", "=", "{", "}", ",", "\n", "test_data", "=", "{", "}", ",", "\n", "epochs", "=", "self", ".", "epochs", ",", "\n", "validation_per_step", "=", "self", ".", "validation_per_step", ",", "\n", "test_per_step", "=", "self", ".", "test_per_step", ",", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.discriminator_trainer.Discriminator_Trainer._get_discriminator": [[99, 102], ["getattr", "getattr."], "methods", ["None"], ["ckpts_per_step", "=", "self", ".", "ckpts_per_step", ")", "\n", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.discriminator_trainer.Discriminator_Trainer._get_model": [[113, 133], ["os.path.exists", "tensorflow.print", "discriminator_trainer.Discriminator_Trainer._get_discriminator", "util.utils.rmtree_dirs", "util.utils.rmtree_dirs", "tensorflow.keras.models.load_model", "tensorflow.print", "int", "len", "max", "os.listdir", "dir_.split"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.model.discriminator_trainer.Discriminator_Trainer._get_discriminator", "home.repos.pwc.inspect_result.mogvision_adl.util.utils.rmtree_dirs", "home.repos.pwc.inspect_result.mogvision_adl.util.utils.rmtree_dirs", "home.repos.pwc.inspect_result.mogvision_adl.util.utils.load_model"], ["\n", "# get model", "\n", "model", "=", "self", ".", "_get_discriminator", "(", "model_name", ",", "in_channels", ",", "out_channels", ",", "negative_slope", ")", "\n", "\n", "if", "self", ".", "distributed", ":", "\n", "# map model into DDP", "\n", "            ", "model", "=", "model", ".", "cuda", "(", "self", ".", "device", ")", "\n", "model", "=", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "self", ".", "device", "]", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "\n", "# load the last saved model if avail", "\n", "", "model_path", "=", "None", "\n", "if", "os", ".", "path", ".", "exists", "(", "ckpt_dir", ")", ":", "\n", "            ", "step_ids", "=", "[", "int", "(", "dir_", ".", "split", "(", "prefix", ")", "[", "-", "1", "]", ".", "split", "(", "suffix", ")", "[", "0", "]", ")", "for", "dir_", "in", "os", ".", "listdir", "(", "ckpt_dir", ")", "]", "\n", "if", "len", "(", "step_ids", ")", ">", "0", ":", "\n", "                ", "step_num", "=", "max", "(", "step_ids", ")", "\n", "model_path", "=", "f\"{ckpt_dir}/{prefix}{step_num}{suffix}\"", "\n", "\n", "", "", "if", "model_path", ":", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.discriminator_trainer.Discriminator_Trainer._get_optimizer": [[142, 160], ["torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "NotImplementedError", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "model.parameters", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "NotImplementedError", "list", "range"], "methods", ["None"], ["", "def", "_get_optimizer", "(", "self", ",", "model", ",", "optimizer_name", ",", "scheduler_dict", ",", "lr", ")", ":", "\n", "        ", "\"\"\"get the optimizer and lr_scheduler\"\"\"", "\n", "\n", "if", "optimizer_name", "==", "\"Adam\"", ":", "\n", "            ", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'optimizer not implemented'", ")", "\n", "\n", "", "if", "scheduler_dict", "[", "'type'", "]", "==", "\"ReduceLROnPlateau\"", ":", "\n", "            ", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "optimizer", ",", "**", "scheduler_dict", "[", "'kwargs'", "]", ")", "\n", "", "elif", "scheduler_dict", "[", "'type'", "]", "==", "\"MultiStepLR\"", ":", "\n", "            ", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "\n", "milestones", "=", "list", "(", "range", "(", "50000", ",", "500000", ",", "50000", ")", ")", ",", "\n", "**", "scheduler_dict", "[", "'kwargs'", "]", ",", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'lr not implemented'", ")", "\n", "\n", "", "return", "optimizer", ",", "scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.discriminator_trainer.Discriminator_Trainer_module.__init__": [[138, 167], ["tensorflow.cast", "model.trainer.Multiple_Steps_Trainer.__init__"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader_test.DataLoader.__init__"], ["", "return", "model", "\n", "\n", "\n", "\n", "", "def", "_get_optimizer", "(", "self", ",", "model", ",", "optimizer_name", ",", "scheduler_dict", ",", "lr", ")", ":", "\n", "        ", "\"\"\"get the optimizer and lr_scheduler\"\"\"", "\n", "\n", "if", "optimizer_name", "==", "\"Adam\"", ":", "\n", "            ", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'optimizer not implemented'", ")", "\n", "\n", "", "if", "scheduler_dict", "[", "'type'", "]", "==", "\"ReduceLROnPlateau\"", ":", "\n", "            ", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "optimizer", ",", "**", "scheduler_dict", "[", "'kwargs'", "]", ")", "\n", "", "elif", "scheduler_dict", "[", "'type'", "]", "==", "\"MultiStepLR\"", ":", "\n", "            ", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "\n", "milestones", "=", "list", "(", "range", "(", "50000", ",", "500000", ",", "50000", ")", ")", ",", "\n", "**", "scheduler_dict", "[", "'kwargs'", "]", ",", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'lr not implemented'", ")", "\n", "\n", "", "return", "optimizer", ",", "scheduler", "\n", "\n", "\n", "", "", "class", "Discriminator_Trainer_module", "(", "trainer", ".", "Trainer", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "\n", "rank", ",", "\n", "model", ",", "\n", "device", ",", "\n", "lr", ",", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.discriminator_trainer.Discriminator_Trainer_module._compile": [[168, 195], ["None"], "methods", ["None"], ["writer_numerical", ",", "\n", "writer_imgs", ",", "\n", "checkpoints_path", ",", "\n", "print_model", ")", ":", "\n", "\n", "        ", "self", ".", "rank", "=", "rank", "\n", "self", ".", "writer_numerical", "=", "writer_numerical", "\n", "self", ".", "model", "=", "model", "\n", "\n", "if", "self", ".", "rank", "==", "0", "and", "print_model", ":", "\n", "            ", "model_params", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "self", ".", "model", ".", "parameters", "(", ")", ")", "\n", "print", "(", "f'[info] Discriminator`s params: {model_params}'", ")", "\n", "\n", "", "self", ".", "device", "=", "device", "\n", "self", ".", "lr", "=", "lr", "\n", "\n", "super", "(", "Discriminator_Trainer_module", ",", "self", ")", ".", "__init__", "(", "\n", "rank", "=", "rank", ",", "\n", "writer_numerical", "=", "writer_numerical", ",", "\n", "writer_imgs", "=", "writer_imgs", ",", "\n", "ckpts_path", "=", "checkpoints_path", "\n", ")", "\n", "\n", "", "def", "_compile", "(", "self", ",", "\n", "optimizer", ":", "optim", ",", "\n", "scheduler", ":", "optim", ".", "lr_scheduler", ",", "\n", "loss", ":", "Dict", "[", "str", ",", "Callable", "[", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ",", "torch", ".", "Tensor", "]", "]", "=", "None", ",", "\n", "loss_weights", ":", "Dict", "[", "str", ",", "float", "]", "=", "None", ",", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.discriminator_trainer.Discriminator_Trainer_module._get_train_one_batch": [[213, 254], ["torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "data[].to().cuda", "discriminator_trainer.Discriminator_Trainer_module.model", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "data[].to().cuda", "discriminator_trainer.Discriminator_Trainer_module.model", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "summary.items", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "discriminator_trainer.Discriminator_Trainer_module.writer_numerical.add_scalar", "data[].to", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "RELU", "data[].to", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "RELU"], "methods", ["None"], ["", "def", "_get_train_one_batch", "(", "self", ",", "data", ",", "step_i", ",", "data_type", "=", "None", ")", ":", "\n", "\n", "# initilize the total loss value", "\n", "        ", "loss_", "=", "torch", ".", "tensor", "(", "0.0", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "cuda", "(", "self", ".", "device", ")", "\n", "\n", "if", "data_type", "==", "'gt'", ":", "\n", "# Compute the loss for the true sample", "\n", "            ", "gt", "=", "data", "[", "'x'", "]", ".", "to", "(", "torch", ".", "float32", ")", ".", "cuda", "(", "self", ".", "device", ")", "\n", "gt_bridge", ",", "gt_x0", ",", "gt_x2", ",", "gt_x4", "=", "self", ".", "model", "(", "gt", ")", "#", "\n", "B", "=", "gt", ".", "shape", "[", "0", "]", "\n", "\n", "true_ravel", "=", "torch", ".", "concat", "(", "[", "torch", ".", "reshape", "(", "gt_bridge", ",", "[", "B", ",", "-", "1", "]", ")", ",", "\n", "torch", ".", "reshape", "(", "gt_x0", ",", "[", "B", ",", "-", "1", "]", ")", ",", "\n", "torch", ".", "reshape", "(", "gt_x2", ",", "[", "B", ",", "-", "1", "]", ")", ",", "\n", "torch", ".", "reshape", "(", "gt_x4", ",", "[", "B", ",", "-", "1", "]", ")", "\n", "]", ",", "axis", "=", "-", "1", ")", "\n", "loss_", "=", "loss_", "+", "torch", ".", "mean", "(", "RELU", "(", "1.0", "-", "true_ravel", ")", ")", "\n", "", "else", ":", "\n", "#prediction", "\n", "            ", "y", "=", "data", "[", "'y'", "]", ".", "to", "(", "torch", ".", "float32", ")", ".", "cuda", "(", "self", ".", "device", ")", "\n", "y_bridge", ",", "y_pred", ",", "y_pred_x2", ",", "y_pred_x4", "=", "self", ".", "model", "(", "y", ")", "\n", "B", "=", "y", ".", "shape", "[", "0", "]", "\n", "\n", "# Compute the loss for the true sample", "\n", "pred_ravel", "=", "torch", ".", "concat", "(", "[", "torch", ".", "reshape", "(", "y_bridge", ",", "[", "B", ",", "-", "1", "]", ")", ",", "\n", "torch", ".", "reshape", "(", "y_pred", ",", "[", "B", ",", "-", "1", "]", ")", ",", "\n", "torch", ".", "reshape", "(", "y_pred_x2", ",", "[", "B", ",", "-", "1", "]", ")", ",", "\n", "torch", ".", "reshape", "(", "y_pred_x4", ",", "[", "B", ",", "-", "1", "]", ")", "\n", "]", ",", "axis", "=", "-", "1", ")", "\n", "loss_", "=", "loss_", "+", "torch", ".", "mean", "(", "RELU", "(", "1.0", "+", "pred_ravel", ")", ")", "\n", "\n", "\n", "", "summary", "=", "{", "}", "\n", "summary", "[", "'/loss/'", "+", "'loss_tot'", "]", "=", "loss_", "\n", "# Anything else?!", "\n", "\n", "if", "self", ".", "rank", "==", "0", ":", "\n", "            ", "for", "key", ",", "val", "in", "summary", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "writer_numerical", ".", "add_scalar", "(", "key", ",", "val", ",", "step_i", ")", "\n", "\n", "", "", "return", "summary", ",", "loss_", "", "", "", ""]], "home.repos.pwc.inspect_result.mogvision_adl.model.denoiser_trainer.Denoiser_Trainer._get_optimiers": [[96, 98], ["tensorflow.keras.optimizers.Adam"], "methods", ["None"], ["            ", "print", "(", "\"[i] Fitting denoiser...\"", ")", "\n", "", "trainer", ".", "fit", "(", "train_data", "=", "ds_train_loader", ",", "\n", "validation_data", "=", "ds_valid_loader", ",", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.denoiser_trainer.Denoiser_Trainer._get_lr": [[100, 106], ["model.lr.ReduceLROnPlateau", "tensorflow.print"], "methods", ["None"], ["epochs", "=", "self", ".", "epochs", ",", "\n", "validation_per_step", "=", "self", ".", "validation_per_step", ",", "\n", "test_per_step", "=", "self", ".", "test_per_step", ",", "\n", "ckpts_per_step", "=", "self", ".", "ckpts_per_step", ")", "\n", "return", "True", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.denoiser_trainer.Denoiser_Trainer_module.train_one_step": [[203, 260], ["tensorflow.constant", "tape.gradient", "denoiser_trainer.Denoiser_Trainer_module.optimizer.apply_gradients", "tensorflow.keras.layers.AveragePooling2D", "tensorflow.keras.layers.AveragePooling2D", "loss_dict.update", "tensorflow.GradientTape", "denoiser_trainer.Denoiser_Trainer_module.model", "denoiser_trainer.Denoiser_Trainer_module.loss.items", "loss_dict.items", "zip", "denoiser_trainer.Denoiser_Trainer_module.loss.keys", "loss_fn", "loss_fn", "loss_fn", "tensorflow.constant"], "methods", ["None"], ["metrics", ":", "Dict", "[", "str", ",", "Callable", "[", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ",", "torch", ".", "Tensor", "]", "]", "=", "{", "}", ",", "\n", "mode", "=", "'denoiser'", ",", "\n", "distributed", ":", "bool", "=", "False", "\n", ")", "->", "None", ":", "\n", "        ", "\"\"\"Configure the denoiser for training.\n        Args:\n            optimizer: The tf.keras.optimizers optimizer for the model.\n            loss: A dictionary with the losses for the model. The sum of the losses is considered.\n            loss_weights: Weights of the model losses.\n            metrics: evaluation metrics\n        \"\"\"", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "scheduler", "=", "scheduler", "\n", "self", ".", "loss", "=", "loss", "\n", "self", ".", "loss_weights", "=", "_loss_weights", "(", "loss_weights", ",", "loss", ")", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "metrics", "=", "metrics", "\n", "self", ".", "distributed", "=", "distributed", "\n", "\n", "\n", "", "def", "_get_train_one_batch", "(", "self", ",", "data", ",", "step_i", ",", "data_type", "=", "None", ")", ":", "\n", "        ", "\"\"\"training function for one batch\"\"\"", "\n", "\n", "# initilize the total loss value", "\n", "loss_tot", "=", "torch", ".", "tensor", "(", "0.0", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "cuda", "(", "self", ".", "device", ")", "\n", "\n", "# get ground-truth (gt)", "\n", "gt", "=", "data", "[", "'x'", "]", ".", "to", "(", "torch", ".", "float32", ")", ".", "cuda", "(", "self", ".", "device", ")", "\n", "gt_x2", ",", "gt_x4", "=", "self", ".", "_rescale_gt_2d", "(", "gt", ")", "\n", "\n", "# get prediction", "\n", "y", "=", "data", "[", "'y'", "]", ".", "to", "(", "torch", ".", "float32", ")", ".", "cuda", "(", "self", ".", "device", ")", "\n", "y_pred", ",", "y_pred_x2", ",", "y_pred_x4", "=", "self", ".", "model", "(", "y", ")", "\n", "\n", "\n", "# apply evaluation metrics", "\n", "summary", "=", "{", "}", "\n", "for", "name", ",", "fn", "in", "self", ".", "loss", ".", "items", "(", ")", ":", "\n", "            ", "loss_", "=", "fn", "(", "gt", ",", "y_pred", ")", "+", "fn", "(", "gt_x2", ",", "y_pred_x2", ")", "+", "fn", "(", "gt_x4", ",", "y_pred_x4", ")", "\n", "\n", "#criterion[name].append(loss_cur)", "\n", "loss_tot", "=", "loss_tot", "+", "loss_", "*", "self", ".", "loss_weights", "[", "name", "]", "\n", "summary", "[", "'/loss/'", "+", "name", "]", "=", "loss_", "\n", "\n", "", "summary", "[", "'/loss/'", "+", "'loss_tot'", "]", "=", "loss_tot", "\n", "\n", "# write to logger", "\n", "if", "self", ".", "rank", "==", "0", ":", "\n", "            ", "for", "key", ",", "val", "in", "summary", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "writer_numerical", ".", "add_scalar", "(", "key", ",", "val", ",", "step_i", ")", "\n", "\n", "", "", "return", "summary", ",", "loss_tot", "\n", "\n", "", "def", "_rescale_gt_2d", "(", "self", ",", "im", ")", ":", "\n", "        ", "\"\"\" downsacle image by factor 2 and 4 \"\"\"", "\n", "im_x2", "=", "F", ".", "interpolate", "(", "im", ",", "size", "=", "(", "im", ".", "shape", "[", "2", "]", "//", "2", ",", "im", ".", "shape", "[", "3", "]", "//", "2", ")", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "False", ")", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "1.0", ")", "\n", "im_x4", "=", "F", ".", "interpolate", "(", "im", ",", "size", "=", "(", "im", ".", "shape", "[", "2", "]", "//", "4", ",", "im", ".", "shape", "[", "3", "]", "//", "4", ")", ",", "mode", "=", "'bilinear'", ",", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.denoiser_trainer.Denoiser_Trainer_module.val_test_one_step": [[264, 330], ["denoiser_trainer.Denoiser_Trainer_module.metrics.items", "x_gt.get_shape", "denoiser_trainer.Denoiser_Trainer_module.metrics.items", "tensorflow.constant", "tensorflow.rank", "denoiser_trainer.Denoiser_Trainer_module.model", "denoiser_trainer.Denoiser_Trainer_module.model", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "metric", "tensorflow.constant", "tensorflow.zeros", "tensorflow.zeros"], "methods", ["None"], ["\n", "", "", "def", "_loss_weights", "(", "loss_weights", ":", "Union", "[", "None", ",", "Dict", "[", "str", ",", "float", "]", "]", ",", "\n", "loss", ":", "Dict", "[", "str", ",", "Any", "]", ")", "->", "Dict", "[", "str", ",", "float", "]", ":", "\n", "    ", "\"\"\"initilize the weights of loss functions\"\"\"", "\n", "\n", "weights_", "=", "{", "fn_name", ":", "1.", "for", "fn_name", "in", "loss", "}", "\n", "if", "loss_weights", "is", "not", "None", ":", "\n", "        ", "weights_", ".", "update", "(", "loss_weights", ")", "\n", "", "return", "weights_", "\n", "", ""]], "home.repos.pwc.inspect_result.mogvision_adl.model.denoiser_trainer.Denoiser_Trainer_module._denoiser_model": [[332, 334], ["denoiser_trainer.Denoiser_Trainer_module.model"], "methods", ["None"], []], "home.repos.pwc.inspect_result.mogvision_adl.model.denoiser_trainer.Denoiser_Trainer_module._test_summary": [[335, 338], ["evaluate_test"], "methods", ["None"], []], "home.repos.pwc.inspect_result.mogvision_adl.model.models.Efficient_Unet": [[12, 19], ["tensorflow.keras.layers.Input", "models.build_denoiser", "tensorflow.keras.Model"], "function", ["home.repos.pwc.inspect_result.mogvision_adl.model.models.build_denoiser"], ["def", "Efficient_Unet", "(", "in_channels", ",", "out_channels", ",", "filter_base", "=", "32", ")", ":", "\n", "    ", "inp", "=", "KL", ".", "Input", "(", "shape", "=", "[", "None", ",", "None", ",", "in_channels", "]", ",", "batch_size", "=", "None", ")", "\n", "kwargs", "=", "{", "}", "#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", "\n", "yhat_x0", ",", "yhat_x2", ",", "yhat_x4", "=", "build_denoiser", "(", "inp", ",", "out_channels", ",", "filter_base", ",", "kwargs", ")", "\n", "return", "keras", ".", "Model", "(", "inputs", "=", "inp", ",", "\n", "outputs", "=", "[", "yhat_x0", ",", "yhat_x2", ",", "yhat_x4", "]", ",", "\n", "name", "=", "\"Efficient_Unet\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.models.Efficient_Unet_disc": [[22, 31], ["tensorflow.keras.layers.Input", "models.build_Efficient_Unet_disc", "tensorflow.keras.Model"], "function", ["home.repos.pwc.inspect_result.mogvision_adl.model.models.build_Efficient_Unet_disc"], ["", "def", "Efficient_Unet_disc", "(", "in_channels", ",", "filter_base", "=", "16", ")", ":", "\n", "\n", "    ", "inp", "=", "KL", ".", "Input", "(", "shape", "=", "[", "None", ",", "None", ",", "in_channels", "]", ",", "batch_size", "=", "None", ")", "\n", "kwargs", "=", "{", "}", "#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", "\n", "\n", "bridge_map", ",", "y_x0_map", ",", "y_x2_map", ",", "y_x4_map", "=", "build_Efficient_Unet_disc", "(", "inp", ",", "filter_base", ",", "kwargs", ")", "\n", "return", "keras", ".", "Model", "(", "inputs", "=", "inp", ",", "\n", "outputs", "=", "[", "bridge_map", ",", "y_x0_map", ",", "y_x2_map", ",", "y_x4_map", "]", ",", "\n", "name", "=", "\"Efficient_Unet_disc\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.models.build_denoiser": [[38, 82], ["ContentEnhancer", "residual_block", "residual_block", "residual_block", "residual_block", "decoder_block", "T3", "decoder_block", "T2", "decoder_block", "T1", "tensorflow.keras.layers.Concatenate"], "function", ["home.repos.pwc.inspect_result.mogvision_adl.model.blocks.ContentEnhancer", "home.repos.pwc.inspect_result.mogvision_adl.model.blocks.residual_block", "home.repos.pwc.inspect_result.mogvision_adl.model.blocks.residual_block", "home.repos.pwc.inspect_result.mogvision_adl.model.blocks.residual_block", "home.repos.pwc.inspect_result.mogvision_adl.model.blocks.residual_block", "home.repos.pwc.inspect_result.mogvision_adl.model.blocks.decoder_block", "home.repos.pwc.inspect_result.mogvision_adl.model.blocks.T3", "home.repos.pwc.inspect_result.mogvision_adl.model.blocks.decoder_block", "home.repos.pwc.inspect_result.mogvision_adl.model.blocks.T2", "home.repos.pwc.inspect_result.mogvision_adl.model.blocks.decoder_block", "home.repos.pwc.inspect_result.mogvision_adl.model.blocks.T1"], ["", "def", "build_denoiser", "(", "inp", ",", "out_channels", ",", "filter_base", ",", "kwargs", ")", ":", "\n", "    ", "\"\"\" Efficient_Unet Architecture \"\"\"", "\n", "f1", "=", "3", "*", "filter_base", "\n", "f2", "=", "f1", "+", "filter_base", "\n", "f3", "=", "f2", "+", "filter_base", "\n", "fb", "=", "f3", "+", "filter_base", "\n", "#f5 = f4", "\n", "#fb = f3", "\n", "\n", "# Content Enhancer", "\n", "s0", "=", "ContentEnhancer", "(", "inp", ",", "f1", ",", "name", "=", "'ContentEnhancer'", ")", "\n", "\n", "# Endoder 1, 2, 3", "\n", "s1", "=", "residual_block", "(", "inp", ",", "f1", ",", "strides", "=", "1", ",", "name", "=", "'encoder1'", ")", "\n", "s2", "=", "residual_block", "(", "s1", ",", "f2", ",", "strides", "=", "2", ",", "name", "=", "'encoder2'", ")", "\n", "s3", "=", "residual_block", "(", "s2", ",", "f3", ",", "strides", "=", "2", ",", "name", "=", "'encoder3'", ")", "\n", "#s4 = residual_block(s3,  f4, strides=2, name='encoder4')", "\n", "#s5 = residual_block(s4,  f5, strides=2, name='encoder5')", "\n", "\n", "# Bridge", "\n", "bridge", "=", "residual_block", "(", "s3", ",", "fb", ",", "strides", "=", "2", ",", "name", "=", "'bridge'", ")", "\n", "\n", "#x = decoder_block(bridge, s5, f5, name='decoder-1')", "\n", "#x = decoder_block(x, s4, f4, name='decoder0')", "\n", "\n", "\n", "# Decoder 1", "\n", "x", "=", "decoder_block", "(", "bridge", ",", "s3", ",", "f3", ",", "name", "=", "'decoder1'", ")", "\n", "# get yhat at scale x4", "\n", "yhat_x4", "=", "T3", "(", "x", ",", "f3", ",", "out_channels", ")", "\n", "\n", "\n", "# Decoder 2", "\n", "x", "=", "decoder_block", "(", "x", ",", "s2", ",", "f2", ",", "name", "=", "'decoder2'", ")", "\n", "# get yhat at scale x2", "\n", "yhat_x2", "=", "T2", "(", "x", ",", "f2", ",", "out_channels", ")", "\n", "\n", "\n", "# Decoder 3", "\n", "s1_con", "=", "KL", ".", "Concatenate", "(", "name", "=", "'decoder3/con_s0_s1'", ")", "(", "[", "s1", ",", "s0", "]", ")", "\n", "x", "=", "decoder_block", "(", "x", ",", "s1_con", ",", "f1", ",", "name", "=", "'decoder3'", ")", "\n", "yhat_x0", "=", "T1", "(", "x", ",", "f1", ",", "out_channels", ")", "\n", "\n", "return", "yhat_x0", ",", "yhat_x2", ",", "yhat_x4", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.models.build_Efficient_Unet_disc": [[86, 127], ["residual_block", "residual_block", "residual_block", "residual_block", "decoder_block", "T3_disc", "decoder_block", "T2_disc", "decoder_block", "T1_disc", "tensorflow.keras.layers.Conv2D"], "function", ["home.repos.pwc.inspect_result.mogvision_adl.model.blocks.residual_block", "home.repos.pwc.inspect_result.mogvision_adl.model.blocks.residual_block", "home.repos.pwc.inspect_result.mogvision_adl.model.blocks.residual_block", "home.repos.pwc.inspect_result.mogvision_adl.model.blocks.residual_block", "home.repos.pwc.inspect_result.mogvision_adl.model.blocks.decoder_block", "home.repos.pwc.inspect_result.mogvision_adl.model.blocks.T3_disc", "home.repos.pwc.inspect_result.mogvision_adl.model.blocks.decoder_block", "home.repos.pwc.inspect_result.mogvision_adl.model.blocks.T2_disc", "home.repos.pwc.inspect_result.mogvision_adl.model.blocks.decoder_block", "home.repos.pwc.inspect_result.mogvision_adl.model.blocks.T1_disc"], ["", "def", "build_Efficient_Unet_disc", "(", "inp", ",", "filter_base", ",", "kwargs", ")", ":", "\n", "    ", "\"\"\" Efficient_Unet Architecture \"\"\"", "\n", "name", "=", "'Efficient_Unet_disc/'", "\n", "\n", "f1", "=", "filter_base", "\n", "f2", "=", "2", "*", "f1", "\n", "f3", "=", "2", "*", "f2", "\n", "f4", "=", "2", "*", "f3", "\n", "f5", "=", "f4", "\n", "fb", "=", "f5", "\n", "\n", "# Endoder 1, 2, 3", "\n", "s1", "=", "residual_block", "(", "inp", ",", "f1", ",", "strides", "=", "1", ",", "name", "=", "name", "+", "'/encoder1'", ")", "\n", "s2", "=", "residual_block", "(", "s1", ",", "f2", ",", "strides", "=", "2", ",", "name", "=", "name", "+", "'/encoder2'", ")", "\n", "s3", "=", "residual_block", "(", "s2", ",", "f3", ",", "strides", "=", "2", ",", "name", "=", "name", "+", "'/encoder3'", ")", "\n", "\n", "\n", "# Bridge", "\n", "bridge", "=", "residual_block", "(", "s3", ",", "fb", ",", "strides", "=", "2", ",", "name", "=", "name", "+", "'/bridge'", ")", "\n", "bridge_map", "=", "KL", ".", "Conv2D", "(", "1", ",", "1", ",", "padding", "=", "\"same\"", ",", "\n", "activation", "=", "\"sigmoid\"", ",", "use_bias", "=", "use_bias", ",", "\n", "name", "=", "'bridge_map'", ")", "(", "bridge", ")", "\n", "\n", "# Decoder 1", "\n", "x", "=", "decoder_block", "(", "bridge", ",", "s3", ",", "f3", ",", "name", "=", "name", "+", "'/decoder1'", ")", "\n", "# get yhat at scale x4", "\n", "yhat_x4_map", "=", "T3_disc", "(", "x", ",", "f3", ")", "\n", "\n", "\n", "# Decoder 2", "\n", "x", "=", "decoder_block", "(", "x", ",", "s2", ",", "f2", ",", "name", "=", "name", "+", "'/decoder2'", ")", "\n", "# get yhat at scale x2", "\n", "yhat_x2_map", "=", "T2_disc", "(", "x", ",", "f2", ")", "\n", "\n", "\n", "# Decoder 3", "\n", "x", "=", "decoder_block", "(", "x", ",", "s1", ",", "f1", ",", "name", "=", "name", "+", "'/decoder3'", ")", "\n", "yhat_x0_map", "=", "T1_disc", "(", "x", ",", "f1", ")", "\n", "\n", "\n", "return", "bridge_map", ",", "yhat_x0_map", ",", "yhat_x2_map", ",", "yhat_x4_map", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.metrics.MetricEval.mse": [[19, 23], ["numpy.mean"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "mse", "(", "gt", ",", "pred", ")", ":", "\n", "        ", "\"\"\" Compute Mean Squared Error (MSE) \"\"\"", "\n", "return", "np", ".", "mean", "(", "(", "gt", "-", "pred", ")", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.metrics.MetricEval.nmse": [[24, 28], ["numpy.linalg.norm", "numpy.linalg.norm"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "nmse", "(", "gt", ",", "pred", ")", ":", "\n", "        ", "\"\"\" Compute Normalized Mean Squared Error (NMSE) \"\"\"", "\n", "return", "np", ".", "linalg", ".", "norm", "(", "gt", "-", "pred", ")", "**", "2", "/", "np", ".", "linalg", ".", "norm", "(", "gt", ")", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.metrics.MetricEval.psnr": [[29, 37], ["numpy.mean", "float", "numpy.log10", "numpy.sqrt"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "psnr", "(", "gt", ",", "pred", ")", ":", "\n", "        ", "\"\"\" Compute Peak Signal to Noise Ratio metric (PSNR) \"\"\"", "\n", "#return np.abs(peak_signal_noise_ratio(gt, pred, data_range=gt.max()))", "\n", "mse", "=", "np", ".", "mean", "(", "(", "255.", "*", "gt", "-", "255.", "*", "pred", ")", "**", "2", ")", "\n", "if", "mse", "==", "0", ":", "\n", "            ", "return", "float", "(", "'inf'", ")", "\n", "", "return", "20.", "*", "np", ".", "log10", "(", "255.", "/", "np", ".", "sqrt", "(", "mse", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.metrics.MetricEval.ssim": [[38, 49], ["len", "numpy.abs", "range", "skimage.metrics.structural_similarity", "numpy.abs", "skimage.metrics.structural_similarity"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "ssim", "(", "gt", ",", "pred", ")", ":", "\n", "        ", "\"\"\" Compute Structural Similarity Index Metric (SSIM). \"\"\"", "\n", "if", "len", "(", "gt", ".", "shape", ")", "==", "2", ":", "\n", "            ", "return", "np", ".", "abs", "(", "structural_similarity", "(", "gt", ",", "pred", ",", "channel_axis", "=", "True", ",", "gaussian_weights", "=", "True", ",", "sigma", "=", "1.5", ",", "use_sample_covariance", "=", "False", ",", "data_range", "=", "1.0", ")", ")", "\n", "", "else", ":", "\n", "            ", "avg", "=", "0.0", "\n", "for", "k", "in", "range", "(", "0", ",", "gt", ".", "shape", "[", "2", "]", ")", ":", "\n", "                ", "avg", "+=", "np", ".", "abs", "(", "structural_similarity", "(", "gt", "[", ":", ",", ":", ",", "k", "]", ",", "pred", "[", ":", ",", ":", ",", "k", "]", ",", "channel_axis", "=", "True", ",", "gaussian_weights", "=", "True", ",", "sigma", "=", "1.5", ",", "use_sample_covariance", "=", "False", ",", "data_range", "=", "1.0", ")", ")", "\n", "\n", "", "return", "avg", "/", "gt", ".", "shape", "[", "2", "]", "", "", "", "", ""]], "home.repos.pwc.inspect_result.mogvision_adl.model.metrics.PSNR": [[4, 7], ["tensorflow.image.psnr", "tensorflow.nn.compute_average_loss"], "function", ["home.repos.pwc.inspect_result.mogvision_adl.model.metrics.MetricEval.psnr"], ["def", "PSNR", "(", "imgs_x", ",", "imgs_y", ",", "global_batch_size", ")", ":", "\n", "    ", "per_batch_loss", "=", "tf", ".", "image", ".", "psnr", "(", "imgs_x", ",", "imgs_y", ",", "max_val", "=", "1", ")", "\n", "return", "tf", ".", "nn", ".", "compute_average_loss", "(", "per_batch_loss", ",", "global_batch_size", "=", "global_batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.metrics.SSIM": [[9, 12], ["tensorflow.image.ssim", "tensorflow.nn.compute_average_loss"], "function", ["home.repos.pwc.inspect_result.mogvision_adl.model.metrics.MetricEval.ssim"], ["", "def", "SSIM", "(", "imgs_x", ",", "imgs_y", ",", "global_batch_size", ")", ":", "\n", "    ", "per_batch_loss", "=", "tf", ".", "image", ".", "ssim", "(", "imgs_x", ",", "imgs_y", ",", "max_val", "=", "1", ")", "\n", "return", "tf", ".", "nn", ".", "compute_average_loss", "(", "per_batch_loss", ",", "global_batch_size", "=", "global_batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.trainer.Multiple_Steps_Trainer.__init__": [[16, 40], ["abc.ABC.__init__"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader_test.DataLoader.__init__"], ["class", "Trainer", "(", "abc", ".", "ABC", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "\n", "rank", ":", "int", ",", "\n", "ckpts_path", ":", "str", ",", "\n", "writer_numerical", ":", "str", ",", "\n", "writer_imgs", ":", "str", ")", ":", "\n", "        ", "r\"\"\"A trainer which can be trained with the API.\n        Args:\n            rank: current rank\n            ckpts_path: Path to the checkpoints file\n            writer_numerical: summary file for storing numerical logging\n            writer_imgs: summary file for storing the first images of the last batch\n        \"\"\"", "\n", "super", "(", "Trainer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "writer_numerical", "=", "writer_numerical", "\n", "self", ".", "writer_imgs", "=", "writer_imgs", "\n", "self", ".", "ckpts_path", "=", "ckpts_path", "\n", "\n", "", "def", "compile", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"Configures the trainer for training.\"\"\"", "\n", "self", ".", "_compile", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "compiled", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.trainer.Multiple_Steps_Trainer.compile": [[41, 47], ["trainer.Multiple_Steps_Trainer._compile", "trainer.Multiple_Steps_Trainer.lr.on_train_begin"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.model.discriminator_trainer.Discriminator_Trainer_module._compile", "home.repos.pwc.inspect_result.mogvision_adl.model.lr.ReduceLROnPlateau.on_train_begin"], ["", "def", "fit", "(", "self", ",", "\n", "train_data", ",", "\n", "validation_data", ",", "\n", "test_data", ",", "\n", "epochs", ":", "int", "=", "100", ",", "\n", "validation_per_step", ":", "int", "=", "1000", ",", "\n", "test_per_step", ":", "int", "=", "5000", ",", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.trainer.Multiple_Steps_Trainer.fit": [[48, 136], ["trainer.Multiple_Steps_Trainer._create_file_writer", "trainer.Multiple_Steps_Trainer._create_file_writer", "tensorflow.convert_to_tensor", "iter", "ValueError", "trainer.Multiple_Steps_Trainer.strategy.scope", "tensorflow.Variable", "tensorflow.Variable.assign_add", "next", "trainer.Multiple_Steps_Trainer.strategy.run", "trainer.Multiple_Steps_Trainer.items", "trainer.Multiple_Steps_Trainer._log", "tensorflow.reduce_mean", "tensorflow.print", "tensorflow.print", "trainer.Multiple_Steps_Trainer._print_summary", "trainer.Multiple_Steps_Trainer._validation_test", "trainer.Multiple_Steps_Trainer._log", "trainer.Multiple_Steps_Trainer._print_summary", "trainer.Multiple_Steps_Trainer._sava_model", "tensorflow.print", "tensorflow.concat", "int", "trainer.Multiple_Steps_Trainer._validation_test", "trainer.Multiple_Steps_Trainer.lr.on_epoch_end", "trainer.Multiple_Steps_Trainer._log", "trainer.Multiple_Steps_Trainer._print_summary", "tensorflow.concat", "tensorflow.divide", "datetime.datetime.datetime.now"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.model.trainer.Multiple_Steps_Trainer._create_file_writer", "home.repos.pwc.inspect_result.mogvision_adl.model.trainer.Multiple_Steps_Trainer._create_file_writer", "home.repos.pwc.inspect_result.mogvision_adl.model.trainer.Multiple_Steps_Trainer._log", "home.repos.pwc.inspect_result.mogvision_adl.model.trainer.Multiple_Steps_Trainer._print_summary", "home.repos.pwc.inspect_result.mogvision_adl.model.trainer.Multiple_Steps_Trainer._validation_test", "home.repos.pwc.inspect_result.mogvision_adl.model.trainer.Multiple_Steps_Trainer._log", "home.repos.pwc.inspect_result.mogvision_adl.model.trainer.Multiple_Steps_Trainer._print_summary", "home.repos.pwc.inspect_result.mogvision_adl.model.trainer.Multiple_Steps_Trainer._sava_model", "home.repos.pwc.inspect_result.mogvision_adl.model.trainer.Multiple_Steps_Trainer._validation_test", "home.repos.pwc.inspect_result.mogvision_adl.model.lr.ReduceLROnPlateau.on_epoch_end", "home.repos.pwc.inspect_result.mogvision_adl.model.trainer.Multiple_Steps_Trainer._log", "home.repos.pwc.inspect_result.mogvision_adl.model.trainer.Multiple_Steps_Trainer._print_summary"], ["ckpts_per_step", ":", "int", "=", "5000", ",", "\n", "**", "kwargs", ")", ":", "\n", "\n", "# check whether compiled was excuted ...", "\n", "        ", "if", "not", "self", ".", "compiled", ":", "\n", "            ", "raise", "ValueError", "(", "\"Please call compile() before training!\"", ")", "\n", "\n", "# check wether we have test data", "\n", "", "if", "test_data", "is", "None", ":", "\n", "            ", "test_data", "=", "{", "}", "\n", "\n", "", "decay", "=", "0.", "\n", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "steps", "=", "epochs", "*", "len", "(", "train_data", ")", "\n", "for", "epoch", "in", "range", "(", "epochs", ")", ":", "\n", "            ", "for", "i", ",", "batch_i", "in", "enumerate", "(", "train_data", ")", ":", "\n", "                ", "step_i", "=", "epoch", "*", "len", "(", "train_data", ")", "+", "i", "\n", "\n", "############################################", "\n", "#                1/4: Training", "\n", "############################################", "\n", "if", "self", ".", "mode", "==", "'denoiser'", ":", "\n", "# train denoiser", "\n", "                    ", "summary_train", ",", "_", "=", "self", ".", "train", "(", "batch_i", ",", "self", ".", "optimizer", ",", "self", ".", "scheduler", ",", "None", ",", "step_i", ")", "\n", "\n", "\n", "", "elif", "self", ".", "mode", "==", "'discriminator'", ":", "\n", "                    ", "loss_tot", "=", "torch", ".", "tensor", "(", "0.0", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "cuda", "(", "self", ".", "device", ")", "\n", "\n", "# train fakse samples", "\n", "summary_train", ",", "_", "=", "self", ".", "train", "(", "batch_i", ",", "self", ".", "optimizer", ",", "self", ".", "scheduler", ",", "None", ",", "step_i", ")", "\n", "\n", "# train true samples", "\n", "_", ",", "loss_", "=", "self", ".", "train", "(", "batch_i", ",", "self", ".", "optimizer", ",", "self", ".", "scheduler", ",", "'gt'", ",", "step_i", ")", "\n", "\n", "loss_tot", "+=", "loss_", "\n", "summary_train", "[", "'/loss/'", "+", "'loss_tot'", "]", "=", "loss_tot", "\n", "\n", "\n", "", "elif", "self", ".", "mode", "==", "'ADL'", ":", "\n", "                    ", "loss_tot", "=", "torch", ".", "tensor", "(", "0.0", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "cuda", "(", "self", ".", "device", ")", "\n", "\n", "# Run the discriminator for true sample", "\n", "_", ",", "loss_disc", "=", "self", ".", "train", "(", "batch_i", ",", "self", ".", "optimizer", "[", "'opt_disc'", "]", ",", "\n", "self", ".", "scheduler", "[", "'sched_disc'", "]", ",", "'gt'", ",", "step_i", ")", "\n", "loss_tot", "+=", "loss_disc", "\n", "\n", "# Run the discriminator for fake sample # run the denoiser", "\n", "summary_train", ",", "loss_den", "=", "self", ".", "train", "(", "batch_i", ",", "self", ".", "optimizer", "[", "'optimizer'", "]", ",", "\n", "self", ".", "scheduler", "[", "'scheduler'", "]", ",", "None", ",", "step_i", ")", "\n", "\n", "loss_disc", "=", "summary_train", "[", "'/loss/disc_loss_tot'", "]", "\n", "opt_disc", "=", "self", ".", "optimizer", "[", "'opt_disc'", "]", "\n", "opt_disc", ".", "zero_grad", "(", ")", "\n", "loss_disc", ".", "backward", "(", ")", "\n", "opt_disc", ".", "step", "(", ")", "\n", "loss_tot", "+=", "loss_disc", "\n", "summary_train", "[", "'/loss/disc_loss_tot'", "]", "=", "loss_tot", "\n", "\n", "\n", "############################################", "\n", "#                2/4: Validation", "\n", "############################################", "\n", "", "if", "(", "step_i", ">", "0", ")", "and", "(", "step_i", "%", "validation_per_step", "==", "0", ")", ":", "\n", "                    ", "if", "len", "(", "validation_data", ")", ">", "0", ":", "\n", "                        ", "summary_val", "=", "self", ".", "_get_val", "(", "self", ".", "model", ",", "validation_data", ",", "step_i", ")", "\n", "\n", "# print out the summary", "\n", "", "if", "self", ".", "rank", "==", "0", ":", "\n", "                        ", "print", "(", "f\"\\n{datetime.now()}\\tstep: <<<<< {step_i}/{steps} >>>>>\"", ")", "\n", "self", ".", "_print_summary", "(", "'TRAIN'", ",", "summary_train", ")", "\n", "if", "len", "(", "validation_data", ")", ">", "0", ":", "\n", "                            ", "self", ".", "_print_summary", "(", "'VALIDATION'", ",", "summary_val", ")", "\n", "\n", "# print lr", "\n", "", "param", "=", "'LR'", "\n", "\n", "if", "self", ".", "mode", "==", "'ADL'", ":", "\n", "                            ", "opt", "=", "self", ".", "optimizer", "[", "'optimizer'", "]", "\n", "print", "(", "f'{param.ljust(11)}-> {opt.param_groups[0][\"lr\"]:0.8f}'", ")", "\n", "", "else", ":", "\n", "                            ", "print", "(", "f'{param.ljust(11)}-> {self.optimizer.param_groups[0][\"lr\"]:0.8f}'", ")", "\n", "\n", "############################################", "\n", "#                 3/4: Test", "\n", "############################################", "\n", "", "", "", "if", "(", "step_i", ">", "0", ")", "and", "(", "step_i", "%", "test_per_step", "==", "0", ")", "and", "(", "len", "(", "test_data", ")", ">", "0", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.trainer.Multiple_Steps_Trainer._validation_test": [[141, 196], ["tensorflow.convert_to_tensor", "iter", "summary.keys", "tensorflow.constant", "tensorflow.Variable", "tensorflow.Variable", "step.assign_add", "tensorflow.divide", "NotImplementedError", "next", "trainer.Multiple_Steps_Trainer.strategy.run", "summary_tmp.items", "counter.assign_add", "trainer.Multiple_Steps_Trainer._log_images", "tensorflow.reduce_sum", "tensorflow.concat"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.model.trainer.Multiple_Steps_Trainer._log_images"], ["############################################", "\n", "#              4/4: Checkpoint", "\n", "############################################", "\n", "", "", "if", "(", "self", ".", "rank", "==", "0", ")", "and", "(", "step_i", ">", "0", ")", "and", "(", "step_i", "%", "ckpts_per_step", "==", "0", ")", ":", "\n", "                    ", "if", "self", ".", "mode", "==", "'ADL'", ":", "\n", "                        ", "self", ".", "_save_model", "(", "self", ".", "model", ",", "step_i", ",", "self", ".", "optimizer", "[", "'optimizer'", "]", ")", "\n", "", "else", ":", "\n", "                        ", "self", ".", "_save_model", "(", "self", ".", "model", ",", "step_i", ",", "self", ".", "optimizer", ")", "\n", "print", "(", "\"[i] The checkpoint is stored with id: \"", ",", "step_i", ")", "\n", "\n", "\n", "", "", "", "", "if", "self", ".", "rank", "==", "0", ":", "\n", "            ", "self", ".", "writer_numerical", ".", "close", "(", ")", "\n", "self", ".", "writer_imgs", ".", "close", "(", ")", "\n", "\n", "", "", "def", "train", "(", "self", ",", "batch_i", ",", "optimizer", ",", "scheduler", ",", "data_type", ",", "step_i", ")", ":", "\n", "        ", "summary", ",", "loss", "=", "self", ".", "_get_train_one_batch", "(", "batch_i", ",", "step_i", ",", "data_type", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "return", "summary", ",", "loss", "\n", "\n", "\n", "", "def", "_get_val", "(", "self", ",", "model", ",", "validation_data", ",", "step_i", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "\n", "summary", "=", "self", ".", "metrics", ".", "copy", "(", ")", "\n", "for", "name", ",", "fn", "in", "self", ".", "metrics", ".", "items", "(", ")", ":", "\n", "            ", "summary", "[", "name", "]", "=", "torch", ".", "tensor", "(", "0.0", ",", "dtype", "=", "torch", ".", "float64", ")", ".", "cuda", "(", "self", ".", "device", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "batch_i", "in", "enumerate", "(", "validation_data", ")", ":", "\n", "\n", "# get ground-truth", "\n", "                ", "GT", "=", "batch_i", "[", "'x'", "]", ".", "to", "(", "torch", ".", "float32", ")", ".", "cuda", "(", "self", ".", "device", ")", "\n", "\n", "# get noisy data", "\n", "y", "=", "batch_i", "[", "'y'", "]", ".", "to", "(", "torch", ".", "float32", ")", ".", "cuda", "(", "self", ".", "device", ")", "\n", "\n", "#prediction", "\n", "y_pred", ",", "_", ",", "_", "=", "self", ".", "model", "(", "y", ")", "\n", "\n", "# apply evaluation metrics", "\n", "for", "name", ",", "fn", "in", "self", ".", "metrics", ".", "items", "(", ")", ":", "\n", "                    ", "val", "=", "fn", "(", "GT", ",", "y_pred", ")", "\n", "summary", "[", "name", "]", "+=", "val", "\n", "if", "self", ".", "rank", "==", "0", ":", "\n", "                        ", "self", ".", "writer_numerical", ".", "add_scalar", "(", "'VAL/'", "+", "name", ",", "val", ",", "step_i", ")", "\n", "\n", "\n", "# save the images of the last ietration", "\n", "", "", "", "if", "self", ".", "rank", "==", "0", "and", "SAVE_IMGS", ":", "\n", "                ", "grid", "=", "make_grid", "(", "GT", ")", "\n", "self", ".", "writer_imgs", ".", "add_image", "(", "'VAL/GT/'", ",", "grid", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.trainer.Multiple_Steps_Trainer._create_file_writer": [[199, 201], ["tensorflow.summary.create_file_writer"], "methods", ["None"], ["\n", "# save other scales", "\n", "#grid = make_grid(y_pred_x2)", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.trainer.Multiple_Steps_Trainer._log": [[202, 207], ["trainer.Multiple_Steps_Trainer.summary_writer_numerical.as_default", "summary.items", "tensorflow.summary.scalar"], "methods", ["None"], ["#self.writer_imgs.add_image('VAL/y_pred_x2/', grid, 0)", "\n", "\n", "#grid = make_grid(y_pred_x4)", "\n", "#self.writer_imgs.add_image('VAL/y_pred_x4/', grid, 0)", "\n", "\n", "#save_image(y_pred,    f'{self.log_dir_imgs}/val_{step_i}_.png')", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.trainer.Multiple_Steps_Trainer._log_images": [[208, 213], ["trainer.Multiple_Steps_Trainer.summary_writer_img.as_default", "img_summary.items", "tensorflow.summary.image", "tensorflow.concat", "tensorflow.expand_dims"], "methods", ["None"], ["\n", "\n", "# take average over all results", "\n", "", "", "for", "name", "in", "self", ".", "metrics", ".", "keys", "(", ")", ":", "\n", "            ", "summary", "[", "name", "]", "/=", "(", "i", "+", "1.", ")", "\n", "", "return", "summary", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.trainer.Multiple_Steps_Trainer._sava_model": [[214, 219], ["trainer.Multiple_Steps_Trainer.strategy.scope", "trainer.Multiple_Steps_Trainer.model.save"], "methods", ["None"], ["\n", "\n", "", "def", "_get_test", "(", "self", ",", "model", ",", "test_data", ",", "step_i", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "\n", "summary", "=", "self", ".", "metrics", ".", "copy", "(", ")", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.trainer.Multiple_Steps_Trainer._print_summary": [[221, 244], ["tensorflow.print", "len", "summary.items", "tensorflow.print", "summary.keys", "format", "tensorflow.print", "key.split", "tensorflow.reduce_mean", "format", "tensorflow.print", "tensorflow.print", "prefix.ljust", "tensorflow.reduce_mean", "key.ljust", "format.ljust", "key.ljust", "format.ljust"], "methods", ["None"], ["            ", "summary", "[", "name", "]", "=", "torch", ".", "tensor", "(", "0.0", ",", "dtype", "=", "torch", ".", "float64", ")", ".", "cuda", "(", "self", ".", "device", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "batch_i", "in", "enumerate", "(", "test_data", ")", ":", "\n", "\n", "                ", "GT", "=", "batch_i", "[", "'x'", "]", ".", "to", "(", "torch", ".", "float32", ")", ".", "cuda", "(", "self", ".", "device", ")", "\n", "y", "=", "batch_i", "[", "'y'", "]", ".", "to", "(", "torch", ".", "float32", ")", ".", "cuda", "(", "self", ".", "device", ")", "\n", "\n", "#prediction", "\n", "y_pred", ",", "_", ",", "_", "=", "self", ".", "model", "(", "y", ")", "\n", "\n", "for", "name", ",", "fn", "in", "self", ".", "metrics", ".", "items", "(", ")", ":", "\n", "                    ", "metric", "=", "fn", "(", "GT", ",", "y_pred", ")", "\n", "summary", "[", "name", "]", "+=", "metric", "\n", "if", "self", ".", "rank", "==", "0", ":", "\n", "                        ", "self", ".", "writer_numerical", ".", "add_scalar", "(", "'TEST/'", "+", "name", ",", "metric", ",", "step_i", ")", "\n", "\n", "# save the images of the last ietration", "\n", "", "", "", "if", "self", ".", "rank", "==", "0", "and", "SAVE_IMGS", ":", "\n", "                ", "grid", "=", "make_grid", "(", "GT", ")", "\n", "self", ".", "writer_imgs", ".", "add_image", "(", "'TEST/GT/'", ",", "grid", ",", "0", ")", "\n", "\n", "grid", "=", "make_grid", "(", "y_pred", ")", "\n", "self", ".", "writer_imgs", ".", "add_image", "(", "'TEST/y_pred/'", ",", "grid", ",", "0", ")", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.blocks.batchnorm_relu": [[9, 14], ["tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation"], "function", ["None"], ["def", "batchnorm_relu", "(", "inputs", ",", "name", "=", "'bn_relue'", ")", ":", "\n", "    ", "\"\"\" Batch Normalization & ReLU \"\"\"", "\n", "x", "=", "KL", ".", "BatchNormalization", "(", "name", "=", "name", "+", "'/bn'", ")", "(", "inputs", ")", "\n", "x", "=", "KL", ".", "Activation", "(", "\"relu\"", ",", "name", "=", "name", "+", "'/relu'", ")", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.blocks.ContentEnhancer": [[16, 38], ["tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "blocks.batchnorm_relu", "tensorflow.nn.leaky_relu", "tensorflow.keras.layers.Concatenate", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Conv2D", "KL.Conv2D.", "KL.Conv2D.", "KL.Conv2D."], "function", ["home.repos.pwc.inspect_result.mogvision_adl.model.blocks.batchnorm_relu"], ["", "def", "ContentEnhancer", "(", "inputs", ",", "num_filters", ",", "strides", "=", "1", ",", "name", "=", "'ContentEnhancer'", ")", ":", "\n", "    ", "\"\"\" Content Enhancer \"\"\"", "\n", "\n", "conv1", "=", "KL", ".", "Conv2D", "(", "num_filters", "//", "2", ",", "7", ",", "dilation_rate", "=", "[", "1", ",", "1", "]", ",", "use_bias", "=", "use_bias", ",", "padding", "=", "'same'", ",", "name", "=", "name", "+", "'/conv1'", ")", "\n", "conv2", "=", "KL", ".", "Conv2D", "(", "num_filters", "//", "2", ",", "7", ",", "dilation_rate", "=", "[", "2", ",", "2", "]", ",", "use_bias", "=", "use_bias", ",", "padding", "=", "'same'", ",", "name", "=", "name", "+", "'/conv2'", ")", "\n", "conv4", "=", "KL", ".", "Conv2D", "(", "num_filters", "//", "2", ",", "7", ",", "dilation_rate", "=", "[", "4", ",", "4", "]", ",", "use_bias", "=", "use_bias", ",", "padding", "=", "'same'", ",", "name", "=", "name", "+", "'/conv3'", ")", "\n", "x", "=", "KL", ".", "Concatenate", "(", "name", "=", "name", "+", "'/con1'", ")", "(", "[", "conv1", "(", "inputs", ")", ",", "conv2", "(", "inputs", ")", ",", "conv4", "(", "inputs", ")", "]", ")", "\n", "x", "=", "batchnorm_relu", "(", "x", ",", "name", "=", "name", "+", "'/bn_relue'", ")", "\n", "x", "=", "KL", ".", "Conv2D", "(", "num_filters", ",", "7", ",", "padding", "=", "\"same\"", ",", "strides", "=", "1", ",", "use_bias", "=", "use_bias", ",", "name", "=", "name", "+", "'/conv4'", ")", "(", "x", ")", "\n", "x", "=", "KL", ".", "BatchNormalization", "(", "name", "=", "name", "+", "'/bn2'", ")", "(", "x", ")", "\n", "\n", "# Shortcut Connection", "\n", "s", "=", "KL", ".", "Conv2D", "(", "num_filters", ",", "1", ",", "padding", "=", "\"same\"", ",", "strides", "=", "1", ",", "use_bias", "=", "use_bias", ",", "name", "=", "name", "+", "'/conv5'", ")", "(", "inputs", ")", "\n", "\n", "# Addition", "\n", "x", "+=", "s", "\n", "\n", "# Activation", "\n", "#x = KL.Activation(\"relu\", name=name+'/relu2')(x)", "\n", "x", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "x", ",", "alpha", "=", "leaky_relu_alpha", ",", "name", "=", "name", "+", "'/relu2'", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.blocks.decoder_block": [[41, 56], ["tensorflow.random_normal_initializer", "blocks.residual_block", "tensorflow.keras.layers.Conv2DTranspose", "tensorflow.keras.layers.Concatenate"], "function", ["home.repos.pwc.inspect_result.mogvision_adl.model.blocks.residual_block"], ["", "def", "decoder_block", "(", "inputs", ",", "skip_features", ",", "num_filters", ",", "name", "=", "'decoder_block'", ")", ":", "\n", "    ", "\"\"\" Decoder Block \"\"\"", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "0.", ",", "0.02", ")", "\n", "\n", "\n", "#x = KL.UpSampling2D((2, 2), name=name+'/up')(inputs)", "\n", "x", "=", "KL", ".", "Conv2DTranspose", "(", "num_filters", ",", "ks", ",", "strides", "=", "2", ",", "\n", "padding", "=", "'same'", ",", "\n", "kernel_initializer", "=", "initializer", ",", "\n", "use_bias", "=", "False", ",", "\n", "name", "=", "name", "+", "'/up'", ")", "(", "inputs", ")", "\n", "\n", "x", "=", "KL", ".", "Concatenate", "(", "name", "=", "name", "+", "'/con'", ")", "(", "[", "x", ",", "skip_features", "]", ")", "\n", "x", "=", "residual_block", "(", "x", ",", "num_filters", ",", "strides", "=", "1", ",", "name", "=", "name", "+", "'/residual_block'", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.blocks.residual_block": [[60, 76], ["blocks.batchnorm_relu", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Activation"], "function", ["home.repos.pwc.inspect_result.mogvision_adl.model.blocks.batchnorm_relu"], ["", "def", "residual_block", "(", "inputs", ",", "num_filters", ",", "strides", "=", "1", ",", "name", "=", "'residual_block'", ")", ":", "\n", "    ", "\"\"\" Convolutional Layers \"\"\"", "\n", "x", "=", "KL", ".", "Conv2D", "(", "num_filters", ",", "ks", ",", "padding", "=", "\"same\"", ",", "strides", "=", "strides", ",", "use_bias", "=", "use_bias", ",", "name", "=", "name", "+", "'/conv1'", ")", "(", "inputs", ")", "\n", "x", "=", "batchnorm_relu", "(", "x", ",", "name", "=", "name", "+", "'/bn1_relue'", ")", "\n", "x", "=", "KL", ".", "Conv2D", "(", "num_filters", ",", "ks", ",", "padding", "=", "\"same\"", ",", "strides", "=", "1", ",", "use_bias", "=", "use_bias", ",", "name", "=", "name", "+", "'/conv2'", ")", "(", "x", ")", "\n", "x", "=", "KL", ".", "BatchNormalization", "(", "name", "=", "name", "+", "'/bn2'", ")", "(", "x", ")", "\n", "\n", "# Shortcut Connection", "\n", "s", "=", "KL", ".", "Conv2D", "(", "num_filters", ",", "1", ",", "padding", "=", "\"same\"", ",", "strides", "=", "strides", ",", "use_bias", "=", "use_bias", ",", "name", "=", "name", "+", "'/conv3'", ")", "(", "inputs", ")", "\n", "\n", "# Addition", "\n", "x", "+=", "s", "\n", "\n", "# Activation", "\n", "x", "=", "KL", ".", "Activation", "(", "\"relu\"", ",", "name", "=", "name", "+", "'/relu2'", ")", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.blocks.T1": [[82, 86], ["blocks.residual_block", "tensorflow.keras.layers.Conv2D"], "function", ["home.repos.pwc.inspect_result.mogvision_adl.model.blocks.residual_block"], ["", "def", "T1", "(", "inputs", ",", "num_filters", ",", "out_channels", ",", "strides", "=", "1", ",", "name", "=", "'T1'", ")", ":", "\n", "    ", "x", "=", "residual_block", "(", "inputs", ",", "num_filters", "//", "2", ",", "strides", "=", "1", ",", "name", "=", "name", "+", "'/out_x0'", ")", "\n", "yhat", "=", "KL", ".", "Conv2D", "(", "out_channels", ",", "1", ",", "padding", "=", "\"same\"", ",", "activation", "=", "\"sigmoid\"", ",", "use_bias", "=", "use_bias", ",", "name", "=", "'conv4'", ")", "(", "x", ")", "\n", "return", "yhat", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.blocks.T2": [[88, 93], ["blocks.residual_block", "blocks.residual_block", "tensorflow.keras.layers.Conv2D"], "function", ["home.repos.pwc.inspect_result.mogvision_adl.model.blocks.residual_block", "home.repos.pwc.inspect_result.mogvision_adl.model.blocks.residual_block"], ["", "def", "T2", "(", "inputs", ",", "num_filters", ",", "out_channels", ",", "strides", "=", "1", ",", "name", "=", "'T2'", ")", ":", "\n", "    ", "x", "=", "residual_block", "(", "inputs", ",", "num_filters", "//", "2", ",", "strides", "=", "1", ",", "name", "=", "name", "+", "'/out1_x0'", ")", "\n", "x", "=", "residual_block", "(", "x", ",", "num_filters", "//", "4", ",", "strides", "=", "1", ",", "name", "=", "name", "+", "'/out1_x2'", ")", "\n", "yhat", "=", "KL", ".", "Conv2D", "(", "out_channels", ",", "1", ",", "padding", "=", "\"same\"", ",", "activation", "=", "\"sigmoid\"", ",", "use_bias", "=", "use_bias", ",", "name", "=", "name", "+", "'/conv4'", ")", "(", "x", ")", "\n", "return", "yhat", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.blocks.T3": [[95, 101], ["blocks.residual_block", "blocks.residual_block", "blocks.residual_block", "tensorflow.keras.layers.Conv2D"], "function", ["home.repos.pwc.inspect_result.mogvision_adl.model.blocks.residual_block", "home.repos.pwc.inspect_result.mogvision_adl.model.blocks.residual_block", "home.repos.pwc.inspect_result.mogvision_adl.model.blocks.residual_block"], ["", "def", "T3", "(", "inputs", ",", "num_filters", ",", "out_channels", ",", "strides", "=", "1", ",", "name", "=", "'T3'", ")", ":", "\n", "    ", "x", "=", "residual_block", "(", "inputs", ",", "num_filters", "//", "2", ",", "strides", "=", "1", ",", "name", "=", "name", "+", "'/out1_x0'", ")", "\n", "x", "=", "residual_block", "(", "x", ",", "num_filters", "//", "4", ",", "strides", "=", "1", ",", "name", "=", "name", "+", "'/out1_x2'", ")", "\n", "x", "=", "residual_block", "(", "x", ",", "num_filters", "//", "8", ",", "strides", "=", "1", ",", "name", "=", "name", "+", "'/out1_x4'", ")", "\n", "yhat", "=", "KL", ".", "Conv2D", "(", "out_channels", ",", "1", ",", "padding", "=", "\"same\"", ",", "activation", "=", "\"sigmoid\"", ",", "use_bias", "=", "use_bias", ",", "name", "=", "name", "+", "'/conv4'", ")", "(", "x", ")", "\n", "return", "yhat", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.blocks.T1_disc": [[103, 108], ["blocks.residual_block", "tensorflow.nn.leaky_relu", "tensorflow.keras.layers.Conv2D"], "function", ["home.repos.pwc.inspect_result.mogvision_adl.model.blocks.residual_block"], ["", "def", "T1_disc", "(", "inputs", ",", "num_filters", ",", "strides", "=", "1", ",", "name", "=", "'T1_disc'", ")", ":", "\n", "    ", "x", "=", "residual_block", "(", "inputs", ",", "num_filters", "//", "2", ",", "strides", "=", "1", ",", "name", "=", "name", "+", "'/out_x0'", ")", "\n", "x", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "x", ",", "alpha", "=", "leaky_relu_alpha", ",", "name", "=", "name", "+", "'/leakyrelue'", ")", "\n", "yhat", "=", "KL", ".", "Conv2D", "(", "1", ",", "1", ",", "padding", "=", "\"same\"", ",", "use_bias", "=", "use_bias", ",", "name", "=", "name", "+", "'/conv4'", ")", "(", "x", ")", "\n", "return", "yhat", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.blocks.T2_disc": [[110, 116], ["blocks.residual_block", "blocks.residual_block", "tensorflow.nn.leaky_relu", "tensorflow.keras.layers.Conv2D"], "function", ["home.repos.pwc.inspect_result.mogvision_adl.model.blocks.residual_block", "home.repos.pwc.inspect_result.mogvision_adl.model.blocks.residual_block"], ["", "def", "T2_disc", "(", "inputs", ",", "num_filters", ",", "strides", "=", "1", ",", "name", "=", "'T2_disc'", ")", ":", "\n", "    ", "x", "=", "residual_block", "(", "inputs", ",", "num_filters", ",", "strides", "=", "1", ",", "name", "=", "name", "+", "'/out1_x0'", ")", "\n", "x", "=", "residual_block", "(", "x", ",", "num_filters", "//", "2", ",", "strides", "=", "1", ",", "name", "=", "name", "+", "'/out1_x2'", ")", "\n", "x", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "x", ",", "alpha", "=", "leaky_relu_alpha", ",", "name", "=", "name", "+", "'/leakyrelue'", ")", "\n", "yhat", "=", "KL", ".", "Conv2D", "(", "1", ",", "1", ",", "padding", "=", "\"same\"", ",", "use_bias", "=", "use_bias", ",", "name", "=", "name", "+", "'/conv4'", ")", "(", "x", ")", "\n", "return", "yhat", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.blocks.T3_disc": [[118, 125], ["blocks.residual_block", "blocks.residual_block", "blocks.residual_block", "tensorflow.nn.leaky_relu", "tensorflow.keras.layers.Conv2D"], "function", ["home.repos.pwc.inspect_result.mogvision_adl.model.blocks.residual_block", "home.repos.pwc.inspect_result.mogvision_adl.model.blocks.residual_block", "home.repos.pwc.inspect_result.mogvision_adl.model.blocks.residual_block"], ["", "def", "T3_disc", "(", "inputs", ",", "num_filters", ",", "strides", "=", "1", ",", "name", "=", "'T3_disc'", ")", ":", "\n", "    ", "x", "=", "residual_block", "(", "inputs", ",", "num_filters", ",", "strides", "=", "1", ",", "name", "=", "name", "+", "'/out1_x0'", ")", "\n", "x", "=", "residual_block", "(", "x", ",", "num_filters", "//", "2", ",", "strides", "=", "1", ",", "name", "=", "name", "+", "'/out1_x2'", ")", "\n", "x", "=", "residual_block", "(", "x", ",", "num_filters", "//", "4", ",", "strides", "=", "1", ",", "name", "=", "name", "+", "'/out1_x4'", ")", "\n", "x", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "x", ",", "alpha", "=", "leaky_relu_alpha", ",", "name", "=", "name", "+", "'/leakyrelue'", ")", "\n", "yhat_map", "=", "KL", ".", "Conv2D", "(", "1", ",", "1", ",", "padding", "=", "\"same\"", ",", "use_bias", "=", "use_bias", ",", "name", "=", "name", "+", "'/conv4'", ")", "(", "x", ")", "\n", "return", "yhat_map", "", "", ""]], "home.repos.pwc.inspect_result.mogvision_adl.model.loss.BCE": [[7, 12], ["tensorflow.keras.losses.BinaryCrossentropy"], "function", ["None"], ["MAE_obj", "=", "nn", ".", "L1Loss", "(", ")", "\n", "\n", "def", "Loss_L1", "(", "x_gt", ",", "yhat", ")", ":", "\n", "  ", "return", "MAE_obj", ".", "__call__", "(", "x_gt", ",", "yhat", ")", "\n", "\n", "", "def", "pyr_Loss", "(", "x_gt", ",", "yhat", ",", "levels", "=", "3", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.loss.MAE": [[22, 30], ["tensorflow.reshape", "tensorflow.reshape", "MAE_obj", "tensorflow.nn.compute_average_loss", "x_gt.get_shape"], "function", ["None"], ["\n", "# convert To tensor", "\n", "kernel_size", "=", "kernel_2d", ".", "shape", "[", "0", "]", "\n", "kernel_torch", "=", "torch", ".", "tensor", "(", "kernel_2d", ",", "dtype", "=", "image_dtype", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "Cin", ",", "1", ",", "kernel_size", ",", "kernel_size", ")", "\n", "return", "kernel_torch", ",", "kernel_size", "\n", "\n", "", "def", "_convolve", "(", "image", ",", "ker_base", ",", "level", ")", ":", "\n", "# get filter", "\n", "        ", "Cin", "=", "image", ".", "size", "(", "1", ")", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.adl_trainer.ADL_Trainer._get_optimiers": [[152, 154], ["tensorflow.keras.optimizers.Adam"], "methods", ["None"], ["if", "os", ".", "path", ".", "exists", "(", "ckpt_dir", ")", ":", "\n", "            ", "step_ids", "=", "[", "int", "(", "dir_", ".", "split", "(", "prefix", ")", "[", "-", "1", "]", ".", "split", "(", "suffix", ")", "[", "0", "]", ")", "for", "dir_", "in", "os", ".", "listdir", "(", "ckpt_dir", ")", "]", "\n", "if", "len", "(", "step_ids", ")", ">", "0", ":", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.adl_trainer.ADL_Trainer._get_lr": [[155, 161], ["model.lr.ReduceLROnPlateau", "tensorflow.print"], "methods", ["None"], ["                ", "step_num", "=", "max", "(", "step_ids", ")", "\n", "model_path", "=", "f\"{ckpt_dir}/{prefix}{step_num}{suffix}\"", "\n", "\n", "", "", "if", "model_path", ":", "\n", "            ", "model", "=", "load_model", "(", "model", ",", "model_path", ")", "\n", "print", "(", "f\"[i] {mode}-GPU{self.rank}: Restoring the model from step {step_num}.\"", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.adl_trainer.ADL_Trainer_module.train_one_step": [[241, 332], ["tensorflow.constant", "tensorflow.constant", "tape_denoiser.gradient", "tape_disc.gradient", "adl_trainer.ADL_Trainer_module.optimizer_denoiser.apply_gradients", "x_gt.get_shape", "tensorflow.keras.layers.AveragePooling2D", "tensorflow.keras.layers.AveragePooling2D", "loss_dict_denoiser.update", "tensorflow.GradientTape", "tensorflow.GradientTape", "adl_trainer.ADL_Trainer_module.model", "adl_trainer.ADL_Trainer_module.loss_denoiser.items", "loss_dict_denoiser.items", "adl_trainer.ADL_Trainer_module.model_disc", "tensorflow.concat", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "adl_trainer.ADL_Trainer_module.model_disc", "tensorflow.concat", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "zip", "adl_trainer.ADL_Trainer_module.optimizer_disc.apply_gradients", "adl_trainer.ADL_Trainer_module.loss_denoiser.keys", "loss_fn", "loss_fn", "loss_fn", "adl_trainer.ADL_Trainer_module.relu", "adl_trainer.ADL_Trainer_module.relu", "adl_trainer.ADL_Trainer_module.relu", "adl_trainer.ADL_Trainer_module.relu", "zip", "tensorflow.constant", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape"], "methods", ["None"], ["\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "scheduler", "=", "scheduler", "\n", "self", ".", "loss", "=", "loss", "\n", "self", ".", "loss_weights", "=", "_loss_weights", "(", "loss_weights", ",", "loss", ")", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "metrics", "=", "metrics", "\n", "self", ".", "distributed", "=", "distributed", "\n", "\n", "\n", "", "def", "_get_train_one_batch", "(", "self", ",", "data", ",", "step_i", ",", "data_type", "=", "None", ")", ":", "\n", "        ", "\"\"\"train the denoiser for one batch\"\"\"", "\n", "summary", "=", "{", "}", "\n", "\n", "if", "data_type", "==", "'gt'", ":", "\n", "            ", "loss", "=", "torch", ".", "tensor", "(", "0.0", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "cuda", "(", "self", ".", "device", ")", "\n", "\n", "# Run the discriminator ------------------------", "\n", "# Compute the loss for the true sample", "\n", "gt", "=", "data", "[", "'x'", "]", ".", "to", "(", "torch", ".", "float32", ")", ".", "cuda", "(", "self", ".", "device", ")", "\n", "gt_bridge", ",", "gt_x0", ",", "gt_x2", ",", "gt_x4", "=", "self", ".", "model_disc", "(", "gt", ")", "\n", "B", "=", "gt", ".", "shape", "[", "0", "]", "\n", "\n", "true_ravel", "=", "torch", ".", "concat", "(", "[", "torch", ".", "reshape", "(", "gt_bridge", ",", "[", "B", ",", "-", "1", "]", ")", ",", "\n", "torch", ".", "reshape", "(", "gt_x0", ",", "[", "B", ",", "-", "1", "]", ")", ",", "\n", "torch", ".", "reshape", "(", "gt_x2", ",", "[", "B", ",", "-", "1", "]", ")", ",", "\n", "torch", ".", "reshape", "(", "gt_x4", ",", "[", "B", ",", "-", "1", "]", ")", "\n", "]", ",", "axis", "=", "-", "1", ")", "\n", "loss_disc", "=", "torch", ".", "mean", "(", "RELU", "(", "1.0", "-", "true_ravel", ")", ")", "\n", "summary", "[", "'/loss/'", "+", "'disc_loss_tot'", "]", "=", "loss_disc", "\n", "loss", "=", "loss_disc", "\n", "\n", "\n", "\n", "", "else", ":", "\n", "# Run the denoiser model -------------------------            ", "\n", "            ", "loss", "=", "torch", ".", "tensor", "(", "0.0", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "cuda", "(", "self", ".", "device", ")", "\n", "gt", "=", "data", "[", "'x'", "]", ".", "to", "(", "torch", ".", "float32", ")", ".", "cuda", "(", "self", ".", "device", ")", "\n", "gt_x2", ",", "gt_x4", "=", "self", ".", "_rescale_gt_2d", "(", "gt", ")", "\n", "\n", "#prediction", "\n", "y", "=", "data", "[", "'y'", "]", ".", "to", "(", "torch", ".", "float32", ")", ".", "cuda", "(", "self", ".", "device", ")", "\n", "y_pred", ",", "y_pred_x2", ",", "y_pred_x4", "=", "self", ".", "model", "(", "y", ")", "\n", "B", "=", "y", ".", "shape", "[", "0", "]", "\n", "\n", "for", "name", ",", "fn", "in", "self", ".", "loss", ".", "items", "(", ")", ":", "\n", "                ", "loss_", "=", "fn", "(", "gt", ",", "y_pred", ")", "+", "fn", "(", "gt_x2", ",", "y_pred_x2", ")", "+", "fn", "(", "gt_x4", ",", "y_pred_x4", ")", "\n", "\n", "#criterion[name].append(loss_cur)", "\n", "loss", "=", "loss", "+", "loss_", "*", "self", ".", "loss_weights", "[", "name", "]", "\n", "summary", "[", "'/loss/'", "+", "name", "]", "=", "loss_", "\n", "", "summary", "[", "'/loss/'", "+", "'loss_tot'", "]", "=", "loss", "\n", "\n", "# Run the discriminator -------------------------", "\n", "y_bridge", ",", "y_pred", ",", "y_pred_x2", ",", "y_pred_x4", "=", "self", ".", "model_disc", "(", "y", ")", "\n", "\n", "# Compute the loss for the true sample", "\n", "pred_ravel", "=", "torch", ".", "concat", "(", "[", "torch", ".", "reshape", "(", "y_bridge", ",", "[", "B", ",", "-", "1", "]", ")", ",", "\n", "torch", ".", "reshape", "(", "y_pred", ",", "[", "B", ",", "-", "1", "]", ")", ",", "\n", "torch", ".", "reshape", "(", "y_pred_x2", ",", "[", "B", ",", "-", "1", "]", ")", ",", "\n", "torch", ".", "reshape", "(", "y_pred_x4", ",", "[", "B", ",", "-", "1", "]", ")", "\n", "]", ",", "axis", "=", "-", "1", ")", "\n", "loss_disc", "=", "torch", ".", "mean", "(", "RELU", "(", "1.0", "+", "pred_ravel", ")", ")", "\n", "summary", "[", "'/loss/'", "+", "'disc_loss_tot'", "]", "=", "loss_disc", "\n", "\n", "", "if", "self", ".", "rank", "==", "0", ":", "\n", "            ", "for", "key", ",", "val", "in", "summary", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "writer_numerical", ".", "add_scalar", "(", "key", ",", "val", ",", "step_i", ")", "\n", "", "", "return", "summary", ",", "loss", "\n", "\n", "", "def", "_rescale_gt_2d", "(", "self", ",", "im", ")", ":", "\n", "        ", "\"\"\" downsacle image by factor 2 and 4 \"\"\"", "\n", "im_x2", "=", "F", ".", "interpolate", "(", "im", ",", "size", "=", "(", "im", ".", "shape", "[", "2", "]", "//", "2", ",", "im", ".", "shape", "[", "3", "]", "//", "2", ")", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "False", ")", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "1.0", ")", "\n", "im_x4", "=", "F", ".", "interpolate", "(", "im", ",", "size", "=", "(", "im", ".", "shape", "[", "2", "]", "//", "4", ",", "im", ".", "shape", "[", "3", "]", "//", "4", ")", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "False", ")", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "1.0", ")", "\n", "return", "im_x2", ".", "to", "(", "torch", ".", "float32", ")", ".", "cuda", "(", "self", ".", "device", ")", ",", "im_x4", ".", "to", "(", "torch", ".", "float32", ")", ".", "cuda", "(", "self", ".", "device", ")", "\n", "\n", "\n", "", "", "def", "_loss_weights", "(", "loss_weights", ":", "Union", "[", "None", ",", "Dict", "[", "str", ",", "float", "]", "]", ",", "\n", "loss", ":", "Dict", "[", "str", ",", "Any", "]", ")", "->", "Dict", "[", "str", ",", "float", "]", ":", "\n", "    ", "weights_", "=", "{", "fn_name", ":", "1.", "for", "fn_name", "in", "loss", "}", "\n", "if", "loss_weights", "is", "not", "None", ":", "\n", "        ", "weights_", ".", "update", "(", "loss_weights", ")", "\n", "", "return", "weights_", "\n", "", ""]], "home.repos.pwc.inspect_result.mogvision_adl.model.adl_trainer.ADL_Trainer_module.val_test_one_step": [[337, 401], ["adl_trainer.ADL_Trainer_module.metrics.items", "x_gt.get_shape", "adl_trainer.ADL_Trainer_module.metrics.items", "tensorflow.constant", "tensorflow.rank", "adl_trainer.ADL_Trainer_module.model", "adl_trainer.ADL_Trainer_module.model", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "metric", "tensorflow.constant", "tensorflow.zeros", "tensorflow.zeros"], "methods", ["None"], []], "home.repos.pwc.inspect_result.mogvision_adl.model.lr.ReduceLROnPlateau.__init__": [[44, 78], ["abc.ABC.__init__", "lr.ReduceLROnPlateau._reset", "ValueError", "kwargs.pop", "logging.warning"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader_test.DataLoader.__init__", "home.repos.pwc.inspect_result.mogvision_adl.model.lr.ReduceLROnPlateau._reset"], ["def", "__init__", "(", "self", ",", "\n", "optimizer", ":", "keras", ".", "optimizers", ".", "Optimizer", ",", "\n", "monitor", ":", "str", "=", "None", ",", "\n", "factor", ":", "float", "=", "0.1", ",", "\n", "patience", ":", "int", "=", "10", ",", "\n", "mode", ":", "str", "=", "'auto'", ",", "\n", "min_delta", ":", "float", "=", "1e-4", ",", "\n", "cooldown", ":", "int", "=", "0", ",", "\n", "min_lr", ":", "int", "=", "1e-6", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ReduceLROnPlateau", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "monitor", "=", "monitor", "\n", "if", "factor", ">=", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "f'ReduceLROnPlateau does not support a factor >= 1.0. Got {factor}'", ")", "\n", "", "if", "'epsilon'", "in", "kwargs", ":", "\n", "            ", "min_delta", "=", "kwargs", ".", "pop", "(", "'epsilon'", ")", "\n", "logging", ".", "warning", "(", "'`epsilon` argument is deprecated and '", "\n", "'will be removed, use `min_delta` instead.'", ")", "\n", "", "self", ".", "factor", "=", "factor", "\n", "self", ".", "min_lr", "=", "min_lr", "\n", "self", ".", "min_delta", "=", "min_delta", "\n", "self", ".", "patience", "=", "patience", "\n", "self", ".", "cooldown", "=", "cooldown", "\n", "self", ".", "cooldown_counter", "=", "0", "# Cooldown counter.", "\n", "self", ".", "wait", "=", "0", "\n", "self", ".", "best", "=", "0", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "monitor_op", "=", "None", "\n", "\n", "# reset the LR", "\n", "self", ".", "_reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.lr.ReduceLROnPlateau._reset": [[79, 96], ["logging.warning", "numpy.less", "numpy.greater"], "methods", ["None"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Resets wait counter and cooldown counter.\n        \"\"\"", "\n", "if", "self", ".", "mode", "not", "in", "[", "'auto'", ",", "'min'", ",", "'max'", "]", ":", "\n", "            ", "logging", ".", "warning", "(", "'Learning rate reduction mode %s is unknown, '", "\n", "'fallback to auto mode.'", ",", "self", ".", "mode", ")", "\n", "self", ".", "mode", "=", "'auto'", "\n", "", "if", "(", "self", ".", "mode", "==", "'min'", "or", "\n", "(", "self", ".", "mode", "==", "'auto'", "and", "'acc'", "not", "in", "self", ".", "monitor", ")", ")", ":", "\n", "            ", "self", ".", "monitor_op", "=", "lambda", "a", ",", "b", ":", "np", ".", "less", "(", "a", ",", "b", "-", "self", ".", "min_delta", ")", "\n", "self", ".", "best", "=", "np", ".", "Inf", "\n", "", "else", ":", "\n", "            ", "self", ".", "monitor_op", "=", "lambda", "a", ",", "b", ":", "np", ".", "greater", "(", "a", ",", "b", "+", "self", ".", "min_delta", ")", "\n", "self", ".", "best", "=", "-", "np", ".", "Inf", "\n", "\n", "", "self", ".", "cooldown_counter", "=", "0", "\n", "self", ".", "wait", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.lr.ReduceLROnPlateau.on_train_begin": [[97, 99], ["lr.ReduceLROnPlateau._reset"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.model.lr.ReduceLROnPlateau._reset"], ["", "def", "on_train_begin", "(", "self", ",", "logs", "=", "None", ")", ":", "\n", "        ", "self", ".", "_reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.lr.ReduceLROnPlateau.on_epoch_end": [[101, 127], ["numpy.float32", "lr.ReduceLROnPlateau.in_cooldown", "lr.ReduceLROnPlateau.monitor_op", "tensorflow.keras.backend.get_value", "lr.ReduceLROnPlateau.in_cooldown", "tensorflow.keras.backend.get_value", "numpy.float32", "max", "tensorflow.keras.backend.set_value"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.model.lr.ReduceLROnPlateau.in_cooldown", "home.repos.pwc.inspect_result.mogvision_adl.model.lr.ReduceLROnPlateau.in_cooldown"], ["", "def", "on_epoch_end", "(", "self", ",", "step", ",", "logs", "=", "None", ")", ":", "\n", "        ", "logs", "=", "logs", "or", "{", "}", "\n", "logs", "[", "'lr'", "]", "=", "np", ".", "float32", "(", "backend", ".", "get_value", "(", "self", ".", "optimizer", ".", "lr", ")", ")", "\n", "current", "=", "logs", "[", "self", ".", "monitor", "]", "\n", "\n", "if", "current", "is", "None", ":", "\n", "            ", "return", "logs", "\n", "", "if", "self", ".", "in_cooldown", "(", ")", ":", "\n", "            ", "self", ".", "cooldown_counter", "-=", "1", "\n", "self", ".", "wait", "=", "0", "\n", "\n", "\n", "", "if", "self", ".", "monitor_op", "(", "current", ",", "self", ".", "best", ")", ":", "\n", "            ", "self", ".", "best", "=", "current", "\n", "self", ".", "wait", "=", "0", "\n", "", "elif", "not", "self", ".", "in_cooldown", "(", ")", ":", "\n", "            ", "self", ".", "wait", "+=", "1", "\n", "if", "self", ".", "wait", ">=", "self", ".", "patience", ":", "\n", "                ", "old_lr", "=", "backend", ".", "get_value", "(", "self", ".", "optimizer", ".", "lr", ")", "\n", "if", "old_lr", ">", "np", ".", "float32", "(", "self", ".", "min_lr", ")", ":", "\n", "                    ", "new_lr", "=", "old_lr", "*", "self", ".", "factor", "\n", "new_lr", "=", "max", "(", "new_lr", ",", "self", ".", "min_lr", ")", "\n", "backend", ".", "set_value", "(", "self", ".", "optimizer", ".", "lr", ",", "new_lr", ")", "\n", "self", ".", "cooldown_counter", "=", "self", ".", "cooldown", "\n", "self", ".", "wait", "=", "0", "\n", "", "", "", "return", "logs", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.lr.ReduceLROnPlateau.in_cooldown": [[128, 130], ["None"], "methods", ["None"], ["", "def", "in_cooldown", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "cooldown_counter", ">", "0", "", "", "", ""]], "home.repos.pwc.inspect_result.mogvision_adl.model.discriminator_trainer.Discriminator_Trainer._get_optimiers": [[103, 105], ["tensorflow.keras.optimizers.Adam"], "methods", ["None"], ["\n", "\n", "", "def", "_get_discriminator", "(", "self", ",", "model_name", ",", "in_channels", ",", "out_channels", ",", "negative_slope", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.discriminator_trainer.Discriminator_Trainer._get_lr": [[106, 112], ["model.lr.ReduceLROnPlateau", "tensorflow.print"], "methods", ["None"], ["        ", "\"\"\" get discriminator model\"\"\"", "\n", "module_", "=", "getattr", "(", "MODELS", ",", "model_name", ")", "\n", "return", "module_", "(", "in_channels", ",", "out_channels", ",", "negative_slope", ")", "\n", "\n", "", "def", "_get_model", "(", "self", ",", "mode", ",", "model_name", ",", "in_channels", ",", "out_channels", ",", "ckpt_dir", ",", "\n", "negative_slope", ",", "prefix", "=", "'ckpts_step_'", ",", "suffix", "=", "'.pt'", ")", ":", "\n", "        ", "\"\"\"We get the model and then load its last saved one if avail\"\"\"", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.discriminator_trainer.Discriminator_Trainer_module.train_one_step": [[198, 248], ["tensorflow.constant", "grad_tape.gradient", "discriminator_trainer.Discriminator_Trainer_module.optimizer.apply_gradients", "x_gt.get_shape", "tensorflow.GradientTape", "discriminator_trainer.Discriminator_Trainer_module.model", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "discriminator_trainer.Discriminator_Trainer_module.model", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "zip", "discriminator_trainer.Discriminator_Trainer_module.relu", "discriminator_trainer.Discriminator_Trainer_module.relu", "discriminator_trainer.Discriminator_Trainer_module.relu", "discriminator_trainer.Discriminator_Trainer_module.relu", "discriminator_trainer.Discriminator_Trainer_module.relu", "discriminator_trainer.Discriminator_Trainer_module.relu", "discriminator_trainer.Discriminator_Trainer_module.relu", "discriminator_trainer.Discriminator_Trainer_module.relu"], "methods", ["None"], ["distributed", ":", "bool", "=", "False", "\n", ")", "->", "None", ":", "\n", "        ", "\"\"\"Configure the discriminator for training.\n        Args:\n            optimizer: The tf.keras.optimizers optimizer for the model.\n            loss: A dictionary with the losses for the model. The sum of the losses is considered.\n            loss_weights: Weights of the model losses.\n            metrics: evaluation metrics\n        \"\"\"", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "scheduler", "=", "scheduler", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "distributed", "=", "distributed", "\n", "\n", "\n", "", "def", "_get_train_one_batch", "(", "self", ",", "data", ",", "step_i", ",", "data_type", "=", "None", ")", ":", "\n", "\n", "# initilize the total loss value", "\n", "        ", "loss_", "=", "torch", ".", "tensor", "(", "0.0", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "cuda", "(", "self", ".", "device", ")", "\n", "\n", "if", "data_type", "==", "'gt'", ":", "\n", "# Compute the loss for the true sample", "\n", "            ", "gt", "=", "data", "[", "'x'", "]", ".", "to", "(", "torch", ".", "float32", ")", ".", "cuda", "(", "self", ".", "device", ")", "\n", "gt_bridge", ",", "gt_x0", ",", "gt_x2", ",", "gt_x4", "=", "self", ".", "model", "(", "gt", ")", "#", "\n", "B", "=", "gt", ".", "shape", "[", "0", "]", "\n", "\n", "true_ravel", "=", "torch", ".", "concat", "(", "[", "torch", ".", "reshape", "(", "gt_bridge", ",", "[", "B", ",", "-", "1", "]", ")", ",", "\n", "torch", ".", "reshape", "(", "gt_x0", ",", "[", "B", ",", "-", "1", "]", ")", ",", "\n", "torch", ".", "reshape", "(", "gt_x2", ",", "[", "B", ",", "-", "1", "]", ")", ",", "\n", "torch", ".", "reshape", "(", "gt_x4", ",", "[", "B", ",", "-", "1", "]", ")", "\n", "]", ",", "axis", "=", "-", "1", ")", "\n", "loss_", "=", "loss_", "+", "torch", ".", "mean", "(", "RELU", "(", "1.0", "-", "true_ravel", ")", ")", "\n", "", "else", ":", "\n", "#prediction", "\n", "            ", "y", "=", "data", "[", "'y'", "]", ".", "to", "(", "torch", ".", "float32", ")", ".", "cuda", "(", "self", ".", "device", ")", "\n", "y_bridge", ",", "y_pred", ",", "y_pred_x2", ",", "y_pred_x4", "=", "self", ".", "model", "(", "y", ")", "\n", "B", "=", "y", ".", "shape", "[", "0", "]", "\n", "\n", "# Compute the loss for the true sample", "\n", "pred_ravel", "=", "torch", ".", "concat", "(", "[", "torch", ".", "reshape", "(", "y_bridge", ",", "[", "B", ",", "-", "1", "]", ")", ",", "\n", "torch", ".", "reshape", "(", "y_pred", ",", "[", "B", ",", "-", "1", "]", ")", ",", "\n", "torch", ".", "reshape", "(", "y_pred_x2", ",", "[", "B", ",", "-", "1", "]", ")", ",", "\n", "torch", ".", "reshape", "(", "y_pred_x4", ",", "[", "B", ",", "-", "1", "]", ")", "\n", "]", ",", "axis", "=", "-", "1", ")", "\n", "loss_", "=", "loss_", "+", "torch", ".", "mean", "(", "RELU", "(", "1.0", "+", "pred_ravel", ")", ")", "\n", "\n", "\n", "", "summary", "=", "{", "}", "\n", "summary", "[", "'/loss/'", "+", "'loss_tot'", "]", "=", "loss_", "\n", "# Anything else?!", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.model.discriminator_trainer._loss_weights": [[251, 257], ["weights_.update"], "function", ["None"], ["                ", "self", ".", "writer_numerical", ".", "add_scalar", "(", "key", ",", "val", ",", "step_i", ")", "\n", "\n", "", "", "return", "summary", ",", "loss_", "", "", "", ""]], "home.repos.pwc.inspect_result.mogvision_adl.TensorFlow.inference.Test.__init__": [[33, 50], ["util.DataLoader_test.DataLoader", "os.path.exists", "os.makedirs"], "methods", ["None"], ["parser", ".", "add_argument", "(", "'--test-dirs'", ",", "type", "=", "str", ",", "default", "=", "'testCV'", ",", "action", "=", "\"store\"", ",", "required", "=", "True", ",", "help", "=", "\"test directory\"", ")", "\n", "parser", ".", "add_argument", "(", "'--CHANNELS-NUM'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "action", "=", "\"store\"", ",", "required", "=", "True", ",", "help", "=", "\"number of channels\"", ")", "\n", "parser", ".", "add_argument", "(", "'--EXPERIMENT'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "action", "=", "\"store\"", ",", "required", "=", "True", ",", "help", "=", "\"name of experiment\"", ")", "\n", "parser", ".", "add_argument", "(", "'--json-file'", ",", "type", "=", "str", ",", "action", "=", "\"store\"", ",", "default", "=", "''", ",", "required", "=", "True", ",", "help", "=", "\"configuration file\"", ")", "\n", "parser", ".", "add_argument", "(", "'--save-images'", ",", "choices", "=", "(", "'True'", ",", "'False'", ")", ",", "default", "=", "'True'", ",", "help", "=", "\"save the results as image\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "\n", "\n", "class", "Test", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "\n", "device", ",", "\n", "num_workers", ",", "\n", "args", ",", "\n", "config", ",", "\n", "eval_params", ")", ":", "\n", "\n", "# Device config", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.TensorFlow.inference.Test.__call__": [[51, 165], ["inference.Test.DataLoader_obj", "tensorflow.saved_model.LoadOptions", "os.path.join", "util.utils.restore_last_model", "inference.Test.items", "inference.Test.items", "numpy.array().ravel", "numpy.array().ravel", "numpy.array().ravel", "numpy.array().ravel", "pandas.DataFrame().to_csv", "numpy.unique", "numpy.array().ravel", "numpy.mean", "print", "DSs.items", "print", "DSs.items", "numpy.savez", "os.path.join", "print", "int", "os.path.join", "DS.batch", "numpy.array().ravel.append", "numpy.array().ravel.append", "numpy.array().ravel.append", "numpy.array().ravel.append", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "pandas.DataFrame", "os.path.join", "numpy.array", "os.path.exists", "os.makedirs", "float", "time.time", "util.utils.restore_last_model.predict", "numpy.array().ravel.append", "tensorflow.identity", "os.path.split", "img_name_tmp.append", "sigma_tmp.append", "util.utils.boolean_string", "numpy.squeeze().astype", "numpy.squeeze().astype", "utils.restore_last_model.metrics.MetricEval.psnr", "psnr.append", "utils.restore_last_model.metrics.MetricEval.ssim", "ssim.append", "tensorflow.print", "time.time", "inference.TFstring2str", "os.path.join", "tensorflow.keras.preprocessing.image.save_img", "os.path.join", "tensorflow.keras.preprocessing.image.save_img", "os.path.join", "tensorflow.keras.preprocessing.image.save_img", "model.metrics.MetricEval.psnr.astype", "model.metrics.MetricEval.ssim.astype", "distortion_name.split", "numpy.squeeze", "numpy.squeeze", "pathlib.Path", "y.numpy", "tensorflow.identity.numpy", "model.metrics.MetricEval.psnr.astype", "model.metrics.MetricEval.ssim.astype"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.util.utils.restore_last_model", "home.repos.pwc.inspect_result.mogvision_adl.util.utils.boolean_string", "home.repos.pwc.inspect_result.mogvision_adl.model.metrics.MetricEval.psnr", "home.repos.pwc.inspect_result.mogvision_adl.model.metrics.MetricEval.ssim", "home.repos.pwc.inspect_result.mogvision_adl.TensorFlow.inference.TFstring2str"], ["        ", "self", ".", "args", "=", "args", "\n", "self", ".", "args", ".", "save_images", "=", "util", ".", "boolean_string", "(", "self", ".", "args", ".", "save_images", ")", "\n", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "config", "=", "config", "[", "'data'", "]", "\n", "self", ".", "num_workers", "=", "num_workers", "\n", "self", ".", "eval_params", "=", "eval_params", "\n", "self", ".", "sigma", "=", "config", "[", "'data'", "]", "[", "'test_stdVec'", "]", "[", "0", "]", "\n", "\n", "\n", "", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "load_save_device", "=", "self", ".", "config", "[", "'localhost'", "]", "if", "self", ".", "config", "[", "'localhost'", "]", "is", "not", "None", "else", "None", "\n", "\n", "output_dir", "=", "util", ".", "makedirs_fn", "(", "root_dir", ",", "self", ".", "args", ".", "EXPERIMENT", ",", "'results'", ",", "str", "(", "int", "(", "self", ".", "sigma", ")", ")", ")", "\n", "\n", "# Load model =============", "\n", "ckpt_dir", "=", "f'{root_dir}/{self.args.EXPERIMENT}/ADL/checkpoints'", "\n", "model_name", "=", "'efficient_Unet'", "\n", "model", "=", "util", ".", "get_model", "(", "model_name", ",", "self", ".", "args", ".", "CHANNELS_NUM", ",", "self", ".", "args", ".", "CHANNELS_NUM", ",", "ckpt_dir", ",", "device", ")", "\n", "\n", "\n", "# Load Data =============", "\n", "dataLoader_obj", "=", "DataLoader_cls", "(", "num_workers", "=", "self", ".", "num_workers", ",", "\n", "channels_num", "=", "self", ".", "args", ".", "CHANNELS_NUM", ",", "\n", "test_ds_dir", "=", "self", ".", "args", ".", "test_dirs", ",", "\n", "config", "=", "self", ".", "config", "\n", ")", "\n", "ds_test_loader", "=", "dataLoader_obj", "(", ")", "\n", "\n", "\n", "# apply model and get results", "\n", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "batch_i", "in", "enumerate", "(", "ds_test_loader", ")", ":", "\n", "                ", "extension", "=", "os", ".", "path", ".", "splitext", "(", "batch_i", "[", "'filename'", "]", "[", "0", "]", ")", "[", "1", "]", "\n", "file_", "=", "batch_i", "[", "'filename'", "]", "[", "0", "]", ".", "split", "(", "extension", ")", "[", "0", "]", "\n", "out_filename", "=", "f'ADL_sigma_{int(self.sigma)}_{file_}{extension}'", "\n", "#file_=batch_i['dir'][0]+batch_i['filename'][0]", "\n", "\n", "# prediction", "\n", "gt", "=", "batch_i", "[", "'x'", "]", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "inp", "=", "batch_i", "[", "'y'", "]", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "\n", "ypred", ",", "_", ",", "_", "=", "model", "(", "inp", ")", "\n", "print", "(", "torch", ".", "min", "(", "ypred", ")", ",", "torch", ".", "max", "(", "ypred", ")", ")", "\n", "\n", "if", "self", ".", "args", ".", "save_images", ":", "\n", "                    ", "filename", "=", "file_", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "out_dir", "=", "util", ".", "makedirs_fn", "(", "output_dir", ",", "'/'", ".", "join", "(", "file_", ".", "split", "(", "'/'", ")", "[", "0", ":", "-", "1", "]", ")", ")", "\n", "save_image", "(", "inp", ",", "f'{out_dir}/{filename}_inp.png'", ")", "\n", "save_image", "(", "ypred", ",", "f'{out_dir}/{filename}_pred.png'", ")", "\n", "save_image", "(", "gt", ",", "f'{out_dir}/{filename}_gt.png'", ")", "\n", "\n", "\n", "# evaluation", "\n", "", "print", "(", "out_filename", ")", "\n", "for", "key", ",", "fn", "in", "self", ".", "eval_params", ".", "items", "(", ")", ":", "\n", "                    ", "val", "=", "fn", "(", "gt", ",", "ypred", ")", "\n", "print", "(", "f'{key}: {val:.3f}'", ")", "\n", "", "print", "(", ")", "\n", "\n", "\n", "\n", "", "", "", "", "if", "__name__", "==", "'__main__'", ":", "\n", "\n", "# Read configuration file =============", "\n", "    ", "config", "=", "util", ".", "read_config", "(", "args", ".", "json_file", ")", "\n", "[", "print", "(", "key", ",", "item", ")", "for", "key", ",", "item", "in", "config", ".", "items", "(", ")", "]", "\n", "\n", "eval_params", "=", "{", "\n", "'psnr'", ":", "MetricEval", ".", "psnr", ",", "\n", "#'ssim': None", "\n", "}", "\n", "\n", "\n", "print", "(", "f\"Let's start training the model\"", ",", "\".\"", "*", "3", ")", "\n", "Test", "=", "Test", "(", "device", "=", "device", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "args", "=", "args", ",", "\n", "config", "=", "config", ",", "\n", "eval_params", "=", "eval_params", ")", "\n", "\n", "\n", "ticks", "=", "time", ".", "time", "(", ")", "\n", "Test", "(", ")", "\n", "elapsed_time", "=", "time", ".", "time", "(", ")", "-", "ticks", "\n", "print", "(", "f\"[i] Test took hh:mm:ss->{str(datetime.timedelta(seconds=elapsed_time))} (hh:mm:ss).\"", ")", "\n", "print", "(", "'Done!'", ")", "", "", ""]], "home.repos.pwc.inspect_result.mogvision_adl.TensorFlow.inference.TFstring2str": [[28, 30], ["str().split", "str", "TFstring.numpy"], "function", ["None"], ["\n", "root_dir", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.TensorFlow.train.Train.__init__": [[52, 107], ["util.utils.boolean_string", "train.struct_cls", "struct_cls.config.update", "util.utils.makedirs_fn", "util.utils.makedirs_fn", "train.struct_cls", "struct_cls.config.update", "util.utils.makedirs_fn", "util.utils.makedirs_fn", "train.struct_cls", "struct_cls.config.update", "util.utils.makedirs_fn", "util.utils.makedirs_fn", "util.utils.makedirs_fn"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.util.utils.boolean_string", "home.repos.pwc.inspect_result.mogvision_adl.util.utils.makedirs_fn", "home.repos.pwc.inspect_result.mogvision_adl.util.utils.makedirs_fn", "home.repos.pwc.inspect_result.mogvision_adl.util.utils.makedirs_fn", "home.repos.pwc.inspect_result.mogvision_adl.util.utils.makedirs_fn", "home.repos.pwc.inspect_result.mogvision_adl.util.utils.makedirs_fn", "home.repos.pwc.inspect_result.mogvision_adl.util.utils.makedirs_fn", "home.repos.pwc.inspect_result.mogvision_adl.util.utils.makedirs_fn"], ["class", "Train", "(", "object", ")", ":", "\n", "\t", "def", "__init__", "(", "self", ",", "\n", "args", ":", "ArgumentParser", ",", "\n", "config", ":", "Dict", ",", "\n", "loss_denoiser", ":", "Dict", ",", "\n", "eval_params_denoiser", ":", "Dict", ",", "\n", "loss_weights_denoiser", ":", "Dict", ",", "\n", "gpus", ":", "int", ")", ":", "\n", "\t\t", "self", ".", "args", "=", "args", "\n", "self", ".", "config_data", "=", "config", "[", "'data'", "]", "\n", "self", ".", "gpus", "=", "gpus", "\n", "\n", "# Configure DistributedDataParallel (DDP) ", "\n", "ddp", "=", "util", ".", "struct_cls", "(", ")", "\n", "ddp", ".", "rank", "=", "0", "\n", "ddp", ".", "world_size", "=", "1", "\n", "self", ".", "ddp", "=", "ddp", "\n", "\n", "# Denoiser", "\n", "denoiser", "=", "util", ".", "struct_cls", "(", ")", "\n", "denoiser", ".", "loss", "=", "loss_denoiser", "\n", "denoiser", ".", "loss_weights", "=", "loss_weights_denoiser", "\n", "denoiser", ".", "eval_params", "=", "eval_params_denoiser", "\n", "denoiser", ".", "config", "=", "config", "[", "'denoiser'", "]", "\n", "denoiser", ".", "config", ".", "update", "(", "config", "[", "'STEPS'", "]", ")", "\n", "denoiser", ".", "model", "=", "args", ".", "DENOISER", "\n", "self", ".", "denoiser", "=", "denoiser", "\n", "\n", "\n", "# Discriminator", "\n", "disc", "=", "util", ".", "struct_cls", "(", ")", "\n", "disc", ".", "config", "=", "config", "[", "'discriminator'", "]", "\n", "disc", ".", "config", ".", "update", "(", "config", "[", "'STEPS'", "]", ")", "\n", "disc", ".", "model", "=", "disc", ".", "config", "[", "'model'", "]", "\n", "self", ".", "disc", "=", "disc", "\n", "\n", "# ADL", "\n", "adl", "=", "util", ".", "struct_cls", "(", ")", "\n", "adl", ".", "model", "=", "config", "[", "'model'", "]", "\n", "adl", ".", "config", "=", "config", "[", "'ADL'", "]", "\n", "adl", ".", "config", ".", "update", "(", "config", "[", "'STEPS'", "]", ")", "\n", "self", ".", "adl", "=", "adl", "\n", "\n", "\n", "", "def", "__call__", "(", "self", ",", "PHASE", ")", ":", "\n", "\n", "\t\t", "if", "PHASE", "==", "1", ":", "\n", "# get denoiser`s params", "\n", "\t\t\t", "params", "=", "util", ".", "prep", "(", "self", ".", "denoiser", ",", "'denoiser'", ",", "dir_path", ",", "args", ".", "EXPERIMENT", ")", "\n", "\n", "", "elif", "PHASE", "==", "2", ":", "\n", "# get discriminator`s params", "\n", "\t\t\t", "params", "=", "util", ".", "prep", "(", "self", ".", "disc", ",", "'discriminator'", ",", "dir_path", ",", "args", ".", "EXPERIMENT", ")", "\n", "\n", "", "elif", "PHASE", "==", "3", ":", "\n", "# get ADL`s params", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.TensorFlow.train.Train.__call__": [[109, 166], ["util.DataLoader.DataLoader", "util.DataLoader.DataLoader.", "model.denoiser_trainer.Denoiser_Trainer", "model.denoiser_trainer.Denoiser_Trainer.", "model.discriminator_trainer.Discriminator_Trainer", "model.discriminator_trainer.Discriminator_Trainer.", "model.adl_trainer.ADL_Trainer", "model.adl_trainer.ADL_Trainer.", "util.utils.rmtree_dirs", "util.utils.rmtree_dirs", "util.utils.check_ds", "util.utils.check_ds", "util.utils.check_ds"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.util.utils.rmtree_dirs", "home.repos.pwc.inspect_result.mogvision_adl.util.utils.rmtree_dirs", "home.repos.pwc.inspect_result.mogvision_adl.util.utils.check_ds", "home.repos.pwc.inspect_result.mogvision_adl.util.utils.check_ds", "home.repos.pwc.inspect_result.mogvision_adl.util.utils.check_ds"], ["params", ".", "denoiser", "=", "util", ".", "prep", "(", "self", ".", "denoiser", ",", "'denoiser'", ",", "dir_path", ",", "args", ".", "EXPERIMENT", ")", "\n", "params", ".", "disc", "=", "util", ".", "prep", "(", "self", ".", "disc", ",", "'discriminator'", ",", "dir_path", ",", "args", ".", "EXPERIMENT", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "distributed", ":", "\n", "\t\t\t", "world_size", "=", "self", ".", "ddp", ".", "world_size", "*", "self", ".", "gpus", "\n", "mp", ".", "spawn", "(", "main_dist", ",", "\n", "args", "=", "(", "world_size", ",", "self", ".", "args", ",", "self", ".", "config_data", ",", "\n", "self", ".", "ddp", ",", "params", ",", "PHASE", ")", ",", "\n", "nprocs", "=", "world_size", ",", "\n", "join", "=", "True", "\n", ")", "\n", "", "else", ":", "\n", "\t\t\t", "main", "(", "self", ".", "args", ",", "self", ".", "config_data", ",", "params", ",", "PHASE", ")", "\n", "\n", "\n", "\n", "\n", "\n", "", "", "", "def", "main", "(", "args", ",", "config_data", ",", "params", ",", "PHASE", ")", ":", "\n", "\t", "\"\"\" single gpu trainer\"\"\"", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "print", "(", "\"Using {} for training\"", ".", "format", "(", "device", ")", ")", "\n", "\n", "# Load Data =============", "\n", "dataLoader_obj", "=", "DataLoader_cls", "(", "batch_size", "=", "int", "(", "config_data", "[", "'batch_size'", "]", ")", ",", "\n", "num_workers", "=", "int", "(", "args", ".", "num_workers", ")", ",", "\n", "channels_num", "=", "args", ".", "CHANNELS_NUM", ",", "\n", "train_ds_dir", "=", "args", ".", "train_dirs", ",", "\n", "test_ds_dir", "=", "args", ".", "test_dirs", ",", "\n", "config", "=", "config_data", ",", "\n", "distributed", "=", "False", ")", "\n", "ds_train_loader", ",", "ds_valid_loader", ",", "ds_test_loader", "=", "dataLoader_obj", "(", ")", "\n", "print", "(", "'Train size: {} batches\\nVal size: {} batches \\nTest size: {} batches'", ".", "format", "(", "len", "(", "ds_train_loader", ")", ",", "\n", "len", "(", "ds_valid_loader", ")", ",", "len", "(", "ds_test_loader", ")", ")", ")", "\n", "\n", "if", "Debug", ":", "\n", "\t\t", "for", "mode", ",", "ds", "in", "zip", "(", "[", "'train'", ",", "'val'", ",", "'test'", "]", ",", "[", "ds_train_loader", ",", "ds_valid_loader", ",", "ds_test_loader", "]", ")", ":", "\n", "\t\t\t", "for", "batch_idx", ",", "data", "in", "enumerate", "(", "ds", ",", "0", ")", ":", "\n", "\t\t\t\t", "print", "(", "'{}: {}-gpu: {}>>> {}, {}, [{:0.3f},{:0.3f}]'", ".", "format", "(", "mode", ",", "batch_idx", ",", "device", ",", "\n", "data", "[", "'filename'", "]", ",", "data", "[", "'x'", "]", ".", "size", "(", ")", ",", "torch", ".", "min", "(", "data", "[", "'y'", "]", ")", ",", "torch", ".", "max", "(", "data", "[", "'y'", "]", ")", ")", ")", "\n", "", "", "return", "\n", "\n", "\n", "# create writer =============", "\n", "", "writer_numerical", "=", "SummaryWriter", "(", "params", ".", "writer_numerical_dir", ")", "\n", "writer_imgs", "=", "SummaryWriter", "(", "params", ".", "writer_imgs_dir", ")", "\n", "\n", "if", "PHASE", "==", "1", ":", "\n", "# Warmup denoiser =============", "\n", "\t\t", "denoiser_module", "=", "Denoiser_Trainer", "(", "params", ",", "device", ",", "\n", "args", ".", "CHANNELS_NUM", ",", "args", ".", "CHANNELS_NUM", ",", "\n", "writer_numerical", ",", "writer_imgs", ",", "distributed", "=", "False", ")", "\n", "denoiser_module", "(", "ds_train_loader", ",", "ds_valid_loader", ",", "ds_test_loader", ")", "\n", "", "elif", "PHASE", "==", "2", ":", "\n", "# Warmup discriminator =============", "\n", "\t\t", "discriminator_module", "=", "Discriminator_Trainer", "(", "params", ",", "device", ",", "\n", "args", ".", "CHANNELS_NUM", ",", "args", ".", "CHANNELS_NUM", ",", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader.DataLoader.__init__": [[34, 86], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader_test.DataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "strategy", ",", "\n", "gpus_num", ":", "int", ",", "\n", "channels_num", ":", "int", ",", "\n", "config", ":", "str", ",", "\n", "train_ds_dir", ":", "str", ",", "\n", "test_ds_dir", ":", "str", ",", "\n", "debug", ":", "bool", "\n", ")", "->", "Dict", "[", "str", ",", "tf", ".", "data", ".", "Dataset", "]", ":", "\n", "\n", "        ", "super", "(", "DataLoader", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "strategy", "=", "strategy", "\n", "self", ".", "gpus_num", "=", "gpus_num", "\n", "self", ".", "debug", "=", "debug", "\n", "\n", "self", ".", "conf_train", "=", "config", "[", "'train_ds'", "]", "\n", "self", ".", "conf_test", "=", "config", "[", "'test_ds'", "]", "\n", "\n", "# datasets specification", "\n", "self", ".", "shuffle", "=", "config", "[", "'shuffle'", "]", "\n", "self", ".", "bs", "=", "config", "[", "'batch_size_per_gpu'", "]", "\n", "\n", "self", ".", "WH", "=", "[", "config", "[", "'W'", "]", ",", "config", "[", "'H'", "]", "]", "\n", "self", ".", "channels_num", "=", "channels_num", "\n", "\n", "# configure TRAIN", "\n", "self", ".", "train_ds_dir", "=", "train_ds_dir", "\n", "self", ".", "gt_noisy", "=", "config", "[", "'gt_noisy'", "]", "\n", "self", ".", "adding_noise", "=", "config", "[", "'adding_noise'", "]", "\n", "self", ".", "adding_blur", "=", "config", "[", "'adding_blur'", "]", "\n", "self", ".", "compression", "=", "config", "[", "'compression'", "]", "\n", "self", ".", "train_std_interval", "=", "config", "[", "\"train_std_interval\"", "]", "\n", "self", ".", "train_blur_interval", "=", "config", "[", "\"train_blur_interval\"", "]", "\n", "self", ".", "train_compres_interval", "=", "config", "[", "\"train_compres_interval\"", "]", "\n", "self", ".", "validation_std_interval", "=", "config", "[", "\"validation_std_interval\"", "]", "\n", "\n", "# configure TEST ", "\n", "self", ".", "test_ds_dir", "=", "test_ds_dir", "\n", "if", "self", ".", "adding_noise", ":", "\n", "            ", "self", ".", "test_stdVec", "=", "config", "[", "\"test_stdVec\"", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "test_stdVec", "=", "[", "0.0", "]", "\n", "\n", "", "if", "self", ".", "adding_blur", ":", "\n", "            ", "self", ".", "test_blurVec", "=", "config", "[", "\"test_blurVec\"", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "test_blurVec", "=", "[", "0.0", "]", "\n", "\n", "", "if", "self", ".", "compression", ":", "\n", "            ", "self", ".", "test_compresVec", "=", "config", "[", "\"test_compresVec\"", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "test_compresVec", "=", "[", "0.0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader.DataLoader.__call__": [[89, 125], ["tensorflow.print", "DataLoader.DataLoader.get_train_val_ds", "DataLoader.DataLoader.get_test_ds", "DataLoader.DataLoader.strategy.distribute_datasets_from_function", "DataLoader.DataLoader.strategy.distribute_datasets_from_function", "DataLoader.DataLoader.strategy.distribute_datasets_from_function", "steps_per_epoch.update", "steps_per_epoch.update", "steps_per_epoch.update", "tensorflow.print", "tensorflow.print", "tensorflow.print", "tensorflow.print", "ValueError", "DataLoader.DataLoader.prepare_ds", "DataLoader.DataLoader.prepare_ds", "DataLoader.DataLoader.prepare_test_ds"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader.DataLoader.get_train_val_ds", "home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader.DataLoader.get_test_ds", "home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader.DataLoader.prepare_ds", "home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader.DataLoader.prepare_ds", "home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader.DataLoader.prepare_test_ds"], ["", "", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "tf", ".", "print", "(", "\"[i] Loading data...\"", ")", "\n", "\n", "try", ":", "\n", "# Get image list", "\n", "            ", "ds_train", ",", "ds_val", ",", "num_train", ",", "num_val", "=", "self", ".", "get_train_val_ds", "(", ")", "\n", "ds_test", ",", "num_test", "=", "self", ".", "get_test_ds", "(", ")", "\n", "\n", "# Mirror data by distribute_datasets (xgpus)", "\n", "Mirrored_ds_train", "=", "self", ".", "strategy", ".", "distribute_datasets_from_function", "(", "\n", "lambda", "_", ":", "self", ".", "prepare_ds", "(", "ds_train", ",", "'training'", ")", ")", "\n", "\n", "Mirrored_ds_val", "=", "self", ".", "strategy", ".", "distribute_datasets_from_function", "(", "\n", "lambda", "_", ":", "self", ".", "prepare_ds", "(", "ds_val", ",", "'validation'", ")", ")", "\n", "\n", "\n", "Mirrored_ds_test", "=", "self", ".", "strategy", ".", "distribute_datasets_from_function", "(", "\n", "lambda", "_", ":", "self", ".", "prepare_test_ds", "(", "ds_test", ")", ")", "\n", "\n", "# Calculate the batch size after applying distribute_datasets", "\n", "steps_per_epoch", "=", "{", "}", "\n", "\n", "steps_per_epoch", ".", "update", "(", "{", "'TRAIN'", ":", "num_train", "//", "self", ".", "bs", "}", ")", "\n", "steps_per_epoch", ".", "update", "(", "{", "'VAL'", ":", "num_val", "//", "self", ".", "bs", "}", ")", "\n", "steps_per_epoch", ".", "update", "(", "{", "'TEST'", ":", "num_test", "//", "self", ".", "bs", "}", ")", "\n", "\n", "tf", ".", "print", "(", "f\"\\t[+] Train includes {num_train} images with {steps_per_epoch['TRAIN']} batches for being processed by {self.gpus_num} gpus.\"", ")", "\n", "tf", ".", "print", "(", "f\"\\t[+] Validation includes {num_val} images with {steps_per_epoch['VAL']} batches for being processed by {self.gpus_num} gpus.\"", ")", "\n", "tf", ".", "print", "(", "f\"\\t[+] Test includes {num_test} images with {steps_per_epoch['TEST']} batches for being processed by {self.gpus_num} gpus.\"", ")", "\n", "\n", "if", "self", ".", "gpus_num", ">", "1", ":", "\n", "                ", "tf", ".", "print", "(", "f'\\tWarning! drop_remainder for training/validation is `True`!'", ")", "\n", "", "return", "Mirrored_ds_train", ",", "Mirrored_ds_val", ",", "Mirrored_ds_test", ",", "steps_per_epoch", "\n", "\n", "", "except", "MemoryError", ":", "\n", "            ", "raise", "ValueError", "(", "\"Warning! There is not enough memory for loading data!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader.DataLoader.get_train_val_ds": [[132, 147], ["DataLoader.DataLoader._get_images", "int", "file_list_ds.take", "file_list_ds.skip"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader.DataLoader._get_images"], ["", "", "def", "get_train_val_ds", "(", "self", ")", ":", "\n", "        ", "MAX_VAL_IMGS", "=", "self", ".", "conf_train", "[", "'num_val_max'", "]", "\n", "\n", "file_list_ds", ",", "ds_size", "=", "self", ".", "_get_images", "(", "self", ".", "train_ds_dir", ",", "\n", "self", ".", "conf_train", "[", "'img_types'", "]", ",", "\n", "self", ".", "conf_train", "[", "'num_sel_imgs'", "]", ",", "\n", "self", ".", "shuffle", ")", "\n", "\n", "num_val", "=", "int", "(", "(", "1.", "-", "self", ".", "conf_train", "[", "'train_val_ratio'", "]", ")", "*", "ds_size", ")", "\n", "num_val", "=", "MAX_VAL_IMGS", "if", "num_val", ">", "MAX_VAL_IMGS", "else", "num_val", "\n", "\n", "num_train", "=", "ds_size", "-", "num_val", "\n", "ds_train", "=", "file_list_ds", ".", "take", "(", "num_train", ")", "\n", "ds_val", "=", "file_list_ds", ".", "skip", "(", "num_train", ")", "\n", "return", "ds_train", ",", "ds_val", ",", "num_train", ",", "num_val", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader.DataLoader.prepare_ds": [[149, 171], ["ds.map.map.map", "DataLoader.DataLoader._train_distortion_adder_fn", "DS.batch.batch.batch", "tensorflow.py_function"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader.DataLoader._train_distortion_adder_fn"], ["", "def", "prepare_ds", "(", "self", ",", "ds", ",", "status", ")", ":", "\n", "# take train dataset", "\n", "        ", "ds", "=", "ds", ".", "map", "(", "lambda", "x", ":", "tf", ".", "py_function", "(", "\n", "func", "=", "_get_paired_image_fn", ",", "\n", "inp", "=", "[", "x", ",", "self", ".", "WH", ",", "self", ".", "channels_num", ",", "self", ".", "gt_noisy", ",", "\"Training_Valid\"", ",", "self", ".", "debug", "]", ",", "\n", "Tout", "=", "(", "tf", ".", "float32", ",", "tf", ".", "float32", ")", "\n", ")", ",", "\n", "num_parallel_calls", "=", "tf", ".", "data", ".", "AUTOTUNE", ",", "\n", "deterministic", "=", "False", ")", "\n", "\n", "# add noise to the train dataset", "\n", "DS", "=", "self", ".", "_train_distortion_adder_fn", "(", "ds", ",", "\n", "self", ".", "gt_noisy", ",", "\n", "self", ".", "adding_noise", ",", "\n", "self", ".", "adding_blur", ",", "\n", "self", ".", "compression", ",", "\n", "status", ")", "\n", "\n", "# create batch files", "\n", "DS", "=", "DS", ".", "batch", "(", "self", ".", "bs", ",", "drop_remainder", "=", "True", ")", "\n", "\n", "return", "DS", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader.DataLoader.get_test_ds": [[174, 182], ["DataLoader.DataLoader._get_images", "file_list_ds.take"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader.DataLoader._get_images"], ["", "def", "get_test_ds", "(", "self", ")", ":", "\n", "# get images", "\n", "        ", "file_list_ds", ",", "ds_size", "=", "self", ".", "_get_images", "(", "self", ".", "test_ds_dir", ",", "\n", "self", ".", "conf_test", "[", "'img_types'", "]", ",", "\n", "self", ".", "conf_test", "[", "'num_sel_imgs'", "]", "\n", ")", "\n", "ds_test", "=", "file_list_ds", ".", "take", "(", "ds_size", ")", "\n", "return", "ds_test", ",", "ds_size", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader.DataLoader.prepare_test_ds": [[185, 209], ["ds.map.map.map", "DataLoader.DataLoader._train_distortion_adder_fn", "DS.batch.batch.batch", "tensorflow.py_function"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader.DataLoader._train_distortion_adder_fn"], ["", "def", "prepare_test_ds", "(", "self", ",", "ds", ")", ":", "\n", "# take test dataset", "\n", "        ", "ds", "=", "ds", ".", "map", "(", "\n", "lambda", "x", ":", "tf", ".", "py_function", "(", "\n", "func", "=", "_get_paired_image_fn", ",", "\n", "inp", "=", "[", "x", ",", "self", ".", "WH", ",", "self", ".", "channels_num", ",", "self", ".", "gt_noisy", ",", "'TEST'", ",", "self", ".", "debug", "]", ",", "\n", "Tout", "=", "(", "tf", ".", "float32", ",", "tf", ".", "float32", ")", "\n", ")", ",", "\n", "num_parallel_calls", "=", "tf", ".", "data", ".", "AUTOTUNE", ",", "\n", "deterministic", "=", "False", "\n", ")", "\n", "\n", "DS", "=", "self", ".", "_train_distortion_adder_fn", "(", "ds", ",", "\n", "self", ".", "gt_noisy", ",", "\n", "self", ".", "adding_noise", ",", "\n", "self", ".", "adding_blur", ",", "\n", "self", ".", "compression", ",", "\n", "status", "=", "'test_random'", ")", "\n", "\n", "\n", "# create batch files. This is just for evaluting test set in the dimension of TRAIN set.", "\n", "DS", "=", "DS", ".", "batch", "(", "self", ".", "bs", ",", "drop_remainder", "=", "True", ")", "\n", "\n", "return", "DS", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader.DataLoader._get_images": [[212, 251], ["tensorflow.data.Dataset.from_tensor_slices", "file_list_ds.shuffle.shuffle.cardinality().numpy", "os.path.join", "NameError", "len", "file_list_ds.shuffle.shuffle.shuffle", "ValueError", "tensorflow_addons.image.utils.get_dir", "os.walk", "name_.lower().endswith", "file_list_ds.shuffle.shuffle.cardinality", "tuple", "len", "name_.lower"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.util.utils.get_dir"], ["", "def", "_get_images", "(", "self", ",", "data_dirs", ",", "img_types", ",", "MAX_SAMPLES", ",", "shuffle", "=", "0", ")", ":", "\n", "        ", "\"\"\"\n        ...\n        \"\"\"", "\n", "#[print( dir_ , os.path.exists(dir_), \"*\"*25) for dir_ in utils.get_dir(data_dirs) ]", "\n", "\n", "# get files", "\n", "FILES", "=", "[", "os", ".", "path", ".", "join", "(", "path_", ",", "name_", ")", "\n", "for", "dir_", "in", "utils", ".", "get_dir", "(", "data_dirs", ")", "\n", "for", "path_", ",", "subdirs", ",", "files_", "in", "os", ".", "walk", "(", "dir_", ")", "\n", "for", "name_", "in", "files_", "\n", "if", "name_", ".", "lower", "(", ")", ".", "endswith", "(", "tuple", "(", "img_types", ")", ")", "\n", "]", "\n", "#tf.print(FILES, ' <'*20)", "\n", "\n", "if", "FILES", "is", "None", ":", "\n", "            ", "raise", "NameError", "(", "'[!] `{}` is empty!'", ".", "format", "(", "data_dir", ")", ")", "\n", "\n", "# adjust the number of images", "\n", "", "num_sel_imgs", "=", "len", "(", "FILES", ")", "if", "(", "MAX_SAMPLES", "<", "1", ")", "or", "(", "MAX_SAMPLES", ">", "len", "(", "FILES", ")", ")", "else", "MAX_SAMPLES", "\n", "\n", "# the simplest way to create a dataset is to create it from a python list:", "\n", "file_list_ds", "=", "tf", ".", "data", ".", "Dataset", ".", "from_tensor_slices", "(", "FILES", "[", ":", "num_sel_imgs", "]", ")", "\n", "\n", "\n", "# shuffle data if needed", "\n", "if", "shuffle", ">", "1", ":", "\n", "            ", "file_list_ds", "=", "file_list_ds", ".", "shuffle", "(", "shuffle", ",", "reshuffle_each_iteration", "=", "False", ")", "\n", "\n", "\n", "# get size of data", "\n", "", "ds_size", "=", "file_list_ds", ".", "cardinality", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "\n", "if", "ds_size", "<", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"The images are not recognized!\"", ")", "\n", "\n", "", "return", "file_list_ds", ",", "ds_size", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader.DataLoader._train_distortion_adder_fn": [[256, 411], ["DS.map().prefetch", "ValueError", "DataLoader.blur_filter2d", "tensorflow.cast", "tensorflow.image.random_jpeg_quality", "tensorflow.random.normal", "tensorflow.size", "tensorflow.random.uniform", "tensorflow.size", "tensorflow.random.uniform", "int", "tensorflow.size", "tensorflow.random.uniform", "tensorflow.cast", "tensorflow.shape", "DS.map", "DS.map().prefetch().batch", "DS.map().prefetch", "DS.map().prefetch().repeat", "tensorflow.py_function", "DS.map().prefetch", "DS.map", "DS.map().prefetch", "DS.map", "tensorflow.py_function", "DS.map", "tensorflow.py_function", "tensorflow.py_function"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader_test.blur_filter2d"], ["", "def", "_train_distortion_adder_fn", "(", "self", ",", "DS", ",", "\n", "gt_noisy", ":", "bool", ",", "\n", "adding_noise", ":", "bool", ",", "\n", "adding_blur", ":", "bool", ",", "\n", "adding_compression", ":", "bool", ",", "\n", "status", ":", "str", "=", "None", ")", ":", "\n", "\n", "        ", "\"\"\"Addding distortion with a random defined in the config\n        Args:\n            adding_noise: adding WGN or not\n            adding_blur: adding blur or not\n            adding_compression: Compress image or not\n\n        Returns:\n            DS\n        \"\"\"", "\n", "\n", "def", "train_adding_distortion_fn", "(", "x", ":", "tf", ".", "Tensor", ",", "gt", ":", "tf", ".", "Tensor", ",", "\n", "gt_noisy", ":", "bool", ",", "\n", "adding_noise", ":", "bool", ",", "\n", "adding_blur", ":", "bool", ",", "\n", "adding_compression", ":", "bool", ",", "\n", "stddevVec", ":", "Tuple", "[", "float", ",", "float", "]", ",", "\n", "filter_size", ":", "Tuple", "[", "int", ",", "Iterable", "[", "int", "]", "]", ",", "\n", "compressVec", ":", "int", "\n", ")", ":", "\n", "            ", "\"\"\" adding noise to each image\"\"\"", "\n", "x_distorted", "=", "x", "\n", "\n", "if", "(", "not", "gt_noisy", ")", "and", "(", "not", "adding_noise", ")", "and", "(", "not", "adding_blur", ")", "and", "(", "not", "adding_compression", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"Neither gt_noise, nor noise, nor blur, nor compression is selected!\"", ")", "\n", "\n", "\n", "", "\"\"\"\n            Adding Blur \n            \"\"\"", "\n", "if", "adding_blur", ":", "\n", "                ", "if", "tf", ".", "size", "(", "filter_size", ")", "==", "2", ":", "\n", "                    ", "filter_size", "=", "tf", ".", "random", ".", "uniform", "(", "[", "]", ",", "minval", "=", "filter_size", "[", "0", "]", ",", "maxval", "=", "filter_size", "[", "-", "1", "]", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "\n", "", "if", "filter_size", "%", "2", "==", "0", ":", "\n", "                    ", "filter_size", "-=", "1", "\n", "\n", "", "x_distorted", "=", "blur_filter2d", "(", "image", "=", "x_distorted", ",", "\n", "filter_size", "=", "(", "filter_size", ",", "filter_size", ")", ",", "\n", "padding", "=", "\"REFLECT\"", ",", "\n", "constant_values", "=", "0", ")", "\n", "\n", "", "\"\"\"\n            Jpeg compression\n            compressVec: Define the fraction of Jpeg compression\n            \"\"\"", "\n", "if", "adding_compression", ":", "\n", "# For training/validation, we consider a range of stddev between [minval, maxval]", "\n", "                ", "if", "tf", ".", "size", "(", "compressVec", ")", "==", "2", ":", "\n", "                    ", "compressVec", "=", "tf", ".", "random", ".", "uniform", "(", "[", "]", ",", "minval", "=", "compressVec", "[", "0", "]", ",", "maxval", "=", "compressVec", "[", "-", "1", "]", ")", "\n", "\n", "", "compressVec", "=", "tf", ".", "cast", "(", "int", "(", "compressVec", ")", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "\n", "x_distorted", "=", "tf", ".", "image", ".", "random_jpeg_quality", "(", "x_distorted", ",", "compressVec", ",", "compressVec", "+", "1", ")", "\n", "#label = tf.constant(LABEL_true_img) if compressVec <1 else tf.constant(LABEL_noisy_img)", "\n", "\n", "\n", "", "\"\"\"\n            Adding WGN\n            \"\"\"", "\n", "if", "adding_noise", ":", "\n", "# For training/validation, we consider a range of stddev between [minval, maxval]", "\n", "                ", "if", "tf", ".", "size", "(", "stddevVec", ")", "==", "2", ":", "\n", "                    ", "stddev", "=", "tf", ".", "random", ".", "uniform", "(", "[", "]", ",", "minval", "=", "stddevVec", "[", "0", "]", ",", "maxval", "=", "stddevVec", "[", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "                    ", "stddev", "=", "stddevVec", "\n", "\n", "", "stddev", "=", "tf", ".", "cast", "(", "stddev", ",", "dtype", "=", "tf", ".", "float32", ")", "/", "255.", "\n", "\n", "#label = tf.constant(LABEL_true_img) if stddev <1e-7 else tf.constant(LABEL_noisy_img)", "\n", "\n", "#adding_noise = tf.broadcast_to(stddev, tf.shape(x)[:2])[..., None]", "\n", "x_distorted", "+=", "tf", ".", "random", ".", "normal", "(", "tf", ".", "shape", "(", "x_distorted", ")", ",", "stddev", "=", "stddev", ",", "name", "=", "\"wgn\"", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "", "return", "x_distorted", ",", "gt", ",", "LABEL_noisy_img", "\n", "\n", "\n", "", "if", "status", "==", "'validation'", ":", "\n", "            ", "return", "DS", ".", "map", "(", "lambda", "x", ",", "y", ":", "tf", ".", "py_function", "(", "\n", "func", "=", "train_adding_distortion_fn", ",", "\n", "inp", "=", "[", "x", ",", "y", ",", "\n", "gt_noisy", ",", "\n", "adding_noise", ",", "\n", "adding_blur", ",", "\n", "adding_compression", ",", "\n", "self", ".", "train_std_interval", ",", "\n", "self", ".", "train_blur_interval", ",", "\n", "self", ".", "train_compres_interval", "]", ",", "\n", "Tout", "=", "(", "tf", ".", "float32", ",", "tf", ".", "float32", ",", "tf", ".", "float32", ")", "\n", ")", ",", "\n", "num_parallel_calls", "=", "tf", ".", "data", ".", "AUTOTUNE", ",", "\n", "deterministic", "=", "False", "\n", ")", ".", "prefetch", "(", "tf", ".", "data", ".", "AUTOTUNE", ")", "\n", "", "elif", "status", "==", "'test'", ":", "\n", "            ", "return", "{", "f'y_gibbs_{keep_fraction_i}_wgn_{stddev_i}'", ":", "DS", ".", "map", "(", "\n", "lambda", "x", ",", "y", ":", "tf", ".", "py_function", "(", "\n", "func", "=", "train_adding_distortion_fn", ",", "\n", "inp", "=", "[", "x", ",", "y", ",", "\n", "gt_noisy", ",", "\n", "adding_noise", ",", "\n", "adding_blur", ",", "\n", "adding_compression", ",", "\n", "stddev_i", ",", "\n", "keep_fraction_i", ",", "\n", "compressVec_i", "]", ",", "\n", "Tout", "=", "(", "tf", ".", "float32", ",", "tf", ".", "float32", ",", "tf", ".", "float32", ")", "\n", ")", ",", "\n", "num_parallel_calls", "=", "tf", ".", "data", ".", "AUTOTUNE", ",", "\n", "deterministic", "=", "False", ")", ".", "prefetch", "(", "tf", ".", "data", ".", "AUTOTUNE", ")", ".", "batch", "(", "1", ")", "\n", "for", "stddev_i", "in", "self", ".", "test_stdVec", "\n", "for", "keep_fraction_i", "in", "self", ".", "test_blurVec", "\n", "for", "compressVec_i", "in", "self", ".", "test_compresVec", "\n", "}", "\n", "\n", "", "elif", "status", "==", "'test_random'", ":", "\n", "            ", "return", "DS", ".", "map", "(", "lambda", "x", ",", "y", ":", "tf", ".", "py_function", "(", "\n", "func", "=", "train_adding_distortion_fn", ",", "\n", "inp", "=", "[", "x", ",", "y", ",", "\n", "gt_noisy", ",", "\n", "adding_noise", ",", "\n", "adding_blur", ",", "\n", "adding_compression", ",", "\n", "self", ".", "validation_std_interval", ",", "\n", "self", ".", "train_blur_interval", ",", "\n", "self", ".", "train_compres_interval", "]", ",", "\n", "Tout", "=", "(", "tf", ".", "float32", ",", "tf", ".", "float32", ",", "tf", ".", "float32", ")", "\n", ")", ",", "\n", "num_parallel_calls", "=", "tf", ".", "data", ".", "AUTOTUNE", ",", "\n", "deterministic", "=", "False", ")", ".", "prefetch", "(", "tf", ".", "data", ".", "AUTOTUNE", ")", "\n", "\n", "", "elif", "status", "==", "'training'", ":", "\n", "            ", "return", "DS", ".", "map", "(", "lambda", "x", ",", "y", ":", "tf", ".", "py_function", "(", "\n", "func", "=", "train_adding_distortion_fn", ",", "\n", "inp", "=", "[", "x", ",", "y", ",", "\n", "gt_noisy", ",", "\n", "adding_noise", ",", "\n", "adding_blur", ",", "\n", "adding_compression", ",", "\n", "self", ".", "train_std_interval", ",", "\n", "self", ".", "train_blur_interval", ",", "\n", "self", ".", "train_compres_interval", "]", ",", "\n", "Tout", "=", "(", "tf", ".", "float32", ",", "tf", ".", "float32", ",", "tf", ".", "float32", ")", "\n", ")", ",", "\n", "num_parallel_calls", "=", "tf", ".", "data", ".", "AUTOTUNE", ",", "\n", "deterministic", "=", "False", ")", ".", "prefetch", "(", "tf", ".", "data", ".", "AUTOTUNE", ")", ".", "repeat", "(", "self", ".", "conf_train", "[", "'repeats'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader._resize_or_crop_fn": [[419, 450], ["tensorflow.image.resize", "int", "DataLoader._resize_or_crop_fn._apply_crop"], "function", ["None"], ["", "", "", "def", "_resize_or_crop_fn", "(", "img", ",", "WH", ",", "channels_num", ",", "resize_crop_ratio", "=", "0.5", ")", ":", "\n", "    ", "def", "_apply_crop", "(", "img", ",", "w", ",", "h", ")", ":", "\n", "        ", "if", "len", "(", "img", ".", "get_shape", "(", ")", ")", ">", "2", ":", "\n", "            ", "return", "tf", ".", "image", ".", "random_crop", "(", "value", "=", "img", ",", "\n", "size", "=", "(", "h", ",", "w", ",", "img", ".", "get_shape", "(", ")", "[", "2", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "tf", ".", "image", ".", "random_crop", "(", "value", "=", "img", ",", "size", "=", "(", "h", ",", "w", ")", ")", "\n", "\n", "", "", "def", "_apply_resize", "(", "img", ",", "w", ",", "h", ")", ":", "\n", "        ", "return", "tf", ".", "image", ".", "resize", "(", "images", "=", "img", ",", "size", "=", "[", "h", ",", "w", "]", ")", "\n", "\n", "", "w", ",", "h", "=", "WH", "\n", "\n", "if", "h", "<=", "int", "(", "resize_crop_ratio", "*", "img", ".", "get_shape", "(", ")", "[", "0", "]", ")", ":", "\n", "        ", "img", "=", "_apply_crop", "(", "img", ",", "img", ".", "get_shape", "(", ")", "[", "1", "]", ",", "h", ")", "\n", "", "elif", "h", "<", "img", ".", "get_shape", "(", ")", "[", "0", "]", "and", "h", ">", "int", "(", "resize_crop_ratio", "*", "img", ".", "get_shape", "(", ")", "[", "0", "]", ")", ":", "\n", "        ", "img", "=", "_apply_resize", "(", "img", ",", "img", ".", "get_shape", "(", ")", "[", "1", "]", ",", "h", ")", "\n", "", "elif", "h", ">", "img", ".", "get_shape", "(", ")", "[", "0", "]", ":", "\n", "        ", "img", "=", "tf", ".", "pad", "(", "img", ",", "[", "[", "0", ",", "h", "-", "img", ".", "get_shape", "(", ")", "[", "0", "]", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "\n", "", "if", "w", "<=", "int", "(", "resize_crop_ratio", "*", "img", ".", "get_shape", "(", ")", "[", "1", "]", ")", ":", "\n", "        ", "img", "=", "_apply_crop", "(", "img", ",", "w", ",", "img", ".", "get_shape", "(", ")", "[", "0", "]", ")", "\n", "", "elif", "w", "<", "img", ".", "get_shape", "(", ")", "[", "1", "]", "and", "w", ">", "int", "(", "resize_crop_ratio", "*", "img", ".", "get_shape", "(", ")", "[", "1", "]", ")", ":", "\n", "        ", "img", "=", "_apply_resize", "(", "img", ",", "w", ",", "img", ".", "get_shape", "(", ")", "[", "0", "]", ")", "\n", "", "elif", "w", ">", "img", ".", "get_shape", "(", ")", "[", "1", "]", ":", "\n", "        ", "img", "=", "tf", ".", "pad", "(", "img", ",", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "w", "-", "img", ".", "get_shape", "(", ")", "[", "1", "]", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "\n", "", "if", "channels_num", ">", "img", ".", "get_shape", "(", ")", "[", "2", "]", ":", "\n", "        ", "img", "=", "tf", ".", "repeat", "(", "img", ",", "repeats", "=", "channels_num", ",", "axis", "=", "2", ")", "\n", "\n", "", "return", "img", "[", "...", ",", "0", ":", "channels_num", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader._data_augmentation": [[452, 457], ["tensorflow.range", "tensorflow.image.rot90", "tensorflow.range", "tensorflow.experimental.numpy.flipud", "tensorflow.image.rot90"], "function", ["None"], ["", "def", "_data_augmentation", "(", "img", ",", "opt", "=", "None", ")", ":", "\n", "    ", "if", "opt", "in", "tf", ".", "range", "(", "1", ",", "5", ")", ":", "\n", "        ", "return", "tf", ".", "image", ".", "rot90", "(", "img", ",", "k", "=", "opt", ")", "\n", "", "elif", "opt", "in", "tf", ".", "range", "(", "5", ",", "9", ")", ":", "\n", "        ", "return", "tf", ".", "experimental", ".", "numpy", ".", "flipud", "(", "tf", ".", "image", ".", "rot90", "(", "img", ",", "k", "=", "opt", "-", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader._get_paired_image_fn": [[462, 479], ["DataLoader._get_image", "tensorflow.strings.regex_replace", "DataLoader._get_image", "DataLoader._get_image"], "function", ["home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader._get_image", "home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader._get_image", "home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader._get_image"], ["", "", "def", "_get_paired_image_fn", "(", "file_path", ":", "tf", ".", "Tensor", ",", "\n", "WH", ":", "int", ",", "\n", "channels_num", ":", "int", ",", "\n", "gt_noisy", ":", "bool", ",", "\n", "mode", ":", "str", ",", "\n", "debug", ":", "bool", "\n", ")", "->", "Union", "[", "tf", ".", "Tensor", ",", "tf", ".", "Tensor", "]", ":", "\n", "\n", "    ", "if", "gt_noisy", "and", "mode", "==", "'Training_valid'", ":", "\n", "        ", "img_gt", "=", "_get_image", "(", "file_path", ",", "WH", ",", "channels_num", ",", "mode", ",", "debug", ")", "\n", "file_path", "=", "tf", ".", "strings", ".", "regex_replace", "(", "file_path", ",", "\"GT\"", ",", "\"NOISY\"", ")", "\n", "img_noisy", "=", "_get_image", "(", "file_path", ",", "WH", ",", "channels_num", ",", "mode", ",", "debug", ")", "\n", "", "else", ":", "\n", "        ", "img_noisy", "=", "_get_image", "(", "file_path", ",", "WH", ",", "channels_num", ",", "mode", ",", "debug", ")", "\n", "img_gt", "=", "img_noisy", "\n", "\n", "", "return", "img_noisy", ",", "img_gt", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader._get_image": [[485, 539], ["tensorflow.io.read_file", "tensorflow.image.convert_image_dtype", "tensorflow.random.uniform", "tensorflow.image.rgb_to_grayscale", "DataLoader._resize_or_crop_fn", "DataLoader._resize_or_crop_fn", "DataLoader._data_augmentation", "tensorflow.io.decode_jpeg", "tensorflow.print", "tf.image.decode_png.get_shape", "tensorflow.strings.split", "tensorflow.image.decode_bmp", "tensorflow.image.decode_png", "tensorflow.zeros", "tf.image.decode_png.get_shape", "tf.image.decode_png.get_shape", "tf.image.decode_png.get_shape", "tensorflow.strings.lower", "tensorflow.strings.split", "tensorflow.strings.lower"], "function", ["home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader._resize_or_crop_fn", "home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader._resize_or_crop_fn", "home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader._data_augmentation"], ["", "def", "_get_image", "(", "file_path", ":", "tf", ".", "Tensor", ",", "\n", "WH", ":", "int", ",", "\n", "channels_num", ":", "int", ",", "\n", "mode", ":", "str", ",", "\n", "debug", ":", "bool", "\n", ")", "->", "tf", ".", "Tensor", ":", "\n", "\n", "    ", "file", "=", "tf", ".", "io", ".", "read_file", "(", "file_path", ")", "\n", "\n", "try", ":", "\n", "# if the class is jpeg, use `decode_jpeg` otherwise use decode_png", "\n", "        ", "if", "tf", ".", "strings", ".", "split", "(", "tf", ".", "strings", ".", "lower", "(", "file_path", ")", ",", "sep", "=", "'.'", ")", "[", "-", "1", "]", "in", "[", "'jpeg'", ",", "'jpg'", "]", ":", "\n", "            ", "img", "=", "tf", ".", "io", ".", "decode_jpeg", "(", "file", ")", "\n", "", "elif", "tf", ".", "strings", ".", "split", "(", "tf", ".", "strings", ".", "lower", "(", "file_path", ")", ",", "sep", "=", "'.'", ")", "[", "-", "1", "]", "in", "[", "'bmp'", "]", ":", "\n", "            ", "img", "=", "tf", ".", "image", ".", "decode_bmp", "(", "file", ")", "\n", "", "else", ":", "\n", "            ", "img", "=", "tf", ".", "image", ".", "decode_png", "(", "file", ",", "dtype", "=", "tf", ".", "uint8", ")", "\n", "", "", "except", ":", "\n", "        ", "tf", ".", "print", "(", "'bad file: '", ",", "file_path", ")", "\n", "if", "debug", ":", "\n", "            ", "return", "tf", ".", "zeros", "(", "(", "WH", "[", "0", "]", ",", "WH", "[", "1", "]", ",", "channels_num", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "\n", "#tf.print(img.get_shape())", "\n", "", "", "if", "img", ".", "get_shape", "(", ")", "[", "-", "1", "]", ">", "3", ":", "\n", "        ", "img", "=", "img", "[", ":", ",", ":", ",", "0", ":", "3", "]", "\n", "\n", "# sometimes there is an error in channel conversion with decode_png or decode_jpeg", "\n", "", "if", "channels_num", "==", "1", "and", "img", ".", "get_shape", "(", ")", "[", "-", "1", "]", ">", "1", ":", "\n", "        ", "img", "=", "tf", ".", "image", ".", "rgb_to_grayscale", "(", "img", ")", "\n", "\n", "#img = tf.cond(", "\n", "#    tf.image.is_jpeg(file),", "\n", "#    lambda: tf.image.decode_jpeg(file, channels=channels_num),", "\n", "#    lambda: tf.image.decode_png(file, channels=channels_num))", "\n", "\n", "#convert unit8 tensor to floats in the [0,1]range", "\n", "", "img", "=", "tf", ".", "image", ".", "convert_image_dtype", "(", "img", ",", "tf", ".", "float32", ")", "\n", "\n", "if", "WH", "[", "0", "]", ">", "0", "and", "WH", "[", "1", "]", ">", "0", ":", "\n", "        ", "img", "=", "_resize_or_crop_fn", "(", "img", ",", "WH", ",", "channels_num", ")", "\n", "\n", "# the image dimension must be divisible to 16 for 4 scales", "\n", "", "block_sz", "=", "16", "\n", "H_", ",", "W_", "=", "img", ".", "get_shape", "(", ")", "[", "0", "]", "//", "block_sz", ",", "img", ".", "get_shape", "(", ")", "[", "1", "]", "//", "block_sz", "\n", "if", "H_", ">", "0", "and", "W_", ">", "0", ":", "\n", "        ", "img", "=", "_resize_or_crop_fn", "(", "img", ",", "[", "block_sz", "*", "W_", ",", "block_sz", "*", "H_", "]", ",", "channels_num", ")", "\n", "\n", "# augmentation is applied on squrae-shaped images only!", "\n", "", "opt", "=", "tf", ".", "random", ".", "uniform", "(", "shape", "=", "(", ")", ",", "minval", "=", "1", ",", "maxval", "=", "9", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "if", "img", ".", "shape", "[", "0", "]", "==", "img", ".", "shape", "[", "1", "]", "and", "mode", "==", "'Training_valid'", ":", "\n", "        ", "img", "=", "_data_augmentation", "(", "img", ",", "opt", ")", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader._pad": [[545, 579], ["tensorflow.convert_to_tensor", "tensorflow.pad", "mode.upper", "ValueError"], "function", ["None"], ["", "def", "_pad", "(", "\n", "image", ":", "tf", ".", "Tensor", ",", "\n", "filter_shape", ":", "Union", "[", "List", "[", "int", "]", ",", "Tuple", "[", "int", "]", "]", ",", "\n", "mode", ":", "str", "=", "\"CONSTANT\"", ",", "\n", "constant_values", ":", "tf", ".", "Tensor", "=", "0", ",", "\n", ")", "->", "tf", ".", "Tensor", ":", "\n", "    ", "\"\"\"Explicitly pad a 4-D image.\n    Equivalent to the implicit padding method offered in `tf.nn.conv2d` and\n    `tf.nn.depthwise_conv2d`, but supports non-zero, reflect and symmetric\n    padding mode. For the even-sized filter, it pads one more value to the\n    right or the bottom side.\n    Args:\n      image: A 4-D `Tensor` of shape `[batch_size, height, width, channels]`.\n      filter_shape: A `tuple`/`list` of 2 integers, specifying the height\n        and width of the 2-D filter.\n      mode: A `string`, one of \"REFLECT\", \"CONSTANT\", or \"SYMMETRIC\".\n        The type of padding algorithm to use, which is compatible with\n        `mode` argument in `tf.pad`. For more details, please refer to\n        https://www.tensorflow.org/api_docs/python/tf/pad.\n      constant_values: A `scalar`, the pad value to use in \"CONSTANT\"\n        padding mode.\n    \"\"\"", "\n", "if", "mode", ".", "upper", "(", ")", "not", "in", "{", "\"REFLECT\"", ",", "\"CONSTANT\"", ",", "\"SYMMETRIC\"", "}", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "'padding should be one of \"REFLECT\", \"CONSTANT\", or \"SYMMETRIC\".'", "\n", ")", "\n", "", "constant_values", "=", "tf", ".", "convert_to_tensor", "(", "constant_values", ",", "image", ".", "dtype", ")", "\n", "filter_height", ",", "filter_width", "=", "filter_shape", "\n", "pad_top", "=", "(", "filter_height", "-", "1", ")", "//", "2", "\n", "pad_bottom", "=", "filter_height", "-", "1", "-", "pad_top", "\n", "pad_left", "=", "(", "filter_width", "-", "1", ")", "//", "2", "\n", "pad_right", "=", "filter_width", "-", "1", "-", "pad_left", "\n", "paddings", "=", "[", "[", "0", ",", "0", "]", ",", "[", "pad_top", ",", "pad_bottom", "]", ",", "[", "pad_left", ",", "pad_right", "]", ",", "[", "0", ",", "0", "]", "]", "\n", "return", "tf", ".", "pad", "(", "image", ",", "paddings", ",", "mode", "=", "mode", ",", "constant_values", "=", "constant_values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader.blur_filter2d": [[583, 649], ["tensorflow.name_scope", "keras.utils.conv_utils.normalize_tuple", "any", "tensorflow.convert_to_tensor", "tensorflow_addons.image.utils.get_ndims", "tensorflow_addons.image.utils.to_4D_image", "tensorflow.ones", "tensorflow.reduce_sum", "tensorflow.tile", "DataLoader._pad", "tensorflow.nn.depthwise_conv2d", "tensorflow_addons.image.utils.from_4D_image", "tensorflow.cast", "ValueError", "tensorflow.cast", "tensorflow.shape"], "function", ["home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader_test._pad"], ["", "def", "blur_filter2d", "(", "\n", "image", ":", "tf", ".", "Tensor", ",", "\n", "filter_size", ":", "Union", "[", "int", ",", "Iterable", "[", "int", "]", "]", "=", "(", "3", ",", "3", ")", ",", "\n", "padding", ":", "str", "=", "\"REFLECT\"", ",", "\n", "constant_values", ":", "tf", ".", "Tensor", "=", "0", ",", "\n", "name", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", ")", "->", "tf", ".", "Tensor", ":", "\n", "    ", "\"\"\"Perform blur on image(s).\n    Args:\n      image: Either a 2-D `Tensor` of shape `[height, width]`,\n        a 3-D `Tensor` of shape `[height, width, channels]`,\n        or a 4-D `Tensor` of shape `[batch_size, height, width, channels]`.\n      filter_size: An `integer` or `tuple`/`list` of 2 integers, specifying\n        the height and width of the 2-D gaussian filter. Can be a single\n        integer to specify the same value for all spatial dimensions.\n      padding: A `string`, one of \"REFLECT\", \"CONSTANT\", or \"SYMMETRIC\".\n        The type of padding algorithm to use, which is compatible with\n        `mode` argument in `tf.pad`. For more details, please refer to\n        https://www.tensorflow.org/api_docs/python/tf/pad.\n      constant_values: A `scalar`, the pad value to use in \"CONSTANT\"\n        padding mode.\n      name: A name for this operation (optional).\n    Returns:\n      2-D, 3-D or 4-D `Tensor` of the same dtype as input.\n    Raises:\n      ValueError: If `image` is not 2, 3 or 4-dimensional,\n        if `padding` is other than \"REFLECT\", \"CONSTANT\" or \"SYMMETRIC\",\n        if `filter_size` is invalid,\n    \"\"\"", "\n", "\n", "with", "tf", ".", "name_scope", "(", "name", "or", "\"blur_filter2d\"", ")", ":", "\n", "        ", "filter_size", "=", "conv_utils", ".", "normalize_tuple", "(", "filter_size", ",", "2", ",", "\"filter_size\"", ")", "\n", "\n", "if", "any", "(", "fs", "<", "0", "for", "fs", "in", "filter_size", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"filter_size should be greater than or equal to 1\"", ")", "\n", "\n", "", "image", "=", "tf", ".", "convert_to_tensor", "(", "image", ",", "name", "=", "\"image\"", ")", "\n", "\n", "original_ndims", "=", "img_utils", ".", "get_ndims", "(", "image", ")", "\n", "image", "=", "img_utils", ".", "to_4D_image", "(", "image", ")", "\n", "\n", "\n", "# Keep the precision if it's float;", "\n", "# otherwise, convert to float32 for computing.", "\n", "orig_dtype", "=", "image", ".", "dtype", "\n", "if", "not", "image", ".", "dtype", ".", "is_floating", ":", "\n", "            ", "image", "=", "tf", ".", "cast", "(", "image", ",", "tf", ".", "float32", ")", "\n", "\n", "\n", "", "channels", "=", "tf", ".", "shape", "(", "image", ")", "[", "3", "]", "\n", "\n", "filter_", "=", "tf", ".", "ones", "(", "shape", "=", "filter_size", ",", "dtype", "=", "tf", ".", "float32", ",", "name", "=", "\"filter_\"", ")", "\n", "filter_", "/=", "tf", ".", "reduce_sum", "(", "filter_", ")", "\n", "filter_", "=", "filter_", "[", ":", ",", ":", ",", "tf", ".", "newaxis", ",", "tf", ".", "newaxis", "]", "\n", "filter_", "=", "tf", ".", "tile", "(", "filter_", ",", "[", "1", ",", "1", ",", "channels", ",", "1", "]", ")", "\n", "\n", "image", "=", "_pad", "(", "image", ",", "filter_size", ",", "mode", "=", "padding", ",", "constant_values", "=", "constant_values", ")", "\n", "\n", "output", "=", "tf", ".", "nn", ".", "depthwise_conv2d", "(", "\n", "input", "=", "image", ",", "\n", "filter", "=", "filter_", ",", "\n", "strides", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "padding", "=", "\"VALID\"", ",", "\n", ")", "\n", "output", "=", "img_utils", ".", "from_4D_image", "(", "output", ",", "original_ndims", ")", "\n", "return", "tf", ".", "cast", "(", "output", ",", "orig_dtype", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader_test.DataLoader.__init__": [[29, 50], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader_test.DataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "config", ":", "str", ",", "\n", "test_ds_dir", ":", "str", ",", "\n", "debug", ":", "bool", "=", "False", "\n", ")", ":", "\n", "        ", "super", "(", "DataLoader", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "noise_", "=", "config", "[", "'adding_noise'", "]", "\n", "self", ".", "adding_blur_", "=", "config", "[", "'adding_blur'", "]", "\n", "self", ".", "adding_compression_", "=", "config", "[", "'adding_compression'", "]", "\n", "self", ".", "num_channels", "=", "config", "[", "'num_channels'", "]", "\n", "self", ".", "WH", "=", "[", "config", "[", "'W'", "]", ",", "config", "[", "'H'", "]", "]", "\n", "\n", "# configure TEST dataset", "\n", "self", ".", "debug", "=", "debug", "\n", "self", ".", "test_ds_dir", "=", "test_ds_dir", "\n", "self", ".", "test_stdVec", "=", "config", "[", "'test_stdVec'", "]", "\n", "self", ".", "test_blurVec", "=", "config", "[", "'test_blurVec'", "]", "\n", "self", ".", "test_compresVec", "=", "config", "[", "'test_compresVec'", "]", "\n", "self", ".", "img_types", "=", "config", "[", "'img_types'", "]", "\n", "self", ".", "MAX_SAMPLES", "=", "config", "[", "'num_sel_imgs'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader_test.DataLoader.__call__": [[51, 53], ["DataLoader_test.DataLoader._get_test_ds"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader_test.DataLoader._get_test_ds"], ["", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_get_test_ds", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader_test.DataLoader._get_test_ds": [[55, 62], ["pathlib.Path", "DataLoader_test.DataLoader._get_test_one_ds", "pathlib.Path().glob", "pathlib.Path"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader_test.DataLoader._get_test_one_ds"], ["", "def", "_get_test_ds", "(", "self", ")", ":", "\n", "        ", "test_DSs", "=", "[", "P", ".", "Path", "(", "sub_dir", ")", "for", "sub_dir", "in", "P", ".", "Path", "(", "self", ".", "test_ds_dir", ")", ".", "glob", "(", "'*/'", ")", "]", "\n", "DS", "=", "{", "}", "\n", "for", "test_ds_dir", "in", "test_DSs", ":", "\n", "            ", "name", "=", "test_ds_dir", ".", "name", "\n", "DS", "[", "name", "]", "=", "self", ".", "_get_test_one_ds", "(", "test_ds_dir", ",", "self", ".", "img_types", ",", "self", ".", "MAX_SAMPLES", ")", "\n", "", "return", "DS", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader_test.DataLoader._get_test_one_ds": [[66, 101], ["DataLoader_test._get_image_list", "file_list_ds.take", "DataLoader_test.DataLoader.map", "DataLoader_test.DataLoader._test_noise_adder_fn", "print", "tensorflow.py_function", "len"], "methods", ["home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader_test._get_image_list", "home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader_test.DataLoader._test_noise_adder_fn"], ["", "def", "_get_test_one_ds", "(", "self", ",", "dir_", ",", "img_types", ",", "MAX_SAMPLES", ")", ":", "\n", "\n", "# get the list of images ", "\n", "        ", "file_list_ds", ",", "ds_size", "=", "_get_image_list", "(", "dir_", ",", "\n", "img_types", ",", "\n", "MAX_SAMPLES", ")", "\n", "\n", "ds_test", "=", "file_list_ds", ".", "take", "(", "ds_size", ")", "\n", "\n", "# take test dataset", "\n", "ds_test", "=", "ds_test", ".", "map", "(", "\n", "lambda", "x", ":", "tf", ".", "py_function", "(", "\n", "func", "=", "_get_image_fn", ",", "\n", "inp", "=", "[", "x", ",", "self", ".", "WH", ",", "self", ".", "num_channels", "]", ",", "\n", "Tout", "=", "(", "tf", ".", "float32", ",", "tf", ".", "float32", ",", "tf", ".", "string", ")", "\n", ")", "\n", ")", "\n", "\n", "# add noise and gibbs to the test datasets", "\n", "ds_test", "=", "self", ".", "_test_noise_adder_fn", "(", "ds_test", ",", "self", ".", "noise_", ",", "self", ".", "adding_blur_", ",", "self", ".", "adding_compression_", ")", "\n", "\n", "\n", "\n", "\n", "\n", "if", "self", ".", "debug", ":", "# True self.debug", "\n", "            ", "print", "(", "\"[+] ds_test num: {}\"", ".", "format", "(", "len", "(", "ds_test", ")", ")", ")", "\n", "\n", "#stdVec = self.test_stdVec", "\n", "#folder = P.Path('test_samples')", "\n", "#if not os.path.exists(folder):", "\n", "#    os.mkdir(folder)", "\n", "#utils.imwrite_Dataset(ds_test[f'y_wgn_{stdVec[-1]}'], 5, folder, self.num_channels)", "\n", "\n", "", "return", "ds_test", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader_test.DataLoader._test_noise_adder_fn": [[105, 125], ["DS.take", "DS.map", "tensorflow.py_function"], "methods", ["None"], ["", "def", "_test_noise_adder_fn", "(", "self", ",", "DS", ",", "noise", ",", "\n", "adding_blur", ",", "\n", "compression", ",", "\n", "num_debug", "=", "25", ")", ":", "\n", "        ", "\"\"\" Addding noise and gibbs with different stddevs and frequncies \"\"\"", "\n", "\n", "if", "self", ".", "debug", ":", "\n", "            ", "return", "DS", ".", "take", "(", "num_debug", ")", "\n", "\n", "\n", "", "return", "{", "\n", "f'y_blur_{filter_size}x{filter_size}_compress_{compress}_wgn_{stddev}'", ":", "DS", ".", "map", "(", "\n", "lambda", "x", ",", "y", ",", "z", ":", "tf", ".", "py_function", "(", "\n", "func", "=", "_adding_awgn_gibbs", ",", "\n", "inp", "=", "[", "x", ",", "y", ",", "z", ",", "stddev", ",", "filter_size", ",", "compress", ",", "noise", ",", "adding_blur", ",", "compression", "]", ",", "\n", "Tout", "=", "(", "tf", ".", "float32", ",", "tf", ".", "float32", ",", "tf", ".", "string", ")", "\n", ")", "\n", ")", "for", "stddev", "in", "self", ".", "test_stdVec", "\n", "for", "filter_size", "in", "self", ".", "test_blurVec", "\n", "for", "compress", "in", "self", ".", "test_compresVec", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader_test._get_length": [[141, 143], ["functools.reduce"], "function", ["None"], ["", "", "def", "_get_length", "(", "data_size", ")", ":", "\n", "  ", "return", "reduce", "(", "lambda", "x", ",", "y", ":", "x", "*", "y", ",", "data_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader_test._resize_fn": [[146, 158], ["tensorflow.image.resize", "tensorflow.image.resize", "tf.pad.get_shape", "tensorflow.pad", "tf.pad.get_shape", "tensorflow.pad", "tf.pad.get_shape", "tf.pad.get_shape", "tf.pad.get_shape", "tf.pad.get_shape", "tf.pad.get_shape", "tf.pad.get_shape"], "function", ["None"], ["", "def", "_resize_fn", "(", "img", ",", "WH", ")", ":", "\n", "    ", "w", ",", "h", "=", "WH", "\n", "if", "h", "<", "img", ".", "get_shape", "(", ")", "[", "0", "]", ":", "\n", "        ", "img", "=", "tf", ".", "image", ".", "resize", "(", "img", ",", "(", "h", ",", "img", ".", "get_shape", "(", ")", "[", "1", "]", ")", ")", "\n", "", "elif", "h", ">", "img", ".", "get_shape", "(", ")", "[", "0", "]", ":", "\n", "        ", "img", "=", "tf", ".", "pad", "(", "img", ",", "[", "[", "0", ",", "h", "-", "img", ".", "get_shape", "(", ")", "[", "0", "]", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "\n", "", "if", "w", "<", "img", ".", "get_shape", "(", ")", "[", "1", "]", ":", "\n", "        ", "img", "=", "tf", ".", "image", ".", "resize", "(", "img", ",", "(", "img", ".", "get_shape", "(", ")", "[", "0", "]", ",", "w", ")", ")", "\n", "", "elif", "w", ">", "img", ".", "get_shape", "(", ")", "[", "1", "]", ":", "\n", "        ", "img", "=", "tf", ".", "pad", "(", "img", ",", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "w", "-", "img", ".", "get_shape", "(", ")", "[", "1", "]", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader_test.data_augmentation": [[162, 167], ["tensorflow.range", "tensorflow.image.rot90", "tensorflow.range", "tensorflow.experimental.numpy.flipud", "tensorflow.image.rot90"], "function", ["None"], ["", "def", "data_augmentation", "(", "img", ",", "opt", "=", "None", ")", ":", "\n", "    ", "if", "opt", "in", "tf", ".", "range", "(", "1", ",", "5", ")", ":", "\n", "        ", "return", "tf", ".", "image", ".", "rot90", "(", "img", ",", "k", "=", "opt", ")", "\n", "", "elif", "opt", "in", "tf", ".", "range", "(", "5", ",", "9", ")", ":", "\n", "        ", "return", "tf", ".", "experimental", ".", "numpy", ".", "flipud", "(", "tf", ".", "image", ".", "rot90", "(", "img", ",", "k", "=", "opt", "-", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader_test._get_image_fn": [[171, 216], ["tensorflow.io.read_file", "tensorflow.image.convert_image_dtype", "tensorflow.io.decode_jpeg", "tensorflow.image.rgb_to_grayscale", "DataLoader_test._resize_fn", "DataLoader_test._resize_fn", "tensorflow.strings.split", "tensorflow.io.decode_bmp", "tensorflow.image.decode_png", "tf.image.decode_png.get_shape", "tf.image.decode_png.get_shape", "tensorflow.strings.lower", "tensorflow.strings.split", "tf.image.decode_png.get_shape", "tensorflow.strings.lower"], "function", ["home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader_test._resize_fn", "home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader_test._resize_fn"], ["", "", "def", "_get_image_fn", "(", "file_path", ":", "tf", ".", "Tensor", ",", "\n", "WH", ":", "int", ",", "\n", "channels_num", ":", "int", ")", ":", "\n", "\n", "    ", "file", "=", "tf", ".", "io", ".", "read_file", "(", "file_path", ")", "\n", "\n", "# if the class of image is jpeg, use `decode_jpeg` otherwise use `decode_png`", "\n", "if", "tf", ".", "strings", ".", "split", "(", "tf", ".", "strings", ".", "lower", "(", "file_path", ")", ",", "sep", "=", "'.'", ")", "[", "-", "1", "]", "in", "[", "'jpeg'", ",", "'jpg'", "]", ":", "\n", "        ", "img", "=", "tf", ".", "io", ".", "decode_jpeg", "(", "file", ")", "\n", "", "elif", "tf", ".", "strings", ".", "split", "(", "tf", ".", "strings", ".", "lower", "(", "file_path", ")", ",", "sep", "=", "'.'", ")", "[", "-", "1", "]", "in", "[", "'bmp'", "]", ":", "\n", "        ", "img", "=", "tf", ".", "io", ".", "decode_bmp", "(", "file", ")", "\n", "", "else", ":", "\n", "        ", "img", "=", "tf", ".", "image", ".", "decode_png", "(", "file", ",", "dtype", "=", "tf", ".", "uint8", ")", "\n", "\n", "# sometimes there is error in channel conversion with decode_png or decode_jpeg", "\n", "", "if", "channels_num", "==", "1", "and", "img", ".", "get_shape", "(", ")", "[", "-", "1", "]", ">", "1", ":", "\n", "        ", "img", "=", "tf", ".", "image", ".", "rgb_to_grayscale", "(", "img", ")", "\n", "\n", "#img = tf.cond(", "\n", "#    tf.image.is_jpeg(file),", "\n", "#    lambda: tf.image.decode_jpeg(file, channels=channels_num),", "\n", "#    lambda: tf.image.decode_png(file, channels=channels_num))", "\n", "\n", "\n", "#print(file_path, \"\\t\", img.get_shape())", "\n", "\n", "", "img", "=", "tf", ".", "image", ".", "convert_image_dtype", "(", "img", ",", "tf", ".", "float32", ")", "\n", "#tf.print('before', \"\\t\", img.get_shape())", "\n", "\n", "\n", "#img = tf.image.resize(img, WH) ", "\n", "if", "WH", "[", "0", "]", ">", "0", "and", "WH", "[", "1", "]", ">", "0", ":", "\n", "        ", "img", "=", "_resize_fn", "(", "img", ",", "WH", ")", "\n", "#tf.print('after', \"\\t\", img.get_shape())", "\n", "#tf.print()", "\n", "\n", "\n", "# the image dimension must be divisible to 4", "\n", "", "Blocks", "=", "16", "\n", "H_", "=", "img", ".", "get_shape", "(", ")", "[", "0", "]", "//", "Blocks", "\n", "W_", "=", "img", ".", "get_shape", "(", ")", "[", "1", "]", "//", "Blocks", "\n", "if", "H_", ">", "0", "and", "W_", ">", "0", ":", "\n", "        ", "img", "=", "_resize_fn", "(", "img", ",", "[", "Blocks", "*", "W_", ",", "Blocks", "*", "H_", "]", ")", "\n", "\n", "", "return", "img", ",", "img", ",", "file_path", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader_test._get_image_list": [[221, 267], ["list", "list", "tensorflow.data.Dataset.from_tensor_slices", "file_list_ds.shuffle.cardinality().numpy", "ValueError", "itertools.chain", "str", "len", "file_list_ds.shuffle.shuffle", "ValueError", "list", "file_list_ds.shuffle.cardinality", "data_dir.glob", "len", "str"], "function", ["None"], ["", "def", "_get_image_list", "(", "data_dir", ",", "img_types", ",", "MAX_SAMPLES", ",", "shuffle", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    ...\n    \"\"\"", "\n", "\n", "# get filenames", "\n", "files_pathlib", "=", "list", "(", "\n", "[", "list", "(", "data_dir", ".", "glob", "(", "'**/*.'", "+", "str", "(", "img_type", ")", ")", ")", "\n", "for", "img_type", "in", "img_types", "]", "\n", ")", "\n", "\n", "if", "files_pathlib", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "\"[!] The given folder is empty!\"", ")", "\n", "\n", "\n", "# flatten the lists", "\n", "", "files_pathlib", "=", "list", "(", "itertools", ".", "chain", "(", "*", "files_pathlib", ")", ")", "\n", "\n", "#print(data_dir)", "\n", "#[print(item) for item in files_pathlib]", "\n", "#print(\"*\"*50)", "\n", "\n", "# convert patlibs to str", "\n", "files_str", "=", "[", "str", "(", "fname", ")", "for", "fname", "in", "files_pathlib", "]", "\n", "\n", "# adjust the number of images", "\n", "num_sel_imgs", "=", "len", "(", "files_str", ")", "if", "(", "MAX_SAMPLES", "<", "1", ")", "or", "(", "MAX_SAMPLES", ">", "len", "(", "files_str", ")", ")", "else", "MAX_SAMPLES", "\n", "\n", "# the simplest way to create a dataset is to create it from a python list:", "\n", "file_list_ds", "=", "tf", ".", "data", ".", "Dataset", ".", "from_tensor_slices", "(", "files_str", "[", ":", "num_sel_imgs", "]", ")", "\n", "\n", "\n", "# shuffle data if needed", "\n", "if", "shuffle", ">", "1", ":", "\n", "        ", "file_list_ds", "=", "file_list_ds", ".", "shuffle", "(", "shuffle", ",", "reshuffle_each_iteration", "=", "False", ")", "\n", "\n", "\n", "# get size of data", "\n", "", "ds_size", "=", "file_list_ds", ".", "cardinality", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "\n", "if", "ds_size", "<", "1", ":", "\n", "        ", "raise", "ValueError", "(", "\"The images are not recognized!\"", ")", "\n", "\n", "", "return", "file_list_ds", ",", "ds_size", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader_test._adding_awgn_gibbs": [[271, 340], ["ValueError", "isinstance", "DataLoader_test.blur_filter2d", "tensorflow.cast", "tensorflow.image.random_jpeg_quality", "isinstance", "numpy.random.normal", "tensorflow.convert_to_tensor", "isinstance", "numpy.random.normal", "tensorflow.convert_to_tensor", "tensorflow.random.uniform", "tensorflow.size", "tensorflow.random.uniform", "int", "tensorflow.random.uniform", "np.random.normal.reshape", "tensorflow.random.uniform", "np.random.normal.reshape", "DataLoader_test._get_length", "tensorflow.shape", "DataLoader_test._get_length", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape"], "function", ["home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader_test.blur_filter2d", "home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader_test._get_length", "home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader_test._get_length"], ["", "def", "_adding_awgn_gibbs", "(", "x", ":", "tf", ".", "Tensor", ",", "\n", "y", ":", "tf", ".", "Tensor", ",", "\n", "file_name", ":", "tf", ".", "string", ",", "\n", "stddev", ",", "\n", "filter_size", ",", "\n", "compress", ",", "\n", "noise_", ",", "\n", "blur_", ",", "\n", "compression_", ")", ":", "\n", "    ", "\"\"\" adding noise and gibbs ringings to each image\"\"\"", "\n", "\n", "x_distorted", "=", "x", "\n", "\n", "if", "(", "not", "noise_", ")", "and", "(", "not", "blur_", ")", "and", "(", "not", "compression_", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"Neither noise, nor blur, nor compression is selected!\"", ")", "\n", "\n", "\n", "#Adding blur", "\n", "", "if", "blur_", ":", "\n", "        ", "if", "isinstance", "(", "filter_size", ",", "list", ")", ":", "\n", "            ", "filter_size", "=", "tf", ".", "random", ".", "uniform", "(", "[", "]", ",", "minval", "=", "filter_size", "[", "0", "]", ",", "maxval", "=", "filter_size", "[", "-", "1", "]", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "\n", "", "if", "filter_size", "%", "2", "==", "0", ":", "\n", "            ", "filter_size", "-=", "1", "\n", "\n", "", "x_distorted", "=", "blur_filter2d", "(", "image", "=", "x_distorted", ",", "\n", "filter_size", "=", "(", "filter_size", ",", "filter_size", ")", ",", "\n", "padding", "=", "\"REFLECT\"", ",", "\n", "constant_values", "=", "0", ")", "\n", "\n", "#Adding compression", "\n", "", "if", "compression_", ":", "\n", "        ", "if", "tf", ".", "size", "(", "compress", ")", "==", "2", ":", "\n", "            ", "compress", "=", "tf", ".", "random", ".", "uniform", "(", "[", "]", ",", "minval", "=", "compress", "[", "0", "]", ",", "maxval", "=", "compress", "[", "-", "1", "]", ")", "\n", "\n", "", "compress", "=", "tf", ".", "cast", "(", "int", "(", "compress", ")", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "x_distorted", "=", "tf", ".", "image", ".", "random_jpeg_quality", "(", "x_distorted", ",", "compress", ",", "compress", "+", "1", ")", "\n", "\n", "\n", "\n", "#Adding WGN", "\n", "", "if", "noise_", ":", "\n", "        ", "if", "isinstance", "(", "stddev", ",", "list", ")", ":", "\n", "            ", "stddev", "=", "tf", ".", "random", ".", "uniform", "(", "[", "]", ",", "minval", "=", "stddev", "[", "0", "]", ",", "maxval", "=", "stddev", "[", "1", "]", ")", "\n", "\n", "", "stddev", "/=", "255.", "\n", "\n", "# For training/validation, we consider a range of stddev between [minval, maxval]", "\n", "#noise_level_map = tf.broadcast_to(stddev, tf.shape(x)[:2])[..., None]", "\n", "#wgn = tf.random.normal(tf.shape(x_tmp), stddev=stddev, name=\"wgn\", dtype=tf.float32)", "\n", "wgn", "=", "np", ".", "random", ".", "normal", "(", "loc", "=", "0.", ",", "scale", "=", "stddev", ",", "size", "=", "_get_length", "(", "tf", ".", "shape", "(", "x_distorted", ")", ")", ")", "# since the other authots used np.normal, we use the same template", "\n", "x_distorted", "+=", "tf", ".", "convert_to_tensor", "(", "wgn", ".", "reshape", "(", "tf", ".", "shape", "(", "x_distorted", ")", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "\n", "#Adding WGN", "\n", "", "if", "noise_", ":", "\n", "        ", "if", "isinstance", "(", "stddev", ",", "list", ")", ":", "\n", "            ", "stddev", "=", "tf", ".", "random", ".", "uniform", "(", "[", "]", ",", "minval", "=", "stddev", "[", "0", "]", ",", "maxval", "=", "stddev", "[", "1", "]", ")", "\n", "\n", "", "stddev", "/=", "255.", "\n", "\n", "# For training/validation, we consider a range of stddev between [minval, maxval]", "\n", "#noise_level_map = tf.broadcast_to(stddev, tf.shape(x)[:2])[..., None]", "\n", "#wgn = tf.random.normal(tf.shape(x_tmp), stddev=stddev, name=\"wgn\", dtype=tf.float32)", "\n", "wgn", "=", "np", ".", "random", ".", "normal", "(", "loc", "=", "0.", ",", "scale", "=", "stddev", ",", "size", "=", "_get_length", "(", "tf", ".", "shape", "(", "x_distorted", ")", ")", ")", "# since the other authots used np.normal, we use the same template", "\n", "x_distorted", "+=", "tf", ".", "convert_to_tensor", "(", "wgn", ".", "reshape", "(", "tf", ".", "shape", "(", "x_distorted", ")", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "\n", "", "return", "x_distorted", ",", "y", ",", "file_name", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader_test._pad": [[347, 381], ["tensorflow.convert_to_tensor", "tensorflow.pad", "mode.upper", "ValueError"], "function", ["None"], ["", "def", "_pad", "(", "\n", "image", ":", "tf", ".", "Tensor", ",", "\n", "filter_shape", ":", "Union", "[", "List", "[", "int", "]", ",", "Tuple", "[", "int", "]", "]", ",", "\n", "mode", ":", "str", "=", "\"CONSTANT\"", ",", "\n", "constant_values", ":", "tf", ".", "Tensor", "=", "0", ",", "\n", ")", "->", "tf", ".", "Tensor", ":", "\n", "    ", "\"\"\"Explicitly pad a 4-D image.\n    Equivalent to the implicit padding method offered in `tf.nn.conv2d` and\n    `tf.nn.depthwise_conv2d`, but supports non-zero, reflect and symmetric\n    padding mode. For the even-sized filter, it pads one more value to the\n    right or the bottom side.\n    Args:\n      image: A 4-D `Tensor` of shape `[batch_size, height, width, channels]`.\n      filter_shape: A `tuple`/`list` of 2 integers, specifying the height\n        and width of the 2-D filter.\n      mode: A `string`, one of \"REFLECT\", \"CONSTANT\", or \"SYMMETRIC\".\n        The type of padding algorithm to use, which is compatible with\n        `mode` argument in `tf.pad`. For more details, please refer to\n        https://www.tensorflow.org/api_docs/python/tf/pad.\n      constant_values: A `scalar`, the pad value to use in \"CONSTANT\"\n        padding mode.\n    \"\"\"", "\n", "if", "mode", ".", "upper", "(", ")", "not", "in", "{", "\"REFLECT\"", ",", "\"CONSTANT\"", ",", "\"SYMMETRIC\"", "}", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "'padding should be one of \"REFLECT\", \"CONSTANT\", or \"SYMMETRIC\".'", "\n", ")", "\n", "", "constant_values", "=", "tf", ".", "convert_to_tensor", "(", "constant_values", ",", "image", ".", "dtype", ")", "\n", "filter_height", ",", "filter_width", "=", "filter_shape", "\n", "pad_top", "=", "(", "filter_height", "-", "1", ")", "//", "2", "\n", "pad_bottom", "=", "filter_height", "-", "1", "-", "pad_top", "\n", "pad_left", "=", "(", "filter_width", "-", "1", ")", "//", "2", "\n", "pad_right", "=", "filter_width", "-", "1", "-", "pad_left", "\n", "paddings", "=", "[", "[", "0", ",", "0", "]", ",", "[", "pad_top", ",", "pad_bottom", "]", ",", "[", "pad_left", ",", "pad_right", "]", ",", "[", "0", ",", "0", "]", "]", "\n", "return", "tf", ".", "pad", "(", "image", ",", "paddings", ",", "mode", "=", "mode", ",", "constant_values", "=", "constant_values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader_test.blur_filter2d": [[385, 451], ["tensorflow.name_scope", "keras.utils.conv_utils.normalize_tuple", "any", "tensorflow.convert_to_tensor", "tensorflow_addons.image.utils.get_ndims", "tensorflow_addons.image.utils.to_4D_image", "tensorflow.ones", "tensorflow.reduce_sum", "tensorflow.tile", "DataLoader_test._pad", "tensorflow.nn.depthwise_conv2d", "tensorflow_addons.image.utils.from_4D_image", "tensorflow.cast", "ValueError", "tensorflow.cast", "tensorflow.shape"], "function", ["home.repos.pwc.inspect_result.mogvision_adl.util.DataLoader_test._pad"], ["", "def", "blur_filter2d", "(", "\n", "image", ":", "tf", ".", "Tensor", ",", "\n", "filter_size", ":", "Union", "[", "int", ",", "Iterable", "[", "int", "]", "]", "=", "(", "3", ",", "3", ")", ",", "\n", "padding", ":", "str", "=", "\"REFLECT\"", ",", "\n", "constant_values", ":", "tf", ".", "Tensor", "=", "0", ",", "\n", "name", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", ")", "->", "tf", ".", "Tensor", ":", "\n", "    ", "\"\"\"Perform blur on image(s).\n    Args:\n      image: Either a 2-D `Tensor` of shape `[height, width]`,\n        a 3-D `Tensor` of shape `[height, width, channels]`,\n        or a 4-D `Tensor` of shape `[batch_size, height, width, channels]`.\n      filter_size: An `integer` or `tuple`/`list` of 2 integers, specifying\n        the height and width of the 2-D gaussian filter. Can be a single\n        integer to specify the same value for all spatial dimensions.\n      padding: A `string`, one of \"REFLECT\", \"CONSTANT\", or \"SYMMETRIC\".\n        The type of padding algorithm to use, which is compatible with\n        `mode` argument in `tf.pad`. For more details, please refer to\n        https://www.tensorflow.org/api_docs/python/tf/pad.\n      constant_values: A `scalar`, the pad value to use in \"CONSTANT\"\n        padding mode.\n      name: A name for this operation (optional).\n    Returns:\n      2-D, 3-D or 4-D `Tensor` of the same dtype as input.\n    Raises:\n      ValueError: If `image` is not 2, 3 or 4-dimensional,\n        if `padding` is other than \"REFLECT\", \"CONSTANT\" or \"SYMMETRIC\",\n        if `filter_size` is invalid,\n    \"\"\"", "\n", "\n", "with", "tf", ".", "name_scope", "(", "name", "or", "\"blur_filter2d\"", ")", ":", "\n", "        ", "filter_size", "=", "conv_utils", ".", "normalize_tuple", "(", "filter_size", ",", "2", ",", "\"filter_size\"", ")", "\n", "\n", "if", "any", "(", "fs", "<", "0", "for", "fs", "in", "filter_size", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"filter_size should be greater than or equal to 1\"", ")", "\n", "\n", "", "image", "=", "tf", ".", "convert_to_tensor", "(", "image", ",", "name", "=", "\"image\"", ")", "\n", "\n", "original_ndims", "=", "img_utils", ".", "get_ndims", "(", "image", ")", "\n", "image", "=", "img_utils", ".", "to_4D_image", "(", "image", ")", "\n", "\n", "\n", "# Keep the precision if it's float;", "\n", "# otherwise, convert to float32 for computing.", "\n", "orig_dtype", "=", "image", ".", "dtype", "\n", "if", "not", "image", ".", "dtype", ".", "is_floating", ":", "\n", "            ", "image", "=", "tf", ".", "cast", "(", "image", ",", "tf", ".", "float32", ")", "\n", "\n", "\n", "", "channels", "=", "tf", ".", "shape", "(", "image", ")", "[", "3", "]", "\n", "\n", "filter_", "=", "tf", ".", "ones", "(", "shape", "=", "filter_size", ",", "dtype", "=", "tf", ".", "float32", ",", "name", "=", "\"filter_\"", ")", "\n", "filter_", "/=", "tf", ".", "reduce_sum", "(", "filter_", ")", "\n", "filter_", "=", "filter_", "[", ":", ",", ":", ",", "tf", ".", "newaxis", ",", "tf", ".", "newaxis", "]", "\n", "filter_", "=", "tf", ".", "tile", "(", "filter_", ",", "[", "1", ",", "1", ",", "channels", ",", "1", "]", ")", "\n", "\n", "image", "=", "_pad", "(", "image", ",", "filter_size", ",", "mode", "=", "padding", ",", "constant_values", "=", "constant_values", ")", "\n", "\n", "output", "=", "tf", ".", "nn", ".", "depthwise_conv2d", "(", "\n", "input", "=", "image", ",", "\n", "filter", "=", "filter_", ",", "\n", "strides", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "padding", "=", "\"VALID\"", ",", "\n", ")", "\n", "output", "=", "img_utils", ".", "from_4D_image", "(", "output", ",", "original_ndims", ")", "\n", "return", "tf", ".", "cast", "(", "output", ",", "orig_dtype", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.mogvision_adl.util.utils.boolean_string": [[14, 19], ["s.lower"], "function", ["None"], ["def", "boolean_string", "(", "s", ")", ":", "\n", "    ", "if", "s", ".", "lower", "(", ")", "==", "'true'", ":", "\n", "        ", "return", "True", "\n", "", "else", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.util.utils.get_dir": [[24, 32], ["type", "list", "dirs.append", "list", "map"], "function", ["None"], ["", "def", "get_dir", "(", "_dir", ":", "Callable", "[", "[", "Union", "[", "list", ",", "str", "]", "]", ",", "str", "]", ")", "->", "list", ":", "\n", "    ", "if", "type", "(", "_dir", ")", "==", "str", ":", "\n", "        ", "_dir", "=", "list", "(", "[", "_dir", ",", "]", ")", "\n", "\n", "", "dirs", "=", "[", "]", "\n", "for", "item", "in", "_dir", ":", "\n", "        ", "dirs", ".", "append", "(", "\"\"", ".", "join", "(", "list", "(", "map", "(", "lambda", "c", ":", "c", "if", "c", "not", "in", "r'[,*?!:\"<>|] \\\\'", "else", "''", ",", "item", ")", ")", ")", ")", "\n", "", "return", "dirs", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.util.utils.set_gpu_env": [[44, 75], ["tensorflow.print", "enumerate", "enumerate", "tensorflow.distribute.MirroredStrategy", "tensorflow.distribute.MultiWorkerMirroredStrategy", "tensorflow.config.experimental.list_physical_devices", "tensorflow.print", "tensorflow.config.experimental.list_physical_devices", "tensorflow.print"], "function", ["None"], ["def", "set_gpu_env", "(", "gpu_list", ":", "list", ")", ":", "\n", "    ", "'''Set gpu/cpu mode.'''", "\n", "os", ".", "environ", "[", "\"CUDA_DEVICE_ORDER\"", "]", "=", "\"PCI_BUS_ID\"", "\n", "\n", "if", "gpu_list", ":", "\n", "        ", "strategy", "=", "tf", ".", "distribute", ".", "MirroredStrategy", "(", "devices", "=", "gpu_list", ")", "\n", "", "else", ":", "\n", "        ", "strategy", "=", "tf", ".", "distribute", ".", "MultiWorkerMirroredStrategy", "(", ")", "\n", "", "gpus_num", "=", "strategy", ".", "num_replicas_in_sync", "\n", "\n", "\n", "# print the list of devices:", "\n", "tf", ".", "print", "(", "f\"[i] Number of GPU devices: {gpus_num}\"", ")", "\n", "\n", "for", "i", ",", "gpu", "in", "enumerate", "(", "tf", ".", "config", ".", "experimental", ".", "list_physical_devices", "(", "'GPU'", ")", ")", ":", "\n", "        ", "tf", ".", "print", "(", "\"\\tDevice {}:`{}`\\tType: {}\"", ".", "format", "(", "i", ",", "gpu", ".", "name", ",", "gpu", ".", "device_type", ")", ")", "\n", "\n", "", "for", "i", ",", "cpu", "in", "enumerate", "(", "tf", ".", "config", ".", "experimental", ".", "list_physical_devices", "(", "'CPU'", ")", ")", ":", "\n", "        ", "tf", ".", "print", "(", "\"\\tlocal host {}:`{}`\\tType: {}\"", ".", "format", "(", "i", ",", "cpu", ".", "name", ",", "cpu", ".", "device_type", ")", ")", "\n", "\n", "\n", "", "\"\"\"\n    os environment:\n        #0 = all messages are logged (default behavior)\n        #1 = INFO messages are not printed\n        #2 = INFO and WARNING messages are not printed\n        #3 = INFO, WARNING, and ERROR messages are not printed\n    \"\"\"", "\n", "os", ".", "environ", "[", "'TF_CPP_MIN_LOG_LEVEL'", "]", "=", "'3'", "\n", "\n", "return", "strategy", ",", "gpus_num", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.util.utils.makedirs_fn": [[77, 84], ["os.path.join", "os.path.exists", "os.makedirs"], "function", ["None"], ["", "def", "makedirs_fn", "(", "*", "argv", ")", ":", "\n", "    ", "path_", "=", "[", "arg", "for", "arg", "in", "argv", "if", "arg", "]", "\n", "path_", "=", "os", ".", "path", ".", "join", "(", "*", "path_", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path_", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path_", ")", "\n", "#tf.gfile.MakeDirs(path_)", "\n", "", "return", "path_", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.util.utils.get_model_summary": [[87, 94], ["model.summary", "tensorflow.print"], "function", ["None"], ["", "def", "get_model_summary", "(", "model", ",", "model_name", ",", "short", "=", "False", ")", ":", "\n", "    ", "if", "short", ":", "\n", "        ", "for", "layer", "in", "model", ".", "layers", ":", "\n", "            ", "tf", ".", "print", "(", "layer", ".", "name", ")", "\n", "", "", "else", ":", "\n", "        ", "model", ".", "_name", "=", "model_name", "\n", "model", ".", "summary", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.util.utils.get_MapDataset_len": [[98, 102], ["MapDataset.cardinality().numpy", "MapDataset.cardinality"], "function", ["None"], ["", "", "def", "get_MapDataset_len", "(", "MapDataset", ")", ":", "\n", "    ", "\"\"\" ... \"\"\"", "\n", "# tf.data.experimental.cardinality(item).numpy())", "\n", "return", "MapDataset", ".", "cardinality", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.util.utils.imwrite_Dataset": [[105, 147], ["isinstance", "os.path.exists", "os.makedirs", "x.astype", "DS.take", "utils.get_MapDataset_len", "next", "iter", "PIL.Image.fromarray().convert().save", "PIL.Image.fromarray().save", "PIL.Image.fromarray().convert().save", "PIL.Image.fromarray().convert().save", "PIL.Image.fromarray().save", "PIL.Image.fromarray().save", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "PIL.Image.fromarray().convert", "PIL.Image.fromarray", "PIL.Image.fromarray().convert", "PIL.Image.fromarray().convert", "PIL.Image.fromarray", "PIL.Image.fromarray", "str", "utils.imwrite_Dataset.normalizeTo255"], "function", ["home.repos.pwc.inspect_result.mogvision_adl.util.utils.get_MapDataset_len"], ["", "def", "imwrite_Dataset", "(", "DS", ",", "step", ",", "dst", ",", "num_channels", ")", ":", "\n", "    ", "\"\"\" ... \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dst", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dst", ")", "\n", "\n", "", "def", "normalizeTo255", "(", "x", ")", ":", "\n", "        ", "\"\"\" normalize data between 0 and 255 \"\"\"", "\n", "x", "*=", "255.", "\n", "return", "x", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "\n", "", "counter", "=", "0", "\n", "if", "isinstance", "(", "DS", ",", "dict", ")", ":", "\n", "        ", "for", "item", "in", "DS", ":", "\n", "            ", "if", "counter", "%", "step", "==", "0", ":", "\n", "                ", "if", "num_channels", ">", "1", ":", "\n", "                    ", "Image", ".", "fromarray", "(", "normalizeTo255", "(", "item", ".", "numpy", "(", ")", ")", ")", ".", "convert", "(", "\"RGB\"", ")", ".", "save", "(", "os", ".", "path", ".", "join", "(", "dst", ",", "str", "(", "counter", ")", "+", "'.jpg'", ")", ")", "\n", "", "else", ":", "\n", "                    ", "Image", ".", "fromarray", "(", "normalizeTo255", "(", "item", ".", "numpy", "(", ")", ")", ")", ".", "save", "(", "os", ".", "path", ".", "join", "(", "dst", ",", "str", "(", "counter", ")", "+", "'.jpg'", ")", ")", "\n", "\n", "", "", "counter", "+=", "1", "\n", "", "", "else", ":", "\n", "        ", "for", "_", "in", "DS", ".", "take", "(", "get_MapDataset_len", "(", "DS", ")", ")", ":", "\n", "            ", "item", "=", "next", "(", "iter", "(", "DS", ")", ")", "\n", "if", "counter", "%", "step", "==", "0", ":", "\n", "                ", "im", "=", "item", "[", "0", "]", "\n", "\n", "if", "num_channels", ">", "1", ":", "\n", "                    ", "Image", ".", "fromarray", "(", "normalizeTo255", "(", "im", "[", ":", ",", ":", ",", "0", ":", "3", "]", ".", "numpy", "(", ")", ")", ")", ".", "convert", "(", "\"RGB\"", ")", ".", "save", "(", "os", ".", "path", ".", "join", "(", "dst", ",", "str", "(", "counter", ")", "+", "'_awgn.jpg'", ")", ")", "\n", "\n", "Image", ".", "fromarray", "(", "normalizeTo255", "(", "item", "[", "-", "1", "]", ".", "numpy", "(", ")", ")", ")", ".", "convert", "(", "\"RGB\"", ")", ".", "save", "(", "os", ".", "path", ".", "join", "(", "dst", ",", "str", "(", "counter", ")", "+", "'.jpg'", ")", ")", "\n", "", "else", ":", "\n", "                    ", "Image", ".", "fromarray", "(", "normalizeTo255", "(", "im", "[", ":", ",", ":", ",", "0", "]", ".", "numpy", "(", ")", ")", ")", ".", "save", "(", "os", ".", "path", ".", "join", "(", "dst", ",", "str", "(", "counter", ")", "+", "'_awgn.jpg'", ")", ")", "\n", "\n", "Image", ".", "fromarray", "(", "normalizeTo255", "(", "item", "[", "-", "1", "]", ".", "numpy", "(", ")", ")", ")", ".", "save", "(", "os", ".", "path", ".", "join", "(", "dst", ",", "str", "(", "counter", ")", "+", "'.jpg'", ")", ")", "\n", "", "", "counter", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.util.utils.read_config": [[150, 165], ["STEPS.update", "json.load.update", "open", "json.load"], "function", ["None"], ["", "", "", "def", "read_config", "(", "config_dir", ")", ":", "\n", "    ", "STEPS", "=", "{", "}", "\n", "with", "open", "(", "config_dir", ",", "'rb'", ")", "as", "file", ":", "\n", "        ", "config", "=", "json", ".", "load", "(", "file", ")", "\n", "#config.get('AnyParams', anyValues???)", "\n", "\n", "", "STEPS", ".", "update", "(", "{", "\n", "'val_per_step'", ":", "50", ",", "\n", "'test_per_step'", ":", "50", ",", "\n", "'checkpoint_per_step'", ":", "50", ",", "\n", "'disc_per_step'", ":", "3", "\n", "}", ")", "\n", "\n", "config", ".", "update", "(", "{", "'STEPS'", ":", "STEPS", "}", ")", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.util.utils.environ_setup": [[167, 172], ["None"], "function", ["None"], ["", "def", "environ_setup", "(", "parameter", ",", "initial_val", ")", ":", "\n", "    ", "if", "parameter", "in", "os", ".", "environ", ":", "\n", "        ", "return", "os", ".", "environ", "[", "parameter", "]", "\n", "", "else", ":", "\n", "        ", "return", "initial_val", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.util.utils.rmtree_dirs": [[173, 181], ["os.path.exists", "shutil.rmtree", "tensorflow.print", "tensorflow.print", "tensorflow.print"], "function", ["None"], ["", "", "def", "rmtree_dirs", "(", "dst_dir", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "dst_dir", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "shutil", ".", "rmtree", "(", "dst_dir", ")", "\n", "tf", ".", "print", "(", "f\"'{dst_dir}' removed successfully!\"", ")", "\n", "", "except", "OSError", "as", "error", ":", "\n", "            ", "tf", ".", "print", "(", "error", ")", "\n", "tf", ".", "print", "(", "f\" '{dst_dir}' can not be removed!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.util.utils.make_or_restore_model": [[184, 203], ["tensorflow.print", "tensorflow.keras.models.load_model", "tensorflow.print", "os.path.exists", "max", "int", "os.listdir", "dir_.split"], "function", ["home.repos.pwc.inspect_result.mogvision_adl.util.utils.load_model"], ["", "", "", "def", "make_or_restore_model", "(", "model", ",", "step_num", ",", "ckpt_dir", ",", "options", ",", "prefix", "=", "'checkpoint-'", ")", ":", "\n", "    ", "\"\"\" Either restore the latest model, or load a fresh model if \n    there is no checkpoint available.\"\"\"", "\n", "\n", "# check the selected #ckpt, if not exist, find the most recent one", "\n", "\n", "if", "step_num", ">", "0", ":", "\n", "        ", "model_path", "=", "f\"{ckpt_dir}/{prefix}{step_num}/\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "model_path", ")", ":", "\n", "            ", "step_ids", "=", "[", "int", "(", "dir_", ".", "split", "(", "prefix", ")", "[", "-", "1", "]", ")", "for", "dir_", "in", "os", ".", "listdir", "(", "ckpt_dir", ")", "]", "\n", "step_num", "=", "max", "(", "step_ids", ")", "\n", "model_path", "=", "f\"{ckpt_dir}/{prefix}{step_num}/\"", "\n", "\n", "", "loaded", "=", "tf", ".", "keras", ".", "models", ".", "load_model", "(", "model_path", ",", "options", "=", "options", ".", "load_options", ")", "\n", "tf", ".", "print", "(", "f\"[i] Restoring the model from step {step_num}.\"", ")", "\n", "return", "loaded", "\n", "\n", "", "tf", ".", "print", "(", "\"[i] Creating a new model.\"", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.util.utils.restore_last_model": [[206, 215], ["max", "tensorflow.print", "tensorflow.keras.models.load_model", "int", "os.listdir", "dir_.split"], "function", ["home.repos.pwc.inspect_result.mogvision_adl.util.utils.load_model"], ["", "def", "restore_last_model", "(", "ckpt_dir", ",", "option_load", ",", "prefix", "=", "'checkpoint-'", ")", ":", "\n", "    ", "\"\"\" restore the latest model\"\"\"", "\n", "\n", "step_ids", "=", "[", "int", "(", "dir_", ".", "split", "(", "prefix", ")", "[", "-", "1", "]", ")", "for", "dir_", "in", "os", ".", "listdir", "(", "ckpt_dir", ")", "]", "\n", "step_num", "=", "max", "(", "step_ids", ")", "\n", "model_path", "=", "f\"{ckpt_dir}/{prefix}{step_num}/\"", "\n", "tf", ".", "print", "(", "f\"[i] Restoring the model from step {step_num}.\"", ")", "\n", "\n", "return", "tf", ".", "keras", ".", "models", ".", "load_model", "(", "model_path", ",", "compile", "=", "False", ",", "options", "=", "option_load", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.util.utils.store_model": [[221, 238], ["tensorflow.saved_model.LoadOptions", "tensorflow.saved_model.SaveOptions", "os.path.exists", "tensorflow.keras.models.load_model", "tensorflow.print", "tf.keras.models.load_model.save", "os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.mogvision_adl.util.utils.load_model"], ["", "def", "store_model", "(", "model_name", ",", "ckpt_dir", ",", "dst_dir", ",", "step_num", ",", "load_save_device", "=", "None", ")", ":", "\n", "    ", "\"\"\" ... \"\"\"", "\n", "\n", "option_load", "=", "tf", ".", "saved_model", ".", "LoadOptions", "(", "experimental_io_device", "=", "load_save_device", ")", "\n", "options_save", "=", "tf", ".", "saved_model", ".", "SaveOptions", "(", "experimental_io_device", "=", "load_save_device", ")", "\n", "\n", "model_path", "=", "f\"{ckpt_dir}/checkpoint-{step_num}/\"", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "model_path", ")", ":", "\n", "        ", "model", "=", "tf", ".", "keras", ".", "models", ".", "load_model", "(", "model_path", ",", "compile", "=", "False", ",", "options", "=", "option_load", ")", "\n", "tf", ".", "print", "(", "f\"[i] Restoring the model from step {step_num}.\"", ")", "\n", "\n", "# save as a new name in the given dir", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dst_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "dst_dir", ")", "\n", "\n", "", "model", ".", "save", "(", "f'{dst_dir}/{model_name}-{step_num}'", ",", "options", "=", "options_save", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.util.utils.load_model": [[243, 246], ["os.path.join", "tensorflow.keras.models.load_model", "str"], "function", ["home.repos.pwc.inspect_result.mogvision_adl.util.utils.load_model"], ["", "", "def", "load_model", "(", "model_name", ",", "stored_model_dir", ",", "step_num", ",", "compile_", "=", "False", ")", ":", "\n", "    ", "model_file", "=", "os", ".", "path", ".", "join", "(", "stored_model_dir", ",", "f'{model_name}-{str(step_num)}.h5'", ")", "\n", "return", "tf", ".", "keras", ".", "models", ".", "load_model", "(", "model_file", ",", "compile", "=", "compile_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.util.utils.init_models": [[249, 254], ["tensorflow.Variable", "tensorflow.train.Checkpoint", "os.path.join", "tf.train.Checkpoint.restore().expect_partial", "tf.train.Checkpoint.restore", "str"], "function", ["None"], ["", "def", "init_models", "(", "model", ",", "model_name", ",", "optimizer", ",", "stored_model_dir", ",", "step_num", ")", ":", "\n", "    ", "step", "=", "tf", ".", "Variable", "(", "0", ",", "dtype", "=", "tf", ".", "int64", ")", "\n", "checkpoint", "=", "tf", ".", "train", ".", "Checkpoint", "(", "model", "=", "model", ",", "optimizer", "=", "optimizer", ",", "step", "=", "step", ")", "\n", "checkpoint_file", "=", "os", ".", "path", ".", "join", "(", "stored_model_dir", ",", "f'{model_name}-{str(step_num)}.h5'", ")", "\n", "checkpoint", ".", "restore", "(", "checkpoint_file", ")", ".", "expect_partial", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.util.utils.get_overall_results": [[257, 271], ["pd.read_csv", "numpy.unique", "pd.read_csv.where", "PSNR.update", "SSIM.update", "filt[].mean", "filt[].std", "filt[].mean", "filt[].std"], "function", ["None"], ["", "def", "get_overall_results", "(", "csv_filename", ")", ":", "\n", "\n", "    ", "csv_file", "=", "pd", ".", "read_csv", "(", "csv_filename", ")", "\n", "sgima_vals", "=", "np", ".", "unique", "(", "csv_file", "[", "'sigma'", "]", ")", "\n", "PSNR", "=", "{", "}", "\n", "SSIM", "=", "{", "}", "\n", "\n", "for", "sgima", "in", "sgima_vals", ":", "\n", "        ", "filt", "=", "csv_file", ".", "where", "(", "csv_file", "[", "'sigma'", "]", "==", "sgima", ")", "\n", "psnr", "=", "[", "filt", "[", "'psnr'", "]", ".", "mean", "(", ")", ",", "filt", "[", "'psnr'", "]", ".", "std", "(", ")", "]", "\n", "ssim", "=", "[", "filt", "[", "'ssim'", "]", ".", "mean", "(", ")", ",", "filt", "[", "'ssim'", "]", ".", "std", "(", ")", "]", "\n", "PSNR", ".", "update", "(", "{", "sgima", ":", "psnr", "}", ")", "\n", "SSIM", ".", "update", "(", "{", "sgima", ":", "ssim", "}", ")", "\n", "", "return", "PSNR", ",", "SSIM", "\n", "\n"]], "home.repos.pwc.inspect_result.mogvision_adl.util.utils.check_ds": [[274, 287], ["tensorflow.convert_to_tensor", "iter", "tensorflow.Variable", "tensorflow.Variable", "next", "step.assign_add"], "function", ["None"], ["", "def", "check_ds", "(", "ds", ",", "ds_size", ")", ":", "\n", "\n", "    ", "ds_size", "=", "tf", ".", "convert_to_tensor", "(", "ds_size", ")", "\n", "iter_data", "=", "iter", "(", "ds", ")", "\n", "\n", "counter", ",", "step", "=", "tf", ".", "Variable", "(", "1.", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "tf", ".", "Variable", "(", "0", ",", "dtype", "=", "ds_size", ".", "dtype", ")", "\n", "\n", "while", "step", "<", "ds_size", ":", "\n", "        ", "try", ":", "\n", "            ", "x", ",", "y", ",", "l", "=", "next", "(", "iter_data", ")", "\n", "step", ".", "assign_add", "(", "1", ")", "\n", "", "except", "StopIteration", ":", "\n", "            ", "break", "\n", "", "", "", ""]]}