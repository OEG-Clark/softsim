{"home.repos.pwc.inspect_result.jamt9000_DVE.None.test_matching.compute_pixel_err": [[39, 64], ["numpy.sqrt"], "function", ["None"], ["", "def", "compute_pixel_err", "(", "pred_x", ",", "pred_y", ",", "gt_x", ",", "gt_y", ",", "imwidth", ",", "crop", ")", ":", "\n", "    ", "\"\"\"Compute the pixel error of the corresponding keypoints\n\n    Args:\n        pred_x (float): predicted x-coordinate for keypoint\n        pred_y (float): predicted y-coordinate for keypoint\n        gt_x (float): ground truth x-coordinate for keypoint\n        gt_y (float): ground truth y-coordinate for keypoint\n        imwidth (int): the width of the image (pixels)\n        crop (int): the size of the crop from the boundary (pixels)\n\n    Returns:\n        (float) pixel error\n    NOTE: To account for different input sizes, we scale all distances as\n    though they occured in pixel space for a 70x70 (post-crop) image\n    (this was used in the original version of the model so allows\n    for comparison).\n    \"\"\"", "\n", "canonical_sz", "=", "70", "\n", "scale", "=", "canonical_sz", "/", "(", "imwidth", "-", "2", "*", "crop", ")", "\n", "pred_x", "=", "pred_x", "*", "scale", "\n", "pred_y", "=", "pred_y", "*", "scale", "\n", "gt_x", "=", "gt_x", "*", "scale", "\n", "gt_y", "=", "gt_y", "*", "scale", "\n", "return", "np", ".", "sqrt", "(", "(", "gt_x", "-", "pred_x", ")", "**", "2", "+", "(", "gt_y", "-", "pred_y", ")", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.None.test_matching.find_descriptor": [[66, 78], ["int", "int", "min", "min", "torch.matmul", "torch.matmul", "torch.matmul.argmax", "numpy.round", "numpy.round", "max", "max", "query_desc.reshape", "target_descs.reshape", "utils.tps.spatial_grid_unnormalized().reshape", "min.item", "min.item", "utils.tps.spatial_grid_unnormalized"], "function", ["home.repos.pwc.inspect_result.jamt9000_DVE.utils.tps.spatial_grid_unnormalized"], ["", "def", "find_descriptor", "(", "x", ",", "y", ",", "source_descs", ",", "target_descs", ",", "stride", ")", ":", "\n", "    ", "C", ",", "H", ",", "W", "=", "source_descs", ".", "shape", "\n", "x", "=", "int", "(", "np", ".", "round", "(", "x", "/", "stride", ")", ")", "\n", "y", "=", "int", "(", "np", ".", "round", "(", "y", "/", "stride", ")", ")", "\n", "x", "=", "min", "(", "W", "-", "1", ",", "max", "(", "x", ",", "0", ")", ")", "\n", "y", "=", "min", "(", "H", "-", "1", ",", "max", "(", "y", ",", "0", ")", ")", "\n", "query_desc", "=", "source_descs", "[", ":", ",", "y", ",", "x", "]", "\n", "corr", "=", "torch", ".", "matmul", "(", "query_desc", ".", "reshape", "(", "-", "1", ",", "C", ")", ",", "target_descs", ".", "reshape", "(", "C", ",", "H", "*", "W", ")", ")", "\n", "maxidx", "=", "corr", ".", "argmax", "(", ")", "\n", "grid", "=", "spatial_grid_unnormalized", "(", "H", ",", "W", ")", ".", "reshape", "(", "-", "1", ",", "2", ")", "*", "stride", "\n", "x", ",", "y", "=", "grid", "[", "maxidx", "]", "\n", "return", "x", ".", "item", "(", ")", ",", "y", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.None.test_matching.dense_desc_match": [[80, 99], ["dict", "torch.interpolate().squeeze", "torch.interpolate().squeeze", "utils.tps.tps_grid", "torch.einsum", "torch.einsum", "torch.argmax", "torch.argmax", "grid[].reshape", "torch.einsum.view", "torch.interpolate", "torch.interpolate", "F.interpolate().squeeze.unsqueeze", "F.interpolate().squeeze.unsqueeze"], "function", ["home.repos.pwc.inspect_result.jamt9000_DVE.utils.tps.tps_grid"], ["", "def", "dense_desc_match", "(", "src", ",", "target", ",", "upscale", "=", "2", ")", ":", "\n", "\n", "# upsample for higher resolution", "\n", "    ", "interp_kwargs", "=", "dict", "(", "scale_factor", "=", "upscale", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "src", "=", "F", ".", "interpolate", "(", "src", ".", "unsqueeze", "(", "0", ")", ",", "**", "interp_kwargs", ")", ".", "squeeze", "(", "0", ")", "\n", "target", "=", "F", ".", "interpolate", "(", "target", ".", "unsqueeze", "(", "0", ")", ",", "**", "interp_kwargs", ")", ".", "squeeze", "(", "0", ")", "\n", "C", ",", "H", ",", "W", "=", "src", ".", "shape", "\n", "# target = F.interpolate(target.unsqueeze(0), **interp_kwargs).squeeze(0)", "\n", "grid", "=", "tps_grid", "(", "H", ",", "W", ")", "\n", "# to (H x W x H x W)", "\n", "corr", "=", "torch", ".", "einsum", "(", "\"ijk,ilm->jklm\"", ",", "src", ",", "target", ")", "\n", "# corr2 = torch.matmul(", "\n", "#     source_descs.permute(1, 2, 0).reshape(-1, C),", "\n", "#     target_descs.reshape(C, H * W),", "\n", "# )", "\n", "# corr2 = corr2.reshape(H, W, H, W)", "\n", "# find maximal correlation among source", "\n", "maxidx", "=", "torch", ".", "argmax", "(", "corr", ".", "view", "(", "H", "*", "W", ",", "H", "*", "W", ")", ",", "dim", "=", "0", ")", "\n", "return", "grid", "[", "maxidx", "]", ".", "reshape", "(", "1", ",", "H", ",", "W", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.None.test_matching.evaluation": [[101, 337], ["torch.device", "torch.device", "config.get_logger.info", "config.get_logger.info", "[].get", "[].get", "config.get", "utils.tps.Warper", "getattr", "getattr.", "torch.utils.data.DataLoader", "utils.get_instance", "torch.nn.DataParallel.summary", "config.get_logger.info", "torch.load", "torch.load", "torch.nn.DataParallel.load_state_dict", "torch.nn.DataParallel.to", "torch.nn.DataParallel.train", "torch.nn.DataParallel.eval", "torch.manual_seed", "torch.manual_seed", "print", "config.get_logger.info", "config.get_logger.info", "config.get_logger.info", "config.get_logger", "dict", "dict", "torch.nn.DataParallel", "torch.nn.DataParallel", "utils.clean_state_dict", "SummaryWriter", "torch.no_grad", "torch.no_grad", "enumerate", "pathlib.Path", "warp_dir.exists", "warp_dir.mkdir", "tqdm.tqdm", "data.to.to", "torch.nn.DataParallel.", "data[].cpu", "data[].cpu", "config.get", "config.get", "config.get", "matplotlib.figure", "plt.figure.add_subplot", "plt.figure.add_subplot", "plt.figure.add_subplot", "fig.add_subplot.imshow", "fig.add_subplot.imshow", "fig.add_subplot.imshow", "torch.normalize", "torch.normalize", "torch.normalize", "desc_source.clone", "desc_same.clone", "desc_diff.clone", "test_matching.dense_desc_match", "torch.grid_sample", "im_warped.squeeze.squeeze", "matplotlib.close", "SummaryWriter.add_figure", "enumerate", "zs_dispFig", "plt.figure.savefig", "numpy.mean", "numpy.mean", "utils.visualization.norm_range().permute", "utils.visualization.norm_range().permute", "utils.visualization.norm_range().permute", "fig.add_subplot.scatter", "fig.add_subplot.scatter", "fig.add_subplot.scatter", "im_source.view", "matplotlib.figure", "plt.figure.add_subplot", "plt.figure.add_subplot", "plt.figure.add_subplot", "fig.add_subplot.imshow", "fig.add_subplot.imshow", "fig.add_subplot.imshow", "plt.figure.savefig", "enumerate", "numpy.array", "numpy.array", "numpy.array", "test_matching.find_descriptor", "test_matching.compute_pixel_err", "same_errs.append", "test_matching.find_descriptor", "test_matching.compute_pixel_err", "diff_errs.append", "config.get", "utils.visualization.norm_range().permute", "utils.visualization.norm_range().permute", "utils.visualization.norm_range().permute", "triplet_dest_dir.exists", "triplet_dest_dir.mkdir", "matplotlib.axis", "matplotlib.figure", "matplotlib.Axes", "plt.Axes.set_axis_off", "plt.figure.add_axes", "utils.visualization.norm_range().permute", "plt.Axes.imshow", "matplotlib.savefig", "fig.add_subplot.scatter", "fig.add_subplot.scatter", "utils.visualization.norm_range", "utils.visualization.norm_range", "utils.visualization.norm_range", "str", "utils.visualization.norm_range", "utils.visualization.norm_range", "utils.visualization.norm_range", "utils.visualization.norm_range"], "function", ["home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config.ConfigParser.get", "home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config.ConfigParser.get", "home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config.ConfigParser.get", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.util.get_instance", "home.repos.pwc.inspect_result.jamt9000_DVE.base.base_model.BaseModel.summary", "home.repos.pwc.inspect_result.jamt9000_DVE.base.base_trainer.BaseTrainer.train", "home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config.ConfigParser.get_logger", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.util.clean_state_dict", "home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config.ConfigParser.get", "home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config.ConfigParser.get", "home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config.ConfigParser.get", "home.repos.pwc.inspect_result.jamt9000_DVE.None.test_matching.dense_desc_match", "home.repos.pwc.inspect_result.jamt9000_DVE.None.test_matching.find_descriptor", "home.repos.pwc.inspect_result.jamt9000_DVE.None.test_matching.compute_pixel_err", "home.repos.pwc.inspect_result.jamt9000_DVE.None.test_matching.find_descriptor", "home.repos.pwc.inspect_result.jamt9000_DVE.None.test_matching.compute_pixel_err", "home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config.ConfigParser.get", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.visualization.norm_range", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.visualization.norm_range", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.visualization.norm_range", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.visualization.norm_range", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.visualization.norm_range", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.visualization.norm_range", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.visualization.norm_range"], ["", "def", "evaluation", "(", "config", ",", "logger", "=", "None", ",", "eval_data", "=", "None", ")", ":", "\n", "    ", "device", "=", "torch", ".", "device", "(", "'cuda:0'", "if", "config", "[", "\"n_gpu\"", "]", ">", "0", "else", "'cpu'", ")", "\n", "\n", "if", "logger", "is", "None", ":", "\n", "        ", "logger", "=", "config", ".", "get_logger", "(", "'test'", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Running evaluation with configuration:\"", ")", "\n", "logger", ".", "info", "(", "config", ")", "\n", "\n", "imwidth", "=", "config", "[", "'dataset'", "]", "[", "'args'", "]", "[", "'imwidth'", "]", "\n", "root", "=", "config", "[", "\"dataset\"", "]", "[", "\"args\"", "]", "[", "\"root\"", "]", "\n", "warp_crop_default", "=", "config", "[", "'warper'", "]", "[", "'args'", "]", ".", "get", "(", "'crop'", ",", "None", ")", "\n", "crop", "=", "config", "[", "'dataset'", "]", "[", "'args'", "]", ".", "get", "(", "'crop'", ",", "warp_crop_default", ")", "\n", "\n", "# Want explicit pair warper", "\n", "disable_warps", "=", "True", "\n", "dense_match", "=", "config", ".", "get", "(", "\"dense_match\"", ",", "False", ")", "\n", "if", "dense_match", "and", "disable_warps", ":", "\n", "# rotsd = 2.5", "\n", "# scalesd=0.1 * .5", "\n", "        ", "rotsd", "=", "0", "\n", "scalesd", "=", "0", "\n", "warp_kwargs", "=", "dict", "(", "\n", "warpsd_all", "=", "0", ",", "\n", "warpsd_subset", "=", "0", ",", "\n", "transsd", "=", "0", ",", "\n", "scalesd", "=", "scalesd", ",", "\n", "rotsd", "=", "rotsd", ",", "\n", "im1_multiplier", "=", "1", ",", "\n", "im1_multiplier_aff", "=", "1", "\n", ")", "\n", "", "else", ":", "\n", "        ", "warp_kwargs", "=", "dict", "(", "\n", "warpsd_all", "=", "0.001", "*", ".5", ",", "\n", "warpsd_subset", "=", "0.01", "*", ".5", ",", "\n", "transsd", "=", "0.1", "*", ".5", ",", "\n", "scalesd", "=", "0.1", "*", ".5", ",", "\n", "rotsd", "=", "5", "*", ".5", ",", "\n", "im1_multiplier", "=", "1", ",", "\n", "im1_multiplier_aff", "=", "1", "\n", ")", "\n", "", "warper", "=", "tps", ".", "Warper", "(", "imwidth", ",", "imwidth", ",", "**", "warp_kwargs", ")", "\n", "if", "eval_data", "is", "None", ":", "\n", "        ", "eval_data", "=", "config", "[", "\"dataset\"", "]", "[", "\"type\"", "]", "\n", "", "constructor", "=", "getattr", "(", "module_data", ",", "eval_data", ")", "\n", "\n", "# handle the case of the MAFL split, which by default will evaluate on Celeba", "\n", "kwargs", "=", "{", "\"val_split\"", ":", "\"mafl\"", "}", "if", "eval_data", "==", "\"CelebAPrunedAligned_MAFLVal\"", "else", "{", "}", "\n", "val_dataset", "=", "constructor", "(", "\n", "train", "=", "False", ",", "\n", "pair_warper", "=", "warper", ",", "\n", "use_keypoints", "=", "True", ",", "\n", "imwidth", "=", "imwidth", ",", "\n", "crop", "=", "crop", ",", "\n", "root", "=", "root", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "# NOTE: Since the matching is performed with pairs, we fix the ordering and then", "\n", "# use all pairs for datasets with even numbers of images, and all but one for", "\n", "# datasets that have odd numbers of images (via drop_last=True)", "\n", "data_loader", "=", "DataLoader", "(", "val_dataset", ",", "batch_size", "=", "2", ",", "collate_fn", "=", "dict_coll", ",", "\n", "shuffle", "=", "False", ",", "drop_last", "=", "True", ")", "\n", "\n", "# build model architecture", "\n", "model", "=", "get_instance", "(", "module_arch", ",", "'arch'", ",", "config", ")", "\n", "model", ".", "summary", "(", ")", "\n", "\n", "# load state dict", "\n", "ckpt_path", "=", "config", ".", "_args", ".", "resume", "\n", "logger", ".", "info", "(", "f\"Loading checkpoint: {ckpt_path} ...\"", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "ckpt_path", ")", "\n", "# checkpoint = torch.load(config[\"weights\"])", "\n", "state_dict", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "if", "config", "[", "'n_gpu'", "]", ">", "1", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", "\n", "", "model", ".", "load_state_dict", "(", "clean_state_dict", "(", "state_dict", ")", ")", "\n", "if", "config", "[", "'n_gpu'", "]", ">", "1", ":", "\n", "        ", "model", "=", "model", ".", "module", "\n", "\n", "", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "if", "dense_match", ":", "\n", "        ", "warp_dir", "=", "Path", "(", "config", "[", "\"warp_dir\"", "]", ")", "/", "config", "[", "\"name\"", "]", "\n", "warp_dir", "=", "warp_dir", "/", "\"disable_warps{}\"", ".", "format", "(", "disable_warps", ")", "\n", "if", "not", "warp_dir", ".", "exists", "(", ")", ":", "\n", "            ", "warp_dir", ".", "mkdir", "(", "exist_ok", "=", "True", ",", "parents", "=", "True", ")", "\n", "", "writer", "=", "SummaryWriter", "(", "warp_dir", ")", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "same_errs", "=", "[", "]", "\n", "diff_errs", "=", "[", "]", "\n", "\n", "torch", ".", "manual_seed", "(", "0", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", ",", "batch", "in", "enumerate", "(", "tqdm", "(", "data_loader", ")", ")", ":", "\n", "            ", "data", ",", "meta", "=", "batch", "[", "\"data\"", "]", ",", "batch", "[", "\"meta\"", "]", "\n", "\n", "if", "(", "config", ".", "get", "(", "\"mini_eval\"", ",", "False", ")", "and", "i", ">", "3", ")", ":", "\n", "                ", "break", "\n", "# if i == 0:", "\n", "#     # Checksum to make sure warps are deterministic", "\n", "#     if True:", "\n", "#         # redo later", "\n", "#         if data.shape[2] == 64:", "\n", "#             assert float(data.sum()) == -553.9221801757812", "\n", "#         elif data.shape[2] == 128:", "\n", "#             assert float(data.sum()) == 754.1907348632812", "\n", "\n", "", "data", "=", "data", ".", "to", "(", "device", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "\n", "descs", "=", "output", "[", "0", "]", "\n", "descs1", "=", "descs", "[", "0", ":", ":", "2", "]", "# 1st in pair (more warped)", "\n", "descs2", "=", "descs", "[", "1", ":", ":", "2", "]", "# 2nd in pair", "\n", "ims1", "=", "data", "[", "0", ":", ":", "2", "]", ".", "cpu", "(", ")", "\n", "ims2", "=", "data", "[", "1", ":", ":", "2", "]", ".", "cpu", "(", ")", "\n", "\n", "im_source", "=", "ims1", "[", "0", "]", "\n", "im_same", "=", "ims2", "[", "0", "]", "\n", "im_diff", "=", "ims2", "[", "1", "]", "\n", "\n", "C", ",", "imH", ",", "imW", "=", "im_source", ".", "shape", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "descs1", ".", "shape", "\n", "stride", "=", "imW", "/", "W", "\n", "\n", "desc_source", "=", "descs1", "[", "0", "]", "\n", "desc_same", "=", "descs2", "[", "0", "]", "\n", "desc_diff", "=", "descs2", "[", "1", "]", "\n", "\n", "if", "not", "dense_match", ":", "\n", "                ", "kp1", "=", "meta", "[", "'kp1'", "]", "\n", "kp2", "=", "meta", "[", "'kp2'", "]", "\n", "kp_source", "=", "kp1", "[", "0", "]", "\n", "kp_same", "=", "kp2", "[", "0", "]", "\n", "kp_diff", "=", "kp2", "[", "1", "]", "\n", "\n", "", "if", "config", ".", "get", "(", "\"vis\"", ",", "False", ")", ":", "\n", "                ", "fig", "=", "plt", ".", "figure", "(", ")", "# a new figure window", "\n", "ax1", "=", "fig", ".", "add_subplot", "(", "1", ",", "3", ",", "1", ")", "\n", "ax2", "=", "fig", ".", "add_subplot", "(", "1", ",", "3", ",", "2", ")", "\n", "ax3", "=", "fig", ".", "add_subplot", "(", "1", ",", "3", ",", "3", ")", "\n", "\n", "ax1", ".", "imshow", "(", "norm_range", "(", "im_source", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "ax2", ".", "imshow", "(", "norm_range", "(", "im_same", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "ax3", ".", "imshow", "(", "norm_range", "(", "im_diff", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "\n", "if", "not", "dense_match", ":", "\n", "                    ", "ax1", ".", "scatter", "(", "kp_source", "[", ":", ",", "0", "]", ",", "kp_source", "[", ":", ",", "1", "]", ",", "c", "=", "'g'", ")", "\n", "ax2", ".", "scatter", "(", "kp_same", "[", ":", ",", "0", "]", ",", "kp_same", "[", ":", ",", "1", "]", ",", "c", "=", "'g'", ")", "\n", "ax3", ".", "scatter", "(", "kp_diff", "[", ":", ",", "0", "]", ",", "kp_diff", "[", ":", ",", "1", "]", ",", "c", "=", "'g'", ")", "\n", "\n", "", "", "if", "False", ":", "\n", "                ", "fsrc", "=", "F", ".", "normalize", "(", "desc_source", ",", "p", "=", "2", ",", "dim", "=", "0", ")", "\n", "fsame", "=", "F", ".", "normalize", "(", "desc_same", ",", "p", "=", "2", ",", "dim", "=", "0", ")", "\n", "fdiff", "=", "F", ".", "normalize", "(", "desc_diff", ",", "p", "=", "2", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "fsrc", "=", "desc_source", ".", "clone", "(", ")", "\n", "fsame", "=", "desc_same", ".", "clone", "(", ")", "\n", "fdiff", "=", "desc_diff", ".", "clone", "(", ")", "\n", "\n", "", "if", "dense_match", ":", "\n", "# if False:", "\n", "#     print(\"DEBUGGING WITH IDENTICAL FEATS\")", "\n", "#     fdiff = fsrc", "\n", "# tic = time.time()", "\n", "                ", "grid", "=", "dense_desc_match", "(", "fsrc", ",", "fdiff", ")", "\n", "im_warped", "=", "F", ".", "grid_sample", "(", "im_source", ".", "view", "(", "1", ",", "3", ",", "imH", ",", "imW", ")", ",", "grid", ")", "\n", "im_warped", "=", "im_warped", ".", "squeeze", "(", "0", ")", "\n", "# print(\"done matching in {:.3f}s\".format(time.time() - tic))", "\n", "plt", ".", "close", "(", "\"all\"", ")", "\n", "if", "config", "[", "\"subplots\"", "]", ":", "\n", "                    ", "fig", "=", "plt", ".", "figure", "(", ")", "# a new figure window", "\n", "ax1", "=", "fig", ".", "add_subplot", "(", "1", ",", "3", ",", "1", ")", "\n", "ax2", "=", "fig", ".", "add_subplot", "(", "1", ",", "3", ",", "2", ")", "\n", "ax3", "=", "fig", ".", "add_subplot", "(", "1", ",", "3", ",", "3", ")", "\n", "ax1", ".", "imshow", "(", "norm_range", "(", "im_source", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "ax2", ".", "imshow", "(", "norm_range", "(", "im_diff", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "ax3", ".", "imshow", "(", "norm_range", "(", "im_warped", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "triplet_dest", "=", "warp_dir", "/", "\"triplet-{:05d}.jpg\"", ".", "format", "(", "i", ")", "\n", "fig", ".", "savefig", "(", "triplet_dest", ")", "\n", "", "else", ":", "\n", "                    ", "triplet_dest_dir", "=", "warp_dir", "/", "\"triplet-{:05d}\"", ".", "format", "(", "i", ")", "\n", "if", "not", "triplet_dest_dir", ".", "exists", "(", ")", ":", "\n", "                        ", "triplet_dest_dir", ".", "mkdir", "(", "exist_ok", "=", "True", ",", "parents", "=", "True", ")", "\n", "", "for", "jj", ",", "im", "in", "enumerate", "(", "(", "im_source", ",", "im_diff", ",", "im_warped", ")", ")", ":", "\n", "                        ", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "1.5", ",", "1.5", ")", ")", "\n", "ax", "=", "plt", ".", "Axes", "(", "fig", ",", "[", "0.", ",", "0.", ",", "1.", ",", "1.", "]", ")", "\n", "ax", ".", "set_axis_off", "(", ")", "\n", "fig", ".", "add_axes", "(", "ax", ")", "\n", "# ax.imshow(data, cmap = plt.get_cmap(\"bone\"))", "\n", "im_", "=", "norm_range", "(", "im", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "\n", "ax", ".", "imshow", "(", "im_", ")", "\n", "dest_path", "=", "triplet_dest_dir", "/", "\"im-{}-{}.jpg\"", ".", "format", "(", "i", ",", "jj", ")", "\n", "plt", ".", "savefig", "(", "str", "(", "dest_path", ")", ",", "dpi", "=", "im_", ".", "shape", "[", "0", "]", ")", "\n", "# plt.savefig(filename, dpi = sizes[0])", "\n", "", "", "writer", ".", "add_figure", "(", "'warp-triplets'", ",", "fig", ")", "\n", "", "else", ":", "\n", "                ", "for", "ki", ",", "kp", "in", "enumerate", "(", "kp_source", ")", ":", "\n", "                    ", "x", ",", "y", "=", "np", ".", "array", "(", "kp", ")", "\n", "gt_same_x", ",", "gt_same_y", "=", "np", ".", "array", "(", "kp_same", "[", "ki", "]", ")", "\n", "gt_diff_x", ",", "gt_diff_y", "=", "np", ".", "array", "(", "kp_diff", "[", "ki", "]", ")", "\n", "same_x", ",", "same_y", "=", "find_descriptor", "(", "x", ",", "y", ",", "fsrc", ",", "fsame", ",", "stride", ")", "\n", "\n", "err", "=", "compute_pixel_err", "(", "\n", "pred_x", "=", "same_x", ",", "\n", "pred_y", "=", "same_y", ",", "\n", "gt_x", "=", "gt_same_x", ",", "\n", "gt_y", "=", "gt_same_y", ",", "\n", "imwidth", "=", "imwidth", ",", "\n", "crop", "=", "crop", ",", "\n", ")", "\n", "same_errs", ".", "append", "(", "err", ")", "\n", "diff_x", ",", "diff_y", "=", "find_descriptor", "(", "x", ",", "y", ",", "fsrc", ",", "fdiff", ",", "stride", ")", "\n", "err", "=", "compute_pixel_err", "(", "\n", "pred_x", "=", "diff_x", ",", "\n", "pred_y", "=", "diff_y", ",", "\n", "gt_x", "=", "gt_diff_x", ",", "\n", "gt_y", "=", "gt_diff_y", ",", "\n", "imwidth", "=", "imwidth", ",", "\n", "crop", "=", "crop", ",", "\n", ")", "\n", "diff_errs", ".", "append", "(", "err", ")", "\n", "if", "config", ".", "get", "(", "\"vis\"", ",", "False", ")", ":", "\n", "                        ", "ax2", ".", "scatter", "(", "same_x", ",", "same_y", ",", "c", "=", "'b'", ")", "\n", "ax3", ".", "scatter", "(", "diff_x", ",", "diff_y", ",", "c", "=", "'b'", ")", "\n", "\n", "", "", "", "if", "config", ".", "get", "(", "\"vis\"", ",", "False", ")", ":", "\n", "                ", "zs_dispFig", "(", ")", "\n", "fig", ".", "savefig", "(", "'/tmp/matching.pdf'", ")", "\n", "\n", "", "", "", "print", "(", "\"\"", ")", "# cleanup print from tqdm subtraction", "\n", "logger", ".", "info", "(", "\"Matching Metrics:\"", ")", "\n", "logger", ".", "info", "(", "f\"Mean Pixel Error (same-identity): {np.mean(same_errs)}\"", ")", "\n", "logger", ".", "info", "(", "f\"Mean Pixel Error (different-identity) {np.mean(diff_errs)}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.None.train.main": [[22, 183], ["config.get_logger", "config.get_logger.info", "config.get_logger.info", "int", "len", "time.time", "config.get_logger.info", "random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "utils.get_instance", "config.get_logger.info", "config.get", "utils.get_instance", "config.get", "torch.utils.data.DataLoader", "config.get", "utils.get_instance", "torch.utils.data.DataLoader", "getattr", "list", "print", "config.get", "utils.get_instance", "trainer.Trainer", "trainer.Trainer.train", "time.strftime", "config.get_logger.info", "config.get_logger.info", "config._args.seeds.split", "config.keys", "torch.load", "torch.load", "torch.load", "nn.Sequential.load_state_dict", "print", "config.keys", "utils.get_instance", "utils.NoGradWrapper", "config.get", "config.keys", "utils.get_instance", "[].get", "config.get", "utils.get_instance", "utils.get_instance.restrict_annos", "config.get_logger.info", "getattr", "filter", "config.keys", "list", "len", "len", "utils.get_instance", "utils.get_instance", "time.gmtime", "config.keys", "test_matching.evaluation", "config.get_logger.info", "len", "config.keys", "utils.clean_state_dict", "torch.Sequential", "torch.Sequential", "utils.NoGradWrapper", "torch.Sequential", "torch.Sequential", "config.keys", "ValueError", "int", "getattr", "nn.Sequential.parameters", "filter", "nn.Sequential.modules", "isinstance", "sum", "run_metrics.append", "utils.Up", "utils.Up", "utils.NoGradWrapper.parameters", "sum", "time.time", "config.keys", "len", "copy.deepcopy", "numpy.mean", "numpy.std", "sum"], "function", ["home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config.ConfigParser.get_logger", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.util.get_instance", "home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config.ConfigParser.get", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.util.get_instance", "home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config.ConfigParser.get", "home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config.ConfigParser.get", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.util.get_instance", "home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config.ConfigParser.get", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.util.get_instance", "home.repos.pwc.inspect_result.jamt9000_DVE.base.base_trainer.BaseTrainer.train", "home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config.ConfigParser.keys", "home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config.ConfigParser.keys", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.util.get_instance", "home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config.ConfigParser.get", "home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config.ConfigParser.keys", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.util.get_instance", "home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config.ConfigParser.get", "home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config.ConfigParser.get", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.util.get_instance", "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.data_loaders.CelebABase.restrict_annos", "home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config.ConfigParser.keys", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.util.get_instance", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.util.get_instance", "home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config.ConfigParser.keys", "home.repos.pwc.inspect_result.jamt9000_DVE.None.test_matching.evaluation", "home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config.ConfigParser.keys", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.util.clean_state_dict", "home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config.ConfigParser.keys", "home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config.ConfigParser.keys"], ["def", "main", "(", "config", ",", "resume", ")", ":", "\n", "    ", "logger", "=", "config", ".", "get_logger", "(", "'train'", ")", "\n", "seeds", "=", "[", "int", "(", "x", ")", "for", "x", "in", "config", ".", "_args", ".", "seeds", ".", "split", "(", "\",\"", ")", "]", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "logger", ".", "info", "(", "\"Launching experiment with config:\"", ")", "\n", "logger", ".", "info", "(", "config", ")", "\n", "\n", "if", "len", "(", "seeds", ")", ">", "1", ":", "\n", "        ", "run_metrics", "=", "[", "]", "\n", "\n", "", "for", "seed", "in", "seeds", ":", "\n", "        ", "tic", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "f\"Setting experiment random seed to {seed}\"", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "\n", "model", "=", "get_instance", "(", "module_arch", ",", "'arch'", ",", "config", ")", "\n", "logger", ".", "info", "(", "model", ")", "\n", "\n", "if", "'finetune_from'", "in", "config", ".", "keys", "(", ")", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "config", "[", "'finetune_from'", "]", ")", "\n", "model", ".", "load_state_dict", "(", "clean_state_dict", "(", "checkpoint", "[", "\"state_dict\"", "]", ")", ")", "\n", "print", "(", "'Finetuning from %s'", "%", "config", "[", "'finetune_from'", "]", ")", "\n", "\n", "", "if", "'keypoint_regressor'", "in", "config", ".", "keys", "(", ")", ":", "\n", "            ", "descdim", "=", "config", "[", "'arch'", "]", "[", "'args'", "]", "[", "'num_output_channels'", "]", "\n", "kp_regressor", "=", "get_instance", "(", "module_arch", ",", "'keypoint_regressor'", ",", "config", ",", "\n", "descriptor_dimension", "=", "descdim", ")", "\n", "basemodel", "=", "NoGradWrapper", "(", "model", ")", "\n", "\n", "if", "config", ".", "get", "(", "'keypoint_regressor_upsample'", ",", "False", ")", ":", "\n", "                ", "model", "=", "nn", ".", "Sequential", "(", "basemodel", ",", "Up", "(", ")", ",", "kp_regressor", ")", "\n", "", "else", ":", "\n", "                ", "model", "=", "nn", ".", "Sequential", "(", "basemodel", ",", "kp_regressor", ")", "\n", "\n", "", "", "if", "'segmentation_head'", "in", "config", ".", "keys", "(", ")", ":", "\n", "            ", "descdim", "=", "config", "[", "'arch'", "]", "[", "'args'", "]", "[", "'num_output_channels'", "]", "\n", "segmenter", "=", "get_instance", "(", "module_arch", ",", "'segmentation_head'", ",", "config", ",", "\n", "descriptor_dimension", "=", "descdim", ")", "\n", "if", "config", "[", "\"segmentation_head\"", "]", "[", "\"args\"", "]", ".", "get", "(", "\"freeze_base\"", ",", "True", ")", ":", "\n", "                ", "basemodel", "=", "NoGradWrapper", "(", "model", ")", "\n", "", "else", ":", "\n", "                ", "basemodel", "=", "model", "\n", "\n", "", "if", "config", ".", "get", "(", "'segmentation_upsample'", ",", "False", ")", ":", "\n", "                ", "model", "=", "nn", ".", "Sequential", "(", "basemodel", ",", "Up", "(", ")", ",", "segmenter", ")", "\n", "", "else", ":", "\n", "                ", "model", "=", "nn", ".", "Sequential", "(", "basemodel", ",", "segmenter", ")", "\n", "\n", "# setup data_loader instances", "\n", "", "", "imwidth", "=", "config", "[", "'dataset'", "]", "[", "'args'", "]", "[", "'imwidth'", "]", "\n", "warper", "=", "get_instance", "(", "tps", ",", "'warper'", ",", "config", ",", "imwidth", ",", "\n", "imwidth", ")", "if", "'warper'", "in", "config", ".", "keys", "(", ")", "else", "None", "\n", "\n", "loader_kwargs", "=", "{", "}", "\n", "coll_func", "=", "config", ".", "get", "(", "\"collate_fn\"", ",", "\"dict_flatten\"", ")", "\n", "if", "coll_func", "==", "\"flatten\"", ":", "\n", "            ", "loader_kwargs", "[", "\"collate_fn\"", "]", "=", "coll", "\n", "", "elif", "coll_func", "==", "\"dict_flatten\"", ":", "\n", "            ", "loader_kwargs", "[", "\"collate_fn\"", "]", "=", "dict_coll", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"collate function type {} unrecognised\"", ".", "format", "(", "coll_func", ")", ")", "\n", "\n", "", "dataset", "=", "get_instance", "(", "module_data", ",", "'dataset'", ",", "config", ",", "pair_warper", "=", "warper", ",", "\n", "train", "=", "True", ")", "\n", "if", "config", "[", "\"disable_workers\"", "]", ":", "\n", "            ", "num_workers", "=", "0", "\n", "", "else", ":", "\n", "            ", "num_workers", "=", "4", "\n", "\n", "", "if", "config", ".", "get", "(", "\"restrict_annos\"", ",", "False", ")", ":", "\n", "            ", "dataset", ".", "restrict_annos", "(", "num", "=", "config", "[", "\"restrict_annos\"", "]", ")", "\n", "logger", ".", "info", "(", "f\"restricting annotation to {config['restrict_annos']} samples...\"", ")", "\n", "\n", "", "data_loader", "=", "DataLoader", "(", "\n", "dataset", ",", "\n", "batch_size", "=", "int", "(", "config", "[", "\"batch_size\"", "]", ")", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "True", ",", "\n", "pin_memory", "=", "True", ",", "\n", "**", "loader_kwargs", ",", "\n", ")", "\n", "\n", "warp_val", "=", "config", ".", "get", "(", "'warp_val'", ",", "True", ")", "\n", "val_dataset", "=", "get_instance", "(", "\n", "module_data", ",", "\n", "'dataset'", ",", "\n", "config", ",", "\n", "train", "=", "False", ",", "\n", "pair_warper", "=", "warper", "if", "warp_val", "else", "None", ",", "\n", ")", "\n", "valid_data_loader", "=", "DataLoader", "(", "val_dataset", ",", "batch_size", "=", "32", ",", "**", "loader_kwargs", ")", "\n", "\n", "# get function handles of loss and metrics", "\n", "loss", "=", "getattr", "(", "module_loss", ",", "config", "[", "'loss'", "]", ")", "\n", "metrics", "=", "[", "getattr", "(", "module_metric", ",", "met", ")", "for", "met", "in", "config", "[", "'metrics'", "]", "]", "\n", "if", "not", "config", "[", "\"vis\"", "]", ":", "\n", "            ", "visualizations", "=", "[", "]", "\n", "", "else", ":", "\n", "            ", "visualizations", "=", "[", "\n", "getattr", "(", "module_visualization", ",", "vis", ")", "for", "vis", "in", "config", "[", "'visualizations'", "]", "\n", "]", "\n", "\n", "", "trainable_params", "=", "list", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model", ".", "parameters", "(", ")", ")", ")", "\n", "\n", "if", "'keypoint_regressor'", "in", "config", ".", "keys", "(", ")", ":", "\n", "            ", "base_params", "=", "list", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "basemodel", ".", "parameters", "(", ")", ")", ")", "\n", "trainable_params", "=", "[", "\n", "x", "for", "x", "in", "trainable_params", "if", "not", "sum", "(", "[", "(", "x", "is", "w", ")", "for", "w", "in", "base_params", "]", ")", "\n", "]", "\n", "\n", "", "biases", "=", "[", "x", ".", "bias", "for", "x", "in", "model", ".", "modules", "(", ")", "if", "isinstance", "(", "x", ",", "nn", ".", "Conv2d", ")", "]", "\n", "\n", "trainbiases", "=", "[", "x", "for", "x", "in", "trainable_params", "if", "sum", "(", "[", "(", "x", "is", "b", ")", "for", "b", "in", "biases", "]", ")", "]", "\n", "trainweights", "=", "[", "x", "for", "x", "in", "trainable_params", "if", "not", "sum", "(", "[", "(", "x", "is", "b", ")", "for", "b", "in", "biases", "]", ")", "]", "\n", "print", "(", "len", "(", "trainbiases", ")", ",", "'Biases'", ",", "len", "(", "trainweights", ")", ",", "'Weights'", ")", "\n", "\n", "bias_lr", "=", "config", ".", "get", "(", "'bias_lr'", ",", "None", ")", "\n", "if", "bias_lr", "is", "not", "None", ":", "\n", "            ", "optimizer", "=", "get_instance", "(", "torch", ".", "optim", ",", "'optimizer'", ",", "config", ",", "[", "{", "\n", "\"params\"", ":", "trainweights", "\n", "}", ",", "{", "\n", "\"params\"", ":", "trainbiases", ",", "\n", "\"lr\"", ":", "bias_lr", "\n", "}", "]", ")", "\n", "", "else", ":", "\n", "            ", "optimizer", "=", "get_instance", "(", "torch", ".", "optim", ",", "'optimizer'", ",", "config", ",", "trainable_params", ")", "\n", "\n", "", "lr_scheduler", "=", "get_instance", "(", "torch", ".", "optim", ".", "lr_scheduler", ",", "'lr_scheduler'", ",", "config", ",", "\n", "optimizer", ")", "\n", "trainer", "=", "Trainer", "(", "\n", "model", "=", "model", ",", "\n", "loss", "=", "loss", ",", "\n", "metrics", "=", "metrics", ",", "\n", "resume", "=", "resume", ",", "\n", "config", "=", "config", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "data_loader", "=", "data_loader", ",", "\n", "lr_scheduler", "=", "lr_scheduler", ",", "\n", "visualizations", "=", "visualizations", ",", "\n", "mini_train", "=", "config", ".", "_args", ".", "mini_train", ",", "\n", "valid_data_loader", "=", "valid_data_loader", ",", "\n", ")", "\n", "trainer", ".", "train", "(", ")", "\n", "duration", "=", "time", ".", "strftime", "(", "'%Hh%Mm%Ss'", ",", "time", ".", "gmtime", "(", "time", ".", "time", "(", ")", "-", "tic", ")", ")", "\n", "logger", ".", "info", "(", "f\"Training took {duration}\"", ")", "\n", "if", "\"keypoint_regressor\"", "not", "in", "config", ".", "keys", "(", ")", ":", "\n", "            ", "epoch", "=", "config", "[", "\"trainer\"", "]", "[", "\"epochs\"", "]", "\n", "config", ".", "_args", ".", "resume", "=", "config", ".", "save_dir", "/", "f\"checkpoint-epoch{epoch}.pth\"", "\n", "config", "[", "\"mini_eval\"", "]", "=", "config", ".", "_args", ".", "mini_train", "\n", "evaluation", "(", "config", ",", "logger", "=", "logger", ")", "\n", "logger", ".", "info", "(", "f\"Log written to {config.log_path}\"", ")", "\n", "", "elif", "\"keypoint_regressor\"", "in", "config", ".", "keys", "(", ")", "and", "len", "(", "seeds", ")", ">", "1", ":", "\n", "            ", "run_metrics", ".", "append", "(", "copy", ".", "deepcopy", "(", "trainer", ".", "latest_log", ")", ")", "\n", "\n", "", "", "if", "len", "(", "seeds", ")", ">", "1", "and", "\"keypoint_regressor\"", "in", "config", ".", "keys", "(", ")", ":", "\n", "        ", "target", "=", "\"val_inter_ocular_error\"", "\n", "errors", "=", "[", "x", "[", "target", "]", "for", "x", "in", "run_metrics", "]", "\n", "logger", ".", "info", "(", "f\"{target} -> mean: {np.mean(errors)}, std: {np.std(errors)}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config.ConfigParser.__init__": [[14, 93], ["pathlib.Path", "utils.util.read_json", "parse_config._update_config", "parse_config.ConfigParser._config.get", "vars().get", "parse_config.ConfigParser.save_dir.mkdir", "parse_config.ConfigParser.log_dir.mkdir", "utils.util.write_json", "args.parse_args.parse_args.add_argument", "args.parse_args.parse_args.parse_args", "args.parse_args.parse_args.parse_args", "pathlib.Path", "parse_config.ConfigParser._config.get", "pathlib.Path().exists", "pathlib.Path", "pathlib.Path", "datetime.datetime.datetime.now().strftime", "logger.setup_logging", "vars", "list", "print", "time.time", "os.system", "print", "pathlib.Path", "datetime.datetime.datetime.now", "config_dir.glob", "parse_config.ConfigParser._config.get", "len", "time.time"], "methods", ["home.repos.pwc.inspect_result.jamt9000_DVE.utils.util.read_json", "home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config._update_config", "home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config.ConfigParser.get", "home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config.ConfigParser.get", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.util.write_json", "home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config.ConfigParser.get", "home.repos.pwc.inspect_result.jamt9000_DVE.logger.logger.setup_logging", "home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config.ConfigParser.get"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "options", "=", "''", ",", "timestamp", "=", "True", ",", "slave_mode", "=", "False", ")", ":", "\n", "# slave_mode - when calling the config parser form an existing process, we", "\n", "# avoid reinitialising the logger and ignore sys.argv when argparsing.", "\n", "\n", "# parse default and custom cli options", "\n", "        ", "for", "opt", "in", "options", ":", "\n", "            ", "args", ".", "add_argument", "(", "*", "opt", ".", "flags", ",", "default", "=", "None", ",", "type", "=", "opt", ".", "type", ")", "\n", "\n", "", "if", "slave_mode", ":", "\n", "            ", "args", "=", "args", ".", "parse_args", "(", "args", "=", "[", "]", ")", "\n", "", "else", ":", "\n", "            ", "args", "=", "args", ".", "parse_args", "(", ")", "\n", "\n", "", "if", "args", ".", "device", ":", "\n", "            ", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "args", ".", "device", "\n", "\n", "", "if", "args", ".", "resume", "and", "not", "slave_mode", ":", "\n", "            ", "self", ".", "resume", "=", "Path", "(", "args", ".", "resume", ")", "\n", "# self.cfg_fname = self.resume.parent / 'config.json'", "\n", "", "else", ":", "\n", "            ", "msg_no_cfg", "=", "\"Config file must be specified\"", "\n", "assert", "args", ".", "config", "is", "not", "None", ",", "msg_no_cfg", "\n", "self", ".", "resume", "=", "None", "\n", "", "self", ".", "cfg_fname", "=", "Path", "(", "args", ".", "config", ")", "\n", "\n", "# load config file and apply custom cli options", "\n", "config", "=", "read_json", "(", "self", ".", "cfg_fname", ")", "\n", "self", ".", "_config", "=", "_update_config", "(", "config", ",", "options", ",", "args", ")", "\n", "\n", "if", "self", ".", "_config", ".", "get", "(", "\"eval_config\"", ",", "False", ")", ":", "\n", "# validate path to evaluation file", "\n", "            ", "eval_cfg_path", "=", "self", ".", "_config", ".", "get", "(", "\"eval_config\"", ")", "\n", "msg", "=", "f\"eval_config was specified, but `{eval_cfg_path}` does not exist\"", "\n", "assert", "Path", "(", "self", ".", "_config", ".", "get", "(", "\"eval_config\"", ")", ")", ".", "exists", "(", ")", ",", "msg", "\n", "\n", "# set save_dir where trained model and log will be saved.", "\n", "", "if", "\"trainer\"", "in", "self", ".", "config", ":", "\n", "            ", "save_dir", "=", "Path", "(", "self", ".", "config", "[", "'trainer'", "]", "[", "'save_dir'", "]", ")", "\n", "", "else", ":", "\n", "            ", "save_dir", "=", "Path", "(", "self", ".", "config", "[", "'tester'", "]", "[", "'save_dir'", "]", ")", "\n", "", "timestamp", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "r\"%Y-%m-%d_%H-%M-%S\"", ")", "if", "timestamp", "else", "\"\"", "\n", "\n", "if", "slave_mode", ":", "\n", "            ", "timestamp", "=", "f\"{timestamp}-eval-worker\"", "\n", "\n", "# We assume that the config files are organised into directories such that", "\n", "# each directory has the name of the dataset.", "\n", "", "dataset_name", "=", "self", ".", "cfg_fname", ".", "parent", ".", "stem", "\n", "exper_name", "=", "f\"{dataset_name}-{self.cfg_fname.stem}\"", "\n", "self", ".", "_save_dir", "=", "save_dir", "/", "'models'", "/", "exper_name", "/", "timestamp", "\n", "self", ".", "_log_dir", "=", "save_dir", "/", "'log'", "/", "exper_name", "/", "timestamp", "\n", "self", ".", "_web_log_dir", "=", "save_dir", "/", "'web'", "/", "exper_name", "/", "timestamp", "\n", "self", ".", "_exper_name", "=", "exper_name", "\n", "self", ".", "_args", "=", "args", "\n", "\n", "# if set, remove all previous experiments with the current config", "\n", "if", "vars", "(", "args", ")", ".", "get", "(", "\"purge_exp_dir\"", ",", "False", ")", ":", "\n", "            ", "for", "dirpath", "in", "(", "self", ".", "_save_dir", ",", "self", ".", "_log_dir", ",", "self", ".", "_web_log_dir", ")", ":", "\n", "                ", "config_dir", "=", "dirpath", ".", "parent", "\n", "existing", "=", "list", "(", "config_dir", ".", "glob", "(", "\"*\"", ")", ")", "\n", "print", "(", "f\"purging {len(existing)} directories from config_dir...\"", ")", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "os", ".", "system", "(", "f\"rm -rf {config_dir}\"", ")", "\n", "print", "(", "f\"Finished purge in {time.time() - tic:.3f}s\"", ")", "\n", "\n", "", "", "self", ".", "save_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "log_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# save updated config file to the checkpoint dir", "\n", "write_json", "(", "self", ".", "config", ",", "self", ".", "save_dir", "/", "'config.json'", ")", "\n", "\n", "# configure logging module", "\n", "if", "not", "slave_mode", ":", "\n", "            ", "self", ".", "log_path", "=", "setup_logging", "(", "self", ".", "log_dir", ")", "\n", "\n", "", "self", ".", "log_levels", "=", "{", "\n", "0", ":", "logging", ".", "WARNING", ",", "\n", "1", ":", "logging", ".", "INFO", ",", "\n", "2", ":", "logging", ".", "DEBUG", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config.ConfigParser.init": [[95, 105], ["dict", "all", "dict.update", "getattr"], "methods", ["home.repos.pwc.inspect_result.jamt9000_DVE.trainer.trainer.AverageMeter.update"], ["", "def", "init", "(", "self", ",", "name", ",", "module", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Finds a function handle with the name given as 'type' in config, and returns\n        the instance initialized with corresponding keyword args given as 'args'.\n        \"\"\"", "\n", "module_name", "=", "self", "[", "name", "]", "[", "'type'", "]", "\n", "module_args", "=", "dict", "(", "self", "[", "name", "]", "[", "'args'", "]", ")", "\n", "msg", "=", "'Overwriting kwargs given in config file is not allowed'", "\n", "assert", "all", "(", "[", "k", "not", "in", "module_args", "for", "k", "in", "kwargs", "]", ")", ",", "msg", "\n", "module_args", ".", "update", "(", "kwargs", ")", "\n", "return", "getattr", "(", "module", ",", "module_name", ")", "(", "*", "args", ",", "**", "module_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config.ConfigParser.__getitem__": [[106, 108], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "self", ".", "config", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config.ConfigParser.__setitem__": [[109, 111], ["None"], "methods", ["None"], ["", "def", "__setitem__", "(", "self", ",", "name", ",", "value", ")", ":", "\n", "        ", "self", ".", "config", "[", "name", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config.ConfigParser.keys": [[112, 114], ["parse_config.ConfigParser.config.keys"], "methods", ["home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config.ConfigParser.keys"], ["", "def", "keys", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "config", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config.ConfigParser.get": [[115, 117], ["parse_config.ConfigParser.config.get"], "methods", ["home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config.ConfigParser.get"], ["", "def", "get", "(", "self", ",", "name", ",", "default", ")", ":", "\n", "        ", "return", "self", ".", "config", ".", "get", "(", "name", ",", "default", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config.ConfigParser.get_logger": [[118, 125], ["msg_verbosity.format.format.format", "logging.getLogger", "logging.getLogger.setLevel", "parse_config.ConfigParser.log_levels.keys"], "methods", ["home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config.ConfigParser.keys"], ["", "def", "get_logger", "(", "self", ",", "name", ",", "verbosity", "=", "2", ")", ":", "\n", "        ", "msg_verbosity", "=", "\"verbosity option {} is invalid. Valid options are {}.\"", "\n", "msg_verbosity", "=", "msg_verbosity", ".", "format", "(", "verbosity", ",", "self", ".", "log_levels", ".", "keys", "(", ")", ")", "\n", "assert", "verbosity", "in", "self", ".", "log_levels", ",", "msg_verbosity", "\n", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "logger", ".", "setLevel", "(", "self", ".", "log_levels", "[", "verbosity", "]", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config.ConfigParser.config": [[127, 130], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "config", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config.ConfigParser.save_dir": [[131, 134], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "save_dir", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_save_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config.ConfigParser.log_dir": [[135, 138], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "log_dir", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_log_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config.ConfigParser.__repr__": [[139, 141], ["pprint.PrettyPrinter().pformat", "pprint.PrettyPrinter"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "pprint", ".", "PrettyPrinter", "(", ")", ".", "pformat", "(", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config._update_config": [[144, 150], ["getattr", "parse_config._get_opt_name", "parse_config._set_by_path"], "function", ["home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config._get_opt_name", "home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config._set_by_path"], ["", "", "def", "_update_config", "(", "config", ",", "options", ",", "args", ")", ":", "\n", "    ", "for", "opt", "in", "options", ":", "\n", "        ", "value", "=", "getattr", "(", "args", ",", "_get_opt_name", "(", "opt", ".", "flags", ")", ")", "\n", "if", "value", "is", "not", "None", ":", "\n", "            ", "_set_by_path", "(", "config", ",", "opt", ".", "target", ",", "value", ")", "\n", "", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config._get_opt_name": [[152, 157], ["flags[].replace", "flg.startswith", "flg.replace"], "function", ["None"], ["", "def", "_get_opt_name", "(", "flags", ")", ":", "\n", "    ", "for", "flg", "in", "flags", ":", "\n", "        ", "if", "flg", ".", "startswith", "(", "'--'", ")", ":", "\n", "            ", "return", "flg", ".", "replace", "(", "'--'", ",", "''", ")", "\n", "", "", "return", "flags", "[", "0", "]", ".", "replace", "(", "'--'", ",", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config._set_by_path": [[159, 162], ["parse_config._get_by_path"], "function", ["home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config._get_by_path"], ["", "def", "_set_by_path", "(", "tree", ",", "keys", ",", "value", ")", ":", "\n", "    ", "\"\"\"Set a value in a nested object in tree by sequence of keys.\"\"\"", "\n", "_get_by_path", "(", "tree", ",", "keys", "[", ":", "-", "1", "]", ")", "[", "keys", "[", "-", "1", "]", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config._get_by_path": [[164, 167], ["functools.reduce"], "function", ["None"], ["", "def", "_get_by_path", "(", "tree", ",", "keys", ")", ":", "\n", "    ", "\"\"\"Access a nested object in tree by sequence of keys.\"\"\"", "\n", "return", "reduce", "(", "getitem", ",", "keys", ",", "tree", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.jamt9000_DVE.utils.tps.Warper.__init__": [[70, 92], ["tps.tps_grid", "tps.grid_unnormalize", "tps.tps_grid", "tps.tps_U", "tps.tps_U", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "tps.Warper.grid_pixels.reshape", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.jamt9000_DVE.utils.tps.tps_grid", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.tps.grid_unnormalize", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.tps.tps_grid", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.tps.tps_U", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.tps.tps_U"], ["def", "__init__", "(", "self", ",", "H", ",", "W", ",", "warpsd_all", "=", "0.001", ",", "warpsd_subset", "=", "0.01", ",", "transsd", "=", "0.1", ",", "\n", "scalesd", "=", "0.1", ",", "rotsd", "=", "5", ",", "im1_multiplier", "=", "0.5", ",", "im1_multiplier_aff", "=", "1.", ")", ":", "\n", "        ", "self", ".", "H", "=", "H", "\n", "self", ".", "W", "=", "W", "\n", "self", ".", "warpsd_all", "=", "warpsd_all", "\n", "self", ".", "warpsd_subset", "=", "warpsd_subset", "\n", "self", ".", "transsd", "=", "transsd", "\n", "self", ".", "scalesd", "=", "scalesd", "\n", "self", ".", "rotsd", "=", "rotsd", "\n", "self", ".", "im1_multiplier", "=", "im1_multiplier", "\n", "self", ".", "im1_multiplier_aff", "=", "im1_multiplier_aff", "\n", "\n", "self", ".", "npixels", "=", "H", "*", "W", "\n", "self", ".", "nc", "=", "10", "\n", "self", ".", "nctrlpts", "=", "self", ".", "nc", "*", "self", ".", "nc", "\n", "\n", "self", ".", "grid_pixels", "=", "tps_grid", "(", "H", ",", "W", ")", "\n", "self", ".", "grid_pixels_unnormalized", "=", "grid_unnormalize", "(", "self", ".", "grid_pixels", ".", "reshape", "(", "1", ",", "H", ",", "W", ",", "2", ")", ",", "self", ".", "H", ",", "self", ".", "W", ")", "\n", "self", ".", "grid_ctrlpts", "=", "tps_grid", "(", "self", ".", "nc", ",", "self", ".", "nc", ")", "\n", "self", ".", "U_ctrlpts", "=", "tps_U", "(", "self", ".", "grid_ctrlpts", ",", "self", ".", "grid_ctrlpts", ")", "\n", "self", ".", "U_pixels_ctrlpts", "=", "tps_U", "(", "self", ".", "grid_pixels", ",", "self", ".", "grid_ctrlpts", ")", "\n", "self", ".", "F", "=", "torch", ".", "cat", "(", "(", "self", ".", "U_pixels_ctrlpts", ",", "torch", ".", "ones", "(", "self", ".", "npixels", ",", "1", ")", ",", "self", ".", "grid_pixels", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.utils.tps.Warper.__call__": [[93, 163], ["tps.random_tps_weights", "torch.matmul().reshape", "torch.matmul().reshape", "torch.matmul().reshape", "torch.matmul().reshape", "tps.grid_unnormalize", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "tps.random_tps_weights", "torch.matmul().reshape", "torch.matmul().reshape", "torch.matmul().reshape", "torch.matmul().reshape", "torch.grid_sample", "torch.grid_sample", "tps.grid_unnormalize", "len", "im1.squeeze.squeeze.unsqueeze", "im2.squeeze.squeeze.unsqueeze", "tps.Warper.warp_keypoints", "im1.squeeze.squeeze.squeeze", "im2.squeeze.squeeze.squeeze", "tps.Warper.warp_keypoints", "tps.grid_normalize", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["home.repos.pwc.inspect_result.jamt9000_DVE.utils.tps.random_tps_weights", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.tps.grid_unnormalize", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.tps.random_tps_weights", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.tps.grid_unnormalize", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.tps.WarperSingle.warp_keypoints", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.tps.WarperSingle.warp_keypoints", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.tps.grid_normalize"], ["", "def", "__call__", "(", "self", ",", "im1", ",", "im2", "=", "None", ",", "keypts", "=", "None", ",", "crop", "=", "0", ")", ":", "\n", "        ", "Hc", "=", "self", ".", "H", "-", "crop", "-", "crop", "\n", "Wc", "=", "self", ".", "W", "-", "crop", "-", "crop", "\n", "\n", "# im2 should be a copy of im1 with different colour jitter", "\n", "if", "im2", "is", "None", ":", "\n", "            ", "im2", "=", "im1", "\n", "\n", "", "kp1", "=", "kp2", "=", "0", "\n", "\n", "unsqueezed", "=", "False", "\n", "if", "len", "(", "im1", ".", "shape", ")", "==", "3", ":", "\n", "            ", "im1", "=", "im1", ".", "unsqueeze", "(", "0", ")", "\n", "im2", "=", "im2", ".", "unsqueeze", "(", "0", ")", "\n", "unsqueezed", "=", "True", "\n", "\n", "", "assert", "im1", ".", "shape", "[", "0", "]", "==", "1", "and", "im2", ".", "shape", "[", "0", "]", "==", "1", "\n", "\n", "a", "=", "self", ".", "im1_multiplier", "\n", "b", "=", "self", ".", "im1_multiplier_aff", "\n", "weights1", "=", "random_tps_weights", "(", "self", ".", "nctrlpts", ",", "a", "*", "self", ".", "warpsd_all", ",", "a", "*", "self", ".", "warpsd_subset", ",", "b", "*", "self", ".", "transsd", ",", "\n", "b", "*", "self", ".", "scalesd", ",", "b", "*", "self", ".", "rotsd", ")", "\n", "\n", "grid1", "=", "torch", ".", "matmul", "(", "self", ".", "F", ",", "weights1", ")", ".", "reshape", "(", "1", ",", "self", ".", "H", ",", "self", ".", "W", ",", "2", ")", "\n", "grid1_unnormalized", "=", "grid_unnormalize", "(", "grid1", ",", "self", ".", "H", ",", "self", ".", "W", ")", "\n", "if", "keypts", "is", "not", "None", ":", "\n", "            ", "kp1", "=", "self", ".", "warp_keypoints", "(", "keypts", ",", "grid1_unnormalized", ")", "\n", "\n", "", "im1", "=", "F", ".", "grid_sample", "(", "im1", ",", "grid1", ")", "\n", "im2", "=", "F", ".", "grid_sample", "(", "im2", ",", "grid1", ")", "\n", "\n", "weights2", "=", "random_tps_weights", "(", "self", ".", "nctrlpts", ",", "self", ".", "warpsd_all", ",", "self", ".", "warpsd_subset", ",", "self", ".", "transsd", ",", "\n", "self", ".", "scalesd", ",", "self", ".", "rotsd", ")", "\n", "grid2", "=", "torch", ".", "matmul", "(", "self", ".", "F", ",", "weights2", ")", ".", "reshape", "(", "1", ",", "self", ".", "H", ",", "self", ".", "W", ",", "2", ")", "\n", "im2", "=", "F", ".", "grid_sample", "(", "im2", ",", "grid2", ")", "\n", "\n", "if", "crop", "!=", "0", ":", "\n", "            ", "im1", "=", "im1", "[", ":", ",", ":", ",", "crop", ":", "-", "crop", ",", "crop", ":", "-", "crop", "]", "\n", "im2", "=", "im2", "[", ":", ",", ":", ",", "crop", ":", "-", "crop", ",", "crop", ":", "-", "crop", "]", "\n", "\n", "", "if", "unsqueezed", ":", "\n", "            ", "im1", "=", "im1", ".", "squeeze", "(", "0", ")", "\n", "im2", "=", "im2", ".", "squeeze", "(", "0", ")", "\n", "\n", "", "grid", "=", "grid2", "\n", "grid_unnormalized", "=", "grid_unnormalize", "(", "grid", ",", "self", ".", "H", ",", "self", ".", "W", ")", "\n", "\n", "if", "keypts", "is", "not", "None", ":", "\n", "            ", "kp2", "=", "self", ".", "warp_keypoints", "(", "kp1", ",", "grid_unnormalized", ")", "\n", "\n", "", "flow", "=", "grid_unnormalized", "-", "self", ".", "grid_pixels_unnormalized", "\n", "\n", "if", "crop", "!=", "0", ":", "\n", "            ", "flow", "=", "flow", "[", ":", ",", "crop", ":", "-", "crop", ",", "crop", ":", "-", "crop", ",", ":", "]", "\n", "\n", "grid_cropped", "=", "grid_unnormalized", "[", ":", ",", "crop", ":", "-", "crop", ",", "crop", ":", "-", "crop", ",", ":", "]", "-", "crop", "\n", "grid", "=", "grid_normalize", "(", "grid_cropped", ",", "Hc", ",", "Wc", ")", "\n", "\n", "# hc = flow.shape[1]", "\n", "# wc = flow.shape[2]", "\n", "# gridc = flow + grid_unnormalize(tps_grid(hc, wc).reshape(1, hc, wc, 2), hc, wc)", "\n", "# grid = grid_normalize(gridc, hc, wc)", "\n", "\n", "if", "keypts", "is", "not", "None", ":", "\n", "                ", "kp1", "-=", "crop", "\n", "kp2", "-=", "crop", "\n", "\n", "# Reverse the order because due to inverse warping the \"flow\" is in direction im2->im1", "\n", "# and we want to be consistent with optical flow from videos", "\n", "", "", "return", "im2", ",", "im1", ",", "flow", ",", "grid", ",", "kp2", ",", "kp1", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.utils.tps.Warper.warp_keypoints": [[164, 172], ["grid_unnormalized.reshape", "tps.Warper.grid_pixels_unnormalized.reshape", "KDTree", "KDTree.query"], "methods", ["None"], ["", "def", "warp_keypoints", "(", "self", ",", "keypoints", ",", "grid_unnormalized", ")", ":", "\n", "        ", "from", "scipy", ".", "spatial", ".", "kdtree", "import", "KDTree", "\n", "warp_grid", "=", "grid_unnormalized", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "regular_grid", "=", "self", ".", "grid_pixels_unnormalized", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "kd", "=", "KDTree", "(", "warp_grid", ")", "\n", "dists", ",", "idxs", "=", "kd", ".", "query", "(", "keypoints", ")", "\n", "new_keypoints", "=", "regular_grid", "[", "idxs", "]", "\n", "return", "new_keypoints", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.utils.tps.WarperSingle.__init__": [[177, 197], ["tps.tps_grid", "tps.grid_unnormalize", "tps.tps_grid", "tps.tps_U", "tps.tps_U", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "tps.WarperSingle.grid_pixels.reshape", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.jamt9000_DVE.utils.tps.tps_grid", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.tps.grid_unnormalize", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.tps.tps_grid", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.tps.tps_U", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.tps.tps_U"], ["def", "__init__", "(", "self", ",", "H", ",", "W", ",", "warpsd_all", "=", "0.0005", ",", "warpsd_subset", "=", "0.0", ",", "transsd", "=", "0.02", ",", "\n", "scalesd", "=", "0.02", ",", "rotsd", "=", "2", ")", ":", "\n", "        ", "self", ".", "H", "=", "H", "\n", "self", ".", "W", "=", "W", "\n", "self", ".", "warpsd_all", "=", "warpsd_all", "\n", "self", ".", "warpsd_subset", "=", "warpsd_subset", "\n", "self", ".", "transsd", "=", "transsd", "\n", "self", ".", "scalesd", "=", "scalesd", "\n", "self", ".", "rotsd", "=", "rotsd", "\n", "\n", "self", ".", "npixels", "=", "H", "*", "W", "\n", "self", ".", "nc", "=", "10", "\n", "self", ".", "nctrlpts", "=", "self", ".", "nc", "*", "self", ".", "nc", "\n", "\n", "self", ".", "grid_pixels", "=", "tps_grid", "(", "H", ",", "W", ")", "\n", "self", ".", "grid_pixels_unnormalized", "=", "grid_unnormalize", "(", "self", ".", "grid_pixels", ".", "reshape", "(", "1", ",", "H", ",", "W", ",", "2", ")", ",", "self", ".", "H", ",", "self", ".", "W", ")", "\n", "self", ".", "grid_ctrlpts", "=", "tps_grid", "(", "self", ".", "nc", ",", "self", ".", "nc", ")", "\n", "self", ".", "U_ctrlpts", "=", "tps_U", "(", "self", ".", "grid_ctrlpts", ",", "self", ".", "grid_ctrlpts", ")", "\n", "self", ".", "U_pixels_ctrlpts", "=", "tps_U", "(", "self", ".", "grid_pixels", ",", "self", ".", "grid_ctrlpts", ")", "\n", "self", ".", "F", "=", "torch", ".", "cat", "(", "(", "self", ".", "U_pixels_ctrlpts", ",", "torch", ".", "ones", "(", "self", ".", "npixels", ",", "1", ")", ",", "self", ".", "grid_pixels", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.utils.tps.WarperSingle.__call__": [[198, 231], ["tps.random_tps_weights", "torch.matmul().reshape", "torch.matmul().reshape", "torch.matmul().reshape", "torch.matmul().reshape", "tps.grid_unnormalize", "torch.grid_sample", "torch.grid_sample", "len", "im1.squeeze.squeeze.unsqueeze", "tps.WarperSingle.warp_keypoints", "im1.squeeze.squeeze.squeeze", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["home.repos.pwc.inspect_result.jamt9000_DVE.utils.tps.random_tps_weights", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.tps.grid_unnormalize", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.tps.WarperSingle.warp_keypoints"], ["", "def", "__call__", "(", "self", ",", "im1", ",", "keypts", "=", "None", ",", "crop", "=", "0", ")", ":", "\n", "        ", "kp1", "=", "0", "\n", "\n", "unsqueezed", "=", "False", "\n", "if", "len", "(", "im1", ".", "shape", ")", "==", "3", ":", "\n", "            ", "im1", "=", "im1", ".", "unsqueeze", "(", "0", ")", "\n", "unsqueezed", "=", "True", "\n", "\n", "", "assert", "im1", ".", "shape", "[", "0", "]", "==", "1", "\n", "\n", "a", "=", "1", "\n", "weights1", "=", "random_tps_weights", "(", "self", ".", "nctrlpts", ",", "a", "*", "self", ".", "warpsd_all", ",", "a", "*", "self", ".", "warpsd_subset", ",", "a", "*", "self", ".", "transsd", ",", "\n", "a", "*", "self", ".", "scalesd", ",", "a", "*", "self", ".", "rotsd", ")", "\n", "\n", "grid1", "=", "torch", ".", "matmul", "(", "self", ".", "F", ",", "weights1", ")", ".", "reshape", "(", "1", ",", "self", ".", "H", ",", "self", ".", "W", ",", "2", ")", "\n", "grid1_unnormalized", "=", "grid_unnormalize", "(", "grid1", ",", "self", ".", "H", ",", "self", ".", "W", ")", "\n", "if", "keypts", "is", "not", "None", ":", "\n", "            ", "kp1", "=", "self", ".", "warp_keypoints", "(", "keypts", ",", "grid1_unnormalized", ")", "\n", "\n", "", "im1", "=", "F", ".", "grid_sample", "(", "im1", ",", "grid1", ")", "\n", "\n", "if", "crop", "!=", "0", ":", "\n", "            ", "im1", "=", "im1", "[", ":", ",", ":", ",", "crop", ":", "-", "crop", ",", "crop", ":", "-", "crop", "]", "\n", "\n", "", "if", "unsqueezed", ":", "\n", "            ", "im1", "=", "im1", ".", "squeeze", "(", "0", ")", "\n", "\n", "", "if", "crop", "!=", "0", "and", "keypts", "is", "not", "None", ":", "\n", "            ", "kp1", "-=", "crop", "\n", "\n", "# Reverse the order because due to inverse warping the \"flow\" is in direction im2->im1", "\n", "# and we want to be consistent with optical flow from videos", "\n", "", "return", "im1", ",", "kp1", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.utils.tps.WarperSingle.warp_keypoints": [[232, 240], ["grid_unnormalized.reshape", "tps.WarperSingle.grid_pixels_unnormalized.reshape", "KDTree", "KDTree.query"], "methods", ["None"], ["", "def", "warp_keypoints", "(", "self", ",", "keypoints", ",", "grid_unnormalized", ")", ":", "\n", "        ", "from", "scipy", ".", "spatial", ".", "kdtree", "import", "KDTree", "\n", "warp_grid", "=", "grid_unnormalized", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "regular_grid", "=", "self", ".", "grid_pixels_unnormalized", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "kd", "=", "KDTree", "(", "warp_grid", ")", "\n", "dists", ",", "idxs", "=", "kd", ".", "query", "(", "keypoints", ")", "\n", "new_keypoints", "=", "regular_grid", "[", "idxs", "]", "\n", "return", "new_keypoints", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jamt9000_DVE.utils.tps.tps_grid": [[6, 13], ["torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.meshgrid", "torch.meshgrid", "torch.stack", "torch.stack", "xx.reshape", "yy.reshape"], "function", ["None"], ["def", "tps_grid", "(", "H", ",", "W", ")", ":", "\n", "    ", "xi", "=", "torch", ".", "linspace", "(", "-", "1", ",", "1", ",", "W", ")", "\n", "yi", "=", "torch", ".", "linspace", "(", "-", "1", ",", "1", ",", "H", ")", "\n", "\n", "yy", ",", "xx", "=", "torch", ".", "meshgrid", "(", "yi", ",", "xi", ")", "\n", "grid", "=", "torch", ".", "stack", "(", "(", "xx", ".", "reshape", "(", "-", "1", ")", ",", "yy", ".", "reshape", "(", "-", "1", ")", ")", ",", "1", ")", "\n", "return", "grid", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.utils.tps.spatial_grid_unnormalized": [[15, 22], ["torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.meshgrid", "torch.meshgrid", "torch.stack", "torch.stack", "torch.stack.reshape", "xx.reshape", "yy.reshape"], "function", ["None"], ["", "def", "spatial_grid_unnormalized", "(", "H", ",", "W", ")", ":", "\n", "    ", "xi", "=", "torch", ".", "linspace", "(", "0", ",", "W", "-", "1", ",", "W", ")", "\n", "yi", "=", "torch", ".", "linspace", "(", "0", ",", "H", "-", "1", ",", "H", ")", "\n", "\n", "yy", ",", "xx", "=", "torch", ".", "meshgrid", "(", "yi", ",", "xi", ")", "\n", "grid", "=", "torch", ".", "stack", "(", "(", "xx", ".", "reshape", "(", "-", "1", ")", ",", "yy", ".", "reshape", "(", "-", "1", ")", ")", ",", "1", ")", "\n", "return", "grid", ".", "reshape", "(", "H", ",", "W", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.utils.tps.tps_U": [[24, 29], ["torch.sum", "torch.sum", "grid1.reshape", "grid2.reshape", "torch.log", "torch.log"], "function", ["None"], ["", "def", "tps_U", "(", "grid1", ",", "grid2", ")", ":", "\n", "    ", "D", "=", "grid1", ".", "reshape", "(", "-", "1", ",", "1", ",", "2", ")", "-", "grid2", ".", "reshape", "(", "1", ",", "-", "1", ",", "2", ")", "\n", "D", "=", "torch", ".", "sum", "(", "D", "**", "2.", ",", "2", ")", "\n", "U", "=", "D", "*", "torch", ".", "log", "(", "D", "+", "1e-5", ")", "\n", "return", "U", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.utils.tps.grid_unnormalize": [[36, 42], ["grid.reshape", "torch.tensor", "torch.tensor", "constants.reshape().to.reshape().to", "grid.reshape.reshape", "constants.reshape().to.reshape"], "function", ["None"], ["", "def", "grid_unnormalize", "(", "grid", ",", "H", ",", "W", ")", ":", "\n", "    ", "x", "=", "grid", ".", "reshape", "(", "-", "1", ",", "H", ",", "W", ",", "2", ")", "\n", "constants", "=", "torch", ".", "tensor", "(", "[", "W", "-", "1.", ",", "H", "-", "1.", "]", ",", "dtype", "=", "x", ".", "dtype", ")", "\n", "constants", "=", "constants", ".", "reshape", "(", "1", ",", "1", ",", "1", ",", "2", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "x", "=", "(", "x", "+", "1.", ")", "/", "2.", "*", "constants", "\n", "return", "x", ".", "reshape", "(", "grid", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.utils.tps.grid_normalize": [[44, 48], ["grid.reshape", "grid.reshape.reshape", "torch.Tensor().reshape().to", "torch.Tensor().reshape().to", "torch.Tensor().reshape", "torch.Tensor().reshape", "torch.Tensor", "torch.Tensor"], "function", ["None"], ["", "def", "grid_normalize", "(", "grid", ",", "H", ",", "W", ")", ":", "\n", "    ", "x", "=", "grid", ".", "reshape", "(", "-", "1", ",", "H", ",", "W", ",", "2", ")", "\n", "x", "=", "2.", "*", "x", "/", "torch", ".", "Tensor", "(", "[", "W", "-", "1.", ",", "H", "-", "1.", "]", ")", ".", "reshape", "(", "1", ",", "1", ",", "1", ",", "2", ")", ".", "to", "(", "x", ".", "device", ")", "-", "1", "\n", "return", "x", ".", "reshape", "(", "grid", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.utils.tps.random_tps_weights": [[50, 65], ["torch.Tensor", "torch.Tensor", "torch.cat", "torch.cat", "torch.randn", "torch.randn", "torch.rand", "torch.rand", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "subset.sum", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.sin", "torch.sin"], "function", ["None"], ["", "def", "random_tps_weights", "(", "nctrlpts", ",", "warpsd_all", ",", "warpsd_subset", ",", "transsd", ",", "scalesd", ",", "rotsd", ")", ":", "\n", "    ", "W", "=", "torch", ".", "randn", "(", "nctrlpts", ",", "2", ")", "*", "warpsd_all", "\n", "subset", "=", "torch", ".", "rand", "(", "W", ".", "shape", ")", ">", "0.5", "\n", "W", "[", "subset", "]", "=", "torch", ".", "randn", "(", "subset", ".", "sum", "(", ")", ")", "*", "warpsd_subset", "\n", "rot", "=", "torch", ".", "randn", "(", "[", "]", ")", "*", "rotsd", "*", "math", ".", "pi", "/", "180", "\n", "sc", "=", "1.", "+", "torch", ".", "randn", "(", "[", "]", ")", "*", "scalesd", "\n", "tx", "=", "torch", ".", "randn", "(", "[", "]", ")", "*", "transsd", "\n", "ty", "=", "torch", ".", "randn", "(", "[", "]", ")", "*", "transsd", "\n", "\n", "aff", "=", "torch", ".", "Tensor", "(", "[", "[", "tx", ",", "ty", "]", ",", "\n", "[", "sc", "*", "torch", ".", "cos", "(", "rot", ")", ",", "sc", "*", "-", "torch", ".", "sin", "(", "rot", ")", "]", ",", "\n", "[", "sc", "*", "torch", ".", "sin", "(", "rot", ")", ",", "sc", "*", "torch", ".", "cos", "(", "rot", ")", "]", "]", ")", "\n", "\n", "Wa", "=", "torch", ".", "cat", "(", "(", "W", ",", "aff", ")", ",", "0", ")", "\n", "return", "Wa", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.utils.visualization.WriterTensorboardX.__init__": [[182, 208], ["importlib.import_module", "importlib.import_module.SummaryWriter", "logger.warning"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "writer_dir", ",", "logger", ",", "enable", ")", ":", "\n", "        ", "self", ".", "writer", "=", "None", "\n", "if", "enable", ":", "\n", "            ", "log_path", "=", "writer_dir", "\n", "try", ":", "\n", "                ", "mod", "=", "importlib", ".", "import_module", "(", "'tensorboardX'", ")", "\n", "self", ".", "writer", "=", "mod", ".", "SummaryWriter", "(", "log_path", ")", "\n", "", "except", "ModuleNotFoundError", ":", "\n", "                ", "message", "=", "(", "\"Warning: TensorboardX visualization is configured to use,\"", "\n", "\"but currently not installed on this machine. \"", "\n", "\"Please install the package by 'pip install tensorboardx'\"", "\n", "\"command or turn off the option in the 'config.json' file.\"", ")", "\n", "logger", ".", "warning", "(", "message", ")", "\n", "", "", "self", ".", "step", "=", "0", "\n", "self", ".", "mode", "=", "''", "\n", "\n", "self", ".", "tensorboard_writer_ftns", "=", "[", "\n", "'add_scalar'", ",", "\n", "'add_scalars'", ",", "\n", "'add_image'", ",", "\n", "'add_audio'", ",", "\n", "'add_text'", ",", "\n", "'add_histogram'", ",", "\n", "'add_pr_curve'", ",", "\n", "'add_embedding'", ",", "\n", "'add_figure'", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.utils.visualization.WriterTensorboardX.set_step": [[210, 213], ["None"], "methods", ["None"], ["", "def", "set_step", "(", "self", ",", "step", ",", "mode", "=", "'train'", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "self", ".", "step", "=", "step", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.utils.visualization.WriterTensorboardX.__getattr__": [[214, 247], ["getattr", "object.__getattr__", "getattr.", "AttributeError"], "methods", ["home.repos.pwc.inspect_result.jamt9000_DVE.utils.visualization.WriterTensorboardX.__getattr__"], ["", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\"\n        If visualization is configured to use:\n            return add_data() methods of tboard with extra info (step, tag) added.\n        Otherwise:\n            return blank function handle that does nothing\n        \"\"\"", "\n", "if", "name", "in", "self", ".", "tensorboard_writer_ftns", ":", "\n", "            ", "add_data", "=", "getattr", "(", "self", ".", "writer", ",", "name", ",", "None", ")", "\n", "\n", "def", "wrapper", "(", "tag", ",", "data", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "                ", "if", "add_data", "is", "not", "None", ":", "\n", "                    ", "add_data", "(", "\n", "'{}/{}'", ".", "format", "(", "self", ".", "mode", ",", "\n", "tag", ")", ",", "\n", "data", ",", "\n", "self", ".", "step", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", "\n", ")", "\n", "\n", "", "", "return", "wrapper", "\n", "", "else", ":", "\n", "# default action for returning methods defined in this class,", "\n", "#\u00a0set_step() for instance.", "\n", "            ", "try", ":", "\n", "                ", "attr", "=", "object", ".", "__getattr__", "(", "name", ")", "\n", "", "except", "AttributeError", ":", "\n", "                ", "raise", "AttributeError", "(", "\n", "\"type object 'WriterTensorboardX' has no attribute '{}'\"", ".", "\n", "format", "(", "name", ")", "\n", ")", "\n", "", "return", "attr", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.utils.visualization.norm_ip": [[15, 18], ["img.clamp_", "img.add_().div_", "img.add_"], "function", ["None"], ["def", "norm_ip", "(", "img", ",", "min", ",", "max", ")", ":", "\n", "    ", "img", ".", "clamp_", "(", "min", "=", "min", ",", "max", "=", "max", ")", "\n", "img", ".", "add_", "(", "-", "min", ")", ".", "div_", "(", "max", "-", "min", "+", "1e-5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.utils.visualization.norm_range": [[20, 27], ["t.clone.clone", "visualization.norm_ip", "visualization.norm_ip", "float", "float", "t.clone.min", "t.clone.max"], "function", ["home.repos.pwc.inspect_result.jamt9000_DVE.utils.visualization.norm_ip", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.visualization.norm_ip"], ["", "def", "norm_range", "(", "t", ",", "range", "=", "None", ")", ":", "\n", "    ", "t", "=", "t", ".", "clone", "(", ")", "\n", "if", "range", "is", "not", "None", ":", "\n", "        ", "norm_ip", "(", "t", ",", "range", "[", "0", "]", ",", "range", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "        ", "norm_ip", "(", "t", ",", "float", "(", "t", ".", "min", "(", ")", ")", ",", "float", "(", "t", ".", "max", "(", ")", ")", ")", "\n", "", "return", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.utils.visualization.keypoints_intermediate": [[29, 57], ["[].permute", "preds[].detach().cpu().clone", "intermediates[].detach().cpu().clone", "matplotlib.subplots", "ax.imshow", "ax.scatter", "ax.scatter", "writer.add_figure", "matplotlib.subplots", "ax.imshow", "range", "writer.add_figure", "ax.scatter", "preds[].detach().cpu", "intermediates[].detach().cpu", "visualization.norm_range", "preds[].detach", "intermediates[].detach"], "function", ["home.repos.pwc.inspect_result.jamt9000_DVE.utils.visualization.norm_range"], ["", "def", "keypoints_intermediate", "(", "writer", ",", "data", ",", "output", ",", "meta", ")", ":", "\n", "    ", "img", "=", "norm_range", "(", "data", ")", "[", "0", "]", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "\n", "imH", ",", "imW", ",", "imC", "=", "img", ".", "shape", "\n", "\n", "preds", ",", "intermediates", "=", "output", "\n", "\n", "pred", "=", "preds", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "clone", "(", ")", "\n", "inter", "=", "intermediates", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "clone", "(", ")", "\n", "\n", "gt", "=", "meta", "[", "'keypts'", "]", "[", "0", "]", "\n", "\n", "pred", "[", "...", ",", "0", "]", "=", "(", "pred", "[", "...", ",", "0", "]", "+", "1.", ")", "/", "2.", "*", "(", "imW", "-", "1", ")", "\n", "pred", "[", "...", ",", "1", "]", "=", "(", "pred", "[", "...", ",", "1", "]", "+", "1.", ")", "/", "2.", "*", "(", "imH", "-", "1", ")", "\n", "\n", "inter", "[", "...", ",", "0", "]", "=", "(", "inter", "[", "...", ",", "0", "]", "+", "1.", ")", "/", "2.", "*", "(", "imW", "-", "1", ")", "\n", "inter", "[", "...", ",", "1", "]", "=", "(", "inter", "[", "...", ",", "1", "]", "+", "1.", ")", "/", "2.", "*", "(", "imH", "-", "1", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "ax", ".", "imshow", "(", "img", ")", "\n", "ax", ".", "scatter", "(", "pred", "[", ":", ",", "0", "]", ",", "pred", "[", ":", ",", "1", "]", ",", "c", "=", "'b'", ")", "\n", "ax", ".", "scatter", "(", "gt", "[", ":", ",", "0", "]", ",", "gt", "[", ":", ",", "1", "]", ",", "c", "=", "'g'", ")", "\n", "writer", ".", "add_figure", "(", "'keypoints'", ",", "fig", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "ax", ".", "imshow", "(", "img", ")", "\n", "for", "i", "in", "range", "(", "inter", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "ax", ".", "scatter", "(", "inter", "[", "i", ",", ":", ",", "0", "]", ",", "inter", "[", "i", ",", ":", ",", "1", "]", ")", "\n", "", "writer", ".", "add_figure", "(", "'keypoints_intermediate'", ",", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.utils.visualization.seg_masks": [[59, 79], ["norm_range().view", "[].cpu().numpy", "matplotlib.close", "matplotlib.subplots", "ax.matshow", "matplotlib.axis", "writer.add_figure", "visualization.norm_range", "[].cpu", "[].float", "visualization.make_grid_matshow", "output.max"], "function", ["home.repos.pwc.inspect_result.jamt9000_DVE.utils.visualization.norm_range", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.visualization.make_grid_matshow"], ["", "def", "seg_masks", "(", "writer", ",", "data", ",", "output", ",", "meta", ")", ":", "\n", "    ", "N", ",", "C", ",", "H", ",", "W", "=", "output", ".", "shape", "\n", "preds", "=", "norm_range", "(", "output", ".", "max", "(", "1", ")", "[", "1", "]", ".", "float", "(", ")", ")", ".", "view", "(", "N", ",", "1", ",", "H", ",", "W", ")", "\n", "\n", "# res = label_colormap(preds)", "\n", "# res = make_grid(res).cpu().permute(1, 2, 0).numpy()", "\n", "\n", "res", "=", "make_grid_matshow", "(", "preds", ")", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "# pred_grid = make_grid(preds).cpu().permute(1, 2, 0).numpy()", "\n", "# from pathlib import Path ; import sys", "\n", "# sys.path.insert(0, str(Path.home() / \"coding/src/zsvision/python\"))", "\n", "# from zsvision.zs_iterm import zs_dispFig # NOQA", "\n", "plt", ".", "close", "(", "\"all\"", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "ax", ".", "matshow", "(", "res", ")", "\n", "# ax.imshow(res)", "\n", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "# for i in range(inter.shape[0]):", "\n", "#     ax.scatter(inter[i, :, 0], inter[i, :, 1])", "\n", "writer", ".", "add_figure", "(", "'pred_masks'", ",", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.utils.visualization.gt_masks": [[81, 97], ["meta[].unsqueeze().to().float", "torch.interpolate", "utils.util.label_colormap", "torchvision.utils.make_grid().cpu().permute().numpy", "torchvision.utils.make_grid().cpu().permute().numpy", "matplotlib.close", "matplotlib.subplots", "ax.imshow", "ax.imshow", "matplotlib.axis", "writer.add_figure", "meta[].unsqueeze().to", "torchvision.utils.make_grid().cpu().permute", "torchvision.utils.make_grid().cpu().permute", "meta[].unsqueeze", "torchvision.utils.make_grid().cpu", "torchvision.utils.make_grid().cpu", "torchvision.utils.make_grid", "torchvision.utils.make_grid", "visualization.norm_range"], "function", ["home.repos.pwc.inspect_result.jamt9000_DVE.utils.util.label_colormap", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.visualization.norm_range"], ["", "def", "gt_masks", "(", "writer", ",", "data", ",", "output", ",", "meta", ")", ":", "\n", "    ", "N", ",", "C", ",", "H", ",", "W", "=", "data", ".", "shape", "\n", "# preds = norm_range(output.max(1)[1].float()).view(N, 1, H, W)", "\n", "gt", "=", "meta", "[", "\"lbls\"", "]", ".", "unsqueeze", "(", "1", ")", ".", "to", "(", "output", ".", "device", ")", ".", "float", "(", ")", "\n", "gt", "=", "F", ".", "interpolate", "(", "gt", ",", "size", "=", "(", "H", ",", "W", ")", ",", "mode", "=", "\"nearest\"", ")", "\n", "gt", "=", "label_colormap", "(", "gt", ")", "\n", "gt", "=", "make_grid", "(", "gt", ")", ".", "cpu", "(", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "# gt = make_grid_matshow(gt)[0].cpu().numpy()", "\n", "ims", "=", "make_grid", "(", "norm_range", "(", "data", ")", ")", ".", "cpu", "(", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "plt", ".", "close", "(", "\"all\"", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "# ax.matshow(gt)", "\n", "ax", ".", "imshow", "(", "gt", ")", "\n", "ax", ".", "imshow", "(", "ims", ",", "alpha", "=", "0.5", ")", "\n", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "writer", ".", "add_figure", "(", "'gt_masks'", ",", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.utils.visualization.sphere_rand_proj_colormap": [[99, 117], ["output[].clone().cpu", "outs.reshape.permute", "outs.reshape.reshape", "torch.randn().repeat", "torch.randn().repeat", "torch.bmm", "torch.bmm", "torch.bmm.reshape().permute", "torchvision.utils.make_grid", "writer.add_image", "writer.add_image", "writer.add_image", "torch.sqrt", "torch.sqrt", "output[].clone", "torch.randn", "torch.randn", "torch.bmm.reshape"], "function", ["None"], ["", "def", "sphere_rand_proj_colormap", "(", "writer", ",", "data", ",", "output", ",", "meta", ")", ":", "\n", "    ", "\"\"\"Use a random projection to visualize high-dimensional embeddings\n    in RGB space.\n    \"\"\"", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "output", "[", "0", "]", ".", "shape", "\n", "outs", "=", "output", "[", "0", "]", ".", "clone", "(", ")", ".", "cpu", "(", ")", "\n", "# move channels to last dimension for BMM", "\n", "outs", "=", "outs", ".", "permute", "(", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "\n", "outs", "=", "outs", ".", "reshape", "(", "N", ",", "-", "1", ",", "C", ")", "\n", "proj", "=", "torch", ".", "randn", "(", "[", "1", ",", "C", ",", "3", "]", ")", ".", "repeat", "(", "N", ",", "1", ",", "1", ")", "\n", "projected", "=", "torch", ".", "bmm", "(", "outs", ",", "proj", ")", "\n", "out", "=", "projected", ".", "reshape", "(", "N", ",", "H", ",", "W", ",", "3", ")", ".", "permute", "(", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "\n", "normed", "=", "torch", ".", "sqrt", "(", "out", "[", ":", ",", "0", "]", "**", "2.", "+", "out", "[", ":", ",", "1", "]", "**", "2.", "+", "out", "[", ":", ",", "2", "]", "**", "2.", ")", "[", ":", ",", "None", "]", "\n", "vis", "=", "out", "/", "normed", "/", "2", "+", "0.5", "\n", "grid", "=", "make_grid", "(", "vis", ",", "nrow", "=", "8", ")", "\n", "writer", ".", "add_image", "(", "'rand_proj_colormap/0'", ",", "vis", "[", "0", "]", ")", "\n", "writer", ".", "add_image", "(", "'rand_proj_colormap/1'", ",", "vis", "[", "1", "]", ")", "\n", "writer", ".", "add_image", "(", "'rand_proj_colormap'", ",", "grid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.utils.visualization.sphere_colormap": [[119, 134], ["torchvision.utils.make_grid", "writer.add_image", "writer.add_image", "writer.add_image", "matplotlib.subplots", "ax.matshow", "fig.colorbar", "writer.add_figure", "output[].cpu", "torch.sqrt", "torch.sqrt", "output[].cpu().detach", "output[].cpu"], "function", ["None"], ["", "def", "sphere_colormap", "(", "writer", ",", "data", ",", "output", ",", "meta", ")", ":", "\n", "    ", "out", "=", "output", "[", "0", "]", ".", "cpu", "(", ")", "[", ":", ",", "0", ":", "3", "]", "\n", "normed", "=", "torch", ".", "sqrt", "(", "out", "[", ":", ",", "0", "]", "**", "2.", "+", "out", "[", ":", ",", "1", "]", "**", "2.", "+", "out", "[", ":", ",", "2", "]", "**", "2.", ")", "[", ":", ",", "None", "]", "\n", "vis", "=", "out", "/", "normed", "/", "2", "+", "0.5", "\n", "grid", "=", "make_grid", "(", "vis", ",", "nrow", "=", "8", ")", "\n", "writer", ".", "add_image", "(", "'colormap/0'", ",", "vis", "[", "0", "]", ")", "\n", "writer", ".", "add_image", "(", "'colormap/1'", ",", "vis", "[", "1", "]", ")", "\n", "writer", ".", "add_image", "(", "'colormap'", ",", "grid", ")", "\n", "\n", "normall", "=", "(", "output", "[", "0", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", "**", "2", ")", ".", "sum", "(", "1", ")", ".", "sqrt", "(", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "ms", "=", "ax", ".", "matshow", "(", "normall", "[", "0", "]", ")", "\n", "fig", ".", "colorbar", "(", "ms", ",", "ax", "=", "ax", ")", "\n", "writer", ".", "add_figure", "(", "'magnitude/0'", ",", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.utils.visualization.sphere_norm_scatter3d": [[136, 139], ["visualization.sphere_scatter3d", "torch.normalize"], "function", ["home.repos.pwc.inspect_result.jamt9000_DVE.utils.visualization.sphere_scatter3d"], ["", "def", "sphere_norm_scatter3d", "(", "writer", ",", "data", ",", "output", ",", "meta", ")", ":", "\n", "    ", "output", "=", "[", "F", ".", "normalize", "(", "o", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "for", "o", "in", "output", "]", "\n", "sphere_scatter3d", "(", "writer", ",", "data", ",", "output", ",", "meta", ",", "'spherenorm'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.utils.visualization.sphere_scatter3d": [[141, 179], ["visualization.norm_range", "output[].cpu().detach().clone", "out0[].reshape", "out0[].reshape", "out0[].reshape", "im0.permute().reshape", "out1[].reshape", "out1[].reshape", "out1[].reshape", "im1.permute().reshape", "numpy.round", "numpy.round", "matplotlib.figure", "mpl_toolkits.mplot3d.Axes3D", "mplot3d.Axes3D.set_xlim", "mplot3d.Axes3D.set_ylim", "mplot3d.Axes3D.set_zlim", "mplot3d.Axes3D.scatter3D", "writer.add_figure", "matplotlib.figure", "mpl_toolkits.mplot3d.Axes3D", "mplot3d.Axes3D.set_xlim", "mplot3d.Axes3D.set_ylim", "mplot3d.Axes3D.set_zlim", "mplot3d.Axes3D.scatter3D", "writer.add_figure", "output[].cpu().detach().clone.min", "output[].cpu().detach().clone.max", "output[].cpu().detach", "im0.permute", "im1.permute", "im0.permute().reshape.numpy", "im1.permute().reshape.numpy", "output[].cpu"], "function", ["home.repos.pwc.inspect_result.jamt9000_DVE.utils.visualization.norm_range"], ["", "def", "sphere_scatter3d", "(", "writer", ",", "data", ",", "output", ",", "meta", ",", "tag", "=", "'sphere'", ")", ":", "\n", "    ", "data", "=", "norm_range", "(", "data", ")", "\n", "out", "=", "output", "[", "0", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "out0", "=", "out", "[", "0", "]", "[", "0", ":", "3", "]", "\n", "out1", "=", "out", "[", "1", "]", "[", "0", ":", "3", "]", "\n", "\n", "stride", "=", "data", ".", "shape", "[", "2", "]", "//", "out", ".", "shape", "[", "2", "]", "\n", "\n", "im0", "=", "data", "[", "0", "]", "[", ":", ",", ":", ":", "stride", ",", ":", ":", "stride", "]", "\n", "x0", "=", "out0", "[", "0", "]", ".", "reshape", "(", "-", "1", ")", "\n", "y0", "=", "out0", "[", "1", "]", ".", "reshape", "(", "-", "1", ")", "\n", "z0", "=", "out0", "[", "2", "]", ".", "reshape", "(", "-", "1", ")", "\n", "c0", "=", "im0", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "\n", "im1", "=", "data", "[", "1", "]", "[", ":", ",", ":", ":", "stride", ",", ":", ":", "stride", "]", "\n", "x1", "=", "out1", "[", "0", "]", ".", "reshape", "(", "-", "1", ")", "\n", "y1", "=", "out1", "[", "1", "]", ".", "reshape", "(", "-", "1", ")", "\n", "z1", "=", "out1", "[", "2", "]", ".", "reshape", "(", "-", "1", ")", "\n", "c1", "=", "im1", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "\n", "axmin", "=", "np", ".", "round", "(", "out", ".", "min", "(", ")", ")", "\n", "axmax", "=", "np", ".", "round", "(", "out", ".", "max", "(", ")", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "mplot3d", ".", "Axes3D", "(", "fig", ")", "\n", "ax", ".", "set_xlim", "(", "axmin", ",", "axmax", ")", "\n", "ax", ".", "set_ylim", "(", "axmin", ",", "axmax", ")", "\n", "ax", ".", "set_zlim", "(", "axmin", ",", "axmax", ")", "\n", "ax", ".", "scatter3D", "(", "x0", ",", "y0", ",", "z0", ",", "c", "=", "c0", ".", "numpy", "(", ")", ",", "s", "=", "40", ",", "linewidths", "=", "0", ",", "depthshade", "=", "False", ")", "\n", "writer", ".", "add_figure", "(", "tag", "+", "'/0'", ",", "fig", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "mplot3d", ".", "Axes3D", "(", "fig", ")", "\n", "ax", ".", "set_xlim", "(", "axmin", ",", "axmax", ")", "\n", "ax", ".", "set_ylim", "(", "axmin", ",", "axmax", ")", "\n", "ax", ".", "set_zlim", "(", "axmin", ",", "axmax", ")", "\n", "ax", ".", "scatter3D", "(", "x1", ",", "y1", ",", "z1", ",", "c", "=", "c1", ".", "numpy", "(", ")", ",", "s", "=", "40", ",", "linewidths", "=", "0", ",", "depthshade", "=", "False", ")", "\n", "writer", ".", "add_figure", "(", "tag", "+", "'/1'", ",", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.utils.visualization.make_grid_matshow": [[252, 334], ["isinstance", "torch.cat.size", "min", "int", "torch.cat.new_full", "irange", "TypeError", "torch.stack", "torch.stack", "torch.cat.dim", "torch.cat.unsqueeze", "torch.cat.dim", "torch.cat.unsqueeze", "torch.cat.clone", "torch.cat.size", "torch.cat.squeeze", "math.ceil", "int", "int", "irange", "torch.is_tensor", "torch.is_tensor", "torch.cat.size", "torch.cat", "torch.cat", "isinstance", "img.clamp_", "img.add_().div_", "visualization.norm_range"], "function", ["home.repos.pwc.inspect_result.jamt9000_DVE.utils.visualization.norm_range"], ["def", "make_grid_matshow", "(", "tensor", ",", "nrow", "=", "8", ",", "padding", "=", "2", ",", "\n", "normalize", "=", "False", ",", "range", "=", "None", ",", "scale_each", "=", "False", ",", "pad_value", "=", "0", ")", ":", "\n", "    ", "\"\"\"Make a grid of images. Modified to allow usage with matshow\n\n    Args:\n        tensor (Tensor or list): 4D mini-batch Tensor of shape (B x C x H x W)\n            or a list of images all of the same size.\n        nrow (int, optional): Number of images displayed in each row of the grid.\n            The Final grid size is (B / nrow, nrow). Default is 8.\n        padding (int, optional): amount of padding. Default is 2.\n        normalize (bool, optional): If True, shift the image to the range (0, 1),\n            by subtracting the minimum and dividing by the maximum pixel value.\n        range (tuple, optional): tuple (min, max) where min and max are numbers,\n            then these numbers are used to normalize the image. By default, min and max\n            are computed from the tensor.\n        scale_each (bool, optional): If True, scale each image in the batch of\n            images separately rather than the (min, max) over all images.\n        pad_value (float, optional): Value for the padded pixels.\n\n    Example:\n        See this notebook `here <https://gist.github.com/anonymous/bf16430f7750c023141c562f3e9f2a91>`_\n\n    \"\"\"", "\n", "if", "not", "(", "torch", ".", "is_tensor", "(", "tensor", ")", "or", "\n", "(", "isinstance", "(", "tensor", ",", "list", ")", "and", "all", "(", "torch", ".", "is_tensor", "(", "t", ")", "for", "t", "in", "tensor", ")", ")", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'tensor or list of tensors expected, got {}'", ".", "format", "(", "type", "(", "tensor", ")", ")", ")", "\n", "\n", "# if list of tensors, convert to a 4D mini-batch Tensor", "\n", "", "if", "isinstance", "(", "tensor", ",", "list", ")", ":", "\n", "        ", "tensor", "=", "torch", ".", "stack", "(", "tensor", ",", "dim", "=", "0", ")", "\n", "\n", "", "if", "tensor", ".", "dim", "(", ")", "==", "2", ":", "# single image H x W", "\n", "        ", "tensor", "=", "tensor", ".", "unsqueeze", "(", "0", ")", "\n", "", "if", "tensor", ".", "dim", "(", ")", "==", "3", ":", "# single image", "\n", "        ", "if", "tensor", ".", "size", "(", "0", ")", "==", "1", ":", "# if single-channel, convert to 3-channel", "\n", "            ", "tensor", "=", "torch", ".", "cat", "(", "(", "tensor", ",", "tensor", ",", "tensor", ")", ",", "0", ")", "\n", "", "tensor", "=", "tensor", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "# if tensor.dim() == 4 and tensor.size(1) == 1:  # single-channel images", "\n", "#     tensor = torch.cat((tensor, tensor, tensor), 1)", "\n", "\n", "", "if", "normalize", "is", "True", ":", "\n", "        ", "tensor", "=", "tensor", ".", "clone", "(", ")", "# avoid modifying tensor in-place", "\n", "if", "range", "is", "not", "None", ":", "\n", "            ", "assert", "isinstance", "(", "range", ",", "tuple", ")", ",", "\"range has to be a tuple (min, max) if specified. min and max are numbers\"", "\n", "\n", "", "def", "norm_ip", "(", "img", ",", "min", ",", "max", ")", ":", "\n", "            ", "img", ".", "clamp_", "(", "min", "=", "min", ",", "max", "=", "max", ")", "\n", "img", ".", "add_", "(", "-", "min", ")", ".", "div_", "(", "max", "-", "min", "+", "1e-5", ")", "\n", "\n", "", "def", "norm_range", "(", "t", ",", "range", ")", ":", "\n", "            ", "if", "range", "is", "not", "None", ":", "\n", "                ", "norm_ip", "(", "t", ",", "range", "[", "0", "]", ",", "range", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "norm_ip", "(", "t", ",", "float", "(", "t", ".", "min", "(", ")", ")", ",", "float", "(", "t", ".", "max", "(", ")", ")", ")", "\n", "\n", "", "", "if", "scale_each", "is", "True", ":", "\n", "            ", "for", "t", "in", "tensor", ":", "# loop over mini-batch dimension", "\n", "                ", "norm_range", "(", "t", ",", "range", ")", "\n", "", "", "else", ":", "\n", "            ", "norm_range", "(", "tensor", ",", "range", ")", "\n", "\n", "", "", "if", "tensor", ".", "size", "(", "0", ")", "==", "1", ":", "\n", "        ", "return", "tensor", ".", "squeeze", "(", ")", "\n", "\n", "# make the mini-batch of images into a grid", "\n", "", "nmaps", "=", "tensor", ".", "size", "(", "0", ")", "\n", "xmaps", "=", "min", "(", "nrow", ",", "nmaps", ")", "\n", "ymaps", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "nmaps", ")", "/", "xmaps", ")", ")", "\n", "height", ",", "width", "=", "int", "(", "tensor", ".", "size", "(", "2", ")", "+", "padding", ")", ",", "int", "(", "tensor", ".", "size", "(", "3", ")", "+", "padding", ")", "\n", "grid", "=", "tensor", ".", "new_full", "(", "(", "1", ",", "height", "*", "ymaps", "+", "padding", ",", "width", "*", "xmaps", "+", "padding", ")", ",", "pad_value", ")", "\n", "k", "=", "0", "\n", "for", "y", "in", "irange", "(", "ymaps", ")", ":", "\n", "        ", "for", "x", "in", "irange", "(", "xmaps", ")", ":", "\n", "            ", "if", "k", ">=", "nmaps", ":", "\n", "                ", "break", "\n", "", "grid", ".", "narrow", "(", "1", ",", "y", "*", "height", "+", "padding", ",", "height", "-", "padding", ")", ".", "narrow", "(", "2", ",", "x", "*", "width", "+", "padding", ",", "width", "-", "padding", ")", ".", "copy_", "(", "tensor", "[", "k", "]", ")", "\n", "k", "=", "k", "+", "1", "\n", "", "", "return", "grid", "\n", "", ""]], "home.repos.pwc.inspect_result.jamt9000_DVE.utils.logger.Logger.__init__": [[13, 15], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "entries", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.utils.logger.Logger.add_entry": [[16, 18], ["len"], "methods", ["None"], ["", "def", "add_entry", "(", "self", ",", "entry", ")", ":", "\n", "        ", "self", ".", "entries", "[", "len", "(", "self", ".", "entries", ")", "+", "1", "]", "=", "entry", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.utils.logger.Logger.__str__": [[19, 21], ["json.dumps"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "json", ".", "dumps", "(", "self", ".", "entries", ",", "sort_keys", "=", "True", ",", "indent", "=", "4", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jamt9000_DVE.utils.util.NoGradWrapper.__init__": [[120, 123], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.jamt9000_DVE.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "wrapped", ")", ":", "\n", "        ", "super", "(", "NoGradWrapper", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "wrapped_module", "=", "wrapped", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.utils.util.NoGradWrapper.forward": [[124, 127], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "util.NoGradWrapper.wrapped_module.forward"], "methods", ["home.repos.pwc.inspect_result.jamt9000_DVE.base.base_model.BaseModel.forward"], ["", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "return", "self", ".", "wrapped_module", ".", "forward", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.utils.util.Up.forward": [[130, 133], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "return", "[", "F", ".", "interpolate", "(", "x", "[", "0", "]", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.utils.util.label_colormap": [[23, 69], ["numpy.array", "len", "isinstance", "torch.from_numpy.clone().float", "torch.from_numpy.clone().float", "torch.from_numpy.clone().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "dict", "range", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "zip", "torch.from_numpy.clone", "torch.from_numpy.clone", "torch.from_numpy.clone", "range", "ipdb.set_trace"], "function", ["None"], ["", "def", "label_colormap", "(", "x", ")", ":", "\n", "    ", "colors", "=", "np", ".", "array", "(", "[", "\n", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "128", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "128", ",", "0", "]", ",", "\n", "[", "128", ",", "128", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "128", "]", ",", "\n", "[", "128", ",", "0", ",", "128", "]", ",", "\n", "[", "0", ",", "128", ",", "128", "]", ",", "\n", "[", "128", ",", "128", ",", "128", "]", ",", "\n", "[", "64", ",", "0", ",", "0", "]", ",", "\n", "[", "192", ",", "0", ",", "0", "]", ",", "\n", "[", "64", ",", "128", ",", "0", "]", ",", "\n", "[", "192", ",", "128", ",", "0", "]", ",", "\n", "]", ")", "\n", "ndim", "=", "len", "(", "x", ".", "shape", ")", "\n", "num_classes", "=", "11", "\n", "if", "isinstance", "(", "x", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "x", "=", "torch", ".", "from_numpy", "(", "x", ")", "\n", "\n", "", "r", "=", "x", ".", "clone", "(", ")", ".", "float", "(", ")", "\n", "g", "=", "x", ".", "clone", "(", ")", ".", "float", "(", ")", "\n", "b", "=", "x", ".", "clone", "(", ")", ".", "float", "(", ")", "\n", "if", "ndim", "==", "2", ":", "\n", "        ", "rgb", "=", "torch", ".", "zeros", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", ",", "3", ")", ")", "\n", "", "else", ":", "\n", "        ", "rgb", "=", "torch", ".", "zeros", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "3", ",", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", ")", ")", "\n", "", "colors", "=", "torch", ".", "from_numpy", "(", "colors", ")", "\n", "label_colours", "=", "dict", "(", "zip", "(", "range", "(", "num_classes", ")", ",", "colors", ")", ")", "\n", "\n", "for", "l", "in", "range", "(", "0", ",", "num_classes", ")", ":", "\n", "        ", "r", "[", "x", "==", "l", "]", "=", "label_colours", "[", "l", "]", "[", "0", "]", "\n", "g", "[", "x", "==", "l", "]", "=", "label_colours", "[", "l", "]", "[", "1", "]", "\n", "b", "[", "x", "==", "l", "]", "=", "label_colours", "[", "l", "]", "[", "2", "]", "\n", "", "if", "ndim", "==", "2", ":", "\n", "        ", "rgb", "[", ":", ",", ":", ",", "0", "]", "=", "r", "/", "255.0", "\n", "rgb", "[", ":", ",", ":", ",", "1", "]", "=", "g", "/", "255.0", "\n", "rgb", "[", ":", ",", ":", ",", "2", "]", "=", "b", "/", "255.0", "\n", "", "elif", "ndim", "==", "4", ":", "\n", "        ", "rgb", "[", ":", ",", "0", ",", "None", "]", "=", "r", "/", "255.0", "\n", "rgb", "[", ":", ",", "1", ",", "None", "]", "=", "g", "/", "255.0", "\n", "rgb", "[", ":", ",", "2", ",", "None", "]", "=", "b", "/", "255.0", "\n", "", "else", ":", "\n", "        ", "import", "ipdb", ";", "\n", "ipdb", ".", "set_trace", "(", ")", "\n", "", "return", "rgb", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.utils.util.ensure_dir": [[71, 74], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "def", "ensure_dir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.utils.util.clean_state_dict": [[76, 83], ["collections.OrderedDict", "state_dict.items"], "function", ["None"], ["", "", "def", "clean_state_dict", "(", "state_dict", ")", ":", "\n", "    ", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", "[", ":", "7", "]", "==", "'module.'", ":", "\n", "            ", "k", "=", "k", "[", "7", ":", "]", "# remove `module.`", "\n", "", "new_state_dict", "[", "k", "]", "=", "v", "\n", "", "return", "new_state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.utils.util.get_instance": [[85, 88], ["getattr"], "function", ["None"], ["", "def", "get_instance", "(", "module", ",", "name", ",", "config", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "getattr", "(", "module", ",", "config", "[", "name", "]", "[", "'type'", "]", ")", "(", "*", "args", ",", "**", "config", "[", "name", "]", "[", "'args'", "]", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.utils.util.coll": [[90, 96], ["torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate", "isinstance", "bi.reshape"], "function", ["None"], ["", "def", "coll", "(", "batch", ")", ":", "\n", "    ", "b", "=", "torch", ".", "utils", ".", "data", ".", "dataloader", ".", "default_collate", "(", "batch", ")", "\n", "# Flatten to be 4D", "\n", "return", "[", "\n", "bi", ".", "reshape", "(", "(", "-", "1", ",", ")", "+", "bi", ".", "shape", "[", "-", "3", ":", "]", ")", "if", "isinstance", "(", "bi", ",", "torch", ".", "Tensor", ")", "else", "bi", "\n", "for", "bi", "in", "b", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.utils.util.dict_coll": [[99, 108], ["torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate", "cb[].reshape", "norm_range().permute().cpu().numpy", "matplotlib.imshow", "norm_range().permute().cpu", "norm_range().permute", "norm_range", "make_grid"], "function", ["home.repos.pwc.inspect_result.jamt9000_DVE.utils.visualization.norm_range"], ["", "def", "dict_coll", "(", "batch", ")", ":", "\n", "    ", "cb", "=", "torch", ".", "utils", ".", "data", ".", "dataloader", ".", "default_collate", "(", "batch", ")", "\n", "cb", "[", "\"data\"", "]", "=", "cb", "[", "\"data\"", "]", ".", "reshape", "(", "(", "-", "1", ",", ")", "+", "cb", "[", "\"data\"", "]", ".", "shape", "[", "-", "3", ":", "]", ")", "# Flatten to be 4D", "\n", "if", "False", ":", "\n", "        ", "from", "torchvision", ".", "utils", "import", "make_grid", "\n", "from", "utils", ".", "visualization", "import", "norm_range", "\n", "ims", "=", "norm_range", "(", "make_grid", "(", "cb", "[", "\"data\"", "]", ")", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "plt", ".", "imshow", "(", "ims", ")", "\n", "", "return", "cb", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.utils.util.read_json": [[135, 138], ["fname.open", "json.load"], "function", ["None"], ["", "", "", "def", "read_json", "(", "fname", ")", ":", "\n", "    ", "with", "fname", ".", "open", "(", "'rt'", ")", "as", "handle", ":", "\n", "        ", "return", "json", ".", "load", "(", "handle", ",", "object_hook", "=", "OrderedDict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.utils.util.write_json": [[140, 143], ["fname.open", "json.dump"], "function", ["None"], ["", "", "def", "write_json", "(", "content", ",", "fname", ")", ":", "\n", "    ", "with", "fname", ".", "open", "(", "'wt'", ")", "as", "handle", ":", "\n", "        ", "json", ".", "dump", "(", "content", ",", "handle", ",", "indent", "=", "4", ",", "sort_keys", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.utils.util.pad_and_crop": [[145, 180], ["numpy.array", "numpy.dstack", "numpy.tile", "numpy.vstack", "numpy.tile", "numpy.hstack", "numpy.tile", "numpy.vstack", "numpy.tile", "numpy.hstack"], "function", ["None"], ["", "", "def", "pad_and_crop", "(", "im", ",", "rr", ")", ":", "\n", "    ", "\"\"\"Return im[rr[0]:rr[1],rr[2]:rr[3]]\n\n    Pads if necessary to allow out of bounds indexing\n    \"\"\"", "\n", "\n", "meanval", "=", "np", ".", "array", "(", "np", ".", "dstack", "(", "(", "0", ",", "0", ",", "0", ")", ")", ",", "dtype", "=", "im", ".", "dtype", ")", "\n", "\n", "if", "rr", "[", "0", "]", "<", "0", ":", "\n", "        ", "top", "=", "-", "rr", "[", "0", "]", "\n", "P", "=", "np", ".", "tile", "(", "meanval", ",", "[", "top", ",", "im", ".", "shape", "[", "1", "]", ",", "1", "]", ")", "\n", "im", "=", "np", ".", "vstack", "(", "[", "P", ",", "im", "]", ")", "\n", "rr", "[", "0", "]", "=", "rr", "[", "0", "]", "+", "top", "\n", "rr", "[", "1", "]", "=", "rr", "[", "1", "]", "+", "top", "\n", "\n", "", "if", "rr", "[", "2", "]", "<", "0", ":", "\n", "        ", "left", "=", "-", "rr", "[", "2", "]", "\n", "P", "=", "np", ".", "tile", "(", "meanval", ",", "[", "im", ".", "shape", "[", "0", "]", ",", "left", ",", "1", "]", ")", "\n", "im", "=", "np", ".", "hstack", "(", "[", "P", ",", "im", "]", ")", "\n", "rr", "[", "2", "]", "=", "rr", "[", "2", "]", "+", "left", "\n", "rr", "[", "3", "]", "=", "rr", "[", "3", "]", "+", "left", "\n", "\n", "", "if", "rr", "[", "1", "]", ">", "im", ".", "shape", "[", "0", "]", ":", "\n", "        ", "bottom", "=", "rr", "[", "1", "]", "-", "im", ".", "shape", "[", "0", "]", "\n", "P", "=", "np", ".", "tile", "(", "meanval", ",", "[", "bottom", ",", "im", ".", "shape", "[", "1", "]", ",", "1", "]", ")", "\n", "im", "=", "np", ".", "vstack", "(", "[", "im", ",", "P", "]", ")", "\n", "\n", "", "if", "rr", "[", "3", "]", ">", "im", ".", "shape", "[", "1", "]", ":", "\n", "        ", "right", "=", "rr", "[", "3", "]", "-", "im", ".", "shape", "[", "1", "]", "\n", "P", "=", "np", ".", "tile", "(", "meanval", ",", "[", "im", ".", "shape", "[", "0", "]", ",", "right", ",", "1", "]", ")", "\n", "im", "=", "np", ".", "hstack", "(", "[", "im", ",", "P", "]", ")", "\n", "\n", "", "im", "=", "im", "[", "rr", "[", "0", "]", ":", "rr", "[", "1", "]", ",", "rr", "[", "2", "]", ":", "rr", "[", "3", "]", "]", "\n", "\n", "return", "im", "\n", "", ""]], "home.repos.pwc.inspect_result.jamt9000_DVE.model.smallnet.SmallNet.__init__": [[9, 29], ["base.BaseModel.__init__", "smallnet.SmallNet._generate_conv_block", "torch.MaxPool2d", "torch.MaxPool2d", "smallnet.SmallNet._generate_conv_block", "smallnet.SmallNet._generate_conv_block", "smallnet.SmallNet._generate_conv_block", "smallnet.SmallNet._generate_conv_block", "torch.Conv2d", "torch.Conv2d", "b.data.mul_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "smallnet.SmallNet.modules", "isinstance", "smallnet.SmallNet.modules", "isinstance"], "methods", ["home.repos.pwc.inspect_result.jamt9000_DVE.base.base_model.BaseModel.__init__", "home.repos.pwc.inspect_result.jamt9000_DVE.model.smallnet.SmallNet._generate_conv_block", "home.repos.pwc.inspect_result.jamt9000_DVE.model.smallnet.SmallNet._generate_conv_block", "home.repos.pwc.inspect_result.jamt9000_DVE.model.smallnet.SmallNet._generate_conv_block", "home.repos.pwc.inspect_result.jamt9000_DVE.model.smallnet.SmallNet._generate_conv_block", "home.repos.pwc.inspect_result.jamt9000_DVE.model.smallnet.SmallNet._generate_conv_block"], ["    ", "def", "__init__", "(", "self", ",", "num_output_channels", "=", "16", ",", "do_maxpool", "=", "True", ")", ":", "\n", "        ", "super", "(", "SmallNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "do_maxpool", "=", "do_maxpool", "\n", "\n", "self", ".", "conv1", "=", "self", ".", "_generate_conv_block", "(", "3", ",", "20", ",", "kernel_size", "=", "5", ",", "padding", "=", "2", ")", "\n", "self", ".", "mp", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv2", "=", "self", ".", "_generate_conv_block", "(", "20", ",", "48", ",", "kernel_size", "=", "5", ",", "padding", "=", "2", ")", "\n", "self", ".", "conv3", "=", "self", ".", "_generate_conv_block", "(", "48", ",", "64", ",", "kernel_size", "=", "5", ",", "padding", "=", "4", ",", "\n", "dilation", "=", "2", ")", "\n", "self", ".", "conv4", "=", "self", ".", "_generate_conv_block", "(", "64", ",", "80", ",", "kernel_size", "=", "3", ",", "padding", "=", "4", ",", "\n", "dilation", "=", "4", ")", "\n", "self", ".", "conv5", "=", "self", ".", "_generate_conv_block", "(", "80", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "2", ",", "\n", "dilation", "=", "2", ")", "\n", "self", ".", "conv6", "=", "nn", ".", "Conv2d", "(", "256", ",", "num_output_channels", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "for", "b", "in", "[", "x", ".", "bias", "for", "x", "in", "self", ".", "modules", "(", ")", "if", "isinstance", "(", "x", ",", "nn", ".", "Conv2d", ")", "]", ":", "\n", "            ", "b", ".", "data", ".", "mul_", "(", "0.", ")", "\n", "\n", "", "for", "w", "in", "[", "x", ".", "weight", "for", "x", "in", "self", ".", "modules", "(", ")", "if", "isinstance", "(", "x", ",", "nn", ".", "Conv2d", ")", "]", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_normal_", "(", "w", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.model.smallnet.SmallNet._generate_conv_block": [[30, 37], ["torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Sequential", "torch.Sequential"], "methods", ["None"], ["", "", "def", "_generate_conv_block", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "\n", "dilation", ")", "\n", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "relu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "\n", "return", "nn", ".", "Sequential", "(", "conv", ",", "bn", ",", "relu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.model.smallnet.SmallNet.forward": [[38, 49], ["smallnet.SmallNet.conv1", "smallnet.SmallNet.conv2", "smallnet.SmallNet.conv3", "smallnet.SmallNet.conv4", "smallnet.SmallNet.conv5", "smallnet.SmallNet.conv6", "smallnet.SmallNet.mp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "if", "self", ".", "do_maxpool", ":", "\n", "            ", "x", "=", "self", ".", "mp", "(", "x", ")", "\n", "", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "conv5", "(", "x", ")", "\n", "x", "=", "self", ".", "conv6", "(", "x", ")", "\n", "\n", "return", "[", "x", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.model.keypoint_prediction.IntermediateKeypointPredictor.__init__": [[10, 60], ["torch.Module.__init__", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "weights.view.view.view().t", "weights.view.view.view", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "torch.zeros.view", "torch.zeros.view", "torch.zeros.view", "torch.Linear", "torch.Linear", "torch.Linear", "weights.view.view.view", "range"], "methods", ["home.repos.pwc.inspect_result.jamt9000_DVE.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "descriptor_dimension", ",", "num_annotated_points", ",", "\n", "num_intermediate_points", ",", "softargmax_mul", "=", "50.", ",", "numerical_check", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nA", "=", "num_annotated_points", "\n", "self", ".", "nI", "=", "num_intermediate_points", "\n", "self", ".", "descriptor_dimension", "=", "descriptor_dimension", "\n", "self", ".", "softargmax_mul", "=", "softargmax_mul", "\n", "\n", "weights", "=", "torch", ".", "randn", "(", "descriptor_dimension", ",", "self", ".", "nA", ",", "self", ".", "nI", ")", "\n", "linearlist", "=", "nn", ".", "ModuleList", "(", "[", "\n", "nn", ".", "Linear", "(", "num_intermediate_points", "*", "2", ",", "2", ",", "bias", "=", "False", ")", "\n", "for", "l", "in", "range", "(", "self", ".", "nA", ")", "\n", "]", ")", "\n", "\n", "# use the same weights to maintain numerical equiv checks", "\n", "latent_dim", "=", "self", ".", "nA", "*", "self", ".", "nI", "\n", "self", ".", "inner_conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "descriptor_dimension", ",", "\n", "out_channels", "=", "latent_dim", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "weights", "=", "weights", ".", "view", "(", "descriptor_dimension", ",", "-", "1", ")", ".", "t", "(", ")", "\n", "weights", "=", "weights", ".", "view", "(", "latent_dim", ",", "descriptor_dimension", ",", "1", ",", "1", ")", "\n", "self", ".", "inner_conv", ".", "weight", ".", "data", "=", "weights", "\n", "self", ".", "latent_dim", "=", "latent_dim", "\n", "\n", "if", "DENSE_CONV", ":", "\n", "            ", "self", ".", "reg_conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "latent_dim", "*", "2", ",", "\n", "out_channels", "=", "2", "*", "self", ".", "nA", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "", "else", ":", "# use groups to reproduce the independent virtual keypoint usage", "\n", "            ", "self", ".", "reg_conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "latent_dim", "*", "2", ",", "\n", "out_channels", "=", "2", "*", "self", ".", "nA", ",", "\n", "kernel_size", "=", "1", ",", "\n", "groups", "=", "self", ".", "nA", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "reg_weights", "=", "torch", ".", "zeros", "(", "2", "*", "self", ".", "nA", ",", "self", ".", "nI", "*", "2", ")", "\n", "for", "ii", "in", "range", "(", "0", ",", "self", ".", "nA", ")", ":", "\n", "                ", "reg_weights", "[", "2", "*", "ii", ":", "2", "*", "(", "ii", "+", "1", ")", "]", "=", "linearlist", "[", "ii", "]", ".", "weight", ".", "data", "\n", "", "self", ".", "reg_conv", ".", "weight", ".", "data", "=", "reg_weights", ".", "view", "(", "2", "*", "self", ".", "nA", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "\n", "# remove unused elements", "\n", "", "self", ".", "descriptors", "=", "nn", ".", "Parameter", "(", "weights", ")", "\n", "self", ".", "linear", "=", "linearlist", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.model.keypoint_prediction.IntermediateKeypointPredictor.forward": [[61, 86], ["input[].detach", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "keypoint_prediction.IntermediateKeypointPredictor.inner_conv", "corr.view.view.view", "torch.softmax", "torch.softmax", "torch.softmax", "smcorr.reshape.reshape.reshape", "smcorr.reshape.reshape.sum", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "keypoint_prediction.IntermediateKeypointPredictor.reg_conv().view", "keypoint_prediction.IntermediateKeypointPredictor.reg_conv", "torch.stack.view", "torch.stack.view", "torch.stack.view", "xx.view", "yy.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "input", "=", "input", "[", "0", "]", ".", "detach", "(", ")", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "input", ".", "shape", "\n", "\n", "assert", "self", ".", "descriptor_dimension", "==", "C", "\n", "xi", "=", "torch", ".", "linspace", "(", "-", "1", ",", "1", ",", "W", ",", "device", "=", "input", ".", "device", ")", "\n", "yi", "=", "torch", ".", "linspace", "(", "-", "1", ",", "1", ",", "H", ",", "device", "=", "input", ".", "device", ")", "\n", "yy", ",", "xx", "=", "torch", ".", "meshgrid", "(", "yi", ",", "xi", ")", "\n", "\n", "corr", "=", "self", ".", "inner_conv", "(", "input", ")", "\n", "corr", "=", "corr", ".", "view", "(", "B", ",", "self", ".", "latent_dim", ",", "H", "*", "W", ")", "\n", "smcorr", "=", "F", ".", "softmax", "(", "self", ".", "softargmax_mul", "*", "corr", ",", "dim", "=", "2", ")", "\n", "smcorr", "=", "smcorr", ".", "reshape", "(", "B", ",", "self", ".", "nA", ",", "self", ".", "nI", ",", "H", ",", "W", ")", "\n", "\n", "mass", "=", "smcorr", ".", "sum", "(", "dim", "=", "(", "3", ",", "4", ")", ")", "\n", "xpred", "=", "(", "smcorr", "*", "xx", ".", "view", "(", "1", ",", "1", ",", "1", ",", "H", ",", "W", ")", ")", ".", "sum", "(", "dim", "=", "(", "3", ",", "4", ")", ")", "/", "mass", "\n", "ypred", "=", "(", "smcorr", "*", "yy", ".", "view", "(", "1", ",", "1", ",", "1", ",", "H", ",", "W", ")", ")", ".", "sum", "(", "dim", "=", "(", "3", ",", "4", ")", ")", "/", "mass", "\n", "intermediate", "=", "torch", ".", "stack", "(", "(", "xpred", ",", "ypred", ")", ",", "dim", "=", "3", ")", "\n", "# pred = [", "\n", "#     self.linear[i](intermediate[:, i, :, :].reshape(B, -1)).reshape(B, 1, 2)", "\n", "#     for i in range(self.nA)", "\n", "# ]", "\n", "# pred = torch.cat(pred, 1)", "\n", "pred", "=", "self", ".", "reg_conv", "(", "intermediate", ".", "view", "(", "B", ",", "-", "1", ",", "1", ",", "1", ")", ")", ".", "view", "(", "B", ",", "self", ".", "nA", ",", "2", ")", "\n", "return", "pred", ",", "intermediate", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.model.keypoint_prediction.IntermediateKeypointPredictor.forward_orig": [[87, 136], ["input[].detach", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "keypoint_prediction.IntermediateKeypointPredictor.descriptors.reshape", "input[].reshape", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.softmax", "torch.softmax", "torch.softmax", "smcorr.reshape.reshape.reshape", "keypoint_prediction.IntermediateKeypointPredictor.t", "smcorr.reshape.reshape.sum", "smcorr.reshape.reshape.sum", "range", "intermediate[].reshape", "xx.view", "yy.view"], "methods", ["None"], ["", "def", "forward_orig", "(", "self", ",", "input", ")", ":", "\n", "        ", "input", "=", "input", "[", "0", "]", ".", "detach", "(", ")", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "input", ".", "shape", "\n", "\n", "assert", "self", ".", "descriptor_dimension", "==", "C", "\n", "\n", "xi", "=", "torch", ".", "linspace", "(", "-", "1", ",", "1", ",", "W", ",", "device", "=", "input", ".", "device", ")", "\n", "yi", "=", "torch", ".", "linspace", "(", "-", "1", ",", "1", ",", "H", ",", "device", "=", "input", ".", "device", ")", "\n", "yy", ",", "xx", "=", "torch", ".", "meshgrid", "(", "yi", ",", "xi", ")", "\n", "\n", "intermediate", "=", "torch", ".", "zeros", "(", "B", ",", "self", ".", "nA", ",", "self", ".", "nI", ",", "2", ",", "device", "=", "input", ".", "device", ")", "\n", "\n", "for", "b", "in", "range", "(", "B", ")", ":", "\n", "            ", "f1", "=", "self", ".", "descriptors", ".", "reshape", "(", "C", ",", "-", "1", ")", "# source", "\n", "f2", "=", "input", "[", "b", "]", ".", "reshape", "(", "C", ",", "H", "*", "W", ")", "# target", "\n", "\n", "# f1 = F.normalize(f1, p=2, dim=0) * 20", "\n", "# f2 = F.normalize(f2, p=2, dim=0) * 20", "\n", "\n", "corr", "=", "torch", ".", "matmul", "(", "f1", ".", "t", "(", ")", ",", "f2", ")", "\n", "\n", "smcorr", "=", "F", ".", "softmax", "(", "self", ".", "softargmax_mul", "*", "corr", ",", "dim", "=", "1", ")", "\n", "smcorr", "=", "smcorr", ".", "reshape", "(", "self", ".", "nA", ",", "self", ".", "nI", ",", "H", ",", "W", ")", "\n", "\n", "xpred", "=", "(", "smcorr", "*", "xx", ".", "view", "(", "1", ",", "1", ",", "H", ",", "W", ")", ")", ".", "sum", "(", "dim", "=", "(", "2", ",", "3", ")", ")", "/", "smcorr", ".", "sum", "(", "dim", "=", "(", "2", ",", "\n", "3", ")", ")", "\n", "ypred", "=", "(", "smcorr", "*", "yy", ".", "view", "(", "1", ",", "1", ",", "H", ",", "W", ")", ")", ".", "sum", "(", "dim", "=", "(", "2", ",", "3", ")", ")", "/", "smcorr", ".", "sum", "(", "dim", "=", "(", "2", ",", "\n", "3", ")", ")", "\n", "\n", "intermediate", "[", "b", ",", ":", ",", ":", ",", "0", "]", "=", "xpred", "\n", "intermediate", "[", "b", ",", ":", ",", ":", ",", "1", "]", "=", "ypred", "\n", "\n", "# for a in range(self.nA):", "\n", "#     for i in range(self.nI):", "\n", "#         real_argmax = torch.argmax(smcorr[a,i])", "\n", "#         rx = xx.reshape(-1)[real_argmax]", "\n", "#         ry = yy.reshape(-1)[real_argmax]", "\n", "#         sx = xpred[a,i]", "\n", "#         sy = ypred[a,i]", "\n", "#         print(\"[%d,%d] soft (%f,%f) real (%f,%f)\" % (a,i,sx,sy,rx,ry))", "\n", "", "self", ".", "intermediate", "=", "intermediate", "\n", "\n", "pred", "=", "[", "\n", "self", ".", "linear", "[", "i", "]", "(", "intermediate", "[", ":", ",", "i", ",", ":", ",", ":", "]", ".", "reshape", "(", "B", ",", "-", "1", ")", ")", ".", "reshape", "(", "B", ",", "1", ",", "2", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "nA", ")", "\n", "]", "\n", "pred", "=", "torch", ".", "cat", "(", "pred", ",", "1", ")", "\n", "\n", "return", "pred", ",", "intermediate", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.model.segmentation_head.SegmentationHead.__init__": [[7, 15], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.jamt9000_DVE.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "descriptor_dimension", ",", "num_classes", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "descriptor_dimension", "=", "descriptor_dimension", "\n", "self", ".", "classifier", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "descriptor_dimension", ",", "\n", "out_channels", "=", "num_classes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "True", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.model.segmentation_head.SegmentationHead.forward": [[17, 19], ["segmentation_head.SegmentationHead.classifier", "input[].detach"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "classifier", "(", "input", "[", "0", "]", ".", "detach", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.model.dummynet.DummyNet.__init__": [[6, 9], ["base.BaseModel.__init__"], "methods", ["home.repos.pwc.inspect_result.jamt9000_DVE.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_output_channels", ")", ":", "\n", "        ", "super", "(", "DummyNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_output_channels", "=", "num_output_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.model.dummynet.DummyNet.forward": [[10, 16], ["x.detach.detach.detach", "msg.format.format.format"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "detach", "(", ")", "\n", "msg", "=", "\"expected {} output channels, found {}\"", "\n", "msg", "=", "msg", ".", "format", "(", "x", ".", "shape", "[", "1", "]", ",", "self", ".", "num_output_channels", ")", "\n", "assert", "x", ".", "shape", "[", "1", "]", "==", "self", ".", "num_output_channels", ",", "msg", "\n", "return", "[", "x", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.model.hourglass.ResidualBottleneckPreactivation.__init__": [[14, 27], ["torch.Module.__init__", "make_bn", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "make_bn", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "make_bn", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.jamt9000_DVE.base.base_model.BaseModel.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "make_bn", "=", "None", ")", ":", "\n", "        ", "super", "(", "ResidualBottleneckPreactivation", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "bn1", "=", "make_bn", "(", "inplanes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "bn2", "=", "make_bn", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "bn3", "=", "make_bn", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "2", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.model.hourglass.ResidualBottleneckPreactivation.forward": [[28, 49], ["hourglass.ResidualBottleneckPreactivation.bn1", "hourglass.ResidualBottleneckPreactivation.relu", "hourglass.ResidualBottleneckPreactivation.conv1", "hourglass.ResidualBottleneckPreactivation.bn2", "hourglass.ResidualBottleneckPreactivation.relu", "hourglass.ResidualBottleneckPreactivation.conv2", "hourglass.ResidualBottleneckPreactivation.bn3", "hourglass.ResidualBottleneckPreactivation.relu", "hourglass.ResidualBottleneckPreactivation.conv3", "hourglass.ResidualBottleneckPreactivation.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "bn1", "(", "x", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.model.hourglass.HourglassBlock.__init__": [[52, 62], ["torch.Module.__init__", "hourglass.HourglassBlock._hour_glass_layers"], "methods", ["home.repos.pwc.inspect_result.jamt9000_DVE.base.base_model.BaseModel.__init__", "home.repos.pwc.inspect_result.jamt9000_DVE.model.hourglass.HourglassBlock._hour_glass_layers"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "planes", ",", "depth", ",", "make_bn", ")", ":", "\n", "        ", "super", "(", "HourglassBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "block", "=", "block", "\n", "self", ".", "layernames", "=", "[", "]", "\n", "self", ".", "num_blocks", "=", "num_blocks", "\n", "self", ".", "planes", "=", "planes", "\n", "self", ".", "outputs", "=", "{", "}", "\n", "self", ".", "make_bn", "=", "make_bn", "\n", "\n", "self", ".", "_hour_glass_layers", "(", "depth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.model.hourglass.HourglassBlock._make_blocks": [[63, 68], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "hourglass.HourglassBlock.block"], "methods", ["None"], ["", "def", "_make_blocks", "(", "self", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "num_blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "self", ".", "block", "(", "self", ".", "planes", "*", "self", ".", "block", ".", "expansion", ",", "self", ".", "planes", ",", "make_bn", "=", "self", ".", "make_bn", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.model.hourglass.HourglassBlock._hour_glass_layers": [[69, 95], ["hourglass.HourglassBlock.layernames.append", "setattr", "hourglass.HourglassBlock.layernames.append", "setattr", "hourglass.HourglassBlock.layernames.append", "setattr", "hourglass.HourglassBlock.layernames.append", "setattr", "hourglass.HourglassBlock.layernames.append", "setattr", "hourglass.HourglassBlock.layernames.append", "setattr", "hourglass.HourglassBlock._make_blocks", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "hourglass.HourglassBlock._make_blocks", "hourglass.HourglassBlock.layernames.append", "setattr", "hourglass.HourglassBlock._hour_glass_layers", "hourglass.HourglassBlock._make_blocks", "torch.Upsample", "torch.Upsample", "torch.Upsample", "hourglass.HourglassBlock._make_blocks"], "methods", ["home.repos.pwc.inspect_result.jamt9000_DVE.model.hourglass.HourglassNet._make_blocks", "home.repos.pwc.inspect_result.jamt9000_DVE.model.hourglass.HourglassNet._make_blocks", "home.repos.pwc.inspect_result.jamt9000_DVE.model.hourglass.HourglassBlock._hour_glass_layers", "home.repos.pwc.inspect_result.jamt9000_DVE.model.hourglass.HourglassNet._make_blocks", "home.repos.pwc.inspect_result.jamt9000_DVE.model.hourglass.HourglassNet._make_blocks"], ["", "def", "_hour_glass_layers", "(", "self", ",", "n", ")", ":", "\n", "# Recursively build the hourglass layers", "\n", "        ", "self", ".", "layernames", ".", "append", "(", "'layer%d_1'", "%", "n", ")", "\n", "setattr", "(", "self", ",", "self", ".", "layernames", "[", "-", "1", "]", ",", "self", ".", "_make_blocks", "(", ")", ")", "\n", "\n", "self", ".", "layernames", ".", "append", "(", "'mp%d'", "%", "n", ")", "\n", "setattr", "(", "self", ",", "self", ".", "layernames", "[", "-", "1", "]", ",", "nn", ".", "MaxPool2d", "(", "2", ",", "stride", "=", "2", ")", ")", "\n", "\n", "self", ".", "layernames", ".", "append", "(", "'layer%d_2'", "%", "n", ")", "\n", "setattr", "(", "self", ",", "self", ".", "layernames", "[", "-", "1", "]", ",", "self", ".", "_make_blocks", "(", ")", ")", "\n", "\n", "if", "n", "==", "1", ":", "\n", "            ", "self", ".", "layernames", ".", "append", "(", "'layer%d_4'", "%", "n", ")", "\n", "setattr", "(", "self", ",", "self", ".", "layernames", "[", "-", "1", "]", ",", "self", ".", "_make_blocks", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_hour_glass_layers", "(", "n", "-", "1", ")", "\n", "\n", "", "self", ".", "layernames", ".", "append", "(", "'layer%d_3'", "%", "n", ")", "\n", "setattr", "(", "self", ",", "self", ".", "layernames", "[", "-", "1", "]", ",", "self", ".", "_make_blocks", "(", ")", ")", "\n", "\n", "self", ".", "layernames", ".", "append", "(", "'up%d'", "%", "n", ")", "\n", "setattr", "(", "self", ",", "self", ".", "layernames", "[", "-", "1", "]", ",", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ")", ")", "\n", "\n", "self", ".", "layernames", ".", "append", "(", "'sum%d'", "%", "n", ")", "\n", "# setattr(self, self.layernames[-1], lambda x: self.outputs['layer%d_1' % n] + x)", "\n", "setattr", "(", "self", ",", "self", ".", "layernames", "[", "-", "1", "]", ",", "(", "torch", ".", "add", ",", "'layer%d_1'", "%", "n", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.model.hourglass.HourglassBlock.forward": [[96, 108], ["getattr", "isinstance", "fn", "getattr."], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "outputs", "=", "{", "}", "\n", "for", "layer", "in", "self", ".", "layernames", ":", "\n", "            ", "layerfn", "=", "getattr", "(", "self", ",", "layer", ")", "\n", "if", "isinstance", "(", "layerfn", ",", "tuple", ")", ":", "\n", "                ", "fn", ",", "a", "=", "layerfn", "\n", "x", "=", "fn", "(", "outputs", "[", "a", "]", ",", "x", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "layerfn", "(", "x", ")", "\n", "", "if", "'layer'", "in", "layer", "and", "'_1'", "in", "layer", ":", "\n", "                ", "outputs", "[", "layer", "]", "=", "x", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.model.hourglass.HourglassNet.__init__": [[111, 156], ["base.BaseModel.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "hourglass.HourglassNet.make_bn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "hourglass.HourglassNet._make_blocks", "hourglass.HourglassNet._make_blocks", "hourglass.HourglassNet._make_blocks", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Parameter", "torch.Parameter", "torch.Parameter", "hg.append", "hourglass.HourglassNet._make_blocks", "hourglass.HourglassNet.make_bn", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d.weight.data.mul_", "output_layers.append", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "hourglass.HourglassBlock", "torch.Sequential", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.jamt9000_DVE.base.base_model.BaseModel.__init__", "home.repos.pwc.inspect_result.jamt9000_DVE.model.hourglass.HourglassNet._make_blocks", "home.repos.pwc.inspect_result.jamt9000_DVE.model.hourglass.HourglassNet._make_blocks", "home.repos.pwc.inspect_result.jamt9000_DVE.model.hourglass.HourglassNet._make_blocks", "home.repos.pwc.inspect_result.jamt9000_DVE.model.hourglass.HourglassNet._make_blocks"], ["    ", "def", "__init__", "(", "self", ",", "block", "=", "ResidualBottleneckPreactivation", ",", "num_stacks", "=", "1", ",", "num_blocks", "=", "4", ",", "planes_conv1", "=", "64", ",", "planes_block", "=", "128", ",", "planes_hg", "=", "128", ",", "\n", "num_output_channels", "=", "16", ",", "use_group_norm", "=", "False", ",", "output_layer_weight_mul", "=", "1.", ",", "scaled_norm_output", "=", "False", ")", ":", "\n", "        ", "super", "(", "HourglassNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "block", "=", "block", "\n", "self", ".", "num_stacks", "=", "num_stacks", "\n", "self", ".", "num_blocks", "=", "num_blocks", "\n", "self", ".", "planes_conv1", "=", "planes_conv1", "\n", "self", ".", "planes_block", "=", "planes_block", "# num planes in the 3x3 conv layers", "\n", "self", ".", "planes_hg", "=", "planes_hg", "\n", "self", ".", "depth_hg", "=", "4", "\n", "self", ".", "num_output_channels", "=", "num_output_channels", "\n", "if", "use_group_norm", ":", "\n", "            ", "self", ".", "make_bn", "=", "make_gn", "\n", "", "else", ":", "\n", "            ", "self", ".", "make_bn", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "output_layer_weight_mul", "=", "output_layer_weight_mul", "\n", "self", ".", "scaled_norm_output", "=", "scaled_norm_output", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "planes_conv1", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "True", ")", "\n", "self", ".", "bn1", "=", "self", ".", "make_bn", "(", "planes_conv1", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_blocks", "(", "planes_conv1", ",", "planes_conv1", ",", "1", ")", "# 64 -> 64 -> 128", "\n", "self", ".", "layer2", "=", "self", ".", "_make_blocks", "(", "planes_conv1", "*", "block", ".", "expansion", ",", "planes_block", ",", "1", ")", "# 128 -> 128 -> 256", "\n", "self", ".", "layer3", "=", "self", ".", "_make_blocks", "(", "planes_block", "*", "block", ".", "expansion", ",", "planes_hg", ",", "1", ")", "# 256 -> 128 -> 256", "\n", "\n", "if", "self", ".", "scaled_norm_output", ":", "\n", "            ", "self", ".", "normscale", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "20.", ")", ")", "\n", "\n", "", "nch", "=", "self", ".", "planes_hg", "*", "block", ".", "expansion", "\n", "hg", "=", "[", "]", "\n", "output_layers", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_stacks", ")", ":", "\n", "            ", "hg", ".", "append", "(", "HourglassBlock", "(", "block", ",", "num_blocks", ",", "self", ".", "planes_hg", ",", "self", ".", "depth_hg", ",", "make_bn", "=", "self", ".", "make_bn", ")", ")", "\n", "res", "=", "self", ".", "_make_blocks", "(", "nch", ",", "self", ".", "planes_hg", ",", "self", ".", "num_blocks", ")", "\n", "bn", "=", "self", ".", "make_bn", "(", "nch", ")", "\n", "conv", "=", "nn", ".", "Conv2d", "(", "nch", ",", "nch", ",", "kernel_size", "=", "1", ")", "\n", "outlayer", "=", "nn", ".", "Conv2d", "(", "nch", ",", "self", ".", "num_output_channels", ",", "kernel_size", "=", "1", ")", "\n", "outlayer", ".", "weight", ".", "data", ".", "mul_", "(", "self", ".", "output_layer_weight_mul", ")", "\n", "output_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "res", ",", "conv", ",", "bn", ",", "self", ".", "relu", ",", "outlayer", ")", ")", "\n", "\n", "", "self", ".", "hg", "=", "nn", ".", "ModuleList", "(", "hg", ")", "\n", "self", ".", "output_layers", "=", "nn", ".", "ModuleList", "(", "output_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.model.hourglass.HourglassNet._make_blocks": [[157, 170], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "layers.append", "hourglass.HourglassNet.block"], "methods", ["None"], ["", "def", "_make_blocks", "(", "self", ",", "inplanes", ",", "planes", ",", "num_blocks", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "\n", "downsample", "=", "None", "\n", "if", "inplanes", "!=", "planes", "*", "self", ".", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", "*", "self", ".", "block", ".", "expansion", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "0", ",", "num_blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "self", ".", "block", "(", "inplanes", ",", "planes", ",", "1", ",", "downsample", "if", "i", "==", "0", "else", "None", ",", "make_bn", "=", "self", ".", "make_bn", ")", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "inplanes", "=", "planes", "*", "self", ".", "block", ".", "expansion", "\n", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.model.hourglass.HourglassNet.forward": [[171, 192], ["hourglass.HourglassNet.conv1", "hourglass.HourglassNet.bn1", "hourglass.HourglassNet.relu", "hourglass.HourglassNet.layer1", "hourglass.HourglassNet.layer2", "hourglass.HourglassNet.layer3", "range", "out.append", "torch.normalize", "torch.normalize", "torch.normalize"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "[", "]", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_stacks", ")", ":", "\n", "            ", "x", "=", "self", ".", "hg", "[", "i", "]", "(", "x", ")", "\n", "y", "=", "self", ".", "output_layers", "[", "i", "]", "(", "x", ")", "\n", "if", "self", ".", "scaled_norm_output", ":", "\n", "                ", "y", "=", "F", ".", "normalize", "(", "y", ",", "dim", "=", "1", ",", "p", "=", "2", ")", "*", "self", ".", "normscale", "\n", "", "out", ".", "append", "(", "y", ")", "\n", "\n", "# XXX just return last output", "\n", "", "out", "=", "[", "out", "[", "-", "1", "]", "]", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.model.hourglass.make_gn": [[7, 9], ["torch.GroupNorm"], "function", ["None"], ["def", "make_gn", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "nn", ".", "GroupNorm", "(", "16", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.model.loss.regression_loss": [[8, 13], ["meta[].to", "torch.smooth_l1_loss"], "function", ["None"], ["def", "regression_loss", "(", "prediction_normalized", ",", "meta", ",", "alpha", "=", "1.", ",", "**", "kwargs", ")", ":", "\n", "    ", "pred", "=", "prediction_normalized", "[", "0", "]", "\n", "kp", "=", "meta", "[", "'keypts_normalized'", "]", ".", "to", "(", "pred", ".", "device", ")", "\n", "B", ",", "nA", ",", "_", "=", "pred", ".", "shape", "\n", "return", "F", ".", "smooth_l1_loss", "(", "pred", "*", "alpha", ",", "kp", "*", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.model.loss.segmentation_loss": [[15, 24], ["meta[].to().long", "F.interpolate.size", "target.view.size", "F.interpolate.transpose().transpose().contiguous().view", "target.view.view", "torch.cross_entropy", "torch.interpolate", "meta[].to", "F.interpolate.transpose().transpose().contiguous", "F.interpolate.transpose().transpose", "F.interpolate.transpose"], "function", ["None"], ["", "def", "segmentation_loss", "(", "x", ",", "meta", ",", "weight", "=", "None", ",", "size_average", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "target", "=", "meta", "[", "\"lbls\"", "]", ".", "to", "(", "x", ".", "device", ")", ".", "long", "(", ")", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "nt", ",", "ht", ",", "wt", "=", "target", ".", "size", "(", ")", "\n", "if", "h", "!=", "ht", "and", "w", "!=", "wt", ":", "# upsample labels", "\n", "        ", "x", "=", "F", ".", "interpolate", "(", "x", ",", "size", "=", "(", "ht", ",", "wt", ")", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", ")", "\n", "", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "transpose", "(", "2", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "c", ")", "\n", "target", "=", "target", ".", "view", "(", "-", "1", ")", "\n", "return", "F", ".", "cross_entropy", "(", "x", ",", "target", ",", "weight", "=", "weight", ",", "reduction", "=", "\"mean\"", ")", "\n", "# return F.cross_entropy(x, target, weight=weight, size_average=size_average)", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.model.loss.dense_correlation_loss": [[27, 100], ["grid.to.to", "utils.tps.grid_unnormalize", "utils.tps.spatial_grid_unnormalized().to", "range", "dense_corr", "feats1[].reshape", "feats2[].reshape", "torch.matmul", "torch.matmul", "corr.reshape.reshape", "torch.softmax().reshape", "L.sum", "utils.tps.spatial_grid_unnormalized", "feats1[].reshape.t", "torch.no_grad", "torch.no_grad", "diff.pow.pow", "torch.normalize", "torch.normalize", "torch.softmax", "corr.reshape.reshape"], "function", ["home.repos.pwc.inspect_result.jamt9000_DVE.utils.tps.grid_unnormalize", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.tps.spatial_grid_unnormalized"], ["", "def", "dense_correlation_loss", "(", "feats", ",", "meta", ",", "pow", "=", "0.5", ",", "fold_corr", "=", "False", ",", "normalize_vectors", "=", "True", ")", ":", "\n", "    ", "feats", "=", "feats", "[", "0", "]", "\n", "device", "=", "feats", ".", "device", "\n", "grid", "=", "meta", "[", "'grid'", "]", "\n", "\n", "# Grid (B,H,W,2): For each pixel in im1, where did it come from in im2", "\n", "grid", "=", "grid", ".", "to", "(", "device", ")", "\n", "\n", "H_input", "=", "grid", ".", "shape", "[", "1", "]", "\n", "W_input", "=", "grid", ".", "shape", "[", "2", "]", "\n", "\n", "feats1", "=", "feats", "[", "0", ":", ":", "2", "]", "\n", "feats2", "=", "feats", "[", "1", ":", ":", "2", "]", "\n", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "feats1", ".", "shape", "\n", "h", ",", "w", "=", "H", ",", "W", "\n", "\n", "stride", "=", "H_input", "//", "H", "\n", "\n", "batch_grid_u", "=", "tps", ".", "grid_unnormalize", "(", "grid", ",", "H_input", ",", "W_input", ")", "\n", "batch_grid_u", "=", "batch_grid_u", "[", ":", ",", ":", ":", "stride", ",", ":", ":", "stride", ",", ":", "]", "\n", "xxyy", "=", "tps", ".", "spatial_grid_unnormalized", "(", "H_input", ",", "W_input", ")", ".", "to", "(", "device", ")", "\n", "\n", "if", "fold_corr", ":", "\n", "        ", "from", "model", ".", "folded_correlation", "import", "DenseCorr", "\n", "\"\"\"This function computes the gradient explicitly to avoid the memory\n        issues with using autorgrad in a for loop.\"\"\"", "\n", "assert", "not", "normalize_vectors", "\n", "dense_corr", "=", "DenseCorr", ".", "apply", "\n", "return", "dense_corr", "(", "feats1", ",", "feats2", ",", "xxyy", ",", "batch_grid_u", ",", "stride", ",", "pow", ")", "\n", "\n", "", "loss", "=", "0.", "\n", "for", "b", "in", "range", "(", "B", ")", ":", "\n", "        ", "f1", "=", "feats1", "[", "b", "]", ".", "reshape", "(", "C", ",", "H", "*", "W", ")", "# source", "\n", "f2", "=", "feats2", "[", "b", "]", ".", "reshape", "(", "C", ",", "h", "*", "w", ")", "# target", "\n", "\n", "if", "normalize_vectors", ":", "\n", "            ", "f1", "=", "F", ".", "normalize", "(", "f1", ",", "p", "=", "2", ",", "dim", "=", "0", ")", "*", "20", "\n", "f2", "=", "F", ".", "normalize", "(", "f2", ",", "p", "=", "2", ",", "dim", "=", "0", ")", "*", "20", "\n", "\n", "", "corr", "=", "torch", ".", "matmul", "(", "f1", ".", "t", "(", ")", ",", "f2", ")", "\n", "corr", "=", "corr", ".", "reshape", "(", "H", ",", "W", ",", "h", ",", "w", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "diff", "=", "batch_grid_u", "[", "b", ",", ":", ",", ":", ",", "None", ",", "None", ",", ":", "]", "-", "xxyy", "[", "None", ",", "None", ",", ":", ":", "stride", ",", ":", ":", "stride", ",", ":", "]", "\n", "diff", "=", "(", "diff", "*", "diff", ")", ".", "sum", "(", "4", ")", ".", "sqrt", "(", ")", "\n", "diff", "=", "diff", ".", "pow", "(", "pow", ")", "\n", "\n", "# grid_u = tps.grid_unnormalize(grid[b], H_input, W_input)", "\n", "# diff = grid_u[:, :, None, None, :] - xxyy[None, None, :, :, :]", "\n", "\n", "# Equivalent to this", "\n", "#", "\n", "# diff = torch.zeros(H_input, W_input, H_input, W_input, 2)", "\n", "# for I in range(H_input):", "\n", "#     for J in range(W_input):", "\n", "#         for i in range(H_input):", "\n", "#             for j in range(W_input):", "\n", "#                 diff[I, J, i, j, 0] = J + flow[b, I, J, 0] - j", "\n", "#                 diff[I, J, i, j, 1] = I + flow[b, I, J, 1] - i", "\n", "\n", "# diff = diff[::stride, ::stride, ::stride, ::stride]", "\n", "# diff = (diff * diff).sum(4).sqrt()", "\n", "# diff = diff.pow(pow)", "\n", "\n", "", "smcorr", "=", "F", ".", "softmax", "(", "corr", ".", "reshape", "(", "H", ",", "W", ",", "-", "1", ")", ",", "dim", "=", "2", ")", ".", "reshape", "(", "corr", ".", "shape", ")", "\n", "\n", "L", "=", "diff", "*", "smcorr", "\n", "\n", "loss", "+=", "L", ".", "sum", "(", ")", "\n", "\n", "", "return", "loss", "/", "(", "H", "*", "W", "*", "B", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.model.loss.estimate_mem": [[102, 112], ["torch.numel", "torch.numel", "ipdb.set_trace"], "function", ["None"], ["", "def", "estimate_mem", "(", "x", ")", ":", "\n", "    ", "if", "x", ".", "dtype", "==", "torch", ".", "float32", ":", "\n", "        ", "nbytes", "=", "4", "\n", "", "elif", "x", ".", "dtype", "==", "torch", ".", "float16", ":", "\n", "        ", "nbytes", "=", "2", "\n", "", "elif", "x", ".", "dtype", "==", "torch", ".", "int8", ":", "\n", "        ", "nbytes", "=", "1", "\n", "", "else", ":", "\n", "        ", "import", "ipdb", ";", "ipdb", ".", "set_trace", "(", ")", "\n", "", "return", "torch", ".", "numel", "(", "x", ")", "*", "nbytes", "/", "(", "1024", ")", "**", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.model.loss.dense_correlation_loss_dve": [[114, 206], ["meta[].to", "utils.tps.spatial_grid_unnormalized().to", "utils.tps.grid_unnormalize", "range", "[].clone", "[].clone", "plt.figure", "plt.figure.add_subplot", "plt.figure.add_subplot", "plt.figure.add_subplot", "fig.add_subplot.imshow", "fig.add_subplot.imshow", "range", "fig.add_subplot.imshow", "plt.figure.savefig", "plt.figure.clf", "dense_corr", "feats1[].reshape", "feats2[].reshape", "feats1[].reshape", "torch.matmul", "torch.matmul", "corr.reshape.reshape", "torch.softmax().reshape", "smcorr_fa.sum().reshape", "torch.matmul().reshape", "torch.matmul().reshape", "torch.softmax().reshape", "L.float().sum", "utils.tps.spatial_grid_unnormalized", "utils.tps.grid_unnormalize", "range", "feats1[].reshape.t", "feats1[].reshape.reshape", "torch.no_grad", "torch.no_grad", "diff.pow.pow", "[].clone.permute", "[].clone.permute", "dists.max", "torch.normalize", "torch.normalize", "torch.normalize", "torch.softmax", "smcorr_fa.sum", "torch.matmul", "torch.matmul", "torch.softmax", "L.float", "torch.rand", "torch.rand", "fig.add_subplot.scatter", "fig.add_subplot.scatter", "corr.reshape.reshape", "smcorr_fa.sum().reshape.t", "torch.matmul().reshape.reshape"], "function", ["home.repos.pwc.inspect_result.jamt9000_DVE.utils.tps.grid_unnormalize", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.tps.spatial_grid_unnormalized", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.tps.grid_unnormalize"], ["", "def", "dense_correlation_loss_dve", "(", "feats", ",", "meta", ",", "pow", "=", "0.5", ",", "fold_corr", "=", "False", ",", "normalize_vectors", "=", "True", ")", ":", "\n", "    ", "feats", "=", "feats", "[", "0", "]", "\n", "device", "=", "feats", ".", "device", "\n", "\n", "# Grid (B,H,W,2): For each pixel in im1, where did it come from in im2", "\n", "grid", "=", "meta", "[", "'grid'", "]", ".", "to", "(", "device", ")", "\n", "\n", "H_input", "=", "grid", ".", "shape", "[", "1", "]", "\n", "W_input", "=", "grid", ".", "shape", "[", "2", "]", "\n", "\n", "feats1", "=", "feats", "[", "0", ":", ":", "2", "]", "\n", "feats2", "=", "feats", "[", "1", ":", ":", "2", "]", "\n", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "feats1", ".", "shape", "\n", "h", ",", "w", "=", "H", ",", "W", "\n", "\n", "stride", "=", "H_input", "//", "H", "\n", "\n", "xxyy", "=", "tps", ".", "spatial_grid_unnormalized", "(", "H_input", ",", "W_input", ")", ".", "to", "(", "device", ")", "\n", "batch_grid_u", "=", "tps", ".", "grid_unnormalize", "(", "grid", ",", "H_input", ",", "W_input", ")", "\n", "batch_grid_u", "=", "batch_grid_u", "[", ":", ",", ":", ":", "stride", ",", ":", ":", "stride", ",", ":", "]", "\n", "\n", "if", "False", ":", "\n", "        ", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "\n", "vis1", "=", "meta", "[", "'im1'", "]", "[", "0", "]", ".", "clone", "(", ")", "\n", "vis2", "=", "meta", "[", "'im2'", "]", "[", "0", "]", ".", "clone", "(", ")", "\n", "visgrid", "=", "tps", ".", "grid_unnormalize", "(", "grid", ",", "H_input", ",", "W_input", ")", "[", "0", "]", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "# a new figure window", "\n", "ax1", "=", "fig", ".", "add_subplot", "(", "1", ",", "3", ",", "1", ")", "\n", "ax2", "=", "fig", ".", "add_subplot", "(", "1", ",", "3", ",", "2", ")", "\n", "ax3", "=", "fig", ".", "add_subplot", "(", "1", ",", "3", ",", "3", ")", "\n", "\n", "ax1", ".", "imshow", "(", "vis1", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "+", "0.5", ")", "\n", "ax2", ".", "imshow", "(", "vis2", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "+", "0.5", ")", "\n", "\n", "for", "i", "in", "range", "(", "H_input", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "W_input", ")", ":", "\n", "                ", "if", "torch", ".", "rand", "(", "[", "]", ")", "<", "0.01", ":", "\n", "                    ", "ax1", ".", "scatter", "(", "j", ",", "i", ")", "\n", "jj", ",", "ii", "=", "visgrid", "[", "i", ",", "j", "]", "\n", "ax2", ".", "scatter", "(", "jj", ",", "ii", ")", "\n", "\n", "", "", "", "dists", "=", "(", "batch_grid_u", "[", "0", "]", "-", "xxyy", "[", ":", ":", "stride", ",", ":", ":", "stride", "]", ")", ".", "pow", "(", "2", ")", ".", "sum", "(", "2", ")", ".", "sqrt", "(", ")", "\n", "ax3", ".", "imshow", "(", "dists", "/", "dists", ".", "max", "(", ")", ")", "\n", "fig", ".", "savefig", "(", "'/tmp/lossvis.pdf'", ")", "\n", "fig", ".", "clf", "(", ")", "\n", "\n", "", "if", "fold_corr", ":", "\n", "        ", "\"\"\"This function computes the gradient explicitly to avoid the memory\n        issues with using autorgrad in a for loop.\"\"\"", "\n", "from", "model", ".", "folded_correlation_dve", "import", "DenseCorrDve", "\n", "dense_corr", "=", "DenseCorrDve", ".", "apply", "\n", "return", "dense_corr", "(", "feats1", ",", "feats2", ",", "xxyy", ",", "batch_grid_u", ",", "stride", ",", "\n", "normalize_vectors", ",", "pow", ")", "\n", "\n", "", "loss", "=", "0.", "\n", "for", "b", "in", "range", "(", "B", ")", ":", "\n", "        ", "f1", "=", "feats1", "[", "b", "]", ".", "reshape", "(", "C", ",", "H", "*", "W", ")", "# source", "\n", "f2", "=", "feats2", "[", "b", "]", ".", "reshape", "(", "C", ",", "h", "*", "w", ")", "# target", "\n", "fa", "=", "feats1", "[", "(", "b", "+", "1", ")", "%", "B", "]", ".", "reshape", "(", "C", ",", "h", "*", "w", ")", "# auxiliary", "\n", "\n", "if", "normalize_vectors", ":", "\n", "            ", "f1", "=", "F", ".", "normalize", "(", "f1", ",", "p", "=", "2", ",", "dim", "=", "0", ")", "*", "20", "\n", "f2", "=", "F", ".", "normalize", "(", "f2", ",", "p", "=", "2", ",", "dim", "=", "0", ")", "*", "20", "\n", "fa", "=", "F", ".", "normalize", "(", "fa", ",", "p", "=", "2", ",", "dim", "=", "0", ")", "*", "20", "\n", "\n", "", "corr", "=", "torch", ".", "matmul", "(", "f1", ".", "t", "(", ")", ",", "fa", ")", "\n", "corr", "=", "corr", ".", "reshape", "(", "H", ",", "W", ",", "h", ",", "w", ")", "\n", "smcorr", "=", "F", ".", "softmax", "(", "corr", ".", "reshape", "(", "H", ",", "W", ",", "-", "1", ")", ",", "dim", "=", "2", ")", ".", "reshape", "(", "corr", ".", "shape", ")", "\n", "smcorr_fa", "=", "smcorr", "[", "None", ",", "...", "]", "*", "fa", ".", "reshape", "(", "-", "1", ",", "1", ",", "1", ",", "h", ",", "w", ")", "\n", "del", "smcorr", "\n", "\n", "f1_via_fa", "=", "smcorr_fa", ".", "sum", "(", "(", "3", ",", "4", ")", ")", ".", "reshape", "(", "C", ",", "H", "*", "W", ")", "\n", "del", "smcorr_fa", "\n", "\n", "corr2", "=", "torch", ".", "matmul", "(", "f1_via_fa", ".", "t", "(", ")", ",", "f2", ")", ".", "reshape", "(", "corr", ".", "shape", ")", "\n", "smcorr2", "=", "F", ".", "softmax", "(", "corr2", ".", "reshape", "(", "H", ",", "W", ",", "-", "1", ")", ",", "dim", "=", "2", ")", ".", "reshape", "(", "corr", ".", "shape", ")", "\n", "del", "corr2", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "diff", "=", "batch_grid_u", "[", "b", ",", ":", ",", ":", ",", "None", ",", "None", ",", ":", "]", "-", "xxyy", "[", "None", ",", "None", ",", ":", ":", "stride", ",", ":", ":", "stride", ",", ":", "]", "\n", "diff", "=", "(", "diff", "*", "diff", ")", ".", "sum", "(", "4", ")", ".", "sqrt", "(", ")", "\n", "diff", "=", "diff", ".", "pow", "(", "pow", ")", "\n", "\n", "", "L", "=", "diff", "*", "smcorr2", "\n", "\n", "loss", "+=", "L", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "\n", "", "return", "loss", "/", "(", "H", "*", "W", "*", "B", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.model.loss.dense_correlation_loss_trick": [[208, 284], ["grid.to.to", "utils.tps.grid_unnormalize", "utils.tps.spatial_grid_unnormalized().to", "range", "dense_corr", "feats1[].reshape", "feats2[].reshape", "torch.matmul", "torch.matmul", "corr.reshape.reshape", "torch.softmax().reshape", "L.sum", "utils.tps.spatial_grid_unnormalized", "feats1[].reshape.t", "torch.no_grad", "torch.no_grad", "ipdb.set_trace", "diff.pow.pow", "torch.normalize", "torch.normalize", "torch.softmax", "corr.reshape.reshape"], "function", ["home.repos.pwc.inspect_result.jamt9000_DVE.utils.tps.grid_unnormalize", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.tps.spatial_grid_unnormalized"], ["", "def", "dense_correlation_loss_trick", "(", "feats", ",", "meta", ",", "pow", "=", "0.5", ",", "fold_corr", "=", "False", ",", "\n", "normalize_vectors", "=", "True", ")", ":", "\n", "    ", "feats", "=", "feats", "[", "0", "]", "\n", "device", "=", "feats", ".", "device", "\n", "grid", "=", "meta", "[", "'grid'", "]", "\n", "\n", "# Grid (B,H,W,2): For each pixel in im1, where did it come from in im2", "\n", "grid", "=", "grid", ".", "to", "(", "device", ")", "\n", "\n", "H_input", "=", "grid", ".", "shape", "[", "1", "]", "\n", "W_input", "=", "grid", ".", "shape", "[", "2", "]", "\n", "\n", "feats1", "=", "feats", "[", "0", ":", ":", "2", "]", "\n", "feats2", "=", "feats", "[", "1", ":", ":", "2", "]", "\n", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "feats1", ".", "shape", "\n", "h", ",", "w", "=", "H", ",", "W", "\n", "\n", "stride", "=", "H_input", "//", "H", "\n", "\n", "batch_grid_u", "=", "tps", ".", "grid_unnormalize", "(", "grid", ",", "H_input", ",", "W_input", ")", "\n", "batch_grid_u", "=", "batch_grid_u", "[", ":", ",", ":", ":", "stride", ",", ":", ":", "stride", ",", ":", "]", "\n", "xxyy", "=", "tps", ".", "spatial_grid_unnormalized", "(", "H_input", ",", "W_input", ")", ".", "to", "(", "device", ")", "\n", "\n", "if", "fold_corr", ":", "\n", "        ", "from", "model", ".", "folded_correlation", "import", "DenseCorr", "\n", "\"\"\"This function computes the gradient explicitly to avoid the memory\n        issues with using autorgrad in a for loop.\"\"\"", "\n", "assert", "not", "normalize_vectors", "\n", "dense_corr", "=", "DenseCorr", ".", "apply", "\n", "return", "dense_corr", "(", "feats1", ",", "feats2", ",", "xxyy", ",", "batch_grid_u", ",", "stride", ",", "pow", ")", "\n", "\n", "", "loss", "=", "0.", "\n", "for", "b", "in", "range", "(", "B", ")", ":", "\n", "        ", "f1", "=", "feats1", "[", "b", "]", ".", "reshape", "(", "C", ",", "H", "*", "W", ")", "# source", "\n", "f2", "=", "feats2", "[", "b", "]", ".", "reshape", "(", "C", ",", "h", "*", "w", ")", "# target", "\n", "\n", "if", "normalize_vectors", ":", "\n", "            ", "f1", "=", "F", ".", "normalize", "(", "f1", ",", "p", "=", "2", ",", "dim", "=", "0", ")", "*", "20", "\n", "f2", "=", "F", ".", "normalize", "(", "f2", ",", "p", "=", "2", ",", "dim", "=", "0", ")", "*", "20", "\n", "\n", "", "corr", "=", "torch", ".", "matmul", "(", "f1", ".", "t", "(", ")", ",", "f2", ")", "\n", "corr", "=", "corr", ".", "reshape", "(", "H", ",", "W", ",", "h", ",", "w", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# replace with expanded terms for efficiency", "\n", "            ", "import", "ipdb", ";", "ipdb", ".", "set_trace", "(", ")", "\n", "diff", "=", "batch_grid_u", "[", "b", ",", ":", ",", ":", ",", "None", ",", "None", ",", ":", "]", "-", "xxyy", "[", "None", ",", "None", ",", ":", ":", "stride", ",", ":", ":", "stride", ",", ":", "]", "\n", "diff", "=", "(", "diff", "*", "diff", ")", ".", "sum", "(", "4", ")", ".", "sqrt", "(", ")", "\n", "diff", "=", "diff", ".", "pow", "(", "pow", ")", "\n", "\n", "# grid_u = tps.grid_unnormalize(grid[b], H_input, W_input)", "\n", "# diff = grid_u[:, :, None, None, :] - xxyy[None, None, :, :, :]", "\n", "\n", "# Equivalent to this", "\n", "#", "\n", "# diff = torch.zeros(H_input, W_input, H_input, W_input, 2)", "\n", "# for I in range(H_input):", "\n", "#     for J in range(W_input):", "\n", "#         for i in range(H_input):", "\n", "#             for j in range(W_input):", "\n", "#                 diff[I, J, i, j, 0] = J + flow[b, I, J, 0] - j", "\n", "#                 diff[I, J, i, j, 1] = I + flow[b, I, J, 1] - i", "\n", "\n", "# diff = diff[::stride, ::stride, ::stride, ::stride]", "\n", "# diff = (diff * diff).sum(4).sqrt()", "\n", "# diff = diff.pow(pow)", "\n", "\n", "", "smcorr", "=", "F", ".", "softmax", "(", "corr", ".", "reshape", "(", "H", ",", "W", ",", "-", "1", ")", ",", "dim", "=", "2", ")", ".", "reshape", "(", "corr", ".", "shape", ")", "\n", "\n", "L", "=", "diff", "*", "smcorr", "\n", "\n", "loss", "+=", "L", ".", "sum", "(", ")", "\n", "\n", "", "return", "loss", "/", "(", "H", "*", "W", "*", "B", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.model.loss.rel_diff": [[286, 289], ["print", "torch.abs().sum", "torch.abs().sum", "torch.abs().mean", "torch.abs().mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "function", ["None"], ["", "def", "rel_diff", "(", "x1", ",", "x2", ",", "name", ")", ":", "\n", "    ", "out", "=", "torch", ".", "abs", "(", "x1", "-", "x2", ")", ".", "sum", "(", ")", "/", "torch", ".", "abs", "(", "x2", ")", ".", "mean", "(", ")", "\n", "print", "(", "\"rel diff for {}: {}\"", ".", "format", "(", "name", ",", "out", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.model.loss.dense_corr_trick_check": [[291, 305], ["torch.randn", "torch.randn", "torch.randn", "torch.randn", "feats.cuda().float.cuda().float", "batch_grid_u.cuda().float.cuda().float", "loss.dense_correlation_loss", "loss.dense_correlation_loss_trick", "loss.rel_diff", "feats.cuda().float.cuda", "batch_grid_u.cuda().float.cuda"], "function", ["home.repos.pwc.inspect_result.jamt9000_DVE.model.loss.dense_correlation_loss", "home.repos.pwc.inspect_result.jamt9000_DVE.model.loss.dense_correlation_loss_trick", "home.repos.pwc.inspect_result.jamt9000_DVE.model.folded_correlation_dve.rel_diff"], ["", "def", "dense_corr_trick_check", "(", ")", ":", "\n", "    ", "dve_dim", "=", "4", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "4", ",", "dve_dim", ",", "4", ",", "4", "\n", "\n", "common", "=", "{", "\"dtype\"", ":", "torch", ".", "double", ",", "\"requires_grad\"", ":", "True", "}", "\n", "feats", "=", "torch", ".", "randn", "(", "B", ",", "C", ",", "H", ",", "W", ",", "**", "common", ")", "\n", "batch_grid_u", "=", "torch", ".", "randn", "(", "B", ",", "H", ",", "W", ",", "2", ",", "dtype", "=", "torch", ".", "double", ",", "\n", "requires_grad", "=", "False", ")", "\n", "\n", "feats", "=", "feats", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "batch_grid_u", "=", "batch_grid_u", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "out", "=", "dense_correlation_loss", "(", "[", "feats", "]", ",", "{", "\"grid\"", ":", "batch_grid_u", "}", ")", "\n", "out2", "=", "dense_correlation_loss_trick", "(", "[", "feats", "]", ",", "{", "\"grid\"", ":", "batch_grid_u", "}", ")", "\n", "rel_diff", "(", "out", ",", "out2", ",", "\"trick\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.model.folded_correlation.DenseCorr.forward": [[16, 57], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "ctx.save_for_backward", "range", "feats1[].reshape", "feats2[].reshape", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "corr.reshape.reshape.reshape", "diff.pow.pow.pow", "torch.softmax", "torch.softmax", "smcorr.reshape.reshape.reshape", "L.sum", "feats1[].reshape.t", "corr.reshape.reshape.reshape"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "feats1", ",", "feats2", ",", "xxyy", ",", "batch_grid_u", ",", "stride", ",", "pow", "=", "0.5", ")", ":", "\n", "        ", "\"\"\"Compute the folded dense correlation loss forward pass.\n\n        Args:\n            feats1 (torch.Tensor): N x C x h x h tensor of features\n            feats2 (torch.Tensor): N x C x h x w tensor of features\n            xxyy (torch.Tensor): H x W x 2 grid of uniform sampling locations.\n            batch_grid_u (torch.Tensor): N x h x w x 2 grid of sampling\n                locations.\n            stride (int): the stride to be applied to the image grid to match\n                the spatial dimensions of the features (so that\n                `H = h * stride`).\n            pow (float :: 0.5): power by which to raise the root distances\n                between pixel locations.\n\n        Returns:\n            (torch.Tensor): The total loss for the given minibatch of inputs.\n        \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "B", ",", "C", ",", "H", ",", "W", "=", "feats1", ".", "shape", "\n", "params", "=", "torch", ".", "IntTensor", "(", "[", "B", ",", "C", ",", "H", ",", "W", ",", "stride", "]", ")", "\n", "pow_tensor", "=", "torch", ".", "FloatTensor", "(", "[", "pow", "]", ")", "\n", "ctx", ".", "save_for_backward", "(", "feats1", ",", "feats2", ",", "xxyy", ",", "batch_grid_u", ",", "\n", "params", ",", "pow_tensor", ")", "\n", "\n", "loss", "=", "0.", "\n", "for", "b", "in", "range", "(", "B", ")", ":", "\n", "                ", "f1", "=", "feats1", "[", "b", "]", ".", "reshape", "(", "C", ",", "H", "*", "W", ")", "# source", "\n", "f2", "=", "feats2", "[", "b", "]", ".", "reshape", "(", "C", ",", "H", "*", "W", ")", "# target", "\n", "corr", "=", "torch", ".", "matmul", "(", "f1", ".", "t", "(", ")", ",", "f2", ")", "\n", "corr", "=", "corr", ".", "reshape", "(", "H", ",", "W", ",", "H", ",", "W", ")", "\n", "diff", "=", "batch_grid_u", "[", "b", ",", ":", ",", ":", ",", "None", ",", "None", ",", ":", "]", "-", "xxyy", "[", "None", ",", "None", ",", ":", ":", "stride", ",", ":", ":", "stride", ",", ":", "]", "\n", "diff", "=", "(", "diff", "*", "diff", ")", ".", "sum", "(", "4", ")", ".", "sqrt", "(", ")", "\n", "diff", "=", "diff", ".", "pow", "(", "pow", ")", "\n", "smcorr", "=", "F", ".", "softmax", "(", "corr", ".", "reshape", "(", "H", ",", "W", ",", "-", "1", ")", ",", "dim", "=", "2", ")", "\n", "smcorr", "=", "smcorr", ".", "reshape", "(", "corr", ".", "shape", ")", "\n", "L", "=", "diff", "*", "smcorr", "\n", "loss", "+=", "L", ".", "sum", "(", ")", "\n", "", "", "return", "loss", "/", "(", "H", "*", "W", "*", "B", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.model.folded_correlation.DenseCorr.backward": [[58, 322], ["pow.item.item.item", "time.time", "time.time", "collections.defaultdict", "x.item", "time.time", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "time.time", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "grad_smcorr.view.view.view", "feats1[].view", "feats2[].view", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "corr.reshape.reshape.view", "torch.softmax", "torch.softmax", "torch.softmax().reshape.view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "grad_corr.view.view.view", "torch.matmul().t", "torch.matmul().t", "torch.matmul().t", "torch.matmul().t", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul().t.reshape", "torch.matmul().t.reshape", "torch.matmul.reshape", "torch.matmul.reshape", "time.time", "print", "print", "print", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "time.time", "time.time", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "diff.pow.pow.pow", "time.time", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "time.time", "feats1[].view.t", "time.time", "time.time", "time.time", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "range", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "folded_correlation.rel_diff", "folded_correlation.rel_diff", "time.time", "time.time", "print", "msg.format", "torch.cuda.HalfTensor().fill_", "torch.cuda.HalfTensor().fill_", "torch.cuda.HalfTensor().fill_", "torch.cuda.HalfTensor().fill_", "torch.cuda.HalfTensor().fill_", "torch.cuda.HalfTensor().fill_", "torch.cuda.HalfTensor().fill_", "torch.cuda.HalfTensor().fill_", "time.time", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.autograd.enable_grad", "torch.autograd.enable_grad", "torch.autograd.enable_grad", "torch.autograd.enable_grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "folded_correlation.rel_diff", "time.time", "time.time", "time.time", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "corr.reshape.reshape.clone().requires_grad_", "torch.softmax", "torch.softmax", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "folded_correlation.rel_diff", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "time.time", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "feats1[].view.clone().requires_grad_", "feats2[].view.clone().requires_grad_", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "folded_correlation.rel_diff", "folded_correlation.rel_diff", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "feats1[].clone().detach().requires_grad_", "feats2[].clone().detach().requires_grad_", "f1_num.reshape.reshape.reshape", "f2_num.reshape.reshape.reshape", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "corr_num.reshape.reshape.reshape", "corr_num.reshape.reshape.reshape", "torch.softmax", "torch.softmax", "smcorr_num.reshape.reshape.reshape", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "folded_correlation.rel_diff", "folded_correlation.rel_diff", "time.time", "feats1[].reshape", "feats2[].reshape", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "corr.reshape.reshape.reshape", "torch.softmax().reshape", "torch.softmax().reshape", "L.sum", "msg.format", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "feats2[].view.t", "f1_num.reshape.reshape.t", "f1_num.reshape.reshape.t", "feats1[].reshape.t", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "diff.pow.pow.pow", "torch.cuda.HalfTensor", "torch.cuda.HalfTensor", "torch.cuda.HalfTensor", "torch.cuda.HalfTensor", "torch.cuda.HalfTensor", "torch.cuda.HalfTensor", "torch.cuda.HalfTensor", "torch.cuda.HalfTensor", "corr.reshape.reshape.clone", "feats1[].view.clone", "feats2[].view.clone", "feats1[].clone().detach", "feats2[].clone().detach", "torch.softmax", "torch.softmax", "corr.reshape.reshape.reshape", "feats1[].clone", "feats2[].clone"], "methods", ["home.repos.pwc.inspect_result.jamt9000_DVE.model.folded_correlation_dve.rel_diff", "home.repos.pwc.inspect_result.jamt9000_DVE.model.folded_correlation_dve.rel_diff", "home.repos.pwc.inspect_result.jamt9000_DVE.model.folded_correlation_dve.rel_diff", "home.repos.pwc.inspect_result.jamt9000_DVE.model.folded_correlation_dve.rel_diff", "home.repos.pwc.inspect_result.jamt9000_DVE.model.folded_correlation_dve.rel_diff", "home.repos.pwc.inspect_result.jamt9000_DVE.model.folded_correlation_dve.rel_diff", "home.repos.pwc.inspect_result.jamt9000_DVE.model.folded_correlation_dve.rel_diff", "home.repos.pwc.inspect_result.jamt9000_DVE.model.folded_correlation_dve.rel_diff"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "\"\"\"Compute the folded dense correlation loss backward pass.\n\n        Args:\n            (torch.Tensor): The gradient of the total loss with respect to the\n                output of the dense correlation loss.\n\n        Returns:\n            (torch.Tensor): N x C x h x h tensor of gradients\n            (torch.Tensor): N x C x h x w tensor of gradients\n            (None): H x W x 2 grid of uniform sampling locations\n            (None): no gradient for `xxyy`\n            (None): no gradient for `batch_grid_u`\n            (None): no gradient for `stride`\n            (None): no gradient for `pow`\n        \"\"\"", "\n", "if", "PROFILE", ":", "\n", "            ", "batch_tic", "=", "time", ".", "time", "(", ")", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "timings", "=", "defaultdict", "(", "float", ")", "\n", "\n", "", "feats1", ",", "feats2", ",", "xxyy", ",", "batch_grid_u", ",", "params", ",", "pow", "=", "ctx", ".", "saved_tensors", "\n", "\n", "\"\"\"We needed to store the integers as part of a tensor, so the\n        unpacking code here is a little convoluted.\"\"\"", "\n", "B", ",", "C", ",", "H", ",", "W", ",", "stride", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "params", "]", "\n", "pow", "=", "pow", ".", "item", "(", ")", "\n", "\n", "\"\"\"This is a pattern that is very convenient - at the top of backward\n        unpack saved_tensors and initialize all gradients w.r.t. inputs to\n        None. Thanks to the fact that additional trailing Nones are\n        ignored, the return statement is simple even when the function has\n        optional inputs.\"\"\"", "\n", "grad_feats1", "=", "grad_feats2", "=", "grad_xxyy", "=", "grad_batch_u", "=", "None", "\n", "grad_stride", "=", "grad_pow", "=", "None", "\n", "\n", "\"\"\"Returning gradients for inputs that don't require it is\n        not an error.\"\"\"", "\n", "assert", "ctx", ".", "needs_input_grad", "[", "0", "]", ",", "\"expected feats1 to need grad\"", "\n", "assert", "ctx", ".", "needs_input_grad", "[", "1", "]", ",", "\"expected feats2 to need grad\"", "\n", "assert", "not", "ctx", ".", "needs_input_grad", "[", "2", "]", ",", "\"expected xxyy does not need grad\"", "\n", "assert", "not", "ctx", ".", "needs_input_grad", "[", "3", "]", ",", "\"expected batch_grid_u does not need grad\"", "\n", "assert", "not", "ctx", ".", "needs_input_grad", "[", "4", "]", ",", "\"expected stride does not need grad\"", "\n", "\n", "if", "PROFILE", ":", "\n", "            ", "timings", "[", "\"back-init\"", "]", "=", "time", ".", "time", "(", ")", "-", "tic", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "            ", "if", "feats1", ".", "is_cuda", ":", "\n", "#\u00a0TODO: clean up types here", "\n", "                ", "if", "feats1", ".", "dtype", "==", "torch", ".", "float32", ":", "\n", "                    ", "grad_feats1", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "B", ",", "C", ",", "H", ",", "W", ")", ".", "fill_", "(", "0", ")", "\n", "grad_feats2", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "B", ",", "C", ",", "H", ",", "W", ")", ".", "fill_", "(", "0", ")", "\n", "", "elif", "feats1", ".", "dtype", "==", "torch", ".", "float16", ":", "\n", "                    ", "grad_feats1", "=", "torch", ".", "cuda", ".", "HalfTensor", "(", "B", ",", "C", ",", "H", ",", "W", ")", ".", "fill_", "(", "0", ")", "\n", "grad_feats2", "=", "torch", ".", "cuda", ".", "HalfTensor", "(", "B", ",", "C", ",", "H", ",", "W", ")", ".", "fill_", "(", "0", ")", "\n", "", "", "else", ":", "\n", "                ", "grad_feats1", "=", "torch", ".", "zeros", "(", "(", "B", ",", "C", ",", "H", ",", "W", ")", ",", "dtype", "=", "feats1", ".", "dtype", ")", "\n", "grad_feats2", "=", "torch", ".", "zeros", "(", "(", "B", ",", "C", ",", "H", ",", "W", ")", ",", "dtype", "=", "feats2", ".", "dtype", ")", "\n", "\n", "", "grad_loss", "=", "grad_output", "/", "(", "H", "*", "W", "*", "B", ")", "\n", "\n", "if", "PROFILE", ":", "\n", "                ", "timings", "[", "\"data transfer\"", "]", "=", "time", ".", "time", "(", ")", "-", "batch_tic", "\n", "\n", "", "for", "b", "in", "range", "(", "B", ")", ":", "\n", "\n", "                ", "if", "PROFILE", ":", "\n", "                    ", "tic", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "diff", "=", "batch_grid_u", "[", "b", ",", ":", ",", ":", ",", "None", ",", "None", ",", ":", "]", "-", "xxyy", "[", "None", ",", "None", ",", ":", ":", "stride", ",", ":", ":", "stride", ",", ":", "]", "\n", "diff", "=", "(", "diff", "*", "diff", ")", ".", "sum", "(", "4", ")", ".", "sqrt", "(", ")", "\n", "diff", "=", "diff", ".", "pow", "(", "pow", ")", "\n", "\n", "", "if", "PROFILE", ":", "\n", "                    ", "timings", "[", "\"diff-grid\"", "]", "+=", "time", ".", "time", "(", ")", "-", "tic", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "\n", "# loss gradient for the current minibatch element (expand to tensor)", "\n", "", "grad_loss_b", "=", "grad_loss", "\n", "grad_smcorr", "=", "grad_loss_b", "*", "diff", "\n", "\n", "if", "LOCAL_CHECKS", ":", "\n", "                    ", "grad_loss_b_", "=", "torch", ".", "ones", "(", "diff", ".", "shape", ",", "dtype", "=", "diff", ".", "dtype", ")", "*", "grad_loss", "\n", "smcorr_", "=", "torch", ".", "randn", "(", "diff", ".", "shape", ",", "dtype", "=", "torch", ".", "double", ",", "requires_grad", "=", "True", ")", "\n", "with", "torch", ".", "autograd", ".", "enable_grad", "(", ")", ":", "\n", "                        ", "L_", "=", "diff", "*", "smcorr_", "\n", "d_smcorr", "=", "torch", ".", "autograd", ".", "grad", "(", "\n", "outputs", "=", "L_", ",", "\n", "inputs", "=", "smcorr_", ",", "\n", "grad_outputs", "=", "grad_loss_b_", ",", "\n", ")", "\n", "grad_smcorr", "=", "grad_loss_b", "*", "diff", "\n", "rel_diff", "(", "grad_smcorr", ",", "d_smcorr", ",", "\"smax\"", ")", "\n", "\n", "", "", "grad_smcorr", "=", "grad_smcorr", ".", "view", "(", "H", ",", "W", ",", "-", "1", ")", "\n", "f1_", "=", "feats1", "[", "b", "]", ".", "view", "(", "C", ",", "H", "*", "W", ")", "\n", "f2_", "=", "feats2", "[", "b", "]", ".", "view", "(", "C", ",", "H", "*", "W", ")", "\n", "\n", "if", "PROFILE", ":", "\n", "                    ", "timings", "[", "\"scale-feats\"", "]", "+=", "time", ".", "time", "(", ")", "-", "tic", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "\n", "#\u00a0This is where the memory usage gets serious", "\n", "", "corr", "=", "torch", ".", "matmul", "(", "f1_", ".", "t", "(", ")", ",", "f2_", ")", "\n", "\n", "if", "PROFILE", ":", "\n", "                    ", "timings", "[", "\"correlation\"", "]", "+=", "time", ".", "time", "(", ")", "-", "tic", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "\n", "#\u00a0Direct backward pass for softmax", "\n", "", "corr", "=", "corr", ".", "view", "(", "H", ",", "W", ",", "-", "1", ")", "\n", "smcorr", "=", "F", ".", "softmax", "(", "corr", ",", "dim", "=", "2", ")", "\n", "smcorr", "=", "smcorr", ".", "view", "(", "corr", ".", "shape", ")", "\n", "sum_term", "=", "torch", ".", "sum", "(", "grad_smcorr", "*", "smcorr", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n", "grad_corr", "=", "smcorr", "*", "(", "grad_smcorr", "-", "sum_term", ")", "\n", "\n", "if", "PROFILE", ":", "\n", "                    ", "timings", "[", "\"softmax\"", "]", "+=", "time", ".", "time", "(", ")", "-", "tic", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "\n", "#\u00a0safety checks", "\n", "", "if", "LOCAL_CHECKS", ":", "\n", "                    ", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "                        ", "corr_num", "=", "corr", ".", "clone", "(", ")", ".", "requires_grad_", "(", ")", "\n", "smcorr_num", "=", "F", ".", "softmax", "(", "corr_num", ",", "dim", "=", "2", ")", "\n", "grad_corr_num", "=", "torch", ".", "autograd", ".", "grad", "(", "\n", "outputs", "=", "smcorr_num", ",", "\n", "inputs", "=", "(", "corr_num", ",", ")", ",", "\n", "grad_outputs", "=", "grad_smcorr", ",", "\n", ")", "\n", "rel_diff", "(", "grad_corr", ",", "grad_corr_num", "[", "0", "]", ",", "\"smax\"", ")", "\n", "\n", "", "", "\"\"\"The main work is done by some fairly beefy MM ops to compute\n                pairwise correlations:\"\"\"", "\n", "grad_corr", "=", "grad_corr", ".", "view", "(", "H", "*", "W", ",", "H", "*", "W", ")", "\n", "grad_f1", "=", "torch", ".", "matmul", "(", "grad_corr", ",", "f2_", ".", "t", "(", ")", ")", ".", "t", "(", ")", "\n", "grad_f2", "=", "torch", ".", "matmul", "(", "f1_", ",", "grad_corr", ")", "\n", "\n", "if", "PROFILE", ":", "\n", "                    ", "timings", "[", "\"corr-back\"", "]", "+=", "time", ".", "time", "(", ")", "-", "tic", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "if", "LOCAL_CHECKS", ":", "\n", "                    ", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "                        ", "f1_num", "=", "f1_", ".", "clone", "(", ")", ".", "requires_grad_", "(", ")", "\n", "f2_num", "=", "f2_", ".", "clone", "(", ")", ".", "requires_grad_", "(", ")", "\n", "corr_num", "=", "torch", ".", "matmul", "(", "f1_num", ".", "t", "(", ")", ",", "f2_num", ")", "\n", "grad_f1_num", ",", "grad_f2_num", "=", "torch", ".", "autograd", ".", "grad", "(", "\n", "outputs", "=", "corr_num", ",", "\n", "inputs", "=", "(", "f1_num", ",", "f2_num", ")", ",", "\n", "grad_outputs", "=", "grad_corr", ",", "\n", ")", "\n", "rel_diff", "(", "grad_f1", ",", "grad_f1_num", ",", "\"corr->f1\"", ")", "\n", "rel_diff", "(", "grad_f2", ",", "grad_f2_num", ",", "\"corr->f2\"", ")", "\n", "grad_f1_inner", "=", "grad_f1_num", "\n", "grad_f2_inner", "=", "grad_f2_num", "\n", "\n", "#\u00a0safety checks over the whole inner loop", "\n", "", "", "if", "LOCAL_CHECKS", ":", "\n", "                    ", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "\n", "                        ", "f1_num", "=", "feats1", "[", "b", "]", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "requires_grad_", "(", ")", "\n", "f2_num", "=", "feats2", "[", "b", "]", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "requires_grad_", "(", ")", "\n", "\n", "# BLock 1 ------------------------------------------", "\n", "f1_num", "=", "f1_num", ".", "reshape", "(", "C", ",", "H", "*", "W", ")", "# source", "\n", "f2_num", "=", "f2_num", ".", "reshape", "(", "C", ",", "H", "*", "W", ")", "# target", "\n", "# BLock 1 ------------------------------------------", "\n", "\n", "# BLock 2 ------------------------------------------", "\n", "corr_num", "=", "torch", ".", "matmul", "(", "f1_num", ".", "t", "(", ")", ",", "f2_num", ")", "\n", "corr_num", "=", "corr_num", ".", "reshape", "(", "H", ",", "W", ",", "H", ",", "W", ")", "\n", "# BLock 2 ------------------------------------------", "\n", "corr_num", "=", "corr_num", ".", "reshape", "(", "H", ",", "W", ",", "-", "1", ")", "\n", "smcorr_num", "=", "F", ".", "softmax", "(", "corr_num", ",", "dim", "=", "2", ")", "\n", "smcorr_num", "=", "smcorr_num", ".", "reshape", "(", "corr_num", ".", "shape", ")", "\n", "\n", "grad_f1_num", ",", "grad_f2_num", "=", "torch", ".", "autograd", ".", "grad", "(", "\n", "outputs", "=", "smcorr_num", ",", "\n", "inputs", "=", "(", "f1_num", ",", "f2_num", ")", ",", "\n", "grad_outputs", "=", "grad_smcorr", ",", "\n", ")", "\n", "grad_f1_outer", "=", "grad_f1_num", "\n", "grad_f2_outer", "=", "grad_f2_num", "\n", "\n", "rel_diff", "(", "grad_f1", ",", "grad_f1_num", ",", "\"df1_\"", ")", "\n", "rel_diff", "(", "grad_f2", ",", "grad_f2_num", ",", "\"df2_\"", ")", "\n", "\n", "", "", "grad_feats1", "[", "b", "]", "=", "grad_f1", ".", "reshape", "(", "(", "C", ",", "H", ",", "W", ")", ")", "\n", "grad_feats2", "[", "b", "]", "=", "grad_f2", ".", "reshape", "(", "(", "C", ",", "H", ",", "W", ")", ")", "\n", "if", "PROFILE", ":", "\n", "                    ", "timings", "[", "\"feat-assign\"", "]", "+=", "time", ".", "time", "(", ")", "-", "tic", "\n", "\n", "", "", "\"\"\"Distribute the gradients back among the input tensor features that\n            require them.\"\"\"", "\n", "# grad_feats1 = grad_feats1.unsqueeze(0).repeat(B, 1, 1, 1)", "\n", "# grad_feats2 = grad_feats2.unsqueeze(0).repeat(B, 1, 1, 1)", "\n", "\n", "if", "LOCAL_CHECKS", ":", "\n", "                ", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "                    ", "loss", "=", "0.", "\n", "grad_loss_", "=", "grad_loss", "*", "(", "H", "*", "W", "*", "B", ")", "#\u00a0unscale", "\n", "for", "b", "in", "range", "(", "B", ")", ":", "\n", "                        ", "f1", "=", "feats1", "[", "b", "]", ".", "reshape", "(", "C", ",", "H", "*", "W", ")", "# source", "\n", "f2", "=", "feats2", "[", "b", "]", ".", "reshape", "(", "C", ",", "H", "*", "W", ")", "# target", "\n", "\n", "corr", "=", "torch", ".", "matmul", "(", "f1", ".", "t", "(", ")", ",", "f2", ")", "\n", "corr", "=", "corr", ".", "reshape", "(", "H", ",", "W", ",", "H", ",", "W", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                            ", "diff", "=", "batch_grid_u", "[", "b", ",", ":", ",", ":", ",", "None", ",", "None", ",", ":", "]", "-", "xxyy", "[", "None", ",", "None", ",", ":", ":", "stride", ",", ":", ":", "stride", ",", ":", "]", "\n", "diff", "=", "(", "diff", "*", "diff", ")", ".", "sum", "(", "4", ")", ".", "sqrt", "(", ")", "\n", "diff", "=", "diff", ".", "pow", "(", "pow", ")", "\n", "\n", "", "smcorr", "=", "F", ".", "softmax", "(", "corr", ".", "reshape", "(", "H", ",", "W", ",", "-", "1", ")", ",", "dim", "=", "2", ")", ".", "reshape", "(", "corr", ".", "shape", ")", "\n", "L", "=", "diff", "*", "smcorr", "\n", "loss", "+=", "L", ".", "sum", "(", ")", "\n", "", "loss", "=", "loss", "/", "(", "H", "*", "W", "*", "B", ")", "\n", "grad_f1_num", ",", "grad_f2_num", "=", "torch", ".", "autograd", ".", "grad", "(", "\n", "outputs", "=", "loss", ",", "\n", "inputs", "=", "(", "feats1", ",", "feats2", ")", ",", "\n", "grad_outputs", "=", "grad_loss_", ",", "\n", ")", "\n", "rel_diff", "(", "grad_feats1", ",", "grad_f1_num", ",", "\"full-loop f2\"", ")", "\n", "rel_diff", "(", "grad_feats2", ",", "grad_f2_num", ",", "\"full-loop f2\"", ")", "\n", "", "", "if", "PROFILE", ":", "\n", "                ", "tic", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "\"\"\"Clear up all intermediate structures to avoid autograd\n            implosions.\"\"\"", "\n", "del", "grad_loss_b", "\n", "del", "b", "\n", "del", "grad_f1", "\n", "del", "grad_f2", "\n", "del", "smcorr", "\n", "del", "corr", "\n", "del", "diff", "\n", "del", "params", "\n", "\n", "if", "PROFILE", ":", "\n", "                ", "timings", "[", "\"cleanup\"", "]", "+=", "time", ".", "time", "(", ")", "-", "tic", "\n", "\n", "", "if", "PROFILE", ":", "\n", "                ", "timings", "[", "\"minibatch\"", "]", "=", "time", ".", "time", "(", ")", "-", "batch_tic", "\n", "print", "(", "\"==============\"", ")", "\n", "total_ratios", "=", "0", "\n", "for", "key", "in", "timings", ":", "\n", "                    ", "ratio", "=", "100", "*", "timings", "[", "key", "]", "/", "timings", "[", "\"minibatch\"", "]", "\n", "msg", "=", "\"{:.3f} ({:.2f}%) >>> {}\"", "\n", "print", "(", "msg", ".", "format", "(", "timings", "[", "key", "]", ",", "ratio", ",", "key", ")", ")", "\n", "total_ratios", "+=", "ratio", "\n", "", "msg", "=", "\"{:.3f}s >>> ratio total {}\"", "\n", "print", "(", "msg", ".", "format", "(", "timings", "[", "\"minibatch\"", "]", ",", "total_ratios", "-", "100", ")", ")", "\n", "print", "(", "\"==============\"", ")", "\n", "\n", "", "", "return", "(", "grad_feats1", ",", "grad_feats2", ",", "grad_xxyy", ",", "grad_batch_u", ",", "\n", "grad_stride", ",", "grad_pow", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.model.folded_correlation.rel_diff": [[324, 327], ["print", "torch.abs().sum", "torch.abs().sum", "torch.abs().mean", "torch.abs().mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "function", ["None"], ["", "", "def", "rel_diff", "(", "x1", ",", "x2", ",", "name", ")", ":", "\n", "    ", "out", "=", "torch", ".", "abs", "(", "x1", "-", "x2", ")", ".", "sum", "(", ")", "/", "torch", ".", "abs", "(", "x2", ")", ".", "mean", "(", ")", "\n", "print", "(", "\"rel diff for {}: {}\"", ".", "format", "(", "name", ",", "out", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.model.folded_correlation.dense_corr_check": [[329, 357], ["torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "utils.tps.spatial_grid_unnormalized().double", "torch.randn.cuda", "torch.randn.cuda", "tps.spatial_grid_unnormalized().double.cuda", "torch.randn.cuda", "torch.autograd.gradcheck", "print", "utils.tps.spatial_grid_unnormalized"], "function", ["home.repos.pwc.inspect_result.jamt9000_DVE.utils.tps.spatial_grid_unnormalized"], ["", "def", "dense_corr_check", "(", ")", ":", "\n", "# gradcheck takes a tuple of tensors as input, check if your gradient", "\n", "# evaluated with these tensors are close enough to numerical", "\n", "# approximations and returns True if they all verify this condition.", "\n", "    ", "dense_corr", "=", "DenseCorr", ".", "apply", "\n", "dve_dim", "=", "4", "\n", "stride", "=", "2", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "4", ",", "dve_dim", ",", "4", ",", "4", "\n", "\n", "common", "=", "{", "\"dtype\"", ":", "torch", ".", "double", ",", "\"requires_grad\"", ":", "True", "}", "\n", "feats1", "=", "torch", ".", "randn", "(", "B", ",", "C", ",", "H", ",", "W", ",", "**", "common", ")", "\n", "feats2", "=", "torch", ".", "randn", "(", "B", ",", "C", ",", "H", ",", "W", ",", "**", "common", ")", "\n", "\n", "batch_grid_u", "=", "torch", ".", "randn", "(", "B", ",", "H", ",", "W", ",", "2", ",", "dtype", "=", "torch", ".", "double", ",", "\n", "requires_grad", "=", "False", ")", "\n", "\n", "H_input", "=", "H", "*", "stride", "\n", "W_input", "=", "W", "*", "stride", "\n", "xxyy", "=", "tps", ".", "spatial_grid_unnormalized", "(", "H_input", ",", "W_input", ")", ".", "double", "(", ")", "\n", "xxyy", ".", "requires_grad", "=", "False", "\n", "args", "=", "(", "feats1", ",", "feats2", ",", "xxyy", ",", "batch_grid_u", ",", "stride", ")", "\n", "\n", "feats1", ".", "cuda", "(", ")", "\n", "feats2", ".", "cuda", "(", ")", "\n", "xxyy", ".", "cuda", "(", ")", "\n", "batch_grid_u", ".", "cuda", "(", ")", "\n", "test", "=", "gradcheck", "(", "dense_corr", ",", "args", ",", "eps", "=", "1e-6", ",", "atol", "=", "1e-4", ")", "\n", "print", "(", "\"passed test: {}\"", ".", "format", "(", "test", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.model.metric.runningIOU.__init__": [[17, 20], ["numpy.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_classes", ")", ":", "\n", "        ", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "confusion_matrix", "=", "np", ".", "zeros", "(", "(", "n_classes", ",", "n_classes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.model.metric.runningIOU._fast_hist": [[21, 26], ["numpy.bincount", "numpy.bincount.reshape", "label_true[].astype"], "methods", ["None"], ["", "def", "_fast_hist", "(", "self", ",", "label_true", ",", "label_pred", ",", "n_class", ")", ":", "\n", "        ", "mask", "=", "(", "label_true", ">=", "0", ")", "&", "(", "label_true", "<", "n_class", ")", "\n", "x", "=", "n_class", "*", "label_true", "[", "mask", "]", ".", "astype", "(", "int", ")", "+", "label_pred", "[", "mask", "]", "\n", "hist", "=", "np", ".", "bincount", "(", "x", ",", "minlength", "=", "n_class", "**", "2", ")", "\n", "return", "hist", ".", "reshape", "(", "n_class", ",", "n_class", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.model.metric.runningIOU.update": [[27, 38], ["meta[].cpu", "torch.interpolate.size", "target.numpy.numpy.size", "[].cpu().numpy", "target.numpy.numpy.numpy", "zip", "torch.interpolate", "metric.runningIOU._fast_hist", "[].cpu", "lt.flatten", "lp.flatten", "torch.interpolate.data.max"], "methods", ["home.repos.pwc.inspect_result.jamt9000_DVE.model.metric.runningIOU._fast_hist"], ["", "def", "update", "(", "self", ",", "x", ",", "meta", ")", ":", "\n", "        ", "target", "=", "meta", "[", "\"lbls\"", "]", ".", "cpu", "(", ")", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "nt", ",", "ht", ",", "wt", "=", "target", ".", "size", "(", ")", "\n", "if", "h", "!=", "ht", "and", "w", "!=", "wt", ":", "# upsample labels", "\n", "            ", "x", "=", "F", ".", "interpolate", "(", "x", ",", "size", "=", "(", "ht", ",", "wt", ")", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", ")", "\n", "", "preds", "=", "x", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "target", "=", "target", ".", "numpy", "(", ")", "\n", "for", "lt", ",", "lp", "in", "zip", "(", "target", ",", "preds", ")", ":", "\n", "            ", "self", ".", "confusion_matrix", "+=", "self", ".", "_fast_hist", "(", "lt", ".", "flatten", "(", ")", ",", "lp", ".", "flatten", "(", ")", ",", "\n", "self", ".", "n_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.model.metric.runningIOU.get_scores": [[39, 57], ["numpy.nanmean", "numpy.nanmean", "dict", "numpy.diag().sum", "hist.sum", "numpy.diag", "hist.sum", "numpy.diag", "hist.sum", "hist.sum", "zip", "numpy.diag", "range", "numpy.diag", "hist.sum", "hist.sum"], "methods", ["None"], ["", "", "def", "get_scores", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns accuracy score evaluation result.\n            - overall accuracy\n            - mean accuracy\n            - mean IU\n            - fwavacc\n        \"\"\"", "\n", "hist", "=", "self", ".", "confusion_matrix", "\n", "acc", "=", "np", ".", "diag", "(", "hist", ")", ".", "sum", "(", ")", "/", "hist", ".", "sum", "(", ")", "\n", "acc_cls", "=", "np", ".", "diag", "(", "hist", ")", "/", "hist", ".", "sum", "(", "axis", "=", "1", ")", "\n", "acc_cls", "=", "np", ".", "nanmean", "(", "acc_cls", ")", "\n", "iu", "=", "np", ".", "diag", "(", "hist", ")", "/", "(", "hist", ".", "sum", "(", "axis", "=", "1", ")", "+", "hist", ".", "sum", "(", "axis", "=", "0", ")", "-", "np", ".", "diag", "(", "hist", ")", ")", "\n", "mean_iu", "=", "np", ".", "nanmean", "(", "iu", ")", "\n", "freq", "=", "hist", ".", "sum", "(", "axis", "=", "1", ")", "/", "hist", ".", "sum", "(", ")", "\n", "fwavacc", "=", "(", "freq", "[", "freq", ">", "0", "]", "*", "iu", "[", "freq", ">", "0", "]", ")", ".", "sum", "(", ")", "\n", "cls_iu", "=", "dict", "(", "zip", "(", "range", "(", "self", ".", "n_classes", ")", ",", "iu", ")", ")", "\n", "scores", "=", "{", "\"acc\"", ":", "acc", ",", "\"clsacc\"", ":", "acc_cls", ",", "\"fwacc\"", ":", "fwavacc", ",", "\"miou\"", ":", "mean_iu", "}", "\n", "return", "scores", ",", "cls_iu", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.model.metric.runningIOU.reset": [[58, 60], ["numpy.zeros"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "confusion_matrix", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_classes", ",", "self", ".", "n_classes", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jamt9000_DVE.model.metric.inter_ocular_error": [[5, 13], ["output[].detach().cpu", "ioderr.mean", "output[].detach"], "function", ["None"], ["def", "inter_ocular_error", "(", "output", ",", "meta", ",", "dataset", ",", "config", ")", ":", "\n", "    ", "eyeidxs", "=", "dataset", ".", "eye_kp_idxs", "\n", "pred", "=", "output", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "gt", "=", "meta", "[", "'keypts_normalized'", "]", "\n", "iod", "=", "(", "(", "gt", "[", ":", ",", "eyeidxs", "[", "0", "]", ",", ":", "]", "-", "gt", "[", ":", ",", "eyeidxs", "[", "1", "]", ",", ":", "]", ")", "**", "2.", ")", ".", "sum", "(", "1", ")", ".", "sqrt", "(", ")", "[", ":", ",", "None", "]", "\n", "err", "=", "(", "(", "pred", "-", "gt", ")", "**", "2.", ")", ".", "sum", "(", "2", ")", ".", "sqrt", "(", ")", "\n", "ioderr", "=", "err", "/", "iod", "\n", "return", "100", "*", "ioderr", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.model.folded_correlation_dve.DenseCorrDve.forward": [[48, 110], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "ctx.save_for_backward", "range", "feats1[].reshape", "feats2[].reshape", "feats1[].reshape", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "corr.reshape.reshape.reshape", "torch.softmax().reshape", "torch.softmax().reshape", "smcorr_fa.sum().reshape", "torch.matmul().reshape", "torch.matmul().reshape", "torch.matmul().reshape", "torch.matmul().reshape", "torch.softmax().reshape", "torch.softmax().reshape", "L.float().sum", "feats1[].reshape.t", "feats1[].reshape.reshape", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "diff.pow.pow.pow", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.softmax", "torch.softmax", "smcorr_fa.sum", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.softmax", "torch.softmax", "L.float", "corr.reshape.reshape.reshape", "smcorr_fa.sum().reshape.t", "torch.matmul().reshape.reshape", "torch.matmul().reshape.reshape"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "feats1", ",", "feats2", ",", "xxyy", ",", "batch_grid_u", ",", "stride", ",", "norm", ",", "pow", "=", "0.5", ")", ":", "\n", "        ", "\"\"\"Compute the folded dense correlation loss forward pass.\n\n        Args:\n            feats1 (torch.Tensor): N x C x h x h tensor of features\n            feats2 (torch.Tensor): N x C x h x w tensor of features\n            xxyy (torch.Tensor): H x W x 2 grid of uniform sampling locations.\n            batch_grid_u (torch.Tensor): N x h x w x 2 grid of sampling\n                locations.\n            stride (int): the stride to be applied to the image grid to match\n                the spatial dimensions of the features (so that\n                `H = h * stride`).\n            norm (bool): whether to remove normalisation.\n            pow (float :: 0.5): power by which to raise the root distances\n                between pixel locations.\n\n        Returns:\n            (torch.Tensor): The total loss for the given minibatch of inputs.\n        \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "B", ",", "C", ",", "H", ",", "W", "=", "feats1", ".", "shape", "\n", "h", ",", "w", "=", "H", ",", "W", "\n", "params", "=", "torch", ".", "IntTensor", "(", "[", "B", ",", "C", ",", "H", ",", "W", ",", "stride", ",", "norm", "]", ")", "\n", "pow_tensor", "=", "torch", ".", "FloatTensor", "(", "[", "pow", "]", ")", "\n", "ctx", ".", "save_for_backward", "(", "feats1", ",", "feats2", ",", "xxyy", ",", "batch_grid_u", ",", "\n", "params", ",", "pow_tensor", ")", "\n", "\n", "loss", "=", "0.", "\n", "for", "b", "in", "range", "(", "B", ")", ":", "\n", "                ", "f1", "=", "feats1", "[", "b", "]", ".", "reshape", "(", "C", ",", "H", "*", "W", ")", "# source", "\n", "f2", "=", "feats2", "[", "b", "]", ".", "reshape", "(", "C", ",", "h", "*", "w", ")", "# target", "\n", "fa", "=", "feats1", "[", "(", "b", "+", "1", ")", "%", "B", "]", ".", "reshape", "(", "C", ",", "h", "*", "w", ")", "# auxiliary", "\n", "\n", "if", "norm", ":", "\n", "                    ", "f1", "=", "F", ".", "normalize", "(", "f1", ",", "p", "=", "2", ",", "dim", "=", "0", ")", "*", "JDT_FACTOR", "\n", "f2", "=", "F", ".", "normalize", "(", "f2", ",", "p", "=", "2", ",", "dim", "=", "0", ")", "*", "JDT_FACTOR", "\n", "fa", "=", "F", ".", "normalize", "(", "fa", ",", "p", "=", "2", ",", "dim", "=", "0", ")", "*", "JDT_FACTOR", "\n", "\n", "", "corr", "=", "torch", ".", "matmul", "(", "f1", ".", "t", "(", ")", ",", "fa", ")", "\n", "corr", "=", "corr", ".", "reshape", "(", "H", ",", "W", ",", "h", ",", "w", ")", "\n", "smcorr", "=", "F", ".", "softmax", "(", "corr", ".", "reshape", "(", "H", ",", "W", ",", "-", "1", ")", ",", "dim", "=", "2", ")", ".", "reshape", "(", "corr", ".", "shape", ")", "\n", "smcorr_fa", "=", "smcorr", "[", "None", ",", "...", "]", "*", "fa", ".", "reshape", "(", "-", "1", ",", "1", ",", "1", ",", "h", ",", "w", ")", "\n", "del", "smcorr", "\n", "\n", "f1_via_fa", "=", "smcorr_fa", ".", "sum", "(", "(", "3", ",", "4", ")", ")", ".", "reshape", "(", "C", ",", "H", "*", "w", ")", "\n", "del", "smcorr_fa", "\n", "\n", "corr2", "=", "torch", ".", "matmul", "(", "f1_via_fa", ".", "t", "(", ")", ",", "f2", ")", ".", "reshape", "(", "corr", ".", "shape", ")", "\n", "smcorr2", "=", "F", ".", "softmax", "(", "corr2", ".", "reshape", "(", "H", ",", "W", ",", "-", "1", ")", ",", "dim", "=", "2", ")", ".", "reshape", "(", "corr", ".", "shape", ")", "\n", "del", "corr2", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "diff", "=", "batch_grid_u", "[", "b", ",", ":", ",", ":", ",", "None", ",", "None", ",", ":", "]", "-", "xxyy", "[", "None", ",", "None", ",", ":", ":", "stride", ",", ":", ":", "stride", ",", ":", "]", "\n", "diff", "=", "(", "diff", "*", "diff", ")", ".", "sum", "(", "4", ")", ".", "sqrt", "(", ")", "\n", "diff", "=", "diff", ".", "pow", "(", "pow", ")", "\n", "\n", "", "L", "=", "diff", "*", "smcorr2", "\n", "\n", "loss", "+=", "L", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "", "", "return", "loss", "/", "(", "H", "*", "W", "*", "B", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.model.folded_correlation_dve.DenseCorrDve.backward": [[111, 716], ["pow.item.item.item", "time.time", "time.time", "collections.defaultdict", "x.item", "time.time", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "time.time", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "grad_smcorr2.view.view.view", "feats1[].view", "feats2[].view", "feats1[].reshape", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "corr.reshape.reshape.reshape", "torch.softmax", "torch.softmax", "torch.softmax().reshape.view", "smcorr_fa.sum().reshape.view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.softmax", "torch.softmax", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "grad_corr2.view.view.view", "torch.matmul().t", "torch.matmul().t", "torch.matmul().t", "torch.matmul().t", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.cuda.FloatTensor().fill_.view", "torch.cuda.FloatTensor().fill_.view", "torch.softmax().reshape.view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "grad_corr.view.view.view", "torch.matmul().t", "torch.matmul().t", "torch.matmul().t", "torch.matmul().t", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "grad_f1.reshape", "grad_fa.reshape", "grad_f2.reshape", "time.time", "locals().items", "sorted", "print", "print", "print", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "time.time", "time.time", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "diff.pow.pow.pow", "time.time", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "time.time", "feats1[].view.clone", "feats2[].view.clone", "feats1[].reshape.clone", "time.time", "feats1[].view.clone.t", "time.time", "corr.reshape.reshape.view", "smcorr_fa.sum", "torch.matmul().reshape.view", "torch.matmul().reshape.view", "time.time", "time.time", "grad_f1_via_fa.view.view.view", "grad_f1_via_fa.view.view.repeat", "torch.cuda.FloatTensor().fill_.reshape", "torch.cuda.FloatTensor().fill_.reshape", "grad_f1_via_fa.view.view.view", "range", "torch.cuda.FloatTensor().fill_.reshape", "torch.cuda.FloatTensor().fill_.reshape", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "print", "locals().items", "sorted", "ipdb.set_trace", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "range", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "folded_correlation_dve.rel_diff", "folded_correlation_dve.rel_diff", "hasattr", "shape_mems.items", "print", "time.time", "time.time", "print", "msg.format", "torch.cuda.HalfTensor().fill_", "torch.cuda.HalfTensor().fill_", "torch.cuda.HalfTensor().fill_", "torch.cuda.HalfTensor().fill_", "torch.cuda.HalfTensor().fill_", "torch.cuda.HalfTensor().fill_", "torch.cuda.HalfTensor().fill_", "torch.cuda.HalfTensor().fill_", "time.time", "torch.autograd.enable_grad", "torch.autograd.enable_grad", "torch.autograd.enable_grad", "torch.autograd.enable_grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "folded_correlation_dve.rel_diff", "torch.any", "torch.any", "torch.any", "torch.any", "time.time", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "time.time", "time.time", "feats1[].reshape.clone.view", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "time.time", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.matmul().reshape.clone().requires_grad_", "torch.matmul().reshape.clone().requires_grad_", "corr2_num.reshape.reshape.reshape", "torch.softmax", "torch.softmax", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "folded_correlation_dve.rel_diff", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "time.time", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "smcorr_fa.sum().reshape.clone().requires_grad_", "feats2[].view.clone.clone().requires_grad_", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "folded_correlation_dve.rel_diff", "folded_correlation_dve.rel_diff", "grad_f1_via_fa.view.view.repeat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "locals().items", "sorted", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "corr.reshape.reshape.clone().requires_grad_", "torch.softmax", "torch.softmax", "F.softmax().reshape.clone().requires_grad_.reshape", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "folded_correlation_dve.rel_diff", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "feats1[].view.clone.clone().requires_grad_", "feats1[].reshape.clone.clone().requires_grad_", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "folded_correlation_dve.rel_diff", "folded_correlation_dve.rel_diff", "ipdb.set_trace", "hasattr", "shape_mems.items", "print", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "feats1[].clone().detach().requires_grad_().reshape", "feats2[].clone().detach().requires_grad_().reshape", "feats1[].clone().detach().requires_grad_().reshape", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "corr_num.reshape.reshape.reshape", "torch.softmax", "torch.softmax", "F.softmax().reshape.clone().requires_grad_.reshape", "smcorr_fa.clone().requires_grad_.sum().reshape", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "corr2_num.reshape.reshape.reshape", "torch.softmax", "torch.softmax", "smcorr2_num.reshape.reshape.reshape", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "folded_correlation_dve.rel_diff", "folded_correlation_dve.rel_diff", "folded_correlation_dve.rel_diff", "time.time", "feats1[].reshape", "feats2[].reshape", "feats1[].reshape", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "corr.reshape.reshape.reshape", "torch.softmax().reshape", "torch.softmax().reshape", "smcorr_fa.sum().reshape", "torch.matmul().reshape", "torch.matmul().reshape", "torch.matmul().reshape", "torch.matmul().reshape", "torch.softmax().reshape", "torch.softmax().reshape", "L.float().sum", "locals", "folded_correlation_dve.estimate_mem", "msg.format", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "ipdb.set_trace", "smcorr_fa.sum().reshape.t", "feats2[].view.clone.t", "smcorr_fa.clone().requires_grad_.sum.t", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "smcorr_fa.clone().requires_grad_", "smcorr_fa.clone().requires_grad_.sum", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "folded_correlation_dve.rel_diff", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.softmax().reshape.clone().requires_grad_", "feats1[].reshape.clone.clone().requires_grad_", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "folded_correlation_dve.rel_diff", "folded_correlation_dve.rel_diff", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "smcorr_fa.clone().requires_grad_", "smcorr_fa.clone().requires_grad_.sum", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "folded_correlation_dve.rel_diff", "torch.cuda.DoubleTensor().fill_", "torch.cuda.DoubleTensor().fill_", "torch.cuda.DoubleTensor().fill_", "torch.cuda.DoubleTensor().fill_", "torch.cuda.DoubleTensor().fill_", "torch.cuda.DoubleTensor().fill_", "torch.cuda.DoubleTensor().fill_", "torch.cuda.DoubleTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "fa_norm[].view", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.softmax().reshape.clone().requires_grad_", "feats1[].reshape.clone.clone().requires_grad_", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "folded_correlation_dve.rel_diff", "folded_correlation_dve.rel_diff", "hasattr", "shape_mems.items", "print", "corr_num.reshape.reshape.view", "grad_corr_num[].view", "feats1[].reshape.clone.t", "f1_.clone.clone().requires_grad_.t", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "feats1[].view.clone().requires_grad_", "feats2[].view.clone().requires_grad_", "feats1[].reshape.clone().requires_grad_", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "folded_correlation_dve.rel_diff", "folded_correlation_dve.rel_diff", "folded_correlation_dve.rel_diff", "locals", "folded_correlation_dve.estimate_mem", "f1_.clone.clone().requires_grad_.t", "corr_num.reshape.reshape.reshape", "fa_.clone.clone().requires_grad_.reshape", "smcorr_fa.clone().requires_grad_.sum.t", "corr2_num.reshape.reshape.reshape", "feats1[].reshape.t", "feats1[].reshape.reshape", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "diff.pow.pow.pow", "torch.cuda.HalfTensor", "torch.cuda.HalfTensor", "torch.cuda.HalfTensor", "torch.cuda.HalfTensor", "torch.cuda.HalfTensor", "torch.cuda.HalfTensor", "torch.cuda.HalfTensor", "torch.cuda.HalfTensor", "feats1[].reshape.clone.view", "torch.matmul().reshape.clone", "torch.matmul().reshape.clone", "smcorr_fa.sum().reshape.clone", "feats2[].view.clone.clone", "feats1[].reshape.clone.view", "fa_.clone.clone().requires_grad_.view", "fa_.clone.clone().requires_grad_.view", "locals", "folded_correlation_dve.estimate_mem", "corr.reshape.reshape.clone", "torch.cuda.FloatTensor().fill_.view", "torch.cuda.FloatTensor().fill_.view", "feats1[].view.clone.clone", "feats1[].reshape.clone.clone", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "feats1[].clone().detach().requires_grad_", "feats2[].clone().detach().requires_grad_", "feats1[].clone().detach().requires_grad_", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "smcorr_fa.clone().requires_grad_.sum", "grad_smcorr2.view.view.view", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.softmax", "torch.softmax", "smcorr_fa.sum", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.softmax", "torch.softmax", "L.float", "smcorr_fa.clone", "grad_f1_via_fa.view.view.view", "torch.softmax().reshape.clone", "feats1[].reshape.clone.clone", "smcorr_fa.clone", "grad_f1_via_fa.view.view.view", "torch.cuda.DoubleTensor", "torch.cuda.DoubleTensor", "torch.cuda.DoubleTensor", "torch.cuda.DoubleTensor", "torch.cuda.DoubleTensor", "torch.cuda.DoubleTensor", "torch.cuda.DoubleTensor", "torch.cuda.DoubleTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.softmax().reshape.clone", "feats1[].reshape.clone.clone", "feats1[].view.clone", "feats2[].view.clone", "feats1[].reshape.clone", "corr.reshape.reshape.reshape", "smcorr_fa.sum().reshape.t", "torch.matmul().reshape.reshape", "torch.matmul().reshape.reshape", "feats1[].clone().detach", "feats2[].clone().detach", "feats1[].clone().detach", "feats1[].clone", "feats2[].clone", "feats1[].clone"], "methods", ["home.repos.pwc.inspect_result.jamt9000_DVE.model.folded_correlation_dve.rel_diff", "home.repos.pwc.inspect_result.jamt9000_DVE.model.folded_correlation_dve.rel_diff", "home.repos.pwc.inspect_result.jamt9000_DVE.model.folded_correlation_dve.rel_diff", "home.repos.pwc.inspect_result.jamt9000_DVE.model.folded_correlation_dve.rel_diff", "home.repos.pwc.inspect_result.jamt9000_DVE.model.folded_correlation_dve.rel_diff", "home.repos.pwc.inspect_result.jamt9000_DVE.model.folded_correlation_dve.rel_diff", "home.repos.pwc.inspect_result.jamt9000_DVE.model.folded_correlation_dve.rel_diff", "home.repos.pwc.inspect_result.jamt9000_DVE.model.folded_correlation_dve.rel_diff", "home.repos.pwc.inspect_result.jamt9000_DVE.model.folded_correlation_dve.rel_diff", "home.repos.pwc.inspect_result.jamt9000_DVE.model.folded_correlation_dve.rel_diff", "home.repos.pwc.inspect_result.jamt9000_DVE.model.folded_correlation_dve.rel_diff", "home.repos.pwc.inspect_result.jamt9000_DVE.model.folded_correlation_dve.rel_diff", "home.repos.pwc.inspect_result.jamt9000_DVE.model.folded_correlation_dve.estimate_mem", "home.repos.pwc.inspect_result.jamt9000_DVE.model.folded_correlation_dve.rel_diff", "home.repos.pwc.inspect_result.jamt9000_DVE.model.folded_correlation_dve.rel_diff", "home.repos.pwc.inspect_result.jamt9000_DVE.model.folded_correlation_dve.rel_diff", "home.repos.pwc.inspect_result.jamt9000_DVE.model.folded_correlation_dve.rel_diff", "home.repos.pwc.inspect_result.jamt9000_DVE.model.folded_correlation_dve.rel_diff", "home.repos.pwc.inspect_result.jamt9000_DVE.model.folded_correlation_dve.rel_diff", "home.repos.pwc.inspect_result.jamt9000_DVE.model.folded_correlation_dve.rel_diff", "home.repos.pwc.inspect_result.jamt9000_DVE.model.folded_correlation_dve.rel_diff", "home.repos.pwc.inspect_result.jamt9000_DVE.model.folded_correlation_dve.rel_diff", "home.repos.pwc.inspect_result.jamt9000_DVE.model.folded_correlation_dve.estimate_mem", "home.repos.pwc.inspect_result.jamt9000_DVE.model.folded_correlation_dve.estimate_mem"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "\"\"\"Compute the folded dense correlation loss (with EVC) backward pass.\n\n        Args:\n            (torch.Tensor): The gradient of the total loss with respect to the\n                output of the dense correlation loss.\n\n        Returns:\n            (torch.Tensor): N x C x h x h tensor of gradients\n            (torch.Tensor): N x C x h x w tensor of gradients\n            (None): H x W x 2 grid of uniform sampling locations\n            (None): no gradient for `xxyy`\n            (None): no gradient for `batch_grid_u`\n            (None): no gradient for `stride`\n            (None): no gradient for `pow`\n        \"\"\"", "\n", "if", "PROFILE", ":", "\n", "            ", "batch_tic", "=", "time", ".", "time", "(", ")", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "timings", "=", "defaultdict", "(", "float", ")", "\n", "\n", "", "feats1", ",", "feats2", ",", "xxyy", ",", "batch_grid_u", ",", "params", ",", "pow", "=", "ctx", ".", "saved_tensors", "\n", "\n", "\"\"\"We needed to store the integers as part of a tensor, so the\n        unpacking code here is a little convoluted.\"\"\"", "\n", "B", ",", "C", ",", "H", ",", "W", ",", "stride", ",", "norm", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "params", "]", "\n", "h", ",", "w", "=", "H", ",", "W", "\n", "pow", "=", "pow", ".", "item", "(", ")", "\n", "\n", "\"\"\"This is a pattern that is very convenient - at the top of backward\n        unpack saved_tensors and initialize all gradients w.r.t. inputs to\n        None. Thanks to the fact that additional trailing Nones are\n        ignored, the return statement is simple even when the function has\n        optional inputs.\"\"\"", "\n", "grad_feats1", "=", "grad_feats2", "=", "grad_xxyy", "=", "grad_batch_u", "=", "None", "\n", "grad_stride", "=", "grad_norm", "=", "grad_pow", "=", "None", "\n", "\n", "\"\"\"Returning gradients for inputs that don't require it is\n        not an error.\"\"\"", "\n", "assert", "ctx", ".", "needs_input_grad", "[", "0", "]", ",", "\"expected feats1 to need grad\"", "\n", "assert", "ctx", ".", "needs_input_grad", "[", "1", "]", ",", "\"expected feats2 to need grad\"", "\n", "assert", "not", "ctx", ".", "needs_input_grad", "[", "2", "]", ",", "\"expected xxyy does not need grad\"", "\n", "assert", "not", "ctx", ".", "needs_input_grad", "[", "3", "]", ",", "\"expected batch_grid_u does not need grad\"", "\n", "assert", "not", "ctx", ".", "needs_input_grad", "[", "4", "]", ",", "\"expected stride does not need grad\"", "\n", "\n", "if", "PROFILE", ":", "\n", "            ", "timings", "[", "\"back-init\"", "]", "=", "time", ".", "time", "(", ")", "-", "tic", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "            ", "if", "feats1", ".", "is_cuda", ":", "\n", "#\u00a0TODO: clean up types here", "\n", "                ", "if", "feats1", ".", "dtype", "==", "torch", ".", "float32", ":", "\n", "                    ", "grad_feats1", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "B", ",", "C", ",", "H", ",", "W", ")", ".", "fill_", "(", "0", ")", "\n", "grad_feats2", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "B", ",", "C", ",", "h", ",", "w", ")", ".", "fill_", "(", "0", ")", "\n", "", "elif", "feats1", ".", "dtype", "==", "torch", ".", "float16", ":", "\n", "                    ", "grad_feats1", "=", "torch", ".", "cuda", ".", "HalfTensor", "(", "B", ",", "C", ",", "H", ",", "W", ")", ".", "fill_", "(", "0", ")", "\n", "grad_feats2", "=", "torch", ".", "cuda", ".", "HalfTensor", "(", "B", ",", "C", ",", "h", ",", "w", ")", ".", "fill_", "(", "0", ")", "\n", "", "", "else", ":", "\n", "                ", "grad_feats1", "=", "torch", ".", "zeros", "(", "(", "B", ",", "C", ",", "H", ",", "W", ")", ",", "dtype", "=", "feats1", ".", "dtype", ")", "\n", "grad_feats2", "=", "torch", ".", "zeros", "(", "(", "B", ",", "C", ",", "h", ",", "w", ")", ",", "dtype", "=", "feats2", ".", "dtype", ")", "\n", "\n", "", "grad_loss", "=", "grad_output", "/", "(", "H", "*", "W", "*", "B", ")", "\n", "\n", "if", "PROFILE", ":", "\n", "                ", "timings", "[", "\"data transfer\"", "]", "=", "time", ".", "time", "(", ")", "-", "batch_tic", "\n", "\n", "", "for", "b", "in", "range", "(", "B", ")", ":", "\n", "\n", "                ", "if", "PROFILE", ":", "\n", "                    ", "tic", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "diff", "=", "batch_grid_u", "[", "b", ",", ":", ",", ":", ",", "None", ",", "None", ",", ":", "]", "-", "xxyy", "[", "None", ",", "None", ",", ":", ":", "stride", ",", ":", ":", "stride", ",", ":", "]", "\n", "diff", "=", "(", "diff", "*", "diff", ")", ".", "sum", "(", "4", ")", ".", "sqrt", "(", ")", "\n", "diff", "=", "diff", ".", "pow", "(", "pow", ")", "\n", "\n", "", "if", "PROFILE", ":", "\n", "                    ", "timings", "[", "\"diff-grid\"", "]", "+=", "time", ".", "time", "(", ")", "-", "tic", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "\n", "# loss gradient for the current minibatch element (expand to tensor)", "\n", "", "grad_loss_b", "=", "grad_loss", "\n", "grad_smcorr2", "=", "grad_loss_b", "*", "diff", "\n", "\n", "if", "LOCAL_CHECKS", ":", "\n", "                    ", "ones", "=", "torch", ".", "ones", "(", "diff", ".", "shape", ",", "dtype", "=", "diff", ".", "dtype", ")", "\n", "grad_loss_b_", "=", "ones", "*", "grad_loss", "\n", "smcorr_", "=", "torch", ".", "randn", "(", "\n", "diff", ".", "shape", ",", "\n", "dtype", "=", "torch", ".", "double", ",", "\n", "requires_grad", "=", "True", ")", "\n", "with", "torch", ".", "autograd", ".", "enable_grad", "(", ")", ":", "\n", "                        ", "L_", "=", "diff", "*", "smcorr_", "\n", "d_smcorr", "=", "torch", ".", "autograd", ".", "grad", "(", "\n", "outputs", "=", "L_", ",", "\n", "inputs", "=", "smcorr_", ",", "\n", "grad_outputs", "=", "grad_loss_b_", ",", "\n", ")", "\n", "rel_diff", "(", "grad_smcorr2", ",", "d_smcorr", "[", "0", "]", ",", "\"smax\"", ")", "\n", "if", "torch", ".", "any", "(", "torch", ".", "isnan", "(", "grad_smcorr2", "[", "0", "]", ")", ")", ":", "\n", "                            ", "import", "ipdb", ";", "ipdb", ".", "set_trace", "(", ")", "\n", "\n", "\n", "", "", "", "if", "PROFILE", ":", "\n", "                    ", "timings", "[", "\"scale-feats\"", "]", "+=", "time", ".", "time", "(", ")", "-", "tic", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Re-compute intermediate values", "\n", "", "grad_smcorr2", "=", "grad_smcorr2", ".", "view", "(", "H", ",", "W", ",", "-", "1", ")", "\n", "f1_", "=", "feats1", "[", "b", "]", ".", "view", "(", "C", ",", "H", "*", "W", ")", "\n", "f2_", "=", "feats2", "[", "b", "]", ".", "view", "(", "C", ",", "h", "*", "w", ")", "\n", "fa_", "=", "feats1", "[", "(", "b", "+", "1", ")", "%", "B", "]", ".", "reshape", "(", "C", ",", "h", "*", "w", ")", "# auxiliary", "\n", "\n", "if", "norm", ":", "\n", "                    ", "f1_norm", "=", "F", ".", "normalize", "(", "f1_", ",", "p", "=", "2", ",", "dim", "=", "0", ")", "*", "JDT_FACTOR", "\n", "f2_norm", "=", "F", ".", "normalize", "(", "f2_", ",", "p", "=", "2", ",", "dim", "=", "0", ")", "*", "JDT_FACTOR", "\n", "fa_norm", "=", "F", ".", "normalize", "(", "fa_", ",", "p", "=", "2", ",", "dim", "=", "0", ")", "*", "JDT_FACTOR", "\n", "", "else", ":", "\n", "                    ", "f1_norm", "=", "f1_", ".", "clone", "(", ")", "\n", "f2_norm", "=", "f2_", ".", "clone", "(", ")", "\n", "fa_norm", "=", "fa_", ".", "clone", "(", ")", "\n", "\n", "", "if", "PROFILE", ":", "\n", "                    ", "timings", "[", "\"fwd-norm\"", "]", "+=", "time", ".", "time", "(", ")", "-", "tic", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "\n", "#\u00a0Match the source features against the auxiliaries", "\n", "", "corr", "=", "torch", ".", "matmul", "(", "f1_norm", ".", "t", "(", ")", ",", "fa_norm", ")", "\n", "corr", "=", "corr", ".", "reshape", "(", "H", ",", "W", ",", "h", ",", "w", ")", "\n", "\n", "if", "PROFILE", ":", "\n", "                    ", "timings", "[", "\"f1-aux-correlation\"", "]", "+=", "time", ".", "time", "(", ")", "-", "tic", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "smcorr", "=", "F", ".", "softmax", "(", "corr", ".", "view", "(", "H", ",", "W", ",", "-", "1", ")", ",", "dim", "=", "2", ")", "\n", "smcorr", "=", "smcorr", ".", "view", "(", "corr", ".", "shape", ")", "\n", "if", "LOCAL_CHECKS", ":", "\n", "# cache a copy of the mega tensor for numerical checks", "\n", "                    ", "smcorr_fa", "=", "smcorr", "[", "None", ",", "...", "]", "*", "fa_norm", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "h", ",", "w", ")", "\n", "f1_via_fa", "=", "smcorr_fa", ".", "sum", "(", "(", "3", ",", "4", ")", ")", "\n", "", "else", ":", "\n", "                    ", "\"\"\"This is one of the largest tensors.....\"\"\"", "\n", "f1_via_fa", "=", "(", "smcorr", "[", "None", ",", "...", "]", "*", "\n", "fa_norm", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "h", ",", "w", ")", ")", ".", "sum", "(", "(", "3", ",", "4", ")", ")", "\n", "\n", "", "f1_via_fa", "=", "f1_via_fa", ".", "view", "(", "C", ",", "H", "*", "W", ")", "\n", "\n", "#\u00a0Main correlation computation", "\n", "corr2", "=", "torch", ".", "matmul", "(", "f1_via_fa", ".", "t", "(", ")", ",", "f2_norm", ")", ".", "view", "(", "corr", ".", "shape", ")", "\n", "\n", "#\u00a0Direct backward pass for second softmax", "\n", "smcorr2", "=", "F", ".", "softmax", "(", "corr2", ".", "view", "(", "H", ",", "W", ",", "-", "1", ")", ",", "dim", "=", "2", ")", "\n", "sum_term", "=", "torch", ".", "sum", "(", "grad_smcorr2", "*", "smcorr2", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n", "grad_corr2", "=", "smcorr2", "*", "(", "grad_smcorr2", "-", "sum_term", ")", "\n", "\n", "if", "not", "LOCAL_CHECKS", ":", "\n", "                    ", "del", "smcorr2", "\n", "\n", "", "if", "PROFILE", ":", "\n", "                    ", "timings", "[", "\"softmax\"", "]", "+=", "time", ".", "time", "(", ")", "-", "tic", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "\n", "#\u00a0safety checks", "\n", "", "if", "LOCAL_CHECKS", ":", "\n", "                    ", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "                        ", "corr2_num", "=", "corr2", ".", "clone", "(", ")", ".", "requires_grad_", "(", ")", "\n", "corr2_num", "=", "corr2_num", ".", "reshape", "(", "H", ",", "W", ",", "-", "1", ")", "\n", "smcorr2_num", "=", "F", ".", "softmax", "(", "corr2_num", ",", "dim", "=", "2", ")", "\n", "grad_corr2_num", "=", "torch", ".", "autograd", ".", "grad", "(", "\n", "outputs", "=", "smcorr2_num", ",", "\n", "inputs", "=", "(", "corr2_num", ",", ")", ",", "\n", "grad_outputs", "=", "grad_smcorr2", ",", "\n", ")", "\n", "rel_diff", "(", "grad_corr2", ",", "grad_corr2_num", "[", "0", "]", ",", "\"smax-corr2\"", ")", "\n", "\n", "", "", "\"\"\"Derivatives through the main correlation correlation\"\"\"", "\n", "grad_corr2", "=", "grad_corr2", ".", "view", "(", "H", "*", "W", ",", "H", "*", "W", ")", "\n", "grad_f1_via_fa", "=", "torch", ".", "matmul", "(", "grad_corr2", ",", "f2_norm", ".", "t", "(", ")", ")", ".", "t", "(", ")", "\n", "grad_f2_norm", "=", "torch", ".", "matmul", "(", "f1_via_fa", ",", "grad_corr2", ")", "\n", "\n", "if", "not", "LOCAL_CHECKS", ":", "\n", "                    ", "del", "grad_corr2", "\n", "\n", "", "if", "PROFILE", ":", "\n", "                    ", "timings", "[", "\"corr-back\"", "]", "+=", "time", ".", "time", "(", ")", "-", "tic", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "if", "LOCAL_CHECKS", ":", "\n", "                    ", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "                        ", "f1_via_fa_num", "=", "f1_via_fa", ".", "clone", "(", ")", ".", "requires_grad_", "(", ")", "\n", "f2_norm_num", "=", "f2_norm", ".", "clone", "(", ")", ".", "requires_grad_", "(", ")", "\n", "corr2_num", "=", "torch", ".", "matmul", "(", "f1_via_fa_num", ".", "t", "(", ")", ",", "f2_norm_num", ")", "\n", "grad_f1_via_fa_num", ",", "grad_f2_norm_num", "=", "torch", ".", "autograd", ".", "grad", "(", "\n", "outputs", "=", "corr2_num", ",", "\n", "inputs", "=", "(", "f1_via_fa_num", ",", "f2_norm_num", ")", ",", "\n", "grad_outputs", "=", "grad_corr2", ",", "\n", ")", "\n", "rel_diff", "(", "grad_f1_via_fa", ",", "grad_f1_via_fa_num", ",", "\n", "\"corr-f1-via-fa\"", ")", "\n", "rel_diff", "(", "grad_f2_norm", ",", "grad_f2_norm_num", ",", "\n", "\"corr->f2-norm\"", ")", "\n", "\n", "", "", "if", "OLD_METHOD", ":", "\n", "# (may be able to collapse all this later)", "\n", "                    ", "grad_f1_via_fa", "=", "grad_f1_via_fa", ".", "view", "(", "-", "1", ",", "H", ",", "W", ",", "1", ",", "1", ")", "\n", "\n", "#\u00a0This tensor is crashing the GPU", "\n", "grad_smcorr_fa", "=", "grad_f1_via_fa", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "h", ",", "w", ")", "\n", "\n", "#\u00a0safety checks over the summation", "\n", "if", "LOCAL_CHECKS", ":", "\n", "                        ", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "\n", "                            ", "smcorr_fa_num", "=", "smcorr_fa", ".", "clone", "(", ")", ".", "requires_grad_", "(", ")", "\n", "f1_via_fa_num", "=", "smcorr_fa_num", ".", "sum", "(", "(", "3", ",", "4", ")", ")", "\n", "# f1_via_fa_num = f1_via_fa_num.view(C, H * W)", "\n", "\n", "grad_smcorr_fa_num", "=", "torch", ".", "autograd", ".", "grad", "(", "\n", "outputs", "=", "f1_via_fa_num", ",", "\n", "inputs", "=", "(", "smcorr_fa_num", ",", ")", ",", "\n", "grad_outputs", "=", "grad_f1_via_fa", ".", "view", "(", "-", "1", ",", "H", ",", "w", ")", ",", "\n", ")", "\n", "rel_diff", "(", "grad_smcorr_fa", ",", "grad_smcorr_fa_num", "[", "0", "]", ",", "\n", "\"summation of grad_smcorr-fa\"", ")", "\n", "\n", "# smcorr_fa = smcorr[None, ...] * fa_.view(-1, 1, 1, h, w)", "\n", "", "", "grad_smcorr", "=", "(", "grad_smcorr_fa", "*", "fa_norm", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "h", ",", "w", ")", ")", ".", "sum", "(", "0", ")", "\n", "grad_fa_", "=", "(", "grad_smcorr_fa", "*", "smcorr", "[", "None", ",", "...", "]", ")", ".", "sum", "(", "1", ")", ".", "sum", "(", "1", ")", "\n", "grad_fa_", "=", "grad_fa_", ".", "reshape", "(", "C", ",", "h", "*", "w", ")", "\n", "\n", "#\u00a0safety checks over the weighted sum", "\n", "if", "LOCAL_CHECKS", ":", "\n", "                        ", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "\n", "                            ", "smcorr_num", "=", "smcorr", ".", "clone", "(", ")", ".", "requires_grad_", "(", ")", "\n", "fa_norm_num", "=", "fa_norm", ".", "clone", "(", ")", ".", "requires_grad_", "(", ")", "\n", "smcorr_fa_num", "=", "smcorr_num", "[", "None", ",", "...", "]", "*", "fa_norm_num", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "h", ",", "w", ")", "\n", "\n", "(", "grad_smcorr_num", ",", "grad_fa_num", ")", "=", "torch", ".", "autograd", ".", "grad", "(", "\n", "outputs", "=", "smcorr_fa_num", ",", "\n", "inputs", "=", "(", "smcorr_num", ",", "fa_norm_num", ")", ",", "\n", "grad_outputs", "=", "grad_smcorr_fa", ",", "\n", ")", "\n", "rel_diff", "(", "grad_fa_", ",", "grad_fa_num", ",", "\n", "\"product of grad_fa_\"", ")", "\n", "rel_diff", "(", "grad_smcorr", ",", "grad_smcorr_num", ",", "\n", "\"product of grad_smcor\"", ")", "\n", "", "", "", "else", ":", "\n", "# -------------------------------------------------------", "\n", "# Collapsed summation method", "\n", "# -------------------------------------------------------", "\n", "# Fwd ops ->", "\n", "# smcorr_fa = smcorr[None, ...] * fa.reshape(-1, 1, 1, h, w)", "\n", "# f1_via_fa = smcorr_fa.sum((3, 4)).reshape(C, H * w)", "\n", "\n", "# Given gradient ->", "\n", "# (grad_f1_via_fa)", "\n", "\n", "# Desired gradients ->", "\n", "# (grad_fa_, grad_smcorr)", "\n", "\n", "                    ", "grad_f1_via_fa", "=", "grad_f1_via_fa", ".", "view", "(", "-", "1", ",", "H", ",", "W", ",", "1", ",", "1", ")", "\n", "\n", "#\u00a0safety checks over the summation", "\n", "if", "LOCAL_CHECKS", ":", "\n", "#\u00a0This tensor is crashing the GPU, so should only be", "\n", "# used for numerical checks", "\n", "                        ", "grad_smcorr_fa", "=", "grad_f1_via_fa", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "h", ",", "w", ")", "\n", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "\n", "                            ", "smcorr_fa_num", "=", "smcorr_fa", ".", "clone", "(", ")", ".", "requires_grad_", "(", ")", "\n", "f1_via_fa_num", "=", "smcorr_fa_num", ".", "sum", "(", "(", "3", ",", "4", ")", ")", "\n", "# f1_via_fa_num = f1_via_fa_num.view(C, H * W)", "\n", "\n", "grad_smcorr_fa_num", "=", "torch", ".", "autograd", ".", "grad", "(", "\n", "outputs", "=", "f1_via_fa_num", ",", "\n", "inputs", "=", "(", "smcorr_fa_num", ",", ")", ",", "\n", "grad_outputs", "=", "grad_f1_via_fa", ".", "view", "(", "-", "1", ",", "H", ",", "w", ")", ",", "\n", ")", "\n", "rel_diff", "(", "grad_smcorr_fa", ",", "grad_smcorr_fa_num", "[", "0", "]", ",", "\n", "\"summation of grad_smcorr-fa\"", ")", "\n", "\n", "#\u00a0Use for-loop over EVC dimension to avoid memory issues", "\n", "", "", "if", "feats1", ".", "is_cuda", ":", "\n", "                        ", "if", "grad_f1_via_fa", ".", "dtype", "==", "torch", ".", "float64", ":", "\n", "                            ", "grad_smcorr", "=", "torch", ".", "cuda", ".", "DoubleTensor", "(", "H", ",", "W", ",", "h", ",", "w", ")", ".", "fill_", "(", "0", ")", "\n", "grad_fa_", "=", "torch", ".", "cuda", ".", "DoubleTensor", "(", "C", ",", "h", ",", "w", ")", ".", "fill_", "(", "0", ")", "\n", "", "else", ":", "\n", "                            ", "grad_smcorr", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "H", ",", "W", ",", "h", ",", "w", ")", ".", "fill_", "(", "0", ")", "\n", "grad_fa_", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "C", ",", "h", ",", "w", ")", ".", "fill_", "(", "0", ")", "\n", "", "", "else", ":", "\n", "                        ", "grad_smcorr", "=", "torch", ".", "zeros", "(", "(", "H", ",", "W", ",", "h", ",", "w", ")", ",", "dtype", "=", "feats1", ".", "dtype", ")", "\n", "grad_fa_", "=", "torch", ".", "zeros", "(", "(", "C", ",", "h", ",", "w", ")", ",", "dtype", "=", "feats1", ".", "dtype", ")", "\n", "\n", "", "for", "cc", "in", "range", "(", "C", ")", ":", "\n", "                        ", "grad_smcorr", "+=", "(", "grad_f1_via_fa", "[", "cc", "]", "*", "fa_norm", "[", "cc", "]", ".", "view", "(", "1", ",", "1", ",", "h", ",", "w", ")", ")", "\n", "grad_fa_", "[", "cc", "]", "=", "(", "grad_f1_via_fa", "[", "cc", "]", "*", "smcorr", ")", ".", "sum", "(", "(", "0", ",", "1", ")", ")", "\n", "", "grad_fa_", "=", "grad_fa_", ".", "reshape", "(", "C", ",", "h", "*", "w", ")", "\n", "\n", "#\u00a0safety checks over the weighted sum", "\n", "if", "LOCAL_CHECKS", ":", "\n", "                        ", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "\n", "                            ", "smcorr_num", "=", "smcorr", ".", "clone", "(", ")", ".", "requires_grad_", "(", ")", "\n", "fa_norm_num", "=", "fa_norm", ".", "clone", "(", ")", ".", "requires_grad_", "(", ")", "\n", "smcorr_fa_num", "=", "smcorr_num", "[", "None", ",", "...", "]", "*", "fa_norm_num", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "h", ",", "w", ")", "\n", "\n", "(", "grad_smcorr_num", ",", "grad_fa_num", ")", "=", "torch", ".", "autograd", ".", "grad", "(", "\n", "outputs", "=", "smcorr_fa_num", ",", "\n", "inputs", "=", "(", "smcorr_num", ",", "fa_norm_num", ")", ",", "\n", "grad_outputs", "=", "grad_smcorr_fa", ",", "\n", ")", "\n", "rel_diff", "(", "grad_fa_", ",", "grad_fa_num", ",", "\n", "\"product of grad_fa_\"", ")", "\n", "rel_diff", "(", "grad_smcorr", ",", "grad_smcorr_num", ",", "\n", "\"product of grad_smcor\"", ")", "\n", "\n", "", "", "if", "PRINT_MEM", ":", "\n", "                        ", "key", "=", "None", "\n", "val", "=", "None", "\n", "shape_mems", "=", "{", "}", "\n", "for", "key", ",", "val", "in", "locals", "(", ")", ".", "items", "(", ")", ":", "\n", "                            ", "if", "hasattr", "(", "val", ",", "\"shape\"", ")", ":", "\n", "                                ", "shape_mems", "[", "key", "]", "=", "estimate_mem", "(", "val", ")", "\n", "\n", "", "", "sorted_mems", "=", "sorted", "(", "shape_mems", ".", "items", "(", ")", ",", "key", "=", "lambda", "kv", ":", "-", "kv", "[", "1", "]", ")", "\n", "for", "key", ",", "val", "in", "sorted_mems", ":", "\n", "                            ", "print", "(", "\"{}: {:.4f} GiB\"", ".", "format", "(", "key", ",", "val", ")", ")", "\n", "\n", "#\u00a0Direct backward pass for first softmax", "\n", "# smcorr = F.softmax(corr.view(H, W, -1), dim=2)", "\n", "", "", "", "grad_smcorr", "=", "grad_smcorr", ".", "view", "(", "H", ",", "W", ",", "-", "1", ")", "\n", "smcorr", "=", "smcorr", ".", "view", "(", "H", ",", "W", ",", "-", "1", ")", "\n", "sum_term", "=", "torch", ".", "sum", "(", "grad_smcorr", "*", "smcorr", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n", "grad_corr", "=", "smcorr", "*", "(", "grad_smcorr", "-", "sum_term", ")", "\n", "\n", "if", "not", "LOCAL_CHECKS", ":", "\n", "                    ", "del", "grad_smcorr", "\n", "del", "grad_smcorr2", "\n", "del", "smcorr", "\n", "del", "corr", "\n", "\n", "", "if", "LOCAL_CHECKS", ":", "\n", "                    ", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "                        ", "corr_num", "=", "corr", ".", "clone", "(", ")", ".", "requires_grad_", "(", ")", "\n", "smcorr_num", "=", "F", ".", "softmax", "(", "corr_num", ".", "view", "(", "H", ",", "W", ",", "-", "1", ")", ",", "dim", "=", "2", ")", "\n", "smcorr_num", "=", "smcorr_num", ".", "reshape", "(", "corr_num", ".", "shape", ")", "\n", "grad_corr_num", "=", "torch", ".", "autograd", ".", "grad", "(", "\n", "outputs", "=", "smcorr_num", ",", "\n", "inputs", "=", "(", "corr_num", ",", ")", ",", "\n", "grad_outputs", "=", "grad_smcorr", ".", "view", "(", "H", ",", "W", ",", "h", ",", "w", ")", ",", "\n", ")", "\n", "rel_diff", "(", "grad_corr", ",", "grad_corr_num", "[", "0", "]", ".", "view", "(", "H", ",", "W", ",", "-", "1", ")", ",", "\n", "\"smax-corr\"", ")", "\n", "\n", "#\u00a0Back through the first correlation", "\n", "# [Fwd op] -> `corr = torch.matmul(f1_norm.t(), fa_norm)`", "\n", "", "", "grad_corr", "=", "grad_corr", ".", "view", "(", "H", "*", "W", ",", "h", "*", "w", ")", "\n", "grad_f1_norm", "=", "torch", ".", "matmul", "(", "grad_corr", ",", "fa_norm", ".", "t", "(", ")", ")", ".", "t", "(", ")", "\n", "grad_fa_norm", "=", "torch", ".", "matmul", "(", "f1_norm", ",", "grad_corr", ")", "\n", "\n", "if", "not", "LOCAL_CHECKS", ":", "\n", "                    ", "del", "grad_corr", "\n", "\n", "\n", "", "if", "LOCAL_CHECKS", ":", "\n", "                    ", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "                        ", "f1_norm_num", "=", "f1_norm", ".", "clone", "(", ")", ".", "requires_grad_", "(", ")", "\n", "fa_norm_num", "=", "fa_norm", ".", "clone", "(", ")", ".", "requires_grad_", "(", ")", "\n", "corr_num", "=", "torch", ".", "matmul", "(", "f1_norm_num", ".", "t", "(", ")", ",", "fa_norm_num", ")", "\n", "grad_f1_norm_num", ",", "grad_fa_norm_num", "=", "torch", ".", "autograd", ".", "grad", "(", "\n", "outputs", "=", "corr_num", ",", "\n", "inputs", "=", "(", "f1_norm_num", ",", "fa_norm_num", ")", ",", "\n", "grad_outputs", "=", "grad_corr", ",", "\n", ")", "\n", "rel_diff", "(", "grad_f1_norm", ",", "grad_f1_norm_num", ",", "\"corr->f1n-orm\"", ")", "\n", "rel_diff", "(", "grad_fa_norm", ",", "grad_fa_norm_num", ",", "\"corr->fa-norm\"", ")", "\n", "\n", "# Combine gradients for two ops using aux features", "\n", "", "", "grad_fa_norm", "=", "grad_fa_norm", "+", "grad_fa_", "\n", "\n", "#\u00a0Back through the norms", "\n", "# [Fwd op] -> `f1_norm = F.normalize(f1_, p=2, dim=0) * JDT_FACTOR`", "\n", "# [Fwd op] -> `f2_norm = F.normalize(f2_, p=2, dim=0) * JDT_FACTOR`", "\n", "# [Fwd op] -> `fa_norm = F.normalize(fa_, p=2, dim=0) * JDT_FACTOR`", "\n", "# xNorm = sqrt(sum(x.*x, 3) + opts.epsilon) ;", "\n", "\n", "if", "norm", ":", "\n", "                    ", "f1_norm_val", "=", "torch", ".", "norm", "(", "f1_", ",", "p", "=", "2", ",", "dim", "=", "0", ")", ".", "clamp", "(", "min", "=", "EPS", ")", "\n", "f2_norm_val", "=", "torch", ".", "norm", "(", "f2_", ",", "p", "=", "2", ",", "dim", "=", "0", ")", ".", "clamp", "(", "min", "=", "EPS", ")", "\n", "fa_norm_val", "=", "torch", ".", "norm", "(", "fa_", ",", "p", "=", "2", ",", "dim", "=", "0", ")", ".", "clamp", "(", "min", "=", "EPS", ")", "\n", "\n", "max_val_f1", "=", "torch", ".", "max", "(", "f1_norm_val", ")", "\n", "max_val_f2", "=", "torch", ".", "max", "(", "f2_norm_val", ")", "\n", "max_val_fa", "=", "torch", ".", "max", "(", "fa_norm_val", ")", "\n", "if", "max_val_f1", "+", "max_val_f2", "+", "max_val_fa", ">", "1E8", ":", "\n", "                        ", "import", "ipdb", ";", "ipdb", ".", "set_trace", "(", ")", "\n", "\n", "", "grad_f1_norm_", "=", "grad_f1_norm", "/", "f1_norm_val", "\n", "grad_f1", "=", "JDT_FACTOR", "*", "(", "grad_f1_norm_", "-", "\n", "(", "grad_f1_norm_", "*", "f1_", ")", ".", "sum", "(", "0", ")", "*", "(", "f1_", "/", "(", "f1_norm_val", "**", "2", ")", ")", ")", "\n", "\n", "grad_f2_norm_", "=", "grad_f2_norm", "/", "f2_norm_val", "\n", "grad_f2", "=", "JDT_FACTOR", "*", "(", "grad_f2_norm_", "-", "\n", "(", "grad_f2_norm_", "*", "f2_", ")", ".", "sum", "(", "0", ")", "*", "(", "f2_", "/", "(", "f2_norm_val", "**", "2", ")", ")", ")", "\n", "\n", "grad_fa_norm_", "=", "grad_fa_norm", "/", "fa_norm_val", "\n", "grad_fa", "=", "JDT_FACTOR", "*", "(", "grad_fa_norm_", "-", "\n", "(", "grad_fa_norm_", "*", "fa_", ")", ".", "sum", "(", "0", ")", "*", "(", "fa_", "/", "(", "fa_norm_val", "**", "2", ")", ")", ")", "\n", "\n", "if", "LOCAL_CHECKS", ":", "\n", "                        ", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "                            ", "f1_num", "=", "f1_", ".", "clone", "(", ")", ".", "requires_grad_", "(", ")", "\n", "f2_num", "=", "f2_", ".", "clone", "(", ")", ".", "requires_grad_", "(", ")", "\n", "fa_num", "=", "fa_", ".", "clone", "(", ")", ".", "requires_grad_", "(", ")", "\n", "\n", "f1_norm_num", "=", "F", ".", "normalize", "(", "f1_num", ",", "p", "=", "2", ",", "dim", "=", "0", ")", "*", "JDT_FACTOR", "\n", "f2_norm_num", "=", "F", ".", "normalize", "(", "f2_num", ",", "p", "=", "2", ",", "dim", "=", "0", ")", "*", "JDT_FACTOR", "\n", "fa_norm_num", "=", "F", ".", "normalize", "(", "fa_num", ",", "p", "=", "2", ",", "dim", "=", "0", ")", "*", "JDT_FACTOR", "\n", "\n", "grad_f1_num", "=", "torch", ".", "autograd", ".", "grad", "(", "\n", "outputs", "=", "f1_norm_num", ",", "\n", "inputs", "=", "(", "f1_num", ",", ")", ",", "\n", "grad_outputs", "=", "grad_f1_norm", ",", "\n", ")", "\n", "grad_f2_num", "=", "torch", ".", "autograd", ".", "grad", "(", "\n", "outputs", "=", "f2_norm_num", ",", "\n", "inputs", "=", "(", "f2_num", ",", ")", ",", "\n", "grad_outputs", "=", "grad_f2_norm", ",", "\n", ")", "\n", "grad_fa_num", "=", "torch", ".", "autograd", ".", "grad", "(", "\n", "outputs", "=", "fa_norm_num", ",", "\n", "inputs", "=", "(", "fa_num", ",", ")", ",", "\n", "grad_outputs", "=", "grad_fa_norm", ",", "\n", ")", "\n", "rel_diff", "(", "grad_f1", ",", "grad_f1_num", "[", "0", "]", ",", "\"norm-f1\"", ")", "\n", "rel_diff", "(", "grad_f2", ",", "grad_f2_num", "[", "0", "]", ",", "\"norm-f2\"", ")", "\n", "rel_diff", "(", "grad_fa", ",", "grad_fa_num", "[", "0", "]", ",", "\"norm-fa\"", ")", "\n", "", "", "", "else", ":", "\n", "                    ", "grad_f1", "=", "grad_f1_norm", "\n", "grad_f2", "=", "grad_f2_norm", "\n", "grad_fa", "=", "grad_fa_norm", "\n", "\n", "\n", "", "if", "PRINT_MEM", ":", "\n", "                    ", "key", "=", "None", "\n", "val", "=", "None", "\n", "shape_mems", "=", "{", "}", "\n", "print", "(", "\"=======================\"", ")", "\n", "for", "key", ",", "val", "in", "locals", "(", ")", ".", "items", "(", ")", ":", "\n", "                        ", "if", "hasattr", "(", "val", ",", "\"shape\"", ")", ":", "\n", "                            ", "shape_mems", "[", "key", "]", "=", "estimate_mem", "(", "val", ")", "\n", "\n", "", "", "sorted_mems", "=", "sorted", "(", "shape_mems", ".", "items", "(", ")", ",", "key", "=", "lambda", "kv", ":", "-", "kv", "[", "1", "]", ")", "\n", "for", "key", ",", "val", "in", "sorted_mems", ":", "\n", "                        ", "print", "(", "\"{}: {:.4f} GiB\"", ".", "format", "(", "key", ",", "val", ")", ")", "\n", "", "import", "ipdb", ";", "ipdb", ".", "set_trace", "(", ")", "\n", "\n", "\n", "#\u00a0safety checks over the whole inner loop", "\n", "", "if", "LOCAL_CHECKS", ":", "\n", "                    ", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "\n", "                        ", "f1_num", "=", "feats1", "[", "b", "]", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "requires_grad_", "(", ")", ".", "reshape", "(", "C", ",", "H", "*", "W", ")", "\n", "f2_num", "=", "feats2", "[", "b", "]", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "requires_grad_", "(", ")", ".", "reshape", "(", "C", ",", "h", "*", "w", ")", "\n", "fa_num", "=", "feats1", "[", "(", "b", "+", "1", ")", "%", "B", "]", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "requires_grad_", "(", ")", ".", "reshape", "(", "C", ",", "h", "*", "w", ")", "\n", "\n", "if", "norm", ":", "\n", "                            ", "f1_norm_num", "=", "F", ".", "normalize", "(", "f1_num", ",", "p", "=", "2", ",", "dim", "=", "0", ")", "*", "JDT_FACTOR", "\n", "f2_norm_num", "=", "F", ".", "normalize", "(", "f2_num", ",", "p", "=", "2", ",", "dim", "=", "0", ")", "*", "JDT_FACTOR", "\n", "fa_norm_num", "=", "F", ".", "normalize", "(", "fa_num", ",", "p", "=", "2", ",", "dim", "=", "0", ")", "*", "JDT_FACTOR", "\n", "", "else", ":", "\n", "                            ", "f1_norm_num", "=", "f1_num", "\n", "f2_norm_num", "=", "f2_num", "\n", "fa_norm_num", "=", "fa_num", "\n", "\n", "# BLock 1 ------------------------------------------", "\n", "", "corr_num", "=", "torch", ".", "matmul", "(", "f1_norm_num", ".", "t", "(", ")", ",", "fa_norm_num", ")", "\n", "corr_num", "=", "corr_num", ".", "reshape", "(", "H", ",", "W", ",", "H", ",", "W", ")", "\n", "smcorr_num", "=", "F", ".", "softmax", "(", "corr_num", ".", "reshape", "(", "H", ",", "W", ",", "-", "1", ")", ",", "dim", "=", "2", ")", "\n", "smcorr_num", "=", "smcorr_num", ".", "reshape", "(", "corr_num", ".", "shape", ")", "\n", "# BLock 1 ------------------------------------------", "\n", "\n", "\n", "# BLock 2 ------------------------------------------", "\n", "smcorr_fa_num", "=", "smcorr_num", "[", "None", ",", "...", "]", "*", "fa_norm_num", ".", "reshape", "(", "-", "1", ",", "1", ",", "1", ",", "h", ",", "w", ")", "\n", "# BLock 2 ------------------------------------------", "\n", "\n", "\n", "# BLock 3 ------------------------------------------", "\n", "f1_via_fa_num", "=", "smcorr_fa_num", ".", "sum", "(", "(", "3", ",", "4", ")", ")", ".", "reshape", "(", "C", ",", "H", "*", "W", ")", "\n", "# BLock 3 ------------------------------------------", "\n", "\n", "# BLock 4 ------------------------------------------", "\n", "corr2_num", "=", "torch", ".", "matmul", "(", "f1_via_fa_num", ".", "t", "(", ")", ",", "f2_norm_num", ")", "\n", "corr2_num", "=", "corr2_num", ".", "reshape", "(", "corr_num", ".", "shape", ")", "\n", "smcorr2_num", "=", "F", ".", "softmax", "(", "corr2_num", ".", "reshape", "(", "H", ",", "W", ",", "-", "1", ")", ",", "dim", "=", "2", ")", "\n", "smcorr2_num", "=", "smcorr2_num", ".", "reshape", "(", "corr_num", ".", "shape", ")", "\n", "# BLock 4 ------------------------------------------", "\n", "\n", "grad_f1_num", ",", "grad_fa_num", ",", "grad_f2_num", "=", "torch", ".", "autograd", ".", "grad", "(", "\n", "outputs", "=", "(", "smcorr2_num", ",", ")", ",", "\n", "inputs", "=", "(", "f1_num", ",", "fa_num", ",", "f2_num", ")", ",", "\n", "grad_outputs", "=", "(", "grad_smcorr2", ".", "view", "(", "corr_num", ".", "shape", ")", ")", ",", "\n", ")", "\n", "\n", "rel_diff", "(", "grad_f1", ",", "grad_f1_num", ",", "\"df1_\"", ")", "\n", "rel_diff", "(", "grad_f2", ",", "grad_f2_num", ",", "\"df2_\"", ")", "\n", "rel_diff", "(", "grad_fa", ",", "grad_fa_num", ",", "\"dfa_\"", ")", "\n", "\n", "", "", "\"\"\"Distribute the gradients back among the input tensor\n                features that require them.\"\"\"", "\n", "grad_feats1", "[", "b", "]", "+=", "grad_f1", ".", "reshape", "(", "(", "C", ",", "H", ",", "W", ")", ")", "\n", "grad_feats1", "[", "(", "b", "+", "1", ")", "%", "B", "]", "+=", "grad_fa", ".", "reshape", "(", "(", "C", ",", "h", ",", "w", ")", ")", "\n", "grad_feats2", "[", "b", "]", "+=", "grad_f2", ".", "reshape", "(", "(", "C", ",", "h", ",", "w", ")", ")", "\n", "\n", "if", "PROFILE", ":", "\n", "                    ", "timings", "[", "\"feat-assign\"", "]", "+=", "time", ".", "time", "(", ")", "-", "tic", "\n", "\n", "\n", "", "", "if", "LOCAL_CHECKS_INNER_LOOP", ":", "\n", "                ", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "                    ", "loss", "=", "0.", "\n", "grad_loss_", "=", "grad_loss", "*", "(", "H", "*", "W", "*", "B", ")", "#\u00a0unscale", "\n", "for", "b", "in", "range", "(", "B", ")", ":", "\n", "                        ", "f1", "=", "feats1", "[", "b", "]", ".", "reshape", "(", "C", ",", "H", "*", "W", ")", "# source", "\n", "f2", "=", "feats2", "[", "b", "]", ".", "reshape", "(", "C", ",", "h", "*", "w", ")", "# target", "\n", "fa", "=", "feats1", "[", "(", "b", "+", "1", ")", "%", "B", "]", ".", "reshape", "(", "C", ",", "h", "*", "w", ")", "# auxiliary", "\n", "\n", "if", "norm", ":", "\n", "                            ", "f1", "=", "F", ".", "normalize", "(", "f1", ",", "p", "=", "2", ",", "dim", "=", "0", ")", "*", "JDT_FACTOR", "\n", "f2", "=", "F", ".", "normalize", "(", "f2", ",", "p", "=", "2", ",", "dim", "=", "0", ")", "*", "JDT_FACTOR", "\n", "fa", "=", "F", ".", "normalize", "(", "fa", ",", "p", "=", "2", ",", "dim", "=", "0", ")", "*", "JDT_FACTOR", "\n", "\n", "", "corr", "=", "torch", ".", "matmul", "(", "f1", ".", "t", "(", ")", ",", "fa", ")", "\n", "corr", "=", "corr", ".", "reshape", "(", "H", ",", "W", ",", "h", ",", "w", ")", "\n", "smcorr", "=", "F", ".", "softmax", "(", "corr", ".", "reshape", "(", "H", ",", "W", ",", "-", "1", ")", ",", "dim", "=", "2", ")", ".", "reshape", "(", "corr", ".", "shape", ")", "\n", "smcorr_fa", "=", "smcorr", "[", "None", ",", "...", "]", "*", "fa", ".", "reshape", "(", "-", "1", ",", "1", ",", "1", ",", "h", ",", "w", ")", "\n", "# del smcorr", "\n", "\n", "f1_via_fa", "=", "smcorr_fa", ".", "sum", "(", "(", "3", ",", "4", ")", ")", ".", "reshape", "(", "C", ",", "H", "*", "w", ")", "\n", "# del smcorr_fa", "\n", "\n", "corr2", "=", "torch", ".", "matmul", "(", "f1_via_fa", ".", "t", "(", ")", ",", "f2", ")", ".", "reshape", "(", "corr", ".", "shape", ")", "\n", "smcorr2", "=", "F", ".", "softmax", "(", "corr2", ".", "reshape", "(", "H", ",", "W", ",", "-", "1", ")", ",", "dim", "=", "2", ")", ".", "reshape", "(", "corr", ".", "shape", ")", "\n", "# del corr2", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                            ", "diff", "=", "batch_grid_u", "[", "b", ",", ":", ",", ":", ",", "None", ",", "None", ",", ":", "]", "-", "xxyy", "[", "None", ",", "None", ",", ":", ":", "stride", ",", ":", ":", "stride", ",", ":", "]", "\n", "diff", "=", "(", "diff", "*", "diff", ")", ".", "sum", "(", "4", ")", ".", "sqrt", "(", ")", "\n", "diff", "=", "diff", ".", "pow", "(", "pow", ")", "\n", "", "L", "=", "diff", "*", "smcorr2", "\n", "loss", "+=", "L", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "\n", "", "loss", "=", "loss", "/", "(", "H", "*", "W", "*", "B", ")", "\n", "grad_f1_num", ",", "grad_f2_num", "=", "torch", ".", "autograd", ".", "grad", "(", "\n", "outputs", "=", "loss", ",", "\n", "inputs", "=", "(", "feats1", ",", "feats2", ")", ",", "\n", "grad_outputs", "=", "grad_loss_", ",", "\n", ")", "\n", "\n", "rel_diff", "(", "grad_feats1", ",", "grad_f1_num", ",", "\"full-loop f2\"", ")", "\n", "rel_diff", "(", "grad_feats2", ",", "grad_f2_num", ",", "\"full-loop f2\"", ")", "\n", "\n", "", "", "if", "PROFILE", ":", "\n", "                ", "tic", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "if", "PRINT_MEM", ":", "\n", "                ", "key", "=", "None", "\n", "val", "=", "None", "\n", "shape_mems", "=", "{", "}", "\n", "for", "key", ",", "val", "in", "locals", "(", ")", ".", "items", "(", ")", ":", "\n", "                    ", "if", "hasattr", "(", "val", ",", "\"shape\"", ")", ":", "\n", "                        ", "shape_mems", "[", "key", "]", "=", "estimate_mem", "(", "val", ")", "\n", "\n", "", "", "sorted_mems", "=", "sorted", "(", "shape_mems", ".", "items", "(", ")", ",", "key", "=", "lambda", "kv", ":", "-", "kv", "[", "1", "]", ")", "\n", "for", "key", ",", "val", "in", "sorted_mems", ":", "\n", "                    ", "print", "(", "\"{}: {:.4f} GiB\"", ".", "format", "(", "key", ",", "val", ")", ")", "\n", "\n", "", "", "if", "PROFILE", ":", "\n", "                ", "timings", "[", "\"cleanup\"", "]", "+=", "time", ".", "time", "(", ")", "-", "tic", "\n", "\n", "", "if", "PROFILE", ":", "\n", "                ", "timings", "[", "\"minibatch\"", "]", "=", "time", ".", "time", "(", ")", "-", "batch_tic", "\n", "print", "(", "\"==============\"", ")", "\n", "total_ratios", "=", "0", "\n", "for", "key", "in", "timings", ":", "\n", "                    ", "ratio", "=", "100", "*", "timings", "[", "key", "]", "/", "timings", "[", "\"minibatch\"", "]", "\n", "msg", "=", "\"{:.3f} ({:.2f}%) >>> {}\"", "\n", "print", "(", "msg", ".", "format", "(", "timings", "[", "key", "]", ",", "ratio", ",", "key", ")", ")", "\n", "total_ratios", "+=", "ratio", "\n", "", "msg", "=", "\"{:.3f}s >>> ratio total {}\"", "\n", "print", "(", "msg", ".", "format", "(", "timings", "[", "\"minibatch\"", "]", ",", "total_ratios", "-", "100", ")", ")", "\n", "print", "(", "\"==============\"", ")", "\n", "\n", "", "", "return", "(", "grad_feats1", ",", "grad_feats2", ",", "grad_xxyy", ",", "grad_batch_u", ",", "\n", "grad_stride", ",", "grad_norm", ",", "grad_pow", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.model.folded_correlation_dve.estimate_mem": [[30, 44], ["torch.numel", "torch.numel", "ipdb.set_trace"], "function", ["None"], ["def", "estimate_mem", "(", "x", ")", ":", "\n", "    ", "if", "x", ".", "dtype", "==", "torch", ".", "float64", ":", "\n", "        ", "nbytes", "=", "8", "\n", "", "elif", "x", ".", "dtype", "==", "torch", ".", "float32", ":", "\n", "        ", "nbytes", "=", "4", "\n", "", "elif", "x", ".", "dtype", "==", "torch", ".", "int32", ":", "\n", "        ", "nbytes", "=", "4", "\n", "", "elif", "x", ".", "dtype", "==", "torch", ".", "float16", ":", "\n", "        ", "nbytes", "=", "2", "\n", "", "elif", "x", ".", "dtype", "==", "torch", ".", "int8", ":", "\n", "        ", "nbytes", "=", "1", "\n", "", "else", ":", "\n", "        ", "import", "ipdb", ";", "ipdb", ".", "set_trace", "(", ")", "\n", "", "return", "torch", ".", "numel", "(", "x", ")", "*", "nbytes", "/", "(", "1024", ")", "**", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.model.folded_correlation_dve.rel_diff": [[718, 721], ["print", "torch.abs().sum", "torch.abs().sum", "torch.abs().mean().clamp", "torch.abs().mean().clamp", "torch.abs", "torch.abs", "torch.abs().mean", "torch.abs().mean", "torch.abs", "torch.abs"], "function", ["None"], ["", "", "def", "rel_diff", "(", "x1", ",", "x2", ",", "name", ")", ":", "\n", "    ", "out", "=", "torch", ".", "abs", "(", "x1", "-", "x2", ")", ".", "sum", "(", ")", "/", "torch", ".", "abs", "(", "x2", ")", ".", "mean", "(", ")", ".", "clamp", "(", "EPS", ")", "\n", "print", "(", "\"rel diff for {}: {}\"", ".", "format", "(", "name", ",", "out", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.model.folded_correlation_dve.dense_corr_check": [[723, 757], ["torch.randn", "torch.randn", "utils.tps.spatial_grid_unnormalized().double", "feats2.cuda", "tps.spatial_grid_unnormalized().double.cuda", "torch.randn.cuda", "torch.autograd.gradcheck", "print", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "utils.tps.spatial_grid_unnormalized"], "function", ["home.repos.pwc.inspect_result.jamt9000_DVE.utils.tps.spatial_grid_unnormalized"], ["", "def", "dense_corr_check", "(", "use_dve", "=", "False", ")", ":", "\n", "# gradcheck takes a tuple of tensors as input, check if your gradient", "\n", "# evaluated with these tensors are close enough to numerical", "\n", "# approximations and returns True if they all verify this condition.", "\n", "    ", "dense_corr", "=", "DenseCorrDve", ".", "apply", "\n", "dve_dim", "=", "4", "\n", "stride", "=", "1", "\n", "norm", "=", "False", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "4", ",", "dve_dim", ",", "4", ",", "4", "\n", "\n", "common", "=", "{", "\"dtype\"", ":", "torch", ".", "double", ",", "\"requires_grad\"", ":", "True", "}", "\n", "if", "not", "norm", ":", "\n", "        ", "sc", "=", "100", "\n", "", "else", ":", "\n", "        ", "sc", "=", "1", "\n", "", "feats1", "=", "torch", ".", "randn", "(", "B", ",", "C", ",", "H", ",", "W", ",", "**", "common", ")", "*", "sc", "\n", "feats2", "=", "torch", ".", "randn", "(", "B", ",", "C", ",", "H", ",", "W", ",", "**", "common", ")", "*", "sc", "\n", "\n", "batch_grid_u", "=", "torch", ".", "randn", "(", "B", ",", "H", ",", "W", ",", "2", ",", "\n", "dtype", "=", "torch", ".", "double", ",", "\n", "requires_grad", "=", "False", ",", "\n", ")", "\n", "\n", "H_input", "=", "H", "*", "stride", "\n", "W_input", "=", "W", "*", "stride", "\n", "xxyy", "=", "tps", ".", "spatial_grid_unnormalized", "(", "H_input", ",", "W_input", ")", ".", "double", "(", ")", "\n", "xxyy", ".", "requires_grad", "=", "False", "\n", "args", "=", "(", "feats1", ",", "feats2", ",", "xxyy", ",", "batch_grid_u", ",", "stride", ",", "norm", ")", "\n", "feats2", ".", "cuda", "(", ")", "\n", "xxyy", ".", "cuda", "(", ")", "\n", "batch_grid_u", ".", "cuda", "(", ")", "\n", "test", "=", "gradcheck", "(", "dense_corr", ",", "args", ",", "eps", "=", "1e-6", ",", "atol", "=", "ATOL", ",", "\n", "raise_exception", "=", "True", ")", "\n", "print", "(", "\"passed test: {}\"", ".", "format", "(", "test", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.scrach_data_loaders.CachedDataset.__init__": [[34, 89], ["data_loader.MAFLAligned.__init__", "numpy.vstack", "numpy.vstack", "numpy.hstack", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "scrach_data_loaders.check_cache", "numpy.load", "scrach_data_loaders.check_cache", "scrach_data_loaders.np_loader", "msg.format.format.format", "scrach_data_loaders.np_loader", "scrach_data_loaders.np_loader", "getattr", "getattr"], "methods", ["home.repos.pwc.inspect_result.jamt9000_DVE.base.base_model.BaseModel.__init__", "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.scrach_data_loaders.check_cache", "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.scrach_data_loaders.check_cache", "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.scrach_data_loaders.np_loader", "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.scrach_data_loaders.np_loader", "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.scrach_data_loaders.np_loader"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "cache_root", ",", "imwidth", ",", "crop", ",", "train", ",", "use_hq_ims", ",", "\n", "pair_warper", "=", "None", ",", "visualize", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "root", "=", "root", ",", "\n", "train", "=", "train", ",", "\n", "pair_warper", "=", "None", ",", "\n", "imwidth", "=", "imwidth", ",", "\n", "crop", "=", "crop", ",", "\n", "do_augmentations", "=", "False", ",", "\n", "use_keypoints", "=", "True", ",", "\n", "use_hq_ims", "=", "use_hq_ims", ",", "\n", ")", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "visualize", "=", "visualize", "\n", "\n", "# sanity check on loaded feature path", "\n", "template", "=", "\"imwidth{}\"", ".", "format", "(", "imwidth", ")", "\n", "msg", "=", "\"expected {} to occur in path to cached features\"", ".", "format", "(", "template", ")", "\n", "assert", "template", "in", "cache_root", ",", "msg", "\n", "\n", "if", "train", ":", "\n", "            ", "feat_path", "=", "pjoin", "(", "cache_root", ",", "\"train-feats.npy\"", ")", "\n", "kpts_path", "=", "pjoin", "(", "cache_root", ",", "\"train-kpts.npy\"", ")", "\n", "", "else", ":", "\n", "            ", "feat_path", "=", "pjoin", "(", "cache_root", ",", "\"val-feats.npy\"", ")", "\n", "kpts_path", "=", "pjoin", "(", "cache_root", ",", "\"val-kpts.npy\"", ")", "\n", "\n", "", "use_cache", "=", "True", "\n", "refresh", "=", "False", "\n", "\n", "if", "use_cache", ":", "\n", "            ", "fetcher", "=", "lambda", ":", "np_loader", "(", "feat_path", ")", "\n", "self", ".", "feats", "=", "check_cache", "(", "key", "=", "feat_path", ",", "fetcher", "=", "fetcher", ",", "refresh", "=", "refresh", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "feats", "=", "np", ".", "load", "(", "feat_path", ")", "\n", "\n", "", "if", "self", ".", "use_hq_ims", ":", "\n", "            ", "self", ".", "subdir", "=", "\"img_align_celeba_hq\"", "\n", "", "else", ":", "\n", "            ", "self", ".", "subdir", "=", "\"img_align_celeba\"", "\n", "\n", "", "if", "use_cache", ":", "# flatten kpts store", "\n", "            ", "fetcher", "=", "lambda", ":", "np_loader", "(", "kpts_path", ")", "\n", "kpts_store", "=", "check_cache", "(", "key", "=", "kpts_path", ",", "fetcher", "=", "fetcher", ",", "refresh", "=", "refresh", ")", "\n", "", "else", ":", "\n", "            ", "kpts_store", "=", "np_loader", "(", "kpts_path", ")", "\n", "\n", "", "self", ".", "keypts", "=", "np", ".", "vstack", "(", "[", "x", "[", "\"keypts\"", "]", "for", "x", "in", "kpts_store", "]", ")", "\n", "self", ".", "keypts_normalized", "=", "np", ".", "vstack", "(", "[", "x", "[", "\"keypts_normalized\"", "]", "for", "x", "in", "kpts_store", "]", ")", "\n", "self", ".", "index", "=", "np", ".", "hstack", "(", "[", "x", "[", "\"index\"", "]", "for", "x", "in", "kpts_store", "]", ")", "\n", "\n", "for", "meta_name", "in", "(", "\"keypts\"", ",", "\"keypts_normalized\"", ",", "\"index\"", ")", ":", "\n", "            ", "msg", "=", "\"expected dataset size of {}, found {}\"", "\n", "msg", "=", "msg", ".", "format", "(", "self", ".", "feats", ".", "shape", "[", "0", "]", ",", "getattr", "(", "self", ",", "meta_name", ")", ".", "shape", "[", "0", "]", ")", "\n", "assert", "self", ".", "feats", ".", "shape", "[", "0", "]", "==", "getattr", "(", "self", ",", "meta_name", ")", ".", "shape", "[", "0", "]", ",", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.scrach_data_loaders.CachedDataset.__len__": [[90, 92], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "feats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.scrach_data_loaders.CachedDataset.__getitem__": [[93, 109], ["torch.from_numpy", "os.path.join", "Image.open", "scrach_data_loaders.CachedDataset.transforms", "os.path.join", "scrach_data_loaders.CachedDataset.initial_transforms"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "im", "=", "torch", ".", "from_numpy", "(", "self", ".", "feats", "[", "index", "]", ")", "\n", "meta", "=", "{", "\n", "\"keypts\"", ":", "self", ".", "keypts", "[", "index", "]", ",", "\n", "\"keypts_normalized\"", ":", "self", ".", "keypts_normalized", "[", "index", "]", ",", "\n", "\"index\"", ":", "self", ".", "index", "[", "index", "]", ",", "\n", "}", "\n", "sample", "=", "{", "\"data\"", ":", "im", ",", "\"meta\"", ":", "meta", "}", "\n", "if", "self", ".", "visualize", ":", "\n", "            ", "subdir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'Img'", ",", "self", ".", "subdir", ")", "\n", "im", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "subdir", ",", "self", ".", "filenames", "[", "index", "]", ")", ")", "\n", "im_data", "=", "self", ".", "transforms", "(", "self", ".", "initial_transforms", "(", "im", ")", ")", "\n", "", "else", ":", "\n", "            ", "im_data", "=", "[", "]", "\n", "", "sample", "[", "\"im_data\"", "]", "=", "im_data", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.scrach_data_loaders.check_cache": [[12, 19], ["time.time", "print", "fetcher", "time.time"], "function", ["None"], ["def", "check_cache", "(", "key", ",", "fetcher", ",", "refresh", ")", ":", "\n", "    ", "tic", "=", "time", ".", "time", "(", ")", "\n", "if", "key", "not", "in", "global_cache", "or", "refresh", ":", "\n", "        ", "val", "=", "fetcher", "(", ")", "\n", "global_cache", "[", "key", "]", "=", "val", "\n", "", "print", "(", "\"fetched {} in {:.3f}s\"", ".", "format", "(", "key", ",", "time", ".", "time", "(", ")", "-", "tic", ")", ")", "\n", "return", "global_cache", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.scrach_data_loaders.np_loader": [[21, 30], ["time.time", "print", "print", "open", "numpy.load", "isinstance", "time.time"], "function", ["None"], ["", "def", "np_loader", "(", "np_path", ",", "l2norm", "=", "False", ")", ":", "\n", "    ", "tic", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"loading features from {}\"", ".", "format", "(", "np_path", ")", ")", "\n", "with", "open", "(", "np_path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "data", "=", "np", ".", "load", "(", "f", ")", "\n", "", "print", "(", "\"done in {:.3f}s\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "tic", ")", ")", "\n", "if", "isinstance", "(", "data", ",", "np", ".", "ndarray", ")", "and", "data", ".", "size", "==", "1", ":", "\n", "        ", "data", "=", "data", "[", "(", ")", "]", "# handle numpy dict storage convnetion", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.data_loaders.PcaAug.__init__": [[55, 57], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "alpha", "=", "0.1", ")", ":", "\n", "        ", "self", ".", "alpha", "=", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.data_loaders.PcaAug.__call__": [[58, 62], ["torch.randn", "rgb.reshape", "data_loaders.PcaAug._eigval.expand", "alpha.expand"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "im", ")", ":", "\n", "        ", "alpha", "=", "torch", ".", "randn", "(", "3", ")", "*", "self", ".", "alpha", "\n", "rgb", "=", "(", "self", ".", "_eigvec", "*", "alpha", ".", "expand", "(", "3", ",", "3", ")", "*", "self", ".", "_eigval", ".", "expand", "(", "3", ",", "3", ")", ")", ".", "sum", "(", "1", ")", "\n", "return", "im", "+", "rgb", ".", "reshape", "(", "3", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.data_loaders.JPEGNoise.__init__": [[65, 68], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "low", "=", "30", ",", "high", "=", "99", ")", ":", "\n", "        ", "self", ".", "low", "=", "low", "\n", "self", ".", "high", "=", "high", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.data_loaders.JPEGNoise.__call__": [[69, 80], ["max", "torchvision.resize", "io.BytesIO", "torchvision.resize.save", "PIL.Image.open", "torchvision.resize", "int", "int", "torch.randint().item", "torch.randint", "torch.randn"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "im", ")", ":", "\n", "        ", "H", "=", "im", ".", "height", "\n", "W", "=", "im", ".", "width", "\n", "rW", "=", "max", "(", "int", "(", "0.8", "*", "W", ")", ",", "int", "(", "W", "*", "(", "1", "+", "0.5", "*", "torch", ".", "randn", "(", "[", "]", ")", ")", ")", ")", "\n", "im", "=", "TF", ".", "resize", "(", "im", ",", "(", "rW", ",", "rW", ")", ")", "\n", "buf", "=", "BytesIO", "(", ")", "\n", "im", ".", "save", "(", "buf", ",", "format", "=", "'JPEG'", ",", "quality", "=", "torch", ".", "randint", "(", "self", ".", "low", ",", "self", ".", "high", ",", "\n", "[", "]", ")", ".", "item", "(", ")", ")", "\n", "im", "=", "Image", ".", "open", "(", "buf", ")", "\n", "im", "=", "TF", ".", "resize", "(", "im", ",", "(", "H", ",", "W", ")", ")", "\n", "return", "im", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.data_loaders.CelebABase.__len__": [[91, 93], ["len"], "methods", ["None"], ["    ", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "filenames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.data_loaders.CelebABase.restrict_annos": [[94, 102], ["len", "numpy.random.choice", "print", "int", "numpy.tile", "numpy.tile", "numpy.array", "[].tolist", "numpy.array"], "methods", ["None"], ["", "def", "restrict_annos", "(", "self", ",", "num", ")", ":", "\n", "        ", "anno_count", "=", "len", "(", "self", ".", "filenames", ")", "\n", "pick", "=", "np", ".", "random", ".", "choice", "(", "anno_count", ",", "num", ",", "replace", "=", "False", ")", "\n", "print", "(", "f\"Picking annotation for images: {np.array(self.filenames)[pick].tolist()}\"", ")", "\n", "# exit(0)", "\n", "repeat", "=", "int", "(", "anno_count", "//", "num", ")", "\n", "self", ".", "filenames", "=", "np", ".", "tile", "(", "np", ".", "array", "(", "self", ".", "filenames", ")", "[", "pick", "]", ",", "repeat", ")", "\n", "self", ".", "keypoints", "=", "np", ".", "tile", "(", "self", ".", "keypoints", "[", "pick", "]", ",", "(", "repeat", ",", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.data_loaders.CelebABase.__getitem__": [[104, 231], ["PIL.Image.open", "data_loaders.CelebABase.keypoints[].copy", "matplotlib.clf", "matplotlib.clf", "matplotlib.figure", "matplotlib.figure", "range", "torch.zeros", "os.path.join", "data_loaders.CelebABase.initial_transforms", "data_loaders.CelebABase.warper", "data_loaders.CelebABase.to", "data_loaders.CelebABase.to", "torchvision.to_pil_image", "torchvision.to_pil_image", "data_loaders.CelebABase.transforms", "data_loaders.CelebABase.transforms", "torch.stack", "data_loaders.CelebABase.initial_transforms", "data_loaders.CelebABase.warper", "data_loaders.CelebABase.to", "torchvision.to_pil_image", "data_loaders.CelebABase.transforms", "data_loaders.CelebABase.transforms", "torch.zeros", "torch.tensor", "matplotlib.figure.add_subplot", "plt.figure.add_subplot.imshow", "zs_dispFig", "ipdb.set_trace", "PIL.Image.open.convert", "torchvision.to_tensor", "matplotlib.imshow", "matplotlib.imshow", "matplotlib.scatter", "matplotlib.scatter", "PIL.Image.open.convert", "torchvision.to_tensor", "data_loaders.CelebABase.initial_transforms", "data_loaders.kp_normalize", "norm_range().permute().cpu().numpy", "plt.figure.add_subplot.scatter", "norm_range().permute().cpu().numpy", "data_loaders.kp_normalize", "PIL.Image.open.convert", "[].numpy", "[].numpy", "kp[].numpy", "kp[].numpy", "norm_range().permute().cpu", "norm_range().permute().cpu", "norm_range().permute", "norm_range().permute", "norm_range", "norm_range"], "methods", ["home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.data_loaders.kp_normalize", "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.data_loaders.kp_normalize", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.visualization.norm_range", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.visualization.norm_range"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "(", "not", "self", ".", "use_ims", "and", "not", "self", ".", "use_keypoints", ")", ":", "\n", "# early exit when caching is used", "\n", "            ", "return", "{", "\"data\"", ":", "torch", ".", "zeros", "(", "3", ",", "1", ",", "1", ")", ",", "\"meta\"", ":", "{", "\"index\"", ":", "index", "}", "}", "\n", "\n", "", "if", "self", ".", "use_ims", ":", "\n", "            ", "im", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "subdir", ",", "self", ".", "filenames", "[", "index", "]", ")", ")", "\n", "# print(\"imread: {:.3f}s\".format(time.time() - tic)) ; tic = time.time()", "\n", "", "kp", "=", "None", "\n", "if", "self", ".", "use_keypoints", ":", "\n", "            ", "kp", "=", "self", ".", "keypoints", "[", "index", "]", ".", "copy", "(", ")", "\n", "", "meta", "=", "{", "}", "\n", "\n", "if", "self", ".", "warper", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "warper", ".", "returns_pairs", ":", "\n", "# tic = time.time()", "\n", "                ", "im1", "=", "self", ".", "initial_transforms", "(", "im", ".", "convert", "(", "\"RGB\"", ")", ")", "\n", "# print(\"tx1: {:.3f}s\".format(time.time() - tic)) ; tic = time.time()", "\n", "im1", "=", "TF", ".", "to_tensor", "(", "im1", ")", "*", "255", "\n", "if", "False", ":", "\n", "                    ", "from", "utils", ".", "visualization", "import", "norm_range", "\n", "plt", ".", "imshow", "(", "norm_range", "(", "im1", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "plt", ".", "scatter", "(", "kp", "[", ":", ",", "0", "]", ",", "kp", "[", ":", ",", "1", "]", ")", "\n", "\n", "", "im1", ",", "im2", ",", "flow", ",", "grid", ",", "kp1", ",", "kp2", "=", "self", ".", "warper", "(", "im1", ",", "keypts", "=", "kp", ",", "crop", "=", "self", ".", "crop", ")", "\n", "# print(\"warper: {:.3f}s\".format(time.time() - tic)) ; tic = time.time()", "\n", "\n", "im1", "=", "im1", ".", "to", "(", "torch", ".", "uint8", ")", "\n", "im2", "=", "im2", ".", "to", "(", "torch", ".", "uint8", ")", "\n", "\n", "C", ",", "H", ",", "W", "=", "im1", ".", "shape", "\n", "\n", "im1", "=", "TF", ".", "to_pil_image", "(", "im1", ")", "\n", "im2", "=", "TF", ".", "to_pil_image", "(", "im2", ")", "\n", "\n", "im1", "=", "self", ".", "transforms", "(", "im1", ")", "\n", "im2", "=", "self", ".", "transforms", "(", "im2", ")", "\n", "# print(\"tx-2: {:.3f}s\".format(time.time() - tic)) ; tic = time.time()", "\n", "\n", "C", ",", "H", ",", "W", "=", "im1", ".", "shape", "\n", "data", "=", "torch", ".", "stack", "(", "(", "im1", ",", "im2", ")", ",", "0", ")", "\n", "meta", "=", "{", "\n", "'flow'", ":", "flow", "[", "0", "]", ",", "\n", "'grid'", ":", "grid", "[", "0", "]", ",", "\n", "'im1'", ":", "im1", ",", "\n", "'im2'", ":", "im2", ",", "\n", "'index'", ":", "index", "\n", "}", "\n", "if", "self", ".", "use_keypoints", ":", "\n", "                    ", "meta", "=", "{", "**", "meta", ",", "**", "{", "'kp1'", ":", "kp1", ",", "'kp2'", ":", "kp2", "}", "}", "\n", "", "", "else", ":", "\n", "                ", "im1", "=", "self", ".", "initial_transforms", "(", "im", ".", "convert", "(", "\"RGB\"", ")", ")", "\n", "im1", "=", "TF", ".", "to_tensor", "(", "im1", ")", "*", "255", "\n", "\n", "im1", ",", "kp", "=", "self", ".", "warper", "(", "im1", ",", "keypts", "=", "kp", ",", "crop", "=", "self", ".", "crop", ")", "\n", "\n", "im1", "=", "im1", ".", "to", "(", "torch", ".", "uint8", ")", "\n", "im1", "=", "TF", ".", "to_pil_image", "(", "im1", ")", "\n", "im1", "=", "self", ".", "transforms", "(", "im1", ")", "\n", "\n", "\n", "C", ",", "H", ",", "W", "=", "im1", ".", "shape", "\n", "data", "=", "im1", "\n", "if", "self", ".", "use_keypoints", ":", "\n", "                    ", "meta", "=", "{", "\n", "'keypts'", ":", "kp", ",", "\n", "'keypts_normalized'", ":", "kp_normalize", "(", "H", ",", "W", ",", "kp", ")", ",", "\n", "'index'", ":", "index", "\n", "}", "\n", "\n", "", "", "", "else", ":", "\n", "            ", "if", "self", ".", "use_ims", ":", "\n", "                ", "data", "=", "self", ".", "transforms", "(", "self", ".", "initial_transforms", "(", "im", ".", "convert", "(", "\"RGB\"", ")", ")", ")", "\n", "if", "self", ".", "crop", "!=", "0", ":", "\n", "                    ", "data", "=", "data", "[", ":", ",", "self", ".", "crop", ":", "-", "self", ".", "crop", ",", "self", ".", "crop", ":", "-", "self", ".", "crop", "]", "\n", "", "C", ",", "H", ",", "W", "=", "data", ".", "shape", "\n", "", "else", ":", "\n", "# \u00a0after caching descriptors, there is no point doing I/O", "\n", "                ", "H", "=", "W", "=", "self", ".", "imwidth", "-", "2", "*", "self", ".", "crop", "\n", "data", "=", "torch", ".", "zeros", "(", "3", ",", "1", ",", "1", ")", "\n", "\n", "", "if", "kp", "is", "not", "None", ":", "\n", "                ", "kp", "=", "kp", "-", "self", ".", "crop", "\n", "kp", "=", "torch", ".", "tensor", "(", "kp", ")", "\n", "\n", "", "if", "self", ".", "use_keypoints", ":", "\n", "                ", "meta", "=", "{", "\n", "'keypts'", ":", "kp", ",", "\n", "'keypts_normalized'", ":", "kp_normalize", "(", "H", ",", "W", ",", "kp", ")", ",", "\n", "'index'", ":", "index", "\n", "}", "\n", "", "", "if", "self", ".", "visualize", ":", "\n", "# from torchvision.utils import make_grid", "\n", "            ", "from", "utils", ".", "visualization", "import", "norm_range", "\n", "num_show", "=", "2", "if", "self", ".", "warper", "and", "self", ".", "warper", ".", "returns_pairs", "else", "1", "\n", "plt", ".", "clf", "(", ")", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "for", "ii", "in", "range", "(", "num_show", ")", ":", "\n", "                ", "im_", "=", "data", "[", "ii", "]", "if", "num_show", ">", "1", "else", "data", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "1", ",", "num_show", ",", "ii", "+", "1", ")", "\n", "ax", ".", "imshow", "(", "norm_range", "(", "im_", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "if", "self", ".", "use_keypoints", ":", "\n", "                    ", "if", "num_show", "==", "2", ":", "\n", "                        ", "kp_x", "=", "meta", "[", "\"kp{}\"", ".", "format", "(", "ii", "+", "1", ")", "]", "[", ":", ",", "0", "]", ".", "numpy", "(", ")", "\n", "kp_y", "=", "meta", "[", "\"kp{}\"", ".", "format", "(", "ii", "+", "1", ")", "]", "[", ":", ",", "1", "]", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                        ", "kp_x", "=", "kp", "[", ":", ",", "0", "]", ".", "numpy", "(", ")", "\n", "kp_y", "=", "kp", "[", ":", ",", "1", "]", ".", "numpy", "(", ")", "\n", "", "ax", ".", "scatter", "(", "kp_x", ",", "kp_y", ")", "\n", "", "zs_dispFig", "(", ")", "\n", "import", "ipdb", ";", "ipdb", ".", "set_trace", "(", ")", "\n", "#     zs.", "\n", "# if self.train:", "\n", "# else:", "\n", "#     if len(data.size()) < 4:", "\n", "#         data_ = data.unsqueeze(0)", "\n", "#     else:", "\n", "#         data_ = data", "\n", "#     for im_ in data_:", "\n", "#         plt.clf()", "\n", "#         im_ = norm_range(im_).permute(1, 2, 0).cpu().numpy()", "\n", "#         plt.imshow(im_)", "\n", "#     import ipdb; ipdb.set_trace()", "\n", "# else:", "\n", "#     ims = norm_range(make_grid(data)).permute(1, 2, 0).cpu().numpy()", "\n", "#     plt.imshow(ims)", "\n", "", "", "return", "{", "\"data\"", ":", "data", ",", "\"meta\"", ":", "meta", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.data_loaders.ProfileData.__init__": [[234, 236], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "imwidth", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "imwidth", "=", "imwidth", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.data_loaders.ProfileData.__getitem__": [[237, 240], ["torch.randn"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "data", "=", "torch", ".", "randn", "(", "3", ",", "self", ".", "imwidth", ",", "self", ".", "imwidth", ")", "\n", "return", "{", "\"data\"", ":", "data", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.data_loaders.ProfileData.__len__": [[241, 243], ["int"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "int", "(", "1E6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.data_loaders.IJBB.__init__": [[246, 271], ["sorted", "torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "glob.glob", "len", "str", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "pathlib.Path", "pathlib.Path"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "imwidth", ",", "prototypes", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "imwidth", "=", "imwidth", "\n", "self", ".", "prototypes", "=", "prototypes", "\n", "self", ".", "im_list", "=", "sorted", "(", "glob", ".", "glob", "(", "str", "(", "Path", "(", "root", ")", "/", "\"crop_det/*.jpg\"", ")", ")", ")", "\n", "expected", "=", "227630", "\n", "assert", "len", "(", "self", ".", "im_list", ")", "==", "expected", ",", "\"expected {} images\"", ".", "format", "(", "expected", ")", "\n", "if", "prototypes", ":", "\n", "            ", "prototype_list", "=", "[", "\n", "\"124171.jpg\"", ",", "\n", "\"150665.jpg\"", ",", "\n", "\"3128.jpg\"", ",", "\n", "\"2920.jpg\"", ",", "\n", "\"2782.jpg\"", ",", "\n", "\"1082.jpg\"", ",", "\n", "]", "\n", "self", ".", "im_list", "=", "[", "x", "for", "x", "in", "self", ".", "im_list", "if", "Path", "(", "x", ")", ".", "name", "in", "prototype_list", "]", "\n", "\n", "", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.5084", ",", "0.4224", ",", "0.3769", "]", ",", "\n", "std", "=", "[", "0.2599", ",", "0.2371", ",", "0.2323", "]", ")", "\n", "self", ".", "initial_transforms", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "self", ".", "imwidth", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "self", ".", "imwidth", ")", ",", "\n", "]", ")", "\n", "self", ".", "transforms", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "normalize", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.data_loaders.IJBB.__getitem__": [[272, 284], ["PIL.Image.open().convert", "data_loaders.IJBB.transforms", "data_loaders.IJBB.initial_transforms", "norm_range().permute().cpu().numpy", "matplotlib.imshow", "matplotlib.imshow", "ipdb.set_trace", "PIL.Image.open", "norm_range().permute().cpu", "norm_range().permute", "norm_range", "make_grid"], "methods", ["home.repos.pwc.inspect_result.jamt9000_DVE.utils.visualization.norm_range"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "im_path", "=", "self", ".", "im_list", "[", "index", "]", "\n", "im", "=", "Image", ".", "open", "(", "im_path", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "data", "=", "self", ".", "transforms", "(", "self", ".", "initial_transforms", "(", "im", ")", ")", "\n", "if", "False", ":", "\n", "            ", "from", "torchvision", ".", "utils", "import", "make_grid", "\n", "from", "utils", ".", "visualization", "import", "norm_range", "\n", "ims", "=", "norm_range", "(", "make_grid", "(", "data", ")", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "plt", ".", "imshow", "(", "ims", ")", "\n", "import", "ipdb", ";", "\n", "ipdb", ".", "set_trace", "(", ")", "\n", "", "return", "{", "\"data\"", ":", "data", ",", "\"im_path\"", ":", "im_path", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.data_loaders.IJBB.__len__": [[285, 287], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "im_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.data_loaders.AFLW.__init__": [[292, 336], ["data_loaders.AFLW.load_dataset", "keypoints.astype", "os.path.join", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.Compose", "sizes[].reshape", "data_loaders.JPEGNoise", "torchvision.transforms.transforms.ColorJitter", "torchvision.transforms.ToTensor", "data_loaders.PcaAug", "torchvision.transforms.ToTensor"], "methods", ["home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.data_loaders.Chimps.load_dataset"], ["def", "__init__", "(", "self", ",", "root", ",", "imwidth", ",", "train", ",", "pair_warper", ",", "visualize", "=", "False", ",", "use_ims", "=", "True", ",", "\n", "use_keypoints", "=", "False", ",", "do_augmentations", "=", "False", ",", "crop", "=", "0", ",", "use_minival", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "crop", "=", "crop", "\n", "self", ".", "imwidth", "=", "imwidth", "\n", "self", ".", "use_ims", "=", "use_ims", "\n", "self", ".", "visualize", "=", "visualize", "\n", "self", ".", "use_keypoints", "=", "use_keypoints", "\n", "self", ".", "use_minival", "=", "use_minival", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "warper", "=", "pair_warper", "\n", "\n", "images", ",", "keypoints", ",", "sizes", "=", "self", ".", "load_dataset", "(", "root", ")", "\n", "self", ".", "sizes", "=", "sizes", "\n", "self", ".", "filenames", "=", "images", "\n", "self", ".", "keypoints", "=", "keypoints", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "subdir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'output'", ")", "\n", "\n", "# print(\"LIMITING DATA FOR DEBGGING\")", "\n", "# self.filenames = self.filenames[:1000]", "\n", "# self.keypoints = self.keypoints[:1000]", "\n", "# sizes = sizes[:1000]", "\n", "# self.sizes = sizes", "\n", "\n", "# check raw", "\n", "# im_path = pjoin(self.subdir, self.filenames[0])", "\n", "# im = Image.open(im_path).convert(\"RGB\")", "\n", "# plt.imshow(im)", "\n", "# plt.scatter(keypoints[0, :, 0], keypoints[0, :, 1])", "\n", "self", ".", "keypoints", "*=", "self", ".", "imwidth", "/", "sizes", "[", ":", ",", "[", "1", ",", "0", "]", "]", ".", "reshape", "(", "-", "1", ",", "1", ",", "2", ")", "\n", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.5084", ",", "0.4224", ",", "0.3769", "]", ",", "\n", "std", "=", "[", "0.2599", ",", "0.2371", ",", "0.2323", "]", ")", "\n", "# NOTE: we break the aspect ratio here, but hopefully the network should", "\n", "# be fairly tolerant to this", "\n", "self", ".", "initial_transforms", "=", "transforms", ".", "Resize", "(", "(", "self", ".", "imwidth", ",", "self", ".", "imwidth", ")", ")", "\n", "augmentations", "=", "[", "\n", "JPEGNoise", "(", ")", ",", "\n", "transforms", ".", "transforms", ".", "ColorJitter", "(", ".4", ",", ".4", ",", ".4", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "PcaAug", "(", ")", "\n", "]", "if", "(", "train", "and", "do_augmentations", ")", "else", "[", "transforms", ".", "ToTensor", "(", ")", "]", "\n", "self", ".", "transforms", "=", "transforms", ".", "Compose", "(", "augmentations", "+", "[", "normalize", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.data_loaders.AFLW.load_dataset": [[337, 366], ["scipy.io.loadmat", "open", "f.read().splitlines", "os.path.join", "os.path.join", "int", "f.read", "round", "len"], "methods", ["None"], ["", "def", "load_dataset", "(", "self", ",", "data_dir", ")", ":", "\n", "# borrowed from Tom and Ankush", "\n", "        ", "if", "self", ".", "train", "or", "self", ".", "use_minival", ":", "\n", "            ", "load_subset", "=", "\"train\"", "\n", "", "else", ":", "\n", "            ", "load_subset", "=", "\"test\"", "\n", "", "with", "open", "(", "pjoin", "(", "data_dir", ",", "'aflw_{}_images.txt'", ".", "format", "(", "load_subset", ")", ")", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "images", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "", "mat", "=", "loadmat", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'aflw_'", "+", "load_subset", "+", "'_keypoints.mat'", ")", ")", "\n", "keypoints", "=", "mat", "[", "'gt'", "]", "[", ":", ",", ":", ",", "[", "1", ",", "0", "]", "]", "\n", "sizes", "=", "mat", "[", "'hw'", "]", "\n", "\n", "# import ipdb; ipdb.set_trace()", "\n", "# if self.data.shape[0] == 19000:", "\n", "#     self.data = self.data[:20]", "\n", "\n", "if", "load_subset", "==", "'train'", ":", "\n", "# put the last 10 percent of the training aside for validation", "\n", "            ", "if", "self", ".", "use_minival", ":", "\n", "                ", "n_validation", "=", "int", "(", "round", "(", "0.1", "*", "len", "(", "images", ")", ")", ")", "\n", "if", "self", ".", "train", ":", "\n", "                    ", "images", "=", "images", "[", ":", "-", "n_validation", "]", "\n", "keypoints", "=", "keypoints", "[", ":", "-", "n_validation", "]", "\n", "sizes", "=", "sizes", "[", ":", "-", "n_validation", "]", "\n", "", "else", ":", "\n", "                    ", "images", "=", "images", "[", "-", "n_validation", ":", "]", "\n", "keypoints", "=", "keypoints", "[", "-", "n_validation", ":", "]", "\n", "sizes", "=", "sizes", "[", "-", "n_validation", ":", "]", "\n", "", "", "", "return", "images", ",", "keypoints", ",", "sizes", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.data_loaders.Chimps.__init__": [[370, 405], ["data_loaders.Chimps.load_dataset", "keypoints.astype", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.Compose", "sizes[].reshape", "data_loaders.JPEGNoise", "torchvision.transforms.transforms.ColorJitter", "torchvision.transforms.ToTensor", "data_loaders.PcaAug", "torchvision.transforms.ToTensor"], "methods", ["home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.data_loaders.Chimps.load_dataset"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "imwidth", ",", "train", ",", "pair_warper", ",", "visualize", "=", "False", ",", "\n", "use_keypoints", "=", "False", ",", "do_augmentations", "=", "False", ",", "crop", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "crop", "=", "crop", "\n", "self", ".", "imwidth", "=", "imwidth", "\n", "self", ".", "visualize", "=", "visualize", "\n", "self", ".", "use_keypoints", "=", "use_keypoints", "\n", "self", ".", "warper", "=", "pair_warper", "\n", "\n", "subset", "=", "\"train\"", "if", "train", "else", "\"val\"", "\n", "images", ",", "keypoints", ",", "sizes", "=", "self", ".", "load_dataset", "(", "root", ",", "subset", ")", "\n", "self", ".", "sizes", "=", "sizes", "\n", "self", ".", "filenames", "=", "images", "\n", "self", ".", "keypoints", "=", "keypoints", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "subdir", "=", "root", "\n", "\n", "# check raw", "\n", "# im_path = pjoin(self.subdir, self.filenames[0])", "\n", "# im = Image.open(im_path).convert(\"RGB\")", "\n", "# plt.imshow(im)", "\n", "# plt.scatter(keypoints[0, :, 0], keypoints[0, :, 1])", "\n", "self", ".", "keypoints", "*=", "self", ".", "imwidth", "/", "sizes", "[", ":", ",", "[", "1", ",", "0", "]", "]", ".", "reshape", "(", "-", "1", ",", "1", ",", "2", ")", "\n", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.5084", ",", "0.4224", ",", "0.3769", "]", ",", "\n", "std", "=", "[", "0.2599", ",", "0.2371", ",", "0.2323", "]", ")", "\n", "# NOTE: we break the aspect ratio here, but hopefully the network should", "\n", "# be fairly tolerant to this", "\n", "self", ".", "initial_transforms", "=", "transforms", ".", "Resize", "(", "(", "self", ".", "imwidth", ",", "self", ".", "imwidth", ")", ")", "\n", "augmentations", "=", "[", "\n", "JPEGNoise", "(", ")", ",", "\n", "transforms", ".", "transforms", ".", "ColorJitter", "(", ".4", ",", ".4", ",", ".4", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "PcaAug", "(", ")", "\n", "]", "if", "(", "train", "and", "do_augmentations", ")", "else", "[", "transforms", ".", "ToTensor", "(", ")", "]", "\n", "self", ".", "transforms", "=", "transforms", ".", "Compose", "(", "augmentations", "+", "[", "normalize", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.data_loaders.Chimps.load_dataset": [[406, 434], ["scipy.io.loadmat", "mat[].reshape", "open", "f.read().splitlines", "os.path.join", "open", "numpy.array", "int", "os.path.join", "os.path.join", "x.split", "round", "f.read", "f.read().splitlines", "int", "int", "len", "ValueError", "f.read"], "methods", ["None"], ["", "def", "load_dataset", "(", "self", ",", "data_dir", ",", "subset", ")", ":", "\n", "# borrowed from Tom and Ankush", "\n", "        ", "with", "open", "(", "pjoin", "(", "data_dir", ",", "\"filelist_face_images.txt\"", ")", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "images", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "", "mat", "=", "loadmat", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'keypoint_information.mat'", ")", ")", "\n", "keypoints", "=", "mat", "[", "\"f_keypoints\"", "]", ".", "reshape", "(", "-", "1", ",", "5", ",", "2", ")", "\n", "\n", "with", "open", "(", "pjoin", "(", "data_dir", ",", "\"im_sizes.txt\"", ")", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "rows", "=", "[", "(", "x", ".", "split", "(", "\",\"", ")", ")", "for", "x", "in", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "]", "\n", "sizes", "=", "np", ".", "array", "(", "[", "[", "int", "(", "x", "[", "0", "]", ")", ",", "int", "(", "x", "[", "1", "]", ")", "]", "for", "x", "in", "rows", "]", ")", "\n", "\n", "", "if", "subset", "in", "[", "'train'", ",", "'val'", "]", ":", "\n", "# put the last 10 percent of the training aside for validation", "\n", "            ", "n_validation", "=", "int", "(", "round", "(", "0.1", "*", "len", "(", "images", ")", ")", ")", "\n", "# n_validation = 0", "\n", "if", "not", "n_validation", ":", "\n", "                ", "pass", "\n", "", "elif", "subset", "==", "'train'", ":", "\n", "                ", "images", "=", "images", "[", ":", "-", "n_validation", "]", "\n", "keypoints", "=", "keypoints", "[", ":", "-", "n_validation", "]", "\n", "sizes", "=", "sizes", "[", ":", "-", "n_validation", "]", "\n", "", "elif", "subset", "==", "'val'", ":", "\n", "                ", "images", "=", "images", "[", "-", "n_validation", ":", "]", "\n", "keypoints", "=", "keypoints", "[", "-", "n_validation", ":", "]", "\n", "sizes", "=", "sizes", "[", "-", "n_validation", ":", "]", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", ")", "\n", "", "", "return", "images", ",", "keypoints", ",", "sizes", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.data_loaders.Chimps.__len__": [[435, 437], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "filenames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.data_loaders.Helen.__init__": [[440, 518], ["setlists.items", "sum", "msg.format", "torchvision.transforms.Normalize", "data_loader.augmentations.get_composed_augmentations", "torchvision.transforms.Resize", "torchvision.transforms.Resize", "torchvision.transforms.Compose", "numpy.random.seed", "numpy.random.choice", "numpy.random.choice.repeat", "torchvision.transforms.Normalize", "open", "f.read().splitlines", "len", "len", "torchvision.transforms.ToTensor", "str", "f.read().splitlines.pop", "im_lists.values", "f.read", "x.split", "pathlib.Path"], "methods", ["home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.augmentations.get_composed_augmentations"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "imwidth", ",", "train", ",", "visualize", "=", "False", ",", "thresh", "=", "0.5", ",", "rand_in", "=", "False", ",", "\n", "crop2face", "=", "False", ",", "downsample_labels", "=", "0", ",", "break_preproc", "=", "False", ",", "\n", "restrict_to", "=", "0", ",", "restrict_seed", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "thresh", "=", "thresh", "\n", "self", ".", "break_preproc", "=", "break_preproc", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "visualize", "=", "visualize", "\n", "self", ".", "rand_in", "=", "rand_in", "\n", "self", ".", "imwidth", "=", "imwidth", "\n", "setlists", "=", "{", "\n", "\"train\"", ":", "\"exemplars.txt\"", ",", "\n", "\"val\"", ":", "\"tuning.txt\"", ",", "\n", "\"test\"", ":", "\"testing.txt\"", "\n", "}", "\n", "\n", "self", ".", "classnames", "=", "[", "\n", "\"background\"", ",", "\n", "\"face-skin\"", ",", "# (excluding ears and neck)", "\n", "\"left-eyebrow\"", ",", "\n", "\"right-eyebrow\"", ",", "\n", "\"left-eye\"", ",", "\n", "\"right-eye\"", ",", "\n", "\"nose\"", ",", "\n", "\"upper-lip\"", ",", "\n", "\"inner-mouth\"", ",", "\n", "\"lower-lip\"", ",", "\n", "\"hair\"", ",", "\n", "]", "\n", "\n", "im_lists", "=", "{", "}", "\n", "for", "key", ",", "val", "in", "setlists", ".", "items", "(", ")", ":", "\n", "            ", "with", "open", "(", "str", "(", "Path", "(", "root", ")", "/", "val", ")", ",", "\"r\"", ")", "as", "f", ":", "\n", "                ", "tokens", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "if", "tokens", "[", "-", "1", "]", "==", "\"\"", ":", "\n", "                    ", "tokens", ".", "pop", "(", ")", "\n", "", "ids", "=", "[", "x", ".", "split", "(", "\" , \"", ")", "[", "1", "]", "for", "x", "in", "tokens", "]", "\n", "im_lists", "[", "key", "]", "=", "ids", "\n", "\n", "", "", "total_ims", "=", "sum", "(", "[", "len", "(", "x", ")", "for", "x", "in", "im_lists", ".", "values", "(", ")", "]", ")", "\n", "msg", "=", "\"expected {} images, found {}\"", "\n", "expected", "=", "2330", "\n", "assert", "total_ims", "==", "expected", ",", "msg", ".", "format", "(", "expected", ",", "total_ims", ")", "\n", "\n", "if", "restrict_to", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "restrict_seed", ")", "\n", "num_repeats", "=", "len", "(", "im_lists", "[", "\"train\"", "]", ")", "//", "restrict_to", "\n", "sample", "=", "np", ".", "random", ".", "choice", "(", "im_lists", "[", "\"train\"", "]", ",", "restrict_to", ")", "\n", "im_lists", "[", "\"train\"", "]", "=", "sample", ".", "repeat", "(", "num_repeats", ")", "\n", "\n", "", "if", "train", ":", "\n", "            ", "self", ".", "im_list", "=", "im_lists", "[", "\"train\"", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "im_list", "=", "im_lists", "[", "\"test\"", "]", "\n", "", "normalize", "=", "transforms", ".", "Normalize", "(", "\n", "mean", "=", "[", "0.5084", ",", "0.4224", ",", "0.3769", "]", ",", "\n", "std", "=", "[", "0.2599", ",", "0.2371", ",", "0.2323", "]", ",", "\n", ")", "\n", "aug_dict", "=", "{", "\n", "\"rsize\"", ":", "1.05", ",", "\n", "\"hflip\"", ":", "0.5", ",", "\n", "\"translate\"", ":", "(", "2", ",", "2", ")", ",", "\n", "}", "\n", "# \"rotate\": 5,", "\n", "# \"hue\": 0.5,", "\n", "# \"gamma\": 0.5,", "\n", "self", ".", "augs", "=", "get_composed_augmentations", "(", "aug_dict", ")", "\n", "self", ".", "resizer", "=", "transforms", ".", "Resize", "(", "(", "self", ".", "imwidth", ",", "self", ".", "imwidth", ")", ")", "\n", "self", ".", "downsample_labels", "=", "downsample_labels", "\n", "if", "downsample_labels", ":", "\n", "            ", "label_w", "=", "self", ".", "imwidth", "//", "downsample_labels", "\n", "", "else", ":", "\n", "            ", "label_w", "=", "self", ".", "imwidth", "\n", "", "self", ".", "label_resizer", "=", "transforms", ".", "Resize", "(", "(", "label_w", ",", "label_w", ")", ",", "\n", "interpolation", "=", "Image", ".", "NEAREST", ")", "\n", "if", "self", ".", "break_preproc", ":", "\n", "            ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0", ",", "0", ",", "0", "]", ",", "std", "=", "[", "1", ",", "1", ",", "1", "]", ")", "\n", "", "self", ".", "transforms", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "normalize", "]", ")", "\n", "# transforms.Resize(self.imwidth),", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.data_loaders.Helen.__getitem__": [[520, 578], ["PIL.Image.open().convert", "str", "numpy.zeros", "range", "PIL.Image.fromarray", "data_loaders.Helen.label_resizer", "torch.from_numpy", "data_loaders.Helen.resizer", "data_loaders.Helen.transforms", "pathlib.Path", "pathlib.Path", "str.format", "numpy.array", "numpy.array", "torch.histc", "zip", "torch.randn", "norm_range().permute().cpu().numpy", "matplotlib.close", "matplotlib.close", "matplotlib.axis", "matplotlib.axis", "matplotlib.figure", "matplotlib.figure", "matplotlib.figure.add_subplot", "matplotlib.figure.add_subplot", "matplotlib.figure.add_subplot", "plt.figure.add_subplot.imshow", "plt.figure.add_subplot.imshow", "plt.figure.add_subplot.imshow", "plt.figure.add_subplot.imshow", "zs_dispFig", "PIL.Image.open", "pathlib.Path", "PIL.Image.open().convert", "torch.from_numpy.float", "torch.histc.sum", "print", "utils.util.label_colormap().numpy", "tuple", "numpy.array", "utils.util.label_colormap().numpy", "str", "norm_range().permute().cpu", "PIL.Image.fromarray().resize", "PIL.Image.open", "utils.util.label_colormap", "utils.util.label_colormap", "norm_range().permute", "torch.from_numpy.size", "PIL.Image.fromarray", "torch.from_numpy.numpy", "norm_range", "make_grid"], "methods", ["home.repos.pwc.inspect_result.jamt9000_DVE.utils.util.label_colormap", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.util.label_colormap", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.visualization.norm_range"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "im_path", "=", "Path", "(", "self", ".", "root", ")", "/", "\"images/{}.jpg\"", ".", "format", "(", "self", ".", "im_list", "[", "index", "]", ")", "\n", "im", "=", "Image", ".", "open", "(", "im_path", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "name", "=", "Path", "(", "im_path", ")", ".", "stem", "\n", "anno_template", "=", "str", "(", "Path", "(", "self", ".", "root", ")", "/", "\"labels/{}/{}_lbl{:02d}.png\"", ")", "\n", "seg", "=", "np", ".", "zeros", "(", "(", "im", ".", "size", "[", "1", "]", ",", "im", ".", "size", "[", "0", "]", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "# for ii in range(10, 0, -1):", "\n", "for", "ii", "in", "range", "(", "1", ",", "11", ")", ":", "\n", "            ", "anno_path", "=", "anno_template", ".", "format", "(", "name", ",", "name", ",", "ii", ")", "\n", "lbl_im", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "anno_path", ")", ".", "convert", "(", "\"L\"", ")", ")", "\n", "assert", "lbl_im", ".", "ndim", "==", "2", ",", "\"expected greyscale\"", "\n", "# if sum(seg[lbl_im > self.thresh]) > 0:", "\n", "#     print(\"already colored these pixels\")", "\n", "#     import ipdb; ipdb.set_trace()", "\n", "seg", "[", "lbl_im", ">", "self", ".", "thresh", "*", "255", "]", "=", "ii", "\n", "# plt.matshow(seg)", "\n", "# zs_dispFig()", "\n", "\n", "", "seg", "=", "Image", ".", "fromarray", "(", "seg", ",", "\"L\"", ")", "\n", "# if self.train and False:", "\n", "#     im, seg = self.augs(im, seg)", "\n", "\n", "seg", "=", "self", ".", "label_resizer", "(", "seg", ")", "\n", "seg", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "seg", ")", ")", "\n", "data", "=", "self", ".", "resizer", "(", "im", ")", "\n", "data", "=", "self", ".", "transforms", "(", "data", ")", "\n", "\n", "if", "False", ":", "\n", "            ", "counts", "=", "torch", ".", "histc", "(", "seg", ".", "float", "(", ")", ",", "bins", "=", "11", ",", "min", "=", "0", ",", "max", "=", "10", ")", "\n", "probs", "=", "counts", "/", "counts", ".", "sum", "(", ")", "\n", "for", "name", ",", "prob", "in", "zip", "(", "self", ".", "classnames", ",", "probs", ")", ":", "\n", "                ", "print", "(", "\"{}\\t {:.2f}\"", ".", "format", "(", "name", ",", "prob", ")", ")", "\n", "", "", "if", "self", ".", "rand_in", ":", "\n", "            ", "data", "=", "torch", ".", "randn", "(", "data", ".", "shape", ")", "\n", "\n", "", "if", "self", ".", "visualize", ":", "\n", "            ", "from", "torchvision", ".", "utils", "import", "make_grid", "\n", "from", "utils", ".", "visualization", "import", "norm_range", "\n", "ims", "=", "norm_range", "(", "make_grid", "(", "data", ")", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "plt", ".", "close", "(", "\"all\"", ")", "\n", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "# a new figure window", "\n", "ax1", "=", "fig", ".", "add_subplot", "(", "1", ",", "3", ",", "1", ")", "\n", "ax2", "=", "fig", ".", "add_subplot", "(", "1", ",", "3", ",", "2", ")", "\n", "ax3", "=", "fig", ".", "add_subplot", "(", "1", ",", "3", ",", "3", ")", "\n", "ax1", ".", "imshow", "(", "ims", ")", "\n", "ax2", ".", "imshow", "(", "label_colormap", "(", "seg", ")", ".", "numpy", "(", ")", ")", "\n", "if", "self", ".", "downsample_labels", ":", "\n", "                ", "sz", "=", "tuple", "(", "[", "x", "*", "self", ".", "downsample_labels", "for", "x", "in", "seg", ".", "size", "(", ")", "]", ")", "\n", "seg_", "=", "np", ".", "array", "(", "Image", ".", "fromarray", "(", "seg", ".", "numpy", "(", ")", ")", ".", "resize", "(", "sz", ")", ")", "\n", "", "else", ":", "\n", "                ", "seg_", "=", "seg", "\n", "# ax3.matshow(seg_)", "\n", "", "ax3", ".", "imshow", "(", "label_colormap", "(", "seg_", ")", ".", "numpy", "(", ")", ")", "\n", "ax3", ".", "imshow", "(", "ims", ",", "alpha", "=", "0.5", ")", "\n", "zs_dispFig", "(", ")", "\n", "\n", "", "return", "{", "\"data\"", ":", "data", ",", "\"meta\"", ":", "{", "\"im_path\"", ":", "str", "(", "im_path", ")", ",", "\"lbls\"", ":", "seg", "}", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.data_loaders.Helen.__len__": [[579, 581], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "im_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.data_loaders.CelebAPrunedAligned_MAFLVal.__init__": [[586, 653], ["os.path.join", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "numpy.array().reshape", "list", "torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "os.path.join", "len", "os.path.join", "len", "os.path.join", "os.path.join", "torchvision.transforms.functional.crop", "numpy.array", "data_loaders.JPEGNoise", "torchvision.transforms.transforms.ColorJitter", "torchvision.transforms.ToTensor", "data_loaders.PcaAug", "torchvision.transforms.ToTensor", "torchvision.transforms.Resize"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "root", ",", "train", "=", "True", ",", "pair_warper", "=", "None", ",", "imwidth", "=", "100", ",", "crop", "=", "18", ",", "\n", "do_augmentations", "=", "True", ",", "use_keypoints", "=", "False", ",", "use_hq_ims", "=", "True", ",", "\n", "visualize", "=", "False", ",", "use_ims", "=", "True", ",", "val_split", "=", "\"celeba\"", ",", "val_size", "=", "2000", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "imwidth", "=", "imwidth", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "use_ims", "=", "use_ims", "\n", "self", ".", "warper", "=", "pair_warper", "\n", "self", ".", "visualize", "=", "visualize", "\n", "self", ".", "crop", "=", "crop", "\n", "self", ".", "use_keypoints", "=", "use_keypoints", "\n", "\n", "if", "use_hq_ims", ":", "\n", "            ", "subdir", "=", "\"img_align_celeba_hq\"", "\n", "", "else", ":", "\n", "            ", "subdir", "=", "\"img_align_celeba\"", "\n", "", "self", ".", "subdir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'Img'", ",", "subdir", ")", "\n", "\n", "anno", "=", "pd", ".", "read_csv", "(", "\n", "os", ".", "path", ".", "join", "(", "root", ",", "'Anno'", ",", "'list_landmarks_align_celeba.txt'", ")", ",", "header", "=", "1", ",", "\n", "delim_whitespace", "=", "True", ")", "\n", "assert", "len", "(", "anno", ".", "index", ")", "==", "202599", "\n", "split", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'Eval'", ",", "'list_eval_partition.txt'", ")", ",", "\n", "header", "=", "None", ",", "delim_whitespace", "=", "True", ",", "index_col", "=", "0", ")", "\n", "assert", "len", "(", "split", ".", "index", ")", "==", "202599", "\n", "\n", "mafltrain", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'MAFL'", ",", "'training.txt'", ")", ",", "header", "=", "None", ",", "\n", "delim_whitespace", "=", "True", ",", "index_col", "=", "0", ")", "\n", "mafltest", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'MAFL'", ",", "'testing.txt'", ")", ",", "header", "=", "None", ",", "\n", "delim_whitespace", "=", "True", ",", "index_col", "=", "0", ")", "\n", "# Ensure that we are not using mafl images", "\n", "split", ".", "loc", "[", "mafltrain", ".", "index", "]", "=", "3", "\n", "split", ".", "loc", "[", "mafltest", ".", "index", "]", "=", "4", "\n", "\n", "assert", "(", "split", "[", "1", "]", "==", "4", ")", ".", "sum", "(", ")", "==", "1000", "\n", "\n", "if", "train", ":", "\n", "            ", "self", ".", "data", "=", "anno", ".", "loc", "[", "split", "[", "split", "[", "1", "]", "==", "0", "]", ".", "index", "]", "\n", "", "elif", "val_split", "==", "\"celeba\"", ":", "\n", "# subsample images from CelebA val, otherwise training gets slow", "\n", "            ", "self", ".", "data", "=", "anno", ".", "loc", "[", "split", "[", "split", "[", "1", "]", "==", "2", "]", ".", "index", "]", "[", ":", "val_size", "]", "\n", "", "elif", "val_split", "==", "\"mafl\"", ":", "\n", "            ", "self", ".", "data", "=", "anno", ".", "loc", "[", "split", "[", "split", "[", "1", "]", "==", "4", "]", ".", "index", "]", "\n", "\n", "# lefteye_x lefteye_y ; righteye_x righteye_y ; nose_x nose_y ;", "\n", "# leftmouth_x leftmouth_y ; rightmouth_x rightmouth_y", "\n", "", "self", ".", "keypoints", "=", "np", ".", "array", "(", "self", ".", "data", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "-", "1", ",", "5", ",", "2", ")", "\n", "self", ".", "filenames", "=", "list", "(", "self", ".", "data", ".", "index", ")", "\n", "\n", "# Move head up a bit", "\n", "initial_crop", "=", "lambda", "im", ":", "transforms", ".", "functional", ".", "crop", "(", "im", ",", "30", ",", "0", ",", "178", ",", "178", ")", "\n", "self", ".", "keypoints", "[", ":", ",", ":", ",", "1", "]", "-=", "30", "\n", "self", ".", "keypoints", "*=", "self", ".", "imwidth", "/", "178.", "\n", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.5084", ",", "0.4224", ",", "0.3769", "]", ",", "\n", "std", "=", "[", "0.2599", ",", "0.2371", ",", "0.2323", "]", ")", "\n", "augmentations", "=", "[", "\n", "JPEGNoise", "(", ")", ",", "\n", "transforms", ".", "transforms", ".", "ColorJitter", "(", ".4", ",", ".4", ",", ".4", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "PcaAug", "(", ")", "\n", "]", "if", "(", "train", "and", "do_augmentations", ")", "else", "[", "transforms", ".", "ToTensor", "(", ")", "]", "\n", "\n", "self", ".", "initial_transforms", "=", "transforms", ".", "Compose", "(", "\n", "[", "initial_crop", ",", "transforms", ".", "Resize", "(", "self", ".", "imwidth", ")", "]", ")", "\n", "self", ".", "transforms", "=", "transforms", ".", "Compose", "(", "augmentations", "+", "[", "normalize", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.data_loaders.CelebAPrunedAligned_MAFLVal.__len__": [[654, 656], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ".", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.data_loaders.MAFLAligned.__init__": [[661, 720], ["os.path.join", "os.path.join", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "numpy.array().reshape", "list", "dict", "torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "len", "os.path.join", "len", "os.path.join", "os.path.join", "torchvision.transforms.functional.crop", "numpy.array", "data_loaders.JPEGNoise", "torchvision.transforms.transforms.ColorJitter", "torchvision.transforms.ToTensor", "data_loaders.PcaAug", "torchvision.transforms.ToTensor", "torchvision.transforms.Resize"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "root", ",", "train", "=", "True", ",", "pair_warper", "=", "None", ",", "imwidth", "=", "100", ",", "crop", "=", "18", ",", "\n", "do_augmentations", "=", "True", ",", "use_keypoints", "=", "False", ",", "use_hq_ims", "=", "True", ",", "\n", "use_ims", "=", "True", ",", "visualize", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "imwidth", "=", "imwidth", "\n", "self", ".", "use_hq_ims", "=", "use_hq_ims", "\n", "self", ".", "use_ims", "=", "use_ims", "\n", "self", ".", "visualize", "=", "visualize", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "warper", "=", "pair_warper", "\n", "self", ".", "crop", "=", "crop", "\n", "self", ".", "use_keypoints", "=", "use_keypoints", "\n", "subdir", "=", "\"img_align_celeba_hq\"", "if", "use_hq_ims", "else", "\"img_align_celeba\"", "\n", "self", ".", "subdir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'Img'", ",", "subdir", ")", "\n", "annos_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'Anno'", ",", "'list_landmarks_align_celeba.txt'", ")", "\n", "anno", "=", "pd", ".", "read_csv", "(", "annos_path", ",", "header", "=", "1", ",", "delim_whitespace", "=", "True", ")", "\n", "\n", "assert", "len", "(", "anno", ".", "index", ")", "==", "202599", "\n", "split", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'Eval'", ",", "'list_eval_partition.txt'", ")", ",", "\n", "header", "=", "None", ",", "delim_whitespace", "=", "True", ",", "index_col", "=", "0", ")", "\n", "assert", "len", "(", "split", ".", "index", ")", "==", "202599", "\n", "mafltest", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'MAFL'", ",", "'testing.txt'", ")", ",", "header", "=", "None", ",", "\n", "delim_whitespace", "=", "True", ",", "index_col", "=", "0", ")", "\n", "split", ".", "loc", "[", "mafltest", ".", "index", "]", "=", "4", "\n", "mafltrain", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'MAFL'", ",", "'training.txt'", ")", ",", "header", "=", "None", ",", "\n", "delim_whitespace", "=", "True", ",", "index_col", "=", "0", ")", "\n", "split", ".", "loc", "[", "mafltrain", ".", "index", "]", "=", "5", "\n", "assert", "(", "split", "[", "1", "]", "==", "4", ")", ".", "sum", "(", ")", "==", "1000", "\n", "assert", "(", "split", "[", "1", "]", "==", "5", ")", ".", "sum", "(", ")", "==", "19000", "\n", "\n", "if", "train", ":", "\n", "            ", "self", ".", "data", "=", "anno", ".", "loc", "[", "split", "[", "split", "[", "1", "]", "==", "5", "]", ".", "index", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "data", "=", "anno", ".", "loc", "[", "split", "[", "split", "[", "1", "]", "==", "4", "]", ".", "index", "]", "\n", "\n", "# keypoint ordering", "\n", "# lefteye_x lefteye_y ; righteye_x righteye_y ; nose_x nose_y ;", "\n", "# leftmouth_x leftmouth_y ; rightmouth_x rightmouth_y", "\n", "", "self", ".", "keypoints", "=", "np", ".", "array", "(", "self", ".", "data", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "-", "1", ",", "5", ",", "2", ")", "\n", "self", ".", "filenames", "=", "list", "(", "self", ".", "data", ".", "index", ")", "\n", "\n", "# Move head up a bit", "\n", "vertical_shift", "=", "30", "\n", "crop_params", "=", "dict", "(", "i", "=", "vertical_shift", ",", "j", "=", "0", ",", "h", "=", "178", ",", "w", "=", "178", ")", "\n", "initial_crop", "=", "lambda", "im", ":", "transforms", ".", "functional", ".", "crop", "(", "im", ",", "**", "crop_params", ")", "\n", "self", ".", "keypoints", "[", ":", ",", ":", ",", "1", "]", "-=", "vertical_shift", "\n", "self", ".", "keypoints", "*=", "self", ".", "imwidth", "/", "178.", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.5084", ",", "0.4224", ",", "0.3769", "]", ",", "\n", "std", "=", "[", "0.2599", ",", "0.2371", ",", "0.2323", "]", ")", "\n", "augmentations", "=", "[", "\n", "JPEGNoise", "(", ")", ",", "\n", "transforms", ".", "transforms", ".", "ColorJitter", "(", ".4", ",", ".4", ",", ".4", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "PcaAug", "(", ")", "\n", "]", "if", "(", "train", "and", "do_augmentations", ")", "else", "[", "transforms", ".", "ToTensor", "(", ")", "]", "\n", "\n", "self", ".", "initial_transforms", "=", "transforms", ".", "Compose", "(", "\n", "[", "initial_crop", ",", "transforms", ".", "Resize", "(", "self", ".", "imwidth", ")", "]", ")", "\n", "self", ".", "transforms", "=", "transforms", ".", "Compose", "(", "augmentations", "+", "[", "normalize", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.data_loaders.AFLW_MTFL.__init__": [[732, 800], ["os.path.join", "os.path.join", "pandas.read_csv", "torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "os.path.join", "pandas.read_csv", "pandas.read_csv.image_file.to_list", "all_anno[].image_file.to_list", "all_anno[].crop_file.to_list", "numpy.array().reshape", "numpy.array", "numpy.array.reshape().transpose", "test_anno[].to_list", "os.path.join", "len", "len", "data_loaders.JPEGNoise", "torchvision.transforms.transforms.ColorJitter", "torchvision.transforms.ToTensor", "data_loaders.PcaAug", "torchvision.transforms.ToTensor", "torchvision.transforms.Resize", "t.split", "pandas.read_csv.loc[].to_list", "numpy.array", "numpy.array.reshape"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "root", ",", "train", "=", "True", ",", "pair_warper", "=", "None", ",", "imwidth", "=", "70", ",", "use_ims", "=", "True", ",", "\n", "crop", "=", "0", ",", "do_augmentations", "=", "True", ",", "use_keypoints", "=", "False", ",", "visualize", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "# MTFL from http://mmlab.ie.cuhk.edu.hk/projects/TCDCN/data/MTFL.zip", "\n", "        ", "self", ".", "test_root", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'MTFL'", ")", "\n", "# AFLW cropped from www.robots.ox.ac.uk/~jdt/aflw_10122train_cropped.zip", "\n", "self", ".", "train_root", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'aflw_cropped'", ")", "\n", "\n", "self", ".", "imwidth", "=", "imwidth", "\n", "self", ".", "use_ims", "=", "use_ims", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "warper", "=", "pair_warper", "\n", "self", ".", "crop", "=", "crop", "\n", "self", ".", "use_keypoints", "=", "use_keypoints", "\n", "self", ".", "visualize", "=", "visualize", "\n", "initial_crop", "=", "lambda", "im", ":", "im", "\n", "\n", "test_anno", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "self", ".", "test_root", ",", "'testing.txt'", ")", ",", "\n", "header", "=", "None", ",", "delim_whitespace", "=", "True", ")", "\n", "\n", "if", "train", ":", "\n", "            ", "self", ".", "root", "=", "self", ".", "train_root", "\n", "all_anno", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "self", ".", "train_root", ",", "'facedata_cropped.csv'", ")", ",", "\n", "sep", "=", "','", ",", "header", "=", "0", ")", "\n", "allims", "=", "all_anno", ".", "image_file", ".", "to_list", "(", ")", "\n", "trainims", "=", "all_anno", "[", "all_anno", ".", "set", "==", "1", "]", ".", "image_file", ".", "to_list", "(", ")", "\n", "testims", "=", "[", "t", ".", "split", "(", "'-'", ")", "[", "-", "1", "]", "for", "t", "in", "test_anno", ".", "loc", "[", ":", ",", "0", "]", ".", "to_list", "(", ")", "]", "\n", "\n", "for", "x", "in", "trainims", ":", "\n", "                ", "assert", "x", "not", "in", "testims", "\n", "\n", "", "for", "x", "in", "testims", ":", "\n", "                ", "assert", "x", "in", "allims", "\n", "\n", "", "self", ".", "filenames", "=", "all_anno", "[", "all_anno", ".", "set", "==", "1", "]", ".", "crop_file", ".", "to_list", "(", ")", "\n", "self", ".", "keypoints", "=", "np", ".", "array", "(", "all_anno", "[", "all_anno", ".", "set", "==", "1", "]", ".", "iloc", "[", ":", ",", "4", ":", "14", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "-", "1", ",", "5", ",", "2", ")", "\n", "\n", "self", ".", "keypoints", "-=", "1", "# matlab to python", "\n", "self", ".", "keypoints", "*=", "self", ".", "imwidth", "/", "150.", "\n", "\n", "assert", "len", "(", "self", ".", "filenames", ")", "==", "10122", "\n", "", "else", ":", "\n", "            ", "self", ".", "root", "=", "self", ".", "test_root", "\n", "keypoints", "=", "np", ".", "array", "(", "test_anno", ".", "iloc", "[", ":", ",", "1", ":", "11", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "keypoints", "=", "keypoints", ".", "reshape", "(", "-", "1", ",", "2", ",", "5", ")", ".", "transpose", "(", "0", ",", "2", ",", "1", ")", "\n", "self", ".", "filenames", "=", "test_anno", "[", "0", "]", ".", "to_list", "(", ")", "\n", "\n", "self", ".", "keypoints", "-=", "1", "# matlab to python", "\n", "self", ".", "keypoints", "*=", "self", ".", "imwidth", "/", "150.", "\n", "\n", "assert", "len", "(", "self", ".", "filenames", ")", "==", "2995", "\n", "", "self", ".", "subdir", "=", "self", ".", "root", "\n", "\n", "# print(\"HARDCODING DEBGGER\")", "\n", "# self.filenames = self.filenames[:100]", "\n", "# self.keypoints = self.keypoints[:100]", "\n", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.5084", ",", "0.4224", ",", "0.3769", "]", ",", "\n", "std", "=", "[", "0.2599", ",", "0.2371", ",", "0.2323", "]", ")", "\n", "augmentations", "=", "[", "\n", "JPEGNoise", "(", ")", ",", "\n", "transforms", ".", "transforms", ".", "ColorJitter", "(", ".4", ",", ".4", ",", ".4", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "PcaAug", "(", ")", "\n", "]", "if", "(", "train", "and", "do_augmentations", ")", "else", "[", "transforms", ".", "ToTensor", "(", ")", "]", "\n", "self", ".", "initial_transforms", "=", "transforms", ".", "Compose", "(", "\n", "[", "initial_crop", ",", "transforms", ".", "Resize", "(", "self", ".", "imwidth", ")", "]", ")", "\n", "self", ".", "transforms", "=", "transforms", ".", "Compose", "(", "augmentations", "+", "[", "normalize", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.data_loaders.ThreeHundredW.__init__": [[816, 877], ["scipy.io.loadmat", "scipy.io.loadmat", "scipy.io.loadmat", "scipy.io.loadmat", "scipy.io.loadmat", "scipy.io.loadmat", "torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "enumerate", "len", "len", "data_loaders.JPEGNoise", "torchvision.transforms.transforms.ColorJitter", "torchvision.transforms.ToTensor", "data_loaders.PcaAug", "torchvision.transforms.ToTensor", "torchvision.transforms.Resize", "range", "range", "imn.startswith", "data_loaders.ThreeHundredW.filenames.append", "data_loaders.ThreeHundredW.bounding_boxes.append", "os.path.join", "numpy.array().astype().reshape", "data_loaders.ThreeHundredW.keypoints.append", "os.path.join", "open", "kpf.read", "kpf.read.split", "float", "len", "numpy.array().astype", "numpy.array"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "root", ",", "train", "=", "True", ",", "pair_warper", "=", "None", ",", "imwidth", "=", "100", ",", "use_ims", "=", "True", ",", "\n", "crop", "=", "15", ",", "do_augmentations", "=", "True", ",", "use_keypoints", "=", "False", ",", "visualize", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "from", "scipy", ".", "io", "import", "loadmat", "\n", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "imwidth", "=", "imwidth", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "warper", "=", "pair_warper", "\n", "self", ".", "crop", "=", "crop", "\n", "self", ".", "use_ims", "=", "use_ims", "\n", "self", ".", "use_keypoints", "=", "use_keypoints", "\n", "self", ".", "visualize", "=", "visualize", "\n", "\n", "afw", "=", "loadmat", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'Bounding Boxes/bounding_boxes_afw.mat'", ")", ")", "\n", "helentr", "=", "loadmat", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'Bounding Boxes/bounding_boxes_helen_trainset.mat'", ")", ")", "\n", "helente", "=", "loadmat", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'Bounding Boxes/bounding_boxes_helen_testset.mat'", ")", ")", "\n", "lfpwtr", "=", "loadmat", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'Bounding Boxes/bounding_boxes_lfpw_trainset.mat'", ")", ")", "\n", "lfpwte", "=", "loadmat", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'Bounding Boxes/bounding_boxes_lfpw_testset.mat'", ")", ")", "\n", "ibug", "=", "loadmat", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'Bounding Boxes/bounding_boxes_ibug.mat'", ")", ")", "\n", "\n", "self", ".", "filenames", "=", "[", "]", "\n", "self", ".", "bounding_boxes", "=", "[", "]", "\n", "self", ".", "keypoints", "=", "[", "]", "\n", "\n", "if", "train", ":", "\n", "            ", "datasets", "=", "[", "(", "afw", ",", "'afw'", ")", ",", "(", "helentr", ",", "'helen/trainset'", ")", ",", "(", "lfpwtr", ",", "'lfpw/trainset'", ")", "]", "\n", "", "else", ":", "\n", "            ", "datasets", "=", "[", "(", "helente", ",", "'helen/testset'", ")", ",", "(", "lfpwte", ",", "'lfpw/testset'", ")", ",", "(", "ibug", ",", "'ibug'", ")", "]", "\n", "\n", "", "for", "dset", "in", "datasets", ":", "\n", "            ", "ds", "=", "dset", "[", "0", "]", "\n", "ds_imroot", "=", "dset", "[", "1", "]", "\n", "imnames", "=", "[", "ds", "[", "'bounding_boxes'", "]", "[", "0", ",", "i", "]", "[", "'imgName'", "]", "[", "0", ",", "0", "]", "[", "0", "]", "for", "i", "in", "range", "(", "ds", "[", "'bounding_boxes'", "]", ".", "shape", "[", "1", "]", ")", "]", "\n", "bbs", "=", "[", "ds", "[", "'bounding_boxes'", "]", "[", "0", ",", "i", "]", "[", "'bb_ground_truth'", "]", "[", "0", ",", "0", "]", "[", "0", "]", "for", "i", "in", "range", "(", "ds", "[", "'bounding_boxes'", "]", ".", "shape", "[", "1", "]", ")", "]", "\n", "\n", "for", "i", ",", "imn", "in", "enumerate", "(", "imnames", ")", ":", "\n", "# only some of the images given in ibug boxes exist (those that start with 'image')", "\n", "                ", "if", "ds", "is", "not", "ibug", "or", "imn", ".", "startswith", "(", "'image'", ")", ":", "\n", "                    ", "self", ".", "filenames", ".", "append", "(", "os", ".", "path", ".", "join", "(", "ds_imroot", ",", "imn", ")", ")", "\n", "self", ".", "bounding_boxes", ".", "append", "(", "bbs", "[", "i", "]", ")", "\n", "\n", "kpfile", "=", "os", ".", "path", ".", "join", "(", "root", ",", "ds_imroot", ",", "imn", "[", ":", "-", "3", "]", "+", "'pts'", ")", "\n", "with", "open", "(", "kpfile", ")", "as", "kpf", ":", "\n", "                        ", "kp", "=", "kpf", ".", "read", "(", ")", "\n", "", "kp", "=", "kp", ".", "split", "(", ")", "[", "5", ":", "-", "1", "]", "\n", "kp", "=", "[", "float", "(", "k", ")", "for", "k", "in", "kp", "]", "\n", "assert", "len", "(", "kp", ")", "==", "68", "*", "2", "\n", "kp", "=", "np", ".", "array", "(", "kp", ")", ".", "astype", "(", "np", ".", "float32", ")", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "self", ".", "keypoints", ".", "append", "(", "kp", ")", "\n", "\n", "", "", "", "if", "train", ":", "\n", "            ", "assert", "len", "(", "self", ".", "filenames", ")", "==", "3148", "\n", "", "else", ":", "\n", "            ", "assert", "len", "(", "self", ".", "filenames", ")", "==", "689", "\n", "\n", "", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.5084", ",", "0.4224", ",", "0.3769", "]", ",", "std", "=", "[", "0.2599", ",", "0.2371", ",", "0.2323", "]", ")", "\n", "augmentations", "=", "[", "JPEGNoise", "(", ")", ",", "transforms", ".", "transforms", ".", "ColorJitter", "(", ".4", ",", ".4", ",", ".4", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "PcaAug", "(", ")", "]", "if", "(", "train", "and", "do_augmentations", ")", "else", "[", "transforms", ".", "ToTensor", "(", ")", "]", "\n", "\n", "self", ".", "initial_transforms", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "self", ".", "imwidth", ")", "]", ")", "\n", "self", ".", "transforms", "=", "transforms", ".", "Compose", "(", "augmentations", "+", "[", "normalize", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.data_loaders.ThreeHundredW.__len__": [[882, 884], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "filenames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.data_loaders.ThreeHundredW.__getitem__": [[885, 1011], ["int", "int", "int", "int", "int", "int", "PIL.Image.open().convert", "PIL.Image.fromarray.resize", "numpy.floor", "numpy.floor", "utils.util.pad_and_crop", "PIL.Image.fromarray", "keypts.copy", "torch.tensor", "matplotlib.figure", "matplotlib.figure", "range", "ipdb.set_trace", "numpy.array", "data_loaders.ThreeHundredW.initial_transforms", "data_loaders.ThreeHundredW.warper", "data_loaders.ThreeHundredW.to", "data_loaders.ThreeHundredW.to", "torchvision.to_pil_image", "torchvision.to_pil_image", "data_loaders.ThreeHundredW.transforms", "data_loaders.ThreeHundredW.transforms", "torch.stack", "data_loaders.ThreeHundredW.initial_transforms", "data_loaders.ThreeHundredW.warper", "data_loaders.ThreeHundredW.to", "torchvision.to_pil_image", "data_loaders.ThreeHundredW.transforms", "data_loaders.ThreeHundredW.transforms", "torch.zeros", "torch.tensor", "matplotlib.figure.add_subplot", "plt.figure.add_subplot.imshow", "PIL.Image.open", "int", "int", "PIL.Image.fromarray.convert", "torchvision.to_tensor", "PIL.Image.fromarray.convert", "torchvision.to_tensor", "data_loaders.ThreeHundredW.initial_transforms", "data_loaders.kp_normalize", "norm_range().permute().cpu().numpy", "plt.figure.add_subplot.scatter", "os.path.join", "data_loaders.kp_normalize", "PIL.Image.fromarray.convert", "[].numpy", "[].numpy", "kp[].numpy", "kp[].numpy", "norm_range().permute().cpu", "norm_range().permute", "norm_range"], "methods", ["home.repos.pwc.inspect_result.jamt9000_DVE.utils.util.pad_and_crop", "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.data_loaders.kp_normalize", "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.data_loaders.kp_normalize", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.visualization.norm_range"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "use_ims", ":", "\n", "            ", "im", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "filenames", "[", "index", "]", ")", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "# Crop bounding box", "\n", "", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "=", "self", ".", "bounding_boxes", "[", "index", "]", "\n", "keypts", "=", "self", ".", "keypoints", "[", "index", "]", "\n", "\n", "# This is basically copied from matlab code and assumes matlab indexing", "\n", "bw", "=", "xmax", "-", "xmin", "+", "1", "\n", "bh", "=", "ymax", "-", "ymin", "+", "1", "\n", "bcy", "=", "ymin", "+", "(", "bh", "+", "1", ")", "/", "2", "\n", "bcx", "=", "xmin", "+", "(", "bw", "+", "1", ")", "/", "2", "\n", "\n", "# To simplify the preprocessing, we do two image resizes (can fix later if speed", "\n", "#\u00a0is an issue)", "\n", "preresize_sz", "=", "100", "\n", "\n", "bw_", "=", "52", "# make the (tightly cropped) face 52px", "\n", "fac", "=", "bw_", "/", "bw", "\n", "if", "self", ".", "use_ims", ":", "\n", "            ", "imr", "=", "im", ".", "resize", "(", "(", "int", "(", "im", ".", "width", "*", "fac", ")", ",", "int", "(", "im", ".", "height", "*", "fac", ")", ")", ")", "\n", "\n", "", "bcx_", "=", "int", "(", "np", ".", "floor", "(", "fac", "*", "bcx", ")", ")", "\n", "bcy_", "=", "int", "(", "np", ".", "floor", "(", "fac", "*", "bcy", ")", ")", "\n", "bx", "=", "bcx_", "-", "bw_", "/", "2", "+", "1", "\n", "bX", "=", "bcx_", "+", "bw_", "/", "2", "\n", "by", "=", "bcy_", "-", "bw_", "/", "2", "+", "1", "\n", "bY", "=", "bcy_", "+", "bw_", "/", "2", "\n", "pp", "=", "(", "preresize_sz", "-", "bw_", ")", "/", "2", "\n", "bx", "=", "int", "(", "bx", "-", "pp", ")", "\n", "bX", "=", "int", "(", "bX", "+", "pp", ")", "\n", "by", "=", "int", "(", "by", "-", "pp", "-", "2", ")", "\n", "bY", "=", "int", "(", "bY", "+", "pp", "-", "2", ")", "\n", "\n", "if", "self", ".", "use_ims", ":", "\n", "            ", "imr", "=", "pad_and_crop", "(", "np", ".", "array", "(", "imr", ")", ",", "[", "(", "by", "-", "1", ")", ",", "bY", ",", "(", "bx", "-", "1", ")", ",", "bX", "]", ")", "\n", "im", "=", "Image", ".", "fromarray", "(", "imr", ")", "\n", "\n", "", "cutl", "=", "bx", "-", "1", "\n", "keypts", "=", "keypts", ".", "copy", "(", ")", "*", "fac", "\n", "keypts", "[", ":", ",", "0", "]", "=", "keypts", "[", ":", ",", "0", "]", "-", "cutl", "\n", "cutt", "=", "by", "-", "1", "\n", "keypts", "[", ":", ",", "1", "]", "=", "keypts", "[", ":", ",", "1", "]", "-", "cutt", "\n", "\n", "kp", "=", "None", "\n", "if", "self", ".", "use_keypoints", ":", "\n", "            ", "kp", "=", "keypts", "-", "1", "# from matlab to python style", "\n", "kp", "=", "kp", "*", "self", ".", "imwidth", "/", "preresize_sz", "\n", "kp", "=", "torch", ".", "tensor", "(", "kp", ")", "\n", "", "meta", "=", "{", "}", "\n", "\n", "if", "self", ".", "warper", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "warper", ".", "returns_pairs", ":", "\n", "                ", "im1", "=", "self", ".", "initial_transforms", "(", "im", ".", "convert", "(", "\"RGB\"", ")", ")", "\n", "im1", "=", "TF", ".", "to_tensor", "(", "im1", ")", "*", "255", "\n", "\n", "im1", ",", "im2", ",", "flow", ",", "grid", ",", "kp1", ",", "kp2", "=", "self", ".", "warper", "(", "im1", ",", "keypts", "=", "kp", ",", "crop", "=", "self", ".", "crop", ")", "\n", "\n", "im1", "=", "im1", ".", "to", "(", "torch", ".", "uint8", ")", "\n", "im2", "=", "im2", ".", "to", "(", "torch", ".", "uint8", ")", "\n", "\n", "C", ",", "H", ",", "W", "=", "im1", ".", "shape", "\n", "\n", "im1", "=", "TF", ".", "to_pil_image", "(", "im1", ")", "\n", "im2", "=", "TF", ".", "to_pil_image", "(", "im2", ")", "\n", "\n", "im1", "=", "self", ".", "transforms", "(", "im1", ")", "\n", "im2", "=", "self", ".", "transforms", "(", "im2", ")", "\n", "\n", "C", ",", "H", ",", "W", "=", "im1", ".", "shape", "\n", "data", "=", "torch", ".", "stack", "(", "(", "im1", ",", "im2", ")", ",", "0", ")", "\n", "meta", "=", "{", "'flow'", ":", "flow", "[", "0", "]", ",", "'grid'", ":", "grid", "[", "0", "]", ",", "'im1'", ":", "im1", ",", "'im2'", ":", "im2", ",", "'index'", ":", "index", "}", "\n", "if", "self", ".", "use_keypoints", ":", "\n", "                    ", "meta", "=", "{", "**", "meta", ",", "**", "{", "'kp1'", ":", "kp1", ",", "'kp2'", ":", "kp2", "}", "}", "\n", "", "", "else", ":", "\n", "                ", "im1", "=", "self", ".", "initial_transforms", "(", "im", ".", "convert", "(", "\"RGB\"", ")", ")", "\n", "im1", "=", "TF", ".", "to_tensor", "(", "im1", ")", "*", "255", "\n", "\n", "im1", ",", "kp", "=", "self", ".", "warper", "(", "im1", ",", "keypts", "=", "kp", ",", "crop", "=", "self", ".", "crop", ")", "\n", "\n", "im1", "=", "im1", ".", "to", "(", "torch", ".", "uint8", ")", "\n", "im1", "=", "TF", ".", "to_pil_image", "(", "im1", ")", "\n", "im1", "=", "self", ".", "transforms", "(", "im1", ")", "\n", "\n", "C", ",", "H", ",", "W", "=", "im1", ".", "shape", "\n", "data", "=", "im1", "\n", "if", "self", ".", "use_keypoints", ":", "\n", "                    ", "meta", "=", "{", "'keypts'", ":", "kp", ",", "'keypts_normalized'", ":", "kp_normalize", "(", "H", ",", "W", ",", "kp", ")", ",", "'index'", ":", "index", "}", "\n", "\n", "", "", "", "else", ":", "\n", "            ", "if", "self", ".", "use_ims", ":", "\n", "                ", "data", "=", "self", ".", "transforms", "(", "self", ".", "initial_transforms", "(", "im", ".", "convert", "(", "\"RGB\"", ")", ")", ")", "\n", "if", "self", ".", "crop", "!=", "0", ":", "\n", "                    ", "data", "=", "data", "[", ":", ",", "self", ".", "crop", ":", "-", "self", ".", "crop", ",", "self", ".", "crop", ":", "-", "self", ".", "crop", "]", "\n", "", "C", ",", "H", ",", "W", "=", "data", ".", "shape", "\n", "", "else", ":", "\n", "# after caching descriptors, there is no point doing I/O", "\n", "                ", "H", "=", "W", "=", "self", ".", "imwidth", "-", "2", "*", "self", ".", "crop", "\n", "data", "=", "torch", ".", "zeros", "(", "3", ",", "1", ",", "1", ")", "\n", "\n", "", "if", "kp", "is", "not", "None", ":", "\n", "                ", "kp", "=", "kp", "-", "self", ".", "crop", "\n", "kp", "=", "torch", ".", "tensor", "(", "kp", ")", "\n", "\n", "", "if", "self", ".", "use_keypoints", ":", "\n", "                ", "meta", "=", "{", "'keypts'", ":", "kp", ",", "'keypts_normalized'", ":", "kp_normalize", "(", "H", ",", "W", ",", "kp", ")", ",", "'index'", ":", "index", "}", "\n", "\n", "", "", "if", "self", ".", "visualize", ":", "\n", "            ", "from", "utils", ".", "visualization", "import", "norm_range", "\n", "num_show", "=", "2", "if", "self", ".", "warper", "and", "self", ".", "warper", ".", "returns_pairs", "else", "1", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "for", "ii", "in", "range", "(", "num_show", ")", ":", "\n", "                ", "im_", "=", "data", "[", "ii", "]", "if", "num_show", ">", "1", "else", "data", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "1", ",", "num_show", ",", "ii", "+", "1", ")", "\n", "ax", ".", "imshow", "(", "norm_range", "(", "im_", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "if", "self", ".", "use_keypoints", ":", "\n", "                    ", "if", "num_show", "==", "2", ":", "\n", "                        ", "kp_x", "=", "meta", "[", "\"kp{}\"", ".", "format", "(", "ii", "+", "1", ")", "]", "[", ":", ",", "0", "]", ".", "numpy", "(", ")", "\n", "kp_y", "=", "meta", "[", "\"kp{}\"", ".", "format", "(", "ii", "+", "1", ")", "]", "[", ":", ",", "1", "]", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                        ", "kp_x", "=", "kp", "[", ":", ",", "0", "]", ".", "numpy", "(", ")", "\n", "kp_y", "=", "kp", "[", ":", ",", "1", "]", ".", "numpy", "(", ")", "\n", "", "ax", ".", "scatter", "(", "kp_x", ",", "kp_y", ")", "\n", "", "", "import", "ipdb", ";", "ipdb", ".", "set_trace", "(", ")", "\n", "\n", "", "return", "{", "\"data\"", ":", "data", ",", "\"meta\"", ":", "meta", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.data_loaders.kp_normalize": [[82, 87], ["kp.clone.clone"], "function", ["None"], ["", "", "def", "kp_normalize", "(", "H", ",", "W", ",", "kp", ")", ":", "\n", "    ", "kp", "=", "kp", ".", "clone", "(", ")", "\n", "kp", "[", "...", ",", "0", "]", "=", "2.", "*", "kp", "[", "...", ",", "0", "]", "/", "(", "W", "-", "1", ")", "-", "1", "\n", "kp", "[", "...", ",", "1", "]", "=", "2.", "*", "kp", "[", "...", ",", "1", "]", "/", "(", "H", "-", "1", ")", "-", "1", "\n", "return", "kp", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.augmentations.Compose.__init__": [[13, 16], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "augmentations", ")", ":", "\n", "        ", "self", ".", "augmentations", "=", "augmentations", "\n", "self", ".", "PIL2Numpy", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.augmentations.Compose.__call__": [[17, 31], ["isinstance", "PIL.Image.fromarray", "PIL.Image.fromarray", "a", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "if", "isinstance", "(", "img", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "img", "=", "Image", ".", "fromarray", "(", "img", ",", "mode", "=", "\"RGB\"", ")", "\n", "mask", "=", "Image", ".", "fromarray", "(", "mask", ",", "mode", "=", "\"L\"", ")", "\n", "self", ".", "PIL2Numpy", "=", "True", "\n", "\n", "", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "for", "a", "in", "self", ".", "augmentations", ":", "\n", "            ", "img", ",", "mask", "=", "a", "(", "img", ",", "mask", ")", "\n", "\n", "", "if", "self", ".", "PIL2Numpy", ":", "\n", "            ", "img", ",", "mask", "=", "np", ".", "array", "(", "img", ")", ",", "np", ".", "array", "(", "mask", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.augmentations.RandomCrop.__init__": [[34, 40], ["isinstance", "int", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "padding", "=", "0", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "", "self", ".", "padding", "=", "padding", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.augmentations.RandomCrop.__call__": [[41, 72], ["random.randint", "random.randint", "PIL.ImageOps.expand", "PIL.ImageOps.expand", "PIL.ImageOps.expand.crop", "PIL.ImageOps.expand.crop", "PIL.ImageOps.expand.resize", "PIL.ImageOps.expand.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "if", "self", ".", "padding", ">", "0", ":", "\n", "            ", "img", "=", "ImageOps", ".", "expand", "(", "img", ",", "border", "=", "self", ".", "padding", ",", "fill", "=", "0", ")", "\n", "mask", "=", "ImageOps", ".", "expand", "(", "mask", ",", "border", "=", "self", ".", "padding", ",", "fill", "=", "0", ")", "\n", "\n", "", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "if", "w", "==", "tw", "and", "h", "==", "th", ":", "\n", "            ", "return", "img", ",", "mask", "\n", "", "if", "w", "<", "tw", "or", "h", "<", "th", ":", "\n", "            ", "return", "(", "\n", "img", ".", "resize", "(", "(", "tw", ",", "\n", "th", ")", ",", "\n", "Image", ".", "BILINEAR", ")", ",", "\n", "mask", ".", "resize", "(", "(", "tw", ",", "\n", "th", ")", ",", "\n", "Image", ".", "NEAREST", ")", "\n", ")", "\n", "\n", "", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "tw", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "th", ")", "\n", "return", "(", "\n", "img", ".", "crop", "(", "(", "x1", ",", "\n", "y1", ",", "\n", "x1", "+", "tw", ",", "\n", "y1", "+", "th", ")", ")", ",", "\n", "mask", ".", "crop", "(", "(", "x1", ",", "\n", "y1", ",", "\n", "x1", "+", "tw", ",", "\n", "y1", "+", "th", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.augmentations.AdjustGamma.__init__": [[76, 78], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "gamma", ")", ":", "\n", "        ", "self", ".", "gamma", "=", "gamma", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.augmentations.AdjustGamma.__call__": [[79, 82], ["torchvision.adjust_gamma", "random.uniform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "return", "tf", ".", "adjust_gamma", "(", "img", ",", "random", ".", "uniform", "(", "1", ",", "1", "+", "self", ".", "gamma", ")", ")", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.augmentations.AdjustSaturation.__init__": [[85, 87], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "saturation", ")", ":", "\n", "        ", "self", ".", "saturation", "=", "saturation", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.augmentations.AdjustSaturation.__call__": [[88, 97], ["torchvision.adjust_saturation", "random.uniform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "return", "(", "\n", "tf", ".", "adjust_saturation", "(", "\n", "img", ",", "\n", "random", ".", "uniform", "(", "1", "-", "self", ".", "saturation", ",", "\n", "1", "+", "self", ".", "saturation", ")", "\n", ")", ",", "\n", "mask", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.augmentations.AdjustHue.__init__": [[101, 103], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "hue", ")", ":", "\n", "        ", "self", ".", "hue", "=", "hue", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.augmentations.AdjustHue.__call__": [[104, 107], ["torchvision.adjust_hue", "random.uniform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "return", "tf", ".", "adjust_hue", "(", "img", ",", "random", ".", "uniform", "(", "-", "self", ".", "hue", ",", "self", ".", "hue", ")", ")", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.augmentations.AdjustBrightness.__init__": [[110, 112], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "bf", ")", ":", "\n", "        ", "self", ".", "bf", "=", "bf", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.augmentations.AdjustBrightness.__call__": [[113, 116], ["torchvision.adjust_brightness", "random.uniform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "return", "tf", ".", "adjust_brightness", "(", "img", ",", "random", ".", "uniform", "(", "1", "-", "self", ".", "bf", ",", "1", "+", "self", ".", "bf", ")", ")", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.augmentations.AdjustContrast.__init__": [[119, 121], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cf", ")", ":", "\n", "        ", "self", ".", "cf", "=", "cf", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.augmentations.AdjustContrast.__call__": [[122, 125], ["torchvision.adjust_contrast", "random.uniform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "return", "tf", ".", "adjust_contrast", "(", "img", ",", "random", ".", "uniform", "(", "1", "-", "self", ".", "cf", ",", "1", "+", "self", ".", "cf", ")", ")", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.augmentations.CenterCrop.__init__": [[128, 133], ["isinstance", "int", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.augmentations.CenterCrop.__call__": [[134, 149], ["int", "int", "round", "round", "img.crop", "mask.crop"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "x1", "=", "int", "(", "round", "(", "(", "w", "-", "tw", ")", "/", "2.0", ")", ")", "\n", "y1", "=", "int", "(", "round", "(", "(", "h", "-", "th", ")", "/", "2.0", ")", ")", "\n", "return", "(", "\n", "img", ".", "crop", "(", "(", "x1", ",", "\n", "y1", ",", "\n", "x1", "+", "tw", ",", "\n", "y1", "+", "th", ")", ")", ",", "\n", "mask", ".", "crop", "(", "(", "x1", ",", "\n", "y1", ",", "\n", "x1", "+", "tw", ",", "\n", "y1", "+", "th", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.augmentations.RandomHorizontallyFlip.__init__": [[153, 155], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "p", ")", ":", "\n", "        ", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.augmentations.RandomHorizontallyFlip.__call__": [[156, 163], ["random.random", "img.transpose", "mask.transpose"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p", ":", "\n", "            ", "return", "(", "\n", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", ",", "\n", "mask", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", ")", "\n", "", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.augmentations.RandomVerticallyFlip.__init__": [[166, 168], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "p", ")", ":", "\n", "        ", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.augmentations.RandomVerticallyFlip.__call__": [[169, 176], ["random.random", "img.transpose", "mask.transpose"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p", ":", "\n", "            ", "return", "(", "\n", "img", ".", "transpose", "(", "Image", ".", "FLIP_TOP_BOTTOM", ")", ",", "\n", "mask", ".", "transpose", "(", "Image", ".", "FLIP_TOP_BOTTOM", ")", "\n", ")", "\n", "", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.augmentations.FreeScale.__init__": [[179, 181], ["tuple", "reversed"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "tuple", "(", "reversed", "(", "size", ")", ")", "# size: (h, w)", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.augmentations.FreeScale.__call__": [[182, 189], ["img.resize", "mask.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "return", "(", "\n", "img", ".", "resize", "(", "self", ".", "size", ",", "\n", "Image", ".", "BILINEAR", ")", ",", "\n", "mask", ".", "resize", "(", "self", ".", "size", ",", "\n", "Image", ".", "NEAREST", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.augmentations.RandomTranslate.__init__": [[193, 196], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "offset", ")", ":", "\n", "# tuple (delta_x, delta_y)", "\n", "        ", "self", ".", "offset", "=", "offset", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.augmentations.RandomTranslate.__call__": [[197, 241], ["int", "int", "torchvision.crop", "torchvision.pad", "torchvision.affine", "abs", "abs", "abs", "random.random", "random.random", "abs", "abs", "abs"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "x_offset", "=", "int", "(", "2", "*", "(", "random", ".", "random", "(", ")", "-", "0.5", ")", "*", "self", ".", "offset", "[", "0", "]", ")", "\n", "y_offset", "=", "int", "(", "2", "*", "(", "random", ".", "random", "(", ")", "-", "0.5", ")", "*", "self", ".", "offset", "[", "1", "]", ")", "\n", "\n", "x_crop_offset", "=", "x_offset", "\n", "y_crop_offset", "=", "y_offset", "\n", "if", "x_offset", "<", "0", ":", "\n", "            ", "x_crop_offset", "=", "0", "\n", "", "if", "y_offset", "<", "0", ":", "\n", "            ", "y_crop_offset", "=", "0", "\n", "\n", "", "cropped_img", "=", "tf", ".", "crop", "(", "\n", "img", ",", "\n", "y_crop_offset", ",", "\n", "x_crop_offset", ",", "\n", "img", ".", "size", "[", "1", "]", "-", "abs", "(", "y_offset", ")", ",", "\n", "img", ".", "size", "[", "0", "]", "-", "abs", "(", "x_offset", ")", ",", "\n", ")", "\n", "\n", "if", "x_offset", ">=", "0", "and", "y_offset", ">=", "0", ":", "\n", "            ", "padding_tuple", "=", "(", "0", ",", "0", ",", "x_offset", ",", "y_offset", ")", "\n", "\n", "", "elif", "x_offset", ">=", "0", "and", "y_offset", "<", "0", ":", "\n", "            ", "padding_tuple", "=", "(", "0", ",", "abs", "(", "y_offset", ")", ",", "x_offset", ",", "0", ")", "\n", "\n", "", "elif", "x_offset", "<", "0", "and", "y_offset", ">=", "0", ":", "\n", "            ", "padding_tuple", "=", "(", "abs", "(", "x_offset", ")", ",", "0", ",", "0", ",", "y_offset", ")", "\n", "\n", "", "elif", "x_offset", "<", "0", "and", "y_offset", "<", "0", ":", "\n", "            ", "padding_tuple", "=", "(", "abs", "(", "x_offset", ")", ",", "abs", "(", "y_offset", ")", ",", "0", ",", "0", ")", "\n", "\n", "", "return", "(", "\n", "tf", ".", "pad", "(", "cropped_img", ",", "\n", "padding_tuple", ",", "\n", "padding_mode", "=", "\"reflect\"", ")", ",", "\n", "tf", ".", "affine", "(", "\n", "mask", ",", "\n", "translate", "=", "(", "-", "x_offset", ",", "\n", "-", "y_offset", ")", ",", "\n", "scale", "=", "1.0", ",", "\n", "angle", "=", "0.0", ",", "\n", "shear", "=", "0.0", ",", "\n", "fillcolor", "=", "250", ",", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.augmentations.RandomRotate.__init__": [[246, 248], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "degree", ")", ":", "\n", "        ", "self", ".", "degree", "=", "degree", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.augmentations.RandomRotate.__call__": [[249, 273], ["torchvision.affine", "torchvision.affine", "random.random"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "rotate_degree", "=", "random", ".", "random", "(", ")", "*", "2", "*", "self", ".", "degree", "-", "self", ".", "degree", "\n", "return", "(", "\n", "tf", ".", "affine", "(", "\n", "img", ",", "\n", "translate", "=", "(", "0", ",", "\n", "0", ")", ",", "\n", "scale", "=", "1.0", ",", "\n", "angle", "=", "rotate_degree", ",", "\n", "resample", "=", "Image", ".", "BILINEAR", ",", "\n", "fillcolor", "=", "(", "0", ",", "\n", "0", ",", "\n", "0", ")", ",", "\n", "shear", "=", "0.0", ",", "\n", ")", ",", "\n", "tf", ".", "affine", "(", "\n", "mask", ",", "\n", "translate", "=", "(", "0", ",", "\n", "0", ")", ",", "\n", "scale", "=", "1.0", ",", "\n", "angle", "=", "rotate_degree", ",", "\n", "resample", "=", "Image", ".", "NEAREST", ",", "\n", "fillcolor", "=", "250", ",", "\n", "shear", "=", "0.0", ",", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.augmentations.Scale.__init__": [[278, 280], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.augmentations.Scale.__call__": [[281, 307], ["int", "int", "img.resize", "mask.resize", "img.resize", "mask.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "(", "w", ">=", "h", "and", "w", "==", "self", ".", "size", ")", "or", "(", "h", ">=", "w", "and", "h", "==", "self", ".", "size", ")", ":", "\n", "            ", "return", "img", ",", "mask", "\n", "", "if", "w", ">", "h", ":", "\n", "            ", "ow", "=", "self", ".", "size", "\n", "oh", "=", "int", "(", "self", ".", "size", "*", "h", "/", "w", ")", "\n", "return", "(", "\n", "img", ".", "resize", "(", "(", "ow", ",", "\n", "oh", ")", ",", "\n", "Image", ".", "BILINEAR", ")", ",", "\n", "mask", ".", "resize", "(", "(", "ow", ",", "\n", "oh", ")", ",", "\n", "Image", ".", "NEAREST", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "oh", "=", "self", ".", "size", "\n", "ow", "=", "int", "(", "self", ".", "size", "*", "w", "/", "h", ")", "\n", "return", "(", "\n", "img", ".", "resize", "(", "(", "ow", ",", "\n", "oh", ")", ",", "\n", "Image", ".", "BILINEAR", ")", ",", "\n", "mask", ".", "resize", "(", "(", "ow", ",", "\n", "oh", ")", ",", "\n", "Image", ".", "NEAREST", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.augmentations.RandomSizedCrop.__init__": [[311, 313], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.augmentations.RandomSizedCrop.__call__": [[314, 348], ["range", "augmentations.Scale", "augmentations.CenterCrop", "CenterCrop.", "random.uniform", "int", "int", "random.uniform", "round", "round", "random.random", "random.randint", "random.randint", "img.crop.crop.crop", "mask.crop.crop.crop", "Scale.", "math.sqrt", "math.sqrt", "img.crop.crop.resize", "mask.crop.crop.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "for", "attempt", "in", "range", "(", "10", ")", ":", "\n", "            ", "area", "=", "img", ".", "size", "[", "0", "]", "*", "img", ".", "size", "[", "1", "]", "\n", "target_area", "=", "random", ".", "uniform", "(", "0.45", ",", "1.0", ")", "*", "area", "\n", "aspect_ratio", "=", "random", ".", "uniform", "(", "0.5", ",", "2", ")", "\n", "\n", "w", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "*", "aspect_ratio", ")", ")", ")", "\n", "h", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "/", "aspect_ratio", ")", ")", ")", "\n", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "w", ",", "h", "=", "h", ",", "w", "\n", "\n", "", "if", "w", "<=", "img", ".", "size", "[", "0", "]", "and", "h", "<=", "img", ".", "size", "[", "1", "]", ":", "\n", "                ", "x1", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "[", "0", "]", "-", "w", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "[", "1", "]", "-", "h", ")", "\n", "\n", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "w", ",", "y1", "+", "h", ")", ")", "\n", "mask", "=", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "w", ",", "y1", "+", "h", ")", ")", "\n", "assert", "img", ".", "size", "==", "(", "w", ",", "h", ")", "\n", "\n", "return", "(", "\n", "img", ".", "resize", "(", "(", "self", ".", "size", ",", "\n", "self", ".", "size", ")", ",", "\n", "Image", ".", "BILINEAR", ")", ",", "\n", "mask", ".", "resize", "(", "(", "self", ".", "size", ",", "\n", "self", ".", "size", ")", ",", "\n", "Image", ".", "NEAREST", ")", ",", "\n", ")", "\n", "\n", "# Fallback", "\n", "", "", "scale", "=", "Scale", "(", "self", ".", "size", ")", "\n", "crop", "=", "CenterCrop", "(", "self", ".", "size", ")", "\n", "return", "crop", "(", "*", "scale", "(", "img", ",", "mask", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.augmentations.RandomSized.__init__": [[352, 354], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "factor", ")", ":", "\n", "        ", "self", ".", "factor", "=", "factor", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.augmentations.RandomSized.__call__": [[355, 363], ["int", "int", "augmentations.RandomCrop", "RandomCrop.", "img.resize", "mask.resize", "random.uniform", "random.uniform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "w", "=", "int", "(", "random", ".", "uniform", "(", "0.95", ",", "self", ".", "factor", ")", "*", "img", ".", "size", "[", "0", "]", ")", "\n", "h", "=", "int", "(", "random", ".", "uniform", "(", "0.95", ",", "self", ".", "factor", ")", "*", "img", ".", "size", "[", "1", "]", ")", "\n", "crop", "=", "RandomCrop", "(", "img", ".", "size", ")", "\n", "img", ",", "mask", "=", "(", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "BILINEAR", ")", ",", "\n", "mask", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "NEAREST", ")", ")", "\n", "return", "crop", "(", "img", ",", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.data_loader.augmentations.get_composed_augmentations": [[365, 392], ["aug_dict.items", "augmentations.Compose", "print", "augmentations.append", "print"], "function", ["None"], ["", "", "def", "get_composed_augmentations", "(", "aug_dict", ")", ":", "\n", "    ", "key2aug", "=", "{", "\n", "\"gamma\"", ":", "AdjustGamma", ",", "\n", "\"hue\"", ":", "AdjustHue", ",", "\n", "\"brightness\"", ":", "AdjustBrightness", ",", "\n", "\"saturation\"", ":", "AdjustSaturation", ",", "\n", "\"contrast\"", ":", "AdjustContrast", ",", "\n", "\"rcrop\"", ":", "RandomCrop", ",", "\n", "\"hflip\"", ":", "RandomHorizontallyFlip", ",", "\n", "\"vflip\"", ":", "RandomVerticallyFlip", ",", "\n", "\"scale\"", ":", "Scale", ",", "\n", "\"rsize\"", ":", "RandomSized", ",", "\n", "\"rsizecrop\"", ":", "RandomSizedCrop", ",", "\n", "\"rotate\"", ":", "RandomRotate", ",", "\n", "\"translate\"", ":", "RandomTranslate", ",", "\n", "\"ccrop\"", ":", "CenterCrop", ",", "\n", "}", "\n", "\n", "if", "aug_dict", "is", "None", ":", "\n", "        ", "print", "(", "\"Using No Augmentations\"", ")", "\n", "return", "None", "\n", "\n", "", "augmentations", "=", "[", "]", "\n", "for", "aug_key", ",", "aug_param", "in", "aug_dict", ".", "items", "(", ")", ":", "\n", "        ", "augmentations", ".", "append", "(", "key2aug", "[", "aug_key", "]", "(", "aug_param", ")", ")", "\n", "print", "(", "\"Using {} aug with params {}\"", ".", "format", "(", "aug_key", ",", "aug_param", ")", ")", "\n", "", "return", "Compose", "(", "augmentations", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.jamt9000_DVE.logger.logger.setup_logging": [[7, 25], ["pathlib.Path", "pathlib.Path.is_file", "utils.read_json", "config[].items", "logging.config.dictConfig", "logging.config.dictConfig", "print", "logging.basicConfig", "logging.basicConfig", "str"], "function", ["home.repos.pwc.inspect_result.jamt9000_DVE.utils.util.read_json"], ["    ", "\"\"\"\n    Training process logger\n\n    Note:\n        Used by BaseTrainer to save training history.\n    \"\"\"", "\n", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "entries", "=", "{", "}", "\n", "\n", "", "def", "add_entry", "(", "self", ",", "entry", ")", ":", "\n", "        ", "self", ".", "entries", "[", "len", "(", "self", ".", "entries", ")", "+", "1", "]", "=", "entry", "\n", "\n", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "json", ".", "dumps", "(", "self", ".", "entries", ",", "sort_keys", "=", "True", ",", "indent", "=", "4", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jamt9000_DVE.trainer.trainer.AverageMeter.__init__": [[15, 17], ["trainer.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.jamt9000_DVE.trainer.trainer.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.trainer.trainer.AverageMeter.reset": [[18, 23], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.trainer.trainer.AverageMeter.update": [[24, 29], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.trainer.trainer.Trainer.__init__": [[39, 147], ["base.BaseTrainer.__init__", "max", "config.get", "print", "isinstance", "trainer.Trainer.config.get", "trainer.Trainer.config[].get", "int", "trainer.Trainer.lr_scheduler.step", "pkg_resources.parse_version", "pkg_resources.parse_version", "torch.nn.DataParallel", "time.time", "trainer.Trainer.model.eval", "torch.utils.data.DataLoader", "datasets.items", "time.strftime", "trainer.Trainer.logger.info", "trainer.Trainer.model.train", "base.BaseTrainer.__init__", "trainer.Trainer.fn", "LossWrapper", "torch.no_grad", "next", "torch.utils.data.DataLoader", "torch.zeros", "enumerate", "time.gmtime", "len", "iter", "len", "torch.zeros", "torch.zeros", "trainer.Trainer.logger.info", "trainer.Trainer.model[].forward", "len", "len", "torch.no_grad", "[].to", "time.time", "dd.to", "len", "trainer.Trainer.model[].forward", "dd.to"], "methods", ["home.repos.pwc.inspect_result.jamt9000_DVE.base.base_model.BaseModel.__init__", "home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config.ConfigParser.get", "home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config.ConfigParser.get", "home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config.ConfigParser.get", "home.repos.pwc.inspect_result.jamt9000_DVE.base.base_trainer.BaseTrainer.train", "home.repos.pwc.inspect_result.jamt9000_DVE.base.base_model.BaseModel.__init__", "home.repos.pwc.inspect_result.jamt9000_DVE.base.base_model.BaseModel.forward", "home.repos.pwc.inspect_result.jamt9000_DVE.base.base_model.BaseModel.forward"], ["def", "__init__", "(", "\n", "self", ",", "\n", "model", ",", "\n", "loss", ",", "\n", "metrics", ",", "\n", "optimizer", ",", "\n", "resume", ",", "\n", "config", ",", "\n", "data_loader", ",", "\n", "valid_data_loader", "=", "None", ",", "\n", "lr_scheduler", "=", "None", ",", "\n", "visualizations", "=", "None", ",", "\n", "mini_train", "=", "False", ",", "\n", "check_bn_working", "=", "False", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model", ",", "loss", ",", "metrics", ",", "optimizer", ",", "resume", ",", "config", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "data_loader", "=", "data_loader", "\n", "self", ".", "valid_data_loader", "=", "valid_data_loader", "\n", "self", ".", "do_validation", "=", "self", ".", "valid_data_loader", "is", "not", "None", "\n", "self", ".", "lr_scheduler", "=", "lr_scheduler", "\n", "self", ".", "log_step", "=", "max", "(", "1", ",", "int", "(", "len", "(", "self", ".", "data_loader", ")", "/", "5.", ")", ")", "\n", "self", ".", "visualizations", "=", "visualizations", "if", "visualizations", "is", "not", "None", "else", "[", "]", "\n", "self", ".", "mini_train", "=", "mini_train", "\n", "self", ".", "check_bn_working", "=", "check_bn_working", "\n", "self", ".", "loss_args", "=", "config", ".", "get", "(", "'loss_args'", ",", "{", "}", ")", "\n", "\n", "assert", "self", ".", "lr_scheduler", ".", "optimizer", "is", "self", ".", "optimizer", "\n", "assert", "self", ".", "start_epoch", ">=", "1", "\n", "\n", "if", "self", ".", "start_epoch", "!=", "1", ":", "\n", "# Our epoch 1 is step -1 (but we can't explicitly call", "\n", "# step(-1) because that would update the lr based on a negative epoch)", "\n", "# NB stateful schedulers eg based on loss won't be restored properly", "\n", "            ", "self", ".", "lr_scheduler", ".", "step", "(", "self", ".", "start_epoch", "-", "2", ")", "\n", "\n", "# only perform last epoch check for older PyTorch, current versions", "\n", "# immediately set the `last_epoch` attribute to 0.", "\n", "", "if", "parse_version", "(", "torch", ".", "__version__", ")", "<=", "parse_version", "(", "\"1.0.0\"", ")", ":", "\n", "            ", "assert", "self", ".", "lr_scheduler", ".", "last_epoch", "==", "self", ".", "start_epoch", "-", "2", "\n", "\n", "", "print", "(", "'Loss args'", ",", "self", ".", "loss_args", ")", "\n", "\n", "class", "LossWrapper", "(", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "            ", "def", "__init__", "(", "self", ",", "fn", ")", ":", "\n", "                ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fn", "=", "fn", "\n", "\n", "", "def", "__call__", "(", "self", ",", "*", "a", ",", "**", "kw", ")", ":", "\n", "                ", "return", "self", ".", "fn", "(", "*", "a", ",", "**", "kw", ")", "\n", "\n", "", "", "if", "isinstance", "(", "self", ".", "model", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "            ", "self", ".", "loss_wrapper", "=", "torch", ".", "nn", ".", "DataParallel", "(", "\n", "LossWrapper", "(", "self", ".", "loss", ")", ",", "\n", "device_ids", "=", "self", ".", "model", ".", "device_ids", "\n", ")", "\n", "\n", "", "if", "self", ".", "config", ".", "get", "(", "'cache_descriptors'", ",", "False", ")", ":", "\n", "            ", "cache_tic", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "datasets", "=", "{", "\n", "\"train\"", ":", "self", ".", "data_loader", ".", "dataset", ",", "\n", "\"val\"", ":", "self", ".", "valid_data_loader", ".", "dataset", ",", "\n", "}", "\n", "self", ".", "cache", "=", "{", "}", "\n", "self", ".", "meta_cache", "=", "{", "}", "\n", "# First determine the spatial/depth dimensions of the tensor cache to enable", "\n", "# preallocation of the tensor caches", "\n", "init_batcher", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "datasets", "[", "\"train\"", "]", ",", "batch_size", "=", "1", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "batch", "=", "next", "(", "iter", "(", "init_batcher", ")", ")", "\n", "dd", ",", "mm", "=", "batch", "[", "\"data\"", "]", ",", "batch", "[", "\"meta\"", "]", "\n", "feat_shape", "=", "self", ".", "model", "[", "0", "]", ".", "forward", "(", "dd", ".", "to", "(", "self", ".", "device", ")", ")", "[", "0", "]", ".", "shape", "\n", "keypts_shape", "=", "mm", "[", "\"keypts\"", "]", ".", "shape", "\n", "\n", "\n", "", "for", "key", ",", "dataset", "in", "datasets", ".", "items", "(", ")", ":", "\n", "                ", "batcher", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "100", ",", "\n", "num_workers", "=", "4", ")", "\n", "self", ".", "cache", "[", "key", "]", "=", "torch", ".", "zeros", "(", "len", "(", "dataset", ")", ",", "*", "feat_shape", "[", "1", ":", "]", ")", "\n", "self", ".", "meta_cache", "[", "key", "]", "=", "{", "\n", "\"keypts\"", ":", "torch", ".", "zeros", "(", "len", "(", "dataset", ")", ",", "*", "keypts_shape", "[", "1", ":", "]", ")", ",", "\n", "\"keypts_normalized\"", ":", "torch", ".", "zeros", "(", "len", "(", "dataset", ")", ",", "*", "keypts_shape", "[", "1", ":", "]", ")", ",", "\n", "}", "\n", "for", "ii", ",", "batch", "in", "enumerate", "(", "batcher", ")", ":", "\n", "                    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "dd", ",", "mm", "=", "batch", "[", "\"data\"", "]", ",", "batch", "[", "\"meta\"", "]", "\n", "fw", "=", "self", ".", "model", "[", "0", "]", ".", "forward", "(", "dd", ".", "to", "(", "self", ".", "device", ")", ")", "[", "0", "]", ".", "to", "(", "'cpu'", ")", "\n", "self", ".", "cache", "[", "key", "]", "[", "mm", "[", "\"index\"", "]", "]", "=", "fw", "\n", "kp", ",", "kpn", "=", "mm", "[", "\"keypts\"", "]", ",", "mm", "[", "\"keypts_normalized\"", "]", "\n", "self", ".", "meta_cache", "[", "key", "]", "[", "\"keypts\"", "]", "[", "mm", "[", "\"index\"", "]", "]", "=", "kp", "\n", "self", ".", "meta_cache", "[", "key", "]", "[", "\"keypts_normalized\"", "]", "[", "mm", "[", "\"index\"", "]", "]", "=", "kpn", "\n", "", "self", ".", "logger", ".", "info", "(", "f\"caching {key} descriptors {ii}/{len(batcher)}\"", ")", "\n", "\n", "", "", "duration", "=", "time", ".", "strftime", "(", "'%Hh%Mm%Ss'", ",", "time", ".", "gmtime", "(", "time", ".", "time", "(", ")", "-", "cache_tic", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "f\"Descriptor caching took {duration}\"", ")", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "# Fetching of images and keypoints is no longer needed", "\n", "self", ".", "data_loader", ".", "dataset", ".", "use_ims", "=", "False", "\n", "self", ".", "valid_data_loader", ".", "dataset", ".", "use_ims", "=", "False", "\n", "self", ".", "data_loader", ".", "dataset", ".", "use_keypoints", "=", "False", "\n", "self", ".", "valid_data_loader", ".", "dataset", ".", "use_keypoints", "=", "False", "\n", "\n", "\n", "# Handle segmentation metrics separately, since the accumulation cannot be", "\n", "# done directly via an AverageMeter", "\n", "", "self", ".", "log_miou", "=", "self", ".", "config", "[", "\"trainer\"", "]", ".", "get", "(", "\"log_miou\"", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.trainer.trainer.Trainer._eval_metrics": [[148, 159], ["numpy.zeros", "enumerate", "len", "metric", "trainer.Trainer.writer.add_scalar"], "methods", ["None"], ["", "def", "_eval_metrics", "(", "self", ",", "output", ",", "target", ")", ":", "\n", "        ", "acc_metrics", "=", "np", ".", "zeros", "(", "len", "(", "self", ".", "metrics", ")", ")", "\n", "for", "i", ",", "metric", "in", "enumerate", "(", "self", ".", "metrics", ")", ":", "\n", "            ", "acc_metrics", "[", "i", "]", "+=", "metric", "(", "\n", "output", ",", "\n", "target", ",", "\n", "self", ".", "data_loader", ".", "dataset", ",", "\n", "self", ".", "config", "\n", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "f'{metric.__name__}'", ",", "acc_metrics", "[", "i", "]", ")", "\n", "", "return", "acc_metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.trainer.trainer.Trainer._train_epoch": [[163, 330], ["trainer.Trainer.model.train", "time.time", "trainer.AverageMeter", "time.time", "len", "enumerate", "trainer.Trainer.writer.set_step", "trainer.Trainer.writer.add_scalar", "enumerate", "time.strftime", "print", "time.time", "time.strftime", "print", "trainer.AverageMeter", "time.time", "data.to.to.to", "trainer.Trainer.optimizer.zero_grad", "trainer.Trainer.config.get", "isinstance", "trainer.Trainer.backward", "trainer.Trainer.optimizer.step", "trainer.Trainer.writer.set_step", "trainer.Trainer.writer.add_scalar", "trainer.AverageMeter.update", "enumerate", "trainer.Trainer.writer.add_scalar", "time.gmtime", "trainer.Trainer._valid_epoch", "time.gmtime", "trainer.Trainer.lr_scheduler.step", "range", "time.time", "isinstance", "[].to().float", "trainer.Trainer.model", "time.time", "trainer.Trainer.loss_wrapper", "trainer.Trainer.mean", "trainer.Trainer.loss", "time.time", "time.time", "time.time", "trainer.Trainer.item", "trainer.Trainer.item", "data.to.to.size", "trainer.Trainer._eval_metrics", "total_metrics[].update", "max", "time.time", "str", "trainer.Trainer.logger.info", "time.time", "time.time", "print", "print", "trainer.Trainer.logger.info", "len", "time.time", "time.time", "time.time", "time.time", "time.time", "data.to.to.size", "time.time", "time.time", "datetime.timedelta", "msg.format", "len", "torchvision.utils.make_grid", "trainer.Trainer.writer.add_image", "time.time", "print", "time.time", "time.time", "[].to", "len", "len", "trainer.Trainer.item", "im_data.cpu", "v", "time.time", "msg.format", "len", "im_data.cpu"], "methods", ["home.repos.pwc.inspect_result.jamt9000_DVE.base.base_trainer.BaseTrainer.train", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.visualization.WriterTensorboardX.set_step", "home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config.ConfigParser.get", "home.repos.pwc.inspect_result.jamt9000_DVE.model.folded_correlation_dve.DenseCorrDve.backward", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.visualization.WriterTensorboardX.set_step", "home.repos.pwc.inspect_result.jamt9000_DVE.trainer.trainer.AverageMeter.update", "home.repos.pwc.inspect_result.jamt9000_DVE.trainer.trainer.Trainer._valid_epoch", "home.repos.pwc.inspect_result.jamt9000_DVE.trainer.trainer.Trainer._eval_metrics", "home.repos.pwc.inspect_result.jamt9000_DVE.trainer.trainer.AverageMeter.update"], ["", "def", "_train_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"\n        Training logic for an epoch\n\n        :param epoch: Current training epoch.\n        :return: A log that contains all information you want to save.\n\n        Note:\n            If you have additional information to record, for example:\n                > additional_log = {\"x\": x, \"y\": y}\n            merge it with log before return. i.e.\n                > log = {**log, **additional_log}\n                > return log\n\n            The metrics in log must have the key 'metrics'.\n        \"\"\"", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "train_tic", "=", "time", ".", "time", "(", ")", "\n", "avg_loss", "=", "AverageMeter", "(", ")", "\n", "total_metrics", "=", "[", "AverageMeter", "(", ")", "for", "a", "in", "range", "(", "len", "(", "self", ".", "metrics", ")", ")", "]", "\n", "seen_tic", "=", "time", ".", "time", "(", ")", "\n", "seen", "=", "0", "\n", "profile", "=", "self", ".", "config", "[", "\"profile\"", "]", "\n", "totaL_batches", "=", "len", "(", "self", ".", "data_loader", ")", "\n", "\n", "if", "profile", ":", "\n", "            ", "batch_tic", "=", "time", ".", "time", "(", ")", "\n", "", "for", "batch_idx", ",", "batch", "in", "enumerate", "(", "self", ".", "data_loader", ")", ":", "\n", "            ", "data", ",", "meta", "=", "batch", "[", "\"data\"", "]", ",", "batch", "[", "\"meta\"", "]", "\n", "data", "=", "data", ".", "to", "(", "self", ".", "device", ")", "\n", "seen_batch", "=", "data", ".", "shape", "[", "0", "]", "\n", "\n", "# discount the fact that warps produce pairs of images", "\n", "if", "self", ".", "data_loader", ".", "dataset", ".", "warper", "is", "not", "None", ":", "\n", "                ", "seen_batch", "=", "seen_batch", "//", "2", "\n", "", "seen", "+=", "seen_batch", "\n", "\n", "if", "profile", ":", "\n", "                ", "timings", "=", "{", "}", "\n", "timings", "[", "\"data transfer\"", "]", "=", "time", ".", "time", "(", ")", "-", "batch_tic", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "self", ".", "config", ".", "get", "(", "'cache_descriptors'", ",", "False", ")", ":", "\n", "                ", "assert", "isinstance", "(", "self", ".", "model", ",", "torch", ".", "nn", ".", "Sequential", ")", "\n", "#\u00a0inflate meta from cache", "\n", "meta_cache", "=", "self", ".", "meta_cache", "[", "\"train\"", "]", "\n", "meta", "[", "\"keypts\"", "]", "=", "meta_cache", "[", "\"keypts\"", "]", "[", "meta", "[", "\"index\"", "]", "]", "\n", "meta", "[", "\"keypts_normalized\"", "]", "=", "meta_cache", "[", "\"keypts_normalized\"", "]", "[", "meta", "[", "\"index\"", "]", "]", "\n", "descs", "=", "self", ".", "cache", "[", "\"train\"", "]", "[", "meta", "[", "'index'", "]", "]", ".", "to", "(", "self", ".", "device", ")", ".", "float", "(", ")", "\n", "output", "=", "self", ".", "model", "[", "1", ":", "]", "(", "[", "descs", "]", ")", "\n", "", "else", ":", "\n", "                ", "output", "=", "self", ".", "model", "(", "data", ")", "\n", "\n", "", "if", "profile", ":", "\n", "                ", "timings", "[", "\"fwd\"", "]", "=", "time", ".", "time", "(", ")", "-", "tic", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "if", "isinstance", "(", "self", ".", "model", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "                ", "loss", "=", "self", ".", "loss_wrapper", "(", "output", ",", "meta", ",", "**", "self", ".", "loss_args", ")", "\n", "loss", "=", "loss", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "                ", "loss", "=", "self", ".", "loss", "(", "output", ",", "meta", ",", "**", "self", ".", "loss_args", ")", "\n", "", "if", "profile", ":", "\n", "                ", "timings", "[", "\"loss-fwd\"", "]", "=", "time", ".", "time", "(", ")", "-", "tic", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "\n", "if", "profile", ":", "\n", "                ", "timings", "[", "\"loss-back\"", "]", "=", "time", ".", "time", "(", ")", "-", "tic", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "if", "profile", ":", "\n", "                ", "timings", "[", "\"optim-step\"", "]", "=", "time", ".", "time", "(", ")", "-", "tic", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "self", ".", "writer", ".", "set_step", "(", "(", "epoch", "-", "1", ")", "*", "len", "(", "self", ".", "data_loader", ")", "+", "batch_idx", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'loss'", ",", "loss", ".", "item", "(", ")", ")", "\n", "avg_loss", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "data", ".", "size", "(", "0", ")", ")", "\n", "\n", "for", "i", ",", "m", "in", "enumerate", "(", "self", ".", "_eval_metrics", "(", "output", ",", "meta", ")", ")", ":", "\n", "                ", "total_metrics", "[", "i", "]", ".", "update", "(", "m", ",", "data", ".", "size", "(", "0", ")", ")", "\n", "\n", "", "if", "profile", ":", "\n", "                ", "timings", "[", "\"metrics\"", "]", "=", "time", ".", "time", "(", ")", "-", "tic", "\n", "\n", "", "if", "self", ".", "verbosity", ">=", "2", "and", "batch_idx", "%", "self", ".", "log_step", "==", "0", ":", "\n", "                ", "toc", "=", "time", ".", "time", "(", ")", "-", "seen_tic", "\n", "rate", "=", "max", "(", "seen", "/", "toc", ",", "1E-5", ")", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "msg", "=", "\"Train Epoch: {} [{}/{} ({:.0f}%)] Loss: {:.6f} \"", "\n", "msg", "+=", "\"Hz: {:.2f}, ETA: {}\"", "\n", "batches_left", "=", "totaL_batches", "-", "batch_idx", "\n", "remaining", "=", "batches_left", "*", "self", ".", "data_loader", ".", "batch_size", "/", "rate", "\n", "eta_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "remaining", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "\n", "msg", ".", "format", "(", "\n", "epoch", ",", "\n", "batch_idx", "*", "self", ".", "data_loader", ".", "batch_size", ",", "\n", "len", "(", "self", ".", "data_loader", ".", "dataset", ")", ",", "\n", "100.0", "*", "batch_idx", "/", "len", "(", "self", ".", "data_loader", ")", ",", "\n", "loss", ".", "item", "(", ")", ",", "\n", "rate", ",", "\n", "eta_str", "\n", ")", "\n", ")", "\n", "\n", "# Use key check for backward compat", "\n", "if", "\"im_data\"", "in", "batch", ":", "\n", "                    ", "im_data", "=", "batch", "[", "\"im_data\"", "]", "\n", "", "else", ":", "\n", "                    ", "im_data", "=", "data", "\n", "", "if", "len", "(", "im_data", ")", "and", "self", ".", "visualizations", ":", "\n", "                    ", "im", "=", "make_grid", "(", "im_data", ".", "cpu", "(", ")", ",", "nrow", "=", "8", ",", "normalize", "=", "True", ")", "\n", "self", ".", "writer", ".", "add_image", "(", "'input'", ",", "im", ")", "\n", "for", "v", "in", "self", ".", "visualizations", ":", "\n", "                        ", "v", "(", "self", ".", "writer", ",", "im_data", ".", "cpu", "(", ")", ",", "output", ",", "meta", ")", "\n", "", "", "seen_tic", "=", "time", ".", "time", "(", ")", "\n", "seen", "=", "0", "\n", "if", "profile", ":", "\n", "                    ", "timings", "[", "\"vis\"", "]", "=", "time", ".", "time", "(", ")", "-", "tic", "\n", "\n", "# Do some aggressive reference clearning to ensure that we don't", "\n", "#\u00a0hang onto memory while fetching the next minibatch (for safety, disabling", "\n", "# this for now)", "\n", "# del data", "\n", "# del loss", "\n", "# del output", "\n", "\n", "", "", "if", "profile", ":", "\n", "                ", "timings", "[", "\"minibatch\"", "]", "=", "time", ".", "time", "(", ")", "-", "batch_tic", "\n", "batch_tic", "=", "time", ".", "time", "(", ")", "\n", "\n", "print", "(", "\"==============\"", ")", "\n", "for", "key", "in", "timings", ":", "\n", "                    ", "ratio", "=", "100", "*", "timings", "[", "key", "]", "/", "timings", "[", "\"minibatch\"", "]", "\n", "msg", "=", "\"{:.3f} ({:.2f}%) >>> {}\"", "\n", "print", "(", "msg", ".", "format", "(", "timings", "[", "key", "]", ",", "ratio", ",", "key", ")", ")", "\n", "", "print", "(", "\"==============\"", ")", "\n", "\n", "", "if", "self", ".", "mini_train", "and", "batch_idx", ">", "3", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "\"Mini training: exiting epoch early...\"", ")", "\n", "break", "\n", "\n", "", "", "log", "=", "{", "'loss'", ":", "avg_loss", ".", "avg", ",", "'metrics'", ":", "[", "a", ".", "avg", "for", "a", "in", "total_metrics", "]", "}", "\n", "self", ".", "writer", ".", "set_step", "(", "epoch", ",", "'train_epoch'", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'loss'", ",", "log", "[", "'loss'", "]", ")", "\n", "\n", "for", "i", ",", "metric", "in", "enumerate", "(", "self", ".", "metrics", ")", ":", "\n", "            ", "self", ".", "writer", ".", "add_scalar", "(", "f'{metric.__name__}'", ",", "log", "[", "'metrics'", "]", "[", "i", "]", ")", "\n", "\n", "", "duration", "=", "time", ".", "strftime", "(", "'%Hh%Mm%Ss'", ",", "time", ".", "gmtime", "(", "time", ".", "time", "(", ")", "-", "train_tic", ")", ")", "\n", "print", "(", "f\"training epoch took {duration}\"", ")", "\n", "\n", "val_tic", "=", "time", ".", "time", "(", ")", "\n", "if", "self", ".", "do_validation", ":", "\n", "            ", "val_log", "=", "self", ".", "_valid_epoch", "(", "epoch", ")", "\n", "log", "=", "{", "**", "log", ",", "**", "val_log", "}", "\n", "", "duration", "=", "time", ".", "strftime", "(", "'%Hh%Mm%Ss'", ",", "time", ".", "gmtime", "(", "time", ".", "time", "(", ")", "-", "val_tic", ")", ")", "\n", "print", "(", "f\"validation epoch took {duration}\"", ")", "\n", "\n", "if", "self", ".", "lr_scheduler", "is", "not", "None", ":", "\n", "            ", "self", ".", "lr_scheduler", ".", "step", "(", "epoch", "-", "1", ")", "\n", "", "return", "log", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.trainer.trainer.Trainer._valid_epoch": [[331, 452], ["torch.get_rng_state", "trainer.Trainer.logger.info", "trainer.Trainer.model.eval", "trainer.AverageMeter", "trainer.Trainer.writer.set_step", "trainer.Trainer.writer.add_scalar", "enumerate", "torch.set_rng_state", "trainer.AverageMeter", "model.metric.runningIOU", "torch.no_grad", "torch.manual_seed", "enumerate", "trainer.Trainer.model.modules", "trainer.AverageMeter", "trainer.Trainer.model.modules", "trainer.Trainer.writer.add_scalar", "model.metric.runningIOU.get_scores", "summary.items", "cliu.items", "trainer.Trainer.writer.add_scalar", "range", "data.to.to.to", "trainer.Trainer.config.get", "isinstance", "trainer.Trainer.writer.set_step", "trainer.Trainer.writer.add_scalar", "trainer.AverageMeter.update", "enumerate", "isinstance", "torch.no_grad", "torch.manual_seed", "enumerate", "isinstance", "trainer.Trainer.writer.add_scalar", "print", "trainer.Trainer.writer.add_scalar", "len", "isinstance", "[].to().float", "trainer.Trainer.model", "trainer.Trainer.loss_wrapper", "trainer.Trainer.mean", "trainer.Trainer.loss", "trainer.Trainer.item", "trainer.Trainer.item", "data.to.to.size", "trainer.Trainer._eval_metrics", "total_val_metrics[].update", "len", "torchvision.utils.make_grid", "trainer.Trainer.writer.add_image", "trainer.Trainer.logger.info", "data.to.to.to", "trainer.Trainer.model", "isinstance", "trainer.AverageMeter.update", "data.to.to.size", "im_data.cpu", "v", "trainer.Trainer.loss_wrapper", "trainer.Trainer.mean", "trainer.Trainer.loss", "trainer.Trainer.item", "data.to.to.size", "model.metric.runningIOU.update", "[].to", "len", "im_data.cpu"], "methods", ["home.repos.pwc.inspect_result.jamt9000_DVE.utils.visualization.WriterTensorboardX.set_step", "home.repos.pwc.inspect_result.jamt9000_DVE.model.metric.runningIOU.get_scores", "home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config.ConfigParser.get", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.visualization.WriterTensorboardX.set_step", "home.repos.pwc.inspect_result.jamt9000_DVE.trainer.trainer.AverageMeter.update", "home.repos.pwc.inspect_result.jamt9000_DVE.trainer.trainer.Trainer._eval_metrics", "home.repos.pwc.inspect_result.jamt9000_DVE.trainer.trainer.AverageMeter.update", "home.repos.pwc.inspect_result.jamt9000_DVE.trainer.trainer.AverageMeter.update", "home.repos.pwc.inspect_result.jamt9000_DVE.trainer.trainer.AverageMeter.update"], ["", "def", "_valid_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"\n        Validate after training an epoch\n\n        :return: A log that contains information about validation\n\n        Note:\n            The validation metrics in log must have the key 'val_metrics'.\n        \"\"\"", "\n", "cached_state", "=", "torch", ".", "get_rng_state", "(", ")", "\n", "self", ".", "logger", ".", "info", "(", "f\"Running validation for epoch {epoch}\"", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "avg_val_loss", "=", "AverageMeter", "(", ")", "\n", "total_val_metrics", "=", "[", "AverageMeter", "(", ")", "for", "a", "in", "range", "(", "len", "(", "self", ".", "metrics", ")", ")", "]", "\n", "\n", "if", "self", ".", "log_miou", ":", "\n", "            ", "nclass", "=", "self", ".", "config", "[", "\"segmentation_head\"", "]", "[", "\"args\"", "]", "[", "\"num_classes\"", "]", "\n", "running_metrics_val", "=", "runningIOU", "(", "nclass", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "torch", ".", "manual_seed", "(", "0", ")", "\n", "for", "batch_idx", ",", "batch", "in", "enumerate", "(", "self", ".", "valid_data_loader", ")", ":", "\n", "                ", "data", ",", "meta", "=", "batch", "[", "\"data\"", "]", ",", "batch", "[", "\"meta\"", "]", "\n", "data", "=", "data", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "if", "self", ".", "config", ".", "get", "(", "'cache_descriptors'", ",", "False", ")", ":", "\n", "                    ", "assert", "isinstance", "(", "self", ".", "model", ",", "torch", ".", "nn", ".", "Sequential", ")", "\n", "#\u00a0inflate meta from cache", "\n", "meta_cache", "=", "self", ".", "meta_cache", "[", "\"val\"", "]", "\n", "meta", "[", "\"keypts\"", "]", "=", "meta_cache", "[", "\"keypts\"", "]", "[", "meta", "[", "\"index\"", "]", "]", "\n", "meta", "[", "\"keypts_normalized\"", "]", "=", "meta_cache", "[", "\"keypts_normalized\"", "]", "[", "meta", "[", "\"index\"", "]", "]", "\n", "descs", "=", "self", ".", "cache", "[", "\"val\"", "]", "[", "meta", "[", "'index'", "]", "]", ".", "to", "(", "self", ".", "device", ")", ".", "float", "(", ")", "\n", "output", "=", "self", ".", "model", "[", "1", ":", "]", "(", "[", "descs", "]", ")", "\n", "", "else", ":", "\n", "                    ", "output", "=", "self", ".", "model", "(", "data", ")", "\n", "# output = self.model(data)", "\n", "\n", "", "if", "isinstance", "(", "self", ".", "model", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "                    ", "loss", "=", "self", ".", "loss_wrapper", "(", "output", ",", "meta", ",", "**", "self", ".", "loss_args", ")", "\n", "loss", "=", "loss", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "                    ", "loss", "=", "self", ".", "loss", "(", "output", ",", "meta", ",", "**", "self", ".", "loss_args", ")", "\n", "\n", "", "self", ".", "writer", ".", "set_step", "(", "(", "epoch", "-", "1", ")", "*", "len", "(", "self", ".", "valid_data_loader", ")", "\n", "+", "batch_idx", ",", "\n", "'valid'", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'loss'", ",", "loss", ".", "item", "(", ")", ")", "\n", "avg_val_loss", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "data", ".", "size", "(", "0", ")", ")", "\n", "for", "i", ",", "m", "in", "enumerate", "(", "self", ".", "_eval_metrics", "(", "output", ",", "meta", ")", ")", ":", "\n", "                    ", "total_val_metrics", "[", "i", "]", ".", "update", "(", "m", ",", "data", ".", "size", "(", "0", ")", ")", "\n", "\n", "# Use key check for backward compat", "\n", "", "if", "\"im_data\"", "in", "batch", ":", "\n", "                    ", "im_data", "=", "batch", "[", "\"im_data\"", "]", "\n", "", "else", ":", "\n", "                    ", "im_data", "=", "data", "\n", "", "if", "len", "(", "im_data", ")", "and", "self", ".", "visualizations", ":", "\n", "                    ", "im_grid", "=", "make_grid", "(", "im_data", ".", "cpu", "(", ")", ",", "nrow", "=", "8", ",", "normalize", "=", "True", ")", "\n", "self", ".", "writer", ".", "add_image", "(", "'input'", ",", "im_grid", ")", "\n", "for", "v", "in", "self", ".", "visualizations", ":", "\n", "                        ", "v", "(", "self", ".", "writer", ",", "im_data", ".", "cpu", "(", ")", ",", "output", ",", "meta", ")", "\n", "\n", "", "", "if", "self", ".", "mini_train", "and", "batch_idx", ">", "3", ":", "\n", "                    ", "self", ".", "logger", ".", "info", "(", "\"Mini training: exiting validation epoch early...\"", ")", "\n", "break", "\n", "\n", "", "", "", "val_log", "=", "{", "\n", "'val_loss'", ":", "avg_val_loss", ".", "avg", ",", "\n", "'val_metrics'", ":", "[", "a", ".", "avg", "for", "a", "in", "total_val_metrics", "]", "\n", "}", "\n", "\n", "self", ".", "writer", ".", "set_step", "(", "epoch", ",", "'val_epoch'", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'val_loss'", ",", "val_log", "[", "'val_loss'", "]", ")", "\n", "\n", "if", "self", ".", "check_bn_working", ":", "\n", "# Run without using saved batchnorm statistics, to check bn is working", "\n", "            ", "for", "md", "in", "self", ".", "model", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "md", ",", "_BatchNorm", ")", ":", "\n", "                    ", "md", ".", "track_running_stats", "=", "False", "\n", "\n", "", "", "avg_val_loss_trainbn", "=", "AverageMeter", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "torch", ".", "manual_seed", "(", "0", ")", "\n", "for", "batch_idx", ",", "batch", "in", "enumerate", "(", "self", ".", "valid_data_loader", ")", ":", "\n", "                    ", "data", ",", "meta", "=", "batch", "[", "\"data\"", "]", ",", "batch", "[", "\"meta\"", "]", "\n", "data", "=", "data", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "output", "=", "self", ".", "model", "(", "data", ")", "\n", "\n", "if", "isinstance", "(", "self", ".", "model", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "                        ", "loss", "=", "self", ".", "loss_wrapper", "(", "output", ",", "meta", ",", "**", "self", ".", "loss_args", ")", "\n", "loss", "=", "loss", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "                        ", "loss", "=", "self", ".", "loss", "(", "output", ",", "meta", ",", "**", "self", ".", "loss_args", ")", "\n", "\n", "", "avg_val_loss_trainbn", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "data", ".", "size", "(", "0", ")", ")", "\n", "\n", "if", "self", ".", "log_miou", ":", "\n", "                        ", "running_metrics_val", ".", "update", "(", "output", ",", "meta", ")", "\n", "\n", "", "", "", "for", "md", "in", "self", ".", "model", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "md", ",", "_BatchNorm", ")", ":", "\n", "                    ", "md", ".", "track_running_stats", "=", "True", "\n", "", "", "self", ".", "writer", ".", "add_scalar", "(", "'val_loss_trainbn'", ",", "val_log", "[", "'val_loss_trainbn'", "]", ")", "\n", "val_log", "[", "'val_loss_trainbn'", "]", "=", "avg_val_loss_trainbn", ".", "avg", "\n", "\n", "", "if", "self", ".", "log_miou", ":", "\n", "            ", "summary", ",", "cliu", "=", "running_metrics_val", ".", "get_scores", "(", ")", "\n", "for", "key", ",", "val", "in", "summary", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "writer", ".", "add_scalar", "(", "'seg/{}'", ".", "format", "(", "key", ")", ",", "val", ")", "\n", "print", "(", "\"{}: {}\"", ".", "format", "(", "key", ",", "val", ")", ")", "\n", "", "for", "cls", ",", "val", "in", "cliu", ".", "items", "(", ")", ":", "\n", "                ", "clsname", "=", "self", ".", "valid_data_loader", ".", "dataset", ".", "classnames", "[", "cls", "]", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'seg/cliu-{}'", ".", "format", "(", "clsname", ")", ",", "val", ")", "\n", "\n", "", "", "for", "i", ",", "metric", "in", "enumerate", "(", "self", ".", "metrics", ")", ":", "\n", "            ", "self", ".", "writer", ".", "add_scalar", "(", "f'{metric.__name__}'", ",", "val_log", "[", "'val_metrics'", "]", "[", "i", "]", ")", "\n", "\n", "", "torch", ".", "set_rng_state", "(", "cached_state", ")", "\n", "\n", "return", "val_log", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jamt9000_DVE.misc.launcher.main": [[8, 38], ["sorted", "socket.gethostname", "print", "list", "pathlib.Path().glob", "str", "str", "std_out.exists", "print", "std_out.parent.mkdir", "open", "subprocess.Popen", "print", "len", "pathlib.Path", "print", "print", "str", "str", "pathlib.Path", "pathlib.Path.home", "pathlib.Path.home"], "function", ["None"], ["def", "main", "(", "grid_dir", ",", "max_jobs_per_device", ",", "refresh", ",", "devices", ")", ":", "\n", "    ", "configs", "=", "sorted", "(", "list", "(", "Path", "(", "grid_dir", ")", ".", "glob", "(", "\"*.json\"", ")", ")", ")", "\n", "hostname", "=", "socket", ".", "gethostname", "(", ")", "\n", "print", "(", "f\"found {len(configs)} configs in grid dir\"", ")", "\n", "jobs_launched", "=", "0", "\n", "for", "device", "in", "devices", ":", "\n", "        ", "if", "hostname", "in", "{", "\"ip-172-31-15-159\"", ",", "\"ip-172-31-11-142\"", "}", ":", "\n", "            ", "python_bin", "=", "str", "(", "Path", ".", "home", "(", ")", "/", "\"anaconda3/envs/pytorch_p36/bin/python\"", ")", "\n", "", "else", ":", "\n", "            ", "python_bin", "=", "str", "(", "Path", ".", "home", "(", ")", "/", "\"local/anaconda3/envs/pt37/bin/python\"", ")", "\n", "", "for", "config", "in", "configs", ":", "\n", "# exp_dir = Path(\"data/saved/models\") / f\"grid-{config.stem}\"", "\n", "# if exp_dir.exists() and not refresh:", "\n", "#     continue", "\n", "            ", "std_out", "=", "Path", "(", "\"data/grid_log\"", ")", "/", "f\"{config.stem}.txt\"", "\n", "if", "std_out", ".", "exists", "(", ")", ":", "\n", "                ", "print", "(", "f\"Found existing log for {std_out}, skipping....\"", ")", "\n", "continue", "\n", "", "if", "jobs_launched", ">=", "max_jobs_per_device", ":", "\n", "                ", "print", "(", "\"launched maximum number of jobs, exiting....\"", ")", "\n", "break", "\n", "", "cmd_args", "=", "[", "python_bin", ",", "\"train.py\"", ",", "\"--config\"", ",", "str", "(", "config", ")", ",", "\"--device\"", ",", "device", "]", "\n", "print", "(", "f\"launching job with args: {' '.join(cmd_args)}\"", ")", "\n", "std_out", ".", "parent", ".", "mkdir", "(", "exist_ok", "=", "True", ",", "parents", "=", "True", ")", "\n", "log", "=", "open", "(", "str", "(", "std_out", ")", ",", "\"a\"", ")", "\n", "proc", "=", "subprocess", ".", "Popen", "(", "cmd_args", ",", "stdout", "=", "log", ",", "stderr", "=", "log", ")", "\n", "jobs_launched", "+=", "1", "\n", "print", "(", "f\"Job launched successfully with pid: {proc.pid}\"", ")", "\n", "# should probably close the log file", "\n", "", "jobs_launched", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.misc.sync_datasets.upload_to_server": [[25, 58], ["subprocess.call", "print", "time.time", "subprocess.call", "time.strftime", "print", "compressed_path.parent.exists", "compressed_path.parent.mkdir", "time.time", "os.system", "time.strftime", "print", "print", "str", "rsync_args.insert", "time.gmtime", "pathlib.Path", "str", "dataset.lower", "str", "pathlib.Path().exists", "time.gmtime", "str", "pathlib.Path", "pathlib.Path", "time.time", "pathlib.Path", "time.time"], "function", ["None"], ["def", "upload_to_server", "(", "web_dir", ",", "dataset", ",", "webserver", ",", "root_feat_dir", ",", "refresh", ")", ":", "\n", "# NOTE: The compression step will take a while. The last runs took:", "\n", "# celeba -> 02h00m23s", "\n", "\n", "    ", "server_dir", "=", "Path", "(", "web_dir", ")", "/", "\"data\"", "/", "\"datasets\"", "\n", "subprocess", ".", "call", "(", "[", "\"ssh\"", ",", "webserver", ",", "\"mkdir -p\"", ",", "str", "(", "server_dir", ")", "]", ")", "\n", "compressed_file", "=", "f\"{dataset}.tar.gz\"", "\n", "compressed_path", "=", "Path", "(", "\"data\"", ")", "/", "\"webserver-files\"", "/", "dataset", "/", "compressed_file", "\n", "if", "not", "compressed_path", ".", "parent", ".", "exists", "(", ")", ":", "\n", "        ", "compressed_path", ".", "parent", ".", "mkdir", "(", "exist_ok", "=", "True", ",", "parents", "=", "True", ")", "\n", "", "tar_include", "=", "Path", "(", "\"misc\"", ")", "/", "\"datasets\"", "/", "dataset", ".", "lower", "(", ")", "/", "\"tar_include.txt\"", "\n", "compression_args", "=", "(", "f\"tar --dereference --create --verbose\"", "\n", "f\" --file={str(compressed_path)}\"", "\n", "f\" --gzip  --files-from={tar_include}\"", ")", "\n", "print", "(", "f\"running command {compression_args}\"", ")", "\n", "\n", "if", "not", "Path", "(", "compressed_path", ")", ".", "exists", "(", ")", "or", "refresh", "[", "\"compression\"", "]", ":", "\n", "        ", "tic", "=", "time", ".", "time", "(", ")", "\n", "# TODO(Samuel): Figure out why using subprocess introduces tarring problems", "\n", "os", ".", "system", "(", "compression_args", ")", "\n", "duration", "=", "time", ".", "strftime", "(", "'%Hh%Mm%Ss'", ",", "time", ".", "gmtime", "(", "time", ".", "time", "(", ")", "-", "tic", ")", ")", "\n", "print", "(", "f\"Finished compressing dataset in {duration}\"", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "f\"Found existing compressed file at {compressed_path}, skipping....\"", ")", "\n", "\n", "", "dest", "=", "f\"{webserver}:{str(server_dir / compressed_file)}\"", "\n", "rsync_args", "=", "[", "\"rsync\"", ",", "\"-av\"", ",", "\"--progress\"", ",", "str", "(", "compressed_path", ")", ",", "dest", "]", "\n", "if", "not", "refresh", "[", "\"server\"", "]", ":", "\n", "        ", "rsync_args", ".", "insert", "(", "1", ",", "\"--ignore-existing\"", ")", "\n", "", "tic", "=", "time", ".", "time", "(", ")", "\n", "subprocess", ".", "call", "(", "rsync_args", ")", "\n", "duration", "=", "time", ".", "strftime", "(", "'%Hh%Mm%Ss'", ",", "time", ".", "gmtime", "(", "time", ".", "time", "(", ")", "-", "tic", ")", ")", "\n", "print", "(", "f\"Finished transferring features in {duration}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.misc.sync_datasets.fetch_from_server": [[60, 83], ["local_data_dir.mkdir", "subprocess.call", "ipdb.set_trace", "pathlib.Path", "local_data_dir.exists", "print", "local_archive.exists", "print", "subprocess.call", "print", "str", "local_archive.unlink", "str", "str"], "function", ["None"], ["", "def", "fetch_from_server", "(", "dataset", ",", "root_url", ",", "refresh", ",", "purge_tar_file", ")", ":", "\n", "    ", "local_data_dir", "=", "Path", "(", "\"data\"", ")", "/", "dataset", "\n", "if", "local_data_dir", ".", "exists", "(", ")", "and", "not", "refresh", "[", "\"data\"", "]", ":", "\n", "        ", "print", "(", "f\"Found dataset directory at {str(local_data_dir)}, skipping\"", ")", "\n", "return", "\n", "\n", "", "local_data_dir", ".", "mkdir", "(", "exist_ok", "=", "True", ",", "parents", "=", "True", ")", "\n", "archive_name", "=", "f\"{dataset}.tar.gz\"", "\n", "local_archive", "=", "local_data_dir", "/", "archive_name", "\n", "if", "not", "local_archive", ".", "exists", "(", ")", ":", "\n", "        ", "src_url", "=", "f\"{root_url}/datasets/{archive_name}\"", "\n", "wget_args", "=", "[", "\"wget\"", ",", "f\"--output-document={str(local_archive)}\"", ",", "src_url", "]", "\n", "print", "(", "f\"running command: {' '.join(wget_args)}\"", ")", "\n", "subprocess", ".", "call", "(", "wget_args", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "f\"found archive at {local_archive}, skipping...\"", ")", "\n", "\n", "# unpack the archive and optionally clean up", "\n", "", "untar_args", "=", "[", "\"tar\"", ",", "\"-xvf\"", ",", "str", "(", "local_archive", ")", "]", "\n", "subprocess", ".", "call", "(", "untar_args", ")", "\n", "if", "purge_tar_file", ":", "\n", "        ", "local_archive", ".", "unlink", "(", ")", "\n", "", "import", "ipdb", ";", "ipdb", ".", "set_trace", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.misc.gridder.generate_config_grid": [[9, 49], ["list", "list", "print", "open", "json.load", "itertools.product", "grid.keys", "copy.deepcopy", "zip", "dest_path.parent.mkdir", "grid.values", "pathlib.Path", "pathlib.Path", "print", "dest_path.exists", "open", "json.dump", "len", "str", "int", "str", "bool", "int", "int", "ValueError"], "function", ["home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config.ConfigParser.keys"], ["def", "generate_config_grid", "(", "base_config", ",", "grid_dir", ",", "grid", ",", "refresh", ")", ":", "\n", "    ", "with", "open", "(", "base_config", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "base", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "hparam_vals", "=", "[", "x", "for", "x", "in", "grid", ".", "values", "(", ")", "]", "\n", "grid_vals", "=", "list", "(", "itertools", ".", "product", "(", "*", "hparam_vals", ")", ")", "\n", "hparams", "=", "list", "(", "grid", ".", "keys", "(", ")", ")", "\n", "\n", "for", "cfg_vals", "in", "grid_vals", ":", "\n", "        ", "dest_name", "=", "Path", "(", "base_config", ")", ".", "stem", "\n", "config", "=", "copy", ".", "deepcopy", "(", "base", ")", "\n", "for", "hparam", ",", "val", "in", "zip", "(", "hparams", ",", "cfg_vals", ")", ":", "\n", "            ", "if", "hparam", "==", "\"smax\"", ":", "\n", "                ", "config", "[", "\"keypoint_regressor\"", "]", "[", "\"softmaxarg_mul\"", "]", "=", "val", "\n", "", "elif", "hparam", "==", "\"lr\"", ":", "\n", "                ", "config", "[", "\"optimizer\"", "]", "[", "\"args\"", "]", "[", "\"lr\"", "]", "=", "val", "\n", "", "elif", "hparam", "==", "\"bs\"", ":", "\n", "                ", "val", "=", "int", "(", "val", ")", "\n", "config", "[", "\"batch_size\"", "]", "=", "val", "\n", "", "elif", "hparam", "==", "\"upsample\"", ":", "\n", "                ", "val", "=", "bool", "(", "val", ")", "\n", "config", "[", "\"keypoint_regressor_upsample\"", "]", "=", "val", "\n", "", "elif", "hparam", "==", "\"warp\"", ":", "\n", "                ", "val", "=", "int", "(", "val", ")", "\n", "if", "val", ":", "\n", "                    ", "config", "[", "\"warper\"", "]", "=", "{", "\"type\"", ":", "\"WarperSingle\"", ",", "\"args\"", ":", "{", "}", "}", "\n", "", "config", "[", "\"keypoint_regressor_upsample\"", "]", "=", "val", "\n", "", "elif", "hparam", "==", "\"annos\"", ":", "\n", "                ", "config", "[", "\"restrict_annos\"", "]", "=", "int", "(", "val", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "f\"unknown hparam: {hparam}\"", ")", "\n", "", "dest_name", "+=", "f\"-{hparam}-{val}\"", "\n", "", "dest_path", "=", "Path", "(", "grid_dir", ")", "/", "f\"{dest_name}.json\"", "\n", "dest_path", ".", "parent", ".", "mkdir", "(", "exist_ok", "=", "True", ",", "parents", "=", "True", ")", "\n", "if", "not", "dest_path", ".", "exists", "(", ")", "or", "refresh", ":", "\n", "            ", "with", "open", "(", "str", "(", "dest_path", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "                ", "json", ".", "dump", "(", "config", ",", "f", ")", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "f\"grid file at {str(dest_path)} exists, skipping....\"", ")", "\n", "", "", "print", "(", "f\"Wrote {len(grid_vals)} configs to disk\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.misc.generate_exps.generate_configs": [[9, 95], ["open", "json.load", "open", "json.load", "model_name.split", "list", "list", "print", "model_name.split.pop", "int", "itertools.product", "grid.keys", "target.replace", "prefix.replace.replace", "prefix.replace.replace", "copy.deepcopy", "zip", "[].update", "str", "dest_path.parent.mkdir", "grid.values", "len", "len", "pathlib.Path", "print", "str", "str", "dest_path.exists", "open", "json.dump", "len", "pathlib.Path", "str", "int", "str", "bool", "int", "ValueError"], "function", ["home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config.ConfigParser.keys", "home.repos.pwc.inspect_result.jamt9000_DVE.trainer.trainer.AverageMeter.update"], ["def", "generate_configs", "(", "base_config", ",", "dest_dir", ",", "embeddings", ",", "grid", ",", "refresh", ",", "ckpts_path", ",", "\n", "target", ")", ":", "\n", "    ", "with", "open", "(", "base_config", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "base", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "with", "open", "(", "ckpts_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "ckpts", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "model_family", "=", "{", "\n", "\"smallnet\"", ":", "{", "\"preproc\"", ":", "{", "\"crop\"", ":", "15", ",", "\"imwidth\"", ":", "100", "}", ",", "\"name\"", ":", "\"SmallNet\"", "}", ",", "\n", "\"hourglass\"", ":", "{", "\"preproc\"", ":", "{", "\"crop\"", ":", "20", ",", "\"imwidth\"", ":", "136", "}", ",", "\"name\"", ":", "\"HourglassNet\"", "}", ",", "\n", "}", "\n", "\n", "for", "model_name", "in", "embeddings", ":", "\n", "\n", "# model naming convention: <dataset-tokens>-<model_type>-<embedding-dim>-<dve>", "\n", "        ", "tokens", "=", "model_name", ".", "split", "(", "\"-\"", ")", "\n", "if", "tokens", "[", "-", "1", "]", "==", "\"dve\"", ":", "\n", "            ", "tokens", ".", "pop", "(", ")", "# remove dve flag if present to use relative negative offsets", "\n", "", "model_type", ",", "embedding_dim", "=", "tokens", "[", "-", "2", "]", ",", "int", "(", "tokens", "[", "-", "1", "]", "[", ":", "-", "1", "]", ")", "\n", "preproc_kwargs", "=", "model_family", "[", "model_type", "]", "[", "\"preproc\"", "]", "\n", "\n", "hparam_vals", "=", "[", "x", "for", "x", "in", "grid", ".", "values", "(", ")", "]", "\n", "grid_vals", "=", "list", "(", "itertools", ".", "product", "(", "*", "hparam_vals", ")", ")", "\n", "hparams", "=", "list", "(", "grid", ".", "keys", "(", ")", ")", "\n", "\n", "if", "\"-ft-keypoints\"", "in", "target", ":", "\n", "            ", "prefix", "=", "target", ".", "replace", "(", "\"-keypoints\"", ",", "\"\"", ")", "\n", "prefix", "=", "prefix", ".", "replace", "(", "\"-limit-annos\"", ",", "\"\"", ")", "\n", "prefix", "=", "prefix", ".", "replace", "(", "\"-no-aug\"", ",", "\"\"", ")", "\n", "ckpt_name", "=", "f\"{prefix}-{model_name}\"", "\n", "", "else", ":", "\n", "            ", "ckpt_name", "=", "model_name", "\n", "", "epoch", "=", "ckpts", "[", "ckpt_name", "]", "[", "\"epoch\"", "]", "\n", "\n", "for", "cfg_vals", "in", "grid_vals", ":", "\n", "# dest_name = Path(base_config).stem", "\n", "            ", "config", "=", "copy", ".", "deepcopy", "(", "base", ")", "\n", "for", "hparam", ",", "val", "in", "zip", "(", "hparams", ",", "cfg_vals", ")", ":", "\n", "                ", "if", "hparam", "==", "\"smax\"", ":", "\n", "                    ", "config", "[", "\"keypoint_regressor\"", "]", "[", "\"softmaxarg_mul\"", "]", "=", "val", "\n", "", "elif", "hparam", "==", "\"lr\"", ":", "\n", "                    ", "config", "[", "\"optimizer\"", "]", "[", "\"args\"", "]", "[", "\"lr\"", "]", "=", "val", "\n", "", "elif", "hparam", "==", "\"bs\"", ":", "\n", "                    ", "val", "=", "int", "(", "val", ")", "\n", "config", "[", "\"batch_size\"", "]", "=", "val", "\n", "", "elif", "hparam", "==", "\"upsample\"", ":", "\n", "                    ", "val", "=", "bool", "(", "val", ")", "\n", "config", "[", "\"keypoint_regressor_upsample\"", "]", "=", "val", "\n", "", "elif", "hparam", "==", "\"annos\"", ":", "\n", "                    ", "config", "[", "\"restrict_annos\"", "]", "=", "int", "(", "val", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", "f\"unknown hparam: {hparam}\"", ")", "\n", "", "", "ckpt", "=", "f\"checkpoint-epoch{epoch}.pth\"", "\n", "timestamp", "=", "ckpts", "[", "ckpt_name", "]", "[", "\"timestamp\"", "]", "\n", "ckpt_path", "=", "Path", "(", "\"data/saved/models\"", ")", "/", "ckpt_name", "/", "timestamp", "/", "ckpt", "\n", "config", "[", "\"arch\"", "]", "[", "\"type\"", "]", "=", "model_family", "[", "model_type", "]", "[", "\"name\"", "]", "\n", "config", "[", "\"arch\"", "]", "[", "\"args\"", "]", "[", "\"num_output_channels\"", "]", "=", "embedding_dim", "\n", "config", "[", "\"dataset\"", "]", "[", "\"args\"", "]", ".", "update", "(", "preproc_kwargs", ")", "\n", "config", "[", "\"finetune_from\"", "]", "=", "str", "(", "ckpt_path", ")", "\n", "if", "\"-ft\"", "in", "str", "(", "dest_dir", ")", "and", "\"-keypoints\"", "not", "in", "str", "(", "dest_dir", ")", ":", "\n", "                ", "loss", "=", "\"dense_correlation_loss\"", "\n", "if", "\"dve\"", "in", "model_name", ":", "\n", "                    ", "loss", "+=", "\"_dve\"", "\n", "", "config", "[", "\"loss\"", "]", "=", "loss", "\n", "# avoid OOM for hourglass", "\n", "if", "\"hourglass\"", "in", "model_name", ":", "\n", "                    ", "config", "[", "\"batch_size\"", "]", "=", "16", "\n", "", "", "if", "\"annos\"", "in", "grid", ":", "\n", "                ", "model_name_", "=", "f\"{config['restrict_annos']}-annos-{model_name}\"", "\n", "", "else", ":", "\n", "                ", "model_name_", "=", "model_name", "\n", "", "if", "len", "(", "grid", "[", "\"lr\"", "]", ")", ">", "1", ":", "\n", "                ", "model_name_", "=", "f\"{model_name_}-lr{config['optimizer']['args']['lr']}\"", "\n", "", "if", "len", "(", "grid", "[", "\"bs\"", "]", ")", ">", "1", ":", "\n", "                ", "model_name_", "=", "f\"{model_name_}-bs{config['batch_size']}\"", "\n", "\n", "\n", "", "dest_path", "=", "Path", "(", "dest_dir", ")", "/", "f\"{model_name_}.json\"", "\n", "dest_path", ".", "parent", ".", "mkdir", "(", "exist_ok", "=", "True", ",", "parents", "=", "True", ")", "\n", "if", "not", "dest_path", ".", "exists", "(", ")", "or", "refresh", ":", "\n", "                ", "with", "open", "(", "str", "(", "dest_path", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "                    ", "json", ".", "dump", "(", "config", ",", "f", ",", "indent", "=", "4", ",", "sort_keys", "=", "False", ")", "\n", "", "", "else", ":", "\n", "                ", "print", "(", "f\"config file at {str(dest_path)} exists, skipping....\"", ")", "\n", "", "", "print", "(", "f\"Wrote {len(grid_vals)} configs to disk\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.misc.profile_backbone.get_profile_name": [[20, 32], ["name_map.items", "model_type.replace.replace"], "function", ["None"], ["def", "get_profile_name", "(", "model_type", ",", "keypoint_reg", ",", "imwidth", ",", "upsample", ")", ":", "\n", "    ", "name_map", "=", "{", "\"SmallNet\"", ":", "\"SmallNet\"", ",", "\"HourglassNet\"", ":", "\"Hourglass\"", "}", "\n", "for", "key", ",", "val", "in", "name_map", ".", "items", "(", ")", ":", "\n", "        ", "model_type", "=", "model_type", ".", "replace", "(", "key", ",", "val", ")", "\n", "", "model_name", "=", "\"{}, image size {},\"", ".", "format", "(", "model_type", ",", "imwidth", ")", "\n", "if", "keypoint_reg", ":", "\n", "        ", "model_name", "+=", "\" backbone+regressor\"", "\n", "", "else", ":", "\n", "        ", "model_name", "+=", "\" backbone\"", "\n", "", "if", "keypoint_reg", "and", "upsample", ":", "\n", "        ", "model_name", "+=", "\" (+upsample)\"", "\n", "", "return", "model_name", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.misc.profile_backbone.main": [[34, 125], ["torch.device", "torch.device", "torch.cuda.is_available", "torch.cuda.is_available", "profile_backbone.get_profile_name", "utils.get_instance", "torch.utils.data.DataLoader", "utils.get_instance", "nn.Sequential.to", "nn.Sequential.eval", "thop.profile", "template.format.format", "print", "utils.get_instance", "utils.NoGradWrapper", "torch.no_grad", "torch.no_grad", "time.time", "enumerate", "numpy.mean", "numpy.std", "torch.Sequential", "torch.Sequential", "batch[].to", "nn.Sequential.", "time.time", "utils.Up", "timings.append", "time.time"], "function", ["home.repos.pwc.inspect_result.jamt9000_DVE.misc.profile_backbone.get_profile_name", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.util.get_instance", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.util.get_instance", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.util.get_instance"], ["", "def", "main", "(", "config", ")", ":", "\n", "\n", "    ", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n", "for", "model_type", "in", "\"SmallNet\"", ",", "\"HourglassNet\"", ":", "\n", "        ", "for", "imwidth", "in", "70", ",", "96", ",", "128", ":", "\n", "            ", "for", "keypoint_reg", "in", "False", ",", "True", ":", "\n", "                ", "for", "upsample", "in", "False", ",", "True", ":", "\n", "\n", "                    ", "if", "upsample", "and", "not", "keypoint_reg", ":", "\n", "                        ", "continue", "# not needed", "\n", "", "if", "model_type", "==", "\"HourglassNet\"", "and", "imwidth", "not", "in", "{", "96", ",", "128", "}", ":", "\n", "                        ", "continue", "# not needed", "\n", "", "if", "model_type", "==", "\"SmallNet\"", "and", "imwidth", "not", "in", "{", "70", ",", "128", "}", ":", "\n", "                        ", "continue", "# not needed", "\n", "\n", "", "profile_name", "=", "get_profile_name", "(", "\n", "model_type", "=", "model_type", ",", "\n", "keypoint_reg", "=", "keypoint_reg", ",", "\n", "upsample", "=", "upsample", ",", "\n", "imwidth", "=", "imwidth", ",", "\n", ")", "\n", "config", "[", "\"dataset\"", "]", "[", "\"args\"", "]", "=", "{", "\"imwidth\"", ":", "imwidth", "}", "\n", "val_dataset", "=", "get_instance", "(", "\n", "module", "=", "module_data", ",", "\n", "name", "=", "'dataset'", ",", "\n", "config", "=", "config", ",", "\n", "train", "=", "False", ",", "\n", ")", "\n", "val_loader", "=", "DataLoader", "(", "\n", "val_dataset", ",", "\n", "batch_size", "=", "config", "[", "\"batch_size\"", "]", ",", "\n", ")", "\n", "config", "[", "\"arch\"", "]", "=", "{", "\n", "\"type\"", ":", "model_type", ",", "\n", "\"args\"", ":", "{", "\"num_output_channels\"", ":", "64", "}", ",", "\n", "}", "\n", "\n", "model", "=", "get_instance", "(", "module_arch", ",", "'arch'", ",", "config", ")", "\n", "\n", "if", "keypoint_reg", ":", "\n", "                        ", "descdim", "=", "config", "[", "'arch'", "]", "[", "'args'", "]", "[", "'num_output_channels'", "]", "\n", "kp_regressor", "=", "get_instance", "(", "module_arch", ",", "'keypoint_regressor'", ",", "\n", "config", ",", "\n", "descriptor_dimension", "=", "descdim", ")", "\n", "basemodel", "=", "NoGradWrapper", "(", "model", ")", "\n", "\n", "if", "upsample", ":", "\n", "                            ", "model", "=", "nn", ".", "Sequential", "(", "basemodel", ",", "Up", "(", ")", ",", "kp_regressor", ")", "\n", "", "else", ":", "\n", "                            ", "model", "=", "nn", ".", "Sequential", "(", "basemodel", ",", "kp_regressor", ")", "\n", "# model.summary()", "\n", "\n", "# prepare model for testing", "\n", "", "", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "model", ".", "eval", "(", ")", "\n", "timings", "=", "[", "]", "\n", "warmup", "=", "3", "\n", "num_batches", "=", "10", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# count = 0", "\n", "                        ", "tic", "=", "time", ".", "time", "(", ")", "\n", "for", "ii", ",", "batch", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "                            ", "data", "=", "batch", "[", "\"data\"", "]", ".", "to", "(", "device", ")", "\n", "batch_size", "=", "data", ".", "shape", "[", "0", "]", "\n", "_", "=", "model", "(", "data", ")", "\n", "speed", "=", "batch_size", "/", "(", "time", ".", "time", "(", ")", "-", "tic", ")", "\n", "if", "ii", ">", "warmup", ":", "\n", "                                ", "timings", ".", "append", "(", "speed", ")", "\n", "", "if", "ii", ">", "warmup", "+", "num_batches", ":", "\n", "                                ", "break", "\n", "# print(\"speed: {:.3f}Hz\".format(speed))", "\n", "", "tic", "=", "time", ".", "time", "(", ")", "\n", "# count += batch_size", "\n", "\n", "", "", "flops", ",", "params", "=", "profile", "(", "\n", "model", ",", "\n", "input_size", "=", "(", "1", ",", "3", ",", "imwidth", ",", "imwidth", ")", ",", "\n", "verbose", "=", "False", ",", "\n", ")", "\n", "# use format so that its easy to latexify", "\n", "template", "=", "\"{} & {:.1f} & {:.1f} & ${:.1f} (\\\\pm {:.1f})$\\\\\\\\\"", "\n", "template", "=", "template", ".", "format", "(", "\n", "profile_name", ",", "\n", "params", "/", "10", "**", "6", ",", "\n", "flops", "/", "10", "**", "9", ",", "\n", "np", ".", "mean", "(", "timings", ")", ",", "\n", "np", ".", "std", "(", "timings", ")", ",", "\n", ")", "\n", "print", "(", "template", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.misc.vis_avgface.grow_axis": [[67, 70], ["ax.set_position", "ax.get_position", "matplotlib.transforms.Bbox.from_extents", "matplotlib.transforms.Bbox.from_extents"], "function", ["None"], ["def", "grow_axis", "(", "ax", ",", "d", ")", ":", "\n", "    ", "l", ",", "b", ",", "r", ",", "t", "=", "ax", ".", "get_position", "(", ")", ".", "extents", "\n", "ax", ".", "set_position", "(", "matplotlib", ".", "transforms", ".", "Bbox", ".", "from_extents", "(", "(", "l", "-", "d", ",", "b", "-", "d", ",", "r", "+", "d", ",", "t", "+", "d", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.misc.vis_avgface.load_model_for_eval": [[72, 82], ["utils.util.read_json", "utils.get_instance", "utils.get_instance.summary", "torch.load", "utils.get_instance.load_state_dict", "utils.get_instance.eval", "utils.clean_state_dict", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.jamt9000_DVE.utils.util.read_json", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.util.get_instance", "home.repos.pwc.inspect_result.jamt9000_DVE.base.base_model.BaseModel.summary", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.util.clean_state_dict"], ["", "def", "load_model_for_eval", "(", "checkpoint", ")", ":", "\n", "    ", "config_file", "=", "Path", "(", "checkpoint", ")", ".", "parent", "/", "'config.json'", "\n", "config", "=", "read_json", "(", "config_file", ")", "\n", "model", "=", "get_instance", "(", "module_arch", ",", "'arch'", ",", "config", ")", "\n", "model", ".", "summary", "(", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "checkpoint", ",", "map_location", "=", "'cpu'", ")", "\n", "state_dict", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "model", ".", "load_state_dict", "(", "clean_state_dict", "(", "state_dict", ")", ")", "\n", "model", ".", "eval", "(", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.misc.vis_avgface.nudge_axis": [[171, 174], ["ax.set_position", "ax.get_position", "matplotlib.transforms.Bbox.from_extents", "matplotlib.transforms.Bbox.from_extents"], "function", ["None"], ["def", "nudge_axis", "(", "ax", ",", "d", ")", ":", "\n", "    ", "l", ",", "b", ",", "r", ",", "t", "=", "ax", ".", "get_position", "(", ")", ".", "extents", "\n", "ax", ".", "set_position", "(", "matplotlib", ".", "transforms", ".", "Bbox", ".", "from_extents", "(", "(", "l", "+", "d", ",", "b", ",", "r", "+", "d", ",", "t", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.misc.vis_avgface.ax_reset": [[207, 214], ["matplotlib.cla", "matplotlib.axis", "matplotlib.xlim", "matplotlib.ylim", "matplotlib.xticks", "matplotlib.yticks", "query_ax.get_xlim", "query_ax.get_ylim"], "function", ["None"], ["", "", "def", "ax_reset", "(", ")", ":", "\n", "    ", "plt", ".", "cla", "(", ")", "\n", "plt", ".", "axis", "(", "'square'", ")", "\n", "plt", ".", "xlim", "(", "query_ax", ".", "get_xlim", "(", ")", ")", "\n", "plt", ".", "ylim", "(", "query_ax", ".", "get_ylim", "(", ")", ")", "\n", "plt", ".", "xticks", "(", "[", "]", ",", "[", "]", ")", "\n", "plt", ".", "yticks", "(", "[", "]", ",", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.misc.vis_avgface.tween_scatter": [[216, 300], ["vis_avgface.ax_reset", "matplotlib.gca", "matplotlib.subplot", "int", "matplotlib.gridspec.GridSpec", "matplotlib.gridspec.GridSpec", "plt.gca.get_position", "matplotlib.gridspec.GridSpec.update", "range", "matplotlib.sca", "matplotlib.text", "matplotlib.text", "numpy.sqrt", "numpy.maximum", "numpy.maximum", "matplotlib.gcf().add_subplot", "vis_avgface.ax_reset", "matplotlib.scatter", "plt.text.set_alpha", "plt.text.set_alpha", "plt.text.set_alpha", "plt.text.set_alpha", "matplotlib.suptitle", "matplotlib.text", "matplotlib.text", "plt.text.update_from", "plt.suptitle.set_fontsize", "plt.text.update_from", "matplotlib.text", "plt.text.update_from", "plt.suptitle.set_alpha", "plt.text.set_alpha", "len", "matplotlib.imshow", "matplotlib.imshow", "matplotlib.gcf", "matplotlib.figure", "matplotlib.subplot", "matplotlib.sca", "matplotlib.imshow", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.scatter", "matplotlib.savefig", "zs_dispFig", "matplotlib.figure", "matplotlib.gcf", "utils.visualization.norm_range().permute", "utils.visualization.norm_range().permute", "matplotlib.gca().get_position", "plt.gca.get_position", "utils.visualization.norm_range().permute", "str", "plt.suptitle.get_position", "plt.suptitle.get_position", "numpy.cos", "range", "utils.visualization.norm_range", "utils.visualization.norm_range", "matplotlib.gca", "utils.visualization.norm_range", "pathlib.Path", "min", "len", "len"], "function", ["home.repos.pwc.inspect_result.jamt9000_DVE.misc.vis_avgface_patches.ax_reset", "home.repos.pwc.inspect_result.jamt9000_DVE.trainer.trainer.AverageMeter.update", "home.repos.pwc.inspect_result.jamt9000_DVE.misc.vis_avgface_patches.ax_reset", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.visualization.norm_range", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.visualization.norm_range", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.visualization.norm_range"], ["", "def", "tween_scatter", "(", "t", ",", "im1", ",", "im2", ",", "scatter1", ",", "scatter2", ",", "title1", ",", "title2", ",", "fade_ims", "=", "True", ",", "\n", "heading1", "=", "None", ",", "heading2", "=", "None", ",", "frame", "=", "None", ",", "is_dve", "=", "None", ")", ":", "\n", "    ", "ax_reset", "(", ")", "\n", "base_subplot", "=", "plt", ".", "gca", "(", ")", "\n", "plt", ".", "subplot", "(", "base_subplot", ")", "\n", "\n", "gridsize", "=", "int", "(", "np", ".", "sqrt", "(", "len", "(", "im1", ")", ")", ")", "\n", "\n", "inner_grid", "=", "matplotlib", ".", "gridspec", ".", "GridSpec", "(", "gridsize", ",", "gridsize", ",", "hspace", "=", "0.05", ",", "wspace", "=", "0.05", ")", "\n", "bb", "=", "base_subplot", ".", "get_position", "(", ")", "\n", "l", ",", "b", ",", "r", ",", "tp", "=", "bb", ".", "extents", "\n", "inner_grid", ".", "update", "(", "left", "=", "l", ",", "bottom", "=", "b", ",", "right", "=", "r", ",", "top", "=", "tp", ")", "\n", "\n", "if", "fade_ims", ":", "\n", "        ", "prev_alpha", "=", "np", ".", "maximum", "(", "0.", ",", "1", "-", "2", "*", "t", ")", "\n", "cur_alpha", "=", "np", ".", "maximum", "(", "0.", ",", "-", "1", "+", "2", "*", "t", ")", "\n", "", "else", ":", "\n", "        ", "prev_alpha", "=", "0.", "\n", "cur_alpha", "=", "1.", "\n", "\n", "", "for", "gi", "in", "range", "(", "gridsize", "**", "2", ")", ":", "\n", "        ", "gax", "=", "plt", ".", "gcf", "(", ")", ".", "add_subplot", "(", "inner_grid", "[", "gi", "]", ")", "\n", "\n", "ax_reset", "(", ")", "\n", "\n", "if", "prev_alpha", ":", "\n", "            ", "plt", ".", "imshow", "(", "norm_range", "(", "im1", "[", "gi", "]", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ",", "alpha", "=", "prev_alpha", ")", "\n", "", "if", "cur_alpha", ":", "\n", "            ", "plt", ".", "imshow", "(", "norm_range", "(", "im2", "[", "gi", "]", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ",", "alpha", "=", "cur_alpha", ")", "\n", "\n", "", "ease", "=", "(", "-", "np", ".", "cos", "(", "np", ".", "pi", "*", "t", ")", "+", "1", ")", "/", "2", "\n", "scatter_tween", "=", "(", "1", "-", "ease", ")", "*", "scatter1", "[", "gi", "]", "+", "ease", "*", "scatter2", "[", "gi", "]", "\n", "\n", "fac", "=", "plt", ".", "gca", "(", ")", ".", "get_position", "(", ")", ".", "width", "/", "base_subplot", ".", "get_position", "(", ")", ".", "width", "\n", "plt", ".", "scatter", "(", "scatter_tween", "[", ":", ",", "0", "]", ",", "scatter_tween", "[", ":", ",", "1", "]", ",", "c", "=", "rainbow", ",", "\n", "s", "=", "(", "matplotlib", ".", "rcParams", "[", "'lines.markersize'", "]", "*", "fac", ")", "**", "2", ")", "\n", "\n", "if", "frame", "==", "args", ".", "hq_frame_snapshot", "and", "args", ".", "save_hq_ims", ":", "\n", "# create temp figure inline", "\n", "            ", "prev_fig", "=", "plt", ".", "gcf", "(", ")", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "15", ",", "15", ")", ")", "\n", "inline_ax", "=", "plt", ".", "subplot", "(", "1", ",", "1", ",", "1", ")", "\n", "plt", ".", "sca", "(", "inline_ax", ")", "\n", "plt", ".", "imshow", "(", "norm_range", "(", "im1", "[", "gi", "]", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "plt", ".", "xticks", "(", "[", "]", ",", "[", "]", ")", "\n", "plt", ".", "yticks", "(", "[", "]", ",", "[", "]", ")", "\n", "fname", "=", "f\"frame{frame}-match-face{gi}\"", "\n", "if", "is_dve", "is", "not", "None", "and", "is_dve", ":", "\n", "                ", "fname", "+=", "\"-dve\"", "\n", "", "plt", ".", "scatter", "(", "scatter2", "[", "gi", "]", "[", ":", ",", "0", "]", ",", "scatter2", "[", "gi", "]", "[", ":", ",", "1", "]", ",", "c", "=", "rainbow", ",", "\n", "s", "=", "(", "matplotlib", ".", "rcParams", "[", "'lines.markersize'", "]", "*", "8", ")", "**", "2", ")", "\n", "plt", ".", "savefig", "(", "str", "(", "Path", "(", "args", ".", "fig_dir", ")", "/", "f\"{fname}.png\"", ")", ")", "\n", "zs_dispFig", "(", ")", "\n", "\n", "# return to prev figure", "\n", "plt", ".", "figure", "(", "prev_fig", ".", "number", ")", "\n", "\n", "", "", "plt", ".", "sca", "(", "base_subplot", ")", "\n", "ttl1", "=", "plt", ".", "text", "(", "0.5", ",", "-", ".08", ",", "title1", ",", "transform", "=", "base_subplot", ".", "transAxes", ",", "horizontalalignment", "=", "'center'", ")", "\n", "ttl2", "=", "plt", ".", "text", "(", "0.5", ",", "-", ".08", ",", "title2", ",", "transform", "=", "base_subplot", ".", "transAxes", ",", "horizontalalignment", "=", "'center'", ")", "\n", "if", "title1", "==", "title2", ":", "\n", "        ", "ttl1", ".", "set_alpha", "(", "1", ")", "\n", "ttl2", ".", "set_alpha", "(", "0", ")", "\n", "", "else", ":", "\n", "        ", "ttl1", ".", "set_alpha", "(", "1", "-", "t", ")", "\n", "ttl2", ".", "set_alpha", "(", "t", ")", "\n", "\n", "", "if", "heading2", "is", "not", "None", ":", "\n", "        ", "h1", "=", "plt", ".", "suptitle", "(", "heading1", ",", "x", "=", "0.5", ",", "y", "=", "0.94", ")", "\n", "h2", "=", "plt", ".", "text", "(", "*", "h1", ".", "get_position", "(", ")", ",", "heading2", ")", "\n", "\n", "foot", "=", "plt", ".", "text", "(", "0.5", ",", "0.08", ",", "'DVE enables the use of higher dimensional unsupervised embeddings!'", ")", "\n", "foot", ".", "update_from", "(", "h1", ")", "\n", "\n", "h1", ".", "set_fontsize", "(", "'x-large'", ")", "\n", "h2", ".", "update_from", "(", "h1", ")", "\n", "\n", "# Prevent flashing from font aliasing and alpha - brittle if not monospace and makes it too bold though", "\n", "cover", "=", "''", ".", "join", "(", "[", "heading1", "[", "i", "]", "if", "heading1", "[", "i", "]", "==", "heading2", "[", "i", "]", "else", "'\\u00a0'", "for", "i", "in", "range", "(", "min", "(", "len", "(", "heading1", ")", ",", "len", "(", "heading2", ")", ")", ")", "]", ")", "\n", "hc", "=", "plt", ".", "text", "(", "*", "h1", ".", "get_position", "(", ")", ",", "cover", ")", "\n", "hc", ".", "update_from", "(", "h1", ")", "\n", "\n", "h1", ".", "set_alpha", "(", "1", "-", "t", ")", "\n", "h2", ".", "set_alpha", "(", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.misc.vis_avgface.get_match_grid": [[303, 311], ["numpy.array", "test_matching.find_descriptor", "np.array.append"], "function", ["home.repos.pwc.inspect_result.jamt9000_DVE.None.test_matching.find_descriptor"], ["", "", "def", "get_match_grid", "(", "src", ",", "dest", ",", "stride", ")", ":", "\n", "    ", "scatter_xy", "=", "[", "]", "\n", "for", "i", "in", "i_idxs", ":", "\n", "        ", "for", "j", "in", "j_idxs", ":", "\n", "            ", "jj", ",", "ii", "=", "find_descriptor", "(", "j", ",", "i", ",", "src", ",", "dest", ",", "stride", ")", "\n", "scatter_xy", ".", "append", "(", "[", "jj", ",", "ii", "]", ")", "\n", "", "", "scatter_xy", "=", "np", ".", "array", "(", "scatter_xy", ")", "\n", "return", "scatter_xy", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.misc.vis_avgface_patches.grow_axis": [[56, 59], ["ax.set_position", "ax.get_position", "matplotlib.transforms.Bbox.from_extents", "matplotlib.transforms.Bbox.from_extents"], "function", ["None"], ["", "def", "grow_axis", "(", "ax", ",", "d", ")", ":", "\n", "    ", "l", ",", "b", ",", "r", ",", "t", "=", "ax", ".", "get_position", "(", ")", ".", "extents", "\n", "ax", ".", "set_position", "(", "matplotlib", ".", "transforms", ".", "Bbox", ".", "from_extents", "(", "(", "l", "-", "d", ",", "b", "-", "d", ",", "r", "+", "d", ",", "t", "+", "d", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.misc.vis_avgface_patches.nudge_axis": [[61, 64], ["ax.set_position", "ax.get_position", "matplotlib.transforms.Bbox.from_extents", "matplotlib.transforms.Bbox.from_extents"], "function", ["None"], ["", "def", "nudge_axis", "(", "ax", ",", "d", ")", ":", "\n", "    ", "l", ",", "b", ",", "r", ",", "t", "=", "ax", ".", "get_position", "(", ")", ".", "extents", "\n", "ax", ".", "set_position", "(", "matplotlib", ".", "transforms", ".", "Bbox", ".", "from_extents", "(", "(", "l", "+", "d", ",", "b", ",", "r", "+", "d", ",", "t", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.misc.vis_avgface_patches.load_model_for_eval": [[66, 76], ["utils.util.read_json", "utils.get_instance", "utils.get_instance.summary", "torch.load", "utils.get_instance.load_state_dict", "utils.get_instance.eval", "utils.clean_state_dict", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.jamt9000_DVE.utils.util.read_json", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.util.get_instance", "home.repos.pwc.inspect_result.jamt9000_DVE.base.base_model.BaseModel.summary", "home.repos.pwc.inspect_result.jamt9000_DVE.utils.util.clean_state_dict"], ["", "def", "load_model_for_eval", "(", "checkpoint", ")", ":", "\n", "    ", "config_file", "=", "Path", "(", "checkpoint", ")", ".", "parent", "/", "'config.json'", "\n", "config", "=", "read_json", "(", "config_file", ")", "\n", "model", "=", "get_instance", "(", "module_arch", ",", "'arch'", ",", "config", ")", "\n", "model", ".", "summary", "(", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "checkpoint", ",", "map_location", "=", "'cpu'", ")", "\n", "state_dict", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "model", ".", "load_state_dict", "(", "clean_state_dict", "(", "state_dict", ")", ")", "\n", "model", ".", "eval", "(", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.misc.vis_avgface_patches.ax_reset": [[133, 140], ["matplotlib.cla", "matplotlib.axis", "matplotlib.xlim", "matplotlib.ylim", "matplotlib.xticks", "matplotlib.yticks", "query_ax.get_xlim", "query_ax.get_ylim"], "function", ["None"], ["def", "ax_reset", "(", ")", ":", "\n", "    ", "plt", ".", "cla", "(", ")", "\n", "plt", ".", "axis", "(", "'square'", ")", "\n", "plt", ".", "xlim", "(", "query_ax", ".", "get_xlim", "(", ")", ")", "\n", "plt", ".", "ylim", "(", "query_ax", ".", "get_ylim", "(", ")", ")", "\n", "plt", ".", "xticks", "(", "[", "]", ",", "[", "]", ")", "\n", "plt", ".", "yticks", "(", "[", "]", ",", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.misc.sync_checkpoints.sync_between_servers": [[11, 65], ["json.load.items", "open", "json.load", "filetypes.items", "rel_dir.startswith", "print", "print", "print", "pathlib.Path", "abs_path.exists", "print", "subprocess.call", "os.system", "os.system", "pathlib.Path", "str", "str", "str"], "function", ["None"], ["def", "sync_between_servers", "(", "save_dir", ",", "src_server", ",", "dest_server", ",", "refresh", ",", "ckpt_list", ")", ":", "\n", "    ", "with", "open", "(", "ckpt_list", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "ckpts", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "for", "key", ",", "subdict", "in", "ckpts", ".", "items", "(", ")", ":", "\n", "        ", "rel_dir", "=", "subdict", "[", "\"timestamp\"", "]", "\n", "epoch", "=", "subdict", "[", "\"epoch\"", "]", "\n", "\n", "filetypes", "=", "{", "\n", "\"log\"", ":", "[", "\"info.log\"", "]", ",", "\n", "\"models\"", ":", "[", "f\"checkpoint-epoch{epoch}.pth\"", ",", "\"config.json\"", "]", "\n", "}", "\n", "#\u00a0TODO(Samuel): cleanup code mess", "\n", "\n", "# copy experiment artifacts", "\n", "for", "filetype", ",", "fnames", "in", "filetypes", ".", "items", "(", ")", ":", "\n", "            ", "for", "fname", "in", "fnames", ":", "\n", "                ", "if", "rel_dir", ".", "startswith", "(", "\"TODO\"", ")", ":", "\n", "                    ", "print", "(", "f\"Checkpoint (TODO) for {key}, skipping...\"", ")", "\n", "continue", "\n", "", "rel_path", "=", "Path", "(", "rel_dir", ")", "/", "fname", "\n", "abs_path", "=", "Path", "(", "save_dir", ")", "/", "filetype", "/", "key", "/", "rel_path", "\n", "print", "(", "f\"{key} -> {abs_path} [{src_server} -> {dest_server}]\"", ")", "\n", "# check if destination exists", "\n", "if", "not", "dest_server", "==", "\"localhost\"", ":", "\n", "                    ", "cmd", "=", "f'ssh {dest_server} \"test -f {str(abs_path)}\"'", "\n", "exists", "=", "not", "os", ".", "system", "(", "cmd", ")", "\n", "", "else", ":", "\n", "                    ", "exists", "=", "abs_path", ".", "exists", "(", ")", "\n", "", "if", "exists", "and", "not", "refresh", ":", "\n", "                    ", "print", "(", "f\"found {abs_path} on dest server, skipping\"", ")", "\n", "continue", "\n", "\n", "", "if", "not", "dest_server", "==", "\"localhost\"", ":", "\n", "                    ", "subprocess", ".", "call", "(", "[", "\"ssh\"", ",", "dest_server", ",", "\"mkdir -p\"", ",", "str", "(", "abs_path", ".", "parent", ")", "]", ")", "\n", "", "else", ":", "\n", "                    ", "os", ".", "system", "(", "f\"mkdir -p {str(abs_path.parent)}\"", ")", "\n", "\n", "", "cmd", "=", "\"scp\"", "\n", "if", "not", "src_server", "==", "\"localhost\"", ":", "\n", "                    ", "src_path", "=", "f\"{src_server}:{abs_path}\"", "\n", "", "else", ":", "\n", "                    ", "src_path", "=", "abs_path", "\n", "\n", "", "if", "not", "dest_server", "==", "\"localhost\"", ":", "\n", "                    ", "dest_path", "=", "f\"{dest_server}:{abs_path}\"", "\n", "", "else", ":", "\n", "                    ", "dest_path", "=", "abs_path", "\n", "\n", "", "if", "not", "(", "src_server", "==", "\"localhost\"", "or", "dest_server", "==", "\"localhost\"", ")", ":", "\n", "                    ", "cmd", "+=", "\" -3\"", "\n", "\n", "", "sync_cmd", "=", "f\"{cmd} {src_path} {dest_path}\"", "\n", "print", "(", "f\"running command {sync_cmd}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.misc.update_deprecated_exps.parse_tboard_files": [[27, 61], ["list", "print", "pathlib.Path().glob", "len", "tf.train.summary_iterator", "str", "protobuf_to_dict", "time.strftime", "print", "pathlib.Path", "time.gmtime", "gen_log.append", "print", "ipdb.set_trace"], "function", ["None"], ["def", "parse_tboard_files", "(", "rel_dir", ")", ":", "\n", "    ", "import", "tensorflow", "as", "tf", "\n", "from", "protobuf_to_dict", "import", "protobuf_to_dict", "\n", "tboard_files", "=", "list", "(", "Path", "(", "rel_dir", ")", ".", "glob", "(", "\"events.out.tfevents.*\"", ")", ")", "\n", "assert", "len", "(", "tboard_files", ")", "==", "1", ",", "\"expected a single tensorboard file\"", "\n", "tboard_file_path", "=", "tboard_files", "[", "0", "]", "\n", "gen_log", "=", "[", "f\"This log was generated from tensorboard file {tboard_file_path.name}\"", "]", "\n", "count", "=", "0", "\n", "try", ":", "\n", "        ", "for", "summary", "in", "tf", ".", "train", ".", "summary_iterator", "(", "str", "(", "tboard_file_path", ")", ")", ":", "\n", "            ", "count", "+=", "1", "\n", "summary", "=", "protobuf_to_dict", "(", "summary", ")", "\n", "if", "count", ">", "1000", ":", "\n", "                ", "break", "\n", "", "if", "\"step\"", "not", "in", "summary", ":", "\n", "                ", "continue", "\n", "", "step", "=", "summary", "[", "\"step\"", "]", "\n", "ts", "=", "time", ".", "strftime", "(", "'%Y-%m-%d:%Hh%Mm%Ss'", ",", "time", ".", "gmtime", "(", "summary", "[", "\"wall_time\"", "]", ")", ")", "\n", "if", "\"summary\"", "in", "summary", "and", "summary", "[", "\"summary\"", "]", "[", "\"value\"", "]", ":", "\n", "                ", "value", "=", "summary", "[", "\"summary\"", "]", "[", "\"value\"", "]", "\n", "if", "\"simple_value\"", "in", "value", "[", "0", "]", ":", "\n", "                    ", "vals", "=", "[", "f\"{x['tag']}: {x['simple_value']}\"", "for", "x", "in", "value", "]", "\n", "if", "step", "%", "2000", "==", "0", "or", "value", "[", "0", "]", "[", "\"tag\"", "]", "!=", "\"train/loss\"", ":", "\n", "                        ", "row", "=", "f\"{ts} step: {step}, {','.join(vals)}\"", "\n", "gen_log", ".", "append", "(", "row", ")", "\n", "print", "(", "row", ")", "\n", "", "", "elif", "\"image\"", "in", "value", "[", "0", "]", ":", "\n", "                    ", "pass", "\n", "", "else", ":", "\n", "                    ", "import", "ipdb", ";", "ipdb", ".", "set_trace", "(", ")", "\n", "", "", "", "", "except", "tf", ".", "errors", ".", "DataLossError", "as", "DLE", ":", "\n", "        ", "print", "(", "f\"{DLE} Could not parse any further information\"", ")", "\n", "", "print", "(", "f\"parsed {count} summaries\"", ")", "\n", "return", "gen_log", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.misc.update_deprecated_exps.modernize_exp_dir": [[63, 107], ["config_path.parent.mkdir", "rel_dir.split", "pathlib.Path", "pathlib.Path", "print", "shutil.copyfile", "print", "print", "shutil.copyfile", "print", "update_deprecated_exps.parse_tboard_files", "dest_log.parent.mkdir", "logger.setup_logging", "logging.getLogger", "argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "parse_config.ConfigParser", "test_matching.evaluation", "print", "config_path.exists", "str", "str", "model_path.exists", "str", "str", "dest_log.exists", "logging.getLogger.info", "pathlib.Path", "str", "pathlib.Path", "pathlib.Path", "pathlib.Path", "str", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.jamt9000_DVE.misc.update_deprecated_exps.parse_tboard_files", "home.repos.pwc.inspect_result.jamt9000_DVE.logger.logger.setup_logging", "home.repos.pwc.inspect_result.jamt9000_DVE.None.test_matching.evaluation"], ["", "def", "modernize_exp_dir", "(", "experiments", ",", "checkpoints", ",", "save_dir", ",", "refresh", ")", ":", "\n", "    ", "for", "key", "in", "experiments", ":", "\n", "        ", "rel_dir", "=", "checkpoints", "[", "key", "]", "[", "\"timestamp\"", "]", "\n", "\n", "timestamp", "=", "rel_dir", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "src_config", "=", "Path", "(", "rel_dir", ")", "/", "\"config.json\"", "\n", "src_model", "=", "Path", "(", "rel_dir", ")", "/", "\"model_best.pth\"", "\n", "dest_log", "=", "Path", "(", "save_dir", ")", "/", "\"log\"", "/", "key", "/", "timestamp", "/", "\"info.log\"", "\n", "config_path", "=", "Path", "(", "save_dir", ")", "/", "\"models\"", "/", "key", "/", "timestamp", "/", "\"config.json\"", "\n", "model_path", "=", "Path", "(", "save_dir", ")", "/", "\"models\"", "/", "key", "/", "timestamp", "/", "\"model_best.pth\"", "\n", "\n", "config_path", ".", "parent", ".", "mkdir", "(", "exist_ok", "=", "True", ",", "parents", "=", "True", ")", "\n", "if", "not", "config_path", ".", "exists", "(", ")", "or", "refresh", ":", "\n", "            ", "print", "(", "f\"copying config: {str(src_config)} -> {str(config_path)}\"", ")", "\n", "shutil", ".", "copyfile", "(", "str", "(", "src_config", ")", ",", "str", "(", "config_path", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "f\"transferred config found at {str(config_path)}, skipping...\"", ")", "\n", "\n", "\n", "", "if", "not", "model_path", ".", "exists", "(", ")", "or", "refresh", ":", "\n", "            ", "print", "(", "f\"copying model: {str(src_model)} -> {str(model_path)}\"", ")", "\n", "shutil", ".", "copyfile", "(", "str", "(", "src_model", ")", ",", "str", "(", "model_path", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "f\"transferred model found at {str(model_path)}, skipping...\"", ")", "\n", "\n", "", "if", "not", "dest_log", ".", "exists", "(", ")", "or", "refresh", ":", "\n", "            ", "generated_log", "=", "parse_tboard_files", "(", "rel_dir", ")", "\n", "dest_log", ".", "parent", ".", "mkdir", "(", "exist_ok", "=", "True", ",", "parents", "=", "True", ")", "\n", "setup_logging", "(", "save_dir", "=", "dest_log", ".", "parent", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "\"tboard-parser\"", ")", "\n", "for", "row", "in", "generated_log", ":", "\n", "                ", "logger", ".", "info", "(", "row", ")", "\n", "\n", "# re-run pixel matching evaluation", "\n", "", "best_ckpt_path", "=", "Path", "(", "rel_dir", ")", "/", "\"model_best.pth\"", "\n", "eval_args", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "eval_args", ".", "add_argument", "(", "\"--config\"", ",", "default", "=", "str", "(", "config_path", ")", ")", "\n", "eval_args", ".", "add_argument", "(", "\"--device\"", ",", "default", "=", "\"0\"", ")", "\n", "eval_args", ".", "add_argument", "(", "\"--mini_eval\"", ",", "default", "=", "1", ")", "\n", "eval_args", ".", "add_argument", "(", "\"--resume\"", ",", "default", "=", "best_ckpt_path", ")", "\n", "eval_config", "=", "ConfigParser", "(", "eval_args", ",", "slave_mode", "=", "True", ")", "\n", "evaluation", "(", "eval_config", ",", "logger", "=", "logger", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "f\"generated log found at {str(dest_log)}, skipping...\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.misc.update_deprecated_exps.parse_old_log": [[109, 128], ["[].item", "open", "f.read().splitlines", "open", "f.read().splitlines", "sum", "pathlib.Path", "f.read", "f.read", "numpy.where"], "function", ["None"], ["", "", "", "def", "parse_old_log", "(", "log_path", ",", "config_path", ",", "fixed_epochs", ")", ":", "\n", "    ", "\"\"\"A few the experiments were launched without the correct stopping criteria, so\n    we fix all models to use the same checkpoint and remove the excesss log. For\n    reference the 'excess' consists of 5 or 6 epochs of training after the planned 100.\n    The checkpoints generated by these additional checkpoints are discarded, rather than\n    evaluated.\"\"\"", "\n", "with", "open", "(", "config_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "config", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "", "with", "open", "(", "log_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "log", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "", "tag", "=", "f\"checkpoint-epoch{fixed_epochs}.pth\"", "\n", "presence", "=", "[", "(", "tag", "in", "row", "and", "\"trainer\"", "in", "row", ")", "for", "row", "in", "log", "]", "\n", "assert", "sum", "(", "presence", ")", "==", "1", ",", "\"expected single occurence of log tag\"", "\n", "pos", "=", "np", ".", "where", "(", "presence", ")", "[", "0", "]", ".", "item", "(", ")", "\n", "timestamp", "=", "Path", "(", "log_path", ")", ".", "parent", ".", "stem", "\n", "gen_log", "=", "[", "f\"This log was generated from an existing log for experiemnt {timestamp}\"", "]", "\n", "gen_log", "+=", "[", "\"Launching experiment with config:\"", "]", "\n", "offset", "=", "\"Training took\"", "in", "log", "[", "pos", "+", "1", "]", "\n", "return", "gen_log", "+", "config", "+", "log", "[", ":", "pos", "+", "1", "+", "offset", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.misc.update_deprecated_exps.standardize_exp_dir": [[130, 168], ["log_path.exists", "config_path.exists", "model_path.exists", "shutil.copyfile", "update_deprecated_exps.parse_old_log", "log_path.unlink", "logger.setup_logging", "logging.getLogger", "argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "parse_config.ConfigParser", "test_matching.evaluation", "print", "str", "pathlib.Path().exists", "str", "logging.getLogger.info", "str", "pathlib.Path", "pathlib.Path", "pathlib.Path", "pathlib.Path", "str"], "function", ["home.repos.pwc.inspect_result.jamt9000_DVE.misc.update_deprecated_exps.parse_old_log", "home.repos.pwc.inspect_result.jamt9000_DVE.logger.logger.setup_logging", "home.repos.pwc.inspect_result.jamt9000_DVE.None.test_matching.evaluation"], ["", "def", "standardize_exp_dir", "(", "experiments", ",", "save_dir", ",", "checkpoints", ",", "refresh", ")", ":", "\n", "    ", "\"\"\"Restructure logs in canonical format (deals with older versions that were\n    run different config setups).\n    \"\"\"", "\n", "for", "key", "in", "experiments", ":", "\n", "        ", "timestamp", "=", "checkpoints", "[", "key", "]", "[", "\"timestamp\"", "]", "\n", "epoch", "=", "checkpoints", "[", "key", "]", "[", "\"epoch\"", "]", "\n", "\n", "log_path", "=", "Path", "(", "save_dir", ")", "/", "\"log\"", "/", "key", "/", "timestamp", "/", "\"info.log\"", "\n", "config_path", "=", "Path", "(", "save_dir", ")", "/", "\"models\"", "/", "key", "/", "timestamp", "/", "\"config.json\"", "\n", "ckpt_name", "=", "f\"checkpoint-epoch{epoch}.pth\"", "\n", "model_path", "=", "Path", "(", "save_dir", ")", "/", "\"models\"", "/", "key", "/", "timestamp", "/", "ckpt_name", "\n", "assert", "log_path", ".", "exists", "(", ")", ",", "\"log was not found\"", "\n", "assert", "config_path", ".", "exists", "(", ")", ",", "\"config was not found\"", "\n", "assert", "model_path", ".", "exists", "(", ")", ",", "\"model was not found\"", "\n", "\n", "# make a backup to preserve the original", "\n", "backup_log", "=", "f\"{str(log_path)}.backup\"", "\n", "\n", "if", "not", "Path", "(", "backup_log", ")", ".", "exists", "(", ")", "or", "refresh", ":", "\n", "            ", "shutil", ".", "copyfile", "(", "str", "(", "log_path", ")", ",", "backup_log", ")", "\n", "generated_log", "=", "parse_old_log", "(", "backup_log", ",", "config_path", ",", "epoch", ")", "\n", "log_path", ".", "unlink", "(", ")", "\n", "setup_logging", "(", "save_dir", "=", "log_path", ".", "parent", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "\"log-gen\"", ")", "\n", "for", "row", "in", "generated_log", ":", "\n", "                ", "logger", ".", "info", "(", "row", ")", "\n", "\n", "# re-run pixel matching evaluation (this was missing in the old format)", "\n", "", "eval_args", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "eval_args", ".", "add_argument", "(", "\"--config\"", ",", "default", "=", "str", "(", "config_path", ")", ")", "\n", "eval_args", ".", "add_argument", "(", "\"--device\"", ",", "default", "=", "\"3\"", ")", "\n", "eval_args", ".", "add_argument", "(", "\"--mini_eval\"", ",", "default", "=", "1", ")", "\n", "eval_args", ".", "add_argument", "(", "\"--resume\"", ",", "default", "=", "model_path", ")", "\n", "eval_config", "=", "ConfigParser", "(", "eval_args", ",", "slave_mode", "=", "True", ")", "\n", "evaluation", "(", "eval_config", ",", "logger", "=", "logger", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "f\"backup log found at {str(backup_log)}, skipping...\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.misc.gen_readme.generate_url": [[17, 27], ["str", "pathlib.Path"], "function", ["None"], ["def", "generate_url", "(", "root_url", ",", "target", ",", "exp_name", ",", "experiments", ")", ":", "\n", "    ", "exp", "=", "experiments", "[", "exp_name", "]", "\n", "timestamp", ",", "epoch", "=", "exp", "[", "\"timestamp\"", "]", ",", "exp", "[", "\"epoch\"", "]", "\n", "path_store", "=", "{", "\n", "\"log\"", ":", "{", "\"parent\"", ":", "\"log\"", ",", "\"fname\"", ":", "\"info.log\"", "}", ",", "\n", "\"config\"", ":", "{", "\"parent\"", ":", "\"models\"", ",", "\"fname\"", ":", "\"config.json\"", "}", ",", "\n", "\"model\"", ":", "{", "\"parent\"", ":", "\"models\"", ",", "\"fname\"", ":", "f\"checkpoint-epoch{epoch}.pth\"", "}", "\n", "}", "\n", "paths", "=", "path_store", "[", "target", "]", "\n", "return", "str", "(", "Path", "(", "root_url", ")", "/", "paths", "[", "\"parent\"", "]", "/", "exp_name", "/", "timestamp", "/", "paths", "[", "\"fname\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.misc.gen_readme.sync_files": [[29, 63], ["experiments.items", "subprocess.call", "filetypes.items", "str", "rel_dir.startswith", "print", "subprocess.call", "print", "subprocess.call", "pathlib.Path().expanduser", "pathlib.Path", "str", "pathlib.Path", "pathlib.Path.exists", "str", "str", "print", "subprocess.call", "pathlib.Path", "pathlib.Path", "pathlib.Path().expanduser", "str", "str", "pathlib.Path"], "function", ["None"], ["", "def", "sync_files", "(", "experiments", ",", "save_dir", ",", "webserver", ",", "web_dir", ")", ":", "\n", "    ", "for", "key", ",", "subdict", "in", "experiments", ".", "items", "(", ")", ":", "\n", "        ", "rel_dir", "=", "subdict", "[", "\"timestamp\"", "]", "\n", "epoch", "=", "subdict", "[", "\"epoch\"", "]", "\n", "\n", "filetypes", "=", "{", "\n", "\"log\"", ":", "[", "\"info.log\"", "]", ",", "\n", "\"models\"", ":", "[", "f\"checkpoint-epoch{epoch}.pth\"", ",", "\"config.json\"", "]", "\n", "}", "\n", "# copy experiment artifacts", "\n", "for", "filetype", ",", "fnames", "in", "filetypes", ".", "items", "(", ")", ":", "\n", "            ", "for", "fname", "in", "fnames", ":", "\n", "                ", "if", "rel_dir", ".", "startswith", "(", "\"TODO\"", ")", ":", "\n", "                    ", "continue", "\n", "", "rel_path", "=", "Path", "(", "rel_dir", ")", "/", "fname", "\n", "local_path", "=", "Path", "(", "save_dir", ")", "/", "filetype", "/", "key", "/", "rel_path", "\n", "server_path", "=", "Path", "(", "web_dir", ")", ".", "expanduser", "(", ")", "/", "filetype", "/", "key", "/", "rel_path", "\n", "dest", "=", "f\"{webserver}:{str(server_path)}\"", "\n", "print", "(", "f\"{key} -> {webserver} [{local_path} -> {server_path}]\"", ")", "\n", "subprocess", ".", "call", "(", "[", "\"ssh\"", ",", "webserver", ",", "\"mkdir -p\"", ",", "str", "(", "server_path", ".", "parent", ")", "]", ")", "\n", "rsync_args", "=", "[", "\"rsync\"", ",", "\"-hvrPt\"", ",", "str", "(", "local_path", ")", ",", "dest", "]", "\n", "print", "(", "f\"running command {' '.join(rsync_args)}\"", ")", "\n", "subprocess", ".", "call", "(", "rsync_args", ")", "\n", "# copy backup logs if available", "\n", "if", "local_path", ".", "name", "==", "\"info.log\"", ":", "\n", "                    ", "candidate_backup", "=", "Path", "(", "f\"{str(local_path)}.backup\"", ")", "\n", "if", "candidate_backup", ".", "exists", "(", ")", ":", "\n", "                        ", "dest", "=", "f\"{dest}.backup\"", "\n", "rsync_args", "=", "[", "\"rsync\"", ",", "\"-hvrPt\"", ",", "str", "(", "candidate_backup", ")", ",", "dest", "]", "\n", "print", "(", "f\"running command {' '.join(rsync_args)}\"", ")", "\n", "subprocess", ".", "call", "(", "rsync_args", ")", "\n", "\n", "# peace and love", "\n", "", "", "", "", "", "subprocess", ".", "call", "(", "[", "\"ssh\"", ",", "webserver", ",", "\"chmod 777 -R\"", ",", "str", "(", "Path", "(", "web_dir", ")", ".", "expanduser", "(", ")", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.misc.gen_readme.parse_log": [[65, 108], ["open", "f.read().splitlines", "collections.OrderedDict", "row.split", "print", "str", "str", "str", "sum", "float", "int", "f.read", "numpy.where", "float", "float", "row.split"], "function", ["None"], ["", "def", "parse_log", "(", "log_path", ")", ":", "\n", "    ", "with", "open", "(", "log_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "log", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "", "results", "=", "{", "}", "\n", "# Keypoint regression uses a different evaluation to the standard embedding learning", "\n", "if", "\"limit-annos\"", "in", "str", "(", "log_path", ")", "and", "\"keypoints\"", "in", "str", "(", "log_path", ")", ":", "\n", "        ", "metrics", "=", "{", "\"mean_iod\"", "}", "\n", "expected_occurences", "=", "1", "\n", "", "elif", "\"keypoints\"", "in", "str", "(", "log_path", ")", ":", "\n", "        ", "metrics", "=", "{", "\"iod\"", "}", "\n", "expected_occurences", "=", "300", "\n", "", "else", ":", "\n", "        ", "metrics", "=", "{", "\"same-identity\"", ",", "\"different-identity\"", "}", "\n", "expected_occurences", "=", "1", "\n", "\n", "", "for", "metric", "in", "metrics", ":", "\n", "        ", "if", "metric", "==", "\"iod\"", ":", "\n", "            ", "tag", "=", "\"val_inter_ocular_error\"", "\n", "", "elif", "metric", "==", "\"mean_iod\"", ":", "\n", "            ", "tag", "=", "\"val_inter_ocular_error -> mean\"", "\n", "", "else", ":", "\n", "            ", "tag", "=", "f\"Mean Pixel Error ({metric})\"", "\n", "", "results", "[", "metric", "]", "=", "OrderedDict", "(", ")", "\n", "presence", "=", "[", "tag", "in", "row", "for", "row", "in", "log", "]", "\n", "msg", "=", "f\"expected {expected_occurences} occurences of {metric} tag in {log_path}\"", "\n", "assert", "sum", "(", "presence", ")", "==", "expected_occurences", ",", "msg", "\n", "# Always use the final reported value", "\n", "pos", "=", "np", ".", "where", "(", "presence", ")", "[", "0", "]", "[", "-", "1", "]", "\n", "row", "=", "log", "[", "pos", "]", "\n", "tokens", "=", "row", ".", "split", "(", "\" \"", ")", "\n", "if", "metric", "==", "\"mean_iod\"", ":", "\n", "# parse the mean and std", "\n", "            ", "mean_str", "=", "tokens", "[", "-", "3", "]", "[", ":", "-", "1", "]", "# we strip a trailing comma here", "\n", "std_str", "=", "tokens", "[", "-", "1", "]", "\n", "val", "=", "(", "float", "(", "mean_str", ")", ",", "float", "(", "std_str", ")", ")", "\n", "", "else", ":", "\n", "            ", "val", "=", "float", "(", "tokens", "[", "-", "1", "]", ")", "\n", "", "results", "[", "metric", "]", "=", "val", "\n", "print", "(", "f\"{log_path.parent.parent.stem}: {metric} {val}\"", ")", "\n", "", "for", "row", "in", "log", ":", "\n", "        ", "if", "\"Trainable parameters\"", "in", "row", ":", "\n", "            ", "results", "[", "\"params\"", "]", "=", "int", "(", "row", ".", "split", "(", "\" \"", ")", "[", "-", "1", "]", ")", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.misc.gen_readme.parse_results": [[110, 122], ["experiments.items", "timestamp.startswith", "log_path.exists", "gen_readme.parse_log", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.jamt9000_DVE.misc.gen_readme.parse_log"], ["", "def", "parse_results", "(", "experiments", ",", "save_dir", ")", ":", "\n", "    ", "log_results", "=", "{", "}", "\n", "for", "exp_name", ",", "subdict", "in", "experiments", ".", "items", "(", ")", ":", "\n", "        ", "timestamp", "=", "subdict", "[", "\"timestamp\"", "]", "\n", "if", "timestamp", ".", "startswith", "(", "\"TODO\"", ")", ":", "\n", "            ", "log_results", "[", "exp_name", "]", "=", "{", "\"timestamp\"", ":", "\"TODO\"", ",", "\"results\"", ":", "{", "}", "}", "\n", "continue", "\n", "", "log_path", "=", "Path", "(", "save_dir", ")", "/", "\"log\"", "/", "exp_name", "/", "timestamp", "/", "\"info.log\"", "\n", "assert", "log_path", ".", "exists", "(", ")", ",", "f\"missing log file for {exp_name}: {log_path}\"", "\n", "results", "=", "parse_log", "(", "log_path", ")", "\n", "log_results", "[", "exp_name", "]", "=", "{", "\"timestamp\"", ":", "timestamp", ",", "\"results\"", ":", "results", "}", "\n", "", "return", "log_results", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.misc.gen_readme.generate_readme": [[124, 171], ["gen_readme.parse_results", "open", "json.dump", "open", "f.read().splitlines", "re.finditer", "generated.append", "open", "f.write", "match.groups", "groups[].split", "edits.append", "itertools.zip_longest", "f.read", "len", "str", "gen_readme.generate_url", "match.span", "zip", "len", "millify.millify"], "function", ["home.repos.pwc.inspect_result.jamt9000_DVE.misc.gen_readme.parse_results", "home.repos.pwc.inspect_result.jamt9000_DVE.misc.gen_readme.generate_url"], ["", "def", "generate_readme", "(", "experiments", ",", "readme_template", ",", "root_url", ",", "readme_dest", ",", "results_path", ",", "\n", "save_dir", ")", ":", "\n", "\n", "    ", "results", "=", "parse_results", "(", "experiments", ",", "save_dir", ")", "\n", "with", "open", "(", "results_path", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "results", ",", "f", ",", "indent", "=", "4", ",", "sort_keys", "=", "False", ")", "\n", "\n", "", "with", "open", "(", "readme_template", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "readme", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "\n", "", "generated", "=", "[", "]", "\n", "for", "row", "in", "readme", ":", "\n", "        ", "edits", "=", "[", "]", "\n", "regex", "=", "r\"\\{\\{(.*?)\\}\\}\"", "\n", "for", "match", "in", "re", ".", "finditer", "(", "regex", ",", "row", ")", ":", "\n", "            ", "groups", "=", "match", ".", "groups", "(", ")", "\n", "assert", "len", "(", "groups", ")", "==", "1", ",", "\"expected single group\"", "\n", "exp_name", ",", "target", "=", "groups", "[", "0", "]", ".", "split", "(", "\".\"", ")", "\n", "if", "results", "[", "exp_name", "]", "[", "\"timestamp\"", "]", "==", "\"TODO\"", ":", "\n", "                ", "token", "=", "\"TODO\"", "\n", "", "elif", "target", "in", "{", "\"config\"", ",", "\"model\"", ",", "\"log\"", "}", ":", "\n", "                ", "token", "=", "generate_url", "(", "root_url", ",", "target", ",", "exp_name", ",", "experiments", "=", "experiments", ")", "\n", "", "elif", "target", "in", "{", "\"same-identity\"", ",", "\"different-identity\"", ",", "\"iod\"", "}", ":", "\n", "                ", "token", "=", "f\"{results[exp_name]['results'][target]:.2f}\"", "\n", "", "elif", "target", "in", "{", "\"mean_iod\"", "}", ":", "\n", "                ", "results", "[", "exp_name", "]", "[", "\"results\"", "]", "[", "target", "]", "\n", "mean", ",", "std", "=", "results", "[", "exp_name", "]", "[", "'results'", "]", "[", "target", "]", "\n", "token", "=", "f\"{mean:.2f} (+/- {std:.2f})\"", "\n", "", "elif", "target", "in", "{", "\"params\"", "}", ":", "\n", "                ", "token", "=", "millify", "(", "results", "[", "exp_name", "]", "[", "\"results\"", "]", "[", "\"params\"", "]", ",", "precision", "=", "1", ")", "\n", "", "edits", ".", "append", "(", "(", "match", ".", "span", "(", ")", ",", "token", ")", ")", "\n", "", "if", "edits", ":", "\n", "# invert the spans", "\n", "            ", "spans", "=", "[", "(", "None", ",", "0", ")", "]", "+", "[", "x", "[", "0", "]", "for", "x", "in", "edits", "]", "+", "[", "(", "len", "(", "row", ")", ",", "None", ")", "]", "\n", "inverse_spans", "=", "[", "(", "x", "[", "1", "]", ",", "y", "[", "0", "]", ")", "for", "x", ",", "y", "in", "zip", "(", "spans", ",", "spans", "[", "1", ":", "]", ")", "]", "\n", "tokens", "=", "[", "row", "[", "start", ":", "stop", "]", "for", "start", ",", "stop", "in", "inverse_spans", "]", "\n", "urls", "=", "[", "str", "(", "x", "[", "1", "]", ")", "for", "x", "in", "edits", "]", "\n", "new_row", "=", "\"\"", "\n", "for", "token", ",", "url", "in", "zip_longest", "(", "tokens", ",", "urls", ",", "fillvalue", "=", "\"\"", ")", ":", "\n", "                ", "new_row", "+=", "token", "+", "url", "\n", "", "row", "=", "new_row", "\n", "\n", "", "generated", ".", "append", "(", "row", ")", "\n", "\n", "", "with", "open", "(", "readme_dest", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "warning", "=", "'<!-- AUTOMATICALLY GENERATED - DO NOT EDIT DIRECTLY, edit misc/README-template.md -->\\n'", "\n", "f", ".", "write", "(", "warning", "+", "\"\\n\"", ".", "join", "(", "generated", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.base.base_trainer.BaseTrainer.__init__": [[10, 65], ["config.get_logger", "base_trainer.BaseTrainer._prepare_device", "model.to", "cfg_trainer.get", "utils.visualization.WriterTensorboardX", "len", "print", "torch.nn.DataParallel", "base_trainer.BaseTrainer.monitor.split", "base_trainer.BaseTrainer._resume_checkpoint"], "methods", ["home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config.ConfigParser.get_logger", "home.repos.pwc.inspect_result.jamt9000_DVE.base.base_trainer.BaseTrainer._prepare_device", "home.repos.pwc.inspect_result.jamt9000_DVE.None.parse_config.ConfigParser.get", "home.repos.pwc.inspect_result.jamt9000_DVE.base.base_trainer.BaseTrainer._resume_checkpoint"], ["def", "__init__", "(", "self", ",", "model", ",", "loss", ",", "metrics", ",", "optimizer", ",", "resume", ",", "config", ")", ":", "\n", "\n", "        ", "self", ".", "config", "=", "config", "\n", "self", ".", "logger", "=", "config", ".", "get_logger", "(", "\n", "'trainer'", ",", "config", "[", "'trainer'", "]", "[", "'verbosity'", "]", ")", "\n", "\n", "# setup GPU device if available, move model into configured device", "\n", "self", ".", "device", ",", "device_ids", "=", "self", ".", "_prepare_device", "(", "config", "[", "'n_gpu'", "]", ")", "\n", "self", ".", "model", "=", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "len", "(", "device_ids", ")", ">", "1", ":", "\n", "            ", "print", "(", "\"Using DataParallel for loss\"", ")", "\n", "self", ".", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "device_ids", ")", "\n", "\n", "", "self", ".", "loss", "=", "loss", "\n", "self", ".", "metrics", "=", "metrics", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "\n", "cfg_trainer", "=", "config", "[", "'trainer'", "]", "\n", "self", ".", "epochs", "=", "cfg_trainer", "[", "'epochs'", "]", "\n", "self", ".", "save_period", "=", "cfg_trainer", "[", "'save_period'", "]", "\n", "self", ".", "verbosity", "=", "cfg_trainer", "[", "'verbosity'", "]", "\n", "self", ".", "monitor", "=", "cfg_trainer", ".", "get", "(", "'monitor'", ",", "'off'", ")", "\n", "\n", "# configuration to monitor model performance and save best", "\n", "if", "self", ".", "monitor", "==", "'off'", ":", "\n", "            ", "self", ".", "mnt_mode", "=", "'off'", "\n", "self", ".", "mnt_best", "=", "0", "\n", "", "else", ":", "\n", "            ", "self", ".", "mnt_mode", ",", "self", ".", "mnt_metric", "=", "self", ".", "monitor", ".", "split", "(", ")", "\n", "assert", "self", ".", "mnt_mode", "in", "[", "'min'", ",", "'max'", "]", "\n", "self", ".", "mnt_best", "=", "math", ".", "inf", "if", "self", ".", "mnt_mode", "==", "'min'", "else", "-", "math", ".", "inf", "\n", "\n", "# Since early stopping was not available in earlier versions of the codebase", "\n", "# we disable it completely (this allows previous experiments to be reproduced", "\n", "# without modifying configs)", "\n", "# self.early_stop = cfg_trainer.get('early_stop', math.inf)", "\n", "self", ".", "early_stop", "=", "math", ".", "inf", "\n", "\n", "", "self", ".", "start_epoch", "=", "1", "\n", "self", ".", "latest_log", "=", "None", "\n", "\n", "# setup directory for checkpoint saving", "\n", "# if resume:", "\n", "#     start_time = os.path.split(os.path.split(resume)[0])[1]", "\n", "# else:", "\n", "#     start_time = datetime.datetime.now().strftime('%m%d_%H%M%S')", "\n", "self", ".", "checkpoint_dir", "=", "config", ".", "save_dir", "\n", "\n", "# setup visualization writer instance", "\n", "# writer_dir = os.path.join(cfg_trainer['log_dir'], config['name'], start_time)", "\n", "self", ".", "writer", "=", "WriterTensorboardX", "(", "\n", "config", ".", "log_dir", ",", "self", ".", "logger", ",", "cfg_trainer", "[", "'tensorboardX'", "]", ")", "\n", "\n", "if", "resume", ":", "\n", "            ", "self", ".", "_resume_checkpoint", "(", "resume", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.base.base_trainer.BaseTrainer._prepare_device": [[66, 83], ["torch.cuda.device_count", "torch.device", "list", "base_trainer.BaseTrainer.logger.warning", "base_trainer.BaseTrainer.logger.warning", "range"], "methods", ["None"], ["", "", "def", "_prepare_device", "(", "self", ",", "n_gpu_use", ")", ":", "\n", "        ", "\"\"\"\n        setup GPU device if available, move model into configured device\n        \"\"\"", "\n", "n_gpu", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "if", "n_gpu_use", ">", "0", "and", "n_gpu", "==", "0", ":", "\n", "            ", "self", ".", "logger", ".", "warning", "(", "\"Warning: There\\'s no GPU available on this machine,\"", "\n", "\"training will be performed on CPU.\"", ")", "\n", "n_gpu_use", "=", "0", "\n", "", "if", "n_gpu_use", ">", "n_gpu", ":", "\n", "            ", "self", ".", "logger", ".", "warning", "(", "\"Warning: The number of GPU\\'s configured to use is {}\"", "\n", "\", but only {} are available \"", "\n", "\"on this machine.\"", ".", "format", "(", "n_gpu_use", ",", "n_gpu", ")", ")", "\n", "n_gpu_use", "=", "n_gpu", "\n", "", "device", "=", "torch", ".", "device", "(", "'cuda:0'", "if", "n_gpu_use", ">", "0", "else", "'cpu'", ")", "\n", "list_ids", "=", "list", "(", "range", "(", "n_gpu_use", ")", ")", "\n", "return", "device", ",", "list_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.base.base_trainer.BaseTrainer.train": [[84, 152], ["range", "base_trainer.BaseTrainer._train_epoch", "base_trainer.BaseTrainer.items", "log.items", "base_trainer.BaseTrainer.writer.writer.close", "base_trainer.BaseTrainer.logger.info", "base_trainer.BaseTrainer._save_checkpoint", "log.update", "base_trainer.BaseTrainer.logger.info", "log.update", "str", "base_trainer.BaseTrainer.logger.warning", "msg.format", "enumerate", "enumerate"], "methods", ["home.repos.pwc.inspect_result.jamt9000_DVE.base.base_trainer.BaseTrainer._train_epoch", "home.repos.pwc.inspect_result.jamt9000_DVE.base.base_trainer.BaseTrainer._save_checkpoint", "home.repos.pwc.inspect_result.jamt9000_DVE.trainer.trainer.AverageMeter.update", "home.repos.pwc.inspect_result.jamt9000_DVE.trainer.trainer.AverageMeter.update"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Full training logic\n        \"\"\"", "\n", "not_improved_count", "=", "0", "\n", "for", "epoch", "in", "range", "(", "self", ".", "start_epoch", ",", "self", ".", "epochs", "+", "1", ")", ":", "\n", "            ", "result", "=", "self", ".", "_train_epoch", "(", "epoch", ")", "\n", "\n", "# save logged informations into log dict", "\n", "log", "=", "{", "'epoch'", ":", "epoch", "}", "\n", "for", "key", ",", "value", "in", "result", ".", "items", "(", ")", ":", "\n", "                ", "if", "key", "==", "'metrics'", ":", "\n", "                    ", "log", ".", "update", "(", "\n", "{", "mtr", ".", "__name__", ":", "value", "[", "i", "]", "for", "i", ",", "mtr", "in", "enumerate", "(", "self", ".", "metrics", ")", "}", ")", "\n", "", "elif", "key", "==", "'val_metrics'", ":", "\n", "                    ", "log", ".", "update", "(", "{", "\n", "'val_'", "+", "mtr", ".", "__name__", ":", "value", "[", "i", "]", "for", "i", ",", "\n", "mtr", "in", "enumerate", "(", "self", ".", "metrics", ")", "\n", "}", ")", "\n", "", "else", ":", "\n", "                    ", "log", "[", "key", "]", "=", "value", "\n", "\n", "", "", "self", ".", "latest_log", "=", "log", "\n", "\n", "# print logged informations to the screen", "\n", "for", "key", ",", "value", "in", "log", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "'    {:15s}: {}'", ".", "format", "(", "str", "(", "key", ")", ",", "value", ")", ")", "\n", "# if self.logger is not None:", "\n", "#     self.logger.add_entry(log)", "\n", "#     if self.verbosity >= 1:", "\n", "#         for key, value in log.items():", "\n", "#             self.logger.info('    {:15s}: {}'.format(str(key), value))", "\n", "\n", "# evaluate model performance according to configured metric, save best", "\n", "# checkpoint as model_best", "\n", "", "best", "=", "False", "\n", "if", "self", ".", "mnt_mode", "!=", "'off'", ":", "\n", "                ", "try", ":", "\n", "# check whether model performance improved or not, according to", "\n", "# specified metric(mnt_metric)", "\n", "                    ", "lower", "=", "log", "[", "self", ".", "mnt_metric", "]", "<=", "self", ".", "mnt_best", "\n", "higher", "=", "log", "[", "self", ".", "mnt_metric", "]", ">=", "self", ".", "mnt_best", "\n", "improved", "=", "(", "self", ".", "mnt_mode", "==", "'min'", "and", "lower", ")", "or", "(", "self", ".", "mnt_mode", "==", "'max'", "and", "higher", ")", "\n", "", "except", "KeyError", ":", "\n", "                    ", "msg", "=", "\"Warning: Metric '{}' not found, perf monitoring is disabled.\"", "\n", "self", ".", "logger", ".", "warning", "(", "msg", ".", "format", "(", "self", ".", "mnt_metric", ")", ")", "\n", "self", ".", "mnt_mode", "=", "'off'", "\n", "improved", "=", "False", "\n", "not_improved_count", "=", "0", "\n", "\n", "", "if", "improved", ":", "\n", "                    ", "self", ".", "mnt_best", "=", "log", "[", "self", ".", "mnt_metric", "]", "\n", "not_improved_count", "=", "0", "\n", "best", "=", "True", "\n", "", "else", ":", "\n", "                    ", "not_improved_count", "+=", "1", "\n", "\n", "", "if", "not_improved_count", ">", "self", ".", "early_stop", ":", "\n", "                    ", "self", ".", "logger", ".", "info", "(", "\"Val performance didn\\'t improve for {} epochs. \"", "\n", "\"Training stops.\"", ".", "format", "(", "self", ".", "early_stop", ")", ")", "\n", "break", "\n", "\n", "", "", "if", "epoch", "%", "self", ".", "save_period", "==", "0", ":", "\n", "                ", "self", ".", "_save_checkpoint", "(", "epoch", ",", "save_best", "=", "best", ")", "\n", "\n", "", "", "if", "self", ".", "writer", ".", "writer", ":", "\n", "            ", "self", ".", "writer", ".", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.base.base_trainer.BaseTrainer._train_epoch": [[153, 160], ["None"], "methods", ["None"], ["", "", "def", "_train_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"\n        Training logic for an epoch\n\n        :param epoch: Current epoch number\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.base.base_trainer.BaseTrainer._save_checkpoint": [[161, 188], ["os.path.join", "torch.save", "base_trainer.BaseTrainer.logger.info", "type", "base_trainer.BaseTrainer.model.state_dict", "base_trainer.BaseTrainer.optimizer.state_dict", "os.path.join", "torch.save", "base_trainer.BaseTrainer.logger.info"], "methods", ["None"], ["", "def", "_save_checkpoint", "(", "self", ",", "epoch", ",", "save_best", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Saving checkpoints\n\n        :param epoch: current epoch number\n        :param log: logging information of the epoch\n        :param save_best: if True, rename the saved checkpoint to 'model_best.pth'\n        \"\"\"", "\n", "arch", "=", "type", "(", "self", ".", "model", ")", ".", "__name__", "\n", "state", "=", "{", "\n", "'arch'", ":", "arch", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'state_dict'", ":", "self", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'monitor_best'", ":", "self", ".", "mnt_best", ",", "\n", "'config'", ":", "self", ".", "config", "\n", "}", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "checkpoint_dir", ",", "\n", "'checkpoint-epoch{}.pth'", ".", "format", "(", "epoch", ")", "\n", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Saving checkpoint: {} ...\"", ".", "format", "(", "filename", ")", ")", "\n", "if", "save_best", ":", "\n", "            ", "best_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "checkpoint_dir", ",", "'model_best.pth'", ")", "\n", "torch", ".", "save", "(", "state", ",", "best_path", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Saving current best: {} ...\"", ".", "format", "(", "'model_best.pth'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.base.base_trainer.BaseTrainer._resume_checkpoint": [[189, 220], ["base_trainer.BaseTrainer.logger.info", "torch.load", "base_trainer.BaseTrainer.model.load_state_dict", "base_trainer.BaseTrainer.logger.info", "base_trainer.BaseTrainer.logger.warning", "base_trainer.BaseTrainer.logger.warning", "base_trainer.BaseTrainer.optimizer.load_state_dict", "msg.format"], "methods", ["None"], ["", "", "def", "_resume_checkpoint", "(", "self", ",", "resume_path", ")", ":", "\n", "        ", "\"\"\"\n        Resume from saved checkpoints\n\n        :param resume_path: Checkpoint path to be resumed\n        \"\"\"", "\n", "self", ".", "logger", ".", "info", "(", "\"Loading checkpoint: {} ...\"", ".", "format", "(", "resume_path", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "resume_path", ")", "\n", "self", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "+", "1", "\n", "self", ".", "mnt_best", "=", "checkpoint", "[", "'monitor_best'", "]", "\n", "\n", "# load architecture params from checkpoint.", "\n", "if", "checkpoint", "[", "'config'", "]", "[", "'arch'", "]", "!=", "self", ".", "config", "[", "'arch'", "]", ":", "\n", "            ", "msg", "=", "(", "\"Warning: Architecture configuration given in config file is\"", "\n", "\" different from that of checkpoint.\"", "\n", "\" This may yield an exception while state_dict is being loaded.\"", ")", "\n", "self", ".", "logger", ".", "warning", "(", "msg", ")", "\n", "", "self", ".", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n", "# load optimizer state from checkpoint only when optimizer type is not changed.", "\n", "ckpt_opt_type", "=", "checkpoint", "[", "'config'", "]", "[", "'optimizer'", "]", "[", "'type'", "]", "\n", "if", "ckpt_opt_type", "!=", "self", ".", "config", "[", "'optimizer'", "]", "[", "'type'", "]", ":", "\n", "            ", "msg", "=", "(", "\"Warning: Optimizer type given in config file is different from\"", "\n", "\"that of checkpoint.  Optimizer parameters not being resumed.\"", ")", "\n", "self", ".", "logger", ".", "warning", "(", "msg", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "\n", "# self.logger = checkpoint['logger']", "\n", "", "msg", "=", "\"Checkpoint '{}' (epoch {}) loaded\"", "\n", "self", ".", "logger", ".", "info", "(", "msg", ".", "format", "(", "resume_path", ",", "self", ".", "start_epoch", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jamt9000_DVE.base.base_model.BaseModel.__init__": [[10, 13], ["torch.Module.__init__", "logging.getLogger"], "methods", ["home.repos.pwc.inspect_result.jamt9000_DVE.base.base_model.BaseModel.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BaseModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", "self", ".", "__class__", ".", "__name__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.base.base_model.BaseModel.forward": [[14, 21], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "input", ")", ":", "\n", "        ", "\"\"\"\n        Forward pass logic\n\n        :return: Model output\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.base.base_model.BaseModel.summary": [[22, 30], ["filter", "sum", "base_model.BaseModel.logger.info", "base_model.BaseModel.logger.info", "base_model.BaseModel.parameters", "numpy.prod", "p.size"], "methods", ["None"], ["", "def", "summary", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Model summary\n        \"\"\"", "\n", "model_parameters", "=", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "self", ".", "parameters", "(", ")", ")", "\n", "params", "=", "sum", "(", "[", "np", ".", "prod", "(", "p", ".", "size", "(", ")", ")", "for", "p", "in", "model_parameters", "]", ")", "\n", "self", ".", "logger", ".", "info", "(", "'Trainable parameters: {}'", ".", "format", "(", "params", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jamt9000_DVE.base.base_model.BaseModel.__str__": [[31, 38], ["filter", "sum", "base_model.BaseModel.parameters", "torch.Module.__str__", "numpy.prod", "p.size"], "methods", ["home.repos.pwc.inspect_result.jamt9000_DVE.base.base_model.BaseModel.__str__"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Model prints with number of trainable parameters\n        \"\"\"", "\n", "model_parameters", "=", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "self", ".", "parameters", "(", ")", ")", "\n", "params", "=", "sum", "(", "[", "np", ".", "prod", "(", "p", ".", "size", "(", ")", ")", "for", "p", "in", "model_parameters", "]", ")", "\n", "return", "super", "(", "BaseModel", ",", "self", ")", ".", "__str__", "(", ")", "+", "'\\nTrainable parameters: {}'", ".", "format", "(", "params", ")", "\n", "# print(super(BaseModel, self))", "\n"]]}