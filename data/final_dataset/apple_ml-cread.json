{"home.repos.pwc.inspect_result.apple_ml-cread.modeling.main.run_one_epoch": [[44, 97], ["time.time", "enumerate", "tqdm.tqdm", "print", "LOSS.items", "utils.utils.print_loss", "utils.utils.print_score", "model", "loss.items", "model.decode", "utils.evaluate.score_fn", "qr_metric.get_metric", "utils.evaluate.get_binary_res", "utils.evaluate.coref_evaluate", "v.item", "open", "f.writelines", "sum", "len"], "function", ["home.repos.pwc.inspect_result.apple_ml-cread.utils.utils.print_loss", "home.repos.pwc.inspect_result.apple_ml-cread.utils.utils.print_score", "home.repos.pwc.inspect_result.apple_ml-cread.modeling.model.decode", "home.repos.pwc.inspect_result.apple_ml-cread.utils.evaluate.score_fn", "home.repos.pwc.inspect_result.apple_ml-cread.training.metrics.UtteranceScore.get_metric", "home.repos.pwc.inspect_result.apple_ml-cread.utils.evaluate.get_binary_res", "home.repos.pwc.inspect_result.apple_ml-cread.utils.evaluate.coref_evaluate"], ["def", "run_one_epoch", "(", "data_type", ",", "dataloader", ",", "trainer", ",", "epoch", ",", "run_type", ",", "collector", "=", "None", ")", ":", "\n", "\t", "t0", "=", "time", ".", "time", "(", ")", "\n", "assert", "data_type", "in", "[", "'dev'", ",", "'test'", "]", "\n", "assert", "run_type", "in", "[", "'teacher_force'", ",", "'generation'", "]", "\n", "model", ",", "optimizer", ",", "scheduler", ",", "tokenizer", "=", "trainer", "\n", "\n", "LOSS", ",", "match", ",", "bi_match", "=", "{", "'bi'", ":", "0", ",", "'lm'", ":", "0", ",", "'mention'", ":", "0", ",", "'reference'", ":", "0", ",", "'total'", ":", "0", "}", ",", "[", "]", ",", "[", "]", "# result container", "\n", "coref_lines", "=", "[", "]", "\n", "iterator", "=", "enumerate", "(", "tqdm", "(", "dataloader", ",", "desc", "=", "\"Epoch {} {}\"", ".", "format", "(", "epoch", ",", "run_type", ")", ",", "disable", "=", "args", ".", "disable_display", ")", ")", "\n", "\n", "if", "args", ".", "disable_display", ":", "\n", "\t\t", "print", "(", "'Evaluation progress is not showing'", ")", "\n", "\n", "", "for", "step", ",", "batch", "in", "iterator", ":", "\n", "\t\t", "if", "run_type", "==", "'teacher_force'", ":", "\n", "\t\t\t", "loss", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", "=", "model", "(", "input_ids", "=", "batch", "[", "'input_ids'", "]", ",", "attention_mask", "=", "batch", "[", "'attention_mask'", "]", ",", "token_type_ids", "=", "batch", "[", "'token_type_ids'", "]", ",", "labels", "=", "batch", "[", "'label_ids'", "]", ",", "mention_labels", "=", "batch", "[", "'mention_label_ids'", "]", ",", "batch", "=", "batch", ",", "coref_links", "=", "batch", "[", "'coref_label'", "]", ")", "\n", "for", "k", ",", "v", "in", "loss", ".", "items", "(", ")", ":", "\n", "\t\t\t\t", "LOSS", "[", "k", "]", "+=", "v", ".", "item", "(", ")", "\n", "\n", "", "", "else", ":", "\n", "\t\t\t", "decode_output", "=", "decode", "(", "args", ",", "batch", ",", "model", ",", "tokenizer", ")", "\n", "score_fn", "(", "args", ",", "decode_output", ",", "batch", ",", "match", ",", "collector", ",", "qr_metric", ",", "coref_lines", ",", "bi_match", ")", "\n", "\n", "# log", "\n", "", "", "if", "run_type", "==", "'teacher_force'", ":", "\n", "\t\t", "for", "k", ",", "v", "in", "LOSS", ".", "items", "(", ")", ":", "\n", "\t\t\t", "LOSS", "[", "k", "]", "/=", "(", "step", "+", "1", ")", "\n", "", "print_loss", "(", "epoch", ",", "data_type", ",", "LOSS", ",", "t0", ")", "\n", "return", "LOSS", "\n", "", "else", ":", "# record decoding result", "\n", "\t\t", "res", "=", "{", "}", "\n", "if", "'qr'", "in", "args", ".", "task", ":", "\n", "\t\t\t", "qr_res", "=", "qr_metric", ".", "get_metric", "(", "reset", "=", "True", ")", "\n", "qr_res", "[", "'Exact match'", "]", "=", "sum", "(", "match", ")", "/", "len", "(", "match", ")", "*", "100", "\n", "get_binary_res", "(", "bi_match", ",", "qr_res", ",", "args", ")", "\n", "res", "[", "'qr'", "]", "=", "qr_res", "\n", "", "else", ":", "\n", "\t\t\t", "res", "[", "'qr'", "]", "=", "{", "}", "\n", "\n", "", "if", "'coref'", "in", "args", ".", "task", ":", "\n", "# prepare conll files", "\n", "\t\t\t", "key_path", "=", "args", ".", "dev_conll", "if", "data_type", "==", "'dev'", "else", "args", ".", "test_conll", "\n", "response_path", "=", "'temp/{}.response'", ".", "format", "(", "args", ".", "model_name", ")", "# a temp file for calculating coref score", "\n", "with", "open", "(", "response_path", ",", "'w'", ")", "as", "f", ":", "\n", "\t\t\t\t", "f", ".", "writelines", "(", "coref_lines", ")", "\n", "", "res", "[", "'coref'", "]", "=", "coref_evaluate", "(", "key_path", ",", "response_path", ",", "args", ")", "\n", "", "else", ":", "\n", "\t\t\t", "res", "[", "'coref'", "]", "=", "{", "}", "\n", "\n", "", "print_score", "(", "args", ",", "epoch", ",", "data_type", ",", "res", ",", "t0", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.modeling.main.set_dataloader": [[99, 114], ["dataset.Dataset", "torch.utils.data.DataLoader", "torch.utils.data.RandomSampler", "torch.utils.data.SequentialSampler"], "function", ["None"], ["", "", "def", "set_dataloader", "(", "args", ",", "tokenizer", ",", "data_type", ",", "run_type", ",", "data_size", "=", "-", "1", ")", ":", "\n", "\t", "dataset", "=", "Dataset", "(", "args", ",", "tokenizer", ",", "data_type", ",", "run_type", "==", "'generation'", ",", "data_size", ")", "\n", "\n", "if", "data_type", "==", "'train'", ":", "\n", "\t\t", "sampler", "=", "RandomSampler", "(", "dataset", ")", "\n", "", "else", ":", "\n", "\t\t", "sampler", "=", "SequentialSampler", "(", "dataset", ")", "\n", "\n", "", "dataloader", "=", "DataLoader", "(", "\n", "dataset", ",", "\n", "sampler", "=", "sampler", ",", "\n", "batch_size", "=", "args", ".", "train_batch_size", "if", "data_type", "==", "'train'", "else", "args", ".", "eval_batch_size", ",", "\n", "collate_fn", "=", "dataset", ".", "collate_fn", "\n", ")", "\n", "return", "dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.modeling.main.train": [[116, 205], ["main.set_dataloader", "main.set_dataloader", "main.set_dataloader", "transformers.AdamW", "print", "model.eval", "print", "range", "print", "model.parameters", "transformers.get_linear_schedule_with_warmup", "torch.no_grad", "main.run_one_epoch", "time.time", "model.train", "model.zero_grad", "enumerate", "LOSS.items", "utils.utils.print_loss", "print", "tqdm.tqdm", "print", "model", "run_one_epoch.items", "len", "v.item", "loss[].item", "loss[].backward", "torch.nn.utils.clip_grad_norm_", "transformers.AdamW.step", "transformers.AdamW.zero_grad", "model.eval", "model.train", "main.save_best_model", "model.parameters", "transformers.get_linear_schedule_with_warmup.step", "torch.no_grad", "main.run_one_epoch", "main.run_one_epoch", "print"], "function", ["home.repos.pwc.inspect_result.apple_ml-cread.modeling.main.set_dataloader", "home.repos.pwc.inspect_result.apple_ml-cread.modeling.main.set_dataloader", "home.repos.pwc.inspect_result.apple_ml-cread.modeling.main.set_dataloader", "home.repos.pwc.inspect_result.apple_ml-cread.modeling.main.run_one_epoch", "home.repos.pwc.inspect_result.apple_ml-cread.modeling.main.train", "home.repos.pwc.inspect_result.apple_ml-cread.utils.utils.print_loss", "home.repos.pwc.inspect_result.apple_ml-cread.modeling.main.train", "home.repos.pwc.inspect_result.apple_ml-cread.modeling.main.save_best_model", "home.repos.pwc.inspect_result.apple_ml-cread.modeling.main.run_one_epoch", "home.repos.pwc.inspect_result.apple_ml-cread.modeling.main.run_one_epoch"], ["", "def", "train", "(", "args", ",", "tokenizer", ",", "model", ")", ":", "\n", "# set dataloader", "\n", "\t", "train_dataloader", "=", "set_dataloader", "(", "args", ",", "tokenizer", ",", "'train'", ",", "'teacher_force'", ",", "data_size", "=", "args", ".", "train_size", ")", "\n", "dev_dataloader", "=", "set_dataloader", "(", "args", ",", "tokenizer", ",", "'dev'", ",", "'teacher_force'", ")", "\n", "dev_gen_dataloader", "=", "set_dataloader", "(", "args", ",", "tokenizer", ",", "'dev'", ",", "'generation'", ")", "\n", "\n", "# set optimizer, lr scheduler", "\n", "optimizer", "=", "AdamW", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "learning_rate", ",", "eps", "=", "args", ".", "adam_epsilon", ")", "\n", "if", "args", ".", "use_scheduler", ":", "\n", "\t\t", "t_total", "=", "len", "(", "train_dataloader", ")", "//", "args", ".", "gradient_accumulation_steps", "*", "args", ".", "max_epoch", "\n", "scheduler", "=", "get_linear_schedule_with_warmup", "(", "\n", "optimizer", ",", "num_warmup_steps", "=", "args", ".", "warmup_steps", ",", "num_training_steps", "=", "t_total", "\n", ")", "\n", "", "else", ":", "\n", "\t\t", "scheduler", "=", "None", "\n", "", "trainer", "=", "(", "model", ",", "optimizer", ",", "scheduler", ",", "tokenizer", ")", "\n", "\n", "print", "(", "'Test before training!'", ")", "\n", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t", "_", "=", "run_one_epoch", "(", "'dev'", ",", "dev_dataloader", ",", "trainer", ",", "-", "1", ",", "'teacher_force'", ")", "\n", "\n", "", "print", "(", "'Start training!\\n{}'", ".", "format", "(", "'***'", "*", "30", ")", ")", "\n", "eval_step", "=", "args", ".", "eval_interval", "//", "args", ".", "train_batch_size", "\n", "\n", "# score of query rewrite, corerference resolution, and joint learning (average of two)", "\n", "best_score", "=", "{", "'best-QR'", ":", "-", "10000", ",", "'best-COREF'", ":", "-", "10000", ",", "'best-JOINT'", ":", "-", "10000", "}", "\n", "global_step", "=", "0", "\n", "no_improve_count", "=", "0", "\n", "for", "epoch", "in", "range", "(", "args", ".", "max_epoch", ")", ":", "\n", "\t\t", "t0", "=", "time", ".", "time", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "model", ".", "zero_grad", "(", ")", "\n", "LOSS", ",", "match", "=", "{", "'bi'", ":", "0", ",", "'lm'", ":", "0", ",", "'mention'", ":", "0", ",", "'reference'", ":", "0", ",", "'total'", ":", "0", "}", ",", "[", "]", "\n", "iterator", "=", "enumerate", "(", "tqdm", "(", "train_dataloader", ",", "desc", "=", "\"Epoch {}\"", ".", "format", "(", "epoch", ")", ",", "disable", "=", "args", ".", "disable_display", ")", ")", "\n", "\n", "if", "args", ".", "disable_display", ":", "\n", "\t\t\t", "print", "(", "'Training progress is not showing'", ")", "\n", "\n", "", "for", "local_step", ",", "batch", "in", "iterator", ":", "\n", "\t\t\t", "loss", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", "=", "model", "(", "input_ids", "=", "batch", "[", "'input_ids'", "]", ",", "attention_mask", "=", "batch", "[", "'attention_mask'", "]", ",", "token_type_ids", "=", "batch", "[", "'token_type_ids'", "]", ",", "labels", "=", "batch", "[", "'label_ids'", "]", ",", "step", "=", "None", ",", "mention_labels", "=", "batch", "[", "'mention_label_ids'", "]", ",", "batch", "=", "batch", ",", "coref_links", "=", "batch", "[", "'coref_label'", "]", ")", "\n", "\n", "for", "k", ",", "v", "in", "loss", ".", "items", "(", ")", ":", "\n", "\t\t\t\t", "LOSS", "[", "k", "]", "+=", "v", ".", "item", "(", ")", "\n", "", "global_step", "+=", "1", "\n", "\n", "# update model", "\n", "if", "loss", "[", "'total'", "]", ".", "item", "(", ")", "!=", "0", ":", "\n", "\t\t\t\t", "loss", "[", "'total'", "]", "=", "loss", "[", "'total'", "]", "/", "args", ".", "gradient_accumulation_steps", "\n", "loss", "[", "'total'", "]", ".", "backward", "(", ")", "\n", "\n", "# accumulate gradients", "\n", "", "if", "global_step", "%", "args", ".", "gradient_accumulation_steps", "==", "0", ":", "\n", "\t\t\t\t", "norm", "=", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "max_grad_norm", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "if", "args", ".", "use_scheduler", ":", "\n", "\t\t\t\t\t", "scheduler", ".", "step", "(", ")", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# evaluate model", "\n", "", "if", "global_step", "%", "eval_step", "==", "0", "and", "epoch", ">", "0", ":", "\n", "\t\t\t\t", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t\t\t\t", "loss", "=", "run_one_epoch", "(", "'dev'", ",", "dev_dataloader", ",", "trainer", ",", "epoch", ",", "'teacher_force'", ")", "# get dev loss", "\n", "res", "=", "run_one_epoch", "(", "'dev'", ",", "dev_gen_dataloader", ",", "trainer", ",", "epoch", ",", "'generation'", ")", "# get dev result", "\n", "", "model", ".", "train", "(", ")", "\n", "\n", "# save model", "\n", "save_model", "=", "save_best_model", "(", "args", ".", "task", ",", "res", ",", "best_score", ")", "\n", "if", "save_model", ":", "\n", "\t\t\t\t\t", "no_improve_count", "=", "0", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "no_improve_count", "+=", "1", "\n", "\n", "# early stop", "\n", "", "if", "no_improve_count", "==", "args", ".", "no_improve_max", ":", "\n", "\t\t\t\t\t", "print", "(", "'Early stop!'", ")", "\n", "return", "\n", "\n", "# get train loss", "\n", "", "", "", "for", "k", ",", "v", "in", "LOSS", ".", "items", "(", ")", ":", "\n", "\t\t\t", "LOSS", "[", "k", "]", "/=", "(", "local_step", "+", "1", ")", "\n", "", "print_loss", "(", "epoch", ",", "'train'", ",", "LOSS", ",", "t0", ")", "\n", "\n", "print", "(", "'***'", "*", "30", ")", "\n", "\n", "", "print", "(", "'Reach max epoch: {}!'", ".", "format", "(", "args", ".", "max_epoch", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.modeling.main.save_best_model": [[207, 225], ["main.save_checkpoint"], "function", ["home.repos.pwc.inspect_result.apple_ml-cread.modeling.main.save_checkpoint"], ["", "def", "save_best_model", "(", "task", ",", "res", ",", "best_score", ")", ":", "\n", "\t", "save_model_flag", "=", "False", "\n", "if", "task", "==", "\"qr\"", ":", "# qr-only model", "\n", "\t\t", "score", "=", "res", "[", "'qr'", "]", "[", "'Macro F1'", "]", "\n", "key", "=", "\"best-QR\"", "\n", "", "elif", "task", "==", "\"coref\"", ":", "# coref-only model", "\n", "\t\t", "score", "=", "res", "[", "'coref'", "]", "[", "'avg_f1'", "]", "\n", "key", "=", "\"best-COREF\"", "\n", "", "else", ":", "# joint model, check average of both performance", "\n", "\t\t", "score", "=", "0.5", "*", "(", "res", "[", "'qr'", "]", "[", "'Macro F1'", "]", "+", "res", "[", "'coref'", "]", "[", "'avg_f1'", "]", ")", "\n", "key", "=", "\"best-JOINT\"", "\n", "\n", "", "if", "score", ">", "best_score", "[", "key", "]", ":", "\n", "\t\t", "save_model_flag", "=", "True", "\n", "best_score", "[", "key", "]", "=", "score", "\n", "save_checkpoint", "(", "args", ",", "tokenizer", ",", "model", ",", "best_score", ",", "key", ")", "\n", "\n", "", "return", "save_model_flag", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.modeling.main.test": [[227, 255], ["main.set_dataloader", "main.set_dataloader", "main.set_dataloader", "model.eval", "print", "print", "torch.no_grad", "main.run_one_epoch", "main.run_one_epoch", "utils.utils.print_qr_result", "main.run_one_epoch", "utils.utils.print_qr_result", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.apple_ml-cread.modeling.main.set_dataloader", "home.repos.pwc.inspect_result.apple_ml-cread.modeling.main.set_dataloader", "home.repos.pwc.inspect_result.apple_ml-cread.modeling.main.set_dataloader", "home.repos.pwc.inspect_result.apple_ml-cread.modeling.main.run_one_epoch", "home.repos.pwc.inspect_result.apple_ml-cread.modeling.main.run_one_epoch", "home.repos.pwc.inspect_result.apple_ml-cread.utils.utils.print_qr_result", "home.repos.pwc.inspect_result.apple_ml-cread.modeling.main.run_one_epoch", "home.repos.pwc.inspect_result.apple_ml-cread.utils.utils.print_qr_result"], ["", "def", "test", "(", "args", ",", "tokenizer", ",", "model", ")", ":", "\n", "# set dataloader", "\n", "\t", "dev_dataloader", "=", "set_dataloader", "(", "args", ",", "tokenizer", ",", "'dev'", ",", "'teacher_force'", ")", "\n", "dev_gen_dataloader", "=", "set_dataloader", "(", "args", ",", "tokenizer", ",", "'dev'", ",", "'generation'", ")", "\n", "test_gen_dataloader", "=", "set_dataloader", "(", "args", ",", "tokenizer", ",", "'test'", ",", "'generation'", ")", "\n", "\n", "trainer", "=", "(", "model", ",", "None", ",", "None", ",", "tokenizer", ")", "\n", "model", ".", "eval", "(", ")", "\n", "collector", "=", "{", "'decode-dev'", ":", "[", "]", ",", "'decode-test'", ":", "[", "]", "}", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# evaluate on dev", "\n", "\t\t", "_", "=", "run_one_epoch", "(", "'dev'", ",", "dev_dataloader", ",", "trainer", ",", "'Eval'", ",", "'teacher_force'", ")", "\n", "\n", "# generate on dev", "\n", "res_dev", "=", "run_one_epoch", "(", "'dev'", ",", "dev_gen_dataloader", ",", "trainer", ",", "'Dev'", ",", "'generation'", ",", "collector", "=", "collector", "[", "'decode-dev'", "]", ")", "\n", "collector", "[", "'result-dev'", "]", "=", "res_dev", "\n", "print_qr_result", "(", "args", ",", "res_dev", "[", "'qr'", "]", ",", "'dev'", ")", "\n", "\n", "# generate on test", "\n", "res_test", "=", "run_one_epoch", "(", "'test'", ",", "test_gen_dataloader", ",", "trainer", ",", "'Test'", ",", "'generation'", ",", "collector", "=", "collector", "[", "'decode-test'", "]", ")", "\n", "collector", "[", "'result-test'", "]", "=", "res_test", "\n", "print_qr_result", "(", "args", ",", "res_test", "[", "'qr'", "]", ",", "'test'", ")", "\n", "\n", "", "out_file", "=", "args", ".", "decode_file", "\n", "with", "open", "(", "out_file", ",", "'w'", ")", "as", "f", ":", "\n", "\t\t", "json", ".", "dump", "(", "collector", ",", "f", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", "\n", "", "print", "(", "'Decode file is saved at {}'", ".", "format", "(", "out_file", ")", ")", "\n", "print", "(", "'Done decoding!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.modeling.main.save_checkpoint": [[257, 262], ["print", "tokenizer.save_pretrained", "model.save_pretrained"], "function", ["None"], ["", "def", "save_checkpoint", "(", "args", ",", "tokenizer", ",", "model", ",", "best_score", ",", "best_type", ")", ":", "\n", "\t", "save_path", "=", "args", ".", "checkpoint", "#+ '_' + best_type", "\n", "print", "(", "'Best score in \"{}\": {:.2f}. Save model in {}!\\n'", ".", "format", "(", "best_type", ",", "best_score", "[", "best_type", "]", ",", "save_path", ")", ")", "\n", "tokenizer", ".", "save_pretrained", "(", "save_path", ")", "\n", "model", ".", "save_pretrained", "(", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.modeling.main.load_checkpoint": [[264, 271], ["print", "transformers.AutoTokenizer.from_pretrained", "model.JointModel.from_pretrained", "JointModel.from_pretrained.to"], "function", ["None"], ["", "def", "load_checkpoint", "(", "args", ")", ":", "\n", "\t", "save_path", "=", "args", ".", "checkpoint", "#+ '_' + best_type", "\n", "print", "(", "'Load model, tokenizer from {}'", ".", "format", "(", "save_path", ")", ")", "\n", "tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "save_path", ")", "\n", "model", "=", "JointModel", ".", "from_pretrained", "(", "save_path", ",", "args", "=", "args", ")", "\n", "model", ".", "to", "(", "args", ".", "device", ")", "\n", "return", "tokenizer", ",", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.modeling.main.set_model": [[273, 287], ["transformers.AutoConfig.from_pretrained", "transformers.AutoTokenizer.from_pretrained", "AutoTokenizer.from_pretrained.add_special_tokens", "model.JointModel", "model.JointModel.resize_token_embeddings", "model.JointModel.to", "model.JointModel.load_pretrained_weight", "len"], "function", ["home.repos.pwc.inspect_result.apple_ml-cread.modeling.model.JointModel.load_pretrained_weight"], ["", "def", "set_model", "(", "args", ")", ":", "\n", "\t", "''' initiate config, tokenizer and model '''", "\n", "config", "=", "AutoConfig", ".", "from_pretrained", "(", "args", ".", "model_name_or_path", ")", "\n", "config", ".", "attn_pdrop", "=", "0", "\n", "tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "args", ".", "model_name_or_path", ")", "\n", "tokenizer", ".", "add_special_tokens", "(", "SPECIAL_TOKENS", ")", "\n", "\n", "model", "=", "JointModel", "(", "config", ",", "args", "=", "args", ")", "\n", "if", "args", ".", "load_pretrained_weight", ":", "\n", "\t\t", "model", ".", "load_pretrained_weight", "(", ")", "\n", "\n", "", "model", ".", "resize_token_embeddings", "(", "len", "(", "tokenizer", ")", ")", "\n", "model", ".", "to", "(", "args", ".", "device", ")", "\n", "return", "config", ",", "tokenizer", ",", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.modeling.main.set_seed": [[290, 300], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all"], "function", ["None"], ["", "def", "set_seed", "(", "args", ")", ":", "\n", "\t", "''' for reproduction '''", "\n", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "args", ".", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "enabled", "=", "False", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.modeling.dataset.Dataset.__init__": [[31, 41], ["dataset.Dataset._get_special_token_ids", "dataset.Dataset._create_examples"], "methods", ["home.repos.pwc.inspect_result.apple_ml-cread.modeling.dataset.Dataset._get_special_token_ids", "home.repos.pwc.inspect_result.apple_ml-cread.modeling.dataset.Dataset._create_examples"], ["\t", "def", "__init__", "(", "self", ",", "args", ",", "tokenizer", ",", "data_type", ",", "generation", ",", "data_size", ")", ":", "\n", "\t\t", "assert", "data_type", "in", "[", "'train'", ",", "'dev'", ",", "'test'", "]", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "data_size", "=", "data_size", "\n", "self", ".", "tokenizer", "=", "tokenizer", "\n", "self", ".", "data_type", "=", "data_type", "\n", "self", ".", "generation", "=", "generation", "\n", "\n", "self", ".", "_get_special_token_ids", "(", ")", "\n", "self", ".", "_create_examples", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.modeling.dataset.Dataset._get_special_token_ids": [[43, 54], ["dataset.Dataset.tokenizer.convert_tokens_to_ids", "dataset.Dataset.tokenizer.convert_tokens_to_ids", "dataset.Dataset.tokenizer.convert_tokens_to_ids", "dataset.Dataset.tokenizer.convert_tokens_to_ids", "dataset.Dataset.mc_cl2idx.items"], "methods", ["None"], ["", "def", "_get_special_token_ids", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "SPECIAL_TOKENS", "=", "SPECIAL_TOKENS", "\n", "self", ".", "SPECIAL_TOKENS_VALUES", "=", "SPECIAL_TOKENS_VALUES", "\n", "self", ".", "bos_id", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "self", ".", "SPECIAL_TOKENS", "[", "\"bos_token\"", "]", ")", "\n", "self", ".", "eos_id", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "self", ".", "SPECIAL_TOKENS", "[", "\"eos_token\"", "]", ")", "\n", "self", ".", "pad_id", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "self", ".", "SPECIAL_TOKENS", "[", "\"pad_token\"", "]", ")", "\n", "self", ".", "sep_id", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "self", ".", "SPECIAL_TOKENS", "[", "\"sep_token\"", "]", ")", "\n", "\n", "# mention detection vocab", "\n", "self", ".", "mc_cl2idx", "=", "{", "'<N>'", ":", "0", ",", "'<M>'", ":", "1", ",", "'</M>'", ":", "2", "}", "# <N>: none, <M>: start of mention, \"</M>\": end of mention", "\n", "self", ".", "mc_idx2cl", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "mc_cl2idx", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.modeling.dataset.Dataset.prepare_reference_label": [[56, 81], ["dataset.Dataset.tokenizer.convert_ids_to_tokens", "token.replace", "token_label_index.append"], "methods", ["None"], ["", "def", "prepare_reference_label", "(", "self", ",", "word_label_index", ",", "wordId2tokenId", ",", "input_ids", ")", ":", "\n", "\t\t", "'''\n\t\t\trecord the index of start/end of mention and refernece in the input otterance\n\t\t\tthis info will be used as attention signal in reference resolution step\n\t\t'''", "\n", "reconstruct_sentence", "=", "self", ".", "tokenizer", ".", "convert_ids_to_tokens", "(", "input_ids", ")", "\n", "reconstruct_sentence", "=", "[", "token", ".", "replace", "(", "'\u0120'", ",", "''", ")", "for", "token", "in", "reconstruct_sentence", "]", "\n", "token_label_index", "=", "[", "]", "\n", "for", "start_end_link", "in", "word_label_index", ":", "\n", "\t\t\t", "for", "link_meta", "in", "start_end_link", ":", "\n", "\t\t\t\t", "attention_word_idx", ",", "mention_word_idx", "=", "link_meta", "[", "'attention_idx'", "]", ",", "link_meta", "[", "'mention_idx'", "]", "\n", "\n", "if", "link_meta", "[", "'mention_type'", "]", "==", "'start'", ":", "\n", "\t\t\t\t\t", "attention_token_idx", "=", "wordId2tokenId", "[", "attention_word_idx", "]", "[", "0", "]", "\n", "", "else", ":", "# end", "\n", "\t\t\t\t\t", "attention_token_idx", "=", "wordId2tokenId", "[", "attention_word_idx", "]", "[", "-", "1", "]", "\n", "\n", "", "for", "mention_token_idx", "in", "wordId2tokenId", "[", "mention_word_idx", "]", ":", "\n", "\t\t\t\t\t", "link", "=", "{", "}", "\n", "link", "[", "'mention_token_idx'", "]", "=", "mention_token_idx", "\n", "link", "[", "'attention_token_idx'", "]", "=", "attention_token_idx", "\n", "assert", "reconstruct_sentence", "[", "mention_token_idx", "]", "in", "link_meta", "[", "'mention_word'", "]", "\n", "assert", "reconstruct_sentence", "[", "attention_token_idx", "]", "in", "link_meta", "[", "'attention_word'", "]", "\n", "", "token_label_index", ".", "append", "(", "link", ")", "\n", "", "", "return", "token_label_index", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.modeling.dataset.Dataset.prepare_binary_label": [[83, 92], ["isinstance", "len"], "methods", ["None"], ["", "def", "prepare_binary_label", "(", "self", ",", "input_ids", ",", "wordId2tokenId", ",", "binary_rewrite", ",", "curr_end_token_idx", ")", ":", "\n", "\t\t", "''' only the start of rewriting token receives binary signal '''", "\n", "binary_label", "=", "[", "-", "100", "]", "*", "len", "(", "input_ids", ")", "\n", "assert", "isinstance", "(", "binary_rewrite", ",", "bool", ")", "\n", "if", "binary_rewrite", "==", "True", ":", "\n", "\t\t\t", "binary_label", "[", "curr_end_token_idx", "]", "=", "1", "# rewrite", "\n", "", "else", ":", "\n", "\t\t\t", "binary_label", "[", "curr_end_token_idx", "]", "=", "0", "# not rewrite", "\n", "", "return", "binary_label", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.modeling.dataset.Dataset.prepare_mention_label": [[94, 117], ["len"], "methods", ["None"], ["", "def", "prepare_mention_label", "(", "self", ",", "input_ids", ",", "word_label_index", ",", "wordId2tokenId", ",", "curr_start_idx", ",", "curr_end_idx", ")", ":", "\n", "\t\t", "'''\n\t\t\tget label index for mention detection\n\t\t\tonly the parts of current utterance receive signal, everwhere else will get -100\n\t\t'''", "\n", "mention_label", "=", "[", "-", "100", "]", "*", "len", "(", "input_ids", ")", "\n", "curr_start_idx", "=", "wordId2tokenId", "[", "curr_start_idx", "]", "[", "0", "]", "\n", "curr_end_idx", "=", "wordId2tokenId", "[", "curr_end_idx", "-", "1", "]", "[", "-", "1", "]", "+", "1", "\n", "\n", "# align class <N> (none) to everywehere in current utterance first", "\n", "mention_label", "[", "curr_start_idx", ":", "curr_end_idx", "]", "=", "[", "self", ".", "mc_cl2idx", "[", "'<N>'", "]", "]", "*", "(", "curr_end_idx", "-", "curr_start_idx", ")", "\n", "\n", "for", "start_end_link", "in", "word_label_index", ":", "# iterate over links in one example", "\n", "\t\t\t", "for", "link_meta", "in", "start_end_link", ":", "# iterate over start and end of a link", "\n", "\t\t\t\t", "idx", "=", "link_meta", "[", "'mention_idx'", "]", "\n", "if", "link_meta", "[", "'mention_type'", "]", "==", "'start'", ":", "# align class <M> (start of mention)", "\n", "\t\t\t\t\t", "for", "idx", "in", "wordId2tokenId", "[", "idx", "]", ":", "\n", "\t\t\t\t\t\t", "mention_label", "[", "idx", "]", "=", "self", ".", "mc_cl2idx", "[", "'<M>'", "]", "\n", "", "", "else", ":", "# # align class </M> (end of mention)", "\n", "\t\t\t\t\t", "idx", "=", "wordId2tokenId", "[", "idx", "]", "[", "-", "1", "]", "\n", "mention_label", "[", "idx", "]", "=", "self", ".", "mc_cl2idx", "[", "'</M>'", "]", "\n", "\n", "", "", "", "return", "mention_label", ",", "curr_start_idx", ",", "curr_end_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.modeling.dataset.Dataset._check_label_index": [[119, 126], ["whole_input.split"], "methods", ["None"], ["", "def", "_check_label_index", "(", "self", ",", "whole_input", ",", "links", ")", ":", "\n", "\t\t", "''' sanity check for index correctness '''", "\n", "seq", "=", "whole_input", ".", "split", "(", ")", "\n", "for", "link", "in", "links", ":", "\n", "\t\t\t", "for", "start_or_end", "in", "link", ":", "\n", "\t\t\t\t", "for", "word_type", "in", "[", "'mention'", ",", "'attention'", "]", ":", "\n", "\t\t\t\t\t", "assert", "seq", "[", "start_or_end", "[", "'{}_idx'", ".", "format", "(", "word_type", ")", "]", "]", "==", "start_or_end", "[", "'{}_word'", ".", "format", "(", "word_type", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.modeling.dataset.Dataset._create_examples": [[128, 217], ["enumerate", "print", "open", "json.load", "tqdm.tqdm.tqdm", "copy.deepcopy", "copy.deepcopy.append", "sum", "dataset.Dataset._check_label_index", "dataset.Dataset.tokenize_with_map", "len", "dataset.Dataset.examples.append", "len", "dataset.Dataset.prepare_mention_label", "dataset.Dataset.prepare_reference_label", "dataset.Dataset.prepare_binary_label", "dataset.Dataset.prepare_mention_label", "dataset.Dataset.prepare_reference_label", "len", "len", "curr_utt.split", "dataset.Dataset.tokenizer", "len", "len", "s.split", "len"], "methods", ["home.repos.pwc.inspect_result.apple_ml-cread.modeling.dataset.Dataset._check_label_index", "home.repos.pwc.inspect_result.apple_ml-cread.modeling.dataset.Dataset.tokenize_with_map", "home.repos.pwc.inspect_result.apple_ml-cread.modeling.dataset.Dataset.prepare_mention_label", "home.repos.pwc.inspect_result.apple_ml-cread.modeling.dataset.Dataset.prepare_reference_label", "home.repos.pwc.inspect_result.apple_ml-cread.modeling.dataset.Dataset.prepare_binary_label", "home.repos.pwc.inspect_result.apple_ml-cread.modeling.dataset.Dataset.prepare_mention_label", "home.repos.pwc.inspect_result.apple_ml-cread.modeling.dataset.Dataset.prepare_reference_label"], ["", "", "", "", "def", "_create_examples", "(", "self", ")", ":", "\n", "\t\t", "if", "self", ".", "data_type", "==", "'train'", ":", "\n", "\t\t\t", "data_file", "=", "self", ".", "args", ".", "train_file", "\n", "", "elif", "self", ".", "data_type", "==", "'dev'", ":", "\n", "\t\t\t", "data_file", "=", "self", ".", "args", ".", "dev_file", "\n", "", "else", ":", "\n", "\t\t\t", "data_file", "=", "self", ".", "args", ".", "test_file", "\n", "\n", "", "with", "open", "(", "data_file", ")", "as", "f", ":", "\n", "\t\t\t", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "self", ".", "examples", "=", "[", "]", "\n", "for", "example_num", ",", "example", "in", "enumerate", "(", "tqdm", "(", "data", ",", "disable", "=", "self", ".", "args", ".", "disable_display", ")", ")", ":", "\n", "\t\t\t", "if", "self", ".", "data_size", "!=", "-", "1", "and", "example_num", "==", "self", ".", "data_size", ":", "\n", "\t\t\t\t", "break", "\n", "\n", "# get data", "\n", "", "context", "=", "example", "[", "'dialogue context'", "]", "# context, list of str", "\n", "curr_utt", "=", "example", "[", "'current utterance'", "]", "# current utterance, str", "\n", "rewt_utt", "=", "example", "[", "'rewrite utterance'", "]", "# rewrite utterance, str", "\n", "word_label_index", "=", "example", "[", "'link index'", "]", "# index of mention/reference span", "\n", "binary_rewrite", "=", "example", "[", "'rewrite happen'", "]", "# binary label for rewrite or not, bool", "\n", "\n", "# prepare input sequence to model", "\n", "whole_input", "=", "copy", ".", "deepcopy", "(", "context", ")", "\n", "whole_input", ".", "append", "(", "curr_utt", ")", "\n", "curr_start_idx", "=", "sum", "(", "[", "len", "(", "s", ".", "split", "(", ")", ")", "for", "s", "in", "context", "]", ")", "# the (word) start idx of current utt", "\n", "curr_end_idx", "=", "curr_start_idx", "+", "len", "(", "curr_utt", ".", "split", "(", ")", ")", "\n", "\n", "whole_input", "=", "\" \"", ".", "join", "(", "whole_input", ")", "\n", "self", ".", "_check_label_index", "(", "whole_input", ",", "word_label_index", ")", "\n", "input_ids", ",", "wordId2tokenId", ",", "tokenId2wordId", "=", "self", ".", "tokenize_with_map", "(", "whole_input", ")", "\n", "\n", "if", "rewt_utt", "==", "\"\"", ":", "\n", "\t\t\t\t", "rewt_utt_ids", "=", "[", "]", "\n", "", "else", ":", "\n", "\t\t\t\t", "rewt_utt_ids", "=", "self", ".", "tokenizer", "(", "rewt_utt", ")", "[", "'input_ids'", "]", "# list", "\n", "", "target_utt_ids", "=", "rewt_utt_ids", "\n", "target_utt_len", "=", "len", "(", "target_utt_ids", ")", "\n", "\n", "if", "not", "self", ".", "generation", ":", "\n", "# input seq: CTX <CUR> current utterance <SEP> rewritten utterance <EOS>", "\n", "\t\t\t\t", "input_ids", "=", "input_ids", "+", "[", "self", ".", "sep_id", "]", "+", "target_utt_ids", "+", "[", "self", ".", "eos_id", "]", "\n", "\n", "# mention detection signal", "\n", "mention_label", ",", "curr_start_token_idx", ",", "curr_end_token_idx", "=", "self", ".", "prepare_mention_label", "(", "input_ids", ",", "word_label_index", ",", "wordId2tokenId", ",", "curr_start_idx", ",", "curr_end_idx", ")", "\n", "\n", "# reference resolution signal", "\n", "reference_label_index", "=", "self", ".", "prepare_reference_label", "(", "word_label_index", ",", "wordId2tokenId", ",", "input_ids", ")", "\n", "\n", "# binary classification of rewriting signal", "\n", "binary_label", "=", "self", ".", "prepare_binary_label", "(", "input_ids", ",", "wordId2tokenId", ",", "binary_rewrite", ",", "curr_end_token_idx", ")", "\n", "\n", "# rewriting singal", "\n", "ignore_len", "=", "len", "(", "input_ids", ")", "-", "target_utt_len", "-", "1", "# eos_id", "\n", "label_ids", "=", "[", "-", "100", "]", "*", "ignore_len", "+", "target_utt_ids", "+", "[", "self", ".", "eos_id", "]", "\n", "assert", "len", "(", "input_ids", ")", "==", "len", "(", "label_ids", ")", "\n", "\n", "", "else", ":", "# generation", "\n", "# <sep> is given at first step during decoding", "\n", "\t\t\t\t", "input_ids", "=", "input_ids", "\n", "label_ids", "=", "None", "\n", "mention_label", ",", "curr_start_token_idx", ",", "curr_end_token_idx", "=", "self", ".", "prepare_mention_label", "(", "input_ids", ",", "word_label_index", ",", "wordId2tokenId", ",", "curr_start_idx", ",", "curr_end_idx", ")", "\n", "reference_label_index", "=", "self", ".", "prepare_reference_label", "(", "word_label_index", ",", "wordId2tokenId", ",", "input_ids", ")", "\n", "binary_label", "=", "None", "\n", "\n", "", "self", ".", "examples", ".", "append", "(", "{", "\n", "'input_ids'", ":", "input_ids", ",", "# list of ids", "\n", "'label_ids'", ":", "label_ids", ",", "# list of ids", "\n", "'mention_label_ids'", ":", "mention_label", ",", "\n", "'curr_start_token_idx'", ":", "curr_start_token_idx", ",", "\n", "'curr_end_token_idx'", ":", "curr_end_token_idx", ",", "\n", "'reference_label'", ":", "reference_label_index", ",", "\n", "'wordId2tokenId'", ":", "wordId2tokenId", ",", "\n", "'tokenId2wordId'", ":", "tokenId2wordId", ",", "\n", "'context'", ":", "context", ",", "\n", "'curr_utt'", ":", "curr_utt", ",", "\n", "'whole_input'", ":", "whole_input", ",", "\n", "'rewt_utt'", ":", "rewt_utt", ",", "\n", "'example_id'", ":", "example", "[", "'example index'", "]", ",", "\n", "'spk'", ":", "example", "[", "'speaker'", "]", ",", "\n", "'coref_label'", ":", "word_label_index", ",", "\n", "'binary_label_ids'", ":", "binary_label", ",", "\n", "'binary_rewrite'", ":", "binary_rewrite", "\n", "}", ")", "\n", "\n", "", "print", "(", "'Data Statistics: {} -> {} examples'", ".", "format", "(", "self", ".", "data_type", ",", "len", "(", "self", ".", "examples", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.modeling.dataset.Dataset._pad": [[219, 231], ["max", "map", "sentences_pad.append", "attention_mask.append", "len", "len"], "methods", ["None"], ["", "def", "_pad", "(", "self", ",", "sentences", ",", "pad_id", ")", ":", "\n", "\t\t", "'''\n\t\t\tsentences: a list of list with ids\n\t\t'''", "\n", "max_len", "=", "max", "(", "(", "map", "(", "len", ",", "sentences", ")", ")", ")", "\n", "attention_mask", "=", "[", "]", "\n", "sentences_pad", "=", "[", "]", "\n", "for", "sent", "in", "sentences", ":", "\n", "\t\t\t", "pad_len", "=", "max_len", "-", "len", "(", "sent", ")", "\n", "sentences_pad", ".", "append", "(", "sent", "+", "[", "pad_id", "]", "*", "pad_len", ")", "\n", "attention_mask", ".", "append", "(", "[", "1", "]", "*", "len", "(", "sent", ")", "+", "[", "0", "]", "*", "pad_len", ")", "\n", "", "return", "sentences_pad", ",", "attention_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.modeling.dataset.Dataset.__len__": [[233, 235], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "return", "len", "(", "self", ".", "examples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.modeling.dataset.Dataset.__getitem__": [[237, 239], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\t\t", "return", "self", ".", "examples", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.modeling.dataset.Dataset.collate_fn": [[241, 288], ["dataset.Dataset._pad", "torch.tensor().long().to", "torch.tensor().long().to", "dataset.Dataset._pad", "torch.tensor().long().to", "dataset.Dataset._pad", "torch.tensor().long().to", "dataset.Dataset._pad", "torch.tensor().long().to", "dataset.Dataset._pad", "torch.tensor().long().to", "torch.tensor().long", "torch.tensor().long", "torch.tensor().long", "torch.tensor().long", "torch.tensor().long", "torch.tensor().long", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.apple_ml-cread.modeling.dataset.Dataset._pad", "home.repos.pwc.inspect_result.apple_ml-cread.modeling.dataset.Dataset._pad", "home.repos.pwc.inspect_result.apple_ml-cread.modeling.dataset.Dataset._pad", "home.repos.pwc.inspect_result.apple_ml-cread.modeling.dataset.Dataset._pad", "home.repos.pwc.inspect_result.apple_ml-cread.modeling.dataset.Dataset._pad"], ["", "def", "collate_fn", "(", "self", ",", "batch", ")", ":", "\n", "\t\t", "input_ids", "=", "[", "example", "[", "'input_ids'", "]", "for", "example", "in", "batch", "]", "\n", "input_ids", ",", "attention_mask", "=", "self", ".", "_pad", "(", "input_ids", ",", "self", ".", "pad_id", ")", "\n", "input_ids", ",", "attention_mask", "=", "torch", ".", "tensor", "(", "input_ids", ")", ".", "long", "(", ")", ".", "to", "(", "self", ".", "args", ".", "device", ")", ",", "torch", ".", "tensor", "(", "attention_mask", ")", ".", "long", "(", ")", ".", "to", "(", "self", ".", "args", ".", "device", ")", "\n", "\n", "if", "not", "self", ".", "generation", ":", "\n", "\t\t\t", "label_ids", "=", "[", "example", "[", "'label_ids'", "]", "for", "example", "in", "batch", "]", "\n", "label_ids", ",", "_", "=", "self", ".", "_pad", "(", "label_ids", ",", "-", "100", ")", "\n", "label_ids", "=", "torch", ".", "tensor", "(", "label_ids", ")", ".", "long", "(", ")", ".", "to", "(", "self", ".", "args", ".", "device", ")", "\n", "mention_label_ids", "=", "[", "example", "[", "'mention_label_ids'", "]", "for", "example", "in", "batch", "]", "\n", "mention_label_ids", ",", "_", "=", "self", ".", "_pad", "(", "mention_label_ids", ",", "-", "100", ")", "\n", "mention_label_ids", "=", "torch", ".", "tensor", "(", "mention_label_ids", ")", ".", "long", "(", ")", ".", "to", "(", "self", ".", "args", ".", "device", ")", "\n", "binary_label_ids", "=", "[", "example", "[", "'binary_label_ids'", "]", "for", "example", "in", "batch", "]", "\n", "binary_label_ids", ",", "_", "=", "self", ".", "_pad", "(", "binary_label_ids", ",", "-", "100", ")", "\n", "binary_label_ids", "=", "torch", ".", "tensor", "(", "binary_label_ids", ")", ".", "long", "(", ")", ".", "to", "(", "self", ".", "args", ".", "device", ")", "\n", "", "else", ":", "\n", "\t\t\t", "label_ids", "=", "None", "\n", "mention_label_ids", "=", "[", "example", "[", "'mention_label_ids'", "]", "for", "example", "in", "batch", "]", "\n", "mention_label_ids", ",", "_", "=", "self", ".", "_pad", "(", "mention_label_ids", ",", "-", "100", ")", "\n", "mention_label_ids", "=", "torch", ".", "tensor", "(", "mention_label_ids", ")", ".", "long", "(", ")", ".", "to", "(", "self", ".", "args", ".", "device", ")", "\n", "binary_label_ids", "=", "None", "\n", "", "token_type_ids", "=", "None", "# TODO: not sure if this makes any effect to gpt2", "\n", "\n", "# record info", "\n", "context", "=", "[", "example", "[", "'context'", "]", "for", "example", "in", "batch", "]", "\n", "curr_utt", "=", "[", "example", "[", "'curr_utt'", "]", "for", "example", "in", "batch", "]", "\n", "rewt_utt", "=", "[", "example", "[", "'rewt_utt'", "]", "for", "example", "in", "batch", "]", "\n", "example_ids", "=", "[", "example", "[", "'example_id'", "]", "for", "example", "in", "batch", "]", "# record the example idx in batch", "\n", "curr_start_token_idx", "=", "[", "example", "[", "'curr_start_token_idx'", "]", "for", "example", "in", "batch", "]", "\n", "curr_end_token_idx", "=", "[", "example", "[", "'curr_end_token_idx'", "]", "for", "example", "in", "batch", "]", "\n", "reference_label", "=", "[", "example", "[", "'reference_label'", "]", "for", "example", "in", "batch", "]", "\n", "wordId2tokenId", "=", "[", "example", "[", "'wordId2tokenId'", "]", "for", "example", "in", "batch", "]", "\n", "tokenId2wordId", "=", "[", "example", "[", "'tokenId2wordId'", "]", "for", "example", "in", "batch", "]", "\n", "whole_input", "=", "[", "example", "[", "'whole_input'", "]", "for", "example", "in", "batch", "]", "\n", "spk", "=", "[", "example", "[", "'spk'", "]", "for", "example", "in", "batch", "]", "\n", "coref_label", "=", "[", "example", "[", "'coref_label'", "]", "for", "example", "in", "batch", "]", "\n", "binary_rewrite", "=", "[", "example", "[", "'binary_rewrite'", "]", "for", "example", "in", "batch", "]", "\n", "\n", "return", "{", "'input_ids'", ":", "input_ids", ",", "'attention_mask'", ":", "attention_mask", ",", "'token_type_ids'", ":", "token_type_ids", ",", "'label_ids'", ":", "label_ids", ",", "'context'", ":", "context", ",", "'curr_utt'", ":", "curr_utt", ",", "'rewt_utt'", ":", "rewt_utt", ",", "'example_ids'", ":", "example_ids", ",", "'spk'", ":", "spk", ",", "'mention_label_ids'", ":", "mention_label_ids", ",", "'curr_start_token_idx'", ":", "curr_start_token_idx", ",", "'curr_end_token_idx'", ":", "curr_end_token_idx", ",", "'reference_label'", ":", "reference_label", ",", "'wordId2tokenId'", ":", "wordId2tokenId", ",", "'tokenId2wordId'", ":", "tokenId2wordId", ",", "'whole_input'", ":", "whole_input", ",", "'coref_label'", ":", "coref_label", ",", "'binary_label_ids'", ":", "binary_label_ids", ",", "'binary_rewrite'", ":", "binary_rewrite", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.modeling.dataset.Dataset.tokenize_with_map": [[290, 325], ["isinstance", "dataset.Dataset.tokenizer.convert_ids_to_tokens", "sentence.split.split.split", "enumerate", "wordId2tokenId.items", "dataset.Dataset.tokenizer", "token.replace", "len", "len", "len", "len", "wordId2tokenId[].append"], "methods", ["None"], ["", "def", "tokenize_with_map", "(", "self", ",", "sentence", ")", ":", "\n", "\t\t", "'''\n\t\t\tBuild the mapping of indexes before/after tokenizer to handel BPE\n\n\t\t\tInput:\n\t\t\t\tsentence: a natural sentence, str\n\t\t\tReturns:\n\t\t\t\twordId2tokenId, a 1-to-many map\n\t\t\t\ttokenId2wordId, a many-to-1 map\n\t\t'''", "\n", "assert", "isinstance", "(", "sentence", ",", "str", ")", "\n", "token_ids", "=", "self", ".", "tokenizer", "(", "sentence", ")", "[", "'input_ids'", "]", "\n", "reconstruct_sentence", "=", "self", ".", "tokenizer", ".", "convert_ids_to_tokens", "(", "token_ids", ")", "\n", "reconstruct_sentence", "=", "[", "token", ".", "replace", "(", "'\u0120'", ",", "''", ")", "for", "token", "in", "reconstruct_sentence", "]", "\n", "sentence", "=", "sentence", ".", "split", "(", ")", "\n", "\n", "wordId2tokenId", "=", "{", "}", "\n", "tokenId", "=", "0", "\n", "for", "wordId", ",", "word", "in", "enumerate", "(", "sentence", ")", ":", "\n", "\t\t\t", "wordId2tokenId", "[", "wordId", "]", "=", "[", "]", "\n", "token", "=", "\"\"", "\n", "while", "word", "!=", "token", ":", "\n", "\t\t\t\t", "wordId2tokenId", "[", "wordId", "]", ".", "append", "(", "tokenId", ")", "\n", "token", "+=", "reconstruct_sentence", "[", "tokenId", "]", "\n", "tokenId", "+=", "1", "\n", "\n", "", "", "tokenId2wordId", "=", "{", "}", "\n", "for", "wordId", ",", "tokenIds", "in", "wordId2tokenId", ".", "items", "(", ")", ":", "\n", "\t\t\t", "for", "tokenId", "in", "tokenIds", ":", "\n", "\t\t\t\t", "assert", "tokenId", "not", "in", "tokenId2wordId", "\n", "tokenId2wordId", "[", "tokenId", "]", "=", "wordId", "\n", "\n", "", "", "assert", "len", "(", "wordId2tokenId", ")", "==", "len", "(", "sentence", ")", "\n", "assert", "len", "(", "tokenId2wordId", ")", "==", "len", "(", "reconstruct_sentence", ")", "\n", "return", "token_ids", ",", "wordId2tokenId", ",", "tokenId2wordId", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.modeling.model.JointModel.__init__": [[22, 48], ["transformers.GPT2PreTrainedModel.__init__", "transformers.GPT2Model", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "model.JointModel.init_weights", "model.Conv1D", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "model.JointModel.mc_cl2idx.items", "model.Conv1D", "range"], "methods", ["home.repos.pwc.inspect_result.apple_ml-cread.training.metrics.UtteranceScore.__init__"], ["\t", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "args", "=", "kwargs", "[", "'args'", "]", "\n", "self", ".", "config", "=", "config", "\n", "\n", "# core gpt2 and lm head", "\n", "self", ".", "transformer", "=", "GPT2Model", "(", "config", ")", "\n", "self", ".", "lm_head", "=", "nn", ".", "Linear", "(", "config", ".", "n_embd", ",", "config", ".", "vocab_size", ",", "bias", "=", "False", ")", "\n", "\n", "# mention detection output index", "\n", "self", ".", "mc_cl2idx", "=", "{", "'<N>'", ":", "0", ",", "'<M>'", ":", "1", ",", "'</M>'", ":", "2", "}", "\n", "self", ".", "mc_idx2cl", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "mc_cl2idx", ".", "items", "(", ")", "}", "\n", "self", ".", "cl_head", "=", "nn", ".", "Linear", "(", "config", ".", "n_embd", ",", "3", ")", "# head for 3 classes in mention dection", "\n", "\n", "# attention parameters in coref2qr mechanism", "\n", "if", "self", ".", "args", ".", "coref_attn_share_between_layer", ":", "\n", "\t\t\t", "self", ".", "c_attn", "=", "Conv1D", "(", "3", "*", "config", ".", "n_embd", ",", "config", ".", "n_embd", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "c_attn", "=", "nn", ".", "ModuleList", "(", "[", "Conv1D", "(", "3", "*", "config", ".", "n_embd", ",", "config", ".", "n_embd", ")", "for", "_", "in", "range", "(", "self", ".", "config", ".", "n_layer", "+", "1", ")", "]", ")", "\n", "\n", "# binary classification for rewriting or not", "\n", "", "if", "self", ".", "args", ".", "use_binary_cls", ":", "\n", "\t\t\t", "self", ".", "binary_cls1", "=", "nn", ".", "Linear", "(", "config", ".", "n_embd", ",", "config", ".", "n_embd", ")", "\n", "self", ".", "binary_cls2", "=", "nn", ".", "Linear", "(", "config", ".", "n_embd", ",", "2", ",", "bias", "=", "False", ")", "# output layer for rewrite or not", "\n", "\n", "", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.modeling.model.JointModel.load_pretrained_weight": [[50, 55], ["print", "transformers.GPT2LMHeadModel.from_pretrained", "model.JointModel.transformer.load_state_dict", "model.JointModel.lm_head.load_state_dict", "transformers.GPT2LMHeadModel.from_pretrained.transformer.state_dict", "transformers.GPT2LMHeadModel.from_pretrained.lm_head.state_dict"], "methods", ["None"], ["", "def", "load_pretrained_weight", "(", "self", ")", ":", "\n", "\t\t", "print", "(", "'Load pretrained GPT'", ")", "\n", "pretrained_gpt", "=", "GPT2LMHeadModel", ".", "from_pretrained", "(", "'gpt2'", ",", "config", "=", "self", ".", "config", ")", "\n", "self", ".", "transformer", ".", "load_state_dict", "(", "pretrained_gpt", ".", "transformer", ".", "state_dict", "(", ")", ")", "\n", "self", ".", "lm_head", ".", "load_state_dict", "(", "pretrained_gpt", ".", "lm_head", ".", "state_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.modeling.model.JointModel.get_output_embeddings": [[57, 59], ["None"], "methods", ["None"], ["", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "lm_head", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.modeling.model.JointModel.prepare_inputs_for_generation": [[61, 67], ["input_ids[].unsqueeze"], "methods", ["None"], ["", "def", "prepare_inputs_for_generation", "(", "self", ",", "input_ids", ",", "past", ",", "**", "kwargs", ")", ":", "\n", "# only last token for inputs_ids if past is defined in kwargs", "\n", "\t\t", "if", "past", ":", "\n", "\t\t\t", "input_ids", "=", "input_ids", "[", ":", ",", "-", "1", "]", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "", "return", "{", "\"input_ids\"", ":", "input_ids", ",", "\"past\"", ":", "past", ",", "\"use_cache\"", ":", "kwargs", "[", "\"use_cache\"", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.modeling.model.JointModel._compute_reference_loss": [[69, 88], ["range", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "range", "model.JointModel._get_one_head_loss", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "[].contiguous"], "methods", ["home.repos.pwc.inspect_result.apple_ml-cread.modeling.model.JointModel._get_one_head_loss"], ["", "def", "_compute_reference_loss", "(", "self", ",", "batch", ",", "attentions", ")", ":", "\n", "\t\t", "'''\n\t\t\tattentions: all attnetion heads tuple of (B, n_heads, T, T)\n\t\t'''", "\n", "LOSS", ",", "c", "=", "0", ",", "0", "\n", "for", "layer_idx", "in", "range", "(", "self", ".", "config", ".", "n_layer", ")", ":", "# iterate layers", "\n", "\t\t\t", "if", "layer_idx", "not", "in", "self", ".", "args", ".", "coref_layer_idx", ":", "\n", "\t\t\t\t", "continue", "\n", "\n", "", "for", "head_idx", "in", "range", "(", "self", ".", "args", ".", "n_coref_head", ")", ":", "# iterate heads", "\n", "\t\t\t\t", "head_loss", "=", "self", ".", "_get_one_head_loss", "(", "batch", ",", "attentions", "[", "layer_idx", "]", "[", ":", ",", "head_idx", ",", ":", ",", ":", "]", ".", "contiguous", "(", ")", ")", "\n", "LOSS", "+=", "head_loss", "\n", "c", "+=", "1", "\n", "\n", "", "", "zero_loss", "=", "torch", ".", "tensor", "(", "0", ")", ".", "to", "(", "self", ".", "args", ".", "device", ")", "\n", "if", "LOSS", "==", "zero_loss", ":", "# all heads no loss", "\n", "\t\t\t", "return", "zero_loss", "\n", "", "else", ":", "\n", "\t\t\t", "return", "LOSS", "/", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.modeling.model.JointModel._get_one_head_loss": [[90, 114], ["enumerate", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.tensor().long().to", "torch.tensor().long().to", "torch.tensor().long().to", "torch.tensor().long().to", "torch.nn.NLLLoss", "torch.nn.NLLLoss", "torch.nn.NLLLoss.", "torch.nn.NLLLoss.", "len", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.log", "torch.log", "torch.log", "torch.log", "torch.stack.append", "torch.stack.append", "torch.tensor().long().to.append", "torch.tensor().long().to.append", "torch.tensor().long", "torch.tensor().long", "torch.tensor().long", "torch.tensor().long", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "", "def", "_get_one_head_loss", "(", "self", ",", "batch", ",", "reference_head", ")", ":", "\n", "\t\t", "'''\n\t\t\tCompute the reference resolution loss per attention head\n\t\t\treference_head: an attention head in a layer (B, T, T)\n\t\t'''", "\n", "dists", ",", "labels", "=", "[", "]", ",", "[", "]", "\n", "batch_links", "=", "batch", "[", "'reference_label'", "]", "\n", "for", "b_idx", ",", "links", "in", "enumerate", "(", "batch_links", ")", ":", "\n", "\t\t\t", "for", "link", "in", "links", ":", "\n", "\t\t\t\t", "m_idx", "=", "link", "[", "'mention_token_idx'", "]", "\n", "a_idx", "=", "link", "[", "'attention_token_idx'", "]", "\n", "dist", "=", "reference_head", "[", "b_idx", ",", "m_idx", ",", ":", "]", "\n", "dists", ".", "append", "(", "dist", ")", "\n", "labels", ".", "append", "(", "a_idx", ")", "\n", "\n", "", "", "if", "len", "(", "dists", ")", "==", "0", ":", "# might have no link in a batch", "\n", "\t\t\t", "return", "torch", ".", "tensor", "(", "0", ")", ".", "to", "(", "self", ".", "args", ".", "device", ")", "\n", "\n", "", "dists", "=", "torch", ".", "stack", "(", "dists", ",", "dim", "=", "0", ")", "# (B', T)", "\n", "labels", "=", "torch", ".", "tensor", "(", "labels", ")", ".", "long", "(", ")", ".", "to", "(", "self", ".", "args", ".", "device", ")", "# (B',)", "\n", "\n", "nll_fct", "=", "NLLLoss", "(", ")", "\n", "loss", "=", "nll_fct", "(", "torch", ".", "log", "(", "dists", "+", "self", ".", "args", ".", "eps", ")", ",", "labels", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.modeling.model.JointModel._filter_not_rewrite": [[116, 141], ["enumerate", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "logits.size", "labels.size", "logits.size", "labels.size", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "len", "len"], "methods", ["None"], ["", "def", "_filter_not_rewrite", "(", "self", ",", "logits", ",", "labels", ",", "batch", ")", ":", "\n", "\t\t", "'''\n\t\t\tFilter out examples in a batch that do not require rewirting for lm loss\n\n\t\t\tlogits: (B, T, C)\n\t\t\tlabels: (B, T)\n\t\t'''", "\n", "assert", "logits", ".", "size", "(", "0", ")", "==", "labels", ".", "size", "(", "0", ")", "\n", "assert", "logits", ".", "size", "(", "1", ")", "==", "labels", ".", "size", "(", "1", ")", "\n", "new_logits", ",", "new_labels", "=", "[", "]", ",", "[", "]", "\n", "pruned_bs_idx", "=", "-", "1", "\n", "for", "bs_idx", ",", "rewrite_bool", "in", "enumerate", "(", "batch", "[", "'binary_rewrite'", "]", ")", ":", "# a list of bool", "\n", "\t\t\t", "pruned_bs_idx", "+=", "1", "\n", "if", "rewrite_bool", "==", "False", ":", "\n", "\t\t\t\t", "continue", "\n", "\n", "", "new_logits", ".", "append", "(", "logits", "[", "pruned_bs_idx", ",", ":", ",", ":", "]", ")", "\n", "new_labels", ".", "append", "(", "labels", "[", "pruned_bs_idx", ",", ":", "]", ")", "\n", "\n", "", "if", "len", "(", "new_logits", ")", "==", "0", "and", "len", "(", "new_labels", ")", "==", "0", ":", "\n", "\t\t\t", "return", "None", ",", "None", "\n", "\n", "", "new_logits", "=", "torch", ".", "stack", "(", "new_logits", ",", "dim", "=", "0", ")", "\n", "new_labels", "=", "torch", ".", "stack", "(", "new_labels", ",", "dim", "=", "0", ")", "\n", "return", "new_logits", ",", "new_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.modeling.model.JointModel._compute_lm_loss": [[143, 159], ["lm_logits[].contiguous", "labels[].contiguous", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "model.JointModel._filter_not_rewrite", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "lm_logits[].contiguous.view", "labels[].contiguous.view", "lm_logits[].contiguous.size", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.apple_ml-cread.modeling.model.JointModel._filter_not_rewrite"], ["", "def", "_compute_lm_loss", "(", "self", ",", "lm_logits", ",", "labels", ",", "batch", ")", ":", "\n", "# filter out examples if `filter_not_rewrite_loss` switch is on", "\n", "\t\t", "if", "self", ".", "args", ".", "filter_not_rewrite_loss", ":", "\n", "\t\t\t", "lm_logits", ",", "labels", "=", "self", ".", "_filter_not_rewrite", "(", "lm_logits", ",", "labels", ",", "batch", ")", "\n", "\n", "", "if", "labels", "==", "None", ":", "# no examples left in a batch", "\n", "\t\t\t", "return", "torch", ".", "tensor", "(", "0", ")", ".", "to", "(", "self", ".", "args", ".", "device", ")", "\n", "\n", "# Shift so that tokens < n predict n", "\n", "", "shift_logits", "=", "lm_logits", "[", "...", ",", ":", "-", "1", ",", ":", "]", ".", "contiguous", "(", ")", "# (B, T, V)", "\n", "shift_labels", "=", "labels", "[", "...", ",", "1", ":", "]", ".", "contiguous", "(", ")", "# (B, T)", "\n", "\n", "# Flatten the tokens", "\n", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "shift_logits", ".", "view", "(", "-", "1", ",", "shift_logits", ".", "size", "(", "-", "1", ")", ")", ",", "shift_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.modeling.model.JointModel._compute_binary_loss": [[160, 166], ["torch.tensor().float().to", "torch.tensor().float().to", "torch.tensor().float().to", "torch.tensor().float().to", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "bi_logits.view", "label.view", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "bi_logits.size", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "_compute_binary_loss", "(", "self", ",", "bi_logits", ",", "batch", ")", ":", "\n", "\t\t", "label", "=", "batch", "[", "'binary_label_ids'", "]", "\n", "loss_weight", "=", "torch", ".", "tensor", "(", "[", "self", ".", "args", ".", "class0_loss_w", ",", "self", ".", "args", ".", "class1_loss_w", "]", ")", ".", "float", "(", ")", ".", "to", "(", "self", ".", "args", ".", "device", ")", "# tune weighted loss", "\n", "loss_fct", "=", "CrossEntropyLoss", "(", "weight", "=", "loss_weight", ")", "\n", "loss", "=", "loss_fct", "(", "bi_logits", ".", "view", "(", "-", "1", ",", "bi_logits", ".", "size", "(", "-", "1", ")", ")", ",", "label", ".", "view", "(", "-", "1", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.modeling.model.JointModel._compute_mention_loss": [[168, 172], ["torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "cl_logits.view", "mention_labels.view", "cl_logits.size"], "methods", ["None"], ["", "def", "_compute_mention_loss", "(", "self", ",", "cl_logits", ",", "mention_labels", ")", ":", "\n", "\t\t", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "loss_mention", "=", "loss_fct", "(", "cl_logits", ".", "view", "(", "-", "1", ",", "cl_logits", ".", "size", "(", "-", "1", ")", ")", ",", "mention_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "return", "loss_mention", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.modeling.model.JointModel.collect_coref_hiddens": [[174, 187], ["range", "all_coref_attn.append", "model.JointModel.collect_coref_hiddens_layer", "all_coref_attn.append"], "methods", ["home.repos.pwc.inspect_result.apple_ml-cread.modeling.model.JointModel.collect_coref_hiddens_layer"], ["", "def", "collect_coref_hiddens", "(", "self", ",", "meta_link_batch", ",", "all_hiddens", ",", "batch", ")", ":", "\n", "\t\t", "'''\n\t\t\tCollect coreference hiddent states pool for coref2qr mechanism\n\t\t\tall_hiddens: tuple of (B, T, H) with len = 1 + n_layer, 1 for embedding\n\t\t'''", "\n", "all_coref_attn", "=", "[", "]", "\n", "for", "layer_idx", "in", "range", "(", "self", ".", "config", ".", "n_layer", "+", "1", ")", ":", "\n", "\t\t\t", "if", "layer_idx", "<=", "(", "self", ".", "config", ".", "n_layer", "-", "self", ".", "args", ".", "coref_attn_layer", ")", ":", "\n", "\t\t\t\t", "all_coref_attn", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "coref_attn", "=", "self", ".", "collect_coref_hiddens_layer", "(", "meta_link_batch", ",", "all_hiddens", "[", "layer_idx", "]", ",", "batch", ")", "\n", "all_coref_attn", ".", "append", "(", "coref_attn", ")", "\n", "", "", "return", "all_coref_attn", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.modeling.model.JointModel.collect_coref_hiddens_layer": [[189, 247], ["hiddens.size", "enumerate", "max", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tensor().float().to", "torch.tensor().float().to", "torch.tensor().float().to", "torch.tensor().float().to", "len", "torch.cat.append", "torch.cat.append", "len", "x.size", "torch.tensor().float().to.append", "torch.tensor().float().to.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat.size", "torch.tensor().float().to.size", "torch.tensor().float().to.size", "len", "sorted", "torch.zeros().to.append", "torch.zeros().to.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "sorted.append", "sorted.append", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to.append", "torch.zeros().to.append", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "hiddens[].unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "collect_coref_hiddens_layer", "(", "self", ",", "meta_link_batch", ",", "hiddens", ",", "batch", ")", ":", "\n", "\t\t", "'''\n\t\tcollect coref hiddens from one layer hiddens (B, T, H)\n\t\t'''", "\n", "B", "=", "hiddens", ".", "size", "(", "0", ")", "\n", "assert", "len", "(", "meta_link_batch", ")", "==", "B", "\n", "coref_hiddens_batch", "=", "[", "]", "\n", "for", "b_idx", ",", "meta_link_example", "in", "enumerate", "(", "meta_link_batch", ")", ":", "\n", "\t\t\t", "wordId2tokenId", "=", "batch", "[", "'wordId2tokenId'", "]", "[", "b_idx", "]", "\n", "start_end_list", "=", "[", "]", "\n", "for", "start_end_link", "in", "meta_link_example", ":", "\n", "\t\t\t\t", "assert", "start_end_link", "[", "0", "]", "[", "'mention_type'", "]", "==", "'start'", "\n", "assert", "start_end_link", "[", "1", "]", "[", "'mention_type'", "]", "==", "'end'", "\n", "m_word_idx_start", "=", "start_end_link", "[", "0", "]", "[", "'mention_idx'", "]", "\n", "m_word_idx_end", "=", "start_end_link", "[", "1", "]", "[", "'mention_idx'", "]", "\n", "r_word_idx_start", "=", "start_end_link", "[", "0", "]", "[", "'attention_idx'", "]", "\n", "r_word_idx_end", "=", "start_end_link", "[", "1", "]", "[", "'attention_idx'", "]", "\n", "\n", "m_token_idx_start", "=", "wordId2tokenId", "[", "m_word_idx_start", "]", "[", "0", "]", "\n", "m_token_idx_end", "=", "wordId2tokenId", "[", "m_word_idx_end", "]", "[", "-", "1", "]", "\n", "r_token_idx_start", "=", "wordId2tokenId", "[", "r_word_idx_start", "]", "[", "0", "]", "\n", "r_token_idx_end", "=", "wordId2tokenId", "[", "r_word_idx_end", "]", "[", "-", "1", "]", "\n", "\n", "# mention/reference_start/end_token_idx", "\n", "if", "self", ".", "args", ".", "coref_attn_mention", "and", "m_token_idx_start", "<", "m_token_idx_end", ":", "# only consider reasonable reasonable predictions", "\n", "\t\t\t\t\t", "start_end_list", ".", "append", "(", "(", "m_token_idx_start", ",", "m_token_idx_end", ")", ")", "\n", "", "if", "r_token_idx_start", "<", "r_token_idx_end", ":", "\n", "\t\t\t\t\t", "start_end_list", ".", "append", "(", "(", "r_token_idx_start", ",", "r_token_idx_end", ")", ")", "\n", "\n", "", "", "if", "len", "(", "start_end_list", ")", ">", "0", ":", "# has at least one coref link", "\n", "\t\t\t\t", "start_end_list", "=", "sorted", "(", "start_end_list", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "# sort by start_idx", "\n", "coref_hiddens_example", "=", "[", "]", "\n", "#\t\t\t\tif self.args.coref_attn_zeros:", "\n", "coref_hiddens_example", ".", "append", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "self", ".", "config", ".", "n_embd", ")", ".", "to", "(", "self", ".", "args", ".", "device", ")", ")", "\n", "for", "start_idx", ",", "end_idx", "in", "start_end_list", ":", "\n", "\t\t\t\t\t", "coref_hiddens_example", ".", "append", "(", "hiddens", "[", "b_idx", ",", "start_idx", ":", "end_idx", ",", ":", "]", ".", "unsqueeze", "(", "0", ")", ")", "# (1, T'', H)", "\n", "", "coref_hiddens_example", "=", "torch", ".", "cat", "(", "coref_hiddens_example", ",", "dim", "=", "1", ")", "# (1, T', H)", "\n", "", "else", ":", "\n", "\t\t\t\t", "coref_hiddens_example", "=", "torch", ".", "zeros", "(", "1", ",", "1", ",", "self", ".", "config", ".", "n_embd", ")", ".", "to", "(", "self", ".", "args", ".", "device", ")", "# (1, 1, H)", "\n", "", "coref_hiddens_batch", ".", "append", "(", "coref_hiddens_example", ")", "\n", "\n", "", "assert", "len", "(", "coref_hiddens_batch", ")", "==", "B", "\n", "# padding", "\n", "coref_len_batch", "=", "[", "x", ".", "size", "(", "1", ")", "for", "x", "in", "coref_hiddens_batch", "]", "\n", "max_coref_len", "=", "max", "(", "coref_len_batch", ")", "\n", "mask", "=", "[", "]", "\n", "for", "b_idx", "in", "range", "(", "B", ")", ":", "\n", "\t\t\t", "coref_len", "=", "coref_len_batch", "[", "b_idx", "]", "\n", "pad_len", "=", "max_coref_len", "-", "coref_len", "\n", "mask", ".", "append", "(", "[", "1", "]", "*", "coref_len", "+", "[", "0", "]", "*", "pad_len", ")", "\n", "coref_hiddens_batch", "[", "b_idx", "]", "=", "torch", ".", "cat", "(", "[", "coref_hiddens_batch", "[", "b_idx", "]", ",", "torch", ".", "zeros", "(", "1", ",", "pad_len", ",", "self", ".", "config", ".", "n_embd", ")", ".", "to", "(", "self", ".", "args", ".", "device", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "coref_hiddens_batch", "=", "torch", ".", "cat", "(", "coref_hiddens_batch", ",", "dim", "=", "0", ")", "# (B, T', H)", "\n", "mask", "=", "torch", ".", "tensor", "(", "mask", ")", ".", "float", "(", ")", ".", "to", "(", "self", ".", "args", ".", "device", ")", "# (B, T')", "\n", "assert", "coref_hiddens_batch", ".", "size", "(", ")", "==", "(", "B", ",", "max_coref_len", ",", "self", ".", "config", ".", "n_embd", ")", "\n", "assert", "mask", ".", "size", "(", ")", "==", "(", "B", ",", "max_coref_len", ")", "\n", "coref_attn", "=", "{", "'hiddens'", ":", "coref_hiddens_batch", ",", "'mask'", ":", "mask", "}", "\n", "return", "coref_attn", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.modeling.model.JointModel.merge_heads": [[249, 253], ["x.permute().contiguous.permute().contiguous.permute().contiguous", "x.permute().contiguous.permute().contiguous.view", "x.permute().contiguous.permute().contiguous.permute", "x.permute().contiguous.permute().contiguous.size", "x.permute().contiguous.permute().contiguous.size", "x.permute().contiguous.permute().contiguous.size"], "methods", ["None"], ["", "def", "merge_heads", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", "# (B, T, n_head, F)", "\n", "new_x_shape", "=", "x", ".", "size", "(", ")", "[", ":", "-", "2", "]", "+", "(", "x", ".", "size", "(", "-", "2", ")", "*", "x", ".", "size", "(", "-", "1", ")", ",", ")", "\n", "return", "x", ".", "view", "(", "*", "new_x_shape", ")", "# (B, T, n_head*F)", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.modeling.model.JointModel.split_heads": [[255, 262], ["x.view.view.view", "x.view.view.permute", "x.view.view.permute", "x.view.view.size", "x.view.view.size"], "methods", ["None"], ["", "def", "split_heads", "(", "self", ",", "x", ",", "k", "=", "False", ")", ":", "\n", "\t\t", "new_x_shape", "=", "x", ".", "size", "(", ")", "[", ":", "-", "1", "]", "+", "(", "self", ".", "config", ".", "n_head", ",", "x", ".", "size", "(", "-", "1", ")", "//", "self", ".", "config", ".", "n_head", ")", "\n", "x", "=", "x", ".", "view", "(", "*", "new_x_shape", ")", "# (B, T, n_head, F)", "\n", "if", "k", ":", "\n", "\t\t\t", "return", "x", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "# (B, n_head, F, T)", "\n", "", "else", ":", "\n", "\t\t\t", "return", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "# (B, n_head, T, F)", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.modeling.model.JointModel.attn_on_coref": [[264, 281], ["range", "model.JointModel.attn_on_coref_layer"], "methods", ["home.repos.pwc.inspect_result.apple_ml-cread.modeling.model.JointModel.attn_on_coref_layer"], ["", "", "def", "attn_on_coref", "(", "self", ",", "coref_attn", ",", "all_hiddens", ",", "last_hiddens", ")", ":", "\n", "\t\t", "'''\n\t\t\tPerform coref2qr across layers in gpt2, return the feature vector f\n\t\t'''", "\n", "ctx_vec", "=", "0", "\n", "count", "=", "0", "\n", "for", "layer_idx", "in", "range", "(", "self", ".", "config", ".", "n_layer", "+", "1", ")", ":", "\n", "\t\t\t", "if", "layer_idx", "<=", "(", "self", ".", "config", ".", "n_layer", "-", "self", ".", "args", ".", "coref_attn_layer", ")", ":", "\n", "\t\t\t\t", "continue", "\n", "", "ctx_vec_layer", "=", "self", ".", "attn_on_coref_layer", "(", "coref_attn", "[", "layer_idx", "]", ",", "all_hiddens", "[", "layer_idx", "]", ",", "layer_idx", ")", "\n", "ctx_vec", "+=", "ctx_vec_layer", "\n", "count", "+=", "1", "\n", "", "assert", "count", "==", "self", ".", "args", ".", "coref_attn_layer", "\n", "ctx_vec", "=", "ctx_vec", "/", "self", ".", "args", ".", "coref_attn_layer", "# avg all ctx_vec across layers", "\n", "\n", "mix_hiddens", "=", "0.5", "*", "last_hiddens", "+", "0.5", "*", "ctx_vec", "\n", "return", "mix_hiddens", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.modeling.model.JointModel.attn_on_coref_layer": [[283, 316], ["model.JointModel.split_heads", "model.JointModel.split_heads", "model.JointModel.split_heads", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "model.JointModel.merge_heads", "model.JointModel.c_attn().split", "model.JointModel.c_attn().split", "model.JointModel.size", "hidden_states.size", "model.JointModel.c_attn", "model.JointModel.c_attn"], "methods", ["home.repos.pwc.inspect_result.apple_ml-cread.modeling.model.JointModel.split_heads", "home.repos.pwc.inspect_result.apple_ml-cread.modeling.model.JointModel.split_heads", "home.repos.pwc.inspect_result.apple_ml-cread.modeling.model.JointModel.split_heads", "home.repos.pwc.inspect_result.apple_ml-cread.modeling.model.JointModel.merge_heads"], ["", "def", "attn_on_coref_layer", "(", "self", ",", "coref_attn", ",", "hidden_states", ",", "layer_idx", ")", ":", "\n", "\t\t", "'''\n\t\t\tPerform coref2qr mechanism in one layer\n\n\t\t\thidden_states: (B, T, H), where T = sequence length\n\t\t\tcoref_hiddens: (B, T', H), where T' = coref pool length\n\t\t\tcoref_mask   : (B, T')\n\t\t'''", "\n", "assert", "coref_attn", "is", "not", "None", "\n", "coref_hiddens", ",", "coref_mask", "=", "coref_attn", "[", "'hiddens'", "]", ",", "coref_attn", "[", "'mask'", "]", "\n", "\n", "if", "self", ".", "args", ".", "coref_attn_share_between_layer", ":", "\n", "\t\t\t", "query", ",", "_", ",", "_", "=", "self", ".", "c_attn", "(", "hidden_states", ")", ".", "split", "(", "self", ".", "config", ".", "n_embd", ",", "dim", "=", "2", ")", "# (B, T, H)", "\n", "_", ",", "key", ",", "value", "=", "self", ".", "c_attn", "(", "coref_hiddens", ")", ".", "split", "(", "self", ".", "config", ".", "n_embd", ",", "dim", "=", "2", ")", "# (B, T', H)", "\n", "", "else", ":", "\n", "\t\t\t", "query", ",", "_", ",", "_", "=", "(", "self", ".", "c_attn", "[", "layer_idx", "]", "(", "hidden_states", ")", ")", ".", "split", "(", "self", ".", "config", ".", "n_embd", ",", "dim", "=", "2", ")", "# (B, T, H)", "\n", "_", ",", "key", ",", "value", "=", "(", "self", ".", "c_attn", "[", "layer_idx", "]", "(", "coref_hiddens", ")", ")", ".", "split", "(", "self", ".", "config", ".", "n_embd", ",", "dim", "=", "2", ")", "# (B, T', H)", "\n", "\n", "", "query", "=", "self", ".", "split_heads", "(", "query", ")", "\n", "key", "=", "self", ".", "split_heads", "(", "key", ",", "k", "=", "True", ")", "\n", "value", "=", "self", ".", "split_heads", "(", "value", ")", "\n", "\n", "coref_mask", "=", "coref_mask", "[", ":", ",", "None", ",", "None", ",", ":", "]", "# (B, T') -> (B, 1, 1, T')", "\n", "coref_mask", "=", "(", "1.0", "-", "coref_mask", ")", "*", "-", "10000.0", "# convert 1. -> 0, 0. -> -10000", "\n", "\n", "w", "=", "torch", ".", "matmul", "(", "query", ",", "key", ")", "# (B, n_head, T, T')", "\n", "w", "=", "w", "+", "coref_mask", "\n", "w", "=", "torch", ".", "softmax", "(", "w", ",", "dim", "=", "-", "1", ")", "\n", "ctx_vec", "=", "torch", ".", "matmul", "(", "w", ",", "value", ")", "# (B, n_head, T, F)", "\n", "ctx_vec", "=", "self", ".", "merge_heads", "(", "ctx_vec", ")", "# (B, T, H)", "\n", "\n", "assert", "ctx_vec", ".", "size", "(", ")", "==", "hidden_states", ".", "size", "(", ")", "\n", "return", "ctx_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.modeling.model.JointModel.forward": [[318, 392], ["model.JointModel.transformer", "model.JointModel.cl_head", "model.JointModel.attn_on_coref", "model.JointModel.lm_head", "model.JointModel.lm_head", "model.JointModel.binary_cls2", "model.JointModel._compute_lm_loss", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "model.JointModel._compute_mention_loss", "model.JointModel._compute_reference_loss", "model.JointModel.collect_coref_hiddens", "model.JointModel.binary_cls1", "model.JointModel._compute_binary_loss", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.apple_ml-cread.modeling.model.JointModel.attn_on_coref", "home.repos.pwc.inspect_result.apple_ml-cread.modeling.model.JointModel._compute_lm_loss", "home.repos.pwc.inspect_result.apple_ml-cread.modeling.model.JointModel._compute_mention_loss", "home.repos.pwc.inspect_result.apple_ml-cread.modeling.model.JointModel._compute_reference_loss", "home.repos.pwc.inspect_result.apple_ml-cread.modeling.model.JointModel.collect_coref_hiddens", "home.repos.pwc.inspect_result.apple_ml-cread.modeling.model.JointModel._compute_binary_loss"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "past", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "\n", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "labels", "=", "None", ",", "use_cache", "=", "None", ",", "output_attentions", "=", "None", ",", "\n", "output_hidden_states", "=", "None", ",", "step", "=", "None", ",", "mention_labels", "=", "None", ",", "predict_mention", "=", "True", ",", "predict_lm", "=", "True", ",", "\n", "coref_attn", "=", "None", ",", "batch", "=", "None", ",", "coref_links", "=", "None", ")", ":", "\n", "\n", "# run gpt2", "\n", "# last hidden state, (presents), (all hidden_states), (attentions)", "\n", "\t\t", "transformer_outputs", "=", "self", ".", "transformer", "(", "input_ids", ",", "past", "=", "past", ",", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ",", "inputs_embeds", "=", "inputs_embeds", ",", "use_cache", "=", "use_cache", ",", "\n", "output_attentions", "=", "True", ",", "output_hidden_states", "=", "True", ")", "\n", "\n", "hidden_states", "=", "transformer_outputs", "[", "0", "]", "# (B, T, H)", "\n", "all_hidden_states", "=", "transformer_outputs", "[", "2", "]", "# tuple of (B, T, H) with len = 1 + n_layer, 1 for embedding", "\n", "attentions", "=", "transformer_outputs", "[", "3", "]", "# tuple of (B, n_heads, T, T), e.g., attentions[-1][b,n,i,:]", "\n", "\n", "# get lm logits", "\n", "if", "predict_lm", ":", "\n", "\t\t\t", "if", "self", ".", "args", ".", "task", "==", "'qr_coref'", "and", "self", ".", "args", ".", "use_coref_attn", ":", "\n", "\t\t\t\t", "if", "coref_attn", "is", "None", ":", "\n", "\t\t\t\t\t", "coref_attn", "=", "self", ".", "collect_coref_hiddens", "(", "coref_links", ",", "all_hidden_states", ",", "batch", ")", "\n", "\n", "", "hidden_states_lm", "=", "self", ".", "attn_on_coref", "(", "coref_attn", ",", "all_hidden_states", ",", "hidden_states", ")", "\n", "lm_logits", "=", "self", ".", "lm_head", "(", "hidden_states_lm", ")", "\n", "\n", "", "else", ":", "\n", "\t\t\t\t", "lm_logits", "=", "self", ".", "lm_head", "(", "hidden_states", ")", "\n", "\n", "# get binary logits", "\n", "", "if", "self", ".", "args", ".", "use_binary_cls", "and", "(", "step", "is", "None", "or", "step", "==", "0", ")", ":", "# step=None for training, step=0 for first decoding step", "\n", "\t\t\t\t", "bi_logits", "=", "self", ".", "binary_cls2", "(", "self", ".", "binary_cls1", "(", "hidden_states", ")", ")", "# (B, T, 2)", "\n", "", "else", ":", "\n", "\t\t\t\t", "bi_logits", "=", "None", "\n", "", "", "else", ":", "\n", "\t\t\t", "lm_logits", ",", "bi_logits", "=", "None", ",", "None", "\n", "\n", "# get mention detection logits", "\n", "", "if", "predict_mention", ":", "\n", "\t\t\t", "cl_logits", "=", "self", ".", "cl_head", "(", "hidden_states", ")", "# (B, T, C)", "\n", "", "else", ":", "\n", "\t\t\t", "cl_logits", "=", "None", "\n", "\n", "# prepare output", "\n", "", "transformer_outputs", "=", "transformer_outputs", "[", ":", "-", "2", "]", "# for output consistency, dont return H and A", "\n", "outputs", "=", "(", "bi_logits", ",", "lm_logits", ",", "cl_logits", ",", "attentions", ",", ")", "+", "transformer_outputs", "[", "1", ":", "]", "# return all attentions", "\n", "outputs", "=", "outputs", "+", "(", "coref_attn", ",", ")", "\n", "\n", "# compute loss", "\n", "if", "labels", "is", "not", "None", ":", "\n", "# qr loss: binary loss and lm loss", "\n", "\t\t\t", "if", "'qr'", "in", "self", ".", "args", ".", "task", ":", "\n", "\t\t\t\t", "loss_lm", "=", "self", ".", "_compute_lm_loss", "(", "lm_logits", ",", "labels", ",", "batch", ")", "\n", "\n", "if", "self", ".", "args", ".", "use_binary_cls", ":", "\n", "\t\t\t\t\t", "loss_bi", "=", "self", ".", "_compute_binary_loss", "(", "bi_logits", ",", "batch", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "loss_bi", "=", "torch", ".", "tensor", "(", "0", ")", ".", "to", "(", "self", ".", "args", ".", "device", ")", "\n", "", "", "else", ":", "\n", "\t\t\t\t", "loss_lm", "=", "torch", ".", "tensor", "(", "0", ")", ".", "to", "(", "self", ".", "args", ".", "device", ")", "\n", "loss_bi", "=", "torch", ".", "tensor", "(", "0", ")", ".", "to", "(", "self", ".", "args", ".", "device", ")", "\n", "\n", "# coref loss: mention loss and reference loss", "\n", "", "if", "'coref'", "in", "self", ".", "args", ".", "task", ":", "\n", "\t\t\t\t", "loss_mention", "=", "self", ".", "_compute_mention_loss", "(", "cl_logits", ",", "mention_labels", ")", "\n", "loss_reference", "=", "self", ".", "_compute_reference_loss", "(", "batch", ",", "attentions", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "loss_mention", ",", "loss_reference", "=", "torch", ".", "tensor", "(", "0", ")", ".", "to", "(", "self", ".", "args", ".", "device", ")", ",", "torch", ".", "tensor", "(", "0", ")", ".", "to", "(", "self", ".", "args", ".", "device", ")", "\n", "\n", "#\u00a0final loss", "\n", "", "loss_total", "=", "loss_bi", "+", "loss_lm", "+", "loss_mention", "+", "loss_reference", "\n", "loss_dict", "=", "{", "'bi'", ":", "loss_bi", ",", "'lm'", ":", "loss_lm", ",", "'mention'", ":", "loss_mention", ",", "'reference'", ":", "loss_reference", ",", "'total'", ":", "loss_total", "}", "\n", "outputs", "=", "(", "loss_dict", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), lm_logits, presents, (all hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.modeling.model.Conv1D.__init__": [[406, 413], ["torch.Module.__init__", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.init.normal_", "torch.init.normal_", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.apple_ml-cread.training.metrics.UtteranceScore.__init__"], ["def", "__init__", "(", "self", ",", "nf", ",", "nx", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nf", "=", "nf", "\n", "w", "=", "torch", ".", "empty", "(", "nx", ",", "nf", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "w", ",", "std", "=", "0.02", ")", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "w", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "nf", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.modeling.model.Conv1D.forward": [[414, 419], ["torch.addmm", "torch.addmm", "torch.addmm", "torch.addmm", "x.view.view.view", "x.view.view.view", "x.view.view.size", "x.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "size_out", "=", "x", ".", "size", "(", ")", "[", ":", "-", "1", "]", "+", "(", "self", ".", "nf", ",", ")", "\n", "x", "=", "torch", ".", "addmm", "(", "self", ".", "bias", ",", "x", ".", "view", "(", "-", "1", ",", "x", ".", "size", "(", "-", "1", ")", ")", ",", "self", ".", "weight", ")", "\n", "x", "=", "x", ".", "view", "(", "*", "size_out", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.modeling.model._extend_mask": [[421, 424], ["torch.cat", "torch.cat", "torch.cat.new_ones"], "function", ["None"], ["", "", "def", "_extend_mask", "(", "mask", ")", ":", "\n", "\t", "mask", "=", "torch", ".", "cat", "(", "[", "mask", ",", "mask", ".", "new_ones", "(", "(", "mask", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.modeling.model._post_proc": [[426, 433], ["gen.index", "gen.index"], "function", ["None"], ["", "def", "_post_proc", "(", "gen", ")", ":", "\n", "\t", "''' gen: a list of tokens '''", "\n", "if", "'<SEP>'", "in", "gen", ":", "\n", "\t\t", "gen", "=", "gen", "[", "gen", ".", "index", "(", "'<SEP>'", ")", "+", "1", ":", "]", "\n", "", "if", "'<EOS>'", "in", "gen", ":", "\n", "\t\t", "gen", "=", "gen", "[", ":", "gen", ".", "index", "(", "'<EOS>'", ")", "]", "\n", "", "return", "gen", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.modeling.model.decode": [[435, 451], ["model.predict_coref", "model.generate"], "function", ["home.repos.pwc.inspect_result.apple_ml-cread.modeling.model.predict_coref", "home.repos.pwc.inspect_result.apple_ml-cread.modeling.model.generate"], ["", "def", "decode", "(", "args", ",", "batch", ",", "model", ",", "tokenizer", ")", ":", "\n", "\t", "'''\n\t\tdecode query rewriting and coreference resolution\n\t'''", "\n", "\n", "if", "'coref'", "in", "args", ".", "task", ":", "\n", "\t\t", "corefs", "=", "predict_coref", "(", "args", ",", "batch", ",", "model", ",", "tokenizer", ")", "\n", "", "else", ":", "\n", "\t\t", "corefs", "=", "[", "None", "]", "\n", "\n", "", "if", "'qr'", "in", "args", ".", "task", "and", "batch", "[", "'rewt_utt'", "]", "[", "0", "]", "!=", "''", ":", "\n", "\t\t", "binary_class", ",", "sentences", "=", "generate", "(", "args", ",", "batch", ",", "model", ",", "tokenizer", ",", "corefs", ")", "\n", "", "else", ":", "\n", "\t\t", "sentences", "=", "[", "None", "]", "\n", "binary_class", "=", "[", "None", "]", "\n", "", "return", "{", "'coref'", ":", "corefs", ",", "'qr'", ":", "sentences", ",", "'bi'", ":", "binary_class", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.modeling.model.get_ref_word_idx": [[453, 465], ["range", "torch.argmax().item", "torch.argmax().item", "range", "torch.argmax", "torch.argmax"], "function", ["None"], ["", "def", "get_ref_word_idx", "(", "men_token_idx", ",", "attentions", ",", "tokenId2wordId", ",", "args", ",", "config", ")", ":", "\n", "\t", "attn_dist", "=", "0", "\n", "for", "layer_idx", "in", "range", "(", "config", ".", "n_layer", ")", ":", "\n", "\t\t", "if", "layer_idx", "not", "in", "args", ".", "coref_layer_idx", ":", "\n", "\t\t\t", "continue", "\n", "", "for", "head_idx", "in", "range", "(", "args", ".", "n_coref_head", ")", ":", "\n", "\t\t\t", "attn_dist", "+=", "attentions", "[", "layer_idx", "]", "[", "0", ",", "head_idx", ",", "men_token_idx", ",", ":", "]", "\n", "\n", "", "", "attn_dist", "=", "attn_dist", "/", "args", ".", "n_coref_head", "\n", "ref_token_idx", "=", "torch", ".", "argmax", "(", "attn_dist", ")", ".", "item", "(", ")", "\n", "ref_word_idx", "=", "tokenId2wordId", "[", "ref_token_idx", "]", "\n", "return", "ref_word_idx", ",", "ref_token_idx", ",", "attn_dist", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.modeling.model.get_valid_ref": [[467, 491], ["ref_start_dist.size", "torch.matmul", "torch.matmul", "prod.cpu().numpy.cpu().numpy", "range", "sorted", "ref_start_dist.size", "ref_end_dist.size", "ref_start_dist.view", "ref_end_dist.view", "range", "prod.cpu().numpy.cpu", "collect.append"], "function", ["None"], ["", "def", "get_valid_ref", "(", "start_meta", ",", "end_meta", ",", "ref_start_dist", ",", "ref_end_dist", ",", "tokenId2wordId", ",", "whole_input", ")", ":", "\n", "\t", "'''\n\t\tre-compute reference start and end idx based on bi-gram probability and make sure the indexes are valid\n\t'''", "\n", "assert", "ref_start_dist", ".", "size", "(", ")", "==", "ref_end_dist", ".", "size", "(", ")", "\n", "T", "=", "ref_start_dist", ".", "size", "(", "0", ")", "\n", "prod", "=", "torch", ".", "matmul", "(", "ref_start_dist", ".", "view", "(", "-", "1", ",", "1", ")", ",", "ref_end_dist", ".", "view", "(", "1", ",", "-", "1", ")", ")", "# (T, T)", "\n", "prod", "=", "prod", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "collect", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "T", ")", ":", "\n", "\t\t", "for", "j", "in", "range", "(", "i", "+", "1", ",", "T", ")", ":", "\n", "\t\t\t", "collect", ".", "append", "(", "(", "prod", "[", "i", ",", "j", "]", ",", "i", ",", "j", ")", ")", "\n", "\n", "", "", "sort_collect", "=", "sorted", "(", "collect", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ",", "reverse", "=", "True", ")", "\n", "start_word_idx", ",", "end_word_idx", "=", "None", ",", "None", "\n", "for", "value", ",", "start_token_idx", ",", "end_token_idx", "in", "sort_collect", ":", "\n", "\t\t", "start_word_idx", "=", "tokenId2wordId", "[", "start_token_idx", "]", "\n", "end_word_idx", "=", "tokenId2wordId", "[", "end_token_idx", "]", "\n", "if", "start_word_idx", "<", "end_word_idx", ":", "\n", "\t\t\t", "break", "\n", "", "", "assert", "start_word_idx", "<", "end_word_idx", "\n", "start_meta", "[", "'attention_idx'", "]", ",", "start_meta", "[", "'attention_word'", "]", "=", "start_word_idx", ",", "whole_input", "[", "start_word_idx", "]", "\n", "end_meta", "[", "'attention_idx'", "]", ",", "end_meta", "[", "'attention_word'", "]", "=", "end_word_idx", ",", "whole_input", "[", "end_word_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.modeling.model.proc_coref_output": [[493, 545], ["isinstance", "len", "[].tolist", "[].split", "tokenizer.convert_ids_to_tokens", "enumerate", "curr_utt_word.split", "len", "token_ids[].tolist", "token.replace", "model.get_ref_word_idx", "model.get_ref_word_idx", "model.get_valid_ref", "links.append"], "function", ["home.repos.pwc.inspect_result.apple_ml-cread.modeling.model.get_ref_word_idx", "home.repos.pwc.inspect_result.apple_ml-cread.modeling.model.get_ref_word_idx", "home.repos.pwc.inspect_result.apple_ml-cread.modeling.model.get_valid_ref"], ["", "def", "proc_coref_output", "(", "batch", ",", "token_pred", ",", "attentions", ",", "token_ids", ",", "tokenizer", ",", "args", ",", "config", ")", ":", "\n", "\t", "'''\n\t\tprocess the model output, extract the start/end index and the corresponding words in coreference links\n\t'''", "\n", "assert", "isinstance", "(", "attentions", ",", "tuple", ")", "\n", "tokenId2wordId", "=", "batch", "[", "'tokenId2wordId'", "]", "[", "0", "]", "\n", "\n", "# token index of current utterance", "\n", "curr_start_token_idx", "=", "batch", "[", "'curr_start_token_idx'", "]", "[", "0", "]", "\n", "curr_end_token_idx", "=", "batch", "[", "'curr_end_token_idx'", "]", "[", "0", "]", "\n", "curr_utt_token_len", "=", "curr_end_token_idx", "-", "curr_start_token_idx", "\n", "\n", "# work index of current utterance", "\n", "curr_utt_word", "=", "batch", "[", "'curr_utt'", "]", "[", "0", "]", "\n", "curr_utt_word_len", "=", "len", "(", "curr_utt_word", ".", "split", "(", ")", ")", "\n", "curr_start_word_idx", "=", "tokenId2wordId", "[", "curr_start_token_idx", "]", "\n", "\n", "token_pred", "=", "token_pred", "[", "0", "]", "[", "curr_start_token_idx", ":", "]", ".", "tolist", "(", ")", "\n", "assert", "len", "(", "token_pred", ")", "==", "curr_utt_token_len", "\n", "\n", "whole_input", "=", "batch", "[", "'whole_input'", "]", "[", "0", "]", ".", "split", "(", ")", "\n", "recon_input", "=", "tokenizer", ".", "convert_ids_to_tokens", "(", "token_ids", "[", "0", "]", ".", "tolist", "(", ")", ")", "\n", "recon_input", "=", "[", "token", ".", "replace", "(", "'\u0120'", ",", "''", ")", "for", "token", "in", "recon_input", "]", "\n", "\n", "mention", "=", "False", "\n", "word_pred", "=", "[", "-", "1", "]", "*", "curr_utt_word_len", "\n", "links", "=", "[", "]", "\n", "for", "local_token_idx", ",", "step_pred", "in", "enumerate", "(", "token_pred", ")", ":", "\n", "\t\t", "global_token_idx", "=", "local_token_idx", "+", "curr_start_token_idx", "# token index in the whole input sequence", "\n", "\n", "# map mention prediction back to word sequence", "\n", "global_word_idx", "=", "tokenId2wordId", "[", "global_token_idx", "]", "\n", "local_word_idx", "=", "global_word_idx", "-", "curr_start_word_idx", "\n", "word_pred", "[", "local_word_idx", "]", "=", "step_pred", "\n", "\n", "# formulate the same format as input data", "\n", "if", "not", "mention", "and", "step_pred", "==", "1.", ":", "\n", "\t\t\t", "mention", "=", "True", "\n", "ref_start_word_idx", ",", "ref_start_token_idx", ",", "ref_start_dist", "=", "get_ref_word_idx", "(", "global_token_idx", ",", "attentions", ",", "tokenId2wordId", ",", "args", ",", "config", ")", "\n", "_start", "=", "{", "'mention_type'", ":", "'start'", ",", "'mention_idx'", ":", "global_word_idx", ",", "'mention_word'", ":", "whole_input", "[", "global_word_idx", "]", ",", "'attention_idx'", ":", "ref_start_word_idx", ",", "'attention_word'", ":", "whole_input", "[", "ref_start_word_idx", "]", "}", "\n", "", "if", "mention", "and", "step_pred", "==", "2.", ":", "\n", "\t\t\t", "mention", "=", "False", "\n", "ref_end_word_idx", ",", "ref_end_token_idx", ",", "ref_end_dist", "=", "get_ref_word_idx", "(", "global_token_idx", ",", "attentions", ",", "tokenId2wordId", ",", "args", ",", "config", ")", "\n", "_end", "=", "{", "'mention_type'", ":", "'end'", ",", "'mention_idx'", ":", "global_word_idx", ",", "'mention_word'", ":", "whole_input", "[", "global_word_idx", "]", ",", "'attention_idx'", ":", "ref_end_word_idx", ",", "'attention_word'", ":", "whole_input", "[", "ref_end_word_idx", "]", "}", "\n", "\n", "get_valid_ref", "(", "_start", ",", "_end", ",", "ref_start_dist", ",", "ref_end_dist", ",", "tokenId2wordId", ",", "whole_input", ")", "\n", "links", ".", "append", "(", "[", "_start", ",", "_end", "]", ")", "\n", "\n", "", "", "assert", "-", "1", "not", "in", "word_pred", "\n", "return", "[", "links", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.modeling.model.predict_coref": [[547, 564], ["input_ids.size", "model", "torch.argmax", "torch.argmax", "model.proc_coref_output"], "function", ["home.repos.pwc.inspect_result.apple_ml-cread.modeling.model.proc_coref_output"], ["", "def", "predict_coref", "(", "args", ",", "batch", ",", "model", ",", "tokenizer", ")", ":", "\n", "\t", "input_ids", ",", "attention_mask", ",", "token_type_ids", "=", "batch", "[", "'input_ids'", "]", ",", "batch", "[", "'attention_mask'", "]", ",", "batch", "[", "'token_type_ids'", "]", "\n", "batch_size", "=", "input_ids", ".", "size", "(", "0", ")", "\n", "assert", "batch_size", "==", "1", "\n", "\n", "curr_start", "=", "batch", "[", "'curr_start_token_idx'", "]", "[", "0", "]", "\n", "curr_end", "=", "batch", "[", "'curr_end_token_idx'", "]", "[", "0", "]", "\n", "curr_utt_len", "=", "curr_end", "-", "curr_start", "\n", "mention_label_ids", "=", "batch", "[", "'mention_label_ids'", "]", "\n", "\n", "# model forward", "\n", "_", ",", "_", ",", "cl_logits", ",", "attentions", ",", "_", ",", "_", "=", "model", "(", "input_ids", "=", "input_ids", ",", "attention_mask", "=", "attention_mask", ",", "token_type_ids", "=", "token_type_ids", ",", "past", "=", "None", ",", "predict_lm", "=", "False", ",", "batch", "=", "batch", ")", "\n", "cl_pred", "=", "torch", ".", "argmax", "(", "cl_logits", ",", "dim", "=", "-", "1", ")", "# (B, T')", "\n", "\n", "out", "=", "proc_coref_output", "(", "batch", ",", "cl_pred", ",", "attentions", ",", "input_ids", ",", "tokenizer", ",", "model", ".", "args", ",", "model", ".", "config", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.modeling.model.generate": [[566, 634], ["torch.cat.size", "torch.cat.size", "tokenizer.convert_tokens_to_ids", "torch.cat.new().fill_", "torch.cat", "torch.cat", "model._extend_mask", "range", "range", "model", "torch.argmax", "torch.argmax", "torch.cat", "torch.cat", "model._extend_mask", "enumerate", "tokenizer.decode().split", "model._post_proc", "sentences.append", "len", "torch.cat.new", "range", "input_ids[].unsqueeze", "torch.argmax", "torch.argmax", "binary_class_pred.tolist.tolist", "sum", "len", "torch.argmax.unsqueeze", "tokenizer.decode", "token_id.item"], "function", ["home.repos.pwc.inspect_result.apple_ml-cread.modeling.model._extend_mask", "home.repos.pwc.inspect_result.apple_ml-cread.modeling.model._extend_mask", "home.repos.pwc.inspect_result.apple_ml-cread.modeling.model._post_proc", "home.repos.pwc.inspect_result.apple_ml-cread.modeling.model.decode"], ["", "def", "generate", "(", "args", ",", "batch", ",", "model", ",", "tokenizer", ",", "coref_pred", ")", ":", "\n", "\t", "'''\n\t\tGeneration of query rewriting\n\t'''", "\n", "# basic info", "\n", "input_ids", ",", "attention_mask", ",", "token_type_ids", "=", "batch", "[", "'input_ids'", "]", ",", "batch", "[", "'attention_mask'", "]", ",", "batch", "[", "'token_type_ids'", "]", "\n", "batch_size", "=", "input_ids", ".", "size", "(", "0", ")", "\n", "ctx_len", "=", "input_ids", ".", "size", "(", "1", ")", "\n", "bos_id", ",", "eos_id", ",", "pad_id", ",", "sep_id", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "[", "'<BOS>'", ",", "'<EOS>'", ",", "'<PAD>'", ",", "'<SEP>'", "]", ")", "\n", "assert", "batch", "[", "'curr_end_token_idx'", "]", "[", "0", "]", "==", "ctx_len", "\n", "assert", "batch_size", "==", "1", "# don't support batch_size larger thatn 1, when batch_size > 1, the padded input is not straightforward for decoding.", "\n", "\n", "# add <SEP> token to start decoding", "\n", "tokens_to_add", "=", "input_ids", ".", "new", "(", "batch_size", ",", "1", ")", ".", "fill_", "(", "sep_id", ")", "\n", "input_ids", "=", "torch", ".", "cat", "(", "[", "input_ids", ",", "tokens_to_add", "]", ",", "dim", "=", "-", "1", ")", "\n", "attention_mask", "=", "_extend_mask", "(", "attention_mask", ")", "\n", "assert", "0", "not", "in", "attention_mask", "# since batch_size == 1, no padding happens", "\n", "\n", "past", "=", "None", "\n", "coref_attn", "=", "None", "\n", "finish_sent", "=", "[", "False", "for", "_", "in", "range", "(", "batch_size", ")", "]", "\n", "binary_class", ",", "copy_not_rewrite", ",", "binary_class_pred", "=", "None", ",", "False", ",", "None", "\n", "for", "i", "in", "range", "(", "args", ".", "dec_max_len", ")", ":", "\n", "\t\t", "if", "past", ":", "# with past, the model only needs current input", "\n", "\t\t\t", "input_ids_step", "=", "input_ids", "[", ":", ",", "-", "1", "]", ".", "unsqueeze", "(", "-", "1", ")", "\n", "if", "args", ".", "task", "==", "'qr_coref'", "and", "args", ".", "use_coref_attn", ":", "\n", "\t\t\t\t", "assert", "coref_attn", "is", "not", "None", "\n", "\n", "", "", "else", ":", "# only the first step enters here", "\n", "\t\t\t", "input_ids_step", "=", "input_ids", "\n", "\n", "", "bi_logits", ",", "logits", ",", "_", ",", "_", ",", "past", ",", "coref_attn", "=", "model", "(", "input_ids", "=", "input_ids_step", ",", "attention_mask", "=", "attention_mask", ",", "token_type_ids", "=", "token_type_ids", ",", "past", "=", "past", ",", "predict_mention", "=", "False", ",", "coref_attn", "=", "coref_attn", ",", "batch", "=", "batch", ",", "coref_links", "=", "coref_pred", ",", "step", "=", "i", ")", "\n", "\n", "if", "args", ".", "use_binary_cls", "and", "i", "==", "0", ":", "# check if to run the rest geenration based on the binary classification result", "\n", "# bi_logits: (B, T, 2)", "\n", "\t\t\t", "binary_class_pred", "=", "torch", ".", "argmax", "(", "bi_logits", "[", ":", ",", "-", "1", ",", ":", "]", ",", "dim", "=", "-", "1", ")", "\n", "binary_class_pred", "=", "binary_class_pred", ".", "tolist", "(", ")", "\n", "assert", "len", "(", "binary_class_pred", ")", "==", "1", "\n", "if", "binary_class_pred", "[", "0", "]", "==", "0", "and", "args", ".", "copy_not_rewrite", ":", "# not rewrite", "\n", "\t\t\t\t", "copy_not_rewrite", "=", "True", "\n", "break", "\n", "\n", "# logits: (B, T, V), T=1 when past is passed", "\n", "", "", "next_token_logits", "=", "logits", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "next_token", "=", "torch", ".", "argmax", "(", "next_token_logits", ",", "dim", "=", "-", "1", ")", "\n", "input_ids", "=", "torch", ".", "cat", "(", "[", "input_ids", ",", "next_token", ".", "unsqueeze", "(", "-", "1", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "attention_mask", "=", "_extend_mask", "(", "attention_mask", ")", "\n", "\n", "for", "bs_idx", ",", "token_id", "in", "enumerate", "(", "next_token", ")", ":", "\n", "\t\t\t", "if", "finish_sent", "[", "bs_idx", "]", "is", "False", "and", "token_id", ".", "item", "(", ")", "==", "eos_id", ":", "# first produce <eos>", "\n", "\t\t\t\t", "finish_sent", "[", "bs_idx", "]", "=", "True", "\n", "\n", "", "", "if", "sum", "(", "finish_sent", ")", "==", "batch_size", ":", "\n", "\t\t\t", "break", "\n", "\n", "", "", "if", "copy_not_rewrite", ":", "# return the input current utterance as rewrite if predicts `not-rewrite`", "\n", "\t\t", "return", "binary_class_pred", ",", "batch", "[", "'curr_utt'", "]", "\n", "\n", "# post-process output sentence", "\n", "", "sentences", "=", "[", "]", "\n", "for", "bs_idx", "in", "range", "(", "batch_size", ")", ":", "\n", "\t\t", "gen", "=", "tokenizer", ".", "decode", "(", "input_ids", "[", "bs_idx", ",", ":", "]", ")", ".", "split", "(", ")", "\n", "gen", "=", "_post_proc", "(", "gen", ")", "\n", "sentences", ".", "append", "(", "' '", ".", "join", "(", "gen", ")", ")", "\n", "", "assert", "len", "(", "sentences", ")", "==", "1", "\n", "return", "binary_class_pred", ",", "sentences", "\n", "", ""]], "home.repos.pwc.inspect_result.apple_ml-cread.utils.evaluate._post_for_qr_eval": [[21, 31], ["nltk.tokenize.word_tokenize.replace", "nltk.tokenize.word_tokenize"], "function", ["None"], ["def", "_post_for_qr_eval", "(", "utt", ")", ":", "\n", "\t", "if", "utt", "==", "\"\"", "or", "utt", "==", "None", ":", "\n", "\t\t", "return", "utt", "\n", "\n", "", "if", "utt", "[", "-", "1", "]", "in", "[", "','", ",", "'.'", ",", "'?'", ",", "'!'", "]", ":", "\n", "\t\t", "utt", "=", "utt", "[", ":", "-", "1", "]", "\n", "\n", "", "utt", "=", "utt", ".", "replace", "(", "'<CUR>'", ",", "''", ")", "\n", "utt", "=", "word_tokenize", "(", "utt", ")", "# a list", "\n", "return", "utt", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.utils.evaluate.score_fn": [[32, 78], ["len", "range", "evaluate._post_for_qr_eval", "evaluate._post_for_qr_eval", "evaluate._post_for_qr_eval", "qr_metric", "match.append", "utils.coref_utils.build_cluster_from_links", "utils.coref_utils.generate_conll_format", "collector.append", "float", "isinstance", "bi_match.append", "evaluate.get_coref_summary", "isinstance", "int"], "function", ["home.repos.pwc.inspect_result.apple_ml-cread.utils.evaluate._post_for_qr_eval", "home.repos.pwc.inspect_result.apple_ml-cread.utils.evaluate._post_for_qr_eval", "home.repos.pwc.inspect_result.apple_ml-cread.utils.evaluate._post_for_qr_eval", "home.repos.pwc.inspect_result.apple_ml-cread.utils.coref_utils.build_cluster_from_links", "home.repos.pwc.inspect_result.apple_ml-cread.utils.coref_utils.generate_conll_format", "home.repos.pwc.inspect_result.apple_ml-cread.utils.evaluate.get_coref_summary"], ["", "def", "score_fn", "(", "args", ",", "decode", ",", "batch", ",", "match", ",", "collector", ",", "qr_metric", ",", "coref_lines", ",", "bi_match", "=", "None", ")", ":", "\n", "\t", "batch_size", "=", "len", "(", "batch", "[", "'curr_utt'", "]", ")", "\n", "for", "bs_idx", "in", "range", "(", "batch_size", ")", ":", "\n", "\t\t", "example_id", "=", "batch", "[", "'example_ids'", "]", "[", "bs_idx", "]", "\n", "spk", "=", "batch", "[", "'spk'", "]", "[", "bs_idx", "]", "\n", "whole_input", "=", "batch", "[", "'whole_input'", "]", "[", "bs_idx", "]", "\n", "ctx", "=", "batch", "[", "'context'", "]", "[", "bs_idx", "]", "\n", "usr", "=", "batch", "[", "'curr_utt'", "]", "[", "bs_idx", "]", "\n", "qr_ref", "=", "batch", "[", "'rewt_utt'", "]", "[", "bs_idx", "]", "\n", "binary_class", "=", "batch", "[", "'binary_rewrite'", "]", "[", "bs_idx", "]", "\n", "\n", "qr_hyp", "=", "decode", "[", "'qr'", "]", "[", "bs_idx", "]", "\n", "coref_hyp", "=", "decode", "[", "'coref'", "]", "[", "bs_idx", "]", "\n", "binary_class_pred", "=", "None", "\n", "\n", "# compute qr score", "\n", "if", "'qr'", "in", "args", ".", "task", "and", "qr_ref", "!=", "\"\"", ":", "\n", "\t\t\t", "proc_usr", "=", "_post_for_qr_eval", "(", "usr", ")", "\n", "proc_qr_ref", "=", "_post_for_qr_eval", "(", "qr_ref", ")", "\n", "proc_qr_hyp", "=", "_post_for_qr_eval", "(", "qr_hyp", ")", "\n", "\n", "# store in metric", "\n", "qr_metric", "(", "[", "proc_qr_ref", "]", ",", "[", "proc_qr_hyp", "]", ",", "[", "proc_usr", "]", ")", "\n", "\n", "# exact match rate, not used ", "\n", "match", ".", "append", "(", "float", "(", "(", "' '", ".", "join", "(", "proc_qr_hyp", ")", ")", ".", "lower", "(", ")", "==", "(", "' '", ".", "join", "(", "proc_qr_ref", ")", ")", ".", "lower", "(", ")", ")", ")", "\n", "\n", "# binary rewrite score", "\n", "if", "args", ".", "use_binary_cls", ":", "\n", "\t\t\t\t", "binary_class_pred", "=", "decode", "[", "'bi'", "]", "[", "bs_idx", "]", "# 0/1", "\n", "assert", "isinstance", "(", "binary_class_pred", ",", "int", ")", "and", "binary_class_pred", "in", "[", "0", ",", "1", "]", "\n", "assert", "isinstance", "(", "binary_class", ",", "bool", ")", "\n", "bi_match", ".", "append", "(", "(", "binary_class_pred", ",", "int", "(", "binary_class", ")", ")", ")", "\n", "\n", "# compute coref score", "\n", "", "", "if", "'coref'", "in", "args", ".", "task", "and", "spk", "==", "'usr'", ":", "\n", "# collect lines for conll file", "\n", "\t\t\t", "cluster_info", "=", "build_cluster_from_links", "(", "ctx", ",", "usr", ",", "coref_hyp", ")", "\n", "coref_lines", "+=", "generate_conll_format", "(", "ctx", ",", "usr", ",", "cluster_info", ",", "example_id", ")", "\n", "\n", "# collect output in testing", "\n", "", "if", "collector", "is", "not", "None", ":", "\n", "\t\t\t", "ex", "=", "{", "'CTX'", ":", "ctx", ",", "'USR'", ":", "usr", ",", "'QR_REF'", ":", "qr_ref", ",", "'QR_HYP'", ":", "qr_hyp", ",", "'COREF_HYP'", ":", "coref_hyp", ",", "'COREF_SUMMARY'", ":", "get_coref_summary", "(", "coref_hyp", ",", "whole_input", ")", ",", "'example_id'", ":", "example_id", ",", "'Bi_REF'", ":", "binary_class", ",", "'Bi_HYP'", ":", "binary_class_pred", "}", "\n", "collector", ".", "append", "(", "ex", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.utils.evaluate.get_coref_summary": [[80, 105], ["isinstance", "whole_input.split", "summary.append"], "function", ["None"], ["", "", "", "def", "get_coref_summary", "(", "coref_hyp", ",", "whole_input", ")", ":", "\n", "\t", "'''\n\t\tformatting the coref links into a strings\n\t'''", "\n", "if", "coref_hyp", "==", "None", ":", "# for qr only", "\n", "\t\t", "return", "coref_hyp", "\n", "\n", "", "assert", "isinstance", "(", "whole_input", ",", "str", ")", "\n", "summary", "=", "[", "]", "\n", "seq", "=", "whole_input", ".", "split", "(", ")", "\n", "for", "link", "in", "coref_hyp", ":", "# (start, end)", "\n", "\t\t", "m_start_idx", ",", "m_end_idx", "=", "link", "[", "0", "]", "[", "'mention_idx'", "]", ",", "link", "[", "1", "]", "[", "'mention_idx'", "]", "\n", "m_start_word", ",", "m_end_word", "=", "link", "[", "0", "]", "[", "'mention_word'", "]", ",", "link", "[", "1", "]", "[", "'mention_word'", "]", "\n", "assert", "seq", "[", "m_start_idx", "]", "==", "m_start_word", "and", "seq", "[", "m_end_idx", "]", "==", "m_end_word", "\n", "\n", "r_start_idx", ",", "r_end_idx", "=", "link", "[", "0", "]", "[", "'attention_idx'", "]", ",", "link", "[", "1", "]", "[", "'attention_idx'", "]", "\n", "r_start_word", ",", "r_end_word", "=", "link", "[", "0", "]", "[", "'attention_word'", "]", ",", "link", "[", "1", "]", "[", "'attention_word'", "]", "\n", "assert", "seq", "[", "r_start_idx", "]", "==", "r_start_word", "and", "seq", "[", "r_end_idx", "]", "==", "r_end_word", "\n", "\n", "mention", "=", "\" \"", ".", "join", "(", "seq", "[", "m_start_idx", ":", "m_end_idx", "]", ")", "\n", "reference", "=", "\" \"", ".", "join", "(", "seq", "[", "r_start_idx", ":", "r_end_idx", "]", ")", "\n", "m2r", "=", "\"{} ({}) <- {} ({})\"", ".", "format", "(", "reference", ",", "r_start_idx", ",", "mention", ",", "m_start_idx", ")", "\n", "summary", ".", "append", "(", "m2r", ")", "\n", "\n", "", "return", "summary", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.utils.evaluate.coref_evaluate": [[107, 131], ["coval.conll.reader.get_coref_infos", "coval.eval.evaluator.evaluate_documents", "print", "name.ljust"], "function", ["home.repos.pwc.inspect_result.apple_ml-cread.conll.reader.get_coref_infos", "home.repos.pwc.inspect_result.apple_ml-cread.eval.evaluator.evaluate_documents"], ["", "def", "coref_evaluate", "(", "key_file", ",", "sys_file", ",", "args", ")", ":", "\n", "\t", "metrics", "=", "[", "(", "'mentions'", ",", "evaluator", ".", "mentions", ")", ",", "(", "'muc'", ",", "evaluator", ".", "muc", ")", ",", "\n", "(", "'bcub'", ",", "evaluator", ".", "b_cubed", ")", ",", "(", "'ceafe'", ",", "evaluator", ".", "ceafe", ")", ",", "\n", "(", "'lea'", ",", "evaluator", ".", "lea", ")", "]", "\n", "NP_only", ",", "remove_nested", ",", "keep_singletons", ",", "min_span", "=", "False", ",", "False", ",", "True", ",", "False", "\n", "\n", "doc_coref_infos", "=", "reader", ".", "get_coref_infos", "(", "key_file", ",", "sys_file", ",", "NP_only", ",", "remove_nested", ",", "keep_singletons", ",", "min_span", ",", "mode", "=", "args", ".", "mode", ")", "\n", "\n", "conll", "=", "0", "\n", "conll_subparts_num", "=", "0", "\n", "results", "=", "{", "}", "\n", "for", "name", ",", "metric", "in", "metrics", ":", "\n", "\t\t", "try", ":", "\n", "\t\t\t", "recall", ",", "precision", ",", "f1", "=", "evaluator", ".", "evaluate_documents", "(", "doc_coref_infos", ",", "metric", ",", "beta", "=", "1", ")", "\n", "", "except", ":", "\n", "\t\t\t", "recall", "=", "precision", "=", "f1", "=", "-", "10", "\n", "\n", "", "results", "[", "name", "]", "=", "{", "'recall'", ":", "recall", "*", "100", ",", "'precision'", ":", "precision", "*", "100", ",", "'f1'", ":", "f1", "*", "100", "}", "\n", "if", "args", ".", "mode", "==", "'testing'", ":", "\n", "\t\t\t", "print", "(", "name", ".", "ljust", "(", "10", ")", ",", "'Recall: %.2f'", "%", "(", "recall", "*", "100", ")", ",", "' Precision: %.2f'", "%", "(", "precision", "*", "100", ")", ",", "' F1: %.2f'", "%", "(", "f1", "*", "100", ")", ")", "\n", "\n", "", "", "for", "key", "in", "[", "'recall'", ",", "'precision'", ",", "'f1'", "]", ":", "\n", "\t\t", "results", "[", "'avg_{}'", ".", "format", "(", "key", ")", "]", "=", "(", "results", "[", "\"muc\"", "]", "[", "key", "]", "+", "results", "[", "\"bcub\"", "]", "[", "key", "]", "+", "results", "[", "\"ceafe\"", "]", "[", "key", "]", ")", "/", "3", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.utils.evaluate.get_binary_res": [[132, 153], ["sum", "sum", "sum", "sum", "len"], "function", ["None"], ["", "def", "get_binary_res", "(", "bi_match", ",", "qr_res", ",", "args", ")", ":", "\n", "\t", "if", "not", "args", ".", "use_binary_cls", ":", "\n", "\t\t", "qr_res", "[", "'Binary M'", "]", "=", "None", "\n", "qr_res", "[", "'Binary P'", "]", "=", "None", "\n", "qr_res", "[", "'Binary R'", "]", "=", "None", "\n", "qr_res", "[", "'Binary F1'", "]", "=", "None", "\n", "return", "\n", "\n", "", "Match", "=", "sum", "(", "[", "binary_class_pred", "==", "binary_class", "for", "binary_class_pred", ",", "binary_class", "in", "bi_match", "]", ")", "\n", "match_rate", "=", "Match", "/", "len", "(", "bi_match", ")", "\n", "qr_res", "[", "'Binary M'", "]", "=", "match_rate", "*", "100", "\n", "\n", "TP", "=", "sum", "(", "[", "binary_class_pred", "==", "binary_class", "and", "binary_class", "==", "1", "for", "binary_class_pred", ",", "binary_class", "in", "bi_match", "]", ")", "\n", "Pred", "=", "sum", "(", "[", "binary_class_pred", "for", "binary_class_pred", ",", "_", "in", "bi_match", "]", ")", "\n", "GT", "=", "sum", "(", "[", "binary_class", "for", "_", ",", "binary_class", "in", "bi_match", "]", ")", "\n", "Precision", "=", "TP", "/", "Pred", "\n", "Recall", "=", "TP", "/", "GT", "\n", "F1", "=", "2", "*", "Precision", "*", "Recall", "/", "(", "Precision", "+", "Recall", ")", "\n", "qr_res", "[", "'Binary P'", "]", "=", "Precision", "*", "100", "\n", "qr_res", "[", "'Binary R'", "]", "=", "Recall", "*", "100", "\n", "qr_res", "[", "'Binary F1'", "]", "=", "F1", "*", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.utils.coref_utils.get_encIdx": [[11, 22], ["coref_utils.charIdx2wordIdx", "s.split", "sum", "len"], "function", ["home.repos.pwc.inspect_result.apple_ml-cread.utils.coref_utils.charIdx2wordIdx"], ["def", "get_encIdx", "(", "ctx", ",", "sentence", ",", "sentenceIdx", ",", "charIdx", ",", "span_end", ")", ":", "\n", "\t", "'''\n\t\tGiven ctx, sentence and charIdx, update its word (token) in the whole ctx\n\t'''", "\n", "wordIdx", ",", "word", "=", "charIdx2wordIdx", "(", "sentence", ",", "charIdx", ",", "span_end", ")", "# word index in its sentence", "\n", "if", "word", "==", "'_NOT_FOUND_'", ":", "\n", "\t\t", "return", "-", "1", ",", "word", "\n", "\n", "", "ctx", "=", "[", "s", ".", "split", "(", ")", "for", "s", "in", "ctx", "]", "\n", "encIdx", "=", "sum", "(", "[", "len", "(", "s", ")", "for", "s", "in", "ctx", "[", ":", "sentenceIdx", "]", "]", ")", "+", "wordIdx", "\n", "return", "encIdx", ",", "word", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.utils.coref_utils.charIdx2wordIdx": [[24, 53], ["isinstance", "enumerate", "sentence.split", "sentence.split", "len"], "function", ["None"], ["", "def", "charIdx2wordIdx", "(", "sentence", ",", "charIdx", ",", "span_end", ")", ":", "\n", "\t", "'''\n\t\tGiven an sentence (str) and a charIdx, return the corresponding word (token) index\n\t'''", "\n", "assert", "isinstance", "(", "sentence", ",", "str", ")", "\n", "\n", "# fix inaccurate end_idx", "\n", "if", "span_end", "and", "sentence", "[", "charIdx", "]", "!=", "\" \"", ":", "\n", "\t\t", "while", "sentence", "[", "charIdx", "]", "!=", "\" \"", ":", "\n", "\t\t\t", "charIdx", "+=", "1", "\n", "", "", "if", "span_end", ":", "\n", "\t\t", "assert", "sentence", "[", "charIdx", "]", "==", "\" \"", "and", "sentence", "[", "charIdx", "+", "1", "]", "!=", "\" \"", "\n", "charIdx", "+=", "1", "\n", "\n", "", "p_idx", "=", "0", "\n", "target_idx", "=", "-", "1", "\n", "for", "token_idx", ",", "token", "in", "enumerate", "(", "sentence", ".", "split", "(", ")", ")", ":", "\n", "\t\t", "if", "p_idx", "==", "charIdx", ":", "\n", "\t\t\t", "target_idx", "=", "token_idx", "\n", "break", "\n", "", "else", ":", "\n", "\t\t\t", "p_idx", "+=", "(", "len", "(", "token", ")", "+", "1", ")", "# 1 for space", "\n", "\n", "# in some system turns (very few, only 6 turns in whole data), labels are inaccurate, which cause M/R cannot be found #", "\n", "", "", "if", "target_idx", "==", "-", "1", ":", "\n", "\t\t", "return", "-", "1", ",", "'_NOT_FOUND_'", "\n", "\n", "", "target_word", "=", "sentence", ".", "split", "(", ")", "[", "target_idx", "]", "\n", "return", "target_idx", ",", "target_word", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.utils.coref_utils.align_cluster": [[55, 70], ["clusterIdx2spanList.items", "len", "clusterIdx2spanList[].append", "isinstance", "isinstance"], "function", ["None"], ["", "def", "align_cluster", "(", "clusterIdx2spanList", ",", "mention", ",", "reference", ")", ":", "\n", "\t", "'''\n\t\tAlign a cluster index to a link (mention/reference)\n\t\tIf its overlapping with any \"reference\" in previous links, they are the same cluster. Otherwise, a new cluster is created.\n\t'''", "\n", "assert", "isinstance", "(", "mention", ",", "str", ")", "and", "isinstance", "(", "reference", ",", "str", ")", "\n", "for", "cluster_idx", ",", "span_list", "in", "clusterIdx2spanList", ".", "items", "(", ")", ":", "\n", "\t\t", "if", "reference", "in", "span_list", ":", "\n", "\t\t\t", "return", "cluster_idx", "\n", "\n", "", "", "cluster_idx", "=", "len", "(", "clusterIdx2spanList", ")", "\n", "if", "cluster_idx", "not", "in", "clusterIdx2spanList", ":", "\n", "\t\t", "clusterIdx2spanList", "[", "cluster_idx", "]", "=", "[", "]", "\n", "", "clusterIdx2spanList", "[", "cluster_idx", "]", ".", "append", "(", "reference", ")", "\n", "return", "cluster_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.utils.coref_utils.build_cluster_from_links": [[72, 105], ["copy.deepcopy", "copy.deepcopy.append", "list", "sorted", "isinstance", "isinstance", "s.split", "itertools.chain", "sorted.append", "coref_utils.align_cluster", "coref_utils.fill_in_cluster_info", "enumerate", "len", "mention.split", "coref_utils.fill_in_cluster_info", "len", "reference.split", "x[].split"], "function", ["home.repos.pwc.inspect_result.apple_ml-cread.utils.coref_utils.align_cluster", "home.repos.pwc.inspect_result.apple_ml-cread.utils.coref_utils.fill_in_cluster_info", "home.repos.pwc.inspect_result.apple_ml-cread.utils.coref_utils.fill_in_cluster_info"], ["", "def", "build_cluster_from_links", "(", "context", ",", "curr_utt", ",", "links", ")", ":", "\n", "\t", "'''\n\t\tReturn the cluster index of each token in the context + current utterance\n\t'''", "\n", "assert", "isinstance", "(", "context", ",", "list", ")", "and", "isinstance", "(", "curr_utt", ",", "str", ")", "#and isinstance(coref_utt, str)", "\n", "context", "=", "copy", ".", "deepcopy", "(", "context", ")", "\n", "context", ".", "append", "(", "curr_utt", ")", "\n", "context", "=", "[", "s", ".", "split", "(", ")", "for", "s", "in", "context", "]", "\n", "context_flat", "=", "list", "(", "chain", "(", "*", "context", ")", ")", "\n", "cluster_info", "=", "[", "[", "'-'", "]", "*", "len", "(", "s", ")", "for", "s", "in", "context", "]", "\n", "\n", "all_MR", "=", "[", "]", "\n", "for", "link", "in", "links", ":", "\n", "\t\t", "m_start_idx", ",", "m_end_idx", "=", "link", "[", "0", "]", "[", "'mention_idx'", "]", ",", "link", "[", "1", "]", "[", "'mention_idx'", "]", "\n", "r_start_idx", ",", "r_end_idx", "=", "link", "[", "0", "]", "[", "'attention_idx'", "]", ",", "link", "[", "1", "]", "[", "'attention_idx'", "]", "\n", "mention", "=", "\" \"", ".", "join", "(", "context_flat", "[", "m_start_idx", ":", "m_end_idx", "]", ")", "\n", "reference", "=", "\" \"", ".", "join", "(", "context_flat", "[", "r_start_idx", ":", "r_end_idx", "]", ")", "\n", "all_MR", ".", "append", "(", "(", "mention", ",", "reference", ")", ")", "\n", "\n", "# fill in cluster indexes starting by the short reference since there might be overlapping between references", "\n", "", "clusterIdx2spanList", "=", "{", "}", "\n", "all_MR", "=", "sorted", "(", "all_MR", ",", "key", "=", "lambda", "x", ":", "len", "(", "x", "[", "1", "]", ".", "split", "(", ")", ")", ")", "\n", "for", "mention", ",", "reference", "in", "all_MR", ":", "\n", "\t\t", "if", "mention", "==", "\"\"", "or", "reference", "==", "\"\"", ":", "\n", "\t\t\t", "continue", "\n", "", "cluster_idx", "=", "align_cluster", "(", "clusterIdx2spanList", ",", "mention", ",", "reference", ")", "\n", "\n", "# align cluster index as long as the span can be found in context or current utterance", "\n", "fill_in_cluster_info", "(", "cluster_idx", ",", "cluster_info", "[", "-", "1", "]", ",", "context", "[", "-", "1", "]", ",", "mention", ".", "split", "(", ")", ")", "\n", "for", "sent_idx", ",", "sent", "in", "enumerate", "(", "context", ")", ":", "# consider reference in current utterance as well", "\n", "\t\t\t", "fill_in_cluster_info", "(", "cluster_idx", ",", "cluster_info", "[", "sent_idx", "]", ",", "sent", ",", "reference", ".", "split", "(", ")", ")", "\n", "\n", "", "", "return", "cluster_info", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.utils.coref_utils.build_cluster": [[107, 162], ["copy.deepcopy", "copy.deepcopy.append", "coref_utt.split.split", "sorted", "isinstance", "isinstance", "isinstance", "s.split", "coref_utils.align_cluster", "coref_utils.fill_in_cluster_info", "enumerate", "len", "coref_utt.split.count", "coref_utt.split.count", "coref_utt.split.count", "coref_utt.split.count", "coref_utt.split.count", "coref_utt.split.count", "mention.split", "coref_utils.fill_in_cluster_info", "len", "reference.split", "x[].split", "sorted.append", "mention.append", "reference.append"], "function", ["home.repos.pwc.inspect_result.apple_ml-cread.utils.coref_utils.align_cluster", "home.repos.pwc.inspect_result.apple_ml-cread.utils.coref_utils.fill_in_cluster_info", "home.repos.pwc.inspect_result.apple_ml-cread.utils.coref_utils.fill_in_cluster_info"], ["", "def", "build_cluster", "(", "context", ",", "curr_utt", ",", "coref_utt", ",", "ground_truth", "=", "True", ")", ":", "\n", "\t", "'''\n\t\treturn the cluster index of each token in the context + current utterance\n\t'''", "\n", "assert", "isinstance", "(", "context", ",", "list", ")", "and", "isinstance", "(", "curr_utt", ",", "str", ")", "and", "isinstance", "(", "coref_utt", ",", "str", ")", "\n", "context", "=", "copy", ".", "deepcopy", "(", "context", ")", "\n", "context", ".", "append", "(", "curr_utt", ")", "\n", "context", "=", "[", "s", ".", "split", "(", ")", "for", "s", "in", "context", "]", "\n", "coref_utt", "=", "coref_utt", ".", "split", "(", ")", "\n", "\n", "cluster_info", "=", "[", "[", "'-'", "]", "*", "len", "(", "s", ")", "for", "s", "in", "context", "]", "\n", "if", "ground_truth", ":", "\n", "\t\t", "assert", "coref_utt", ".", "count", "(", "'<M>'", ")", "==", "coref_utt", ".", "count", "(", "'</M>'", ")", "\n", "assert", "coref_utt", ".", "count", "(", "'<R>'", ")", "==", "coref_utt", ".", "count", "(", "'</R>'", ")", "\n", "assert", "coref_utt", ".", "count", "(", "'<M>'", ")", "==", "coref_utt", ".", "count", "(", "'<R>'", ")", "\n", "\n", "", "is_mention", ",", "is_reference", "=", "False", ",", "False", "\n", "all_MR", "=", "[", "]", "\n", "for", "token", "in", "coref_utt", ":", "\n", "\t\t", "if", "token", "==", "'<M>'", ":", "\n", "\t\t\t", "is_mention", "=", "True", "\n", "mention", "=", "[", "]", "\n", "\n", "", "elif", "token", "==", "'</M>'", ":", "\n", "\t\t\t", "is_mention", "=", "False", "\n", "\n", "", "elif", "token", "==", "'<R>'", ":", "\n", "\t\t\t", "is_reference", "=", "True", "\n", "reference", "=", "[", "]", "\n", "\n", "", "elif", "token", "==", "'</R>'", ":", "\n", "\t\t\t", "is_reference", "=", "False", "\n", "mention", "=", "' '", ".", "join", "(", "mention", ")", "\n", "reference", "=", "' '", ".", "join", "(", "reference", ")", "\n", "all_MR", ".", "append", "(", "(", "mention", ",", "reference", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t", "if", "is_mention", ":", "\n", "\t\t\t\t", "mention", ".", "append", "(", "token", ")", "\n", "", "elif", "is_reference", ":", "\n", "\t\t\t\t", "reference", ".", "append", "(", "token", ")", "\n", "\n", "# fill in cluster indexes starting by the short reference since there might be overlapping between references", "\n", "", "", "", "clusterIdx2spanList", "=", "{", "}", "\n", "all_MR", "=", "sorted", "(", "all_MR", ",", "key", "=", "lambda", "x", ":", "len", "(", "x", "[", "1", "]", ".", "split", "(", ")", ")", ")", "\n", "for", "mention", ",", "reference", "in", "all_MR", ":", "\n", "\t\t", "if", "mention", "==", "\"\"", "or", "reference", "==", "\"\"", ":", "\n", "\t\t\t", "continue", "\n", "", "cluster_idx", "=", "align_cluster", "(", "clusterIdx2spanList", ",", "mention", ",", "reference", ")", "\n", "\n", "# align cluster index as long as the span can be found in context or current utterance", "\n", "fill_in_cluster_info", "(", "cluster_idx", ",", "cluster_info", "[", "-", "1", "]", ",", "context", "[", "-", "1", "]", ",", "mention", ".", "split", "(", ")", ")", "\n", "for", "sent_idx", ",", "sent", "in", "enumerate", "(", "context", ")", ":", "# consider reference in current utterance as well", "\n", "\t\t\t", "fill_in_cluster_info", "(", "cluster_idx", ",", "cluster_info", "[", "sent_idx", "]", ",", "sent", ",", "reference", ".", "split", "(", ")", ")", "\n", "\n", "", "", "return", "cluster_info", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.utils.coref_utils.fill_in_cluster_info": [[164, 173], ["coref_utils.find_span_index"], "function", ["home.repos.pwc.inspect_result.apple_ml-cread.utils.coref_utils.find_span_index"], ["", "def", "fill_in_cluster_info", "(", "idx", ",", "info", ",", "sentence", ",", "span", ")", ":", "\n", "\t", "indexes", "=", "find_span_index", "(", "sentence", ",", "span", ")", "\n", "for", "start_idx", ",", "end_idx", "in", "indexes", ":", "\n", "# NOTE: might happen when generated coref_utt is bad or substring overlapping between references", "\n", "\t\t", "if", "start_idx", "==", "end_idx", ":", "\n", "\t\t\t", "info", "[", "start_idx", "]", "=", "'({})'", ".", "format", "(", "idx", ")", "\n", "", "else", ":", "\n", "\t\t\t", "info", "[", "start_idx", "]", "=", "'({}'", ".", "format", "(", "idx", ")", "\n", "info", "[", "end_idx", "]", "=", "'{})'", ".", "format", "(", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.utils.coref_utils.find_span_index": [[175, 197], ["isinstance", "isinstance", "enumerate", "len", "indexes.append", "len", "len"], "function", ["None"], ["", "", "", "def", "find_span_index", "(", "sentence", ",", "span", ")", ":", "\n", "\t", "'''\n\t\treturn all matched span (start, end) indexes in a sentence\n\t'''", "\n", "assert", "isinstance", "(", "sentence", ",", "list", ")", "\n", "assert", "isinstance", "(", "span", ",", "list", ")", "\n", "indexes", "=", "[", "]", "\n", "for", "w_idx", ",", "w", "in", "enumerate", "(", "sentence", ")", ":", "\n", "\t\t", "t_offset", "=", "0", "\n", "find", "=", "True", "\n", "while", "t_offset", "<", "len", "(", "span", ")", ":", "\n", "\t\t\t", "if", "(", "w_idx", "+", "t_offset", ")", ">=", "len", "(", "sentence", ")", "or", "span", "[", "t_offset", "]", "!=", "sentence", "[", "w_idx", "+", "t_offset", "]", ":", "\n", "\t\t\t\t", "find", "=", "False", "\n", "break", "\n", "", "t_offset", "+=", "1", "\n", "\n", "", "if", "find", ":", "\n", "\t\t\t", "start_idx", "=", "w_idx", "\n", "end_idx", "=", "w_idx", "+", "len", "(", "span", ")", "-", "1", "\n", "indexes", ".", "append", "(", "(", "w_idx", ",", "end_idx", ")", ")", "\n", "\n", "", "", "return", "indexes", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.utils.coref_utils.generate_conll_format": [[199, 219], ["copy.deepcopy", "copy.deepcopy.append", "lines.append", "enumerate", "lines.append", "s.split", "len", "len", "zip", "lines.append", "enumerate", "len", "len", "lines.append"], "function", ["None"], ["", "def", "generate_conll_format", "(", "context", ",", "curr_utt", ",", "cluster_info", ",", "example_idx", ")", ":", "\n", "\t", "'''\n\t\tGenerate CONLL format for coreference resolution evaluation\n\t'''", "\n", "context", "=", "copy", ".", "deepcopy", "(", "context", ")", "\n", "context", ".", "append", "(", "curr_utt", ")", "\n", "context", "=", "[", "s", ".", "split", "(", ")", "for", "s", "in", "context", "]", "\n", "assert", "len", "(", "context", ")", "==", "len", "(", "cluster_info", ")", "\n", "lines", "=", "[", "]", "\n", "lines", ".", "append", "(", "'#begin document (example-{});'", ".", "format", "(", "example_idx", ")", ")", "\n", "for", "sent_idx", ",", "(", "tokens", ",", "cluster_indexes", ")", "in", "enumerate", "(", "zip", "(", "context", ",", "cluster_info", ")", ")", ":", "\n", "\t\t", "lines", ".", "append", "(", "'\\n'", ")", "\n", "assert", "len", "(", "tokens", ")", "==", "len", "(", "cluster_indexes", ")", "\n", "spk", "=", "'USR'", "if", "sent_idx", "%", "2", "==", "0", "else", "'SYS'", "\n", "for", "token_idx", ",", "token", "in", "enumerate", "(", "tokens", ")", ":", "\n", "\t\t\t", "line", "=", "\"{}\\t{}\\t{}\\t{}\\t{}\\n\"", ".", "format", "(", "spk", ",", "example_idx", ",", "token_idx", ",", "token", ",", "cluster_indexes", "[", "token_idx", "]", ")", "\n", "lines", ".", "append", "(", "line", ")", "\n", "\n", "", "", "lines", ".", "append", "(", "'#end document\\n\\n'", ")", "\n", "return", "lines", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.utils.process_data.filter_links": [[23, 77], ["sorted", "links.append", "len", "len", "reference.lower", "len", "len", "reference.lower", "mention.lower", "reference.lower", "mention.lower", "reference.lower", "mention.lower", "reference.lower", "mention.lower", "reference.lower", "mention.lower", "len", "len", "len", "len"], "function", ["None"], ["def", "filter_links", "(", "original_links", ",", "turn", ",", "ctx", ",", "utt", ")", ":", "\n", "\t", "'''\n\t\t1. filter out improper links\n\t\t2. sort links by the mention order in the current utterance\n\t'''", "\n", "links", "=", "[", "]", "\n", "# iterate all coreference links in annotation", "\n", "for", "link", "in", "original_links", ":", "\n", "\t\t", "if", "len", "(", "link", ")", "==", "1", ":", "# incomplete link with only mention or reference", "\n", "\t\t\t", "continue", "\n", "", "reference", ",", "mention", "=", "link", "[", "0", "]", "[", "'text'", "]", ",", "link", "[", "1", "]", "[", "'text'", "]", "\n", "if", "reference", ".", "lower", "(", ")", "==", "'i'", "or", "mention", ".", "lower", "(", ")", "==", "\"i\"", ":", "# skip mention or refearence which is \"I\"", "\n", "\t\t\t", "continue", "\n", "", "if", "reference", ".", "lower", "(", ")", "in", "[", "\"you\"", ",", "\"your\"", "]", "or", "mention", ".", "lower", "(", ")", "in", "[", "\"you\"", ",", "\"your\"", "]", ":", "# skip link involving \"you\" which refers to the system", "\n", "\t\t\t", "continue", "\n", "", "if", "reference", ".", "lower", "(", ")", "in", "[", "\"my\"", ",", "\"me\"", "]", "or", "mention", ".", "lower", "(", ")", "in", "[", "\"my\"", ",", "\"me\"", "]", ":", "\n", "\t\t\t", "continue", "\n", "", "if", "reference", ".", "lower", "(", ")", "in", "[", "\"she\"", ",", "\"her\"", "]", "and", "mention", ".", "lower", "(", ")", "in", "[", "\"she\"", ",", "\"her\"", "]", ":", "\n", "\t\t\t", "continue", "\n", "", "if", "reference", ".", "lower", "(", ")", "in", "[", "\"he\"", ",", "\"his\"", ",", "\"him\"", "]", "and", "mention", ".", "lower", "(", ")", "in", "[", "\"he\"", ",", "\"his\"", ",", "\"him\"", "]", ":", "\n", "\t\t\t", "continue", "\n", "", "if", "reference", ".", "lower", "(", ")", "in", "[", "'it'", ",", "'its'", ",", "'he'", ",", "'his'", ",", "'him'", ",", "'she'", ",", "'her'", ",", "'hers'", ",", "'they'", ",", "'them'", ",", "'their'", ",", "'i'", ",", "'my'", ",", "'mine'", ",", "'that'", ",", "'you'", ",", "'your'", ",", "'one'", "]", ":", "# remove a link if reference is a pronoun", "\n", "\t\t\t", "continue", "\n", "\n", "# deal with some rare cases with invalid links", "\n", "", "r_turn_id", "=", "link", "[", "0", "]", "[", "'turn_id'", "]", "-", "1", "\n", "if", "r_turn_id", ">", "len", "(", "ctx", ")", ":", "# refer to future turns", "\n", "\t\t\t", "continue", "\n", "", "r_end", ",", "m_end", "=", "link", "[", "0", "]", "[", "'span'", "]", "[", "'end'", "]", "+", "spk_offset", ",", "link", "[", "1", "]", "[", "'span'", "]", "[", "'end'", "]", "+", "spk_offset", "\n", "if", "m_end", ">=", "len", "(", "utt", ")", ":", "# M out of index of utt", "\n", "\t\t\t", "continue", "\n", "", "if", "len", "(", "ctx", ")", "==", "r_turn_id", "and", "r_end", ">=", "len", "(", "utt", ")", ":", "\n", "\t\t\t", "continue", "\n", "", "if", "len", "(", "ctx", ")", "!=", "r_turn_id", "and", "r_end", ">=", "len", "(", "ctx", "[", "r_turn_id", "]", ")", ":", "\n", "\t\t\t", "continue", "\n", "", "if", "mention", "==", "'l the reminder'", ":", "\n", "\t\t\t", "continue", "\n", "", "links", ".", "append", "(", "link", ")", "\n", "\n", "# sort link by the mention start index", "\n", "", "if", "len", "(", "links", ")", "==", "0", ":", "\n", "\t\t", "return", "[", "]", "\n", "\n", "", "sorted_links", "=", "sorted", "(", "links", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", "[", "'span'", "]", "[", "'start'", "]", ")", "\n", "\n", "# sanity check", "\n", "mentions", ",", "references", "=", "[", "]", ",", "[", "]", "\n", "prev_end", "=", "-", "1", "\n", "for", "link", "in", "sorted_links", ":", "\n", "\t\t", "m_start", ",", "m_end", "=", "link", "[", "1", "]", "[", "'span'", "]", "[", "'start'", "]", ",", "link", "[", "1", "]", "[", "'span'", "]", "[", "'end'", "]", "\n", "assert", "m_start", ">", "prev_end", "# check no overlapping between mentions", "\n", "prev_end", "=", "m_end", "\n", "\n", "", "return", "sorted_links", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.utils.process_data.prepare_coref_signal_idx": [[79, 110], ["copy.deepcopy", "copy.deepcopy.append", "coref_utils.get_encIdx", "coref_utils.get_encIdx", "mention_attention.append", "coref_utils.get_encIdx", "coref_utils.get_encIdx", "mention_attention.append", "coref_span_index.append", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.apple_ml-cread.utils.coref_utils.get_encIdx", "home.repos.pwc.inspect_result.apple_ml-cread.utils.coref_utils.get_encIdx", "home.repos.pwc.inspect_result.apple_ml-cread.utils.coref_utils.get_encIdx", "home.repos.pwc.inspect_result.apple_ml-cread.utils.coref_utils.get_encIdx"], ["", "def", "prepare_coref_signal_idx", "(", "ctx", ",", "utt", ",", "links", ")", ":", "\n", "\t", "'''\n\t\tget mention / reference span index for coreference modeling\n\t'''", "\n", "ctx", "=", "copy", ".", "deepcopy", "(", "ctx", ")", "\n", "ctx", ".", "append", "(", "utt", ")", "\n", "coref_span_index", "=", "[", "]", "\n", "for", "link", "in", "links", ":", "\n", "\t\t", "mention", ",", "m_start", ",", "m_end", "=", "link", "[", "1", "]", "[", "'text'", "]", ",", "link", "[", "1", "]", "[", "'span'", "]", "[", "'start'", "]", "+", "spk_offset", ",", "link", "[", "1", "]", "[", "'span'", "]", "[", "'end'", "]", "+", "spk_offset", "\n", "reference", ",", "r_start", ",", "r_end", ",", "r_turn_id", "=", "link", "[", "0", "]", "[", "'text'", "]", ",", "link", "[", "0", "]", "[", "'span'", "]", "[", "'start'", "]", "+", "spk_offset", ",", "link", "[", "0", "]", "[", "'span'", "]", "[", "'end'", "]", "+", "spk_offset", ",", "link", "[", "0", "]", "[", "'turn_id'", "]", "-", "1", "\n", "ref_utt", "=", "ctx", "[", "r_turn_id", "]", "\n", "assert", "m_end", "<", "len", "(", "utt", ")", "\n", "assert", "r_end", "<", "len", "(", "ref_utt", ")", "\n", "mention_attention", "=", "[", "]", "\n", "\n", "# get index for start word", "\n", "m_start_idx", ",", "m_start_word", "=", "get_encIdx", "(", "ctx", ",", "utt", ",", "len", "(", "ctx", ")", "-", "1", ",", "m_start", ",", "span_end", "=", "False", ")", "\n", "r_start_idx", ",", "r_start_word", "=", "get_encIdx", "(", "ctx", ",", "ref_utt", ",", "r_turn_id", ",", "r_start", ",", "span_end", "=", "False", ")", "\n", "assert", "m_start_idx", "not", "in", "coref_span_index", "\n", "mention_attention", ".", "append", "(", "{", "'attention_idx'", ":", "r_start_idx", ",", "'attention_word'", ":", "r_start_word", ",", "'mention_type'", ":", "'start'", ",", "'mention_word'", ":", "m_start_word", ",", "'mention_idx'", ":", "m_start_idx", "}", ")", "\n", "\n", "# get index for end word", "\n", "m_end_idx", ",", "m_end_word", "=", "get_encIdx", "(", "ctx", ",", "utt", ",", "len", "(", "ctx", ")", "-", "1", ",", "m_end", ",", "span_end", "=", "True", ")", "\n", "r_end_idx", ",", "r_end_word", "=", "get_encIdx", "(", "ctx", ",", "ref_utt", ",", "r_turn_id", ",", "r_end", ",", "span_end", "=", "True", ")", "\n", "assert", "m_end_idx", "not", "in", "coref_span_index", "\n", "mention_attention", ".", "append", "(", "{", "'attention_idx'", ":", "r_end_idx", ",", "'attention_word'", ":", "r_end_word", ",", "'mention_type'", ":", "'end'", ",", "'mention_word'", ":", "m_end_word", ",", "'mention_idx'", ":", "m_end_idx", "}", ")", "\n", "\n", "if", "'_NOT_FOUND_'", "in", "[", "m_start_word", ",", "r_start_word", ",", "m_end_word", ",", "r_end_word", "]", ":", "\n", "\t\t\t", "continue", "\n", "", "coref_span_index", ".", "append", "(", "mention_attention", ")", "\n", "", "return", "coref_span_index", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.utils.process_data.get_rewrite_utterance": [[112, 120], ["process_data.proc_utterance"], "function", ["home.repos.pwc.inspect_result.apple_ml-cread.utils.process_data.proc_utterance"], ["", "def", "get_rewrite_utterance", "(", "turn", ",", "turn_idx", ")", ":", "\n", "\t", "if", "turn", "[", "\"graded\"", "]", "==", "False", ":", "# for turns not graded and not skipped, treated as non-rewrite example", "\n", "\t\t", "turn", "[", "'rewrite_required'", "]", "=", "False", "\n", "turn", "[", "'rewritten_utterance'", "]", "=", "turn", "[", "'utterance'", "]", "\n", "\n", "", "rewrite", "=", "proc_utterance", "(", "turn", "[", "'rewritten_utterance'", "]", ")", "\n", "rewrite_happen", "=", "turn", "[", "'rewrite_required'", "]", "\n", "return", "rewrite", ",", "rewrite_happen", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.utils.process_data.proc_utterance": [[122, 128], ["nltk.tokenize.word_tokenize", "utt.strip"], "function", ["None"], ["", "def", "proc_utterance", "(", "utt", ")", ":", "\n", "# NOTE: handle discrepency in format between pre-processed utterances in mudoco dataset and our labeled rewritten utterances", "\n", "\t", "utt", "=", "\" \"", ".", "join", "(", "word_tokenize", "(", "utt", ".", "strip", "(", ")", ")", ")", "\n", "if", "utt", "[", "-", "1", "]", "not", "in", "[", "'.'", ",", "'!'", ",", "'?'", "]", ":", "\n", "\t\t", "utt", "+=", "\" .\"", "\n", "", "return", "utt", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.utils.process_data.include_example": [[130, 136], ["None"], "function", ["None"], ["", "def", "include_example", "(", "split", ",", "spk", ")", ":", "\n", "# dont include sys side for coref evalutaion since ", "\n", "# there are coref label is imperfect original dataset and we care more about user side", "\n", "\t", "if", "split", "in", "[", "'dev'", ",", "'test'", "]", "and", "spk", "==", "'sys'", ":", "\n", "\t\t", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.utils.utils.str2bool": [[15, 22], ["v.lower", "v.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["def", "str2bool", "(", "v", ")", ":", "\n", "\t", "if", "v", ".", "lower", "(", ")", "in", "(", "'yes'", ",", "'true'", ",", "'t'", ",", "'y'", ",", "'1'", ")", ":", "\n", "\t\t", "return", "True", "\n", "", "elif", "v", ".", "lower", "(", ")", "in", "(", "'no'", ",", "'false'", ",", "'f'", ",", "'n'", ",", "'0'", ")", ":", "\n", "\t\t", "return", "False", "\n", "", "else", ":", "\n", "\t\t", "raise", "argparse", ".", "ArgumentTypeError", "(", "'Boolean value expected.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.utils.utils.verify_args": [[23, 35], ["None"], "function", ["None"], ["", "", "def", "verify_args", "(", "args", ")", ":", "\n", "\t", "assert", "args", ".", "mode", "in", "[", "'training'", ",", "'testing'", "]", "\n", "assert", "args", ".", "eval_batch_size", "==", "1", "\n", "if", "args", ".", "mode", "==", "'testing'", ":", "args", ".", "decode_file", "!=", "''", "\n", "assert", "args", ".", "task", "in", "[", "'qr'", ",", "'coref'", ",", "'qr_coref'", "]", "\n", "if", "'coref'", "in", "args", ".", "task", ":", "\n", "\t\t", "assert", "args", ".", "dev_conll", "!=", "''", "\n", "assert", "args", ".", "test_conll", "!=", "''", "\n", "", "assert", "args", ".", "n_coref_head", ">=", "1", "and", "args", ".", "n_coref_head", "<=", "12", "\n", "assert", "args", ".", "coref_attn_layer", "<=", "12", "\n", "assert", "args", ".", "class0_loss_w", ">", "0", "\n", "assert", "args", ".", "class1_loss_w", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.utils.utils.str2list": [[37, 51], ["re.findall", "re.findall", "v.split", "sorted", "len", "len", "len", "len", "len", "int", "set", "min", "max"], "function", ["None"], ["", "def", "str2list", "(", "v", ")", ":", "\n", "\t", "''' convert str into list, e.g., \"1,2,3\" -> [1,2,3] '''", "\n", "# format check", "\n", "res", "=", "re", ".", "findall", "(", "r\"[^0-9,]\"", ",", "v", ")", "# only allow , and digits", "\n", "assert", "len", "(", "res", ")", "==", "0", "\n", "res", "=", "re", ".", "findall", "(", "r\",,+\"", ",", "v", ")", "\n", "assert", "len", "(", "res", ")", "==", "0", "\n", "\n", "l", "=", "v", ".", "split", "(", "','", ")", "\n", "l", "=", "sorted", "(", "[", "int", "(", "x", ")", "for", "x", "in", "l", "]", ")", "\n", "assert", "len", "(", "l", ")", ">", "0", "\n", "assert", "len", "(", "l", ")", "==", "len", "(", "set", "(", "l", ")", ")", "# repeat element", "\n", "assert", "min", "(", "l", ")", ">=", "0", "and", "max", "(", "l", ")", "<=", "11", "\n", "return", "l", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.utils.utils.get_args": [[53, 125], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print", "utils.verify_args"], "function", ["home.repos.pwc.inspect_result.apple_ml-cread.utils.utils.verify_args"], ["", "def", "get_args", "(", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "''", ")", "\n", "\n", "# general info", "\n", "parser", ".", "add_argument", "(", "'--mode'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--task'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "'which task [qr, coref, qr_coref] to perform? \\\n\t\t`qr` for `qr-only` model; `coref` for `coref-only` model; `both` for `joint learning` model'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1122", ")", "\n", "parser", ".", "add_argument", "(", "'--model_name'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "'model name, can be random but has to be provided'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_name_or_path'", ",", "type", "=", "str", ",", "default", "=", "'gpt2'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'path of your model to save/load'", ")", "\n", "parser", ".", "add_argument", "(", "'--disable_display'", ",", "type", "=", "str2bool", ",", "default", "=", "False", ",", "help", "=", "'display progress bar or not'", ")", "\n", "\n", "# data path", "\n", "parser", ".", "add_argument", "(", "'--train_file'", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--dev_file'", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--test_file'", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--dev_conll'", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--test_conll'", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "\n", "# training", "\n", "parser", ".", "add_argument", "(", "'--load_pretrained_weight'", ",", "type", "=", "str2bool", ",", "default", "=", "True", ",", "help", "=", "'whether to load pretrained gpt2 weight or train from scratch'", ")", "\n", "parser", ".", "add_argument", "(", "'--train_batch_size'", ",", "type", "=", "int", ",", "default", "=", "15", ",", "help", "=", "'batch size of training per gpu'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_batch_size'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'batch size of evaluation per gpu'", ")", "\n", "parser", ".", "add_argument", "(", "'--gradient_accumulation_steps'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "\"steps for accumulating gradients\"", ")", "\n", "parser", ".", "add_argument", "(", "'--learning_rate'", ",", "type", "=", "float", ",", "default", "=", "6.25e-5", ")", "\n", "parser", ".", "add_argument", "(", "'--adam_epsilon'", ",", "type", "=", "float", ",", "default", "=", "1e-12", ")", "\n", "parser", ".", "add_argument", "(", "'--max_grad_norm'", ",", "type", "=", "float", ",", "default", "=", "1.0", ")", "\n", "parser", ".", "add_argument", "(", "'--max_epoch'", ",", "type", "=", "int", ",", "default", "=", "16", ")", "\n", "parser", ".", "add_argument", "(", "'--use_scheduler'", ",", "type", "=", "str2bool", ",", "default", "=", "True", ",", "help", "=", "'whether to use lr scheduler'", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup_steps'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--train_size'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "'examples used for training. -1 means all data'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_interval'", ",", "type", "=", "int", ",", "default", "=", "16000", ",", "help", "=", "'how frequent (in steps) to evaluate the model during training'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_improve_max'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'The max tolerance for model not improving'", ")", "\n", "parser", ".", "add_argument", "(", "'--eps'", ",", "type", "=", "float", ",", "default", "=", "1e-12", ")", "\n", "#\tparser.add_argument('--fp16', type=str2bool, default=False, help='Whether to use float16')", "\n", "#\tparser.add_argument('--local_rank', type=int, default=-1, help='Local rank for distributed training (-1: not distributed)')", "\n", "\n", "# coreference resolution", "\n", "parser", ".", "add_argument", "(", "'--coref_layer_idx'", ",", "type", "=", "str2list", ",", "default", "=", "[", "10", ",", "11", "]", ",", "help", "=", "'which layer to use for coref prediction, e.g., \"1,5,11\". 0<=n<=11'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_coref_head'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'How many heads to be used for coref prediction in each layer. 1<=n<=12'", ")", "\n", "\n", "# coref2qr attention", "\n", "parser", ".", "add_argument", "(", "'--use_coref_attn'", ",", "type", "=", "str2bool", ",", "default", "=", "True", ",", "help", "=", "\"whether to use coref2qr attention\"", ")", "\n", "parser", ".", "add_argument", "(", "'--coref_attn_layer'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "\"how many layer involved in coref2qr attention\"", ")", "\n", "parser", ".", "add_argument", "(", "'--coref_attn_mention'", ",", "type", "=", "str2bool", ",", "default", "=", "False", ",", "help", "=", "\"whether to consider mentions' hidden states for coref2qr\"", ")", "\n", "parser", ".", "add_argument", "(", "'--coref_attn_share_between_layer'", ",", "type", "=", "str2bool", ",", "default", "=", "True", ",", "help", "=", "\"whether to share parameters in coref2qr attention across layers\"", ")", "\n", "\n", "# binary classification", "\n", "parser", ".", "add_argument", "(", "'--use_binary_cls'", ",", "type", "=", "str2bool", ",", "default", "=", "True", ",", "help", "=", "\"whether to use binary classification\"", ")", "\n", "parser", ".", "add_argument", "(", "'--filter_not_rewrite_loss'", ",", "type", "=", "str2bool", ",", "default", "=", "True", ",", "help", "=", "\"if True, lm loss of examples not requiring rewrite won't be considered\"", ")", "\n", "parser", ".", "add_argument", "(", "'--copy_not_rewrite'", ",", "type", "=", "str2bool", ",", "default", "=", "True", ",", "help", "=", "\"if True, the model copies the input query as output when it predicts `no-rewrite`\"", ")", "\n", "parser", ".", "add_argument", "(", "'--class0_loss_w'", ",", "type", "=", "float", ",", "default", "=", "1.", ",", "help", "=", "\"loss weight for `no-rewrite` class\"", ")", "\n", "parser", ".", "add_argument", "(", "'--class1_loss_w'", ",", "type", "=", "float", ",", "default", "=", "1.5", ",", "help", "=", "\"loss weight for `rewrite` class\"", ")", "\n", "\n", "# decoding", "\n", "parser", ".", "add_argument", "(", "'--dec_max_len'", ",", "type", "=", "int", ",", "default", "=", "100", ")", "\n", "parser", ".", "add_argument", "(", "'--num_beams'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--temperature'", ",", "type", "=", "float", ",", "default", "=", "1.0", ")", "\n", "parser", ".", "add_argument", "(", "'--decode_file'", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "print", "(", "args", ")", "\n", "verify_args", "(", "args", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.utils.utils.print_loss": [[127, 130], ["print", "print", "time.time", "time.time"], "function", ["None"], ["", "def", "print_loss", "(", "epoch", ",", "data_type", ",", "LOSS", ",", "t0", ")", ":", "\n", "\t", "print", "(", "'Epoch: {} | {} total loss: {:.3f} (binary: {:.2f}, rewrite: {:.3f}, mention: {:.3f}, reference: {:.3f}) | time: {:.1f}'", ".", "format", "(", "epoch", ",", "data_type", ",", "LOSS", "[", "'total'", "]", ",", "LOSS", "[", "'bi'", "]", ",", "LOSS", "[", "'lm'", "]", ",", "LOSS", "[", "'mention'", "]", ",", "LOSS", "[", "'reference'", "]", ",", "time", ".", "time", "(", ")", "-", "t0", ")", ")", "\n", "print", "(", "'Epoch: {} | {} total loss: {:.3f} (binary: {:.2f}, rewrite: {:.3f}, mention: {:.3f}, reference: {:.3f}) | time: {:.1f}'", ".", "format", "(", "epoch", ",", "data_type", ",", "LOSS", "[", "'total'", "]", ",", "LOSS", "[", "'bi'", "]", ",", "LOSS", "[", "'lm'", "]", ",", "LOSS", "[", "'mention'", "]", ",", "LOSS", "[", "'reference'", "]", ",", "time", ".", "time", "(", ")", "-", "t0", ")", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.utils.utils.print_score": [[132, 147], ["print", "print", "time.time", "time.time"], "function", ["None"], ["", "def", "print_score", "(", "args", ",", "epoch", ",", "data_type", ",", "res", ",", "t0", ")", ":", "\n", "\t", "if", "'qr'", "in", "args", ".", "task", ":", "\n", "\t\t", "qr_p", ",", "qr_r", ",", "qr_f1", ",", "qr_f1_2", "=", "res", "[", "'qr'", "]", "[", "'Macro P'", "]", ",", "res", "[", "'qr'", "]", "[", "'Macro R'", "]", ",", "res", "[", "'qr'", "]", "[", "'Macro F1'", "]", ",", "res", "[", "'qr'", "]", "[", "'Micro F1'", "]", "\n", "qr_bi_f1", ",", "qr_bi_m", "=", "res", "[", "'qr'", "]", "[", "'Binary F1'", "]", ",", "res", "[", "'qr'", "]", "[", "'Binary M'", "]", "\n", "if", "qr_bi_f1", "is", "None", ":", "qr_bi_f1", "=", "0", "\n", "if", "qr_bi_m", "is", "None", ":", "qr_bi_m", "=", "0", "\n", "", "else", ":", "\n", "\t\t", "qr_p", ",", "qr_r", ",", "qr_f1", ",", "qr_f1_2", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "qr_bi_f1", ",", "qr_bi_m", "=", "0", ",", "0", "\n", "", "if", "'coref'", "in", "args", ".", "task", ":", "\n", "\t\t", "coref_p", ",", "coref_r", ",", "coref_f1", ",", "lea_f1", "=", "res", "[", "'coref'", "]", "[", "'avg_precision'", "]", ",", "res", "[", "'coref'", "]", "[", "'avg_recall'", "]", ",", "res", "[", "'coref'", "]", "[", "'avg_f1'", "]", ",", "res", "[", "'coref'", "]", "[", "'lea'", "]", "[", "'f1'", "]", "\n", "", "else", ":", "\n", "\t\t", "coref_p", ",", "coref_r", ",", "coref_f1", ",", "lea_f1", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "", "print", "(", "'Epoch: {} | {}: QR Binary F1: {:.2f} ({:.2f}), LM: P: {:.2f} R: {:.2f} F1: {:.2f} ({:.2f}) | COREF P: {:.2f} R: {:.2f} F1: {:.2f} ({:.2f}) | time: {:.1f}'", ".", "format", "(", "epoch", ",", "data_type", ",", "qr_bi_f1", ",", "qr_bi_m", ",", "qr_p", ",", "qr_r", ",", "qr_f1", ",", "qr_f1_2", ",", "coref_p", ",", "coref_r", ",", "coref_f1", ",", "lea_f1", ",", "time", ".", "time", "(", ")", "-", "t0", ")", ")", "\n", "print", "(", "'Epoch: {} | {}: QR Binary F1: {:.2f} ({:.2f}), LM: P: {:.2f} R: {:.2f} F1: {:.2f} ({:.2f}) | COREF P: {:.2f} R: {:.2f} F1: {:.2f} ({:.2f}) | time: {:.1f}'", ".", "format", "(", "epoch", ",", "data_type", ",", "qr_bi_f1", ",", "qr_bi_m", ",", "qr_p", ",", "qr_r", ",", "qr_f1", ",", "qr_f1_2", ",", "coref_p", ",", "coref_r", ",", "coref_f1", ",", "lea_f1", ",", "time", ".", "time", "(", ")", "-", "t0", ")", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.utils.utils.print_qr_result": [[148, 159], ["print", "print", "print", "print", "print", "print"], "function", ["None"], ["", "def", "print_qr_result", "(", "args", ",", "res", ",", "split", ")", ":", "\n", "\t", "if", "'qr'", "in", "args", ".", "task", ":", "\n", "\t\t", "print", "(", "\"\\n{} QR Result on {} {}\"", ".", "format", "(", "'***'", "*", "8", ",", "split", ",", "'***'", "*", "8", ")", ")", "\n", "print", "(", "\"\\tMacro P R F1 | Micro P R F1 | BLEU | ROUGE-1 -2 L F1\\n\\t{:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f}\"", ".", "format", "(", "res", "[", "'Macro P'", "]", ",", "res", "[", "'Macro R'", "]", ",", "res", "[", "'Macro F1'", "]", ",", "res", "[", "'Micro P'", "]", ",", "res", "[", "'Micro R'", "]", ",", "res", "[", "'Micro F1'", "]", ",", "res", "[", "'BLEU'", "]", ",", "res", "[", "'ROUGE1 F1'", "]", ",", "res", "[", "'ROUGE2 F1'", "]", ",", "res", "[", "'ROUGEL F1'", "]", ")", ")", "\n", "print", "(", "\"\\tMacro P R F1 | Micro P R F1 | BLEU | ROUGE-1 -2 L F1\\n\\t{:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f} {:.2f}\"", ".", "format", "(", "res", "[", "'Macro P'", "]", ",", "res", "[", "'Macro R'", "]", ",", "res", "[", "'Macro F1'", "]", ",", "res", "[", "'Micro P'", "]", ",", "res", "[", "'Micro R'", "]", ",", "res", "[", "'Micro F1'", "]", ",", "res", "[", "'BLEU'", "]", ",", "res", "[", "'ROUGE1 F1'", "]", ",", "res", "[", "'ROUGE2 F1'", "]", ",", "res", "[", "'ROUGEL F1'", "]", ")", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "print", "(", "'***'", "*", "35", ",", "'\\n\\n'", ")", "\n", "", "else", ":", "\n", "\t\t", "print", "(", "'qr is not in task'", ")", "\n", "print", "(", "'qr is not in task'", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.apple_ml-cread.arrau.reader.get_doc_markables": [[8, 101], ["enumerate", "line.split", "all_words.append", "coval.arrau.markable.Markable", "[].append", "len", "columns[].split", "enumerate", "columns[].split", "columns[].split", "int", "int", "markable_annotation.startswith", "len", "print", "markable_annotation.startswith", "len", "MIN_annotations[].strip", "print", "len", "len", "len", "len", "markable_annotation.find", "len", "len", "MIN_annotations[].find", "len", "len", "coref_annotations[].strip", "markable_annotation.find", "int", "int", "int", "MIN_annotations[].find", "MIN_annotations[].find"], "function", ["None"], ["def", "get_doc_markables", "(", "doc_name", ",", "doc_lines", ",", "extract_MIN", ",", "word_column", "=", "0", ",", "\n", "markable_column", "=", "1", ",", "MIN_column", "=", "2", ",", "print_debug", "=", "False", ")", ":", "\n", "    ", "markables_cluster", "=", "{", "}", "\n", "markables_start", "=", "{", "}", "\n", "markables_end", "=", "{", "}", "\n", "markables_MIN", "=", "{", "}", "\n", "markables_coref_tag", "=", "{", "}", "\n", "\n", "all_words", "=", "[", "]", "\n", "\n", "for", "word_index", ",", "line", "in", "enumerate", "(", "doc_lines", ")", ":", "\n", "        ", "columns", "=", "line", ".", "split", "(", ")", "\n", "all_words", ".", "append", "(", "columns", "[", "word_column", "]", ")", "\n", "\n", "# If the line contains annotations", "\n", "if", "len", "(", "columns", ")", ">", "1", ":", "\n", "\n", "            ", "markable_annotations", "=", "columns", "[", "markable_column", "]", ".", "split", "(", "\"@\"", ")", "\n", "MIN_annotations", "=", "columns", "[", "MIN_column", "]", ".", "split", "(", "\n", "\"@\"", ")", "if", "extract_MIN", "and", "len", "(", "columns", ")", ">=", "4", "else", "None", "\n", "coref_annotations", "=", "columns", "[", "-", "1", "]", ".", "split", "(", "\n", "\"@\"", ")", "if", "len", "(", "columns", ")", ">=", "3", "else", "None", "\n", "\n", "if", "print_debug", ":", "\n", "                ", "if", "(", "(", "MIN_annotations", "and", "len", "(", "markable_annotations", ")", "\n", "!=", "len", "(", "MIN_annotations", ")", ")", "\n", "or", "(", "coref_annotations", "and", "len", "(", "markable_annotations", ")", "\n", "!=", "len", "(", "coref_annotations", ")", ")", ")", ":", "\n", "                    ", "print", "(", "(", "\n", "'There is a problem with the annotation of the '", "\n", "'document %r in line %s\\n'", "\n", "'The number of MIN or coref annotations '", "\n", "'for each line should be equal to the the number '", "\n", "'of markable annotations'", ")", "%", "(", "doc_name", ",", "line", ")", ")", "\n", "\n", "", "", "for", "i", ",", "markable_annotation", "in", "enumerate", "(", "markable_annotations", ")", ":", "\n", "                ", "markable_id", "=", "int", "(", "markable_annotation", "[", "\n", "11", ":", "markable_annotation", ".", "find", "(", "'='", ")", "]", ")", "\n", "cluster_id", "=", "int", "(", "markable_annotation", "[", "\n", "markable_annotation", ".", "find", "(", "'='", ")", "+", "5", ":", "]", ")", "\n", "\n", "if", "markable_annotation", ".", "startswith", "(", "\"B-markable_\"", ")", ":", "\n", "                    ", "markables_cluster", "[", "markable_id", "]", "=", "cluster_id", "\n", "markables_start", "[", "markable_id", "]", "=", "word_index", "\n", "markables_end", "[", "markable_id", "]", "=", "word_index", "\n", "\n", "if", "MIN_annotations", "and", "len", "(", "markable_annotations", ")", "==", "len", "(", "\n", "MIN_annotations", ")", "and", "MIN_annotations", "[", "i", "]", ".", "strip", "(", ")", ":", "\n", "                        ", "if", "MIN_annotations", "[", "i", "]", ".", "find", "(", "'..'", ")", "==", "-", "1", ":", "\n", "                            ", "MIN_start", "=", "int", "(", "MIN_annotations", "[", "i", "]", "[", "5", ":", "]", ")", "-", "1", "\n", "MIN_end", "=", "MIN_start", "\n", "", "else", ":", "\n", "# -1 because word_index starts from zero", "\n", "                            ", "MIN_start", "=", "int", "(", "MIN_annotations", "[", "i", "]", "[", "\n", "5", ":", "MIN_annotations", "[", "i", "]", ".", "find", "(", "'..'", ")", "]", ")", "-", "1", "\n", "MIN_end", "=", "int", "(", "MIN_annotations", "[", "i", "]", "[", "\n", "MIN_annotations", "[", "i", "]", ".", "find", "(", "'..'", ")", "+", "7", ":", "]", ")", "-", "1", "\n", "", "markables_MIN", "[", "markable_id", "]", "=", "(", "MIN_start", ",", "MIN_end", ")", "\n", "", "else", ":", "\n", "                        ", "markables_MIN", "[", "markable_id", "]", "=", "None", "\n", "\n", "", "if", "coref_annotations", "and", "len", "(", "markable_annotations", ")", "==", "len", "(", "\n", "coref_annotations", ")", "and", "coref_annotations", "[", "i", "]", ".", "strip", "(", "\n", ")", "==", "'non_referring'", ":", "\n", "                        ", "markables_coref_tag", "[", "markable_id", "]", "=", "'non_referring'", "\n", "", "else", ":", "\n", "                        ", "markables_coref_tag", "[", "markable_id", "]", "=", "'referring'", "\n", "\n", "", "", "elif", "markable_annotation", ".", "startswith", "(", "\"I-markable_\"", ")", ":", "\n", "                    ", "markables_end", "[", "markable_id", "]", "=", "word_index", "\n", "\n", "", "else", ":", "\n", "                    ", "print", "(", "(", "\n", "'%r is not a valid annotation for markables.\\n'", ",", "\n", "'The annotation of the following markable will be '", "\n", "'skipped then.\\n%s'", ")", "%", "(", "markable_annotation", ",", "line", ")", ")", "\n", "\n", "", "", "", "", "clusters", "=", "{", "}", "\n", "\n", "for", "markable_id", "in", "markables_cluster", ":", "\n", "        ", "m", "=", "markable", ".", "Markable", "(", "\n", "doc_name", ",", "markables_start", "[", "markable_id", "]", ",", "\n", "markables_end", "[", "markable_id", "]", ",", "markables_MIN", "[", "markable_id", "]", ",", "\n", "markables_coref_tag", "[", "markable_id", "]", ",", "\n", "all_words", "[", "markables_start", "[", "markable_id", "]", ":", "\n", "markables_end", "[", "markable_id", "]", "+", "1", "]", ")", "\n", "\n", "if", "markables_cluster", "[", "markable_id", "]", "not", "in", "clusters", ":", "\n", "            ", "clusters", "[", "markables_cluster", "[", "markable_id", "]", "]", "=", "(", "\n", "[", "]", ",", "markables_coref_tag", "[", "markable_id", "]", ")", "\n", "", "clusters", "[", "markables_cluster", "[", "markable_id", "]", "]", "[", "0", "]", ".", "append", "(", "m", ")", "\n", "\n", "", "return", "clusters", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.arrau.reader.process_clusters": [[103, 124], ["clusters.items", "processed_clusters.append", "processed_non_referrings.append", "len"], "function", ["None"], ["", "def", "process_clusters", "(", "clusters", ",", "keep_singletons", ",", "keep_non_referring", ")", ":", "\n", "    ", "removed_non_referring", "=", "0", "\n", "removed_singletons", "=", "0", "\n", "processed_clusters", "=", "[", "]", "\n", "processed_non_referrings", "=", "[", "]", "\n", "\n", "for", "cluster_id", ",", "(", "cluster", ",", "ref_tag", ")", "in", "clusters", ".", "items", "(", ")", ":", "\n", "        ", "if", "ref_tag", "==", "'non_referring'", ":", "\n", "            ", "if", "keep_non_referring", ":", "\n", "                ", "processed_non_referrings", ".", "append", "(", "clusters", "[", "cluster_id", "]", "[", "0", "]", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                ", "removed_non_referring", "+=", "1", "\n", "", "continue", "\n", "", "if", "not", "keep_singletons", "and", "len", "(", "cluster", ")", "==", "1", ":", "\n", "            ", "removed_singletons", "+=", "1", "\n", "continue", "\n", "\n", "", "processed_clusters", ".", "append", "(", "clusters", "[", "cluster_id", "]", "[", "0", "]", ")", "\n", "\n", "", "return", "(", "processed_clusters", ",", "processed_non_referrings", ",", "\n", "removed_non_referring", ",", "removed_singletons", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.arrau.reader.get_coref_infos": [[126, 176], ["reader.get_all_docs", "reader.get_all_docs", "reader.get_doc_markables", "reader.get_doc_markables", "reader.process_clusters", "reader.process_clusters", "reader.get_markable_assignments", "reader.get_markable_assignments", "print", "print", "print"], "function", ["home.repos.pwc.inspect_result.apple_ml-cread.arrau.reader.get_all_docs", "home.repos.pwc.inspect_result.apple_ml-cread.arrau.reader.get_all_docs", "home.repos.pwc.inspect_result.apple_ml-cread.arrau.reader.get_doc_markables", "home.repos.pwc.inspect_result.apple_ml-cread.arrau.reader.get_doc_markables", "home.repos.pwc.inspect_result.apple_ml-cread.arrau.reader.process_clusters", "home.repos.pwc.inspect_result.apple_ml-cread.arrau.reader.process_clusters", "home.repos.pwc.inspect_result.apple_ml-cread.arrau.reader.get_markable_assignments", "home.repos.pwc.inspect_result.apple_ml-cread.arrau.reader.get_markable_assignments"], ["", "def", "get_coref_infos", "(", "key_directory", ",", "\n", "sys_directory", ",", "\n", "keep_singletons", ",", "\n", "keep_non_referring", ",", "\n", "use_MIN", ",", "\n", "print_debug", "=", "False", ")", ":", "\n", "\n", "    ", "key_docs", "=", "get_all_docs", "(", "key_directory", ")", "\n", "sys_docs", "=", "get_all_docs", "(", "sys_directory", ")", "\n", "\n", "doc_coref_infos", "=", "{", "}", "\n", "doc_non_referrig_infos", "=", "{", "}", "\n", "\n", "for", "doc", "in", "key_docs", ":", "\n", "\n", "        ", "if", "doc", "not", "in", "sys_docs", ":", "\n", "            ", "print", "(", "'The document '", ",", "doc", ",", "\n", "' does not exist in the system output.'", ")", "\n", "continue", "\n", "\n", "", "key_clusters", "=", "get_doc_markables", "(", "doc", ",", "key_docs", "[", "doc", "]", ",", "use_MIN", ")", "\n", "sys_clusters", "=", "get_doc_markables", "(", "doc", ",", "sys_docs", "[", "doc", "]", ",", "False", ")", "\n", "\n", "(", "key_clusters", ",", "key_non_referrings", ",", "key_removed_non_referring", ",", "\n", "key_removed_singletons", ")", "=", "process_clusters", "(", "\n", "key_clusters", ",", "keep_singletons", ",", "keep_non_referring", ")", "\n", "(", "sys_clusters", ",", "sys_non_referrings", ",", "sys_removed_non_referring", ",", "\n", "sys_removed_singletons", ")", "=", "process_clusters", "(", "\n", "sys_clusters", ",", "keep_singletons", ",", "keep_non_referring", ")", "\n", "\n", "sys_mention_key_cluster", "=", "get_markable_assignments", "(", "\n", "sys_clusters", ",", "key_clusters", ")", "\n", "key_mention_sys_cluster", "=", "get_markable_assignments", "(", "\n", "key_clusters", ",", "sys_clusters", ")", "\n", "\n", "doc_coref_infos", "[", "doc", "]", "=", "(", "key_clusters", ",", "sys_clusters", ",", "\n", "key_mention_sys_cluster", ",", "sys_mention_key_cluster", ")", "\n", "doc_non_referrig_infos", "[", "doc", "]", "=", "(", "key_non_referrings", ",", "sys_non_referrings", ")", "\n", "\n", "if", "print_debug", "and", "not", "keep_non_referring", ":", "\n", "            ", "print", "(", "'%s and %s non-referring markables are removed from the '", "\n", "'evaluations of the key and system files, respectively.'", "\n", "%", "(", "key_removed_non_referring", ",", "sys_removed_non_referring", ")", ")", "\n", "\n", "", "if", "print_debug", "and", "not", "keep_singletons", ":", "\n", "            ", "print", "(", "'%s and %s singletons are removed from the evaluations of '", "\n", "'the key and system files, respectively.'", "\n", "%", "(", "key_removed_singletons", ",", "sys_removed_singletons", ")", ")", "\n", "\n", "", "", "return", "doc_coref_infos", ",", "doc_non_referrig_infos", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.arrau.reader.get_markable_assignments": [[178, 193], ["enumerate"], "function", ["None"], ["", "def", "get_markable_assignments", "(", "inp_clusters", ",", "out_clusters", ")", ":", "\n", "    ", "markable_cluster_ids", "=", "{", "}", "\n", "out_dic", "=", "{", "}", "\n", "for", "cluster_id", ",", "cluster", "in", "enumerate", "(", "out_clusters", ")", ":", "\n", "        ", "for", "m", "in", "cluster", ":", "\n", "            ", "out_dic", "[", "m", "]", "=", "cluster_id", "\n", "\n", "", "", "for", "cluster", "in", "inp_clusters", ":", "\n", "        ", "for", "im", "in", "cluster", ":", "\n", "            ", "for", "om", "in", "out_dic", ":", "\n", "                ", "if", "im", "==", "om", ":", "\n", "                    ", "markable_cluster_ids", "[", "im", "]", "=", "out_dic", "[", "om", "]", "\n", "break", "\n", "\n", "", "", "", "", "return", "markable_cluster_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.arrau.reader.get_all_docs": [[195, 206], ["os.path.isfile", "path.endswith", "os.walk", "reader.get_doc_lines", "filename.endswith", "reader.get_doc_lines", "os.path.join", "path.rfind"], "function", ["home.repos.pwc.inspect_result.apple_ml-cread.conll.reader.get_doc_lines", "home.repos.pwc.inspect_result.apple_ml-cread.conll.reader.get_doc_lines"], ["", "def", "get_all_docs", "(", "path", ")", ":", "\n", "    ", "all_docs", "=", "{", "}", "\n", "if", "isfile", "(", "path", ")", ":", "\n", "        ", "if", "path", ".", "endswith", "(", "'.CONLL'", ")", ":", "\n", "            ", "all_docs", "[", "path", "[", "path", ".", "rfind", "(", "'/'", ")", "+", "1", ":", "]", "]", "=", "get_doc_lines", "(", "path", ")", "\n", "", "", "else", ":", "\n", "        ", "for", "root", ",", "_directories", ",", "filenames", "in", "walk", "(", "path", ")", ":", "\n", "            ", "for", "filename", "in", "filenames", ":", "\n", "                ", "if", "(", "filename", ".", "endswith", "(", "'.CONLL'", ")", ")", ":", "\n", "                    ", "all_docs", "[", "filename", "]", "=", "get_doc_lines", "(", "join", "(", "root", ",", "filename", ")", ")", "\n", "", "", "", "", "return", "all_docs", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.arrau.reader.get_doc_lines": [[208, 218], ["open", "line.startswith", "doc_lines.append"], "function", ["None"], ["", "def", "get_doc_lines", "(", "file_name", ")", ":", "\n", "    ", "doc_lines", "=", "[", "]", "\n", "\n", "with", "open", "(", "file_name", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "if", "line", ".", "startswith", "(", "\"TOKEN\"", ")", ":", "\n", "                ", "continue", "\n", "", "doc_lines", ".", "append", "(", "line", ")", "\n", "\n", "", "", "return", "doc_lines", "\n", "", ""]], "home.repos.pwc.inspect_result.apple_ml-cread.arrau.markable.Markable.__init__": [[2, 9], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "doc_name", ",", "start", ",", "end", ",", "MIN", ",", "is_referring", ",", "words", ")", ":", "\n", "        ", "self", ".", "doc_name", "=", "doc_name", "\n", "self", ".", "start", "=", "start", "\n", "self", ".", "end", "=", "end", "\n", "self", ".", "MIN", "=", "MIN", "\n", "self", ".", "is_referring", "=", "is_referring", "\n", "self", ".", "words", "=", "words", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.arrau.markable.Markable.__eq__": [[10, 30], ["isinstance"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "isinstance", "(", "other", ",", "self", ".", "__class__", ")", ":", "\n", "# MIN is only set for the key markables", "\n", "            ", "if", "self", ".", "MIN", ":", "\n", "                ", "return", "(", "self", ".", "doc_name", "==", "other", ".", "doc_name", "\n", "and", "other", ".", "start", ">=", "self", ".", "start", "\n", "and", "other", ".", "start", "<=", "self", ".", "MIN", "[", "0", "]", "\n", "and", "other", ".", "end", "<=", "self", ".", "end", "\n", "and", "other", ".", "end", ">=", "self", ".", "MIN", "[", "1", "]", ")", "\n", "", "elif", "other", ".", "MIN", ":", "\n", "                ", "return", "(", "self", ".", "doc_name", "==", "other", ".", "doc_name", "\n", "and", "self", ".", "start", ">=", "other", ".", "start", "\n", "and", "self", ".", "start", "<=", "other", ".", "MIN", "[", "0", "]", "\n", "and", "self", ".", "end", "<=", "other", ".", "end", "\n", "and", "self", ".", "end", ">=", "other", ".", "MIN", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "return", "(", "self", ".", "doc_name", "==", "other", ".", "doc_name", "\n", "and", "self", ".", "start", "==", "other", ".", "start", "\n", "and", "self", ".", "end", "==", "other", ".", "end", ")", "\n", "", "", "return", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.arrau.markable.Markable.__neq__": [[31, 35], ["isinstance", "markable.Markable.__eq__"], "methods", ["home.repos.pwc.inspect_result.apple_ml-cread.conll.mention.Mention.__eq__"], ["", "def", "__neq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "isinstance", "(", "other", ",", "self", ".", "__class__", ")", ":", "\n", "            ", "return", "self", ".", "__eq__", "(", "other", ")", "\n", "", "return", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.arrau.markable.Markable.__hash__": [[36, 38], ["hash", "frozenset"], "methods", ["None"], ["", "def", "__hash__", "(", "self", ")", ":", "\n", "        ", "return", "hash", "(", "frozenset", "(", "(", "self", ".", "start", ",", "self", ".", "end", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.arrau.markable.Markable.__str__": [[39, 45], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "(", "'DOC: %s SPAN: (%d, %d) String: %r MIN: %s Referring tag: %s'", "\n", "%", "(", "\n", "self", ".", "doc_name", ",", "self", ".", "start", ",", "self", ".", "end", ",", "' '", ".", "join", "(", "self", ".", "words", ")", ",", "\n", "'(%d, %d)'", "%", "self", ".", "MIN", "if", "self", ".", "MIN", "else", "''", ",", "\n", "self", ".", "is_referring", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.apple_ml-cread.eval.evaluator.Evaluator.__init__": [[40, 54], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "metric", ",", "beta", "=", "1", ",", "keep_aggregated_values", "=", "False", ")", ":", "\n", "        ", "self", ".", "p_num", "=", "0", "\n", "self", ".", "p_den", "=", "0", "\n", "self", ".", "r_num", "=", "0", "\n", "self", ".", "r_den", "=", "0", "\n", "self", ".", "metric", "=", "metric", "\n", "self", ".", "beta", "=", "beta", "\n", "self", ".", "keep_aggregated_values", "=", "keep_aggregated_values", "\n", "\n", "if", "keep_aggregated_values", ":", "\n", "            ", "self", ".", "aggregated_p_num", "=", "[", "]", "\n", "self", ".", "aggregated_p_den", "=", "[", "]", "\n", "self", ".", "aggregated_r_num", "=", "[", "]", "\n", "self", ".", "aggregated_r_den", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.eval.evaluator.Evaluator.update": [[55, 79], ["evaluator.Evaluator.metric", "evaluator.Evaluator.aggregated_p_num.append", "evaluator.Evaluator.aggregated_p_den.append", "evaluator.Evaluator.aggregated_r_num.append", "evaluator.Evaluator.aggregated_r_den.append", "evaluator.Evaluator.metric", "evaluator.Evaluator.metric", "evaluator.Evaluator.metric", "evaluator.Evaluator.metric"], "methods", ["None"], ["", "", "def", "update", "(", "self", ",", "coref_info", ")", ":", "\n", "        ", "(", "key_clusters", ",", "sys_clusters", ",", "key_mention_sys_cluster", ",", "\n", "sys_mention_key_cluster", ")", "=", "coref_info", "\n", "\n", "if", "self", ".", "metric", "==", "ceafe", "or", "self", ".", "metric", "==", "ceafm", ":", "\n", "            ", "pn", ",", "pd", ",", "rn", ",", "rd", "=", "self", ".", "metric", "(", "sys_clusters", ",", "key_clusters", ")", "\n", "", "elif", "self", ".", "metric", "==", "lea", ":", "\n", "            ", "pn", ",", "pd", "=", "self", ".", "metric", "(", "sys_clusters", ",", "key_clusters", ",", "\n", "sys_mention_key_cluster", ")", "\n", "rn", ",", "rd", "=", "self", ".", "metric", "(", "key_clusters", ",", "sys_clusters", ",", "\n", "key_mention_sys_cluster", ")", "\n", "", "else", ":", "\n", "            ", "pn", ",", "pd", "=", "self", ".", "metric", "(", "sys_clusters", ",", "sys_mention_key_cluster", ")", "\n", "rn", ",", "rd", "=", "self", ".", "metric", "(", "key_clusters", ",", "key_mention_sys_cluster", ")", "\n", "", "self", ".", "p_num", "+=", "pn", "\n", "self", ".", "p_den", "+=", "pd", "\n", "self", ".", "r_num", "+=", "rn", "\n", "self", ".", "r_den", "+=", "rd", "\n", "\n", "if", "self", ".", "keep_aggregated_values", ":", "\n", "            ", "self", ".", "aggregated_p_num", ".", "append", "(", "pn", ")", "\n", "self", ".", "aggregated_p_den", ".", "append", "(", "pd", ")", "\n", "self", ".", "aggregated_r_num", ".", "append", "(", "rn", ")", "\n", "self", ".", "aggregated_r_den", ".", "append", "(", "rd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.eval.evaluator.Evaluator.get_f1": [[80, 86], ["evaluator.f1"], "methods", ["home.repos.pwc.inspect_result.apple_ml-cread.eval.evaluator.f1"], ["", "", "def", "get_f1", "(", "self", ")", ":", "\n", "        ", "return", "f1", "(", "self", ".", "p_num", ",", "\n", "self", ".", "p_den", ",", "\n", "self", ".", "r_num", ",", "\n", "self", ".", "r_den", ",", "\n", "beta", "=", "self", ".", "beta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.eval.evaluator.Evaluator.get_recall": [[87, 89], ["float"], "methods", ["None"], ["", "def", "get_recall", "(", "self", ")", ":", "\n", "        ", "return", "0", "if", "self", ".", "r_num", "==", "0", "else", "self", ".", "r_num", "/", "float", "(", "self", ".", "r_den", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.eval.evaluator.Evaluator.get_precision": [[90, 92], ["float"], "methods", ["None"], ["", "def", "get_precision", "(", "self", ")", ":", "\n", "        ", "return", "0", "if", "self", ".", "p_num", "==", "0", "else", "self", ".", "p_num", "/", "float", "(", "self", ".", "p_den", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.eval.evaluator.Evaluator.get_prf": [[93, 95], ["evaluator.Evaluator.get_precision", "evaluator.Evaluator.get_recall", "evaluator.Evaluator.get_f1"], "methods", ["home.repos.pwc.inspect_result.apple_ml-cread.eval.evaluator.Evaluator.get_precision", "home.repos.pwc.inspect_result.apple_ml-cread.eval.evaluator.Evaluator.get_recall", "home.repos.pwc.inspect_result.apple_ml-cread.eval.evaluator.Evaluator.get_f1"], ["", "def", "get_prf", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "get_precision", "(", ")", ",", "self", ".", "get_recall", "(", ")", ",", "self", ".", "get_f1", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.eval.evaluator.Evaluator.get_counts": [[96, 98], ["None"], "methods", ["None"], ["", "def", "get_counts", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "p_num", ",", "self", ".", "p_den", ",", "self", ".", "r_num", ",", "self", ".", "r_den", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.eval.evaluator.Evaluator.get_aggregated_values": [[99, 102], ["None"], "methods", ["None"], ["", "def", "get_aggregated_values", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "aggregated_p_num", ",", "self", ".", "aggregated_p_den", ",", "\n", "self", ".", "aggregated_r_num", ",", "self", ".", "aggregated_r_den", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.eval.evaluator.f1": [[9, 14], ["float", "float"], "function", ["None"], ["def", "f1", "(", "p_num", ",", "p_den", ",", "r_num", ",", "r_den", ",", "beta", "=", "1", ")", ":", "\n", "    ", "p", "=", "0", "if", "p_den", "==", "0", "else", "p_num", "/", "float", "(", "p_den", ")", "\n", "r", "=", "0", "if", "r_den", "==", "0", "else", "r_num", "/", "float", "(", "r_den", ")", "\n", "return", "(", "0", "if", "p", "+", "r", "==", "0", "\n", "else", "(", "1", "+", "beta", "*", "beta", ")", "*", "p", "*", "r", "/", "(", "beta", "*", "beta", "*", "p", "+", "r", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.eval.evaluator.evaluate_non_referrings": [[16, 37], ["float", "float"], "function", ["None"], ["", "def", "evaluate_non_referrings", "(", "doc_non_referring_infos", ")", ":", "\n", "    ", "tp", ",", "_tn", ",", "fp", ",", "fn", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "\n", "for", "doc_id", "in", "doc_non_referring_infos", ":", "\n", "        ", "key_non_referrings", ",", "sys_non_referrings", "=", "doc_non_referring_infos", "[", "\n", "doc_id", "]", "\n", "for", "m", "in", "key_non_referrings", ":", "\n", "            ", "if", "m", "in", "sys_non_referrings", ":", "\n", "                ", "tp", "+=", "1", "\n", "", "else", ":", "\n", "                ", "fn", "+=", "1", "\n", "", "", "for", "m", "in", "sys_non_referrings", ":", "\n", "            ", "if", "m", "not", "in", "key_non_referrings", ":", "\n", "                ", "fp", "+=", "1", "\n", "\n", "", "", "", "recall", "=", "tp", "/", "float", "(", "tp", "+", "fn", ")", "if", "(", "tp", "+", "fn", ")", ">", "0", "else", "0", "\n", "precision", "=", "tp", "/", "float", "(", "tp", "+", "fp", ")", "if", "(", "tp", "+", "fp", ")", ">", "0", "else", "0", "\n", "f1", "=", "(", "2", "*", "recall", "*", "precision", "/", "(", "recall", "+", "precision", ")", "\n", "if", "(", "recall", "+", "precision", ")", ">", "0", "else", "0", ")", "\n", "\n", "return", "recall", ",", "precision", ",", "f1", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.eval.evaluator.evaluate_documents": [[104, 110], ["evaluator.Evaluator", "evaluator.Evaluator.update", "evaluator.Evaluator.get_recall", "evaluator.Evaluator.get_precision", "evaluator.Evaluator.get_f1"], "function", ["home.repos.pwc.inspect_result.apple_ml-cread.eval.evaluator.Evaluator.update", "home.repos.pwc.inspect_result.apple_ml-cread.eval.evaluator.Evaluator.get_recall", "home.repos.pwc.inspect_result.apple_ml-cread.eval.evaluator.Evaluator.get_precision", "home.repos.pwc.inspect_result.apple_ml-cread.eval.evaluator.Evaluator.get_f1"], ["", "", "def", "evaluate_documents", "(", "doc_coref_infos", ",", "metric", ",", "beta", "=", "1", ")", ":", "\n", "    ", "evaluator", "=", "Evaluator", "(", "metric", ",", "beta", "=", "beta", ")", "\n", "for", "doc_id", "in", "doc_coref_infos", ":", "\n", "        ", "evaluator", ".", "update", "(", "doc_coref_infos", "[", "doc_id", "]", ")", "\n", "", "return", "(", "evaluator", ".", "get_recall", "(", ")", ",", "evaluator", ".", "get_precision", "(", ")", ",", "\n", "evaluator", ".", "get_f1", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.eval.evaluator.get_document_evaluations": [[112, 117], ["evaluator.Evaluator", "evaluator.Evaluator.get_aggregated_values", "evaluator.Evaluator.update"], "function", ["home.repos.pwc.inspect_result.apple_ml-cread.eval.evaluator.Evaluator.get_aggregated_values", "home.repos.pwc.inspect_result.apple_ml-cread.eval.evaluator.Evaluator.update"], ["", "def", "get_document_evaluations", "(", "doc_coref_infos", ",", "metric", ",", "beta", "=", "1", ")", ":", "\n", "    ", "evaluator", "=", "Evaluator", "(", "metric", ",", "beta", "=", "beta", ",", "keep_aggregated_values", "=", "True", ")", "\n", "for", "doc_id", "in", "doc_coref_infos", ":", "\n", "        ", "evaluator", ".", "update", "(", "doc_coref_infos", "[", "doc_id", "]", ")", "\n", "", "return", "evaluator", ".", "get_aggregated_values", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.eval.evaluator.mentions": [[119, 123], ["set", "set", "len", "len", "mention_to_gold.keys"], "function", ["None"], ["", "def", "mentions", "(", "clusters", ",", "mention_to_gold", ")", ":", "\n", "    ", "setofmentions", "=", "set", "(", "mention", "for", "cluster", "in", "clusters", "for", "mention", "in", "cluster", ")", "\n", "correct", "=", "setofmentions", "&", "set", "(", "mention_to_gold", ".", "keys", "(", ")", ")", "\n", "return", "len", "(", "correct", ")", ",", "len", "(", "setofmentions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.eval.evaluator.b_cubed": [[125, 141], ["collections.Counter", "len", "float", "len"], "function", ["None"], ["", "def", "b_cubed", "(", "clusters", ",", "mention_to_gold", ")", ":", "\n", "    ", "num", ",", "den", "=", "0", ",", "0", "\n", "\n", "for", "c", "in", "clusters", ":", "\n", "        ", "gold_counts", "=", "Counter", "(", ")", "\n", "correct", "=", "0", "\n", "for", "m", "in", "c", ":", "\n", "            ", "if", "m", "in", "mention_to_gold", ":", "\n", "                ", "gold_counts", "[", "mention_to_gold", "[", "m", "]", "]", "+=", "1", "\n", "", "", "for", "c2", "in", "gold_counts", ":", "\n", "            ", "correct", "+=", "gold_counts", "[", "c2", "]", "*", "gold_counts", "[", "c2", "]", "\n", "\n", "", "num", "+=", "correct", "/", "float", "(", "len", "(", "c", ")", ")", "\n", "den", "+=", "len", "(", "c", ")", "\n", "\n", "", "return", "num", ",", "den", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.eval.evaluator.muc": [[143, 156], ["len", "set", "len", "len", "set.add"], "function", ["None"], ["", "def", "muc", "(", "clusters", ",", "mention_to_gold", ")", ":", "\n", "    ", "tp", ",", "p", "=", "0", ",", "0", "\n", "for", "c", "in", "clusters", ":", "\n", "        ", "p", "+=", "len", "(", "c", ")", "-", "1", "\n", "tp", "+=", "len", "(", "c", ")", "\n", "linked", "=", "set", "(", ")", "\n", "for", "m", "in", "c", ":", "\n", "            ", "if", "m", "in", "mention_to_gold", ":", "\n", "                ", "linked", ".", "add", "(", "mention_to_gold", "[", "m", "]", ")", "\n", "", "else", ":", "\n", "                ", "tp", "-=", "1", "\n", "", "", "tp", "-=", "len", "(", "linked", ")", "\n", "", "return", "tp", ",", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.eval.evaluator.phi4": [[158, 160], ["float", "len", "len", "len"], "function", ["None"], ["", "def", "phi4", "(", "c1", ",", "c2", ")", ":", "\n", "    ", "return", "2", "*", "len", "(", "[", "m", "for", "m", "in", "c1", "if", "m", "in", "c2", "]", ")", "/", "float", "(", "len", "(", "c1", ")", "+", "len", "(", "c2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.eval.evaluator.phi3": [[161, 163], ["len"], "function", ["None"], ["", "def", "phi3", "(", "c1", ",", "c2", ")", ":", "\n", "    ", "return", "len", "(", "[", "m", "for", "m", "in", "c1", "if", "m", "in", "c2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.eval.evaluator.ceafe": [[164, 173], ["numpy.zeros", "range", "scipy.optimize.linear_sum_assignment", "scores[].sum", "len", "range", "len", "len", "len", "len", "len", "evaluator.phi4"], "function", ["home.repos.pwc.inspect_result.apple_ml-cread.eval.evaluator.phi4"], ["", "def", "ceafe", "(", "clusters", ",", "gold_clusters", ")", ":", "\n", "    ", "clusters", "=", "[", "c", "for", "c", "in", "clusters", "]", "\n", "scores", "=", "np", ".", "zeros", "(", "(", "len", "(", "gold_clusters", ")", ",", "len", "(", "clusters", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "gold_clusters", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "clusters", ")", ")", ":", "\n", "            ", "scores", "[", "i", ",", "j", "]", "=", "phi4", "(", "gold_clusters", "[", "i", "]", ",", "clusters", "[", "j", "]", ")", "\n", "", "", "row_ind", ",", "col_ind", "=", "linear_sum_assignment", "(", "-", "scores", ")", "\n", "similarity", "=", "scores", "[", "row_ind", ",", "col_ind", "]", ".", "sum", "(", ")", "\n", "return", "similarity", ",", "len", "(", "clusters", ")", ",", "similarity", ",", "len", "(", "gold_clusters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.eval.evaluator.ceafm": [[174, 183], ["numpy.zeros", "range", "scipy.optimize.linear_sum_assignment", "scores[].sum", "len", "range", "len", "len", "len", "len", "len", "evaluator.phi3"], "function", ["home.repos.pwc.inspect_result.apple_ml-cread.eval.evaluator.phi3"], ["", "def", "ceafm", "(", "clusters", ",", "gold_clusters", ")", ":", "\n", "    ", "clusters", "=", "[", "c", "for", "c", "in", "clusters", "]", "\n", "scores", "=", "np", ".", "zeros", "(", "(", "len", "(", "gold_clusters", ")", ",", "len", "(", "clusters", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "gold_clusters", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "clusters", ")", ")", ":", "\n", "            ", "scores", "[", "i", ",", "j", "]", "=", "phi3", "(", "gold_clusters", "[", "i", "]", ",", "clusters", "[", "j", "]", ")", "\n", "", "", "row_ind", ",", "col_ind", "=", "linear_sum_assignment", "(", "-", "scores", ")", "\n", "similarity", "=", "scores", "[", "row_ind", ",", "col_ind", "]", ".", "sum", "(", ")", "\n", "return", "similarity", ",", "len", "(", "clusters", ")", ",", "similarity", ",", "len", "(", "gold_clusters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.eval.evaluator.lea": [[185, 218], ["len", "len", "enumerate", "float", "len", "len", "len", "len"], "function", ["None"], ["", "def", "lea", "(", "input_clusters", ",", "output_clusters", ",", "mention_to_gold", ")", ":", "\n", "    ", "num", ",", "den", "=", "0", ",", "0", "\n", "\n", "for", "c", "in", "input_clusters", ":", "\n", "        ", "if", "len", "(", "c", ")", "==", "1", ":", "\n", "            ", "all_links", "=", "1", "\n", "if", "c", "[", "0", "]", "in", "mention_to_gold", "and", "len", "(", "\n", "output_clusters", "[", "mention_to_gold", "[", "c", "[", "0", "]", "]", "]", ")", "==", "1", ":", "\n", "                ", "common_links", "=", "1", "\n", "", "else", ":", "\n", "                ", "common_links", "=", "0", "\n", "", "", "else", ":", "\n", "            ", "common_links", "=", "0", "\n", "all_links", "=", "len", "(", "c", ")", "*", "(", "len", "(", "c", ")", "-", "1", ")", "/", "2.0", "\n", "for", "i", ",", "m", "in", "enumerate", "(", "c", ")", ":", "\n", "                ", "if", "m", "in", "mention_to_gold", ":", "\n", "                    ", "for", "m2", "in", "c", "[", "i", "+", "1", ":", "]", ":", "\n", "                        ", "if", "m2", "in", "mention_to_gold", "and", "mention_to_gold", "[", "\n", "m", "]", "==", "mention_to_gold", "[", "m2", "]", ":", "\n", "                            ", "common_links", "+=", "1", "\n", "# else:", "\n", "#    print('!! ', m2, '--', m2.get_span(), ' ',", "\n", "#           m2.min_spans, ' ', mention_to_gold[m], ' ',", "\n", "#           mention_to_gold[m2], ' ' ,", "\n", "#           [str(s) for s in output_clusters[", "\n", "#               mention_to_gold[m]]], ' -- ',", "\n", "#           [str(s) for s in output_clusters[", "\n", "#               mention_to_gold[m2]]])", "\n", "\n", "", "", "", "", "", "num", "+=", "len", "(", "c", ")", "*", "common_links", "/", "float", "(", "all_links", ")", "\n", "den", "+=", "len", "(", "c", ")", "\n", "\n", "", "return", "num", ",", "den", "\n", "", ""]], "home.repos.pwc.inspect_result.apple_ml-cread.conll.mention.Mention.__init__": [[5, 14], ["set"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "doc_name", ",", "sent_num", ",", "start", ",", "end", ",", "words", ")", ":", "\n", "        ", "self", ".", "doc_name", "=", "doc_name", "\n", "self", ".", "sent_num", "=", "sent_num", "\n", "self", ".", "start", "=", "start", "\n", "self", ".", "end", "=", "end", "\n", "self", ".", "words", "=", "words", "\n", "self", ".", "gold_parse_is_set", "=", "False", "\n", "self", ".", "gold_parse", "=", "None", "\n", "self", ".", "min_spans", "=", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.conll.mention.Mention.__eq__": [[16, 25], ["isinstance"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "isinstance", "(", "other", ",", "self", ".", "__class__", ")", ":", "\n", "            ", "if", "self", ".", "min_spans", ":", "\n", "                ", "return", "self", ".", "doc_name", "==", "other", ".", "doc_name", "and", "self", ".", "sent_num", "==", "other", ".", "sent_num", "and", "self", ".", "min_spans", "==", "other", ".", "min_spans", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "doc_name", "==", "other", ".", "doc_name", "and", "self", ".", "sent_num", "==", "other", ".", "sent_num", "and", "self", ".", "start", "==", "other", ".", "start", "and", "self", ".", "end", "==", "other", ".", "end", "\n", "", "", "return", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.conll.mention.Mention.__neq__": [[26, 31], ["isinstance", "mention.Mention.__eq__"], "methods", ["home.repos.pwc.inspect_result.apple_ml-cread.conll.mention.Mention.__eq__"], ["", "def", "__neq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "isinstance", "(", "other", ",", "self", ".", "__class__", ")", ":", "\n", "            ", "return", "self", ".", "__eq__", "(", "other", ")", "\n", "\n", "", "return", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.conll.mention.Mention.__str__": [[32, 36], ["str", "str", "str", "str", "str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "\"DOC: \"", "+", "self", ".", "doc_name", "+", "\", sentence number: \"", "+", "str", "(", "self", ".", "sent_num", ")", "\n", "+", "\", (\"", "+", "str", "(", "self", ".", "start", ")", "+", "\", \"", "+", "str", "(", "self", ".", "end", ")", "+", "\")\"", "+", "\n", "(", "str", "(", "self", ".", "gold_parse", ")", "if", "self", ".", "gold_parse", "else", "\"\"", ")", "+", "' '", "+", "' '", ".", "join", "(", "self", ".", "words", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.conll.mention.Mention.__hash__": [[37, 42], ["hash", "hash", "frozenset", "frozenset"], "methods", ["None"], ["", "def", "__hash__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "min_spans", ":", "\n", "            ", "return", "self", ".", "sent_num", "*", "1000000", "+", "hash", "(", "frozenset", "(", "self", ".", "min_spans", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "sent_num", "*", "1000000", "+", "hash", "(", "frozenset", "(", "(", "self", ".", "start", ",", "self", ".", "end", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.conll.mention.Mention.get_span": [[43, 49], ["sorted"], "methods", ["None"], ["", "", "def", "get_span", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "min_spans", ":", "\n", "            ", "ordered_words", "=", "[", "e", "[", "0", "]", "for", "e", "in", "sorted", "(", "self", ".", "min_spans", ",", "key", "=", "lambda", "e", ":", "e", "[", "1", "]", ")", "]", "\n", "return", "' '", ".", "join", "(", "ordered_words", ")", "\n", "", "else", ":", "\n", "            ", "return", "' '", ".", "join", "(", "[", "w", "[", "1", "]", "for", "w", "in", "self", ".", "words", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.conll.mention.Mention.set_gold_parse": [[51, 54], ["None"], "methods", ["None"], ["", "", "def", "set_gold_parse", "(", "self", ",", "tree", ")", ":", "\n", "        ", "self", ".", "gold_parse", "=", "tree", "\n", "self", ".", "gold_parse_is_set", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.conll.mention.Mention.are_nested": [[55, 72], ["isinstance", "mention.Mention.__eq__"], "methods", ["home.repos.pwc.inspect_result.apple_ml-cread.conll.mention.Mention.__eq__"], ["", "def", "are_nested", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "isinstance", "(", "other", ",", "self", ".", "__class__", ")", ":", "\n", "            ", "if", "self", ".", "__eq__", "(", "other", ")", ":", "\n", "                ", "return", "-", "1", "\n", "", "if", "True", ":", "\n", "#self is nested in other", "\n", "                ", "if", "self", ".", "sent_num", "==", "other", ".", "sent_num", "and", "self", ".", "start", ">=", "other", ".", "start", "and", "self", ".", "end", "<=", "other", ".", "end", ":", "\n", "                    ", "return", "0", "\n", "#other is nested in self", "\n", "", "elif", "self", ".", "sent_num", "==", "other", ".", "sent_num", "and", "other", ".", "start", ">=", "self", ".", "start", "and", "other", ".", "end", "<=", "self", ".", "end", ":", "\n", "                    ", "return", "1", "\n", "", "else", ":", "\n", "                    ", "return", "-", "1", "\n", "\n", "", "", "", "return", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.conll.mention.Mention.get_min_span_no_valid_tag": [[79, 107], ["float", "queue.pop", "mention.Mention.is_a_valid_terminal_node", "mention.Mention.min_spans.add", "min", "queue.append"], "methods", ["home.repos.pwc.inspect_result.apple_ml-cread.conll.mention.Mention.is_a_valid_terminal_node"], ["def", "get_min_span_no_valid_tag", "(", "self", ",", "root", ")", ":", "\n", "        ", "if", "not", "root", ":", "\n", "            ", "return", "\n", "\n", "", "terminal_shortest_depth", "=", "float", "(", "'inf'", ")", "\n", "queue", "=", "[", "(", "root", ",", "0", ")", "]", "\n", "\n", "accepted_tags", "=", "None", "\n", "\n", "while", "queue", ":", "\n", "            ", "node", ",", "depth", "=", "queue", ".", "pop", "(", "0", ")", "\n", "\n", "if", "not", "accepted_tags", ":", "\n", "                ", "if", "node", ".", "tag", "[", "0", ":", "2", "]", "in", "[", "'NP'", ",", "'NM'", "]", ":", "\n", "                    ", "accepted_tags", "=", "[", "'NP'", ",", "'NM'", ",", "'QP'", ",", "'NX'", "]", "\n", "", "elif", "node", ".", "tag", "[", "0", ":", "2", "]", "==", "'VP'", ":", "\n", "                    ", "accepted_tags", "=", "[", "'VP'", "]", "\n", "\n", "", "", "if", "node", ".", "isTerminal", "and", "depth", "<=", "terminal_shortest_depth", ":", "\n", "                ", "if", "self", ".", "is_a_valid_terminal_node", "(", "node", ".", "tag", ",", "node", ".", "pos", ")", ":", "\n", "                    ", "self", ".", "min_spans", ".", "add", "(", "(", "node", ".", "tag", ",", "node", ".", "index", ")", ")", "\n", "terminal_shortest_depth", "=", "min", "(", "terminal_shortest_depth", ",", "depth", ")", "\n", "\n", "", "", "elif", "(", "not", "self", ".", "min_spans", "or", "depth", "<", "terminal_shortest_depth", ")", "and", "node", ".", "children", "and", "(", "depth", "==", "0", "or", "not", "accepted_tags", "or", "node", ".", "tag", "[", "0", ":", "2", "]", "in", "accepted_tags", ")", ":", "\n", "                ", "for", "child", "in", "node", ".", "children", ":", "\n", "                    ", "if", "not", "child", ".", "isTerminal", "or", "(", "accepted_tags", "and", "node", ".", "tag", "[", "0", ":", "2", "]", "in", "accepted_tags", ")", ":", "\n", "                        ", "queue", ".", "append", "(", "(", "child", ",", "depth", "+", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.conll.mention.Mention.is_a_valid_terminal_node": [[112, 125], ["len", "enumerate", "tag.split", "tag.split", "mention.Mention.is_a_valid_terminal_node", "any", "any", "c.isalpha", "c.isdigit"], "methods", ["home.repos.pwc.inspect_result.apple_ml-cread.conll.mention.Mention.is_a_valid_terminal_node"], ["def", "is_a_valid_terminal_node", "(", "self", ",", "tag", ",", "pos", ")", ":", "\n", "        ", "if", "len", "(", "tag", ".", "split", "(", ")", ")", "==", "1", ":", "\n", "            ", "if", "(", "any", "(", "c", ".", "isalpha", "(", ")", "for", "c", "in", "tag", ")", "or", "any", "(", "c", ".", "isdigit", "(", ")", "for", "c", "in", "tag", ")", "or", "tag", "==", "'%'", ")", "and", "(", "tag", "!=", "'-LRB-'", "and", "tag", "!=", "'-RRB-'", ")", "and", "pos", "[", "0", "]", "!=", "'CC'", "and", "pos", "[", "0", "]", "!=", "'DT'", "and", "pos", "[", "0", "]", "!=", "'IN'", ":", "# not in conjunctions:", "\n", "                ", "return", "True", "\n", "", "return", "False", "\n", "", "else", ":", "# for exceptions like \", and\"", "\n", "            ", "for", "i", ",", "tt", "in", "enumerate", "(", "tag", ".", "split", "(", ")", ")", ":", "\n", "                ", "if", "self", ".", "is_a_valid_terminal_node", "(", "tt", ",", "[", "pos", "[", "i", "]", "]", ")", ":", "\n", "                    ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.conll.mention.Mention.get_valid_node_min_span": [[127, 147], ["float", "queue.pop", "mention.Mention.is_a_valid_terminal_node", "min_spans.add", "min", "queue.append"], "methods", ["home.repos.pwc.inspect_result.apple_ml-cread.conll.mention.Mention.is_a_valid_terminal_node"], ["", "", "def", "get_valid_node_min_span", "(", "self", ",", "root", ",", "valid_tags", ",", "min_spans", ")", ":", "\n", "        ", "if", "not", "root", ":", "\n", "            ", "return", "\n", "\n", "", "terminal_shortest_depth", "=", "float", "(", "'inf'", ")", "\n", "queue", "=", "[", "(", "root", ",", "0", ")", "]", "\n", "\n", "while", "queue", ":", "\n", "            ", "node", ",", "depth", "=", "queue", ".", "pop", "(", "0", ")", "\n", "\n", "if", "node", ".", "isTerminal", "and", "depth", "<=", "terminal_shortest_depth", ":", "\n", "                ", "if", "self", ".", "is_a_valid_terminal_node", "(", "node", ".", "tag", ",", "node", ".", "pos", ")", ":", "\n", "                    ", "min_spans", ".", "add", "(", "(", "node", ".", "tag", ",", "node", ".", "index", ")", ")", "\n", "terminal_shortest_depth", "=", "min", "(", "terminal_shortest_depth", ",", "depth", ")", "\n", "\n", "", "", "elif", "(", "not", "min_spans", "or", "depth", "<", "terminal_shortest_depth", ")", "and", "node", ".", "children", "and", "(", "depth", "==", "0", "or", "not", "valid_tags", "or", "node", ".", "tag", "[", "0", ":", "2", "]", "in", "valid_tags", ")", ":", "\n", "                ", "for", "child", "in", "node", ".", "children", ":", "\n", "                    ", "if", "not", "child", ".", "isTerminal", "or", "(", "valid_tags", "and", "node", ".", "tag", "[", "0", ":", "2", "]", "in", "valid_tags", ")", ":", "\n", "                        ", "queue", ".", "append", "(", "(", "child", ",", "depth", "+", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.conll.mention.Mention.get_top_level_phrases": [[149, 168], ["float", "set", "mention.Mention.is_a_valid_terminal_node", "mention.Mention.min_spans.add", "mention.Mention.is_a_valid_terminal_node", "mention.Mention.min_spans.add", "top_level_valid_phrases.append"], "methods", ["home.repos.pwc.inspect_result.apple_ml-cread.conll.mention.Mention.is_a_valid_terminal_node", "home.repos.pwc.inspect_result.apple_ml-cread.conll.mention.Mention.is_a_valid_terminal_node"], ["", "", "", "", "", "def", "get_top_level_phrases", "(", "self", ",", "root", ",", "valid_tags", ")", ":", "\n", "        ", "terminal_shortest_depth", "=", "float", "(", "'inf'", ")", "\n", "top_level_valid_phrases", "=", "[", "]", "\n", "min_spans", "=", "set", "(", ")", "\n", "\n", "if", "root", "and", "root", ".", "isTerminal", "and", "self", ".", "is_a_valid_terminal_node", "(", "root", ".", "tag", ",", "root", ".", "pos", ")", ":", "\n", "            ", "self", ".", "min_spans", ".", "add", "(", "(", "root", ".", "tag", ",", "root", ".", "index", ")", ")", "\n", "\n", "", "elif", "root", "and", "root", ".", "children", ":", "\n", "            ", "for", "node", "in", "root", ".", "children", ":", "\n", "                ", "if", "node", ":", "\n", "                    ", "if", "node", ".", "isTerminal", "and", "self", ".", "is_a_valid_terminal_node", "(", "node", ".", "tag", ",", "node", ".", "pos", ")", ":", "\n", "                        ", "self", ".", "min_spans", ".", "add", "(", "(", "node", ".", "tag", ",", "node", ".", "index", ")", ")", "\n", "", "", "", "if", "not", "self", ".", "min_spans", ":", "\n", "                ", "for", "node", "in", "root", ".", "children", ":", "\n", "                    ", "if", "node", ".", "children", "and", "node", ".", "tag", "[", "0", ":", "2", "]", "in", "valid_tags", ":", "\n", "                        ", "top_level_valid_phrases", ".", "append", "(", "node", ")", "\n", "\n", "", "", "", "", "return", "top_level_valid_phrases", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.conll.mention.Mention.get_valid_tags": [[169, 191], ["all_tags.append"], "methods", ["None"], ["", "def", "get_valid_tags", "(", "self", ",", "root", ")", ":", "\n", "        ", "valid_tags", "=", "None", "\n", "NP_tags", "=", "[", "'NP'", ",", "'NM'", ",", "'QP'", ",", "'NX'", "]", "\n", "VP_tags", "=", "[", "'VP'", "]", "\n", "\n", "if", "root", ".", "tag", "[", "0", ":", "2", "]", "==", "'VP'", ":", "\n", "            ", "valid_tags", "=", "VP_tags", "\n", "", "elif", "root", ".", "tag", "[", "0", ":", "2", "]", "in", "[", "'NP'", ",", "'NM'", "]", ":", "\n", "            ", "valid_tags", "=", "NP_tags", "\n", "", "else", ":", "\n", "            ", "if", "root", ".", "children", ":", "## If none of the first level nodes are either NP or VP, examines their children for valid mention tags", "\n", "                ", "all_tags", "=", "[", "]", "\n", "for", "node", "in", "root", ".", "children", ":", "\n", "                    ", "all_tags", ".", "append", "(", "node", ".", "tag", "[", "0", ":", "2", "]", ")", "\n", "", "if", "'NP'", "in", "all_tags", "or", "'NM'", "in", "all_tags", ":", "\n", "                    ", "valid_tags", "=", "NP_tags", "\n", "", "elif", "'VP'", "in", "all_tags", ":", "\n", "                    ", "valid_tags", "=", "VP_tags", "\n", "", "else", ":", "\n", "                    ", "valid_tags", "=", "NP_tags", "\n", "\n", "", "", "", "return", "valid_tags", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.conll.mention.Mention.set_min_span": [[193, 231], ["float", "mention.Mention.get_valid_tags", "mention.Mention.get_top_level_phrases", "print", "mention.Mention.get_min_span_no_valid_tag", "len", "mention.Mention.min_spans.update", "mention.Mention.get_valid_node_min_span", "enumerate"], "methods", ["home.repos.pwc.inspect_result.apple_ml-cread.conll.mention.Mention.get_valid_tags", "home.repos.pwc.inspect_result.apple_ml-cread.conll.mention.Mention.get_top_level_phrases", "home.repos.pwc.inspect_result.apple_ml-cread.conll.mention.Mention.get_min_span_no_valid_tag", "home.repos.pwc.inspect_result.apple_ml-cread.eval.evaluator.Evaluator.update", "home.repos.pwc.inspect_result.apple_ml-cread.conll.mention.Mention.get_valid_node_min_span"], ["", "def", "set_min_span", "(", "self", ")", ":", "\n", "\n", "        ", "if", "not", "self", ".", "gold_parse_is_set", ":", "\n", "            ", "print", "(", "'The parse tree should be set before extracting minimum spans'", ")", "\n", "return", "NotImplemented", "\n", "\n", "", "root", "=", "self", ".", "gold_parse", "\n", "\n", "if", "not", "root", ":", "\n", "            ", "return", "\n", "\n", "", "terminal_shortest_depth", "=", "float", "(", "'inf'", ")", "\n", "queue", "=", "[", "(", "root", ",", "0", ")", "]", "\n", "\n", "valid_tags", "=", "self", ".", "get_valid_tags", "(", "root", ")", "\n", "\n", "\n", "top_level_valid_phrases", "=", "self", ".", "get_top_level_phrases", "(", "root", ",", "valid_tags", ")", "\n", "\n", "if", "self", ".", "min_spans", ":", "\n", "            ", "return", "\n", "", "'''\n        In structures like conjunctions the minimum span is determined independently\n        for each of the top-level NPs\n        '''", "\n", "if", "top_level_valid_phrases", ":", "\n", "            ", "for", "node", "in", "top_level_valid_phrases", ":", "\n", "                ", "self", ".", "get_valid_node_min_span", "(", "node", ",", "valid_tags", ",", "self", ".", "min_spans", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "get_min_span_no_valid_tag", "(", "root", ")", "\n", "\n", "\n", "", "\"\"\"\n        If there was no valid minimum span due to parsing errors return the whole span\n        \"\"\"", "\n", "if", "len", "(", "self", ".", "min_spans", ")", "==", "0", ":", "\n", "            ", "self", ".", "min_spans", ".", "update", "(", "[", "(", "word", ",", "index", ")", "for", "index", ",", "word", "in", "enumerate", "(", "self", ".", "words", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.conll.mention.TreeNode.__init__": [[235, 241], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "tag", ",", "pos", ",", "index", ",", "isTerminal", ")", ":", "\n", "        ", "self", ".", "tag", "=", "tag", "\n", "self", ".", "pos", "=", "pos", "\n", "self", ".", "index", "=", "index", "\n", "self", ".", "isTerminal", "=", "isTerminal", "\n", "self", ".", "children", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.conll.mention.TreeNode.__str__": [[242, 247], ["child.__str__"], "methods", ["home.repos.pwc.inspect_result.apple_ml-cread.training.metrics.MetricCollection.__str__"], ["", "def", "__str__", "(", "self", ",", "level", "=", "0", ")", ":", "\n", "        ", "ret", "=", "\"\\t\"", "*", "level", "+", "(", "self", ".", "tag", ")", "+", "\"\\n\"", "\n", "for", "child", "in", "self", ".", "children", ":", "\n", "            ", "ret", "+=", "child", ".", "__str__", "(", "level", "+", "1", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.conll.mention.TreeNode.get_terminals": [[248, 254], ["terminals.append", "child.get_terminals"], "methods", ["home.repos.pwc.inspect_result.apple_ml-cread.conll.mention.TreeNode.get_terminals"], ["", "def", "get_terminals", "(", "self", ",", "terminals", ")", ":", "\n", "        ", "if", "self", ".", "isTerminal", ":", "\n", "            ", "terminals", ".", "append", "(", "self", ".", "tag", ")", "\n", "", "else", ":", "\n", "            ", "for", "child", "in", "self", ".", "children", ":", "\n", "                ", "child", ".", "get_terminals", "(", "terminals", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.conll.mention.TreeNode.refined_get_children": [[255, 263], ["children.append", "children.append", "len"], "methods", ["None"], ["", "", "", "def", "refined_get_children", "(", "self", ")", ":", "\n", "        ", "children", "=", "[", "]", "\n", "for", "child", "in", "self", ".", "children", ":", "\n", "            ", "if", "not", "child", ".", "isTerminal", "and", "child", ".", "children", "and", "len", "(", "child", ".", "children", ")", "==", "1", "and", "child", ".", "children", "[", "0", "]", ".", "isTerminal", ":", "\n", "                ", "children", ".", "append", "(", "child", ".", "children", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                ", "children", ".", "append", "(", "child", ")", "\n", "", "", "return", "children", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.conll.util.parse_key_file": [[1, 66], ["StanfordParser", "print", "print", "open", "open", "print", "print", "print", "line.startswith", "line.startswith", "open.write", "open.write", "StanfordParser.parse_sents", "open.write", "len", "line.startswith", "line.startswith", "tmp_sentence[].append", "tmp_conll_lines.append", "line.strip", "len", "parse_string.split", "enumerate", "line.split", "str().split", "val.startswith", "val.index", "treecomp[].replace", "open.write", "str", "val.__len__", "range", "tag_components.append", "tag_components.append", "tag_components.append", "tag_components.append", "tag_components.append", "tmp_conll_lines[].split", "tmp_conll_lines[].split"], "function", ["home.repos.pwc.inspect_result.apple_ml-cread.modeling.dataset.Dataset.__len__"], ["def", "parse_key_file", "(", "key_file", ")", ":", "\n", "        ", "try", ":", "\n", "                ", "from", "nltk", ".", "parse", ".", "stanford", "import", "StanfordParser", "\n", "parser", "=", "StanfordParser", "(", "model_path", "=", "\"edu/stanford/nlp/models/lexparser/englishPCFG.ser.gz\"", ",", "java_options", "=", "'-Xmx8G'", ")", "\n", "print", "(", "\"Starting to parse key_file!\"", ")", "\n", "print", "(", "\"This might take a while...\"", ")", "\n", "new_file", "=", "open", "(", "key_file", "+", "\".parsed\"", ",", "\"w\"", ")", "\n", "with", "open", "(", "key_file", ")", "as", "f", ":", "\n", "                        ", "tmp_sentence", "=", "[", "[", "]", "]", "\n", "tmp_conll_lines", "=", "[", "]", "\n", "for", "line", "in", "f", ":", "\n", "                                ", "if", "line", ".", "startswith", "(", "\"#begin\"", ")", ":", "\n", "                                        ", "new_file", ".", "write", "(", "line", ")", "\n", "continue", "\n", "", "elif", "len", "(", "line", ".", "strip", "(", ")", ")", "==", "0", "or", "(", "line", ".", "startswith", "(", "\"#end\"", ")", "and", "len", "(", "tmp_conll_lines", ")", ">", "0", ")", ":", "\n", "                                        ", "parse", "=", "parser", ".", "parse_sents", "(", "tmp_sentence", ")", "\n", "for", "tree", "in", "parse", ":", "\n", "                                                ", "for", "tree_line", "in", "tree", ":", "#line is a Tree", "\n", "                                                        ", "parse_string", "=", "' '", ".", "join", "(", "str", "(", "tree_line", ")", ".", "split", "(", ")", ")", "\n", "treecomp", "=", "parse_string", ".", "split", "(", ")", "\n", "currlowestindex", "=", "0", "\n", "token_index", "=", "0", "\n", "for", "idx", ",", "val", "in", "enumerate", "(", "treecomp", ")", ":", "\n", "                                                                ", "if", "not", "val", ".", "startswith", "(", "\"(\"", ")", ":", "\n", "                                                                        ", "firstindexofbracket", "=", "val", ".", "index", "(", "\")\"", ")", "\n", "lastindex", "=", "val", ".", "__len__", "(", ")", "-", "1", "\n", "tag_components", "=", "[", "]", "\n", "pos_tag", "=", "treecomp", "[", "idx", "-", "1", "]", ".", "replace", "(", "\"(\"", ",", "\"\"", ")", "\n", "if", "currlowestindex", "==", "idx", "-", "1", ":", "\n", "                                                                                ", "if", "firstindexofbracket", "==", "lastindex", ":", "\n", "                                                                                        ", "tag_components", ".", "append", "(", "\"*\"", ")", "\n", "", "else", ":", "\n", "                                                                                        ", "parsecol", "=", "\"*\"", "+", "val", "[", "firstindexofbracket", ":", "lastindex", "]", "\n", "tag_components", ".", "append", "(", "parsecol", ")", "\n", "", "", "else", ":", "\n", "                                                                                ", "for", "i", "in", "range", "(", "currlowestindex", ",", "idx", "-", "1", ")", ":", "\n", "                                                                                        ", "tag_components", ".", "append", "(", "treecomp", "[", "i", "]", ")", "\n", "", "if", "firstindexofbracket", "==", "lastindex", ":", "\n", "                                                                                        ", "tag_components", ".", "append", "(", "\"*\"", ")", "\n", "", "else", ":", "\n", "                                                                                        ", "parsecol", "=", "\"*\"", "+", "val", "[", "firstindexofbracket", ":", "lastindex", "]", "\n", "tag_components", ".", "append", "(", "parsecol", ")", "\n", "", "", "currlowestindex", "=", "idx", "+", "1", "\n", "\n", "new_file", ".", "write", "(", "'\\t'", ".", "join", "(", "tmp_conll_lines", "[", "token_index", "]", ".", "split", "(", ")", "[", "0", ":", "4", "]", ")", "+", "\"\\t\"", "+", "pos_tag", "+", "\"\\t\"", "+", "''", ".", "join", "(", "tag_components", ")", "+", "'\\t'", "+", "'\\t'", ".", "join", "(", "tmp_conll_lines", "[", "token_index", "]", ".", "split", "(", ")", "[", "4", ":", "]", ")", "+", "'\\n'", ")", "\n", "token_index", "+=", "1", "\n", "\n", "", "", "", "", "tmp_sentence", "[", "0", "]", "=", "[", "]", "\n", "tmp_conll_lines", "=", "[", "]", "\n", "new_file", ".", "write", "(", "\"\\n\"", ")", "\n", "\n", "", "elif", "not", "line", ".", "startswith", "(", "\"#\"", ")", ":", "\n", "                                        ", "word", "=", "line", ".", "split", "(", ")", "[", "3", "]", "\n", "word_uc", "=", "word", "#.decode(encoding='UTF-8')", "\n", "tmp_sentence", "[", "0", "]", ".", "append", "(", "word_uc", ")", "\n", "tmp_conll_lines", ".", "append", "(", "line", ")", "\n", "", "if", "line", ".", "startswith", "(", "\"#end\"", ")", ":", "\n", "                                        ", "new_file", ".", "write", "(", "line", ")", "\n", "\n", "\n", "", "", "", "", "except", ":", "\n", "                ", "print", "(", "\"You need to set the CLASSPATH environment variable to point to the Stanford parser!\"", ")", "\n", "print", "(", "\"Example: export CLASSPATH=/path/to/stanford-parser-full-YYYY-MM-DD/stanford-parser.jar:/path/to/stanford-parser-full-YYYY-MM-DD/stanford-parser-X.X.X-models.jar\"", ")", "\n", "print", "(", "\"\"", ")", "\n", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.conll.util.check_gold_parse_annotation": [[67, 80], ["open", "line.startswith", "len", "line.split", "line.split"], "function", ["None"], ["", "", "def", "check_gold_parse_annotation", "(", "key_file", ")", ":", "\n", "    ", "has_gold_parse", "=", "False", "\n", "with", "open", "(", "key_file", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "if", "not", "line", ".", "startswith", "(", "\"#\"", ")", ":", "\n", "                ", "if", "len", "(", "line", ".", "split", "(", ")", ")", ">", "6", ":", "\n", "                    ", "parse_col", "=", "line", ".", "split", "(", ")", "[", "5", "]", "\n", "if", "not", "parse_col", "==", "\"-\"", ":", "\n", "                        ", "has_gold_parse", "=", "True", "\n", "break", "\n", "", "else", ":", "\n", "                        ", "break", "\n", "", "", "", "", "", "return", "has_gold_parse", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.conll.reader.get_doc_mentions": [[5, 69], ["enumerate", "enumerate", "len", "sorted", "sent_words.append", "reader.extract_coref_annotation", "clusters.pop", "coval.conll.mention.Mention", "len", "singletons.append", "clusters[].append", "open_mentions[].append", "coval.conll.mention.Mention", "clusters[].append", "len", "line.split", "print", "print", "len", "open_mentions.pop", "open_mentions[].pop", "line.split", "print", "print", "str"], "function", ["home.repos.pwc.inspect_result.apple_ml-cread.conll.reader.extract_coref_annotation"], ["__author__", "=", "'ns-moosavi'", "\n", "\n", "\n", "def", "get_doc_markables", "(", "doc_name", ",", "doc_lines", ",", "extract_MIN", ",", "word_column", "=", "0", ",", "\n", "markable_column", "=", "1", ",", "MIN_column", "=", "2", ",", "print_debug", "=", "False", ")", ":", "\n", "    ", "markables_cluster", "=", "{", "}", "\n", "markables_start", "=", "{", "}", "\n", "markables_end", "=", "{", "}", "\n", "markables_MIN", "=", "{", "}", "\n", "markables_coref_tag", "=", "{", "}", "\n", "\n", "all_words", "=", "[", "]", "\n", "\n", "for", "word_index", ",", "line", "in", "enumerate", "(", "doc_lines", ")", ":", "\n", "        ", "columns", "=", "line", ".", "split", "(", ")", "\n", "all_words", ".", "append", "(", "columns", "[", "word_column", "]", ")", "\n", "\n", "# If the line contains annotations", "\n", "if", "len", "(", "columns", ")", ">", "1", ":", "\n", "\n", "            ", "markable_annotations", "=", "columns", "[", "markable_column", "]", ".", "split", "(", "\"@\"", ")", "\n", "MIN_annotations", "=", "columns", "[", "MIN_column", "]", ".", "split", "(", "\n", "\"@\"", ")", "if", "extract_MIN", "and", "len", "(", "columns", ")", ">=", "4", "else", "None", "\n", "coref_annotations", "=", "columns", "[", "-", "1", "]", ".", "split", "(", "\n", "\"@\"", ")", "if", "len", "(", "columns", ")", ">=", "3", "else", "None", "\n", "\n", "if", "print_debug", ":", "\n", "                ", "if", "(", "(", "MIN_annotations", "and", "len", "(", "markable_annotations", ")", "\n", "!=", "len", "(", "MIN_annotations", ")", ")", "\n", "or", "(", "coref_annotations", "and", "len", "(", "markable_annotations", ")", "\n", "!=", "len", "(", "coref_annotations", ")", ")", ")", ":", "\n", "                    ", "print", "(", "(", "\n", "'There is a problem with the annotation of the '", "\n", "'document %r in line %s\\n'", "\n", "'The number of MIN or coref annotations '", "\n", "'for each line should be equal to the the number '", "\n", "'of markable annotations'", ")", "%", "(", "doc_name", ",", "line", ")", ")", "\n", "\n", "", "", "for", "i", ",", "markable_annotation", "in", "enumerate", "(", "markable_annotations", ")", ":", "\n", "                ", "markable_id", "=", "int", "(", "markable_annotation", "[", "\n", "11", ":", "markable_annotation", ".", "find", "(", "'='", ")", "]", ")", "\n", "cluster_id", "=", "int", "(", "markable_annotation", "[", "\n", "markable_annotation", ".", "find", "(", "'='", ")", "+", "5", ":", "]", ")", "\n", "\n", "if", "markable_annotation", ".", "startswith", "(", "\"B-markable_\"", ")", ":", "\n", "                    ", "markables_cluster", "[", "markable_id", "]", "=", "cluster_id", "\n", "markables_start", "[", "markable_id", "]", "=", "word_index", "\n", "markables_end", "[", "markable_id", "]", "=", "word_index", "\n", "\n", "if", "MIN_annotations", "and", "len", "(", "markable_annotations", ")", "==", "len", "(", "\n", "MIN_annotations", ")", "and", "MIN_annotations", "[", "i", "]", ".", "strip", "(", ")", ":", "\n", "                        ", "if", "MIN_annotations", "[", "i", "]", ".", "find", "(", "'..'", ")", "==", "-", "1", ":", "\n", "                            ", "MIN_start", "=", "int", "(", "MIN_annotations", "[", "i", "]", "[", "5", ":", "]", ")", "-", "1", "\n", "MIN_end", "=", "MIN_start", "\n", "", "else", ":", "\n", "# -1 because word_index starts from zero", "\n", "                            ", "MIN_start", "=", "int", "(", "MIN_annotations", "[", "i", "]", "[", "\n", "5", ":", "MIN_annotations", "[", "i", "]", ".", "find", "(", "'..'", ")", "]", ")", "-", "1", "\n", "MIN_end", "=", "int", "(", "MIN_annotations", "[", "i", "]", "[", "\n", "MIN_annotations", "[", "i", "]", ".", "find", "(", "'..'", ")", "+", "7", ":", "]", ")", "-", "1", "\n", "", "markables_MIN", "[", "markable_id", "]", "=", "(", "MIN_start", ",", "MIN_end", ")", "\n", "", "else", ":", "\n", "                        ", "markables_MIN", "[", "markable_id", "]", "=", "None", "\n", "\n", "", "if", "coref_annotations", "and", "len", "(", "markable_annotations", ")", "==", "len", "(", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.conll.reader.mask_unseen_mentions": [[71, 90], ["enumerate", "set", "set.add", "enumerate", "unseens[].add", "len", "set", "len"], "function", ["None"], [")", "==", "'non_referring'", ":", "\n", "                        ", "markables_coref_tag", "[", "markable_id", "]", "=", "'non_referring'", "\n", "", "else", ":", "\n", "                        ", "markables_coref_tag", "[", "markable_id", "]", "=", "'referring'", "\n", "\n", "", "", "elif", "markable_annotation", ".", "startswith", "(", "\"I-markable_\"", ")", ":", "\n", "                    ", "markables_end", "[", "markable_id", "]", "=", "word_index", "\n", "\n", "", "else", ":", "\n", "                    ", "print", "(", "(", "\n", "'%r is not a valid annotation for markables.\\n'", ",", "\n", "'The annotation of the following markable will be '", "\n", "'skipped then.\\n%s'", ")", "%", "(", "markable_annotation", ",", "line", ")", ")", "\n", "\n", "", "", "", "", "clusters", "=", "{", "}", "\n", "\n", "for", "markable_id", "in", "markables_cluster", ":", "\n", "        ", "m", "=", "markable", ".", "Markable", "(", "\n", "doc_name", ",", "markables_start", "[", "markable_id", "]", ",", "\n", "markables_end", "[", "markable_id", "]", ",", "markables_MIN", "[", "markable_id", "]", ",", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.conll.reader.extract_coref_annotation": [[92, 136], ["enumerate", "line.split", "c.isdigit", "len", "print", "last_num.append", "len", "open_corefs.append", "len", "int", "len", "single_token_coref.append", "len", "ending_corefs.append", "open_corefs.append", "int", "int", "int", "len", "sys.exit"], "function", ["None"], ["all_words", "[", "markables_start", "[", "markable_id", "]", ":", "\n", "markables_end", "[", "markable_id", "]", "+", "1", "]", ")", "\n", "\n", "if", "markables_cluster", "[", "markable_id", "]", "not", "in", "clusters", ":", "\n", "            ", "clusters", "[", "markables_cluster", "[", "markable_id", "]", "]", "=", "(", "\n", "[", "]", ",", "markables_coref_tag", "[", "markable_id", "]", ")", "\n", "", "clusters", "[", "markables_cluster", "[", "markable_id", "]", "]", "[", "0", "]", ".", "append", "(", "m", ")", "\n", "\n", "", "return", "clusters", "\n", "\n", "\n", "", "def", "process_clusters", "(", "clusters", ",", "keep_singletons", ",", "keep_non_referring", ")", ":", "\n", "    ", "removed_non_referring", "=", "0", "\n", "removed_singletons", "=", "0", "\n", "processed_clusters", "=", "[", "]", "\n", "processed_non_referrings", "=", "[", "]", "\n", "\n", "for", "cluster_id", ",", "(", "cluster", ",", "ref_tag", ")", "in", "clusters", ".", "items", "(", ")", ":", "\n", "        ", "if", "ref_tag", "==", "'non_referring'", ":", "\n", "            ", "if", "keep_non_referring", ":", "\n", "                ", "processed_non_referrings", ".", "append", "(", "clusters", "[", "cluster_id", "]", "[", "0", "]", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                ", "removed_non_referring", "+=", "1", "\n", "", "continue", "\n", "", "if", "not", "keep_singletons", "and", "len", "(", "cluster", ")", "==", "1", ":", "\n", "            ", "removed_singletons", "+=", "1", "\n", "continue", "\n", "\n", "", "processed_clusters", ".", "append", "(", "clusters", "[", "cluster_id", "]", "[", "0", "]", ")", "\n", "\n", "", "return", "(", "processed_clusters", ",", "processed_non_referrings", ",", "\n", "removed_non_referring", ",", "removed_singletons", ")", "\n", "\n", "\n", "", "def", "get_coref_infos", "(", "key_directory", ",", "\n", "sys_directory", ",", "\n", "keep_singletons", ",", "\n", "keep_non_referring", ",", "\n", "use_MIN", ",", "\n", "print_debug", "=", "False", ")", ":", "\n", "\n", "    ", "key_docs", "=", "get_all_docs", "(", "key_directory", ")", "\n", "sys_docs", "=", "get_all_docs", "(", "sys_directory", ")", "\n", "\n", "doc_coref_infos", "=", "{", "}", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.conll.reader.extract_annotated_parse": [[138, 257], ["enumerate", "enumerate", "open_nodes.pop", "len", "coval.conll.mention.TreeNode", "line.split", "roots.append", "mention.TreeNode.children.append", "coval.conll.mention.TreeNode", "coval.conll.mention.TreeNode", "open_nodes.append", "terminal_nodes.append", "pos_tags.append", "coval.conll.mention.TreeNode", "open_nodes.append", "any", "any", "coval.conll.mention.TreeNode", "open_nodes.append", "c.isalpha", "len", "len", "open_nodes[].children.append", "open_nodes[].children.append", "open_nodes.append", "line.split", "line.split", "roots.append", "coval.conll.mention.TreeNode", "open_nodes.pop", "tag_name.append", "c.isalpha", "c.isdigit", "open_nodes[].children.append", "open_nodes[].children.append", "open_nodes.append", "roots.append", "open_nodes[].children.append"], "function", ["None"], ["\n", "for", "doc", "in", "key_docs", ":", "\n", "\n", "        ", "if", "doc", "not", "in", "sys_docs", ":", "\n", "            ", "print", "(", "'The document '", ",", "doc", ",", "\n", "' does not exist in the system output.'", ")", "\n", "continue", "\n", "\n", "", "key_clusters", "=", "get_doc_markables", "(", "doc", ",", "key_docs", "[", "doc", "]", ",", "use_MIN", ")", "\n", "sys_clusters", "=", "get_doc_markables", "(", "doc", ",", "sys_docs", "[", "doc", "]", ",", "False", ")", "\n", "\n", "(", "key_clusters", ",", "key_non_referrings", ",", "key_removed_non_referring", ",", "\n", "key_removed_singletons", ")", "=", "process_clusters", "(", "\n", "key_clusters", ",", "keep_singletons", ",", "keep_non_referring", ")", "\n", "(", "sys_clusters", ",", "sys_non_referrings", ",", "sys_removed_non_referring", ",", "\n", "sys_removed_singletons", ")", "=", "process_clusters", "(", "\n", "sys_clusters", ",", "keep_singletons", ",", "keep_non_referring", ")", "\n", "\n", "sys_mention_key_cluster", "=", "get_markable_assignments", "(", "\n", "sys_clusters", ",", "key_clusters", ")", "\n", "key_mention_sys_cluster", "=", "get_markable_assignments", "(", "\n", "key_clusters", ",", "sys_clusters", ")", "\n", "\n", "doc_coref_infos", "[", "doc", "]", "=", "(", "key_clusters", ",", "sys_clusters", ",", "\n", "key_mention_sys_cluster", ",", "sys_mention_key_cluster", ")", "\n", "doc_non_referrig_infos", "[", "doc", "]", "=", "(", "key_non_referrings", ",", "sys_non_referrings", ")", "\n", "\n", "if", "print_debug", "and", "not", "keep_non_referring", ":", "\n", "            ", "print", "(", "'%s and %s non-referring markables are removed from the '", "\n", "'evaluations of the key and system files, respectively.'", "\n", "%", "(", "key_removed_non_referring", ",", "sys_removed_non_referring", ")", ")", "\n", "\n", "", "if", "print_debug", "and", "not", "keep_singletons", ":", "\n", "            ", "print", "(", "'%s and %s singletons are removed from the evaluations of '", "\n", "'the key and system files, respectively.'", "\n", "%", "(", "key_removed_singletons", ",", "sys_removed_singletons", ")", ")", "\n", "\n", "", "", "return", "doc_coref_infos", ",", "doc_non_referrig_infos", "\n", "\n", "\n", "", "def", "get_markable_assignments", "(", "inp_clusters", ",", "out_clusters", ")", ":", "\n", "    ", "markable_cluster_ids", "=", "{", "}", "\n", "out_dic", "=", "{", "}", "\n", "for", "cluster_id", ",", "cluster", "in", "enumerate", "(", "out_clusters", ")", ":", "\n", "        ", "for", "m", "in", "cluster", ":", "\n", "            ", "out_dic", "[", "m", "]", "=", "cluster_id", "\n", "\n", "", "", "for", "cluster", "in", "inp_clusters", ":", "\n", "        ", "for", "im", "in", "cluster", ":", "\n", "            ", "for", "om", "in", "out_dic", ":", "\n", "                ", "if", "im", "==", "om", ":", "\n", "                    ", "markable_cluster_ids", "[", "im", "]", "=", "out_dic", "[", "om", "]", "\n", "break", "\n", "\n", "", "", "", "", "return", "markable_cluster_ids", "\n", "\n", "\n", "", "def", "get_all_docs", "(", "path", ")", ":", "\n", "    ", "all_docs", "=", "{", "}", "\n", "if", "isfile", "(", "path", ")", ":", "\n", "        ", "if", "path", ".", "endswith", "(", "'.CONLL'", ")", ":", "\n", "            ", "all_docs", "[", "path", "[", "path", ".", "rfind", "(", "'/'", ")", "+", "1", ":", "]", "]", "=", "get_doc_lines", "(", "path", ")", "\n", "", "", "else", ":", "\n", "        ", "for", "root", ",", "_directories", ",", "filenames", "in", "walk", "(", "path", ")", ":", "\n", "            ", "for", "filename", "in", "filenames", ":", "\n", "                ", "if", "(", "filename", ".", "endswith", "(", "'.CONLL'", ")", ")", ":", "\n", "                    ", "all_docs", "[", "filename", "]", "=", "get_doc_lines", "(", "join", "(", "root", ",", "filename", ")", ")", "\n", "", "", "", "", "return", "all_docs", "\n", "\n", "\n", "", "def", "get_doc_lines", "(", "file_name", ")", ":", "\n", "    ", "doc_lines", "=", "[", "]", "\n", "\n", "with", "open", "(", "file_name", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "if", "line", ".", "startswith", "(", "\"TOKEN\"", ")", ":", "\n", "                ", "continue", "\n", "", "doc_lines", ".", "append", "(", "line", ")", "\n", "\n", "", "", "return", "doc_lines", "\n", "", ""]], "home.repos.pwc.inspect_result.apple_ml-cread.conll.reader.set_annotated_parse_trees": [[260, 306], ["set", "enumerate", "list", "sorted", "m.set_gold_parse", "reader.extract_annotated_parse", "m.gold_parse.get_terminals", "m.set_min_span", "list.remove", "set.add", "pruned_clusters.pop", "print", "t.split", "len", "print", "print", "len", "m.words.append", "len", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.apple_ml-cread.conll.mention.Mention.set_gold_parse", "home.repos.pwc.inspect_result.apple_ml-cread.conll.reader.extract_annotated_parse", "home.repos.pwc.inspect_result.apple_ml-cread.conll.mention.TreeNode.get_terminals", "home.repos.pwc.inspect_result.apple_ml-cread.conll.mention.Mention.set_min_span"], []], "home.repos.pwc.inspect_result.apple_ml-cread.conll.reader.get_doc_lines": [[308, 334], ["open", "line.startswith", "line.startswith", "len", "line.strip", "doc_lines[].append", "[].append", "line.strip"], "function", ["None"], []], "home.repos.pwc.inspect_result.apple_ml-cread.conll.reader.remove_nested_coref_mentions": [[336, 380], ["enumerate", "sorted", "enumerate", "len", "clusters.pop", "m1.are_nested", "len", "print", "to_be_removed_clusters.append", "to_be_removed_mentions[].append", "print", "print", "len", "len", "to_be_removed_mentions[].append", "print"], "function", ["home.repos.pwc.inspect_result.apple_ml-cread.conll.mention.Mention.are_nested"], []], "home.repos.pwc.inspect_result.apple_ml-cread.conll.reader.get_coref_infos": [[382, 455], ["reader.get_doc_lines", "reader.get_doc_lines", "reader.get_doc_mentions", "reader.get_doc_mentions", "reader.get_mention_assignments", "reader.get_mention_assignments", "print", "print", "print", "reader.set_annotated_parse_trees", "reader.set_annotated_parse_trees", "reader.remove_nested_coref_mentions", "reader.remove_nested_coref_mentions"], "function", ["home.repos.pwc.inspect_result.apple_ml-cread.conll.reader.get_doc_lines", "home.repos.pwc.inspect_result.apple_ml-cread.conll.reader.get_doc_lines", "home.repos.pwc.inspect_result.apple_ml-cread.conll.reader.get_doc_mentions", "home.repos.pwc.inspect_result.apple_ml-cread.conll.reader.get_doc_mentions", "home.repos.pwc.inspect_result.apple_ml-cread.conll.reader.get_mention_assignments", "home.repos.pwc.inspect_result.apple_ml-cread.conll.reader.get_mention_assignments", "home.repos.pwc.inspect_result.apple_ml-cread.conll.reader.set_annotated_parse_trees", "home.repos.pwc.inspect_result.apple_ml-cread.conll.reader.set_annotated_parse_trees", "home.repos.pwc.inspect_result.apple_ml-cread.conll.reader.remove_nested_coref_mentions", "home.repos.pwc.inspect_result.apple_ml-cread.conll.reader.remove_nested_coref_mentions"], []], "home.repos.pwc.inspect_result.apple_ml-cread.conll.reader.get_mention_assignments": [[457, 470], ["enumerate"], "function", ["None"], []], "home.repos.pwc.inspect_result.apple_ml-cread.rouge.tokenize.tokenize": [[27, 56], ["re.sub.lower", "re.sub", "re.split", "six.ensure_str", "re.match", "stemmer.stem", "six.ensure_str", "len"], "function", ["None"], ["def", "tokenize", "(", "text", ",", "stemmer", ")", ":", "\n", "    ", "\"\"\"Tokenize input text into a list of tokens.\n\n  This approach aims to replicate the approach taken by Chin-Yew Lin in\n  the original ROUGE implementation.\n\n  Args:\n    text: A text blob to tokenize.\n    stemmer: An optional stemmer.\n\n  Returns:\n    A list of string tokens extracted from input text.\n  \"\"\"", "\n", "\n", "# Convert everything to lowercase.", "\n", "text", "=", "text", ".", "lower", "(", ")", "\n", "# TODO:: This won't support Chinese", "\n", "# Replace any non-alpha-numeric characters with spaces.", "\n", "text", "=", "re", ".", "sub", "(", "r\"[^a-z0-9]+\"", ",", "\" \"", ",", "six", ".", "ensure_str", "(", "text", ")", ")", "\n", "\n", "tokens", "=", "re", ".", "split", "(", "r\"\\s+\"", ",", "text", ")", "\n", "if", "stemmer", ":", "\n", "# Only stem words more than 3 characters long.", "\n", "        ", "tokens", "=", "[", "stemmer", ".", "stem", "(", "x", ")", "if", "len", "(", "x", ")", ">", "3", "else", "x", "for", "x", "in", "tokens", "]", "\n", "\n", "# One final check to drop any empty or invalid tokens.", "\n", "", "tokens", "=", "[", "x", "for", "x", "in", "tokens", "if", "re", ".", "match", "(", "r\"^[a-z0-9]+$\"", ",", "six", ".", "ensure_str", "(", "x", ")", ")", "]", "\n", "\n", "return", "tokens", "\n", "", ""]], "home.repos.pwc.inspect_result.apple_ml-cread.rouge.scoring.BaseScorer.score": [[42, 53], ["None"], "methods", ["None"], ["@", "abc", ".", "abstractmethod", "\n", "def", "score", "(", "self", ",", "target", ",", "prediction", ")", ":", "\n", "        ", "\"\"\"Calculates score between the target and prediction.\n\n    Args:\n      target: Text containing the target (ground truth) text.\n      prediction: Text containing the predicted text.\n\n    Returns:\n      A dict mapping each score_type (string) to Score object.\n    \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.rouge.scoring.BootstrapAggregator.__init__": [[79, 99], ["collections.defaultdict", "ValueError", "ValueError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "confidence_interval", "=", "0.95", ",", "n_samples", "=", "1000", ")", ":", "\n", "        ", "\"\"\"Initializes a BootstrapAggregator object.\n\n    Args:\n      confidence_interval: Confidence interval to compute on the mean as a\n        decimal.\n      n_samples: Number of samples to use for bootstrap resampling.\n\n    Raises:\n      ValueError: If invalid argument is given.\n    \"\"\"", "\n", "\n", "if", "confidence_interval", "<", "0", "or", "confidence_interval", ">", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"confidence_interval must be in range [0, 1]\"", ")", "\n", "", "if", "n_samples", "<=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"n_samples must be positive\"", ")", "\n", "\n", "", "self", ".", "_n_samples", "=", "n_samples", "\n", "self", ".", "_confidence_interval", "=", "confidence_interval", "\n", "self", ".", "_scores", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.rouge.scoring.BootstrapAggregator.add_scores": [[100, 110], ["six.iteritems", "scoring.BootstrapAggregator._scores[].append"], "methods", ["None"], ["", "def", "add_scores", "(", "self", ",", "scores", ")", ":", "\n", "        ", "\"\"\"Adds a sample for future aggregation.\n\n    Args:\n      scores: Dict mapping score_type strings to a namedtuple object/class\n        representing a score.\n    \"\"\"", "\n", "\n", "for", "score_type", ",", "score", "in", "six", ".", "iteritems", "(", "scores", ")", ":", "\n", "            ", "self", ".", "_scores", "[", "score_type", "]", ".", "append", "(", "score", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.rouge.scoring.BootstrapAggregator.aggregate": [[111, 130], ["six.iteritems", "numpy.vstack", "scoring.BootstrapAggregator._bootstrap_resample", "tuple", "scoring.AggregateScore", "tuple", "scores[].__class__", "six.moves.range"], "methods", ["home.repos.pwc.inspect_result.apple_ml-cread.rouge.scoring.BootstrapAggregator._bootstrap_resample"], ["", "", "def", "aggregate", "(", "self", ")", ":", "\n", "        ", "\"\"\"Aggregates scores previously added using add_scores.\n\n    Returns:\n      A dict mapping score_type to AggregateScore objects.\n    \"\"\"", "\n", "\n", "result", "=", "{", "}", "\n", "for", "score_type", ",", "scores", "in", "six", ".", "iteritems", "(", "self", ".", "_scores", ")", ":", "\n", "# Stack scores into a 2-d matrix of (sample, measure).", "\n", "            ", "score_matrix", "=", "np", ".", "vstack", "(", "tuple", "(", "scores", ")", ")", "\n", "# Percentiles are returned as (interval, measure).", "\n", "percentiles", "=", "self", ".", "_bootstrap_resample", "(", "score_matrix", ")", "\n", "# Extract the three intervals (low, mid, high).", "\n", "intervals", "=", "tuple", "(", "(", "scores", "[", "0", "]", ".", "__class__", "(", "*", "percentiles", "[", "j", ",", ":", "]", ")", "for", "j", "in", "range", "(", "3", ")", ")", ")", "\n", "result", "[", "score_type", "]", "=", "AggregateScore", "(", "\n", "low", "=", "intervals", "[", "0", "]", ",", "mid", "=", "intervals", "[", "1", "]", ",", "high", "=", "intervals", "[", "2", "]", "\n", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.rouge.scoring.BootstrapAggregator._bootstrap_resample": [[131, 157], ["numpy.zeros", "six.moves.range", "numpy.percentile", "numpy.random.choice", "numpy.mean", "numpy.array", "numpy.arange"], "methods", ["None"], ["", "def", "_bootstrap_resample", "(", "self", ",", "matrix", ")", ":", "\n", "        ", "\"\"\"Performs bootstrap resampling on a matrix of scores.\n\n    Args:\n      matrix: A 2-d matrix of (sample, measure).\n\n    Returns:\n      A 2-d matrix of (bounds, measure). There are three bounds: low (row 0),\n      mid (row 1) and high (row 2). Mid is always the mean, while low and high\n      bounds are specified by self._confidence_interval (which defaults to 0.95\n      meaning it will return the 2.5th and 97.5th percentiles for a 95%\n      confidence interval on the mean).\n    \"\"\"", "\n", "\n", "# Matrix of (bootstrap sample, measure).", "\n", "sample_mean", "=", "np", ".", "zeros", "(", "(", "self", ".", "_n_samples", ",", "matrix", ".", "shape", "[", "1", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "_n_samples", ")", ":", "\n", "            ", "sample_idx", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "matrix", ".", "shape", "[", "0", "]", ")", ",", "size", "=", "matrix", ".", "shape", "[", "0", "]", ")", "\n", "sample", "=", "matrix", "[", "sample_idx", ",", ":", "]", "\n", "sample_mean", "[", "i", ",", ":", "]", "=", "np", ".", "mean", "(", "sample", ",", "axis", "=", "0", ")", "\n", "\n", "# Take percentiles on the estimate of the mean using bootstrap samples.", "\n", "# Final result is a (bounds, measure) matrix.", "\n", "", "percentile_delta", "=", "(", "1", "-", "self", ".", "_confidence_interval", ")", "/", "2", "\n", "q", "=", "100", "*", "np", ".", "array", "(", "[", "percentile_delta", ",", "0.5", ",", "1", "-", "percentile_delta", "]", ")", "\n", "return", "np", ".", "percentile", "(", "sample_mean", ",", "q", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.rouge.scoring.fmeasure": [[159, 166], ["None"], "function", ["None"], ["", "", "def", "fmeasure", "(", "precision", ",", "recall", ")", ":", "\n", "    ", "\"\"\"Computes f-measure given precision and recall values.\"\"\"", "\n", "\n", "if", "precision", "+", "recall", ">", "0", ":", "\n", "        ", "return", "2", "*", "precision", "*", "recall", "/", "(", "precision", "+", "recall", ")", "\n", "", "else", ":", "\n", "        ", "return", "0.0", "\n", "", "", ""]], "home.repos.pwc.inspect_result.apple_ml-cread.rouge.rouge_scorer.RougeScorer.__init__": [[57, 74], ["nltk.stem.porter.PorterStemmer"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "rouge_types", ",", "use_stemmer", "=", "False", ")", ":", "\n", "        ", "\"\"\"Initializes a new RougeScorer.\n\n    Valid rouge types that can be computed are:\n      rougen (e.g. rouge1, rouge2): n-gram based scoring.\n      rougeL: Longest common subsequence based scoring.\n\n    Args:\n      rouge_types: A list of rouge types to calculate.\n      use_stemmer: Bool indicating whether Porter stemmer should be used to\n        strip word suffixes to improve matching.\n    Returns:\n      A dict mapping rouge types to Score tuples.\n    \"\"\"", "\n", "\n", "self", ".", "rouge_types", "=", "rouge_types", "\n", "self", ".", "_stemmer", "=", "porter", ".", "PorterStemmer", "(", ")", "if", "use_stemmer", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.rouge.rouge_scorer.RougeScorer.score": [[75, 123], ["qr_eval.qr.rouge.tokenize.tokenize", "qr_eval.qr.rouge.tokenize.tokenize", "rouge_scorer._score_lcs", "rouge_scorer._summary_level_lcs", "re.match", "six.ensure_str().split", "qr_eval.qr.rouge.tokenize.tokenize", "qr_eval.qr.rouge.tokenize.tokenize", "six.ensure_str", "int", "rouge_scorer._create_ngrams", "rouge_scorer._create_ngrams", "rouge_scorer._score_ngrams", "ValueError", "rouge_scorer.RougeScorer.score.get_sents"], "methods", ["home.repos.pwc.inspect_result.apple_ml-cread.rouge.tokenize.tokenize", "home.repos.pwc.inspect_result.apple_ml-cread.rouge.tokenize.tokenize", "home.repos.pwc.inspect_result.apple_ml-cread.rouge.rouge_scorer._score_lcs", "home.repos.pwc.inspect_result.apple_ml-cread.rouge.rouge_scorer._summary_level_lcs", "home.repos.pwc.inspect_result.apple_ml-cread.rouge.tokenize.tokenize", "home.repos.pwc.inspect_result.apple_ml-cread.rouge.tokenize.tokenize", "home.repos.pwc.inspect_result.apple_ml-cread.rouge.rouge_scorer._create_ngrams", "home.repos.pwc.inspect_result.apple_ml-cread.rouge.rouge_scorer._create_ngrams", "home.repos.pwc.inspect_result.apple_ml-cread.rouge.rouge_scorer._score_ngrams"], ["", "def", "score", "(", "self", ",", "target", ",", "prediction", ")", ":", "\n", "        ", "\"\"\"Calculates rouge scores between the target and prediction.\n\n    Args:\n      target: Text containing the target (ground truth) text.\n      prediction: Text containing the predicted text.\n    Returns:\n      A dict mapping each rouge type to a Score object.\n    Raises:\n      ValueError: If an invalid rouge type is encountered.\n    \"\"\"", "\n", "\n", "target_tokens", "=", "tokenize", ".", "tokenize", "(", "target", ",", "self", ".", "_stemmer", ")", "\n", "prediction_tokens", "=", "tokenize", ".", "tokenize", "(", "prediction", ",", "self", ".", "_stemmer", ")", "\n", "result", "=", "{", "}", "\n", "\n", "for", "rouge_type", "in", "self", ".", "rouge_types", ":", "\n", "            ", "if", "rouge_type", "==", "\"rougeL\"", ":", "\n", "# Rouge from longest common subsequences.", "\n", "                ", "scores", "=", "_score_lcs", "(", "target_tokens", ",", "prediction_tokens", ")", "\n", "", "elif", "rouge_type", "==", "\"rougeLsum\"", ":", "\n", "# Note: Does not support multi-line text.", "\n", "                ", "def", "get_sents", "(", "text", ")", ":", "\n", "# Assume sentences are separated by newline.", "\n", "                    ", "sents", "=", "six", ".", "ensure_str", "(", "text", ")", ".", "split", "(", "\"\\n\"", ")", "\n", "sents", "=", "[", "x", "for", "x", "in", "sents", "if", "len", "(", "x", ")", "]", "\n", "return", "sents", "\n", "\n", "", "target_tokens_list", "=", "[", "\n", "tokenize", ".", "tokenize", "(", "s", ",", "self", ".", "_stemmer", ")", "for", "s", "in", "get_sents", "(", "target", ")", "\n", "]", "\n", "prediction_tokens_list", "=", "[", "\n", "tokenize", ".", "tokenize", "(", "s", ",", "self", ".", "_stemmer", ")", "for", "s", "in", "get_sents", "(", "prediction", ")", "\n", "]", "\n", "scores", "=", "_summary_level_lcs", "(", "target_tokens_list", ",", "prediction_tokens_list", ")", "\n", "", "elif", "re", ".", "match", "(", "r\"rouge[0-9]$\"", ",", "six", ".", "ensure_str", "(", "rouge_type", ")", ")", ":", "\n", "# Rouge from n-grams.", "\n", "                ", "n", "=", "int", "(", "rouge_type", "[", "5", ":", "]", ")", "\n", "if", "n", "<=", "0", ":", "\n", "                    ", "raise", "ValueError", "(", "\"rougen requires positive n: %s\"", "%", "rouge_type", ")", "\n", "", "target_ngrams", "=", "_create_ngrams", "(", "target_tokens", ",", "n", ")", "\n", "prediction_ngrams", "=", "_create_ngrams", "(", "prediction_tokens", ",", "n", ")", "\n", "scores", "=", "_score_ngrams", "(", "target_ngrams", ",", "prediction_ngrams", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Invalid rouge type: %s\"", "%", "rouge_type", ")", "\n", "", "result", "[", "rouge_type", "]", "=", "scores", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.rouge.rouge_scorer._create_ngrams": [[125, 139], ["collections.Counter", "tuple", "six.moves.range", "len"], "function", ["None"], ["", "", "def", "_create_ngrams", "(", "tokens", ",", "n", ")", ":", "\n", "    ", "\"\"\"Creates ngrams from the given list of tokens.\n\n  Args:\n    tokens: A list of tokens from which ngrams are created.\n    n: Number of tokens to use, e.g. 2 for bigrams.\n  Returns:\n    A dictionary mapping each bigram to the number of occurrences.\n  \"\"\"", "\n", "\n", "ngrams", "=", "collections", ".", "Counter", "(", ")", "\n", "for", "ngram", "in", "(", "tuple", "(", "tokens", "[", "i", ":", "i", "+", "n", "]", ")", "for", "i", "in", "range", "(", "len", "(", "tokens", ")", "-", "n", "+", "1", ")", ")", ":", "\n", "        ", "ngrams", "[", "ngram", "]", "+=", "1", "\n", "", "return", "ngrams", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.rouge.rouge_scorer._score_lcs": [[141, 163], ["rouge_scorer._lcs_table", "qr_eval.qr.rouge.scoring.fmeasure", "qr_eval.qr.rouge.scoring.Score", "qr_eval.qr.rouge.scoring.Score", "len", "len"], "function", ["home.repos.pwc.inspect_result.apple_ml-cread.rouge.rouge_scorer._lcs_table", "home.repos.pwc.inspect_result.apple_ml-cread.rouge.scoring.fmeasure"], ["", "def", "_score_lcs", "(", "target_tokens", ",", "prediction_tokens", ")", ":", "\n", "    ", "\"\"\"Computes LCS (Longest Common Subsequence) rouge scores.\n\n  Args:\n    target_tokens: Tokens from the target text.\n    prediction_tokens: Tokens from the predicted text.\n  Returns:\n    A Score object containing computed scores.\n  \"\"\"", "\n", "\n", "if", "not", "target_tokens", "or", "not", "prediction_tokens", ":", "\n", "        ", "return", "scoring", ".", "Score", "(", "precision", "=", "0", ",", "recall", "=", "0", ",", "fmeasure", "=", "0", ")", "\n", "\n", "# Compute length of LCS from the bottom up in a table (DP appproach).", "\n", "", "lcs_table", "=", "_lcs_table", "(", "target_tokens", ",", "prediction_tokens", ")", "\n", "lcs_length", "=", "lcs_table", "[", "-", "1", "]", "[", "-", "1", "]", "\n", "\n", "precision", "=", "lcs_length", "/", "len", "(", "prediction_tokens", ")", "\n", "recall", "=", "lcs_length", "/", "len", "(", "target_tokens", ")", "\n", "fmeasure", "=", "scoring", ".", "fmeasure", "(", "precision", ",", "recall", ")", "\n", "\n", "return", "scoring", ".", "Score", "(", "precision", "=", "precision", ",", "recall", "=", "recall", ",", "fmeasure", "=", "fmeasure", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.rouge.rouge_scorer._lcs_table": [[165, 177], ["len", "len", "six.moves.range", "six.moves.range", "six.moves.range", "max"], "function", ["None"], ["", "def", "_lcs_table", "(", "ref", ",", "can", ")", ":", "\n", "    ", "\"\"\"Create 2-d LCS score table.\"\"\"", "\n", "rows", "=", "len", "(", "ref", ")", "\n", "cols", "=", "len", "(", "can", ")", "\n", "lcs_table", "=", "[", "[", "0", "]", "*", "(", "cols", "+", "1", ")", "for", "_", "in", "range", "(", "rows", "+", "1", ")", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "rows", "+", "1", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "1", ",", "cols", "+", "1", ")", ":", "\n", "            ", "if", "ref", "[", "i", "-", "1", "]", "==", "can", "[", "j", "-", "1", "]", ":", "\n", "                ", "lcs_table", "[", "i", "]", "[", "j", "]", "=", "lcs_table", "[", "i", "-", "1", "]", "[", "j", "-", "1", "]", "+", "1", "\n", "", "else", ":", "\n", "                ", "lcs_table", "[", "i", "]", "[", "j", "]", "=", "max", "(", "lcs_table", "[", "i", "-", "1", "]", "[", "j", "]", ",", "lcs_table", "[", "i", "]", "[", "j", "-", "1", "]", ")", "\n", "", "", "", "return", "lcs_table", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.rouge.rouge_scorer._backtrack_norec": [[179, 194], ["len", "len", "lcs.insert"], "function", ["None"], ["", "def", "_backtrack_norec", "(", "t", ",", "ref", ",", "can", ")", ":", "\n", "    ", "\"\"\"Read out LCS.\"\"\"", "\n", "i", "=", "len", "(", "ref", ")", "\n", "j", "=", "len", "(", "can", ")", "\n", "lcs", "=", "[", "]", "\n", "while", "i", ">", "0", "and", "j", ">", "0", ":", "\n", "        ", "if", "ref", "[", "i", "-", "1", "]", "==", "can", "[", "j", "-", "1", "]", ":", "\n", "            ", "lcs", ".", "insert", "(", "0", ",", "i", "-", "1", ")", "\n", "i", "-=", "1", "\n", "j", "-=", "1", "\n", "", "elif", "t", "[", "i", "]", "[", "j", "-", "1", "]", ">", "t", "[", "i", "-", "1", "]", "[", "j", "]", ":", "\n", "            ", "j", "-=", "1", "\n", "", "else", ":", "\n", "            ", "i", "-=", "1", "\n", "", "", "return", "lcs", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.rouge.rouge_scorer._summary_level_lcs": [[196, 240], ["sum", "sum", "collections.Counter", "collections.Counter", "qr_eval.qr.rouge.scoring.fmeasure", "qr_eval.qr.rouge.scoring.Score", "qr_eval.qr.rouge.scoring.Score", "six.moves.map", "six.moves.map", "qr_eval.qr.rouge.scoring.Score", "collections.Counter.update", "collections.Counter.update", "rouge_scorer._union_lcs"], "function", ["home.repos.pwc.inspect_result.apple_ml-cread.rouge.scoring.fmeasure", "home.repos.pwc.inspect_result.apple_ml-cread.eval.evaluator.Evaluator.update", "home.repos.pwc.inspect_result.apple_ml-cread.eval.evaluator.Evaluator.update", "home.repos.pwc.inspect_result.apple_ml-cread.rouge.rouge_scorer._union_lcs"], ["", "def", "_summary_level_lcs", "(", "ref_sent", ",", "can_sent", ")", ":", "\n", "    ", "\"\"\"ROUGE: Summary-level LCS, section 3.2 in ROUGE paper.\n\n  Args:\n    ref_sent: list of tokenized reference sentences\n    can_sent: list of tokenized candidate sentences\n\n  Returns:\n    summary level ROUGE score\n  \"\"\"", "\n", "if", "not", "ref_sent", "or", "not", "can_sent", ":", "\n", "        ", "return", "scoring", ".", "Score", "(", "precision", "=", "0", ",", "recall", "=", "0", ",", "fmeasure", "=", "0", ")", "\n", "\n", "", "m", "=", "sum", "(", "map", "(", "len", ",", "ref_sent", ")", ")", "\n", "n", "=", "sum", "(", "map", "(", "len", ",", "can_sent", ")", ")", "\n", "if", "not", "n", "or", "not", "m", ":", "\n", "        ", "return", "scoring", ".", "Score", "(", "precision", "=", "0", ",", "recall", "=", "0", ",", "fmeasure", "=", "0", ")", "\n", "\n", "# get token counts to prevent double counting", "\n", "", "token_cnts_r", "=", "collections", ".", "Counter", "(", ")", "\n", "token_cnts_c", "=", "collections", ".", "Counter", "(", ")", "\n", "for", "s", "in", "ref_sent", ":", "\n", "# s is a list of tokens", "\n", "        ", "token_cnts_r", ".", "update", "(", "s", ")", "\n", "", "for", "s", "in", "can_sent", ":", "\n", "        ", "token_cnts_c", ".", "update", "(", "s", ")", "\n", "\n", "", "hits", "=", "0", "\n", "for", "r", "in", "ref_sent", ":", "\n", "        ", "lcs", "=", "_union_lcs", "(", "r", ",", "can_sent", ")", "\n", "# Prevent double-counting:", "\n", "# The paper describes just computing hits += len(_union_lcs()),", "\n", "# but the implementation prevents double counting. We also", "\n", "# implement this as in version 1.5.5.", "\n", "for", "t", "in", "lcs", ":", "\n", "            ", "if", "token_cnts_c", "[", "t", "]", ">", "0", "and", "token_cnts_r", "[", "t", "]", ">", "0", ":", "\n", "                ", "hits", "+=", "1", "\n", "token_cnts_c", "[", "t", "]", "-=", "1", "\n", "token_cnts_r", "[", "t", "]", "-=", "1", "\n", "\n", "", "", "", "recall", "=", "hits", "/", "m", "\n", "precision", "=", "hits", "/", "n", "\n", "fmeasure", "=", "scoring", ".", "fmeasure", "(", "precision", ",", "recall", ")", "\n", "return", "scoring", ".", "Score", "(", "precision", "=", "precision", ",", "recall", "=", "recall", ",", "fmeasure", "=", "fmeasure", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.rouge.rouge_scorer._union_lcs": [[242, 254], ["rouge_scorer.lcs_ind", "rouge_scorer._find_union"], "function", ["home.repos.pwc.inspect_result.apple_ml-cread.rouge.rouge_scorer.lcs_ind", "home.repos.pwc.inspect_result.apple_ml-cread.rouge.rouge_scorer._find_union"], ["", "def", "_union_lcs", "(", "ref", ",", "c_list", ")", ":", "\n", "    ", "\"\"\"Find union LCS between a ref sentence and list of candidate sentences.\n\n  Args:\n    ref: list of tokens\n    c_list: list of list of indices for LCS into reference summary\n\n  Returns:\n    List of tokens in ref representing union LCS.\n  \"\"\"", "\n", "lcs_list", "=", "[", "lcs_ind", "(", "ref", ",", "c", ")", "for", "c", "in", "c_list", "]", "\n", "return", "[", "ref", "[", "i", "]", "for", "i", "in", "_find_union", "(", "lcs_list", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.rouge.rouge_scorer._find_union": [[256, 259], ["sorted", "list", "set().union", "set"], "function", ["None"], ["", "def", "_find_union", "(", "lcs_list", ")", ":", "\n", "    ", "\"\"\"Finds union LCS given a list of LCS.\"\"\"", "\n", "return", "sorted", "(", "list", "(", "set", "(", ")", ".", "union", "(", "*", "lcs_list", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.rouge.rouge_scorer.lcs_ind": [[261, 265], ["rouge_scorer._lcs_table", "rouge_scorer._backtrack_norec"], "function", ["home.repos.pwc.inspect_result.apple_ml-cread.rouge.rouge_scorer._lcs_table", "home.repos.pwc.inspect_result.apple_ml-cread.rouge.rouge_scorer._backtrack_norec"], ["", "def", "lcs_ind", "(", "ref", ",", "can", ")", ":", "\n", "    ", "\"\"\"Returns one of the longest lcs.\"\"\"", "\n", "t", "=", "_lcs_table", "(", "ref", ",", "can", ")", "\n", "return", "_backtrack_norec", "(", "t", ",", "ref", ",", "can", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.rouge.rouge_scorer._score_ngrams": [[267, 290], ["six.iterkeys", "sum", "sum", "qr_eval.qr.rouge.scoring.fmeasure", "qr_eval.qr.rouge.scoring.Score", "min", "target_ngrams.values", "prediction_ngrams.values", "max", "max"], "function", ["home.repos.pwc.inspect_result.apple_ml-cread.rouge.scoring.fmeasure"], ["", "def", "_score_ngrams", "(", "target_ngrams", ",", "prediction_ngrams", ")", ":", "\n", "    ", "\"\"\"Compute n-gram based rouge scores.\n\n  Args:\n    target_ngrams: A Counter object mapping each ngram to number of\n      occurrences for the target text.\n    prediction_ngrams: A Counter object mapping each ngram to number of\n      occurrences for the prediction text.\n  Returns:\n    A Score object containing computed scores.\n  \"\"\"", "\n", "\n", "intersection_ngrams_count", "=", "0", "\n", "for", "ngram", "in", "six", ".", "iterkeys", "(", "target_ngrams", ")", ":", "\n", "        ", "intersection_ngrams_count", "+=", "min", "(", "target_ngrams", "[", "ngram", "]", ",", "prediction_ngrams", "[", "ngram", "]", ")", "\n", "", "target_ngrams_count", "=", "sum", "(", "target_ngrams", ".", "values", "(", ")", ")", "\n", "prediction_ngrams_count", "=", "sum", "(", "prediction_ngrams", ".", "values", "(", ")", ")", "\n", "\n", "precision", "=", "intersection_ngrams_count", "/", "max", "(", "prediction_ngrams_count", ",", "1", ")", "\n", "recall", "=", "intersection_ngrams_count", "/", "max", "(", "target_ngrams_count", ",", "1", ")", "\n", "fmeasure", "=", "scoring", ".", "fmeasure", "(", "precision", ",", "recall", ")", "\n", "\n", "return", "scoring", ".", "Score", "(", "precision", "=", "precision", ",", "recall", "=", "recall", ",", "fmeasure", "=", "fmeasure", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.apple_ml-cread.training.metrics.MetricCollection.__init__": [[19, 22], ["metrics.F1", "metrics.UtteranceScore"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "f1_metric", "=", "F1", "(", ")", "\n", "self", ".", "utterance_metric", "=", "UtteranceScore", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.training.metrics.MetricCollection.__call__": [[24, 29], ["metrics.MetricCollection.f1_metric", "metrics.MetricCollection.utterance_metric"], "methods", ["None"], ["", "def", "__call__", "(", "\n", "self", ",", "ref_list", ":", "List", "[", "List", "[", "str", "]", "]", ",", "hypo_list", ":", "List", "[", "List", "[", "str", "]", "]", ",", "input_list", ":", "List", "[", "List", "[", "str", "]", "]", "\n", ")", ":", "\n", "        ", "self", ".", "f1_metric", "(", "ref_list", ",", "hypo_list", ",", "input_list", ")", "\n", "self", ".", "utterance_metric", "(", "ref_list", ",", "hypo_list", ",", "input_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.training.metrics.MetricCollection.get_metric": [[31, 36], ["metrics.MetricCollection.f1_metric.get_metric", "metrics.MetricCollection.utterance_metric.get_metric", "metrics.MetricCollection.reset"], "methods", ["home.repos.pwc.inspect_result.apple_ml-cread.training.metrics.UtteranceScore.get_metric", "home.repos.pwc.inspect_result.apple_ml-cread.training.metrics.UtteranceScore.get_metric", "home.repos.pwc.inspect_result.apple_ml-cread.training.metrics.UtteranceScore.reset"], ["", "def", "get_metric", "(", "self", ",", "reset", ":", "bool", "=", "False", ")", "->", "Dict", "[", "str", ",", "float", "]", ":", "\n", "        ", "metrics", "=", "{", "**", "self", ".", "f1_metric", ".", "get_metric", "(", ")", ",", "**", "self", ".", "utterance_metric", ".", "get_metric", "(", ")", "}", "\n", "if", "reset", ":", "\n", "            ", "self", ".", "reset", "(", ")", "\n", "", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.training.metrics.MetricCollection.get_result": [[37, 39], ["metrics.MetricCollection.utterance_metric.get_result"], "methods", ["home.repos.pwc.inspect_result.apple_ml-cread.training.metrics.UtteranceScore.get_result"], ["", "def", "get_result", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "utterance_metric", ".", "get_result", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.training.metrics.MetricCollection.reset": [[41, 44], ["metrics.MetricCollection.f1_metric.reset", "metrics.MetricCollection.utterance_metric.reset"], "methods", ["home.repos.pwc.inspect_result.apple_ml-cread.training.metrics.UtteranceScore.reset", "home.repos.pwc.inspect_result.apple_ml-cread.training.metrics.UtteranceScore.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "f1_metric", ".", "reset", "(", ")", "\n", "self", ".", "utterance_metric", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.training.metrics.MetricCollection.__str__": [[46, 55], ["metrics.MetricCollection.get_metric", "sorted", "header_format.format", "value_format.format", "metrics.MetricCollection.keys", "len", "len", "map", "metrics.MetricCollection.get_metric"], "methods", ["home.repos.pwc.inspect_result.apple_ml-cread.training.metrics.UtteranceScore.get_metric", "home.repos.pwc.inspect_result.apple_ml-cread.training.metrics.UtteranceScore.get_metric"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "# Set left align 12 spaces for each column", "\n", "        ", "metric", "=", "self", ".", "get_metric", "(", ")", "\n", "keys", "=", "sorted", "(", "metric", ".", "keys", "(", ")", ")", "\n", "header_format", "=", "\"{:<12}\"", "*", "len", "(", "keys", ")", "\n", "value_format", "=", "\"{:<12.2f}\"", "*", "len", "(", "keys", ")", "\n", "header", "=", "header_format", ".", "format", "(", "*", "keys", ")", "\n", "value", "=", "value_format", ".", "format", "(", "*", "map", "(", "self", ".", "get_metric", "(", ")", ".", "get", ",", "keys", ")", ")", "\n", "return", "header", "+", "\"\\n\"", "+", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.training.metrics.F1.__init__": [[58, 67], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "# Macro F1 stats", "\n", "        ", "self", ".", "macro_precision_list", "=", "[", "]", "\n", "self", ".", "macro_recall_list", "=", "[", "]", "\n", "self", ".", "macro_f1_list", "=", "[", "]", "\n", "# Micro F1 stats", "\n", "self", ".", "micro_true_positive", "=", "0.0", "\n", "self", ".", "micro_false_negative", "=", "0.0", "\n", "self", ".", "micro_false_positive", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.training.metrics.F1._single_call": [[70, 89], ["sum", "sum", "sum", "collections.Counter", "collections.Counter", "collections.Counter", "collections.Counter", "sum", "sum", "ground_truth.values", "prediction.values", "sum", "sum", "prediction.values", "ground_truth.values"], "methods", ["None"], ["", "def", "_single_call", "(", "self", ",", "ref", ":", "List", "[", "str", "]", ",", "hypo", ":", "List", "[", "str", "]", ",", "implicit", ":", "List", "[", "str", "]", ")", ":", "\n", "# Construct counts, + removes remove zero and negative", "\n", "        ", "ground_truth", "=", "+", "(", "Counter", "(", "ref", ")", "-", "Counter", "(", "implicit", ")", ")", "\n", "prediction", "=", "+", "(", "Counter", "(", "hypo", ")", "-", "Counter", "(", "implicit", ")", ")", "\n", "true_positive", "=", "sum", "(", "(", "prediction", "&", "ground_truth", ")", ".", "values", "(", ")", ")", "\n", "# Micro stats increment, += is 'atomic' in python so we can do this", "\n", "self", ".", "micro_true_positive", "+=", "true_positive", "\n", "self", ".", "micro_false_negative", "+=", "sum", "(", "(", "+", "(", "ground_truth", "-", "prediction", ")", ")", ".", "values", "(", ")", ")", "\n", "self", ".", "micro_false_positive", "+=", "sum", "(", "(", "+", "(", "prediction", "-", "ground_truth", ")", ")", ".", "values", "(", ")", ")", "\n", "# if Ref doesn't contain more info than implicit, consider it correct", "\n", "if", "sum", "(", "ground_truth", ".", "values", "(", ")", ")", "==", "0", "and", "sum", "(", "prediction", ".", "values", "(", ")", ")", "==", "0", ":", "\n", "            ", "precision", ",", "recall", ",", "f1", "=", "1.0", ",", "1.0", ",", "1.0", "\n", "", "elif", "true_positive", "==", "0.0", ":", "\n", "            ", "precision", ",", "recall", ",", "f1", "=", "0.0", ",", "0.0", ",", "0.0", "\n", "", "else", ":", "\n", "            ", "precision", "=", "true_positive", "/", "sum", "(", "prediction", ".", "values", "(", ")", ")", "\n", "recall", "=", "true_positive", "/", "sum", "(", "ground_truth", ".", "values", "(", ")", ")", "\n", "f1", "=", "2", "*", "precision", "*", "recall", "/", "(", "precision", "+", "recall", ")", "\n", "", "return", "precision", ",", "recall", ",", "f1", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.training.metrics.F1.__call__": [[90, 97], ["zip", "map"], "methods", ["None"], ["", "def", "__call__", "(", "\n", "self", ",", "ref_list", ":", "List", "[", "List", "[", "str", "]", "]", ",", "hypo_list", ":", "List", "[", "List", "[", "str", "]", "]", ",", "implicit_list", ":", "List", "[", "List", "[", "str", "]", "]", "\n", ")", ":", "\n", "        ", "precision", ",", "recall", ",", "f1", "=", "zip", "(", "*", "map", "(", "self", ".", "_single_call", ",", "ref_list", ",", "hypo_list", ",", "implicit_list", ")", ")", "\n", "self", ".", "macro_precision_list", "+=", "precision", "\n", "self", ".", "macro_recall_list", "+=", "recall", "\n", "self", ".", "macro_f1_list", "+=", "f1", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.training.metrics.F1.get_metric": [[99, 122], ["metrics.F1.reset", "sum", "len", "sum", "len", "sum", "len"], "methods", ["home.repos.pwc.inspect_result.apple_ml-cread.training.metrics.UtteranceScore.reset"], ["", "def", "get_metric", "(", "self", ",", "reset", ":", "bool", "=", "False", ")", "->", "Dict", "[", "str", ",", "float", "]", ":", "\n", "        ", "metrics", "=", "{", "}", "\n", "# Compute Micro Stats", "\n", "precision", "=", "self", ".", "micro_true_positive", "/", "(", "\n", "#            self.micro_true_positive + self.micro_false_negative", "\n", "self", ".", "micro_true_positive", "+", "self", ".", "micro_false_positive", "\n", ")", "\n", "#        recall = self.micro_true_positive / (self.micro_true_positive + self.micro_false_positive)", "\n", "recall", "=", "self", ".", "micro_true_positive", "/", "(", "self", ".", "micro_true_positive", "+", "self", ".", "micro_false_negative", ")", "\n", "if", "self", ".", "micro_true_positive", "==", "0", ":", "\n", "            ", "f1", "=", "0.0", "\n", "", "else", ":", "\n", "            ", "f1", "=", "2", "*", "precision", "*", "recall", "/", "(", "precision", "+", "recall", ")", "\n", "", "metrics", "[", "\"Micro P\"", "]", "=", "precision", "*", "100", "\n", "metrics", "[", "\"Micro R\"", "]", "=", "recall", "*", "100", "\n", "metrics", "[", "\"Micro F1\"", "]", "=", "f1", "*", "100", "\n", "# Compute Macro Stats", "\n", "metrics", "[", "\"Macro P\"", "]", "=", "sum", "(", "self", ".", "macro_precision_list", ")", "/", "len", "(", "self", ".", "macro_precision_list", ")", "*", "100", "\n", "metrics", "[", "\"Macro R\"", "]", "=", "sum", "(", "self", ".", "macro_recall_list", ")", "/", "len", "(", "self", ".", "macro_recall_list", ")", "*", "100", "\n", "metrics", "[", "\"Macro F1\"", "]", "=", "sum", "(", "self", ".", "macro_f1_list", ")", "/", "len", "(", "self", ".", "macro_f1_list", ")", "*", "100", "\n", "if", "reset", ":", "\n", "            ", "self", ".", "reset", "(", ")", "\n", "", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.training.metrics.F1.reset": [[123, 132], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "# Macro F1 stats", "\n", "        ", "self", ".", "macro_precision_list", "=", "[", "]", "\n", "self", ".", "macro_recall_list", "=", "[", "]", "\n", "self", ".", "macro_f1_list", "=", "[", "]", "\n", "# Micro F1 stats", "\n", "self", ".", "micro_true_positive", "=", "0.0", "\n", "self", ".", "micro_false_negative", "=", "0.0", "\n", "self", ".", "micro_false_positive", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.training.metrics.UtteranceScore.__init__": [[136, 143], ["qr_eval.qr.rouge.rouge_scorer.RougeScorer"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "# Store results to compute bleu / rouge score afterwards", "\n", "        ", "self", ".", "ref_list", ":", "List", "[", "str", "]", "=", "[", "]", "\n", "self", ".", "hypo_list", ":", "List", "[", "str", "]", "=", "[", "]", "\n", "self", ".", "implicit_list", ":", "List", "[", "str", "]", "=", "[", "]", "\n", "self", ".", "rouge", "=", "rouge_scorer", ".", "RougeScorer", "(", "[", "\"rouge1\"", ",", "\"rouge2\"", ",", "\"rougeL\"", "]", ",", "use_stemmer", "=", "True", ")", "\n", "self", ".", "metric_mapping", "=", "{", "\"precision\"", ":", "\"P\"", ",", "\"recall\"", ":", "\"R\"", ",", "\"fmeasure\"", ":", "\"F1\"", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.training.metrics.UtteranceScore._filter_detokenize": [[144, 148], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "# Get rid of indicator tokens, turn indices into string", "\n", "def", "_filter_detokenize", "(", "indices", ":", "List", "[", "str", "]", ")", ":", "\n", "        ", "return", "\" \"", ".", "join", "(", "[", "x", "for", "x", "in", "indices", "if", "x", "not", "in", "indicator_tokens", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.training.metrics.UtteranceScore.__call__": [[149, 168], ["zip", "map", "metrics.UtteranceScore._filter_detokenize", "metrics.UtteranceScore._filter_detokenize", "metrics.UtteranceScore._filter_detokenize"], "methods", ["home.repos.pwc.inspect_result.apple_ml-cread.training.metrics.UtteranceScore._filter_detokenize", "home.repos.pwc.inspect_result.apple_ml-cread.training.metrics.UtteranceScore._filter_detokenize", "home.repos.pwc.inspect_result.apple_ml-cread.training.metrics.UtteranceScore._filter_detokenize"], ["", "def", "__call__", "(", "\n", "self", ",", "ref_list", ":", "List", "[", "List", "[", "str", "]", "]", ",", "hypo_list", ":", "List", "[", "List", "[", "str", "]", "]", ",", "implicit_list", ":", "List", "[", "List", "[", "str", "]", "]", "\n", ")", ":", "\n", "# Get rid of indicator tokens, turn indices into string", "\n", "        ", "ref", ",", "hypo", ",", "implicit", "=", "zip", "(", "\n", "*", "map", "(", "\n", "lambda", "r", ",", "h", ",", "i", ":", "(", "\n", "self", ".", "_filter_detokenize", "(", "r", ")", ",", "\n", "self", ".", "_filter_detokenize", "(", "h", ")", ",", "\n", "self", ".", "_filter_detokenize", "(", "i", ")", ",", "\n", ")", ",", "\n", "ref_list", ",", "\n", "hypo_list", ",", "\n", "implicit_list", ",", "\n", ")", "\n", ")", "\n", "self", ".", "ref_list", "+=", "ref", "\n", "self", ".", "hypo_list", "+=", "hypo", "\n", "self", ".", "implicit_list", "+=", "implicit", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.training.metrics.UtteranceScore._unpack_rouge": [[169, 172], ["metrics.UtteranceScore.rouge.score"], "methods", ["home.repos.pwc.inspect_result.apple_ml-cread.rouge.rouge_scorer.RougeScorer.score"], ["", "def", "_unpack_rouge", "(", "self", ",", "r", ",", "h", ")", ":", "\n", "        ", "rouge_metrics", "=", "self", ".", "rouge", ".", "score", "(", "r", ",", "h", ")", "\n", "return", "[", "rouge_metrics", "[", "k", "]", "for", "k", "in", "self", ".", "rouge", ".", "rouge_types", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.training.metrics.UtteranceScore.get_metric": [[173, 185], ["list", "enumerate", "bleu.list_bleu", "map", "zip", "enumerate", "metrics.UtteranceScore.reset", "metrics.UtteranceScore.metric_mapping.keys", "sum", "len", "metrics.UtteranceScore.rouge.rouge_types[].upper"], "methods", ["home.repos.pwc.inspect_result.apple_ml-cread.training.metrics.UtteranceScore.reset"], ["", "def", "get_metric", "(", "self", ",", "reset", ":", "bool", "=", "False", ")", ":", "\n", "        ", "metrics", "=", "{", "\"BLEU\"", ":", "bleu", ".", "list_bleu", "(", "[", "self", ".", "ref_list", "]", ",", "self", ".", "hypo_list", ")", "}", "\n", "# Compute score for each pair and rouge type", "\n", "rouge_list", ":", "List", "[", "List", "[", "Score", "]", "]", "=", "list", "(", "map", "(", "self", ".", "_unpack_rouge", ",", "self", ".", "ref_list", ",", "self", ".", "hypo_list", ")", ")", "\n", "for", "i", ",", "current_rouge", "in", "enumerate", "(", "zip", "(", "*", "rouge_list", ")", ")", ":", "\n", "            ", "for", "j", ",", "metric_name", "in", "enumerate", "(", "self", ".", "metric_mapping", ".", "keys", "(", ")", ")", ":", "\n", "                ", "metrics", "[", "\n", "f\"{self.rouge.rouge_types[i].upper()} {self.metric_mapping[metric_name]}\"", "\n", "]", "=", "(", "sum", "(", "score", "[", "j", "]", "for", "score", "in", "current_rouge", ")", "/", "len", "(", "current_rouge", ")", "*", "100", ")", "\n", "", "", "if", "reset", ":", "\n", "            ", "self", ".", "reset", "(", ")", "\n", "", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.training.metrics.UtteranceScore.reset": [[186, 190], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "ref_list", "=", "[", "]", "\n", "self", ".", "hypo_list", "=", "[", "]", "\n", "self", ".", "implicit_list", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-cread.training.metrics.UtteranceScore.get_result": [[191, 193], ["list", "zip"], "methods", ["None"], ["", "def", "get_result", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "zip", "(", "self", ".", "ref_list", ",", "self", ".", "hypo_list", ",", "self", ".", "implicit_list", ")", ")", "\n", "", "", ""]]}