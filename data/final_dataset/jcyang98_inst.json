{"home.repos.pwc.inspect_result.jcyang98_inst.None.utils_save.save_loss": [[13, 46], ["matplotlib.clf", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.savefig", "matplotlib.close", "os.path.exists", "os.makedirs", "open", "range", "open", "range", "open", "range", "open", "range", "numpy.multiply", "numpy.multiply", "numpy.multiply", "matplotlib.plot", "len", "opt_file.write", "len", "opt_file.write", "len", "opt_file.write", "len", "opt_file.write", "open", "range", "numpy.multiply", "len", "opt_file.write"], "function", ["None"], ["def", "save_loss", "(", "output_dir", ",", "ell_warp_list", ",", "ell_warp_TV_list", ",", "ell_warp_sem_list", ",", "ell_list", ",", "warp_weight", ",", "reg_weight", ",", "sem_weight", ",", "ell_warp_2_list", "=", "None", ",", "warp_weight_2", "=", "None", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", "+", "'/loss'", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_dir", "+", "'/loss'", ")", "\n", "", "with", "open", "(", "output_dir", "+", "'/loss/'", "+", "'ell.txt'", ",", "'wt'", ")", "as", "opt_file", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "ell_list", ")", ")", ":", "\n", "            ", "opt_file", ".", "write", "(", "'%.6f\\n'", "%", "(", "ell_list", "[", "i", "]", ")", ")", "\n", "", "", "with", "open", "(", "output_dir", "+", "'/loss/'", "+", "'ell_warp.txt'", ",", "'wt'", ")", "as", "opt_file", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "ell_warp_list", ")", ")", ":", "\n", "            ", "opt_file", ".", "write", "(", "'%.6f\\n'", "%", "(", "ell_warp_list", "[", "i", "]", ")", ")", "\n", "", "", "with", "open", "(", "output_dir", "+", "'/loss/'", "+", "'ell_warp_TV.txt'", ",", "'wt'", ")", "as", "opt_file", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "ell_warp_TV_list", ")", ")", ":", "\n", "            ", "opt_file", ".", "write", "(", "'%.6f\\n'", "%", "(", "ell_warp_TV_list", "[", "i", "]", ")", ")", "\n", "", "", "with", "open", "(", "output_dir", "+", "'/loss/'", "+", "'ell_semantic.txt'", ",", "'wt'", ")", "as", "opt_file", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "ell_warp_sem_list", ")", ")", ":", "\n", "            ", "opt_file", ".", "write", "(", "'%.6f\\n'", "%", "(", "ell_warp_sem_list", "[", "i", "]", ")", ")", "\n", "", "", "if", "ell_warp_2_list", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "output_dir", "+", "'/loss/'", "+", "'ell_warp_2.txt'", ",", "'wt'", ")", "as", "opt_file", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "ell_warp_list", ")", ")", ":", "\n", "                ", "opt_file", ".", "write", "(", "'%.6f\\n'", "%", "(", "ell_warp_2_list", "[", "i", "]", ")", ")", "\n", "\n", "", "", "", "plt", ".", "clf", "(", ")", "\n", "plt", ".", "plot", "(", "ell_list", ",", "label", "=", "'Total loss'", ")", "\n", "plt", ".", "plot", "(", "np", ".", "multiply", "(", "ell_warp_list", ",", "warp_weight", ")", ",", "label", "=", "'alpha * Lwarp'", ")", "\n", "plt", ".", "plot", "(", "np", ".", "multiply", "(", "ell_warp_TV_list", ",", "reg_weight", ")", ",", "label", "=", "'beta * TV'", ")", "\n", "plt", ".", "plot", "(", "np", ".", "multiply", "(", "ell_warp_sem_list", ",", "sem_weight", ")", ",", "label", "=", "'delta * semantic'", ")", "\n", "if", "ell_warp_2_list", "is", "not", "None", ":", "\n", "        ", "plt", ".", "plot", "(", "np", ".", "multiply", "(", "ell_warp_2_list", ",", "warp_weight_2", ")", ",", "label", "=", "'gama * Lwarp_2'", ")", "\n", "\n", "", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "xlabel", "(", "'Iter'", ")", "\n", "plt", ".", "ylabel", "(", "'Loss'", ")", "\n", "plt", ".", "savefig", "(", "output_dir", "+", "'/loss/'", "+", "'loss.png'", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.None.utils_save.make_color_wheel": [[47, 95], ["numpy.zeros", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.floor", "numpy.transpose", "numpy.floor", "numpy.transpose", "numpy.floor", "numpy.transpose", "numpy.floor", "numpy.floor", "numpy.floor", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange"], "function", ["None"], ["", "def", "make_color_wheel", "(", ")", ":", "\n", "    ", "\"\"\"\n    Generate color wheel according Middlebury color code\n    :return: Color wheel\n    \"\"\"", "\n", "RY", "=", "15", "\n", "YG", "=", "6", "\n", "GC", "=", "4", "\n", "CB", "=", "11", "\n", "BM", "=", "13", "\n", "MR", "=", "6", "\n", "\n", "ncols", "=", "RY", "+", "YG", "+", "GC", "+", "CB", "+", "BM", "+", "MR", "\n", "\n", "colorwheel", "=", "np", ".", "zeros", "(", "[", "ncols", ",", "3", "]", ")", "\n", "\n", "col", "=", "0", "\n", "\n", "# RY", "\n", "colorwheel", "[", "0", ":", "RY", ",", "0", "]", "=", "255", "\n", "colorwheel", "[", "0", ":", "RY", ",", "1", "]", "=", "np", ".", "transpose", "(", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "0", ",", "RY", ")", "/", "RY", ")", ")", "\n", "col", "+=", "RY", "\n", "\n", "# YG", "\n", "colorwheel", "[", "col", ":", "col", "+", "YG", ",", "0", "]", "=", "255", "-", "np", ".", "transpose", "(", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "0", ",", "YG", ")", "/", "YG", ")", ")", "\n", "colorwheel", "[", "col", ":", "col", "+", "YG", ",", "1", "]", "=", "255", "\n", "col", "+=", "YG", "\n", "\n", "# GC", "\n", "colorwheel", "[", "col", ":", "col", "+", "GC", ",", "1", "]", "=", "255", "\n", "colorwheel", "[", "col", ":", "col", "+", "GC", ",", "2", "]", "=", "np", ".", "transpose", "(", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "0", ",", "GC", ")", "/", "GC", ")", ")", "\n", "col", "+=", "GC", "\n", "\n", "# CB", "\n", "colorwheel", "[", "col", ":", "col", "+", "CB", ",", "1", "]", "=", "255", "-", "np", ".", "transpose", "(", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "0", ",", "CB", ")", "/", "CB", ")", ")", "\n", "colorwheel", "[", "col", ":", "col", "+", "CB", ",", "2", "]", "=", "255", "\n", "col", "+=", "CB", "\n", "\n", "# BM", "\n", "colorwheel", "[", "col", ":", "col", "+", "BM", ",", "2", "]", "=", "255", "\n", "colorwheel", "[", "col", ":", "col", "+", "BM", ",", "0", "]", "=", "np", ".", "transpose", "(", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "0", ",", "BM", ")", "/", "BM", ")", ")", "\n", "col", "+=", "+", "BM", "\n", "\n", "# MR", "\n", "colorwheel", "[", "col", ":", "col", "+", "MR", ",", "2", "]", "=", "255", "-", "np", ".", "transpose", "(", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "0", ",", "MR", ")", "/", "MR", ")", ")", "\n", "colorwheel", "[", "col", ":", "col", "+", "MR", ",", "0", "]", "=", "255", "\n", "\n", "return", "colorwheel", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.None.utils_save.compute_color": [[96, 138], ["numpy.zeros", "utils_save.make_color_wheel", "numpy.size", "numpy.sqrt", "numpy.floor().astype", "range", "numpy.isnan", "numpy.isnan", "numpy.arctan2", "numpy.size", "numpy.logical_not", "numpy.uint8", "numpy.floor", "numpy.floor"], "function", ["home.repos.pwc.inspect_result.jcyang98_inst.None.utils_save.make_color_wheel"], ["", "def", "compute_color", "(", "u", ",", "v", ")", ":", "\n", "    ", "\"\"\"\n    compute optical flow color map\n    :param u: optical flow horizontal map\n    :param v: optical flow vertical map\n    :return: optical flow in color code\n    \"\"\"", "\n", "[", "h", ",", "w", "]", "=", "u", ".", "shape", "\n", "img", "=", "np", ".", "zeros", "(", "[", "h", ",", "w", ",", "3", "]", ")", "\n", "nanIdx", "=", "np", ".", "isnan", "(", "u", ")", "|", "np", ".", "isnan", "(", "v", ")", "\n", "u", "[", "nanIdx", "]", "=", "0", "\n", "v", "[", "nanIdx", "]", "=", "0", "\n", "\n", "colorwheel", "=", "make_color_wheel", "(", ")", "\n", "ncols", "=", "np", ".", "size", "(", "colorwheel", ",", "0", ")", "\n", "\n", "rad", "=", "np", ".", "sqrt", "(", "u", "**", "2", "+", "v", "**", "2", ")", "\n", "\n", "a", "=", "np", ".", "arctan2", "(", "-", "v", ",", "-", "u", ")", "/", "np", ".", "pi", "\n", "\n", "fk", "=", "(", "a", "+", "1", ")", "/", "2", "*", "(", "ncols", "-", "1", ")", "+", "1", "\n", "\n", "k0", "=", "np", ".", "floor", "(", "fk", ")", ".", "astype", "(", "int", ")", "\n", "\n", "k1", "=", "k0", "+", "1", "\n", "k1", "[", "k1", "==", "ncols", "+", "1", "]", "=", "1", "\n", "f", "=", "fk", "-", "k0", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "np", ".", "size", "(", "colorwheel", ",", "1", ")", ")", ":", "\n", "        ", "tmp", "=", "colorwheel", "[", ":", ",", "i", "]", "\n", "col0", "=", "tmp", "[", "k0", "-", "1", "]", "/", "255", "\n", "col1", "=", "tmp", "[", "k1", "-", "1", "]", "/", "255", "\n", "col", "=", "(", "1", "-", "f", ")", "*", "col0", "+", "f", "*", "col1", "\n", "\n", "idx", "=", "rad", "<=", "1", "\n", "col", "[", "idx", "]", "=", "1", "-", "rad", "[", "idx", "]", "*", "(", "1", "-", "col", "[", "idx", "]", ")", "\n", "notidx", "=", "np", ".", "logical_not", "(", "idx", ")", "\n", "\n", "col", "[", "notidx", "]", "*=", "0.75", "\n", "img", "[", ":", ",", ":", ",", "i", "]", "=", "np", ".", "uint8", "(", "np", ".", "floor", "(", "255", "*", "col", "*", "(", "1", "-", "nanIdx", ")", ")", ")", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.None.utils_save.flow_to_image": [[139, 180], ["flow.squeeze().permute().detach().cpu().squeeze().numpy.squeeze().permute().detach().cpu().squeeze().numpy", "max", "min", "max", "min", "numpy.sqrt", "max", "utils_save.compute_color", "numpy.repeat", "numpy.uint8", "numpy.max", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "flow.squeeze().permute().detach().cpu().squeeze().numpy.squeeze().permute().detach().cpu().squeeze", "abs", "abs", "numpy.finfo", "numpy.finfo", "flow.squeeze().permute().detach().cpu().squeeze().numpy.squeeze().permute().detach().cpu", "flow.squeeze().permute().detach().cpu().squeeze().numpy.squeeze().permute().detach", "flow.squeeze().permute().detach().cpu().squeeze().numpy.squeeze().permute", "flow.squeeze().permute().detach().cpu().squeeze().numpy.squeeze"], "function", ["home.repos.pwc.inspect_result.jcyang98_inst.None.utils_save.compute_color"], ["", "def", "flow_to_image", "(", "flow", ")", ":", "\n", "    ", "\"\"\"\n    Convert flow into middlebury color code image\n    :param flow: optical flow map [1,2,H,W] Tensor\n    :return: optical flow image in middlebury color\n    \"\"\"", "\n", "flow", "=", "flow", ".", "squeeze", "(", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "squeeze", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "u", "=", "flow", "[", ":", ",", ":", ",", "0", "]", "\n", "v", "=", "flow", "[", ":", ",", ":", ",", "1", "]", "\n", "\n", "maxu", "=", "-", "999.", "\n", "maxv", "=", "-", "999.", "\n", "minu", "=", "999.", "\n", "minv", "=", "999.", "\n", "UNKNOWN_FLOW_THRESH", "=", "1e7", "\n", "SMALLFLOW", "=", "0.0", "\n", "LARGEFLOW", "=", "1e8", "\n", "\n", "idxUnknow", "=", "(", "abs", "(", "u", ")", ">", "UNKNOWN_FLOW_THRESH", ")", "|", "(", "abs", "(", "v", ")", ">", "UNKNOWN_FLOW_THRESH", ")", "\n", "u", "[", "idxUnknow", "]", "=", "0", "\n", "v", "[", "idxUnknow", "]", "=", "0", "\n", "\n", "maxu", "=", "max", "(", "maxu", ",", "np", ".", "max", "(", "u", ")", ")", "\n", "minu", "=", "min", "(", "minu", ",", "np", ".", "min", "(", "u", ")", ")", "\n", "\n", "maxv", "=", "max", "(", "maxv", ",", "np", ".", "max", "(", "v", ")", ")", "\n", "minv", "=", "min", "(", "minv", ",", "np", ".", "min", "(", "v", ")", ")", "\n", "\n", "rad", "=", "np", ".", "sqrt", "(", "u", "**", "2", "+", "v", "**", "2", ")", "\n", "maxrad", "=", "max", "(", "-", "1", ",", "np", ".", "max", "(", "rad", ")", ")", "\n", "\n", "u", "=", "u", "/", "(", "maxrad", "+", "np", ".", "finfo", "(", "float", ")", ".", "eps", ")", "\n", "v", "=", "v", "/", "(", "maxrad", "+", "np", ".", "finfo", "(", "float", ")", ".", "eps", ")", "\n", "\n", "img", "=", "compute_color", "(", "u", ",", "v", ")", "\n", "\n", "idx", "=", "np", ".", "repeat", "(", "idxUnknow", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", ",", "3", ",", "axis", "=", "2", ")", "\n", "img", "[", "idx", "]", "=", "0", "\n", "\n", "return", "np", ".", "uint8", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.None.utils_save.save_flow": [[181, 188], ["utils_save.flow_to_image", "PIL.Image.fromarray", "Image.fromarray.save"], "function", ["home.repos.pwc.inspect_result.jcyang98_inst.utils.flow_viz.flow_to_image"], ["", "def", "save_flow", "(", "output_path", ",", "flow", ")", ":", "\n", "    ", "'''\n        flow \uff1a [1,2,H,W] Tensor\n    '''", "\n", "flow_np", "=", "flow_to_image", "(", "flow", ")", "\n", "flow_pil", "=", "Image", ".", "fromarray", "(", "flow_np", ")", "\n", "flow_pil", ".", "save", "(", "output_path", ")", "", "", ""]], "home.repos.pwc.inspect_result.jcyang98_inst.None.segmentation.segment": [[31, 96], ["print", "detectron2.config.get_cfg", "detectron2.projects.point_rend.add_pointrend_config", "detectron2.config.get_cfg.merge_from_file", "detectron2.engine.DefaultPredictor", "tqdm.tqdm", "print", "len", "cv2.imread", "detectron2.engine.DefaultPredictor.", "outputs[].pred_masks[].float.unsqueeze().unsqueeze().cpu", "torchvision.utils.save_image", "mask_paths.append", "str", "print", "exit", "outputs[].pred_boxes[].tensor.squeeze", "range", "outputs[].pred_masks[].float", "print", "print", "outputs[].pred_boxes[].tensor.squeeze", "outputs[].pred_masks[].float.unsqueeze().unsqueeze", "outputs[].pred_masks[].float.unsqueeze"], "function", ["None"], ["def", "segment", "(", "data_paths", ")", ":", "\n", "    ", "print", "(", "'total images number: '", ",", "len", "(", "data_paths", ")", ")", "\n", "\n", "cfg", "=", "get_cfg", "(", ")", "\n", "# Add PointRend-specific config", "\n", "point_rend", ".", "add_pointrend_config", "(", "cfg", ")", "\n", "# Load a config from file", "\n", "cfg", ".", "merge_from_file", "(", "\"detectron2_repo/projects/PointRend/configs/InstanceSegmentation/pointrend_rcnn_R_50_FPN_3x_coco.yaml\"", ")", "\n", "cfg", ".", "MODEL", ".", "ROI_HEADS", ".", "SCORE_THRESH_TEST", "=", "0.5", "# set threshold for this model", "\n", "# Use a model from PointRend model zoo: https://github.com/facebookresearch/detectron2/tree/master/projects/PointRend#pretrained-models", "\n", "# cfg.MODEL.WEIGHTS = \"detectron2://PointRend/InstanceSegmentation/pointrend_rcnn_R_50_FPN_3x_coco/164955410/model_final_edd263.pkl\"", "\n", "\n", "cfg", ".", "MODEL", ".", "WEIGHTS", "=", "\"detectron2_repo/model_final_edd263.pkl\"", "\n", "\n", "predictor", "=", "DefaultPredictor", "(", "cfg", ")", "\n", "\n", "added_mask_num", "=", "0", "\n", "mask_paths", "=", "[", "]", "\n", "for", "data_path", "in", "tqdm", "(", "data_paths", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "im", "=", "cv2", ".", "imread", "(", "str", "(", "data_path", ")", ")", "\n", "outputs", "=", "predictor", "(", "im", ")", "\n", "instance_num", "=", "outputs", "[", "'instances'", "]", ".", "pred_masks", ".", "shape", "[", "0", "]", "\n", "if", "instance_num", "==", "0", ":", "\n", "                ", "print", "(", "f'images {data_path} has no instances'", ")", "\n", "# mask = torch.zeros(im.shape[0],im.shape[1])", "\n", "# max_ins_id = -1", "\n", "exit", "(", ")", "\n", "", "else", ":", "\n", "                ", "max_ins_id", "=", "0", "\n", "bbox", "=", "outputs", "[", "'instances'", "]", ".", "pred_boxes", "[", "0", "]", ".", "tensor", ".", "squeeze", "(", ")", "\n", "max_area", "=", "(", "bbox", "[", "2", "]", "-", "bbox", "[", "0", "]", ")", "*", "(", "bbox", "[", "3", "]", "-", "bbox", "[", "1", "]", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "instance_num", ")", ":", "\n", "                    ", "bbox", "=", "outputs", "[", "'instances'", "]", ".", "pred_boxes", "[", "i", "]", ".", "tensor", ".", "squeeze", "(", ")", "\n", "area", "=", "(", "bbox", "[", "2", "]", "-", "bbox", "[", "0", "]", ")", "*", "(", "bbox", "[", "3", "]", "-", "bbox", "[", "1", "]", ")", "\n", "if", "area", ">", "max_area", ":", "\n", "                        ", "max_ins_id", "=", "i", "\n", "", "", "mask", "=", "outputs", "[", "'instances'", "]", ".", "pred_masks", "[", "max_ins_id", "]", ".", "float", "(", ")", "\n", "\n", "", "mask", "=", "mask", ".", "unsqueeze", "(", "dim", "=", "0", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", ".", "cpu", "(", ")", "\n", "mask_path", "=", "data_path", ".", "parent", "/", "f'{data_path.stem}_mask.jpg'", "\n", "save_image", "(", "mask", ",", "mask_path", ")", "\n", "mask_paths", ".", "append", "(", "mask_path", ")", "\n", "added_mask_num", "+=", "1", "\n", "\n", "# if max_ins_id != -1:", "\n", "#     rect = outputs['instances'].pred_boxes[max_ins_id].tensor.int().squeeze().tolist()", "\n", "# else:", "\n", "#     rect = None", "\n", "# mask = mask.cpu().numpy().astype('uint8')", "\n", "# # mask = np.zeros(im.shape[:2],np.uint8)", "\n", "# bgdModel = np.zeros((1,65),np.float64)", "\n", "# fgdModel = np.zeros((1,65),np.float64)", "\n", "# cv2.grabCut(im,mask,rect,bgdModel,fgdModel,5,cv2.GC_INIT_WITH_MASK)", "\n", "# mask2 = np.where((mask==2)|(mask==0),0,1).astype('uint8')", "\n", "# save_image(torch.from_numpy(mask2).float().unsqueeze(dim=0).unsqueeze(dim=0).cpu(),os.path.join(args.output_dir,os.path.basename(data_path)))", "\n", "", "except", "KeyboardInterrupt", ":", "\n", "            ", "break", "\n", "", "except", "BaseException", "as", "e", ":", "\n", "            ", "print", "(", "e", ")", "\n", "print", "(", "'except_path: '", ",", "data_path", ")", "\n", "continue", "\n", "\n", "", "", "print", "(", "'added mask number: '", ",", "added_mask_num", ")", "\n", "return", "mask_paths", "", "", ""]], "home.repos.pwc.inspect_result.jcyang98_inst.None.main.get_args": [[35, 99], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "'Warp Model for fast warpping'", ")", "\n", "# basic options", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "'the rank of the process among all the processes of the local node'", ")", "\n", "parser", ".", "add_argument", "(", "'--cpu'", ",", "action", "=", "'store_true'", ",", "help", "=", "'wheather to use cpu , if not set, use gpu'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "42", ",", "help", "=", "'random seed'", ")", "\n", "\n", "# data options", "\n", "parser", ".", "add_argument", "(", "'--source_dir'", ",", "type", "=", "str", ",", "default", "=", "'images/source_mask'", ",", "help", "=", "'Directory path to source images'", ")", "\n", "parser", ".", "add_argument", "(", "'--source2_dir'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'Directory path to source2 images'", ")", "\n", "parser", ".", "add_argument", "(", "'--target_dir'", ",", "type", "=", "str", ",", "default", "=", "'images/target_mask'", ",", "help", "=", "'Directory path to target images'", ")", "\n", "parser", ".", "add_argument", "(", "'--target2_dir'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'Directory path to target2 images'", ")", "\n", "parser", ".", "add_argument", "(", "'--im_height'", ",", "type", "=", "int", ",", "default", "=", "256", ")", "\n", "parser", ".", "add_argument", "(", "'--im_width'", ",", "type", "=", "int", ",", "default", "=", "256", ")", "\n", "parser", ".", "add_argument", "(", "'--num_worker'", ",", "type", "=", "int", ",", "default", "=", "8", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--pair_dir'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'Wheather to use pair dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--pair_txt'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'pair txt file'", ")", "\n", "\n", "# model options", "\n", "parser", ".", "add_argument", "(", "'--model_type'", ",", "type", "=", "str", ",", "default", "=", "'mask_raft'", ",", "choices", "=", "[", "'mask_raft'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrained_model'", ",", "type", "=", "str", ",", "help", "=", "'module of warpping'", ")", "\n", "parser", ".", "add_argument", "(", "'--train_refine_time'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'warp refine time in training'", ")", "\n", "parser", ".", "add_argument", "(", "'--visual_refine_time'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'warp refine time in testing'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_normalize_features'", ",", "action", "=", "'store_true'", ",", "help", "=", "'wheather to feature normalization'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_normalize_matches'", ",", "action", "=", "'store_true'", ",", "help", "=", "'wheather to match normalization'", ")", "\n", "\n", "# loss options", "\n", "parser", ".", "add_argument", "(", "'--loss_method'", ",", "type", "=", "str", ",", "default", "=", "'mse'", ",", "choices", "=", "[", "'mse'", ",", "'classify'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--smooth_loss'", ",", "type", "=", "str", ",", "default", "=", "'1st'", ",", "choices", "=", "[", "'1st'", ",", "'2nd'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--smooth_mask'", ",", "type", "=", "str", ",", "default", "=", "'edge_xor'", ",", "choices", "=", "[", "'none'", ",", "'midgrid'", ",", "'xor'", ",", "'stylemask'", ",", "'or'", ",", "'gauss'", ",", "'style_edge'", ",", "'edge_xor'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--warp_weight'", ",", "type", "=", "float", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--reg_weight'", ",", "type", "=", "float", ",", "default", "=", "0.1", ")", "\n", "parser", ".", "add_argument", "(", "'--semantic_loss'", ",", "action", "=", "'store_true'", ",", "help", "=", "'add semantic loss, ignore it in our work'", ")", "\n", "parser", ".", "add_argument", "(", "'--sem_weight'", ",", "type", "=", "float", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--seq_gamma'", ",", "type", "=", "float", ",", "default", "=", "0.1", ")", "\n", "\n", "# training options", "\n", "parser", ".", "add_argument", "(", "'--num_iter'", ",", "type", "=", "int", ",", "default", "=", "20000", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "16", ")", "\n", "parser", ".", "add_argument", "(", "'--optim'", ",", "type", "=", "str", ",", "default", "=", "'adam'", ",", "choices", "=", "[", "'sgd'", ",", "'adam'", ",", "'adamw'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--scheduler'", ",", "type", "=", "str", ",", "default", "=", "'StepLR'", ",", "choices", "=", "[", "'StepLR'", ",", "'OneCycleLR'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.001", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "type", "=", "float", ",", "default", "=", "5e-5", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay'", ",", "type", "=", "float", ",", "default", "=", "0.999", ")", "\n", "parser", ".", "add_argument", "(", "'--clip'", ",", "type", "=", "float", ",", "default", "=", "1.0", ")", "\n", "parser", ".", "add_argument", "(", "'--epsilon'", ",", "type", "=", "float", ",", "default", "=", "1e-8", ")", "\n", "parser", ".", "add_argument", "(", "'--sync_bn'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use SyncBatchNorm, only available in DDP mode'", ")", "\n", "\n", "# other options", "\n", "parser", ".", "add_argument", "(", "'--saved_dir'", ",", "type", "=", "str", ",", "default", "=", "'./saved_dir'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_checkpoint_interval'", ",", "type", "=", "int", ",", "default", "=", "5000", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "type", "=", "str", ",", "help", "=", "'resume training checkpoint'", ")", "\n", "parser", ".", "add_argument", "(", "'--write_loss_interval'", ",", "type", "=", "int", ",", "default", "=", "100", ")", "\n", "\n", "# Visualize options", "\n", "parser", ".", "add_argument", "(", "'--running_img_dir'", ",", "type", "=", "str", ",", "default", "=", "'images/running-images-mask'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_visual'", ",", "action", "=", "'store_true'", ",", "help", "=", "'wheather to visualize'", ")", "\n", "parser", ".", "add_argument", "(", "'--visual_interval'", ",", "type", "=", "int", ",", "default", "=", "200", ",", "\n", "help", "=", "\"the interval of visualizing the result of the model\"", ")", "\n", "parser", ".", "add_argument", "(", "'--make_grid'", ",", "action", "=", "'store_true'", ",", "help", "=", "'make gird of the test output'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.None.main.check_args": [[100, 135], ["datetime.datetime.now().strftime", "args.saved_dir.mkdir", "logger.info", "logger.error", "sys.exit", "logger.error", "sys.exit", "pathlib.Path", "open", "yaml.dump", "os.makedirs", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "datetime.datetime.now", "vars", "logger.error", "sys.exit", "str", "pathlib.Path", "pathlib.Path"], "function", ["None"], ["", "def", "check_args", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "cpu", "and", "args", ".", "local_rank", "!=", "-", "1", ":", "\n", "        ", "logger", ".", "error", "(", "'if you want to use cpu, do not use DDP'", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "", "if", "not", "args", ".", "cpu", "and", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "logger", ".", "error", "(", "'cuda is not available, try running on CPU by adding param --cpu'", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n", "# if args.semantic_loss:", "\n", "#     if args.source2_dir == None:", "\n", "#         logger.error('if you want use semantic loss on rgb images, you must provide source2_dir and target2_dir, otherwise just do not use semantic_loss')", "\n", "#         sys.exit()", "\n", "#     else:", "\n", "#         logger.info(f'[Info] You will use semantic loss on rgb images...')", "\n", "\n", "# Save Dir setting", "\n", "", "args", ".", "begin_time", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%H%M%S'", ")", "\n", "save_name", "=", "f'{args.model_type}_w{args.warp_weight}_r{args.reg_weight}_s{args.sem_weight}_lr{args.lr}_bs{args.batch_size}_refine{args.train_refine_time}'", "+", "f'_ploss{args.loss_method}_sm{args.smooth_loss}_{\"rgb_\" if args.source2_dir != None else \"mask_\"}'", "+", "f'gamma{args.seq_gamma}_{args.smooth_mask}_'", "+", "args", ".", "begin_time", "\n", "args", ".", "saved_dir", "=", "Path", "(", "args", ".", "saved_dir", ")", "/", "save_name", "\n", "args", ".", "saved_dir", ".", "mkdir", "(", "exist_ok", "=", "True", ",", "parents", "=", "True", ")", "\n", "logger", ".", "info", "(", "f'Save Dir : {str(args.saved_dir)}'", ")", "\n", "\n", "# Save options", "\n", "with", "open", "(", "args", ".", "saved_dir", "/", "'opt.yaml'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "yaml", ".", "dump", "(", "vars", "(", "args", ")", ",", "f", ",", "sort_keys", "=", "False", ")", "\n", "\n", "\n", "", "if", "not", "args", ".", "no_visual", ":", "\n", "        ", "if", "not", "(", "Path", "(", "args", ".", "running_img_dir", ")", "/", "'source'", ")", ".", "exists", "(", ")", "or", "not", "(", "Path", "(", "args", ".", "running_img_dir", ")", "/", "'target'", ")", ".", "exists", "(", ")", ":", "\n", "            ", "logger", ".", "error", "(", "f'you set the argument visual_interval , but if you want to visualize the results during training,'", "\n", "f'you should create the folder {args.running_img_dir}/source which contains the source images and {args.running_img_dir}/target which contains target images'", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "args", ".", "vis_output_dir", "=", "args", ".", "saved_dir", "/", "'running-output'", "\n", "os", ".", "makedirs", "(", "args", ".", "vis_output_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.None.main._make_model": [[136, 166], ["logger.info", "logger.info", "logger.info", "filter", "sum", "logger.info", "logger.info", "mask_RAFT.mask_raft.mask_RAFT().to", "logger.info", "torch.nn.parallel.DistributedDataParallel.parameters", "logger.info", "torch.nn.parallel.DistributedDataParallel.load_state_dict", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "logger.info", "p.numel", "logger.warning", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "mask_RAFT.mask_raft.mask_RAFT", "torch.load", "torch.load", "torch.load", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel"], "function", ["None"], ["", "", "def", "_make_model", "(", "args", ",", "device", ")", ":", "\n", "    ", "logger", ".", "info", "(", "f'Using {args.model_type} Model ......'", ")", "\n", "logger", ".", "info", "(", "f'Use {args.smooth_loss} Smooth Loss'", ")", "\n", "logger", ".", "info", "(", "f'Use {args.smooth_mask} Smooth Mask'", ")", "\n", "\n", "if", "args", ".", "model_type", "==", "'mask_raft'", ":", "\n", "        ", "model", "=", "mask_RAFT", "(", "args", ".", "smooth_loss", ",", "args", ".", "smooth_mask", ",", "args", ".", "semantic_loss", ",", "args", ".", "seq_gamma", ")", ".", "to", "(", "device", ")", "\n", "logger", ".", "info", "(", "f'seq_gamma : {args.seq_gamma}'", ")", "\n", "\n", "", "model_parameters", "=", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model", ".", "parameters", "(", ")", ")", "\n", "n_params", "=", "sum", "(", "[", "p", ".", "numel", "(", ")", "for", "p", "in", "model_parameters", "]", ")", "\n", "logger", ".", "info", "(", "'Model Setting ...'", ")", "\n", "logger", ".", "info", "(", "f'Number of params: {n_params}'", ")", "\n", "\n", "if", "args", ".", "pretrained_model", "is", "not", "None", ":", "\n", "        ", "logger", ".", "info", "(", "f'Load Pretrained model from {args.pretrained_model}'", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "args", ".", "pretrained_model", ")", "[", "'modelstate'", "]", ")", "\n", "\n", "# SyncBatchNorm", "\n", "", "if", "args", ".", "sync_bn", "and", "args", ".", "local_rank", "!=", "-", "1", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "SyncBatchNorm", ".", "convert_sync_batchnorm", "(", "model", ")", "\n", "logger", ".", "info", "(", "'Using SyncBatchNorm'", ")", "\n", "\n", "", "if", "not", "args", ".", "cpu", ":", "\n", "        ", "if", "args", ".", "local_rank", "==", "-", "1", "and", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "            ", "logger", ".", "warning", "(", "'For multi gpus, you will use DataParallel. To spped up, you can try to use torch.distributed.launch for distribution'", ")", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", "\n", "", "elif", "args", ".", "local_rank", "!=", "-", "1", ":", "\n", "            ", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "args", ".", "local_rank", "]", ",", "output_device", "=", "[", "args", ".", "local_rank", "]", ")", "\n", "", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.None.main._make_optimizer": [[167, 176], ["logger.info", "torch.Adam", "model.parameters", "torch.AdamW", "model.parameters", "torch.SGD", "model.parameters"], "function", ["None"], ["", "def", "_make_optimizer", "(", "args", ",", "model", ")", ":", "\n", "    ", "logger", ".", "info", "(", "f'Using {args.optim} Optimizer ......'", ")", "\n", "if", "args", ".", "optim", "==", "'adam'", ":", "\n", "        ", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "", "elif", "args", ".", "optim", "==", "'adamw'", ":", "\n", "        ", "optimizer", "=", "optim", ".", "AdamW", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "weight_decay", ",", "eps", "=", "args", ".", "epsilon", ")", "\n", "", "elif", "args", ".", "optim", "==", "'sgd'", ":", "\n", "        ", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "0.99", ",", "nesterov", "=", "True", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.None.main._make_scheduler": [[177, 185], ["logger.info", "torch.StepLR", "torch.OneCycleLR"], "function", ["None"], ["", "def", "_make_scheduler", "(", "args", ",", "optimizer", ")", ":", "\n", "    ", "logger", ".", "info", "(", "f'Using {args.scheduler} Scheduler ......'", ")", "\n", "if", "args", ".", "scheduler", "==", "'StepLR'", ":", "\n", "        ", "scheduler", "=", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "step_size", "=", "50", ",", "gamma", "=", "args", ".", "lr_decay", ")", "\n", "", "elif", "args", ".", "scheduler", "==", "'OneCycleLR'", ":", "\n", "        ", "scheduler", "=", "lr_scheduler", ".", "OneCycleLR", "(", "optimizer", ",", "args", ".", "lr", ",", "args", ".", "num_iter", "+", "100", ",", "\n", "pct_start", "=", "0.05", ",", "cycle_momentum", "=", "False", ",", "anneal_strategy", "=", "'linear'", ")", "\n", "", "return", "scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.None.main._get_transform": [[186, 193], ["transform_list.append", "torchvision.transforms.Compose", "transform_list.append", "torchvision.transforms.ToTensor", "torchvision.transforms.Resize"], "function", ["None"], ["", "def", "_get_transform", "(", "size", "=", "None", ")", ":", "\n", "    ", "transform_list", "=", "[", "]", "\n", "if", "size", "is", "not", "None", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Resize", "(", "size", ")", ")", "\n", "", "transform_list", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "transform", "=", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "return", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.None.main._make_data": [[194, 209], ["torch.utils.data.DataLoader", "dataset.PairWiseDataset", "logger.info", "dataset.FlatFolderDataset", "logger.info", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "logger.info", "main._get_transform", "main._get_transform", "len", "len"], "function", ["home.repos.pwc.inspect_result.jcyang98_inst.None.test_LGW._get_transform", "home.repos.pwc.inspect_result.jcyang98_inst.None.test_LGW._get_transform"], ["", "def", "_make_data", "(", "args", ",", "type", ",", "shuffle", "=", "False", ")", ":", "\n", "    ", "if", "type", "==", "'pair'", ":", "\n", "# dataset = PairWiseDataset(args.pair_dir,args.pair_txt,transform=_get_transform(size=(args.im_height,args.im_width)))", "\n", "        ", "dataset", "=", "PairWiseDataset", "(", "args", ".", "pair_dir", ",", "transform", "=", "_get_transform", "(", "size", "=", "(", "args", ".", "im_height", ",", "args", ".", "im_width", ")", ")", ")", "\n", "logger", ".", "info", "(", "f'Number of pairs: {len(dataset)}'", ")", "\n", "", "else", ":", "\n", "        ", "data_root", "=", "args", ".", "source_dir", "if", "type", "==", "'source'", "else", "args", ".", "target_dir", "\n", "data2_root", "=", "args", ".", "source2_dir", "if", "type", "==", "'source'", "else", "args", ".", "target2_dir", "\n", "if", "data2_root", "!=", "None", ":", "\n", "            ", "logger", ".", "info", "(", "f'Use extra {type} root {data2_root}'", ")", "\n", "", "dataset", "=", "FlatFolderDataset", "(", "data_root", ",", "data2_root", ",", "transform", "=", "_get_transform", "(", "size", "=", "(", "args", ".", "im_height", ",", "args", ".", "im_width", ")", ")", ")", "\n", "logger", ".", "info", "(", "f'Number of {type} images: {len(dataset)}'", ")", "\n", "", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "dataset", ")", "if", "args", ".", "local_rank", "!=", "-", "1", "else", "None", "\n", "loader", "=", "DataLoader", "(", "dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "shuffle", ",", "num_workers", "=", "args", ".", "num_worker", ",", "sampler", "=", "sampler", ",", "drop_last", "=", "True", ")", "\n", "return", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.None.main.adjust_learning_rate": [[210, 214], ["None"], "function", ["None"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "lr", ",", "iteration", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by 10 every 30 epochs\"\"\"", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "/", "(", "1", "+", "iteration", "*", "1e-5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.None.main.intermediate_visual": [[215, 297], ["sorted", "sorted", "output_dir.mkdir", "main._get_transform", "main._get_transform", "enumerate", "sorted", "sorted", "_get_transform.size", "torch.cat", "torch.cat", "torch.cat", "concat_list.append", "PIL.Image.open().convert", "_get_transform.unsqueeze", "source.to.to", "torch.cat", "torch.cat", "torch.cat", "torchvision.utils.save_image", "list", "list", "list", "list", "len", "len", "torch.ones", "torch.ones", "torch.ones", "PIL.Image.open().convert", "_get_transform.unsqueeze", "torch.cat.append", "PIL.Image.open().convert", "_get_transform.unsqueeze().to", "PIL.Image.open().convert", "_get_transform.unsqueeze().to", "PIL.Image.open().convert", "_get_transform.unsqueeze().to", "concat_list.append", "pathlib.Path", "list", "list", "pathlib.Path", "list", "list", "_get_transform.", "PIL.Image.open", "_get_transform.", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "row.append", "torchvision.utils.save_image", "torch.cat", "torch.cat", "torch.cat", "pathlib.Path", "PIL.Image.open().convert", "PIL.Image.open", "_get_transform.", "PIL.Image.open", "_get_transform.unsqueeze", "PIL.Image.open", "_get_transform.unsqueeze", "PIL.Image.open", "_get_transform.unsqueeze", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "utils_save.flow_to_image", "torch.Tensor().permute().unsqueeze().to", "torch.Tensor().permute().unsqueeze().to", "torch.Tensor().permute().unsqueeze().to", "optical_flow_list.append", "warped_source.cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "str", "len", "warp.apply_warp_by_field", "extra_warped_source_list.append", "warp.apply_warp_by_field", "warped_checkerboard_list.append", "pathlib.Path", "pathlib.Path", "pathlib.Path", "pathlib.Path", "pathlib.Path", "pathlib.Path", "PIL.Image.open", "_get_transform.", "_get_transform.", "_get_transform.", "torch.Tensor().permute().unsqueeze", "torch.Tensor().permute().unsqueeze", "torch.Tensor().permute().unsqueeze", "source_test_transform().unsqueeze().to.clone", "warp_field.clone", "source_test_transform().unsqueeze().to.clone", "warp_field.clone", "pathlib.Path().name.split", "torch.cat", "torch.cat", "torch.cat", "pathlib.Path", "pathlib.Path", "pathlib.Path", "pathlib.Path", "torch.Tensor().permute", "torch.Tensor().permute", "torch.Tensor().permute", "pathlib.Path", "torch.Tensor", "torch.Tensor", "torch.Tensor", "utils_save.flow_to_image.astype"], "function", ["home.repos.pwc.inspect_result.jcyang98_inst.None.test_LGW._get_transform", "home.repos.pwc.inspect_result.jcyang98_inst.None.test_LGW._get_transform", "home.repos.pwc.inspect_result.jcyang98_inst.utils.flow_viz.flow_to_image", "home.repos.pwc.inspect_result.jcyang98_inst.None.warp.apply_warp_by_field", "home.repos.pwc.inspect_result.jcyang98_inst.None.warp.apply_warp_by_field"], ["", "", "def", "intermediate_visual", "(", "model", ",", "args", ",", "device", ",", "batch_id", ")", ":", "\n", "    ", "test_source_images", "=", "sorted", "(", "list", "(", "(", "Path", "(", "args", ".", "running_img_dir", ")", "/", "'source'", ")", ".", "glob", "(", "'*.jpg'", ")", ")", "+", "list", "(", "(", "Path", "(", "args", ".", "running_img_dir", ")", "/", "'source'", ")", ".", "glob", "(", "'*.png'", ")", ")", ")", "\n", "test_target_images", "=", "sorted", "(", "list", "(", "(", "Path", "(", "args", ".", "running_img_dir", ")", "/", "'target'", ")", ".", "glob", "(", "'*.jpg'", ")", ")", "+", "list", "(", "(", "Path", "(", "args", ".", "running_img_dir", ")", "/", "'target'", ")", ".", "glob", "(", "'*.png'", ")", ")", ")", "\n", "if", "len", "(", "test_source_images", ")", "==", "0", "or", "len", "(", "test_target_images", ")", "==", "0", ":", "return", "\n", "\n", "rgb_flag", "=", "False", "\n", "if", "args", ".", "source2_dir", "==", "None", "and", "(", "Path", "(", "args", ".", "running_img_dir", ")", "/", "'source_rgb'", ")", ".", "exists", "(", ")", ":", "\n", "        ", "rgb_flag", "=", "True", "\n", "rgb_images", "=", "sorted", "(", "list", "(", "(", "Path", "(", "args", ".", "running_img_dir", ")", "/", "'source_rgb'", ")", ".", "glob", "(", "'*.jpg'", ")", ")", "+", "list", "(", "(", "Path", "(", "args", ".", "running_img_dir", ")", "/", "'source_rgb'", ")", ".", "glob", "(", "'*.png'", ")", ")", ")", "\n", "", "checkerboard_flag", "=", "False", "\n", "if", "(", "Path", "(", "args", ".", "running_img_dir", ")", "/", "'checkerboard'", ")", ".", "exists", "(", ")", ":", "\n", "        ", "checkerboard_flag", "=", "True", "\n", "checkerboard_images", "=", "sorted", "(", "list", "(", "(", "Path", "(", "args", ".", "running_img_dir", ")", "/", "'checkerboard'", ")", ".", "glob", "(", "'*.jpg'", ")", ")", "+", "list", "(", "(", "Path", "(", "args", ".", "running_img_dir", ")", "/", "'checkerboard'", ")", ".", "glob", "(", "'*.png'", ")", ")", ")", "\n", "\n", "", "output_dir", "=", "args", ".", "vis_output_dir", "/", "f'{batch_id}'", "\n", "output_dir", ".", "mkdir", "(", ")", "\n", "source_test_transform", "=", "_get_transform", "(", "size", "=", "(", "args", ".", "im_height", ",", "args", ".", "im_width", ")", ")", "\n", "target_test_transform", "=", "_get_transform", "(", "size", "=", "(", "args", ".", "im_height", ",", "args", ".", "im_width", ")", ")", "\n", "\n", "if", "args", ".", "make_grid", ":", "\n", "        ", "c", ",", "h", ",", "w", "=", "target_test_transform", "(", "Image", ".", "open", "(", "test_target_images", "[", "0", "]", ")", ".", "convert", "(", "'RGB'", ")", ")", ".", "size", "(", ")", "\n", "concat_list", "=", "[", "]", "\n", "first_row", "=", "[", "torch", ".", "ones", "(", "1", ",", "c", ",", "h", ",", "w", ")", "]", "\n", "for", "target_path", "in", "test_target_images", ":", "\n", "            ", "target_img", "=", "Image", ".", "open", "(", "target_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "target", "=", "target_test_transform", "(", "target_img", ")", ".", "unsqueeze", "(", "0", ")", "\n", "first_row", ".", "append", "(", "target", ")", "\n", "", "first_row", "=", "torch", ".", "cat", "(", "first_row", ",", "dim", "=", "0", ")", "\n", "concat_list", ".", "append", "(", "first_row", ")", "\n", "\n", "", "for", "i", ",", "source_path", "in", "enumerate", "(", "test_source_images", ")", ":", "\n", "        ", "source_img", "=", "Image", ".", "open", "(", "source_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "source", "=", "source_test_transform", "(", "source_img", ")", ".", "unsqueeze", "(", "0", ")", "\n", "if", "rgb_flag", ":", "\n", "            ", "rgb_source", "=", "Image", ".", "open", "(", "rgb_images", "[", "i", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "rgb_source", "=", "source_test_transform", "(", "rgb_source", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", "\n", "", "if", "checkerboard_flag", ":", "\n", "            ", "checkerboard_source", "=", "Image", ".", "open", "(", "checkerboard_images", "[", "i", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "checkerboard_source", "=", "source_test_transform", "(", "checkerboard_source", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", "\n", "", "if", "args", ".", "make_grid", ":", "\n", "            ", "row", "=", "[", "source", "]", "\n", "", "source", "=", "source", ".", "to", "(", "device", ")", "\n", "for", "target_path", "in", "test_target_images", ":", "\n", "            ", "target_img", "=", "Image", ".", "open", "(", "target_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "target", "=", "target_test_transform", "(", "target_img", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "warp_fields", ",", "warped_source_list", "=", "model", "(", "source", ",", "target", ",", "refine_time", "=", "args", ".", "visual_refine_time", ",", "test", "=", "True", ")", "\n", "warped_source", "=", "warped_source_list", "[", "-", "1", "]", "\n", "\n", "", "if", "not", "args", ".", "make_grid", ":", "\n", "                ", "optical_flow_list", "=", "[", "torch", ".", "ones_like", "(", "source", ")", ",", "torch", ".", "ones_like", "(", "source", ")", "]", "\n", "for", "warp_field", "in", "warp_fields", ":", "\n", "                    ", "optical_flow_np", "=", "flow_to_image", "(", "warp_field", ")", "# [256,256,3] ndarray", "\n", "optical_flow_tensor", "=", "torch", ".", "Tensor", "(", "optical_flow_np", ".", "astype", "(", "np", ".", "float", ")", "/", "255", ")", ".", "permute", "(", "(", "2", ",", "0", ",", "1", ")", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", "\n", "optical_flow_list", ".", "append", "(", "optical_flow_tensor", ")", "\n", "", "if", "rgb_flag", ":", "\n", "                    ", "extra_warped_source_list", "=", "[", "rgb_source", ",", "target", "]", "\n", "for", "warp_field", "in", "warp_fields", ":", "\n", "                        ", "extra_warped_source", "=", "apply_warp_by_field", "(", "rgb_source", ".", "clone", "(", ")", ",", "warp_field", ".", "clone", "(", ")", ",", "device", ")", "\n", "extra_warped_source_list", ".", "append", "(", "extra_warped_source", ")", "\n", "", "", "else", ":", "\n", "                    ", "extra_warped_source_list", "=", "[", "]", "\n", "", "if", "checkerboard_flag", ":", "\n", "                    ", "warped_checkerboard_list", "=", "[", "checkerboard_source", ",", "target", "]", "\n", "for", "warp_field", "in", "warp_fields", ":", "\n", "                        ", "warped_checkerboard", "=", "apply_warp_by_field", "(", "checkerboard_source", ".", "clone", "(", ")", ",", "warp_field", ".", "clone", "(", ")", ",", "device", ")", "\n", "warped_checkerboard_list", ".", "append", "(", "warped_checkerboard", ")", "\n", "", "", "else", ":", "\n", "                    ", "warped_checkerboard_list", "=", "[", "]", "\n", "\n", "", "", "if", "args", ".", "make_grid", ":", "\n", "                ", "row", ".", "append", "(", "warped_source", ".", "cpu", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "save_image_name", "=", "Path", "(", "source_path", ")", ".", "name", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'_shaped_'", "+", "Path", "(", "target_path", ")", ".", "name", "\n", "save_image", "(", "torch", ".", "cat", "(", "[", "source", ",", "target", "]", "+", "warped_source_list", "+", "extra_warped_source_list", "+", "warped_checkerboard_list", "+", "optical_flow_list", ",", "dim", "=", "0", ")", ".", "cpu", "(", ")", ",", "\n", "str", "(", "Path", "(", "output_dir", ",", "save_image_name", ")", ")", ",", "scale_each", "=", "True", ",", "nrow", "=", "2", "+", "args", ".", "visual_refine_time", ",", "padding", "=", "4", ",", "pad_value", "=", "255", ")", "\n", "\n", "", "", "if", "args", ".", "make_grid", ":", "\n", "            ", "concat_list", ".", "append", "(", "torch", ".", "cat", "(", "row", ",", "dim", "=", "0", ")", ")", "\n", "", "", "if", "args", ".", "make_grid", ":", "\n", "        ", "concat", "=", "torch", ".", "cat", "(", "concat_list", ",", "dim", "=", "0", ")", "\n", "save_image", "(", "concat", ",", "Path", "(", "output_dir", ",", "'result.jpg'", ")", ",", "scale_each", "=", "True", ",", "nrow", "=", "len", "(", "test_target_images", ")", "+", "1", ",", "padding", "=", "4", ",", "pad_value", "=", "255", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.None.main.train": [[298, 445], ["torch.device", "torch.device", "torch.device", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "log_dir.mkdir", "tensorboardX.SummaryWriter", "main._make_model", "main._make_optimizer", "main._make_scheduler", "_make_model.train", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "logger.info", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "main._make_data", "iter", "main._make_data", "iter", "logger.info", "main._make_data", "iter", "logger.info", "torch.load", "torch.load", "torch.load", "_make_model.load_state_dict", "_make_optimizer.load_state_dict", "tqdm.tqdm", "main.save_checkpoint", "logger.info", "str", "range", "_make_model.", "_make_optimizer.zero_grad", "ell.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "_make_optimizer.step", "_make_scheduler.step", "logger.info", "isinstance", "isinstance", "source_loader.next.to", "target_loader.next.to", "tqdm.tqdm.set_description", "ell_warp_TV_list.append", "ell_warp_list.append", "ell_warp_sem_list.append", "ell_list.append", "tensorboardX.SummaryWriter.add_scalars", "_make_model.parameters", "iter.next", "iter.next", "source_2.to.to", "target_2.to.to", "iter.next", "ell_warp_TV.item", "ell_warp.item", "ell_warp_sem.item", "ell.item", "logger.info", "_make_model.eval", "main.intermediate_visual", "_make_model.train", "main.save_checkpoint", "logger.info", "utils_save.save_loss", "str", "iter", "iter.next", "iter", "iter.next", "iter", "iter.next", "ell_warp.item", "ell_warp_TV.item", "ell_warp_sem.item", "ell.item", "ell.item", "ell_warp.item", "ell_warp_TV.item", "ell_warp_sem.item", "str", "str", "_make_optimizer.state_dict"], "function", ["home.repos.pwc.inspect_result.jcyang98_inst.None.main._make_model", "home.repos.pwc.inspect_result.jcyang98_inst.None.main._make_optimizer", "home.repos.pwc.inspect_result.jcyang98_inst.None.main._make_scheduler", "home.repos.pwc.inspect_result.jcyang98_inst.None.main.train", "home.repos.pwc.inspect_result.jcyang98_inst.None.main._make_data", "home.repos.pwc.inspect_result.jcyang98_inst.None.main._make_data", "home.repos.pwc.inspect_result.jcyang98_inst.None.main._make_data", "home.repos.pwc.inspect_result.jcyang98_inst.None.main.save_checkpoint", "home.repos.pwc.inspect_result.jcyang98_inst.None.warp.sharpWarp.backward", "home.repos.pwc.inspect_result.jcyang98_inst.None.main.intermediate_visual", "home.repos.pwc.inspect_result.jcyang98_inst.None.main.train", "home.repos.pwc.inspect_result.jcyang98_inst.None.main.save_checkpoint", "home.repos.pwc.inspect_result.jcyang98_inst.None.utils_save.save_loss"], ["", "", "def", "train", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "local_rank", "!=", "-", "1", ":", "\n", "        ", "torch", ".", "distributed", ".", "init_process_group", "(", "backend", "=", "'nccl'", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "logger", ".", "info", "(", "f'process_{args.local_rank} starts training ...'", ")", "\n", "", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "not", "args", ".", "cpu", "else", "'cpu'", ")", "\n", "# Set seed", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "if", "not", "args", ".", "cpu", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "", "log_dir", "=", "args", ".", "saved_dir", "/", "'tensorboard'", "\n", "log_dir", ".", "mkdir", "(", "exist_ok", "=", "True", ",", "parents", "=", "True", ")", "\n", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "str", "(", "log_dir", ")", ")", "\n", "\n", "# Model =================================", "\n", "model", "=", "_make_model", "(", "args", ",", "device", ")", "\n", "\n", "# Optimizer =============================", "\n", "optimizer", "=", "_make_optimizer", "(", "args", ",", "model", ")", "\n", "\n", "# Scheduler =============================", "\n", "scheduler", "=", "_make_scheduler", "(", "args", ",", "optimizer", ")", "\n", "\n", "# Data ==================================", "\n", "if", "args", ".", "pair_dir", "is", "None", ":", "\n", "        ", "source_loader_", "=", "_make_data", "(", "args", ",", "type", "=", "'source'", ")", "\n", "source_loader", "=", "iter", "(", "source_loader_", ")", "\n", "target_loader_", "=", "_make_data", "(", "args", ",", "type", "=", "'target'", ")", "\n", "target_loader", "=", "iter", "(", "target_loader_", ")", "\n", "", "else", ":", "\n", "        ", "assert", "args", ".", "pair_dir", "is", "not", "None", "\n", "logger", ".", "info", "(", "f'Using Pair Dataset ...'", ")", "\n", "data_loader_", "=", "_make_data", "(", "args", ",", "type", "=", "'pair'", ")", "\n", "data_loader", "=", "iter", "(", "data_loader_", ")", "\n", "\n", "", "iteration", "=", "-", "1", "\n", "# Resume", "\n", "if", "args", ".", "resume", "is", "not", "None", ":", "\n", "        ", "logger", ".", "info", "(", "f'Resuming from {args.resume}'", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'modelstate'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimstate'", "]", ")", "\n", "iteration", "=", "checkpoint", "[", "'iteration'", "]", "\n", "\n", "", "ell_warp_TV_list", "=", "[", "]", "\n", "ell_warp_list", "=", "[", "]", "\n", "ell_warp_sem_list", "=", "[", "]", "\n", "ell_list", "=", "[", "]", "\n", "\n", "# Training ===============================", "\n", "model", ".", "train", "(", ")", "\n", "try", ":", "\n", "        ", "progress_bar", "=", "tqdm", "(", "range", "(", "iteration", "+", "1", ",", "args", ".", "num_iter", ")", ")", "\n", "for", "batch_id", "in", "progress_bar", ":", "\n", "            ", "source_2", ",", "target_2", "=", "None", ",", "None", "\n", "if", "args", ".", "pair_dir", "is", "None", ":", "\n", "                ", "try", ":", "\n", "                    ", "source", "=", "source_loader", ".", "next", "(", ")", "\n", "", "except", "StopIteration", ":", "\n", "                    ", "source_loader", "=", "iter", "(", "source_loader_", ")", "\n", "source", "=", "source_loader", ".", "next", "(", ")", "\n", "", "except", ":", "\n", "                    ", "continue", "\n", "\n", "", "try", ":", "\n", "                    ", "target", "=", "target_loader", ".", "next", "(", ")", "\n", "", "except", "StopIteration", ":", "\n", "                    ", "target_loader", "=", "iter", "(", "target_loader_", ")", "\n", "target", "=", "target_loader", ".", "next", "(", ")", "\n", "", "except", ":", "\n", "                    ", "continue", "\n", "", "if", "isinstance", "(", "source", ",", "list", ")", ":", "\n", "                    ", "source", ",", "source_2", "=", "source", "\n", "source_2", "=", "source_2", ".", "to", "(", "device", ")", "\n", "", "if", "isinstance", "(", "target", ",", "list", ")", ":", "\n", "                    ", "target", ",", "target_2", "=", "target", "\n", "target_2", "=", "target_2", ".", "to", "(", "device", ")", "\n", "", "", "else", ":", "\n", "                ", "try", ":", "\n", "                    ", "source", ",", "target", "=", "data_loader", ".", "next", "(", ")", "\n", "", "except", "StopIteration", ":", "\n", "                    ", "data_loader", "=", "iter", "(", "data_loader_", ")", "\n", "source", ",", "target", "=", "data_loader", ".", "next", "(", ")", "\n", "", "except", ":", "\n", "                    ", "continue", "\n", "\n", "", "", "_", ",", "_", ",", "ell_warp", ",", "ell_warp_TV", ",", "ell_warp_sem", "=", "model", "(", "source", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", ",", "refine_time", "=", "args", ".", "train_refine_time", ",", "image1_mask", "=", "source_2", ",", "image2_mask", "=", "target_2", ")", "\n", "ell", "=", "args", ".", "warp_weight", "*", "ell_warp", "+", "args", ".", "reg_weight", "*", "ell_warp_TV", "+", "args", ".", "sem_weight", "*", "ell_warp_sem", "\n", "\n", "# # Joint Training", "\n", "# source, target = source.to(device), target.to(device)", "\n", "# flow_predictions, _, ell_warp,ell_warp_TV,ell_warp_sem = model(source_2,target_2,refine_time=args.train_refine_time,image1_mask=None,image2_mask=None)   ", "\n", "# warped_img1_rgb = apply_warp_by_field(source.clone(),flow_predictions[-1],device)", "\n", "# # (log_p, logdet, z_outs) = glow()", "\n", "# z_c = glow(warped_img1_rgb, forward=True)", "\n", "# z_s = glow(target, forward=True)", "\n", "# # reverse ", "\n", "# stylized = glow(z_c, forward=False, style=z_s)", "\n", "# loss_c, loss_s = encoder(warped_img1_rgb, target, stylized)", "\n", "# loss_c = loss_c.mean()", "\n", "# loss_s = loss_s.mean()", "\n", "# ell = args.warp_weight * ell_warp + args.reg_weight * ell_warp_TV + args.sem_weight * ell_warp_sem + 0.01*loss_c + 0.01*loss_s      ", "\n", "\n", "\n", "if", "args", ".", "local_rank", "in", "[", "-", "1", ",", "0", "]", ":", "\n", "                ", "progress_bar", ".", "set_description", "(", "\n", "'Iteration: {}/{} warp_loss: {:.5f} reg_loss: {:.5f} sem_loss: {:.5f} Loss: {:.5f} lr: {:.4f}'", ".", "format", "(", "\n", "batch_id", ",", "args", ".", "num_iter", ",", "ell_warp", ".", "item", "(", ")", ",", "ell_warp_TV", ".", "item", "(", ")", ",", "ell_warp_sem", ".", "item", "(", ")", ",", "ell", ".", "item", "(", ")", ",", "optimizer", ".", "state_dict", "(", ")", "[", "'param_groups'", "]", "[", "0", "]", "[", "'lr'", "]", ")", ")", "\n", "\n", "ell_warp_TV_list", ".", "append", "(", "ell_warp_TV", ".", "item", "(", ")", ")", "\n", "ell_warp_list", ".", "append", "(", "ell_warp", ".", "item", "(", ")", ")", "\n", "ell_warp_sem_list", ".", "append", "(", "ell_warp_sem", ".", "item", "(", ")", ")", "\n", "ell_list", ".", "append", "(", "ell", ".", "item", "(", ")", ")", "\n", "writer", ".", "add_scalars", "(", "'Loss'", ",", "{", "'Total Loss'", ":", "ell", ".", "item", "(", ")", ",", "'Warp Loss'", ":", "ell_warp", ".", "item", "(", ")", ",", "'Warp_TV Loss'", ":", "ell_warp_TV", ".", "item", "(", ")", ",", "'Warp_Sem Loss'", ":", "ell_warp_sem", ".", "item", "(", ")", "}", ",", "batch_id", ")", "\n", "\n", "# Intermediate Visualization", "\n", "if", "not", "args", ".", "no_visual", "and", "batch_id", "%", "args", ".", "visual_interval", "==", "0", ":", "\n", "                    ", "logger", ".", "info", "(", "'Running Time Visualization ...'", ")", "\n", "model", ".", "eval", "(", ")", "\n", "intermediate_visual", "(", "model", ",", "args", ",", "device", ",", "batch_id", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "", "if", "batch_id", "%", "args", ".", "save_checkpoint_interval", "==", "0", "and", "batch_id", "!=", "0", ":", "\n", "                    ", "checkpoint_path", "=", "args", ".", "saved_dir", "/", "f'{batch_id}.pth'", "\n", "save_checkpoint", "(", "checkpoint_path", ",", "model", ",", "optimizer", ",", "batch_id", ")", "\n", "logger", ".", "info", "(", "f'Intermediate save, Model saved at {str(checkpoint_path)}'", ")", "\n", "\n", "", "if", "batch_id", "%", "args", ".", "write_loss_interval", "==", "0", ":", "\n", "                    ", "save_loss", "(", "str", "(", "args", ".", "saved_dir", ")", ",", "ell_warp_list", ",", "ell_warp_TV_list", ",", "ell_warp_sem_list", ",", "ell_list", ",", "args", ".", "warp_weight", ",", "args", ".", "reg_weight", ",", "args", ".", "sem_weight", ")", "\n", "\n", "", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "ell", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "clip", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "# adjust_learning_rate(optimizer,args.lr,batch_id)", "\n", "# if batch_id / 50 <= 200:", "\n", "#     scheduler.step()", "\n", "scheduler", ".", "step", "(", ")", "\n", "", "", "except", "KeyboardInterrupt", ":", "\n", "        ", "logger", ".", "info", "(", "'Catch a KeyboardInterupt'", ")", "\n", "\n", "", "if", "args", ".", "local_rank", "in", "[", "-", "1", ",", "0", "]", ":", "\n", "        ", "checkpoint_path", "=", "args", ".", "saved_dir", "/", "f'{batch_id}.pth'", "\n", "save_checkpoint", "(", "checkpoint_path", ",", "model", ",", "optimizer", ",", "batch_id", ")", "\n", "logger", ".", "info", "(", "f'Training Done, Model saved at {str(checkpoint_path)}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.None.main.save_checkpoint": [[446, 457], ["isinstance", "torch.save", "torch.save", "torch.save", "model.module.state_dict", "model.state_dict", "optimizer.state_dict"], "function", ["None"], ["", "", "def", "save_checkpoint", "(", "checkpoint_path", ",", "model", ",", "optimizer", ",", "batch_id", ")", ":", "\n", "    ", "if", "isinstance", "(", "model", ",", "(", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", ",", "torch", ".", "nn", ".", "DataParallel", ")", ")", ":", "\n", "        ", "model_state_dict", "=", "model", ".", "module", ".", "state_dict", "(", ")", "\n", "", "else", ":", "\n", "        ", "model_state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "", "checkpoint", "=", "{", "\n", "'modelstate'", ":", "model_state_dict", ",", "\n", "'optimstate'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'iteration'", ":", "batch_id", ",", "\n", "}", "\n", "torch", ".", "save", "(", "checkpoint", ",", "checkpoint_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.None.main.main": [[459, 465], ["main.get_args", "print", "main.train", "main.check_args"], "function", ["home.repos.pwc.inspect_result.jcyang98_inst.None.test_LGW.get_args", "home.repos.pwc.inspect_result.jcyang98_inst.None.main.train", "home.repos.pwc.inspect_result.jcyang98_inst.None.main.check_args"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "get_args", "(", ")", "\n", "print", "(", "args", ")", "\n", "if", "args", ".", "local_rank", "in", "[", "-", "1", ",", "0", "]", ":", "\n", "        ", "check_args", "(", "args", ")", "\n", "", "train", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.None.dataset.PairWiseDataset.__init__": [[13, 27], ["torchvision.transforms.Compose", "sorted", "open", "f.readlines", "line.strip.strip.strip", "line.strip.strip.split", "dataset.PairWiseDataset.pair_list.append", "torchvision.transforms.Resize", "torchvision.transforms.RandomRotation", "torchvision.transforms.Pad", "glob.glob", "glob.glob", "os.path.join", "os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_root", ",", "pair_txt", "=", "None", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "data_root", "=", "data_root", "\n", "self", ".", "path_txt", "=", "pair_txt", "\n", "if", "pair_txt", "!=", "None", ":", "\n", "            ", "self", ".", "pair_list", "=", "[", "]", "\n", "with", "open", "(", "pair_txt", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                    ", "line", "=", "line", ".", "strip", "(", ")", "\n", "pair", "=", "line", ".", "split", "(", ")", "\n", "self", ".", "pair_list", ".", "append", "(", "[", "pair", "[", "0", "]", ",", "pair", "[", "1", "]", "]", ")", "\n", "", "", "", "else", ":", "\n", "            ", "self", ".", "transform2", "=", "transforms", ".", "Compose", "(", "[", "transform", ".", "transforms", "[", "0", "]", ",", "transforms", ".", "Resize", "(", "128", ")", ",", "transforms", ".", "RandomRotation", "(", "90", ",", "fill", "=", "(", "255", ",", "255", ",", "255", ")", ")", ",", "transforms", ".", "Pad", "(", "(", "256", "-", "128", ")", "//", "2", ",", "fill", "=", "(", "255", ",", "255", ",", "255", ")", ")", ",", "transform", ".", "transforms", "[", "1", "]", "]", ")", "\n", "self", ".", "paths", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "'*.jpg'", ")", ")", "+", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "'*.png'", ")", ")", ")", "\n", "", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.None.dataset.PairWiseDataset.__getitem__": [[28, 43], ["PIL.Image.open().convert", "PIL.Image.open().convert", "PIL.Image.open().convert", "dataset.PairWiseDataset.transform", "dataset.PairWiseDataset.transform", "dataset.PairWiseDataset.transform", "dataset.PairWiseDataset.transform2", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open", "os.path.join", "os.path.join"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "path_txt", "!=", "None", ":", "\n", "            ", "pair", "=", "self", ".", "pair_list", "[", "index", "]", "\n", "img1", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_root", ",", "pair", "[", "0", "]", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img2", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_root", ",", "pair", "[", "1", "]", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "if", "self", ".", "transform", ":", "\n", "                ", "img1", "=", "self", ".", "transform", "(", "img1", ")", "\n", "img2", "=", "self", ".", "transform", "(", "img2", ")", "\n", "", "", "else", ":", "\n", "            ", "path", "=", "self", ".", "paths", "[", "index", "]", "\n", "img1_pil", "=", "Image", ".", "open", "(", "path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "if", "self", ".", "transform", ":", "\n", "                ", "img1", "=", "self", ".", "transform", "(", "img1_pil", ")", "\n", "img2", "=", "self", ".", "transform2", "(", "img1_pil", ")", "\n", "", "", "return", "img1", ",", "img2", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.None.dataset.PairWiseDataset.__len__": [[44, 49], ["len", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "path_txt", "!=", "None", ":", "\n", "            ", "return", "len", "(", "self", ".", "pair_list", ")", "\n", "", "else", ":", "\n", "            ", "return", "len", "(", "self", ".", "paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.None.dataset.FlatFolderDataset.__init__": [[74, 83], ["torch.utils.data.Dataset.__init__", "sorted", "sorted", "glob.glob", "glob.glob", "len", "len", "os.path.join", "os.path.join", "glob.glob", "glob.glob", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.jcyang98_inst.utils.utils.InputPadder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "data1_root", ",", "data2_root", "=", "None", ",", "transform", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data1_root", "=", "data1_root", "\n", "self", ".", "data2_root", "=", "data2_root", "\n", "self", ".", "paths_1", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "data1_root", ",", "'*.jpg'", ")", ")", "+", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "data1_root", ",", "'*.png'", ")", ")", ")", "\n", "if", "self", ".", "data2_root", "!=", "None", ":", "\n", "            ", "self", ".", "paths_2", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "data2_root", ",", "'*.jpg'", ")", ")", "+", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "data2_root", ",", "'*.png'", ")", ")", ")", "\n", "assert", "len", "(", "self", ".", "paths_1", ")", "==", "len", "(", "self", ".", "paths_2", ")", "\n", "", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.None.dataset.FlatFolderDataset.__getitem__": [[84, 98], ["PIL.Image.open().convert", "PIL.Image.open().convert", "dataset.FlatFolderDataset.transform", "os.path.basename", "os.path.basename", "dataset.FlatFolderDataset.transform", "PIL.Image.open", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path_1", "=", "self", ".", "paths_1", "[", "index", "]", "\n", "img_1", "=", "Image", ".", "open", "(", "path_1", ")", ".", "convert", "(", "'RGB'", ")", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "img_1", "=", "self", ".", "transform", "(", "img_1", ")", "\n", "", "if", "self", ".", "data2_root", "==", "None", ":", "\n", "            ", "return", "img_1", "\n", "\n", "", "path_2", "=", "self", ".", "paths_2", "[", "index", "]", "\n", "assert", "os", ".", "path", ".", "basename", "(", "path_1", ")", "==", "os", ".", "path", ".", "basename", "(", "path_2", ")", "\n", "img_2", "=", "Image", ".", "open", "(", "path_2", ")", ".", "convert", "(", "'RGB'", ")", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "img_2", "=", "self", ".", "transform", "(", "img_2", ")", "\n", "", "return", "img_1", ",", "img_2", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.None.dataset.FlatFolderDataset.__len__": [[99, 101], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "paths_1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.None.dataset.FlatFolderDataset.name": [[102, 104], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'FlatFolderDataset'", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.None.dataset.PF_Pascal_txt": [[50, 72], ["os.makedirs", "os.listdir", "open", "open.close", "os.path.join", "os.path.join", "os.path.join", "os.listdir", "os.path.isdir", "open", "f.write", "open.write", "pair.split", "pair.split"], "function", ["None"], ["", "", "", "def", "PF_Pascal_txt", "(", "data_root", ",", "txt_dir", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "txt_dir", ",", "exist_ok", "=", "True", ")", "\n", "l_cls", "=", "os", ".", "listdir", "(", "data_root", ")", "\n", "\n", "total_f", "=", "open", "(", "os", ".", "path", ".", "join", "(", "txt_dir", ",", "'total_pair'", "+", "'.txt'", ")", ",", "'w'", ")", "\n", "\n", "for", "cls", "in", "l_cls", ":", "\n", "        ", "image_root", "=", "os", ".", "path", ".", "join", "(", "data_root", ",", "cls", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "image_root", ")", ":", "\n", "            ", "continue", "\n", "", "txt_path", "=", "os", ".", "path", ".", "join", "(", "txt_dir", ",", "cls", "+", "'.txt'", ")", "\n", "\n", "pair_names", "=", "os", ".", "listdir", "(", "image_root", ")", "\n", "\n", "with", "open", "(", "txt_path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "for", "pair", "in", "pair_names", ":", "\n", "                ", "pair_1", "=", "pair", ".", "split", "(", "'-'", ")", "[", "0", "]", "+", "'.jpg'", "\n", "pair_2", "=", "pair", ".", "split", "(", "'-'", ")", "[", "1", "]", "\n", "f", ".", "write", "(", "pair_1", "+", "' '", "+", "pair_2", "+", "'\\n'", ")", "\n", "total_f", ".", "write", "(", "pair_1", "+", "' '", "+", "pair_2", "+", "'\\n'", ")", "\n", "", "", "", "total_f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.None.dataset._get_transform": [[128, 137], ["transform_list.append", "torchvision.transforms.Compose", "transform_list.append", "transform_list.append", "torchvision.transforms.ToTensor", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop"], "function", ["None"], ["", "", "def", "_get_transform", "(", "size", "=", "None", ",", "crop", "=", "None", ")", ":", "\n", "    ", "transform_list", "=", "[", "]", "\n", "if", "size", "is", "not", "None", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Resize", "(", "size", ")", ")", "\n", "", "if", "crop", "is", "not", "None", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "CenterCrop", "(", "size", ")", ")", "\n", "", "transform_list", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "transform", "=", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "return", "transform", "\n", "", ""]], "home.repos.pwc.inspect_result.jcyang98_inst.None.loss.sequence_L1_p_loss": [[15, 32], ["len", "range", "i_loss.mean"], "function", ["None"], ["def", "sequence_L1_p_loss", "(", "warped_I_c_list", ",", "I_g", ",", "gamma", "=", "0.8", ")", ":", "\n", "    ", "n_predictions", "=", "len", "(", "warped_I_c_list", ")", "\n", "ell_warp", "=", "0.0", "\n", "for", "i", "in", "range", "(", "n_predictions", ")", ":", "\n", "# i_weight = gamma**(n_predictions - i - 1)", "\n", "\n", "## refine 4 ", "\n", "# i_weight = [1/8,1/4,1/2,1][i]", "\n", "\n", "# refine 3", "\n", "# i_weight = [1/8,1/4,1][i]", "\n", "        ", "i_weight", "=", "[", "1", "/", "10", ",", "1", "/", "5", ",", "1", "]", "[", "i", "]", "\n", "\n", "i_loss", "=", "(", "warped_I_c_list", "[", "i", "]", "-", "I_g", ")", ".", "abs", "(", ")", "\n", "# ell_warp += i_weight * i_loss.mean()", "\n", "ell_warp", "=", "ell_warp", "+", "i_weight", "*", "i_loss", ".", "mean", "(", ")", "\n", "", "return", "ell_warp", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.None.loss.TV_with_mask": [[33, 53], ["torch.where.flatten().sum().view", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.where.bool", "torch.where", "torch.where", "torch.where", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.where.flatten().sum", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.where.flatten"], "function", ["None"], ["", "def", "TV_with_mask", "(", "x", ",", "mask", ",", "alpha", "=", "0.9999", ",", "mask_type", "=", "'binary'", ")", ":", "\n", "# alpha1 = alpha", "\n", "# alpha2 = 1-alpha1", "\n", "    ", "assert", "mask_type", "in", "[", "'binary'", ",", "'weight'", "]", "\n", "if", "mask_type", "==", "'binary'", ":", "\n", "        ", "mask", "=", "mask", ".", "bool", "(", ")", "\n", "mask", "=", "torch", ".", "where", "(", "mask", ",", "torch", ".", "ones_like", "(", "mask", ")", "*", "alpha", ",", "torch", ".", "ones_like", "(", "mask", ")", "*", "(", "1", "-", "alpha", ")", ")", "\n", "", "n", "=", "x", ".", "shape", "[", "2", "]", "*", "x", ".", "shape", "[", "3", "]", "\n", "ori_sum", "=", "mask", ".", "flatten", "(", "2", ")", ".", "sum", "(", "dim", "=", "2", ")", ".", "view", "(", "mask", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "1", ")", "\n", "mask", "=", "(", "n", "/", "ori_sum", ")", "*", "mask", "\n", "t", "=", "torch", ".", "pow", "(", "torch", ".", "abs", "(", "x", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "-", "x", "[", ":", ",", ":", ",", "0", ":", "-", "1", ",", ":", "]", ")", ",", "2", ")", "\n", "ell", "=", "(", "t", "*", "mask", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", ")", ".", "mean", "(", ")", "\n", "t", "=", "torch", ".", "pow", "(", "torch", ".", "abs", "(", "x", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "-", "x", "[", ":", ",", ":", ",", ":", ",", "0", ":", "-", "1", "]", ")", ",", "2", ")", "\n", "ell", "+=", "(", "t", "*", "mask", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", ")", ".", "mean", "(", ")", "\n", "t", "=", "torch", ".", "pow", "(", "torch", ".", "abs", "(", "x", "[", ":", ",", ":", ",", "1", ":", ",", "1", ":", "]", "-", "x", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "-", "1", "]", ")", ",", "2", ")", "\n", "ell", "+=", "(", "t", "*", "mask", "[", ":", ",", ":", ",", "1", ":", ",", "1", ":", "]", ")", ".", "mean", "(", ")", "\n", "t", "=", "torch", ".", "pow", "(", "torch", ".", "abs", "(", "x", "[", ":", ",", ":", ",", "1", ":", ",", ":", "-", "1", "]", "-", "x", "[", ":", ",", ":", ",", ":", "-", "1", ",", "1", ":", "]", ")", ",", "2", ")", "\n", "ell", "+=", "(", "t", "*", "mask", "[", ":", ",", ":", ",", "1", ":", ",", ":", "-", "1", "]", ")", ".", "mean", "(", ")", "\n", "ell", "/=", "4.", "\n", "return", "ell", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.None.loss.sequence_TV_with_mask_loss": [[54, 61], ["len", "range", "loss.TV_with_mask"], "function", ["home.repos.pwc.inspect_result.jcyang98_inst.None.loss.TV_with_mask"], ["", "def", "sequence_TV_with_mask_loss", "(", "warp_fields", ",", "mask", ",", "alpha", "=", "0.9999", ",", "gamma", "=", "0.1", ")", ":", "\n", "    ", "n_predictions", "=", "len", "(", "warp_fields", ")", "\n", "ell_warp_TV", "=", "0.0", "\n", "for", "i", "in", "range", "(", "n_predictions", ")", ":", "\n", "        ", "i_weight", "=", "gamma", "**", "(", "n_predictions", "-", "i", "-", "1", ")", "\n", "ell_warp_TV", "+=", "i_weight", "*", "TV_with_mask", "(", "warp_fields", "[", "i", "]", ",", "mask", ",", "alpha", ")", "\n", "", "return", "ell_warp_TV", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.None.loss.TV": [[62, 69], ["torch.pow().mean", "torch.pow().mean", "torch.pow().mean", "torch.pow().mean", "torch.pow().mean", "torch.pow().mean", "torch.pow().mean", "torch.pow().mean", "torch.pow().mean", "torch.pow().mean", "torch.pow().mean", "torch.pow().mean", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "function", ["None"], ["", "def", "TV", "(", "x", ")", ":", "\n", "    ", "ell", "=", "torch", ".", "pow", "(", "torch", ".", "abs", "(", "x", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "-", "x", "[", ":", ",", ":", ",", "0", ":", "-", "1", ",", ":", "]", ")", ",", "2", ")", ".", "mean", "(", ")", "\n", "ell", "+=", "torch", ".", "pow", "(", "torch", ".", "abs", "(", "x", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "-", "x", "[", ":", ",", ":", ",", ":", ",", "0", ":", "-", "1", "]", ")", ",", "2", ")", ".", "mean", "(", ")", "\n", "ell", "+=", "torch", ".", "pow", "(", "torch", ".", "abs", "(", "x", "[", ":", ",", ":", ",", "1", ":", ",", "1", ":", "]", "-", "x", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "-", "1", "]", ")", ",", "2", ")", ".", "mean", "(", ")", "\n", "ell", "+=", "torch", ".", "pow", "(", "torch", ".", "abs", "(", "x", "[", ":", ",", ":", ",", "1", ":", ",", ":", "-", "1", "]", "-", "x", "[", ":", ",", ":", ",", ":", "-", "1", ",", "1", ":", "]", ")", ",", "2", ")", ".", "mean", "(", ")", "\n", "ell", "/=", "4.", "\n", "return", "ell", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.None.loss.sequence_TV_loss": [[70, 87], ["len", "range", "loss.TV"], "function", ["home.repos.pwc.inspect_result.jcyang98_inst.None.loss.TV"], ["", "def", "sequence_TV_loss", "(", "warp_fields", ",", "gamma", "=", "0.1", ")", ":", "\n", "    ", "n_predictions", "=", "len", "(", "warp_fields", ")", "\n", "ell_warp_TV", "=", "0.0", "\n", "for", "i", "in", "range", "(", "n_predictions", ")", ":", "\n", "# i_weight = gamma**(n_predictions - i - 1)", "\n", "\n", "## refine 4 ", "\n", "# i_weight = [0.08,0.04,0.02,0.01][i]", "\n", "\n", "# refine 3", "\n", "# i_weight = [0.08,0.04,0.01][i]", "\n", "        ", "i_weight", "=", "[", "0.1", ",", "0.05", ",", "0.01", "]", "[", "i", "]", "\n", "\n", "\n", "# ell_warp_TV += i_weight * TV(warp_fields[i])", "\n", "ell_warp_TV", "=", "ell_warp_TV", "+", "i_weight", "*", "TV", "(", "warp_fields", "[", "i", "]", ")", "\n", "", "return", "ell_warp_TV", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.None.loss.gradients": [[88, 92], ["None"], "function", ["None"], ["", "def", "gradients", "(", "img", ")", ":", "\n", "    ", "dy", "=", "img", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "-", "img", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", "\n", "dx", "=", "img", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "-", "img", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", "\n", "return", "dx", ",", "dy", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.None.loss.cal_grad2_error": [[93, 104], ["loss.gradients", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "loss.gradients", "loss.gradients", "loss.gradients", "torch.abs().mean().unsqueeze", "torch.abs().mean().unsqueeze", "torch.abs().mean().unsqueeze", "torch.abs().mean().unsqueeze", "torch.abs().mean().unsqueeze", "torch.abs().mean().unsqueeze", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "function", ["home.repos.pwc.inspect_result.jcyang98_inst.None.loss.gradients", "home.repos.pwc.inspect_result.jcyang98_inst.None.loss.gradients", "home.repos.pwc.inspect_result.jcyang98_inst.None.loss.gradients", "home.repos.pwc.inspect_result.jcyang98_inst.None.loss.gradients"], ["", "def", "cal_grad2_error", "(", "flow", ",", "img", ")", ":", "\n", "    ", "img_grad_x", ",", "img_grad_y", "=", "gradients", "(", "img", ")", "\n", "w_x", "=", "torch", ".", "exp", "(", "-", "10.0", "*", "torch", ".", "abs", "(", "img_grad_x", ")", ".", "mean", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", ")", "\n", "w_y", "=", "torch", ".", "exp", "(", "-", "10.0", "*", "torch", ".", "abs", "(", "img_grad_y", ")", ".", "mean", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", ")", "\n", "\n", "dx", ",", "dy", "=", "gradients", "(", "flow", ")", "\n", "dx2", ",", "_", "=", "gradients", "(", "dx", ")", "\n", "_", ",", "dy2", "=", "gradients", "(", "dy", ")", "\n", "error", "=", "(", "w_x", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "*", "torch", ".", "abs", "(", "dx2", ")", ")", ".", "mean", "(", "(", "1", ",", "2", ",", "3", ")", ")", "+", "(", "w_y", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "*", "torch", ".", "abs", "(", "dy2", ")", ")", ".", "mean", "(", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "#error = (w_x * torch.abs(dx)).mean((1,2,3)) + (w_y * torch.abs(dy)).mean((1,2,3))", "\n", "return", "error", "/", "2.0", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.None.loss.sequence_edge_aware_2nd_loss": [[109, 118], ["len", "range", "ell_warp_TV.mean.mean", "loss.cal_grad2_error"], "function", ["home.repos.pwc.inspect_result.jcyang98_inst.None.loss.cal_grad2_error"], ["def", "sequence_edge_aware_2nd_loss", "(", "warp_fields", ",", "I_g", ",", "gamma", "=", "0.8", ")", ":", "\n", "    ", "n_predictions", "=", "len", "(", "warp_fields", ")", "\n", "ell_warp_TV", "=", "0.0", "\n", "for", "i", "in", "range", "(", "n_predictions", ")", ":", "\n", "        ", "i_weight", "=", "gamma", "**", "(", "n_predictions", "-", "i", "-", "1", ")", "\n", "warp_field", "=", "warp_fields", "[", "i", "]", "\n", "ell_warp_TV", "+=", "i_weight", "*", "cal_grad2_error", "(", "warp_field", "/", "20.0", ",", "I_g", ")", "\n", "", "ell_warp_TV", "=", "ell_warp_TV", ".", "mean", "(", ")", "\n", "return", "ell_warp_TV", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.None.loss.second_order_smooth_loss": [[120, 128], ["torch.pow().mean", "torch.pow().mean", "torch.pow().mean", "torch.pow().mean", "torch.pow().mean", "torch.pow().mean", "torch.pow().mean", "torch.pow().mean", "torch.pow().mean", "torch.pow().mean", "torch.pow().mean", "torch.pow().mean", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "function", ["None"], ["", "def", "second_order_smooth_loss", "(", "x", ")", ":", "\n", "# delta_u, delta_v, mask = _second_order_deltas(flow)", "\n", "    ", "ell", "=", "torch", ".", "pow", "(", "torch", ".", "abs", "(", "x", "[", ":", ",", ":", ",", "2", ":", ",", ":", "]", "+", "x", "[", ":", ",", ":", ",", ":", "-", "2", ",", ":", "]", "-", "2", "*", "x", "[", ":", ",", ":", ",", "1", ":", "-", "1", ",", ":", "]", ")", ",", "2", ")", ".", "mean", "(", ")", "\n", "ell", "+=", "torch", ".", "pow", "(", "torch", ".", "abs", "(", "x", "[", ":", ",", ":", ",", ":", ",", "2", ":", "]", "+", "x", "[", ":", ",", ":", ",", ":", ",", ":", "-", "2", "]", "-", "2", "*", "x", "[", ":", ",", ":", ",", ":", ",", "1", ":", "-", "1", "]", ")", ",", "2", ")", ".", "mean", "(", ")", "\n", "ell", "+=", "torch", ".", "pow", "(", "torch", ".", "abs", "(", "x", "[", ":", ",", ":", ",", "2", ":", ",", "2", ":", "]", "+", "x", "[", ":", ",", ":", ",", ":", "-", "2", ",", ":", "-", "2", "]", "-", "2", "*", "x", "[", ":", ",", ":", ",", "1", ":", "-", "1", ",", "1", ":", "-", "1", "]", ")", ",", "2", ")", ".", "mean", "(", ")", "\n", "ell", "+=", "torch", ".", "pow", "(", "torch", ".", "abs", "(", "x", "[", ":", ",", ":", ",", ":", "-", "2", ",", "2", ":", "]", "+", "x", "[", ":", ",", ":", ",", "2", ":", ",", ":", "-", "2", "]", "-", "2", "*", "x", "[", ":", ",", ":", ",", "1", ":", "-", "1", ",", "1", ":", "-", "1", "]", ")", ",", "2", ")", ".", "mean", "(", ")", "\n", "ell", "/=", "4.", "\n", "return", "ell", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.None.test_LGW.get_args": [[23, 54], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "'Test Warp Model for fast warpping'", ")", "\n", "# basic options", "\n", "parser", ".", "add_argument", "(", "'--cpu'", ",", "action", "=", "'store_true'", ",", "help", "=", "'wheather to use cpu , if not set, use gpu'", ")", "\n", "\n", "# data options", "\n", "parser", ".", "add_argument", "(", "'--source_path'", ",", "type", "=", "str", ",", "help", "=", "'path of source image'", ")", "\n", "parser", ".", "add_argument", "(", "'--source_dir'", ",", "type", "=", "str", ",", "help", "=", "'Directory path to source image'", ")", "\n", "parser", ".", "add_argument", "(", "'--source_mask_dir'", ",", "type", "=", "str", ",", "help", "=", "'Directory path to source mask images, if None, use PointRender to segment'", ")", "\n", "parser", ".", "add_argument", "(", "'--source_mask_path'", ",", "type", "=", "str", ",", "help", "=", "'path of source mask image, if None, use PointRender to segment'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkerboard_path'", ",", "type", "=", "str", ",", "help", "=", "'path of checkerboard image'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkerboard_dir'", ",", "type", "=", "str", ",", "help", "=", "'Directory path to checkerboard image'", ")", "\n", "parser", ".", "add_argument", "(", "'--target_dir'", ",", "type", "=", "str", ",", "help", "=", "'Directory path to target images'", ")", "\n", "parser", ".", "add_argument", "(", "'--target_path'", ",", "type", "=", "str", ",", "help", "=", "'path of target images'", ")", "\n", "parser", ".", "add_argument", "(", "'--target_mask_dir'", ",", "type", "=", "str", ",", "help", "=", "'Directory path to target mask images, if None, use PointRender to segment'", ")", "\n", "parser", ".", "add_argument", "(", "'--target_mask_path'", ",", "type", "=", "str", ",", "help", "=", "'path of target mask images, if None, use PointRender to segment'", ")", "\n", "parser", ".", "add_argument", "(", "'--im_height'", ",", "type", "=", "int", ",", "default", "=", "256", ")", "\n", "parser", ".", "add_argument", "(", "'--im_width'", ",", "type", "=", "int", ",", "default", "=", "256", ")", "\n", "parser", ".", "add_argument", "(", "'--num_worker'", ",", "type", "=", "int", ",", "default", "=", "8", ")", "\n", "\n", "# model options", "\n", "parser", ".", "add_argument", "(", "'--model_type'", ",", "type", "=", "str", ",", "default", "=", "'mask_raft'", ",", "choices", "=", "[", "'mask_raft'", "]", ",", "help", "=", "'module of warpping'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "'module of warpping'", ")", "\n", "parser", ".", "add_argument", "(", "'--refine_time'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'warp refine time'", ")", "\n", "\n", "# other options", "\n", "parser", ".", "add_argument", "(", "'--output_dir'", ",", "type", "=", "str", ",", "default", "=", "'./output'", ")", "\n", "parser", ".", "add_argument", "(", "'--make_grid'", ",", "action", "=", "'store_true'", ",", "help", "=", "'make gird of the test output'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.None.test_LGW._get_transform": [[55, 62], ["transform_list.append", "torchvision.transforms.Compose", "transform_list.append", "torchvision.transforms.ToTensor", "torchvision.transforms.Resize"], "function", ["None"], ["", "def", "_get_transform", "(", "size", "=", "None", ")", ":", "\n", "    ", "transform_list", "=", "[", "]", "\n", "if", "size", "is", "not", "None", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Resize", "(", "size", ")", ")", "\n", "", "transform_list", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "transform", "=", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "return", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.None.test_LGW.test": [[63, 207], ["torch.device", "logger.info", "torch.load", "mask_RAFT().to.load_state_dict", "pathlib.Path", "pathlib.Path.mkdir", "test_LGW._get_transform", "test_LGW._get_transform", "mask_RAFT().to.eval", "enumerate", "logger.warn", "mask_RAFT.mask_raft.mask_RAFT().to", "_get_transform.size", "torch.cat", "concat_list.append", "PIL.Image.open().convert", "_get_transform.unsqueeze", "source_mask.to.to", "torch.cat", "torchvision.utils.save_image", "pathlib.Path", "sorted", "pathlib.Path", "pathlib.Path", "sorted", "logger.info", "segmentation.segment", "pathlib.Path", "sorted", "pathlib.Path", "pathlib.Path", "sorted", "logger.info", "segmentation.segment", "pathlib.Path", "sorted", "len", "len", "torch.ones", "PIL.Image.open().convert", "_get_transform.unsqueeze", "torch.cat.append", "PIL.Image.open().convert", "_get_transform.unsqueeze().to", "PIL.Image.open().convert", "_get_transform.unsqueeze().to", "PIL.Image.open().convert", "_get_transform.unsqueeze().to", "torch.mean().unsqueeze", "concat_list.append", "pathlib.Path", "pathlib.Path", "pathlib.Path", "pathlib.Path", "mask_RAFT.mask_raft.mask_RAFT", "_get_transform.", "PIL.Image.open", "_get_transform.", "torch.no_grad", "mask_RAFT().to.", "row.append", "torchvision.utils.save_image", "torch.cat", "PIL.Image.open().convert", "PIL.Image.open", "_get_transform.", "PIL.Image.open", "_get_transform.unsqueeze", "PIL.Image.open", "_get_transform.unsqueeze", "PIL.Image.open", "_get_transform.unsqueeze", "torch.mean", "torch.ones_like", "torch.ones_like", "utils_save.flow_to_image", "torch.Tensor().permute().unsqueeze().to", "optical_flow_list.append", "warp.apply_warp_by_field.cpu", "torch.cat().cpu", "str", "torchvision.utils.save_image", "len", "warp.apply_warp_by_field", "warped_source_list.append", "warp.apply_warp_by_field", "warped_checkerboard_list.append", "pathlib.Path", "warped_source_list[].cpu", "str", "pathlib.Path.glob", "pathlib.Path.glob", "pathlib.Path.glob", "pathlib.Path.glob", "pathlib.Path.glob", "PIL.Image.open", "_get_transform.", "_get_transform.", "_get_transform.", "torch.Tensor().permute().unsqueeze", "source_transform().unsqueeze().to.clone", "warp_field.clone", "source_transform().unsqueeze().to.clone", "warp_field.clone", "target_mask_path.name.split", "torch.cat", "pathlib.Path", "pathlib.Path.glob", "pathlib.Path.glob", "pathlib.Path.glob", "pathlib.Path.glob", "pathlib.Path.glob", "pathlib.Path.glob", "pathlib.Path.glob", "pathlib.Path.glob", "pathlib.Path.glob", "pathlib.Path.glob", "source_mask_path.name.split", "target_mask_path.name.split", "torch.Tensor().permute", "source_mask_path.name.split", "torch.Tensor", "utils_save.flow_to_image.astype"], "function", ["home.repos.pwc.inspect_result.jcyang98_inst.None.test_LGW._get_transform", "home.repos.pwc.inspect_result.jcyang98_inst.None.test_LGW._get_transform", "home.repos.pwc.inspect_result.jcyang98_inst.None.segmentation.segment", "home.repos.pwc.inspect_result.jcyang98_inst.None.segmentation.segment", "home.repos.pwc.inspect_result.jcyang98_inst.utils.flow_viz.flow_to_image", "home.repos.pwc.inspect_result.jcyang98_inst.None.warp.apply_warp_by_field", "home.repos.pwc.inspect_result.jcyang98_inst.None.warp.apply_warp_by_field"], ["", "def", "test", "(", "args", ")", ":", "\n", "    ", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "not", "args", ".", "cpu", "else", "'cpu'", ")", "\n", "\n", "extra_flag", "=", "False", "\n", "if", "args", ".", "source_path", "or", "args", ".", "source_dir", ":", "\n", "        ", "extra_flag", "=", "True", "\n", "if", "args", ".", "source_path", ":", "\n", "            ", "source_paths", "=", "[", "Path", "(", "args", ".", "source_path", ")", "]", "\n", "", "else", ":", "\n", "            ", "source_dir", "=", "Path", "(", "args", ".", "source_dir", ")", "\n", "source_paths", "=", "sorted", "(", "[", "f", "for", "f", "in", "source_dir", ".", "glob", "(", "'*.jpg'", ")", "]", "+", "[", "f", "for", "f", "in", "source_dir", ".", "glob", "(", "'*.png'", ")", "]", "+", "[", "f", "for", "f", "in", "source_dir", ".", "glob", "(", "'*.jpeg'", ")", "]", ")", "\n", "\n", "", "", "if", "args", ".", "source_mask_path", ":", "\n", "        ", "source_mask_paths", "=", "[", "Path", "(", "args", ".", "source_mask_path", ")", "]", "\n", "", "elif", "args", ".", "source_mask_dir", ":", "\n", "        ", "source_mask_dir", "=", "Path", "(", "args", ".", "source_mask_dir", ")", "\n", "source_mask_paths", "=", "sorted", "(", "[", "f", "for", "f", "in", "source_mask_dir", ".", "glob", "(", "'*.jpg'", ")", "]", "+", "[", "f", "for", "f", "in", "source_mask_dir", ".", "glob", "(", "'*.png'", ")", "]", "+", "[", "f", "for", "f", "in", "source_mask_dir", ".", "glob", "(", "'*.jpeg'", ")", "]", ")", "\n", "", "else", ":", "\n", "# Use PointRend to help segment", "\n", "        ", "assert", "extra_flag", "\n", "logger", ".", "info", "(", "'Using PointRender to segment source images. This will take a while, if you want to save time and generate more accurate results,'", "\n", "'you can provide source mask and target mask path in the command line'", ")", "\n", "source_mask_paths", "=", "segment", "(", "source_paths", ")", "\n", "\n", "\n", "", "if", "args", ".", "target_path", "or", "args", ".", "target_dir", ":", "\n", "        ", "if", "args", ".", "target_path", ":", "\n", "            ", "target_paths", "=", "[", "Path", "(", "args", ".", "target_path", ")", "]", "\n", "", "else", ":", "\n", "            ", "target_dir", "=", "Path", "(", "args", ".", "target_dir", ")", "\n", "target_paths", "=", "sorted", "(", "[", "f", "for", "f", "in", "target_dir", ".", "glob", "(", "'*.jpg'", ")", "]", "+", "[", "f", "for", "f", "in", "target_dir", ".", "glob", "(", "'*.png'", ")", "]", "+", "[", "f", "for", "f", "in", "target_dir", ".", "glob", "(", "'*.jpeg'", ")", "]", ")", "\n", "\n", "", "", "if", "args", ".", "target_mask_path", ":", "\n", "        ", "target_mask_paths", "=", "[", "Path", "(", "args", ".", "target_mask_path", ")", "]", "\n", "", "elif", "args", ".", "target_mask_dir", ":", "\n", "        ", "target_mask_dir", "=", "Path", "(", "args", ".", "target_mask_dir", ")", "\n", "target_mask_paths", "=", "sorted", "(", "[", "f", "for", "f", "in", "target_mask_dir", ".", "glob", "(", "'*.jpg'", ")", "]", "+", "[", "f", "for", "f", "in", "target_mask_dir", ".", "glob", "(", "'*.png'", ")", "]", "+", "[", "f", "for", "f", "in", "target_mask_dir", ".", "glob", "(", "'*.jpeg'", ")", "]", ")", "\n", "", "else", ":", "\n", "        ", "assert", "args", ".", "target_path", "or", "args", ".", "target_dir", "\n", "logger", ".", "info", "(", "'Using PointRender to segment target images...'", ")", "\n", "target_mask_paths", "=", "segment", "(", "target_paths", ")", "\n", "\n", "\n", "", "checkerboard_flag", "=", "False", "\n", "if", "args", ".", "checkerboard_path", "or", "args", ".", "checkerboard_dir", ":", "\n", "        ", "checkerboard_flag", "=", "True", "\n", "if", "args", ".", "checkerboard_path", ":", "\n", "            ", "assert", "args", ".", "source_path", "\n", "checkerboard_paths", "=", "[", "Path", "(", "args", ".", "checkerboard_path", ")", "]", "\n", "", "else", ":", "\n", "            ", "assert", "args", ".", "source_dir", "\n", "checkerboard_dir", "=", "Path", "(", "args", ".", "checkerboard_dir", ")", "\n", "checkerboard_paths", "=", "sorted", "(", "[", "f", "for", "f", "in", "checkerboard_dir", ".", "glob", "(", "'*.jpg'", ")", "]", "+", "[", "f", "for", "f", "in", "checkerboard_dir", ".", "glob", "(", "'*.png'", ")", "]", "+", "[", "f", "for", "f", "in", "checkerboard_dir", ".", "glob", "(", "'*.jpeg'", ")", "]", ")", "\n", "\n", "", "", "if", "len", "(", "source_mask_paths", ")", "==", "0", "or", "len", "(", "target_mask_paths", ")", "==", "0", ":", "\n", "        ", "logger", ".", "warn", "(", "'no test images'", ")", "\n", "return", "\n", "\n", "# Model", "\n", "", "logger", ".", "info", "(", "f'Using {args.model_type} for Testing'", ")", "\n", "if", "args", ".", "model_type", "==", "'mask_raft'", ":", "\n", "        ", "model", "=", "mask_RAFT", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "checkpoint", ")", "\n", "# model.load_state_dict({k.replace('module.',''):v for k,v in checkpoint.items()})", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'modelstate'", "]", ")", "\n", "\n", "output_dir", "=", "Path", "(", "args", ".", "output_dir", ")", "\n", "output_dir", ".", "mkdir", "(", "exist_ok", "=", "True", ")", "\n", "source_transform", "=", "_get_transform", "(", "size", "=", "(", "args", ".", "im_height", ",", "args", ".", "im_width", ")", ")", "\n", "target_transform", "=", "_get_transform", "(", "size", "=", "(", "args", ".", "im_height", ",", "args", ".", "im_width", ")", ")", "\n", "\n", "if", "args", ".", "make_grid", ":", "\n", "        ", "c", ",", "h", ",", "w", "=", "target_transform", "(", "Image", ".", "open", "(", "target_mask_paths", "[", "0", "]", ")", ".", "convert", "(", "'RGB'", ")", ")", ".", "size", "(", ")", "\n", "concat_list", "=", "[", "]", "\n", "first_row", "=", "[", "torch", ".", "ones", "(", "1", ",", "c", ",", "h", ",", "w", ")", "]", "\n", "for", "target_path", "in", "target_mask_paths", ":", "\n", "            ", "target_img", "=", "Image", ".", "open", "(", "target_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "target", "=", "target_transform", "(", "target_img", ")", ".", "unsqueeze", "(", "0", ")", "\n", "first_row", ".", "append", "(", "target", ")", "\n", "", "first_row", "=", "torch", ".", "cat", "(", "first_row", ",", "dim", "=", "0", ")", "\n", "concat_list", ".", "append", "(", "first_row", ")", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "for", "i", ",", "source_mask_path", "in", "enumerate", "(", "source_mask_paths", ")", ":", "\n", "        ", "source_mask_img", "=", "Image", ".", "open", "(", "source_mask_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "source_mask", "=", "source_transform", "(", "source_mask_img", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "if", "extra_flag", ":", "\n", "            ", "source_img", "=", "Image", ".", "open", "(", "source_paths", "[", "i", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "source", "=", "source_transform", "(", "source_img", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", "\n", "", "if", "checkerboard_flag", ":", "\n", "            ", "checkerboard_img", "=", "Image", ".", "open", "(", "checkerboard_paths", "[", "i", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "checkerboard_source", "=", "source_transform", "(", "checkerboard_img", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "if", "args", ".", "make_grid", ":", "\n", "            ", "row", "=", "[", "source_mask", "]", "\n", "", "source_mask", "=", "source_mask", ".", "to", "(", "device", ")", "\n", "for", "target_mask_path", "in", "target_mask_paths", ":", "\n", "            ", "target_mask_img", "=", "Image", ".", "open", "(", "target_mask_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "target_mask", "=", "target_transform", "(", "target_mask_img", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", "\n", "corr_map", "=", "[", "None", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "warp_fields", ",", "warped_source_mask_list", "=", "model", "(", "source_mask", ",", "target_mask", ",", "refine_time", "=", "args", ".", "refine_time", ",", "test", "=", "True", ",", "corr_map", "=", "corr_map", ")", "\n", "warped_source", "=", "warped_source_mask_list", "[", "-", "1", "]", "\n", "", "corr_map", "=", "torch", ".", "mean", "(", "corr_map", "[", "0", "]", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "if", "not", "args", ".", "make_grid", ":", "\n", "# Transform optical flow tensor", "\n", "                ", "optical_flow_list", "=", "[", "torch", ".", "ones_like", "(", "source", ")", ",", "torch", ".", "ones_like", "(", "source", ")", "]", "\n", "for", "warp_field", "in", "warp_fields", ":", "\n", "                    ", "optical_flow_np", "=", "flow_to_image", "(", "warp_field", ")", "# [256,256,3] ndarray", "\n", "optical_flow_tensor", "=", "torch", ".", "Tensor", "(", "optical_flow_np", ".", "astype", "(", "np", ".", "float", ")", "/", "255", ")", ".", "permute", "(", "(", "2", ",", "0", ",", "1", ")", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", "\n", "optical_flow_list", ".", "append", "(", "optical_flow_tensor", ")", "\n", "# Extra source images warp", "\n", "", "if", "extra_flag", ":", "\n", "                    ", "warped_source_list", "=", "[", "source", ",", "target_mask", "]", "\n", "for", "warp_field", "in", "warp_fields", ":", "\n", "                        ", "warped_source", "=", "apply_warp_by_field", "(", "source", ".", "clone", "(", ")", ",", "warp_field", ".", "clone", "(", ")", ",", "device", ")", "\n", "warped_source_list", ".", "append", "(", "warped_source", ")", "\n", "", "", "else", ":", "\n", "                    ", "warped_source_list", "=", "[", "]", "\n", "", "if", "checkerboard_flag", ":", "\n", "                    ", "warped_checkerboard_list", "=", "[", "checkerboard_source", ",", "target_mask", "]", "\n", "for", "warp_field", "in", "warp_fields", ":", "\n", "                        ", "warped_checkerboard", "=", "apply_warp_by_field", "(", "checkerboard_source", ".", "clone", "(", ")", ",", "warp_field", ".", "clone", "(", ")", ",", "device", ")", "\n", "warped_checkerboard_list", ".", "append", "(", "warped_checkerboard", ")", "\n", "", "", "else", ":", "\n", "                    ", "warped_checkerboard_list", "=", "[", "]", "\n", "\n", "", "", "if", "args", ".", "make_grid", ":", "\n", "                ", "row", ".", "append", "(", "warped_source", ".", "cpu", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "save_image_name", "=", "source_mask_path", ".", "name", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'_shaped_'", "+", "target_mask_path", ".", "name", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "f'_refine{args.refine_time}.jpg'", "\n", "save_image", "(", "torch", ".", "cat", "(", "[", "source_mask", ",", "target_mask", "]", "+", "warped_source_mask_list", "+", "warped_source_list", "+", "warped_checkerboard_list", "+", "optical_flow_list", ",", "dim", "=", "0", ")", ".", "cpu", "(", ")", ",", "\n", "str", "(", "Path", "(", "output_dir", ",", "save_image_name", ")", ")", ",", "scale_each", "=", "True", ",", "nrow", "=", "2", "+", "args", ".", "refine_time", ",", "padding", "=", "4", ",", "pad_value", "=", "255", ")", "\n", "if", "extra_flag", ":", "\n", "                    ", "single_image_name", "=", "f'single_'", "+", "source_mask_path", ".", "name", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'_shaped_'", "+", "target_mask_path", ".", "name", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "f'_refine{args.refine_time}.jpg'", "\n", "save_image", "(", "warped_source_list", "[", "-", "1", "]", ".", "cpu", "(", ")", ",", "str", "(", "Path", "(", "output_dir", ",", "single_image_name", ")", ")", ",", "scale_each", "=", "True", ",", "nrow", "=", "1", ",", "padding", "=", "4", ",", "pad_value", "=", "255", ")", "\n", "\n", "", "", "", "if", "args", ".", "make_grid", ":", "\n", "            ", "concat_list", ".", "append", "(", "torch", ".", "cat", "(", "row", ",", "dim", "=", "0", ")", ")", "\n", "", "", "if", "args", ".", "make_grid", ":", "\n", "        ", "concat", "=", "torch", ".", "cat", "(", "concat_list", ",", "dim", "=", "0", ")", "\n", "save_image", "(", "concat", ",", "Path", "(", "output_dir", ",", "'grid_result.jpg'", ")", ",", "scale_each", "=", "True", ",", "nrow", "=", "len", "(", "target_mask_paths", ")", "+", "1", ",", "padding", "=", "4", ",", "pad_value", "=", "255", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.None.warp.sharpWarp.forward": [[262, 271], ["ctx.save_for_backward", "torch.round", "torch.round"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "a0", ",", "a1", ")", ":", "\n", "\n", "        ", "ctx", ".", "save_for_backward", "(", "a0", ",", "a1", ")", "\n", "\n", "as0", "=", "torch", ".", "round", "(", "a0", ")", "#, torch.round(a1)]", "\n", "as1", "=", "torch", ".", "round", "(", "a1", ")", "#, torch.round(a1)]", "\n", "\n", "return", "as0", ",", "as1", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.None.warp.sharpWarp.backward": [[272, 296], ["print", "print", "print", "print", "print", "wreck", "grad_output.clone"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output0", ",", "grad_output1", ")", ":", "\n", "        ", "\"\"\"\n        In the backward pass we receive a Tensor containing the gradient of the loss\n        with respect to the output, and we need to compute the gradient of the loss\n        with respect to the input.\n        \"\"\"", "\n", "a0", ",", "a1", "=", "ctx", ".", "saved_tensors", "\n", "\n", "if", "0", ":", "\n", "            ", "print", "(", "grad_output0", "[", ":", "10", "]", ")", "\n", "print", "(", "a0", "[", ":", "10", "]", ")", "\n", "\n", "print", "(", "'----'", ")", "\n", "\n", "print", "(", "grad_output1", "[", ":", "10", "]", ")", "\n", "print", "(", "a1", "[", ":", "10", "]", ")", "\n", "\n", "wreck", "(", ")", "\n", "\n", "grad_input", "=", "grad_output", ".", "clone", "(", ")", "\n", "grad_input", "[", "input", "<", "0", "]", "=", "0", "\n", "\n", "", "return", "grad_output0", ",", "grad_output1", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.None.warp.umeyama": [[10, 64], ["src.mean", "dst.mean", "numpy.ones", "numpy.eye", "numpy.linalg.svd", "numpy.linalg.matrix_rank", "numpy.dot", "numpy.linalg.det", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "src_demean.var().sum", "numpy.linalg.det", "numpy.linalg.det", "numpy.dot", "numpy.diag", "numpy.diag", "src_demean.var"], "function", ["None"], ["def", "umeyama", "(", "src", ",", "dst", ",", "estimate_scale", ")", ":", "\n", "   ", "\"\"\"Estimate N-D similarity transformation with or without scaling.\n   Parameters\n   ----------\n   src : (M, N) array\n       Source coordinates.\n   dst : (M, N) array\n       Destination coordinates.\n   estimate_scale : bool\n       Whether to estimate scaling factor.\n   Returns\n   -------\n   T : (N + 1, N + 1)\n       The homogeneous similarity transformation matrix. The matrix contains\n       NaN values only if the problem is not well-conditioned.\n   \"\"\"", "\n", "num", "=", "src", ".", "shape", "[", "0", "]", "\n", "dim", "=", "src", ".", "shape", "[", "1", "]", "\n", "# Compute mean of src and dst.", "\n", "src_mean", "=", "src", ".", "mean", "(", "axis", "=", "0", ")", "\n", "dst_mean", "=", "dst", ".", "mean", "(", "axis", "=", "0", ")", "\n", "# Subtract mean from src and dst.", "\n", "src_demean", "=", "src", "-", "src_mean", "\n", "dst_demean", "=", "dst", "-", "dst_mean", "\n", "# Eq. (38).", "\n", "A", "=", "np", ".", "dot", "(", "dst_demean", ".", "T", ",", "src_demean", ")", "/", "num", "\n", "# Eq. (39).", "\n", "d", "=", "np", ".", "ones", "(", "(", "dim", ",", ")", ",", "dtype", "=", "np", ".", "double", ")", "\n", "if", "np", ".", "linalg", ".", "det", "(", "A", ")", "<", "0", ":", "\n", "       ", "d", "[", "dim", "-", "1", "]", "=", "-", "1", "\n", "", "T", "=", "np", ".", "eye", "(", "dim", "+", "1", ",", "dtype", "=", "np", ".", "double", ")", "\n", "U", ",", "S", ",", "V", "=", "np", ".", "linalg", ".", "svd", "(", "A", ")", "\n", "# Eq. (40) and (43).", "\n", "rank", "=", "np", ".", "linalg", ".", "matrix_rank", "(", "A", ")", "\n", "if", "rank", "==", "0", ":", "\n", "       ", "return", "np", ".", "nan", "*", "T", "\n", "", "elif", "rank", "==", "dim", "-", "1", ":", "\n", "       ", "if", "np", ".", "linalg", ".", "det", "(", "U", ")", "*", "np", ".", "linalg", ".", "det", "(", "V", ")", ">", "0", ":", "\n", "           ", "T", "[", ":", "dim", ",", ":", "dim", "]", "=", "np", ".", "dot", "(", "U", ",", "V", ")", "\n", "", "else", ":", "\n", "           ", "s", "=", "d", "[", "dim", "-", "1", "]", "\n", "d", "[", "dim", "-", "1", "]", "=", "-", "1", "\n", "T", "[", ":", "dim", ",", ":", "dim", "]", "=", "np", ".", "dot", "(", "U", ",", "np", ".", "dot", "(", "np", ".", "diag", "(", "d", ")", ",", "V", ")", ")", "\n", "d", "[", "dim", "-", "1", "]", "=", "s", "\n", "", "", "else", ":", "\n", "       ", "T", "[", ":", "dim", ",", ":", "dim", "]", "=", "np", ".", "dot", "(", "U", ",", "np", ".", "dot", "(", "np", ".", "diag", "(", "d", ")", ",", "V", ".", "T", ")", ")", "\n", "", "if", "estimate_scale", ":", "\n", "# Eq. (41) and (42).", "\n", "       ", "scale", "=", "1.0", "/", "src_demean", ".", "var", "(", "axis", "=", "0", ")", ".", "sum", "(", ")", "*", "np", ".", "dot", "(", "S", ",", "d", ")", "\n", "", "else", ":", "\n", "       ", "scale", "=", "1.0", "\n", "", "T", "[", ":", "dim", ",", "dim", "]", "=", "dst_mean", "-", "scale", "*", "np", ".", "dot", "(", "T", "[", ":", "dim", ",", ":", "dim", "]", ",", "src_mean", ".", "T", ")", "\n", "T", "[", ":", "dim", ",", ":", "dim", "]", "*=", "scale", "\n", "return", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.None.warp.image_warp": [[67, 123], ["time.time", "warp.solve_interpolation", "time.time", "img.reshape().permute.size", "numpy.meshgrid", "numpy.stack", "np.stack.reshape", "torch.from_numpy().float().to", "warp.apply_interpolation", "apply_interpolation.reshape", "time.time", "numpy.meshgrid", "numpy.stack", "torch.from_numpy().float().to", "query_points_on_grid.reshape", "img.reshape().permute.reshape().permute", "warp.interpolate_bilinear", "interpolated.reshape.reshape().permute", "interpolated.reshape.reshape", "flattened_flow.reshape.clone().reshape().permute", "warp_field.reshape.reshape", "time.time", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "img2.reshape().permute.reshape().permute", "warp.interpolate_bilinear", "interpolated2.reshape.reshape().permute", "interpolated2.reshape.reshape", "torch.from_numpy().float", "torch.from_numpy().float", "img.reshape().permute.reshape", "interpolated.reshape.reshape", "flattened_flow.reshape.clone().reshape", "img2.reshape().permute.reshape", "interpolated2.reshape.reshape", "torch.from_numpy", "torch.from_numpy", "flattened_flow.reshape.clone"], "function", ["home.repos.pwc.inspect_result.jcyang98_inst.None.warp.solve_interpolation", "home.repos.pwc.inspect_result.jcyang98_inst.None.warp.apply_interpolation", "home.repos.pwc.inspect_result.jcyang98_inst.None.warp.interpolate_bilinear", "home.repos.pwc.inspect_result.jcyang98_inst.None.warp.interpolate_bilinear"], ["", "def", "image_warp", "(", "img", ",", "dst_pts", ",", "flow_pts", ",", "device", ",", "sharp", "=", "False", ",", "img2", "=", "None", ")", ":", "\n", "    ", "\"\"\"Warps the giving image based on displacement and destination points\n\n    Args:\n        img: [b, c, h, w] float `Tensor`\n        dst_pts: [n, 2] float `Tensor`\n        flow_pts: [n, 2] float `Tensor`\n\n    Returns:\n        interpolated: [b, c, h, w] float `Tensor`\n    \"\"\"", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "w", ",", "v", "=", "solve_interpolation", "(", "dst_pts", ",", "flow_pts", ",", "device", ")", "\n", "\n", "solve_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "_", ",", "_", ",", "height", ",", "width", "=", "img", ".", "size", "(", ")", "\n", "grid_x", ",", "grid_y", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "width", ")", ",", "np", ".", "arange", "(", "height", ")", ")", "\n", "grid_locations", "=", "np", ".", "stack", "(", "[", "grid_y", ",", "grid_x", "]", ",", "axis", "=", "2", ")", "# (H, W, 2)", "\n", "flattened_grid_locations", "=", "grid_locations", ".", "reshape", "(", "[", "height", "*", "width", ",", "2", "]", ")", "# (H*W, 2)", "\n", "flattened_grid_locations", "=", "torch", ".", "from_numpy", "(", "flattened_grid_locations", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "flattened_flow", "=", "apply_interpolation", "(", "flattened_grid_locations", ",", "dst_pts", ",", "w", ",", "v", ",", "device", ")", "\n", "flow", "=", "flattened_flow", ".", "reshape", "(", "[", "height", ",", "width", ",", "2", "]", ")", "\n", "\n", "interp_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "\n", "grid_x", ",", "grid_y", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "width", ")", ",", "np", ".", "arange", "(", "height", ")", ")", "\n", "stacked_grid", "=", "np", ".", "stack", "(", "[", "grid_y", ",", "grid_x", "]", ",", "axis", "=", "2", ")", "# (H, W, 2)", "\n", "stacked_grid", "=", "torch", ".", "from_numpy", "(", "stacked_grid", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "query_points_on_grid", "=", "stacked_grid", "-", "flow", "# (H, W, 2)", "\n", "query_points_flattened", "=", "query_points_on_grid", ".", "reshape", "(", "[", "height", "*", "width", ",", "2", "]", ")", "# (H*W, 2)", "\n", "\n", "img", "=", "img", ".", "reshape", "(", "(", "3", ",", "height", ",", "width", ")", ")", ".", "permute", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "interpolated", "=", "interpolate_bilinear", "(", "img", ",", "query_points_flattened", ",", "device", ",", "indexing", "=", "'ij'", ",", "sharp", "=", "sharp", ")", "# (H*W, C)", "\n", "interpolated", "=", "interpolated", ".", "reshape", "(", "(", "height", ",", "width", ",", "3", ")", ")", ".", "permute", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "interpolated", "=", "interpolated", ".", "reshape", "(", "(", "1", ",", "3", ",", "height", ",", "width", ")", ")", "\n", "warp_field", "=", "flow", ".", "clone", "(", ")", ".", "reshape", "(", "(", "height", ",", "width", ",", "2", ")", ")", ".", "permute", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "warp_field", "=", "warp_field", ".", "reshape", "(", "(", "1", ",", "2", ",", "height", ",", "width", ")", ")", "\n", "\n", "if", "img2", "is", "not", "None", ":", "\n", "      ", "img2", "=", "img2", ".", "reshape", "(", "(", "3", ",", "height", ",", "width", ")", ")", ".", "permute", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "interpolated2", "=", "interpolate_bilinear", "(", "img2", ",", "query_points_flattened", ",", "device", ",", "indexing", "=", "'ij'", ",", "sharp", "=", "sharp", ")", "# (H*W, C)", "\n", "interpolated2", "=", "interpolated2", ".", "reshape", "(", "(", "height", ",", "width", ",", "3", ")", ")", ".", "permute", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "interpolated2", "=", "interpolated2", ".", "reshape", "(", "(", "1", ",", "3", ",", "height", ",", "width", ")", ")", "\n", "\n", "", "finish_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "img2", "is", "None", ":", "\n", "      ", "return", "interpolated", ",", "warp_field", "\n", "", "else", ":", "\n", "      ", "return", "interpolated", ",", "interpolated2", ",", "warp_field", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.None.warp.phi": [[125, 126], ["torch.log", "torch.clamp"], "function", ["None"], ["", "", "def", "phi", "(", "r", ")", ":", "return", "0.5", "*", "r", "*", "torch", ".", "log", "(", "torch", ".", "clamp", "(", "r", ",", "min", "=", "1e-10", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.None.warp.cross_squared_distance_matrix": [[128, 153], ["torch.sum", "torch.sum", "torch.sum.unsqueeze", "torch.sum.unsqueeze", "torch.matmul", "torch.mul", "torch.mul", "x.to", "torch.transpose", "x_norm_squared.unsqueeze.to"], "function", ["None"], ["def", "cross_squared_distance_matrix", "(", "x", ",", "y", ",", "device", ")", ":", "\n", "    ", "\"\"\"Pairwise squared distance between two matrices' rows.\n\n    Computes the pairwise distances between rows of x and rows of y\n    Args:\n      x: [n, d] float `Tensor`\n      y: [m, d] float `Tensor`\n\n    Returns:\n      squared_dists: [n, m] float `Tensor`, where\n      squared_dists[i,j] = ||x[i,:] - y[j,:]||^2\n    \"\"\"", "\n", "x_norm_squared", "=", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "x", ",", "x", ")", ",", "1", ")", "\n", "y_norm_squared", "=", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "y", ",", "y", ")", ",", "1", ")", "\n", "\n", "# Expand so that we can broadcast.", "\n", "x_norm_squared_tile", "=", "x_norm_squared", ".", "unsqueeze", "(", "1", ")", "\n", "y_norm_squared_tile", "=", "y_norm_squared", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "x_y_transpose", "=", "torch", ".", "matmul", "(", "x", ".", "to", "(", "device", ")", ",", "torch", ".", "transpose", "(", "y", ",", "0", ",", "1", ")", ")", "\n", "\n", "# squared_dists[i,j] = ||x_i - y_j||^2 = x_i'x_i- 2x_i'x_j + x_j'x_j", "\n", "squared_dists", "=", "x_norm_squared_tile", ".", "to", "(", "device", ")", "-", "2", "*", "x_y_transpose", "+", "y_norm_squared_tile", "\n", "\n", "return", "squared_dists", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.None.warp.pairwise_squared_distance_matrix": [[155, 175], ["torch.matmul", "torch.diagonal().reshape", "torch.transpose", "torch.transpose", "torch.diagonal"], "function", ["None"], ["", "def", "pairwise_squared_distance_matrix", "(", "x", ")", ":", "\n", "    ", "\"\"\"Pairwise squared distance among a matrix's rows.\n\n    This saves a bit of computation vs. using cross_squared_distance_matrix(x,x)\n\n    Args:\n        x: `[n, d]` float `Tensor`\n\n    Returns:\n        squared_dists: `[n, n]` float `Tensor`, where\n        squared_dists[i,j] = ||x[i,:] - x[j,:]||^2\n    \"\"\"", "\n", "\n", "x_x_transpose", "=", "torch", ".", "matmul", "(", "x", ",", "torch", ".", "transpose", "(", "x", ",", "0", ",", "1", ")", ")", "# (n, n)", "\n", "x_norm_squared", "=", "torch", ".", "diagonal", "(", "x_x_transpose", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "# (n, 1)", "\n", "\n", "# squared_dists[i,j] = ||x_i - x_j||^2 = x_i'x_i- 2x_i'x_j + x_j'x_j", "\n", "squared_dists", "=", "x_norm_squared", "-", "2", "*", "x_x_transpose", "+", "torch", ".", "transpose", "(", "x_norm_squared", ",", "0", ",", "1", ")", "\n", "\n", "return", "squared_dists", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.None.warp.solve_interpolation": [[177, 226], ["train_points.size", "train_values.size", "warp.phi", "torch.ones().to", "torch.cat", "torch.cat", "torch.cat.size", "torch.zeros().to", "torch.cat", "torch.cat", "torch.zeros().to", "torch.cat", "torch.solve", "warp.pairwise_squared_distance_matrix", "torch.ones", "torch.transpose", "torch.zeros", "torch.zeros"], "function", ["home.repos.pwc.inspect_result.jcyang98_inst.None.warp.phi", "home.repos.pwc.inspect_result.jcyang98_inst.None.warp.pairwise_squared_distance_matrix"], ["", "def", "solve_interpolation", "(", "train_points", ",", "train_values", ",", "device", ")", ":", "\n", "    ", "\"\"\"Solve for interpolation coefficients.\n\n    Computes the coefficients of the polyharmonic interpolant for the 'training'\n    data defined by (train_points, train_values) using the kernel phi.\n\n    Args:\n        train_points: `[n, d]` interpolation centers\n        train_values: `[n, k]` function values\n\n    Returns:\n        w: `[n, k]` weights on each interpolation center\n        v: `[d, k]` weights on each input dimension\n    \"\"\"", "\n", "\n", "n", ",", "d", "=", "train_points", ".", "size", "(", ")", "\n", "_", ",", "k", "=", "train_values", ".", "size", "(", ")", "\n", "\n", "# First, rename variables so that the notation (c, f, w, v, A, B, etc.)", "\n", "# follows https://en.wikipedia.org/wiki/Polyharmonic_spline.", "\n", "c", "=", "train_points", "\n", "f", "=", "train_values", "\n", "\n", "# Next, construct the linear system.", "\n", "matrix_a", "=", "phi", "(", "pairwise_squared_distance_matrix", "(", "c", ")", ")", "# [n, n]", "\n", "#matrix_a += torch.randn_like(matrix_a)*1e-3", "\n", "\n", "# Append ones to the feature values for the bias term in the linear model.", "\n", "ones", "=", "torch", ".", "ones", "(", "[", "n", ",", "1", "]", ")", ".", "to", "(", "device", ")", "\n", "matrix_b", "=", "torch", ".", "cat", "(", "[", "c", ",", "ones", "]", ",", "1", ")", "# [n, d+1]", "\n", "#matrix_b += torch.randn_like(matrix_b)*1e-3", "\n", "\n", "left_block", "=", "torch", ".", "cat", "(", "[", "matrix_a", ",", "torch", ".", "transpose", "(", "matrix_b", ",", "0", ",", "1", ")", "]", ",", "0", ")", "# [n+d+1, n]", "\n", "num_b_cols", "=", "matrix_b", ".", "size", "(", "1", ")", "# d+1", "\n", "\n", "lhs_zeros", "=", "torch", ".", "zeros", "(", "[", "num_b_cols", ",", "num_b_cols", "]", ")", ".", "to", "(", "device", ")", "\n", "\n", "right_block", "=", "torch", ".", "cat", "(", "[", "matrix_b", ",", "lhs_zeros", "]", ",", "0", ")", "# [n+d+1, d+1]", "\n", "lhs", "=", "torch", ".", "cat", "(", "[", "left_block", ",", "right_block", "]", ",", "1", ")", "# [n+d+1, n+d+1]", "\n", "\n", "rhs_zeros", "=", "torch", ".", "zeros", "(", "[", "d", "+", "1", ",", "k", "]", ")", ".", "to", "(", "device", ")", "\n", "rhs", "=", "torch", ".", "cat", "(", "[", "f", ",", "rhs_zeros", "]", ",", "0", ")", "# [n+d+1, k]", "\n", "\n", "# Then, solve the linear system and unpack the results.", "\n", "w_v", ",", "_", "=", "torch", ".", "solve", "(", "rhs", ",", "lhs", ")", "\n", "w", "=", "w_v", "[", ":", "n", "]", "\n", "v", "=", "w_v", "[", "n", ":", "]", "\n", "\n", "return", "w", ",", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.None.warp.apply_interpolation": [[228, 259], ["query_points.size", "warp.cross_squared_distance_matrix", "warp.phi", "torch.matmul", "torch.cat", "torch.matmul", "torch.ones().to", "torch.ones"], "function", ["home.repos.pwc.inspect_result.jcyang98_inst.None.warp.cross_squared_distance_matrix", "home.repos.pwc.inspect_result.jcyang98_inst.None.warp.phi"], ["", "def", "apply_interpolation", "(", "query_points", ",", "train_points", ",", "w", ",", "v", ",", "device", ")", ":", "\n", "    ", "\"\"\"Apply polyharmonic interpolation model to data.\n\n    Given coefficients w and v for the interpolation model, we evaluate\n    interpolated function values at query_points.\n\n    Args:\n      query_points: `[m, d]` x values to evaluate the interpolation at\n      train_points: `[n, d]` x values that act as the interpolation centers\n                      ( the c variables in the wikipedia article)\n      w: `[n, k]` weights on each interpolation center\n      v: `[d, k]` weights on each input dimension\n\n    Returns:\n      Polyharmonic interpolation evaluated at points defined in query_points.\n    \"\"\"", "\n", "\n", "num_query_points", "=", "query_points", ".", "size", "(", "0", ")", "\n", "\n", "# First, compute the contribution from the rbf term.", "\n", "pairwise_dists", "=", "cross_squared_distance_matrix", "(", "query_points", ",", "train_points", ",", "device", ")", "\n", "phi_pairwise_dists", "=", "phi", "(", "pairwise_dists", ")", "\n", "\n", "rbf_term", "=", "torch", ".", "matmul", "(", "phi_pairwise_dists", ",", "w", ")", "\n", "\n", "# Then, compute the contribution from the linear term.", "\n", "# Pad query_points with ones, for the bias term in the linear model.", "\n", "query_points_pad", "=", "torch", ".", "cat", "(", "[", "query_points", ",", "torch", ".", "ones", "(", "[", "num_query_points", ",", "1", "]", ")", ".", "to", "(", "device", ")", "]", ",", "1", ")", "\n", "linear_term", "=", "torch", ".", "matmul", "(", "query_points_pad", ",", "v", ")", "\n", "\n", "return", "rbf_term", "+", "linear_term", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.None.warp.interpolate_bilinear": [[298, 403], ["grid.size", "torch.unbind", "grid.reshape", "grid.size", "torch.clamp", "torch.clamp.int", "floors.append", "ceils.append", "torch.clamp", "alpha.unsqueeze.unsqueeze", "alphas.append", "linear_coordinates.long.long", "warp.interpolate_bilinear.gather"], "function", ["None"], ["", "", "def", "interpolate_bilinear", "(", "grid", ",", "query_points", ",", "device", ",", "indexing", "=", "'ij'", ",", "sharp", "=", "False", ")", ":", "\n", "    ", "\"\"\"Similar to Matlab's interp2 function.\n    Finds values for query points on a grid using bilinear interpolation.\n\n    Args:\n      grid: a 3-D float `Tensor` of shape `[height, width, channels]`.\n      query_points: a 2-D float `Tensor` of N points with shape `[N, 2]`.\n      name: a name for the operation (optional).\n      indexing: whether the query points are specified as row and column (ij),\n        or Cartesian coordinates (xy).\n\n    Returns:\n      values: a 2-D `Tensor` with shape `[N, channels]`\n\n    Raises:\n      ValueError: if the indexing mode is invalid, or if the shape of the inputs\n        invalid.\n    \"\"\"", "\n", "\n", "height", ",", "width", ",", "channels", "=", "grid", ".", "size", "(", ")", "\n", "query_type", "=", "query_points", ".", "dtype", "\n", "grid_type", "=", "grid", ".", "dtype", "\n", "num_queries", ",", "_", "=", "query_points", ".", "shape", "\n", "\n", "alphas", "=", "[", "]", "\n", "floors", "=", "[", "]", "\n", "ceils", "=", "[", "]", "\n", "\n", "index_order", "=", "[", "0", ",", "1", "]", "if", "indexing", "==", "'ij'", "else", "[", "1", ",", "0", "]", "\n", "unstacked_query_points", "=", "torch", ".", "unbind", "(", "query_points", ",", "1", ")", "\n", "\n", "for", "dim", "in", "index_order", ":", "\n", "        ", "queries", "=", "unstacked_query_points", "[", "dim", "]", "\n", "size_in_indexing_dimension", "=", "grid", ".", "size", "(", "dim", ")", "\n", "\n", "# max_floor is size_in_indexing_dimension - 2 so that max_floor + 1", "\n", "# is still a valid index into the grid.", "\n", "max_floor", "=", "size_in_indexing_dimension", "-", "2", "# query_type", "\n", "min_floor", "=", "0.0", "# query_type", "\n", "floor", "=", "torch", ".", "clamp", "(", "torch", ".", "clamp", "(", "torch", ".", "floor", "(", "queries", ")", ",", "min", "=", "min_floor", ")", ",", "max", "=", "max_floor", ")", "\n", "int_floor", "=", "floor", ".", "int", "(", ")", "\n", "floors", ".", "append", "(", "int_floor", ")", "\n", "ceil", "=", "int_floor", "+", "1", "\n", "ceils", ".", "append", "(", "ceil", ")", "\n", "\n", "# alpha has the same type as the grid, as we will directly use alpha", "\n", "# when taking linear combinations of pixel values from the image.", "\n", "alpha", "=", "queries", "-", "floor", "# grid_type", "\n", "min_alpha", "=", "0.0", "# grid_type", "\n", "max_alpha", "=", "1.0", "# grid_type", "\n", "alpha", "=", "torch", ".", "clamp", "(", "torch", ".", "clamp", "(", "alpha", ",", "min", "=", "min_alpha", ")", ",", "max", "=", "max_alpha", ")", "\n", "\n", "# Expand alpha to [b, n, 1] so we can use broadcasting", "\n", "# (since the alpha values don't depend on the channel).", "\n", "alpha", "=", "alpha", ".", "unsqueeze", "(", "1", ")", "\n", "alphas", ".", "append", "(", "alpha", ")", "\n", "\n", "", "flattened_grid", "=", "grid", ".", "reshape", "(", "[", "height", "*", "width", ",", "channels", "]", ")", "\n", "\n", "# This wraps array_ops.gather. We reshape the image data such that the", "\n", "# batch, y, and x coordinates are pulled into the first dimension.", "\n", "# Then we gather. Finally, we reshape the output back. It's possible this", "\n", "# code would be made simpler by using array_ops.gather_nd.", "\n", "def", "gather", "(", "y_coords", ",", "x_coords", ",", "name", ")", ":", "\n", "        ", "linear_coordinates", "=", "y_coords", "*", "width", "+", "x_coords", "# (H*W)", "\n", "linear_coordinates", "=", "linear_coordinates", ".", "long", "(", ")", "#torch.LongTensor(linear_coordinates.long())", "\n", "gathered_values", "=", "flattened_grid", "[", "linear_coordinates", "]", "\n", "return", "gathered_values", "\n", "\n", "", "if", "not", "sharp", ":", "\n", "# Grab the pixel values in the 4 corners around each query point", "\n", "        ", "top_left", "=", "gather", "(", "floors", "[", "0", "]", ",", "floors", "[", "1", "]", ",", "'top_left'", ")", "# (H*W, 3)", "\n", "top_right", "=", "gather", "(", "floors", "[", "0", "]", ",", "ceils", "[", "1", "]", ",", "'top_right'", ")", "# (H*W, 3)", "\n", "bottom_left", "=", "gather", "(", "ceils", "[", "0", "]", ",", "floors", "[", "1", "]", ",", "'bottom_left'", ")", "# (H*W, 3)", "\n", "bottom_right", "=", "gather", "(", "ceils", "[", "0", "]", ",", "ceils", "[", "1", "]", ",", "'bottom_right'", ")", "# (H*W, 3)", "\n", "\n", "# Now do the actual interpolation", "\n", "try", ":", "\n", "            ", "interp_top", "=", "alphas", "[", "1", "]", ".", "cuda", "(", ")", "*", "(", "top_right", "-", "top_left", ")", "+", "top_left", "\n", "interp_bottom", "=", "alphas", "[", "1", "]", ".", "cuda", "(", ")", "*", "(", "bottom_right", "-", "bottom_left", ")", "+", "bottom_left", "\n", "interp", "=", "alphas", "[", "0", "]", ".", "cuda", "(", ")", "*", "(", "interp_bottom", "-", "interp_top", ")", "+", "interp_top", "\n", "\n", "", "except", ":", "\n", "            ", "interp_top", "=", "alphas", "[", "1", "]", "*", "(", "top_right", "-", "top_left", ")", "+", "top_left", "\n", "interp_bottom", "=", "alphas", "[", "1", "]", "*", "(", "bottom_right", "-", "bottom_left", ")", "+", "bottom_left", "\n", "interp", "=", "alphas", "[", "0", "]", "*", "(", "interp_bottom", "-", "interp_top", ")", "+", "interp_top", "\n", "\n", "", "", "else", ":", "\n", "\n", "# Grab the pixel values in the 4 corners around each query point", "\n", "        ", "top_left", "=", "gather", "(", "floors", "[", "0", "]", ",", "floors", "[", "1", "]", ",", "'top_left'", ")", "# (H*W, 3)", "\n", "top_right", "=", "gather", "(", "floors", "[", "0", "]", ",", "ceils", "[", "1", "]", ",", "'top_right'", ")", "# (H*W, 3)", "\n", "bottom_left", "=", "gather", "(", "ceils", "[", "0", "]", ",", "floors", "[", "1", "]", ",", "'bottom_left'", ")", "# (H*W, 3)", "\n", "bottom_right", "=", "gather", "(", "ceils", "[", "0", "]", ",", "ceils", "[", "1", "]", ",", "'bottom_right'", ")", "# (H*W, 3)", "\n", "\n", "\n", "alpha_sharp", "=", "sharpWarp", ".", "apply", "(", "alphas", "[", "0", "]", ",", "alphas", "[", "1", "]", ")", "\n", "alpha_sharp", "=", "[", "ai", ".", "to", "(", "device", ")", "for", "ai", "in", "alpha_sharp", "]", "\n", "\n", "\n", "interp_top", "=", "alpha_sharp", "[", "1", "]", "*", "(", "top_right", "-", "top_left", ")", "+", "top_left", "\n", "interp_bottom", "=", "alpha_sharp", "[", "1", "]", "*", "(", "bottom_right", "-", "bottom_left", ")", "+", "bottom_left", "\n", "interp", "=", "alpha_sharp", "[", "0", "]", "*", "(", "interp_bottom", "-", "interp_top", ")", "+", "interp_top", "\n", "\n", "", "return", "interp", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.None.warp.apply_warp": [[405, 433], ["im.clone", "im2.clone", "list", "src_list[].clone", "dst_list[].clone", "range", "im.size", "im.size", "im.size", "im.size", "warp.image_warp", "warp.image_warp", "len"], "function", ["home.repos.pwc.inspect_result.jcyang98_inst.None.warp.image_warp", "home.repos.pwc.inspect_result.jcyang98_inst.None.warp.image_warp"], ["", "def", "apply_warp", "(", "im", ",", "src_list", ",", "dst_list", ",", "device", ",", "sharp", "=", "False", ",", "im2", "=", "None", ")", ":", "\n", "\n", "    ", "new_im", "=", "im", ".", "clone", "(", ")", "\n", "if", "im2", "is", "None", ":", "\n", "      ", "new_im2", "=", "None", "\n", "", "else", ":", "\n", "      ", "new_im2", "=", "im2", ".", "clone", "(", ")", "\n", "\n", "", "for", "i", "in", "list", "(", "range", "(", "len", "(", "src_list", ")", ")", ")", "[", ":", ":", "-", "1", "]", ":", "\n", "        ", "src", "=", "src_list", "[", "i", "]", ".", "clone", "(", ")", "\n", "\n", "src", "[", ":", ",", "0", "]", "=", "src", "[", ":", ",", "0", "]", "*", "im", ".", "size", "(", "2", ")", "\n", "src", "[", ":", ",", "1", "]", "=", "src", "[", ":", ",", "1", "]", "*", "im", ".", "size", "(", "3", ")", "\n", "\n", "dst", "=", "dst_list", "[", "i", "]", ".", "clone", "(", ")", "\n", "\n", "dst", "[", ":", ",", "0", "]", "=", "dst", "[", ":", ",", "0", "]", "*", "im", ".", "size", "(", "2", ")", "\n", "dst", "[", ":", ",", "1", "]", "=", "dst", "[", ":", ",", "1", "]", "*", "im", ".", "size", "(", "3", ")", "\n", "\n", "if", "im2", "is", "None", ":", "\n", "          ", "new_im", "=", "image_warp", "(", "new_im", ",", "dst", ",", "dst", "-", "src", ",", "device", ",", "sharp", "=", "sharp", ")", "\n", "", "else", ":", "\n", "          ", "new_im", ",", "new_im2", ",", "warp_field", "=", "image_warp", "(", "new_im", ",", "dst", ",", "dst", "-", "src", ",", "device", ",", "sharp", "=", "sharp", ",", "img2", "=", "new_im2", ")", "\n", "\n", "", "", "if", "im2", "is", "None", ":", "\n", "      ", "return", "new_im", "\n", "", "else", ":", "\n", "      ", "return", "new_im", ",", "new_im2", ",", "warp_field", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.None.warp.image_warp_by_field": [[436, 472], ["time.time", "time.time", "img.reshape().permute.size", "warp_field.clone().squeeze().permute", "time.time", "numpy.meshgrid", "numpy.stack", "torch.from_numpy().float().to", "query_points_on_grid.reshape", "img.reshape().permute.reshape().permute", "warp.interpolate_bilinear", "interpolated.reshape.reshape().permute", "interpolated.reshape.reshape", "time.time", "numpy.arange", "numpy.arange", "warp_field.clone().squeeze", "torch.from_numpy().float", "img.reshape().permute.reshape", "interpolated.reshape.reshape", "warp_field.clone", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.jcyang98_inst.None.warp.interpolate_bilinear"], ["", "", "def", "image_warp_by_field", "(", "img", ",", "warp_field", ",", "device", ",", "sharp", "=", "False", ")", ":", "\n", "    ", "\"\"\"Warps the giving image based on warp_field\n\n    Args:\n        img: [1, c, h, w] float `Tensor`\n        warp_field: [1, 2, h, w] float `Tensor`\n\n    Returns:\n        interpolated: [1, c, h, w] float `Tensor`\n    \"\"\"", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "solve_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "_", ",", "_", ",", "height", ",", "width", "=", "img", ".", "size", "(", ")", "\n", "\n", "flow", "=", "warp_field", ".", "clone", "(", ")", ".", "squeeze", "(", "dim", "=", "0", ")", ".", "permute", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "\n", "interp_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "grid_x", ",", "grid_y", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "width", ")", ",", "np", ".", "arange", "(", "height", ")", ")", "\n", "stacked_grid", "=", "np", ".", "stack", "(", "[", "grid_y", ",", "grid_x", "]", ",", "axis", "=", "2", ")", "# (H, W, 2)", "\n", "stacked_grid", "=", "torch", ".", "from_numpy", "(", "stacked_grid", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "query_points_on_grid", "=", "stacked_grid", "-", "flow", "# (H, W, 2)", "\n", "query_points_flattened", "=", "query_points_on_grid", ".", "reshape", "(", "[", "height", "*", "width", ",", "2", "]", ")", "# (H*W, 2)", "\n", "\n", "img", "=", "img", ".", "reshape", "(", "(", "3", ",", "height", ",", "width", ")", ")", ".", "permute", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "interpolated", "=", "interpolate_bilinear", "(", "img", ",", "query_points_flattened", ",", "device", ",", "indexing", "=", "'ij'", ",", "sharp", "=", "sharp", ")", "# (H*W, C)", "\n", "interpolated", "=", "interpolated", ".", "reshape", "(", "(", "height", ",", "width", ",", "3", ")", ")", ".", "permute", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "interpolated", "=", "interpolated", ".", "reshape", "(", "(", "1", ",", "3", ",", "height", ",", "width", ")", ")", "\n", "\n", "finish_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "return", "interpolated", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.None.warp.apply_warp_by_field": [[473, 487], ["range", "torch.cat", "warp.image_warp_by_field", "torch.cat.append"], "function", ["home.repos.pwc.inspect_result.jcyang98_inst.None.warp.image_warp_by_field"], ["", "def", "apply_warp_by_field", "(", "im", ",", "warp_file", ",", "device", ",", "sharp", "=", "False", ",", "im2", "=", "None", ")", ":", "\n", "    ", "'''\n        im : [N,C,H,W] Tensor\n        warp_file : [N,2,H,W]\n    '''", "\n", "# new_im = image_warp_by_field(im,warp_file,device,sharp=sharp)", "\n", "\n", "new_im", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "im", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "new_im_each", "=", "image_warp_by_field", "(", "im", "[", "i", ":", "i", "+", "1", "]", ",", "warp_file", "[", "i", ":", "i", "+", "1", "]", ",", "device", ",", "sharp", "=", "sharp", ")", "\n", "new_im", ".", "append", "(", "new_im_each", ")", "\n", "", "new_im", "=", "torch", ".", "cat", "(", "new_im", ",", "dim", "=", "0", ")", "\n", "\n", "return", "new_im", "", "", ""]], "home.repos.pwc.inspect_result.jcyang98_inst.mask_RAFT.update.FlowHead.__init__": [[7, 12], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.jcyang98_inst.utils.utils.InputPadder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", "=", "128", ",", "hidden_dim", "=", "256", ")", ":", "\n", "        ", "super", "(", "FlowHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "input_dim", ",", "hidden_dim", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "2", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.mask_RAFT.update.FlowHead.forward": [[13, 15], ["update.FlowHead.conv2", "update.FlowHead.relu", "update.FlowHead.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "conv2", "(", "self", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.mask_RAFT.update.ConvGRU.__init__": [[17, 22], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.jcyang98_inst.utils.utils.InputPadder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_dim", "=", "128", ",", "input_dim", "=", "192", "+", "128", ")", ":", "\n", "        ", "super", "(", "ConvGRU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "convz", "=", "nn", ".", "Conv2d", "(", "hidden_dim", "+", "input_dim", ",", "hidden_dim", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "convr", "=", "nn", ".", "Conv2d", "(", "hidden_dim", "+", "input_dim", ",", "hidden_dim", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "convq", "=", "nn", ".", "Conv2d", "(", "hidden_dim", "+", "input_dim", ",", "hidden_dim", ",", "3", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.mask_RAFT.update.ConvGRU.forward": [[23, 32], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "update.ConvGRU.convz", "update.ConvGRU.convr", "update.ConvGRU.convq", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "h", ",", "x", ")", ":", "\n", "        ", "hx", "=", "torch", ".", "cat", "(", "[", "h", ",", "x", "]", ",", "dim", "=", "1", ")", "\n", "\n", "z", "=", "torch", ".", "sigmoid", "(", "self", ".", "convz", "(", "hx", ")", ")", "\n", "r", "=", "torch", ".", "sigmoid", "(", "self", ".", "convr", "(", "hx", ")", ")", "\n", "q", "=", "torch", ".", "tanh", "(", "self", ".", "convq", "(", "torch", ".", "cat", "(", "[", "r", "*", "h", ",", "x", "]", ",", "dim", "=", "1", ")", ")", ")", "\n", "\n", "h", "=", "(", "1", "-", "z", ")", "*", "h", "+", "z", "*", "q", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.mask_RAFT.update.SepConvGRU.__init__": [[34, 43], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.jcyang98_inst.utils.utils.InputPadder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_dim", "=", "128", ",", "input_dim", "=", "192", "+", "128", ")", ":", "\n", "        ", "super", "(", "SepConvGRU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "convz1", "=", "nn", ".", "Conv2d", "(", "hidden_dim", "+", "input_dim", ",", "hidden_dim", ",", "(", "1", ",", "5", ")", ",", "padding", "=", "(", "0", ",", "2", ")", ")", "\n", "self", ".", "convr1", "=", "nn", ".", "Conv2d", "(", "hidden_dim", "+", "input_dim", ",", "hidden_dim", ",", "(", "1", ",", "5", ")", ",", "padding", "=", "(", "0", ",", "2", ")", ")", "\n", "self", ".", "convq1", "=", "nn", ".", "Conv2d", "(", "hidden_dim", "+", "input_dim", ",", "hidden_dim", ",", "(", "1", ",", "5", ")", ",", "padding", "=", "(", "0", ",", "2", ")", ")", "\n", "\n", "self", ".", "convz2", "=", "nn", ".", "Conv2d", "(", "hidden_dim", "+", "input_dim", ",", "hidden_dim", ",", "(", "5", ",", "1", ")", ",", "padding", "=", "(", "2", ",", "0", ")", ")", "\n", "self", ".", "convr2", "=", "nn", ".", "Conv2d", "(", "hidden_dim", "+", "input_dim", ",", "hidden_dim", ",", "(", "5", ",", "1", ")", ",", "padding", "=", "(", "2", ",", "0", ")", ")", "\n", "self", ".", "convq2", "=", "nn", ".", "Conv2d", "(", "hidden_dim", "+", "input_dim", ",", "hidden_dim", ",", "(", "5", ",", "1", ")", ",", "padding", "=", "(", "2", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.mask_RAFT.update.SepConvGRU.forward": [[45, 61], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "update.SepConvGRU.convz1", "update.SepConvGRU.convr1", "update.SepConvGRU.convq1", "update.SepConvGRU.convz2", "update.SepConvGRU.convr2", "update.SepConvGRU.convq2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "h", ",", "x", ")", ":", "\n", "# horizontal", "\n", "        ", "hx", "=", "torch", ".", "cat", "(", "[", "h", ",", "x", "]", ",", "dim", "=", "1", ")", "\n", "z", "=", "torch", ".", "sigmoid", "(", "self", ".", "convz1", "(", "hx", ")", ")", "\n", "r", "=", "torch", ".", "sigmoid", "(", "self", ".", "convr1", "(", "hx", ")", ")", "\n", "q", "=", "torch", ".", "tanh", "(", "self", ".", "convq1", "(", "torch", ".", "cat", "(", "[", "r", "*", "h", ",", "x", "]", ",", "dim", "=", "1", ")", ")", ")", "\n", "h", "=", "(", "1", "-", "z", ")", "*", "h", "+", "z", "*", "q", "\n", "\n", "# vertical", "\n", "hx", "=", "torch", ".", "cat", "(", "[", "h", ",", "x", "]", ",", "dim", "=", "1", ")", "\n", "z", "=", "torch", ".", "sigmoid", "(", "self", ".", "convz2", "(", "hx", ")", ")", "\n", "r", "=", "torch", ".", "sigmoid", "(", "self", ".", "convr2", "(", "hx", ")", ")", "\n", "q", "=", "torch", ".", "tanh", "(", "self", ".", "convq2", "(", "torch", ".", "cat", "(", "[", "r", "*", "h", ",", "x", "]", ",", "dim", "=", "1", ")", ")", ")", "\n", "h", "=", "(", "1", "-", "z", ")", "*", "h", "+", "z", "*", "q", "\n", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.mask_RAFT.update.SmallMotionEncoder.__init__": [[63, 70], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.jcyang98_inst.utils.utils.InputPadder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "SmallMotionEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "cor_planes", "=", "args", ".", "corr_levels", "*", "(", "2", "*", "args", ".", "corr_radius", "+", "1", ")", "**", "2", "\n", "self", ".", "convc1", "=", "nn", ".", "Conv2d", "(", "cor_planes", ",", "96", ",", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "convf1", "=", "nn", ".", "Conv2d", "(", "2", ",", "64", ",", "7", ",", "padding", "=", "3", ")", "\n", "self", ".", "convf2", "=", "nn", ".", "Conv2d", "(", "64", ",", "32", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "128", ",", "80", ",", "3", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.mask_RAFT.update.SmallMotionEncoder.forward": [[71, 78], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "update.SmallMotionEncoder.convc1", "update.SmallMotionEncoder.convf1", "update.SmallMotionEncoder.convf2", "update.SmallMotionEncoder.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "flow", ",", "corr", ")", ":", "\n", "        ", "cor", "=", "F", ".", "relu", "(", "self", ".", "convc1", "(", "corr", ")", ")", "\n", "flo", "=", "F", ".", "relu", "(", "self", ".", "convf1", "(", "flow", ")", ")", "\n", "flo", "=", "F", ".", "relu", "(", "self", ".", "convf2", "(", "flo", ")", ")", "\n", "cor_flo", "=", "torch", ".", "cat", "(", "[", "cor", ",", "flo", "]", ",", "dim", "=", "1", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "conv", "(", "cor_flo", ")", ")", "\n", "return", "torch", ".", "cat", "(", "[", "out", ",", "flow", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.mask_RAFT.update.BasicMotionEncoder.__init__": [[80, 88], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.jcyang98_inst.utils.utils.InputPadder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "BasicMotionEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "cor_planes", "=", "args", ".", "corr_levels", "*", "(", "2", "*", "args", ".", "corr_radius", "+", "1", ")", "**", "2", "\n", "self", ".", "convc1", "=", "nn", ".", "Conv2d", "(", "cor_planes", ",", "256", ",", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "convc2", "=", "nn", ".", "Conv2d", "(", "256", ",", "192", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "convf1", "=", "nn", ".", "Conv2d", "(", "2", ",", "128", ",", "7", ",", "padding", "=", "3", ")", "\n", "self", ".", "convf2", "=", "nn", ".", "Conv2d", "(", "128", ",", "64", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "64", "+", "192", ",", "128", "-", "2", ",", "3", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.mask_RAFT.update.BasicMotionEncoder.forward": [[89, 98], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "update.BasicMotionEncoder.convc1", "update.BasicMotionEncoder.convc2", "update.BasicMotionEncoder.convf1", "update.BasicMotionEncoder.convf2", "update.BasicMotionEncoder.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "flow", ",", "corr", ")", ":", "\n", "        ", "cor", "=", "F", ".", "relu", "(", "self", ".", "convc1", "(", "corr", ")", ")", "\n", "cor", "=", "F", ".", "relu", "(", "self", ".", "convc2", "(", "cor", ")", ")", "\n", "flo", "=", "F", ".", "relu", "(", "self", ".", "convf1", "(", "flow", ")", ")", "\n", "flo", "=", "F", ".", "relu", "(", "self", ".", "convf2", "(", "flo", ")", ")", "\n", "\n", "cor_flo", "=", "torch", ".", "cat", "(", "[", "cor", ",", "flo", "]", ",", "dim", "=", "1", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "conv", "(", "cor_flo", ")", ")", "\n", "return", "torch", ".", "cat", "(", "[", "out", ",", "flow", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.mask_RAFT.update.SmallUpdateBlock.__init__": [[100, 105], ["torch.Module.__init__", "update.SmallMotionEncoder", "update.ConvGRU", "update.FlowHead"], "methods", ["home.repos.pwc.inspect_result.jcyang98_inst.utils.utils.InputPadder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "hidden_dim", "=", "96", ")", ":", "\n", "        ", "super", "(", "SmallUpdateBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "SmallMotionEncoder", "(", "args", ")", "\n", "self", ".", "gru", "=", "ConvGRU", "(", "hidden_dim", "=", "hidden_dim", ",", "input_dim", "=", "82", "+", "64", ")", "\n", "self", ".", "flow_head", "=", "FlowHead", "(", "hidden_dim", ",", "hidden_dim", "=", "128", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.mask_RAFT.update.SmallUpdateBlock.forward": [[106, 113], ["update.SmallUpdateBlock.encoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "update.SmallUpdateBlock.gru", "update.SmallUpdateBlock.flow_head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "net", ",", "inp", ",", "corr", ",", "flow", ")", ":", "\n", "        ", "motion_features", "=", "self", ".", "encoder", "(", "flow", ",", "corr", ")", "\n", "inp", "=", "torch", ".", "cat", "(", "[", "inp", ",", "motion_features", "]", ",", "dim", "=", "1", ")", "\n", "net", "=", "self", ".", "gru", "(", "net", ",", "inp", ")", "\n", "delta_flow", "=", "self", ".", "flow_head", "(", "net", ")", "\n", "\n", "return", "net", ",", "None", ",", "delta_flow", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.mask_RAFT.update.BasicUpdateBlock.__init__": [[115, 126], ["torch.Module.__init__", "update.BasicMotionEncoder", "update.SepConvGRU", "update.FlowHead", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.jcyang98_inst.utils.utils.InputPadder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "hidden_dim", "=", "128", ",", "input_dim", "=", "128", ")", ":", "\n", "        ", "super", "(", "BasicUpdateBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "encoder", "=", "BasicMotionEncoder", "(", "args", ")", "\n", "self", ".", "gru", "=", "SepConvGRU", "(", "hidden_dim", "=", "hidden_dim", ",", "input_dim", "=", "128", "+", "hidden_dim", ")", "\n", "self", ".", "flow_head", "=", "FlowHead", "(", "hidden_dim", ",", "hidden_dim", "=", "256", ")", "\n", "\n", "self", ".", "mask", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "64", "*", "9", ",", "1", ",", "padding", "=", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.mask_RAFT.update.BasicUpdateBlock.forward": [[127, 137], ["update.BasicUpdateBlock.encoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "update.BasicUpdateBlock.gru", "update.BasicUpdateBlock.flow_head", "update.BasicUpdateBlock.mask"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "net", ",", "inp", ",", "corr", ",", "flow", ",", "upsample", "=", "True", ")", ":", "\n", "        ", "motion_features", "=", "self", ".", "encoder", "(", "flow", ",", "corr", ")", "\n", "inp", "=", "torch", ".", "cat", "(", "[", "inp", ",", "motion_features", "]", ",", "dim", "=", "1", ")", "\n", "\n", "net", "=", "self", ".", "gru", "(", "net", ",", "inp", ")", "\n", "delta_flow", "=", "self", ".", "flow_head", "(", "net", ")", "\n", "\n", "# scale mask to balence gradients", "\n", "mask", "=", ".25", "*", "self", ".", "mask", "(", "net", ")", "\n", "return", "net", ",", "mask", ",", "delta_flow", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.mask_RAFT.corr.CorrBlock.__init__": [[14, 38], ["CorrBlock.corr", "torch.avg_pool2d.reshape", "torch.avg_pool2d.reshape().clone", "F.avg_pool2d.CorrBlock.corr_pyramid.append", "range", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "F.avg_pool2d.CorrBlock.corr_pyramid.append", "torch.avg_pool2d.reshape"], "methods", ["home.repos.pwc.inspect_result.jcyang98_inst.mask_RAFT.corr.CorrBlock.corr"], ["    ", "def", "__init__", "(", "self", ",", "fmap1", ",", "fmap2", ",", "num_levels", "=", "4", ",", "radius", "=", "4", ")", ":", "\n", "        ", "self", ".", "num_levels", "=", "num_levels", "\n", "self", ".", "radius", "=", "radius", "\n", "self", ".", "corr_pyramid", "=", "[", "]", "\n", "\n", "# all pairs correlation", "\n", "corr", "=", "CorrBlock", ".", "corr", "(", "fmap1", ",", "fmap2", ")", "# [B,H,W,1,H,W]", "\n", "\n", "# local and global correlation", "\n", "# corr1 = CorrBlock.corr(fmap1.clone(), fmap2.clone())   # [B,H,W,1,H,W]", "\n", "# corr2 = self.corr2(fmap1,fmap2,q,k)  # [B,num_heads,H,W,1,H,W]", "\n", "# corr = torch.cat([corr1.unsqueeze(dim=1),corr2],dim=1)", "\n", "# corr = torch.sum(corr,dim=1)", "\n", "\n", "batch", ",", "h1", ",", "w1", ",", "dim", ",", "h2", ",", "w2", "=", "corr", ".", "shape", "\n", "corr", "=", "corr", ".", "reshape", "(", "batch", "*", "h1", "*", "w1", ",", "dim", ",", "h2", ",", "w2", ")", "\n", "\n", "self", ".", "corr_map", "=", "corr", ".", "reshape", "(", "batch", ",", "h1", "*", "w1", ",", "h2", ",", "w2", ")", ".", "clone", "(", ")", "\n", "# self.corr_map = corr.reshape(batch,h1,w1,h2*w2).permute(0,3,1,2).clone()", "\n", "\n", "self", ".", "corr_pyramid", ".", "append", "(", "corr", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_levels", "-", "1", ")", ":", "\n", "            ", "corr", "=", "F", ".", "avg_pool2d", "(", "corr", ",", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "corr_pyramid", ".", "append", "(", "corr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.mask_RAFT.corr.CorrBlock.__call__": [[39, 62], ["coords.permute.permute.permute", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.permute().contiguous().float", "torch.cat.permute().contiguous().float", "torch.cat.permute().contiguous().float", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to.view", "torch.stack().to.view", "torch.stack().to.view", "utils.utils.bilinear_sampler", "corr.view.view.view", "out_pyramid.append", "coords.permute.permute.reshape", "torch.cat.permute().contiguous", "torch.cat.permute().contiguous", "torch.cat.permute().contiguous", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.cat.permute", "torch.cat.permute", "torch.cat.permute"], "methods", ["home.repos.pwc.inspect_result.jcyang98_inst.utils.utils.bilinear_sampler"], ["", "", "def", "__call__", "(", "self", ",", "coords", ")", ":", "\n", "        ", "r", "=", "self", ".", "radius", "\n", "coords", "=", "coords", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "batch", ",", "h1", ",", "w1", ",", "_", "=", "coords", ".", "shape", "\n", "\n", "out_pyramid", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_levels", ")", ":", "\n", "            ", "corr", "=", "self", ".", "corr_pyramid", "[", "i", "]", "\n", "dx", "=", "torch", ".", "linspace", "(", "-", "r", ",", "r", ",", "2", "*", "r", "+", "1", ")", "\n", "dy", "=", "torch", ".", "linspace", "(", "-", "r", ",", "r", ",", "2", "*", "r", "+", "1", ")", "\n", "delta", "=", "torch", ".", "stack", "(", "torch", ".", "meshgrid", "(", "dy", ",", "dx", ")", ",", "axis", "=", "-", "1", ")", ".", "to", "(", "coords", ".", "device", ")", "\n", "\n", "centroid_lvl", "=", "coords", ".", "reshape", "(", "batch", "*", "h1", "*", "w1", ",", "1", ",", "1", ",", "2", ")", "/", "2", "**", "i", "\n", "delta_lvl", "=", "delta", ".", "view", "(", "1", ",", "2", "*", "r", "+", "1", ",", "2", "*", "r", "+", "1", ",", "2", ")", "\n", "coords_lvl", "=", "centroid_lvl", "+", "delta_lvl", "\n", "\n", "corr", "=", "bilinear_sampler", "(", "corr", ",", "coords_lvl", ")", "\n", "corr", "=", "corr", ".", "view", "(", "batch", ",", "h1", ",", "w1", ",", "-", "1", ")", "\n", "\n", "out_pyramid", ".", "append", "(", "corr", ")", "\n", "\n", "", "out", "=", "torch", ".", "cat", "(", "out_pyramid", ",", "dim", "=", "-", "1", ")", "\n", "return", "out", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.mask_RAFT.corr.CorrBlock.corr": [[63, 72], ["fmap1.view.view.view", "fmap2.view.view.view", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "corr.view.view.view", "fmap1.view.view.transpose", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "corr", "(", "fmap1", ",", "fmap2", ")", ":", "\n", "        ", "batch", ",", "dim", ",", "ht", ",", "wd", "=", "fmap1", ".", "shape", "\n", "fmap1", "=", "fmap1", ".", "view", "(", "batch", ",", "dim", ",", "ht", "*", "wd", ")", "\n", "fmap2", "=", "fmap2", ".", "view", "(", "batch", ",", "dim", ",", "ht", "*", "wd", ")", "\n", "\n", "corr", "=", "torch", ".", "matmul", "(", "fmap1", ".", "transpose", "(", "1", ",", "2", ")", ",", "fmap2", ")", "\n", "corr", "=", "corr", ".", "view", "(", "batch", ",", "ht", ",", "wd", ",", "1", ",", "ht", ",", "wd", ")", "\n", "return", "corr", "/", "torch", ".", "sqrt", "(", "torch", ".", "tensor", "(", "dim", ")", ".", "float", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.mask_RAFT.corr.AlternateCorrBlock.__init__": [[89, 98], ["range", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "corr.AlternateCorrBlock.pyramid.append"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "fmap1", ",", "fmap2", ",", "num_levels", "=", "4", ",", "radius", "=", "4", ")", ":", "\n", "        ", "self", ".", "num_levels", "=", "num_levels", "\n", "self", ".", "radius", "=", "radius", "\n", "\n", "self", ".", "pyramid", "=", "[", "(", "fmap1", ",", "fmap2", ")", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_levels", ")", ":", "\n", "            ", "fmap1", "=", "F", ".", "avg_pool2d", "(", "fmap1", ",", "2", ",", "stride", "=", "2", ")", "\n", "fmap2", "=", "F", ".", "avg_pool2d", "(", "fmap2", ",", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "pyramid", ".", "append", "(", "(", "fmap1", ",", "fmap2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.mask_RAFT.corr.AlternateCorrBlock.__call__": [[99, 117], ["coords.permute.permute.permute", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "corr.reshape.reshape.reshape", "[].permute().contiguous", "[].permute().contiguous", "alt_cuda_corr.forward", "corr_list.append", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "corr.reshape.reshape.squeeze", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "[].permute", "[].permute", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.jcyang98_inst.mask_RAFT.mask_raft.mask_RAFT.forward"], ["", "", "def", "__call__", "(", "self", ",", "coords", ")", ":", "\n", "        ", "coords", "=", "coords", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "B", ",", "H", ",", "W", ",", "_", "=", "coords", ".", "shape", "\n", "dim", "=", "self", ".", "pyramid", "[", "0", "]", "[", "0", "]", ".", "shape", "[", "1", "]", "\n", "\n", "corr_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_levels", ")", ":", "\n", "            ", "r", "=", "self", ".", "radius", "\n", "fmap1_i", "=", "self", ".", "pyramid", "[", "0", "]", "[", "0", "]", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "fmap2_i", "=", "self", ".", "pyramid", "[", "i", "]", "[", "1", "]", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "coords_i", "=", "(", "coords", "/", "2", "**", "i", ")", ".", "reshape", "(", "B", ",", "1", ",", "H", ",", "W", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "corr", ",", "=", "alt_cuda_corr", ".", "forward", "(", "fmap1_i", ",", "fmap2_i", ",", "coords_i", ",", "r", ")", "\n", "corr_list", ".", "append", "(", "corr", ".", "squeeze", "(", "1", ")", ")", "\n", "\n", "", "corr", "=", "torch", ".", "stack", "(", "corr_list", ",", "dim", "=", "1", ")", "\n", "corr", "=", "corr", ".", "reshape", "(", "B", ",", "-", "1", ",", "H", ",", "W", ")", "\n", "return", "corr", "/", "torch", ".", "sqrt", "(", "torch", ".", "tensor", "(", "dim", ")", ".", "float", "(", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jcyang98_inst.mask_RAFT.extractor.ResidualBlock.__init__": [[8, 47], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.jcyang98_inst.utils.utils.InputPadder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "norm_fn", "=", "'group'", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "ResidualBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "stride", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "num_groups", "=", "planes", "//", "8", "\n", "\n", "if", "norm_fn", "==", "'group'", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "GroupNorm", "(", "num_groups", "=", "num_groups", ",", "num_channels", "=", "planes", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "GroupNorm", "(", "num_groups", "=", "num_groups", ",", "num_channels", "=", "planes", ")", "\n", "if", "not", "stride", "==", "1", ":", "\n", "                ", "self", ".", "norm3", "=", "nn", ".", "GroupNorm", "(", "num_groups", "=", "num_groups", ",", "num_channels", "=", "planes", ")", "\n", "\n", "", "", "elif", "norm_fn", "==", "'batch'", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "if", "not", "stride", "==", "1", ":", "\n", "                ", "self", ".", "norm3", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "", "", "elif", "norm_fn", "==", "'instance'", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "InstanceNorm2d", "(", "planes", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "InstanceNorm2d", "(", "planes", ")", "\n", "if", "not", "stride", "==", "1", ":", "\n", "                ", "self", ".", "norm3", "=", "nn", ".", "InstanceNorm2d", "(", "planes", ")", "\n", "\n", "", "", "elif", "norm_fn", "==", "'none'", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "not", "stride", "==", "1", ":", "\n", "                ", "self", ".", "norm3", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "", "", "if", "stride", "==", "1", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ")", ",", "self", ".", "norm3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.mask_RAFT.extractor.ResidualBlock.forward": [[49, 58], ["extractor.ResidualBlock.relu", "extractor.ResidualBlock.relu", "extractor.ResidualBlock.relu", "extractor.ResidualBlock.norm1", "extractor.ResidualBlock.norm2", "extractor.ResidualBlock.downsample", "extractor.ResidualBlock.conv1", "extractor.ResidualBlock.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "x", "\n", "y", "=", "self", ".", "relu", "(", "self", ".", "norm1", "(", "self", ".", "conv1", "(", "y", ")", ")", ")", "\n", "y", "=", "self", ".", "relu", "(", "self", ".", "norm2", "(", "self", ".", "conv2", "(", "y", ")", ")", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "return", "self", ".", "relu", "(", "x", "+", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.mask_RAFT.extractor.BottleneckBlock.__init__": [[62, 106], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.jcyang98_inst.utils.utils.InputPadder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "norm_fn", "=", "'group'", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BottleneckBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", "//", "4", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", "//", "4", ",", "planes", "//", "4", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "stride", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", "//", "4", ",", "planes", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "num_groups", "=", "planes", "//", "8", "\n", "\n", "if", "norm_fn", "==", "'group'", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "GroupNorm", "(", "num_groups", "=", "num_groups", ",", "num_channels", "=", "planes", "//", "4", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "GroupNorm", "(", "num_groups", "=", "num_groups", ",", "num_channels", "=", "planes", "//", "4", ")", "\n", "self", ".", "norm3", "=", "nn", ".", "GroupNorm", "(", "num_groups", "=", "num_groups", ",", "num_channels", "=", "planes", ")", "\n", "if", "not", "stride", "==", "1", ":", "\n", "                ", "self", ".", "norm4", "=", "nn", ".", "GroupNorm", "(", "num_groups", "=", "num_groups", ",", "num_channels", "=", "planes", ")", "\n", "\n", "", "", "elif", "norm_fn", "==", "'batch'", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "BatchNorm2d", "(", "planes", "//", "4", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "BatchNorm2d", "(", "planes", "//", "4", ")", "\n", "self", ".", "norm3", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "if", "not", "stride", "==", "1", ":", "\n", "                ", "self", ".", "norm4", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "", "", "elif", "norm_fn", "==", "'instance'", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "InstanceNorm2d", "(", "planes", "//", "4", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "InstanceNorm2d", "(", "planes", "//", "4", ")", "\n", "self", ".", "norm3", "=", "nn", ".", "InstanceNorm2d", "(", "planes", ")", "\n", "if", "not", "stride", "==", "1", ":", "\n", "                ", "self", ".", "norm4", "=", "nn", ".", "InstanceNorm2d", "(", "planes", ")", "\n", "\n", "", "", "elif", "norm_fn", "==", "'none'", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "norm3", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "not", "stride", "==", "1", ":", "\n", "                ", "self", ".", "norm4", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "", "", "if", "stride", "==", "1", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ")", ",", "self", ".", "norm4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.mask_RAFT.extractor.BottleneckBlock.forward": [[108, 118], ["extractor.BottleneckBlock.relu", "extractor.BottleneckBlock.relu", "extractor.BottleneckBlock.relu", "extractor.BottleneckBlock.relu", "extractor.BottleneckBlock.norm1", "extractor.BottleneckBlock.norm2", "extractor.BottleneckBlock.norm3", "extractor.BottleneckBlock.downsample", "extractor.BottleneckBlock.conv1", "extractor.BottleneckBlock.conv2", "extractor.BottleneckBlock.conv3"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "x", "\n", "y", "=", "self", ".", "relu", "(", "self", ".", "norm1", "(", "self", ".", "conv1", "(", "y", ")", ")", ")", "\n", "y", "=", "self", ".", "relu", "(", "self", ".", "norm2", "(", "self", ".", "conv2", "(", "y", ")", ")", ")", "\n", "y", "=", "self", ".", "relu", "(", "self", ".", "norm3", "(", "self", ".", "conv3", "(", "y", ")", ")", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "return", "self", ".", "relu", "(", "x", "+", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.mask_RAFT.extractor.BasicEncoder.__init__": [[120, 159], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "extractor.BasicEncoder._make_layer", "extractor.BasicEncoder._make_layer", "extractor.BasicEncoder._make_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "extractor.BasicEncoder.modules", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "isinstance", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.jcyang98_inst.utils.utils.InputPadder.__init__", "home.repos.pwc.inspect_result.jcyang98_inst.mask_RAFT.extractor.SmallEncoder._make_layer", "home.repos.pwc.inspect_result.jcyang98_inst.mask_RAFT.extractor.SmallEncoder._make_layer", "home.repos.pwc.inspect_result.jcyang98_inst.mask_RAFT.extractor.SmallEncoder._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "output_dim", "=", "128", ",", "norm_fn", "=", "'batch'", ",", "dropout", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "BasicEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm_fn", "=", "norm_fn", "\n", "\n", "if", "self", ".", "norm_fn", "==", "'group'", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "GroupNorm", "(", "num_groups", "=", "8", ",", "num_channels", "=", "64", ")", "\n", "\n", "", "elif", "self", ".", "norm_fn", "==", "'batch'", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "\n", "", "elif", "self", ".", "norm_fn", "==", "'instance'", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "InstanceNorm2d", "(", "64", ")", "\n", "\n", "", "elif", "self", ".", "norm_fn", "==", "'none'", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "in_planes", "=", "64", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "64", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "96", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "128", ",", "stride", "=", "2", ")", "\n", "\n", "# output convolution", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "128", ",", "output_dim", ",", "kernel_size", "=", "1", ")", "\n", "\n", "self", ".", "dropout", "=", "None", "\n", "if", "dropout", ">", "0", ":", "\n", "            ", "self", ".", "dropout", "=", "nn", ".", "Dropout2d", "(", "p", "=", "dropout", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "InstanceNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "if", "m", ".", "weight", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.mask_RAFT.extractor.BasicEncoder._make_layer": [[160, 167], ["extractor.ResidualBlock", "extractor.ResidualBlock", "torch.Sequential", "torch.Sequential", "torch.Sequential"], "methods", ["None"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "dim", ",", "stride", "=", "1", ")", ":", "\n", "        ", "layer1", "=", "ResidualBlock", "(", "self", ".", "in_planes", ",", "dim", ",", "self", ".", "norm_fn", ",", "stride", "=", "stride", ")", "\n", "layer2", "=", "ResidualBlock", "(", "dim", ",", "dim", ",", "self", ".", "norm_fn", ",", "stride", "=", "1", ")", "\n", "layers", "=", "(", "layer1", ",", "layer2", ")", "\n", "\n", "self", ".", "in_planes", "=", "dim", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.mask_RAFT.extractor.BasicEncoder.forward": [[169, 194], ["extractor.BasicEncoder.conv1", "extractor.BasicEncoder.norm1", "extractor.BasicEncoder.relu1", "extractor.BasicEncoder.layer1", "extractor.BasicEncoder.layer2", "extractor.BasicEncoder.layer3", "extractor.BasicEncoder.conv2", "isinstance", "isinstance", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "extractor.BasicEncoder.dropout", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "# if input is list, combine batch dimension", "\n", "        ", "is_list", "=", "isinstance", "(", "x", ",", "tuple", ")", "or", "isinstance", "(", "x", ",", "list", ")", "\n", "if", "is_list", ":", "\n", "            ", "batch_dim", "=", "x", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "x", "=", "torch", ".", "cat", "(", "x", ",", "dim", "=", "0", ")", "\n", "\n", "", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "norm1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "\n", "if", "self", ".", "training", "and", "self", ".", "dropout", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "\n", "", "if", "is_list", ":", "\n", "            ", "x", "=", "torch", ".", "split", "(", "x", ",", "[", "batch_dim", ",", "batch_dim", "]", ",", "dim", "=", "0", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.mask_RAFT.extractor.SmallEncoder.__init__": [[196, 234], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "extractor.SmallEncoder._make_layer", "extractor.SmallEncoder._make_layer", "extractor.SmallEncoder._make_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "extractor.SmallEncoder.modules", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "isinstance", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.jcyang98_inst.utils.utils.InputPadder.__init__", "home.repos.pwc.inspect_result.jcyang98_inst.mask_RAFT.extractor.SmallEncoder._make_layer", "home.repos.pwc.inspect_result.jcyang98_inst.mask_RAFT.extractor.SmallEncoder._make_layer", "home.repos.pwc.inspect_result.jcyang98_inst.mask_RAFT.extractor.SmallEncoder._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "output_dim", "=", "128", ",", "norm_fn", "=", "'batch'", ",", "dropout", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "SmallEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm_fn", "=", "norm_fn", "\n", "\n", "if", "self", ".", "norm_fn", "==", "'group'", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "GroupNorm", "(", "num_groups", "=", "8", ",", "num_channels", "=", "32", ")", "\n", "\n", "", "elif", "self", ".", "norm_fn", "==", "'batch'", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "\n", "", "elif", "self", ".", "norm_fn", "==", "'instance'", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "InstanceNorm2d", "(", "32", ")", "\n", "\n", "", "elif", "self", ".", "norm_fn", "==", "'none'", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "in_planes", "=", "32", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "32", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "64", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "96", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "dropout", "=", "None", "\n", "if", "dropout", ">", "0", ":", "\n", "            ", "self", ".", "dropout", "=", "nn", ".", "Dropout2d", "(", "p", "=", "dropout", ")", "\n", "\n", "", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "96", ",", "output_dim", ",", "kernel_size", "=", "1", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "InstanceNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "if", "m", ".", "weight", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.mask_RAFT.extractor.SmallEncoder._make_layer": [[235, 242], ["extractor.BottleneckBlock", "extractor.BottleneckBlock", "torch.Sequential", "torch.Sequential", "torch.Sequential"], "methods", ["None"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "dim", ",", "stride", "=", "1", ")", ":", "\n", "        ", "layer1", "=", "BottleneckBlock", "(", "self", ".", "in_planes", ",", "dim", ",", "self", ".", "norm_fn", ",", "stride", "=", "stride", ")", "\n", "layer2", "=", "BottleneckBlock", "(", "dim", ",", "dim", ",", "self", ".", "norm_fn", ",", "stride", "=", "1", ")", "\n", "layers", "=", "(", "layer1", ",", "layer2", ")", "\n", "\n", "self", ".", "in_planes", "=", "dim", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.mask_RAFT.extractor.SmallEncoder.forward": [[244, 268], ["extractor.SmallEncoder.conv1", "extractor.SmallEncoder.norm1", "extractor.SmallEncoder.relu1", "extractor.SmallEncoder.layer1", "extractor.SmallEncoder.layer2", "extractor.SmallEncoder.layer3", "extractor.SmallEncoder.conv2", "isinstance", "isinstance", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "extractor.SmallEncoder.dropout", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "# if input is list, combine batch dimension", "\n", "        ", "is_list", "=", "isinstance", "(", "x", ",", "tuple", ")", "or", "isinstance", "(", "x", ",", "list", ")", "\n", "if", "is_list", ":", "\n", "            ", "batch_dim", "=", "x", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "x", "=", "torch", ".", "cat", "(", "x", ",", "dim", "=", "0", ")", "\n", "\n", "", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "norm1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "\n", "if", "self", ".", "training", "and", "self", ".", "dropout", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "\n", "", "if", "is_list", ":", "\n", "            ", "x", "=", "torch", ".", "split", "(", "x", ",", "[", "batch_dim", ",", "batch_dim", "]", ",", "dim", "=", "0", ")", "\n", "\n", "", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jcyang98_inst.mask_RAFT.mask_raft.mask_RAFT.__init__": [[51, 89], ["torch.Module.__init__", "Args", "extractor.SmallEncoder", "extractor.SmallEncoder", "update.SmallUpdateBlock", "extractor.BasicEncoder", "extractor.BasicEncoder", "update.BasicUpdateBlock"], "methods", ["home.repos.pwc.inspect_result.jcyang98_inst.utils.utils.InputPadder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "smooth_loss", "=", "'2nd'", ",", "smooth_mask", "=", "'none'", ",", "semantic_loss", "=", "False", ",", "seq_gamma", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "mask_RAFT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "class", "Args", "(", "object", ")", ":", "\n", "            ", "def", "__init__", "(", "self", ")", ":", "\n", "                ", "self", ".", "small", "=", "False", "\n", "self", ".", "alternate_corr", "=", "False", "\n", "self", ".", "dropout", "=", "0", "\n", "self", ".", "mixed_precision", "=", "False", "\n", "self", ".", "gamma", "=", "seq_gamma", "\n", "\n", "", "", "args", "=", "Args", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "smooth_loss", "=", "smooth_loss", "\n", "self", ".", "smooth_mask", "=", "smooth_mask", "\n", "self", ".", "semantic_loss", "=", "semantic_loss", "\n", "\n", "if", "args", ".", "small", ":", "\n", "            ", "self", ".", "hidden_dim", "=", "hdim", "=", "96", "\n", "self", ".", "context_dim", "=", "cdim", "=", "64", "\n", "args", ".", "corr_levels", "=", "4", "\n", "args", ".", "corr_radius", "=", "3", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "hidden_dim", "=", "hdim", "=", "128", "\n", "self", ".", "context_dim", "=", "cdim", "=", "128", "\n", "args", ".", "corr_levels", "=", "4", "\n", "args", ".", "corr_radius", "=", "4", "\n", "\n", "# feature network, context network, and update block", "\n", "", "if", "args", ".", "small", ":", "\n", "            ", "self", ".", "fnet", "=", "SmallEncoder", "(", "output_dim", "=", "128", ",", "norm_fn", "=", "'instance'", ",", "dropout", "=", "args", ".", "dropout", ")", "\n", "self", ".", "cnet", "=", "SmallEncoder", "(", "output_dim", "=", "hdim", "+", "cdim", ",", "norm_fn", "=", "'none'", ",", "dropout", "=", "args", ".", "dropout", ")", "\n", "self", ".", "update_block", "=", "SmallUpdateBlock", "(", "self", ".", "args", ",", "hidden_dim", "=", "hdim", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "fnet", "=", "BasicEncoder", "(", "output_dim", "=", "256", ",", "norm_fn", "=", "'instance'", ",", "dropout", "=", "args", ".", "dropout", ")", "\n", "self", ".", "cnet", "=", "BasicEncoder", "(", "output_dim", "=", "hdim", "+", "cdim", ",", "norm_fn", "=", "'batch'", ",", "dropout", "=", "args", ".", "dropout", ")", "\n", "self", ".", "update_block", "=", "BasicUpdateBlock", "(", "self", ".", "args", ",", "hidden_dim", "=", "hdim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.mask_RAFT.mask_raft.mask_RAFT.freeze_bn": [[93, 97], ["mask_raft.mask_RAFT.modules", "isinstance", "m.eval"], "methods", ["None"], ["", "", "def", "freeze_bn", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.mask_RAFT.mask_raft.mask_RAFT.initialize_flow": [[98, 106], ["utils.utils.coords_grid().to", "utils.utils.coords_grid().to", "utils.utils.coords_grid", "utils.utils.coords_grid"], "methods", ["home.repos.pwc.inspect_result.jcyang98_inst.utils.utils.coords_grid", "home.repos.pwc.inspect_result.jcyang98_inst.utils.utils.coords_grid"], ["", "", "", "def", "initialize_flow", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\" Flow is represented as difference between two coordinate grids flow = coords1 - coords0\"\"\"", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "img", ".", "shape", "\n", "coords0", "=", "coords_grid", "(", "N", ",", "H", "//", "8", ",", "W", "//", "8", ")", ".", "to", "(", "img", ".", "device", ")", "\n", "coords1", "=", "coords_grid", "(", "N", ",", "H", "//", "8", ",", "W", "//", "8", ")", ".", "to", "(", "img", ".", "device", ")", "\n", "\n", "# optical flow computed as difference: flow = coords1 - coords0", "\n", "return", "coords0", ",", "coords1", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.mask_RAFT.mask_raft.mask_RAFT.upsample_flow": [[107, 119], ["torch.softmax.view", "torch.softmax.view", "torch.softmax.view", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.unfold", "torch.unfold", "torch.unfold", "up_flow.permute.permute.view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "up_flow.permute.permute.permute", "up_flow.permute.permute.reshape"], "methods", ["None"], ["", "def", "upsample_flow", "(", "self", ",", "flow", ",", "mask", ")", ":", "\n", "        ", "\"\"\" Upsample flow field [H/8, W/8, 2] -> [H, W, 2] using convex combination \"\"\"", "\n", "N", ",", "_", ",", "H", ",", "W", "=", "flow", ".", "shape", "\n", "mask", "=", "mask", ".", "view", "(", "N", ",", "1", ",", "9", ",", "8", ",", "8", ",", "H", ",", "W", ")", "\n", "mask", "=", "torch", ".", "softmax", "(", "mask", ",", "dim", "=", "2", ")", "\n", "\n", "up_flow", "=", "F", ".", "unfold", "(", "8", "*", "flow", ",", "[", "3", ",", "3", "]", ",", "padding", "=", "1", ")", "\n", "up_flow", "=", "up_flow", ".", "view", "(", "N", ",", "2", ",", "9", ",", "1", ",", "1", ",", "H", ",", "W", ")", "\n", "\n", "up_flow", "=", "torch", ".", "sum", "(", "mask", "*", "up_flow", ",", "dim", "=", "2", ")", "\n", "up_flow", "=", "up_flow", ".", "permute", "(", "0", ",", "1", ",", "4", ",", "2", ",", "5", ",", "3", ")", "\n", "return", "up_flow", ".", "reshape", "(", "N", ",", "2", ",", "8", "*", "H", ",", "8", "*", "W", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.mask_RAFT.mask_raft.mask_RAFT.forward": [[120, 253], ["fmap1.float.float.float", "fmap2.float.float.float", "_get_sinusoid_encoding_table().permute().view", "isinstance", "mask_raft.mask_RAFT.initialize_flow", "range", "loss.sequence_L1_p_loss", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "autocast", "mask_raft.mask_RAFT.fnet", "_get_sinusoid_encoding_table().permute().view.to", "_get_sinusoid_encoding_table().permute().view.to", "corr_fn.AlternateCorrBlock", "corr_fn.CorrBlock", "autocast", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "coords1.detach.detach.detach", "corr_fn.CorrBlock.", "flow_predictions.append", "warp.apply_warp_by_field", "warped_img1_list.append", "warp.apply_warp_by_field", "loss.sequence_L1_p_loss", "_get_sinusoid_encoding_table().permute", "autocast", "mask_raft.mask_RAFT.update_block", "utils.utils.upflow8", "mask_raft.mask_RAFT.upsample_flow", "image1_mask.clone", "image1.clone", "mask_raft.mask_RAFT.feat_extra", "mask_raft.mask_RAFT.feat_extra", "loss.sequence_TV_loss", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "loss.sequence_TV_with_mask_loss", "loss.sequence_edge_aware_2nd_loss", "gray", "gray", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "mask_raft._get_sinusoid_encoding_table", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.where.float().cpu", "torch.where.float().cpu", "torch.where.float().cpu", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.where.float().cpu", "torch.where.float().cpu", "torch.where.float().cpu", "torch.where.float", "torch.where.float", "torch.where.float", "torch.where.float", "torch.where.float", "torch.where.float"], "methods", ["home.repos.pwc.inspect_result.jcyang98_inst.mask_RAFT.mask_raft.mask_RAFT.initialize_flow", "home.repos.pwc.inspect_result.jcyang98_inst.None.loss.sequence_L1_p_loss", "home.repos.pwc.inspect_result.jcyang98_inst.None.warp.apply_warp_by_field", "home.repos.pwc.inspect_result.jcyang98_inst.None.warp.apply_warp_by_field", "home.repos.pwc.inspect_result.jcyang98_inst.None.loss.sequence_L1_p_loss", "home.repos.pwc.inspect_result.jcyang98_inst.utils.utils.upflow8", "home.repos.pwc.inspect_result.jcyang98_inst.mask_RAFT.mask_raft.mask_RAFT.upsample_flow", "home.repos.pwc.inspect_result.jcyang98_inst.None.loss.sequence_TV_loss", "home.repos.pwc.inspect_result.jcyang98_inst.None.loss.sequence_TV_with_mask_loss", "home.repos.pwc.inspect_result.jcyang98_inst.None.loss.sequence_edge_aware_2nd_loss", "home.repos.pwc.inspect_result.jcyang98_inst.mask_RAFT.mask_raft._get_sinusoid_encoding_table"], ["", "def", "forward", "(", "self", ",", "image1", ",", "image2", ",", "refine_time", "=", "12", ",", "flow_init", "=", "None", ",", "upsample", "=", "True", ",", "test", "=", "False", ",", "image1_mask", "=", "None", ",", "image2_mask", "=", "None", ",", "corr_map", "=", "None", ")", ":", "\n", "\n", "        ", "if", "image1_mask", "==", "None", ":", "\n", "            ", "image1_mask", "=", "image1", "\n", "", "if", "image2_mask", "==", "None", ":", "\n", "            ", "image2_mask", "=", "image2", "\n", "\n", "", "hdim", "=", "self", ".", "hidden_dim", "\n", "cdim", "=", "self", ".", "context_dim", "\n", "\n", "# run the feature network", "\n", "with", "autocast", "(", "enabled", "=", "self", ".", "args", ".", "mixed_precision", ")", ":", "\n", "            ", "fmap1", ",", "fmap2", "=", "self", ".", "fnet", "(", "[", "image1", ",", "image2", "]", ")", "\n", "# fmap1, fmap2 = self.fnet([pos_image1, pos_image2])        ", "\n", "\n", "", "fmap1", "=", "fmap1", ".", "float", "(", ")", "\n", "fmap2", "=", "fmap2", ".", "float", "(", ")", "\n", "\n", "# Position Embedding", "\n", "pos_embed", "=", "_get_sinusoid_encoding_table", "(", "fmap1", ".", "shape", "[", "2", "]", "*", "fmap1", ".", "shape", "[", "3", "]", ",", "fmap1", ".", "shape", "[", "1", "]", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "1", ",", "-", "1", ",", "fmap1", ".", "shape", "[", "2", "]", ",", "fmap1", ".", "shape", "[", "3", "]", ")", "\n", "fmap1", "=", "fmap1", "+", "pos_embed", ".", "to", "(", "fmap1", ".", "device", ")", "\n", "fmap2", "=", "fmap2", "+", "pos_embed", ".", "to", "(", "fmap2", ".", "device", ")", "\n", "\n", "# fmap1 = fmap1 + self.pos_embed_learn", "\n", "# fmap2 = fmap2 + self.pos_embed_learn", "\n", "\n", "if", "self", ".", "args", ".", "alternate_corr", ":", "\n", "            ", "corr_fn", "=", "AlternateCorrBlock", "(", "fmap1", ",", "fmap2", ",", "radius", "=", "self", ".", "args", ".", "corr_radius", ")", "\n", "", "else", ":", "\n", "            ", "corr_fn", "=", "CorrBlock", "(", "fmap1", ",", "fmap2", ",", "radius", "=", "self", ".", "args", ".", "corr_radius", ")", "\n", "# corr_fn = CorrBlock(fmap1, fmap2, radius=self.args.corr_radius,q=self.q,k=self.k)", "\n", "\n", "", "if", "isinstance", "(", "corr_map", ",", "list", ")", ":", "\n", "            ", "corr_map", "[", "0", "]", "=", "corr_fn", ".", "corr_map", "\n", "\n", "# run the context network", "\n", "", "with", "autocast", "(", "enabled", "=", "self", ".", "args", ".", "mixed_precision", ")", ":", "\n", "# cnet = self.cnet(image2)", "\n", "\n", "            ", "cnet", "=", "fmap2", "\n", "net", ",", "inp", "=", "torch", ".", "split", "(", "cnet", ",", "[", "hdim", ",", "cdim", "]", ",", "dim", "=", "1", ")", "\n", "net", "=", "torch", ".", "tanh", "(", "net", ")", "\n", "inp", "=", "torch", ".", "relu", "(", "inp", ")", "\n", "\n", "", "coords0", ",", "coords1", "=", "self", ".", "initialize_flow", "(", "image1", ")", "\n", "\n", "if", "flow_init", "is", "not", "None", ":", "\n", "            ", "coords1", "=", "coords1", "+", "flow_init", "\n", "\n", "", "flow_predictions", "=", "[", "]", "\n", "# down_flow_predictions = []", "\n", "for", "itr", "in", "range", "(", "refine_time", ")", ":", "\n", "            ", "coords1", "=", "coords1", ".", "detach", "(", ")", "\n", "corr", "=", "corr_fn", "(", "coords1", ")", "# index correlation volume", "\n", "\n", "flow", "=", "coords1", "-", "coords0", "\n", "with", "autocast", "(", "enabled", "=", "self", ".", "args", ".", "mixed_precision", ")", ":", "\n", "                ", "net", ",", "up_mask", ",", "delta_flow", "=", "self", ".", "update_block", "(", "net", ",", "inp", ",", "corr", ",", "flow", ")", "\n", "\n", "# F(t+1) = F(t) + \\Delta(t)", "\n", "", "coords1", "=", "coords1", "+", "delta_flow", "\n", "\n", "# upsample predictions", "\n", "if", "up_mask", "is", "None", ":", "\n", "                ", "flow_up", "=", "upflow8", "(", "coords1", "-", "coords0", ")", "\n", "", "else", ":", "\n", "                ", "flow_up", "=", "self", ".", "upsample_flow", "(", "coords1", "-", "coords0", ",", "up_mask", ")", "\n", "\n", "", "flow_predictions", ".", "append", "(", "flow_up", ")", "\n", "# down_flow_predictions.append(coords1 - coords0)", "\n", "\n", "", "warped_img1_list", "=", "[", "]", "\n", "for", "flow_up", "in", "flow_predictions", ":", "\n", "            ", "warped_img1", "=", "apply_warp_by_field", "(", "image1_mask", ".", "clone", "(", ")", ",", "flow_up", ",", "flow_up", ".", "device", ")", "\n", "warped_img1_list", ".", "append", "(", "warped_img1", ")", "\n", "\n", "", "if", "test", ":", "\n", "# return coords1 - coords0, flow_up", "\n", "            ", "return", "flow_predictions", ",", "warped_img1_list", "\n", "\n", "", "ell_warp", "=", "sequence_L1_p_loss", "(", "warped_img1_list", ",", "image2_mask", ",", "gamma", "=", "self", ".", "args", ".", "gamma", ")", "\n", "\n", "# In our work, you can ignore this semantic loss", "\n", "ell_warp_sem", "=", "torch", ".", "zeros_like", "(", "ell_warp", ")", "\n", "if", "self", ".", "semantic_loss", "and", "image1_mask", "!=", "None", "and", "image2_mask", "!=", "None", ":", "\n", "            ", "warped_img1_rgb", "=", "apply_warp_by_field", "(", "image1", ".", "clone", "(", ")", ",", "flow_predictions", "[", "-", "1", "]", ",", "flow_predictions", "[", "-", "1", "]", ".", "device", ")", "\n", "feat_warped_img1", "=", "self", ".", "feat_extra", "(", "gray", "(", "warped_img1_rgb", ")", ")", ".", "pool4", "\n", "feat_img2", "=", "self", ".", "feat_extra", "(", "gray", "(", "image2", ")", ")", ".", "pool4", "\n", "ell_warp_sem", "+=", "sequence_L1_p_loss", "(", "[", "feat_warped_img1", "]", ",", "feat_img2", ")", "\n", "\n", "", "if", "self", ".", "smooth_loss", "==", "'1st'", ":", "\n", "            ", "if", "self", ".", "smooth_mask", "==", "'none'", ":", "\n", "                ", "ell_warp_TV", "=", "sequence_TV_loss", "(", "flow_predictions", ",", "self", ".", "args", ".", "gamma", ")", "\n", "", "else", ":", "\n", "                ", "content_mask", "=", "torch", ".", "where", "(", "image1_mask", ">", "0.5", ",", "torch", ".", "ones_like", "(", "image1_mask", ")", ",", "torch", ".", "zeros_like", "(", "image1_mask", ")", ")", "\n", "content_mask", "=", "(", "content_mask", "[", ":", ",", "0", ",", ":", ",", ":", "]", "*", "content_mask", "[", ":", ",", "1", ",", ":", ",", ":", "]", "*", "content_mask", "[", ":", ",", "2", ",", ":", ",", ":", "]", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "bool", "(", ")", "# [N,1,H,W]", "\n", "style_mask", "=", "torch", ".", "where", "(", "image2_mask", ">", "0.5", ",", "torch", ".", "ones_like", "(", "image2_mask", ")", ",", "torch", ".", "zeros_like", "(", "image2_mask", ")", ")", "\n", "style_mask", "=", "(", "style_mask", "[", ":", ",", "0", ",", ":", ",", ":", "]", "*", "style_mask", "[", ":", ",", "1", ",", ":", ",", ":", "]", "*", "style_mask", "[", ":", ",", "2", ",", ":", ",", ":", "]", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "bool", "(", ")", "# [N,1,H,W]", "\n", "c_share", "=", "content_mask", "&", "style_mask", "# [N,1,H,W]", "\n", "c_xor", "=", "(", "content_mask", "^", "style_mask", ")", "&", "style_mask", "# [N,1,H,W]", "\n", "# if self.smooth_mask == 'midgrid':", "\n", "#     # sm_mask = c_xor    # [N,1,H,W]", "\n", "#     grid_size = 8", "\n", "#     checkerboard_mask = gen_checkerboard(image1.shape[2],image1.shape[3],grid_size).to(image1.device) ", "\n", "#     sm_mask = checkerboard_mask & c_share | c_xor", "\n", "if", "self", ".", "smooth_mask", "==", "'xor'", ":", "\n", "                    ", "sm_mask", "=", "c_xor", "# [N,1,H,W]", "\n", "", "elif", "self", ".", "smooth_mask", "==", "'stylemask'", ":", "\n", "                    ", "sm_mask", "=", "style_mask", "\n", "", "elif", "self", ".", "smooth_mask", "==", "'or'", ":", "\n", "                    ", "sm_mask", "=", "style_mask", "|", "content_mask", "\n", "", "elif", "self", ".", "smooth_mask", "==", "'style_edge'", ":", "\n", "                    ", "f", "=", "9", "\n", "assert", "f", "%", "2", "==", "1", "\n", "kernel", "=", "torch", ".", "ones", "(", "1", ",", "1", ",", "f", ",", "f", ")", "\n", "kernel", "=", "torch", ".", "nn", ".", "Parameter", "(", "data", "=", "kernel", ",", "requires_grad", "=", "False", ")", "\n", "sm_mask", "=", "F", ".", "conv2d", "(", "style_mask", ".", "float", "(", ")", ".", "cpu", "(", ")", ",", "kernel", ",", "padding", "=", "(", "f", "-", "1", ")", "//", "2", ")", "\n", "sm_mask", "=", "(", "(", "sm_mask", ">", "0", ")", "&", "(", "sm_mask", "<", "f", "*", "f", ")", ")", ".", "to", "(", "image1", ".", "device", ")", "\n", "", "elif", "self", ".", "smooth_mask", "==", "'edge_xor'", ":", "\n", "                    ", "f", "=", "9", "\n", "assert", "f", "%", "2", "==", "1", "\n", "kernel", "=", "torch", ".", "ones", "(", "1", ",", "1", ",", "f", ",", "f", ")", "\n", "kernel", "=", "torch", ".", "nn", ".", "Parameter", "(", "data", "=", "kernel", ",", "requires_grad", "=", "False", ")", "\n", "sm_mask", "=", "F", ".", "conv2d", "(", "style_mask", ".", "float", "(", ")", ".", "cpu", "(", ")", ",", "kernel", ",", "padding", "=", "(", "f", "-", "1", ")", "//", "2", ")", "\n", "sm_mask", "=", "(", "(", "sm_mask", ">", "0", ")", "&", "(", "sm_mask", "<", "f", "*", "f", ")", ")", ".", "to", "(", "image1", ".", "device", ")", "\n", "sm_mask", "=", "(", "sm_mask", "&", "content_mask", ")", "|", "c_xor", "\n", "# save_image(sm_mask.float().cpu(),'sm_mask_raft.jpg',scale_each=True,nrow=image1.shape[0],padding=0,pad_value=255)        ", "\n", "", "ell_warp_TV", "=", "sequence_TV_with_mask_loss", "(", "flow_predictions", ",", "sm_mask", ",", "0.9999", ",", "self", ".", "args", ".", "gamma", ")", "\n", "", "", "elif", "self", ".", "smooth_loss", "==", "'2nd'", ":", "\n", "            ", "ell_warp_TV", "=", "sequence_edge_aware_2nd_loss", "(", "flow_predictions", ",", "image2_mask", ",", "self", ".", "args", ".", "gamma", ")", "\n", "# ell_warp_TV = 0.5*sequence_edge_aware_2nd_loss(flow_predictions,image2_mask,self.args.gamma) + 0.5*sequence_TV_loss(flow_predictions,self.args.gamma)", "\n", "\n", "", "return", "flow_predictions", ",", "warped_img1_list", ",", "ell_warp", ",", "ell_warp_TV", ",", "ell_warp_sem", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jcyang98_inst.mask_RAFT.mask_raft._get_sinusoid_encoding_table": [[34, 48], ["numpy.array", "numpy.sin", "numpy.cos", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "mask_raft._get_sinusoid_encoding_table.get_position_angle_vec"], "function", ["None"], ["", "", "", "def", "_get_sinusoid_encoding_table", "(", "n_position", ",", "d_hid", ")", ":", "\n", "    ", "''' Sinusoid position encoding table '''", "\n", "# TODO: make it with torch instead of numpy", "\n", "\n", "def", "get_position_angle_vec", "(", "position", ")", ":", "\n", "# this part calculate the position In brackets", "\n", "        ", "return", "[", "position", "/", "np", ".", "power", "(", "10000", ",", "2", "*", "(", "hid_j", "//", "2", ")", "/", "d_hid", ")", "for", "hid_j", "in", "range", "(", "d_hid", ")", "]", "\n", "\n", "", "sinusoid_table", "=", "np", ".", "array", "(", "[", "get_position_angle_vec", "(", "pos_i", ")", "for", "pos_i", "in", "range", "(", "n_position", ")", "]", ")", "\n", "# [:, 0::2] are all even subscripts, is dim_2i", "\n", "sinusoid_table", "[", ":", ",", "0", ":", ":", "2", "]", "=", "np", ".", "sin", "(", "sinusoid_table", "[", ":", ",", "0", ":", ":", "2", "]", ")", "# dim 2i", "\n", "sinusoid_table", "[", ":", ",", "1", ":", ":", "2", "]", "=", "np", ".", "cos", "(", "sinusoid_table", "[", ":", ",", "1", ":", ":", "2", "]", ")", "# dim 2i+1", "\n", "\n", "return", "torch", ".", "FloatTensor", "(", "sinusoid_table", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.mask_RAFT.datasets.FlowDataset.__init__": [[16, 30], ["utils.augmentor.SparseFlowAugmentor", "utils.augmentor.FlowAugmentor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "aug_params", "=", "None", ",", "sparse", "=", "False", ")", ":", "\n", "        ", "self", ".", "augmentor", "=", "None", "\n", "self", ".", "sparse", "=", "sparse", "\n", "if", "aug_params", "is", "not", "None", ":", "\n", "            ", "if", "sparse", ":", "\n", "                ", "self", ".", "augmentor", "=", "SparseFlowAugmentor", "(", "**", "aug_params", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "augmentor", "=", "FlowAugmentor", "(", "**", "aug_params", ")", "\n", "\n", "", "", "self", ".", "is_test", "=", "False", "\n", "self", ".", "init_seed", "=", "False", "\n", "self", ".", "flow_list", "=", "[", "]", "\n", "self", ".", "image_list", "=", "[", "]", "\n", "self", ".", "extra_info", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.mask_RAFT.datasets.FlowDataset.__getitem__": [[31, 88], ["utils.frame_utils.read_gen", "utils.frame_utils.read_gen", "numpy.array().astype", "numpy.array().astype", "numpy.array().astype", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "utils.frame_utils.read_gen", "utils.frame_utils.read_gen", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.utils.data.get_worker_info", "torch.utils.data.get_worker_info", "torch.utils.data.get_worker_info", "torch.utils.data.get_worker_info", "torch.utils.data.get_worker_info", "torch.utils.data.get_worker_info", "torch.utils.data.get_worker_info", "torch.utils.data.get_worker_info", "torch.utils.data.get_worker_info", "len", "utils.frame_utils.readFlowKITTI", "utils.frame_utils.read_gen", "len", "numpy.tile", "numpy.tile", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy.float", "torch.from_numpy.float", "torch.from_numpy.float", "numpy.array().astype", "numpy.array().astype", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "numpy.random.seed", "random.seed", "numpy.array", "numpy.array", "numpy.array", "datasets.FlowDataset.augmentor", "datasets.FlowDataset.augmentor", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "flow[].abs", "flow[].abs", "numpy.array", "numpy.array", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.jcyang98_inst.utils.frame_utils.read_gen", "home.repos.pwc.inspect_result.jcyang98_inst.utils.frame_utils.read_gen", "home.repos.pwc.inspect_result.jcyang98_inst.utils.frame_utils.read_gen", "home.repos.pwc.inspect_result.jcyang98_inst.utils.frame_utils.read_gen", "home.repos.pwc.inspect_result.jcyang98_inst.utils.frame_utils.readFlowKITTI", "home.repos.pwc.inspect_result.jcyang98_inst.utils.frame_utils.read_gen"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "if", "self", ".", "is_test", ":", "\n", "            ", "img1", "=", "frame_utils", ".", "read_gen", "(", "self", ".", "image_list", "[", "index", "]", "[", "0", "]", ")", "\n", "img2", "=", "frame_utils", ".", "read_gen", "(", "self", ".", "image_list", "[", "index", "]", "[", "1", "]", ")", "\n", "img1", "=", "np", ".", "array", "(", "img1", ")", ".", "astype", "(", "np", ".", "uint8", ")", "[", "...", ",", ":", "3", "]", "\n", "img2", "=", "np", ".", "array", "(", "img2", ")", ".", "astype", "(", "np", ".", "uint8", ")", "[", "...", ",", ":", "3", "]", "\n", "img1", "=", "torch", ".", "from_numpy", "(", "img1", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "float", "(", ")", "\n", "img2", "=", "torch", ".", "from_numpy", "(", "img2", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "float", "(", ")", "\n", "return", "img1", ",", "img2", ",", "self", ".", "extra_info", "[", "index", "]", "\n", "\n", "", "if", "not", "self", ".", "init_seed", ":", "\n", "            ", "worker_info", "=", "torch", ".", "utils", ".", "data", ".", "get_worker_info", "(", ")", "\n", "if", "worker_info", "is", "not", "None", ":", "\n", "                ", "torch", ".", "manual_seed", "(", "worker_info", ".", "id", ")", "\n", "np", ".", "random", ".", "seed", "(", "worker_info", ".", "id", ")", "\n", "random", ".", "seed", "(", "worker_info", ".", "id", ")", "\n", "self", ".", "init_seed", "=", "True", "\n", "\n", "", "", "index", "=", "index", "%", "len", "(", "self", ".", "image_list", ")", "\n", "valid", "=", "None", "\n", "if", "self", ".", "sparse", ":", "\n", "            ", "flow", ",", "valid", "=", "frame_utils", ".", "readFlowKITTI", "(", "self", ".", "flow_list", "[", "index", "]", ")", "\n", "", "else", ":", "\n", "            ", "flow", "=", "frame_utils", ".", "read_gen", "(", "self", ".", "flow_list", "[", "index", "]", ")", "\n", "\n", "", "img1", "=", "frame_utils", ".", "read_gen", "(", "self", ".", "image_list", "[", "index", "]", "[", "0", "]", ")", "\n", "img2", "=", "frame_utils", ".", "read_gen", "(", "self", ".", "image_list", "[", "index", "]", "[", "1", "]", ")", "\n", "\n", "flow", "=", "np", ".", "array", "(", "flow", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "img1", "=", "np", ".", "array", "(", "img1", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "img2", "=", "np", ".", "array", "(", "img2", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "# grayscale images", "\n", "if", "len", "(", "img1", ".", "shape", ")", "==", "2", ":", "\n", "            ", "img1", "=", "np", ".", "tile", "(", "img1", "[", "...", ",", "None", "]", ",", "(", "1", ",", "1", ",", "3", ")", ")", "\n", "img2", "=", "np", ".", "tile", "(", "img2", "[", "...", ",", "None", "]", ",", "(", "1", ",", "1", ",", "3", ")", ")", "\n", "", "else", ":", "\n", "            ", "img1", "=", "img1", "[", "...", ",", ":", "3", "]", "\n", "img2", "=", "img2", "[", "...", ",", ":", "3", "]", "\n", "\n", "", "if", "self", ".", "augmentor", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "sparse", ":", "\n", "                ", "img1", ",", "img2", ",", "flow", ",", "valid", "=", "self", ".", "augmentor", "(", "img1", ",", "img2", ",", "flow", ",", "valid", ")", "\n", "", "else", ":", "\n", "                ", "img1", ",", "img2", ",", "flow", "=", "self", ".", "augmentor", "(", "img1", ",", "img2", ",", "flow", ")", "\n", "\n", "", "", "img1", "=", "torch", ".", "from_numpy", "(", "img1", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "float", "(", ")", "\n", "img2", "=", "torch", ".", "from_numpy", "(", "img2", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "float", "(", ")", "\n", "flow", "=", "torch", ".", "from_numpy", "(", "flow", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "float", "(", ")", "\n", "\n", "if", "valid", "is", "not", "None", ":", "\n", "            ", "valid", "=", "torch", ".", "from_numpy", "(", "valid", ")", "\n", "", "else", ":", "\n", "            ", "valid", "=", "(", "flow", "[", "0", "]", ".", "abs", "(", ")", "<", "1000", ")", "&", "(", "flow", "[", "1", "]", ".", "abs", "(", ")", "<", "1000", ")", "\n", "\n", "", "return", "img1", ",", "img2", ",", "flow", ",", "valid", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.mask_RAFT.datasets.FlowDataset.__rmul__": [[90, 94], ["None"], "methods", ["None"], ["", "def", "__rmul__", "(", "self", ",", "v", ")", ":", "\n", "        ", "self", ".", "flow_list", "=", "v", "*", "self", ".", "flow_list", "\n", "self", ".", "image_list", "=", "v", "*", "self", ".", "image_list", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.mask_RAFT.datasets.FlowDataset.__len__": [[95, 97], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "image_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.mask_RAFT.datasets.MpiSintel.__init__": [[100, 116], ["datasets.FlowDataset.__init__", "os.join", "os.join", "os.join", "os.join", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "sorted", "range", "glob.glob.glob", "sorted", "os.join", "os.join", "len", "glob.glob.glob", "os.join", "os.join"], "methods", ["home.repos.pwc.inspect_result.jcyang98_inst.utils.utils.InputPadder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "aug_params", "=", "None", ",", "split", "=", "'training'", ",", "root", "=", "'datasets/Sintel'", ",", "dstype", "=", "'clean'", ")", ":", "\n", "        ", "super", "(", "MpiSintel", ",", "self", ")", ".", "__init__", "(", "aug_params", ")", "\n", "flow_root", "=", "osp", ".", "join", "(", "root", ",", "split", ",", "'flow'", ")", "\n", "image_root", "=", "osp", ".", "join", "(", "root", ",", "split", ",", "dstype", ")", "\n", "\n", "if", "split", "==", "'test'", ":", "\n", "            ", "self", ".", "is_test", "=", "True", "\n", "\n", "", "for", "scene", "in", "os", ".", "listdir", "(", "image_root", ")", ":", "\n", "            ", "image_list", "=", "sorted", "(", "glob", "(", "osp", ".", "join", "(", "image_root", ",", "scene", ",", "'*.png'", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "image_list", ")", "-", "1", ")", ":", "\n", "                ", "self", ".", "image_list", "+=", "[", "[", "image_list", "[", "i", "]", ",", "image_list", "[", "i", "+", "1", "]", "]", "]", "\n", "self", ".", "extra_info", "+=", "[", "(", "scene", ",", "i", ")", "]", "# scene and frame_id", "\n", "\n", "", "if", "split", "!=", "'test'", ":", "\n", "                ", "self", ".", "flow_list", "+=", "sorted", "(", "glob", "(", "osp", ".", "join", "(", "flow_root", ",", "scene", ",", "'*.flo'", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.mask_RAFT.datasets.FlyingChairs.__init__": [[119, 132], ["datasets.FlowDataset.__init__", "sorted", "sorted", "numpy.loadtxt", "range", "glob.glob.glob", "glob.glob.glob", "len", "len", "os.join", "os.join", "os.join", "os.join", "len"], "methods", ["home.repos.pwc.inspect_result.jcyang98_inst.utils.utils.InputPadder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "aug_params", "=", "None", ",", "split", "=", "'train'", ",", "root", "=", "'datasets/FlyingChairs_release/data'", ")", ":", "\n", "        ", "super", "(", "FlyingChairs", ",", "self", ")", ".", "__init__", "(", "aug_params", ")", "\n", "\n", "images", "=", "sorted", "(", "glob", "(", "osp", ".", "join", "(", "root", ",", "'*.ppm'", ")", ")", ")", "\n", "flows", "=", "sorted", "(", "glob", "(", "osp", ".", "join", "(", "root", ",", "'*.flo'", ")", ")", ")", "\n", "assert", "(", "len", "(", "images", ")", "//", "2", "==", "len", "(", "flows", ")", ")", "\n", "\n", "split_list", "=", "np", ".", "loadtxt", "(", "'chairs_split.txt'", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "flows", ")", ")", ":", "\n", "            ", "xid", "=", "split_list", "[", "i", "]", "\n", "if", "(", "split", "==", "'training'", "and", "xid", "==", "1", ")", "or", "(", "split", "==", "'validation'", "and", "xid", "==", "2", ")", ":", "\n", "                ", "self", ".", "flow_list", "+=", "[", "flows", "[", "i", "]", "]", "\n", "self", ".", "image_list", "+=", "[", "[", "images", "[", "2", "*", "i", "]", ",", "images", "[", "2", "*", "i", "+", "1", "]", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.mask_RAFT.datasets.FlyingThings3D.__init__": [[135, 156], ["datasets.FlowDataset.__init__", "sorted", "sorted", "sorted", "sorted", "zip", "glob.glob.glob", "glob.glob.glob", "sorted", "sorted", "range", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "glob.glob.glob", "glob.glob.glob", "os.join", "os.join", "os.join", "os.join", "len"], "methods", ["home.repos.pwc.inspect_result.jcyang98_inst.utils.utils.InputPadder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "aug_params", "=", "None", ",", "root", "=", "'datasets/FlyingThings3D'", ",", "dstype", "=", "'frames_cleanpass'", ")", ":", "\n", "        ", "super", "(", "FlyingThings3D", ",", "self", ")", ".", "__init__", "(", "aug_params", ")", "\n", "\n", "for", "cam", "in", "[", "'left'", "]", ":", "\n", "            ", "for", "direction", "in", "[", "'into_future'", ",", "'into_past'", "]", ":", "\n", "                ", "image_dirs", "=", "sorted", "(", "glob", "(", "osp", ".", "join", "(", "root", ",", "dstype", ",", "'TRAIN/*/*'", ")", ")", ")", "\n", "image_dirs", "=", "sorted", "(", "[", "osp", ".", "join", "(", "f", ",", "cam", ")", "for", "f", "in", "image_dirs", "]", ")", "\n", "\n", "flow_dirs", "=", "sorted", "(", "glob", "(", "osp", ".", "join", "(", "root", ",", "'optical_flow/TRAIN/*/*'", ")", ")", ")", "\n", "flow_dirs", "=", "sorted", "(", "[", "osp", ".", "join", "(", "f", ",", "direction", ",", "cam", ")", "for", "f", "in", "flow_dirs", "]", ")", "\n", "\n", "for", "idir", ",", "fdir", "in", "zip", "(", "image_dirs", ",", "flow_dirs", ")", ":", "\n", "                    ", "images", "=", "sorted", "(", "glob", "(", "osp", ".", "join", "(", "idir", ",", "'*.png'", ")", ")", ")", "\n", "flows", "=", "sorted", "(", "glob", "(", "osp", ".", "join", "(", "fdir", ",", "'*.pfm'", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "flows", ")", "-", "1", ")", ":", "\n", "                        ", "if", "direction", "==", "'into_future'", ":", "\n", "                            ", "self", ".", "image_list", "+=", "[", "[", "images", "[", "i", "]", ",", "images", "[", "i", "+", "1", "]", "]", "]", "\n", "self", ".", "flow_list", "+=", "[", "flows", "[", "i", "]", "]", "\n", "", "elif", "direction", "==", "'into_past'", ":", "\n", "                            ", "self", ".", "image_list", "+=", "[", "[", "images", "[", "i", "+", "1", "]", ",", "images", "[", "i", "]", "]", "]", "\n", "self", ".", "flow_list", "+=", "[", "flows", "[", "i", "+", "1", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.mask_RAFT.datasets.KITTI.__init__": [[159, 175], ["datasets.FlowDataset.__init__", "os.join", "os.join", "sorted", "sorted", "zip", "glob.glob.glob", "glob.glob.glob", "sorted", "os.join", "os.join", "os.join", "os.join", "img1.split", "glob.glob.glob", "os.join", "os.join"], "methods", ["home.repos.pwc.inspect_result.jcyang98_inst.utils.utils.InputPadder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "aug_params", "=", "None", ",", "split", "=", "'training'", ",", "root", "=", "'datasets/KITTI'", ")", ":", "\n", "        ", "super", "(", "KITTI", ",", "self", ")", ".", "__init__", "(", "aug_params", ",", "sparse", "=", "True", ")", "\n", "if", "split", "==", "'testing'", ":", "\n", "            ", "self", ".", "is_test", "=", "True", "\n", "\n", "", "root", "=", "osp", ".", "join", "(", "root", ",", "split", ")", "\n", "images1", "=", "sorted", "(", "glob", "(", "osp", ".", "join", "(", "root", ",", "'image_2/*_10.png'", ")", ")", ")", "\n", "images2", "=", "sorted", "(", "glob", "(", "osp", ".", "join", "(", "root", ",", "'image_2/*_11.png'", ")", ")", ")", "\n", "\n", "for", "img1", ",", "img2", "in", "zip", "(", "images1", ",", "images2", ")", ":", "\n", "            ", "frame_id", "=", "img1", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "self", ".", "extra_info", "+=", "[", "[", "frame_id", "]", "]", "\n", "self", ".", "image_list", "+=", "[", "[", "img1", ",", "img2", "]", "]", "\n", "\n", "", "if", "split", "==", "'training'", ":", "\n", "            ", "self", ".", "flow_list", "=", "sorted", "(", "glob", "(", "osp", ".", "join", "(", "root", ",", "'flow_occ/*_10.png'", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.mask_RAFT.datasets.HD1K.__init__": [[178, 194], ["datasets.FlowDataset.__init__", "sorted", "sorted", "range", "glob.glob.glob", "glob.glob.glob", "len", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "len"], "methods", ["home.repos.pwc.inspect_result.jcyang98_inst.utils.utils.InputPadder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "aug_params", "=", "None", ",", "root", "=", "'datasets/HD1k'", ")", ":", "\n", "        ", "super", "(", "HD1K", ",", "self", ")", ".", "__init__", "(", "aug_params", ",", "sparse", "=", "True", ")", "\n", "\n", "seq_ix", "=", "0", "\n", "while", "1", ":", "\n", "            ", "flows", "=", "sorted", "(", "glob", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'hd1k_flow_gt'", ",", "'flow_occ/%06d_*.png'", "%", "seq_ix", ")", ")", ")", "\n", "images", "=", "sorted", "(", "glob", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'hd1k_input'", ",", "'image_2/%06d_*.png'", "%", "seq_ix", ")", ")", ")", "\n", "\n", "if", "len", "(", "flows", ")", "==", "0", ":", "\n", "                ", "break", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "flows", ")", "-", "1", ")", ":", "\n", "                ", "self", ".", "flow_list", "+=", "[", "flows", "[", "i", "]", "]", "\n", "self", ".", "image_list", "+=", "[", "[", "images", "[", "i", "]", ",", "images", "[", "i", "+", "1", "]", "]", "]", "\n", "\n", "", "seq_ix", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.mask_RAFT.datasets.fetch_dataloader": [[196, 232], ["torch.DataLoader", "print", "datasets.FlyingChairs", "datasets.FlyingThings3D", "datasets.FlyingThings3D", "len", "datasets.FlyingThings3D", "datasets.MpiSintel", "datasets.MpiSintel", "datasets.KITTI", "datasets.HD1K", "datasets.KITTI"], "function", ["None"], ["", "", "", "def", "fetch_dataloader", "(", "args", ",", "TRAIN_DS", "=", "'C+T+K+S+H'", ")", ":", "\n", "    ", "\"\"\" Create the data loader for the corresponding trainign set \"\"\"", "\n", "\n", "if", "args", ".", "stage", "==", "'chairs'", ":", "\n", "        ", "aug_params", "=", "{", "'crop_size'", ":", "args", ".", "image_size", ",", "'min_scale'", ":", "-", "0.1", ",", "'max_scale'", ":", "1.0", ",", "'do_flip'", ":", "True", "}", "\n", "train_dataset", "=", "FlyingChairs", "(", "aug_params", ",", "split", "=", "'training'", ")", "\n", "\n", "", "elif", "args", ".", "stage", "==", "'things'", ":", "\n", "        ", "aug_params", "=", "{", "'crop_size'", ":", "args", ".", "image_size", ",", "'min_scale'", ":", "-", "0.4", ",", "'max_scale'", ":", "0.8", ",", "'do_flip'", ":", "True", "}", "\n", "clean_dataset", "=", "FlyingThings3D", "(", "aug_params", ",", "dstype", "=", "'frames_cleanpass'", ")", "\n", "final_dataset", "=", "FlyingThings3D", "(", "aug_params", ",", "dstype", "=", "'frames_finalpass'", ")", "\n", "train_dataset", "=", "clean_dataset", "+", "final_dataset", "\n", "\n", "", "elif", "args", ".", "stage", "==", "'sintel'", ":", "\n", "        ", "aug_params", "=", "{", "'crop_size'", ":", "args", ".", "image_size", ",", "'min_scale'", ":", "-", "0.2", ",", "'max_scale'", ":", "0.6", ",", "'do_flip'", ":", "True", "}", "\n", "things", "=", "FlyingThings3D", "(", "aug_params", ",", "dstype", "=", "'frames_cleanpass'", ")", "\n", "sintel_clean", "=", "MpiSintel", "(", "aug_params", ",", "split", "=", "'training'", ",", "dstype", "=", "'clean'", ")", "\n", "sintel_final", "=", "MpiSintel", "(", "aug_params", ",", "split", "=", "'training'", ",", "dstype", "=", "'final'", ")", "\n", "\n", "if", "TRAIN_DS", "==", "'C+T+K+S+H'", ":", "\n", "            ", "kitti", "=", "KITTI", "(", "{", "'crop_size'", ":", "args", ".", "image_size", ",", "'min_scale'", ":", "-", "0.3", ",", "'max_scale'", ":", "0.5", ",", "'do_flip'", ":", "True", "}", ")", "\n", "hd1k", "=", "HD1K", "(", "{", "'crop_size'", ":", "args", ".", "image_size", ",", "'min_scale'", ":", "-", "0.5", ",", "'max_scale'", ":", "0.2", ",", "'do_flip'", ":", "True", "}", ")", "\n", "train_dataset", "=", "100", "*", "sintel_clean", "+", "100", "*", "sintel_final", "+", "200", "*", "kitti", "+", "5", "*", "hd1k", "+", "things", "\n", "\n", "", "elif", "TRAIN_DS", "==", "'C+T+K/S'", ":", "\n", "            ", "train_dataset", "=", "100", "*", "sintel_clean", "+", "100", "*", "sintel_final", "+", "things", "\n", "\n", "", "", "elif", "args", ".", "stage", "==", "'kitti'", ":", "\n", "        ", "aug_params", "=", "{", "'crop_size'", ":", "args", ".", "image_size", ",", "'min_scale'", ":", "-", "0.2", ",", "'max_scale'", ":", "0.4", ",", "'do_flip'", ":", "False", "}", "\n", "train_dataset", "=", "KITTI", "(", "aug_params", ",", "split", "=", "'training'", ")", "\n", "\n", "", "train_loader", "=", "data", ".", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "pin_memory", "=", "False", ",", "shuffle", "=", "True", ",", "num_workers", "=", "4", ",", "drop_last", "=", "True", ")", "\n", "\n", "print", "(", "'Training with %d image pairs'", "%", "len", "(", "train_dataset", ")", ")", "\n", "return", "train_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.utils.frame_utils.readFlow": [[12, 27], ["open", "numpy.fromfile", "print", "numpy.fromfile", "numpy.fromfile", "numpy.fromfile", "numpy.resize", "int", "int", "int", "int"], "function", ["None"], ["def", "readFlow", "(", "fn", ")", ":", "\n", "    ", "\"\"\" Read .flo file in Middlebury format\"\"\"", "\n", "with", "open", "(", "fn", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "magic", "=", "np", ".", "fromfile", "(", "f", ",", "np", ".", "float32", ",", "count", "=", "1", ")", "\n", "if", "202021.25", "!=", "magic", ":", "\n", "            ", "print", "(", "'Magic number incorrect. Invalid .flo file'", ")", "\n", "return", "None", "\n", "", "else", ":", "\n", "            ", "w", "=", "np", ".", "fromfile", "(", "f", ",", "np", ".", "int32", ",", "count", "=", "1", ")", "\n", "h", "=", "np", ".", "fromfile", "(", "f", ",", "np", ".", "int32", ",", "count", "=", "1", ")", "\n", "# print 'Reading %d x %d flo file\\n' % (w, h)", "\n", "data", "=", "np", ".", "fromfile", "(", "f", ",", "np", ".", "float32", ",", "count", "=", "2", "*", "int", "(", "w", ")", "*", "int", "(", "h", ")", ")", "\n", "# Reshape data into 3D array (columns, rows, bands)", "\n", "# The reshape here is for visualization, the original code is (w,h,2)", "\n", "return", "np", ".", "resize", "(", "data", ",", "(", "int", "(", "h", ")", ",", "int", "(", "w", ")", ",", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.utils.frame_utils.readPFM": [[28, 64], ["open", "open.readline().rstrip", "re.match", "float", "numpy.fromfile", "numpy.reshape", "numpy.flipud", "open.readline", "map", "Exception", "open.readline().rstrip", "open.readline", "Exception", "re.match.groups", "open.readline"], "function", ["None"], ["", "", "", "def", "readPFM", "(", "file", ")", ":", "\n", "    ", "file", "=", "open", "(", "file", ",", "'rb'", ")", "\n", "\n", "color", "=", "None", "\n", "width", "=", "None", "\n", "height", "=", "None", "\n", "scale", "=", "None", "\n", "endian", "=", "None", "\n", "\n", "header", "=", "file", ".", "readline", "(", ")", ".", "rstrip", "(", ")", "\n", "if", "header", "==", "b'PF'", ":", "\n", "        ", "color", "=", "True", "\n", "", "elif", "header", "==", "b'Pf'", ":", "\n", "        ", "color", "=", "False", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Not a PFM file.'", ")", "\n", "\n", "", "dim_match", "=", "re", ".", "match", "(", "rb'^(\\d+)\\s(\\d+)\\s$'", ",", "file", ".", "readline", "(", ")", ")", "\n", "if", "dim_match", ":", "\n", "        ", "width", ",", "height", "=", "map", "(", "int", ",", "dim_match", ".", "groups", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Malformed PFM header.'", ")", "\n", "\n", "", "scale", "=", "float", "(", "file", ".", "readline", "(", ")", ".", "rstrip", "(", ")", ")", "\n", "if", "scale", "<", "0", ":", "# little-endian", "\n", "        ", "endian", "=", "'<'", "\n", "scale", "=", "-", "scale", "\n", "", "else", ":", "\n", "        ", "endian", "=", "'>'", "# big-endian", "\n", "\n", "", "data", "=", "np", ".", "fromfile", "(", "file", ",", "endian", "+", "'f'", ")", "\n", "shape", "=", "(", "height", ",", "width", ",", "3", ")", "if", "color", "else", "(", "height", ",", "width", ")", "\n", "\n", "data", "=", "np", ".", "reshape", "(", "data", ",", "shape", ")", "\n", "data", "=", "np", ".", "flipud", "(", "data", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.utils.frame_utils.writeFlow": [[65, 95], ["open", "open.write", "numpy.array().astype().tofile", "numpy.array().astype().tofile", "numpy.zeros", "np.zeros.astype().tofile", "open.close", "numpy.array().astype", "numpy.array().astype", "np.zeros.astype", "numpy.array", "numpy.array", "numpy.arange", "numpy.arange"], "function", ["None"], ["", "def", "writeFlow", "(", "filename", ",", "uv", ",", "v", "=", "None", ")", ":", "\n", "    ", "\"\"\" Write optical flow to file.\n    \n    If v is None, uv is assumed to contain both u and v channels,\n    stacked in depth.\n    Original code by Deqing Sun, adapted from Daniel Scharstein.\n    \"\"\"", "\n", "nBands", "=", "2", "\n", "\n", "if", "v", "is", "None", ":", "\n", "        ", "assert", "(", "uv", ".", "ndim", "==", "3", ")", "\n", "assert", "(", "uv", ".", "shape", "[", "2", "]", "==", "2", ")", "\n", "u", "=", "uv", "[", ":", ",", ":", ",", "0", "]", "\n", "v", "=", "uv", "[", ":", ",", ":", ",", "1", "]", "\n", "", "else", ":", "\n", "        ", "u", "=", "uv", "\n", "\n", "", "assert", "(", "u", ".", "shape", "==", "v", ".", "shape", ")", "\n", "height", ",", "width", "=", "u", ".", "shape", "\n", "f", "=", "open", "(", "filename", ",", "'wb'", ")", "\n", "# write the header", "\n", "f", ".", "write", "(", "TAG_CHAR", ")", "\n", "np", ".", "array", "(", "width", ")", ".", "astype", "(", "np", ".", "int32", ")", ".", "tofile", "(", "f", ")", "\n", "np", ".", "array", "(", "height", ")", ".", "astype", "(", "np", ".", "int32", ")", ".", "tofile", "(", "f", ")", "\n", "# arrange into matrix form", "\n", "tmp", "=", "np", ".", "zeros", "(", "(", "height", ",", "width", "*", "nBands", ")", ")", "\n", "tmp", "[", ":", ",", "np", ".", "arange", "(", "width", ")", "*", "2", "]", "=", "u", "\n", "tmp", "[", ":", ",", "np", ".", "arange", "(", "width", ")", "*", "2", "+", "1", "]", "=", "v", "\n", "tmp", ".", "astype", "(", "np", ".", "float32", ")", ".", "tofile", "(", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.utils.frame_utils.readFlowKITTI": [[97, 103], ["cv2.imread", "flow[].astype"], "function", ["None"], ["", "def", "readFlowKITTI", "(", "filename", ")", ":", "\n", "    ", "flow", "=", "cv2", ".", "imread", "(", "filename", ",", "cv2", ".", "IMREAD_ANYDEPTH", "|", "cv2", ".", "IMREAD_COLOR", ")", "\n", "flow", "=", "flow", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "flow", ",", "valid", "=", "flow", "[", ":", ",", ":", ",", ":", "2", "]", ",", "flow", "[", ":", ",", ":", ",", "2", "]", "\n", "flow", "=", "(", "flow", "-", "2", "**", "15", ")", "/", "64.0", "\n", "return", "flow", ",", "valid", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.utils.frame_utils.readDispKITTI": [[104, 109], ["numpy.stack", "cv2.imread", "numpy.zeros_like"], "function", ["None"], ["", "def", "readDispKITTI", "(", "filename", ")", ":", "\n", "    ", "disp", "=", "cv2", ".", "imread", "(", "filename", ",", "cv2", ".", "IMREAD_ANYDEPTH", ")", "/", "256.0", "\n", "valid", "=", "disp", ">", "0.0", "\n", "flow", "=", "np", ".", "stack", "(", "[", "-", "disp", ",", "np", ".", "zeros_like", "(", "disp", ")", "]", ",", "-", "1", ")", "\n", "return", "flow", ",", "valid", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.utils.frame_utils.writeFlowKITTI": [[111, 116], ["numpy.ones", "numpy.concatenate().astype", "cv2.imwrite", "numpy.concatenate"], "function", ["None"], ["", "def", "writeFlowKITTI", "(", "filename", ",", "uv", ")", ":", "\n", "    ", "uv", "=", "64.0", "*", "uv", "+", "2", "**", "15", "\n", "valid", "=", "np", ".", "ones", "(", "[", "uv", ".", "shape", "[", "0", "]", ",", "uv", ".", "shape", "[", "1", "]", ",", "1", "]", ")", "\n", "uv", "=", "np", ".", "concatenate", "(", "[", "uv", ",", "valid", "]", ",", "axis", "=", "-", "1", ")", ".", "astype", "(", "np", ".", "uint16", ")", "\n", "cv2", ".", "imwrite", "(", "filename", ",", "uv", "[", "...", ",", ":", ":", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.utils.frame_utils.read_gen": [[118, 133], ["splitext", "PIL.Image.open", "numpy.load", "readFlow().astype", "readPFM().astype", "frame_utils.readFlow", "len", "frame_utils.readPFM"], "function", ["home.repos.pwc.inspect_result.jcyang98_inst.utils.frame_utils.readFlow", "home.repos.pwc.inspect_result.jcyang98_inst.utils.frame_utils.readPFM"], ["", "def", "read_gen", "(", "file_name", ",", "pil", "=", "False", ")", ":", "\n", "    ", "ext", "=", "splitext", "(", "file_name", ")", "[", "-", "1", "]", "\n", "if", "ext", "==", "'.png'", "or", "ext", "==", "'.jpeg'", "or", "ext", "==", "'.ppm'", "or", "ext", "==", "'.jpg'", ":", "\n", "        ", "return", "Image", ".", "open", "(", "file_name", ")", "\n", "", "elif", "ext", "==", "'.bin'", "or", "ext", "==", "'.raw'", ":", "\n", "        ", "return", "np", ".", "load", "(", "file_name", ")", "\n", "", "elif", "ext", "==", "'.flo'", ":", "\n", "        ", "return", "readFlow", "(", "file_name", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "elif", "ext", "==", "'.pfm'", ":", "\n", "        ", "flow", "=", "readPFM", "(", "file_name", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "if", "len", "(", "flow", ".", "shape", ")", "==", "2", ":", "\n", "            ", "return", "flow", "\n", "", "else", ":", "\n", "            ", "return", "flow", "[", ":", ",", ":", ",", ":", "-", "1", "]", "\n", "", "", "return", "[", "]", "", "", ""]], "home.repos.pwc.inspect_result.jcyang98_inst.utils.flow_viz.make_colorwheel": [[4, 41], ["numpy.zeros", "numpy.floor", "numpy.floor", "numpy.floor", "numpy.floor", "numpy.floor", "numpy.floor", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange"], "function", ["None"], ["def", "make_colorwheel", "(", ")", ":", "\n", "\n", "    ", "RY", "=", "15", "\n", "YG", "=", "6", "\n", "GC", "=", "4", "\n", "CB", "=", "11", "\n", "BM", "=", "13", "\n", "MR", "=", "6", "\n", "\n", "ncols", "=", "RY", "+", "YG", "+", "GC", "+", "CB", "+", "BM", "+", "MR", "\n", "colorwheel", "=", "np", ".", "zeros", "(", "(", "ncols", ",", "3", ")", ")", "\n", "col", "=", "0", "\n", "\n", "# RY", "\n", "colorwheel", "[", "0", ":", "RY", ",", "0", "]", "=", "255", "\n", "colorwheel", "[", "0", ":", "RY", ",", "1", "]", "=", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "0", ",", "RY", ")", "/", "RY", ")", "\n", "col", "=", "col", "+", "RY", "\n", "# YG", "\n", "colorwheel", "[", "col", ":", "col", "+", "YG", ",", "0", "]", "=", "255", "-", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "0", ",", "YG", ")", "/", "YG", ")", "\n", "colorwheel", "[", "col", ":", "col", "+", "YG", ",", "1", "]", "=", "255", "\n", "col", "=", "col", "+", "YG", "\n", "# GC", "\n", "colorwheel", "[", "col", ":", "col", "+", "GC", ",", "1", "]", "=", "255", "\n", "colorwheel", "[", "col", ":", "col", "+", "GC", ",", "2", "]", "=", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "0", ",", "GC", ")", "/", "GC", ")", "\n", "col", "=", "col", "+", "GC", "\n", "# CB", "\n", "colorwheel", "[", "col", ":", "col", "+", "CB", ",", "1", "]", "=", "255", "-", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "CB", ")", "/", "CB", ")", "\n", "colorwheel", "[", "col", ":", "col", "+", "CB", ",", "2", "]", "=", "255", "\n", "col", "=", "col", "+", "CB", "\n", "# BM", "\n", "colorwheel", "[", "col", ":", "col", "+", "BM", ",", "2", "]", "=", "255", "\n", "colorwheel", "[", "col", ":", "col", "+", "BM", ",", "0", "]", "=", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "0", ",", "BM", ")", "/", "BM", ")", "\n", "col", "=", "col", "+", "BM", "\n", "# MR", "\n", "colorwheel", "[", "col", ":", "col", "+", "MR", ",", "2", "]", "=", "255", "-", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "MR", ")", "/", "MR", ")", "\n", "colorwheel", "[", "col", ":", "col", "+", "MR", ",", "0", "]", "=", "255", "\n", "return", "colorwheel", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.utils.flow_viz.flow_uv_to_colors": [[43, 80], ["numpy.zeros", "flow_viz.make_colorwheel", "numpy.sqrt", "numpy.floor().astype", "range", "numpy.arctan2", "numpy.floor", "numpy.square", "numpy.square", "numpy.floor"], "function", ["home.repos.pwc.inspect_result.jcyang98_inst.utils.flow_viz.make_colorwheel"], ["", "def", "flow_uv_to_colors", "(", "u", ",", "v", ",", "convert_to_bgr", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Applies the flow color wheel to (possibly clipped) flow components u and v.\n\n    According to the C++ source code of Daniel Scharstein\n    According to the Matlab source code of Deqing Sun\n\n    Args:\n        u (np.ndarray): Input horizontal flow of shape [H,W]\n        v (np.ndarray): Input vertical flow of shape [H,W]\n        convert_to_bgr (bool, optional): Convert output image to BGR. Defaults to False.\n\n    Returns:\n        np.ndarray: Flow visualization image of shape [H,W,3]\n    \"\"\"", "\n", "flow_image", "=", "np", ".", "zeros", "(", "(", "u", ".", "shape", "[", "0", "]", ",", "u", ".", "shape", "[", "1", "]", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "colorwheel", "=", "make_colorwheel", "(", ")", "# shape [55x3]", "\n", "ncols", "=", "colorwheel", ".", "shape", "[", "0", "]", "\n", "rad", "=", "np", ".", "sqrt", "(", "np", ".", "square", "(", "u", ")", "+", "np", ".", "square", "(", "v", ")", ")", "\n", "a", "=", "np", ".", "arctan2", "(", "-", "v", ",", "-", "u", ")", "/", "np", ".", "pi", "\n", "fk", "=", "(", "a", "+", "1", ")", "/", "2", "*", "(", "ncols", "-", "1", ")", "\n", "k0", "=", "np", ".", "floor", "(", "fk", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "k1", "=", "k0", "+", "1", "\n", "k1", "[", "k1", "==", "ncols", "]", "=", "0", "\n", "f", "=", "fk", "-", "k0", "\n", "for", "i", "in", "range", "(", "colorwheel", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "tmp", "=", "colorwheel", "[", ":", ",", "i", "]", "\n", "col0", "=", "tmp", "[", "k0", "]", "/", "255.0", "\n", "col1", "=", "tmp", "[", "k1", "]", "/", "255.0", "\n", "col", "=", "(", "1", "-", "f", ")", "*", "col0", "+", "f", "*", "col1", "\n", "idx", "=", "(", "rad", "<=", "1", ")", "\n", "col", "[", "idx", "]", "=", "1", "-", "rad", "[", "idx", "]", "*", "(", "1", "-", "col", "[", "idx", "]", ")", "\n", "col", "[", "~", "idx", "]", "=", "col", "[", "~", "idx", "]", "*", "0.75", "# out of range", "\n", "# Note the 2-i => BGR instead of RGB", "\n", "ch_idx", "=", "2", "-", "i", "if", "convert_to_bgr", "else", "i", "\n", "flow_image", "[", ":", ",", ":", ",", "ch_idx", "]", "=", "np", ".", "floor", "(", "255", "*", "col", ")", "\n", "", "return", "flow_image", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.utils.flow_viz.flow_to_image": [[82, 106], ["numpy.sqrt", "numpy.max", "flow_viz.flow_uv_to_colors", "numpy.clip", "numpy.square", "numpy.square"], "function", ["home.repos.pwc.inspect_result.jcyang98_inst.utils.flow_viz.flow_uv_to_colors"], ["", "def", "flow_to_image", "(", "flow_uv", ",", "clip_flow", "=", "None", ",", "convert_to_bgr", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Expects a two dimensional flow image of shape.\n\n    Args:\n        flow_uv (np.ndarray): Flow UV image of shape [H,W,2]\n        clip_flow (float, optional): Clip maximum of flow values. Defaults to None.\n        convert_to_bgr (bool, optional): Convert output image to BGR. Defaults to False.\n\n    Returns:\n        np.ndarray: Flow visualization image of shape [H,W,3]\n    \"\"\"", "\n", "assert", "flow_uv", ".", "ndim", "==", "3", ",", "'input flow must have three dimensions'", "\n", "assert", "flow_uv", ".", "shape", "[", "2", "]", "==", "2", ",", "'input flow must have shape [H,W,2]'", "\n", "if", "clip_flow", "is", "not", "None", ":", "\n", "        ", "flow_uv", "=", "np", ".", "clip", "(", "flow_uv", ",", "0", ",", "clip_flow", ")", "\n", "", "u", "=", "flow_uv", "[", ":", ",", ":", ",", "0", "]", "\n", "v", "=", "flow_uv", "[", ":", ",", ":", ",", "1", "]", "\n", "rad", "=", "np", ".", "sqrt", "(", "np", ".", "square", "(", "u", ")", "+", "np", ".", "square", "(", "v", ")", ")", "\n", "rad_max", "=", "np", ".", "max", "(", "rad", ")", "\n", "epsilon", "=", "1e-5", "\n", "u", "=", "u", "/", "(", "rad_max", "+", "epsilon", ")", "\n", "v", "=", "v", "/", "(", "rad_max", "+", "epsilon", ")", "\n", "return", "flow_uv_to_colors", "(", "u", ",", "v", ",", "convert_to_bgr", ")", "", "", ""]], "home.repos.pwc.inspect_result.jcyang98_inst.utils.augmentor.FlowAugmentor.__init__": [[16, 35], ["torchvision.transforms.ColorJitter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "crop_size", ",", "min_scale", "=", "-", "0.2", ",", "max_scale", "=", "0.5", ",", "do_flip", "=", "True", ")", ":", "\n", "\n", "# spatial augmentation params", "\n", "        ", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "min_scale", "=", "min_scale", "\n", "self", ".", "max_scale", "=", "max_scale", "\n", "self", ".", "spatial_aug_prob", "=", "0.8", "\n", "self", ".", "stretch_prob", "=", "0.8", "\n", "self", ".", "max_stretch", "=", "0.2", "\n", "\n", "# flip augmentation params", "\n", "self", ".", "do_flip", "=", "do_flip", "\n", "self", ".", "h_flip_prob", "=", "0.5", "\n", "self", ".", "v_flip_prob", "=", "0.1", "\n", "\n", "# photometric augmentation params", "\n", "self", ".", "photo_aug", "=", "ColorJitter", "(", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.4", ",", "hue", "=", "0.5", "/", "3.14", ")", "\n", "self", ".", "asymmetric_color_aug_prob", "=", "0.2", "\n", "self", ".", "eraser_aug_prob", "=", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.utils.augmentor.FlowAugmentor.color_transform": [[36, 51], ["numpy.random.rand", "numpy.array", "numpy.array", "numpy.concatenate", "numpy.array", "numpy.split", "augmentor.FlowAugmentor.photo_aug", "augmentor.FlowAugmentor.photo_aug", "augmentor.FlowAugmentor.photo_aug", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray"], "methods", ["None"], ["", "def", "color_transform", "(", "self", ",", "img1", ",", "img2", ")", ":", "\n", "        ", "\"\"\" Photometric augmentation \"\"\"", "\n", "\n", "# asymmetric", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "self", ".", "asymmetric_color_aug_prob", ":", "\n", "            ", "img1", "=", "np", ".", "array", "(", "self", ".", "photo_aug", "(", "Image", ".", "fromarray", "(", "img1", ")", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "img2", "=", "np", ".", "array", "(", "self", ".", "photo_aug", "(", "Image", ".", "fromarray", "(", "img2", ")", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "# symmetric", "\n", "", "else", ":", "\n", "            ", "image_stack", "=", "np", ".", "concatenate", "(", "[", "img1", ",", "img2", "]", ",", "axis", "=", "0", ")", "\n", "image_stack", "=", "np", ".", "array", "(", "self", ".", "photo_aug", "(", "Image", ".", "fromarray", "(", "image_stack", ")", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "img1", ",", "img2", "=", "np", ".", "split", "(", "image_stack", ",", "2", ",", "axis", "=", "0", ")", "\n", "\n", "", "return", "img1", ",", "img2", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.utils.augmentor.FlowAugmentor.eraser_transform": [[52, 66], ["numpy.random.rand", "numpy.mean", "range", "img2.reshape", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint"], "methods", ["None"], ["", "def", "eraser_transform", "(", "self", ",", "img1", ",", "img2", ",", "bounds", "=", "[", "50", ",", "100", "]", ")", ":", "\n", "        ", "\"\"\" Occlusion augmentation \"\"\"", "\n", "\n", "ht", ",", "wd", "=", "img1", ".", "shape", "[", ":", "2", "]", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "self", ".", "eraser_aug_prob", ":", "\n", "            ", "mean_color", "=", "np", ".", "mean", "(", "img2", ".", "reshape", "(", "-", "1", ",", "3", ")", ",", "axis", "=", "0", ")", "\n", "for", "_", "in", "range", "(", "np", ".", "random", ".", "randint", "(", "1", ",", "3", ")", ")", ":", "\n", "                ", "x0", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "wd", ")", "\n", "y0", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "ht", ")", "\n", "dx", "=", "np", ".", "random", ".", "randint", "(", "bounds", "[", "0", "]", ",", "bounds", "[", "1", "]", ")", "\n", "dy", "=", "np", ".", "random", ".", "randint", "(", "bounds", "[", "0", "]", ",", "bounds", "[", "1", "]", ")", "\n", "img2", "[", "y0", ":", "y0", "+", "dy", ",", "x0", ":", "x0", "+", "dx", ",", ":", "]", "=", "mean_color", "\n", "\n", "", "", "return", "img1", ",", "img2", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.utils.augmentor.FlowAugmentor.spatial_transform": [[67, 110], ["numpy.maximum", "numpy.clip", "numpy.clip", "numpy.random.randint", "numpy.random.randint", "numpy.random.uniform", "numpy.random.rand", "numpy.random.rand", "cv2.resize", "cv2.resize", "cv2.resize", "float", "float", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.rand", "numpy.random.rand"], "methods", ["None"], ["", "def", "spatial_transform", "(", "self", ",", "img1", ",", "img2", ",", "flow", ")", ":", "\n", "# randomly sample scale", "\n", "        ", "ht", ",", "wd", "=", "img1", ".", "shape", "[", ":", "2", "]", "\n", "min_scale", "=", "np", ".", "maximum", "(", "\n", "(", "self", ".", "crop_size", "[", "0", "]", "+", "8", ")", "/", "float", "(", "ht", ")", ",", "\n", "(", "self", ".", "crop_size", "[", "1", "]", "+", "8", ")", "/", "float", "(", "wd", ")", ")", "\n", "\n", "scale", "=", "2", "**", "np", ".", "random", ".", "uniform", "(", "self", ".", "min_scale", ",", "self", ".", "max_scale", ")", "\n", "scale_x", "=", "scale", "\n", "scale_y", "=", "scale", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "self", ".", "stretch_prob", ":", "\n", "            ", "scale_x", "*=", "2", "**", "np", ".", "random", ".", "uniform", "(", "-", "self", ".", "max_stretch", ",", "self", ".", "max_stretch", ")", "\n", "scale_y", "*=", "2", "**", "np", ".", "random", ".", "uniform", "(", "-", "self", ".", "max_stretch", ",", "self", ".", "max_stretch", ")", "\n", "\n", "", "scale_x", "=", "np", ".", "clip", "(", "scale_x", ",", "min_scale", ",", "None", ")", "\n", "scale_y", "=", "np", ".", "clip", "(", "scale_y", ",", "min_scale", ",", "None", ")", "\n", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "self", ".", "spatial_aug_prob", ":", "\n", "# rescale the images", "\n", "            ", "img1", "=", "cv2", ".", "resize", "(", "img1", ",", "None", ",", "fx", "=", "scale_x", ",", "fy", "=", "scale_y", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "img2", "=", "cv2", ".", "resize", "(", "img2", ",", "None", ",", "fx", "=", "scale_x", ",", "fy", "=", "scale_y", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "flow", "=", "cv2", ".", "resize", "(", "flow", ",", "None", ",", "fx", "=", "scale_x", ",", "fy", "=", "scale_y", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "flow", "=", "flow", "*", "[", "scale_x", ",", "scale_y", "]", "\n", "\n", "", "if", "self", ".", "do_flip", ":", "\n", "            ", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "self", ".", "h_flip_prob", ":", "# h-flip", "\n", "                ", "img1", "=", "img1", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "img2", "=", "img2", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "flow", "=", "flow", "[", ":", ",", ":", ":", "-", "1", "]", "*", "[", "-", "1.0", ",", "1.0", "]", "\n", "\n", "", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "self", ".", "v_flip_prob", ":", "# v-flip", "\n", "                ", "img1", "=", "img1", "[", ":", ":", "-", "1", ",", ":", "]", "\n", "img2", "=", "img2", "[", ":", ":", "-", "1", ",", ":", "]", "\n", "flow", "=", "flow", "[", ":", ":", "-", "1", ",", ":", "]", "*", "[", "1.0", ",", "-", "1.0", "]", "\n", "\n", "", "", "y0", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "img1", ".", "shape", "[", "0", "]", "-", "self", ".", "crop_size", "[", "0", "]", ")", "\n", "x0", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "img1", ".", "shape", "[", "1", "]", "-", "self", ".", "crop_size", "[", "1", "]", ")", "\n", "\n", "img1", "=", "img1", "[", "y0", ":", "y0", "+", "self", ".", "crop_size", "[", "0", "]", ",", "x0", ":", "x0", "+", "self", ".", "crop_size", "[", "1", "]", "]", "\n", "img2", "=", "img2", "[", "y0", ":", "y0", "+", "self", ".", "crop_size", "[", "0", "]", ",", "x0", ":", "x0", "+", "self", ".", "crop_size", "[", "1", "]", "]", "\n", "flow", "=", "flow", "[", "y0", ":", "y0", "+", "self", ".", "crop_size", "[", "0", "]", ",", "x0", ":", "x0", "+", "self", ".", "crop_size", "[", "1", "]", "]", "\n", "\n", "return", "img1", ",", "img2", ",", "flow", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.utils.augmentor.FlowAugmentor.__call__": [[111, 121], ["augmentor.FlowAugmentor.color_transform", "augmentor.FlowAugmentor.eraser_transform", "augmentor.FlowAugmentor.spatial_transform", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "numpy.ascontiguousarray"], "methods", ["home.repos.pwc.inspect_result.jcyang98_inst.utils.augmentor.SparseFlowAugmentor.color_transform", "home.repos.pwc.inspect_result.jcyang98_inst.utils.augmentor.SparseFlowAugmentor.eraser_transform", "home.repos.pwc.inspect_result.jcyang98_inst.utils.augmentor.SparseFlowAugmentor.spatial_transform"], ["", "def", "__call__", "(", "self", ",", "img1", ",", "img2", ",", "flow", ")", ":", "\n", "        ", "img1", ",", "img2", "=", "self", ".", "color_transform", "(", "img1", ",", "img2", ")", "\n", "img1", ",", "img2", "=", "self", ".", "eraser_transform", "(", "img1", ",", "img2", ")", "\n", "img1", ",", "img2", ",", "flow", "=", "self", ".", "spatial_transform", "(", "img1", ",", "img2", ",", "flow", ")", "\n", "\n", "img1", "=", "np", ".", "ascontiguousarray", "(", "img1", ")", "\n", "img2", "=", "np", ".", "ascontiguousarray", "(", "img2", ")", "\n", "flow", "=", "np", ".", "ascontiguousarray", "(", "flow", ")", "\n", "\n", "return", "img1", ",", "img2", ",", "flow", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.utils.augmentor.SparseFlowAugmentor.__init__": [[123, 141], ["torchvision.transforms.ColorJitter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "crop_size", ",", "min_scale", "=", "-", "0.2", ",", "max_scale", "=", "0.5", ",", "do_flip", "=", "False", ")", ":", "\n", "# spatial augmentation params", "\n", "        ", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "min_scale", "=", "min_scale", "\n", "self", ".", "max_scale", "=", "max_scale", "\n", "self", ".", "spatial_aug_prob", "=", "0.8", "\n", "self", ".", "stretch_prob", "=", "0.8", "\n", "self", ".", "max_stretch", "=", "0.2", "\n", "\n", "# flip augmentation params", "\n", "self", ".", "do_flip", "=", "do_flip", "\n", "self", ".", "h_flip_prob", "=", "0.5", "\n", "self", ".", "v_flip_prob", "=", "0.1", "\n", "\n", "# photometric augmentation params", "\n", "self", ".", "photo_aug", "=", "ColorJitter", "(", "brightness", "=", "0.3", ",", "contrast", "=", "0.3", ",", "saturation", "=", "0.3", ",", "hue", "=", "0.3", "/", "3.14", ")", "\n", "self", ".", "asymmetric_color_aug_prob", "=", "0.2", "\n", "self", ".", "eraser_aug_prob", "=", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.utils.augmentor.SparseFlowAugmentor.color_transform": [[142, 147], ["numpy.concatenate", "numpy.array", "numpy.split", "augmentor.SparseFlowAugmentor.photo_aug", "PIL.Image.fromarray"], "methods", ["None"], ["", "def", "color_transform", "(", "self", ",", "img1", ",", "img2", ")", ":", "\n", "        ", "image_stack", "=", "np", ".", "concatenate", "(", "[", "img1", ",", "img2", "]", ",", "axis", "=", "0", ")", "\n", "image_stack", "=", "np", ".", "array", "(", "self", ".", "photo_aug", "(", "Image", ".", "fromarray", "(", "image_stack", ")", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "img1", ",", "img2", "=", "np", ".", "split", "(", "image_stack", ",", "2", ",", "axis", "=", "0", ")", "\n", "return", "img1", ",", "img2", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.utils.augmentor.SparseFlowAugmentor.eraser_transform": [[148, 160], ["numpy.random.rand", "numpy.mean", "range", "img2.reshape", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint"], "methods", ["None"], ["", "def", "eraser_transform", "(", "self", ",", "img1", ",", "img2", ")", ":", "\n", "        ", "ht", ",", "wd", "=", "img1", ".", "shape", "[", ":", "2", "]", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "self", ".", "eraser_aug_prob", ":", "\n", "            ", "mean_color", "=", "np", ".", "mean", "(", "img2", ".", "reshape", "(", "-", "1", ",", "3", ")", ",", "axis", "=", "0", ")", "\n", "for", "_", "in", "range", "(", "np", ".", "random", ".", "randint", "(", "1", ",", "3", ")", ")", ":", "\n", "                ", "x0", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "wd", ")", "\n", "y0", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "ht", ")", "\n", "dx", "=", "np", ".", "random", ".", "randint", "(", "50", ",", "100", ")", "\n", "dy", "=", "np", ".", "random", ".", "randint", "(", "50", ",", "100", ")", "\n", "img2", "[", "y0", ":", "y0", "+", "dy", ",", "x0", ":", "x0", "+", "dx", ",", ":", "]", "=", "mean_color", "\n", "\n", "", "", "return", "img1", ",", "img2", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.utils.augmentor.SparseFlowAugmentor.resize_sparse_flow_map": [[161, 194], ["numpy.meshgrid", "numpy.stack", "coords.reshape().astype.reshape().astype.reshape().astype", "flow.reshape().astype.reshape().astype.reshape().astype", "valid.reshape().astype.reshape().astype.reshape().astype", "int", "int", "numpy.round().astype", "numpy.round().astype", "numpy.zeros", "numpy.zeros", "numpy.arange", "numpy.arange", "round", "round", "coords.reshape().astype.reshape().astype.reshape", "flow.reshape().astype.reshape().astype.reshape", "valid.reshape().astype.reshape().astype.reshape", "numpy.round", "numpy.round"], "methods", ["None"], ["", "def", "resize_sparse_flow_map", "(", "self", ",", "flow", ",", "valid", ",", "fx", "=", "1.0", ",", "fy", "=", "1.0", ")", ":", "\n", "        ", "ht", ",", "wd", "=", "flow", ".", "shape", "[", ":", "2", "]", "\n", "coords", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "wd", ")", ",", "np", ".", "arange", "(", "ht", ")", ")", "\n", "coords", "=", "np", ".", "stack", "(", "coords", ",", "axis", "=", "-", "1", ")", "\n", "\n", "coords", "=", "coords", ".", "reshape", "(", "-", "1", ",", "2", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "flow", "=", "flow", ".", "reshape", "(", "-", "1", ",", "2", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "valid", "=", "valid", ".", "reshape", "(", "-", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "coords0", "=", "coords", "[", "valid", ">=", "1", "]", "\n", "flow0", "=", "flow", "[", "valid", ">=", "1", "]", "\n", "\n", "ht1", "=", "int", "(", "round", "(", "ht", "*", "fy", ")", ")", "\n", "wd1", "=", "int", "(", "round", "(", "wd", "*", "fx", ")", ")", "\n", "\n", "coords1", "=", "coords0", "*", "[", "fx", ",", "fy", "]", "\n", "flow1", "=", "flow0", "*", "[", "fx", ",", "fy", "]", "\n", "\n", "xx", "=", "np", ".", "round", "(", "coords1", "[", ":", ",", "0", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "yy", "=", "np", ".", "round", "(", "coords1", "[", ":", ",", "1", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "v", "=", "(", "xx", ">", "0", ")", "&", "(", "xx", "<", "wd1", ")", "&", "(", "yy", ">", "0", ")", "&", "(", "yy", "<", "ht1", ")", "\n", "xx", "=", "xx", "[", "v", "]", "\n", "yy", "=", "yy", "[", "v", "]", "\n", "flow1", "=", "flow1", "[", "v", "]", "\n", "\n", "flow_img", "=", "np", ".", "zeros", "(", "[", "ht1", ",", "wd1", ",", "2", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "valid_img", "=", "np", ".", "zeros", "(", "[", "ht1", ",", "wd1", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "flow_img", "[", "yy", ",", "xx", "]", "=", "flow1", "\n", "valid_img", "[", "yy", ",", "xx", "]", "=", "1", "\n", "\n", "return", "flow_img", ",", "valid_img", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.utils.augmentor.SparseFlowAugmentor.spatial_transform": [[195, 234], ["numpy.maximum", "numpy.clip", "numpy.clip", "numpy.random.randint", "numpy.random.randint", "numpy.clip", "numpy.clip", "numpy.random.uniform", "numpy.random.rand", "cv2.resize", "cv2.resize", "augmentor.SparseFlowAugmentor.resize_sparse_flow_map", "float", "float", "numpy.random.rand"], "methods", ["home.repos.pwc.inspect_result.jcyang98_inst.utils.augmentor.SparseFlowAugmentor.resize_sparse_flow_map"], ["", "def", "spatial_transform", "(", "self", ",", "img1", ",", "img2", ",", "flow", ",", "valid", ")", ":", "\n", "# randomly sample scale", "\n", "\n", "        ", "ht", ",", "wd", "=", "img1", ".", "shape", "[", ":", "2", "]", "\n", "min_scale", "=", "np", ".", "maximum", "(", "\n", "(", "self", ".", "crop_size", "[", "0", "]", "+", "1", ")", "/", "float", "(", "ht", ")", ",", "\n", "(", "self", ".", "crop_size", "[", "1", "]", "+", "1", ")", "/", "float", "(", "wd", ")", ")", "\n", "\n", "scale", "=", "2", "**", "np", ".", "random", ".", "uniform", "(", "self", ".", "min_scale", ",", "self", ".", "max_scale", ")", "\n", "scale_x", "=", "np", ".", "clip", "(", "scale", ",", "min_scale", ",", "None", ")", "\n", "scale_y", "=", "np", ".", "clip", "(", "scale", ",", "min_scale", ",", "None", ")", "\n", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "self", ".", "spatial_aug_prob", ":", "\n", "# rescale the images", "\n", "            ", "img1", "=", "cv2", ".", "resize", "(", "img1", ",", "None", ",", "fx", "=", "scale_x", ",", "fy", "=", "scale_y", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "img2", "=", "cv2", ".", "resize", "(", "img2", ",", "None", ",", "fx", "=", "scale_x", ",", "fy", "=", "scale_y", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "flow", ",", "valid", "=", "self", ".", "resize_sparse_flow_map", "(", "flow", ",", "valid", ",", "fx", "=", "scale_x", ",", "fy", "=", "scale_y", ")", "\n", "\n", "", "if", "self", ".", "do_flip", ":", "\n", "            ", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "0.5", ":", "# h-flip", "\n", "                ", "img1", "=", "img1", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "img2", "=", "img2", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "flow", "=", "flow", "[", ":", ",", ":", ":", "-", "1", "]", "*", "[", "-", "1.0", ",", "1.0", "]", "\n", "valid", "=", "valid", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "\n", "", "", "margin_y", "=", "20", "\n", "margin_x", "=", "50", "\n", "\n", "y0", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "img1", ".", "shape", "[", "0", "]", "-", "self", ".", "crop_size", "[", "0", "]", "+", "margin_y", ")", "\n", "x0", "=", "np", ".", "random", ".", "randint", "(", "-", "margin_x", ",", "img1", ".", "shape", "[", "1", "]", "-", "self", ".", "crop_size", "[", "1", "]", "+", "margin_x", ")", "\n", "\n", "y0", "=", "np", ".", "clip", "(", "y0", ",", "0", ",", "img1", ".", "shape", "[", "0", "]", "-", "self", ".", "crop_size", "[", "0", "]", ")", "\n", "x0", "=", "np", ".", "clip", "(", "x0", ",", "0", ",", "img1", ".", "shape", "[", "1", "]", "-", "self", ".", "crop_size", "[", "1", "]", ")", "\n", "\n", "img1", "=", "img1", "[", "y0", ":", "y0", "+", "self", ".", "crop_size", "[", "0", "]", ",", "x0", ":", "x0", "+", "self", ".", "crop_size", "[", "1", "]", "]", "\n", "img2", "=", "img2", "[", "y0", ":", "y0", "+", "self", ".", "crop_size", "[", "0", "]", ",", "x0", ":", "x0", "+", "self", ".", "crop_size", "[", "1", "]", "]", "\n", "flow", "=", "flow", "[", "y0", ":", "y0", "+", "self", ".", "crop_size", "[", "0", "]", ",", "x0", ":", "x0", "+", "self", ".", "crop_size", "[", "1", "]", "]", "\n", "valid", "=", "valid", "[", "y0", ":", "y0", "+", "self", ".", "crop_size", "[", "0", "]", ",", "x0", ":", "x0", "+", "self", ".", "crop_size", "[", "1", "]", "]", "\n", "return", "img1", ",", "img2", ",", "flow", ",", "valid", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.utils.augmentor.SparseFlowAugmentor.__call__": [[236, 247], ["augmentor.SparseFlowAugmentor.color_transform", "augmentor.SparseFlowAugmentor.eraser_transform", "augmentor.SparseFlowAugmentor.spatial_transform", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "numpy.ascontiguousarray"], "methods", ["home.repos.pwc.inspect_result.jcyang98_inst.utils.augmentor.SparseFlowAugmentor.color_transform", "home.repos.pwc.inspect_result.jcyang98_inst.utils.augmentor.SparseFlowAugmentor.eraser_transform", "home.repos.pwc.inspect_result.jcyang98_inst.utils.augmentor.SparseFlowAugmentor.spatial_transform"], ["", "def", "__call__", "(", "self", ",", "img1", ",", "img2", ",", "flow", ",", "valid", ")", ":", "\n", "        ", "img1", ",", "img2", "=", "self", ".", "color_transform", "(", "img1", ",", "img2", ")", "\n", "img1", ",", "img2", "=", "self", ".", "eraser_transform", "(", "img1", ",", "img2", ")", "\n", "img1", ",", "img2", ",", "flow", ",", "valid", "=", "self", ".", "spatial_transform", "(", "img1", ",", "img2", ",", "flow", ",", "valid", ")", "\n", "\n", "img1", "=", "np", ".", "ascontiguousarray", "(", "img1", ")", "\n", "img2", "=", "np", ".", "ascontiguousarray", "(", "img2", ")", "\n", "flow", "=", "np", ".", "ascontiguousarray", "(", "flow", ")", "\n", "valid", "=", "np", ".", "ascontiguousarray", "(", "valid", ")", "\n", "\n", "return", "img1", ",", "img2", ",", "flow", ",", "valid", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jcyang98_inst.utils.utils.InputPadder.__init__": [[9, 17], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dims", ",", "mode", "=", "'sintel'", ")", ":", "\n", "        ", "self", ".", "ht", ",", "self", ".", "wd", "=", "dims", "[", "-", "2", ":", "]", "\n", "pad_ht", "=", "(", "(", "(", "self", ".", "ht", "//", "8", ")", "+", "1", ")", "*", "8", "-", "self", ".", "ht", ")", "%", "8", "\n", "pad_wd", "=", "(", "(", "(", "self", ".", "wd", "//", "8", ")", "+", "1", ")", "*", "8", "-", "self", ".", "wd", ")", "%", "8", "\n", "if", "mode", "==", "'sintel'", ":", "\n", "            ", "self", ".", "_pad", "=", "[", "pad_wd", "//", "2", ",", "pad_wd", "-", "pad_wd", "//", "2", ",", "pad_ht", "//", "2", ",", "pad_ht", "-", "pad_ht", "//", "2", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "_pad", "=", "[", "pad_wd", "//", "2", ",", "pad_wd", "-", "pad_wd", "//", "2", ",", "0", ",", "pad_ht", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.utils.utils.InputPadder.pad": [[18, 20], ["torch.pad", "torch.pad"], "methods", ["home.repos.pwc.inspect_result.jcyang98_inst.utils.utils.InputPadder.pad", "home.repos.pwc.inspect_result.jcyang98_inst.utils.utils.InputPadder.pad"], ["", "", "def", "pad", "(", "self", ",", "*", "inputs", ")", ":", "\n", "        ", "return", "[", "F", ".", "pad", "(", "x", ",", "self", ".", "_pad", ",", "mode", "=", "'replicate'", ")", "for", "x", "in", "inputs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.utils.utils.InputPadder.unpad": [[21, 25], ["None"], "methods", ["None"], ["", "def", "unpad", "(", "self", ",", "x", ")", ":", "\n", "        ", "ht", ",", "wd", "=", "x", ".", "shape", "[", "-", "2", ":", "]", "\n", "c", "=", "[", "self", ".", "_pad", "[", "2", "]", ",", "ht", "-", "self", ".", "_pad", "[", "3", "]", ",", "self", ".", "_pad", "[", "0", "]", ",", "wd", "-", "self", ".", "_pad", "[", "1", "]", "]", "\n", "return", "x", "[", "...", ",", "c", "[", "0", "]", ":", "c", "[", "1", "]", ",", "c", "[", "2", "]", ":", "c", "[", "3", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.utils.utils.forward_interpolate": [[26, 55], ["np.stack.detach().cpu().numpy", "numpy.meshgrid", "x1.reshape.reshape", "y1.reshape.reshape", "dx.reshape.reshape", "dy.reshape.reshape", "scipy.interpolate.griddata", "scipy.interpolate.griddata", "numpy.stack", "torch.from_numpy().float", "torch.from_numpy().float", "numpy.arange", "numpy.arange", "np.stack.detach().cpu", "torch.from_numpy", "torch.from_numpy", "np.stack.detach"], "function", ["None"], ["", "", "def", "forward_interpolate", "(", "flow", ")", ":", "\n", "    ", "flow", "=", "flow", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "dx", ",", "dy", "=", "flow", "[", "0", "]", ",", "flow", "[", "1", "]", "\n", "\n", "ht", ",", "wd", "=", "dx", ".", "shape", "\n", "x0", ",", "y0", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "wd", ")", ",", "np", ".", "arange", "(", "ht", ")", ")", "\n", "\n", "x1", "=", "x0", "+", "dx", "\n", "y1", "=", "y0", "+", "dy", "\n", "\n", "x1", "=", "x1", ".", "reshape", "(", "-", "1", ")", "\n", "y1", "=", "y1", ".", "reshape", "(", "-", "1", ")", "\n", "dx", "=", "dx", ".", "reshape", "(", "-", "1", ")", "\n", "dy", "=", "dy", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "valid", "=", "(", "x1", ">", "0", ")", "&", "(", "x1", "<", "wd", ")", "&", "(", "y1", ">", "0", ")", "&", "(", "y1", "<", "ht", ")", "\n", "x1", "=", "x1", "[", "valid", "]", "\n", "y1", "=", "y1", "[", "valid", "]", "\n", "dx", "=", "dx", "[", "valid", "]", "\n", "dy", "=", "dy", "[", "valid", "]", "\n", "\n", "flow_x", "=", "interpolate", ".", "griddata", "(", "\n", "(", "x1", ",", "y1", ")", ",", "dx", ",", "(", "x0", ",", "y0", ")", ",", "method", "=", "'nearest'", ",", "fill_value", "=", "0", ")", "\n", "\n", "flow_y", "=", "interpolate", ".", "griddata", "(", "\n", "(", "x1", ",", "y1", ")", ",", "dy", ",", "(", "x0", ",", "y0", ")", ",", "method", "=", "'nearest'", ",", "fill_value", "=", "0", ")", "\n", "\n", "flow", "=", "np", ".", "stack", "(", "[", "flow_x", ",", "flow_y", "]", ",", "axis", "=", "0", ")", "\n", "return", "torch", ".", "from_numpy", "(", "flow", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.utils.utils.bilinear_sampler": [[57, 73], ["coords.split", "torch.cat", "torch.cat", "torch.grid_sample", "mask.float"], "function", ["None"], ["", "def", "bilinear_sampler", "(", "img", ",", "coords", ",", "mode", "=", "'bilinear'", ",", "mask", "=", "False", ")", ":", "\n", "    ", "\"\"\" Wrapper for grid_sample, uses pixel coordinates \"\"\"", "\n", "H", ",", "W", "=", "img", ".", "shape", "[", "-", "2", ":", "]", "\n", "xgrid", ",", "ygrid", "=", "coords", ".", "split", "(", "[", "1", ",", "1", "]", ",", "dim", "=", "-", "1", ")", "\n", "xgrid", "=", "2", "*", "xgrid", "/", "(", "W", "-", "1", ")", "-", "1", "\n", "ygrid", "=", "2", "*", "ygrid", "/", "(", "H", "-", "1", ")", "-", "1", "\n", "\n", "grid", "=", "torch", ".", "cat", "(", "[", "xgrid", ",", "ygrid", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "img", "=", "F", ".", "grid_sample", "(", "img", ",", "grid", ",", "align_corners", "=", "True", ")", "\n", "\n", "if", "mask", ":", "\n", "        ", "mask", "=", "(", "xgrid", ">", "-", "1", ")", "&", "(", "ygrid", ">", "-", "1", ")", "&", "(", "xgrid", "<", "1", ")", "&", "(", "ygrid", "<", "1", ")", "\n", "return", "img", ",", "mask", ".", "float", "(", ")", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.utils.utils.coords_grid": [[75, 79], ["torch.meshgrid", "torch.meshgrid", "torch.stack().float", "torch.stack().float", "coords[].repeat", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.stack", "torch.stack"], "function", ["None"], ["", "def", "coords_grid", "(", "batch", ",", "ht", ",", "wd", ")", ":", "\n", "    ", "coords", "=", "torch", ".", "meshgrid", "(", "torch", ".", "arange", "(", "ht", ")", ",", "torch", ".", "arange", "(", "wd", ")", ")", "\n", "coords", "=", "torch", ".", "stack", "(", "coords", "[", ":", ":", "-", "1", "]", ",", "dim", "=", "0", ")", ".", "float", "(", ")", "\n", "return", "coords", "[", "None", "]", ".", "repeat", "(", "batch", ",", "1", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcyang98_inst.utils.utils.upflow8": [[81, 84], ["torch.interpolate"], "function", ["None"], ["", "def", "upflow8", "(", "flow", ",", "mode", "=", "'bilinear'", ")", ":", "\n", "    ", "new_size", "=", "(", "8", "*", "flow", ".", "shape", "[", "2", "]", ",", "8", "*", "flow", ".", "shape", "[", "3", "]", ")", "\n", "return", "8", "*", "F", ".", "interpolate", "(", "flow", ",", "size", "=", "new_size", ",", "mode", "=", "mode", ",", "align_corners", "=", "True", ")", "\n", "", ""]]}