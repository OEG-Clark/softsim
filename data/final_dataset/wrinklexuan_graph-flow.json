{"home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.dataloader_semi.GastricCancerDataset_Semi.__init__": [[20, 32], ["open().readlines", "open().readlines", "dataloader_semi.GastricCancerDataset_Semi.image_list.append", "dataloader_semi.GastricCancerDataset_Semi.label_list.append", "open", "open", "sample.strip", "sample.strip", "os.path.join", "os.path.join", "str", "str"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "image_path", "=", "\"dataset/GastricCancer/resize\"", ",", "split", "=", "\"train\"", ",", "supervised", "=", "True", ",", "percent_labeled", "=", "0.2", ",", "transform", "=", "None", ")", ":", "\n", "       ", "self", ".", "image_path", "=", "image_path", "\n", "self", ".", "transform", "=", "transform", "\n", "if", "supervised", ":", "\n", "            ", "self", ".", "sample_list", "=", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "image_path", "+", "\"/list\"", ",", "split", "+", "\"_labeled_\"", "+", "str", "(", "percent_labeled", ")", "+", "'.txt'", ")", ")", ".", "readlines", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "sample_list", "=", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "image_path", "+", "\"/list\"", ",", "split", "+", "\"_unlabeled_\"", "+", "str", "(", "percent_labeled", ")", "+", "'.txt'", ")", ")", ".", "readlines", "(", ")", "\n", "", "self", ".", "image_list", "=", "[", "]", "\n", "self", ".", "label_list", "=", "[", "]", "\n", "for", "sample", "in", "self", ".", "sample_list", ":", "\n", "           ", "self", ".", "image_list", ".", "append", "(", "self", ".", "image_path", "+", "\"/train/image/\"", "+", "sample", ".", "strip", "(", "\"\\n\"", ")", ")", "\n", "self", ".", "label_list", ".", "append", "(", "self", ".", "image_path", "+", "\"/train/label/\"", "+", "sample", ".", "strip", "(", "\"\\n\"", ")", ")", "\n", "", "", "def", "__len__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.dataloader_semi.GastricCancerDataset_Semi.__len__": [[32, 34], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "image_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.dataloader_semi.GastricCancerDataset_Semi.__getitem__": [[35, 57], ["PIL.Image.open", "PIL.Image.open", "label.convert.convert.convert", "[].split", "dataloader_semi.GastricCancerDataset_Semi.transform", "dataloader_semi.GastricCancerDataset_Semi.image_list[].split"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "sample_path", "=", "self", ".", "image_list", "[", "index", "]", "\n", "sample", "=", "Image", ".", "open", "(", "sample_path", ")", "\n", "label_path", "=", "self", ".", "label_list", "[", "index", "]", "\n", "sample_name", "=", "self", ".", "image_list", "[", "index", "]", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "\"\"\"\n        print(self.image_list[index].split(\".\")[0]+\"_1stHO.png\")\n        print(label_path)\n        assert self.image_list[index].split(\".\")[0]+\"_1stHO.png\" == label_path\n        \"\"\"", "\n", "#print(sample_name)", "\n", "label", "=", "Image", ".", "open", "(", "label_path", ")", "\n", "#print(\"convert \u524d:\", np.array(label).shape)", "\n", "label", "=", "label", ".", "convert", "(", "\"L\"", ")", "\n", "#print(\"convert \u540e:\",np.array(label).shape)", "\n", "Sample", "=", "{", "\"name\"", ":", "sample_name", ",", "\n", "\"image\"", ":", "sample", ",", "\n", "\"label\"", ":", "label", "}", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "Sample", "=", "self", ".", "transform", "(", "Sample", ")", "\n", "\n", "", "return", "Sample", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.dataloader_semi.Synapsedataset_Semi.__init__": [[60, 70], ["open().readlines", "open().readlines", "open", "open", "os.path.join", "os.path.join", "str", "str"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "base_dir", ",", "list_dir", ",", "split", ",", "supervised", "=", "True", ",", "num_case_labled", "=", "2", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "transform", "=", "transform", "# using transform in torch!", "\n", "self", ".", "split", "=", "split", "\n", "if", "supervised", ":", "\n", "\n", "            ", "self", ".", "sample_list", "=", "open", "(", "os", ".", "path", ".", "join", "(", "list_dir", ",", "self", ".", "split", "+", "\"_labeled_\"", "+", "str", "(", "num_case_labled", ")", "+", "'.txt'", ")", ")", ".", "readlines", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "sample_list", "=", "open", "(", "os", ".", "path", ".", "join", "(", "list_dir", ",", "self", ".", "split", "+", "\"_unlabeled_\"", "+", "str", "(", "num_case_labled", ")", "+", "'.txt'", ")", ")", ".", "readlines", "(", ")", "\n", "\n", "", "self", ".", "data_dir", "=", "base_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.dataloader_semi.Synapsedataset_Semi.__len__": [[71, 73], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sample_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.dataloader_semi.Synapsedataset_Semi.__getitem__": [[74, 92], ["dataloader_semi.Synapsedataset_Semi.sample_list[].strip", "dataloader_semi.Synapsedataset_Semi.sample_list[].strip", "os.path.join", "numpy.load", "dataloader_semi.Synapsedataset_Semi.sample_list[].strip", "h5py.File", "dataloader_semi.Synapsedataset_Semi.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "split", "==", "\"train\"", ":", "\n", "            ", "slice_name", "=", "self", ".", "sample_list", "[", "idx", "]", ".", "strip", "(", "'\\n'", ")", "\n", "data_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", "+", "\"/train_npz\"", ",", "slice_name", "+", "'.npz'", ")", "\n", "data", "=", "np", ".", "load", "(", "data_path", ")", "\n", "image", ",", "label", "=", "data", "[", "'image'", "]", ",", "data", "[", "'label'", "]", "\n", "", "else", ":", "\n", "            ", "vol_name", "=", "self", ".", "sample_list", "[", "idx", "]", ".", "strip", "(", "'\\n'", ")", "\n", "filepath", "=", "self", ".", "data_dir", "+", "\"/test_vol_h5\"", "+", "\"/{}.npy.h5\"", ".", "format", "(", "vol_name", ")", "\n", "data", "=", "h5py", ".", "File", "(", "filepath", ")", "\n", "image", ",", "label", "=", "data", "[", "'image'", "]", "[", ":", "]", ",", "data", "[", "'label'", "]", "[", ":", "]", "\n", "\n", "", "sample", "=", "{", "'image'", ":", "image", ",", "'label'", ":", "label", "}", "\n", "\n", "sample", "[", "'name'", "]", "=", "self", ".", "sample_list", "[", "idx", "]", ".", "strip", "(", "'\\n'", ")", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.dataloader_semi.RandomResize.__call__": [[95, 111], ["image.resize.resize.resize", "label.resize.resize.resize", "int", "int", "random.random"], "methods", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.utils.crop_merge.resize", "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.utils.crop_merge.resize"], ["    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "name", ",", "image", ",", "label", "=", "sample", "[", "\"name\"", "]", ",", "sample", "[", "\"image\"", "]", ",", "sample", "[", "\"label\"", "]", "\n", "h", ",", "w", "=", "image", ".", "size", "[", ":", "2", "]", "\n", "image_interpolation", "=", "Image", ".", "BILINEAR", "\n", "label_interpolation", "=", "Image", ".", "NEAREST", "\n", "\n", "a", "=", "0.5", "+", "random", ".", "random", "(", ")", "*", "1.5", "\n", "\n", "output_size", "=", "(", "int", "(", "h", "*", "a", ")", ",", "int", "(", "w", "*", "a", ")", ")", "\n", "\n", "image", "=", "image", ".", "resize", "(", "output_size", ",", "image_interpolation", ")", "\n", "label", "=", "label", ".", "resize", "(", "output_size", ",", "label_interpolation", ")", "\n", "\n", "return", "{", "\"name\"", ":", "name", ",", "\n", "\"image\"", ":", "image", ",", "\n", "\"label\"", ":", "label", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.dataloader_semi.Resize.__init__": [[114, 121], ["isinstance", "isinstance", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "output_size", ")", ":", "\n", "        ", "assert", "isinstance", "(", "output_size", ",", "(", "int", ",", "tuple", ")", ")", "\n", "if", "isinstance", "(", "output_size", ",", "int", ")", ":", "\n", "            ", "self", ".", "output_size", "=", "(", "output_size", ",", "output_size", ")", "\n", "", "else", ":", "\n", "            ", "assert", "len", "(", "output_size", ")", "==", "2", "\n", "self", ".", "output_size", "=", "output_size", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.dataloader_semi.Resize.__call__": [[122, 133], ["image.resize.resize.resize", "label.resize.resize.resize"], "methods", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.utils.crop_merge.resize", "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.utils.crop_merge.resize"], ["", "", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "name", ",", "image", ",", "label", "=", "sample", "[", "\"name\"", "]", ",", "sample", "[", "\"image\"", "]", ",", "sample", "[", "\"label\"", "]", "\n", "h", ",", "w", "=", "image", ".", "size", "[", ":", "2", "]", "\n", "image_interpolation", "=", "Image", ".", "BILINEAR", "\n", "label_interpolation", "=", "Image", ".", "NEAREST", "\n", "image", "=", "image", ".", "resize", "(", "self", ".", "output_size", ",", "image_interpolation", ")", "\n", "label", "=", "label", ".", "resize", "(", "self", ".", "output_size", ",", "label_interpolation", ")", "\n", "\n", "return", "{", "\"name\"", ":", "name", ",", "\n", "\"image\"", ":", "image", ",", "\n", "\"label\"", ":", "label", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.dataloader_semi.CenterCrop.__init__": [[137, 144], ["isinstance", "isinstance", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "output_size", ")", ":", "\n", "        ", "assert", "isinstance", "(", "output_size", ",", "(", "int", ",", "tuple", ")", ")", "\n", "if", "isinstance", "(", "output_size", ",", "int", ")", ":", "\n", "            ", "self", ".", "output_size", "=", "(", "output_size", ",", "output_size", ")", "\n", "", "else", ":", "\n", "            ", "assert", "len", "(", "output_size", ")", "==", "2", "\n", "self", ".", "output_size", "=", "output_size", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.dataloader_semi.CenterCrop.__call__": [[145, 158], ["int", "int", "image.crop.crop.crop", "label.crop.crop.crop", "round", "round"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "name", ",", "image", ",", "label", "=", "sample", "[", "\"name\"", "]", ",", "sample", "[", "\"image\"", "]", ",", "sample", "[", "\"label\"", "]", "\n", "image_h", ",", "image_w", "=", "image", ".", "size", "[", ":", "2", "]", "\n", "crop_h", ",", "crop_w", "=", "self", ".", "output_size", "\n", "crop_top", "=", "int", "(", "round", "(", "(", "image_h", "-", "crop_h", ")", "/", "2.", ")", ")", "\n", "crop_left", "=", "int", "(", "round", "(", "(", "image_w", "-", "crop_w", ")", "/", "2.", ")", ")", "\n", "\n", "image", "=", "image", ".", "crop", "(", "(", "crop_left", ",", "crop_top", ",", "crop_left", "+", "crop_w", ",", "crop_top", "+", "crop_h", ")", ")", "\n", "label", "=", "label", ".", "crop", "(", "(", "crop_left", ",", "crop_top", ",", "crop_left", "+", "crop_w", ",", "crop_top", "+", "crop_h", ")", ")", "\n", "\n", "return", "{", "\"name\"", ":", "name", ",", "\n", "\"image\"", ":", "image", ",", "\n", "\"label\"", ":", "label", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.dataloader_semi.RandomCrop.__init__": [[161, 168], ["isinstance", "isinstance", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "output_size", ")", ":", "\n", "        ", "assert", "isinstance", "(", "output_size", ",", "(", "int", ",", "tuple", ")", ")", "\n", "if", "isinstance", "(", "output_size", ",", "int", ")", ":", "\n", "            ", "self", ".", "output_size", "=", "(", "output_size", ",", "output_size", ")", "\n", "", "else", ":", "\n", "            ", "assert", "len", "(", "output_size", ")", "==", "2", "\n", "self", ".", "output_size", "=", "output_size", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.dataloader_semi.RandomCrop.__call__": [[169, 183], ["numpy.random.randint", "image.crop", "numpy.random.randint"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "name", ",", "image", ",", "label", "=", "sample", "[", "\"name\"", "]", ",", "sample", "[", "\"image\"", "]", ",", "sample", "[", "\"label\"", "]", "\n", "h", ",", "w", "=", "image", ".", "size", "[", ":", "2", "]", "\n", "new_h", ",", "new_w", "=", "self", ".", "output_size", "\n", "top", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "h", "-", "new_h", ")", "\n", "if", "w", "-", "new_w", "==", "0", ":", "\n", "            ", "left", "=", "0", "\n", "", "else", ":", "\n", "            ", "left", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "w", "-", "new_w", ")", "\n", "", "image", ".", "crop", "(", "(", "left", ",", "top", ",", "left", "+", "new_w", ",", "top", "+", "new_h", ")", ")", "\n", "\n", "return", "{", "\"name\"", ":", "name", ",", "\n", "\"image\"", ":", "image", ",", "\n", "\"label\"", ":", "label", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.dataloader_semi.RandomHorizontalFlip.__init__": [[185, 187], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "p", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.dataloader_semi.RandomHorizontalFlip.__call__": [[188, 197], ["random.random", "image.transpose.transpose.transpose", "label.transpose.transpose.transpose"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "name", ",", "image", ",", "label", "=", "sample", "[", "\"name\"", "]", ",", "sample", "[", "\"image\"", "]", ",", "sample", "[", "\"label\"", "]", "\n", "\n", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p", ":", "\n", "            ", "image", "=", "image", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "label", "=", "label", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "return", "{", "\"name\"", ":", "name", ",", "\n", "\"image\"", ":", "image", ",", "\n", "\"label\"", ":", "label", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.dataloader_semi.RandomVerticalFlip.__init__": [[201, 203], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "p", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.dataloader_semi.RandomVerticalFlip.__call__": [[204, 213], ["random.random", "image.transpose.transpose.transpose", "label.transpose.transpose.transpose"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "name", ",", "image", ",", "label", "=", "sample", "[", "'name'", "]", ",", "sample", "[", "'image'", "]", ",", "sample", "[", "'label'", "]", "\n", "\n", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p", ":", "\n", "            ", "image", "=", "image", ".", "transpose", "(", "Image", ".", "FLIP_TOP_BOTTOM", ")", "\n", "label", "=", "label", ".", "transpose", "(", "Image", ".", "FLIP_TOP_BOTTOM", ")", "\n", "", "return", "{", "'name'", ":", "name", ",", "\n", "'image'", ":", "image", ",", "\n", "'label'", ":", "label", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.dataloader_semi.ToTensor.__call__": [[216, 228], ["torch.from_numpy().float().div.convert", "numpy.array", "numpy.array", "torch.from_numpy().float().div.transpose", "torch.from_numpy().float().div", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "name", ",", "image", ",", "label", "=", "sample", "[", "'name'", "]", ",", "sample", "[", "'image'", "]", ",", "sample", "[", "'label'", "]", "\n", "image", "=", "image", ".", "convert", "(", "\"L\"", ")", "\n", "image", "=", "np", ".", "array", "(", "image", ")", "\n", "label", "=", "np", ".", "array", "(", "label", ")", "\n", "image", "=", "image", "[", ":", ",", ":", ",", "None", "]", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "image", "=", "torch", ".", "from_numpy", "(", "image", ")", ".", "float", "(", ")", ".", "div", "(", "255", ")", "\n", "label", "=", "torch", ".", "from_numpy", "(", "label", ")", ".", "float", "(", ")", "\n", "return", "{", "'name'", ":", "name", ",", "\n", "'image'", ":", "image", ",", "\n", "'label'", ":", "label", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.dataloader_semi.Normalize.__init__": [[232, 235], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.dataloader_semi.Normalize.__call__": [[236, 245], ["image.clone.clone.clone", "torch.as_tensor", "torch.as_tensor", "image.clone.clone.sub_().div_", "image.clone.clone.sub_"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "name", ",", "image", ",", "label", "=", "sample", "[", "'name'", "]", ",", "sample", "[", "'image'", "]", ",", "sample", "[", "'label'", "]", "\n", "image", "=", "image", ".", "clone", "(", ")", "\n", "mean", "=", "torch", ".", "as_tensor", "(", "self", ".", "mean", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "image", ".", "device", ")", "\n", "std", "=", "torch", ".", "as_tensor", "(", "self", ".", "std", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "image", ".", "device", ")", "\n", "image", ".", "sub_", "(", "mean", "[", ":", ",", "None", ",", "None", "]", ")", ".", "div_", "(", "std", "[", ":", ",", "None", ",", "None", "]", ")", "\n", "return", "{", "'name'", ":", "name", ",", "\n", "'image'", ":", "image", ",", "\n", "'label'", ":", "label", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.dataloader_semi.RandomGenerator.__init__": [[264, 266], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "output_size", ")", ":", "\n", "        ", "self", ".", "output_size", "=", "output_size", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.dataloader_semi.RandomGenerator.__call__": [[267, 283], ["torch.from_numpy().unsqueeze", "torch.from_numpy", "random.random", "dataloader_semi.random_rot_flip", "scipy.ndimage.interpolation.zoom", "scipy.ndimage.interpolation.zoom", "scipy.ndimage.interpolation.zoom.astype", "scipy.ndimage.interpolation.zoom.long", "random.random", "dataloader_semi.random_rotate", "torch.from_numpy", "scipy.ndimage.interpolation.zoom.astype"], "methods", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.dataloader.random_rot_flip", "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.dataloader.random_rotate"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "image", ",", "label", ",", "name", "=", "sample", "[", "'image'", "]", ",", "sample", "[", "'label'", "]", ",", "sample", "[", "'name'", "]", "\n", "\n", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "            ", "image", ",", "label", "=", "random_rot_flip", "(", "image", ",", "label", ")", "\n", "", "elif", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "            ", "image", ",", "label", "=", "random_rotate", "(", "image", ",", "label", ")", "\n", "", "x", ",", "y", "=", "image", ".", "shape", "\n", "if", "x", "!=", "self", ".", "output_size", "[", "0", "]", "or", "y", "!=", "self", ".", "output_size", "[", "1", "]", ":", "\n", "\n", "            ", "image", "=", "zoom", "(", "image", ",", "(", "self", ".", "output_size", "[", "0", "]", "/", "x", ",", "self", ".", "output_size", "[", "1", "]", "/", "y", ")", ",", "order", "=", "3", ")", "# why not 3?", "\n", "label", "=", "zoom", "(", "label", ",", "(", "self", ".", "output_size", "[", "0", "]", "/", "x", ",", "self", ".", "output_size", "[", "1", "]", "/", "y", ")", ",", "order", "=", "0", ")", "\n", "", "image", "=", "torch", ".", "from_numpy", "(", "image", ".", "astype", "(", "np", ".", "float32", ")", ")", ".", "unsqueeze", "(", "0", ")", "\n", "label", "=", "torch", ".", "from_numpy", "(", "label", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "sample", "=", "{", "'image'", ":", "image", ",", "'label'", ":", "label", ".", "long", "(", ")", ",", "'name'", ":", "name", "}", "\n", "return", "sample", "\n", "", "", "if", "__name__", "==", "\"__main__\"", ":", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.dataloader_semi.random_rot_flip": [[246, 254], ["numpy.random.randint", "numpy.rot90", "numpy.rot90", "numpy.random.randint", "numpy.flip().copy", "numpy.flip().copy", "numpy.flip", "numpy.flip"], "function", ["None"], ["", "", "def", "random_rot_flip", "(", "image", ",", "label", ")", ":", "\n", "    ", "k", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "4", ")", "\n", "image", "=", "np", ".", "rot90", "(", "image", ",", "k", ")", "\n", "label", "=", "np", ".", "rot90", "(", "label", ",", "k", ")", "\n", "axis", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "2", ")", "\n", "image", "=", "np", ".", "flip", "(", "image", ",", "axis", "=", "axis", ")", ".", "copy", "(", ")", "\n", "label", "=", "np", ".", "flip", "(", "label", ",", "axis", "=", "axis", ")", ".", "copy", "(", ")", "\n", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.dataloader_semi.random_rotate": [[256, 261], ["numpy.random.randint", "scipy.ndimage.rotate", "scipy.ndimage.rotate"], "function", ["None"], ["", "def", "random_rotate", "(", "image", ",", "label", ")", ":", "\n", "    ", "angle", "=", "np", ".", "random", ".", "randint", "(", "-", "20", ",", "20", ")", "\n", "image", "=", "ndimage", ".", "rotate", "(", "image", ",", "angle", ",", "order", "=", "0", ",", "reshape", "=", "False", ")", "\n", "label", "=", "ndimage", ".", "rotate", "(", "label", ",", "angle", ",", "order", "=", "0", ",", "reshape", "=", "False", ")", "\n", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.test.Evaluator.__init__": [[60, 63], ["numpy.zeros"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "num_classes", ")", ":", "\n", "        ", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "hist", "=", "np", ".", "zeros", "(", "(", "num_classes", ",", "num_classes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.test.Evaluator._fast_hist": [[64, 73], ["numpy.bincount().reshape", "numpy.bincount", "label_true[].astype"], "methods", ["None"], ["", "def", "_fast_hist", "(", "self", ",", "label_pred", ",", "label_true", ")", ":", "\n", "# confusion matrix", "\n", "#mask \u4f1a\u53d8\u6210\u4e00\u4e2alabel_truec\u957f\u5ea6\u7684\u5411\u91cf,label_true[mask]\u53ea\u4fdd\u7559mask\u4e2d\u6240\u6709\u503c\u4e3aTrue\u7684\u90e8\u5206", "\n", "        ", "mask", "=", "(", "label_true", ">=", "0", ")", "&", "(", "label_true", "<", "self", ".", "num_classes", ")", "\n", "\n", "hist", "=", "np", ".", "bincount", "(", "\n", "self", ".", "num_classes", "*", "label_true", "[", "mask", "]", ".", "astype", "(", "int", ")", "+", "\n", "label_pred", "[", "mask", "]", ",", "minlength", "=", "self", ".", "num_classes", "**", "2", ")", ".", "reshape", "(", "self", ".", "num_classes", ",", "self", ".", "num_classes", ")", "\n", "return", "hist", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.test.Evaluator.add_batch": [[74, 77], ["zip", "test.Evaluator._fast_hist", "lp.flatten", "lt.flatten"], "methods", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.test.Evaluator._fast_hist"], ["", "def", "add_batch", "(", "self", ",", "predictions", ",", "ground_truth", ")", ":", "\n", "        ", "for", "lp", ",", "lt", "in", "zip", "(", "predictions", ",", "ground_truth", ")", ":", "\n", "            ", "self", ".", "hist", "+=", "self", ".", "_fast_hist", "(", "lp", ".", "flatten", "(", ")", ",", "lt", ".", "flatten", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.test.Evaluator.evalute": [[78, 98], ["numpy.nanmean", "numpy.nanmean", "numpy.diag().sum", "test.Evaluator.hist.sum", "numpy.diag", "test.Evaluator.hist.sum", "numpy.diag", "test.Evaluator.hist.sum", "test.Evaluator.hist.sum", "numpy.diag", "numpy.diag", "test.Evaluator.hist.sum", "test.Evaluator.hist.sum"], "methods", ["None"], ["", "", "def", "evalute", "(", "self", ")", ":", "\n", "        ", "acc", "=", "np", ".", "diag", "(", "self", ".", "hist", ")", ".", "sum", "(", ")", "/", "self", ".", "hist", ".", "sum", "(", ")", "\n", "acc_cls", "=", "np", ".", "diag", "(", "self", ".", "hist", ")", "/", "self", ".", "hist", ".", "sum", "(", "axis", "=", "1", ")", "\n", "mean_acc_cls", "=", "np", ".", "nanmean", "(", "acc_cls", ")", "\n", "iou", "=", "np", ".", "diag", "(", "self", ".", "hist", ")", "/", "(", "self", ".", "hist", ".", "sum", "(", "axis", "=", "1", ")", "+", "self", ".", "hist", ".", "sum", "(", "axis", "=", "0", ")", "-", "np", ".", "diag", "(", "self", ".", "hist", ")", ")", "\n", "mean_iou", "=", "np", ".", "nanmean", "(", "iou", ")", "\n", "freq", "=", "self", ".", "hist", ".", "sum", "(", "axis", "=", "1", ")", "/", "self", ".", "hist", ".", "sum", "(", ")", "\n", "frwvacc", "=", "(", "freq", "[", "freq", ">", "0", "]", "*", "iou", "[", "freq", ">", "0", "]", ")", ".", "sum", "(", ")", "\n", "TP", "=", "self", ".", "hist", "[", "1", ",", "1", "]", "\n", "TN", "=", "self", ".", "hist", "[", "0", ",", "0", "]", "\n", "FP", "=", "self", ".", "hist", "[", "0", ",", "1", "]", "\n", "FN", "=", "self", ".", "hist", "[", "1", ",", "0", "]", "\n", "#print(\"TP:{},TN:{},FP:{},FN:{}\".format(TP,TN,FP,FN))", "\n", "#print(self.hist)", "\n", "Pre", "=", "TP", "/", "(", "TP", "+", "FP", ")", "#presicison \u6b63\u786e\u9884\u6d4b\u6837\u672c\u5360\u5168\u90e8\u9884\u6d4b\u7684\u6bd4\u4f8b \u9884\u6d4b\u7ed3\u679c\u4e2d\uff0c\u67d0\u4e00\u7c7b\u88ab\u6b63\u786e\u9884\u6d4b\u7684\u6982\u7387", "\n", "ACC", "=", "(", "TP", "+", "TN", ")", "/", "(", "TP", "+", "TN", "+", "FN", "+", "FP", ")", "\n", "Recall", "=", "TP", "/", "(", "TP", "+", "FN", ")", "#recall \u6b63\u786e\u9884\u6d4b\u6837\u672c\u5360groundtruth\u7684\u6bd4\u5217 \u771f\u5b9e\u503c\u4e2d\uff0c\u67d0\u4e00\u7c7b\u88ab\u9884\u6d4b\u6b63\u786e\u7684\u6982\u7387", "\n", "TNR", "=", "TN", "/", "(", "TN", "+", "FP", ")", "#TNR  true negative rate \u63cf\u8ff0\u8bc6\u522b\u51fa\u7684\u8d1f\u4f8b\u5360\u6240\u6709\u8d1f\u4f8b\u7684\u6bd4\u4f8b \u7279\u5f02\u5ea6", "\n", "F1", "=", "2", "*", "Pre", "*", "Recall", "/", "(", "Pre", "+", "Recall", ")", "\n", "return", "Pre", ",", "ACC", ",", "Recall", ",", "TNR", ",", "mean_iou", ",", "iou", ",", "F1", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.test.Inference.__init__": [[100, 106], ["test_image.size"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "num_classes", ",", "test_image", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "test_image", ".", "size", "(", ")", "\n", "self", ".", "b", ",", "self", ".", "h", ",", "self", ".", "w", "=", "b", ",", "h", ",", "w", "\n", "self", ".", "test_image", "=", "test_image", "\n", "", "def", "single_inference", "(", "self", ",", "test_image", ")", ":", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.test.Inference.single_inference": [[106, 112], ["test.Inference.model", "torch.softmax", "torch.softmax", "torch.softmax", "pre.data.cpu.data.cpu.data.cpu"], "methods", ["None"], ["", "def", "single_inference", "(", "self", ",", "test_image", ")", ":", "\n", "        ", "middle_feature1", ",", "middle_feature", ",", "pre", "=", "self", ".", "model", "(", "test_image", ")", "\n", "#pre = F.interpolate(pre, size=(self.h, self.w), mode=\"bilinear\", align_corners=True)", "\n", "pre", "=", "F", ".", "softmax", "(", "pre", ",", "dim", "=", "1", ")", "\n", "pre", "=", "pre", ".", "data", ".", "cpu", "(", ")", "\n", "return", "pre", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.test.Inference.flip_image": [[113, 116], ["torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip"], "methods", ["None"], ["", "def", "flip_image", "(", "self", ",", "img", ")", ":", "\n", "        ", "flipped", "=", "torch", ".", "flip", "(", "img", ",", "[", "2", ",", "3", "]", ")", "\n", "return", "flipped", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.test.Inference.fushion_avg": [[117, 123], ["torch.seros", "torch.seros", "torch.seros", "torch.seros", "torch.seros", "torch.seros", "torch.seros", "torch.seros", "torch.seros", "len"], "methods", ["None"], ["", "def", "fushion_avg", "(", "self", ",", "pre", ")", ":", "\n", "        ", "pre_final", "=", "torch", ".", "seros", "(", "self", ".", "b", ",", "self", ".", "num_classes", ",", "self", ".", "h", ",", "self", ".", "w", ")", "\n", "for", "pre_scaled", "in", "pre", ":", "\n", "            ", "pre_final", "=", "pre_final", "+", "pre_scaled", "\n", "", "pre_final", "=", "pre_final", "/", "len", "(", "pre", ")", "\n", "return", "pre_final", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.test.Inference.mutliscale_inference": [[124, 138], ["test.Inference.fushion_avg", "torch.interpolate", "torch.interpolate", "torch.interpolate", "test.Inference.single_inference", "pre.append", "test.Inference.flip_image", "test.Inference.single_inference", "test.Inference.flip_image", "pre.append", "int", "int"], "methods", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.test.Inference.fushion_avg", "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.test.Inference.single_inference", "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.test.Inference.flip_image", "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.test.Inference.single_inference", "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.test.Inference.flip_image"], ["", "def", "mutliscale_inference", "(", "self", ",", "test_image", ",", "is_Flip", "=", "True", ")", ":", "\n", "        ", "pre", "=", "[", "]", "\n", "inf_scales", "=", "[", "0.5", ",", "0.75", ",", "1.0", ",", "1.25", ",", "1.5", ",", "1.75", ",", "2.0", ",", "2.25", "]", "\n", "for", "scale", "in", "inf_scales", ":", "\n", "            ", "img_scaled", "=", "F", ".", "interpolate", "(", "test_image", ",", "size", "=", "(", "int", "(", "self", ".", "h", "*", "scale", ")", ",", "int", "(", "scale", ".", "w", "*", "scale", ")", ")", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", ")", "\n", "pre_scaled", "=", "self", ".", "single_inference", "(", "img_scaled", ")", "\n", "pre", ".", "append", "(", "pre_scaled", ")", "\n", "if", "is_Flip", ":", "\n", "                ", "img_scaled", "=", "self", ".", "flip_image", "(", "img_scaled", ")", "\n", "pre_scaled", "=", "self", ".", "single_inference", "(", "img_scaled", ")", "\n", "pre_scaled", "=", "self", ".", "flip_image", "(", "pre_scaled", ")", "\n", "pre", ".", "append", "(", "pre_scaled", ")", "\n", "", "", "pre_final", "=", "self", ".", "fushion_avg", "(", "pre", ")", "\n", "return", "pre_final", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.test.calculate_metric_percase": [[139, 150], ["medpy.metric.binary.dc", "medpy.metric.binary.hd95", "pred.sum", "gt.sum", "pred.sum", "gt.sum"], "function", ["None"], ["", "", "def", "calculate_metric_percase", "(", "pred", ",", "gt", ")", ":", "\n", "    ", "pred", "[", "pred", ">", "0", "]", "=", "1", "\n", "gt", "[", "gt", ">", "0", "]", "=", "1", "\n", "if", "pred", ".", "sum", "(", ")", ">", "0", "and", "gt", ".", "sum", "(", ")", ">", "0", ":", "\n", "        ", "dice", "=", "metric", ".", "binary", ".", "dc", "(", "pred", ",", "gt", ")", "\n", "hd95", "=", "metric", ".", "binary", ".", "hd95", "(", "pred", ",", "gt", ")", "\n", "return", "dice", ",", "hd95", "\n", "", "elif", "pred", ".", "sum", "(", ")", ">", "0", "and", "gt", ".", "sum", "(", ")", "==", "0", ":", "\n", "        ", "return", "1", ",", "0", "\n", "", "else", ":", "\n", "        ", "return", "0", ",", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.test.test_single_volume": [[152, 195], ["range", "image.squeeze().cpu().detach().numpy", "label.squeeze().cpu().detach().numpy", "len", "numpy.zeros_like", "range", "torch.from_numpy().unsqueeze().unsqueeze().float().cuda", "torch.from_numpy().unsqueeze().unsqueeze().float().cuda", "torch.from_numpy().unsqueeze().unsqueeze().float().cuda", "net.eval", "metric_list.append", "SimpleITK.GetImageFromArray", "SimpleITK.GetImageFromArray", "SimpleITK.GetImageFromArray", "sitk.GetImageFromArray.SetSpacing", "sitk.GetImageFromArray.SetSpacing", "sitk.GetImageFromArray.SetSpacing", "SimpleITK.WriteImage", "SimpleITK.WriteImage", "SimpleITK.WriteImage", "torch.from_numpy().unsqueeze().unsqueeze().float().cuda", "torch.from_numpy().unsqueeze().unsqueeze().float().cuda", "torch.from_numpy().unsqueeze().unsqueeze().float().cuda", "net.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "net", "torch.argmax().squeeze", "torch.argmax().squeeze", "torch.argmax().squeeze", "out.cpu().detach().numpy.cpu().detach().numpy", "test.calculate_metric_percase", "image.astype", "out.cpu().detach().numpy.astype", "label.astype", "image.squeeze().cpu().detach", "label.squeeze().cpu().detach", "scipy.ndimage.zoom", "torch.no_grad", "torch.no_grad", "torch.no_grad", "net", "torch.argmax().squeeze", "torch.argmax().squeeze", "torch.argmax().squeeze", "out.cpu().detach().numpy.cpu().detach().numpy", "torch.from_numpy().unsqueeze().unsqueeze().float", "torch.from_numpy().unsqueeze().unsqueeze().float", "torch.from_numpy().unsqueeze().unsqueeze().float", "torch.from_numpy().unsqueeze().unsqueeze().float", "torch.from_numpy().unsqueeze().unsqueeze().float", "torch.from_numpy().unsqueeze().unsqueeze().float", "scipy.ndimage.zoom", "torch.argmax", "torch.argmax", "torch.argmax", "out.cpu().detach().numpy.cpu().detach", "image.squeeze().cpu", "label.squeeze().cpu", "torch.argmax", "torch.argmax", "torch.argmax", "out.cpu().detach().numpy.cpu().detach", "torch.from_numpy().unsqueeze().unsqueeze", "torch.from_numpy().unsqueeze().unsqueeze", "torch.from_numpy().unsqueeze().unsqueeze", "torch.softmax", "torch.softmax", "torch.softmax", "torch.from_numpy().unsqueeze().unsqueeze", "torch.from_numpy().unsqueeze().unsqueeze", "torch.from_numpy().unsqueeze().unsqueeze", "torch.softmax", "torch.softmax", "torch.softmax", "out.cpu().detach().numpy.cpu", "image.squeeze", "label.squeeze", "out.cpu().detach().numpy.cpu", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.test.calculate_metric_percase"], ["", "", "def", "test_single_volume", "(", "image", ",", "label", ",", "net", ",", "classes", ",", "patch_size", "=", "[", "256", ",", "256", "]", ",", "test_save_path", "=", "None", ",", "case", "=", "None", ",", "z_spacing", "=", "1", ")", ":", "\n", "    ", "image", ",", "label", "=", "image", ".", "squeeze", "(", "0", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "label", ".", "squeeze", "(", "0", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "if", "len", "(", "image", ".", "shape", ")", "==", "3", ":", "\n", "        ", "prediction", "=", "np", ".", "zeros_like", "(", "label", ")", "\n", "for", "ind", "in", "range", "(", "image", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "slice", "=", "image", "[", "ind", ",", ":", ",", ":", "]", "\n", "x", ",", "y", "=", "slice", ".", "shape", "[", "0", "]", ",", "slice", ".", "shape", "[", "1", "]", "\n", "if", "x", "!=", "patch_size", "[", "0", "]", "or", "y", "!=", "patch_size", "[", "1", "]", ":", "\n", "                ", "slice", "=", "zoom", "(", "slice", ",", "(", "patch_size", "[", "0", "]", "/", "x", ",", "patch_size", "[", "1", "]", "/", "y", ")", ",", "order", "=", "3", ")", "# previous using 0", "\n", "", "input", "=", "torch", ".", "from_numpy", "(", "slice", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "net", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "_", ",", "_", ",", "outputs", "=", "net", "(", "input", ")", "\n", "out", "=", "torch", ".", "argmax", "(", "torch", ".", "softmax", "(", "outputs", ",", "dim", "=", "1", ")", ",", "dim", "=", "1", ")", ".", "squeeze", "(", "0", ")", "\n", "out", "=", "out", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "if", "x", "!=", "patch_size", "[", "0", "]", "or", "y", "!=", "patch_size", "[", "1", "]", ":", "\n", "                    ", "pred", "=", "zoom", "(", "out", ",", "(", "x", "/", "patch_size", "[", "0", "]", ",", "y", "/", "patch_size", "[", "1", "]", ")", ",", "order", "=", "0", ")", "\n", "", "else", ":", "\n", "                    ", "pred", "=", "out", "\n", "", "prediction", "[", "ind", "]", "=", "pred", "\n", "", "", "", "else", ":", "\n", "        ", "input", "=", "torch", ".", "from_numpy", "(", "image", ")", ".", "unsqueeze", "(", "\n", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "net", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "_", ",", "_", ",", "outputs", "=", "net", "(", "input", ")", "\n", "out", "=", "torch", ".", "argmax", "(", "torch", ".", "softmax", "(", "outputs", ",", "dim", "=", "1", ")", ",", "dim", "=", "1", ")", ".", "squeeze", "(", "0", ")", "\n", "prediction", "=", "out", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "", "metric_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "classes", ")", ":", "\n", "        ", "metric_list", ".", "append", "(", "calculate_metric_percase", "(", "prediction", "==", "i", ",", "label", "==", "i", ")", ")", "\n", "\n", "", "if", "test_save_path", "is", "not", "None", ":", "\n", "        ", "img_itk", "=", "sitk", ".", "GetImageFromArray", "(", "image", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "prd_itk", "=", "sitk", ".", "GetImageFromArray", "(", "prediction", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "lab_itk", "=", "sitk", ".", "GetImageFromArray", "(", "label", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "img_itk", ".", "SetSpacing", "(", "(", "1", ",", "1", ",", "z_spacing", ")", ")", "\n", "prd_itk", ".", "SetSpacing", "(", "(", "1", ",", "1", ",", "z_spacing", ")", ")", "\n", "lab_itk", ".", "SetSpacing", "(", "(", "1", ",", "1", ",", "z_spacing", ")", ")", "\n", "sitk", ".", "WriteImage", "(", "prd_itk", ",", "test_save_path", "+", "'/'", "+", "case", "+", "\"_pred.nii.gz\"", ")", "\n", "sitk", ".", "WriteImage", "(", "img_itk", ",", "test_save_path", "+", "'/'", "+", "case", "+", "\"_img.nii.gz\"", ")", "\n", "sitk", ".", "WriteImage", "(", "lab_itk", ",", "test_save_path", "+", "'/'", "+", "case", "+", "\"_gt.nii.gz\"", ")", "\n", "", "return", "metric_list", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.test.test": [[197, 256], ["torch.load", "torch.load", "torch.load", "networks.Unet_SKA2.UnetSKA2.load_state_dict", "logger_test.info", "networks.Unet_SKA2.UnetSKA2.to", "dataloader.GastricCancerDataset", "torch.utils.data.DataLoader", "test.Evaluator", "networks.Unet_SKA2.UnetSKA2.eval", "os.path.join", "networks.MobileNetV2_unet.MobileNetV2_unet", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.DataParallel", "torch.no_grad", "torch.no_grad", "torch.no_grad", "test.Evaluator.evalute", "logger_test.info", "networks.enet.ENet", "torchvision.transforms.transforms.Compose", "image.to.to", "label.cpu().numpy.to", "test.Inference.single_inference", "torch.argmax", "torch.argmax", "torch.argmax", "Image.fromarray.cpu().numpy", "label.cpu().numpy.cpu().numpy", "test.Evaluator.add_batch", "Image.fromarray.squeeze", "PIL.Image.fromarray", "Image.fromarray.save", "networks.erfnet.ERFNet", "numpy.uint8", "os.path.exists", "os.mkdir", "networks.Unet_SKA2.UnetSKA2", "dataloader.ToTensor", "test.Inference", "Image.fromarray.cpu", "label.cpu().numpy.cpu", "name[].split"], "function", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.test.Evaluator.evalute", "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.test.Inference.single_inference", "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.test.Evaluator.add_batch"], ["", "def", "test", "(", "network", "=", "\"MobileNetV2_unet\"", ",", "pth", "=", "\"010.pth\"", ",", "types", "=", "\"sp\"", ",", "num_classes", "=", "2", ")", ":", "\n", "    ", "assert", "num_classes", "==", "2", "\n", "state_dict", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "\"./models/GastricCancer/student_\"", "+", "types", ",", "pth", ")", ")", "\n", "if", "network", "==", "\"MobileNetV2_unet\"", ":", "\n", "        ", "model", "=", "MobileNetV2_unet", "(", "num_classes", "=", "num_classes", ",", "pre_trained", "=", "None", ")", "\n", "", "elif", "network", "==", "\"ENet\"", ":", "\n", "        ", "model", "=", "ENet", "(", "num_classes", ")", "\n", "", "elif", "network", "==", "\"ERFNet\"", ":", "\n", "        ", "model", "=", "ERFNet", "(", "num_classes", ")", "\n", "", "elif", "network", "==", "\"UnetSKA2\"", ":", "\n", "        ", "model", "=", "UnetSKA2", "(", "in_ch", "=", "1", ",", "out_ch", "=", "num_classes", ")", "\n", "\n", "#model =UnetSKA2(in_ch=1,out_ch=2)", "\n", "\n", "", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "        ", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "\n", "", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "logger_test", ".", "info", "(", "'Model loaded from {}'", ".", "format", "(", "pth", ")", ")", "\n", "\n", "model", ".", "to", "(", "device", ")", "\n", "\n", "custom_dataset", "=", "GastricCancerDataset", "(", "image_path", "=", "\"dataset/GastricCancer/test\"", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "ToTensor", "(", ")", "]", ")", ",", "type_image", "=", "\"resize\"", ")", "\n", "data_loader", "=", "DataLoader", "(", "custom_dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "True", ")", "\n", "\n", "\n", "\n", "evalutor", "=", "Evaluator", "(", "num_classes", "=", "num_classes", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "sample", "in", "data_loader", ":", "\n", "            ", "image", "=", "sample", "[", "'image'", "]", "\n", "label", "=", "sample", "[", "'label'", "]", "\n", "name", "=", "sample", "[", "'name'", "]", "\n", "image", "=", "image", ".", "to", "(", "device", ")", "\n", "label", "=", "label", ".", "to", "(", "device", ")", "\n", "\n", "pre", "=", "Inference", "(", "model", ",", "num_classes", ",", "image", ")", ".", "single_inference", "(", "image", ")", "\n", "\n", "\n", "pre", "=", "pre", "[", ":", ",", ":", ",", "95", ":", "95", "+", "64", ",", "95", ":", "95", "+", "64", "]", "\n", "label", "=", "label", "[", ":", ",", "95", ":", "95", "+", "64", ",", "95", ":", "95", "+", "64", "]", "\n", "\n", "\n", "pre", "=", "torch", ".", "argmax", "(", "pre", ",", "dim", "=", "1", ")", "\n", "pre", "=", "pre", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "label", "=", "label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "evalutor", ".", "add_batch", "(", "pre", ",", "label", ")", "\n", "pre", "=", "pre", ".", "squeeze", "(", ")", "\n", "pre", "=", "pre", "*", "255", "\n", "\n", "pre", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "pre", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "\"./dataset/prediction\"", ")", ":", "\n", "              ", "os", ".", "mkdir", "(", "\"./dataset/prediction\"", ")", "\n", "", "pre", ".", "save", "(", "\"./dataset/prediction/%s\"", "%", "name", "[", "0", "]", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "+", "\".png\"", ")", "\n", "", "Pre", ",", "ACC", ",", "Recall", ",", "TNR", ",", "mIOU", ",", "iou", ",", "F1", "=", "evalutor", ".", "evalute", "(", ")", "\n", "logger_test", ".", "info", "(", "\"Pre:{} ACC:{} Recall:{} TNR:{} mIOU:{} iou:{} F1:{}\"", ".", "format", "(", "Pre", ",", "ACC", ",", "Recall", ",", "TNR", ",", "mIOU", ",", "iou", ",", "F1", ")", ")", "\n", "", "return", "ACC", ",", "mIOU", "\n", "", "def", "test_Synapse", "(", "network", "=", "\"MobileNetV2_unet\"", ",", "pth", "=", "\"010.pth\"", ",", "types", "=", "\"sp\"", ",", "num_classes", "=", "9", ")", ":", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.test.test_Synapse": [[256, 295], ["torch.load", "torch.load", "torch.load", "networks.Unet_SKA2.UnetSKA2.load_state_dict", "logger_test.info", "networks.Unet_SKA2.UnetSKA2.to", "dataloader.Synapsedataset", "torch.utils.data.DataLoader", "networks.Unet_SKA2.UnetSKA2.eval", "range", "logger_test.info", "os.path.join", "networks.MobileNetV2_unet.MobileNetV2_unet", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.DataParallel", "os.path.exists", "os.mkdir", "test.test_single_volume", "numpy.array", "len", "logger_test.info", "numpy.mean", "numpy.mean", "networks.enet.ENet", "networks.erfnet.ERFNet", "networks.Unet_SKA2.UnetSKA2"], "function", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.test.test_single_volume"], ["", "def", "test_Synapse", "(", "network", "=", "\"MobileNetV2_unet\"", ",", "pth", "=", "\"010.pth\"", ",", "types", "=", "\"sp\"", ",", "num_classes", "=", "9", ")", ":", "\n", "    ", "assert", "num_classes", "==", "9", "\n", "state_dict", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "\"./models/Synapse/student_\"", "+", "types", ",", "pth", ")", ")", "\n", "\n", "if", "network", "==", "\"MobileNetV2_unet\"", ":", "\n", "        ", "model", "=", "MobileNetV2_unet", "(", "num_classes", "=", "num_classes", ",", "pre_trained", "=", "None", ")", "\n", "", "elif", "network", "==", "\"ENet\"", ":", "\n", "        ", "model", "=", "ENet", "(", "num_classes", ")", "\n", "", "elif", "network", "==", "\"ERFNet\"", ":", "\n", "        ", "model", "=", "ERFNet", "(", "num_classes", ")", "\n", "", "elif", "network", "==", "\"UnetSKA2\"", ":", "\n", "        ", "model", "=", "UnetSKA2", "(", "in_ch", "=", "1", ",", "out_ch", "=", "num_classes", ")", "\n", "\n", "", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "        ", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "logger_test", ".", "info", "(", "'Model loaded from {}'", ".", "format", "(", "pth", ")", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "custom_dataset", "=", "Synapsedataset", "(", "base_dir", "=", "\"dataset/Synapse\"", ",", "list_dir", "=", "\"dataset/Synapse/lists_Synapse\"", ",", "split", "=", "\"test_vol\"", ")", "\n", "data_loader", "=", "DataLoader", "(", "custom_dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "True", ")", "\n", "model", ".", "eval", "(", ")", "\n", "metric_list", "=", "0.0", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "\"./dataset/prediction\"", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "\"./dataset/prediction\"", ")", "\n", "\n", "", "for", "sample", "in", "data_loader", ":", "\n", "        ", "image", "=", "sample", "[", "'image'", "]", "\n", "label", "=", "sample", "[", "'label'", "]", "\n", "name", "=", "sample", "[", "'name'", "]", "\n", "metric_i", "=", "test_single_volume", "(", "image", ",", "label", ",", "model", ",", "classes", "=", "num_classes", ",", "patch_size", "=", "[", "224", ",", "224", "]", ",", "\n", "test_save_path", "=", "\"./dataset/prediction\"", ",", "case", "=", "name", "[", "0", "]", ",", "z_spacing", "=", "1", ")", "\n", "metric_list", "+=", "np", ".", "array", "(", "metric_i", ")", "\n", "", "metric_list", "=", "metric_list", "/", "len", "(", "custom_dataset", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "num_classes", ")", ":", "\n", "        ", "logger_test", ".", "info", "(", "'Mean class %d mean_dice %f mean_hd95 %f'", "%", "(", "i", ",", "metric_list", "[", "i", "-", "1", "]", "[", "0", "]", ",", "metric_list", "[", "i", "-", "1", "]", "[", "1", "]", ")", ")", "\n", "", "performance", "=", "np", ".", "mean", "(", "metric_list", ",", "axis", "=", "0", ")", "[", "0", "]", "\n", "mean_hd95", "=", "np", ".", "mean", "(", "metric_list", ",", "axis", "=", "0", ")", "[", "1", "]", "\n", "logger_test", ".", "info", "(", "'Testing performance in model: mean_dice : %f mean_hd95 : %f'", "%", "(", "performance", ",", "mean_hd95", ")", ")", "\n", "return", "performance", ",", "mean_hd95", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.test.main": [[297, 327], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "test.test", "logger.warning", "test.test_Synapse", "logger.warning"], "function", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.test.test", "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.test.test_Synapse"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parse", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parse", ".", "add_argument", "(", "\"-m\"", ",", "\"--mode\"", ",", "type", "=", "str", ",", "default", "=", "\"test\"", ",", "help", "=", "\"inference mode(default test)\"", ")", "\n", "parse", ".", "add_argument", "(", "\"-b\"", ",", "\"--batch_size\"", ",", "type", "=", "int", ",", "default", "=", "8", ",", "help", "=", "\"batch_size\"", ")", "\n", "parse", ".", "add_argument", "(", "\"--student\"", ",", "type", "=", "str", ",", "default", "=", "\"MobileNetV2_unet\"", ")", "\n", "parse", ".", "add_argument", "(", "\"--teacher\"", ",", "type", "=", "str", ",", "default", "=", "\"FANet\"", ")", "\n", "parse", ".", "add_argument", "(", "\"-n\"", ",", "\"--num_classes\"", ",", "type", "=", "int", ",", "default", "=", "2", ")", "\n", "\n", "parse", ".", "add_argument", "(", "\"-p\"", ",", "\"--pth\"", ",", "default", "=", "False", ")", "\n", "\n", "parse", ".", "add_argument", "(", "\"-t\"", ",", "\"--types\"", ",", "default", "=", "\"csc\"", ")", "\n", "\n", "parse", ".", "add_argument", "(", "\"-a\"", ",", "\"--adversial\"", ",", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "parse", ".", "add_argument", "(", "\"--dataset\"", ",", "type", "=", "str", ",", "default", "=", "\"GastricCancer\"", ")", "\n", "\n", "args", "=", "parse", ".", "parse_args", "(", ")", "\n", "assert", "args", ".", "mode", "in", "[", "\"test\"", "]", "\n", "if", "args", ".", "mode", "==", "\"test\"", ":", "\n", "        ", "if", "args", ".", "dataset", "==", "\"GastricCancer\"", ":", "\n", "            ", "if", "args", ".", "pth", ":", "\n", "\n", "                ", "test", "(", "network", "=", "args", ".", "student", ",", "pth", "=", "args", ".", "pth", ",", "types", "=", "args", ".", "types", ",", "num_classes", "=", "args", ".", "num_classes", ")", "\n", "", "else", ":", "\n", "                ", "logger", ".", "warning", "(", "\"\u8bf7\u8f93\u5165\u6307\u5b9a\u52a0\u8f7d\u6a21\u578b\"", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "args", ".", "pth", ":", "\n", "                ", "test_Synapse", "(", "network", "=", "args", ".", "student", ",", "pth", "=", "args", ".", "pth", ",", "types", "=", "args", ".", "types", ",", "num_classes", "=", "args", ".", "num_classes", ")", "\n", "\n", "", "else", ":", "\n", "                ", "logger", ".", "warning", "(", "\"\u8bf7\u8f93\u5165\u6307\u5b9a\u52a0\u8f7d\u6a21\u578b\"", ")", "\n", "", "", "", "", "if", "__name__", "==", "\"__main__\"", ":", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.dataloader.GastricCancerDataset.__init__": [[18, 48], ["os.path.join", "glob.glob.glob", "glob.glob.glob", "os.path.join", "dataloader.GastricCancerDataset.label_list.append", "os.path.join", "dataloader.GastricCancerDataset.label_list.append", "dataloader.GastricCancerDataset.image_path.split", "os.path.join", "[].split", "[].split", "[].split", "os.path.join", "[].split", "dataloader.GastricCancerDataset.image_path.split", "[].split", "[].split", "[].split", "[].split", "image.split", "os.path.join", "image.split", "image.split", "image.split", "image.split", "os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "image_path", "=", "\"dataset/train\"", ",", "transform", "=", "None", ",", "type_image", "=", "\"patch\"", ")", ":", "\n", "        ", "assert", "type_image", "in", "[", "\"patch\"", ",", "\"resize\"", "]", "\n", "self", ".", "image_path", "=", "image_path", "\n", "assert", "self", ".", "image_path", "in", "[", "\"dataset/train\"", ",", "\"dataset/test\"", "]", "\n", "if", "(", "type_image", "==", "\"resize\"", ")", ":", "\n", "          ", "self", ".", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_path", ".", "split", "(", "\"/\"", ")", "[", "0", "]", "+", "\"/resize\"", ",", "self", ".", "image_path", ".", "split", "(", "\"/\"", ")", "[", "1", "]", ")", "\n", "assert", "self", ".", "image_path", "in", "[", "\"dataset/resize/train\"", ",", "\"dataset/resize/test\"", "]", "\n", "# iamge = Image.open(os.path.join(self.image_path,\"Image_01L.jpg\"))", "\n", "# iamge.show()", "\n", "", "self", ".", "transform", "=", "transform", "\n", "if", "(", "type_image", "==", "\"patch\"", ")", ":", "\n", "          ", "self", ".", "image_list", "=", "glob", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "join", "(", "self", ".", "image_path", ",", "\"image\"", ")", ",", "\"*.png\"", ")", ")", "\n", "self", ".", "label_list", "=", "[", "]", "\n", "for", "image", "in", "self", ".", "image_list", ":", "\n", "\n", "            ", "image_name", "=", "image", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", ".", "split", "(", "\"_\"", ")", "[", "0", "]", "\n", "rows", "=", "image", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", ".", "split", "(", "\"_\"", ")", "[", "-", "2", "]", "\n", "cols", "=", "image", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", ".", "split", "(", "\"_\"", ")", "[", "-", "1", "]", "\n", "#print(image.split(\"/\")[-1].split(\".\")[0])", "\n", "#print(image_name)", "\n", "assert", "image", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", "==", "image_name", "+", "\"_\"", "+", "rows", "+", "\"_\"", "+", "cols", "\n", "\n", "self", ".", "label_list", ".", "append", "(", "os", ".", "path", ".", "join", "(", "self", ".", "image_path", ",", "\"label\"", ")", "+", "\"/\"", "+", "image_name", "+", "\"_\"", "+", "rows", "+", "\"_\"", "+", "cols", "+", "\".png\"", ")", "\n", "", "", "else", ":", "\n", "          ", "self", ".", "image_list", "=", "glob", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "join", "(", "self", ".", "image_path", ",", "\"image\"", ")", ",", "\"*.png\"", ")", ")", "\n", "\n", "self", ".", "label_list", "=", "[", "]", "\n", "for", "image", "in", "self", ".", "image_list", ":", "\n", "            ", "image_name", "=", "image", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "self", ".", "label_list", ".", "append", "(", "os", ".", "path", ".", "join", "(", "self", ".", "image_path", ",", "\"label\"", ")", "+", "\"/\"", "+", "image_name", "+", "\".png\"", ")", "\n", "", "", "", "def", "__len__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.dataloader.GastricCancerDataset.__len__": [[48, 50], ["len"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "image_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.dataloader.GastricCancerDataset.__getitem__": [[51, 73], ["PIL.Image.open", "PIL.Image.open", "label.convert.convert.convert", "[].split", "dataloader.GastricCancerDataset.transform", "dataloader.GastricCancerDataset.image_list[].split"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "sample_path", "=", "self", ".", "image_list", "[", "index", "]", "\n", "sample", "=", "Image", ".", "open", "(", "sample_path", ")", "\n", "label_path", "=", "self", ".", "label_list", "[", "index", "]", "\n", "sample_name", "=", "self", ".", "image_list", "[", "index", "]", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "\"\"\"\n        print(self.image_list[index].split(\".\")[0]+\"_1stHO.png\")\n        print(label_path)\n        assert self.image_list[index].split(\".\")[0]+\"_1stHO.png\" == label_path\n        \"\"\"", "\n", "#print(sample_name)", "\n", "label", "=", "Image", ".", "open", "(", "label_path", ")", "\n", "#print(\"convert \u524d:\", np.array(label).shape)", "\n", "label", "=", "label", ".", "convert", "(", "\"L\"", ")", "\n", "#print(\"convert \u540e:\",np.array(label).shape)", "\n", "Sample", "=", "{", "\"name\"", ":", "sample_name", ",", "\n", "\"image\"", ":", "sample", ",", "\n", "\"label\"", ":", "label", "}", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "Sample", "=", "self", ".", "transform", "(", "Sample", ")", "\n", "\n", "", "return", "Sample", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.dataloader.Synapsedataset.__init__": [[75, 80], ["open().readlines", "open", "os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "base_dir", ",", "list_dir", ",", "split", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "transform", "=", "transform", "# using transform in torch!", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "sample_list", "=", "open", "(", "os", ".", "path", ".", "join", "(", "list_dir", ",", "self", ".", "split", "+", "'.txt'", ")", ")", ".", "readlines", "(", ")", "\n", "self", ".", "data_dir", "=", "base_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.dataloader.Synapsedataset.__len__": [[81, 83], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sample_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.dataloader.Synapsedataset.__getitem__": [[84, 102], ["dataloader.Synapsedataset.sample_list[].strip", "dataloader.Synapsedataset.sample_list[].strip", "os.path.join", "numpy.load", "dataloader.Synapsedataset.sample_list[].strip", "h5py.File", "dataloader.Synapsedataset.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "split", "==", "\"train\"", ":", "\n", "            ", "slice_name", "=", "self", ".", "sample_list", "[", "idx", "]", ".", "strip", "(", "'\\n'", ")", "\n", "data_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", "+", "\"/train_npz\"", ",", "slice_name", "+", "'.npz'", ")", "\n", "data", "=", "np", ".", "load", "(", "data_path", ")", "\n", "image", ",", "label", "=", "data", "[", "'image'", "]", ",", "data", "[", "'label'", "]", "\n", "", "else", ":", "\n", "            ", "vol_name", "=", "self", ".", "sample_list", "[", "idx", "]", ".", "strip", "(", "'\\n'", ")", "\n", "filepath", "=", "self", ".", "data_dir", "+", "\"/test_vol_h5\"", "+", "\"/{}.npy.h5\"", ".", "format", "(", "vol_name", ")", "\n", "data", "=", "h5py", ".", "File", "(", "filepath", ")", "\n", "image", ",", "label", "=", "data", "[", "'image'", "]", "[", ":", "]", ",", "data", "[", "'label'", "]", "[", ":", "]", "\n", "\n", "", "sample", "=", "{", "'image'", ":", "image", ",", "'label'", ":", "label", "}", "\n", "\n", "sample", "[", "'name'", "]", "=", "self", ".", "sample_list", "[", "idx", "]", ".", "strip", "(", "'\\n'", ")", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.dataloader.RandomResize.__call__": [[107, 123], ["image.resize.resize.resize", "label.resize.resize.resize", "int", "int", "random.random"], "methods", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.utils.crop_merge.resize", "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.utils.crop_merge.resize"], ["    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "name", ",", "image", ",", "label", "=", "sample", "[", "\"name\"", "]", ",", "sample", "[", "\"image\"", "]", ",", "sample", "[", "\"label\"", "]", "\n", "h", ",", "w", "=", "image", ".", "size", "[", ":", "2", "]", "\n", "image_interpolation", "=", "Image", ".", "BILINEAR", "\n", "label_interpolation", "=", "Image", ".", "NEAREST", "\n", "\n", "a", "=", "0.5", "+", "random", ".", "random", "(", ")", "*", "1.5", "\n", "\n", "output_size", "=", "(", "int", "(", "h", "*", "a", ")", ",", "int", "(", "w", "*", "a", ")", ")", "\n", "\n", "image", "=", "image", ".", "resize", "(", "output_size", ",", "image_interpolation", ")", "\n", "label", "=", "label", ".", "resize", "(", "output_size", ",", "label_interpolation", ")", "\n", "\n", "return", "{", "\"name\"", ":", "name", ",", "\n", "\"image\"", ":", "image", ",", "\n", "\"label\"", ":", "label", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.dataloader.Resize.__init__": [[126, 133], ["isinstance", "isinstance", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "output_size", ")", ":", "\n", "        ", "assert", "isinstance", "(", "output_size", ",", "(", "int", ",", "tuple", ")", ")", "\n", "if", "isinstance", "(", "output_size", ",", "int", ")", ":", "\n", "            ", "self", ".", "output_size", "=", "(", "output_size", ",", "output_size", ")", "\n", "", "else", ":", "\n", "            ", "assert", "len", "(", "output_size", ")", "==", "2", "\n", "self", ".", "output_size", "=", "output_size", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.dataloader.Resize.__call__": [[134, 145], ["image.resize.resize.resize", "label.resize.resize.resize"], "methods", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.utils.crop_merge.resize", "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.utils.crop_merge.resize"], ["", "", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "name", ",", "image", ",", "label", "=", "sample", "[", "\"name\"", "]", ",", "sample", "[", "\"image\"", "]", ",", "sample", "[", "\"label\"", "]", "\n", "h", ",", "w", "=", "image", ".", "size", "[", ":", "2", "]", "\n", "image_interpolation", "=", "Image", ".", "BILINEAR", "\n", "label_interpolation", "=", "Image", ".", "NEAREST", "\n", "image", "=", "image", ".", "resize", "(", "self", ".", "output_size", ",", "image_interpolation", ")", "\n", "label", "=", "label", ".", "resize", "(", "self", ".", "output_size", ",", "label_interpolation", ")", "\n", "\n", "return", "{", "\"name\"", ":", "name", ",", "\n", "\"image\"", ":", "image", ",", "\n", "\"label\"", ":", "label", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.dataloader.CenterCrop.__init__": [[149, 156], ["isinstance", "isinstance", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "output_size", ")", ":", "\n", "        ", "assert", "isinstance", "(", "output_size", ",", "(", "int", ",", "tuple", ")", ")", "\n", "if", "isinstance", "(", "output_size", ",", "int", ")", ":", "\n", "            ", "self", ".", "output_size", "=", "(", "output_size", ",", "output_size", ")", "\n", "", "else", ":", "\n", "            ", "assert", "len", "(", "output_size", ")", "==", "2", "\n", "self", ".", "output_size", "=", "output_size", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.dataloader.CenterCrop.__call__": [[157, 170], ["int", "int", "image.crop.crop.crop", "label.crop.crop.crop", "round", "round"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "name", ",", "image", ",", "label", "=", "sample", "[", "\"name\"", "]", ",", "sample", "[", "\"image\"", "]", ",", "sample", "[", "\"label\"", "]", "\n", "image_h", ",", "image_w", "=", "image", ".", "size", "[", ":", "2", "]", "\n", "crop_h", ",", "crop_w", "=", "self", ".", "output_size", "\n", "crop_top", "=", "int", "(", "round", "(", "(", "image_h", "-", "crop_h", ")", "/", "2.", ")", ")", "\n", "crop_left", "=", "int", "(", "round", "(", "(", "image_w", "-", "crop_w", ")", "/", "2.", ")", ")", "\n", "\n", "image", "=", "image", ".", "crop", "(", "(", "crop_left", ",", "crop_top", ",", "crop_left", "+", "crop_w", ",", "crop_top", "+", "crop_h", ")", ")", "\n", "label", "=", "label", ".", "crop", "(", "(", "crop_left", ",", "crop_top", ",", "crop_left", "+", "crop_w", ",", "crop_top", "+", "crop_h", ")", ")", "\n", "\n", "return", "{", "\"name\"", ":", "name", ",", "\n", "\"image\"", ":", "image", ",", "\n", "\"label\"", ":", "label", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.dataloader.RandomCrop.__init__": [[173, 180], ["isinstance", "isinstance", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "output_size", ")", ":", "\n", "        ", "assert", "isinstance", "(", "output_size", ",", "(", "int", ",", "tuple", ")", ")", "\n", "if", "isinstance", "(", "output_size", ",", "int", ")", ":", "\n", "            ", "self", ".", "output_size", "=", "(", "output_size", ",", "output_size", ")", "\n", "", "else", ":", "\n", "            ", "assert", "len", "(", "output_size", ")", "==", "2", "\n", "self", ".", "output_size", "=", "output_size", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.dataloader.RandomCrop.__call__": [[181, 195], ["numpy.random.randint", "image.crop", "numpy.random.randint"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "name", ",", "image", ",", "label", "=", "sample", "[", "\"name\"", "]", ",", "sample", "[", "\"image\"", "]", ",", "sample", "[", "\"label\"", "]", "\n", "h", ",", "w", "=", "image", ".", "size", "[", ":", "2", "]", "\n", "new_h", ",", "new_w", "=", "self", ".", "output_size", "\n", "top", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "h", "-", "new_h", ")", "\n", "if", "w", "-", "new_w", "==", "0", ":", "\n", "            ", "left", "=", "0", "\n", "", "else", ":", "\n", "            ", "left", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "w", "-", "new_w", ")", "\n", "", "image", ".", "crop", "(", "(", "left", ",", "top", ",", "left", "+", "new_w", ",", "top", "+", "new_h", ")", ")", "\n", "\n", "return", "{", "\"name\"", ":", "name", ",", "\n", "\"image\"", ":", "image", ",", "\n", "\"label\"", ":", "label", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.dataloader.RandomHorizontalFlip.__init__": [[197, 199], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "p", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.dataloader.RandomHorizontalFlip.__call__": [[200, 209], ["random.random", "image.transpose.transpose.transpose", "label.transpose.transpose.transpose"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "name", ",", "image", ",", "label", "=", "sample", "[", "\"name\"", "]", ",", "sample", "[", "\"image\"", "]", ",", "sample", "[", "\"label\"", "]", "\n", "\n", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p", ":", "\n", "            ", "image", "=", "image", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "label", "=", "label", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "return", "{", "\"name\"", ":", "name", ",", "\n", "\"image\"", ":", "image", ",", "\n", "\"label\"", ":", "label", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.dataloader.RandomVerticalFlip.__init__": [[213, 215], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "p", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.dataloader.RandomVerticalFlip.__call__": [[216, 225], ["random.random", "image.transpose.transpose.transpose", "label.transpose.transpose.transpose"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "name", ",", "image", ",", "label", "=", "sample", "[", "'name'", "]", ",", "sample", "[", "'image'", "]", ",", "sample", "[", "'label'", "]", "\n", "\n", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p", ":", "\n", "            ", "image", "=", "image", ".", "transpose", "(", "Image", ".", "FLIP_TOP_BOTTOM", ")", "\n", "label", "=", "label", ".", "transpose", "(", "Image", ".", "FLIP_TOP_BOTTOM", ")", "\n", "", "return", "{", "'name'", ":", "name", ",", "\n", "'image'", ":", "image", ",", "\n", "'label'", ":", "label", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.dataloader.ToTensor.__call__": [[228, 240], ["torch.from_numpy().float().div.convert", "numpy.array", "numpy.array", "torch.from_numpy().float().div.transpose", "torch.from_numpy().float().div", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "name", ",", "image", ",", "label", "=", "sample", "[", "'name'", "]", ",", "sample", "[", "'image'", "]", ",", "sample", "[", "'label'", "]", "\n", "image", "=", "image", ".", "convert", "(", "\"L\"", ")", "\n", "image", "=", "np", ".", "array", "(", "image", ")", "\n", "label", "=", "np", ".", "array", "(", "label", ")", "\n", "image", "=", "image", "[", ":", ",", ":", ",", "None", "]", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "image", "=", "torch", ".", "from_numpy", "(", "image", ")", ".", "float", "(", ")", ".", "div", "(", "255", ")", "\n", "label", "=", "torch", ".", "from_numpy", "(", "label", ")", ".", "float", "(", ")", "\n", "return", "{", "'name'", ":", "name", ",", "\n", "'image'", ":", "image", ",", "\n", "'label'", ":", "label", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.dataloader.Normalize.__init__": [[244, 247], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.dataloader.Normalize.__call__": [[248, 257], ["image.clone.clone.clone", "torch.as_tensor", "torch.as_tensor", "image.clone.clone.sub_().div_", "image.clone.clone.sub_"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "name", ",", "image", ",", "label", "=", "sample", "[", "'name'", "]", ",", "sample", "[", "'image'", "]", ",", "sample", "[", "'label'", "]", "\n", "image", "=", "image", ".", "clone", "(", ")", "\n", "mean", "=", "torch", ".", "as_tensor", "(", "self", ".", "mean", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "image", ".", "device", ")", "\n", "std", "=", "torch", ".", "as_tensor", "(", "self", ".", "std", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "image", ".", "device", ")", "\n", "image", ".", "sub_", "(", "mean", "[", ":", ",", "None", ",", "None", "]", ")", ".", "div_", "(", "std", "[", ":", ",", "None", ",", "None", "]", ")", "\n", "return", "{", "'name'", ":", "name", ",", "\n", "'image'", ":", "image", ",", "\n", "'label'", ":", "label", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.dataloader.RandomGenerator.__init__": [[276, 278], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "output_size", ")", ":", "\n", "        ", "self", ".", "output_size", "=", "output_size", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.dataloader.RandomGenerator.__call__": [[279, 295], ["torch.from_numpy().unsqueeze", "torch.from_numpy", "random.random", "dataloader.random_rot_flip", "scipy.ndimage.interpolation.zoom", "scipy.ndimage.interpolation.zoom", "scipy.ndimage.interpolation.zoom.astype", "scipy.ndimage.interpolation.zoom.long", "random.random", "dataloader.random_rotate", "torch.from_numpy", "scipy.ndimage.interpolation.zoom.astype"], "methods", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.dataloader.random_rot_flip", "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.dataloader.random_rotate"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "image", ",", "label", ",", "name", "=", "sample", "[", "'image'", "]", ",", "sample", "[", "'label'", "]", ",", "sample", "[", "'name'", "]", "\n", "\n", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "            ", "image", ",", "label", "=", "random_rot_flip", "(", "image", ",", "label", ")", "\n", "", "elif", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "            ", "image", ",", "label", "=", "random_rotate", "(", "image", ",", "label", ")", "\n", "", "x", ",", "y", "=", "image", ".", "shape", "\n", "if", "x", "!=", "self", ".", "output_size", "[", "0", "]", "or", "y", "!=", "self", ".", "output_size", "[", "1", "]", ":", "\n", "\n", "            ", "image", "=", "zoom", "(", "image", ",", "(", "self", ".", "output_size", "[", "0", "]", "/", "x", ",", "self", ".", "output_size", "[", "1", "]", "/", "y", ")", ",", "order", "=", "3", ")", "# why not 3?", "\n", "label", "=", "zoom", "(", "label", ",", "(", "self", ".", "output_size", "[", "0", "]", "/", "x", ",", "self", ".", "output_size", "[", "1", "]", "/", "y", ")", ",", "order", "=", "0", ")", "\n", "", "image", "=", "torch", ".", "from_numpy", "(", "image", ".", "astype", "(", "np", ".", "float32", ")", ")", ".", "unsqueeze", "(", "0", ")", "\n", "label", "=", "torch", ".", "from_numpy", "(", "label", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "sample", "=", "{", "'image'", ":", "image", ",", "'label'", ":", "label", ".", "long", "(", ")", ",", "'name'", ":", "name", "}", "\n", "return", "sample", "\n", "", "", "if", "__name__", "==", "\"__main__\"", ":", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.dataloader.random_rot_flip": [[258, 266], ["numpy.random.randint", "numpy.rot90", "numpy.rot90", "numpy.random.randint", "numpy.flip().copy", "numpy.flip().copy", "numpy.flip", "numpy.flip"], "function", ["None"], ["", "", "def", "random_rot_flip", "(", "image", ",", "label", ")", ":", "\n", "    ", "k", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "4", ")", "\n", "image", "=", "np", ".", "rot90", "(", "image", ",", "k", ")", "\n", "label", "=", "np", ".", "rot90", "(", "label", ",", "k", ")", "\n", "axis", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "2", ")", "\n", "image", "=", "np", ".", "flip", "(", "image", ",", "axis", "=", "axis", ")", ".", "copy", "(", ")", "\n", "label", "=", "np", ".", "flip", "(", "label", ",", "axis", "=", "axis", ")", ".", "copy", "(", ")", "\n", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.None.dataloader.random_rotate": [[268, 273], ["numpy.random.randint", "scipy.ndimage.rotate", "scipy.ndimage.rotate"], "function", ["None"], ["", "def", "random_rotate", "(", "image", ",", "label", ")", ":", "\n", "    ", "angle", "=", "np", ".", "random", ".", "randint", "(", "-", "20", ",", "20", ")", "\n", "image", "=", "ndimage", ".", "rotate", "(", "image", ",", "angle", ",", "order", "=", "0", ",", "reshape", "=", "False", ")", "\n", "label", "=", "ndimage", ".", "rotate", "(", "label", ",", "angle", ",", "order", "=", "0", ",", "reshape", "=", "False", ")", "\n", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.utils.test_visualization.Colorize.__init__": [[32, 37], ["test_visualization.colormap_cityscapes", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.utils.test_visualization.colormap_cityscapes"], ["    ", "def", "__init__", "(", "self", ",", "n", "=", "9", ")", ":", "\n", "#self.cmap = colormap(256)", "\n", "        ", "self", ".", "cmap", "=", "colormap_cityscapes", "(", "n", ")", "#cmap\u662f\u989c\u8272\u8868", "\n", "#self.cmap[n] = self.cmap[0] #\u628a\u6700\u540e\u4e00\u7c7b\u7684\u989c\u8272\u8868\u8bbe\u4e3a[0,0,0]", "\n", "self", ".", "cmap", "=", "torch", ".", "from_numpy", "(", "self", ".", "cmap", "[", ":", "n", "]", ")", "# cmap\u7531nump\u6570\u7ec4\u8f6c\u4e3atensor", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.utils.test_visualization.Colorize.__call__": [[38, 56], ["torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze.size", "torch.ByteTensor().fill_", "range", "numpy.transpose", "len", "torch.ByteTensor().fill_.numpy", "torch.from_numpy", "torch.ByteTensor"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "gray_image", ")", ":", "\n", "        ", "gray_image", "=", "torch", ".", "from_numpy", "(", "gray_image", ")", ".", "unsqueeze", "(", "0", ")", "\n", "size", "=", "gray_image", ".", "size", "(", ")", "# \u7f51\u7edcoutput\u7684\u5927\u5c0f", "\n", "color_image", "=", "torch", ".", "ByteTensor", "(", "3", ",", "size", "[", "1", "]", ",", "size", "[", "2", "]", ")", ".", "fill_", "(", "0", ")", "\n", "#\u751f\u62103\u901a\u9053\u7684image\u6a21\u677f", "\n", "\n", "for", "label", "in", "range", "(", "0", ",", "len", "(", "self", ".", "cmap", ")", ")", ":", "# \u4f9d\u6b21\u904d\u5386label\u7684\u989c\u8272\u8868", "\n", "            ", "mask", "=", "gray_image", "[", "0", "]", "==", "label", "\n", "#gray_image[0] \u662f\u5c06\u4e09\u7ef4\u7684\u56fe\u50cf\uff0c\u4ee5\u30101, 10, 10\u3011\u4e3a\u4f8b\uff0c\u53d8\u6210\u4e8c\u7ef4\u301010,10\u3011,\u8fd9\u4e2a\u53c2\u6570\u662f\u5916\u90e8\u4f20\u5165\uff0c\u8fd9\u91cc\u786e\u4fdd\u662f\u4e8c\u7ef4\u5355\u901a\u9053\u5c31\u884c\u4e86", "\n", "#gray_image[0] == label \u610f\u601d\u662f\u5c06 gray_image[0]\u4e2d\u4e3alabel\u503c\u7684\u5143\u7d20\u89c6\u4e3atrue\u6216\u80051\uff0c\u5176\u4ed6\u7684\u5143\u7d20\u4e3aFalse \u62160\uff0c\u5f97\u5230mask\u7684\u5e03\u5c14\u56fe", "\n", "\n", "color_image", "[", "0", "]", "[", "mask", "]", "=", "self", ".", "cmap", "[", "label", "]", "[", "0", "]", "#\u53d6\u53d6\u989c\u8272\u8868\u4e2d\u4e3alabel\u5217\u8868(\u3010a,b,c\u3011)\u7684a", "\n", "#color_image[0]\u662f\u53d6\u4e09\u901a\u9053\u6a21\u677f\u4e2d\u7684\u5355\u901a\u9053 \uff0c\u7136\u540e\u628amask\u653e\u4e0a\u53bb", "\n", "color_image", "[", "1", "]", "[", "mask", "]", "=", "self", ".", "cmap", "[", "label", "]", "[", "1", "]", "# \u53d6b", "\n", "color_image", "[", "2", "]", "[", "mask", "]", "=", "self", ".", "cmap", "[", "label", "]", "[", "2", "]", "#   \u53d6c", "\n", "#print(color_image.size())", "\n", "#return color_image.numpy()", "\n", "", "return", "np", ".", "transpose", "(", "color_image", ".", "numpy", "(", ")", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "", "", "def", "show_test", "(", "base_path", "=", "\"../dataset/prediction/\"", ",", "save_path", "=", "\"../dataset/Synapse/test_visualization\"", ")", ":", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.utils.test_visualization.colormap_cityscapes": [[15, 30], ["numpy.zeros().astype", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.zeros"], "function", ["None"], ["def", "colormap_cityscapes", "(", "n", ")", ":", "\n", "    ", "cmap", "=", "np", ".", "zeros", "(", "[", "n", ",", "3", "]", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "cmap", "[", "0", "]", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "cmap", "[", "1", "]", "=", "np", ".", "array", "(", "[", "255", ",", "0", ",", "0", "]", ")", "\n", "cmap", "[", "2", "]", "=", "np", ".", "array", "(", "[", "255", ",", "255", ",", "0", "]", ")", "\n", "cmap", "[", "3", "]", "=", "np", ".", "array", "(", "[", "0", ",", "255", ",", "255", "]", ")", "\n", "cmap", "[", "4", "]", "=", "np", ".", "array", "(", "[", "255", ",", "0", ",", "255", "]", ")", "\n", "cmap", "[", "5", "]", "=", "np", ".", "array", "(", "[", "0", ",", "255", ",", "0", "]", ")", "\n", "\n", "cmap", "[", "6", "]", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "255", "]", ")", "\n", "cmap", "[", "7", "]", "=", "np", ".", "array", "(", "[", "153", ",", "0", ",", "255", "]", ")", "\n", "cmap", "[", "8", "]", "=", "np", ".", "array", "(", "[", "74", ",", "134", ",", "232", "]", ")", "\n", "\n", "\n", "return", "cmap", "\n", "", "class", "Colorize", ":", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.utils.test_visualization.show_test": [[56, 96], ["glob", "glob.sort", "glob", "glob.sort", "glob", "glob.sort", "range", "os.path.exists", "os.makedirs", "os.makedirs", "os.makedirs", "os.path.join", "os.path.join", "os.path.join", "len", "len", "len", "len", "len", "SimpleITK.ReadImage", "SimpleITK.GetArrayFromImage", "SimpleITK.ReadImage", "SimpleITK.GetArrayFromImage", "nibabel.load", "volums.get_fdata.get_fdata", "range", "len", "len", "len", "scipy.ndimage.interpolation.zoom", "scipy.ndimage.interpolation.zoom", "volums[].transpose", "imageio.imsave", "imageio.imsave", "imageio.imwrite", "test_visualization.Colorize", "test_visualization.Colorize", "[].split", "[].split", "[].split", "[].split", "[].split", "[].split", "pred_list[].split", "label_list[].split", "volums_list[].split"], "function", ["None"], ["", "", "def", "show_test", "(", "base_path", "=", "\"../dataset/prediction/\"", ",", "save_path", "=", "\"../dataset/Synapse/test_visualization\"", ")", ":", "\n", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_path", "+", "\"/pred\"", ")", "\n", "os", ".", "makedirs", "(", "save_path", "+", "\"/label\"", ")", "\n", "os", ".", "makedirs", "(", "save_path", "+", "\"/image\"", ")", "\n", "\n", "\n", "", "pred_list", "=", "glob", "(", "os", ".", "path", ".", "join", "(", "base_path", ",", "\"*_pred.nii.gz\"", ")", ")", "\n", "pred_list", ".", "sort", "(", "reverse", "=", "True", ")", "\n", "label_list", "=", "glob", "(", "os", ".", "path", ".", "join", "(", "base_path", ",", "\"*_gt.nii.gz\"", ")", ")", "\n", "label_list", ".", "sort", "(", "reverse", "=", "True", ")", "\n", "volums_list", "=", "glob", "(", "os", ".", "path", ".", "join", "(", "base_path", ",", "\"*_img.nii.gz\"", ")", ")", "\n", "volums_list", ".", "sort", "(", "reverse", "=", "True", ")", "\n", "#print(pred_list)", "\n", "#print(label_list)", "\n", "#print(volums_list)", "\n", "assert", "len", "(", "pred_list", ")", "==", "len", "(", "label_list", ")", "\n", "assert", "len", "(", "volums_list", ")", "==", "len", "(", "pred_list", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "pred_list", ")", ")", ":", "\n", "        ", "pre", "=", "sitk", ".", "ReadImage", "(", "pred_list", "[", "i", "]", ",", "sitk", ".", "sitkInt8", ")", "\n", "pre", "=", "sitk", ".", "GetArrayFromImage", "(", "pre", ")", "\n", "gt", "=", "sitk", ".", "ReadImage", "(", "label_list", "[", "i", "]", ",", "sitk", ".", "sitkInt8", ")", "\n", "gt", "=", "sitk", ".", "GetArrayFromImage", "(", "gt", ")", "\n", "#volums=sitk.ReadImage(volums_list[i], sitk.sitkInt16) #    \u5343\u4e07\u522b\u7528 sitk\u53d6\u8bfb\u53d6image \u4f1a\u5bfc\u81f4image \u5168\u9ed1\u6216\u8005 \u53ea\u6709\u5668\u5b98\u90e8\u5206", "\n", "#volums=sitk.GetArrayFromImage(volums)", "\n", "volums", "=", "nib", ".", "load", "(", "volums_list", "[", "i", "]", ")", "\n", "volums", "=", "volums", ".", "get_fdata", "(", ")", "\n", "assert", "len", "(", "pre", "[", "0", "]", ")", "==", "len", "(", "gt", "[", "0", "]", ")", "\n", "\n", "assert", "len", "(", "pre", ".", "shape", ")", "==", "3", "\n", "x", ",", "y", "=", "pre", ".", "shape", "[", "1", "]", ",", "pre", ".", "shape", "[", "2", "]", "\n", "for", "ind", "in", "range", "(", "pre", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "pre_slice", "=", "zoom", "(", "pre", "[", "ind", ",", ":", ",", ":", "]", ",", "(", "224", "/", "x", ",", "224", "/", "y", ")", ",", "order", "=", "0", ")", "\n", "gt_slice", "=", "zoom", "(", "gt", "[", "ind", ",", ":", ",", ":", "]", ",", "(", "224", "/", "x", ",", "224", "/", "y", ")", ",", "order", "=", "0", ")", "\n", "volums_slice", "=", "volums", "[", ":", ",", ":", ",", "ind", "]", ".", "transpose", "(", "1", ",", "0", ")", "\n", "imageio", ".", "imsave", "(", "save_path", "+", "\"/pred/\"", "+", "pred_list", "[", "i", "]", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", ".", "split", "(", "\"_\"", ")", "[", "0", "]", "+", "\"_slice{}.png\"", ".", "format", "(", "ind", ")", ",", "Colorize", "(", "9", ")", "(", "pre_slice", ")", ")", "\n", "\n", "imageio", ".", "imsave", "(", "save_path", "+", "\"/label/\"", "+", "label_list", "[", "i", "]", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", ".", "split", "(", "\"_\"", ")", "[", "0", "]", "+", "\"_slice{}.png\"", ".", "format", "(", "ind", ")", ",", "Colorize", "(", "9", ")", "(", "gt_slice", ")", ")", "\n", "imageio", ".", "imwrite", "(", "save_path", "+", "\"/image/\"", "+", "volums_list", "[", "i", "]", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", ".", "split", "(", "\"_\"", ")", "[", "0", "]", "+", "\"_slice{}.png\"", ".", "format", "(", "ind", ")", ",", "volums_slice", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.utils.crop_merge.crop_picture_train": [[14, 44], ["glob.glob", "os.path.exists", "os.makedirs", "os.makedirs", "os.path.join", "PIL.Image.open", "PIL.Image.open", "math.ceil", "math.ceil", "range", "os.path.join", "os.path.join", "range", "image_path.split", "Image.open.crop", "image.crop.save", "Image.open.crop", "label.crop.save", "os.path.join", "os.path.join", "str", "str", "str", "str", "[].split", "[].split", "image_path.split", "label_path.split"], "function", ["None"], ["def", "crop_picture_train", "(", "path", ",", "save_path", ",", "cols", ",", "rows", ",", "overlap", ")", ":", "\n", "#Pad = transforms.Pad(padding=384,padding_mode=\"reflect\")", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "\"image\"", ")", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "\"label\"", ")", ")", "\n", "", "images_list", "=", "glob", "(", "os", ".", "path", ".", "join", "(", "path", ",", "\"*.jpg\"", ")", ")", "\n", "#labels_list = glob(os.path.join(path, \"*.png\"))", "\n", "for", "image_path", "in", "images_list", ":", "\n", "\n", "        ", "image", "=", "Image", ".", "open", "(", "image_path", ")", "\n", "#image = Pad(image)", "\n", "label_path", "=", "image_path", ".", "split", "(", "\".\"", ")", "[", "0", "]", "+", "\".png\"", "\n", "label", "=", "Image", ".", "open", "(", "label_path", ")", "\n", "#label = Pad(label)", "\n", "w", ",", "h", "=", "image", ".", "size", "\n", "crop_rows", "=", "math", ".", "ceil", "(", "h", "/", "(", "rows", "-", "overlap", ")", ")", "\n", "crop_cols", "=", "math", ".", "ceil", "(", "w", "/", "(", "cols", "-", "overlap", ")", ")", "\n", "for", "i", "in", "range", "(", "crop_cols", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "crop_rows", ")", ":", "\n", "                ", "Rx", "=", "(", "i", "+", "1", ")", "*", "cols", "-", "i", "*", "overlap", "\n", "Ry", "=", "(", "j", "+", "1", ")", "*", "rows", "-", "j", "*", "overlap", "\n", "Lx", "=", "Rx", "-", "cols", "\n", "Ly", "=", "Ry", "-", "rows", "\n", "\n", "image_cropped", "=", "image", ".", "crop", "(", "(", "Lx", ",", "Ly", ",", "Rx", ",", "Ry", ")", ")", "\n", "image_cropped", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "\"image/%s\"", "%", "(", "image_path", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", "+", "\"_\"", "+", "str", "(", "j", ")", "+", "\"_\"", "+", "str", "(", "i", ")", "+", "\".png\"", ")", ")", ")", "\n", "\n", "label_cropped", "=", "label", ".", "crop", "(", "(", "Lx", ",", "Ly", ",", "Rx", ",", "Ry", ")", ")", "\n", "\n", "label_cropped", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "\"label/%s\"", "%", "(", "label_path", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", "+", "\"_\"", "+", "str", "(", "j", ")", "+", "\"_\"", "+", "str", "(", "i", ")", "+", "\".png\"", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.utils.crop_merge.crop_picture_test": [[45, 77], ["torchvision.Pad", "glob.glob", "os.path.exists", "os.makedirs", "os.makedirs", "os.path.join", "PIL.Image.open", "PIL.Image.open", "transforms.Pad.", "transforms.Pad.", "range", "os.path.join", "os.path.join", "range", "image_path.split", "Pad.crop", "image.crop.save", "Pad.crop", "label.crop.save", "os.path.join", "os.path.join", "str", "str", "str", "str", "[].split", "[].split", "image_path.split", "label_path.split"], "function", ["None"], ["", "", "", "", "def", "crop_picture_test", "(", "path", ",", "save_path", ",", "cols", ",", "rows", ",", "overlap", ")", ":", "#\u5bf9test\u8fdb\u884c\u955c\u50cf\u586b\u5145 ", "\n", "    ", "Pad", "=", "transforms", ".", "Pad", "(", "padding", "=", "384", ",", "padding_mode", "=", "\"reflect\"", ")", "#\u5f53size\u4e3a1024*1024\u65f6 \u9884\u6d4b\u65f6\u53ea\u4fdd\u7559\u4e2d\u95f4512*512\u7684\u90e8\u5206 ", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "\"image\"", ")", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "\"label\"", ")", ")", "\n", "", "images_list", "=", "glob", "(", "os", ".", "path", ".", "join", "(", "path", ",", "\"*.jpg\"", ")", ")", "\n", "\n", "for", "image_path", "in", "images_list", ":", "\n", "\n", "        ", "image", "=", "Image", ".", "open", "(", "image_path", ")", "\n", "label_path", "=", "image_path", ".", "split", "(", "\".\"", ")", "[", "0", "]", "+", "\".png\"", "\n", "\n", "label", "=", "Image", ".", "open", "(", "label_path", ")", "\n", "w", ",", "h", "=", "image", ".", "size", "#\u539f\u56fe\u5927\u5c0f", "\n", "image", "=", "Pad", "(", "image", ")", "\n", "label", "=", "Pad", "(", "label", ")", "\n", "#w, h = image.size", "\n", "#crop_rows = math.ceil(h/(rows-overlap))", "\n", "#crop_cols = math.ceil(w/(rows-overlap)) ", "\n", "crop_rows", "=", "w", "//", "(", "rows", "-", "overlap", ")", "\n", "crop_cols", "=", "h", "//", "(", "cols", "-", "overlap", ")", "\n", "\n", "for", "i", "in", "range", "(", "crop_cols", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "crop_rows", ")", ":", "\n", "                ", "Rx", "=", "(", "i", "+", "1", ")", "*", "cols", "-", "i", "*", "overlap", "\n", "Ry", "=", "(", "j", "+", "1", ")", "*", "rows", "-", "j", "*", "overlap", "\n", "Lx", "=", "Rx", "-", "cols", "\n", "Ly", "=", "Ry", "-", "rows", "\n", "image_cropped", "=", "image", ".", "crop", "(", "(", "Lx", ",", "Ly", ",", "Rx", ",", "Ry", ")", ")", "\n", "image_cropped", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "\"image/%s\"", "%", "(", "image_path", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", "+", "\"_\"", "+", "str", "(", "j", ")", "+", "\"_\"", "+", "str", "(", "i", ")", "+", "\".png\"", ")", ")", ")", "\n", "label_cropped", "=", "label", ".", "crop", "(", "(", "Lx", ",", "Ly", ",", "Rx", ",", "Ry", ")", ")", "\n", "label_cropped", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "\"label/%s\"", "%", "(", "label_path", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", "+", "\"_\"", "+", "str", "(", "j", ")", "+", "\"_\"", "+", "str", "(", "i", ")", "+", "\".png\"", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.utils.crop_merge.resize": [[80, 98], ["glob.glob", "os.path.exists", "os.makedirs", "os.makedirs", "os.path.join", "PIL.Image.open", "PIL.Image.open", "image.resize.resize", "label.resize.resize", "image.resize.save", "label.resize.save", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "image_path.split", "[].split", "[].split", "image_path.split", "label_path.split"], "function", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.utils.crop_merge.resize", "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.utils.crop_merge.resize"], ["", "", "", "", "def", "resize", "(", "path", ",", "save_path", ",", "size", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "\"image\"", ")", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "\"label\"", ")", ")", "\n", "", "images_list", "=", "glob", "(", "os", ".", "path", ".", "join", "(", "path", ",", "\"*.jpg\"", ")", ")", "\n", "#labels_list = glob(os.path.join(path, \"*.png\"))", "\n", "for", "image_path", "in", "images_list", ":", "\n", "#image_path = image_path.split(\"//\")[0]+\"/\"+image_path.split(\"//\")[-1]", "\n", "        ", "image", "=", "Image", ".", "open", "(", "image_path", ")", "\n", "label_path", "=", "image_path", ".", "split", "(", "\".\"", ")", "[", "0", "]", "+", "\".png\"", "\n", "#os.path.join(image_path.split(\".\")[0],\"_1stHO.png\")", "\n", "label", "=", "Image", ".", "open", "(", "label_path", ")", "\n", "image_interpolation", "=", "Image", ".", "BILINEAR", "\n", "label_interpolation", "=", "Image", ".", "NEAREST", "\n", "image", "=", "image", ".", "resize", "(", "(", "size", ",", "size", ")", ",", "image_interpolation", ")", "\n", "label", "=", "label", ".", "resize", "(", "(", "size", ",", "size", ")", ",", "label_interpolation", ")", "\n", "image", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "\"image/%s\"", "%", "(", "image_path", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", "+", "\".png\"", ")", ")", ")", "\n", "label", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "\"label/%s\"", "%", "(", "label_path", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", "+", "\".png\"", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.utils.crop_merge.resize_new": [[100, 119], ["glob.glob", "os.path.exists", "os.makedirs", "os.makedirs", "os.path.join", "PIL.Image.open", "os.path.join", "PIL.Image.open", "image.resize.resize", "label.resize.resize", "image.resize.save", "label.resize.save", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "image_path.split", "path.split", "[].split", "[].split", "image_path.split", "os.path.join.split"], "function", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.utils.crop_merge.resize", "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.utils.crop_merge.resize"], ["", "", "def", "resize_new", "(", "path", ",", "save_path", ",", "size", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "\"image\"", ")", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "\"label\"", ")", ")", "\n", "", "images_list", "=", "glob", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "join", "(", "path", ",", "\"image\"", ")", ",", "\"*.png\"", ")", ")", "\n", "#labels_list = glob(os.path.join(path, \"*.png\"))", "\n", "for", "image_path", "in", "images_list", ":", "\n", "#image_path = image_path.split(\"//\")[0]+\"/\"+image_path.split(\"//\")[-1]", "\n", "        ", "image", "=", "Image", ".", "open", "(", "image_path", ")", "\n", "label_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "join", "(", "path", ",", "\"label\"", ")", ",", "image_path", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ")", "\n", "path", ".", "split", "(", "\".\"", ")", "[", "0", "]", "+", "\".png\"", "\n", "#os.path.join(image_path.split(\".\")[0],\"_1stHO.png\")", "\n", "label", "=", "Image", ".", "open", "(", "label_path", ")", "\n", "image_interpolation", "=", "Image", ".", "BILINEAR", "\n", "label_interpolation", "=", "Image", ".", "NEAREST", "\n", "image", "=", "image", ".", "resize", "(", "(", "size", ",", "size", ")", ",", "image_interpolation", ")", "\n", "label", "=", "label", ".", "resize", "(", "(", "size", ",", "size", ")", ",", "label_interpolation", ")", "\n", "image", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "\"image/%s\"", "%", "(", "image_path", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", "+", "\".png\"", ")", ")", ")", "\n", "label", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "\"label/%s\"", "%", "(", "label_path", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", "+", "\".png\"", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.utils.crop_merge.merge_picture": [[120, 175], ["glob.glob", "PIL.Image.open", "numpy.zeros", "numpy.zeros", "range", "PIL.Image.fromarray", "merge_image.crop.crop", "merge_image.crop.save", "os.path.join", "len", "PIL.Image.open", "numpy.zeros", "numpy.zeros", "numpy.array", "int", "int", "numpy.uint8", "os.path.join", "name.split", "[].split", "int", "int", "int", "int", "[].split", "filename[].split", "name.split", "filename[].split"], "function", ["None"], ["", "", "def", "merge_picture", "(", "path", ",", "picturename", ",", "save_path", ",", "cols", ",", "rows", ",", "overlap", ")", ":", "\n", "    ", "filename", "=", "glob", "(", "os", ".", "path", ".", "join", "(", "path", ",", "picturename", "+", "\"*.png\"", ")", ")", "\n", "\n", "max_rows", "=", "0", "\n", "max_cols", "=", "0", "\n", "for", "name", "in", "filename", ":", "\n", "        ", "row", "=", "name", ".", "split", "(", "\"_\"", ")", "[", "-", "2", "]", "\n", "col", "=", "name", ".", "split", "(", "\"_\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "if", "(", "int", "(", "row", ")", ">", "max_rows", ")", ":", "\n", "            ", "max_rows", "=", "int", "(", "row", ")", "\n", "", "if", "(", "int", "(", "col", ")", ">", "max_cols", ")", ":", "\n", "            ", "max_cols", "=", "int", "(", "cols", ")", "\n", "", "", "image", "=", "Image", ".", "open", "(", "filename", "[", "0", "]", ")", "\n", "w", ",", "h", "=", "image", ".", "size", "\n", "#w=64", "\n", "#h=64", "\n", "num_rows", "=", "max_rows", "+", "1", "\n", "num_cols", "=", "max_rows", "+", "1", "\n", "\n", "dst", "=", "np", ".", "zeros", "(", "(", "num_rows", "*", "h", "-", "(", "num_rows", "-", "1", ")", "*", "overlap", ",", "num_cols", "*", "w", "-", "(", "num_cols", "-", "1", ")", "*", "overlap", ")", ")", "\n", "dst_count", "=", "np", ".", "zeros", "(", "(", "num_rows", "*", "h", "-", "(", "num_rows", "-", "1", ")", "*", "overlap", ",", "num_cols", "*", "w", "-", "(", "num_cols", "-", "1", ")", "*", "overlap", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "filename", ")", ")", ":", "\n", "        ", "image", "=", "Image", ".", "open", "(", "filename", "[", "i", "]", ")", "\n", "#image = image.crop((95,95,95+64,95+64))", "\n", "dst_i", "=", "np", ".", "zeros", "(", "(", "num_rows", "*", "h", "-", "(", "num_rows", "-", "1", ")", "*", "overlap", ",", "num_cols", "*", "w", "-", "(", "num_cols", "-", "1", ")", "*", "overlap", ")", ")", "\n", "dst_i_count", "=", "np", ".", "zeros", "(", "(", "num_rows", "*", "h", "-", "(", "num_rows", "-", "1", ")", "*", "overlap", ",", "num_cols", "*", "w", "-", "(", "num_cols", "-", "1", ")", "*", "overlap", ")", ")", "\n", "image", "=", "np", ".", "array", "(", "image", ")", "\n", "cols_th", "=", "int", "(", "filename", "[", "i", "]", ".", "split", "(", "\"_\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", ")", "\n", "rows_th", "=", "int", "(", "filename", "[", "i", "]", ".", "split", "(", "\"_\"", ")", "[", "-", "2", "]", ")", "\n", "Ry", "=", "(", "rows_th", "+", "1", ")", "*", "h", "-", "rows_th", "*", "overlap", "\n", "Rx", "=", "(", "cols_th", "+", "1", ")", "*", "w", "-", "cols_th", "*", "overlap", "\n", "\n", "Lx", "=", "Rx", "-", "w", "\n", "Ly", "=", "Ry", "-", "h", "\n", "#print(Ly, Ry, Lx,Rx)", "\n", "#print(dst_i[Ly:Ry, Lx:Rx].shape)", "\n", "\n", "dst_i", "[", "Ly", ":", "Ry", ",", "Lx", ":", "Rx", "]", "=", "image", "\n", "\n", "dst_i_count", "[", "Ly", ":", "Ry", ",", "Lx", ":", "Rx", "]", "=", "1", "\n", "dst", "+=", "dst_i", "\n", "dst_count", "+=", "dst_i_count", "\n", "", "merge_pic", "=", "dst", "/", "dst_count", "\n", "\"\"\"\n    h,w=merge_pic.shape\n    for i in range(h):\n        for j in  range(w):\n            if np.uint8(merge_pic)[i][j]!=0:\n                print(merge_pic[i][j])\n    \"\"\"", "\n", "merge_image", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "merge_pic", ")", ")", "\n", "\n", "merge_image", "=", "merge_image", ".", "crop", "(", "(", "0", ",", "0", ",", "cols", ",", "rows", ")", ")", "\n", "merge_image", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "picturename", "+", "\".png\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.spectral.SpectralNorm.__init__": [[15, 22], ["torch.nn.Module.__init__", "spectral.SpectralNorm._made_params", "spectral.SpectralNorm._make_params"], "methods", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__init__", "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.spectral.SpectralNorm._made_params", "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.spectral.SpectralNorm._make_params"], ["    ", "def", "__init__", "(", "self", ",", "module", ",", "name", "=", "'weight'", ",", "power_iterations", "=", "1", ")", ":", "\n", "        ", "super", "(", "SpectralNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "module", "=", "module", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "power_iterations", "=", "power_iterations", "\n", "if", "not", "self", ".", "_made_params", "(", ")", ":", "\n", "            ", "self", ".", "_make_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.spectral.SpectralNorm._update_u_v": [[23, 36], ["getattr", "getattr", "getattr", "range", "getattr.dot", "setattr", "spectral.l2normalize", "spectral.l2normalize", "getattr.view().mv", "torch.mv", "torch.mv", "torch.mv", "torch.mv", "torch.mv", "torch.mv", "torch.mv", "torch.mv", "getattr.dot.expand_as", "torch.t", "torch.t", "torch.t", "torch.t", "getattr.view", "getattr.view", "getattr.view"], "methods", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.spectral.l2normalize", "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.spectral.l2normalize"], ["", "", "def", "_update_u_v", "(", "self", ")", ":", "\n", "        ", "u", "=", "getattr", "(", "self", ".", "module", ",", "self", ".", "name", "+", "\"_u\"", ")", "\n", "v", "=", "getattr", "(", "self", ".", "module", ",", "self", ".", "name", "+", "\"_v\"", ")", "\n", "w", "=", "getattr", "(", "self", ".", "module", ",", "self", ".", "name", "+", "\"_bar\"", ")", "\n", "\n", "height", "=", "w", ".", "data", ".", "shape", "[", "0", "]", "\n", "for", "_", "in", "range", "(", "self", ".", "power_iterations", ")", ":", "\n", "            ", "v", ".", "data", "=", "l2normalize", "(", "torch", ".", "mv", "(", "torch", ".", "t", "(", "w", ".", "view", "(", "height", ",", "-", "1", ")", ".", "data", ")", ",", "u", ".", "data", ")", ")", "\n", "u", ".", "data", "=", "l2normalize", "(", "torch", ".", "mv", "(", "w", ".", "view", "(", "height", ",", "-", "1", ")", ".", "data", ",", "v", ".", "data", ")", ")", "\n", "\n", "# sigma = torch.dot(u.data, torch.mv(w.view(height,-1).data, v.data))", "\n", "", "sigma", "=", "u", ".", "dot", "(", "w", ".", "view", "(", "height", ",", "-", "1", ")", ".", "mv", "(", "v", ")", ")", "\n", "setattr", "(", "self", ".", "module", ",", "self", ".", "name", ",", "w", "/", "sigma", ".", "expand_as", "(", "w", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.spectral.SpectralNorm._made_params": [[37, 45], ["getattr", "getattr", "getattr"], "methods", ["None"], ["", "def", "_made_params", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "u", "=", "getattr", "(", "self", ".", "module", ",", "self", ".", "name", "+", "\"_u\"", ")", "\n", "v", "=", "getattr", "(", "self", ".", "module", ",", "self", ".", "name", "+", "\"_v\"", ")", "\n", "w", "=", "getattr", "(", "self", ".", "module", ",", "self", ".", "name", "+", "\"_bar\"", ")", "\n", "return", "True", "\n", "", "except", "AttributeError", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.spectral.SpectralNorm._make_params": [[47, 64], ["getattr", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "spectral.l2normalize", "spectral.l2normalize", "torch.nn.Parameter", "torch.nn.Parameter", "spectral.SpectralNorm.module.register_parameter", "spectral.SpectralNorm.module.register_parameter", "spectral.SpectralNorm.module.register_parameter", "getattr.data.new().normal_", "getattr.data.new().normal_", "getattr.view", "getattr.data.new", "getattr.data.new"], "methods", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.spectral.l2normalize", "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.spectral.l2normalize"], ["", "", "def", "_make_params", "(", "self", ")", ":", "\n", "        ", "w", "=", "getattr", "(", "self", ".", "module", ",", "self", ".", "name", ")", "\n", "\n", "height", "=", "w", ".", "data", ".", "shape", "[", "0", "]", "\n", "width", "=", "w", ".", "view", "(", "height", ",", "-", "1", ")", ".", "data", ".", "shape", "[", "1", "]", "\n", "\n", "u", "=", "Parameter", "(", "w", ".", "data", ".", "new", "(", "height", ")", ".", "normal_", "(", "0", ",", "1", ")", ",", "requires_grad", "=", "False", ")", "\n", "v", "=", "Parameter", "(", "w", ".", "data", ".", "new", "(", "width", ")", ".", "normal_", "(", "0", ",", "1", ")", ",", "requires_grad", "=", "False", ")", "\n", "u", ".", "data", "=", "l2normalize", "(", "u", ".", "data", ")", "\n", "v", ".", "data", "=", "l2normalize", "(", "v", ".", "data", ")", "\n", "w_bar", "=", "Parameter", "(", "w", ".", "data", ")", "\n", "\n", "del", "self", ".", "module", ".", "_parameters", "[", "self", ".", "name", "]", "\n", "\n", "self", ".", "module", ".", "register_parameter", "(", "self", ".", "name", "+", "\"_u\"", ",", "u", ")", "\n", "self", ".", "module", ".", "register_parameter", "(", "self", ".", "name", "+", "\"_v\"", ",", "v", ")", "\n", "self", ".", "module", ".", "register_parameter", "(", "self", ".", "name", "+", "\"_bar\"", ",", "w_bar", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.spectral.SpectralNorm.forward": [[66, 69], ["spectral.SpectralNorm._update_u_v", "spectral.SpectralNorm.module.forward"], "methods", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.spectral.SpectralNorm._update_u_v", "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.batchnorm._SynchronizedBatchNorm.forward"], ["", "def", "forward", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "self", ".", "_update_u_v", "(", ")", "\n", "return", "self", ".", "module", ".", "forward", "(", "*", "args", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.spectral.l2normalize": [[10, 12], ["v.norm"], "function", ["None"], ["def", "l2normalize", "(", "v", ",", "eps", "=", "1e-12", ")", ":", "\n", "    ", "return", "v", "/", "(", "v", ".", "norm", "(", ")", "+", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.feature_projection.Paraphraser.__init__": [[10, 25], ["torch.Module.__init__", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d"], "methods", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Paraphraser", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "leakyrelu", "=", "nn", ".", "LeakyReLU", "(", "0.1", ")", "\n", "#      self.bn0 = nn.BatchNorm2d(in_planes)", "\n", "self", ".", "conv0", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "in_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "#      self.bn1 = nn.BatchNorm2d(planes)", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "#      self.bn2 = nn.BatchNorm2d(planes)", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "#      self.bn0_de = nn.BatchNorm2d(planes)", "\n", "self", ".", "deconv0", "=", "nn", ".", "ConvTranspose2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "#      self.bn1_de = nn.BatchNorm2d(in_planes)", "\n", "self", ".", "deconv1", "=", "nn", ".", "ConvTranspose2d", "(", "planes", ",", "in_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "#      self.bn2_de = nn.BatchNorm2d(in_planes)", "\n", "self", ".", "deconv2", "=", "nn", ".", "ConvTranspose2d", "(", "in_planes", ",", "in_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.feature_projection.Paraphraser.forward": [[31, 55], ["feature_projection.Paraphraser.leakyrelu", "feature_projection.Paraphraser.leakyrelu", "feature_projection.Paraphraser.leakyrelu", "feature_projection.Paraphraser.leakyrelu", "feature_projection.Paraphraser.leakyrelu", "feature_projection.Paraphraser.leakyrelu", "feature_projection.Paraphraser.leakyrelu", "feature_projection.Paraphraser.leakyrelu", "feature_projection.Paraphraser.leakyrelu", "feature_projection.Paraphraser.leakyrelu", "feature_projection.Paraphraser.leakyrelu", "feature_projection.Paraphraser.leakyrelu", "feature_projection.Paraphraser.conv0", "feature_projection.Paraphraser.conv1", "feature_projection.Paraphraser.conv2", "feature_projection.Paraphraser.deconv0", "feature_projection.Paraphraser.deconv1", "feature_projection.Paraphraser.deconv2", "feature_projection.Paraphraser.conv0", "feature_projection.Paraphraser.conv1", "feature_projection.Paraphraser.conv2", "feature_projection.Paraphraser.deconv0", "feature_projection.Paraphraser.deconv1", "feature_projection.Paraphraser.deconv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "mode", ")", ":", "\n", "\n", "        ", "if", "mode", "==", "0", ":", "\n", "## encoder", "\n", "         ", "out", "=", "self", ".", "leakyrelu", "(", "(", "self", ".", "conv0", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "leakyrelu", "(", "(", "self", ".", "conv1", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "leakyrelu", "(", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "## decoder", "\n", "out", "=", "self", ".", "leakyrelu", "(", "(", "self", ".", "deconv0", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "leakyrelu", "(", "(", "self", ".", "deconv1", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "leakyrelu", "(", "(", "self", ".", "deconv2", "(", "out", ")", ")", ")", "\n", "\n", "\n", "", "if", "mode", "==", "1", ":", "\n", "         ", "out", "=", "self", ".", "leakyrelu", "(", "(", "self", ".", "conv0", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "leakyrelu", "(", "(", "self", ".", "conv1", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "leakyrelu", "(", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "\n", "## only throw decoder", "\n", "", "if", "mode", "==", "2", ":", "\n", "         ", "out", "=", "self", ".", "leakyrelu", "(", "(", "self", ".", "deconv0", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "leakyrelu", "(", "(", "self", ".", "deconv1", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "leakyrelu", "(", "(", "self", ".", "deconv2", "(", "out", ")", ")", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.feature_projection.Translator.__init__": [[58, 67], ["torch.Module.__init__", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Translator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "leakyrelu", "=", "nn", ".", "LeakyReLU", "(", "0.1", ")", "\n", "#      self.bn0 = nn.BatchNorm2d(in_planes)", "\n", "self", ".", "conv0", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "in_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "#     self.bn1 = nn.BatchNorm2d(planes)", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "#     self.bn2 = nn.BatchNorm2d(planes)", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.feature_projection.Translator.forward": [[68, 73], ["feature_projection.Translator.leakyrelu", "feature_projection.Translator.leakyrelu", "feature_projection.Translator.leakyrelu", "feature_projection.Translator.conv0", "feature_projection.Translator.conv1", "feature_projection.Translator.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "leakyrelu", "(", "(", "self", ".", "conv0", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "leakyrelu", "(", "(", "self", ".", "conv1", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "leakyrelu", "(", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.feature_projection.SpatialNet.__init__": [[75, 90], ["torch.Module.__init__", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d"], "methods", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "SpatialNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "leakyrelu", "=", "nn", ".", "LeakyReLU", "(", "0.1", ")", "\n", "#      self.bn0 = nn.BatchNorm2d(in_planes)", "\n", "self", ".", "conv0", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "in_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "#      self.bn1 = nn.BatchNorm2d(planes)", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "#      self.bn2 = nn.BatchNorm2d(planes)", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "#      self.bn0_de = nn.BatchNorm2d(planes)", "\n", "self", ".", "deconv0", "=", "nn", ".", "ConvTranspose2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "#      self.bn1_de = nn.BatchNorm2d(in_planes)", "\n", "self", ".", "deconv1", "=", "nn", ".", "ConvTranspose2d", "(", "planes", ",", "in_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "#      self.bn2_de = nn.BatchNorm2d(in_planes)", "\n", "self", ".", "deconv2", "=", "nn", ".", "ConvTranspose2d", "(", "in_planes", ",", "in_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.feature_projection.SpatialNet.forward": [[93, 117], ["feature_projection.SpatialNet.leakyrelu", "feature_projection.SpatialNet.leakyrelu", "feature_projection.SpatialNet.leakyrelu", "feature_projection.SpatialNet.leakyrelu", "feature_projection.SpatialNet.leakyrelu", "feature_projection.SpatialNet.leakyrelu", "feature_projection.SpatialNet.leakyrelu", "feature_projection.SpatialNet.leakyrelu", "feature_projection.SpatialNet.leakyrelu", "feature_projection.SpatialNet.leakyrelu", "feature_projection.SpatialNet.leakyrelu", "feature_projection.SpatialNet.leakyrelu", "feature_projection.SpatialNet.conv0", "feature_projection.SpatialNet.conv1", "feature_projection.SpatialNet.conv2", "feature_projection.SpatialNet.deconv0", "feature_projection.SpatialNet.deconv1", "feature_projection.SpatialNet.deconv2", "feature_projection.SpatialNet.conv0", "feature_projection.SpatialNet.conv1", "feature_projection.SpatialNet.conv2", "feature_projection.SpatialNet.deconv0", "feature_projection.SpatialNet.deconv1", "feature_projection.SpatialNet.deconv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "mode", ")", ":", "\n", "\n", "        ", "if", "mode", "==", "0", ":", "\n", "## encoder", "\n", "         ", "out", "=", "self", ".", "leakyrelu", "(", "(", "self", ".", "conv0", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "leakyrelu", "(", "(", "self", ".", "conv1", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "leakyrelu", "(", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "## decoder", "\n", "out", "=", "self", ".", "leakyrelu", "(", "(", "self", ".", "deconv0", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "leakyrelu", "(", "(", "self", ".", "deconv1", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "leakyrelu", "(", "(", "self", ".", "deconv2", "(", "out", ")", ")", ")", "\n", "\n", "\n", "", "if", "mode", "==", "1", ":", "\n", "         ", "out", "=", "self", ".", "leakyrelu", "(", "(", "self", ".", "conv0", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "leakyrelu", "(", "(", "self", ".", "conv1", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "leakyrelu", "(", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "\n", "## only throw decoder", "\n", "", "if", "mode", "==", "2", ":", "\n", "         ", "out", "=", "self", ".", "leakyrelu", "(", "(", "self", ".", "deconv0", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "leakyrelu", "(", "(", "self", ".", "deconv1", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "leakyrelu", "(", "(", "self", ".", "deconv2", "(", "out", ")", ")", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.feature_projection.ChannleNet.__init__": [[119, 135], ["torch.Module.__init__", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d"], "methods", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "ChannleNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "leakyrelu", "=", "nn", ".", "LeakyReLU", "(", "0.1", ")", "\n", "#      self.bn0 = nn.BatchNorm2d(in_planes) ", "\n", "self", ".", "conv0", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "in_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "#      self.bn1 = nn.BatchNorm2d(planes) ", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "#      self.bn2 = nn.BatchNorm2d(planes) 64*64->1*1", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "64", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "\n", "#      self.bn0_de = nn.BatchNorm2d(planes) ", "\n", "self", ".", "deconv0", "=", "nn", ".", "ConvTranspose2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "64", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "#      self.bn1_de = nn.BatchNorm2d(in_planes)", "\n", "self", ".", "deconv1", "=", "nn", ".", "ConvTranspose2d", "(", "planes", ",", "in_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "#      self.bn2_de = nn.BatchNorm2d(in_planes)", "\n", "self", ".", "deconv2", "=", "nn", ".", "ConvTranspose2d", "(", "in_planes", ",", "in_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.feature_projection.ChannleNet.forward": [[141, 165], ["feature_projection.ChannleNet.leakyrelu", "feature_projection.ChannleNet.leakyrelu", "feature_projection.ChannleNet.leakyrelu", "feature_projection.ChannleNet.leakyrelu", "feature_projection.ChannleNet.leakyrelu", "feature_projection.ChannleNet.leakyrelu", "feature_projection.ChannleNet.leakyrelu", "feature_projection.ChannleNet.leakyrelu", "feature_projection.ChannleNet.leakyrelu", "feature_projection.ChannleNet.leakyrelu", "feature_projection.ChannleNet.leakyrelu", "feature_projection.ChannleNet.leakyrelu", "feature_projection.ChannleNet.conv0", "feature_projection.ChannleNet.conv1", "feature_projection.ChannleNet.conv2", "feature_projection.ChannleNet.deconv0", "feature_projection.ChannleNet.deconv1", "feature_projection.ChannleNet.deconv2", "feature_projection.ChannleNet.conv0", "feature_projection.ChannleNet.conv1", "feature_projection.ChannleNet.conv2", "feature_projection.ChannleNet.deconv0", "feature_projection.ChannleNet.deconv1", "feature_projection.ChannleNet.deconv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "mode", ")", ":", "\n", "\n", "        ", "if", "mode", "==", "0", ":", "\n", "## encoder", "\n", "         ", "out", "=", "self", ".", "leakyrelu", "(", "(", "self", ".", "conv0", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "leakyrelu", "(", "(", "self", ".", "conv1", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "leakyrelu", "(", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "## decoder", "\n", "out", "=", "self", ".", "leakyrelu", "(", "(", "self", ".", "deconv0", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "leakyrelu", "(", "(", "self", ".", "deconv1", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "leakyrelu", "(", "(", "self", ".", "deconv2", "(", "out", ")", ")", ")", "\n", "\n", "\n", "", "if", "mode", "==", "1", ":", "\n", "         ", "out", "=", "self", ".", "leakyrelu", "(", "(", "self", ".", "conv0", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "leakyrelu", "(", "(", "self", ".", "conv1", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "leakyrelu", "(", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "\n", "## only throw decoder", "\n", "", "if", "mode", "==", "2", ":", "\n", "         ", "out", "=", "self", ".", "leakyrelu", "(", "(", "self", ".", "deconv0", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "leakyrelu", "(", "(", "self", ".", "deconv1", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "leakyrelu", "(", "(", "self", ".", "deconv2", "(", "out", ")", ")", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.MobileNetV2.InvertedResidual.__init__": [[26, 57], ["torch.Module.__init__", "round", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "BatchNorm", "torch.ReLU6", "torch.Conv2d", "BatchNorm", "torch.Conv2d", "BatchNorm", "torch.ReLU6", "torch.Conv2d", "BatchNorm", "torch.ReLU6", "torch.Conv2d", "BatchNorm"], "methods", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inp", ",", "oup", ",", "stride", ",", "expand_ratio", ")", ":", "\n", "        ", "super", "(", "InvertedResidual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "\n", "hidden_dim", "=", "round", "(", "inp", "*", "expand_ratio", ")", "\n", "self", ".", "use_res_connect", "=", "self", ".", "stride", "==", "1", "and", "inp", "==", "oup", "\n", "\n", "if", "expand_ratio", "==", "1", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "# dw", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "hidden_dim", ",", "3", ",", "stride", ",", "1", ",", "groups", "=", "hidden_dim", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", ",", "\n", "# pw-linear", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "oup", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "# pw", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "hidden_dim", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", ",", "\n", "# dw", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "hidden_dim", ",", "3", ",", "stride", ",", "1", ",", "groups", "=", "hidden_dim", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", ",", "\n", "# pw-linear", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "oup", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.MobileNetV2.InvertedResidual.forward": [[59, 64], ["MobileNetV2.InvertedResidual.conv", "MobileNetV2.InvertedResidual.conv"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "use_res_connect", ":", "\n", "            ", "return", "x", "+", "self", ".", "conv", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.MobileNetV2.MobileNetV2.__init__": [[67, 109], ["torch.Module.__init__", "int", "MobileNetV2.MobileNetV2.features.append", "torch.Sequential", "torch.Sequential", "MobileNetV2.MobileNetV2._initialize_weights", "int", "MobileNetV2.conv_bn", "int", "range", "MobileNetV2.conv_1x1_bn", "torch.Dropout", "torch.Linear", "MobileNetV2.MobileNetV2.features.append", "MobileNetV2.MobileNetV2.features.append", "block", "block"], "methods", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__init__", "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.MobileNetV2.MobileNetV2._initialize_weights", "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.MobileNetV2.conv_bn", "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.MobileNetV2.conv_1x1_bn"], ["    ", "def", "__init__", "(", "self", ",", "n_class", "=", "1000", ",", "input_size", "=", "224", ",", "width_mult", "=", "1.", ")", ":", "\n", "        ", "super", "(", "MobileNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "block", "=", "InvertedResidual", "\n", "input_channel", "=", "32", "\n", "last_channel", "=", "1280", "\n", "interverted_residual_setting", "=", "[", "\n", "# t, c, n, s", "\n", "[", "1", ",", "16", ",", "1", ",", "1", "]", ",", "\n", "[", "6", ",", "24", ",", "2", ",", "2", "]", ",", "\n", "[", "6", ",", "32", ",", "3", ",", "2", "]", ",", "\n", "[", "6", ",", "64", ",", "4", ",", "2", "]", ",", "\n", "[", "6", ",", "96", ",", "3", ",", "1", "]", ",", "\n", "[", "6", ",", "160", ",", "3", ",", "2", "]", ",", "\n", "[", "6", ",", "320", ",", "1", ",", "1", "]", ",", "\n", "]", "\n", "\n", "# building first layer", "\n", "assert", "input_size", "%", "32", "==", "0", "\n", "input_channel", "=", "int", "(", "input_channel", "*", "width_mult", ")", "\n", "self", ".", "last_channel", "=", "int", "(", "last_channel", "*", "width_mult", ")", "if", "width_mult", ">", "1.0", "else", "last_channel", "\n", "self", ".", "features", "=", "[", "conv_bn", "(", "1", ",", "input_channel", ",", "2", ")", "]", "\n", "# building inverted residual blocks", "\n", "for", "t", ",", "c", ",", "n", ",", "s", "in", "interverted_residual_setting", ":", "\n", "            ", "output_channel", "=", "int", "(", "c", "*", "width_mult", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                ", "if", "i", "==", "0", ":", "\n", "                    ", "self", ".", "features", ".", "append", "(", "block", "(", "input_channel", ",", "output_channel", ",", "s", ",", "expand_ratio", "=", "t", ")", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "features", ".", "append", "(", "block", "(", "input_channel", ",", "output_channel", ",", "1", ",", "expand_ratio", "=", "t", ")", ")", "\n", "", "input_channel", "=", "output_channel", "\n", "# building last several layers", "\n", "", "", "self", ".", "features", ".", "append", "(", "conv_1x1_bn", "(", "input_channel", ",", "self", ".", "last_channel", ")", ")", "\n", "# make it nn.Sequential", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "features", ")", "\n", "\n", "# building classifier", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", "0.2", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "last_channel", ",", "n_class", ")", ",", "\n", ")", "\n", "\n", "self", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.MobileNetV2.MobileNetV2.forward": [[110, 115], ["MobileNetV2.MobileNetV2.features", "MobileNetV2.MobileNetV2.mean().mean", "MobileNetV2.MobileNetV2.classifier", "MobileNetV2.MobileNetV2.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "x", ".", "mean", "(", "3", ")", ".", "mean", "(", "2", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.MobileNetV2.MobileNetV2._initialize_weights": [[116, 133], ["MobileNetV2.MobileNetV2.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.size", "m.weight.data.normal_", "m.bias.data.zero_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "n", "=", "m", ".", "weight", ".", "size", "(", "1", ")", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "SynchronizedBatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.MobileNetV2.conv_bn": [[9, 14], ["torch.Sequential", "torch.Conv2d", "BatchNorm", "torch.ReLU6"], "function", ["None"], ["def", "conv_bn", "(", "inp", ",", "oup", ",", "stride", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "oup", ",", "3", ",", "stride", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "oup", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.MobileNetV2.conv_1x1_bn": [[17, 22], ["torch.Sequential", "torch.Conv2d", "BatchNorm", "torch.ReLU6"], "function", ["None"], ["", "def", "conv_1x1_bn", "(", "inp", ",", "oup", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "oup", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.MobileNetV2_unet.MobileNetV2_unet.__init__": [[14, 41], ["torch.Module.__init__", "networks.MobileNetV2.MobileNetV2", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "networks.MobileNetV2.InvertedResidual", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "networks.MobileNetV2.InvertedResidual", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "networks.MobileNetV2.InvertedResidual", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "networks.MobileNetV2.InvertedResidual", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "MobileNetV2_unet.MobileNetV2_unet._init_weights", "MobileNetV2_unet.MobileNetV2_unet.backbone.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__init__", "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.MobileNetV2_unet.MobileNetV2_unet._init_weights"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "2", ",", "pre_trained", "=", "'weights/mobilenet_v2.pth.tar'", ",", "mode", "=", "'train'", ")", ":", "\n", "        ", "super", "(", "MobileNetV2_unet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "backbone", "=", "MobileNetV2", "(", ")", "\n", "\n", "self", ".", "dconv1", "=", "nn", ".", "ConvTranspose2d", "(", "1280", ",", "96", ",", "4", ",", "padding", "=", "1", ",", "stride", "=", "2", ")", "\n", "self", ".", "invres1", "=", "InvertedResidual", "(", "192", ",", "96", ",", "1", ",", "6", ")", "\n", "\n", "self", ".", "dconv2", "=", "nn", ".", "ConvTranspose2d", "(", "96", ",", "32", ",", "4", ",", "padding", "=", "1", ",", "stride", "=", "2", ")", "\n", "self", ".", "invres2", "=", "InvertedResidual", "(", "64", ",", "32", ",", "1", ",", "6", ")", "\n", "\n", "self", ".", "dconv3", "=", "nn", ".", "ConvTranspose2d", "(", "32", ",", "24", ",", "4", ",", "padding", "=", "1", ",", "stride", "=", "2", ")", "\n", "self", ".", "invres3", "=", "InvertedResidual", "(", "48", ",", "24", ",", "1", ",", "6", ")", "\n", "\n", "self", ".", "dconv4", "=", "nn", ".", "ConvTranspose2d", "(", "24", ",", "16", ",", "4", ",", "padding", "=", "1", ",", "stride", "=", "2", ")", "\n", "self", ".", "invres4", "=", "InvertedResidual", "(", "32", ",", "16", ",", "1", ",", "6", ")", "\n", "\n", "self", ".", "conv_last", "=", "nn", ".", "Conv2d", "(", "16", ",", "3", ",", "1", ")", "\n", "\n", "self", ".", "conv_score", "=", "nn", ".", "Conv2d", "(", "3", ",", "num_classes", ",", "1", ")", "\n", "\n", "self", ".", "_init_weights", "(", ")", "\n", "\n", "if", "pre_trained", "is", "not", "None", ":", "\n", "# self.backbone.load_state_dict(torch.load(pre_trained, map_location=\"cpu\"))", "\n", "            ", "self", ".", "backbone", ".", "load_state_dict", "(", "torch", ".", "load", "(", "pre_trained", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.MobileNetV2_unet.MobileNetV2_unet.forward": [[42, 114], ["range", "range", "range", "range", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "MobileNetV2_unet.MobileNetV2_unet.invres1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "MobileNetV2_unet.MobileNetV2_unet.invres2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "MobileNetV2_unet.MobileNetV2_unet.invres3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "MobileNetV2_unet.MobileNetV2_unet.invres4", "MobileNetV2_unet.MobileNetV2_unet.conv_last", "MobileNetV2_unet.MobileNetV2_unet.conv_score", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "MobileNetV2_unet.MobileNetV2_unet.dconv1", "MobileNetV2_unet.MobileNetV2_unet.dconv2", "MobileNetV2_unet.MobileNetV2_unet.dconv3", "MobileNetV2_unet.MobileNetV2_unet.dconv4"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "n", "in", "range", "(", "0", ",", "2", ")", ":", "\n", "            ", "x", "=", "self", ".", "backbone", ".", "features", "[", "n", "]", "(", "x", ")", "\n", "", "x1", "=", "x", "\n", "#logging.debug((x1.shape, 'x1'))", "\n", "\n", "for", "n", "in", "range", "(", "2", ",", "4", ")", ":", "\n", "            ", "x", "=", "self", ".", "backbone", ".", "features", "[", "n", "]", "(", "x", ")", "\n", "", "x2", "=", "x", "\n", "#logging.debug((x2.shape, 'x2'))", "\n", "\n", "for", "n", "in", "range", "(", "4", ",", "7", ")", ":", "\n", "            ", "x", "=", "self", ".", "backbone", ".", "features", "[", "n", "]", "(", "x", ")", "\n", "", "x3", "=", "x", "\n", "#logging.debug((x3.shape, 'x3'))", "\n", "\n", "for", "n", "in", "range", "(", "7", ",", "14", ")", ":", "\n", "            ", "x", "=", "self", ".", "backbone", ".", "features", "[", "n", "]", "(", "x", ")", "\n", "", "x4", "=", "x", "\n", "#logging.debug((x4.shape, 'x4'))", "\n", "\n", "for", "n", "in", "range", "(", "14", ",", "19", ")", ":", "\n", "            ", "x", "=", "self", ".", "backbone", ".", "features", "[", "n", "]", "(", "x", ")", "\n", "", "x5", "=", "x", "\n", "#logging.debug((x5.shape, 'x5'))", "\n", "#8*8", "\n", "up1", "=", "torch", ".", "cat", "(", "[", "\n", "x4", ",", "\n", "self", ".", "dconv1", "(", "x", ")", "\n", "]", ",", "dim", "=", "1", ")", "\n", "up1", "=", "self", ".", "invres1", "(", "up1", ")", "\n", "#logging.debug((up1.shape, 'up1'))", "\n", "\n", "up2", "=", "torch", ".", "cat", "(", "[", "\n", "x3", ",", "\n", "self", ".", "dconv2", "(", "up1", ")", "\n", "]", ",", "dim", "=", "1", ")", "\n", "up2", "=", "self", ".", "invres2", "(", "up2", ")", "\n", "#logging.debug((up2.shape, 'up2'))", "\n", "\n", "up3", "=", "torch", ".", "cat", "(", "[", "\n", "x2", ",", "\n", "self", ".", "dconv3", "(", "up2", ")", "\n", "]", ",", "dim", "=", "1", ")", "\n", "up3", "=", "self", ".", "invres3", "(", "up3", ")", "\n", "#logging.debug((up3.shape, 'up3'))", "\n", "\n", "up4", "=", "torch", ".", "cat", "(", "[", "\n", "x1", ",", "\n", "self", ".", "dconv4", "(", "up3", ")", "\n", "]", ",", "dim", "=", "1", ")", "\n", "up4", "=", "self", ".", "invres4", "(", "up4", ")", "\n", "#logging.debug((up4.shape, 'up4'))", "\n", "\n", "x", "=", "self", ".", "conv_last", "(", "up4", ")", "\n", "#logging.debug((x.shape, 'conv_last'))", "\n", "\n", "x", "=", "self", ".", "conv_score", "(", "x", ")", "\n", "#logging.debug((x.shape, 'conv_score'))", "\n", "\n", "#if self.mode == \"eval\":", "\n", "x", "=", "interpolate", "(", "x", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "#logging.debug((x.shape, 'interpolate'))", "\n", "#x = torch.sigmoid(x)", "\n", "# x = torch.nn.Softmax(x)", "\n", "\"\"\"\n        torch.Size([8, 32, 32, 32])\n        torch.Size([8, 24, 64, 64])\n        torch.Size([8, 2, 256, 256])\n\n        \"\"\"", "\n", "return", "x2", ",", "up3", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.MobileNetV2_unet.MobileNetV2_unet._init_weights": [[115, 128], ["MobileNetV2_unet.MobileNetV2_unet.modules", "isinstance", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.normal_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.enet.InitialBlock.__init__": [[27, 58], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "BatchNorm", "activation"], "methods", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "bias", "=", "False", ",", "\n", "relu", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "relu", ":", "\n", "            ", "activation", "=", "nn", ".", "ReLU", "\n", "", "else", ":", "\n", "            ", "activation", "=", "nn", ".", "PReLU", "\n", "\n", "# Main branch - As stated above the number of output channels for this", "\n", "# branch is the total minus 3, since the remaining channels come from", "\n", "# the extension branch", "\n", "", "self", ".", "main_branch", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "\n", "out_channels", "-", "1", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "bias", ")", "\n", "\n", "# Extension branch", "\n", "self", ".", "ext_branch", "=", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "# Initialize batch normalization to be used after concatenation", "\n", "self", ".", "batch_norm", "=", "BatchNorm", "(", "out_channels", ")", "\n", "\n", "# PReLU layer to apply after concatenating the branches", "\n", "self", ".", "out_activation", "=", "activation", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.enet.InitialBlock.forward": [[59, 70], ["enet.InitialBlock.main_branch", "enet.InitialBlock.ext_branch", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "enet.InitialBlock.batch_norm", "enet.InitialBlock.out_activation"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "main", "=", "self", ".", "main_branch", "(", "x", ")", "\n", "ext", "=", "self", ".", "ext_branch", "(", "x", ")", "\n", "\n", "# Concatenate branches", "\n", "out", "=", "torch", ".", "cat", "(", "(", "main", ",", "ext", ")", ",", "1", ")", "\n", "\n", "# Apply batch normalization", "\n", "out", "=", "self", ".", "batch_norm", "(", "out", ")", "\n", "\n", "return", "self", ".", "out_activation", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.enet.RegularBottleneck.__init__": [[107, 193], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Dropout2d", "torch.Dropout2d", "activation", "RuntimeError", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "activation", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "activation", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "activation", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "activation", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "activation"], "methods", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__init__"], ["def", "__init__", "(", "self", ",", "\n", "channels", ",", "\n", "internal_ratio", "=", "4", ",", "\n", "kernel_size", "=", "3", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "asymmetric", "=", "False", ",", "\n", "dropout_prob", "=", "0", ",", "\n", "bias", "=", "False", ",", "\n", "relu", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# Check in the internal_scale parameter is within the expected range", "\n", "# [1, channels]", "\n", "if", "internal_ratio", "<=", "1", "or", "internal_ratio", ">", "channels", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Value out of range. Expected value in the \"", "\n", "\"interval [1, {0}], got internal_scale={1}.\"", "\n", ".", "format", "(", "channels", ",", "internal_ratio", ")", ")", "\n", "\n", "", "internal_channels", "=", "channels", "//", "internal_ratio", "\n", "\n", "if", "relu", ":", "\n", "            ", "activation", "=", "nn", ".", "ReLU", "\n", "", "else", ":", "\n", "            ", "activation", "=", "nn", ".", "PReLU", "\n", "\n", "# Main branch - shortcut connection", "\n", "\n", "# Extension branch - 1x1 convolution, followed by a regular, dilated or", "\n", "# asymmetric convolution, followed by another 1x1 convolution, and,", "\n", "# finally, a regularizer (spatial dropout). Number of channels is constant.", "\n", "\n", "# 1x1 projection convolution", "\n", "", "self", ".", "ext_conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "channels", ",", "\n", "internal_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "bias", "=", "bias", ")", ",", "BatchNorm", "(", "internal_channels", ")", ",", "activation", "(", ")", ")", "\n", "\n", "# If the convolution is asymmetric we split the main convolution in", "\n", "# two. Eg. for a 5x5 asymmetric convolution we have two convolution:", "\n", "# the first is 5x1 and the second is 1x5.", "\n", "if", "asymmetric", ":", "\n", "            ", "self", ".", "ext_conv2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "internal_channels", ",", "\n", "internal_channels", ",", "\n", "kernel_size", "=", "(", "kernel_size", ",", "1", ")", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "(", "padding", ",", "0", ")", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "bias", ")", ",", "BatchNorm", "(", "internal_channels", ")", ",", "activation", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "internal_channels", ",", "\n", "internal_channels", ",", "\n", "kernel_size", "=", "(", "1", ",", "kernel_size", ")", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "(", "0", ",", "padding", ")", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "bias", ")", ",", "BatchNorm", "(", "internal_channels", ")", ",", "activation", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "ext_conv2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "internal_channels", ",", "\n", "internal_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "bias", ")", ",", "BatchNorm", "(", "internal_channels", ")", ",", "activation", "(", ")", ")", "\n", "\n", "# 1x1 expansion convolution", "\n", "", "self", ".", "ext_conv3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "internal_channels", ",", "\n", "channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "bias", "=", "bias", ")", ",", "BatchNorm", "(", "channels", ")", ",", "activation", "(", ")", ")", "\n", "\n", "self", ".", "ext_regul", "=", "nn", ".", "Dropout2d", "(", "p", "=", "dropout_prob", ")", "\n", "\n", "# PReLU layer to apply after adding the branches", "\n", "self", ".", "out_activation", "=", "activation", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.enet.RegularBottleneck.forward": [[194, 208], ["enet.RegularBottleneck.ext_conv1", "enet.RegularBottleneck.ext_conv2", "enet.RegularBottleneck.ext_conv3", "enet.RegularBottleneck.ext_regul", "enet.RegularBottleneck.out_activation"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# Main branch shortcut", "\n", "        ", "main", "=", "x", "\n", "\n", "# Extension branch", "\n", "ext", "=", "self", ".", "ext_conv1", "(", "x", ")", "\n", "ext", "=", "self", ".", "ext_conv2", "(", "ext", ")", "\n", "ext", "=", "self", ".", "ext_conv3", "(", "ext", ")", "\n", "ext", "=", "self", ".", "ext_regul", "(", "ext", ")", "\n", "\n", "# Add main and extension branches", "\n", "out", "=", "main", "+", "ext", "\n", "\n", "return", "self", ".", "out_activation", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.enet.DownsamplingBottleneck.__init__": [[239, 308], ["torch.Module.__init__", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Dropout2d", "torch.Dropout2d", "activation", "RuntimeError", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "activation", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "activation", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "activation"], "methods", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "internal_ratio", "=", "4", ",", "\n", "return_indices", "=", "False", ",", "\n", "dropout_prob", "=", "0", ",", "\n", "bias", "=", "False", ",", "\n", "relu", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# Store parameters that are needed later", "\n", "self", ".", "return_indices", "=", "return_indices", "\n", "\n", "# Check in the internal_scale parameter is within the expected range", "\n", "# [1, channels]", "\n", "if", "internal_ratio", "<=", "1", "or", "internal_ratio", ">", "in_channels", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Value out of range. Expected value in the \"", "\n", "\"interval [1, {0}], got internal_scale={1}. \"", "\n", ".", "format", "(", "in_channels", ",", "internal_ratio", ")", ")", "\n", "\n", "", "internal_channels", "=", "in_channels", "//", "internal_ratio", "\n", "\n", "if", "relu", ":", "\n", "            ", "activation", "=", "nn", ".", "ReLU", "\n", "", "else", ":", "\n", "            ", "activation", "=", "nn", ".", "PReLU", "\n", "\n", "# Main branch - max pooling followed by feature map (channels) padding", "\n", "", "self", ".", "main_max1", "=", "nn", ".", "MaxPool2d", "(", "\n", "2", ",", "\n", "stride", "=", "2", ",", "\n", "return_indices", "=", "return_indices", ")", "\n", "\n", "# Extension branch - 2x2 convolution, followed by a regular, dilated or", "\n", "# asymmetric convolution, followed by another 1x1 convolution. Number", "\n", "# of channels is doubled.", "\n", "\n", "# 2x2 projection convolution with stride 2", "\n", "self", ".", "ext_conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "\n", "internal_channels", ",", "\n", "kernel_size", "=", "2", ",", "\n", "stride", "=", "2", ",", "\n", "bias", "=", "bias", ")", ",", "BatchNorm", "(", "internal_channels", ")", ",", "activation", "(", ")", ")", "\n", "\n", "# Convolution", "\n", "self", ".", "ext_conv2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "internal_channels", ",", "\n", "internal_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "bias", ")", ",", "BatchNorm", "(", "internal_channels", ")", ",", "activation", "(", ")", ")", "\n", "\n", "# 1x1 expansion convolution", "\n", "self", ".", "ext_conv3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "internal_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "bias", "=", "bias", ")", ",", "BatchNorm", "(", "out_channels", ")", ",", "activation", "(", ")", ")", "\n", "\n", "self", ".", "ext_regul", "=", "nn", ".", "Dropout2d", "(", "p", "=", "dropout_prob", ")", "\n", "\n", "# PReLU layer to apply after concatenating the branches", "\n", "self", ".", "out_activation", "=", "activation", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.enet.DownsamplingBottleneck.forward": [[309, 339], ["enet.DownsamplingBottleneck.ext_conv1", "enet.DownsamplingBottleneck.ext_conv2", "enet.DownsamplingBottleneck.ext_conv3", "enet.DownsamplingBottleneck.ext_regul", "enet.DownsamplingBottleneck.size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "enet.DownsamplingBottleneck.main_max1", "enet.DownsamplingBottleneck.main_max1", "enet.DownsamplingBottleneck.size", "padding.cuda.cuda.cuda", "enet.DownsamplingBottleneck.out_activation"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# Main branch shortcut", "\n", "        ", "if", "self", ".", "return_indices", ":", "\n", "            ", "main", ",", "max_indices", "=", "self", ".", "main_max1", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "main", "=", "self", ".", "main_max1", "(", "x", ")", "\n", "\n", "# Extension branch", "\n", "", "ext", "=", "self", ".", "ext_conv1", "(", "x", ")", "\n", "ext", "=", "self", ".", "ext_conv2", "(", "ext", ")", "\n", "ext", "=", "self", ".", "ext_conv3", "(", "ext", ")", "\n", "ext", "=", "self", ".", "ext_regul", "(", "ext", ")", "\n", "\n", "# Main branch channel padding", "\n", "n", ",", "ch_ext", ",", "h", ",", "w", "=", "ext", ".", "size", "(", ")", "\n", "ch_main", "=", "main", ".", "size", "(", ")", "[", "1", "]", "\n", "padding", "=", "torch", ".", "zeros", "(", "n", ",", "ch_ext", "-", "ch_main", ",", "h", ",", "w", ")", "\n", "\n", "# Before concatenating, check if main is on the CPU or GPU and", "\n", "# convert padding accordingly", "\n", "if", "main", ".", "is_cuda", ":", "\n", "            ", "padding", "=", "padding", ".", "cuda", "(", ")", "\n", "\n", "# Concatenate", "\n", "", "main", "=", "torch", ".", "cat", "(", "(", "main", ",", "padding", ")", ",", "1", ")", "\n", "\n", "# Add main and extension branches", "\n", "out", "=", "main", "+", "ext", "\n", "\n", "return", "self", ".", "out_activation", "(", "out", ")", ",", "max_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.enet.UpsamplingBottleneck.__init__": [[371, 433], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.MaxUnpool2d", "torch.MaxUnpool2d", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "BatchNorm", "activation", "torch.Sequential", "torch.Sequential", "torch.Dropout2d", "torch.Dropout2d", "activation", "RuntimeError", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "activation", "torch.Conv2d", "torch.Conv2d", "BatchNorm"], "methods", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "internal_ratio", "=", "4", ",", "\n", "dropout_prob", "=", "0", ",", "\n", "bias", "=", "False", ",", "\n", "relu", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# Check in the internal_scale parameter is within the expected range", "\n", "# [1, channels]", "\n", "if", "internal_ratio", "<=", "1", "or", "internal_ratio", ">", "in_channels", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Value out of range. Expected value in the \"", "\n", "\"interval [1, {0}], got internal_scale={1}. \"", "\n", ".", "format", "(", "in_channels", ",", "internal_ratio", ")", ")", "\n", "\n", "", "internal_channels", "=", "in_channels", "//", "internal_ratio", "\n", "\n", "if", "relu", ":", "\n", "            ", "activation", "=", "nn", ".", "ReLU", "\n", "", "else", ":", "\n", "            ", "activation", "=", "nn", ".", "PReLU", "\n", "\n", "# Main branch - max pooling followed by feature map (channels) padding", "\n", "", "self", ".", "main_conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "bias", "=", "bias", ")", ",", "\n", "BatchNorm", "(", "out_channels", ")", ")", "\n", "\n", "# Remember that the stride is the same as the kernel_size, just like", "\n", "# the max pooling layers", "\n", "self", ".", "main_unpool1", "=", "nn", ".", "MaxUnpool2d", "(", "kernel_size", "=", "2", ")", "\n", "\n", "# Extension branch - 1x1 convolution, followed by a regular, dilated or", "\n", "# asymmetric convolution, followed by another 1x1 convolution. Number", "\n", "# of channels is doubled.", "\n", "\n", "# 1x1 projection convolution with stride 1", "\n", "self", ".", "ext_conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "internal_channels", ",", "kernel_size", "=", "1", ",", "bias", "=", "bias", ")", ",", "\n", "BatchNorm", "(", "internal_channels", ")", ",", "activation", "(", ")", ")", "\n", "\n", "# Transposed convolution", "\n", "self", ".", "ext_tconv1", "=", "nn", ".", "ConvTranspose2d", "(", "\n", "internal_channels", ",", "\n", "internal_channels", ",", "\n", "kernel_size", "=", "2", ",", "\n", "stride", "=", "2", ",", "\n", "bias", "=", "bias", ")", "\n", "self", ".", "ext_tconv1_bnorm", "=", "BatchNorm", "(", "internal_channels", ")", "\n", "self", ".", "ext_tconv1_activation", "=", "activation", "(", ")", "\n", "\n", "# 1x1 expansion convolution", "\n", "self", ".", "ext_conv2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "internal_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "bias", "=", "bias", ")", ",", "\n", "BatchNorm", "(", "out_channels", ")", ")", "\n", "\n", "self", ".", "ext_regul", "=", "nn", ".", "Dropout2d", "(", "p", "=", "dropout_prob", ")", "\n", "\n", "# PReLU layer to apply after concatenating the branches", "\n", "self", ".", "out_activation", "=", "activation", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.enet.UpsamplingBottleneck.forward": [[434, 452], ["enet.UpsamplingBottleneck.main_conv1", "enet.UpsamplingBottleneck.main_unpool1", "enet.UpsamplingBottleneck.ext_conv1", "enet.UpsamplingBottleneck.ext_tconv1", "enet.UpsamplingBottleneck.ext_tconv1_bnorm", "enet.UpsamplingBottleneck.ext_tconv1_activation", "enet.UpsamplingBottleneck.ext_conv2", "enet.UpsamplingBottleneck.ext_regul", "enet.UpsamplingBottleneck.out_activation"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "max_indices", ",", "output_size", ")", ":", "\n", "# Main branch shortcut", "\n", "        ", "main", "=", "self", ".", "main_conv1", "(", "x", ")", "\n", "main", "=", "self", ".", "main_unpool1", "(", "\n", "main", ",", "max_indices", ",", "output_size", "=", "output_size", ")", "\n", "\n", "# Extension branch", "\n", "ext", "=", "self", ".", "ext_conv1", "(", "x", ")", "\n", "ext", "=", "self", ".", "ext_tconv1", "(", "ext", ",", "output_size", "=", "output_size", ")", "\n", "ext", "=", "self", ".", "ext_tconv1_bnorm", "(", "ext", ")", "\n", "ext", "=", "self", ".", "ext_tconv1_activation", "(", "ext", ")", "\n", "ext", "=", "self", ".", "ext_conv2", "(", "ext", ")", "\n", "ext", "=", "self", ".", "ext_regul", "(", "ext", ")", "\n", "\n", "# Add main and extension branches", "\n", "out", "=", "main", "+", "ext", "\n", "\n", "return", "self", ".", "out_activation", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.enet.ENet.__init__": [[466, 569], ["torch.Module.__init__", "enet.InitialBlock", "enet.DownsamplingBottleneck", "enet.RegularBottleneck", "enet.RegularBottleneck", "enet.RegularBottleneck", "enet.RegularBottleneck", "enet.DownsamplingBottleneck", "enet.RegularBottleneck", "enet.RegularBottleneck", "enet.RegularBottleneck", "enet.RegularBottleneck", "enet.RegularBottleneck", "enet.RegularBottleneck", "enet.RegularBottleneck", "enet.RegularBottleneck", "enet.RegularBottleneck", "enet.RegularBottleneck", "enet.RegularBottleneck", "enet.RegularBottleneck", "enet.RegularBottleneck", "enet.RegularBottleneck", "enet.RegularBottleneck", "enet.RegularBottleneck", "enet.UpsamplingBottleneck", "enet.RegularBottleneck", "enet.RegularBottleneck", "enet.UpsamplingBottleneck", "enet.RegularBottleneck", "torch.ConvTranspose2d", "torch.ConvTranspose2d"], "methods", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", ",", "encoder_relu", "=", "False", ",", "decoder_relu", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "initial_block", "=", "InitialBlock", "(", "1", ",", "16", ",", "relu", "=", "encoder_relu", ")", "\n", "\n", "# Stage 1 - Encoder", "\n", "self", ".", "downsample1_0", "=", "DownsamplingBottleneck", "(", "\n", "16", ",", "\n", "64", ",", "\n", "return_indices", "=", "True", ",", "\n", "dropout_prob", "=", "0.01", ",", "\n", "relu", "=", "encoder_relu", ")", "\n", "self", ".", "regular1_1", "=", "RegularBottleneck", "(", "\n", "64", ",", "padding", "=", "1", ",", "dropout_prob", "=", "0.01", ",", "relu", "=", "encoder_relu", ")", "\n", "self", ".", "regular1_2", "=", "RegularBottleneck", "(", "\n", "64", ",", "padding", "=", "1", ",", "dropout_prob", "=", "0.01", ",", "relu", "=", "encoder_relu", ")", "\n", "self", ".", "regular1_3", "=", "RegularBottleneck", "(", "\n", "64", ",", "padding", "=", "1", ",", "dropout_prob", "=", "0.01", ",", "relu", "=", "encoder_relu", ")", "\n", "self", ".", "regular1_4", "=", "RegularBottleneck", "(", "\n", "64", ",", "padding", "=", "1", ",", "dropout_prob", "=", "0.01", ",", "relu", "=", "encoder_relu", ")", "\n", "\n", "# Stage 2 - Encoder", "\n", "self", ".", "downsample2_0", "=", "DownsamplingBottleneck", "(", "\n", "64", ",", "\n", "128", ",", "\n", "return_indices", "=", "True", ",", "\n", "dropout_prob", "=", "0.1", ",", "\n", "relu", "=", "encoder_relu", ")", "\n", "self", ".", "regular2_1", "=", "RegularBottleneck", "(", "\n", "128", ",", "padding", "=", "1", ",", "dropout_prob", "=", "0.1", ",", "relu", "=", "encoder_relu", ")", "\n", "self", ".", "dilated2_2", "=", "RegularBottleneck", "(", "\n", "128", ",", "dilation", "=", "2", ",", "padding", "=", "2", ",", "dropout_prob", "=", "0.1", ",", "relu", "=", "encoder_relu", ")", "\n", "self", ".", "asymmetric2_3", "=", "RegularBottleneck", "(", "\n", "128", ",", "\n", "kernel_size", "=", "5", ",", "\n", "padding", "=", "2", ",", "\n", "asymmetric", "=", "True", ",", "\n", "dropout_prob", "=", "0.1", ",", "\n", "relu", "=", "encoder_relu", ")", "\n", "self", ".", "dilated2_4", "=", "RegularBottleneck", "(", "\n", "128", ",", "dilation", "=", "4", ",", "padding", "=", "4", ",", "dropout_prob", "=", "0.1", ",", "relu", "=", "encoder_relu", ")", "\n", "self", ".", "regular2_5", "=", "RegularBottleneck", "(", "\n", "128", ",", "padding", "=", "1", ",", "dropout_prob", "=", "0.1", ",", "relu", "=", "encoder_relu", ")", "\n", "self", ".", "dilated2_6", "=", "RegularBottleneck", "(", "\n", "128", ",", "dilation", "=", "8", ",", "padding", "=", "8", ",", "dropout_prob", "=", "0.1", ",", "relu", "=", "encoder_relu", ")", "\n", "self", ".", "asymmetric2_7", "=", "RegularBottleneck", "(", "\n", "128", ",", "\n", "kernel_size", "=", "5", ",", "\n", "asymmetric", "=", "True", ",", "\n", "padding", "=", "2", ",", "\n", "dropout_prob", "=", "0.1", ",", "\n", "relu", "=", "encoder_relu", ")", "\n", "self", ".", "dilated2_8", "=", "RegularBottleneck", "(", "\n", "128", ",", "dilation", "=", "16", ",", "padding", "=", "16", ",", "dropout_prob", "=", "0.1", ",", "relu", "=", "encoder_relu", ")", "\n", "\n", "# Stage 3 - Encoder", "\n", "self", ".", "regular3_0", "=", "RegularBottleneck", "(", "\n", "128", ",", "padding", "=", "1", ",", "dropout_prob", "=", "0.1", ",", "relu", "=", "encoder_relu", ")", "\n", "self", ".", "dilated3_1", "=", "RegularBottleneck", "(", "\n", "128", ",", "dilation", "=", "2", ",", "padding", "=", "2", ",", "dropout_prob", "=", "0.1", ",", "relu", "=", "encoder_relu", ")", "\n", "self", ".", "asymmetric3_2", "=", "RegularBottleneck", "(", "\n", "128", ",", "\n", "kernel_size", "=", "5", ",", "\n", "padding", "=", "2", ",", "\n", "asymmetric", "=", "True", ",", "\n", "dropout_prob", "=", "0.1", ",", "\n", "relu", "=", "encoder_relu", ")", "\n", "self", ".", "dilated3_3", "=", "RegularBottleneck", "(", "\n", "128", ",", "dilation", "=", "4", ",", "padding", "=", "4", ",", "dropout_prob", "=", "0.1", ",", "relu", "=", "encoder_relu", ")", "\n", "self", ".", "regular3_4", "=", "RegularBottleneck", "(", "\n", "128", ",", "padding", "=", "1", ",", "dropout_prob", "=", "0.1", ",", "relu", "=", "encoder_relu", ")", "\n", "self", ".", "dilated3_5", "=", "RegularBottleneck", "(", "\n", "128", ",", "dilation", "=", "8", ",", "padding", "=", "8", ",", "dropout_prob", "=", "0.1", ",", "relu", "=", "encoder_relu", ")", "\n", "self", ".", "asymmetric3_6", "=", "RegularBottleneck", "(", "\n", "128", ",", "\n", "kernel_size", "=", "5", ",", "\n", "asymmetric", "=", "True", ",", "\n", "padding", "=", "2", ",", "\n", "dropout_prob", "=", "0.1", ",", "\n", "relu", "=", "encoder_relu", ")", "\n", "self", ".", "dilated3_7", "=", "RegularBottleneck", "(", "\n", "128", ",", "dilation", "=", "16", ",", "padding", "=", "16", ",", "dropout_prob", "=", "0.1", ",", "relu", "=", "encoder_relu", ")", "\n", "\n", "# Stage 4 - Decoder", "\n", "self", ".", "upsample4_0", "=", "UpsamplingBottleneck", "(", "\n", "128", ",", "64", ",", "dropout_prob", "=", "0.1", ",", "relu", "=", "decoder_relu", ")", "\n", "self", ".", "regular4_1", "=", "RegularBottleneck", "(", "\n", "64", ",", "padding", "=", "1", ",", "dropout_prob", "=", "0.1", ",", "relu", "=", "decoder_relu", ")", "\n", "self", ".", "regular4_2", "=", "RegularBottleneck", "(", "\n", "64", ",", "padding", "=", "1", ",", "dropout_prob", "=", "0.1", ",", "relu", "=", "decoder_relu", ")", "\n", "\n", "# Stage 5 - Decoder", "\n", "self", ".", "upsample5_0", "=", "UpsamplingBottleneck", "(", "\n", "64", ",", "16", ",", "dropout_prob", "=", "0.1", ",", "relu", "=", "decoder_relu", ")", "\n", "self", ".", "regular5_1", "=", "RegularBottleneck", "(", "\n", "16", ",", "padding", "=", "1", ",", "dropout_prob", "=", "0.1", ",", "relu", "=", "decoder_relu", ")", "\n", "self", ".", "transposed_conv", "=", "nn", ".", "ConvTranspose2d", "(", "\n", "16", ",", "\n", "num_classes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.enet.ENet.forward": [[570, 616], ["enet.ENet.size", "enet.ENet.initial_block", "enet.ENet.size", "enet.ENet.downsample1_0", "enet.ENet.regular1_1", "enet.ENet.regular1_2", "enet.ENet.regular1_3", "enet.ENet.regular1_4", "enet.ENet.size", "enet.ENet.downsample2_0", "enet.ENet.regular2_1", "enet.ENet.dilated2_2", "enet.ENet.asymmetric2_3", "enet.ENet.dilated2_4", "enet.ENet.regular2_5", "enet.ENet.dilated2_6", "enet.ENet.asymmetric2_7", "enet.ENet.dilated2_8", "enet.ENet.regular3_0", "enet.ENet.dilated3_1", "enet.ENet.asymmetric3_2", "enet.ENet.dilated3_3", "enet.ENet.regular3_4", "enet.ENet.dilated3_5", "enet.ENet.asymmetric3_6", "enet.ENet.dilated3_7", "enet.ENet.upsample4_0", "enet.ENet.regular4_1", "enet.ENet.regular4_2", "enet.ENet.upsample5_0", "enet.ENet.regular5_1", "enet.ENet.transposed_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# Initial block", "\n", "        ", "input_size", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "self", ".", "initial_block", "(", "x", ")", "\n", "\n", "# Stage 1 - Encoder", "\n", "stage1_input_size", "=", "x", ".", "size", "(", ")", "\n", "x", ",", "max_indices1_0", "=", "self", ".", "downsample1_0", "(", "x", ")", "\n", "x", "=", "self", ".", "regular1_1", "(", "x", ")", "\n", "x", "=", "self", ".", "regular1_2", "(", "x", ")", "\n", "x", "=", "self", ".", "regular1_3", "(", "x", ")", "\n", "x1", "=", "self", ".", "regular1_4", "(", "x", ")", "\n", "\n", "# Stage 2 - Encoder", "\n", "stage2_input_size", "=", "x1", ".", "size", "(", ")", "\n", "x", ",", "max_indices2_0", "=", "self", ".", "downsample2_0", "(", "x1", ")", "\n", "x", "=", "self", ".", "regular2_1", "(", "x", ")", "\n", "x", "=", "self", ".", "dilated2_2", "(", "x", ")", "\n", "x", "=", "self", ".", "asymmetric2_3", "(", "x", ")", "\n", "x", "=", "self", ".", "dilated2_4", "(", "x", ")", "\n", "x", "=", "self", ".", "regular2_5", "(", "x", ")", "\n", "x", "=", "self", ".", "dilated2_6", "(", "x", ")", "\n", "x", "=", "self", ".", "asymmetric2_7", "(", "x", ")", "\n", "x", "=", "self", ".", "dilated2_8", "(", "x", ")", "\n", "\n", "# Stage 3 - Encoder", "\n", "x", "=", "self", ".", "regular3_0", "(", "x", ")", "\n", "x", "=", "self", ".", "dilated3_1", "(", "x", ")", "\n", "x", "=", "self", ".", "asymmetric3_2", "(", "x", ")", "\n", "x", "=", "self", ".", "dilated3_3", "(", "x", ")", "\n", "x", "=", "self", ".", "regular3_4", "(", "x", ")", "\n", "x", "=", "self", ".", "dilated3_5", "(", "x", ")", "\n", "x", "=", "self", ".", "asymmetric3_6", "(", "x", ")", "\n", "x", "=", "self", ".", "dilated3_7", "(", "x", ")", "\n", "\n", "# Stage 4 - Decoder", "\n", "x", "=", "self", ".", "upsample4_0", "(", "x", ",", "max_indices2_0", ",", "output_size", "=", "stage2_input_size", ")", "\n", "x", "=", "self", ".", "regular4_1", "(", "x", ")", "\n", "x2", "=", "self", ".", "regular4_2", "(", "x", ")", "\n", "\n", "# Stage 5 - Decoder", "\n", "x", "=", "self", ".", "upsample5_0", "(", "x2", ",", "max_indices1_0", ",", "output_size", "=", "stage1_input_size", ")", "\n", "x", "=", "self", ".", "regular5_1", "(", "x", ")", "\n", "x", "=", "self", ".", "transposed_conv", "(", "x", ",", "output_size", "=", "input_size", ")", "\n", "\n", "return", "x1", ",", "x2", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.sagan_models.Self_Attn.__init__": [[13, 24], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__init__"], ["def", "__init__", "(", "self", ",", "in_dim", ",", "activation", ")", ":", "\n", "        ", "super", "(", "Self_Attn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "chanel_in", "=", "in_dim", "\n", "self", ".", "activation", "=", "activation", "\n", "\n", "self", ".", "query_conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_dim", ",", "out_channels", "=", "in_dim", "//", "8", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "key_conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_dim", ",", "out_channels", "=", "in_dim", "//", "8", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "value_conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_dim", ",", "out_channels", "=", "in_dim", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "#", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.sagan_models.Self_Attn.forward": [[24, 44], ["x.size", "sagan_models.Self_Attn.query_conv().view().permute", "sagan_models.Self_Attn.key_conv().view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "sagan_models.Self_Attn.softmax", "sagan_models.Self_Attn.value_conv().view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "out.view.view.view", "sagan_models.Self_Attn.permute", "sagan_models.Self_Attn.query_conv().view", "sagan_models.Self_Attn.key_conv", "sagan_models.Self_Attn.value_conv", "sagan_models.Self_Attn.query_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n            inputs :\n                x : input feature maps( B X C X W X H)\n            returns :\n                out : self attention value + input feature \n                attention: B X N X N (N is Width*Height)\n        \"\"\"", "\n", "m_batchsize", ",", "C", ",", "width", ",", "height", "=", "x", ".", "size", "(", ")", "\n", "proj_query", "=", "self", ".", "query_conv", "(", "x", ")", ".", "view", "(", "m_batchsize", ",", "-", "1", ",", "width", "*", "height", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# B X CX(N)", "\n", "proj_key", "=", "self", ".", "key_conv", "(", "x", ")", ".", "view", "(", "m_batchsize", ",", "-", "1", ",", "width", "*", "height", ")", "# B X C x (*W*H)", "\n", "energy", "=", "torch", ".", "bmm", "(", "proj_query", ",", "proj_key", ")", "# transpose check", "\n", "attention", "=", "self", ".", "softmax", "(", "energy", ")", "# BX (N) X (N) ", "\n", "proj_value", "=", "self", ".", "value_conv", "(", "x", ")", ".", "view", "(", "m_batchsize", ",", "-", "1", ",", "width", "*", "height", ")", "# B X C X N", "\n", "\n", "out", "=", "torch", ".", "bmm", "(", "proj_value", ",", "attention", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "out", "=", "out", ".", "view", "(", "m_batchsize", ",", "C", ",", "width", ",", "height", ")", "\n", "\n", "out", "=", "self", ".", "gamma", "*", "out", "+", "x", "\n", "return", "out", ",", "attention", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.sagan_models.Generator.__init__": [[48, 93], ["torch.Module.__init__", "layer1.append", "layer1.append", "layer1.append", "layer2.append", "layer2.append", "layer2.append", "int", "layer3.append", "layer3.append", "layer3.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "last.append", "last.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "sagan_models.Self_Attn", "sagan_models.Self_Attn", "int", "networks.spectral.SpectralNorm", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "networks.spectral.SpectralNorm", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "networks.spectral.SpectralNorm", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "int", "layer4.append", "layer4.append", "layer4.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "numpy.log2", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "int", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "int", "networks.spectral.SpectralNorm", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "int", "int", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "int", "int"], "methods", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__init__"], ["def", "__init__", "(", "self", ",", "batch_size", ",", "image_size", "=", "64", ",", "z_dim", "=", "100", ",", "conv_dim", "=", "64", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "imsize", "=", "image_size", "\n", "layer1", "=", "[", "]", "\n", "layer2", "=", "[", "]", "\n", "layer3", "=", "[", "]", "\n", "last", "=", "[", "]", "\n", "\n", "repeat_num", "=", "int", "(", "np", ".", "log2", "(", "self", ".", "imsize", ")", ")", "-", "3", "\n", "mult", "=", "2", "**", "repeat_num", "# 8", "\n", "layer1", ".", "append", "(", "SpectralNorm", "(", "nn", ".", "ConvTranspose2d", "(", "z_dim", ",", "conv_dim", "*", "mult", ",", "4", ")", ")", ")", "\n", "layer1", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "conv_dim", "*", "mult", ")", ")", "\n", "layer1", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "curr_dim", "=", "conv_dim", "*", "mult", "\n", "\n", "layer2", ".", "append", "(", "SpectralNorm", "(", "nn", ".", "ConvTranspose2d", "(", "curr_dim", ",", "int", "(", "curr_dim", "/", "2", ")", ",", "4", ",", "2", ",", "1", ")", ")", ")", "\n", "layer2", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "int", "(", "curr_dim", "/", "2", ")", ")", ")", "\n", "layer2", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "curr_dim", "=", "int", "(", "curr_dim", "/", "2", ")", "\n", "\n", "layer3", ".", "append", "(", "SpectralNorm", "(", "nn", ".", "ConvTranspose2d", "(", "curr_dim", ",", "int", "(", "curr_dim", "/", "2", ")", ",", "4", ",", "2", ",", "1", ")", ")", ")", "\n", "layer3", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "int", "(", "curr_dim", "/", "2", ")", ")", ")", "\n", "layer3", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "if", "self", ".", "imsize", "==", "64", ":", "\n", "            ", "layer4", "=", "[", "]", "\n", "curr_dim", "=", "int", "(", "curr_dim", "/", "2", ")", "\n", "layer4", ".", "append", "(", "SpectralNorm", "(", "nn", ".", "ConvTranspose2d", "(", "curr_dim", ",", "int", "(", "curr_dim", "/", "2", ")", ",", "4", ",", "2", ",", "1", ")", ")", ")", "\n", "layer4", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "int", "(", "curr_dim", "/", "2", ")", ")", ")", "\n", "layer4", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "l4", "=", "nn", ".", "Sequential", "(", "*", "layer4", ")", "\n", "curr_dim", "=", "int", "(", "curr_dim", "/", "2", ")", "\n", "\n", "", "self", ".", "l1", "=", "nn", ".", "Sequential", "(", "*", "layer1", ")", "\n", "self", ".", "l2", "=", "nn", ".", "Sequential", "(", "*", "layer2", ")", "\n", "self", ".", "l3", "=", "nn", ".", "Sequential", "(", "*", "layer3", ")", "\n", "\n", "last", ".", "append", "(", "nn", ".", "ConvTranspose2d", "(", "curr_dim", ",", "3", ",", "4", ",", "2", ",", "1", ")", ")", "\n", "last", ".", "append", "(", "nn", ".", "Tanh", "(", ")", ")", "\n", "self", ".", "last", "=", "nn", ".", "Sequential", "(", "*", "last", ")", "\n", "\n", "self", ".", "attn1", "=", "Self_Attn", "(", "128", ",", "'relu'", ")", "\n", "self", ".", "attn2", "=", "Self_Attn", "(", "64", ",", "'relu'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.sagan_models.Generator.forward": [[94, 105], ["z.view.view.view", "sagan_models.Generator.l1", "sagan_models.Generator.l2", "sagan_models.Generator.l3", "sagan_models.Generator.attn1", "sagan_models.Generator.l4", "sagan_models.Generator.attn2", "sagan_models.Generator.last", "z.view.view.size", "z.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z", ")", ":", "\n", "        ", "z", "=", "z", ".", "view", "(", "z", ".", "size", "(", "0", ")", ",", "z", ".", "size", "(", "1", ")", ",", "1", ",", "1", ")", "\n", "out", "=", "self", ".", "l1", "(", "z", ")", "\n", "out", "=", "self", ".", "l2", "(", "out", ")", "\n", "out", "=", "self", ".", "l3", "(", "out", ")", "\n", "out", ",", "p1", "=", "self", ".", "attn1", "(", "out", ")", "\n", "out", "=", "self", ".", "l4", "(", "out", ")", "\n", "out", ",", "p2", "=", "self", ".", "attn2", "(", "out", ")", "\n", "out", "=", "self", ".", "last", "(", "out", ")", "\n", "\n", "return", "out", ",", "p1", ",", "p2", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.sagan_models.Discriminator.__init__": [[110, 157], ["torch.Module.__init__", "layer1.append", "layer1.append", "layer2.append", "layer2.append", "layer3.append", "layer3.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "last.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "sagan_models.Self_Attn", "sagan_models.Self_Attn", "networks.spectral.SpectralNorm", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "networks.spectral.SpectralNorm", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "networks.spectral.SpectralNorm", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "layer4.append", "layer4.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "networks.spectral.SpectralNorm", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "ValueError"], "methods", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__init__"], ["def", "__init__", "(", "self", ",", "preprocess_GAN_mode", ",", "input_channel", ",", "batch_size", "=", "64", ",", "image_size", "=", "64", ",", "conv_dim", "=", "64", ")", ":", "\n", "        ", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "imsize", "=", "image_size", "\n", "layer1", "=", "[", "]", "\n", "layer2", "=", "[", "]", "\n", "layer3", "=", "[", "]", "\n", "last", "=", "[", "]", "\n", "\n", "#layer1.append(SpectralNorm(nn.Conv2d(3, conv_dim, 4, 2, 1)))", "\n", "layer1", ".", "append", "(", "SpectralNorm", "(", "nn", ".", "Conv2d", "(", "input_channel", ",", "conv_dim", ",", "4", ",", "2", ",", "1", ")", ")", ")", "\n", "layer1", ".", "append", "(", "nn", ".", "LeakyReLU", "(", "0.1", ")", ")", "\n", "\n", "curr_dim", "=", "conv_dim", "\n", "\n", "layer2", ".", "append", "(", "SpectralNorm", "(", "nn", ".", "Conv2d", "(", "curr_dim", ",", "curr_dim", "*", "2", ",", "4", ",", "2", ",", "1", ")", ")", ")", "\n", "layer2", ".", "append", "(", "nn", ".", "LeakyReLU", "(", "0.1", ")", ")", "\n", "curr_dim", "=", "curr_dim", "*", "2", "\n", "\n", "layer3", ".", "append", "(", "SpectralNorm", "(", "nn", ".", "Conv2d", "(", "curr_dim", ",", "curr_dim", "*", "2", ",", "4", ",", "2", ",", "1", ")", ")", ")", "\n", "layer3", ".", "append", "(", "nn", ".", "LeakyReLU", "(", "0.1", ")", ")", "\n", "curr_dim", "=", "curr_dim", "*", "2", "\n", "\n", "#if self.imsize == 64:", "\n", "if", "self", ".", "imsize", "==", "256", ":", "\n", "            ", "layer4", "=", "[", "]", "\n", "layer4", ".", "append", "(", "SpectralNorm", "(", "nn", ".", "Conv2d", "(", "curr_dim", ",", "curr_dim", "*", "2", ",", "4", ",", "2", ",", "1", ")", ")", ")", "\n", "layer4", ".", "append", "(", "nn", ".", "LeakyReLU", "(", "0.1", ")", ")", "\n", "self", ".", "l4", "=", "nn", ".", "Sequential", "(", "*", "layer4", ")", "\n", "curr_dim", "=", "curr_dim", "*", "2", "\n", "", "self", ".", "l1", "=", "nn", ".", "Sequential", "(", "*", "layer1", ")", "\n", "self", ".", "l2", "=", "nn", ".", "Sequential", "(", "*", "layer2", ")", "\n", "self", ".", "l3", "=", "nn", ".", "Sequential", "(", "*", "layer3", ")", "\n", "\n", "last", ".", "append", "(", "nn", ".", "Conv2d", "(", "curr_dim", ",", "1", ",", "4", ")", ")", "\n", "self", ".", "last", "=", "nn", ".", "Sequential", "(", "*", "last", ")", "\n", "\n", "self", ".", "attn1", "=", "Self_Attn", "(", "256", ",", "'relu'", ")", "\n", "self", ".", "attn2", "=", "Self_Attn", "(", "512", ",", "'relu'", ")", "\n", "\n", "if", "preprocess_GAN_mode", "==", "1", ":", "#'bn':", "\n", "            ", "self", ".", "preprocess_additional", "=", "nn", ".", "BatchNorm2d", "(", "input_channel", ")", "\n", "", "elif", "preprocess_GAN_mode", "==", "2", ":", "#'tanh':", "\n", "            ", "self", ".", "preprocess_additional", "=", "nn", ".", "Tanh", "(", ")", "\n", "", "elif", "preprocess_GAN_mode", "==", "3", ":", "\n", "            ", "self", ".", "preprocess_additional", "=", "lambda", "x", ":", "2", "*", "(", "x", "/", "255", "-", "0.5", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'preprocess_GAN_mode should be 1:bn or 2:tanh or 3:-1 - 1'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.sagan_models.Discriminator.forward": [[158, 173], ["sagan_models.Discriminator.preprocess_additional", "sagan_models.Discriminator.l1", "sagan_models.Discriminator.l2", "sagan_models.Discriminator.l3", "sagan_models.Discriminator.attn1", "sagan_models.Discriminator.l4", "sagan_models.Discriminator.attn2", "sagan_models.Discriminator.last"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#import pdb;pdb.set_trace()", "\n", "\n", "        ", "x", "=", "self", ".", "preprocess_additional", "(", "x", ")", "\n", "out", "=", "self", ".", "l1", "(", "x", ")", "\n", "out", "=", "self", ".", "l2", "(", "out", ")", "\n", "out", "=", "self", ".", "l3", "(", "out", ")", "\n", "out", ",", "p1", "=", "self", ".", "attn1", "(", "out", ")", "\n", "out", "=", "self", ".", "l4", "(", "out", ")", "\n", "out", ",", "p2", "=", "self", ".", "attn2", "(", "out", ")", "\n", "out", "=", "self", ".", "last", "(", "out", ")", "\n", "\n", "#return [out.squeeze(), p1, p2]", "\n", "#return [out, p1, p2]", "\n", "return", "out", "\n", "", "", "class", "PixelDiscriminator", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.sagan_models.PixelDiscriminator.__init__": [[176, 198], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "type", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__init__"], ["def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "\"\"\"Construct a 1x1 PatchGAN discriminator\n        Parameters:\n            input_nc (int)  -- the number of channels in input images\n            ndf (int)       -- the number of filters in the last conv layer\n            norm_layer      -- normalization layer\n        \"\"\"", "\n", "super", "(", "PixelDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "# no need to use bias as BatchNorm2d has affine parameters", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "self", ".", "net", "=", "[", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "ndf", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ndf", ",", "ndf", "*", "2", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ndf", "*", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "2", ",", "1", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", ")", "]", "\n", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "net", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.sagan_models.PixelDiscriminator.forward": [[199, 202], ["sagan_models.PixelDiscriminator.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"Standard forward.\"\"\"", "\n", "return", "self", ".", "net", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.sagan_models.NLayerDiscriminator.__init__": [[206, 244], ["torch.Module.__init__", "range", "min", "torch.Sequential", "torch.Sequential", "torch.Sequential", "type", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "min", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__init__"], ["def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "nn", ".", "InstanceNorm2d", ")", ":", "\n", "        ", "\"\"\"Construct a PatchGAN discriminator\n        Parameters:\n            input_nc (int)  -- the number of channels in input images\n            ndf (int)       -- the number of filters in the last conv layer\n            n_layers (int)  -- the number of conv layers in the discriminator\n            norm_layer      -- normalization layer\n        \"\"\"", "\n", "super", "(", "NLayerDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "# no need to use bias as BatchNorm2d has affine parameters", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "kw", "=", "4", "\n", "padw", "=", "1", "\n", "sequence", "=", "[", "nn", ".", "Conv2d", "(", "input_nc", ",", "ndf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "]", "\n", "nf_mult", "=", "1", "\n", "nf_mult_prev", "=", "1", "\n", "for", "n", "in", "range", "(", "1", ",", "n_layers", ")", ":", "# gradually increase the number of filters", "\n", "            ", "nf_mult_prev", "=", "nf_mult", "\n", "nf_mult", "=", "min", "(", "2", "**", "n", ",", "8", ")", "\n", "sequence", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult_prev", ",", "ndf", "*", "nf_mult", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ndf", "*", "nf_mult", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "\n", "\n", "", "nf_mult_prev", "=", "nf_mult", "\n", "nf_mult", "=", "min", "(", "2", "**", "n_layers", ",", "8", ")", "\n", "sequence", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult_prev", ",", "ndf", "*", "nf_mult", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ndf", "*", "nf_mult", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "\n", "\n", "sequence", "+=", "[", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult", ",", "1", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", "]", "# output 1 channel prediction map", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "sequence", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.sagan_models.NLayerDiscriminator.forward": [[245, 248], ["sagan_models.NLayerDiscriminator.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"Standard forward.\"\"\"", "\n", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.erfnet.DownsamplerBlock.__init__": [[15, 21], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "BatchNorm"], "methods", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ninput", ",", "noutput", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "ninput", ",", "noutput", "-", "ninput", ",", "(", "3", ",", "3", ")", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn", "=", "BatchNorm", "(", "noutput", ",", "eps", "=", "1e-3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.erfnet.DownsamplerBlock.forward": [[22, 26], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "erfnet.DownsamplerBlock.bn", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "erfnet.DownsamplerBlock.conv", "erfnet.DownsamplerBlock.pool"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "output", "=", "torch", ".", "cat", "(", "[", "self", ".", "conv", "(", "input", ")", ",", "self", ".", "pool", "(", "input", ")", "]", ",", "1", ")", "\n", "output", "=", "self", ".", "bn", "(", "output", ")", "\n", "return", "F", ".", "relu", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.erfnet.non_bottleneck_1d.__init__": [[29, 45], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d"], "methods", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__init__"], ["    ", "def", "__init__", "(", "self", ",", "chann", ",", "dropprob", ",", "dilated", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv3x1_1", "=", "nn", ".", "Conv2d", "(", "chann", ",", "chann", ",", "(", "3", ",", "1", ")", ",", "stride", "=", "1", ",", "padding", "=", "(", "1", ",", "0", ")", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "conv1x3_1", "=", "nn", ".", "Conv2d", "(", "chann", ",", "chann", ",", "(", "1", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "(", "0", ",", "1", ")", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "bn1", "=", "BatchNorm", "(", "chann", ",", "eps", "=", "1e-03", ")", "\n", "\n", "self", ".", "conv3x1_2", "=", "nn", ".", "Conv2d", "(", "chann", ",", "chann", ",", "(", "3", ",", "1", ")", ",", "stride", "=", "1", ",", "padding", "=", "(", "1", "*", "dilated", ",", "0", ")", ",", "bias", "=", "True", ",", "dilation", "=", "(", "dilated", ",", "1", ")", ")", "\n", "\n", "self", ".", "conv1x3_2", "=", "nn", ".", "Conv2d", "(", "chann", ",", "chann", ",", "(", "1", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "(", "0", ",", "1", "*", "dilated", ")", ",", "bias", "=", "True", ",", "dilation", "=", "(", "1", ",", "dilated", ")", ")", "\n", "\n", "self", ".", "bn2", "=", "BatchNorm", "(", "chann", ",", "eps", "=", "1e-03", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout2d", "(", "dropprob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.erfnet.non_bottleneck_1d.forward": [[47, 64], ["erfnet.non_bottleneck_1d.conv3x1_1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "erfnet.non_bottleneck_1d.conv1x3_1", "erfnet.non_bottleneck_1d.bn1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "erfnet.non_bottleneck_1d.conv3x1_2", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "erfnet.non_bottleneck_1d.conv1x3_2", "erfnet.non_bottleneck_1d.bn2", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "erfnet.non_bottleneck_1d.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "\n", "        ", "output", "=", "self", ".", "conv3x1_1", "(", "input", ")", "\n", "output", "=", "F", ".", "relu", "(", "output", ")", "\n", "output", "=", "self", ".", "conv1x3_1", "(", "output", ")", "\n", "output", "=", "self", ".", "bn1", "(", "output", ")", "\n", "output", "=", "F", ".", "relu", "(", "output", ")", "\n", "\n", "output", "=", "self", ".", "conv3x1_2", "(", "output", ")", "\n", "output", "=", "F", ".", "relu", "(", "output", ")", "\n", "output", "=", "self", ".", "conv1x3_2", "(", "output", ")", "\n", "output", "=", "self", ".", "bn2", "(", "output", ")", "\n", "\n", "if", "(", "self", ".", "dropout", ".", "p", "!=", "0", ")", ":", "\n", "            ", "output", "=", "self", ".", "dropout", "(", "output", ")", "\n", "\n", "", "return", "F", ".", "relu", "(", "output", "+", "input", ")", "#+input = identity (residual connection)", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.erfnet.Encoder.__init__": [[67, 88], ["torch.Module.__init__", "erfnet.DownsamplerBlock", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "erfnet.Encoder.layers.append", "range", "erfnet.Encoder.layers.append", "range", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "erfnet.DownsamplerBlock", "erfnet.Encoder.layers.append", "erfnet.DownsamplerBlock", "erfnet.Encoder.layers.append", "erfnet.Encoder.layers.append", "erfnet.Encoder.layers.append", "erfnet.Encoder.layers.append", "erfnet.non_bottleneck_1d", "erfnet.non_bottleneck_1d", "erfnet.non_bottleneck_1d", "erfnet.non_bottleneck_1d", "erfnet.non_bottleneck_1d"], "methods", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "initial_block", "=", "DownsamplerBlock", "(", "1", ",", "16", ")", "\n", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "self", ".", "layers", ".", "append", "(", "DownsamplerBlock", "(", "16", ",", "64", ")", ")", "\n", "\n", "for", "x", "in", "range", "(", "0", ",", "5", ")", ":", "#5 times", "\n", "           ", "self", ".", "layers", ".", "append", "(", "non_bottleneck_1d", "(", "64", ",", "0.1", ",", "1", ")", ")", "\n", "\n", "", "self", ".", "layers", ".", "append", "(", "DownsamplerBlock", "(", "64", ",", "128", ")", ")", "\n", "\n", "for", "x", "in", "range", "(", "0", ",", "2", ")", ":", "#2 times", "\n", "            ", "self", ".", "layers", ".", "append", "(", "non_bottleneck_1d", "(", "128", ",", "0.1", ",", "2", ")", ")", "\n", "self", ".", "layers", ".", "append", "(", "non_bottleneck_1d", "(", "128", ",", "0.1", ",", "4", ")", ")", "\n", "self", ".", "layers", ".", "append", "(", "non_bottleneck_1d", "(", "128", ",", "0.1", ",", "8", ")", ")", "\n", "self", ".", "layers", ".", "append", "(", "non_bottleneck_1d", "(", "128", ",", "0.1", ",", "16", ")", ")", "\n", "\n", "#only for encoder mode:", "\n", "", "self", ".", "output_conv", "=", "nn", ".", "Conv2d", "(", "128", ",", "num_classes", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.erfnet.Encoder.forward": [[89, 104], ["erfnet.Encoder.initial_block", "layer", "erfnet.Encoder.output_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "predict", "=", "False", ")", ":", "\n", "        ", "output", "=", "self", ".", "initial_block", "(", "input", ")", "\n", "cnt", "=", "0", "\n", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "output", "=", "layer", "(", "output", ")", "\n", "if", "(", "cnt", "==", "0", ")", ":", "\n", "                ", "x", "=", "output", "\n", "#print(x.size())", "\n", "", "cnt", "+=", "1", "\n", "\n", "\n", "", "if", "predict", ":", "\n", "            ", "output", "=", "self", ".", "output_conv", "(", "output", ")", "\n", "\n", "", "return", "x", ",", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.erfnet.UpsamplerBlock.__init__": [[107, 111], ["torch.Module.__init__", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "BatchNorm"], "methods", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ninput", ",", "noutput", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "ConvTranspose2d", "(", "ninput", ",", "noutput", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "bn", "=", "BatchNorm", "(", "noutput", ",", "eps", "=", "1e-3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.erfnet.UpsamplerBlock.forward": [[112, 116], ["erfnet.UpsamplerBlock.conv", "erfnet.UpsamplerBlock.bn", "torch.relu", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "output", "=", "self", ".", "conv", "(", "input", ")", "\n", "output", "=", "self", ".", "bn", "(", "output", ")", "\n", "return", "F", ".", "relu", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.erfnet.Decoder.__init__": [[118, 132], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "erfnet.Decoder.layers.append", "erfnet.Decoder.layers.append", "erfnet.Decoder.layers.append", "erfnet.Decoder.layers.append", "erfnet.Decoder.layers.append", "erfnet.Decoder.layers.append", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "erfnet.UpsamplerBlock", "erfnet.non_bottleneck_1d", "erfnet.non_bottleneck_1d", "erfnet.UpsamplerBlock", "erfnet.non_bottleneck_1d", "erfnet.non_bottleneck_1d"], "methods", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "self", ".", "layers", ".", "append", "(", "UpsamplerBlock", "(", "128", ",", "64", ")", ")", "\n", "self", ".", "layers", ".", "append", "(", "non_bottleneck_1d", "(", "64", ",", "0", ",", "1", ")", ")", "\n", "self", ".", "layers", ".", "append", "(", "non_bottleneck_1d", "(", "64", ",", "0", ",", "1", ")", ")", "\n", "\n", "self", ".", "layers", ".", "append", "(", "UpsamplerBlock", "(", "64", ",", "16", ")", ")", "\n", "self", ".", "layers", ".", "append", "(", "non_bottleneck_1d", "(", "16", ",", "0", ",", "1", ")", ")", "\n", "self", ".", "layers", ".", "append", "(", "non_bottleneck_1d", "(", "16", ",", "0", ",", "1", ")", ")", "\n", "\n", "self", ".", "output_conv", "=", "nn", ".", "ConvTranspose2d", "(", "16", ",", "num_classes", ",", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "output_padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.erfnet.Decoder.forward": [[133, 146], ["erfnet.Decoder.output_conv", "layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "output", "=", "input", "\n", "cnt", "=", "0", "\n", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "output", "=", "layer", "(", "output", ")", "\n", "if", "(", "cnt", "==", "2", ")", ":", "\n", "                ", "x", "=", "output", "\n", "#print(x.size())", "\n", "", "cnt", "+=", "1", "\n", "\n", "", "output", "=", "self", ".", "output_conv", "(", "output", ")", "\n", "\n", "return", "x", ",", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.erfnet.ERFNet.__init__": [[149, 163], ["torch.Module.__init__", "erfnet.Decoder", "erfnet.Encoder", "erfnet.ERFNet.partialBN"], "methods", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__init__", "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.erfnet.ERFNet.partialBN"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "partial_bn", "=", "False", ",", "encoder", "=", "None", ")", ":", "#use encoder to pass pretrained encoder", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "(", "encoder", "==", "None", ")", ":", "\n", "            ", "self", ".", "encoder", "=", "Encoder", "(", "num_classes", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "encoder", "=", "encoder", "\n", "", "self", ".", "decoder", "=", "Decoder", "(", "num_classes", ")", "\n", "self", ".", "input_mean", "=", "[", "103.939", ",", "116.779", ",", "123.68", "]", "# [0, 0, 0]", "\n", "self", ".", "input_std", "=", "[", "1", ",", "1", ",", "1", "]", "\n", "self", ".", "_enable_pbn", "=", "partial_bn", "\n", "\n", "if", "partial_bn", ":", "\n", "            ", "self", ".", "partialBN", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.erfnet.ERFNet.train": [[164, 178], ["super().train", "print", "erfnet.ERFNet.modules", "isinstance", "m.eval"], "methods", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.erfnet.ERFNet.train"], ["", "", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Override the default train() to freeze the BN parameters\n        :return:\n        \"\"\"", "\n", "super", "(", "ERFNet", ",", "self", ")", ".", "train", "(", "mode", ")", "\n", "if", "self", ".", "_enable_pbn", ":", "\n", "            ", "print", "(", "\"Freezing BatchNorm2D.\"", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "SynchronizedBatchNorm2d", ")", ":", "\n", "                    ", "m", ".", "eval", "(", ")", "\n", "# shutdown update in frozen mode", "\n", "m", ".", "weight", ".", "requires_grad", "=", "False", "\n", "m", ".", "bias", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.erfnet.ERFNet.partialBN": [[179, 181], ["None"], "methods", ["None"], ["", "", "", "", "def", "partialBN", "(", "self", ",", "enable", ")", ":", "\n", "        ", "self", ".", "_enable_pbn", "=", "enable", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.erfnet.ERFNet.get_optim_policies": [[182, 252], ["erfnet.ERFNet.encoder.modules", "erfnet.ERFNet.decoder.modules", "isinstance", "isinstance", "list", "base_weight.append", "isinstance", "list", "base_weight.append", "isinstance", "m.parameters", "len", "base_bias.append", "base_bn.extend", "m.parameters", "len", "base_bias.append", "base_bn.extend", "list", "list", "m.parameters", "m.parameters"], "methods", ["None"], ["", "def", "get_optim_policies", "(", "self", ")", ":", "\n", "        ", "base_weight", "=", "[", "]", "\n", "base_bias", "=", "[", "]", "\n", "base_bn", "=", "[", "]", "\n", "\n", "addtional_weight", "=", "[", "]", "\n", "addtional_bias", "=", "[", "]", "\n", "addtional_bn", "=", "[", "]", "\n", "\n", "# print(self.modules())", "\n", "\n", "for", "m", "in", "self", ".", "encoder", ".", "modules", "(", ")", ":", "# self.base_model.modules()", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "# print(1)", "\n", "                ", "ps", "=", "list", "(", "m", ".", "parameters", "(", ")", ")", "\n", "base_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "if", "len", "(", "ps", ")", "==", "2", ":", "\n", "                    ", "base_bias", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "SynchronizedBatchNorm2d", ")", ":", "\n", "# print(2)", "\n", "                ", "base_bn", ".", "extend", "(", "list", "(", "m", ".", "parameters", "(", ")", ")", ")", "\n", "\n", "", "", "for", "m", "in", "self", ".", "decoder", ".", "modules", "(", ")", ":", "# self.base_model.modules()", "\n", "            ", "if", "isinstance", "(", "m", ",", "SynchronizedBatchNorm2d", ")", ":", "\n", "# print(1)", "\n", "                ", "ps", "=", "list", "(", "m", ".", "parameters", "(", ")", ")", "\n", "base_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "if", "len", "(", "ps", ")", "==", "2", ":", "\n", "                    ", "base_bias", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "SynchronizedBatchNorm2d", ")", ":", "\n", "# print(2)", "\n", "                ", "base_bn", ".", "extend", "(", "list", "(", "m", ".", "parameters", "(", ")", ")", ")", "\n", "\n", "\n", "", "", "return", "[", "\n", "{", "\n", "'params'", ":", "addtional_weight", ",", "\n", "'lr_mult'", ":", "10", ",", "\n", "'decay_mult'", ":", "1", ",", "\n", "'name'", ":", "\"addtional weight\"", "\n", "}", ",", "\n", "{", "\n", "'params'", ":", "addtional_bias", ",", "\n", "'lr_mult'", ":", "20", ",", "\n", "'decay_mult'", ":", "1", ",", "\n", "'name'", ":", "\"addtional bias\"", "\n", "}", ",", "\n", "{", "\n", "'params'", ":", "addtional_bn", ",", "\n", "'lr_mult'", ":", "10", ",", "\n", "'decay_mult'", ":", "0", ",", "\n", "'name'", ":", "\"addtional BN scale/shift\"", "\n", "}", ",", "\n", "{", "\n", "'params'", ":", "base_weight", ",", "\n", "'lr_mult'", ":", "1", ",", "\n", "'decay_mult'", ":", "1", ",", "\n", "'name'", ":", "\"base weight\"", "\n", "}", ",", "\n", "{", "\n", "'params'", ":", "base_bias", ",", "\n", "'lr_mult'", ":", "2", ",", "\n", "'decay_mult'", ":", "0", ",", "\n", "'name'", ":", "\"base bias\"", "\n", "}", ",", "\n", "{", "\n", "'params'", ":", "base_bn", ",", "\n", "'lr_mult'", ":", "1", ",", "\n", "'decay_mult'", ":", "0", ",", "\n", "'name'", ":", "\"base BN scale/shift\"", "\n", "}", ",", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.erfnet.ERFNet.forward": [[255, 264], ["erfnet.ERFNet.encoder.forward", "erfnet.ERFNet.encoder", "erfnet.ERFNet.decoder.forward"], "methods", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.batchnorm._SynchronizedBatchNorm.forward", "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.batchnorm._SynchronizedBatchNorm.forward"], ["", "def", "forward", "(", "self", ",", "input", ",", "only_encode", "=", "False", ")", ":", "\n", "        ", "if", "only_encode", ":", "\n", "            ", "return", "self", ".", "encoder", ".", "forward", "(", "input", ",", "predict", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "middle_feature1", ",", "output", "=", "self", ".", "encoder", "(", "input", ")", "#predict=False by default", "\n", "# mid_x = torch.sum(output, 1) # newly_added", "\n", "# mid_x = mid_x * mid_x", "\n", "middle_feature2", ",", "output", "=", "self", ".", "decoder", ".", "forward", "(", "output", ")", "\n", "return", "middle_feature1", ",", "middle_feature2", ",", "output", "#, output #, mid_x", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.kd_model.NetModel.__init__": [[77, 188], ["kd_model.load_T_model", "networks.Unetpp.NestedUNet.to", "kd_model.load_Paraphraser", "kd_model.NetModel.Paraphraser_shallow.to", "kd_model.NetModel.Paraphraser_depth.to", "torch.Adam", "torch.Adam", "torch.Adam", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "utils.criterion.CriterionKD().cuda", "utils.criterion.Cross_layer_CriterionSpatialwithChannel().cuda", "utils.criterion.CriterionGraph().cuda", "networks.MobileNetV2_unet.MobileNetV2_unet", "kd_model.load_S_model", "networks.erfnet.ERFNet.to", "networks.erfnet.ERFNet.to", "networks.Unet_SKA2.UnetSKA2", "networks.feature_projection.Paraphraser", "networks.feature_projection.Paraphraser", "networks.feature_projection.Paraphraser", "networks.feature_projection.Paraphraser", "networks.sagan_models.Discriminator", "kd_model.NetModel.student.parameters", "torch.Adam", "torch.Adam", "torch.Adam", "utils.criterion.CriterionIFV().cuda", "utils.criterion.CriterionPixelWise().cuda", "utils.criterion.CriterionPairWiseforWholeFeatAfterPool().cuda", "utils.criterion.AT().cuda", "utils.criterion.FSP().cuda", "utils.criterion.GANLoss().cuda", "utils.criterion.CriterionAdv().cuda", "utils.criterion.CriterionAdvForG().cuda", "networks.enet.ENet", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "networks.Unetpp.NestedUNet", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "kd_model.NetModel.D_model.to", "kd_model.NetModel.D_model.parameters", "utils.criterion.CriterionKD", "utils.criterion.Cross_layer_CriterionSpatialwithChannel", "utils.criterion.CriterionGraph", "utils.criterion.CriterionAdditionalGP().cuda", "networks.erfnet.ERFNet", "utils.criterion.CriterionIFV", "utils.criterion.CriterionPixelWise", "utils.criterion.CriterionPairWiseforWholeFeatAfterPool", "utils.criterion.AT", "utils.criterion.FSP", "utils.criterion.GANLoss", "utils.criterion.CriterionAdv", "utils.criterion.CriterionAdvForG", "utils.criterion.CriterionAdditionalGP"], "methods", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.kd_model.load_T_model", "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.kd_model.load_Paraphraser", "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.kd_model.load_S_model"], ["    ", "def", "__init__", "(", "self", ",", "teacher", ",", "student", ",", "lr", ",", "lr_d", ",", "preprocess_GAN_mode", ",", "num_classes", ",", "batch_size", ",", "imsize_for_adv", ",", "adv_conv_dim", ",", "adv_loss_type", ",", "adversial", "=", "False", ",", "KD", "=", "False", ",", "student_pth", "=", "False", ",", "teacher_pth", "=", "\"085.pth\"", ",", "lambda_s", "=", "1.0", ",", "lambda_adv", "=", "1.0", ",", "lambda_d", "=", "0.1", ",", "mode", "=", "\"sp\"", ")", ":", "\n", "#load scratch student network", "\n", "#student = Unet()", "\n", "        ", "student_1", "=", "student", "\n", "if", "student", "==", "\"MobileNetV2_unet\"", ":", "\n", "            ", "student", "=", "MobileNetV2_unet", "(", "num_classes", "=", "num_classes", ",", "pre_trained", "=", "None", ")", "\n", "", "elif", "student", "==", "\"ENet\"", ":", "\n", "            ", "student", "=", "ENet", "(", "num_classes", ")", "\n", "", "elif", "student", "==", "\"ERFNet\"", ":", "\n", "            ", "student", "=", "ERFNet", "(", "num_classes", ")", "\n", "\n", "\n", "", "self", ".", "lambda_s", "=", "lambda_s", "\n", "self", ".", "lambda_d", "=", "lambda_d", "\n", "self", ".", "lambda_adv", "=", "lambda_adv", "\n", "\n", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "lr_d", "=", "lr_d", "\n", "self", ".", "adversial", "=", "adversial", "\n", "self", ".", "KD", "=", "KD", "\n", "self", ".", "adv_loss_type", "=", "adv_loss_type", "\n", "if", "student_pth", ":", "\n", "            ", "load_S_model", "(", "student_pth", ",", "model", "=", "student", ")", "\n", "student", ".", "to", "(", "device", ")", "\n", "self", ".", "student", "=", "student", "\n", "", "else", ":", "\n", "\n", "            ", "if", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ")", ":", "\n", "                ", "student", "=", "nn", ".", "DataParallel", "(", "student", ")", "\n", "", "student", ".", "to", "(", "device", ")", "\n", "self", ".", "student", "=", "student", "\n", "#load  teacher", "\n", "#teacher=Unet()", "\n", "", "if", "teacher", "==", "\"FANet\"", ":", "\n", "            ", "teacher", "=", "UnetSKA2", "(", "in_ch", "=", "1", ",", "out_ch", "=", "num_classes", ")", "\n", "", "elif", "teacher", "==", "\"Unet++\"", ":", "\n", "            ", "teacher", "=", "NestedUNet", "(", "in_ch", "=", "1", ",", "out_ch", "=", "num_classes", ")", "\n", "", "load_T_model", "(", "pth", "=", "teacher_pth", ",", "model", "=", "teacher", ")", "\n", "teacher", ".", "to", "(", "device", ")", "\n", "self", ".", "teacher", "=", "teacher", "\n", "\n", "#load Paraphraser", "\n", "#mobileUnet", "\n", "#self.Paraphraser_shallow=Paraphraser(in_planes=256,planes=24)", "\n", "#self.Paraphraser_depth=Paraphraser(in_planes=256,planes=24)", "\n", "\n", "if", "student_1", "==", "\"MobileNetV2_unet\"", ":", "\n", "            ", "self", ".", "Paraphraser_shallow", "=", "Paraphraser", "(", "in_planes", "=", "256", ",", "planes", "=", "24", ")", "\n", "self", ".", "Paraphraser_depth", "=", "Paraphraser", "(", "in_planes", "=", "256", ",", "planes", "=", "24", ")", "\n", "#self.Translator_shallow=Translator(in_planes=24,planes=num_classes)", "\n", "#self.Translator_depth=Translator(in_planes=24,planes=num_classes)", "\n", "", "else", ":", "\n", "#enet erfnet", "\n", "            ", "self", ".", "Paraphraser_shallow", "=", "Paraphraser", "(", "in_planes", "=", "256", ",", "planes", "=", "64", ")", "\n", "self", ".", "Paraphraser_depth", "=", "Paraphraser", "(", "in_planes", "=", "256", ",", "planes", "=", "64", ")", "\n", "#self.Translator_shallow=Translator(in_planes=64,planes=num_classes)", "\n", "#self.Translator_depth=Translator(in_planes=64,planes=num_classes)", "\n", "", "\"\"\"\n        if torch.cuda.device_count() > 1:\n            self.Translator_shallow = nn.DataParallel(self.Translator_shallow)\n            self.Translator_depth = nn.DataParallel(self.Translator_depth)\n            self.Translator_shallow.to(device)\n            self.Translator_depth.to(device)\n        \"\"\"", "\n", "load_Paraphraser", "(", "\"195.pth\"", ",", "self", ".", "Paraphraser_shallow", ",", "self", ".", "Paraphraser_depth", ")", "\n", "self", ".", "Paraphraser_shallow", ".", "to", "(", "device", ")", "\n", "self", ".", "Paraphraser_depth", ".", "to", "(", "device", ")", "\n", "\n", "#load Discriminator", "\n", "if", "(", "self", ".", "adversial", "==", "True", ")", ":", "\n", "            ", "self", ".", "D_model", "=", "Discriminator", "(", "preprocess_GAN_mode", ",", "num_classes", ",", "batch_size", ",", "imsize_for_adv", ",", "adv_conv_dim", ")", "\n", "#self.D_model=PixelDiscriminator(num_classes+1)", "\n", "#self.D_model=NLayerDiscriminator(num_classes+1,n_layers=3)", "\n", "if", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ")", ":", "\n", "                ", "self", ".", "D_model", "=", "nn", ".", "DataParallel", "(", "self", ".", "D_model", ")", "\n", "self", ".", "D_model", ".", "to", "(", "device", ")", "\n", "\n", "\n", "", "", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "student", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "weight_decay", "=", "2e-4", ")", "\n", "if", "(", "self", ".", "adversial", "==", "True", ")", ":", "\n", "            ", "self", ".", "D_solver", "=", "optim", ".", "Adam", "(", "self", ".", "D_model", ".", "parameters", "(", ")", ",", "lr_d", ",", "[", "0.9", ",", "0.99", "]", ")", "\n", "\n", "\n", "", "self", ".", "criterion_ce", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "criterion_kd", "=", "CriterionKD", "(", ")", ".", "cuda", "(", ")", "\n", "\"\"\"\n        self.criterion_sp = CriterionSpatial().cuda()\n        self.criterion_ch = CriterionChannel().cuda()\n        self.criterion_sc = CriterionSpatialwithChannel().cuda()\n        \"\"\"", "\n", "self", ".", "criterion_csc", "=", "Cross_layer_CriterionSpatialwithChannel", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "criterion_graph", "=", "CriterionGraph", "(", ")", ".", "cuda", "(", ")", "\n", "#self.criterion_L1 = nn.L1Loss()", "\n", "if", "mode", "==", "\"IFVD\"", ":", "\n", "            ", "self", ".", "criterion_IFVD", "=", "CriterionIFV", "(", "num_classes", ")", ".", "cuda", "(", ")", "\n", "", "if", "mode", "==", "\"SKD\"", ":", "\n", "            ", "self", ".", "criterion_pixel_wise", "=", "CriterionPixelWise", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "criterion_pair_wise_for_interfeat", "=", "CriterionPairWiseforWholeFeatAfterPool", "(", "0.5", ",", "feat_ind", "=", "-", "5", ")", ".", "cuda", "(", ")", "\n", "", "if", "mode", "==", "\"AT\"", ":", "\n", "            ", "self", ".", "criterion_at", "=", "AT", "(", "p", "=", "1", ")", ".", "cuda", "(", ")", "\n", "", "if", "mode", "==", "\"FSP\"", ":", "\n", "            ", "self", ".", "criterion_fsp", "=", "FSP", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "", "if", "(", "self", ".", "adversial", "==", "True", ")", ":", "\n", "            ", "self", ".", "criterionGAN", "=", "GANLoss", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "criterion_adv", "=", "CriterionAdv", "(", "self", ".", "adv_loss_type", ")", ".", "cuda", "(", ")", "\n", "self", ".", "criterion_adv_for_G", "=", "CriterionAdvForG", "(", "self", ".", "adv_loss_type", ")", ".", "cuda", "(", ")", "\n", "if", "(", "self", ".", "adv_loss_type", "==", "\"wgan-gp\"", ")", ":", "\n", "                ", "self", ".", "criterion_AdditionalGP", "=", "CriterionAdditionalGP", "(", "self", ".", "D_model", ",", "10.0", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.kd_model.NetModel.adjust_learning_rate_poly": [[192, 238], ["len"], "methods", ["None"], ["", "", "", "def", "adjust_learning_rate_poly", "(", "self", ",", "optimizer", ",", "all_iter", ",", "now_iter", ",", "epoch", ")", ":", "\n", "\n", "# gastriccancer", "\n", "        ", "if", "epoch", "<=", "50", ":", "\n", "#base_lr = 3*0.0003", "\n", "            ", "base_lr", "=", "0.003", "\n", "\n", "", "elif", "epoch", ">", "50", "and", "epoch", "<=", "100", ":", "\n", "#base_lr = 3*0.00003", "\n", "            ", "base_lr", "=", "0.0003", "\n", "", "elif", "epoch", ">", "100", "and", "epoch", "<=", "150", ":", "\n", "#base_lr=3*0.00003", "\n", "            ", "base_lr", "=", "0.00003", "\n", "", "elif", "epoch", ">", "150", ":", "\n", "#base_lr=3*0.00003", "\n", "            ", "base_lr", "=", "0.000003", "\n", "\n", "\n", "", "\"\"\"\n        if epoch <= 100:\n            #base_lr = 3*0.0003\n            base_lr = 0.005\n        \n        elif epoch>100 and epoch<=200:\n            #base_lr = 3*0.00003\n            base_lr=0.005\n        elif epoch>200:\n            #base_lr=3*0.00003\n            base_lr = 0.0003\n        \"\"\"", "\n", "#base_lr=0.0009 #csc synapse ", "\n", "#base_lr=0.0003 #graph synapse", "\n", "#base_lr=0.0000001", "\n", "lr", "=", "base_lr", "*", "(", "(", "1", "-", "(", "now_iter", "/", "all_iter", ")", ")", "**", "0.9", ")", "\n", "#lr = base_lr", "\n", "\n", "if", "(", "len", "(", "optimizer", ".", "param_groups", ")", "==", "1", ")", ":", "\n", "            ", "optimizer", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", "=", "lr", "\n", "", "else", ":", "\n", "\n", "            ", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "lr", "*", "0.1", "\n", "\n", "", "\"\"\"\n        for i in range(0,len(optimizer.param_groups)):\n            optimizer.param_groups[i]['lr'] = lr\n        \"\"\"", "\n", "", "def", "adjust_learning_rate", "(", "sefl", ",", "optimizer", ",", "base_lr", ",", "all_iter", ",", "now_iter", ",", "epoch", ")", ":", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.kd_model.NetModel.adjust_learning_rate": [[238, 269], ["None"], "methods", ["None"], ["", "def", "adjust_learning_rate", "(", "sefl", ",", "optimizer", ",", "base_lr", ",", "all_iter", ",", "now_iter", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"\n        if  epoch<=50:\n            #base_lr = 3*0.0003\n            base_lr = 0.0003\n        elif epoch>50 and epoch<=100:\n            #base_lr = 3*0.00003\n            base_lr=0.00003\n        elif epoch>100 and epoch<=150:\n            #base_lr=3*0.00003\n            base_lr = 0.000003\n        elif epoch>150:\n            #base_lr=3*0.00003\n            base_lr = 0.0000003\n        \"\"\"", "\n", "\"\"\"\n        if epoch <= 50:\n            #base_lr = 3*0.0003\n            base_lr = 0.0003\n        \n        elif epoch>50 and epoch<=100:\n            #base_lr = 3*0.00003\n            base_lr=0.0003\n        elif epoch>100 :\n            #base_lr=3*0.00003\n            base_lr = 0.000003\n        \"\"\"", "\n", "base_lr", "=", "0.00003", "\n", "#lr = base_lr", "\n", "lr", "=", "base_lr", "*", "(", "(", "1", "-", "(", "now_iter", "/", "all_iter", ")", ")", "**", "0.9", ")", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "lr", "\n", "", "def", "set_requires_grad", "(", "self", ",", "nets", ",", "requires_grad", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.kd_model.NetModel.set_requires_grad": [[269, 281], ["isinstance", "net.parameters"], "methods", ["None"], ["", "def", "set_requires_grad", "(", "self", ",", "nets", ",", "requires_grad", "=", "False", ")", ":", "\n", "        ", "\"\"\"Set requies_grad=Fasle for all the networks to avoid unnecessary computations\n        Parameters:\n            nets (network list)   -- a list of networks\n            requires_grad (bool)  -- whether the networks require gradients or not\n        \"\"\"", "\n", "if", "not", "isinstance", "(", "nets", ",", "list", ")", ":", "\n", "            ", "nets", "=", "[", "nets", "]", "\n", "", "for", "net", "in", "nets", ":", "\n", "            ", "if", "net", "is", "not", "None", ":", "\n", "                ", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "                    ", "param", ".", "requires_grad", "=", "requires_grad", "\n", "", "", "", "", "def", "set_input", "(", "self", ",", "data", ")", ":", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.kd_model.NetModel.set_input": [[281, 285], ["data[].to", "data[].to", "kd_model.NetModel.label.long"], "methods", ["None"], ["", "", "", "", "def", "set_input", "(", "self", ",", "data", ")", ":", "\n", "        ", "self", ".", "image", "=", "data", "[", "\"image\"", "]", ".", "to", "(", "device", ")", "\n", "self", ".", "label", "=", "data", "[", "\"label\"", "]", ".", "to", "(", "device", ")", "\n", "self", ".", "label", "=", "self", ".", "label", ".", "long", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.kd_model.NetModel.segmentation_forward": [[286, 302], ["kd_model.NetModel.student.train", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "kd_model.NetModel.teacher.eval", "kd_model.NetModel.Paraphraser_shallow", "kd_model.NetModel.Paraphraser_depth"], "methods", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.erfnet.ERFNet.train"], ["", "def", "segmentation_forward", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "mode", "!=", "\"scratch\"", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "self", ".", "middel_feature_T_1", ",", "self", ".", "middel_feature_T", ",", "self", ".", "preds_T", "=", "self", ".", "teacher", ".", "eval", "(", ")", "(", "self", ".", "image", ")", "\n", "if", "self", ".", "mode", "==", "\"sc\"", "or", "self", ".", "mode", "==", "\"sp\"", "or", "self", ".", "mode", "==", "\"FSP\"", "or", "self", ".", "mode", "==", "\"Graph\"", ":", "\n", "\n", "#if self.mode== \"csc\" or self.mode==\"sc\" or self.mode==\"sp\" or self.mode==\"FSP\" or self.mode==\"Graph\":", "\n", "#print(\"loaded\")", "\n", "                    ", "self", ".", "middel_feature_T_1", "=", "self", ".", "Paraphraser_shallow", "(", "self", ".", "middel_feature_T_1", ",", "1", ")", "\n", "self", ".", "middel_feature_T", "=", "self", ".", "Paraphraser_depth", "(", "self", ".", "middel_feature_T", ",", "1", ")", "\n", "\n", "\n", "\n", "\n", "\n", "", "", "", "self", ".", "middel_feature_S_1", ",", "self", ".", "middel_feature_S", ",", "self", ".", "preds_S", "=", "self", ".", "student", ".", "train", "(", ")", "(", "self", ".", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.kd_model.NetModel.segmentation_backward": [[304, 383], ["kd_model.NetModel.criterion_ce", "kd_model.NetModel.item", "loss.backward", "loss.item", "kd_model.NetModel.item", "kd_model.NetModel.item", "kd_model.NetModel.D_model", "kd_model.NetModel.item", "kd_model.NetModel.criterion_csc", "kd_model.NetModel.criterion_graph", "temp_edges.item", "temp_vertices.item", "kd_model.NetModel.criterion_kd", "kd_model.NetModel.criterion_adv_for_G", "kd_model.NetModel.item", "kd_model.NetModel.criterion_IFVD", "temp_1.item", "temp_2.item", "kd_model.NetModel.criterion_pixel_wise", "kd_model.NetModel.criterion_pair_wise_for_interfeat", "kd_model.NetModel.item", "kd_model.NetModel.criterion_at", "kd_model.NetModel.criterion_at", "kd_model.NetModel.item", "kd_model.NetModel.criterion_fsp"], "methods", ["None"], ["", "def", "segmentation_backward", "(", "self", ",", "lambda_kd", "=", "1.0", ",", "lambda_s", "=", "1.0", ",", "lambda_adv", "=", "0.1", ")", ":", "\n", "        ", "loss", "=", "0", "\n", "temp", "=", "self", ".", "criterion_ce", "(", "self", ".", "preds_S", ",", "self", ".", "label", ")", "\n", "self", ".", "ce_loss", "=", "temp", ".", "item", "(", ")", "\n", "loss", "=", "temp", "\n", "\n", "if", "self", ".", "mode", "==", "\"csc\"", ":", "\n", "            ", "temp", "=", "lambda_s", "*", "self", ".", "criterion_csc", "(", "self", ".", "middel_feature_S_1", ",", "self", ".", "middel_feature_S", ",", "self", ".", "middel_feature_T_1", ",", "self", ".", "middel_feature_T", ")", "\n", "self", ".", "csc_loss", "=", "temp", ".", "item", "(", ")", "\n", "loss", "=", "loss", "+", "temp", "\n", "\n", "", "elif", "self", ".", "mode", "==", "\"Graph\"", ":", "\n", "\n", "\n", "            ", "temp_edges", ",", "temp_vertices", "=", "self", ".", "criterion_graph", "(", "self", ".", "middel_feature_S_1", ",", "self", ".", "middel_feature_S", ",", "self", ".", "middel_feature_T_1", ",", "self", ".", "middel_feature_T", ")", "\n", "#patch_size=3 GastricCancer", "\n", "#temp_edges=0.0000001*lambda_s*temp_edges", "\n", "#temp_edges=0.0000000001*lambda_s*temp_edges", "\n", "temp_edges", "=", "0.00000001", "*", "lambda_s", "*", "temp_edges", "\n", "\n", "\n", "#patch_size=3 GastricCancer", "\n", "#temp_vertices=0.0001*lambda_s*temp_vertices", "\n", "#temp_vertices=0.00001*lambda_s*temp_vertices", "\n", "temp_vertices", "=", "0.00001", "*", "lambda_s", "*", "temp_vertices", "\n", "\n", "\n", "\n", "self", ".", "graph_edges_loss", "=", "temp_edges", ".", "item", "(", ")", "\n", "self", ".", "graph_vertices_loss", "=", "temp_vertices", ".", "item", "(", ")", "\n", "loss", "=", "loss", "+", "temp_edges", "+", "temp_vertices", "\n", "", "elif", "self", ".", "mode", "==", "\"IFVD\"", ":", "\n", "            ", "temp", "=", "lambda_s", "*", "self", ".", "criterion_IFVD", "(", "self", ".", "middel_feature_S", ",", "self", ".", "middel_feature_T", ",", "self", ".", "label", ")", "\n", "self", ".", "IFVD_loss", "=", "temp", ".", "item", "(", ")", "\n", "loss", "=", "loss", "+", "temp", "\n", "", "elif", "self", ".", "mode", "==", "\"SKD\"", ":", "\n", "            ", "temp_1", "=", "lambda_s", "*", "self", ".", "criterion_pixel_wise", "(", "self", ".", "preds_S", ",", "self", ".", "preds_T", ")", "\n", "temp_2", "=", "0.1", "*", "lambda_s", "*", "self", ".", "criterion_pair_wise_for_interfeat", "(", "self", ".", "middel_feature_S_1", ",", "self", ".", "middel_feature_T_1", ")", "\n", "\n", "\n", "self", ".", "pi_loss", "=", "temp_1", ".", "item", "(", ")", "\n", "self", ".", "pair_loss", "=", "temp_2", ".", "item", "(", ")", "\n", "loss", "=", "loss", "+", "temp_1", "+", "temp_2", "\n", "", "elif", "self", ".", "mode", "==", "\"AT\"", ":", "\n", "            ", "temp", "=", "lambda_s", "*", "self", ".", "criterion_at", "(", "self", ".", "middel_feature_S_1", ",", "self", ".", "middel_feature_T_1", ")", "\n", "temp", "+=", "lambda_s", "*", "self", ".", "criterion_at", "(", "self", ".", "middel_feature_S", ",", "self", ".", "middel_feature_T", ")", "\n", "\n", "self", ".", "at_loss", "=", "temp", ".", "item", "(", ")", "\n", "loss", "=", "loss", "+", "temp", "\n", "", "elif", "self", ".", "mode", "==", "\"FSP\"", ":", "\n", "            ", "temp", "=", "lambda_s", "*", "self", ".", "criterion_fsp", "(", "self", ".", "middel_feature_S_1", ",", "self", ".", "middel_feature_S", ",", "self", ".", "middel_feature_T_1", ",", "self", ".", "middel_feature_T", ")", "\n", "\n", "\n", "self", ".", "fsp_loss", "=", "temp", ".", "item", "(", ")", "\n", "loss", "=", "loss", "+", "temp", "\n", "\n", "", "if", "self", ".", "KD", "==", "True", ":", "\n", "            ", "temp", "=", "lambda_kd", "*", "self", ".", "criterion_kd", "(", "self", ".", "preds_S", ",", "self", ".", "preds_T", ")", "\n", "self", ".", "kd_loss", "=", "temp", ".", "item", "(", ")", "\n", "loss", "=", "loss", "+", "temp", "\n", "\n", "", "if", "(", "self", ".", "adversial", "==", "True", ")", ":", "\n", "#fake_AB = torch.cat((self.image, self.preds_S), 1)", "\n", "\n", "#pred_fake = self.D_model(fake_AB)", "\n", "\n", "            ", "pred_fake", "=", "self", ".", "D_model", "(", "self", ".", "preds_S", ")", "\n", "\n", "temp", "=", "lambda_adv", "*", "self", ".", "criterion_adv_for_G", "(", "pred_fake", ")", "\n", "self", ".", "adv_G_loss", "=", "temp", ".", "item", "(", ")", "\n", "\n", "loss", "=", "loss", "+", "temp", "\n", "\n", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "\n", "\n", "self", ".", "loss", "=", "loss", ".", "item", "(", ")", "\n", "", "def", "discriminator_backword", "(", "self", ",", "lambda_d", "=", "1.0", ")", ":", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.kd_model.NetModel.discriminator_backword": [[383, 414], ["kd_model.NetModel.D_model", "kd_model.NetModel.D_model", "kd_model.NetModel.criterion_adv", "kd_model.NetModel.backward", "kd_model.NetModel.preds_S.detach", "kd_model.NetModel.item", "kd_model.NetModel.criterion_AdditionalGP"], "methods", ["None"], ["", "def", "discriminator_backword", "(", "self", ",", "lambda_d", "=", "1.0", ")", ":", "\n", "        ", "\"\"\"\n        # Fake; stop backprop to the generator by detaching fake_B fake_B\u662fstudent\u7684\u8f93\u51fa\n        fake_AB = torch.cat((self.image, self.preds_S), 1)  # we use conditional GANs; we need to feed both input and output to the discriminator\n        pred_fake = self.D_model(fake_AB.detach())\n        real_AB = torch.cat((self.image, self.preds_T), 1)\n        pred_real = self.D_model(real_AB)\n \n       \n        d_loss=self.criterion_adv(pred_fake,pred_real)\n        self.w_distance=-d_loss.item()\n        d_loss=lambda_d*d_loss\n  \n        if(self.adv_loss_type==\"wgan-gp\"): d_loss += lambda_d*self.criterion_AdditionalGP(fake_AB, real_AB)\n        \n        d_loss.backward()\n        \n        \n        \"\"\"", "\n", "pred_fake", "=", "self", ".", "D_model", "(", "self", ".", "preds_S", ".", "detach", "(", ")", ")", "\n", "\n", "pred_real", "=", "self", ".", "D_model", "(", "self", ".", "preds_T", ")", "\n", "\n", "\n", "d_loss", "=", "self", ".", "criterion_adv", "(", "pred_fake", ",", "pred_real", ")", "\n", "self", ".", "w_distance", "=", "-", "d_loss", ".", "item", "(", ")", "\n", "d_loss", "=", "lambda_d", "*", "d_loss", "\n", "\n", "if", "(", "self", ".", "adv_loss_type", "==", "\"wgan-gp\"", ")", ":", "d_loss", "+=", "lambda_d", "*", "self", ".", "criterion_AdditionalGP", "(", "self", ".", "preds_S", ",", "self", ".", "preds_T", ")", "\n", "\n", "d_loss", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.kd_model.NetModel.optimize_parameters": [[415, 433], ["kd_model.NetModel.set_input", "kd_model.NetModel.segmentation_forward", "kd_model.NetModel.adjust_learning_rate_poly", "kd_model.NetModel.optimizer.zero_grad", "kd_model.NetModel.segmentation_backward", "kd_model.NetModel.optimizer.step", "kd_model.NetModel.set_requires_grad", "kd_model.NetModel.set_requires_grad", "kd_model.NetModel.adjust_learning_rate", "kd_model.NetModel.D_solver.zero_grad", "kd_model.NetModel.discriminator_backword", "kd_model.NetModel.D_solver.step"], "methods", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.kd_model.NetModel.set_input", "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.kd_model.NetModel.segmentation_forward", "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.kd_model.NetModel.adjust_learning_rate_poly", "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.kd_model.NetModel.segmentation_backward", "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.kd_model.NetModel.set_requires_grad", "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.kd_model.NetModel.set_requires_grad", "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.kd_model.NetModel.adjust_learning_rate", "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.kd_model.NetModel.discriminator_backword"], ["", "def", "optimize_parameters", "(", "self", ",", "data", ",", "lambda_kd", ",", "all_iter", ",", "now_iter", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "set_input", "(", "data", ")", "\n", "self", ".", "segmentation_forward", "(", ")", "\n", "\n", "self", ".", "adjust_learning_rate_poly", "(", "self", ".", "optimizer", ",", "all_iter", ",", "now_iter", ",", "epoch", ")", "\n", "if", "(", "self", ".", "adversial", "==", "True", ")", ":", "\n", "            ", "self", ".", "set_requires_grad", "(", "self", ".", "D_model", ",", "False", ")", "\n", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "self", ".", "segmentation_backward", "(", "lambda_kd", "=", "1", ",", "lambda_s", "=", "self", ".", "lambda_s", ",", "lambda_adv", "=", "self", ".", "lambda_adv", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "(", "True", ")", ":", "\n", "            ", "if", "(", "self", ".", "adversial", "==", "True", ")", ":", "\n", "                ", "self", ".", "set_requires_grad", "(", "self", ".", "D_model", ",", "True", ")", "\n", "self", ".", "adjust_learning_rate", "(", "self", ".", "D_solver", ",", "self", ".", "lr_d", ",", "all_iter", ",", "now_iter", ",", "epoch", ")", "\n", "self", ".", "D_solver", ".", "zero_grad", "(", ")", "\n", "self", ".", "discriminator_backword", "(", "lambda_d", "=", "self", ".", "lambda_d", ")", "\n", "self", ".", "D_solver", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.kd_model.load_S_model": [[33, 43], ["logger.info", "os.path.exists", "os.path.join", "torch.load", "torch.load", "torch.load", "nn.DataParallel.load_state_dict", "logger.warning", "os.path.join", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.DataParallel"], "function", ["None"], ["def", "load_S_model", "(", "pth", ",", "model", ")", ":", "\n", "    ", "logger", ".", "info", "(", "\"Stduent Model loaded from student/models/{}\"", ".", "format", "(", "pth", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "\"student/models\"", ",", "pth", ")", ")", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "\"./student/moels\"", ",", "pth", ")", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "            ", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "else", ":", "\n", "        ", "logger", ".", "warning", "(", "\"Student Model pth does not exists\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.kd_model.load_T_model": [[44, 55], ["logger.info", "os.path.exists", "os.path.join", "torch.load", "torch.load", "torch.load", "nn.DataParallel.load_state_dict", "logger.warning", "os.path.join", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.DataParallel"], "function", ["None"], ["", "", "def", "load_T_model", "(", "pth", ",", "model", ")", ":", "\n", "    ", "logger", ".", "info", "(", "'Teacher Model loaded from  teacher/models/{}'", ".", "format", "(", "pth", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "\"teacher/models\"", ",", "pth", ")", ")", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "\"teacher/models\"", ",", "pth", ")", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "            ", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n", "", "else", ":", "\n", "        ", "logger", ".", "warning", "(", "\"Teahcer Model pth does not exists\"", ")", "\n", "", "", "def", "load_Paraphraser", "(", "pth", ",", "model_shallow", ",", "model_depth", ")", ":", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.networks.kd_model.load_Paraphraser": [[55, 76], ["logger.info", "os.path.exists", "logger.info", "os.path.exists", "os.path.join", "torch.load", "torch.load", "torch.load", "nn.DataParallel.load_state_dict", "logger.warning", "os.path.join", "torch.load", "torch.load", "torch.load", "nn.DataParallel.load_state_dict", "logger.warning", "os.path.join", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.DataParallel", "os.path.join", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.DataParallel"], "function", ["None"], ["", "", "def", "load_Paraphraser", "(", "pth", ",", "model_shallow", ",", "model_depth", ")", ":", "\n", "    ", "logger", ".", "info", "(", "'Paraphraser Model loaded from  models/Paraphraser_shallow/{}'", ".", "format", "(", "pth", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "\"models/Paraphraser_shallow\"", ",", "pth", ")", ")", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "\"models/Paraphraser_shallow\"", ",", "pth", ")", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "            ", "model_shallow", "=", "nn", ".", "DataParallel", "(", "model_shallow", ")", "\n", "", "model_shallow", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n", "", "else", ":", "\n", "        ", "logger", ".", "warning", "(", "\"Paraphraser Model pth does not exists\"", ")", "\n", "", "logger", ".", "info", "(", "'Paraphraser Model loaded from  models/Paraphraser_depth/{}'", ".", "format", "(", "pth", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "\"models/Paraphraser_depth\"", ",", "pth", ")", ")", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "\"models/Paraphraser_depth\"", ",", "pth", ")", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "            ", "model_depth", "=", "nn", ".", "DataParallel", "(", "model_depth", ")", "\n", "", "model_depth", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n", "", "else", ":", "\n", "        ", "logger", ".", "warning", "(", "\"Paraphraser Model pth does not exists\"", ")", "\n", "", "", "class", "NetModel", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.replicate.DataParallelWithCallback.replicate": [[59, 63], ["super().replicate", "replicate.execute_replication_callbacks"], "methods", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.replicate.DataParallelWithCallback.replicate", "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.replicate.execute_replication_callbacks"], ["def", "replicate", "(", "self", ",", "module", ",", "device_ids", ")", ":", "\n", "        ", "modules", "=", "super", "(", "DataParallelWithCallback", ",", "self", ")", ".", "replicate", "(", "module", ",", "device_ids", ")", "\n", "execute_replication_callbacks", "(", "modules", ")", "\n", "return", "modules", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.replicate.execute_replication_callbacks": [[27, 45], ["len", "enumerate", "list", "replicate.CallbackContext", "enumerate", "master_copy.modules", "range", "module.modules", "hasattr", "m.__data_parallel_replicate__"], "function", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__data_parallel_replicate__"], ["", "def", "execute_replication_callbacks", "(", "modules", ")", ":", "\n", "    ", "\"\"\"\n    Execute an replication callback `__data_parallel_replicate__` on each module created by original replication.\n    The callback will be invoked with arguments `__data_parallel_replicate__(ctx, copy_id)`\n    Note that, as all modules are isomorphism, we assign each sub-module with a context\n    (shared among multiple copies of this module on different devices).\n    Through this context, different copies can share some information.\n    We guarantee that the callback on the master copy (the first copy) will be called ahead of calling the callback\n    of any slave copies.\n    \"\"\"", "\n", "master_copy", "=", "modules", "[", "0", "]", "\n", "nr_modules", "=", "len", "(", "list", "(", "master_copy", ".", "modules", "(", ")", ")", ")", "\n", "ctxs", "=", "[", "CallbackContext", "(", ")", "for", "_", "in", "range", "(", "nr_modules", ")", "]", "\n", "\n", "for", "i", ",", "module", "in", "enumerate", "(", "modules", ")", ":", "\n", "        ", "for", "j", ",", "m", "in", "enumerate", "(", "module", ".", "modules", "(", ")", ")", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "'__data_parallel_replicate__'", ")", ":", "\n", "                ", "m", ".", "__data_parallel_replicate__", "(", "ctxs", "[", "j", "]", ",", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.replicate.patch_replication_callback": [[65, 89], ["isinstance", "functools.wraps", "old_replicate", "replicate.execute_replication_callbacks"], "function", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.replicate.execute_replication_callbacks"], ["", "", "def", "patch_replication_callback", "(", "data_parallel", ")", ":", "\n", "    ", "\"\"\"\n    Monkey-patch an existing `DataParallel` object. Add the replication callback.\n    Useful when you have customized `DataParallel` implementation.\n    Examples:\n        > sync_bn = SynchronizedBatchNorm1d(10, eps=1e-5, affine=False)\n        > sync_bn = DataParallel(sync_bn, device_ids=[0, 1])\n        > patch_replication_callback(sync_bn)\n        # this is equivalent to\n        > sync_bn = SynchronizedBatchNorm1d(10, eps=1e-5, affine=False)\n        > sync_bn = DataParallelWithCallback(sync_bn, device_ids=[0, 1])\n    \"\"\"", "\n", "\n", "assert", "isinstance", "(", "data_parallel", ",", "DataParallel", ")", "\n", "\n", "old_replicate", "=", "data_parallel", ".", "replicate", "\n", "\n", "@", "functools", ".", "wraps", "(", "old_replicate", ")", "\n", "def", "new_replicate", "(", "module", ",", "device_ids", ")", ":", "\n", "        ", "modules", "=", "old_replicate", "(", "module", ",", "device_ids", ")", "\n", "execute_replication_callbacks", "(", "modules", ")", "\n", "return", "modules", "\n", "\n", "", "data_parallel", ".", "replicate", "=", "new_replicate", "", "", ""]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.comm.FutureResult.__init__": [[21, 25], ["threading.Lock", "threading.Condition"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_result", "=", "None", "\n", "self", ".", "_lock", "=", "threading", ".", "Lock", "(", ")", "\n", "self", ".", "_cond", "=", "threading", ".", "Condition", "(", "self", ".", "_lock", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.comm.FutureResult.put": [[26, 31], ["comm.FutureResult._cond.notify"], "methods", ["None"], ["", "def", "put", "(", "self", ",", "result", ")", ":", "\n", "        ", "with", "self", ".", "_lock", ":", "\n", "            ", "assert", "self", ".", "_result", "is", "None", ",", "'Previous result has\\'t been fetched.'", "\n", "self", ".", "_result", "=", "result", "\n", "self", ".", "_cond", ".", "notify", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.comm.FutureResult.get": [[32, 40], ["comm.FutureResult._cond.wait"], "methods", ["None"], ["", "", "def", "get", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "_lock", ":", "\n", "            ", "if", "self", ".", "_result", "is", "None", ":", "\n", "                ", "self", ".", "_cond", ".", "wait", "(", ")", "\n", "\n", "", "res", "=", "self", ".", "_result", "\n", "self", ".", "_result", "=", "None", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.comm.SlavePipe.run_slave": [[49, 54], ["comm.SlavePipe.queue.put", "comm.SlavePipe.result.get", "comm.SlavePipe.queue.put"], "methods", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.comm.FutureResult.put", "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.comm.FutureResult.put"], ["def", "run_slave", "(", "self", ",", "msg", ")", ":", "\n", "        ", "self", ".", "queue", ".", "put", "(", "(", "self", ".", "identifier", ",", "msg", ")", ")", "\n", "ret", "=", "self", ".", "result", ".", "get", "(", ")", "\n", "self", ".", "queue", ".", "put", "(", "True", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.comm.SyncMaster.__init__": [[66, 75], ["queue.Queue", "collections.OrderedDict"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "master_callback", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            master_callback: a callback to be invoked after having collected messages from slave devices.\n        \"\"\"", "\n", "self", ".", "_master_callback", "=", "master_callback", "\n", "self", ".", "_queue", "=", "queue", ".", "Queue", "(", ")", "\n", "self", ".", "_registry", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "self", ".", "_activated", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.comm.SyncMaster.__getstate__": [[76, 78], ["None"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "return", "{", "'master_callback'", ":", "self", ".", "_master_callback", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.comm.SyncMaster.__setstate__": [[79, 81], ["comm.SyncMaster.__init__"], "methods", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__init__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "self", ".", "__init__", "(", "state", "[", "'master_callback'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.comm.SyncMaster.register_slave": [[82, 96], ["comm.FutureResult", "_MasterRegistry", "comm.SlavePipe", "comm.SyncMaster._queue.empty", "comm.SyncMaster._registry.clear"], "methods", ["None"], ["", "def", "register_slave", "(", "self", ",", "identifier", ")", ":", "\n", "        ", "\"\"\"\n        Register an slave device.\n        Args:\n            identifier: an identifier, usually is the device id.\n        Returns: a `SlavePipe` object which can be used to communicate with the master device.\n        \"\"\"", "\n", "if", "self", ".", "_activated", ":", "\n", "            ", "assert", "self", ".", "_queue", ".", "empty", "(", ")", ",", "'Queue is not clean before next initialization.'", "\n", "self", ".", "_activated", "=", "False", "\n", "self", ".", "_registry", ".", "clear", "(", ")", "\n", "", "future", "=", "FutureResult", "(", ")", "\n", "self", ".", "_registry", "[", "identifier", "]", "=", "_MasterRegistry", "(", "future", ")", "\n", "return", "SlavePipe", "(", "identifier", ",", "self", ".", "_queue", ",", "future", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.comm.SyncMaster.run_master": [[97, 126], ["range", "comm.SyncMaster._master_callback", "range", "intermediates.append", "comm.SyncMaster._registry[].result.put", "comm.SyncMaster._queue.get", "comm.SyncMaster._queue.get"], "methods", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.comm.FutureResult.put", "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.comm.FutureResult.get"], ["", "def", "run_master", "(", "self", ",", "master_msg", ")", ":", "\n", "        ", "\"\"\"\n        Main entry for the master device in each forward pass.\n        The messages were first collected from each devices (including the master device), and then\n        an callback will be invoked to compute the message to be sent back to each devices\n        (including the master device).\n        Args:\n            master_msg: the message that the master want to send to itself. This will be placed as the first\n            message when calling `master_callback`. For detailed usage, see `_SynchronizedBatchNorm` for an example.\n        Returns: the message to be sent back to the master device.\n        \"\"\"", "\n", "self", ".", "_activated", "=", "True", "\n", "\n", "intermediates", "=", "[", "(", "0", ",", "master_msg", ")", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "nr_slaves", ")", ":", "\n", "            ", "intermediates", ".", "append", "(", "self", ".", "_queue", ".", "get", "(", ")", ")", "\n", "\n", "", "results", "=", "self", ".", "_master_callback", "(", "intermediates", ")", "\n", "assert", "results", "[", "0", "]", "[", "0", "]", "==", "0", ",", "'The first result should belongs to the master.'", "\n", "\n", "for", "i", ",", "res", "in", "results", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "continue", "\n", "", "self", ".", "_registry", "[", "i", "]", ".", "result", ".", "put", "(", "res", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "nr_slaves", ")", ":", "\n", "            ", "assert", "self", ".", "_queue", ".", "get", "(", ")", "is", "True", "\n", "\n", "", "return", "results", "[", "0", "]", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.comm.SyncMaster.nr_slaves": [[127, 130], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "nr_slaves", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_registry", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.unittest.TorchTestCase.assertTensorClose": [[24, 29], ["unittest.TorchTestCase.assertTrue", "unittest.as_numpy", "unittest.as_numpy", "numpy.allclose", "numpy.abs().max", "numpy.abs().max", "numpy.abs", "numpy.abs", "numpy.fmax"], "methods", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.unittest.as_numpy", "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.unittest.as_numpy"], ["    ", "def", "assertTensorClose", "(", "self", ",", "a", ",", "b", ",", "atol", "=", "1e-3", ",", "rtol", "=", "1e-3", ")", ":", "\n", "        ", "npa", ",", "npb", "=", "as_numpy", "(", "a", ")", ",", "as_numpy", "(", "b", ")", "\n", "self", ".", "assertTrue", "(", "\n", "np", ".", "allclose", "(", "npa", ",", "npb", ",", "atol", "=", "atol", ")", ",", "\n", "'Tensor close check failed\\n{}\\n{}\\nadiff={}, rdiff={}'", ".", "format", "(", "a", ",", "b", ",", "np", ".", "abs", "(", "npa", "-", "npb", ")", ".", "max", "(", ")", ",", "np", ".", "abs", "(", "(", "npa", "-", "npb", ")", "/", "np", ".", "fmax", "(", "npa", ",", "1e-5", ")", ")", ".", "max", "(", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.unittest.as_numpy": [[17, 21], ["isinstance", "v.cpu().numpy", "v.cpu"], "function", ["None"], ["def", "as_numpy", "(", "v", ")", ":", "\n", "    ", "if", "isinstance", "(", "v", ",", "Variable", ")", ":", "\n", "        ", "v", "=", "v", ".", "data", "\n", "", "return", "v", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__init__": [[39, 47], ["torch.nn.modules.batchnorm._BatchNorm.__init__", "comm.SyncMaster"], "methods", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", "_SynchronizedBatchNorm", ",", "self", ")", ".", "__init__", "(", "num_features", ",", "eps", "=", "eps", ",", "momentum", "=", "momentum", ",", "affine", "=", "affine", ")", "\n", "\n", "self", ".", "_sync_master", "=", "SyncMaster", "(", "self", ".", "_data_parallel_master", ")", "\n", "\n", "self", ".", "_is_parallel", "=", "False", "\n", "self", ".", "_parallel_id", "=", "None", "\n", "self", ".", "_slave_pipe", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.batchnorm._SynchronizedBatchNorm.forward": [[48, 79], ["input.view.view.size", "input.view.view.view", "batchnorm._sum_ft", "batchnorm._sum_ft", "output.view", "torch.batch_norm", "torch.batch_norm", "input.view.view.size", "input.view.view.size", "input.view.view.size", "batchnorm._SynchronizedBatchNorm._sync_master.run_master", "batchnorm._SynchronizedBatchNorm._slave_pipe.run_slave", "_ChildMessage", "_ChildMessage", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft"], "methods", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.batchnorm._sum_ft", "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.batchnorm._sum_ft", "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.comm.SyncMaster.run_master", "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.comm.SlavePipe.run_slave", "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.batchnorm._unsqueeze_ft"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# If it is not parallel computation or is in evaluation mode, use PyTorch's implementation.", "\n", "        ", "if", "not", "(", "self", ".", "_is_parallel", "and", "self", ".", "training", ")", ":", "\n", "            ", "return", "F", ".", "batch_norm", "(", "\n", "input", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "\n", "self", ".", "training", ",", "self", ".", "momentum", ",", "self", ".", "eps", ")", "\n", "\n", "# Resize the input to (B, C, -1).", "\n", "", "input_shape", "=", "input", ".", "size", "(", ")", "\n", "input", "=", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "self", ".", "num_features", ",", "-", "1", ")", "\n", "\n", "# Compute the sum and square-sum.", "\n", "sum_size", "=", "input", ".", "size", "(", "0", ")", "*", "input", ".", "size", "(", "2", ")", "\n", "input_sum", "=", "_sum_ft", "(", "input", ")", "\n", "input_ssum", "=", "_sum_ft", "(", "input", "**", "2", ")", "\n", "\n", "# Reduce-and-broadcast the statistics.", "\n", "if", "self", ".", "_parallel_id", "==", "0", ":", "\n", "            ", "mean", ",", "inv_std", "=", "self", ".", "_sync_master", ".", "run_master", "(", "_ChildMessage", "(", "input_sum", ",", "input_ssum", ",", "sum_size", ")", ")", "\n", "", "else", ":", "\n", "            ", "mean", ",", "inv_std", "=", "self", ".", "_slave_pipe", ".", "run_slave", "(", "_ChildMessage", "(", "input_sum", ",", "input_ssum", ",", "sum_size", ")", ")", "\n", "\n", "# Compute the output.", "\n", "", "if", "self", ".", "affine", ":", "\n", "# MJY:: Fuse the multiplication for speed.", "\n", "            ", "output", "=", "(", "input", "-", "_unsqueeze_ft", "(", "mean", ")", ")", "*", "_unsqueeze_ft", "(", "inv_std", "*", "self", ".", "weight", ")", "+", "_unsqueeze_ft", "(", "self", ".", "bias", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "(", "input", "-", "_unsqueeze_ft", "(", "mean", ")", ")", "*", "_unsqueeze_ft", "(", "inv_std", ")", "\n", "\n", "# Reshape it.", "\n", "", "return", "output", ".", "view", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__data_parallel_replicate__": [[80, 89], ["ctx.sync_master.register_slave"], "methods", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.comm.SyncMaster.register_slave"], ["", "def", "__data_parallel_replicate__", "(", "self", ",", "ctx", ",", "copy_id", ")", ":", "\n", "        ", "self", ".", "_is_parallel", "=", "True", "\n", "self", ".", "_parallel_id", "=", "copy_id", "\n", "\n", "# parallel_id == 0 means master device.", "\n", "if", "self", ".", "_parallel_id", "==", "0", ":", "\n", "            ", "ctx", ".", "sync_master", "=", "self", ".", "_sync_master", "\n", "", "else", ":", "\n", "            ", "self", ".", "_slave_pipe", "=", "ctx", ".", "sync_master", ".", "register_slave", "(", "copy_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.batchnorm._SynchronizedBatchNorm._data_parallel_master": [[90, 112], ["sorted", "sum", "torch.nn.parallel._functions.ReduceAddCoalesced.apply", "torch.nn.parallel._functions.ReduceAddCoalesced.apply", "batchnorm._SynchronizedBatchNorm._compute_mean_std", "torch.nn.parallel._functions.Broadcast.apply", "torch.nn.parallel._functions.Broadcast.apply", "enumerate", "i[].sum.get_device", "outputs.append", "i[].sum.get_device", "_MasterMessage"], "methods", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.batchnorm._SynchronizedBatchNorm._compute_mean_std"], ["", "", "def", "_data_parallel_master", "(", "self", ",", "intermediates", ")", ":", "\n", "        ", "\"\"\"Reduce the sum and square-sum, compute the statistics, and broadcast it.\"\"\"", "\n", "\n", "# Always using same \"device order\" makes the ReduceAdd operation faster.", "\n", "# Thanks to:: Tete Xiao (http://tetexiao.com/)", "\n", "intermediates", "=", "sorted", "(", "intermediates", ",", "key", "=", "lambda", "i", ":", "i", "[", "1", "]", ".", "sum", ".", "get_device", "(", ")", ")", "\n", "\n", "to_reduce", "=", "[", "i", "[", "1", "]", "[", ":", "2", "]", "for", "i", "in", "intermediates", "]", "\n", "to_reduce", "=", "[", "j", "for", "i", "in", "to_reduce", "for", "j", "in", "i", "]", "# flatten", "\n", "target_gpus", "=", "[", "i", "[", "1", "]", ".", "sum", ".", "get_device", "(", ")", "for", "i", "in", "intermediates", "]", "\n", "\n", "sum_size", "=", "sum", "(", "[", "i", "[", "1", "]", ".", "sum_size", "for", "i", "in", "intermediates", "]", ")", "\n", "sum_", ",", "ssum", "=", "ReduceAddCoalesced", ".", "apply", "(", "target_gpus", "[", "0", "]", ",", "2", ",", "*", "to_reduce", ")", "\n", "mean", ",", "inv_std", "=", "self", ".", "_compute_mean_std", "(", "sum_", ",", "ssum", ",", "sum_size", ")", "\n", "\n", "broadcasted", "=", "Broadcast", ".", "apply", "(", "target_gpus", ",", "mean", ",", "inv_std", ")", "\n", "\n", "outputs", "=", "[", "]", "\n", "for", "i", ",", "rec", "in", "enumerate", "(", "intermediates", ")", ":", "\n", "            ", "outputs", ".", "append", "(", "(", "rec", "[", "0", "]", ",", "_MasterMessage", "(", "*", "broadcasted", "[", "i", "*", "2", ":", "i", "*", "2", "+", "2", "]", ")", ")", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.batchnorm._SynchronizedBatchNorm._compute_mean_std": [[113, 126], ["bias_var.clamp"], "methods", ["None"], ["", "def", "_compute_mean_std", "(", "self", ",", "sum_", ",", "ssum", ",", "size", ")", ":", "\n", "        ", "\"\"\"Compute the mean and standard-deviation with sum and square-sum. This method\n        also maintains the moving average on the master device.\"\"\"", "\n", "assert", "size", ">", "1", ",", "'BatchNorm computes unbiased standard-deviation, which requires size > 1.'", "\n", "mean", "=", "sum_", "/", "size", "\n", "sumvar", "=", "ssum", "-", "sum_", "*", "mean", "\n", "unbias_var", "=", "sumvar", "/", "(", "size", "-", "1", ")", "\n", "bias_var", "=", "sumvar", "/", "size", "\n", "\n", "self", ".", "running_mean", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_mean", "+", "self", ".", "momentum", "*", "mean", ".", "data", "\n", "self", ".", "running_var", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_var", "+", "self", ".", "momentum", "*", "unbias_var", ".", "data", "\n", "\n", "return", "mean", ",", "bias_var", ".", "clamp", "(", "self", ".", "eps", ")", "**", "-", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.batchnorm.SynchronizedBatchNorm1d._check_input_dim": [[173, 178], ["super()._check_input_dim", "ValueError", "input.dim", "input.dim", "input.dim"], "methods", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.batchnorm.SynchronizedBatchNorm3d._check_input_dim"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "2", "and", "input", ".", "dim", "(", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 2D or 3D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "", "super", "(", "SynchronizedBatchNorm1d", ",", "self", ")", ".", "_check_input_dim", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.batchnorm.SynchronizedBatchNorm2d._check_input_dim": [[225, 230], ["super()._check_input_dim", "input.dim", "ValueError", "input.dim"], "methods", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.batchnorm.SynchronizedBatchNorm3d._check_input_dim"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "4", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 4D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "", "super", "(", "SynchronizedBatchNorm2d", ",", "self", ")", ".", "_check_input_dim", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.batchnorm.SynchronizedBatchNorm3d._check_input_dim": [[278, 283], ["super()._check_input_dim", "input.dim", "ValueError", "input.dim"], "methods", ["home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.batchnorm.SynchronizedBatchNorm3d._check_input_dim"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "5", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 5D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "", "super", "(", "SynchronizedBatchNorm3d", ",", "self", ")", ".", "_check_input_dim", "(", "input", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.batchnorm._sum_ft": [[24, 27], ["tensor.sum().sum", "tensor.sum"], "function", ["None"], ["def", "_sum_ft", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"sum over the first and last dimention\"\"\"", "\n", "return", "tensor", ".", "sum", "(", "dim", "=", "0", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wrinklexuan_graph-flow.sync_batchnorm.batchnorm._unsqueeze_ft": [[29, 32], ["tensor.unsqueeze().unsqueeze", "tensor.unsqueeze"], "function", ["None"], ["", "def", "_unsqueeze_ft", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"add new dementions at the front and the tail\"\"\"", "\n", "return", "tensor", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n"]]}