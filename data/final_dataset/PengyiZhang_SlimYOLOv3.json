{"home.repos.pwc.inspect_result.PengyiZhang_SlimYOLOv3.None.sparsity.updateBN": [[3, 7], ["model.modules", "isinstance", "m.weight.grad.data.add_", "torch.sign"], "function", ["None"], ["def", "updateBN", "(", "scale", ",", "model", ")", ":", "\n", "    ", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "m", ".", "weight", ".", "grad", ".", "data", ".", "add_", "(", "scale", "*", "torch", ".", "sign", "(", "m", ".", "weight", ".", "data", ")", ")", "# L1", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PengyiZhang_SlimYOLOv3.None.prune.route_conv": [[29, 50], ["prune.route_conv", "int", "[].split", "prune.route_conv", "int", "int"], "function", ["home.repos.pwc.inspect_result.PengyiZhang_SlimYOLOv3.yolov3.prune.route_conv", "home.repos.pwc.inspect_result.PengyiZhang_SlimYOLOv3.yolov3.prune.route_conv"], ["def", "route_conv", "(", "layer_index", ",", "module_defs", ")", ":", "\n", "    ", "\"\"\" find the convolutional layers connected by route layer\n    \"\"\"", "\n", "module_def", "=", "module_defs", "[", "layer_index", "]", "\n", "mtype", "=", "module_def", "[", "'type'", "]", "\n", "\n", "before_conv_id", "=", "[", "]", "\n", "if", "mtype", "in", "[", "'convolutional'", ",", "'shortcut'", ",", "'upsample'", ",", "'maxpool'", "]", ":", "\n", "        ", "if", "module_defs", "[", "layer_index", "-", "1", "]", "[", "'type'", "]", "==", "'convolutional'", ":", "\n", "            ", "return", "[", "layer_index", "-", "1", "]", "\n", "", "before_conv_id", "+=", "route_conv", "(", "layer_index", "-", "1", ",", "module_defs", ")", "\n", "\n", "", "elif", "mtype", "==", "\"route\"", ":", "\n", "        ", "layer_is", "=", "[", "int", "(", "x", ")", "+", "layer_index", "if", "int", "(", "x", ")", "<", "0", "else", "int", "(", "x", ")", "for", "x", "in", "module_defs", "[", "layer_index", "]", "[", "'layers'", "]", ".", "split", "(", "','", ")", "]", "\n", "for", "layer_i", "in", "layer_is", ":", "\n", "            ", "if", "module_defs", "[", "layer_i", "]", "[", "'type'", "]", "==", "'convolutional'", ":", "\n", "                ", "before_conv_id", "+=", "[", "layer_i", "]", "\n", "", "else", ":", "\n", "                ", "before_conv_id", "+=", "route_conv", "(", "layer_i", ",", "module_defs", ")", "\n", "\n", "", "", "", "return", "before_conv_id", "\n", "\n"]], "home.repos.pwc.inspect_result.PengyiZhang_SlimYOLOv3.None.prune.write_model_cfg": [[52, 102], ["enumerate", "open", "fp.readlines", "lines.append", "lines.append", "print", "open", "f.writelines", "int", "lines.append", "lines.append", "lines.append", "lines.append", "lines.append", "lines.append", "torch.sum().cpu().numpy().astype", "torch.sum().cpu().numpy().astype", "lines.append", "lines.append", "lines.append", "torch.sum().cpu().numpy", "torch.sum().cpu().numpy", "lines.append", "lines.append", "lines.append", "torch.sum().cpu", "torch.sum().cpu", "lines.append", "lines.append", "lines.append", "lines.append", "lines.append", "lines.append", "lines.append", "lines.append", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "write_model_cfg", "(", "old_path", ",", "new_path", ",", "new_module_defs", ")", ":", "\n", "    ", "\"\"\"Parses the yolo-v3 layer configuration file and returns module definitions\"\"\"", "\n", "lines", "=", "[", "]", "\n", "with", "open", "(", "old_path", ",", "'r'", ")", "as", "fp", ":", "\n", "        ", "old_lines", "=", "fp", ".", "readlines", "(", ")", "\n", "", "for", "_line", "in", "old_lines", ":", "\n", "        ", "if", "\"[convolutional]\"", "in", "_line", ":", "\n", "            ", "break", "\n", "", "lines", ".", "append", "(", "_line", ")", "\n", "\n", "", "for", "i", ",", "module_def", "in", "enumerate", "(", "new_module_defs", ")", ":", "\n", "\n", "        ", "mtype", "=", "module_def", "[", "'type'", "]", "\n", "lines", ".", "append", "(", "\"[{}]\\n\"", ".", "format", "(", "mtype", ")", ")", "\n", "print", "(", "\"layer:\"", ",", "i", ",", "mtype", ")", "\n", "if", "mtype", "==", "\"convolutional\"", ":", "\n", "            ", "bn", "=", "0", "\n", "filters", "=", "module_def", "[", "'filters'", "]", "\n", "bn", "=", "int", "(", "module_def", "[", "'batch_normalize'", "]", ")", "\n", "if", "bn", ":", "\n", "                ", "lines", ".", "append", "(", "\"batch_normalize={}\\n\"", ".", "format", "(", "bn", ")", ")", "\n", "filters", "=", "torch", ".", "sum", "(", "module_def", "[", "'mask'", "]", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "'int'", ")", "\n", "", "lines", ".", "append", "(", "\"filters={}\\n\"", ".", "format", "(", "filters", ")", ")", "\n", "lines", ".", "append", "(", "\"size={}\\n\"", ".", "format", "(", "module_def", "[", "'size'", "]", ")", ")", "\n", "lines", ".", "append", "(", "\"stride={}\\n\"", ".", "format", "(", "module_def", "[", "'stride'", "]", ")", ")", "\n", "lines", ".", "append", "(", "\"pad={}\\n\"", ".", "format", "(", "module_def", "[", "'pad'", "]", ")", ")", "\n", "lines", ".", "append", "(", "\"activation={}\\n\\n\"", ".", "format", "(", "module_def", "[", "'activation'", "]", ")", ")", "\n", "", "elif", "mtype", "==", "\"shortcut\"", ":", "\n", "            ", "lines", ".", "append", "(", "\"from={}\\n\"", ".", "format", "(", "module_def", "[", "'from'", "]", ")", ")", "\n", "lines", ".", "append", "(", "\"activation={}\\n\\n\"", ".", "format", "(", "module_def", "[", "'activation'", "]", ")", ")", "\n", "", "elif", "mtype", "==", "'route'", ":", "\n", "            ", "lines", ".", "append", "(", "\"layers={}\\n\\n\"", ".", "format", "(", "module_def", "[", "'layers'", "]", ")", ")", "\n", "\n", "", "elif", "mtype", "==", "'upsample'", ":", "\n", "            ", "lines", ".", "append", "(", "\"stride={}\\n\\n\"", ".", "format", "(", "module_def", "[", "'stride'", "]", ")", ")", "\n", "", "elif", "mtype", "==", "'maxpool'", ":", "\n", "            ", "lines", ".", "append", "(", "\"stride={}\\n\"", ".", "format", "(", "module_def", "[", "'stride'", "]", ")", ")", "\n", "lines", ".", "append", "(", "\"size={}\\n\\n\"", ".", "format", "(", "module_def", "[", "'size'", "]", ")", ")", "\n", "", "elif", "mtype", "==", "'yolo'", ":", "\n", "            ", "lines", ".", "append", "(", "\"mask = {}\\n\"", ".", "format", "(", "module_def", "[", "'mask'", "]", ")", ")", "\n", "lines", ".", "append", "(", "\"anchors = {}\\n\"", ".", "format", "(", "module_def", "[", "'anchors'", "]", ")", ")", "\n", "lines", ".", "append", "(", "\"classes = {}\\n\"", ".", "format", "(", "module_def", "[", "'classes'", "]", ")", ")", "\n", "lines", ".", "append", "(", "\"num = {}\\n\"", ".", "format", "(", "module_def", "[", "'num'", "]", ")", ")", "\n", "lines", ".", "append", "(", "\"jitter = {}\\n\"", ".", "format", "(", "module_def", "[", "'jitter'", "]", ")", ")", "\n", "lines", ".", "append", "(", "\"ignore_thresh = {}\\n\"", ".", "format", "(", "module_def", "[", "'ignore_thresh'", "]", ")", ")", "\n", "lines", ".", "append", "(", "\"truth_thresh = {}\\n\"", ".", "format", "(", "module_def", "[", "'truth_thresh'", "]", ")", ")", "\n", "lines", ".", "append", "(", "\"random = {}\\n\\n\"", ".", "format", "(", "module_def", "[", "'random'", "]", ")", ")", "\n", "\n", "", "", "with", "open", "(", "new_path", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "writelines", "(", "lines", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PengyiZhang_SlimYOLOv3.None.prune.test": [[105, 364], ["torch_utils.select_device", "Darknet().to", "weights.endswith", "Darknet().to.modules", "torch.zeros", "torch.zeros", "Darknet().to.modules", "torch.sort", "torch.sort", "int", "sorted_bn[].cuda", "print", "print", "enumerate", "len", "range", "enumerate", "os.path.join", "prune.write_model_cfg", "Darknet().to", "print", "enumerate", "print", "print", "print", "os.path.join", "Darknet().to.state_dict", "torch.save", "torch.save", "print", "Darknet().to.eval", "cv2.imread", "letterbox", "img[].transpose", "np.ascontiguousarray", "torch.from_numpy().unsqueeze().to", "torch.from_numpy().unsqueeze().to", "Darknet().to.", "non_max_suppression", "enumerate", "os.path.join", "save_weights", "Darknet().to.load_state_dict", "load_darknet_weights", "isinstance", "isinstance", "zip", "print", "zip", "print", "list", "zip", "print", "cv2.imshow", "cv2.waitKey", "cv2.imwrite", "os.path.exists", "os.makedirs", "Darknet", "torch.load", "torch.load", "getattr.weight.data.abs().clone", "int", "print", "int", "Darknet", "Darknet().to.modules", "int", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "pred[].clone", "scale_coords", "enumerate", "getattr", "getattr.weight.data.abs().clone", "m.weight.data.abs().clone.gt().float().cuda", "weight_copy.gt().float().cuda.clone", "print", "print", "len", "torch.cat", "torch.cat", "Merge_masks[].float().cuda", "getattr", "getattr", "getattr", "getattr", "np.squeeze", "getattr.weight.data[].clone", "getattr.bias.data[].clone", "getattr.running_mean[].clone", "getattr.running_var[].clone", "print", "getattr", "getattr", "np.squeeze", "getattr.weight.data[].clone", "getattr.bias.data.clone", "print", "int", "float", "cv2.rectangle", "cv2.putText", "getattr.weight.data.abs", "int", "int", "torch.sort", "torch.sort", "print", "int", "int", "int", "int", "int", "int", "prune.route_conv", "torch.tensor().float().cuda", "torch.tensor().float().cuda", "np.argwhere", "np.squeeze", "[].clone", "print", "getattr.weight.data[].clone", "np.argwhere", "torch.from_numpy", "torch.from_numpy", "float", "getattr.weight.data.abs", "int", "m.weight.data.abs().clone.gt().float", "torch.sum", "torch.sum", "int", "print", "print", "torch.cat.append", "torch.cat.append", "Merge_masks[].float", "[].clone().cpu().numpy().tolist", "np.asarray", "np.argwhere", "len", "len", "np.asarray", "int", "int", "int", "int", "int", "torch.sum", "torch.sum", "int", "print", "[].unsqueeze", "[].unsqueeze", "torch.tensor().float", "torch.tensor().float", "module_def[].cpu().numpy", "np.asarray", "[].cpu().numpy", "str", "int", "m.weight.data.abs().clone.gt", "[].clone().cpu().numpy", "module_def[].cpu().numpy", "np.squeeze.tolist", "np.squeeze.tolist", "np.squeeze.tolist", "np.squeeze.tolist", "str", "torch.sum", "torch.sum", "torch.tensor", "torch.tensor", "module_def[].cpu", "np.squeeze.tolist", "[].cpu", "np.squeeze.tolist", "[].clone().cpu", "module_def[].cpu", "np.squeeze.tolist", "np.squeeze.tolist", "float", "[].clone"], "function", ["home.repos.pwc.inspect_result.PengyiZhang_SlimYOLOv3.yolov3.prune.write_model_cfg", "home.repos.pwc.inspect_result.PengyiZhang_SlimYOLOv3.yolov3.prune.route_conv"], ["", "", "def", "test", "(", "\n", "cfg", ",", "\n", "weights", "=", "None", ",", "\n", "img_size", "=", "406", ",", "\n", "save", "=", "None", ",", "\n", "overall_ratio", "=", "0.5", ",", "\n", "perlayer_ratio", "=", "0.1", "\n", ")", ":", "\n", "\n", "    ", "\"\"\"prune yolov3 and generate cfg, weights\n    \"\"\"", "\n", "if", "save", "!=", "None", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "save", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save", ")", "\n", "", "", "device", "=", "torch_utils", ".", "select_device", "(", ")", "\n", "# Initialize model", "\n", "model", "=", "Darknet", "(", "cfg", ",", "img_size", ")", ".", "to", "(", "device", ")", "\n", "\n", "# Load weights", "\n", "if", "weights", ".", "endswith", "(", "'.pt'", ")", ":", "# pytorch format", "\n", "        ", "_state_dict", "=", "torch", ".", "load", "(", "weights", ",", "map_location", "=", "device", ")", "[", "'model'", "]", "\n", "model", ".", "load_state_dict", "(", "_state_dict", ")", "\n", "", "else", ":", "# darknet format", "\n", "        ", "_", "=", "load_darknet_weights", "(", "model", ",", "weights", ")", "\n", "\n", "##  output a new cfg file", "\n", "", "total", "=", "0", "\n", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "total", "+=", "m", ".", "weight", ".", "data", ".", "shape", "[", "0", "]", "# channels numbers", "\n", "\n", "", "", "bn", "=", "torch", ".", "zeros", "(", "total", ")", "\n", "index", "=", "0", "\n", "\n", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "size", "=", "m", ".", "weight", ".", "data", ".", "shape", "[", "0", "]", "\n", "bn", "[", "index", ":", "(", "index", "+", "size", ")", "]", "=", "m", ".", "weight", ".", "data", ".", "abs", "(", ")", ".", "clone", "(", ")", "\n", "index", "+=", "size", "\n", "\n", "", "", "sorted_bn", ",", "sorted_index", "=", "torch", ".", "sort", "(", "bn", ")", "\n", "thresh_index", "=", "int", "(", "total", "*", "overall_ratio", ")", "\n", "thresh", "=", "sorted_bn", "[", "thresh_index", "]", ".", "cuda", "(", ")", "\n", "\n", "print", "(", "\"--\"", "*", "30", ")", "\n", "print", "(", ")", "\n", "#print(list(model.modules()))", "\n", "# ", "\n", "proned_module_defs", "=", "model", ".", "module_defs", "\n", "for", "i", ",", "(", "module_def", ",", "module", ")", "in", "enumerate", "(", "zip", "(", "model", ".", "module_defs", ",", "model", ".", "module_list", ")", ")", ":", "\n", "        ", "print", "(", "\"layer:\"", ",", "i", ")", "\n", "mtype", "=", "module_def", "[", "'type'", "]", "\n", "if", "mtype", "==", "'convolutional'", ":", "\n", "            ", "bn", "=", "int", "(", "module_def", "[", "'batch_normalize'", "]", ")", "\n", "if", "bn", ":", "\n", "                ", "m", "=", "getattr", "(", "module", ",", "'batch_norm_%d'", "%", "i", ")", "# batch_norm layer", "\n", "weight_copy", "=", "m", ".", "weight", ".", "data", ".", "abs", "(", ")", ".", "clone", "(", ")", "\n", "channels", "=", "weight_copy", ".", "shape", "[", "0", "]", "#", "\n", "min_channel_num", "=", "int", "(", "channels", "*", "perlayer_ratio", ")", "if", "int", "(", "channels", "*", "perlayer_ratio", ")", ">", "0", "else", "1", "\n", "mask", "=", "weight_copy", ".", "gt", "(", "thresh", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "if", "int", "(", "torch", ".", "sum", "(", "mask", ")", ")", "<", "min_channel_num", ":", "\n", "                    ", "_", ",", "sorted_index_weights", "=", "torch", ".", "sort", "(", "weight_copy", ",", "descending", "=", "True", ")", "\n", "mask", "[", "sorted_index_weights", "[", ":", "min_channel_num", "]", "]", "=", "1.", "\n", "\n", "", "proned_module_defs", "[", "i", "]", "[", "'mask'", "]", "=", "mask", ".", "clone", "(", ")", "\n", "\n", "print", "(", "'layer index: {:d} \\t total channel: {:d} \\t remaining channel: {:d}'", ".", "\n", "format", "(", "i", ",", "mask", ".", "shape", "[", "0", "]", ",", "int", "(", "torch", ".", "sum", "(", "mask", ")", ")", ")", ")", "\n", "\n", "", "print", "(", "\"layer:\"", ",", "mtype", ")", "\n", "\n", "", "elif", "mtype", "in", "[", "'upsample'", ",", "'maxpool'", "]", ":", "\n", "            ", "print", "(", "\"layer:\"", ",", "mtype", ")", "\n", "\n", "", "elif", "mtype", "==", "'route'", ":", "\n", "            ", "print", "(", "\"layer:\"", ",", "mtype", ")", "\n", "# ", "\n", "\n", "", "elif", "mtype", "==", "'shortcut'", ":", "\n", "            ", "layer_i", "=", "int", "(", "module_def", "[", "'from'", "]", ")", "+", "i", "\n", "print", "(", "\"from layer \"", ",", "layer_i", ")", "\n", "print", "(", "\"layer:\"", ",", "mtype", ")", "\n", "proned_module_defs", "[", "i", "]", "[", "'is_access'", "]", "=", "False", "\n", "\n", "\n", "", "elif", "mtype", "==", "'yolo'", ":", "\n", "            ", "print", "(", "\"layer:\"", ",", "mtype", ")", "\n", "\n", "\n", "", "", "layer_number", "=", "len", "(", "proned_module_defs", ")", "\n", "for", "i", "in", "range", "(", "layer_number", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "        ", "mtype", "=", "proned_module_defs", "[", "i", "]", "[", "'type'", "]", "\n", "if", "mtype", "==", "'shortcut'", ":", "\n", "            ", "if", "proned_module_defs", "[", "i", "]", "[", "'is_access'", "]", ":", "\n", "                ", "continue", "\n", "\n", "", "Merge_masks", "=", "[", "]", "\n", "layer_i", "=", "i", "\n", "while", "mtype", "==", "'shortcut'", ":", "\n", "                ", "proned_module_defs", "[", "layer_i", "]", "[", "'is_access'", "]", "=", "True", "\n", "\n", "if", "proned_module_defs", "[", "layer_i", "-", "1", "]", "[", "'type'", "]", "==", "'convolutional'", ":", "\n", "                    ", "bn", "=", "int", "(", "proned_module_defs", "[", "layer_i", "-", "1", "]", "[", "'batch_normalize'", "]", ")", "\n", "if", "bn", ":", "\n", "                        ", "Merge_masks", ".", "append", "(", "proned_module_defs", "[", "layer_i", "-", "1", "]", "[", "\"mask\"", "]", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n", "", "", "layer_i", "=", "int", "(", "proned_module_defs", "[", "layer_i", "]", "[", "'from'", "]", ")", "+", "layer_i", "\n", "mtype", "=", "proned_module_defs", "[", "layer_i", "]", "[", "'type'", "]", "\n", "\n", "if", "mtype", "==", "'convolutional'", ":", "\n", "                    ", "bn", "=", "int", "(", "proned_module_defs", "[", "layer_i", "]", "[", "'batch_normalize'", "]", ")", "\n", "if", "bn", ":", "\n", "                        ", "Merge_masks", ".", "append", "(", "proned_module_defs", "[", "layer_i", "]", "[", "\"mask\"", "]", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n", "\n", "", "", "", "if", "len", "(", "Merge_masks", ")", ">", "1", ":", "\n", "                ", "Merge_masks", "=", "torch", ".", "cat", "(", "Merge_masks", ",", "0", ")", "\n", "merge_mask", "=", "(", "torch", ".", "sum", "(", "Merge_masks", ",", "dim", "=", "0", ")", ">", "0", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "                ", "merge_mask", "=", "Merge_masks", "[", "0", "]", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "", "layer_i", "=", "i", "\n", "mtype", "=", "'shortcut'", "\n", "while", "mtype", "==", "'shortcut'", ":", "\n", "\n", "                ", "if", "proned_module_defs", "[", "layer_i", "-", "1", "]", "[", "'type'", "]", "==", "'convolutional'", ":", "\n", "                    ", "bn", "=", "int", "(", "proned_module_defs", "[", "layer_i", "-", "1", "]", "[", "'batch_normalize'", "]", ")", "\n", "if", "bn", ":", "\n", "                        ", "proned_module_defs", "[", "layer_i", "-", "1", "]", "[", "\"mask\"", "]", "=", "merge_mask", "\n", "\n", "", "", "layer_i", "=", "int", "(", "proned_module_defs", "[", "layer_i", "]", "[", "'from'", "]", ")", "+", "layer_i", "\n", "mtype", "=", "proned_module_defs", "[", "layer_i", "]", "[", "'type'", "]", "\n", "\n", "if", "mtype", "==", "'convolutional'", ":", "\n", "                    ", "bn", "=", "int", "(", "proned_module_defs", "[", "layer_i", "]", "[", "'batch_normalize'", "]", ")", "\n", "if", "bn", ":", "\n", "                        ", "proned_module_defs", "[", "layer_i", "]", "[", "\"mask\"", "]", "=", "merge_mask", "\n", "\n", "\n", "\n", "", "", "", "", "", "for", "i", ",", "(", "module_def", ",", "module", ")", "in", "enumerate", "(", "zip", "(", "model", ".", "module_defs", ",", "model", ".", "module_list", ")", ")", ":", "\n", "        ", "print", "(", "\"layer:\"", ",", "i", ")", "\n", "mtype", "=", "module_def", "[", "'type'", "]", "\n", "if", "mtype", "==", "'convolutional'", ":", "\n", "            ", "bn", "=", "int", "(", "module_def", "[", "'batch_normalize'", "]", ")", "\n", "if", "bn", ":", "\n", "\n", "                ", "layer_i_1", "=", "i", "-", "1", "\n", "proned_module_defs", "[", "i", "]", "[", "'mask_before'", "]", "=", "None", "\n", "\n", "mask_before", "=", "[", "]", "\n", "conv_indexs", "=", "[", "]", "\n", "if", "i", ">", "0", ":", "\n", "                    ", "conv_indexs", "=", "route_conv", "(", "i", ",", "proned_module_defs", ")", "\n", "for", "conv_index", "in", "conv_indexs", ":", "\n", "                        ", "mask_before", "+=", "proned_module_defs", "[", "conv_index", "]", "[", "\"mask\"", "]", ".", "clone", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "", "proned_module_defs", "[", "i", "]", "[", "'mask_before'", "]", "=", "torch", ".", "tensor", "(", "mask_before", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "\n", "\n", "\n", "", "", "", "", "output_cfg_path", "=", "os", ".", "path", ".", "join", "(", "save", ",", "\"prune.cfg\"", ")", "\n", "write_model_cfg", "(", "cfg", ",", "output_cfg_path", ",", "proned_module_defs", ")", "\n", "\n", "pruned_model", "=", "Darknet", "(", "output_cfg_path", ",", "img_size", ")", ".", "to", "(", "device", ")", "\n", "print", "(", "list", "(", "pruned_model", ".", "modules", "(", ")", ")", ")", "\n", "for", "i", ",", "(", "module_def", ",", "old_module", ",", "new_module", ")", "in", "enumerate", "(", "zip", "(", "proned_module_defs", ",", "model", ".", "module_list", ",", "pruned_model", ".", "module_list", ")", ")", ":", "\n", "        ", "mtype", "=", "module_def", "[", "'type'", "]", "\n", "print", "(", "\"layer: \"", ",", "i", ",", "mtype", ")", "\n", "if", "mtype", "==", "'convolutional'", ":", "# ", "\n", "            ", "bn", "=", "int", "(", "module_def", "[", "'batch_normalize'", "]", ")", "\n", "if", "bn", ":", "\n", "                ", "new_norm", "=", "getattr", "(", "new_module", ",", "'batch_norm_%d'", "%", "i", ")", "# batch_norm layer", "\n", "old_norm", "=", "getattr", "(", "old_module", ",", "'batch_norm_%d'", "%", "i", ")", "# batch_norm layer", "\n", "\n", "new_conv", "=", "getattr", "(", "new_module", ",", "'conv_%d'", "%", "i", ")", "# conv layer", "\n", "old_conv", "=", "getattr", "(", "old_module", ",", "'conv_%d'", "%", "i", ")", "# conv layer  ", "\n", "\n", "\n", "idx1", "=", "np", ".", "squeeze", "(", "np", ".", "argwhere", "(", "np", ".", "asarray", "(", "module_def", "[", "'mask'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", ")", "\n", "if", "i", ">", "0", ":", "\n", "                    ", "idx2", "=", "np", ".", "squeeze", "(", "np", ".", "argwhere", "(", "np", ".", "asarray", "(", "module_def", "[", "'mask_before'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", ")", "\n", "new_conv", ".", "weight", ".", "data", "=", "old_conv", ".", "weight", ".", "data", "[", "idx1", ".", "tolist", "(", ")", "]", "[", ":", ",", "idx2", ".", "tolist", "(", ")", ",", ":", ",", ":", "]", ".", "clone", "(", ")", "\n", "\n", "print", "(", "\"idx1: \"", ",", "len", "(", "idx1", ")", ",", "\", idx2: \"", ",", "len", "(", "idx2", ")", ")", "\n", "", "else", ":", "\n", "                    ", "new_conv", ".", "weight", ".", "data", "=", "old_conv", ".", "weight", ".", "data", "[", "idx1", ".", "tolist", "(", ")", "]", ".", "clone", "(", ")", "\n", "\n", "", "new_norm", ".", "weight", ".", "data", "=", "old_norm", ".", "weight", ".", "data", "[", "idx1", ".", "tolist", "(", ")", "]", ".", "clone", "(", ")", "\n", "new_norm", ".", "bias", ".", "data", "=", "old_norm", ".", "bias", ".", "data", "[", "idx1", ".", "tolist", "(", ")", "]", ".", "clone", "(", ")", "\n", "new_norm", ".", "running_mean", "=", "old_norm", ".", "running_mean", "[", "idx1", ".", "tolist", "(", ")", "]", ".", "clone", "(", ")", "\n", "new_norm", ".", "running_var", "=", "old_norm", ".", "running_var", "[", "idx1", ".", "tolist", "(", ")", "]", ".", "clone", "(", ")", "\n", "\n", "\n", "print", "(", "'layer index: '", ",", "i", ",", "'idx1: '", ",", "idx1", ")", "\n", "", "else", ":", "\n", "\n", "                ", "new_conv", "=", "getattr", "(", "new_module", ",", "'conv_%d'", "%", "i", ")", "# batch_norm layer", "\n", "old_conv", "=", "getattr", "(", "old_module", ",", "'conv_%d'", "%", "i", ")", "# batch_norm layer", "\n", "idx2", "=", "np", ".", "squeeze", "(", "np", ".", "argwhere", "(", "np", ".", "asarray", "(", "proned_module_defs", "[", "i", "-", "1", "]", "[", "'mask'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", ")", "\n", "new_conv", ".", "weight", ".", "data", "=", "old_conv", ".", "weight", ".", "data", "[", ":", ",", "idx2", ".", "tolist", "(", ")", ",", ":", ",", ":", "]", ".", "clone", "(", ")", "\n", "new_conv", ".", "bias", ".", "data", "=", "old_conv", ".", "bias", ".", "data", ".", "clone", "(", ")", "\n", "print", "(", "'layer index: '", ",", "i", ",", "\"entire copy\"", ")", "\n", "\n", "", "", "", "print", "(", "'--'", "*", "30", ")", "\n", "print", "(", "'prune done!'", ")", "\n", "print", "(", "'pruned ratio %.3f'", "%", "overall_ratio", ")", "\n", "prune_weights_path", "=", "os", ".", "path", ".", "join", "(", "save", ",", "\"prune.pt\"", ")", "\n", "_pruned_state_dict", "=", "pruned_model", ".", "state_dict", "(", ")", "\n", "torch", ".", "save", "(", "_pruned_state_dict", ",", "prune_weights_path", ")", "\n", "\n", "print", "(", "\"Done!\"", ")", "\n", "\n", "\n", "\n", "# test", "\n", "pruned_model", ".", "eval", "(", ")", "\n", "img_path", "=", "\"test.jpg\"", "\n", "\n", "org_img", "=", "cv2", ".", "imread", "(", "img_path", ")", "# BGR", "\n", "img", ",", "ratiow", ",", "ratioh", ",", "padw", ",", "padh", "=", "letterbox", "(", "org_img", ",", "new_shape", "=", "[", "img_size", ",", "img_size", "]", ",", "mode", "=", "'rect'", ")", "\n", "\n", "# Normalize", "\n", "img", "=", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "# BGR to RGB, to 3x416x416", "\n", "img", "=", "np", ".", "ascontiguousarray", "(", "img", ",", "dtype", "=", "np", ".", "float32", ")", "# uint8 to float32", "\n", "img", "/=", "255.0", "# 0 - 255 to 0.0 - 1.0", "\n", "\n", "imgs", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", "\n", "_", ",", "_", ",", "height", ",", "width", "=", "imgs", ".", "shape", "# batch size, channels, height, width", "\n", "\n", "# Run model", "\n", "inf_out", ",", "train_out", "=", "pruned_model", "(", "imgs", ")", "# inference and training outputs", "\n", "# Run NMS", "\n", "output", "=", "non_max_suppression", "(", "inf_out", ",", "conf_thres", "=", "0.005", ",", "nms_thres", "=", "0.5", ")", "\n", "# Statistics per image", "\n", "for", "si", ",", "pred", "in", "enumerate", "(", "output", ")", ":", "\n", "        ", "if", "pred", "is", "None", ":", "\n", "            ", "continue", "\n", "", "if", "True", ":", "\n", "            ", "box", "=", "pred", "[", ":", ",", ":", "4", "]", ".", "clone", "(", ")", "# xyxy", "\n", "scale_coords", "(", "imgs", "[", "si", "]", ".", "shape", "[", "1", ":", "]", ",", "box", ",", "org_img", ".", "shape", "[", ":", "2", "]", ")", "# to original shape", "\n", "for", "di", ",", "d", "in", "enumerate", "(", "pred", ")", ":", "\n", "                ", "category_id", "=", "int", "(", "d", "[", "6", "]", ")", "\n", "left", ",", "top", ",", "right", ",", "bot", "=", "[", "float", "(", "x", ")", "for", "x", "in", "box", "[", "di", "]", "]", "\n", "confidence", "=", "float", "(", "d", "[", "4", "]", ")", "\n", "\n", "cv2", ".", "rectangle", "(", "org_img", ",", "(", "int", "(", "left", ")", ",", "int", "(", "top", ")", ")", ",", "(", "int", "(", "right", ")", ",", "int", "(", "bot", ")", ")", ",", "\n", "(", "255", ",", "0", ",", "0", ")", ",", "2", ")", "\n", "cv2", ".", "putText", "(", "org_img", ",", "str", "(", "category_id", ")", "+", "\":\"", "+", "str", "(", "'%.1f'", "%", "(", "float", "(", "confidence", ")", "*", "100", ")", ")", "+", "\"%\"", ",", "(", "int", "(", "left", ")", ",", "int", "(", "top", ")", "-", "8", ")", ",", "\n", "cv2", ".", "FONT_HERSHEY_SIMPLEX", ",", "0.6", ",", "(", "0", ",", "0", ",", "255", ")", ",", "1", ")", "\n", "", "", "cv2", ".", "imshow", "(", "\"result\"", ",", "org_img", ")", "\n", "cv2", ".", "waitKey", "(", "-", "1", ")", "\n", "cv2", ".", "imwrite", "(", "'result_{}'", ".", "format", "(", "img_path", ")", ",", "org_img", ")", "\n", "\n", "\n", "# convert pt to weights:", "\n", "", "prune_c_weights_path", "=", "os", ".", "path", ".", "join", "(", "save", ",", "\"prune.weights\"", ")", "\n", "save_weights", "(", "pruned_model", ",", "prune_c_weights_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PengyiZhang_SlimYOLOv3.yolov3.sparsity.updateBN": [[3, 7], ["model.modules", "isinstance", "m.weight.grad.data.add_", "torch.sign"], "function", ["None"], ["def", "updateBN", "(", "scale", ",", "model", ")", ":", "\n", "    ", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "m", ".", "weight", ".", "grad", ".", "data", ".", "add_", "(", "scale", "*", "torch", ".", "sign", "(", "m", ".", "weight", ".", "data", ")", ")", "# L1", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PengyiZhang_SlimYOLOv3.yolov3.prune.route_conv": [[30, 51], ["prune.route_conv", "int", "[].split", "prune.route_conv", "int", "int"], "function", ["home.repos.pwc.inspect_result.PengyiZhang_SlimYOLOv3.yolov3.prune.route_conv", "home.repos.pwc.inspect_result.PengyiZhang_SlimYOLOv3.yolov3.prune.route_conv"], ["    ", "\"\"\" find the convolutional layers connected by route layer\n    \"\"\"", "\n", "module_def", "=", "module_defs", "[", "layer_index", "]", "\n", "mtype", "=", "module_def", "[", "'type'", "]", "\n", "\n", "before_conv_id", "=", "[", "]", "\n", "if", "mtype", "in", "[", "'convolutional'", ",", "'shortcut'", ",", "'upsample'", ",", "'maxpool'", "]", ":", "\n", "        ", "if", "module_defs", "[", "layer_index", "-", "1", "]", "[", "'type'", "]", "==", "'convolutional'", ":", "\n", "            ", "return", "[", "layer_index", "-", "1", "]", "\n", "", "before_conv_id", "+=", "route_conv", "(", "layer_index", "-", "1", ",", "module_defs", ")", "\n", "\n", "", "elif", "mtype", "==", "\"route\"", ":", "\n", "        ", "layer_is", "=", "[", "int", "(", "x", ")", "+", "layer_index", "if", "int", "(", "x", ")", "<", "0", "else", "int", "(", "x", ")", "for", "x", "in", "module_defs", "[", "layer_index", "]", "[", "'layers'", "]", ".", "split", "(", "','", ")", "]", "\n", "for", "layer_i", "in", "layer_is", ":", "\n", "            ", "if", "module_defs", "[", "layer_i", "]", "[", "'type'", "]", "==", "'convolutional'", ":", "\n", "                ", "before_conv_id", "+=", "[", "layer_i", "]", "\n", "", "else", ":", "\n", "                ", "before_conv_id", "+=", "route_conv", "(", "layer_i", ",", "module_defs", ")", "\n", "\n", "", "", "", "return", "before_conv_id", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.PengyiZhang_SlimYOLOv3.yolov3.prune.write_model_cfg": [[53, 103], ["enumerate", "open", "fp.readlines", "lines.append", "lines.append", "print", "open", "f.writelines", "int", "lines.append", "lines.append", "lines.append", "lines.append", "lines.append", "lines.append", "torch.sum().cpu().numpy().astype", "torch.sum().cpu().numpy().astype", "lines.append", "lines.append", "lines.append", "torch.sum().cpu().numpy", "torch.sum().cpu().numpy", "lines.append", "lines.append", "lines.append", "torch.sum().cpu", "torch.sum().cpu", "lines.append", "lines.append", "lines.append", "lines.append", "lines.append", "lines.append", "lines.append", "lines.append", "torch.sum", "torch.sum"], "function", ["None"], ["    ", "\"\"\"Parses the yolo-v3 layer configuration file and returns module definitions\"\"\"", "\n", "lines", "=", "[", "]", "\n", "with", "open", "(", "old_path", ",", "'r'", ")", "as", "fp", ":", "\n", "        ", "old_lines", "=", "fp", ".", "readlines", "(", ")", "\n", "", "for", "_line", "in", "old_lines", ":", "\n", "        ", "if", "\"[convolutional]\"", "in", "_line", ":", "\n", "            ", "break", "\n", "", "lines", ".", "append", "(", "_line", ")", "\n", "\n", "", "for", "i", ",", "module_def", "in", "enumerate", "(", "new_module_defs", ")", ":", "\n", "\n", "        ", "mtype", "=", "module_def", "[", "'type'", "]", "\n", "lines", ".", "append", "(", "\"[{}]\\n\"", ".", "format", "(", "mtype", ")", ")", "\n", "print", "(", "\"layer:\"", ",", "i", ",", "mtype", ")", "\n", "if", "mtype", "==", "\"convolutional\"", ":", "\n", "            ", "bn", "=", "0", "\n", "filters", "=", "module_def", "[", "'filters'", "]", "\n", "bn", "=", "int", "(", "module_def", "[", "'batch_normalize'", "]", ")", "\n", "if", "bn", ":", "\n", "                ", "lines", ".", "append", "(", "\"batch_normalize={}\\n\"", ".", "format", "(", "bn", ")", ")", "\n", "filters", "=", "torch", ".", "sum", "(", "module_def", "[", "'mask'", "]", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "'int'", ")", "\n", "", "lines", ".", "append", "(", "\"filters={}\\n\"", ".", "format", "(", "filters", ")", ")", "\n", "lines", ".", "append", "(", "\"size={}\\n\"", ".", "format", "(", "module_def", "[", "'size'", "]", ")", ")", "\n", "lines", ".", "append", "(", "\"stride={}\\n\"", ".", "format", "(", "module_def", "[", "'stride'", "]", ")", ")", "\n", "lines", ".", "append", "(", "\"pad={}\\n\"", ".", "format", "(", "module_def", "[", "'pad'", "]", ")", ")", "\n", "lines", ".", "append", "(", "\"activation={}\\n\\n\"", ".", "format", "(", "module_def", "[", "'activation'", "]", ")", ")", "\n", "", "elif", "mtype", "==", "\"shortcut\"", ":", "\n", "            ", "lines", ".", "append", "(", "\"from={}\\n\"", ".", "format", "(", "module_def", "[", "'from'", "]", ")", ")", "\n", "lines", ".", "append", "(", "\"activation={}\\n\\n\"", ".", "format", "(", "module_def", "[", "'activation'", "]", ")", ")", "\n", "", "elif", "mtype", "==", "'route'", ":", "\n", "            ", "lines", ".", "append", "(", "\"layers={}\\n\\n\"", ".", "format", "(", "module_def", "[", "'layers'", "]", ")", ")", "\n", "\n", "", "elif", "mtype", "==", "'upsample'", ":", "\n", "            ", "lines", ".", "append", "(", "\"stride={}\\n\\n\"", ".", "format", "(", "module_def", "[", "'stride'", "]", ")", ")", "\n", "", "elif", "mtype", "==", "'maxpool'", ":", "\n", "            ", "lines", ".", "append", "(", "\"stride={}\\n\"", ".", "format", "(", "module_def", "[", "'stride'", "]", ")", ")", "\n", "lines", ".", "append", "(", "\"size={}\\n\\n\"", ".", "format", "(", "module_def", "[", "'size'", "]", ")", ")", "\n", "", "elif", "mtype", "==", "'yolo'", ":", "\n", "            ", "lines", ".", "append", "(", "\"mask = {}\\n\"", ".", "format", "(", "module_def", "[", "'mask'", "]", ")", ")", "\n", "lines", ".", "append", "(", "\"anchors = {}\\n\"", ".", "format", "(", "module_def", "[", "'anchors'", "]", ")", ")", "\n", "lines", ".", "append", "(", "\"classes = {}\\n\"", ".", "format", "(", "module_def", "[", "'classes'", "]", ")", ")", "\n", "lines", ".", "append", "(", "\"num = {}\\n\"", ".", "format", "(", "module_def", "[", "'num'", "]", ")", ")", "\n", "lines", ".", "append", "(", "\"jitter = {}\\n\"", ".", "format", "(", "module_def", "[", "'jitter'", "]", ")", ")", "\n", "lines", ".", "append", "(", "\"ignore_thresh = {}\\n\"", ".", "format", "(", "module_def", "[", "'ignore_thresh'", "]", ")", ")", "\n", "lines", ".", "append", "(", "\"truth_thresh = {}\\n\"", ".", "format", "(", "module_def", "[", "'truth_thresh'", "]", ")", ")", "\n", "lines", ".", "append", "(", "\"random = {}\\n\\n\"", ".", "format", "(", "module_def", "[", "'random'", "]", ")", ")", "\n", "\n", "", "", "with", "open", "(", "new_path", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "writelines", "(", "lines", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.PengyiZhang_SlimYOLOv3.yolov3.prune.test": [[106, 365], ["torch_utils.select_device", "Darknet().to", "weights.endswith", "Darknet().to.modules", "torch.zeros", "torch.zeros", "Darknet().to.modules", "torch.sort", "torch.sort", "int", "sorted_bn[].cuda", "print", "print", "enumerate", "len", "range", "enumerate", "os.path.join", "prune.write_model_cfg", "Darknet().to", "print", "enumerate", "print", "print", "print", "os.path.join", "Darknet().to.state_dict", "torch.save", "torch.save", "print", "Darknet().to.eval", "cv2.imread", "letterbox", "img[].transpose", "np.ascontiguousarray", "torch.from_numpy().unsqueeze().to", "torch.from_numpy().unsqueeze().to", "Darknet().to.", "non_max_suppression", "enumerate", "os.path.join", "save_weights", "Darknet().to.load_state_dict", "load_darknet_weights", "isinstance", "isinstance", "zip", "print", "zip", "print", "list", "zip", "print", "cv2.imshow", "cv2.waitKey", "cv2.imwrite", "os.path.exists", "os.makedirs", "Darknet", "torch.load", "torch.load", "getattr.weight.data.abs().clone", "int", "print", "int", "Darknet", "Darknet().to.modules", "int", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "pred[].clone", "scale_coords", "enumerate", "getattr", "getattr.weight.data.abs().clone", "m.weight.data.abs().clone.gt().float().cuda", "weight_copy.gt().float().cuda.clone", "print", "print", "len", "torch.cat", "torch.cat", "Merge_masks[].float().cuda", "getattr", "getattr", "getattr", "getattr", "np.squeeze", "getattr.weight.data[].clone", "getattr.bias.data[].clone", "getattr.running_mean[].clone", "getattr.running_var[].clone", "print", "getattr", "getattr", "np.squeeze", "getattr.weight.data[].clone", "getattr.bias.data.clone", "print", "int", "float", "cv2.rectangle", "cv2.putText", "getattr.weight.data.abs", "int", "int", "torch.sort", "torch.sort", "print", "int", "int", "int", "int", "int", "int", "prune.route_conv", "torch.tensor().float().cuda", "torch.tensor().float().cuda", "np.argwhere", "np.squeeze", "[].clone", "print", "getattr.weight.data[].clone", "np.argwhere", "torch.from_numpy", "torch.from_numpy", "float", "getattr.weight.data.abs", "int", "m.weight.data.abs().clone.gt().float", "torch.sum", "torch.sum", "int", "print", "print", "torch.cat.append", "torch.cat.append", "Merge_masks[].float", "[].clone().cpu().numpy().tolist", "np.asarray", "np.argwhere", "len", "len", "np.asarray", "int", "int", "int", "int", "int", "torch.sum", "torch.sum", "int", "print", "[].unsqueeze", "[].unsqueeze", "torch.tensor().float", "torch.tensor().float", "module_def[].cpu().numpy", "np.asarray", "[].cpu().numpy", "str", "int", "m.weight.data.abs().clone.gt", "[].clone().cpu().numpy", "module_def[].cpu().numpy", "np.squeeze.tolist", "np.squeeze.tolist", "np.squeeze.tolist", "np.squeeze.tolist", "str", "torch.sum", "torch.sum", "torch.tensor", "torch.tensor", "module_def[].cpu", "np.squeeze.tolist", "[].cpu", "np.squeeze.tolist", "[].clone().cpu", "module_def[].cpu", "np.squeeze.tolist", "np.squeeze.tolist", "float", "[].clone"], "function", ["home.repos.pwc.inspect_result.PengyiZhang_SlimYOLOv3.yolov3.prune.write_model_cfg", "home.repos.pwc.inspect_result.PengyiZhang_SlimYOLOv3.yolov3.prune.route_conv"], ["cfg", ",", "\n", "weights", "=", "None", ",", "\n", "img_size", "=", "406", ",", "\n", "save", "=", "None", ",", "\n", "overall_ratio", "=", "0.5", ",", "\n", "perlayer_ratio", "=", "0.1", "\n", ")", ":", "\n", "\n", "    ", "\"\"\"prune yolov3 and generate cfg, weights\n    \"\"\"", "\n", "if", "save", "!=", "None", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "save", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save", ")", "\n", "", "", "device", "=", "torch_utils", ".", "select_device", "(", ")", "\n", "# Initialize model", "\n", "model", "=", "Darknet", "(", "cfg", ",", "img_size", ")", ".", "to", "(", "device", ")", "\n", "\n", "# Load weights", "\n", "if", "weights", ".", "endswith", "(", "'.pt'", ")", ":", "# pytorch format", "\n", "        ", "_state_dict", "=", "torch", ".", "load", "(", "weights", ",", "map_location", "=", "device", ")", "[", "'model'", "]", "\n", "model", ".", "load_state_dict", "(", "_state_dict", ")", "\n", "", "else", ":", "# darknet format", "\n", "        ", "_", "=", "load_darknet_weights", "(", "model", ",", "weights", ")", "\n", "\n", "##  output a new cfg file", "\n", "", "total", "=", "0", "\n", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "total", "+=", "m", ".", "weight", ".", "data", ".", "shape", "[", "0", "]", "# channels numbers", "\n", "\n", "", "", "bn", "=", "torch", ".", "zeros", "(", "total", ")", "\n", "index", "=", "0", "\n", "\n", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "size", "=", "m", ".", "weight", ".", "data", ".", "shape", "[", "0", "]", "\n", "bn", "[", "index", ":", "(", "index", "+", "size", ")", "]", "=", "m", ".", "weight", ".", "data", ".", "abs", "(", ")", ".", "clone", "(", ")", "\n", "index", "+=", "size", "\n", "\n", "", "", "sorted_bn", ",", "sorted_index", "=", "torch", ".", "sort", "(", "bn", ")", "\n", "thresh_index", "=", "int", "(", "total", "*", "overall_ratio", ")", "\n", "thresh", "=", "sorted_bn", "[", "thresh_index", "]", ".", "cuda", "(", ")", "\n", "\n", "print", "(", "\"--\"", "*", "30", ")", "\n", "print", "(", ")", "\n", "#print(list(model.modules()))", "\n", "# ", "\n", "proned_module_defs", "=", "model", ".", "module_defs", "\n", "for", "i", ",", "(", "module_def", ",", "module", ")", "in", "enumerate", "(", "zip", "(", "model", ".", "module_defs", ",", "model", ".", "module_list", ")", ")", ":", "\n", "        ", "print", "(", "\"layer:\"", ",", "i", ")", "\n", "mtype", "=", "module_def", "[", "'type'", "]", "\n", "if", "mtype", "==", "'convolutional'", ":", "\n", "            ", "bn", "=", "int", "(", "module_def", "[", "'batch_normalize'", "]", ")", "\n", "if", "bn", ":", "\n", "                ", "m", "=", "getattr", "(", "module", ",", "'batch_norm_%d'", "%", "i", ")", "# batch_norm layer", "\n", "weight_copy", "=", "m", ".", "weight", ".", "data", ".", "abs", "(", ")", ".", "clone", "(", ")", "\n", "channels", "=", "weight_copy", ".", "shape", "[", "0", "]", "#", "\n", "min_channel_num", "=", "int", "(", "channels", "*", "perlayer_ratio", ")", "if", "int", "(", "channels", "*", "perlayer_ratio", ")", ">", "0", "else", "1", "\n", "mask", "=", "weight_copy", ".", "gt", "(", "thresh", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "if", "int", "(", "torch", ".", "sum", "(", "mask", ")", ")", "<", "min_channel_num", ":", "\n", "                    ", "_", ",", "sorted_index_weights", "=", "torch", ".", "sort", "(", "weight_copy", ",", "descending", "=", "True", ")", "\n", "mask", "[", "sorted_index_weights", "[", ":", "min_channel_num", "]", "]", "=", "1.", "\n", "\n", "", "proned_module_defs", "[", "i", "]", "[", "'mask'", "]", "=", "mask", ".", "clone", "(", ")", "\n", "\n", "print", "(", "'layer index: {:d} \\t total channel: {:d} \\t remaining channel: {:d}'", ".", "\n", "format", "(", "i", ",", "mask", ".", "shape", "[", "0", "]", ",", "int", "(", "torch", ".", "sum", "(", "mask", ")", ")", ")", ")", "\n", "\n", "", "print", "(", "\"layer:\"", ",", "mtype", ")", "\n", "\n", "", "elif", "mtype", "in", "[", "'upsample'", ",", "'maxpool'", "]", ":", "\n", "            ", "print", "(", "\"layer:\"", ",", "mtype", ")", "\n", "\n", "", "elif", "mtype", "==", "'route'", ":", "\n", "            ", "print", "(", "\"layer:\"", ",", "mtype", ")", "\n", "# ", "\n", "\n", "", "elif", "mtype", "==", "'shortcut'", ":", "\n", "            ", "layer_i", "=", "int", "(", "module_def", "[", "'from'", "]", ")", "+", "i", "\n", "print", "(", "\"from layer \"", ",", "layer_i", ")", "\n", "print", "(", "\"layer:\"", ",", "mtype", ")", "\n", "proned_module_defs", "[", "i", "]", "[", "'is_access'", "]", "=", "False", "\n", "\n", "\n", "", "elif", "mtype", "==", "'yolo'", ":", "\n", "            ", "print", "(", "\"layer:\"", ",", "mtype", ")", "\n", "\n", "\n", "", "", "layer_number", "=", "len", "(", "proned_module_defs", ")", "\n", "for", "i", "in", "range", "(", "layer_number", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "        ", "mtype", "=", "proned_module_defs", "[", "i", "]", "[", "'type'", "]", "\n", "if", "mtype", "==", "'shortcut'", ":", "\n", "            ", "if", "proned_module_defs", "[", "i", "]", "[", "'is_access'", "]", ":", "\n", "                ", "continue", "\n", "\n", "", "Merge_masks", "=", "[", "]", "\n", "layer_i", "=", "i", "\n", "while", "mtype", "==", "'shortcut'", ":", "\n", "                ", "proned_module_defs", "[", "layer_i", "]", "[", "'is_access'", "]", "=", "True", "\n", "\n", "if", "proned_module_defs", "[", "layer_i", "-", "1", "]", "[", "'type'", "]", "==", "'convolutional'", ":", "\n", "                    ", "bn", "=", "int", "(", "proned_module_defs", "[", "layer_i", "-", "1", "]", "[", "'batch_normalize'", "]", ")", "\n", "if", "bn", ":", "\n", "                        ", "Merge_masks", ".", "append", "(", "proned_module_defs", "[", "layer_i", "-", "1", "]", "[", "\"mask\"", "]", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n", "", "", "layer_i", "=", "int", "(", "proned_module_defs", "[", "layer_i", "]", "[", "'from'", "]", ")", "+", "layer_i", "\n", "mtype", "=", "proned_module_defs", "[", "layer_i", "]", "[", "'type'", "]", "\n", "\n", "if", "mtype", "==", "'convolutional'", ":", "\n", "                    ", "bn", "=", "int", "(", "proned_module_defs", "[", "layer_i", "]", "[", "'batch_normalize'", "]", ")", "\n", "if", "bn", ":", "\n", "                        ", "Merge_masks", ".", "append", "(", "proned_module_defs", "[", "layer_i", "]", "[", "\"mask\"", "]", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n", "\n", "", "", "", "if", "len", "(", "Merge_masks", ")", ">", "1", ":", "\n", "                ", "Merge_masks", "=", "torch", ".", "cat", "(", "Merge_masks", ",", "0", ")", "\n", "merge_mask", "=", "(", "torch", ".", "sum", "(", "Merge_masks", ",", "dim", "=", "0", ")", ">", "0", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "                ", "merge_mask", "=", "Merge_masks", "[", "0", "]", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "", "layer_i", "=", "i", "\n", "mtype", "=", "'shortcut'", "\n", "while", "mtype", "==", "'shortcut'", ":", "\n", "\n", "                ", "if", "proned_module_defs", "[", "layer_i", "-", "1", "]", "[", "'type'", "]", "==", "'convolutional'", ":", "\n", "                    ", "bn", "=", "int", "(", "proned_module_defs", "[", "layer_i", "-", "1", "]", "[", "'batch_normalize'", "]", ")", "\n", "if", "bn", ":", "\n", "                        ", "proned_module_defs", "[", "layer_i", "-", "1", "]", "[", "\"mask\"", "]", "=", "merge_mask", "\n", "\n", "", "", "layer_i", "=", "int", "(", "proned_module_defs", "[", "layer_i", "]", "[", "'from'", "]", ")", "+", "layer_i", "\n", "mtype", "=", "proned_module_defs", "[", "layer_i", "]", "[", "'type'", "]", "\n", "\n", "if", "mtype", "==", "'convolutional'", ":", "\n", "                    ", "bn", "=", "int", "(", "proned_module_defs", "[", "layer_i", "]", "[", "'batch_normalize'", "]", ")", "\n", "if", "bn", ":", "\n", "                        ", "proned_module_defs", "[", "layer_i", "]", "[", "\"mask\"", "]", "=", "merge_mask", "\n", "\n", "\n", "\n", "", "", "", "", "", "for", "i", ",", "(", "module_def", ",", "module", ")", "in", "enumerate", "(", "zip", "(", "model", ".", "module_defs", ",", "model", ".", "module_list", ")", ")", ":", "\n", "        ", "print", "(", "\"layer:\"", ",", "i", ")", "\n", "mtype", "=", "module_def", "[", "'type'", "]", "\n", "if", "mtype", "==", "'convolutional'", ":", "\n", "            ", "bn", "=", "int", "(", "module_def", "[", "'batch_normalize'", "]", ")", "\n", "if", "bn", ":", "\n", "\n", "                ", "layer_i_1", "=", "i", "-", "1", "\n", "proned_module_defs", "[", "i", "]", "[", "'mask_before'", "]", "=", "None", "\n", "\n", "mask_before", "=", "[", "]", "\n", "conv_indexs", "=", "[", "]", "\n", "if", "i", ">", "0", ":", "\n", "                    ", "conv_indexs", "=", "route_conv", "(", "i", ",", "proned_module_defs", ")", "\n", "for", "conv_index", "in", "conv_indexs", ":", "\n", "                        ", "mask_before", "+=", "proned_module_defs", "[", "conv_index", "]", "[", "\"mask\"", "]", ".", "clone", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "", "proned_module_defs", "[", "i", "]", "[", "'mask_before'", "]", "=", "torch", ".", "tensor", "(", "mask_before", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "\n", "\n", "\n", "", "", "", "", "output_cfg_path", "=", "os", ".", "path", ".", "join", "(", "save", ",", "\"prune.cfg\"", ")", "\n", "write_model_cfg", "(", "cfg", ",", "output_cfg_path", ",", "proned_module_defs", ")", "\n", "\n", "pruned_model", "=", "Darknet", "(", "output_cfg_path", ",", "img_size", ")", ".", "to", "(", "device", ")", "\n", "print", "(", "list", "(", "pruned_model", ".", "modules", "(", ")", ")", ")", "\n", "for", "i", ",", "(", "module_def", ",", "old_module", ",", "new_module", ")", "in", "enumerate", "(", "zip", "(", "proned_module_defs", ",", "model", ".", "module_list", ",", "pruned_model", ".", "module_list", ")", ")", ":", "\n", "        ", "mtype", "=", "module_def", "[", "'type'", "]", "\n", "print", "(", "\"layer: \"", ",", "i", ",", "mtype", ")", "\n", "if", "mtype", "==", "'convolutional'", ":", "# ", "\n", "            ", "bn", "=", "int", "(", "module_def", "[", "'batch_normalize'", "]", ")", "\n", "if", "bn", ":", "\n", "                ", "new_norm", "=", "getattr", "(", "new_module", ",", "'batch_norm_%d'", "%", "i", ")", "# batch_norm layer", "\n", "old_norm", "=", "getattr", "(", "old_module", ",", "'batch_norm_%d'", "%", "i", ")", "# batch_norm layer", "\n", "\n", "new_conv", "=", "getattr", "(", "new_module", ",", "'conv_%d'", "%", "i", ")", "# conv layer", "\n", "old_conv", "=", "getattr", "(", "old_module", ",", "'conv_%d'", "%", "i", ")", "# conv layer  ", "\n", "\n", "\n", "idx1", "=", "np", ".", "squeeze", "(", "np", ".", "argwhere", "(", "np", ".", "asarray", "(", "module_def", "[", "'mask'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", ")", "\n", "if", "i", ">", "0", ":", "\n", "                    ", "idx2", "=", "np", ".", "squeeze", "(", "np", ".", "argwhere", "(", "np", ".", "asarray", "(", "module_def", "[", "'mask_before'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", ")", "\n", "new_conv", ".", "weight", ".", "data", "=", "old_conv", ".", "weight", ".", "data", "[", "idx1", ".", "tolist", "(", ")", "]", "[", ":", ",", "idx2", ".", "tolist", "(", ")", ",", ":", ",", ":", "]", ".", "clone", "(", ")", "\n", "\n", "print", "(", "\"idx1: \"", ",", "len", "(", "idx1", ")", ",", "\", idx2: \"", ",", "len", "(", "idx2", ")", ")", "\n", "", "else", ":", "\n", "                    ", "new_conv", ".", "weight", ".", "data", "=", "old_conv", ".", "weight", ".", "data", "[", "idx1", ".", "tolist", "(", ")", "]", ".", "clone", "(", ")", "\n", "\n", "", "new_norm", ".", "weight", ".", "data", "=", "old_norm", ".", "weight", ".", "data", "[", "idx1", ".", "tolist", "(", ")", "]", ".", "clone", "(", ")", "\n", "new_norm", ".", "bias", ".", "data", "=", "old_norm", ".", "bias", ".", "data", "[", "idx1", ".", "tolist", "(", ")", "]", ".", "clone", "(", ")", "\n", "new_norm", ".", "running_mean", "=", "old_norm", ".", "running_mean", "[", "idx1", ".", "tolist", "(", ")", "]", ".", "clone", "(", ")", "\n", "new_norm", ".", "running_var", "=", "old_norm", ".", "running_var", "[", "idx1", ".", "tolist", "(", ")", "]", ".", "clone", "(", ")", "\n", "\n", "\n", "print", "(", "'layer index: '", ",", "i", ",", "'idx1: '", ",", "idx1", ")", "\n", "", "else", ":", "\n", "\n", "                ", "new_conv", "=", "getattr", "(", "new_module", ",", "'conv_%d'", "%", "i", ")", "# batch_norm layer", "\n", "old_conv", "=", "getattr", "(", "old_module", ",", "'conv_%d'", "%", "i", ")", "# batch_norm layer", "\n", "idx2", "=", "np", ".", "squeeze", "(", "np", ".", "argwhere", "(", "np", ".", "asarray", "(", "proned_module_defs", "[", "i", "-", "1", "]", "[", "'mask'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", ")", "\n", "new_conv", ".", "weight", ".", "data", "=", "old_conv", ".", "weight", ".", "data", "[", ":", ",", "idx2", ".", "tolist", "(", ")", ",", ":", ",", ":", "]", ".", "clone", "(", ")", "\n", "new_conv", ".", "bias", ".", "data", "=", "old_conv", ".", "bias", ".", "data", ".", "clone", "(", ")", "\n", "print", "(", "'layer index: '", ",", "i", ",", "\"entire copy\"", ")", "\n", "\n", "", "", "", "print", "(", "'--'", "*", "30", ")", "\n", "print", "(", "'prune done!'", ")", "\n", "print", "(", "'pruned ratio %.3f'", "%", "overall_ratio", ")", "\n", "prune_weights_path", "=", "os", ".", "path", ".", "join", "(", "save", ",", "\"prune.pt\"", ")", "\n", "_pruned_state_dict", "=", "pruned_model", ".", "state_dict", "(", ")", "\n", "torch", ".", "save", "(", "_pruned_state_dict", ",", "prune_weights_path", ")", "\n", "\n", "print", "(", "\"Done!\"", ")", "\n", "\n", "\n", "\n", "# test", "\n", "pruned_model", ".", "eval", "(", ")", "\n", "img_path", "=", "\"test.jpg\"", "\n", "\n", "org_img", "=", "cv2", ".", "imread", "(", "img_path", ")", "# BGR", "\n", "img", ",", "ratiow", ",", "ratioh", ",", "padw", ",", "padh", "=", "letterbox", "(", "org_img", ",", "new_shape", "=", "[", "img_size", ",", "img_size", "]", ",", "mode", "=", "'rect'", ")", "\n", "\n", "# Normalize", "\n", "img", "=", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "# BGR to RGB, to 3x416x416", "\n", "img", "=", "np", ".", "ascontiguousarray", "(", "img", ",", "dtype", "=", "np", ".", "float32", ")", "# uint8 to float32", "\n", "img", "/=", "255.0", "# 0 - 255 to 0.0 - 1.0", "\n", "\n", "imgs", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", "\n", "_", ",", "_", ",", "height", ",", "width", "=", "imgs", ".", "shape", "# batch size, channels, height, width", "\n", "\n", "# Run model", "\n", "inf_out", ",", "train_out", "=", "pruned_model", "(", "imgs", ")", "# inference and training outputs", "\n", "# Run NMS", "\n", "output", "=", "non_max_suppression", "(", "inf_out", ",", "conf_thres", "=", "0.005", ",", "nms_thres", "=", "0.5", ")", "\n", "# Statistics per image", "\n", "for", "si", ",", "pred", "in", "enumerate", "(", "output", ")", ":", "\n", "        ", "if", "pred", "is", "None", ":", "\n", "            ", "continue", "\n", "", "if", "True", ":", "\n", "            ", "box", "=", "pred", "[", ":", ",", ":", "4", "]", ".", "clone", "(", ")", "# xyxy", "\n", "scale_coords", "(", "imgs", "[", "si", "]", ".", "shape", "[", "1", ":", "]", ",", "box", ",", "org_img", ".", "shape", "[", ":", "2", "]", ")", "# to original shape", "\n", "for", "di", ",", "d", "in", "enumerate", "(", "pred", ")", ":", "\n", "                ", "category_id", "=", "int", "(", "d", "[", "6", "]", ")", "\n", "left", ",", "top", ",", "right", ",", "bot", "=", "[", "float", "(", "x", ")", "for", "x", "in", "box", "[", "di", "]", "]", "\n", "confidence", "=", "float", "(", "d", "[", "4", "]", ")", "\n", "\n", "cv2", ".", "rectangle", "(", "org_img", ",", "(", "int", "(", "left", ")", ",", "int", "(", "top", ")", ")", ",", "(", "int", "(", "right", ")", ",", "int", "(", "bot", ")", ")", ",", "\n", "(", "255", ",", "0", ",", "0", ")", ",", "2", ")", "\n", "cv2", ".", "putText", "(", "org_img", ",", "str", "(", "category_id", ")", "+", "\":\"", "+", "str", "(", "'%.1f'", "%", "(", "float", "(", "confidence", ")", "*", "100", ")", ")", "+", "\"%\"", ",", "(", "int", "(", "left", ")", ",", "int", "(", "top", ")", "-", "8", ")", ",", "\n", "cv2", ".", "FONT_HERSHEY_SIMPLEX", ",", "0.6", ",", "(", "0", ",", "0", ",", "255", ")", ",", "1", ")", "\n", "", "", "cv2", ".", "imshow", "(", "\"result\"", ",", "org_img", ")", "\n", "cv2", ".", "waitKey", "(", "-", "1", ")", "\n", "cv2", ".", "imwrite", "(", "'result_{}'", ".", "format", "(", "img_path", ")", ",", "org_img", ")", "\n", "\n", "\n", "# convert pt to weights:", "\n", "", "prune_c_weights_path", "=", "os", ".", "path", ".", "join", "(", "save", ",", "\"prune.weights\"", ")", "\n", "save_weights", "(", "pruned_model", ",", "prune_c_weights_path", ")", "\n", "\n", "\n"]]}