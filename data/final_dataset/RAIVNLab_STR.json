{"home.repos.pwc.inspect_result.RAIVNLab_STR.None.main.main": [[30, 41], ["print", "main.main_worker", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all"], "function", ["home.repos.pwc.inspect_result.RAIVNLab_STR.None.main.main_worker"], ["def", "main", "(", ")", ":", "\n", "    ", "print", "(", "args", ")", "\n", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "args", ".", "seed", ")", "\n", "\n", "# Simply call main_worker function", "\n", "", "main_worker", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.None.main.main_worker": [[43, 241], ["main.get_model", "main.set_gpu", "main.get_directories", "main.get_optimizer", "main.get_dataset", "torch.utils.tensorboard.SummaryWriter", "utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.ProgressMeter", "time.time", "utils.net_utils.save_checkpoint", "range", "main.write_result_to_csv", "print", "main.pretrained", "utils.schedulers.get_policy", "torch.CrossEntropyLoss().cuda", "utils.net_utils.LabelSmoothing", "main.resume", "trainer.validate", "lr_policy", "utils.net_utils.get_lr", "time.time", "trainer.train", "utils.logging.AverageMeter.update", "time.time", "trainer.validate", "utils.logging.AverageMeter.update", "max", "max", "max", "max", "utils.logging.AverageMeter.update", "utils.logging.ProgressMeter.display", "utils.logging.ProgressMeter.write_to_tensorboard", "torch.utils.tensorboard.SummaryWriter.add_scalar", "time.time", "torch.utils.tensorboard.SummaryWriter.add_scalar", "time.time", "set_gpu.named_modules", "print", "utils.net_utils.save_checkpoint", "set_gpu.state_dict", "get_optimizer.state_dict", "set_gpu.named_modules", "utils.net_utils.save_checkpoint", "set_gpu.named_modules", "torch.utils.tensorboard.SummaryWriter.add_scalar", "isinstance", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "open", "json.dump", "open", "json.dump", "torch.CrossEntropyLoss", "hasattr", "print", "isinstance", "m.getSparsity", "int", "set_gpu.state_dict", "m.set_curr_prune_rate", "time.time", "time.time", "set_gpu.state_dict", "get_optimizer.state_dict", "time.time", "m.getSparsity", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "int", "args.args"], "function", ["home.repos.pwc.inspect_result.RAIVNLab_STR.None.main.get_model", "home.repos.pwc.inspect_result.RAIVNLab_STR.None.main.set_gpu", "home.repos.pwc.inspect_result.RAIVNLab_STR.None.main.get_directories", "home.repos.pwc.inspect_result.RAIVNLab_STR.None.main.get_optimizer", "home.repos.pwc.inspect_result.RAIVNLab_STR.None.main.get_dataset", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.net_utils.save_checkpoint", "home.repos.pwc.inspect_result.RAIVNLab_STR.None.main.write_result_to_csv", "home.repos.pwc.inspect_result.RAIVNLab_STR.None.main.pretrained", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.schedulers.get_policy", "home.repos.pwc.inspect_result.RAIVNLab_STR.None.main.resume", "home.repos.pwc.inspect_result.RAIVNLab_STR.None.trainer.validate", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.net_utils.get_lr", "home.repos.pwc.inspect_result.RAIVNLab_STR.None.trainer.train", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.RAIVNLab_STR.None.trainer.validate", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.logging.ProgressMeter.display", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.logging.ProgressMeter.write_to_tensorboard", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.net_utils.save_checkpoint", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.net_utils.save_checkpoint", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.conv_type.STRConv.getSparsity", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.conv_type.GMPConv.set_curr_prune_rate", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.conv_type.STRConv.getSparsity"], ["", "def", "main_worker", "(", "args", ")", ":", "\n", "    ", "args", ".", "gpu", "=", "None", "\n", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"Use GPU: {} for training\"", ".", "format", "(", "args", ".", "gpu", ")", ")", "\n", "\n", "# create model and optimizer", "\n", "", "model", "=", "get_model", "(", "args", ")", "\n", "model", "=", "set_gpu", "(", "args", ",", "model", ")", "\n", "\n", "# Set up directories", "\n", "run_base_dir", ",", "ckpt_base_dir", ",", "log_base_dir", "=", "get_directories", "(", "args", ")", "\n", "\n", "# Loading pretrained model", "\n", "if", "args", ".", "pretrained", ":", "\n", "        ", "pretrained", "(", "args", ",", "model", ")", "\n", "\n", "# Saving a DenseConv (nn.Conv2d) compatible model ", "\n", "if", "args", ".", "dense_conv_model", ":", "\n", "            ", "print", "(", "f\"==> DenseConv compatible model, saving at {ckpt_base_dir / 'model_best.pth'}\"", ")", "\n", "save_checkpoint", "(", "\n", "{", "\n", "\"epoch\"", ":", "0", ",", "\n", "\"arch\"", ":", "args", ".", "arch", ",", "\n", "\"state_dict\"", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "\n", "True", ",", "\n", "filename", "=", "ckpt_base_dir", "/", "f\"epoch_pretrained.state\"", ",", "\n", "save", "=", "True", ",", "\n", ")", "\n", "return", "\n", "\n", "", "", "optimizer", "=", "get_optimizer", "(", "args", ",", "model", ")", "\n", "data", "=", "get_dataset", "(", "args", ")", "\n", "lr_policy", "=", "get_policy", "(", "args", ".", "lr_policy", ")", "(", "optimizer", ",", "args", ")", "\n", "\n", "if", "args", ".", "label_smoothing", "is", "None", ":", "\n", "        ", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "criterion", "=", "LabelSmoothing", "(", "smoothing", "=", "args", ".", "label_smoothing", ")", "\n", "\n", "# optionally resume from a checkpoint", "\n", "", "best_acc1", "=", "0.0", "\n", "best_acc5", "=", "0.0", "\n", "best_train_acc1", "=", "0.0", "\n", "best_train_acc5", "=", "0.0", "\n", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "best_acc1", "=", "resume", "(", "args", ",", "model", ",", "optimizer", ")", "\n", "\n", "# Evaulation of a model", "\n", "", "if", "args", ".", "evaluate", ":", "\n", "        ", "acc1", ",", "acc5", "=", "validate", "(", "\n", "data", ".", "val_loader", ",", "model", ",", "criterion", ",", "args", ",", "writer", "=", "None", ",", "epoch", "=", "args", ".", "start_epoch", "\n", ")", "\n", "return", "\n", "\n", "", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "log_base_dir", ")", "\n", "epoch_time", "=", "AverageMeter", "(", "\"epoch_time\"", ",", "\":.4f\"", ",", "write_avg", "=", "False", ")", "\n", "validation_time", "=", "AverageMeter", "(", "\"validation_time\"", ",", "\":.4f\"", ",", "write_avg", "=", "False", ")", "\n", "train_time", "=", "AverageMeter", "(", "\"train_time\"", ",", "\":.4f\"", ",", "write_avg", "=", "False", ")", "\n", "progress_overall", "=", "ProgressMeter", "(", "\n", "1", ",", "[", "epoch_time", ",", "validation_time", ",", "train_time", "]", ",", "prefix", "=", "\"Overall Timing\"", "\n", ")", "\n", "\n", "end_epoch", "=", "time", ".", "time", "(", ")", "\n", "args", ".", "start_epoch", "=", "args", ".", "start_epoch", "or", "0", "\n", "acc1", "=", "None", "\n", "\n", "# Save the initial state", "\n", "save_checkpoint", "(", "\n", "{", "\n", "\"epoch\"", ":", "0", ",", "\n", "\"arch\"", ":", "args", ".", "arch", ",", "\n", "\"state_dict\"", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "\"best_acc1\"", ":", "best_acc1", ",", "\n", "\"best_acc5\"", ":", "best_acc5", ",", "\n", "\"best_train_acc1\"", ":", "best_train_acc1", ",", "\n", "\"best_train_acc5\"", ":", "best_train_acc5", ",", "\n", "\"optimizer\"", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "\"curr_acc1\"", ":", "acc1", "if", "acc1", "else", "\"Not evaluated\"", ",", "\n", "}", ",", "\n", "False", ",", "\n", "filename", "=", "ckpt_base_dir", "/", "f\"initial.state\"", ",", "\n", "save", "=", "False", ",", "\n", ")", "\n", "\n", "# Start training", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "lr_policy", "(", "epoch", ",", "iteration", "=", "None", ")", "\n", "cur_lr", "=", "get_lr", "(", "optimizer", ")", "\n", "\n", "# Gradual pruning in GMP experiments", "\n", "if", "args", ".", "conv_type", "==", "\"GMPConv\"", "and", "epoch", ">=", "args", ".", "init_prune_epoch", "and", "epoch", "<=", "args", ".", "final_prune_epoch", ":", "\n", "            ", "total_prune_epochs", "=", "args", ".", "final_prune_epoch", "-", "args", ".", "init_prune_epoch", "+", "1", "\n", "for", "n", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "                ", "if", "hasattr", "(", "m", ",", "'set_curr_prune_rate'", ")", ":", "\n", "                    ", "prune_decay", "=", "(", "1", "-", "(", "(", "epoch", "-", "args", ".", "init_prune_epoch", ")", "/", "total_prune_epochs", ")", ")", "**", "3", "\n", "curr_prune_rate", "=", "m", ".", "prune_rate", "-", "(", "m", ".", "prune_rate", "*", "prune_decay", ")", "\n", "m", ".", "set_curr_prune_rate", "(", "curr_prune_rate", ")", "\n", "\n", "# train for one epoch", "\n", "", "", "", "start_train", "=", "time", ".", "time", "(", ")", "\n", "train_acc1", ",", "train_acc5", "=", "train", "(", "\n", "data", ".", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ",", "writer", "=", "writer", "\n", ")", "\n", "train_time", ".", "update", "(", "(", "time", ".", "time", "(", ")", "-", "start_train", ")", "/", "60", ")", "\n", "\n", "# evaluate on validation set", "\n", "start_validation", "=", "time", ".", "time", "(", ")", "\n", "acc1", ",", "acc5", "=", "validate", "(", "data", ".", "val_loader", ",", "model", ",", "criterion", ",", "args", ",", "writer", ",", "epoch", ")", "\n", "validation_time", ".", "update", "(", "(", "time", ".", "time", "(", ")", "-", "start_validation", ")", "/", "60", ")", "\n", "\n", "# remember best acc@1 and save checkpoint", "\n", "is_best", "=", "acc1", ">", "best_acc1", "\n", "best_acc1", "=", "max", "(", "acc1", ",", "best_acc1", ")", "\n", "best_acc5", "=", "max", "(", "acc5", ",", "best_acc5", ")", "\n", "best_train_acc1", "=", "max", "(", "train_acc1", ",", "best_train_acc1", ")", "\n", "best_train_acc5", "=", "max", "(", "train_acc5", ",", "best_train_acc5", ")", "\n", "\n", "save", "=", "(", "(", "epoch", "%", "args", ".", "save_every", ")", "==", "0", ")", "and", "args", ".", "save_every", ">", "0", "\n", "if", "is_best", "or", "save", "or", "epoch", "==", "args", ".", "epochs", "-", "1", ":", "\n", "            ", "if", "is_best", ":", "\n", "                ", "print", "(", "f\"==> New best, saving at {ckpt_base_dir / 'model_best.pth'}\"", ")", "\n", "\n", "", "save_checkpoint", "(", "\n", "{", "\n", "\"epoch\"", ":", "epoch", "+", "1", ",", "\n", "\"arch\"", ":", "args", ".", "arch", ",", "\n", "\"state_dict\"", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "\"best_acc1\"", ":", "best_acc1", ",", "\n", "\"best_acc5\"", ":", "best_acc5", ",", "\n", "\"best_train_acc1\"", ":", "best_train_acc1", ",", "\n", "\"best_train_acc5\"", ":", "best_train_acc5", ",", "\n", "\"optimizer\"", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "\"curr_acc1\"", ":", "acc1", ",", "\n", "\"curr_acc5\"", ":", "acc5", ",", "\n", "}", ",", "\n", "is_best", ",", "\n", "filename", "=", "ckpt_base_dir", "/", "f\"epoch_{epoch}.state\"", ",", "\n", "save", "=", "save", ",", "\n", ")", "\n", "\n", "", "epoch_time", ".", "update", "(", "(", "time", ".", "time", "(", ")", "-", "end_epoch", ")", "/", "60", ")", "\n", "progress_overall", ".", "display", "(", "epoch", ")", "\n", "progress_overall", ".", "write_to_tensorboard", "(", "\n", "writer", ",", "prefix", "=", "\"diagnostics\"", ",", "global_step", "=", "epoch", "\n", ")", "\n", "\n", "writer", ".", "add_scalar", "(", "\"test/lr\"", ",", "cur_lr", ",", "epoch", ")", "\n", "end_epoch", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Storing sparsity and threshold statistics for STRConv models", "\n", "if", "args", ".", "conv_type", "==", "\"STRConv\"", ":", "\n", "            ", "count", "=", "0", "\n", "sum_sparse", "=", "0.0", "\n", "for", "n", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "STRConv", ")", ":", "\n", "                    ", "sparsity", ",", "total_params", ",", "thresh", "=", "m", ".", "getSparsity", "(", ")", "\n", "writer", ".", "add_scalar", "(", "\"sparsity/{}\"", ".", "format", "(", "n", ")", ",", "sparsity", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "\"thresh/{}\"", ".", "format", "(", "n", ")", ",", "thresh", ",", "epoch", ")", "\n", "sum_sparse", "+=", "int", "(", "(", "(", "100", "-", "sparsity", ")", "/", "100", ")", "*", "total_params", ")", "\n", "count", "+=", "total_params", "\n", "", "", "total_sparsity", "=", "100", "-", "(", "100", "*", "sum_sparse", "/", "count", ")", "\n", "writer", ".", "add_scalar", "(", "\"sparsity/total\"", ",", "total_sparsity", ",", "epoch", ")", "\n", "", "writer", ".", "add_scalar", "(", "\"test/lr\"", ",", "cur_lr", ",", "epoch", ")", "\n", "end_epoch", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "write_result_to_csv", "(", "\n", "best_acc1", "=", "best_acc1", ",", "\n", "best_acc5", "=", "best_acc5", ",", "\n", "best_train_acc1", "=", "best_train_acc1", ",", "\n", "best_train_acc5", "=", "best_train_acc5", ",", "\n", "prune_rate", "=", "args", ".", "prune_rate", ",", "\n", "curr_acc1", "=", "acc1", ",", "\n", "curr_acc5", "=", "acc5", ",", "\n", "base_config", "=", "args", ".", "config", ",", "\n", "name", "=", "args", ".", "name", ",", "\n", ")", "\n", "if", "args", ".", "conv_type", "==", "\"STRConv\"", ":", "\n", "        ", "json_data", "=", "{", "}", "\n", "json_thres", "=", "{", "}", "\n", "for", "n", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "STRConv", ")", ":", "\n", "                ", "sparsity", "=", "m", ".", "getSparsity", "(", ")", "\n", "json_data", "[", "n", "]", "=", "sparsity", "[", "0", "]", "\n", "sum_sparse", "+=", "int", "(", "(", "(", "100", "-", "sparsity", "[", "0", "]", ")", "/", "100", ")", "*", "sparsity", "[", "1", "]", ")", "\n", "count", "+=", "sparsity", "[", "1", "]", "\n", "json_thres", "[", "n", "]", "=", "sparsity", "[", "2", "]", "\n", "", "", "json_data", "[", "\"total\"", "]", "=", "100", "-", "(", "100", "*", "sum_sparse", "/", "count", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "\"runs/layerwise_sparsity\"", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "\"runs/layerwise_sparsity\"", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "\"runs/layerwise_threshold\"", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "\"runs/layerwise_threshold\"", ")", "\n", "", "with", "open", "(", "\"runs/layerwise_sparsity/{}.json\"", ".", "format", "(", "args", ".", "name", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "json_data", ",", "f", ")", "\n", "", "with", "open", "(", "\"runs/layerwise_threshold/{}.json\"", ".", "format", "(", "args", ".", "name", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "json_thres", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.None.main.set_gpu": [[243, 259], ["torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.DataParallel().cuda.cuda", "print", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "args.args"], "function", ["None"], ["", "", "", "def", "set_gpu", "(", "args", ",", "model", ")", ":", "\n", "    ", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", "=", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "", "else", ":", "\n", "# DataParallel will divide and allocate batch_size to all available GPUs", "\n", "        ", "print", "(", "f\"=> Parallelizing on {args.multigpu} gpus\"", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "multigpu", "[", "0", "]", ")", "\n", "args", ".", "gpu", "=", "args", ".", "multigpu", "[", "0", "]", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "args", ".", "multigpu", ")", ".", "cuda", "(", "\n", "args", ".", "multigpu", "[", "0", "]", "\n", ")", "\n", "\n", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.None.main.resume": [[261, 281], ["os.path.isfile", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "model.load_state_dict", "optimizer.load_state_dict", "print", "print", "print", "args.args"], "function", ["None"], ["", "def", "resume", "(", "args", ",", "model", ",", "optimizer", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "        ", "print", "(", "f\"=> Loading checkpoint '{args.resume}'\"", ")", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "if", "args", ".", "start_epoch", "is", "None", ":", "\n", "            ", "print", "(", "f\"=> Setting new start epoch at {checkpoint['epoch']}\"", ")", "\n", "args", ".", "start_epoch", "=", "checkpoint", "[", "\"epoch\"", "]", "\n", "\n", "", "best_acc1", "=", "checkpoint", "[", "\"best_acc1\"", "]", "\n", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "\"state_dict\"", "]", ")", "\n", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "\"optimizer\"", "]", ")", "\n", "\n", "print", "(", "f\"=> Loaded checkpoint '{args.resume}' (epoch {checkpoint['epoch']})\"", ")", "\n", "\n", "return", "best_acc1", "\n", "", "else", ":", "\n", "        ", "print", "(", "f\"=> No checkpoint found at '{args.resume}'\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.None.main.pretrained": [[283, 330], ["os.path.isfile", "print", "model.state_dict", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "model.state_dict.update", "model.load_state_dict", "pretrained.items", "model.named_modules", "pretrained.items", "hasattr", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "pretrained.items", "utils.conv_type.sparseFunction", "m.set_prune_rate", "print", "utils.conv_type.sparseFunction", "v.size", "model_state_dict[].size", "k.split", "k.split", "utils.conv_type.sparseFunction.abs", "args.args"], "function", ["home.repos.pwc.inspect_result.RAIVNLab_STR.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.conv_type.sparseFunction", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.conv_type.GMPConv.set_prune_rate", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.conv_type.sparseFunction"], ["", "", "def", "pretrained", "(", "args", ",", "model", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "pretrained", ")", ":", "\n", "        ", "print", "(", "\"=> loading pretrained weights from '{}'\"", ".", "format", "(", "args", ".", "pretrained", ")", ")", "\n", "pretrained", "=", "torch", ".", "load", "(", "\n", "args", ".", "pretrained", ",", "\n", "map_location", "=", "torch", ".", "device", "(", "\"cuda:{}\"", ".", "format", "(", "args", ".", "multigpu", "[", "0", "]", ")", ")", ",", "\n", ")", "[", "\"state_dict\"", "]", "\n", "\n", "model_state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "\n", "if", "not", "args", ".", "ignore_pretrained_weights", ":", "\n", "\n", "            ", "pretrained_final", "=", "{", "\n", "k", ":", "v", "\n", "for", "k", ",", "v", "in", "pretrained", ".", "items", "(", ")", "\n", "if", "(", "k", "in", "model_state_dict", "and", "v", ".", "size", "(", ")", "==", "model_state_dict", "[", "k", "]", ".", "size", "(", ")", ")", "\n", "}", "\n", "\n", "if", "args", ".", "conv_type", "!=", "\"STRConv\"", ":", "\n", "                ", "for", "k", ",", "v", "in", "pretrained", ".", "items", "(", ")", ":", "\n", "                    ", "if", "'sparseThreshold'", "in", "k", ":", "\n", "                        ", "wkey", "=", "k", ".", "split", "(", "'sparse'", ")", "[", "0", "]", "+", "'weight'", "\n", "weight", "=", "pretrained", "[", "wkey", "]", "\n", "pretrained_final", "[", "wkey", "]", "=", "sparseFunction", "(", "weight", ",", "v", ")", "\n", "\n", "", "", "", "model_state_dict", ".", "update", "(", "pretrained_final", ")", "\n", "model", ".", "load_state_dict", "(", "model_state_dict", ")", "\n", "\n", "# Using the budgets of STR models for other models like DNW and GMP", "\n", "", "if", "args", ".", "use_budget", ":", "\n", "            ", "budget", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "pretrained", ".", "items", "(", ")", ":", "\n", "                ", "if", "'sparseThreshold'", "in", "k", ":", "\n", "                    ", "wkey", "=", "k", ".", "split", "(", "'sparse'", ")", "[", "0", "]", "+", "'weight'", "\n", "weight", "=", "pretrained", "[", "wkey", "]", "\n", "sparse_weight", "=", "sparseFunction", "(", "weight", ",", "v", ")", "\n", "budget", "[", "wkey", "]", "=", "(", "sparse_weight", ".", "abs", "(", ")", ">", "0", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "", "for", "n", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "                ", "if", "hasattr", "(", "m", ",", "'set_prune_rate'", ")", ":", "\n", "                    ", "pr", "=", "1", "-", "budget", "[", "n", "+", "'.weight'", "]", "\n", "m", ".", "set_prune_rate", "(", "pr", ")", "\n", "print", "(", "'set prune rate'", ",", "n", ",", "pr", ")", "\n", "\n", "\n", "", "", "", "", "else", ":", "\n", "        ", "print", "(", "\"=> no pretrained weights found at '{}'\"", ".", "format", "(", "args", ".", "pretrained", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.None.main.get_dataset": [[332, 337], ["print", "getattr", "args.args"], "function", ["None"], ["", "", "def", "get_dataset", "(", "args", ")", ":", "\n", "    ", "print", "(", "f\"=> Getting {args.set} dataset\"", ")", "\n", "dataset", "=", "getattr", "(", "data", ",", "args", ".", "set", ")", "(", "args", ")", "\n", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.None.main.get_model": [[339, 372], ["print", "print", "print", "model.apply", "print", "model.apply", "hasattr", "hasattr", "sum", "m.set_prune_rate", "hasattr", "p.numel", "model.parameters", "args.args"], "function", ["home.repos.pwc.inspect_result.RAIVNLab_STR.utils.conv_type.GMPConv.set_prune_rate"], ["", "def", "get_model", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "first_layer_dense", ":", "\n", "        ", "args", ".", "first_layer_type", "=", "\"DenseConv\"", "\n", "\n", "", "print", "(", "\"=> Creating model '{}'\"", ".", "format", "(", "args", ".", "arch", ")", ")", "\n", "model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", ")", "\n", "\n", "print", "(", "f\"=> Num model params {sum(p.numel() for p in model.parameters())}\"", ")", "\n", "\n", "# applying sparsity to the network", "\n", "if", "args", ".", "conv_type", "!=", "\"DenseConv\"", ":", "\n", "\n", "        ", "print", "(", "f\"==> Setting prune rate of network to {args.prune_rate}\"", ")", "\n", "\n", "def", "_sparsity", "(", "m", ")", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "\"set_prune_rate\"", ")", ":", "\n", "                ", "m", ".", "set_prune_rate", "(", "args", ".", "prune_rate", ")", "\n", "\n", "", "", "model", ".", "apply", "(", "_sparsity", ")", "\n", "\n", "# freezing the weights if we are only doing mask training", "\n", "", "if", "args", ".", "freeze_weights", ":", "\n", "        ", "print", "(", "f\"=> Freezing model weights\"", ")", "\n", "\n", "def", "_freeze", "(", "m", ")", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "\"mask\"", ")", ":", "\n", "                ", "m", ".", "weight", ".", "requires_grad", "=", "False", "\n", "if", "hasattr", "(", "m", ",", "\"bias\"", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "", "model", ".", "apply", "(", "_freeze", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.None.main.get_optimizer": [[374, 411], ["model.named_parameters", "list", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "model.named_parameters", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "filter", "model.parameters", "args.args"], "function", ["None"], ["", "def", "get_optimizer", "(", "args", ",", "model", ")", ":", "\n", "    ", "for", "n", ",", "v", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "v", ".", "requires_grad", ":", "\n", "            ", "pass", "#print(\"<DEBUG> gradient to\", n)", "\n", "\n", "", "if", "not", "v", ".", "requires_grad", ":", "\n", "            ", "pass", "#print(\"<DEBUG> no gradient to\", n)", "\n", "\n", "", "", "if", "args", ".", "optimizer", "==", "\"sgd\"", ":", "\n", "        ", "parameters", "=", "list", "(", "model", ".", "named_parameters", "(", ")", ")", "\n", "sparse_thresh", "=", "[", "v", "for", "n", ",", "v", "in", "parameters", "if", "(", "\"sparseThreshold\"", "in", "n", ")", "and", "v", ".", "requires_grad", "]", "\n", "bn_params", "=", "[", "v", "for", "n", ",", "v", "in", "parameters", "if", "(", "\"bn\"", "in", "n", ")", "and", "v", ".", "requires_grad", "]", "\n", "# rest_params = [v for n, v in parameters if (\"bn\" not in n) and ('sparseThreshold' not in n) and v.requires_grad]", "\n", "rest_params", "=", "[", "v", "for", "n", ",", "v", "in", "parameters", "if", "(", "\"bn\"", "not", "in", "n", ")", "and", "(", "\"sparseThreshold\"", "not", "in", "n", ")", "and", "v", ".", "requires_grad", "]", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "[", "\n", "{", "\n", "\"params\"", ":", "bn_params", ",", "\n", "\"weight_decay\"", ":", "0", "if", "args", ".", "no_bn_decay", "else", "args", ".", "weight_decay", ",", "\n", "}", ",", "\n", "{", "\n", "\"params\"", ":", "sparse_thresh", ",", "\n", "\"weight_decay\"", ":", "args", ".", "st_decay", "if", "args", ".", "st_decay", "is", "not", "None", "else", "args", ".", "weight_decay", ",", "\n", "}", ",", "\n", "{", "\"params\"", ":", "rest_params", ",", "\"weight_decay\"", ":", "args", ".", "weight_decay", "}", ",", "\n", "]", ",", "\n", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ",", "\n", "nesterov", "=", "args", ".", "nesterov", ",", "\n", ")", "\n", "", "elif", "args", ".", "optimizer", "==", "\"adam\"", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model", ".", "parameters", "(", ")", ")", ",", "lr", "=", "args", ".", "lr", "\n", ")", "\n", "\n", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.None.main._run_dir_exists": [[413, 418], ["log_base_dir.exists", "ckpt_base_dir.exists"], "function", ["None"], ["", "def", "_run_dir_exists", "(", "run_base_dir", ")", ":", "\n", "    ", "log_base_dir", "=", "run_base_dir", "/", "\"logs\"", "\n", "ckpt_base_dir", "=", "run_base_dir", "/", "\"checkpoints\"", "\n", "\n", "return", "log_base_dir", ".", "exists", "(", ")", "or", "ckpt_base_dir", ".", "exists", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.None.main.get_directories": [[420, 452], ["main._run_dir_exists", "ValueError", "pathlib.Path", "pathlib.Path", "pathlib.Path", "main._run_dir_exists", "pathlib.Path.exists", "os.makedirs", "str", "str", "str", "str", "args.args"], "function", ["home.repos.pwc.inspect_result.RAIVNLab_STR.None.main._run_dir_exists", "home.repos.pwc.inspect_result.RAIVNLab_STR.None.main._run_dir_exists"], ["", "def", "get_directories", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "config", "is", "None", "or", "args", ".", "name", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "\"Must have name and config\"", ")", "\n", "\n", "", "config", "=", "pathlib", ".", "Path", "(", "args", ".", "config", ")", ".", "stem", "\n", "if", "args", ".", "log_dir", "is", "None", ":", "\n", "        ", "run_base_dir", "=", "pathlib", ".", "Path", "(", "\n", "f\"runs/{config}/{args.name}/prune_rate={args.prune_rate}\"", "\n", ")", "\n", "", "else", ":", "\n", "        ", "run_base_dir", "=", "pathlib", ".", "Path", "(", "\n", "f\"{args.log_dir}/{config}/{args.name}/prune_rate={args.prune_rate}\"", "\n", ")", "\n", "", "if", "args", ".", "width_mult", "!=", "1.0", ":", "\n", "        ", "run_base_dir", "=", "run_base_dir", "/", "\"width_mult={}\"", ".", "format", "(", "str", "(", "args", ".", "width_mult", ")", ")", "\n", "\n", "", "if", "_run_dir_exists", "(", "run_base_dir", ")", ":", "\n", "        ", "rep_count", "=", "0", "\n", "while", "_run_dir_exists", "(", "run_base_dir", "/", "str", "(", "rep_count", ")", ")", ":", "\n", "            ", "rep_count", "+=", "1", "\n", "\n", "", "run_base_dir", "=", "run_base_dir", "/", "str", "(", "rep_count", ")", "\n", "\n", "", "log_base_dir", "=", "run_base_dir", "/", "\"logs\"", "\n", "ckpt_base_dir", "=", "run_base_dir", "/", "\"checkpoints\"", "\n", "\n", "if", "not", "run_base_dir", ".", "exists", "(", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "run_base_dir", ")", "\n", "\n", "", "(", "run_base_dir", "/", "\"settings.txt\"", ")", ".", "write_text", "(", "str", "(", "args", ")", ")", "\n", "\n", "return", "run_base_dir", ",", "ckpt_base_dir", ",", "log_base_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.None.main.write_result_to_csv": [[454, 487], ["time.strftime", "pathlib.Path", "results.exists", "results.write_text", "open", "f.write"], "function", ["None"], ["", "def", "write_result_to_csv", "(", "**", "kwargs", ")", ":", "\n", "    ", "results", "=", "pathlib", ".", "Path", "(", "\"runs\"", ")", "/", "\"results.csv\"", "\n", "\n", "if", "not", "results", ".", "exists", "(", ")", ":", "\n", "        ", "results", ".", "write_text", "(", "\n", "\"Date Finished, \"", "\n", "\"Base Config, \"", "\n", "\"Name, \"", "\n", "\"Prune Rate, \"", "\n", "\"Current Val Top 1, \"", "\n", "\"Current Val Top 5, \"", "\n", "\"Best Val Top 1, \"", "\n", "\"Best Val Top 5, \"", "\n", "\"Best Train Top 1, \"", "\n", "\"Best Train Top 5\\n\"", "\n", ")", "\n", "\n", "", "now", "=", "time", ".", "strftime", "(", "\"%m-%d-%y_%H:%M:%S\"", ")", "\n", "\n", "with", "open", "(", "results", ",", "\"a+\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "\n", "(", "\n", "\"{now}, \"", "\n", "\"{base_config}, \"", "\n", "\"{name}, \"", "\n", "\"{prune_rate}, \"", "\n", "\"{curr_acc1:.02f}, \"", "\n", "\"{curr_acc5:.02f}, \"", "\n", "\"{best_acc1:.02f}, \"", "\n", "\"{best_acc5:.02f}, \"", "\n", "\"{best_train_acc1:.02f}, \"", "\n", "\"{best_train_acc5:.02f}\\n\"", "\n", ")", ".", "format", "(", "now", "=", "now", ",", "**", "kwargs", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.None.trainer.train": [[12, 67], ["utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.ProgressMeter", "model.train", "len", "time.time", "tqdm.tqdm", "len", "enumerate", "utils.logging.AverageMeter.update", "target.cuda().long.cuda().long", "model", "criterion", "utils.eval_utils.accuracy", "utils.logging.AverageMeter.update", "utils.logging.AverageMeter.update", "utils.logging.AverageMeter.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "utils.logging.AverageMeter.update", "time.time", "len", "images.cuda.cuda", "target.cuda().long.view", "criterion.item", "images.cuda.size", "acc1.item", "images.cuda.size", "acc5.item", "images.cuda.size", "utils.logging.ProgressMeter.display", "utils.logging.ProgressMeter.write_to_tensorboard", "time.time", "target.cuda().long.cuda", "time.time"], "function", ["home.repos.pwc.inspect_result.RAIVNLab_STR.None.trainer.train", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.eval_utils.accuracy", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.conv_type.ChooseEdges.backward", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.logging.ProgressMeter.display", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.logging.ProgressMeter.write_to_tensorboard"], ["def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ",", "writer", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "\"Time\"", ",", "\":6.3f\"", ")", "\n", "data_time", "=", "AverageMeter", "(", "\"Data\"", ",", "\":6.3f\"", ")", "\n", "losses", "=", "AverageMeter", "(", "\"Loss\"", ",", "\":.3f\"", ")", "\n", "top1", "=", "AverageMeter", "(", "\"Acc@1\"", ",", "\":6.2f\"", ")", "\n", "top5", "=", "AverageMeter", "(", "\"Acc@5\"", ",", "\":6.2f\"", ")", "\n", "progress", "=", "ProgressMeter", "(", "\n", "len", "(", "train_loader", ")", ",", "\n", "[", "batch_time", ",", "data_time", ",", "losses", ",", "top1", ",", "top5", "]", ",", "\n", "prefix", "=", "f\"Epoch: [{epoch}]\"", ",", "\n", ")", "\n", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "\n", "batch_size", "=", "train_loader", ".", "batch_size", "\n", "num_batches", "=", "len", "(", "train_loader", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "images", ",", "target", ")", "in", "tqdm", ".", "tqdm", "(", "\n", "enumerate", "(", "train_loader", ")", ",", "ascii", "=", "True", ",", "total", "=", "len", "(", "train_loader", ")", "\n", ")", ":", "\n", "# measure data loading time", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "images", "=", "images", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "", "target", "=", "target", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", ".", "long", "(", ")", "\n", "\n", "# compute output", "\n", "output", "=", "model", "(", "images", ")", "\n", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ".", "view", "(", "-", "1", ")", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "t", "=", "(", "num_batches", "*", "epoch", "+", "i", ")", "*", "batch_size", "\n", "progress", ".", "display", "(", "i", ")", "\n", "progress", ".", "write_to_tensorboard", "(", "writer", ",", "prefix", "=", "\"train\"", ",", "global_step", "=", "t", ")", "\n", "\n", "", "", "return", "top1", ".", "avg", ",", "top5", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.None.trainer.validate": [[69, 115], ["utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.ProgressMeter", "model.eval", "len", "torch.no_grad", "time.time", "tqdm.tqdm", "utils.logging.ProgressMeter.display", "enumerate", "target.cuda().long.cuda().long", "model", "criterion", "utils.eval_utils.accuracy", "utils.logging.AverageMeter.update", "utils.logging.AverageMeter.update", "utils.logging.AverageMeter.update", "utils.logging.AverageMeter.update", "time.time", "len", "utils.logging.ProgressMeter.write_to_tensorboard", "len", "images.cuda.cuda", "target.cuda().long.view", "criterion.item", "images.cuda.size", "acc1.item", "images.cuda.size", "acc5.item", "images.cuda.size", "utils.logging.ProgressMeter.display", "target.cuda().long.cuda", "time.time"], "function", ["home.repos.pwc.inspect_result.RAIVNLab_STR.utils.logging.ProgressMeter.display", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.eval_utils.accuracy", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.logging.ProgressMeter.write_to_tensorboard", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.logging.ProgressMeter.display"], ["", "def", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "args", ",", "writer", ",", "epoch", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "\"Time\"", ",", "\":6.3f\"", ",", "write_val", "=", "False", ")", "\n", "losses", "=", "AverageMeter", "(", "\"Loss\"", ",", "\":.3f\"", ",", "write_val", "=", "False", ")", "\n", "top1", "=", "AverageMeter", "(", "\"Acc@1\"", ",", "\":6.2f\"", ",", "write_val", "=", "False", ")", "\n", "top5", "=", "AverageMeter", "(", "\"Acc@5\"", ",", "\":6.2f\"", ",", "write_val", "=", "False", ")", "\n", "progress", "=", "ProgressMeter", "(", "\n", "len", "(", "val_loader", ")", ",", "[", "batch_time", ",", "losses", ",", "top1", ",", "top5", "]", ",", "prefix", "=", "\"Test: \"", "\n", ")", "\n", "\n", "# switch to evaluate mode", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "images", ",", "target", ")", "in", "tqdm", ".", "tqdm", "(", "\n", "enumerate", "(", "val_loader", ")", ",", "ascii", "=", "True", ",", "total", "=", "len", "(", "val_loader", ")", "\n", ")", ":", "\n", "            ", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "                ", "images", "=", "images", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "", "target", "=", "target", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", ".", "long", "(", ")", "\n", "\n", "# compute output", "\n", "output", "=", "model", "(", "images", ")", "\n", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ".", "view", "(", "-", "1", ")", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                ", "progress", ".", "display", "(", "i", ")", "\n", "\n", "", "", "progress", ".", "display", "(", "len", "(", "val_loader", ")", ")", "\n", "\n", "if", "writer", "is", "not", "None", ":", "\n", "            ", "progress", ".", "write_to_tensorboard", "(", "writer", ",", "prefix", "=", "\"test\"", ",", "global_step", "=", "epoch", ")", "\n", "\n", "", "", "return", "top1", ".", "avg", ",", "top5", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.None.args.parse_arguments": [[10, 250], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "args.get_config", "int", "x.split"], "function", ["home.repos.pwc.inspect_result.RAIVNLab_STR.None.args.get_config"], ["def", "parse_arguments", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"PyTorch ImageNet Training for STR, DNW and GMP\"", ")", "\n", "\n", "# General Config", "\n", "parser", ".", "add_argument", "(", "\n", "\"--data\"", ",", "help", "=", "\"path to dataset base directory\"", ",", "default", "=", "\"/mnt/disk1/datasets\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--optimizer\"", ",", "help", "=", "\"Which optimizer to use\"", ",", "default", "=", "\"sgd\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--set\"", ",", "help", "=", "\"name of dataset\"", ",", "type", "=", "str", ",", "default", "=", "\"ImageNet\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"-a\"", ",", "\"--arch\"", ",", "metavar", "=", "\"ARCH\"", ",", "default", "=", "\"ResNet18\"", ",", "help", "=", "\"model architecture\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--config\"", ",", "help", "=", "\"Config file to use (see configs dir)\"", ",", "default", "=", "None", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--log-dir\"", ",", "help", "=", "\"Where to save the runs. If None use ./runs\"", ",", "default", "=", "None", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"-j\"", ",", "\n", "\"--workers\"", ",", "\n", "default", "=", "20", ",", "\n", "type", "=", "int", ",", "\n", "metavar", "=", "\"N\"", ",", "\n", "help", "=", "\"number of data loading workers (default: 20)\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--epochs\"", ",", "\n", "default", "=", "90", ",", "\n", "type", "=", "int", ",", "\n", "metavar", "=", "\"N\"", ",", "\n", "help", "=", "\"number of total epochs to run\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--start-epoch\"", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "int", ",", "\n", "metavar", "=", "\"N\"", ",", "\n", "help", "=", "\"manual epoch number (useful on restarts)\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"-b\"", ",", "\n", "\"--batch-size\"", ",", "\n", "default", "=", "256", ",", "\n", "type", "=", "int", ",", "\n", "metavar", "=", "\"N\"", ",", "\n", "help", "=", "\"mini-batch size (default: 256), this is the total \"", "\n", "\"batch size of all GPUs on the current node when \"", "\n", "\"using Data Parallel or Distributed Data Parallel\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--lr\"", ",", "\n", "\"--learning-rate\"", ",", "\n", "default", "=", "0.1", ",", "\n", "type", "=", "float", ",", "\n", "metavar", "=", "\"LR\"", ",", "\n", "help", "=", "\"initial learning rate\"", ",", "\n", "dest", "=", "\"lr\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--warmup_length\"", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "\"Number of warmup iterations\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--init_prune_epoch\"", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "\"Init epoch for pruning in GMP\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--final_prune_epoch\"", ",", "default", "=", "-", "100", ",", "type", "=", "int", ",", "help", "=", "\"Final epoch for pruning in GMP\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--momentum\"", ",", "default", "=", "0.9", ",", "type", "=", "float", ",", "metavar", "=", "\"M\"", ",", "help", "=", "\"momentum\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--wd\"", ",", "\n", "\"--weight-decay\"", ",", "\n", "default", "=", "1e-4", ",", "\n", "type", "=", "float", ",", "\n", "metavar", "=", "\"W\"", ",", "\n", "help", "=", "\"weight decay (default: 1e-4)\"", ",", "\n", "dest", "=", "\"weight_decay\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"-p\"", ",", "\n", "\"--print-freq\"", ",", "\n", "default", "=", "10", ",", "\n", "type", "=", "int", ",", "\n", "metavar", "=", "\"N\"", ",", "\n", "help", "=", "\"print frequency (default: 10)\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--num-classes\"", ",", "\n", "default", "=", "10", ",", "\n", "type", "=", "int", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--resume\"", ",", "\n", "default", "=", "\"\"", ",", "\n", "type", "=", "str", ",", "\n", "metavar", "=", "\"PATH\"", ",", "\n", "help", "=", "\"path to latest checkpoint (default: none)\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"-e\"", ",", "\n", "\"--evaluate\"", ",", "\n", "dest", "=", "\"evaluate\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"evaluate model on validation set\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--pretrained\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--seed\"", ",", "default", "=", "None", ",", "type", "=", "int", ",", "help", "=", "\"seed for initializing training. \"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--multigpu\"", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "lambda", "x", ":", "[", "int", "(", "a", ")", "for", "a", "in", "x", ".", "split", "(", "\",\"", ")", "]", ",", "\n", "help", "=", "\"Which GPUs to use for multigpu training\"", ",", "\n", ")", "\n", "\n", "# Learning Rate Policy Specific", "\n", "parser", ".", "add_argument", "(", "\n", "\"--lr-policy\"", ",", "default", "=", "\"constant_lr\"", ",", "help", "=", "\"Policy for the learning rate.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--multistep-lr-adjust\"", ",", "default", "=", "30", ",", "type", "=", "int", ",", "help", "=", "\"Interval to drop lr\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--multistep-lr-gamma\"", ",", "default", "=", "0.1", ",", "type", "=", "int", ",", "help", "=", "\"Multistep multiplier\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--name\"", ",", "default", "=", "None", ",", "type", "=", "str", ",", "help", "=", "\"Experiment name to append to filepath\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--save_every\"", ",", "default", "=", "-", "1", ",", "type", "=", "int", ",", "help", "=", "\"Save every ___ epochs\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--prune-rate\"", ",", "\n", "default", "=", "0.0", ",", "\n", "help", "=", "\"Amount of pruning to do during sparse training\"", ",", "\n", "type", "=", "float", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--width-mult\"", ",", "\n", "default", "=", "1.0", ",", "\n", "help", "=", "\"How much to vary the width of the network.\"", ",", "\n", "type", "=", "float", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--nesterov\"", ",", "\n", "default", "=", "False", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether or not to use nesterov for SGD\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--random-mask\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether or not to use a random mask when fine tuning for lottery experiments\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--one-batch\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"One batch train set for debugging purposes (test overfitting)\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--conv-type\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "\"What kind of sparsity to use\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--freeze-weights\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether or not to train only mask (this freezes weights)\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--mode\"", ",", "default", "=", "\"fan_in\"", ",", "help", "=", "\"Weight initialization mode\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--nonlinearity\"", ",", "default", "=", "\"relu\"", ",", "help", "=", "\"Nonlinearity used by initialization\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--bn-type\"", ",", "default", "=", "None", ",", "help", "=", "\"BatchNorm type\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--init\"", ",", "default", "=", "\"kaiming_normal\"", ",", "help", "=", "\"Weight initialization modifications\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--no-bn-decay\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ",", "help", "=", "\"No batchnorm decay\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--dense-conv-model\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ",", "help", "=", "\"Store a model variant of the given pretrained model that is compatible to CNNs with DenseConv (nn.Conv2d)\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--st-decay\"", ",", "type", "=", "float", ",", "default", "=", "None", ",", "help", "=", "\"decay for sparse thresh. If none then use normal weight decay.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--scale-fan\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ",", "help", "=", "\"scale fan\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--first-layer-dense\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"First layer dense or sparse\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--last-layer-dense\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Last layer dense or sparse\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--label-smoothing\"", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "\"Label smoothing to use, default 0.0\"", ",", "\n", "default", "=", "None", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--first-layer-type\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "\"Conv type of first layer\"", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--sInit-type\"", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"type of sInit\"", ",", "\n", "default", "=", "\"constant\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--sInit-value\"", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "\"initial value for sInit\"", ",", "\n", "default", "=", "100", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--sparse-function\"", ",", "type", "=", "str", ",", "default", "=", "'sigmoid'", ",", "help", "=", "\"choice of g(s)\"", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--use-budget\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"use the budget from the pretrained model.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--ignore-pretrained-weights\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"ignore the weights of a pretrained model.\"", "\n", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "get_config", "(", "args", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.None.args.get_config": [[252, 266], ["configs.parser.argv_to_vars", "open().read", "yaml.load", "print", "args.__dict__.update", "getattr", "open"], "function", ["home.repos.pwc.inspect_result.RAIVNLab_STR.configs.parser.argv_to_vars", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.logging.VarianceMeter.update"], ["", "def", "get_config", "(", "args", ")", ":", "\n", "# get commands from command line", "\n", "    ", "override_args", "=", "_parser", ".", "argv_to_vars", "(", "sys", ".", "argv", ")", "\n", "\n", "# load yaml file", "\n", "yaml_txt", "=", "open", "(", "args", ".", "config", ")", ".", "read", "(", ")", "\n", "\n", "# override args", "\n", "loaded_yaml", "=", "yaml", ".", "load", "(", "yaml_txt", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "for", "v", "in", "override_args", ":", "\n", "        ", "loaded_yaml", "[", "v", "]", "=", "getattr", "(", "args", ",", "v", ")", "\n", "\n", "", "print", "(", "f\"=> Reading YAML config from {args.config}\"", ")", "\n", "args", ".", "__dict__", ".", "update", "(", "loaded_yaml", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.None.args.run_args": [[268, 272], ["args.parse_arguments"], "function", ["home.repos.pwc.inspect_result.RAIVNLab_STR.None.args.parse_arguments"], ["", "def", "run_args", "(", ")", ":", "\n", "    ", "global", "args", "\n", "if", "args", "is", "None", ":", "\n", "        ", "args", "=", "parse_arguments", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.schedulers.get_policy": [[6, 18], ["None"], "function", ["None"], ["def", "get_policy", "(", "name", ")", ":", "\n", "    ", "if", "name", "is", "None", ":", "\n", "        ", "return", "constant_lr", "\n", "\n", "", "out_dict", "=", "{", "\n", "\"constant_lr\"", ":", "constant_lr", ",", "\n", "\"cosine_lr\"", ":", "cosine_lr", ",", "\n", "\"efficientnet_lr\"", ":", "efficientnet_lr", ",", "\n", "\"multistep_lr\"", ":", "multistep_lr", ",", "\n", "}", "\n", "\n", "return", "out_dict", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.schedulers.assign_learning_rate": [[20, 23], ["None"], "function", ["None"], ["", "def", "assign_learning_rate", "(", "optimizer", ",", "new_lr", ")", ":", "\n", "    ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "\"lr\"", "]", "=", "new_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.schedulers.constant_lr": [[25, 37], ["schedulers.assign_learning_rate", "schedulers._warmup_lr"], "function", ["home.repos.pwc.inspect_result.RAIVNLab_STR.utils.schedulers.assign_learning_rate", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.schedulers._warmup_lr"], ["", "", "def", "constant_lr", "(", "optimizer", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "def", "_lr_adjuster", "(", "epoch", ",", "iteration", ")", ":", "\n", "        ", "if", "epoch", "<", "args", ".", "warmup_length", ":", "\n", "            ", "lr", "=", "_warmup_lr", "(", "args", ".", "lr", ",", "args", ".", "warmup_length", ",", "epoch", ")", "\n", "", "else", ":", "\n", "            ", "lr", "=", "args", ".", "lr", "\n", "\n", "", "assign_learning_rate", "(", "optimizer", ",", "lr", ")", "\n", "\n", "return", "lr", "\n", "\n", "", "return", "_lr_adjuster", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.schedulers.cosine_lr": [[39, 53], ["schedulers.assign_learning_rate", "schedulers._warmup_lr", "numpy.cos"], "function", ["home.repos.pwc.inspect_result.RAIVNLab_STR.utils.schedulers.assign_learning_rate", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.schedulers._warmup_lr"], ["", "def", "cosine_lr", "(", "optimizer", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "def", "_lr_adjuster", "(", "epoch", ",", "iteration", ")", ":", "\n", "        ", "if", "epoch", "<", "args", ".", "warmup_length", ":", "\n", "            ", "lr", "=", "_warmup_lr", "(", "args", ".", "lr", ",", "args", ".", "warmup_length", ",", "epoch", ")", "\n", "", "else", ":", "\n", "            ", "e", "=", "epoch", "-", "args", ".", "warmup_length", "\n", "es", "=", "args", ".", "epochs", "-", "args", ".", "warmup_length", "\n", "lr", "=", "0.5", "*", "(", "1", "+", "np", ".", "cos", "(", "np", ".", "pi", "*", "e", "/", "es", ")", ")", "*", "args", ".", "lr", "\n", "\n", "", "assign_learning_rate", "(", "optimizer", ",", "lr", ")", "\n", "\n", "return", "lr", "\n", "\n", "", "return", "_lr_adjuster", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.schedulers.efficientnet_lr": [[55, 67], ["schedulers.assign_learning_rate", "schedulers._warmup_lr"], "function", ["home.repos.pwc.inspect_result.RAIVNLab_STR.utils.schedulers.assign_learning_rate", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.schedulers._warmup_lr"], ["", "def", "efficientnet_lr", "(", "optimizer", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "def", "_lr_adjuster", "(", "epoch", ",", "iteration", ")", ":", "\n", "        ", "if", "epoch", "<", "args", ".", "warmup_length", ":", "\n", "            ", "lr", "=", "_warmup_lr", "(", "args", ".", "lr", ",", "args", ".", "warmup_length", ",", "epoch", ")", "\n", "", "else", ":", "\n", "            ", "lr", "=", "args", ".", "lr", "*", "(", "0.97", "**", "(", "epoch", "/", "2.4", ")", ")", "\n", "\n", "", "assign_learning_rate", "(", "optimizer", ",", "lr", ")", "\n", "\n", "return", "lr", "\n", "\n", "", "return", "_lr_adjuster", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.schedulers.multistep_lr": [[69, 80], ["schedulers.assign_learning_rate"], "function", ["home.repos.pwc.inspect_result.RAIVNLab_STR.utils.schedulers.assign_learning_rate"], ["", "def", "multistep_lr", "(", "optimizer", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by 10 every 30 epochs\"\"\"", "\n", "\n", "def", "_lr_adjuster", "(", "epoch", ",", "iteration", ")", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "(", "args", ".", "lr_gamma", "**", "(", "epoch", "//", "args", ".", "lr_adjust", ")", ")", "\n", "\n", "assign_learning_rate", "(", "optimizer", ",", "lr", ")", "\n", "\n", "return", "lr", "\n", "\n", "", "return", "_lr_adjuster", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.schedulers._warmup_lr": [[82, 84], ["None"], "function", ["None"], ["", "def", "_warmup_lr", "(", "base_lr", ",", "warmup_length", ",", "epoch", ")", ":", "\n", "    ", "return", "base_lr", "*", "(", "epoch", "+", "1", ")", "/", "warmup_length", "\n", "", ""]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.bn_type.NonAffineBatchNorm.__init__": [[7, 9], ["torch.BatchNorm2d.__init__"], "methods", ["home.repos.pwc.inspect_result.RAIVNLab_STR.data.imagenet.H5DatasetOld.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ")", ":", "\n", "        ", "super", "(", "NonAffineBatchNorm", ",", "self", ")", ".", "__init__", "(", "dim", ",", "affine", "=", "False", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.logging.ProgressMeter.__init__": [[8, 12], ["logging.ProgressMeter._get_batch_fmtstr"], "methods", ["home.repos.pwc.inspect_result.RAIVNLab_STR.utils.logging.ProgressMeter._get_batch_fmtstr"], ["    ", "def", "__init__", "(", "self", ",", "num_batches", ",", "meters", ",", "prefix", "=", "\"\"", ")", ":", "\n", "        ", "self", ".", "batch_fmtstr", "=", "self", ".", "_get_batch_fmtstr", "(", "num_batches", ")", "\n", "self", ".", "meters", "=", "meters", "\n", "self", ".", "prefix", "=", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.logging.ProgressMeter.display": [[13, 20], ["str", "print", "tqdm.tqdm.write", "logging.ProgressMeter.batch_fmtstr.format"], "methods", ["None"], ["", "def", "display", "(", "self", ",", "batch", ",", "tqdm_writer", "=", "True", ")", ":", "\n", "        ", "entries", "=", "[", "self", ".", "prefix", "+", "self", ".", "batch_fmtstr", ".", "format", "(", "batch", ")", "]", "\n", "entries", "+=", "[", "str", "(", "meter", ")", "for", "meter", "in", "self", ".", "meters", "]", "\n", "if", "not", "tqdm_writer", ":", "\n", "            ", "print", "(", "\"\\t\"", ".", "join", "(", "entries", ")", ")", "\n", "", "else", ":", "\n", "            ", "tqdm", ".", "tqdm", ".", "write", "(", "\"\\t\"", ".", "join", "(", "entries", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.logging.ProgressMeter.write_to_tensorboard": [[21, 35], ["writer.add_scalar", "writer.add_scalar"], "methods", ["None"], ["", "", "def", "write_to_tensorboard", "(", "\n", "self", ",", "writer", ":", "SummaryWriter", ",", "prefix", "=", "\"train\"", ",", "global_step", "=", "None", "\n", ")", ":", "\n", "        ", "for", "meter", "in", "self", ".", "meters", ":", "\n", "            ", "avg", "=", "meter", ".", "avg", "\n", "val", "=", "meter", ".", "val", "\n", "if", "meter", ".", "write_val", ":", "\n", "                ", "writer", ".", "add_scalar", "(", "\n", "f\"{prefix}/{meter.name}_val\"", ",", "val", ",", "global_step", "=", "global_step", "\n", ")", "\n", "\n", "", "if", "meter", ".", "write_avg", ":", "\n", "                ", "writer", ".", "add_scalar", "(", "\n", "f\"{prefix}/{meter.name}_avg\"", ",", "avg", ",", "global_step", "=", "global_step", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.logging.ProgressMeter._get_batch_fmtstr": [[37, 41], ["len", "str", "str", "fmt.format"], "methods", ["None"], ["", "", "", "def", "_get_batch_fmtstr", "(", "self", ",", "num_batches", ")", ":", "\n", "        ", "num_digits", "=", "len", "(", "str", "(", "num_batches", "//", "1", ")", ")", "\n", "fmt", "=", "\"{:\"", "+", "str", "(", "num_digits", ")", "+", "\"d}\"", "\n", "return", "\"[\"", "+", "fmt", "+", "\"/\"", "+", "fmt", ".", "format", "(", "num_batches", ")", "+", "\"]\"", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.logging.Meter.__init__": [[44, 47], ["None"], "methods", ["None"], ["    ", "@", "abc", ".", "abstractmethod", "\n", "def", "__init__", "(", "self", ",", "name", ",", "fmt", "=", "\":f\"", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.logging.Meter.reset": [[48, 51], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "reset", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.logging.Meter.update": [[52, 55], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.logging.Meter.__str__": [[56, 59], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.logging.AverageMeter.__init__": [[64, 71], ["logging.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.RAIVNLab_STR.utils.logging.VarianceMeter.reset"], ["def", "__init__", "(", "self", ",", "name", ",", "fmt", "=", "\":f\"", ",", "write_val", "=", "True", ",", "write_avg", "=", "True", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "reset", "(", ")", "\n", "\n", "self", ".", "write_val", "=", "write_val", "\n", "self", ".", "write_avg", "=", "write_avg", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.logging.AverageMeter.reset": [[72, 77], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.logging.AverageMeter.update": [[78, 83], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.logging.AverageMeter.__str__": [[84, 87], ["fmtstr.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "fmtstr", "=", "\"{name} {val\"", "+", "self", ".", "fmt", "+", "\"} ({avg\"", "+", "self", ".", "fmt", "+", "\"})\"", "\n", "return", "fmtstr", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.logging.VarianceMeter.__init__": [[90, 98], ["logging.AverageMeter", "logging.AverageMeter", "logging.VarianceMeter.reset"], "methods", ["home.repos.pwc.inspect_result.RAIVNLab_STR.utils.logging.VarianceMeter.reset"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "fmt", "=", "\":f\"", ",", "write_val", "=", "False", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "_ex_sq", "=", "AverageMeter", "(", "name", "=", "\"_subvariance_1\"", ",", "fmt", "=", "\":.02f\"", ")", "\n", "self", ".", "_sq_ex", "=", "AverageMeter", "(", "name", "=", "\"_subvariance_2\"", ",", "fmt", "=", "\":.02f\"", ")", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "reset", "(", ")", "\n", "self", ".", "write_val", "=", "False", "\n", "self", ".", "write_avg", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.logging.VarianceMeter.val": [[99, 102], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "val", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_ex_sq", ".", "val", "-", "self", ".", "_sq_ex", ".", "val", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.logging.VarianceMeter.avg": [[103, 106], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "avg", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_ex_sq", ".", "avg", "-", "self", ".", "_sq_ex", ".", "avg", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.logging.VarianceMeter.reset": [[107, 110], ["logging.VarianceMeter._ex_sq.reset", "logging.VarianceMeter._sq_ex.reset"], "methods", ["home.repos.pwc.inspect_result.RAIVNLab_STR.utils.logging.VarianceMeter.reset", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.logging.VarianceMeter.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_ex_sq", ".", "reset", "(", ")", "\n", "self", ".", "_sq_ex", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.logging.VarianceMeter.update": [[111, 114], ["logging.VarianceMeter._ex_sq.update", "logging.VarianceMeter._sq_ex.update"], "methods", ["home.repos.pwc.inspect_result.RAIVNLab_STR.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.logging.VarianceMeter.update"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "_ex_sq", ".", "update", "(", "val", "**", "2", ",", "n", "=", "n", ")", "\n", "self", ".", "_sq_ex", ".", "update", "(", "val", ",", "n", "=", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.logging.VarianceMeter.__str__": [[115, 118], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "(", "\"{name} (var {avg\"", "+", "self", ".", "fmt", "+", "\"})\"", ")", ".", "format", "(", "\n", "name", "=", "self", ".", "name", ",", "avg", "=", "self", ".", "avg", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.net_utils.LabelSmoothing.__init__": [[46, 55], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.RAIVNLab_STR.data.imagenet.H5DatasetOld.__init__"], ["def", "__init__", "(", "self", ",", "smoothing", "=", "0.0", ")", ":", "\n", "        ", "\"\"\"\n        Constructor for the LabelSmoothing module.\n\n        :param smoothing: label smoothing factor\n        \"\"\"", "\n", "super", "(", "LabelSmoothing", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "confidence", "=", "1.0", "-", "smoothing", "\n", "self", ".", "smoothing", "=", "smoothing", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.net_utils.LabelSmoothing.forward": [[56, 64], ["torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "nll_loss.squeeze.squeeze.squeeze", "loss.mean", "torch.nn.functional.log_softmax.gather", "torch.nn.functional.log_softmax.gather", "torch.nn.functional.log_softmax.mean", "torch.nn.functional.log_softmax.mean", "target.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "target", ")", ":", "\n", "        ", "logprobs", "=", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "x", ",", "dim", "=", "-", "1", ")", "\n", "\n", "nll_loss", "=", "-", "logprobs", ".", "gather", "(", "dim", "=", "-", "1", ",", "index", "=", "target", ".", "unsqueeze", "(", "1", ")", ")", "\n", "nll_loss", "=", "nll_loss", ".", "squeeze", "(", "1", ")", "\n", "smooth_loss", "=", "-", "logprobs", ".", "mean", "(", "dim", "=", "-", "1", ")", "\n", "loss", "=", "self", ".", "confidence", "*", "nll_loss", "+", "self", ".", "smoothing", "*", "smooth_loss", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.net_utils.MaskL1RegLoss.__init__": [[67, 70], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.RAIVNLab_STR.data.imagenet.H5DatasetOld.__init__"], ["    ", "def", "__init__", "(", "self", ",", "temperature", "=", "1.0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "temperature", "=", "temperature", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.net_utils.MaskL1RegLoss.forward": [[71, 75], ["net_utils.accumulate"], "methods", ["home.repos.pwc.inspect_result.RAIVNLab_STR.utils.net_utils.accumulate"], ["", "def", "forward", "(", "self", ",", "model", ")", ":", "\n", "        ", "l1_accum", "=", "accumulate", "(", "model", ",", "self", ".", "l1_of_mask", ")", "\n", "\n", "return", "l1_accum", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.net_utils.MaskL1RegLoss.l1_of_mask": [[76, 81], ["hasattr"], "methods", ["None"], ["", "def", "l1_of_mask", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "hasattr", "(", "m", ",", "\"mask\"", ")", ":", "\n", "            ", "return", "(", "self", ".", "temperature", "*", "m", ".", "mask", ")", ".", "sigmoid", "(", ")", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.net_utils.save_checkpoint": [[11, 24], ["pathlib.Path", "torch.save", "torch.save", "pathlib.Path.parent.exists", "os.makedirs", "shutil.copyfile", "str", "os.remove"], "function", ["None"], ["def", "save_checkpoint", "(", "state", ",", "is_best", ",", "filename", "=", "\"checkpoint.pth\"", ",", "save", "=", "False", ")", ":", "\n", "    ", "filename", "=", "pathlib", ".", "Path", "(", "filename", ")", "\n", "\n", "if", "not", "filename", ".", "parent", ".", "exists", "(", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "filename", ".", "parent", ")", "\n", "\n", "", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "filename", ",", "str", "(", "filename", ".", "parent", "/", "\"model_best.pth\"", ")", ")", "\n", "\n", "if", "not", "save", ":", "\n", "            ", "os", ".", "remove", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.net_utils.get_lr": [[26, 28], ["None"], "function", ["None"], ["", "", "", "def", "get_lr", "(", "optimizer", ")", ":", "\n", "    ", "return", "optimizer", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.net_utils.accumulate": [[30, 39], ["model.children", "f", "net_utils.accumulate"], "function", ["home.repos.pwc.inspect_result.RAIVNLab_STR.utils.net_utils.accumulate"], ["", "def", "accumulate", "(", "model", ",", "f", ")", ":", "\n", "    ", "acc", "=", "0.0", "\n", "\n", "for", "child", "in", "model", ".", "children", "(", ")", ":", "\n", "        ", "acc", "+=", "accumulate", "(", "child", ",", "f", ")", "\n", "\n", "", "acc", "+=", "f", "(", "model", ")", "\n", "\n", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.builder.Builder.__init__": [[12, 16], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "conv_layer", ",", "bn_layer", ",", "first_layer", "=", "None", ")", ":", "\n", "        ", "self", ".", "conv_layer", "=", "conv_layer", "\n", "self", ".", "bn_layer", "=", "bn_layer", "\n", "self", ".", "first_layer", "=", "first_layer", "or", "conv_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.builder.Builder.conv": [[17, 60], ["builder.Builder._init_conv", "print", "conv_layer", "conv_layer", "conv_layer", "conv_layer"], "methods", ["home.repos.pwc.inspect_result.RAIVNLab_STR.utils.builder.Builder._init_conv"], ["", "def", "conv", "(", "self", ",", "kernel_size", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "first_layer", "=", "False", ")", ":", "\n", "        ", "conv_layer", "=", "self", ".", "first_layer", "if", "first_layer", "else", "self", ".", "conv_layer", "\n", "\n", "if", "first_layer", ":", "\n", "            ", "print", "(", "f\"==> Building first layer with {args.first_layer_type}\"", ")", "\n", "\n", "", "if", "kernel_size", "==", "3", ":", "\n", "            ", "conv", "=", "conv_layer", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "", "elif", "kernel_size", "==", "1", ":", "\n", "            ", "conv", "=", "conv_layer", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", "\n", ")", "\n", "", "elif", "kernel_size", "==", "5", ":", "\n", "            ", "conv", "=", "conv_layer", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "5", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "2", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "", "elif", "kernel_size", "==", "7", ":", "\n", "            ", "conv", "=", "conv_layer", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "3", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n", "", "self", ".", "_init_conv", "(", "conv", ")", "\n", "\n", "return", "conv", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.builder.Builder.conv2d": [[61, 83], ["builder.Builder.conv_layer"], "methods", ["None"], ["", "def", "conv2d", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "True", ",", "\n", "padding_mode", "=", "\"zeros\"", ",", "\n", ")", ":", "\n", "        ", "return", "self", ".", "conv_layer", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "dilation", ",", "\n", "groups", ",", "\n", "bias", ",", "\n", "padding_mode", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.builder.Builder.conv3x3": [[85, 89], ["builder.Builder.conv"], "methods", ["home.repos.pwc.inspect_result.RAIVNLab_STR.utils.builder.Builder.conv"], ["", "def", "conv3x3", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "first_layer", "=", "False", ")", ":", "\n", "        ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "c", "=", "self", ".", "conv", "(", "3", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "stride", ",", "first_layer", "=", "first_layer", ")", "\n", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.builder.Builder.conv1x1": [[90, 94], ["builder.Builder.conv"], "methods", ["home.repos.pwc.inspect_result.RAIVNLab_STR.utils.builder.Builder.conv"], ["", "def", "conv1x1", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "first_layer", "=", "False", ")", ":", "\n", "        ", "\"\"\"1x1 convolution with padding\"\"\"", "\n", "c", "=", "self", ".", "conv", "(", "1", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "stride", ",", "first_layer", "=", "first_layer", ")", "\n", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.builder.Builder.conv7x7": [[95, 99], ["builder.Builder.conv"], "methods", ["home.repos.pwc.inspect_result.RAIVNLab_STR.utils.builder.Builder.conv"], ["", "def", "conv7x7", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "first_layer", "=", "False", ")", ":", "\n", "        ", "\"\"\"7x7 convolution with padding\"\"\"", "\n", "c", "=", "self", ".", "conv", "(", "7", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "stride", ",", "first_layer", "=", "first_layer", ")", "\n", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.builder.Builder.conv5x5": [[100, 104], ["builder.Builder.conv"], "methods", ["home.repos.pwc.inspect_result.RAIVNLab_STR.utils.builder.Builder.conv"], ["", "def", "conv5x5", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "first_layer", "=", "False", ")", ":", "\n", "        ", "\"\"\"5x5 convolution with padding\"\"\"", "\n", "c", "=", "self", ".", "conv", "(", "5", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "stride", ",", "first_layer", "=", "first_layer", ")", "\n", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.builder.Builder.batchnorm": [[105, 107], ["builder.Builder.bn_layer"], "methods", ["None"], ["", "def", "batchnorm", "(", "self", ",", "planes", ",", "last_bn", "=", "False", ",", "first_layer", "=", "False", ")", ":", "\n", "        ", "return", "self", ".", "bn_layer", "(", "planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.builder.Builder.activation": [[108, 113], ["ValueError", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "activation", "(", "self", ")", ":", "\n", "        ", "if", "args", ".", "nonlinearity", "==", "\"relu\"", ":", "\n", "            ", "return", "(", "lambda", ":", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"{args.nonlinearity} is not an initialization option!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.builder.Builder._init_conv": [[114, 152], ["torch.init._calculate_correct_fan", "torch.init._calculate_correct_fan", "torch.init.calculate_gain", "torch.init.calculate_gain", "math.sqrt", "conv.weight.data.sign", "torch.init._calculate_correct_fan", "torch.init._calculate_correct_fan", "torch.init.calculate_gain", "torch.init.calculate_gain", "math.sqrt", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.init._calculate_correct_fan", "torch.init._calculate_correct_fan", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "ValueError", "math.sqrt", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "conv.weight.data.normal_", "math.sqrt"], "methods", ["None"], ["", "", "def", "_init_conv", "(", "self", ",", "conv", ")", ":", "\n", "        ", "if", "args", ".", "init", "==", "\"signed_constant\"", ":", "\n", "\n", "            ", "fan", "=", "nn", ".", "init", ".", "_calculate_correct_fan", "(", "conv", ".", "weight", ",", "args", ".", "mode", ")", "\n", "if", "args", ".", "scale_fan", ":", "\n", "                ", "fan", "=", "fan", "*", "(", "1", "-", "args", ".", "prune_rate", ")", "\n", "", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "args", ".", "nonlinearity", ")", "\n", "std", "=", "gain", "/", "math", ".", "sqrt", "(", "fan", ")", "\n", "conv", ".", "weight", ".", "data", "=", "conv", ".", "weight", ".", "data", ".", "sign", "(", ")", "*", "std", "\n", "\n", "", "elif", "args", ".", "init", "==", "\"unsigned_constant\"", ":", "\n", "\n", "            ", "fan", "=", "nn", ".", "init", ".", "_calculate_correct_fan", "(", "conv", ".", "weight", ",", "args", ".", "mode", ")", "\n", "if", "args", ".", "scale_fan", ":", "\n", "                ", "fan", "=", "fan", "*", "(", "1", "-", "args", ".", "prune_rate", ")", "\n", "\n", "", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "args", ".", "nonlinearity", ")", "\n", "std", "=", "gain", "/", "math", ".", "sqrt", "(", "fan", ")", "\n", "conv", ".", "weight", ".", "data", "=", "torch", ".", "ones_like", "(", "conv", ".", "weight", ".", "data", ")", "*", "std", "\n", "\n", "", "elif", "args", ".", "init", "==", "\"kaiming_normal\"", ":", "\n", "\n", "            ", "if", "args", ".", "scale_fan", ":", "\n", "                ", "fan", "=", "nn", ".", "init", ".", "_calculate_correct_fan", "(", "conv", ".", "weight", ",", "args", ".", "mode", ")", "\n", "fan", "=", "fan", "*", "(", "1", "-", "args", ".", "prune_rate", ")", "\n", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "args", ".", "nonlinearity", ")", "\n", "std", "=", "gain", "/", "math", ".", "sqrt", "(", "fan", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "conv", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "std", ")", "\n", "", "", "else", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "\n", "conv", ".", "weight", ",", "mode", "=", "args", ".", "mode", ",", "nonlinearity", "=", "args", ".", "nonlinearity", "\n", ")", "\n", "\n", "", "", "elif", "args", ".", "init", "==", "\"standard\"", ":", "\n", "            ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "conv", ".", "weight", ",", "a", "=", "math", ".", "sqrt", "(", "5", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"{args.init} is not an initialization option!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.builder.get_builder": [[154, 171], ["print", "print", "getattr", "getattr", "builder.Builder", "getattr", "print"], "function", ["None"], ["", "", "", "def", "get_builder", "(", ")", ":", "\n", "\n", "    ", "print", "(", "\"==> Conv Type: {}\"", ".", "format", "(", "args", ".", "conv_type", ")", ")", "\n", "print", "(", "\"==> BN Type: {}\"", ".", "format", "(", "args", ".", "bn_type", ")", ")", "\n", "\n", "conv_layer", "=", "getattr", "(", "utils", ".", "conv_type", ",", "args", ".", "conv_type", ")", "\n", "bn_layer", "=", "getattr", "(", "utils", ".", "bn_type", ",", "args", ".", "bn_type", ")", "\n", "\n", "if", "args", ".", "first_layer_type", "is", "not", "None", ":", "\n", "        ", "first_layer", "=", "getattr", "(", "utils", ".", "conv_type", ",", "args", ".", "first_layer_type", ")", "\n", "print", "(", "f\"==> First Layer Type {args.first_layer_type}\"", ")", "\n", "", "else", ":", "\n", "        ", "first_layer", "=", "None", "\n", "\n", "", "builder", "=", "Builder", "(", "conv_layer", "=", "conv_layer", ",", "bn_layer", "=", "bn_layer", ",", "first_layer", "=", "first_layer", ")", "\n", "\n", "return", "builder", "\n", "", ""]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.conv_type.STRConv.__init__": [[23, 33], ["torch.Conv2d.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "conv_type.initialize_sInit", "conv_type.initialize_sInit"], "methods", ["home.repos.pwc.inspect_result.RAIVNLab_STR.data.imagenet.H5DatasetOld.__init__", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.conv_type.initialize_sInit", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.conv_type.initialize_sInit"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "activation", "=", "torch", ".", "relu", "\n", "\n", "if", "parser_args", ".", "sparse_function", "==", "'sigmoid'", ":", "\n", "            ", "self", ".", "f", "=", "torch", ".", "sigmoid", "\n", "self", ".", "sparseThreshold", "=", "nn", ".", "Parameter", "(", "initialize_sInit", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "sparseThreshold", "=", "nn", ".", "Parameter", "(", "initialize_sInit", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.conv_type.STRConv.forward": [[34, 42], ["conv_type.sparseFunction", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d"], "methods", ["home.repos.pwc.inspect_result.RAIVNLab_STR.utils.conv_type.sparseFunction", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.builder.Builder.conv2d", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.builder.Builder.conv2d", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.builder.Builder.conv2d", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.builder.Builder.conv2d"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# In case STR is not training for the hyperparameters given in the paper, change sparseWeight to self.sparseWeight if it is a problem of backprop.", "\n", "# However, that should not be the case according to graph computation.", "\n", "        ", "sparseWeight", "=", "sparseFunction", "(", "self", ".", "weight", ",", "self", ".", "sparseThreshold", ",", "self", ".", "activation", ",", "self", ".", "f", ")", "\n", "x", "=", "F", ".", "conv2d", "(", "\n", "x", ",", "sparseWeight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", "\n", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.conv_type.STRConv.getSparsity": [[43, 48], ["conv_type.sparseFunction", "sparseFunction.detach().cpu", "sparseFunction.detach().cpu.numel", "f().item", "sparseFunction.detach", "sparseFunction.detach().cpu.mean().item", "f", "sparseFunction.detach().cpu.mean"], "methods", ["home.repos.pwc.inspect_result.RAIVNLab_STR.utils.conv_type.sparseFunction"], ["", "def", "getSparsity", "(", "self", ",", "f", "=", "torch", ".", "sigmoid", ")", ":", "\n", "        ", "sparseWeight", "=", "sparseFunction", "(", "self", ".", "weight", ",", "self", ".", "sparseThreshold", ",", "self", ".", "activation", ",", "self", ".", "f", ")", "\n", "temp", "=", "sparseWeight", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "temp", "[", "temp", "!=", "0", "]", "=", "1", "\n", "return", "(", "100", "-", "temp", ".", "mean", "(", ")", ".", "item", "(", ")", "*", "100", ")", ",", "temp", ".", "numel", "(", ")", ",", "f", "(", "self", ".", "sparseThreshold", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.conv_type.ChooseEdges.forward": [[50, 59], ["weight.clone", "weight.flatten().abs().sort", "int", "weight.clone.flatten", "weight.flatten().abs", "weight.numel", "weight.flatten"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "weight", ",", "prune_rate", ")", ":", "\n", "        ", "output", "=", "weight", ".", "clone", "(", ")", "\n", "_", ",", "idx", "=", "weight", ".", "flatten", "(", ")", ".", "abs", "(", ")", ".", "sort", "(", ")", "\n", "p", "=", "int", "(", "prune_rate", "*", "weight", ".", "numel", "(", ")", ")", "\n", "# flat_oup and output access the same memory.", "\n", "flat_oup", "=", "output", ".", "flatten", "(", ")", "\n", "flat_oup", "[", "idx", "[", ":", "p", "]", "]", "=", "0", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.conv_type.ChooseEdges.backward": [[60, 63], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "return", "grad_output", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.conv_type.DNWConv.__init__": [[65, 67], ["torch.Conv2d.__init__"], "methods", ["home.repos.pwc.inspect_result.RAIVNLab_STR.data.imagenet.H5DatasetOld.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.conv_type.DNWConv.set_prune_rate": [[68, 71], ["print"], "methods", ["None"], ["", "def", "set_prune_rate", "(", "self", ",", "prune_rate", ")", ":", "\n", "        ", "self", ".", "prune_rate", "=", "prune_rate", "\n", "print", "(", "f\"=> Setting prune rate to {prune_rate}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.conv_type.DNWConv.forward": [[72, 80], ["ChooseEdges.apply", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d"], "methods", ["home.repos.pwc.inspect_result.RAIVNLab_STR.utils.builder.Builder.conv2d", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.builder.Builder.conv2d", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.builder.Builder.conv2d", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.builder.Builder.conv2d"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "w", "=", "ChooseEdges", ".", "apply", "(", "self", ".", "weight", ",", "self", ".", "prune_rate", ")", "\n", "\n", "x", "=", "F", ".", "conv2d", "(", "\n", "x", ",", "w", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", "\n", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.conv_type.GMPConv.__init__": [[91, 93], ["torch.Conv2d.__init__"], "methods", ["home.repos.pwc.inspect_result.RAIVNLab_STR.data.imagenet.H5DatasetOld.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.conv_type.GMPConv.set_prune_rate": [[94, 98], ["print"], "methods", ["None"], ["", "def", "set_prune_rate", "(", "self", ",", "prune_rate", ")", ":", "\n", "        ", "self", ".", "prune_rate", "=", "prune_rate", "\n", "self", ".", "curr_prune_rate", "=", "0.0", "\n", "print", "(", "f\"=> Setting prune rate to {prune_rate}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.conv_type.GMPConv.set_curr_prune_rate": [[99, 101], ["None"], "methods", ["None"], ["", "def", "set_curr_prune_rate", "(", "self", ",", "curr_prune_rate", ")", ":", "\n", "        ", "self", ".", "curr_prune_rate", "=", "curr_prune_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.conv_type.GMPConv.forward": [[102, 109], ["conv_type.GMPChooseEdges", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d"], "methods", ["home.repos.pwc.inspect_result.RAIVNLab_STR.utils.conv_type.GMPChooseEdges", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.builder.Builder.conv2d", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.builder.Builder.conv2d", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.builder.Builder.conv2d", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.builder.Builder.conv2d"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "w", "=", "GMPChooseEdges", "(", "self", ".", "weight", ",", "self", ".", "curr_prune_rate", ")", "\n", "x", "=", "F", ".", "conv2d", "(", "\n", "x", ",", "w", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", "\n", ")", "\n", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.conv_type.sparseFunction": [[14, 16], ["torch.sign", "torch.sign", "torch.sign", "torch.sign", "activation", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "f"], "function", ["home.repos.pwc.inspect_result.RAIVNLab_STR.utils.builder.Builder.activation"], ["def", "sparseFunction", "(", "x", ",", "s", ",", "activation", "=", "torch", ".", "relu", ",", "f", "=", "torch", ".", "sigmoid", ")", ":", "\n", "    ", "return", "torch", ".", "sign", "(", "x", ")", "*", "activation", "(", "torch", ".", "abs", "(", "x", ")", "-", "f", "(", "s", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.conv_type.initialize_sInit": [[17, 21], ["torch.ones", "torch.ones", "torch.ones", "torch.ones"], "function", ["None"], ["", "def", "initialize_sInit", "(", ")", ":", "\n", "\n", "    ", "if", "parser_args", ".", "sInit_type", "==", "\"constant\"", ":", "\n", "        ", "return", "parser_args", ".", "sInit_value", "*", "torch", ".", "ones", "(", "[", "1", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.conv_type.GMPChooseEdges": [[81, 89], ["weight.clone", "weight.flatten().abs().sort", "int", "weight.clone.flatten", "weight.flatten().abs", "weight.numel", "weight.flatten"], "function", ["None"], ["", "", "def", "GMPChooseEdges", "(", "weight", ",", "prune_rate", ")", ":", "\n", "    ", "output", "=", "weight", ".", "clone", "(", ")", "\n", "_", ",", "idx", "=", "weight", ".", "flatten", "(", ")", ".", "abs", "(", ")", ".", "sort", "(", ")", "\n", "p", "=", "int", "(", "prune_rate", "*", "weight", ".", "numel", "(", ")", ")", "\n", "# flat_oup and output access the same memory.", "\n", "flat_oup", "=", "output", ".", "flatten", "(", ")", "\n", "flat_oup", "[", "idx", "[", ":", "p", "]", "]", "=", "0", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.eval_utils.accuracy": [[4, 19], ["torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "", "", ""]], "home.repos.pwc.inspect_result.RAIVNLab_STR.models.resnet.BasicBlock.__init__": [[11, 20], ["torch.Module.__init__", "builder.conv3x3", "builder.batchnorm", "builder.activation", "builder.conv3x3", "builder.batchnorm"], "methods", ["home.repos.pwc.inspect_result.RAIVNLab_STR.data.imagenet.H5DatasetOld.__init__", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.builder.Builder.activation", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.builder.Builder.batchnorm"], ["def", "__init__", "(", "self", ",", "builder", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "builder", ".", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "planes", ")", "\n", "self", ".", "relu", "=", "builder", ".", "activation", "(", ")", "\n", "self", ".", "conv2", "=", "builder", ".", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "builder", ".", "batchnorm", "(", "planes", ",", "last_bn", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.models.resnet.BasicBlock.forward": [[21, 42], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.relu", "resnet.BasicBlock.bn1", "resnet.BasicBlock.bn2", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "if", "self", ".", "bn1", "is", "not", "None", ":", "\n", "            ", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "if", "self", ".", "bn2", "is", "not", "None", ":", "\n", "            ", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.models.resnet.Bottleneck.__init__": [[51, 62], ["torch.Module.__init__", "builder.conv1x1", "builder.batchnorm", "builder.conv3x3", "builder.batchnorm", "builder.conv1x1", "builder.batchnorm", "builder.activation"], "methods", ["home.repos.pwc.inspect_result.RAIVNLab_STR.data.imagenet.H5DatasetOld.__init__", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.builder.Builder.activation"], ["def", "__init__", "(", "self", ",", "builder", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "builder", ".", "conv1x1", "(", "inplanes", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "builder", ".", "conv3x3", "(", "planes", ",", "planes", ",", "stride", "=", "stride", ")", "\n", "self", ".", "bn2", "=", "builder", ".", "batchnorm", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "builder", ".", "conv1x1", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "builder", ".", "batchnorm", "(", "planes", "*", "self", ".", "expansion", ",", "last_bn", "=", "True", ")", "\n", "self", ".", "relu", "=", "builder", ".", "activation", "(", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.models.resnet.Bottleneck.forward": [[63, 85], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.models.resnet.ResNet.__init__": [[91, 115], ["torch.Module.__init__", "builder.batchnorm", "builder.activation", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "print", "torch.Conv2d", "builder.conv7x7", "torch.Conv2d", "builder.conv1x1"], "methods", ["home.repos.pwc.inspect_result.RAIVNLab_STR.data.imagenet.H5DatasetOld.__init__", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.builder.Builder.activation", "home.repos.pwc.inspect_result.RAIVNLab_STR.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.RAIVNLab_STR.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.RAIVNLab_STR.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.RAIVNLab_STR.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.builder.Builder.conv7x7", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.builder.Builder.conv1x1"], ["    ", "def", "__init__", "(", "self", ",", "builder", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "args", ".", "first_layer_dense", ":", "\n", "            ", "print", "(", "\"FIRST LAYER DENSE!!!!\"", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "builder", ".", "conv7x7", "(", "3", ",", "64", ",", "stride", "=", "2", ",", "first_layer", "=", "True", ")", "\n", "\n", "", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "64", ")", "\n", "self", ".", "relu", "=", "builder", ".", "activation", "(", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "builder", ",", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "builder", ",", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "builder", ",", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "builder", ",", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "# self.fc = nn.Linear(512 * block.expansion, num_classes)", "\n", "if", "args", ".", "last_layer_dense", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "512", "*", "block", ".", "expansion", ",", "args", ".", "num_classes", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc", "=", "builder", ".", "conv1x1", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.models.resnet.ResNet._make_layer": [[116, 135], ["layers.append", "range", "torch.Sequential", "builder.conv1x1", "builder.batchnorm", "block", "layers.append", "torch.Sequential", "block"], "methods", ["home.repos.pwc.inspect_result.RAIVNLab_STR.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.builder.Builder.batchnorm"], ["", "", "def", "_make_layer", "(", "self", ",", "builder", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "dconv", "=", "builder", ".", "conv1x1", "(", "\n", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", "=", "stride", "\n", ")", "\n", "dbn", "=", "builder", ".", "batchnorm", "(", "planes", "*", "block", ".", "expansion", ")", "\n", "if", "dbn", "is", "not", "None", ":", "\n", "                ", "downsample", "=", "nn", ".", "Sequential", "(", "dconv", ",", "dbn", ")", "\n", "", "else", ":", "\n", "                ", "downsample", "=", "dconv", "\n", "\n", "", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "builder", ",", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "builder", ",", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.models.resnet.ResNet.forward": [[136, 153], ["resnet.ResNet.conv1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.avgpool", "resnet.ResNet.fc", "resnet.ResNet.view", "resnet.ResNet.bn1", "resnet.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "if", "self", ".", "bn1", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.models.resnet.ResNet18": [[156, 159], ["resnet.ResNet", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.RAIVNLab_STR.utils.builder.get_builder"], ["", "", "def", "ResNet18", "(", "pretrained", "=", "False", ")", ":", "\n", "# TODO: pretrained", "\n", "    ", "return", "ResNet", "(", "get_builder", "(", ")", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "1000", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.models.resnet.ResNet50": [[161, 164], ["resnet.ResNet", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.RAIVNLab_STR.utils.builder.get_builder"], ["", "def", "ResNet50", "(", "pretrained", "=", "False", ")", ":", "\n", "# TODO: pretrained", "\n", "    ", "return", "ResNet", "(", "get_builder", "(", ")", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "1000", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.RAIVNLab_STR.models.mobilenetv1.MobileNetV1.__init__": [[6, 46], ["torch.Module.__init__", "utils.builder.get_builder", "torch.Sequential", "utils.builder.get_builder.conv1x1", "torch.Sequential", "torch.Sequential", "mobilenetv1.MobileNetV1.__init__.conv_bn"], "methods", ["home.repos.pwc.inspect_result.RAIVNLab_STR.data.imagenet.H5DatasetOld.__init__", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.builder.get_builder", "home.repos.pwc.inspect_result.RAIVNLab_STR.utils.builder.Builder.conv1x1"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MobileNetV1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "builder", "=", "get_builder", "(", ")", "\n", "\n", "def", "conv_bn", "(", "inp", ",", "oup", ",", "stride", ")", ":", "\n", "            ", "return", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv2d", "(", "inp", ",", "oup", ",", "3", ",", "stride", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "", "def", "conv_dw", "(", "inp", ",", "oup", ",", "stride", ")", ":", "\n", "            ", "return", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv2d", "(", "inp", ",", "inp", ",", "3", ",", "stride", ",", "1", ",", "groups", "=", "inp", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "inp", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "builder", ".", "conv2d", "(", "inp", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "\n", "conv_bn", "(", "3", ",", "32", ",", "2", ")", ",", "\n", "conv_dw", "(", "32", ",", "64", ",", "1", ")", ",", "\n", "conv_dw", "(", "64", ",", "128", ",", "2", ")", ",", "\n", "conv_dw", "(", "128", ",", "128", ",", "1", ")", ",", "\n", "conv_dw", "(", "128", ",", "256", ",", "2", ")", ",", "\n", "conv_dw", "(", "256", ",", "256", ",", "1", ")", ",", "\n", "conv_dw", "(", "256", ",", "512", ",", "2", ")", ",", "\n", "conv_dw", "(", "512", ",", "512", ",", "1", ")", ",", "\n", "conv_dw", "(", "512", ",", "512", ",", "1", ")", ",", "\n", "conv_dw", "(", "512", ",", "512", ",", "1", ")", ",", "\n", "conv_dw", "(", "512", ",", "512", ",", "1", ")", ",", "\n", "conv_dw", "(", "512", ",", "512", ",", "1", ")", ",", "\n", "conv_dw", "(", "512", ",", "1024", ",", "2", ")", ",", "\n", "conv_dw", "(", "1024", ",", "1024", ",", "1", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "7", ")", ",", "\n", ")", "\n", "self", ".", "fc", "=", "builder", ".", "conv1x1", "(", "1024", ",", "1000", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.models.mobilenetv1.MobileNetV1.forward": [[47, 52], ["mobilenetv1.MobileNetV1.model", "mobilenetv1.MobileNetV1.fc", "x.view.view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "model", "(", "x", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "1000", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.data.imagenet.ImageNet.__init__": [[13, 62], ["super().__init__", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "torchvision.transforms.Normalize", "torchvision.datasets.ImageFolder", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.transforms.Compose", "torchvision.datasets.ImageFolder", "torchvision.transforms.Compose", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor"], "methods", ["home.repos.pwc.inspect_result.RAIVNLab_STR.data.imagenet.H5DatasetOld.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "ImageNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "data_root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "\"imagenet\"", ")", "\n", "\n", "use_cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n", "# Data loading code", "\n", "kwargs", "=", "{", "\"num_workers\"", ":", "args", ".", "workers", ",", "\"pin_memory\"", ":", "True", "}", "if", "use_cuda", "else", "{", "}", "\n", "\n", "# Data loading code", "\n", "traindir", "=", "os", ".", "path", ".", "join", "(", "data_root", ",", "\"train\"", ")", "\n", "valdir", "=", "os", ".", "path", ".", "join", "(", "data_root", ",", "\"val\"", ")", "\n", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", ")", "\n", "\n", "train_dataset", "=", "datasets", ".", "ImageFolder", "(", "\n", "traindir", ",", "\n", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", "\n", ")", ",", "\n", ")", "\n", "\n", "self", ".", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "**", "kwargs", "\n", ")", "\n", "\n", "self", ".", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "ImageFolder", "(", "\n", "valdir", ",", "\n", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", "\n", ")", ",", "\n", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "**", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.data.imagenet.TinyImageNet.__init__": [[65, 96], ["super().__init__", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "imagenet.H5DatasetOld", "imagenet.H5DatasetOld", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.transforms.ToPILImage", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor"], "methods", ["home.repos.pwc.inspect_result.RAIVNLab_STR.data.imagenet.H5DatasetOld.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "TinyImageNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "data_root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "\"tiny_imagenet\"", ")", "\n", "\n", "use_cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "kwargs", "=", "{", "'num_workers'", ":", "0", ",", "'pin_memory'", ":", "True", "}", "if", "use_cuda", "else", "{", "}", "\n", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", ")", "\n", "\n", "train_transforms", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "\n", "test_transforms", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "\n", "train_dataset", "=", "H5DatasetOld", "(", "data_root", "+", "'/train.h5'", ",", "transform", "=", "train_transforms", ")", "\n", "test_dataset", "=", "H5DatasetOld", "(", "data_root", "+", "'/val.h5'", ",", "transform", "=", "test_transforms", ")", "\n", "self", ".", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "**", "kwargs", "\n", ")", "\n", "self", ".", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "test_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "**", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.data.imagenet.H5Dataset.__init__": [[99, 103], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "h5_file", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "transform", "=", "transform", "\n", "self", ".", "dataFile", "=", "None", "\n", "self", ".", "h5_file", "=", "h5_file", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.data.imagenet.H5Dataset.__len__": [[104, 107], ["list", "len", "imagenet.H5Dataset.dataFile.keys"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "datasetNames", "=", "list", "(", "self", ".", "dataFile", ".", "keys", "(", ")", ")", "\n", "return", "len", "(", "self", ".", "dataFile", "[", "datasetNames", "[", "0", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.data.imagenet.H5Dataset.__getitem__": [[109, 117], ["h5py.File", "imagenet.H5Dataset.transform", "list", "list", "imagenet.H5Dataset.dataFile.keys", "imagenet.H5Dataset.dataFile.keys"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "dataFile", "is", "None", ":", "\n", "            ", "self", ".", "dataFile", "=", "h5py", ".", "File", "(", "self", ".", "h5_file", ",", "'r'", ")", "\n", "", "data", "=", "self", ".", "dataFile", "[", "list", "(", "self", ".", "dataFile", ".", "keys", "(", ")", ")", "[", "0", "]", "]", "[", "idx", "]", "\n", "label", "=", "self", ".", "dataFile", "[", "list", "(", "self", ".", "dataFile", ".", "keys", "(", ")", ")", "[", "1", "]", "]", "[", "idx", "]", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "data", "=", "self", ".", "transform", "(", "data", ")", "\n", "", "return", "(", "data", ",", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.data.imagenet.H5DatasetOld.__init__": [[119, 122], ["h5py.File"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "h5_file", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "transform", "=", "transform", "\n", "self", ".", "dataFile", "=", "h5py", ".", "File", "(", "h5_file", ",", "'r'", ")", "\n", "# self.h5_file = h5_file", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.data.imagenet.H5DatasetOld.__len__": [[124, 127], ["list", "len", "imagenet.H5DatasetOld.dataFile.keys"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "datasetNames", "=", "list", "(", "self", ".", "dataFile", ".", "keys", "(", ")", ")", "\n", "return", "len", "(", "self", ".", "dataFile", "[", "datasetNames", "[", "0", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.data.imagenet.H5DatasetOld.__getitem__": [[129, 137], ["imagenet.H5DatasetOld.transform", "list", "list", "imagenet.H5DatasetOld.dataFile.keys", "imagenet.H5DatasetOld.dataFile.keys"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "# if self.dataFile is None:", "\n", "#     self.dataFile = h5py.File(self.h5_file, 'r')", "\n", "        ", "data", "=", "self", ".", "dataFile", "[", "list", "(", "self", ".", "dataFile", ".", "keys", "(", ")", ")", "[", "0", "]", "]", "[", "idx", "]", "\n", "label", "=", "self", ".", "dataFile", "[", "list", "(", "self", ".", "dataFile", ".", "keys", "(", ")", ")", "[", "1", "]", "]", "[", "idx", "]", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "data", "=", "self", ".", "transform", "(", "data", ")", "\n", "", "return", "(", "data", ",", "label", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.RAIVNLab_STR.data.utils.one_batch_dataset": [[5, 23], ["print", "torch.randperm", "_OneBatchWrapper", "len", "len", "idx.item"], "function", ["None"], ["def", "one_batch_dataset", "(", "dataset", ",", "batch_size", ")", ":", "\n", "    ", "print", "(", "\"==> Grabbing a single batch\"", ")", "\n", "\n", "perm", "=", "torch", ".", "randperm", "(", "len", "(", "dataset", ")", ")", "\n", "\n", "one_batch", "=", "[", "dataset", "[", "idx", ".", "item", "(", ")", "]", "for", "idx", "in", "perm", "[", ":", "batch_size", "]", "]", "\n", "\n", "class", "_OneBatchWrapper", "(", "Dataset", ")", ":", "\n", "        ", "def", "__init__", "(", "self", ")", ":", "\n", "            ", "self", ".", "batch", "=", "one_batch", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "            ", "return", "self", ".", "batch", "[", "index", "]", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "            ", "return", "len", "(", "self", ".", "batch", ")", "\n", "\n", "", "", "return", "_OneBatchWrapper", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.RAIVNLab_STR.configs.parser.trim_preceding_hyphens": [[4, 10], ["None"], "function", ["None"], ["def", "trim_preceding_hyphens", "(", "st", ")", ":", "\n", "    ", "i", "=", "0", "\n", "while", "st", "[", "i", "]", "==", "\"-\"", ":", "\n", "        ", "i", "+=", "1", "\n", "\n", "", "return", "st", "[", "i", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.configs.parser.arg_to_varname": [[12, 17], ["parser.trim_preceding_hyphens", "st.replace.replace", "st.replace.split"], "function", ["home.repos.pwc.inspect_result.RAIVNLab_STR.configs.parser.trim_preceding_hyphens"], ["", "def", "arg_to_varname", "(", "st", ":", "str", ")", ":", "\n", "    ", "st", "=", "trim_preceding_hyphens", "(", "st", ")", "\n", "st", "=", "st", ".", "replace", "(", "\"-\"", ",", "\"_\"", ")", "\n", "\n", "return", "st", ".", "split", "(", "\"=\"", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.configs.parser.argv_to_vars": [[19, 26], ["arg.startswith", "var_names.append", "parser.arg_to_varname", "parser.arg_to_varname"], "function", ["home.repos.pwc.inspect_result.RAIVNLab_STR.configs.parser.arg_to_varname", "home.repos.pwc.inspect_result.RAIVNLab_STR.configs.parser.arg_to_varname"], ["", "def", "argv_to_vars", "(", "argv", ")", ":", "\n", "    ", "var_names", "=", "[", "]", "\n", "for", "arg", "in", "argv", ":", "\n", "        ", "if", "arg", ".", "startswith", "(", "\"-\"", ")", "and", "arg_to_varname", "(", "arg", ")", "!=", "\"config\"", ":", "\n", "            ", "var_names", ".", "append", "(", "arg_to_varname", "(", "arg", ")", ")", "\n", "\n", "", "", "return", "var_names", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_STR.configs.parser.produce_override_string": [[28, 41], ["getattr", "lines.append", "type", "lines.append", "lines.append", "str", "str", "str"], "function", ["None"], ["", "def", "produce_override_string", "(", "args", ",", "override_args", ")", ":", "\n", "    ", "lines", "=", "[", "]", "\n", "for", "v", "in", "override_args", ":", "\n", "        ", "if", "v", "!=", "\"multigpu\"", ":", "\n", "            ", "v_arg", "=", "getattr", "(", "args", ",", "v", ")", "\n", "if", "type", "(", "v_arg", ")", "in", "USABLE_TYPES", ":", "\n", "                ", "lines", ".", "append", "(", "v", "+", "\": \"", "+", "str", "(", "v_arg", ")", ")", "\n", "", "else", ":", "\n", "                ", "lines", ".", "append", "(", "v", "+", "\": \"", "+", "f'\"{str(v_arg)}\"'", ")", "\n", "", "", "else", ":", "\n", "            ", "lines", ".", "append", "(", "\"multigpu: \"", "+", "str", "(", "args", ".", "multigpu", ")", ")", "\n", "\n", "", "", "return", "\"\\n# ===== Overrided ===== #\\n\"", "+", "\"\\n\"", ".", "join", "(", "lines", ")", "\n", "", ""]]}