{"home.repos.pwc.inspect_result.THUDM_SelfKG.None.settings.JSONEncoder.default": [[54, 58], ["isinstance", "json.JSONEncoder.default", "str"], "methods", ["home.repos.pwc.inspect_result.THUDM_SelfKG.None.settings.JSONEncoder.default"], ["    ", "def", "default", "(", "self", ",", "o", ")", ":", "\n", "        ", "if", "isinstance", "(", "o", ",", "ObjectId", ")", ":", "\n", "            ", "return", "str", "(", "o", ")", "\n", "", "return", "json", ".", "JSONEncoder", ".", "default", "(", "self", ",", "o", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.None.settings.fix_seed": [[13, 19], ["random.seed", "str", "numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed_all"], "function", ["None"], ["def", "fix_seed", "(", "seed", "=", "37", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "# if you are using multi-GPU.", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.None.settings.get_all_jsons": [[62, 68], ["json_dict.clear", "os.walk", "file.endswith", "json_dict[].append", "os.path.join"], "function", ["None"], ["def", "get_all_jsons", "(", ")", ":", "\n", "    ", "json_dict", ".", "clear", "(", ")", "\n", "for", "path", ",", "dir_list", ",", "file_list", "in", "os", ".", "walk", "(", "PROJ_DIR", ")", ":", "\n", "        ", "for", "file", "in", "file_list", ":", "\n", "            ", "if", "file", ".", "endswith", "(", "'.json'", ")", ":", "\n", "                ", "json_dict", "[", "file", "]", ".", "append", "(", "join", "(", "path", ",", "file", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.None.settings.read_json": [[71, 87], ["settings.get_all_jsons", "json_dict.get", "filename.endswith", "RuntimeError", "len", "len", "RuntimeError", "json.load", "codecs.open", "file.endswith", "json.load", "os.path.join", "codecs.open"], "function", ["home.repos.pwc.inspect_result.THUDM_SelfKG.None.settings.get_all_jsons", "home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DBP15kRawLoader.DBP15kRawLoader.load", "home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DBP15kRawLoader.DBP15kRawLoader.load"], ["def", "read_json", "(", "filename", ",", "dir", "=", "None", ")", "->", "json", ":", "\n", "    ", "get_all_jsons", "(", ")", "\n", "if", "not", "filename", ".", "endswith", "(", "'.json'", ")", ":", "\n", "        ", "filename", "=", "filename", "+", "'.json'", "\n", "", "files", "=", "json_dict", ".", "get", "(", "filename", ")", "\n", "if", "files", "is", "None", "or", "len", "(", "files", ")", "==", "0", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"\\nread_json_error: [{}] does not exist.\"", ".", "format", "(", "filename", ")", ")", "\n", "", "elif", "len", "(", "files", ")", ">", "1", ":", "\n", "        ", "message", "=", "\"\\n\"", "\n", "for", "file", "in", "files", ":", "\n", "            ", "if", "dir", "and", "file", ".", "endswith", "(", "join", "(", "dir", ",", "filename", ")", ")", ":", "\n", "                ", "return", "json", ".", "load", "(", "codecs", ".", "open", "(", "file", ",", "'r'", ",", "'utf-8'", ")", ")", "\n", "", "message", "=", "message", "+", "file", "+", "\"\\n\"", "\n", "", "raise", "RuntimeError", "(", "message", "+", "\"read_json_error: duplicated [{}].\"", ".", "format", "(", "filename", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "json", ".", "load", "(", "codecs", ".", "open", "(", "files", "[", "0", "]", ",", "'r'", ",", "'utf-8'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.None.settings.write_json": [[89, 102], ["json.dump", "settings.get_all_jsons", "json.loads", "codecs.open", "e.encode", "os.path.join", "os.path.join", "print", "print", "input", "RuntimeError"], "function", ["home.repos.pwc.inspect_result.THUDM_SelfKG.None.settings.get_all_jsons"], ["", "", "def", "write_json", "(", "data", ",", "path", ",", "filename", ",", "overwrite", "=", "False", ",", "indent", "=", "None", ",", "jsonify", "=", "False", ")", ":", "\n", "    ", "if", "not", "overwrite", "and", "filename", "in", "json_dict", ":", "\n", "        ", "for", "file", "in", "json_dict", "[", "filename", "]", ":", "\n", "            ", "if", "file", "==", "join", "(", "path", ",", "filename", ")", ":", "\n", "                ", "print", "(", "\"\\nwrite_json_error: not allowed overwrite on [{}]\"", ".", "format", "(", "filename", ")", ")", "\n", "print", "(", "\"Do you want to overwrite on the file? (y/n)\\n\"", ")", "\n", "overwrite", "=", "input", "(", ")", "\n", "if", "overwrite", "!=", "'y'", "and", "overwrite", "!=", "'Y'", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\"The user terminate the write process.\"", ")", "\n", "", "", "", "", "if", "jsonify", ":", "\n", "        ", "data", "=", "json", ".", "loads", "(", "e", ".", "encode", "(", "data", ")", ")", "\n", "", "json", ".", "dump", "(", "data", ",", "codecs", ".", "open", "(", "join", "(", "path", ",", "filename", ")", ",", "'w'", ",", "'utf-8'", ")", ",", "ensure_ascii", "=", "False", ",", "indent", "=", "indent", ")", "\n", "get_all_jsons", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.None.settings.read_csv": [[104, 109], ["codecs.open", "csv.reader"], "function", ["None"], ["", "def", "read_csv", "(", "path", ")", ":", "\n", "    ", "f", "=", "codecs", ".", "open", "(", "path", ",", "'r'", ",", "'utf-8'", ")", "\n", "csv_reader", "=", "csv", ".", "reader", "(", "f", ")", "\n", "for", "row", "in", "csv_reader", ":", "\n", "        ", "yield", "row", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.None.settings.store_obj": [[112, 116], ["open", "pickle.dump", "open.close", "os.path.join"], "function", ["None"], ["", "", "def", "store_obj", "(", "dir", ",", "fname", ",", "obj", ")", ":", "\n", "    ", "f", "=", "open", "(", "join", "(", "dir", ",", "fname", ")", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "obj", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.None.settings.load_obj": [[119, 124], ["open", "pickle.load", "open.close", "os.path.join"], "function", ["home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DBP15kRawLoader.DBP15kRawLoader.load"], ["", "def", "load_obj", "(", "dir", ",", "fname", ")", ":", "\n", "    ", "f", "=", "open", "(", "join", "(", "dir", ",", "fname", ")", ",", "'rb'", ")", "\n", "obj", "=", "pickle", ".", "load", "(", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_SSL.LaBSEEncoder.__init__": [[90, 97], ["torch.Module.__init__", "AutoTokenizer.from_pretrained", "AutoModel.from_pretrained().to", "layers_LaBSE_SSL.NCESoftmaxLoss", "join", "AutoModel.from_pretrained", "join"], "methods", ["home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DBP15kRawLoader.DBP15kRawLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "device", ")", ":", "\n", "        ", "super", "(", "LaBSEEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "join", "(", "DATA_DIR", ",", "\"LaBSE\"", ")", ",", "do_lower_case", "=", "False", ")", "\n", "self", ".", "model", "=", "AutoModel", ".", "from_pretrained", "(", "join", "(", "DATA_DIR", ",", "\"LaBSE\"", ")", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "criterion", "=", "NCESoftmaxLoss", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_SSL.LaBSEEncoder.forward": [[98, 107], ["layers_LaBSE_SSL.LaBSEEncoder.tokenizer", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "layers_LaBSE_SSL.LaBSEEncoder.model", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "[].sum", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "sentences", "=", "batch", "\n", "#  text input must of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).", "\n", "tok_res", "=", "self", ".", "tokenizer", "(", "sentences", ",", "add_special_tokens", "=", "True", ",", "padding", "=", "'max_length'", ",", "max_length", "=", "MAX_LEN", ")", "\n", "input_ids", "=", "torch", ".", "LongTensor", "(", "[", "d", "[", ":", "MAX_LEN", "]", "for", "d", "in", "tok_res", "[", "'input_ids'", "]", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "token_type_ids", "=", "torch", ".", "LongTensor", "(", "tok_res", "[", "'token_type_ids'", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "attention_mask", "=", "torch", ".", "LongTensor", "(", "tok_res", "[", "'attention_mask'", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "output", "=", "self", ".", "model", "(", "input_ids", ",", "token_type_ids", "=", "token_type_ids", ",", "attention_mask", "=", "attention_mask", ")", "\n", "return", "F", ".", "normalize", "(", "output", "[", "0", "]", "[", ":", ",", "1", ":", "-", "1", ",", ":", "]", ".", "sum", "(", "dim", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_SSL.LaBSEEncoder.contrastive_loss": [[108, 116], ["torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "l_pos.view.view.view", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "logits.squeeze().contiguous.squeeze().contiguous.squeeze().contiguous", "layers_LaBSE_SSL.LaBSEEncoder.criterion", "pos_1.view", "pos_2.view", "pos_1.view", "neg_value.t", "logits.squeeze().contiguous.squeeze().contiguous.squeeze"], "methods", ["None"], ["", "def", "contrastive_loss", "(", "self", ",", "pos_1", ",", "pos_2", ",", "neg_value", ")", ":", "\n", "        ", "bsz", "=", "pos_1", ".", "shape", "[", "0", "]", "\n", "l_pos", "=", "torch", ".", "bmm", "(", "pos_1", ".", "view", "(", "bsz", ",", "1", ",", "-", "1", ")", ",", "pos_2", ".", "view", "(", "bsz", ",", "-", "1", ",", "1", ")", ")", "\n", "l_pos", "=", "l_pos", ".", "view", "(", "bsz", ",", "1", ")", "\n", "l_neg", "=", "torch", ".", "mm", "(", "pos_1", ".", "view", "(", "bsz", ",", "-", "1", ")", ",", "neg_value", ".", "t", "(", ")", ")", "\n", "logits", "=", "torch", ".", "cat", "(", "(", "l_pos", ",", "l_neg", ")", ",", "dim", "=", "1", ")", "\n", "logits", "=", "logits", ".", "squeeze", "(", ")", ".", "contiguous", "(", ")", "\n", "return", "self", ".", "criterion", "(", "logits", "/", "self", ".", "args", ".", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_SSL.LaBSEEncoder.contrastive_loss_st": [[117, 142], ["src_pos_1.to", "src_pos_2.to", "torch.cat.squeeze().contiguous", "torch.cat.squeeze().contiguous", "torch.cat.squeeze().contiguous", "torch.cat.squeeze().contiguous", "torch.cat.squeeze().contiguous", "torch.cat.squeeze().contiguous", "layers_LaBSE_SSL.LaBSEEncoder.criterion", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "src_pos_1.view", "src_pos_2.view", "src_pos_1.view", "src_neg.t", "tgt_pos_1.view", "tgt_pos_2.view", "tgt_pos_1.view", "tgt_neg.t", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat.squeeze", "torch.mm.unsqueeze", "torch.mm.unsqueeze", "torch.mm.unsqueeze", "torch.mm.unsqueeze", "torch.mm.unsqueeze", "torch.mm.unsqueeze", "torch.mm.unsqueeze", "torch.mm.unsqueeze", "torch.mm.unsqueeze", "torch.mm.unsqueeze", "torch.mm.unsqueeze", "torch.mm.unsqueeze"], "methods", ["None"], ["", "def", "contrastive_loss_st", "(", "self", ",", "src_pos_1", ",", "tgt_pos_1", ",", "src_pos_2", ",", "tgt_pos_2", ",", "src_neg", ",", "tgt_neg", ")", ":", "\n", "        ", "src_pos_1", ".", "to", "(", "self", ".", "device", ")", "\n", "src_pos_2", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "bsz_src", "=", "src_pos_1", ".", "shape", "[", "0", "]", "\n", "if", "bsz_src", ">", "0", ":", "\n", "            ", "src_pos_logits", "=", "torch", ".", "bmm", "(", "src_pos_1", ".", "view", "(", "bsz_src", ",", "1", ",", "-", "1", ")", ",", "src_pos_2", ".", "view", "(", "bsz_src", ",", "-", "1", ",", "1", ")", ")", "\n", "src_neg_logits", "=", "torch", ".", "mm", "(", "src_pos_1", ".", "view", "(", "bsz_src", ",", "-", "1", ")", ",", "src_neg", ".", "t", "(", ")", ")", "\n", "src_logits", "=", "torch", ".", "cat", "(", "(", "src_pos_logits", ",", "src_neg_logits", ".", "unsqueeze", "(", "1", ")", ")", ",", "dim", "=", "2", ")", "\n", "\n", "", "bsz_tgt", "=", "tgt_pos_1", ".", "shape", "[", "0", "]", "\n", "if", "bsz_tgt", ">", "0", ":", "\n", "            ", "tgt_pos_logits", "=", "torch", ".", "bmm", "(", "tgt_pos_1", ".", "view", "(", "bsz_tgt", ",", "1", ",", "-", "1", ")", ",", "tgt_pos_2", ".", "view", "(", "bsz_tgt", ",", "-", "1", ",", "1", ")", ")", "\n", "tgt_neg_logits", "=", "torch", ".", "mm", "(", "tgt_pos_1", ".", "view", "(", "bsz_tgt", ",", "-", "1", ")", ",", "tgt_neg", ".", "t", "(", ")", ")", "\n", "tgt_logits", "=", "torch", ".", "cat", "(", "(", "tgt_pos_logits", ",", "tgt_neg_logits", ".", "unsqueeze", "(", "1", ")", ")", ",", "dim", "=", "2", ")", "\n", "\n", "", "if", "bsz_src", ">", "0", "and", "bsz_tgt", ">", "0", ":", "\n", "            ", "logits", "=", "torch", ".", "cat", "(", "(", "src_logits", ",", "tgt_logits", ")", ",", "dim", "=", "0", ")", "\n", "", "elif", "bsz_src", ">", "0", ":", "\n", "            ", "logits", "=", "src_logits", "\n", "", "else", ":", "\n", "            ", "logits", "=", "tgt_logits", "\n", "\n", "", "logits", "=", "logits", ".", "squeeze", "(", ")", ".", "contiguous", "(", ")", "\n", "return", "self", ".", "criterion", "(", "logits", "/", "self", ".", "args", ".", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_SSL.LaBSEEncoder.update": [[143, 148], ["zip", "layers_LaBSE_SSL.LaBSEEncoder.eval", "layers_LaBSE_SSL.LaBSEEncoder.parameters", "network.parameters"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "network", ":", "nn", ".", "Module", ")", ":", "\n", "        ", "for", "key_param", ",", "query_param", "in", "zip", "(", "self", ".", "parameters", "(", ")", ",", "network", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "key_param", ".", "data", "*=", "self", ".", "args", ".", "momentum", "\n", "key_param", ".", "data", "+=", "(", "1", "-", "self", ".", "args", ".", "momentum", ")", "*", "query_param", ".", "data", "\n", "", "self", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_SSL.NCESoftmaxLoss.__init__": [[151, 155], ["torch.Module.__init__", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DBP15kRawLoader.DBP15kRawLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "device", ")", ":", "\n", "        ", "super", "(", "NCESoftmaxLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_SSL.NCESoftmaxLoss.forward": [[156, 162], ["x.squeeze.squeeze.squeeze", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "layers_LaBSE_SSL.NCESoftmaxLoss.criterion", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch_size", "=", "x", ".", "shape", "[", "0", "]", "\n", "x", "=", "x", ".", "squeeze", "(", ")", "\n", "label", "=", "torch", ".", "zeros", "(", "[", "batch_size", "]", ")", ".", "to", "(", "self", ".", "device", ")", ".", "long", "(", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "x", ",", "label", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_SSL.MLP_head.__init__": [[164, 171], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DBP15kRawLoader.DBP15kRawLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "embed_dim", ")", ":", "\n", "        ", "super", "(", "MLP_head", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "mlp_head", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "embed_dim", ",", "embed_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "embed_dim", ",", "embed_dim", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_SSL.MLP_head.forward": [[173, 176], ["layers_LaBSE_SSL.MLP_head.mlp_head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "mlp_head", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_SSL.BatchMultiHeadGraphAttention.__init__": [[179, 198], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "layers_LaBSE_SSL.BatchMultiHeadGraphAttention.register_parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DBP15kRawLoader.DBP15kRawLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_head", "=", "MULTI_HEAD_DIM", ",", "f_in", "=", "EMBED_DIM", ",", "f_out", "=", "ATTENTION_DIM", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "BatchMultiHeadGraphAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "w", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "n_head", ",", "f_in", ",", "f_out", ")", ")", "\n", "self", ".", "a_src", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "n_head", ",", "f_out", ",", "1", ")", ")", "\n", "self", ".", "a_dst", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "n_head", ",", "f_out", ",", "1", ")", ")", "\n", "\n", "self", ".", "leaky_relu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "# self.dropout = nn.Dropout(attn_dropout)", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "f_out", ")", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "bias", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "\n", "", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "w", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "a_src", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "a_dst", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_SSL.BatchMultiHeadGraphAttention.forward": [[199, 215], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "layers_LaBSE_SSL.BatchMultiHeadGraphAttention.leaky_relu", "layers_LaBSE_SSL.BatchMultiHeadGraphAttention.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "h.size", "h.unsqueeze", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.matmul.expand", "torch.matmul.expand", "torch.matmul.expand", "torch.matmul.expand", "torch.matmul.expand", "torch.matmul.expand", "torch.matmul.expand().permute", "torch.matmul.expand().permute", "torch.matmul.expand().permute", "torch.matmul.expand().permute", "torch.matmul.expand().permute", "torch.matmul.expand().permute", "torch.matmul.expand", "torch.matmul.expand", "torch.matmul.expand", "torch.matmul.expand", "torch.matmul.expand", "torch.matmul.expand"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "h", ")", ":", "\n", "        ", "bs", ",", "n", "=", "h", ".", "size", "(", ")", "[", ":", "2", "]", "# h is of size bs x n x f_in", "\n", "h_prime", "=", "torch", ".", "matmul", "(", "h", ".", "unsqueeze", "(", "1", ")", ",", "self", ".", "w", ")", "# bs x n_head x n x f_out", "\n", "attn_src", "=", "torch", ".", "matmul", "(", "torch", ".", "tanh", "(", "h_prime", ")", ",", "self", ".", "a_src", ")", "# bs x n_head x n x 1", "\n", "attn_dst", "=", "torch", ".", "matmul", "(", "torch", ".", "tanh", "(", "h_prime", ")", ",", "self", ".", "a_dst", ")", "# bs x n_head x n x 1", "\n", "attn", "=", "attn_src", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "-", "1", ",", "n", ")", "+", "attn_dst", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "-", "1", ",", "n", ")", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "\n", "2", ")", "# bs x n_head x n x n", "\n", "\n", "attn", "=", "self", ".", "leaky_relu", "(", "attn", ")", "\n", "attn", "=", "self", ".", "softmax", "(", "attn", ")", "# bs x n_head x n x n", "\n", "# attn = self.dropout(attn)", "\n", "output", "=", "torch", ".", "matmul", "(", "attn", ",", "h_prime", ")", "# bs x n_head x n x f_out", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "return", "output", "+", "self", ".", "bias", "\n", "", "else", ":", "\n", "            ", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_SSL.Trainer.__init__": [[218, 289], ["fix_seed", "argparse.ArgumentParser", "layers_LaBSE_SSL.parse_options", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "layers_LaBSE_SSL.Trainer.__init__.link_loader"], "methods", ["home.repos.pwc.inspect_result.THUDM_SelfKG.None.settings.fix_seed", "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_SSL_DWY.parse_options", "home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DBP15k.DBP15kLoader.link_loader"], ["    ", "def", "__init__", "(", "self", ",", "training", "=", "True", ",", "seed", "=", "37", ")", ":", "\n", "# # Set the random seed manually for reproducibility.", "\n", "        ", "fix_seed", "(", "seed", ")", "\n", "\n", "# set", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "self", ".", "args", "=", "parse_options", "(", "parser", ")", "\n", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "self", ".", "args", ".", "device", ")", "\n", "\n", "if", "self", ".", "args", ".", "multi", ":", "\n", "            ", "self", ".", "loader1", "=", "DBP15kRawLoader", "(", "self", ".", "args", ".", "language", ")", ".", "id_entity", "\n", "", "else", ":", "\n", "            ", "self", ".", "loader1", "=", "DBP15kLoader", "(", "self", ".", "args", ".", "language", ",", "'1'", ")", ".", "id_features_dict", "\n", "", "self", ".", "loader2", "=", "DBP15kLoader", "(", "self", ".", "args", ".", "language", ",", "'2'", ")", ".", "id_features_dict", "\n", "\n", "self", ".", "batch_str_1", "=", "[", "]", "\n", "self", ".", "batch_str_2", "=", "[", "]", "\n", "\n", "self", ".", "model", "=", "None", "\n", "self", ".", "iteration", "=", "0", "\n", "\n", "# get the linked entity ids", "\n", "def", "link_loader", "(", "mode", ",", "valid", "=", "False", ")", ":", "\n", "            ", "link", "=", "{", "}", "\n", "if", "valid", "==", "False", ":", "\n", "                ", "f", "=", "'test.ref'", "\n", "", "else", ":", "\n", "                ", "f", "=", "'valid.ref'", "\n", "", "link_data", "=", "pd", ".", "read_csv", "(", "join", "(", "join", "(", "DATA_DIR", ",", "'DBP15K'", ",", "mode", ")", ",", "f", ")", ",", "sep", "=", "'\\t'", ",", "header", "=", "None", ")", "\n", "link_data", ".", "columns", "=", "[", "'entity1'", ",", "'entity2'", "]", "\n", "entity1_id", "=", "link_data", "[", "'entity1'", "]", ".", "values", ".", "tolist", "(", ")", "\n", "entity2_id", "=", "link_data", "[", "'entity2'", "]", ".", "values", ".", "tolist", "(", ")", "\n", "for", "i", ",", "_", "in", "enumerate", "(", "entity1_id", ")", ":", "\n", "                ", "link", "[", "entity1_id", "[", "i", "]", "]", "=", "entity2_id", "[", "i", "]", "\n", "link", "[", "entity2_id", "[", "i", "]", "]", "=", "entity1_id", "[", "i", "]", "\n", "", "return", "link", "\n", "\n", "", "self", ".", "link", "=", "link_loader", "(", "self", ".", "args", ".", "language", ")", "\n", "self", ".", "val_link", "=", "link_loader", "(", "self", ".", "args", ".", "language", ",", "True", ")", "\n", "\n", "# queue for negative samples for 2 language sets", "\n", "self", ".", "neg_queue1", "=", "[", "]", "\n", "self", ".", "neg_queue2", "=", "[", "]", "\n", "\n", "# semantic embedding queue for negative samples for 2 language sets", "\n", "self", ".", "semantic_neg_queue1", "=", "[", "]", "\n", "self", ".", "semantic_neg_queue2", "=", "[", "]", "\n", "\n", "self", ".", "id_list1", "=", "[", "]", "\n", "\n", "if", "training", ":", "\n", "            ", "self", ".", "writer", "=", "SummaryWriter", "(", "\n", "log_dir", "=", "join", "(", "PROJ_DIR", ",", "'log'", ",", "self", ".", "args", ".", "model", ",", "self", ".", "args", ".", "model_language", ",", "self", ".", "args", ".", "time", ")", ",", "\n", "comment", "=", "self", ".", "args", ".", "time", ")", "\n", "\n", "self", ".", "model", "=", "LaBSEEncoder", "(", "self", ".", "args", ",", "self", ".", "device", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "_model", "=", "LaBSEEncoder", "(", "self", ".", "args", ",", "self", ".", "device", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "_model", ".", "update", "(", "self", ".", "model", ")", "\n", "self", ".", "lr", "=", "self", ".", "args", ".", "lr", "\n", "emb_dim", "=", "EMBED_DIM", "\n", "\n", "if", "self", ".", "args", ".", "semantic", ":", "\n", "                ", "emb_dim", "+=", "300", "\n", "\n", "", "self", ".", "mlp_head", "=", "None", "\n", "if", "self", ".", "args", ".", "mlp_head", ":", "\n", "                ", "self", ".", "mlp_head", "=", "MLP_head", "(", "emb_dim", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "", "self", ".", "iteration", "=", "0", "\n", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "params", "=", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_SSL.Trainer.save_model": [[290, 300], ["os.makedirs", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "join", "join", "str", "str", "str", "str", "str"], "methods", ["None"], ["", "", "def", "save_model", "(", "self", ",", "model", ",", "epoch", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "join", "(", "PROJ_DIR", ",", "'checkpoints'", ",", "self", ".", "args", ".", "model", ",", "self", ".", "args", ".", "model_language", ")", ",", "exist_ok", "=", "True", ")", "\n", "torch", ".", "save", "(", "model", ",", "join", "(", "PROJ_DIR", ",", "'checkpoints'", ",", "self", ".", "args", ".", "model", ",", "self", ".", "args", ".", "model_language", ",", "\n", "\"model\"", "\n", "+", "\"_neighbor_\"", "+", "str", "(", "self", ".", "args", ".", "neighbor", ")", "\n", "+", "\"_semantic_\"", "+", "str", "(", "self", ".", "args", ".", "semantic", ")", "\n", "+", "\"_epoch_\"", "+", "str", "(", "epoch", ")", "\n", "+", "\"_batch_size_\"", "+", "str", "(", "BATCH_SIZE", ")", "\n", "+", "\"_neg_queue_len_\"", "+", "str", "(", "self", ".", "args", ".", "queue_length", "-", "1", ")", "\n", "+", "'.ckpt'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_SSL.Trainer.evaluate": [[301, 346], ["print", "enumerate", "enumerate", "print", "layers_LaBSE_SSL.Trainer.evaluate.cal_hit"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ",", "step", ")", ":", "\n", "        ", "print", "(", "\"Evaluate at epoch {}...\"", ".", "format", "(", "step", ")", ")", "\n", "ids_1", ",", "ids_2", ",", "vector_1", ",", "vector_2", "=", "list", "(", ")", ",", "list", "(", ")", ",", "list", "(", ")", ",", "list", "(", ")", "\n", "\n", "self", ".", "inv1", ",", "self", ".", "inv2", "=", "dict", "(", ")", ",", "dict", "(", ")", "\n", "self", ".", "idx2entid_1", ",", "self", ".", "idx2entid_2", "=", "dict", "(", ")", ",", "dict", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "model", ".", "eval", "(", ")", "\n", "for", "sample_id_1", ",", "(", "id_data_1", ",", "ent_name_1", ")", "in", "tqdm", "(", "enumerate", "(", "self", ".", "batch_str_1", ")", ")", ":", "\n", "                ", "entity_vector_1", "=", "self", ".", "model", "(", "ent_name_1", ")", ".", "squeeze", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "ids_1", ".", "extend", "(", "id_data_1", ")", "\n", "vector_1", ".", "append", "(", "entity_vector_1", ")", "\n", "\n", "", "for", "sample_id_2", ",", "(", "id_data_2", ",", "ent_name_2", ")", "in", "tqdm", "(", "enumerate", "(", "self", ".", "batch_str_2", ")", ")", ":", "\n", "                ", "entity_vector_2", "=", "self", ".", "model", "(", "ent_name_2", ")", ".", "squeeze", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "ids_2", ".", "extend", "(", "id_data_2", ")", "\n", "vector_2", ".", "append", "(", "entity_vector_2", ")", "\n", "\n", "\n", "", "", "for", "idx", ",", "_id", "in", "enumerate", "(", "ids_1", ")", ":", "\n", "            ", "self", ".", "inv1", "[", "_id", "]", "=", "idx", "\n", "", "for", "idx", ",", "_id", "in", "enumerate", "(", "ids_2", ")", ":", "\n", "            ", "self", ".", "inv2", "[", "_id", "]", "=", "idx", "\n", "", "def", "cal_hit", "(", "v1", ",", "v2", ",", "link", ")", ":", "\n", "            ", "source", "=", "[", "_id", "for", "_id", "in", "ids_1", "if", "_id", "in", "link", "]", "\n", "target", "=", "np", ".", "array", "(", "\n", "[", "self", ".", "inv2", "[", "link", "[", "_id", "]", "]", "if", "link", "[", "_id", "]", "in", "self", ".", "inv2", "else", "99999", "for", "_id", "in", "source", "]", ")", "\n", "src_idx", "=", "[", "idx", "for", "idx", "in", "range", "(", "len", "(", "ids_1", ")", ")", "if", "ids_1", "[", "idx", "]", "in", "link", "]", "\n", "v1", "=", "np", ".", "concatenate", "(", "tuple", "(", "v1", ")", ",", "axis", "=", "0", ")", "[", "src_idx", ",", ":", "]", "\n", "v2", "=", "np", ".", "concatenate", "(", "tuple", "(", "v2", ")", ",", "axis", "=", "0", ")", "\n", "index", "=", "faiss", ".", "IndexFlatL2", "(", "v2", ".", "shape", "[", "1", "]", ")", "\n", "index", ".", "add", "(", "np", ".", "ascontiguousarray", "(", "v2", ")", ")", "\n", "D", ",", "I", "=", "index", ".", "search", "(", "np", ".", "ascontiguousarray", "(", "v1", ")", ",", "10", ")", "\n", "hit1", "=", "(", "I", "[", ":", ",", "0", "]", "==", "target", ")", ".", "astype", "(", "np", ".", "int32", ")", ".", "sum", "(", ")", "/", "len", "(", "source", ")", "\n", "hit10", "=", "(", "I", "==", "target", "[", ":", ",", "np", ".", "newaxis", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", ".", "sum", "(", ")", "/", "len", "(", "source", ")", "\n", "print", "(", "\"#Entity:\"", ",", "len", "(", "source", ")", ")", "\n", "print", "(", "\"Hit@1: \"", ",", "round", "(", "hit1", ",", "4", ")", ")", "\n", "print", "(", "\"Hit@10:\"", ",", "round", "(", "hit10", ",", "4", ")", ")", "\n", "return", "hit1", ",", "hit10", "\n", "", "print", "(", "'========Validation========'", ")", "\n", "hit1_valid", ",", "hit10_valid", "=", "cal_hit", "(", "vector_1", ",", "vector_2", ",", "self", ".", "val_link", ")", "\n", "print", "(", "'===========Test==========='", ")", "\n", "hit1_test", ",", "hit10_test", "=", "cal_hit", "(", "vector_1", ",", "vector_2", ",", "self", ".", "link", ")", "\n", "return", "hit1_valid", ",", "hit10_valid", ",", "hit1_test", ",", "hit10_test", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_SSL.Trainer.train": [[347, 478], ["enumerate", "layers_LaBSE_SSL.Trainer.batch_str_1.append", "enumerate", "layers_LaBSE_SSL.Trainer.batch_str_2.append", "layers_LaBSE_SSL.Trainer.evaluate", "range", "range", "layers_LaBSE_SSL.Trainer.loader1.items", "batch[].append", "batch[].append", "layers_LaBSE_SSL.Trainer.loader2.items", "batch[].append", "batch[].append", "all_data_batches.append", "enumerate", "enumerate", "random.shuffle", "layers_LaBSE_SSL.adjust_learning_rate", "tqdm", "layers_LaBSE_SSL.Trainer.save_model", "layers_LaBSE_SSL.Trainer.evaluate", "print", "print", "print", "print", "print", "layers_LaBSE_SSL.Trainer.batch_str_1.append", "layers_LaBSE_SSL.Trainer.batch_str_2.append", "all_data_batches[].append", "all_data_batches[].append", "enumerate", "layers_LaBSE_SSL.Trainer.optimizer.zero_grad", "layers_LaBSE_SSL.Trainer.model", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "layers_LaBSE_SSL.Trainer.model.contrastive_loss", "layers_LaBSE_SSL.Trainer.writer.add_scalar", "layers_LaBSE_SSL.Trainer.backward", "layers_LaBSE_SSL.Trainer.optimizer.step", "layers_LaBSE_SSL.Trainer._model.update", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "layers_LaBSE_SSL.Trainer._model.eval", "layers_LaBSE_SSL.Trainer._model", "enumerate", "join", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "layers_LaBSE_SSL.Trainer.neg_queue1.append", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "layers_LaBSE_SSL.Trainer.neg_queue2.append", "len", "neg_value_list.append", "layers_LaBSE_SSL.Trainer._model", "layers_LaBSE_SSL.Trainer.detach().cpu", "layers_LaBSE_SSL.Trainer.detach"], "methods", ["home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_SSL_DWY.Trainer.evaluate", "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_SSL_DWY.adjust_learning_rate", "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_SSL_DWY.Trainer.save_model", "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_SSL_DWY.Trainer.evaluate", "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_SSL_DWY.LaBSEEncoder.contrastive_loss", "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_SSL_DWY.LaBSEEncoder.update"], ["", "def", "train", "(", "self", ",", "start", "=", "0", ")", ":", "\n", "        ", "batch_size", "=", "self", ".", "args", ".", "batch_size", "\n", "batch", "=", "[", "[", "]", ",", "[", "]", "]", "\n", "for", "i", ",", "(", "_id", ",", "_ent_name", ")", "in", "enumerate", "(", "self", ".", "loader1", ".", "items", "(", ")", ")", ":", "\n", "            ", "batch", "[", "0", "]", ".", "append", "(", "_id", ")", "\n", "batch", "[", "1", "]", ".", "append", "(", "_ent_name", ")", "\n", "if", "(", "i", "+", "1", ")", "%", "batch_size", "==", "0", ":", "\n", "                ", "self", ".", "batch_str_1", ".", "append", "(", "batch", ")", "\n", "batch", "=", "[", "[", "]", ",", "[", "]", "]", "\n", "", "", "self", ".", "batch_str_1", ".", "append", "(", "batch", ")", "\n", "\n", "batch", "=", "[", "[", "]", ",", "[", "]", "]", "\n", "for", "i", ",", "(", "_id", ",", "_ent_name", ")", "in", "enumerate", "(", "self", ".", "loader2", ".", "items", "(", ")", ")", ":", "\n", "            ", "batch", "[", "0", "]", ".", "append", "(", "_id", ")", "\n", "batch", "[", "1", "]", ".", "append", "(", "_ent_name", ")", "\n", "if", "(", "i", "+", "1", ")", "%", "batch_size", "==", "0", ":", "\n", "                ", "self", ".", "batch_str_2", ".", "append", "(", "batch", ")", "\n", "batch", "=", "[", "[", "]", ",", "[", "]", "]", "\n", "", "", "self", ".", "batch_str_2", ".", "append", "(", "batch", ")", "\n", "\n", "self", ".", "evaluate", "(", "0", ")", "\n", "\n", "all_data_batches", "=", "[", "]", "\n", "\n", "for", "epoch", "in", "range", "(", "start", ",", "self", ".", "args", ".", "epoch", ")", ":", "\n", "            ", "all_data_batches", ".", "append", "(", "[", "]", ")", "\n", "for", "batch_id", ",", "(", "id_data_1", ",", "ent_name_1", ")", "in", "enumerate", "(", "self", ".", "batch_str_1", ")", ":", "\n", "                ", "all_data_batches", "[", "epoch", "]", ".", "append", "(", "[", "1", ",", "ent_name_1", ",", "id_data_1", "]", ")", "\n", "", "for", "batch_id", ",", "(", "id_data_2", ",", "ent_name_2", ")", "in", "enumerate", "(", "self", ".", "batch_str_2", ")", ":", "\n", "                ", "all_data_batches", "[", "epoch", "]", ".", "append", "(", "[", "2", ",", "ent_name_2", ",", "id_data_2", "]", ")", "\n", "", "random", ".", "shuffle", "(", "all_data_batches", "[", "epoch", "]", ")", "\n", "\n", "", "neg_queue", "=", "[", "]", "\n", "semantic_neg_queue", "=", "[", "]", "\n", "\n", "best_hit1_valid_epoch", "=", "0", "\n", "best_hit10_valid_epoch", "=", "0", "\n", "best_hit1_test_epoch", "=", "0", "\n", "best_hit10_test_epoch", "=", "0", "\n", "best_hit1_valid", "=", "0", "\n", "best_hit10_valid", "=", "0", "\n", "best_hit1_valid_hit10", "=", "0", "\n", "best_hit10_valid_hit1", "=", "0", "\n", "best_hit1_test", "=", "0", "\n", "best_hit10_test", "=", "0", "\n", "best_hit1_test_hit10", "=", "0", "\n", "best_hit10_test_hit1", "=", "0", "\n", "for", "epoch", "in", "range", "(", "start", ",", "self", ".", "args", ".", "epoch", ")", ":", "\n", "            ", "adjust_learning_rate", "(", "self", ".", "optimizer", ",", "epoch", ",", "self", ".", "lr", ")", "\n", "pos_token", "=", "None", "\n", "for", "batch_id", ",", "(", "language_id", ",", "token_data", ",", "id_data", ")", "in", "tqdm", "(", "enumerate", "(", "all_data_batches", "[", "epoch", "]", ")", ")", ":", "\n", "                ", "if", "language_id", "==", "1", ":", "\n", "                    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "self", ".", "neg_queue1", ".", "append", "(", "token_data", ")", "\n", "\n", "", "if", "len", "(", "self", ".", "neg_queue1", ")", "==", "self", ".", "args", ".", "queue_length", "+", "1", ":", "\n", "                        ", "pos_token", "=", "self", ".", "neg_queue1", "[", "0", "]", "\n", "self", ".", "neg_queue1", "=", "self", ".", "neg_queue1", "[", "1", ":", "]", "\n", "neg_queue", "=", "self", ".", "neg_queue1", "\n", "", "else", ":", "\n", "                        ", "continue", "\n", "\n", "", "", "else", ":", "\n", "                    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "self", ".", "neg_queue2", ".", "append", "(", "token_data", ")", "\n", "\n", "", "if", "len", "(", "self", ".", "neg_queue2", ")", "==", "self", ".", "args", ".", "queue_length", "+", "1", ":", "\n", "                        ", "pos_token", "=", "self", ".", "neg_queue2", "[", "0", "]", "\n", "self", ".", "neg_queue2", "=", "self", ".", "neg_queue2", "[", "1", ":", "]", "\n", "neg_queue", "=", "self", ".", "neg_queue2", "\n", "", "else", ":", "\n", "                        ", "continue", "\n", "\n", "# implement queue", "\n", "\n", "", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "pos_1", "=", "self", ".", "model", "(", "pos_token", ")", "\n", "\n", "neg_value_list", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "self", ".", "_model", ".", "eval", "(", ")", "\n", "pos_2", "=", "self", ".", "_model", "(", "pos_token", ")", "\n", "\n", "# the first batch is not negative samples", "\n", "for", "i", ",", "neg", "in", "enumerate", "(", "neg_queue", ")", ":", "\n", "                        ", "neg_value_list", ".", "append", "(", "self", ".", "_model", "(", "neg", ")", ")", "\n", "\n", "", "", "neg_value", "=", "torch", ".", "cat", "(", "neg_value_list", ",", "0", ")", "\n", "\n", "# contrastive loss", "\n", "contrastive_loss", "=", "self", ".", "model", ".", "contrastive_loss", "(", "pos_1", ",", "pos_2", ",", "neg_value", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "join", "(", "self", ".", "args", ".", "model", ",", "'contrastive_loss'", ")", ",", "contrastive_loss", ".", "data", ",", "\n", "self", ".", "iteration", ")", "\n", "\n", "self", ".", "iteration", "+=", "1", "\n", "\n", "contrastive_loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "batch_id", "%", "200", "==", "0", ":", "\n", "                    ", "print", "(", "'epoch: {} batch: {} loss: {}'", ".", "format", "(", "epoch", ",", "batch_id", ",", "\n", "contrastive_loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "data", "/", "self", ".", "args", ".", "batch_size", ")", ")", "\n", "# update", "\n", "", "self", ".", "_model", ".", "update", "(", "self", ".", "model", ")", "\n", "\n", "", "self", ".", "save_model", "(", "self", ".", "model", ",", "epoch", ")", "\n", "hit1_valid", ",", "hit10_valid", ",", "hit1_test", ",", "hit10_test", "=", "self", ".", "evaluate", "(", "epoch", ")", "\n", "if", "hit1_valid", ">", "best_hit1_valid", ":", "\n", "                ", "best_hit1_valid", "=", "hit1_valid", "\n", "best_hit1_valid_hit10", "=", "hit10_valid", "\n", "best_hit1_valid_epoch", "=", "epoch", "\n", "", "if", "hit10_valid", ">", "best_hit10_valid", ":", "\n", "                ", "best_hit10_valid", "=", "hit10_valid", "\n", "best_hit10_valid_hit1", "=", "hit1_valid", "\n", "best_hit10_valid_epoch", "=", "epoch", "\n", "\n", "", "if", "hit1_test", ">", "best_hit1_test", ":", "\n", "                ", "best_hit1_test", "=", "hit1_test", "\n", "best_hit1_test_hit10", "=", "hit10_test", "\n", "best_hit1_test_epoch", "=", "epoch", "\n", "", "if", "hit10_test", ">", "best_hit10_test", ":", "\n", "                ", "best_hit10_test", "=", "hit10_test", "\n", "best_hit10_test_hit1", "=", "hit1_test", "\n", "best_hit10_test_epoch", "=", "epoch", "\n", "", "print", "(", "'Best Valid Hit@1  = {}({}) at epoch {}'", ".", "format", "(", "best_hit1_valid", ",", "best_hit1_valid_hit10", ",", "best_hit1_valid_epoch", ")", ")", "\n", "print", "(", "'Best Valid Hit@10 = {}({}) at epoch {}'", ".", "format", "(", "best_hit10_valid", ",", "best_hit10_valid_hit1", ",", "best_hit10_valid_epoch", ")", ")", "\n", "print", "(", "'Best Test  Hit@1  = {}({}) at epoch {}'", ".", "format", "(", "best_hit1_test", ",", "best_hit1_test_hit10", ",", "best_hit1_test_epoch", ")", ")", "\n", "print", "(", "'Best Test  Hit@10 = {}({}) at epoch {}'", ".", "format", "(", "best_hit10_test", ",", "best_hit10_test_hit1", ",", "best_hit10_test_epoch", ")", ")", "\n", "print", "(", "\"====================================\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_SSL.parse_options": [[52, 81], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.parse_args", "datetime.datetime.now().strftime", "datetime.datetime.now"], "function", ["None"], ["def", "parse_options", "(", "parser", ")", ":", "\n", "    ", "parser", ".", "add_argument", "(", "'--device'", ",", "type", "=", "str", ",", "default", "=", "'cuda:0'", ")", "\n", "parser", ".", "add_argument", "(", "'--time'", ",", "type", "=", "str", ",", "default", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y%m%d%H%M%S\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--language'", ",", "type", "=", "str", ",", "default", "=", "'zh_en'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_language'", ",", "type", "=", "str", ",", "default", "=", "'zh_en'", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'LaBSE'", ")", "\n", "# parser.add_argument('--model_kind_name', type=str, default=\"model_attention_\")", "\n", "\n", "# CNN hyperparameter", "\n", "parser", ".", "add_argument", "(", "'--kernel_sizes'", ",", "type", "=", "tuple", ",", "default", "=", "(", "3", ",", "4", ",", "5", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--filter_num'", ",", "type", "=", "int", ",", "default", "=", "100", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--norm'", ",", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--semantic'", ",", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--mlp_head'", ",", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--neighbor'", ",", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--same_embedding'", ",", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--multi'", ",", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--epoch'", ",", "type", "=", "int", ",", "default", "=", "300", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "parser", ".", "add_argument", "(", "'--queue_length'", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--t'", ",", "type", "=", "float", ",", "default", "=", "0.08", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.9999", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "1e-4", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "type", "=", "float", ",", "default", "=", "0.3", ")", "\n", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_SSL.adjust_learning_rate": [[82, 87], ["None"], "function", ["None"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "lr", ")", ":", "\n", "    ", "if", "(", "epoch", "+", "1", ")", "%", "10", "==", "0", ":", "\n", "        ", "lr", "*=", "0.5", "\n", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_neighbor.NCESoftmaxLoss.__init__": [[62, 66], ["torch.Module.__init__", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DBP15kRawLoader.DBP15kRawLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "device", ")", ":", "\n", "        ", "super", "(", "NCESoftmaxLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_neighbor.NCESoftmaxLoss.forward": [[67, 73], ["x.squeeze.squeeze.squeeze", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "layers_LaBSE_neighbor.NCESoftmaxLoss.criterion", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch_size", "=", "x", ".", "shape", "[", "0", "]", "\n", "x", "=", "x", ".", "squeeze", "(", ")", "\n", "label", "=", "torch", ".", "zeros", "(", "[", "batch_size", "]", ")", ".", "to", "(", "self", ".", "device", ")", ".", "long", "(", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "x", ",", "label", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_neighbor.MyEmbedder.__init__": [[76, 94], ["ord", "torch.Module.__init__", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "layers_LaBSE_neighbor.BatchMultiHeadGraphAttention", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers_LaBSE_neighbor.NCESoftmaxLoss", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DBP15kRawLoader.DBP15kRawLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "vocab_size", ",", "padding", "=", "ord", "(", "' '", ")", ")", ":", "\n", "        ", "super", "(", "MyEmbedder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "args", "=", "args", "\n", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "self", ".", "args", ".", "device", ")", "\n", "\n", "self", ".", "attn", "=", "BatchMultiHeadGraphAttention", "(", "self", ".", "device", ",", "self", ".", "args", ")", "\n", "\n", "self", ".", "attn_mlp", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "LaBSE_DIM", "*", "2", ",", "LaBSE_DIM", ")", ",", "\n", ")", "\n", "\n", "# loss", "\n", "self", ".", "criterion", "=", "NCESoftmaxLoss", "(", "self", ".", "device", ")", "\n", "\n", "# batch queue", "\n", "self", ".", "batch_queue", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_neighbor.MyEmbedder.contrastive_loss": [[95, 103], ["torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "l_pos.view.view.view", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "logits.squeeze().contiguous.squeeze().contiguous.squeeze().contiguous", "layers_LaBSE_neighbor.MyEmbedder.criterion", "pos_1.view", "pos_2.view", "pos_1.view", "neg_value.t", "logits.squeeze().contiguous.squeeze().contiguous.squeeze"], "methods", ["None"], ["", "def", "contrastive_loss", "(", "self", ",", "pos_1", ",", "pos_2", ",", "neg_value", ")", ":", "\n", "        ", "bsz", "=", "pos_1", ".", "shape", "[", "0", "]", "\n", "l_pos", "=", "torch", ".", "bmm", "(", "pos_1", ".", "view", "(", "bsz", ",", "1", ",", "-", "1", ")", ",", "pos_2", ".", "view", "(", "bsz", ",", "-", "1", ",", "1", ")", ")", "\n", "l_pos", "=", "l_pos", ".", "view", "(", "bsz", ",", "1", ")", "\n", "l_neg", "=", "torch", ".", "mm", "(", "pos_1", ".", "view", "(", "bsz", ",", "-", "1", ")", ",", "neg_value", ".", "t", "(", ")", ")", "\n", "logits", "=", "torch", ".", "cat", "(", "(", "l_pos", ",", "l_neg", ")", ",", "dim", "=", "1", ")", "\n", "logits", "=", "logits", ".", "squeeze", "(", ")", ".", "contiguous", "(", ")", "\n", "return", "self", ".", "criterion", "(", "logits", "/", "self", ".", "args", ".", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_neighbor.MyEmbedder.update": [[104, 109], ["zip", "layers_LaBSE_neighbor.MyEmbedder.eval", "layers_LaBSE_neighbor.MyEmbedder.parameters", "network.parameters"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "network", ":", "nn", ".", "Module", ")", ":", "\n", "        ", "for", "key_param", ",", "query_param", "in", "zip", "(", "self", ".", "parameters", "(", ")", ",", "network", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "key_param", ".", "data", "*=", "self", ".", "args", ".", "momentum", "\n", "key_param", ".", "data", "+=", "(", "1", "-", "self", ".", "args", ".", "momentum", ")", "*", "query_param", ".", "data", "\n", "", "self", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_neighbor.MyEmbedder.forward": [[110, 136], ["batch.to.to.to", "batch_in[].to", "batch_in.to", "range", "layers_LaBSE_neighbor.MyEmbedder.attn().squeeze", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "layers_LaBSE_neighbor.MyEmbedder.attn_mlp", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "layers_LaBSE_neighbor.MyEmbedder.attn", "adj.bool"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "batch", "=", "batch", ".", "to", "(", "self", ".", "device", ")", "\n", "batch_in", "=", "batch", "[", ":", ",", ":", ",", ":", "LaBSE_DIM", "]", "\n", "adj", "=", "batch", "[", ":", ",", ":", ",", "LaBSE_DIM", ":", "]", "\n", "\n", "center", "=", "batch_in", "[", ":", ",", "0", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "center_neigh", "=", "batch_in", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "args", ".", "gat_num", ")", ":", "\n", "            ", "center_neigh", "=", "self", ".", "attn", "(", "center_neigh", ",", "adj", ".", "bool", "(", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "", "center_neigh", "=", "center_neigh", "[", ":", ",", "0", "]", "\n", "\n", "if", "self", ".", "args", ".", "center_norm", ":", "\n", "            ", "center", "=", "F", ".", "normalize", "(", "center", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "", "if", "self", ".", "args", ".", "neighbor_norm", ":", "\n", "            ", "center_neigh", "=", "F", ".", "normalize", "(", "center_neigh", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "", "if", "self", ".", "args", ".", "combine", ":", "\n", "            ", "out_hat", "=", "torch", ".", "cat", "(", "(", "center", ",", "center_neigh", ")", ",", "dim", "=", "1", ")", "\n", "out_hat", "=", "self", ".", "attn_mlp", "(", "out_hat", ")", "\n", "if", "self", ".", "args", ".", "emb_norm", ":", "\n", "                ", "out_hat", "=", "F", ".", "normalize", "(", "out_hat", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "", "", "else", ":", "\n", "            ", "out_hat", "=", "center_neigh", "\n", "\n", "", "return", "out_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_neighbor.BatchMultiHeadGraphAttention.__init__": [[139, 159], ["torch.Module.__init__", "Parameter", "Parameter", "Parameter", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "Parameter", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "layers_LaBSE_neighbor.BatchMultiHeadGraphAttention.register_parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DBP15kRawLoader.DBP15kRawLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "device", ",", "args", ",", "n_head", "=", "MULTI_HEAD_DIM", ",", "f_in", "=", "LaBSE_DIM", ",", "f_out", "=", "LaBSE_DIM", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "BatchMultiHeadGraphAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "w", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "n_head", ",", "f_in", ",", "f_out", ")", ")", "\n", "self", ".", "a_src", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "n_head", ",", "f_out", ",", "1", ")", ")", "\n", "self", ".", "a_dst", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "n_head", ",", "f_out", ",", "1", ")", ")", "\n", "\n", "self", ".", "leaky_relu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "args", ".", "dropout", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "f_out", ")", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "bias", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "\n", "", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "w", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "a_src", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "a_dst", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_neighbor.BatchMultiHeadGraphAttention.forward": [[160, 179], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "layers_LaBSE_neighbor.BatchMultiHeadGraphAttention.leaky_relu", "layers_LaBSE_neighbor.BatchMultiHeadGraphAttention.data.masked_fill_", "layers_LaBSE_neighbor.BatchMultiHeadGraphAttention.softmax", "layers_LaBSE_neighbor.BatchMultiHeadGraphAttention.dropout", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "h.size", "h.unsqueeze", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.matmul.expand", "torch.matmul.expand", "torch.matmul.expand", "torch.matmul.expand", "torch.matmul.expand", "torch.matmul.expand", "torch.matmul.expand().permute", "torch.matmul.expand().permute", "torch.matmul.expand().permute", "torch.matmul.expand().permute", "torch.matmul.expand().permute", "torch.matmul.expand().permute", "float", "adj.unsqueeze", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.matmul.expand", "torch.matmul.expand", "torch.matmul.expand", "torch.matmul.expand", "torch.matmul.expand", "torch.matmul.expand", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "h", ",", "adj", ")", ":", "\n", "        ", "bs", ",", "n", "=", "h", ".", "size", "(", ")", "[", ":", "2", "]", "# h is of size bs x n x f_in", "\n", "h_prime", "=", "torch", ".", "matmul", "(", "h", ".", "unsqueeze", "(", "1", ")", ",", "self", ".", "w", ")", "# bs x n_head x n x f_out", "\n", "attn_src", "=", "torch", ".", "matmul", "(", "torch", ".", "tanh", "(", "h_prime", ")", ",", "self", ".", "a_src", ")", "# bs x n_head x n x 1", "\n", "attn_dst", "=", "torch", ".", "matmul", "(", "torch", ".", "tanh", "(", "h_prime", ")", ",", "self", ".", "a_dst", ")", "# bs x n_head x n x 1", "\n", "attn", "=", "attn_src", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "-", "1", ",", "n", ")", "+", "attn_dst", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "-", "1", ",", "n", ")", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ")", "# bs x n_head x n x n", "\n", "\n", "attn", "=", "self", ".", "leaky_relu", "(", "attn", ")", "\n", "mask", "=", "~", "(", "adj", ".", "unsqueeze", "(", "1", ")", "|", "torch", ".", "eye", "(", "adj", ".", "shape", "[", "-", "1", "]", ")", ".", "bool", "(", ")", ".", "to", "(", "self", ".", "device", ")", ")", "# bs x 1 x n x n", "\n", "attn", ".", "data", ".", "masked_fill_", "(", "mask", ",", "float", "(", "\"-inf\"", ")", ")", "\n", "attn", "=", "self", ".", "softmax", "(", "attn", ")", "# bs x n_head x n x n", "\n", "attn", "=", "self", ".", "dropout", "(", "attn", ")", "\n", "# logging.info(\"attn: \", attn)", "\n", "# logging.info(\"attn.shape: \", attn.shape)", "\n", "output", "=", "torch", ".", "matmul", "(", "attn", ",", "h_prime", ")", "# bs x n_head x n x f_out", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "return", "output", "+", "self", ".", "bias", "\n", "", "else", ":", "\n", "            ", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_neighbor.Trainer.__init__": [[182, 275], ["fix_seed", "argparse.ArgumentParser", "layers_LaBSE_neighbor.parse_options", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "loader.DBP15KRawNeighbors.DBP15KRawNeighbors", "script.preprocess.deal_raw_dataset.MyRawdataset", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "loader.DBP15KRawNeighbors.DBP15KRawNeighbors", "script.preprocess.deal_raw_dataset.MyRawdataset", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "layers_LaBSE_neighbor.Trainer.__init__.link_loader"], "methods", ["home.repos.pwc.inspect_result.THUDM_SelfKG.None.settings.fix_seed", "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_SSL_DWY.parse_options", "home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DBP15k.DBP15kLoader.link_loader"], ["    ", "def", "__init__", "(", "self", ",", "training", "=", "True", ",", "seed", "=", "37", ")", ":", "\n", "# # Set the random seed manually for reproducibility.", "\n", "        ", "self", ".", "seed", "=", "seed", "\n", "fix_seed", "(", "seed", ")", "\n", "\n", "# set", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "self", ".", "args", "=", "parse_options", "(", "parser", ")", "\n", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "self", ".", "args", ".", "device", ")", "\n", "\n", "loader1", "=", "DBP15KRawNeighbors", "(", "self", ".", "args", ".", "language", ",", "\"1\"", ")", "\n", "myset1", "=", "MyRawdataset", "(", "loader1", ".", "id_neighbors_dict", ",", "loader1", ".", "id_adj_tensor_dict", ")", "\n", "del", "loader1", "\n", "\n", "self", ".", "loader1", "=", "Data", ".", "DataLoader", "(", "\n", "dataset", "=", "myset1", ",", "# torch TensorDataset format", "\n", "batch_size", "=", "self", ".", "args", ".", "batch_size", ",", "# all test data", "\n", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "True", ",", "\n", ")", "\n", "\n", "self", ".", "eval_loader1", "=", "Data", ".", "DataLoader", "(", "\n", "dataset", "=", "myset1", ",", "# torch TensorDataset format", "\n", "batch_size", "=", "self", ".", "args", ".", "batch_size", ",", "# all test data", "\n", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "False", ",", "\n", ")", "\n", "\n", "del", "myset1", "\n", "\n", "loader2", "=", "DBP15KRawNeighbors", "(", "self", ".", "args", ".", "language", ",", "\"2\"", ")", "\n", "myset2", "=", "MyRawdataset", "(", "loader2", ".", "id_neighbors_dict", ",", "loader2", ".", "id_adj_tensor_dict", ")", "\n", "del", "loader2", "\n", "\n", "self", ".", "loader2", "=", "Data", ".", "DataLoader", "(", "\n", "dataset", "=", "myset2", ",", "# torch TensorDataset format", "\n", "batch_size", "=", "self", ".", "args", ".", "batch_size", ",", "# all test data", "\n", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "True", ",", "\n", ")", "\n", "\n", "self", ".", "eval_loader2", "=", "Data", ".", "DataLoader", "(", "\n", "dataset", "=", "myset2", ",", "# torch TensorDataset format", "\n", "batch_size", "=", "self", ".", "args", ".", "batch_size", ",", "# all test data", "\n", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "False", ",", "\n", ")", "\n", "\n", "del", "myset2", "\n", "\n", "self", ".", "model", "=", "None", "\n", "self", ".", "iteration", "=", "0", "\n", "\n", "# get the linked entity ids", "\n", "def", "link_loader", "(", "mode", ",", "valid", "=", "False", ")", ":", "\n", "            ", "link", "=", "{", "}", "\n", "if", "valid", "==", "False", ":", "\n", "                ", "f", "=", "'test.ref'", "\n", "", "else", ":", "\n", "                ", "f", "=", "'valid.ref'", "\n", "", "link_data", "=", "pd", ".", "read_csv", "(", "join", "(", "join", "(", "DATA_DIR", ",", "'DBP15K'", ",", "mode", ")", ",", "f", ")", ",", "sep", "=", "'\\t'", ",", "header", "=", "None", ")", "\n", "link_data", ".", "columns", "=", "[", "'entity1'", ",", "'entity2'", "]", "\n", "entity1_id", "=", "link_data", "[", "'entity1'", "]", ".", "values", ".", "tolist", "(", ")", "\n", "entity2_id", "=", "link_data", "[", "'entity2'", "]", ".", "values", ".", "tolist", "(", ")", "\n", "for", "i", ",", "_", "in", "enumerate", "(", "entity1_id", ")", ":", "\n", "                ", "link", "[", "entity1_id", "[", "i", "]", "]", "=", "entity2_id", "[", "i", "]", "\n", "link", "[", "entity2_id", "[", "i", "]", "]", "=", "entity1_id", "[", "i", "]", "\n", "", "return", "link", "\n", "\n", "", "self", ".", "link", "=", "link_loader", "(", "self", ".", "args", ".", "language", ")", "\n", "self", ".", "val_link", "=", "link_loader", "(", "self", ".", "args", ".", "language", ",", "True", ")", "\n", "# queue for negative samples for 2 language sets", "\n", "self", ".", "neg_queue1", "=", "None", "\n", "# self.neg_valid_num_queue1 = None", "\n", "self", ".", "neg_queue2", "=", "None", "\n", "# self.neg_valid_num_queue2 = None", "\n", "\n", "self", ".", "id_list1", "=", "[", "]", "\n", "\n", "if", "training", ":", "\n", "# self.writer = SummaryWriter(", "\n", "#     log_dir=join(PROJ_DIR, 'log', self.args.model, self.args.model_language, self.args.time),", "\n", "#     comment=self.args.time)", "\n", "\n", "            ", "self", ".", "model", "=", "MyEmbedder", "(", "self", ".", "args", ",", "VOCAB_SIZE", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "_model", "=", "MyEmbedder", "(", "self", ".", "args", ",", "VOCAB_SIZE", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "_model", ".", "update", "(", "self", ".", "model", ")", "\n", "\n", "emb_dim", "=", "LaBSE_DIM", "\n", "self", ".", "iteration", "=", "0", "\n", "self", ".", "lr", "=", "self", ".", "args", ".", "lr", "\n", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "params", "=", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_neighbor.Trainer.save_model": [[276, 285], ["os.makedirs", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "posixpath.join", "posixpath.join", "str", "str", "str"], "methods", ["None"], ["", "", "def", "save_model", "(", "self", ",", "model", ",", "epoch", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "join", "(", "PROJ_DIR", ",", "'checkpoints'", ",", "self", ".", "args", ".", "model", ",", "self", ".", "args", ".", "model_language", ")", ",", "exist_ok", "=", "True", ")", "\n", "torch", ".", "save", "(", "model", ",", "join", "(", "PROJ_DIR", ",", "'checkpoints'", ",", "self", ".", "args", ".", "model", ",", "self", ".", "args", ".", "model_language", ",", "\n", "\"model\"", "\n", "+", "\"_neighbor_\"", "+", "\"True\"", "\n", "+", "\"_epoch_\"", "+", "str", "(", "epoch", ")", "\n", "+", "\"_batch_size_\"", "+", "str", "(", "BATCH_SIZE", ")", "\n", "+", "\"_neg_queue_len_\"", "+", "str", "(", "self", ".", "args", ".", "queue_length", "-", "1", ")", "\n", "+", "'.ckpt'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_neighbor.Trainer.evaluate": [[286, 332], ["logging.info", "print", "dict", "enumerate", "logging.info", "print", "layers_LaBSE_neighbor.Trainer.evaluate.cal_hit"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ",", "step", ")", ":", "\n", "        ", "logging", ".", "info", "(", "\"Evaluate at epoch {}...\"", ".", "format", "(", "step", ")", ")", "\n", "print", "(", "\"Evaluate at epoch {}...\"", ".", "format", "(", "step", ")", ")", "\n", "\n", "ids_1", ",", "ids_2", ",", "vector_1", ",", "vector_2", "=", "list", "(", ")", ",", "list", "(", ")", ",", "list", "(", ")", ",", "list", "(", ")", "\n", "inverse_ids_2", "=", "dict", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "model", ".", "eval", "(", ")", "\n", "for", "sample_id_1", ",", "(", "token_data_1", ",", "id_data_1", ")", "in", "tqdm", "(", "enumerate", "(", "self", ".", "eval_loader1", ")", ")", ":", "\n", "                ", "entity_vector_1", "=", "self", ".", "model", "(", "token_data_1", ")", ".", "squeeze", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "ids_1", ".", "extend", "(", "id_data_1", ".", "squeeze", "(", ")", ".", "tolist", "(", ")", ")", "\n", "vector_1", ".", "append", "(", "entity_vector_1", ")", "\n", "\n", "", "for", "sample_id_2", ",", "(", "token_data_2", ",", "id_data_2", ")", "in", "tqdm", "(", "enumerate", "(", "self", ".", "eval_loader2", ")", ")", ":", "\n", "                ", "entity_vector_2", "=", "self", ".", "model", "(", "token_data_2", ")", ".", "squeeze", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "ids_2", ".", "extend", "(", "id_data_2", ".", "squeeze", "(", ")", ".", "tolist", "(", ")", ")", "\n", "vector_2", ".", "append", "(", "entity_vector_2", ")", "\n", "\n", "", "", "for", "idx", ",", "_id", "in", "enumerate", "(", "ids_2", ")", ":", "\n", "            ", "inverse_ids_2", "[", "_id", "]", "=", "idx", "\n", "", "def", "cal_hit", "(", "v1", ",", "v2", ",", "link", ")", ":", "\n", "            ", "source", "=", "[", "_id", "for", "_id", "in", "ids_1", "if", "_id", "in", "link", "]", "\n", "target", "=", "np", ".", "array", "(", "\n", "[", "inverse_ids_2", "[", "link", "[", "_id", "]", "]", "if", "link", "[", "_id", "]", "in", "inverse_ids_2", "else", "99999", "for", "_id", "in", "source", "]", ")", "\n", "src_idx", "=", "[", "idx", "for", "idx", "in", "range", "(", "len", "(", "ids_1", ")", ")", "if", "ids_1", "[", "idx", "]", "in", "link", "]", "\n", "v1", "=", "np", ".", "concatenate", "(", "tuple", "(", "v1", ")", ",", "axis", "=", "0", ")", "[", "src_idx", ",", ":", "]", "\n", "v2", "=", "np", ".", "concatenate", "(", "tuple", "(", "v2", ")", ",", "axis", "=", "0", ")", "\n", "index", "=", "faiss", ".", "IndexFlatL2", "(", "v2", ".", "shape", "[", "1", "]", ")", "\n", "index", ".", "add", "(", "np", ".", "ascontiguousarray", "(", "v2", ")", ")", "\n", "D", ",", "I", "=", "index", ".", "search", "(", "np", ".", "ascontiguousarray", "(", "v1", ")", ",", "10", ")", "\n", "hit1", "=", "(", "I", "[", ":", ",", "0", "]", "==", "target", ")", ".", "astype", "(", "np", ".", "int32", ")", ".", "sum", "(", ")", "/", "len", "(", "source", ")", "\n", "hit10", "=", "(", "I", "==", "target", "[", ":", ",", "np", ".", "newaxis", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", ".", "sum", "(", ")", "/", "len", "(", "source", ")", "\n", "logging", ".", "info", "(", "\"#Entity: {}\"", ".", "format", "(", "len", "(", "source", ")", ")", ")", "\n", "logging", ".", "info", "(", "\"Hit@1: {}\"", ".", "format", "(", "round", "(", "hit1", ",", "3", ")", ")", ")", "\n", "logging", ".", "info", "(", "\"Hit@10:{}\"", ".", "format", "(", "round", "(", "hit10", ",", "3", ")", ")", ")", "\n", "print", "(", "\"#Entity: {}\"", ".", "format", "(", "len", "(", "source", ")", ")", ")", "\n", "print", "(", "\"Hit@1: {}\"", ".", "format", "(", "round", "(", "hit1", ",", "3", ")", ")", ")", "\n", "print", "(", "\"Hit@10:{}\"", ".", "format", "(", "round", "(", "hit10", ",", "3", ")", ")", ")", "\n", "return", "round", "(", "hit1", ",", "3", ")", ",", "round", "(", "hit10", ",", "3", ")", "\n", "", "logging", ".", "info", "(", "'========Validation========'", ")", "\n", "print", "(", "'========Validation========'", ")", "\n", "hit1_valid", ",", "hit10_valid", "=", "cal_hit", "(", "vector_1", ",", "vector_2", ",", "self", ".", "val_link", ")", "\n", "logging", ".", "info", "(", "'===========Test==========='", ")", "\n", "print", "(", "'===========Test==========='", ")", "\n", "hit1_test", ",", "hit10_test", "=", "cal_hit", "(", "vector_1", ",", "vector_2", ",", "self", ".", "link", ")", "\n", "return", "hit1_valid", ",", "hit10_valid", ",", "hit1_test", ",", "hit10_test", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_neighbor.Trainer.train": [[333, 498], ["fix_seed", "logging.basicConfig", "enumerate", "enumerate", "random.shuffle", "logging.info", "print", "layers_LaBSE_neighbor.Trainer.evaluate", "range", "os.path.exists", "os.mkdir", "all_data_batches.append", "all_data_batches.append", "layers_LaBSE_neighbor.adjust_learning_rate", "tqdm", "posixpath.join", "posixpath.join", "os.path.exists", "os.mkdir", "posixpath.join", "enumerate", "layers_LaBSE_neighbor.Trainer.optimizer.zero_grad", "layers_LaBSE_neighbor.Trainer.model", "layers_LaBSE_neighbor.Trainer.model.contrastive_loss", "layers_LaBSE_neighbor.Trainer.backward", "layers_LaBSE_neighbor.Trainer.optimizer.step", "layers_LaBSE_neighbor.Trainer._model.update", "posixpath.join", "posixpath.join", "id_data.squeeze.squeeze.squeeze", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "layers_LaBSE_neighbor.Trainer._model.eval", "layers_LaBSE_neighbor.Trainer._model", "neg_queue.reshape.reshape.reshape", "layers_LaBSE_neighbor.Trainer._model", "logging.info", "print", "layers_LaBSE_neighbor.Trainer.evaluate", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "print", "print", "print", "print", "print", "print", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "len", "token_data.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "token_data.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "str", "str", "token_data.unsqueeze", "token_data.unsqueeze", "layers_LaBSE_neighbor.Trainer.detach().cpu", "layers_LaBSE_neighbor.Trainer.detach().cpu", "layers_LaBSE_neighbor.Trainer.detach", "layers_LaBSE_neighbor.Trainer.detach"], "methods", ["home.repos.pwc.inspect_result.THUDM_SelfKG.None.settings.fix_seed", "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_SSL_DWY.Trainer.evaluate", "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_SSL_DWY.adjust_learning_rate", "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_SSL_DWY.LaBSEEncoder.contrastive_loss", "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_SSL_DWY.LaBSEEncoder.update", "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_SSL_DWY.Trainer.evaluate"], ["", "def", "train", "(", "self", ",", "start", "=", "0", ")", ":", "\n", "        ", "fix_seed", "(", "self", ".", "seed", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "join", "(", "PROJ_DIR", ",", "'log'", ")", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "join", "(", "PROJ_DIR", ",", "'log'", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "join", "(", "PROJ_DIR", ",", "'log'", ",", "'layers_LaBSE_neighbor'", ")", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "join", "(", "PROJ_DIR", ",", "'log'", ",", "'layers_LaBSE_neighbor'", ")", ")", "\n", "\n", "", "", "logging", ".", "basicConfig", "(", "filename", "=", "join", "(", "PROJ_DIR", ",", "'log'", ",", "'layers_LaBSE_neighbor/{}_{}_{}_{}_{}_{}_{}_{}_{}_{}.log'", ".", "format", "(", "\n", "self", ".", "args", ".", "batch_size", ",", "\n", "self", ".", "args", ".", "queue_length", ",", "\n", "self", ".", "args", ".", "center_norm", ",", "\n", "self", ".", "args", ".", "neighbor_norm", ",", "\n", "self", ".", "args", ".", "emb_norm", ",", "\n", "self", ".", "args", ".", "combine", ",", "\n", "self", ".", "args", ".", "gat_num", ",", "\n", "self", ".", "args", ".", "t", ",", "\n", "self", ".", "args", ".", "momentum", ",", "\n", "self", ".", "args", ".", "lr", "\n", ")", ")", ",", "level", "=", "logging", ".", "INFO", ")", "\n", "tot_loss", "=", "0", "\n", "all_data_batches", "=", "[", "]", "\n", "\n", "for", "batch_id", ",", "(", "token_data", ",", "id_data", ")", "in", "enumerate", "(", "self", ".", "loader1", ")", ":", "\n", "            ", "all_data_batches", ".", "append", "(", "[", "1", ",", "token_data", ",", "id_data", "]", ")", "\n", "", "for", "batch_id", ",", "(", "token_data", ",", "id_data", ")", "in", "enumerate", "(", "self", ".", "loader2", ")", ":", "\n", "            ", "all_data_batches", ".", "append", "(", "[", "2", ",", "token_data", ",", "id_data", "]", ")", "\n", "", "random", ".", "shuffle", "(", "all_data_batches", ")", "\n", "\n", "del", "self", ".", "loader1", "\n", "del", "self", ".", "loader2", "\n", "\n", "neg_queue", "=", "[", "]", "\n", "# neg_valid_num = []", "\n", "\n", "logging", ".", "info", "(", "\"*** Evaluate at the very beginning ***\"", ")", "\n", "print", "(", "\"*** Evaluate at the very beginning ***\"", ")", "\n", "self", ".", "evaluate", "(", "0", ")", "\n", "\n", "best_hit1_valid_epoch", "=", "0", "\n", "best_hit10_valid_epoch", "=", "0", "\n", "best_hit1_test_epoch", "=", "0", "\n", "best_hit10_test_epoch", "=", "0", "\n", "best_hit1_valid", "=", "0", "\n", "best_hit10_valid", "=", "0", "\n", "best_hit1_valid_hit10", "=", "0", "\n", "best_hit10_valid_hit1", "=", "0", "\n", "best_hit1_test", "=", "0", "\n", "best_hit10_test", "=", "0", "\n", "best_hit1_test_hit10", "=", "0", "\n", "best_hit10_test_hit1", "=", "0", "\n", "record_hit1", "=", "0", "\n", "record_hit10", "=", "0", "\n", "record_epoch", "=", "0", "\n", "record_batch_id", "=", "0", "\n", "for", "epoch", "in", "range", "(", "start", ",", "self", ".", "args", ".", "epoch", ")", ":", "\n", "            ", "adjust_learning_rate", "(", "self", ".", "optimizer", ",", "epoch", ",", "self", ".", "lr", ")", "\n", "for", "batch_id", ",", "(", "language_id", ",", "token_data", ",", "id_data", ")", "in", "tqdm", "(", "enumerate", "(", "all_data_batches", ")", ")", ":", "\n", "                ", "pos_batch", "=", "None", "\n", "if", "language_id", "==", "1", ":", "\n", "                    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "if", "self", ".", "neg_queue1", "==", "None", ":", "\n", "                            ", "self", ".", "neg_queue1", "=", "token_data", ".", "unsqueeze", "(", "0", ")", "\n", "", "else", ":", "\n", "                            ", "self", ".", "neg_queue1", "=", "torch", ".", "cat", "(", "(", "self", ".", "neg_queue1", ",", "token_data", ".", "unsqueeze", "(", "0", ")", ")", ",", "dim", "=", "0", ")", "\n", "\n", "", "", "id_data", "=", "id_data", ".", "squeeze", "(", ")", "\n", "\n", "if", "self", ".", "neg_queue1", ".", "shape", "[", "0", "]", "==", "self", ".", "args", ".", "queue_length", "+", "1", ":", "\n", "                        ", "pos_batch", "=", "self", ".", "neg_queue1", "[", "0", "]", "\n", "self", ".", "neg_queue1", "=", "self", ".", "neg_queue1", "[", "1", ":", "]", "\n", "neg_queue", "=", "self", ".", "neg_queue1", "\n", "", "else", ":", "\n", "                        ", "continue", "\n", "\n", "", "", "else", ":", "\n", "                    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "if", "self", ".", "neg_queue2", "==", "None", ":", "\n", "                            ", "self", ".", "neg_queue2", "=", "token_data", ".", "unsqueeze", "(", "0", ")", "\n", "", "else", ":", "\n", "                            ", "self", ".", "neg_queue2", "=", "torch", ".", "cat", "(", "(", "self", ".", "neg_queue2", ",", "token_data", ".", "unsqueeze", "(", "0", ")", ")", ",", "dim", "=", "0", ")", "\n", "\n", "\n", "", "", "if", "self", ".", "neg_queue2", ".", "shape", "[", "0", "]", "==", "self", ".", "args", ".", "queue_length", "+", "1", ":", "\n", "                        ", "pos_batch", "=", "self", ".", "neg_queue2", "[", "0", "]", "\n", "self", ".", "neg_queue2", "=", "self", ".", "neg_queue2", "[", "1", ":", "]", "\n", "neg_queue", "=", "self", ".", "neg_queue2", "\n", "", "else", ":", "\n", "                        ", "continue", "\n", "\n", "# implement queue", "\n", "\n", "", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "pos_1", "=", "self", ".", "model", "(", "pos_batch", ")", "\n", "\n", "neg_value_list", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "self", ".", "_model", ".", "eval", "(", ")", "\n", "\n", "pos_2", "=", "self", ".", "_model", "(", "pos_batch", ")", "\n", "neg_shape", "=", "neg_queue", ".", "shape", "\n", "neg_queue", "=", "neg_queue", ".", "reshape", "(", "neg_shape", "[", "0", "]", "*", "neg_shape", "[", "1", "]", ",", "neg_shape", "[", "2", "]", ",", "-", "1", ")", "\n", "neg_value", "=", "self", ".", "_model", "(", "neg_queue", ")", "\n", "\n", "\n", "# contrastive ", "\n", "", "contrastive_loss", "=", "self", ".", "model", ".", "contrastive_loss", "(", "pos_1", ",", "pos_2", ",", "neg_value", ")", "\n", "\n", "self", ".", "iteration", "+=", "1", "\n", "\n", "contrastive_loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "if", "batch_id", "==", "len", "(", "all_data_batches", ")", "-", "1", ":", "\n", "# if batch_id % 200 == 0 or batch_id == len(all_data_batches) - 1:", "\n", "                    ", "logging", ".", "info", "(", "'epoch: {} batch: {} loss: {}'", ".", "format", "(", "epoch", ",", "batch_id", ",", "\n", "contrastive_loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "data", "/", "self", ".", "args", ".", "batch_size", ")", ")", "\n", "print", "(", "'epoch: {} batch: {} loss: {}'", ".", "format", "(", "epoch", ",", "batch_id", ",", "\n", "contrastive_loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "data", "/", "self", ".", "args", ".", "batch_size", ")", ")", "\n", "hit1_valid", ",", "hit10_valid", ",", "hit1_test", ",", "hit10_test", "=", "self", ".", "evaluate", "(", "str", "(", "epoch", ")", "+", "\": batch \"", "+", "str", "(", "batch_id", ")", ")", "\n", "if", "hit1_valid", ">", "best_hit1_valid", ":", "\n", "                        ", "best_hit1_valid", "=", "hit1_valid", "\n", "best_hit1_valid_hit10", "=", "hit10_valid", "\n", "best_hit1_valid_epoch", "=", "epoch", "\n", "record_epoch", "=", "epoch", "\n", "record_batch_id", "=", "batch_id", "\n", "record_hit1", "=", "hit1_test", "\n", "record_hit10", "=", "hit10_test", "\n", "", "if", "hit10_valid", ">", "best_hit10_valid", ":", "\n", "                        ", "best_hit10_valid", "=", "hit10_valid", "\n", "best_hit10_valid_hit1", "=", "hit1_valid", "\n", "best_hit10_valid_epoch", "=", "epoch", "\n", "if", "hit1_valid", "==", "best_hit1_valid", ":", "\n", "                            ", "record_epoch", "=", "epoch", "\n", "record_batch_id", "=", "batch_id", "\n", "record_hit1", "=", "hit1_test", "\n", "record_hit10", "=", "hit10_test", "\n", "\n", "", "", "if", "hit1_test", ">", "best_hit1_test", ":", "\n", "                        ", "best_hit1_test", "=", "hit1_test", "\n", "best_hit1_test_hit10", "=", "hit10_test", "\n", "best_hit1_test_epoch", "=", "epoch", "\n", "", "if", "hit10_test", ">", "best_hit10_test", ":", "\n", "                        ", "best_hit10_test", "=", "hit10_test", "\n", "best_hit10_test_hit1", "=", "hit1_test", "\n", "best_hit10_test_epoch", "=", "epoch", "\n", "", "logging", ".", "info", "(", "'Test Hit@1(10)    = {}({}) at epoch {} batch {}'", ".", "format", "(", "hit1_test", ",", "hit10_test", ",", "epoch", ",", "batch_id", ")", ")", "\n", "logging", ".", "info", "(", "'Best Valid Hit@1  = {}({}) at epoch {}'", ".", "format", "(", "best_hit1_valid", ",", "best_hit1_valid_hit10", ",", "best_hit1_valid_epoch", ")", ")", "\n", "logging", ".", "info", "(", "'Best Valid Hit@10 = {}({}) at epoch {}'", ".", "format", "(", "best_hit10_valid", ",", "best_hit10_valid_hit1", ",", "best_hit10_valid_epoch", ")", ")", "\n", "logging", ".", "info", "(", "'Test @ Best Valid = {}({}) at epoch {} batch {}'", ".", "format", "(", "record_hit1", ",", "record_hit10", ",", "record_epoch", ",", "record_batch_id", ")", ")", "\n", "\n", "logging", ".", "info", "(", "'Best Test  Hit@1  = {}({}) at epoch {}'", ".", "format", "(", "best_hit1_test", ",", "best_hit1_test_hit10", ",", "best_hit1_test_epoch", ")", ")", "\n", "logging", ".", "info", "(", "'Best Test  Hit@10 = {}({}) at epoch {}'", ".", "format", "(", "best_hit10_test", ",", "best_hit10_test_hit1", ",", "best_hit10_test_epoch", ")", ")", "\n", "logging", ".", "info", "(", "\"====================================\"", ")", "\n", "\n", "print", "(", "'Test Hit@1(10)    = {}({}) at epoch {} batch {}'", ".", "format", "(", "hit1_test", ",", "hit10_test", ",", "epoch", ",", "batch_id", ")", ")", "\n", "print", "(", "'Best Valid Hit@1  = {}({}) at epoch {}'", ".", "format", "(", "best_hit1_valid", ",", "best_hit1_valid_hit10", ",", "best_hit1_valid_epoch", ")", ")", "\n", "print", "(", "'Best Valid Hit@10 = {}({}) at epoch {}'", ".", "format", "(", "best_hit10_valid", ",", "best_hit10_valid_hit1", ",", "best_hit10_valid_epoch", ")", ")", "\n", "print", "(", "'Test @ Best Valid = {}({}) at epoch {} batch {}'", ".", "format", "(", "record_hit1", ",", "record_hit10", ",", "record_epoch", ",", "record_batch_id", ")", ")", "\n", "\n", "print", "(", "'Best Test  Hit@1  = {}({}) at epoch {}'", ".", "format", "(", "best_hit1_test", ",", "best_hit1_test_hit10", ",", "best_hit1_test_epoch", ")", ")", "\n", "print", "(", "'Best Test  Hit@10 = {}({}) at epoch {}'", ".", "format", "(", "best_hit10_test", ",", "best_hit10_test_hit1", ",", "best_hit10_test_epoch", ")", ")", "\n", "print", "(", "\"====================================\"", ")", "\n", "# update", "\n", "", "self", ".", "_model", ".", "update", "(", "self", ".", "model", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_neighbor.parse_options": [[28, 52], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.parse_args", "datetime.datetime.now().strftime", "datetime.datetime.now"], "function", ["None"], ["def", "parse_options", "(", "parser", ")", ":", "\n", "    ", "parser", ".", "add_argument", "(", "'--device'", ",", "type", "=", "str", ",", "default", "=", "'cuda:0'", ")", "\n", "parser", ".", "add_argument", "(", "'--time'", ",", "type", "=", "str", ",", "default", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y%m%d%H%M%S\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--language'", ",", "type", "=", "str", ",", "default", "=", "'zh_en'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_language'", ",", "type", "=", "str", ",", "default", "=", "'zh_en'", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'LaBSE'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--epoch'", ",", "type", "=", "int", ",", "default", "=", "300", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "parser", ".", "add_argument", "(", "'--queue_length'", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--center_norm'", ",", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--neighbor_norm'", ",", "type", "=", "bool", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--emb_norm'", ",", "type", "=", "bool", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--combine'", ",", "type", "=", "bool", ",", "default", "=", "True", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--gat_num'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--t'", ",", "type", "=", "float", ",", "default", "=", "0.08", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.9999", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "1e-6", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "type", "=", "float", ",", "default", "=", "0.3", ")", "\n", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_neighbor.adjust_learning_rate": [[53, 58], ["None"], "function", ["None"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "lr", ")", ":", "\n", "    ", "if", "(", "epoch", "+", "1", ")", "%", "10", "==", "0", ":", "\n", "        ", "lr", "*=", "0.5", "\n", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_DWY_LaBSE_neighbor.NCESoftmaxLoss.__init__": [[62, 66], ["torch.Module.__init__", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DBP15kRawLoader.DBP15kRawLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "device", ")", ":", "\n", "        ", "super", "(", "NCESoftmaxLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_DWY_LaBSE_neighbor.NCESoftmaxLoss.forward": [[67, 73], ["x.squeeze.squeeze.squeeze", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "layers_DWY_LaBSE_neighbor.NCESoftmaxLoss.criterion", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch_size", "=", "x", ".", "shape", "[", "0", "]", "\n", "x", "=", "x", ".", "squeeze", "(", ")", "\n", "label", "=", "torch", ".", "zeros", "(", "[", "batch_size", "]", ")", ".", "to", "(", "self", ".", "device", ")", ".", "long", "(", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "x", ",", "label", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_DWY_LaBSE_neighbor.MoConoid.__init__": [[76, 100], ["ord", "torch.Module.__init__", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "layers_DWY_LaBSE_neighbor.BatchMultiHeadGraphAttention", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers_DWY_LaBSE_neighbor.NCESoftmaxLoss", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DBP15kRawLoader.DBP15kRawLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "vocab_size", ",", "padding", "=", "ord", "(", "' '", ")", ")", ":", "\n", "        ", "super", "(", "MoConoid", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "args", "=", "args", "\n", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "self", ".", "args", ".", "device", ")", "\n", "\n", "self", ".", "attn", "=", "BatchMultiHeadGraphAttention", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "attn_mlp", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "LaBSE_DIM", "*", "2", ",", "LaBSE_DIM", ")", ",", "\n", ")", "\n", "\n", "# self.attn_mlp2 = nn.Sequential(", "\n", "#     nn.Linear(LaBSE_DIM * 2, LaBSE_DIM),", "\n", "#     nn.ReLU(),", "\n", "#     nn.Linear(LaBSE_DIM, LaBSE_DIM),", "\n", "# )", "\n", "\n", "# loss", "\n", "self", ".", "criterion", "=", "NCESoftmaxLoss", "(", "self", ".", "device", ")", "\n", "\n", "# batch queue", "\n", "self", ".", "batch_queue", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_DWY_LaBSE_neighbor.MoConoid.contrastive_loss": [[101, 111], ["torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "l_pos.view.view.view", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "logits.squeeze().contiguous.squeeze().contiguous.squeeze().contiguous", "layers_DWY_LaBSE_neighbor.MoConoid.criterion", "pos_1.view", "pos_2.view", "pos_1.view", "neg_value.t", "logits.squeeze().contiguous.squeeze().contiguous.squeeze"], "methods", ["None"], ["", "def", "contrastive_loss", "(", "self", ",", "pos_1", ",", "pos_2", ",", "neg_value", ")", ":", "\n", "        ", "bsz", "=", "pos_1", ".", "shape", "[", "0", "]", "\n", "l_pos", "=", "torch", ".", "bmm", "(", "pos_1", ".", "view", "(", "bsz", ",", "1", ",", "-", "1", ")", ",", "pos_2", ".", "view", "(", "bsz", ",", "-", "1", ",", "1", ")", ")", "\n", "l_pos", "=", "l_pos", ".", "view", "(", "bsz", ",", "1", ")", "\n", "# print(\"l_pos mean: \", torch.mean(l_pos, dim=0).cpu().data)", "\n", "l_neg", "=", "torch", ".", "mm", "(", "pos_1", ".", "view", "(", "bsz", ",", "-", "1", ")", ",", "neg_value", ".", "t", "(", ")", ")", "\n", "# print(\"l_neg mean: \", torch.mean(l_neg, dim=0).cpu().data)", "\n", "logits", "=", "torch", ".", "cat", "(", "(", "l_pos", ",", "l_neg", ")", ",", "dim", "=", "1", ")", "\n", "logits", "=", "logits", ".", "squeeze", "(", ")", ".", "contiguous", "(", ")", "\n", "return", "self", ".", "criterion", "(", "logits", "/", "self", ".", "args", ".", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_DWY_LaBSE_neighbor.MoConoid.update": [[112, 117], ["zip", "layers_DWY_LaBSE_neighbor.MoConoid.eval", "layers_DWY_LaBSE_neighbor.MoConoid.parameters", "network.parameters"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "network", ":", "nn", ".", "Module", ")", ":", "\n", "        ", "for", "key_param", ",", "query_param", "in", "zip", "(", "self", ".", "parameters", "(", ")", ",", "network", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "key_param", ".", "data", "*=", "self", ".", "args", ".", "momentum", "\n", "key_param", ".", "data", "+=", "(", "1", "-", "self", ".", "args", ".", "momentum", ")", "*", "query_param", ".", "data", "\n", "", "self", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_DWY_LaBSE_neighbor.MoConoid.forward": [[118, 141], ["batch.to.to.to", "batch_in[].to", "batch_in.to", "range", "layers_DWY_LaBSE_neighbor.MoConoid.attn().squeeze", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "layers_DWY_LaBSE_neighbor.MoConoid.attn_mlp", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "layers_DWY_LaBSE_neighbor.MoConoid.attn", "adj.bool"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n", "# print(\"batch.shape: \", batch.shape)", "\n", "        ", "batch", "=", "batch", ".", "to", "(", "self", ".", "device", ")", "\n", "batch_in", "=", "batch", "[", ":", ",", ":", ",", ":", "LaBSE_DIM", "]", "\n", "adj", "=", "batch", "[", ":", ",", ":", ",", "LaBSE_DIM", ":", "]", "\n", "\n", "center", "=", "batch_in", "[", ":", ",", "0", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "center_neigh", "=", "batch_in", ".", "to", "(", "self", ".", "device", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "args", ".", "gat_num", ")", ":", "\n", "            ", "center_neigh", "=", "self", ".", "attn", "(", "center_neigh", ",", "adj", ".", "bool", "(", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "", "center_neigh", "=", "center_neigh", "[", ":", ",", "0", "]", "\n", "\n", "if", "self", ".", "args", ".", "neighbor_norm", ":", "\n", "            ", "center_neigh", "=", "F", ".", "normalize", "(", "center_neigh", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "", "if", "self", ".", "args", ".", "combine", ":", "\n", "            ", "out_hat", "=", "torch", ".", "cat", "(", "(", "center", ",", "center_neigh", ")", ",", "dim", "=", "1", ")", "\n", "out_hat", "=", "self", ".", "attn_mlp", "(", "out_hat", ")", "\n", "if", "self", ".", "args", ".", "emb_norm", ":", "\n", "                ", "out_hat", "=", "F", ".", "normalize", "(", "out_hat", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "", "", "else", ":", "\n", "            ", "out_hat", "=", "center_neigh", "\n", "\n", "", "return", "out_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_DWY_LaBSE_neighbor.BatchMultiHeadGraphAttention.__init__": [[144, 164], ["torch.Module.__init__", "Parameter", "Parameter", "Parameter", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "Parameter", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "layers_DWY_LaBSE_neighbor.BatchMultiHeadGraphAttention.register_parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DBP15kRawLoader.DBP15kRawLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "device", ",", "n_head", "=", "MULTI_HEAD_DIM", ",", "f_in", "=", "LaBSE_DIM", ",", "f_out", "=", "LaBSE_DIM", ",", "attn_dropout", "=", "0.3", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "BatchMultiHeadGraphAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "w", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "n_head", ",", "f_in", ",", "f_out", ")", ")", "\n", "self", ".", "a_src", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "n_head", ",", "f_out", ",", "1", ")", ")", "\n", "self", ".", "a_dst", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "n_head", ",", "f_out", ",", "1", ")", ")", "\n", "\n", "self", ".", "leaky_relu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "attn_dropout", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "f_out", ")", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "bias", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "\n", "", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "w", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "a_src", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "a_dst", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_DWY_LaBSE_neighbor.BatchMultiHeadGraphAttention.forward": [[165, 184], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "layers_DWY_LaBSE_neighbor.BatchMultiHeadGraphAttention.leaky_relu", "layers_DWY_LaBSE_neighbor.BatchMultiHeadGraphAttention.data.masked_fill_", "layers_DWY_LaBSE_neighbor.BatchMultiHeadGraphAttention.softmax", "layers_DWY_LaBSE_neighbor.BatchMultiHeadGraphAttention.dropout", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "h.size", "h.unsqueeze", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.matmul.expand", "torch.matmul.expand", "torch.matmul.expand", "torch.matmul.expand", "torch.matmul.expand", "torch.matmul.expand().permute", "torch.matmul.expand().permute", "torch.matmul.expand().permute", "torch.matmul.expand().permute", "torch.matmul.expand().permute", "float", "adj.unsqueeze", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.matmul.expand", "torch.matmul.expand", "torch.matmul.expand", "torch.matmul.expand", "torch.matmul.expand", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "h", ",", "adj", ")", ":", "\n", "        ", "bs", ",", "n", "=", "h", ".", "size", "(", ")", "[", ":", "2", "]", "# h is of size bs x n x f_in", "\n", "h_prime", "=", "torch", ".", "matmul", "(", "h", ".", "unsqueeze", "(", "1", ")", ",", "self", ".", "w", ")", "# bs x n_head x n x f_out", "\n", "attn_src", "=", "torch", ".", "matmul", "(", "torch", ".", "tanh", "(", "h_prime", ")", ",", "self", ".", "a_src", ")", "# bs x n_head x n x 1", "\n", "attn_dst", "=", "torch", ".", "matmul", "(", "torch", ".", "tanh", "(", "h_prime", ")", ",", "self", ".", "a_dst", ")", "# bs x n_head x n x 1", "\n", "attn", "=", "attn_src", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "-", "1", ",", "n", ")", "+", "attn_dst", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "-", "1", ",", "n", ")", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ")", "# bs x n_head x n x n", "\n", "\n", "attn", "=", "self", ".", "leaky_relu", "(", "attn", ")", "\n", "mask", "=", "~", "(", "adj", ".", "unsqueeze", "(", "1", ")", "|", "torch", ".", "eye", "(", "adj", ".", "shape", "[", "-", "1", "]", ")", ".", "bool", "(", ")", ".", "to", "(", "self", ".", "device", ")", ")", "# bs x 1 x n x n", "\n", "attn", ".", "data", ".", "masked_fill_", "(", "mask", ",", "float", "(", "\"-inf\"", ")", ")", "\n", "attn", "=", "self", ".", "softmax", "(", "attn", ")", "# bs x n_head x n x n", "\n", "attn", "=", "self", ".", "dropout", "(", "attn", ")", "\n", "# print(\"attn: \", attn)", "\n", "# print(\"attn.shape: \", attn.shape)", "\n", "output", "=", "torch", ".", "matmul", "(", "attn", ",", "h_prime", ")", "# bs x n_head x n x f_out", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "return", "output", "+", "self", ".", "bias", "\n", "", "else", ":", "\n", "            ", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_DWY_LaBSE_neighbor.Trainer.__init__": [[187, 279], ["fix_seed", "argparse.ArgumentParser", "layers_DWY_LaBSE_neighbor.parse_options", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "loader.DWY100KRawNeighbor.DWY100KRawNeighbors", "script.preprocess.deal_raw_dataset.MyRawdataset", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "loader.DWY100KRawNeighbor.DWY100KRawNeighbors", "script.preprocess.deal_raw_dataset.MyRawdataset", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "layers_DWY_LaBSE_neighbor.Trainer.__init__.link_loader"], "methods", ["home.repos.pwc.inspect_result.THUDM_SelfKG.None.settings.fix_seed", "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_SSL_DWY.parse_options", "home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DBP15k.DBP15kLoader.link_loader"], ["    ", "def", "__init__", "(", "self", ",", "training", "=", "True", ",", "seed", "=", "37", ")", ":", "\n", "# # Set the random seed manually for reproducibility.", "\n", "        ", "self", ".", "seed", "=", "seed", "\n", "fix_seed", "(", "seed", ")", "\n", "\n", "# set", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "self", ".", "args", "=", "parse_options", "(", "parser", ")", "\n", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "self", ".", "args", ".", "device", ")", "\n", "\n", "loader1", "=", "DWY100KRawNeighbors", "(", "self", ".", "args", ".", "dir", ",", "\"1\"", ")", "\n", "myset1", "=", "MyRawdataset", "(", "loader1", ".", "id_neighbors_dict", ",", "loader1", ".", "id_adj_tensor_dict", ")", "\n", "\n", "del", "loader1", "\n", "\n", "self", ".", "loader1", "=", "Data", ".", "DataLoader", "(", "\n", "dataset", "=", "myset1", ",", "# torch TensorDataset format", "\n", "batch_size", "=", "self", ".", "args", ".", "batch_size", ",", "# all test data", "\n", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "True", ",", "\n", ")", "\n", "\n", "self", ".", "eval_loader1", "=", "Data", ".", "DataLoader", "(", "\n", "dataset", "=", "myset1", ",", "# torch TensorDataset format", "\n", "batch_size", "=", "self", ".", "args", ".", "batch_size", ",", "# all test data", "\n", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "False", ",", "\n", ")", "\n", "\n", "del", "myset1", "\n", "\n", "loader2", "=", "DWY100KRawNeighbors", "(", "self", ".", "args", ".", "dir", ",", "\"2\"", ")", "\n", "myset2", "=", "MyRawdataset", "(", "loader2", ".", "id_neighbors_dict", ",", "loader2", ".", "id_adj_tensor_dict", ")", "\n", "del", "loader2", "\n", "\n", "self", ".", "loader2", "=", "Data", ".", "DataLoader", "(", "\n", "dataset", "=", "myset2", ",", "# torch TensorDataset format", "\n", "batch_size", "=", "self", ".", "args", ".", "batch_size", ",", "# all test data", "\n", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "True", ",", "\n", ")", "\n", "\n", "self", ".", "eval_loader2", "=", "Data", ".", "DataLoader", "(", "\n", "dataset", "=", "myset2", ",", "# torch TensorDataset format", "\n", "batch_size", "=", "self", ".", "args", ".", "batch_size", ",", "# all test data", "\n", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "False", ",", "\n", ")", "\n", "\n", "del", "myset2", "\n", "\n", "self", ".", "model", "=", "None", "\n", "self", ".", "iteration", "=", "0", "\n", "\n", "# get the linked entity ids", "\n", "def", "link_loader", "(", "mode", ",", "valid", "=", "False", ")", ":", "\n", "            ", "link", "=", "{", "}", "\n", "f", "=", "'valid.ref'", "if", "valid", "else", "'ref_ent_ids'", "\n", "link_data", "=", "pd", ".", "read_csv", "(", "join", "(", "join", "(", "DATA_DIR", ",", "'DWY100K'", ",", "mode", ")", ",", "f", ")", ",", "sep", "=", "'\\t'", ",", "header", "=", "None", ")", "\n", "link_data", ".", "columns", "=", "[", "'entity1'", ",", "'entity2'", "]", "\n", "entity1_id", "=", "link_data", "[", "'entity1'", "]", ".", "values", ".", "tolist", "(", ")", "\n", "entity2_id", "=", "link_data", "[", "'entity2'", "]", ".", "values", ".", "tolist", "(", ")", "\n", "for", "i", ",", "_", "in", "enumerate", "(", "entity1_id", ")", ":", "\n", "                ", "link", "[", "entity1_id", "[", "i", "]", "]", "=", "entity2_id", "[", "i", "]", "\n", "link", "[", "entity2_id", "[", "i", "]", "]", "=", "entity1_id", "[", "i", "]", "\n", "", "return", "link", "\n", "\n", "", "self", ".", "link", "=", "link_loader", "(", "self", ".", "args", ".", "dir", ")", "\n", "self", ".", "val_link", "=", "link_loader", "(", "self", ".", "args", ".", "dir", ",", "True", ")", "\n", "\n", "# queue for negative samples for 2 language sets", "\n", "self", ".", "neg_queue1", "=", "None", "\n", "# self.neg_valid_num_queue1 = None", "\n", "self", ".", "neg_queue2", "=", "None", "\n", "# self.neg_valid_num_queue2 = None", "\n", "\n", "self", ".", "id_list1", "=", "[", "]", "\n", "\n", "if", "training", ":", "\n", "# self.writer = SummaryWriter(", "\n", "#     log_dir=join(PROJ_DIR, 'log', self.args.model, self.args.model_language, self.args.time),", "\n", "#     comment=self.args.time)", "\n", "\n", "            ", "self", ".", "model", "=", "MoConoid", "(", "self", ".", "args", ",", "VOCAB_SIZE", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "_model", "=", "MoConoid", "(", "self", ".", "args", ",", "VOCAB_SIZE", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "_model", ".", "update", "(", "self", ".", "model", ")", "\n", "\n", "emb_dim", "=", "LaBSE_DIM", "\n", "self", ".", "iteration", "=", "0", "\n", "self", ".", "lr", "=", "self", ".", "args", ".", "lr", "\n", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "params", "=", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_DWY_LaBSE_neighbor.Trainer.save__model": [[280, 288], ["os.makedirs", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "join", "join", "str"], "methods", ["None"], ["", "", "def", "save__model", "(", "self", ",", "model", ",", "epoch", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "join", "(", "PROJ_DIR", ",", "'checkpoints'", ",", "self", ".", "args", ".", "model", ",", "self", ".", "args", ".", "model_dir", ")", ",", "exist_ok", "=", "True", ")", "\n", "torch", ".", "save", "(", "model", ",", "join", "(", "PROJ_DIR", ",", "'checkpoints'", ",", "self", ".", "args", ".", "model", ",", "self", ".", "args", ".", "model_dir", ",", "\n", "\"_model\"", "\n", "+", "\"_DWY_LaBSE_neighbor\"", "\n", "+", "self", ".", "args", ".", "model_name", "\n", "+", "\"_epoch_\"", "+", "str", "(", "epoch", ")", "\n", "+", "'.ckpt'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_DWY_LaBSE_neighbor.Trainer.save_model": [[289, 297], ["os.makedirs", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "join", "join", "str"], "methods", ["None"], ["", "def", "save_model", "(", "self", ",", "model", ",", "epoch", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "join", "(", "PROJ_DIR", ",", "'checkpoints'", ",", "self", ".", "args", ".", "model", ",", "self", ".", "args", ".", "model_dir", ")", ",", "exist_ok", "=", "True", ")", "\n", "torch", ".", "save", "(", "model", ",", "join", "(", "PROJ_DIR", ",", "'checkpoints'", ",", "self", ".", "args", ".", "model", ",", "self", ".", "args", ".", "model_dir", ",", "\n", "\"model\"", "\n", "+", "\"_DWY_LaBSE_neighbor\"", "\n", "+", "self", ".", "args", ".", "model_name", "\n", "+", "\"_epoch_\"", "+", "str", "(", "epoch", ")", "\n", "+", "'.ckpt'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_DWY_LaBSE_neighbor.Trainer.evaluate": [[298, 338], ["print", "dict", "enumerate", "print", "layers_DWY_LaBSE_neighbor.Trainer.evaluate.cal_hit"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ",", "step", ")", ":", "\n", "        ", "print", "(", "\"Evaluate at epoch {}...\"", ".", "format", "(", "step", ")", ")", "\n", "# print(\"Evaluate at epoch {}...\".format(step), file=result_file)", "\n", "ids_1", ",", "ids_2", ",", "vector_1", ",", "vector_2", "=", "list", "(", ")", ",", "list", "(", ")", ",", "list", "(", ")", ",", "list", "(", ")", "\n", "inverse_ids_2", "=", "dict", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "model", ".", "eval", "(", ")", "\n", "for", "sample_id_1", ",", "(", "token_data_1", ",", "id_data_1", ")", "in", "tqdm", "(", "enumerate", "(", "self", ".", "eval_loader1", ")", ")", ":", "\n", "                ", "entity_vector_1", "=", "self", ".", "model", "(", "token_data_1", ")", ".", "squeeze", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "ids_1", ".", "extend", "(", "id_data_1", ".", "squeeze", "(", ")", ".", "tolist", "(", ")", ")", "\n", "vector_1", ".", "append", "(", "entity_vector_1", ")", "\n", "\n", "", "for", "sample_id_2", ",", "(", "token_data_2", ",", "id_data_2", ")", "in", "tqdm", "(", "enumerate", "(", "self", ".", "eval_loader2", ")", ")", ":", "\n", "                ", "entity_vector_2", "=", "self", ".", "model", "(", "token_data_2", ")", ".", "squeeze", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "ids_2", ".", "extend", "(", "id_data_2", ".", "squeeze", "(", ")", ".", "tolist", "(", ")", ")", "\n", "vector_2", ".", "append", "(", "entity_vector_2", ")", "\n", "\n", "", "", "for", "idx", ",", "_id", "in", "enumerate", "(", "ids_2", ")", ":", "\n", "            ", "inverse_ids_2", "[", "_id", "]", "=", "idx", "\n", "", "def", "cal_hit", "(", "v1", ",", "v2", ",", "link", ")", ":", "\n", "            ", "source", "=", "[", "_id", "for", "_id", "in", "ids_1", "if", "_id", "in", "link", "]", "\n", "target", "=", "np", ".", "array", "(", "\n", "[", "inverse_ids_2", "[", "link", "[", "_id", "]", "]", "if", "link", "[", "_id", "]", "in", "inverse_ids_2", "else", "9999999", "for", "_id", "in", "source", "]", ")", "\n", "src_idx", "=", "[", "idx", "for", "idx", "in", "range", "(", "len", "(", "ids_1", ")", ")", "if", "ids_1", "[", "idx", "]", "in", "link", "]", "\n", "v1", "=", "np", ".", "concatenate", "(", "tuple", "(", "v1", ")", ",", "axis", "=", "0", ")", "[", "src_idx", ",", ":", "]", "\n", "v2", "=", "np", ".", "concatenate", "(", "tuple", "(", "v2", ")", ",", "axis", "=", "0", ")", "\n", "index", "=", "faiss", ".", "IndexFlatL2", "(", "v2", ".", "shape", "[", "1", "]", ")", "\n", "index", ".", "add", "(", "np", ".", "ascontiguousarray", "(", "v2", ")", ")", "\n", "D", ",", "I", "=", "index", ".", "search", "(", "np", ".", "ascontiguousarray", "(", "v1", ")", ",", "10", ")", "\n", "hit1", "=", "(", "I", "[", ":", ",", "0", "]", "==", "target", ")", ".", "astype", "(", "np", ".", "int32", ")", ".", "sum", "(", ")", "/", "len", "(", "source", ")", "\n", "hit10", "=", "(", "I", "==", "target", "[", ":", ",", "np", ".", "newaxis", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", ".", "sum", "(", ")", "/", "len", "(", "source", ")", "\n", "print", "(", "\"#Entity:\"", ",", "len", "(", "source", ")", ")", "\n", "print", "(", "\"Hit@1: \"", ",", "round", "(", "hit1", ",", "4", ")", ")", "\n", "print", "(", "\"Hit@10:\"", ",", "round", "(", "hit10", ",", "4", ")", ")", "\n", "return", "hit1", ",", "hit10", "\n", "", "print", "(", "'========Validation========'", ")", "\n", "hit1_valid", ",", "hit10_valid", "=", "cal_hit", "(", "vector_1", ",", "vector_2", ",", "self", ".", "val_link", ")", "\n", "print", "(", "'===========Test==========='", ")", "\n", "hit1_test", ",", "hit10_test", "=", "cal_hit", "(", "vector_1", ",", "vector_2", ",", "self", ".", "link", ")", "\n", "return", "hit1_valid", ",", "hit10_valid", ",", "hit1_test", ",", "hit10_test", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_DWY_LaBSE_neighbor.Trainer.train": [[339, 465], ["fix_seed", "enumerate", "enumerate", "random.shuffle", "print", "layers_DWY_LaBSE_neighbor.Trainer.evaluate", "range", "all_data_batches.append", "all_data_batches.append", "layers_DWY_LaBSE_neighbor.adjust_learning_rate", "tqdm", "layers_DWY_LaBSE_neighbor.Trainer.evaluate", "print", "print", "print", "print", "print", "enumerate", "layers_DWY_LaBSE_neighbor.Trainer.optimizer.zero_grad", "layers_DWY_LaBSE_neighbor.Trainer.model", "layers_DWY_LaBSE_neighbor.Trainer.model.contrastive_loss", "layers_DWY_LaBSE_neighbor.Trainer.backward", "layers_DWY_LaBSE_neighbor.Trainer.optimizer.step", "layers_DWY_LaBSE_neighbor.Trainer._model.update", "id_data.squeeze.squeeze.squeeze", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "layers_DWY_LaBSE_neighbor.Trainer._model.eval", "layers_DWY_LaBSE_neighbor.Trainer._model", "neg_queue.reshape.reshape.reshape", "layers_DWY_LaBSE_neighbor.Trainer._model", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "token_data.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "token_data.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "token_data.unsqueeze", "token_data.unsqueeze", "layers_DWY_LaBSE_neighbor.Trainer.detach().cpu", "layers_DWY_LaBSE_neighbor.Trainer.detach"], "methods", ["home.repos.pwc.inspect_result.THUDM_SelfKG.None.settings.fix_seed", "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_SSL_DWY.Trainer.evaluate", "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_SSL_DWY.adjust_learning_rate", "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_SSL_DWY.Trainer.evaluate", "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_SSL_DWY.LaBSEEncoder.contrastive_loss", "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_SSL_DWY.LaBSEEncoder.update"], ["", "def", "train", "(", "self", ",", "start", "=", "0", ")", ":", "\n", "        ", "fix_seed", "(", "self", ".", "seed", ")", "\n", "tot_loss", "=", "0", "\n", "all_data_batches", "=", "[", "]", "\n", "for", "batch_id", ",", "(", "token_data", ",", "id_data", ")", "in", "enumerate", "(", "self", ".", "loader1", ")", ":", "\n", "            ", "all_data_batches", ".", "append", "(", "[", "1", ",", "token_data", ",", "id_data", "]", ")", "\n", "", "del", "self", ".", "loader1", "\n", "\n", "for", "batch_id", ",", "(", "token_data", ",", "id_data", ")", "in", "enumerate", "(", "self", ".", "loader2", ")", ":", "\n", "            ", "all_data_batches", ".", "append", "(", "[", "2", ",", "token_data", ",", "id_data", "]", ")", "\n", "", "del", "self", ".", "loader2", "\n", "\n", "random", ".", "shuffle", "(", "all_data_batches", ")", "\n", "\n", "neg_queue", "=", "[", "]", "\n", "# neg_valid_num = []", "\n", "\n", "print", "(", "\"*** Evaluate at the very beginning ***\"", ")", "\n", "self", ".", "evaluate", "(", "0", ")", "\n", "\n", "best_hit1_valid_epoch", "=", "0", "\n", "best_hit10_valid_epoch", "=", "0", "\n", "best_hit1_test_epoch", "=", "0", "\n", "best_hit10_test_epoch", "=", "0", "\n", "best_hit1_valid", "=", "0", "\n", "best_hit10_valid", "=", "0", "\n", "best_hit1_valid_hit10", "=", "0", "\n", "best_hit10_valid_hit1", "=", "0", "\n", "best_hit1_test", "=", "0", "\n", "best_hit10_test", "=", "0", "\n", "best_hit1_test_hit10", "=", "0", "\n", "best_hit10_test_hit1", "=", "0", "\n", "for", "epoch", "in", "range", "(", "start", ",", "self", ".", "args", ".", "epoch", ")", ":", "\n", "            ", "adjust_learning_rate", "(", "self", ".", "optimizer", ",", "epoch", ",", "self", ".", "lr", ")", "\n", "for", "batch_id", ",", "(", "dir_id", ",", "token_data", ",", "id_data", ")", "in", "tqdm", "(", "enumerate", "(", "all_data_batches", ")", ")", ":", "\n", "                ", "pos_batch", "=", "None", "\n", "if", "dir_id", "==", "1", ":", "\n", "                    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "if", "self", ".", "neg_queue1", "==", "None", ":", "\n", "                            ", "self", ".", "neg_queue1", "=", "token_data", ".", "unsqueeze", "(", "0", ")", "\n", "", "else", ":", "\n", "                            ", "self", ".", "neg_queue1", "=", "torch", ".", "cat", "(", "(", "self", ".", "neg_queue1", ",", "token_data", ".", "unsqueeze", "(", "0", ")", ")", ",", "dim", "=", "0", ")", "\n", "\n", "", "", "id_data", "=", "id_data", ".", "squeeze", "(", ")", "\n", "\n", "if", "self", ".", "neg_queue1", ".", "shape", "[", "0", "]", "==", "self", ".", "args", ".", "queue_length", "+", "1", ":", "\n", "                        ", "pos_batch", "=", "self", ".", "neg_queue1", "[", "0", "]", "\n", "self", ".", "neg_queue1", "=", "self", ".", "neg_queue1", "[", "1", ":", "]", "\n", "neg_queue", "=", "self", ".", "neg_queue1", "\n", "", "else", ":", "\n", "                        ", "continue", "\n", "\n", "", "", "else", ":", "\n", "                    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "if", "self", ".", "neg_queue2", "==", "None", ":", "\n", "                            ", "self", ".", "neg_queue2", "=", "token_data", ".", "unsqueeze", "(", "0", ")", "\n", "", "else", ":", "\n", "                            ", "self", ".", "neg_queue2", "=", "torch", ".", "cat", "(", "(", "self", ".", "neg_queue2", ",", "token_data", ".", "unsqueeze", "(", "0", ")", ")", ",", "dim", "=", "0", ")", "\n", "\n", "\n", "", "", "if", "self", ".", "neg_queue2", ".", "shape", "[", "0", "]", "==", "self", ".", "args", ".", "queue_length", "+", "1", ":", "\n", "                        ", "pos_batch", "=", "self", ".", "neg_queue2", "[", "0", "]", "\n", "self", ".", "neg_queue2", "=", "self", ".", "neg_queue2", "[", "1", ":", "]", "\n", "neg_queue", "=", "self", ".", "neg_queue2", "\n", "", "else", ":", "\n", "                        ", "continue", "\n", "\n", "# implement queue", "\n", "\n", "", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "pos_1", "=", "self", ".", "model", "(", "pos_batch", ")", "\n", "\n", "neg_value_list", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "self", ".", "_model", ".", "eval", "(", ")", "\n", "\n", "pos_2", "=", "self", ".", "_model", "(", "pos_batch", ")", "\n", "neg_shape", "=", "neg_queue", ".", "shape", "\n", "neg_queue", "=", "neg_queue", ".", "reshape", "(", "neg_shape", "[", "0", "]", "*", "neg_shape", "[", "1", "]", ",", "neg_shape", "[", "2", "]", ",", "-", "1", ")", "\n", "neg_value", "=", "self", ".", "_model", "(", "neg_queue", ")", "\n", "\n", "\n", "# contrastive ", "\n", "", "contrastive_loss", "=", "self", ".", "model", ".", "contrastive_loss", "(", "pos_1", ",", "pos_2", ",", "neg_value", ")", "\n", "\n", "self", ".", "iteration", "+=", "1", "\n", "\n", "contrastive_loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "batch_id", "%", "200", "==", "0", ":", "\n", "                    ", "print", "(", "'epoch: {} batch: {} loss: {}'", ".", "format", "(", "epoch", ",", "batch_id", ",", "\n", "contrastive_loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "data", "/", "self", ".", "args", ".", "batch_size", ")", ")", "\n", "# self.evaluate(str(epoch)+\": batch \"+str(batch_id))", "\n", "# update", "\n", "", "self", ".", "_model", ".", "update", "(", "self", ".", "model", ")", "\n", "\n", "# pdb.set_trace()", "\n", "\n", "# self.save_model(self.model, epoch)", "\n", "# self.save__model(self._model, epoch)", "\n", "", "hit1_valid", ",", "hit10_valid", ",", "hit1_test", ",", "hit10_test", "=", "self", ".", "evaluate", "(", "epoch", ")", "\n", "if", "hit1_valid", ">", "best_hit1_valid", ":", "\n", "                ", "best_hit1_valid", "=", "hit1_valid", "\n", "best_hit1_valid_hit10", "=", "hit10_valid", "\n", "best_hit1_valid_epoch", "=", "epoch", "\n", "", "if", "hit10_valid", ">", "best_hit10_valid", ":", "\n", "                ", "best_hit10_valid", "=", "hit10_valid", "\n", "best_hit10_valid_hit1", "=", "hit1_valid", "\n", "best_hit10_valid_epoch", "=", "epoch", "\n", "\n", "", "if", "hit1_test", ">", "best_hit1_test", ":", "\n", "                ", "best_hit1_test", "=", "hit1_test", "\n", "best_hit1_test_hit10", "=", "hit10_test", "\n", "best_hit1_test_epoch", "=", "epoch", "\n", "", "if", "hit10_test", ">", "best_hit10_test", ":", "\n", "                ", "best_hit10_test", "=", "hit10_test", "\n", "best_hit10_test_hit1", "=", "hit1_test", "\n", "best_hit10_test_epoch", "=", "epoch", "\n", "", "print", "(", "'Best Valid Hit@1  = {}({}) at epoch {}'", ".", "format", "(", "best_hit1_valid", ",", "best_hit1_valid_hit10", ",", "best_hit1_valid_epoch", ")", ")", "\n", "print", "(", "'Best Valid Hit@10 = {}({}) at epoch {}'", ".", "format", "(", "best_hit10_valid", ",", "best_hit10_valid_hit1", ",", "best_hit10_valid_epoch", ")", ")", "\n", "print", "(", "'Best Test  Hit@1  = {}({}) at epoch {}'", ".", "format", "(", "best_hit1_test", ",", "best_hit1_test_hit10", ",", "best_hit1_test_epoch", ")", ")", "\n", "print", "(", "'Best Test  Hit@10 = {}({}) at epoch {}'", ".", "format", "(", "best_hit10_test", ",", "best_hit10_test_hit1", ",", "best_hit10_test_epoch", ")", ")", "\n", "print", "(", "\"====================================\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_DWY_LaBSE_neighbor.parse_options": [[28, 52], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.parse_args", "datetime.datetime.now().strftime", "datetime.datetime.now"], "function", ["None"], ["def", "parse_options", "(", "parser", ")", ":", "\n", "    ", "parser", ".", "add_argument", "(", "'--device'", ",", "type", "=", "str", ",", "default", "=", "'cuda:0'", ")", "\n", "parser", ".", "add_argument", "(", "'--time'", ",", "type", "=", "str", ",", "default", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y%m%d%H%M%S\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--dir'", ",", "type", "=", "str", ",", "default", "=", "'dbp_wd'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_dir'", ",", "type", "=", "str", ",", "default", "=", "'dbp_wd'", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'LaBSE'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_name'", ",", "type", "=", "str", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--neighbor_norm'", ",", "type", "=", "bool", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--emb_norm'", ",", "type", "=", "bool", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--combine'", ",", "type", "=", "bool", ",", "default", "=", "True", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--gat_num'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--epoch'", ",", "type", "=", "int", ",", "default", "=", "300", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "32", ")", "\n", "parser", ".", "add_argument", "(", "'--queue_length'", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--t'", ",", "type", "=", "float", ",", "default", "=", "0.08", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.9999", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "1e-6", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "type", "=", "float", ",", "default", "=", "0.3", ")", "\n", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_DWY_LaBSE_neighbor.adjust_learning_rate": [[53, 58], ["None"], "function", ["None"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "lr", ")", ":", "\n", "    ", "if", "(", "epoch", "+", "1", ")", "%", "10", "==", "0", ":", "\n", "        ", "lr", "*=", "0.5", "\n", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_SSL_DWY.LaBSEEncoder.__init__": [[70, 77], ["torch.Module.__init__", "AutoTokenizer.from_pretrained", "AutoModel.from_pretrained().to", "layers_LaBSE_SSL_DWY.NCESoftmaxLoss", "join", "AutoModel.from_pretrained", "join"], "methods", ["home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DBP15kRawLoader.DBP15kRawLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "device", ")", ":", "\n", "        ", "super", "(", "LaBSEEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "join", "(", "DATA_DIR", ",", "\"LaBSE\"", ")", ",", "do_lower_case", "=", "False", ")", "\n", "self", ".", "model", "=", "AutoModel", ".", "from_pretrained", "(", "join", "(", "DATA_DIR", ",", "\"LaBSE\"", ")", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "criterion", "=", "NCESoftmaxLoss", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_SSL_DWY.LaBSEEncoder.forward": [[78, 87], ["layers_LaBSE_SSL_DWY.LaBSEEncoder.tokenizer", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "layers_LaBSE_SSL_DWY.LaBSEEncoder.model", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "[].sum", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "sentences", "=", "batch", "\n", "#  text input must of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).", "\n", "tok_res", "=", "self", ".", "tokenizer", "(", "sentences", ",", "add_special_tokens", "=", "True", ",", "padding", "=", "'max_length'", ",", "max_length", "=", "MAX_LEN", ")", "\n", "input_ids", "=", "torch", ".", "LongTensor", "(", "[", "d", "[", ":", "MAX_LEN", "]", "for", "d", "in", "tok_res", "[", "'input_ids'", "]", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "token_type_ids", "=", "torch", ".", "LongTensor", "(", "tok_res", "[", "'token_type_ids'", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "attention_mask", "=", "torch", ".", "LongTensor", "(", "tok_res", "[", "'attention_mask'", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "output", "=", "self", ".", "model", "(", "input_ids", ",", "token_type_ids", "=", "token_type_ids", ",", "attention_mask", "=", "attention_mask", ")", "\n", "return", "F", ".", "normalize", "(", "output", "[", "0", "]", "[", ":", ",", "1", ":", "-", "1", ",", ":", "]", ".", "sum", "(", "dim", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_SSL_DWY.LaBSEEncoder.contrastive_loss": [[88, 96], ["torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "l_pos.view.view.view", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "logits.squeeze().contiguous.squeeze().contiguous.squeeze().contiguous", "layers_LaBSE_SSL_DWY.LaBSEEncoder.criterion", "pos_1.view", "pos_2.view", "pos_1.view", "neg_value.t", "logits.squeeze().contiguous.squeeze().contiguous.squeeze"], "methods", ["None"], ["", "def", "contrastive_loss", "(", "self", ",", "pos_1", ",", "pos_2", ",", "neg_value", ")", ":", "\n", "        ", "bsz", "=", "pos_1", ".", "shape", "[", "0", "]", "\n", "l_pos", "=", "torch", ".", "bmm", "(", "pos_1", ".", "view", "(", "bsz", ",", "1", ",", "-", "1", ")", ",", "pos_2", ".", "view", "(", "bsz", ",", "-", "1", ",", "1", ")", ")", "\n", "l_pos", "=", "l_pos", ".", "view", "(", "bsz", ",", "1", ")", "\n", "l_neg", "=", "torch", ".", "mm", "(", "pos_1", ".", "view", "(", "bsz", ",", "-", "1", ")", ",", "neg_value", ".", "t", "(", ")", ")", "\n", "logits", "=", "torch", ".", "cat", "(", "(", "l_pos", ",", "l_neg", ")", ",", "dim", "=", "1", ")", "\n", "logits", "=", "logits", ".", "squeeze", "(", ")", ".", "contiguous", "(", ")", "\n", "return", "self", ".", "criterion", "(", "logits", "/", "self", ".", "args", ".", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_SSL_DWY.LaBSEEncoder.contrastive_loss_st": [[97, 122], ["src_pos_1.to", "src_pos_2.to", "torch.cat.squeeze().contiguous", "torch.cat.squeeze().contiguous", "torch.cat.squeeze().contiguous", "torch.cat.squeeze().contiguous", "torch.cat.squeeze().contiguous", "torch.cat.squeeze().contiguous", "layers_LaBSE_SSL_DWY.LaBSEEncoder.criterion", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "src_pos_1.view", "src_pos_2.view", "src_pos_1.view", "src_neg.t", "tgt_pos_1.view", "tgt_pos_2.view", "tgt_pos_1.view", "tgt_neg.t", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat.squeeze", "torch.mm.unsqueeze", "torch.mm.unsqueeze", "torch.mm.unsqueeze", "torch.mm.unsqueeze", "torch.mm.unsqueeze", "torch.mm.unsqueeze", "torch.mm.unsqueeze", "torch.mm.unsqueeze", "torch.mm.unsqueeze", "torch.mm.unsqueeze", "torch.mm.unsqueeze", "torch.mm.unsqueeze"], "methods", ["None"], ["", "def", "contrastive_loss_st", "(", "self", ",", "src_pos_1", ",", "tgt_pos_1", ",", "src_pos_2", ",", "tgt_pos_2", ",", "src_neg", ",", "tgt_neg", ")", ":", "\n", "        ", "src_pos_1", ".", "to", "(", "self", ".", "device", ")", "\n", "src_pos_2", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "bsz_src", "=", "src_pos_1", ".", "shape", "[", "0", "]", "\n", "if", "bsz_src", ">", "0", ":", "\n", "            ", "src_pos_logits", "=", "torch", ".", "bmm", "(", "src_pos_1", ".", "view", "(", "bsz_src", ",", "1", ",", "-", "1", ")", ",", "src_pos_2", ".", "view", "(", "bsz_src", ",", "-", "1", ",", "1", ")", ")", "\n", "src_neg_logits", "=", "torch", ".", "mm", "(", "src_pos_1", ".", "view", "(", "bsz_src", ",", "-", "1", ")", ",", "src_neg", ".", "t", "(", ")", ")", "\n", "src_logits", "=", "torch", ".", "cat", "(", "(", "src_pos_logits", ",", "src_neg_logits", ".", "unsqueeze", "(", "1", ")", ")", ",", "dim", "=", "2", ")", "\n", "\n", "", "bsz_tgt", "=", "tgt_pos_1", ".", "shape", "[", "0", "]", "\n", "if", "bsz_tgt", ">", "0", ":", "\n", "            ", "tgt_pos_logits", "=", "torch", ".", "bmm", "(", "tgt_pos_1", ".", "view", "(", "bsz_tgt", ",", "1", ",", "-", "1", ")", ",", "tgt_pos_2", ".", "view", "(", "bsz_tgt", ",", "-", "1", ",", "1", ")", ")", "\n", "tgt_neg_logits", "=", "torch", ".", "mm", "(", "tgt_pos_1", ".", "view", "(", "bsz_tgt", ",", "-", "1", ")", ",", "tgt_neg", ".", "t", "(", ")", ")", "\n", "tgt_logits", "=", "torch", ".", "cat", "(", "(", "tgt_pos_logits", ",", "tgt_neg_logits", ".", "unsqueeze", "(", "1", ")", ")", ",", "dim", "=", "2", ")", "\n", "\n", "", "if", "bsz_src", ">", "0", "and", "bsz_tgt", ">", "0", ":", "\n", "            ", "logits", "=", "torch", ".", "cat", "(", "(", "src_logits", ",", "tgt_logits", ")", ",", "dim", "=", "0", ")", "\n", "", "elif", "bsz_src", ">", "0", ":", "\n", "            ", "logits", "=", "src_logits", "\n", "", "else", ":", "\n", "            ", "logits", "=", "tgt_logits", "\n", "\n", "", "logits", "=", "logits", ".", "squeeze", "(", ")", ".", "contiguous", "(", ")", "\n", "return", "self", ".", "criterion", "(", "logits", "/", "self", ".", "args", ".", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_SSL_DWY.LaBSEEncoder.update": [[123, 128], ["zip", "layers_LaBSE_SSL_DWY.LaBSEEncoder.eval", "layers_LaBSE_SSL_DWY.LaBSEEncoder.parameters", "network.parameters"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "network", ":", "nn", ".", "Module", ")", ":", "\n", "        ", "for", "key_param", ",", "query_param", "in", "zip", "(", "self", ".", "parameters", "(", ")", ",", "network", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "key_param", ".", "data", "*=", "self", ".", "args", ".", "momentum", "\n", "key_param", ".", "data", "+=", "(", "1", "-", "self", ".", "args", ".", "momentum", ")", "*", "query_param", ".", "data", "\n", "", "self", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_SSL_DWY.NCESoftmaxLoss.__init__": [[131, 135], ["torch.Module.__init__", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DBP15kRawLoader.DBP15kRawLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "device", ")", ":", "\n", "        ", "super", "(", "NCESoftmaxLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_SSL_DWY.NCESoftmaxLoss.forward": [[136, 142], ["x.squeeze.squeeze.squeeze", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "layers_LaBSE_SSL_DWY.NCESoftmaxLoss.criterion", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch_size", "=", "x", ".", "shape", "[", "0", "]", "\n", "x", "=", "x", ".", "squeeze", "(", ")", "\n", "label", "=", "torch", ".", "zeros", "(", "[", "batch_size", "]", ")", ".", "to", "(", "self", ".", "device", ")", ".", "long", "(", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "x", ",", "label", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_SSL_DWY.Trainer.__init__": [[145, 200], ["fix_seed", "argparse.ArgumentParser", "layers_LaBSE_SSL_DWY.parse_options", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "layers_LaBSE_SSL_DWY.Trainer.__init__.link_loader"], "methods", ["home.repos.pwc.inspect_result.THUDM_SelfKG.None.settings.fix_seed", "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_SSL_DWY.parse_options", "home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DBP15k.DBP15kLoader.link_loader"], ["    ", "def", "__init__", "(", "self", ",", "training", "=", "True", ",", "seed", "=", "37", ")", ":", "\n", "# # Set the random seed manually for reproducibility.", "\n", "        ", "fix_seed", "(", "seed", ")", "\n", "\n", "# set", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "self", ".", "args", "=", "parse_options", "(", "parser", ")", "\n", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "self", ".", "args", ".", "device", ")", "\n", "\n", "self", ".", "loader1", "=", "DWY100KLoader", "(", "self", ".", "args", ".", "dir", ",", "'1'", ")", ".", "id_ent", "\n", "self", ".", "loader2", "=", "DWY100KLoader", "(", "self", ".", "args", ".", "dir", ",", "'2'", ")", ".", "id_ent", "\n", "\n", "self", ".", "batch_str_1", "=", "[", "]", "\n", "self", ".", "batch_str_2", "=", "[", "]", "\n", "\n", "self", ".", "model", "=", "None", "\n", "self", ".", "iteration", "=", "0", "\n", "\n", "# get the linked entity ids", "\n", "def", "link_loader", "(", "mode", ",", "valid", "=", "False", ")", ":", "\n", "            ", "link", "=", "{", "}", "\n", "f", "=", "'valid.ref'", "if", "valid", "else", "'ref_ent_ids'", "\n", "link_data", "=", "pd", ".", "read_csv", "(", "join", "(", "join", "(", "DATA_DIR", ",", "'DWY100K'", ",", "mode", ")", ",", "f", ")", ",", "sep", "=", "'\\t'", ",", "header", "=", "None", ")", "\n", "link_data", ".", "columns", "=", "[", "'entity1'", ",", "'entity2'", "]", "\n", "entity1_id", "=", "link_data", "[", "'entity1'", "]", ".", "values", ".", "tolist", "(", ")", "\n", "entity2_id", "=", "link_data", "[", "'entity2'", "]", ".", "values", ".", "tolist", "(", ")", "\n", "for", "i", ",", "_", "in", "enumerate", "(", "entity1_id", ")", ":", "\n", "                ", "link", "[", "entity1_id", "[", "i", "]", "]", "=", "entity2_id", "[", "i", "]", "\n", "link", "[", "entity2_id", "[", "i", "]", "]", "=", "entity1_id", "[", "i", "]", "\n", "", "return", "link", "\n", "\n", "", "self", ".", "link", "=", "link_loader", "(", "self", ".", "args", ".", "dir", ")", "\n", "self", ".", "val_link", "=", "link_loader", "(", "self", ".", "args", ".", "dir", ",", "True", ")", "\n", "\n", "# queue for negative samples for 2 dir sets", "\n", "self", ".", "neg_queue1", "=", "[", "]", "\n", "self", ".", "neg_queue2", "=", "[", "]", "\n", "\n", "self", ".", "id_list1", "=", "[", "]", "\n", "\n", "if", "training", ":", "\n", "            ", "self", ".", "writer", "=", "SummaryWriter", "(", "\n", "log_dir", "=", "join", "(", "PROJ_DIR", ",", "'log'", ",", "self", ".", "args", ".", "model", ",", "self", ".", "args", ".", "model_dir", ",", "self", ".", "args", ".", "time", ")", ",", "\n", "comment", "=", "self", ".", "args", ".", "time", ")", "\n", "\n", "self", ".", "model", "=", "LaBSEEncoder", "(", "self", ".", "args", ",", "self", ".", "device", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "_model", "=", "LaBSEEncoder", "(", "self", ".", "args", ",", "self", ".", "device", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "_model", ".", "update", "(", "self", ".", "model", ")", "\n", "\n", "emb_dim", "=", "EMBED_DIM", "\n", "\n", "self", ".", "iteration", "=", "0", "\n", "self", ".", "lr", "=", "self", ".", "args", ".", "lr", "\n", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "params", "=", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "lr", ")", "\n", "", "", "def", "save_model", "(", "self", ",", "model", ",", "epoch", ")", ":", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_SSL_DWY.Trainer.save_model": [[200, 210], ["os.makedirs", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "join", "join", "str", "str", "str"], "methods", ["None"], ["", "", "def", "save_model", "(", "self", ",", "model", ",", "epoch", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "join", "(", "PROJ_DIR", ",", "'checkpoints'", ",", "self", ".", "args", ".", "model", ",", "self", ".", "args", ".", "model_dir", ")", ",", "exist_ok", "=", "True", ")", "\n", "torch", ".", "save", "(", "model", ",", "join", "(", "PROJ_DIR", ",", "'checkpoints'", ",", "self", ".", "args", ".", "model", ",", "self", ".", "args", ".", "model_dir", ",", "\n", "\"model\"", "\n", "+", "\"_neighbor_\"", "+", "\"False\"", "\n", "+", "\"_semantic_\"", "+", "\"True\"", "\n", "+", "\"_epoch_\"", "+", "str", "(", "epoch", ")", "\n", "+", "\"_batch_size_\"", "+", "str", "(", "BATCH_SIZE", ")", "\n", "+", "\"_neg_queue_len_\"", "+", "str", "(", "self", ".", "args", ".", "queue_length", "-", "1", ")", "\n", "+", "'.ckpt'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_SSL_DWY.Trainer.evaluate": [[211, 257], ["print", "enumerate", "enumerate", "print", "layers_LaBSE_SSL_DWY.Trainer.evaluate.cal_hit"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ",", "step", ")", ":", "\n", "        ", "print", "(", "\"Evaluate at epoch {}...\"", ".", "format", "(", "step", ")", ")", "\n", "ids_1", ",", "ids_2", ",", "vector_1", ",", "vector_2", "=", "list", "(", ")", ",", "list", "(", ")", ",", "list", "(", ")", ",", "list", "(", ")", "\n", "\n", "self", ".", "inv1", ",", "self", ".", "inv2", "=", "dict", "(", ")", ",", "dict", "(", ")", "\n", "self", ".", "idx2entid_1", ",", "self", ".", "idx2entid_2", "=", "dict", "(", ")", ",", "dict", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "model", ".", "eval", "(", ")", "\n", "for", "sample_id_1", ",", "(", "id_data_1", ",", "ent_name_1", ")", "in", "tqdm", "(", "enumerate", "(", "self", ".", "batch_str_1", ")", ")", ":", "\n", "                ", "entity_vector_1", "=", "self", ".", "model", "(", "ent_name_1", ")", ".", "squeeze", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "ids_1", ".", "extend", "(", "id_data_1", ")", "\n", "vector_1", ".", "append", "(", "entity_vector_1", ")", "\n", "\n", "", "for", "sample_id_2", ",", "(", "id_data_2", ",", "ent_name_2", ")", "in", "tqdm", "(", "enumerate", "(", "self", ".", "batch_str_2", ")", ")", ":", "\n", "                ", "entity_vector_2", "=", "self", ".", "model", "(", "ent_name_2", ")", ".", "squeeze", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "ids_2", ".", "extend", "(", "id_data_2", ")", "\n", "vector_2", ".", "append", "(", "entity_vector_2", ")", "\n", "\n", "\n", "", "", "for", "idx", ",", "_id", "in", "enumerate", "(", "ids_1", ")", ":", "\n", "            ", "self", ".", "inv1", "[", "_id", "]", "=", "idx", "\n", "", "for", "idx", ",", "_id", "in", "enumerate", "(", "ids_2", ")", ":", "\n", "            ", "self", ".", "inv2", "[", "_id", "]", "=", "idx", "\n", "\n", "", "def", "cal_hit", "(", "v1", ",", "v2", ",", "link", ")", ":", "\n", "            ", "source", "=", "[", "_id", "for", "_id", "in", "ids_1", "if", "_id", "in", "link", "]", "\n", "target", "=", "np", ".", "array", "(", "\n", "[", "self", ".", "inv2", "[", "link", "[", "_id", "]", "]", "if", "link", "[", "_id", "]", "in", "self", ".", "inv2", "else", "9999999", "for", "_id", "in", "source", "]", ")", "\n", "src_idx", "=", "[", "idx", "for", "idx", "in", "range", "(", "len", "(", "ids_1", ")", ")", "if", "ids_1", "[", "idx", "]", "in", "link", "]", "\n", "v1", "=", "np", ".", "concatenate", "(", "tuple", "(", "v1", ")", ",", "axis", "=", "0", ")", "[", "src_idx", ",", ":", "]", "\n", "v2", "=", "np", ".", "concatenate", "(", "tuple", "(", "v2", ")", ",", "axis", "=", "0", ")", "\n", "index", "=", "faiss", ".", "IndexFlatL2", "(", "v2", ".", "shape", "[", "1", "]", ")", "\n", "index", ".", "add", "(", "np", ".", "ascontiguousarray", "(", "v2", ")", ")", "\n", "D", ",", "I", "=", "index", ".", "search", "(", "np", ".", "ascontiguousarray", "(", "v1", ")", ",", "10", ")", "\n", "hit1", "=", "(", "I", "[", ":", ",", "0", "]", "==", "target", ")", ".", "astype", "(", "np", ".", "int32", ")", ".", "sum", "(", ")", "/", "len", "(", "source", ")", "\n", "hit10", "=", "(", "I", "==", "target", "[", ":", ",", "np", ".", "newaxis", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", ".", "sum", "(", ")", "/", "len", "(", "source", ")", "\n", "print", "(", "\"#Entity:\"", ",", "len", "(", "source", ")", ")", "\n", "print", "(", "\"Hit@1: \"", ",", "round", "(", "hit1", ",", "4", ")", ")", "\n", "print", "(", "\"Hit@10:\"", ",", "round", "(", "hit10", ",", "4", ")", ")", "\n", "return", "hit1", ",", "hit10", "\n", "", "print", "(", "'========Validation========'", ")", "\n", "hit1_valid", ",", "hit10_valid", "=", "cal_hit", "(", "vector_1", ",", "vector_2", ",", "self", ".", "val_link", ")", "\n", "print", "(", "'===========Test==========='", ")", "\n", "hit1_test", ",", "hit10_test", "=", "cal_hit", "(", "vector_1", ",", "vector_2", ",", "self", ".", "link", ")", "\n", "return", "hit1_valid", ",", "hit10_valid", ",", "hit1_test", ",", "hit10_test", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_SSL_DWY.Trainer.train": [[259, 388], ["enumerate", "layers_LaBSE_SSL_DWY.Trainer.batch_str_1.append", "enumerate", "layers_LaBSE_SSL_DWY.Trainer.batch_str_2.append", "print", "layers_LaBSE_SSL_DWY.Trainer.evaluate", "enumerate", "enumerate", "random.shuffle", "range", "layers_LaBSE_SSL_DWY.Trainer.loader1.items", "batch[].append", "batch[].append", "layers_LaBSE_SSL_DWY.Trainer.loader2.items", "batch[].append", "batch[].append", "all_data_batches.append", "all_data_batches.append", "layers_LaBSE_SSL_DWY.adjust_learning_rate", "tqdm", "layers_LaBSE_SSL_DWY.Trainer.evaluate", "print", "print", "print", "print", "print", "layers_LaBSE_SSL_DWY.Trainer.batch_str_1.append", "layers_LaBSE_SSL_DWY.Trainer.batch_str_2.append", "enumerate", "layers_LaBSE_SSL_DWY.Trainer.optimizer.zero_grad", "layers_LaBSE_SSL_DWY.Trainer.model", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "layers_LaBSE_SSL_DWY.Trainer.model.contrastive_loss", "layers_LaBSE_SSL_DWY.Trainer.writer.add_scalar", "layers_LaBSE_SSL_DWY.Trainer.backward", "layers_LaBSE_SSL_DWY.Trainer.optimizer.step", "layers_LaBSE_SSL_DWY.Trainer._model.update", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "layers_LaBSE_SSL_DWY.Trainer._model.eval", "layers_LaBSE_SSL_DWY.Trainer._model", "enumerate", "join", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "layers_LaBSE_SSL_DWY.Trainer.neg_queue1.append", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "layers_LaBSE_SSL_DWY.Trainer.neg_queue2.append", "len", "neg_value_list.append", "layers_LaBSE_SSL_DWY.Trainer._model", "layers_LaBSE_SSL_DWY.Trainer.detach().cpu", "layers_LaBSE_SSL_DWY.Trainer.detach"], "methods", ["home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_SSL_DWY.Trainer.evaluate", "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_SSL_DWY.adjust_learning_rate", "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_SSL_DWY.Trainer.evaluate", "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_SSL_DWY.LaBSEEncoder.contrastive_loss", "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_SSL_DWY.LaBSEEncoder.update"], ["", "def", "train", "(", "self", ",", "start", "=", "0", ")", ":", "\n", "        ", "batch_size", "=", "self", ".", "args", ".", "batch_size", "\n", "batch", "=", "[", "[", "]", ",", "[", "]", "]", "\n", "for", "i", ",", "(", "_id", ",", "_ent_name", ")", "in", "enumerate", "(", "self", ".", "loader1", ".", "items", "(", ")", ")", ":", "\n", "            ", "batch", "[", "0", "]", ".", "append", "(", "_id", ")", "\n", "batch", "[", "1", "]", ".", "append", "(", "_ent_name", ")", "\n", "if", "(", "i", "+", "1", ")", "%", "batch_size", "==", "0", ":", "\n", "                ", "self", ".", "batch_str_1", ".", "append", "(", "batch", ")", "\n", "batch", "=", "[", "[", "]", ",", "[", "]", "]", "\n", "", "", "self", ".", "batch_str_1", ".", "append", "(", "batch", ")", "\n", "\n", "batch", "=", "[", "[", "]", ",", "[", "]", "]", "\n", "for", "i", ",", "(", "_id", ",", "_ent_name", ")", "in", "enumerate", "(", "self", ".", "loader2", ".", "items", "(", ")", ")", ":", "\n", "            ", "batch", "[", "0", "]", ".", "append", "(", "_id", ")", "\n", "batch", "[", "1", "]", ".", "append", "(", "_ent_name", ")", "\n", "if", "(", "i", "+", "1", ")", "%", "batch_size", "==", "0", ":", "\n", "                ", "self", ".", "batch_str_2", ".", "append", "(", "batch", ")", "\n", "batch", "=", "[", "[", "]", ",", "[", "]", "]", "\n", "", "", "self", ".", "batch_str_2", ".", "append", "(", "batch", ")", "\n", "\n", "print", "(", "\"*** Evaluate at the very beginning ***\"", ")", "\n", "self", ".", "evaluate", "(", "0", ")", "\n", "\n", "all_data_batches", "=", "[", "]", "\n", "for", "batch_id", ",", "(", "id_data_1", ",", "ent_name_1", ")", "in", "enumerate", "(", "self", ".", "batch_str_1", ")", ":", "\n", "            ", "all_data_batches", ".", "append", "(", "[", "1", ",", "ent_name_1", ",", "id_data_1", "]", ")", "\n", "", "for", "batch_id", ",", "(", "id_data_2", ",", "ent_name_2", ")", "in", "enumerate", "(", "self", ".", "batch_str_2", ")", ":", "\n", "            ", "all_data_batches", ".", "append", "(", "[", "2", ",", "ent_name_2", ",", "id_data_2", "]", ")", "\n", "", "random", ".", "shuffle", "(", "all_data_batches", ")", "\n", "\n", "neg_queue", "=", "[", "]", "\n", "\n", "best_hit1_valid_epoch", "=", "0", "\n", "best_hit10_valid_epoch", "=", "0", "\n", "best_hit1_test_epoch", "=", "0", "\n", "best_hit10_test_epoch", "=", "0", "\n", "best_hit1_valid", "=", "0", "\n", "best_hit10_valid", "=", "0", "\n", "best_hit1_valid_hit10", "=", "0", "\n", "best_hit10_valid_hit1", "=", "0", "\n", "best_hit1_test", "=", "0", "\n", "best_hit10_test", "=", "0", "\n", "best_hit1_test_hit10", "=", "0", "\n", "best_hit10_test_hit1", "=", "0", "\n", "for", "epoch", "in", "range", "(", "start", ",", "self", ".", "args", ".", "epoch", ")", ":", "\n", "            ", "adjust_learning_rate", "(", "self", ".", "optimizer", ",", "epoch", ",", "self", ".", "lr", ")", "\n", "pos_token", "=", "None", "\n", "for", "batch_id", ",", "(", "dir_id", ",", "token_data", ",", "id_data", ")", "in", "tqdm", "(", "enumerate", "(", "all_data_batches", ")", ")", ":", "\n", "                ", "if", "dir_id", "==", "1", ":", "\n", "                    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "self", ".", "neg_queue1", ".", "append", "(", "token_data", ")", "\n", "\n", "", "if", "len", "(", "self", ".", "neg_queue1", ")", "==", "self", ".", "args", ".", "queue_length", "+", "1", ":", "\n", "                        ", "pos_token", "=", "self", ".", "neg_queue1", "[", "0", "]", "\n", "self", ".", "neg_queue1", "=", "self", ".", "neg_queue1", "[", "1", ":", "]", "\n", "neg_queue", "=", "self", ".", "neg_queue1", "\n", "", "else", ":", "\n", "                        ", "continue", "\n", "\n", "", "", "else", ":", "\n", "                    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "self", ".", "neg_queue2", ".", "append", "(", "token_data", ")", "\n", "\n", "", "if", "len", "(", "self", ".", "neg_queue2", ")", "==", "self", ".", "args", ".", "queue_length", "+", "1", ":", "\n", "                        ", "pos_token", "=", "self", ".", "neg_queue2", "[", "0", "]", "\n", "self", ".", "neg_queue2", "=", "self", ".", "neg_queue2", "[", "1", ":", "]", "\n", "neg_queue", "=", "self", ".", "neg_queue2", "\n", "", "else", ":", "\n", "                        ", "continue", "\n", "\n", "# implement queue", "\n", "\n", "", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "pos_1", "=", "self", ".", "model", "(", "pos_token", ")", "\n", "\n", "neg_value_list", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "self", ".", "_model", ".", "eval", "(", ")", "\n", "pos_2", "=", "self", ".", "_model", "(", "pos_token", ")", "\n", "\n", "# the first batch is not negative samples", "\n", "for", "i", ",", "neg", "in", "enumerate", "(", "neg_queue", ")", ":", "\n", "                        ", "neg_value_list", ".", "append", "(", "self", ".", "_model", "(", "neg", ")", ")", "\n", "\n", "", "", "neg_value", "=", "torch", ".", "cat", "(", "neg_value_list", ",", "0", ")", "\n", "\n", "# contrastive loss", "\n", "contrastive_loss", "=", "self", ".", "model", ".", "contrastive_loss", "(", "pos_1", ",", "pos_2", ",", "neg_value", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "join", "(", "self", ".", "args", ".", "model", ",", "'contrastive_loss'", ")", ",", "contrastive_loss", ".", "data", ",", "\n", "self", ".", "iteration", ")", "\n", "\n", "self", ".", "iteration", "+=", "1", "\n", "\n", "contrastive_loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "batch_id", "%", "200", "==", "0", ":", "\n", "                    ", "print", "(", "'epoch: {} batch: {} loss: {}'", ".", "format", "(", "epoch", ",", "batch_id", ",", "\n", "contrastive_loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "data", "/", "self", ".", "args", ".", "batch_size", ")", ")", "\n", "\n", "# update", "\n", "", "self", ".", "_model", ".", "update", "(", "self", ".", "model", ")", "\n", "\n", "# self.save_model(self.model, epoch)", "\n", "", "hit1_valid", ",", "hit10_valid", ",", "hit1_test", ",", "hit10_test", "=", "self", ".", "evaluate", "(", "epoch", ")", "\n", "if", "hit1_valid", ">", "best_hit1_valid", ":", "\n", "                ", "best_hit1_valid", "=", "hit1_valid", "\n", "best_hit1_valid_hit10", "=", "hit10_valid", "\n", "best_hit1_valid_epoch", "=", "epoch", "\n", "", "if", "hit10_valid", ">", "best_hit10_valid", ":", "\n", "                ", "best_hit10_valid", "=", "hit10_valid", "\n", "best_hit10_valid_hit1", "=", "hit1_valid", "\n", "best_hit10_valid_epoch", "=", "epoch", "\n", "\n", "", "if", "hit1_test", ">", "best_hit1_test", ":", "\n", "                ", "best_hit1_test", "=", "hit1_test", "\n", "best_hit1_test_hit10", "=", "hit10_test", "\n", "best_hit1_test_epoch", "=", "epoch", "\n", "", "if", "hit10_test", ">", "best_hit10_test", ":", "\n", "                ", "best_hit10_test", "=", "hit10_test", "\n", "best_hit10_test_hit1", "=", "hit1_test", "\n", "best_hit10_test_epoch", "=", "epoch", "\n", "", "print", "(", "'Best Valid Hit@1  = {}({}) at epoch {}'", ".", "format", "(", "best_hit1_valid", ",", "best_hit1_valid_hit10", ",", "best_hit1_valid_epoch", ")", ")", "\n", "print", "(", "'Best Valid Hit@10 = {}({}) at epoch {}'", ".", "format", "(", "best_hit10_valid", ",", "best_hit10_valid_hit1", ",", "best_hit10_valid_epoch", ")", ")", "\n", "print", "(", "'Best Test  Hit@1  = {}({}) at epoch {}'", ".", "format", "(", "best_hit1_test", ",", "best_hit1_test_hit10", ",", "best_hit1_test_epoch", ")", ")", "\n", "print", "(", "'Best Test  Hit@10 = {}({}) at epoch {}'", ".", "format", "(", "best_hit10_test", ",", "best_hit10_test_hit1", ",", "best_hit10_test_epoch", ")", ")", "\n", "print", "(", "\"====================================\"", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_SSL_DWY.parse_options": [[45, 62], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.parse_args", "datetime.datetime.now().strftime", "datetime.datetime.now"], "function", ["None"], ["def", "parse_options", "(", "parser", ")", ":", "\n", "    ", "parser", ".", "add_argument", "(", "'--device'", ",", "type", "=", "str", ",", "default", "=", "'cuda:0'", ")", "\n", "parser", ".", "add_argument", "(", "'--time'", ",", "type", "=", "str", ",", "default", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y%m%d%H%M%S\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--dir'", ",", "type", "=", "str", ",", "default", "=", "'dbp_wd'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_dir'", ",", "type", "=", "str", ",", "default", "=", "'dbp_wd'", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'LaBSE'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--epoch'", ",", "type", "=", "int", ",", "default", "=", "300", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "parser", ".", "add_argument", "(", "'--queue_length'", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--t'", ",", "type", "=", "float", ",", "default", "=", "0.08", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.9999", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "1e-6", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "type", "=", "float", ",", "default", "=", "0.3", ")", "\n", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.model.layers_LaBSE_SSL_DWY.adjust_learning_rate": [[63, 68], ["None"], "function", ["None"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "lr", ")", ":", "\n", "    ", "if", "(", "epoch", "+", "1", ")", "%", "10", "==", "0", ":", "\n", "        ", "lr", "*=", "0.5", "\n", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.preprocess.get_token.Token.__init__": [[9, 47], ["get_token.Token.__init__.get_token"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "loader", ")", ":", "\n", "        ", "self", ".", "loader", "=", "loader", "\n", "self", ".", "embedding_list", "=", "[", "]", "\n", "\n", "def", "get_token", "(", ")", ":", "\n", "            ", "id_features_dict", "=", "{", "}", "\n", "loader_id_features_copy", "=", "self", ".", "loader", ".", "id_features", "[", "'features'", "]", ".", "copy", "(", ")", "\n", "loader_id", "=", "self", ".", "loader", ".", "id_features", "[", "'id'", "]", ".", "values", ".", "tolist", "(", ")", "\n", "\n", "# max length of feature vector", "\n", "# max_len = 0", "\n", "for", "i", ",", "feature", "in", "enumerate", "(", "loader_id_features_copy", ")", ":", "\n", "\n", "                ", "_feature", "=", "feature", ".", "strip", "(", ")", "\n", "token_list", "=", "[", "]", "\n", "\n", "# ord(' ')=32 is the padding", "\n", "for", "ch", "in", "_feature", ":", "\n", "                    ", "token_list", ".", "append", "(", "ord", "(", "ch", ")", ")", "\n", "\n", "# if max_len < len(token_list):", "\n", "#     max_len = len(token_list)", "\n", "\n", "", "id_features_dict", "[", "loader_id", "[", "i", "]", "]", "=", "token_list", "\n", "\n", "# padding to the same length, use token length in settings.py", "\n", "", "len_list", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "id_features_dict", ".", "items", "(", ")", ":", "\n", "                ", "len_list", ".", "append", "(", "len", "(", "v", ")", ")", "\n", "if", "len", "(", "v", ")", "<=", "TOKEN_LEN", ":", "\n", "                    ", "id_features_dict", "[", "k", "]", "=", "v", "+", "[", "ord", "(", "' '", ")", "]", "*", "(", "TOKEN_LEN", "-", "len", "(", "v", ")", ")", "\n", "", "else", ":", "\n", "                    ", "id_features_dict", "[", "k", "]", "=", "v", "[", ":", "TOKEN_LEN", "]", "\n", "\n", "# print(\"np.percentile(len_list, 90): \", np.percentile(len_list, 90))", "\n", "", "", "return", "id_features_dict", "\n", "\n", "", "self", ".", "id_features_dict", "=", "get_token", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.THUDM_SelfKG.preprocess.neighbor_token.NeighborToken.__init__": [[11, 34], ["neighbor_token.NeighborToken.__init__.get_token"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dbpToken", ",", "loader", ")", ":", "\n", "        ", "self", ".", "loader", "=", "loader", "\n", "self", ".", "id_features_dict", "=", "dbpToken", ".", "id_features_dict", "\n", "\n", "def", "get_token", "(", ")", ":", "\n", "            ", "id_neighbors_dict", "=", "{", "}", "\n", "loader_id_neighbors_dict_copy", "=", "self", ".", "loader", ".", "id_neighbors_dict", "\n", "\n", "for", "entity_id", ",", "neighbors_dict", "in", "loader_id_neighbors_dict_copy", ".", "items", "(", ")", ":", "\n", "                ", "id_neighbors_dict", "[", "entity_id", "]", "=", "[", "]", "\n", "id_neighbors_dict", "[", "entity_id", "]", ".", "append", "(", "self", ".", "id_features_dict", "[", "entity_id", "]", ")", "\n", "for", "rel", ",", "neighbor", "in", "neighbors_dict", ".", "items", "(", ")", ":", "\n", "                    ", "for", "neigh", "in", "neighbor", ":", "\n", "                        ", "id_neighbors_dict", "[", "entity_id", "]", ".", "append", "(", "self", ".", "id_features_dict", "[", "neigh", "]", ")", "\n", "", "", "", "for", "k", ",", "v", "in", "id_neighbors_dict", ".", "items", "(", ")", ":", "\n", "                ", "if", "len", "(", "v", ")", "<=", "NEIGHBOR_SIZE", ":", "\n", "                    ", "id_neighbors_dict", "[", "k", "]", "=", "v", "+", "[", "[", "ord", "(", "' '", ")", "]", "*", "TOKEN_LEN", "]", "*", "(", "NEIGHBOR_SIZE", "-", "len", "(", "v", ")", ")", "\n", "", "else", ":", "\n", "                    ", "id_neighbors_dict", "[", "k", "]", "=", "v", "[", ":", "NEIGHBOR_SIZE", "]", "\n", "\n", "", "", "return", "id_neighbors_dict", "\n", "\n", "", "self", ".", "id_neighbors_dict", "=", "get_token", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.preprocess.labse_dump.LaBSEEncoder.__init__": [[47, 52], ["torch.Module.__init__", "AutoTokenizer.from_pretrained", "AutoModel.from_pretrained().to", "join", "AutoModel.from_pretrained", "join"], "methods", ["home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DBP15kRawLoader.DBP15kRawLoader.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "LaBSEEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "join", "(", "DATA_DIR", ",", "\"LaBSE\"", ")", ",", "do_lower_case", "=", "False", ")", "\n", "self", ".", "model", "=", "AutoModel", ".", "from_pretrained", "(", "join", "(", "DATA_DIR", ",", "\"LaBSE\"", ")", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.preprocess.labse_dump.LaBSEEncoder.forward": [[53, 62], ["labse_dump.LaBSEEncoder.tokenizer", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "labse_dump.LaBSEEncoder.model", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "[].sum", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "sentences", "=", "batch", "\n", "#  text input must of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).", "\n", "tok_res", "=", "self", ".", "tokenizer", "(", "sentences", ",", "add_special_tokens", "=", "True", ",", "padding", "=", "'max_length'", ",", "max_length", "=", "MAX_LEN", ")", "\n", "input_ids", "=", "torch", ".", "LongTensor", "(", "[", "d", "[", ":", "MAX_LEN", "]", "for", "d", "in", "tok_res", "[", "'input_ids'", "]", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "token_type_ids", "=", "torch", ".", "LongTensor", "(", "tok_res", "[", "'token_type_ids'", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "attention_mask", "=", "torch", ".", "LongTensor", "(", "tok_res", "[", "'attention_mask'", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "output", "=", "self", ".", "model", "(", "input_ids", ",", "token_type_ids", "=", "token_type_ids", ",", "attention_mask", "=", "attention_mask", ")", "\n", "return", "F", ".", "normalize", "(", "output", "[", "0", "]", "[", ":", ",", "1", ":", "-", "1", ",", ":", "]", ".", "sum", "(", "dim", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.preprocess.labse_dump.Embedding.__init__": [[65, 71], ["LaBSEEncoder().to", "loader.DBP15kRawLoader.DBP15kRawLoader", "loader.DBP15kRawLoader.DBP15kRawLoader", "labse_dump.LaBSEEncoder"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "loader1", "=", "DBP15kRawLoader", "(", "language", ",", "'1'", ")", ".", "id_entity", "\n", "self", ".", "loader2", "=", "DBP15kRawLoader", "(", "language", ",", "'2'", ")", ".", "id_entity", "\n", "\n", "self", ".", "model", "=", "LaBSEEncoder", "(", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.preprocess.labse_dump.Embedding.embedding": [[72, 87], ["tqdm", "tqdm", "enumerate", "labse_dump.Embedding.model().cpu().detach().numpy().tolist", "open", "pickle.dump", "enumerate", "labse_dump.Embedding.model().cpu().detach().numpy().tolist", "open", "pickle.dump", "labse_dump.Embedding.loader1.items", "join", "labse_dump.Embedding.loader2.items", "join", "labse_dump.Embedding.model().cpu().detach().numpy", "int", "labse_dump.Embedding.model().cpu().detach().numpy", "int", "labse_dump.Embedding.model().cpu().detach", "labse_dump.Embedding.model().cpu().detach", "labse_dump.Embedding.model().cpu", "labse_dump.Embedding.model().cpu", "labse_dump.Embedding.model", "labse_dump.Embedding.model"], "methods", ["None"], ["", "def", "embedding", "(", "self", ")", ":", "\n", "\n", "        ", "id_embedding_1", "=", "{", "}", "\n", "for", "i", ",", "(", "_id", ",", "_ent_name", ")", "in", "tqdm", "(", "enumerate", "(", "self", ".", "loader1", ".", "items", "(", ")", ")", ")", ":", "\n", "            ", "emb", "=", "self", ".", "model", "(", "[", "_ent_name", "]", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "id_embedding_1", "[", "int", "(", "_id", ")", "]", "=", "emb", "\n", "", "with", "open", "(", "join", "(", "dir_path", ",", "\"raw_LaBSE_emb_1.pkl\"", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "id_embedding_1", ",", "f", ")", "\n", "\n", "", "id_embedding_2", "=", "{", "}", "\n", "for", "i", ",", "(", "_id", ",", "_ent_name", ")", "in", "tqdm", "(", "enumerate", "(", "self", ".", "loader2", ".", "items", "(", ")", ")", ")", ":", "\n", "            ", "emb", "=", "self", ".", "model", "(", "[", "_ent_name", "]", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "id_embedding_2", "[", "int", "(", "_id", ")", "]", "=", "emb", "\n", "", "with", "open", "(", "join", "(", "dir_path", ",", "\"raw_LaBSE_emb_2.pkl\"", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "id_embedding_2", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.preprocess.labse_dump.DWYEmbedding.__init__": [[89, 95], ["LaBSEEncoder().to", "loader.DWY100K.DWY100KLoader", "loader.DWY100K.DWY100KLoader", "labse_dump.LaBSEEncoder"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "loader1", "=", "DWY100KLoader", "(", "\"dbp_wd\"", ",", "'1'", ")", ".", "id_ent", "\n", "self", ".", "loader2", "=", "DWY100KLoader", "(", "\"dbp_wd\"", ",", "'2'", ")", ".", "id_ent", "\n", "\n", "self", ".", "model", "=", "LaBSEEncoder", "(", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.preprocess.labse_dump.DWYEmbedding.embedding": [[96, 111], ["enumerate", "enumerate", "labse_dump.DWYEmbedding.loader1.items", "labse_dump.DWYEmbedding.model().cpu().detach().numpy().tolist", "open", "pickle.dump", "labse_dump.DWYEmbedding.loader2.items", "labse_dump.DWYEmbedding.model().cpu().detach().numpy().tolist", "open", "pickle.dump", "join", "join", "labse_dump.DWYEmbedding.model().cpu().detach().numpy", "int", "labse_dump.DWYEmbedding.model().cpu().detach().numpy", "int", "labse_dump.DWYEmbedding.model().cpu().detach", "labse_dump.DWYEmbedding.model().cpu().detach", "labse_dump.DWYEmbedding.model().cpu", "labse_dump.DWYEmbedding.model().cpu", "labse_dump.DWYEmbedding.model", "labse_dump.DWYEmbedding.model"], "methods", ["None"], ["", "def", "embedding", "(", "self", ",", "dir_path", ")", ":", "\n", "\n", "        ", "id_embedding_1", "=", "{", "}", "\n", "for", "i", ",", "(", "_id", ",", "_ent_name", ")", "in", "enumerate", "(", "self", ".", "loader1", ".", "items", "(", ")", ")", ":", "\n", "            ", "emb", "=", "self", ".", "model", "(", "[", "_ent_name", "]", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "id_embedding_1", "[", "int", "(", "_id", ")", "]", "=", "emb", "\n", "", "with", "open", "(", "join", "(", "dir_path", ",", "\"raw_LaBSE_emb_1.pkl\"", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "id_embedding_1", ",", "f", ")", "\n", "\n", "", "id_embedding_2", "=", "{", "}", "\n", "for", "i", ",", "(", "_id", ",", "_ent_name", ")", "in", "enumerate", "(", "self", ".", "loader2", ".", "items", "(", ")", ")", ":", "\n", "            ", "emb", "=", "self", ".", "model", "(", "[", "_ent_name", "]", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "id_embedding_2", "[", "int", "(", "_id", ")", "]", "=", "emb", "\n", "", "with", "open", "(", "join", "(", "dir_path", ",", "\"raw_LaBSE_emb_2.pkl\"", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "id_embedding_2", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.preprocess.get_DWY_token.Token.__init__": [[8, 45], ["get_DWY_token.Token.__init__.get_token"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "loader", ")", ":", "\n", "        ", "self", ".", "loader", "=", "loader", "\n", "self", ".", "embedding_list", "=", "[", "]", "\n", "\n", "def", "get_token", "(", ")", ":", "\n", "            ", "id_features_dict", "=", "{", "}", "\n", "loader_id_features_copy", "=", "list", "(", "self", ".", "loader", ".", "id_ent", ".", "values", "(", ")", ")", ".", "copy", "(", ")", "\n", "loader_id", "=", "list", "(", "self", ".", "loader", ".", "id_ent", ".", "keys", "(", ")", ")", "\n", "\n", "# max length of feature vector", "\n", "# max_len = 0", "\n", "for", "i", ",", "feature", "in", "enumerate", "(", "loader_id_features_copy", ")", ":", "\n", "                ", "_feature", "=", "feature", ".", "strip", "(", ")", ".", "lower", "(", ")", "\n", "token_list", "=", "[", "]", "\n", "\n", "# ord(' ')=32 is the padding", "\n", "for", "ch", "in", "_feature", ":", "\n", "                    ", "token_list", ".", "append", "(", "ord", "(", "ch", ")", ")", "\n", "\n", "# if max_len < len(token_list):", "\n", "#     max_len = len(token_list)", "\n", "\n", "", "id_features_dict", "[", "loader_id", "[", "i", "]", "]", "=", "token_list", "\n", "\n", "# padding to the same length, use token length in settings.py", "\n", "", "len_list", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "id_features_dict", ".", "items", "(", ")", ":", "\n", "                ", "len_list", ".", "append", "(", "len", "(", "v", ")", ")", "\n", "if", "len", "(", "v", ")", "<=", "TOKEN_LEN", ":", "\n", "                    ", "id_features_dict", "[", "k", "]", "=", "v", "+", "[", "ord", "(", "' '", ")", "]", "*", "(", "TOKEN_LEN", "-", "len", "(", "v", ")", ")", "\n", "", "else", ":", "\n", "                    ", "id_features_dict", "[", "k", "]", "=", "v", "[", ":", "TOKEN_LEN", "]", "\n", "\n", "# print(\"np.percentile(len_list, 90): \", np.percentile(len_list, 90))", "\n", "", "", "return", "id_features_dict", "\n", "\n", "", "self", ".", "id_features_dict", "=", "get_token", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.THUDM_SelfKG.preprocess.deal_raw_dataset.MyRawdataset.__init__": [[10, 33], ["torch.utils.data.Dataset.__init__", "len", "torch.Tensor", "torch.Tensor().long", "deal_raw_dataset.MyRawdataset.x_train.append", "deal_raw_dataset.MyRawdataset.y_train.append", "torch.cat", "torch.Tensor", "adj_tensor_dict[].unsqueeze", "torch.cat", "adj_tensor_dict[].unsqueeze"], "methods", ["home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DBP15kRawLoader.DBP15kRawLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "id_features_dict", ",", "adj_tensor_dict", ",", "is_neighbor", "=", "True", ")", ":", "\n", "        ", "super", "(", "MyRawdataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num", "=", "len", "(", "id_features_dict", ")", "# number of samples", "\n", "\n", "self", ".", "x_train", "=", "[", "]", "\n", "self", ".", "x_train_adj", "=", "None", "\n", "self", ".", "y_train", "=", "[", "]", "\n", "\n", "for", "k", "in", "id_features_dict", ":", "\n", "            ", "if", "is_neighbor", ":", "\n", "                ", "if", "self", ".", "x_train_adj", "==", "None", ":", "\n", "                    ", "self", ".", "x_train_adj", "=", "adj_tensor_dict", "[", "k", "]", ".", "unsqueeze", "(", "0", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "x_train_adj", "=", "torch", ".", "cat", "(", "(", "self", ".", "x_train_adj", ",", "adj_tensor_dict", "[", "k", "]", ".", "unsqueeze", "(", "0", ")", ")", ",", "dim", "=", "0", ")", "\n", "", "", "self", ".", "x_train", ".", "append", "(", "id_features_dict", "[", "k", "]", ")", "\n", "self", ".", "y_train", ".", "append", "(", "[", "k", "]", ")", "\n", "\n", "# transfer to tensor", "\n", "# if type(self.x_train[0]) is list:", "\n", "", "self", ".", "x_train", "=", "torch", ".", "Tensor", "(", "self", ".", "x_train", ")", "\n", "if", "is_neighbor", ":", "\n", "            ", "self", ".", "x_train", "=", "torch", ".", "cat", "(", "(", "self", ".", "x_train", ",", "self", ".", "x_train_adj", ")", ",", "dim", "=", "2", ")", "\n", "", "self", ".", "y_train", "=", "torch", ".", "Tensor", "(", "self", ".", "y_train", ")", ".", "long", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.preprocess.deal_raw_dataset.MyRawdataset.__getitem__": [[35, 37], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "x_train", "[", "index", "]", ",", "self", ".", "y_train", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.preprocess.deal_raw_dataset.MyRawdataset.__len__": [[38, 40], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.preprocess.deal_dataset.Mydataset.__init__": [[10, 35], ["torch.utils.data.Dataset.__init__", "len", "torch.Tensor().long", "torch.Tensor().long", "deal_dataset.Mydataset.x_train.append", "deal_dataset.Mydataset.y_train.append", "torch.cat", "torch.Tensor", "torch.Tensor", "adj_tensor_dict[].unsqueeze", "torch.cat", "adj_tensor_dict[].unsqueeze"], "methods", ["home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DBP15kRawLoader.DBP15kRawLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "id_features_dict", ",", "adj_tensor_dict", ",", "is_neighbor", "=", "True", ")", ":", "\n", "        ", "super", "(", "Mydataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num", "=", "len", "(", "id_features_dict", ")", "# number of samples", "\n", "\n", "self", ".", "x_train", "=", "[", "]", "\n", "self", ".", "x_train_adj", "=", "None", "\n", "self", ".", "y_train", "=", "[", "]", "\n", "\n", "for", "k", "in", "id_features_dict", ":", "\n", "            ", "if", "is_neighbor", ":", "\n", "                ", "if", "self", ".", "x_train_adj", "==", "None", ":", "\n", "                    ", "self", ".", "x_train_adj", "=", "adj_tensor_dict", "[", "k", "]", ".", "unsqueeze", "(", "0", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "x_train_adj", "=", "torch", ".", "cat", "(", "(", "self", ".", "x_train_adj", ",", "adj_tensor_dict", "[", "k", "]", ".", "unsqueeze", "(", "0", ")", ")", ",", "dim", "=", "0", ")", "\n", "", "", "self", ".", "x_train", ".", "append", "(", "id_features_dict", "[", "k", "]", ")", "\n", "self", ".", "y_train", ".", "append", "(", "[", "k", "]", ")", "\n", "\n", "# transfer to tensor", "\n", "# if type(self.x_train[0]) is list:", "\n", "# print(\"self.x_train_adj.shape: \", self.x_train_adj.shape)", "\n", "", "self", ".", "x_train", "=", "torch", ".", "Tensor", "(", "self", ".", "x_train", ")", ".", "long", "(", ")", "\n", "if", "is_neighbor", ":", "\n", "            ", "self", ".", "x_train", "=", "torch", ".", "cat", "(", "(", "self", ".", "x_train", ",", "self", ".", "x_train_adj", ")", ",", "dim", "=", "2", ")", "\n", "# print(\"self.x_train.shape: \", self.x_train.shape)", "\n", "", "self", ".", "y_train", "=", "torch", ".", "Tensor", "(", "self", ".", "y_train", ")", ".", "long", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.preprocess.deal_dataset.Mydataset.__getitem__": [[37, 39], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "x_train", "[", "index", "]", ",", "self", ".", "y_train", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.preprocess.deal_dataset.Mydataset.__len__": [[40, 42], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.preprocess.DWY_neighbor_token.NeighborToken.__init__": [[11, 46], ["DWY_neighbor_token.NeighborToken.__init__.get_token"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dbpToken", ",", "loader", ")", ":", "\n", "        ", "self", ".", "loader", "=", "loader", "\n", "self", ".", "id_features_dict", "=", "dbpToken", ".", "id_features_dict", "\n", "\n", "self", ".", "id_adj_tensor_dict", "=", "{", "}", "\n", "\n", "def", "get_adj", "(", "valid_len", ")", ":", "\n", "            ", "adj", "=", "torch", ".", "zeros", "(", "NEIGHBOR_SIZE", ",", "NEIGHBOR_SIZE", ")", ".", "bool", "(", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "valid_len", ")", ":", "\n", "                ", "adj", "[", "i", ",", "i", "]", "=", "1", "\n", "adj", "[", "0", ",", "i", "]", "=", "1", "\n", "adj", "[", "i", ",", "0", "]", "=", "1", "\n", "", "return", "adj", "\n", "\n", "", "def", "get_token", "(", ")", ":", "\n", "            ", "id_neighbors_dict", "=", "{", "}", "\n", "loader_id_neighbors_dict_copy", "=", "self", ".", "loader", ".", "id_neighbors_dict", "\n", "\n", "\n", "for", "entity_id", ",", "neighbors_dict", "in", "loader_id_neighbors_dict_copy", ".", "items", "(", ")", ":", "\n", "                ", "id_neighbors_dict", "[", "entity_id", "]", "=", "[", "]", "\n", "id_neighbors_dict", "[", "entity_id", "]", ".", "append", "(", "self", ".", "id_features_dict", "[", "entity_id", "]", ")", "\n", "for", "rel", ",", "neighbor", "in", "neighbors_dict", ".", "items", "(", ")", ":", "\n", "                    ", "for", "neigh", "in", "neighbor", ":", "\n", "                        ", "id_neighbors_dict", "[", "entity_id", "]", ".", "append", "(", "self", ".", "id_features_dict", "[", "neigh", "]", ")", "\n", "", "", "", "for", "k", ",", "v", "in", "id_neighbors_dict", ".", "items", "(", ")", ":", "\n", "                ", "if", "len", "(", "v", ")", "<", "NEIGHBOR_SIZE", ":", "\n", "                    ", "self", ".", "id_adj_tensor_dict", "[", "k", "]", "=", "get_adj", "(", "len", "(", "v", ")", ")", "\n", "id_neighbors_dict", "[", "k", "]", "=", "v", "+", "[", "[", "ord", "(", "' '", ")", "]", "*", "TOKEN_LEN", "]", "*", "(", "NEIGHBOR_SIZE", "-", "len", "(", "v", ")", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "id_adj_tensor_dict", "[", "k", "]", "=", "get_adj", "(", "NEIGHBOR_SIZE", ")", "\n", "id_neighbors_dict", "[", "k", "]", "=", "v", "[", ":", "NEIGHBOR_SIZE", "]", "\n", "", "", "return", "id_neighbors_dict", "\n", "\n", "", "self", ".", "id_neighbors_dict", "=", "get_token", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.loader.Neighbors.NeighborsLoader.__init__": [[7, 17], ["join", "Neighbors.NeighborsLoader.id_neighbors_loader"], "methods", ["home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DBP15KRawNeighbors.DBP15KRawNeighbors.id_neighbors_loader"], ["    ", "def", "__init__", "(", "self", ",", "language", ",", "doc_id", ")", ":", "\n", "# whether it is in training", "\n", "        ", "self", ".", "language", "=", "language", "\n", "self", ".", "doc_id", "=", "doc_id", "\n", "\n", "self", ".", "path", "=", "join", "(", "DATA_DIR", ",", "'DBP15K'", ",", "self", ".", "language", ")", "\n", "# load id_features", "\n", "self", ".", "id_neighbors", "=", "None", "\n", "self", ".", "id_neighbors_dict", "=", "{", "}", "\n", "self", ".", "id_neighbors_loader", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.loader.Neighbors.NeighborsLoader.id_neighbors_loader": [[18, 29], ["pandas.read_csv", "pandas.read_csv.iterrows", "join", "[].append", "Neighbors.NeighborsLoader.id_neighbors_dict.__contains__", "Neighbors.NeighborsLoader.id_neighbors_dict[].__contains__"], "methods", ["home.repos.pwc.inspect_result.THUDM_SelfKG.None.settings.read_csv"], ["", "def", "id_neighbors_loader", "(", "self", ")", ":", "\n", "        ", "data", "=", "pd", ".", "read_csv", "(", "join", "(", "self", ".", "path", ",", "'triples_'", "+", "self", ".", "doc_id", ")", ",", "header", "=", "None", ",", "sep", "=", "'\\t'", ")", "\n", "data", ".", "columns", "=", "[", "'id'", ",", "'relation'", ",", "'neighbor'", "]", "\n", "self", ".", "id_neighbors", "=", "data", "\n", "# self.id_neighbors_dict = {id: {relation: [neighbor1, neighbor2, ...]}}", "\n", "for", "index", ",", "row", "in", "data", ".", "iterrows", "(", ")", ":", "\n", "            ", "if", "not", "self", ".", "id_neighbors_dict", ".", "__contains__", "(", "row", "[", "'id'", "]", ")", ":", "\n", "                ", "self", ".", "id_neighbors_dict", "[", "row", "[", "'id'", "]", "]", "=", "{", "}", "\n", "", "if", "not", "self", ".", "id_neighbors_dict", "[", "row", "[", "'id'", "]", "]", ".", "__contains__", "(", "row", "[", "'relation'", "]", ")", ":", "\n", "                ", "self", ".", "id_neighbors_dict", "[", "row", "[", "'id'", "]", "]", "[", "row", "[", "'relation'", "]", "]", "=", "[", "]", "\n", "", "self", ".", "id_neighbors_dict", "[", "row", "[", "'id'", "]", "]", "[", "row", "[", "'relation'", "]", "]", ".", "append", "(", "row", "[", "'neighbor'", "]", ")", "\n", "# print(self.id_neighbors_dict)", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DWY100KRawNeighbor.DWY100KRawNeighbors.__init__": [[8, 19], ["join", "DWY100KRawNeighbor.DWY100KRawNeighbors.load", "DWY100KRawNeighbor.DWY100KRawNeighbors.id_neighbors_loader", "DWY100KRawNeighbor.DWY100KRawNeighbors.get_center_adj"], "methods", ["home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DBP15kRawLoader.DBP15kRawLoader.load", "home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DBP15KRawNeighbors.DBP15KRawNeighbors.id_neighbors_loader", "home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DBP15KRawNeighbors.DBP15KRawNeighbors.get_center_adj"], ["    ", "def", "__init__", "(", "self", ",", "_dir", ",", "doc_id", ")", ":", "\n", "        ", "self", ".", "dir", "=", "_dir", "\n", "self", ".", "doc_id", "=", "doc_id", "\n", "self", ".", "path", "=", "join", "(", "DATA_DIR", ",", "'DWY100K'", ",", "self", ".", "dir", ")", "\n", "self", ".", "id_entity", "=", "{", "}", "\n", "# self.id_neighbor_loader = {}", "\n", "self", ".", "id_adj_tensor_dict", "=", "{", "}", "\n", "self", ".", "id_neighbors_dict", "=", "{", "}", "\n", "self", ".", "load", "(", ")", "\n", "self", ".", "id_neighbors_loader", "(", ")", "\n", "self", ".", "get_center_adj", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DWY100KRawNeighbor.DWY100KRawNeighbors.load": [[20, 23], ["open", "pickle.load", "join"], "methods", ["home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DBP15kRawLoader.DBP15kRawLoader.load"], ["", "def", "load", "(", "self", ")", ":", "\n", "        ", "with", "open", "(", "join", "(", "self", ".", "path", ",", "\"raw_LaBSE_emb_\"", "+", "self", ".", "doc_id", "+", "'.pkl'", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "self", ".", "id_entity", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DWY100KRawNeighbor.DWY100KRawNeighbors.id_neighbors_loader": [[25, 46], ["pandas.read_csv", "pandas.read_csv.iterrows", "join", "DWY100KRawNeighbor.DWY100KRawNeighbors.id_neighbors_dict[].append", "DWY100KRawNeighbor.DWY100KRawNeighbors.id_neighbors_dict[].append", "int", "DWY100KRawNeighbor.DWY100KRawNeighbors.id_neighbors_dict.keys", "int", "DWY100KRawNeighbor.DWY100KRawNeighbors.id_neighbors_dict.keys", "int", "int", "int", "int", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.THUDM_SelfKG.None.settings.read_csv"], ["", "", "def", "id_neighbors_loader", "(", "self", ")", ":", "\n", "        ", "data", "=", "pd", ".", "read_csv", "(", "join", "(", "self", ".", "path", ",", "'triples_'", "+", "self", ".", "doc_id", ")", ",", "header", "=", "None", ",", "sep", "=", "'\\t'", ")", "\n", "data", ".", "columns", "=", "[", "'head'", ",", "'relation'", ",", "'tail'", "]", "\n", "# self.id_neighbor_loader = {head: {relation: [neighbor1, neighbor2, ...]}}", "\n", "\n", "for", "index", ",", "row", "in", "data", ".", "iterrows", "(", ")", ":", "\n", "# head-rel-tail, tail is a neighbor of head", "\n", "# print(\"int(row['head']): \", int(row['head']))", "\n", "            ", "head_str", "=", "self", ".", "id_entity", "[", "int", "(", "row", "[", "'head'", "]", ")", "]", "[", "0", "]", "\n", "\n", "tail_str", "=", "self", ".", "id_entity", "[", "int", "(", "row", "[", "'tail'", "]", ")", "]", "[", "0", "]", "\n", "\n", "if", "not", "int", "(", "row", "[", "'head'", "]", ")", "in", "self", ".", "id_neighbors_dict", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "id_neighbors_dict", "[", "int", "(", "row", "[", "'head'", "]", ")", "]", "=", "[", "head_str", "]", "\n", "", "if", "not", "tail_str", "in", "self", ".", "id_neighbors_dict", "[", "int", "(", "row", "[", "'head'", "]", ")", "]", ":", "\n", "                ", "self", ".", "id_neighbors_dict", "[", "int", "(", "row", "[", "'head'", "]", ")", "]", ".", "append", "(", "tail_str", ")", "\n", "\n", "", "if", "not", "int", "(", "row", "[", "'tail'", "]", ")", "in", "self", ".", "id_neighbors_dict", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "id_neighbors_dict", "[", "int", "(", "row", "[", "'tail'", "]", ")", "]", "=", "[", "tail_str", "]", "\n", "", "if", "not", "head_str", "in", "self", ".", "id_neighbors_dict", "[", "int", "(", "row", "[", "'tail'", "]", ")", "]", ":", "\n", "                ", "self", ".", "id_neighbors_dict", "[", "int", "(", "row", "[", "'tail'", "]", ")", "]", ".", "append", "(", "head_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DWY100KRawNeighbor.DWY100KRawNeighbors.get_adj": [[67, 74], ["torch.zeros().bool", "range", "torch.zeros"], "methods", ["None"], ["", "", "", "def", "get_adj", "(", "self", ",", "valid_len", ")", ":", "\n", "        ", "adj", "=", "torch", ".", "zeros", "(", "NEIGHBOR_SIZE", ",", "NEIGHBOR_SIZE", ")", ".", "bool", "(", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "valid_len", ")", ":", "\n", "            ", "adj", "[", "i", ",", "i", "]", "=", "1", "\n", "adj", "[", "0", ",", "i", "]", "=", "1", "\n", "adj", "[", "i", ",", "0", "]", "=", "1", "\n", "", "return", "adj", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DWY100KRawNeighbor.DWY100KRawNeighbors.get_center_adj": [[75, 83], ["DWY100KRawNeighbor.DWY100KRawNeighbors.id_neighbors_dict.items", "len", "DWY100KRawNeighbor.DWY100KRawNeighbors.get_adj", "DWY100KRawNeighbor.DWY100KRawNeighbors.get_adj", "len", "len"], "methods", ["home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DBP15KRawNeighbors.DBP15KRawNeighbors.get_adj", "home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DBP15KRawNeighbors.DBP15KRawNeighbors.get_adj"], ["", "def", "get_center_adj", "(", "self", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "self", ".", "id_neighbors_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "len", "(", "v", ")", "<", "NEIGHBOR_SIZE", ":", "\n", "                ", "self", ".", "id_adj_tensor_dict", "[", "k", "]", "=", "self", ".", "get_adj", "(", "len", "(", "v", ")", ")", "\n", "self", ".", "id_neighbors_dict", "[", "k", "]", "=", "v", "+", "[", "[", "0", "]", "*", "LaBSE_DIM", "]", "*", "(", "NEIGHBOR_SIZE", "-", "len", "(", "v", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "id_adj_tensor_dict", "[", "k", "]", "=", "self", ".", "get_adj", "(", "NEIGHBOR_SIZE", ")", "\n", "self", ".", "id_neighbors_dict", "[", "k", "]", "=", "v", "[", ":", "NEIGHBOR_SIZE", "]", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DWY_Neighbor.NeighborsLoader.__init__": [[7, 17], ["join", "DWY_Neighbor.NeighborsLoader.id_neighbors_loader"], "methods", ["home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DBP15KRawNeighbors.DBP15KRawNeighbors.id_neighbors_loader"], ["    ", "def", "__init__", "(", "self", ",", "language", ",", "doc_id", ")", ":", "\n", "# whether it is in training", "\n", "        ", "self", ".", "language", "=", "language", "\n", "self", ".", "doc_id", "=", "doc_id", "\n", "\n", "self", ".", "path", "=", "join", "(", "DATA_DIR", ",", "'DWY100K'", ",", "self", ".", "language", ")", "\n", "# load id_features", "\n", "self", ".", "id_neighbors", "=", "None", "\n", "self", ".", "id_neighbors_dict", "=", "{", "}", "\n", "self", ".", "id_neighbors_loader", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DWY_Neighbor.NeighborsLoader.id_neighbors_loader": [[18, 41], ["pandas.read_csv", "pandas.read_csv.iterrows", "join", "DWY_Neighbor.NeighborsLoader.id_neighbors_dict.__contains__", "DWY_Neighbor.NeighborsLoader.id_neighbors_dict[].__contains__", "[].append", "DWY_Neighbor.NeighborsLoader.id_neighbors_dict.__contains__", "DWY_Neighbor.NeighborsLoader.id_neighbors_dict[].__contains__", "[].append"], "methods", ["home.repos.pwc.inspect_result.THUDM_SelfKG.None.settings.read_csv"], ["", "def", "id_neighbors_loader", "(", "self", ")", ":", "\n", "        ", "data", "=", "pd", ".", "read_csv", "(", "join", "(", "self", ".", "path", ",", "'triples_'", "+", "self", ".", "doc_id", ")", ",", "header", "=", "None", ",", "sep", "=", "'\\t'", ")", "\n", "data", ".", "columns", "=", "[", "'head'", ",", "'relation'", ",", "'tail'", "]", "\n", "self", ".", "id_neighbors", "=", "data", "\n", "# self.id_neighbors_dict = {head: {relation: [neighbor1, neighbor2, ...]}}", "\n", "\n", "for", "index", ",", "row", "in", "data", ".", "iterrows", "(", ")", ":", "\n", "\n", "# head-rel-tail, tail is a neighbor of head", "\n", "            ", "if", "not", "self", ".", "id_neighbors_dict", ".", "__contains__", "(", "row", "[", "'head'", "]", ")", ":", "\n", "                ", "self", ".", "id_neighbors_dict", "[", "row", "[", "'head'", "]", "]", "=", "{", "}", "\n", "", "if", "not", "self", ".", "id_neighbors_dict", "[", "row", "[", "'head'", "]", "]", ".", "__contains__", "(", "row", "[", "'relation'", "]", ")", ":", "\n", "                ", "self", ".", "id_neighbors_dict", "[", "row", "[", "'head'", "]", "]", "[", "row", "[", "'relation'", "]", "]", "=", "[", "]", "\n", "", "if", "not", "row", "[", "'tail'", "]", "in", "self", ".", "id_neighbors_dict", "[", "row", "[", "'head'", "]", "]", "[", "row", "[", "'relation'", "]", "]", ":", "\n", "                ", "self", ".", "id_neighbors_dict", "[", "row", "[", "'head'", "]", "]", "[", "row", "[", "'relation'", "]", "]", ".", "append", "(", "row", "[", "'tail'", "]", ")", "\n", "\n", "# tail-rel-head, head is a neighbor of tail", "\n", "", "if", "not", "self", ".", "id_neighbors_dict", ".", "__contains__", "(", "row", "[", "'tail'", "]", ")", ":", "\n", "                ", "self", ".", "id_neighbors_dict", "[", "row", "[", "'tail'", "]", "]", "=", "{", "}", "\n", "", "if", "not", "self", ".", "id_neighbors_dict", "[", "row", "[", "'tail'", "]", "]", ".", "__contains__", "(", "row", "[", "'relation'", "]", ")", ":", "\n", "                ", "self", ".", "id_neighbors_dict", "[", "row", "[", "'tail'", "]", "]", "[", "row", "[", "'relation'", "]", "]", "=", "[", "]", "\n", "", "if", "not", "row", "[", "'head'", "]", "in", "self", ".", "id_neighbors_dict", "[", "row", "[", "'tail'", "]", "]", "[", "row", "[", "'relation'", "]", "]", ":", "\n", "                ", "self", ".", "id_neighbors_dict", "[", "row", "[", "'tail'", "]", "]", "[", "row", "[", "'relation'", "]", "]", ".", "append", "(", "row", "[", "'head'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DWY100K.DWY100KLoader.__init__": [[9, 14], ["os.path.join", "DWY100K.DWY100KLoader.id_ent_loader"], "methods", ["home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DWY100K.DWY100KLoader.id_ent_loader"], ["    ", "def", "__init__", "(", "self", ",", "dataset_name", "=", "'dbp_wd'", ",", "set_id", "=", "'1'", ")", ":", "\n", "        ", "self", ".", "root_path", "=", "join", "(", "DATA_DIR", ",", "'DWY100K'", ",", "dataset_name", ")", "\n", "self", ".", "set_id", "=", "set_id", "\n", "self", ".", "id_ent", "=", "None", "\n", "self", ".", "id_ent_loader", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DWY100K.DWY100KLoader.id_ent_loader": [[16, 22], ["pandas.read_csv", "collections.OrderedDict", "os.path.join", "str().lower", "range", "len", "str"], "methods", ["home.repos.pwc.inspect_result.THUDM_SelfKG.None.settings.read_csv"], ["", "def", "id_ent_loader", "(", "self", ")", ":", "\n", "        ", "data", "=", "pd", ".", "read_csv", "(", "join", "(", "self", ".", "root_path", ",", "'id_ent_'", "+", "self", ".", "set_id", ")", ",", "sep", "=", "'\\t'", ",", "header", "=", "None", ")", "\n", "data", ".", "columns", "=", "[", "'id'", ",", "'features'", "]", "\n", "\n", "self", ".", "id_ent", "=", "OrderedDict", "(", "\n", "(", "data", "[", "'id'", "]", "[", "i", "]", ",", "str", "(", "data", "[", "'features'", "]", "[", "i", "]", ")", ".", "lower", "(", ")", ")", "for", "i", "in", "range", "(", "len", "(", "data", "[", "'id'", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DBP15k.DBP15kLoader.__init__": [[8, 20], ["join", "DBP15k.DBP15kLoader.id_feature_loader", "collections.OrderedDict", "DBP15k.DBP15kLoader.link_loader", "dict", "list", "range", "len"], "methods", ["home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DBP15k.DBP15kLoader.id_feature_loader", "home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DBP15k.DBP15kLoader.link_loader"], ["    ", "def", "__init__", "(", "self", ",", "language", ",", "feature_id", "=", "'both'", ")", ":", "\n", "# whether it is in training", "\n", "        ", "self", ".", "language", "=", "language", "\n", "self", ".", "feature_id", "=", "feature_id", "\n", "\n", "self", ".", "path", "=", "join", "(", "DATA_DIR", ",", "'DBP15K'", ",", "language", ")", "\n", "# load id_features", "\n", "self", ".", "id_features", ",", "self", ".", "id_datasets", ",", "self", ".", "datasets_id", "=", "None", ",", "dict", "(", ")", ",", "list", "(", ")", "\n", "self", ".", "id_feature_loader", "(", ")", "\n", "self", ".", "id_features_dict", "=", "OrderedDict", "(", "\n", "(", "self", ".", "id_features", "[", "'id'", "]", "[", "i", "]", ",", "self", ".", "id_features", "[", "'features'", "]", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "self", ".", "id_features", "[", "'id'", "]", ")", ")", ")", "\n", "self", ".", "link", "=", "self", ".", "link_loader", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DBP15k.DBP15kLoader.__getattr__": [[21, 24], ["DBP15k.DBP15kLoader.id_features[].tolist"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "item", ")", ":", "\n", "        ", "if", "item", "==", "'corpus'", ":", "\n", "            ", "return", "self", ".", "id_features", "[", "'features'", "]", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DBP15k.DBP15kLoader.link_loader": [[25, 35], ["pandas.read_csv", "link_data[].values.tolist", "link_data[].values.tolist", "enumerate", "join", "join"], "methods", ["home.repos.pwc.inspect_result.THUDM_SelfKG.None.settings.read_csv"], ["", "", "def", "link_loader", "(", "self", ")", ":", "\n", "        ", "link", "=", "{", "}", "\n", "link_data", "=", "pd", ".", "read_csv", "(", "join", "(", "join", "(", "DATA_DIR", ",", "'DBP15K'", ",", "self", ".", "language", ")", ",", "'ref_ent_ids'", ")", ",", "sep", "=", "'\\t'", ",", "header", "=", "None", ")", "\n", "link_data", ".", "columns", "=", "[", "'entity1'", ",", "'entity2'", "]", "\n", "entity1_id", "=", "link_data", "[", "'entity1'", "]", ".", "values", ".", "tolist", "(", ")", "\n", "entity2_id", "=", "link_data", "[", "'entity2'", "]", ".", "values", ".", "tolist", "(", ")", "\n", "for", "i", ",", "_", "in", "enumerate", "(", "entity1_id", ")", ":", "\n", "            ", "link", "[", "entity1_id", "[", "i", "]", "]", "=", "entity2_id", "[", "i", "]", "\n", "link", "[", "entity2_id", "[", "i", "]", "]", "=", "entity1_id", "[", "i", "]", "\n", "", "return", "link", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DBP15k.DBP15kLoader.id_feature_loader": [[36, 54], ["pandas.concat", "range", "data.append", "DBP15k.DBP15kLoader.datasets_id.append", "data.append", "DBP15k.DBP15kLoader.datasets_id.append", "pandas.read_csv", "[].tolist", "pandas.read_csv", "[].tolist", "join", "join"], "methods", ["home.repos.pwc.inspect_result.THUDM_SelfKG.None.settings.read_csv", "home.repos.pwc.inspect_result.THUDM_SelfKG.None.settings.read_csv"], ["", "def", "id_feature_loader", "(", "self", ")", ":", "\n", "        ", "data", "=", "[", "]", "\n", "if", "self", ".", "feature_id", "==", "'both'", ":", "\n", "            ", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "                ", "data", ".", "append", "(", "pd", ".", "read_csv", "(", "join", "(", "self", ".", "path", ",", "'id_features_{}'", ".", "format", "(", "i", "+", "1", ")", ")", ",", "sep", "=", "'\\t'", ",", "header", "=", "None", ")", ")", "\n", "data", "[", "i", "]", ".", "columns", "=", "[", "'id'", ",", "'features'", "]", "\n", "for", "idx", "in", "data", "[", "i", "]", "[", "'id'", "]", ":", "\n", "                    ", "self", ".", "id_datasets", "[", "idx", "]", "=", "i", "\n", "", "self", ".", "datasets_id", ".", "append", "(", "data", "[", "i", "]", "[", "'id'", "]", ".", "tolist", "(", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "data", ".", "append", "(", "pd", ".", "read_csv", "(", "join", "(", "self", ".", "path", ",", "'id_features_'", "+", "self", ".", "feature_id", ")", ",", "sep", "=", "'\\t'", ",", "header", "=", "None", ")", ")", "\n", "data", "[", "0", "]", ".", "columns", "=", "[", "'id'", ",", "'features'", "]", "\n", "# actually not used", "\n", "for", "idx", "in", "data", "[", "0", "]", "[", "'id'", "]", ":", "\n", "                ", "self", ".", "id_datasets", "[", "idx", "]", "=", "0", "\n", "", "self", ".", "datasets_id", ".", "append", "(", "data", "[", "0", "]", "[", "'id'", "]", ".", "tolist", "(", ")", ")", "\n", "\n", "", "self", ".", "id_features", "=", "pd", ".", "concat", "(", "data", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DBP15kLoader.DBP15kLoader.__init__": [[6, 14], ["DBP15kLoader.DBP15kLoader.load"], "methods", ["home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DBP15kRawLoader.DBP15kRawLoader.load"], ["    ", "def", "__init__", "(", "self", ",", "language", ")", ":", "\n", "        ", "assert", "language", "in", "[", "'fr_en'", ",", "'ja_en'", ",", "'zh_en'", "]", "\n", "self", ".", "language", "=", "language", "\n", "# self.id_entity_1 = {}", "\n", "# self.id_entity_2 = {}", "\n", "self", ".", "train_set", "=", "{", "}", "\n", "self", ".", "test_set", "=", "{", "}", "\n", "self", ".", "load", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DBP15kLoader.DBP15kLoader.load": [[15, 35], ["join", "pandas.read_csv", "pandas.read_csv", "join", "pandas.read_csv.set_index().to_dict", "join", "pandas.read_csv.set_index().to_dict", "pandas.read_csv.set_index", "pandas.read_csv.set_index"], "methods", ["home.repos.pwc.inspect_result.THUDM_SelfKG.None.settings.read_csv", "home.repos.pwc.inspect_result.THUDM_SelfKG.None.settings.read_csv"], ["", "def", "load", "(", "self", ")", ":", "\n", "        ", "path", "=", "join", "(", "DATA_DIR", ",", "'p_dbp15k'", ",", "self", ".", "language", ")", "\n", "# data = pd.read_csv(join(path, 'ent_ids_1'), sep='\\t', header=None)", "\n", "# data.columns = ['id', 'ent']", "\n", "# self.id_entity_1 = data.set_index('id').to_dict()['ent']", "\n", "# data = pd.read_csv(join(path, 'ent_ids_2'), sep='\\t', header=None)", "\n", "# data.columns = ['id', 'ent']", "\n", "# self.id_entity_2 = data.set_index('id').to_dict()['ent']", "\n", "# data = pd.read_csv(join(path, 'sup_ent_ids'), sep='\\t', header=None)", "\n", "# data.columns = ['id1', 'id2']", "\n", "# self.train_set = data.set_index('id1').to_dict()['id2']", "\n", "# data = pd.read_csv(join(path, 'ref_ent_ids'), sep='\\t', header=None)", "\n", "# data.columns = ['id1', 'id2']", "\n", "# self.test_set = data.set_index('id1').to_dict()['id2']", "\n", "data", "=", "pd", ".", "read_csv", "(", "join", "(", "path", ",", "'sup_ent'", ")", ",", "sep", "=", "'\\t'", ",", "header", "=", "None", ")", "\n", "data", ".", "columns", "=", "[", "'ent1'", ",", "'ent2'", "]", "\n", "self", ".", "train_set", "=", "data", ".", "set_index", "(", "'ent1'", ")", ".", "to_dict", "(", ")", "[", "'ent2'", "]", "\n", "data", "=", "pd", ".", "read_csv", "(", "join", "(", "path", ",", "'ref_ent'", ")", ",", "sep", "=", "'\\t'", ",", "header", "=", "None", ")", "\n", "data", ".", "columns", "=", "[", "'ent1'", ",", "'ent2'", "]", "\n", "self", ".", "test_set", "=", "data", ".", "set_index", "(", "'ent1'", ")", ".", "to_dict", "(", ")", "[", "'ent2'", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DBP15KRawNeighbors.DBP15KRawNeighbors.__init__": [[8, 19], ["join", "DBP15KRawNeighbors.DBP15KRawNeighbors.load", "DBP15KRawNeighbors.DBP15KRawNeighbors.id_neighbors_loader", "DBP15KRawNeighbors.DBP15KRawNeighbors.get_center_adj"], "methods", ["home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DBP15kRawLoader.DBP15kRawLoader.load", "home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DBP15KRawNeighbors.DBP15KRawNeighbors.id_neighbors_loader", "home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DBP15KRawNeighbors.DBP15KRawNeighbors.get_center_adj"], ["    ", "def", "__init__", "(", "self", ",", "language", ",", "doc_id", ")", ":", "\n", "        ", "self", ".", "language", "=", "language", "\n", "self", ".", "doc_id", "=", "doc_id", "\n", "self", ".", "path", "=", "join", "(", "DATA_DIR", ",", "'DBP15K'", ",", "self", ".", "language", ")", "\n", "self", ".", "id_entity", "=", "{", "}", "\n", "# self.id_neighbor_loader = {}", "\n", "self", ".", "id_adj_tensor_dict", "=", "{", "}", "\n", "self", ".", "id_neighbors_dict", "=", "{", "}", "\n", "self", ".", "load", "(", ")", "\n", "self", ".", "id_neighbors_loader", "(", ")", "\n", "self", ".", "get_center_adj", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DBP15KRawNeighbors.DBP15KRawNeighbors.load": [[20, 23], ["open", "pickle.load", "join"], "methods", ["home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DBP15kRawLoader.DBP15kRawLoader.load"], ["", "def", "load", "(", "self", ")", ":", "\n", "        ", "with", "open", "(", "join", "(", "self", ".", "path", ",", "\"raw_LaBSE_emb_\"", "+", "self", ".", "doc_id", "+", "'.pkl'", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "self", ".", "id_entity", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DBP15KRawNeighbors.DBP15KRawNeighbors.id_neighbors_loader": [[25, 45], ["pandas.read_csv", "pandas.read_csv.iterrows", "join", "DBP15KRawNeighbors.DBP15KRawNeighbors.id_neighbors_dict[].append", "DBP15KRawNeighbors.DBP15KRawNeighbors.id_neighbors_dict[].append", "int", "DBP15KRawNeighbors.DBP15KRawNeighbors.id_neighbors_dict.keys", "int", "DBP15KRawNeighbors.DBP15KRawNeighbors.id_neighbors_dict.keys", "int", "int", "int", "int", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.THUDM_SelfKG.None.settings.read_csv"], ["", "", "def", "id_neighbors_loader", "(", "self", ")", ":", "\n", "        ", "data", "=", "pd", ".", "read_csv", "(", "join", "(", "self", ".", "path", ",", "'triples_'", "+", "self", ".", "doc_id", ")", ",", "header", "=", "None", ",", "sep", "=", "'\\t'", ")", "\n", "data", ".", "columns", "=", "[", "'head'", ",", "'relation'", ",", "'tail'", "]", "\n", "# self.id_neighbor_loader = {head: {relation: [neighbor1, neighbor2, ...]}}", "\n", "\n", "for", "index", ",", "row", "in", "data", ".", "iterrows", "(", ")", ":", "\n", "# head-rel-tail, tail is a neighbor of head", "\n", "# print(\"int(row['head']): \", int(row['head']))", "\n", "            ", "head_str", "=", "self", ".", "id_entity", "[", "int", "(", "row", "[", "'head'", "]", ")", "]", "[", "0", "]", "\n", "tail_str", "=", "self", ".", "id_entity", "[", "int", "(", "row", "[", "'tail'", "]", ")", "]", "[", "0", "]", "\n", "\n", "if", "not", "int", "(", "row", "[", "'head'", "]", ")", "in", "self", ".", "id_neighbors_dict", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "id_neighbors_dict", "[", "int", "(", "row", "[", "'head'", "]", ")", "]", "=", "[", "head_str", "]", "\n", "", "if", "not", "tail_str", "in", "self", ".", "id_neighbors_dict", "[", "int", "(", "row", "[", "'head'", "]", ")", "]", ":", "\n", "                ", "self", ".", "id_neighbors_dict", "[", "int", "(", "row", "[", "'head'", "]", ")", "]", ".", "append", "(", "tail_str", ")", "\n", "\n", "", "if", "not", "int", "(", "row", "[", "'tail'", "]", ")", "in", "self", ".", "id_neighbors_dict", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "id_neighbors_dict", "[", "int", "(", "row", "[", "'tail'", "]", ")", "]", "=", "[", "tail_str", "]", "\n", "", "if", "not", "head_str", "in", "self", ".", "id_neighbors_dict", "[", "int", "(", "row", "[", "'tail'", "]", ")", "]", ":", "\n", "                ", "self", ".", "id_neighbors_dict", "[", "int", "(", "row", "[", "'tail'", "]", ")", "]", ".", "append", "(", "head_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DBP15KRawNeighbors.DBP15KRawNeighbors.get_adj": [[66, 73], ["torch.zeros().bool", "range", "torch.zeros"], "methods", ["None"], ["", "", "", "def", "get_adj", "(", "self", ",", "valid_len", ")", ":", "\n", "        ", "adj", "=", "torch", ".", "zeros", "(", "NEIGHBOR_SIZE", ",", "NEIGHBOR_SIZE", ")", ".", "bool", "(", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "valid_len", ")", ":", "\n", "            ", "adj", "[", "i", ",", "i", "]", "=", "1", "\n", "adj", "[", "0", ",", "i", "]", "=", "1", "\n", "adj", "[", "i", ",", "0", "]", "=", "1", "\n", "", "return", "adj", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DBP15KRawNeighbors.DBP15KRawNeighbors.get_center_adj": [[74, 82], ["DBP15KRawNeighbors.DBP15KRawNeighbors.id_neighbors_dict.items", "len", "DBP15KRawNeighbors.DBP15KRawNeighbors.get_adj", "DBP15KRawNeighbors.DBP15KRawNeighbors.get_adj", "len", "len"], "methods", ["home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DBP15KRawNeighbors.DBP15KRawNeighbors.get_adj", "home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DBP15KRawNeighbors.DBP15KRawNeighbors.get_adj"], ["", "def", "get_center_adj", "(", "self", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "self", ".", "id_neighbors_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "len", "(", "v", ")", "<", "NEIGHBOR_SIZE", ":", "\n", "                ", "self", ".", "id_adj_tensor_dict", "[", "k", "]", "=", "self", ".", "get_adj", "(", "len", "(", "v", ")", ")", "\n", "self", ".", "id_neighbors_dict", "[", "k", "]", "=", "v", "+", "[", "[", "0", "]", "*", "LaBSE_DIM", "]", "*", "(", "NEIGHBOR_SIZE", "-", "len", "(", "v", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "id_adj_tensor_dict", "[", "k", "]", "=", "self", ".", "get_adj", "(", "NEIGHBOR_SIZE", ")", "\n", "self", ".", "id_neighbors_dict", "[", "k", "]", "=", "v", "[", ":", "NEIGHBOR_SIZE", "]", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DBP15kRawLoader.DBP15kRawLoader.__init__": [[6, 10], ["DBP15kRawLoader.DBP15kRawLoader.load"], "methods", ["home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DBP15kRawLoader.DBP15kRawLoader.load"], ["    ", "def", "__init__", "(", "self", ",", "language", "=", "\"zh_en\"", ")", ":", "\n", "        ", "self", ".", "language", "=", "language", "\n", "self", ".", "id_entity", "=", "{", "}", "\n", "self", ".", "load", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.THUDM_SelfKG.loader.DBP15kRawLoader.DBP15kRawLoader.load": [[11, 20], ["join", "open", "f.readlines", "join", "line.split", "int", "str"], "methods", ["None"], ["", "def", "load", "(", "self", ")", ":", "\n", "        ", "path", "=", "join", "(", "DATA_DIR", ",", "'DBP15K'", ",", "self", ".", "language", ")", "\n", "with", "open", "(", "join", "(", "path", ",", "\"cleaned_ent_ids_1\"", ")", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "                ", "l", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "id", "=", "int", "(", "l", "[", "0", "]", ")", "\n", "entity", "=", "str", "(", "l", "[", "1", "]", ")", "\n", "self", ".", "id_entity", "[", "id", "]", "=", "entity", "\n", "", "", "", "", ""]]}