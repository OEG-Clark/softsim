{"home.repos.pwc.inspect_result.lmbxmu_1xN.None.imagenet.train": [[64, 161], ["utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "model.train", "time.time", "len", "enumerate", "enumerate", "[].cuda", "[].squeeze().long().cuda", "utils.AverageMeter.update", "imagenet.adjust_learning_rate", "model", "loss_func", "utils.accuracy", "images.cuda.size", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "optimizer.zero_grad", "loss_func.backward", "optimizer.step", "utils.AverageMeter.update", "time.time", "images.cuda.cuda", "targets.cuda.cuda", "utils.AverageMeter.update", "imagenet.adjust_learning_rate", "model", "loss_func", "utils.accuracy", "images.cuda.size", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "optimizer.zero_grad", "loss_func.backward", "optimizer.step", "utils.AverageMeter.update", "time.time", "loss_func.item", "prec1.item", "prec5.item", "logger.info", "loss_func.item", "prec1.item", "prec5.item", "logger.info", "[].squeeze().long", "time.time", "time.time", "time.time", "time.time", "[].squeeze"], "function", ["home.repos.pwc.inspect_result.lmbxmu_1xN.None.imagenet.train", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.common.AverageMeter.update", "home.repos.pwc.inspect_result.lmbxmu_1xN.None.imagenet.adjust_learning_rate", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.common.accuracy", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.common.AverageMeter.update", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.common.AverageMeter.update", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.common.AverageMeter.update", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.common.AverageMeter.update", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.common.AverageMeter.update", "home.repos.pwc.inspect_result.lmbxmu_1xN.None.imagenet.adjust_learning_rate", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.common.accuracy", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.common.AverageMeter.update", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.common.AverageMeter.update", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.common.AverageMeter.update", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.common.AverageMeter.update"], ["", "def", "train", "(", "epoch", ",", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ")", ":", "\n", "    ", "batch_time", "=", "utils", ".", "AverageMeter", "(", "'Time'", ",", "':6.3f'", ")", "\n", "data_time", "=", "utils", ".", "AverageMeter", "(", "'Data'", ",", "':6.3f'", ")", "\n", "losses", "=", "utils", ".", "AverageMeter", "(", "'Loss'", ",", "':.4e'", ")", "\n", "top1", "=", "utils", ".", "AverageMeter", "(", "'Acc@1'", ",", "':6.2f'", ")", "\n", "top5", "=", "utils", ".", "AverageMeter", "(", "'Acc@5'", ",", "':6.2f'", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "args", ".", "use_dali", ":", "\n", "        ", "num_iter", "=", "train_loader", ".", "_size", "//", "args", ".", "train_batch_size", "\n", "", "else", ":", "\n", "        ", "num_iter", "=", "len", "(", "train_loader", ")", "\n", "\n", "", "print_freq", "=", "num_iter", "//", "10", "\n", "i", "=", "0", "\n", "if", "args", ".", "use_dali", ":", "\n", "        ", "for", "batch_idx", ",", "batch_data", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "if", "args", ".", "debug", ":", "\n", "                ", "if", "i", ">", "5", ":", "\n", "                    ", "break", "\n", "", "i", "+=", "1", "\n", "", "images", "=", "batch_data", "[", "0", "]", "[", "'data'", "]", ".", "cuda", "(", ")", "\n", "targets", "=", "batch_data", "[", "0", "]", "[", "'label'", "]", ".", "squeeze", "(", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "batch_idx", ",", "num_iter", ")", "\n", "\n", "# compute output", "\n", "logits", "=", "model", "(", "images", ")", "\n", "loss", "=", "loss_func", "(", "logits", ",", "targets", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "prec1", ",", "prec5", "=", "utils", ".", "accuracy", "(", "logits", ",", "targets", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "n", "=", "images", ".", "size", "(", "0", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "n", ")", "#accumulated loss", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "n", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "n", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "batch_idx", "%", "print_freq", "==", "0", "and", "batch_idx", "!=", "0", ":", "\n", "                ", "logger", ".", "info", "(", "\n", "'Epoch[{0}]({1}/{2}): '", "\n", "'Loss {loss.avg:.4f} '", "\n", "'Prec@1(1,5) {top1.avg:.2f}, {top5.avg:.2f}'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", ",", "num_iter", ",", "loss", "=", "losses", ",", "\n", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "", "", "", "else", ":", "\n", "        ", "for", "batch_idx", ",", "(", "images", ",", "targets", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "if", "args", ".", "debug", ":", "\n", "                ", "if", "i", ">", "5", ":", "\n", "                    ", "break", "\n", "", "i", "+=", "1", "\n", "", "images", "=", "images", ".", "cuda", "(", ")", "\n", "targets", "=", "targets", ".", "cuda", "(", ")", "\n", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "batch_idx", ",", "num_iter", ")", "\n", "\n", "# compute output", "\n", "logits", "=", "model", "(", "images", ")", "\n", "loss", "=", "loss_func", "(", "logits", ",", "targets", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "prec1", ",", "prec5", "=", "utils", ".", "accuracy", "(", "logits", ",", "targets", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "n", "=", "images", ".", "size", "(", "0", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "n", ")", "# accumulated loss", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "n", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "n", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "batch_idx", "%", "print_freq", "==", "0", "and", "batch_idx", "!=", "0", ":", "\n", "                ", "logger", ".", "info", "(", "\n", "'Epoch[{0}]({1}/{2}): '", "\n", "'Loss {loss.avg:.4f} '", "\n", "'Prec@1(1,5) {top1.avg:.2f}, {top5.avg:.2f}'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", ",", "num_iter", ",", "loss", "=", "losses", ",", "\n", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "\n", "", "", "", "return", "losses", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.None.imagenet.validate": [[162, 229], ["utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "model.eval", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "time.time", "logger.info", "enumerate", "enumerate", "[].cuda", "[].squeeze().long().cuda", "model", "criterion", "utils.accuracy", "images.cuda.size", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "time.time", "images.cuda.cuda", "targets.cuda.cuda", "model", "criterion", "utils.accuracy", "images.cuda.size", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "time.time", "criterion.item", "criterion.item", "[].squeeze().long", "time.time", "time.time", "[].squeeze", "utils.options.args", "utils.options.args", "utils.options.args", "utils.options.args", "utils.options.args"], "function", ["home.repos.pwc.inspect_result.lmbxmu_1xN.utils.common.accuracy", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.common.AverageMeter.update", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.common.AverageMeter.update", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.common.AverageMeter.update", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.common.AverageMeter.update", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.common.accuracy", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.common.AverageMeter.update", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.common.AverageMeter.update", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.common.AverageMeter.update", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.common.AverageMeter.update"], ["", "def", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "args", ")", ":", "\n", "\n", "    ", "batch_time", "=", "utils", ".", "AverageMeter", "(", "'Time'", ",", "':6.3f'", ")", "\n", "losses", "=", "utils", ".", "AverageMeter", "(", "'Loss'", ",", "':.4e'", ")", "\n", "top1", "=", "utils", ".", "AverageMeter", "(", "'Acc@1'", ",", "':6.2f'", ")", "\n", "top5", "=", "utils", ".", "AverageMeter", "(", "'Acc@5'", ",", "':6.2f'", ")", "\n", "\n", "if", "args", ".", "use_dali", ":", "\n", "        ", "num_iter", "=", "val_loader", ".", "_size", "//", "args", ".", "eval_batch_size", "\n", "", "else", ":", "\n", "        ", "num_iter", "=", "len", "(", "val_loader", ")", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "end", "=", "time", ".", "time", "(", ")", "\n", "i", "=", "0", "\n", "if", "args", ".", "use_dali", ":", "\n", "            ", "for", "batch_idx", ",", "batch_data", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "                ", "if", "args", ".", "debug", ":", "\n", "                    ", "if", "i", ">", "5", ":", "\n", "                        ", "break", "\n", "", "i", "+=", "1", "\n", "", "images", "=", "batch_data", "[", "0", "]", "[", "'data'", "]", ".", "cuda", "(", ")", "\n", "targets", "=", "batch_data", "[", "0", "]", "[", "'label'", "]", ".", "squeeze", "(", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "# compute output", "\n", "logits", "=", "model", "(", "images", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "targets", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "pred1", ",", "pred5", "=", "utils", ".", "accuracy", "(", "logits", ",", "targets", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "n", "=", "images", ".", "size", "(", "0", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "n", ")", "\n", "top1", ".", "update", "(", "pred1", "[", "0", "]", ",", "n", ")", "\n", "top5", ".", "update", "(", "pred5", "[", "0", "]", ",", "n", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "batch_idx", ",", "(", "images", ",", "targets", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "                ", "if", "args", ".", "debug", ":", "\n", "                    ", "if", "i", ">", "5", ":", "\n", "                        ", "break", "\n", "", "i", "+=", "1", "\n", "", "images", "=", "images", ".", "cuda", "(", ")", "\n", "targets", "=", "targets", ".", "cuda", "(", ")", "\n", "\n", "# compute output", "\n", "logits", "=", "model", "(", "images", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "targets", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "pred1", ",", "pred5", "=", "utils", ".", "accuracy", "(", "logits", ",", "targets", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "n", "=", "images", ".", "size", "(", "0", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "n", ")", "\n", "top1", ".", "update", "(", "pred1", "[", "0", "]", ",", "n", ")", "\n", "top5", ".", "update", "(", "pred5", "[", "0", "]", ",", "n", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "", "logger", ".", "info", "(", "' * Acc@1 {top1.avg:.3f} Acc@5 {top5.avg:.3f}'", "\n", ".", "format", "(", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "\n", "", "return", "losses", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.None.imagenet.get_model": [[230, 272], ["torch.load", "torch.load", "torch.load", "print", "imagenet.validate", "fc_weight.view", "model.load_state_dict", "val_loader.reset", "fc_weight.size", "fc_weight.size", "fc_weight.view", "model.load_state_dict", "fc_weight.size", "fc_weight.size", "model.named_modules", "model.load_state_dict", "isinstance", "ckpt[].dim", "weight.view", "weight.size", "weight.size", "utils.options.args"], "function", ["home.repos.pwc.inspect_result.lmbxmu_1xN.None.imagenet.validate", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.common.AverageMeter.reset"], ["", "def", "get_model", "(", "args", ")", ":", "\n", "\n", "    ", "model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", ")", ".", "to", "(", "device", ")", "\n", "ckpt", "=", "torch", ".", "load", "(", "args", ".", "pretrained_model", ",", "map_location", "=", "device", ")", "\n", "if", "args", ".", "arch", "==", "'mobilenet_v2'", ":", "\n", "        ", "fc_weight", "=", "ckpt", "[", "'classifier.1.weight'", "]", "\n", "ckpt", "[", "'classifier.1.weight'", "]", "=", "fc_weight", ".", "view", "(", "\n", "fc_weight", ".", "size", "(", "0", ")", ",", "fc_weight", ".", "size", "(", "1", ")", ",", "1", ",", "1", ")", "\n", "model", ".", "load_state_dict", "(", "ckpt", ",", "strict", "=", "False", ")", "\n", "", "elif", "args", ".", "arch", "==", "'mobilenet_v1'", ":", "\n", "        ", "fc_weight", "=", "ckpt", "[", "'state_dict'", "]", "[", "'classifier.0.weight'", "]", "\n", "ckpt", "[", "'state_dict'", "]", "[", "'classifier.0.weight'", "]", "=", "fc_weight", ".", "view", "(", "\n", "fc_weight", ".", "size", "(", "0", ")", ",", "fc_weight", ".", "size", "(", "1", ")", ",", "1", ",", "1", ")", "\n", "model", ".", "load_state_dict", "(", "ckpt", "[", "'state_dict'", "]", ",", "strict", "=", "False", ")", "\n", "", "elif", "args", ".", "arch", "==", "'mobilenet_v3_small'", "or", "args", ".", "arch", "==", "'mobilenet_v3_large'", ":", "\n", "        ", "for", "name", ",", "module", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "if", "ckpt", "[", "name", "+", "'.weight'", "]", ".", "dim", "(", ")", "==", "2", ":", "\n", "                    ", "weight", "=", "ckpt", "[", "name", "+", "'.weight'", "]", "\n", "ckpt", "[", "name", "+", "'.weight'", "]", "=", "weight", ".", "view", "(", "weight", ".", "size", "(", "0", ")", ",", "weight", ".", "size", "(", "1", ")", ",", "1", ",", "1", ")", "\n", "", "", "", "model", ".", "load_state_dict", "(", "ckpt", ",", "strict", "=", "False", ")", "\n", "\n", "", "print", "(", "'==> Testing Baseline Model..'", ")", "\n", "validate", "(", "val_loader", ",", "model", ",", "loss_func", ",", "args", ")", "\n", "if", "args", ".", "use_dali", ":", "\n", "        ", "val_loader", ".", "reset", "(", ")", "\n", "\n", "", "cfg_len", "=", "{", "\n", "'mobilenet_v1'", ":", "14", ",", "\n", "'mobilenet_v2'", ":", "35", ",", "\n", "'mobilenet_v3_small'", ":", "42", ",", "\n", "'mobilenet_v3_large'", ":", "48", ",", "\n", "}", "\n", "\n", "pr_cfg", "=", "[", "args", ".", "pr_target", "]", "*", "cfg_len", "[", "args", ".", "arch", "]", "\n", "\n", "if", "args", ".", "full", "==", "False", ":", "\n", "        ", "pr_cfg", "[", "-", "1", "]", "=", "0", "\n", "if", "args", ".", "arch", "==", "'mobilenet_v3_small'", "or", "args", ".", "arch", "==", "'mobilenet_v3_large'", ":", "\n", "            ", "pr_cfg", "[", "-", "2", "]", "=", "0", "\n", "\n", "", "", "return", "model", ",", "pr_cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.None.imagenet.main": [[273, 379], ["imagenet.get_model", "imagenet.get_optimizer", "print", "nn.DataParallel.named_modules", "nn.DataParallel.to", "imagenet.validate", "range", "logger.info", "torch.load", "torch.load", "torch.load", "nn.DataParallel.load_state_dict", "print", "imagenet.validate", "hasattr", "imagenet.resume", "len", "torch.DataParallel", "val_loader.reset", "imagenet.train", "imagenet.validate", "max", "max", "utils.common.checkpoint.save_model", "print", "nn.DataParallel.named_modules", "converted_model.load_state_dict", "torch.randn", "torch.randn", "torch.randn", "torch.onnx.export", "torch.onnx.export", "torch.onnx.export", "print", "nn.DataParallel.named_modules", "converted_model.load_state_dict", "imagenet.validate", "torch.randn", "torch.randn", "torch.randn", "torch.onnx.export", "torch.onnx.export", "torch.onnx.export", "train_loader.reset", "val_loader.reset", "nn.DataParallel.module.state_dict", "nn.DataParallel.state_dict", "get_optimizer.state_dict", "hasattr", "nn.DataParallel.state_dict", "Path", "float", "float", "hasattr", "nn.DataParallel.state_dict", "Path", "module.get_mask", "len", "module.sparse_weight", "module.sparse_weight", "module.get_rearr_mask", "module.get_rearr_mask", "module.get_mask"], "function", ["home.repos.pwc.inspect_result.lmbxmu_1xN.None.imagenet.get_model", "home.repos.pwc.inspect_result.lmbxmu_1xN.None.imagenet.get_optimizer", "home.repos.pwc.inspect_result.lmbxmu_1xN.None.imagenet.validate", "home.repos.pwc.inspect_result.lmbxmu_1xN.None.imagenet.validate", "home.repos.pwc.inspect_result.lmbxmu_1xN.None.imagenet.resume", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.common.AverageMeter.reset", "home.repos.pwc.inspect_result.lmbxmu_1xN.None.imagenet.train", "home.repos.pwc.inspect_result.lmbxmu_1xN.None.imagenet.validate", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.common.checkpoint.save_model", "home.repos.pwc.inspect_result.lmbxmu_1xN.None.imagenet.validate", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.common.AverageMeter.reset", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.common.AverageMeter.reset", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.conv_type.StructureConv.get_mask", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.conv_type.BlockL1Conv.sparse_weight", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.conv_type.BlockL1Conv.sparse_weight", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.conv_type.BlockL1Conv.get_rearr_mask", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.conv_type.BlockL1Conv.get_rearr_mask", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.conv_type.StructureConv.get_mask"], ["", "def", "main", "(", ")", ":", "\n", "    ", "if", "args", ".", "pruned_model", "==", "None", ":", "\n", "        ", "start_epoch", "=", "0", "\n", "best_acc", "=", "0.0", "\n", "best_acc_top1", "=", "0.0", "\n", "\n", "model", ",", "pr_cfg", "=", "get_model", "(", "args", ")", "\n", "optimizer", "=", "get_optimizer", "(", "args", ",", "model", ")", "\n", "\n", "i", "=", "0", "\n", "flag", "=", "True", "\n", "print", "(", "'==> Generating Pruned Model..'", ")", "\n", "for", "name", ",", "module", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "hasattr", "(", "module", ",", "\"mask\"", ")", ":", "\n", "                ", "if", "args", ".", "rearrange", "==", "False", ":", "\n", "                    ", "module", ".", "get_mask", "(", "pr_cfg", "[", "i", "]", ",", "args", ".", "N", ")", "\n", "", "else", ":", "\n", "                    ", "if", "args", ".", "arch", "==", "'mobilenet_v1'", ":", "\n", "                        ", "module", ".", "get_rearr_mask", "(", "pr_cfg", "[", "i", "]", ",", "args", ".", "N", ")", "\n", "", "else", ":", "\n", "                        ", "if", "flag", "==", "False", ":", "\n", "                            ", "module", ".", "get_rearr_mask", "(", "pr_cfg", "[", "i", "]", ",", "args", ".", "N", ")", "\n", "flag", "=", "True", "\n", "", "else", ":", "\n", "                            ", "module", ".", "get_mask", "(", "pr_cfg", "[", "i", "]", ",", "args", ".", "N", ")", "\n", "if", "'fc'", "in", "name", ":", "\n", "                                ", "flag", "=", "True", "\n", "", "else", ":", "\n", "                                ", "flag", "=", "False", "\n", "", "", "", "", "i", "+=", "1", "\n", "\n", "", "", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "if", "args", ".", "resume", "==", "True", ":", "\n", "            ", "start_epoch", ",", "best_acc", "=", "resume", "(", "args", ",", "model", ",", "optimizer", ")", "\n", "\n", "", "if", "len", "(", "args", ".", "gpus", ")", "!=", "1", ":", "\n", "            ", "model", "=", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "args", ".", "gpus", ")", "\n", "\n", "", "validate", "(", "val_loader", ",", "model", ",", "loss_func", ",", "args", ")", "\n", "if", "args", ".", "use_dali", ":", "\n", "            ", "val_loader", ".", "reset", "(", ")", "\n", "\n", "", "for", "epoch", "in", "range", "(", "start_epoch", ",", "args", ".", "num_epochs", ")", ":", "\n", "\n", "            ", "train_obj", ",", "train_acc_top1", ",", "train_acc", "=", "train", "(", "epoch", ",", "train_loader", ",", "model", ",", "loss_func", ",", "optimizer", ")", "\n", "valid_obj", ",", "test_acc_top1", ",", "test_acc", "=", "validate", "(", "val_loader", ",", "model", ",", "loss_func", ",", "args", ")", "\n", "if", "args", ".", "use_dali", ":", "\n", "                ", "train_loader", ".", "reset", "(", ")", "\n", "val_loader", ".", "reset", "(", ")", "\n", "\n", "", "is_best", "=", "best_acc", "<", "test_acc", "\n", "best_acc_top1", "=", "max", "(", "best_acc_top1", ",", "test_acc_top1", ")", "\n", "best_acc", "=", "max", "(", "best_acc", ",", "test_acc", ")", "\n", "\n", "model_state_dict", "=", "model", ".", "module", ".", "state_dict", "(", ")", "if", "len", "(", "args", ".", "gpus", ")", ">", "1", "else", "model", ".", "state_dict", "(", ")", "\n", "\n", "state", "=", "{", "\n", "'state_dict'", ":", "model_state_dict", ",", "\n", "'best_acc'", ":", "best_acc", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "}", "\n", "checkpoint", ".", "save_model", "(", "state", ",", "epoch", "+", "1", ",", "is_best", ")", "\n", "\n", "", "if", "args", ".", "export_onnx", "==", "True", ":", "\n", "            ", "import", "torch", ".", "onnx", "\n", "print", "(", "'==> Exporting Onnx Model..'", ")", "\n", "args", ".", "conv_type", "=", "'DenseConv'", "\n", "converted_model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", ")", ".", "to", "(", "device", ")", "\n", "for", "name", ",", "module", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "                ", "if", "hasattr", "(", "module", ",", "\"mask\"", ")", ":", "\n", "                    ", "sparseWeight", "=", "module", ".", "sparse_weight", "(", ")", "\n", "module", ".", "weight", ".", "data", "=", "sparseWeight", "\n", "", "", "converted_model", ".", "load_state_dict", "(", "model", ".", "state_dict", "(", ")", ",", "strict", "=", "False", ")", "\n", "\n", "dummy_input", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "224", ",", "224", ",", "device", "=", "device", ")", "\n", "ckpt_dir", "=", "Path", "(", "args", ".", "job_dir", ")", "/", "'checkpoint'", "\n", "torch", ".", "onnx", ".", "export", "(", "model", ",", "dummy_input", ",", "f'{ckpt_dir}/best_model.onnx'", ")", "\n", "\n", "", "logger", ".", "info", "(", "'Best accurary(top5): {:.3f} (top1): {:.3f}'", ".", "format", "(", "float", "(", "best_acc", ")", ",", "float", "(", "best_acc_top1", ")", ")", ")", "\n", "\n", "", "else", ":", "\n", "        ", "import", "torch", "\n", "model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", ")", ".", "to", "(", "device", ")", "\n", "ckpt", "=", "torch", ".", "load", "(", "args", ".", "pruned_model", ",", "map_location", "=", "device", ")", "\n", "model", ".", "load_state_dict", "(", "ckpt", "[", "'state_dict'", "]", ",", "strict", "=", "False", ")", "\n", "print", "(", "'==> Evaluating Pruned Model..'", ")", "\n", "validate", "(", "val_loader", ",", "model", ",", "loss_func", ",", "args", ")", "\n", "\n", "if", "args", ".", "export_onnx", "==", "True", ":", "\n", "            ", "import", "torch", ".", "onnx", "\n", "print", "(", "'==> Exporting Onnx Model..'", ")", "\n", "args", ".", "conv_type", "=", "'DenseConv'", "\n", "converted_model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", ")", ".", "to", "(", "device", ")", "\n", "for", "name", ",", "module", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "                ", "if", "hasattr", "(", "module", ",", "\"mask\"", ")", ":", "\n", "                    ", "sparseWeight", "=", "module", ".", "sparse_weight", "(", ")", "\n", "module", ".", "weight", ".", "data", "=", "sparseWeight", "\n", "\n", "", "", "converted_model", ".", "load_state_dict", "(", "model", ".", "state_dict", "(", ")", ",", "strict", "=", "False", ")", "\n", "validate", "(", "val_loader", ",", "converted_model", ",", "loss_func", ",", "args", ")", "\n", "\n", "dummy_input", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "224", ",", "224", ",", "device", "=", "device", ")", "\n", "ckpt_dir", "=", "Path", "(", "args", ".", "job_dir", ")", "/", "'checkpoint'", "\n", "torch", ".", "onnx", ".", "export", "(", "model", ",", "dummy_input", ",", "f'{ckpt_dir}/best_model.onnx'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.None.imagenet.resume": [[380, 399], ["os.path.exists", "print", "torch.load", "torch.load", "torch.load", "model.load_state_dict", "optimizer.load_state_dict", "print", "print", "utils.options.args"], "function", ["None"], ["", "", "", "def", "resume", "(", "args", ",", "model", ",", "optimizer", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "args", ".", "job_dir", "+", "'/checkpoint/model_last.pt'", ")", ":", "\n", "        ", "print", "(", "f\"=> Loading checkpoint \"", ")", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "job_dir", "+", "'/checkpoint/model_last.pt'", ")", "\n", "\n", "start_epoch", "=", "checkpoint", "[", "\"epoch\"", "]", "\n", "\n", "best_acc", "=", "checkpoint", "[", "\"best_acc\"", "]", "\n", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "\"state_dict\"", "]", ")", "\n", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "\"optimizer\"", "]", ")", "\n", "\n", "print", "(", "f\"=> Loaded checkpoint (epoch) {checkpoint['epoch']})\"", ")", "\n", "\n", "return", "start_epoch", ",", "best_acc", "\n", "", "else", ":", "\n", "        ", "print", "(", "f\"=> No checkpoint found at '{args.job_dir}' '/checkpoint/\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.None.imagenet.adjust_learning_rate": [[400, 424], ["print", "float", "math.cos"], "function", ["None"], ["", "", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "step", ",", "len_epoch", ")", ":", "\n", "#Warmup", "\n", "    ", "if", "args", ".", "lr_policy", "==", "'step'", ":", "\n", "        ", "factor", "=", "epoch", "//", "30", "\n", "if", "epoch", ">=", "80", ":", "\n", "            ", "factor", "=", "factor", "+", "1", "\n", "", "lr", "=", "args", ".", "lr", "*", "(", "0.1", "**", "factor", ")", "\n", "", "elif", "args", ".", "lr_policy", "==", "'cos'", ":", "# cos with warm-up", "\n", "        ", "lr", "=", "0.5", "*", "args", ".", "lr", "*", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "(", "epoch", "-", "5", ")", "/", "(", "args", ".", "num_epochs", "-", "5", ")", ")", ")", "\n", "", "elif", "args", ".", "lr_policy", "==", "'exp'", ":", "\n", "        ", "step", "=", "1", "\n", "decay", "=", "0.96", "\n", "lr", "=", "args", ".", "lr", "*", "(", "decay", "**", "(", "epoch", "//", "step", ")", ")", "\n", "", "elif", "args", ".", "lr_policy", "==", "'fixed'", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "if", "epoch", "<", "5", ":", "\n", "            ", "lr", "=", "lr", "*", "float", "(", "1", "+", "step", "+", "epoch", "*", "len_epoch", ")", "/", "(", "5.", "*", "len_epoch", ")", "\n", "\n", "", "if", "step", "==", "0", ":", "\n", "        ", "print", "(", "'current learning rate:{0}'", ".", "format", "(", "lr", ")", ")", "\n", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.None.imagenet.get_optimizer": [[425, 450], ["list", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "model.named_parameters", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "filter", "model.parameters", "utils.options.args"], "function", ["None"], ["", "", "def", "get_optimizer", "(", "args", ",", "model", ")", ":", "\n", "    ", "if", "args", ".", "optimizer", "==", "\"sgd\"", ":", "\n", "\n", "        ", "parameters", "=", "list", "(", "model", ".", "named_parameters", "(", ")", ")", "\n", "bn_params", "=", "[", "v", "for", "n", ",", "v", "in", "parameters", "if", "(", "\"bn\"", "in", "n", ")", "and", "v", ".", "requires_grad", "]", "\n", "rest_params", "=", "[", "v", "for", "n", ",", "v", "in", "parameters", "if", "(", "\"bn\"", "not", "in", "n", ")", "and", "v", ".", "requires_grad", "]", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "[", "\n", "{", "\n", "\"params\"", ":", "bn_params", ",", "\n", "\"weight_decay\"", ":", "args", ".", "weight_decay", ",", "\n", "}", ",", "\n", "{", "\"params\"", ":", "rest_params", ",", "\"weight_decay\"", ":", "args", ".", "weight_decay", "}", ",", "\n", "]", ",", "\n", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ",", "\n", "nesterov", "=", "args", ".", "nesterov", ",", "\n", ")", "\n", "", "elif", "args", ".", "optimizer", "==", "\"adam\"", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model", ".", "parameters", "(", ")", ")", ",", "lr", "=", "args", ".", "lr", "\n", ")", "\n", "\n", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.None.model_tune.main": [[27, 120], ["print", "onnx.load", "tvm.relay.frontend.from_onnx", "tvm.relay.data_dep_optimization.simplify_fc_transpose.convert", "tvm.relay.data_dep_optimization.bsr_conv2d.convert", "tvm.IRModule.from_expr", "tvm.target.Target", "print", "tvm.auto_scheduler.extract_tasks", "enumerate", "model_tune.main.tune_and_evaluate"], "function", ["None"], ["def", "main", "(", ")", ":", "\n", "# Get Model", "\n", "    ", "print", "(", "\"Get Model...\"", ")", "\n", "onnx_model", "=", "onnx", ".", "load", "(", "args", ".", "onnx_path", ")", "\n", "shape_dict", "=", "{", "}", "\n", "for", "input", "in", "onnx_model", ".", "graph", ".", "input", ":", "\n", "        ", "shape_dict", "[", "input", ".", "name", "]", "=", "[", "\n", "dim", ".", "dim_value", "for", "dim", "in", "input", ".", "type", ".", "tensor_type", ".", "shape", ".", "dim", "\n", "]", "\n", "", "mod", ",", "params", "=", "relay", ".", "frontend", ".", "from_onnx", "(", "onnx_model", ")", "\n", "\n", "bs_r", "=", "args", ".", "bsr", "\n", "bs_c", "=", "args", ".", "bsc", "\n", "sparsity", "=", "args", ".", "sparsity", "\n", "\n", "# Conver to Sparse Model", "\n", "mod", ",", "params", "=", "ddo", ".", "simplify_fc_transpose", ".", "convert", "(", "mod", "[", "\"main\"", "]", ",", "params", ")", "\n", "mod", ",", "params", "=", "ddo", ".", "bsr_conv2d", ".", "convert", "(", "\n", "mod", ",", "params", ",", "(", "bs_r", ",", "bs_c", ")", ",", "sparsity_threshold", "=", "sparsity", ",", "layout", "=", "'NHWC'", "\n", ")", "\n", "mod", "=", "tvm", ".", "IRModule", ".", "from_expr", "(", "mod", ")", "\n", "\n", "# Set tune config", "\n", "target", "=", "tvm", ".", "target", ".", "Target", "(", "\"llvm -mtriple=aarch64-linux-gnu -mattr=+neon\"", ")", "\n", "device_key", "=", "\"pixel2\"", "\n", "rpc_host", "=", "\"127.0.0.1\"", "\n", "rpc_port", "=", "9190", "\n", "\n", "log_file", "=", "f\"{str(args.onnx_path).split('.')[-2]}.json\"", "\n", "\n", "# Extract tasks", "\n", "print", "(", "\"Extract tasks...\"", ")", "\n", "tasks", ",", "task_weights", "=", "auto_scheduler", ".", "extract_tasks", "(", "mod", "[", "\"main\"", "]", ",", "params", ",", "target", ")", "\n", "\n", "for", "idx", ",", "task", "in", "enumerate", "(", "tasks", ")", ":", "\n", "        ", "print", "(", "\"========== Task %d  (workload key: %s) ==========\"", "%", "(", "idx", ",", "task", ".", "workload_key", ")", ")", "\n", "print", "(", "task", ".", "compute_dag", ")", "\n", "\n", "", "def", "tune_and_evaluate", "(", ")", ":", "\n", "        ", "print", "(", "\"Begin tuning...\"", ")", "\n", "tuner", "=", "auto_scheduler", ".", "TaskScheduler", "(", "tasks", ",", "task_weights", ")", "\n", "tune_option", "=", "auto_scheduler", ".", "TuningOptions", "(", "\n", "num_measure_trials", "=", "200", ",", "\n", "builder", "=", "auto_scheduler", ".", "LocalBuilder", "(", "build_func", "=", "\"ndk\"", ")", ",", "\n", "runner", "=", "auto_scheduler", ".", "RPCRunner", "(", "\n", "device_key", ",", "\n", "host", "=", "rpc_host", ",", "\n", "port", "=", "rpc_port", ",", "\n", "timeout", "=", "30", ",", "\n", "repeat", "=", "1", ",", "\n", "min_repeat_ms", "=", "200", ",", "\n", "enable_cpu_cache_flush", "=", "True", ",", "\n", ")", ",", "\n", "measure_callbacks", "=", "[", "auto_scheduler", ".", "RecordToFile", "(", "log_file", ")", "]", ",", "\n", ")", "\n", "\n", "tuner", ".", "tune", "(", "tune_option", ")", "\n", "\n", "# Compile with the history best", "\n", "print", "(", "\"Compile...\"", ")", "\n", "with", "auto_scheduler", ".", "ApplyHistoryBest", "(", "log_file", ")", ":", "\n", "            ", "with", "tvm", ".", "transform", ".", "PassContext", "(", "\n", "opt_level", "=", "3", ",", "config", "=", "{", "\"relay.backend.use_auto_scheduler\"", ":", "True", "}", "\n", ")", ":", "\n", "                ", "lib", "=", "relay", ".", "build", "(", "mod", ",", "target", "=", "target", ",", "params", "=", "params", ")", "\n", "\n", "# Export library", "\n", "", "", "tmp", "=", "tempdir", "(", ")", "\n", "filename", "=", "\"net.so\"", "\n", "lib", ".", "export_library", "(", "tmp", ".", "relpath", "(", "filename", ")", ",", "ndk", ".", "create_shared", ")", "\n", "\n", "# Upload module to device", "\n", "print", "(", "\"Upload...\"", ")", "\n", "remote", "=", "auto_scheduler", ".", "utils", ".", "request_remote", "(", "device_key", ",", "rpc_host", ",", "rpc_port", ",", "timeout", "=", "10000", ")", "\n", "remote", ".", "upload", "(", "tmp", ".", "relpath", "(", "filename", ")", ")", "\n", "rlib", "=", "remote", ".", "load_module", "(", "filename", ")", "\n", "\n", "# Create graph executor", "\n", "dev", "=", "remote", ".", "cpu", "(", ")", "\n", "module", "=", "graph_executor", ".", "GraphModule", "(", "rlib", "[", "\"default\"", "]", "(", "dev", ")", ")", "\n", "for", "key", ",", "value", "in", "shape_dict", ".", "items", "(", ")", ":", "\n", "            ", "data_tvm", "=", "tvm", ".", "nd", ".", "array", "(", "(", "np", ".", "random", ".", "uniform", "(", "size", "=", "value", ")", ")", ".", "astype", "(", "\"float32\"", ")", ")", "\n", "module", ".", "set_input", "(", "key", ",", "data_tvm", ")", "\n", "\n", "# Evaluate", "\n", "", "print", "(", "\"Evaluate inference time cost...\"", ")", "\n", "ftimer", "=", "module", ".", "module", ".", "time_evaluator", "(", "\"run\"", ",", "dev", ",", "repeat", "=", "3", ",", "min_repeat_ms", "=", "500", ")", "\n", "prof_res", "=", "np", ".", "array", "(", "ftimer", "(", ")", ".", "results", ")", "*", "1e3", "# convert to millisecond", "\n", "print", "(", "\n", "\"Mean inference time (std dev): %.2f ms (%.2f ms)\"", "%", "(", "np", ".", "mean", "(", "prof_res", ")", ",", "np", ".", "std", "(", "prof_res", ")", ")", "\n", ")", "\n", "\n", "", "tune_and_evaluate", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.common.LabelSmoothing.__init__": [[16, 25], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.lmbxmu_1xN.data.imagenet.Data.__init__"], ["def", "__init__", "(", "self", ",", "smoothing", "=", "0.0", ")", ":", "\n", "        ", "\"\"\"\n        Constructor for the LabelSmoothing module.\n\n        :param smoothing: label smoothing factor\n        \"\"\"", "\n", "super", "(", "LabelSmoothing", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "confidence", "=", "1.0", "-", "smoothing", "\n", "self", ".", "smoothing", "=", "smoothing", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.common.LabelSmoothing.forward": [[26, 34], ["torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "nll_loss.squeeze.squeeze.squeeze", "loss.mean", "torch.nn.functional.log_softmax.gather", "torch.nn.functional.log_softmax.gather", "torch.nn.functional.log_softmax.mean", "torch.nn.functional.log_softmax.mean", "target.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "target", ")", ":", "\n", "        ", "logprobs", "=", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "x", ",", "dim", "=", "-", "1", ")", "\n", "\n", "nll_loss", "=", "-", "logprobs", ".", "gather", "(", "dim", "=", "-", "1", ",", "index", "=", "target", ".", "unsqueeze", "(", "1", ")", ")", "\n", "nll_loss", "=", "nll_loss", ".", "squeeze", "(", "1", ")", "\n", "smooth_loss", "=", "-", "logprobs", ".", "mean", "(", "dim", "=", "-", "1", ")", "\n", "loss", "=", "self", ".", "confidence", "*", "nll_loss", "+", "self", ".", "smoothing", "*", "smooth_loss", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.common.AverageMeter.__init__": [[37, 41], ["common.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.lmbxmu_1xN.utils.common.AverageMeter.reset"], ["def", "__init__", "(", "self", ",", "name", ",", "fmt", "=", "':f'", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.common.AverageMeter.reset": [[42, 47], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.common.AverageMeter.update": [[48, 53], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.common.AverageMeter.__str__": [[54, 57], ["fmtstr.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "fmtstr", "=", "'{name} {val'", "+", "self", ".", "fmt", "+", "'} ({avg'", "+", "self", ".", "fmt", "+", "'})'", "\n", "return", "fmtstr", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.common.record_config.__init__": [[72, 99], ["datetime.datetime.now().strftime", "datetime.date.today", "pathlib.Path", "common.record_config.__init__._make_dir"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "now", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y-%m-%d-%H:%M:%S'", ")", "\n", "today", "=", "datetime", ".", "date", ".", "today", "(", ")", "\n", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "job_dir", "=", "Path", "(", "args", ".", "job_dir", ")", "\n", "\n", "def", "_make_dir", "(", "path", ")", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n", "", "", "_make_dir", "(", "self", ".", "job_dir", ")", "\n", "\n", "config_dir", "=", "self", ".", "job_dir", "/", "'config.txt'", "\n", "#if not os.path.exists(config_dir):", "\n", "if", "args", ".", "resume", "!=", "None", ":", "\n", "            ", "with", "open", "(", "config_dir", ",", "'a'", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "now", "+", "'\\n\\n'", ")", "\n", "for", "arg", "in", "vars", "(", "args", ")", ":", "\n", "                    ", "f", ".", "write", "(", "'{}: {}\\n'", ".", "format", "(", "arg", ",", "getattr", "(", "args", ",", "arg", ")", ")", ")", "\n", "", "f", ".", "write", "(", "'\\n'", ")", "\n", "", "", "else", ":", "\n", "            ", "with", "open", "(", "config_dir", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "now", "+", "'\\n\\n'", ")", "\n", "for", "arg", "in", "vars", "(", "args", ")", ":", "\n", "                    ", "f", ".", "write", "(", "'{}: {}\\n'", ".", "format", "(", "arg", ",", "getattr", "(", "args", ",", "arg", ")", ")", ")", "\n", "", "f", ".", "write", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.common.checkpoint.__init__": [[101, 118], ["datetime.datetime.now().strftime", "pathlib.Path", "common.checkpoint.__init__._make_dir"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "now", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y-%m-%d-%H:%M:%S'", ")", "\n", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "job_dir", "=", "Path", "(", "args", ".", "job_dir", ")", "\n", "self", ".", "ckpt_dir", "=", "self", ".", "job_dir", "/", "'checkpoint'", "\n", "self", ".", "run_dir", "=", "self", ".", "job_dir", "/", "'run'", "\n", "\n", "def", "_make_dir", "(", "path", ")", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n", "", "", "_make_dir", "(", "self", ".", "job_dir", ")", "\n", "_make_dir", "(", "self", ".", "ckpt_dir", ")", "\n", "_make_dir", "(", "self", ".", "run_dir", ")", "\n", "\n", "record_config", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.common.checkpoint.save_model": [[119, 124], ["torch.save", "torch.save", "torch.save", "torch.save", "shutil.copyfile"], "methods", ["None"], ["", "def", "save_model", "(", "self", ",", "state", ",", "epoch", ",", "is_best", ")", ":", "\n", "        ", "save_path", "=", "f'{self.ckpt_dir}/model_last.pt'", "\n", "torch", ".", "save", "(", "state", ",", "save_path", ")", "\n", "if", "is_best", ":", "\n", "            ", "shutil", ".", "copyfile", "(", "save_path", ",", "f'{self.ckpt_dir}/model_best.pt'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.common.checkpoint.save_honey_model": [[125, 129], ["torch.save", "torch.save", "torch.save", "torch.save"], "methods", ["None"], ["", "", "def", "save_honey_model", "(", "self", ",", "state", ")", ":", "\n", "        ", "save_path", "=", "f'{self.ckpt_dir}/bestmodel_after_bee.pt'", "\n", "# print('=> Saving model to {}'.format(save_path))", "\n", "torch", ".", "save", "(", "state", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.common.ensure_path": [[59, 62], ["pathlib.Path", "pathlib.Path.mkdir"], "function", ["home.repos.pwc.inspect_result.lmbxmu_1xN.utils.common.mkdir"], ["", "", "def", "ensure_path", "(", "directory", ")", ":", "\n", "    ", "directory", "=", "Path", "(", "directory", ")", "\n", "directory", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.common.mkdir": [[63, 69], ["os.mkdir", "os.path.isdir", "common.mkdir", "os.path.split"], "function", ["home.repos.pwc.inspect_result.lmbxmu_1xN.utils.common.mkdir", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.common.mkdir"], ["", "def", "mkdir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "        ", "mkdir", "(", "os", ".", "path", ".", "split", "(", "path", ")", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "        ", "return", "\n", "", "os", ".", "mkdir", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.common.get_logger": [[132, 147], ["logging.getLogger", "logging.Formatter", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logging.getLogger.addHandler", "logging.getLogger.setLevel"], "function", ["None"], ["", "", "def", "get_logger", "(", "file_path", ")", ":", "\n", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "'gal'", ")", "\n", "log_format", "=", "'%(asctime)s | %(message)s'", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "log_format", ",", "datefmt", "=", "'%m/%d %I:%M:%S %p'", ")", "\n", "file_handler", "=", "logging", ".", "FileHandler", "(", "file_path", ")", "\n", "file_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "stream_handler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "stream_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "\n", "logger", ".", "addHandler", "(", "file_handler", ")", "\n", "logger", ".", "addHandler", "(", "stream_handler", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.common.accuracy": [[149, 163], ["torch.no_grad", "torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.scheduler.get_policy": [[6, 18], ["None"], "function", ["None"], ["def", "get_policy", "(", "name", ")", ":", "\n", "    ", "if", "name", "is", "None", ":", "\n", "        ", "return", "constant_lr", "\n", "\n", "", "out_dict", "=", "{", "\n", "\"constant\"", ":", "constant_lr", ",", "\n", "\"cosine\"", ":", "cosine_lr", ",", "\n", "\"efficientnet_lr\"", ":", "efficientnet_lr", ",", "\n", "\"step\"", ":", "multistep_lr", ",", "\n", "}", "\n", "\n", "return", "out_dict", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.scheduler.assign_learning_rate": [[20, 23], ["None"], "function", ["None"], ["", "def", "assign_learning_rate", "(", "optimizer", ",", "new_lr", ")", ":", "\n", "    ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "\"lr\"", "]", "=", "new_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.scheduler.constant_lr": [[25, 37], ["scheduler.assign_learning_rate", "scheduler._warmup_lr"], "function", ["home.repos.pwc.inspect_result.lmbxmu_1xN.utils.scheduler.assign_learning_rate", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.scheduler._warmup_lr"], ["", "", "def", "constant_lr", "(", "optimizer", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "def", "_lr_adjuster", "(", "epoch", ",", "iteration", ")", ":", "\n", "        ", "if", "epoch", "<", "args", ".", "warmup_length", ":", "\n", "            ", "lr", "=", "_warmup_lr", "(", "args", ".", "lr", ",", "args", ".", "warmup_length", ",", "epoch", ")", "\n", "", "else", ":", "\n", "            ", "lr", "=", "args", ".", "lr", "\n", "\n", "", "assign_learning_rate", "(", "optimizer", ",", "lr", ")", "\n", "\n", "return", "lr", "\n", "\n", "", "return", "_lr_adjuster", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.scheduler.cosine_lr": [[39, 53], ["scheduler.assign_learning_rate", "scheduler._warmup_lr", "numpy.cos"], "function", ["home.repos.pwc.inspect_result.lmbxmu_1xN.utils.scheduler.assign_learning_rate", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.scheduler._warmup_lr"], ["", "def", "cosine_lr", "(", "optimizer", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "def", "_lr_adjuster", "(", "epoch", ",", "iteration", ")", ":", "\n", "        ", "if", "epoch", "<", "args", ".", "warmup_length", ":", "\n", "            ", "lr", "=", "_warmup_lr", "(", "args", ".", "lr", ",", "args", ".", "warmup_length", ",", "epoch", ")", "\n", "", "else", ":", "\n", "            ", "e", "=", "epoch", "-", "args", ".", "warmup_length", "\n", "es", "=", "args", ".", "epochs", "-", "args", ".", "warmup_length", "\n", "lr", "=", "0.5", "*", "(", "1", "+", "np", ".", "cos", "(", "np", ".", "pi", "*", "e", "/", "es", ")", ")", "*", "args", ".", "lr", "\n", "\n", "", "assign_learning_rate", "(", "optimizer", ",", "lr", ")", "\n", "\n", "return", "lr", "\n", "\n", "", "return", "_lr_adjuster", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.scheduler.efficientnet_lr": [[55, 67], ["scheduler.assign_learning_rate", "scheduler._warmup_lr"], "function", ["home.repos.pwc.inspect_result.lmbxmu_1xN.utils.scheduler.assign_learning_rate", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.scheduler._warmup_lr"], ["", "def", "efficientnet_lr", "(", "optimizer", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "def", "_lr_adjuster", "(", "epoch", ",", "iteration", ")", ":", "\n", "        ", "if", "epoch", "<", "args", ".", "warmup_length", ":", "\n", "            ", "lr", "=", "_warmup_lr", "(", "args", ".", "lr", ",", "args", ".", "warmup_length", ",", "epoch", ")", "\n", "", "else", ":", "\n", "            ", "lr", "=", "args", ".", "lr", "*", "(", "0.97", "**", "(", "epoch", "/", "2.4", ")", ")", "\n", "\n", "", "assign_learning_rate", "(", "optimizer", ",", "lr", ")", "\n", "\n", "return", "lr", "\n", "\n", "", "return", "_lr_adjuster", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.scheduler.multistep_lr": [[69, 80], ["scheduler.assign_learning_rate"], "function", ["home.repos.pwc.inspect_result.lmbxmu_1xN.utils.scheduler.assign_learning_rate"], ["", "def", "multistep_lr", "(", "optimizer", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by 10 every 30 epochs\"\"\"", "\n", "\n", "def", "_lr_adjuster", "(", "epoch", ",", "iteration", ")", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "(", "args", ".", "lr_gamma", "**", "(", "epoch", "//", "args", ".", "lr_adjust", ")", ")", "\n", "\n", "assign_learning_rate", "(", "optimizer", ",", "lr", ")", "\n", "\n", "return", "lr", "\n", "\n", "", "return", "_lr_adjuster", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.scheduler._warmup_lr": [[82, 84], ["None"], "function", ["None"], ["", "def", "_warmup_lr", "(", "base_lr", ",", "warmup_length", ",", "epoch", ")", ":", "\n", "    ", "return", "base_lr", "*", "(", "epoch", "+", "1", ")", "/", "warmup_length", "\n", "", ""]], "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.Builder.__init__": [[12, 16], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "conv_layer", ",", "bn_layer", ",", "first_layer", "=", "None", ")", ":", "\n", "        ", "self", ".", "conv_layer", "=", "conv_layer", "\n", "self", ".", "bn_layer", "=", "bn_layer", "\n", "self", ".", "first_layer", "=", "first_layer", "or", "conv_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.Builder.conv": [[17, 60], ["print", "conv_layer", "conv_layer", "conv_layer", "conv_layer"], "methods", ["None"], ["", "def", "conv", "(", "self", ",", "kernel_size", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "first_layer", "=", "False", ",", "bias", "=", "False", ")", ":", "\n", "        ", "conv_layer", "=", "self", ".", "first_layer", "if", "first_layer", "else", "self", ".", "conv_layer", "\n", "\n", "if", "first_layer", ":", "\n", "            ", "print", "(", "f\"==> Building first layer with {args.first_layer_type}\"", ")", "\n", "\n", "", "if", "kernel_size", "==", "3", ":", "\n", "            ", "conv", "=", "conv_layer", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "bias", ",", "\n", ")", "\n", "", "elif", "kernel_size", "==", "1", ":", "\n", "            ", "conv", "=", "conv_layer", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "bias", "\n", ")", "\n", "", "elif", "kernel_size", "==", "5", ":", "\n", "            ", "conv", "=", "conv_layer", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "5", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "2", ",", "\n", "bias", "=", "bias", ",", "\n", ")", "\n", "", "elif", "kernel_size", "==", "7", ":", "\n", "            ", "conv", "=", "conv_layer", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "3", ",", "\n", "bias", "=", "bias", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n", "#self._init_conv(conv)", "\n", "\n", "", "return", "conv", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.Builder.conv2d": [[61, 83], ["builder.Builder.conv_layer"], "methods", ["None"], ["", "def", "conv2d", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "True", ",", "\n", "padding_mode", "=", "\"zeros\"", ",", "\n", ")", ":", "\n", "        ", "return", "self", ".", "conv_layer", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "dilation", ",", "\n", "groups", ",", "\n", "bias", ",", "\n", "padding_mode", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.Builder.conv3x3": [[85, 89], ["builder.Builder.conv"], "methods", ["home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.Builder.conv"], ["", "def", "conv3x3", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "first_layer", "=", "False", ")", ":", "\n", "        ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "c", "=", "self", ".", "conv", "(", "3", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "stride", ",", "first_layer", "=", "first_layer", ")", "\n", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.Builder.conv1x1": [[90, 94], ["builder.Builder.conv"], "methods", ["home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.Builder.conv"], ["", "def", "conv1x1", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "first_layer", "=", "False", ")", ":", "\n", "        ", "\"\"\"1x1 convolution with padding\"\"\"", "\n", "c", "=", "self", ".", "conv", "(", "1", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "stride", ",", "first_layer", "=", "first_layer", ")", "\n", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.Builder.conv1x1_fc": [[95, 99], ["builder.Builder.conv"], "methods", ["home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.Builder.conv"], ["", "def", "conv1x1_fc", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "first_layer", "=", "False", ")", ":", "\n", "        ", "\"\"\"full connect layer\"\"\"", "\n", "c", "=", "self", ".", "conv", "(", "1", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "stride", ",", "first_layer", "=", "first_layer", ",", "bias", "=", "True", ")", "\n", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.Builder.conv7x7": [[100, 104], ["builder.Builder.conv"], "methods", ["home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.Builder.conv"], ["", "def", "conv7x7", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "first_layer", "=", "False", ")", ":", "\n", "        ", "\"\"\"7x7 convolution with padding\"\"\"", "\n", "c", "=", "self", ".", "conv", "(", "7", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "stride", ",", "first_layer", "=", "first_layer", ")", "\n", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.Builder.conv5x5": [[105, 109], ["builder.Builder.conv"], "methods", ["home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.Builder.conv"], ["", "def", "conv5x5", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "first_layer", "=", "False", ")", ":", "\n", "        ", "\"\"\"5x5 convolution with padding\"\"\"", "\n", "c", "=", "self", ".", "conv", "(", "5", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "stride", ",", "first_layer", "=", "first_layer", ")", "\n", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.Builder.batchnorm": [[110, 112], ["builder.Builder.bn_layer"], "methods", ["None"], ["", "def", "batchnorm", "(", "self", ",", "planes", ",", "last_bn", "=", "False", ",", "first_layer", "=", "False", ")", ":", "\n", "        ", "return", "self", ".", "bn_layer", "(", "planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.Builder.activation": [[113, 118], ["ValueError", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "activation", "(", "self", ")", ":", "\n", "        ", "if", "args", ".", "nonlinearity", "==", "\"relu\"", ":", "\n", "            ", "return", "(", "lambda", ":", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"{args.nonlinearity} is not an initialization option!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.Builder._init_conv": [[119, 162], ["torch.init._calculate_correct_fan", "torch.init._calculate_correct_fan", "torch.init.calculate_gain", "torch.init.calculate_gain", "conv.data.zero_", "pdb.set_trace", "math.sqrt", "conv.weight.data.sign", "torch.init._calculate_correct_fan", "torch.init._calculate_correct_fan", "torch.init.calculate_gain", "torch.init.calculate_gain", "math.sqrt", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.init._calculate_correct_fan", "torch.init._calculate_correct_fan", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "ValueError", "math.sqrt", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "conv.weight.data.normal_", "math.sqrt"], "methods", ["None"], ["", "", "def", "_init_conv", "(", "self", ",", "conv", ")", ":", "\n", "        ", "if", "args", ".", "init", "==", "\"signed_constant\"", ":", "\n", "\n", "            ", "fan", "=", "nn", ".", "init", ".", "_calculate_correct_fan", "(", "conv", ".", "weight", ",", "args", ".", "mode", ")", "\n", "if", "args", ".", "scale_fan", ":", "\n", "                ", "fan", "=", "fan", "*", "(", "1", "-", "args", ".", "prune_rate", ")", "\n", "", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "args", ".", "nonlinearity", ")", "\n", "std", "=", "gain", "/", "math", ".", "sqrt", "(", "fan", ")", "\n", "conv", ".", "weight", ".", "data", "=", "conv", ".", "weight", ".", "data", ".", "sign", "(", ")", "*", "std", "\n", "\n", "", "elif", "args", ".", "init", "==", "\"unsigned_constant\"", ":", "\n", "\n", "            ", "fan", "=", "nn", ".", "init", ".", "_calculate_correct_fan", "(", "conv", ".", "weight", ",", "args", ".", "mode", ")", "\n", "if", "args", ".", "scale_fan", ":", "\n", "                ", "fan", "=", "fan", "*", "(", "1", "-", "args", ".", "prune_rate", ")", "\n", "\n", "", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "args", ".", "nonlinearity", ")", "\n", "std", "=", "gain", "/", "math", ".", "sqrt", "(", "fan", ")", "\n", "conv", ".", "weight", ".", "data", "=", "torch", ".", "ones_like", "(", "conv", ".", "weight", ".", "data", ")", "*", "std", "\n", "\n", "", "elif", "args", ".", "init", "==", "\"kaiming_normal\"", ":", "\n", "\n", "            ", "if", "args", ".", "scale_fan", ":", "\n", "                ", "fan", "=", "nn", ".", "init", ".", "_calculate_correct_fan", "(", "conv", ".", "weight", ",", "args", ".", "mode", ")", "\n", "fan", "=", "fan", "*", "(", "1", "-", "args", ".", "prune_rate", ")", "\n", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "args", ".", "nonlinearity", ")", "\n", "std", "=", "gain", "/", "math", ".", "sqrt", "(", "fan", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "conv", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "std", ")", "\n", "", "", "else", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "\n", "conv", ".", "weight", ",", "mode", "=", "args", ".", "mode", ",", "nonlinearity", "=", "args", ".", "nonlinearity", "\n", ")", "\n", "\n", "", "", "elif", "args", ".", "init", "==", "\"standard\"", ":", "\n", "            ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "conv", ".", "weight", ",", "a", "=", "math", ".", "sqrt", "(", "5", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"{args.init} is not an initialization option!\"", ")", "\n", "\n", "", "if", "conv", ".", "bias", ".", "data", "is", "not", "None", ":", "\n", "            ", "conv", ".", "data", ".", "zero_", "(", ")", "\n", "import", "pdb", "\n", "pdb", ".", "set_trace", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.get_builder": [[163, 180], ["print", "print", "getattr", "getattr", "builder.Builder", "getattr", "print"], "function", ["None"], ["", "", "", "def", "get_builder", "(", ")", ":", "\n", "\n", "    ", "print", "(", "\"==> Conv Type: {}\"", ".", "format", "(", "args", ".", "conv_type", ")", ")", "\n", "print", "(", "\"==> BN Type: {}\"", ".", "format", "(", "args", ".", "bn_type", ")", ")", "\n", "\n", "conv_layer", "=", "getattr", "(", "utils", ".", "conv_type", ",", "args", ".", "conv_type", ")", "\n", "bn_layer", "=", "getattr", "(", "utils", ".", "conv_type", ",", "args", ".", "bn_type", ")", "\n", "\n", "if", "args", ".", "first_layer_type", "is", "not", "None", ":", "\n", "        ", "first_layer", "=", "getattr", "(", "utils", ".", "conv_type", ",", "args", ".", "first_layer_type", ")", "\n", "print", "(", "f\"==> First Layer Type {args.first_layer_type}\"", ")", "\n", "", "else", ":", "\n", "        ", "first_layer", "=", "None", "\n", "\n", "", "builder", "=", "Builder", "(", "conv_layer", "=", "conv_layer", ",", "bn_layer", "=", "bn_layer", ",", "first_layer", "=", "first_layer", ")", "\n", "\n", "return", "builder", "\n", "", ""]], "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.conv_type.NonAffineBatchNorm.__init__": [[18, 20], ["torch.BatchNorm2d.__init__"], "methods", ["home.repos.pwc.inspect_result.lmbxmu_1xN.data.imagenet.Data.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ")", ":", "\n", "        ", "super", "(", "NonAffineBatchNorm", ",", "self", ")", ".", "__init__", "(", "dim", ",", "affine", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.conv_type.BlockL1Conv.__init__": [[33, 36], ["torch.Conv2d.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.lmbxmu_1xN.data.imagenet.Data.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "mask", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "self", ".", "weight", ".", "shape", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.conv_type.BlockL1Conv.forward": [[37, 43], ["torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d"], "methods", ["home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.Builder.conv2d", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.Builder.conv2d", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.Builder.conv2d", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.Builder.conv2d"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "sparseWeight", "=", "self", ".", "mask", "*", "self", ".", "weight", "\n", "x", "=", "F", ".", "conv2d", "(", "\n", "x", ",", "sparseWeight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", "\n", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.conv_type.BlockL1Conv.sparse_weight": [[44, 47], ["None"], "methods", ["None"], ["", "def", "sparse_weight", "(", "self", ")", ":", "\n", "        ", "sparseWeight", "=", "self", ".", "mask", "*", "self", ".", "weight", "\n", "return", "sparseWeight", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.conv_type.BlockL1Conv.left_weight": [[48, 52], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "conv_type.BlockL1Conv.mask.cpu", "conv_type.BlockL1Conv.weight.cpu", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["None"], ["", "def", "left_weight", "(", "self", ")", ":", "\n", "        ", "sparseWeight", "=", "self", ".", "mask", ".", "cpu", "(", ")", "*", "self", ".", "weight", ".", "cpu", "(", ")", "\n", "l1_value", "=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "sparseWeight", ")", ")", "\n", "return", "l1_value", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.conv_type.BlockL1Conv.get_rearr_mask": [[54, 74], ["conv_type.BlockL1Conv.weight.detach().cpu", "conv_type.rearrange_w", "torch.sum.permute", "torch.sum.permute", "torch.sum.permute", "torch.sum.permute", "torch.sum.contiguous().view", "torch.sum.contiguous().view", "torch.sum.contiguous().view", "torch.sum.contiguous().view", "int", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "m.permute.permute.repeat", "m.permute.permute.view", "m.permute.permute.permute", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.sum.size", "torch.sum.size", "torch.sum.size", "torch.sum.size", "conv_type.BlockL1Conv.weight.detach", "torch.sum.contiguous", "torch.sum.contiguous", "torch.sum.contiguous", "torch.sum.contiguous", "torch.sum.size", "torch.sum.size", "torch.sum.size", "torch.sum.size"], "methods", ["home.repos.pwc.inspect_result.lmbxmu_1xN.utils.conv_type.rearrange_w"], ["", "def", "get_rearr_mask", "(", "self", ",", "pr_rate", ",", "N", ")", ":", "\n", "        ", "w", "=", "self", ".", "weight", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "c_out", ",", "c_in", ",", "k_1", ",", "k_2", "=", "w", ".", "shape", "\n", "w", ",", "rearrange_indice", "=", "rearrange_w", "(", "w", ",", "N", ",", "pr_rate", ")", "\n", "w", "=", "w", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", "\n", "w", "=", "w", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "N", "*", "k_1", "*", "k_2", ")", "\n", "prune", "=", "int", "(", "w", ".", "size", "(", "0", ")", "*", "pr_rate", ")", "\n", "w", "=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "w", ")", ",", "1", ")", "\n", "_", ",", "indice", "=", "torch", ".", "topk", "(", "w", ",", "prune", ",", "largest", "=", "False", ")", "\n", "m", "=", "torch", ".", "ones", "(", "w", ".", "size", "(", "0", ")", ")", "\n", "m", "[", "indice", "]", "=", "0", "\n", "m", "=", "torch", ".", "unsqueeze", "(", "m", ",", "1", ")", "\n", "m", "=", "m", ".", "repeat", "(", "1", ",", "N", "*", "k_1", "*", "k_2", ")", "\n", "m", "=", "m", ".", "view", "(", "c_in", ",", "c_out", ",", "k_1", ",", "k_2", ")", "\n", "m", "=", "m", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", "\n", "re_m", "=", "torch", ".", "zeros_like", "(", "m", ")", "\n", "for", "i", "in", "range", "(", "c_out", ")", ":", "\n", "            ", "re_m", "[", "rearrange_indice", "[", "i", "]", "]", "=", "m", "[", "i", "]", "\n", "", "self", ".", "bias", ".", "requires_grad", "=", "False", "\n", "self", ".", "mask", "=", "nn", ".", "Parameter", "(", "re_m", ",", "requires_grad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.conv_type.BlockL1Conv.get_mask": [[75, 91], ["conv_type.BlockL1Conv.weight.detach().cpu", "torch.sum.permute", "torch.sum.permute", "torch.sum.permute", "torch.sum.permute", "torch.sum.contiguous().view", "torch.sum.contiguous().view", "torch.sum.contiguous().view", "torch.sum.contiguous().view", "int", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "m.permute.permute.repeat", "m.permute.permute.view", "m.permute.permute.permute", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.sum.size", "torch.sum.size", "torch.sum.size", "torch.sum.size", "conv_type.BlockL1Conv.weight.detach", "torch.sum.contiguous", "torch.sum.contiguous", "torch.sum.contiguous", "torch.sum.contiguous", "torch.sum.size", "torch.sum.size", "torch.sum.size", "torch.sum.size"], "methods", ["None"], ["", "def", "get_mask", "(", "self", ",", "pr_rate", ",", "N", ")", ":", "\n", "        ", "w", "=", "self", ".", "weight", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "c_out", ",", "c_in", ",", "k_1", ",", "k_2", "=", "w", ".", "shape", "\n", "w", "=", "w", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", "\n", "w", "=", "w", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "N", "*", "k_1", "*", "k_2", ")", "\n", "prune", "=", "int", "(", "w", ".", "size", "(", "0", ")", "*", "pr_rate", ")", "\n", "w", "=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "w", ")", ",", "1", ")", "\n", "_", ",", "indice", "=", "torch", ".", "topk", "(", "w", ",", "prune", ",", "largest", "=", "False", ")", "\n", "m", "=", "torch", ".", "ones", "(", "w", ".", "size", "(", "0", ")", ")", "\n", "m", "[", "indice", "]", "=", "0", "\n", "m", "=", "torch", ".", "unsqueeze", "(", "m", ",", "1", ")", "\n", "m", "=", "m", ".", "repeat", "(", "1", ",", "N", "*", "k_1", "*", "k_2", ")", "\n", "m", "=", "m", ".", "view", "(", "c_in", ",", "c_out", ",", "k_1", ",", "k_2", ")", "\n", "m", "=", "m", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", "\n", "self", ".", "bias", ".", "requires_grad", "=", "False", "\n", "self", ".", "mask", "=", "nn", ".", "Parameter", "(", "m", ",", "requires_grad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.conv_type.BlockRandomConv.__init__": [[94, 97], ["torch.Conv2d.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.lmbxmu_1xN.data.imagenet.Data.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "mask", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "self", ".", "weight", ".", "shape", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.conv_type.BlockRandomConv.forward": [[98, 104], ["torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d"], "methods", ["home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.Builder.conv2d", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.Builder.conv2d", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.Builder.conv2d", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.Builder.conv2d"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "sparseWeight", "=", "self", ".", "mask", "*", "self", ".", "weight", "\n", "x", "=", "F", ".", "conv2d", "(", "\n", "x", ",", "sparseWeight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", "\n", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.conv_type.BlockRandomConv.get_mask": [[105, 120], ["conv_type.BlockRandomConv.weight.detach().cpu", "w.contiguous().view.contiguous().view.permute", "w.contiguous().view.contiguous().view.contiguous().view", "int", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "m.permute.permute.repeat", "m.permute.permute.view", "m.permute.permute.permute", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "w.contiguous().view.contiguous().view.size", "w.contiguous().view.contiguous().view.size", "conv_type.BlockRandomConv.weight.detach", "w.contiguous().view.contiguous().view.contiguous", "w.contiguous().view.contiguous().view.size"], "methods", ["None"], ["", "def", "get_mask", "(", "self", ",", "pr_rate", ",", "N", ")", ":", "\n", "        ", "w", "=", "self", ".", "weight", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "c_out", ",", "c_in", ",", "k_1", ",", "k_2", "=", "w", ".", "shape", "\n", "w", "=", "w", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", "\n", "w", "=", "w", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "N", "*", "k_1", "*", "k_2", ")", "\n", "preserve", "=", "int", "(", "w", ".", "size", "(", "0", ")", "*", "pr_rate", ")", "\n", "indice", "=", "torch", ".", "randint", "(", "w", ".", "size", "(", "0", ")", ",", "(", "preserve", ",", ")", ")", "\n", "m", "=", "torch", ".", "ones", "(", "w", ".", "size", "(", "0", ")", ")", "\n", "m", "[", "indice", "]", "=", "0", "\n", "m", "=", "torch", ".", "unsqueeze", "(", "m", ",", "1", ")", "\n", "m", "=", "m", ".", "repeat", "(", "1", ",", "N", "*", "k_1", "*", "k_2", ")", "\n", "m", "=", "m", ".", "view", "(", "c_in", ",", "c_out", ",", "k_1", ",", "k_2", ")", "\n", "m", "=", "m", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", "\n", "self", ".", "bias", ".", "requires_grad", "=", "False", "\n", "self", ".", "mask", "=", "nn", ".", "Parameter", "(", "m", ",", "requires_grad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.conv_type.UnstructureConv.__init__": [[122, 125], ["torch.Conv2d.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.lmbxmu_1xN.data.imagenet.Data.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "mask", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "self", ".", "weight", ".", "shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.conv_type.UnstructureConv.forward": [[126, 132], ["torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d"], "methods", ["home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.Builder.conv2d", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.Builder.conv2d", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.Builder.conv2d", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.Builder.conv2d"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "sparseWeight", "=", "self", ".", "mask", "*", "self", ".", "weight", "\n", "x", "=", "F", ".", "conv2d", "(", "\n", "x", ",", "sparseWeight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", "\n", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.conv_type.UnstructureConv.get_mask": [[133, 143], ["conv_type.UnstructureConv.weight.detach().cpu", "w.view.view.view", "conv_type.UnstructureConv.mask.detach().cpu", "m.view.view.view", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "int", "m.view.view.view", "conv_type.UnstructureConv.weight.detach", "conv_type.UnstructureConv.mask.detach", "w.view.view.size"], "methods", ["None"], ["", "def", "get_mask", "(", "self", ",", "prune_rate", ")", ":", "\n", "        ", "self", ".", "prune_rate", "=", "prune_rate", "\n", "w", "=", "self", ".", "weight", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "w", "=", "w", ".", "view", "(", "-", "1", ")", "#c_out * (c_in * k * k) -> 4 * (c_out * c_in * k * k / 4)", "\n", "m", "=", "self", ".", "mask", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "m", "=", "m", ".", "view", "(", "-", "1", ")", "\n", "_", ",", "indice", "=", "torch", ".", "topk", "(", "torch", ".", "abs", "(", "w", ")", ",", "int", "(", "w", ".", "size", "(", "0", ")", "*", "prune_rate", ")", ",", "largest", "=", "False", ")", "\n", "m", "[", "indice", "]", "=", "0", "\n", "self", ".", "bias", ".", "requires_grad", "=", "False", "\n", "self", ".", "mask", "=", "nn", ".", "Parameter", "(", "m", ".", "view", "(", "self", ".", "weight", ".", "shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.conv_type.StructureConv.__init__": [[146, 149], ["torch.Conv2d.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.lmbxmu_1xN.data.imagenet.Data.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "mask", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "self", ".", "weight", ".", "shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.conv_type.StructureConv.forward": [[150, 156], ["torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d"], "methods", ["home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.Builder.conv2d", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.Builder.conv2d", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.Builder.conv2d", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.Builder.conv2d"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "sparseWeight", "=", "self", ".", "mask", "*", "self", ".", "weight", "\n", "x", "=", "F", ".", "conv2d", "(", "\n", "x", ",", "sparseWeight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", "\n", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.conv_type.StructureConv.get_mask": [[157, 171], ["conv_type.StructureConv.weight.detach().cpu", "torch.sum.contiguous().view", "torch.sum.contiguous().view", "torch.sum.contiguous().view", "torch.sum.contiguous().view", "int", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "m.view.view.repeat", "m.view.view.view", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.sum.size", "torch.sum.size", "torch.sum.size", "torch.sum.size", "conv_type.StructureConv.weight.detach", "torch.sum.contiguous", "torch.sum.contiguous", "torch.sum.contiguous", "torch.sum.contiguous", "torch.sum.size", "torch.sum.size", "torch.sum.size", "torch.sum.size"], "methods", ["None"], ["", "def", "get_mask", "(", "self", ",", "pr_rate", ")", ":", "\n", "        ", "w", "=", "self", ".", "weight", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "c_out", ",", "c_in", ",", "k_1", ",", "k_2", "=", "w", ".", "shape", "\n", "w", "=", "w", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "c_in", "*", "k_1", "*", "k_2", ")", "\n", "prune", "=", "int", "(", "w", ".", "size", "(", "0", ")", "*", "pr_rate", ")", "\n", "w", "=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "w", ")", ",", "1", ")", "\n", "_", ",", "indice", "=", "torch", ".", "topk", "(", "w", ",", "prune", ",", "largest", "=", "False", ")", "\n", "m", "=", "torch", ".", "ones", "(", "w", ".", "size", "(", "0", ")", ")", "\n", "m", "[", "indice", "]", "=", "0", "\n", "m", "=", "torch", ".", "unsqueeze", "(", "m", ",", "1", ")", "\n", "m", "=", "m", ".", "repeat", "(", "1", ",", "c_in", "*", "k_1", "*", "k_2", ")", "\n", "m", "=", "m", ".", "view", "(", "c_out", ",", "c_in", ",", "k_1", ",", "k_2", ")", "\n", "self", ".", "bias", ".", "requires_grad", "=", "False", "\n", "self", ".", "mask", "=", "nn", ".", "Parameter", "(", "m", ",", "requires_grad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.conv_type.rearrange_w": [[24, 31], ["w.view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "function", ["None"], ["def", "rearrange_w", "(", "w", ",", "N", ",", "pr_rate", ")", ":", "\n", "    ", "c_out", ",", "c_in", ",", "k_1", ",", "k_2", "=", "w", ".", "shape", "\n", "rearrange_w", "=", "w", ".", "view", "(", "c_out", ",", "-", "1", ")", "\n", "w_score", "=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "rearrange_w", ")", ",", "1", ")", "\n", "_", ",", "index", "=", "torch", ".", "sort", "(", "w_score", ")", "\n", "w", "=", "w", "[", "index", "]", "\n", "return", "w", ",", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.models.mobilenet_v3.h_sigmoid.__init__": [[32, 35], ["torch.Module.__init__", "torch.ReLU6", "torch.ReLU6", "torch.ReLU6"], "methods", ["home.repos.pwc.inspect_result.lmbxmu_1xN.data.imagenet.Data.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplace", "=", "True", ")", ":", "\n", "        ", "super", "(", "h_sigmoid", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU6", "(", "inplace", "=", "inplace", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.models.mobilenet_v3.h_sigmoid.forward": [[36, 38], ["mobilenet_v3.h_sigmoid.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "relu", "(", "x", "+", "3", ")", "/", "6", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.models.mobilenet_v3.h_swish.__init__": [[41, 44], ["torch.Module.__init__", "mobilenet_v3.h_sigmoid"], "methods", ["home.repos.pwc.inspect_result.lmbxmu_1xN.data.imagenet.Data.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplace", "=", "True", ")", ":", "\n", "        ", "super", "(", "h_swish", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sigmoid", "=", "h_sigmoid", "(", "inplace", "=", "inplace", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.models.mobilenet_v3.h_swish.forward": [[45, 47], ["mobilenet_v3.h_swish.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "*", "self", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.models.mobilenet_v3.SELayer.__init__": [[58, 66], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "builder.conv1x1_fc", "torch.ReLU", "torch.ReLU", "torch.ReLU", "builder.conv1x1_fc", "mobilenet_v3.h_sigmoid", "mobilenet_v3._make_divisible", "mobilenet_v3._make_divisible"], "methods", ["home.repos.pwc.inspect_result.lmbxmu_1xN.data.imagenet.Data.__init__", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.Builder.conv1x1_fc", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.Builder.conv1x1_fc", "home.repos.pwc.inspect_result.lmbxmu_1xN.models.mobilenet_v3._make_divisible", "home.repos.pwc.inspect_result.lmbxmu_1xN.models.mobilenet_v3._make_divisible"], ["    ", "def", "__init__", "(", "self", ",", "builder", ",", "channel", ",", "reduction", "=", "4", ")", ":", "\n", "        ", "super", "(", "SELayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv1x1_fc", "(", "channel", ",", "_make_divisible", "(", "channel", "//", "reduction", ",", "8", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "builder", ".", "conv1x1_fc", "(", "_make_divisible", "(", "channel", "//", "reduction", ",", "8", ")", ",", "channel", ")", ",", "\n", "h_sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.models.mobilenet_v3.SELayer.forward": [[68, 73], ["x.size", "mobilenet_v3.SELayer.avg_pool", "mobilenet_v3.SELayer.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "b", ",", "c", ",", "_", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "y", "=", "self", ".", "avg_pool", "(", "x", ")", "\n", "y", "=", "self", ".", "fc", "(", "y", ")", "\n", "return", "x", "*", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.models.mobilenet_v3.InvertedResidual.__init__": [[85, 118], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "builder.conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "builder.conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "builder.conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "mobilenet_v3.h_swish", "torch.ReLU", "torch.ReLU", "torch.ReLU", "mobilenet_v3.SELayer", "torch.Identity", "torch.Identity", "torch.Identity", "mobilenet_v3.h_swish", "torch.ReLU", "torch.ReLU", "torch.ReLU", "mobilenet_v3.SELayer", "torch.Identity", "torch.Identity", "torch.Identity", "mobilenet_v3.h_swish", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.lmbxmu_1xN.data.imagenet.Data.__init__", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.Builder.conv2d", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.Builder.conv2d", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.Builder.conv2d"], ["    ", "def", "__init__", "(", "self", ",", "builder", ",", "inp", ",", "hidden_dim", ",", "oup", ",", "kernel_size", ",", "stride", ",", "use_se", ",", "use_hs", ")", ":", "\n", "        ", "super", "(", "InvertedResidual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "\n", "self", ".", "identity", "=", "stride", "==", "1", "and", "inp", "==", "oup", "\n", "\n", "if", "inp", "==", "hidden_dim", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "# dw", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "hidden_dim", ",", "kernel_size", ",", "stride", ",", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "groups", "=", "hidden_dim", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "hidden_dim", ")", ",", "\n", "h_swish", "(", ")", "if", "use_hs", "else", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "# Squeeze-and-Excite", "\n", "SELayer", "(", "builder", ",", "hidden_dim", ")", "if", "use_se", "else", "nn", ".", "Identity", "(", ")", ",", "\n", "# pw-linear", "\n", "builder", ".", "conv2d", "(", "hidden_dim", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "# pw", "\n", "builder", ".", "conv2d", "(", "inp", ",", "hidden_dim", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "hidden_dim", ")", ",", "\n", "h_swish", "(", ")", "if", "use_hs", "else", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "# dw", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "hidden_dim", ",", "kernel_size", ",", "stride", ",", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "groups", "=", "hidden_dim", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "hidden_dim", ")", ",", "\n", "# Squeeze-and-Excite", "\n", "SELayer", "(", "builder", ",", "hidden_dim", ")", "if", "use_se", "else", "nn", ".", "Identity", "(", ")", ",", "\n", "h_swish", "(", ")", "if", "use_hs", "else", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "# pw-linear", "\n", "builder", ".", "conv2d", "(", "hidden_dim", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.models.mobilenet_v3.InvertedResidual.forward": [[120, 125], ["mobilenet_v3.InvertedResidual.conv", "mobilenet_v3.InvertedResidual.conv"], "methods", ["home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.Builder.conv", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.Builder.conv"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "identity", ":", "\n", "            ", "return", "x", "+", "self", ".", "conv", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.models.mobilenet_v3.MobileNetV3.__init__": [[128, 159], ["torch.Module.__init__", "mobilenet_v3._make_divisible", "torch.Sequential", "torch.Sequential", "torch.Sequential", "mobilenet_v3.conv_1x1_bn", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "mobilenet_v3.MobileNetV3._initialize_weights", "mobilenet_v3.conv_3x3_bn", "mobilenet_v3._make_divisible", "mobilenet_v3._make_divisible", "layers.append", "mobilenet_v3._make_divisible", "builder.conv1x1_fc", "mobilenet_v3.h_swish", "torch.Dropout", "torch.Dropout", "torch.Dropout", "builder.conv1x1_fc", "block"], "methods", ["home.repos.pwc.inspect_result.lmbxmu_1xN.data.imagenet.Data.__init__", "home.repos.pwc.inspect_result.lmbxmu_1xN.models.mobilenet_v3._make_divisible", "home.repos.pwc.inspect_result.lmbxmu_1xN.models.mobilenet_v2.conv_1x1_bn", "home.repos.pwc.inspect_result.lmbxmu_1xN.models.mobilenet_v1.MobileNet._initialize_weights", "home.repos.pwc.inspect_result.lmbxmu_1xN.models.mobilenet_v3.conv_3x3_bn", "home.repos.pwc.inspect_result.lmbxmu_1xN.models.mobilenet_v3._make_divisible", "home.repos.pwc.inspect_result.lmbxmu_1xN.models.mobilenet_v3._make_divisible", "home.repos.pwc.inspect_result.lmbxmu_1xN.models.mobilenet_v3._make_divisible", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.Builder.conv1x1_fc", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.Builder.conv1x1_fc"], ["    ", "def", "__init__", "(", "self", ",", "builder", ",", "cfgs", ",", "mode", ",", "num_classes", "=", "1000", ",", "width_mult", "=", "1.", ")", ":", "\n", "        ", "super", "(", "MobileNetV3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# setting of inverted residual blocks", "\n", "self", ".", "cfgs", "=", "cfgs", "\n", "assert", "mode", "in", "[", "'large'", ",", "'small'", "]", "\n", "\n", "# building first layer", "\n", "input_channel", "=", "_make_divisible", "(", "16", "*", "width_mult", ",", "8", ")", "\n", "layers", "=", "[", "conv_3x3_bn", "(", "3", ",", "input_channel", ",", "2", ")", "]", "\n", "# building inverted residual blocks", "\n", "block", "=", "InvertedResidual", "\n", "for", "k", ",", "t", ",", "c", ",", "use_se", ",", "use_hs", ",", "s", "in", "self", ".", "cfgs", ":", "\n", "            ", "output_channel", "=", "_make_divisible", "(", "c", "*", "width_mult", ",", "8", ")", "\n", "exp_size", "=", "_make_divisible", "(", "input_channel", "*", "t", ",", "8", ")", "\n", "layers", ".", "append", "(", "block", "(", "builder", ",", "input_channel", ",", "exp_size", ",", "output_channel", ",", "k", ",", "s", ",", "use_se", ",", "use_hs", ")", ")", "\n", "input_channel", "=", "output_channel", "\n", "", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "# building last several layers", "\n", "self", ".", "conv", "=", "conv_1x1_bn", "(", "builder", ",", "input_channel", ",", "exp_size", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "output_channel", "=", "{", "'large'", ":", "1280", ",", "'small'", ":", "1024", "}", "\n", "output_channel", "=", "_make_divisible", "(", "output_channel", "[", "mode", "]", "*", "width_mult", ",", "8", ")", "if", "width_mult", ">", "1.0", "else", "output_channel", "[", "mode", "]", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv1x1_fc", "(", "exp_size", ",", "output_channel", ")", ",", "\n", "#nn.Linear(exp_size, output_channel),", "\n", "h_swish", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.2", ")", ",", "\n", "builder", ".", "conv1x1_fc", "(", "output_channel", ",", "num_classes", ")", ",", "\n", "#nn.Linear(output_channel, num_classes),", "\n", ")", "\n", "self", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.models.mobilenet_v3.MobileNetV3.forward": [[160, 168], ["mobilenet_v3.MobileNetV3.features", "mobilenet_v3.MobileNetV3.conv", "mobilenet_v3.MobileNetV3.avgpool", "mobilenet_v3.MobileNetV3.flatten", "mobilenet_v3.MobileNetV3.unsqueeze().unsqueeze", "mobilenet_v3.MobileNetV3.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.Builder.conv"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "[", "0", "]", "(", "x", ")", ".", "flatten", "(", "1", ")", "\n", "x", "=", "self", ".", "classifier", "[", "2", "]", "(", "self", ".", "classifier", "[", "1", "]", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "classifier", "[", "3", "]", "(", "x", ".", "unsqueeze", "(", "dim", "=", "2", ")", ".", "unsqueeze", "(", "dim", "=", "2", ")", ")", "\n", "return", "x", ".", "flatten", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.models.mobilenet_v3.MobileNetV3._initialize_weights": [[169, 186], ["mobilenet_v3.MobileNetV3.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.normal_", "m.bias.data.zero_", "isinstance", "m.bias.data.zero_", "isinstance", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BlockL1Conv", ")", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BlockRandomConv", ")", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.models.mobilenet_v3._make_divisible": [[11, 29], ["max", "int"], "function", ["None"], ["def", "_make_divisible", "(", "v", ",", "divisor", ",", "min_value", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    This function is taken from the original tf repo.\n    It ensures that all layers have a channel number that is divisible by 8\n    It can be seen here:\n    https://github.com/tensorflow/models/blob/master/research/slim/nets/mobilenet/mobilenet.py\n    :param v:\n    :param divisor:\n    :param min_value:\n    :return:\n    \"\"\"", "\n", "if", "min_value", "is", "None", ":", "\n", "        ", "min_value", "=", "divisor", "\n", "", "new_v", "=", "max", "(", "min_value", ",", "int", "(", "v", "+", "divisor", "/", "2", ")", "//", "divisor", "*", "divisor", ")", "\n", "# Make sure that round down does not go down by more than 10%.", "\n", "if", "new_v", "<", "0.9", "*", "v", ":", "\n", "        ", "new_v", "+=", "divisor", "\n", "", "return", "new_v", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.models.mobilenet_v3.conv_3x3_bn": [[49, 54], ["torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "mobilenet_v3.h_swish"], "function", ["None"], ["", "", "def", "conv_3x3_bn", "(", "inp", ",", "oup", ",", "stride", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "oup", ",", "3", ",", "stride", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "\n", "h_swish", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.models.mobilenet_v3.conv_1x1_bn": [[76, 81], ["torch.Sequential", "builder.conv2d", "torch.BatchNorm2d", "mobilenet_v3.h_swish"], "function", ["home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.Builder.conv2d"], ["", "", "def", "conv_1x1_bn", "(", "builder", ",", "inp", ",", "oup", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv2d", "(", "inp", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "\n", "h_swish", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.models.mobilenet_v3.mobilenet_v3_large": [[188, 211], ["mobilenet_v3.MobileNetV3", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.get_builder"], ["", "", "", "", "def", "mobilenet_v3_large", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Constructs a MobileNetV3-Large model\n    \"\"\"", "\n", "cfgs", "=", "[", "\n", "# k, t, c, SE, HS, s ", "\n", "[", "3", ",", "1", ",", "16", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "3", ",", "4", ",", "24", ",", "0", ",", "0", ",", "2", "]", ",", "\n", "[", "3", ",", "3", ",", "24", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "5", ",", "3", ",", "40", ",", "1", ",", "0", ",", "2", "]", ",", "\n", "[", "5", ",", "3", ",", "40", ",", "1", ",", "0", ",", "1", "]", ",", "\n", "[", "5", ",", "3", ",", "40", ",", "1", ",", "0", ",", "1", "]", ",", "\n", "[", "3", ",", "6", ",", "80", ",", "0", ",", "1", ",", "2", "]", ",", "\n", "[", "3", ",", "2.5", ",", "80", ",", "0", ",", "1", ",", "1", "]", ",", "\n", "[", "3", ",", "2.3", ",", "80", ",", "0", ",", "1", ",", "1", "]", ",", "\n", "[", "3", ",", "2.3", ",", "80", ",", "0", ",", "1", ",", "1", "]", ",", "\n", "[", "3", ",", "6", ",", "112", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "3", ",", "6", ",", "112", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "5", ",", "6", ",", "160", ",", "1", ",", "1", ",", "2", "]", ",", "\n", "[", "5", ",", "6", ",", "160", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "5", ",", "6", ",", "160", ",", "1", ",", "1", ",", "1", "]", "\n", "]", "\n", "return", "MobileNetV3", "(", "get_builder", "(", ")", ",", "cfgs", ",", "mode", "=", "'large'", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.models.mobilenet_v3.mobilenet_v3_small": [[213, 233], ["mobilenet_v3.MobileNetV3", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.get_builder"], ["", "def", "mobilenet_v3_small", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Constructs a MobileNetV3-Small model\n    \"\"\"", "\n", "cfgs", "=", "[", "\n", "# k, t, c, SE, HS, s ", "\n", "[", "3", ",", "1", ",", "16", ",", "1", ",", "0", ",", "2", "]", ",", "\n", "[", "3", ",", "4.5", ",", "24", ",", "0", ",", "0", ",", "2", "]", ",", "\n", "[", "3", ",", "3.67", ",", "24", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "5", ",", "4", ",", "40", ",", "1", ",", "1", ",", "2", "]", ",", "\n", "[", "5", ",", "6", ",", "40", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "5", ",", "6", ",", "40", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "5", ",", "3", ",", "48", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "5", ",", "3", ",", "48", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "5", ",", "6", ",", "96", ",", "1", ",", "1", ",", "2", "]", ",", "\n", "[", "5", ",", "6", ",", "96", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "5", ",", "6", ",", "96", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "]", "\n", "\n", "return", "MobileNetV3", "(", "get_builder", "(", ")", ",", "cfgs", ",", "mode", "=", "'small'", ",", "**", "kwargs", ")", "", "", ""]], "home.repos.pwc.inspect_result.lmbxmu_1xN.models.mobilenet_v2.InvertedResidual.__init__": [[25, 56], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU6", "torch.ReLU6", "builder.conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "builder.conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU6", "torch.ReLU6", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU6", "torch.ReLU6", "builder.conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.lmbxmu_1xN.data.imagenet.Data.__init__", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.Builder.conv2d", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.Builder.conv2d", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.Builder.conv2d"], ["    ", "def", "__init__", "(", "self", ",", "builder", ",", "inp", ",", "hidden_dim", ",", "oup", ",", "stride", ",", "expand_ratio", ")", ":", "\n", "        ", "super", "(", "InvertedResidual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "\n", "self", ".", "use_res_connect", "=", "self", ".", "stride", "==", "1", "and", "inp", "==", "oup", "\n", "#print(self.use_res_connect)", "\n", "\n", "if", "expand_ratio", "==", "1", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "# dw", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "hidden_dim", ",", "3", ",", "stride", ",", "1", ",", "groups", "=", "hidden_dim", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", ",", "\n", "# pw-linear", "\n", "builder", ".", "conv2d", "(", "hidden_dim", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "# pw", "\n", "builder", ".", "conv2d", "(", "inp", ",", "hidden_dim", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", ",", "\n", "# dw", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "hidden_dim", ",", "3", ",", "stride", ",", "1", ",", "groups", "=", "hidden_dim", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", ",", "\n", "# pw-linear", "\n", "builder", ".", "conv2d", "(", "hidden_dim", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.models.mobilenet_v2.InvertedResidual.forward": [[58, 63], ["mobilenet_v2.InvertedResidual.conv", "mobilenet_v2.InvertedResidual.conv"], "methods", ["home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.Builder.conv", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.Builder.conv"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "use_res_connect", ":", "\n", "            ", "return", "x", "+", "self", ".", "conv", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.models.mobilenet_v2.MobileNetV2.__init__": [[66, 121], ["torch.Module.__init__", "int", "mobilenet_v2.MobileNetV2.features.append", "torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Sequential", "torch.Sequential", "mobilenet_v2.MobileNetV2._initialize_weights", "int", "mobilenet_v2.conv_bn", "int", "mobilenet_v2.MobileNetV2.features.append", "mobilenet_v2.conv_1x1_bn", "torch.Dropout", "torch.Dropout", "builder.conv1x1_fc", "block"], "methods", ["home.repos.pwc.inspect_result.lmbxmu_1xN.data.imagenet.Data.__init__", "home.repos.pwc.inspect_result.lmbxmu_1xN.models.mobilenet_v1.MobileNet._initialize_weights", "home.repos.pwc.inspect_result.lmbxmu_1xN.models.mobilenet_v1.conv_bn", "home.repos.pwc.inspect_result.lmbxmu_1xN.models.mobilenet_v2.conv_1x1_bn", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.Builder.conv1x1_fc"], ["    ", "def", "__init__", "(", "self", ",", "builder", ",", "n_class", "=", "1000", ",", "input_size", "=", "224", ",", "width_mult", "=", "1.", ")", ":", "\n", "        ", "super", "(", "MobileNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "block", "=", "InvertedResidual", "\n", "layer_index", "=", "0", "\n", "input_channel", "=", "32", "\n", "last_channel", "=", "1280", "\n", "interverted_residual_setting", "=", "[", "\n", "# t, c, n, s", "\n", "[", "1", ",", "16", ",", "1", ",", "1", "]", ",", "\n", "[", "6", ",", "24", ",", "1", ",", "2", "]", ",", "\n", "[", "6", ",", "24", ",", "1", ",", "1", "]", ",", "\n", "[", "6", ",", "32", ",", "1", ",", "2", "]", ",", "\n", "[", "6", ",", "32", ",", "1", ",", "1", "]", ",", "\n", "[", "6", ",", "32", ",", "1", ",", "1", "]", ",", "\n", "[", "6", ",", "64", ",", "1", ",", "2", "]", ",", "\n", "[", "6", ",", "64", ",", "1", ",", "1", "]", ",", "\n", "[", "6", ",", "64", ",", "1", ",", "1", "]", ",", "\n", "[", "6", ",", "64", ",", "1", ",", "1", "]", ",", "\n", "[", "6", ",", "96", ",", "1", ",", "1", "]", ",", "\n", "[", "6", ",", "96", ",", "1", ",", "1", "]", ",", "\n", "[", "6", ",", "96", ",", "1", ",", "1", "]", ",", "\n", "[", "6", ",", "160", ",", "1", ",", "2", "]", ",", "\n", "[", "6", ",", "160", ",", "1", ",", "1", "]", ",", "\n", "[", "6", ",", "160", ",", "1", ",", "1", "]", ",", "\n", "[", "6", ",", "320", ",", "1", ",", "1", "]", ",", "\n", "]", "\n", "\n", "# building first layer", "\n", "assert", "input_size", "%", "32", "==", "0", "\n", "input_channel", "=", "int", "(", "input_channel", "*", "width_mult", ")", "\n", "self", ".", "last_channel", "=", "int", "(", "last_channel", "*", "width_mult", ")", "if", "width_mult", ">", "1.0", "else", "last_channel", "\n", "self", ".", "features", "=", "[", "conv_bn", "(", "builder", ",", "3", ",", "input_channel", ",", "2", ")", "]", "\n", "# building inverted residual blocks", "\n", "lastc", "=", "32", "\n", "for", "t", ",", "c", ",", "n", ",", "s", "in", "interverted_residual_setting", ":", "\n", "            ", "output_channel", "=", "int", "(", "c", "*", "width_mult", ")", "\n", "hidden_dim", "=", "input_channel", "*", "t", "\n", "self", ".", "features", ".", "append", "(", "block", "(", "builder", ",", "input_channel", ",", "hidden_dim", ",", "output_channel", ",", "s", ",", "expand_ratio", "=", "t", ")", ")", "\n", "input_channel", "=", "output_channel", "\n", "layer_index", "+=", "1", "\n", "lastc", "=", "c", "\n", "\n", "# building last several layers", "\n", "", "self", ".", "features", ".", "append", "(", "conv_1x1_bn", "(", "builder", ",", "input_channel", ",", "self", ".", "last_channel", ")", ")", "\n", "\n", "# make it nn.Sequential", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "features", ")", "\n", "self", ".", "pool", "=", "nn", ".", "AvgPool2d", "(", "7", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", "0", ")", ",", "\n", "builder", ".", "conv1x1_fc", "(", "self", ".", "last_channel", ",", "n_class", ")", "\n", "#nn.Linear(self.last_channel, n_class),", "\n", ")", "\n", "\n", "self", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.models.mobilenet_v2.MobileNetV2.forward": [[122, 127], ["mobilenet_v2.MobileNetV2.features", "mobilenet_v2.MobileNetV2.pool", "mobilenet_v2.MobileNetV2.classifier", "mobilenet_v2.MobileNetV2.flatten"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "pool", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", ".", "flatten", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.models.mobilenet_v2.MobileNetV2._initialize_weights": [[128, 139], ["mobilenet_v2.MobileNetV2.modules", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.size", "m.weight.data.normal_", "m.bias.data.zero_", "isinstance", "isinstance", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "n", "=", "m", ".", "weight", ".", "size", "(", "1", ")", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BlockL1Conv", ")", "or", "isinstance", "(", "m", ",", "BlockRandomConv", ")", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.models.mobilenet_v2.conv_bn": [[8, 13], ["torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU6"], "function", ["None"], ["def", "conv_bn", "(", "builder", ",", "inp", ",", "oup", ",", "stride", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "oup", ",", "3", ",", "stride", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.models.mobilenet_v2.conv_1x1_bn": [[16, 21], ["torch.Sequential", "builder.conv2d", "torch.BatchNorm2d", "torch.ReLU6"], "function", ["home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.Builder.conv2d"], ["", "def", "conv_1x1_bn", "(", "builder", ",", "inp", ",", "oup", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv2d", "(", "inp", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.models.mobilenet_v2.mobilenet_v2": [[140, 142], ["mobilenet_v2.MobileNetV2", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.get_builder"], ["", "", "", "", "def", "mobilenet_v2", "(", ")", ":", "\n", "    ", "return", "MobileNetV2", "(", "get_builder", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.models.mobilenet_v1.MobileNet.__init__": [[29, 42], ["torch.Module.__init__", "mobilenet_v1.conv_bn", "mobilenet_v1.MobileNet._make_layers", "torch.Sequential", "torch.Sequential", "torch.Sequential", "mobilenet_v1.MobileNet._initialize_weights", "builder.conv1x1_fc"], "methods", ["home.repos.pwc.inspect_result.lmbxmu_1xN.data.imagenet.Data.__init__", "home.repos.pwc.inspect_result.lmbxmu_1xN.models.mobilenet_v1.conv_bn", "home.repos.pwc.inspect_result.lmbxmu_1xN.models.mobilenet_v1.MobileNet._make_layers", "home.repos.pwc.inspect_result.lmbxmu_1xN.models.mobilenet_v1.MobileNet._initialize_weights", "home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.Builder.conv1x1_fc"], ["    ", "def", "__init__", "(", "self", ",", "builder", ",", "n_class", ")", ":", "\n", "        ", "super", "(", "MobileNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "in_planes", "=", "32", "\n", "cfg", "=", "[", "64", ",", "(", "128", ",", "2", ")", ",", "128", ",", "(", "256", ",", "2", ")", ",", "256", ",", "(", "512", ",", "2", ")", ",", "512", ",", "512", ",", "512", ",", "512", ",", "512", ",", "(", "1024", ",", "2", ")", ",", "1024", "]", "\n", "\n", "self", ".", "conv1", "=", "conv_bn", "(", "builder", ",", "3", ",", "in_planes", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "features", "=", "self", ".", "_make_layers", "(", "builder", ",", "in_planes", ",", "cfg", ",", "conv_dw", ")", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "builder", ".", "conv1x1_fc", "(", "cfg", "[", "-", "1", "]", ",", "n_class", ")", ")", "\n", "\n", "self", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.models.mobilenet_v1.MobileNet.forward": [[43, 52], ["mobilenet_v1.MobileNet.conv1", "mobilenet_v1.MobileNet.features", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "mobilenet_v1.MobileNet.classifier", "mobilenet_v1.MobileNet.flatten"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "F", ".", "avg_pool2d", "(", "x", ",", "7", ")", "\n", "#x = x.view(-1, 1024)", "\n", "#x = x.mean(3).mean(2)  # global average pooling", "\n", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", ".", "flatten", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.models.mobilenet_v1.MobileNet._make_layers": [[53, 61], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "isinstance", "isinstance", "layer"], "methods", ["None"], ["", "def", "_make_layers", "(", "self", ",", "builder", ",", "in_planes", ",", "cfg", ",", "layer", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "x", "in", "cfg", ":", "\n", "            ", "out_planes", "=", "x", "if", "isinstance", "(", "x", ",", "int", ")", "else", "x", "[", "0", "]", "\n", "stride", "=", "1", "if", "isinstance", "(", "x", ",", "int", ")", "else", "x", "[", "1", "]", "\n", "layers", ".", "append", "(", "layer", "(", "builder", ",", "in_planes", ",", "out_planes", ",", "stride", ")", ")", "\n", "in_planes", "=", "out_planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.models.mobilenet_v1.MobileNet._initialize_weights": [[62, 73], ["mobilenet_v1.MobileNet.modules", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.size", "m.weight.data.normal_", "m.bias.data.zero_", "isinstance", "isinstance", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "n", "=", "m", ".", "weight", ".", "size", "(", "1", ")", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BlockL1Conv", ")", "or", "isinstance", "(", "m", ",", "BlockRandomConv", ")", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.models.mobilenet_v1.conv_bn": [[10, 15], ["torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU"], "function", ["None"], ["def", "conv_bn", "(", "builder", ",", "inp", ",", "oup", ",", "stride", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "oup", ",", "3", ",", "stride", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.models.mobilenet_v1.conv_dw": [[17, 26], ["torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "builder.conv2d", "torch.BatchNorm2d", "torch.ReLU"], "function", ["home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.Builder.conv2d"], ["", "def", "conv_dw", "(", "builder", ",", "inp", ",", "oup", ",", "stride", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "inp", ",", "3", ",", "stride", ",", "1", ",", "groups", "=", "inp", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "inp", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "builder", ".", "conv2d", "(", "inp", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.models.mobilenet_v1.mobilenet_v1": [[74, 76], ["mobilenet_v1.MobileNet", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.lmbxmu_1xN.utils.builder.get_builder"], ["", "", "", "", "def", "mobilenet_v1", "(", ")", ":", "\n", "    ", "return", "MobileNet", "(", "get_builder", "(", ")", ",", "n_class", "=", "1000", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lmbxmu_1xN.data.imagenet_dali.HybridTrainPipe.__init__": [[12, 26], ["nvidia.dali.pipeline.Pipeline.__init__", "nvidia.FileReader", "nvidia.FileReader", "nvidia.ImageDecoder", "nvidia.ImageDecoder", "nvidia.RandomResizedCrop", "nvidia.RandomResizedCrop", "nvidia.CropMirrorNormalize", "nvidia.CropMirrorNormalize", "nvidia.CoinFlip", "nvidia.CoinFlip", "print"], "methods", ["home.repos.pwc.inspect_result.lmbxmu_1xN.data.imagenet.Data.__init__"], ["    ", "def", "__init__", "(", "self", ",", "batch_size", ",", "num_threads", ",", "device_id", ",", "data_dir", ",", "crop", ",", "dali_cpu", "=", "False", ",", "local_rank", "=", "0", ",", "world_size", "=", "1", ")", ":", "\n", "        ", "super", "(", "HybridTrainPipe", ",", "self", ")", ".", "__init__", "(", "batch_size", ",", "num_threads", ",", "device_id", ",", "seed", "=", "12", "+", "device_id", ")", "\n", "dali_device", "=", "\"gpu\"", "\n", "self", ".", "input", "=", "ops", ".", "FileReader", "(", "file_root", "=", "data_dir", ",", "shard_id", "=", "local_rank", ",", "num_shards", "=", "world_size", ",", "random_shuffle", "=", "True", ")", "\n", "self", ".", "decode", "=", "ops", ".", "ImageDecoder", "(", "device", "=", "\"mixed\"", ",", "output_type", "=", "types", ".", "RGB", ")", "\n", "self", ".", "res", "=", "ops", ".", "RandomResizedCrop", "(", "device", "=", "\"gpu\"", ",", "size", "=", "crop", ",", "random_area", "=", "[", "0.08", ",", "1.25", "]", ")", "\n", "self", ".", "cmnp", "=", "ops", ".", "CropMirrorNormalize", "(", "device", "=", "\"gpu\"", ",", "\n", "output_dtype", "=", "types", ".", "FLOAT", ",", "\n", "output_layout", "=", "types", ".", "NCHW", ",", "\n", "image_type", "=", "types", ".", "RGB", ",", "\n", "mean", "=", "[", "0.485", "*", "255", ",", "0.456", "*", "255", ",", "0.406", "*", "255", "]", ",", "\n", "std", "=", "[", "0.229", "*", "255", ",", "0.224", "*", "255", ",", "0.225", "*", "255", "]", ")", "\n", "self", ".", "coin", "=", "ops", ".", "CoinFlip", "(", "probability", "=", "0.5", ")", "\n", "print", "(", "'DALI \"{0}\" variant'", ".", "format", "(", "dali_device", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.data.imagenet_dali.HybridTrainPipe.define_graph": [[27, 34], ["imagenet_dali.HybridTrainPipe.coin", "imagenet_dali.HybridTrainPipe.input", "imagenet_dali.HybridTrainPipe.decode", "imagenet_dali.HybridTrainPipe.res", "imagenet_dali.HybridTrainPipe.cmnp"], "methods", ["None"], ["", "def", "define_graph", "(", "self", ")", ":", "\n", "        ", "rng", "=", "self", ".", "coin", "(", ")", "\n", "self", ".", "jpegs", ",", "self", ".", "labels", "=", "self", ".", "input", "(", "name", "=", "\"Reader\"", ")", "\n", "images", "=", "self", ".", "decode", "(", "self", ".", "jpegs", ")", "\n", "images", "=", "self", ".", "res", "(", "images", ")", "\n", "output", "=", "self", ".", "cmnp", "(", "images", ",", "mirror", "=", "rng", ")", "\n", "return", "[", "output", ",", "self", ".", "labels", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.data.imagenet_dali.HybridValPipe.__init__": [[37, 50], ["nvidia.dali.pipeline.Pipeline.__init__", "nvidia.FileReader", "nvidia.FileReader", "nvidia.ImageDecoder", "nvidia.ImageDecoder", "nvidia.Resize", "nvidia.Resize", "nvidia.CropMirrorNormalize", "nvidia.CropMirrorNormalize"], "methods", ["home.repos.pwc.inspect_result.lmbxmu_1xN.data.imagenet.Data.__init__"], ["    ", "def", "__init__", "(", "self", ",", "batch_size", ",", "num_threads", ",", "device_id", ",", "data_dir", ",", "crop", ",", "size", ",", "local_rank", "=", "0", ",", "world_size", "=", "1", ")", ":", "\n", "        ", "super", "(", "HybridValPipe", ",", "self", ")", ".", "__init__", "(", "batch_size", ",", "num_threads", ",", "device_id", ",", "seed", "=", "12", "+", "device_id", ")", "\n", "self", ".", "input", "=", "ops", ".", "FileReader", "(", "file_root", "=", "data_dir", ",", "shard_id", "=", "local_rank", ",", "num_shards", "=", "world_size", ",", "\n", "random_shuffle", "=", "False", ")", "\n", "self", ".", "decode", "=", "ops", ".", "ImageDecoder", "(", "device", "=", "\"mixed\"", ",", "output_type", "=", "types", ".", "RGB", ")", "\n", "self", ".", "res", "=", "ops", ".", "Resize", "(", "device", "=", "\"gpu\"", ",", "resize_shorter", "=", "size", ",", "interp_type", "=", "types", ".", "INTERP_TRIANGULAR", ")", "\n", "self", ".", "cmnp", "=", "ops", ".", "CropMirrorNormalize", "(", "device", "=", "\"gpu\"", ",", "\n", "output_dtype", "=", "types", ".", "FLOAT", ",", "\n", "output_layout", "=", "types", ".", "NCHW", ",", "\n", "crop", "=", "(", "crop", ",", "crop", ")", ",", "\n", "image_type", "=", "types", ".", "RGB", ",", "\n", "mean", "=", "[", "0.485", "*", "255", ",", "0.456", "*", "255", ",", "0.406", "*", "255", "]", ",", "\n", "std", "=", "[", "0.229", "*", "255", ",", "0.224", "*", "255", ",", "0.225", "*", "255", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.data.imagenet_dali.HybridValPipe.define_graph": [[51, 57], ["imagenet_dali.HybridValPipe.input", "imagenet_dali.HybridValPipe.decode", "imagenet_dali.HybridValPipe.res", "imagenet_dali.HybridValPipe.cmnp"], "methods", ["None"], ["", "def", "define_graph", "(", "self", ")", ":", "\n", "        ", "self", ".", "jpegs", ",", "self", ".", "labels", "=", "self", ".", "input", "(", "name", "=", "\"Reader\"", ")", "\n", "images", "=", "self", ".", "decode", "(", "self", ".", "jpegs", ")", "\n", "images", "=", "self", ".", "res", "(", "images", ")", "\n", "output", "=", "self", ".", "cmnp", "(", "images", ")", "\n", "return", "[", "output", ",", "self", ".", "labels", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.data.imagenet_dali.get_imagenet_iter_dali": [[60, 77], ["imagenet_dali.HybridTrainPipe", "HybridTrainPipe.build", "nvidia.dali.plugin.pytorch.DALIClassificationIterator", "imagenet_dali.HybridValPipe", "HybridValPipe.build", "nvidia.dali.plugin.pytorch.DALIClassificationIterator", "HybridTrainPipe.epoch_size", "HybridValPipe.epoch_size"], "function", ["None"], ["", "", "def", "get_imagenet_iter_dali", "(", "type", ",", "image_dir", ",", "batch_size", ",", "num_threads", ",", "device_id", ",", "num_gpus", ",", "crop", ",", "val_size", "=", "256", ",", "\n", "world_size", "=", "1", ",", "\n", "local_rank", "=", "0", ")", ":", "\n", "    ", "if", "type", "==", "'train'", ":", "\n", "        ", "pip_train", "=", "HybridTrainPipe", "(", "batch_size", "=", "batch_size", ",", "num_threads", "=", "num_threads", ",", "device_id", "=", "local_rank", ",", "\n", "data_dir", "=", "image_dir", "+", "'/ILSVRC2012_img_train'", ",", "\n", "crop", "=", "crop", ",", "world_size", "=", "world_size", ",", "local_rank", "=", "local_rank", ")", "\n", "pip_train", ".", "build", "(", ")", "\n", "dali_iter_train", "=", "DALIClassificationIterator", "(", "pip_train", ",", "size", "=", "pip_train", ".", "epoch_size", "(", "\"Reader\"", ")", "//", "world_size", ")", "\n", "return", "dali_iter_train", "\n", "", "elif", "type", "==", "'val'", ":", "\n", "        ", "pip_val", "=", "HybridValPipe", "(", "batch_size", "=", "batch_size", ",", "num_threads", "=", "num_threads", ",", "device_id", "=", "local_rank", ",", "\n", "data_dir", "=", "image_dir", "+", "'/val'", ",", "\n", "crop", "=", "crop", ",", "size", "=", "val_size", ",", "world_size", "=", "world_size", ",", "local_rank", "=", "local_rank", ")", "\n", "pip_val", ".", "build", "(", ")", "\n", "dali_iter_val", "=", "DALIClassificationIterator", "(", "pip_val", ",", "size", "=", "pip_val", ".", "epoch_size", "(", "\"Reader\"", ")", "//", "world_size", ")", "\n", "return", "dali_iter_val", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.data.imagenet_dali.get_imagenet_iter_torch": [[79, 102], ["torchvision.Compose", "torchvision.ImageFolder", "torch.utils.data.DataLoader", "torchvision.Compose", "torchvision.ImageFolder", "torch.utils.data.DataLoader", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "", "def", "get_imagenet_iter_torch", "(", "type", ",", "image_dir", ",", "batch_size", ",", "num_threads", ",", "device_id", ",", "num_gpus", ",", "crop", ",", "val_size", "=", "256", ",", "\n", "world_size", "=", "1", ",", "local_rank", "=", "0", ")", ":", "\n", "    ", "if", "type", "==", "'train'", ":", "\n", "        ", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "crop", ",", "scale", "=", "(", "0.08", ",", "1.25", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "]", ")", "\n", "dataset", "=", "datasets", ".", "ImageFolder", "(", "image_dir", "+", "'/train'", ",", "transform", ")", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "num_threads", ",", "\n", "pin_memory", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "val_size", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "crop", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "]", ")", "\n", "dataset", "=", "datasets", ".", "ImageFolder", "(", "image_dir", "+", "'/val'", ",", "transform", ")", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "num_threads", ",", "\n", "pin_memory", "=", "True", ")", "\n", "", "return", "dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.lmbxmu_1xN.data.imagenet.Data.__init__": [[9, 55], ["os.path.join", "os.path.join", "torchvision.Normalize", "torchvision.Normalize", "torchvision.ImageFolder", "torchvision.ImageFolder", "torch.utils.data.DataLoader", "torchvision.ImageFolder", "torchvision.ImageFolder", "torch.utils.data.DataLoader", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.RandomResizedCrop", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "torchvision.Resize", "torchvision.Resize", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.Resize", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.CenterCrop", "torchvision.Resize", "torchvision.Resize", "torchvision.ToTensor", "torchvision.ToTensor"], "methods", ["None"], ["import", "os", "\n", "import", "copy", "\n", "import", "time", "\n", "import", "math", "\n", "import", "sys", "\n", "import", "numpy", "as", "np", "\n", "import", "heapq", "\n", "import", "random", "\n", "from", "utils", ".", "scheduler", "import", "get_policy", "\n", "from", "utils", ".", "conv_type", "import", "*", "\n", "\n", "from", "utils", ".", "common", "import", "*", "\n", "from", "models", ".", "mobilenet_v2", "import", "InvertedResidual", "\n", "\n", "if", "args", ".", "use_dali", ":", "\n", "    ", "from", "data", "import", "imagenet_dali", "\n", "", "else", ":", "\n", "    ", "from", "data", "import", "imagenet", "\n", "", "from", "importlib", "import", "import_module", "\n", "\n", "if", "args", ".", "debug", ":", "\n", "    ", "import", "pdb", "\n", "\n", "", "import", "models", "\n", "\n", "visible_gpus_str", "=", "','", ".", "join", "(", "str", "(", "i", ")", "for", "i", "in", "args", ".", "gpus", ")", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "visible_gpus_str", "\n", "args", ".", "gpus", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "args", ".", "gpus", ")", ")", "]", "\n", "checkpoint", "=", "utils", ".", "checkpoint", "(", "args", ")", "\n", "now", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y-%m-%d-%H:%M:%S'", ")", "\n", "logger", "=", "utils", ".", "get_logger", "(", "os", ".", "path", ".", "join", "(", "args", ".", "job_dir", ",", "'logger'", "+", "now", "+", "'.log'", ")", ")", "\n", "device", "=", "torch", ".", "device", "(", "f\"cuda:{args.gpus[0]}\"", ")", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", "\n", "\n", "if", "args", ".", "label_smoothing", "is", "None", ":", "\n", "    ", "loss_func", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "    ", "loss_func", "=", "LabelSmoothing", "(", "smoothing", "=", "args", ".", "label_smoothing", ")", "\n", "\n", "# load training data", "\n", "", "print", "(", "'==> Preparing data..'", ")", "\n", "if", "args", ".", "use_dali", ":", "\n", "    ", "def", "get_data_set", "(", "type", "=", "'train'", ")", ":", "\n", "        ", "if", "type", "==", "'train'", ":", "\n", "            ", "return", "imagenet_dali", ".", "get_imagenet_iter_dali", "(", "'train'", ",", "args", ".", "data_path", ",", "args", ".", "train_batch_size", ",", "\n", "num_threads", "=", "4", ",", "crop", "=", "224", ",", "device_id", "=", "args", ".", "gpus", "[", "0", "]", ",", "num_gpus", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "return", "imagenet_dali", ".", "get_imagenet_iter_dali", "(", "'val'", ",", "args", ".", "data_path", ",", "args", ".", "eval_batch_size", ",", "\n"]]}