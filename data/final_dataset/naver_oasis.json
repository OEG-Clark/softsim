{"home.repos.pwc.inspect_result.naver_oasis.None.deeplab.BasicBlock.__init__": [[29, 38], ["torch.Module.__init__", "deeplab.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "deeplab.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.naver_oasis.dataset.cityscapes_dataset.Cityscapes.__init__", "home.repos.pwc.inspect_result.naver_oasis.None.deeplab.conv3x3", "home.repos.pwc.inspect_result.naver_oasis.None.deeplab.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "\t\t", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.deeplab.BasicBlock.forward": [[39, 56], ["deeplab.BasicBlock.conv1", "deeplab.BasicBlock.bn1", "deeplab.BasicBlock.relu", "deeplab.BasicBlock.conv2", "deeplab.BasicBlock.bn2", "deeplab.BasicBlock.relu", "deeplab.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "\t\t\t", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.deeplab.Bottleneck.__init__": [[61, 81], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "deeplab.Bottleneck.bn1.parameters", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "deeplab.Bottleneck.bn2.parameters", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "deeplab.Bottleneck.bn3.parameters", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.naver_oasis.dataset.cityscapes_dataset.Cityscapes.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "\t\t", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "# change", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn1", ".", "parameters", "(", ")", ":", "\n", "\t\t\t", "i", ".", "requires_grad", "=", "False", "\n", "\n", "", "padding", "=", "dilation", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "# change", "\n", "padding", "=", "padding", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn2", ".", "parameters", "(", ")", ":", "\n", "\t\t\t", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn3", ".", "parameters", "(", ")", ":", "\n", "\t\t\t", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.deeplab.Bottleneck.forward": [[83, 104], ["deeplab.Bottleneck.conv1", "deeplab.Bottleneck.bn1", "deeplab.Bottleneck.relu", "deeplab.Bottleneck.conv2", "deeplab.Bottleneck.bn2", "deeplab.Bottleneck.relu", "deeplab.Bottleneck.conv3", "deeplab.Bottleneck.bn3", "deeplab.Bottleneck.relu", "deeplab.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "\t\t\t", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.deeplab.Classifier_Module.__init__": [[108, 116], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "zip", "deeplab.Classifier_Module.conv2d_list.append", "m.weight.data.normal_", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.naver_oasis.dataset.cityscapes_dataset.Cityscapes.__init__"], ["\t", "def", "__init__", "(", "self", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", ":", "\n", "\t\t", "super", "(", "Classifier_Module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv2d_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "dilation", ",", "padding", "in", "zip", "(", "dilation_series", ",", "padding_series", ")", ":", "\n", "\t\t\t", "self", ".", "conv2d_list", ".", "append", "(", "nn", ".", "Conv2d", "(", "2048", ",", "num_classes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "True", ")", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "conv2d_list", ":", "\n", "\t\t\t", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.deeplab.Classifier_Module.forward": [[117, 122], ["range", "len"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "out", "=", "self", ".", "conv2d_list", "[", "0", "]", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "conv2d_list", ")", "-", "1", ")", ":", "\n", "\t\t\t", "out", "+=", "self", ".", "conv2d_list", "[", "i", "+", "1", "]", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.deeplab.ResNet.__init__": [[125, 148], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "deeplab.ResNet.bn1.parameters", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "deeplab.ResNet._make_layer", "deeplab.ResNet._make_layer", "deeplab.ResNet._make_layer", "deeplab.ResNet._make_layer", "deeplab.ResNet._make_pred_layer", "deeplab.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.naver_oasis.dataset.cityscapes_dataset.Cityscapes.__init__", "home.repos.pwc.inspect_result.naver_oasis.None.deeplab.ResNet._make_layer", "home.repos.pwc.inspect_result.naver_oasis.None.deeplab.ResNet._make_layer", "home.repos.pwc.inspect_result.naver_oasis.None.deeplab.ResNet._make_layer", "home.repos.pwc.inspect_result.naver_oasis.None.deeplab.ResNet._make_layer", "home.repos.pwc.inspect_result.naver_oasis.None.deeplab.ResNet._make_pred_layer"], ["\t", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", ")", ":", "\n", "\t\t", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn1", ".", "parameters", "(", ")", ":", "\n", "\t\t\t", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "ceil_mode", "=", "True", ")", "# change", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "1", ",", "dilation", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "dilation", "=", "4", ")", "\n", "self", ".", "layer5", "=", "self", ".", "_make_pred_layer", "(", "Classifier_Module", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "\t\t\t", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "\t\t\t\t", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "\t\t\t\t", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "#\t\t for i in m.parameters():", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.deeplab.ResNet._make_layer": [[151, 167], ["torch.Sequential._modules[].parameters", "layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "\t\t", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", "or", "dilation", "==", "2", "or", "dilation", "==", "4", ":", "\n", "\t\t\t", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "affine", "=", "affine_par", ")", ")", "\n", "", "for", "i", "in", "downsample", ".", "_modules", "[", "'1'", "]", ".", "parameters", "(", ")", ":", "\n", "\t\t\t", "i", ".", "requires_grad", "=", "False", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "dilation", "=", "dilation", ",", "downsample", "=", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "\t\t\t", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "", "def", "_make_pred_layer", "(", "self", ",", "block", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", ":", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.deeplab.ResNet._make_pred_layer": [[167, 169], ["block"], "methods", ["None"], ["", "def", "_make_pred_layer", "(", "self", ",", "block", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", ":", "\n", "\t\t", "return", "block", "(", "dilation_series", ",", "padding_series", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.deeplab.ResNet.forward": [[170, 182], ["deeplab.ResNet.conv1", "deeplab.ResNet.bn1", "deeplab.ResNet.relu", "deeplab.ResNet.maxpool", "deeplab.ResNet.layer1", "deeplab.ResNet.layer2", "deeplab.ResNet.layer3", "deeplab.ResNet.layer4", "deeplab.ResNet.layer5"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x", "=", "self", ".", "layer5", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.deeplab.ResNet.get_1x_lr_params_NOscale": [[183, 206], ["b.append", "b.append", "b.append", "b.append", "b.append", "b.append", "range", "len", "b[].modules", "j.parameters"], "methods", ["None"], ["", "def", "get_1x_lr_params_NOscale", "(", "self", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tThis generator returns all the parameters of the net except for \n\t\tthe last classification layer. Note that for each batchnorm layer, \n\t\trequires_grad is set to False in deeplab_resnet.py, therefore this function does not return \n\t\tany batchnorm parameter\n\t\t\"\"\"", "\n", "b", "=", "[", "]", "\n", "\n", "b", ".", "append", "(", "self", ".", "conv1", ")", "\n", "b", ".", "append", "(", "self", ".", "bn1", ")", "\n", "b", ".", "append", "(", "self", ".", "layer1", ")", "\n", "b", ".", "append", "(", "self", ".", "layer2", ")", "\n", "b", ".", "append", "(", "self", ".", "layer3", ")", "\n", "b", ".", "append", "(", "self", ".", "layer4", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "\t\t\t", "for", "j", "in", "b", "[", "i", "]", ".", "modules", "(", ")", ":", "\n", "\t\t\t\t", "jj", "=", "0", "\n", "for", "k", "in", "j", ".", "parameters", "(", ")", ":", "\n", "\t\t\t\t\t", "jj", "+=", "1", "\n", "if", "k", ".", "requires_grad", ":", "\n", "\t\t\t\t\t\t", "yield", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.deeplab.ResNet.get_10x_lr_params": [[207, 218], ["b.append", "range", "deeplab.ResNet.layer5.parameters", "len"], "methods", ["None"], ["", "", "", "", "", "def", "get_10x_lr_params", "(", "self", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tThis generator returns all the parameters for the last layer of the net,\n\t\twhich does the classification of pixel into classes\n\t\t\"\"\"", "\n", "b", "=", "[", "]", "\n", "b", ".", "append", "(", "self", ".", "layer5", ".", "parameters", "(", ")", ")", "\n", "\n", "for", "j", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "\t\t\t", "for", "i", "in", "b", "[", "j", "]", ":", "\n", "\t\t\t\t", "yield", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.deeplab.ResNet.optim_parameters": [[220, 223], ["deeplab.ResNet.get_1x_lr_params_NOscale", "deeplab.ResNet.get_10x_lr_params"], "methods", ["home.repos.pwc.inspect_result.naver_oasis.None.deeplab.ResNet.get_1x_lr_params_NOscale", "home.repos.pwc.inspect_result.naver_oasis.None.deeplab.ResNet.get_10x_lr_params"], ["", "", "", "def", "optim_parameters", "(", "self", ",", "args", ")", ":", "\n", "\t\t", "return", "[", "{", "'params'", ":", "self", ".", "get_1x_lr_params_NOscale", "(", ")", ",", "'lr'", ":", "args", ".", "learning_rate", "}", ",", "\n", "{", "'params'", ":", "self", ".", "get_10x_lr_params", "(", ")", ",", "'lr'", ":", "10", "*", "args", ".", "learning_rate", "}", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.deeplab.outS": [[12, 18], ["int", "int", "numpy.ceil"], "function", ["None"], ["def", "outS", "(", "i", ")", ":", "\n", "\t", "i", "=", "int", "(", "i", ")", "\n", "i", "=", "(", "i", "+", "1", ")", "/", "2", "\n", "i", "=", "int", "(", "np", ".", "ceil", "(", "(", "i", "+", "1", ")", "/", "2.0", ")", ")", "\n", "i", "=", "(", "i", "+", "1", ")", "/", "2", "\n", "return", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.deeplab.conv3x3": [[20, 24], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "\t", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.deeplab.Res_Deeplab": [[225, 228], ["deeplab.ResNet"], "function", ["None"], ["", "", "def", "Res_Deeplab", "(", "num_classes", "=", "21", ")", ":", "\n", "\t", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.image_helpers.ImageOps.__init__": [[17, 37], ["numpy.array", "range", "len", "image_helpers.ImageOps.PALETTE.append"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ")", ":", "\n", "\n", "\t\t", "self", ".", "IMG_MEAN", "=", "np", ".", "array", "(", "\n", "(", "104.00698793", ",", "116.66876762", ",", "122.67891434", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "self", ".", "LABELS_DICT", "=", "{", "0", ":", "\"road\"", ",", "1", ":", "\"sidewalk\"", ",", "2", ":", "\"building\"", ",", "3", ":", "\"wall\"", ",", "\n", "4", ":", "\"fence\"", ",", "5", ":", "\"pole\"", ",", "6", ":", "\"light\"", ",", "7", ":", "\"sign\"", ",", "\n", "8", ":", "\"vegetation\"", ",", "9", ":", "\"terrain\"", ",", "10", ":", "\"sky\"", ",", "11", ":", "\"person\"", ",", "\n", "12", ":", "\"rider\"", ",", "13", ":", "\"car\"", ",", "14", ":", "\"truck\"", ",", "15", ":", "\"bus\"", ",", "16", ":", "\"train\"", ",", "\n", "7", ":", "\"motocycle\"", ",", "18", ":", "\"bicycle\"", "\n", "}", "\n", "# 19x3 values, for Image's palette() module", "\n", "self", ".", "PALETTE", "=", "[", "128", ",", "64", ",", "128", ",", "244", ",", "35", ",", "232", ",", "70", ",", "70", ",", "70", ",", "102", ",", "102", ",", "156", ",", "190", ",", "\n", "153", ",", "153", ",", "153", ",", "153", ",", "153", ",", "250", ",", "170", ",", "30", ",", "220", ",", "220", ",", "0", ",", "107", ",", "142", ",", "\n", "35", ",", "152", ",", "251", ",", "152", ",", "70", ",", "130", ",", "180", ",", "220", ",", "20", ",", "60", ",", "255", ",", "0", ",", "0", ",", "0", ",", "0", ",", "\n", "142", ",", "0", ",", "0", ",", "70", ",", "0", ",", "60", ",", "100", ",", "0", ",", "80", ",", "100", ",", "0", ",", "0", ",", "230", ",", "119", ",", "11", ",", "32", "]", "\n", "\n", "zero_pad", "=", "256", "*", "3", "-", "len", "(", "self", ".", "PALETTE", ")", "\n", "for", "i", "in", "range", "(", "zero_pad", ")", ":", "\n", "\t\t\t", "self", ".", "PALETTE", ".", "append", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.image_helpers.ImageOps.colorize_mask": [[39, 44], ["PIL.Image.fromarray().convert", "PIL.Image.fromarray().convert.putpalette", "PIL.Image.fromarray", "mask.astype"], "methods", ["None"], ["", "", "def", "colorize_mask", "(", "self", ",", "mask", ")", ":", "\n", "# mask: numpy array of the mask", "\n", "\t\t", "new_mask", "=", "Image", ".", "fromarray", "(", "mask", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'P'", ")", "\n", "new_mask", ".", "putpalette", "(", "self", ".", "PALETTE", ")", "\n", "return", "new_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.image_helpers.ImageOps.get_concat_h": [[46, 51], ["PIL.Image.new", "PIL.Image.new.paste", "PIL.Image.new.paste", "max"], "methods", ["None"], ["", "def", "get_concat_h", "(", "self", ",", "im1", ",", "im2", ")", ":", "\n", "\t\t", "dst", "=", "Image", ".", "new", "(", "'RGB'", ",", "(", "im1", ".", "width", "+", "im2", ".", "width", ",", "max", "(", "im1", ".", "height", ",", "im2", ".", "height", ")", ")", ")", "\n", "dst", ".", "paste", "(", "im1", ",", "(", "0", ",", "0", ")", ")", "\n", "dst", ".", "paste", "(", "im2", ",", "(", "im1", ".", "width", ",", "0", ")", ")", "\n", "return", "dst", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.image_helpers.ImageOps.get_concat_v": [[53, 58], ["PIL.Image.new", "PIL.Image.new.paste", "PIL.Image.new.paste", "max"], "methods", ["None"], ["", "def", "get_concat_v", "(", "self", ",", "im1", ",", "im2", ")", ":", "\n", "\t\t", "dst", "=", "Image", ".", "new", "(", "'RGB'", ",", "(", "max", "(", "im1", ".", "width", ",", "im2", ".", "width", ")", ",", "im1", ".", "height", "+", "im2", ".", "height", ")", ")", "\n", "dst", ".", "paste", "(", "im1", ",", "(", "0", ",", "0", ")", ")", "\n", "dst", ".", "paste", "(", "im2", ",", "(", "0", ",", "im1", ".", "height", ")", ")", "\n", "return", "dst", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.image_helpers.ImageOps.process_image_for_saving": [[60, 70], ["interp().cpu().numpy().squeeze", "numpy.transpose", "PIL.Image.fromarray.astype", "PIL.Image.fromarray", "interp().cpu().numpy", "interp().cpu", "interp"], "methods", ["None"], ["", "def", "process_image_for_saving", "(", "self", ",", "image", ",", "interp", ")", ":", "\n", "\n", "# handling RGB input image", "\n", "\t\t", "image", "=", "interp", "(", "image", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", "\n", "image", "=", "np", ".", "transpose", "(", "image", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "image", "+=", "self", ".", "IMG_MEAN", "\n", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "image", "=", "image", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "image", "=", "Image", ".", "fromarray", "(", "image", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.image_helpers.ImageOps.process_ade20k_image_for_saving": [[72, 83], ["image.astype.astype.cpu().numpy().squeeze", "numpy.transpose", "image.astype.astype.astype", "image.astype.astype.cpu().numpy", "image.astype.astype.cpu"], "methods", ["None"], ["", "def", "process_ade20k_image_for_saving", "(", "self", ",", "image", ",", "mean", ",", "std", ")", ":", "\n", "\n", "# handling RGB input image", "\n", "\t\t", "image", "=", "image", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", "\n", "image", "=", "np", ".", "transpose", "(", "image", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "image", "*=", "std", "\n", "image", "+=", "mean", "\n", "image", "*=", "255.", "\n", "#image = image[:, :, ::-1]", "\n", "image", "=", "image", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.image_helpers.ImageOps.save_concat_image": [[86, 97], ["image_helpers.ImageOps.get_concat_v", "image_helpers.ImageOps.get_concat_v", "os.path.join", "image_helpers.ImageOps.save"], "methods", ["home.repos.pwc.inspect_result.naver_oasis.None.image_helpers.ImageOps.get_concat_v", "home.repos.pwc.inspect_result.naver_oasis.None.image_helpers.ImageOps.get_concat_v"], ["", "def", "save_concat_image", "(", "self", ",", "image", ",", "gt", ",", "pred", ",", "input_size", ",", "save_path", ",", "prefix", ")", ":", "\n", "\n", "\t\t", "\"\"\"\n\t\tSave concatenation of image, ground truth and prediction\n\t\t\"\"\"", "\n", "\n", "image_concat", "=", "self", ".", "get_concat_v", "(", "image", ",", "pred", ")", "\n", "image_concat", "=", "self", ".", "get_concat_v", "(", "gt", ",", "image_concat", ")", "\n", "image_concat_path", "=", "os", ".", "path", ".", "join", "(", "\n", "save_path", ",", "prefix", "+", "'_concat.png'", ")", "\n", "image_concat", ".", "save", "(", "image_concat_path", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.naver_oasis.None.metrics_helpers.fast_hist": [[16, 19], ["numpy.bincount().reshape", "numpy.bincount", "a_[].astype"], "function", ["None"], ["def", "fast_hist", "(", "a_", ",", "b_", ",", "n_", ")", ":", "\n", "\t", "k_", "=", "(", "a_", ">=", "0", ")", "&", "(", "a_", "<", "n_", ")", "\n", "return", "np", ".", "bincount", "(", "n_", "*", "a_", "[", "k_", "]", ".", "astype", "(", "int", ")", "+", "b_", "[", "k_", "]", ",", "minlength", "=", "n_", "**", "2", ")", ".", "reshape", "(", "n_", ",", "n_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.metrics_helpers.per_class_iu": [[21, 23], ["numpy.diag", "numpy.diag", "hist.sum", "hist.sum"], "function", ["None"], ["", "def", "per_class_iu", "(", "hist", ")", ":", "\n", "\t", "return", "np", ".", "diag", "(", "hist", ")", "/", "(", "hist", ".", "sum", "(", "1", ")", "+", "hist", ".", "sum", "(", "0", ")", "-", "np", ".", "diag", "(", "hist", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.metrics_helpers.label_mapping": [[25, 30], ["numpy.copy", "range", "numpy.array", "len"], "function", ["None"], ["", "def", "label_mapping", "(", "input", ",", "mapping", ")", ":", "\n", "\t", "output", "=", "np", ".", "copy", "(", "input", ")", "\n", "for", "ind", "in", "range", "(", "len", "(", "mapping", ")", ")", ":", "\n", "\t\t", "output", "[", "input", "==", "mapping", "[", "ind", "]", "[", "0", "]", "]", "=", "mapping", "[", "ind", "]", "[", "1", "]", "\n", "", "return", "np", ".", "array", "(", "output", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.metrics_helpers.compute_mIoU": [[32, 69], ["numpy.int", "print", "numpy.array", "numpy.array", "numpy.zeros", "os.path.join", "os.path.join", "open().read().splitlines", "open().read().splitlines", "range", "metrics_helpers.per_class_iu", "range", "print", "open", "json.load", "os.path.join", "os.path.join", "len", "PIL.Image.open", "numpy.array", "PIL.Image.open", "numpy.array", "metrics_helpers.label_mapping", "metrics_helpers.fast_hist", "print", "os.path.join", "open().read", "open().read", "len", "len", "print", "label_mapping.flatten", "np.array.flatten", "print", "x.split", "label_mapping.flatten", "np.array.flatten", "str", "round", "open", "open", "len", "round", "len", "len", "numpy.mean", "numpy.nanmean", "label_mapping.flatten", "np.array.flatten", "metrics_helpers.per_class_iu"], "function", ["home.repos.pwc.inspect_result.naver_oasis.None.metrics_helpers.per_class_iu", "home.repos.pwc.inspect_result.naver_oasis.None.metrics_helpers.label_mapping", "home.repos.pwc.inspect_result.naver_oasis.None.metrics_helpers.fast_hist", "home.repos.pwc.inspect_result.naver_oasis.None.metrics_helpers.per_class_iu"], ["", "def", "compute_mIoU", "(", "gt_dir", ",", "pred_dir", ",", "devkit_dir", "=", "'./dataset/cityscapes_list'", ")", ":", "\n", "\t", "\"\"\"\n\tCompute IoU given the predicted colorized images and\n\t\"\"\"", "\n", "with", "open", "(", "join", "(", "devkit_dir", ",", "'info.json'", ")", ",", "'r'", ")", "as", "fp", ":", "\n", "\t\t", "info", "=", "json", ".", "load", "(", "fp", ")", "\n", "", "num_classes", "=", "np", ".", "int", "(", "info", "[", "'classes'", "]", ")", "\n", "print", "(", "f'Num classes {num_classes}'", ")", "\n", "name_classes", "=", "np", ".", "array", "(", "info", "[", "'label'", "]", ",", "dtype", "=", "np", ".", "str", ")", "\n", "mapping", "=", "np", ".", "array", "(", "info", "[", "'label2train'", "]", ",", "dtype", "=", "np", ".", "int", ")", "\n", "hist", "=", "np", ".", "zeros", "(", "(", "num_classes", ",", "num_classes", ")", ")", "\n", "\n", "image_path_list", "=", "join", "(", "devkit_dir", ",", "'val.txt'", ")", "\n", "label_path_list", "=", "join", "(", "devkit_dir", ",", "'label.txt'", ")", "\n", "gt_imgs", "=", "open", "(", "label_path_list", ",", "'r'", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "gt_imgs", "=", "[", "join", "(", "gt_dir", ",", "x", ")", "for", "x", "in", "gt_imgs", "]", "\n", "pred_imgs", "=", "open", "(", "image_path_list", ",", "'r'", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "pred_imgs", "=", "[", "join", "(", "pred_dir", ",", "x", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "for", "x", "in", "pred_imgs", "]", "\n", "\n", "for", "ind", "in", "range", "(", "len", "(", "gt_imgs", ")", ")", ":", "\n", "\t\t", "pred_image", "=", "Image", ".", "open", "(", "pred_imgs", "[", "ind", "]", ")", "\n", "pred", "=", "np", ".", "array", "(", "pred_image", ")", "\n", "label_image", "=", "Image", ".", "open", "(", "gt_imgs", "[", "ind", "]", ")", "\n", "label", "=", "np", ".", "array", "(", "label_image", ")", "\n", "label", "=", "label_mapping", "(", "label", ",", "mapping", ")", "\n", "if", "len", "(", "label", ".", "flatten", "(", ")", ")", "!=", "len", "(", "pred", ".", "flatten", "(", ")", ")", ":", "\n", "\t\t\t", "print", "(", "f'Skipping: len(gt) = {len(label.flatten())}, len(pred) = {len(pred.flatten())}, {gt_imgs[ind]}, {pred_imgs[ind]}'", ")", "\n", "continue", "\n", "", "hist", "+=", "fast_hist", "(", "label", ".", "flatten", "(", ")", ",", "pred", ".", "flatten", "(", ")", ",", "num_classes", ")", "\n", "if", "ind", ">", "0", "and", "ind", "%", "10", "==", "0", ":", "\n", "\t\t\t", "print", "(", "'{:d} / {:d}: {:0.2f}'", ".", "format", "(", "ind", ",", "len", "(", "gt_imgs", ")", ",", "100", "*", "np", ".", "mean", "(", "per_class_iu", "(", "hist", ")", ")", ")", ")", "\n", "\n", "", "", "mIoUs", "=", "per_class_iu", "(", "hist", ")", "\n", "for", "ind_class", "in", "range", "(", "num_classes", ")", ":", "\n", "\t\t", "print", "(", "'===>'", "+", "name_classes", "[", "ind_class", "]", "+", "':\\t'", "+", "str", "(", "round", "(", "mIoUs", "[", "ind_class", "]", "*", "100", ",", "2", ")", ")", ")", "\n", "", "print", "(", "f'===> mIoU: {round(np.nanmean(mIoUs) * 100, 2)}'", ")", "\n", "return", "mIoUs", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.metrics_helpers.compute_acc_single_image": [[71, 89], ["numpy.unique", "len", "len", "len", "label.flatten", "pred.flatten", "numpy.sum", "len", "numpy.sum", "len"], "function", ["None"], ["", "def", "compute_acc_single_image", "(", "label", ",", "pred", ")", ":", "\n", "\t", "\"\"\"\n\tCompute pixel and mean accuracy given a predicted colorized image and the GT\n\t(also GT in color format, not label format)\n\t\"\"\"", "\n", "\n", "assert", "len", "(", "label", ".", "flatten", "(", ")", ")", "==", "len", "(", "pred", ".", "flatten", "(", ")", ")", "\n", "\n", "correct_pred", "=", "(", "label", "[", "label", "!=", "255", "]", "==", "pred", "[", "label", "!=", "255", "]", ")", "\n", "pixel_acc", "=", "100.", "*", "np", ".", "sum", "(", "correct_pred", ")", "/", "len", "(", "correct_pred", ")", "\n", "\n", "image_labels", "=", "np", ".", "unique", "(", "label", ")", "\n", "mean_acc", "=", "0.", "\n", "for", "cl", "in", "image_labels", ":", "\n", "\t\t", "tmp_correct_pred", "=", "(", "label", "[", "label", "==", "cl", "]", "==", "pred", "[", "label", "==", "cl", "]", ")", "\n", "mean_acc", "+=", "(", "1.", "/", "len", "(", "image_labels", ")", ")", "*", "np", ".", "sum", "(", "tmp_correct_pred", ")", "/", "len", "(", "tmp_correct_pred", ")", "\n", "\n", "", "return", "pixel_acc", ",", "mean_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.metrics_helpers.compute_mIoU_single_image": [[91, 107], ["metrics_helpers.fast_hist", "metrics_helpers.per_class_iu", "len", "len", "print", "label.flatten", "pred.flatten", "numpy.nanmean", "label.flatten", "pred.flatten", "metrics_helpers.per_class_iu", "len", "len", "label.flatten", "pred.flatten"], "function", ["home.repos.pwc.inspect_result.naver_oasis.None.metrics_helpers.fast_hist", "home.repos.pwc.inspect_result.naver_oasis.None.metrics_helpers.per_class_iu", "home.repos.pwc.inspect_result.naver_oasis.None.metrics_helpers.per_class_iu"], ["", "def", "compute_mIoU_single_image", "(", "label", ",", "pred", ",", "num_classes", ",", "name_classes", ")", ":", "\n", "\t", "\"\"\"\n\tCompute IoU given a predicted colorized image and the GT\n\t(also GT in color format, not label format)\n\t\"\"\"", "\n", "\n", "if", "len", "(", "label", ".", "flatten", "(", ")", ")", "!=", "len", "(", "pred", ".", "flatten", "(", ")", ")", ":", "\n", "\t\t", "print", "(", "'Skipping: len(gt) = {:d}, len(pred) = {:d}'", ".", "format", "(", "len", "(", "label", ".", "flatten", "(", ")", ")", ",", "len", "(", "pred", ".", "flatten", "(", ")", ")", ")", ")", "\n", "return", "-", "1", "\n", "\n", "", "hist", "=", "fast_hist", "(", "label", ".", "flatten", "(", ")", ",", "pred", ".", "flatten", "(", ")", ",", "num_classes", ")", "\n", "sample_mIoU", "=", "100", "*", "np", ".", "nanmean", "(", "per_class_iu", "(", "hist", ")", ")", "\n", "\n", "mIoUs", "=", "per_class_iu", "(", "hist", ")", "\n", "\n", "return", "mIoUs", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.metrics_helpers.compute_acc_fromlist": [[109, 192], ["numpy.int", "print", "numpy.array", "numpy.array", "sorted", "sorted", "sklearn.preprocessing.LabelEncoder", "range", "numpy.stack", "numpy.stack", "numpy.unique", "preprocessing.LabelEncoder.fit", "len", "len", "enumerate", "len", "len", "open", "json.load", "len", "PIL.Image.open", "numpy.array", "pred_imgs_list.append", "gt_imgs_list.append", "zip", "le.transform.flatten", "le.transform.flatten", "metrics_helpers.compute_acc_single_image", "os.path.join", "PIL.Image.open", "numpy.array", "metrics_helpers.label_mapping", "len", "len", "print", "numpy.any", "numpy.any", "preprocessing.LabelEncoder.transform", "preprocessing.LabelEncoder.transform", "SYNTHIA_TO_CITYSCAPES_MAPPING.items", "NotImplementedError", "le.transform.flatten", "le.transform.flatten", "numpy.asarray", "numpy.ones", "imageio.imread", "len", "len", "le.transform.flatten", "le.transform.flatten"], "function", ["home.repos.pwc.inspect_result.naver_oasis.None.metrics_helpers.compute_acc_single_image", "home.repos.pwc.inspect_result.naver_oasis.None.metrics_helpers.label_mapping"], ["", "def", "compute_acc_fromlist", "(", "gt_imgs", ",", "pred_imgs", ",", "trg_dataset", ",", "devkit_dir", "=", "'./dataset/cityscapes_list'", ")", ":", "\n", "\t", "\"\"\"\n\tCompute pixel and mean accuracy given the predicted colorized images and\n\t\"\"\"", "\n", "\n", "assert", "len", "(", "gt_imgs", ")", "==", "len", "(", "pred_imgs", ")", "\n", "\n", "with", "open", "(", "join", "(", "devkit_dir", ",", "'info.json'", ")", ",", "'r'", ")", "as", "fp", ":", "\n", "\t\t", "info", "=", "json", ".", "load", "(", "fp", ")", "\n", "", "num_classes", "=", "np", ".", "int", "(", "info", "[", "'classes'", "]", ")", "\n", "print", "(", "f'Num classes {num_classes}'", ")", "\n", "name_classes", "=", "np", ".", "array", "(", "info", "[", "'label'", "]", ",", "dtype", "=", "np", ".", "str", ")", "\n", "mapping", "=", "np", ".", "array", "(", "info", "[", "'label2train'", "]", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n", "gt_imgs", "=", "sorted", "(", "gt_imgs", ")", "\n", "pred_imgs", "=", "sorted", "(", "pred_imgs", ")", "\n", "\n", "gt_imgs_list", "=", "[", "]", "\n", "pred_imgs_list", "=", "[", "]", "\n", "\n", "le", "=", "preprocessing", ".", "LabelEncoder", "(", ")", "\n", "\n", "for", "ind", "in", "range", "(", "len", "(", "gt_imgs", ")", ")", ":", "\n", "\t\t", "pred_image", "=", "Image", ".", "open", "(", "pred_imgs", "[", "ind", "]", ")", "\n", "pred", "=", "np", ".", "array", "(", "pred_image", ")", "\n", "\n", "if", "(", "'Cityscapes'", "in", "trg_dataset", ")", "or", "(", "'ACDC'", "in", "trg_dataset", ")", ":", "\n", "\t\t\t", "label_image", "=", "Image", ".", "open", "(", "gt_imgs", "[", "ind", "]", ")", "\n", "label", "=", "np", ".", "array", "(", "label_image", ")", "\n", "label", "=", "label_mapping", "(", "label", ",", "mapping", ")", "\n", "\n", "", "elif", "'SYNTHIA'", "in", "trg_dataset", ":", "\n", "\t\t\t", "label_image", "=", "np", ".", "asarray", "(", "imageio", ".", "imread", "(", "gt_imgs", "[", "ind", "]", ",", "format", "=", "'PNG-FI'", ")", ")", "[", ":", ",", ":", ",", "0", "]", "# uint16", "\n", "label", "=", "255", "*", "np", ".", "ones", "(", "label_image", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", ",", "v", "in", "SYNTHIA_TO_CITYSCAPES_MAPPING", ".", "items", "(", ")", ":", "\n", "\t\t\t\t", "label", "[", "label_image", "==", "k", "]", "=", "v", "\n", "\n", "", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "(", "\"Unknown target dataset\"", ")", "\n", "\n", "", "if", "len", "(", "label", ".", "flatten", "(", ")", ")", "!=", "len", "(", "pred", ".", "flatten", "(", ")", ")", ":", "\n", "\t\t\t", "print", "(", "f'Skipping: len(gt) = {len(label.flatten())}, len(pred) = {len(pred.flatten())}, {gt_imgs[ind]}, {pred_imgs[ind]}'", ")", "\n", "continue", "\n", "\n", "", "pred_imgs_list", ".", "append", "(", "pred", ")", "\n", "gt_imgs_list", ".", "append", "(", "label", ")", "\n", "\n", "", "pred_imgs_stack", "=", "np", ".", "stack", "(", "pred_imgs_list", ")", "\n", "gt_imgs_stack", "=", "np", ".", "stack", "(", "gt_imgs_list", ")", "\n", "\n", "# only consider classes available in GT", "\n", "# for evaluation (not an issue for Cityscapes)", "\n", "gt_classes", "=", "np", ".", "unique", "(", "gt_imgs_stack", ")", "\n", "gt_classes", "=", "gt_classes", "[", "gt_classes", "!=", "255", "]", "\n", "le", ".", "fit", "(", "gt_classes", ")", "\n", "num_classes", "=", "len", "(", "gt_classes", ")", "\n", "\n", "pixel_acc", "=", "0.", "\n", "mean_acc", "=", "0.", "\n", "\n", "num_images", "=", "len", "(", "pred_imgs_list", ")", "\n", "\n", "for", "ind", ",", "(", "pred", ",", "label", ")", "in", "enumerate", "(", "zip", "(", "pred_imgs_stack", ",", "gt_imgs_stack", ")", ")", ":", "\n", "\t\t", "label", "=", "label", ".", "flatten", "(", ")", "\n", "pred", "=", "pred", ".", "flatten", "(", ")", "\n", "\n", "if", "trg_dataset", "==", "'SYNTHIA'", ":", "\n", "\t\t\t", "idx", "=", "np", ".", "any", "(", "(", "pred", "==", "gt_classes", "[", ":", ",", "None", "]", ")", ",", "0", ")", "\n", "pred", "=", "pred", "[", "idx", "]", "\n", "label", "=", "label", "[", "idx", "]", "\n", "\n", "idx", "=", "np", ".", "any", "(", "(", "label", "==", "gt_classes", "[", ":", ",", "None", "]", ")", ",", "0", ")", "\n", "pred", "=", "pred", "[", "idx", "]", "\n", "label", "=", "label", "[", "idx", "]", "\n", "\n", "pred", "=", "le", ".", "transform", "(", "pred", ")", "\n", "label", "=", "le", ".", "transform", "(", "label", ")", "\n", "\n", "", "pixel_acc_tmp", ",", "mean_acc_tmp", "=", "compute_acc_single_image", "(", "label", ",", "pred", ")", "\n", "pixel_acc", "+=", "(", "1.", "/", "num_images", ")", "*", "pixel_acc_tmp", "\n", "mean_acc", "+=", "(", "1.", "/", "num_images", ")", "*", "mean_acc_tmp", "\n", "\n", "", "return", "pixel_acc", ",", "mean_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.metrics_helpers.compute_mIoU_fromlist": [[195, 287], ["numpy.int", "print", "numpy.array", "numpy.array", "sorted", "sorted", "sklearn.preprocessing.LabelEncoder", "range", "numpy.stack", "numpy.stack", "numpy.unique", "preprocessing.LabelEncoder.fit", "numpy.zeros", "time.time", "enumerate", "metrics_helpers.per_class_iu", "range", "print", "numpy.unique", "gt_freq[].tolist", "gt_freq[].tolist", "range", "open", "json.load", "len", "PIL.Image.open", "numpy.array", "pred_imgs_list.append", "gt_imgs_list.append", "zip", "label_mapping.flatten", "pred.flatten.flatten", "metrics_helpers.fast_hist", "print", "np.unique.append", "os.path.join", "PIL.Image.open", "numpy.array", "metrics_helpers.label_mapping", "len", "len", "print", "print", "time.time", "print", "gt_freq[].tolist.index", "gt_counts.append", "gt_counts.append", "numpy.array", "numpy.array", "SYNTHIA_TO_CITYSCAPES_MAPPING.items", "NotImplementedError", "label_mapping.flatten", "pred.flatten.flatten", "str", "round", "numpy.asarray", "numpy.ones", "len", "round", "imageio.imread", "len", "len", "numpy.nanmean", "numpy.nanmean", "label_mapping.flatten", "pred.flatten.flatten", "time.time", "metrics_helpers.per_class_iu"], "function", ["home.repos.pwc.inspect_result.naver_oasis.None.metrics_helpers.per_class_iu", "home.repos.pwc.inspect_result.naver_oasis.None.metrics_helpers.fast_hist", "home.repos.pwc.inspect_result.naver_oasis.None.metrics_helpers.label_mapping", "home.repos.pwc.inspect_result.naver_oasis.None.metrics_helpers.per_class_iu"], ["", "def", "compute_mIoU_fromlist", "(", "gt_imgs", ",", "pred_imgs", ",", "trg_dataset", ",", "devkit_dir", "=", "'./dataset/cityscapes_list'", ")", ":", "\n", "\t", "\"\"\"\n\tCompute IoU given the predicted colorized images and\n\t\"\"\"", "\n", "with", "open", "(", "join", "(", "devkit_dir", ",", "'info.json'", ")", ",", "'r'", ")", "as", "fp", ":", "\n", "\t\t", "info", "=", "json", ".", "load", "(", "fp", ")", "\n", "", "num_classes", "=", "np", ".", "int", "(", "info", "[", "'classes'", "]", ")", "\n", "print", "(", "f'Num classes {num_classes}'", ")", "\n", "name_classes", "=", "np", ".", "array", "(", "info", "[", "'label'", "]", ",", "dtype", "=", "np", ".", "str", ")", "\n", "mapping", "=", "np", ".", "array", "(", "info", "[", "'label2train'", "]", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n", "gt_imgs", "=", "sorted", "(", "gt_imgs", ")", "\n", "pred_imgs", "=", "sorted", "(", "pred_imgs", ")", "\n", "\n", "gt_imgs_list", "=", "[", "]", "\n", "pred_imgs_list", "=", "[", "]", "\n", "\n", "le", "=", "preprocessing", ".", "LabelEncoder", "(", ")", "\n", "\n", "for", "ind", "in", "range", "(", "len", "(", "gt_imgs", ")", ")", ":", "\n", "\t\t", "pred_image", "=", "Image", ".", "open", "(", "pred_imgs", "[", "ind", "]", ")", "\n", "pred", "=", "np", ".", "array", "(", "pred_image", ")", "# pred: (1024, 2048)", "\n", "\n", "if", "(", "'Cityscapes'", "in", "trg_dataset", ")", "or", "(", "'ACDC'", "in", "trg_dataset", ")", ":", "\n", "\t\t\t", "label_image", "=", "Image", ".", "open", "(", "gt_imgs", "[", "ind", "]", ")", "\n", "label", "=", "np", ".", "array", "(", "label_image", ")", "# label: (1024, 2048)", "\n", "label", "=", "label_mapping", "(", "label", ",", "mapping", ")", "\n", "\n", "", "elif", "'SYNTHIA'", "in", "trg_dataset", ":", "\n", "\t\t\t", "label_image", "=", "np", ".", "asarray", "(", "imageio", ".", "imread", "(", "gt_imgs", "[", "ind", "]", ",", "format", "=", "'PNG-FI'", ")", ")", "[", ":", ",", ":", ",", "0", "]", "# uint16", "\n", "label", "=", "255", "*", "np", ".", "ones", "(", "label_image", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", ",", "v", "in", "SYNTHIA_TO_CITYSCAPES_MAPPING", ".", "items", "(", ")", ":", "\n", "\t\t\t\t", "label", "[", "label_image", "==", "k", "]", "=", "v", "\n", "\n", "", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "(", "\"Unknown target dataset\"", ")", "\n", "\n", "", "if", "len", "(", "label", ".", "flatten", "(", ")", ")", "!=", "len", "(", "pred", ".", "flatten", "(", ")", ")", ":", "\n", "\t\t\t", "print", "(", "f'Skipping: len(gt) = {len(label.flatten())}, len(pred) = {len(pred.flatten())}, {gt_imgs[ind]}, {pred_imgs[ind]}'", ")", "\n", "continue", "\n", "\n", "", "pred_imgs_list", ".", "append", "(", "pred", ")", "\n", "gt_imgs_list", ".", "append", "(", "label", ")", "\n", "\n", "", "pred_imgs_stack", "=", "np", ".", "stack", "(", "pred_imgs_list", ")", "\n", "gt_imgs_stack", "=", "np", ".", "stack", "(", "gt_imgs_list", ")", "\n", "\n", "# only consider classes available in GT for evaluation (not an issue for Cityscapes)", "\n", "gt_classes", "=", "np", ".", "unique", "(", "gt_imgs_stack", ")", "\n", "gt_classes", "=", "gt_classes", "[", "gt_classes", "!=", "255", "]", "\n", "le", ".", "fit", "(", "gt_classes", ")", "\n", "num_classes", "=", "19", "#len(gt_classes)", "\n", "\n", "hist", "=", "np", ".", "zeros", "(", "(", "num_classes", ",", "num_classes", ")", ")", "\n", "\n", "import", "time", "\n", "time_0", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "ind", ",", "(", "pred", ",", "label", ")", "in", "enumerate", "(", "zip", "(", "pred_imgs_stack", ",", "gt_imgs_stack", ")", ")", ":", "\n", "\t\t", "label", "=", "label", ".", "flatten", "(", ")", "\n", "pred", "=", "pred", ".", "flatten", "(", ")", "\n", "\n", "hist", "+=", "fast_hist", "(", "label", ",", "pred", ",", "num_classes", ")", "\n", "\n", "if", "ind", ">", "0", "and", "ind", "%", "10", "==", "0", ":", "\n", "\t\t\t", "print", "(", "f'Elapsed time: {time.time() - time_0}'", ")", "\n", "time_0", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'{:d} / {:d}: {:0.2f}'", ".", "format", "(", "ind", ",", "len", "(", "gt_imgs", ")", ",", "100", "*", "np", ".", "nanmean", "(", "per_class_iu", "(", "hist", ")", ")", ")", ")", "\n", "\n", "", "", "mIoUs", "=", "per_class_iu", "(", "hist", ")", "\n", "\n", "for", "ind_class", "in", "range", "(", "num_classes", ")", ":", "\n", "\t\t", "print", "(", "'===>'", "+", "name_classes", "[", "ind_class", "]", "+", "':\\t'", "+", "str", "(", "round", "(", "mIoUs", "[", "ind_class", "]", "*", "100", ",", "2", ")", ")", ")", "\n", "", "print", "(", "f'===> mIoU: {round(np.nanmean(mIoUs) * 100, 2)}'", ")", "\n", "\n", "gt_freq", "=", "np", ".", "unique", "(", "gt_imgs_stack", ",", "return_counts", "=", "True", ")", "\n", "\n", "gt_classes_", "=", "gt_freq", "[", "0", "]", ".", "tolist", "(", ")", "\n", "gt_counts_", "=", "gt_freq", "[", "1", "]", ".", "tolist", "(", ")", "\n", "\n", "gt_classes", "=", "[", "]", "\n", "gt_counts", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_classes", ")", ":", "\n", "\t\t", "gt_classes", ".", "append", "(", "i", ")", "\n", "if", "i", "in", "gt_classes_", ":", "\n", "\t\t\t", "idx", "=", "gt_classes_", ".", "index", "(", "i", ")", "\n", "gt_counts", ".", "append", "(", "gt_counts_", "[", "idx", "]", ")", "\n", "", "else", ":", "\n", "\t\t\t", "gt_counts", ".", "append", "(", "0", ")", "\n", "\n", "", "", "return", "mIoUs", ",", "(", "np", ".", "array", "(", "gt_classes", ")", ",", "np", ".", "array", "(", "gt_counts", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.metrics_helpers.main": [[289, 291], ["metrics_helpers.compute_mIoU"], "function", ["home.repos.pwc.inspect_result.naver_oasis.None.metrics_helpers.compute_mIoU"], ["", "def", "main", "(", "args", ")", ":", "\n", "   ", "compute_mIoU", "(", "args", ".", "gt_dir", ",", "args", ".", "pred_dir", ",", "args", ".", "devkit_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.run_exps_helpers.update_cityscapes_lists": [[17, 72], ["None"], "function", ["None"], ["def", "update_cityscapes_lists", "(", "mode", ",", "trg_dataset_list", ",", "scene_list", ",", "cond_list", ")", ":", "\n", "\n", "\t", "if", "mode", "==", "'single'", ":", "\n", "\t\t", "scene_list_", "=", "[", "'aachen'", ",", "'dusseldorf'", ",", "'krefeld'", ",", "\n", "'ulm'", ",", "'bochum'", ",", "'erfurt'", ",", "\n", "'monchengladbach'", ",", "'weimar'", ",", "'bremen'", ",", "\n", "'hamburg'", ",", "'strasbourg'", ",", "'zurich'", ",", "\n", "'cologne'", ",", "'hanover'", ",", "'stuttgart'", ",", "\n", "'darmstadt'", ",", "'jena'", ",", "'tubingen'", "]", "\n", "\n", "cond_list_", "=", "[", "'clean'", ",", "'clean'", ",", "'clean'", ",", "'clean'", ",", "\n", "'clean'", ",", "'clean'", ",", "'clean'", ",", "'clean'", ",", "\n", "'clean'", ",", "'clean'", ",", "'clean'", ",", "'clean'", ",", "\n", "'clean'", ",", "'clean'", ",", "'clean'", ",", "'clean'", ",", "\n", "'clean'", ",", "'clean'", "]", "\n", "\n", "", "elif", "mode", "==", "'multi-O'", ":", "\n", "\t\t", "scene_list_", "=", "[", "'aachen-hamburg-frankfurt-munster'", ",", "\n", "'jena-hamburg-zurich-hanover'", ",", "\n", "'hamburg-stuttgart-tubingen-darmstadt'", ",", "\n", "'stuttgart-bochum-monchengladbach-bremen'", ",", "\n", "'lindau-bochum-aachen-stuttgart'", ",", "\n", "'monchengladbach-dusseldorf-jena-strasbourg'", ",", "\n", "'jena-strasbourg-bochum-dusseldorf'", ",", "\n", "'strasbourg-stuttgart-tubingen-monchengladbach'", ",", "\n", "'krefeld-erfurt-tubingen-strasbourg'", ",", "\n", "'monchengladbach-lindau-aachen-jena'", ",", "]", "\n", "\n", "cond_list_", "=", "[", "'clean-clean-clean-clean'", "]", "*", "10", "\n", "\n", "", "elif", "mode", "==", "'multi-AW'", ":", "\n", "\t\t", "scene_list_", "=", "[", "'zurich-darmstadt-dusseldorf-jena'", ",", "\n", "'munster-hamburg-cologne-erfurt'", ",", "\n", "'bremen-stuttgart-aachen-tubingen'", ",", "\n", "'dusseldorf-darmstadt-tubingen-bremen'", ",", "\n", "'bremen-krefeld-lindau-bochum'", ",", "\n", "'cologne-munster-hanover-bremen'", ",", "\n", "'frankfurt-erfurt-zurich-cologne'", ",", "\n", "'hanover-aachen-jena-munster'", ",", "\n", "'bremen-ulm-zurich-darmstadt'", ",", "\n", "'erfurt-ulm-aachen-lindau'", "]", "\n", "\n", "cond_list_", "=", "[", "'clean-fog-rain-fog'", ",", "'rain-fog-clean-clean'", ",", "\n", "'clean-fog-rain-clean'", ",", "'rain-clean-fog-rain'", ",", "\n", "'rain-clean-fog-clean'", ",", "'clean-rain-fog-clean'", ",", "\n", "'fog-rain-clean-clean'", ",", "'clean-fog-fog-rain'", ",", "\n", "'rain-fog-clean-fog'", ",", "'rain-clean-rain-fog'", "]", "\n", "\n", "", "trg_dataset_list_", "=", "[", "'Cityscapes'", "]", "*", "10", "\n", "\n", "trg_dataset_list", "+=", "trg_dataset_list_", "\n", "scene_list", "+=", "scene_list_", "\n", "cond_list", "+=", "cond_list_", "\n", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.run_exps_helpers.update_acdc_lists": [[74, 107], ["len"], "function", ["None"], ["", "def", "update_acdc_lists", "(", "mode", ",", "trg_dataset_list", ",", "scene_list", ",", "\n", "cond_list", ",", "seq_len", "=", "4", ",", "weather", "=", "None", ")", ":", "\n", "\n", "\t", "if", "mode", "==", "'single'", ":", "\n", "\t\t", "scene_list_", "=", "[", "'GOPR0475'", ",", "'GOPR0476'", ",", "'GOPR0477'", ",", "'GOPR0478'", ",", "\n", "'GOPR0479'", ",", "'GOPR0351'", ",", "'GOPR0376'", ",", "'GP010376'", ",", "\n", "'GP010397'", ",", "'GP020397'", ",", "'GOPR0400'", ",", "'GOPR0402'", ",", "\n", "'GP010400'", ",", "'GP010402'", ",", "'GP020400'", ",", "'GOPR0122'", ",", "\n", "'GOPR0604'", ",", "'GOPR0606'", ",", "'GOPR0607'", ",", "'GP010122'", "]", "\n", "\n", "cond_list_", "=", "[", "'fog'", ",", "'fog'", ",", "'fog'", ",", "'fog'", ",", "'fog'", ",", "\n", "'night'", ",", "'night'", ",", "'night'", ",", "'night'", ",", "'night'", ",", "\n", "'rain'", ",", "'rain'", ",", "'rain'", ",", "'rain'", ",", "'rain'", ",", "\n", "'snow'", ",", "'snow'", ",", "'snow'", ",", "'snow'", ",", "'snow'", "]", "\n", "\n", "", "if", "mode", "==", "'multi'", ":", "\n", "\t\t", "scene_list_", "=", "[", "'GP010476-GP010402-GP030176-GP010376'", ",", "\n", "'GP010476-GOPR0351-GOPR0122-GP020402'", ",", "\n", "'GOPR0402-GP010376-GP010607-GOPR0478'", ",", "\n", "'GP040176-GP020402-GP020397-GP010476'", ",", "\n", "'GOPR0122-GP020475-GOPR0356-GP010402'", "]", "\n", "\n", "cond_list_", "=", "[", "'fog-rain-snow-night'", ",", "'fog-night-snow-rain'", ",", "\n", "'rain-night-snow-fog'", ",", "'snow-rain-night-fog'", ",", "\n", "'snow-fog-night-rain'", "]", "\n", "\n", "", "trg_dataset_list_", "=", "[", "'ACDC'", "]", "*", "len", "(", "scene_list_", ")", "\n", "\n", "trg_dataset_list", "+=", "trg_dataset_list_", "\n", "scene_list", "+=", "scene_list_", "\n", "cond_list", "+=", "cond_list_", "\n", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.run_exps_helpers.update_synthia_lists": [[109, 143], ["len"], "function", ["None"], ["", "def", "update_synthia_lists", "(", "mode", ",", "trg_dataset_list", ",", "scene_list", ",", "cond_list", ")", ":", "\n", "\n", "\t", "if", "mode", "==", "'single'", ":", "\n", "\t\t", "cond_list_", "=", "[", "'FOG'", ",", "'DAWN'", ",", "'NIGHT'", ",", "'SUMMER'", ",", "'FALL'", ",", "\n", "'SPRING'", ",", "'FOG'", ",", "'DAWN'", ",", "'NIGHT'", ",", "'SUMMER'", ",", "\n", "'FALL'", ",", "'SPRING'", ",", "'FOG'", ",", "'DAWN'", ",", "'NIGHT'", ",", "\n", "'FALL'", ",", "'SPRING'", ",", "'RAIN'", ",", "'SOFTRAIN'", "]", "\n", "\n", "scene_list_", "=", "[", "'01'", ",", "'01'", ",", "'01'", ",", "'01'", ",", "'01'", ",", "'01'", ",", "\n", "'05'", ",", "'05'", ",", "'05'", ",", "'05'", ",", "'05'", ",", "'05'", ",", "\n", "'04'", ",", "'04'", ",", "'04'", ",", "'04'", ",", "'04'", ",", "'05'", ",", "'04'", "]", "\n", "\n", "\n", "", "elif", "mode", "==", "'multi'", ":", "\n", "\t\t", "cond_list_", "=", "[", "'NIGHT-DAWN-WINTER-WINTERNIGHT-SOFTRAIN'", ",", "\n", "'NIGHT-WINTER-SOFTRAIN-WINTERNIGHT-FOG'", ",", "\n", "'WINTERNIGHT-WINTERNIGHT-NIGHT-SUNSET-WINTER'", ",", "\n", "'WINTERNIGHT-DAWN-NIGHT-SUNSET-WINTER'", ",", "\n", "'SOFTRAIN-NIGHT-FOG-WINTER-WINTERNIGHT'", ",", "\n", "'NIGHT-FOG-FALL-FALL-RAIN'", ",", "\n", "'SPRING-WINTER-NIGHT-DAWN-RAINNIGHT'", ",", "\n", "'WINTER-SUNSET-SPRING-SPRING-FOG'", ",", "\n", "'RAINNIGHT-SOFTRAIN-WINTER-FOG-DAWN'", "]", "\n", "\n", "scene_list_", "=", "[", "'05-01-01-05-04'", ",", "'04-01-04-05-05'", ",", "'01-05-05-04-04'", ",", "\n", "'05-05-05-05-01'", ",", "'05-01-04-05-01'", ",", "'01-04-01-05-05'", ",", "\n", "'04-05-04-01-04'", ",", "'01-04-04-01-05'", ",", "'04-04-05-05-01'", "]", "\n", "\n", "", "trg_dataset_list_", "=", "[", "'SYNTHIA'", "]", "*", "len", "(", "scene_list_", ")", "\n", "trg_dataset_list", "+=", "trg_dataset_list_", "\n", "scene_list", "+=", "scene_list_", "\n", "cond_list", "+=", "cond_list_", "\n", "\n", "return", "None", "\n", "", ""]], "home.repos.pwc.inspect_result.naver_oasis.None.train_on_source.get_arguments": [[59, 121], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_arguments", "(", ")", ":", "\n", "\t", "\"\"\"Parse all the arguments provided from the CLI.\n\n\tReturns:\n\tA list of parsed arguments.\n\t\"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"DeepLab-ResNet Network\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dataset\"", ",", "type", "=", "str", ",", "default", "=", "DATASET", ",", "\n", "help", "=", "\"available options : GTA5, GTA52Cityscapes\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "type", "=", "str", ",", "default", "=", "MODEL", ",", "\n", "help", "=", "\"available options : DeepLab\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--optimizer\"", ",", "type", "=", "str", ",", "default", "=", "'SGD'", ",", "\n", "help", "=", "\"available options : SGD/Adam/RMSprop\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_epochs\"", ",", "type", "=", "int", ",", "default", "=", "NUM_EPOCHS", ",", "\n", "help", "=", "\"Number of training epochs.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch_size\"", ",", "type", "=", "int", ",", "default", "=", "BATCH_SIZE", ",", "\n", "help", "=", "\"Number of images sent to the network in one step.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--iter_size\"", ",", "type", "=", "int", ",", "default", "=", "ITER_SIZE", ",", "\n", "help", "=", "\"Accumulate gradients for ITER_SIZE iterations.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_workers\"", ",", "type", "=", "int", ",", "default", "=", "NUM_WORKERS", ",", "\n", "help", "=", "\"number of workers for multithread dataloading.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data_dir\"", ",", "type", "=", "str", ",", "default", "=", "DATA_DIRECTORY", ",", "\n", "help", "=", "\"Path to the directory containing the source dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data_list\"", ",", "type", "=", "str", ",", "default", "=", "DATA_LIST_PATH", ",", "\n", "help", "=", "\"Path to the file listing the images in the source dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--ignore_label\"", ",", "type", "=", "int", ",", "default", "=", "IGNORE_LABEL", ",", "\n", "help", "=", "\"The index of the label to ignore during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--input_size\"", ",", "type", "=", "str", ",", "default", "=", "INPUT_SIZE", ",", "\n", "help", "=", "\"Comma-separated string with height and width of source images.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--learning_rate\"", ",", "type", "=", "float", ",", "default", "=", "LEARNING_RATE", ",", "\n", "help", "=", "\"Base learning rate for training with polynomial decay.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lambda_seg\"", ",", "type", "=", "float", ",", "default", "=", "LAMBDA_SEG", ",", "\n", "help", "=", "\"lambda_seg.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--momentum\"", ",", "type", "=", "float", ",", "default", "=", "MOMENTUM", ",", "\n", "help", "=", "\"Momentum component of the optimiser.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--not_restore_last\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether to not restore last (FC) layers.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_classes\"", ",", "type", "=", "int", ",", "default", "=", "NUM_CLASSES", ",", "\n", "help", "=", "\"Number of classes to predict (including background).\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--power\"", ",", "type", "=", "float", ",", "default", "=", "POWER", ",", "\n", "help", "=", "\"Decay parameter to compute the learning rate.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--random_mirror\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether to randomly mirror the inputs during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--random_scale\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether to randomly scale the inputs during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "213", ",", "\n", "help", "=", "\"Random seed to have reproducible results.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--snapshot_dir\"", ",", "type", "=", "str", ",", "default", "=", "'./snapshots'", ",", "\n", "help", "=", "\"Where to save snapshots of the model.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--weight_decay\"", ",", "type", "=", "float", ",", "default", "=", "WEIGHT_DECAY", ",", "\n", "help", "=", "\"Regularisation parameter for L2-loss.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--gpu\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "\"choose gpu device.\"", ")", "\n", "\n", "# for domain randomization (DR in the paper)", "\n", "parser", ".", "add_argument", "(", "\"--do_augm\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "\"Whether to perform data augmentation.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--augm_set\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "\"Which data augmentation set to use.\"", ")", "\n", "\n", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.train_on_source.loss_calc": [[132, 140], ["torch.autograd.Variable().cuda", "utils.loss.CrossEntropy2d().cuda", "CrossEntropy2d().cuda.", "torch.autograd.Variable", "utils.loss.CrossEntropy2d", "Variable().cuda.long"], "function", ["None"], ["", "def", "loss_calc", "(", "pred", ",", "label", ",", "gpu", ")", ":", "\n", "\t", "\"\"\"\n\tThis function returns cross entropy loss for semantic segmentation\n\t\"\"\"", "\n", "label", "=", "Variable", "(", "label", ".", "long", "(", ")", ")", ".", "cuda", "(", "gpu", ")", "\n", "criterion", "=", "CrossEntropy2d", "(", ")", ".", "cuda", "(", "gpu", ")", "\n", "\n", "return", "criterion", "(", "pred", ",", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.train_on_source.lr_poly": [[142, 144], ["float"], "function", ["None"], ["", "def", "lr_poly", "(", "base_lr", ",", "iter", ",", "max_iter", ",", "power", ")", ":", "\n", "\t", "return", "base_lr", "*", "(", "(", "1", "-", "float", "(", "iter", ")", "/", "max_iter", ")", "**", "(", "power", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.train_on_source.adjust_learning_rate": [[146, 151], ["train_on_source.lr_poly", "len"], "function", ["home.repos.pwc.inspect_result.naver_oasis.None.train_on_source.lr_poly"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "i_iter", ")", ":", "\n", "\t", "lr", "=", "lr_poly", "(", "args", ".", "learning_rate", ",", "i_iter", ",", "args", ".", "num_steps", ",", "args", ".", "power", ")", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "lr", "\n", "if", "len", "(", "optimizer", ".", "param_groups", ")", ">", "1", ":", "\n", "\t\t", "optimizer", ".", "param_groups", "[", "1", "]", "[", "'lr'", "]", "=", "lr", "*", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.train_on_source.main": [[153, 285], ["numpy.seed", "map", "model.deeplab.Res_Deeplab", "dict", "print", "args.restore_from[].startswith", "model.deeplab.Res_Deeplab.state_dict().copy", "model.deeplab.Res_Deeplab.load_state_dict", "model.deeplab.Res_Deeplab.train", "model.deeplab.Res_Deeplab.cuda", "print", "torch.utils.data.DataLoader", "enumerate", "optim.RMSprop.zero_grad", "torch.Upsample", "range", "args.input_size.split", "torch.utils.model_zoo.load_url", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "i.split", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs", "dataset.gta5_dataset.GTA5", "torch.SGD", "optim.RMSprop.zero_grad", "range", "optim.RMSprop.step", "model.deeplab.Res_Deeplab.state_dict", "args.dataset.upper", "dataset.gta52cityscapes_dataset.GTA52Cityscapes", "model.deeplab.Res_Deeplab.optim_parameters", "torch.Adam", "train_on_source.adjust_learning_rate", "torch.autograd.Variable().cuda", "model.deeplab.Res_Deeplab", "nn.Upsample.", "train_on_source.loss_calc", "loss_calc.backward", "print", "summary_dict[].append", "summary_dict[].append", "summary_dict[].append", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "model.deeplab.Res_Deeplab.optim_parameters", "torch.RMSprop", "ValueError", "next", "loss_calc.detach().cpu().numpy", "model.deeplab.Res_Deeplab.state_dict", "os.join", "open", "pickle.dump", "model.deeplab.Res_Deeplab.state_dict", "os.join", "model.deeplab.Res_Deeplab.optim_parameters", "print", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "exit", "torch.autograd.Variable", "os.join", "model.deeplab.Res_Deeplab.state_dict", "os.join", "open", "pickle.dump", "loss_calc.detach().cpu", "os.join", "loss_calc.detach"], "function", ["home.repos.pwc.inspect_result.naver_oasis.None.deeplab.Res_Deeplab", "home.repos.pwc.inspect_result.naver_oasis.None.deeplab.ResNet.optim_parameters", "home.repos.pwc.inspect_result.naver_oasis.None.train_on_source.adjust_learning_rate", "home.repos.pwc.inspect_result.naver_oasis.None.deeplab.Res_Deeplab", "home.repos.pwc.inspect_result.naver_oasis.None.main_adapt.SolverOps.loss_calc", "home.repos.pwc.inspect_result.naver_oasis.None.deeplab.ResNet.optim_parameters", "home.repos.pwc.inspect_result.naver_oasis.None.deeplab.ResNet.optim_parameters"], ["", "", "def", "main", "(", ")", ":", "\n", "\t", "\"\"\"Create the model and start the training.\"\"\"", "\n", "\n", "npr", ".", "seed", "(", "args", ".", "seed", ")", "\n", "\n", "w", ",", "h", "=", "map", "(", "int", ",", "args", ".", "input_size", ".", "split", "(", "','", ")", ")", "\n", "input_size", "=", "(", "w", ",", "h", ")", "\n", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "gpu", "=", "args", ".", "gpu", "\n", "\n", "# Create network", "\n", "model", "=", "Deeplab", "(", "num_classes", "=", "args", ".", "num_classes", ")", "\n", "\n", "args", ".", "restore_from", "=", "dict", "(", ")", "\n", "args", ".", "restore_from", "[", "'DeeplabMulti'", "]", "=", "'http://vllab.ucmerced.edu/ytsai/CVPR18/DeepLab_resnet_pretrained_init-f81d91e8.pth'", "\n", "\n", "# --- loading pre-trained weights (on ImageNet + COCO) ------------", "\n", "print", "(", "'Loading pre-trained model'", ")", "\n", "if", "args", ".", "restore_from", "[", "'DeeplabMulti'", "]", ".", "startswith", "(", "'http'", ")", ":", "\n", "\t\t", "saved_state_dict", "=", "model_zoo", ".", "load_url", "(", "args", ".", "restore_from", "[", "'DeeplabMulti'", "]", ")", "\n", "", "else", ":", "\n", "\t\t", "saved_state_dict", "=", "torch", ".", "load", "(", "args", ".", "restore_from", "[", "'DeeplabMulti'", "]", ")", "\n", "\n", "", "saved_state_dict_original", "=", "model", ".", "state_dict", "(", ")", ".", "copy", "(", ")", "\n", "for", "i", "in", "saved_state_dict", ":", "\n", "\t\t", "if", "(", "(", "'bn'", "in", "i", ")", "or", "(", "'running_mean'", "in", "i", ")", "or", "(", "'running_var'", "in", "i", ")", ")", ":", "\n", "\t\t\t", "continue", "\n", "# Scale.layer5.conv2d_list.3.weight", "\n", "", "i_parts", "=", "i", ".", "split", "(", "'.'", ")", "\n", "if", "not", "args", ".", "num_classes", "==", "19", "or", "not", "i_parts", "[", "1", "]", "==", "'layer5'", ":", "\n", "\t\t\t", "saved_state_dict_original", "[", "'.'", ".", "join", "(", "i_parts", "[", "1", ":", "]", ")", "]", "=", "saved_state_dict", "[", "i", "]", "\n", "\n", "\n", "# loading model", "\n", "", "", "model", ".", "load_state_dict", "(", "saved_state_dict_original", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "summary_dict", "=", "{", "'loss'", ":", "[", "]", ",", "'iter'", ":", "[", "]", ",", "'lr'", ":", "[", "]", "}", "\n", "\n", "args", ".", "snapshot_dir", "=", "f'./snapshots/{args.dataset}/arch_{args.model}_epochs_{args.num_epochs}_bs_{args.batch_size}_is_{args.iter_size}_'", "+", "f'lr_{args.learning_rate}_mom_{args.momentum}_wd_{args.weight_decay}_opt_{args.optimizer}_'", "+", "f'augm_{args.do_augm}_set_{args.augm_set}'", "\n", "\n", "print", "(", "f'exp = {args.snapshot_dir}'", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "snapshot_dir", ")", ":", "\n", "\t\t", "os", ".", "makedirs", "(", "args", ".", "snapshot_dir", ")", "\n", "\n", "", "if", "args", ".", "dataset", "==", "'GTA5'", ":", "\n", "\t\t", "train_set", "=", "GTA5", "(", "root", "=", "args", ".", "data_dir", ",", "num_epochs", "=", "args", ".", "num_epochs", ",", "\n", "crop_size", "=", "input_size", ",", "mean", "=", "IMG_MEAN", ")", "\n", "", "elif", "args", ".", "dataset", ".", "upper", "(", ")", "==", "'GTA52CITYSCAPES'", ":", "\n", "\t\t", "train_set", "=", "GTA52Cityscapes", "(", "root", "=", "args", ".", "data_dir", ",", "num_epochs", "=", "args", ".", "num_epochs", ",", "\n", "crop_size", "=", "input_size", ",", "mean", "=", "IMG_MEAN", ")", "\n", "\n", "", "trainloader", "=", "data", ".", "DataLoader", "(", "train_set", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "trainloader_iter", "=", "enumerate", "(", "trainloader", ")", "\n", "\n", "# implement model.optim_parameters(args) to handle different models' lr setting", "\n", "\n", "if", "args", ".", "optimizer", "==", "'SGD'", ":", "\n", "\t\t", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "optim_parameters", "(", "args", ")", ",", "\n", "lr", "=", "args", ".", "learning_rate", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "", "elif", "args", ".", "optimizer", "==", "'Adam'", ":", "\n", "\t\t", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "optim_parameters", "(", "args", ")", ",", "lr", "=", "args", ".", "learning_rate", ")", "\n", "\n", "", "elif", "args", ".", "optimizer", "==", "'RMSprop'", ":", "\n", "\t\t", "optimizer", "=", "optim", ".", "RMSprop", "(", "model", ".", "optim_parameters", "(", "args", ")", ",", "lr", "=", "args", ".", "learning_rate", ")", "\n", "\n", "", "else", ":", "\n", "\t\t", "raise", "ValueError", "(", "'Non-supported optimizer'", ")", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "input_size", "[", "1", "]", ",", "input_size", "[", "0", "]", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "args", ".", "num_steps", "=", "args", ".", "num_epochs", "*", "(", "25000", "//", "(", "args", ".", "batch_size", "*", "args", ".", "iter_size", ")", ")", "\n", "\n", "for", "i_iter", "in", "range", "(", "args", ".", "num_steps", ")", ":", "\n", "\n", "\t\t", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "if", "args", ".", "optimizer", "==", "'SGD'", ":", "\n", "\t\t\t", "adjust_learning_rate", "(", "optimizer", ",", "i_iter", ")", "\n", "\n", "", "for", "sub_i", "in", "range", "(", "args", ".", "iter_size", ")", ":", "\n", "\n", "\t\t\t", "try", ":", "\n", "\t\t\t\t", "_", ",", "batch", "=", "next", "(", "trainloader_iter", ")", "\n", "", "except", ":", "\n", "\t\t\t\t", "print", "(", "'End of training.'", ")", "\n", "print", "(", "'Saving model.'", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "osp", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'GTA.pth'", ")", ")", "\n", "with", "open", "(", "osp", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'summary.pkl'", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "\t\t\t\t\t", "pickle", ".", "dump", "(", "summary_dict", ",", "f", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "exit", "(", ")", "\n", "\n", "", "images", ",", "labels", ",", "_", ",", "_", "=", "batch", "\n", "images", "=", "Variable", "(", "images", ")", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "\n", "pred", "=", "model", "(", "images", ")", "\n", "pred", "=", "interp", "(", "pred", ")", "\n", "loss", "=", "loss_calc", "(", "pred", ",", "labels", ",", "args", ".", "gpu", ")", "\n", "\n", "# proper normalization", "\n", "loss", "=", "loss", "/", "args", ".", "iter_size", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "i_iter", "%", "50", "==", "0", ":", "\n", "\t\t\t", "lr_", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "print", "(", "f'iter = {i_iter:8d}/{args.num_steps:8d}, loss = {loss:.3f}, lr = {lr_:.5f}'", ")", "\n", "\n", "summary_dict", "[", "'iter'", "]", ".", "append", "(", "i_iter", ")", "\n", "summary_dict", "[", "'lr'", "]", ".", "append", "(", "lr_", ")", "\n", "summary_dict", "[", "'loss'", "]", ".", "append", "(", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "if", "(", "i_iter", "%", "10000", ")", "==", "0", ":", "\n", "\t\t\t", "print", "(", "'Saving model.'", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "osp", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'GTA.pth'", ")", ")", "\n", "with", "open", "(", "osp", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'summary.pkl'", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "\t\t\t\t", "pickle", ".", "dump", "(", "summary_dict", ",", "f", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "", "if", "(", "i_iter", "%", "25000", ")", "==", "0", ":", "\n", "\t\t\t", "print", "(", "'Backing up model.'", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "osp", ".", "join", "(", "args", ".", "snapshot_dir", ",", "f'GTA_{i_iter}.pth'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.count_images_per_seq.get_arguments": [[22, 38], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_arguments", "(", ")", ":", "\n", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"User input\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--trg_dataset\"", ",", "type", "=", "str", ",", "default", "=", "'Cityscapes'", ",", "\n", "help", "=", "\"Which target dataset to transfer to {VirtualKITTY2, SYNTHIA, Cityscapes, ACDC}\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--trg_data_dir\"", ",", "type", "=", "str", ",", "default", "=", "'/tmp-network/data/vision/cityscapes/cityscapes-1/'", ",", "\n", "help", "=", "\"Directory of target dataset {VirtualKITTY2, SYNTHIA, Cityscapes}\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--city\"", ",", "type", "=", "str", ",", "default", "=", "'aachen'", ",", "\n", "help", "=", "\"City for CityScapes\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--scene\"", ",", "type", "=", "str", ",", "default", "=", "'01'", ",", "\n", "help", "=", "\"Scene for KITTY (and SYNTHIA)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--cond\"", ",", "type", "=", "str", ",", "default", "=", "'clone'", ",", "\n", "help", "=", "\"Condition for KITTY (and SYNTHIA)\"", ")", "\n", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.count_images_per_seq.main": [[42, 83], ["map", "torch.utils.data.DataLoader", "os.path.join", "args.input_size.split", "len", "args.scene.split", "args.cond.split", "dataset.cityscapes_dataset.Cityscapes", "open", "pickle.dump", "args.scene.split", "dataset.synthia_dataset.SYNTHIA", "dataset.acdc_dataset.ACDC"], "function", ["None"], ["def", "main", "(", ")", ":", "\n", "\t", "\"\"\"Create the model and start the training.\"\"\"", "\n", "\n", "input_size", "=", "'1280,720'", "\n", "w", ",", "h", "=", "map", "(", "int", ",", "args", ".", "input_size", ".", "split", "(", "','", ")", ")", "\n", "args", ".", "input_size", "=", "(", "w", ",", "h", ")", "\n", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "if", "len", "(", "args", ".", "scene", ".", "split", "(", "'-'", ")", ")", ">", "1", ":", "\n", "\t\t", "scene_list", "=", "args", ".", "scene", ".", "split", "(", "'-'", ")", "\n", "cond_list", "=", "args", ".", "cond", ".", "split", "(", "'-'", ")", "\n", "", "else", ":", "\n", "\t\t", "scene_list", "=", "[", "args", ".", "scene", "]", "\n", "cond_list", "=", "[", "args", ".", "cond", "]", "\n", "\n", "", "if", "args", ".", "trg_dataset", "==", "'Cityscapes'", ":", "\n", "\t\t", "trg_parent_set", "=", "Cityscapes", "(", "\n", "CITYSCAPES_ROOT", ",", "WEATHER_CITYSCAPES_ROOT", ",", "scene_list", ",", "cond_list", ",", "\n", "crop_size", "=", "args", ".", "input_size", ",", "mean", "=", "IMG_MEAN", ",", "\n", "alpha", "=", "0.02", ",", "beta", "=", "0.01", ",", "dropsize", "=", "0.005", ",", "pattern", "=", "3", ")", "\n", "\n", "", "elif", "args", ".", "trg_dataset", "==", "'SYNTHIA'", ":", "\n", "\t\t", "trg_parent_set", "=", "SYNTHIA", "(", "\n", "SYNTHIA_ROOT", ",", "scene_list", ",", "cond_list", ",", "\n", "camera_id", "=", "'0'", ",", "crop_size", "=", "args", ".", "input_size", ",", "mean", "=", "IMG_MEAN", ",", "\n", "set", "=", "'all'", ",", "num_images", "=", "300", ")", "\n", "\n", "", "elif", "args", ".", "trg_dataset", "==", "'ACDC'", ":", "\n", "\t\t", "trg_parent_set", "=", "ACDC", "(", "\n", "ACDC_ROOT", ",", "scene_list", ",", "cond_list", ",", "crop_size", "=", "args", ".", "input_size", ",", "mean", "=", "IMG_MEAN", ")", "\n", "\n", "", "trg_train_loader", "=", "data", ".", "DataLoader", "(", "trg_parent_set", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ")", "\n", "\n", "summary_file_path", "=", "os", ".", "path", ".", "join", "(", "\n", "f'./dataset'", ",", "f'{args.trg_dataset}_num_images_per_seq'", ",", "\n", "f'{args.trg_dataset}_{args.scene}_{args.cond}_num_images_per_seq.pkl'", ")", "\n", "\n", "with", "open", "(", "summary_file_path", ",", "'wb'", ")", "as", "f", ":", "\n", "\t\t", "pickle", ".", "dump", "(", "trg_parent_set", ".", "num_imgs_per_seq", ",", "f", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.main_adapt.SolverOps.__init__": [[57, 97], ["numpy.int", "numpy.int", "numpy.array", "numpy.array", "print", "image_helpers.ImageOps", "map", "map", "open", "json.load", "len", "len", "ValueError", "ValueError", "main_adapt.SolverOps.args.input_size_target.split", "main_adapt.SolverOps.args.input_size_source.split", "main_adapt.SolverOps.args.cond.split", "main_adapt.SolverOps.args.scene.split"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "\n", "\t\t", "\"\"\"\n\t\t\"args\" contains all the input required to\n\t\tspecify the experiments. See main() function.\n\t\t\"\"\"", "\n", "\n", "self", ".", "args", "=", "args", "\n", "\n", "# from the AdaptSegnet repo", "\n", "with", "open", "(", "'./dataset/cityscapes_list/info.json'", ",", "'r'", ")", "as", "f", ":", "\n", "\t\t\t", "info", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "self", ".", "num_classes", "=", "np", ".", "int", "(", "info", "[", "'classes'", "]", ")", "\n", "self", ".", "name_classes", "=", "np", ".", "array", "(", "info", "[", "'label'", "]", ",", "dtype", "=", "np", ".", "str", ")", "\n", "\n", "print", "(", "'Num classes'", ",", "self", ".", "num_classes", ")", "\n", "\n", "if", "len", "(", "self", ".", "args", ".", "cond", ".", "split", "(", "'-'", ")", ")", "!=", "len", "(", "self", ".", "args", ".", "scene", ".", "split", "(", "'-'", ")", ")", ":", "\n", "\t\t\t", "raise", "ValueError", "(", "\n", "'If using sequences, the number of conditions'", "+", "f'must match the number of scenes.'", ")", "\n", "\n", "# checking whether the adaptation mode is supported", "\n", "", "if", "self", ".", "args", ".", "adapt_mode", "not", "in", "[", "\n", "'batch-norm'", ",", "'naive-batch-norm'", ",", "'no-adaptation'", ",", "'tent'", ",", "\n", "'naive-tent'", ",", "'pseudo-labels'", ",", "'naive-pseudo-labels'", ",", "\n", "'class-reset-pseudo-labels'", ",", "'oracle-reset-pseudo-labels'", ",", "\n", "'class-reset-batch-norm'", ",", "'class-reset-tent'", ",", "\n", "'oracle-reset-batch-norm'", ",", "'oracle-reset-tent'", "\n", "]", ":", "\n", "\t\t\t", "raise", "ValueError", "(", "f'Unknown \"adapt_mode\" [{self.args.adapt_mode}]'", ")", "\n", "\n", "", "self", ".", "image_ops", "=", "ImageOps", "(", ")", "\n", "\n", "w_trg", ",", "h_trg", "=", "map", "(", "int", ",", "self", ".", "args", ".", "input_size_target", ".", "split", "(", "','", ")", ")", "\n", "self", ".", "input_size_target", "=", "(", "w_trg", ",", "h_trg", ")", "\n", "\n", "w_src", ",", "h_src", "=", "map", "(", "int", ",", "self", ".", "args", ".", "input_size_source", ".", "split", "(", "','", ")", ")", "\n", "self", ".", "input_size_source", "=", "(", "w_src", ",", "h_src", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.main_adapt.SolverOps.adapt": [[99, 486], ["torch.SGD", "torch.SGD", "torch.SGD", "torch.SGD", "torch.SGD", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "len", "numpy.any", "numpy.any", "enumerate", "print", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "main_adapt.SolverOps.model.optim_parameters", "print", "main_adapt.SolverOps.model.eval", "print", "copy.deepcopy", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "main_adapt.SolverOps.model.eval", "main_adapt.SolverOps.model", "torch.Upsample.cpu().data[].numpy", "numpy.asarray.transpose", "numpy.asarray", "numpy.asarray", "torch.Upsample.cpu().data[].numpy", "PIL.Image.fromarray.transpose", "numpy.asarray", "numpy.asarray", "summary_dict[].append", "summary_dict[].append", "summary_dict[].append", "summary_dict[].append", "summary_dict[].append", "summary_dict[].append", "summary_dict[].append", "summary_dict[].append", "summary_dict[].append", "summary_dict[].append", "summary_dict[].append", "summary_dict[].append", "summary_dict[].append", "summary_dict[].append", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.array().mean", "numpy.array().mean", "summary_dict[].append", "summary_dict[].append", "numpy.nanmean", "numpy.nanmean", "numpy.nanmean", "numpy.nanmean", "main_adapt.SolverOps.model.state_dict", "os.path.join", "open", "pickle.dump", "open", "print", "numpy.argmax", "numpy.argmax", "numpy.squeeze().astype", "numpy.squeeze().astype", "metrics_helpers.compute_mIoU_single_image", "metrics_helpers.compute_acc_single_image", "main_adapt.SolverOps.model.train", "main_adapt.SolverOps.model.eval", "main_adapt.SolverOps.model", "main_adapt.SolverOps.model", "torch.Upsample.cpu().data[].numpy", "numpy.asarray.transpose", "numpy.asarray", "numpy.asarray", "numpy.unique", "numpy.unique", "pred_id.tolist.tolist.tolist", "numpy.unique", "numpy.unique", "numpy.copy", "numpy.copy", "numpy.nanmean", "numpy.nanmean", "numpy.argmax", "numpy.argmax", "len", "len", "main_adapt.SolverOps.args.adapt_mode.startswith", "main_adapt.SolverOps.args.adapt_mode.startswith", "numpy.mean", "numpy.mean", "numpy.array().mean", "numpy.array().mean", "main_adapt.SolverOps.load_model", "main_adapt.SolverOps.args.adapt_mode.startswith", "print", "main_adapt.SolverOps.image_ops.process_image_for_saving", "main_adapt.SolverOps.image_ops.colorize_mask", "main_adapt.SolverOps.image_ops.colorize_mask", "PIL.Image.fromarray", "main_adapt.SolverOps.image_ops.colorize_mask", "main_adapt.SolverOps.image_ops.save_concat_image", "PIL.Image.fromarray.save", "main_adapt.SolverOps.save", "os.path.join", "os.path.join", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "range", "numpy.argmax", "numpy.argmax", "metrics_helpers.compute_mIoU_single_image", "metrics_helpers.compute_acc_single_image", "main_adapt.SolverOps.args.adapt_mode.startswith", "main_adapt.SolverOps.args.adapt_mode.startswith", "main_adapt.SolverOps.model_bkp", "torch.Upsample.cpu().data[].numpy", "numpy.asarray.transpose", "numpy.asarray", "numpy.asarray", "metrics_helpers.compute_mIoU_single_image", "metrics_helpers.compute_acc_single_image", "numpy.copy", "numpy.copy", "numpy.nanmean", "numpy.nanmean", "numpy.unique", "numpy.unique", "pred_id_bkp.tolist.tolist.tolist", "numpy.array", "numpy.array", "main_adapt.SolverOps.args.adapt_mode.startswith", "trg_image_name[].split", "os.path.join", "os.path.join", "numpy.squeeze", "numpy.squeeze", "main_adapt.SolverOps.model", "torch.SGD.zero_grad", "loss.backward", "torch.SGD.step", "main_adapt.SolverOps.model", "ValueError", "range", "numpy.delete", "numpy.delete", "numpy.argmax", "numpy.argmax", "numpy.array", "numpy.array", "print", "main_adapt.SolverOps.model.load_state_dict", "torch.Upsample.cpu", "numpy.squeeze().astype.detach().cpu().numpy", "main_adapt.SolverOps.compute_pseudo_labels", "main_adapt.SolverOps.loss_calc", "range", "numpy.arange", "numpy.arange", "numpy.delete", "numpy.delete", "range", "torch.Upsample.cpu", "main_adapt.SolverOps.model_bkp.state_dict", "print", "main_adapt.SolverOps.model.load_state_dict", "main_adapt.SolverOps.compute_output_entropy", "RuntimeError", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "main_adapt.SolverOps.model", "torch.Upsample.", "main_adapt.SolverOps.loss_calc", "torch.Upsample.cpu", "pred_id.tolist.tolist.index", "numpy.arange", "numpy.arange", "main_adapt.SolverOps.model_bkp.state_dict", "torch.Upsample.", "numpy.squeeze().astype.detach().cpu", "next", "torch.Upsample.cpu", "pred_id_bkp.tolist.tolist.index", "torch.Upsample.", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "enumerate", "next", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.Upsample.", "numpy.squeeze().astype.detach", "torch.Upsample."], "methods", ["home.repos.pwc.inspect_result.naver_oasis.None.deeplab.ResNet.optim_parameters", "home.repos.pwc.inspect_result.naver_oasis.None.metrics_helpers.compute_mIoU_single_image", "home.repos.pwc.inspect_result.naver_oasis.None.metrics_helpers.compute_acc_single_image", "home.repos.pwc.inspect_result.naver_oasis.None.main_adapt.SolverOps.load_model", "home.repos.pwc.inspect_result.naver_oasis.None.image_helpers.ImageOps.process_image_for_saving", "home.repos.pwc.inspect_result.naver_oasis.None.image_helpers.ImageOps.colorize_mask", "home.repos.pwc.inspect_result.naver_oasis.None.image_helpers.ImageOps.colorize_mask", "home.repos.pwc.inspect_result.naver_oasis.None.image_helpers.ImageOps.colorize_mask", "home.repos.pwc.inspect_result.naver_oasis.None.image_helpers.ImageOps.save_concat_image", "home.repos.pwc.inspect_result.naver_oasis.None.metrics_helpers.compute_mIoU_single_image", "home.repos.pwc.inspect_result.naver_oasis.None.metrics_helpers.compute_acc_single_image", "home.repos.pwc.inspect_result.naver_oasis.None.metrics_helpers.compute_mIoU_single_image", "home.repos.pwc.inspect_result.naver_oasis.None.metrics_helpers.compute_acc_single_image", "home.repos.pwc.inspect_result.naver_oasis.None.main_adapt.SolverOps.compute_pseudo_labels", "home.repos.pwc.inspect_result.naver_oasis.None.main_adapt.SolverOps.loss_calc", "home.repos.pwc.inspect_result.naver_oasis.None.main_adapt.SolverOps.compute_output_entropy", "home.repos.pwc.inspect_result.naver_oasis.None.main_adapt.SolverOps.loss_calc"], ["", "def", "adapt", "(", "self", ")", ":", "\n", "\n", "\t\t", "\"\"\"\n\t\tMethod to adapt a model sample by sample on a given\n\t\tsequence. All parameters setup by the user (args).\n\t\t\"\"\"", "\n", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "gpu", "=", "self", ".", "args", ".", "gpu", "\n", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "summary_dict", "=", "{", "\n", "'loss'", ":", "[", "]", ",", "\n", "'iter'", ":", "[", "]", ",", "\n", "'lr'", ":", "[", "]", ",", "\n", "'pixel_acc_init'", ":", "[", "]", ",", "\n", "'pixel_acc_final'", ":", "[", "]", ",", "\n", "'mean_acc_init'", ":", "[", "]", ",", "\n", "'mean_acc_final'", ":", "[", "]", ",", "\n", "'mious_init'", ":", "[", "]", ",", "\n", "'mious_final'", ":", "[", "]", ",", "\n", "'pixel_acc_all'", ":", "[", "]", ",", "\n", "'mean_acc_all'", ":", "[", "]", ",", "\n", "'miou_all'", ":", "[", "]", ",", "\n", "'avg_class_miou'", ":", "[", "]", ",", "\n", "'avg_class_miou_bkp'", ":", "[", "]", ",", "\n", "'pred_count_all'", ":", "[", "]", ",", "\n", "'pred_count_all_ma'", ":", "[", "]", ",", "\n", "'wass_dist'", ":", "[", "]", ",", "\n", "'wass_dist_ma'", ":", "[", "]", ",", "\n", "'pred_count_all_bkp'", ":", "[", "]", ",", "\n", "'pred_count_all_ma_bkp'", ":", "[", "]", ",", "\n", "'wass_dist_bkp'", ":", "[", "]", ",", "\n", "'wass_dist_ma_bkp'", ":", "[", "]", ",", "\n", "'unique_classes'", ":", "[", "]", ",", "\n", "'unique_classes_bkp'", ":", "[", "]", ",", "\n", "'reset'", ":", "[", "]", "\n", "}", "\n", "\n", "bn_stats_dict", "=", "{", "}", "\n", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "self", ".", "model", ".", "optim_parameters", "(", "self", ".", "args", ")", ",", "lr", "=", "self", ".", "args", ".", "learning_rate", ")", "\n", "\n", "interp_src", "=", "nn", ".", "Upsample", "(", "\n", "size", "=", "(", "self", ".", "input_size_source", "[", "1", "]", ",", "self", ".", "input_size_source", "[", "0", "]", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "interp_trg", "=", "nn", ".", "Upsample", "(", "\n", "size", "=", "(", "self", ".", "input_size_target", "[", "1", "]", ",", "self", ".", "input_size_target", "[", "0", "]", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "interp_trg_big", "=", "nn", ".", "Upsample", "(", "\n", "size", "=", "(", "self", ".", "input_size_target", "[", "1", "]", "*", "2", ",", "self", ".", "input_size_target", "[", "0", "]", "*", "2", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "self", ".", "args", ".", "num_steps", "=", "len", "(", "self", ".", "trg_train_loader", ")", "\n", "\n", "if", "self", ".", "args", ".", "adapt_mode", "==", "'no-adaptation'", ":", "\n", "\t\t\t", "print", "(", "'NOT ADAPTING, JUST EVALUATING'", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "\n", "", "if", "np", ".", "any", "(", "[", "_", "in", "self", ".", "args", ".", "adapt_mode", "\n", "for", "_", "in", "[", "'class-reset'", ",", "'oracle-reset'", "]", "]", ")", ":", "\n", "\t\t\t", "print", "(", "'Model backup'", ")", "\n", "self", ".", "model_bkp", "=", "copy", ".", "deepcopy", "(", "self", ".", "model", ")", "\n", "\n", "", "reset_bool", "=", "False", "\n", "\n", "for", "i_iter", ",", "trg_batch", "in", "enumerate", "(", "self", ".", "trg_train_loader", ")", ":", "\n", "\n", "\t\t\t", "trg_image", ",", "trg_labels_ONLY_FOR_EVAL", ",", "_", ",", "trg_image_name", "=", "trg_batch", "\n", "trg_image", "=", "Variable", "(", "trg_image", ")", ".", "cuda", "(", "self", ".", "args", ".", "gpu", ")", "\n", "\n", "# forward pass on eval - just to track initial metrics for this sample", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "trg_pred", "=", "self", ".", "model", "(", "trg_image", ")", "\n", "\n", "# computing initial miou", "\n", "output", "=", "interp_trg", "(", "trg_pred", ")", ".", "cpu", "(", ")", ".", "data", "[", "0", "]", ".", "numpy", "(", ")", "\n", "output", "=", "output", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "output", "=", "np", ".", "asarray", "(", "np", ".", "argmax", "(", "output", ",", "axis", "=", "2", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "if", "trg_labels_ONLY_FOR_EVAL", "is", "not", "None", ":", "\n", "\t\t\t\t", "trg_labels_ONLY_FOR_EVAL", "=", "np", ".", "squeeze", "(", "\n", "trg_labels_ONLY_FOR_EVAL", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "mious_init", "=", "compute_mIoU_single_image", "(", "\n", "trg_labels_ONLY_FOR_EVAL", ",", "output", ",", "self", ".", "num_classes", ",", "self", ".", "name_classes", ")", "\n", "pixel_acc_init", ",", "mean_acc_init", "=", "compute_acc_single_image", "(", "\n", "trg_labels_ONLY_FOR_EVAL", ",", "output", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "mious_init", "=", "None", "\n", "pixel_acc_init", "=", "None", "\n", "mean_acc_init", "=", "None", "\n", "\n", "#output_ = trg_pred.argmax(1).cpu().numpy().squeeze()", "\n", "\n", "####### TRAINING/ADAPTING #########################################", "\n", "", "if", "self", ".", "args", ".", "adapt_mode", "!=", "'no-adaptation'", ":", "\n", "\t\t\t\t", "self", ".", "model", ".", "train", "(", ")", "\n", "if", "self", ".", "args", ".", "adapt_mode", "in", "[", "\n", "'tent'", ",", "'naive-tent'", ",", "'pseudo-labels'", ",", "\n", "'naive-pseudo-labels'", ",", "'class-reset-pseudo-labels'", ",", "\n", "'oracle-reset-pseudo-labels'", ",", "\n", "'class-reset-tent'", ",", "'oracle-reset-tent'", "\n", "]", ":", "\n", "# updating model parameters in training iterations", "\n", "\t\t\t\t\t", "for", "_", "in", "range", "(", "args", ".", "adapt_iters", ")", ":", "\n", "# forward pass, BN statistics are updated", "\n", "\t\t\t\t\t\t", "trg_pred", "=", "self", ".", "model", "(", "trg_image", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "if", "args", ".", "adapt_mode", "in", "[", "\n", "'pseudo-labels'", ",", "'naive-pseudo-labels'", ",", "\n", "'oracle-reset-pseudo-labels'", ",", "\n", "'class-reset-pseudo-labels'", "\n", "]", ":", "\n", "\t\t\t\t\t\t\t", "trg_psd_labels", "=", "self", ".", "compute_pseudo_labels", "(", "\n", "trg_pred", ",", "args", ".", "pseudo_labels_mode", ",", "\n", "args", ".", "pseudo_labels_thrs", ")", "\n", "trg_loss", "=", "self", ".", "loss_calc", "(", "\n", "trg_pred", ",", "trg_psd_labels", ",", "args", ".", "gpu", ")", "\n", "\n", "", "elif", "args", ".", "adapt_mode", "in", "[", "\n", "'tent'", ",", "'naive-tent'", ",", "'class-reset-tent'", ",", "\n", "'oracle-reset-tent'", "]", ":", "\n", "\t\t\t\t\t\t\t", "trg_loss", "=", "self", ".", "compute_output_entropy", "(", "\n", "trg_pred", ",", "avg_batch", "=", "True", ")", "\n", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t\t", "raise", "RuntimeError", "(", "\n", "f'Unknown args.adapt_mode [{args.adapt_mode}]'", ")", "\n", "\n", "# if also using source samples", "\n", "", "if", "args", ".", "src_iters", ">", "0", ":", "\n", "\t\t\t\t\t\t\t", "src_loss", "=", "0", "\n", "for", "_", "in", "range", "(", "args", ".", "src_iters", ")", ":", "\n", "\t\t\t\t\t\t\t\t", "try", ":", "\n", "\t\t\t\t\t\t\t\t\t", "_", ",", "src_batch", "=", "next", "(", "self", ".", "src_train_loader_iter", ")", "\n", "", "except", ":", "\n", "# we create another source iterator, if finished", "\n", "\t\t\t\t\t\t\t\t\t", "del", "(", "self", ".", "src_train_loader_iter", ")", "\n", "del", "(", "self", ".", "src_train_loader", ")", "\n", "self", ".", "src_train_loader", "=", "data", ".", "DataLoader", "(", "\n", "self", ".", "src_parent_set", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ")", "\n", "# ---", "\n", "self", ".", "src_train_loader_iter", "=", "enumerate", "(", "self", ".", "src_train_loader", ")", "\n", "_", ",", "src_batch", "=", "next", "(", "self", ".", "src_train_loader_iter", ")", "\n", "\n", "", "src_images", ",", "src_labels", ",", "_", ",", "_", "=", "src_batch", "\n", "src_images", "=", "Variable", "(", "src_images", ")", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "\n", "# computing source loss with ground truth", "\n", "src_pred", "=", "self", ".", "model", "(", "src_images", ")", "\n", "src_pred", "=", "interp_src", "(", "src_pred", ")", "\n", "\n", "src_loss", "+=", "self", ".", "loss_calc", "(", "\n", "src_pred", ",", "src_labels", ",", "self", ".", "args", ".", "gpu", ")", "\n", "\n", "# summing everything up", "\n", "", "", "if", "args", ".", "src_iters", "==", "0", ":", "\n", "\t\t\t\t\t\t\t", "loss", "=", "trg_loss", "\n", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t\t", "loss", "=", "trg_loss", "+", "args", ".", "src_iters", "*", "src_loss", "\n", "loss", "=", "loss", "/", "(", "1", "+", "args", ".", "src_iters", ")", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "", "elif", "self", ".", "args", ".", "adapt_mode", "in", "[", "'batch-norm'", ",", "'naive-batch-norm'", "]", ":", "\n", "# simple forward pass, where BN stats are updated", "\n", "\t\t\t\t\t", "trg_pred", "=", "self", ".", "model", "(", "trg_image", ")", "\n", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "raise", "ValueError", "(", "f'Unknown adapt_mode {self.args.adapt_mode}'", ")", "\n", "\n", "\n", "####### EVALUATING ############################################", "\n", "# computing final metrics for the current image - if adaptation", "\n", "", "", "if", "self", ".", "args", ".", "adapt_mode", "!=", "'no-adaptation'", ":", "\n", "\t\t\t\t", "self", ".", "model", ".", "eval", "(", ")", "\n", "trg_pred", "=", "self", ".", "model", "(", "trg_image", ")", "\n", "trg_feat", "=", "self", ".", "model", "(", "trg_image", ",", "extract_features", "=", "True", ")", "\n", "\n", "output", "=", "interp_trg", "(", "trg_pred", ")", ".", "cpu", "(", ")", ".", "data", "[", "0", "]", ".", "numpy", "(", ")", "\n", "output", "=", "output", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "output", "=", "np", ".", "asarray", "(", "np", ".", "argmax", "(", "output", ",", "axis", "=", "2", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "# computing histogram of predictions made by the model", "\n", "pred_id", ",", "pred_count", "=", "np", ".", "unique", "(", "output", ",", "return_counts", "=", "True", ")", "\n", "pred_id", "=", "pred_id", ".", "tolist", "(", ")", "\n", "pred_count", "=", "[", "pred_count", "[", "pred_id", ".", "index", "(", "n", ")", "]", "\n", "if", "n", "in", "pred_id", "else", "0", "for", "n", "in", "range", "(", "19", ")", "]", "\n", "\n", "# computing classes present in the image - for mIoU computation", "\n", "image_gt", "=", "np", ".", "unique", "(", "trg_labels_ONLY_FOR_EVAL", ")", "\n", "image_gt", "=", "image_gt", "[", "image_gt", "!=", "255", "]", "\n", "\n", "if", "trg_labels_ONLY_FOR_EVAL", "is", "not", "None", ":", "\n", "\t\t\t\t\t", "mious_final", "=", "compute_mIoU_single_image", "(", "\n", "trg_labels_ONLY_FOR_EVAL", ",", "output", ",", "\n", "self", ".", "num_classes", ",", "self", ".", "name_classes", ")", "\n", "pixel_acc_final", ",", "mean_acc_final", "=", "compute_acc_single_image", "(", "\n", "trg_labels_ONLY_FOR_EVAL", ",", "output", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "mious_final", "=", "None", "\n", "pixel_acc_final", "=", "None", "\n", "mean_acc_final", "=", "None", "\n", "\n", "# computing the average mious for the last three samples", "\n", "", "avg_class_miou_", "=", "np", ".", "copy", "(", "mious_final", ")", "\n", "avg_class_miou_", "[", "np", ".", "delete", "(", "np", ".", "arange", "(", "19", ")", ",", "image_gt", ")", "]", "=", "np", ".", "nan", "\n", "avg_class_miou", "=", "np", ".", "nanmean", "(", "avg_class_miou_", ")", "\n", "\n", "if", "self", ".", "args", ".", "adapt_mode", ".", "startswith", "(", "'class-reset'", ")", "or", "self", ".", "args", ".", "adapt_mode", ".", "startswith", "(", "'oracle-reset'", ")", ":", "\n", "\n", "\t\t\t\t\t", "trg_pred_bkp", "=", "self", ".", "model_bkp", "(", "trg_image", ")", "\n", "output_bkp", "=", "interp_trg", "(", "trg_pred_bkp", ")", ".", "cpu", "(", ")", ".", "data", "[", "0", "]", ".", "numpy", "(", ")", "\n", "output_bkp", "=", "output_bkp", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "output_bkp", "=", "np", ".", "asarray", "(", "np", ".", "argmax", "(", "output_bkp", ",", "axis", "=", "2", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "mious_final_bkp", "=", "compute_mIoU_single_image", "(", "\n", "trg_labels_ONLY_FOR_EVAL", ",", "output_bkp", ",", "\n", "self", ".", "num_classes", ",", "self", ".", "name_classes", ")", "\n", "pixel_acc_final_bkp", ",", "mean_acc_final_bkp", "=", "compute_acc_single_image", "(", "\n", "trg_labels_ONLY_FOR_EVAL", ",", "output_bkp", ")", "\n", "\n", "# computing the average mious for the last three samples", "\n", "avg_class_miou_bkp_", "=", "np", ".", "copy", "(", "mious_final_bkp", ")", "\n", "avg_class_miou_bkp_", "[", "np", ".", "delete", "(", "np", ".", "arange", "(", "19", ")", ",", "image_gt", ")", "]", "=", "np", ".", "nan", "\n", "avg_class_miou_bkp", "=", "np", ".", "nanmean", "(", "avg_class_miou_bkp_", ")", "\n", "\n", "# computing histogram of predictions made by the model", "\n", "pred_id_bkp", ",", "pred_count_bkp", "=", "np", ".", "unique", "(", "output_bkp", ",", "return_counts", "=", "True", ")", "\n", "pred_id_bkp", "=", "pred_id_bkp", ".", "tolist", "(", ")", "\n", "pred_count_bkp", "=", "[", "\n", "pred_count_bkp", "[", "pred_id_bkp", ".", "index", "(", "n", ")", "]", "if", "n", "in", "pred_id_bkp", "else", "0", "\n", "for", "n", "in", "range", "(", "19", ")", "]", "\n", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "avg_class_miou_bkp", "=", "np", ".", "nan", "\n", "pred_count_bkp", "=", "[", "np", ".", "nan", "]", "\n", "pred_id_bkp", "=", "[", "np", ".", "nan", "]", "\n", "\n", "", "", "else", ":", "\n", "# if 'no-adaptation', nothing has changed, so we avoid computations", "\n", "\t\t\t\t", "mious_final", "=", "mious_init", "\n", "pixel_acc_final", "=", "pixel_acc_init", "\n", "mean_acc_final", "=", "mean_acc_init", "\n", "avg_class_miou", "=", "np", ".", "nan", "\n", "avg_class_miou_bkp", "=", "np", ".", "nan", "\n", "pred_count", "=", "[", "np", ".", "nan", "]", "\n", "pred_count_bkp", "=", "[", "np", ".", "nan", "]", "\n", "pred_id_bkp", "=", "[", "np", ".", "nan", "]", "\n", "pred_id", "=", "[", "np", ".", "nan", "]", "\n", "\n", "# for saving predictions and re-compute mIoU at the end", "\n", "", "output_big", "=", "interp_trg_big", "(", "trg_pred", ")", ".", "cpu", "(", ")", ".", "data", "[", "0", "]", ".", "numpy", "(", ")", "\n", "output_big", "=", "output_big", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "output_big", "=", "np", ".", "asarray", "(", "np", ".", "argmax", "(", "output_big", ",", "axis", "=", "2", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "# appending stuff to dict", "\n", "summary_dict", "[", "'iter'", "]", ".", "append", "(", "i_iter", ")", "\n", "summary_dict", "[", "'reset'", "]", ".", "append", "(", "reset_bool", ")", "\n", "summary_dict", "[", "'mious_init'", "]", ".", "append", "(", "mious_init", ")", "\n", "summary_dict", "[", "'mious_final'", "]", ".", "append", "(", "mious_final", ")", "\n", "summary_dict", "[", "'pixel_acc_init'", "]", ".", "append", "(", "pixel_acc_init", ")", "\n", "summary_dict", "[", "'pixel_acc_final'", "]", ".", "append", "(", "pixel_acc_final", ")", "\n", "summary_dict", "[", "'mean_acc_init'", "]", ".", "append", "(", "mean_acc_init", ")", "\n", "summary_dict", "[", "'mean_acc_final'", "]", ".", "append", "(", "mean_acc_final", ")", "\n", "summary_dict", "[", "'unique_classes'", "]", ".", "append", "(", "len", "(", "pred_id", ")", ")", "\n", "summary_dict", "[", "'unique_classes_bkp'", "]", ".", "append", "(", "len", "(", "pred_id_bkp", ")", ")", "\n", "summary_dict", "[", "'avg_class_miou'", "]", ".", "append", "(", "avg_class_miou", ")", "\n", "summary_dict", "[", "'pred_count_all'", "]", ".", "append", "(", "pred_count", ")", "\n", "summary_dict", "[", "'avg_class_miou_bkp'", "]", ".", "append", "(", "avg_class_miou_bkp", ")", "\n", "summary_dict", "[", "'pred_count_all_bkp'", "]", ".", "append", "(", "pred_count_bkp", ")", "\n", "\n", "# computing unique classes, to perform class-reset in case of forgetting", "\n", "avg_unique_classes", "=", "np", ".", "mean", "(", "summary_dict", "[", "'unique_classes'", "]", "[", "-", "self", ".", "args", ".", "buffer_size", ":", "]", ")", "\n", "avg_unique_classes_bkp", "=", "np", ".", "mean", "(", "summary_dict", "[", "'unique_classes_bkp'", "]", "[", "-", "self", ".", "args", ".", "buffer_size", ":", "]", ")", "\n", "\n", "# computing moving average mIoU performance and pred count", "\n", "avg_class_miou_ma", "=", "np", ".", "mean", "(", "summary_dict", "[", "'avg_class_miou'", "]", "[", "-", "self", ".", "args", ".", "buffer_size", ":", "]", ")", "\n", "pred_count_ma", "=", "np", ".", "array", "(", "summary_dict", "[", "'pred_count_all'", "]", "[", "-", "self", ".", "args", ".", "buffer_size", ":", "]", ")", ".", "mean", "(", "0", ")", "\n", "\n", "# computing same values for bkp model", "\n", "if", "self", ".", "args", ".", "adapt_mode", ".", "startswith", "(", "'class-reset'", ")", "or", "self", ".", "args", ".", "adapt_mode", ".", "startswith", "(", "'oracle-reset'", ")", ":", "\n", "\n", "\t\t\t\t", "avg_class_miou_bkp_ma", "=", "np", ".", "mean", "(", "\n", "summary_dict", "[", "'avg_class_miou_bkp'", "]", "[", "-", "self", ".", "args", ".", "buffer_size", ":", "]", ")", "\n", "pred_count_ma_bkp", "=", "np", ".", "array", "(", "\n", "summary_dict", "[", "'pred_count_all_bkp'", "]", "[", "-", "self", ".", "args", ".", "buffer_size", ":", "]", ")", ".", "mean", "(", "0", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "avg_class_miou_bkp_ma", "=", "np", ".", "nan", "\n", "pred_count_ma_bkp", "=", "[", "np", ".", "nan", "]", "\n", "\n", "", "summary_dict", "[", "'pred_count_all_ma'", "]", ".", "append", "(", "pred_count_ma", ")", "\n", "summary_dict", "[", "'pred_count_all_ma_bkp'", "]", ".", "append", "(", "pred_count_ma_bkp", ")", "\n", "\n", "# difference between number of classes", "\n", "class_dist", "=", "avg_unique_classes_bkp", "-", "avg_unique_classes", "\n", "\n", "# if 'naive', we re-load the pre-trained model", "\n", "if", "self", ".", "args", ".", "adapt_mode", "in", "[", "\n", "'naive-batch-norm'", ",", "'naive-tent'", ",", "'naive-pseudo-labels'", "]", ":", "\n", "\t\t\t\t", "self", ".", "load_model", "(", ")", "\n", "\n", "# if 'reset' method &  trigger, we re-load the pre-trained model", "\n", "", "elif", "self", ".", "args", ".", "adapt_mode", ".", "startswith", "(", "'class-reset'", ")", ":", "\n", "\t\t\t\t", "if", "class_dist", ">", "self", ".", "args", ".", "reset_thrs", ":", "\n", "\t\t\t\t\t", "print", "(", "'Smart reset [class forgetting]'", ")", "\n", "self", ".", "model", ".", "load_state_dict", "(", "self", ".", "model_bkp", ".", "state_dict", "(", ")", ")", "\n", "avg_class_miou_ma", "=", "avg_class_miou_bkp_ma", "\n", "avg_class_miou", "=", "avg_class_miou_bkp", "\n", "summary_dict", "[", "'avg_class_miou'", "]", "[", "-", "1", "]", "=", "avg_class_miou_bkp", "\n", "mious_final", "=", "mious_final_bkp", "\n", "pixel_acc_final", "=", "pixel_acc_final_bkp", "\n", "mean_acc_final", "=", "mean_acc_final_bkp", "\n", "summary_dict", "[", "'mious_final'", "]", "[", "-", "1", "]", "=", "mious_final_bkp", "\n", "summary_dict", "[", "'pixel_acc_final'", "]", "[", "-", "1", "]", "=", "pixel_acc_final_bkp", "\n", "summary_dict", "[", "'mean_acc_final'", "]", "[", "-", "1", "]", "=", "mean_acc_final_bkp", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "reset_bool", "=", "True", "\n", "\n", "", "", "elif", "self", ".", "args", ".", "adapt_mode", ".", "startswith", "(", "'oracle-reset'", ")", ":", "\n", "\t\t\t\t", "if", "avg_class_miou_bkp_ma", ">", "avg_class_miou_ma", ":", "\n", "\t\t\t\t\t", "print", "(", "'Oracle reset [lower mIoU than baseline]'", ")", "\n", "self", ".", "model", ".", "load_state_dict", "(", "self", ".", "model_bkp", ".", "state_dict", "(", ")", ")", "\n", "avg_class_miou_ma", "=", "avg_class_miou_bkp_ma", "\n", "avg_class_miou", "=", "avg_class_miou_bkp", "\n", "summary_dict", "[", "'avg_class_miou'", "]", "[", "-", "1", "]", "=", "avg_class_miou_bkp", "\n", "mious_final", "=", "mious_final_bkp", "\n", "pixel_acc_final", "=", "pixel_acc_final_bkp", "\n", "mean_acc_final", "=", "mean_acc_final_bkp", "\n", "summary_dict", "[", "'mious_final'", "]", "[", "-", "1", "]", "=", "mious_final_bkp", "\n", "summary_dict", "[", "'pixel_acc_final'", "]", "[", "-", "1", "]", "=", "pixel_acc_final_bkp", "\n", "summary_dict", "[", "'mean_acc_final'", "]", "[", "-", "1", "]", "=", "mean_acc_final_bkp", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "reset_bool", "=", "True", "\n", "", "", "else", ":", "\n", "\t\t\t\t", "reset_bool", "=", "False", "\n", "\n", "", "mious_final_print", "=", "np", ".", "nanmean", "(", "mious_final", ")", "\n", "mious_init_print", "=", "np", ".", "nanmean", "(", "mious_init", ")", "\n", "pixel_acc_init_print", "=", "pixel_acc_init", "\n", "pixel_acc_final_print", "=", "pixel_acc_final", "\n", "mean_acc_init_print", "=", "mean_acc_init", "\n", "mean_acc_final_print", "=", "mean_acc_final", "\n", "\n", "if", "i_iter", "%", "1", "==", "0", ":", "\n", "\t\t\t\t", "print", "(", "f'iter = {i_iter:4d}/{self.args.num_steps:5d}, '", "+", "f'mIoU (init) = {mious_init_print:.3f},'", "+", "f'mIoU (final) = {mious_final_print:.3f}'", ")", "\n", "\n", "# --- saving images ------", "\n", "trg_image_", "=", "self", ".", "image_ops", ".", "process_image_for_saving", "(", "\n", "trg_image", ",", "interp_trg", ")", "\n", "output_", "=", "self", ".", "image_ops", ".", "colorize_mask", "(", "output", ")", "\n", "output_big_col", "=", "self", ".", "image_ops", ".", "colorize_mask", "(", "output_big", ")", "\n", "output_big", "=", "Image", ".", "fromarray", "(", "output_big", ")", "\n", "trg_labels_ONLY_FOR_EVAL_", "=", "self", ".", "image_ops", ".", "colorize_mask", "(", "\n", "trg_labels_ONLY_FOR_EVAL", ")", "\n", "self", ".", "image_ops", ".", "save_concat_image", "(", "\n", "trg_image_", ",", "trg_labels_ONLY_FOR_EVAL_", ",", "output_", ",", "\n", "self", ".", "input_size_target", ",", "self", ".", "result_dir", ",", "\n", "f'{i_iter:06d}'", ")", "\n", "\n", "image_name", "=", "trg_image_name", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "output_big", ".", "save", "(", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "result_dir", ",", "f'{i_iter:06d}_label.png'", ")", ")", "\n", "output_big_col", ".", "save", "(", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "result_dir", ",", "f'{i_iter:06d}_color.png'", ")", ")", "\n", "# -------------------------", "\n", "\n", "", "", "print", "(", "'End of training.'", ")", "\n", "\n", "print", "(", "'Saving model.'", ")", "\n", "torch", ".", "save", "(", "self", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "model_dir", ",", "self", ".", "model_name", ")", ")", "\n", "\n", "# dumping before final tests, in case something goes wrong with them", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "model_dir", ",", "self", ".", "summary_name", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "\t\t\t", "pickle", ".", "dump", "(", "summary_dict", ",", "f", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "model_dir", ",", "self", ".", "DONE_name", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "\t\t\t", "print", "(", "'Saving end of training file'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.main_adapt.SolverOps.setup_model": [[488, 499], ["main_adapt.SolverOps.model.train", "main_adapt.SolverOps.model.cuda", "deeplab.Res_Deeplab", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.naver_oasis.None.deeplab.Res_Deeplab"], ["", "", "def", "setup_model", "(", "self", ")", ":", "\n", "# Create network", "\n", "\t\t", "if", "self", ".", "args", ".", "model_arch", "==", "'Deeplab'", ":", "\n", "\t\t\t", "self", ".", "model", "=", "Deeplab", "(", "\n", "num_classes", "=", "self", ".", "num_classes", ")", "\n", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "(", "f'{self.args.model_arch}'", ")", "\n", "\n", "", "self", ".", "model", ".", "train", "(", ")", "\n", "self", ".", "model", ".", "cuda", "(", "self", ".", "args", ".", "gpu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.main_adapt.SolverOps.loss_calc": [[501, 511], ["torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "utils.loss.CrossEntropy2d().cuda", "utils.loss.CrossEntropy2d().cuda.", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "utils.loss.CrossEntropy2d", "torch.autograd.Variable().cuda.long"], "methods", ["None"], ["", "def", "loss_calc", "(", "self", ",", "pred", ",", "label", ",", "gpu", ")", ":", "\n", "\n", "\t\t", "\"\"\"\n\t\tThis function returns cross entropy loss for semantic segmentation\n\t\t\"\"\"", "\n", "\n", "label", "=", "Variable", "(", "label", ".", "long", "(", ")", ")", ".", "cuda", "(", "gpu", ")", "\n", "criterion", "=", "CrossEntropy2d", "(", ")", ".", "cuda", "(", "gpu", ")", "\n", "\n", "return", "criterion", "(", "pred", ",", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.main_adapt.SolverOps.load_model": [[513, 550], ["print", "main_adapt.SolverOps.model.modules", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "main_adapt.SolverOps.model.load_state_dict", "main_adapt.SolverOps.model.parameters", "main_adapt.SolverOps.model.children", "classname.find", "child.parameters", "child.parameters", "module.parameters"], "methods", ["None"], ["", "def", "load_model", "(", "self", ",", "vanilla_load", "=", "False", ")", ":", "\n", "\n", "\t\t", "\"\"\"\n\t\tMethod to load a pre-trained model.\n\t\t\"\"\"", "\n", "\n", "# setting all to False", "\n", "if", "'pseudo-labels'", "not", "in", "self", ".", "args", ".", "adapt_mode", ":", "\n", "# setting all to non-trainable", "\n", "\t\t\t", "for", "param", "in", "self", ".", "model", ".", "parameters", "(", ")", ":", "\n", "\t\t\t\t", "param", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "if", "(", "'pseudo-labels'", "in", "self", ".", "args", ".", "adapt_mode", ")", "and", "self", ".", "args", ".", "adapt_only_classifier", ":", "\n", "# we will only adapt the classifier", "\n", "\t\t\t", "for", "child", "in", "self", ".", "model", ".", "children", "(", ")", ":", "\n", "\t\t\t\t", "classname", "=", "child", ".", "__class__", ".", "__name__", "\n", "if", "classname", "==", "'Classifier_Module'", ":", "\n", "\t\t\t\t\t", "for", "param", "in", "child", ".", "parameters", "(", ")", ":", "\n", "\t\t\t\t\t\t", "param", ".", "requires_grad", "=", "True", "\n", "", "", "else", ":", "\n", "\t\t\t\t\t", "for", "param", "in", "child", ".", "parameters", "(", ")", ":", "\n", "\t\t\t\t\t\t", "param", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "", "", "print", "(", "'Setting BN params to \\'trainable\\''", ")", "\n", "for", "module", "in", "self", ".", "model", ".", "modules", "(", ")", ":", "\n", "\t\t\t", "classname", "=", "module", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "\t\t\t\t", "module", ".", "momentum", "=", "self", ".", "args", ".", "batch_norm_momentum", "\n", "if", "not", "self", ".", "args", ".", "adapt_only_classifier", ":", "\n", "# avoid learning the BN's params", "\n", "\t\t\t\t\t", "for", "param", "in", "module", ".", "parameters", "(", ")", ":", "\n", "\t\t\t\t\t\t", "param", ".", "requires_grad", "=", "True", "\n", "\n", "", "", "", "", "print", "(", "'Load source model'", ")", "\n", "saved_state_dict", "=", "torch", ".", "load", "(", "self", ".", "args", ".", "restore_from", ")", "\n", "self", ".", "model", ".", "load_state_dict", "(", "saved_state_dict", ",", "strict", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.main_adapt.SolverOps.compute_output_entropy": [[552, 596], ["torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sum.mean().mean", "torch.sum.mean().mean", "torch.sum.mean().mean", "torch.sum.mean().mean", "torch.sum.mean().mean", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.sum.mean", "torch.sum.mean", "torch.sum.mean", "torch.sum.mean", "torch.sum.mean"], "methods", ["None"], ["", "def", "compute_output_entropy", "(", "\n", "self", ",", "predictions", ",", "avg_image", "=", "True", ",", "avg_batch", "=", "True", ")", ":", "\n", "\n", "\t\t", "\"\"\"\n\t\tGiven output predictions, performs softmax and computes entropy\n\n\t\tparams:\n\n\t\t\tpredictions : torch tensor (M,K,H,W)\n\n\t\t\t\tThe output of the model: M batch size, K\n\t\t\t\tnumber of classes, (H,W) image size\n\n\t\t\tavg_image : bool\n\n\t\t\t\tIf True, averages the different pixels'\n\t\t\t\toutput predictions in a single number\n\n\t\t\tavg_batch : bool\n\n\t\t\t\tIf True, averages everything (this is like\n\t\t\t\treduce_mean + avg_image=True)\n\n\t\treturns:\n\n\t\t\toutput_entropy : torch.tensor / torch.float\n\n\t\t\t\tThe entropy associated with the prediction\n\t\t\t\tprovided.\n\n\t\t\"\"\"", "\n", "\n", "\n", "predictions", "=", "torch", ".", "softmax", "(", "predictions", ",", "1", ")", "\n", "output_entropy", "=", "torch", ".", "sum", "(", "\n", "-", "(", "torch", ".", "log", "(", "predictions", ")", "*", "predictions", ")", ",", "1", ")", "\n", "\n", "if", "avg_batch", ":", "\n", "\t\t\t", "return", "torch", ".", "mean", "(", "output_entropy", ")", "\n", "", "else", ":", "\n", "\t\t\t", "if", "avg_image", ":", "\n", "\t\t\t\t", "return", "output_entropy", ".", "mean", "(", "-", "1", ")", ".", "mean", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "return", "output_entropy", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.main_adapt.SolverOps.compute_pseudo_labels": [[598, 646], ["torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["None"], ["", "", "", "def", "compute_pseudo_labels", "(", "\n", "self", ",", "predictions", ",", "pseudo_labels_mode", ",", "pseudo_labels_thrs", "=", "None", ")", ":", "\n", "\n", "\t\t", "\"\"\"\n\t\tMethod to compute pseudo labels.\n\n\t\tparams:\n\n\t\t\tpredictions : torch.tensor (M,K,H,W)\n\n\t\t\t\tThe output of the model: M batch size, K number of\n\t\t\t\tclasses, (H,W) image size\n\n\t\t\tpseudo_labels_mode : str\n\n\t\t\t\tWhich PL method to use. Supported values are\n\t\t\t\t'vanilla' or 'softmax'\n\n\t\t\tpseudo_labels_thrs : str\n\n\t\t\t\tWhich threshold to use, if required by the\n\t\t\t\tPL method specified via pseudo_labels_mode\n\n\n\t\treturns:\n\n\t\t\ttrg_psd_labels : torch.tensor\n\n\t\t\t\tPseudo labels associted with the provided\n\t\t\t\tpredictions and thresholding method.\n\t\t\"\"\"", "\n", "\n", "# generating pseudo-labels", "\n", "if", "pseudo_labels_mode", "==", "'vanilla'", ":", "\n", "# \"hard\" pseudo-labels: treating every pixel", "\n", "# prediction as ground truth,", "\n", "# regardless of any confidence metric.", "\n", "\t\t\t", "trg_psd_labels", "=", "torch", ".", "argmax", "(", "predictions", ",", "1", ")", "\n", "\n", "", "elif", "pseudo_labels_mode", "==", "'softmax'", ":", "\n", "# \"softmax-based\" pseudo-labels: setting a threshold", "\n", "# and only using the predictions whose associated softmax", "\n", "# value is higher than that.", "\n", "\t\t\t", "trg_psd_labels", "=", "torch", ".", "argmax", "(", "predictions", ",", "1", ")", "\n", "trg_softmax_vals", "=", "torch", ".", "max", "(", "torch", ".", "softmax", "(", "predictions", ",", "1", ")", ",", "1", ")", "[", "0", "]", "\n", "trg_psd_labels", "[", "trg_softmax_vals", "<", "pseudo_labels_thrs", "]", "=", "255", "\n", "\n", "", "return", "trg_psd_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.main_adapt.SolverOps.setup_experiment_folder": [[648, 755], ["os.path.join", "print", "main_adapt.SolverOps.args.restore_from.split", "os.path.join", "os.path.join", "os.path.isfile", "print", "print", "exit", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.join", "os.path.join", "NotImplementedError"], "methods", ["None"], ["", "def", "setup_experiment_folder", "(", "self", ")", ":", "\n", "\n", "\t\t", "\"\"\"\n\t\tMethod to define model folder's name and create it, and to\n\t\tdefine the name of the output files created at end of training.\n\t\t\"\"\"", "\n", "\n", "if", "self", ".", "args", ".", "adapt_mode", "in", "[", "\n", "'batch-norm'", ",", "'naive-batch-norm'", ",", "'oracle-reset-batch-norm'", "]", ":", "\n", "\t\t\t", "self", ".", "args", ".", "adapt_mode_save", "=", "f'{self.args.adapt_mode}'", "+", "f'_{self.args.batch_norm_momentum}'", "\n", "\n", "", "elif", "self", ".", "args", ".", "adapt_mode", "in", "[", "'class-reset-batch-norm'", "]", ":", "\n", "\t\t\t", "self", ".", "args", ".", "adapt_mode_save", "=", "f'{self.args.adapt_mode}'", "+", "f'_{self.args.batch_norm_momentum}-{self.args.reset_thrs}'", "\n", "\n", "", "elif", "self", ".", "args", ".", "adapt_mode", "in", "[", "'tent'", ",", "'naive-tent'", ",", "'oracle-reset-tent'", "]", ":", "\n", "\t\t\t", "self", ".", "args", ".", "adapt_mode_save", "=", "f'{self.args.adapt_mode}_'", "+", "f'{self.args.adapt_iters}-{self.args.learning_rate}-'", "+", "f'{self.args.src_iters}-{self.args.batch_norm_momentum}'", "\n", "\n", "", "elif", "self", ".", "args", ".", "adapt_mode", "==", "'class-reset-tent'", ":", "\n", "\t\t\t", "self", ".", "args", ".", "adapt_mode_save", "=", "f'{self.args.adapt_mode}_'", "+", "f'{self.args.adapt_iters}-{self.args.learning_rate}-'", "+", "f'{self.args.src_iters}-{self.args.batch_norm_momentum}-'", "+", "f'{self.args.reset_thrs}'", "\n", "\n", "", "elif", "self", ".", "args", ".", "adapt_mode", "in", "[", "\n", "'pseudo-labels'", ",", "'naive-pseudo-labels'", ",", "'oracle-reset-pseudo-labels'", "]", ":", "\n", "\t\t\t", "self", ".", "args", ".", "adapt_mode_save", "=", "f'{self.args.adapt_mode}_'", "+", "f'{self.args.adapt_iters}-{self.args.learning_rate}-'", "+", "f'{self.args.src_iters}-{self.args.pseudo_labels_mode}-'", "+", "f'{self.args.pseudo_labels_thrs}-'", "+", "f'{self.args.batch_norm_momentum}'", "\n", "\n", "", "elif", "self", ".", "args", ".", "adapt_mode", "==", "'class-reset-pseudo-labels'", ":", "\n", "\t\t\t", "self", ".", "args", ".", "adapt_mode_save", "=", "f'{self.args.adapt_mode}_'", "+", "f'{self.args.adapt_iters}-{self.args.learning_rate}-'", "+", "f'{self.args.src_iters}-{self.args.pseudo_labels_mode}-'", "+", "f'{self.args.pseudo_labels_thrs}-'", "+", "f'{self.args.batch_norm_momentum}'", "+", "f'{self.args.reset_thrs}'", "\n", "\n", "", "elif", "self", ".", "args", ".", "adapt_mode", "==", "'no-adaptation'", ":", "\n", "\t\t\t", "if", "args", ".", "wct2_random_style_transfer", ":", "\n", "\t\t\t\t", "self", ".", "args", ".", "adapt_mode_save", "=", "'style-transfer_wct2-random'", "\n", "", "elif", "args", ".", "wct2_nn_style_transfer", ":", "\n", "\t\t\t\t", "self", ".", "args", ".", "adapt_mode_save", "=", "'style-transfer_wct2-nn'", "\n", "", "else", ":", "\n", "\t\t\t\t", "self", ".", "args", ".", "adapt_mode_save", "=", "'no-adaptation'", "\n", "\n", "", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "(", "f'Unknown \"adapt_mode\" [{self.args.adapt_mode}]'", ")", "\n", "\n", "", "sub_folder0", "=", "f'{self.args.trg_dataset}_{self.args.scene}_{self.args.cond}'", "\n", "self", ".", "model_name", "=", "f'{self.args.src_dataset}_to_{self.args.trg_dataset}_'", "+", "f'{self.args.scene}_{self.args.cond}.pth'", "\n", "self", ".", "DONE_name", "=", "f'{self.args.src_dataset}_to_{self.args.trg_dataset}_'", "+", "f'{self.args.scene}_{self.args.cond}.DONE'", "\n", "self", ".", "summary_name", "=", "f'{self.args.src_dataset}_to_{self.args.trg_dataset}_'", "+", "f'{self.args.scene}_{self.args.cond}_summary.pkl'", "\n", "\n", "if", "self", ".", "args", ".", "adapt_mode", "==", "'no-adaptation'", ":", "\n", "\t\t\t", "sub_folder1", "=", "'no_adaptation'", "\n", "", "elif", "self", ".", "args", ".", "adapt_mode", "in", "[", "\n", "'pseudo-labels'", ",", "'naive-pseudo-labels'", ",", "\n", "'class-reset-pseudo-labels'", ",", "'oracle-reset-pseudo-labels'", "]", ":", "\n", "\t\t\t", "if", "self", ".", "args", ".", "adapt_only_classifier", ":", "\n", "\t\t\t\t", "sub_folder1", "=", "'only_classifier'", "\n", "", "else", ":", "\n", "\t\t\t\t", "sub_folder1", "=", "'whole_net'", "\n", "", "", "else", ":", "\n", "\t\t\t", "sub_folder1", "=", "'only_batch_norm_params'", "\n", "\n", "", "restore_from_name", "=", "self", ".", "args", ".", "restore_from", ".", "split", "(", "\"/\"", ")", "[", "-", "2", "]", "\n", "\n", "if", "self", ".", "args", ".", "seed", "==", "111", ":", "# default", "\n", "\t\t\t", "self", ".", "model_dir", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "args", ".", "models_dir", ",", "\n", "f'{restore_from_name}/src2trg/{sub_folder0}/{sub_folder1}/'", "+", "f'adapt_{self.args.adapt_mode_save}'", "\n", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "model_dir", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "args", ".", "models_dir", ",", "\n", "f'{restore_from_name}/src2trg/{sub_folder0}/{sub_folder1}/'", "+", "f'adapt_{self.args.adapt_mode_save}/seed_{self.args.seed}'", "\n", ")", "\n", "\n", "\n", "# check if experiment/testing was done already", "\n", "", "if", "os", ".", "path", ".", "isfile", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "model_dir", ",", "self", ".", "DONE_name", ")", ")", "and", "not", "self", ".", "args", ".", "force_retraining", ":", "\n", "\t\t\t", "print", "(", "'DONE file present -- training was already carried out'", ")", "\n", "print", "(", "os", ".", "path", ".", "join", "(", "self", ".", "model_dir", ",", "self", ".", "DONE_name", ")", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "", "self", ".", "result_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "model_dir", ",", "'results'", ")", "\n", "\n", "print", "(", "f'Experiment directory: {self.model_dir}'", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "model_dir", ")", ":", "\n", "\t\t\t", "os", ".", "makedirs", "(", "self", ".", "model_dir", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "result_dir", ")", ":", "\n", "\t\t\t", "os", ".", "makedirs", "(", "self", ".", "result_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.main_adapt.SolverOps.setup_source_data_loader": [[757, 775], ["dataset.gta5_dataset.GTA5", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "enumerate"], "methods", ["None"], ["", "", "def", "setup_source_data_loader", "(", "self", ")", ":", "\n", "\n", "\t\t", "\"\"\"\n\t\tMethod to create pytorch dataloaders for the\n\t\tsource domain. This is fixed to GTA5, used for\n\t\tpre-training our models.\n\t\t\"\"\"", "\n", "\n", "self", ".", "src_parent_set", "=", "GTA5", "(", "\n", "GTA5_ROOT", ",", "num_epochs", "=", "1", ",", "\n", "crop_size", "=", "self", ".", "input_size_source", ",", "mean", "=", "IMG_MEAN", ")", "\n", "\n", "\n", "self", ".", "src_train_loader", "=", "data", ".", "DataLoader", "(", "\n", "self", ".", "src_parent_set", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "self", ".", "src_train_loader_iter", "=", "enumerate", "(", "self", ".", "src_train_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.main_adapt.SolverOps.setup_target_data_loader": [[777, 820], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "len", "main_adapt.SolverOps.args.scene.split", "main_adapt.SolverOps.args.cond.split", "print", "dataset.cityscapes_dataset.Cityscapes", "main_adapt.SolverOps.args.scene.split", "dataset.synthia_dataset.SYNTHIA", "dataset.acdc_dataset.ACDC", "ValueError"], "methods", ["None"], ["", "def", "setup_target_data_loader", "(", "self", ")", ":", "\n", "\n", "\t\t", "\"\"\"\n\t\tMethod to create pytorch dataloaders for the\n\t\ttarget domain selected by the user\n\t\t\"\"\"", "\n", "\n", "if", "len", "(", "self", ".", "args", ".", "scene", ".", "split", "(", "'-'", ")", ")", ">", "1", ":", "\n", "\t\t\t", "scene_list", "=", "self", ".", "args", ".", "scene", ".", "split", "(", "'-'", ")", "\n", "cond_list", "=", "self", ".", "args", ".", "cond", ".", "split", "(", "'-'", ")", "\n", "", "else", ":", "\n", "\t\t\t", "scene_list", "=", "[", "self", ".", "args", ".", "scene", "]", "\n", "cond_list", "=", "[", "self", ".", "args", ".", "cond", "]", "\n", "\n", "", "if", "self", ".", "args", ".", "trg_dataset", "==", "'Cityscapes'", ":", "\n", "\t\t\t", "print", "(", "f'Loading Cityscapes from {self.args.cityscapes_root}'", ")", "\n", "self", ".", "trg_parent_set", "=", "Cityscapes", "(", "\n", "self", ".", "args", ".", "cityscapes_root", ",", "scene_list", ",", "cond_list", ",", "\n", "crop_size", "=", "self", ".", "input_size_target", ",", "mean", "=", "IMG_MEAN", ",", "\n", "alpha", "=", "0.02", ",", "beta", "=", "0.01", ",", "dropsize", "=", "0.005", ",", "pattern", "=", "3", ",", "\n", "wct2_random_style_transfer", "=", "self", ".", "args", ".", "wct2_random_style_transfer", ",", "\n", "wct2_nn_style_transfer", "=", "self", ".", "args", ".", "wct2_nn_style_transfer", ")", "\n", "\n", "", "elif", "self", ".", "args", ".", "trg_dataset", "==", "'SYNTHIA'", ":", "\n", "\t\t\t", "self", ".", "trg_parent_set", "=", "SYNTHIA", "(", "\n", "self", ".", "args", ".", "synthia_root", ",", "scene_list", ",", "cond_list", ",", "\n", "camera_id", "=", "'0'", ",", "crop_size", "=", "self", ".", "input_size_target", ",", "\n", "mean", "=", "IMG_MEAN", ",", "set", "=", "'all'", ",", "num_images", "=", "300", ",", "\n", "wct2_random_style_transfer", "=", "self", ".", "args", ".", "wct2_random_style_transfer", ",", "\n", "wct2_nn_style_transfer", "=", "self", ".", "args", ".", "wct2_nn_style_transfer", ")", "\n", "\n", "", "elif", "self", ".", "args", ".", "trg_dataset", "==", "'ACDC'", ":", "\n", "\t\t\t", "self", ".", "trg_parent_set", "=", "ACDC", "(", "\n", "self", ".", "args", ".", "acdc_root", ",", "scene_list", ",", "cond_list", ",", "\n", "crop_size", "=", "self", ".", "input_size_target", ",", "mean", "=", "IMG_MEAN", ",", "\n", "wct2_random_style_transfer", "=", "self", ".", "args", ".", "wct2_random_style_transfer", ",", "\n", "wct2_nn_style_transfer", "=", "self", ".", "args", ".", "wct2_nn_style_transfer", ")", "\n", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "ValueError", "(", "f'Unknown dataset {self.args.dataset}'", ")", "\n", "\n", "", "self", ".", "trg_train_loader", "=", "data", ".", "DataLoader", "(", "\n", "self", ".", "trg_parent_set", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.streamlit-app.StreamPlot.__init__": [[68, 137], ["print", "sorted", "dict", "dict", "dict", "streamlit-app.StreamPlot.setup_exp_choices", "open", "pickle.load", "glob.glob", "print", "sorted", "numpy.unique", "numpy.unique", "print", "streamlit-app.StreamPlot.src_models_list_ids.append", "os.path.join", "i.split", "os.path.isdir", "glob.glob", "os.path.join", "os.path.isdir", "i.split", "os.path.join", "range", "os.path.join", "open", "pickle.load", "print", "len", "print", "open", "pickle.load", "print"], "methods", ["home.repos.pwc.inspect_result.naver_oasis.None.streamlit-app.StreamPlot.setup_exp_choices"], ["\t", "def", "__init__", "(", "self", ")", ":", "\n", "\n", "\t\t", "print", "(", "'__init__'", ")", "\n", "\n", "self", ".", "model", "=", "0", "\n", "self", ".", "dataset", "=", "0", "\n", "self", ".", "frame", "=", "0", "\n", "self", ".", "results_dir", "=", "'./adapted-models'", "\n", "\n", "with", "open", "(", "'./dataset/available_benchmarks.pkl'", ",", "'rb'", ")", "as", "f", ":", "\n", "\t\t\t", "self", ".", "available_benchmarks_list", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "self", ".", "src_models_list", "=", "sorted", "(", "\n", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "results_dir", ",", "'*'", ")", ")", ")", "\n", "self", ".", "src_models_list", "=", "[", "i", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "for", "i", "in", "self", ".", "src_models_list", "if", "os", ".", "path", ".", "isdir", "(", "i", ")", "]", "\n", "\n", "self", ".", "src_models_list", "=", "[", "_", "for", "_", "in", "self", ".", "src_models_list", "if", "_", "!=", "'_UNUSED_'", "]", "# filtering out old experiments", "\n", "\n", "self", ".", "datasets_list_dict", "=", "dict", "(", ")", "\n", "\n", "self", ".", "benchmarks_list", "=", "[", "'SYNTHIA'", ",", "'Cityscapes'", ",", "'ACDC'", "]", "\n", "\n", "for", "benchmark", "in", "self", ".", "benchmarks_list", ":", "\n", "\t\t\t", "print", "(", "f'Processing benchmark {benchmark}'", ")", "\n", "self", ".", "datasets_list_dict", "[", "benchmark", "]", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "results_dir", ",", "f'*/src2trg/{benchmark}*'", ")", ")", ")", "\n", "self", ".", "datasets_list_dict", "[", "benchmark", "]", "=", "[", "i", "for", "i", "in", "self", ".", "datasets_list_dict", "[", "benchmark", "]", "if", "os", ".", "path", ".", "isdir", "(", "i", ")", "]", "\n", "self", ".", "datasets_list_dict", "[", "benchmark", "]", "=", "[", "i", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "for", "i", "in", "self", ".", "datasets_list_dict", "[", "benchmark", "]", "]", "\n", "self", ".", "datasets_list_dict", "[", "benchmark", "]", "=", "np", ".", "unique", "(", "self", ".", "datasets_list_dict", "[", "benchmark", "]", ")", "\n", "self", ".", "datasets_list_dict", "[", "benchmark", "]", "=", "[", "_", "for", "_", "in", "self", ".", "datasets_list_dict", "[", "benchmark", "]", "if", "_", "in", "self", ".", "available_benchmarks_list", "]", "\n", "\n", "", "self", ".", "labels_per_img_dict", "=", "dict", "(", ")", "\n", "self", ".", "num_imgs_per_seq_dict", "=", "dict", "(", ")", "\n", "#all_datasets = [i for j in self.datasets_list_dict.values() for i in j]", "\n", "\n", "for", "benchmark", "in", "self", ".", "benchmarks_list", ":", "\n", "\t\t\t", "print", "(", "f'Processing benchmark {benchmark}'", ")", "\n", "for", "dts", "in", "self", ".", "datasets_list_dict", "[", "benchmark", "]", ":", "\n", "\t\t\t\t", "try", ":", "\n", "\t\t\t\t\t", "pkl_path", "=", "os", ".", "path", ".", "join", "(", "\n", "f'./dataset/{benchmark}_labels_per_image'", ",", "\n", "f'{dts}_labels_per_image.pkl'", ")", "\n", "with", "open", "(", "pkl_path", ",", "'rb'", ")", "as", "f", ":", "\n", "\t\t\t\t\t\t", "self", ".", "labels_per_img_dict", "[", "dts", "]", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "", "except", ":", "\n", "\t\t\t\t\t", "print", "(", "f'Missing labels_per_img for {dts}'", ")", "\n", "\n", "", "try", ":", "\n", "\t\t\t\t\t", "for", "n", "in", "range", "(", "len", "(", "self", ".", "labels_per_img_dict", "[", "dts", "]", ")", ")", ":", "\n", "\t\t\t\t\t\t", "self", ".", "labels_per_img_dict", "[", "dts", "]", "[", "n", "]", "=", "self", ".", "labels_per_img_dict", "[", "dts", "]", "[", "n", "]", "[", "self", ".", "labels_per_img_dict", "[", "dts", "]", "[", "n", "]", "!=", "255", "]", "\n", "", "", "except", ":", "\n", "\t\t\t\t\t", "print", "(", "f'Error in processing labels for {dts}'", ")", "\n", "\n", "", "try", ":", "\n", "\t\t\t\t\t", "pkl_path", "=", "os", ".", "path", ".", "join", "(", "\n", "f'./dataset/{benchmark}_num_images_per_seq'", ",", "\n", "f'{dts}_num_images_per_seq.pkl'", ")", "\n", "with", "open", "(", "pkl_path", ",", "'rb'", ")", "as", "f", ":", "\n", "\t\t\t\t\t\t", "self", ".", "num_imgs_per_seq_dict", "[", "dts", "]", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "", "except", ":", "\n", "\t\t\t\t\t", "print", "(", "f'Missing num_imgs_per_seq for {dts}'", ")", "\n", "\n", "", "", "", "self", ".", "src_models_list_ids", "=", "[", "]", "\n", "\n", "# defining better looking model names", "\n", "for", "curr_id", "in", "self", ".", "src_models_list", ":", "\n", "# NOTE this is if we want to give different IDs", "\n", "\t\t\t", "self", ".", "src_models_list_ids", ".", "append", "(", "curr_id", ")", "\n", "\n", "", "self", ".", "setup_exp_choices", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.streamlit-app.StreamPlot.setup_exp_choices": [[139, 200], ["numpy.unique", "numpy.unique", "all_exps.tolist.tolist.tolist", "enumerate", "[].split", "[].split", "_.split", "glob.glob", "streamlit-app.StreamPlot.exp_choices_dict[].append", "os.path.join", "exp_.split", "exp_.split", "len", "len", "streamlit-app.StreamPlot.exp_choices_dict[].append", "streamlit-app.StreamPlot.exp_choices_dict[].append", "len", "len", "streamlit-app.StreamPlot.exp_choices_dict[].append", "len", "len", "streamlit-app.StreamPlot.exp_choices_dict[].append", "streamlit-app.StreamPlot.exp_choices_dict[].append", "streamlit-app.StreamPlot.exp_choices_dict[].append", "numpy.unique", "numpy.unique", "numpy.unique", "numpy.unique", "len", "len", "streamlit-app.StreamPlot.exp_choices_dict[].append", "len", "len", "streamlit-app.StreamPlot.exp_choices_dict[].append", "streamlit-app.StreamPlot.exp_choices_dict[].append", "numpy.unique", "numpy.unique", "numpy.unique", "numpy.unique", "len", "len", "numpy.unique", "numpy.unique", "numpy.unique", "numpy.unique", "streamlit-app.StreamPlot.exp_choices_dict[].append", "streamlit-app.StreamPlot.exp_choices_dict[].append", "len", "len", "streamlit-app.StreamPlot.exp_choices_dict[].append", "numpy.unique", "numpy.unique", "numpy.unique", "numpy.unique", "len", "len", "streamlit-app.StreamPlot.exp_choices_dict[].append", "numpy.unique", "numpy.unique", "numpy.unique", "numpy.unique", "len", "len", "numpy.unique", "numpy.unique", "numpy.unique", "numpy.unique", "len", "len", "numpy.unique", "numpy.unique", "numpy.unique", "numpy.unique"], "methods", ["None"], ["", "def", "setup_exp_choices", "(", "self", ")", ":", "\n", "\t\t", "all_exps", "=", "np", ".", "unique", "(", "[", "_", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "for", "_", "in", "glob", ".", "glob", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "results_dir", ",", "'*/src2trg/*'", ")", ")", "]", ")", "\n", "all_exps", "=", "all_exps", ".", "tolist", "(", ")", "\n", "\n", "all_exps", "=", "[", "_", "for", "_", "in", "all_exps", "if", "_", "in", "self", ".", "available_benchmarks_list", "]", "\n", "\n", "self", ".", "exp_choices_list", "=", "[", "\n", "'SYNTHIA_multi'", ",", "'SYNTHIA_01'", ",", "'SYNTHIA_04'", ",", "'SYNTHIA_05'", ",", "\n", "'SYNTHIA_daylight'", ",", "'SYNTHIA_night'", ",", "'SYNTHIA_rain'", ",", "'SYNTHIA_fog'", ",", "\n", "'Cityscapes_single'", ",", "'Cityscapes_multi-AW'", ",", "'Cityscapes_multi-O'", ",", "\n", "'ACDC_multi'", ",", "'ACDC_single-fog'", ",", "'ACDC_single-night'", ",", "\n", "'ACDC_single-rain'", ",", "'ACDC_single-snow'", "]", "\n", "\n", "self", ".", "exp_choices_dict", "=", "{", "k_", ":", "[", "]", "for", "k_", "in", "self", ".", "exp_choices_list", "}", "\n", "\n", "for", "_", ",", "exp_", "in", "enumerate", "(", "all_exps", ")", ":", "\n", "\t\t\t", "scenes_list", "=", "exp_", ".", "split", "(", "'_'", ")", "[", "1", "]", ".", "split", "(", "'-'", ")", "\n", "conds_list", "=", "exp_", ".", "split", "(", "'_'", ")", "[", "2", "]", ".", "split", "(", "'-'", ")", "\n", "\n", "if", "'SYNTHIA'", "in", "exp_", ":", "\n", "\t\t\t\t", "if", "(", "len", "(", "conds_list", ")", ">", "1", ")", "and", "(", "len", "(", "scenes_list", ")", ">", "1", ")", ":", "\n", "\t\t\t\t\t", "self", ".", "exp_choices_dict", "[", "'SYNTHIA_multi'", "]", ".", "append", "(", "exp_", ")", "\n", "\n", "", "elif", "len", "(", "conds_list", ")", "==", "1", "and", "len", "(", "scenes_list", ")", "==", "1", ":", "\n", "\t\t\t\t\t", "if", "conds_list", "[", "0", "]", "in", "[", "'SUMMER'", ",", "'SPRING'", ",", "'FALL'", ",", "'WINTER'", "]", ":", "\n", "\t\t\t\t\t\t", "if", "conds_list", "[", "0", "]", "==", "'SUMMER'", "and", "scenes_list", "[", "0", "]", "==", "'04'", ":", "\n", "\t\t\t\t\t\t\t", "continue", "\n", "", "self", ".", "exp_choices_dict", "[", "'SYNTHIA_daylight'", "]", ".", "append", "(", "exp_", ")", "\n", "", "elif", "conds_list", "[", "0", "]", "in", "[", "'RAIN'", ",", "'SOFTRAIN'", "]", ":", "\n", "\t\t\t\t\t\t", "self", ".", "exp_choices_dict", "[", "'SYNTHIA_rain'", "]", ".", "append", "(", "exp_", ")", "\n", "", "elif", "conds_list", "[", "0", "]", "in", "[", "'FOG'", "]", ":", "\n", "\t\t\t\t\t\t", "self", ".", "exp_choices_dict", "[", "'SYNTHIA_fog'", "]", ".", "append", "(", "exp_", ")", "\n", "", "elif", "conds_list", "[", "0", "]", "in", "[", "'NIGHT'", "]", ":", "\n", "\t\t\t\t\t\t", "self", ".", "exp_choices_dict", "[", "'SYNTHIA_night'", "]", ".", "append", "(", "exp_", ")", "\n", "", "self", ".", "exp_choices_dict", "[", "f'SYNTHIA_{scenes_list[0]}'", "]", ".", "append", "(", "scenes_list", "[", "0", "]", ")", "\n", "\n", "", "", "elif", "(", "'Cityscapes'", "in", "exp_", ")", "and", "(", "'FullCityscapes'", "not", "in", "exp_", ")", ":", "\n", "\t\t\t\t", "if", "(", "len", "(", "np", ".", "unique", "(", "conds_list", ")", ")", "==", "1", ")", "and", "(", "len", "(", "np", ".", "unique", "(", "scenes_list", ")", ")", ">", "1", ")", ":", "\n", "\t\t\t\t\t", "self", ".", "exp_choices_dict", "[", "'Cityscapes_multi-O'", "]", ".", "append", "(", "exp_", ")", "\n", "", "elif", "(", "len", "(", "np", ".", "unique", "(", "conds_list", ")", ")", ">", "1", ")", "and", "(", "len", "(", "np", ".", "unique", "(", "scenes_list", ")", ")", ">", "1", ")", ":", "\n", "\t\t\t\t\t", "self", ".", "exp_choices_dict", "[", "'Cityscapes_multi-AW'", "]", ".", "append", "(", "exp_", ")", "\n", "", "elif", "len", "(", "conds_list", ")", "==", "1", "and", "len", "(", "scenes_list", ")", "==", "1", ":", "\n", "\t\t\t\t\t", "self", ".", "exp_choices_dict", "[", "'Cityscapes_single'", "]", ".", "append", "(", "exp_", ")", "\n", "\n", "", "", "elif", "'ACDC'", "in", "exp_", ":", "\n", "\t\t\t\t", "if", "(", "(", "len", "(", "np", ".", "unique", "(", "scenes_list", ")", ")", ">", "1", ")", "and", "(", "len", "(", "np", ".", "unique", "(", "conds_list", ")", ")", ">", "1", ")", ")", ":", "\n", "\t\t\t\t\t", "self", ".", "exp_choices_dict", "[", "'ACDC_multi'", "]", ".", "append", "(", "exp_", ")", "\n", "", "elif", "(", "(", "len", "(", "np", ".", "unique", "(", "scenes_list", ")", ")", "==", "1", ")", "and", "(", "len", "(", "np", ".", "unique", "(", "conds_list", ")", ")", "==", "1", ")", ")", "and", "(", "conds_list", "[", "0", "]", "==", "'fog'", ")", ":", "\n", "\t\t\t\t\t", "self", ".", "exp_choices_dict", "[", "'ACDC_single-fog'", "]", ".", "append", "(", "exp_", ")", "\n", "", "elif", "(", "(", "len", "(", "np", ".", "unique", "(", "scenes_list", ")", ")", "==", "1", ")", "and", "(", "len", "(", "np", ".", "unique", "(", "conds_list", ")", ")", "==", "1", ")", ")", "and", "(", "conds_list", "[", "0", "]", "==", "'night'", ")", ":", "\n", "\t\t\t\t\t", "self", ".", "exp_choices_dict", "[", "'ACDC_single-night'", "]", ".", "append", "(", "exp_", ")", "\n", "", "elif", "(", "(", "len", "(", "np", ".", "unique", "(", "scenes_list", ")", ")", "==", "1", ")", "and", "(", "len", "(", "np", ".", "unique", "(", "conds_list", ")", ")", "==", "1", ")", ")", "and", "(", "conds_list", "[", "0", "]", "==", "'rain'", ")", ":", "\n", "\t\t\t\t\t", "self", ".", "exp_choices_dict", "[", "'ACDC_single-rain'", "]", ".", "append", "(", "exp_", ")", "\n", "", "elif", "(", "(", "len", "(", "np", ".", "unique", "(", "scenes_list", ")", ")", "==", "1", ")", "and", "(", "len", "(", "np", ".", "unique", "(", "conds_list", ")", ")", "==", "1", ")", ")", "and", "(", "conds_list", "[", "0", "]", "==", "'snow'", ")", ":", "\n", "\t\t\t\t\t", "self", ".", "exp_choices_dict", "[", "'ACDC_single-snow'", "]", ".", "append", "(", "exp_", ")", "\n", "\n", "", "", "else", ":", "\n", "# TODO", "\n", "\t\t\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.streamlit-app.StreamPlot.define_fig": [[202, 209], ["matplotlib.subplots", "ValueError"], "methods", ["None"], ["", "", "", "def", "define_fig", "(", "self", ",", "n", ")", ":", "\n", "\t\t", "if", "n", "==", "0", ":", "\n", "\t\t\t", "raise", "ValueError", "(", "'n > 0'", ")", "\n", "", "fig", ",", "axes", "=", "plt", ".", "subplots", "(", "n", ",", "1", ")", "\n", "if", "n", "==", "1", ":", "\n", "\t\t\t", "axes", "=", "[", "axes", "]", "\n", "", "return", "fig", ",", "axes", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.streamlit-app.StreamPlot.show_image": [[211, 220], ["cv2.imread", "axes[].imshow", "axes[].set_xticks", "axes[].set_yticks", "print"], "methods", ["None"], ["", "def", "show_image", "(", "self", ",", "axes", ",", "verbose", "=", "False", ")", ":", "\n", "\n", "\t\t", "img_path", "=", "self", ".", "saved_images", "[", "self", ".", "frame", "]", "\n", "if", "verbose", ":", "\n", "\t\t\t", "print", "(", "f'Loading {img_path}'", ")", "\n", "", "img_to_plot", "=", "cv2", ".", "imread", "(", "img_path", ")", "\n", "axes", "[", "0", "]", ".", "imshow", "(", "img_to_plot", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ")", "\n", "axes", "[", "0", "]", ".", "set_xticks", "(", "[", "]", ")", "\n", "axes", "[", "0", "]", ".", "set_yticks", "(", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.streamlit-app.StreamPlot.retrieve_adapt_method_data": [[222, 383], ["glob.glob", "os.path.join", "os.path.join", "numpy.unique().tolist", "numpy.unique().tolist", "streamlit.sidebar.selectbox", "numpy.unique().tolist", "numpy.unique().tolist", "streamlit.sidebar.selectbox", "numpy.unique().tolist", "numpy.unique().tolist", "streamlit.sidebar.selectbox", "len", "glob.glob", "_.split", "numpy.unique().tolist", "numpy.unique().tolist", "streamlit.sidebar.selectbox", "numpy.unique().tolist", "numpy.unique().tolist", "streamlit.sidebar.selectbox", "numpy.unique().tolist", "numpy.unique().tolist", "streamlit.sidebar.selectbox", "numpy.unique().tolist", "numpy.unique().tolist", "streamlit.sidebar.selectbox", "numpy.unique().tolist", "numpy.unique().tolist", "streamlit.sidebar.selectbox", "numpy.unique().tolist", "numpy.unique().tolist", "streamlit.sidebar.selectbox", "numpy.unique().tolist", "numpy.unique().tolist", "streamlit.sidebar.selectbox", "numpy.unique().tolist", "numpy.unique().tolist", "streamlit.sidebar.selectbox", "os.path.join", "numpy.unique", "numpy.unique", "numpy.unique", "numpy.unique", "numpy.unique", "numpy.unique", "numpy.unique().tolist", "numpy.unique().tolist", "streamlit.sidebar.selectbox", "numpy.unique().tolist", "numpy.unique().tolist", "streamlit.sidebar.selectbox", "numpy.unique().tolist", "numpy.unique().tolist", "streamlit.sidebar.selectbox", "numpy.unique().tolist", "numpy.unique().tolist", "streamlit.sidebar.selectbox", "numpy.unique", "numpy.unique", "numpy.unique", "numpy.unique", "numpy.unique", "numpy.unique", "numpy.unique", "numpy.unique", "numpy.unique", "numpy.unique", "numpy.unique", "numpy.unique", "numpy.unique", "numpy.unique", "numpy.unique", "numpy.unique", "numpy.unique", "numpy.unique", "numpy.unique", "numpy.unique", "numpy.unique", "numpy.unique", "numpy.unique", "numpy.unique", "numpy.unique().tolist", "numpy.unique().tolist", "streamlit.sidebar.selectbox", "numpy.unique().tolist", "numpy.unique().tolist", "streamlit.sidebar.selectbox", "ValueError", "i.replace().split", "i.replace().split", "i.replace().split", "i.replace", "i.replace", "i.replace().split", "i.replace().split", "i.replace().split", "i.replace().split", "i.replace().split", "i.replace().split", "i.replace", "i.replace", "_.split", "numpy.unique", "numpy.unique", "numpy.unique", "numpy.unique", "i.replace", "i.replace", "i.replace", "i.replace().split", "i.replace().split", "i.replace", "i.replace", "i.replace", "i.replace", "i.replace", "i.replace", "i.replace", "i.replace", "i.replace", "i.replace().split", "i.replace"], "methods", ["None"], ["", "def", "retrieve_adapt_method_data", "(", "self", ")", ":", "\n", "\n", "\t\t", "self", ".", "trg_models_list", "=", "glob", ".", "glob", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "adapt_exps_root", ",", "f'adapt_{self.adapt_method_choice}*'", ")", ")", "\n", "self", ".", "adapt_method_list", "=", "[", "_", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "for", "_", "in", "self", ".", "trg_models_list", "]", "\n", "\n", "string_to_match", "=", "f'adapt_{self.adapt_method_choice}_'", "\n", "\n", "if", "self", ".", "adapt_method_choice", "in", "[", "\n", "'tent'", ",", "'naive-tent'", ",", "'class-reset-tent'", ",", "'oracle-reset-tent'", "]", ":", "\n", "\n", "# exp folder's format: {self.args.adapt_mode}-{self.args.adapt_iters}-{self.args.learning_rate}-{self.src_iters}", "\n", "\n", "# retrieving args.adapt_iters and filtering", "\n", "\t\t\t", "adapt_iters_list", "=", "np", ".", "unique", "(", "[", "i", ".", "replace", "(", "string_to_match", ",", "''", ")", ".", "split", "(", "'-'", ")", "[", "0", "]", "for", "i", "in", "self", ".", "adapt_method_list", "]", ")", ".", "tolist", "(", ")", "\n", "self", ".", "adapt_iters_choice", "=", "st", ".", "sidebar", ".", "selectbox", "(", "'Number of steps'", ",", "adapt_iters_list", ",", "0", ")", "\n", "\n", "string_to_match", "+=", "(", "self", ".", "adapt_iters_choice", "+", "'-'", ")", "\n", "self", ".", "adapt_method_list", "=", "[", "_", "for", "_", "in", "self", ".", "adapt_method_list", "if", "string_to_match", "in", "_", "]", "\n", "\n", "# retrieving args.learning_rate and filering", "\n", "lr_list", "=", "np", ".", "unique", "(", "[", "i", ".", "replace", "(", "string_to_match", ",", "''", ")", ".", "split", "(", "'-'", ")", "[", "0", "]", "for", "i", "in", "self", ".", "adapt_method_list", "]", ")", ".", "tolist", "(", ")", "\n", "self", ".", "lr_choice", "=", "st", ".", "sidebar", ".", "selectbox", "(", "\"Learning rate\"", ",", "lr_list", ",", "0", ")", "\n", "\n", "string_to_match", "+=", "(", "self", ".", "lr_choice", "+", "'-'", ")", "\n", "self", ".", "adapt_method_list", "=", "[", "_", "for", "_", "in", "self", ".", "adapt_method_list", "if", "string_to_match", "in", "_", "]", "\n", "\n", "# retrieving args.src_iters and filering", "\n", "src_iters_list", "=", "np", ".", "unique", "(", "[", "i", ".", "replace", "(", "string_to_match", ",", "''", ")", ".", "split", "(", "'-'", ")", "[", "0", "]", "for", "i", "in", "self", ".", "adapt_method_list", "]", ")", ".", "tolist", "(", ")", "\n", "self", ".", "src_iters_choice", "=", "st", ".", "sidebar", ".", "selectbox", "(", "\"Number of source iterations\"", ",", "src_iters_list", ",", "0", ")", "\n", "\n", "string_to_match", "+=", "(", "self", ".", "src_iters_choice", "+", "'-'", ")", "\n", "self", ".", "adapt_method_list", "=", "[", "_", "for", "_", "in", "self", ".", "adapt_method_list", "if", "string_to_match", "in", "_", "]", "\n", "\n", "if", "self", ".", "adapt_method_choice", "in", "[", "'class-reset-tent'", "]", ":", "\n", "# retrieving args.batch_norm_momentum and filtering", "\n", "\t\t\t\t", "bn_momentum_list", "=", "np", ".", "unique", "(", "[", "i", ".", "replace", "(", "string_to_match", ",", "''", ")", ".", "split", "(", "'-'", ")", "[", "0", "]", "for", "i", "in", "self", ".", "adapt_method_list", "]", ")", ".", "tolist", "(", ")", "\n", "self", ".", "bn_momentum_choice", "=", "st", ".", "sidebar", ".", "selectbox", "(", "\"Batch norm momentum\"", ",", "bn_momentum_list", ",", "0", ")", "\n", "\n", "string_to_match", "+=", "(", "self", ".", "bn_momentum_choice", "+", "'-'", ")", "\n", "self", ".", "adapt_method_list", "=", "[", "_", "for", "_", "in", "self", ".", "adapt_method_list", "if", "string_to_match", "in", "_", "]", "\n", "\n", "# retrieving args.reset_threshold and filtering", "\n", "reset_thrs_list", "=", "np", ".", "unique", "(", "[", "i", ".", "replace", "(", "string_to_match", ",", "''", ")", "for", "i", "in", "self", ".", "adapt_method_list", "]", ")", ".", "tolist", "(", ")", "\n", "self", ".", "reset_thrs_choice", "=", "st", ".", "sidebar", ".", "selectbox", "(", "\"Smart reset threshold\"", ",", "reset_thrs_list", ",", "0", ")", "\n", "\n", "string_to_match", "+=", "self", ".", "reset_thrs_choice", "\n", "self", ".", "adapt_method_list", "=", "[", "_", "for", "_", "in", "self", ".", "adapt_method_list", "if", "string_to_match", "==", "_", "]", "\n", "\n", "", "else", ":", "\n", "# retrieving args.batch_norm_momentum and filtering", "\n", "\t\t\t\t", "bn_momentum_list", "=", "np", ".", "unique", "(", "[", "i", ".", "replace", "(", "string_to_match", ",", "''", ")", "for", "i", "in", "self", ".", "adapt_method_list", "]", ")", ".", "tolist", "(", ")", "\n", "self", ".", "bn_momentum_choice", "=", "st", ".", "sidebar", ".", "selectbox", "(", "\"Batch norm momentum\"", ",", "bn_momentum_list", ",", "0", ")", "\n", "\n", "string_to_match", "+=", "self", ".", "bn_momentum_choice", "\n", "self", ".", "adapt_method_list", "=", "[", "_", "for", "_", "in", "self", ".", "adapt_method_list", "if", "string_to_match", "==", "_", "]", "\n", "\n", "\n", "", "", "elif", "self", ".", "adapt_method_choice", "in", "[", "'pseudo-labels'", ",", "'naive-pseudo-labels'", ",", "\n", "'class-reset-pseudo-labels'", ",", "'oracle-reset-pseudo-labels'", "]", ":", "\n", "\n", "# retrieving args.adapt_iters and filtering", "\n", "\t\t\t", "adapt_iters_list", "=", "np", ".", "unique", "(", "[", "i", ".", "replace", "(", "string_to_match", ",", "''", ")", ".", "split", "(", "'-'", ")", "[", "0", "]", "for", "i", "in", "self", ".", "adapt_method_list", "]", ")", ".", "tolist", "(", ")", "\n", "self", ".", "adapt_iters_choice", "=", "st", ".", "sidebar", ".", "selectbox", "(", "'Number of steps'", ",", "adapt_iters_list", ",", "0", ")", "\n", "\n", "string_to_match", "+=", "(", "self", ".", "adapt_iters_choice", "+", "'-'", ")", "\n", "self", ".", "adapt_method_list", "=", "[", "_", "for", "_", "in", "self", ".", "adapt_method_list", "if", "string_to_match", "in", "_", "]", "\n", "\n", "# retrieving args.learning rate and filering", "\n", "lr_list", "=", "np", ".", "unique", "(", "[", "i", ".", "replace", "(", "string_to_match", ",", "''", ")", ".", "split", "(", "'-'", ")", "[", "0", "]", "for", "i", "in", "self", ".", "adapt_method_list", "]", ")", ".", "tolist", "(", ")", "\n", "self", ".", "lr_choice", "=", "st", ".", "sidebar", ".", "selectbox", "(", "\"Learning rate\"", ",", "lr_list", ",", "0", ")", "\n", "\n", "string_to_match", "+=", "(", "self", ".", "lr_choice", "+", "'-'", ")", "\n", "self", ".", "adapt_method_list", "=", "[", "_", "for", "_", "in", "self", ".", "adapt_method_list", "if", "string_to_match", "in", "_", "]", "\n", "\n", "# retrieving args.src_iters and filtering", "\n", "src_iters_list", "=", "np", ".", "unique", "(", "[", "i", ".", "replace", "(", "string_to_match", ",", "''", ")", ".", "split", "(", "'-'", ")", "[", "0", "]", "for", "i", "in", "self", ".", "adapt_method_list", "]", ")", ".", "tolist", "(", ")", "\n", "self", ".", "src_iters_choice", "=", "st", ".", "sidebar", ".", "selectbox", "(", "\"Number of source iterations\"", ",", "src_iters_list", ",", "0", ")", "\n", "\n", "string_to_match", "+=", "(", "self", ".", "src_iters_choice", "+", "'-'", ")", "\n", "self", ".", "adapt_method_list", "=", "[", "_", "for", "_", "in", "self", ".", "adapt_method_list", "if", "string_to_match", "in", "_", "]", "\n", "\n", "# retrieving args.pseudo_labels_mode and filtering", "\n", "pl_mode_list", "=", "np", ".", "unique", "(", "[", "i", ".", "replace", "(", "string_to_match", ",", "''", ")", ".", "split", "(", "'-'", ")", "[", "0", "]", "for", "i", "in", "self", ".", "adapt_method_list", "]", ")", ".", "tolist", "(", ")", "\n", "self", ".", "pl_mode_choice", "=", "st", ".", "sidebar", ".", "selectbox", "(", "\"Pseudo-labels mode\"", ",", "pl_mode_list", ",", "0", ")", "\n", "\n", "string_to_match", "+=", "(", "self", ".", "pl_mode_choice", "+", "'-'", ")", "\n", "self", ".", "adapt_method_list", "=", "[", "_", "for", "_", "in", "self", ".", "adapt_method_list", "if", "string_to_match", "in", "_", "]", "\n", "\n", "# retrieving args.src_iters and filtering", "\n", "pl_threshold_list", "=", "np", ".", "unique", "(", "[", "i", ".", "replace", "(", "string_to_match", ",", "''", ")", ".", "split", "(", "'-'", ")", "[", "0", "]", "for", "i", "in", "self", ".", "adapt_method_list", "]", ")", ".", "tolist", "(", ")", "\n", "self", ".", "pl_threshold_choice", "=", "st", ".", "sidebar", ".", "selectbox", "(", "\"Pseudo-labels thresholds\"", ",", "pl_threshold_list", ",", "0", ")", "\n", "\n", "string_to_match", "+=", "(", "self", ".", "pl_threshold_choice", "+", "'-'", ")", "\n", "self", ".", "adapt_method_list", "=", "[", "_", "for", "_", "in", "self", ".", "adapt_method_list", "if", "string_to_match", "in", "_", "]", "\n", "\n", "if", "self", ".", "adapt_method_choice", "in", "[", "'class-reset-pseudo-labels'", "]", ":", "\n", "# retrieving args.batch_norm_momentum and filtering", "\n", "\t\t\t\t", "bn_momentum_list", "=", "np", ".", "unique", "(", "[", "i", ".", "replace", "(", "string_to_match", ",", "''", ")", ".", "split", "(", "'-'", ")", "[", "0", "]", "for", "i", "in", "self", ".", "adapt_method_list", "]", ")", ".", "tolist", "(", ")", "\n", "self", ".", "bn_momentum_choice", "=", "st", ".", "sidebar", ".", "selectbox", "(", "\"Batch norm momentum\"", ",", "bn_momentum_list", ",", "0", ")", "\n", "\n", "string_to_match", "+=", "(", "self", ".", "bn_momentum_choice", "+", "'-'", ")", "\n", "self", ".", "adapt_method_list", "=", "[", "_", "for", "_", "in", "self", ".", "adapt_method_list", "if", "string_to_match", "in", "_", "]", "\n", "\n", "# retrieving args.reset_threshold and filtering", "\n", "reset_thrs_list", "=", "np", ".", "unique", "(", "[", "i", ".", "replace", "(", "string_to_match", ",", "''", ")", "for", "i", "in", "self", ".", "adapt_method_list", "]", ")", ".", "tolist", "(", ")", "\n", "self", ".", "reset_thrs_choice", "=", "st", ".", "sidebar", ".", "selectbox", "(", "\"Smart reset threshold\"", ",", "reset_thrs_list", ",", "0", ")", "\n", "\n", "string_to_match", "+=", "self", ".", "reset_thrs_choice", "\n", "self", ".", "adapt_method_list", "=", "[", "_", "for", "_", "in", "self", ".", "adapt_method_list", "if", "string_to_match", "==", "_", "]", "\n", "\n", "", "else", ":", "\n", "# retrieving args.batch_norm_momentum and filtering", "\n", "\t\t\t\t", "bn_momentum_list", "=", "np", ".", "unique", "(", "[", "i", ".", "replace", "(", "string_to_match", ",", "''", ")", "for", "i", "in", "self", ".", "adapt_method_list", "]", ")", ".", "tolist", "(", ")", "\n", "self", ".", "bn_momentum_choice", "=", "st", ".", "sidebar", ".", "selectbox", "(", "\"Batch norm momentum\"", ",", "bn_momentum_list", ",", "0", ")", "\n", "\n", "string_to_match", "+=", "self", ".", "bn_momentum_choice", "\n", "self", ".", "adapt_method_list", "=", "[", "_", "for", "_", "in", "self", ".", "adapt_method_list", "if", "string_to_match", "==", "_", "]", "\n", "\n", "", "", "elif", "self", ".", "adapt_method_choice", "in", "[", "'batch-norm'", ",", "'naive-batch-norm'", "]", ":", "\n", "\n", "# exp folder's format: {self.args.adapt_mode}-{self.args.batch_norm_momentum}", "\n", "\n", "# retrieving args.batch_norm_momentum and filtering", "\n", "\t\t\t", "bn_momentum_list", "=", "np", ".", "unique", "(", "[", "i", ".", "replace", "(", "string_to_match", ",", "''", ")", ".", "split", "(", "'-'", ")", "[", "0", "]", "for", "i", "in", "self", ".", "adapt_method_list", "]", ")", ".", "tolist", "(", ")", "\n", "self", ".", "bn_momentum_choice", "=", "st", ".", "sidebar", ".", "selectbox", "(", "'BN momentum'", ",", "bn_momentum_list", ",", "0", ")", "\n", "\n", "# different format, otherwise issues with values that are contained in others, like 0.1 and 0.15 or 0.0 and 0.01", "\n", "self", ".", "adapt_method_list", "=", "[", "_", "for", "_", "in", "self", ".", "adapt_method_list", "if", "_", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", "==", "self", ".", "bn_momentum_choice", "]", "\n", "\n", "\n", "", "elif", "'no-adaptation'", "==", "self", ".", "adapt_method_choice", ":", "\n", "\t\t\t", "self", ".", "adapt_method_list", "=", "[", "'adapt_no-adaptation'", "]", "\n", "\n", "", "elif", "'style-transfer'", "==", "self", ".", "adapt_method_choice", ":", "\n", "\n", "# retrieving style transfer method and filtering", "\n", "\t\t\t", "style_transfer_method_list", "=", "np", ".", "unique", "(", "[", "i", ".", "replace", "(", "string_to_match", ",", "''", ")", ".", "split", "(", "'-'", ")", "[", "0", "]", "for", "i", "in", "self", ".", "adapt_method_list", "]", ")", ".", "tolist", "(", ")", "\n", "self", ".", "style_transfer_method_choice", "=", "st", ".", "sidebar", ".", "selectbox", "(", "'Style transfer method'", ",", "style_transfer_method_list", ",", "0", ")", "\n", "\n", "string_to_match", "+=", "(", "self", ".", "style_transfer_method_choice", "+", "'-'", ")", "\n", "self", ".", "adapt_method_list", "=", "[", "_", "for", "_", "in", "self", ".", "adapt_method_list", "if", "string_to_match", "in", "_", "]", "\n", "\n", "# retrieving sample selection method and filtering", "\n", "sample_sel_method_list", "=", "np", ".", "unique", "(", "[", "i", ".", "replace", "(", "string_to_match", ",", "''", ")", "for", "i", "in", "self", ".", "adapt_method_list", "]", ")", ".", "tolist", "(", ")", "\n", "self", ".", "sample_sel_method_choice", "=", "st", ".", "sidebar", ".", "selectbox", "(", "\"Sample selection method\"", ",", "sample_sel_method_list", ",", "0", ")", "\n", "\n", "string_to_match", "+=", "self", ".", "sample_sel_method_choice", "\n", "self", ".", "adapt_method_list", "=", "[", "_", "for", "_", "in", "self", ".", "adapt_method_list", "if", "string_to_match", "==", "_", "]", "\n", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "ValueError", "(", "f'Unknown adapt_method_choice [{self.adapt_method_choice}]'", ")", "\n", "\n", "# now the list need to be a single element, otherwise we're missing some parameters", "\n", "", "assert", "len", "(", "self", ".", "adapt_method_list", ")", "==", "1", "\n", "self", ".", "method_name", "=", "self", ".", "adapt_method_list", "[", "0", "]", "\n", "\n", "self", ".", "trg_model_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "adapt_exps_root", ",", "self", ".", "method_name", ")", "\n", "\n", "# path of summary for chosen experiment ", "\n", "self", ".", "current_exp_summary", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "trg_model_dir", ",", "'*summary.pkl'", ")", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.streamlit-app.StreamPlot.get_user_input_sidebar": [[385, 436], ["streamlit.sidebar.selectbox", "streamlit-app.StreamPlot.src_models_list_ids.index", "streamlit.sidebar.selectbox", "streamlit.sidebar.selectbox", "streamlit.sidebar.selectbox", "streamlit.sidebar.selectbox", "os.path.join", "glob.glob", "numpy.unique().tolist", "numpy.unique().tolist", "streamlit.sidebar.selectbox", "streamlit-app.StreamPlot.retrieve_adapt_method_data", "len", "streamlit.sidebar.write", "os.path.join", "len", "streamlit.sidebar.write", "ValueError", "i.split", "glob.glob", "numpy.unique", "numpy.unique", "os.path.join", "len", "[].split", "len", "[].split", "[].split", "i.split", "[].split", "i.split", "i.split"], "methods", ["home.repos.pwc.inspect_result.naver_oasis.None.streamlit-app.StreamPlot.retrieve_adapt_method_data"], ["", "def", "get_user_input_sidebar", "(", "self", ")", ":", "\n", "\n", "\t\t", "self", ".", "src_model_id_choice", "=", "st", ".", "sidebar", ".", "selectbox", "(", "\"Models\"", ",", "self", ".", "src_models_list_ids", ",", "0", ")", "\n", "src_model_index", "=", "self", ".", "src_models_list_ids", ".", "index", "(", "self", ".", "src_model_id_choice", ")", "\n", "self", ".", "src_model_choice", "=", "self", ".", "src_models_list", "[", "src_model_index", "]", "\n", "\n", "self", ".", "benchmark_choice", "=", "st", ".", "sidebar", ".", "selectbox", "(", "\"Benchmark\"", ",", "self", ".", "benchmarks_list", ",", "0", ")", "\n", "\n", "self", ".", "datasets_list", "=", "self", ".", "datasets_list_dict", "[", "self", ".", "benchmark_choice", "]", "\n", "\n", "self", ".", "set", "=", "st", ".", "sidebar", ".", "selectbox", "(", "\"Set\"", ",", "[", "'single'", ",", "'multi'", "]", ",", "0", ")", "\n", "if", "self", ".", "set", "==", "'single'", ":", "\n", "\t\t\t", "self", ".", "datasets_list", "=", "[", "i", "for", "i", "in", "self", ".", "datasets_list", "if", "len", "(", "i", ".", "split", "(", "'_'", ")", "[", "1", "]", ".", "split", "(", "'-'", ")", ")", "==", "1", "]", "\n", "", "elif", "self", ".", "set", "==", "'multi'", ":", "\n", "\t\t\t", "self", ".", "datasets_list", "=", "[", "i", "for", "i", "in", "self", ".", "datasets_list", "if", "len", "(", "i", ".", "split", "(", "'_'", ")", "[", "1", "]", ".", "split", "(", "'-'", ")", ")", ">", "1", "]", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "ValueError", "(", "f'Unknown experiment set [{self.set}]'", ")", "\n", "\n", "", "if", "len", "(", "self", ".", "datasets_list", ")", "==", "0", ":", "\n", "\t\t\t", "st", ".", "sidebar", ".", "write", "(", "'No experiments for this configuration!'", ")", "\n", "return", "False", "\n", "\n", "", "self", ".", "dataset_choice", "=", "st", ".", "sidebar", ".", "selectbox", "(", "\"Dataset\"", ",", "self", ".", "datasets_list", ",", "0", ")", "\n", "\n", "train_list", "=", "[", "i", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "for", "i", "in", "glob", ".", "glob", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "results_dir", ",", "self", ".", "src_model_choice", ",", "\n", "'src2trg'", ",", "self", ".", "dataset_choice", ",", "'*'", ")", ")", "]", "\n", "\n", "self", ".", "train_choice", "=", "st", ".", "sidebar", ".", "selectbox", "(", "\"Parameters trained\"", ",", "train_list", ",", "0", ")", "\n", "\n", "self", ".", "adapt_exps_root", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "results_dir", ",", "self", ".", "src_model_choice", ",", "'src2trg'", ",", "\n", "self", ".", "dataset_choice", ",", "self", ".", "train_choice", ")", "\n", "\n", "self", ".", "trg_models_list", "=", "glob", ".", "glob", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "adapt_exps_root", ",", "'*/*DONE*'", ")", ")", "\n", "\n", "# specific folders are in format 'adapt_METHOD-NAME(_HYPER-PARAMS)'", "\n", "adapt_method_list", "=", "np", ".", "unique", "(", "[", "i", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", ".", "split", "(", "'adapt_'", ")", "[", "-", "1", "]", ".", "split", "(", "'_'", ")", "[", "0", "]", "\n", "for", "i", "in", "self", ".", "trg_models_list", "]", ")", ".", "tolist", "(", ")", "\n", "\n", "if", "len", "(", "adapt_method_list", ")", "==", "0", ":", "\n", "\t\t\t", "st", ".", "sidebar", ".", "write", "(", "'No models learned for this configuration!'", ")", "\n", "return", "False", "\n", "\n", "", "self", ".", "adapt_method_choice", "=", "st", ".", "sidebar", ".", "selectbox", "(", "\"Adapt method\"", ",", "adapt_method_list", ",", "0", ")", "\n", "\n", "######## retrieve directories and summaries from selected adapt method", "\n", "self", ".", "retrieve_adapt_method_data", "(", ")", "\n", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.streamlit-app.StreamPlot.setup_image_slider": [[438, 452], ["sorted", "streamlit.sidebar.write", "streamlit.sidebar.markdown", "streamlit.sidebar.slider", "streamlit-app.StreamPlot.define_fig", "streamlit-app.StreamPlot.show_image", "streamlit-app.StreamPlot.col1.pyplot", "glob.glob", "os.path.join", "len"], "methods", ["home.repos.pwc.inspect_result.naver_oasis.None.streamlit-app.StreamPlot.define_fig", "home.repos.pwc.inspect_result.naver_oasis.None.streamlit-app.StreamPlot.show_image"], ["", "def", "setup_image_slider", "(", "self", ")", ":", "\n", "\n", "# retrieving saved images", "\n", "\t\t", "self", ".", "saved_images", "=", "sorted", "(", "\n", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "trg_model_dir", ",", "f'results/*concat.png'", ")", ")", ")", "\n", "\n", "st", ".", "sidebar", ".", "write", "(", "'----'", ")", "\n", "st", ".", "sidebar", ".", "markdown", "(", "'**Frame selector (for displaying)**'", ")", "\n", "self", ".", "frame", "=", "st", ".", "sidebar", ".", "slider", "(", "f\"Choose a frame for {self.dataset}\"", ",", "0", ",", "\n", "len", "(", "self", ".", "saved_images", ")", "-", "1", ",", "0", ")", "\n", "\n", "fig", ",", "axes", "=", "self", ".", "define_fig", "(", "1", ")", "\n", "self", ".", "show_image", "(", "axes", ")", "\n", "self", ".", "col1", ".", "pyplot", "(", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.streamlit-app.StreamPlot.load_and_compute_results": [[454, 495], ["open", "pickle.load", "summary_file.split", "range", "len", "[].astype", "numpy.nanmean", "numpy.nanmean", "numpy.nanmean", "numpy.nanmean", "print", "numpy.delete", "numpy.delete", "numpy.delete", "numpy.delete", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange"], "methods", ["None"], ["", "def", "load_and_compute_results", "(", "self", ",", "summary_file", ")", ":", "\n", "\n", "\t\t", "with", "open", "(", "summary_file", ",", "'rb'", ")", "as", "f", ":", "\n", "\t\t\t", "res_dict", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "# Computing metrics for avg-image based mesures", "\n", "", "miou_init_list", "=", "res_dict", "[", "'mious_init'", "]", "\n", "miou_final_list", "=", "res_dict", "[", "'mious_final'", "]", "\n", "pixel_acc_init_list", "=", "res_dict", "[", "'pixel_acc_init'", "]", "\n", "pixel_acc_final_list", "=", "res_dict", "[", "'pixel_acc_final'", "]", "\n", "mean_acc_init_list", "=", "res_dict", "[", "'mean_acc_init'", "]", "\n", "mean_acc_final_list", "=", "res_dict", "[", "'mean_acc_final'", "]", "\n", "\n", "dataset_choice", "=", "summary_file", ".", "split", "(", "'/'", ")", "[", "-", "4", "]", "# note, self.dataset_choice does not work well for cross_exp mode", "\n", "\n", "try", ":", "\n", "\t\t\t", "for", "i", "in", "range", "(", "len", "(", "miou_init_list", ")", ")", ":", "\n", "\t\t\t\t", "img_gt", "=", "self", ".", "labels_per_img_dict", "[", "dataset_choice", "]", "[", "i", "]", ".", "astype", "(", "int", ")", "\n", "miou_init_list", "[", "i", "]", "[", "np", ".", "delete", "(", "np", ".", "arange", "(", "19", ")", ",", "img_gt", ")", "]", "=", "np", ".", "nan", "\n", "miou_final_list", "[", "i", "]", "[", "np", ".", "delete", "(", "np", ".", "arange", "(", "19", ")", ",", "img_gt", ")", "]", "=", "np", ".", "nan", "\n", "# averaging mious for different classes", "\n", "", "avg_miou_init_list", "=", "[", "np", ".", "nanmean", "(", "miou", ")", "for", "miou", "in", "miou_init_list", "]", "\n", "avg_miou_final_list", "=", "[", "np", ".", "nanmean", "(", "miou", ")", "for", "miou", "in", "miou_final_list", "]", "\n", "", "except", ":", "\n", "\t\t\t", "print", "(", "'Error retrieving image GT classes - setting np.nan list'", ")", "\n", "miou_init_list", "=", "[", "np", ".", "nan", "for", "miou", "in", "miou_init_list", "]", "\n", "miou_final_list", "=", "[", "np", ".", "nan", "for", "miou", "in", "miou_final_list", "]", "\n", "avg_miou_init_list", "=", "[", "np", ".", "nan", "for", "miou", "in", "miou_init_list", "]", "\n", "avg_miou_final_list", "=", "[", "np", ".", "nan", "for", "miou", "in", "miou_final_list", "]", "\n", "\n", "", "self", ".", "current_seq_pixel_acc_init", "=", "pixel_acc_init_list", "\n", "self", ".", "current_seq_pixel_acc_final", "=", "pixel_acc_final_list", "\n", "self", ".", "current_seq_mean_acc_init", "=", "mean_acc_init_list", "\n", "self", ".", "current_seq_mean_acc_final", "=", "mean_acc_final_list", "\n", "self", ".", "current_seq_miou_init", "=", "miou_init_list", "\n", "self", ".", "current_seq_miou_final", "=", "miou_final_list", "\n", "\n", "# this is for FullCityscapes and other datasets for which some frames don't have GT", "\n", "available_indices", "=", "res_dict", "[", "'iter'", "]", "\n", "\n", "return", "pixel_acc_init_list", ",", "pixel_acc_final_list", ",", "avg_miou_init_list", ",", "avg_miou_final_list", ",", "available_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.streamlit-app.StreamPlot.print_current_exp_results": [[497, 531], ["streamlit-app.StreamPlot.col2.write", "streamlit-app.StreamPlot.load_and_compute_results", "streamlit-app.StreamPlot.col2.write", "streamlit-app.StreamPlot.col2.markdown", "streamlit-app.StreamPlot.col2.write", "streamlit-app.StreamPlot.col2.write", "streamlit-app.StreamPlot.col2.write", "streamlit-app.StreamPlot.col2.write", "range", "streamlit-app.StreamPlot.col2.write", "round", "round", "round", "round", "round", "round", "round", "round", "round", "round", "round", "round", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.naver_oasis.None.streamlit-app.StreamPlot.load_and_compute_results"], ["", "def", "print_current_exp_results", "(", "self", ")", ":", "\n", "\n", "\t\t", "self", ".", "col2", ".", "write", "(", "'NOTE: not computing whole dataset\\'s numbers'", ")", "\n", "\n", "outputs", "=", "self", ".", "load_and_compute_results", "(", "self", ".", "current_exp_summary", ")", "\n", "\n", "pixel_acc_init_list", "=", "outputs", "[", "0", "]", "\n", "pixel_acc_final_list", "=", "outputs", "[", "1", "]", "\n", "miou_init_list", "=", "outputs", "[", "2", "]", "\n", "miou_final_list", "=", "outputs", "[", "3", "]", "\n", "available_indices", "=", "outputs", "[", "4", "]", "\n", "\n", "self", ".", "col2", ".", "write", "(", "'----'", ")", "\n", "self", ".", "col2", ".", "markdown", "(", "'**Metrics computed by averaging single images**'", ")", "\n", "self", ".", "col2", ".", "write", "(", "f'Average mIoUs    : {round(np.mean(miou_init_list) * 100., 2)} '", "+", "f' --> {round(np.mean(miou_final_list) * 100., 2)} | Selected image '", "+", "f'{round(miou_init_list[self.frame]*100., 2)} --> '", "+", "f'{round(miou_final_list[self.frame]*100., 2)}'", ")", "\n", "\n", "self", ".", "col2", ".", "write", "(", "f'Average PixelAcc : {round(np.mean(self.current_seq_pixel_acc_init), 2)} '", "+", "f' --> {round(np.mean(self.current_seq_pixel_acc_final), 2)} | Selected image '", "+", "f'{round(self.current_seq_pixel_acc_init[self.frame], 2)} -->'", "+", "f'{round(self.current_seq_pixel_acc_final[self.frame], 2)}'", ")", "\n", "\n", "self", ".", "col2", ".", "write", "(", "f'Average MeanAcc  : {round(np.mean(self.current_seq_mean_acc_init)* 100., 2)} '", "+", "f'--> {round(np.mean(self.current_seq_mean_acc_final) * 100., 2)} | Selected image '", "+", "f'{round(self.current_seq_mean_acc_init[self.frame]*100., 2)} --> '", "+", "f'{round(self.current_seq_mean_acc_final[self.frame]*100., 2)}'", ")", "\n", "\n", "self", ".", "col2", ".", "write", "(", "'----'", ")", "\n", "for", "i", "in", "range", "(", "19", ")", ":", "\n", "\t\t\t", "self", ".", "col2", ".", "write", "(", "f'**{GTA5_labels_dict[i]}**:'", "+", "f'{self.current_seq_miou_init[self.frame][i]*100.:.2f}'", "+", "f'--> {self.current_seq_miou_final[self.frame][i]*100.:.2f}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.streamlit-app.StreamPlot.plot_seq_results": [[533, 603], ["streamlit.sidebar.write", "streamlit-app.StreamPlot.load_and_compute_results", "len", "streamlit.sidebar.text_input", "streamlit.sidebar.text_input", "streamlit.sidebar.button", "streamlit.sidebar.selectbox", "streamlit.sidebar.text_input", "int", "streamlit.sidebar.button", "streamlit.sidebar.checkbox", "streamlit-app.StreamPlot.col1.text_input", "streamlit-app.StreamPlot.col1.button", "[].split", "len", "matplotlib.subplots", "streamlit-app.StreamPlot.plt_dict[].set_title", "streamlit-app.StreamPlot.plt_dict[].set_ylim", "streamlit-app.StreamPlot.plt_dict[].set_yticks", "streamlit-app.StreamPlot.col1.pyplot", "streamlit.sidebar.text_input", "streamlit-app.StreamPlot.plt_dict[].append", "streamlit-app.StreamPlot.plt_dict[].plot", "line.set_label", "streamlit-app.StreamPlot.plt_dict[].set_ylim", "streamlit-app.StreamPlot.plt_dict[].set_yticks", "streamlit-app.StreamPlot.plt_dict[].set_title", "streamlit-app.StreamPlot.plt_dict[].legend", "range", "streamlit-app.StreamPlot.col1.pyplot", "streamlit-app.StreamPlot.col1.pyplot", "print", "matplotlib.savefig", "numpy.arange", "numpy.arange", "numpy.mean", "numpy.mean", "numpy.arange", "numpy.arange", "float", "float", "float", "float", "range", "float", "float", "float", "float", "float", "streamlit-app.StreamPlot.plt_dict[].axvline", "streamlit-app.StreamPlot.dataset_choice.split", "len", "streamlit-app.StreamPlot.plt_dict[].axvline", "streamlit-app.StreamPlot.dataset_choice.lstrip().split", "print", "streamlit-app.StreamPlot.plt_dict[].axvline", "ValueError", "streamlit-app.StreamPlot.dataset_choice.lstrip().split", "streamlit-app.StreamPlot.dataset_choice.lstrip", "streamlit-app.StreamPlot.dataset_choice.lstrip"], "methods", ["home.repos.pwc.inspect_result.naver_oasis.None.streamlit-app.StreamPlot.load_and_compute_results"], ["", "", "def", "plot_seq_results", "(", "self", ")", ":", "\n", "\n", "\t\t", "st", ".", "sidebar", ".", "write", "(", "'Plotting options'", ")", "\n", "\n", "_", ",", "_", ",", "miou_init_list", ",", "miou_final_list", ",", "_", ",", "=", "self", ".", "load_and_compute_results", "(", "self", ".", "current_exp_summary", ")", "\n", "\n", "num_seqs", "=", "len", "(", "self", ".", "dataset_choice", ".", "split", "(", "'_'", ")", "[", "1", "]", ".", "split", "(", "'-'", ")", ")", "\n", "seqs_len", "=", "len", "(", "miou_final_list", ")", "//", "num_seqs", "\n", "\n", "y_lim_min", "=", "st", ".", "sidebar", ".", "text_input", "(", "\"ylim (min)\"", ",", "\"0.0\"", ")", "\n", "y_lim_max", "=", "st", ".", "sidebar", ".", "text_input", "(", "\"ylim (max)\"", ",", "\"1.0\"", ")", "\n", "\n", "if", "st", ".", "sidebar", ".", "button", "(", "\"Init sequence plot sequence\"", ",", "key", "=", "\"A\"", ")", ":", "\n", "\t\t\t", "self", ".", "plt_dict", "[", "'fig'", "]", ",", "self", ".", "plt_dict", "[", "'ax'", "]", "=", "plt", ".", "subplots", "(", "1", ",", "1", ")", "#,figsize=(5,5))", "\n", "self", ".", "plt_dict", "[", "'ax'", "]", ".", "set_title", "(", "\"mIoU (average over classes in images)\"", ")", "\n", "self", ".", "plt_dict", "[", "'ax'", "]", ".", "set_ylim", "(", "[", "float", "(", "y_lim_min", ")", ",", "float", "(", "y_lim_max", ")", "]", ")", "\n", "self", ".", "plt_dict", "[", "'ax'", "]", ".", "set_yticks", "(", "np", ".", "arange", "(", "float", "(", "y_lim_min", ")", ",", "float", "(", "y_lim_max", ")", ",", "step", "=", "0.1", ")", ")", "\n", "\n", "self", ".", "plt_dict", "[", "'miou_final_ma'", "]", "=", "[", "]", "\n", "self", ".", "plt_dict", "[", "'method_name'", "]", "=", "[", "]", "\n", "self", ".", "col1", ".", "pyplot", "(", "self", ".", "plt_dict", "[", "'fig'", "]", ")", "\n", "\n", "", "color_list", "=", "[", "'tab:blue'", ",", "'tab:orange'", ",", "'tab:green'", ",", "\n", "'firebrick'", ",", "'orchid'", ",", "'tab:pink'", ",", "'tab:cyan'", "\n", "]", "\n", "color", "=", "st", ".", "sidebar", ".", "selectbox", "(", "\"Color\"", ",", "color_list", ",", "0", ")", "\n", "l_width", "=", "st", ".", "sidebar", ".", "text_input", "(", "\"Line width\"", ",", "\"1.0\"", ")", "\n", "ma_size", "=", "int", "(", "st", ".", "sidebar", ".", "text_input", "(", "'Moving average size'", ",", "'5'", ")", ")", "\n", "if", "st", ".", "sidebar", ".", "button", "(", "\"Add method to plot\"", ",", "key", "=", "\"A\"", ")", ":", "\n", "\t\t\t", "miou_final_ma", "=", "[", "np", ".", "mean", "(", "miou_final_list", "[", "i", "-", "ma_size", ":", "i", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "miou_final_list", ")", ")", "]", "\n", "self", ".", "plt_dict", "[", "'miou_final_ma'", "]", ".", "append", "(", "miou_final_ma", ")", "\n", "line", ",", "=", "self", ".", "plt_dict", "[", "'ax'", "]", ".", "plot", "(", "miou_final_ma", ",", "linewidth", "=", "float", "(", "l_width", ")", ",", "c", "=", "color", ")", "\n", "\n", "line", ".", "set_label", "(", "self", ".", "method_name", ")", "\n", "self", ".", "plt_dict", "[", "'ax'", "]", ".", "set_ylim", "(", "[", "float", "(", "y_lim_min", ")", ",", "float", "(", "y_lim_max", ")", "]", ")", "\n", "self", ".", "plt_dict", "[", "'ax'", "]", ".", "set_yticks", "(", "np", ".", "arange", "(", "float", "(", "y_lim_min", ")", ",", "float", "(", "y_lim_max", ")", ",", "step", "=", "0.1", ")", ")", "\n", "self", ".", "plt_dict", "[", "'ax'", "]", ".", "set_title", "(", "\"mIoU (average over classes in images)\"", ")", "\n", "\n", "self", ".", "plt_dict", "[", "'ax'", "]", ".", "legend", "(", "\n", "loc", "=", "'lower center'", ",", "fancybox", "=", "False", ",", "shadow", "=", "False", ",", "ncol", "=", "1", ",", "\n", "bbox_to_anchor", "=", "(", "0.5", ",", "-", "0.5", ")", ")", "\n", "\n", "cum_subseq_len", "=", "0", "\n", "for", "i", "in", "range", "(", "num_seqs", "-", "1", ")", ":", "\n", "\t\t\t\t", "if", "self", ".", "benchmark_choice", "==", "'SYNTHIA'", ":", "\n", "\t\t\t\t\t", "self", ".", "plt_dict", "[", "'ax'", "]", ".", "axvline", "(", "x", "=", "seqs_len", "*", "(", "i", "+", "1", ")", ",", "c", "=", "'k'", ",", "linewidth", "=", "0.25", ")", "\n", "", "elif", "self", ".", "benchmark_choice", "==", "'Cityscapes'", ":", "\n", "\t\t\t\t\t", "subseq", "=", "self", ".", "dataset_choice", ".", "lstrip", "(", "'Cityscapes_'", ")", ".", "split", "(", "'-'", ")", "[", "i", "]", "\n", "subseq_len", "=", "Cityscapes_img_per_seq_dict", "[", "subseq", "]", "\n", "cum_subseq_len", "+=", "subseq_len", "\n", "self", ".", "plt_dict", "[", "'ax'", "]", ".", "axvline", "(", "x", "=", "cum_subseq_len", ",", "c", "=", "'k'", ",", "linewidth", "=", "0.25", ")", "\n", "", "elif", "self", ".", "benchmark_choice", "==", "'ACDC'", ":", "\n", "\t\t\t\t\t", "subseq", "=", "self", ".", "dataset_choice", ".", "lstrip", "(", "'ACDC_'", ")", ".", "split", "(", "'-'", ")", "[", "i", "]", "\n", "subseq_len", "=", "ACDC_img_per_seq_dict", "[", "subseq", "]", "\n", "print", "(", "f'Subseq {subseq} : {subseq_len}'", ")", "\n", "cum_subseq_len", "+=", "subseq_len", "\n", "self", ".", "plt_dict", "[", "'ax'", "]", ".", "axvline", "(", "x", "=", "cum_subseq_len", ",", "c", "=", "'k'", ",", "linewidth", "=", "0.25", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "raise", "ValueError", "(", "'Unknown benchmark.'", ")", "\n", "\n", "", "", "self", ".", "col1", ".", "pyplot", "(", "self", ".", "plt_dict", "[", "'fig'", "]", ")", "\n", "\n", "", "if", "st", ".", "sidebar", ".", "checkbox", "(", "\"Plot\"", ",", "key", "=", "\"A\"", ")", ":", "\n", "\t\t\t", "self", ".", "col1", ".", "pyplot", "(", "self", ".", "plt_dict", "[", "'fig'", "]", ")", "\n", "\n", "", "file_name", "=", "self", ".", "col1", ".", "text_input", "(", "'File name'", ",", "'plot'", ")", "\n", "if", "self", ".", "col1", ".", "button", "(", "'Save plot as pdf'", ")", ":", "\n", "\t\t\t", "print", "(", "'Saving plot'", ")", "\n", "plt", ".", "savefig", "(", "f'{file_name}.pdf'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.streamlit-app.StreamPlot.compute_res_for_table": [[606, 646], ["streamlit.sidebar.write", "streamlit.sidebar.write", "dict", "streamlit.sidebar.button", "print", "glob.glob", "print", "print", "os.path.join", "print", "print", "enumerate", "open", "print", "pickle.dump", "streamlit-app.StreamPlot.load_and_compute_results", "numpy.mean", "numpy.mean", "numpy.unique", "numpy.unique", "summary.split", "print", "len", "print", "summary.split", "len", "_.split", "summary.split", "_.split", "_.split"], "methods", ["home.repos.pwc.inspect_result.naver_oasis.None.streamlit-app.StreamPlot.load_and_compute_results"], ["", "", "def", "compute_res_for_table", "(", "self", ")", ":", "\n", "\t\t", "st", ".", "sidebar", ".", "write", "(", "'------------'", ")", "\n", "st", ".", "sidebar", ".", "write", "(", "'**Retrieve and process results for all datasets (Table 1)**'", ")", "\n", "self", ".", "miou_all_exps_dict", "=", "dict", "(", ")", "\n", "if", "st", ".", "sidebar", ".", "button", "(", "'Compute results'", ",", "key", "=", "'A'", ")", ":", "\n", "\n", "\t\t\t", "print", "(", "'Retrieving all summaries (may take a while)'", ")", "\n", "self", ".", "all_summaries", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "results_dir", ",", "self", ".", "src_model_choice", ",", "\n", "'src2trg/*/*/*/*_summary.pkl'", ")", ")", "\n", "print", "(", "'Done!'", ")", "\n", "\n", "table_exp_choices", "=", "[", "'Cityscapes_multi-AW'", ",", "'Cityscapes_multi-O'", ",", "\n", "'ACDC_multi'", ",", "'SYNTHIA_multi'", "]", "\n", "\n", "for", "table_exp_choice", "in", "table_exp_choices", ":", "\n", "\t\t\t\t", "print", "(", "f'Computing results for {table_exp_choice}'", ")", "\n", "self", ".", "table_exp_summaries", "=", "[", "_", "for", "_", "in", "self", ".", "all_summaries", "\n", "if", "_", ".", "split", "(", "'/'", ")", "[", "3", "]", "in", "self", ".", "exp_choices_dict", "[", "table_exp_choice", "]", "]", "\n", "\n", "self", ".", "miou_current_exp_dict", "=", "{", "k_", ":", "{", "}", "\n", "for", "k_", "in", "np", ".", "unique", "(", "[", "_", ".", "split", "(", "'/'", ")", "[", "-", "3", "]", "+", "'/'", "+", "_", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "\n", "for", "_", "in", "self", ".", "table_exp_summaries", "]", ")", "}", "\n", "print", "(", "'Retrieving results'", ")", "\n", "for", "n", ",", "summary", "in", "enumerate", "(", "self", ".", "table_exp_summaries", ")", ":", "\n", "\t\t\t\t\t", "method_name_", "=", "summary", ".", "split", "(", "'/'", ")", "[", "-", "3", "]", "+", "'/'", "+", "summary", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "\n", "dataset_name_", "=", "summary", ".", "split", "(", "'/'", ")", "[", "3", "]", "\n", "if", "(", "n", "%", "100", ")", "==", "0", ":", "\n", "\t\t\t\t\t\t", "print", "(", "n", ",", "len", "(", "self", ".", "table_exp_summaries", ")", ")", "\n", "", "outputs", "=", "self", ".", "load_and_compute_results", "(", "summary", ")", "\n", "_", ",", "_", ",", "_", ",", "miou_final_list", ",", "_", "=", "outputs", "\n", "miou_all", "=", "np", ".", "mean", "(", "miou_final_list", ")", "\n", "if", "len", "(", "self", ".", "miou_current_exp_dict", "[", "method_name_", "]", ")", "==", "0", ":", "\n", "\t\t\t\t\t\t", "print", "(", "method_name_", ",", "miou_all", ")", "\n", "", "self", ".", "miou_current_exp_dict", "[", "method_name_", "]", "[", "dataset_name_", "]", "=", "miou_all", "\n", "", "self", ".", "miou_all_exps_dict", "[", "table_exp_choice", "]", "=", "self", ".", "miou_current_exp_dict", "\n", "", "with", "open", "(", "f\"./tex_tables/new_results.pkl\"", ",", "\"wb\"", ")", "as", "f", ":", "\n", "\t\t\t\t", "print", "(", "'Saving'", ")", "\n", "pickle", ".", "dump", "(", "self", ".", "miou_all_exps_dict", ",", "f", ")", "\n", "", "print", "(", "'Done'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.streamlit-app.main": [[648, 699], ["print", "streamlit.set_page_config", "streamlit.cache", "streamlit.cache", "streamlit-app.main.define_object"], "function", ["None"], ["", "", "", "def", "main", "(", ")", ":", "\n", "\n", "\t", "print", "(", "'\\n---------------'", ")", "\n", "st", ".", "set_page_config", "(", "\n", "layout", "=", "'wide'", ",", "page_title", "=", "'OASIS'", ")", "\n", "\n", "@", "st", ".", "cache", "(", "allow_output_mutation", "=", "True", ")", "\n", "def", "define_object", "(", ")", ":", "\n", "\t\t", "return", "StreamPlot", "(", ")", "\n", "\n", "", "@", "st", ".", "cache", "(", "allow_output_mutation", "=", "True", ")", "\n", "def", "init_dict", "(", ")", ":", "\n", "\t\t", "return", "{", "'ax'", ":", "None", ",", "'fig'", ":", "None", ",", "'miou_final_ma'", ":", "[", "]", ",", "'method_name'", ":", "[", "]", ",", "\n", "'acc_final'", ":", "[", "]", "}", "\n", "\n", "", "sp", "=", "define_object", "(", ")", "\n", "\n", "sp", ".", "plt_dict", "=", "init_dict", "(", ")", "\n", "\n", "# page payout", "\n", "st", ".", "title", "(", "'Online Unsupervised Domain Adaptation (OUDA)'", ")", "\n", "sp", ".", "col1", ",", "sp", ".", "col2", "=", "st", ".", "columns", "(", "2", ")", "\n", "\n", "# setup sidebar and get user input", "\n", "st", ".", "sidebar", ".", "markdown", "(", "'**Model/Dataset specifics**'", ")", "\n", "found_exps", "=", "sp", ".", "get_user_input_sidebar", "(", ")", "\n", "\n", "if", "not", "found_exps", ":", "\n", "\t\t", "print", "(", "'No experiment found!'", ")", "\n", "return", "-", "1", "\n", "\n", "", "print", "(", "f'Source model: {sp.src_model_choice} | Adapt method: {sp.method_name}'", ")", "\n", "print", "(", "f'{sp.trg_model_dir}'", ")", "\n", "\n", "# setup slider to explore images", "\n", "print", "(", "'Setting up image slider'", ")", "\n", "sp", ".", "setup_image_slider", "(", ")", "\n", "\n", "# compute and print average results for this experiment", "\n", "print", "(", "'Computing and printing exp results'", ")", "\n", "sp", ".", "print_current_exp_results", "(", ")", "\n", "\n", "# plot sequence results", "\n", "print", "(", "'Plotting'", ")", "\n", "st", ".", "sidebar", ".", "write", "(", "'----'", ")", "\n", "st", ".", "sidebar", ".", "markdown", "(", "'**Plot sequences**'", ")", "\n", "if", "st", ".", "sidebar", ".", "checkbox", "(", "'See panel'", ",", "key", "=", "'A'", ")", ":", "\n", "\t\t", "sp", ".", "plot_seq_results", "(", ")", "\n", "\n", "# computing all results associated with selected exp and making tex table", "\n", "", "sp", ".", "compute_res_for_table", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.save_labels_per_image.get_arguments": [[25, 38], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_arguments", "(", ")", ":", "\n", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"User parameters\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--trg_dataset\"", ",", "type", "=", "str", ",", "default", "=", "'Cityscapes'", ",", "\n", "help", "=", "\"Which target dataset to transfer to\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--trg_data_dir\"", ",", "type", "=", "str", ",", "default", "=", "'./data'", ",", "\n", "help", "=", "\"Directory of target dataset\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--scene\"", ",", "type", "=", "str", ",", "default", "=", "'01'", ",", "\n", "help", "=", "\"Scene for Cityscapes/ACDC/SYNTHIA)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--cond\"", ",", "type", "=", "str", ",", "default", "=", "'clone'", ",", "\n", "help", "=", "\"Condition for Cityscapes/ACDC/SYNTHIA)\"", ")", "\n", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.None.save_labels_per_image.main": [[41, 91], ["map", "torch.utils.data.DataLoader", "os.path.join", "enumerate", "args.input_size.split", "len", "args.scene.split", "args.cond.split", "dataset.cityscapes_dataset.Cityscapes", "labels_per_image.append", "open", "pickle.dump", "args.scene.split", "dataset.synthia_dataset.SYNTHIA", "print", "numpy.unique", "dataset.acdc_dataset.ACDC", "len"], "function", ["None"], ["def", "main", "(", ")", ":", "\n", "\n", "\t", "args", ".", "input_size", "=", "'1280,720'", "\n", "w", ",", "h", "=", "map", "(", "int", ",", "args", ".", "input_size", ".", "split", "(", "','", ")", ")", "\n", "args", ".", "input_size", "=", "(", "w", ",", "h", ")", "\n", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# loading target loader ------------------------------------------", "\n", "if", "len", "(", "args", ".", "scene", ".", "split", "(", "'-'", ")", ")", ">", "1", ":", "\n", "\t\t", "scene_list", "=", "args", ".", "scene", ".", "split", "(", "'-'", ")", "\n", "cond_list", "=", "args", ".", "cond", ".", "split", "(", "'-'", ")", "\n", "", "else", ":", "\n", "\t\t", "scene_list", "=", "[", "args", ".", "scene", "]", "\n", "cond_list", "=", "[", "args", ".", "cond", "]", "\n", "\n", "", "if", "args", ".", "trg_dataset", "==", "'Cityscapes'", ":", "\n", "\t\t", "trg_parent_set", "=", "Cityscapes", "(", "\n", "CITYSCAPES_ROOT", ",", "WEATHER_CITYSCAPES_ROOT", ",", "scene_list", ",", "\n", "cond_list", ",", "crop_size", "=", "args", ".", "input_size", ",", "mean", "=", "IMG_MEAN", ",", "\n", "alpha", "=", "0.02", ",", "beta", "=", "0.01", ",", "dropsize", "=", "0.005", ",", "pattern", "=", "3", ")", "\n", "\n", "", "elif", "args", ".", "trg_dataset", "==", "'SYNTHIA'", ":", "\n", "\t\t", "trg_parent_set", "=", "SYNTHIA", "(", "\n", "SYNTHIA_ROOT", ",", "scene_list", ",", "cond_list", ",", "\n", "camera_id", "=", "'0'", ",", "crop_size", "=", "args", ".", "input_size", ",", "mean", "=", "IMG_MEAN", ",", "\n", "set", "=", "'all'", ",", "num_images", "=", "300", ")", "\n", "\n", "", "elif", "args", ".", "trg_dataset", "==", "'ACDC'", ":", "\n", "\t\t", "trg_parent_set", "=", "ACDC", "(", "\n", "ACDC_ROOT", ",", "scene_list", ",", "cond_list", ",", "\n", "crop_size", "=", "args", ".", "input_size", ",", "mean", "=", "IMG_MEAN", ")", "\n", "\n", "", "trg_train_loader", "=", "data", ".", "DataLoader", "(", "\n", "trg_parent_set", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ")", "\n", "summary_file_path", "=", "os", ".", "path", ".", "join", "(", "\n", "f'./dataset'", ",", "f'{args.trg_dataset}_labels_per_image'", ",", "\n", "f'{args.trg_dataset}_{args.scene}_{args.cond}_labels_per_image.pkl'", ")", "\n", "\n", "labels_per_image", "=", "[", "]", "\n", "\n", "for", "i", ",", "trg_batch", "in", "enumerate", "(", "trg_train_loader", ")", ":", "\n", "\t\t", "if", "(", "i", "%", "50", ")", "==", "0", ":", "\n", "\t\t\t", "print", "(", "f'Processing img [{i}/{len(trg_train_loader)}]'", ")", "\n", "", "trg_image", ",", "trg_labels", ",", "_", ",", "trg_image_name", "=", "trg_batch", "\n", "labels_per_image", ".", "append", "(", "np", ".", "unique", "(", "trg_labels", ")", ")", "\n", "\n", "", "with", "open", "(", "summary_file_path", ",", "'wb'", ")", "as", "f", ":", "\n", "\t\t", "pickle", ".", "dump", "(", "labels_per_image", ",", "f", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.utils.loss.CrossEntropy2d.__init__": [[14, 18], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.naver_oasis.dataset.cityscapes_dataset.Cityscapes.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size_average", "=", "True", ",", "ignore_label", "=", "255", ")", ":", "\n", "        ", "super", "(", "CrossEntropy2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "size_average", "=", "size_average", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.utils.loss.CrossEntropy2d.forward": [[19, 42], ["predict[].view.size", "predict[].view.transpose().transpose().contiguous", "predict[].view", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "predict[].view.dim", "target.dim", "predict[].view.size", "target.size", "predict[].view.size", "target.size", "predict[].view.size", "target.size", "predict[].view.size", "target.size", "predict[].view.size", "target.size", "predict[].view.size", "target.size", "target.data.dim", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "predict[].view.transpose().transpose", "predict[].view.transpose", "target_mask.view().repeat", "target_mask.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "predict", ",", "target", ",", "weight", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n            Args:\n                predict:(n, c, h, w)\n                target:(n, h, w)\n                weight (Tensor, optional): a manual rescaling weight given to each class.\n                                           If given, has to be a Tensor of size \"nclasses\"\n        \"\"\"", "\n", "assert", "not", "target", ".", "requires_grad", "\n", "assert", "predict", ".", "dim", "(", ")", "==", "4", "\n", "assert", "target", ".", "dim", "(", ")", "==", "3", "\n", "assert", "predict", ".", "size", "(", "0", ")", "==", "target", ".", "size", "(", "0", ")", ",", "\"{0} vs {1} \"", ".", "format", "(", "predict", ".", "size", "(", "0", ")", ",", "target", ".", "size", "(", "0", ")", ")", "\n", "assert", "predict", ".", "size", "(", "2", ")", "==", "target", ".", "size", "(", "1", ")", ",", "\"{0} vs {1} \"", ".", "format", "(", "predict", ".", "size", "(", "2", ")", ",", "target", ".", "size", "(", "1", ")", ")", "\n", "assert", "predict", ".", "size", "(", "3", ")", "==", "target", ".", "size", "(", "2", ")", ",", "\"{0} vs {1} \"", ".", "format", "(", "predict", ".", "size", "(", "3", ")", ",", "target", ".", "size", "(", "3", ")", ")", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "predict", ".", "size", "(", ")", "\n", "target_mask", "=", "(", "target", ">=", "0", ")", "*", "(", "target", "!=", "self", ".", "ignore_label", ")", "\n", "target", "=", "target", "[", "target_mask", "]", "\n", "if", "not", "target", ".", "data", ".", "dim", "(", ")", ":", "\n", "            ", "return", "Variable", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "", "predict", "=", "predict", ".", "transpose", "(", "1", ",", "2", ")", ".", "transpose", "(", "2", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "predict", "=", "predict", "[", "target_mask", ".", "view", "(", "n", ",", "h", ",", "w", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "c", ")", "]", ".", "view", "(", "-", "1", ",", "c", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "predict", ",", "target", ",", "weight", "=", "weight", ",", "size_average", "=", "self", ".", "size_average", ")", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.naver_oasis.utils.core.svd": [[11, 25], ["feat.size", "torch.mean", "mean.unsqueeze().expand_as.unsqueeze().expand_as", "feat.clone", "torch.svd", "torch.mm().div", "torch.mm", "torch.eye().to", "mean.unsqueeze().expand_as.unsqueeze", "feat.clone.t", "torch.mm", "torch.eye", "feat.clone.t"], "function", ["home.repos.pwc.inspect_result.naver_oasis.utils.core.svd"], ["def", "svd", "(", "feat", ",", "iden", "=", "False", ",", "device", "=", "'cpu'", ")", ":", "\n", "    ", "size", "=", "feat", ".", "size", "(", ")", "\n", "mean", "=", "torch", ".", "mean", "(", "feat", ",", "1", ")", "\n", "mean", "=", "mean", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "feat", ")", "\n", "_feat", "=", "feat", ".", "clone", "(", ")", "\n", "_feat", "-=", "mean", "\n", "if", "size", "[", "1", "]", ">", "1", ":", "\n", "        ", "conv", "=", "torch", ".", "mm", "(", "_feat", ",", "_feat", ".", "t", "(", ")", ")", ".", "div", "(", "size", "[", "1", "]", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "conv", "=", "torch", ".", "mm", "(", "_feat", ",", "_feat", ".", "t", "(", ")", ")", "\n", "", "if", "iden", ":", "\n", "        ", "conv", "+=", "torch", ".", "eye", "(", "size", "[", "0", "]", ")", ".", "to", "(", "device", ")", "\n", "", "u", ",", "e", ",", "v", "=", "torch", ".", "svd", "(", "conv", ",", "some", "=", "False", ")", "\n", "return", "u", ",", "e", ",", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.utils.core.get_squeeze_feat": [[27, 31], ["feat.squeeze", "feat.squeeze.size", "feat.squeeze.view().clone", "feat.squeeze.view"], "function", ["None"], ["", "def", "get_squeeze_feat", "(", "feat", ")", ":", "\n", "    ", "_feat", "=", "feat", ".", "squeeze", "(", "0", ")", "\n", "size", "=", "_feat", ".", "size", "(", "0", ")", "\n", "return", "_feat", ".", "view", "(", "size", ",", "-", "1", ")", ".", "clone", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.utils.core.get_rank": [[33, 40], ["range"], "function", ["None"], ["", "def", "get_rank", "(", "singular_values", ",", "dim", ",", "eps", "=", "0.00001", ")", ":", "\n", "    ", "r", "=", "dim", "\n", "for", "i", "in", "range", "(", "dim", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "        ", "if", "singular_values", "[", "i", "]", ">=", "eps", ":", "\n", "            ", "r", "=", "i", "+", "1", "\n", "break", "\n", "", "", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.utils.core.wct_core": [[42, 81], ["core.get_squeeze_feat", "get_squeeze_feat.min", "get_squeeze_feat.max", "torch.mean().unsqueeze().expand_as", "core.get_rank", "c_e[].pow", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm.clamp_", "core.svd", "core.get_squeeze_feat", "torch.mean", "core.svd", "core.get_rank", "s_e[].pow", "torch.mm", "core.svd", "torch.diag", "c_v[].t", "torch.mean.unsqueeze().expand_as", "torch.mean().unsqueeze", "torch.mm", "s_v[].t", "get_squeeze_feat.size", "get_squeeze_feat.size", "torch.mean.unsqueeze", "torch.mean", "torch.diag"], "function", ["home.repos.pwc.inspect_result.naver_oasis.utils.core.get_squeeze_feat", "home.repos.pwc.inspect_result.naver_oasis.utils.core.get_rank", "home.repos.pwc.inspect_result.naver_oasis.utils.core.svd", "home.repos.pwc.inspect_result.naver_oasis.utils.core.get_squeeze_feat", "home.repos.pwc.inspect_result.naver_oasis.utils.core.svd", "home.repos.pwc.inspect_result.naver_oasis.utils.core.get_rank", "home.repos.pwc.inspect_result.naver_oasis.utils.core.svd"], ["", "def", "wct_core", "(", "cont_feat", ",", "styl_feat", ",", "weight", "=", "1", ",", "registers", "=", "None", ",", "device", "=", "'cpu'", ")", ":", "\n", "    ", "cont_feat", "=", "get_squeeze_feat", "(", "cont_feat", ")", "\n", "cont_min", "=", "cont_feat", ".", "min", "(", ")", "\n", "cont_max", "=", "cont_feat", ".", "max", "(", ")", "\n", "cont_mean", "=", "torch", ".", "mean", "(", "cont_feat", ",", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "cont_feat", ")", "\n", "cont_feat", "-=", "cont_mean", "\n", "\n", "if", "not", "registers", ":", "\n", "        ", "_", ",", "c_e", ",", "c_v", "=", "svd", "(", "cont_feat", ",", "iden", "=", "True", ",", "device", "=", "device", ")", "\n", "\n", "styl_feat", "=", "get_squeeze_feat", "(", "styl_feat", ")", "\n", "s_mean", "=", "torch", ".", "mean", "(", "styl_feat", ",", "1", ")", "\n", "_", ",", "s_e", ",", "s_v", "=", "svd", "(", "styl_feat", ",", "iden", "=", "True", ",", "device", "=", "device", ")", "\n", "k_s", "=", "get_rank", "(", "s_e", ",", "styl_feat", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "s_d", "=", "(", "s_e", "[", "0", ":", "k_s", "]", ")", ".", "pow", "(", "0.5", ")", "\n", "EDE", "=", "torch", ".", "mm", "(", "torch", ".", "mm", "(", "s_v", "[", ":", ",", "0", ":", "k_s", "]", ",", "torch", ".", "diag", "(", "s_d", ")", "*", "weight", ")", ",", "(", "s_v", "[", ":", ",", "0", ":", "k_s", "]", ".", "t", "(", ")", ")", ")", "\n", "\n", "if", "registers", "is", "not", "None", ":", "\n", "            ", "registers", "[", "'EDE'", "]", "=", "EDE", "\n", "registers", "[", "'s_mean'", "]", "=", "s_mean", "\n", "registers", "[", "'c_v'", "]", "=", "c_v", "\n", "registers", "[", "'c_e'", "]", "=", "c_e", "\n", "", "", "else", ":", "\n", "        ", "EDE", "=", "registers", "[", "'EDE'", "]", "\n", "s_mean", "=", "registers", "[", "'s_mean'", "]", "\n", "_", ",", "c_e", ",", "c_v", "=", "svd", "(", "cont_feat", ",", "iden", "=", "True", ",", "device", "=", "device", ")", "\n", "\n", "", "k_c", "=", "get_rank", "(", "c_e", ",", "cont_feat", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "c_d", "=", "(", "c_e", "[", "0", ":", "k_c", "]", ")", ".", "pow", "(", "-", "0.5", ")", "\n", "# TODO could be more fast", "\n", "step1", "=", "torch", ".", "mm", "(", "c_v", "[", ":", ",", "0", ":", "k_c", "]", ",", "torch", ".", "diag", "(", "c_d", ")", ")", "\n", "step2", "=", "torch", ".", "mm", "(", "step1", ",", "(", "c_v", "[", ":", ",", "0", ":", "k_c", "]", ".", "t", "(", ")", ")", ")", "\n", "whiten_cF", "=", "torch", ".", "mm", "(", "step2", ",", "cont_feat", ")", "\n", "\n", "targetFeature", "=", "torch", ".", "mm", "(", "EDE", ",", "whiten_cF", ")", "\n", "targetFeature", "=", "targetFeature", "+", "s_mean", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "targetFeature", ")", "\n", "targetFeature", ".", "clamp_", "(", "cont_min", ",", "cont_max", ")", "\n", "\n", "return", "targetFeature", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.utils.core.wct_core_segment": [[83, 128], ["content_feat.squeeze", "style_feat.squeeze", "content_feat.squeeze.view().clone", "style_feat.squeeze.view().clone", "core.wct_core_segment.resize"], "function", ["None"], ["", "def", "wct_core_segment", "(", "content_feat", ",", "style_feat", ",", "content_segment", ",", "style_segment", ",", "\n", "label_set", ",", "label_indicator", ",", "weight", "=", "1", ",", "registers", "=", "None", ",", "\n", "device", "=", "'cpu'", ")", ":", "\n", "    ", "def", "resize", "(", "feat", ",", "target", ")", ":", "\n", "        ", "size", "=", "(", "target", ".", "size", "(", "2", ")", ",", "target", ".", "size", "(", "1", ")", ")", "\n", "if", "len", "(", "feat", ".", "shape", ")", "==", "2", ":", "\n", "            ", "return", "np", ".", "asarray", "(", "Image", ".", "fromarray", "(", "feat", ")", ".", "resize", "(", "size", ",", "Image", ".", "NEAREST", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "np", ".", "asarray", "(", "Image", ".", "fromarray", "(", "feat", ",", "mode", "=", "'RGB'", ")", ".", "resize", "(", "size", ",", "Image", ".", "NEAREST", ")", ")", "\n", "\n", "", "", "def", "get_index", "(", "feat", ",", "label", ")", ":", "\n", "        ", "mask", "=", "np", ".", "where", "(", "feat", ".", "reshape", "(", "feat", ".", "shape", "[", "0", "]", "*", "feat", ".", "shape", "[", "1", "]", ")", "==", "label", ")", "\n", "if", "mask", "[", "0", "]", ".", "size", "<=", "0", ":", "\n", "            ", "return", "None", "\n", "", "return", "torch", ".", "LongTensor", "(", "mask", "[", "0", "]", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "squeeze_content_feat", "=", "content_feat", ".", "squeeze", "(", "0", ")", "\n", "squeeze_style_feat", "=", "style_feat", ".", "squeeze", "(", "0", ")", "\n", "\n", "content_feat_view", "=", "squeeze_content_feat", ".", "view", "(", "squeeze_content_feat", ".", "size", "(", "0", ")", ",", "-", "1", ")", ".", "clone", "(", ")", "\n", "style_feat_view", "=", "squeeze_style_feat", ".", "view", "(", "squeeze_style_feat", ".", "size", "(", "0", ")", ",", "-", "1", ")", ".", "clone", "(", ")", "\n", "\n", "resized_content_segment", "=", "resize", "(", "content_segment", ",", "squeeze_content_feat", ")", "\n", "resized_style_segment", "=", "resize", "(", "style_segment", ",", "squeeze_style_feat", ")", "\n", "\n", "target_feature", "=", "content_feat_view", ".", "clone", "(", ")", "\n", "for", "label", "in", "label_set", ":", "\n", "        ", "if", "not", "label_indicator", "[", "label", "]", ":", "\n", "            ", "continue", "\n", "", "content_index", "=", "get_index", "(", "resized_content_segment", ",", "label", ")", "\n", "style_index", "=", "get_index", "(", "resized_style_segment", ",", "label", ")", "\n", "if", "content_index", "is", "None", "or", "style_index", "is", "None", ":", "\n", "            ", "continue", "\n", "", "masked_content_feat", "=", "torch", ".", "index_select", "(", "content_feat_view", ",", "1", ",", "content_index", ")", "\n", "masked_style_feat", "=", "torch", ".", "index_select", "(", "style_feat_view", ",", "1", ",", "style_index", ")", "\n", "_target_feature", "=", "wct_core", "(", "masked_content_feat", ",", "masked_style_feat", ",", "weight", ",", "registers", ",", "device", "=", "device", ")", "\n", "if", "torch", ".", "__version__", ">=", "'0.4.0'", ":", "\n", "# XXX reported bug in the original repository", "\n", "            ", "new_target_feature", "=", "torch", ".", "transpose", "(", "target_feature", ",", "1", ",", "0", ")", "\n", "new_target_feature", ".", "index_copy_", "(", "0", ",", "content_index", ",", "\n", "torch", ".", "transpose", "(", "_target_feature", ",", "1", ",", "0", ")", ")", "\n", "target_feature", "=", "torch", ".", "transpose", "(", "new_target_feature", ",", "1", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "target_feature", ".", "index_copy_", "(", "1", ",", "content_index", ",", "_target_feature", ")", "\n", "", "", "return", "target_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.utils.core.feature_wct": [[130, 140], ["wct_core.view_as", "core.wct_core_segment", "core.wct_core"], "function", ["home.repos.pwc.inspect_result.naver_oasis.utils.core.wct_core_segment", "home.repos.pwc.inspect_result.naver_oasis.utils.core.wct_core"], ["", "def", "feature_wct", "(", "content_feat", ",", "style_feat", ",", "content_segment", "=", "None", ",", "style_segment", "=", "None", ",", "\n", "label_set", "=", "None", ",", "label_indicator", "=", "None", ",", "weight", "=", "1", ",", "registers", "=", "None", ",", "alpha", "=", "1", ",", "device", "=", "'cpu'", ")", ":", "\n", "    ", "if", "label_set", "is", "not", "None", ":", "\n", "        ", "target_feature", "=", "wct_core_segment", "(", "content_feat", ",", "style_feat", ",", "content_segment", ",", "style_segment", ",", "\n", "label_set", ",", "label_indicator", ",", "weight", ",", "registers", ",", "device", "=", "device", ")", "\n", "", "else", ":", "\n", "        ", "target_feature", "=", "wct_core", "(", "content_feat", ",", "style_feat", ",", "device", "=", "device", ")", "\n", "", "target_feature", "=", "target_feature", ".", "view_as", "(", "content_feat", ")", "\n", "target_feature", "=", "alpha", "*", "target_feature", "+", "(", "1", "-", "alpha", ")", "*", "content_feat", "\n", "return", "target_feature", "\n", "", ""]], "home.repos.pwc.inspect_result.naver_oasis.utils.io.Timer.__init__": [[16, 20], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "msg", "=", "'Elapsed time: {}'", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "self", ".", "msg", "=", "msg", "\n", "self", ".", "start_time", "=", "None", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.utils.io.Timer.__enter__": [[21, 23], ["datetime.datetime.now"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "start_time", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.utils.io.Timer.__exit__": [[24, 27], ["print", "io.Timer.msg.format", "datetime.datetime.now"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_value", ",", "exc_tb", ")", ":", "\n", "        ", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "self", ".", "msg", ".", "format", "(", "datetime", ".", "datetime", ".", "now", "(", ")", "-", "self", ".", "start_time", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.utils.io.open_image": [[29, 40], ["PIL.Image.open", "_transforms.append", "_transforms.append", "torchvision.transforms.Compose", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "transforms.Compose.unsqueeze", "torchvision.transforms.Resize", "transforms.Compose."], "function", ["None"], ["", "", "", "def", "open_image", "(", "image_path", ",", "image_size", "=", "None", ")", ":", "\n", "    ", "image", "=", "Image", ".", "open", "(", "image_path", ")", "\n", "_transforms", "=", "[", "]", "\n", "if", "image_size", "is", "not", "None", ":", "\n", "        ", "image", "=", "transforms", ".", "Resize", "(", "image_size", ")", "(", "image", ")", "\n", "# _transforms.append(transforms.Resize(image_size))", "\n", "", "w", ",", "h", "=", "image", ".", "size", "\n", "_transforms", ".", "append", "(", "transforms", ".", "CenterCrop", "(", "(", "h", "//", "16", "*", "16", ",", "w", "//", "16", "*", "16", ")", ")", ")", "\n", "_transforms", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "transform", "=", "transforms", ".", "Compose", "(", "_transforms", ")", "\n", "return", "transform", "(", "image", ")", ".", "unsqueeze", "(", "0", ")", ",", "h", ",", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.utils.io.change_seg": [[42, 75], ["numpy.asarray", "numpy.zeros", "range", "np.zeros.astype", "range", "tuple", "numpy.sum", "tuple", "numpy.abs", "numpy.asarray"], "function", ["None"], ["", "def", "change_seg", "(", "seg", ")", ":", "\n", "    ", "color_dict", "=", "{", "\n", "(", "0", ",", "0", ",", "255", ")", ":", "3", ",", "# blue", "\n", "(", "0", ",", "255", ",", "0", ")", ":", "2", ",", "# green", "\n", "(", "0", ",", "0", ",", "0", ")", ":", "0", ",", "# black", "\n", "(", "255", ",", "255", ",", "255", ")", ":", "1", ",", "# white", "\n", "(", "255", ",", "0", ",", "0", ")", ":", "4", ",", "# red", "\n", "(", "255", ",", "255", ",", "0", ")", ":", "5", ",", "# yellow", "\n", "(", "128", ",", "128", ",", "128", ")", ":", "6", ",", "# grey", "\n", "(", "0", ",", "255", ",", "255", ")", ":", "7", ",", "# lightblue", "\n", "(", "255", ",", "0", ",", "255", ")", ":", "8", "# purple", "\n", "}", "\n", "arr_seg", "=", "np", ".", "asarray", "(", "seg", ")", "\n", "new_seg", "=", "np", ".", "zeros", "(", "arr_seg", ".", "shape", "[", ":", "-", "1", "]", ")", "\n", "for", "x", "in", "range", "(", "arr_seg", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "for", "y", "in", "range", "(", "arr_seg", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "if", "tuple", "(", "arr_seg", "[", "x", ",", "y", ",", ":", "]", ")", "in", "color_dict", ":", "\n", "                ", "new_seg", "[", "x", ",", "y", "]", "=", "color_dict", "[", "tuple", "(", "arr_seg", "[", "x", ",", "y", ",", ":", "]", ")", "]", "\n", "", "else", ":", "\n", "                ", "min_dist_index", "=", "0", "\n", "min_dist", "=", "99999", "\n", "for", "key", "in", "color_dict", ":", "\n", "                    ", "dist", "=", "np", ".", "sum", "(", "np", ".", "abs", "(", "np", ".", "asarray", "(", "key", ")", "-", "arr_seg", "[", "x", ",", "y", ",", ":", "]", ")", ")", "\n", "if", "dist", "<", "min_dist", ":", "\n", "                        ", "min_dist", "=", "dist", "\n", "min_dist_index", "=", "color_dict", "[", "key", "]", "\n", "", "elif", "dist", "==", "min_dist", ":", "\n", "                        ", "try", ":", "\n", "                            ", "min_dist_index", "=", "new_seg", "[", "x", ",", "y", "-", "1", ",", ":", "]", "\n", "", "except", "Exception", ":", "\n", "                            ", "pass", "\n", "", "", "", "new_seg", "[", "x", ",", "y", "]", "=", "min_dist_index", "\n", "", "", "", "return", "new_seg", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.utils.io.load_segment": [[77, 90], ["PIL.Image.open", "torchvision.transforms.CenterCrop", "transforms.Resize.", "numpy.asarray", "numpy.asarray", "torchvision.transforms.Resize", "transforms.Resize.", "len", "io.change_seg", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.naver_oasis.utils.io.change_seg"], ["", "def", "load_segment", "(", "image_path", ",", "image_size", "=", "None", ")", ":", "\n", "    ", "if", "not", "image_path", ":", "\n", "        ", "return", "np", ".", "asarray", "(", "[", "]", ")", "\n", "", "image", "=", "Image", ".", "open", "(", "image_path", ")", "\n", "if", "image_size", "is", "not", "None", ":", "\n", "        ", "transform", "=", "transforms", ".", "Resize", "(", "image_size", ",", "interpolation", "=", "Image", ".", "NEAREST", ")", "\n", "image", "=", "transform", "(", "image", ")", "\n", "", "w", ",", "h", "=", "image", ".", "size", "\n", "transform", "=", "transforms", ".", "CenterCrop", "(", "(", "h", "//", "16", "*", "16", ",", "w", "//", "16", "*", "16", ")", ")", "\n", "image", "=", "transform", "(", "image", ")", "\n", "if", "len", "(", "np", ".", "asarray", "(", "image", ")", ".", "shape", ")", "==", "3", ":", "\n", "        ", "image", "=", "change_seg", "(", "image", ")", "\n", "", "return", "np", ".", "asarray", "(", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.utils.io.compute_label_info": [[92, 109], ["numpy.unique", "numpy.zeros", "numpy.max", "numpy.where", "numpy.where", "content_segment.reshape", "style_segment.reshape"], "function", ["None"], ["", "def", "compute_label_info", "(", "content_segment", ",", "style_segment", ")", ":", "\n", "    ", "if", "not", "content_segment", ".", "size", "or", "not", "style_segment", ".", "size", ":", "\n", "        ", "return", "None", ",", "None", "\n", "", "max_label", "=", "np", ".", "max", "(", "content_segment", ")", "+", "1", "\n", "label_set", "=", "np", ".", "unique", "(", "content_segment", ")", "\n", "label_indicator", "=", "np", ".", "zeros", "(", "max_label", ")", "\n", "for", "l", "in", "label_set", ":", "\n", "        ", "content_mask", "=", "np", ".", "where", "(", "content_segment", ".", "reshape", "(", "content_segment", ".", "shape", "[", "0", "]", "*", "content_segment", ".", "shape", "[", "1", "]", ")", "==", "l", ")", "\n", "style_mask", "=", "np", ".", "where", "(", "style_segment", ".", "reshape", "(", "style_segment", ".", "shape", "[", "0", "]", "*", "style_segment", ".", "shape", "[", "1", "]", ")", "==", "l", ")", "\n", "\n", "c_size", "=", "content_mask", "[", "0", "]", ".", "size", "\n", "s_size", "=", "style_mask", "[", "0", "]", ".", "size", "\n", "if", "c_size", ">", "10", "and", "s_size", ">", "10", "and", "c_size", "/", "s_size", "<", "100", "and", "s_size", "/", "c_size", "<", "100", ":", "\n", "            ", "label_indicator", "[", "l", "]", "=", "True", "\n", "", "else", ":", "\n", "            ", "label_indicator", "[", "l", "]", "=", "False", "\n", "", "", "return", "label_set", ",", "label_indicator", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.utils.io.mkdir": [[111, 116], ["os.path.exists", "os.makedirs", "os.path.isdir"], "function", ["None"], ["", "def", "mkdir", "(", "dname", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "dname", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dname", ")", "\n", "", "else", ":", "\n", "        ", "assert", "os", ".", "path", ".", "isdir", "(", "dname", ")", ",", "'already exists filename {}'", ".", "format", "(", "dname", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.naver_oasis.style-transfer.extract_features_dataset.extract_features_dataset": [[13, 60], ["torch.device", "glob.glob", "os.path.exists", "set", "transfer.WCT2", "os.path.exists", "print", "os.makedirs", "len", "glob.glob", "set.add", "set.add", "set.add", "torch.no_grad", "enumerate", "transfer.is_image_file", "len", "len", "print", "open_image", "image.to", "torch.mean().flatten", "torch.save", "torch.cuda.is_available", "transfer.WCT2.encode", "print", "torch.mean", "wct2.encode.view", "[].split", "wct2.encode.size", "wct2.encode.size", "len", "image_file.split"], "function", ["home.repos.pwc.inspect_result.naver_oasis.style-transfer.transfer.is_image_file", "home.repos.pwc.inspect_result.naver_oasis.utils.io.open_image", "home.repos.pwc.inspect_result.naver_oasis.style-transfer.model.WaveEncoder.encode"], ["def", "extract_features_dataset", "(", "config", ")", ":", "\n", "\t", "image_folder", "=", "config", ".", "style", "\n", "output_folder", "=", "config", ".", "style_features", "\n", "\n", "device", "=", "'cpu'", "if", "config", ".", "cpu", "or", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cuda:0'", "\n", "device", "=", "torch", ".", "device", "(", "device", ")", "\n", "\n", "image_list", "=", "glob", ".", "glob", "(", "image_folder", "+", "'/*'", ")", "\n", "image_list", "=", "[", "x", "for", "x", "in", "image_list", "if", "is_image_file", "(", "x", ")", "]", "\n", "\n", "assert", "os", ".", "path", ".", "exists", "(", "image_folder", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_folder", ")", ":", "\n", "\t\t", "print", "(", "f'Saving extracted features to {output_folder}'", ")", "\n", "os", ".", "makedirs", "(", "output_folder", ")", "\n", "", "else", ":", "\n", "\t\t", "num_images", "=", "len", "(", "image_list", ")", "\n", "style_features", "=", "glob", ".", "glob", "(", "f'{config.style_features}/*.pth'", ")", "\n", "if", "len", "(", "style_features", ")", "==", "len", "(", "image_list", ")", ":", "\n", "\t\t\t", "print", "(", "f'Feature folder {output_folder} already exists. Skipping this step.'", ")", "\n", "return", "\n", "\n", "", "", "transfer_at", "=", "set", "(", ")", "\n", "if", "config", ".", "transfer_at_encoder", ":", "\n", "\t\t", "transfer_at", ".", "add", "(", "'encoder'", ")", "\n", "", "if", "config", ".", "transfer_at_decoder", ":", "\n", "\t\t", "transfer_at", ".", "add", "(", "'decoder'", ")", "\n", "", "if", "config", ".", "transfer_at_skip", ":", "\n", "\t\t", "transfer_at", ".", "add", "(", "'skip'", ")", "\n", "\n", "", "wct2", "=", "WCT2", "(", "transfer_at", "=", "transfer_at", ",", "option_unpool", "=", "config", ".", "option_unpool", ",", "\n", "device", "=", "device", ",", "verbose", "=", "config", ".", "verbose", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t", "for", "ii", ",", "image_file", "in", "enumerate", "(", "image_list", ")", ":", "\n", "\t\t\t", "image", ",", "_", ",", "_", "=", "open_image", "(", "image_file", ")", "\n", "image_feat", "=", "image", ".", "to", "(", "device", ")", "\n", "image_skips", "=", "{", "}", "\n", "for", "level", "in", "[", "1", ",", "2", ",", "3", ",", "4", "]", ":", "\n", "\t\t\t\t", "image_feat", "=", "wct2", ".", "encode", "(", "image_feat", ",", "image_skips", ",", "level", ")", "\n", "\n", "", "image_feat", "=", "torch", ".", "mean", "(", "image_feat", ".", "view", "(", "image_feat", ".", "size", "(", "0", ")", ",", "image_feat", ".", "size", "(", "1", ")", ",", "-", "1", ")", ",", "dim", "=", "2", ")", ".", "flatten", "(", ")", "\n", "\n", "fname", "=", "output_folder", "+", "'/'", "+", "image_file", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'.pth'", "\n", "torch", ".", "save", "(", "image_feat", ",", "fname", ")", "\n", "\n", "if", "ii", "%", "20", "==", "0", ":", "\n", "\t\t\t\t", "print", "(", "f'Processing image {ii} of {len(image_list)}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.style-transfer.dataset_style_transfer.select_style_img": [[15, 22], ["random.choice", "dataset_style_transfer.extract_image_features", "print", "dataset_style_transfer.find_nearest_neighbour"], "function", ["home.repos.pwc.inspect_result.naver_oasis.style-transfer.dataset_style_transfer.extract_image_features", "home.repos.pwc.inspect_result.naver_oasis.style-transfer.dataset_style_transfer.find_nearest_neighbour"], ["def", "select_style_img", "(", "style_files", ",", "content_file", ",", "config", ",", "style_features", ")", ":", "\n", "\t", "if", "config", ".", "selection_mode", "==", "'random'", ":", "\n", "\t\t", "return", "random", ".", "choice", "(", "style_files", ")", "\n", "", "elif", "config", ".", "selection_mode", "==", "'nearest'", ":", "\n", "\t\t", "content_feature", "=", "extract_image_features", "(", "content_file", ",", "config", ")", "\n", "print", "(", "f'Finding nearest neighbour for image {content_file}'", ")", "\n", "return", "find_nearest_neighbour", "(", "content_feature", ",", "style_features", ",", "style_files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.style-transfer.dataset_style_transfer.find_nearest_neighbour": [[24, 31], ["torch.CosineSimilarity", "torch.no_grad", "nn.CosineSimilarity.", "content_feature.unsqueeze", "cos.argmax"], "function", ["None"], ["", "", "def", "find_nearest_neighbour", "(", "content_feature", ",", "style_features", ",", "style_files", ")", ":", "\n", "# Define cosine similarity operation from pytorch", "\n", "\t", "cos", "=", "nn", ".", "CosineSimilarity", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t", "dist", "=", "cos", "(", "content_feature", ".", "unsqueeze", "(", "0", ")", ",", "style_features", ")", "\n", "\n", "", "return", "style_files", "[", "dist", ".", "argmax", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.style-transfer.dataset_style_transfer.extract_image_features": [[33, 57], ["torch.device", "set", "transfer.WCT2", "open_image", "image.to", "set.add", "set.add", "set.add", "torch.no_grad", "torch.mean().flatten", "transfer.WCT2.encode", "torch.cuda.is_available", "torch.mean", "wct2.encode.view", "wct2.encode.size", "wct2.encode.size"], "function", ["home.repos.pwc.inspect_result.naver_oasis.utils.io.open_image", "home.repos.pwc.inspect_result.naver_oasis.style-transfer.model.WaveEncoder.encode"], ["", "def", "extract_image_features", "(", "image_file", ",", "config", ")", ":", "\n", "\t", "device", "=", "'cpu'", "if", "config", ".", "cpu", "or", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cuda:0'", "\n", "device", "=", "torch", ".", "device", "(", "device", ")", "\n", "\n", "transfer_at", "=", "set", "(", ")", "\n", "if", "config", ".", "transfer_at_encoder", ":", "\n", "\t\t", "transfer_at", ".", "add", "(", "'encoder'", ")", "\n", "", "if", "config", ".", "transfer_at_decoder", ":", "\n", "\t\t", "transfer_at", ".", "add", "(", "'decoder'", ")", "\n", "", "if", "config", ".", "transfer_at_skip", ":", "\n", "\t\t", "transfer_at", ".", "add", "(", "'skip'", ")", "\n", "\n", "", "wct2", "=", "WCT2", "(", "transfer_at", "=", "transfer_at", ",", "option_unpool", "=", "config", ".", "option_unpool", ",", "\n", "device", "=", "device", ",", "verbose", "=", "config", ".", "verbose", ")", "\n", "\n", "image", ",", "_", ",", "_", "=", "open_image", "(", "image_file", ")", "\n", "image_feat", "=", "image", ".", "to", "(", "device", ")", "\n", "image_skips", "=", "{", "}", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t", "for", "level", "in", "[", "1", ",", "2", ",", "3", ",", "4", "]", ":", "\n", "\t\t\t", "image_feat", "=", "wct2", ".", "encode", "(", "image_feat", ",", "image_skips", ",", "level", ")", "\n", "\n", "", "image_feat", "=", "torch", ".", "mean", "(", "image_feat", ".", "view", "(", "image_feat", ".", "size", "(", "0", ")", ",", "image_feat", ".", "size", "(", "1", ")", ",", "-", "1", ")", ",", "dim", "=", "2", ")", ".", "flatten", "(", ")", "\n", "", "return", "image_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.style-transfer.dataset_style_transfer.create_style_file_list": [[59, 97], ["torch.device", "os.path.exists", "os.path.exists", "sorted", "sorted", "os.path.exists", "glob.glob", "glob.glob", "transfer.parse_style_file_list", "print", "print", "torch.load().to", "open", "enumerate", "transfer.is_image_file", "transfer.is_image_file", "len", "len", "print", "print", "os.remove", "len", "dataset_style_transfer.select_style_img", "f.write", "torch.cuda.is_available", "torch.load"], "function", ["home.repos.pwc.inspect_result.naver_oasis.style-transfer.transfer.parse_style_file_list", "home.repos.pwc.inspect_result.naver_oasis.style-transfer.transfer.is_image_file", "home.repos.pwc.inspect_result.naver_oasis.style-transfer.transfer.is_image_file", "home.repos.pwc.inspect_result.naver_oasis.style-transfer.dataset_style_transfer.select_style_img"], ["", "def", "create_style_file_list", "(", "config", ")", ":", "\n", "\t", "device", "=", "'cpu'", "if", "config", ".", "cpu", "or", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cuda:0'", "\n", "device", "=", "torch", ".", "device", "(", "device", ")", "\n", "\n", "folder_content", "=", "config", ".", "content", "\n", "folder_style", "=", "config", ".", "style", "\n", "style_file_list", "=", "config", ".", "style_file_list", "\n", "\n", "# Fix random seed when choosing images?", "\n", "assert", "os", ".", "path", ".", "exists", "(", "folder_content", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "folder_style", ")", "\n", "\n", "content_files", "=", "sorted", "(", "glob", ".", "glob", "(", "f'{folder_content}/*'", ")", ")", "\n", "content_files", "=", "[", "x", "for", "x", "in", "content_files", "if", "is_image_file", "(", "x", ")", "]", "\n", "style_files", "=", "sorted", "(", "glob", ".", "glob", "(", "f'{folder_style}/*'", ")", ")", "\n", "style_files", "=", "[", "x", "for", "x", "in", "style_files", "if", "is_image_file", "(", "x", ")", "]", "\n", "style_features", "=", "None", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "style_file_list", ")", ":", "\n", "\t\t", "file_list", ",", "_", "=", "parse_style_file_list", "(", "style_file_list", ")", "\n", "if", "len", "(", "content_files", ")", "==", "len", "(", "file_list", ")", ":", "\n", "\t\t\t", "print", "(", "f'Style file {style_file_list} already exists. Skipping this step.'", ")", "\n", "return", "\n", "", "else", ":", "\n", "\t\t\t", "print", "(", "f'Style file already exists, but is missing images. Remaking style file in {style_file_list}'", ")", "\n", "os", ".", "remove", "(", "style_file_list", ")", "\n", "", "", "else", ":", "\n", "\t\t", "print", "(", "f'Creating style_file_list in {style_file_list}'", ")", "\n", "\n", "", "if", "config", ".", "selection_mode", "==", "'nearest'", ":", "\n", "\t\t", "print", "(", "'Loading style features...'", ")", "\n", "style_features", "=", "torch", ".", "load", "(", "config", ".", "style_features", ")", ".", "to", "(", "device", ")", "\n", "assert", "len", "(", "style_files", ")", "==", "style_features", ".", "shape", "[", "0", "]", "\n", "\n", "", "with", "open", "(", "style_file_list", ",", "\"w\"", ")", "as", "f", ":", "\n", "\t\t", "for", "ii", ",", "content_file", "in", "enumerate", "(", "content_files", ")", ":", "\n", "\t\t\t", "style_file", "=", "select_style_img", "(", "style_files", ",", "content_file", ",", "config", ",", "style_features", ")", "\n", "f", ".", "write", "(", "f'{content_file}   ----   {style_file}'", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.style-transfer.transfer.WCT2.__init__": [[59, 73], ["set", "torch.device", "model.WaveEncoder().to", "model.WaveDecoder().to", "transfer.WCT2.encoder.load_state_dict", "transfer.WCT2.decoder.load_state_dict", "torch.load", "torch.load", "set", "model.WaveEncoder", "model.WaveDecoder", "os.path.join", "os.path.join"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "model_path", "=", "'./model_checkpoints'", ",", "transfer_at", "=", "[", "'encoder'", ",", "'skip'", ",", "'decoder'", "]", ",", "option_unpool", "=", "'cat5'", ",", "device", "=", "'cuda:0'", ",", "verbose", "=", "False", ")", ":", "\n", "\n", "\t\t", "self", ".", "transfer_at", "=", "set", "(", "transfer_at", ")", "\n", "assert", "not", "(", "self", ".", "transfer_at", "-", "set", "(", "[", "'encoder'", ",", "'decoder'", ",", "'skip'", "]", ")", ")", ",", "'invalid transfer_at: {}'", ".", "format", "(", "transfer_at", ")", "\n", "assert", "self", ".", "transfer_at", ",", "'empty transfer_at'", "\n", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "device", ")", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "encoder", "=", "WaveEncoder", "(", "option_unpool", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "decoder", "=", "WaveDecoder", "(", "option_unpool", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "encoder", ".", "load_state_dict", "(", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "model_path", ",", "'wave_encoder_{}_l4.pth'", ".", "format", "(", "option_unpool", ")", ")", ",", "\n", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", ")", "\n", "self", ".", "decoder", ".", "load_state_dict", "(", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "model_path", ",", "'wave_decoder_{}_l4.pth'", ".", "format", "(", "option_unpool", ")", ")", ",", "\n", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.style-transfer.transfer.WCT2.print_": [[74, 77], ["print"], "methods", ["None"], ["", "def", "print_", "(", "self", ",", "msg", ")", ":", "\n", "\t\t", "if", "self", ".", "verbose", ":", "\n", "\t\t\t", "print", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.style-transfer.transfer.WCT2.encode": [[78, 80], ["transfer.WCT2.encoder.encode"], "methods", ["home.repos.pwc.inspect_result.naver_oasis.style-transfer.model.WaveEncoder.encode"], ["", "", "def", "encode", "(", "self", ",", "x", ",", "skips", ",", "level", ")", ":", "\n", "\t\t", "return", "self", ".", "encoder", ".", "encode", "(", "x", ",", "skips", ",", "level", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.style-transfer.transfer.WCT2.decode": [[81, 83], ["transfer.WCT2.decoder.decode"], "methods", ["home.repos.pwc.inspect_result.naver_oasis.style-transfer.model.WaveDecoder.decode"], ["", "def", "decode", "(", "self", ",", "x", ",", "skips", ",", "level", ")", ":", "\n", "\t\t", "return", "self", ".", "decoder", ".", "decode", "(", "x", ",", "skips", ",", "level", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.style-transfer.transfer.WCT2.get_all_feature": [[84, 99], ["transfer.WCT2.encode", "transfer.WCT2.decode"], "methods", ["home.repos.pwc.inspect_result.naver_oasis.style-transfer.model.WaveEncoder.encode", "home.repos.pwc.inspect_result.naver_oasis.style-transfer.model.WaveDecoder.decode"], ["", "def", "get_all_feature", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "skips", "=", "{", "}", "\n", "feats", "=", "{", "'encoder'", ":", "{", "}", ",", "'decoder'", ":", "{", "}", "}", "\n", "for", "level", "in", "[", "1", ",", "2", ",", "3", ",", "4", "]", ":", "\n", "\t\t\t", "x", "=", "self", ".", "encode", "(", "x", ",", "skips", ",", "level", ")", "\n", "if", "'encoder'", "in", "self", ".", "transfer_at", ":", "\n", "\t\t\t\t", "feats", "[", "'encoder'", "]", "[", "level", "]", "=", "x", "\n", "\n", "", "", "if", "'encoder'", "not", "in", "self", ".", "transfer_at", ":", "\n", "\t\t\t", "feats", "[", "'decoder'", "]", "[", "4", "]", "=", "x", "\n", "", "for", "level", "in", "[", "4", ",", "3", ",", "2", "]", ":", "\n", "\t\t\t", "x", "=", "self", ".", "decode", "(", "x", ",", "skips", ",", "level", ")", "\n", "if", "'decoder'", "in", "self", ".", "transfer_at", ":", "\n", "\t\t\t\t", "feats", "[", "'decoder'", "]", "[", "level", "-", "1", "]", "=", "x", "\n", "", "", "return", "feats", ",", "skips", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.style-transfer.transfer.WCT2.transfer": [[100, 136], ["utils.io.compute_label_info", "transfer.WCT2.get_all_feature", "transfer.WCT2.encode", "transfer.WCT2.decode", "utils.core.feature_wct", "transfer.WCT2.print_", "transfer.WCT2.print_", "utils.core.feature_wct", "transfer.WCT2.print_", "utils.core.feature_wct"], "methods", ["home.repos.pwc.inspect_result.naver_oasis.utils.io.compute_label_info", "home.repos.pwc.inspect_result.naver_oasis.style-transfer.transfer.WCT2.get_all_feature", "home.repos.pwc.inspect_result.naver_oasis.style-transfer.model.WaveEncoder.encode", "home.repos.pwc.inspect_result.naver_oasis.style-transfer.model.WaveDecoder.decode", "home.repos.pwc.inspect_result.naver_oasis.utils.core.feature_wct", "home.repos.pwc.inspect_result.naver_oasis.style-transfer.transfer.WCT2.print_", "home.repos.pwc.inspect_result.naver_oasis.style-transfer.transfer.WCT2.print_", "home.repos.pwc.inspect_result.naver_oasis.utils.core.feature_wct", "home.repos.pwc.inspect_result.naver_oasis.style-transfer.transfer.WCT2.print_", "home.repos.pwc.inspect_result.naver_oasis.utils.core.feature_wct"], ["", "def", "transfer", "(", "self", ",", "content", ",", "style", ",", "content_segment", ",", "style_segment", ",", "alpha", "=", "1", ")", ":", "\n", "\t\t", "label_set", ",", "label_indicator", "=", "compute_label_info", "(", "content_segment", ",", "style_segment", ")", "\n", "content_feat", ",", "content_skips", "=", "content", ",", "{", "}", "\n", "style_feats", ",", "style_skips", "=", "self", ".", "get_all_feature", "(", "style", ")", "\n", "\n", "wct2_enc_level", "=", "[", "1", ",", "2", ",", "3", ",", "4", "]", "\n", "wct2_dec_level", "=", "[", "1", ",", "2", ",", "3", ",", "4", "]", "\n", "wct2_skip_level", "=", "[", "'pool1'", ",", "'pool2'", ",", "'pool3'", "]", "\n", "\n", "for", "level", "in", "[", "1", ",", "2", ",", "3", ",", "4", "]", ":", "\n", "\t\t\t", "content_feat", "=", "self", ".", "encode", "(", "content_feat", ",", "content_skips", ",", "level", ")", "\n", "if", "'encoder'", "in", "self", ".", "transfer_at", "and", "level", "in", "wct2_enc_level", ":", "\n", "\t\t\t\t", "content_feat", "=", "feature_wct", "(", "content_feat", ",", "style_feats", "[", "'encoder'", "]", "[", "level", "]", ",", "\n", "content_segment", ",", "style_segment", ",", "\n", "label_set", ",", "label_indicator", ",", "\n", "alpha", "=", "alpha", ",", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "print_", "(", "'transfer at encoder {}'", ".", "format", "(", "level", ")", ")", "\n", "", "", "if", "'skip'", "in", "self", ".", "transfer_at", ":", "\n", "\t\t\t", "for", "skip_level", "in", "wct2_skip_level", ":", "\n", "\t\t\t\t", "for", "component", "in", "[", "0", ",", "1", ",", "2", "]", ":", "# component: [LH, HL, HH]", "\n", "\t\t\t\t\t", "content_skips", "[", "skip_level", "]", "[", "component", "]", "=", "feature_wct", "(", "content_skips", "[", "skip_level", "]", "[", "component", "]", ",", "\n", "style_skips", "[", "skip_level", "]", "[", "component", "]", ",", "\n", "content_segment", ",", "style_segment", ",", "\n", "label_set", ",", "label_indicator", ",", "\n", "alpha", "=", "alpha", ",", "device", "=", "self", ".", "device", ")", "\n", "", "self", ".", "print_", "(", "'transfer at skip {}'", ".", "format", "(", "skip_level", ")", ")", "\n", "\n", "", "", "for", "level", "in", "[", "4", ",", "3", ",", "2", ",", "1", "]", ":", "\n", "\t\t\t", "if", "'decoder'", "in", "self", ".", "transfer_at", "and", "level", "in", "style_feats", "[", "'decoder'", "]", "and", "level", "in", "wct2_dec_level", ":", "\n", "\t\t\t\t", "content_feat", "=", "feature_wct", "(", "content_feat", ",", "style_feats", "[", "'decoder'", "]", "[", "level", "]", ",", "\n", "content_segment", ",", "style_segment", ",", "\n", "label_set", ",", "label_indicator", ",", "\n", "alpha", "=", "alpha", ",", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "print_", "(", "'transfer at decoder {}'", ".", "format", "(", "level", ")", ")", "\n", "", "content_feat", "=", "self", ".", "decode", "(", "content_feat", ",", "content_skips", ",", "level", ")", "\n", "", "return", "content_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.style-transfer.transfer.parse_style_file_list": [[42, 52], ["open", "line.strip().split", "content_files.append", "style_files.append", "line.strip"], "function", ["None"], ["def", "parse_style_file_list", "(", "style_file_list", ")", ":", "\n", "\t", "content_files", "=", "[", "]", "\n", "style_files", "=", "[", "]", "\n", "with", "open", "(", "style_file_list", ",", "\"r\"", ")", "as", "f", ":", "\n", "\t\t", "for", "line", "in", "f", ":", "\n", "\t\t\t", "content", ",", "style", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\t----   '", ")", "\n", "content_files", ".", "append", "(", "content", ")", "\n", "style_files", ".", "append", "(", "style", ")", "\n", "\n", "", "", "return", "content_files", ",", "style_files", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.style-transfer.transfer.is_image_file": [[54, 56], ["any", "filename.endswith"], "function", ["None"], ["", "def", "is_image_file", "(", "filename", ")", ":", "\n", "\t", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.style-transfer.transfer.get_all_transfer": [[138, 147], ["set", "set", "ret.append"], "function", ["None"], ["", "", "def", "get_all_transfer", "(", ")", ":", "\n", "\t", "ret", "=", "[", "]", "\n", "for", "e", "in", "[", "'encoder'", ",", "None", "]", ":", "\n", "\t\t", "for", "d", "in", "[", "'decoder'", ",", "None", "]", ":", "\n", "\t\t\t", "for", "s", "in", "[", "'skip'", ",", "None", "]", ":", "\n", "\t\t\t\t", "_ret", "=", "set", "(", "[", "e", ",", "d", ",", "s", "]", ")", "&", "set", "(", "[", "'encoder'", ",", "'decoder'", ",", "'skip'", "]", ")", "\n", "if", "_ret", ":", "\n", "\t\t\t\t\t", "ret", ".", "append", "(", "_ret", ")", "\n", "", "", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.style-transfer.transfer.run_bulk": [[149, 207], ["torch.device", "set", "transfer.parse_style_file_list", "zip", "set.add", "set.add", "set.add", "transfer.WCT2", "os.path.join", "utils.io.open_image", "content.to.to", "utils.io.open_image", "style.to.to", "utils.io.load_segment", "utils.io.load_segment", "os.path.splitext", "transfer.is_image_file", "print", "transfer.is_image_file", "print", "transfer.get_all_transfer", "torch.cuda.is_available", "_content.split", "utils.io.Timer", "print", "torchvision.utils.save_image", "torch.no_grad", "WCT2.transfer", "wct2.transfer.clamp_", "utils.io.Timer", "os.path.join.replace", "print", "transfer.WCT2", "torchvision.utils.save_image", "torchvision.transforms.Resize", "sorted", "torch.no_grad", "WCT2.transfer", "wct2.transfer.clamp_", "list", "torchvision.transforms.Resize"], "function", ["home.repos.pwc.inspect_result.naver_oasis.style-transfer.transfer.parse_style_file_list", "home.repos.pwc.inspect_result.naver_oasis.utils.io.open_image", "home.repos.pwc.inspect_result.naver_oasis.utils.io.open_image", "home.repos.pwc.inspect_result.naver_oasis.utils.io.load_segment", "home.repos.pwc.inspect_result.naver_oasis.utils.io.load_segment", "home.repos.pwc.inspect_result.naver_oasis.style-transfer.transfer.is_image_file", "home.repos.pwc.inspect_result.naver_oasis.style-transfer.transfer.is_image_file", "home.repos.pwc.inspect_result.naver_oasis.style-transfer.transfer.get_all_transfer", "home.repos.pwc.inspect_result.naver_oasis.style-transfer.transfer.WCT2.transfer", "home.repos.pwc.inspect_result.naver_oasis.style-transfer.transfer.WCT2.transfer"], ["", "def", "run_bulk", "(", "config", ")", ":", "\n", "\t", "device", "=", "'cpu'", "if", "config", ".", "cpu", "or", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cuda:0'", "\n", "device", "=", "torch", ".", "device", "(", "device", ")", "\n", "\n", "transfer_at", "=", "set", "(", ")", "\n", "if", "config", ".", "transfer_at_encoder", ":", "\n", "\t\t", "transfer_at", ".", "add", "(", "'encoder'", ")", "\n", "", "if", "config", ".", "transfer_at_decoder", ":", "\n", "\t\t", "transfer_at", ".", "add", "(", "'decoder'", ")", "\n", "", "if", "config", ".", "transfer_at_skip", ":", "\n", "\t\t", "transfer_at", ".", "add", "(", "'skip'", ")", "\n", "\n", "", "content_list", ",", "style_list", "=", "parse_style_file_list", "(", "config", ".", "style_file_list", ")", "\n", "\n", "if", "not", "config", ".", "transfer_all", ":", "\n", "\t\t", "wct2", "=", "WCT2", "(", "transfer_at", "=", "transfer_at", ",", "option_unpool", "=", "config", ".", "option_unpool", ",", "\n", "device", "=", "device", ",", "verbose", "=", "config", ".", "verbose", ")", "\n", "\n", "", "for", "_content", ",", "_style", "in", "zip", "(", "content_list", ",", "style_list", ")", ":", "\n", "\t\t", "if", "not", "is_image_file", "(", "_content", ")", ":", "\n", "\t\t\t", "print", "(", "'invalid file (is not image), '", ",", "_content", ")", "\n", "continue", "\n", "", "if", "not", "is_image_file", "(", "_style", ")", ":", "\n", "\t\t\t", "print", "(", "'invalid file (is not image), '", ",", "_style", ")", "\n", "continue", "\n", "\n", "", "_output", "=", "os", ".", "path", ".", "join", "(", "config", ".", "output", ",", "_content", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "\n", "\n", "content", ",", "h", ",", "w", "=", "open_image", "(", "_content", ")", "\n", "content", "=", "content", ".", "to", "(", "device", ")", "\n", "style", ",", "_", ",", "_", "=", "open_image", "(", "_style", ")", "\n", "style", "=", "style", ".", "to", "(", "device", ")", "\n", "\n", "# We are not using segmentation maps", "\n", "content_segment", "=", "load_segment", "(", "None", ")", "\n", "style_segment", "=", "load_segment", "(", "None", ")", "\n", "_", ",", "ext", "=", "os", ".", "path", ".", "splitext", "(", "_content", ")", "\n", "\n", "if", "not", "config", ".", "transfer_all", ":", "\n", "\t\t\t", "with", "Timer", "(", "'Elapsed time in whole WCT: {}'", ",", "config", ".", "verbose", ")", ":", "\n", "\t\t\t\t", "fname_output", "=", "_output", "\n", "print", "(", "'------ transfer:'", ",", "_output", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t\t\t\t", "img", "=", "wct2", ".", "transfer", "(", "content", ",", "style", ",", "content_segment", ",", "style_segment", ",", "alpha", "=", "config", ".", "alpha", ")", "\n", "img", "=", "transforms", ".", "Resize", "(", "(", "h", ",", "w", ")", ")", "(", "img", ")", "\n", "", "save_image", "(", "img", ".", "clamp_", "(", "0", ",", "1", ")", ",", "fname_output", ",", "padding", "=", "0", ")", "\n", "", "", "else", ":", "\n", "\t\t\t", "for", "_transfer_at", "in", "get_all_transfer", "(", ")", ":", "\n", "\t\t\t\t", "with", "Timer", "(", "'Elapsed time in whole WCT: {}'", ",", "config", ".", "verbose", ")", ":", "\n", "\t\t\t\t\t", "postfix", "=", "'_'", ".", "join", "(", "sorted", "(", "list", "(", "_transfer_at", ")", ")", ")", "\n", "fname_output", "=", "_output", ".", "replace", "(", "ext", ",", "'_{}_{}{}'", ".", "format", "(", "config", ".", "option_unpool", ",", "postfix", ",", "ext", ")", ")", "\n", "print", "(", "'------ transfer:'", ",", "fname", ")", "\n", "wct2", "=", "WCT2", "(", "transfer_at", "=", "_transfer_at", ",", "option_unpool", "=", "config", ".", "option_unpool", ",", "device", "=", "device", ",", "\n", "verbose", "=", "config", ".", "verbose", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t\t\t\t\t", "img", "=", "wct2", ".", "transfer", "(", "content", ",", "style", ",", "content_segment", ",", "style_segment", ",", "alpha", "=", "config", ".", "alpha", ")", "\n", "img", "=", "transforms", ".", "Resize", "(", "(", "h", ",", "w", ")", ")", "(", "img", ")", "\n", "", "save_image", "(", "img", ".", "clamp_", "(", "0", ",", "1", ")", ",", "fname_output", ",", "padding", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.style-transfer.model.WavePool.__init__": [[76, 79], ["torch.Module.__init__", "model.get_wav"], "methods", ["home.repos.pwc.inspect_result.naver_oasis.dataset.cityscapes_dataset.Cityscapes.__init__", "home.repos.pwc.inspect_result.naver_oasis.style-transfer.model.get_wav"], ["\t", "def", "__init__", "(", "self", ",", "in_channels", ")", ":", "\n", "\t\t", "super", "(", "WavePool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "LL", ",", "self", ".", "LH", ",", "self", ".", "HL", ",", "self", ".", "HH", "=", "get_wav", "(", "in_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.style-transfer.model.WavePool.forward": [[80, 82], ["model.WavePool.LL", "model.WavePool.LH", "model.WavePool.HL", "model.WavePool.HH"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "return", "self", ".", "LL", "(", "x", ")", ",", "self", ".", "LH", "(", "x", ")", ",", "self", ".", "HL", "(", "x", ")", ",", "self", ".", "HH", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.style-transfer.model.WaveUnpool.__init__": [[85, 90], ["torch.Module.__init__", "model.get_wav"], "methods", ["home.repos.pwc.inspect_result.naver_oasis.dataset.cityscapes_dataset.Cityscapes.__init__", "home.repos.pwc.inspect_result.naver_oasis.style-transfer.model.get_wav"], ["\t", "def", "__init__", "(", "self", ",", "in_channels", ",", "option_unpool", "=", "'cat5'", ")", ":", "\n", "\t\t", "super", "(", "WaveUnpool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "option_unpool", "=", "option_unpool", "\n", "self", ".", "LL", ",", "self", ".", "LH", ",", "self", ".", "HL", ",", "self", ".", "HH", "=", "get_wav", "(", "self", ".", "in_channels", ",", "pool", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.style-transfer.model.WaveUnpool.forward": [[91, 98], ["model.WaveUnpool.HH", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.WaveUnpool.HL", "model.WaveUnpool.LL", "model.WaveUnpool.LH", "model.WaveUnpool.LL", "model.WaveUnpool.LH", "model.WaveUnpool.HL", "model.WaveUnpool.HH"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "LL", ",", "LH", ",", "HL", ",", "HH", ",", "original", "=", "None", ")", ":", "\n", "\t\t", "if", "self", ".", "option_unpool", "==", "'sum'", ":", "\n", "\t\t\t", "return", "self", ".", "LL", "(", "LL", ")", "+", "self", ".", "LH", "(", "LH", ")", "+", "self", ".", "HL", "(", "HL", ")", "+", "self", ".", "HH", "(", "HH", ")", "\n", "", "elif", "self", ".", "option_unpool", "==", "'cat5'", "and", "original", "is", "not", "None", ":", "\n", "\t\t\t", "return", "torch", ".", "cat", "(", "[", "self", ".", "LL", "(", "LL", ")", ",", "self", ".", "LH", "(", "LH", ")", ",", "self", ".", "HL", "(", "HL", ")", ",", "self", ".", "HH", "(", "HH", ")", ",", "original", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.style-transfer.model.WaveEncoder.__init__": [[101, 124], ["torch.Module.__init__", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "model.WavePool", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "model.WavePool", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "model.WavePool", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.naver_oasis.dataset.cityscapes_dataset.Cityscapes.__init__"], ["\t", "def", "__init__", "(", "self", ",", "option_unpool", ")", ":", "\n", "\t\t", "super", "(", "WaveEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "option_unpool", "=", "option_unpool", "\n", "\n", "self", ".", "pad", "=", "nn", ".", "ReflectionPad2d", "(", "1", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "conv0", "=", "nn", ".", "Conv2d", "(", "3", ",", "3", ",", "1", ",", "1", ",", "0", ")", "\n", "self", ".", "conv1_1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "1", ",", "0", ")", "\n", "self", ".", "conv1_2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "1", ",", "0", ")", "\n", "self", ".", "pool1", "=", "WavePool", "(", "64", ")", "\n", "\n", "self", ".", "conv2_1", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "3", ",", "1", ",", "0", ")", "\n", "self", ".", "conv2_2", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "1", ",", "0", ")", "\n", "self", ".", "pool2", "=", "WavePool", "(", "128", ")", "\n", "\n", "self", ".", "conv3_1", "=", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "3", ",", "1", ",", "0", ")", "\n", "self", ".", "conv3_2", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "0", ")", "\n", "self", ".", "conv3_3", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "0", ")", "\n", "self", ".", "conv3_4", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "0", ")", "\n", "self", ".", "pool3", "=", "WavePool", "(", "256", ")", "\n", "\n", "self", ".", "conv4_1", "=", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "3", ",", "1", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.style-transfer.model.WaveEncoder.forward": [[125, 130], ["model.WaveEncoder.encode"], "methods", ["home.repos.pwc.inspect_result.naver_oasis.style-transfer.model.WaveEncoder.encode"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "skips", "=", "{", "}", "\n", "for", "level", "in", "[", "1", ",", "2", ",", "3", ",", "4", "]", ":", "\n", "\t\t\t", "x", "=", "self", ".", "encode", "(", "x", ",", "skips", ",", "level", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.style-transfer.model.WaveEncoder.encode": [[131, 194], ["model.WaveEncoder.conv0", "model.WaveEncoder.relu", "model.WaveEncoder.relu", "model.WaveEncoder.pool1", "model.WaveEncoder.conv1_1", "model.WaveEncoder.conv1_2", "model.WaveEncoder.relu", "model.WaveEncoder.relu", "model.WaveEncoder.pool2", "model.WaveEncoder.conv0", "model.WaveEncoder.relu", "model.WaveEncoder.pad", "model.WaveEncoder.pad", "model.WaveEncoder.conv2_1", "model.WaveEncoder.conv2_2", "model.WaveEncoder.relu", "model.WaveEncoder.relu", "model.WaveEncoder.relu", "model.WaveEncoder.relu", "model.WaveEncoder.pool3", "model.WaveEncoder.relu", "model.WaveEncoder.conv1_1", "model.WaveEncoder.relu", "model.WaveEncoder.pool1", "model.WaveEncoder.relu", "model.WaveEncoder.pad", "model.WaveEncoder.pad", "model.WaveEncoder.conv3_1", "model.WaveEncoder.conv3_2", "model.WaveEncoder.conv3_3", "model.WaveEncoder.conv3_4", "model.WaveEncoder.conv4_1", "model.WaveEncoder.pad", "model.WaveEncoder.conv1_2", "model.WaveEncoder.conv2_1", "model.WaveEncoder.relu", "model.WaveEncoder.pool2", "model.WaveEncoder.relu", "model.WaveEncoder.relu", "model.WaveEncoder.relu", "model.WaveEncoder.relu", "model.WaveEncoder.pool3", "model.WaveEncoder.relu", "model.WaveEncoder.pad", "model.WaveEncoder.pad", "model.WaveEncoder.pad", "model.WaveEncoder.pad", "model.WaveEncoder.pad", "model.WaveEncoder.pad", "model.WaveEncoder.pad", "model.WaveEncoder.conv2_2", "model.WaveEncoder.conv3_1", "model.WaveEncoder.conv3_2", "model.WaveEncoder.conv3_3", "model.WaveEncoder.conv3_4", "model.WaveEncoder.conv4_1", "model.WaveEncoder.pad", "model.WaveEncoder.pad", "model.WaveEncoder.pad", "model.WaveEncoder.pad", "model.WaveEncoder.pad", "model.WaveEncoder.pad"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ",", "skips", ",", "level", ")", ":", "\n", "\t\t", "assert", "level", "in", "{", "1", ",", "2", ",", "3", ",", "4", "}", "\n", "if", "self", ".", "option_unpool", "==", "'sum'", ":", "\n", "\t\t\t", "if", "level", "==", "1", ":", "\n", "\t\t\t\t", "out", "=", "self", ".", "conv0", "(", "x", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "conv1_1", "(", "self", ".", "pad", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "conv1_2", "(", "self", ".", "pad", "(", "out", ")", ")", ")", "\n", "skips", "[", "'conv1_2'", "]", "=", "out", "\n", "LL", ",", "LH", ",", "HL", ",", "HH", "=", "self", ".", "pool1", "(", "out", ")", "\n", "skips", "[", "'pool1'", "]", "=", "[", "LH", ",", "HL", ",", "HH", "]", "\n", "return", "LL", "\n", "", "elif", "level", "==", "2", ":", "\n", "\t\t\t\t", "out", "=", "self", ".", "relu", "(", "self", ".", "conv2_1", "(", "self", ".", "pad", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "conv2_2", "(", "self", ".", "pad", "(", "out", ")", ")", ")", "\n", "skips", "[", "'conv2_2'", "]", "=", "out", "\n", "LL", ",", "LH", ",", "HL", ",", "HH", "=", "self", ".", "pool2", "(", "out", ")", "\n", "skips", "[", "'pool2'", "]", "=", "[", "LH", ",", "HL", ",", "HH", "]", "\n", "return", "LL", "\n", "", "elif", "level", "==", "3", ":", "\n", "\t\t\t\t", "out", "=", "self", ".", "relu", "(", "self", ".", "conv3_1", "(", "self", ".", "pad", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "conv3_2", "(", "self", ".", "pad", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "conv3_3", "(", "self", ".", "pad", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "conv3_4", "(", "self", ".", "pad", "(", "out", ")", ")", ")", "\n", "skips", "[", "'conv3_4'", "]", "=", "out", "\n", "LL", ",", "LH", ",", "HL", ",", "HH", "=", "self", ".", "pool3", "(", "out", ")", "\n", "skips", "[", "'pool3'", "]", "=", "[", "LH", ",", "HL", ",", "HH", "]", "\n", "return", "LL", "\n", "", "else", ":", "\n", "\t\t\t\t", "return", "self", ".", "relu", "(", "self", ".", "conv4_1", "(", "self", ".", "pad", "(", "x", ")", ")", ")", "\n", "\n", "", "", "elif", "self", ".", "option_unpool", "==", "'cat5'", ":", "\n", "\t\t\t", "if", "level", "==", "1", ":", "\n", "\t\t\t\t", "out", "=", "self", ".", "conv0", "(", "x", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "conv1_1", "(", "self", ".", "pad", "(", "out", ")", ")", ")", "\n", "return", "out", "\n", "\n", "", "elif", "level", "==", "2", ":", "\n", "\t\t\t\t", "out", "=", "self", ".", "relu", "(", "self", ".", "conv1_2", "(", "self", ".", "pad", "(", "x", ")", ")", ")", "\n", "skips", "[", "'conv1_2'", "]", "=", "out", "\n", "LL", ",", "LH", ",", "HL", ",", "HH", "=", "self", ".", "pool1", "(", "out", ")", "\n", "skips", "[", "'pool1'", "]", "=", "[", "LH", ",", "HL", ",", "HH", "]", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "conv2_1", "(", "self", ".", "pad", "(", "LL", ")", ")", ")", "\n", "return", "out", "\n", "\n", "", "elif", "level", "==", "3", ":", "\n", "\t\t\t\t", "out", "=", "self", ".", "relu", "(", "self", ".", "conv2_2", "(", "self", ".", "pad", "(", "x", ")", ")", ")", "\n", "skips", "[", "'conv2_2'", "]", "=", "out", "\n", "LL", ",", "LH", ",", "HL", ",", "HH", "=", "self", ".", "pool2", "(", "out", ")", "\n", "skips", "[", "'pool2'", "]", "=", "[", "LH", ",", "HL", ",", "HH", "]", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "conv3_1", "(", "self", ".", "pad", "(", "LL", ")", ")", ")", "\n", "return", "out", "\n", "\n", "", "else", ":", "\n", "\t\t\t\t", "out", "=", "self", ".", "relu", "(", "self", ".", "conv3_2", "(", "self", ".", "pad", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "conv3_3", "(", "self", ".", "pad", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "conv3_4", "(", "self", ".", "pad", "(", "out", ")", ")", ")", "\n", "skips", "[", "'conv3_4'", "]", "=", "out", "\n", "LL", ",", "LH", ",", "HL", ",", "HH", "=", "self", ".", "pool3", "(", "out", ")", "\n", "skips", "[", "'pool3'", "]", "=", "[", "LH", ",", "HL", ",", "HH", "]", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "conv4_1", "(", "self", ".", "pad", "(", "LL", ")", ")", ")", "\n", "return", "out", "\n", "", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.style-transfer.model.WaveDecoder.__init__": [[197, 234], ["torch.Module.__init__", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "model.WaveUnpool", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "model.WaveUnpool", "torch.Conv2d", "torch.Conv2d", "model.WaveUnpool", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.naver_oasis.dataset.cityscapes_dataset.Cityscapes.__init__"], ["\t", "def", "__init__", "(", "self", ",", "option_unpool", ")", ":", "\n", "\t\t", "super", "(", "WaveDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "option_unpool", "=", "option_unpool", "\n", "\n", "if", "option_unpool", "==", "'sum'", ":", "\n", "\t\t\t", "multiply_in", "=", "1", "\n", "", "elif", "option_unpool", "==", "'cat5'", ":", "\n", "\t\t\t", "multiply_in", "=", "5", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "pad", "=", "nn", ".", "ReflectionPad2d", "(", "1", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv4_1", "=", "nn", ".", "Conv2d", "(", "512", ",", "256", ",", "3", ",", "1", ",", "0", ")", "\n", "\n", "self", ".", "recon_block3", "=", "WaveUnpool", "(", "256", ",", "option_unpool", ")", "\n", "if", "option_unpool", "==", "'sum'", ":", "\n", "\t\t\t", "self", ".", "conv3_4", "=", "nn", ".", "Conv2d", "(", "256", "*", "multiply_in", ",", "256", ",", "3", ",", "1", ",", "0", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "conv3_4_2", "=", "nn", ".", "Conv2d", "(", "256", "*", "multiply_in", ",", "256", ",", "3", ",", "1", ",", "0", ")", "\n", "", "self", ".", "conv3_3", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "0", ")", "\n", "self", ".", "conv3_2", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "0", ")", "\n", "self", ".", "conv3_1", "=", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "3", ",", "1", ",", "0", ")", "\n", "\n", "self", ".", "recon_block2", "=", "WaveUnpool", "(", "128", ",", "option_unpool", ")", "\n", "if", "option_unpool", "==", "'sum'", ":", "\n", "\t\t\t", "self", ".", "conv2_2", "=", "nn", ".", "Conv2d", "(", "128", "*", "multiply_in", ",", "128", ",", "3", ",", "1", ",", "0", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "conv2_2_2", "=", "nn", ".", "Conv2d", "(", "128", "*", "multiply_in", ",", "128", ",", "3", ",", "1", ",", "0", ")", "\n", "", "self", ".", "conv2_1", "=", "nn", ".", "Conv2d", "(", "128", ",", "64", ",", "3", ",", "1", ",", "0", ")", "\n", "\n", "self", ".", "recon_block1", "=", "WaveUnpool", "(", "64", ",", "option_unpool", ")", "\n", "if", "option_unpool", "==", "'sum'", ":", "\n", "\t\t\t", "self", ".", "conv1_2", "=", "nn", ".", "Conv2d", "(", "64", "*", "multiply_in", ",", "64", ",", "3", ",", "1", ",", "0", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "conv1_2_2", "=", "nn", ".", "Conv2d", "(", "64", "*", "multiply_in", ",", "64", ",", "3", ",", "1", ",", "0", ")", "\n", "", "self", ".", "conv1_1", "=", "nn", ".", "Conv2d", "(", "64", ",", "3", ",", "3", ",", "1", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.style-transfer.model.WaveDecoder.forward": [[235, 239], ["model.WaveDecoder.decode"], "methods", ["home.repos.pwc.inspect_result.naver_oasis.style-transfer.model.WaveDecoder.decode"], ["", "def", "forward", "(", "self", ",", "x", ",", "skips", ")", ":", "\n", "\t\t", "for", "level", "in", "[", "4", ",", "3", ",", "2", ",", "1", "]", ":", "\n", "\t\t\t", "x", "=", "self", ".", "decode", "(", "x", ",", "skips", ",", "level", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.style-transfer.model.WaveDecoder.decode": [[240, 267], ["model.WaveDecoder.relu", "model.WaveDecoder.recon_block3", "model.WaveDecoder.relu", "model.WaveDecoder.relu", "model.WaveDecoder.relu", "model.WaveDecoder.conv4_1", "_conv3_4", "model.WaveDecoder.conv3_3", "model.WaveDecoder.conv3_2", "model.WaveDecoder.relu", "model.WaveDecoder.recon_block2", "model.WaveDecoder.relu", "model.WaveDecoder.pad", "skips.keys", "model.WaveDecoder.pad", "model.WaveDecoder.pad", "model.WaveDecoder.pad", "model.WaveDecoder.conv3_1", "_conv2_2", "model.WaveDecoder.relu", "model.WaveDecoder.recon_block1", "model.WaveDecoder.relu", "model.WaveDecoder.conv1_1", "model.WaveDecoder.pad", "skips.keys", "model.WaveDecoder.pad", "model.WaveDecoder.conv2_1", "_conv1_2", "model.WaveDecoder.pad", "model.WaveDecoder.pad", "skips.keys", "model.WaveDecoder.pad"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "x", ",", "skips", ",", "level", ")", ":", "\n", "\t\t", "assert", "level", "in", "{", "4", ",", "3", ",", "2", ",", "1", "}", "\n", "if", "level", "==", "4", ":", "\n", "\t\t\t", "out", "=", "self", ".", "relu", "(", "self", ".", "conv4_1", "(", "self", ".", "pad", "(", "x", ")", ")", ")", "\n", "LH", ",", "HL", ",", "HH", "=", "skips", "[", "'pool3'", "]", "\n", "original", "=", "skips", "[", "'conv3_4'", "]", "if", "'conv3_4'", "in", "skips", ".", "keys", "(", ")", "else", "None", "\n", "out", "=", "self", ".", "recon_block3", "(", "out", ",", "LH", ",", "HL", ",", "HH", ",", "original", ")", "\n", "_conv3_4", "=", "self", ".", "conv3_4", "if", "self", ".", "option_unpool", "==", "'sum'", "else", "self", ".", "conv3_4_2", "\n", "out", "=", "self", ".", "relu", "(", "_conv3_4", "(", "self", ".", "pad", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "conv3_3", "(", "self", ".", "pad", "(", "out", ")", ")", ")", "\n", "return", "self", ".", "relu", "(", "self", ".", "conv3_2", "(", "self", ".", "pad", "(", "out", ")", ")", ")", "\n", "", "elif", "level", "==", "3", ":", "\n", "\t\t\t", "out", "=", "self", ".", "relu", "(", "self", ".", "conv3_1", "(", "self", ".", "pad", "(", "x", ")", ")", ")", "\n", "LH", ",", "HL", ",", "HH", "=", "skips", "[", "'pool2'", "]", "\n", "original", "=", "skips", "[", "'conv2_2'", "]", "if", "'conv2_2'", "in", "skips", ".", "keys", "(", ")", "else", "None", "\n", "out", "=", "self", ".", "recon_block2", "(", "out", ",", "LH", ",", "HL", ",", "HH", ",", "original", ")", "\n", "_conv2_2", "=", "self", ".", "conv2_2", "if", "self", ".", "option_unpool", "==", "'sum'", "else", "self", ".", "conv2_2_2", "\n", "return", "self", ".", "relu", "(", "_conv2_2", "(", "self", ".", "pad", "(", "out", ")", ")", ")", "\n", "", "elif", "level", "==", "2", ":", "\n", "\t\t\t", "out", "=", "self", ".", "relu", "(", "self", ".", "conv2_1", "(", "self", ".", "pad", "(", "x", ")", ")", ")", "\n", "LH", ",", "HL", ",", "HH", "=", "skips", "[", "'pool1'", "]", "\n", "original", "=", "skips", "[", "'conv1_2'", "]", "if", "'conv1_2'", "in", "skips", ".", "keys", "(", ")", "else", "None", "\n", "out", "=", "self", ".", "recon_block1", "(", "out", ",", "LH", ",", "HL", ",", "HH", ",", "original", ")", "\n", "_conv1_2", "=", "self", ".", "conv1_2", "if", "self", ".", "option_unpool", "==", "'sum'", "else", "self", ".", "conv1_2_2", "\n", "return", "self", ".", "relu", "(", "_conv1_2", "(", "self", ".", "pad", "(", "out", ")", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t", "return", "self", ".", "conv1_1", "(", "self", ".", "pad", "(", "x", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.naver_oasis.style-transfer.model.get_wav": [[28, 73], ["torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "net", "net", "net", "net", "torch.from_numpy().unsqueeze.float().unsqueeze().expand", "torch.from_numpy().unsqueeze.float().unsqueeze().expand", "torch.from_numpy().unsqueeze.float().unsqueeze().expand", "torch.from_numpy().unsqueeze.float().unsqueeze().expand", "numpy.ones", "numpy.ones", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.sqrt", "numpy.sqrt", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().unsqueeze.float().unsqueeze", "torch.from_numpy().unsqueeze.float().unsqueeze", "torch.from_numpy().unsqueeze.float().unsqueeze", "torch.from_numpy().unsqueeze.float().unsqueeze", "torch.from_numpy().unsqueeze.float", "torch.from_numpy().unsqueeze.float", "torch.from_numpy().unsqueeze.float", "torch.from_numpy().unsqueeze.float"], "function", ["None"], ["def", "get_wav", "(", "in_channels", ",", "pool", "=", "True", ")", ":", "\n", "\t", "\"\"\"wavelet decomposition using conv2d\"\"\"", "\n", "harr_wav_L", "=", "1", "/", "np", ".", "sqrt", "(", "2", ")", "*", "np", ".", "ones", "(", "(", "1", ",", "2", ")", ")", "\n", "harr_wav_H", "=", "1", "/", "np", ".", "sqrt", "(", "2", ")", "*", "np", ".", "ones", "(", "(", "1", ",", "2", ")", ")", "\n", "harr_wav_H", "[", "0", ",", "0", "]", "=", "-", "1", "*", "harr_wav_H", "[", "0", ",", "0", "]", "\n", "\n", "harr_wav_LL", "=", "np", ".", "transpose", "(", "harr_wav_L", ")", "*", "harr_wav_L", "\n", "harr_wav_LH", "=", "np", ".", "transpose", "(", "harr_wav_L", ")", "*", "harr_wav_H", "\n", "harr_wav_HL", "=", "np", ".", "transpose", "(", "harr_wav_H", ")", "*", "harr_wav_L", "\n", "harr_wav_HH", "=", "np", ".", "transpose", "(", "harr_wav_H", ")", "*", "harr_wav_H", "\n", "\n", "filter_LL", "=", "torch", ".", "from_numpy", "(", "harr_wav_LL", ")", ".", "unsqueeze", "(", "0", ")", "\n", "filter_LH", "=", "torch", ".", "from_numpy", "(", "harr_wav_LH", ")", ".", "unsqueeze", "(", "0", ")", "\n", "filter_HL", "=", "torch", ".", "from_numpy", "(", "harr_wav_HL", ")", ".", "unsqueeze", "(", "0", ")", "\n", "filter_HH", "=", "torch", ".", "from_numpy", "(", "harr_wav_HH", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "if", "pool", ":", "\n", "\t\t", "net", "=", "nn", ".", "Conv2d", "\n", "", "else", ":", "\n", "\t\t", "net", "=", "nn", ".", "ConvTranspose2d", "\n", "\n", "", "LL", "=", "net", "(", "in_channels", ",", "in_channels", ",", "\n", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "bias", "=", "False", ",", "\n", "groups", "=", "in_channels", ")", "\n", "LH", "=", "net", "(", "in_channels", ",", "in_channels", ",", "\n", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "bias", "=", "False", ",", "\n", "groups", "=", "in_channels", ")", "\n", "HL", "=", "net", "(", "in_channels", ",", "in_channels", ",", "\n", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "bias", "=", "False", ",", "\n", "groups", "=", "in_channels", ")", "\n", "HH", "=", "net", "(", "in_channels", ",", "in_channels", ",", "\n", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "bias", "=", "False", ",", "\n", "groups", "=", "in_channels", ")", "\n", "\n", "LL", ".", "weight", ".", "requires_grad", "=", "False", "\n", "LH", ".", "weight", ".", "requires_grad", "=", "False", "\n", "HL", ".", "weight", ".", "requires_grad", "=", "False", "\n", "HH", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n", "LL", ".", "weight", ".", "data", "=", "filter_LL", ".", "float", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "in_channels", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "LH", ".", "weight", ".", "data", "=", "filter_LH", ".", "float", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "in_channels", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "HL", ".", "weight", ".", "data", "=", "filter_HL", ".", "float", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "in_channels", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "HH", ".", "weight", ".", "data", "=", "filter_HH", ".", "float", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "in_channels", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "\n", "return", "LL", ",", "LH", ",", "HL", ",", "HH", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.dataset.acdc_dataset.ACDC.__init__": [[15, 89], ["zip", "len", "len", "glob.glob", "glob.glob", "sorted", "print", "acdc_dataset.ACDC.num_imgs_per_seq.append", "sorted", "sorted", "ValueError", "os.path.join", "os.path.join", "os.path.join", "len", "acdc_dataset.ACDC.files.append", "acdc_dataset.ACDC.label_files.append", "img_path.split", "label_img_path.split", "path.split", "[].rstrip", "len", "path.split"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "root", ",", "scene_list", ",", "cond_list", ",", "crop_size", "=", "(", "321", ",", "321", ")", ",", "\n", "mean", "=", "(", "128", ",", "128", ",", "128", ")", ",", "wct2_random_style_transfer", "=", "False", ",", "\n", "wct2_nn_style_transfer", "=", "False", ")", ":", "\n", "\t\t", "\"\"\"\n\t\t\tparams\n\n\t\t\t\troot : str\n\t\t\t\t\tPath to the data folder\n\t\t\"\"\"", "\n", "\n", "self", ".", "class_conversion_dict", "=", "{", "\n", "7", ":", "0", ",", "8", ":", "1", ",", "11", ":", "2", ",", "12", ":", "3", ",", "13", ":", "4", ",", "17", ":", "5", ",", "19", ":", "6", ",", "20", ":", "7", ",", "21", ":", "8", ",", "22", ":", "9", ",", "\n", "23", ":", "10", ",", "24", ":", "11", ",", "25", ":", "12", ",", "26", ":", "13", ",", "27", ":", "14", ",", "28", ":", "15", ",", "31", ":", "16", ",", "32", ":", "17", ",", "33", ":", "18", "}", "\n", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "scene_list", "=", "scene_list", "\n", "self", ".", "cond_list", "=", "cond_list", "\n", "\n", "self", ".", "files", "=", "[", "]", "\n", "self", ".", "label_files", "=", "[", "]", "\n", "\n", "assert", "not", "(", "wct2_random_style_transfer", "and", "wct2_nn_style_transfer", ")", "\n", "\n", "# NOTE if using style transfer, we assume images have been transformed ", "\n", "# before. Of course, in a practical application this will happen online.", "\n", "if", "wct2_random_style_transfer", ":", "\n", "\t\t\t", "self", ".", "images_root", "=", "'/FOLDER/TO/IMAGES/STYLIZED/WITH/WCT2-RANDOM'", "\n", "", "elif", "wct2_nn_style_transfer", ":", "\n", "\t\t\t", "self", ".", "images_root", "=", "'/FOLDER/TO/IMAGES/STYLIZED/WITH/WCT2-RANDOM'", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "images_root", "=", "self", ".", "root", "\n", "\n", "", "for", "cond", "in", "cond_list", ":", "\n", "\t\t\t", "if", "cond", "not", "in", "[", "'clean'", ",", "'fog'", ",", "'night'", ",", "'rain'", ",", "'snow'", "]", ":", "\n", "\t\t\t\t", "raise", "ValueError", "(", "\n", "'Unknown conditions [supported are clean, fog, night, rain, snow]'", ")", "\n", "\n", "", "", "assert", "len", "(", "cond_list", ")", "==", "len", "(", "scene_list", ")", "\n", "\n", "self", ".", "num_imgs_per_seq", "=", "[", "]", "\n", "\n", "for", "scene", ",", "cond", "in", "zip", "(", "self", ".", "scene_list", ",", "self", ".", "cond_list", ")", ":", "\n", "\n", "\t\t\t", "self", ".", "img_paths", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "images_root", ",", "'rgb_anon_trainvaltest/rgb_anon'", ",", "\n", "cond", ",", "'train'", ",", "scene", ",", "'*.png'", ")", ")", "\n", "self", ".", "img_paths", "+=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "images_root", ",", "'rgb_anon_trainvaltest/rgb_anon'", ",", "\n", "cond", ",", "'val'", ",", "scene", ",", "'*.png'", ")", ")", "\n", "self", ".", "img_paths", "=", "sorted", "(", "self", ".", "img_paths", ")", "\n", "\n", "self", ".", "label_img_paths", "=", "[", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'gt_trainval/gt'", ",", "cond", ",", "\n", "path", ".", "split", "(", "'/'", ")", "[", "-", "3", "]", ",", "scene", ",", "\n", "path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "rstrip", "(", "'_rgb_anon.png'", ")", "+", "'_gt_labelIds.png'", ")", "\n", "for", "path", "in", "self", ".", "img_paths", "]", "\n", "\n", "print", "(", "f'{scene}/{cond}: {len(self.img_paths)},'", ")", "\n", "\n", "self", ".", "num_imgs_per_seq", ".", "append", "(", "len", "(", "self", ".", "img_paths", ")", ")", "\n", "\n", "for", "img_path", "in", "sorted", "(", "self", ".", "img_paths", ")", ":", "\n", "\t\t\t\t", "name", "=", "img_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "self", ".", "files", ".", "append", "(", "{", "\n", "'img'", ":", "img_path", ",", "# used path", "\n", "'name'", ":", "name", "# just the end of the path", "\n", "}", ")", "\n", "\n", "", "for", "label_img_path", "in", "sorted", "(", "self", ".", "label_img_paths", ")", ":", "\n", "\t\t\t\t", "name", "=", "label_img_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "self", ".", "label_files", ".", "append", "(", "{", "\n", "'label_img'", ":", "label_img_path", ",", "# used path", "\n", "'label_name'", ":", "name", "# just the end of the path", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.dataset.acdc_dataset.ACDC.__len__": [[92, 94], ["len"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.dataset.acdc_dataset.ACDC.__getitem__": [[96, 121], ["PIL.Image.open().convert", "PIL.Image.open", "image.transpose.transpose.resize", "numpy.asarray", "cv2.resize", "acdc_dataset.ACDC.class_conversion_dict.items", "image.transpose.transpose.transpose", "numpy.array", "numpy.ones", "image.transpose.transpose.copy", "label_copy.copy", "numpy.array", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "\t\t", "image", "=", "Image", ".", "open", "(", "self", ".", "files", "[", "index", "]", "[", "'img'", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "name", "=", "self", ".", "files", "[", "index", "]", "[", "'name'", "]", "\n", "\n", "label", "=", "Image", ".", "open", "(", "self", ".", "label_files", "[", "index", "]", "[", "'label_img'", "]", ")", "\n", "label_name", "=", "self", ".", "label_files", "[", "index", "]", "[", "'label_name'", "]", "\n", "\n", "# resize", "\n", "image", "=", "image", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "BICUBIC", ")", "\n", "image", "=", "np", ".", "asarray", "(", "image", ",", "np", ".", "float32", ")", "\n", "\n", "label", "=", "cv2", ".", "resize", "(", "np", ".", "array", "(", "label", ")", ",", "self", ".", "crop_size", ",", "interpolation", "=", "0", ")", "\n", "\n", "# re-assign labels to filter out non-used ones", "\n", "label_copy", "=", "255", "*", "np", ".", "ones", "(", "label", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "class_conversion_dict", ".", "items", "(", ")", ":", "\n", "\t\t\t", "label_copy", "[", "label", "==", "k", "]", "=", "v", "\n", "\n", "", "size", "=", "image", ".", "shape", "\n", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# change to BGR", "\n", "image", "-=", "self", ".", "mean", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "return", "image", ".", "copy", "(", ")", ",", "label_copy", ".", "copy", "(", ")", ",", "np", ".", "array", "(", "size", ")", ",", "name", "\n", "", "", ""]], "home.repos.pwc.inspect_result.naver_oasis.dataset.synthia_dataset.SYNTHIA.__init__": [[17, 111], ["enumerate", "zip", "os.path.join", "os.path.join", "sorted", "sorted", "numpy.seed", "numpy.seed", "numpy.randint", "numpy.randint", "print", "print", "synthia_dataset.SYNTHIA.num_imgs_per_seq.append", "glob.glob", "glob.glob", "len", "len", "RuntimeError", "len", "synthia_dataset.SYNTHIA.files.append", "synthia_dataset.SYNTHIA.label_files.append", "len", "len", "len", "img_file.split", "label_file.split"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "root", ",", "scene_list", ",", "cond_list", ",", "camera_id", "=", "0", ",", "\n", "crop_size", "=", "(", "321", ",", "321", ")", ",", "mean", "=", "(", "128", ",", "128", ",", "128", ")", ",", "set", "=", "'train'", ",", "\n", "num_images", "=", "300", ",", "wct2_random_style_transfer", "=", "False", ",", "\n", "wct2_nn_style_transfer", "=", "False", ")", ":", "\n", "\t\t", "\"\"\"\n\t\t\tparams\n\n\t\t\t\troot : str\n\t\t\t\t\tPath to the data folder.\n\n\t\t\t\tscene : str\n\t\t\t\t\tDefines which SYNTHIA scenes to use\n\t\t\t\t\tFormat: X_Y_Z, with X/Y/Z \\in {01,02,04,05,06}\n\n\t\t\t\tcond : str\n\t\t\t\t\tDefines which weather/daylight condition to use\n\t\t\t\t\tFormat: X_Y_Z, with X/Y/Z \\in\n\t\t\t\t\t{DAWN, FOG, NIGHT, SPRING, SUMMER, WINTER, SUNSET}\n\t\t\"\"\"", "\n", "\n", "self", ".", "CLASSES", "=", "[", "\n", "'void'", ",", "'sky'", ",", "'building'", ",", "'road'", ",", "'sidewalk'", ",", "'fence'", ",", "\n", "'vegetation'", ",", "'pole'", ",", "'car'", ",", "'traffic_sign'", ",", "'pedestrian'", ",", "\n", "'bicycle'", ",", "'lanemarking'", ",", "'None'", ",", "'None'", ",", "'traffic_light'", "]", "\n", "\n", "self", ".", "CLASSES_dict", "=", "{", "\n", "0", ":", "'void'", ",", "1", ":", "'sky'", ",", "2", ":", "'building'", ",", "3", ":", "'road'", ",", "4", ":", "'sidewalk'", ",", "\n", "5", ":", "'fence'", ",", "6", ":", "'vegetation'", ",", "7", ":", "'pole'", ",", "8", ":", "'car'", ",", "9", ":", "'traffic_sign'", ",", "\n", "10", ":", "'pedestrian'", ",", "11", ":", "'bicycle'", ",", "12", ":", "'lanemarking'", ",", "13", ":", "'None'", ",", "\n", "14", ":", "'None'", ",", "15", ":", "'traffic_light'", "}", "\n", "\n", "self", ".", "LABELS_RGB_VALUES", "=", "[", "\n", "'0_0_0'", ",", "'128_128_128'", ",", "'128_0_0'", ",", "'128_64_128'", ",", "\n", "'0_0_192'", ",", "'64_64_128'", ",", "'128_128_0'", ",", "'192_192_128'", ",", "\n", "'64_0_128'", ",", "'192_128_128'", ",", "'64_64_0'", ",", "'0_128_192'", ",", "\n", "'0_172_0'", ",", "'None'", ",", "'None'", ",", "'0_128_128'", "]", "\n", "\n", "self", ".", "id_to_trainid", "=", "{", "\n", "1", ":", "10", ",", "2", ":", "2", ",", "3", ":", "0", ",", "4", ":", "1", ",", "5", ":", "4", ",", "6", ":", "8", ",", "7", ":", "5", ",", "8", ":", "13", ",", "9", ":", "7", ",", "10", ":", "11", ",", "11", ":", "18", ",", "15", ":", "6", "}", "\n", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "files", "=", "[", "]", "\n", "self", ".", "label_files", "=", "[", "]", "\n", "\n", "self", ".", "num_imgs_per_seq", "=", "[", "]", "\n", "\n", "assert", "not", "(", "wct2_random_style_transfer", "and", "wct2_nn_style_transfer", ")", "\n", "\n", "# NOTE if using style transfer, we assume images have been transformed ", "\n", "# before. Of course, in a practical application this will happen online.", "\n", "if", "wct2_random_style_transfer", ":", "\n", "\t\t\t", "self", ".", "images_root", "=", "'/FOLDER/TO/IMAGES/STYLIZED/WITH/WCT2-RANDOM'", "\n", "", "elif", "wct2_nn_style_transfer", ":", "\n", "\t\t\t", "self", ".", "images_root", "=", "'/FOLDER/TO/IMAGES/STYLIZED/WITH/WCT2-RANDOM'", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "images_root", "=", "self", ".", "root", "\n", "\n", "", "for", "n", ",", "(", "scene_", ",", "cond_", ")", "in", "enumerate", "(", "zip", "(", "scene_list", ",", "cond_list", ")", ")", ":", "\n", "\t\t\t", "img_regex", "=", "os", ".", "path", ".", "join", "(", "self", ".", "images_root", ",", "f'SYNTHIA-SEQS-{scene_}-{cond_}'", ",", "'RGB/Stereo_Left/Omni_F/*'", ")", "\n", "label_regex", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "f'SYNTHIA-SEQS-{scene_}-{cond_}'", ",", "'GT/LABELS/Stereo_Left/Omni_F/*'", ")", "\n", "\n", "img_files", "=", "sorted", "(", "glob", ".", "glob", "(", "img_regex", ")", ")", "\n", "label_files", "=", "sorted", "(", "glob", ".", "glob", "(", "label_regex", ")", ")", "\n", "\n", "\n", "npr", ".", "seed", "(", "len", "(", "img_files", ")", ")", "\n", "n", "=", "npr", ".", "randint", "(", "0", ",", "len", "(", "img_files", ")", "-", "num_images", ")", "\n", "print", "(", "f'Random seed: {len(img_files)}, sampled value: {n}'", ")", "\n", "img_files", "=", "img_files", "[", "n", ":", "n", "+", "num_images", "]", "\n", "label_files", "=", "label_files", "[", "n", ":", "n", "+", "num_images", "]", "\n", "\n", "\n", "if", "len", "(", "img_files", ")", "==", "0", ":", "\n", "\t\t\t\t", "raise", "RuntimeError", "(", "f'No images in {img_regex}'", ")", "\n", "\n", "", "print", "(", "f'Loaded {len(img_files)} from {img_regex}'", ")", "\n", "\n", "self", ".", "num_imgs_per_seq", ".", "append", "(", "len", "(", "img_files", ")", ")", "\n", "\n", "for", "img_file", "in", "img_files", ":", "\n", "\t\t\t\t", "self", ".", "files", ".", "append", "(", "{", "\n", "\"img\"", ":", "img_file", ",", "# used path", "\n", "\"name\"", ":", "f'{n}_'", "+", "img_file", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "# just the end of the path", "\n", "}", ")", "\n", "\n", "", "for", "label_file", "in", "label_files", ":", "\n", "\t\t\t\t", "self", ".", "label_files", ".", "append", "(", "{", "\n", "\"label_img\"", ":", "label_file", ",", "# used path", "\n", "\"name\"", ":", "f'{n}_'", "+", "label_file", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "# just the end of the path", "\n", "}", ")", "\n", "\n", "", "", "self", ".", "img_files", "=", "[", "_", "[", "'img'", "]", "for", "_", "in", "self", ".", "files", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.dataset.synthia_dataset.SYNTHIA.__len__": [[113, 115], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.dataset.synthia_dataset.SYNTHIA.__getitem__": [[116, 146], ["PIL.Image.open().convert", "image.transpose.transpose.resize", "cv2.resize", "synthia_dataset.SYNTHIA.id_to_trainid.items", "numpy.asarray", "numpy.asarray", "image.transpose.transpose.transpose", "numpy.asarray", "numpy.asarray", "numpy.array", "numpy.array", "numpy.ones", "numpy.ones", "image.transpose.transpose.copy", "label_copy.copy", "numpy.array", "numpy.array", "PIL.Image.open", "imageio.imread"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\t\t", "datafiles", "=", "self", ".", "files", "[", "index", "]", "\n", "labelfiles", "=", "self", ".", "label_files", "[", "index", "]", "\n", "\n", "image", "=", "Image", ".", "open", "(", "datafiles", "[", "\"img\"", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "name", "=", "datafiles", "[", "\"name\"", "]", "\n", "\n", "\n", "label_image", "=", "np", ".", "asarray", "(", "imageio", ".", "imread", "(", "labelfiles", "[", "\"label_img\"", "]", ",", "format", "=", "'PNG-FI'", ")", ")", "[", ":", ",", ":", ",", "0", "]", "# uint16", "\n", "label_name", "=", "labelfiles", "[", "\"name\"", "]", "\n", "\n", "# resize", "\n", "image", "=", "image", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "BICUBIC", ")", "\n", "\n", "# be careful not interpolating the label img, otherwise wrong labels", "\n", "label_image", "=", "cv2", ".", "resize", "(", "np", ".", "array", "(", "label_image", ")", ",", "self", ".", "crop_size", ",", "interpolation", "=", "0", ")", "\n", "\n", "# re-assign labels to match the format of Cityscapes", "\n", "label_copy", "=", "255", "*", "np", ".", "ones", "(", "label_image", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "for", "k", ",", "v", "in", "self", ".", "id_to_trainid", ".", "items", "(", ")", ":", "\n", "\t\t\t", "label_copy", "[", "label_image", "==", "k", "]", "=", "v", "\n", "\n", "", "image", "=", "np", ".", "asarray", "(", "image", ",", "np", ".", "float32", ")", "\n", "size", "=", "image", ".", "shape", "\n", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# change to BGR", "\n", "image", "-=", "self", ".", "mean", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "return", "image", ".", "copy", "(", ")", ",", "label_copy", ".", "copy", "(", ")", ",", "np", ".", "array", "(", "size", ")", ",", "name", "\n", "", "", ""]], "home.repos.pwc.inspect_result.naver_oasis.dataset.gta5_dataset.GTA5.__init__": [[14, 42], ["os.path.join", "i_id.strip", "copy.deepcopy", "range", "os.path.join", "os.path.join", "gta5_dataset.GTA5.files.append", "open", "numpy.shuffle", "numpy.shuffle"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "root", ",", "num_epochs", "=", "None", ",", "crop_size", "=", "(", "321", ",", "321", ")", ",", "mean", "=", "(", "128", ",", "128", ",", "128", ")", ")", ":", "\n", "\t\t", "self", ".", "root", "=", "root", "\n", "self", ".", "list_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'gta5_list/train.txt'", ")", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "img_names_", "=", "[", "i_id", ".", "strip", "(", ")", "for", "i_id", "in", "open", "(", "self", ".", "list_path", ")", "]", "#[:10]", "\n", "self", ".", "img_names", "=", "[", "]", "\n", "if", "num_epochs", "is", "not", "None", ":", "\n", "\t\t\t", "img_names_", "=", "copy", ".", "deepcopy", "(", "self", ".", "img_names_", ")", "\n", "for", "_", "in", "range", "(", "num_epochs", ")", ":", "\n", "\t\t\t\t", "npr", ".", "shuffle", "(", "img_names_", ")", "\n", "self", ".", "img_names", "+=", "img_names_", "\n", "\n", "", "", "self", ".", "files", "=", "[", "]", "\n", "self", ".", "class_conversion_dict", "=", "{", "7", ":", "0", ",", "8", ":", "1", ",", "11", ":", "2", ",", "12", ":", "3", ",", "13", ":", "4", ",", "17", ":", "5", ",", "\n", "19", ":", "6", ",", "20", ":", "7", ",", "21", ":", "8", ",", "22", ":", "9", ",", "23", ":", "10", ",", "24", ":", "11", ",", "25", ":", "12", ",", "\n", "26", ":", "13", ",", "27", ":", "14", ",", "28", ":", "15", ",", "31", ":", "16", ",", "32", ":", "17", ",", "33", ":", "18", "}", "\n", "\n", "for", "name", "in", "self", ".", "img_names", ":", "\n", "\t\t\t", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "f'images/images/{name}'", ")", "\n", "label_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "f'labels/labels/{name}'", ")", "\n", "self", ".", "files", ".", "append", "(", "{", "\n", "'img'", ":", "img_path", ",", "\n", "'label'", ":", "label_path", ",", "\n", "'name'", ":", "name", "\n", "}", ")", "\n", "\n", "", "self", ".", "img_files", "=", "[", "_", "[", "'img'", "]", "for", "_", "in", "self", ".", "files", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.dataset.gta5_dataset.GTA5.__len__": [[44, 46], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.dataset.gta5_dataset.GTA5.__getitem__": [[48, 72], ["PIL.Image.open().convert", "PIL.Image.open", "image.transpose.transpose.resize", "numpy.asarray.resize", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "gta5_dataset.GTA5.class_conversion_dict.items", "image.transpose.transpose.transpose", "numpy.ones", "numpy.ones", "image.transpose.transpose.copy", "label_copy.copy", "numpy.array", "numpy.array", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "\t\t", "image", "=", "Image", ".", "open", "(", "self", ".", "files", "[", "index", "]", "[", "'img'", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "label", "=", "Image", ".", "open", "(", "self", ".", "files", "[", "index", "]", "[", "'label'", "]", ")", "\n", "name", "=", "self", ".", "files", "[", "index", "]", "[", "'name'", "]", "\n", "\n", "# resize", "\n", "image", "=", "image", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "BICUBIC", ")", "\n", "label", "=", "label", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "NEAREST", ")", "\n", "\n", "image", "=", "np", ".", "asarray", "(", "image", ",", "np", ".", "float32", ")", "\n", "label", "=", "np", ".", "asarray", "(", "label", ",", "np", ".", "float32", ")", "\n", "\n", "# re-assign labels to match the format of Cityscapes", "\n", "label_copy", "=", "255", "*", "np", ".", "ones", "(", "label", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "class_conversion_dict", ".", "items", "(", ")", ":", "\n", "\t\t\t", "label_copy", "[", "label", "==", "k", "]", "=", "v", "\n", "\n", "", "size", "=", "image", ".", "shape", "\n", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# change to BGR", "\n", "image", "-=", "self", ".", "mean", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "return", "image", ".", "copy", "(", ")", ",", "label_copy", ".", "copy", "(", ")", ",", "np", ".", "array", "(", "size", ")", ",", "name", "\n", "", "", ""]], "home.repos.pwc.inspect_result.naver_oasis.dataset.cityscapes_dataset.Cityscapes.__init__": [[15, 120], ["zip", "len", "len", "print", "cityscapes_dataset.Cityscapes.num_imgs_per_seq.append", "sorted", "sorted", "ValueError", "i_id.strip", "i_id.strip", "len", "cityscapes_dataset.Cityscapes.files.append", "os.path.join", "cityscapes_dataset.Cityscapes.label_files.append", "open", "open", "os.path.join", "sorted", "ValueError", "[].split", "len", "os.path.join", "i_id.rstrip", "glob.glob", "_.rstrip", "ValueError", "os.path.join", "_.split", "name.split"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "root", ",", "city_list", ",", "cond_list", ",", "crop_size", "=", "(", "321", ",", "321", ")", ",", "\n", "mean", "=", "(", "128", ",", "128", ",", "128", ")", ",", "set", "=", "'val'", ",", "alpha", "=", "0.02", ",", "beta", "=", "0.01", ",", "\n", "dropsize", "=", "0.005", ",", "pattern", "=", "3", ",", "wct2_random_style_transfer", "=", "False", ",", "\n", "wct2_nn_style_transfer", "=", "False", ")", ":", "\n", "\t\t", "\"\"\"\n\t\t\tparams\n\n\t\t\t\troot : str\n\t\t\t\t\tPath to the data folder'\n\n\t\t\"\"\"", "\n", "\n", "self", ".", "class_conversion_dict", "=", "{", "\n", "7", ":", "0", ",", "8", ":", "1", ",", "11", ":", "2", ",", "12", ":", "3", ",", "13", ":", "4", ",", "17", ":", "5", ",", "19", ":", "6", ",", "20", ":", "7", ",", "21", ":", "8", ",", "22", ":", "9", ",", "\n", "23", ":", "10", ",", "24", ":", "11", ",", "25", ":", "12", ",", "26", ":", "13", ",", "27", ":", "14", ",", "28", ":", "15", ",", "31", ":", "16", ",", "32", ":", "17", ",", "33", ":", "18", "}", "\n", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "city_list", "=", "city_list", "\n", "self", ".", "cond_list", "=", "cond_list", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "beta", "=", "beta", "\n", "self", ".", "dropsize", "=", "dropsize", "\n", "self", ".", "pattern", "=", "pattern", "\n", "\n", "self", ".", "files", "=", "[", "]", "\n", "self", ".", "label_files", "=", "[", "]", "\n", "\n", "for", "cond", "in", "cond_list", ":", "\n", "\t\t\t", "if", "cond", "not", "in", "[", "'clean'", ",", "'fog'", ",", "'rain'", "]", ":", "\n", "\t\t\t\t", "raise", "ValueError", "(", "\n", "'Unknown conditions [supported are clean, rain, fog]'", ")", "\n", "\n", "", "", "assert", "len", "(", "cond_list", ")", "==", "len", "(", "city_list", ")", "\n", "\n", "self", ".", "num_imgs_per_seq", "=", "[", "]", "\n", "\n", "assert", "not", "(", "wct2_random_style_transfer", "and", "wct2_nn_style_transfer", ")", "\n", "\n", "# NOTE if using style transfer, we assume images have been transformed ", "\n", "# before. Of course, in a practical application this will happen online.", "\n", "if", "wct2_random_style_transfer", ":", "\n", "\t\t\t", "self", ".", "images_root", "=", "'/FOLDER/TO/IMAGES/STYLIZED/WITH/WCT2-RANDOM'", "\n", "", "elif", "wct2_nn_style_transfer", ":", "\n", "\t\t\t", "self", ".", "images_root", "=", "'/FOLDER/TO/IMAGES/STYLIZED/WITH/WCT2-RANDOM'", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "images_root", "=", "self", ".", "root", "\n", "\n", "", "for", "city", ",", "cond", "in", "zip", "(", "self", ".", "city_list", ",", "self", ".", "cond_list", ")", ":", "\n", "\t\t\t", "if", "city", "in", "[", "'berlin'", ",", "'bielefeld'", ",", "'bonn'", ",", "'leverkusen'", ",", "'mainz'", ",", "'munich'", "]", ":", "\n", "\t\t\t\t", "self", ".", "set", "=", "'test'", "\n", "", "elif", "city", "in", "[", "'frankfurt'", ",", "'lindau'", ",", "'munster'", "]", ":", "\n", "\t\t\t\t", "self", ".", "set", "=", "'val'", "\n", "", "else", ":", "\n", "\t\t\t\t", "self", ".", "set", "=", "'train'", "\n", "\n", "# Path to the txt containing the relative paths", "\n", "# (with respect to root) of the images/labels to load", "\n", "", "list_of_images_file", "=", "f'./dataset/cityscapes_list/images_{city}.txt'", "\n", "list_of_label_images_file", "=", "f'./dataset/cityscapes_list/labels_{city}.txt'", "\n", "\n", "self", ".", "img_names", "=", "[", "i_id", ".", "strip", "(", ")", "for", "i_id", "in", "open", "(", "list_of_images_file", ")", "]", "\n", "if", "cond", "==", "'clean'", ":", "\n", "\t\t\t\t", "pass", "\n", "", "elif", "cond", "==", "'fog'", ":", "\n", "\t\t\t\t", "self", ".", "img_names", "=", "[", "i_id", ".", "rstrip", "(", "'.png'", ")", "+", "f'_foggy_beta_0.02.png'", "for", "i_id", "in", "self", ".", "img_names", "]", "\n", "", "elif", "cond", "==", "'rain'", ":", "\n", "\t\t\t\t", "self", ".", "img_names", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "images_root", ",", "\n", "f'leftImg8bit_rain/{self.set}/{city}'", ",", "\n", "f'*_alpha_{self.alpha}_beta_{self.beta}_dropsize_{self.dropsize}_pattern_{self.pattern}.png'", ")", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "raise", "ValueError", "(", "'Unknown conditions [supported are clean,rain,fog]'", ")", "\n", "\n", "", "self", ".", "label_img_names", "=", "[", "i_id", ".", "strip", "(", ")", "for", "i_id", "in", "open", "(", "list_of_label_images_file", ")", "]", "\n", "\n", "if", "cond", "==", "'rain'", ":", "\n", "\t\t\t\t", "img_names_", "=", "[", "_", ".", "split", "(", "f'/{self.set}/'", ")", "[", "1", "]", ".", "split", "(", "'_leftImg8bit_'", ")", "[", "0", "]", "for", "_", "in", "self", ".", "img_names", "]", "\n", "self", ".", "label_img_names", "=", "[", "_", "for", "_", "in", "self", ".", "label_img_names", "if", "_", ".", "rstrip", "(", "'_gtFine_labelIds.png'", ")", "in", "img_names_", "]", "\n", "\n", "", "print", "(", "f'\\'{city}\\': {len(self.img_names)},'", ")", "\n", "\n", "self", ".", "num_imgs_per_seq", ".", "append", "(", "len", "(", "self", ".", "img_names", ")", ")", "\n", "\n", "for", "name", "in", "sorted", "(", "self", ".", "img_names", ")", ":", "\n", "\t\t\t\t", "if", "cond", "==", "'clean'", ":", "\n", "\t\t\t\t\t", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "images_root", ",", "f'leftImg8bit/{self.set}/{name}'", ")", "\n", "", "elif", "cond", "==", "'fog'", ":", "\n", "\t\t\t\t\t", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "images_root", ",", "f'leftImg8bit_foggyDBF/{self.set}/{name}'", ")", "\n", "", "elif", "cond", "==", "'rain'", ":", "\n", "\t\t\t\t\t", "img_path", ",", "name", "=", "name", ",", "name", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "raise", "ValueError", "(", "'Unknown conditions [supported are clean,rain,fog]'", ")", "\n", "\n", "", "self", ".", "files", ".", "append", "(", "{", "\n", "'img'", ":", "img_path", ",", "# used path", "\n", "'name'", ":", "name", "# just the end of the path", "\n", "}", ")", "\n", "\n", "", "for", "name", "in", "sorted", "(", "self", ".", "label_img_names", ")", ":", "\n", "\t\t\t\t", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "f'gtFine/{self.set}/{name}'", ")", "\n", "self", ".", "label_files", ".", "append", "(", "{", "\n", "'label_img'", ":", "img_path", ",", "# used path", "\n", "'label_name'", ":", "name", "# just the end of the path", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.dataset.cityscapes_dataset.Cityscapes.__len__": [[123, 125], ["len"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver_oasis.dataset.cityscapes_dataset.Cityscapes.__getitem__": [[127, 152], ["PIL.Image.open().convert", "PIL.Image.open", "image.transpose.transpose.resize", "numpy.asarray", "cv2.resize", "cityscapes_dataset.Cityscapes.class_conversion_dict.items", "image.transpose.transpose.transpose", "numpy.array", "numpy.ones", "image.transpose.transpose.copy", "label_copy.copy", "numpy.array", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "\t\t", "image", "=", "Image", ".", "open", "(", "self", ".", "files", "[", "index", "]", "[", "'img'", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "name", "=", "self", ".", "files", "[", "index", "]", "[", "'name'", "]", "\n", "\n", "label", "=", "Image", ".", "open", "(", "self", ".", "label_files", "[", "index", "]", "[", "'label_img'", "]", ")", "#.convert('RGB')", "\n", "label_name", "=", "self", ".", "label_files", "[", "index", "]", "[", "'label_name'", "]", "\n", "\n", "# resize", "\n", "image", "=", "image", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "BICUBIC", ")", "\n", "image", "=", "np", ".", "asarray", "(", "image", ",", "np", ".", "float32", ")", "\n", "\n", "label", "=", "cv2", ".", "resize", "(", "np", ".", "array", "(", "label", ")", ",", "self", ".", "crop_size", ",", "interpolation", "=", "0", ")", "\n", "\n", "# re-assign labels to filter out non-used ones", "\n", "label_copy", "=", "255", "*", "np", ".", "ones", "(", "label", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "class_conversion_dict", ".", "items", "(", ")", ":", "\n", "\t\t\t", "label_copy", "[", "label", "==", "k", "]", "=", "v", "\n", "\n", "", "size", "=", "image", ".", "shape", "\n", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# change to BGR", "\n", "image", "-=", "self", ".", "mean", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "return", "image", ".", "copy", "(", ")", ",", "label_copy", ".", "copy", "(", ")", ",", "np", ".", "array", "(", "size", ")", ",", "name", "\n", "", "", ""]], "home.repos.pwc.inspect_result.naver_oasis.tex_tables.make_tables.make_main_table": [[8, 159], ["print", "dict", "dict", "dict.keys", "sorted", "dict.keys", "dict", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "sorted", "print", "print", "print", "print", "print", "print", "print", "res_for_table_dict[].keys", "dict.keys", "sorted.append", "dict.keys", "print", "print", "enumerate", "len", "float", "float", "sorted.append", "dict.keys", "str", "str", "method_.replace", "sub_folders_list.append", "dict", "len", "len", "len", "str", "len", "numpy.nanmean", "numpy.nanstd", "len", "RuntimeError"], "function", ["None"], ["def", "make_main_table", "(", "\n", "data_dict", ",", "selected_methods", ",", "selected_exps", ",", "\n", "include_avg_column", "=", "True", ")", ":", "\n", "\n", "\t", "print", "(", "'\\n\\n\\nMaking table'", ")", "\n", "\n", "validated_methods", "=", "[", "\n", "'No adaptation'", ",", "\n", "'N-BN-0.1-None-None-only_batch_norm_params'", ",", "\n", "'C-BN-0.1-None-None-only_batch_norm_params'", ",", "\n", "'N-TENT-1-0-1.0-None-0.1-only_batch_norm_params'", ",", "\n", "'C-TENT-1-0-0.01-None-0.1-only_batch_norm_params'", ",", "\n", "'C-TENT-SR-1-1-0.01-None-0.1-only_batch_norm_params'", ",", "\n", "'C-TENT-SR-1-2-0.01-None-0.1-only_batch_norm_params'", ",", "\n", "'Class-N-TENT-1-0-0.1-1.0-0.1-only_batch_norm_params'", ",", "\n", "'Oracle-N-TENT-1-0-1.0-None-0.1-only_batch_norm_params'", ",", "\n", "'N-PL-vanilla-0.0-1-0-0.0001-0.1-None-whole_net'", ",", "\n", "'C-PL-vanilla-0.0-1-0-0.0001-0.1-None-whole_net'", ",", "\n", "'C-PL-SR-vanilla-0.0-1-2-0.0001-0.1-None-whole_net'", ",", "\n", "'Class-N-PL-vanilla-0.0-1-0-0.0001-0.1-0.5-whole_net'", ",", "\n", "'Oracle-N-PL-vanilla-0.0-1-0-0.0001-0.1-None-whole_net'", ",", "\n", "'ST_wct2-random'", ",", "\n", "'ST_wct2-nn'", ",", "\n", "]", "\n", "\n", "### TODO: validated_methods += YOUR_METHODS", "\n", "\n", "res_for_table_dict", "=", "dict", "(", ")", "\n", "res_for_avg_column_dict", "=", "dict", "(", ")", "\n", "\n", "sub_folders_list", "=", "[", "]", "\n", "\n", "for", "exp_key", "in", "selected_exps", ":", "\n", "\t\t", "for", "sel_method_", "in", "selected_methods", ":", "\n", "\t\t\t", "for", "n", ",", "method_", "in", "enumerate", "(", "data_dict", "[", "'method'", "]", ")", ":", "\n", "\n", "\t\t\t\t", "if", "data_dict", "[", "'experiment'", "]", "[", "n", "]", "!=", "exp_key", ":", "\n", "\t\t\t\t\t", "continue", "\n", "\n", "", "if", "method_", "!=", "sel_method_", ":", "\n", "\t\t\t\t\t", "continue", "\n", "\n", "", "bn_mom", "=", "data_dict", "[", "'batch_norm_momentum'", "]", "[", "n", "]", "\n", "lr", "=", "data_dict", "[", "'learning_rate'", "]", "[", "n", "]", "\n", "reset_thrs", "=", "data_dict", "[", "'reset_thrs'", "]", "[", "n", "]", "\n", "pl_mode", "=", "data_dict", "[", "'pseudo_labels_mode'", "]", "[", "n", "]", "\n", "pl_thrs", "=", "data_dict", "[", "'pseudo_labels_thrs'", "]", "[", "n", "]", "\n", "src_iters", "=", "data_dict", "[", "'src_iters'", "]", "[", "n", "]", "\n", "adapt_iters", "=", "data_dict", "[", "'adapt_iters'", "]", "[", "n", "]", "\n", "params_trained", "=", "data_dict", "[", "'params_trained'", "]", "[", "n", "]", "\n", "\n", "if", "'PL'", "in", "sel_method_", ":", "\n", "\t\t\t\t\t", "if", "pl_mode", "!=", "'vanilla'", ":", "\n", "\t\t\t\t\t\t", "continue", "\n", "\n", "", "", "if", "'BN'", "in", "sel_method_", ":", "\n", "\t\t\t\t\t", "key_", "=", "f'{sel_method_}-{bn_mom}-{params_trained}'", "\n", "\n", "", "elif", "'TENT'", "in", "sel_method_", ":", "\n", "\t\t\t\t\t", "key_", "=", "f'{sel_method_}-{adapt_iters}-{src_iters}-{lr}-'", "+", "f'{reset_thrs}-{bn_mom}-{params_trained}'", "\n", "\n", "", "elif", "'PL'", "in", "sel_method_", ":", "\n", "\t\t\t\t\t", "key_", "=", "f'{sel_method_}-{pl_mode}-{pl_thrs}-{adapt_iters}-'", "+", "f'{src_iters}-{lr}-{bn_mom}-{reset_thrs}-'", "+", "f'{params_trained}'", "\n", "\n", "", "elif", "sel_method_", "==", "'No adaptation'", ":", "\n", "\t\t\t\t\t", "key_", "=", "f'{sel_method_}'", "\n", "\n", "", "elif", "'ST'", "in", "sel_method_", ":", "\n", "\t\t\t\t\t", "key_", "=", "f'{sel_method_}'", "\n", "\n", "### TODO add your method here.", "\n", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "raise", "RuntimeError", "(", "f'Unknown adapt_method [{sel_method_}]'", ")", "\n", "\n", "", "if", "key_", "not", "in", "validated_methods", ":", "\n", "\t\t\t\t\t", "continue", "\n", "\n", "", "if", "data_dict", "[", "'sub_folder'", "]", "[", "n", "]", "not", "in", "sub_folders_list", ":", "\n", "\t\t\t\t\t", "sub_folders_list", ".", "append", "(", "data_dict", "[", "'sub_folder'", "]", "[", "n", "]", ")", "\n", "\n", "", "if", "key_", "not", "in", "res_for_table_dict", ":", "\n", "\t\t\t\t\t", "res_for_table_dict", "[", "key_", "]", "=", "dict", "(", ")", "\n", "", "if", "key_", "not", "in", "res_for_avg_column_dict", ":", "\n", "\t\t\t\t\t", "res_for_avg_column_dict", "[", "key_", "]", "=", "[", "]", "\n", "\n", "", "avg_results_type", "=", "'avg_results'", "\n", "std_results_type", "=", "'std_results'", "\n", "all_results_type", "=", "'all_results'", "\n", "avg_res", "=", "float", "(", "data_dict", "[", "avg_results_type", "]", "[", "n", "]", ")", "\n", "std_res", "=", "float", "(", "data_dict", "[", "std_results_type", "]", "[", "n", "]", ")", "\n", "tex_line", "=", "f'$+ {avg_res*100.:.1f} \\\\% $ \\\\tiny {{$ \\\\pm  {std_res*100:.1f} $ }}'", "\n", "res_for_table_dict", "[", "key_", "]", "[", "exp_key", "]", "=", "tex_line", "\n", "res_for_avg_column_dict", "[", "key_", "]", "+=", "data_dict", "[", "all_results_type", "]", "[", "n", "]", "\n", "\n", "", "", "", "available_exps", "=", "[", "]", "\n", "\n", "for", "method_", "in", "res_for_table_dict", ".", "keys", "(", ")", ":", "\n", "\t\t", "for", "exp_type_", "in", "res_for_table_dict", "[", "method_", "]", ".", "keys", "(", ")", ":", "\n", "\t\t\t", "if", "exp_type_", "not", "in", "available_exps", ":", "\n", "\t\t\t\t", "available_exps", ".", "append", "(", "exp_type_", ")", "\n", "\n", "", "", "", "available_exps", "=", "sorted", "(", "available_exps", ")", "\n", "\n", "for", "method_", "in", "res_for_table_dict", ".", "keys", "(", ")", ":", "\n", "\t\t", "for", "exp_type_", "in", "available_exps", ":", "\n", "\t\t\t", "if", "exp_type_", "not", "in", "res_for_table_dict", "[", "method_", "]", ":", "\n", "\t\t\t\t", "res_for_table_dict", "[", "method_", "]", "[", "exp_type_", "]", "=", "'-'", "\n", "\n", "", "", "", "exp_counter_dict", "=", "dict", "(", ")", "\n", "if", "include_avg_column", ":", "\n", "\t\t", "avg_column_dict", "=", "{", "\n", "k_", ":", "f'$+{np.nanmean(res_for_avg_column_dict[k_])*100.:.1f} '", "+", "f'\\\\% $ \\\\tiny{{$\\\\pm {np.nanstd(res_for_avg_column_dict[k_])*100.:.1f}'", "+", "f' $}} ({len(res_for_avg_column_dict[k_])})'", "\n", "for", "k_", "in", "res_for_avg_column_dict", ".", "keys", "(", ")", "}", "\n", "for", "method_", "in", "res_for_table_dict", ".", "keys", "(", ")", ":", "\n", "\t\t\t", "res_for_table_dict", "[", "method_", "]", "[", "'Avg.'", "]", "=", "avg_column_dict", "[", "method_", "]", "\n", "exp_counter_dict", "[", "method_", "]", "=", "len", "(", "res_for_avg_column_dict", "[", "method_", "]", ")", "\n", "", "available_exps", ".", "append", "(", "'Avg.'", ")", "\n", "\n", "", "table_name", "=", "'OASIS'", "\n", "\n", "print", "(", "'\\\\begin{table*}[t]'", ")", "\n", "print", "(", "'\\\\begin{center}'", ")", "\n", "print", "(", "'{\\scriptsize'", ")", "\n", "print", "(", "'\\\\setlength{\\\\tabcolsep}{3.5pt}'", ")", "\n", "print", "(", "'\\\\begin{tabular}{@{}l'", "+", "'c'", "*", "len", "(", "available_exps", ")", "+", "'@{}}'", ")", "\n", "print", "(", "'\\\\multicolumn {'", "+", "str", "(", "len", "(", "available_exps", ")", "+", "1", ")", "+", "'} {c}{\\\\textbf{'", "+", "table_name", "+", "'}} \\\\\\\\'", ")", "\n", "print", "(", "'\\\\toprule'", ")", "\n", "print", "(", "'& \\\\multicolumn{'", "+", "str", "(", "len", "(", "available_exps", ")", ")", "+", "'}{c}{\\\\textbf{Sequence type}} \\\\\\\\'", ")", "\n", "print", "(", "'\\\\cmidrule(r){2-'", "+", "str", "(", "len", "(", "available_exps", ")", "+", "1", ")", "+", "'}'", ")", "\n", "print", "(", "'\\\\textbf{Method} & '", "+", "' & '", ".", "join", "(", "available_exps", ")", "+", "'\\\\\\\\'", ")", "\n", "print", "(", "'\\\\midrule'", ")", "\n", "for", "method_", "in", "sorted", "(", "res_for_table_dict", ".", "keys", "(", ")", ")", ":", "\n", "\t\t", "tex_string", "=", "f\" {method_.replace('_', '-')}\"", "\n", "for", "exp_type_", "in", "available_exps", ":", "\n", "\t\t\t", "tex_string", "+=", "f' & {res_for_table_dict[method_][exp_type_]}'", "\n", "", "tex_string", "+=", "'\\\\\\\\'", "\n", "print", "(", "tex_string", ")", "\n", "print", "(", "'\\\\midrule'", ")", "\n", "", "print", "(", "'\\\\bottomrule'", ")", "\n", "print", "(", "'\\\\end{tabular}'", ")", "\n", "print", "(", "'}'", ")", "\n", "print", "(", "'\\\\end{center}'", ")", "\n", "print", "(", "'\\\\caption{ }'", ")", "\n", "print", "(", "'\\\\label{ }'", ")", "\n", "print", "(", "'\\\\end{table*}'", ")", "\n", "\n"]]}