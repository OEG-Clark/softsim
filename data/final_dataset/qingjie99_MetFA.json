{"home.repos.pwc.inspect_result.qingjie99_MetFA.None.residual_def.residual_encoder": [[13, 83], ["tensorflow.initializers.variance_scaling", "tensorflow.zeros_initializer", "tensorflow.layers.conv3d", "tensorflow.logging.info", "range", "len", "len", "len", "len", "saved_strides.append", "range", "res_scales.append", "tensorflow.logging.info", "inputs.get_shape().as_list", "residual_unit.vanilla_residual_unit_3d.get_shape", "tensorflow.variable_scope", "residual_unit.vanilla_residual_unit_3d", "tensorflow.variable_scope", "residual_unit.vanilla_residual_unit_3d", "residual_unit.vanilla_residual_unit_3d.get_shape", "inputs.get_shape"], "function", ["None"], ["def", "residual_encoder", "(", "inputs", ",", "\n", "#num_classes,", "\n", "num_res_units", "=", "1", ",", "\n", "filters", "=", "(", "16", ",", "32", ",", "64", ",", "128", ")", ",", "\n", "strides", "=", "(", "(", "1", ",", "1", ",", "1", ")", ",", "(", "2", ",", "2", ",", "2", ")", ",", "(", "2", ",", "2", ",", "2", ")", ",", "(", "2", ",", "2", ",", "2", ")", ")", ",", "\n", "use_bias", "=", "False", ",", "\n", "activation", "=", "leaky_relu", ",", "\n", "mode", "=", "tf", ".", "estimator", ".", "ModeKeys", ".", "EVAL", ",", "\n", "kernel_initializer", "=", "tf", ".", "initializers", ".", "variance_scaling", "(", "distribution", "=", "'uniform'", ")", ",", "\n", "bias_initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "kernel_regularizer", "=", "None", ",", "\n", "bias_regularizer", "=", "None", ")", ":", "\n", "\n", "\n", "    ", "assert", "len", "(", "strides", ")", "==", "len", "(", "filters", ")", "\n", "assert", "len", "(", "inputs", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "==", "5", ",", "'inputs are required to have a rank of 5.'", "\n", "\n", "conv_params", "=", "{", "'padding'", ":", "'same'", ",", "\n", "'use_bias'", ":", "use_bias", ",", "\n", "'kernel_initializer'", ":", "kernel_initializer", ",", "\n", "'bias_initializer'", ":", "bias_initializer", ",", "\n", "'kernel_regularizer'", ":", "kernel_regularizer", ",", "\n", "'bias_regularizer'", ":", "bias_regularizer", "}", "\n", "\n", "x", "=", "inputs", "\n", "\n", "# Initial convolution with filters[0]", "\n", "x", "=", "tf", ".", "layers", ".", "conv3d", "(", "inputs", "=", "x", ",", "\n", "filters", "=", "filters", "[", "0", "]", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "\n", "strides", "=", "strides", "[", "0", "]", ",", "\n", "**", "conv_params", ")", "\n", "\n", "tf", ".", "logging", ".", "info", "(", "'Init conv tensor shape {}'", ".", "format", "(", "x", ".", "get_shape", "(", ")", ")", ")", "\n", "\n", "# Residual feature encoding blocks with num_res_units at different", "\n", "# resolution scales res_scales", "\n", "res_scales", "=", "[", "x", "]", "\n", "saved_strides", "=", "[", "]", "\n", "for", "res_scale", "in", "range", "(", "1", ",", "len", "(", "filters", ")", ")", ":", "\n", "\n", "# Features are downsampled via strided convolutions. These are defined", "\n", "# in `strides` and subsequently saved", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'enc_unit_{}_0'", ".", "format", "(", "res_scale", ")", ")", ":", "\n", "\n", "            ", "x", "=", "vanilla_residual_unit_3d", "(", "\n", "inputs", "=", "x", ",", "\n", "out_filters", "=", "filters", "[", "res_scale", "]", ",", "\n", "strides", "=", "strides", "[", "res_scale", "]", ",", "\n", "activation", "=", "activation", ",", "\n", "mode", "=", "mode", ")", "\n", "", "saved_strides", ".", "append", "(", "strides", "[", "res_scale", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "num_res_units", ")", ":", "\n", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'enc_unit_{}_{}'", ".", "format", "(", "res_scale", ",", "i", ")", ")", ":", "\n", "\n", "                ", "x", "=", "vanilla_residual_unit_3d", "(", "\n", "inputs", "=", "x", ",", "\n", "out_filters", "=", "filters", "[", "res_scale", "]", ",", "\n", "strides", "=", "(", "1", ",", "1", ",", "1", ")", ",", "\n", "activation", "=", "activation", ",", "\n", "mode", "=", "mode", ")", "\n", "", "", "res_scales", ".", "append", "(", "x", ")", "\n", "\n", "tf", ".", "logging", ".", "info", "(", "'Encoder at res_scale {} tensor shape: {}'", ".", "format", "(", "\n", "res_scale", ",", "x", ".", "get_shape", "(", ")", ")", ")", "\n", "\n", "", "return", "x", ",", "res_scales", ",", "saved_strides", ",", "filters", "\n", "\n"]], "home.repos.pwc.inspect_result.qingjie99_MetFA.None.residual_def.classify_dense_bn_relu": [[86, 114], ["tensorflow.initializers.variance_scaling", "tensorflow.zeros_initializer", "range", "len", "tensorflow.layers.dense", "tensorflow.contrib.layers.batch_norm", "tensorflow.nn.relu"], "function", ["None"], ["", "def", "classify_dense_bn_relu", "(", "x", ",", "\n", "units", "=", "(", "256", ",", "256", ")", ",", "\n", "is_train", "=", "True", ",", "\n", "use_bias", "=", "False", ",", "\n", "kernel_initializer", "=", "tf", ".", "initializers", ".", "variance_scaling", "(", "distribution", "=", "'uniform'", ")", ",", "\n", "bias_initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "kernel_regularizer", "=", "None", ",", "\n", "bias_regularizer", "=", "None", ")", ":", "\n", "\n", "    ", "conv_params", "=", "{", "'use_bias'", ":", "use_bias", ",", "\n", "'kernel_initializer'", ":", "kernel_initializer", ",", "\n", "'bias_initializer'", ":", "bias_initializer", ",", "\n", "'kernel_regularizer'", ":", "kernel_regularizer", ",", "\n", "'bias_regularizer'", ":", "bias_regularizer", "}", "\n", "\n", "# #flatten the middle axis", "\n", "# flat_x = tf.contrib.layers.flatten(x)", "\n", "# x_new = flat_x", "\n", "\n", "x_new", "=", "x", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "units", ")", ")", ":", "\n", "\n", "        ", "dense", "=", "tf", ".", "layers", ".", "dense", "(", "inputs", "=", "x_new", ",", "units", "=", "units", "[", "i", "]", ",", "trainable", "=", "is_train", ",", "**", "conv_params", ")", "\n", "bn", "=", "tf", ".", "contrib", ".", "layers", ".", "batch_norm", "(", "dense", ",", "is_training", "=", "is_train", ")", "\n", "x_new", "=", "tf", ".", "nn", ".", "relu", "(", "bn", ")", "\n", "\n", "", "return", "x_new", "\n", "\n"]], "home.repos.pwc.inspect_result.qingjie99_MetFA.None.residual_def.prototype": [[115, 142], ["tensorflow.initializers.variance_scaling", "tensorflow.zeros_initializer", "tensorflow.nn.l2_normalize", "tensorflow.layers.dense"], "function", ["None"], ["", "def", "prototype", "(", "x", ",", "\n", "is_train", "=", "True", ",", "\n", "num_class", "=", "1", ",", "\n", "use_bias", "=", "False", ",", "\n", "kernel_initializer", "=", "tf", ".", "initializers", ".", "variance_scaling", "(", "distribution", "=", "'uniform'", ")", ",", "\n", "bias_initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "kernel_regularizer", "=", "None", ",", "\n", "bias_regularizer", "=", "None", ")", ":", "\n", "\n", "    ", "conv_params", "=", "{", "'use_bias'", ":", "use_bias", ",", "\n", "'kernel_initializer'", ":", "kernel_initializer", ",", "\n", "'bias_initializer'", ":", "bias_initializer", ",", "\n", "'kernel_regularizer'", ":", "kernel_regularizer", ",", "\n", "'bias_regularizer'", ":", "bias_regularizer", "}", "\n", "\n", "# #flatten the middle axis", "\n", "# flat_x = tf.contrib.layers.flatten(x)", "\n", "# x_new = flat_x", "\n", "\n", "x_new", "=", "x", "\n", "\n", "x_new", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "x_new", ",", "dim", "=", "1", ")", "\n", "logits", "=", "tf", ".", "layers", ".", "dense", "(", "inputs", "=", "x_new", ",", "units", "=", "num_class", ",", "trainable", "=", "is_train", ",", "**", "conv_params", ")", "\n", "\n", "logits", "=", "logits", "/", "0.05", "# 0.05 is the temperature", "\n", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.qingjie99_MetFA.None.residual_def.VAE_layer": [[144, 164], ["tensorflow.initializers.variance_scaling", "tensorflow.zeros_initializer", "tensorflow.layers.dense"], "function", ["None"], ["", "def", "VAE_layer", "(", "x", ",", "\n", "outputdim", "=", "128", ",", "\n", "is_train", "=", "True", ",", "\n", "use_bias", "=", "False", ",", "\n", "kernel_initializer", "=", "tf", ".", "initializers", ".", "variance_scaling", "(", "distribution", "=", "'uniform'", ")", ",", "\n", "bias_initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "kernel_regularizer", "=", "None", ",", "\n", "bias_regularizer", "=", "None", ")", ":", "\n", "\n", "    ", "conv_params", "=", "{", "'use_bias'", ":", "use_bias", ",", "\n", "'kernel_initializer'", ":", "kernel_initializer", ",", "\n", "'bias_initializer'", ":", "bias_initializer", ",", "\n", "'kernel_regularizer'", ":", "kernel_regularizer", ",", "\n", "'bias_regularizer'", ":", "bias_regularizer", "}", "\n", "\n", "logits", "=", "tf", ".", "layers", ".", "dense", "(", "inputs", "=", "x", ",", "units", "=", "outputdim", ",", "trainable", "=", "is_train", ",", "**", "conv_params", ")", "\n", "# logits = tf.contrib.layers.batch_norm(dense, is_training=is_train)", "\n", "\n", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.qingjie99_MetFA.None.deploy.load_data": [[20, 71], ["numpy.concatenate", "numpy.concatenate", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load"], "function", ["None"], ["def", "load_data", "(", "flag", ")", ":", "\n", "    ", "if", "flag", "==", "0", ":", "\n", "        ", "testpath_1", "=", "'/data/test/4CH_1.npz'", "\n", "", "else", ":", "\n", "        ", "testpath_1", "=", "'/data/test/4CH_2.npz'", "\n", "", "testimg_1", "=", "np", ".", "load", "(", "testpath_1", ")", "[", "'img'", "]", "\n", "test_lbl_anat_1", "=", "np", ".", "load", "(", "testpath_1", ")", "[", "'anatlbl'", "]", "\n", "\n", "if", "flag", "==", "0", ":", "\n", "        ", "testpath_2", "=", "'/data/test/Abdominal_1.npz'", "\n", "", "else", ":", "\n", "        ", "testpath_2", "=", "'/data/test/Abdominal_2.npz'", "\n", "", "testimg_2", "=", "np", ".", "load", "(", "testpath_2", ")", "[", "'img'", "]", "\n", "test_lbl_anat_2", "=", "np", ".", "load", "(", "testpath_2", ")", "[", "'anatlbl'", "]", "\n", "\n", "if", "flag", "==", "0", ":", "\n", "        ", "testpath_3", "=", "'/data/test/LVOT_1.npz'", "\n", "", "else", ":", "\n", "        ", "testpath_3", "=", "'/data/test/LVOT_2.npz'", "\n", "", "testimg_3", "=", "np", ".", "load", "(", "testpath_3", ")", "[", "'img'", "]", "\n", "test_lbl_anat_3", "=", "np", ".", "load", "(", "testpath_3", ")", "[", "'anatlbl'", "]", "\n", "\n", "if", "flag", "==", "0", ":", "\n", "        ", "testpath_4", "=", "'/data/test/RVOT_1.npz'", "\n", "", "else", ":", "\n", "        ", "testpath_4", "=", "'/data/test/RVOT_2.npz'", "\n", "", "testimg_4", "=", "np", ".", "load", "(", "testpath_4", ")", "[", "'img'", "]", "\n", "test_lbl_anat_4", "=", "np", ".", "load", "(", "testpath_4", ")", "[", "'anatlbl'", "]", "\n", "\n", "if", "flag", "==", "0", ":", "\n", "        ", "testpath_5", "=", "'/data/test/Lips_1.npz'", "\n", "", "else", ":", "\n", "        ", "testpath_5", "=", "'/data/test/Lips_2.npz'", "\n", "", "testimg_5", "=", "np", ".", "load", "(", "testpath_5", ")", "[", "'img'", "]", "\n", "test_lbl_anat_5", "=", "np", ".", "load", "(", "testpath_5", ")", "[", "'anatlbl'", "]", "\n", "\n", "if", "flag", "==", "0", ":", "\n", "        ", "testpath_6", "=", "'/data/test/Femur_1.npz'", "\n", "", "else", ":", "\n", "        ", "testpath_6", "=", "'/data/test/Femur_2.npz'", "\n", "", "testimg_6", "=", "np", ".", "load", "(", "testpath_6", ")", "[", "'img'", "]", "\n", "test_lbl_anat_6", "=", "np", ".", "load", "(", "testpath_6", ")", "[", "'anatlbl'", "]", "\n", "\n", "\n", "\n", "testimg", "=", "np", ".", "concatenate", "(", "[", "testimg_1", ",", "testimg_2", ",", "testimg_3", ",", "testimg_4", ",", "testimg_5", ",", "testimg_6", "]", ",", "axis", "=", "0", ")", "\n", "test_lbl_anat", "=", "np", ".", "concatenate", "(", "[", "test_lbl_anat_1", ",", "test_lbl_anat_2", ",", "test_lbl_anat_3", ",", "test_lbl_anat_4", ",", "test_lbl_anat_5", ",", "\n", "test_lbl_anat_6", "]", ",", "axis", "=", "0", ")", "\n", "\n", "\n", "return", "testimg", ",", "test_lbl_anat", "\n", "\n"]], "home.repos.pwc.inspect_result.qingjie99_MetFA.None.deploy.main": [[73, 183], ["tensorflow.Graph", "tf.Graph.as_default", "tensorflow.ConfigProto", "tensorflow.device", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.expand_dims", "tensorflow.nn.softmax", "tensorflow.argmax", "tensorflow.reduce_mean", "tensorflow.Session", "tensorflow.group", "sess.run", "tensorflow.train.Saver", "tf.train.Saver.restore", "deploy.load_data", "numpy.reshape", "sess.run", "sklearn.metrics.accuracy_score", "print", "sklearn.metrics.precision_recall_fscore_support", "range", "tensorflow.variable_scope", "residual_def.residual_encoder", "tensorflow.contrib.layers.flatten", "tensorflow.variable_scope", "residual_def.VAE_layer", "tensorflow.variable_scope", "residual_def.classify_dense_bn_relu", "tensorflow.variable_scope", "residual_def.prototype", "tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.global_variables_initializer", "tensorflow.local_variables_initializer", "tensorflow.train.latest_checkpoint", "range", "print", "numpy.where", "len", "tensorflow.contrib.layers.l2_regularizer", "tensorflow.contrib.layers.l2_regularizer", "tensorflow.contrib.layers.l2_regularizer", "tensorflow.contrib.layers.l2_regularizer", "tensorflow.one_hot"], "function", ["home.repos.pwc.inspect_result.qingjie99_MetFA.None.deploy.load_data", "home.repos.pwc.inspect_result.qingjie99_MetFA.None.residual_def.residual_encoder", "home.repos.pwc.inspect_result.qingjie99_MetFA.None.residual_def.VAE_layer", "home.repos.pwc.inspect_result.qingjie99_MetFA.None.residual_def.classify_dense_bn_relu", "home.repos.pwc.inspect_result.qingjie99_MetFA.None.residual_def.prototype"], ["", "def", "main", "(", ")", ":", "\n", "    ", "graph", "=", "tf", ".", "Graph", "(", ")", "\n", "with", "graph", ".", "as_default", "(", ")", ":", "\n", "        ", "with", "tf", ".", "device", "(", "\"/gpu:0\"", ")", ":", "\n", "            ", "image_orig", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "height", ",", "width", ",", "1", "]", ")", "\n", "lblanat", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "int64", ",", "shape", "=", "[", "None", "]", ")", "\n", "flag", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "int64", ",", "shape", "=", "(", ")", ")", "\n", "\n", "image_val", "=", "tf", ".", "expand_dims", "(", "image_orig", ",", "axis", "=", "3", ")", "\n", "\n", "# ----------------------Encoder-------------------------", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'Encoder_S'", ")", ":", "\n", "                ", "T_fea", ",", "T_res_scales", ",", "T_saved_strides", ",", "T_filters", "=", "residual_def", ".", "residual_encoder", "(", "\n", "inputs", "=", "image_val", ",", "\n", "num_res_units", "=", "1", ",", "\n", "mode", "=", "tf", ".", "estimator", ".", "ModeKeys", ".", "EVAL", ",", "\n", "filters", "=", "(", "8", ",", "16", ",", "32", ",", "64", ",", "8", ")", ",", "\n", "strides", "=", "(", "(", "1", ",", "1", ",", "1", ")", ",", "(", "2", ",", "2", ",", "1", ")", ",", "(", "2", ",", "2", ",", "1", ")", ",", "(", "2", ",", "2", ",", "1", ")", ",", "(", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "kernel_regularizer", "=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "1e-5", ")", ")", "\n", "\n", "fea_new", "=", "tf", ".", "contrib", ".", "layers", ".", "flatten", "(", "T_fea", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'VAE_mu'", ")", ":", "\n", "                ", "z_T_mu", "=", "residual_def", ".", "VAE_layer", "(", "x", "=", "fea_new", ",", "\n", "outputdim", "=", "4096", ",", "\n", "is_train", "=", "False", ",", "\n", "kernel_regularizer", "=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "1e-5", ")", ")", "\n", "\n", "", "z_T", "=", "z_T_mu", "\n", "\n", "\n", "# ----------------------num_classification----------------------", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'anat_cls'", ")", ":", "\n", "                ", "anat_new", "=", "residual_def", ".", "classify_dense_bn_relu", "(", "\n", "z_T", ",", "\n", "units", "=", "(", "512", ",", "128", ")", ",", "\n", "is_train", "=", "False", ",", "\n", "kernel_regularizer", "=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "1e-5", ")", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'prototype'", ")", ":", "\n", "                ", "anat_logits", "=", "residual_def", ".", "prototype", "(", "\n", "anat_new", ",", "\n", "is_train", "=", "False", ",", "\n", "num_class", "=", "anat_num", ",", "\n", "kernel_regularizer", "=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "1e-5", ")", ")", "\n", "\n", "\n", "", "test_anat_softmax", "=", "tf", ".", "nn", ".", "softmax", "(", "anat_logits", ")", "\n", "test_anat_label", "=", "tf", ".", "argmax", "(", "test_anat_softmax", ",", "axis", "=", "1", ")", "\n", "loss_anat_softce", "=", "tf", ".", "reduce_mean", "(", "\n", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "logits", "=", "anat_logits", ",", "\n", "labels", "=", "tf", ".", "one_hot", "(", "lblanat", ",", "depth", "=", "anat_num", ")", ")", ")", "\n", "\n", "# ---------------------------------------------------", "\n", "", "config", "=", "tf", ".", "ConfigProto", "(", "allow_soft_placement", "=", "False", ",", "log_device_placement", "=", "False", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "with", "tf", ".", "Session", "(", "config", "=", "config", ")", "as", "sess", ":", "\n", "            ", "init_op", "=", "tf", ".", "group", "(", "tf", ".", "global_variables_initializer", "(", ")", ",", "tf", ".", "local_variables_initializer", "(", ")", ")", "\n", "sess", ".", "run", "(", "init_op", ")", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "saver", ".", "restore", "(", "sess", ",", "tf", ".", "train", ".", "latest_checkpoint", "(", "ckpt_dir", ")", ")", "\n", "\n", "# since the graph can't contain if/else, so the the deploy script will be separated", "\n", "# this script is only used for source domain data, so the flat MUST be 1", "\n", "STflag", "=", "1", "# use this flag to see it is source or target data", "\n", "\n", "data", ",", "lbl_anat", "=", "load_data", "(", "flag", "=", "STflag", ")", "\n", "data_new", "=", "np", ".", "reshape", "(", "data", ",", "(", "data", ".", "shape", "[", "0", "]", ",", "height", ",", "width", ",", "1", ")", ")", "\n", "\n", "t_data", "=", "data_new", "\n", "t_anat_lbl", "=", "lbl_anat", "\n", "feed_dict", "=", "{", "image_orig", ":", "t_data", ",", "lblanat", ":", "t_anat_lbl", ",", "flag", ":", "STflag", "}", "\n", "\n", "prob_anat", ",", "pred_anat", ",", "loss_soft_anat", ",", "fea_T", ",", "fea_T_last", "=", "sess", ".", "run", "(", "\n", "[", "test_anat_softmax", ",", "test_anat_label", ",", "loss_anat_softce", ",", "z_T", ",", "anat_logits", "]", ",", "\n", "feed_dict", "=", "feed_dict", ")", "\n", "\n", "\n", "\n", "# overall accuracy", "\n", "accuracy", "=", "accuracy_score", "(", "t_anat_lbl", ",", "pred_anat", ")", "\n", "print", "(", "\"Overall Accuracy Anat= {:.4f}\"", ".", "format", "(", "accuracy", ")", ")", "\n", "\n", "# precision, recall, f1score", "\n", "precision", ",", "recall", ",", "f1score", ",", "_", "=", "precision_recall_fscore_support", "(", "t_anat_lbl", ",", "pred_anat", ",", "average", "=", "None", ",", "\n", "labels", "=", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", "]", ")", "\n", "\n", "# accuracy of each class and print the other measurement", "\n", "for", "i", "in", "range", "(", "0", ",", "6", ")", ":", "\n", "\n", "                ", "right", "=", "0", "\n", "index", "=", "np", ".", "where", "(", "t_anat_lbl", "==", "i", ")", "[", "0", "]", "\n", "\n", "y_true", "=", "t_anat_lbl", "[", "index", "]", "\n", "y_pred", "=", "pred_anat", "[", "index", "]", "\n", "\n", "for", "ss", "in", "range", "(", "len", "(", "index", ")", ")", ":", "\n", "                    ", "if", "(", "y_true", "[", "ss", "]", "==", "i", ")", "and", "(", "y_pred", "[", "ss", "]", "==", "i", ")", ":", "\n", "                        ", "right", "=", "right", "+", "1", "\n", "\n", "# print (\"Label {} accuracy= {:.4f}, precision= {:.4f}, recall= {:.4f}, f1score= {:.4f}, img_num={}\".format", "\n", "#        (i, (right / len(index)), precision[i], recall[i], f1score[i], len(index)))", "\n", "", "", "print", "(", "\"{:.4f}, {:.4f}, {:.4f}\"", ".", "format", "\n", "(", "precision", "[", "i", "]", ",", "recall", "[", "i", "]", ",", "f1score", "[", "i", "]", ")", ")", "\n", "\n", "\n", "\n", "", "", "", "return", "\n", "\n"]]}