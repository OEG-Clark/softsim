{"home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.pcs.run.adjust_config": [[10, 63], ["pcs.utils.set_default", "pcs.utils.set_default", "pcs.utils.set_default", "pcs.utils.set_default", "pcs.utils.set_default", "pcs.utils.set_default", "pcs.utils.set_default", "pcs.utils.set_default", "pcs.utils.set_default", "pcs.utils.set_default", "pcs.utils.set_default", "pcs.utils.set_default", "pcs.utils.set_default", "len", "pcs.utils.set_default", "pcs.utils.set_default", "pcs.utils.set_default", "pcs.utils.set_default", "pcs.utils.set_default", "pcs.utils.set_default", "pcs.utils.set_default", "pcs.utils.set_default", "pcs.utils.set_default", "pcs.utils.set_default", "pcs.utils.set_default", "pcs.utils.set_default", "pcs.utils.set_default", "isinstance", "len", "len", "isinstance"], "function", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.set_default", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.set_default", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.set_default", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.set_default", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.set_default", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.set_default", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.set_default", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.set_default", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.set_default", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.set_default", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.set_default", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.set_default", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.set_default", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.set_default", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.set_default", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.set_default", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.set_default", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.set_default", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.set_default", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.set_default", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.set_default", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.set_default", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.set_default", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.set_default", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.set_default", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.set_default"], ["def", "adjust_config", "(", "config", ")", ":", "\n", "    ", "set_default", "(", "config", ",", "\"validate_freq\"", ",", "value", "=", "1", ")", "\n", "set_default", "(", "config", ",", "\"copy_checkpoint_freq\"", ",", "value", "=", "50", ")", "\n", "set_default", "(", "config", ",", "\"debug\"", ",", "value", "=", "False", ")", "\n", "set_default", "(", "config", ",", "\"cuda\"", ",", "value", "=", "True", ")", "\n", "set_default", "(", "config", ",", "\"gpu_device\"", ",", "value", "=", "None", ")", "\n", "set_default", "(", "config", ",", "\"pretrained_exp_dir\"", ",", "value", "=", "None", ")", "\n", "set_default", "(", "config", ",", "\"agent\"", ",", "value", "=", "\"CDSAgent\"", ")", "\n", "\n", "# data_params", "\n", "set_default", "(", "config", ".", "data_params", ",", "\"aug_src\"", ",", "callback", "=", "\"aug\"", ")", "\n", "set_default", "(", "config", ".", "data_params", ",", "\"aug_tgt\"", ",", "callback", "=", "\"aug\"", ")", "\n", "set_default", "(", "config", ".", "data_params", ",", "\"num_workers\"", ",", "value", "=", "4", ")", "\n", "set_default", "(", "config", ".", "data_params", ",", "\"image_size\"", ",", "value", "=", "224", ")", "\n", "\n", "# model_params", "\n", "set_default", "(", "config", ".", "model_params", ",", "\"load_weight_epoch\"", ",", "value", "=", "0", ")", "\n", "set_default", "(", "config", ".", "model_params", ",", "\"load_memory_bank\"", ",", "value", "=", "True", ")", "\n", "\n", "# loss_params", "\n", "num_loss", "=", "len", "(", "config", ".", "loss_params", ".", "loss", ")", "\n", "set_default", "(", "config", ".", "loss_params", ",", "\"weight\"", ",", "value", "=", "[", "1", "]", "*", "num_loss", ")", "\n", "set_default", "(", "config", ".", "loss_params", ",", "\"start\"", ",", "value", "=", "[", "0", "]", "*", "num_loss", ")", "\n", "set_default", "(", "config", ".", "loss_params", ",", "\"end\"", ",", "value", "=", "[", "1000", "]", "*", "num_loss", ")", "\n", "if", "not", "isinstance", "(", "config", ".", "loss_params", ".", "temp", ",", "list", ")", ":", "\n", "        ", "config", ".", "loss_params", ".", "temp", "=", "[", "config", ".", "loss_params", ".", "temp", "]", "*", "num_loss", "\n", "", "assert", "len", "(", "config", ".", "loss_params", ".", "weight", ")", "==", "num_loss", "\n", "set_default", "(", "config", ".", "loss_params", ",", "\"m\"", ",", "value", "=", "0.5", ")", "\n", "set_default", "(", "config", ".", "loss_params", ",", "\"T\"", ",", "value", "=", "0.05", ")", "\n", "set_default", "(", "config", ".", "loss_params", ",", "\"pseudo\"", ",", "value", "=", "True", ")", "\n", "\n", "# optim_params", "\n", "set_default", "(", "config", ".", "optim_params", ",", "\"batch_size_src\"", ",", "callback", "=", "\"batch_size\"", ")", "\n", "set_default", "(", "config", ".", "optim_params", ",", "\"batch_size_tgt\"", ",", "callback", "=", "\"batch_size\"", ")", "\n", "set_default", "(", "config", ".", "optim_params", ",", "\"batch_size_lbd\"", ",", "callback", "=", "\"batch_size\"", ")", "\n", "set_default", "(", "config", ".", "optim_params", ",", "\"momentum\"", ",", "value", "=", "0.9", ")", "\n", "set_default", "(", "config", ".", "optim_params", ",", "\"nesterov\"", ",", "value", "=", "True", ")", "\n", "set_default", "(", "config", ".", "optim_params", ",", "\"lr_decay_rate\"", ",", "value", "=", "0.1", ")", "\n", "set_default", "(", "config", ".", "optim_params", ",", "\"cls_update\"", ",", "value", "=", "True", ")", "\n", "\n", "# clustering", "\n", "if", "config", ".", "loss_params", ".", "clus", "is", "not", "None", ":", "\n", "        ", "if", "config", ".", "loss_params", ".", "clus", ".", "type", "is", "None", ":", "\n", "            ", "config", ".", "loss_params", ".", "clus", "=", "None", "\n", "", "else", ":", "\n", "            ", "if", "not", "isinstance", "(", "config", ".", "loss_params", ".", "clus", ".", "type", ",", "list", ")", ":", "\n", "                ", "config", ".", "loss_params", ".", "clus", ".", "type", "=", "[", "config", ".", "loss_params", ".", "clus", ".", "type", "]", "\n", "", "k", "=", "config", ".", "loss_params", ".", "clus", ".", "k", "\n", "n_k", "=", "config", ".", "loss_params", ".", "clus", ".", "n_k", "\n", "config", ".", "k_list", "=", "k", "*", "n_k", "\n", "config", ".", "loss_params", ".", "clus", ".", "n_kmeans", "=", "len", "(", "config", ".", "k_list", ")", "\n", "\n", "", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.pcs.run.init_parser": [[65, 170], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["", "def", "init_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--config\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"config/office.json\"", ",", "\n", "help", "=", "\"the path to the config\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--exp_id\"", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "# Dataset", "\n", "parser", ".", "add_argument", "(", "\n", "\"--dataset\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "choices", "=", "[", "\"office\"", ",", "\"office_home\"", ",", "\"visda17\"", "]", ",", "\n", "help", "=", "\"the name of dataset\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--source\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "\"source domain\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--target\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "\"target domain\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--num\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "\"number of labeled examples in the target\"", "\n", ")", "\n", "\n", "# Model", "\n", "parser", ".", "add_argument", "(", "\"--net\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "\"which network to use\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--method\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "choices", "=", "[", "\"S+T\"", ",", "\"ENT\"", ",", "\"MME\"", "]", ",", "\n", "help", "=", "\"MME is proposed method, ENT is entropy minimization, S+T is training only on labeled examples\"", ",", "\n", ")", "\n", "\n", "# Optim", "\n", "parser", ".", "add_argument", "(", "\n", "\"--steps\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "metavar", "=", "\"N\"", ",", "\n", "help", "=", "\"maximum number of iterations to train (default: 50000)\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--lr\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "None", ",", "\n", "metavar", "=", "\"LR\"", ",", "\n", "help", "=", "\"learning rate (default: 0.001)\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--multi\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "None", ",", "\n", "metavar", "=", "\"MLT\"", ",", "\n", "help", "=", "\"learning rate multiplication\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--early\"", ",", "\n", "action", "=", "\"store_false\"", ",", "\n", "default", "=", "True", ",", "\n", "help", "=", "\"early stopping on validation or not\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--patience\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "metavar", "=", "\"S\"", ",", "\n", "help", "=", "\"early stopping to wait for improvment \"", "\n", "\"before terminating. (default: 5 (5000 iterations))\"", ",", "\n", ")", "\n", "# Hyper-parameter", "\n", "parser", ".", "add_argument", "(", "\n", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "None", ",", "metavar", "=", "\"S\"", ",", "help", "=", "\"random seed (default: 1)\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--T\"", ",", "type", "=", "float", ",", "default", "=", "None", ",", "metavar", "=", "\"T\"", ",", "help", "=", "\"temperature (default: 0.05)\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--lamda\"", ",", "type", "=", "float", ",", "default", "=", "None", ",", "metavar", "=", "\"LAM\"", ",", "help", "=", "\"value of lamda\"", "\n", ")", "\n", "# Save model", "\n", "parser", ".", "add_argument", "(", "\n", "\"--log-interval\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "metavar", "=", "\"N\"", ",", "\n", "help", "=", "\"how many batches to wait before logging training status\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--save_interval\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "metavar", "=", "\"N\"", ",", "\n", "help", "=", "\"how many batches to wait before saving a model\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--save_check\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "None", ",", "help", "=", "\"save checkpoint or not\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--checkpath\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "\"dir to save checkpoint\"", "\n", ")", "\n", "\n", "# Others", "\n", "parser", ".", "add_argument", "(", "\"--loop\"", ",", "action", "=", "\"store_true\"", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.pcs.run.update_config": [[172, 189], ["None"], "function", ["None"], ["", "def", "update_config", "(", "config", ",", "args", ")", ":", "\n", "    ", "if", "args", ".", "dataset", ":", "\n", "        ", "config_json", "[", "\"data_params\"", "]", "[", "\"name\"", "]", "=", "args", ".", "dataset", "\n", "", "if", "args", ".", "source", ":", "\n", "        ", "config_json", "[", "\"data_params\"", "]", "[", "\"source\"", "]", "=", "args", ".", "source", "\n", "", "if", "args", ".", "target", ":", "\n", "        ", "config_json", "[", "\"data_params\"", "]", "[", "\"target\"", "]", "=", "args", ".", "target", "\n", "", "if", "args", ".", "num", ":", "\n", "        ", "config_json", "[", "\"data_params\"", "]", "[", "\"fewshot\"", "]", "=", "args", ".", "num", "\n", "", "if", "args", ".", "exp_id", ":", "\n", "        ", "config_json", "[", "\"exp_id\"", "]", "=", "args", ".", "exp_id", "\n", "", "elif", "args", ".", "source", ":", "\n", "        ", "config_json", "[", "\"exp_id\"", "]", "=", "f\"{args.source}->{args.target}:{args.num}\"", "\n", "", "if", "args", ".", "seed", ":", "\n", "        ", "config_json", "[", "\"seed\"", "]", "=", "args", ".", "seed", "\n", "", "if", "args", ".", "lr", ":", "\n", "        ", "config_json", "[", "\"optim_params\"", "]", "[", "\"learning_rate\"", "]", "=", "args", ".", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.GradReverse.forward": [[116, 120], ["x.view_as"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ",", "lambd", "=", "1.0", ")", ":", "\n", "        ", "ctx", ".", "lambd", "=", "lambd", "\n", "return", "x", ".", "view_as", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.GradReverse.backward": [[121, 124], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "return", "grad_output", "*", "-", "ctx", ".", "lambd", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.MomentumSoftmax.__init__": [[294, 298], ["torch.zeros().detach", "torch.zeros().detach", "torch.zeros().detach", "torch.zeros().detach", "torch.zeros().detach", "torch.zeros().detach", "torch.zeros().detach", "torch.zeros().detach", "torch.zeros().detach", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num_class", ",", "m", "=", "1", ")", ":", "\n", "        ", "self", ".", "softmax_vector", "=", "torch", ".", "zeros", "(", "num_class", ")", ".", "detach", "(", ")", "+", "1.0", "/", "num_class", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "num", "=", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.MomentumSoftmax.update": [[299, 304], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "mean_softmax", ",", "num", "=", "1", ")", ":", "\n", "        ", "self", ".", "softmax_vector", "=", "(", "\n", "(", "self", ".", "softmax_vector", "*", "self", ".", "num", ")", "+", "mean_softmax", "*", "num", "\n", ")", "/", "(", "self", ".", "num", "+", "num", ")", "\n", "self", ".", "num", "+=", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.MomentumSoftmax.reset": [[305, 308], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "# print(self.softmax_vector)", "\n", "        ", "self", ".", "num", "=", "self", ".", "m", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.set_seed": [[18, 29], ["str", "random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all"], "function", ["None"], ["def", "set_seed", "(", "seed", "=", "1234", ",", "determine", "=", "True", ")", ":", "\n", "    ", "os", ".", "environ", "[", "\"PYTHONHASHSEED\"", "]", "=", "str", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "\n", "if", "determine", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.expand_1d": [[34, 36], ["t.unsqueeze().expand", "t.unsqueeze"], "function", ["None"], ["", "", "def", "expand_1d", "(", "t", ",", "num_reps", ")", ":", "\n", "    ", "return", "t", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "num_reps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.isin": [[38, 42], ["None"], "function", ["None"], ["", "def", "isin", "(", "ar1", ",", "ar2", ")", ":", "\n", "# for every element of ar2, is ar2 in ar1", "\n", "# return shape same to ar1", "\n", "    ", "return", "(", "ar1", "[", "...", ",", "None", "]", "==", "ar2", ")", ".", "any", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.dot": [[44, 46], ["torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "dot", "(", "x", ",", "y", ")", ":", "\n", "    ", "return", "torch", ".", "sum", "(", "x", "*", "y", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.contrastive_sim": [[48, 56], ["instances.unsqueeze().repeat", "torch.exp", "torch.exp", "torch.exp", "proto.size", "instances.unsqueeze", "torchutils.dot"], "function", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.dot"], ["", "def", "contrastive_sim", "(", "instances", ",", "proto", "=", "None", ",", "tao", "=", "0.05", ")", ":", "\n", "# prob_matrix [bs, dim]", "\n", "# proto_dim [nums, dim]", "\n", "    ", "if", "proto", "is", "None", ":", "\n", "        ", "proto", "=", "instances", "\n", "", "ins_ext", "=", "instances", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "proto", ".", "size", "(", "0", ")", ",", "1", ")", "\n", "sim_matrix", "=", "torch", ".", "exp", "(", "dot", "(", "ins_ext", ",", "proto", ")", "/", "tao", ")", "\n", "return", "sim_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.contrastive_sim_z": [[58, 61], ["torchutils.contrastive_sim", "torch.sum", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.contrastive_sim"], ["", "def", "contrastive_sim_z", "(", "instances", ",", "proto", "=", "None", ",", "tao", "=", "0.05", ")", ":", "\n", "    ", "sim_matrix", "=", "contrastive_sim", "(", "instances", ",", "proto", ",", "tao", ")", "\n", "return", "torch", ".", "sum", "(", "sim_matrix", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.contrastive_prob": [[63, 66], ["torchutils.contrastive_sim", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.contrastive_sim"], ["", "def", "contrastive_prob", "(", "instances", ",", "proto", "=", "None", ",", "tao", "=", "0.05", ")", ":", "\n", "    ", "sim_matrix", "=", "contrastive_sim", "(", "instances", ",", "proto", ",", "tao", ")", "\n", "return", "sim_matrix", "/", "torch", ".", "sum", "(", "sim_matrix", ",", "dim", "=", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.pairwise_distance_2": [[68, 73], ["torch.norm", "torch.norm", "torch.norm", "input_1.size", "input_2.size", "input_1.unsqueeze"], "function", ["None"], ["", "def", "pairwise_distance_2", "(", "input_1", ",", "input_2", ")", ":", "\n", "    ", "assert", "input_1", ".", "size", "(", "1", ")", "==", "input_2", ".", "size", "(", "1", ")", "\n", "dis_vec", "=", "input_1", ".", "unsqueeze", "(", "1", ")", "-", "input_2", "\n", "dis", "=", "torch", ".", "norm", "(", "dis_vec", ",", "dim", "=", "2", ")", "\n", "return", "dis", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.weights_init": [[78, 93], ["model.modules", "isinstance", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "isinstance", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "isinstance", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "function", ["None"], ["", "def", "weights_init", "(", "model", ")", ":", "\n", "    ", "for", "layer", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "layer", ",", "torch", ".", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "\n", "layer", ".", "weight", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", "\n", ")", "\n", "if", "layer", ".", "bias", "is", "not", "None", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "layer", ".", "bias", ",", "val", "=", "0.0", ")", "\n", "", "", "elif", "isinstance", "(", "layer", ",", "torch", ".", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "layer", ".", "weight", ",", "val", "=", "1.0", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "layer", ".", "bias", ",", "val", "=", "0.0", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "torch", ".", "nn", ".", "Linear", ")", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "(", "layer", ".", "weight", ")", "\n", "if", "layer", ".", "bias", "is", "not", "None", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "layer", ".", "bias", ",", "val", "=", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.split_params_by_name": [[95, 113], ["model.named_parameters", "isinstance", "with_name.append", "without_name.append"], "function", ["None"], ["", "", "", "", "def", "split_params_by_name", "(", "model", ",", "name", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "name", ",", "list", ")", ":", "\n", "        ", "name", "=", "[", "name", "]", "\n", "", "with_name", "=", "[", "]", "\n", "without_name", "=", "[", "]", "\n", "for", "key", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "not", "param", ".", "requires_grad", ":", "\n", "            ", "continue", "\n", "\n", "", "in_key", "=", "False", "\n", "for", "n", "in", "name", ":", "\n", "            ", "in_key", "=", "in_key", "|", "(", "n", "in", "key", ")", "\n", "\n", "", "if", "in_key", ":", "\n", "            ", "with_name", ".", "append", "(", "param", ")", "\n", "", "else", ":", "\n", "            ", "without_name", ".", "append", "(", "param", ")", "\n", "", "", "return", "with_name", ",", "without_name", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.grad_reverse": [[126, 128], ["GradReverse.apply"], "function", ["None"], ["", "", "def", "grad_reverse", "(", "x", ",", "lambd", "=", "1.0", ")", ":", "\n", "    ", "return", "GradReverse", ".", "apply", "(", "x", ",", "lambd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.entropy": [[133, 137], ["torch.softmax", "torch.mean", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.sum", "torch.log", "torch.log", "torch.log"], "function", ["None"], ["", "def", "entropy", "(", "x", ",", "eps", "=", "1e-5", ")", ":", "\n", "    ", "p", "=", "F", ".", "softmax", "(", "x", ",", "dim", "=", "-", "1", ")", "\n", "entropy", "=", "-", "torch", ".", "mean", "(", "torch", ".", "sum", "(", "p", "*", "torch", ".", "log", "(", "p", "+", "eps", ")", ",", "1", ")", ")", "\n", "return", "entropy", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.pseudo_mask": [[139, 144], ["torch.softmax", "F.softmax.max"], "function", ["None"], ["", "def", "pseudo_mask", "(", "x", ",", "thres", "=", "0.95", ")", ":", "\n", "    ", "prob", "=", "F", ".", "softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "max_prob", ",", "pred", "=", "prob", ".", "max", "(", "dim", "=", "1", ")", "\n", "mask", "=", "max_prob", ">", "thres", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.pseudo_label_loss": [[146, 188], ["torch.softmax", "F.softmax.max", "torch.tensor.sum().item", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.cross_entropy", "range", "len", "torch.tensor.sum", "pred_thres.eq().sum().item", "pred_thres.eq().sum", "pred_thres.eq", "pred_thres.eq"], "function", ["None"], ["", "def", "pseudo_label_loss", "(", "x", ",", "thres", "=", "0.95", ",", "aux", "=", "True", ",", "y", "=", "None", ",", "mask", "=", "None", ",", "num_class", "=", "10", ")", ":", "\n", "    ", "if", "mask", "is", "None", ":", "\n", "        ", "mask", "=", "[", "True", "]", "*", "len", "(", "x", ")", "\n", "mask", "=", "torch", ".", "tensor", "(", "mask", ")", "\n", "# update mask", "\n", "", "prob", "=", "F", ".", "softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "max_prob", ",", "pred", "=", "prob", ".", "max", "(", "dim", "=", "1", ")", "\n", "mask", "[", "max_prob", "<", "thres", "]", "=", "False", "\n", "num_thres", "=", "mask", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "# calculate loss", "\n", "out_thres", ",", "pred_thres", "=", "x", "[", "mask", "]", ",", "pred", "[", "mask", "]", "\n", "if", "num_thres", "==", "0", ":", "\n", "        ", "loss", "=", "torch", ".", "tensor", "(", "0", ")", "\n", "", "else", ":", "\n", "        ", "loss", "=", "F", ".", "cross_entropy", "(", "out_thres", ",", "pred_thres", ")", "\n", "\n", "", "if", "aux", ":", "\n", "        ", "num_select_per_class", "=", "[", "0", "]", "*", "num_class", "\n", "num_correct_per_class", "=", "[", "0", "]", "*", "num_class", "\n", "for", "i", "in", "range", "(", "num_class", ")", ":", "\n", "            ", "num_select_per_class", "[", "i", "]", "+=", "(", "pred_thres", "==", "i", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "if", "y", "is", "not", "None", ":", "\n", "                ", "num_correct_per_class", "[", "i", "]", "+=", "(", "\n", "(", "(", "pred_thres", "==", "i", ")", "&", "(", "pred_thres", ".", "eq", "(", "y", "[", "mask", "]", ")", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", ")", "\n", "\n", "", "", "if", "y", "is", "not", "None", ":", "\n", "            ", "num_correct", "=", "pred_thres", ".", "eq", "(", "y", "[", "mask", "]", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "            ", "num_correct", "=", "-", "1", "\n", "\n", "", "ret_aux", "=", "{", "\n", "\"num_select\"", ":", "num_thres", ",", "\n", "\"num_correct\"", ":", "num_correct", ",", "\n", "\"num_select_per_class\"", ":", "num_select_per_class", ",", "\n", "\"num_correct_per_class\"", ":", "num_correct_per_class", ",", "\n", "\"mask\"", ":", "mask", ",", "\n", "}", "\n", "return", "loss", ",", "ret_aux", "\n", "", "else", ":", "\n", "        ", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.lr_scheduler_invLR": [[193, 198], ["torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR"], "function", ["None"], ["", "", "def", "lr_scheduler_invLR", "(", "optimizer", ",", "gamma", "=", "0.0001", ",", "power", "=", "0.75", ")", ":", "\n", "    ", "def", "lmbda", "(", "iter", ")", ":", "\n", "        ", "return", "(", "1", "+", "gamma", "*", "iter", ")", "**", "(", "-", "power", ")", "\n", "\n", "", "return", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "lr_lambda", "=", "lmbda", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.get_lr": [[200, 202], ["None"], "function", ["None"], ["", "def", "get_lr", "(", "optimizer", ",", "g_id", "=", "0", ")", ":", "\n", "    ", "return", "optimizer", ".", "param_groups", "[", "g_id", "]", "[", "\"lr\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.copy_checkpoint": [[207, 211], ["shutil.copyfile", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "copy_checkpoint", "(", "\n", "folder", "=", "\"./\"", ",", "filename", "=", "\"checkpoint.pth.tar\"", ",", "copyname", "=", "\"copy.pth.tar\"", "\n", ")", ":", "\n", "    ", "shutil", ".", "copyfile", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "filename", ")", ",", "os", ".", "path", ".", "join", "(", "folder", ",", "copyname", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.save_checkpoint": [[213, 219], ["torch.save", "torch.save", "torch.save", "os.path.isdir", "os.mkdir", "os.path.join", "torchutils.copy_checkpoint"], "function", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.BaseAgent.BaseAgent.copy_checkpoint"], ["", "def", "save_checkpoint", "(", "state", ",", "is_best", "=", "False", ",", "folder", "=", "\"./\"", ",", "filename", "=", "\"checkpoint.pth.tar\"", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "folder", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "folder", ")", "\n", "", "torch", ".", "save", "(", "state", ",", "os", ".", "path", ".", "join", "(", "folder", ",", "filename", ")", ")", "\n", "if", "is_best", ":", "\n", "        ", "copy_checkpoint", "(", "folder", ",", "filename", ",", "\"model_best.pth.tar\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.load_state_dict": [[221, 227], ["model.state_dict", "model.state_dict.update", "model.load_state_dict", "len", "updated_dict.keys", "model.state_dict.items", "model.state_dict.keys"], "function", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.memorybank.MemoryBank.update", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.load_state_dict"], ["", "", "def", "load_state_dict", "(", "model", ",", "model_dict", ")", ":", "\n", "    ", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "updated_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "model_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", ".", "keys", "(", ")", "}", "\n", "model_dict", ".", "update", "(", "updated_dict", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "return", "len", "(", "updated_dict", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.print_cuda_statistics": [[229, 246], ["output", "output", "output", "output", "output", "output", "output", "output", "print", "subprocess.call", "torch.backends.cudnn.version", "torch.backends.cudnn.version", "torch.backends.cudnn.version", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device"], "function", ["None"], ["", "def", "print_cuda_statistics", "(", "nvidia_smi", "=", "True", ",", "output", "=", "print", ")", ":", "\n", "    ", "output", "(", "f\"Python VERSION: {sys.version}\"", ")", "\n", "output", "(", "f\"pytorch VERSION: {torch.__version__}\"", ")", "\n", "output", "(", "f\"CUDA VERSION: {torch.version.cuda}\"", ")", "\n", "output", "(", "f\"CUDNN VERSION: {torch.backends.cudnn.version()}\"", ")", "\n", "output", "(", "f\"Device NAME: {torch.cuda.get_device_name(0)}\"", ")", "\n", "output", "(", "f\"Number CUDA Devices: {torch.cuda.device_count()}\"", ")", "\n", "output", "(", "f\"Available devices: {torch.cuda.device_count()}\"", ")", "\n", "output", "(", "f\"current CUDA Device: {torch.cuda.current_device()}\"", ")", "\n", "\n", "if", "nvidia_smi", ":", "\n", "        ", "print", "(", "\"nvidia-smi:\"", ")", "\n", "call", "(", "\n", "[", "\n", "\"nvidia-smi\"", ",", "\n", "\"--format=csv\"", ",", "\n", "\"--query-gpu=index,name,driver_version,memory.total,memory.used,memory.free\"", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.log_tensor": [[250, 256], ["print", "print", "t.type", "t.dim", "t.nelement", "t.element_size", "t.nelement", "t.element_size"], "function", ["None"], ["", "", "def", "log_tensor", "(", "t", ",", "name", "=", "\"\"", ",", "print_tensor", "=", "False", ")", ":", "\n", "    ", "print", "(", "\n", "f\"Tensor {name}:\\n\\ttype: {t.type()}\\n\\tsize {t.shape}\\n\\tdim: {t.dim()}\\n\\tdevice: {t.device}\\n\\tnelement: {t.nelement()}\\n\\telem_size: {t.element_size()}\\n\\tsize in mem: {t.nelement() * t.element_size()} Bytes\\n\\tgrad_fn: {t.grad_fn}\\n\\tgrad: {t.grad}\"", "\n", ")", "\n", "if", "print_tensor", ":", "\n", "        ", "print", "(", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.model_params_num": [[258, 260], ["sum", "torch.numel", "torch.numel", "torch.numel", "model.parameters"], "function", ["None"], ["", "", "def", "model_params_num", "(", "model", ")", ":", "\n", "    ", "return", "sum", "(", "torch", ".", "numel", "(", "parameter", ")", "for", "parameter", "in", "model", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.one_hot": [[262, 270], ["label.size", "label.unique().size", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long.scatter_", "label.unique", "torch.zeros", "torch.zeros", "torch.zeros", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones", "torch.ones", "torch.ones"], "function", ["None"], ["", "def", "one_hot", "(", "label", ")", ":", "\n", "    ", "N", "=", "label", ".", "size", "(", "0", ")", "\n", "num_classes", "=", "label", ".", "unique", "(", ")", ".", "size", "(", "0", ")", "\n", "one_hot", "=", "torch", ".", "zeros", "(", "N", ",", "num_classes", ")", ".", "long", "(", ")", "\n", "one_hot", ".", "scatter_", "(", "\n", "dim", "=", "1", ",", "\n", "index", "=", "torch", ".", "unsqueeze", "(", "label", ",", "dim", "=", "1", ")", ",", "\n", "src", "=", "torch", ".", "ones", "(", "N", ",", "num_classes", ")", ".", "long", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.top_k_for_each_class": [[273, 288], ["torch.arange().long", "torch.arange().long", "torch.arange().long", "range", "torch.zeros_like().long().cuda", "torch.zeros_like().long().cuda", "torch.zeros_like().long().cuda", "class_mask.sum", "class_mask.sum", "prob_class.topk", "torch.arange", "torch.arange", "torch.arange", "min", "len", "torch.zeros_like().long", "torch.zeros_like().long", "torch.zeros_like().long", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "function", ["None"], ["", "def", "top_k_for_each_class", "(", "pred", ",", "prob", ",", "num_class", ")", ":", "\n", "    ", "ind", "=", "torch", ".", "arange", "(", "len", "(", "pred", ")", ")", ".", "long", "(", ")", "\n", "pred_ret", "=", "torch", ".", "zeros_like", "(", "pred", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "-", "1", "\n", "for", "i", "in", "range", "(", "num_class", ")", ":", "\n", "        ", "class_mask", "=", "pred", "==", "i", "\n", "num_c", "=", "class_mask", ".", "sum", "(", ")", "\n", "num_c", "=", "class_mask", ".", "sum", "(", ")", "\n", "if", "num_c", "==", "0", ":", "\n", "            ", "continue", "\n", "", "prob_class", "=", "prob", "[", "class_mask", "]", "\n", "ind_class", "=", "ind", "[", "class_mask", "]", "\n", "prob_topk", ",", "ind_topk", "=", "prob_class", ".", "topk", "(", "min", "(", "5", ",", "num_c", ")", ")", "\n", "ind_topk", "=", "ind_class", "[", "ind_topk", "]", "\n", "pred_ret", "[", "ind_topk", "]", "=", "i", "\n", "", "return", "pred_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.datautils.Imagelists.__init__": [[63, 93], ["datautils.create_image_label", "range", "len", "os.path.join", "datautils.Imagelists.loader", "images.append", "datautils.Imagelists.transform"], "methods", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.datautils.create_image_label"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "image_list", ",", "\n", "root", ",", "\n", "transform", "=", "None", ",", "\n", "target_transform", "=", "None", ",", "\n", "keep_in_mem", "=", "False", ",", "\n", "ret_index", "=", "False", ",", "\n", ")", ":", "\n", "# print(image_list)", "\n", "        ", "imgs", ",", "labels", "=", "create_image_label", "(", "image_list", ")", "\n", "self", ".", "imgs", "=", "imgs", "\n", "self", ".", "labels", "=", "labels", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "ret_index", "=", "ret_index", "\n", "self", ".", "keep_in_mem", "=", "keep_in_mem", "\n", "self", ".", "loader", "=", "pil_loader", "\n", "\n", "# keep in mem", "\n", "if", "self", ".", "keep_in_mem", ":", "\n", "            ", "images", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "len", "(", "self", ".", "imgs", ")", ")", ":", "\n", "                ", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "imgs", "[", "index", "]", ")", "\n", "img", "=", "self", ".", "loader", "(", "path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "                    ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "images", ".", "append", "(", "img", ")", "\n", "", "self", ".", "images", "=", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.datautils.Imagelists.__getitem__": [[94, 118], ["os.path.join", "datautils.Imagelists.loader", "datautils.Imagelists.target_transform", "datautils.Imagelists.transform"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n        Returns:\n            tuple: (image, target) where target is\n            class_index of the target class.\n        \"\"\"", "\n", "if", "self", ".", "keep_in_mem", ":", "\n", "            ", "img", "=", "self", ".", "images", "[", "index", "]", "\n", "", "else", ":", "\n", "            ", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "imgs", "[", "index", "]", ")", "\n", "img", "=", "self", ".", "loader", "(", "path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "                ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "", "target", "=", "self", ".", "labels", "[", "index", "]", "\n", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "if", "not", "self", ".", "ret_index", ":", "\n", "            ", "return", "img", ",", "target", "\n", "", "else", ":", "\n", "            ", "return", "index", ",", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.datautils.Imagelists.__len__": [[119, 121], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.datautils.create_image_label": [[19, 23], ["numpy.array", "x.split", "open", "int", "[].strip", "open", "x.split"], "function", ["None"], ["def", "create_image_label", "(", "image_list", ")", ":", "\n", "    ", "image_index", "=", "[", "x", ".", "split", "(", "\" \"", ")", "[", "0", "]", "for", "x", "in", "open", "(", "image_list", ")", "]", "\n", "label_list", "=", "np", ".", "array", "(", "[", "int", "(", "x", ".", "split", "(", "\" \"", ")", "[", "1", "]", ".", "strip", "(", ")", ")", "for", "x", "in", "open", "(", "image_list", ")", "]", ")", "\n", "return", "image_index", ",", "label_list", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.datautils.get_class_map": [[25, 33], ["open", "collections.OrderedDict", "int", "sorted", "[].strip", "collections.OrderedDict.items", "[].split", "x.split", "x.split"], "function", ["None"], ["", "def", "get_class_map", "(", "image_list", ")", ":", "\n", "    ", "class_map", "=", "{", "}", "\n", "for", "x", "in", "open", "(", "image_list", ")", ":", "\n", "        ", "key", "=", "int", "(", "x", ".", "split", "(", "\" \"", ")", "[", "1", "]", ".", "strip", "(", ")", ")", "\n", "if", "key", "not", "in", "class_map", ":", "\n", "            ", "class_map", "[", "key", "]", "=", "x", ".", "split", "(", "\" \"", ")", "[", "0", "]", ".", "split", "(", "\"/\"", ")", "[", "-", "2", "]", "\n", "", "", "class_map", "=", "collections", ".", "OrderedDict", "(", "sorted", "(", "class_map", ".", "items", "(", ")", ")", ")", "\n", "return", "class_map", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.datautils.get_class_num": [[35, 38], ["max", "list", "get_class_map().keys", "datautils.get_class_map"], "function", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.datautils.get_class_map"], ["", "def", "get_class_num", "(", "image_list", ")", ":", "\n", "# return len(get_class_map(image_list))", "\n", "    ", "return", "max", "(", "list", "(", "get_class_map", "(", "image_list", ")", ".", "keys", "(", ")", ")", ")", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.datautils.describe_image_list": [[40, 52], ["datautils.create_image_label", "numpy.bincount", "print", "len", "len", "numpy.max", "numpy.min", "numpy.mean", "numpy.median", "numpy.var"], "function", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.datautils.create_image_label"], ["", "def", "describe_image_list", "(", "image_list", ",", "save_graph", "=", "False", ",", "label_name", "=", "True", ",", "is_sort", "=", "False", ")", ":", "\n", "    ", "_", ",", "label_list", "=", "create_image_label", "(", "image_list", ")", "\n", "label_cnt", "=", "np", ".", "bincount", "(", "label_list", ")", "\n", "print", "(", "\n", "f\"\"\"Image list \\\"{image_list}\\\":\n    \\tTotal instances: {len(label_list)}\n    \\tTotal class: {len(label_cnt)}\n    \\tmax # of class: {np.max(label_cnt)}\n    \\tmin # of class: {np.min(label_cnt)}\n    \\tmean # of class: {np.mean(label_cnt)}\n    \\tmedian # of class: {np.median(label_cnt)}\n    \\tvar: {np.var(label_cnt)}\"\"\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.datautils.get_fewshot_index": [[55, 61], ["whl_imgs.index"], "function", ["None"], ["", "def", "get_fewshot_index", "(", "lbd_dataset", ",", "whl_dataset", ")", ":", "\n", "    ", "lbd_imgs", "=", "lbd_dataset", ".", "imgs", "\n", "whl_imgs", "=", "whl_dataset", ".", "imgs", "\n", "fewshot_indices", "=", "[", "whl_imgs", ".", "index", "(", "path", ")", "for", "path", "in", "lbd_imgs", "]", "\n", "fewshot_labels", "=", "lbd_dataset", ".", "labels", "\n", "return", "fewshot_indices", ",", "fewshot_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.datautils.get_augmentation": [[130, 166], ["torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.RandomCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomGrayscale", "torchvision.transforms.ColorJitter", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "function", ["None"], ["def", "get_augmentation", "(", "trans_type", "=", "\"aug_0\"", ",", "image_size", "=", "224", ",", "stat", "=", "\"imagenet\"", ")", ":", "\n", "    ", "stat", "=", "\"imagenet\"", "\n", "mean", ",", "std", "=", "means", "[", "stat", "]", ",", "stds", "[", "stat", "]", "\n", "image_s", "=", "image_size", "+", "32", "\n", "\n", "data_transforms", "=", "{", "\n", "\"raw\"", ":", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "Resize", "(", "(", "image_s", ",", "image_s", ")", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "image_size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "mean", ",", "std", "=", "std", ")", ",", "\n", "]", "\n", ")", ",", "\n", "\"aug_0\"", ":", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "Resize", "(", "(", "image_s", ",", "image_s", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "image_size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "mean", ",", "std", "=", "std", ")", ",", "\n", "]", "\n", ")", ",", "\n", "\"aug_1\"", ":", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "image_size", ",", "scale", "=", "(", "0.2", ",", "1.0", ")", ")", ",", "\n", "transforms", ".", "RandomGrayscale", "(", "p", "=", "0.2", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "0.4", ",", "0.4", ",", "0.4", ",", "0.4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "mean", ",", "std", "=", "std", ")", ",", "\n", "]", "\n", ")", ",", "\n", "}", "\n", "\n", "return", "data_transforms", "[", "trans_type", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.datautils.create_dataset": [[178, 204], ["datautils.Imagelists", "isinstance", "datautils.get_augmentation"], "function", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.datautils.get_augmentation"], ["def", "create_dataset", "(", "\n", "name", ",", "\n", "domain", ",", "\n", "txt", "=", "\"\"", ",", "\n", "suffix", "=", "\"\"", ",", "\n", "keep_in_mem", "=", "False", ",", "\n", "ret_index", "=", "False", ",", "\n", "image_transform", "=", "None", ",", "\n", "use_mean_std", "=", "False", ",", "\n", "image_size", "=", "224", ",", "\n", ")", ":", "\n", "    ", "if", "suffix", "!=", "\"\"", ":", "\n", "        ", "suffix", "=", "\"_\"", "+", "suffix", "\n", "", "if", "txt", "==", "\"\"", ":", "\n", "        ", "txt", "=", "f\"{domain}{suffix}\"", "\n", "\n", "", "stat", "=", "f\"{name}_{domain}\"", "if", "use_mean_std", "else", "\"imagenet\"", "\n", "if", "image_transform", "is", "not", "None", "and", "isinstance", "(", "image_transform", ",", "str", ")", ":", "\n", "        ", "transform", "=", "get_augmentation", "(", "image_transform", ",", "stat", "=", "stat", ",", "image_size", "=", "image_size", ")", "\n", "\n", "", "return", "Imagelists", "(", "\n", "f\"data/splits/{name}/{txt}.txt\"", ",", "\n", "datasets_path", "[", "name", "]", ",", "\n", "keep_in_mem", "=", "keep_in_mem", ",", "\n", "ret_index", "=", "ret_index", ",", "\n", "transform", "=", "transform", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.datautils.pil_loader": [[210, 214], ["open", "PIL.Image.open", "Image.open.convert"], "function", ["None"], ["", "def", "pil_loader", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "f", ")", "\n", "return", "img", ".", "convert", "(", "\"RGB\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.datautils.worker_init_seed": [[216, 219], ["numpy.random.seed", "random.seed"], "function", ["None"], ["", "", "def", "worker_init_seed", "(", "worker_id", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "12", "+", "worker_id", ")", "\n", "random", ".", "seed", "(", "12", "+", "worker_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.datautils.create_loader": [[221, 230], ["torch.utils.data.DataLoader", "min", "len"], "function", ["None"], ["", "def", "create_loader", "(", "dataset", ",", "batch_size", "=", "32", ",", "num_workers", "=", "4", ",", "is_train", "=", "True", ")", ":", "\n", "    ", "return", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", ",", "\n", "batch_size", "=", "min", "(", "batch_size", ",", "len", "(", "dataset", ")", ")", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "shuffle", "=", "is_train", ",", "\n", "drop_last", "=", "is_train", ",", "\n", "pin_memory", "=", "True", ",", "\n", "worker_init_fn", "=", "worker_init_seed", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.setup.check_pretrain_dir": [[16, 28], ["print", "os.path.join"], "function", ["None"], []], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.setup.process_config_path": [[30, 33], ["utils.load_json", "setup.process_config"], "function", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.load_json", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.setup.process_config"], []], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.setup.process_config": [[35, 127], ["dotmap.DotMap", "print", "pprint.pprint", "print", "print", "print", "print", "print", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "utils.makedirs", "os.path.join", "utils.save_json", "setup.setup_logging", "logging.getLogger().info", "logging.getLogger().info", "dotmap.DotMap.update", "os.path.join", "dotmap.DotMap.toDict", "isinstance", "print", "os.system", "os.system", "os.system", "logging.getLogger", "logging.getLogger", "isinstance", "print", "os.system", "os.system", "os.system", "os.path.join", "os.path.exists", "datetime.datetime.now().strftime", "os.path.join", "datetime.datetime.now().strftime", "datetime.datetime.now", "datetime.datetime.now"], "function", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.makedirs", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.save_json", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.setup.setup_logging", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.memorybank.MemoryBank.update"], []], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.setup.setup_logging": [[129, 158], ["logging.getLogger", "logging.getLogger.setLevel", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.StreamHandler.setFormatter", "logging.handlers.RotatingFileHandler", "logging.handlers.RotatingFileHandler.setLevel", "logging.handlers.RotatingFileHandler.setFormatter", "logging.handlers.RotatingFileHandler", "logging.handlers.RotatingFileHandler.setLevel", "logging.handlers.RotatingFileHandler.setFormatter", "logging.getLogger.addHandler", "logging.getLogger.addHandler", "logging.getLogger.addHandler", "logging.Formatter", "logging.Formatter", "logging.Formatter"], "function", ["None"], []], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.setup.print_info": [[160, 163], ["output", "output", "datetime.datetime.now().strftime", "socket.gethostname", "datetime.datetime.now"], "function", ["None"], []], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.setup.prepare_dirs": [[165, 183], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "utils.makedirs", "print", "shutil.copytree", "os.path.exists", "print", "shutil.copy", "os.path.join"], "function", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.makedirs"], []], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.setup.get_cmd": [[185, 191], ["utils.save_json", "tempfile.mkstemp", "config.toDict"], "function", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.save_json"], []], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.AverageMeter.__init__": [[72, 74], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.AverageMeter.reset": [[75, 80], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.AverageMeter.update": [[81, 86], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.ProgressMeter.__init__": [[89, 93], ["utils.ProgressMeter._get_batch_fmtstr"], "methods", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.ProgressMeter._get_batch_fmtstr"], ["    ", "def", "__init__", "(", "self", ",", "num_batches", ",", "meters", ",", "prefix", "=", "\"\"", ")", ":", "\n", "        ", "self", ".", "batch_fmtstr", "=", "self", ".", "_get_batch_fmtstr", "(", "num_batches", ")", "\n", "self", ".", "meters", "=", "meters", "\n", "self", ".", "prefix", "=", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.ProgressMeter.display": [[94, 98], ["print", "str", "utils.ProgressMeter.batch_fmtstr.format"], "methods", ["None"], ["", "def", "display", "(", "self", ",", "batch", ")", ":", "\n", "        ", "entries", "=", "[", "self", ".", "prefix", "+", "self", ".", "batch_fmtstr", ".", "format", "(", "batch", ")", "]", "\n", "entries", "+=", "[", "str", "(", "meter", ")", "for", "meter", "in", "self", ".", "meters", "]", "\n", "print", "(", "\"\\t\"", ".", "join", "(", "entries", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.ProgressMeter._get_batch_fmtstr": [[99, 103], ["len", "str", "str", "fmt.format"], "methods", ["None"], ["", "def", "_get_batch_fmtstr", "(", "self", ",", "num_batches", ")", ":", "\n", "        ", "num_digits", "=", "len", "(", "str", "(", "num_batches", "//", "1", ")", ")", "\n", "fmt", "=", "\"{:\"", "+", "str", "(", "num_digits", ")", "+", "\"d}\"", "\n", "return", "\"[\"", "+", "fmt", "+", "\"/\"", "+", "fmt", ".", "format", "(", "num_batches", ")", "+", "\"]\"", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.OrderedCounter.__repr__": [[108, 110], ["collections.OrderedDict"], "methods", ["None"], ["def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"%s(%r)\"", "%", "(", "self", ".", "__class__", ".", "__name__", ",", "OrderedDict", "(", "self", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.OrderedCounter.__reduce__": [[111, 113], ["collections.OrderedDict"], "methods", ["None"], ["", "def", "__reduce__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ",", "(", "OrderedDict", "(", "self", ")", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.reverse_domain": [[18, 20], ["None"], "function", ["None"], ["def", "reverse_domain", "(", "domain_name", ")", ":", "\n", "    ", "return", "DOMAIN_V", "[", "domain_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.per": [[22, 24], ["None"], "function", ["None"], ["", "def", "per", "(", "acc", ")", ":", "\n", "    ", "return", "f\"{acc * 100:.2f}%\"", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.MB": [[29, 31], ["None"], "function", ["None"], ["", "def", "MB", "(", "x", ")", ":", "\n", "    ", "return", "f\"{x/1024/1024:.3} MB\"", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.GB": [[33, 35], ["None"], "function", ["None"], ["", "def", "GB", "(", "x", ")", ":", "\n", "    ", "return", "f\"{x/1024/1024/1024:.3} GB\"", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.print_occupied_mem": [[37, 39], ["print", "utils.GB", "torch.cuda.memory_allocated"], "function", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.GB"], ["", "def", "print_occupied_mem", "(", "idx", "=", "0", ")", ":", "\n", "    ", "print", "(", "GB", "(", "torch", ".", "cuda", ".", "memory_allocated", "(", "idx", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.size_of_tensor": [[41, 43], ["utils.MB", "x.element_size", "x.nelement"], "function", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.MB"], ["", "def", "size_of_tensor", "(", "x", ")", ":", "\n", "    ", "return", "MB", "(", "x", ".", "element_size", "(", ")", "*", "x", ".", "nelement", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.randtext": [[45, 47], ["random.choice", "range"], "function", ["None"], ["", "def", "randtext", "(", "length", "=", "10", ")", ":", "\n", "    ", "return", "\"\"", ".", "join", "(", "[", "random", ".", "choice", "(", "string", ".", "ascii_letters", ")", "for", "i", "in", "range", "(", "length", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.to_list": [[52, 56], ["isinstance"], "function", ["None"], ["", "def", "to_list", "(", "something", ")", ":", "\n", "    ", "if", "something", "is", "not", "None", "and", "not", "isinstance", "(", "something", ",", "list", ")", ":", "\n", "        ", "return", "[", "something", "]", "\n", "", "return", "something", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.makedirs": [[58, 64], ["isinstance", "os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.makedirs"], ["", "def", "makedirs", "(", "dir_list", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "dir_list", ",", "list", ")", ":", "\n", "        ", "dir_list", "=", "[", "dir_list", "]", "\n", "", "for", "dir", "in", "dir_list", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.load_json": [[118, 121], ["open", "json.load"], "function", ["None"], ["", "", "def", "load_json", "(", "f_path", ")", ":", "\n", "    ", "with", "open", "(", "f_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "return", "json", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.save_json": [[123, 126], ["open", "json.dump"], "function", ["None"], ["", "", "def", "save_json", "(", "obj", ",", "f_path", ")", ":", "\n", "    ", "with", "open", "(", "f_path", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "obj", ",", "f", ",", "ensure_ascii", "=", "False", ",", "indent", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.is_div": [[128, 132], ["None"], "function", ["None"], ["", "", "def", "is_div", "(", "freq", ",", "epoch", ",", "best", "=", "False", ")", ":", "\n", "    ", "if", "freq", "is", "not", "None", "and", "best", ":", "\n", "        ", "return", "True", "\n", "", "return", "freq", "and", "epoch", "%", "freq", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.info_gpu_usage": [[134, 143], ["gc.get_objects", "torch.is_tensor", "print", "hasattr", "torch.is_tensor", "type", "obj.size"], "function", ["None"], ["", "def", "info_gpu_usage", "(", ")", ":", "\n", "    ", "for", "obj", "in", "gc", ".", "get_objects", "(", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "if", "torch", ".", "is_tensor", "(", "obj", ")", "or", "(", "\n", "hasattr", "(", "obj", ",", "\"data\"", ")", "and", "torch", ".", "is_tensor", "(", "obj", ".", "data", ")", "\n", ")", ":", "\n", "                ", "print", "(", "type", "(", "obj", ")", ",", "obj", ".", "size", "(", ")", ")", "\n", "", "", "except", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.exist_key": [[148, 151], ["isinstance", "isinstance", "len"], "function", ["None"], ["", "", "", "def", "exist_key", "(", "k", ")", ":", "\n", "    ", "is_empty_dotmap", "=", "isinstance", "(", "k", ",", "DotMap", ")", "and", "len", "(", "k", ")", "==", "0", "\n", "return", "isinstance", "(", "k", ",", "bool", ")", "or", "(", "not", "is_empty_dotmap", "and", "k", "is", "not", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.set_default": [[153, 165], ["utils.exist_key", "utils.exist_key"], "function", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.exist_key", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.exist_key"], ["", "def", "set_default", "(", "cur_config", ",", "name", ",", "value", "=", "None", ",", "callback", "=", "None", ")", ":", "\n", "    ", "if", "not", "exist_key", "(", "cur_config", "[", "name", "]", ")", ":", "\n", "        ", "if", "value", "is", "not", "None", ":", "\n", "            ", "cur_config", "[", "name", "]", "=", "value", "\n", "", "elif", "callback", "is", "not", "None", ":", "\n", "            ", "assert", "exist_key", "(", "cur_config", "[", "callback", "]", ")", "\n", "cur_config", "[", "name", "]", "=", "cur_config", "[", "callback", "]", "\n", "", "elif", "value", "is", "None", "and", "callback", "is", "None", ":", "\n", "            ", "cur_config", "[", "name", "]", "=", "value", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "", "return", "cur_config", "[", "name", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.BaseAgent.BaseAgent.__init__": [[28, 61], ["pcs.utils.torchutils.set_seed", "logging.getLogger", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "pcs.utils.print_info", "datetime.datetime.now", "BaseAgent.BaseAgent._choose_device", "BaseAgent.BaseAgent._load_datasets", "BaseAgent.BaseAgent._create_model", "BaseAgent.BaseAgent._create_optimizer"], "methods", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.set_seed", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.setup.print_info", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.BaseAgent.BaseAgent._choose_device", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.CDSAgent.CDSAgent._load_datasets", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.CDSAgent.CDSAgent._create_model", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.CDSAgent.CDSAgent._create_optimizer"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "# set seed as early as possible", "\n", "torchutils", ".", "set_seed", "(", "self", ".", "config", ".", "seed", ")", "\n", "\n", "self", ".", "model", "=", "None", "\n", "self", ".", "optim", "=", "None", "\n", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", "\"Agent\"", ")", "\n", "self", ".", "summary_writer", "=", "SummaryWriter", "(", "log_dir", "=", "self", ".", "config", ".", "summary_dir", ")", "\n", "\n", "self", ".", "current_epoch", "=", "0", "\n", "self", ".", "current_iteration", "=", "0", "\n", "self", ".", "current_val_iteration", "=", "0", "\n", "self", ".", "val_acc", "=", "[", "]", "\n", "self", ".", "train_loss", "=", "[", "]", "\n", "self", ".", "lr_scheduler_list", "=", "[", "]", "\n", "\n", "print_info", "(", "self", ".", "logger", ".", "info", ")", "\n", "self", ".", "starttime", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "self", ".", "_choose_device", "(", ")", "\n", "\n", "# Load Dataset", "\n", "self", ".", "_load_datasets", "(", ")", "\n", "\n", "self", ".", "_create_model", "(", ")", "\n", "self", ".", "_create_optimizer", "(", ")", "\n", "\n", "# we need these to decide best loss", "\n", "self", ".", "current_loss", "=", "0.0", "\n", "self", ".", "current_val_metric", "=", "0.0", "\n", "self", ".", "best_val_metric", "=", "0.0", "\n", "self", ".", "best_val_epoch", "=", "0", "\n", "self", ".", "iter_with_no_improv", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.BaseAgent.BaseAgent.get_attr": [[62, 64], ["getattr"], "methods", ["None"], ["", "def", "get_attr", "(", "self", ",", "domain", ",", "name", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "f\"{name}_{domain}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.BaseAgent.BaseAgent.set_attr": [[65, 68], ["setattr", "BaseAgent.BaseAgent.get_attr"], "methods", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.get_attr"], ["", "def", "set_attr", "(", "self", ",", "domain", ",", "name", ",", "value", ")", ":", "\n", "        ", "setattr", "(", "self", ",", "f\"{name}_{domain}\"", ",", "value", ")", "\n", "return", "self", ".", "get_attr", "(", "domain", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.BaseAgent.BaseAgent._choose_device": [[69, 105], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "BaseAgent.BaseAgent.logger.info", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "len", "BaseAgent.BaseAgent.logger.info", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "BaseAgent.BaseAgent.logger.info", "pcs.utils.torchutils.print_cuda_statistics", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "BaseAgent.BaseAgent.logger.info", "list", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "range", "isinstance", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "str", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "len"], "methods", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.print_cuda_statistics"], ["", "def", "_choose_device", "(", "self", ")", ":", "\n", "# check if use gpu", "\n", "        ", "self", ".", "is_cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "if", "self", ".", "is_cuda", "and", "not", "self", ".", "config", ".", "cuda", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\n", "\"WARNING: You have a CUDA device, so you should probably enable CUDA\"", "\n", ")", "\n", "", "self", ".", "cuda", "=", "self", ".", "is_cuda", "&", "self", ".", "config", ".", "cuda", "\n", "\n", "if", "self", ".", "cuda", ":", "\n", "            ", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "if", "self", ".", "config", ".", "gpu_device", "is", "None", ":", "\n", "                ", "self", ".", "config", ".", "gpu_device", "=", "list", "(", "range", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "", "elif", "not", "isinstance", "(", "self", ".", "config", ".", "gpu_device", ",", "list", ")", ":", "\n", "                ", "self", ".", "config", ".", "gpu_device", "=", "[", "self", ".", "config", ".", "gpu_device", "]", "\n", "", "self", ".", "gpu_devices", "=", "self", ".", "config", ".", "gpu_device", "\n", "\n", "# set device when only one gpu", "\n", "num_gpus", "=", "len", "(", "self", ".", "gpu_devices", ")", "\n", "self", ".", "multigpu", "=", "num_gpus", ">", "1", "and", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", "\n", "if", "not", "self", ".", "multigpu", ":", "\n", "                ", "torch", ".", "cuda", ".", "set_device", "(", "self", ".", "gpu_devices", "[", "0", "]", ")", "\n", "\n", "", "gpu_devices", "=", "\",\"", ".", "join", "(", "[", "str", "(", "_gpu_id", ")", "for", "_gpu_id", "in", "self", ".", "gpu_devices", "]", ")", "\n", "self", ".", "logger", ".", "info", "(", "f\"User specified {num_gpus} GPUs: {gpu_devices}\"", ")", "\n", "self", ".", "parallel_helper_idxs", "=", "torch", ".", "arange", "(", "len", "(", "self", ".", "gpu_devices", ")", ")", ".", "to", "(", "\n", "self", ".", "device", "\n", ")", "\n", "\n", "self", ".", "logger", ".", "info", "(", "\"Program will run on *****GPU-CUDA***** \"", ")", "\n", "torchutils", ".", "print_cuda_statistics", "(", "output", "=", "self", ".", "logger", ".", "info", ",", "nvidia_smi", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Program will run on *****CPU*****\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.BaseAgent.BaseAgent._load_datasets": [[106, 108], ["None"], "methods", ["None"], ["", "", "def", "_load_datasets", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.BaseAgent.BaseAgent._create_model": [[109, 111], ["None"], "methods", ["None"], ["", "def", "_create_model", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.BaseAgent.BaseAgent._create_optimizer": [[112, 114], ["None"], "methods", ["None"], ["", "def", "_create_optimizer", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.BaseAgent.BaseAgent.run": [[115, 130], ["BaseAgent.BaseAgent.train", "BaseAgent.BaseAgent.cleanup", "BaseAgent.BaseAgent.logger.info", "BaseAgent.BaseAgent.backup", "BaseAgent.BaseAgent.cleanup", "BaseAgent.BaseAgent.logger.error"], "methods", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.BaseAgent.BaseAgent.train", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.BaseAgent.BaseAgent.cleanup", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.BaseAgent.BaseAgent.backup", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.BaseAgent.BaseAgent.cleanup"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        The main operator\n        :return:\n        \"\"\"", "\n", "try", ":", "\n", "            ", "self", ".", "train", "(", ")", "\n", "self", ".", "cleanup", "(", ")", "\n", "", "except", "KeyboardInterrupt", "as", "e", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"Interrupt detected. Saving data...\"", ")", "\n", "self", ".", "backup", "(", ")", "\n", "self", ".", "cleanup", "(", ")", "\n", "raise", "e", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "self", ".", "logger", ".", "error", "(", "e", ",", "exc_info", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.BaseAgent.BaseAgent.train": [[131, 158], ["range", "BaseAgent.BaseAgent.validate", "BaseAgent.BaseAgent.train_one_epoch", "BaseAgent.BaseAgent.save_checkpoint", "BaseAgent.BaseAgent.logger.info", "BaseAgent.BaseAgent.validate", "sch.step"], "methods", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.CDSAgent.CDSAgent.validate", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.CDSAgent.CDSAgent.train_one_epoch", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.CDSAgent.CDSAgent.save_checkpoint", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.CDSAgent.CDSAgent.validate"], ["", "", "def", "train", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Main training loop\n        :return:\n        \"\"\"", "\n", "if", "self", ".", "config", ".", "validate_freq", ":", "\n", "            ", "self", ".", "validate", "(", ")", "\n", "\n", "", "for", "epoch", "in", "range", "(", "self", ".", "current_epoch", "+", "1", ",", "self", ".", "config", ".", "num_epochs", "+", "1", ")", ":", "\n", "# early stop", "\n", "            ", "patience", "=", "self", ".", "config", ".", "optim_params", ".", "patience", "\n", "if", "patience", "and", "self", ".", "iter_with_no_improv", ">", "patience", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "\n", "f\"accuracy not improved in {patience} epoches, stopped\"", "\n", ")", "\n", "break", "\n", "# train", "\n", "", "self", ".", "current_epoch", "=", "epoch", "\n", "self", ".", "train_one_epoch", "(", ")", "\n", "# validate", "\n", "if", "self", ".", "config", ".", "validate_freq", "and", "epoch", "%", "self", ".", "config", ".", "validate_freq", "==", "0", ":", "\n", "                ", "self", ".", "validate", "(", ")", "\n", "# adjust", "\n", "", "for", "sch", "in", "self", ".", "lr_scheduler_list", ":", "\n", "                ", "sch", ".", "step", "(", ")", "\n", "# save", "\n", "", "self", ".", "save_checkpoint", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.BaseAgent.BaseAgent.train_one_epoch": [[159, 165], ["None"], "methods", ["None"], ["", "", "def", "train_one_epoch", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        One epoch of training\n        :return:\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.BaseAgent.BaseAgent.validate": [[166, 172], ["None"], "methods", ["None"], ["", "def", "validate", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        One cycle of model validation\n        :return:\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.BaseAgent.BaseAgent.backup": [[173, 179], ["BaseAgent.BaseAgent.summary_writer.close", "BaseAgent.BaseAgent.save_checkpoint"], "methods", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.CDSAgent.CDSAgent.save_checkpoint"], ["", "def", "backup", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Backs up the model upon interrupt\n        \"\"\"", "\n", "self", ".", "summary_writer", ".", "close", "(", ")", "\n", "self", ".", "save_checkpoint", "(", "filename", "=", "\"backup.pth.tar\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.BaseAgent.BaseAgent.finalise": [[180, 185], ["BaseAgent.BaseAgent.backup"], "methods", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.BaseAgent.BaseAgent.backup"], ["", "def", "finalise", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Do appropriate saving after model is :finished training\n        \"\"\"", "\n", "self", ".", "backup", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.BaseAgent.BaseAgent.cleanup": [[186, 198], ["hasattr", "datetime.datetime.now", "BaseAgent.BaseAgent.logger.info", "BaseAgent.BaseAgent.logger.info", "datetime.datetime.now.strftime"], "methods", ["None"], ["", "def", "cleanup", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Undo any global changes that the Agent may have made\n        \"\"\"", "\n", "if", "hasattr", "(", "self", ",", "\"best_val_epoch\"", ")", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\n", "f\"Best Val acc at {self.best_val_epoch}: {self.best_val_metric:.3}\"", "\n", ")", "\n", "", "endtime", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "exe_time", "=", "endtime", "-", "self", ".", "starttime", "\n", "self", ".", "logger", ".", "info", "(", "\n", "f\"End at time: {endtime.strftime('%Y.%m.%d-%H:%M:%S')}, total time: {exe_time.seconds}s\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.BaseAgent.BaseAgent.copy_checkpoint": [[200, 210], ["BaseAgent.BaseAgent.logger.info", "pcs.utils.torchutils.copy_checkpoint"], "methods", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.BaseAgent.BaseAgent.copy_checkpoint"], ["", "def", "copy_checkpoint", "(", "self", ",", "filename", "=", "\"checkpoint.pth.tar\"", ")", ":", "\n", "        ", "if", "(", "\n", "self", ".", "config", ".", "copy_checkpoint_freq", "\n", "and", "self", ".", "current_epoch", "%", "self", ".", "config", ".", "copy_checkpoint_freq", "==", "0", "\n", ")", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "f\"Backup checkpoint_epoch_{self.current_epoch}.pth.tar\"", ")", "\n", "torchutils", ".", "copy_checkpoint", "(", "\n", "filename", "=", "filename", ",", "\n", "folder", "=", "self", ".", "config", ".", "checkpoint_dir", ",", "\n", "copyname", "=", "f\"checkpoint_epoch_{self.current_epoch}.pth.tar\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.BaseAgent.BaseAgent.load_checkpoint": [[212, 219], ["None"], "methods", ["None"], ["", "", "def", "load_checkpoint", "(", "self", ",", "filename", ")", ":", "\n", "        ", "\"\"\"\n        Latest checkpoint loader\n        :param file_name: name of the checkpoint file\n        :return:\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.BaseAgent.BaseAgent.save_checkpoint": [[220, 228], ["None"], "methods", ["None"], ["", "def", "save_checkpoint", "(", "self", ",", "filename", "=", "\"checkpoint.pth.tar\"", ")", ":", "\n", "        ", "\"\"\"\n        Checkpoint saver\n        :param file_name: name of the checkpoint file\n        :param is_best: boolean flag to indicate whether current checkpoint's metric is the best so far\n        :return:\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.CDSAgent.CDSAgent.__init__": [[35, 66], ["CDSAgent.CDSAgent._define_task", "BaseAgent.__init__", "pcs.utils.torchutils.MomentumSoftmax", "pcs.utils.torchutils.MomentumSoftmax", "pcs.models.SSDALossModule", "torch.DataParallel().cuda", "torch.DataParallel().cuda", "torch.DataParallel().cuda", "CDSAgent.CDSAgent._init_labels", "CDSAgent.CDSAgent._load_fewshot_to_cls_weight", "CDSAgent.CDSAgent._init_memory_bank", "len", "len", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "CDSAgent.CDSAgent.get_attr", "CDSAgent.CDSAgent.get_attr"], "methods", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.CDSAgent.CDSAgent._define_task", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.head.CosineClassifier.__init__", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.CDSAgent.CDSAgent._init_labels", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.CDSAgent.CDSAgent._load_fewshot_to_cls_weight", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.CDSAgent.CDSAgent._init_memory_bank", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.get_attr", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.get_attr"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "self", ".", "_define_task", "(", "config", ")", "\n", "self", ".", "is_features_computed", "=", "False", "\n", "self", ".", "current_iteration_source", "=", "self", ".", "current_iteration_target", "=", "0", "\n", "self", ".", "domain_map", "=", "{", "\n", "\"source\"", ":", "self", ".", "config", ".", "data_params", ".", "source", ",", "\n", "\"target\"", ":", "self", ".", "config", ".", "data_params", ".", "target", ",", "\n", "}", "\n", "\n", "super", "(", "CDSAgent", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "# for MIM", "\n", "self", ".", "momentum_softmax_target", "=", "torchutils", ".", "MomentumSoftmax", "(", "\n", "self", ".", "num_class", ",", "m", "=", "len", "(", "self", ".", "get_attr", "(", "\"target\"", ",", "\"train_loader\"", ")", ")", "\n", ")", "\n", "self", ".", "momentum_softmax_source", "=", "torchutils", ".", "MomentumSoftmax", "(", "\n", "self", ".", "num_class", ",", "m", "=", "len", "(", "self", ".", "get_attr", "(", "\"source\"", ",", "\"train_loader\"", ")", ")", "\n", ")", "\n", "\n", "# init loss", "\n", "loss_fn", "=", "SSDALossModule", "(", "self", ".", "config", ",", "gpu_devices", "=", "self", ".", "gpu_devices", ")", "\n", "loss_fn", "=", "nn", ".", "DataParallel", "(", "loss_fn", ",", "device_ids", "=", "self", ".", "gpu_devices", ")", ".", "cuda", "(", ")", "\n", "self", ".", "loss_fn", "=", "loss_fn", "\n", "\n", "if", "self", ".", "config", ".", "pretrained_exp_dir", "is", "None", ":", "\n", "            ", "self", ".", "_init_memory_bank", "(", ")", "\n", "\n", "# init statics", "\n", "", "self", ".", "_init_labels", "(", ")", "\n", "self", ".", "_load_fewshot_to_cls_weight", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.CDSAgent.CDSAgent._define_task": [[67, 89], ["ls.startswith", "ls.startswith", "ls.startswith", "ls.startswith", "ls.startswith", "ls.split"], "methods", ["None"], ["", "def", "_define_task", "(", "self", ",", "config", ")", ":", "\n", "# specify task", "\n", "        ", "self", ".", "fewshot", "=", "config", ".", "data_params", ".", "fewshot", "\n", "self", ".", "clus", "=", "config", ".", "loss_params", ".", "clus", "!=", "None", "\n", "self", ".", "cls", "=", "self", ".", "semi", "=", "self", ".", "tgt", "=", "self", ".", "ssl", "=", "False", "\n", "self", ".", "is_pseudo_src", "=", "self", ".", "is_pseudo_tgt", "=", "False", "\n", "for", "ls", "in", "config", ".", "loss_params", ".", "loss", ":", "\n", "            ", "self", ".", "cls", "=", "self", ".", "cls", "|", "ls", ".", "startswith", "(", "\"cls\"", ")", "\n", "self", ".", "semi", "=", "self", ".", "semi", "|", "ls", ".", "startswith", "(", "\"semi\"", ")", "\n", "self", ".", "tgt", "=", "self", ".", "tgt", "|", "ls", ".", "startswith", "(", "\"tgt\"", ")", "\n", "self", ".", "ssl", "=", "self", ".", "ssl", "|", "(", "ls", ".", "split", "(", "\"-\"", ")", "[", "0", "]", "not", "in", "[", "\"cls\"", ",", "\"semi\"", ",", "\"tgt\"", "]", ")", "\n", "self", ".", "is_pseudo_src", "=", "self", ".", "is_pseudo_src", "|", "ls", ".", "startswith", "(", "\"semi-pseudo\"", ")", "\n", "self", ".", "is_pseudo_tgt", "=", "self", ".", "is_pseudo_tgt", "|", "ls", ".", "startswith", "(", "\"tgt-pseudo\"", ")", "\n", "\n", "", "self", ".", "is_pseudo_src", "=", "self", ".", "is_pseudo_src", "|", "(", "\n", "config", ".", "loss_params", ".", "pseudo", "and", "self", ".", "fewshot", "is", "not", "None", "\n", ")", "\n", "self", ".", "is_pseudo_tgt", "=", "self", ".", "is_pseudo_tgt", "|", "config", ".", "loss_params", ".", "pseudo", "\n", "self", ".", "semi", "=", "self", ".", "semi", "|", "self", ".", "is_pseudo_src", "\n", "if", "self", ".", "clus", ":", "\n", "            ", "self", ".", "is_pseudo_tgt", "=", "self", ".", "is_pseudo_tgt", "|", "(", "\n", "config", ".", "loss_params", ".", "clus", ".", "tgt_GC", "==", "\"PGC\"", "and", "\"GC\"", "in", "config", ".", "clus", ".", "type", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.CDSAgent.CDSAgent._init_labels": [[91, 104], ["CDSAgent.CDSAgent.get_attr", "CDSAgent.CDSAgent.get_attr", "zip", "torch.zeros().detach().cuda", "torch.zeros().detach().cuda", "torch.zeros().detach().cuda", "torch.zeros().detach().cuda", "torch.zeros().detach().cuda", "torch.zeros().detach().cuda", "torch.zeros().detach().cuda", "torch.zeros().detach().cuda", "torch.zeros().detach().cuda", "torch.zeros().detach().cuda", "torch.zeros().detach().cuda", "torch.zeros().detach().cuda", "torch.zeros().detach().cuda", "torch.zeros().detach().cuda", "torch.zeros().detach().cuda", "torch.zeros().detach().cuda", "torch.zeros().detach().cuda", "torch.zeros().detach().cuda", "torch.zeros().detach", "torch.zeros().detach", "torch.zeros().detach", "torch.zeros().detach", "torch.zeros().detach", "torch.zeros().detach", "torch.zeros().detach", "torch.zeros().detach", "torch.zeros().detach", "torch.zeros().detach", "torch.zeros().detach", "torch.zeros().detach", "torch.zeros().detach", "torch.zeros().detach", "torch.zeros().detach", "torch.zeros().detach", "torch.zeros().detach", "torch.zeros().detach", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.get_attr", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.get_attr"], ["", "", "def", "_init_labels", "(", "self", ")", ":", "\n", "        ", "train_len_tgt", "=", "self", ".", "get_attr", "(", "\"target\"", ",", "\"train_len\"", ")", "\n", "train_len_src", "=", "self", ".", "get_attr", "(", "\"source\"", ",", "\"train_len\"", ")", "\n", "\n", "# labels for pseudo", "\n", "if", "self", ".", "fewshot", ":", "\n", "            ", "self", ".", "predict_ordered_labels_pseudo_source", "=", "(", "\n", "torch", ".", "zeros", "(", "train_len_src", ",", "dtype", "=", "torch", ".", "long", ")", ".", "detach", "(", ")", ".", "cuda", "(", ")", "-", "1", "\n", ")", "\n", "for", "ind", ",", "lbl", "in", "zip", "(", "self", ".", "fewshot_index_source", ",", "self", ".", "fewshot_label_source", ")", ":", "\n", "                ", "self", ".", "predict_ordered_labels_pseudo_source", "[", "ind", "]", "=", "lbl", "\n", "", "", "self", ".", "predict_ordered_labels_pseudo_target", "=", "(", "\n", "torch", ".", "zeros", "(", "train_len_tgt", ",", "dtype", "=", "torch", ".", "long", ")", ".", "detach", "(", ")", ".", "cuda", "(", ")", "-", "1", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.CDSAgent.CDSAgent._load_datasets": [[106, 239], ["pcs.utils.datautils.get_class_num", "pcs.utils.datautils.get_class_map", "pcs.utils.datautils.create_dataset", "pcs.utils.datautils.create_loader", "pcs.utils.datautils.create_loader", "CDSAgent.CDSAgent.logger.info", "pcs.utils.datautils.create_dataset", "pcs.utils.datautils.create_loader", "pcs.utils.datautils.create_loader", "torch.from_numpy().detach().cuda", "torch.from_numpy().detach().cuda", "torch.from_numpy().detach().cuda", "torch.from_numpy().detach().cuda", "torch.from_numpy().detach().cuda", "torch.from_numpy().detach().cuda", "torch.from_numpy().detach().cuda", "torch.from_numpy().detach().cuda", "torch.from_numpy().detach().cuda", "CDSAgent.CDSAgent.set_attr", "CDSAgent.CDSAgent.set_attr", "CDSAgent.CDSAgent.set_attr", "CDSAgent.CDSAgent.set_attr", "CDSAgent.CDSAgent.set_attr", "pcs.utils.datautils.create_dataset", "CDSAgent.CDSAgent.get_attr", "pcs.utils.datautils.get_fewshot_index", "pcs.utils.datautils.create_dataset", "pcs.utils.datautils.create_loader", "CDSAgent.CDSAgent.get_attr", "zip", "pcs.utils.datautils.create_dataset", "len", "torch.zeros().detach().cuda", "torch.zeros().detach().cuda", "torch.zeros().detach().cuda", "torch.zeros().detach().cuda", "torch.zeros().detach().cuda", "torch.zeros().detach().cuda", "torch.zeros().detach().cuda", "torch.zeros().detach().cuda", "torch.zeros().detach().cuda", "torch.from_numpy().detach", "torch.from_numpy().detach", "torch.from_numpy().detach", "torch.from_numpy().detach", "torch.from_numpy().detach", "torch.from_numpy().detach", "torch.from_numpy().detach", "torch.from_numpy().detach", "torch.from_numpy().detach", "torch.zeros().detach", "torch.zeros().detach", "torch.zeros().detach", "torch.zeros().detach", "torch.zeros().detach", "torch.zeros().detach", "torch.zeros().detach", "torch.zeros().detach", "torch.zeros().detach", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.datautils.get_class_num", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.datautils.get_class_map", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.datautils.create_dataset", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.datautils.create_loader", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.datautils.create_loader", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.datautils.create_dataset", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.datautils.create_loader", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.datautils.create_loader", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.set_attr", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.set_attr", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.set_attr", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.set_attr", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.set_attr", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.datautils.create_dataset", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.get_attr", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.datautils.get_fewshot_index", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.datautils.create_dataset", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.datautils.create_loader", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.get_attr", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.datautils.create_dataset"], ["", "def", "_load_datasets", "(", "self", ")", ":", "\n", "        ", "name", "=", "self", ".", "config", ".", "data_params", ".", "name", "\n", "num_workers", "=", "self", ".", "config", ".", "data_params", ".", "num_workers", "\n", "fewshot", "=", "self", ".", "config", ".", "data_params", ".", "fewshot", "\n", "domain", "=", "self", ".", "domain_map", "\n", "image_size", "=", "self", ".", "config", ".", "data_params", ".", "image_size", "\n", "aug_src", "=", "self", ".", "config", ".", "data_params", ".", "aug_src", "\n", "aug_tgt", "=", "self", ".", "config", ".", "data_params", ".", "aug_tgt", "\n", "raw", "=", "\"raw\"", "\n", "\n", "self", ".", "num_class", "=", "datautils", ".", "get_class_num", "(", "\n", "f'data/splits/{name}/{domain[\"source\"]}.txt'", "\n", ")", "\n", "self", ".", "class_map", "=", "datautils", ".", "get_class_map", "(", "\n", "f'data/splits/{name}/{domain[\"target\"]}.txt'", "\n", ")", "\n", "\n", "batch_size_dict", "=", "{", "\n", "\"test\"", ":", "self", ".", "config", ".", "optim_params", ".", "batch_size", ",", "\n", "\"source\"", ":", "self", ".", "config", ".", "optim_params", ".", "batch_size_src", ",", "\n", "\"target\"", ":", "self", ".", "config", ".", "optim_params", ".", "batch_size_tgt", ",", "\n", "\"labeled\"", ":", "self", ".", "config", ".", "optim_params", ".", "batch_size_lbd", ",", "\n", "}", "\n", "self", ".", "batch_size_dict", "=", "batch_size_dict", "\n", "\n", "# self-supervised Dataset", "\n", "for", "domain_name", "in", "(", "\"source\"", ",", "\"target\"", ")", ":", "\n", "            ", "aug_name", "=", "{", "\"source\"", ":", "aug_src", ",", "\"target\"", ":", "aug_tgt", "}", "[", "domain_name", "]", "\n", "\n", "# Training datasets", "\n", "train_dataset", "=", "datautils", ".", "create_dataset", "(", "\n", "name", ",", "\n", "domain", "[", "domain_name", "]", ",", "\n", "suffix", "=", "\"\"", ",", "\n", "ret_index", "=", "True", ",", "\n", "image_transform", "=", "aug_name", ",", "\n", "use_mean_std", "=", "False", ",", "\n", "image_size", "=", "image_size", ",", "\n", ")", "\n", "\n", "train_loader", "=", "datautils", ".", "create_loader", "(", "\n", "train_dataset", ",", "\n", "batch_size_dict", "[", "domain_name", "]", ",", "\n", "is_train", "=", "True", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", ")", "\n", "train_init_loader", "=", "datautils", ".", "create_loader", "(", "\n", "train_dataset", ",", "\n", "batch_size_dict", "[", "domain_name", "]", ",", "\n", "is_train", "=", "False", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", ")", "\n", "train_labels", "=", "torch", ".", "from_numpy", "(", "train_dataset", ".", "labels", ")", ".", "detach", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "set_attr", "(", "domain_name", ",", "\"train_dataset\"", ",", "train_dataset", ")", "\n", "self", ".", "set_attr", "(", "domain_name", ",", "\"train_ordered_labels\"", ",", "train_labels", ")", "\n", "self", ".", "set_attr", "(", "domain_name", ",", "\"train_loader\"", ",", "train_loader", ")", "\n", "self", ".", "set_attr", "(", "domain_name", ",", "\"train_init_loader\"", ",", "train_init_loader", ")", "\n", "self", ".", "set_attr", "(", "domain_name", ",", "\"train_len\"", ",", "len", "(", "train_dataset", ")", ")", "\n", "\n", "# Classification and Fewshot Dataset", "\n", "\n", "", "if", "fewshot", ":", "\n", "            ", "train_lbd_dataset_source", "=", "datautils", ".", "create_dataset", "(", "\n", "name", ",", "\n", "domain", "[", "\"source\"", "]", ",", "\n", "suffix", "=", "f\"labeled_{fewshot}\"", ",", "\n", "ret_index", "=", "True", ",", "\n", "image_transform", "=", "aug_src", ",", "\n", "image_size", "=", "image_size", ",", "\n", ")", "\n", "src_dataset", "=", "self", ".", "get_attr", "(", "\"source\"", ",", "\"train_dataset\"", ")", "\n", "(", "\n", "self", ".", "fewshot_index_source", ",", "\n", "self", ".", "fewshot_label_source", ",", "\n", ")", "=", "datautils", ".", "get_fewshot_index", "(", "train_lbd_dataset_source", ",", "src_dataset", ")", "\n", "\n", "test_unl_dataset_source", "=", "datautils", ".", "create_dataset", "(", "\n", "name", ",", "\n", "domain", "[", "\"source\"", "]", ",", "\n", "suffix", "=", "f\"unlabeled_{fewshot}\"", ",", "\n", "ret_index", "=", "True", ",", "\n", "image_transform", "=", "raw", ",", "\n", "image_size", "=", "image_size", ",", "\n", ")", "\n", "self", ".", "test_unl_loader_source", "=", "datautils", ".", "create_loader", "(", "\n", "test_unl_dataset_source", ",", "\n", "batch_size_dict", "[", "\"test\"", "]", ",", "\n", "is_train", "=", "False", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", ")", "\n", "\n", "# labels for fewshot", "\n", "train_len", "=", "self", ".", "get_attr", "(", "\"source\"", ",", "\"train_len\"", ")", "\n", "self", ".", "fewshot_labels", "=", "(", "\n", "torch", ".", "zeros", "(", "train_len", ",", "dtype", "=", "torch", ".", "long", ")", ".", "detach", "(", ")", ".", "cuda", "(", ")", "-", "1", "\n", ")", "\n", "for", "ind", ",", "lbl", "in", "zip", "(", "self", ".", "fewshot_index_source", ",", "self", ".", "fewshot_label_source", ")", ":", "\n", "                ", "self", ".", "fewshot_labels", "[", "ind", "]", "=", "lbl", "\n", "\n", "", "", "else", ":", "\n", "            ", "train_lbd_dataset_source", "=", "datautils", ".", "create_dataset", "(", "\n", "name", ",", "\n", "domain", "[", "\"source\"", "]", ",", "\n", "ret_index", "=", "True", ",", "\n", "image_transform", "=", "aug_src", ",", "\n", "image_size", "=", "image_size", ",", "\n", ")", "\n", "\n", "", "test_suffix", "=", "\"test\"", "if", "self", ".", "config", ".", "data_params", ".", "train_val_split", "else", "\"\"", "\n", "test_unl_dataset_target", "=", "datautils", ".", "create_dataset", "(", "\n", "name", ",", "\n", "domain", "[", "\"target\"", "]", ",", "\n", "suffix", "=", "test_suffix", ",", "\n", "ret_index", "=", "True", ",", "\n", "image_transform", "=", "raw", ",", "\n", "image_size", "=", "image_size", ",", "\n", ")", "\n", "\n", "self", ".", "train_lbd_loader_source", "=", "datautils", ".", "create_loader", "(", "\n", "train_lbd_dataset_source", ",", "\n", "batch_size_dict", "[", "\"labeled\"", "]", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", ")", "\n", "self", ".", "test_unl_loader_target", "=", "datautils", ".", "create_loader", "(", "\n", "test_unl_dataset_target", ",", "\n", "batch_size_dict", "[", "\"test\"", "]", ",", "\n", "is_train", "=", "False", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", ")", "\n", "\n", "self", ".", "logger", ".", "info", "(", "\n", "f\"Dataset {name}, source {self.config.data_params.source}, target {self.config.data_params.target}\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.CDSAgent.CDSAgent._create_model": [[241, 274], ["CDSAgent.CDSAgent.config.model_params.version.split", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "getattr.cuda", "CDSAgent.CDSAgent.logger.info", "getattr", "torch.CrossEntropyLoss().cuda", "torch.CrossEntropyLoss().cuda", "torch.CrossEntropyLoss().cuda", "pcs.models.CosineClassifier", "pcs.utils.torchutils.weights_init", "pcs.models.CosineClassifier.cuda", "getattr.", "torch.Linear", "torch.Linear", "torch.Linear", "pcs.utils.torchutils.weights_init", "getattr.", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.weights_init", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.weights_init"], ["", "def", "_create_model", "(", "self", ")", ":", "\n", "        ", "version_grp", "=", "self", ".", "config", ".", "model_params", ".", "version", ".", "split", "(", "\"-\"", ")", "\n", "version", "=", "version_grp", "[", "-", "1", "]", "\n", "pretrained", "=", "\"pretrain\"", "in", "version_grp", "\n", "if", "pretrained", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"Imagenet pretrained model used\"", ")", "\n", "", "out_dim", "=", "self", ".", "config", ".", "model_params", ".", "out_dim", "\n", "\n", "# backbone", "\n", "if", "\"resnet\"", "in", "version", ":", "\n", "            ", "net_class", "=", "getattr", "(", "torchvision", ".", "models", ",", "version", ")", "\n", "\n", "if", "pretrained", ":", "\n", "                ", "model", "=", "net_class", "(", "pretrained", "=", "pretrained", ")", "\n", "model", ".", "fc", "=", "nn", ".", "Linear", "(", "model", ".", "fc", ".", "in_features", ",", "out_dim", ")", "\n", "torchutils", ".", "weights_init", "(", "model", ".", "fc", ")", "\n", "", "else", ":", "\n", "                ", "model", "=", "net_class", "(", "pretrained", "=", "False", ",", "num_classes", "=", "out_dim", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "model", "=", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "self", ".", "gpu_devices", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "\n", "# classification head", "\n", "if", "self", ".", "cls", ":", "\n", "            ", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "cls_head", "=", "CosineClassifier", "(", "\n", "num_class", "=", "self", ".", "num_class", ",", "inc", "=", "out_dim", ",", "temp", "=", "self", ".", "config", ".", "loss_params", ".", "T", "\n", ")", "\n", "torchutils", ".", "weights_init", "(", "cls_head", ")", "\n", "self", ".", "cls_head", "=", "cls_head", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.CDSAgent.CDSAgent._create_optimizer": [[275, 317], ["pcs.utils.torchutils.split_params_by_name", "parameters.append", "pcs.utils.torchutils.split_params_by_name", "pcs.utils.torchutils.split_params_by_name", "parameters.append", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "parameters.append", "parameters.append", "params_fc.extend", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "CDSAgent.CDSAgent.lr_scheduler_list.append", "pcs.utils.torchutils.lr_scheduler_invLR", "list", "CDSAgent.CDSAgent.cls_head.parameters"], "methods", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.split_params_by_name", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.split_params_by_name", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.split_params_by_name", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.lr_scheduler_invLR"], ["", "", "def", "_create_optimizer", "(", "self", ")", ":", "\n", "        ", "lr", "=", "self", ".", "config", ".", "optim_params", ".", "learning_rate", "\n", "momentum", "=", "self", ".", "config", ".", "optim_params", ".", "momentum", "\n", "weight_decay", "=", "self", ".", "config", ".", "optim_params", ".", "weight_decay", "\n", "conv_lr_ratio", "=", "self", ".", "config", ".", "optim_params", ".", "conv_lr_ratio", "\n", "\n", "parameters", "=", "[", "]", "\n", "# batch_norm layer: no weight_decay", "\n", "params_bn", ",", "_", "=", "torchutils", ".", "split_params_by_name", "(", "self", ".", "model", ",", "\"bn\"", ")", "\n", "parameters", ".", "append", "(", "{", "\"params\"", ":", "params_bn", ",", "\"weight_decay\"", ":", "0.0", "}", ")", "\n", "# conv layer: small lr", "\n", "_", ",", "params_conv", "=", "torchutils", ".", "split_params_by_name", "(", "self", ".", "model", ",", "[", "\"fc\"", ",", "\"bn\"", "]", ")", "\n", "if", "conv_lr_ratio", ":", "\n", "            ", "parameters", "[", "0", "]", "[", "\"lr\"", "]", "=", "lr", "*", "conv_lr_ratio", "\n", "parameters", ".", "append", "(", "{", "\"params\"", ":", "params_conv", ",", "\"lr\"", ":", "lr", "*", "conv_lr_ratio", "}", ")", "\n", "", "else", ":", "\n", "            ", "parameters", ".", "append", "(", "{", "\"params\"", ":", "params_conv", "}", ")", "\n", "# fc layer", "\n", "", "params_fc", ",", "_", "=", "torchutils", ".", "split_params_by_name", "(", "self", ".", "model", ",", "\"fc\"", ")", "\n", "if", "self", ".", "cls", "and", "self", ".", "config", ".", "optim_params", ".", "cls_update", ":", "\n", "            ", "params_fc", ".", "extend", "(", "list", "(", "self", ".", "cls_head", ".", "parameters", "(", ")", ")", ")", "\n", "", "parameters", ".", "append", "(", "{", "\"params\"", ":", "params_fc", "}", ")", "\n", "\n", "self", ".", "optim", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "parameters", ",", "\n", "lr", "=", "lr", ",", "\n", "weight_decay", "=", "weight_decay", ",", "\n", "momentum", "=", "momentum", ",", "\n", "nesterov", "=", "self", ".", "config", ".", "optim_params", ".", "nesterov", ",", "\n", ")", "\n", "\n", "# lr schedular", "\n", "if", "self", ".", "config", ".", "optim_params", ".", "lr_decay_schedule", ":", "\n", "            ", "optim_stepLR", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "\n", "self", ".", "optim", ",", "\n", "milestones", "=", "self", ".", "config", ".", "optim_params", ".", "lr_decay_schedule", ",", "\n", "gamma", "=", "self", ".", "config", ".", "optim_params", ".", "lr_decay_rate", ",", "\n", ")", "\n", "self", ".", "lr_scheduler_list", ".", "append", "(", "optim_stepLR", ")", "\n", "\n", "", "if", "self", ".", "config", ".", "optim_params", ".", "decay", ":", "\n", "            ", "self", ".", "optim_iterdecayLR", "=", "torchutils", ".", "lr_scheduler_invLR", "(", "self", ".", "optim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.CDSAgent.CDSAgent.train_one_epoch": [[318, 601], ["CDSAgent.CDSAgent.model.train", "len", "CDSAgent.CDSAgent.get_attr", "CDSAgent.CDSAgent.get_attr", "pcs.utils.AverageMeter", "CDSAgent.CDSAgent._load_fewshot_to_cls_weight", "tqdm.tqdm.tqdm", "range", "tqdm.tqdm.tqdm.close", "CDSAgent.CDSAgent.cls_head.train", "CDSAgent.CDSAgent.logger.info", "CDSAgent.CDSAgent.logger.info", "pcs.utils.AverageMeter", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "pcs.utils.is_div", "tqdm.tqdm.tqdm.set_postfix", "tqdm.tqdm.tqdm.update", "max", "range", "CDSAgent.CDSAgent._update_cluster_labels", "CDSAgent.CDSAgent._load_fewshot_to_cls_weight", "iter", "iter", "iter", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "enumerate", "CDSAgent.CDSAgent.optim.zero_grad", "CDSAgent.CDSAgent.optim.step", "pcs.utils.torchutils.get_lr", "pcs.utils.AverageMeter.update", "CDSAgent.CDSAgent.summary_writer.add_scalars", "CDSAgent.CDSAgent.train_loss.append", "CDSAgent.CDSAgent.get_attr", "CDSAgent.CDSAgent.summary_writer.add_scalars", "enumerate", "len", "len", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "len", "CDSAgent.CDSAgent.momentum_softmax_source.softmax_vector.cuda", "CDSAgent.CDSAgent.momentum_softmax_source.reset", "len", "CDSAgent.CDSAgent.momentum_softmax_target.softmax_vector.cuda", "CDSAgent.CDSAgent.momentum_softmax_target.reset", "next", "indices_lbd.cuda", "images_lbd.cuda.cuda.cuda", "labels_lbd.cuda.cuda.cuda", "CDSAgent.CDSAgent.model", "torch.normalize", "torch.normalize", "torch.normalize", "CDSAgent.CDSAgent.cls_head", "next", "images_unl.cuda.cuda.cuda", "indices_unl.cuda.cuda.cuda", "CDSAgent.CDSAgent.model", "torch.normalize", "torch.normalize", "torch.normalize", "CDSAgent.CDSAgent.cls_head", "CDSAgent.CDSAgent.loss_fn", "pcs.utils.torchutils.pseudo_label_loss", "CDSAgent.CDSAgent.get_attr", "CDSAgent.CDSAgent.at_idxs", "pcs.models.update_data_memory", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "pcs.utils.torchutils.entropy.item", "len", "torch.tensor().cuda.backward", "torch.tensor().cuda.backward", "torch.tensor().cuda.backward", "CDSAgent.CDSAgent._update_memory_bank", "epoch_loss_parts[].update", "CDSAgent.CDSAgent.summary_writer.add_scalars", "CDSAgent.CDSAgent.optim_iterdecayLR.step", "len", "len", "len", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "pcs.utils.torchutils.isin", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "out_pseudo.argmax", "CDSAgent.CDSAgent.criterion", "pcs.utils.torchutils.entropy.item", "CDSAgent.CDSAgent._update_memory_bank", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "pcs.models.loss_info", "pcs.utils.torchutils.entropy", "out_semi.size", "torch.softmax", "torch.softmax", "torch.softmax", "CDSAgent.CDSAgent.momentum_softmax_source.update", "CDSAgent.CDSAgent.momentum_softmax_source.softmax_vector.cuda", "torch.softmax.sum", "prob_mean_semi.cpu().detach", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "pcs.utils.torchutils.entropy", "CDSAgent.CDSAgent.size", "torch.softmax", "torch.softmax", "torch.softmax", "CDSAgent.CDSAgent.momentum_softmax_target.update", "CDSAgent.CDSAgent.momentum_softmax_target.softmax_vector.cuda", "prob_mean_semi.cpu", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.softmax.sum", "prob_mean_unl.cpu().detach", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "ls.split", "prob_mean_unl.cpu", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.BaseAgent.BaseAgent.train", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.get_attr", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.get_attr", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.CDSAgent.CDSAgent._load_fewshot_to_cls_weight", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.BaseAgent.BaseAgent.train", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.is_div", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.memorybank.MemoryBank.update", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.CDSAgent.CDSAgent._update_cluster_labels", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.CDSAgent.CDSAgent._load_fewshot_to_cls_weight", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.get_lr", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.memorybank.MemoryBank.update", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.get_attr", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.pseudo_label_loss", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.get_attr", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.memorybank.MemoryBank.at_idxs", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.update_data_memory", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.GradReverse.backward", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.GradReverse.backward", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.GradReverse.backward", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.CDSAgent.CDSAgent._update_memory_bank", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.memorybank.MemoryBank.update", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.isin", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.CDSAgent.CDSAgent._update_memory_bank", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.loss_info", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.entropy", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.memorybank.MemoryBank.update", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.entropy", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.memorybank.MemoryBank.update"], ["", "", "def", "train_one_epoch", "(", "self", ")", ":", "\n", "# train preparation", "\n", "        ", "self", ".", "model", "=", "self", ".", "model", ".", "train", "(", ")", "\n", "if", "self", ".", "cls", ":", "\n", "            ", "self", ".", "cls_head", ".", "train", "(", ")", "\n", "", "self", ".", "loss_fn", ".", "module", ".", "epoch", "=", "self", ".", "current_epoch", "\n", "\n", "loss_list", "=", "self", ".", "config", ".", "loss_params", ".", "loss", "\n", "loss_weight", "=", "self", ".", "config", ".", "loss_params", ".", "weight", "\n", "loss_warmup", "=", "self", ".", "config", ".", "loss_params", ".", "start", "\n", "loss_giveup", "=", "self", ".", "config", ".", "loss_params", ".", "end", "\n", "\n", "num_loss", "=", "len", "(", "loss_list", ")", "\n", "\n", "source_loader", "=", "self", ".", "get_attr", "(", "\"source\"", ",", "\"train_loader\"", ")", "\n", "target_loader", "=", "self", ".", "get_attr", "(", "\"target\"", ",", "\"train_loader\"", ")", "\n", "if", "self", ".", "config", ".", "steps_epoch", "is", "None", ":", "\n", "            ", "num_batches", "=", "max", "(", "len", "(", "source_loader", ")", ",", "len", "(", "target_loader", ")", ")", "+", "1", "\n", "self", ".", "logger", ".", "info", "(", "f\"source loader batches: {len(source_loader)}\"", ")", "\n", "self", ".", "logger", ".", "info", "(", "f\"target loader batches: {len(target_loader)}\"", ")", "\n", "", "else", ":", "\n", "            ", "num_batches", "=", "self", ".", "config", ".", "steps_epoch", "\n", "\n", "", "epoch_loss", "=", "AverageMeter", "(", ")", "\n", "epoch_loss_parts", "=", "[", "AverageMeter", "(", ")", "for", "_", "in", "range", "(", "num_loss", ")", "]", "\n", "\n", "# cluster", "\n", "if", "self", ".", "clus", ":", "\n", "            ", "if", "self", ".", "config", ".", "loss_params", ".", "clus", ".", "kmeans_freq", ":", "\n", "                ", "kmeans_batches", "=", "num_batches", "//", "self", ".", "config", ".", "loss_params", ".", "clus", ".", "kmeans_freq", "\n", "", "else", ":", "\n", "                ", "kmeans_batches", "=", "1", "\n", "", "", "else", ":", "\n", "            ", "kmeans_batches", "=", "None", "\n", "\n", "# load weight", "\n", "", "self", ".", "_load_fewshot_to_cls_weight", "(", ")", "\n", "if", "self", ".", "fewshot", ":", "\n", "            ", "fewshot_index", "=", "torch", ".", "tensor", "(", "self", ".", "fewshot_index_source", ")", ".", "cuda", "(", ")", "\n", "\n", "", "tqdm_batch", "=", "tqdm", "(", "\n", "total", "=", "num_batches", ",", "desc", "=", "f\"[Epoch {self.current_epoch}]\"", ",", "leave", "=", "False", "\n", ")", "\n", "tqdm_post", "=", "{", "}", "\n", "for", "batch_i", "in", "range", "(", "num_batches", ")", ":", "\n", "# Kmeans", "\n", "            ", "if", "is_div", "(", "kmeans_batches", ",", "batch_i", ")", ":", "\n", "                ", "self", ".", "_update_cluster_labels", "(", ")", "\n", "\n", "", "if", "not", "self", ".", "config", ".", "optim_params", ".", "cls_update", ":", "\n", "                ", "self", ".", "_load_fewshot_to_cls_weight", "(", ")", "\n", "\n", "# iteration over all source images", "\n", "", "if", "not", "batch_i", "%", "len", "(", "source_loader", ")", ":", "\n", "                ", "source_iter", "=", "iter", "(", "source_loader", ")", "\n", "\n", "if", "\"semi-condentmax\"", "in", "self", ".", "config", ".", "loss_params", ".", "loss", ":", "\n", "                    ", "momentum_prob_source", "=", "(", "\n", "self", ".", "momentum_softmax_source", ".", "softmax_vector", ".", "cuda", "(", ")", "\n", ")", "\n", "self", ".", "momentum_softmax_source", ".", "reset", "(", ")", "\n", "\n", "# iteration over all target images", "\n", "", "", "if", "not", "batch_i", "%", "len", "(", "target_loader", ")", ":", "\n", "                ", "target_iter", "=", "iter", "(", "target_loader", ")", "\n", "\n", "if", "\"tgt-condentmax\"", "in", "self", ".", "config", ".", "loss_params", ".", "loss", ":", "\n", "                    ", "momentum_prob_target", "=", "(", "\n", "self", ".", "momentum_softmax_target", ".", "softmax_vector", ".", "cuda", "(", ")", "\n", ")", "\n", "self", ".", "momentum_softmax_target", ".", "reset", "(", ")", "\n", "\n", "# iteration over all labeled source images", "\n", "", "", "if", "self", ".", "cls", "and", "not", "batch_i", "%", "len", "(", "self", ".", "train_lbd_loader_source", ")", ":", "\n", "                ", "source_lbd_iter", "=", "iter", "(", "self", ".", "train_lbd_loader_source", ")", "\n", "\n", "# calculate loss", "\n", "", "for", "domain_name", "in", "(", "\"source\"", ",", "\"target\"", ")", ":", "\n", "                ", "loss", "=", "torch", ".", "tensor", "(", "0", ")", ".", "cuda", "(", ")", "\n", "loss_d", "=", "0", "\n", "loss_part_d", "=", "[", "0", "]", "*", "num_loss", "\n", "batch_size", "=", "self", ".", "batch_size_dict", "[", "domain_name", "]", "\n", "\n", "if", "self", ".", "cls", "and", "domain_name", "==", "\"source\"", ":", "\n", "                    ", "indices_lbd", ",", "images_lbd", ",", "labels_lbd", "=", "next", "(", "source_lbd_iter", ")", "\n", "indices_lbl", "=", "indices_lbd", ".", "cuda", "(", ")", "\n", "images_lbd", "=", "images_lbd", ".", "cuda", "(", ")", "\n", "labels_lbd", "=", "labels_lbd", ".", "cuda", "(", ")", "\n", "feat_lbd", "=", "self", ".", "model", "(", "images_lbd", ")", "\n", "feat_lbd", "=", "F", ".", "normalize", "(", "feat_lbd", ",", "dim", "=", "1", ")", "\n", "out_lbd", "=", "self", ".", "cls_head", "(", "feat_lbd", ")", "\n", "\n", "# Matching & ssl", "\n", "", "if", "(", "self", ".", "tgt", "and", "domain_name", "==", "\"target\"", ")", "or", "self", ".", "ssl", ":", "\n", "                    ", "loader_iter", "=", "(", "\n", "source_iter", "if", "domain_name", "==", "\"source\"", "else", "target_iter", "\n", ")", "\n", "\n", "indices_unl", ",", "images_unl", ",", "_", "=", "next", "(", "loader_iter", ")", "\n", "images_unl", "=", "images_unl", ".", "cuda", "(", ")", "\n", "indices_unl", "=", "indices_unl", ".", "cuda", "(", ")", "\n", "feat_unl", "=", "self", ".", "model", "(", "images_unl", ")", "\n", "feat_unl", "=", "F", ".", "normalize", "(", "feat_unl", ",", "dim", "=", "1", ")", "\n", "out_unl", "=", "self", ".", "cls_head", "(", "feat_unl", ")", "\n", "\n", "# Semi Supervised", "\n", "", "if", "self", ".", "semi", "and", "domain_name", "==", "\"source\"", ":", "\n", "                    ", "semi_mask", "=", "~", "torchutils", ".", "isin", "(", "indices_unl", ",", "fewshot_index", ")", "\n", "\n", "indices_semi", "=", "indices_unl", "[", "semi_mask", "]", "\n", "out_semi", "=", "out_unl", "[", "semi_mask", "]", "\n", "\n", "# Self-supervised Learning", "\n", "", "if", "self", ".", "ssl", ":", "\n", "                    ", "_", ",", "new_data_memory", ",", "loss_ssl", ",", "aux_list", "=", "self", ".", "loss_fn", "(", "\n", "indices_unl", ",", "feat_unl", ",", "domain_name", ",", "self", ".", "parallel_helper_idxs", "\n", ")", "\n", "loss_ssl", "=", "[", "torch", ".", "mean", "(", "ls", ")", "for", "ls", "in", "loss_ssl", "]", "\n", "\n", "# pseudo", "\n", "", "loss_pseudo", "=", "torch", ".", "tensor", "(", "0", ")", ".", "cuda", "(", ")", "\n", "is_pseudo", "=", "{", "\"source\"", ":", "self", ".", "is_pseudo_src", ",", "\"target\"", ":", "self", ".", "is_pseudo_tgt", "}", "\n", "thres_dict", "=", "{", "\n", "\"source\"", ":", "self", ".", "config", ".", "loss_params", ".", "thres_src", ",", "\n", "\"target\"", ":", "self", ".", "config", ".", "loss_params", ".", "thres_tgt", ",", "\n", "}", "\n", "\n", "if", "is_pseudo", "[", "domain_name", "]", ":", "\n", "                    ", "if", "domain_name", "==", "\"source\"", ":", "\n", "                        ", "indices_pseudo", "=", "indices_semi", "\n", "out_pseudo", "=", "out_semi", "\n", "pseudo_domain", "=", "self", ".", "predict_ordered_labels_pseudo_source", "\n", "", "else", ":", "\n", "                        ", "indices_pseudo", "=", "indices_unl", "\n", "out_pseudo", "=", "out_unl", "# [bs, class_num]", "\n", "pseudo_domain", "=", "self", ".", "predict_ordered_labels_pseudo_target", "\n", "", "thres", "=", "thres_dict", "[", "domain_name", "]", "\n", "\n", "# calculate loss", "\n", "loss_pseudo", ",", "aux", "=", "torchutils", ".", "pseudo_label_loss", "(", "\n", "out_pseudo", ",", "\n", "thres", "=", "thres", ",", "\n", "mask", "=", "None", ",", "\n", "num_class", "=", "self", ".", "num_class", ",", "\n", "aux", "=", "True", ",", "\n", ")", "\n", "mask_pseudo", "=", "aux", "[", "\"mask\"", "]", "\n", "\n", "# fewshot memory bank", "\n", "mb", "=", "self", ".", "get_attr", "(", "\"source\"", ",", "\"memory_bank_wrapper\"", ")", "\n", "indices_lbd_tounl", "=", "fewshot_index", "[", "indices_lbd", "]", "\n", "mb_feat_lbd", "=", "mb", ".", "at_idxs", "(", "indices_lbd_tounl", ")", "\n", "fewshot_data_memory", "=", "update_data_memory", "(", "mb_feat_lbd", ",", "feat_lbd", ")", "\n", "\n", "# stat", "\n", "pred_selected", "=", "out_pseudo", ".", "argmax", "(", "dim", "=", "1", ")", "[", "mask_pseudo", "]", "\n", "indices_selected", "=", "indices_pseudo", "[", "mask_pseudo", "]", "\n", "indices_unselected", "=", "indices_pseudo", "[", "~", "mask_pseudo", "]", "\n", "\n", "pseudo_domain", "[", "indices_selected", "]", "=", "pred_selected", "\n", "pseudo_domain", "[", "indices_unselected", "]", "=", "-", "1", "\n", "\n", "# Compute Loss", "\n", "\n", "", "for", "ind", ",", "ls", "in", "enumerate", "(", "loss_list", ")", ":", "\n", "                    ", "if", "(", "\n", "self", ".", "current_epoch", "<", "loss_warmup", "[", "ind", "]", "\n", "or", "self", ".", "current_epoch", ">=", "loss_giveup", "[", "ind", "]", "\n", ")", ":", "\n", "                        ", "continue", "\n", "", "loss_part", "=", "torch", ".", "tensor", "(", "0", ")", ".", "cuda", "(", ")", "\n", "# *** handler for different loss ***", "\n", "# classification on few-shot", "\n", "if", "ls", "==", "\"cls-so\"", "and", "domain_name", "==", "\"source\"", ":", "\n", "                        ", "loss_part", "=", "self", ".", "criterion", "(", "out_lbd", ",", "labels_lbd", ")", "\n", "", "elif", "ls", "==", "\"cls-info\"", "and", "domain_name", "==", "\"source\"", ":", "\n", "                        ", "loss_part", "=", "loss_info", "(", "feat_lbd", ",", "mb_feat_lbd", ",", "labels_lbd", ")", "\n", "# semi-supervision learning on unlabled source", "\n", "", "elif", "ls", "==", "\"semi-entmin\"", "and", "domain_name", "==", "\"source\"", ":", "\n", "                        ", "loss_part", "=", "torchutils", ".", "entropy", "(", "out_semi", ")", "\n", "", "elif", "ls", "==", "\"semi-condentmax\"", "and", "domain_name", "==", "\"source\"", ":", "\n", "                        ", "bs", "=", "out_semi", ".", "size", "(", "0", ")", "\n", "prob_semi", "=", "F", ".", "softmax", "(", "out_semi", ",", "dim", "=", "1", ")", "\n", "prob_mean_semi", "=", "prob_semi", ".", "sum", "(", "dim", "=", "0", ")", "/", "bs", "\n", "\n", "# update momentum", "\n", "self", ".", "momentum_softmax_source", ".", "update", "(", "\n", "prob_mean_semi", ".", "cpu", "(", ")", ".", "detach", "(", ")", ",", "bs", "\n", ")", "\n", "# get momentum probability", "\n", "momentum_prob_source", "=", "(", "\n", "self", ".", "momentum_softmax_source", ".", "softmax_vector", ".", "cuda", "(", ")", "\n", ")", "\n", "# compute loss", "\n", "entropy_cond", "=", "-", "torch", ".", "sum", "(", "\n", "prob_mean_semi", "*", "torch", ".", "log", "(", "momentum_prob_source", "+", "1e-5", ")", "\n", ")", "\n", "loss_part", "=", "-", "entropy_cond", "\n", "\n", "# learning on unlabeled target domain", "\n", "", "elif", "ls", "==", "\"tgt-entmin\"", "and", "domain_name", "==", "\"target\"", ":", "\n", "                        ", "loss_part", "=", "torchutils", ".", "entropy", "(", "out_unl", ")", "\n", "", "elif", "ls", "==", "\"tgt-condentmax\"", "and", "domain_name", "==", "\"target\"", ":", "\n", "                        ", "bs", "=", "out_unl", ".", "size", "(", "0", ")", "\n", "prob_unl", "=", "F", ".", "softmax", "(", "out_unl", ",", "dim", "=", "1", ")", "\n", "prob_mean_unl", "=", "prob_unl", ".", "sum", "(", "dim", "=", "0", ")", "/", "bs", "\n", "\n", "# update momentum", "\n", "self", ".", "momentum_softmax_target", ".", "update", "(", "\n", "prob_mean_unl", ".", "cpu", "(", ")", ".", "detach", "(", ")", ",", "bs", "\n", ")", "\n", "# get momentum probability", "\n", "momentum_prob_target", "=", "(", "\n", "self", ".", "momentum_softmax_target", ".", "softmax_vector", ".", "cuda", "(", ")", "\n", ")", "\n", "# compute loss", "\n", "entropy_cond", "=", "-", "torch", ".", "sum", "(", "\n", "prob_mean_unl", "*", "torch", ".", "log", "(", "momentum_prob_target", "+", "1e-5", ")", "\n", ")", "\n", "loss_part", "=", "-", "entropy_cond", "\n", "# self-supervised learning", "\n", "", "elif", "ls", ".", "split", "(", "\"-\"", ")", "[", "0", "]", "in", "[", "\"ID\"", ",", "\"CD\"", ",", "\"proto\"", ",", "\"I2C\"", ",", "\"C2C\"", "]", ":", "\n", "                        ", "loss_part", "=", "loss_ssl", "[", "ind", "]", "\n", "\n", "", "loss_part", "=", "loss_weight", "[", "ind", "]", "*", "loss_part", "\n", "loss", "=", "loss", "+", "loss_part", "\n", "loss_d", "=", "loss_d", "+", "loss_part", ".", "item", "(", ")", "\n", "loss_part_d", "[", "ind", "]", "=", "loss_part", ".", "item", "(", ")", "\n", "\n", "# Backpropagation", "\n", "", "self", ".", "optim", ".", "zero_grad", "(", ")", "\n", "if", "len", "(", "loss_list", ")", "and", "loss", "!=", "0", ":", "\n", "                    ", "loss", ".", "backward", "(", ")", "\n", "", "self", ".", "optim", ".", "step", "(", ")", "\n", "\n", "# update memory_bank", "\n", "if", "self", ".", "ssl", ":", "\n", "                    ", "self", ".", "_update_memory_bank", "(", "domain_name", ",", "indices_unl", ",", "new_data_memory", ")", "\n", "if", "domain_name", "==", "\"source\"", ":", "\n", "                        ", "self", ".", "_update_memory_bank", "(", "\n", "domain_name", ",", "indices_lbd_tounl", ",", "fewshot_data_memory", "\n", ")", "\n", "\n", "# update lr info", "\n", "", "", "tqdm_post", "[", "\"lr\"", "]", "=", "torchutils", ".", "get_lr", "(", "self", ".", "optim", ",", "g_id", "=", "-", "1", ")", "\n", "\n", "# update loss info", "\n", "epoch_loss", ".", "update", "(", "loss_d", ",", "batch_size", ")", "\n", "tqdm_post", "[", "\"loss\"", "]", "=", "epoch_loss", ".", "avg", "\n", "self", ".", "summary_writer", ".", "add_scalars", "(", "\n", "\"train/loss\"", ",", "{", "\"loss\"", ":", "epoch_loss", ".", "val", "}", ",", "self", ".", "current_iteration", "\n", ")", "\n", "self", ".", "train_loss", ".", "append", "(", "epoch_loss", ".", "val", ")", "\n", "\n", "# update loss part info", "\n", "domain_iteration", "=", "self", ".", "get_attr", "(", "domain_name", ",", "\"current_iteration\"", ")", "\n", "self", ".", "summary_writer", ".", "add_scalars", "(", "\n", "f\"train/{self.domain_map[domain_name]}_loss\"", ",", "\n", "{", "\"loss\"", ":", "epoch_loss", ".", "val", "}", ",", "\n", "domain_iteration", ",", "\n", ")", "\n", "for", "i", ",", "ls", "in", "enumerate", "(", "loss_part_d", ")", ":", "\n", "                    ", "ls_name", "=", "loss_list", "[", "i", "]", "\n", "epoch_loss_parts", "[", "i", "]", ".", "update", "(", "ls", ",", "batch_size", ")", "\n", "tqdm_post", "[", "ls_abbr", "[", "ls_name", "]", "]", "=", "epoch_loss_parts", "[", "i", "]", ".", "avg", "\n", "self", ".", "summary_writer", ".", "add_scalars", "(", "\n", "f\"train/{self.domain_map[domain_name]}_loss\"", ",", "\n", "{", "ls_name", ":", "epoch_loss_parts", "[", "i", "]", ".", "val", "}", ",", "\n", "domain_iteration", ",", "\n", ")", "\n", "\n", "# adjust lr", "\n", "", "if", "self", ".", "config", ".", "optim_params", ".", "decay", ":", "\n", "                    ", "self", ".", "optim_iterdecayLR", ".", "step", "(", ")", "\n", "\n", "", "self", ".", "current_iteration", "+=", "1", "\n", "", "tqdm_batch", ".", "set_postfix", "(", "tqdm_post", ")", "\n", "tqdm_batch", ".", "update", "(", ")", "\n", "self", ".", "current_iteration_source", "+=", "1", "\n", "self", ".", "current_iteration_target", "+=", "1", "\n", "", "tqdm_batch", ".", "close", "(", ")", "\n", "\n", "self", ".", "current_loss", "=", "epoch_loss", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.CDSAgent.CDSAgent._load_fewshot_to_cls_weight": [[602, 659], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "CDSAgent.CDSAgent.get_attr().as_tensor", "CDSAgent.CDSAgent.get_attr().as_tensor", "mask.nonzero().squeeze", "mask.nonzero().squeeze", "range", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "CDSAgent.CDSAgent.get_attr", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.normalize", "torch.normalize", "torch.normalize", "CDSAgent.CDSAgent.get_attr", "CDSAgent.CDSAgent.get_attr", "CDSAgent.CDSAgent.get_attr", "mask.nonzero", "mask.nonzero", "fewshot_mask.sum", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.memorybank.MemoryBank.as_tensor", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.memorybank.MemoryBank.as_tensor", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.get_attr", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.get_attr", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.get_attr", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.get_attr"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_load_fewshot_to_cls_weight", "(", "self", ")", ":", "\n", "        ", "\"\"\"load centroids to cosine classifier\n\n        Args:\n            method (str, optional): None, 'fewshot', 'src', 'tgt'. Defaults to None.\n        \"\"\"", "\n", "method", "=", "self", ".", "config", ".", "model_params", ".", "load_weight", "\n", "\n", "if", "method", "is", "None", ":", "\n", "            ", "return", "\n", "", "assert", "method", "in", "[", "\"fewshot\"", ",", "\"src\"", ",", "\"tgt\"", ",", "\"src-tgt\"", ",", "\"fewshot-tgt\"", "]", "\n", "\n", "thres", "=", "{", "\"src\"", ":", "1", ",", "\"tgt\"", ":", "self", ".", "config", ".", "model_params", ".", "load_weight_thres", "}", "\n", "bank", "=", "{", "\n", "\"src\"", ":", "self", ".", "get_attr", "(", "\"source\"", ",", "\"memory_bank_wrapper\"", ")", ".", "as_tensor", "(", ")", ",", "\n", "\"tgt\"", ":", "self", ".", "get_attr", "(", "\"target\"", ",", "\"memory_bank_wrapper\"", ")", ".", "as_tensor", "(", ")", ",", "\n", "}", "\n", "fewshot_label", "=", "{", "}", "\n", "fewshot_index", "=", "{", "}", "\n", "is_tgt", "=", "(", "\n", "method", "in", "[", "\"tgt\"", ",", "\"fewshot-tgt\"", ",", "\"src-tgt\"", "]", "\n", "and", "self", ".", "current_epoch", ">=", "self", ".", "config", ".", "model_params", ".", "load_weight_epoch", "\n", ")", "\n", "if", "method", "in", "[", "\"fewshot\"", ",", "\"fewshot-tgt\"", "]", ":", "\n", "            ", "if", "self", ".", "fewshot", ":", "\n", "                ", "fewshot_label", "[", "\"src\"", "]", "=", "torch", ".", "tensor", "(", "self", ".", "fewshot_label_source", ")", "\n", "fewshot_index", "[", "\"src\"", "]", "=", "torch", ".", "tensor", "(", "self", ".", "fewshot_index_source", ")", "\n", "", "else", ":", "\n", "                ", "fewshot_label", "[", "\"src\"", "]", "=", "self", ".", "get_attr", "(", "\"source\"", ",", "\"train_ordered_labels\"", ")", "\n", "fewshot_index", "[", "\"src\"", "]", "=", "torch", ".", "arange", "(", "\n", "self", ".", "get_attr", "(", "\"source\"", ",", "\"train_len\"", ")", "\n", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "mask", "=", "self", ".", "predict_ordered_labels_pseudo_source", "!=", "-", "1", "\n", "fewshot_label", "[", "\"src\"", "]", "=", "self", ".", "predict_ordered_labels_pseudo_source", "[", "mask", "]", "\n", "fewshot_index", "[", "\"src\"", "]", "=", "mask", ".", "nonzero", "(", ")", ".", "squeeze", "(", "1", ")", "\n", "", "if", "is_tgt", ":", "\n", "            ", "mask", "=", "self", ".", "predict_ordered_labels_pseudo_target", "!=", "-", "1", "\n", "fewshot_label", "[", "\"tgt\"", "]", "=", "self", ".", "predict_ordered_labels_pseudo_target", "[", "mask", "]", "\n", "fewshot_index", "[", "\"tgt\"", "]", "=", "mask", ".", "nonzero", "(", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "", "for", "domain", "in", "(", "\"src\"", ",", "\"tgt\"", ")", ":", "\n", "            ", "if", "domain", "==", "\"tgt\"", "and", "not", "is_tgt", ":", "\n", "                ", "break", "\n", "", "if", "domain", "==", "\"src\"", "and", "method", "==", "\"tgt\"", ":", "\n", "                ", "break", "\n", "", "weight", "=", "self", ".", "cls_head", ".", "fc", ".", "weight", ".", "data", "\n", "\n", "for", "label", "in", "range", "(", "self", ".", "num_class", ")", ":", "\n", "                ", "fewshot_mask", "=", "fewshot_label", "[", "domain", "]", "==", "label", "\n", "if", "fewshot_mask", ".", "sum", "(", ")", "<", "thres", "[", "domain", "]", ":", "\n", "                    ", "continue", "\n", "", "fewshot_ind", "=", "fewshot_index", "[", "domain", "]", "[", "fewshot_mask", "]", "\n", "bank_vec", "=", "bank", "[", "domain", "]", "[", "fewshot_ind", "]", "\n", "weight", "[", "label", "]", "=", "F", ".", "normalize", "(", "torch", ".", "mean", "(", "bank_vec", ",", "dim", "=", "0", ")", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.CDSAgent.CDSAgent.validate": [[662, 694], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "CDSAgent.CDSAgent.model.eval", "CDSAgent.CDSAgent.val_acc.append", "CDSAgent.CDSAgent.clear_train_features", "CDSAgent.CDSAgent.cls_head.eval", "CDSAgent.CDSAgent.score", "CDSAgent.CDSAgent.score"], "methods", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.CDSAgent.CDSAgent.clear_train_features", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.CDSAgent.CDSAgent.score", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.CDSAgent.CDSAgent.score"], ["", "", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "validate", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "# Domain Adaptation", "\n", "if", "self", ".", "cls", ":", "\n", "# self._load_fewshot_to_cls_weight()", "\n", "            ", "self", ".", "cls_head", ".", "eval", "(", ")", "\n", "if", "(", "\n", "self", ".", "config", ".", "data_params", ".", "fewshot", "\n", "and", "self", ".", "config", ".", "data_params", ".", "name", "not", "in", "[", "\"visda17\"", ",", "\"digits\"", "]", "\n", ")", ":", "\n", "                ", "self", ".", "score", "(", "\n", "self", ".", "test_unl_loader_source", ",", "\n", "name", "=", "f\"unlabeled {self.domain_map['source']}\"", ",", "\n", ")", "\n", "", "self", ".", "current_val_metric", "=", "self", ".", "score", "(", "\n", "self", ".", "test_unl_loader_target", ",", "\n", "name", "=", "f\"unlabeled {self.domain_map['target']}\"", ",", "\n", ")", "\n", "\n", "# update information", "\n", "", "self", ".", "current_val_iteration", "+=", "1", "\n", "if", "self", ".", "current_val_metric", ">=", "self", ".", "best_val_metric", ":", "\n", "            ", "self", ".", "best_val_metric", "=", "self", ".", "current_val_metric", "\n", "self", ".", "best_val_epoch", "=", "self", ".", "current_epoch", "\n", "self", ".", "iter_with_no_improv", "=", "0", "\n", "", "else", ":", "\n", "            ", "self", ".", "iter_with_no_improv", "+=", "1", "\n", "", "self", ".", "val_acc", ".", "append", "(", "self", ".", "current_val_metric", ")", "\n", "\n", "self", ".", "clear_train_features", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.CDSAgent.CDSAgent.score": [[695, 743], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "pcs.utils.AverageMeter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "CDSAgent.CDSAgent.summary_writer.add_scalars", "CDSAgent.CDSAgent.summary_writer.add_scalars", "CDSAgent.CDSAgent.logger.info", "images.cuda.cuda.cuda", "labels.cuda.cuda.cuda", "CDSAgent.CDSAgent.model", "torch.normalize", "torch.normalize", "torch.normalize", "CDSAgent.CDSAgent.cls_head", "torch.softmax", "torch.softmax", "torch.softmax", "CDSAgent.CDSAgent.criterion", "pred_label.extend", "label.extend", "pred.eq().sum().item", "zip", "pred.size", "pcs.utils.AverageMeter.update", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "pred.cpu().tolist", "labels.cuda.cuda.cpu().tolist", "pred_score.extend", "pred.size", "prob[].cpu().tolist", "pred.eq().sum", "error_indices.append", "pred.cpu", "labels.cuda.cuda.cpu", "prob[].cpu", "pred.eq", "t.long", "p.long"], "methods", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.memorybank.MemoryBank.update"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "score", "(", "self", ",", "loader", ",", "name", "=", "\"test\"", ")", ":", "\n", "        ", "correct", "=", "0", "\n", "size", "=", "0", "\n", "epoch_loss", "=", "AverageMeter", "(", ")", "\n", "error_indices", "=", "[", "]", "\n", "confusion_matrix", "=", "torch", ".", "zeros", "(", "self", ".", "num_class", ",", "self", ".", "num_class", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "pred_score", "=", "[", "]", "\n", "pred_label", "=", "[", "]", "\n", "label", "=", "[", "]", "\n", "\n", "for", "batch_i", ",", "(", "indices", ",", "images", ",", "labels", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "            ", "images", "=", "images", ".", "cuda", "(", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "\n", "feat", "=", "self", ".", "model", "(", "images", ")", "\n", "feat", "=", "F", ".", "normalize", "(", "feat", ",", "dim", "=", "1", ")", "\n", "output", "=", "self", ".", "cls_head", "(", "feat", ")", "\n", "prob", "=", "F", ".", "softmax", "(", "output", ",", "dim", "=", "-", "1", ")", "\n", "\n", "loss", "=", "self", ".", "criterion", "(", "output", ",", "labels", ")", "\n", "pred", "=", "torch", ".", "max", "(", "output", ",", "dim", "=", "1", ")", "[", "1", "]", "\n", "\n", "pred_label", ".", "extend", "(", "pred", ".", "cpu", "(", ")", ".", "tolist", "(", ")", ")", "\n", "label", ".", "extend", "(", "labels", ".", "cpu", "(", ")", ".", "tolist", "(", ")", ")", "\n", "if", "self", ".", "num_class", "==", "2", ":", "\n", "                ", "pred_score", ".", "extend", "(", "prob", "[", ":", ",", "1", "]", ".", "cpu", "(", ")", ".", "tolist", "(", ")", ")", "\n", "\n", "", "correct", "+=", "pred", ".", "eq", "(", "labels", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "for", "t", ",", "p", ",", "ind", "in", "zip", "(", "labels", ",", "pred", ",", "indices", ")", ":", "\n", "                ", "confusion_matrix", "[", "t", ".", "long", "(", ")", ",", "p", ".", "long", "(", ")", "]", "+=", "1", "\n", "if", "t", "!=", "p", ":", "\n", "                    ", "error_indices", ".", "append", "(", "(", "ind", ",", "p", ")", ")", "\n", "", "", "size", "+=", "pred", ".", "size", "(", "0", ")", "\n", "epoch_loss", ".", "update", "(", "loss", ",", "pred", ".", "size", "(", "0", ")", ")", "\n", "\n", "", "acc", "=", "correct", "/", "size", "\n", "self", ".", "summary_writer", ".", "add_scalars", "(", "\n", "\"test/acc\"", ",", "{", "f\"{name}\"", ":", "acc", "}", ",", "self", ".", "current_epoch", "\n", ")", "\n", "self", ".", "summary_writer", ".", "add_scalars", "(", "\n", "\"test/loss\"", ",", "{", "f\"{name}\"", ":", "epoch_loss", ".", "avg", "}", ",", "self", ".", "current_epoch", "\n", ")", "\n", "self", ".", "logger", ".", "info", "(", "\n", "f\"[Epoch {self.current_epoch} {name}] loss={epoch_loss.avg:.5f}, acc={correct}/{size}({100. * acc:.3f}%)\"", "\n", ")", "\n", "\n", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.CDSAgent.CDSAgent.load_checkpoint": [[746, 811], ["os.path.join", "CDSAgent.CDSAgent.logger.info", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "CDSAgent.CDSAgent._init_memory_bank", "CDSAgent.CDSAgent.logger.info", "CDSAgent.CDSAgent.model.load_state_dict", "CDSAgent.CDSAgent.cls_head.load_state_dict", "CDSAgent.CDSAgent.optim.load_state_dict", "CDSAgent.CDSAgent._load_memory_bank", "CDSAgent.CDSAgent.logger.info", "CDSAgent.CDSAgent.set_attr"], "methods", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.CDSAgent.CDSAgent._init_memory_bank", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.load_state_dict", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.load_state_dict", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.load_state_dict", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.CDSAgent.CDSAgent._load_memory_bank", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.set_attr"], ["", "def", "load_checkpoint", "(", "\n", "self", ",", "\n", "filename", ",", "\n", "checkpoint_dir", "=", "None", ",", "\n", "load_memory_bank", "=", "False", ",", "\n", "load_model", "=", "True", ",", "\n", "load_optim", "=", "False", ",", "\n", "load_epoch", "=", "False", ",", "\n", "load_cls", "=", "True", ",", "\n", ")", ":", "\n", "        ", "checkpoint_dir", "=", "checkpoint_dir", "or", "self", ".", "config", ".", "checkpoint_dir", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "filename", ")", "\n", "try", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "f\"Loading checkpoint '{filename}'\"", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "filename", ",", "map_location", "=", "\"cpu\"", ")", "\n", "\n", "if", "load_epoch", ":", "\n", "                ", "self", ".", "current_epoch", "=", "checkpoint", "[", "\"epoch\"", "]", "\n", "for", "domain_name", "in", "(", "\"source\"", ",", "\"target\"", ")", ":", "\n", "                    ", "self", ".", "set_attr", "(", "\n", "domain_name", ",", "\n", "\"current_iteration\"", ",", "\n", "checkpoint", "[", "f\"iteration_{domain_name}\"", "]", ",", "\n", ")", "\n", "", "self", ".", "current_iteration", "=", "checkpoint", "[", "\"iteration\"", "]", "\n", "self", ".", "current_val_iteration", "=", "checkpoint", "[", "\"val_iteration\"", "]", "\n", "\n", "", "if", "load_model", ":", "\n", "                ", "model_state_dict", "=", "checkpoint", "[", "\"model_state_dict\"", "]", "\n", "self", ".", "model", ".", "load_state_dict", "(", "model_state_dict", ")", "\n", "\n", "", "if", "load_cls", "and", "self", ".", "cls", "and", "\"cls_state_dict\"", "in", "checkpoint", ":", "\n", "                ", "cls_state_dict", "=", "checkpoint", "[", "\"cls_state_dict\"", "]", "\n", "self", ".", "cls_head", ".", "load_state_dict", "(", "cls_state_dict", ")", "\n", "\n", "", "if", "load_optim", ":", "\n", "                ", "optim_state_dict", "=", "checkpoint", "[", "\"optim_state_dict\"", "]", "\n", "self", ".", "optim", ".", "load_state_dict", "(", "optim_state_dict", ")", "\n", "\n", "lr_pretrained", "=", "self", ".", "optim", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", "\n", "lr_config", "=", "self", ".", "config", ".", "optim_params", ".", "learning_rate", "\n", "\n", "# Change learning rate", "\n", "if", "not", "lr_pretrained", "==", "lr_config", ":", "\n", "                    ", "for", "param_group", "in", "self", ".", "optim", ".", "param_groups", ":", "\n", "                        ", "param_group", "[", "\"lr\"", "]", "=", "self", ".", "config", ".", "optim_params", ".", "learning_rate", "\n", "\n", "", "", "", "self", ".", "_init_memory_bank", "(", ")", "\n", "if", "(", "\n", "load_memory_bank", "or", "self", ".", "config", ".", "model_params", ".", "load_memory_bank", "==", "False", "\n", ")", ":", "# load memory_bank", "\n", "                ", "self", ".", "_load_memory_bank", "(", "\n", "{", "\n", "\"source\"", ":", "checkpoint", "[", "\"memory_bank_source\"", "]", ",", "\n", "\"target\"", ":", "checkpoint", "[", "\"memory_bank_target\"", "]", ",", "\n", "}", "\n", ")", "\n", "\n", "", "self", ".", "logger", ".", "info", "(", "\n", "f\"Checkpoint loaded successfully from '{filename}' at (epoch {checkpoint['epoch']}) at (iteration s:{checkpoint['iteration_source']} t:{checkpoint['iteration_target']}) with loss = {checkpoint['loss']}\\nval acc = {checkpoint['val_acc']}\\n\"", "\n", ")", "\n", "\n", "", "except", "OSError", "as", "e", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "f\"Checkpoint doesnt exists: [{filename}]\"", ")", "\n", "raise", "e", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.CDSAgent.CDSAgent.save_checkpoint": [[812, 839], ["pcs.utils.torchutils.save_checkpoint", "CDSAgent.CDSAgent.copy_checkpoint", "CDSAgent.CDSAgent.model.state_dict", "CDSAgent.CDSAgent.optim.state_dict", "CDSAgent.CDSAgent.get_attr", "CDSAgent.CDSAgent.get_attr", "CDSAgent.CDSAgent.get_attr", "CDSAgent.CDSAgent.get_attr", "numpy.array", "numpy.array", "CDSAgent.CDSAgent.cls_head.state_dict"], "methods", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.CDSAgent.CDSAgent.save_checkpoint", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.BaseAgent.BaseAgent.copy_checkpoint", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.get_attr", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.get_attr", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.get_attr", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.get_attr"], ["", "", "def", "save_checkpoint", "(", "self", ",", "filename", "=", "\"checkpoint.pth.tar\"", ")", ":", "\n", "        ", "out_dict", "=", "{", "\n", "\"config\"", ":", "self", ".", "config", ",", "\n", "\"model_state_dict\"", ":", "self", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "\"optim_state_dict\"", ":", "self", ".", "optim", ".", "state_dict", "(", ")", ",", "\n", "\"memory_bank_source\"", ":", "self", ".", "get_attr", "(", "\"source\"", ",", "\"memory_bank_wrapper\"", ")", ",", "\n", "\"memory_bank_target\"", ":", "self", ".", "get_attr", "(", "\"target\"", ",", "\"memory_bank_wrapper\"", ")", ",", "\n", "\"epoch\"", ":", "self", ".", "current_epoch", ",", "\n", "\"iteration\"", ":", "self", ".", "current_iteration", ",", "\n", "\"iteration_source\"", ":", "self", ".", "get_attr", "(", "\"source\"", ",", "\"current_iteration\"", ")", ",", "\n", "\"iteration_target\"", ":", "self", ".", "get_attr", "(", "\"target\"", ",", "\"current_iteration\"", ")", ",", "\n", "\"val_iteration\"", ":", "self", ".", "current_val_iteration", ",", "\n", "\"val_acc\"", ":", "np", ".", "array", "(", "self", ".", "val_acc", ")", ",", "\n", "\"val_metric\"", ":", "self", ".", "current_val_metric", ",", "\n", "\"loss\"", ":", "self", ".", "current_loss", ",", "\n", "\"train_loss\"", ":", "np", ".", "array", "(", "self", ".", "train_loss", ")", ",", "\n", "}", "\n", "if", "self", ".", "cls", ":", "\n", "            ", "out_dict", "[", "\"cls_state_dict\"", "]", "=", "self", ".", "cls_head", ".", "state_dict", "(", ")", "\n", "# best according to source-to-target", "\n", "", "is_best", "=", "(", "\n", "self", ".", "current_val_metric", "==", "self", ".", "best_val_metric", "\n", ")", "or", "not", "self", ".", "config", ".", "validate_freq", "\n", "torchutils", ".", "save_checkpoint", "(", "\n", "out_dict", ",", "is_best", ",", "filename", "=", "filename", ",", "folder", "=", "self", ".", "config", ".", "checkpoint_dir", "\n", ")", "\n", "self", ".", "copy_checkpoint", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.CDSAgent.CDSAgent.compute_train_features": [[842, 875], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "CDSAgent.CDSAgent.model.eval", "CDSAgent.CDSAgent.get_attr", "tqdm.tqdm.tqdm", "enumerate", "tqdm.tqdm.tqdm.close", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "CDSAgent.CDSAgent.set_attr", "CDSAgent.CDSAgent.set_attr", "CDSAgent.CDSAgent.set_attr", "images.to.to.to", "CDSAgent.CDSAgent.model", "torch.normalize", "torch.normalize", "torch.normalize", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat().to.append", "torch.cat().to.append", "torch.cat().to.append", "tqdm.tqdm.tqdm.update", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.get_attr", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.set_attr", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.set_attr", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.set_attr", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.memorybank.MemoryBank.update"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "compute_train_features", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "is_features_computed", ":", "\n", "            ", "return", "\n", "", "else", ":", "\n", "            ", "self", ".", "is_features_computed", "=", "True", "\n", "", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "for", "domain", "in", "(", "\"source\"", ",", "\"target\"", ")", ":", "\n", "            ", "train_loader", "=", "self", ".", "get_attr", "(", "domain", ",", "\"train_init_loader\"", ")", "\n", "features", ",", "y", ",", "idx", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "tqdm_batch", "=", "tqdm", "(", "\n", "total", "=", "len", "(", "train_loader", ")", ",", "desc", "=", "f\"[Compute train features of {domain}]\"", "\n", ")", "\n", "for", "batch_i", ",", "(", "indices", ",", "images", ",", "labels", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "                ", "images", "=", "images", ".", "to", "(", "self", ".", "device", ")", "\n", "feat", "=", "self", ".", "model", "(", "images", ")", "\n", "feat", "=", "F", ".", "normalize", "(", "feat", ",", "dim", "=", "1", ")", "\n", "\n", "features", ".", "append", "(", "feat", ")", "\n", "y", ".", "append", "(", "labels", ")", "\n", "idx", ".", "append", "(", "indices", ")", "\n", "\n", "tqdm_batch", ".", "update", "(", ")", "\n", "", "tqdm_batch", ".", "close", "(", ")", "\n", "\n", "features", "=", "torch", ".", "cat", "(", "features", ")", "\n", "y", "=", "torch", ".", "cat", "(", "y", ")", "\n", "idx", "=", "torch", ".", "cat", "(", "idx", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "set_attr", "(", "domain", ",", "\"train_features\"", ",", "features", ")", "\n", "self", ".", "set_attr", "(", "domain", ",", "\"train_labels\"", ",", "y", ")", "\n", "self", ".", "set_attr", "(", "domain", ",", "\"train_indices\"", ",", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.CDSAgent.CDSAgent.clear_train_features": [[876, 878], ["None"], "methods", ["None"], ["", "", "def", "clear_train_features", "(", "self", ")", ":", "\n", "        ", "self", ".", "is_features_computed", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.CDSAgent.CDSAgent._init_memory_bank": [[881, 905], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "CDSAgent.CDSAgent.get_attr", "pcs.models.MemoryBank", "CDSAgent.CDSAgent.set_attr", "CDSAgent.CDSAgent.loss_fn.module.set_attr", "CDSAgent.CDSAgent.loss_fn.module.set_broadcast", "CDSAgent.CDSAgent.compute_train_features", "CDSAgent.CDSAgent.get_attr", "CDSAgent.CDSAgent.get_attr", "pcs.models.MemoryBank.update", "pcs.models.MemoryBank.as_tensor", "delattr", "delattr"], "methods", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.get_attr", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.set_attr", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.set_attr", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.set_broadcast", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.CDSAgent.CDSAgent.compute_train_features", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.get_attr", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.get_attr", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.memorybank.MemoryBank.update", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.memorybank.MemoryBank.as_tensor"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_init_memory_bank", "(", "self", ")", ":", "\n", "        ", "out_dim", "=", "self", ".", "config", ".", "model_params", ".", "out_dim", "\n", "for", "domain_name", "in", "(", "\"source\"", ",", "\"target\"", ")", ":", "\n", "            ", "data_len", "=", "self", ".", "get_attr", "(", "domain_name", ",", "\"train_len\"", ")", "\n", "memory_bank", "=", "MemoryBank", "(", "data_len", ",", "out_dim", ")", "\n", "if", "self", ".", "config", ".", "model_params", ".", "load_memory_bank", ":", "\n", "                ", "self", ".", "compute_train_features", "(", ")", "\n", "idx", "=", "self", ".", "get_attr", "(", "domain_name", ",", "\"train_indices\"", ")", "\n", "feat", "=", "self", ".", "get_attr", "(", "domain_name", ",", "\"train_features\"", ")", "\n", "memory_bank", ".", "update", "(", "idx", ",", "feat", ")", "\n", "# self.logger.info(", "\n", "#     f\"Initialize memorybank-{domain_name} with pretrained output features\"", "\n", "# )", "\n", "# save space", "\n", "if", "self", ".", "config", ".", "data_params", ".", "name", "in", "[", "\"visda17\"", ",", "\"domainnet\"", "]", ":", "\n", "                    ", "delattr", "(", "self", ",", "f\"train_indices_{domain_name}\"", ")", "\n", "delattr", "(", "self", ",", "f\"train_features_{domain_name}\"", ")", "\n", "\n", "", "", "self", ".", "set_attr", "(", "domain_name", ",", "\"memory_bank_wrapper\"", ",", "memory_bank", ")", "\n", "\n", "self", ".", "loss_fn", ".", "module", ".", "set_attr", "(", "domain_name", ",", "\"data_len\"", ",", "data_len", ")", "\n", "self", ".", "loss_fn", ".", "module", ".", "set_broadcast", "(", "\n", "domain_name", ",", "\"memory_bank\"", ",", "memory_bank", ".", "as_tensor", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.CDSAgent.CDSAgent._update_memory_bank": [[907, 913], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "CDSAgent.CDSAgent.get_attr", "CDSAgent.CDSAgent.update", "CDSAgent.CDSAgent.as_tensor", "CDSAgent.CDSAgent.loss_fn.module.set_broadcast"], "methods", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.get_attr", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.memorybank.MemoryBank.update", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.memorybank.MemoryBank.as_tensor", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.set_broadcast"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_update_memory_bank", "(", "self", ",", "domain_name", ",", "indices", ",", "new_data_memory", ")", ":", "\n", "        ", "memory_bank_wrapper", "=", "self", ".", "get_attr", "(", "domain_name", ",", "\"memory_bank_wrapper\"", ")", "\n", "memory_bank_wrapper", ".", "update", "(", "indices", ",", "new_data_memory", ")", "\n", "updated_bank", "=", "memory_bank_wrapper", ".", "as_tensor", "(", ")", "\n", "self", ".", "loss_fn", ".", "module", ".", "set_broadcast", "(", "domain_name", ",", "\"memory_bank\"", ",", "updated_bank", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.CDSAgent.CDSAgent._load_memory_bank": [[914, 924], ["memory_bank_dict[]._bank.cuda", "CDSAgent.CDSAgent.loss_fn.module.set_broadcast", "CDSAgent.CDSAgent.get_attr"], "methods", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.set_broadcast", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.get_attr"], ["", "def", "_load_memory_bank", "(", "self", ",", "memory_bank_dict", ")", ":", "\n", "        ", "\"\"\"load memory bank from checkpoint\n\n        Args:\n            memory_bank_dict (dict): memory_bank dict of source and target domain\n        \"\"\"", "\n", "for", "domain_name", "in", "(", "\"source\"", ",", "\"target\"", ")", ":", "\n", "            ", "memory_bank", "=", "memory_bank_dict", "[", "domain_name", "]", ".", "_bank", ".", "cuda", "(", ")", "\n", "self", ".", "get_attr", "(", "domain_name", ",", "\"memory_bank_wrapper\"", ")", ".", "_bank", "=", "memory_bank", "\n", "self", ".", "loss_fn", ".", "module", ".", "set_broadcast", "(", "domain_name", ",", "\"memory_bank\"", ",", "memory_bank", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.CDSAgent.CDSAgent._update_cluster_labels": [[927, 978], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "print", "CDSAgent.CDSAgent.loss_fn.module.set_broadcast", "CDSAgent.CDSAgent.loss_fn.module.set_broadcast", "CDSAgent.CDSAgent.get_attr().as_tensor", "pcs.models.torch_kmeans", "CDSAgent.CDSAgent.loss_fn.module.set_broadcast", "CDSAgent.CDSAgent.get_attr"], "methods", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.set_broadcast", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.set_broadcast", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.memorybank.MemoryBank.as_tensor", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.clustering.torch_kmeans", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.set_broadcast", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.get_attr"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_update_cluster_labels", "(", "self", ")", ":", "\n", "        ", "k_list", "=", "self", ".", "config", ".", "k_list", "\n", "for", "clus_type", "in", "self", ".", "config", ".", "loss_params", ".", "clus", ".", "type", ":", "\n", "            ", "cluster_labels_domain", "=", "{", "}", "\n", "cluster_centroids_domain", "=", "{", "}", "\n", "cluster_phi_domain", "=", "{", "}", "\n", "\n", "# clustering for each domain", "\n", "if", "clus_type", "==", "\"each\"", ":", "\n", "                ", "for", "domain_name", "in", "(", "\"source\"", ",", "\"target\"", ")", ":", "\n", "\n", "                    ", "memory_bank_tensor", "=", "self", ".", "get_attr", "(", "\n", "domain_name", ",", "\"memory_bank_wrapper\"", "\n", ")", ".", "as_tensor", "(", ")", "\n", "\n", "# clustering", "\n", "cluster_labels", ",", "cluster_centroids", ",", "cluster_phi", "=", "torch_kmeans", "(", "\n", "k_list", ",", "\n", "memory_bank_tensor", ",", "\n", "seed", "=", "self", ".", "current_epoch", "+", "self", ".", "current_iteration", ",", "\n", ")", "\n", "\n", "cluster_labels_domain", "[", "domain_name", "]", "=", "cluster_labels", "\n", "cluster_centroids_domain", "[", "domain_name", "]", "=", "cluster_centroids", "\n", "cluster_phi_domain", "[", "domain_name", "]", "=", "cluster_phi", "\n", "\n", "", "self", ".", "cluster_each_centroids_domain", "=", "cluster_centroids_domain", "\n", "self", ".", "cluster_each_labels_domain", "=", "cluster_labels_domain", "\n", "self", ".", "cluster_each_phi_domain", "=", "cluster_phi_domain", "\n", "", "else", ":", "\n", "                ", "print", "(", "clus_type", ")", "\n", "raise", "NotImplementedError", "\n", "\n", "# update cluster to losss_fn", "\n", "", "for", "domain_name", "in", "(", "\"source\"", ",", "\"target\"", ")", ":", "\n", "                ", "self", ".", "loss_fn", ".", "module", ".", "set_broadcast", "(", "\n", "domain_name", ",", "\n", "f\"cluster_labels_{clus_type}\"", ",", "\n", "cluster_labels_domain", "[", "domain_name", "]", ",", "\n", ")", "\n", "self", ".", "loss_fn", ".", "module", ".", "set_broadcast", "(", "\n", "domain_name", ",", "\n", "f\"cluster_centroids_{clus_type}\"", ",", "\n", "cluster_centroids_domain", "[", "domain_name", "]", ",", "\n", ")", "\n", "if", "cluster_phi_domain", ":", "\n", "                    ", "self", ".", "loss_fn", ".", "module", ".", "set_broadcast", "(", "\n", "domain_name", ",", "\n", "f\"cluster_phi_{clus_type}\"", ",", "\n", "cluster_phi_domain", "[", "domain_name", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.clustering.Kmeans.__init__": [[18, 37], ["object.__init__", "logging.getLogger"], "methods", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.head.CosineClassifier.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "k_list", ",", "data", ",", "epoch", "=", "0", ",", "init_centroids", "=", "None", ",", "frozen_centroids", "=", "False", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Performs many k-means clustering.\n\n        Args:\n            data (np.array N * dim): data to cluster\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "k_list", "=", "k_list", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "d", "=", "data", ".", "shape", "[", "-", "1", "]", "\n", "self", ".", "init_centroids", "=", "init_centroids", "\n", "self", ".", "frozen_centroids", "=", "frozen_centroids", "\n", "\n", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", "\"Kmeans\"", ")", "\n", "self", ".", "debug", "=", "False", "\n", "self", ".", "epoch", "=", "epoch", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.clustering.Kmeans.compute_clusters": [[38, 77], ["tqdm.tqdm.tqdm", "enumerate", "tqdm.tqdm.tqdm.close", "numpy.stack", "faiss.Kmeans", "faiss.Kmeans.train", "faiss.Kmeans.index.search", "numpy.stack.append", "centroids.append", "tqdm.tqdm.tqdm.update", "len", "I.squeeze"], "methods", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.agents.BaseAgent.BaseAgent.train", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.memorybank.MemoryBank.update"], ["", "def", "compute_clusters", "(", "self", ")", ":", "\n", "        ", "\"\"\"compute cluster\n\n        Returns:\n            torch.tensor, list: clus_labels, centroids\n        \"\"\"", "\n", "data", "=", "self", ".", "data", "\n", "labels", "=", "[", "]", "\n", "centroids", "=", "[", "]", "\n", "\n", "tqdm_batch", "=", "tqdm", "(", "total", "=", "len", "(", "self", ".", "k_list", ")", ",", "desc", "=", "\"[K-means]\"", ")", "\n", "for", "k_idx", ",", "each_k", "in", "enumerate", "(", "self", ".", "k_list", ")", ":", "\n", "            ", "seed", "=", "k_idx", "*", "self", ".", "epoch", "+", "DEFAULT_KMEANS_SEED", "\n", "kmeans", "=", "faiss_Kmeans", "(", "\n", "self", ".", "d", ",", "\n", "each_k", ",", "\n", "niter", "=", "40", ",", "\n", "verbose", "=", "False", ",", "\n", "spherical", "=", "True", ",", "\n", "min_points_per_centroid", "=", "1", ",", "\n", "max_points_per_centroid", "=", "10000", ",", "\n", "gpu", "=", "True", ",", "\n", "seed", "=", "seed", ",", "\n", "frozen_centroids", "=", "self", ".", "frozen_centroids", ",", "\n", ")", "\n", "\n", "kmeans", ".", "train", "(", "data", ",", "init_centroids", "=", "self", ".", "init_centroids", ")", "\n", "\n", "_", ",", "I", "=", "kmeans", ".", "index", ".", "search", "(", "data", ",", "1", ")", "\n", "labels", ".", "append", "(", "I", ".", "squeeze", "(", "1", ")", ")", "\n", "C", "=", "kmeans", ".", "centroids", "\n", "centroids", ".", "append", "(", "C", ")", "\n", "\n", "tqdm_batch", ".", "update", "(", ")", "\n", "", "tqdm_batch", ".", "close", "(", ")", "\n", "\n", "labels", "=", "np", ".", "stack", "(", "labels", ",", "axis", "=", "0", ")", "\n", "\n", "return", "labels", ",", "centroids", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.clustering.torch_kmeans": [[79, 100], ["clustering.Kmeans", "faiss.Kmeans.compute_clusters", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "range", "init_centroids.cpu().numpy.cpu().numpy", "data.cpu().detach().numpy", "centroids.append", "len", "clus_phi.append", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "clustering.compute_variance", "init_centroids.cpu().numpy.cpu", "data.cpu().detach", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "data.cpu"], "function", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.clustering.Kmeans.compute_clusters", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.clustering.compute_variance"], ["", "", "def", "torch_kmeans", "(", "k_list", ",", "data", ",", "init_centroids", "=", "None", ",", "seed", "=", "0", ",", "frozen", "=", "False", ")", ":", "\n", "    ", "if", "init_centroids", "is", "not", "None", ":", "\n", "        ", "init_centroids", "=", "init_centroids", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "km", "=", "Kmeans", "(", "\n", "k_list", ",", "\n", "data", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "\n", "epoch", "=", "seed", ",", "\n", "frozen_centroids", "=", "frozen", ",", "\n", "init_centroids", "=", "init_centroids", ",", "\n", ")", "\n", "clus_labels", ",", "centroids_npy", "=", "km", ".", "compute_clusters", "(", ")", "\n", "clus_labels", "=", "torch", ".", "from_numpy", "(", "clus_labels", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "centroids", "=", "[", "]", "\n", "for", "c", "in", "centroids_npy", ":", "\n", "        ", "centroids", ".", "append", "(", "torch", ".", "from_numpy", "(", "c", ")", ".", "cuda", "(", ")", ")", "\n", "# compute phi", "\n", "", "clus_phi", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "k_list", ")", ")", ":", "\n", "        ", "clus_phi", ".", "append", "(", "compute_variance", "(", "data", ",", "clus_labels", "[", "i", "]", ",", "centroids", "[", "i", "]", ")", ")", "\n", "\n", "", "return", "clus_labels", ",", "centroids", ",", "clus_phi", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.clustering.compute_variance": [[105, 146], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.zeros", "torch.zeros", "torch.zeros", "range", "len", "len", "print", "range", "print", "print", "torch.sum", "torch.sum", "torch.sum", "torch.norm", "torch.norm", "torch.norm", "numpy.log", "phis[].item"], "function", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "compute_variance", "(", "\n", "data", ",", "cluster_labels", ",", "centroids", ",", "alpha", "=", "10", ",", "debug", "=", "False", ",", "num_class", "=", "None", "\n", ")", ":", "\n", "    ", "\"\"\"compute variance for proto\n\n    Args:\n        data (torch.Tensor): data with shape [n, dim] \n        cluster_labels (torch.Tensor): cluster labels of [n]\n        centroids (torch.Tensor): cluster centroids [k, ndim]\n        alpha (int, optional): Defaults to 10.\n        debug (bool, optional): Defaults to False.\n\n    Returns:\n        [type]: [description]\n    \"\"\"", "\n", "\n", "k", "=", "len", "(", "centroids", ")", "if", "num_class", "is", "None", "else", "num_class", "\n", "phis", "=", "torch", ".", "zeros", "(", "k", ")", "\n", "for", "c", "in", "range", "(", "k", ")", ":", "\n", "        ", "cluster_points", "=", "data", "[", "cluster_labels", "==", "c", "]", "\n", "c_len", "=", "len", "(", "cluster_points", ")", "\n", "if", "c_len", "==", "0", ":", "\n", "            ", "phis", "[", "c", "]", "=", "-", "1", "\n", "", "elif", "c_len", "==", "1", ":", "\n", "            ", "phis", "[", "c", "]", "=", "0.05", "\n", "", "else", ":", "\n", "            ", "phis", "[", "c", "]", "=", "torch", ".", "sum", "(", "torch", ".", "norm", "(", "cluster_points", "-", "centroids", "[", "c", "]", ",", "dim", "=", "1", ")", ")", "/", "(", "\n", "c_len", "*", "np", ".", "log", "(", "c_len", "+", "alpha", ")", "\n", ")", "\n", "if", "phis", "[", "c", "]", "<", "0.05", ":", "\n", "                ", "phis", "[", "c", "]", "=", "0.05", "\n", "\n", "", "", "", "if", "debug", ":", "\n", "        ", "print", "(", "\"size-phi:\"", ",", "end", "=", "\" \"", ")", "\n", "for", "i", "in", "range", "(", "k", ")", ":", "\n", "            ", "size", "=", "(", "cluster_labels", "==", "i", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "print", "(", "f\"{size}[phi={phis[i].item():.3f}]\"", ",", "end", "=", "\", \"", ")", "\n", "", "print", "(", "\"\\n\"", ")", "\n", "\n", "", "return", "phis", "\n", "", ""]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.memorybank.MemoryBank.__init__": [[11, 20], ["memorybank.MemoryBank._create"], "methods", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.memorybank.MemoryBank._create"], ["def", "__init__", "(", "self", ",", "size", ",", "dim", ")", ":", "\n", "        ", "\"\"\"generate random memory bank\n\n        Args:\n            size (int): length of the memory bank\n            dim (int): dimension of the memory bank features\n            device_ids (list): gpu lists\n        \"\"\"", "\n", "self", ".", "_bank", "=", "self", ".", "_create", "(", "size", ",", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.memorybank.MemoryBank._create": [[21, 31], ["torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize.detach", "numpy.sqrt", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device"], "methods", ["None"], ["", "def", "_create", "(", "self", ",", "size", ",", "dim", ")", ":", "\n", "        ", "\"\"\"generate randomized features\n        \"\"\"", "\n", "# initialize random weights", "\n", "mb_init", "=", "torch", ".", "rand", "(", "size", ",", "dim", ",", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", ")", "\n", "std_dev", "=", "1.0", "/", "np", ".", "sqrt", "(", "dim", "/", "3", ")", "\n", "mb_init", "=", "mb_init", "*", "(", "2", "*", "std_dev", ")", "-", "std_dev", "\n", "# L2 normalize so that the norm is 1", "\n", "mb_init", "=", "F", ".", "normalize", "(", "mb_init", ")", "\n", "return", "mb_init", ".", "detach", "(", ")", "# detach so its not trainable", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.memorybank.MemoryBank.as_tensor": [[32, 34], ["None"], "methods", ["None"], ["", "def", "as_tensor", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_bank", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.memorybank.MemoryBank.at_idxs": [[35, 37], ["torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select"], "methods", ["None"], ["", "def", "at_idxs", "(", "self", ",", "idxs", ")", ":", "\n", "        ", "return", "torch", ".", "index_select", "(", "self", ".", "_bank", ",", "0", ",", "idxs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.memorybank.MemoryBank.update": [[38, 44], ["data_memory.detach.detach.size", "data_memory.detach.detach.detach", "indices.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "memorybank.MemoryBank._bank.scatter_", "indices.unsqueeze().repeat.unsqueeze().repeat.unsqueeze"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "indices", ",", "data_memory", ")", ":", "\n", "        ", "data_dim", "=", "data_memory", ".", "size", "(", "1", ")", "\n", "data_memory", "=", "data_memory", ".", "detach", "(", ")", "\n", "indices", "=", "indices", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "data_dim", ")", "\n", "\n", "self", ".", "_bank", "=", "self", ".", "_bank", ".", "scatter_", "(", "0", ",", "indices", ",", "data_memory", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.__init__": [[13, 30], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.head.CosineClassifier.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "gpu_devices", ")", ":", "\n", "        ", "super", "(", "SSDALossModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "gpu_devices", "=", "gpu_devices", "\n", "\n", "self", ".", "k", "=", "config", ".", "loss_params", ".", "k", "\n", "self", ".", "t", "=", "config", ".", "loss_params", ".", "temp", "\n", "self", ".", "m", "=", "config", ".", "loss_params", ".", "m", "\n", "self", ".", "loss_w", "=", "self", ".", "config", ".", "loss_params", ".", "weight", "\n", "self", ".", "loss", "=", "self", ".", "config", ".", "loss_params", ".", "loss", "\n", "\n", "self", ".", "indices", "=", "None", "\n", "self", ".", "outputs", "=", "None", "\n", "self", ".", "indices_random", "=", "None", "\n", "self", ".", "batch_size", "=", "None", "\n", "\n", "self", ".", "broadcast_name", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.get_attr": [[31, 33], ["getattr"], "methods", ["None"], ["", "def", "get_attr", "(", "self", ",", "domain", ",", "name", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "name", "+", "\"_\"", "+", "domain", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.set_attr": [[34, 37], ["setattr", "ssda.SSDALossModule.get_attr"], "methods", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.get_attr"], ["", "def", "set_attr", "(", "self", ",", "domain", ",", "name", ",", "value", ")", ":", "\n", "        ", "setattr", "(", "self", ",", "name", "+", "\"_\"", "+", "domain", ",", "value", ")", "\n", "return", "self", ".", "get_attr", "(", "domain", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.set_broadcast": [[38, 49], ["isinstance", "ssda.SSDALossModule.set_attr", "ssda.SSDALossModule.set_attr", "ssda.SSDALossModule.broadcast_name.append", "torch.cuda.comm.broadcast.copy", "torch.cuda.comm.broadcast.copy", "torch.cuda.comm.broadcast.copy", "torch.cuda.comm.broadcast.copy", "range", "torch.cuda.comm.broadcast", "torch.cuda.comm.broadcast", "torch.cuda.comm.broadcast", "torch.cuda.comm.broadcast", "torch.cuda.comm.broadcast", "torch.cuda.comm.broadcast", "torch.cuda.comm.broadcast", "torch.cuda.comm.broadcast", "torch.cuda.comm.broadcast", "torch.cuda.comm.broadcast", "torch.cuda.comm.broadcast", "torch.cuda.comm.broadcast", "torch.cuda.comm.broadcast", "torch.cuda.comm.broadcast", "torch.cuda.comm.broadcast", "torch.cuda.comm.broadcast", "len", "torch.cuda.comm.broadcast", "torch.cuda.comm.broadcast", "torch.cuda.comm.broadcast", "torch.cuda.comm.broadcast", "torch.cuda.comm.broadcast", "torch.cuda.comm.broadcast", "torch.cuda.comm.broadcast", "torch.cuda.comm.broadcast", "torch.cuda.comm.broadcast", "torch.cuda.comm.broadcast", "torch.cuda.comm.broadcast", "torch.cuda.comm.broadcast", "torch.cuda.comm.broadcast", "torch.cuda.comm.broadcast", "torch.cuda.comm.broadcast", "torch.cuda.comm.broadcast"], "methods", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.set_attr", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.set_attr"], ["", "def", "set_broadcast", "(", "self", ",", "domain_name", ",", "name", ",", "value", ",", "comm", "=", "False", ")", ":", "\n", "        ", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "            ", "value", "=", "value", ".", "copy", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "value", ")", ")", ":", "\n", "                ", "value", "[", "i", "]", "=", "torch", ".", "cuda", ".", "comm", ".", "broadcast", "(", "value", "[", "i", "]", ",", "self", ".", "gpu_devices", ")", "\n", "", "", "else", ":", "\n", "            ", "value", "=", "torch", ".", "cuda", ".", "comm", ".", "broadcast", "(", "value", ",", "self", ".", "gpu_devices", ")", "\n", "\n", "", "self", ".", "set_attr", "(", "domain_name", ",", "f\"{name}_broadcast\"", ",", "value", ")", "\n", "self", ".", "set_attr", "(", "domain_name", ",", "name", ",", "None", ")", "\n", "self", ".", "broadcast_name", ".", "append", "(", "(", "domain_name", ",", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.get_broadcast": [[50, 61], ["ssda.SSDALossModule.get_attr", "isinstance", "ssda.SSDALossModule.set_attr", "ssda.SSDALossModule.set_attr", "len", "tmp.append"], "methods", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.get_attr", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.set_attr", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.set_attr"], ["", "def", "get_broadcast", "(", "self", ",", "domain_name", ",", "name", ",", "gpu_idx", ")", ":", "\n", "        ", "broadcast", "=", "self", ".", "get_attr", "(", "domain_name", ",", "f\"{name}_broadcast\"", ")", "\n", "if", "len", "(", "broadcast", ")", "==", "0", "or", "isinstance", "(", "broadcast", "[", "0", "]", ",", "list", ")", ":", "\n", "            ", "tmp", "=", "[", "]", "\n", "for", "x", "in", "broadcast", ":", "\n", "                ", "tmp", ".", "append", "(", "x", "[", "gpu_idx", "]", ")", "\n", "", "self", ".", "set_attr", "(", "domain_name", ",", "name", ",", "tmp", ")", "\n", "", "else", ":", "\n", "            ", "tmp", "=", "broadcast", "[", "gpu_idx", "]", "\n", "self", ".", "set_attr", "(", "domain_name", ",", "name", ",", "tmp", ")", "\n", "", "return", "tmp", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule._identify_gpu": [[62, 65], ["ssda.SSDALossModule.get_broadcast"], "methods", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.get_broadcast"], ["", "def", "_identify_gpu", "(", "self", ",", "gpu_idx", ")", ":", "\n", "        ", "for", "domain_name", ",", "name", "in", "self", ".", "broadcast_name", ":", "\n", "            ", "self", ".", "get_broadcast", "(", "domain_name", ",", "name", ",", "gpu_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.updated_new_data_memory": [[67, 83], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "ssda.SSDALossModule.get_attr", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize"], "methods", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.get_attr"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "updated_new_data_memory", "(", "self", ",", "domain", ",", "indices", ",", "outputs", ")", ":", "\n", "        ", "\"\"\"Compute new memory bank in indices by momentum\n\n        Args:\n            indices: indices of memory bank features to update\n            outputs: output of features\n            domain (str): 'source', 'target'\n        \"\"\"", "\n", "memory_bank", "=", "self", ".", "get_attr", "(", "domain", ",", "\"memory_bank\"", ")", "\n", "data_memory", "=", "torch", ".", "index_select", "(", "memory_bank", ",", "0", ",", "indices", ")", "\n", "\n", "outputs", "=", "F", ".", "normalize", "(", "outputs", ",", "dim", "=", "1", ")", "\n", "m", "=", "self", ".", "m", "\n", "new_data_memory", "=", "data_memory", "*", "m", "+", "(", "1", "-", "m", ")", "*", "outputs", "\n", "return", "F", ".", "normalize", "(", "new_data_memory", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule._get_Z": [[84, 97], ["ssda.SSDALossModule.get_attr", "pcs.utils.torchutils.contrastive_sim_z"], "methods", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.get_attr", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.contrastive_sim_z"], ["", "def", "_get_Z", "(", "self", ",", "domain", ",", "vec", ",", "t", ")", ":", "\n", "        ", "\"\"\"Get denominator in ID\n\n        Args:\n            vec: output features [batch_size, dim]\n            domain (str): 'source', 'target'\n\n        Returns:\n            [batch_size] denominator in ID\n        \"\"\"", "\n", "bank", "=", "self", ".", "get_attr", "(", "domain", ",", "\"memory_bank\"", ")", "# [data_len]", "\n", "Z", "=", "torchutils", ".", "contrastive_sim_z", "(", "vec", ",", "bank", ",", "tao", "=", "t", ")", "\n", "return", "Z", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule._get_all_dot_products": [[98, 111], ["ssda.SSDALossModule.get_attr", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "len", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "vec.size"], "methods", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.get_attr"], ["", "def", "_get_all_dot_products", "(", "self", ",", "domain", ",", "vec", ")", ":", "\n", "        ", "\"\"\"get dot product with all vectors in memory bank\n\n        Args:\n            vec: [bs, dim]\n            domain (str): 'source', 'target'\n\n        Returns:\n            [bs, data_len]\n        \"\"\"", "\n", "assert", "len", "(", "vec", ".", "size", "(", ")", ")", "==", "2", "\n", "bank", "=", "self", ".", "get_attr", "(", "domain", ",", "\"memory_bank\"", ")", "\n", "return", "torch", ".", "matmul", "(", "vec", ",", "torch", ".", "transpose", "(", "bank", ",", "1", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule._compute_I2C_loss": [[112, 151], ["torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "len", "ssda.SSDALossModule.get_attr", "enumerate", "pcs.utils.reverse_domain", "pcs.utils.torchutils.contrastive_sim", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.sum.unsqueeze", "torch.sum.unsqueeze", "torch.sum.unsqueeze", "torch.sum.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.get_attr", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.reverse_domain", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.contrastive_sim"], ["", "def", "_compute_I2C_loss", "(", "self", ",", "domain", ",", "loss_type", ",", "t", "=", "0.05", ")", ":", "\n", "        ", "\"\"\"Loss CrossSelf in essay (Cross-domain Instance-Prototype SSL)\n\n        Args:\n            domain (str): 'source', 'target'\n            loss_type (str, optional): 'each', 'all', 'src', 'tgt'. Defaults to \"zero\".\n        \"\"\"", "\n", "assert", "loss_type", "in", "[", "\"cross\"", ",", "\"tgt\"", ",", "\"src\"", "]", "\n", "loss", "=", "torch", ".", "Tensor", "(", "[", "0", "]", ")", ".", "cuda", "(", ")", "\n", "if", "(", "loss_type", "==", "\"tgt\"", "and", "domain", "==", "\"source\"", ")", "or", "(", "\n", "loss_type", "==", "\"src\"", "and", "domain", "==", "\"target\"", "\n", ")", ":", "\n", "            ", "return", "loss", "\n", "\n", "", "clus", "=", "\"each\"", "\n", "\n", "k_list", "=", "self", ".", "config", ".", "k_list", "\n", "n_kmeans", "=", "len", "(", "k_list", ")", "\n", "\n", "cluster_centroids", "=", "self", ".", "get_attr", "(", "\n", "reverse_domain", "(", "domain", ")", ",", "f\"cluster_centroids_{clus}\"", "\n", ")", "\n", "outputs", "=", "self", ".", "outputs", "\n", "\n", "for", "each_k_idx", ",", "k", "in", "enumerate", "(", "k_list", ")", ":", "\n", "            ", "centroids", "=", "cluster_centroids", "[", "each_k_idx", "]", "\n", "phi", "=", "t", "\n", "\n", "p", "=", "torchutils", ".", "contrastive_sim", "(", "outputs", ",", "centroids", ",", "tao", "=", "phi", ")", "\n", "z", "=", "torch", ".", "sum", "(", "p", ",", "dim", "=", "-", "1", ")", "# [bs]", "\n", "p", "=", "p", "/", "z", ".", "unsqueeze", "(", "1", ")", "# [bs, k]", "\n", "\n", "cur_loss", "=", "-", "torch", ".", "sum", "(", "p", "*", "torch", ".", "log", "(", "p", ")", ")", "/", "self", ".", "batch_size", "\n", "\n", "loss", "=", "loss", "+", "cur_loss", "\n", "\n", "", "loss", "/=", "n_kmeans", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule._compute_proto_loss": [[152, 211], ["torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "ssda.SSDALossModule.get_attr", "ssda.SSDALossModule.get_attr", "ssda.SSDALossModule.get_attr", "enumerate", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "pcs.utils.torchutils.contrastive_sim_z", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "loss_type.startswith", "loss_type.startswith", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "phis.unsqueeze().repeat", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "p.size", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "phis.unsqueeze", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.get_attr", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.get_attr", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.get_attr", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.contrastive_sim_z"], ["", "def", "_compute_proto_loss", "(", "self", ",", "domain", ",", "loss_type", ",", "t", "=", "0.05", ")", ":", "\n", "        ", "\"\"\"Loss PC in essay (part of In-domain Prototypical Contrastive Learning)\n\n        Args:\n            domain (str): 'source', 'target'\n            loss_type (str, optional): 'each', 'all', 'src', 'tgt'. Defaults to \"zero\".\n        \"\"\"", "\n", "loss", "=", "torch", ".", "Tensor", "(", "[", "0", "]", ")", ".", "cuda", "(", ")", "\n", "if", "(", "loss_type", ".", "startswith", "(", "\"src\"", ")", "and", "domain", "==", "\"target\"", ")", "or", "(", "\n", "loss_type", ".", "startswith", "(", "\"tgt\"", ")", "and", "domain", "==", "\"source\"", "\n", ")", ":", "\n", "            ", "return", "loss", "\n", "\n", "", "is_fix", "=", "\"fix\"", "in", "loss_type", "\n", "clus", "=", "\"each\"", "\n", "n_kmeans", "=", "self", ".", "config", ".", "loss_params", ".", "clus", ".", "n_kmeans", "\n", "k_list", "=", "self", ".", "config", ".", "k_list", "\n", "c_domain", "=", "domain", "\n", "\n", "cluster_labels", "=", "self", ".", "get_attr", "(", "domain", ",", "f\"cluster_labels_{clus}\"", ")", "\n", "cluster_centroids", "=", "self", ".", "get_attr", "(", "c_domain", ",", "f\"cluster_centroids_{clus}\"", ")", "\n", "cluster_phi", "=", "self", ".", "get_attr", "(", "c_domain", ",", "f\"cluster_phi_{clus}\"", ")", "\n", "\n", "for", "each_k_idx", ",", "k", "in", "enumerate", "(", "k_list", ")", ":", "\n", "# clus info", "\n", "            ", "labels", "=", "cluster_labels", "[", "each_k_idx", "]", "\n", "centroids", "=", "cluster_centroids", "[", "each_k_idx", "]", "\n", "phis", "=", "cluster_phi", "[", "each_k_idx", "]", "\n", "\n", "# batch info", "\n", "batch_labels", "=", "labels", "[", "self", ".", "indices", "]", "\n", "outputs", "=", "self", ".", "outputs", "\n", "batch_centroids", "=", "centroids", "[", "batch_labels", "]", "\n", "if", "loss_type", "==", "\"fix\"", ":", "\n", "                ", "batch_phis", "=", "t", "\n", "", "else", ":", "\n", "                ", "batch_phis", "=", "phis", "[", "batch_labels", "]", "\n", "\n", "# calculate similarity", "\n", "", "dot_exp", "=", "torch", ".", "exp", "(", "\n", "torch", ".", "sum", "(", "outputs", "*", "batch_centroids", ",", "dim", "=", "-", "1", ")", "/", "batch_phis", "\n", ")", "\n", "\n", "assert", "not", "torch", ".", "isnan", "(", "outputs", ")", ".", "any", "(", ")", "\n", "assert", "not", "torch", ".", "isnan", "(", "batch_centroids", ")", ".", "any", "(", ")", "\n", "assert", "not", "torch", ".", "isnan", "(", "dot_exp", ")", ".", "any", "(", ")", "\n", "\n", "# calculate Z", "\n", "all_phi", "=", "t", "if", "is_fix", "else", "phis", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "outputs", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "z", "=", "torchutils", ".", "contrastive_sim_z", "(", "outputs", ",", "centroids", ",", "tao", "=", "all_phi", ")", "\n", "\n", "# calculate loss", "\n", "p", "=", "dot_exp", "/", "z", "\n", "\n", "loss", "=", "loss", "-", "torch", ".", "sum", "(", "torch", ".", "log", "(", "p", ")", ")", "/", "p", ".", "size", "(", "0", ")", "\n", "\n", "", "loss", "/=", "n_kmeans", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule._compute_CD_loss": [[212, 241], ["ssda.SSDALossModule.get_attr", "pcs.utils.torchutils.contrastive_sim", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "pcs.utils.reverse_domain", "int", "random.sample", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.sum.unsqueeze", "torch.sum.unsqueeze", "torch.sum.unsqueeze", "torch.sum.unsqueeze", "p.max", "list", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "len", "range", "len", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.get_attr", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.contrastive_sim", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.reverse_domain"], ["", "def", "_compute_CD_loss", "(", "self", ",", "domain", ",", "loss_type", ",", "t", "=", "0.05", ")", ":", "\n", "        ", "\"\"\"Loss CDS in essay arXiv:2003.08264v1, not used in essay\n\n        Args:\n            domain (str): different domain from current one\n            loss_type (str): 'cross'\n\n        Returns:\n            CD loss\n        \"\"\"", "\n", "assert", "loss_type", "in", "[", "\"cross\"", "]", "\n", "\n", "bank", "=", "self", ".", "get_attr", "(", "reverse_domain", "(", "domain", ")", ",", "\"memory_bank\"", ")", "\n", "if", "self", ".", "config", ".", "loss_params", ".", "sample_ratio", ":", "\n", "            ", "num_sample", "=", "int", "(", "self", ".", "config", ".", "loss_params", ".", "sample_ratio", "*", "len", "(", "bank", ")", ")", "\n", "sampled_index", "=", "random", ".", "sample", "(", "list", "(", "range", "(", "len", "(", "bank", ")", ")", ")", ",", "num_sample", ")", "\n", "sampled_index", "=", "torch", ".", "tensor", "(", "sampled_index", ")", "\n", "bank", "=", "bank", "[", "sampled_index", "]", "\n", "\n", "# [bs, data_len], numerator of P_{i',i}^{s->t}", "\n", "", "prods", "=", "torchutils", ".", "contrastive_sim", "(", "self", ".", "outputs", ",", "bank", ",", "tao", "=", "t", ")", "\n", "# [bs]", "\n", "z", "=", "torch", ".", "sum", "(", "prods", ",", "dim", "=", "-", "1", ")", "\n", "# [bs, data_len] P_{i',i}^{s->t}", "\n", "p", "=", "prods", "/", "z", ".", "unsqueeze", "(", "1", ")", "\n", "aux", "=", "p", ".", "max", "(", "dim", "=", "1", ")", "[", "1", "]", "\n", "# double sum", "\n", "loss", "=", "-", "torch", ".", "sum", "(", "p", "*", "torch", ".", "log", "(", "p", ")", ")", "/", "self", ".", "batch_size", "\n", "return", "loss", "[", "None", ",", "]", ",", "aux", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule._compute_ID_loss": [[242, 294], ["torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "ssda.SSDALossModule.get_attr", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "pcs.utils.torchutils.contrastive_sim_z", "int", "random.sample", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "ssda.SSDALossModule.get_attr", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "list", "pcs.utils.reverse_domain", "pcs.utils.torchutils.contrastive_sim_z", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "len", "range", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "len"], "methods", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.get_attr", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.contrastive_sim_z", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.get_attr", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.utils.reverse_domain", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.contrastive_sim_z"], ["", "def", "_compute_ID_loss", "(", "self", ",", "domain", ",", "loss_type", ",", "t", "=", "0.05", ")", ":", "\n", "        ", "\"\"\"Loss ID (Instance Discrimination), not used in essay.\n\n        Args:\n            domain (str): 'source', 'target'\n            loss_type (str): 'each', 'all'\n\n        Returns:\n            ID loss\n        \"\"\"", "\n", "assert", "loss_type", "in", "[", "\"all\"", ",", "\"each\"", ",", "\"src\"", ",", "\"tgt\"", "]", "\n", "\n", "loss", "=", "torch", ".", "Tensor", "(", "[", "0", "]", ")", ".", "cuda", "(", ")", "\n", "if", "loss_type", "==", "\"src\"", ":", "\n", "            ", "if", "domain", "==", "\"target\"", ":", "\n", "                ", "return", "loss", "\n", "", "else", ":", "\n", "                ", "clus", "=", "\"each\"", "\n", "", "", "if", "loss_type", "==", "\"tgt\"", ":", "\n", "            ", "if", "domain", "==", "\"source\"", ":", "\n", "                ", "return", "loss", "\n", "", "else", ":", "\n", "                ", "clus", "=", "\"each\"", "\n", "\n", "", "", "bank", "=", "self", ".", "get_attr", "(", "domain", ",", "\"memory_bank\"", ")", "\n", "\n", "memory_vecs", "=", "torch", ".", "index_select", "(", "bank", ",", "0", ",", "self", ".", "indices", ")", "\n", "prods", "=", "torch", ".", "sum", "(", "memory_vecs", "*", "self", ".", "outputs", ",", "dim", "=", "-", "1", ")", "\n", "# [bs], numerator of P_i^s", "\n", "prods_exp", "=", "torch", ".", "exp", "(", "prods", "/", "t", ")", "\n", "# [bs], denominator of P_i^s", "\n", "\n", "if", "self", ".", "config", ".", "loss_params", ".", "sample_ratio", ":", "\n", "            ", "num_sample", "=", "int", "(", "self", ".", "config", ".", "loss_params", ".", "sample_ratio", "*", "len", "(", "bank", ")", ")", "\n", "sampled_index", "=", "random", ".", "sample", "(", "list", "(", "range", "(", "len", "(", "bank", ")", ")", ")", ",", "num_sample", ")", "\n", "sampled_index", "=", "torch", ".", "tensor", "(", "sampled_index", ")", "\n", "sampled_bank", "=", "bank", "[", "sampled_index", "]", "\n", "ratio_inv", "=", "1", "/", "self", ".", "config", ".", "loss_params", ".", "sample_ratio", "\n", "", "else", ":", "\n", "            ", "sampled_bank", "=", "bank", "\n", "ratio_inv", "=", "1", "\n", "\n", "", "Z", "=", "torchutils", ".", "contrastive_sim_z", "(", "self", ".", "outputs", ",", "sampled_bank", ",", "tao", "=", "t", ")", "\n", "Z", "=", "ratio_inv", "*", "Z", "\n", "if", "loss_type", "==", "\"all\"", ":", "\n", "            ", "bank_rev", "=", "self", ".", "get_attr", "(", "reverse_domain", "(", "domain", ")", ",", "\"memory_bank\"", ")", "\n", "Z", "=", "Z", "+", "torchutils", ".", "contrastive_sim_z", "(", "self", ".", "outputs", ",", "bank_rev", ",", "tao", "=", "t", ")", "\n", "# [bs], P_i^s", "\n", "", "p", "=", "prods_exp", "/", "Z", "\n", "loss", "=", "-", "torch", ".", "sum", "(", "torch", ".", "log", "(", "p", ")", ")", "/", "self", ".", "batch_size", "\n", "return", "loss", "[", "\n", "None", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule._compute_loss": [[296, 312], ["loss_type.split", "getattr", "getattr.", "getattr.", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "print", "print", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf"], "methods", ["None"], ["", "def", "_compute_loss", "(", "self", ",", "domain", ",", "loss_type", "=", "None", ",", "t", "=", "0.05", ")", ":", "\n", "        ", "loss_name", ",", "loss_args", "=", "loss_type", ".", "split", "(", "\"-\"", ")", "\n", "loss_fn", "=", "getattr", "(", "self", ",", "f\"_compute_{loss_name}_loss\"", ")", "\n", "aux", "=", "None", "\n", "if", "loss_name", "in", "[", "\"CD\"", "]", ":", "\n", "            ", "loss", ",", "aux", "=", "loss_fn", "(", "domain", ",", "loss_type", "=", "loss_args", ",", "t", "=", "t", ")", "\n", "", "else", ":", "\n", "            ", "loss", "=", "loss_fn", "(", "domain", ",", "loss_type", "=", "loss_args", ",", "t", "=", "t", ")", "\n", "\n", "", "assert", "not", "torch", ".", "isinf", "(", "loss", ")", ".", "any", "(", ")", "\n", "if", "loss", "<", "0", ":", "\n", "            ", "print", "(", "loss", ")", "\n", "print", "(", "loss_name", ")", "\n", "assert", "loss", ">=", "0", "\n", "\n", "", "return", "loss", ",", "aux", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.forward": [[313, 338], ["indices.detach", "ssda.SSDALossModule.indices.size", "ssda.SSDALossModule._identify_gpu", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "enumerate", "ssda.SSDALossModule.updated_new_data_memory", "loss_part.append", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "ssda.SSDALossModule._compute_loss", "ls.split", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule._identify_gpu", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule.updated_new_data_memory", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.SSDALossModule._compute_loss"], ["", "def", "forward", "(", "self", ",", "indices", ",", "outputs", ",", "domain", ",", "gpu_idx", ")", ":", "\n", "        ", "self", ".", "indices", "=", "indices", ".", "detach", "(", ")", "\n", "self", ".", "batch_size", "=", "self", ".", "indices", ".", "size", "(", "0", ")", "\n", "self", ".", "outputs", "=", "outputs", "\n", "self", ".", "_identify_gpu", "(", "gpu_idx", ")", "\n", "\n", "loss_part", "=", "[", "]", "\n", "loss", "=", "torch", ".", "zeros", "(", "1", ")", ".", "cuda", "(", ")", "\n", "aux_list", "=", "{", "}", "\n", "for", "i", ",", "ls", "in", "enumerate", "(", "self", ".", "loss", ")", ":", "\n", "            ", "if", "(", "\n", "self", ".", "epoch", "<=", "self", ".", "config", ".", "loss_params", ".", "start", "[", "i", "]", "\n", "or", "self", ".", "epoch", ">=", "self", ".", "config", ".", "loss_params", ".", "end", "[", "i", "]", "\n", "or", "ls", ".", "split", "(", "\"-\"", ")", "[", "0", "]", "in", "[", "\"cls\"", ",", "\"tgt\"", ",", "\"semi\"", ",", "\"norm\"", "]", "\n", ")", ":", "\n", "                ", "l", "=", "torch", ".", "zeros", "(", "1", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "                ", "l", ",", "aux", "=", "self", ".", "_compute_loss", "(", "domain", ",", "ls", ",", "self", ".", "t", "[", "i", "]", ")", "\n", "aux_list", "[", "ls", "]", "=", "aux", "\n", "", "loss_part", ".", "append", "(", "l", ")", "\n", "loss", "=", "loss", "+", "l", "\n", "\n", "", "new_data_memory", "=", "self", ".", "updated_new_data_memory", "(", "domain", ",", "indices", ",", "outputs", ")", "\n", "\n", "return", "loss", ",", "new_data_memory", ",", "loss_part", ",", "aux_list", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.loss_info": [[340, 351], ["torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "pcs.utils.torchutils.contrastive_sim_z", "enumerate", "len", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "all", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "len", "pcs.utils.torchutils.dot", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.log", "torch.log", "torch.log", "torch.log"], "function", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.contrastive_sim_z", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.dot"], ["", "", "def", "loss_info", "(", "feat", ",", "mb_feat", ",", "label", ",", "t", "=", "0.1", ")", ":", "\n", "    ", "loss", "=", "torch", ".", "Tensor", "(", "[", "0", "]", ")", ".", "cuda", "(", ")", "\n", "z", "=", "torchutils", ".", "contrastive_sim_z", "(", "feat", ",", "mb_feat", ",", "tao", "=", "t", ")", "\n", "for", "i", ",", "lb", "in", "enumerate", "(", "label", ")", ":", "\n", "        ", "pos", "=", "mb_feat", "[", "label", "==", "lb", "]", "\n", "up", "=", "torch", ".", "exp", "(", "torchutils", ".", "dot", "(", "feat", "[", "i", "]", ",", "pos", ")", "/", "t", ")", "\n", "p", "=", "up", "/", "z", "[", "i", "]", "\n", "assert", "all", "(", "p", "<", "1", ")", "\n", "loss", "+=", "-", "torch", ".", "sum", "(", "torch", ".", "log", "(", "p", ")", ")", "/", "len", "(", "p", ")", "\n", "", "loss", "/=", "len", "(", "feat", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.ssda.update_data_memory": [[353, 358], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.normalize", "torch.normalize"], "function", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "update_data_memory", "(", "data_memory", ",", "outputs", ",", "m", "=", "0.9", ")", ":", "\n", "    ", "outputs", "=", "F", ".", "normalize", "(", "outputs", ",", "dim", "=", "1", ")", "\n", "new_data_memory", "=", "data_memory", "*", "m", "+", "(", "1", "-", "m", ")", "*", "outputs", "\n", "return", "F", ".", "normalize", "(", "new_data_memory", ",", "dim", "=", "1", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.head.CosineClassifier.__init__": [[10, 15], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.head.CosineClassifier.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_class", "=", "64", ",", "inc", "=", "4096", ",", "temp", "=", "0.05", ")", ":", "\n", "        ", "super", "(", "CosineClassifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "inc", ",", "num_class", ",", "bias", "=", "False", ")", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "temp", "=", "temp", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.head.CosineClassifier.forward": [[16, 26], ["head.CosineClassifier.normalize_fc", "torch.normalize", "torch.normalize", "torch.normalize", "head.CosineClassifier.fc", "pcs.utils.torchutils.grad_reverse"], "methods", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.head.CosineClassifier.normalize_fc", "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.utils.torchutils.grad_reverse"], ["", "def", "forward", "(", "self", ",", "x", ",", "reverse", "=", "False", ",", "eta", "=", "0.1", ")", ":", "\n", "        ", "self", ".", "normalize_fc", "(", ")", "\n", "\n", "if", "reverse", ":", "\n", "            ", "x", "=", "grad_reverse", "(", "x", ",", "eta", ")", "\n", "", "x", "=", "F", ".", "normalize", "(", "x", ")", "\n", "x_out", "=", "self", ".", "fc", "(", "x", ")", "\n", "x_out", "=", "x_out", "/", "self", ".", "temp", "\n", "\n", "return", "x_out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.head.CosineClassifier.normalize_fc": [[27, 29], ["torch.normalize", "torch.normalize", "torch.normalize"], "methods", ["None"], ["", "def", "normalize_fc", "(", "self", ")", ":", "\n", "        ", "self", ".", "fc", ".", "weight", ".", "data", "=", "F", ".", "normalize", "(", "self", ".", "fc", ".", "weight", ".", "data", ",", "p", "=", "2", ",", "eps", "=", "1e-12", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.head.CosineClassifier.compute_discrepancy": [[30, 37], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "head.CosineClassifier.normalize_fc", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "W.transpose", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.zhengzangw_PCS-FUDA.models.head.CosineClassifier.normalize_fc"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "compute_discrepancy", "(", "self", ")", ":", "\n", "        ", "self", ".", "normalize_fc", "(", ")", "\n", "W", "=", "self", ".", "fc", ".", "weight", ".", "data", "\n", "D", "=", "torch", ".", "mm", "(", "W", ",", "W", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "D_mask", "=", "1", "-", "torch", ".", "eye", "(", "self", ".", "num_class", ")", ".", "cuda", "(", ")", "\n", "return", "torch", ".", "sum", "(", "D", "*", "D_mask", ")", ".", "item", "(", ")", "\n", "", "", ""]]}