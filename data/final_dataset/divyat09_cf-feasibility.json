{"home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf-mnist.base-generative-cf.compute_loss": [[39, 134], ["torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "pred_model", "torch.zeros().to", "torch.zeros().to", "range", "range", "print", "print", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.nn.functional.hinge_embedding_loss", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "pred_model", "range", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.zeros", "torch.zeros", "torch.tensor().to", "torch.tensor().to", "torch.sum", "torch.sum", "torch.nn.functional.hinge_embedding_loss", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.max", "torch.max", "torch.cat", "torch.cat", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.abs", "torch.abs", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.tensor().to", "torch.tensor().to", "torch.log", "torch.log", "torch.max", "torch.max", "torch.max", "torch.max", "torch.tensor", "torch.tensor", "torch.max", "torch.max", "torch.cat", "torch.cat", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.max", "torch.max", "torch.max", "torch.max", "torch.tensor", "torch.tensor", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid"], ["def", "compute_loss", "(", "model", ",", "model_out", ",", "x", ",", "target_label", ",", "validity_reg", ",", "margin", ")", ":", "\n", "\n", "    ", "em", "=", "model_out", "[", "'em'", "]", "\n", "ev", "=", "model_out", "[", "'ev'", "]", "\n", "z", "=", "model_out", "[", "'z'", "]", "\n", "dm", "=", "model_out", "[", "'x_pred'", "]", "\n", "mc_samples", "=", "model_out", "[", "'mc_samples'", "]", "\n", "#KL Divergence", "\n", "kl_divergence", "=", "0.5", "*", "torch", ".", "mean", "(", "em", "**", "2", "+", "ev", "-", "torch", ".", "log", "(", "ev", ")", "-", "1", ",", "axis", "=", "1", ")", "\n", "\n", "#Reconstruction Term", "\n", "#Proximity: L1 Loss", "\n", "x_pred", "=", "dm", "[", "0", "]", "\n", "# s would be zero hence it won't make a difference, and it will be simply like a proximity term", "\n", "s", "=", "model", ".", "encoded_start_cat", "\n", "recon_err", "=", "-", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "x", "[", ":", ",", "s", ":", "-", "1", "]", "-", "x_pred", "[", ":", ",", "s", ":", "-", "1", "]", ")", ",", "axis", "=", "1", ")", "\n", "\n", "count", "=", "0", "\n", "count", "+=", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", ":", "s", "]", "<", "0", ",", "axis", "=", "1", ")", ".", "float", "(", ")", "\n", "count", "+=", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", ":", "s", "]", ">", "1", ",", "axis", "=", "1", ")", ".", "float", "(", ")", "\n", "\n", "#Validity         ", "\n", "temp_logits", "=", "pred_model", "(", "x_pred", ")", "\n", "#validity_loss = -F.cross_entropy(temp_logits, target_label)    ", "\n", "validity_loss", "=", "torch", ".", "zeros", "(", "1", ")", ".", "to", "(", "cuda", ")", "\n", "\n", "#Loop over total number of classes to compute the Hinge Loss", "\n", "num_classes", "=", "10", "\n", "for", "t_c", "in", "range", "(", "num_classes", ")", ":", "\n", "# Compute the validity_loss for data points with target class t_c in the given batch", "\n", "        ", "temp", "=", "temp_logits", "[", "target_label", "==", "t_c", ",", ":", "]", "\n", "if", "temp", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "#No data point in this batch with the target class t_c", "\n", "            ", "continue", "\n", "", "target_class_batch_score", "=", "temp", "[", ":", ",", "t_c", "]", "\n", "if", "t_c", "==", "0", ":", "\n", "            ", "temp", "=", "temp", "[", ":", ",", "t_c", "+", "1", ":", "]", "\n", "# Max along the batch axis in the tensor; torch.max returns both (values, indices) and taking the first argument gives values", "\n", "other_class_batch_score", "=", "torch", ".", "max", "(", "temp", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "", "elif", "t_c", "==", "num_classes", "-", "1", ":", "\n", "            ", "temp", "=", "temp", "[", ":", ",", ":", "t_c", "]", "\n", "# Max along the batch axis in the tensor", "\n", "other_class_batch_score", "=", "torch", ".", "max", "(", "temp", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "# Concatenate the tensors along the Non Batch Axis", "\n", "            ", "temp", "=", "torch", ".", "cat", "(", "(", "temp", "[", ":", ",", ":", "t_c", "]", ",", "temp", "[", ":", ",", "t_c", "+", "1", ":", "]", ")", ",", "dim", "=", "1", ")", "\n", "# Max along the batch axis in the tensor", "\n", "other_class_batch_score", "=", "torch", ".", "max", "(", "temp", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "\n", "", "validity_loss", "+=", "F", ".", "hinge_embedding_loss", "(", "F", ".", "sigmoid", "(", "target_class_batch_score", ")", ".", "to", "(", "cuda", ")", "-", "F", ".", "sigmoid", "(", "other_class_batch_score", ")", ".", "to", "(", "cuda", ")", ",", "torch", ".", "tensor", "(", "-", "1", ")", ".", "to", "(", "cuda", ")", ",", "margin", ",", "reduction", "=", "'mean'", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "1", ",", "mc_samples", ")", ":", "\n", "        ", "x_pred", "=", "dm", "[", "i", "]", "\n", "\n", "recon_err", "+=", "-", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "x", "[", ":", ",", "s", ":", "-", "1", "]", "-", "x_pred", "[", ":", ",", "s", ":", "-", "1", "]", ")", ",", "axis", "=", "1", ")", "\n", "\n", "count", "+=", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", ":", "s", "]", "<", "0", ",", "axis", "=", "1", ")", ".", "float", "(", ")", "\n", "count", "+=", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", ":", "s", "]", ">", "1", ",", "axis", "=", "1", ")", ".", "float", "(", ")", "\n", "\n", "#Validity", "\n", "temp_logits", "=", "pred_model", "(", "x_pred", ")", "\n", "#         validity_loss += -F.cross_entropy(temp_logits, target_label)      ", "\n", "\n", "#Loop over total number of classes to compute the Hinge Loss", "\n", "num_classes", "=", "10", "\n", "for", "t_c", "in", "range", "(", "num_classes", ")", ":", "\n", "# Compute the validity_loss for data points with target class t_c in the given batch", "\n", "            ", "temp", "=", "temp_logits", "[", "target_label", "==", "t_c", ",", ":", "]", "\n", "if", "temp", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "#No data point in this batch with the target class t_c", "\n", "                ", "continue", "\n", "", "target_class_batch_score", "=", "temp", "[", ":", ",", "t_c", "]", "\n", "\n", "if", "t_c", "==", "0", ":", "\n", "                ", "temp", "=", "temp", "[", ":", ",", "t_c", "+", "1", ":", "]", "\n", "# Max along the batch axis in the tensor; torch.max returns both (values, indices) and taking the first argument gives values", "\n", "other_class_batch_score", "=", "torch", ".", "max", "(", "temp", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "", "elif", "t_c", "==", "num_classes", "-", "1", ":", "\n", "                ", "temp", "=", "temp", "[", ":", ",", ":", "t_c", "]", "\n", "# Max along the batch axis in the tensor", "\n", "other_class_batch_score", "=", "torch", ".", "max", "(", "temp", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "# Concatenate the tensors along the Non Batch Axis", "\n", "                ", "temp", "=", "torch", ".", "cat", "(", "(", "temp", "[", ":", ",", ":", "t_c", "]", ",", "temp", "[", ":", ",", "t_c", "+", "1", ":", "]", ")", ",", "dim", "=", "1", ")", "\n", "# Max along the batch axis in the tensor", "\n", "other_class_batch_score", "=", "torch", ".", "max", "(", "temp", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "\n", "", "validity_loss", "+=", "F", ".", "hinge_embedding_loss", "(", "F", ".", "sigmoid", "(", "target_class_batch_score", ")", ".", "to", "(", "cuda", ")", "-", "F", ".", "sigmoid", "(", "other_class_batch_score", ")", ".", "to", "(", "cuda", ")", ",", "torch", ".", "tensor", "(", "-", "1", ")", ".", "to", "(", "cuda", ")", ",", "margin", ",", "reduction", "=", "'mean'", ")", "\n", "\n", "", "", "recon_err", "=", "recon_err", "/", "mc_samples", "\n", "validity_loss", "=", "-", "1", "*", "validity_reg", "*", "validity_loss", "/", "mc_samples", "\n", "\n", "print", "(", "'Avg wrong cont dim: '", ",", "torch", ".", "mean", "(", "count", ")", "/", "mc_samples", ")", "\n", "print", "(", "'recon: '", ",", "-", "torch", ".", "mean", "(", "recon_err", ")", ",", "' KL: '", ",", "torch", ".", "mean", "(", "kl_divergence", ")", ",", "' Validity: '", ",", "-", "validity_loss", ")", "\n", "return", "-", "torch", ".", "mean", "(", "recon_err", "-", "kl_divergence", ")", "-", "validity_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf-mnist.base-generative-cf.traverse": [[136, 148], ["numpy.array_split", "range", "print", "len", "torch.tensor().float().to", "torch.tensor().float().to", "torch.argmax", "torch.argmax", "print", "pred_model", "numpy.unique", "torch.tensor().float", "torch.tensor().float", "torch.argmax.cpu", "torch.tensor", "torch.tensor"], "function", ["None"], ["", "def", "traverse", "(", "train_dataset", ",", "epochs", "=", "1", ",", "batch_size", "=", "128", ")", ":", "\n", "    ", "batch_num", "=", "0", "\n", "loss", "=", "0.0", "\n", "train_size", "=", "0", "\n", "train_dataset", "=", "np", ".", "array_split", "(", "train_dataset", ",", "train_dataset", ".", "shape", "[", "0", "]", "//", "batch_size", ",", "axis", "=", "0", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "train_dataset", ")", ")", ":", "\n", "        ", "train_x", "=", "train_dataset", "[", "i", "]", "\n", "train_x", "=", "torch", ".", "tensor", "(", "train_x", ")", ".", "float", "(", ")", ".", "to", "(", "cuda", ")", "\n", "train_y", "=", "torch", ".", "argmax", "(", "pred_model", "(", "train_x", ")", ",", "dim", "=", "1", ")", "\n", "train_size", "+=", "train_x", ".", "shape", "[", "0", "]", "\n", "print", "(", "np", ".", "unique", "(", "train_y", ".", "cpu", "(", ")", ",", "return_counts", "=", "True", ")", ")", "\n", "", "print", "(", "train_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf-mnist.base-generative-cf.generate_target_labels": [[149, 168], ["train_y.clone"], "function", ["None"], ["", "def", "generate_target_labels", "(", "train_y", ")", ":", "\n", "\n", "    ", "target_y", "=", "train_y", ".", "clone", "(", ")", "\n", "#print(train_y[:10])", "\n", "\n", "target_y", "[", "train_y", "==", "0", "]", "=", "8", "\n", "#target_y[ train_y == 1 ]= 7 ", "\n", "target_y", "[", "train_y", "==", "2", "]", "=", "3", "\n", "target_y", "[", "train_y", "==", "3", "]", "=", "5", "\n", "target_y", "[", "train_y", "==", "4", "]", "=", "9", "\n", "target_y", "[", "train_y", "==", "5", "]", "=", "8", "\n", "#target_y[ train_y == 6 ]= 8", "\n", "#target_y[ train_y == 7 ]= 9   ", "\n", "target_y", "[", "train_y", "==", "8", "]", "=", "9", "\n", "#target_y[ train_y == 9 ]= 7       ", "\n", "\n", "#print(target_y[:10])", "\n", "\n", "return", "target_y", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf-mnist.base-generative-cf.ae_reconstruct_loss_im1": [[270, 283], ["model", "tensorflow.keras.backend.reshape", "tensorflow.keras.backend.reshape", "tensorflow.keras.backend.sum", "tensorflow.keras.backend.square"], "function", ["None"], ["def", "ae_reconstruct_loss_im1", "(", "model", ",", "x", ")", ":", "\n", "\n", "#Reconstruction Term", "\n", "    ", "x_pred", "=", "model", "(", "x", ")", "\n", "# No categorical variables", "\n", "s", "=", "0", "\n", "x", "=", "K", ".", "reshape", "(", "x", ",", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", "*", "x", ".", "shape", "[", "2", "]", ")", ")", "\n", "x_pred", "=", "K", ".", "reshape", "(", "x_pred", ",", "(", "x_pred", ".", "shape", "[", "0", "]", ",", "x_pred", ".", "shape", "[", "1", "]", "*", "x_pred", ".", "shape", "[", "2", "]", ")", ")", "\n", "\n", "#print('Reshape: ', x.shape, x_pred.shape )", "\n", "recon_err", "=", "-", "K", ".", "sum", "(", "K", ".", "square", "(", "x", "[", ":", ",", "s", ":", "-", "1", "]", "-", "x_pred", "[", ":", ",", "s", ":", "-", "1", "]", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "return", "-", "recon_err", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf-mnist.base-generative-cf.ae_reconstruct_loss_im2": [[284, 304], ["model", "model_all", "tensorflow.keras.backend.reshape", "tensorflow.keras.backend.reshape", "tensorflow.keras.backend.reshape", "tensorflow.keras.backend.sum", "tensorflow.keras.backend.sum", "tensorflow.keras.backend.abs", "tensorflow.keras.backend.square"], "function", ["None"], ["", "def", "ae_reconstruct_loss_im2", "(", "model", ",", "model_all", ",", "x", ")", ":", "\n", "\n", "#     x=x.view(1,x.shape[0])", "\n", "\n", "#Reconstruction Term", "\n", "    ", "x_pred", "=", "model", "(", "x", ")", "\n", "x_pred_all", "=", "model_all", "(", "x", ")", "\n", "# No categorical variables", "\n", "s", "=", "0", "\n", "x", "=", "K", ".", "reshape", "(", "x", ",", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", "*", "x", ".", "shape", "[", "2", "]", ")", ")", "\n", "x_pred", "=", "K", ".", "reshape", "(", "x_pred", ",", "(", "x_pred", ".", "shape", "[", "0", "]", ",", "x_pred", ".", "shape", "[", "1", "]", "*", "x_pred", ".", "shape", "[", "2", "]", ")", ")", "\n", "x_pred_all", "=", "K", ".", "reshape", "(", "x_pred_all", ",", "(", "x_pred_all", ".", "shape", "[", "0", "]", ",", "x_pred_all", ".", "shape", "[", "1", "]", "*", "x_pred_all", ".", "shape", "[", "2", "]", ")", ")", "\n", "\n", "#print('Reshape: ', x.shape, x_pred.shape )    ", "\n", "recon_err_num", "=", "-", "K", ".", "sum", "(", "K", ".", "square", "(", "x_pred_all", "[", ":", ",", "s", ":", "-", "1", "]", "-", "x_pred", "[", ":", ",", "s", ":", "-", "1", "]", ")", ",", "axis", "=", "-", "1", ")", "\n", "recon_err_denom", "=", "K", ".", "sum", "(", "K", ".", "abs", "(", "x", "[", ":", ",", "s", ":", "-", "1", "]", ")", ",", "axis", "=", "-", "1", ")", "\n", "recon_err", "=", "recon_err_num", "/", "recon_err_denom", "\n", "#print('x_pred: ', K.eval(x))", "\n", "# Take care of not adding the negative sign in denominator", "\n", "return", "-", "recon_err", ",", "-", "recon_err_num", ",", "recon_err_denom", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf-mnist.base-generative-cf.compute_im1": [[305, 338], ["np.reshape.detach().cpu().numpy", "np.reshape.detach().cpu().numpy", "numpy.reshape", "numpy.reshape", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "tensorflow.keras.backend.constant", "int", "tensorflow.keras.backend.eval", "int", "tensorflow.keras.backend.eval", "numpy.mean", "numpy.mean", "numpy.mean", "np.reshape.detach().cpu", "np.reshape.detach().cpu", "numpy.reshape", "base-generative-cf.ae_reconstruct_loss_im1", "base-generative-cf.ae_reconstruct_loss_im1", "np.reshape.detach", "np.reshape.detach"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf-mnist.timeit-base-generative-cf.ae_reconstruct_loss_im1", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf-mnist.timeit-base-generative-cf.ae_reconstruct_loss_im1"], ["", "def", "compute_im1", "(", "x", ",", "x_cf", ",", "y", ",", "y_t", ",", "ae_models", ")", ":", "\n", "\n", "    ", "'''\n    || xcf- AE_t(xcf) || / || xcf - AE_o(xcf) ||\n    '''", "\n", "x", "=", "x", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "x_cf", "=", "x_cf", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "x", "=", "np", ".", "reshape", "(", "x", ",", "(", "x", ".", "shape", "[", "0", "]", ",", "28", ",", "28", ",", "1", ")", ")", "\n", "x_cf", "=", "np", ".", "reshape", "(", "x_cf", ",", "(", "x_cf", ".", "shape", "[", "0", "]", ",", "28", ",", "28", ",", "1", ")", ")", "\n", "\n", "cf_score", "=", "np", ".", "zeros", "(", "(", "x_cf", ".", "shape", "[", "0", "]", ")", ")", "\n", "cf_score_num", "=", "np", ".", "zeros", "(", "(", "x_cf", ".", "shape", "[", "0", "]", ")", ")", "\n", "cf_score_denom", "=", "np", ".", "zeros", "(", "(", "x_cf", ".", "shape", "[", "0", "]", ")", ")", "\n", "for", "idx", "in", "range", "(", "x_cf", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "x_i", "=", "K", ".", "constant", "(", "np", ".", "reshape", "(", "x_cf", "[", "idx", ",", ":", "]", ",", "(", "1", ",", "28", ",", "28", ",", "1", ")", ")", ")", "\n", "\n", "#Comptuting score for counterfactual with target class autoencoder        ", "\n", "y_i", "=", "int", "(", "y_t", "[", "idx", "]", ")", "\n", "model", "=", "ae_models", "[", "y_i", "]", "\n", "temp", "=", "K", ".", "eval", "(", "ae_reconstruct_loss_im1", "(", "model", ",", "x_i", ")", ")", "\n", "#print('Temp: ', temp)", "\n", "cf_score", "[", "idx", "]", "=", "temp", "\n", "cf_score_num", "[", "idx", "]", "=", "temp", "\n", "\n", "#Comptuting score for counterfactual with original class autoencoder    ", "\n", "y_i", "=", "int", "(", "y", "[", "idx", "]", ")", "\n", "model", "=", "ae_models", "[", "y_i", "]", "\n", "temp", "=", "K", ".", "eval", "(", "ae_reconstruct_loss_im1", "(", "model", ",", "x_i", ")", ")", "\n", "#print('IM1', cf_score[idx], temp )", "\n", "cf_score", "[", "idx", "]", "=", "cf_score", "[", "idx", "]", "/", "temp", "\n", "cf_score_denom", "[", "idx", "]", "=", "temp", "\n", "\n", "", "return", "np", ".", "mean", "(", "cf_score", ")", ",", "np", ".", "mean", "(", "cf_score_num", ")", ",", "np", ".", "mean", "(", "cf_score_denom", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf-mnist.base-generative-cf.compute_im2": [[340, 364], ["np.reshape.detach().cpu().numpy", "np.reshape.detach().cpu().numpy", "numpy.reshape", "numpy.reshape", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "tensorflow.keras.backend.constant", "int", "tensorflow.keras.backend.eval", "numpy.mean", "numpy.mean", "numpy.mean", "np.reshape.detach().cpu", "np.reshape.detach().cpu", "numpy.reshape", "base-generative-cf.ae_reconstruct_loss_im2", "np.reshape.detach", "np.reshape.detach"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf-mnist.timeit-base-generative-cf.ae_reconstruct_loss_im2"], ["", "def", "compute_im2", "(", "x", ",", "x_cf", ",", "y", ",", "y_t", ",", "ae_models", ")", ":", "\n", "\n", "    ", "'''\n    || AE_t(xcf) - AE(xcf) || / |xcf|\n    '''", "\n", "x", "=", "x", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "x_cf", "=", "x_cf", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "x", "=", "np", ".", "reshape", "(", "x", ",", "(", "x", ".", "shape", "[", "0", "]", ",", "28", ",", "28", ",", "1", ")", ")", "\n", "x_cf", "=", "np", ".", "reshape", "(", "x_cf", ",", "(", "x_cf", ".", "shape", "[", "0", "]", ",", "28", ",", "28", ",", "1", ")", ")", "\n", "\n", "cf_score", "=", "np", ".", "zeros", "(", "(", "x_cf", ".", "shape", "[", "0", "]", ")", ")", "\n", "cf_score_num", "=", "np", ".", "zeros", "(", "(", "x_cf", ".", "shape", "[", "0", "]", ")", ")", "\n", "cf_score_denom", "=", "np", ".", "zeros", "(", "(", "x_cf", ".", "shape", "[", "0", "]", ")", ")", "\n", "for", "idx", "in", "range", "(", "x_cf", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "x_i", "=", "K", ".", "constant", "(", "np", ".", "reshape", "(", "x_cf", "[", "idx", ",", ":", "]", ",", "(", "1", ",", "28", ",", "28", ",", "1", ")", ")", ")", "\n", "\n", "#Comptuting score for counterfactual with target class autoencoder        ", "\n", "y_i", "=", "int", "(", "y_t", "[", "idx", "]", ")", "\n", "model", "=", "ae_models", "[", "y_i", "]", "\n", "# The last model in the list is the all class trained auto encoder", "\n", "model_all", "=", "ae_models", "[", "-", "1", "]", "\n", "cf_score", "[", "idx", "]", ",", "cf_score_num", "[", "idx", "]", ",", "cf_score_denom", "[", "idx", "]", "=", "K", ".", "eval", "(", "ae_reconstruct_loss_im2", "(", "model", ",", "model_all", ",", "x_i", ")", ")", "\n", "\n", "", "return", "np", ".", "mean", "(", "cf_score", ")", ",", "np", ".", "mean", "(", "cf_score_num", ")", ",", "np", ".", "mean", "(", "cf_score_denom", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf-mnist.base-generative-cf.train": [[366, 397], ["torch.tensor().float().to", "torch.tensor().float().to", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "enumerate", "print", "optimizer.zero_grad", "torch.argmax", "torch.argmax", "base-generative-cf.generate_target_labels", "model", "base-generative-cf.compute_loss", "compute_loss.backward", "compute_loss.item", "optimizer.step", "torch.tensor().float", "torch.tensor().float", "pred_model", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf-mnist.timeit-base-generative-cf.generate_target_labels", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.timeit-base-generative-cf.compute_loss"], ["", "def", "train", "(", "model", ",", "train_dataset", ",", "optimizer", ",", "validity_reg", ",", "margin", ",", "epochs", "=", "1000", ",", "batch_size", "=", "1024", ")", ":", "\n", "    ", "batch_num", "=", "0", "\n", "train_loss", "=", "0.0", "\n", "train_size", "=", "0", "\n", "#train_dataset= np.array_split( train_dataset, train_dataset.shape[0]//batch_size ,axis=0 )", "\n", "train_dataset", "=", "torch", ".", "tensor", "(", "train_dataset", ")", ".", "float", "(", ")", ".", "to", "(", "cuda", ")", "\n", "train_dataset", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ")", "\n", "#     for i in range(len(train_dataset)):", "\n", "for", "train_x", "in", "enumerate", "(", "train_dataset", ")", ":", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "#         train_x = train_dataset[i]", "\n", "train_x", "=", "train_x", "[", "1", "]", "\n", "\n", "train_y", "=", "torch", ".", "argmax", "(", "pred_model", "(", "train_x", ")", ",", "dim", "=", "1", ")", "\n", "train_y", "=", "generate_target_labels", "(", "train_y", ")", "\n", "# Generating CF with target class as one ahead of the original class", "\n", "#train_y = (1.0+torch.argmax( pred_model(train_x), dim=1 ))%10", "\n", "\n", "train_size", "+=", "train_x", ".", "shape", "[", "0", "]", "\n", "\n", "out", "=", "model", "(", "train_x", ",", "train_y", ")", "\n", "loss", "=", "compute_loss", "(", "model", ",", "out", ",", "train_x", ",", "train_y", ",", "validity_reg", ",", "margin", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "batch_num", "+=", "1", "\n", "\n", "", "ret", "=", "loss", "/", "batch_num", "\n", "print", "(", "'Train Avg Loss: '", ",", "ret", ",", "train_size", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf-mnist.base-generative-cf.test": [[398, 478], ["numpy.array_split", "random.randrange", "range", "print", "print", "len", "len", "torch.tensor().float().to", "torch.tensor().float().to", "torch.argmax", "torch.argmax", "base-generative-cf.generate_target_labels", "model.compute_elbo", "target_class.cpu().numpy.cpu().numpy", "train_y.cpu().numpy.cpu().numpy", "np.reshape.cpu().numpy", "numpy.sum", "pred_model", "base-generative-cf.compute_im1", "print", "base-generative-cf.compute_im2", "print", "print", "print", "x_pred.cpu.view", "print", "torch.stack", "torch.stack", "x_pred.cpu.cpu", "train_x.cpu.view", "torch.stack", "torch.stack", "train_x.cpu.cpu", "numpy.reshape", "range", "torch.tensor().float", "torch.tensor().float", "target_class.cpu().numpy.cpu", "train_y.cpu().numpy.cpu", "np.reshape.cpu", "numpy.unique", "numpy.unique", "results.save", "results.save", "numpy.savetxt", "torchvision.transforms.ToPILImage", "torchvision.transforms.ToPILImage", "torch.tensor", "torch.tensor", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf-mnist.timeit-base-generative-cf.generate_target_labels", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.CF_VAE.compute_elbo", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf-mnist.timeit-base-generative-cf.compute_im1", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf-mnist.timeit-base-generative-cf.compute_im2"], ["", "def", "test", "(", "model", ",", "train_dataset", ",", "auto_encoder_models", ",", "epochs", "=", "1", ",", "batch_size", "=", "2048", ")", ":", "\n", "    ", "batch_num", "=", "0", "\n", "likelihood", "=", "0.0", "\n", "valid_cf_count", "=", "0", "\n", "train_size", "=", "0", "\n", "batch_size", "=", "32", "\n", "train_dataset", "=", "np", ".", "array_split", "(", "train_dataset", ",", "train_dataset", ".", "shape", "[", "0", "]", "//", "batch_size", ",", "axis", "=", "0", ")", "\n", "index", "=", "random", ".", "randrange", "(", "0", ",", "len", "(", "train_dataset", ")", ",", "1", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "train_dataset", ")", ")", ":", "\n", "\n", "        ", "train_x", "=", "train_dataset", "[", "i", "]", "\n", "train_x", "=", "torch", ".", "tensor", "(", "train_x", ")", ".", "float", "(", ")", ".", "to", "(", "cuda", ")", "\n", "# Generate counterfatuals for a specific class        ", "\n", "train_y", "=", "torch", ".", "argmax", "(", "pred_model", "(", "train_x", ")", ",", "dim", "=", "1", ")", "\n", "target_class", "=", "generate_target_labels", "(", "train_y", ")", "\n", "#target_class= (1.0+train_y)%10", "\n", "train_size", "+=", "train_x", ".", "shape", "[", "0", "]", "\n", "\n", "recon_err", ",", "kl_err", ",", "x_true", ",", "x_pred", ",", "cf_label", "=", "model", ".", "compute_elbo", "(", "train_x", ",", "target_class", ",", "pred_model", ")", "\n", "likelihood", "+=", "recon_err", "-", "kl_err", "\n", "\n", "target_class", "=", "target_class", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "train_y", "=", "train_y", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "cf_label", "=", "cf_label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "valid_cf_count", "+=", "np", ".", "sum", "(", "target_class", "==", "cf_label", ")", "\n", "\n", "if", "batch_num", "==", "index", ":", "\n", "# Computing the IM1 and IM2 metrics", "\n", "            ", "metric_im1", ",", "metric_im1_num", ",", "metric_im1_denom", "=", "compute_im1", "(", "train_x", ",", "x_pred", ",", "train_y", ",", "target_class", ",", "auto_encoder_models", ")", "\n", "print", "(", "'Metric IM1: '", ",", "metric_im1", ",", "metric_im1_num", ",", "metric_im1_denom", ")", "\n", "metric_im2", ",", "metric_im2_num", ",", "metric_im2_denom", "=", "compute_im2", "(", "train_x", ",", "x_pred", ",", "train_y", ",", "target_class", ",", "auto_encoder_models", ")", "\n", "print", "(", "'Metric IM2: '", ",", "metric_im2", ",", "metric_im2_num", ",", "metric_im2_denom", ")", "\n", "\n", "# Saving the images ", "\n", "print", "(", "'True Labels: '", ",", "np", ".", "unique", "(", "target_class", ",", "return_counts", "=", "True", ")", ")", "\n", "print", "(", "'CF Labels: '", ",", "np", ".", "unique", "(", "cf_label", ",", "return_counts", "=", "True", ")", ")", "\n", "data_size", "=", "28", "\n", "x_pred", "=", "x_pred", ".", "view", "(", "-", "1", ",", "28", ",", "28", ")", "\n", "print", "(", "x_pred", ".", "shape", ")", "\n", "x_pred", "=", "torch", ".", "stack", "(", "[", "x_pred", ",", "x_pred", ",", "x_pred", "]", ",", "dim", "=", "1", ")", "\n", "x_pred", "=", "x_pred", ".", "cpu", "(", ")", "\n", "\n", "train_x", "=", "train_x", ".", "view", "(", "-", "1", ",", "28", ",", "28", ")", "\n", "train_x", "=", "torch", ".", "stack", "(", "[", "train_x", ",", "train_x", ",", "train_x", "]", ",", "dim", "=", "1", ")", "\n", "train_x", "=", "train_x", ".", "cpu", "(", ")", "\n", "\n", "cf_label", "=", "np", ".", "reshape", "(", "cf_label", ",", "(", "cf_label", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "\n", "spcase", "=", "1", "\n", "for", "idx", "in", "range", "(", "x_pred", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "if", "spcase", ":", "\n", "#print( x_pred[idx,0,:].shape, x_pred[idx,0,:], train_x[idx,0,:] )", "\n", "                    ", "spcase", "=", "0", "\n", "\n", "", "results", "=", "transforms", ".", "ToPILImage", "(", ")", "(", "x_pred", "[", "idx", ",", ":", "]", ")", "\n", "results", ".", "save", "(", "'results/mnist/'", "+", "str", "(", "idx", ")", "+", "'-cf.jpg'", ")", "\n", "\n", "results", "=", "transforms", ".", "ToPILImage", "(", ")", "(", "train_x", "[", "idx", ",", ":", "]", ")", "\n", "results", ".", "save", "(", "'results/mnist/'", "+", "str", "(", "idx", ")", "+", "'-real.jpg'", ")", "\n", "\n", "np", ".", "savetxt", "(", "\"results/mnist/\"", "+", "str", "(", "idx", ")", "+", "'-target-class.txt'", ",", "cf_label", "[", "idx", ",", ":", "]", ",", "newline", "=", "\" \"", ")", "\n", "\n", "\n", "", "", "'''\n        x_pred= d.de_normalize_data( d.get_decoded_data(x_pred.detach().cpu().numpy()) )\n        x_true= d.de_normalize_data( d.get_decoded_data(x_true.detach().cpu().numpy()) )                \n        if batch_num == index:\n            rand_idx= random.randrange(0, batch_size/2-1, 1)\n            print('Likelihood: ', recon_err, kl_err, recon_err-kl_err)\n            print('X: ', x_true.iloc[rand_idx,:])\n            print('Xpred: ', x_pred.iloc[rand_idx,:])\n        '''", "\n", "batch_num", "+=", "1", "\n", "\n", "", "ret", "=", "likelihood", "/", "batch_num", "\n", "print", "(", "'ELBO Avg: '", ",", "ret", ",", "train_size", ")", "\n", "print", "(", "'Valid CF Percentage: '", ",", "valid_cf_count", ",", "valid_cf_count", "/", "train_size", ")", "\n", "\n", "return", "ret", ",", "valid_cf_count", "/", "train_size", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf-mnist.timeit-base-generative-cf.wrapper": [[31, 35], ["func"], "function", ["None"], ["def", "wrapper", "(", "func", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "def", "wrapped", "(", ")", ":", "\n", "        ", "return", "func", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "return", "wrapped", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf-mnist.timeit-base-generative-cf.compute_loss": [[36, 131], ["torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "pred_model", "torch.zeros().to", "torch.zeros().to", "range", "range", "print", "print", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.nn.functional.hinge_embedding_loss", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "pred_model", "range", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.zeros", "torch.zeros", "torch.tensor().to", "torch.tensor().to", "torch.sum", "torch.sum", "torch.nn.functional.hinge_embedding_loss", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.max", "torch.max", "torch.cat", "torch.cat", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.abs", "torch.abs", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.tensor().to", "torch.tensor().to", "torch.log", "torch.log", "torch.max", "torch.max", "torch.max", "torch.max", "torch.tensor", "torch.tensor", "torch.max", "torch.max", "torch.cat", "torch.cat", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.max", "torch.max", "torch.max", "torch.max", "torch.tensor", "torch.tensor", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid"], ["", "def", "compute_loss", "(", "model", ",", "model_out", ",", "x", ",", "target_label", ",", "validity_reg", ",", "margin", ")", ":", "\n", "\n", "    ", "em", "=", "model_out", "[", "'em'", "]", "\n", "ev", "=", "model_out", "[", "'ev'", "]", "\n", "z", "=", "model_out", "[", "'z'", "]", "\n", "dm", "=", "model_out", "[", "'x_pred'", "]", "\n", "mc_samples", "=", "model_out", "[", "'mc_samples'", "]", "\n", "#KL Divergence", "\n", "kl_divergence", "=", "0.5", "*", "torch", ".", "mean", "(", "em", "**", "2", "+", "ev", "-", "torch", ".", "log", "(", "ev", ")", "-", "1", ",", "axis", "=", "1", ")", "\n", "\n", "#Reconstruction Term", "\n", "#Proximity: L1 Loss", "\n", "x_pred", "=", "dm", "[", "0", "]", "\n", "# s would be zero hence it won't make a difference, and it will be simply like a proximity term", "\n", "s", "=", "model", ".", "encoded_start_cat", "\n", "recon_err", "=", "-", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "x", "[", ":", ",", "s", ":", "-", "1", "]", "-", "x_pred", "[", ":", ",", "s", ":", "-", "1", "]", ")", ",", "axis", "=", "1", ")", "\n", "\n", "count", "=", "0", "\n", "count", "+=", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", ":", "s", "]", "<", "0", ",", "axis", "=", "1", ")", ".", "float", "(", ")", "\n", "count", "+=", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", ":", "s", "]", ">", "1", ",", "axis", "=", "1", ")", ".", "float", "(", ")", "\n", "\n", "#Validity         ", "\n", "temp_logits", "=", "pred_model", "(", "x_pred", ")", "\n", "#validity_loss = -F.cross_entropy(temp_logits, target_label)    ", "\n", "validity_loss", "=", "torch", ".", "zeros", "(", "1", ")", ".", "to", "(", "cuda", ")", "\n", "\n", "#Loop over total number of classes to compute the Hinge Loss", "\n", "num_classes", "=", "10", "\n", "for", "t_c", "in", "range", "(", "num_classes", ")", ":", "\n", "# Compute the validity_loss for data points with target class t_c in the given batch", "\n", "        ", "temp", "=", "temp_logits", "[", "target_label", "==", "t_c", ",", ":", "]", "\n", "if", "temp", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "#No data point in this batch with the target class t_c", "\n", "            ", "continue", "\n", "", "target_class_batch_score", "=", "temp", "[", ":", ",", "t_c", "]", "\n", "if", "t_c", "==", "0", ":", "\n", "            ", "temp", "=", "temp", "[", ":", ",", "t_c", "+", "1", ":", "]", "\n", "# Max along the batch axis in the tensor; torch.max returns both (values, indices) and taking the first argument gives values", "\n", "other_class_batch_score", "=", "torch", ".", "max", "(", "temp", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "", "elif", "t_c", "==", "num_classes", "-", "1", ":", "\n", "            ", "temp", "=", "temp", "[", ":", ",", ":", "t_c", "]", "\n", "# Max along the batch axis in the tensor", "\n", "other_class_batch_score", "=", "torch", ".", "max", "(", "temp", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "# Concatenate the tensors along the Non Batch Axis", "\n", "            ", "temp", "=", "torch", ".", "cat", "(", "(", "temp", "[", ":", ",", ":", "t_c", "]", ",", "temp", "[", ":", ",", "t_c", "+", "1", ":", "]", ")", ",", "dim", "=", "1", ")", "\n", "# Max along the batch axis in the tensor", "\n", "other_class_batch_score", "=", "torch", ".", "max", "(", "temp", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "\n", "", "validity_loss", "+=", "F", ".", "hinge_embedding_loss", "(", "F", ".", "sigmoid", "(", "target_class_batch_score", ")", ".", "to", "(", "cuda", ")", "-", "F", ".", "sigmoid", "(", "other_class_batch_score", ")", ".", "to", "(", "cuda", ")", ",", "torch", ".", "tensor", "(", "-", "1", ")", ".", "to", "(", "cuda", ")", ",", "margin", ",", "reduction", "=", "'mean'", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "1", ",", "mc_samples", ")", ":", "\n", "        ", "x_pred", "=", "dm", "[", "i", "]", "\n", "\n", "recon_err", "+=", "-", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "x", "[", ":", ",", "s", ":", "-", "1", "]", "-", "x_pred", "[", ":", ",", "s", ":", "-", "1", "]", ")", ",", "axis", "=", "1", ")", "\n", "\n", "count", "+=", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", ":", "s", "]", "<", "0", ",", "axis", "=", "1", ")", ".", "float", "(", ")", "\n", "count", "+=", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", ":", "s", "]", ">", "1", ",", "axis", "=", "1", ")", ".", "float", "(", ")", "\n", "\n", "#Validity", "\n", "temp_logits", "=", "pred_model", "(", "x_pred", ")", "\n", "#         validity_loss += -F.cross_entropy(temp_logits, target_label)      ", "\n", "\n", "#Loop over total number of classes to compute the Hinge Loss", "\n", "num_classes", "=", "10", "\n", "for", "t_c", "in", "range", "(", "num_classes", ")", ":", "\n", "# Compute the validity_loss for data points with target class t_c in the given batch", "\n", "            ", "temp", "=", "temp_logits", "[", "target_label", "==", "t_c", ",", ":", "]", "\n", "if", "temp", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "#No data point in this batch with the target class t_c", "\n", "                ", "continue", "\n", "", "target_class_batch_score", "=", "temp", "[", ":", ",", "t_c", "]", "\n", "\n", "if", "t_c", "==", "0", ":", "\n", "                ", "temp", "=", "temp", "[", ":", ",", "t_c", "+", "1", ":", "]", "\n", "# Max along the batch axis in the tensor; torch.max returns both (values, indices) and taking the first argument gives values", "\n", "other_class_batch_score", "=", "torch", ".", "max", "(", "temp", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "", "elif", "t_c", "==", "num_classes", "-", "1", ":", "\n", "                ", "temp", "=", "temp", "[", ":", ",", ":", "t_c", "]", "\n", "# Max along the batch axis in the tensor", "\n", "other_class_batch_score", "=", "torch", ".", "max", "(", "temp", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "# Concatenate the tensors along the Non Batch Axis", "\n", "                ", "temp", "=", "torch", ".", "cat", "(", "(", "temp", "[", ":", ",", ":", "t_c", "]", ",", "temp", "[", ":", ",", "t_c", "+", "1", ":", "]", ")", ",", "dim", "=", "1", ")", "\n", "# Max along the batch axis in the tensor", "\n", "other_class_batch_score", "=", "torch", ".", "max", "(", "temp", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "\n", "", "validity_loss", "+=", "F", ".", "hinge_embedding_loss", "(", "F", ".", "sigmoid", "(", "target_class_batch_score", ")", ".", "to", "(", "cuda", ")", "-", "F", ".", "sigmoid", "(", "other_class_batch_score", ")", ".", "to", "(", "cuda", ")", ",", "torch", ".", "tensor", "(", "-", "1", ")", ".", "to", "(", "cuda", ")", ",", "margin", ",", "reduction", "=", "'mean'", ")", "\n", "\n", "", "", "recon_err", "=", "recon_err", "/", "mc_samples", "\n", "validity_loss", "=", "-", "1", "*", "validity_reg", "*", "validity_loss", "/", "mc_samples", "\n", "\n", "print", "(", "'Avg wrong cont dim: '", ",", "torch", ".", "mean", "(", "count", ")", "/", "mc_samples", ")", "\n", "print", "(", "'recon: '", ",", "-", "torch", ".", "mean", "(", "recon_err", ")", ",", "' KL: '", ",", "torch", ".", "mean", "(", "kl_divergence", ")", ",", "' Validity: '", ",", "-", "validity_loss", ")", "\n", "return", "-", "torch", ".", "mean", "(", "recon_err", "-", "kl_divergence", ")", "-", "validity_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf-mnist.timeit-base-generative-cf.traverse": [[133, 145], ["numpy.array_split", "range", "print", "len", "torch.tensor().float().to", "torch.tensor().float().to", "torch.argmax", "torch.argmax", "print", "pred_model", "numpy.unique", "torch.tensor().float", "torch.tensor().float", "torch.argmax.cpu", "torch.tensor", "torch.tensor"], "function", ["None"], ["", "def", "traverse", "(", "train_dataset", ",", "epochs", "=", "1", ",", "batch_size", "=", "128", ")", ":", "\n", "    ", "batch_num", "=", "0", "\n", "loss", "=", "0.0", "\n", "train_size", "=", "0", "\n", "train_dataset", "=", "np", ".", "array_split", "(", "train_dataset", ",", "train_dataset", ".", "shape", "[", "0", "]", "//", "batch_size", ",", "axis", "=", "0", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "train_dataset", ")", ")", ":", "\n", "        ", "train_x", "=", "train_dataset", "[", "i", "]", "\n", "train_x", "=", "torch", ".", "tensor", "(", "train_x", ")", ".", "float", "(", ")", ".", "to", "(", "cuda", ")", "\n", "train_y", "=", "torch", ".", "argmax", "(", "pred_model", "(", "train_x", ")", ",", "dim", "=", "1", ")", "\n", "train_size", "+=", "train_x", ".", "shape", "[", "0", "]", "\n", "print", "(", "np", ".", "unique", "(", "train_y", ".", "cpu", "(", ")", ",", "return_counts", "=", "True", ")", ")", "\n", "", "print", "(", "train_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf-mnist.timeit-base-generative-cf.generate_target_labels": [[146, 164], ["train_y.clone"], "function", ["None"], ["", "def", "generate_target_labels", "(", "train_y", ")", ":", "\n", "\n", "    ", "target_y", "=", "train_y", ".", "clone", "(", ")", "\n", "#print(train_y[:10])", "\n", "\n", "target_y", "[", "train_y", "==", "0", "]", "=", "8", "\n", "target_y", "[", "train_y", "==", "1", "]", "=", "7", "\n", "target_y", "[", "train_y", "==", "2", "]", "=", "3", "\n", "target_y", "[", "train_y", "==", "3", "]", "=", "5", "\n", "target_y", "[", "train_y", "==", "4", "]", "=", "9", "\n", "target_y", "[", "train_y", "==", "5", "]", "=", "8", "\n", "target_y", "[", "train_y", "==", "6", "]", "=", "8", "\n", "target_y", "[", "train_y", "==", "7", "]", "=", "9", "\n", "target_y", "[", "train_y", "==", "8", "]", "=", "9", "\n", "target_y", "[", "train_y", "==", "9", "]", "=", "7", "\n", "#print(target_y[:10])", "\n", "\n", "return", "target_y", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf-mnist.timeit-base-generative-cf.ae_reconstruct_loss_im1": [[165, 187], ["x.view.view", "model", "torch.norm", "torch.norm", "torch.abs", "torch.abs"], "function", ["None"], ["", "def", "ae_reconstruct_loss_im1", "(", "model", ",", "x", ")", ":", "\n", "\n", "    ", "x", "=", "x", ".", "view", "(", "1", ",", "x", ".", "shape", "[", "0", "]", ")", "\n", "\n", "model_out", "=", "model", "(", "x", ")", "\n", "em", "=", "model_out", "[", "'em'", "]", "\n", "ev", "=", "model_out", "[", "'ev'", "]", "\n", "z", "=", "model_out", "[", "'z'", "]", "\n", "dm", "=", "model_out", "[", "'x_pred'", "]", "\n", "mc_samples", "=", "model_out", "[", "'mc_samples'", "]", "\n", "\n", "#Reconstruction Term", "\n", "x_pred", "=", "dm", "[", "0", "]", "\n", "# No categorical variables", "\n", "s", "=", "0", "\n", "recon_err", "=", "-", "torch", ".", "norm", "(", "torch", ".", "abs", "(", "x", "[", ":", ",", "s", ":", "-", "1", "]", "-", "x_pred", "[", ":", ",", "s", ":", "-", "1", "]", ")", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "**", "2", "\n", "\n", "#     for i in range(1,mc_samples):", "\n", "#         x_pred = model.sample_latent_code(dm[i], dv[i])        ", "\n", "#         recon_err += -torch.sum( torch.abs(x[:,s:-1] - x_pred[:,s:-1]), axis=1 )", "\n", "#     recon_err = recon_err / mc_samples", "\n", "return", "-", "recon_err", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf-mnist.timeit-base-generative-cf.ae_reconstruct_loss_im2": [[188, 211], ["x.view.view", "model", "model_all", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.abs", "torch.abs"], "function", ["None"], ["", "def", "ae_reconstruct_loss_im2", "(", "model", ",", "model_all", ",", "x", ")", ":", "\n", "\n", "    ", "x", "=", "x", ".", "view", "(", "1", ",", "x", ".", "shape", "[", "0", "]", ")", "\n", "\n", "model_out", "=", "model", "(", "x", ")", "\n", "dm", "=", "model_out", "[", "'x_pred'", "]", "\n", "\n", "model_out_all", "=", "model_all", "(", "x", ")", "\n", "dm_all", "=", "model_out_all", "[", "'x_pred'", "]", "\n", "\n", "#Reconstruction Term", "\n", "x_pred", "=", "dm", "[", "0", "]", "\n", "x_pred_all", "=", "dm_all", "[", "0", "]", "\n", "# No categorical variables", "\n", "s", "=", "0", "\n", "recon_err", "=", "-", "torch", ".", "norm", "(", "torch", ".", "abs", "(", "x_pred_all", "[", ":", ",", "s", ":", "-", "1", "]", "-", "x_pred", "[", ":", ",", "s", ":", "-", "1", "]", ")", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "**", "2", "\n", "recon_err", "=", "recon_err", "/", "torch", ".", "norm", "(", "x", ",", "p", "=", "1", ",", "dim", "=", "1", ")", "\n", "\n", "#     for i in range(1,mc_samples):", "\n", "#         x_pred = model.sample_latent_code(dm[i], dv[i])        ", "\n", "#         recon_err += -torch.sum( torch.abs(x[:,s:-1] - x_pred[:,s:-1]), axis=1 )", "\n", "#     recon_err = recon_err / mc_samples", "\n", "return", "-", "recon_err", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf-mnist.timeit-base-generative-cf.compute_im1": [[212, 233], ["numpy.zeros", "range", "numpy.mean", "int", "ae_reconstruct_loss_im1().detach().cpu().numpy", "int", "ae_reconstruct_loss_im1().detach().cpu().numpy", "ae_reconstruct_loss_im1().detach().cpu", "ae_reconstruct_loss_im1().detach().cpu", "ae_reconstruct_loss_im1().detach", "ae_reconstruct_loss_im1().detach", "timeit-base-generative-cf.ae_reconstruct_loss_im1", "timeit-base-generative-cf.ae_reconstruct_loss_im1"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf-mnist.timeit-base-generative-cf.ae_reconstruct_loss_im1", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf-mnist.timeit-base-generative-cf.ae_reconstruct_loss_im1"], ["", "def", "compute_im1", "(", "x", ",", "x_cf", ",", "y", ",", "y_t", ",", "ae_models", ")", ":", "\n", "\n", "    ", "'''\n    || xcf- AE_t(xcf) || / || xcf - AE_o(xcf) ||\n    '''", "\n", "\n", "cf_score", "=", "np", ".", "zeros", "(", "(", "x_cf", ".", "shape", "[", "0", "]", ")", ")", "\n", "for", "idx", "in", "range", "(", "x_cf", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "x_i", "=", "x_cf", "[", "idx", ",", ":", "]", "\n", "\n", "#Comptuting score for counterfactual with target class autoencoder        ", "\n", "y_i", "=", "int", "(", "y_t", "[", "idx", "]", ")", "\n", "model", "=", "ae_models", "[", "y_i", "]", "\n", "cf_score", "[", "idx", "]", "=", "ae_reconstruct_loss_im1", "(", "model", ",", "x_i", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "#Comptuting score for counterfactual with original class autoencoder    ", "\n", "y_i", "=", "int", "(", "y", "[", "idx", "]", ")", "\n", "model", "=", "ae_models", "[", "y_i", "]", "\n", "cf_score", "[", "idx", "]", "=", "cf_score", "[", "idx", "]", "/", "ae_reconstruct_loss_im1", "(", "model", ",", "x_i", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "return", "np", ".", "mean", "(", "cf_score", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf-mnist.timeit-base-generative-cf.compute_im2": [[234, 252], ["numpy.zeros", "range", "numpy.mean", "int", "ae_reconstruct_loss_im2().detach().cpu().numpy", "ae_reconstruct_loss_im2().detach().cpu", "ae_reconstruct_loss_im2().detach", "timeit-base-generative-cf.ae_reconstruct_loss_im2"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf-mnist.timeit-base-generative-cf.ae_reconstruct_loss_im2"], ["", "def", "compute_im2", "(", "x", ",", "x_cf", ",", "y", ",", "y_t", ",", "ae_models", ")", ":", "\n", "\n", "    ", "'''\n    || AE_t(xcf) - AE(xcf) || / |xcf|\n    '''", "\n", "\n", "cf_score", "=", "np", ".", "zeros", "(", "(", "x_cf", ".", "shape", "[", "0", "]", ")", ")", "\n", "for", "idx", "in", "range", "(", "x_cf", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "x_i", "=", "x_cf", "[", "idx", ",", ":", "]", "\n", "\n", "#Comptuting score for counterfactual with target class autoencoder        ", "\n", "y_i", "=", "int", "(", "y_t", "[", "idx", "]", ")", "\n", "model", "=", "ae_models", "[", "y_i", "]", "\n", "# The last model in the list is the all class trained auto encoder", "\n", "model_all", "=", "ae_models", "[", "-", "1", "]", "\n", "cf_score", "[", "idx", "]", "=", "ae_reconstruct_loss_im2", "(", "model", ",", "model_all", ",", "x_i", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "return", "np", ".", "mean", "(", "cf_score", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf-mnist.timeit-base-generative-cf.train": [[253, 284], ["torch.tensor().float().to", "torch.tensor().float().to", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "enumerate", "print", "optimizer.zero_grad", "torch.argmax", "torch.argmax", "timeit-base-generative-cf.generate_target_labels", "model", "timeit-base-generative-cf.compute_loss", "compute_loss.backward", "compute_loss.item", "optimizer.step", "torch.tensor().float", "torch.tensor().float", "pred_model", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf-mnist.timeit-base-generative-cf.generate_target_labels", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.timeit-base-generative-cf.compute_loss"], ["", "def", "train", "(", "model", ",", "train_dataset", ",", "optimizer", ",", "validity_reg", ",", "margin", ",", "epochs", "=", "1000", ",", "batch_size", "=", "1024", ")", ":", "\n", "    ", "batch_num", "=", "0", "\n", "train_loss", "=", "0.0", "\n", "train_size", "=", "0", "\n", "#train_dataset= np.array_split( train_dataset, train_dataset.shape[0]//batch_size ,axis=0 )", "\n", "train_dataset", "=", "torch", ".", "tensor", "(", "train_dataset", ")", ".", "float", "(", ")", ".", "to", "(", "cuda", ")", "\n", "train_dataset", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ")", "\n", "#     for i in range(len(train_dataset)):", "\n", "for", "train_x", "in", "enumerate", "(", "train_dataset", ")", ":", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "#         train_x = train_dataset[i]", "\n", "train_x", "=", "train_x", "[", "1", "]", "\n", "\n", "train_y", "=", "torch", ".", "argmax", "(", "pred_model", "(", "train_x", ")", ",", "dim", "=", "1", ")", "\n", "train_y", "=", "generate_target_labels", "(", "train_y", ")", "\n", "# Generating CF with target class as one ahead of the original class", "\n", "#train_y = (1.0+torch.argmax( pred_model(train_x), dim=1 ))%10", "\n", "\n", "train_size", "+=", "train_x", ".", "shape", "[", "0", "]", "\n", "\n", "out", "=", "model", "(", "train_x", ",", "train_y", ")", "\n", "loss", "=", "compute_loss", "(", "model", ",", "out", ",", "train_x", ",", "train_y", ",", "validity_reg", ",", "margin", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "batch_num", "+=", "1", "\n", "\n", "", "ret", "=", "loss", "/", "batch_num", "\n", "print", "(", "'Train Avg Loss: '", ",", "ret", ",", "train_size", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf-mnist.timeit-base-generative-cf.test": [[285, 316], ["numpy.array_split", "random.randrange", "range", "len", "len", "torch.tensor().float().to", "torch.tensor().float().to", "torch.argmax", "torch.argmax", "timeit-base-generative-cf.generate_target_labels", "model.forward", "timeit-base-generative-cf.wrapper", "timeit.timeit", "print", "print", "print", "pred_model", "torch.tensor().float", "torch.tensor().float", "str", "str", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf-mnist.timeit-base-generative-cf.generate_target_labels", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.blackboxmodel.BlackBox.forward", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.timeit-base-generative-cf.wrapper"], ["", "def", "test", "(", "model", ",", "train_dataset", ",", "auto_encoder_models", ",", "eval_time", ",", "epochs", "=", "1", ",", "batch_size", "=", "2048", ")", ":", "\n", "    ", "batch_num", "=", "0", "\n", "likelihood", "=", "0.0", "\n", "valid_cf_count", "=", "0", "\n", "train_size", "=", "0", "\n", "batch_size", "=", "32", "\n", "train_dataset", "=", "np", ".", "array_split", "(", "train_dataset", ",", "train_dataset", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "index", "=", "random", ".", "randrange", "(", "0", ",", "len", "(", "train_dataset", ")", ",", "1", ")", "\n", "\n", "eval_res", "=", "{", "}", "\n", "time", "=", "eval_time", "\n", "for", "i", "in", "range", "(", "len", "(", "train_dataset", ")", ")", ":", "\n", "\n", "        ", "train_x", "=", "train_dataset", "[", "i", "]", "\n", "train_x", "=", "torch", ".", "tensor", "(", "train_x", ")", ".", "float", "(", ")", ".", "to", "(", "cuda", ")", "\n", "# Generate counterfatuals for a specific class        ", "\n", "train_y", "=", "torch", ".", "argmax", "(", "pred_model", "(", "train_x", ")", ",", "dim", "=", "1", ")", "\n", "target_class", "=", "generate_target_labels", "(", "train_y", ")", "\n", "train_size", "+=", "train_x", ".", "shape", "[", "0", "]", "\n", "\n", "#Forward Pass of the model", "\n", "out", "=", "model", ".", "forward", "(", "train_x", ",", "target_class", ")", "\n", "\n", "wrapped", "=", "wrapper", "(", "model", ".", "forward", ",", "train_x", ",", "target_class", ")", "\n", "time", "+=", "timeit", ".", "timeit", "(", "wrapped", ",", "number", "=", "1", ")", "\n", "eval_res", "[", "str", "(", "i", ")", "]", "=", "time", "\n", "print", "(", "'-----------------------------------'", ")", "\n", "print", "(", "'Time taken: '", ",", "eval_res", "[", "str", "(", "i", ")", "]", ")", "\n", "print", "(", "'-----------------------------------'", ")", "\n", "\n", "", "return", "eval_res", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.de_normalise": [[62, 64], ["None"], "function", ["None"], ["\n", "    ", "valid_score_arr", "=", "[", "]", "\n", "invalid_score_arr", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.de_scale": [[65, 67], ["None"], "function", ["None"], ["for", "sample_size", "in", "[", "5", "]", ":", "\n", "        ", "train_x", "=", "torch", ".", "tensor", "(", "train_dataset", ")", ".", "float", "(", ")", "\n", "train_y", "=", "torch", ".", "argmax", "(", "pred_model", "(", "train_x", ")", ",", "dim", "=", "1", ")", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.normal_likelihood": [[68, 70], ["torch.sum", "torch.sum", "torch.log", "torch.log"], "function", ["None"], ["valid_change", "=", "0", "\n", "invalid_change", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.change_direction": [[71, 76], ["None"], "function", ["None"], ["for", "sample_iter", "in", "range", "(", "sample_size", ")", ":", "\n", "            ", "recon_err", ",", "kl_err", ",", "x_true", ",", "x_pred", ",", "cf_label", "=", "model", ".", "compute_elbo", "(", "train_x", ",", "1.0", "-", "train_y", ",", "pred_model", ")", "\n", "\n", "x_pred", "=", "d", ".", "de_normalize_data", "(", "d", ".", "get_decoded_data", "(", "x_pred", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "x_true", "=", "d", ".", "de_normalize_data", "(", "d", ".", "get_decoded_data", "(", "x_true", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.visualize_score": [[77, 94], ["torch.tensor().float", "torch.tensor().float", "torch.argmax", "torch.argmax", "range", "pred_model", "model.compute_elbo", "d.de_normalize_data", "d.de_normalize_data", "print", "torch.tensor", "torch.tensor", "d.get_decoded_data", "d.get_decoded_data", "d.de_normalize_data.detach().numpy", "d.de_normalize_data.detach().numpy", "d.de_normalize_data.detach", "d.de_normalize_data.detach"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.CF_VAE.compute_elbo", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data"], ["print", "(", "x_pred", ")", "\n", "\n", "", "", "", "def", "contrastive_validity_score", "(", "contrastive_exp", ",", "case", ",", "sample_range", ")", ":", "\n", "\n", "    ", "validity_score_arr", "=", "[", "]", "\n", "total_test_size", "=", "0", "\n", "for", "sample_size", "in", "sample_range", ":", "\n", "        ", "valid_cf_count", "=", "0", "\n", "for", "idx", "in", "range", "(", "sample_size", ")", ":", "\n", "            ", "exp_res", "=", "contrastive_exp", "[", "idx", "]", "\n", "for", "explanation", "in", "exp_res", ":", "\n", "                ", "if", "explanation", "[", "'cf_label'", "]", "!=", "explanation", "[", "'label'", "]", ":", "\n", "                    ", "valid_cf_count", "+=", "1", "\n", "\n", "", "", "", "test_size", "=", "len", "(", "exp_res", ")", "\n", "valid_cf_count", "=", "valid_cf_count", "/", "sample_size", "\n", "total_test_size", "+=", "test_size", "\n", "print", "(", "sample_size", ",", "test_size", ")", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.contrastive_validity_score": [[95, 123], ["print", "range", "len", "print", "validity_score_arr.append", "matplotlib.plot", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.show", "numpy.mean", "numpy.array"], "function", ["None"], ["validity_score_arr", ".", "append", "(", "100", "*", "valid_cf_count", "/", "test_size", ")", "\n", "\n", "", "if", "case", ":", "\n", "        ", "plt", ".", "plot", "(", "sample_range", ",", "validity_score_arr", ")", "\n", "plt", ".", "title", "(", "'Valid CF'", ")", "\n", "plt", ".", "xlabel", "(", "'Sample Size'", ")", "\n", "plt", ".", "ylabel", "(", "'Percentage of CF'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "", "print", "(", "'Mean Validity Score: '", ",", "np", ".", "mean", "(", "np", ".", "array", "(", "validity_score_arr", ")", ")", ")", "\n", "#     if total_test_size < 3*90:", "\n", "#         validity_score_arr= 0*validity_score_arr", "\n", "return", "validity_score_arr", "\n", "\n", "", "def", "contrastive_proximity_score", "(", "contrastive_exp", ",", "d", ",", "mad_feature_weights", ",", "cat", ",", "case", ",", "sample_range", ")", ":", "\n", "\n", "    ", "prox_score_arr", "=", "[", "]", "\n", "for", "sample_size", "in", "sample_range", ":", "\n", "        ", "prox_count", "=", "0", "\n", "for", "idx", "in", "range", "(", "sample_size", ")", ":", "\n", "            ", "exp_res", "=", "contrastive_exp", "[", "idx", "]", "\n", "x_pred", "=", "[", "]", "\n", "x_true", "=", "[", "]", "\n", "for", "explanation", "in", "exp_res", ":", "\n", "                ", "x_pred", ".", "append", "(", "explanation", "[", "'x_cf'", "]", "[", "0", "]", ")", "\n", "x_true", ".", "append", "(", "explanation", "[", "'x'", "]", "[", "0", "]", ")", "\n", "\n", "", "x_pred", "=", "d", ".", "de_normalize_data", "(", "d", ".", "get_decoded_data", "(", "np", ".", "array", "(", "x_pred", ")", ")", ")", "\n", "x_true", "=", "d", ".", "de_normalize_data", "(", "d", ".", "get_decoded_data", "(", "np", ".", "array", "(", "x_true", ")", ")", ")", "\n", "if", "cat", ":", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.contrastive_proximity_score": [[124, 162], ["print", "range", "len", "prox_score_arr.append", "matplotlib.plot", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.show", "numpy.mean", "d.de_normalize_data", "d.de_normalize_data", "matplotlib.title", "matplotlib.title", "numpy.array", "d.de_normalize_data.append", "d.de_normalize_data.append", "d.get_decoded_data", "d.get_decoded_data", "numpy.array", "numpy.array", "numpy.sum", "numpy.sum", "numpy.array", "numpy.array", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data"], ["                ", "for", "column", "in", "d", ".", "categorical_feature_names", ":", "\n", "                    ", "prox_count", "+=", "np", ".", "sum", "(", "np", ".", "array", "(", "x_true", "[", "column", "]", ",", "dtype", "=", "pd", ".", "Series", ")", "!=", "np", ".", "array", "(", "x_pred", "[", "column", "]", ",", "dtype", "=", "pd", ".", "Series", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "for", "column", "in", "d", ".", "continuous_feature_names", ":", "\n", "                    ", "prox_count", "+=", "np", ".", "sum", "(", "np", ".", "abs", "(", "x_true", "[", "column", "]", "-", "x_pred", "[", "column", "]", ")", ")", "/", "mad_feature_weights", "[", "column", "]", "\n", "\n", "", "", "", "test_size", "=", "len", "(", "exp_res", ")", "\n", "prox_count", "=", "prox_count", "/", "sample_size", "\n", "prox_score_arr", ".", "append", "(", "-", "1", "*", "prox_count", "/", "test_size", ")", "\n", "\n", "", "if", "case", ":", "\n", "        ", "plt", ".", "plot", "(", "sample_range", ",", "prox_score_arr", ")", "\n", "if", "cat", ":", "\n", "            ", "plt", ".", "title", "(", "'Categorical Proximity'", ")", "\n", "", "else", ":", "\n", "            ", "plt", ".", "title", "(", "'Continuous Proximity'", ")", "\n", "\n", "", "plt", ".", "xlabel", "(", "'Sample Size'", ")", "\n", "plt", ".", "ylabel", "(", "'Magnitude'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "", "print", "(", "'Mean Proximity Score: '", ",", "np", ".", "mean", "(", "np", ".", "array", "(", "prox_score_arr", ")", ")", ")", "\n", "return", "prox_score_arr", "\n", "\n", "", "def", "contrastive_causal_score_age_ed_constraint", "(", "contrastive_exp", ",", "d", ",", "normalise_weights", ",", "offset", ",", "case", ",", "sample_range", ")", ":", "\n", "\n", "    ", "valid_score_arr", "=", "[", "]", "\n", "invalid_score_arr", "=", "[", "]", "\n", "count1", "=", "0", "\n", "count2", "=", "0", "\n", "count3", "=", "0", "\n", "pos1", "=", "0", "\n", "pos2", "=", "0", "\n", "pos3", "=", "0", "\n", "for", "sample_size", "in", "sample_range", ":", "\n", "        ", "valid_change", "=", "0", "\n", "invalid_change", "=", "0", "\n", "test_size", "=", "0", "\n", "for", "idx", "in", "range", "(", "sample_size", ")", ":", "\n", "            ", "exp_res", "=", "contrastive_exp", "[", "idx", "]", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.contrastive_causal_score_age_ed_constraint": [[163, 241], ["numpy.mean", "numpy.mean", "print", "print", "print", "range", "print", "valid_score_arr.append", "invalid_score_arr.append", "numpy.array", "numpy.array", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.ylim", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.show", "print", "d.de_normalize_data", "d.de_normalize_data", "d.de_normalize_data.columns.get_loc", "d.de_normalize_data.columns.get_loc", "range", "d.get_decoded_data", "d.get_decoded_data", "d.de_normalize_data.append", "d.de_normalize_data.append", "numpy.array", "numpy.array", "evaluation_functions.de_scale", "evaluation_functions.de_scale"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.de_scale", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.de_scale"], ["x_pred", "=", "[", "]", "\n", "x_true", "=", "[", "]", "\n", "for", "explanation", "in", "exp_res", ":", "\n", "#Only High to Low Counterfactuals", "\n", "                ", "if", "explanation", "[", "'label'", "]", "==", "1", ":", "\n", "                    ", "test_size", "+=", "1", "\n", "x_pred", ".", "append", "(", "explanation", "[", "'x_cf'", "]", "[", "0", "]", ")", "\n", "x_true", ".", "append", "(", "explanation", "[", "'x'", "]", "[", "0", "]", ")", "\n", "\n", "", "", "x_pred", "=", "d", ".", "de_normalize_data", "(", "d", ".", "get_decoded_data", "(", "np", ".", "array", "(", "x_pred", ")", ")", ")", "\n", "x_true", "=", "d", ".", "de_normalize_data", "(", "d", ".", "get_decoded_data", "(", "np", ".", "array", "(", "x_true", ")", ")", ")", "\n", "\n", "ed_idx", "=", "x_true", ".", "columns", ".", "get_loc", "(", "'education'", ")", "\n", "age_idx", "=", "x_true", ".", "columns", ".", "get_loc", "(", "'age'", ")", "\n", "\n", "for", "i", "in", "range", "(", "x_true", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "if", "education_score", "[", "x_pred", ".", "iloc", "[", "i", ",", "ed_idx", "]", "]", "<", "education_score", "[", "x_true", ".", "iloc", "[", "i", ",", "ed_idx", "]", "]", ":", "\n", "                    ", "count3", "+=", "1", "\n", "invalid_change", "+=", "1", "\n", "", "elif", "education_score", "[", "x_pred", ".", "iloc", "[", "i", ",", "ed_idx", "]", "]", "==", "education_score", "[", "x_true", ".", "iloc", "[", "i", ",", "ed_idx", "]", "]", ":", "\n", "                    ", "count1", "+=", "1", "\n", "if", "x_pred", ".", "iloc", "[", "i", ",", "age_idx", "]", "-", "de_scale", "(", "offset", ",", "normalise_weights", "[", "0", "]", ")", ">=", "x_true", ".", "iloc", "[", "i", ",", "age_idx", "]", ":", "\n", "                        ", "pos1", "+=", "1", "\n", "valid_change", "+=", "1", "\n", "", "else", ":", "\n", "                        ", "invalid_change", "+=", "1", "\n", "", "", "elif", "education_score", "[", "x_pred", ".", "iloc", "[", "i", ",", "ed_idx", "]", "]", ">", "education_score", "[", "x_true", ".", "iloc", "[", "i", ",", "ed_idx", "]", "]", ":", "\n", "                    ", "count2", "+=", "1", "\n", "if", "x_pred", ".", "iloc", "[", "i", ",", "age_idx", "]", "-", "de_scale", "(", "offset", ",", "normalise_weights", "[", "0", "]", ")", ">", "x_true", ".", "iloc", "[", "i", ",", "age_idx", "]", ":", "\n", "                        ", "pos2", "+=", "1", "\n", "valid_change", "+=", "1", "\n", "", "else", ":", "\n", "                        ", "invalid_change", "+=", "1", "\n", "\n", "", "", "", "", "valid_change", "=", "valid_change", "/", "sample_size", "\n", "invalid_change", "=", "invalid_change", "/", "sample_size", "\n", "\n", "#         test_size= len(exp_res)", "\n", "test_size", "=", "test_size", "/", "sample_size", "\n", "print", "(", "'Test Size: '", ",", "test_size", ")", "\n", "valid_score_arr", ".", "append", "(", "100", "*", "valid_change", "/", "test_size", ")", "\n", "invalid_score_arr", ".", "append", "(", "100", "*", "invalid_change", "/", "test_size", ")", "\n", "\n", "", "valid_score", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "valid_score_arr", ")", ")", "\n", "invalid_score", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "invalid_score_arr", ")", ")", "\n", "\n", "if", "case", ":", "\n", "        ", "plt", ".", "plot", "(", "sample_range", ",", "valid_score_arr", ",", "'*'", ",", "label", "=", "'Val Change'", ")", "\n", "plt", ".", "plot", "(", "sample_range", ",", "invalid_score_arr", ",", "'s'", ",", "label", "=", "'Inval Change'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'upper left'", ")", "\n", "plt", ".", "ylim", "(", "ymin", "=", "0", ",", "ymax", "=", "100", ")", "\n", "plt", ".", "title", "(", "'All Education Levels'", ")", "\n", "plt", ".", "xlabel", "(", "'Sample Size'", ")", "\n", "plt", ".", "ylabel", "(", "'Percentage of CF'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "", "print", "(", "'Mean Age-Ed Constraint Score: '", ",", "valid_score", ",", "invalid_score", ",", "valid_score", "/", "(", "valid_score", "+", "invalid_score", ")", ")", "\n", "print", "(", "'Count: '", ",", "count1", ",", "count2", ",", "count3", ",", "count1", "+", "count2", "+", "count3", ")", "\n", "print", "(", "'Pos Count: '", ",", "pos1", ",", "pos2", ",", "pos3", ")", "\n", "if", "count1", "and", "count2", "and", "count3", ":", "\n", "        ", "print", "(", "'Pos Percentage: '", ",", "pos1", "/", "count1", ",", "pos2", "/", "count2", ",", "pos3", "/", "count3", ")", "\n", "\n", "", "return", "valid_score_arr", ",", "invalid_score_arr", "\n", "\n", "\n", "", "def", "contrastive_causal_score_age_constraint", "(", "contrastive_exp", ",", "d", ",", "normalise_weights", ",", "offset", ",", "case", ",", "sample_range", ")", ":", "\n", "\n", "    ", "valid_score_arr", "=", "[", "]", "\n", "invalid_score_arr", "=", "[", "]", "\n", "for", "sample_size", "in", "sample_range", ":", "\n", "        ", "valid_change", "=", "0", "\n", "invalid_change", "=", "0", "\n", "test_size", "=", "0", "\n", "for", "idx", "in", "range", "(", "sample_size", ")", ":", "\n", "            ", "exp_res", "=", "contrastive_exp", "[", "idx", "]", "\n", "x_pred", "=", "[", "]", "\n", "x_true", "=", "[", "]", "\n", "for", "explanation", "in", "exp_res", ":", "\n", "#Only High to Low Counterfactuals", "\n", "                ", "if", "explanation", "[", "'label'", "]", "==", "1", ":", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.contrastive_causal_score_age_constraint": [[243, 294], ["numpy.mean", "numpy.mean", "print", "range", "valid_score_arr.append", "invalid_score_arr.append", "numpy.array", "numpy.array", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.ylim", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.show", "d.de_normalize_data", "d.de_normalize_data", "d.de_normalize_data.columns.get_loc", "range", "d.get_decoded_data", "d.get_decoded_data", "d.de_normalize_data.append", "d.de_normalize_data.append", "numpy.array", "numpy.array", "evaluation_functions.de_scale"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.de_scale"], ["x_pred", ".", "append", "(", "explanation", "[", "'x_cf'", "]", "[", "0", "]", ")", "\n", "x_true", ".", "append", "(", "explanation", "[", "'x'", "]", "[", "0", "]", ")", "\n", "\n", "", "", "x_pred", "=", "d", ".", "de_normalize_data", "(", "d", ".", "get_decoded_data", "(", "np", ".", "array", "(", "x_pred", ")", ")", ")", "\n", "x_true", "=", "d", ".", "de_normalize_data", "(", "d", ".", "get_decoded_data", "(", "np", ".", "array", "(", "x_true", ")", ")", ")", "\n", "\n", "age_idx", "=", "x_true", ".", "columns", ".", "get_loc", "(", "'age'", ")", "\n", "for", "i", "in", "range", "(", "x_true", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "if", "x_pred", ".", "iloc", "[", "i", ",", "age_idx", "]", "-", "de_scale", "(", "offset", ",", "normalise_weights", "[", "0", "]", ")", ">=", "x_true", ".", "iloc", "[", "i", ",", "age_idx", "]", ":", "\n", "                    ", "valid_change", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "invalid_change", "+=", "1", "\n", "\n", "", "", "", "valid_change", "=", "valid_change", "/", "sample_size", "\n", "invalid_change", "=", "invalid_change", "/", "sample_size", "\n", "\n", "#         test_size= len(exp_res)", "\n", "test_size", "=", "test_size", "/", "sample_size", "\n", "valid_score_arr", ".", "append", "(", "100", "*", "valid_change", "/", "test_size", ")", "\n", "invalid_score_arr", ".", "append", "(", "100", "*", "invalid_change", "/", "test_size", ")", "\n", "\n", "", "valid_score", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "valid_score_arr", ")", ")", "\n", "invalid_score", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "invalid_score_arr", ")", ")", "\n", "\n", "if", "case", ":", "\n", "        ", "plt", ".", "plot", "(", "sample_range", ",", "valid_score_arr", ",", "'*'", ",", "label", "=", "'Val Age Change'", ")", "\n", "plt", ".", "plot", "(", "sample_range", ",", "invalid_score_arr", ",", "'s'", ",", "label", "=", "'Inval Age Change'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'upper left'", ")", "\n", "plt", ".", "ylim", "(", "ymin", "=", "0", ",", "ymax", "=", "100", ")", "\n", "plt", ".", "title", "(", "'Change in Age'", ")", "\n", "plt", ".", "xlabel", "(", "'Sample Size'", ")", "\n", "plt", ".", "ylabel", "(", "'Percentage of CF'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "", "print", "(", "'Mean Age Constraint Score: '", ",", "valid_score", ",", "invalid_score", ",", "valid_score", "/", "(", "valid_score", "+", "invalid_score", ")", ")", "\n", "return", "valid_score_arr", ",", "invalid_score_arr", "\n", "\n", "", "def", "contrastive_causal_score_bn1_constraint", "(", "contrastive_exp", ",", "d", ",", "normalise_weights", ",", "offset", ",", "case", ",", "sample_range", ")", ":", "\n", "\n", "    ", "valid_score_p_arr", "=", "[", "]", "\n", "invalid_score_p_arr", "=", "[", "]", "\n", "valid_score_n_arr", "=", "[", "]", "\n", "invalid_score_n_arr", "=", "[", "]", "\n", "\n", "for", "sample_size", "in", "sample_range", ":", "\n", "        ", "valid_change_p", "=", "0", "\n", "invalid_change_p", "=", "0", "\n", "valid_change_n", "=", "0", "\n", "invalid_change_n", "=", "0", "\n", "for", "idx", "in", "range", "(", "sample_size", ")", ":", "\n", "            ", "exp_res", "=", "contrastive_exp", "[", "idx", "]", "\n", "x_pred", "=", "[", "]", "\n", "x_true", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.contrastive_causal_score_bn1_constraint": [[295, 367], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.mean", "numpy.mean", "print", "range", "len", "np.array.append", "np.array.append", "np.array.append", "np.array.append", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.ylim", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.show", "d.de_normalize_data", "d.de_normalize_data", "d.de_normalize_data.columns.get_loc", "d.de_normalize_data.columns.get_loc", "d.de_normalize_data.columns.get_loc", "range", "d.de_normalize_data.append", "d.de_normalize_data.append", "d.get_decoded_data", "d.get_decoded_data", "numpy.array", "numpy.array", "evaluation_functions.de_scale", "evaluation_functions.de_scale"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.de_scale", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.de_scale"], ["for", "explanation", "in", "exp_res", ":", "\n", "                ", "x_pred", ".", "append", "(", "explanation", "[", "'x_cf'", "]", "[", "0", "]", ")", "\n", "x_true", ".", "append", "(", "explanation", "[", "'x'", "]", "[", "0", "]", ")", "\n", "\n", "", "x_pred", "=", "d", ".", "de_normalize_data", "(", "d", ".", "get_decoded_data", "(", "np", ".", "array", "(", "x_pred", ")", ")", ")", "\n", "x_true", "=", "d", ".", "de_normalize_data", "(", "d", ".", "get_decoded_data", "(", "np", ".", "array", "(", "x_true", ")", ")", ")", "\n", "\n", "x1_idx", "=", "x_true", ".", "columns", ".", "get_loc", "(", "'x1'", ")", "\n", "x2_idx", "=", "x_true", ".", "columns", ".", "get_loc", "(", "'x2'", ")", "\n", "x3_idx", "=", "x_true", ".", "columns", ".", "get_loc", "(", "'x3'", ")", "\n", "for", "i", "in", "range", "(", "x_true", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "if", "x_pred", ".", "iloc", "[", "i", ",", "x1_idx", "]", "<", "x_true", ".", "iloc", "[", "i", ",", "x1_idx", "]", "and", "x_pred", ".", "iloc", "[", "i", ",", "x2_idx", "]", "<", "x_true", ".", "iloc", "[", "i", ",", "x2_idx", "]", ":", "\n", "                    ", "if", "x_pred", ".", "iloc", "[", "i", ",", "x3_idx", "]", "+", "de_scale", "(", "offset", ",", "normalise_weights", "[", "2", "]", ")", "<", "x_true", ".", "iloc", "[", "i", ",", "x3_idx", "]", ":", "\n", "                        ", "valid_change_n", "+=", "1", "\n", "", "else", ":", "\n", "                        ", "invalid_change_n", "+=", "1", "\n", "", "", "if", "x_pred", ".", "iloc", "[", "i", ",", "x1_idx", "]", ">", "x_true", ".", "iloc", "[", "i", ",", "x1_idx", "]", "and", "x_pred", ".", "iloc", "[", "i", ",", "x2_idx", "]", ">", "x_true", ".", "iloc", "[", "i", ",", "x2_idx", "]", ":", "\n", "                    ", "if", "x_pred", ".", "iloc", "[", "i", ",", "x3_idx", "]", "-", "de_scale", "(", "offset", ",", "normalise_weights", "[", "2", "]", ")", ">", "x_true", ".", "iloc", "[", "i", ",", "x3_idx", "]", ":", "\n", "                        ", "valid_change_p", "+=", "1", "\n", "", "else", ":", "\n", "                        ", "invalid_change_p", "+=", "1", "\n", "\n", "", "", "", "", "valid_change_p", "=", "valid_change_p", "/", "sample_size", "\n", "invalid_change_p", "=", "invalid_change_p", "/", "sample_size", "\n", "valid_change_n", "=", "valid_change_n", "/", "sample_size", "\n", "invalid_change_n", "=", "invalid_change_n", "/", "sample_size", "\n", "\n", "#         print(sample_size, low_change, valid_high_change, invalid_high_change)", "\n", "test_size", "=", "len", "(", "exp_res", ")", "\n", "valid_score_p_arr", ".", "append", "(", "100", "*", "valid_change_p", "/", "test_size", ")", "\n", "invalid_score_p_arr", ".", "append", "(", "100", "*", "invalid_change_p", "/", "test_size", ")", "\n", "valid_score_n_arr", ".", "append", "(", "100", "*", "valid_change_n", "/", "test_size", ")", "\n", "invalid_score_n_arr", ".", "append", "(", "100", "*", "invalid_change_n", "/", "test_size", ")", "\n", "\n", "", "valid_score_p_arr", "=", "np", ".", "array", "(", "valid_score_p_arr", ")", "\n", "invalid_score_p_arr", "=", "np", ".", "array", "(", "invalid_score_p_arr", ")", "\n", "valid_score_n_arr", "=", "np", ".", "array", "(", "valid_score_n_arr", ")", "\n", "invalid_score_n_arr", "=", "np", ".", "array", "(", "invalid_score_n_arr", ")", "\n", "\n", "score_p_arr", "=", "valid_score_p_arr", "/", "(", "valid_score_p_arr", "+", "invalid_score_p_arr", ")", "\n", "score_n_arr", "=", "valid_score_n_arr", "/", "(", "valid_score_n_arr", "+", "invalid_score_n_arr", ")", "\n", "score_p", "=", "np", ".", "mean", "(", "score_p_arr", ")", "\n", "score_n", "=", "np", ".", "mean", "(", "score_n_arr", ")", "\n", "\n", "if", "case", ":", "\n", "        ", "plt", ".", "plot", "(", "sample_range", ",", "valid_score_arr", ",", "'*'", ",", "label", "=", "'Val Change'", ")", "\n", "plt", ".", "plot", "(", "sample_range", ",", "invalid_score_arr", ",", "'s'", ",", "label", "=", "'Inval Change'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'upper left'", ")", "\n", "plt", ".", "ylim", "(", "ymin", "=", "0", ",", "ymax", "=", "100", ")", "\n", "plt", ".", "title", "(", "'Change in x3'", ")", "\n", "plt", ".", "xlabel", "(", "'Sample Size'", ")", "\n", "plt", ".", "ylabel", "(", "'Percentage of CF'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "", "print", "(", "'Mean Monotonic Constraint Score: '", ",", "score_p", ",", "score_n", ",", "2", "*", "score_p", "*", "score_n", "/", "(", "score_p", "+", "score_n", ")", ")", "\n", "return", "score_p_arr", ",", "score_n_arr", "\n", "\n", "\n", "", "def", "contrastive_distribution_score", "(", "contrastive_exp", ",", "d", ",", "normalise_weights", ",", "case", ",", "sample_range", ")", ":", "\n", "\n", "    ", "score_arr", "=", "[", "]", "\n", "for", "sample_size", "in", "sample_range", ":", "\n", "        ", "score", "=", "0", "\n", "for", "idx", "in", "range", "(", "sample_size", ")", ":", "\n", "            ", "exp_res", "=", "contrastive_exp", "[", "idx", "]", "\n", "x_pred", "=", "[", "]", "\n", "x_true", "=", "[", "]", "\n", "for", "explanation", "in", "exp_res", ":", "\n", "                ", "x_pred", ".", "append", "(", "explanation", "[", "'x_cf'", "]", "[", "0", "]", ")", "\n", "x_true", ".", "append", "(", "explanation", "[", "'x'", "]", "[", "0", "]", ")", "\n", "\n", "", "x_pred", "=", "torch", ".", "tensor", "(", "np", ".", "array", "(", "x_pred", ")", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.contrastive_distribution_score": [[369, 398], ["print", "range", "score_arr.append", "matplotlib.plot", "matplotlib.legend", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.show", "numpy.mean", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "numpy.array", "torch.tensor().float.append", "torch.tensor().float.append", "evaluation_functions.oracle_score", "evaluation_functions.oracle_score", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.oracle_score", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.oracle_score"], ["", "score", "=", "score", "/", "sample_size", "\n", "score_arr", ".", "append", "(", "score", ")", "\n", "\n", "", "if", "case", ":", "\n", "        ", "plt", ".", "plot", "(", "sample_range", ",", "score_arr", ",", "'*'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'upper left'", ")", "\n", "plt", ".", "title", "(", "'Likelihood Score'", ")", "\n", "plt", ".", "xlabel", "(", "'Sample Size'", ")", "\n", "plt", ".", "ylabel", "(", "'Likelihood Score'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "", "print", "(", "'Mean Distribution Constraint Score: '", ",", "np", ".", "mean", "(", "np", ".", "array", "(", "score_arr", ")", ")", ")", "\n", "return", "score_arr", "\n", "\n", "", "def", "contrastive_causal_graph_score", "(", "contrastive_exp", ",", "d", ",", "normalise_weights", ",", "case", ",", "sample_range", ")", ":", "\n", "\n", "    ", "score_arr", "=", "[", "]", "\n", "for", "sample_size", "in", "sample_range", ":", "\n", "        ", "score", "=", "0", "\n", "for", "idx", "in", "range", "(", "sample_size", ")", ":", "\n", "            ", "exp_res", "=", "contrastive_exp", "[", "idx", "]", "\n", "x_pred", "=", "[", "]", "\n", "x_true", "=", "[", "]", "\n", "for", "explanation", "in", "exp_res", ":", "\n", "                ", "x_pred", ".", "append", "(", "explanation", "[", "'x_cf'", "]", "[", "0", "]", ")", "\n", "x_true", ".", "append", "(", "explanation", "[", "'x'", "]", "[", "0", "]", ")", "\n", "\n", "", "x_pred", "=", "torch", ".", "tensor", "(", "np", ".", "array", "(", "x_pred", ")", ")", ".", "float", "(", ")", "\n", "\n", "score", "+=", "oracle_causal_graph_score", "(", "x_pred", ",", "normalise_weights", ")", "\n", "", "score", "=", "score", "/", "sample_size", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.contrastive_causal_graph_score": [[399, 427], ["print", "range", "score_arr.append", "matplotlib.plot", "matplotlib.legend", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.show", "numpy.mean", "torch.tensor().float", "torch.tensor().float", "evaluation_functions.oracle_causal_graph_score", "numpy.array", "torch.tensor().float.append", "x_true.append", "torch.tensor", "torch.tensor", "numpy.array"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.oracle_causal_graph_score"], ["score_arr", ".", "append", "(", "score", ")", "\n", "\n", "", "if", "case", ":", "\n", "        ", "plt", ".", "plot", "(", "sample_range", ",", "score_arr", ",", "'*'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'upper left'", ")", "\n", "plt", ".", "title", "(", "'Causal Graph Score'", ")", "\n", "plt", ".", "xlabel", "(", "'Sample Size'", ")", "\n", "plt", ".", "ylabel", "(", "'Causal Graph Score'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "", "print", "(", "'Mean Causal Graph Score: '", ",", "np", ".", "mean", "(", "np", ".", "array", "(", "score_arr", ")", ")", ")", "\n", "return", "score_arr", "\n", "\n", "\n", "", "def", "contrastive_causal_score_bnlearn_constraint", "(", "contrastive_exp", ",", "d", ",", "normalise_weights", ",", "offset", ",", "scm_model", ",", "constraint_nodes", ",", "plot_case", ",", "sample_range", ")", ":", "\n", "\n", "    ", "valid_score_p_arr", "=", "[", "]", "\n", "invalid_score_p_arr", "=", "[", "]", "\n", "valid_score_n_arr", "=", "[", "]", "\n", "invalid_score_n_arr", "=", "[", "]", "\n", "\n", "for", "sample_size", "in", "sample_range", ":", "\n", "        ", "valid_change_p", "=", "0", "\n", "invalid_change_p", "=", "0", "\n", "valid_change_n", "=", "0", "\n", "invalid_change_n", "=", "0", "\n", "\n", "test_size", "=", "0", "\n", "for", "idx", "in", "range", "(", "sample_size", ")", ":", "\n", "            ", "exp_res", "=", "contrastive_exp", "[", "idx", "]", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.contrastive_causal_score_bnlearn_constraint": [[429, 519], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.mean", "numpy.mean", "print", "range", "np.array.append", "np.array.append", "np.array.append", "np.array.append", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.ylim", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.show", "d.de_normalize_data", "d.de_normalize_data", "d.de_normalize_data.append", "d.de_normalize_data.append", "d.get_decoded_data", "d.get_decoded_data", "range", "numpy.array", "numpy.array", "parents.remove", "range", "len", "d.de_normalize_data.columns.get_loc", "d.de_normalize_data.columns.get_loc", "evaluation_functions.change_direction", "evaluation_functions.change_direction", "evaluation_functions.change_direction"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.good-cf-set-gen-bnlearn.change_direction", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.good-cf-set-gen-bnlearn.change_direction", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.good-cf-set-gen-bnlearn.change_direction"], ["x_true", "=", "[", "]", "\n", "for", "explanation", "in", "exp_res", ":", "\n", "                ", "x_pred", ".", "append", "(", "explanation", "[", "'x_cf'", "]", "[", "0", "]", ")", "\n", "x_true", ".", "append", "(", "explanation", "[", "'x'", "]", "[", "0", "]", ")", "\n", "\n", "", "x_pred", "=", "d", ".", "de_normalize_data", "(", "d", ".", "get_decoded_data", "(", "np", ".", "array", "(", "x_pred", ")", ")", ")", "\n", "x_true", "=", "d", ".", "de_normalize_data", "(", "d", ".", "get_decoded_data", "(", "np", ".", "array", "(", "x_true", ")", ")", ")", "\n", "\n", "# Monotonic Changes", "\n", "for", "node", "in", "constraint_nodes", ":", "\n", "                ", "parents", "=", "scm_model", "[", "node", "]", "[", "'parent'", "]", "\n", "if", "'Treatment'", "in", "parents", ":", "\n", "                    ", "parents", ".", "remove", "(", "'Treatment'", ")", "\n", "", "for", "idx", "in", "range", "(", "x_true", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "sign", "=", "-", "1", "\n", "for", "p_idx", "in", "range", "(", "len", "(", "parents", ")", ")", ":", "\n", "                        ", "key", "=", "x_true", ".", "columns", ".", "get_loc", "(", "parents", "[", "p_idx", "]", ")", "\n", "if", "p_idx", "==", "0", ":", "\n", "                            ", "sign", "=", "change_direction", "(", "x_true", ",", "x_pred", ",", "idx", ",", "key", ",", "0", ")", "\n", "", "else", ":", "\n", "                            ", "new_sign", "=", "change_direction", "(", "x_true", ",", "x_pred", ",", "idx", ",", "key", ",", "0", ")", "\n", "if", "sign", "!=", "new_sign", ":", "\n", "                                ", "sign", "=", "-", "1", "\n", "break", "\n", "\n", "# No Monotonic change in all parents, go to next CF ", "\n", "", "", "", "if", "sign", "==", "-", "1", ":", "\n", "                        ", "continue", "\n", "# Check whether Monotonic change of all parents is consistent with the node", "\n", "", "else", ":", "\n", "                        ", "key", "=", "x_true", ".", "columns", ".", "get_loc", "(", "node", ")", "\n", "new_sign", "=", "change_direction", "(", "x_true", ",", "x_pred", ",", "idx", ",", "key", ",", "offset", ")", "\n", "\n", "if", "sign", "==", "0", ":", "\n", "                            ", "if", "sign", "==", "new_sign", ":", "\n", "                                ", "valid_change_n", "+=", "1", "\n", "", "else", ":", "\n", "                                ", "invalid_change_n", "+=", "1", "\n", "", "test_size", "+=", "1", "\n", "", "elif", "sign", "==", "1", ":", "\n", "                            ", "if", "sign", "==", "new_sign", ":", "\n", "                                ", "valid_change_p", "+=", "1", "\n", "", "else", ":", "\n", "                                ", "invalid_change_p", "+=", "1", "\n", "", "test_size", "+=", "1", "\n", "\n", "", "", "", "", "", "valid_score_p_arr", ".", "append", "(", "valid_change_p", ")", "\n", "invalid_score_p_arr", ".", "append", "(", "invalid_change_p", ")", "\n", "valid_score_n_arr", ".", "append", "(", "valid_change_n", ")", "\n", "invalid_score_n_arr", ".", "append", "(", "invalid_change_n", ")", "\n", "\n", "", "valid_score_p_arr", "=", "np", ".", "array", "(", "valid_score_p_arr", ")", "\n", "invalid_score_p_arr", "=", "np", ".", "array", "(", "invalid_score_p_arr", ")", "\n", "valid_score_n_arr", "=", "np", ".", "array", "(", "valid_score_n_arr", ")", "\n", "invalid_score_n_arr", "=", "np", ".", "array", "(", "invalid_score_n_arr", ")", "\n", "\n", "score_p_arr", "=", "valid_score_p_arr", "/", "(", "valid_score_p_arr", "+", "invalid_score_p_arr", ")", "\n", "score_n_arr", "=", "valid_score_n_arr", "/", "(", "valid_score_n_arr", "+", "invalid_score_n_arr", ")", "\n", "score_p", "=", "np", ".", "mean", "(", "score_p_arr", ")", "\n", "score_n", "=", "np", ".", "mean", "(", "score_n_arr", ")", "\n", "\n", "if", "plot_case", ":", "\n", "        ", "plt", ".", "plot", "(", "sample_range", ",", "valid_score_arr", ",", "'*'", ",", "label", "=", "'Val Change'", ")", "\n", "plt", ".", "plot", "(", "sample_range", ",", "invalid_score_arr", ",", "'s'", ",", "label", "=", "'Inval Change'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'upper left'", ")", "\n", "plt", ".", "ylim", "(", "ymin", "=", "0", ",", "ymax", "=", "100", ")", "\n", "plt", ".", "title", "(", "'Change in x3'", ")", "\n", "plt", ".", "xlabel", "(", "'Sample Size'", ")", "\n", "plt", ".", "ylabel", "(", "'Percentage of CF'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "", "print", "(", "'Mean Monotonic Constraint Score: '", ",", "score_p", ",", "score_n", ",", "2", "*", "score_p", "*", "score_n", "/", "(", "score_p", "+", "score_n", ")", ")", "\n", "return", "score_p_arr", ",", "score_n_arr", "\n", "\n", "\n", "", "def", "contrastive_bnlearn_causal_graph_score", "(", "contrastive_exp", ",", "d", ",", "normalise_weights", ",", "scm_model", ",", "constraint_nodes", ",", "constraint_case", ",", "plot_case", ",", "sample_range", ")", ":", "\n", "\n", "    ", "score_arr", "=", "[", "]", "\n", "\n", "for", "sample_size", "in", "sample_range", ":", "\n", "        ", "score", "=", "0", "\n", "test_size", "=", "0", "\n", "for", "idx", "in", "range", "(", "sample_size", ")", ":", "\n", "            ", "exp_res", "=", "contrastive_exp", "[", "idx", "]", "\n", "x_pred", "=", "[", "]", "\n", "x_true", "=", "[", "]", "\n", "for", "explanation", "in", "exp_res", ":", "\n", "                ", "x_pred", ".", "append", "(", "explanation", "[", "'x_cf'", "]", "[", "0", "]", ")", "\n", "x_true", ".", "append", "(", "explanation", "[", "'x'", "]", "[", "0", "]", ")", "\n", "\n", "", "x_pred", "=", "torch", ".", "tensor", "(", "np", ".", "array", "(", "x_pred", ")", ")", ".", "float", "(", ")", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.contrastive_bnlearn_causal_graph_score": [[521, 558], ["print", "range", "score_arr.append", "matplotlib.plot", "matplotlib.legend", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.show", "numpy.mean", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "numpy.array", "torch.tensor().float.append", "torch.tensor().float.append", "evaluation_functions.bnlearn_scm_score", "evaluation_functions.bnlearn_scm_score", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.bnlearn_scm_score", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.bnlearn_scm_score"], ["\n", "", "score", "=", "score", "/", "sample_size", "\n", "score_arr", ".", "append", "(", "score", ")", "\n", "\n", "", "if", "constraint_case", ":", "\n", "        ", "title", "=", "'Likelihood Score'", "\n", "", "else", ":", "\n", "        ", "title", "=", "'Causal Graph Score'", "\n", "\n", "", "if", "plot_case", ":", "\n", "        ", "plt", ".", "plot", "(", "sample_range", ",", "score_arr", ",", "'*'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'upper left'", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "plt", ".", "xlabel", "(", "'Sample Size'", ")", "\n", "plt", ".", "ylabel", "(", "title", ")", "\n", "plt", ".", "show", "(", ")", "\n", "", "print", "(", "title", ",", "': '", ",", "np", ".", "mean", "(", "np", ".", "array", "(", "score_arr", ")", ")", ")", "\n", "return", "score_arr", "\n", "\n", "\n", "", "def", "validity_score", "(", "model", ",", "pred_model", ",", "train_dataset", ",", "case", ",", "sample_range", ")", ":", "\n", "\n", "    ", "validity_score_arr", "=", "[", "]", "\n", "for", "sample_size", "in", "sample_range", ":", "\n", "        ", "train_x", "=", "torch", ".", "tensor", "(", "train_dataset", ")", ".", "float", "(", ")", "\n", "train_y", "=", "torch", ".", "argmax", "(", "pred_model", "(", "train_x", ")", ",", "dim", "=", "1", ")", "\n", "valid_cf_count", "=", "0", "\n", "for", "sample_iter", "in", "range", "(", "sample_size", ")", ":", "\n", "            ", "recon_err", ",", "kl_err", ",", "x_true", ",", "x_pred", ",", "cf_label", "=", "model", ".", "compute_elbo", "(", "train_x", ",", "1.0", "-", "train_y", ",", "pred_model", ")", "\n", "cf_label", "=", "cf_label", ".", "numpy", "(", ")", "\n", "valid_cf_count", "+=", "np", ".", "sum", "(", "train_y", ".", "numpy", "(", ")", "!=", "cf_label", ")", "\n", "\n", "", "test_size", "=", "train_x", ".", "shape", "[", "0", "]", "\n", "valid_cf_count", "=", "valid_cf_count", "/", "sample_size", "\n", "validity_score_arr", ".", "append", "(", "100", "*", "valid_cf_count", "/", "test_size", ")", "\n", "\n", "", "if", "case", ":", "\n", "        ", "plt", ".", "plot", "(", "sample_range", ",", "validity_score_arr", ")", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.validity_score": [[671, 695], ["print", "torch.tensor().float", "torch.tensor().float", "torch.argmax", "torch.argmax", "range", "validity_score_arr.append", "matplotlib.plot", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.show", "numpy.mean", "pred_model", "model.compute_elbo", "cf_label.numpy.numpy", "numpy.sum", "numpy.array", "torch.tensor", "torch.tensor", "torch.argmax.numpy"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.CF_VAE.compute_elbo"], ["            ", "weights", "=", "weights", "[", "2", "]", "\n", "deviations", "=", "deviations", "[", "2", "]", "\n", "mean", "=", "weights", "[", "0", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "parents", ")", ")", ":", "\n", "                ", "if", "parents", "[", "idx", "]", "==", "'Treatment'", ":", "\n", "                    ", "continue", "\n", "", "key", "=", "d", ".", "encoded_feature_names", ".", "index", "(", "parents", "[", "idx", "]", ")", "\n", "w", "=", "weights", "[", "idx", "]", "# No neeed to add 1 because first parent is Treatment", "\n", "mean", "+=", "w", "*", "(", "de_normalise", "(", "xpred", "[", ":", ",", "key", "]", ",", "normalise_weights", "[", "key", "]", ")", ")", "\n", "", "var", "=", "torch", ".", "zeros", "(", "xpred", ".", "shape", "[", "0", "]", ",", "1", ")", ".", "fill_", "(", "deviations", "[", "0", "]", "**", "2", ")", "\n", "\n", "", "else", ":", "\n", "#Intercept", "\n", "            ", "mean", "=", "weights", "[", "0", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "parents", ")", ")", ":", "\n", "                ", "key", "=", "d", ".", "encoded_feature_names", ".", "index", "(", "parents", "[", "idx", "]", ")", "\n", "w", "=", "weights", "[", "idx", "+", "1", "]", "# Add 1 because the first case is intercept ", "\n", "#print(key, type(xpred))", "\n", "mean", "+=", "w", "*", "(", "de_normalise", "(", "xpred", "[", ":", ",", "key", "]", ",", "normalise_weights", "[", "key", "]", ")", ")", "\n", "", "var", "=", "torch", ".", "zeros", "(", "xpred", ".", "shape", "[", "0", "]", ",", "1", ")", ".", "fill_", "(", "deviations", "[", "0", "]", "**", "2", ")", "\n", "\n", "", "key", "=", "d", ".", "encoded_feature_names", ".", "index", "(", "node", ")", "\n", "delta_x", "=", "de_normalise", "(", "xpred", "[", ":", ",", "key", "]", ",", "normalise_weights", "[", "key", "]", ")", "\n", "#print( mean[0], delta_x[0], model.normal_likelihood(delta_x, mean, var)[0])", "\n", "score", "+=", "normal_likelihood", "(", "delta_x", ",", "mean", ",", "var", ")", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.proximity_score": [[696, 737], ["print", "torch.tensor().float", "torch.tensor().float", "torch.argmax", "torch.argmax", "range", "prox_score_arr.append", "matplotlib.plot", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.show", "numpy.mean", "pred_model", "model.compute_elbo", "d.de_normalize_data", "d.de_normalize_data", "matplotlib.title", "matplotlib.title", "numpy.array", "torch.tensor", "torch.tensor", "d.get_decoded_data", "d.get_decoded_data", "d.de_normalize_data.detach().numpy", "d.de_normalize_data.detach().numpy", "numpy.sum", "numpy.sum", "d.de_normalize_data.detach", "d.de_normalize_data.detach", "numpy.array", "numpy.array", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.CF_VAE.compute_elbo", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data"], ["\n", "", "return", "torch", ".", "mean", "(", "score", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "def", "bnlearn_causal_graph_score", "(", "model", ",", "pred_model", ",", "train_dataset", ",", "normalise_weights", ",", "d", ",", "scm_model", ",", "constraint_nodes", ",", "constraint_case", ",", "plot_case", ",", "sample_range", ")", ":", "\n", "\n", "    ", "score_arr", "=", "[", "]", "\n", "for", "sample_size", "in", "sample_range", ":", "\n", "        ", "train_x", "=", "torch", ".", "tensor", "(", "train_dataset", ")", ".", "float", "(", ")", "\n", "train_y", "=", "torch", ".", "argmax", "(", "pred_model", "(", "train_x", ")", ",", "dim", "=", "1", ")", "\n", "score", "=", "0", "\n", "\n", "for", "sample_iter", "in", "range", "(", "sample_size", ")", ":", "\n", "            ", "recon_err", ",", "kl_err", ",", "x_true", ",", "x_pred", ",", "cf_label", "=", "model", ".", "compute_elbo", "(", "train_x", ",", "1.0", "-", "train_y", ",", "pred_model", ")", "\n", "score", "+=", "bnlearn_scm_score", "(", "x_pred", ",", "normalise_weights", ",", "d", ",", "scm_model", ",", "constraint_nodes", ",", "constraint_case", ")", "\n", "\n", "", "score", "=", "score", "/", "sample_size", "\n", "score_arr", ".", "append", "(", "score", ")", "\n", "\n", "", "if", "constraint_case", ":", "\n", "        ", "title", "=", "'Likelihood Score'", "\n", "", "else", ":", "\n", "        ", "title", "=", "'Causal Graph Score'", "\n", "\n", "", "if", "plot_case", ":", "\n", "        ", "plt", ".", "plot", "(", "sample_range", ",", "score_arr", ",", "'*'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'upper left'", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "plt", ".", "xlabel", "(", "'Sample Size'", ")", "\n", "plt", ".", "ylabel", "(", "title", ")", "\n", "plt", ".", "show", "(", ")", "\n", "", "print", "(", "title", ",", "': '", ",", "np", ".", "mean", "(", "np", ".", "array", "(", "score_arr", ")", ")", ")", "\n", "return", "score_arr", "\n", "\n", "", "def", "bnlearn_path_constraint_score", "(", "model", ",", "pred_model", ",", "train_dataset", ",", "d", ",", "scm_model", ",", "constraint_nodes", ",", "plot_case", ",", "sample_range", ")", ":", "\n", "\n", "    ", "valid_score_arr", "=", "[", "]", "\n", "invalid_score_arr", "=", "[", "]", "\n", "for", "sample_size", "in", "sample_range", ":", "\n", "        ", "train_x", "=", "torch", ".", "tensor", "(", "train_dataset", ")", ".", "float", "(", ")", "\n", "train_y", "=", "torch", ".", "argmax", "(", "pred_model", "(", "train_x", ")", ",", "dim", "=", "1", ")", "\n", "valid_change", "=", "0", "\n", "invalid_change", "=", "0", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.diversity_score": [[739, 779], ["matplotlib.plot", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.show", "torch.tensor().float", "torch.tensor().float", "torch.argmax", "torch.argmax", "range", "range", "divr_score_arr.append", "matplotlib.title", "matplotlib.title", "pred_model", "model.compute_elbo", "d.de_normalize_data", "d.de_normalize_data", "cf_gen.append", "range", "torch.tensor", "torch.tensor", "d.get_decoded_data", "d.get_decoded_data", "d.de_normalize_data.detach().numpy", "d.de_normalize_data.detach().numpy", "numpy.sum", "d.de_normalize_data.detach", "d.de_normalize_data.detach", "numpy.sum", "numpy.array", "numpy.array", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.CF_VAE.compute_elbo", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data"], ["\n", "for", "sample_iter", "in", "range", "(", "sample_size", ")", ":", "\n", "            ", "recon_err", ",", "kl_err", ",", "x_true", ",", "x_pred", ",", "cf_label", "=", "model", ".", "compute_elbo", "(", "train_x", ",", "1.0", "-", "train_y", ",", "pred_model", ")", "\n", "\n", "x_pred", "=", "d", ".", "de_normalize_data", "(", "d", ".", "get_decoded_data", "(", "x_pred", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "x_true", "=", "d", ".", "de_normalize_data", "(", "d", ".", "get_decoded_data", "(", "x_true", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "\n", "# Path Changes", "\n", "for", "idx", "in", "range", "(", "x_true", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "for", "node_idx", "in", "range", "(", "len", "(", "constraint_nodes", ")", ")", ":", "\n", "                    ", "key", "=", "x_true", ".", "columns", ".", "get_loc", "(", "constraint_nodes", "[", "node_idx", "]", ")", "\n", "if", "node_idx", "==", "0", ":", "\n", "                        ", "sign", "=", "change_direction", "(", "x_true", ",", "x_pred", ",", "idx", ",", "key", ",", "0", ")", "\n", "", "else", ":", "\n", "                        ", "new_sign", "=", "change_direction", "(", "x_true", ",", "x_pred", ",", "idx", ",", "key", ",", "0", ")", "\n", "if", "sign", "==", "new_sign", ":", "\n", "                            ", "valid_change", "+=", "1", "\n", "", "else", ":", "\n", "                            ", "invalid_change", "+=", "1", "\n", "", "test_size", "+=", "1", "\n", "\n", "", "", "", "", "print", "(", "test_size", ",", "train_x", ".", "shape", "[", "0", "]", ")", "\n", "valid_score_arr", ".", "append", "(", "100", "*", "valid_change", "/", "test_size", ")", "\n", "invalid_score_arr", ".", "append", "(", "100", "*", "invalid_change", "/", "test_size", ")", "\n", "\n", "", "valid_score", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "valid_score_arr", ")", ")", "\n", "invalid_score", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "invalid_score_arr", ")", ")", "\n", "\n", "if", "plot_case", ":", "\n", "        ", "plt", ".", "plot", "(", "sample_range", ",", "valid_score_arr", ",", "'*'", ",", "label", "=", "'Val Change'", ")", "\n", "plt", ".", "plot", "(", "sample_range", ",", "invalid_score_arr", ",", "'s'", ",", "label", "=", "'Inval Change'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'upper left'", ")", "\n", "plt", ".", "ylim", "(", "ymin", "=", "0", ",", "ymax", "=", "100", ")", "\n", "plt", ".", "title", "(", "'Change in constrained node'", ")", "\n", "plt", ".", "xlabel", "(", "'Sample Size'", ")", "\n", "plt", ".", "ylabel", "(", "'Percentage of CF'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "", "print", "(", "'Mean Monotonic Constraint Score: '", ",", "valid_score", ",", "invalid_score", ",", "valid_score", "/", "(", "valid_score", "+", "invalid_score", ")", ")", "\n", "return", "valid_score_arr", ",", "invalid_score_arr", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.bnlearn_scm_score": [[781, 828], ["torch.zeros", "torch.zeros", "torch.mean().detach().numpy", "torch.mean().detach().numpy", "list", "list.remove", "d.encoded_feature_names.index", "evaluation_functions.de_normalise", "evaluation_functions.normal_likelihood", "scm_model.keys", "len", "range", "torch.zeros().fill_", "torch.zeros().fill_", "range", "torch.zeros().fill_", "torch.zeros().fill_", "torch.mean().detach", "torch.mean().detach", "len", "d.encoded_feature_names.index", "len", "d.encoded_feature_names.index", "evaluation_functions.de_normalise", "torch.zeros", "torch.zeros", "evaluation_functions.de_normalise", "torch.zeros", "torch.zeros", "torch.mean", "torch.mean"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf.de_normalise", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.AutoEncoder.normal_likelihood", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf.de_normalise", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf.de_normalise"], ["", "def", "bnlearn_causal_score", "(", "model", ",", "pred_model", ",", "train_dataset", ",", "d", ",", "normalise_weights", ",", "offset", ",", "scm_model", ",", "constraint_nodes", ",", "plot_case", ",", "sample_range", ")", ":", "\n", "\n", "    ", "valid_score_p_arr", "=", "[", "]", "\n", "invalid_score_p_arr", "=", "[", "]", "\n", "valid_score_n_arr", "=", "[", "]", "\n", "invalid_score_n_arr", "=", "[", "]", "\n", "\n", "for", "sample_size", "in", "sample_range", ":", "\n", "        ", "train_x", "=", "torch", ".", "tensor", "(", "train_dataset", ")", ".", "float", "(", ")", "\n", "train_y", "=", "torch", ".", "argmax", "(", "pred_model", "(", "train_x", ")", ",", "dim", "=", "1", ")", "\n", "valid_change_p", "=", "0", "\n", "invalid_change_p", "=", "0", "\n", "valid_change_n", "=", "0", "\n", "invalid_change_n", "=", "0", "\n", "\n", "test_size", "=", "0", "\n", "for", "sample_iter", "in", "range", "(", "sample_size", ")", ":", "\n", "            ", "recon_err", ",", "kl_err", ",", "x_true", ",", "x_pred", ",", "cf_label", "=", "model", ".", "compute_elbo", "(", "train_x", ",", "1.0", "-", "train_y", ",", "pred_model", ")", "\n", "\n", "x_pred", "=", "d", ".", "de_normalize_data", "(", "d", ".", "get_decoded_data", "(", "x_pred", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "x_true", "=", "d", ".", "de_normalize_data", "(", "d", ".", "get_decoded_data", "(", "x_true", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "\n", "\n", "# Monotonic Changes", "\n", "for", "node", "in", "constraint_nodes", ":", "\n", "                ", "parents", "=", "scm_model", "[", "node", "]", "[", "'parent'", "]", "\n", "if", "'Treatment'", "in", "parents", ":", "\n", "                    ", "parents", ".", "remove", "(", "'Treatment'", ")", "\n", "", "for", "idx", "in", "range", "(", "x_true", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "sign", "=", "-", "1", "\n", "for", "p_idx", "in", "range", "(", "len", "(", "parents", ")", ")", ":", "\n", "                        ", "key", "=", "x_true", ".", "columns", ".", "get_loc", "(", "parents", "[", "p_idx", "]", ")", "\n", "if", "p_idx", "==", "0", ":", "\n", "                            ", "sign", "=", "change_direction", "(", "x_true", ",", "x_pred", ",", "idx", ",", "key", ",", "0", ")", "\n", "", "else", ":", "\n", "                            ", "new_sign", "=", "change_direction", "(", "x_true", ",", "x_pred", ",", "idx", ",", "key", ",", "0", ")", "\n", "if", "sign", "!=", "new_sign", ":", "\n", "                                ", "sign", "=", "-", "1", "\n", "break", "\n", "\n", "# No Monotonic change in all parents, go to next CF ", "\n", "", "", "", "if", "sign", "==", "-", "1", ":", "\n", "                        ", "continue", "\n", "# Check whether Monotonic change of all parents is consistent with the node", "\n", "", "else", ":", "\n", "                        ", "key", "=", "x_true", ".", "columns", ".", "get_loc", "(", "node", ")", "\n", "new_sign", "=", "change_direction", "(", "x_true", ",", "x_pred", ",", "idx", ",", "key", ",", "offset", ")", "\n", "if", "sign", "==", "0", ":", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.bnlearn_causal_graph_score": [[829, 858], ["print", "torch.tensor().float", "torch.tensor().float", "torch.argmax", "torch.argmax", "range", "score_arr.append", "matplotlib.plot", "matplotlib.legend", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.show", "numpy.mean", "pred_model", "model.compute_elbo", "numpy.array", "torch.tensor", "torch.tensor", "evaluation_functions.bnlearn_scm_score", "evaluation_functions.bnlearn_scm_score"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.CF_VAE.compute_elbo", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.bnlearn_scm_score", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.bnlearn_scm_score"], ["                            ", "if", "sign", "==", "new_sign", ":", "\n", "                                ", "valid_change_n", "+=", "1", "\n", "", "else", ":", "\n", "                                ", "invalid_change_n", "+=", "1", "\n", "", "test_size", "+=", "1", "\n", "", "elif", "sign", "==", "1", ":", "\n", "                            ", "if", "sign", "==", "new_sign", ":", "\n", "                                ", "valid_change_p", "+=", "1", "\n", "", "else", ":", "\n", "                                ", "invalid_change_p", "+=", "1", "\n", "", "test_size", "+=", "1", "\n", "\n", "", "", "", "", "", "valid_score_p_arr", ".", "append", "(", "valid_change_p", ")", "\n", "invalid_score_p_arr", ".", "append", "(", "invalid_change_p", ")", "\n", "valid_score_n_arr", ".", "append", "(", "valid_change_n", ")", "\n", "invalid_score_n_arr", ".", "append", "(", "invalid_change_n", ")", "\n", "\n", "", "valid_score_p_arr", "=", "np", ".", "array", "(", "valid_score_p_arr", ")", "\n", "invalid_score_p_arr", "=", "np", ".", "array", "(", "invalid_score_p_arr", ")", "\n", "valid_score_n_arr", "=", "np", ".", "array", "(", "valid_score_n_arr", ")", "\n", "invalid_score_n_arr", "=", "np", ".", "array", "(", "invalid_score_n_arr", ")", "\n", "\n", "score_p_arr", "=", "valid_score_p_arr", "/", "(", "valid_score_p_arr", "+", "invalid_score_p_arr", ")", "\n", "score_n_arr", "=", "valid_score_n_arr", "/", "(", "valid_score_n_arr", "+", "invalid_score_n_arr", ")", "\n", "score_p", "=", "np", ".", "mean", "(", "score_p_arr", ")", "\n", "score_n", "=", "np", ".", "mean", "(", "score_n_arr", ")", "\n", "\n", "if", "plot_case", ":", "\n", "        ", "plt", ".", "plot", "(", "sample_range", ",", "valid_score_arr", ",", "'*'", ",", "label", "=", "'Val Change'", ")", "\n", "plt", ".", "plot", "(", "sample_range", ",", "invalid_score_arr", ",", "'s'", ",", "label", "=", "'Inval Change'", ")", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.bnlearn_path_constraint_score": [[859, 909], ["numpy.mean", "numpy.mean", "print", "torch.tensor().float", "torch.tensor().float", "torch.argmax", "torch.argmax", "range", "print", "valid_score_arr.append", "invalid_score_arr.append", "numpy.array", "numpy.array", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.ylim", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.show", "pred_model", "model.compute_elbo", "d.de_normalize_data", "d.de_normalize_data", "range", "torch.tensor", "torch.tensor", "d.get_decoded_data", "d.get_decoded_data", "range", "d.de_normalize_data.detach().numpy", "d.de_normalize_data.detach().numpy", "len", "d.de_normalize_data.columns.get_loc", "evaluation_functions.change_direction", "evaluation_functions.change_direction", "d.de_normalize_data.detach", "d.de_normalize_data.detach"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.CF_VAE.compute_elbo", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.good-cf-set-gen-bnlearn.change_direction", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.good-cf-set-gen-bnlearn.change_direction"], ["plt", ".", "legend", "(", "loc", "=", "'upper left'", ")", "\n", "plt", ".", "ylim", "(", "ymin", "=", "0", ",", "ymax", "=", "100", ")", "\n", "plt", ".", "title", "(", "'Change in x3'", ")", "\n", "plt", ".", "xlabel", "(", "'Sample Size'", ")", "\n", "plt", ".", "ylabel", "(", "'Percentage of CF'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "", "print", "(", "'Mean Monotonic Constraint Score: '", ",", "score_p", ",", "score_n", ",", "2", "*", "score_p", "*", "score_n", "/", "(", "score_p", "+", "score_n", ")", ")", "\n", "return", "score_p_arr", ",", "score_n_arr", "\n", "\n", "\n", "", "def", "oracle_func_approx_score", "(", "model", ",", "x", ",", "normalise_weights", ")", ":", "\n", "    ", "mean", "=", "10", "*", "(", "(", "de_normalise", "(", "x", "[", ":", ",", "0", "]", ",", "normalise_weights", "[", "0", "]", ")", "+", "de_normalise", "(", "x", "[", ":", ",", "1", "]", ",", "normalise_weights", "[", "1", "]", ")", ")", "**", "2", "/", "180", "**", "2", ")", "+", "10", "\n", "score", "=", "torch", ".", "abs", "(", "de_normalise", "(", "x", "[", ":", ",", "2", "]", ",", "normalise_weights", "[", "2", "]", ")", "-", "mean", ")", "\n", "\n", "return", "torch", ".", "mean", "(", "score", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "\n", "", "def", "oracle_score", "(", "x", ",", "normalise_weights", ")", ":", "\n", "#     mean= 10*(( w0*x[:,0]+w1*x[:,1])**2/180**2) + 10", "\n", "#     var= 0.5", "\n", "#     score= ((w2*x[:,2] - mean)*(1./var)*(w2*x[:,2]-mean) )", "\n", "\n", "    ", "mean", "=", "10", "*", "(", "(", "de_normalise", "(", "x", "[", ":", ",", "0", "]", ",", "normalise_weights", "[", "0", "]", ")", "+", "de_normalise", "(", "x", "[", ":", ",", "1", "]", ",", "normalise_weights", "[", "1", "]", ")", ")", "**", "2", "/", "180", "**", "2", ")", "+", "10", "\n", "var", "=", "torch", ".", "zeros", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ")", ".", "fill_", "(", "0.5", ")", "\n", "score", "=", "normal_likelihood", "(", "de_normalise", "(", "x", "[", ":", ",", "2", "]", ",", "normalise_weights", "[", "2", "]", ")", ",", "mean", ",", "var", ")", "\n", "\n", "return", "torch", ".", "mean", "(", "score", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "def", "oracle_causal_graph_score", "(", "x", ",", "normalise_weights", ")", ":", "\n", "\n", "    ", "mean", "=", "torch", ".", "zeros", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ")", ".", "fill_", "(", "50.0", ")", "\n", "var", "=", "torch", ".", "zeros", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ")", ".", "fill_", "(", "15.0", ")", "\n", "score", "=", "normal_likelihood", "(", "de_normalise", "(", "x", "[", ":", ",", "0", "]", ",", "normalise_weights", "[", "0", "]", ")", ",", "mean", ",", "var", ")", "\n", "\n", "mean", "=", "torch", ".", "zeros", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ")", ".", "fill_", "(", "50.0", ")", "\n", "var", "=", "torch", ".", "zeros", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ")", ".", "fill_", "(", "17.0", ")", "\n", "score", "+=", "normal_likelihood", "(", "de_normalise", "(", "x", "[", ":", ",", "1", "]", ",", "normalise_weights", "[", "1", "]", ")", ",", "mean", ",", "var", ")", "\n", "\n", "mean", "=", "10", "*", "(", "(", "de_normalise", "(", "x", "[", ":", ",", "0", "]", ",", "normalise_weights", "[", "0", "]", ")", "+", "de_normalise", "(", "x", "[", ":", ",", "1", "]", ",", "normalise_weights", "[", "1", "]", ")", ")", "**", "2", "/", "180", "**", "2", ")", "+", "10", "\n", "var", "=", "torch", ".", "zeros", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ")", ".", "fill_", "(", "0.5", ")", "\n", "score", "=", "normal_likelihood", "(", "de_normalise", "(", "x", "[", ":", ",", "2", "]", ",", "normalise_weights", "[", "2", "]", ")", ",", "mean", ",", "var", ")", "\n", "\n", "return", "torch", ".", "mean", "(", "score", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "def", "causal_graph_score", "(", "model", ",", "pred_model", ",", "train_dataset", ",", "normalise_weights", ",", "case", ",", "sample_range", ")", ":", "\n", "\n", "    ", "score_arr", "=", "[", "]", "\n", "for", "sample_size", "in", "sample_range", ":", "\n", "        ", "train_x", "=", "torch", ".", "tensor", "(", "train_dataset", ")", ".", "float", "(", ")", "\n", "train_y", "=", "torch", ".", "argmax", "(", "pred_model", "(", "train_x", ")", ",", "dim", "=", "1", ")", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.bnlearn_causal_score": [[911, 998], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.mean", "numpy.mean", "print", "torch.tensor().float", "torch.tensor().float", "torch.argmax", "torch.argmax", "range", "np.array.append", "np.array.append", "np.array.append", "np.array.append", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.ylim", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.show", "pred_model", "model.compute_elbo", "d.de_normalize_data", "d.de_normalize_data", "torch.tensor", "torch.tensor", "d.get_decoded_data", "d.get_decoded_data", "range", "d.de_normalize_data.detach().numpy", "d.de_normalize_data.detach().numpy", "parents.remove", "range", "len", "d.de_normalize_data.columns.get_loc", "d.de_normalize_data.columns.get_loc", "evaluation_functions.change_direction", "d.de_normalize_data.detach", "d.de_normalize_data.detach", "evaluation_functions.change_direction", "evaluation_functions.change_direction"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.CF_VAE.compute_elbo", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.good-cf-set-gen-bnlearn.change_direction", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.good-cf-set-gen-bnlearn.change_direction", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.good-cf-set-gen-bnlearn.change_direction"], ["\n", "for", "sample_iter", "in", "range", "(", "sample_size", ")", ":", "\n", "            ", "recon_err", ",", "kl_err", ",", "x_true", ",", "x_pred", ",", "cf_label", "=", "model", ".", "compute_elbo", "(", "train_x", ",", "1.0", "-", "train_y", ",", "pred_model", ")", "\n", "score", "+=", "oracle_causal_graph_score", "(", "x_pred", ",", "normalise_weights", ")", "\n", "\n", "", "score", "=", "score", "/", "sample_size", "\n", "score_arr", ".", "append", "(", "score", ")", "\n", "\n", "", "if", "case", ":", "\n", "        ", "plt", ".", "plot", "(", "sample_range", ",", "score_arr", ",", "'*'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'upper left'", ")", "\n", "plt", ".", "title", "(", "'Causal Graph Score'", ")", "\n", "plt", ".", "xlabel", "(", "'Sample Size'", ")", "\n", "plt", ".", "ylabel", "(", "'Causal Graph Score'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "", "print", "(", "'Mean Causal Graph Score: '", ",", "np", ".", "mean", "(", "np", ".", "array", "(", "score_arr", ")", ")", ")", "\n", "return", "score_arr", "\n", "\n", "", "def", "distribution_score", "(", "model", ",", "pred_model", ",", "train_dataset", ",", "normalise_weights", ",", "case", ",", "sample_range", ")", ":", "\n", "\n", "    ", "score_arr", "=", "[", "]", "\n", "for", "sample_size", "in", "sample_range", ":", "\n", "        ", "train_x", "=", "torch", ".", "tensor", "(", "train_dataset", ")", ".", "float", "(", ")", "\n", "train_y", "=", "torch", ".", "argmax", "(", "pred_model", "(", "train_x", ")", ",", "dim", "=", "1", ")", "\n", "score", "=", "0", "\n", "\n", "for", "sample_iter", "in", "range", "(", "sample_size", ")", ":", "\n", "            ", "recon_err", ",", "kl_err", ",", "x_true", ",", "x_pred", ",", "cf_label", "=", "model", ".", "compute_elbo", "(", "train_x", ",", "1.0", "-", "train_y", ",", "pred_model", ")", "\n", "score", "+=", "oracle_score", "(", "x_pred", ",", "normalise_weights", ")", "\n", "\n", "", "score", "=", "score", "/", "sample_size", "\n", "score_arr", ".", "append", "(", "score", ")", "\n", "\n", "", "if", "case", ":", "\n", "        ", "plt", ".", "plot", "(", "sample_range", ",", "score_arr", ",", "'*'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'upper left'", ")", "\n", "plt", ".", "title", "(", "'Likelihood Score'", ")", "\n", "plt", ".", "xlabel", "(", "'Sample Size'", ")", "\n", "plt", ".", "ylabel", "(", "'Likelihood Score'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "", "print", "(", "'Mean Distribution Constraint Score: '", ",", "np", ".", "mean", "(", "np", ".", "array", "(", "score_arr", ")", ")", ")", "\n", "return", "score_arr", "\n", "\n", "", "def", "func_approx_score", "(", "model", ",", "pred_model", ",", "train_dataset", ",", "normalise_weights", ",", "case", ",", "sample_range", ")", ":", "\n", "\n", "    ", "score_arr", "=", "[", "]", "\n", "for", "sample_size", "in", "sample_range", ":", "\n", "        ", "train_x", "=", "torch", ".", "tensor", "(", "train_dataset", ")", ".", "float", "(", ")", "\n", "train_y", "=", "torch", ".", "argmax", "(", "pred_model", "(", "train_x", ")", ",", "dim", "=", "1", ")", "\n", "score", "=", "0", "\n", "\n", "for", "sample_iter", "in", "range", "(", "sample_size", ")", ":", "\n", "            ", "recon_err", ",", "kl_err", ",", "x_true", ",", "x_pred", ",", "cf_label", "=", "model", ".", "compute_elbo", "(", "train_x", ",", "1.0", "-", "train_y", ",", "pred_model", ")", "\n", "score", "+=", "oracle_func_approx_score", "(", "model", ",", "x_pred", ",", "normalise_weights", ")", "\n", "\n", "", "score", "=", "score", "/", "sample_size", "\n", "score_arr", ".", "append", "(", "score", ")", "\n", "\n", "", "if", "case", ":", "\n", "        ", "plt", ".", "plot", "(", "sample_range", ",", "score_arr", ",", "'*'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'upper left'", ")", "\n", "plt", ".", "title", "(", "'Likelihood Score'", ")", "\n", "plt", ".", "xlabel", "(", "'Sample Size'", ")", "\n", "plt", ".", "ylabel", "(", "'Likelihood Score'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "", "print", "(", "'Mean Func Approxmiation Score: '", ",", "np", ".", "mean", "(", "np", ".", "array", "(", "score_arr", ")", ")", ")", "\n", "return", "score_arr", "\n", "\n", "\n", "", "def", "causal_score", "(", "model", ",", "pred_model", ",", "train_dataset", ",", "d", ",", "normalise_weights", ",", "offset", ",", "case", ",", "sample_range", ")", ":", "\n", "\n", "    ", "valid_score_p_arr", "=", "[", "]", "\n", "invalid_score_p_arr", "=", "[", "]", "\n", "valid_score_n_arr", "=", "[", "]", "\n", "invalid_score_n_arr", "=", "[", "]", "\n", "\n", "for", "sample_size", "in", "sample_range", ":", "\n", "        ", "train_x", "=", "torch", ".", "tensor", "(", "train_dataset", ")", ".", "float", "(", ")", "\n", "train_y", "=", "torch", ".", "argmax", "(", "pred_model", "(", "train_x", ")", ",", "dim", "=", "1", ")", "\n", "valid_change_p", "=", "0", "\n", "invalid_change_p", "=", "0", "\n", "valid_change_n", "=", "0", "\n", "invalid_change_n", "=", "0", "\n", "\n", "for", "sample_iter", "in", "range", "(", "sample_size", ")", ":", "\n", "            ", "recon_err", ",", "kl_err", ",", "x_true", ",", "x_pred", ",", "cf_label", "=", "model", ".", "compute_elbo", "(", "train_x", ",", "1.0", "-", "train_y", ",", "pred_model", ")", "\n", "\n", "x_pred", "=", "d", ".", "de_normalize_data", "(", "d", ".", "get_decoded_data", "(", "x_pred", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.oracle_func_approx_score": [[1000, 1005], ["torch.abs", "torch.abs", "torch.mean().detach().numpy", "torch.mean().detach().numpy", "evaluation_functions.de_normalise", "torch.mean().detach", "torch.mean().detach", "torch.mean", "torch.mean", "evaluation_functions.de_normalise", "evaluation_functions.de_normalise"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf.de_normalise", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf.de_normalise", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf.de_normalise"], ["\n", "x1_idx", "=", "x_true", ".", "columns", ".", "get_loc", "(", "'x1'", ")", "\n", "x2_idx", "=", "x_true", ".", "columns", ".", "get_loc", "(", "'x2'", ")", "\n", "x3_idx", "=", "x_true", ".", "columns", ".", "get_loc", "(", "'x3'", ")", "\n", "for", "i", "in", "range", "(", "x_true", ".", "shape", "[", "0", "]", ")", ":", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.oracle_score": [[1007, 1017], ["torch.zeros().fill_", "torch.zeros().fill_", "evaluation_functions.normal_likelihood", "torch.mean().detach().numpy", "torch.mean().detach().numpy", "evaluation_functions.de_normalise", "torch.zeros", "torch.zeros", "torch.mean().detach", "torch.mean().detach", "torch.mean", "torch.mean", "evaluation_functions.de_normalise", "evaluation_functions.de_normalise"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.AutoEncoder.normal_likelihood", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf.de_normalise", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf.de_normalise", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf.de_normalise"], ["                    ", "if", "x_pred", ".", "iloc", "[", "i", ",", "x3_idx", "]", "+", "de_scale", "(", "offset", ",", "normalise_weights", "[", "2", "]", ")", "<", "x_true", ".", "iloc", "[", "i", ",", "x3_idx", "]", ":", "\n", "                        ", "valid_change_n", "+=", "1", "\n", "", "else", ":", "\n", "                        ", "invalid_change_n", "+=", "1", "\n", "", "", "if", "x_pred", ".", "iloc", "[", "i", ",", "x1_idx", "]", ">", "x_true", ".", "iloc", "[", "i", ",", "x1_idx", "]", "and", "x_pred", ".", "iloc", "[", "i", ",", "x2_idx", "]", ">", "x_true", ".", "iloc", "[", "i", ",", "x2_idx", "]", ":", "\n", "                    ", "if", "x_pred", ".", "iloc", "[", "i", ",", "x3_idx", "]", "-", "de_scale", "(", "offset", ",", "normalise_weights", "[", "2", "]", ")", ">", "x_true", ".", "iloc", "[", "i", ",", "x3_idx", "]", ":", "\n", "                        ", "valid_change_p", "+=", "1", "\n", "", "else", ":", "\n", "                        ", "invalid_change_p", "+=", "1", "\n", "\n", "", "", "", "", "valid_change_p", "=", "valid_change_p", "/", "sample_size", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.oracle_causal_graph_score": [[1018, 1033], ["torch.zeros().fill_", "torch.zeros().fill_", "torch.zeros().fill_", "torch.zeros().fill_", "evaluation_functions.normal_likelihood", "torch.zeros().fill_", "torch.zeros().fill_", "torch.zeros().fill_", "torch.zeros().fill_", "evaluation_functions.normal_likelihood", "torch.zeros().fill_", "torch.zeros().fill_", "evaluation_functions.normal_likelihood", "torch.mean().detach().numpy", "torch.mean().detach().numpy", "evaluation_functions.de_normalise", "evaluation_functions.de_normalise", "evaluation_functions.de_normalise", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.mean().detach", "torch.mean().detach", "torch.mean", "torch.mean", "evaluation_functions.de_normalise", "evaluation_functions.de_normalise"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.AutoEncoder.normal_likelihood", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.AutoEncoder.normal_likelihood", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.AutoEncoder.normal_likelihood", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf.de_normalise", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf.de_normalise", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf.de_normalise", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf.de_normalise", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf.de_normalise"], ["invalid_change_p", "=", "invalid_change_p", "/", "sample_size", "\n", "valid_change_n", "=", "valid_change_p", "/", "sample_size", "\n", "invalid_change_n", "=", "invalid_change_p", "/", "sample_size", "\n", "\n", "#         print(sample_size, low_change, valid_high_change, invalid_high_change)", "\n", "test_size", "=", "train_x", ".", "shape", "[", "0", "]", "\n", "\n", "valid_score_p_arr", ".", "append", "(", "100", "*", "valid_change_p", "/", "test_size", ")", "\n", "invalid_score_p_arr", ".", "append", "(", "100", "*", "invalid_change_p", "/", "test_size", ")", "\n", "valid_score_n_arr", ".", "append", "(", "100", "*", "valid_change_n", "/", "test_size", ")", "\n", "invalid_score_n_arr", ".", "append", "(", "100", "*", "invalid_change_n", "/", "test_size", ")", "\n", "\n", "", "valid_score_p_arr", "=", "np", ".", "array", "(", "valid_score_p_arr", ")", "\n", "invalid_score_p_arr", "=", "np", ".", "array", "(", "invalid_score_p_arr", ")", "\n", "valid_score_n_arr", "=", "np", ".", "array", "(", "valid_score_n_arr", ")", "\n", "invalid_score_n_arr", "=", "np", ".", "array", "(", "invalid_score_n_arr", ")", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.causal_graph_score": [[1034, 1058], ["print", "torch.tensor().float", "torch.tensor().float", "torch.argmax", "torch.argmax", "range", "score_arr.append", "matplotlib.plot", "matplotlib.legend", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.show", "numpy.mean", "pred_model", "model.compute_elbo", "evaluation_functions.oracle_causal_graph_score", "numpy.array", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.CF_VAE.compute_elbo", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.oracle_causal_graph_score"], ["\n", "score_p_arr", "=", "valid_score_p_arr", "/", "(", "valid_score_p_arr", "+", "invalid_score_p_arr", ")", "\n", "score_n_arr", "=", "valid_score_n_arr", "/", "(", "valid_score_n_arr", "+", "invalid_score_n_arr", ")", "\n", "score_p", "=", "np", ".", "mean", "(", "score_p_arr", ")", "\n", "score_n", "=", "np", ".", "mean", "(", "score_n_arr", ")", "\n", "\n", "if", "case", ":", "\n", "        ", "plt", ".", "plot", "(", "sample_range", ",", "valid_score_arr", ",", "'*'", ",", "label", "=", "'Val Change'", ")", "\n", "plt", ".", "plot", "(", "sample_range", ",", "invalid_score_arr", ",", "'s'", ",", "label", "=", "'Inval Change'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'upper left'", ")", "\n", "plt", ".", "ylim", "(", "ymin", "=", "0", ",", "ymax", "=", "100", ")", "\n", "plt", ".", "title", "(", "'Change in x3'", ")", "\n", "plt", ".", "xlabel", "(", "'Sample Size'", ")", "\n", "plt", ".", "ylabel", "(", "'Percentage of CF'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "", "print", "(", "'Mean Monotonic Constraint Score: '", ",", "score_p", ",", "score_n", ",", "2", "*", "score_p", "*", "score_n", "/", "(", "score_p", "+", "score_n", ")", ")", "\n", "return", "score_p_arr", ",", "score_n_arr", "\n", "\n", "\n", "", "def", "causal_score_age_ed_constraint", "(", "model", ",", "pred_model", ",", "train_dataset", ",", "d", ",", "normalise_weights", ",", "offset", ",", "case", ",", "sample_range", ")", ":", "\n", "\n", "    ", "valid_score_arr", "=", "[", "]", "\n", "invalid_score_arr", "=", "[", "]", "\n", "count1", "=", "0", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.distribution_score": [[1059, 1084], ["print", "torch.tensor().float", "torch.tensor().float", "torch.argmax", "torch.argmax", "range", "score_arr.append", "matplotlib.plot", "matplotlib.legend", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.show", "numpy.mean", "pred_model", "model.compute_elbo", "numpy.array", "torch.tensor", "torch.tensor", "evaluation_functions.oracle_score", "evaluation_functions.oracle_score"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.CF_VAE.compute_elbo", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.oracle_score", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.oracle_score"], ["count2", "=", "0", "\n", "count3", "=", "0", "\n", "pos1", "=", "0", "\n", "pos2", "=", "0", "\n", "pos3", "=", "0", "\n", "\n", "for", "sample_size", "in", "sample_range", ":", "\n", "        ", "train_x", "=", "torch", ".", "tensor", "(", "train_dataset", ")", ".", "float", "(", ")", "\n", "train_y", "=", "torch", ".", "argmax", "(", "pred_model", "(", "train_x", ")", ",", "dim", "=", "1", ")", "\n", "valid_change", "=", "0", "\n", "invalid_change", "=", "0", "\n", "test_size", "=", "0", "\n", "\n", "for", "sample_iter", "in", "range", "(", "sample_size", ")", ":", "\n", "            ", "recon_err", ",", "kl_err", ",", "x_true", ",", "x_pred", ",", "cf_label", "=", "model", ".", "compute_elbo", "(", "train_x", ",", "1.0", "-", "train_y", ",", "pred_model", ")", "\n", "\n", "x_pred", "=", "d", ".", "de_normalize_data", "(", "d", ".", "get_decoded_data", "(", "x_pred", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "x_true", "=", "d", ".", "de_normalize_data", "(", "d", ".", "get_decoded_data", "(", "x_true", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "\n", "ed_idx", "=", "x_true", ".", "columns", ".", "get_loc", "(", "'education'", ")", "\n", "age_idx", "=", "x_true", ".", "columns", ".", "get_loc", "(", "'age'", ")", "\n", "\n", "for", "i", "in", "range", "(", "x_true", ".", "shape", "[", "0", "]", ")", ":", "\n", "\n", "                ", "if", "cf_label", "[", "i", "]", "==", "0", ":", "\n", "#print(cf_label[i])", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.func_approx_score": [[1085, 1109], ["print", "torch.tensor().float", "torch.tensor().float", "torch.argmax", "torch.argmax", "range", "score_arr.append", "matplotlib.plot", "matplotlib.legend", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.show", "numpy.mean", "pred_model", "model.compute_elbo", "evaluation_functions.oracle_func_approx_score", "numpy.array", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.CF_VAE.compute_elbo", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.oracle_func_approx_score"], ["                    ", "continue", "\n", "", "test_size", "+=", "1", "\n", "\n", "if", "education_score", "[", "x_pred", ".", "iloc", "[", "i", ",", "ed_idx", "]", "]", "<", "education_score", "[", "x_true", ".", "iloc", "[", "i", ",", "ed_idx", "]", "]", ":", "\n", "                    ", "count3", "+=", "1", "\n", "invalid_change", "+=", "1", "\n", "", "elif", "education_score", "[", "x_pred", ".", "iloc", "[", "i", ",", "ed_idx", "]", "]", "==", "education_score", "[", "x_true", ".", "iloc", "[", "i", ",", "ed_idx", "]", "]", ":", "\n", "                    ", "count1", "+=", "1", "\n", "if", "x_pred", ".", "iloc", "[", "i", ",", "age_idx", "]", "-", "de_scale", "(", "offset", ",", "normalise_weights", "[", "0", "]", ")", ">=", "x_true", ".", "iloc", "[", "i", ",", "age_idx", "]", ":", "\n", "                        ", "pos1", "+=", "1", "\n", "valid_change", "+=", "1", "\n", "", "else", ":", "\n", "                        ", "invalid_change", "+=", "1", "\n", "", "", "elif", "education_score", "[", "x_pred", ".", "iloc", "[", "i", ",", "ed_idx", "]", "]", ">", "education_score", "[", "x_true", ".", "iloc", "[", "i", ",", "ed_idx", "]", "]", ":", "\n", "                    ", "count2", "+=", "1", "\n", "if", "x_pred", ".", "iloc", "[", "i", ",", "age_idx", "]", "-", "de_scale", "(", "offset", ",", "normalise_weights", "[", "0", "]", ")", ">", "x_true", ".", "iloc", "[", "i", ",", "age_idx", "]", ":", "\n", "                        ", "pos2", "+=", "1", "\n", "valid_change", "+=", "1", "\n", "", "else", ":", "\n", "                        ", "invalid_change", "+=", "1", "\n", "\n", "", "", "", "", "valid_change", "=", "valid_change", "/", "sample_size", "\n", "invalid_change", "=", "invalid_change", "/", "sample_size", "\n", "\n", "#         test_size= train_x.shape[0]", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.causal_score": [[1111, 1183], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.mean", "numpy.mean", "print", "torch.tensor().float", "torch.tensor().float", "torch.argmax", "torch.argmax", "range", "np.array.append", "np.array.append", "np.array.append", "np.array.append", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.ylim", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.show", "pred_model", "model.compute_elbo", "d.de_normalize_data", "d.de_normalize_data", "d.de_normalize_data.columns.get_loc", "d.de_normalize_data.columns.get_loc", "d.de_normalize_data.columns.get_loc", "range", "torch.tensor", "torch.tensor", "d.get_decoded_data", "d.get_decoded_data", "d.de_normalize_data.detach().numpy", "d.de_normalize_data.detach().numpy", "d.de_normalize_data.detach", "d.de_normalize_data.detach", "evaluation_functions.de_scale", "evaluation_functions.de_scale"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.CF_VAE.compute_elbo", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.de_scale", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.de_scale"], ["valid_score_arr", ".", "append", "(", "100", "*", "valid_change", "/", "test_size", ")", "\n", "invalid_score_arr", ".", "append", "(", "100", "*", "invalid_change", "/", "test_size", ")", "\n", "print", "(", "'Test Size'", ",", "test_size", ")", "\n", "\n", "", "valid_score", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "valid_score_arr", ")", ")", "\n", "invalid_score", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "invalid_score_arr", ")", ")", "\n", "\n", "if", "case", ":", "\n", "        ", "plt", ".", "plot", "(", "sample_range", ",", "valid_score_arr", ",", "'*'", ",", "label", "=", "'Val Change'", ")", "\n", "plt", ".", "plot", "(", "sample_range", ",", "invalid_score_arr", ",", "'s'", ",", "label", "=", "'Inval Change'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'upper left'", ")", "\n", "plt", ".", "ylim", "(", "ymin", "=", "0", ",", "ymax", "=", "100", ")", "\n", "plt", ".", "title", "(", "'All Education Levels'", ")", "\n", "plt", ".", "xlabel", "(", "'Sample Size'", ")", "\n", "plt", ".", "ylabel", "(", "'Percentage of CF'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "", "print", "(", "'Mean Age-Ed Constraint Score: '", ",", "valid_score", ",", "invalid_score", ",", "valid_score", "/", "(", "valid_score", "+", "invalid_score", ")", ")", "\n", "print", "(", "'Count: '", ",", "count1", ",", "count2", ",", "count3", ",", "count1", "+", "count2", "+", "count3", ")", "\n", "print", "(", "'Pos Count: '", ",", "pos1", ",", "pos2", ",", "pos3", ")", "\n", "if", "count1", "and", "count2", "and", "count3", ":", "\n", "        ", "print", "(", "'Pos Percentage: '", ",", "pos1", "/", "count1", ",", "pos2", "/", "count2", ",", "pos3", "/", "count3", ")", "\n", "", "return", "valid_score_arr", ",", "invalid_score_arr", "\n", "\n", "\n", "", "def", "causal_score_age_constraint", "(", "model", ",", "pred_model", ",", "train_dataset", ",", "d", ",", "normalise_weights", ",", "offset", ",", "case", ",", "sample_range", ")", ":", "\n", "\n", "    ", "valid_score_arr", "=", "[", "]", "\n", "invalid_score_arr", "=", "[", "]", "\n", "for", "sample_size", "in", "sample_range", ":", "\n", "        ", "train_x", "=", "torch", ".", "tensor", "(", "train_dataset", ")", ".", "float", "(", ")", "\n", "train_y", "=", "torch", ".", "argmax", "(", "pred_model", "(", "train_x", ")", ",", "dim", "=", "1", ")", "\n", "valid_change", "=", "0", "\n", "invalid_change", "=", "0", "\n", "test_size", "=", "0", "\n", "\n", "for", "sample_iter", "in", "range", "(", "sample_size", ")", ":", "\n", "            ", "recon_err", ",", "kl_err", ",", "x_true", ",", "x_pred", ",", "cf_label", "=", "model", ".", "compute_elbo", "(", "train_x", ",", "1.0", "-", "train_y", ",", "pred_model", ")", "\n", "\n", "x_pred", "=", "d", ".", "de_normalize_data", "(", "d", ".", "get_decoded_data", "(", "x_pred", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "x_true", "=", "d", ".", "de_normalize_data", "(", "d", ".", "get_decoded_data", "(", "x_true", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "\n", "age_idx", "=", "x_true", ".", "columns", ".", "get_loc", "(", "'age'", ")", "\n", "for", "i", "in", "range", "(", "x_true", ".", "shape", "[", "0", "]", ")", ":", "\n", "\n", "                ", "if", "cf_label", "[", "i", "]", "==", "0", ":", "\n", "#print(cf_label[i])", "\n", "                    ", "continue", "\n", "", "test_size", "+=", "1", "\n", "\n", "if", "x_pred", ".", "iloc", "[", "i", ",", "age_idx", "]", "-", "de_scale", "(", "offset", ",", "normalise_weights", "[", "0", "]", ")", ">=", "x_true", ".", "iloc", "[", "i", ",", "age_idx", "]", ":", "\n", "                    ", "valid_change", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "invalid_change", "+=", "1", "\n", "", "", "", "valid_change", "=", "valid_change", "/", "sample_size", "\n", "invalid_change", "=", "invalid_change", "/", "sample_size", "\n", "\n", "#         test_size= train_x.shape[0]", "\n", "test_size", "=", "test_size", "/", "sample_size", "\n", "valid_score_arr", ".", "append", "(", "100", "*", "valid_change", "/", "test_size", ")", "\n", "invalid_score_arr", ".", "append", "(", "100", "*", "invalid_change", "/", "test_size", ")", "\n", "\n", "", "valid_score", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "valid_score_arr", ")", ")", "\n", "invalid_score", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "invalid_score_arr", ")", ")", "\n", "\n", "if", "case", ":", "\n", "        ", "plt", ".", "plot", "(", "sample_range", ",", "valid_score_arr", ",", "'*'", ",", "label", "=", "'Val Age Change'", ")", "\n", "plt", ".", "plot", "(", "sample_range", ",", "invalid_score_arr", ",", "'s'", ",", "label", "=", "'Inval Age Change'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'upper left'", ")", "\n", "plt", ".", "ylim", "(", "ymin", "=", "0", ",", "ymax", "=", "100", ")", "\n", "plt", ".", "title", "(", "'Change in Age'", ")", "\n", "plt", ".", "xlabel", "(", "'Sample Size'", ")", "\n", "plt", ".", "ylabel", "(", "'Percentage of CF'", ")", "\n", "plt", ".", "show", "(", ")", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.causal_score_age_ed_constraint": [[1185, 1264], ["numpy.mean", "numpy.mean", "print", "print", "print", "torch.tensor().float", "torch.tensor().float", "torch.argmax", "torch.argmax", "range", "valid_score_arr.append", "invalid_score_arr.append", "print", "numpy.array", "numpy.array", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.ylim", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.show", "print", "pred_model", "model.compute_elbo", "d.de_normalize_data", "d.de_normalize_data", "d.de_normalize_data.columns.get_loc", "d.de_normalize_data.columns.get_loc", "range", "torch.tensor", "torch.tensor", "d.get_decoded_data", "d.get_decoded_data", "d.de_normalize_data.detach().numpy", "d.de_normalize_data.detach().numpy", "d.de_normalize_data.detach", "d.de_normalize_data.detach", "evaluation_functions.de_scale", "evaluation_functions.de_scale"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.CF_VAE.compute_elbo", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.de_scale", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.de_scale"], ["return", "valid_score_arr", ",", "invalid_score_arr", "\n", "\n", "\n", "", "def", "compute_eval_metrics_bn1", "(", "methods", ",", "base_model_dir", ",", "encoded_size", ",", "pred_model", ",", "val_dataset", ",", "d", ",", "normalise_weights", ",", "mad_feature_weights", ",", "case", ",", "sample_range", ",", "filename", ")", ":", "\n", "    ", "count", "=", "0", "\n", "fsize", "=", "20", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "7.7", ",", "6.5", ")", ")", "\n", "final_res", "=", "{", "}", "\n", "\n", "np", ".", "random", ".", "shuffle", "(", "val_dataset", ")", "\n", "x_sample", "=", "val_dataset", "[", "0", ",", ":", "]", "\n", "x_sample", "=", "np", ".", "reshape", "(", "x_sample", ",", "(", "1", ",", "val_dataset", ".", "shape", "[", "1", "]", ")", ")", "\n", "print", "(", "'Input Data Sample: '", ",", "d", ".", "de_normalize_data", "(", "d", ".", "get_decoded_data", "(", "x_sample", ")", ")", ")", "\n", "\n", "for", "key", "in", "methods", ".", "keys", "(", ")", ":", "\n", "\n", "#Loading torch model", "\n", "        ", "wm1", "=", "1e-4", "\n", "wm2", "=", "1e-3", "\n", "wm3", "=", "1e-4", "\n", "wm4", "=", "1e-3", "\n", "\n", "path", "=", "methods", "[", "key", "]", "\n", "cf_val", "=", "[", "]", "\n", "if", "'contrastive'", "in", "path", "and", "'json'", "in", "path", ":", "\n", "            ", "f", "=", "open", "(", "path", ",", "'r'", ")", "\n", "contrastive_exp", "=", "json", ".", "load", "(", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "                ", "if", "case", "==", "0", ":", "\n", "                    ", "cf_val", ".", "append", "(", "contrastive_validity_score", "(", "contrastive_exp", ",", "0", ",", "sample_range", ")", ")", "\n", "", "elif", "case", "==", "1", ":", "\n", "                    ", "cf_val", ".", "append", "(", "contrastive_distribution_score", "(", "contrastive_exp", ",", "d", ",", "normalise_weights", ",", "0", ",", "sample_range", ")", ")", "\n", "", "elif", "case", "==", "3", ":", "\n", "                    ", "val", ",", "inval", "=", "contrastive_causal_score_bn1_constraint", "(", "contrastive_exp", ",", "d", ",", "normalise_weights", ",", "offset", ",", "0", ",", "sample_range", ")", "\n", "cf_val", ".", "append", "(", "2", "*", "100", "*", "np", ".", "array", "(", "val", ")", "*", "np", ".", "array", "(", "inval", ")", "/", "(", "np", ".", "array", "(", "val", ")", "+", "np", ".", "array", "(", "inval", ")", ")", ")", "\n", "", "elif", "case", "==", "4", ":", "\n", "                    ", "cf_val", ".", "append", "(", "contrastive_causal_graph_score", "(", "contrastive_exp", ",", "d", ",", "normalise_weights", ",", "0", ",", "sample_range", ")", ")", "\n", "", "elif", "case", "==", "5", ":", "\n", "                    ", "cf_val", ".", "append", "(", "contrastive_proximity_score", "(", "contrastive_exp", ",", "d", ",", "mad_feature_weights", ",", "0", ",", "0", ",", "sample_range", ")", ")", "\n", "\n", "", "", "", "else", ":", "\n", "            ", "cf_vae", "=", "CF_VAE", "(", "len", "(", "d", ".", "encoded_feature_names", ")", ",", "encoded_size", ",", "d", ")", "\n", "cf_vae", ".", "load_state_dict", "(", "torch", ".", "load", "(", "path", ")", ")", "\n", "cf_vae", ".", "eval", "(", ")", "\n", "learning_rate", "=", "1e-3", "\n", "cf_vae_optimizer", "=", "optim", ".", "Adam", "(", "[", "\n", "{", "'params'", ":", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "cf_vae", ".", "encoder_mean", ".", "parameters", "(", ")", ")", ",", "'weight_decay'", ":", "wm1", "}", ",", "\n", "{", "'params'", ":", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "cf_vae", ".", "encoder_var", ".", "parameters", "(", ")", ")", ",", "'weight_decay'", ":", "wm2", "}", ",", "\n", "{", "'params'", ":", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "cf_vae", ".", "decoder_mean", ".", "parameters", "(", ")", ")", ",", "'weight_decay'", ":", "wm3", "}", "\n", "]", ",", "lr", "=", "learning_rate", ")", "\n", "\n", "if", "case", "==", "-", "1", ":", "\n", "                ", "print", "(", "'\\n'", ",", "'Method: '", ",", "key", ",", "\"\\n\"", ")", "\n", "visualize_score", "(", "cf_vae", ",", "pred_model", ",", "x_sample", ",", "d", ")", "\n", "continue", "\n", "\n", "", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "                ", "if", "case", "==", "0", ":", "\n", "                    ", "cf_val", ".", "append", "(", "validity_score", "(", "cf_vae", ",", "pred_model", ",", "val_dataset", ",", "0", ",", "sample_range", ")", ")", "\n", "", "if", "case", "==", "1", ":", "\n", "                    ", "cf_val", ".", "append", "(", "distribution_score", "(", "cf_vae", ",", "pred_model", ",", "val_dataset", ",", "normalise_weights", ",", "0", ",", "sample_range", ")", ")", "\n", "", "if", "case", "==", "2", ":", "\n", "                    ", "cf_val", ".", "append", "(", "func_approx_score", "(", "cf_vae", ",", "pred_model", ",", "val_dataset", ",", "normalise_weights", ",", "0", ",", "sample_range", ")", ")", "\n", "", "elif", "case", "==", "3", ":", "\n", "                    ", "val", ",", "inval", "=", "causal_score", "(", "cf_vae", ",", "pred_model", ",", "val_dataset", ",", "d", ",", "normalise_weights", ",", "offset", ",", "0", ",", "sample_range", ")", "\n", "cf_val", ".", "append", "(", "100", "*", "2", "*", "np", ".", "array", "(", "val", ")", "*", "np", ".", "array", "(", "inval", ")", "/", "(", "np", ".", "array", "(", "val", ")", "+", "np", ".", "array", "(", "inval", ")", ")", ")", "\n", "", "elif", "case", "==", "4", ":", "\n", "                    ", "cf_val", ".", "append", "(", "causal_graph_score", "(", "cf_vae", ",", "pred_model", ",", "val_dataset", ",", "normalise_weights", ",", "0", ",", "sample_range", ")", ")", "\n", "", "elif", "case", "==", "5", ":", "\n", "                    ", "cf_val", ".", "append", "(", "proximity_score", "(", "cf_vae", ",", "pred_model", ",", "val_dataset", ",", "d", ",", "mad_feature_weights", ",", "0", ",", "0", ",", "sample_range", ")", ")", "\n", "", "elif", "case", "==", "6", ":", "\n", "                    ", "cf_val", ".", "append", "(", "proximity_score", "(", "cf_vae", ",", "pred_model", ",", "val_dataset", ",", "d", ",", "mad_feature_weights", ",", "1", ",", "0", ",", "sample_range", ")", ")", "\n", "\n", "", "", "", "final_res", "[", "key", "]", "=", "cf_val", "\n", "cf_val", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "cf_val", ")", ",", "axis", "=", "0", ")", "\n", "if", "case", "==", "0", ":", "\n", "            ", "plt", ".", "title", "(", "'Target Class Valid CF'", ",", "fontsize", "=", "fsize", ")", "\n", "plt", ".", "xlabel", "(", "'Total Counterfactuals requested per data point'", ",", "fontsize", "=", "fsize", ")", "\n", "plt", ".", "ylabel", "(", "'Percentage of valid CF w.r.t. ML Classifier'", ",", "fontsize", "=", "fsize", ")", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.causal_score_age_constraint": [[1266, 1317], ["numpy.mean", "numpy.mean", "print", "torch.tensor().float", "torch.tensor().float", "torch.argmax", "torch.argmax", "range", "valid_score_arr.append", "invalid_score_arr.append", "numpy.array", "numpy.array", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.ylim", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.show", "pred_model", "model.compute_elbo", "d.de_normalize_data", "d.de_normalize_data", "d.de_normalize_data.columns.get_loc", "range", "torch.tensor", "torch.tensor", "d.get_decoded_data", "d.get_decoded_data", "d.de_normalize_data.detach().numpy", "d.de_normalize_data.detach().numpy", "evaluation_functions.de_scale", "d.de_normalize_data.detach", "d.de_normalize_data.detach"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.CF_VAE.compute_elbo", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.de_scale"], ["            ", "plt", ".", "title", "(", "'Causal Edge Distribution Valid CF'", ",", "fontsize", "=", "fsize", ")", "\n", "plt", ".", "xlabel", "(", "'Total counterfactuals requested per data point'", ",", "fontsize", "=", "fsize", ")", "\n", "plt", ".", "ylabel", "(", "'Likelihood for known causal edges distribution'", ",", "fontsize", "=", "fsize", ")", "\n", "", "elif", "case", "==", "2", ":", "\n", "            ", "plt", ".", "title", "(", "'Causal Edge Function Valid CF'", ",", "fontsize", "=", "fsize", ")", "\n", "plt", ".", "xlabel", "(", "'Total counterfactuals requested per data point'", ",", "fontsize", "=", "fsize", ")", "\n", "plt", ".", "ylabel", "(", "'L1 norm for known causal edge function'", ",", "fontsize", "=", "fsize", ")", "\n", "", "elif", "case", "==", "3", ":", "\n", "            ", "plt", ".", "title", "(", "'Constraint Valid CF'", ",", "fontsize", "=", "fsize", ")", "\n", "plt", ".", "xlabel", "(", "'Total counterfactuals requested per data point'", ",", "fontsize", "=", "fsize", ")", "\n", "plt", ".", "ylabel", "(", "'Percentage of CF satisfying Constraint'", ",", "fontsize", "=", "fsize", ")", "\n", "", "elif", "case", "==", "4", ":", "\n", "            ", "plt", ".", "title", "(", "'Causal Graph Score'", ",", "fontsize", "=", "14", ")", "\n", "plt", ".", "xlabel", "(", "'Total counterfactuals requested per data point'", ",", "fontsize", "=", "14", ")", "\n", "plt", ".", "ylabel", "(", "'Likelihood'", ",", "fontsize", "=", "14", ")", "\n", "", "elif", "case", "==", "5", ":", "\n", "            ", "plt", ".", "title", "(", "'Continuous Proximity Score'", ",", "fontsize", "=", "14", ")", "\n", "plt", ".", "xlabel", "(", "'Total counterfactuals requested per data point'", ",", "fontsize", "=", "14", ")", "\n", "plt", ".", "ylabel", "(", "'Total change in continuous features '", ",", "fontsize", "=", "14", ")", "\n", "", "elif", "case", "==", "6", ":", "\n", "            ", "plt", ".", "title", "(", "'Categorical Proximity Score'", ",", "fontsize", "=", "14", ")", "\n", "plt", ".", "xlabel", "(", "'Total counterfactuals requested per data point'", ",", "fontsize", "=", "14", ")", "\n", "plt", ".", "ylabel", "(", "'Total change in categorical features'", ",", "fontsize", "=", "14", ")", "\n", "\n", "", "if", "count", "==", "0", ":", "\n", "            ", "low", "=", "np", ".", "min", "(", "cf_val", ")", "\n", "high", "=", "np", ".", "max", "(", "cf_val", ")", "\n", "", "else", ":", "\n", "            ", "if", "low", ">", "np", ".", "min", "(", "cf_val", ")", ":", "\n", "                ", "low", "=", "np", ".", "min", "(", "cf_val", ")", "\n", "", "elif", "high", "<", "np", ".", "max", "(", "cf_val", ")", ":", "\n", "                ", "high", "=", "np", ".", "max", "(", "cf_val", ")", "\n", "\n", "", "", "if", "case", "==", "0", "or", "case", "==", "3", ":", "\n", "            ", "plt", ".", "ylim", "(", "0", ",", "100", ")", "\n", "", "else", ":", "\n", "            ", "plt", ".", "ylim", "(", "[", "np", ".", "ceil", "(", "low", "-", "0.5", "*", "(", "high", "-", "low", ")", ")", ",", "np", ".", "ceil", "(", "high", "+", "0.5", "*", "(", "high", "-", "low", ")", ")", "]", ")", "\n", "\n", "", "if", "len", "(", "sample_range", ")", "==", "1", ":", "\n", "            ", "plt", ".", "plot", "(", "sample_range", ",", "cf_val", ",", "'.'", ",", "label", "=", "key", ")", "\n", "", "else", ":", "\n", "            ", "plt", ".", "plot", "(", "sample_range", ",", "cf_val", ",", "label", "=", "key", ")", "\n", "\n", "", "count", "+=", "1", "\n", "\n", "", "plt", ".", "legend", "(", "loc", "=", "'best'", ",", "fontsize", "=", "fsize", "/", "1.3", ")", "\n", "plt", ".", "savefig", "(", "'results/'", "+", "filename", "+", "'.jpg'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "return", "final_res", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.compute_eval_metrics_bn1": [[1403, 1561], ["matplotlib.figure", "numpy.random.shuffle", "numpy.reshape", "print", "range", "range", "methods.keys", "matplotlib.legend", "matplotlib.savefig", "matplotlib.show", "d.de_normalize_data", "scripts.vae_model.AutoEncoder", "scripts.vae_model.AutoEncoder.load_state_dict", "scripts.vae_model.AutoEncoder.eval", "auto_encoder_models.append", "open", "open.read", "open.close", "tensorflow.keras.models.model_from_json", "tf.keras.models.model_from_json.load_weights", "tf.keras.models.model_from_json.compile", "auto_encoder_models_cem.append", "numpy.mean", "d.get_decoded_data", "len", "torch.load", "torch.load", "str", "open", "json.load", "open.close", "range", "scripts.vae_model.CF_VAE", "scripts.vae_model.CF_VAE.load_state_dict", "scripts.vae_model.CF_VAE.eval", "torch.optim.Adam", "range", "numpy.array", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "numpy.min", "numpy.max", "matplotlib.ylim", "matplotlib.ylim", "len", "matplotlib.plot", "matplotlib.plot", "str", "len", "torch.load", "torch.load", "print", "evaluation_functions.visualize_score", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "numpy.min", "numpy.min", "np.mean.append", "np.mean.append", "np.mean.append", "np.mean.append", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "numpy.max", "numpy.max", "numpy.ceil", "numpy.ceil", "evaluation_functions.contrastive_validity_score", "np.mean.append", "filter", "filter", "filter", "evaluation_functions.validity_score", "evaluation_functions.distribution_score", "evaluation_functions.func_approx_score", "evaluation_functions.causal_score", "np.mean.append", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "evaluation_functions.contrastive_distribution_score", "evaluation_functions.contrastive_causal_score_bn1_constraint", "np.mean.append", "scripts.vae_model.CF_VAE.encoder_mean.parameters", "scripts.vae_model.CF_VAE.encoder_var.parameters", "scripts.vae_model.CF_VAE.decoder_mean.parameters", "np.mean.append", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "np.mean.append", "evaluation_functions.causal_graph_score", "np.mean.append", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "evaluation_functions.contrastive_causal_graph_score", "np.mean.append", "numpy.array", "numpy.array", "numpy.array", "evaluation_functions.proximity_score", "np.mean.append", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "numpy.array", "numpy.array", "numpy.array", "evaluation_functions.contrastive_proximity_score", "np.mean.append", "numpy.array", "evaluation_functions.im_score", "numpy.array", "evaluation_functions.contrastive_im_score"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.visualize_score", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.contrastive_validity_score", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.validity_score", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.distribution_score", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.func_approx_score", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.causal_score", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.contrastive_distribution_score", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.contrastive_causal_score_bn1_constraint", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.causal_graph_score", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.contrastive_causal_graph_score", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.proximity_score", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.contrastive_proximity_score", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.im_score", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.contrastive_im_score"], ["if", "case", "==", "0", ":", "\n", "            ", "plt", ".", "title", "(", "'Target Class Valid CF'", ",", "fontsize", "=", "fsize", ")", "\n", "plt", ".", "xlabel", "(", "'Total Counterfactuals requested per data point'", ",", "fontsize", "=", "fsize", ")", "\n", "plt", ".", "ylabel", "(", "'Percentage of valid CF w.r.t. ML Classifier'", ",", "fontsize", "=", "fsize", ")", "\n", "", "elif", "case", "==", "1", ":", "\n", "            ", "plt", ".", "title", "(", "'Constraint Valid CF: Age Constraint'", ",", "fontsize", "=", "fsize", ")", "\n", "plt", ".", "xlabel", "(", "'Total counterfactuals requested per data point'", ",", "fontsize", "=", "fsize", ")", "\n", "plt", ".", "ylabel", "(", "'Percentage of CF satisfying Constraint'", ",", "fontsize", "=", "fsize", ")", "\n", "", "elif", "case", "==", "2", ":", "\n", "            ", "plt", ".", "title", "(", "'Constraint Valid CF: Age-Education Constraint'", ",", "fontsize", "=", "fsize", ")", "\n", "plt", ".", "xlabel", "(", "'Total counterfactuals requested per data point'", ",", "fontsize", "=", "fsize", ")", "\n", "plt", ".", "ylabel", "(", "'Percentage of CF satisfying Constraint'", ",", "fontsize", "=", "fsize", ")", "\n", "", "elif", "case", "==", "3", ":", "\n", "            ", "plt", ".", "title", "(", "'Continuous Proximity Score'", ",", "fontsize", "=", "fsize", ")", "\n", "plt", ".", "xlabel", "(", "'Total counterfactuals requested per data point'", ",", "fontsize", "=", "fsize", ")", "\n", "plt", ".", "ylabel", "(", "'Total change in continuous features'", ",", "fontsize", "=", "fsize", ")", "\n", "", "elif", "case", "==", "4", ":", "\n", "            ", "plt", ".", "title", "(", "'Categorical Proximity Score'", ",", "fontsize", "=", "fsize", ")", "\n", "plt", ".", "xlabel", "(", "'Total counterfactuals requested per data point'", ",", "fontsize", "=", "fsize", ")", "\n", "plt", ".", "ylabel", "(", "'Total change in categorical features'", ",", "fontsize", "=", "fsize", ")", "\n", "\n", "", "if", "count", "==", "0", ":", "\n", "            ", "low", "=", "min", "(", "cf_val", ")", "\n", "high", "=", "max", "(", "cf_val", ")", "\n", "", "else", ":", "\n", "            ", "if", "low", ">", "min", "(", "cf_val", ")", ":", "\n", "                ", "low", "=", "min", "(", "cf_val", ")", "\n", "", "elif", "high", "<", "max", "(", "cf_val", ")", ":", "\n", "                ", "high", "=", "max", "(", "cf_val", ")", "\n", "\n", "", "", "if", "case", "==", "0", "or", "case", "==", "1", "or", "case", "==", "2", ":", "\n", "            ", "plt", ".", "ylim", "(", "0", ",", "101", ")", "\n", "", "else", ":", "\n", "            ", "plt", ".", "ylim", "(", "[", "np", ".", "ceil", "(", "low", "-", "0.5", "*", "(", "high", "-", "low", ")", ")", ",", "np", ".", "ceil", "(", "high", "+", "0.5", "*", "(", "high", "-", "low", ")", ")", "]", ")", "\n", "\n", "", "if", "len", "(", "sample_range", ")", "==", "1", ":", "\n", "            ", "plt", ".", "plot", "(", "sample_range", ",", "cf_val", ",", "'.'", ",", "label", "=", "key", ")", "\n", "", "else", ":", "\n", "            ", "plt", ".", "plot", "(", "sample_range", ",", "cf_val", ",", "label", "=", "key", ")", "\n", "\n", "", "count", "+=", "1", "\n", "\n", "", "plt", ".", "legend", "(", "loc", "=", "'lower left'", ",", "fontsize", "=", "fsize", "/", "1.3", ")", "\n", "plt", ".", "savefig", "(", "'results/'", "+", "filename", "+", "'.jpg'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "return", "final_res", "\n", "\n", "", "def", "compute_eval_metrics_sangiovese", "(", "methods", ",", "base_model_dir", ",", "encoded_size", ",", "pred_model", ",", "val_dataset", ",", "d", ",", "normalise_weights", ",", "mad_feature_weights", ",", "scm_model", ",", "constraint_nodes", ",", "case", ",", "sample_range", ",", "filename", ")", ":", "\n", "    ", "count", "=", "0", "\n", "fsize", "=", "20", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "7.7", ",", "6.5", ")", ")", "\n", "final_res", "=", "{", "}", "\n", "\n", "np", ".", "random", ".", "shuffle", "(", "val_dataset", ")", "\n", "x_sample", "=", "val_dataset", "[", "0", ",", ":", "]", "\n", "x_sample", "=", "np", ".", "reshape", "(", "x_sample", ",", "(", "1", ",", "val_dataset", ".", "shape", "[", "1", "]", ")", ")", "\n", "print", "(", "'Input Data Sample: '", ",", "d", ".", "de_normalize_data", "(", "d", ".", "get_decoded_data", "(", "x_sample", ")", ")", ")", "\n", "\n", "for", "key", "in", "methods", ".", "keys", "(", ")", ":", "\n", "\n", "#Loading torch model", "\n", "        ", "wm1", "=", "1e-4", "\n", "wm2", "=", "1e-3", "\n", "wm3", "=", "1e-4", "\n", "wm4", "=", "1e-3", "\n", "\n", "path", "=", "methods", "[", "key", "]", "\n", "cf_val", "=", "[", "]", "\n", "\n", "if", "'contrastive'", "in", "path", "and", "'json'", "in", "path", ":", "\n", "            ", "f", "=", "open", "(", "path", ",", "'r'", ")", "\n", "contrastive_exp", "=", "json", ".", "load", "(", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "                ", "if", "case", "==", "0", ":", "\n", "                    ", "cf_val", ".", "append", "(", "contrastive_validity_score", "(", "contrastive_exp", ",", "0", ",", "sample_range", ")", ")", "\n", "", "elif", "case", "==", "1", ":", "\n", "                    ", "cf_val", ".", "append", "(", "contrastive_bnlearn_causal_graph_score", "(", "contrastive_exp", ",", "d", ",", "normalise_weights", ",", "scm_model", ",", "constraint_nodes", ",", "1", ",", "0", ",", "sample_range", ")", ")", "\n", "", "elif", "case", "==", "3", ":", "\n", "                    ", "val", ",", "inval", "=", "contrastive_causal_score_bnlearn_constraint", "(", "contrastive_exp", ",", "d", ",", "normalise_weights", ",", "offset", ",", "scm_model", ",", "constraint_nodes", ",", "0", ",", "sample_range", ")", "\n", "cf_val", ".", "append", "(", "2", "*", "100", "*", "np", ".", "array", "(", "val", ")", "*", "np", ".", "array", "(", "inval", ")", "/", "(", "np", ".", "array", "(", "val", ")", "+", "np", ".", "array", "(", "inval", ")", ")", ")", "\n", "", "elif", "case", "==", "4", ":", "\n", "                    ", "cf_val", ".", "append", "(", "contrastive_bnlearn_causal_graph_score", "(", "contrastive_exp", ",", "d", ",", "normalise_weights", ",", "scm_model", ",", "constraint_nodes", ",", "0", ",", "0", ",", "sample_range", ")", ")", "\n", "", "elif", "case", "==", "5", ":", "\n", "                    ", "cf_val", ".", "append", "(", "contrastive_proximity_score", "(", "contrastive_exp", ",", "d", ",", "mad_feature_weights", ",", "0", ",", "0", ",", "sample_range", ")", ")", "\n", "", "elif", "case", "==", "6", ":", "\n", "                    ", "cf_val", ".", "append", "(", "contrastive_proximity_score", "(", "contrastive_exp", ",", "d", ",", "mad_feature_weights", ",", "1", ",", "0", ",", "sample_range", ")", ")", "\n", "", "", "", "else", ":", "\n", "            ", "cf_vae", "=", "CF_VAE", "(", "len", "(", "d", ".", "encoded_feature_names", ")", ",", "encoded_size", ",", "d", ")", "\n", "cf_vae", ".", "load_state_dict", "(", "torch", ".", "load", "(", "path", ")", ")", "\n", "cf_vae", ".", "eval", "(", ")", "\n", "learning_rate", "=", "1e-3", "\n", "cf_vae_optimizer", "=", "optim", ".", "Adam", "(", "[", "\n", "{", "'params'", ":", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "cf_vae", ".", "encoder_mean", ".", "parameters", "(", ")", ")", ",", "'weight_decay'", ":", "wm1", "}", ",", "\n", "{", "'params'", ":", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "cf_vae", ".", "encoder_var", ".", "parameters", "(", ")", ")", ",", "'weight_decay'", ":", "wm2", "}", ",", "\n", "{", "'params'", ":", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "cf_vae", ".", "decoder_mean", ".", "parameters", "(", ")", ")", ",", "'weight_decay'", ":", "wm3", "}", "\n", "]", ",", "lr", "=", "learning_rate", ")", "\n", "\n", "cf_val", "=", "[", "]", "\n", "\n", "if", "case", "==", "-", "1", ":", "\n", "                ", "print", "(", "'\\n'", ",", "'Method: '", ",", "key", ",", "\"\\n\"", ")", "\n", "visualize_score", "(", "cf_vae", ",", "pred_model", ",", "x_sample", ",", "d", ")", "\n", "continue", "\n", "\n", "", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "                ", "if", "case", "==", "0", ":", "\n", "                    ", "cf_val", ".", "append", "(", "validity_score", "(", "cf_vae", ",", "pred_model", ",", "val_dataset", ",", "0", ",", "sample_range", ")", ")", "\n", "", "if", "case", "==", "1", ":", "\n", "                    ", "cf_val", ".", "append", "(", "bnlearn_causal_graph_score", "(", "cf_vae", ",", "pred_model", ",", "val_dataset", ",", "normalise_weights", ",", "d", ",", "scm_model", ",", "constraint_nodes", ",", "1", ",", "0", ",", "sample_range", ")", ")", "\n", "", "if", "case", "==", "2", ":", "\n", "                    ", "cf_val", ".", "append", "(", "func_approx_score", "(", "cf_vae", ",", "pred_model", ",", "val_dataset", ",", "normalise_weights", ",", "0", ",", "sample_range", ")", ")", "\n", "", "elif", "case", "==", "3", ":", "\n", "                    ", "val", ",", "inval", "=", "bnlearn_causal_score", "(", "cf_vae", ",", "pred_model", ",", "val_dataset", ",", "d", ",", "normalise_weights", ",", "offset", ",", "scm_model", ",", "constraint_nodes", ",", "0", ",", "sample_range", ")", "\n", "cf_val", ".", "append", "(", "2", "*", "100", "*", "np", ".", "array", "(", "val", ")", "*", "np", ".", "array", "(", "inval", ")", "/", "(", "np", ".", "array", "(", "val", ")", "+", "np", ".", "array", "(", "inval", ")", ")", ")", "\n", "", "elif", "case", "==", "4", ":", "\n", "                     ", "cf_val", ".", "append", "(", "bnlearn_causal_graph_score", "(", "cf_vae", ",", "pred_model", ",", "val_dataset", ",", "normalise_weights", ",", "d", ",", "scm_model", ",", "constraint_nodes", ",", "0", ",", "0", ",", "sample_range", ")", ")", "\n", "", "elif", "case", "==", "5", ":", "\n", "                    ", "cf_val", ".", "append", "(", "proximity_score", "(", "cf_vae", ",", "pred_model", ",", "val_dataset", ",", "d", ",", "mad_feature_weights", ",", "0", ",", "0", ",", "sample_range", ")", ")", "\n", "", "elif", "case", "==", "6", ":", "\n", "                    ", "cf_val", ".", "append", "(", "proximity_score", "(", "cf_vae", ",", "pred_model", ",", "val_dataset", ",", "d", ",", "mad_feature_weights", ",", "1", ",", "0", ",", "sample_range", ")", ")", "\n", "\n", "", "", "", "final_res", "[", "key", "]", "=", "cf_val", "\n", "cf_val", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "cf_val", ")", ",", "axis", "=", "0", ")", "\n", "if", "case", "==", "0", ":", "\n", "            ", "plt", ".", "title", "(", "'Target Class Valid CF'", ",", "fontsize", "=", "fsize", ")", "\n", "plt", ".", "xlabel", "(", "'Total Counterfactuals requested per data point'", ",", "fontsize", "=", "fsize", ")", "\n", "plt", ".", "ylabel", "(", "'Percentage of valid CF w.r.t. ML Classifier'", ",", "fontsize", "=", "fsize", ")", "\n", "", "elif", "case", "==", "1", ":", "\n", "            ", "plt", ".", "title", "(", "'Causal Edge Distribution Valid CF'", ",", "fontsize", "=", "fsize", ")", "\n", "plt", ".", "xlabel", "(", "'Total counterfactuals requested per data point'", ",", "fontsize", "=", "fsize", ")", "\n", "plt", ".", "ylabel", "(", "'Likelihood for known causal edges distribution'", ",", "fontsize", "=", "fsize", ")", "\n", "", "elif", "case", "==", "2", ":", "\n", "            ", "plt", ".", "title", "(", "'Causal Edge Function Valid CF'", ",", "fontsize", "=", "fsize", ")", "\n", "plt", ".", "xlabel", "(", "'Total counterfactuals requested per data point'", ",", "fontsize", "=", "fsize", ")", "\n", "plt", ".", "ylabel", "(", "'L1 norm for known causal edge function'", ",", "fontsize", "=", "fsize", ")", "\n", "", "elif", "case", "==", "3", ":", "\n", "            ", "plt", ".", "title", "(", "'Constraint Valid CF'", ",", "fontsize", "=", "fsize", ")", "\n", "plt", ".", "xlabel", "(", "'Total counterfactuals requested per data point'", ",", "fontsize", "=", "fsize", ")", "\n", "plt", ".", "ylabel", "(", "'Percentage of CF satisfying Constraint'", ",", "fontsize", "=", "fsize", ")", "\n", "", "elif", "case", "==", "4", ":", "\n", "            ", "plt", ".", "title", "(", "'Causal Graph Score'", ",", "fontsize", "=", "14", ")", "\n", "plt", ".", "xlabel", "(", "'Total counterfactuals requested per data point'", ",", "fontsize", "=", "14", ")", "\n", "plt", ".", "ylabel", "(", "'Likelihood'", ",", "fontsize", "=", "14", ")", "\n", "", "elif", "case", "==", "5", ":", "\n", "            ", "plt", ".", "title", "(", "'Continuous Proximity Score'", ",", "fontsize", "=", "14", ")", "\n", "plt", ".", "xlabel", "(", "'Total counterfactuals requested per data point'", ",", "fontsize", "=", "14", ")", "\n", "plt", ".", "ylabel", "(", "'Total change in continuous features '", ",", "fontsize", "=", "14", ")", "\n", "", "elif", "case", "==", "6", ":", "\n", "            ", "plt", ".", "title", "(", "'Categorical Proximity Score'", ",", "fontsize", "=", "14", ")", "\n", "plt", ".", "xlabel", "(", "'Total counterfactuals requested per data point'", ",", "fontsize", "=", "14", ")", "\n", "plt", ".", "ylabel", "(", "'Total change in categorical features'", ",", "fontsize", "=", "14", ")", "\n", "\n", "", "if", "count", "==", "0", ":", "\n", "            ", "low", "=", "min", "(", "cf_val", ")", "\n", "high", "=", "max", "(", "cf_val", ")", "\n", "", "else", ":", "\n", "            ", "if", "low", ">", "min", "(", "cf_val", ")", ":", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.compute_eval_metrics_adult": [[1563, 1725], ["matplotlib.figure", "numpy.random.shuffle", "numpy.reshape", "numpy.save", "print", "range", "range", "methods.keys", "matplotlib.legend", "matplotlib.savefig", "matplotlib.show", "d.de_normalize_data", "scripts.vae_model.AutoEncoder", "scripts.vae_model.AutoEncoder.load_state_dict", "scripts.vae_model.AutoEncoder.eval", "auto_encoder_models.append", "open", "open.read", "open.close", "tensorflow.keras.models.model_from_json", "tf.keras.models.model_from_json.load_weights", "tf.keras.models.model_from_json.compile", "auto_encoder_models_cem.append", "numpy.mean", "d.get_decoded_data", "len", "torch.load", "torch.load", "str", "open", "json.load", "open.close", "range", "scripts.vae_model.CF_VAE", "scripts.vae_model.CF_VAE.load_state_dict", "scripts.vae_model.CF_VAE.eval", "torch.optim.Adam", "torch.tensor().float", "torch.tensor().float", "torch.argmax().numpy", "torch.argmax().numpy", "range", "numpy.array", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "min", "max", "matplotlib.ylim", "matplotlib.ylim", "len", "matplotlib.plot", "matplotlib.plot", "str", "print", "contrastive_visualize_score", "len", "torch.load", "torch.load", "print", "evaluation_functions.visualize_score", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "min", "min", "np.mean.append", "torch.tensor", "torch.tensor", "torch.argmax", "torch.argmax", "np.mean.append", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "max", "max", "numpy.ceil", "numpy.ceil", "evaluation_functions.contrastive_validity_score", "evaluation_functions.contrastive_causal_score_age_constraint", "np.mean.append", "filter", "filter", "filter", "pred_model", "evaluation_functions.validity_score", "evaluation_functions.causal_score_age_constraint", "np.mean.append", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "evaluation_functions.contrastive_causal_score_age_ed_constraint", "np.mean.append", "scripts.vae_model.CF_VAE.encoder_mean.parameters", "scripts.vae_model.CF_VAE.encoder_var.parameters", "scripts.vae_model.CF_VAE.decoder_mean.parameters", "evaluation_functions.causal_score_age_ed_constraint", "np.mean.append", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "np.mean.append", "np.mean.append", "numpy.array", "numpy.array", "numpy.array", "evaluation_functions.contrastive_proximity_score", "np.mean.append", "numpy.array", "numpy.array", "numpy.array", "evaluation_functions.proximity_score", "np.mean.append", "numpy.array", "numpy.array", "numpy.array", "evaluation_functions.contrastive_proximity_score", "np.mean.append", "numpy.array", "numpy.array", "numpy.array", "evaluation_functions.proximity_score", "np.mean.append", "evaluation_functions.contrastive_im_score", "evaluation_functions.im_score"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.visualize_score", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.contrastive_validity_score", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.contrastive_causal_score_age_constraint", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.validity_score", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.causal_score_age_constraint", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.contrastive_causal_score_age_ed_constraint", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.causal_score_age_ed_constraint", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.contrastive_proximity_score", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.proximity_score", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.contrastive_proximity_score", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.proximity_score", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.contrastive_im_score", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.im_score"], ["", "elif", "high", "<", "max", "(", "cf_val", ")", ":", "\n", "                ", "high", "=", "max", "(", "cf_val", ")", "\n", "\n", "", "", "if", "case", "==", "0", "or", "case", "==", "3", ":", "\n", "            ", "plt", ".", "ylim", "(", "0", ",", "100", ")", "\n", "", "else", ":", "\n", "            ", "plt", ".", "ylim", "(", "[", "np", ".", "ceil", "(", "low", "-", "0.5", "*", "(", "high", "-", "low", ")", ")", ",", "np", ".", "ceil", "(", "high", "+", "0.5", "*", "(", "high", "-", "low", ")", ")", "]", ")", "\n", "\n", "", "if", "len", "(", "sample_range", ")", "==", "1", ":", "\n", "            ", "plt", ".", "plot", "(", "sample_range", ",", "cf_val", ",", "'.'", ",", "label", "=", "key", ")", "\n", "", "else", ":", "\n", "            ", "plt", ".", "plot", "(", "sample_range", ",", "cf_val", ",", "label", "=", "key", ")", "\n", "\n", "", "count", "+=", "1", "\n", "\n", "", "plt", ".", "legend", "(", "loc", "=", "'best'", ",", "fontsize", "=", "fsize", "/", "1.3", ")", "\n", "plt", ".", "savefig", "(", "'results/'", "+", "filename", "+", "'.jpg'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "return", "final_res", "", "", ""]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.compute_eval_metrics_sangiovese": [[1726, 1891], ["matplotlib.figure", "numpy.random.shuffle", "numpy.reshape", "print", "range", "range", "methods.keys", "matplotlib.legend", "matplotlib.savefig", "matplotlib.show", "d.de_normalize_data", "scripts.vae_model.AutoEncoder", "scripts.vae_model.AutoEncoder.load_state_dict", "scripts.vae_model.AutoEncoder.eval", "auto_encoder_models.append", "open", "open.read", "open.close", "tensorflow.keras.models.model_from_json", "tf.keras.models.model_from_json.load_weights", "tf.keras.models.model_from_json.compile", "auto_encoder_models_cem.append", "print", "numpy.mean", "d.get_decoded_data", "len", "torch.load", "torch.load", "str", "open", "json.load", "open.close", "range", "scripts.vae_model.CF_VAE", "scripts.vae_model.CF_VAE.load_state_dict", "scripts.vae_model.CF_VAE.eval", "torch.optim.Adam", "range", "numpy.array", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "min", "max", "matplotlib.ylim", "matplotlib.ylim", "len", "matplotlib.plot", "matplotlib.plot", "str", "len", "torch.load", "torch.load", "print", "evaluation_functions.visualize_score", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "min", "min", "np.mean.append", "np.mean.append", "np.mean.append", "np.mean.append", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "max", "max", "numpy.ceil", "numpy.ceil", "evaluation_functions.contrastive_validity_score", "np.mean.append", "filter", "filter", "filter", "evaluation_functions.validity_score", "evaluation_functions.bnlearn_causal_graph_score", "evaluation_functions.func_approx_score", "evaluation_functions.bnlearn_causal_score", "np.mean.append", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "evaluation_functions.contrastive_bnlearn_causal_graph_score", "evaluation_functions.contrastive_causal_score_bnlearn_constraint", "np.mean.append", "scripts.vae_model.CF_VAE.encoder_mean.parameters", "scripts.vae_model.CF_VAE.encoder_var.parameters", "scripts.vae_model.CF_VAE.decoder_mean.parameters", "np.mean.append", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "np.mean.append", "evaluation_functions.bnlearn_causal_graph_score", "np.mean.append", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "evaluation_functions.contrastive_bnlearn_causal_graph_score", "np.mean.append", "numpy.array", "numpy.array", "numpy.array", "evaluation_functions.proximity_score", "np.mean.append", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "numpy.array", "numpy.array", "numpy.array", "evaluation_functions.contrastive_proximity_score", "np.mean.append", "numpy.array", "evaluation_functions.proximity_score", "np.mean.append", "numpy.array", "evaluation_functions.contrastive_proximity_score", "np.mean.append", "evaluation_functions.im_score", "evaluation_functions.contrastive_im_score"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.visualize_score", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.contrastive_validity_score", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.validity_score", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.bnlearn_causal_graph_score", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.func_approx_score", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.bnlearn_causal_score", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.contrastive_bnlearn_causal_graph_score", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.contrastive_causal_score_bnlearn_constraint", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.bnlearn_causal_graph_score", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.contrastive_bnlearn_causal_graph_score", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.proximity_score", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.contrastive_proximity_score", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.proximity_score", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.contrastive_proximity_score", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.im_score", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.contrastive_im_score"], []], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.helpers.load_adult_income_dataset": [[8, 60], ["numpy.genfromtxt", "pandas.DataFrame", "adult_data.rename.astype", "adult_data.rename.replace", "adult_data.rename.replace", "adult_data.rename.replace", "adult_data.rename.replace", "adult_data.rename.replace", "adult_data.rename.replace", "adult_data.rename.replace", "adult_data.rename.replace", "adult_data.rename.replace", "adult_data.rename.replace", "adult_data.rename.rename"], "function", ["None"], ["def", "load_adult_income_dataset", "(", "save_intermediate", "=", "False", ")", ":", "\n", "    ", "\"\"\"Loads adult income dataset from https://archive.ics.uci.edu/ml/datasets/Adult and prepares the data for data analysis based on https://rpubs.com/H_Zhu/235617\n\n    :param: save_intermediate: save the transformed dataset. Do not save by default.\n    \"\"\"", "\n", "raw_data", "=", "np", ".", "genfromtxt", "(", "'https://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data'", ",", "delimiter", "=", "', '", ",", "dtype", "=", "str", ")", "\n", "\n", "#  column names from \"https://archive.ics.uci.edu/ml/datasets/Adult\"", "\n", "column_names", "=", "[", "'age'", ",", "'workclass'", ",", "'fnlwgt'", ",", "'education'", ",", "'educational-num'", ",", "'marital-status'", ",", "'occupation'", ",", "'relationship'", ",", "'race'", ",", "'gender'", ",", "'capital-gain'", ",", "'capital-loss'", ",", "'hours-per-week'", ",", "'native-country'", ",", "'income'", "]", "\n", "\n", "adult_data", "=", "pd", ".", "DataFrame", "(", "raw_data", ",", "columns", "=", "column_names", ")", "\n", "\n", "\n", "# For more details on how the below transformations are made, please refer to https://rpubs.com/H_Zhu/235617", "\n", "adult_data", "=", "adult_data", ".", "astype", "(", "{", "\"age\"", ":", "np", ".", "int64", ",", "\"educational-num\"", ":", "np", ".", "int64", ",", "\"hours-per-week\"", ":", "np", ".", "int64", "}", ")", "\n", "\n", "adult_data", "=", "adult_data", ".", "replace", "(", "{", "'workclass'", ":", "{", "'Without-pay'", ":", "'Other/Unknown'", ",", "'Never-worked'", ":", "'Other/Unknown'", "}", "}", ")", "\n", "adult_data", "=", "adult_data", ".", "replace", "(", "{", "'workclass'", ":", "{", "'Federal-gov'", ":", "'Government'", ",", "'State-gov'", ":", "'Government'", ",", "'Local-gov'", ":", "'Government'", "}", "}", ")", "\n", "adult_data", "=", "adult_data", ".", "replace", "(", "{", "'workclass'", ":", "{", "'Self-emp-not-inc'", ":", "'Self-Employed'", ",", "'Self-emp-inc'", ":", "'Self-Employed'", "}", "}", ")", "\n", "adult_data", "=", "adult_data", ".", "replace", "(", "{", "'workclass'", ":", "{", "'Never-worked'", ":", "'Self-Employed'", ",", "'Without-pay'", ":", "'Self-Employed'", "}", "}", ")", "\n", "adult_data", "=", "adult_data", ".", "replace", "(", "{", "'workclass'", ":", "{", "'?'", ":", "'Other/Unknown'", "}", "}", ")", "\n", "\n", "adult_data", "=", "adult_data", ".", "replace", "(", "{", "'occupation'", ":", "{", "'Adm-clerical'", ":", "'White-Collar'", ",", "'Craft-repair'", ":", "'Blue-Collar'", ",", "\n", "'Exec-managerial'", ":", "'White-Collar'", ",", "'Farming-fishing'", ":", "'Blue-Collar'", ",", "\n", "'Handlers-cleaners'", ":", "'Blue-Collar'", ",", "\n", "'Machine-op-inspct'", ":", "'Blue-Collar'", ",", "'Other-service'", ":", "'Service'", ",", "\n", "'Priv-house-serv'", ":", "'Service'", ",", "\n", "'Prof-specialty'", ":", "'Professional'", ",", "'Protective-serv'", ":", "'Service'", ",", "\n", "'Tech-support'", ":", "'Service'", ",", "\n", "'Transport-moving'", ":", "'Blue-Collar'", ",", "'Unknown'", ":", "'Other/Unknown'", ",", "\n", "'Armed-Forces'", ":", "'Other/Unknown'", ",", "'?'", ":", "'Other/Unknown'", "}", "}", ")", "\n", "\n", "adult_data", "=", "adult_data", ".", "replace", "(", "{", "'marital-status'", ":", "{", "'Married-civ-spouse'", ":", "'Married'", ",", "'Married-AF-spouse'", ":", "'Married'", ",", "'Married-spouse-absent'", ":", "'Married'", ",", "'Never-married'", ":", "'Single'", "}", "}", ")", "\n", "\n", "adult_data", "=", "adult_data", ".", "replace", "(", "{", "'race'", ":", "{", "'Black'", ":", "'Other'", ",", "'Asian-Pac-Islander'", ":", "'Other'", ",", "\n", "'Amer-Indian-Eskimo'", ":", "'Other'", "}", "}", ")", "\n", "\n", "adult_data", "=", "adult_data", "[", "[", "'age'", ",", "'workclass'", ",", "'education'", ",", "'marital-status'", ",", "'occupation'", ",", "'race'", ",", "'gender'", ",", "\n", "'hours-per-week'", ",", "'income'", "]", "]", "\n", "\n", "adult_data", "=", "adult_data", ".", "replace", "(", "{", "'income'", ":", "{", "'<=50K'", ":", "0", ",", "'>50K'", ":", "1", "}", "}", ")", "\n", "\n", "adult_data", "=", "adult_data", ".", "replace", "(", "{", "'education'", ":", "{", "'Assoc-voc'", ":", "'Assoc'", ",", "'Assoc-acdm'", ":", "'Assoc'", ",", "\n", "'11th'", ":", "'School'", ",", "'10th'", ":", "'School'", ",", "'7th-8th'", ":", "'School'", ",", "'9th'", ":", "'School'", ",", "\n", "'12th'", ":", "'School'", ",", "'5th-6th'", ":", "'School'", ",", "'1st-4th'", ":", "'School'", ",", "'Preschool'", ":", "'School'", "}", "}", ")", "\n", "\n", "adult_data", "=", "adult_data", ".", "rename", "(", "columns", "=", "{", "'marital-status'", ":", "'marital_status'", ",", "'hours-per-week'", ":", "'hours_per_week'", "}", ")", "\n", "\n", "if", "save_intermediate", ":", "\n", "        ", "pass", "#adult_data.to_csv('adult.csv', index=False)", "\n", "\n", "", "return", "adult_data", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.helpers.get_adult_income_modelpath": [[62, 66], ["os.path.join"], "function", ["None"], ["", "def", "get_adult_income_modelpath", "(", ")", ":", "\n", "    ", "pkg_path", "=", "dice_ml", ".", "__path__", "[", "0", "]", "\n", "modelpath", "=", "os", ".", "path", ".", "join", "(", "pkg_path", ",", "'utils'", ",", "'sample_trained_models'", ",", "'adult.h5'", ")", "\n", "return", "modelpath", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.helpers.get_adult_data_info": [[67, 78], ["None"], "function", ["None"], ["", "def", "get_adult_data_info", "(", ")", ":", "\n", "    ", "feature_description", "=", "{", "'age'", ":", "'age'", ",", "\n", "'workclass'", ":", "'type of industry (Government, Other/Unknown, Private, Self-Employed)'", ",", "\n", "'education'", ":", "'education level (Assoc, Bachelors, Doctorate, HS-grad, Masters, Prof-school, School, Some-college)'", ",", "\n", "'marital_status'", ":", "'marital status (Divorced, Married, Separated, Single, Widowed)'", ",", "\n", "'occupation'", ":", "'occupation (Blue-Collar, Other/Unknown, Professional, Sales, Service, White-Collar)'", ",", "\n", "'race'", ":", "'white or other race?'", ",", "\n", "'gender'", ":", "'male or female?'", ",", "\n", "'hours_per_week'", ":", "'total work hours per week'", ",", "\n", "'income'", ":", "'0 (<=50K) vs 1 (>50K)'", "}", "\n", "return", "feature_description", "\n", "", ""]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.auto-encoder-train.ae_model": [[47, 70], ["tensorflow.keras.layers.Input", "tensorflow.keras.models.Model", "tensorflow.keras.layers.Input", "tensorflow.keras.models.Model", "tensorflow.keras.models.Model.", "tensorflow.keras.models.Model", "tensorflow.keras.models.Model.compile", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.MaxPooling2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.UpSampling2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.models.Model."], "function", ["None"], ["def", "ae_model", "(", ")", ":", "\n", "# encoder", "\n", "    ", "x_in", "=", "Input", "(", "shape", "=", "(", "28", ",", "28", ",", "1", ")", ")", "\n", "x", "=", "Conv2D", "(", "16", ",", "(", "3", ",", "3", ")", ",", "activation", "=", "'relu'", ",", "padding", "=", "'same'", ")", "(", "x_in", ")", "\n", "x", "=", "Conv2D", "(", "16", ",", "(", "3", ",", "3", ")", ",", "activation", "=", "'relu'", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "x", "=", "MaxPooling2D", "(", "(", "2", ",", "2", ")", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "encoded", "=", "Conv2D", "(", "1", ",", "(", "3", ",", "3", ")", ",", "activation", "=", "None", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "encoder", "=", "Model", "(", "x_in", ",", "encoded", ")", "\n", "\n", "# decoder", "\n", "dec_in", "=", "Input", "(", "shape", "=", "(", "14", ",", "14", ",", "1", ")", ")", "\n", "x", "=", "Conv2D", "(", "16", ",", "(", "3", ",", "3", ")", ",", "activation", "=", "'relu'", ",", "padding", "=", "'same'", ")", "(", "dec_in", ")", "\n", "x", "=", "UpSampling2D", "(", "(", "2", ",", "2", ")", ")", "(", "x", ")", "\n", "x", "=", "Conv2D", "(", "16", ",", "(", "3", ",", "3", ")", ",", "activation", "=", "'relu'", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "decoded", "=", "Conv2D", "(", "1", ",", "(", "3", ",", "3", ")", ",", "activation", "=", "None", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "decoder", "=", "Model", "(", "dec_in", ",", "decoded", ")", "\n", "\n", "# autoencoder = encoder + decoder", "\n", "x_out", "=", "decoder", "(", "encoder", "(", "x_in", ")", ")", "\n", "autoencoder", "=", "Model", "(", "x_in", ",", "x_out", ")", "\n", "autoencoder", ".", "compile", "(", "optimizer", "=", "'adam'", ",", "loss", "=", "'mse'", ")", "\n", "\n", "return", "autoencoder", ",", "encoder", ",", "decoder", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.__init__": [[9, 89], ["isinstance", "dataloader.DataLoader.split_data", "ValueError", "type", "ValueError", "type", "ValueError", "dataloader.DataLoader.data_df.columns.get_loc", "dataloader.DataLoader.data_df.columns.get_loc", "len", "dataloader.DataLoader.data_df[].astype", "len", "print", "print", "len", "dataloader.DataLoader.one_hot_encode_data", "dataloader.DataLoader.get_features_range", "dataloader.DataLoader.data_df.columns.tolist", "dataloader.DataLoader.data_df.columns.tolist", "dataloader.DataLoader.data_df.head", "dataloader.DataLoader.data_df.head", "dataloader.DataLoader.one_hot_encoded_data.columns.tolist", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.split_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.one_hot_encode_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_features_range"], ["def", "__init__", "(", "self", ",", "params", ")", ":", "\n", "        ", "\"\"\"Init method\n\n        :param dataframe: Pandas DataFrame.\n        :param continuous_features: List of names of continuous features. The remaining features are categorical features.\n        :param outcome_name: Outcome feature name.\n        :param permitted_range (optional): Dictionary with feature names as keys and permitted range as values. Defaults to the range inferred from training data.\n        :param test_size (optional): Proportion of test set split. Defaults to 0.2.\n        :param test_split_random_state (optional): Random state for train test split. Defaults to 17.\n\n        \"\"\"", "\n", "\n", "if", "isinstance", "(", "params", "[", "'dataframe'", "]", ",", "pd", ".", "DataFrame", ")", ":", "\n", "            ", "self", ".", "data_df", "=", "params", "[", "'dataframe'", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"should provide a pandas dataframe\"", ")", "\n", "\n", "", "if", "type", "(", "params", "[", "'continuous_features'", "]", ")", "is", "list", ":", "\n", "            ", "self", ".", "continuous_feature_names", "=", "params", "[", "'continuous_features'", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"should provide the name(s) of continuous features in the data\"", ")", "\n", "\n", "", "if", "type", "(", "params", "[", "'outcome_name'", "]", ")", "is", "str", ":", "\n", "            ", "self", ".", "outcome_name", "=", "params", "[", "'outcome_name'", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"should provide the name of outcome feature\"", ")", "\n", "\n", "", "self", ".", "categorical_feature_names", "=", "[", "name", "for", "name", "in", "self", ".", "data_df", ".", "columns", ".", "tolist", "(", "\n", ")", "if", "name", "not", "in", "self", ".", "continuous_feature_names", "+", "[", "self", ".", "outcome_name", "]", "]", "\n", "\n", "self", ".", "feature_names", "=", "[", "\n", "name", "for", "name", "in", "self", ".", "data_df", ".", "columns", ".", "tolist", "(", ")", "if", "name", "!=", "self", ".", "outcome_name", "]", "\n", "\n", "self", ".", "continuous_feature_indexes", "=", "[", "self", ".", "data_df", ".", "columns", ".", "get_loc", "(", "\n", "name", ")", "for", "name", "in", "self", ".", "continuous_feature_names", "if", "name", "in", "self", ".", "data_df", "]", "\n", "\n", "self", ".", "categorical_feature_indexes", "=", "[", "self", ".", "data_df", ".", "columns", ".", "get_loc", "(", "\n", "name", ")", "for", "name", "in", "self", ".", "categorical_feature_names", "if", "name", "in", "self", ".", "data_df", "]", "\n", "\n", "if", "'test_size'", "in", "params", ":", "\n", "            ", "self", ".", "test_size", "=", "params", "[", "'test_size'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "test_size", "=", "0.2", "\n", "\n", "", "if", "'test_split_random_state'", "in", "params", ":", "\n", "            ", "self", ".", "test_split_random_state", "=", "params", "[", "'test_split_random_state'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "test_split_random_state", "=", "17", "\n", "\n", "", "if", "len", "(", "self", ".", "categorical_feature_names", ")", ">", "0", ":", "\n", "            ", "self", ".", "data_df", "[", "self", ".", "categorical_feature_names", "]", "=", "self", ".", "data_df", "[", "self", ".", "categorical_feature_names", "]", ".", "astype", "(", "\n", "'category'", ")", "\n", "", "if", "len", "(", "self", ".", "continuous_feature_names", ")", ">", "0", ":", "\n", "            ", "print", "(", "self", ".", "data_df", ".", "head", "(", ")", ")", "\n", "#             for feature in self.continuous_feature_names:", "\n", "#                 if self.get_data_type(self.data_df[feature]) == ' float':", "\n", "#                     self.data_df[self.continuous_feature_names] = self.data_df[self.continuous_feature_names].astype(", "\n", "#                         float)", "\n", "#                 else:", "\n", "#                     self.data_df[self.continuous_feature_names] = self.data_df[self.continuous_feature_names].astype(", "\n", "#                         int)", "\n", "print", "(", "self", ".", "data_df", ".", "head", "(", ")", ")", "\n", "\n", "", "if", "len", "(", "self", ".", "categorical_feature_names", ")", ">", "0", ":", "\n", "#             print(self.data_df.head())", "\n", "            ", "self", ".", "one_hot_encoded_data", "=", "self", ".", "one_hot_encode_data", "(", "self", ".", "data_df", ")", "\n", "#             print(self.one_hot_encoded_data.head())", "\n", "self", ".", "encoded_feature_names", "=", "[", "x", "for", "x", "in", "self", ".", "one_hot_encoded_data", ".", "columns", ".", "tolist", "(", "\n", ")", "if", "x", "not", "in", "np", ".", "array", "(", "[", "self", ".", "outcome_name", "]", ")", "]", "\n", "", "else", ":", "\n", "# one-hot-encoded data is same as orignial data if there is no categorical features.", "\n", "            ", "self", ".", "one_hot_encoded_data", "=", "self", ".", "data_df", "\n", "self", ".", "encoded_feature_names", "=", "self", ".", "feature_names", "\n", "\n", "", "self", ".", "train_df", ",", "self", ".", "test_df", "=", "self", ".", "split_data", "(", "self", ".", "data_df", ")", "\n", "if", "'permitted_range'", "in", "params", ":", "\n", "            ", "self", ".", "permitted_range", "=", "params", "[", "'permitted_range'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "permitted_range", "=", "self", ".", "get_features_range", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_features_range": [[90, 96], ["dataloader.DataLoader.data_df[].min", "dataloader.DataLoader.data_df[].max"], "methods", ["None"], ["", "", "def", "get_features_range", "(", "self", ")", ":", "\n", "        ", "ranges", "=", "{", "}", "\n", "for", "feature_name", "in", "self", ".", "continuous_feature_names", ":", "\n", "            ", "ranges", "[", "feature_name", "]", "=", "[", "\n", "self", ".", "data_df", "[", "feature_name", "]", ".", "min", "(", ")", ",", "self", ".", "data_df", "[", "feature_name", "]", ".", "max", "(", ")", "]", "\n", "", "return", "ranges", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_data_type": [[97, 106], ["col.tolist", "isinstance", "float", "str().split", "str"], "methods", ["None"], ["", "def", "get_data_type", "(", "self", ",", "col", ")", ":", "\n", "        ", "\"\"\"Infers data type of a feature from the training data.\"\"\"", "\n", "for", "instance", "in", "col", ".", "tolist", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "instance", ",", "int", ")", ":", "\n", "                ", "return", "'int'", "\n", "", "else", ":", "\n", "                ", "if", "float", "(", "str", "(", "instance", ")", ".", "split", "(", "'.'", ")", "[", "1", "]", ")", ">", "0", ":", "\n", "                    ", "return", "'float'", "\n", "", "", "", "return", "'int'", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.one_hot_encode_data": [[107, 110], ["pandas.get_dummies"], "methods", ["None"], ["", "def", "one_hot_encode_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"One-hot-encodes the data.\"\"\"", "\n", "return", "pd", ".", "get_dummies", "(", "data", ",", "drop_first", "=", "False", ",", "columns", "=", "self", ".", "categorical_feature_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.normalize_data": [[111, 120], ["df.copy", "dataloader.DataLoader.data_df[].max", "dataloader.DataLoader.data_df[].min"], "methods", ["None"], ["", "def", "normalize_data", "(", "self", ",", "df", ")", ":", "\n", "        ", "\"\"\"Normalizes continuous features to make them fall in the range [0,1].\"\"\"", "\n", "result", "=", "df", ".", "copy", "(", ")", "\n", "for", "feature_name", "in", "self", ".", "continuous_feature_names", ":", "\n", "            ", "max_value", "=", "self", ".", "data_df", "[", "feature_name", "]", ".", "max", "(", ")", "\n", "min_value", "=", "self", ".", "data_df", "[", "feature_name", "]", ".", "min", "(", ")", "\n", "result", "[", "feature_name", "]", "=", "(", "\n", "df", "[", "feature_name", "]", "-", "min_value", ")", "/", "(", "max_value", "-", "min_value", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data": [[121, 130], ["df.copy", "dataloader.DataLoader.data_df[].max", "dataloader.DataLoader.data_df[].min"], "methods", ["None"], ["", "def", "de_normalize_data", "(", "self", ",", "df", ")", ":", "\n", "        ", "\"\"\"De-normalizes continuous features from [0,1] range to original range.\"\"\"", "\n", "result", "=", "df", ".", "copy", "(", ")", "\n", "for", "feature_name", "in", "self", ".", "continuous_feature_names", ":", "\n", "            ", "max_value", "=", "self", ".", "data_df", "[", "feature_name", "]", ".", "max", "(", ")", "\n", "min_value", "=", "self", ".", "data_df", "[", "feature_name", "]", ".", "min", "(", ")", "\n", "result", "[", "feature_name", "]", "=", "(", "\n", "df", "[", "feature_name", "]", "*", "(", "max_value", "-", "min_value", ")", ")", "+", "min_value", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_minx_maxx": [[131, 149], ["numpy.array", "numpy.array", "enumerate", "dataloader.DataLoader.data_df[].max", "dataloader.DataLoader.data_df[].min", "len", "len"], "methods", ["None"], ["", "def", "get_minx_maxx", "(", "self", ",", "normalized", "=", "True", ")", ":", "\n", "        ", "\"\"\"Gets the min/max value of features in normalized or de-normalized form.\"\"\"", "\n", "minx", "=", "np", ".", "array", "(", "[", "[", "0.0", "]", "*", "len", "(", "self", ".", "encoded_feature_names", ")", "]", ")", "\n", "maxx", "=", "np", ".", "array", "(", "[", "[", "1.0", "]", "*", "len", "(", "self", ".", "encoded_feature_names", ")", "]", ")", "\n", "\n", "for", "idx", ",", "feature_name", "in", "enumerate", "(", "self", ".", "continuous_feature_names", ")", ":", "\n", "            ", "max_value", "=", "self", ".", "data_df", "[", "feature_name", "]", ".", "max", "(", ")", "\n", "min_value", "=", "self", ".", "data_df", "[", "feature_name", "]", ".", "min", "(", ")", "\n", "\n", "if", "normalized", ":", "\n", "                ", "minx", "[", "0", "]", "[", "idx", "]", "=", "(", "self", ".", "permitted_range", "[", "feature_name", "]", "\n", "[", "0", "]", "-", "min_value", ")", "/", "(", "max_value", "-", "min_value", ")", "\n", "maxx", "[", "0", "]", "[", "idx", "]", "=", "(", "self", ".", "permitted_range", "[", "feature_name", "]", "\n", "[", "1", "]", "-", "min_value", ")", "/", "(", "max_value", "-", "min_value", ")", "\n", "", "else", ":", "\n", "                ", "minx", "[", "0", "]", "[", "idx", "]", "=", "self", ".", "permitted_range", "[", "feature_name", "]", "[", "0", "]", "\n", "maxx", "[", "0", "]", "[", "idx", "]", "=", "self", ".", "permitted_range", "[", "feature_name", "]", "[", "1", "]", "\n", "", "", "return", "minx", ",", "maxx", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.split_data": [[150, 154], ["sklearn.model_selection.train_test_split"], "methods", ["None"], ["", "def", "split_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "train_df", ",", "test_df", "=", "train_test_split", "(", "\n", "data", ",", "test_size", "=", "self", ".", "test_size", ",", "random_state", "=", "self", ".", "test_split_random_state", ")", "\n", "return", "train_df", ",", "test_df", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_mads_from_training_data": [[155, 169], ["dataloader.DataLoader.normalize_data", "numpy.median", "numpy.median", "abs", "abs", "numpy.median", "numpy.median"], "methods", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.normalize_data"], ["", "def", "get_mads_from_training_data", "(", "self", ",", "normalized", "=", "False", ")", ":", "\n", "        ", "\"\"\"Computes Median Absolute Deviation of features.\"\"\"", "\n", "\n", "mads", "=", "{", "}", "\n", "if", "normalized", "is", "False", ":", "\n", "            ", "for", "feature", "in", "self", ".", "continuous_feature_names", ":", "\n", "                ", "mads", "[", "feature", "]", "=", "np", ".", "median", "(", "\n", "abs", "(", "self", ".", "data_df", "[", "feature", "]", ".", "values", "-", "np", ".", "median", "(", "self", ".", "data_df", "[", "feature", "]", ".", "values", ")", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "normalized_train_df", "=", "self", ".", "normalize_data", "(", "self", ".", "train_df", ")", "\n", "for", "feature", "in", "self", ".", "continuous_feature_names", ":", "\n", "                ", "mads", "[", "feature", "]", "=", "np", ".", "median", "(", "\n", "abs", "(", "normalized_train_df", "[", "feature", "]", ".", "values", "-", "np", ".", "median", "(", "normalized_train_df", "[", "feature", "]", ".", "values", ")", ")", ")", "\n", "", "", "return", "mads", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_data_params": [[170, 179], ["dataloader.DataLoader.get_minx_maxx", "dataloader.DataLoader.get_encoded_categorical_feature_indexes"], "methods", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_minx_maxx", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_encoded_categorical_feature_indexes"], ["", "def", "get_data_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"Gets all data related params for DiCE.\"\"\"", "\n", "\n", "minx", ",", "maxx", "=", "self", ".", "get_minx_maxx", "(", "normalized", "=", "True", ")", "\n", "\n", "# get the column indexes of categorical features after one-hot-encoding", "\n", "self", ".", "encoded_categorical_feature_indexes", "=", "self", ".", "get_encoded_categorical_feature_indexes", "(", ")", "\n", "\n", "return", "minx", ",", "maxx", ",", "self", ".", "encoded_categorical_feature_indexes", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_encoded_categorical_feature_indexes": [[180, 188], ["cols.append", "dataloader.DataLoader.encoded_feature_names.index", "col.startswith"], "methods", ["None"], ["", "def", "get_encoded_categorical_feature_indexes", "(", "self", ")", ":", "\n", "        ", "\"\"\"Gets the column indexes categorical features after one-hot-encoding.\"\"\"", "\n", "cols", "=", "[", "]", "\n", "for", "col_parent", "in", "self", ".", "categorical_feature_names", ":", "\n", "            ", "temp", "=", "[", "self", ".", "encoded_feature_names", ".", "index", "(", "\n", "col", ")", "for", "col", "in", "self", ".", "encoded_feature_names", "if", "col", ".", "startswith", "(", "col_parent", ")", "]", "\n", "cols", ".", "append", "(", "temp", ")", "\n", "", "return", "cols", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_indexes_of_features_to_vary": [[189, 195], ["range", "enumerate", "col.startswith", "len", "tuple"], "methods", ["None"], ["", "def", "get_indexes_of_features_to_vary", "(", "self", ",", "features_to_vary", "=", "'all'", ")", ":", "\n", "        ", "\"\"\"Gets indexes from feature names of one-hot-encoded data.\"\"\"", "\n", "if", "features_to_vary", "==", "\"all\"", ":", "\n", "            ", "return", "[", "i", "for", "i", "in", "range", "(", "len", "(", "self", ".", "encoded_feature_names", ")", ")", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "colidx", "for", "colidx", ",", "col", "in", "enumerate", "(", "self", ".", "encoded_feature_names", ")", "if", "col", ".", "startswith", "(", "tuple", "(", "features_to_vary", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.from_dummies": [[196, 206], ["data.copy", "pandas.Categorical", "data.copy.drop", "c.replace", "numpy.array", "numpy.argmax"], "methods", ["None"], ["", "", "def", "from_dummies", "(", "self", ",", "data", ",", "prefix_sep", "=", "'_'", ")", ":", "\n", "        ", "\"\"\"Gets the original data from dummy encoded data with k levels.\"\"\"", "\n", "out", "=", "data", ".", "copy", "(", ")", "\n", "for", "l", "in", "self", ".", "categorical_feature_names", ":", "\n", "            ", "cols", ",", "labs", "=", "[", "[", "c", ".", "replace", "(", "\n", "x", ",", "\"\"", ")", "for", "c", "in", "data", ".", "columns", "if", "l", "+", "prefix_sep", "in", "c", "]", "for", "x", "in", "[", "\"\"", ",", "l", "+", "prefix_sep", "]", "]", "\n", "out", "[", "l", "]", "=", "pd", ".", "Categorical", "(", "\n", "np", ".", "array", "(", "labs", ")", "[", "np", ".", "argmax", "(", "data", "[", "cols", "]", ".", "values", ",", "axis", "=", "1", ")", "]", ")", "\n", "out", ".", "drop", "(", "cols", ",", "axis", "=", "1", ",", "inplace", "=", "True", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decimal_precisions": [[207, 221], ["enumerate", "len", "dataloader.DataLoader.data_df[].tolist", "isinstance", "float", "len", "str().split", "str().split", "str", "str"], "methods", ["None"], ["", "def", "get_decimal_precisions", "(", "self", ")", ":", "\n", "        ", "\"\"\"\"Gets the precision of continuous features in the data.\"\"\"", "\n", "precisions", "=", "[", "0", "]", "*", "len", "(", "self", ".", "feature_names", ")", "\n", "for", "ix", ",", "col", "in", "enumerate", "(", "self", ".", "continuous_feature_names", ")", ":", "\n", "            ", "precisions", "[", "ix", "]", "=", "0", "\n", "for", "instance", "in", "self", ".", "data_df", "[", "col", "]", ".", "tolist", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "instance", ",", "int", ")", ":", "\n", "                    ", "precisions", "[", "ix", "]", "=", "0", "\n", "break", "\n", "", "else", ":", "\n", "                    ", "if", "float", "(", "str", "(", "instance", ")", ".", "split", "(", "'.'", ")", "[", "1", "]", ")", ">", "0", ":", "\n", "                        ", "precisions", "[", "ix", "]", "=", "len", "(", "str", "(", "instance", ")", ".", "split", "(", "'.'", ")", "[", "1", "]", ")", "\n", "break", "\n", "", "", "", "", "return", "precisions", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data": [[222, 229], ["isinstance", "dataloader.DataLoader.from_dummies", "pandas.DataFrame", "range", "len"], "methods", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.from_dummies"], ["", "def", "get_decoded_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"Gets the original data from dummy encoded data.\"\"\"", "\n", "if", "isinstance", "(", "data", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "index", "=", "[", "i", "for", "i", "in", "range", "(", "0", ",", "len", "(", "data", ")", ")", "]", "\n", "data", "=", "pd", ".", "DataFrame", "(", "data", "=", "data", ",", "index", "=", "index", ",", "\n", "columns", "=", "self", ".", "encoded_feature_names", ")", "\n", "", "return", "self", ".", "from_dummies", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.prepare_df_for_encoding": [[230, 248], ["pandas.DataFrame", "range", "range", "levels.append", "len", "pandas.DataFrame", "pandas.concat", "len", "pandas.DataFrame", "pandas.concat", "dataloader.DataLoader.data_df[].cat.categories.tolist"], "methods", ["None"], ["", "def", "prepare_df_for_encoding", "(", "self", ")", ":", "\n", "        ", "\"\"\"Facilitates prepare_query_instance() function.\"\"\"", "\n", "levels", "=", "[", "]", "\n", "colnames", "=", "self", ".", "categorical_feature_names", "\n", "for", "cat_feature", "in", "colnames", ":", "\n", "            ", "levels", ".", "append", "(", "self", ".", "data_df", "[", "cat_feature", "]", ".", "cat", ".", "categories", ".", "tolist", "(", ")", ")", "\n", "\n", "", "df", "=", "pd", ".", "DataFrame", "(", "{", "colnames", "[", "0", "]", ":", "levels", "[", "0", "]", "}", ")", "\n", "for", "col", "in", "range", "(", "1", ",", "len", "(", "colnames", ")", ")", ":", "\n", "            ", "temp_df", "=", "pd", ".", "DataFrame", "(", "{", "colnames", "[", "col", "]", ":", "levels", "[", "col", "]", "}", ")", "\n", "df", "=", "pd", ".", "concat", "(", "[", "df", ",", "temp_df", "]", ",", "axis", "=", "1", ",", "sort", "=", "False", ")", "\n", "\n", "", "colnames", "=", "self", ".", "continuous_feature_names", "\n", "for", "col", "in", "range", "(", "0", ",", "len", "(", "colnames", ")", ")", ":", "\n", "            ", "temp_df", "=", "pd", ".", "DataFrame", "(", "{", "colnames", "[", "col", "]", ":", "[", "]", "}", ")", "\n", "df", "=", "pd", ".", "concat", "(", "[", "df", ",", "temp_df", "]", ",", "axis", "=", "1", ",", "sort", "=", "False", ")", "\n", "\n", "", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.prepare_query_instance": [[249, 273], ["isinstance", "pandas.DataFrame.reset_index", "pandas.DataFrame.from_dict", "isinstance", "dataloader.DataLoader.normalize_data", "dataloader.DataLoader.prepare_df_for_encoding", "dataloader.DataLoader.append", "dataloader.DataLoader.one_hot_encode_data", "dataloader.DataLoader.normalize_data", "dataloader.DataLoader.tail().reset_index", "dict", "pandas.DataFrame", "zip", "dataloader.DataLoader.tail", "dict.keys", "dict.values"], "methods", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.prepare_df_for_encoding", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.one_hot_encode_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.normalize_data"], ["", "def", "prepare_query_instance", "(", "self", ",", "query_instance", ",", "encode", ")", ":", "\n", "        ", "\"\"\"Prepares user defined test input for DiCE.\"\"\"", "\n", "\n", "if", "isinstance", "(", "query_instance", ",", "list", ")", ":", "\n", "            ", "query_instance", "=", "{", "'row1'", ":", "query_instance", "}", "\n", "test", "=", "pd", ".", "DataFrame", ".", "from_dict", "(", "\n", "query_instance", ",", "orient", "=", "'index'", ",", "columns", "=", "self", ".", "feature_names", ")", "\n", "\n", "", "elif", "isinstance", "(", "query_instance", ",", "dict", ")", ":", "\n", "            ", "query_instance", "=", "dict", "(", "zip", "(", "query_instance", ".", "keys", "(", ")", ",", "[", "[", "q", "]", "for", "q", "in", "query_instance", ".", "values", "(", ")", "]", ")", ")", "\n", "test", "=", "pd", ".", "DataFrame", "(", "query_instance", ",", "columns", "=", "self", ".", "feature_names", ")", "\n", "\n", "", "test", "=", "test", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "\n", "if", "encode", "is", "False", ":", "\n", "            ", "return", "self", ".", "normalize_data", "(", "test", ")", "\n", "", "else", ":", "\n", "            ", "temp", "=", "self", ".", "prepare_df_for_encoding", "(", ")", "\n", "\n", "temp", "=", "temp", ".", "append", "(", "test", ",", "ignore_index", "=", "True", ",", "sort", "=", "False", ")", "\n", "temp", "=", "self", ".", "one_hot_encode_data", "(", "temp", ")", "\n", "temp", "=", "self", ".", "normalize_data", "(", "temp", ")", "\n", "\n", "return", "temp", ".", "tail", "(", "test", ".", "shape", "[", "0", "]", ")", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_dev_data": [[274, 321], ["model_interface.load_model", "dataloader.DataLoader.get_minx_maxx", "dataloader.DataLoader.normalize_data", "dataloader.DataLoader.split_data", "test.drop_duplicates().reset_index.drop_duplicates().reset_index.drop_duplicates().reset_index", "tf.Variable", "model_interface.get_output", "test[].values.astype", "dataloader.DataLoader.from_dummies", "dataloader.DataLoader.de_normalize_data", "tf.get_default_session", "tf.get_default_session", "tf.InteractiveSession", "dataloader.DataLoader.data_sess.run", "test.drop_duplicates().reset_index.drop_duplicates().reset_index.drop_duplicates", "range", "len", "range", "range", "numpy.array", "len", "len"], "methods", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_minx_maxx", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.split_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.from_dummies", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data"], ["", "", "def", "get_dev_data", "(", "self", ",", "model_interface", ",", "desired_class", ",", "filter_threshold", "=", "0.5", ")", ":", "\n", "        ", "\"\"\"Constructs dev data by extracting part of the test data for which finding counterfactuals make sense.\"\"\"", "\n", "\n", "# create TensorFLow session if one is not already created", "\n", "if", "tf", ".", "get_default_session", "(", ")", "is", "not", "None", ":", "\n", "            ", "self", ".", "data_sess", "=", "tf", ".", "get_default_session", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "data_sess", "=", "tf", ".", "InteractiveSession", "(", ")", "\n", "\n", "# loading trained model", "\n", "", "model_interface", ".", "load_model", "(", ")", "\n", "\n", "# get the permitted range of change for each feature", "\n", "minx", ",", "maxx", "=", "self", ".", "get_minx_maxx", "(", "normalized", "=", "True", ")", "\n", "\n", "# get the transformed data: continuous features are normalized to fall in the range [0,1], and categorical features are one-hot encoded", "\n", "data_df_transformed", "=", "self", ".", "normalize_data", "(", "self", ".", "one_hot_encoded_data", ")", "\n", "\n", "# split data - nomralization considers only train df and there is no leakage due to transformation before train-test splitting", "\n", "_", ",", "test", "=", "self", ".", "split_data", "(", "data_df_transformed", ")", "\n", "test", "=", "test", ".", "drop_duplicates", "(", "\n", "subset", "=", "self", ".", "encoded_feature_names", ")", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "\n", "# finding target predicted probabilities", "\n", "input_tensor", "=", "tf", ".", "Variable", "(", "minx", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "output_tensor", "=", "model_interface", ".", "get_output", "(", "\n", "input_tensor", ")", "# model(input_tensor)", "\n", "temp_data", "=", "test", "[", "self", ".", "encoded_feature_names", "]", ".", "values", ".", "astype", "(", "np", ".", "float32", ")", "\n", "dev_preds", "=", "[", "self", ".", "data_sess", ".", "run", "(", "output_tensor", ",", "feed_dict", "=", "{", "\n", "input_tensor", ":", "np", ".", "array", "(", "[", "dt", "]", ")", "}", ")", "for", "dt", "in", "temp_data", "]", "\n", "dev_preds", "=", "[", "dev_preds", "[", "i", "]", "[", "0", "]", "[", "0", "]", "for", "i", "in", "range", "(", "len", "(", "dev_preds", ")", ")", "]", "\n", "\n", "# filtering examples which have predicted value >/< threshold", "\n", "dev_data", "=", "test", "[", "self", ".", "encoded_feature_names", "]", "\n", "if", "desired_class", "==", "0", ":", "\n", "            ", "idxs", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "dev_preds", ")", ")", "\n", "if", "dev_preds", "[", "i", "]", ">", "filter_threshold", "]", "\n", "", "else", ":", "\n", "            ", "idxs", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "dev_preds", ")", ")", "\n", "if", "dev_preds", "[", "i", "]", "<", "filter_threshold", "]", "\n", "", "dev_data", "=", "dev_data", ".", "iloc", "[", "idxs", "]", "\n", "dev_preds", "=", "[", "dev_preds", "[", "i", "]", "for", "i", "in", "idxs", "]", "\n", "\n", "# convert from one-hot encoded vals to user interpretable fromat", "\n", "dev_data", "=", "self", ".", "from_dummies", "(", "dev_data", ")", "\n", "dev_data", "=", "self", ".", "de_normalize_data", "(", "dev_data", ")", "\n", "return", "dev_data", ",", "dev_preds", "# values.tolist()", "", "", "", ""]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.CF_VAE.__init__": [[11, 92], ["torch.nn.Module.__init__", "range", "len", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "d.get_data_params", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "vae_model.CF_VAE.encoded_continuous_feature_indexes.append"], "methods", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.blackboxmodel.BlackBox.__init__", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_data_params"], ["    ", "def", "__init__", "(", "self", ",", "data_size", ",", "encoded_size", ")", ":", "\n", "\n", "        ", "super", "(", "CF_VAE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "data_size", "=", "data_size", "\n", "self", ".", "encoded_size", "=", "encoded_size", "\n", "# size= (W-Kernel_Size)/Stride + 1 after one conv2d; downsampling by factor of 2 in case of maxpool", "\n", "self", ".", "convoluted_size", "=", "int", "(", "(", "self", ".", "data_size", "-", "3", "*", "2", ")", ")", "\n", "\n", "# No Categorical Variables for MINST, everything is continuous ", "\n", "self", ".", "encoded_categorical_feature_indexes", "=", "[", "]", "\n", "self", ".", "encoded_continuous_feature_indexes", "=", "[", "]", "\n", "self", ".", "encoded_start_cat", "=", "0", "\n", "\n", "self", ".", "encoder_mean_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "16", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "#nn.MaxPool2d(kernel_size=2, stride=2),", "\n", "nn", ".", "Conv2d", "(", "16", ",", "1", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", ")", "\n", "\n", "#         self.encoder_mean_conv= nn.Sequential(", "\n", "#             nn.Linear( 1*28*28, 2*self.convoluted_size**2),", "\n", "#             nn.BatchNorm1d(2*self.convoluted_size**2),", "\n", "#             nn.ReLU(),", "\n", "#             nn.Linear( 2*self.convoluted_size**2, self.convoluted_size**2),", "\n", "#             nn.BatchNorm1d(self.convoluted_size**2),", "\n", "#             nn.ReLU(),", "\n", "#             )", "\n", "\n", "\n", "self", ".", "encoder_mean_fc", "=", "nn", ".", "Sequential", "(", "\n", "# Plus 1 to the input encoding size and data size to incorporate the target class label        ", "\n", "nn", ".", "Linear", "(", "self", ".", "convoluted_size", "**", "2", "+", "1", ",", "self", ".", "encoded_size", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "self", ".", "encoded_size", ")", ",", "\n", "#nn.ReLU(),", "\n", "#nn.Linear(self.encoded_size, self.encoded_size),", "\n", "#nn.BatchNorm1d(self.encoded_size),", "\n", "#nn.ReLU(),", "\n", ")", "\n", "\n", "self", ".", "encoder_var_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "16", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "#nn.MaxPool2d(kernel_size=2, stride=2),", "\n", "nn", ".", "Conv2d", "(", "16", ",", "1", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", ")", "\n", "\n", "#         self.encoder_var_conv= nn.Sequential(", "\n", "#             nn.Linear( 1*28*28, 2*self.convoluted_size**2 ),", "\n", "#             nn.BatchNorm1d(2*self.convoluted_size**2),", "\n", "#             nn.ReLU(),", "\n", "#             nn.Linear( 2*self.convoluted_size**2, self.convoluted_size**2),", "\n", "#             nn.BatchNorm1d(self.convoluted_size**2),", "\n", "#             nn.ReLU(),", "\n", "#         )", "\n", "\n", "self", ".", "encoder_var_fc", "=", "nn", ".", "Sequential", "(", "\n", "# Plus 1 to the input encoding size and data size to incorporate the target class label                    ", "\n", "nn", ".", "Linear", "(", "self", ".", "convoluted_size", "**", "2", "+", "1", ",", "self", ".", "encoded_size", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "self", ".", "encoded_size", ")", ",", "\n", "#nn.ReLU(),", "\n", "#nn.Linear(self.encoded_size, self.encoded_size),", "\n", "#nn.BatchNorm1d(self.encoded_size),", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", ")", "\n", "\n", "# Plus 1 to the input encoding size and data size to incorporate the target class label", "\n", "self", ".", "decoder_mean_fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "encoded_size", "+", "1", ",", "self", ".", "convoluted_size", "**", "2", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "self", ".", "convoluted_size", "**", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "#nn.Linear( self.convoluted_size**2, self.convoluted_size**2 ),", "\n", "#nn.BatchNorm1d(self.convoluted_size**2),", "\n", "#nn.ReLU(),", "\n", ")", "\n", "\n", "self", ".", "decoder_mean_conv", "=", "nn", ".", "Sequential", "(", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.CF_VAE.encoder": [[94, 98], ["vae_model.CF_VAE.encoder_mean", "vae_model.CF_VAE.encoder_var"], "methods", ["None"], ["nn", ".", "BatchNorm1d", "(", "2", "*", "self", ".", "convoluted_size", "**", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "2", "*", "self", ".", "convoluted_size", "**", "2", ",", "1", "*", "28", "*", "28", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "1", "*", "28", "*", "28", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.CF_VAE.decoder": [[99, 102], ["vae_model.CF_VAE.decoder_mean"], "methods", ["None"], [")", "\n", "\n", "#         self.decoder_mean_conv = nn.Sequential(", "\n", "#             nn.ConvTranspose2d(1, 16, kernel_size= 3, stride=1, padding=0 ),", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.CF_VAE.sample_latent_code": [[103, 106], ["torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "methods", ["None"], ["#             nn.ReLU(),", "\n", "#             #nn.MaxUnpool2d(kernel_size=2, stride=2),", "\n", "#             nn.ConvTranspose2d(16, 16, kernel_size= 3, stride=1, padding=0 ),", "\n", "#             nn.Sigmoid(),", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.CF_VAE.normal_likelihood": [[107, 109], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["None"], ["#             nn.ConvTranspose2d(16, 1, kernel_size=3, stride=1, padding=0),", "\n", "#             nn.Sigmoid(),", "\n", "#             )", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.CF_VAE.forward": [[110, 128], ["torch.tensor().float.view", "torch.tensor().float.view", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "vae_model.CF_VAE.encoder", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "vae_model.CF_VAE.sample_latent_code", "vae_model.CF_VAE.decoder", "res[].append", "res[].append", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.AutoEncoder.encoder", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.AutoEncoder.sample_latent_code", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.AutoEncoder.decoder"], ["\n", "\n", "", "def", "encoder", "(", "self", ",", "x", ",", "c", ")", ":", "\n", "        ", "x", "=", "x", ".", "view", "(", "-", "1", ",", "1", ",", "self", ".", "data_size", ",", "self", ".", "data_size", ")", "\n", "\n", "mean", "=", "self", ".", "encoder_mean_conv", "(", "x", ")", "\n", "mean", "=", "mean", ".", "view", "(", "-", "1", ",", "self", ".", "convoluted_size", "**", "2", ")", "\n", "mean", "=", "torch", ".", "cat", "(", "(", "mean", ",", "c", ")", ",", "1", ")", "\n", "mean", "=", "self", ".", "encoder_mean_fc", "(", "mean", ")", "\n", "\n", "logvar", "=", "self", ".", "encoder_var_conv", "(", "x", ")", "\n", "logvar", "=", "logvar", ".", "view", "(", "-", "1", ",", "self", ".", "convoluted_size", "**", "2", ")", "\n", "logvar", "=", "torch", ".", "cat", "(", "(", "logvar", ",", "c", ")", ",", "1", ")", "\n", "logvar", "=", "0.01", "+", "self", ".", "encoder_var_fc", "(", "logvar", ")", "\n", "\n", "return", "mean", ",", "logvar", "\n", "\n", "", "def", "decoder", "(", "self", ",", "z", ",", "c", ")", ":", "\n", "        ", "z", "=", "torch", ".", "cat", "(", "(", "z", ",", "c", ")", ",", "1", ")", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.CF_VAE.compute_elbo": [[129, 141], ["torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "c.view.view.view", "vae_model.CF_VAE.encoder", "vae_model.CF_VAE.sample_latent_code", "vae_model.CF_VAE.decoder", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "pred_model", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.AutoEncoder.encoder", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.AutoEncoder.sample_latent_code", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.AutoEncoder.decoder"], ["mean", "=", "self", ".", "decoder_mean_fc", "(", "z", ")", "\n", "#mean= mean.view(-1, 1, self.convoluted_size, self.convoluted_size)", "\n", "mean", "=", "self", ".", "decoder_mean_conv", "(", "mean", ")", "\n", "\n", "mean", "=", "mean", ".", "view", "(", "-", "1", ",", "self", ".", "data_size", "**", "2", ")", "\n", "\n", "return", "mean", "\n", "\n", "", "def", "sample_latent_code", "(", "self", ",", "mean", ",", "logvar", ")", ":", "\n", "        ", "eps", "=", "torch", ".", "randn_like", "(", "logvar", ")", "\n", "return", "mean", "+", "torch", ".", "sqrt", "(", "logvar", ")", "*", "eps", "\n", "\n", "", "def", "normal_likelihood", "(", "self", ",", "x", ",", "mean", ",", "logvar", ",", "raxis", "=", "1", ")", ":", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.AutoEncoder.__init__": [[144, 223], ["torch.nn.Module.__init__", "range", "len", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "d.get_data_params", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "vae_model.AutoEncoder.encoded_continuous_feature_indexes.append"], "methods", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.blackboxmodel.BlackBox.__init__", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_data_params"], ["", "def", "forward", "(", "self", ",", "x", ",", "c", ")", ":", "\n", "        ", "c", "=", "c", ".", "view", "(", "c", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "c", "=", "torch", ".", "tensor", "(", "c", ")", ".", "float", "(", ")", "\n", "res", "=", "{", "}", "\n", "mc_samples", "=", "50", "\n", "em", ",", "ev", "=", "self", ".", "encoder", "(", "x", ",", "c", ")", "\n", "res", "[", "'em'", "]", "=", "em", "\n", "res", "[", "'ev'", "]", "=", "ev", "\n", "res", "[", "'z'", "]", "=", "[", "]", "\n", "res", "[", "'x_pred'", "]", "=", "[", "]", "\n", "res", "[", "'mc_samples'", "]", "=", "mc_samples", "\n", "for", "i", "in", "range", "(", "mc_samples", ")", ":", "\n", "            ", "z", "=", "self", ".", "sample_latent_code", "(", "em", ",", "ev", ")", "\n", "x_pred", "=", "self", ".", "decoder", "(", "z", ",", "c", ")", "\n", "res", "[", "'z'", "]", ".", "append", "(", "z", ")", "\n", "res", "[", "'x_pred'", "]", ".", "append", "(", "x_pred", ")", "\n", "\n", "", "return", "res", "\n", "\n", "", "def", "compute_elbo", "(", "self", ",", "x", ",", "c", ",", "pred_model", ")", ":", "\n", "        ", "c", "=", "torch", ".", "tensor", "(", "c", ")", ".", "float", "(", ")", "\n", "c", "=", "c", ".", "view", "(", "c", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "em", ",", "ev", "=", "self", ".", "encoder", "(", "x", ",", "c", ")", "\n", "kl_divergence", "=", "0.5", "*", "torch", ".", "mean", "(", "em", "**", "2", "+", "ev", "-", "torch", ".", "log", "(", "ev", ")", "-", "1", ",", "axis", "=", "1", ")", "\n", "\n", "z", "=", "self", ".", "sample_latent_code", "(", "em", ",", "ev", ")", "\n", "dm", "=", "self", ".", "decoder", "(", "z", ",", "c", ")", "\n", "log_px_z", "=", "torch", ".", "tensor", "(", "0.0", ")", "\n", "\n", "x_pred", "=", "dm", "\n", "return", "torch", ".", "mean", "(", "log_px_z", ")", ",", "torch", ".", "mean", "(", "kl_divergence", ")", ",", "x", ",", "x_pred", ",", "torch", ".", "argmax", "(", "pred_model", "(", "x_pred", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "", "class", "AutoEncoder", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "data_size", ",", "encoded_size", ")", ":", "\n", "\n", "        ", "super", "(", "AutoEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "data_size", "=", "data_size", "\n", "self", ".", "encoded_size", "=", "encoded_size", "\n", "# size= (W-Kernel_Size)/Stride + 1 after one conv2d; downsampling by factor of 2 in case of maxpool", "\n", "self", ".", "convoluted_size", "=", "int", "(", "(", "self", ".", "data_size", "-", "3", "*", "2", ")", ")", "\n", "\n", "# No Categorical Variables for MINST, everything is continuous ", "\n", "self", ".", "encoded_categorical_feature_indexes", "=", "[", "]", "\n", "self", ".", "encoded_continuous_feature_indexes", "=", "[", "]", "\n", "self", ".", "encoded_start_cat", "=", "0", "\n", "\n", "self", ".", "encoder_mean_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "16", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "#nn.MaxPool2d(kernel_size=2, stride=2),", "\n", "nn", ".", "Conv2d", "(", "16", ",", "1", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", ")", "\n", "\n", "self", ".", "encoder_mean_fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "convoluted_size", "**", "2", ",", "self", ".", "encoded_size", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "self", ".", "encoded_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "encoded_size", ",", "self", ".", "encoded_size", ")", "\n", ")", "\n", "\n", "self", ".", "encoder_var_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "16", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "16", ",", "1", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", ")", "\n", "\n", "self", ".", "encoder_var_fc", "=", "nn", ".", "Sequential", "(", "\n", "# Plus 1 to the input encoding size and data size to incorporate the target class label                    ", "\n", "nn", ".", "Linear", "(", "self", ".", "convoluted_size", "**", "2", ",", "self", ".", "encoded_size", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "self", ".", "encoded_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "encoded_size", ",", "self", ".", "encoded_size", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.AutoEncoder.encoder": [[225, 229], ["vae_model.AutoEncoder.encoder_mean", "vae_model.AutoEncoder.encoder_var"], "methods", ["None"], ["self", ".", "decoder_mean_fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "encoded_size", ",", "self", ".", "convoluted_size", "**", "2", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "self", ".", "convoluted_size", "**", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "convoluted_size", "**", "2", ",", "self", ".", "convoluted_size", "**", "2", ")", ",", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.AutoEncoder.decoder": [[230, 233], ["vae_model.AutoEncoder.decoder_mean"], "methods", ["None"], ["nn", ".", "BatchNorm1d", "(", "self", ".", "convoluted_size", "**", "2", ")", ",", "\n", ")", "\n", "\n", "self", ".", "decoder_mean_conv", "=", "nn", ".", "Sequential", "(", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.AutoEncoder.sample_latent_code": [[234, 237], ["torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "methods", ["None"], ["nn", ".", "ConvTranspose2d", "(", "1", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "#nn.MaxUnpool2d(kernel_size=2, stride=2),", "\n", "nn", ".", "ConvTranspose2d", "(", "16", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.AutoEncoder.normal_likelihood": [[238, 240], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["None"], ["nn", ".", "ConvTranspose2d", "(", "16", ",", "1", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.AutoEncoder.forward": [[241, 257], ["vae_model.AutoEncoder.encoder", "range", "vae_model.AutoEncoder.sample_latent_code", "vae_model.AutoEncoder.decoder", "res[].append", "res[].append"], "methods", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.AutoEncoder.encoder", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.AutoEncoder.sample_latent_code", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.AutoEncoder.decoder"], ["\n", "\n", "", "def", "encoder", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "view", "(", "-", "1", ",", "1", ",", "self", ".", "data_size", ",", "self", ".", "data_size", ")", "\n", "\n", "mean", "=", "self", ".", "encoder_mean_conv", "(", "x", ")", "\n", "mean", "=", "mean", ".", "view", "(", "-", "1", ",", "self", ".", "convoluted_size", "**", "2", ")", "\n", "mean", "=", "self", ".", "encoder_mean_fc", "(", "mean", ")", "\n", "\n", "logvar", "=", "self", ".", "encoder_var_conv", "(", "x", ")", "\n", "logvar", "=", "logvar", ".", "view", "(", "-", "1", ",", "self", ".", "convoluted_size", "**", "2", ")", "\n", "logvar", "=", "0.5", "+", "self", ".", "encoder_var_fc", "(", "logvar", ")", "\n", "\n", "return", "mean", ",", "logvar", "\n", "\n", "", "def", "decoder", "(", "self", ",", "z", ")", ":", "\n", "        ", "mean", "=", "self", ".", "decoder_mean_fc", "(", "z", ")", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.blackboxmodel.BlackBox.__init__": [[11, 19], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.blackboxmodel.BlackBox.__init__"], ["        ", "super", "(", "BlackBox", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "predict_conv_net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.3", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.blackboxmodel.BlackBox.forward": [[20, 22], ["blackboxmodel.BlackBox.predict_net"], "methods", ["None"], ["nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.3", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.nll": [[55, 61], ["tensorflow.keras.backend.sum", "tensorflow.keras.losses.mean_squared_error"], "function", ["None"], ["", "def", "change_direction", "(", "x_true", ",", "x_pred", ",", "idx", ",", "key", ",", "offset", ")", ":", "\n", "    ", "if", "x_pred", ".", "iloc", "[", "idx", ",", "key", "]", "-", "offset", ">", "x_true", ".", "iloc", "[", "idx", ",", "key", "]", ":", "\n", "        ", "return", "1", "\n", "", "elif", "x_pred", ".", "iloc", "[", "idx", ",", "key", "]", "+", "offset", "<", "x_true", ".", "iloc", "[", "idx", ",", "key", "]", ":", "\n", "        ", "return", "0", "\n", "\n", "", "", "def", "visualize_score", "(", "model", ",", "pred_model", ",", "train_dataset", ",", "d", ")", ":", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.ae_reconstruct_loss_cem_im": [[559, 573], ["model", "normalise_weights.keys", "tensorflow.keras.backend.sum", "tensorflow.keras.backend.square"], "function", ["None"], ["plt", ".", "title", "(", "'Valid CF'", ")", "\n", "plt", ".", "xlabel", "(", "'Sample Size'", ")", "\n", "plt", ".", "ylabel", "(", "'Percentage of CF'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "", "print", "(", "'Mean Validity Score: '", ",", "np", ".", "mean", "(", "np", ".", "array", "(", "validity_score_arr", ")", ")", ")", "\n", "return", "validity_score_arr", "\n", "\n", "", "def", "proximity_score", "(", "model", ",", "pred_model", ",", "train_dataset", ",", "d", ",", "mad_feature_weights", ",", "cat", ",", "case", ",", "sample_range", ")", ":", "\n", "\n", "    ", "prox_score_arr", "=", "[", "]", "\n", "for", "sample_size", "in", "sample_range", ":", "\n", "        ", "train_x", "=", "torch", ".", "tensor", "(", "train_dataset", ")", ".", "float", "(", ")", "\n", "train_y", "=", "torch", ".", "argmax", "(", "pred_model", "(", "train_x", ")", ",", "dim", "=", "1", ")", "\n", "prox_count", "=", "0", "\n", "for", "sample_iter", "in", "range", "(", "sample_size", ")", ":", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.contrastive_im_score": [[574, 669], ["print", "range", "im_score_arr.append", "matplotlib.plot", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.show", "numpy.mean", "numpy.array", "numpy.array", "numpy.array", "numpy.zeros", "range", "numpy.mean", "numpy.array", "np.array.append", "np.array.append", "np.array.append", "tensorflow.keras.backend.constant", "tensorflow.keras.backend.eval", "numpy.sum", "evaluation_functions.ae_reconstruct_loss_cem_im", "tensorflow.keras.backend.eval", "evaluation_functions.ae_reconstruct_loss_cem_im"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.ae_reconstruct_loss_cem_im", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.ae_reconstruct_loss_cem_im"], ["            ", "recon_err", ",", "kl_err", ",", "x_true", ",", "x_pred", ",", "cf_label", "=", "model", ".", "compute_elbo", "(", "train_x", ",", "1.0", "-", "train_y", ",", "pred_model", ")", "\n", "\n", "x_pred", "=", "d", ".", "de_normalize_data", "(", "d", ".", "get_decoded_data", "(", "x_pred", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "x_true", "=", "d", ".", "de_normalize_data", "(", "d", ".", "get_decoded_data", "(", "x_true", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "#             x_pred= d.get_decoded_data(x_pred.detach().numpy()) ", "\n", "#             x_true= d.get_decoded_data(x_true.detach().numpy())                 ", "\n", "if", "cat", ":", "\n", "                ", "for", "column", "in", "d", ".", "categorical_feature_names", ":", "\n", "#                     print(column, x_true[column].shape, x_pred[column].shape)", "\n", "#                     for di in range(x_true[column].shape[0]):", "\n", "#                         print(len(x_true[column][di]), len(x_pred[column][di]))", "\n", "                    ", "prox_count", "+=", "np", ".", "sum", "(", "np", ".", "array", "(", "x_true", "[", "column", "]", ",", "dtype", "=", "pd", ".", "Series", ")", "!=", "np", ".", "array", "(", "x_pred", "[", "column", "]", ",", "dtype", "=", "pd", ".", "Series", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "for", "column", "in", "d", ".", "continuous_feature_names", ":", "\n", "                    ", "prox_count", "+=", "np", ".", "sum", "(", "np", ".", "abs", "(", "x_true", "[", "column", "]", "-", "x_pred", "[", "column", "]", ")", ")", "/", "mad_feature_weights", "[", "column", "]", "\n", "\n", "", "", "", "test_size", "=", "train_x", ".", "shape", "[", "0", "]", "\n", "prox_count", "=", "prox_count", "/", "sample_size", "\n", "#         print(sample_size, prox_count)", "\n", "prox_score_arr", ".", "append", "(", "-", "1", "*", "prox_count", "/", "test_size", ")", "\n", "\n", "", "if", "case", ":", "\n", "        ", "plt", ".", "plot", "(", "sample_range", ",", "prox_score_arr", ")", "\n", "if", "cat", ":", "\n", "            ", "plt", ".", "title", "(", "'Categorical Proximity'", ")", "\n", "", "else", ":", "\n", "            ", "plt", ".", "title", "(", "'Continuous Proximity'", ")", "\n", "\n", "", "plt", ".", "xlabel", "(", "'Sample Size'", ")", "\n", "plt", ".", "ylabel", "(", "'Magnitude'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "", "print", "(", "'Mean Proximity Score: '", ",", "np", ".", "mean", "(", "np", ".", "array", "(", "prox_score_arr", ")", ")", ")", "\n", "return", "prox_score_arr", "\n", "\n", "\n", "", "def", "diversity_score", "(", "model", ",", "pred_model", ",", "train_dataset", ",", "d", ",", "mad_feature_weights", ",", "cat", ")", ":", "\n", "\n", "    ", "divr_score_arr", "=", "[", "]", "\n", "for", "sample_size", "in", "[", "1", ",", "2", ",", "6", ",", "8", ",", "10", "]", ":", "\n", "        ", "train_x", "=", "torch", ".", "tensor", "(", "train_dataset", ")", ".", "float", "(", ")", "\n", "train_y", "=", "torch", ".", "argmax", "(", "pred_model", "(", "train_x", ")", ",", "dim", "=", "1", ")", "\n", "divr_count", "=", "0", "\n", "cf_gen", "=", "[", "]", "\n", "\n", "for", "sample_iter", "in", "range", "(", "sample_size", ")", ":", "\n", "            ", "recon_err", ",", "kl_err", ",", "x_true", ",", "x_pred", ",", "cf_label", "=", "model", ".", "compute_elbo", "(", "train_x", ",", "1.0", "-", "train_y", ",", "pred_model", ")", "\n", "x_pred", "=", "d", ".", "de_normalize_data", "(", "d", ".", "get_decoded_data", "(", "x_pred", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "x_true", "=", "d", ".", "de_normalize_data", "(", "d", ".", "get_decoded_data", "(", "x_true", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "cf_gen", ".", "append", "(", "x_pred", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "0", ",", "sample_size", "-", "1", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "sample_size", ")", ":", "\n", "\n", "                ", "if", "cat", ":", "\n", "                    ", "for", "column", "in", "d", ".", "categorical_feature_names", ":", "\n", "                        ", "divr_count", "+=", "np", ".", "sum", "(", "np", ".", "array", "(", "cf_gen", "[", "i", "]", "[", "column", "]", ",", "dtype", "=", "pd", ".", "Series", ")", "==", "np", ".", "array", "(", "cf_gen", "[", "j", "]", "[", "column", "]", ",", "dtype", "=", "pd", ".", "Series", ")", ")", "\n", "", "", "else", ":", "\n", "                    ", "for", "column", "in", "d", ".", "continuous_feature_names", ":", "\n", "                        ", "divr_count", "+=", "np", ".", "sum", "(", "np", ".", "abs", "(", "cf_gen", "[", "i", "]", "[", "column", "]", "-", "cf_gen", "[", "j", "]", "[", "column", "]", ")", ")", "/", "mad_feature_weights", "[", "column", "]", "\n", "\n", "", "", "", "", "test_size", "=", "train_x", ".", "shape", "[", "0", "]", "\n", "divr_count", "=", "divr_count", "/", "(", "sample_size", "**", "2", ")", "\n", "#         print(sample_size, divr_count)", "\n", "divr_score_arr", ".", "append", "(", "divr_count", "/", "test_size", ")", "\n", "\n", "", "plt", ".", "plot", "(", "[", "1", ",", "2", ",", "6", ",", "8", ",", "10", "]", ",", "divr_score_arr", ")", "\n", "if", "cat", ":", "\n", "        ", "plt", ".", "title", "(", "'Categorical Diversity'", ")", "\n", "", "else", ":", "\n", "        ", "plt", ".", "title", "(", "'Continuous Diversity'", ")", "\n", "\n", "", "plt", ".", "xlabel", "(", "'Sample Size'", ")", "\n", "plt", ".", "ylabel", "(", "'Magnitude'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "return", "divr_score_arr", "\n", "\n", "\n", "", "def", "bnlearn_scm_score", "(", "xpred", ",", "normalise_weights", ",", "d", ",", "scm_model", ",", "constraint_nodes", ",", "constraint_case", ")", ":", "\n", "\n", "    ", "score", "=", "torch", ".", "zeros", "(", "xpred", ".", "shape", "[", "0", "]", ")", "\n", "\n", "#Compute Likelihood for the full graph", "\n", "if", "constraint_case", "==", "0", ":", "\n", "        ", "constraint_nodes", "=", "list", "(", "scm_model", ".", "keys", "(", ")", ")", "\n", "constraint_nodes", ".", "remove", "(", "'GrapeW'", ")", "\n", "\n", "", "for", "node", "in", "constraint_nodes", ":", "\n", "        ", "parents", "=", "scm_model", "[", "node", "]", "[", "'parent'", "]", "\n", "weights", "=", "scm_model", "[", "node", "]", "[", "'weight'", "]", "\n", "deviations", "=", "scm_model", "[", "node", "]", "[", "'sd'", "]", "\n", "\n", "if", "len", "(", "parents", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "if", "'Treatment'", "in", "parents", ":", "\n", "# Choose the corresponding linear gaussian model based on treatment label", "\n", "# Get encoded feature indices correspodning to the feature Treatment", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.ae_reconstruct_loss_im": [[1318, 1339], ["model", "normalise_weights.keys", "len", "x.view.view", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "compute_eval_metrics_adult", "(", "methods", ",", "base_model_dir", ",", "encoded_size", ",", "pred_model", ",", "val_dataset", ",", "d", ",", "normalise_weights", ",", "mad_feature_weights", ",", "case", ",", "sample_range", ",", "filename", ")", ":", "\n", "    ", "count", "=", "0", "\n", "fsize", "=", "20", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "7.7", ",", "6.5", ")", ")", "\n", "final_res", "=", "{", "}", "\n", "\n", "np", ".", "random", ".", "shuffle", "(", "val_dataset", ")", "\n", "x_sample", "=", "val_dataset", "[", "0", ",", ":", "]", "\n", "x_sample", "=", "np", ".", "reshape", "(", "x_sample", ",", "(", "1", ",", "val_dataset", ".", "shape", "[", "1", "]", ")", ")", "\n", "np", ".", "save", "(", "'adult-visualise-sample.npy'", ",", "x_sample", ")", "\n", "print", "(", "'Input Data Sample: '", ",", "d", ".", "de_normalize_data", "(", "d", ".", "get_decoded_data", "(", "x_sample", ")", ")", ")", "\n", "\n", "for", "key", "in", "methods", ".", "keys", "(", ")", ":", "\n", "\n", "#Loading torch model", "\n", "        ", "wm1", "=", "1e-2", "\n", "wm2", "=", "1e-2", "\n", "wm3", "=", "1e-2", "\n", "wm4", "=", "1e-2", "\n", "\n", "path", "=", "methods", "[", "key", "]", "\n", "cf_val", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.im_score": [[1340, 1401], ["print", "torch.tensor().float", "torch.tensor().float", "torch.argmax", "torch.argmax", "range", "im_score_arr.append", "matplotlib.plot", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.show", "numpy.mean", "pred_model", "model.compute_elbo", "torch.argmax.numpy", "cf_label.numpy.numpy", "numpy.zeros", "range", "numpy.mean", "numpy.array", "torch.tensor", "torch.tensor", "torch.argmax.numpy", "ae_reconstruct_loss_im().detach().cpu().numpy", "numpy.sum", "ae_reconstruct_loss_im().detach().cpu", "ae_reconstruct_loss_im().detach().cpu().numpy", "ae_reconstruct_loss_im().detach", "ae_reconstruct_loss_im().detach().cpu", "evaluation_functions.ae_reconstruct_loss_im", "ae_reconstruct_loss_im().detach", "evaluation_functions.ae_reconstruct_loss_im"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.CF_VAE.compute_elbo", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.ae_reconstruct_loss_im", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.evaluation_functions.ae_reconstruct_loss_im"], ["\n", "if", "'contrastive'", "in", "path", "and", "'json'", "in", "path", ":", "\n", "            ", "f", "=", "open", "(", "path", ",", "'r'", ")", "\n", "contrastive_exp", "=", "json", ".", "load", "(", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "if", "case", "==", "-", "1", ":", "\n", "                ", "print", "(", "'\\n'", ",", "'Method: '", ",", "key", ",", "\"\\n\"", ")", "\n", "contrastive_visualize_score", "(", "contrastive_exp", ",", "x_sample", ",", "d", ")", "\n", "continue", "\n", "\n", "", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "\n", "                ", "if", "case", "==", "0", ":", "\n", "                    ", "cf_val", ".", "append", "(", "contrastive_validity_score", "(", "contrastive_exp", ",", "0", ",", "sample_range", ")", ")", "\n", "", "elif", "case", "==", "1", ":", "\n", "                    ", "val", ",", "inval", "=", "contrastive_causal_score_age_constraint", "(", "contrastive_exp", ",", "d", ",", "normalise_weights", ",", "offset", ",", "0", ",", "sample_range", ")", "\n", "cf_val", ".", "append", "(", "100", "*", "np", ".", "array", "(", "val", ")", "/", "(", "np", ".", "array", "(", "val", ")", "+", "np", ".", "array", "(", "inval", ")", ")", ")", "\n", "", "elif", "case", "==", "2", ":", "\n", "                    ", "val", ",", "inval", "=", "contrastive_causal_score_age_ed_constraint", "(", "contrastive_exp", ",", "d", ",", "normalise_weights", ",", "offset", ",", "0", ",", "sample_range", ")", "\n", "cf_val", ".", "append", "(", "100", "*", "np", ".", "array", "(", "val", ")", "/", "(", "np", ".", "array", "(", "val", ")", "+", "np", ".", "array", "(", "inval", ")", ")", ")", "\n", "", "elif", "case", "==", "3", ":", "\n", "                    ", "cf_val", ".", "append", "(", "contrastive_proximity_score", "(", "contrastive_exp", ",", "d", ",", "mad_feature_weights", ",", "0", ",", "0", ",", "sample_range", ")", ")", "\n", "", "elif", "case", "==", "4", ":", "\n", "                    ", "cf_val", ".", "append", "(", "contrastive_proximity_score", "(", "contrastive_exp", ",", "d", ",", "mad_feature_weights", ",", "1", ",", "0", ",", "sample_range", ")", ")", "\n", "", "", "", "else", ":", "\n", "            ", "cf_vae", "=", "CF_VAE", "(", "len", "(", "d", ".", "encoded_feature_names", ")", ",", "encoded_size", ",", "d", ")", "\n", "cf_vae", ".", "load_state_dict", "(", "torch", ".", "load", "(", "path", ")", ")", "\n", "cf_vae", ".", "eval", "(", ")", "\n", "learning_rate", "=", "1e-2", "\n", "cf_vae_optimizer", "=", "optim", ".", "Adam", "(", "[", "\n", "{", "'params'", ":", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "cf_vae", ".", "encoder_mean", ".", "parameters", "(", ")", ")", ",", "'weight_decay'", ":", "wm1", "}", ",", "\n", "{", "'params'", ":", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "cf_vae", ".", "encoder_var", ".", "parameters", "(", ")", ")", ",", "'weight_decay'", ":", "wm2", "}", ",", "\n", "{", "'params'", ":", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "cf_vae", ".", "decoder_mean", ".", "parameters", "(", ")", ")", ",", "'weight_decay'", ":", "wm3", "}", "\n", "]", ",", "lr", "=", "learning_rate", ")", "\n", "\n", "if", "case", "==", "-", "1", ":", "\n", "                ", "print", "(", "'\\n'", ",", "'Method: '", ",", "key", ",", "\"\\n\"", ")", "\n", "visualize_score", "(", "cf_vae", ",", "pred_model", ",", "x_sample", ",", "d", ")", "\n", "continue", "\n", "\n", "# Put the check for only Low to High Income CF", "\n", "", "train_x", "=", "torch", ".", "tensor", "(", "val_dataset", ")", ".", "float", "(", ")", "\n", "train_y", "=", "torch", ".", "argmax", "(", "pred_model", "(", "train_x", ")", ",", "dim", "=", "1", ")", ".", "numpy", "(", ")", "\n", "val_dataset", "=", "val_dataset", "[", "train_y", "==", "0", "]", "\n", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "                ", "if", "case", "==", "0", ":", "\n", "                    ", "cf_val", ".", "append", "(", "validity_score", "(", "cf_vae", ",", "pred_model", ",", "val_dataset", ",", "0", ",", "sample_range", ")", ")", "\n", "", "elif", "case", "==", "1", ":", "\n", "                    ", "val", ",", "inval", "=", "causal_score_age_constraint", "(", "cf_vae", ",", "pred_model", ",", "val_dataset", ",", "d", ",", "normalise_weights", ",", "offset", ",", "0", ",", "sample_range", ")", "\n", "cf_val", ".", "append", "(", "100", "*", "np", ".", "array", "(", "val", ")", "/", "(", "np", ".", "array", "(", "val", ")", "+", "np", ".", "array", "(", "inval", ")", ")", ")", "\n", "", "elif", "case", "==", "2", ":", "\n", "                    ", "val", ",", "inval", "=", "causal_score_age_ed_constraint", "(", "cf_vae", ",", "pred_model", ",", "val_dataset", ",", "d", ",", "normalise_weights", ",", "offset", ",", "0", ",", "sample_range", ")", "\n", "cf_val", ".", "append", "(", "100", "*", "np", ".", "array", "(", "val", ")", "/", "(", "np", ".", "array", "(", "val", ")", "+", "np", ".", "array", "(", "inval", ")", ")", ")", "\n", "", "elif", "case", "==", "3", ":", "\n", "                    ", "cf_val", ".", "append", "(", "proximity_score", "(", "cf_vae", ",", "pred_model", ",", "val_dataset", ",", "d", ",", "mad_feature_weights", ",", "0", ",", "0", ",", "sample_range", ")", ")", "\n", "", "elif", "case", "==", "4", ":", "\n", "                    ", "cf_val", ".", "append", "(", "proximity_score", "(", "cf_vae", ",", "pred_model", ",", "val_dataset", ",", "d", ",", "mad_feature_weights", ",", "1", ",", "0", ",", "sample_range", ")", ")", "\n", "\n", "\n", "", "", "", "final_res", "[", "key", "]", "=", "cf_val", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid": [[6, 8], ["numpy.exp"], "function", ["None"], ["def", "sigmoid", "(", "x", ")", ":", "\n", "    ", "return", "1", "/", "(", "1", "+", "np", ".", "exp", "(", "-", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.good-cf-set-gen.traverse": [[45, 57], ["numpy.array_split", "range", "print", "len", "torch.tensor().float", "torch.tensor().float", "torch.argmax", "torch.argmax", "print", "pred_model", "numpy.unique", "torch.tensor", "torch.tensor"], "function", ["None"], ["def", "traverse", "(", "train_dataset", ",", "epochs", "=", "1", ",", "batch_size", "=", "128", ")", ":", "\n", "    ", "batch_num", "=", "0", "\n", "loss", "=", "0.0", "\n", "train_size", "=", "0", "\n", "train_dataset", "=", "np", ".", "array_split", "(", "train_dataset", ",", "train_dataset", ".", "shape", "[", "0", "]", "//", "batch_size", ",", "axis", "=", "0", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "train_dataset", ")", ")", ":", "\n", "        ", "train_x", "=", "train_dataset", "[", "i", "]", "\n", "train_x", "=", "torch", ".", "tensor", "(", "train_x", ")", ".", "float", "(", ")", "\n", "train_y", "=", "torch", ".", "argmax", "(", "pred_model", "(", "train_x", ")", ",", "dim", "=", "1", ")", "\n", "train_size", "+=", "train_x", ".", "shape", "[", "0", "]", "\n", "print", "(", "np", ".", "unique", "(", "train_y", ",", "return_counts", "=", "True", ")", ")", "\n", "", "print", "(", "train_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.good-cf-set-gen.gen_cf_set_adult": [[59, 168], ["numpy.array_split", "d.data_df.copy", "d.data_df.copy.drop", "pandas.DataFrame", "range", "len", "torch.argmax", "torch.argmax", "pred_model", "model.compute_elbo", "d.de_normalize_data", "d.de_normalize_data", "cf_label.numpy.numpy", "print", "print", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "d.get_decoded_data", "d.get_decoded_data", "d.de_normalize_data.columns.get_loc", "range", "d.data_df.copy.append", "d.data_df.copy.append", "d.data_df.copy.append", "gen_cf_list.append", "gen_cf_inv.append", "gen_cf_label.append", "len", "d.de_normalize_data.detach().numpy", "d.de_normalize_data.detach().numpy", "d.de_normalize_data.columns.get_loc", "d.de_normalize_data.columns.get_loc", "range", "d.de_normalize_data.to_json", "train_x.tolist", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "d.de_normalize_data.detach", "d.de_normalize_data.detach"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.CF_VAE.compute_elbo", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data"], ["", "def", "gen_cf_set_adult", "(", "model", ",", "pred_mode", ",", "train_dataset", ",", "fine_tune_size", ",", "d", ",", "upper_limit", ",", "case", ")", ":", "\n", "\n", "    ", "train_dataset", "=", "np", ".", "array_split", "(", "train_dataset", ",", "train_dataset", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "good_cf_dataset_save", "=", "{", "}", "\n", "\n", "temp", "=", "d", ".", "data_df", ".", "copy", "(", ")", "\n", "temp", ".", "drop", "(", "'income'", ",", "axis", "=", "1", ",", "inplace", "=", "True", ")", "\n", "columns", "=", "temp", ".", "columns", "\n", "gen_cf_pd", "=", "pd", ".", "DataFrame", "(", "columns", "=", "columns", ")", "\n", "gen_cf_inv", "=", "[", "]", "\n", "gen_cf_label", "=", "[", "]", "\n", "\n", "counter", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "train_dataset", ")", ")", ":", "\n", "\n", "# Oracle Number of FineTune CF Examples ", "\n", "        ", "if", "counter", ">=", "fine_tune_size", ":", "\n", "            ", "break", "\n", "\n", "", "train_x", "=", "train_dataset", "[", "i", "]", "\n", "train_y", "=", "torch", ".", "argmax", "(", "pred_model", "(", "torch", ".", "tensor", "(", "train_x", ")", ".", "float", "(", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n", "valid_change", "=", "0", "\n", "invalid_change", "=", "0", "\n", "low_change", "=", "0", "\n", "no_change", "=", "0", "\n", "break_cond", "=", "valid_change", "+", "invalid_change", "+", "low_change", "+", "no_change", "\n", "\n", "valid_oracle_cf", "=", "1", "\n", "gen_cf_list", "=", "[", "]", "\n", "loop_iters", "=", "0", "\n", "\n", "# Oracle CF's per train example: Upper Limit", "\n", "while", "(", "valid_change", "+", "invalid_change", "+", "low_change", "+", "no_change", ")", "<", "upper_limit", ":", "\n", "# Unable to find requested number of Feasible CFs for the current train example", "\n", "            ", "if", "loop_iters", ">", "50", ":", "\n", "                ", "valid_oracle_cf", "=", "0", "\n", "break", "\n", "\n", "", "loop_iters", "+=", "1", "\n", "recon_err", ",", "kl_err", ",", "x_true", ",", "x_pred", ",", "cf_label", "=", "model", ".", "compute_elbo", "(", "torch", ".", "tensor", "(", "train_x", ")", ".", "float", "(", ")", ",", "1", "-", "train_y", ",", "pred_model", ")", "\n", "x_pred", "=", "d", ".", "de_normalize_data", "(", "d", ".", "get_decoded_data", "(", "x_pred", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "x_true", "=", "d", ".", "de_normalize_data", "(", "d", ".", "get_decoded_data", "(", "x_true", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "cf_label", "=", "cf_label", ".", "numpy", "(", ")", "\n", "\n", "#Should be Valid CF and Low to High CF considered only", "\n", "if", "train_y", "[", "0", "]", "==", "cf_label", "[", "0", "]", "or", "cf_label", "[", "0", "]", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "# Age should not decrease constraint", "\n", "", "if", "case", "==", "0", ":", "\n", "                ", "label", "=", "-", "1", "\n", "age_idx", "=", "x_true", ".", "columns", ".", "get_loc", "(", "'age'", ")", "\n", "for", "idx", "in", "range", "(", "x_true", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "if", "x_pred", ".", "iloc", "[", "idx", ",", "age_idx", "]", ">=", "x_true", ".", "iloc", "[", "idx", ",", "age_idx", "]", ":", "\n", "                        ", "label", "=", "1", "\n", "valid_change", "+=", "1", "\n", "", "else", ":", "\n", "                        ", "invalid_change", "+=", "1", "\n", "label", "=", "0", "\n", "\n", "# Education Age Relationship", "\n", "", "", "", "elif", "case", "==", "1", ":", "\n", "                ", "ed_idx", "=", "x_true", ".", "columns", ".", "get_loc", "(", "'education'", ")", "\n", "age_idx", "=", "x_true", ".", "columns", ".", "get_loc", "(", "'age'", ")", "\n", "label", "=", "-", "1", "\n", "for", "idx", "in", "range", "(", "x_true", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "if", "education_score", "[", "x_pred", ".", "iloc", "[", "idx", ",", "ed_idx", "]", "]", "<", "education_score", "[", "x_true", ".", "iloc", "[", "idx", ",", "ed_idx", "]", "]", ":", "\n", "                        ", "label", "=", "0", "\n", "invalid_change", "+=", "1", "\n", "", "elif", "education_score", "[", "x_pred", ".", "iloc", "[", "idx", ",", "ed_idx", "]", "]", ">", "education_score", "[", "x_true", ".", "iloc", "[", "idx", ",", "ed_idx", "]", "]", ":", "\n", "                        ", "if", "x_pred", ".", "iloc", "[", "idx", ",", "age_idx", "]", ">", "x_true", ".", "iloc", "[", "idx", ",", "age_idx", "]", ":", "\n", "                            ", "valid_change", "+=", "1", "\n", "label", "=", "1", "\n", "", "else", ":", "\n", "                            ", "invalid_change", "+=", "1", "\n", "label", "=", "0", "\n", "", "", "elif", "education_score", "[", "x_pred", ".", "iloc", "[", "idx", ",", "ed_idx", "]", "]", "==", "education_score", "[", "x_true", ".", "iloc", "[", "idx", ",", "ed_idx", "]", "]", ":", "\n", "                        ", "no_change", "+=", "1", "\n", "if", "x_pred", ".", "iloc", "[", "idx", ",", "age_idx", "]", ">=", "x_true", ".", "iloc", "[", "idx", ",", "age_idx", "]", ":", "\n", "                            ", "valid_change", "+=", "1", "\n", "label", "=", "1", "\n", "", "else", ":", "\n", "                            ", "invalid_change", "+=", "1", "\n", "label", "=", "0", "\n", "\n", "", "", "", "", "if", "label", "!=", "-", "1", ":", "\n", "                ", "temp", "=", "[", "]", "\n", "temp", ".", "append", "(", "x_pred", ")", "\n", "temp", ".", "append", "(", "train_x", ")", "\n", "temp", ".", "append", "(", "label", ")", "\n", "gen_cf_list", ".", "append", "(", "temp", ")", "\n", "\n", "# Saving the triplet (CF, X, Label)", "\n", "", "", "if", "valid_oracle_cf", "==", "1", ":", "\n", "            ", "for", "item", "in", "gen_cf_list", ":", "\n", "                ", "x_pred", "=", "item", "[", "0", "]", "\n", "train_x", "=", "item", "[", "1", "]", "\n", "label", "=", "item", "[", "2", "]", "\n", "good_cf_dataset_save", "[", "counter", "]", "=", "[", "x_pred", ".", "to_json", "(", ")", ",", "train_x", ".", "tolist", "(", ")", ",", "label", "]", "\n", "gen_cf_pd", ".", "loc", "[", "counter", "]", "=", "x_pred", ".", "loc", "[", "0", "]", "\n", "gen_cf_inv", ".", "append", "(", "train_x", "[", "0", "]", ")", "\n", "gen_cf_label", ".", "append", "(", "label", ")", "\n", "", "counter", "+=", "1", "\n", "\n", "print", "(", "no_change", ",", "valid_change", ",", "invalid_change", ",", "low_change", ")", "\n", "print", "(", "'Done for: '", ",", "i", ",", "loop_iters", ",", "len", "(", "gen_cf_list", ")", ",", "counter", ")", "\n", "\n", "", "", "return", "good_cf_dataset_save", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.good-cf-set-gen.gen_cf_set_bn1": [[169, 261], ["numpy.array_split", "d.data_df.copy", "d.data_df.copy.drop", "pandas.DataFrame", "range", "len", "torch.argmax", "torch.argmax", "pred_model", "model.compute_elbo", "d.de_normalize_data", "d.de_normalize_data", "cf_label.numpy.numpy", "d.de_normalize_data.columns.get_loc", "d.de_normalize_data.columns.get_loc", "d.de_normalize_data.columns.get_loc", "range", "print", "print", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "d.get_decoded_data", "d.get_decoded_data", "d.data_df.copy.append", "d.data_df.copy.append", "d.data_df.copy.append", "gen_cf_list.append", "gen_cf_inv.append", "gen_cf_label.append", "len", "d.de_normalize_data.detach().numpy", "d.de_normalize_data.detach().numpy", "d.de_normalize_data.to_json", "train_x.tolist", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "d.de_normalize_data.detach", "d.de_normalize_data.detach"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.CF_VAE.compute_elbo", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data"], ["", "def", "gen_cf_set_bn1", "(", "model", ",", "pred_model", ",", "train_dataset", ",", "fine_tune_size", ",", "d", ",", "upper_limit", ")", ":", "\n", "\n", "    ", "train_dataset", "=", "np", ".", "array_split", "(", "train_dataset", ",", "train_dataset", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "good_cf_dataset_save", "=", "{", "}", "\n", "\n", "temp", "=", "d", ".", "data_df", ".", "copy", "(", ")", "\n", "temp", ".", "drop", "(", "'y'", ",", "axis", "=", "1", ",", "inplace", "=", "True", ")", "\n", "columns", "=", "temp", ".", "columns", "\n", "gen_cf_pd", "=", "pd", ".", "DataFrame", "(", "columns", "=", "columns", ")", "\n", "gen_cf_inv", "=", "[", "]", "\n", "gen_cf_label", "=", "[", "]", "\n", "\n", "counter", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "train_dataset", ")", ")", ":", "\n", "\n", "# Oracle Number of FineTune CF Examples ", "\n", "        ", "if", "counter", ">=", "fine_tune_size", ":", "\n", "            ", "break", "\n", "\n", "", "train_x", "=", "train_dataset", "[", "i", "]", "\n", "train_y", "=", "torch", ".", "argmax", "(", "pred_model", "(", "torch", ".", "tensor", "(", "train_x", ")", ".", "float", "(", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n", "valid_change", "=", "0", "\n", "invalid_change", "=", "0", "\n", "low_change", "=", "0", "\n", "no_change", "=", "0", "\n", "break_cond", "=", "valid_change", "+", "invalid_change", "+", "low_change", "+", "no_change", "\n", "\n", "valid_oracle_cf", "=", "1", "\n", "gen_cf_list", "=", "[", "]", "\n", "loop_iters", "=", "0", "\n", "\n", "# Oracle CF's per train example: Upper Limit", "\n", "while", "(", "valid_change", "+", "invalid_change", "+", "low_change", "+", "no_change", ")", "<", "upper_limit", ":", "\n", "# Unable to find requested number of Feasible CFs for the current train example", "\n", "            ", "if", "loop_iters", ">", "50", ":", "\n", "                ", "valid_oracle_cf", "=", "0", "\n", "break", "\n", "\n", "", "loop_iters", "+=", "1", "\n", "recon_err", ",", "kl_err", ",", "x_true", ",", "x_pred", ",", "cf_label", "=", "model", ".", "compute_elbo", "(", "torch", ".", "tensor", "(", "train_x", ")", ".", "float", "(", ")", ",", "1", "-", "train_y", ",", "pred_model", ")", "\n", "x_pred", "=", "d", ".", "de_normalize_data", "(", "d", ".", "get_decoded_data", "(", "x_pred", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "x_true", "=", "d", ".", "de_normalize_data", "(", "d", ".", "get_decoded_data", "(", "x_true", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "cf_label", "=", "cf_label", ".", "numpy", "(", ")", "\n", "\n", "if", "train_y", "[", "0", "]", "==", "cf_label", "[", "0", "]", ":", "\n", "                ", "continue", "\n", "\n", "# No gender and race change", "\n", "", "label", "=", "-", "1", "\n", "x1_idx", "=", "x_true", ".", "columns", ".", "get_loc", "(", "'x1'", ")", "\n", "x2_idx", "=", "x_true", ".", "columns", ".", "get_loc", "(", "'x2'", ")", "\n", "x3_idx", "=", "x_true", ".", "columns", ".", "get_loc", "(", "'x3'", ")", "\n", "for", "idx", "in", "range", "(", "x_true", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "if", "x_pred", ".", "iloc", "[", "idx", ",", "x1_idx", "]", "<", "x_true", ".", "iloc", "[", "idx", ",", "x1_idx", "]", "and", "x_pred", ".", "iloc", "[", "idx", ",", "x2_idx", "]", "<", "x_true", ".", "iloc", "[", "idx", ",", "x2_idx", "]", ":", "\n", "                    ", "if", "x_pred", ".", "iloc", "[", "idx", ",", "x3_idx", "]", "<", "x_true", ".", "iloc", "[", "idx", ",", "x3_idx", "]", ":", "\n", "                        ", "valid_change", "+=", "1", "\n", "label", "=", "1", "\n", "", "else", ":", "\n", "                        ", "invalid_change", "+=", "1", "\n", "label", "=", "0", "\n", "", "", "if", "x_pred", ".", "iloc", "[", "idx", ",", "x1_idx", "]", ">", "x_true", ".", "iloc", "[", "idx", ",", "x1_idx", "]", "and", "x_pred", ".", "iloc", "[", "idx", ",", "x2_idx", "]", ">", "x_true", ".", "iloc", "[", "idx", ",", "x2_idx", "]", ":", "\n", "                    ", "if", "x_pred", ".", "iloc", "[", "idx", ",", "x3_idx", "]", ">", "x_true", ".", "iloc", "[", "idx", ",", "x3_idx", "]", ":", "\n", "                        ", "valid_change", "+=", "1", "\n", "label", "=", "1", "\n", "", "else", ":", "\n", "                        ", "invalid_change", "+=", "1", "\n", "label", "=", "0", "\n", "\n", "", "", "", "if", "label", "!=", "-", "1", ":", "\n", "                ", "temp", "=", "[", "]", "\n", "temp", ".", "append", "(", "x_pred", ")", "\n", "temp", ".", "append", "(", "train_x", ")", "\n", "temp", ".", "append", "(", "label", ")", "\n", "gen_cf_list", ".", "append", "(", "temp", ")", "\n", "\n", "# Saving the triplet (CF, X, Label)", "\n", "", "", "if", "valid_oracle_cf", "==", "1", ":", "\n", "            ", "for", "item", "in", "gen_cf_list", ":", "\n", "                ", "x_pred", "=", "item", "[", "0", "]", "\n", "train_x", "=", "item", "[", "1", "]", "\n", "label", "=", "item", "[", "2", "]", "\n", "good_cf_dataset_save", "[", "counter", "]", "=", "[", "x_pred", ".", "to_json", "(", ")", ",", "train_x", ".", "tolist", "(", ")", ",", "label", "]", "\n", "gen_cf_pd", ".", "loc", "[", "counter", "]", "=", "x_pred", ".", "loc", "[", "0", "]", "\n", "gen_cf_inv", ".", "append", "(", "train_x", "[", "0", "]", ")", "\n", "gen_cf_label", ".", "append", "(", "label", ")", "\n", "", "counter", "+=", "1", "\n", "\n", "print", "(", "no_change", ",", "valid_change", ",", "invalid_change", ",", "low_change", ")", "\n", "print", "(", "'Done for: '", ",", "i", ",", "loop_iters", ",", "len", "(", "gen_cf_list", ")", ",", "counter", ")", "\n", "\n", "", "", "return", "good_cf_dataset_save", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.good-cf-set-gen-bnlearn.traverse": [[45, 57], ["numpy.array_split", "range", "print", "len", "torch.tensor().float", "torch.tensor().float", "torch.argmax", "torch.argmax", "print", "pred_model", "numpy.unique", "torch.tensor", "torch.tensor"], "function", ["None"], ["def", "traverse", "(", "train_dataset", ",", "epochs", "=", "1", ",", "batch_size", "=", "128", ")", ":", "\n", "    ", "batch_num", "=", "0", "\n", "loss", "=", "0.0", "\n", "train_size", "=", "0", "\n", "train_dataset", "=", "np", ".", "array_split", "(", "train_dataset", ",", "train_dataset", ".", "shape", "[", "0", "]", "//", "batch_size", ",", "axis", "=", "0", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "train_dataset", ")", ")", ":", "\n", "        ", "train_x", "=", "train_dataset", "[", "i", "]", "\n", "train_x", "=", "torch", ".", "tensor", "(", "train_x", ")", ".", "float", "(", ")", "\n", "train_y", "=", "torch", ".", "argmax", "(", "pred_model", "(", "train_x", ")", ",", "dim", "=", "1", ")", "\n", "train_size", "+=", "train_x", ".", "shape", "[", "0", "]", "\n", "print", "(", "np", ".", "unique", "(", "train_y", ",", "return_counts", "=", "True", ")", ")", "\n", "", "print", "(", "train_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.good-cf-set-gen-bnlearn.change_direction": [[58, 63], ["None"], "function", ["None"], ["", "def", "change_direction", "(", "x_true", ",", "x_pred", ",", "idx", ",", "key", ")", ":", "\n", "    ", "if", "x_pred", ".", "iloc", "[", "idx", ",", "key", "]", ">", "x_true", ".", "iloc", "[", "idx", ",", "key", "]", ":", "\n", "        ", "return", "1", "\n", "", "elif", "x_pred", ".", "iloc", "[", "idx", ",", "key", "]", "<", "x_true", ".", "iloc", "[", "idx", ",", "key", "]", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.good-cf-set-gen-bnlearn.gen_cf_set_sangiovese": [[64, 168], ["numpy.array_split", "d.data_df.copy", "d.data_df.copy.drop", "pandas.DataFrame", "range", "len", "torch.argmax", "torch.argmax", "pred_model", "model.compute_elbo", "d.de_normalize_data", "d.de_normalize_data", "cf_label.numpy.numpy", "print", "print", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "d.get_decoded_data", "d.get_decoded_data", "range", "d.data_df.copy.append", "d.data_df.copy.append", "d.data_df.copy.append", "gen_cf_list.append", "gen_cf_inv.append", "gen_cf_label.append", "len", "d.de_normalize_data.detach().numpy", "d.de_normalize_data.detach().numpy", "parents.remove", "range", "d.de_normalize_data.to_json", "train_x.tolist", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "len", "d.de_normalize_data.columns.get_loc", "d.de_normalize_data.columns.get_loc", "good-cf-set-gen-bnlearn.change_direction", "d.de_normalize_data.detach", "d.de_normalize_data.detach", "good-cf-set-gen-bnlearn.change_direction", "good-cf-set-gen-bnlearn.change_direction"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.CF_VAE.compute_elbo", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.good-cf-set-gen-bnlearn.change_direction", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.good-cf-set-gen-bnlearn.change_direction", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.good-cf-set-gen-bnlearn.change_direction"], ["", "", "def", "gen_cf_set_sangiovese", "(", "model", ",", "pred_model", ",", "train_dataset", ",", "d", ",", "fine_tune_size", ",", "upper_limit", ",", "scm_mode", ",", "constraint_node", ")", ":", "\n", "\n", "    ", "train_dataset", "=", "np", ".", "array_split", "(", "train_dataset", ",", "train_dataset", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "good_cf_dataset_save", "=", "{", "}", "\n", "\n", "temp", "=", "d", ".", "data_df", ".", "copy", "(", ")", "\n", "temp", ".", "drop", "(", "'outcome'", ",", "axis", "=", "1", ",", "inplace", "=", "True", ")", "\n", "columns", "=", "temp", ".", "columns", "\n", "gen_cf_pd", "=", "pd", ".", "DataFrame", "(", "columns", "=", "columns", ")", "\n", "gen_cf_inv", "=", "[", "]", "\n", "gen_cf_label", "=", "[", "]", "\n", "\n", "counter", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "train_dataset", ")", ")", ":", "\n", "\n", "# Oracle Number of FineTune CF Examples ", "\n", "        ", "if", "counter", ">=", "fine_tune_size", ":", "\n", "            ", "break", "\n", "\n", "", "train_x", "=", "train_dataset", "[", "i", "]", "\n", "train_y", "=", "torch", ".", "argmax", "(", "pred_model", "(", "torch", ".", "tensor", "(", "train_x", ")", ".", "float", "(", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n", "valid_change", "=", "0", "\n", "invalid_change", "=", "0", "\n", "low_change", "=", "0", "\n", "no_change", "=", "0", "\n", "break_cond", "=", "valid_change", "+", "invalid_change", "+", "low_change", "+", "no_change", "\n", "\n", "valid_oracle_cf", "=", "1", "\n", "gen_cf_list", "=", "[", "]", "\n", "loop_iters", "=", "0", "\n", "\n", "while", "(", "valid_change", "+", "invalid_change", "+", "low_change", "+", "no_change", ")", "<", "upper_limit", ":", "\n", "\n", "            ", "if", "loop_iters", ">", "50", ":", "\n", "                ", "valid_oracle_cf", "=", "0", "\n", "break", "\n", "\n", "", "loop_iters", "+=", "1", "\n", "recon_err", ",", "kl_err", ",", "x_true", ",", "x_pred", ",", "cf_label", "=", "model", ".", "compute_elbo", "(", "torch", ".", "tensor", "(", "train_x", ")", ".", "float", "(", ")", ",", "1", "-", "train_y", ",", "pred_model", ")", "\n", "\n", "x_pred", "=", "d", ".", "de_normalize_data", "(", "d", ".", "get_decoded_data", "(", "x_pred", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "x_true", "=", "d", ".", "de_normalize_data", "(", "d", ".", "get_decoded_data", "(", "x_true", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "cf_label", "=", "cf_label", ".", "numpy", "(", ")", "\n", "\n", "if", "train_y", "[", "0", "]", "==", "cf_label", "[", "0", "]", ":", "\n", "                ", "continue", "\n", "\n", "# Monotonic Changes", "\n", "", "label", "=", "-", "1", "\n", "for", "node", "in", "constraint_node", ":", "\n", "                ", "parents", "=", "scm_model", "[", "node", "]", "[", "'parent'", "]", "\n", "if", "'Treatment'", "in", "parents", ":", "\n", "                    ", "parents", ".", "remove", "(", "'Treatment'", ")", "\n", "", "for", "idx", "in", "range", "(", "x_true", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "sign", "=", "-", "1", "\n", "for", "p_idx", "in", "range", "(", "len", "(", "parents", ")", ")", ":", "\n", "                        ", "key", "=", "x_true", ".", "columns", ".", "get_loc", "(", "parents", "[", "p_idx", "]", ")", "\n", "if", "p_idx", "==", "0", ":", "\n", "                            ", "sign", "=", "change_direction", "(", "x_true", ",", "x_pred", ",", "idx", ",", "key", ")", "\n", "", "else", ":", "\n", "                            ", "new_sign", "=", "change_direction", "(", "x_true", ",", "x_pred", ",", "idx", ",", "key", ")", "\n", "if", "sign", "!=", "new_sign", ":", "\n", "                                ", "sign", "=", "-", "1", "\n", "break", "\n", "\n", "# No Monotonic change in all parents, go to next CF ", "\n", "", "", "", "if", "sign", "==", "-", "1", ":", "\n", "                        ", "continue", "\n", "# Check whether Monotonic change of all parents is consistent with the node", "\n", "", "else", ":", "\n", "                        ", "key", "=", "x_true", ".", "columns", ".", "get_loc", "(", "node", ")", "\n", "new_sign", "=", "change_direction", "(", "x_true", ",", "x_pred", ",", "idx", ",", "key", ")", "\n", "if", "sign", "==", "new_sign", ":", "\n", "                            ", "valid_change", "+=", "1", "\n", "label", "=", "1", "\n", "", "else", ":", "\n", "                            ", "invalid_change", "+=", "1", "\n", "label", "=", "0", "\n", "\n", "# Saving the triplet (CF, X, Label)", "\n", "", "", "", "", "if", "label", "!=", "-", "1", ":", "\n", "                ", "temp", "=", "[", "]", "\n", "temp", ".", "append", "(", "x_pred", ")", "\n", "temp", ".", "append", "(", "train_x", ")", "\n", "temp", ".", "append", "(", "label", ")", "\n", "gen_cf_list", ".", "append", "(", "temp", ")", "\n", "\n", "# Saving the triplet (CF, X, Label)", "\n", "", "", "if", "valid_oracle_cf", "==", "1", ":", "\n", "            ", "for", "item", "in", "gen_cf_list", ":", "\n", "                ", "x_pred", "=", "item", "[", "0", "]", "\n", "train_x", "=", "item", "[", "1", "]", "\n", "label", "=", "item", "[", "2", "]", "\n", "good_cf_dataset_save", "[", "counter", "]", "=", "[", "x_pred", ".", "to_json", "(", ")", ",", "train_x", ".", "tolist", "(", ")", ",", "label", "]", "\n", "gen_cf_pd", ".", "loc", "[", "counter", "]", "=", "x_pred", ".", "loc", "[", "0", "]", "\n", "gen_cf_inv", ".", "append", "(", "train_x", "[", "0", "]", ")", "\n", "gen_cf_label", ".", "append", "(", "label", ")", "\n", "", "counter", "+=", "1", "\n", "\n", "print", "(", "no_change", ",", "valid_change", ",", "invalid_change", ",", "low_change", ")", "\n", "print", "(", "'Done for: '", ",", "i", ",", "loop_iters", ",", "len", "(", "gen_cf_list", ")", ",", "counter", ")", "\n", "\n", "", "", "return", "good_cf_dataset_save", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.auto-encoder-train.traverse": [[28, 40], ["numpy.array_split", "range", "print", "len", "torch.tensor().float", "torch.tensor().float", "torch.argmax", "torch.argmax", "print", "pred_model", "numpy.unique", "torch.tensor", "torch.tensor"], "function", ["None"], ["import", "tensorflow", "as", "tf", "\n", "from", "tensorflow", "import", "keras", "\n", "#Keras", "\n", "from", "tensorflow", ".", "keras", ".", "layers", "import", "Conv2D", ",", "Input", ",", "Dense", ",", "Lambda", ",", "Layer", ",", "Add", ",", "Multiply", ",", "Dropout", ",", "Flatten", ",", "MaxPooling2D", ",", "UpSampling2D", "\n", "from", "tensorflow", ".", "keras", ".", "models", "import", "Model", ",", "Sequential", ",", "load_model", "\n", "from", "tensorflow", ".", "keras", "import", "backend", "as", "K", "\n", "\n", "(", "x_train", ",", "y_train", ")", ",", "(", "x_test", ",", "y_test", ")", "=", "tf", ".", "keras", ".", "datasets", ".", "mnist", ".", "load_data", "(", ")", "\n", "print", "(", "'x_train shape:'", ",", "x_train", ".", "shape", ",", "'y_train shape:'", ",", "y_train", ".", "shape", ")", "\n", "\n", "x_train", "=", "x_train", ".", "astype", "(", "'float32'", ")", "/", "255", "\n", "x_test", "=", "x_test", ".", "astype", "(", "'float32'", ")", "/", "255", "\n", "x_train", "=", "np", ".", "reshape", "(", "x_train", ",", "x_train", ".", "shape", "+", "(", "1", ",", ")", ")", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.auto-encoder-train.ae_compute_loss": [[41, 91], ["normalise_weights.keys", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "range", "print", "print", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "normalise_weights.keys", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.log", "torch.log", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["x_test", "=", "np", ".", "reshape", "(", "x_test", ",", "x_test", ".", "shape", "+", "(", "1", ",", ")", ")", "\n", "print", "(", "'x_train shape:'", ",", "x_train", ".", "shape", ",", "'x_test shape:'", ",", "x_test", ".", "shape", ")", "\n", "#y_train = to_categorical(y_train)", "\n", "#y_test = to_categorical(y_test)", "\n", "print", "(", "'y_train shape:'", ",", "y_train", ".", "shape", ",", "'y_test shape:'", ",", "y_test", ".", "shape", ")", "\n", "\n", "def", "ae_model", "(", ")", ":", "\n", "# encoder", "\n", "    ", "x_in", "=", "Input", "(", "shape", "=", "(", "28", ",", "28", ",", "1", ")", ")", "\n", "x", "=", "Conv2D", "(", "16", ",", "(", "3", ",", "3", ")", ",", "activation", "=", "'relu'", ",", "padding", "=", "'same'", ")", "(", "x_in", ")", "\n", "x", "=", "Conv2D", "(", "16", ",", "(", "3", ",", "3", ")", ",", "activation", "=", "'relu'", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "x", "=", "MaxPooling2D", "(", "(", "2", ",", "2", ")", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "encoded", "=", "Conv2D", "(", "1", ",", "(", "3", ",", "3", ")", ",", "activation", "=", "None", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "encoder", "=", "Model", "(", "x_in", ",", "encoded", ")", "\n", "\n", "# decoder", "\n", "dec_in", "=", "Input", "(", "shape", "=", "(", "14", ",", "14", ",", "1", ")", ")", "\n", "x", "=", "Conv2D", "(", "16", ",", "(", "3", ",", "3", ")", ",", "activation", "=", "'relu'", ",", "padding", "=", "'same'", ")", "(", "dec_in", ")", "\n", "x", "=", "UpSampling2D", "(", "(", "2", ",", "2", ")", ")", "(", "x", ")", "\n", "x", "=", "Conv2D", "(", "16", ",", "(", "3", ",", "3", ")", ",", "activation", "=", "'relu'", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "decoded", "=", "Conv2D", "(", "1", ",", "(", "3", ",", "3", ")", ",", "activation", "=", "None", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "decoder", "=", "Model", "(", "dec_in", ",", "decoded", ")", "\n", "\n", "# autoencoder = encoder + decoder", "\n", "x_out", "=", "decoder", "(", "encoder", "(", "x_in", ")", ")", "\n", "autoencoder", "=", "Model", "(", "x_in", ",", "x_out", ")", "\n", "autoencoder", ".", "compile", "(", "optimizer", "=", "'adam'", ",", "loss", "=", "'mse'", ")", "\n", "\n", "return", "autoencoder", ",", "encoder", ",", "decoder", "\n", "\n", "# Training Target Auto Encoder for all the classes", "\n", "", "for", "t_c", "in", "range", "(", "10", ")", ":", "\n", "    ", "ae", ",", "enc", ",", "dec", "=", "ae_model", "(", ")", "\n", "\n", "y_train_tc", "=", "y_train", "[", "y_train", "==", "t_c", "]", "\n", "x_train_tc", "=", "x_train", "[", "y_train", "==", "t_c", "]", "\n", "print", "(", "'Training for Target Class: '", ",", "t_c", ")", "\n", "print", "(", "'Data Size: '", ",", "x_train_tc", ".", "shape", ")", "\n", "print", "(", "'Sanity Check: '", ",", "np", ".", "unique", "(", "y_train_tc", ",", "return_counts", "=", "True", ")", ")", "\n", "\n", "ae", ".", "fit", "(", "x_train", ",", "x_train", ",", "batch_size", "=", "128", ",", "epochs", "=", "4", ",", "validation_data", "=", "(", "x_test", ",", "x_test", ")", ",", "verbose", "=", "0", ")", "\n", "\n", "path", "=", "'../models/mnist_ae_'", "+", "'target_class_'", "+", "str", "(", "t_c", ")", "\n", "model_json", "=", "ae", ".", "to_json", "(", ")", "\n", "with", "open", "(", "path", "+", "\".json\"", ",", "\"w\"", ")", "as", "json_file", ":", "\n", "        ", "json_file", ".", "write", "(", "model_json", ")", "\n", "", "ae", ".", "save_weights", "(", "path", "+", "\".h5\"", ")", "\n", "\n", "# For the whole data trained AE    ", "\n", "", "ae", ",", "enc", ",", "dec", "=", "ae_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.auto-encoder-train.ae_compute_elbo": [[93, 103], ["model.encoder", "model.sample_latent_code", "model.decoder", "torch.tensor", "torch.tensor", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.argmax", "torch.argmax", "pred_model", "torch.log", "torch.log"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.AutoEncoder.encoder", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.AutoEncoder.sample_latent_code", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.AutoEncoder.decoder"], ["x_train_tc", "=", "x_train", "\n", "print", "(", "'Data Size: '", ",", "x_train_tc", ".", "shape", ")", "\n", "print", "(", "'Sanity Check: '", ",", "np", ".", "unique", "(", "y_train_tc", ",", "return_counts", "=", "True", ")", ")", "\n", "\n", "ae", ".", "fit", "(", "x_train", ",", "x_train", ",", "batch_size", "=", "128", ",", "epochs", "=", "4", ",", "validation_data", "=", "(", "x_test", ",", "x_test", ")", ",", "verbose", "=", "0", ")", "\n", "\n", "path", "=", "'../models/mnist_ae_'", "+", "'target_class_'", "+", "str", "(", "-", "1", ")", "\n", "model_json", "=", "ae", ".", "to_json", "(", ")", "\n", "with", "open", "(", "path", "+", "\".json\"", ",", "\"w\"", ")", "as", "json_file", ":", "\n", "    ", "json_file", ".", "write", "(", "model_json", ")", "\n", "", "ae", ".", "save_weights", "(", "path", "+", "\".h5\"", ")", ""]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.auto-encoder-train.ae_train": [[105, 128], ["numpy.array_split", "range", "print", "len", "optimizer.zero_grad", "torch.tensor().float", "torch.tensor().float", "torch.Tensor", "torch.Tensor", "model", "auto-encoder-train.ae_compute_loss", "ae_compute_loss.backward", "ae_compute_loss.item", "optimizer.step", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.auto-encoder-train.ae_compute_loss"], []], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.auto-encoder-train.ae_test": [[130, 160], ["numpy.array_split", "random.randrange", "range", "print", "len", "len", "torch.tensor().float", "torch.tensor().float", "auto-encoder-train.ae_compute_elbo", "d.de_normalize_data", "d.de_normalize_data", "d.get_decoded_data", "d.get_decoded_data", "random.randrange", "print", "print", "print", "torch.tensor", "torch.tensor", "d.de_normalize_data.detach().numpy", "d.de_normalize_data.detach().numpy", "d.de_normalize_data.detach", "d.de_normalize_data.detach"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.auto-encoder-train.ae_compute_elbo", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data"], []], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf-bnlearn.de_normalise": [[30, 32], ["None"], "function", ["None"], ["def", "de_normalise", "(", "x", ",", "normalise_weights", ")", ":", "\n", "    ", "return", "(", "normalise_weights", "[", "1", "]", "-", "normalise_weights", "[", "0", "]", ")", "*", "x", "+", "normalise_weights", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf-bnlearn.traverse": [[33, 45], ["numpy.array_split", "range", "print", "len", "torch.tensor().float().to", "torch.tensor().float().to", "torch.argmax", "torch.argmax", "print", "pred_model", "numpy.unique", "torch.tensor().float", "torch.tensor().float", "torch.argmax.cpu", "torch.tensor", "torch.tensor"], "function", ["None"], ["", "def", "traverse", "(", "train_dataset", ",", "epochs", "=", "1", ",", "batch_size", "=", "128", ")", ":", "\n", "    ", "batch_num", "=", "0", "\n", "loss", "=", "0.0", "\n", "train_size", "=", "0", "\n", "train_dataset", "=", "np", ".", "array_split", "(", "train_dataset", ",", "train_dataset", ".", "shape", "[", "0", "]", "//", "batch_size", ",", "axis", "=", "0", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "train_dataset", ")", ")", ":", "\n", "        ", "train_x", "=", "train_dataset", "[", "i", "]", "\n", "train_x", "=", "torch", ".", "tensor", "(", "train_x", ")", ".", "float", "(", ")", ".", "to", "(", "cuda", ")", "\n", "train_y", "=", "torch", ".", "argmax", "(", "pred_model", "(", "train_x", ")", ",", "dim", "=", "1", ")", "\n", "train_size", "+=", "train_x", ".", "shape", "[", "0", "]", "\n", "print", "(", "np", ".", "unique", "(", "train_y", ".", "cpu", "(", ")", ",", "return_counts", "=", "True", ")", ")", "\n", "", "print", "(", "train_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf-bnlearn.scm_change_score": [[46, 81], ["torch.zeros().to", "torch.zeros().to", "torch.mean", "torch.mean", "d.encoded_feature_names.index", "scripts.evaluation_functions.de_normalise", "torch.abs", "torch.abs", "torch.zeros", "torch.zeros", "range", "range", "len", "d.encoded_feature_names.index", "len", "d.encoded_feature_names.index", "scripts.evaluation_functions.de_normalise", "scripts.evaluation_functions.de_normalise"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf.de_normalise", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf.de_normalise", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf.de_normalise"], ["", "def", "scm_change_score", "(", "model", ",", "x", ",", "xpred", ",", "normalise_weights", ",", "scm_model", ",", "constraint_nodes", ",", "delta_case", ")", ":", "\n", "\n", "    ", "score", "=", "torch", ".", "zeros", "(", "xpred", ".", "shape", "[", "0", "]", ")", ".", "to", "(", "cuda", ")", "\n", "for", "node", "in", "constraint_nodes", ":", "\n", "        ", "parents", "=", "scm_model", "[", "node", "]", "[", "'parent'", "]", "\n", "weights", "=", "scm_model", "[", "node", "]", "[", "'weight'", "]", "\n", "deviations", "=", "scm_model", "[", "node", "]", "[", "'sd'", "]", "\n", "\n", "if", "'Treatment'", "in", "parents", ":", "\n", "# Choose the corresponding linear gaussian model based on treatment label", "\n", "# Get encoded feature indices correspodning to the feature Treatment", "\n", "            ", "weights", "=", "weights", "[", "2", "]", "\n", "#print(weights.shape, weights)", "\n", "#weights= weights.tolist()", "\n", "delta_f", "=", "weights", "[", "0", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "parents", ")", ")", ":", "\n", "                ", "if", "parents", "[", "idx", "]", "==", "'Treatment'", ":", "\n", "#print(idx, parents[idx])", "\n", "                    ", "continue", "\n", "", "key", "=", "d", ".", "encoded_feature_names", ".", "index", "(", "parents", "[", "idx", "]", ")", "\n", "w", "=", "weights", "[", "idx", "]", "\n", "delta_f", "+=", "w", "*", "de_normalise", "(", "xpred", "[", ":", ",", "key", "]", ",", "normalise_weights", "[", "key", "]", ")", "\n", "", "", "else", ":", "\n", "#Intercept", "\n", "            ", "delta_f", "=", "weights", "[", "0", "]", "\n", "#Variance", "\n", "for", "idx", "in", "range", "(", "len", "(", "parents", ")", ")", ":", "\n", "                ", "key", "=", "d", ".", "encoded_feature_names", ".", "index", "(", "parents", "[", "idx", "]", ")", "\n", "w", "=", "weights", "[", "idx", "+", "1", "]", "# Add 1 because the first case is intercept    ", "\n", "delta_f", "+=", "w", "*", "(", "de_normalise", "(", "xpred", "[", ":", ",", "key", "]", ",", "normalise_weights", "[", "key", "]", ")", ")", "\n", "", "", "key", "=", "d", ".", "encoded_feature_names", ".", "index", "(", "node", ")", "\n", "delta_x", "=", "de_normalise", "(", "xpred", "[", ":", ",", "key", "]", ",", "normalise_weights", "[", "key", "]", ")", "\n", "score", "+=", "torch", ".", "abs", "(", "delta_x", "-", "delta_f", ")", "\n", "#print( 'Delta X: ', torch.mean(delta_x), 'Delta f: ', torch.mean(delta_f) )", "\n", "", "return", "torch", ".", "mean", "(", "score", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf-bnlearn.compute_change_proximal_loss": [[82, 152], ["normalise_weights.keys", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "pred_model", "torch.zeros().to", "torch.zeros().to", "torch.nn.functional.hinge_embedding_loss", "torch.nn.functional.hinge_embedding_loss", "range", "print", "print", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "normalise_weights.keys", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "pred_model", "torch.nn.functional.hinge_embedding_loss", "torch.nn.functional.hinge_embedding_loss", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.zeros", "torch.zeros", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.sum", "torch.sum", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.log", "torch.log", "int", "torch.sum", "torch.sum", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.abs", "torch.abs", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "int", "torch.sum", "torch.sum", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid"], ["", "def", "compute_change_proximal_loss", "(", "model", ",", "model_out", ",", "x", ",", "target_label", ",", "normalise_weights", ",", "validity_reg", ",", "margin", ",", "constraint_nodes", ")", ":", "\n", "\n", "    ", "em", "=", "model_out", "[", "'em'", "]", "\n", "ev", "=", "model_out", "[", "'ev'", "]", "\n", "z", "=", "model_out", "[", "'z'", "]", "\n", "dm", "=", "model_out", "[", "'x_pred'", "]", "\n", "mc_samples", "=", "model_out", "[", "'mc_samples'", "]", "\n", "\n", "#KL Divergence", "\n", "kl_divergence", "=", "0.5", "*", "torch", ".", "mean", "(", "em", "**", "2", "+", "ev", "-", "torch", ".", "log", "(", "ev", ")", "-", "1", ",", "axis", "=", "1", ")", "\n", "\n", "#Reconstruction Term", "\n", "#Proximity: L1 Loss", "\n", "x_pred", "=", "dm", "[", "0", "]", "\n", "s", "=", "model", ".", "encoded_start_cat", "\n", "recon_err", "=", "-", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "x", "[", ":", ",", "s", ":", "-", "1", "]", "-", "x_pred", "[", ":", ",", "s", ":", "-", "1", "]", ")", ",", "axis", "=", "1", ")", "\n", "for", "key", "in", "normalise_weights", ".", "keys", "(", ")", ":", "\n", "        ", "if", "d", ".", "encoded_feature_names", "[", "int", "(", "key", ")", "]", "not", "in", "constraint_nodes", ":", "\n", "# recon_err+= -(1/mad_feature_weights[d.encoded_feature_names[int(key)]])*(normalise_weights[key][1] - normalise_weights[key][0])*torch.abs(x[:,key] - x_pred[:,key]) ", "\n", "            ", "recon_err", "+=", "-", "(", "normalise_weights", "[", "key", "]", "[", "1", "]", "-", "normalise_weights", "[", "key", "]", "[", "0", "]", ")", "*", "torch", ".", "abs", "(", "x", "[", ":", ",", "key", "]", "-", "x_pred", "[", ":", ",", "key", "]", ")", "\n", "\n", "# Sum to 1 over the categorical indexes of a feature", "\n", "", "", "for", "v", "in", "model", ".", "encoded_categorical_feature_indexes", ":", "\n", "        ", "temp", "=", "-", "torch", ".", "abs", "(", "1.0", "-", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", "v", "[", "0", "]", ":", "v", "[", "-", "1", "]", "+", "1", "]", ",", "axis", "=", "1", ")", ")", "\n", "recon_err", "+=", "temp", "\n", "\n", "", "count", "=", "0", "\n", "count", "+=", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", ":", "s", "]", "<", "0", ",", "axis", "=", "1", ")", ".", "float", "(", ")", "\n", "count", "+=", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", ":", "s", "]", ">", "1", ",", "axis", "=", "1", ")", ".", "float", "(", ")", "\n", "\n", "#Validity         ", "\n", "temp_logits", "=", "pred_model", "(", "x_pred", ")", "\n", "#validity_loss = -F.cross_entropy(temp_logits, target_label)    ", "\n", "validity_loss", "=", "torch", ".", "zeros", "(", "1", ")", ".", "to", "(", "cuda", ")", "\n", "temp_1", "=", "temp_logits", "[", "target_label", "==", "1", ",", ":", "]", "\n", "temp_0", "=", "temp_logits", "[", "target_label", "==", "0", ",", ":", "]", "\n", "validity_loss", "+=", "F", ".", "hinge_embedding_loss", "(", "F", ".", "sigmoid", "(", "temp_1", "[", ":", ",", "1", "]", ")", ".", "to", "(", "cuda", ")", "-", "F", ".", "sigmoid", "(", "temp_1", "[", ":", ",", "0", "]", ")", ".", "to", "(", "cuda", ")", ",", "torch", ".", "tensor", "(", "-", "1", ")", ".", "to", "(", "cuda", ")", ",", "margin", ",", "reduction", "=", "'mean'", ")", "\n", "validity_loss", "+=", "F", ".", "hinge_embedding_loss", "(", "F", ".", "sigmoid", "(", "temp_0", "[", ":", ",", "0", "]", ")", ".", "to", "(", "cuda", ")", "-", "F", ".", "sigmoid", "(", "temp_0", "[", ":", ",", "1", "]", ")", ".", "to", "(", "cuda", ")", ",", "torch", ".", "tensor", "(", "-", "1", ")", ".", "to", "(", "cuda", ")", ",", "margin", ",", "reduction", "=", "'mean'", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "mc_samples", ")", ":", "\n", "        ", "x_pred", "=", "dm", "[", "i", "]", "\n", "\n", "recon_err", "+=", "-", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "x", "[", ":", ",", "s", ":", "-", "1", "]", "-", "x_pred", "[", ":", ",", "s", ":", "-", "1", "]", ")", ",", "axis", "=", "1", ")", "\n", "for", "key", "in", "normalise_weights", ".", "keys", "(", ")", ":", "\n", "            ", "if", "d", ".", "encoded_feature_names", "[", "int", "(", "key", ")", "]", "not", "in", "constraint_nodes", ":", "\n", "# recon_err+= -(1/mad_feature_weights[d.encoded_feature_names[int(key)]])*(normalise_weights[key][1] - normalise_weights[key][0])*torch.abs(x[:,key] - x_pred[:,key]) ", "\n", "                ", "recon_err", "+=", "-", "(", "normalise_weights", "[", "key", "]", "[", "1", "]", "-", "normalise_weights", "[", "key", "]", "[", "0", "]", ")", "*", "torch", ".", "abs", "(", "x", "[", ":", ",", "key", "]", "-", "x_pred", "[", ":", ",", "key", "]", ")", "\n", "\n", "# Sum to 1 over the categorical indexes of a feature", "\n", "", "", "for", "v", "in", "model", ".", "encoded_categorical_feature_indexes", ":", "\n", "            ", "temp", "=", "-", "torch", ".", "abs", "(", "1.0", "-", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", "v", "[", "0", "]", ":", "v", "[", "-", "1", "]", "+", "1", "]", ",", "axis", "=", "1", ")", ")", "\n", "recon_err", "+=", "temp", "\n", "\n", "", "count", "+=", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", ":", "s", "]", "<", "0", ",", "axis", "=", "1", ")", ".", "float", "(", ")", "\n", "count", "+=", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", ":", "s", "]", ">", "1", ",", "axis", "=", "1", ")", ".", "float", "(", ")", "\n", "\n", "#Validity", "\n", "temp_logits", "=", "pred_model", "(", "x_pred", ")", "\n", "#validity_loss += -F.cross_entropy(temp_logits, target_label)", "\n", "temp_1", "=", "temp_logits", "[", "target_label", "==", "1", ",", ":", "]", "\n", "temp_0", "=", "temp_logits", "[", "target_label", "==", "0", ",", ":", "]", "\n", "validity_loss", "+=", "F", ".", "hinge_embedding_loss", "(", "F", ".", "sigmoid", "(", "temp_1", "[", ":", ",", "1", "]", ")", ".", "to", "(", "cuda", ")", "-", "F", ".", "sigmoid", "(", "temp_1", "[", ":", ",", "0", "]", ")", ".", "to", "(", "cuda", ")", ",", "torch", ".", "tensor", "(", "-", "1", ")", ".", "to", "(", "cuda", ")", ",", "margin", ",", "reduction", "=", "'mean'", ")", "\n", "validity_loss", "+=", "F", ".", "hinge_embedding_loss", "(", "F", ".", "sigmoid", "(", "temp_0", "[", ":", ",", "0", "]", ")", ".", "to", "(", "cuda", ")", "-", "F", ".", "sigmoid", "(", "temp_0", "[", ":", ",", "1", "]", ")", ".", "to", "(", "cuda", ")", ",", "torch", ".", "tensor", "(", "-", "1", ")", ".", "to", "(", "cuda", ")", ",", "margin", ",", "reduction", "=", "'mean'", ")", "\n", "\n", "", "recon_err", "=", "recon_err", "/", "mc_samples", "\n", "validity_loss", "=", "-", "1", "*", "validity_reg", "*", "validity_loss", "/", "mc_samples", "\n", "\n", "print", "(", "'Avg wrong cont dim: '", ",", "torch", ".", "mean", "(", "count", ")", "/", "mc_samples", ")", "\n", "print", "(", "'recon: '", ",", "-", "torch", ".", "mean", "(", "recon_err", ")", ",", "' KL: '", ",", "torch", ".", "mean", "(", "kl_divergence", ")", ",", "' Validity: '", ",", "-", "validity_loss", ")", "\n", "return", "-", "torch", ".", "mean", "(", "recon_err", "-", "kl_divergence", ")", "-", "validity_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf-bnlearn.train_scm_loss": [[153, 197], ["torch.tensor().float().to", "torch.tensor().float().to", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "enumerate", "print", "print", "optimizer.zero_grad", "model", "scm-generative-cf-bnlearn.compute_change_proximal_loss", "scm-generative-cf-bnlearn.scm_change_score", "range", "print", "compute_change_proximal_loss.item", "compute_change_proximal_loss.backward", "optimizer.step", "torch.tensor().float", "torch.tensor().float", "torch.argmax", "torch.argmax", "scm-generative-cf-bnlearn.scm_change_score", "pred_model", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf.compute_change_proximal_loss", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf.scm_change_score", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf.scm_change_score"], ["", "def", "train_scm_loss", "(", "model", ",", "train_dataset", ",", "optimizer", ",", "normalise_weights", ",", "scm_model", ",", "constraint_node", ",", "validity_reg", ",", "scm_reg", ",", "margin", ",", "delta_case", ",", "epochs", "=", "1000", ",", "batch_size", "=", "1024", ")", ":", "\n", "    ", "batch_num", "=", "0", "\n", "train_loss", "=", "0.0", "\n", "train_size", "=", "0", "\n", "#train_dataset= np.array_split( train_dataset, train_dataset.shape[0]//batch_size ,axis=0 )", "\n", "train_dataset", "=", "torch", ".", "tensor", "(", "train_dataset", ")", ".", "float", "(", ")", ".", "to", "(", "cuda", ")", "\n", "train_dataset", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ")", "\n", "good_cf_count", "=", "0", "\n", "#for i in range(len(train_dataset)):", "\n", "for", "train_x", "in", "enumerate", "(", "train_dataset", ")", ":", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "#         train_x = train_dataset[i]", "\n", "#         train_x= torch.tensor( train_x ).float() ", "\n", "train_x", "=", "train_x", "[", "1", "]", "\n", "train_y", "=", "1.0", "-", "torch", ".", "argmax", "(", "pred_model", "(", "train_x", ")", ",", "dim", "=", "1", ")", "\n", "train_size", "+=", "train_x", ".", "shape", "[", "0", "]", "\n", "\n", "out", "=", "model", "(", "train_x", ",", "train_y", ")", "\n", "loss", "=", "compute_change_proximal_loss", "(", "model", ",", "out", ",", "train_x", ",", "train_y", ",", "normalise_weights", ",", "validity_reg", ",", "margin", ",", "constraint_node", ")", "\n", "\n", "dm", "=", "out", "[", "'x_pred'", "]", "\n", "mc_samples", "=", "out", "[", "'mc_samples'", "]", "\n", "x_pred", "=", "dm", "[", "0", "]", "\n", "\n", "scm_loss", "=", "scm_change_score", "(", "model", ",", "train_x", ",", "x_pred", ",", "normalise_weights", ",", "scm_model", ",", "constraint_node", ",", "delta_case", ")", "\n", "\n", "for", "j", "in", "range", "(", "1", ",", "mc_samples", ")", ":", "\n", "            ", "x_pred", "=", "dm", "[", "j", "]", "\n", "scm_loss", "+=", "scm_change_score", "(", "model", ",", "train_x", ",", "x_pred", ",", "normalise_weights", ",", "scm_model", ",", "constraint_node", ",", "delta_case", ")", "\n", "\n", "", "print", "(", "'SCM: '", ",", "scm_loss", "/", "mc_samples", ")", "\n", "scm_loss", "=", "scm_reg", "*", "scm_loss", "/", "mc_samples", "\n", "\n", "loss", "+=", "scm_loss", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "\n", "batch_num", "+=", "1", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "ret", "=", "train_loss", "/", "batch_num", "\n", "print", "(", "'Train Avg Loss: '", ",", "ret", ",", "train_size", ")", "\n", "print", "(", "'CFLabel Num: '", ",", "good_cf_count", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf-bnlearn.test": [[198, 234], ["numpy.array_split", "random.randrange", "range", "print", "print", "len", "len", "torch.tensor().float().to", "torch.tensor().float().to", "torch.argmax", "torch.argmax", "model.compute_elbo", "train_y.cpu().numpy.cpu().numpy", "cf_label.cpu().numpy.cpu().numpy", "numpy.sum", "d.de_normalize_data", "d.de_normalize_data", "pred_model", "d.get_decoded_data", "d.get_decoded_data", "random.randrange", "print", "print", "print", "torch.tensor().float", "torch.tensor().float", "train_y.cpu().numpy.cpu", "cf_label.cpu().numpy.cpu", "d.de_normalize_data.detach().cpu().numpy", "d.de_normalize_data.detach().cpu().numpy", "torch.tensor", "torch.tensor", "d.de_normalize_data.detach().cpu", "d.de_normalize_data.detach().cpu", "d.de_normalize_data.detach", "d.de_normalize_data.detach"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.CF_VAE.compute_elbo", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data"], ["", "def", "test", "(", "model", ",", "train_dataset", ",", "epochs", "=", "1", ",", "batch_size", "=", "2048", ")", ":", "\n", "    ", "batch_num", "=", "0", "\n", "likelihood", "=", "0.0", "\n", "valid_cf_count", "=", "0", "\n", "train_size", "=", "0", "\n", "train_dataset", "=", "np", ".", "array_split", "(", "train_dataset", ",", "train_dataset", ".", "shape", "[", "0", "]", "//", "batch_size", ",", "axis", "=", "0", ")", "\n", "index", "=", "random", ".", "randrange", "(", "0", ",", "len", "(", "train_dataset", ")", ",", "1", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "train_dataset", ")", ")", ":", "\n", "\n", "        ", "train_x", "=", "train_dataset", "[", "i", "]", "\n", "train_x", "=", "torch", ".", "tensor", "(", "train_x", ")", ".", "float", "(", ")", ".", "to", "(", "cuda", ")", "\n", "train_y", "=", "torch", ".", "argmax", "(", "pred_model", "(", "train_x", ")", ",", "dim", "=", "1", ")", "\n", "train_size", "+=", "train_x", ".", "shape", "[", "0", "]", "\n", "\n", "recon_err", ",", "kl_err", ",", "x_true", ",", "x_pred", ",", "cf_label", "=", "model", ".", "compute_elbo", "(", "train_x", ",", "1.0", "-", "train_y", ",", "pred_model", ")", "\n", "likelihood", "+=", "recon_err", "-", "kl_err", "\n", "\n", "train_y", "=", "train_y", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "cf_label", "=", "cf_label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "valid_cf_count", "+=", "np", ".", "sum", "(", "train_y", "!=", "cf_label", ")", "\n", "\n", "x_pred", "=", "d", ".", "de_normalize_data", "(", "d", ".", "get_decoded_data", "(", "x_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "x_true", "=", "d", ".", "de_normalize_data", "(", "d", ".", "get_decoded_data", "(", "x_true", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "if", "batch_num", "==", "index", ":", "\n", "            ", "rand_idx", "=", "random", ".", "randrange", "(", "0", ",", "batch_size", "/", "2", "-", "1", ",", "1", ")", "\n", "print", "(", "'Likelihood: '", ",", "recon_err", ",", "kl_err", ",", "recon_err", "-", "kl_err", ")", "\n", "print", "(", "'X: '", ",", "x_true", ".", "iloc", "[", "rand_idx", ",", ":", "]", ")", "\n", "print", "(", "'Xpred: '", ",", "x_pred", ".", "iloc", "[", "rand_idx", ",", ":", "]", ")", "\n", "", "batch_num", "+=", "1", "\n", "\n", "", "ret", "=", "likelihood", "/", "batch_num", "\n", "print", "(", "'ELBO Avg: '", ",", "ret", ",", "train_size", ")", "\n", "print", "(", "'Valid CF Percentage: '", ",", "valid_cf_count", ",", "valid_cf_count", "/", "train_size", ")", "\n", "\n", "return", "ret", ",", "valid_cf_count", "/", "train_size", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.base-generative-cf.compute_loss": [[30, 97], ["normalise_weights.keys", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "pred_model", "torch.zeros().to", "torch.zeros().to", "torch.nn.functional.hinge_embedding_loss", "torch.nn.functional.hinge_embedding_loss", "range", "print", "print", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "normalise_weights.keys", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "pred_model", "torch.nn.functional.hinge_embedding_loss", "torch.nn.functional.hinge_embedding_loss", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.zeros", "torch.zeros", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.sum", "torch.sum", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.log", "torch.log", "torch.sum", "torch.sum", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.sum", "torch.sum", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid"], ["#Keras", "\n", "from", "tensorflow", ".", "keras", ".", "layers", "import", "Conv2D", ",", "Input", ",", "Dense", ",", "Lambda", ",", "Layer", ",", "Add", ",", "Multiply", ",", "Dropout", ",", "Flatten", ",", "MaxPooling2D", ",", "UpSampling2D", ",", "Reshape", "\n", "from", "tensorflow", ".", "keras", ".", "models", "import", "Model", ",", "Sequential", ",", "load_model", "\n", "from", "tensorflow", ".", "keras", "import", "backend", "as", "K", "\n", "\n", "\n", "#GPU", "\n", "cuda", "=", "torch", ".", "device", "(", "'cuda:0'", ")", "\n", "\n", "def", "compute_loss", "(", "model", ",", "model_out", ",", "x", ",", "target_label", ",", "validity_reg", ",", "margin", ")", ":", "\n", "\n", "    ", "em", "=", "model_out", "[", "'em'", "]", "\n", "ev", "=", "model_out", "[", "'ev'", "]", "\n", "z", "=", "model_out", "[", "'z'", "]", "\n", "dm", "=", "model_out", "[", "'x_pred'", "]", "\n", "mc_samples", "=", "model_out", "[", "'mc_samples'", "]", "\n", "#KL Divergence", "\n", "kl_divergence", "=", "0.5", "*", "torch", ".", "mean", "(", "em", "**", "2", "+", "ev", "-", "torch", ".", "log", "(", "ev", ")", "-", "1", ",", "axis", "=", "1", ")", "\n", "\n", "#Reconstruction Term", "\n", "#Proximity: L1 Loss", "\n", "x_pred", "=", "dm", "[", "0", "]", "\n", "# s would be zero hence it won't make a difference, and it will be simply like a proximity term", "\n", "s", "=", "model", ".", "encoded_start_cat", "\n", "recon_err", "=", "-", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "x", "[", ":", ",", "s", ":", "-", "1", "]", "-", "x_pred", "[", ":", ",", "s", ":", "-", "1", "]", ")", ",", "axis", "=", "1", ")", "\n", "\n", "count", "=", "0", "\n", "count", "+=", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", ":", "s", "]", "<", "0", ",", "axis", "=", "1", ")", ".", "float", "(", ")", "\n", "count", "+=", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", ":", "s", "]", ">", "1", ",", "axis", "=", "1", ")", ".", "float", "(", ")", "\n", "\n", "#Validity         ", "\n", "temp_logits", "=", "pred_model", "(", "x_pred", ")", "\n", "#validity_loss = -F.cross_entropy(temp_logits, target_label)    ", "\n", "validity_loss", "=", "torch", ".", "zeros", "(", "1", ")", ".", "to", "(", "cuda", ")", "\n", "\n", "#Loop over total number of classes to compute the Hinge Loss", "\n", "num_classes", "=", "10", "\n", "for", "t_c", "in", "range", "(", "num_classes", ")", ":", "\n", "# Compute the validity_loss for data points with target class t_c in the given batch", "\n", "        ", "temp", "=", "temp_logits", "[", "target_label", "==", "t_c", ",", ":", "]", "\n", "if", "temp", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "#No data point in this batch with the target class t_c", "\n", "            ", "continue", "\n", "", "target_class_batch_score", "=", "temp", "[", ":", ",", "t_c", "]", "\n", "if", "t_c", "==", "0", ":", "\n", "            ", "temp", "=", "temp", "[", ":", ",", "t_c", "+", "1", ":", "]", "\n", "# Max along the batch axis in the tensor; torch.max returns both (values, indices) and taking the first argument gives values", "\n", "other_class_batch_score", "=", "torch", ".", "max", "(", "temp", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "", "elif", "t_c", "==", "num_classes", "-", "1", ":", "\n", "            ", "temp", "=", "temp", "[", ":", ",", ":", "t_c", "]", "\n", "# Max along the batch axis in the tensor", "\n", "other_class_batch_score", "=", "torch", ".", "max", "(", "temp", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "# Concatenate the tensors along the Non Batch Axis", "\n", "            ", "temp", "=", "torch", ".", "cat", "(", "(", "temp", "[", ":", ",", ":", "t_c", "]", ",", "temp", "[", ":", ",", "t_c", "+", "1", ":", "]", ")", ",", "dim", "=", "1", ")", "\n", "# Max along the batch axis in the tensor", "\n", "other_class_batch_score", "=", "torch", ".", "max", "(", "temp", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "\n", "", "validity_loss", "+=", "F", ".", "hinge_embedding_loss", "(", "F", ".", "sigmoid", "(", "target_class_batch_score", ")", ".", "to", "(", "cuda", ")", "-", "F", ".", "sigmoid", "(", "other_class_batch_score", ")", ".", "to", "(", "cuda", ")", ",", "torch", ".", "tensor", "(", "-", "1", ")", ".", "to", "(", "cuda", ")", ",", "margin", ",", "reduction", "=", "'mean'", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "1", ",", "mc_samples", ")", ":", "\n", "        ", "x_pred", "=", "dm", "[", "i", "]", "\n", "\n", "recon_err", "+=", "-", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "x", "[", ":", ",", "s", ":", "-", "1", "]", "-", "x_pred", "[", ":", ",", "s", ":", "-", "1", "]", ")", ",", "axis", "=", "1", ")", "\n", "\n", "count", "+=", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", ":", "s", "]", "<", "0", ",", "axis", "=", "1", ")", ".", "float", "(", ")", "\n", "count", "+=", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", ":", "s", "]", ">", "1", ",", "axis", "=", "1", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.base-generative-cf.traverse": [[99, 111], ["numpy.array_split", "range", "print", "len", "torch.tensor().float().to", "torch.tensor().float().to", "torch.argmax", "torch.argmax", "print", "pred_model", "numpy.unique", "torch.tensor().float", "torch.tensor().float", "torch.argmax.cpu", "torch.tensor", "torch.tensor"], "function", ["None"], ["temp_logits", "=", "pred_model", "(", "x_pred", ")", "\n", "#         validity_loss += -F.cross_entropy(temp_logits, target_label)      ", "\n", "\n", "#Loop over total number of classes to compute the Hinge Loss", "\n", "num_classes", "=", "10", "\n", "for", "t_c", "in", "range", "(", "num_classes", ")", ":", "\n", "# Compute the validity_loss for data points with target class t_c in the given batch", "\n", "            ", "temp", "=", "temp_logits", "[", "target_label", "==", "t_c", ",", ":", "]", "\n", "if", "temp", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "#No data point in this batch with the target class t_c", "\n", "                ", "continue", "\n", "", "target_class_batch_score", "=", "temp", "[", ":", ",", "t_c", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.base-generative-cf.train": [[112, 138], ["torch.tensor().float().to", "torch.tensor().float().to", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "enumerate", "print", "optimizer.zero_grad", "model", "base-generative-cf.compute_loss", "compute_loss.backward", "compute_loss.item", "optimizer.step", "torch.tensor().float", "torch.tensor().float", "torch.argmax", "torch.argmax", "pred_model", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.timeit-base-generative-cf.compute_loss"], ["if", "t_c", "==", "0", ":", "\n", "                ", "temp", "=", "temp", "[", ":", ",", "t_c", "+", "1", ":", "]", "\n", "# Max along the batch axis in the tensor; torch.max returns both (values, indices) and taking the first argument gives values", "\n", "other_class_batch_score", "=", "torch", ".", "max", "(", "temp", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "", "elif", "t_c", "==", "num_classes", "-", "1", ":", "\n", "                ", "temp", "=", "temp", "[", ":", ",", ":", "t_c", "]", "\n", "# Max along the batch axis in the tensor", "\n", "other_class_batch_score", "=", "torch", ".", "max", "(", "temp", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "# Concatenate the tensors along the Non Batch Axis", "\n", "                ", "temp", "=", "torch", ".", "cat", "(", "(", "temp", "[", ":", ",", ":", "t_c", "]", ",", "temp", "[", ":", ",", "t_c", "+", "1", ":", "]", ")", ",", "dim", "=", "1", ")", "\n", "# Max along the batch axis in the tensor", "\n", "other_class_batch_score", "=", "torch", ".", "max", "(", "temp", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "\n", "", "validity_loss", "+=", "F", ".", "hinge_embedding_loss", "(", "F", ".", "sigmoid", "(", "target_class_batch_score", ")", ".", "to", "(", "cuda", ")", "-", "F", ".", "sigmoid", "(", "other_class_batch_score", ")", ".", "to", "(", "cuda", ")", ",", "torch", ".", "tensor", "(", "-", "1", ")", ".", "to", "(", "cuda", ")", ",", "margin", ",", "reduction", "=", "'mean'", ")", "\n", "\n", "", "", "recon_err", "=", "recon_err", "/", "mc_samples", "\n", "validity_loss", "=", "-", "1", "*", "validity_reg", "*", "validity_loss", "/", "mc_samples", "\n", "\n", "print", "(", "'Avg wrong cont dim: '", ",", "torch", ".", "mean", "(", "count", ")", "/", "mc_samples", ")", "\n", "print", "(", "'recon: '", ",", "-", "torch", ".", "mean", "(", "recon_err", ")", ",", "' KL: '", ",", "torch", ".", "mean", "(", "kl_divergence", ")", ",", "' Validity: '", ",", "-", "validity_loss", ")", "\n", "return", "-", "torch", ".", "mean", "(", "recon_err", "-", "kl_divergence", ")", "-", "validity_loss", "\n", "\n", "\n", "", "def", "traverse", "(", "train_dataset", ",", "epochs", "=", "1", ",", "batch_size", "=", "128", ")", ":", "\n", "    ", "batch_num", "=", "0", "\n", "loss", "=", "0.0", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.base-generative-cf.test": [[139, 175], ["numpy.array_split", "random.randrange", "range", "print", "print", "len", "len", "torch.tensor().float().to", "torch.tensor().float().to", "torch.argmax", "torch.argmax", "model.compute_elbo", "train_y.cpu().numpy.cpu().numpy", "cf_label.cpu().numpy.cpu().numpy", "numpy.sum", "d.de_normalize_data", "d.de_normalize_data", "pred_model", "d.get_decoded_data", "d.get_decoded_data", "random.randrange", "print", "print", "print", "torch.tensor().float", "torch.tensor().float", "train_y.cpu().numpy.cpu", "cf_label.cpu().numpy.cpu", "d.de_normalize_data.detach().cpu().numpy", "d.de_normalize_data.detach().cpu().numpy", "torch.tensor", "torch.tensor", "d.de_normalize_data.detach().cpu", "d.de_normalize_data.detach().cpu", "d.de_normalize_data.detach", "d.de_normalize_data.detach"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.CF_VAE.compute_elbo", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data"], ["train_size", "=", "0", "\n", "train_dataset", "=", "np", ".", "array_split", "(", "train_dataset", ",", "train_dataset", ".", "shape", "[", "0", "]", "//", "batch_size", ",", "axis", "=", "0", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "train_dataset", ")", ")", ":", "\n", "        ", "train_x", "=", "train_dataset", "[", "i", "]", "\n", "train_x", "=", "torch", ".", "tensor", "(", "train_x", ")", ".", "float", "(", ")", ".", "to", "(", "cuda", ")", "\n", "train_y", "=", "torch", ".", "argmax", "(", "pred_model", "(", "train_x", ")", ",", "dim", "=", "1", ")", "\n", "train_size", "+=", "train_x", ".", "shape", "[", "0", "]", "\n", "print", "(", "np", ".", "unique", "(", "train_y", ".", "cpu", "(", ")", ",", "return_counts", "=", "True", ")", ")", "\n", "", "print", "(", "train_size", ")", "\n", "\n", "", "def", "generate_target_labels", "(", "train_y", ")", ":", "\n", "\n", "    ", "target_y", "=", "train_y", ".", "clone", "(", ")", "\n", "#print(train_y[:10])", "\n", "\n", "target_y", "[", "train_y", "==", "0", "]", "=", "8", "\n", "#target_y[ train_y == 1 ]= 7 ", "\n", "target_y", "[", "train_y", "==", "2", "]", "=", "3", "\n", "target_y", "[", "train_y", "==", "3", "]", "=", "5", "\n", "target_y", "[", "train_y", "==", "4", "]", "=", "9", "\n", "target_y", "[", "train_y", "==", "5", "]", "=", "8", "\n", "#target_y[ train_y == 6 ]= 8", "\n", "#target_y[ train_y == 7 ]= 9   ", "\n", "target_y", "[", "train_y", "==", "8", "]", "=", "9", "\n", "#target_y[ train_y == 9 ]= 7       ", "\n", "\n", "#print(target_y[:10])", "\n", "\n", "return", "target_y", "\n", "\n", "\n", "", "'''\n\nIM1 and IM2 metrics for the PyTorch AE Code\n\n'''", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.oracle-generative-cf.compute_loss": [[31, 104], ["normalise_weights.keys", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "pred_model", "torch.zeros().to", "torch.zeros().to", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "range", "print", "print", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.nn.functional.hinge_embedding_loss", "torch.nn.functional.hinge_embedding_loss", "normalise_weights.keys", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "pred_model", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.zeros", "torch.zeros", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.sum", "torch.sum", "torch.nn.functional.hinge_embedding_loss", "torch.nn.functional.hinge_embedding_loss", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.log", "torch.log", "torch.sum", "torch.sum", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.sum", "torch.sum", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid"], ["def", "compute_loss", "(", "model", ",", "model_out", ",", "x", ",", "target_label", ",", "normalise_weights", ",", "validity_reg", ",", "margin", ")", ":", "\n", "\n", "    ", "em", "=", "model_out", "[", "'em'", "]", "\n", "ev", "=", "model_out", "[", "'ev'", "]", "\n", "z", "=", "model_out", "[", "'z'", "]", "\n", "dm", "=", "model_out", "[", "'x_pred'", "]", "\n", "mc_samples", "=", "model_out", "[", "'mc_samples'", "]", "\n", "\n", "#KL Divergence", "\n", "kl_divergence", "=", "0.5", "*", "torch", ".", "mean", "(", "em", "**", "2", "+", "ev", "-", "torch", ".", "log", "(", "ev", ")", "-", "1", ",", "axis", "=", "1", ")", "\n", "\n", "#Reconstruction Term", "\n", "#Proximity: L1 Loss", "\n", "x_pred", "=", "dm", "[", "0", "]", "\n", "s", "=", "model", ".", "encoded_start_cat", "\n", "recon_err", "=", "-", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "x", "[", ":", ",", "s", ":", "-", "1", "]", "-", "x_pred", "[", ":", ",", "s", ":", "-", "1", "]", ")", ",", "axis", "=", "1", ")", "\n", "for", "key", "in", "normalise_weights", ".", "keys", "(", ")", ":", "\n", "# recon_err+= -(1/mad_feature_weights[d.encoded_feature_names[int(key)]])*(normalise_weights[key][1] - normalise_weights[key][0])*torch.abs(x[:,key] - x_pred[:,key]) ", "\n", "            ", "recon_err", "+=", "-", "(", "normalise_weights", "[", "key", "]", "[", "1", "]", "-", "normalise_weights", "[", "key", "]", "[", "0", "]", ")", "*", "torch", ".", "abs", "(", "x", "[", ":", ",", "key", "]", "-", "x_pred", "[", ":", ",", "key", "]", ")", "\n", "\n", "# Sum to 1 over the categorical indexes of a feature", "\n", "", "for", "v", "in", "model", ".", "encoded_categorical_feature_indexes", ":", "\n", "            ", "temp", "=", "-", "torch", ".", "abs", "(", "1.0", "-", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", "v", "[", "0", "]", ":", "v", "[", "-", "1", "]", "+", "1", "]", ",", "axis", "=", "1", ")", ")", "\n", "recon_err", "+=", "temp", "\n", "\n", "", "count", "=", "0", "\n", "count", "+=", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", ":", "s", "]", "<", "0", ",", "axis", "=", "1", ")", ".", "float", "(", ")", "\n", "count", "+=", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", ":", "s", "]", ">", "1", ",", "axis", "=", "1", ")", ".", "float", "(", ")", "\n", "\n", "#Validity         ", "\n", "temp_logits", "=", "pred_model", "(", "x_pred", ")", "\n", "#validity_loss = -F.cross_entropy(temp_logits, target_label)", "\n", "validity_loss", "=", "torch", ".", "zeros", "(", "1", ")", ".", "to", "(", "cuda", ")", "\n", "temp_1", "=", "temp_logits", "[", "target_label", "==", "1", ",", ":", "]", "\n", "temp_0", "=", "temp_logits", "[", "target_label", "==", "0", ",", ":", "]", "\n", "if", "torch", ".", "sum", "(", "target_label", "==", "1", ")", ":", "\n", "        ", "validity_loss", "+=", "F", ".", "hinge_embedding_loss", "(", "F", ".", "sigmoid", "(", "temp_1", "[", ":", ",", "1", "]", ")", ".", "to", "(", "cuda", ")", "-", "F", ".", "sigmoid", "(", "temp_1", "[", ":", ",", "0", "]", ")", ".", "to", "(", "cuda", ")", ",", "torch", ".", "tensor", "(", "-", "1", ")", ".", "to", "(", "cuda", ")", ",", "margin", ",", "reduction", "=", "'mean'", ")", "\n", "", "if", "torch", ".", "sum", "(", "target_label", "==", "0", ")", ":", "\n", "        ", "validity_loss", "+=", "F", ".", "hinge_embedding_loss", "(", "F", ".", "sigmoid", "(", "temp_0", "[", ":", ",", "0", "]", ")", ".", "to", "(", "cuda", ")", "-", "F", ".", "sigmoid", "(", "temp_0", "[", ":", ",", "1", "]", ")", ".", "to", "(", "cuda", ")", ",", "torch", ".", "tensor", "(", "-", "1", ")", ".", "to", "(", "cuda", ")", ",", "margin", ",", "reduction", "=", "'mean'", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "1", ",", "mc_samples", ")", ":", "\n", "        ", "x_pred", "=", "dm", "[", "i", "]", "\n", "\n", "recon_err", "+=", "-", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "x", "[", ":", ",", "s", ":", "-", "1", "]", "-", "x_pred", "[", ":", ",", "s", ":", "-", "1", "]", ")", ",", "axis", "=", "1", ")", "\n", "for", "key", "in", "normalise_weights", ".", "keys", "(", ")", ":", "\n", "# recon_err+= -(1/mad_feature_weights[d.encoded_feature_names[int(key)]])*(normalise_weights[key][1] - normalise_weights[key][0])*torch.abs( (x[:,key] - x_pred[:,key]))", "\n", "                ", "recon_err", "+=", "-", "(", "normalise_weights", "[", "key", "]", "[", "1", "]", "-", "normalise_weights", "[", "key", "]", "[", "0", "]", ")", "*", "torch", ".", "abs", "(", "x", "[", ":", ",", "key", "]", "-", "x_pred", "[", ":", ",", "key", "]", ")", "\n", "\n", "# Sum to 1 over the categorical indexes of a feature", "\n", "", "for", "v", "in", "model", ".", "encoded_categorical_feature_indexes", ":", "\n", "                ", "temp", "=", "-", "torch", ".", "abs", "(", "1.0", "-", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", "v", "[", "0", "]", ":", "v", "[", "-", "1", "]", "+", "1", "]", ",", "axis", "=", "1", ")", ")", "\n", "recon_err", "+=", "temp", "\n", "\n", "", "count", "+=", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", ":", "s", "]", "<", "0", ",", "axis", "=", "1", ")", ".", "float", "(", ")", "\n", "count", "+=", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", ":", "s", "]", ">", "1", ",", "axis", "=", "1", ")", ".", "float", "(", ")", "\n", "\n", "#Validity", "\n", "temp_logits", "=", "pred_model", "(", "x_pred", ")", "\n", "#validity_loss += -F.cross_entropy(temp_logits, target_label)", "\n", "temp_1", "=", "temp_logits", "[", "target_label", "==", "1", ",", ":", "]", "\n", "temp_0", "=", "temp_logits", "[", "target_label", "==", "0", ",", ":", "]", "\n", "\n", "if", "torch", ".", "sum", "(", "target_label", "==", "1", ")", ":", "\n", "            ", "validity_loss", "+=", "F", ".", "hinge_embedding_loss", "(", "F", ".", "sigmoid", "(", "temp_1", "[", ":", ",", "1", "]", ")", ".", "to", "(", "cuda", ")", "-", "F", ".", "sigmoid", "(", "temp_1", "[", ":", ",", "0", "]", ")", ".", "to", "(", "cuda", ")", ",", "torch", ".", "tensor", "(", "-", "1", ")", ".", "to", "(", "cuda", ")", ",", "margin", ",", "reduction", "=", "'mean'", ")", "\n", "", "if", "torch", ".", "sum", "(", "target_label", "==", "0", ")", ":", "\n", "            ", "validity_loss", "+=", "F", ".", "hinge_embedding_loss", "(", "F", ".", "sigmoid", "(", "temp_0", "[", ":", ",", "0", "]", ")", ".", "to", "(", "cuda", ")", "-", "F", ".", "sigmoid", "(", "temp_0", "[", ":", ",", "1", "]", ")", ".", "to", "(", "cuda", ")", ",", "torch", ".", "tensor", "(", "-", "1", ")", ".", "to", "(", "cuda", ")", ",", "margin", ",", "reduction", "=", "'mean'", ")", "\n", "\n", "", "", "recon_err", "=", "recon_err", "/", "mc_samples", "\n", "validity_loss", "=", "-", "1", "*", "validity_reg", "*", "validity_loss", "/", "mc_samples", "\n", "\n", "print", "(", "'Avg wrong cont dim: '", ",", "torch", ".", "mean", "(", "count", ")", "/", "mc_samples", ")", "\n", "print", "(", "'recon: '", ",", "-", "torch", ".", "mean", "(", "recon_err", ")", ",", "' KL: '", ",", "torch", ".", "mean", "(", "kl_divergence", ")", ",", "' Validity: '", ",", "-", "validity_loss", ")", "\n", "return", "-", "torch", ".", "mean", "(", "recon_err", "-", "kl_divergence", ")", "-", "validity_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.oracle-generative-cf.likelihood_score": [[105, 132], ["range", "len", "len", "len", "len", "good_score.append", "bad_score.append", "torch.mean", "torch.mean", "len", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.mean", "torch.mean", "torch.stack", "torch.stack", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "print", "torch.tensor", "torch.tensor", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "function", ["None"], ["", "def", "likelihood_score", "(", "x", ",", "label", ",", "mean", ")", ":", "\n", "        ", "good_score", "=", "[", "]", "\n", "bad_score", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "0", ",", "len", "(", "x", ")", ")", ":", "\n", "                ", "if", "label", "[", "idx", "]", "==", "1", ":", "\n", "# good_score.append( (x[idx] - mean[idx])*(1./logvar[idx])*(x[idx]-mean[idx] )) ", "\n", "# good_score.append( F.sigmoid( torch.exp( -.5 * ((x[idx] - mean[idx])*(1./logvar[idx])*(x[idx]-mean[idx]) )) )) ", "\n", "                        ", "good_score", ".", "append", "(", "torch", ".", "exp", "(", "-", ".5", "*", "(", "(", "x", "[", "idx", "]", "-", "mean", "[", "idx", "]", ")", "*", "(", "x", "[", "idx", "]", "-", "mean", "[", "idx", "]", ")", ")", ")", ")", "\n", "# good_score.append( torch.exp( -.5 * ((x[idx] - mean[idx])*(1./logvar[idx])*(x[idx]-mean[idx]) ))/torch.sqrt(torch.prod(logvar[idx])) ) ", "\n", "", "else", ":", "\n", "# bad_score.append( (x[idx] - mean[idx])*(1./logvar[idx])*(x[idx]-mean[idx]) )", "\n", "# bad_score.append( F.sigmoid( torch.exp( -.5 * ((x[idx] - mean[idx])*(1./logvar[idx])*(x[idx]-mean[idx]) ))  ))", "\n", "                        ", "bad_score", ".", "append", "(", "torch", ".", "exp", "(", "-", ".5", "*", "(", "(", "x", "[", "idx", "]", "-", "mean", "[", "idx", "]", ")", "*", "(", "x", "[", "idx", "]", "-", "mean", "[", "idx", "]", ")", ")", ")", ")", "\n", "# bad_score.append( torch.exp( -.5 * ((x[idx] - mean[idx])*(1./logvar[idx])*(x[idx]-mean[idx]) )  )/torch.sqrt(torch.prod(logvar[idx]))  )", "\n", "\n", "#     print( torch.mean(torch.stack(good_score)), torch.mean(torch.stack(bad_score)), (1-torch.mean(torch.stack(good_score))) + torch.mean(torch.stack(bad_score)))", "\n", "", "", "if", "len", "(", "good_score", ")", "and", "len", "(", "bad_score", ")", ":", "\n", "# print(torch.mean(torch.stack(good_score)), torch.mean(torch.stack(bad_score)))", "\n", "            ", "return", "(", "1", "-", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "good_score", ")", ")", ")", "+", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "bad_score", ")", ")", "\n", "#             return torch.mean(torch.stack(bad_score))", "\n", "", "elif", "len", "(", "good_score", ")", ":", "\n", "            ", "return", "(", "1", "-", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "good_score", ")", ")", ")", "\n", "", "elif", "len", "(", "bad_score", ")", ":", "\n", "            ", "return", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "bad_score", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Nope'", ")", "\n", "return", "torch", ".", "tensor", "(", "0.0", ")", "\n", "#     return torch.mean(torch.stack(bad_score))", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.oracle-generative-cf.train_cflabel_likelihood_loss": [[134, 179], ["numpy.array", "numpy.random.shuffle", "numpy.array_split", "numpy.array_split", "numpy.array_split", "range", "print", "range", "len", "optimizer.zero_grad", "torch.tensor().float().to", "torch.tensor().float().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().float().to", "torch.tensor().float().to", "model", "oracle-generative-cf.compute_loss", "oracle-generative-cf.likelihood_score", "range", "print", "compute_loss.item", "len", "torch.argmax", "torch.argmax", "oracle-generative-cf.likelihood_score", "likelihood_score.backward", "optimizer.step", "compute_loss.backward", "optimizer.step", "torch.tensor().float", "torch.tensor().float", "pred_model", "torch.tensor", "torch.tensor", "torch.tensor().float", "torch.tensor().float", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.timeit-base-generative-cf.compute_loss", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.timeit-oracle-generative-cf.likelihood_score", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.timeit-oracle-generative-cf.likelihood_score"], ["", "", "def", "train_cflabel_likelihood_loss", "(", "model", ",", "optimizer", ",", "normalise_weights", ",", "validity_reg", ",", "oracle_reg", ",", "margin", ",", "case", ",", "epochs", "=", "1000", ",", "batch_size", "=", "1024", ")", ":", "\n", "    ", "batch_num", "=", "0", "\n", "train_loss", "=", "0.0", "\n", "train_size", "=", "0", "\n", "\n", "rand", "=", "np", ".", "array", "(", "range", "(", "len", "(", "gen_cf_dataset", ")", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "rand", ")", "\n", "train_dataset_batches", "=", "np", ".", "array_split", "(", "gen_cf_dataset", "[", "rand", "]", ",", "gen_cf_dataset", ".", "shape", "[", "0", "]", "//", "batch_size", ",", "axis", "=", "0", ")", "\n", "train_inv_batches", "=", "np", ".", "array_split", "(", "gen_cf_inv", "[", "rand", "]", ",", "gen_cf_inv", ".", "shape", "[", "0", "]", "//", "batch_size", ",", "axis", "=", "0", ")", "\n", "train_label_batches", "=", "np", ".", "array_split", "(", "gen_cf_label", "[", "rand", "]", ",", "gen_cf_label", ".", "shape", "[", "0", "]", "//", "batch_size", ",", "axis", "=", "0", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "train_dataset_batches", ")", ")", ":", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "train_x", "=", "torch", ".", "tensor", "(", "train_inv_batches", "[", "i", "]", ")", ".", "float", "(", ")", ".", "to", "(", "cuda", ")", "\n", "train_y", "=", "1.0", "-", "torch", ".", "argmax", "(", "pred_model", "(", "train_x", ")", ",", "dim", "=", "1", ")", "\n", "train_cf_label", "=", "torch", ".", "tensor", "(", "train_label_batches", "[", "i", "]", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "cuda", ")", "\n", "gen_cf_x", "=", "torch", ".", "tensor", "(", "train_dataset_batches", "[", "i", "]", ")", ".", "float", "(", ")", ".", "to", "(", "cuda", ")", "\n", "train_size", "+=", "train_x", ".", "shape", "[", "0", "]", "\n", "\n", "out", "=", "model", "(", "train_x", ",", "train_y", ")", "\n", "loss", "=", "compute_loss", "(", "model", ",", "out", ",", "train_x", ",", "train_y", ",", "normalise_weights", ",", "validity_reg", ",", "margin", ")", "\n", "\n", "dm", "=", "out", "[", "'x_pred'", "]", "\n", "mc_samples", "=", "out", "[", "'mc_samples'", "]", "\n", "likelihood_loss", "=", "likelihood_score", "(", "gen_cf_x", ",", "train_cf_label", ",", "dm", "[", "0", "]", ")", "\n", "for", "j", "in", "range", "(", "1", ",", "mc_samples", ")", ":", "\n", "                    ", "likelihood_loss", "+=", "likelihood_score", "(", "gen_cf_x", ",", "train_cf_label", ",", "dm", "[", "j", "]", ")", "\n", "\n", "", "likelihood_loss", "=", "oracle_reg", "*", "likelihood_loss", "/", "mc_samples", "\n", "print", "(", "'Likelihood Score: '", ",", "likelihood_loss", ")", "\n", "\n", "loss", "+=", "likelihood_loss", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "\n", "batch_num", "+=", "1", "\n", "\n", "if", "case", ":", "\n", "                    ", "likelihood_loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "                    ", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "", "ret", "=", "train_loss", "/", "batch_num", "\n", "print", "(", "'Train Avg Loss: '", ",", "ret", ",", "train_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.oracle-generative-cf.test": [[180, 216], ["numpy.array_split", "random.randrange", "range", "print", "print", "len", "len", "torch.tensor().float().to", "torch.tensor().float().to", "torch.argmax", "torch.argmax", "model.compute_elbo", "train_y.cpu().numpy.cpu().numpy", "cf_label.cpu().numpy.cpu().numpy", "numpy.sum", "d.de_normalize_data", "d.de_normalize_data", "pred_model", "d.get_decoded_data", "d.get_decoded_data", "random.randrange", "print", "print", "print", "torch.tensor().float", "torch.tensor().float", "train_y.cpu().numpy.cpu", "cf_label.cpu().numpy.cpu", "d.de_normalize_data.detach().cpu().numpy", "d.de_normalize_data.detach().cpu().numpy", "torch.tensor", "torch.tensor", "d.de_normalize_data.detach().cpu", "d.de_normalize_data.detach().cpu", "d.de_normalize_data.detach", "d.de_normalize_data.detach"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.CF_VAE.compute_elbo", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data"], ["", "def", "test", "(", "model", ",", "train_dataset", ",", "epochs", "=", "1", ",", "batch_size", "=", "2048", ")", ":", "\n", "    ", "batch_num", "=", "0", "\n", "likelihood", "=", "0.0", "\n", "valid_cf_count", "=", "0", "\n", "train_size", "=", "0", "\n", "train_dataset", "=", "np", ".", "array_split", "(", "train_dataset", ",", "train_dataset", ".", "shape", "[", "0", "]", "//", "batch_size", ",", "axis", "=", "0", ")", "\n", "index", "=", "random", ".", "randrange", "(", "0", ",", "len", "(", "train_dataset", ")", ",", "1", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "train_dataset", ")", ")", ":", "\n", "\n", "        ", "train_x", "=", "train_dataset", "[", "i", "]", "\n", "train_x", "=", "torch", ".", "tensor", "(", "train_x", ")", ".", "float", "(", ")", ".", "to", "(", "cuda", ")", "\n", "train_y", "=", "torch", ".", "argmax", "(", "pred_model", "(", "train_x", ")", ",", "dim", "=", "1", ")", "\n", "train_size", "+=", "train_x", ".", "shape", "[", "0", "]", "\n", "\n", "recon_err", ",", "kl_err", ",", "x_true", ",", "x_pred", ",", "cf_label", "=", "model", ".", "compute_elbo", "(", "train_x", ",", "1.0", "-", "train_y", ",", "pred_model", ")", "\n", "likelihood", "+=", "recon_err", "-", "kl_err", "\n", "\n", "train_y", "=", "train_y", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "cf_label", "=", "cf_label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "valid_cf_count", "+=", "np", ".", "sum", "(", "train_y", "!=", "cf_label", ")", "\n", "\n", "x_pred", "=", "d", ".", "de_normalize_data", "(", "d", ".", "get_decoded_data", "(", "x_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "x_true", "=", "d", ".", "de_normalize_data", "(", "d", ".", "get_decoded_data", "(", "x_true", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "if", "batch_num", "==", "index", ":", "\n", "            ", "rand_idx", "=", "random", ".", "randrange", "(", "0", ",", "batch_size", "/", "2", "-", "1", ",", "1", ")", "\n", "print", "(", "'Likelihood: '", ",", "recon_err", ",", "kl_err", ",", "recon_err", "-", "kl_err", ")", "\n", "print", "(", "'X: '", ",", "x_true", ".", "iloc", "[", "rand_idx", ",", ":", "]", ")", "\n", "print", "(", "'Xpred: '", ",", "x_pred", ".", "iloc", "[", "rand_idx", ",", ":", "]", ")", "\n", "", "batch_num", "+=", "1", "\n", "\n", "", "ret", "=", "likelihood", "/", "batch_num", "\n", "print", "(", "'ELBO Avg: '", ",", "ret", ",", "train_size", ")", "\n", "print", "(", "'Valid CF Percentage: '", ",", "valid_cf_count", ",", "valid_cf_count", "/", "train_size", ")", "\n", "\n", "return", "ret", ",", "valid_cf_count", "/", "train_size", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.model-approx-generative-cf-bnlearn.de_normalise": [[29, 31], ["None"], "function", ["None"], ["def", "de_normalise", "(", "x", ",", "normalise_weights", ")", ":", "\n", "    ", "return", "(", "normalise_weights", "[", "1", "]", "-", "normalise_weights", "[", "0", "]", ")", "*", "x", "+", "normalise_weights", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.model-approx-generative-cf-bnlearn.traverse": [[32, 44], ["numpy.array_split", "range", "print", "len", "torch.tensor().float().to", "torch.tensor().float().to", "torch.argmax", "torch.argmax", "print", "pred_model", "numpy.unique", "torch.tensor().float", "torch.tensor().float", "torch.argmax.cpu", "torch.tensor", "torch.tensor"], "function", ["None"], ["", "def", "traverse", "(", "train_dataset", ",", "epochs", "=", "1", ",", "batch_size", "=", "128", ")", ":", "\n", "    ", "batch_num", "=", "0", "\n", "loss", "=", "0.0", "\n", "train_size", "=", "0", "\n", "train_dataset", "=", "np", ".", "array_split", "(", "train_dataset", ",", "train_dataset", ".", "shape", "[", "0", "]", "//", "batch_size", ",", "axis", "=", "0", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "train_dataset", ")", ")", ":", "\n", "        ", "train_x", "=", "train_dataset", "[", "i", "]", "\n", "train_x", "=", "torch", ".", "tensor", "(", "train_x", ")", ".", "float", "(", ")", ".", "to", "(", "cuda", ")", "\n", "train_y", "=", "torch", ".", "argmax", "(", "pred_model", "(", "train_x", ")", ",", "dim", "=", "1", ")", "\n", "train_size", "+=", "train_x", ".", "shape", "[", "0", "]", "\n", "print", "(", "np", ".", "unique", "(", "train_y", ".", "cpu", "(", ")", ",", "return_counts", "=", "True", ")", ")", "\n", "", "print", "(", "train_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.model-approx-generative-cf-bnlearn.ae_reconstruct_loss": [[45, 68], ["normalise_weights.keys", "torch.sum", "torch.sum", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "function", ["None"], ["", "def", "ae_reconstruct_loss", "(", "model", ",", "model_out", ",", "x", ",", "normalise_weights", ")", ":", "\n", "\n", "    ", "em", "=", "model_out", "[", "'em'", "]", "\n", "ev", "=", "model_out", "[", "'ev'", "]", "\n", "z", "=", "model_out", "[", "'z'", "]", "\n", "dm", "=", "model_out", "[", "'x_pred'", "]", "\n", "mc_samples", "=", "model_out", "[", "'mc_samples'", "]", "\n", "\n", "#Reconstruction Term", "\n", "x_pred", "=", "dm", "[", "0", "]", "\n", "s", "=", "model", ".", "encoded_start_cat", "\n", "recon_err", "=", "-", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "x", "[", ":", ",", "s", ":", "-", "1", "]", "-", "x_pred", "[", ":", ",", "s", ":", "-", "1", "]", ")", ",", "axis", "=", "1", ")", "\n", "for", "key", "in", "normalise_weights", ".", "keys", "(", ")", ":", "\n", "        ", "recon_err", "+=", "-", "(", "normalise_weights", "[", "key", "]", "[", "1", "]", "-", "normalise_weights", "[", "key", "]", "[", "0", "]", ")", "*", "torch", ".", "abs", "(", "x", "[", ":", ",", "key", "]", "-", "x_pred", "[", ":", ",", "key", "]", ")", "\n", "\n", "#     for i in range(1,mc_samples):", "\n", "#         x_pred = dm[i]        ", "\n", "#         recon_err += -torch.sum( torch.abs(x[:,s:-1] - x_pred[:,s:-1]), axis=1 )", "\n", "#         for key in normalise_weights.keys():", "\n", "#             recon_err+= -(1/mad_feature_weights[d.encoded_feature_names[int(key)]])*(normalise_weights[key][1] - normalise_weights[key][0])*torch.abs( (x[:,key] - x_pred[:,key]))", "\n", "\n", "#     recon_err = recon_err / mc_samples", "\n", "", "return", "-", "torch", ".", "mean", "(", "recon_err", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.model-approx-generative-cf-bnlearn.model_constraint_score": [[69, 84], ["torch.mean", "torch.mean", "range", "scripts.evaluation_functions.de_normalise", "range", "scripts.evaluation_functions.de_normalise", "scripts.evaluation_functions.de_normalise", "len", "len", "scripts.evaluation_functions.de_normalise", "scripts.evaluation_functions.de_normalise", "scripts.evaluation_functions.de_normalise"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf.de_normalise", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf.de_normalise", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf.de_normalise", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf.de_normalise", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf.de_normalise", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf.de_normalise"], ["", "def", "model_constraint_score", "(", "x", ",", "xpred", ",", "constrained_feat_indices", ",", "model_param", ",", "delta_case", ")", ":", "\n", "    ", "idx", "=", "constrained_feat_indices", "[", "0", "]", "\n", "\n", "if", "delta_case", ":", "\n", "        ", "score", "=", "de_normalise", "(", "xpred", "[", ":", ",", "idx", "]", ",", "normalise_weights", "[", "0", "]", ")", "-", "de_normalise", "(", "x", "[", ":", ",", "idx", "]", ",", "normalise_weights", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "constrained_feat_indices", ")", ")", ":", "\n", "            ", "idx", "=", "constrained_feat_indices", "[", "i", "]", "\n", "score", "+=", "-", "1", "*", "model_param", "[", "i", "]", "*", "(", "de_normalise", "(", "xpred", "[", ":", ",", "idx", "]", ",", "normalise_weights", "[", "idx", "]", ")", "-", "de_normalise", "(", "x", "[", ":", ",", "idx", "]", ",", "normalise_weights", "[", "idx", "]", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "score", "=", "de_normalise", "(", "xpred", "[", ":", ",", "idx", "]", ",", "normalise_weights", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "constrained_feat_indices", ")", ")", ":", "\n", "            ", "idx", "=", "constrained_feat_indices", "[", "i", "]", "\n", "score", "+=", "-", "1", "*", "model_param", "[", "i", "]", "*", "(", "de_normalise", "(", "xpred", "[", ":", ",", "idx", "]", ",", "normalise_weights", "[", "idx", "]", ")", ")", "\n", "\n", "", "", "return", "torch", ".", "mean", "(", "score", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.model-approx-generative-cf-bnlearn.linear_model_feature_approx": [[86, 138], ["len", "torch.optim.Adam", "numpy.array_split", "range", "print", "print", "len", "optim.Adam.zero_grad", "torch.tensor().float().to", "torch.tensor().float().to", "range", "torch.sum", "torch.sum", "model_loss.view.view", "range", "model_loss.view.backward", "optim.Adam.step", "torch.zeros().to", "torch.zeros().to", "len", "len", "torch.nn.functional.hinge_embedding_loss().to", "filter", "torch.tensor().float", "torch.tensor().float", "scripts.evaluation_functions.de_normalise", "torch.zeros", "torch.zeros", "scripts.evaluation_functions.de_normalise", "torch.nn.functional.hinge_embedding_loss", "torch.tensor", "torch.tensor", "torch.tensor().to", "torch.tensor().to", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf.de_normalise", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf.de_normalise"], ["", "def", "linear_model_feature_approx", "(", "train_dataset", ",", "constrained_feature_indices", ",", "param_tensor", ")", ":", "\n", "#Define the linear model parameters: [ effect, cause_1, cause_2, cause_3, ... ]", "\n", "    ", "num_params", "=", "len", "(", "constrained_feature_indices", ")", "\n", "wm", "=", "1e-2", "\n", "learning_rate", "=", "1e-3", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "[", "\n", "{", "'params'", ":", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "param_tensor", ")", ",", "'weight_decay'", ":", "wm", "}", "\n", "]", ",", "lr", "=", "learning_rate", ")", "\n", "\n", "batch_num", "=", "0", "\n", "train_loss", "=", "0.0", "\n", "train_size", "=", "0", "\n", "train_dataset", "=", "np", ".", "array_split", "(", "train_dataset", ",", "train_dataset", ".", "shape", "[", "0", "]", "//", "batch_size", ",", "axis", "=", "0", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "train_dataset", ")", ")", ":", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "train_x", "=", "torch", ".", "tensor", "(", "train_dataset", "[", "i", "]", ")", ".", "float", "(", ")", ".", "to", "(", "cuda", ")", "\n", "train_size", "+=", "train_x", ".", "shape", "[", "0", "]", "\n", "\n", "# Forward Pass of the model", "\n", "model_loss", "=", "torch", ".", "zeros", "(", "train_x", ".", "shape", "[", "0", "]", ")", ".", "to", "(", "cuda", ")", "+", "param_tensor", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "constrained_feature_indices", ")", ")", ":", "\n", "            ", "idx", "=", "constrained_feature_indices", "[", "i", "]", "\n", "if", "i", "==", "0", ":", "\n", "                ", "model_loss", "+=", "de_normalise", "(", "train_x", "[", ":", ",", "idx", "]", ",", "normalise_weights", "[", "idx", "]", ")", "\n", "", "else", ":", "\n", "                ", "model_loss", "+=", "-", "1", "*", "param_tensor", "[", "i", "]", "*", "de_normalise", "(", "train_x", "[", ":", ",", "idx", "]", ",", "normalise_weights", "[", "idx", "]", ")", "\n", "\n", "", "", "model_loss", "=", "torch", ".", "sum", "(", "model_loss", "**", "2", ",", "axis", "=", "0", ")", "\n", "model_loss", "=", "model_loss", ".", "view", "(", "1", ")", "\n", "#print('Model Loss: ', model_loss)", "\n", "\n", "# Constraint implications on model parameters", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "constrained_feature_indices", ")", ")", ":", "\n", "            ", "idx", "=", "constrained_feature_indices", "[", "i", "]", "\n", "reg", "=", "5", "\n", "\n", "hinge_loss", "=", "F", ".", "hinge_embedding_loss", "(", "param_tensor", "[", "i", "]", ",", "torch", ".", "tensor", "(", "-", "1", ")", ".", "to", "(", "cuda", ")", ",", "0", ")", ".", "to", "(", "cuda", ")", "\n", "#hinge_loss.data[hinge_loss>0.1]=0", "\n", "#print('Hinge Loss: ', param_tensor[idx], hinge_loss)", "\n", "model_loss", "+=", "reg", "*", "hinge_loss", "\n", "\n", "# Backward Pass", "\n", "", "train_loss", "+=", "model_loss", "\n", "model_loss", ".", "backward", "(", ")", "\n", "batch_num", "+=", "1", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "ret", "=", "train_loss", "\n", "print", "(", "'Train Avg Loss: '", ",", "ret", ",", "train_size", ")", "\n", "print", "(", "'Param: '", ",", "param_tensor", ")", "\n", "return", "param_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.model-approx-generative-cf-bnlearn.compute_root_node_loss": [[140, 210], ["normalise_weights.keys", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "pred_model", "torch.zeros().to", "torch.zeros().to", "torch.nn.functional.hinge_embedding_loss", "torch.nn.functional.hinge_embedding_loss", "range", "print", "print", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "normalise_weights.keys", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "pred_model", "torch.nn.functional.hinge_embedding_loss", "torch.nn.functional.hinge_embedding_loss", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "int", "torch.abs", "torch.abs", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.zeros", "torch.zeros", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.sum", "torch.sum", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.abs", "torch.abs", "int", "torch.abs", "torch.abs", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.log", "torch.log", "torch.sum", "torch.sum", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.abs", "torch.abs", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.sum", "torch.sum", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid"], ["", "def", "compute_root_node_loss", "(", "model", ",", "model_out", ",", "x", ",", "target_label", ",", "normalise_weights", ",", "validity_reg", ",", "margin", ",", "constraint_nodes", ")", ":", "\n", "\n", "    ", "em", "=", "model_out", "[", "'em'", "]", "\n", "ev", "=", "model_out", "[", "'ev'", "]", "\n", "z", "=", "model_out", "[", "'z'", "]", "\n", "dm", "=", "model_out", "[", "'x_pred'", "]", "\n", "mc_samples", "=", "model_out", "[", "'mc_samples'", "]", "\n", "\n", "#KL Divergence", "\n", "kl_divergence", "=", "0.5", "*", "torch", ".", "mean", "(", "em", "**", "2", "+", "ev", "-", "torch", ".", "log", "(", "ev", ")", "-", "1", ",", "axis", "=", "1", ")", "\n", "\n", "#Reconstruction Term", "\n", "#Proximity: L1 Loss", "\n", "x_pred", "=", "dm", "[", "0", "]", "\n", "s", "=", "model", ".", "encoded_start_cat", "\n", "recon_err", "=", "-", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "x", "[", ":", ",", "s", ":", "-", "1", "]", "-", "x_pred", "[", ":", ",", "s", ":", "-", "1", "]", ")", ",", "axis", "=", "1", ")", "\n", "for", "key", "in", "normalise_weights", ".", "keys", "(", ")", ":", "\n", "        ", "if", "int", "(", "key", ")", "not", "in", "constraint_nodes", ":", "\n", "# recon_err+= -(1/mad_feature_weights[d.encoded_feature_names[int(key)]])*(normalise_weights[key][1] - normalise_weights[key][0])*torch.abs(x[:,key] - x_pred[:,key])         ", "\n", "            ", "recon_err", "+=", "-", "(", "normalise_weights", "[", "key", "]", "[", "1", "]", "-", "normalise_weights", "[", "key", "]", "[", "0", "]", ")", "*", "torch", ".", "abs", "(", "x", "[", ":", ",", "key", "]", "-", "x_pred", "[", ":", ",", "key", "]", ")", "\n", "\n", "# Sum to 1 over the categorical indexes of a feature", "\n", "", "", "for", "v", "in", "model", ".", "encoded_categorical_feature_indexes", ":", "\n", "        ", "temp", "=", "-", "torch", ".", "abs", "(", "1.0", "-", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", "v", "[", "0", "]", ":", "v", "[", "-", "1", "]", "+", "1", "]", ",", "axis", "=", "1", ")", ")", "\n", "recon_err", "+=", "temp", "\n", "\n", "", "count", "=", "0", "\n", "count", "+=", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", ":", "s", "]", "<", "0", ",", "axis", "=", "1", ")", ".", "float", "(", ")", "\n", "count", "+=", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", ":", "s", "]", ">", "1", ",", "axis", "=", "1", ")", ".", "float", "(", ")", "\n", "\n", "#Validity         ", "\n", "temp_logits", "=", "pred_model", "(", "x_pred", ")", "\n", "#validity_loss = -F.cross_entropy(temp_logits, target_label)    ", "\n", "validity_loss", "=", "torch", ".", "zeros", "(", "1", ")", ".", "to", "(", "cuda", ")", "\n", "temp_1", "=", "temp_logits", "[", "target_label", "==", "1", ",", ":", "]", "\n", "temp_0", "=", "temp_logits", "[", "target_label", "==", "0", ",", ":", "]", "\n", "validity_loss", "+=", "F", ".", "hinge_embedding_loss", "(", "F", ".", "sigmoid", "(", "temp_1", "[", ":", ",", "1", "]", ")", ".", "to", "(", "cuda", ")", "-", "F", ".", "sigmoid", "(", "temp_1", "[", ":", ",", "0", "]", ")", ".", "to", "(", "cuda", ")", ",", "torch", ".", "tensor", "(", "-", "1", ")", ".", "to", "(", "cuda", ")", ",", "margin", ",", "reduction", "=", "'mean'", ")", "\n", "validity_loss", "+=", "F", ".", "hinge_embedding_loss", "(", "F", ".", "sigmoid", "(", "temp_0", "[", ":", ",", "0", "]", ")", ".", "to", "(", "cuda", ")", "-", "F", ".", "sigmoid", "(", "temp_0", "[", ":", ",", "1", "]", ")", ".", "to", "(", "cuda", ")", ",", "torch", ".", "tensor", "(", "-", "1", ")", ".", "to", "(", "cuda", ")", ",", "margin", ",", "reduction", "=", "'mean'", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "mc_samples", ")", ":", "\n", "        ", "x_pred", "=", "dm", "[", "i", "]", "\n", "\n", "recon_err", "+=", "-", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "x", "[", ":", ",", "s", ":", "-", "1", "]", "-", "x_pred", "[", ":", ",", "s", ":", "-", "1", "]", ")", ",", "axis", "=", "1", ")", "\n", "for", "key", "in", "normalise_weights", ".", "keys", "(", ")", ":", "\n", "            ", "if", "int", "(", "key", ")", "not", "in", "constraint_nodes", ":", "\n", "# recon_err+= -(1/mad_feature_weights[d.encoded_feature_names[int(key)]])*(normalise_weights[key][1] - normalise_weights[key][0])*torch.abs(x[:,key] - x_pred[:,key]) ", "\n", "                ", "recon_err", "+=", "-", "(", "normalise_weights", "[", "key", "]", "[", "1", "]", "-", "normalise_weights", "[", "key", "]", "[", "0", "]", ")", "*", "torch", ".", "abs", "(", "x", "[", ":", ",", "key", "]", "-", "x_pred", "[", ":", ",", "key", "]", ")", "\n", "\n", "# Sum to 1 over the categorical indexes of a feature", "\n", "", "", "for", "v", "in", "model", ".", "encoded_categorical_feature_indexes", ":", "\n", "            ", "temp", "=", "-", "torch", ".", "abs", "(", "1.0", "-", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", "v", "[", "0", "]", ":", "v", "[", "-", "1", "]", "+", "1", "]", ",", "axis", "=", "1", ")", ")", "\n", "recon_err", "+=", "temp", "\n", "\n", "", "count", "+=", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", ":", "s", "]", "<", "0", ",", "axis", "=", "1", ")", ".", "float", "(", ")", "\n", "count", "+=", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", ":", "s", "]", ">", "1", ",", "axis", "=", "1", ")", ".", "float", "(", ")", "\n", "\n", "#Validity", "\n", "temp_logits", "=", "pred_model", "(", "x_pred", ")", "\n", "#validity_loss += -F.cross_entropy(temp_logits, target_label)", "\n", "temp_1", "=", "temp_logits", "[", "target_label", "==", "1", ",", ":", "]", "\n", "temp_0", "=", "temp_logits", "[", "target_label", "==", "0", ",", ":", "]", "\n", "validity_loss", "+=", "F", ".", "hinge_embedding_loss", "(", "F", ".", "sigmoid", "(", "temp_1", "[", ":", ",", "1", "]", ")", ".", "to", "(", "cuda", ")", "-", "F", ".", "sigmoid", "(", "temp_1", "[", ":", ",", "0", "]", ")", ".", "to", "(", "cuda", ")", ",", "torch", ".", "tensor", "(", "-", "1", ")", ".", "to", "(", "cuda", ")", ",", "margin", ",", "reduction", "=", "'mean'", ")", "\n", "validity_loss", "+=", "F", ".", "hinge_embedding_loss", "(", "F", ".", "sigmoid", "(", "temp_0", "[", ":", ",", "0", "]", ")", ".", "to", "(", "cuda", ")", "-", "F", ".", "sigmoid", "(", "temp_0", "[", ":", ",", "1", "]", ")", ".", "to", "(", "cuda", ")", ",", "torch", ".", "tensor", "(", "-", "1", ")", ".", "to", "(", "cuda", ")", ",", "margin", ",", "reduction", "=", "'mean'", ")", "\n", "\n", "", "recon_err", "=", "recon_err", "/", "mc_samples", "\n", "validity_loss", "=", "-", "1", "*", "validity_reg", "*", "validity_loss", "/", "mc_samples", "\n", "\n", "print", "(", "'Avg wrong cont dim: '", ",", "torch", ".", "mean", "(", "count", ")", "/", "mc_samples", ")", "\n", "print", "(", "'recon: '", ",", "-", "torch", ".", "mean", "(", "recon_err", ")", ",", "' KL: '", ",", "torch", ".", "mean", "(", "kl_divergence", ")", ",", "' Validity: '", ",", "-", "validity_loss", ")", "\n", "return", "-", "torch", ".", "mean", "(", "recon_err", "-", "kl_divergence", ")", "-", "validity_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.model-approx-generative-cf-bnlearn.train_constraint_loss": [[211, 267], ["torch.tensor().float().to", "torch.tensor().float().to", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "enumerate", "print", "optimizer.zero_grad", "model", "model-approx-generative-cf-bnlearn.compute_root_node_loss", "range", "range", "print", "ae_model", "model-approx-generative-cf-bnlearn.ae_reconstruct_loss", "print", "compute_root_node_loss.item", "compute_root_node_loss.backward", "optimizer.step", "torch.tensor().float", "torch.tensor().float", "torch.argmax", "torch.argmax", "len", "range", "pred_model", "model-approx-generative-cf-bnlearn.model_constraint_score", "model-approx-generative-cf-bnlearn.model_constraint_score", "len", "model-approx-generative-cf-bnlearn.model_constraint_score", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.model-approx-generative-cf.compute_root_node_loss", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.auto-encoder-train.ae_model", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.ae-base-generative-cf.ae_reconstruct_loss", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.model-approx-generative-cf.model_constraint_score", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.model-approx-generative-cf.model_constraint_score", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.model-approx-generative-cf.model_constraint_score"], ["", "def", "train_constraint_loss", "(", "model", ",", "ae_model", ",", "feature_dist", ",", "constrained_feat_indices", ",", "train_dataset", ",", "optimizer", ",", "validity_reg", ",", "constraint_reg", ",", "ae_reg", ",", "normalise_weights", ",", "margin", ",", "delta_case", ",", "epochs", "=", "1000", ",", "batch_size", "=", "1024", ")", ":", "\n", "    ", "batch_num", "=", "0", "\n", "train_loss", "=", "0.0", "\n", "train_size", "=", "0", "\n", "#train_dataset= np.array_split( train_dataset, train_dataset.shape[0]//batch_size ,axis=0 )", "\n", "train_dataset", "=", "torch", ".", "tensor", "(", "train_dataset", ")", ".", "float", "(", ")", ".", "to", "(", "cuda", ")", "\n", "train_dataset", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ")", "\n", "good_cf_count", "=", "0", "\n", "#for i in range(len(train_dataset)):", "\n", "for", "train_x", "in", "enumerate", "(", "train_dataset", ")", ":", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "#         train_x = train_dataset[i]", "\n", "#         train_x= torch.tensor( train_x ).float() ", "\n", "train_x", "=", "train_x", "[", "1", "]", "\n", "train_y", "=", "1.0", "-", "torch", ".", "argmax", "(", "pred_model", "(", "train_x", ")", ",", "dim", "=", "1", ")", "\n", "train_size", "+=", "train_x", ".", "shape", "[", "0", "]", "\n", "\n", "out", "=", "model", "(", "train_x", ",", "train_y", ")", "\n", "#         constraint_nodes=[constrained_feat_indices[0]]", "\n", "constraint_nodes", "=", "[", "2", "]", "\n", "loss", "=", "compute_root_node_loss", "(", "model", ",", "out", ",", "train_x", ",", "train_y", ",", "normalise_weights", ",", "validity_reg", ",", "margin", ",", "constraint_nodes", ")", "\n", "\n", "dm", "=", "out", "[", "'x_pred'", "]", "\n", "mc_samples", "=", "out", "[", "'mc_samples'", "]", "\n", "x_pred", "=", "dm", "[", "0", "]", "\n", "\n", "#Loss from linear model for constrained nodes", "\n", "for", "idx", "in", "range", "(", "len", "(", "feature_dist", ")", ")", ":", "\n", "            ", "if", "idx", ":", "\n", "                ", "constraint_loss", "+=", "model_constraint_score", "(", "train_x", ",", "x_pred", ",", "constrained_feat_indices", "[", "idx", "]", ",", "feature_dist", "[", "idx", "]", ",", "delta_case", ")", "\n", "", "else", ":", "\n", "                ", "constraint_loss", "=", "model_constraint_score", "(", "train_x", ",", "x_pred", ",", "constrained_feat_indices", "[", "idx", "]", ",", "feature_dist", "[", "idx", "]", ",", "delta_case", ")", "\n", "", "", "for", "j", "in", "range", "(", "1", ",", "mc_samples", ")", ":", "\n", "            ", "x_pred", "=", "dm", "[", "j", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "feature_dist", ")", ")", ":", "\n", "                ", "constraint_loss", "+=", "model_constraint_score", "(", "train_x", ",", "x_pred", ",", "constrained_feat_indices", "[", "idx", "]", ",", "feature_dist", "[", "idx", "]", ",", "delta_case", ")", "\n", "", "", "constraint_loss", "=", "constraint_reg", "*", "constraint_loss", "/", "mc_samples", "\n", "\n", "print", "(", "'Constraint: '", ",", "constraint_loss", ")", "\n", "\n", "ae_out", "=", "ae_model", "(", "train_x", ")", "\n", "ae_loss", "=", "ae_reconstruct_loss", "(", "ae_model", ",", "ae_out", ",", "x_pred", ",", "normalise_weights", ")", "\n", "ae_loss", "=", "ae_reg", "*", "ae_loss", "\n", "print", "(", "'Auto Encoder: '", ",", "ae_loss", ")", "\n", "\n", "loss", "+=", "ae_loss", "\n", "loss", "+=", "constraint_loss", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "\n", "batch_num", "+=", "1", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "ret", "=", "train_loss", "\n", "print", "(", "'Train Avg Loss: '", ",", "ret", ",", "train_size", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.model-approx-generative-cf-bnlearn.test": [[268, 304], ["numpy.array_split", "random.randrange", "range", "print", "print", "len", "len", "torch.tensor().float().to", "torch.tensor().float().to", "torch.argmax", "torch.argmax", "model.compute_elbo", "train_y.cpu().numpy.cpu().numpy", "cf_label.cpu().numpy.cpu().numpy", "numpy.sum", "d.de_normalize_data", "d.de_normalize_data", "pred_model", "d.get_decoded_data", "d.get_decoded_data", "random.randrange", "print", "print", "print", "torch.tensor().float", "torch.tensor().float", "train_y.cpu().numpy.cpu", "cf_label.cpu().numpy.cpu", "d.de_normalize_data.detach().cpu().numpy", "d.de_normalize_data.detach().cpu().numpy", "torch.tensor", "torch.tensor", "d.de_normalize_data.detach().cpu", "d.de_normalize_data.detach().cpu", "d.de_normalize_data.detach", "d.de_normalize_data.detach"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.CF_VAE.compute_elbo", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data"], ["", "def", "test", "(", "model", ",", "train_dataset", ",", "epochs", "=", "1", ",", "batch_size", "=", "2048", ")", ":", "\n", "    ", "batch_num", "=", "0", "\n", "likelihood", "=", "0.0", "\n", "valid_cf_count", "=", "0", "\n", "train_size", "=", "0", "\n", "train_dataset", "=", "np", ".", "array_split", "(", "train_dataset", ",", "train_dataset", ".", "shape", "[", "0", "]", "//", "batch_size", ",", "axis", "=", "0", ")", "\n", "index", "=", "random", ".", "randrange", "(", "0", ",", "len", "(", "train_dataset", ")", ",", "1", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "train_dataset", ")", ")", ":", "\n", "\n", "        ", "train_x", "=", "train_dataset", "[", "i", "]", "\n", "train_x", "=", "torch", ".", "tensor", "(", "train_x", ")", ".", "float", "(", ")", ".", "to", "(", "cuda", ")", "\n", "train_y", "=", "torch", ".", "argmax", "(", "pred_model", "(", "train_x", ")", ",", "dim", "=", "1", ")", "\n", "train_size", "+=", "train_x", ".", "shape", "[", "0", "]", "\n", "\n", "recon_err", ",", "kl_err", ",", "x_true", ",", "x_pred", ",", "cf_label", "=", "model", ".", "compute_elbo", "(", "train_x", ",", "1.0", "-", "train_y", ",", "pred_model", ")", "\n", "likelihood", "+=", "recon_err", "-", "kl_err", "\n", "\n", "train_y", "=", "train_y", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "cf_label", "=", "cf_label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "valid_cf_count", "+=", "np", ".", "sum", "(", "train_y", "!=", "cf_label", ")", "\n", "\n", "x_pred", "=", "d", ".", "de_normalize_data", "(", "d", ".", "get_decoded_data", "(", "x_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "x_true", "=", "d", ".", "de_normalize_data", "(", "d", ".", "get_decoded_data", "(", "x_true", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "if", "batch_num", "==", "index", ":", "\n", "            ", "rand_idx", "=", "random", ".", "randrange", "(", "0", ",", "batch_size", "/", "2", "-", "1", ",", "1", ")", "\n", "print", "(", "'Likelihood: '", ",", "recon_err", ",", "kl_err", ",", "recon_err", "-", "kl_err", ")", "\n", "print", "(", "'X: '", ",", "x_true", ".", "iloc", "[", "rand_idx", ",", ":", "]", ")", "\n", "print", "(", "'Xpred: '", ",", "x_pred", ".", "iloc", "[", "rand_idx", ",", ":", "]", ")", "\n", "", "batch_num", "+=", "1", "\n", "\n", "", "ret", "=", "likelihood", "/", "batch_num", "\n", "print", "(", "'ELBO Avg: '", ",", "ret", ",", "train_size", ")", "\n", "print", "(", "'Valid CF Percentage: '", ",", "valid_cf_count", ",", "valid_cf_count", "/", "train_size", ")", "\n", "\n", "return", "ret", ",", "valid_cf_count", "/", "train_size", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.model-approx-generative-cf.de_normalise": [[29, 31], ["None"], "function", ["None"], ["def", "de_normalise", "(", "x", ",", "normalise_weights", ")", ":", "\n", "    ", "return", "(", "normalise_weights", "[", "1", "]", "-", "normalise_weights", "[", "0", "]", ")", "*", "x", "+", "normalise_weights", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.model-approx-generative-cf.traverse": [[32, 44], ["numpy.array_split", "range", "print", "len", "torch.tensor().float().to", "torch.tensor().float().to", "torch.argmax", "torch.argmax", "print", "pred_model", "numpy.unique", "torch.tensor().float", "torch.tensor().float", "torch.argmax.cpu", "torch.tensor", "torch.tensor"], "function", ["None"], ["", "def", "traverse", "(", "train_dataset", ",", "epochs", "=", "1", ",", "batch_size", "=", "128", ")", ":", "\n", "    ", "batch_num", "=", "0", "\n", "loss", "=", "0.0", "\n", "train_size", "=", "0", "\n", "train_dataset", "=", "np", ".", "array_split", "(", "train_dataset", ",", "train_dataset", ".", "shape", "[", "0", "]", "//", "batch_size", ",", "axis", "=", "0", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "train_dataset", ")", ")", ":", "\n", "        ", "train_x", "=", "train_dataset", "[", "i", "]", "\n", "train_x", "=", "torch", ".", "tensor", "(", "train_x", ")", ".", "float", "(", ")", ".", "to", "(", "cuda", ")", "\n", "train_y", "=", "torch", ".", "argmax", "(", "pred_model", "(", "train_x", ")", ",", "dim", "=", "1", ")", "\n", "train_size", "+=", "train_x", ".", "shape", "[", "0", "]", "\n", "print", "(", "np", ".", "unique", "(", "train_y", ".", "cpu", "(", ")", ",", "return_counts", "=", "True", ")", ")", "\n", "", "print", "(", "train_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.model-approx-generative-cf.ae_reconstruct_loss": [[45, 68], ["normalise_weights.keys", "torch.sum", "torch.sum", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "function", ["None"], ["", "def", "ae_reconstruct_loss", "(", "model", ",", "model_out", ",", "x", ",", "normalise_weights", ")", ":", "\n", "\n", "    ", "em", "=", "model_out", "[", "'em'", "]", "\n", "ev", "=", "model_out", "[", "'ev'", "]", "\n", "z", "=", "model_out", "[", "'z'", "]", "\n", "dm", "=", "model_out", "[", "'x_pred'", "]", "\n", "mc_samples", "=", "model_out", "[", "'mc_samples'", "]", "\n", "\n", "#Reconstruction Term", "\n", "x_pred", "=", "dm", "[", "0", "]", "\n", "s", "=", "model", ".", "encoded_start_cat", "\n", "recon_err", "=", "-", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "x", "[", ":", ",", "s", ":", "-", "1", "]", "-", "x_pred", "[", ":", ",", "s", ":", "-", "1", "]", ")", ",", "axis", "=", "1", ")", "\n", "for", "key", "in", "normalise_weights", ".", "keys", "(", ")", ":", "\n", "        ", "recon_err", "+=", "-", "(", "normalise_weights", "[", "key", "]", "[", "1", "]", "-", "normalise_weights", "[", "key", "]", "[", "0", "]", ")", "*", "torch", ".", "abs", "(", "x", "[", ":", ",", "key", "]", "-", "x_pred", "[", ":", ",", "key", "]", ")", "\n", "\n", "#     for i in range(1,mc_samples):", "\n", "#         x_pred = model.sample_latent_code(dm[i], dv[i])        ", "\n", "#         recon_err += -torch.sum( torch.abs(x[:,s:-1] - x_pred[:,s:-1]), axis=1 )", "\n", "#         for key in normalise_weights.keys():", "\n", "#             recon_err+= -(1/mad_feature_weights[d.encoded_feature_names[int(key)]])*(normalise_weights[key][1] - normalise_weights[key][0])*torch.abs( (x[:,key] - x_pred[:,key]))", "\n", "\n", "#     recon_err = recon_err / mc_samples", "\n", "", "return", "-", "torch", ".", "mean", "(", "recon_err", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.model-approx-generative-cf.model_constraint_score": [[69, 84], ["torch.mean", "torch.mean", "range", "scripts.evaluation_functions.de_normalise", "range", "scripts.evaluation_functions.de_normalise", "scripts.evaluation_functions.de_normalise", "len", "len", "scripts.evaluation_functions.de_normalise", "scripts.evaluation_functions.de_normalise", "scripts.evaluation_functions.de_normalise"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf.de_normalise", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf.de_normalise", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf.de_normalise", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf.de_normalise", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf.de_normalise", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf.de_normalise"], ["", "def", "model_constraint_score", "(", "x", ",", "xpred", ",", "constrained_feat_indices", ",", "model_param", ",", "delta_case", ")", ":", "\n", "    ", "idx", "=", "constrained_feat_indices", "[", "0", "]", "\n", "\n", "if", "delta_case", ":", "\n", "        ", "score", "=", "de_normalise", "(", "xpred", "[", ":", ",", "idx", "]", ",", "normalise_weights", "[", "0", "]", ")", "-", "de_normalise", "(", "x", "[", ":", ",", "idx", "]", ",", "normalise_weights", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "constrained_feat_indices", ")", ")", ":", "\n", "            ", "idx", "=", "constrained_feat_indices", "[", "i", "]", "\n", "score", "+=", "-", "1", "*", "model_param", "[", "i", "]", "*", "(", "de_normalise", "(", "xpred", "[", ":", ",", "idx", "]", ",", "normalise_weights", "[", "idx", "]", ")", "-", "de_normalise", "(", "x", "[", ":", ",", "idx", "]", ",", "normalise_weights", "[", "idx", "]", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "score", "=", "de_normalise", "(", "xpred", "[", ":", ",", "idx", "]", ",", "normalise_weights", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "constrained_feat_indices", ")", ")", ":", "\n", "            ", "idx", "=", "constrained_feat_indices", "[", "i", "]", "\n", "score", "+=", "-", "1", "*", "model_param", "[", "i", "]", "*", "(", "de_normalise", "(", "xpred", "[", ":", ",", "idx", "]", ",", "normalise_weights", "[", "idx", "]", ")", ")", "\n", "\n", "", "", "return", "torch", ".", "mean", "(", "score", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.model-approx-generative-cf.linear_model_feature_approx": [[86, 138], ["len", "torch.optim.Adam", "numpy.array_split", "range", "print", "print", "len", "optim.Adam.zero_grad", "torch.tensor().float().to", "torch.tensor().float().to", "range", "torch.sum", "torch.sum", "model_loss.view.view", "range", "model_loss.view.backward", "optim.Adam.step", "torch.zeros().to", "torch.zeros().to", "len", "len", "torch.nn.functional.hinge_embedding_loss().to", "filter", "torch.tensor().float", "torch.tensor().float", "scripts.evaluation_functions.de_normalise", "torch.zeros", "torch.zeros", "scripts.evaluation_functions.de_normalise", "torch.nn.functional.hinge_embedding_loss", "torch.tensor", "torch.tensor", "torch.tensor().to", "torch.tensor().to", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf.de_normalise", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf.de_normalise"], ["", "def", "linear_model_feature_approx", "(", "train_dataset", ",", "constrained_feature_indices", ",", "param_tensor", ")", ":", "\n", "#Define the linear model parameters: [ effect, cause_1, cause_2, cause_3, ... ]", "\n", "    ", "num_params", "=", "len", "(", "constrained_feature_indices", ")", "\n", "wm", "=", "1e-2", "\n", "learning_rate", "=", "1e-3", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "[", "\n", "{", "'params'", ":", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "param_tensor", ")", ",", "'weight_decay'", ":", "wm", "}", "\n", "]", ",", "lr", "=", "learning_rate", ")", "\n", "\n", "batch_num", "=", "0", "\n", "train_loss", "=", "0.0", "\n", "train_size", "=", "0", "\n", "train_dataset", "=", "np", ".", "array_split", "(", "train_dataset", ",", "train_dataset", ".", "shape", "[", "0", "]", "//", "batch_size", ",", "axis", "=", "0", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "train_dataset", ")", ")", ":", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "train_x", "=", "torch", ".", "tensor", "(", "train_dataset", "[", "i", "]", ")", ".", "float", "(", ")", ".", "to", "(", "cuda", ")", "\n", "train_size", "+=", "train_x", ".", "shape", "[", "0", "]", "\n", "\n", "# Forward Pass of the model", "\n", "model_loss", "=", "torch", ".", "zeros", "(", "train_x", ".", "shape", "[", "0", "]", ")", ".", "to", "(", "cuda", ")", "+", "param_tensor", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "constrained_feature_indices", ")", ")", ":", "\n", "            ", "idx", "=", "constrained_feature_indices", "[", "i", "]", "\n", "if", "i", "==", "0", ":", "\n", "                ", "model_loss", "+=", "de_normalise", "(", "train_x", "[", ":", ",", "idx", "]", ",", "normalise_weights", "[", "idx", "]", ")", "\n", "", "else", ":", "\n", "                ", "model_loss", "+=", "-", "1", "*", "param_tensor", "[", "i", "]", "*", "de_normalise", "(", "train_x", "[", ":", ",", "idx", "]", ",", "normalise_weights", "[", "idx", "]", ")", "\n", "\n", "", "", "model_loss", "=", "torch", ".", "sum", "(", "model_loss", "**", "2", ",", "axis", "=", "0", ")", "\n", "model_loss", "=", "model_loss", ".", "view", "(", "1", ")", "\n", "#print('Model Loss: ', model_loss)", "\n", "\n", "# Constraint implications on model parameters", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "constrained_feature_indices", ")", ")", ":", "\n", "            ", "idx", "=", "constrained_feature_indices", "[", "i", "]", "\n", "reg", "=", "1", "\n", "\n", "hinge_loss", "=", "F", ".", "hinge_embedding_loss", "(", "param_tensor", "[", "i", "]", ",", "torch", ".", "tensor", "(", "-", "1", ")", ".", "to", "(", "cuda", ")", ",", "0", ")", ".", "to", "(", "cuda", ")", "\n", "#hinge_loss.data[hinge_loss>0.1]=0", "\n", "#print('Hinge Loss: ', param_tensor[idx], hinge_loss)", "\n", "model_loss", "+=", "reg", "*", "hinge_loss", "\n", "\n", "# Backward Pass", "\n", "", "train_loss", "+=", "model_loss", "\n", "model_loss", ".", "backward", "(", ")", "\n", "batch_num", "+=", "1", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "ret", "=", "train_loss", "\n", "print", "(", "'Train Avg Loss: '", ",", "ret", ",", "train_size", ")", "\n", "print", "(", "'Param: '", ",", "param_tensor", ")", "\n", "return", "param_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.model-approx-generative-cf.compute_root_node_loss": [[140, 210], ["normalise_weights.keys", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "pred_model", "torch.zeros().to", "torch.zeros().to", "torch.nn.functional.hinge_embedding_loss", "torch.nn.functional.hinge_embedding_loss", "range", "print", "print", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "normalise_weights.keys", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "pred_model", "torch.nn.functional.hinge_embedding_loss", "torch.nn.functional.hinge_embedding_loss", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "int", "torch.abs", "torch.abs", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.zeros", "torch.zeros", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.sum", "torch.sum", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.abs", "torch.abs", "int", "torch.abs", "torch.abs", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.log", "torch.log", "torch.sum", "torch.sum", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.abs", "torch.abs", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.sum", "torch.sum", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid"], ["", "def", "compute_root_node_loss", "(", "model", ",", "model_out", ",", "x", ",", "target_label", ",", "normalise_weights", ",", "validity_reg", ",", "constraint_nodes", ",", "margin", ")", ":", "\n", "\n", "    ", "em", "=", "model_out", "[", "'em'", "]", "\n", "ev", "=", "model_out", "[", "'ev'", "]", "\n", "z", "=", "model_out", "[", "'z'", "]", "\n", "dm", "=", "model_out", "[", "'x_pred'", "]", "\n", "mc_samples", "=", "model_out", "[", "'mc_samples'", "]", "\n", "\n", "#KL Divergence", "\n", "kl_divergence", "=", "0.5", "*", "torch", ".", "mean", "(", "em", "**", "2", "+", "ev", "-", "torch", ".", "log", "(", "ev", ")", "-", "1", ",", "axis", "=", "1", ")", "\n", "\n", "#Reconstruction Term", "\n", "#Proximity: L1 Loss", "\n", "x_pred", "=", "dm", "[", "0", "]", "\n", "s", "=", "model", ".", "encoded_start_cat", "\n", "recon_err", "=", "-", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "x", "[", ":", ",", "s", ":", "-", "1", "]", "-", "x_pred", "[", ":", ",", "s", ":", "-", "1", "]", ")", ",", "axis", "=", "1", ")", "\n", "for", "key", "in", "normalise_weights", ".", "keys", "(", ")", ":", "\n", "        ", "if", "int", "(", "key", ")", "not", "in", "constraint_nodes", ":", "\n", "# recon_err+= -(1/mad_feature_weights[d.encoded_feature_names[int(key)]])*(normalise_weights[key][1] - normalise_weights[key][0])*torch.abs(x[:,key] - x_pred[:,key])         ", "\n", "            ", "recon_err", "+=", "-", "(", "normalise_weights", "[", "key", "]", "[", "1", "]", "-", "normalise_weights", "[", "key", "]", "[", "0", "]", ")", "*", "torch", ".", "abs", "(", "x", "[", ":", ",", "key", "]", "-", "x_pred", "[", ":", ",", "key", "]", ")", "\n", "\n", "# Sum to 1 over the categorical indexes of a feature", "\n", "", "", "for", "v", "in", "model", ".", "encoded_categorical_feature_indexes", ":", "\n", "        ", "temp", "=", "-", "torch", ".", "abs", "(", "1.0", "-", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", "v", "[", "0", "]", ":", "v", "[", "-", "1", "]", "+", "1", "]", ",", "axis", "=", "1", ")", ")", "\n", "recon_err", "+=", "temp", "\n", "\n", "", "count", "=", "0", "\n", "count", "+=", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", ":", "s", "]", "<", "0", ",", "axis", "=", "1", ")", ".", "float", "(", ")", "\n", "count", "+=", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", ":", "s", "]", ">", "1", ",", "axis", "=", "1", ")", ".", "float", "(", ")", "\n", "\n", "#Validity         ", "\n", "temp_logits", "=", "pred_model", "(", "x_pred", ")", "\n", "#validity_loss = -F.cross_entropy(temp_logits, target_label)", "\n", "validity_loss", "=", "torch", ".", "zeros", "(", "1", ")", ".", "to", "(", "cuda", ")", "\n", "temp_1", "=", "temp_logits", "[", "target_label", "==", "1", ",", ":", "]", "\n", "temp_0", "=", "temp_logits", "[", "target_label", "==", "0", ",", ":", "]", "\n", "validity_loss", "+=", "F", ".", "hinge_embedding_loss", "(", "F", ".", "sigmoid", "(", "temp_1", "[", ":", ",", "1", "]", ")", ".", "to", "(", "cuda", ")", "-", "F", ".", "sigmoid", "(", "temp_1", "[", ":", ",", "0", "]", ")", ".", "to", "(", "cuda", ")", ",", "torch", ".", "tensor", "(", "-", "1", ")", ".", "to", "(", "cuda", ")", ",", "margin", ",", "reduction", "=", "'mean'", ")", "\n", "validity_loss", "+=", "F", ".", "hinge_embedding_loss", "(", "F", ".", "sigmoid", "(", "temp_0", "[", ":", ",", "0", "]", ")", ".", "to", "(", "cuda", ")", "-", "F", ".", "sigmoid", "(", "temp_0", "[", ":", ",", "1", "]", ")", ".", "to", "(", "cuda", ")", ",", "torch", ".", "tensor", "(", "-", "1", ")", ".", "to", "(", "cuda", ")", ",", "margin", ",", "reduction", "=", "'mean'", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "mc_samples", ")", ":", "\n", "        ", "x_pred", "=", "dm", "[", "i", "]", "\n", "\n", "recon_err", "+=", "-", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "x", "[", ":", ",", "s", ":", "-", "1", "]", "-", "x_pred", "[", ":", ",", "s", ":", "-", "1", "]", ")", ",", "axis", "=", "1", ")", "\n", "for", "key", "in", "normalise_weights", ".", "keys", "(", ")", ":", "\n", "            ", "if", "int", "(", "key", ")", "not", "in", "constraint_nodes", ":", "\n", "# recon_err+= -(1/mad_feature_weights[d.encoded_feature_names[int(key)]])*(normalise_weights[key][1] - normalise_weights[key][0])*torch.abs(x[:,key] - x_pred[:,key]) ", "\n", "                ", "recon_err", "+=", "-", "(", "normalise_weights", "[", "key", "]", "[", "1", "]", "-", "normalise_weights", "[", "key", "]", "[", "0", "]", ")", "*", "torch", ".", "abs", "(", "x", "[", ":", ",", "key", "]", "-", "x_pred", "[", ":", ",", "key", "]", ")", "\n", "\n", "# Sum to 1 over the categorical indexes of a feature", "\n", "", "", "for", "v", "in", "model", ".", "encoded_categorical_feature_indexes", ":", "\n", "            ", "temp", "=", "-", "torch", ".", "abs", "(", "1.0", "-", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", "v", "[", "0", "]", ":", "v", "[", "-", "1", "]", "+", "1", "]", ",", "axis", "=", "1", ")", ")", "\n", "recon_err", "+=", "temp", "\n", "\n", "", "count", "+=", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", ":", "s", "]", "<", "0", ",", "axis", "=", "1", ")", ".", "float", "(", ")", "\n", "count", "+=", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", ":", "s", "]", ">", "1", ",", "axis", "=", "1", ")", ".", "float", "(", ")", "\n", "\n", "#Validity", "\n", "temp_logits", "=", "pred_model", "(", "x_pred", ")", "\n", "#validity_loss += -F.cross_entropy(temp_logits, target_label)", "\n", "temp_1", "=", "temp_logits", "[", "target_label", "==", "1", ",", ":", "]", "\n", "temp_0", "=", "temp_logits", "[", "target_label", "==", "0", ",", ":", "]", "\n", "validity_loss", "+=", "F", ".", "hinge_embedding_loss", "(", "F", ".", "sigmoid", "(", "temp_1", "[", ":", ",", "1", "]", ")", ".", "to", "(", "cuda", ")", "-", "F", ".", "sigmoid", "(", "temp_1", "[", ":", ",", "0", "]", ")", ".", "to", "(", "cuda", ")", ",", "torch", ".", "tensor", "(", "-", "1", ")", ".", "to", "(", "cuda", ")", ",", "margin", ",", "reduction", "=", "'mean'", ")", "\n", "validity_loss", "+=", "F", ".", "hinge_embedding_loss", "(", "F", ".", "sigmoid", "(", "temp_0", "[", ":", ",", "0", "]", ")", ".", "to", "(", "cuda", ")", "-", "F", ".", "sigmoid", "(", "temp_0", "[", ":", ",", "1", "]", ")", ".", "to", "(", "cuda", ")", ",", "torch", ".", "tensor", "(", "-", "1", ")", ".", "to", "(", "cuda", ")", ",", "margin", ",", "reduction", "=", "'mean'", ")", "\n", "\n", "", "recon_err", "=", "recon_err", "/", "mc_samples", "\n", "validity_loss", "=", "-", "1", "*", "validity_reg", "*", "validity_loss", "/", "mc_samples", "\n", "\n", "print", "(", "'Avg wrong cont dim: '", ",", "torch", ".", "mean", "(", "count", ")", "/", "mc_samples", ")", "\n", "print", "(", "'recon: '", ",", "-", "torch", ".", "mean", "(", "recon_err", ")", ",", "' KL: '", ",", "torch", ".", "mean", "(", "kl_divergence", ")", ",", "' Validity: '", ",", "-", "validity_loss", ")", "\n", "return", "-", "torch", ".", "mean", "(", "recon_err", "-", "kl_divergence", ")", "-", "validity_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.model-approx-generative-cf.train_constraint_loss": [[211, 260], ["torch.tensor().float().to", "torch.tensor().float().to", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "enumerate", "print", "optimizer.zero_grad", "model", "model-approx-generative-cf.compute_root_node_loss", "model-approx-generative-cf.model_constraint_score", "range", "print", "ae_model", "model-approx-generative-cf.ae_reconstruct_loss", "print", "compute_root_node_loss.item", "compute_root_node_loss.backward", "optimizer.step", "torch.tensor().float", "torch.tensor().float", "torch.argmax", "torch.argmax", "model-approx-generative-cf.model_constraint_score", "pred_model", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.model-approx-generative-cf.compute_root_node_loss", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.model-approx-generative-cf.model_constraint_score", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.auto-encoder-train.ae_model", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.ae-base-generative-cf.ae_reconstruct_loss", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.model-approx-generative-cf.model_constraint_score"], ["", "def", "train_constraint_loss", "(", "model", ",", "ae_model", ",", "feature_dist", ",", "constrained_feat_indices", ",", "train_dataset", ",", "optimizer", ",", "validity_reg", ",", "constraint_reg", ",", "ae_reg", ",", "margin", ",", "normalise_weights", ",", "delta_case", ",", "epochs", "=", "1000", ",", "batch_size", "=", "1024", ")", ":", "\n", "    ", "batch_num", "=", "0", "\n", "train_loss", "=", "0.0", "\n", "train_size", "=", "0", "\n", "#train_dataset= np.array_split( train_dataset, train_dataset.shape[0]//batch_size ,axis=0 )", "\n", "train_dataset", "=", "torch", ".", "tensor", "(", "train_dataset", ")", ".", "float", "(", ")", ".", "to", "(", "cuda", ")", "\n", "train_dataset", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ")", "\n", "good_cf_count", "=", "0", "\n", "#     for i in range(len(train_dataset)):", "\n", "for", "train_x", "in", "enumerate", "(", "train_dataset", ")", ":", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "#         train_x = train_dataset[i]", "\n", "#         train_x= torch.tensor( train_x ).float()", "\n", "train_x", "=", "train_x", "[", "1", "]", "\n", "train_y", "=", "1.0", "-", "torch", ".", "argmax", "(", "pred_model", "(", "train_x", ")", ",", "dim", "=", "1", ")", "\n", "train_size", "+=", "train_x", ".", "shape", "[", "0", "]", "\n", "\n", "out", "=", "model", "(", "train_x", ",", "train_y", ")", "\n", "#         constraint_nodes=[constrained_feat_indices[0]]", "\n", "constraint_nodes", "=", "[", "2", "]", "\n", "loss", "=", "compute_root_node_loss", "(", "model", ",", "out", ",", "train_x", ",", "train_y", ",", "normalise_weights", ",", "validity_reg", ",", "constraint_nodes", ",", "margin", ")", "\n", "\n", "dm", "=", "out", "[", "'x_pred'", "]", "\n", "mc_samples", "=", "out", "[", "'mc_samples'", "]", "\n", "x_pred", "=", "dm", "[", "0", "]", "\n", "constraint_loss", "=", "model_constraint_score", "(", "train_x", ",", "x_pred", ",", "constrained_feat_indices", ",", "feature_dist", ",", "delta_case", ")", "\n", "for", "j", "in", "range", "(", "1", ",", "mc_samples", ")", ":", "\n", "            ", "x_pred", "=", "dm", "[", "j", "]", "\n", "constraint_loss", "+=", "model_constraint_score", "(", "train_x", ",", "x_pred", ",", "constrained_feat_indices", ",", "feature_dist", ",", "delta_case", ")", "\n", "", "constraint_loss", "=", "constraint_reg", "*", "constraint_loss", "/", "mc_samples", "\n", "\n", "print", "(", "'Constraint: '", ",", "constraint_loss", ")", "\n", "\n", "ae_out", "=", "ae_model", "(", "train_x", ")", "\n", "ae_loss", "=", "ae_reconstruct_loss", "(", "ae_model", ",", "ae_out", ",", "x_pred", ",", "normalise_weights", ")", "\n", "ae_loss", "=", "ae_reg", "*", "ae_loss", "\n", "print", "(", "'Auto Encoder: '", ",", "ae_loss", ")", "\n", "\n", "loss", "+=", "ae_loss", "\n", "loss", "+=", "constraint_loss", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "\n", "batch_num", "+=", "1", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "ret", "=", "train_loss", "\n", "print", "(", "'Train Avg Loss: '", ",", "ret", ",", "train_size", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.model-approx-generative-cf.test": [[261, 297], ["numpy.array_split", "random.randrange", "range", "print", "print", "len", "len", "torch.tensor().float().to", "torch.tensor().float().to", "torch.argmax", "torch.argmax", "model.compute_elbo", "train_y.cpu().numpy.cpu().numpy", "cf_label.cpu().numpy.cpu().numpy", "numpy.sum", "d.de_normalize_data", "d.de_normalize_data", "pred_model", "d.get_decoded_data", "d.get_decoded_data", "random.randrange", "print", "print", "print", "torch.tensor().float", "torch.tensor().float", "train_y.cpu().numpy.cpu", "cf_label.cpu().numpy.cpu", "d.de_normalize_data.detach().cpu().numpy", "d.de_normalize_data.detach().cpu().numpy", "torch.tensor", "torch.tensor", "d.de_normalize_data.detach().cpu", "d.de_normalize_data.detach().cpu", "d.de_normalize_data.detach", "d.de_normalize_data.detach"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.CF_VAE.compute_elbo", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data"], ["", "def", "test", "(", "model", ",", "train_dataset", ",", "epochs", "=", "1", ",", "batch_size", "=", "2048", ")", ":", "\n", "    ", "batch_num", "=", "0", "\n", "likelihood", "=", "0.0", "\n", "valid_cf_count", "=", "0", "\n", "train_size", "=", "0", "\n", "train_dataset", "=", "np", ".", "array_split", "(", "train_dataset", ",", "train_dataset", ".", "shape", "[", "0", "]", "//", "batch_size", ",", "axis", "=", "0", ")", "\n", "index", "=", "random", ".", "randrange", "(", "0", ",", "len", "(", "train_dataset", ")", ",", "1", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "train_dataset", ")", ")", ":", "\n", "\n", "        ", "train_x", "=", "train_dataset", "[", "i", "]", "\n", "train_x", "=", "torch", ".", "tensor", "(", "train_x", ")", ".", "float", "(", ")", ".", "to", "(", "cuda", ")", "\n", "train_y", "=", "torch", ".", "argmax", "(", "pred_model", "(", "train_x", ")", ",", "dim", "=", "1", ")", "\n", "train_size", "+=", "train_x", ".", "shape", "[", "0", "]", "\n", "\n", "recon_err", ",", "kl_err", ",", "x_true", ",", "x_pred", ",", "cf_label", "=", "model", ".", "compute_elbo", "(", "train_x", ",", "1.0", "-", "train_y", ",", "pred_model", ")", "\n", "likelihood", "+=", "recon_err", "-", "kl_err", "\n", "\n", "train_y", "=", "train_y", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "cf_label", "=", "cf_label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "valid_cf_count", "+=", "np", ".", "sum", "(", "train_y", "!=", "cf_label", ")", "\n", "\n", "x_pred", "=", "d", ".", "de_normalize_data", "(", "d", ".", "get_decoded_data", "(", "x_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "x_true", "=", "d", ".", "de_normalize_data", "(", "d", ".", "get_decoded_data", "(", "x_true", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "if", "batch_num", "==", "index", ":", "\n", "            ", "rand_idx", "=", "random", ".", "randrange", "(", "0", ",", "batch_size", "/", "2", "-", "1", ",", "1", ")", "\n", "print", "(", "'Likelihood: '", ",", "recon_err", ",", "kl_err", ",", "recon_err", "-", "kl_err", ")", "\n", "print", "(", "'X: '", ",", "x_true", ".", "iloc", "[", "rand_idx", ",", ":", "]", ")", "\n", "print", "(", "'Xpred: '", ",", "x_pred", ".", "iloc", "[", "rand_idx", ",", ":", "]", ")", "\n", "", "batch_num", "+=", "1", "\n", "\n", "", "ret", "=", "likelihood", "/", "batch_num", "\n", "print", "(", "'ELBO Avg: '", ",", "ret", ",", "train_size", ")", "\n", "print", "(", "'Valid CF Percentage: '", ",", "valid_cf_count", ",", "valid_cf_count", "/", "train_size", ")", "\n", "\n", "return", "ret", ",", "valid_cf_count", "/", "train_size", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.contrastive_explanations.gen_explanation": [[43, 45], ["cem.explain"], "function", ["None"], ["def", "gen_explanation", "(", "cem", ",", "explain_x", ")", ":", "\n", "    ", "return", "cem", ".", "explain", "(", "explain_x", ",", "verbose", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.contrastive_explanations.wrapper": [[47, 51], ["func"], "function", ["None"], ["", "def", "wrapper", "(", "func", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "def", "wrapped", "(", ")", ":", "\n", "        ", "return", "func", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "return", "wrapped", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.contrastive_explanations.nll": [[174, 180], ["tensorflow.keras.backend.sum", "tensorflow.keras.losses.mean_squared_error"], "function", ["None"], ["def", "nll", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "\"\"\" Negative log likelihood (Bernoulli). \"\"\"", "\n", "\n", "# keras.losses.binary_crossentropy gives the mean", "\n", "# over the last axis. we require the sum", "\n", "return", "K", ".", "sum", "(", "keras", ".", "losses", ".", "mean_squared_error", "(", "y_true", ",", "y_pred", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.unary-ed-const-generative-cf.traverse": [[84, 96], ["numpy.array_split", "range", "print", "len", "torch.tensor().float().to", "torch.tensor().float().to", "torch.argmax", "torch.argmax", "print", "pred_model", "numpy.unique", "torch.tensor().float", "torch.tensor().float", "torch.argmax.cpu", "torch.tensor", "torch.tensor"], "function", ["None"], ["def", "traverse", "(", "train_dataset", ",", "epochs", "=", "1", ",", "batch_size", "=", "128", ")", ":", "\n", "    ", "batch_num", "=", "0", "\n", "loss", "=", "0.0", "\n", "train_size", "=", "0", "\n", "train_dataset", "=", "np", ".", "array_split", "(", "train_dataset", ",", "train_dataset", ".", "shape", "[", "0", "]", "//", "batch_size", ",", "axis", "=", "0", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "train_dataset", ")", ")", ":", "\n", "        ", "train_x", "=", "train_dataset", "[", "i", "]", "\n", "train_x", "=", "torch", ".", "tensor", "(", "train_x", ")", ".", "float", "(", ")", ".", "to", "(", "cuda", ")", "\n", "train_y", "=", "torch", ".", "argmax", "(", "pred_model", "(", "train_x", ")", ",", "dim", "=", "1", ")", "\n", "train_size", "+=", "train_x", ".", "shape", "[", "0", "]", "\n", "print", "(", "np", ".", "unique", "(", "train_y", ".", "cpu", "(", ")", ",", "return_counts", "=", "True", ")", ")", "\n", "", "print", "(", "train_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.unary-ed-const-generative-cf.compute_loss": [[97, 165], ["normalise_weights.keys", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "pred_model", "torch.zeros().to", "torch.zeros().to", "torch.nn.functional.hinge_embedding_loss", "torch.nn.functional.hinge_embedding_loss", "range", "print", "print", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "normalise_weights.keys", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "pred_model", "torch.nn.functional.hinge_embedding_loss", "torch.nn.functional.hinge_embedding_loss", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.zeros", "torch.zeros", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.sum", "torch.sum", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.log", "torch.log", "torch.sum", "torch.sum", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.sum", "torch.sum", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid"], ["", "def", "compute_loss", "(", "model", ",", "model_out", ",", "x", ",", "target_label", ",", "normalise_weights", ",", "validity_reg", ",", "margin", ")", ":", "\n", "\n", "    ", "em", "=", "model_out", "[", "'em'", "]", "\n", "ev", "=", "model_out", "[", "'ev'", "]", "\n", "z", "=", "model_out", "[", "'z'", "]", "\n", "dm", "=", "model_out", "[", "'x_pred'", "]", "\n", "mc_samples", "=", "model_out", "[", "'mc_samples'", "]", "\n", "\n", "#KL Divergence", "\n", "kl_divergence", "=", "0.5", "*", "torch", ".", "mean", "(", "em", "**", "2", "+", "ev", "-", "torch", ".", "log", "(", "ev", ")", "-", "1", ",", "axis", "=", "1", ")", "\n", "\n", "#Reconstruction Term", "\n", "#Proximity: L1 Loss", "\n", "x_pred", "=", "dm", "[", "0", "]", "\n", "s", "=", "model", ".", "encoded_start_cat", "\n", "recon_err", "=", "-", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "x", "[", ":", ",", "s", ":", "-", "1", "]", "-", "x_pred", "[", ":", ",", "s", ":", "-", "1", "]", ")", ",", "axis", "=", "1", ")", "\n", "for", "key", "in", "normalise_weights", ".", "keys", "(", ")", ":", "\n", "# recon_err+= -(1/mad_feature_weights[d.encoded_feature_names[int(key)]])*(normalise_weights[key][1] - normalise_weights[key][0])*torch.abs(x[:,key] - x_pred[:,key]) ", "\n", "        ", "recon_err", "+=", "-", "(", "normalise_weights", "[", "key", "]", "[", "1", "]", "-", "normalise_weights", "[", "key", "]", "[", "0", "]", ")", "*", "torch", ".", "abs", "(", "x", "[", ":", ",", "key", "]", "-", "x_pred", "[", ":", ",", "key", "]", ")", "\n", "\n", "# Sum to 1 over the categorical indexes of a feature", "\n", "", "for", "v", "in", "model", ".", "encoded_categorical_feature_indexes", ":", "\n", "        ", "temp", "=", "-", "torch", ".", "abs", "(", "1.0", "-", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", "v", "[", "0", "]", ":", "v", "[", "-", "1", "]", "+", "1", "]", ",", "axis", "=", "1", ")", ")", "\n", "recon_err", "+=", "temp", "\n", "\n", "", "count", "=", "0", "\n", "count", "+=", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", ":", "s", "]", "<", "0", ",", "axis", "=", "1", ")", ".", "float", "(", ")", "\n", "count", "+=", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", ":", "s", "]", ">", "1", ",", "axis", "=", "1", ")", ".", "float", "(", ")", "\n", "\n", "#Validity         ", "\n", "temp_logits", "=", "pred_model", "(", "x_pred", ")", "\n", "#     validity_loss = -F.cross_entropy(temp_logits, target_label)    ", "\n", "validity_loss", "=", "torch", ".", "zeros", "(", "1", ")", ".", "to", "(", "cuda", ")", "\n", "temp_1", "=", "temp_logits", "[", "target_label", "==", "1", ",", ":", "]", "\n", "temp_0", "=", "temp_logits", "[", "target_label", "==", "0", ",", ":", "]", "\n", "validity_loss", "+=", "F", ".", "hinge_embedding_loss", "(", "F", ".", "sigmoid", "(", "temp_1", "[", ":", ",", "1", "]", ")", ".", "to", "(", "cuda", ")", "-", "F", ".", "sigmoid", "(", "temp_1", "[", ":", ",", "0", "]", ")", ".", "to", "(", "cuda", ")", ",", "torch", ".", "tensor", "(", "-", "1", ")", ".", "to", "(", "cuda", ")", ",", "margin", ",", "reduction", "=", "'mean'", ")", "\n", "validity_loss", "+=", "F", ".", "hinge_embedding_loss", "(", "F", ".", "sigmoid", "(", "temp_0", "[", ":", ",", "0", "]", ")", ".", "to", "(", "cuda", ")", "-", "F", ".", "sigmoid", "(", "temp_0", "[", ":", ",", "1", "]", ")", ".", "to", "(", "cuda", ")", ",", "torch", ".", "tensor", "(", "-", "1", ")", ".", "to", "(", "cuda", ")", ",", "margin", ",", "reduction", "=", "'mean'", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "mc_samples", ")", ":", "\n", "        ", "x_pred", "=", "dm", "[", "i", "]", "\n", "\n", "recon_err", "+=", "-", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "x", "[", ":", ",", "s", ":", "-", "1", "]", "-", "x_pred", "[", ":", ",", "s", ":", "-", "1", "]", ")", ",", "axis", "=", "1", ")", "\n", "for", "key", "in", "normalise_weights", ".", "keys", "(", ")", ":", "\n", "# recon_err+= -(1/mad_feature_weights[d.encoded_feature_names[int(key)]])*(normalise_weights[key][1] - normalise_weights[key][0])*torch.abs( (x[:,key] - x_pred[:,key]))", "\n", "            ", "recon_err", "+=", "-", "(", "normalise_weights", "[", "key", "]", "[", "1", "]", "-", "normalise_weights", "[", "key", "]", "[", "0", "]", ")", "*", "torch", ".", "abs", "(", "x", "[", ":", ",", "key", "]", "-", "x_pred", "[", ":", ",", "key", "]", ")", "\n", "\n", "# Sum to 1 over the categorical indexes of a feature", "\n", "", "for", "v", "in", "model", ".", "encoded_categorical_feature_indexes", ":", "\n", "            ", "temp", "=", "-", "torch", ".", "abs", "(", "1.0", "-", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", "v", "[", "0", "]", ":", "v", "[", "-", "1", "]", "+", "1", "]", ",", "axis", "=", "1", ")", ")", "\n", "recon_err", "+=", "temp", "\n", "\n", "", "count", "+=", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", ":", "s", "]", "<", "0", ",", "axis", "=", "1", ")", ".", "float", "(", ")", "\n", "count", "+=", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", ":", "s", "]", ">", "1", ",", "axis", "=", "1", ")", ".", "float", "(", ")", "\n", "\n", "#Validity", "\n", "temp_logits", "=", "pred_model", "(", "x_pred", ")", "\n", "#         validity_loss += -F.cross_entropy(temp_logits, target_label)", "\n", "temp_1", "=", "temp_logits", "[", "target_label", "==", "1", ",", ":", "]", "\n", "temp_0", "=", "temp_logits", "[", "target_label", "==", "0", ",", ":", "]", "\n", "validity_loss", "+=", "F", ".", "hinge_embedding_loss", "(", "F", ".", "sigmoid", "(", "temp_1", "[", ":", ",", "1", "]", ")", ".", "to", "(", "cuda", ")", "-", "F", ".", "sigmoid", "(", "temp_1", "[", ":", ",", "0", "]", ")", ".", "to", "(", "cuda", ")", ",", "torch", ".", "tensor", "(", "-", "1", ")", ".", "to", "(", "cuda", ")", ",", "margin", ",", "reduction", "=", "'mean'", ")", "\n", "validity_loss", "+=", "F", ".", "hinge_embedding_loss", "(", "F", ".", "sigmoid", "(", "temp_0", "[", ":", ",", "0", "]", ")", ".", "to", "(", "cuda", ")", "-", "F", ".", "sigmoid", "(", "temp_0", "[", ":", ",", "1", "]", ")", ".", "to", "(", "cuda", ")", ",", "torch", ".", "tensor", "(", "-", "1", ")", ".", "to", "(", "cuda", ")", ",", "margin", ",", "reduction", "=", "'mean'", ")", "\n", "\n", "", "recon_err", "=", "recon_err", "/", "mc_samples", "\n", "validity_loss", "=", "-", "1", "*", "validity_reg", "*", "validity_loss", "/", "mc_samples", "\n", "\n", "print", "(", "'Avg wrong cont dim: '", ",", "torch", ".", "mean", "(", "count", ")", "/", "mc_samples", ")", "\n", "print", "(", "'recon: '", ",", "-", "torch", ".", "mean", "(", "recon_err", ")", ",", "' KL: '", ",", "torch", ".", "mean", "(", "kl_divergence", ")", ",", "' Validity: '", ",", "-", "validity_loss", ")", "\n", "return", "-", "torch", ".", "mean", "(", "recon_err", "-", "kl_divergence", ")", "-", "validity_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.unary-ed-const-generative-cf.train_constraint_loss": [[167, 219], ["torch.tensor().float().to", "torch.tensor().float().to", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "enumerate", "print", "optimizer.zero_grad", "model", "unary-ed-const-generative-cf.compute_loss", "torch.nn.functional.hinge_embedding_loss().to", "ed_dict.keys", "range", "print", "torch.mean", "torch.mean", "compute_loss.item", "compute_loss.backward", "optimizer.step", "torch.tensor().float", "torch.tensor().float", "torch.argmax", "torch.argmax", "torch.nn.functional.hinge_embedding_loss().to", "ed_dict.keys", "torch.mean", "torch.mean", "pred_model", "torch.nn.functional.hinge_embedding_loss", "torch.mean", "torch.mean", "torch.tensor", "torch.tensor", "torch.tensor().to", "torch.tensor().to", "torch.nn.functional.hinge_embedding_loss", "torch.mean", "torch.mean", "torch.tensor().to", "torch.tensor().to", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.timeit-base-generative-cf.compute_loss"], ["", "def", "train_constraint_loss", "(", "model", ",", "train_dataset", ",", "optimizer", ",", "normalise_weights", ",", "validity_reg", ",", "constraint_reg", ",", "margin", ",", "epochs", "=", "1000", ",", "batch_size", "=", "1024", ")", ":", "\n", "    ", "batch_num", "=", "0", "\n", "train_loss", "=", "0.0", "\n", "train_size", "=", "0", "\n", "\n", "#train_dataset= np.array_split( train_dataset, train_dataset.shape[0]//batch_size ,axis=0 )", "\n", "train_dataset", "=", "torch", ".", "tensor", "(", "train_dataset", ")", ".", "float", "(", ")", ".", "to", "(", "cuda", ")", "\n", "train_dataset", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ")", "\n", "good_cf_count", "=", "0", "\n", "#    for i in range(len(train_dataset)):", "\n", "for", "train_x", "in", "enumerate", "(", "train_dataset", ")", ":", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "#train_x = train_dataset[i]", "\n", "#train_x= torch.tensor( train_x ).float().to(cuda) ", "\n", "train_x", "=", "train_x", "[", "1", "]", "\n", "train_y", "=", "1.0", "-", "torch", ".", "argmax", "(", "pred_model", "(", "train_x", ")", ",", "dim", "=", "1", ")", "\n", "train_size", "+=", "train_x", ".", "shape", "[", "0", "]", "\n", "\n", "out", "=", "model", "(", "train_x", ",", "train_y", ")", "\n", "loss", "=", "compute_loss", "(", "model", ",", "out", ",", "train_x", ",", "train_y", ",", "normalise_weights", ",", "validity_reg", ",", "margin", ")", "\n", "\n", "dm", "=", "out", "[", "'x_pred'", "]", "\n", "mc_samples", "=", "out", "[", "'mc_samples'", "]", "\n", "x_pred", "=", "dm", "[", "0", "]", "\n", "\n", "#Age should not decrease", "\n", "constraint_loss", "=", "F", ".", "hinge_embedding_loss", "(", "x_pred", "[", ":", ",", "0", "]", "-", "train_x", "[", ":", ",", "0", "]", ",", "torch", ".", "tensor", "(", "-", "1", ")", ".", "to", "(", "cuda", ")", ",", "0", ")", ".", "to", "(", "cuda", ")", "\n", "#Ed should not decrease", "\n", "for", "key", "in", "ed_dict", ".", "keys", "(", ")", ":", "\n", "            ", "constraint_loss", "+=", "-", "0.05", "*", "ed_dict", "[", "key", "]", "*", "torch", ".", "mean", "(", "x_pred", "[", ":", ",", "key", "]", "-", "train_x", "[", ":", ",", "key", "]", ")", "\n", "\n", "", "for", "j", "in", "range", "(", "1", ",", "mc_samples", ")", ":", "\n", "            ", "x_pred", "=", "dm", "[", "j", "]", "\n", "constraint_loss", "+=", "F", ".", "hinge_embedding_loss", "(", "x_pred", "[", ":", ",", "0", "]", "-", "train_x", "[", ":", ",", "0", "]", ",", "torch", ".", "tensor", "(", "-", "1", ")", ".", "to", "(", "cuda", ")", ",", "0", ")", ".", "to", "(", "cuda", ")", "\n", "for", "key", "in", "ed_dict", ".", "keys", "(", ")", ":", "\n", "                ", "constraint_loss", "+=", "-", "0.05", "*", "ed_dict", "[", "key", "]", "*", "torch", ".", "mean", "(", "x_pred", "[", ":", ",", "key", "]", "-", "train_x", "[", ":", ",", "key", "]", ")", "\n", "\n", "", "", "constraint_loss", "=", "constraint_loss", "/", "mc_samples", "\n", "\n", "constraint_loss", "=", "constraint_reg", "*", "constraint_loss", "\n", "print", "(", "'Constraint: '", ",", "constraint_loss", ",", "torch", ".", "mean", "(", "constraint_loss", ")", ")", "\n", "\n", "loss", "+=", "torch", ".", "mean", "(", "constraint_loss", ")", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "\n", "batch_num", "+=", "1", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "ret", "=", "train_loss", "\n", "print", "(", "'Train Avg Loss: '", ",", "ret", ",", "train_size", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.unary-ed-const-generative-cf.test": [[221, 257], ["numpy.array_split", "random.randrange", "range", "print", "print", "len", "len", "torch.tensor().float().to", "torch.tensor().float().to", "torch.argmax", "torch.argmax", "model.compute_elbo", "train_y.cpu().numpy.cpu().numpy", "cf_label.cpu().numpy.cpu().numpy", "numpy.sum", "d.de_normalize_data", "d.de_normalize_data", "pred_model", "d.get_decoded_data", "d.get_decoded_data", "random.randrange", "print", "print", "print", "torch.tensor().float", "torch.tensor().float", "train_y.cpu().numpy.cpu", "cf_label.cpu().numpy.cpu", "d.de_normalize_data.cpu().detach().numpy", "d.de_normalize_data.cpu().detach().numpy", "torch.tensor", "torch.tensor", "d.de_normalize_data.cpu().detach", "d.de_normalize_data.cpu().detach", "d.de_normalize_data.cpu", "d.de_normalize_data.cpu"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.CF_VAE.compute_elbo", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data"], ["", "def", "test", "(", "model", ",", "train_dataset", ",", "epochs", "=", "1", ",", "batch_size", "=", "2048", ")", ":", "\n", "    ", "batch_num", "=", "0", "\n", "likelihood", "=", "0.0", "\n", "valid_cf_count", "=", "0", "\n", "train_size", "=", "0", "\n", "train_dataset", "=", "np", ".", "array_split", "(", "train_dataset", ",", "train_dataset", ".", "shape", "[", "0", "]", "//", "batch_size", ",", "axis", "=", "0", ")", "\n", "index", "=", "random", ".", "randrange", "(", "0", ",", "len", "(", "train_dataset", ")", ",", "1", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "train_dataset", ")", ")", ":", "\n", "\n", "        ", "train_x", "=", "train_dataset", "[", "i", "]", "\n", "train_x", "=", "torch", ".", "tensor", "(", "train_x", ")", ".", "float", "(", ")", ".", "to", "(", "cuda", ")", "\n", "train_y", "=", "torch", ".", "argmax", "(", "pred_model", "(", "train_x", ")", ",", "dim", "=", "1", ")", "\n", "train_size", "+=", "train_x", ".", "shape", "[", "0", "]", "\n", "\n", "recon_err", ",", "kl_err", ",", "x_true", ",", "x_pred", ",", "cf_label", "=", "model", ".", "compute_elbo", "(", "train_x", ",", "1.0", "-", "train_y", ",", "pred_model", ")", "\n", "likelihood", "+=", "recon_err", "-", "kl_err", "\n", "\n", "train_y", "=", "train_y", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "cf_label", "=", "cf_label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "valid_cf_count", "+=", "np", ".", "sum", "(", "train_y", "!=", "cf_label", ")", "\n", "\n", "x_pred", "=", "d", ".", "de_normalize_data", "(", "d", ".", "get_decoded_data", "(", "x_pred", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "x_true", "=", "d", ".", "de_normalize_data", "(", "d", ".", "get_decoded_data", "(", "x_true", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "if", "batch_num", "==", "index", ":", "\n", "            ", "rand_idx", "=", "random", ".", "randrange", "(", "0", ",", "batch_size", "/", "2", "-", "1", ",", "1", ")", "\n", "print", "(", "'Likelihood: '", ",", "recon_err", ",", "kl_err", ",", "recon_err", "-", "kl_err", ")", "\n", "print", "(", "'X: '", ",", "x_true", ".", "iloc", "[", "rand_idx", ",", ":", "]", ")", "\n", "print", "(", "'Xpred: '", ",", "x_pred", ".", "iloc", "[", "rand_idx", ",", ":", "]", ")", "\n", "", "batch_num", "+=", "1", "\n", "\n", "", "ret", "=", "likelihood", "/", "batch_num", "\n", "print", "(", "'ELBO Avg: '", ",", "ret", ",", "train_size", ")", "\n", "print", "(", "'Valid CF Percentage: '", ",", "valid_cf_count", ",", "valid_cf_count", "/", "train_size", ")", "\n", "\n", "return", "ret", ",", "valid_cf_count", "/", "train_size", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf.de_normalise": [[30, 32], ["None"], "function", ["None"], ["def", "de_normalise", "(", "x", ",", "normalise_weights", ")", ":", "\n", "    ", "return", "(", "normalise_weights", "[", "1", "]", "-", "normalise_weights", "[", "0", "]", ")", "*", "x", "+", "normalise_weights", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf.traverse": [[33, 45], ["numpy.array_split", "range", "print", "len", "torch.tensor().float().to", "torch.tensor().float().to", "torch.argmax", "torch.argmax", "print", "pred_model", "numpy.unique", "torch.tensor().float", "torch.tensor().float", "torch.argmax.cpu", "torch.tensor", "torch.tensor"], "function", ["None"], ["", "def", "traverse", "(", "train_dataset", ",", "epochs", "=", "1", ",", "batch_size", "=", "128", ")", ":", "\n", "    ", "batch_num", "=", "0", "\n", "loss", "=", "0.0", "\n", "train_size", "=", "0", "\n", "train_dataset", "=", "np", ".", "array_split", "(", "train_dataset", ",", "train_dataset", ".", "shape", "[", "0", "]", "//", "batch_size", ",", "axis", "=", "0", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "train_dataset", ")", ")", ":", "\n", "        ", "train_x", "=", "train_dataset", "[", "i", "]", "\n", "train_x", "=", "torch", ".", "tensor", "(", "train_x", ")", ".", "float", "(", ")", ".", "to", "(", "cuda", ")", "\n", "train_y", "=", "torch", ".", "argmax", "(", "pred_model", "(", "train_x", ")", ",", "dim", "=", "1", ")", "\n", "train_size", "+=", "train_x", ".", "shape", "[", "0", "]", "\n", "print", "(", "np", ".", "unique", "(", "train_y", ".", "cpu", "(", ")", ",", "return_counts", "=", "True", ")", ")", "\n", "", "print", "(", "train_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf.scm_change_score": [[46, 58], ["torch.mean", "torch.mean", "torch.abs", "torch.abs", "scripts.evaluation_functions.de_normalise", "torch.abs", "torch.abs", "scripts.evaluation_functions.de_normalise", "scripts.evaluation_functions.de_normalise", "scripts.evaluation_functions.de_normalise", "scripts.evaluation_functions.de_normalise", "scripts.evaluation_functions.de_normalise", "scripts.evaluation_functions.de_normalise", "scripts.evaluation_functions.de_normalise", "scripts.evaluation_functions.de_normalise"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf.de_normalise", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf.de_normalise", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf.de_normalise", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf.de_normalise", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf.de_normalise", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf.de_normalise", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf.de_normalise", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf.de_normalise", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf.de_normalise"], ["", "def", "scm_change_score", "(", "x", ",", "xpred", ",", "normalise_weights", ",", "delta_case", ")", ":", "\n", "\n", "    ", "if", "delta_case", ":", "\n", "        ", "delta_f", "=", "10", "*", "(", "(", "de_normalise", "(", "xpred", "[", ":", ",", "0", "]", ",", "normalise_weights", "[", "0", "]", ")", "+", "de_normalise", "(", "xpred", "[", ":", ",", "1", "]", ",", "normalise_weights", "[", "1", "]", ")", ")", "**", "2", ")", "/", "180", "**", "2", "-", "10", "*", "(", "(", "de_normalise", "(", "x", "[", ":", ",", "0", "]", ",", "normalise_weights", "[", "0", "]", ")", "+", "de_normalise", "(", "x", "[", ":", ",", "1", "]", ",", "normalise_weights", "[", "1", "]", ")", ")", "**", "2", ")", "/", "180", "**", "2", "\n", "delta_x3", "=", "de_normalise", "(", "xpred", "[", ":", ",", "2", "]", ",", "normalise_weights", "[", "2", "]", ")", "-", "de_normalise", "(", "x", "[", ":", ",", "2", "]", ",", "normalise_weights", "[", "2", "]", ")", "\n", "score", "=", "torch", ".", "abs", "(", "delta_x3", "-", "delta_f", ")", "\n", "", "else", ":", "\n", "        ", "delta_f", "=", "10", "*", "(", "(", "de_normalise", "(", "xpred", "[", ":", ",", "0", "]", ",", "normalise_weights", "[", "0", "]", ")", "+", "de_normalise", "(", "xpred", "[", ":", ",", "1", "]", ",", "normalise_weights", "[", "1", "]", ")", ")", "**", "2", ")", "/", "180", "**", "2", "+", "10", "\n", "delta_x3", "=", "de_normalise", "(", "xpred", "[", ":", ",", "2", "]", ",", "normalise_weights", "[", "2", "]", ")", "\n", "score", "=", "torch", ".", "abs", "(", "delta_x3", "-", "delta_f", ")", "\n", "\n", "", "return", "torch", ".", "mean", "(", "score", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf.compute_change_proximal_loss": [[59, 130], ["normalise_weights.keys", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "pred_model", "torch.zeros().to", "torch.zeros().to", "torch.nn.functional.hinge_embedding_loss", "torch.nn.functional.hinge_embedding_loss", "range", "print", "print", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "normalise_weights.keys", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "pred_model", "torch.nn.functional.hinge_embedding_loss", "torch.nn.functional.hinge_embedding_loss", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.zeros", "torch.zeros", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.sum", "torch.sum", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.log", "torch.log", "int", "torch.sum", "torch.sum", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.abs", "torch.abs", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "int", "torch.sum", "torch.sum", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid"], ["", "def", "compute_change_proximal_loss", "(", "model", ",", "model_out", ",", "x", ",", "target_label", ",", "normalise_weights", ",", "validity_reg", ",", "margin", ",", "constraint_nodes", ")", ":", "\n", "\n", "    ", "em", "=", "model_out", "[", "'em'", "]", "\n", "ev", "=", "model_out", "[", "'ev'", "]", "\n", "z", "=", "model_out", "[", "'z'", "]", "\n", "dm", "=", "model_out", "[", "'x_pred'", "]", "\n", "mc_samples", "=", "model_out", "[", "'mc_samples'", "]", "\n", "\n", "#KL Divergence", "\n", "kl_divergence", "=", "0.5", "*", "torch", ".", "mean", "(", "em", "**", "2", "+", "ev", "-", "torch", ".", "log", "(", "ev", ")", "-", "1", ",", "axis", "=", "1", ")", "\n", "\n", "#Reconstruction Term", "\n", "#Proximity: L1 Loss", "\n", "x_pred", "=", "dm", "[", "0", "]", "\n", "s", "=", "model", ".", "encoded_start_cat", "\n", "recon_err", "=", "-", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "x", "[", ":", ",", "s", ":", "-", "1", "]", "-", "x_pred", "[", ":", ",", "s", ":", "-", "1", "]", ")", ",", "axis", "=", "1", ")", "\n", "for", "key", "in", "normalise_weights", ".", "keys", "(", ")", ":", "\n", "        ", "if", "d", ".", "encoded_feature_names", "[", "int", "(", "key", ")", "]", "not", "in", "constraint_nodes", ":", "\n", "# recon_err+= -(1/mad_feature_weights[d.encoded_feature_names[int(key)]])*(normalise_weights[key][1] - normalise_weights[key][0])*torch.abs(x[:,key] - x_pred[:,key]) ", "\n", "            ", "recon_err", "+=", "-", "(", "normalise_weights", "[", "key", "]", "[", "1", "]", "-", "normalise_weights", "[", "key", "]", "[", "0", "]", ")", "*", "torch", ".", "abs", "(", "x", "[", ":", ",", "key", "]", "-", "x_pred", "[", ":", ",", "key", "]", ")", "\n", "\n", "# Sum to 1 over the categorical indexes of a feature", "\n", "", "", "for", "v", "in", "model", ".", "encoded_categorical_feature_indexes", ":", "\n", "        ", "temp", "=", "-", "torch", ".", "abs", "(", "1.0", "-", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", "v", "[", "0", "]", ":", "v", "[", "-", "1", "]", "+", "1", "]", ",", "axis", "=", "1", ")", ")", "\n", "recon_err", "+=", "temp", "\n", "\n", "", "count", "=", "0", "\n", "count", "+=", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", ":", "s", "]", "<", "0", ",", "axis", "=", "1", ")", ".", "float", "(", ")", "\n", "count", "+=", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", ":", "s", "]", ">", "1", ",", "axis", "=", "1", ")", ".", "float", "(", ")", "\n", "\n", "#Validity         ", "\n", "temp_logits", "=", "pred_model", "(", "x_pred", ")", "\n", "#validity_loss = -F.cross_entropy(temp_logits, target_label)    ", "\n", "validity_loss", "=", "torch", ".", "zeros", "(", "1", ")", ".", "to", "(", "cuda", ")", "\n", "temp_1", "=", "temp_logits", "[", "target_label", "==", "1", ",", ":", "]", "\n", "temp_0", "=", "temp_logits", "[", "target_label", "==", "0", ",", ":", "]", "\n", "validity_loss", "+=", "F", ".", "hinge_embedding_loss", "(", "F", ".", "sigmoid", "(", "temp_1", "[", ":", ",", "1", "]", ")", ".", "to", "(", "cuda", ")", "-", "F", ".", "sigmoid", "(", "temp_1", "[", ":", ",", "0", "]", ")", ".", "to", "(", "cuda", ")", ",", "torch", ".", "tensor", "(", "-", "1", ")", ".", "to", "(", "cuda", ")", ",", "margin", ",", "reduction", "=", "'mean'", ")", "\n", "validity_loss", "+=", "F", ".", "hinge_embedding_loss", "(", "F", ".", "sigmoid", "(", "temp_0", "[", ":", ",", "0", "]", ")", ".", "to", "(", "cuda", ")", "-", "F", ".", "sigmoid", "(", "temp_0", "[", ":", ",", "1", "]", ")", ".", "to", "(", "cuda", ")", ",", "torch", ".", "tensor", "(", "-", "1", ")", ".", "to", "(", "cuda", ")", ",", "margin", ",", "reduction", "=", "'mean'", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "mc_samples", ")", ":", "\n", "        ", "x_pred", "=", "dm", "[", "i", "]", "\n", "\n", "recon_err", "+=", "-", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "x", "[", ":", ",", "s", ":", "-", "1", "]", "-", "x_pred", "[", ":", ",", "s", ":", "-", "1", "]", ")", ",", "axis", "=", "1", ")", "\n", "for", "key", "in", "normalise_weights", ".", "keys", "(", ")", ":", "\n", "            ", "if", "d", ".", "encoded_feature_names", "[", "int", "(", "key", ")", "]", "not", "in", "constraint_nodes", ":", "\n", "# recon_err+= -(1/mad_feature_weights[d.encoded_feature_names[int(key)]])*(normalise_weights[key][1] - normalise_weights[key][0])*torch.abs(x[:,key] - x_pred[:,key]) ", "\n", "                ", "recon_err", "+=", "-", "(", "normalise_weights", "[", "key", "]", "[", "1", "]", "-", "normalise_weights", "[", "key", "]", "[", "0", "]", ")", "*", "torch", ".", "abs", "(", "x", "[", ":", ",", "key", "]", "-", "x_pred", "[", ":", ",", "key", "]", ")", "\n", "\n", "# Sum to 1 over the categorical indexes of a feature", "\n", "", "", "for", "v", "in", "model", ".", "encoded_categorical_feature_indexes", ":", "\n", "            ", "temp", "=", "-", "torch", ".", "abs", "(", "1.0", "-", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", "v", "[", "0", "]", ":", "v", "[", "-", "1", "]", "+", "1", "]", ",", "axis", "=", "1", ")", ")", "\n", "recon_err", "+=", "temp", "\n", "\n", "", "count", "+=", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", ":", "s", "]", "<", "0", ",", "axis", "=", "1", ")", ".", "float", "(", ")", "\n", "count", "+=", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", ":", "s", "]", ">", "1", ",", "axis", "=", "1", ")", ".", "float", "(", ")", "\n", "\n", "#Validity", "\n", "temp_logits", "=", "pred_model", "(", "x_pred", ")", "\n", "#validity_loss += -F.cross_entropy(temp_logits, target_label)       ", "\n", "temp_1", "=", "temp_logits", "[", "target_label", "==", "1", ",", ":", "]", "\n", "temp_0", "=", "temp_logits", "[", "target_label", "==", "0", ",", ":", "]", "\n", "validity_loss", "+=", "F", ".", "hinge_embedding_loss", "(", "F", ".", "sigmoid", "(", "temp_1", "[", ":", ",", "1", "]", ")", ".", "to", "(", "cuda", ")", "-", "F", ".", "sigmoid", "(", "temp_1", "[", ":", ",", "0", "]", ")", ".", "to", "(", "cuda", ")", ",", "torch", ".", "tensor", "(", "-", "1", ")", ".", "to", "(", "cuda", ")", ",", "margin", ",", "reduction", "=", "'mean'", ")", "\n", "validity_loss", "+=", "F", ".", "hinge_embedding_loss", "(", "F", ".", "sigmoid", "(", "temp_0", "[", ":", ",", "0", "]", ")", ".", "to", "(", "cuda", ")", "-", "F", ".", "sigmoid", "(", "temp_0", "[", ":", ",", "1", "]", ")", ".", "to", "(", "cuda", ")", ",", "torch", ".", "tensor", "(", "-", "1", ")", ".", "to", "(", "cuda", ")", ",", "margin", ",", "reduction", "=", "'mean'", ")", "\n", "\n", "", "recon_err", "=", "recon_err", "/", "mc_samples", "\n", "#     validity_loss = validity_reg*validity_loss/mc_samples", "\n", "validity_loss", "=", "-", "1", "*", "validity_reg", "*", "validity_loss", "/", "mc_samples", "\n", "\n", "print", "(", "'Avg wrong cont dim: '", ",", "torch", ".", "mean", "(", "count", ")", "/", "mc_samples", ")", "\n", "print", "(", "'recon: '", ",", "-", "torch", ".", "mean", "(", "recon_err", ")", ",", "' KL: '", ",", "torch", ".", "mean", "(", "kl_divergence", ")", ",", "' Validity: '", ",", "-", "validity_loss", ",", "'Margin: '", ",", "margin", ")", "\n", "return", "-", "torch", ".", "mean", "(", "recon_err", "-", "kl_divergence", ")", "-", "validity_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf.train_scm_loss": [[131, 174], ["torch.tensor().float().to", "torch.tensor().float().to", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "enumerate", "print", "print", "optimizer.zero_grad", "model", "scm-generative-cf.compute_change_proximal_loss", "scm-generative-cf.scm_change_score", "range", "print", "compute_change_proximal_loss.item", "compute_change_proximal_loss.backward", "optimizer.step", "torch.tensor().float", "torch.tensor().float", "torch.argmax", "torch.argmax", "scm-generative-cf.scm_change_score", "pred_model", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf.compute_change_proximal_loss", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf.scm_change_score", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf.scm_change_score"], ["", "def", "train_scm_loss", "(", "model", ",", "train_dataset", ",", "optimizer", ",", "normalise_weights", ",", "validity_reg", ",", "scm_reg", ",", "margin", ",", "delta_case", ",", "epochs", "=", "1000", ",", "batch_size", "=", "1024", ")", ":", "\n", "    ", "batch_num", "=", "0", "\n", "train_loss", "=", "0.0", "\n", "train_size", "=", "0", "\n", "#     train_dataset= np.array_split( train_dataset, train_dataset.shape[0]//batch_size ,axis=0 )", "\n", "train_dataset", "=", "torch", ".", "tensor", "(", "train_dataset", ")", ".", "float", "(", ")", ".", "to", "(", "cuda", ")", "\n", "train_dataset", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ")", "\n", "good_cf_count", "=", "0", "\n", "#     for i in range(len(train_dataset)):", "\n", "for", "train_x", "in", "enumerate", "(", "train_dataset", ")", ":", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "#         train_x = train_dataset[i]", "\n", "#         train_x= torch.tensor( train_x ).float() ", "\n", "train_x", "=", "train_x", "[", "1", "]", "\n", "train_y", "=", "1.0", "-", "torch", ".", "argmax", "(", "pred_model", "(", "train_x", ")", ",", "dim", "=", "1", ")", "\n", "train_size", "+=", "train_x", ".", "shape", "[", "0", "]", "\n", "\n", "out", "=", "model", "(", "train_x", ",", "train_y", ")", "\n", "loss", "=", "compute_change_proximal_loss", "(", "model", ",", "out", ",", "train_x", ",", "train_y", ",", "normalise_weights", ",", "validity_reg", ",", "margin", ",", "[", "'x3'", "]", ")", "\n", "dm", "=", "out", "[", "'x_pred'", "]", "\n", "mc_samples", "=", "out", "[", "'mc_samples'", "]", "\n", "x_pred", "=", "dm", "[", "0", "]", "\n", "\n", "scm_loss", "=", "scm_change_score", "(", "train_x", ",", "x_pred", ",", "normalise_weights", ",", "delta_case", ")", "\n", "\n", "for", "j", "in", "range", "(", "1", ",", "mc_samples", ")", ":", "\n", "            ", "x_pred", "=", "dm", "[", "j", "]", "\n", "scm_loss", "+=", "scm_change_score", "(", "train_x", ",", "x_pred", ",", "normalise_weights", ",", "delta_case", ")", "\n", "\n", "", "scm_loss", "=", "scm_reg", "*", "scm_loss", "/", "mc_samples", "\n", "print", "(", "'SCM: '", ",", "scm_loss", ")", "\n", "\n", "loss", "+=", "scm_loss", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "\n", "batch_num", "+=", "1", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "ret", "=", "train_loss", "/", "batch_num", "\n", "print", "(", "'Train Avg Loss: '", ",", "ret", ",", "train_size", ")", "\n", "print", "(", "'CFLabel Num: '", ",", "good_cf_count", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.scm-generative-cf.test": [[175, 211], ["numpy.array_split", "random.randrange", "range", "print", "print", "len", "len", "torch.tensor().float().to", "torch.tensor().float().to", "torch.argmax", "torch.argmax", "model.compute_elbo", "train_y.cpu().numpy.cpu().numpy", "cf_label.cpu().numpy.cpu().numpy", "numpy.sum", "d.de_normalize_data", "d.de_normalize_data", "pred_model", "d.get_decoded_data", "d.get_decoded_data", "random.randrange", "print", "print", "print", "torch.tensor().float", "torch.tensor().float", "train_y.cpu().numpy.cpu", "cf_label.cpu().numpy.cpu", "d.de_normalize_data.detach().cpu().numpy", "d.de_normalize_data.detach().cpu().numpy", "torch.tensor", "torch.tensor", "d.de_normalize_data.detach().cpu", "d.de_normalize_data.detach().cpu", "d.de_normalize_data.detach", "d.de_normalize_data.detach"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.CF_VAE.compute_elbo", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data"], ["", "def", "test", "(", "model", ",", "train_dataset", ",", "epochs", "=", "1", ",", "batch_size", "=", "2048", ")", ":", "\n", "    ", "batch_num", "=", "0", "\n", "likelihood", "=", "0.0", "\n", "valid_cf_count", "=", "0", "\n", "train_size", "=", "0", "\n", "train_dataset", "=", "np", ".", "array_split", "(", "train_dataset", ",", "train_dataset", ".", "shape", "[", "0", "]", "//", "batch_size", ",", "axis", "=", "0", ")", "\n", "index", "=", "random", ".", "randrange", "(", "0", ",", "len", "(", "train_dataset", ")", ",", "1", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "train_dataset", ")", ")", ":", "\n", "\n", "        ", "train_x", "=", "train_dataset", "[", "i", "]", "\n", "train_x", "=", "torch", ".", "tensor", "(", "train_x", ")", ".", "float", "(", ")", ".", "to", "(", "cuda", ")", "\n", "train_y", "=", "torch", ".", "argmax", "(", "pred_model", "(", "train_x", ")", ",", "dim", "=", "1", ")", "\n", "train_size", "+=", "train_x", ".", "shape", "[", "0", "]", "\n", "\n", "recon_err", ",", "kl_err", ",", "x_true", ",", "x_pred", ",", "cf_label", "=", "model", ".", "compute_elbo", "(", "train_x", ",", "1.0", "-", "train_y", ",", "pred_model", ")", "\n", "likelihood", "+=", "recon_err", "-", "kl_err", "\n", "\n", "train_y", "=", "train_y", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "cf_label", "=", "cf_label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "valid_cf_count", "+=", "np", ".", "sum", "(", "train_y", "!=", "cf_label", ")", "\n", "\n", "x_pred", "=", "d", ".", "de_normalize_data", "(", "d", ".", "get_decoded_data", "(", "x_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "x_true", "=", "d", ".", "de_normalize_data", "(", "d", ".", "get_decoded_data", "(", "x_true", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "if", "batch_num", "==", "index", ":", "\n", "            ", "rand_idx", "=", "random", ".", "randrange", "(", "0", ",", "batch_size", "/", "2", "-", "1", ",", "1", ")", "\n", "print", "(", "'Likelihood: '", ",", "recon_err", ",", "kl_err", ",", "recon_err", "-", "kl_err", ")", "\n", "print", "(", "'X: '", ",", "x_true", ".", "iloc", "[", "rand_idx", ",", ":", "]", ")", "\n", "print", "(", "'Xpred: '", ",", "x_pred", ".", "iloc", "[", "rand_idx", ",", ":", "]", ")", "\n", "", "batch_num", "+=", "1", "\n", "\n", "", "ret", "=", "likelihood", "/", "batch_num", "\n", "print", "(", "'ELBO Avg: '", ",", "ret", ",", "train_size", ")", "\n", "print", "(", "'Valid CF Percentage: '", ",", "valid_cf_count", ",", "valid_cf_count", "/", "train_size", ")", "\n", "\n", "return", "ret", ",", "valid_cf_count", "/", "train_size", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.master_evaluate.flip": [[29, 31], ["itertools.chain", "range"], "function", ["None"], ["def", "flip", "(", "items", ",", "ncol", ")", ":", "\n", "    ", "return", "itertools", ".", "chain", "(", "*", "[", "items", "[", "i", ":", ":", "ncol", "]", "for", "i", "in", "range", "(", "ncol", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.unary-const-generative-cf.traverse": [[31, 43], ["numpy.array_split", "range", "print", "len", "torch.tensor().float().to", "torch.tensor().float().to", "torch.argmax", "torch.argmax", "print", "pred_model", "numpy.unique", "torch.tensor().float", "torch.tensor().float", "torch.argmax.cpu", "torch.tensor", "torch.tensor"], "function", ["None"], ["def", "traverse", "(", "train_dataset", ",", "epochs", "=", "1", ",", "batch_size", "=", "128", ")", ":", "\n", "    ", "batch_num", "=", "0", "\n", "loss", "=", "0.0", "\n", "train_size", "=", "0", "\n", "train_dataset", "=", "np", ".", "array_split", "(", "train_dataset", ",", "train_dataset", ".", "shape", "[", "0", "]", "//", "batch_size", ",", "axis", "=", "0", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "train_dataset", ")", ")", ":", "\n", "        ", "train_x", "=", "train_dataset", "[", "i", "]", "\n", "train_x", "=", "torch", ".", "tensor", "(", "train_x", ")", ".", "float", "(", ")", ".", "to", "(", "cuda", ")", "\n", "train_y", "=", "torch", ".", "argmax", "(", "pred_model", "(", "train_x", ")", ",", "dim", "=", "1", ")", "\n", "train_size", "+=", "train_x", ".", "shape", "[", "0", "]", "\n", "print", "(", "np", ".", "unique", "(", "train_y", ".", "cpu", "(", ")", ",", "return_counts", "=", "True", ")", ")", "\n", "", "print", "(", "train_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.unary-const-generative-cf.compute_loss": [[44, 112], ["normalise_weights.keys", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "pred_model", "torch.zeros().to", "torch.zeros().to", "torch.nn.functional.hinge_embedding_loss", "torch.nn.functional.hinge_embedding_loss", "range", "print", "print", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "normalise_weights.keys", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "pred_model", "torch.nn.functional.hinge_embedding_loss", "torch.nn.functional.hinge_embedding_loss", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.zeros", "torch.zeros", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.sum", "torch.sum", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.log", "torch.log", "torch.sum", "torch.sum", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.sum", "torch.sum", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid"], ["", "def", "compute_loss", "(", "model", ",", "model_out", ",", "x", ",", "target_label", ",", "normalise_weights", ",", "validity_reg", ",", "margin", ")", ":", "\n", "\n", "    ", "em", "=", "model_out", "[", "'em'", "]", "\n", "ev", "=", "model_out", "[", "'ev'", "]", "\n", "z", "=", "model_out", "[", "'z'", "]", "\n", "dm", "=", "model_out", "[", "'x_pred'", "]", "\n", "mc_samples", "=", "model_out", "[", "'mc_samples'", "]", "\n", "\n", "#KL Divergence", "\n", "kl_divergence", "=", "0.5", "*", "torch", ".", "mean", "(", "em", "**", "2", "+", "ev", "-", "torch", ".", "log", "(", "ev", ")", "-", "1", ",", "axis", "=", "1", ")", "\n", "\n", "#Reconstruction Term", "\n", "#Proximity: L1 Loss", "\n", "x_pred", "=", "dm", "[", "0", "]", "\n", "s", "=", "model", ".", "encoded_start_cat", "\n", "recon_err", "=", "-", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "x", "[", ":", ",", "s", ":", "-", "1", "]", "-", "x_pred", "[", ":", ",", "s", ":", "-", "1", "]", ")", ",", "axis", "=", "1", ")", "\n", "for", "key", "in", "normalise_weights", ".", "keys", "(", ")", ":", "\n", "# recon_err+= -(1/mad_feature_weights[d.encoded_feature_names[int(key)]])*(normalise_weights[key][1] - normalise_weights[key][0])*torch.abs(x[:,key] - x_pred[:,key]) ", "\n", "        ", "recon_err", "+=", "-", "(", "normalise_weights", "[", "key", "]", "[", "1", "]", "-", "normalise_weights", "[", "key", "]", "[", "0", "]", ")", "*", "torch", ".", "abs", "(", "x", "[", ":", ",", "key", "]", "-", "x_pred", "[", ":", ",", "key", "]", ")", "\n", "\n", "# Sum to 1 over the categorical indexes of a feature", "\n", "", "for", "v", "in", "model", ".", "encoded_categorical_feature_indexes", ":", "\n", "        ", "temp", "=", "-", "torch", ".", "abs", "(", "1.0", "-", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", "v", "[", "0", "]", ":", "v", "[", "-", "1", "]", "+", "1", "]", ",", "axis", "=", "1", ")", ")", "\n", "recon_err", "+=", "temp", "\n", "\n", "", "count", "=", "0", "\n", "count", "+=", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", ":", "s", "]", "<", "0", ",", "axis", "=", "1", ")", ".", "float", "(", ")", "\n", "count", "+=", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", ":", "s", "]", ">", "1", ",", "axis", "=", "1", ")", ".", "float", "(", ")", "\n", "\n", "#Validity         ", "\n", "temp_logits", "=", "pred_model", "(", "x_pred", ")", "\n", "#     validity_loss = -F.cross_entropy(temp_logits, target_label)    ", "\n", "validity_loss", "=", "torch", ".", "zeros", "(", "1", ")", ".", "to", "(", "cuda", ")", "\n", "temp_1", "=", "temp_logits", "[", "target_label", "==", "1", ",", ":", "]", "\n", "temp_0", "=", "temp_logits", "[", "target_label", "==", "0", ",", ":", "]", "\n", "validity_loss", "+=", "F", ".", "hinge_embedding_loss", "(", "F", ".", "sigmoid", "(", "temp_1", "[", ":", ",", "1", "]", ")", ".", "to", "(", "cuda", ")", "-", "F", ".", "sigmoid", "(", "temp_1", "[", ":", ",", "0", "]", ")", ".", "to", "(", "cuda", ")", ",", "torch", ".", "tensor", "(", "-", "1", ")", ".", "to", "(", "cuda", ")", ",", "margin", ",", "reduction", "=", "'mean'", ")", "\n", "validity_loss", "+=", "F", ".", "hinge_embedding_loss", "(", "F", ".", "sigmoid", "(", "temp_0", "[", ":", ",", "0", "]", ")", ".", "to", "(", "cuda", ")", "-", "F", ".", "sigmoid", "(", "temp_0", "[", ":", ",", "1", "]", ")", ".", "to", "(", "cuda", ")", ",", "torch", ".", "tensor", "(", "-", "1", ")", ".", "to", "(", "cuda", ")", ",", "margin", ",", "reduction", "=", "'mean'", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "mc_samples", ")", ":", "\n", "        ", "x_pred", "=", "dm", "[", "i", "]", "\n", "\n", "recon_err", "+=", "-", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "x", "[", ":", ",", "s", ":", "-", "1", "]", "-", "x_pred", "[", ":", ",", "s", ":", "-", "1", "]", ")", ",", "axis", "=", "1", ")", "\n", "for", "key", "in", "normalise_weights", ".", "keys", "(", ")", ":", "\n", "# recon_err+= -(1/mad_feature_weights[d.encoded_feature_names[int(key)]])*(normalise_weights[key][1] - normalise_weights[key][0])*torch.abs( (x[:,key] - x_pred[:,key]))", "\n", "            ", "recon_err", "+=", "-", "(", "normalise_weights", "[", "key", "]", "[", "1", "]", "-", "normalise_weights", "[", "key", "]", "[", "0", "]", ")", "*", "torch", ".", "abs", "(", "x", "[", ":", ",", "key", "]", "-", "x_pred", "[", ":", ",", "key", "]", ")", "\n", "\n", "# Sum to 1 over the categorical indexes of a feature", "\n", "", "for", "v", "in", "model", ".", "encoded_categorical_feature_indexes", ":", "\n", "            ", "temp", "=", "-", "torch", ".", "abs", "(", "1.0", "-", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", "v", "[", "0", "]", ":", "v", "[", "-", "1", "]", "+", "1", "]", ",", "axis", "=", "1", ")", ")", "\n", "recon_err", "+=", "temp", "\n", "\n", "", "count", "+=", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", ":", "s", "]", "<", "0", ",", "axis", "=", "1", ")", ".", "float", "(", ")", "\n", "count", "+=", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", ":", "s", "]", ">", "1", ",", "axis", "=", "1", ")", ".", "float", "(", ")", "\n", "\n", "#Validity", "\n", "temp_logits", "=", "pred_model", "(", "x_pred", ")", "\n", "#         validity_loss += -F.cross_entropy(temp_logits, target_label)", "\n", "temp_1", "=", "temp_logits", "[", "target_label", "==", "1", ",", ":", "]", "\n", "temp_0", "=", "temp_logits", "[", "target_label", "==", "0", ",", ":", "]", "\n", "validity_loss", "+=", "F", ".", "hinge_embedding_loss", "(", "F", ".", "sigmoid", "(", "temp_1", "[", ":", ",", "1", "]", ")", ".", "to", "(", "cuda", ")", "-", "F", ".", "sigmoid", "(", "temp_1", "[", ":", ",", "0", "]", ")", ".", "to", "(", "cuda", ")", ",", "torch", ".", "tensor", "(", "-", "1", ")", ".", "to", "(", "cuda", ")", ",", "margin", ",", "reduction", "=", "'mean'", ")", "\n", "validity_loss", "+=", "F", ".", "hinge_embedding_loss", "(", "F", ".", "sigmoid", "(", "temp_0", "[", ":", ",", "0", "]", ")", ".", "to", "(", "cuda", ")", "-", "F", ".", "sigmoid", "(", "temp_0", "[", ":", ",", "1", "]", ")", ".", "to", "(", "cuda", ")", ",", "torch", ".", "tensor", "(", "-", "1", ")", ".", "to", "(", "cuda", ")", ",", "margin", ",", "reduction", "=", "'mean'", ")", "\n", "\n", "", "recon_err", "=", "recon_err", "/", "mc_samples", "\n", "validity_loss", "=", "-", "1", "*", "validity_reg", "*", "validity_loss", "/", "mc_samples", "\n", "\n", "print", "(", "'Avg wrong cont dim: '", ",", "torch", ".", "mean", "(", "count", ")", "/", "mc_samples", ")", "\n", "print", "(", "'recon: '", ",", "-", "torch", ".", "mean", "(", "recon_err", ")", ",", "' KL: '", ",", "torch", ".", "mean", "(", "kl_divergence", ")", ",", "' Validity: '", ",", "-", "validity_loss", ")", "\n", "return", "-", "torch", ".", "mean", "(", "recon_err", "-", "kl_divergence", ")", "-", "validity_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.unary-const-generative-cf.train_constraint_loss": [[114, 158], ["torch.tensor().float().to", "torch.tensor().float().to", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "enumerate", "print", "optimizer.zero_grad", "model", "unary-const-generative-cf.compute_loss", "torch.nn.functional.hinge_embedding_loss().to", "range", "print", "torch.mean", "torch.mean", "compute_loss.item", "compute_loss.backward", "optimizer.step", "torch.tensor().float", "torch.tensor().float", "torch.argmax", "torch.argmax", "torch.nn.functional.hinge_embedding_loss().to", "torch.mean", "torch.mean", "pred_model", "torch.nn.functional.hinge_embedding_loss", "torch.tensor", "torch.tensor", "torch.tensor().to", "torch.tensor().to", "torch.nn.functional.hinge_embedding_loss", "torch.tensor().to", "torch.tensor().to", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.timeit-base-generative-cf.compute_loss"], ["", "def", "train_constraint_loss", "(", "model", ",", "train_dataset", ",", "optimizer", ",", "normalise_weights", ",", "validity_reg", ",", "constraint_reg", ",", "margin", ",", "epochs", "=", "1000", ",", "batch_size", "=", "1024", ")", ":", "\n", "    ", "batch_num", "=", "0", "\n", "train_loss", "=", "0.0", "\n", "train_size", "=", "0", "\n", "\n", "#train_dataset= np.array_split( train_dataset, train_dataset.shape[0]//batch_size ,axis=0 )", "\n", "train_dataset", "=", "torch", ".", "tensor", "(", "train_dataset", ")", ".", "float", "(", ")", ".", "to", "(", "cuda", ")", "\n", "train_dataset", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ")", "\n", "good_cf_count", "=", "0", "\n", "#    for i in range(len(train_dataset)):", "\n", "for", "train_x", "in", "enumerate", "(", "train_dataset", ")", ":", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "#train_x = train_dataset[i]", "\n", "#train_x= torch.tensor( train_x ).float().to(cuda) ", "\n", "train_x", "=", "train_x", "[", "1", "]", "\n", "train_y", "=", "1.0", "-", "torch", ".", "argmax", "(", "pred_model", "(", "train_x", ")", ",", "dim", "=", "1", ")", "\n", "train_size", "+=", "train_x", ".", "shape", "[", "0", "]", "\n", "\n", "out", "=", "model", "(", "train_x", ",", "train_y", ")", "\n", "loss", "=", "compute_loss", "(", "model", ",", "out", ",", "train_x", ",", "train_y", ",", "normalise_weights", ",", "validity_reg", ",", "margin", ")", "\n", "\n", "dm", "=", "out", "[", "'x_pred'", "]", "\n", "mc_samples", "=", "out", "[", "'mc_samples'", "]", "\n", "x_pred", "=", "dm", "[", "0", "]", "\n", "constraint_loss", "=", "F", ".", "hinge_embedding_loss", "(", "x_pred", "[", ":", ",", "0", "]", "-", "train_x", "[", ":", ",", "0", "]", ",", "torch", ".", "tensor", "(", "-", "1", ")", ".", "to", "(", "cuda", ")", ",", "0", ")", ".", "to", "(", "cuda", ")", "\n", "\n", "for", "j", "in", "range", "(", "1", ",", "mc_samples", ")", ":", "\n", "            ", "x_pred", "=", "dm", "[", "j", "]", "\n", "constraint_loss", "+=", "F", ".", "hinge_embedding_loss", "(", "x_pred", "[", ":", ",", "0", "]", "-", "train_x", "[", ":", ",", "0", "]", ",", "torch", ".", "tensor", "(", "-", "1", ")", ".", "to", "(", "cuda", ")", ",", "0", ")", ".", "to", "(", "cuda", ")", "\n", "", "constraint_loss", "=", "constraint_loss", "/", "mc_samples", "\n", "\n", "constraint_loss", "=", "constraint_reg", "*", "constraint_loss", "\n", "print", "(", "'Constraint: '", ",", "constraint_loss", ",", "torch", ".", "mean", "(", "constraint_loss", ")", ")", "\n", "\n", "loss", "+=", "torch", ".", "mean", "(", "constraint_loss", ")", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "\n", "batch_num", "+=", "1", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "ret", "=", "train_loss", "\n", "print", "(", "'Train Avg Loss: '", ",", "ret", ",", "train_size", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.unary-const-generative-cf.test": [[160, 196], ["numpy.array_split", "random.randrange", "range", "print", "print", "len", "len", "torch.tensor().float().to", "torch.tensor().float().to", "torch.argmax", "torch.argmax", "model.compute_elbo", "train_y.cpu().numpy.cpu().numpy", "cf_label.cpu().numpy.cpu().numpy", "numpy.sum", "d.de_normalize_data", "d.de_normalize_data", "pred_model", "d.get_decoded_data", "d.get_decoded_data", "random.randrange", "print", "print", "print", "torch.tensor().float", "torch.tensor().float", "train_y.cpu().numpy.cpu", "cf_label.cpu().numpy.cpu", "d.de_normalize_data.cpu().detach().numpy", "d.de_normalize_data.cpu().detach().numpy", "torch.tensor", "torch.tensor", "d.de_normalize_data.cpu().detach", "d.de_normalize_data.cpu().detach", "d.de_normalize_data.cpu", "d.de_normalize_data.cpu"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.CF_VAE.compute_elbo", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data"], ["", "def", "test", "(", "model", ",", "train_dataset", ",", "epochs", "=", "1", ",", "batch_size", "=", "2048", ")", ":", "\n", "    ", "batch_num", "=", "0", "\n", "likelihood", "=", "0.0", "\n", "valid_cf_count", "=", "0", "\n", "train_size", "=", "0", "\n", "train_dataset", "=", "np", ".", "array_split", "(", "train_dataset", ",", "train_dataset", ".", "shape", "[", "0", "]", "//", "batch_size", ",", "axis", "=", "0", ")", "\n", "index", "=", "random", ".", "randrange", "(", "0", ",", "len", "(", "train_dataset", ")", ",", "1", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "train_dataset", ")", ")", ":", "\n", "\n", "        ", "train_x", "=", "train_dataset", "[", "i", "]", "\n", "train_x", "=", "torch", ".", "tensor", "(", "train_x", ")", ".", "float", "(", ")", ".", "to", "(", "cuda", ")", "\n", "train_y", "=", "torch", ".", "argmax", "(", "pred_model", "(", "train_x", ")", ",", "dim", "=", "1", ")", "\n", "train_size", "+=", "train_x", ".", "shape", "[", "0", "]", "\n", "\n", "recon_err", ",", "kl_err", ",", "x_true", ",", "x_pred", ",", "cf_label", "=", "model", ".", "compute_elbo", "(", "train_x", ",", "1.0", "-", "train_y", ",", "pred_model", ")", "\n", "likelihood", "+=", "recon_err", "-", "kl_err", "\n", "\n", "train_y", "=", "train_y", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "cf_label", "=", "cf_label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "valid_cf_count", "+=", "np", ".", "sum", "(", "train_y", "!=", "cf_label", ")", "\n", "\n", "x_pred", "=", "d", ".", "de_normalize_data", "(", "d", ".", "get_decoded_data", "(", "x_pred", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "x_true", "=", "d", ".", "de_normalize_data", "(", "d", ".", "get_decoded_data", "(", "x_true", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "if", "batch_num", "==", "index", ":", "\n", "            ", "rand_idx", "=", "random", ".", "randrange", "(", "0", ",", "batch_size", "/", "2", "-", "1", ",", "1", ")", "\n", "print", "(", "'Likelihood: '", ",", "recon_err", ",", "kl_err", ",", "recon_err", "-", "kl_err", ")", "\n", "print", "(", "'X: '", ",", "x_true", ".", "iloc", "[", "rand_idx", ",", ":", "]", ")", "\n", "print", "(", "'Xpred: '", ",", "x_pred", ".", "iloc", "[", "rand_idx", ",", ":", "]", ")", "\n", "", "batch_num", "+=", "1", "\n", "\n", "", "ret", "=", "likelihood", "/", "batch_num", "\n", "print", "(", "'ELBO Avg: '", ",", "ret", ",", "train_size", ")", "\n", "print", "(", "'Valid CF Percentage: '", ",", "valid_cf_count", ",", "valid_cf_count", "/", "train_size", ")", "\n", "\n", "return", "ret", ",", "valid_cf_count", "/", "train_size", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.ae-base-generative-cf.ae_reconstruct_loss": [[30, 53], ["normalise_weights.keys", "torch.sum", "torch.sum", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "function", ["None"], ["def", "ae_reconstruct_loss", "(", "model", ",", "model_out", ",", "x", ",", "normalise_weights", ")", ":", "\n", "\n", "    ", "em", "=", "model_out", "[", "'em'", "]", "\n", "ev", "=", "model_out", "[", "'ev'", "]", "\n", "z", "=", "model_out", "[", "'z'", "]", "\n", "dm", "=", "model_out", "[", "'x_pred'", "]", "\n", "mc_samples", "=", "model_out", "[", "'mc_samples'", "]", "\n", "\n", "#Reconstruction Term", "\n", "x_pred", "=", "dm", "[", "0", "]", "\n", "s", "=", "model", ".", "encoded_start_cat", "\n", "recon_err", "=", "-", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "x", "[", ":", ",", "s", ":", "-", "1", "]", "-", "x_pred", "[", ":", ",", "s", ":", "-", "1", "]", ")", ",", "axis", "=", "1", ")", "\n", "for", "key", "in", "normalise_weights", ".", "keys", "(", ")", ":", "\n", "        ", "recon_err", "+=", "-", "(", "normalise_weights", "[", "key", "]", "[", "1", "]", "-", "normalise_weights", "[", "key", "]", "[", "0", "]", ")", "*", "torch", ".", "abs", "(", "x", "[", ":", ",", "key", "]", "-", "x_pred", "[", ":", ",", "key", "]", ")", "\n", "\n", "#     for i in range(1,mc_samples):", "\n", "#         x_pred = model.sample_latent_code(dm[i], dv[i])        ", "\n", "#         recon_err += -torch.sum( torch.abs(x[:,s:-1] - x_pred[:,s:-1]), axis=1 )", "\n", "#         for key in normalise_weights.keys():", "\n", "#             recon_err+= -(1/mad_feature_weights[d.encoded_feature_names[int(key)]])*(normalise_weights[key][1] - normalise_weights[key][0])*torch.abs( (x[:,key] - x_pred[:,key]))", "\n", "\n", "#     recon_err = recon_err / mc_samples", "\n", "", "return", "-", "torch", ".", "mean", "(", "recon_err", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.ae-base-generative-cf.compute_loss": [[54, 122], ["normalise_weights.keys", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "pred_model", "torch.zeros().to", "torch.zeros().to", "torch.nn.functional.hinge_embedding_loss", "torch.nn.functional.hinge_embedding_loss", "range", "print", "print", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "normalise_weights.keys", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "pred_model", "torch.nn.functional.hinge_embedding_loss", "torch.nn.functional.hinge_embedding_loss", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.zeros", "torch.zeros", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.sum", "torch.sum", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.log", "torch.log", "torch.sum", "torch.sum", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.sum", "torch.sum", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid"], ["", "def", "compute_loss", "(", "model", ",", "model_out", ",", "x", ",", "target_label", ",", "normalise_weights", ",", "validity_reg", ",", "margin", ")", ":", "\n", "\n", "    ", "em", "=", "model_out", "[", "'em'", "]", "\n", "ev", "=", "model_out", "[", "'ev'", "]", "\n", "z", "=", "model_out", "[", "'z'", "]", "\n", "dm", "=", "model_out", "[", "'x_pred'", "]", "\n", "mc_samples", "=", "model_out", "[", "'mc_samples'", "]", "\n", "\n", "#KL Divergence", "\n", "kl_divergence", "=", "0.5", "*", "torch", ".", "mean", "(", "em", "**", "2", "+", "ev", "-", "torch", ".", "log", "(", "ev", ")", "-", "1", ",", "axis", "=", "1", ")", "\n", "\n", "#Reconstruction Term", "\n", "#Proximity: L1 Loss", "\n", "x_pred", "=", "dm", "[", "0", "]", "\n", "s", "=", "model", ".", "encoded_start_cat", "\n", "recon_err", "=", "-", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "x", "[", ":", ",", "s", ":", "-", "1", "]", "-", "x_pred", "[", ":", ",", "s", ":", "-", "1", "]", ")", ",", "axis", "=", "1", ")", "\n", "for", "key", "in", "normalise_weights", ".", "keys", "(", ")", ":", "\n", "# recon_err+= -(1/mad_feature_weights[d.encoded_feature_names[int(key)]])*(normalise_weights[key][1] - normalise_weights[key][0])*torch.abs(x[:,key] - x_pred[:,key]) ", "\n", "        ", "recon_err", "+=", "-", "(", "normalise_weights", "[", "key", "]", "[", "1", "]", "-", "normalise_weights", "[", "key", "]", "[", "0", "]", ")", "*", "torch", ".", "abs", "(", "x", "[", ":", ",", "key", "]", "-", "x_pred", "[", ":", ",", "key", "]", ")", "\n", "\n", "# Sum to 1 over the categorical indexes of a feature", "\n", "", "for", "v", "in", "model", ".", "encoded_categorical_feature_indexes", ":", "\n", "        ", "temp", "=", "-", "torch", ".", "abs", "(", "1.0", "-", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", "v", "[", "0", "]", ":", "v", "[", "-", "1", "]", "+", "1", "]", ",", "axis", "=", "1", ")", ")", "\n", "recon_err", "+=", "temp", "\n", "\n", "", "count", "=", "0", "\n", "count", "+=", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", ":", "s", "]", "<", "0", ",", "axis", "=", "1", ")", ".", "float", "(", ")", "\n", "count", "+=", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", ":", "s", "]", ">", "1", ",", "axis", "=", "1", ")", ".", "float", "(", ")", "\n", "\n", "#Validity         ", "\n", "temp_logits", "=", "pred_model", "(", "x_pred", ")", "\n", "#validity_loss = -F.cross_entropy(temp_logits, target_label)    ", "\n", "validity_loss", "=", "torch", ".", "zeros", "(", "1", ")", ".", "to", "(", "cuda", ")", "\n", "temp_1", "=", "temp_logits", "[", "target_label", "==", "1", ",", ":", "]", "\n", "temp_0", "=", "temp_logits", "[", "target_label", "==", "0", ",", ":", "]", "\n", "validity_loss", "+=", "F", ".", "hinge_embedding_loss", "(", "F", ".", "sigmoid", "(", "temp_1", "[", ":", ",", "1", "]", ")", ".", "to", "(", "cuda", ")", "-", "F", ".", "sigmoid", "(", "temp_1", "[", ":", ",", "0", "]", ")", ".", "to", "(", "cuda", ")", ",", "torch", ".", "tensor", "(", "-", "1", ")", ".", "to", "(", "cuda", ")", ",", "margin", ",", "reduction", "=", "'mean'", ")", "\n", "validity_loss", "+=", "F", ".", "hinge_embedding_loss", "(", "F", ".", "sigmoid", "(", "temp_0", "[", ":", ",", "0", "]", ")", ".", "to", "(", "cuda", ")", "-", "F", ".", "sigmoid", "(", "temp_0", "[", ":", ",", "1", "]", ")", ".", "to", "(", "cuda", ")", ",", "torch", ".", "tensor", "(", "-", "1", ")", ".", "to", "(", "cuda", ")", ",", "margin", ",", "reduction", "=", "'mean'", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "mc_samples", ")", ":", "\n", "        ", "x_pred", "=", "dm", "[", "i", "]", "\n", "\n", "recon_err", "+=", "-", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "x", "[", ":", ",", "s", ":", "-", "1", "]", "-", "x_pred", "[", ":", ",", "s", ":", "-", "1", "]", ")", ",", "axis", "=", "1", ")", "\n", "for", "key", "in", "normalise_weights", ".", "keys", "(", ")", ":", "\n", "# recon_err+= -(1/mad_feature_weights[d.encoded_feature_names[int(key)]])*(normalise_weights[key][1] - normalise_weights[key][0])*torch.abs( (x[:,key] - x_pred[:,key]))", "\n", "            ", "recon_err", "+=", "-", "(", "normalise_weights", "[", "key", "]", "[", "1", "]", "-", "normalise_weights", "[", "key", "]", "[", "0", "]", ")", "*", "torch", ".", "abs", "(", "x", "[", ":", ",", "key", "]", "-", "x_pred", "[", ":", ",", "key", "]", ")", "\n", "\n", "# Sum to 1 over the categorical indexes of a feature", "\n", "", "for", "v", "in", "model", ".", "encoded_categorical_feature_indexes", ":", "\n", "            ", "temp", "=", "-", "torch", ".", "abs", "(", "1.0", "-", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", "v", "[", "0", "]", ":", "v", "[", "-", "1", "]", "+", "1", "]", ",", "axis", "=", "1", ")", ")", "\n", "recon_err", "+=", "temp", "\n", "\n", "", "count", "+=", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", ":", "s", "]", "<", "0", ",", "axis", "=", "1", ")", ".", "float", "(", ")", "\n", "count", "+=", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", ":", "s", "]", ">", "1", ",", "axis", "=", "1", ")", ".", "float", "(", ")", "\n", "\n", "#Validity         ", "\n", "temp_logits", "=", "pred_model", "(", "x_pred", ")", "\n", "#validity_loss = -F.cross_entropy(temp_logits, target_label)", "\n", "temp_1", "=", "temp_logits", "[", "target_label", "==", "1", ",", ":", "]", "\n", "temp_0", "=", "temp_logits", "[", "target_label", "==", "0", ",", ":", "]", "\n", "validity_loss", "+=", "F", ".", "hinge_embedding_loss", "(", "F", ".", "sigmoid", "(", "temp_1", "[", ":", ",", "1", "]", ")", ".", "to", "(", "cuda", ")", "-", "F", ".", "sigmoid", "(", "temp_1", "[", ":", ",", "0", "]", ")", ".", "to", "(", "cuda", ")", ",", "torch", ".", "tensor", "(", "-", "1", ")", ".", "to", "(", "cuda", ")", ",", "margin", ",", "reduction", "=", "'mean'", ")", "\n", "validity_loss", "+=", "F", ".", "hinge_embedding_loss", "(", "F", ".", "sigmoid", "(", "temp_0", "[", ":", ",", "0", "]", ")", ".", "to", "(", "cuda", ")", "-", "F", ".", "sigmoid", "(", "temp_0", "[", ":", ",", "1", "]", ")", ".", "to", "(", "cuda", ")", ",", "torch", ".", "tensor", "(", "-", "1", ")", ".", "to", "(", "cuda", ")", ",", "margin", ",", "reduction", "=", "'mean'", ")", "\n", "\n", "", "recon_err", "=", "recon_err", "/", "mc_samples", "\n", "validity_loss", "=", "-", "1", "*", "validity_reg", "*", "validity_loss", "/", "mc_samples", "\n", "\n", "print", "(", "'Avg wrong cont dim: '", ",", "torch", ".", "mean", "(", "count", ")", "/", "mc_samples", ")", "\n", "print", "(", "'recon: '", ",", "-", "torch", ".", "mean", "(", "recon_err", ")", ",", "' KL: '", ",", "torch", ".", "mean", "(", "kl_divergence", ")", ",", "' Validity: '", ",", "-", "validity_loss", ")", "\n", "return", "-", "torch", ".", "mean", "(", "recon_err", "-", "kl_divergence", ")", "-", "validity_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.ae-base-generative-cf.traverse": [[124, 135], ["numpy.array_split", "range", "print", "len", "torch.tensor().float().to", "torch.tensor().float().to", "torch.argmax", "torch.argmax", "pred_model", "torch.tensor().float", "torch.tensor().float", "torch.tensor", "torch.tensor"], "function", ["None"], ["", "def", "traverse", "(", "train_dataset", ",", "epochs", "=", "1", ",", "batch_size", "=", "128", ")", ":", "\n", "    ", "batch_num", "=", "0", "\n", "loss", "=", "0.0", "\n", "train_size", "=", "0", "\n", "train_dataset", "=", "np", ".", "array_split", "(", "train_dataset", ",", "train_dataset", ".", "shape", "[", "0", "]", "//", "batch_size", ",", "axis", "=", "0", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "train_dataset", ")", ")", ":", "\n", "        ", "train_x", "=", "train_dataset", "[", "i", "]", "\n", "train_x", "=", "torch", ".", "tensor", "(", "train_x", ")", ".", "float", "(", ")", ".", "to", "(", "cuda", ")", "\n", "train_y", "=", "torch", ".", "argmax", "(", "pred_model", "(", "train_x", ")", ",", "dim", "=", "1", ")", "\n", "train_size", "+=", "train_x", ".", "shape", "[", "0", "]", "\n", "", "print", "(", "train_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.ae-base-generative-cf.train_auto_encoder_loss": [[136, 182], ["torch.tensor().float().to", "torch.tensor().float().to", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "enumerate", "print", "optimizer.zero_grad", "model", "ae-base-generative-cf.compute_loss", "ae_model", "ae-base-generative-cf.ae_reconstruct_loss", "range", "print", "compute_loss.item", "compute_loss.backward", "optimizer.step", "torch.tensor().float", "torch.tensor().float", "torch.argmax", "torch.argmax", "ae_vae", "ae-base-generative-cf.ae_reconstruct_loss", "pred_model", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.timeit-base-generative-cf.compute_loss", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.auto-encoder-train.ae_model", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.ae-base-generative-cf.ae_reconstruct_loss", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.ae-base-generative-cf.ae_reconstruct_loss"], ["", "def", "train_auto_encoder_loss", "(", "model", ",", "ae_model", ",", "train_dataset", ",", "optimizer", ",", "normalise_weights", ",", "validity_reg", ",", "ae_reg", ",", "margin", ",", "epochs", "=", "1000", ",", "batch_size", "=", "1024", ")", ":", "\n", "    ", "batch_num", "=", "0", "\n", "train_loss", "=", "0.0", "\n", "train_size", "=", "0", "\n", "#     train_dataset= np.array_split( train_dataset, train_dataset.shape[0]//batch_size ,axis=0 )", "\n", "train_dataset", "=", "torch", ".", "tensor", "(", "train_dataset", ")", ".", "float", "(", ")", ".", "to", "(", "cuda", ")", "\n", "train_dataset", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ")", "\n", "good_cf_count", "=", "0", "\n", "#     for i in range(len(train_dataset)):", "\n", "for", "train_x", "in", "enumerate", "(", "train_dataset", ")", ":", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "train_x", "=", "train_x", "[", "1", "]", "\n", "#train_x = train_dataset[i]", "\n", "train_y", "=", "1.0", "-", "torch", ".", "argmax", "(", "pred_model", "(", "train_x", ")", ",", "dim", "=", "1", ")", "\n", "train_size", "+=", "train_x", ".", "shape", "[", "0", "]", "\n", "\n", "out", "=", "model", "(", "train_x", ",", "train_y", ")", "\n", "loss", "=", "compute_loss", "(", "model", ",", "out", ",", "train_x", ",", "train_y", ",", "normalise_weights", ",", "validity_reg", ",", "margin", ")", "\n", "\n", "dm", "=", "out", "[", "'x_pred'", "]", "\n", "mc_samples", "=", "out", "[", "'mc_samples'", "]", "\n", "x_pred", "=", "dm", "[", "0", "]", "\n", "\n", "ae_out", "=", "ae_model", "(", "train_x", ")", "\n", "ae_loss", "=", "ae_reconstruct_loss", "(", "ae_model", ",", "ae_out", ",", "x_pred", ",", "normalise_weights", ")", "\n", "\n", "mc_samples", "=", "5", "\n", "for", "j", "in", "range", "(", "1", ",", "mc_samples", ")", ":", "\n", "            ", "x_pred", "=", "dm", "[", "j", "]", "\n", "\n", "ae_out", "=", "ae_vae", "(", "train_x", ")", "\n", "ae_loss", "+=", "ae_reconstruct_loss", "(", "ae_vae", ",", "ae_out", ",", "x_pred", ",", "normalise_weights", ")", "\n", "\n", "", "ae_loss", "=", "ae_reg", "*", "ae_loss", "/", "mc_samples", "\n", "print", "(", "'Auto Encoder: '", ",", "ae_loss", ")", "\n", "\n", "loss", "+=", "ae_loss", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "\n", "batch_num", "+=", "1", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "ret", "=", "train_loss", "\n", "print", "(", "'Train Avg Loss: '", ",", "ret", ",", "train_size", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.ae-base-generative-cf.test": [[183, 219], ["numpy.array_split", "random.randrange", "range", "print", "print", "len", "len", "torch.tensor().float().to", "torch.tensor().float().to", "torch.argmax", "torch.argmax", "model.compute_elbo", "train_y.cpu().numpy.cpu().numpy", "cf_label.cpu().numpy.cpu().numpy", "numpy.sum", "d.de_normalize_data", "d.de_normalize_data", "pred_model", "d.get_decoded_data", "d.get_decoded_data", "random.randrange", "print", "print", "print", "torch.tensor().float", "torch.tensor().float", "train_y.cpu().numpy.cpu", "cf_label.cpu().numpy.cpu", "d.de_normalize_data.detach().cpu().numpy", "d.de_normalize_data.detach().cpu().numpy", "torch.tensor", "torch.tensor", "d.de_normalize_data.detach().cpu", "d.de_normalize_data.detach().cpu", "d.de_normalize_data.detach", "d.de_normalize_data.detach"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.CF_VAE.compute_elbo", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data"], ["", "def", "test", "(", "model", ",", "train_dataset", ",", "epochs", "=", "1", ",", "batch_size", "=", "2048", ")", ":", "\n", "    ", "batch_num", "=", "0", "\n", "likelihood", "=", "0.0", "\n", "valid_cf_count", "=", "0", "\n", "train_size", "=", "0", "\n", "train_dataset", "=", "np", ".", "array_split", "(", "train_dataset", ",", "train_dataset", ".", "shape", "[", "0", "]", "//", "batch_size", ",", "axis", "=", "0", ")", "\n", "index", "=", "random", ".", "randrange", "(", "0", ",", "len", "(", "train_dataset", ")", ",", "1", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "train_dataset", ")", ")", ":", "\n", "\n", "        ", "train_x", "=", "train_dataset", "[", "i", "]", "\n", "train_x", "=", "torch", ".", "tensor", "(", "train_x", ")", ".", "float", "(", ")", ".", "to", "(", "cuda", ")", "\n", "train_y", "=", "torch", ".", "argmax", "(", "pred_model", "(", "train_x", ")", ",", "dim", "=", "1", ")", "\n", "train_size", "+=", "train_x", ".", "shape", "[", "0", "]", "\n", "\n", "recon_err", ",", "kl_err", ",", "x_true", ",", "x_pred", ",", "cf_label", "=", "model", ".", "compute_elbo", "(", "train_x", ",", "1.0", "-", "train_y", ",", "pred_model", ")", "\n", "likelihood", "+=", "recon_err", "-", "kl_err", "\n", "\n", "train_y", "=", "train_y", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "cf_label", "=", "cf_label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "valid_cf_count", "+=", "np", ".", "sum", "(", "train_y", "!=", "cf_label", ")", "\n", "\n", "x_pred", "=", "d", ".", "de_normalize_data", "(", "d", ".", "get_decoded_data", "(", "x_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "x_true", "=", "d", ".", "de_normalize_data", "(", "d", ".", "get_decoded_data", "(", "x_true", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "if", "batch_num", "==", "index", ":", "\n", "            ", "rand_idx", "=", "random", ".", "randrange", "(", "0", ",", "batch_size", "/", "2", "-", "1", ",", "1", ")", "\n", "print", "(", "'Likelihood: '", ",", "recon_err", ",", "kl_err", ",", "recon_err", "-", "kl_err", ")", "\n", "print", "(", "'X: '", ",", "x_true", ".", "iloc", "[", "rand_idx", ",", ":", "]", ")", "\n", "print", "(", "'Xpred: '", ",", "x_pred", ".", "iloc", "[", "rand_idx", ",", ":", "]", ")", "\n", "", "batch_num", "+=", "1", "\n", "\n", "", "ret", "=", "likelihood", "/", "batch_num", "\n", "print", "(", "'ELBO Avg: '", ",", "ret", ",", "train_size", ")", "\n", "print", "(", "'Valid CF Percentage: '", ",", "valid_cf_count", ",", "valid_cf_count", "/", "train_size", ")", "\n", "\n", "return", "ret", ",", "valid_cf_count", "/", "train_size", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.timeit-oracle-generative-cf.wrapper": [[33, 37], ["func"], "function", ["None"], ["def", "wrapper", "(", "func", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "def", "wrapped", "(", ")", ":", "\n", "        ", "return", "func", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "return", "wrapped", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.timeit-oracle-generative-cf.compute_loss": [[38, 111], ["normalise_weights.keys", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "pred_model", "torch.zeros().to", "torch.zeros().to", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "range", "print", "print", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.nn.functional.hinge_embedding_loss", "torch.nn.functional.hinge_embedding_loss", "normalise_weights.keys", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "pred_model", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.zeros", "torch.zeros", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.sum", "torch.sum", "torch.nn.functional.hinge_embedding_loss", "torch.nn.functional.hinge_embedding_loss", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.log", "torch.log", "torch.sum", "torch.sum", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.sum", "torch.sum", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid"], ["", "def", "compute_loss", "(", "model", ",", "model_out", ",", "x", ",", "target_label", ",", "normalise_weights", ",", "validity_reg", ",", "margin", ")", ":", "\n", "\n", "    ", "em", "=", "model_out", "[", "'em'", "]", "\n", "ev", "=", "model_out", "[", "'ev'", "]", "\n", "z", "=", "model_out", "[", "'z'", "]", "\n", "dm", "=", "model_out", "[", "'x_pred'", "]", "\n", "mc_samples", "=", "model_out", "[", "'mc_samples'", "]", "\n", "\n", "#KL Divergence", "\n", "kl_divergence", "=", "0.5", "*", "torch", ".", "mean", "(", "em", "**", "2", "+", "ev", "-", "torch", ".", "log", "(", "ev", ")", "-", "1", ",", "axis", "=", "1", ")", "\n", "\n", "#Reconstruction Term", "\n", "#Proximity: L1 Loss", "\n", "x_pred", "=", "dm", "[", "0", "]", "\n", "s", "=", "model", ".", "encoded_start_cat", "\n", "recon_err", "=", "-", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "x", "[", ":", ",", "s", ":", "-", "1", "]", "-", "x_pred", "[", ":", ",", "s", ":", "-", "1", "]", ")", ",", "axis", "=", "1", ")", "\n", "for", "key", "in", "normalise_weights", ".", "keys", "(", ")", ":", "\n", "# recon_err+= -(1/mad_feature_weights[d.encoded_feature_names[int(key)]])*(normalise_weights[key][1] - normalise_weights[key][0])*torch.abs(x[:,key] - x_pred[:,key]) ", "\n", "            ", "recon_err", "+=", "-", "(", "normalise_weights", "[", "key", "]", "[", "1", "]", "-", "normalise_weights", "[", "key", "]", "[", "0", "]", ")", "*", "torch", ".", "abs", "(", "x", "[", ":", ",", "key", "]", "-", "x_pred", "[", ":", ",", "key", "]", ")", "\n", "\n", "# Sum to 1 over the categorical indexes of a feature", "\n", "", "for", "v", "in", "model", ".", "encoded_categorical_feature_indexes", ":", "\n", "            ", "temp", "=", "-", "torch", ".", "abs", "(", "1.0", "-", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", "v", "[", "0", "]", ":", "v", "[", "-", "1", "]", "+", "1", "]", ",", "axis", "=", "1", ")", ")", "\n", "recon_err", "+=", "temp", "\n", "\n", "", "count", "=", "0", "\n", "count", "+=", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", ":", "s", "]", "<", "0", ",", "axis", "=", "1", ")", ".", "float", "(", ")", "\n", "count", "+=", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", ":", "s", "]", ">", "1", ",", "axis", "=", "1", ")", ".", "float", "(", ")", "\n", "\n", "#Validity         ", "\n", "temp_logits", "=", "pred_model", "(", "x_pred", ")", "\n", "#validity_loss = -F.cross_entropy(temp_logits, target_label)", "\n", "validity_loss", "=", "torch", ".", "zeros", "(", "1", ")", ".", "to", "(", "cuda", ")", "\n", "temp_1", "=", "temp_logits", "[", "target_label", "==", "1", ",", ":", "]", "\n", "temp_0", "=", "temp_logits", "[", "target_label", "==", "0", ",", ":", "]", "\n", "if", "torch", ".", "sum", "(", "target_label", "==", "1", ")", ":", "\n", "        ", "validity_loss", "+=", "F", ".", "hinge_embedding_loss", "(", "F", ".", "sigmoid", "(", "temp_1", "[", ":", ",", "1", "]", ")", ".", "to", "(", "cuda", ")", "-", "F", ".", "sigmoid", "(", "temp_1", "[", ":", ",", "0", "]", ")", ".", "to", "(", "cuda", ")", ",", "torch", ".", "tensor", "(", "-", "1", ")", ".", "to", "(", "cuda", ")", ",", "margin", ",", "reduction", "=", "'mean'", ")", "\n", "", "if", "torch", ".", "sum", "(", "target_label", "==", "0", ")", ":", "\n", "        ", "validity_loss", "+=", "F", ".", "hinge_embedding_loss", "(", "F", ".", "sigmoid", "(", "temp_0", "[", ":", ",", "0", "]", ")", ".", "to", "(", "cuda", ")", "-", "F", ".", "sigmoid", "(", "temp_0", "[", ":", ",", "1", "]", ")", ".", "to", "(", "cuda", ")", ",", "torch", ".", "tensor", "(", "-", "1", ")", ".", "to", "(", "cuda", ")", ",", "margin", ",", "reduction", "=", "'mean'", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "1", ",", "mc_samples", ")", ":", "\n", "        ", "x_pred", "=", "dm", "[", "i", "]", "\n", "\n", "recon_err", "+=", "-", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "x", "[", ":", ",", "s", ":", "-", "1", "]", "-", "x_pred", "[", ":", ",", "s", ":", "-", "1", "]", ")", ",", "axis", "=", "1", ")", "\n", "for", "key", "in", "normalise_weights", ".", "keys", "(", ")", ":", "\n", "# recon_err+= -(1/mad_feature_weights[d.encoded_feature_names[int(key)]])*(normalise_weights[key][1] - normalise_weights[key][0])*torch.abs( (x[:,key] - x_pred[:,key]))", "\n", "                ", "recon_err", "+=", "-", "(", "normalise_weights", "[", "key", "]", "[", "1", "]", "-", "normalise_weights", "[", "key", "]", "[", "0", "]", ")", "*", "torch", ".", "abs", "(", "x", "[", ":", ",", "key", "]", "-", "x_pred", "[", ":", ",", "key", "]", ")", "\n", "\n", "# Sum to 1 over the categorical indexes of a feature", "\n", "", "for", "v", "in", "model", ".", "encoded_categorical_feature_indexes", ":", "\n", "                ", "temp", "=", "-", "torch", ".", "abs", "(", "1.0", "-", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", "v", "[", "0", "]", ":", "v", "[", "-", "1", "]", "+", "1", "]", ",", "axis", "=", "1", ")", ")", "\n", "recon_err", "+=", "temp", "\n", "\n", "", "count", "+=", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", ":", "s", "]", "<", "0", ",", "axis", "=", "1", ")", ".", "float", "(", ")", "\n", "count", "+=", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", ":", "s", "]", ">", "1", ",", "axis", "=", "1", ")", ".", "float", "(", ")", "\n", "\n", "#Validity", "\n", "temp_logits", "=", "pred_model", "(", "x_pred", ")", "\n", "#validity_loss += -F.cross_entropy(temp_logits, target_label)", "\n", "temp_1", "=", "temp_logits", "[", "target_label", "==", "1", ",", ":", "]", "\n", "temp_0", "=", "temp_logits", "[", "target_label", "==", "0", ",", ":", "]", "\n", "\n", "if", "torch", ".", "sum", "(", "target_label", "==", "1", ")", ":", "\n", "            ", "validity_loss", "+=", "F", ".", "hinge_embedding_loss", "(", "F", ".", "sigmoid", "(", "temp_1", "[", ":", ",", "1", "]", ")", ".", "to", "(", "cuda", ")", "-", "F", ".", "sigmoid", "(", "temp_1", "[", ":", ",", "0", "]", ")", ".", "to", "(", "cuda", ")", ",", "torch", ".", "tensor", "(", "-", "1", ")", ".", "to", "(", "cuda", ")", ",", "margin", ",", "reduction", "=", "'mean'", ")", "\n", "", "if", "torch", ".", "sum", "(", "target_label", "==", "0", ")", ":", "\n", "            ", "validity_loss", "+=", "F", ".", "hinge_embedding_loss", "(", "F", ".", "sigmoid", "(", "temp_0", "[", ":", ",", "0", "]", ")", ".", "to", "(", "cuda", ")", "-", "F", ".", "sigmoid", "(", "temp_0", "[", ":", ",", "1", "]", ")", ".", "to", "(", "cuda", ")", ",", "torch", ".", "tensor", "(", "-", "1", ")", ".", "to", "(", "cuda", ")", ",", "margin", ",", "reduction", "=", "'mean'", ")", "\n", "\n", "", "", "recon_err", "=", "recon_err", "/", "mc_samples", "\n", "validity_loss", "=", "-", "1", "*", "validity_reg", "*", "validity_loss", "/", "mc_samples", "\n", "\n", "print", "(", "'Avg wrong cont dim: '", ",", "torch", ".", "mean", "(", "count", ")", "/", "mc_samples", ")", "\n", "print", "(", "'recon: '", ",", "-", "torch", ".", "mean", "(", "recon_err", ")", ",", "' KL: '", ",", "torch", ".", "mean", "(", "kl_divergence", ")", ",", "' Validity: '", ",", "-", "validity_loss", ")", "\n", "return", "-", "torch", ".", "mean", "(", "recon_err", "-", "kl_divergence", ")", "-", "validity_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.timeit-oracle-generative-cf.likelihood_score": [[112, 139], ["range", "len", "len", "len", "len", "good_score.append", "bad_score.append", "torch.mean", "torch.mean", "len", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.mean", "torch.mean", "torch.stack", "torch.stack", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "print", "torch.tensor", "torch.tensor", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "function", ["None"], ["", "def", "likelihood_score", "(", "x", ",", "label", ",", "mean", ")", ":", "\n", "        ", "good_score", "=", "[", "]", "\n", "bad_score", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "0", ",", "len", "(", "x", ")", ")", ":", "\n", "                ", "if", "label", "[", "idx", "]", "==", "1", ":", "\n", "# good_score.append( (x[idx] - mean[idx])*(1./logvar[idx])*(x[idx]-mean[idx] )) ", "\n", "# good_score.append( F.sigmoid( torch.exp( -.5 * ((x[idx] - mean[idx])*(1./logvar[idx])*(x[idx]-mean[idx]) )) )) ", "\n", "                        ", "good_score", ".", "append", "(", "torch", ".", "exp", "(", "-", ".5", "*", "(", "(", "x", "[", "idx", "]", "-", "mean", "[", "idx", "]", ")", "*", "(", "x", "[", "idx", "]", "-", "mean", "[", "idx", "]", ")", ")", ")", ")", "\n", "# good_score.append( torch.exp( -.5 * ((x[idx] - mean[idx])*(1./logvar[idx])*(x[idx]-mean[idx]) ))/torch.sqrt(torch.prod(logvar[idx])) ) ", "\n", "", "else", ":", "\n", "# bad_score.append( (x[idx] - mean[idx])*(1./logvar[idx])*(x[idx]-mean[idx]) )", "\n", "# bad_score.append( F.sigmoid( torch.exp( -.5 * ((x[idx] - mean[idx])*(1./logvar[idx])*(x[idx]-mean[idx]) ))  ))", "\n", "                        ", "bad_score", ".", "append", "(", "torch", ".", "exp", "(", "-", ".5", "*", "(", "(", "x", "[", "idx", "]", "-", "mean", "[", "idx", "]", ")", "*", "(", "x", "[", "idx", "]", "-", "mean", "[", "idx", "]", ")", ")", ")", ")", "\n", "# bad_score.append( torch.exp( -.5 * ((x[idx] - mean[idx])*(1./logvar[idx])*(x[idx]-mean[idx]) )  )/torch.sqrt(torch.prod(logvar[idx]))  )", "\n", "\n", "#     print( torch.mean(torch.stack(good_score)), torch.mean(torch.stack(bad_score)), (1-torch.mean(torch.stack(good_score))) + torch.mean(torch.stack(bad_score)))", "\n", "", "", "if", "len", "(", "good_score", ")", "and", "len", "(", "bad_score", ")", ":", "\n", "# print(torch.mean(torch.stack(good_score)), torch.mean(torch.stack(bad_score)))", "\n", "            ", "return", "(", "1", "-", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "good_score", ")", ")", ")", "+", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "bad_score", ")", ")", "\n", "#             return torch.mean(torch.stack(bad_score))", "\n", "", "elif", "len", "(", "good_score", ")", ":", "\n", "            ", "return", "(", "1", "-", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "good_score", ")", ")", ")", "\n", "", "elif", "len", "(", "bad_score", ")", ":", "\n", "            ", "return", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "bad_score", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Nope'", ")", "\n", "return", "torch", ".", "tensor", "(", "0.0", ")", "\n", "#     return torch.mean(torch.stack(bad_score))", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.timeit-oracle-generative-cf.train_cflabel_likelihood_loss": [[141, 186], ["numpy.array", "numpy.random.shuffle", "numpy.array_split", "numpy.array_split", "numpy.array_split", "range", "print", "range", "len", "optimizer.zero_grad", "torch.tensor().float().to", "torch.tensor().float().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().float().to", "torch.tensor().float().to", "model", "timeit-oracle-generative-cf.compute_loss", "timeit-oracle-generative-cf.likelihood_score", "range", "print", "compute_loss.item", "len", "torch.argmax", "torch.argmax", "timeit-oracle-generative-cf.likelihood_score", "likelihood_score.backward", "optimizer.step", "compute_loss.backward", "optimizer.step", "torch.tensor().float", "torch.tensor().float", "pred_model", "torch.tensor", "torch.tensor", "torch.tensor().float", "torch.tensor().float", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.timeit-base-generative-cf.compute_loss", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.timeit-oracle-generative-cf.likelihood_score", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.timeit-oracle-generative-cf.likelihood_score"], ["", "", "def", "train_cflabel_likelihood_loss", "(", "model", ",", "optimizer", ",", "normalise_weights", ",", "validity_reg", ",", "oracle_reg", ",", "margin", ",", "case", ",", "epochs", "=", "1000", ",", "batch_size", "=", "1024", ")", ":", "\n", "    ", "batch_num", "=", "0", "\n", "train_loss", "=", "0.0", "\n", "train_size", "=", "0", "\n", "\n", "rand", "=", "np", ".", "array", "(", "range", "(", "len", "(", "gen_cf_dataset", ")", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "rand", ")", "\n", "train_dataset_batches", "=", "np", ".", "array_split", "(", "gen_cf_dataset", "[", "rand", "]", ",", "gen_cf_dataset", ".", "shape", "[", "0", "]", "//", "batch_size", ",", "axis", "=", "0", ")", "\n", "train_inv_batches", "=", "np", ".", "array_split", "(", "gen_cf_inv", "[", "rand", "]", ",", "gen_cf_inv", ".", "shape", "[", "0", "]", "//", "batch_size", ",", "axis", "=", "0", ")", "\n", "train_label_batches", "=", "np", ".", "array_split", "(", "gen_cf_label", "[", "rand", "]", ",", "gen_cf_label", ".", "shape", "[", "0", "]", "//", "batch_size", ",", "axis", "=", "0", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "train_dataset_batches", ")", ")", ":", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "train_x", "=", "torch", ".", "tensor", "(", "train_inv_batches", "[", "i", "]", ")", ".", "float", "(", ")", ".", "to", "(", "cuda", ")", "\n", "train_y", "=", "1.0", "-", "torch", ".", "argmax", "(", "pred_model", "(", "train_x", ")", ",", "dim", "=", "1", ")", "\n", "train_cf_label", "=", "torch", ".", "tensor", "(", "train_label_batches", "[", "i", "]", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "cuda", ")", "\n", "gen_cf_x", "=", "torch", ".", "tensor", "(", "train_dataset_batches", "[", "i", "]", ")", ".", "float", "(", ")", ".", "to", "(", "cuda", ")", "\n", "train_size", "+=", "train_x", ".", "shape", "[", "0", "]", "\n", "\n", "out", "=", "model", "(", "train_x", ",", "train_y", ")", "\n", "loss", "=", "compute_loss", "(", "model", ",", "out", ",", "train_x", ",", "train_y", ",", "normalise_weights", ",", "validity_reg", ",", "margin", ")", "\n", "\n", "dm", "=", "out", "[", "'x_pred'", "]", "\n", "mc_samples", "=", "out", "[", "'mc_samples'", "]", "\n", "likelihood_loss", "=", "likelihood_score", "(", "gen_cf_x", ",", "train_cf_label", ",", "dm", "[", "0", "]", ")", "\n", "for", "j", "in", "range", "(", "1", ",", "mc_samples", ")", ":", "\n", "                    ", "likelihood_loss", "+=", "likelihood_score", "(", "gen_cf_x", ",", "train_cf_label", ",", "dm", "[", "j", "]", ")", "\n", "\n", "", "likelihood_loss", "=", "oracle_reg", "*", "likelihood_loss", "/", "mc_samples", "\n", "print", "(", "'Likelihood Score: '", ",", "likelihood_loss", ")", "\n", "\n", "loss", "+=", "likelihood_loss", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "\n", "batch_num", "+=", "1", "\n", "\n", "if", "case", ":", "\n", "                    ", "likelihood_loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "                    ", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "", "ret", "=", "train_loss", "/", "batch_num", "\n", "print", "(", "'Train Avg Loss: '", ",", "ret", ",", "train_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.timeit-oracle-generative-cf.test": [[187, 223], ["numpy.array_split", "random.randrange", "range", "print", "print", "len", "len", "torch.tensor().float().to", "torch.tensor().float().to", "torch.argmax", "torch.argmax", "model.compute_elbo", "train_y.cpu().numpy.cpu().numpy", "cf_label.cpu().numpy.cpu().numpy", "numpy.sum", "d.de_normalize_data", "d.de_normalize_data", "pred_model", "d.get_decoded_data", "d.get_decoded_data", "random.randrange", "print", "print", "print", "torch.tensor().float", "torch.tensor().float", "train_y.cpu().numpy.cpu", "cf_label.cpu().numpy.cpu", "d.de_normalize_data.detach().cpu().numpy", "d.de_normalize_data.detach().cpu().numpy", "torch.tensor", "torch.tensor", "d.de_normalize_data.detach().cpu", "d.de_normalize_data.detach().cpu", "d.de_normalize_data.detach", "d.de_normalize_data.detach"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.vae_model.CF_VAE.compute_elbo", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.de_normalize_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.dataloader.DataLoader.get_decoded_data"], ["", "def", "test", "(", "model", ",", "train_dataset", ",", "epochs", "=", "1", ",", "batch_size", "=", "2048", ")", ":", "\n", "    ", "batch_num", "=", "0", "\n", "likelihood", "=", "0.0", "\n", "valid_cf_count", "=", "0", "\n", "train_size", "=", "0", "\n", "train_dataset", "=", "np", ".", "array_split", "(", "train_dataset", ",", "train_dataset", ".", "shape", "[", "0", "]", "//", "batch_size", ",", "axis", "=", "0", ")", "\n", "index", "=", "random", ".", "randrange", "(", "0", ",", "len", "(", "train_dataset", ")", ",", "1", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "train_dataset", ")", ")", ":", "\n", "\n", "        ", "train_x", "=", "train_dataset", "[", "i", "]", "\n", "train_x", "=", "torch", ".", "tensor", "(", "train_x", ")", ".", "float", "(", ")", ".", "to", "(", "cuda", ")", "\n", "train_y", "=", "torch", ".", "argmax", "(", "pred_model", "(", "train_x", ")", ",", "dim", "=", "1", ")", "\n", "train_size", "+=", "train_x", ".", "shape", "[", "0", "]", "\n", "\n", "recon_err", ",", "kl_err", ",", "x_true", ",", "x_pred", ",", "cf_label", "=", "model", ".", "compute_elbo", "(", "train_x", ",", "1.0", "-", "train_y", ",", "pred_model", ")", "\n", "likelihood", "+=", "recon_err", "-", "kl_err", "\n", "\n", "train_y", "=", "train_y", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "cf_label", "=", "cf_label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "valid_cf_count", "+=", "np", ".", "sum", "(", "train_y", "!=", "cf_label", ")", "\n", "\n", "x_pred", "=", "d", ".", "de_normalize_data", "(", "d", ".", "get_decoded_data", "(", "x_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "x_true", "=", "d", ".", "de_normalize_data", "(", "d", ".", "get_decoded_data", "(", "x_true", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "if", "batch_num", "==", "index", ":", "\n", "            ", "rand_idx", "=", "random", ".", "randrange", "(", "0", ",", "batch_size", "/", "2", "-", "1", ",", "1", ")", "\n", "print", "(", "'Likelihood: '", ",", "recon_err", ",", "kl_err", ",", "recon_err", "-", "kl_err", ")", "\n", "print", "(", "'X: '", ",", "x_true", ".", "iloc", "[", "rand_idx", ",", ":", "]", ")", "\n", "print", "(", "'Xpred: '", ",", "x_pred", ".", "iloc", "[", "rand_idx", ",", ":", "]", ")", "\n", "", "batch_num", "+=", "1", "\n", "\n", "", "ret", "=", "likelihood", "/", "batch_num", "\n", "print", "(", "'ELBO Avg: '", ",", "ret", ",", "train_size", ")", "\n", "print", "(", "'Valid CF Percentage: '", ",", "valid_cf_count", ",", "valid_cf_count", "/", "train_size", ")", "\n", "\n", "return", "ret", ",", "valid_cf_count", "/", "train_size", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.timeit-base-generative-cf.wrapper": [[32, 36], ["func"], "function", ["None"], ["    ", "def", "wrapped", "(", ")", ":", "\n", "        ", "return", "func", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "return", "wrapped", "\n", "\n", "", "def", "compute_loss", "(", "model", ",", "model_out", ",", "x", ",", "target_label", ",", "validity_reg", ",", "margin", ")", ":", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.timeit-base-generative-cf.compute_loss": [[37, 104], ["normalise_weights.keys", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "pred_model", "torch.zeros().to", "torch.zeros().to", "torch.nn.functional.hinge_embedding_loss", "torch.nn.functional.hinge_embedding_loss", "range", "print", "print", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "normalise_weights.keys", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "pred_model", "torch.nn.functional.hinge_embedding_loss", "torch.nn.functional.hinge_embedding_loss", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.zeros", "torch.zeros", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.sum", "torch.sum", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.nn.functional.sigmoid().to", "torch.log", "torch.log", "torch.sum", "torch.sum", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.sum", "torch.sum", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.simple-bn-gen.sigmoid"], ["\n", "    ", "em", "=", "model_out", "[", "'em'", "]", "\n", "ev", "=", "model_out", "[", "'ev'", "]", "\n", "z", "=", "model_out", "[", "'z'", "]", "\n", "dm", "=", "model_out", "[", "'x_pred'", "]", "\n", "mc_samples", "=", "model_out", "[", "'mc_samples'", "]", "\n", "#KL Divergence", "\n", "kl_divergence", "=", "0.5", "*", "torch", ".", "mean", "(", "em", "**", "2", "+", "ev", "-", "torch", ".", "log", "(", "ev", ")", "-", "1", ",", "axis", "=", "1", ")", "\n", "\n", "#Reconstruction Term", "\n", "#Proximity: L1 Loss", "\n", "x_pred", "=", "dm", "[", "0", "]", "\n", "# s would be zero hence it won't make a difference, and it will be simply like a proximity term", "\n", "s", "=", "model", ".", "encoded_start_cat", "\n", "recon_err", "=", "-", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "x", "[", ":", ",", "s", ":", "-", "1", "]", "-", "x_pred", "[", ":", ",", "s", ":", "-", "1", "]", ")", ",", "axis", "=", "1", ")", "\n", "\n", "count", "=", "0", "\n", "count", "+=", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", ":", "s", "]", "<", "0", ",", "axis", "=", "1", ")", ".", "float", "(", ")", "\n", "count", "+=", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", ":", "s", "]", ">", "1", ",", "axis", "=", "1", ")", ".", "float", "(", ")", "\n", "\n", "#Validity         ", "\n", "temp_logits", "=", "pred_model", "(", "x_pred", ")", "\n", "#validity_loss = -F.cross_entropy(temp_logits, target_label)    ", "\n", "validity_loss", "=", "torch", ".", "zeros", "(", "1", ")", ".", "to", "(", "cuda", ")", "\n", "\n", "#Loop over total number of classes to compute the Hinge Loss", "\n", "num_classes", "=", "10", "\n", "for", "t_c", "in", "range", "(", "num_classes", ")", ":", "\n", "# Compute the validity_loss for data points with target class t_c in the given batch", "\n", "        ", "temp", "=", "temp_logits", "[", "target_label", "==", "t_c", ",", ":", "]", "\n", "if", "temp", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "#No data point in this batch with the target class t_c", "\n", "            ", "continue", "\n", "", "target_class_batch_score", "=", "temp", "[", ":", ",", "t_c", "]", "\n", "if", "t_c", "==", "0", ":", "\n", "            ", "temp", "=", "temp", "[", ":", ",", "t_c", "+", "1", ":", "]", "\n", "# Max along the batch axis in the tensor; torch.max returns both (values, indices) and taking the first argument gives values", "\n", "other_class_batch_score", "=", "torch", ".", "max", "(", "temp", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "", "elif", "t_c", "==", "num_classes", "-", "1", ":", "\n", "            ", "temp", "=", "temp", "[", ":", ",", ":", "t_c", "]", "\n", "# Max along the batch axis in the tensor", "\n", "other_class_batch_score", "=", "torch", ".", "max", "(", "temp", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "# Concatenate the tensors along the Non Batch Axis", "\n", "            ", "temp", "=", "torch", ".", "cat", "(", "(", "temp", "[", ":", ",", ":", "t_c", "]", ",", "temp", "[", ":", ",", "t_c", "+", "1", ":", "]", ")", ",", "dim", "=", "1", ")", "\n", "# Max along the batch axis in the tensor", "\n", "other_class_batch_score", "=", "torch", ".", "max", "(", "temp", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "\n", "", "validity_loss", "+=", "F", ".", "hinge_embedding_loss", "(", "F", ".", "sigmoid", "(", "target_class_batch_score", ")", ".", "to", "(", "cuda", ")", "-", "F", ".", "sigmoid", "(", "other_class_batch_score", ")", ".", "to", "(", "cuda", ")", ",", "torch", ".", "tensor", "(", "-", "1", ")", ".", "to", "(", "cuda", ")", ",", "margin", ",", "reduction", "=", "'mean'", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "1", ",", "mc_samples", ")", ":", "\n", "        ", "x_pred", "=", "dm", "[", "i", "]", "\n", "\n", "recon_err", "+=", "-", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "x", "[", ":", ",", "s", ":", "-", "1", "]", "-", "x_pred", "[", ":", ",", "s", ":", "-", "1", "]", ")", ",", "axis", "=", "1", ")", "\n", "\n", "count", "+=", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", ":", "s", "]", "<", "0", ",", "axis", "=", "1", ")", ".", "float", "(", ")", "\n", "count", "+=", "torch", ".", "sum", "(", "x_pred", "[", ":", ",", ":", "s", "]", ">", "1", ",", "axis", "=", "1", ")", ".", "float", "(", ")", "\n", "\n", "#Validity", "\n", "temp_logits", "=", "pred_model", "(", "x_pred", ")", "\n", "#         validity_loss += -F.cross_entropy(temp_logits, target_label)      ", "\n", "\n", "#Loop over total number of classes to compute the Hinge Loss", "\n", "num_classes", "=", "10", "\n", "for", "t_c", "in", "range", "(", "num_classes", ")", ":", "\n", "# Compute the validity_loss for data points with target class t_c in the given batch", "\n", "            ", "temp", "=", "temp_logits", "[", "target_label", "==", "t_c", ",", ":", "]", "\n", "if", "temp", ".", "shape", "[", "0", "]", "==", "0", ":", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.timeit-base-generative-cf.traverse": [[106, 118], ["numpy.array_split", "range", "print", "len", "torch.tensor().float().to", "torch.tensor().float().to", "torch.argmax", "torch.argmax", "print", "pred_model", "numpy.unique", "torch.tensor().float", "torch.tensor().float", "torch.argmax.cpu", "torch.tensor", "torch.tensor"], "function", ["None"], ["                ", "continue", "\n", "", "target_class_batch_score", "=", "temp", "[", ":", ",", "t_c", "]", "\n", "\n", "if", "t_c", "==", "0", ":", "\n", "                ", "temp", "=", "temp", "[", ":", ",", "t_c", "+", "1", ":", "]", "\n", "# Max along the batch axis in the tensor; torch.max returns both (values, indices) and taking the first argument gives values", "\n", "other_class_batch_score", "=", "torch", ".", "max", "(", "temp", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "", "elif", "t_c", "==", "num_classes", "-", "1", ":", "\n", "                ", "temp", "=", "temp", "[", ":", ",", ":", "t_c", "]", "\n", "# Max along the batch axis in the tensor", "\n", "other_class_batch_score", "=", "torch", ".", "max", "(", "temp", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "# Concatenate the tensors along the Non Batch Axis", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.timeit-base-generative-cf.train": [[119, 145], ["torch.tensor().float().to", "torch.tensor().float().to", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "enumerate", "print", "optimizer.zero_grad", "model", "timeit-base-generative-cf.compute_loss", "compute_loss.backward", "compute_loss.item", "optimizer.step", "torch.tensor().float", "torch.tensor().float", "torch.argmax", "torch.argmax", "pred_model", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.timeit-base-generative-cf.compute_loss"], ["                ", "temp", "=", "torch", ".", "cat", "(", "(", "temp", "[", ":", ",", ":", "t_c", "]", ",", "temp", "[", ":", ",", "t_c", "+", "1", ":", "]", ")", ",", "dim", "=", "1", ")", "\n", "# Max along the batch axis in the tensor", "\n", "other_class_batch_score", "=", "torch", ".", "max", "(", "temp", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "\n", "", "validity_loss", "+=", "F", ".", "hinge_embedding_loss", "(", "F", ".", "sigmoid", "(", "target_class_batch_score", ")", ".", "to", "(", "cuda", ")", "-", "F", ".", "sigmoid", "(", "other_class_batch_score", ")", ".", "to", "(", "cuda", ")", ",", "torch", ".", "tensor", "(", "-", "1", ")", ".", "to", "(", "cuda", ")", ",", "margin", ",", "reduction", "=", "'mean'", ")", "\n", "\n", "", "", "recon_err", "=", "recon_err", "/", "mc_samples", "\n", "validity_loss", "=", "-", "1", "*", "validity_reg", "*", "validity_loss", "/", "mc_samples", "\n", "\n", "print", "(", "'Avg wrong cont dim: '", ",", "torch", ".", "mean", "(", "count", ")", "/", "mc_samples", ")", "\n", "print", "(", "'recon: '", ",", "-", "torch", ".", "mean", "(", "recon_err", ")", ",", "' KL: '", ",", "torch", ".", "mean", "(", "kl_divergence", ")", ",", "' Validity: '", ",", "-", "validity_loss", ")", "\n", "return", "-", "torch", ".", "mean", "(", "recon_err", "-", "kl_divergence", ")", "-", "validity_loss", "\n", "\n", "\n", "", "def", "traverse", "(", "train_dataset", ",", "epochs", "=", "1", ",", "batch_size", "=", "128", ")", ":", "\n", "    ", "batch_num", "=", "0", "\n", "loss", "=", "0.0", "\n", "train_size", "=", "0", "\n", "train_dataset", "=", "np", ".", "array_split", "(", "train_dataset", ",", "train_dataset", ".", "shape", "[", "0", "]", "//", "batch_size", ",", "axis", "=", "0", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "train_dataset", ")", ")", ":", "\n", "        ", "train_x", "=", "train_dataset", "[", "i", "]", "\n", "train_x", "=", "torch", ".", "tensor", "(", "train_x", ")", ".", "float", "(", ")", ".", "to", "(", "cuda", ")", "\n", "train_y", "=", "torch", ".", "argmax", "(", "pred_model", "(", "train_x", ")", ",", "dim", "=", "1", ")", "\n", "train_size", "+=", "train_x", ".", "shape", "[", "0", "]", "\n", "print", "(", "np", ".", "unique", "(", "train_y", ".", "cpu", "(", ")", ",", "return_counts", "=", "True", ")", ")", "\n", "", "print", "(", "train_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.timeit-base-generative-cf.test": [[146, 176], ["numpy.array_split", "random.randrange", "range", "len", "len", "torch.tensor().float().to", "torch.tensor().float().to", "torch.argmax", "torch.argmax", "model.forward", "timeit-base-generative-cf.wrapper", "timeit.timeit", "print", "print", "print", "pred_model", "torch.tensor().float", "torch.tensor().float", "str", "str", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.divyat09_cf-feasibility.scripts.blackboxmodel.BlackBox.forward", "home.repos.pwc.inspect_result.divyat09_cf-feasibility.generativecf.timeit-base-generative-cf.wrapper"], ["", "def", "generate_target_labels", "(", "train_y", ")", ":", "\n", "\n", "    ", "target_y", "=", "train_y", ".", "clone", "(", ")", "\n", "#print(train_y[:10])", "\n", "\n", "target_y", "[", "train_y", "==", "0", "]", "=", "8", "\n", "target_y", "[", "train_y", "==", "1", "]", "=", "7", "\n", "target_y", "[", "train_y", "==", "2", "]", "=", "3", "\n", "target_y", "[", "train_y", "==", "3", "]", "=", "5", "\n", "target_y", "[", "train_y", "==", "4", "]", "=", "9", "\n", "target_y", "[", "train_y", "==", "5", "]", "=", "8", "\n", "target_y", "[", "train_y", "==", "6", "]", "=", "8", "\n", "target_y", "[", "train_y", "==", "7", "]", "=", "9", "\n", "target_y", "[", "train_y", "==", "8", "]", "=", "9", "\n", "target_y", "[", "train_y", "==", "9", "]", "=", "7", "\n", "#print(target_y[:10])", "\n", "\n", "return", "target_y", "\n", "\n", "", "def", "ae_reconstruct_loss_im1", "(", "model", ",", "x", ")", ":", "\n", "\n", "    ", "x", "=", "x", ".", "view", "(", "1", ",", "x", ".", "shape", "[", "0", "]", ")", "\n", "\n", "model_out", "=", "model", "(", "x", ")", "\n", "em", "=", "model_out", "[", "'em'", "]", "\n", "ev", "=", "model_out", "[", "'ev'", "]", "\n", "z", "=", "model_out", "[", "'z'", "]", "\n", "dm", "=", "model_out", "[", "'x_pred'", "]", "\n", "mc_samples", "=", "model_out", "[", "'mc_samples'", "]", "\n", "\n", "#Reconstruction Term", "\n"]]}