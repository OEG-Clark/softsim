{"home.repos.pwc.inspect_result.xavierfav_coala.None.train_cnn.train": [[26, 109], ["data_loader.InMemoryDataset", "data_loader.InMemoryDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.device", "print", "pathlib.Path", "models_t1000.CNN().to", "torch.optim.SGD", "torch.nn.BCELoss", "range", "pathlib.Path.exists", "pathlib.Path.mkdir", "CNN().to.parameters", "CNN().to.train", "enumerate", "print", "CNN().to.eval", "models_t1000.CNN", "data.view().to", "tags.float().clamp().to.float().to", "CNN().to.", "nn.BCELoss.", "optim.SGD.zero_grad", "loss_function.backward", "optim.SGD.step", "loss_function.item", "torch.save", "torch.no_grad", "enumerate", "print", "print", "CNN().to.state_dict", "str", "data.view().clamp().to", "tags.float().clamp().to.float().clamp().to", "CNN().to.", "nn.BCELoss.", "loss_function.item", "data.view", "tags.float().clamp().to.float", "pathlib.Path", "len", "loss_function.item", "len", "data.view().clamp", "tags.float().clamp().to.float().clamp", "len", "len", "len", "data.view", "tags.float().clamp().to.float"], "function", ["home.repos.pwc.inspect_result.xavierfav_coala.None.dual_ae_trainer.DualAETrainer.train"], ["def", "train", "(", ")", ":", "\n", "# Data loaders", "\n", "    ", "loader_params", "=", "{", "\n", "'batch_size'", ":", "BATCH_SIZE", ",", "\n", "'shuffle'", ":", "True", ",", "\n", "'num_workers'", ":", "1", ",", "\n", "'drop_last'", ":", "True", ",", "\n", "}", "\n", "\n", "dataset_train", "=", "InMemoryDataset", "(", "TRAIN_DATASET_FILE", ")", "\n", "dataset_val", "=", "InMemoryDataset", "(", "VALIDATION_DATASET_FILE", ")", "\n", "train_loader", "=", "DataLoader", "(", "dataset_train", ",", "**", "loader_params", ")", "\n", "val_loader", "=", "DataLoader", "(", "dataset_val", ",", "**", "loader_params", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "DEVICE", ")", "\n", "print", "(", "device", ")", "\n", "\n", "# folder for model checkpoints", "\n", "model_checkpoints_folder", "=", "Path", "(", "'saved_models'", ",", "'cnn'", ")", "\n", "if", "not", "model_checkpoints_folder", ".", "exists", "(", ")", ":", "\n", "        ", "model_checkpoints_folder", ".", "mkdir", "(", ")", "\n", "\n", "# models", "\n", "", "cnn", "=", "CNN", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "# optimizers", "\n", "cnn_opt", "=", "optim", ".", "SGD", "(", "cnn", ".", "parameters", "(", ")", ",", "lr", "=", "LEARNING_RATE", ")", "\n", "\n", "loss_function", "=", "nn", ".", "BCELoss", "(", ")", "\n", "\n", "# Training loop", "\n", "for", "epoch", "in", "range", "(", "1", ",", "EPOCHS", "+", "1", ")", ":", "\n", "\n", "# Train", "\n", "        ", "cnn", ".", "train", "(", ")", "\n", "\n", "train_loss", "=", "0", "\n", "\n", "for", "batch_idx", ",", "(", "data", ",", "tags", ",", "_", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "x", "=", "data", ".", "view", "(", "-", "1", ",", "1", ",", "96", ",", "96", ")", ".", "to", "(", "device", ")", "\n", "tags", "=", "tags", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "z", ",", "y", "=", "cnn", "(", "x", ")", "\n", "\n", "loss", "=", "loss_function", "(", "y", ",", "tags", ")", "\n", "\n", "cnn_opt", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "cnn_opt", ".", "step", "(", ")", "\n", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "if", "batch_idx", "%", "200", "==", "0", ":", "\n", "                ", "print", "(", "'Train Epoch: {} [{}/{} ({:.0f}%)]\\tLoss: {:.6f}'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", "*", "len", "(", "data", ")", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "batch_idx", "/", "len", "(", "train_loader", ")", ",", "\n", "loss", ".", "item", "(", ")", ")", ")", "\n", "\n", "", "", "print", "(", "'====> Epoch: {} Loss: {:.6f}'", ".", "format", "(", "\n", "epoch", ",", "train_loss", "/", "len", "(", "train_loader", ".", "dataset", ")", "*", "BATCH_SIZE", ")", ")", "\n", "\n", "if", "epoch", "%", "SAVE_MODEL_EVERY", "==", "0", ":", "\n", "            ", "torch", ".", "save", "(", "cnn", ".", "state_dict", "(", ")", ",", "\n", "str", "(", "Path", "(", "f'saved_models'", ",", "'cnn'", ",", "f'audio_encoder_epoch_{epoch}.pt'", ")", ")", ")", "\n", "\n", "# Validation", "\n", "", "cnn", ".", "eval", "(", ")", "\n", "\n", "val_loss", "=", "0", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "(", "data", ",", "_", ",", "sound_ids", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "                ", "x", "=", "data", ".", "view", "(", "-", "1", ",", "1", ",", "96", ",", "96", ")", ".", "clamp", "(", "0", ")", ".", "to", "(", "device", ")", "\n", "tags", "=", "tags", ".", "float", "(", ")", ".", "clamp", "(", "0", ")", ".", "to", "(", "device", ")", "\n", "\n", "z", ",", "y", "=", "cnn", "(", "x", ")", "\n", "\n", "loss", "=", "loss_function", "(", "y", ",", "tags", ")", "\n", "\n", "val_loss", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "", "print", "(", "'====> Test set loss: {:.6f}'", ".", "format", "(", "\n", "val_loss", "/", "len", "(", "val_loader", ".", "dataset", ")", "*", "BATCH_SIZE", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xavierfav_coala.None.train_dual_ae.main": [[7, 13], ["json.load", "print", "print", "dual_ae_trainer.DualAETrainer", "dual_ae_trainer.DualAETrainer.train", "open", "json.dumps"], "function", ["home.repos.pwc.inspect_result.xavierfav_coala.None.dual_ae_trainer.DualAETrainer.train"], ["def", "main", "(", "config_file", ")", ":", "\n", "    ", "params", "=", "json", ".", "load", "(", "open", "(", "config_file", ",", "'rb'", ")", ")", "\n", "print", "(", "\"Training Dual AutoEncoder with params:\"", ")", "\n", "print", "(", "json", ".", "dumps", "(", "params", ",", "separators", "=", "(", "\"\\n\"", ",", "\": \"", ")", ",", "indent", "=", "4", ")", ")", "\n", "trainer", "=", "DualAETrainer", "(", "params", ")", "\n", "trainer", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xavierfav_coala.None.data_loader.HDF5Dataset.__init__": [[9, 13], ["h5py.File", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "h5_path", ")", ":", "\n", "        ", "self", ".", "h5_path", "=", "h5_path", "\n", "self", ".", "h_file", "=", "h5py", ".", "File", "(", "h5_path", ",", "'r'", ")", "\n", "self", ".", "length", "=", "len", "(", "self", ".", "h_file", "[", "'dataset'", "]", "[", "'id'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xavierfav_coala.None.data_loader.HDF5Dataset.__getitem__": [[14, 19], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "data", "=", "self", ".", "h_file", "[", "'dataset'", "]", "[", "'data'", "]", "[", "index", "]", "\n", "label", "=", "self", ".", "h_file", "[", "'dataset'", "]", "[", "'label'", "]", "[", "index", "]", "\n", "sound_id", "=", "self", ".", "h_file", "[", "'dataset'", "]", "[", "'id'", "]", "[", "index", "]", "\n", "return", "data", ",", "label", ",", "sound_id", "\n", "\n"]], "home.repos.pwc.inspect_result.xavierfav_coala.None.data_loader.HDF5Dataset.__len__": [[20, 22], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.xavierfav_coala.None.data_loader.InMemoryDataset.__init__": [[25, 32], ["h5py.File", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "h5_path", ")", ":", "\n", "        ", "self", ".", "h5_path", "=", "h5_path", "\n", "with", "h5py", ".", "File", "(", "h5_path", ",", "'r'", ")", "as", "h_file", ":", "\n", "            ", "self", ".", "data", "=", "h_file", "[", "'dataset'", "]", "[", "'data'", "]", "[", ":", "]", "\n", "self", ".", "label", "=", "h_file", "[", "'dataset'", "]", "[", "'label'", "]", "[", ":", "]", "\n", "self", ".", "id", "=", "h_file", "[", "'dataset'", "]", "[", "'id'", "]", "[", ":", "]", "\n", "self", ".", "length", "=", "len", "(", "self", ".", "id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xavierfav_coala.None.data_loader.InMemoryDataset.__getitem__": [[33, 35], ["None"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "data", "[", "index", "]", ",", "self", ".", "label", "[", "index", "]", ",", "self", ".", "id", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xavierfav_coala.None.data_loader.InMemoryDataset.__len__": [[36, 38], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xavierfav_coala.None.encode.return_loaded_model": [[24, 29], ["Model", "Model.load_state_dict", "Model.eval", "torch.load", "torch.device"], "function", ["None"], ["def", "return_loaded_model", "(", "Model", ",", "checkpoint", ")", ":", "\n", "    ", "model", "=", "Model", "(", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "checkpoint", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", ")", "\n", "model", ".", "eval", "(", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.xavierfav_coala.None.encode.extract_audio_embedding": [[31, 43], ["torch.no_grad", "scaler.transform", "torch.unsqueeze().float", "model", "utils.compute_spectrogram", "print", "torch.unsqueeze", "torch.unsqueeze", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.xavierfav_coala.None.utils.compute_spectrogram"], ["", "def", "extract_audio_embedding", "(", "model", ",", "filename", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "x", "=", "compute_spectrogram", "(", "filename", ")", "[", ":", "96", ",", ":", "96", "]", "\n", "x", "=", "scaler", ".", "transform", "(", "x", ")", "\n", "x", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "unsqueeze", "(", "torch", ".", "tensor", "(", "x", ")", ",", "0", ")", ",", "0", ")", ".", "float", "(", ")", "\n", "embedding", ",", "embedding_d", "=", "model", "(", "x", ")", "\n", "return", "embedding", ",", "embedding_d", "\n", "", "except", "KeyboardInterrupt", ":", "\n", "            ", "return", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "e", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xavierfav_coala.None.encode.extract_audio_embedding_chunks": [[45, 58], ["torch.no_grad", "utils.compute_spectrogram", "numpy.array", "torch.unsqueeze", "model", "torch.tensor", "print", "scaler.transform", "librosa.util.frame", "numpy.asfortranarray"], "function", ["home.repos.pwc.inspect_result.xavierfav_coala.None.utils.compute_spectrogram"], ["", "", "", "def", "extract_audio_embedding_chunks", "(", "model", ",", "filename", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "x", "=", "compute_spectrogram", "(", "filename", ")", "\n", "x_chunks", "=", "np", ".", "array", "(", "[", "scaler", ".", "transform", "(", "chunk", ".", "T", ")", "for", "chunk", "in", "\n", "librosa", ".", "util", ".", "frame", "(", "np", ".", "asfortranarray", "(", "x", ")", ",", "frame_length", "=", "96", ",", "hop_length", "=", "96", ",", "axis", "=", "-", "1", ")", ".", "T", "]", ")", "\n", "x_chunks", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "tensor", "(", "x_chunks", ")", ",", "1", ")", "\n", "embedding_chunks", ",", "embedding_d_chunks", "=", "model", "(", "x_chunks", ")", "\n", "return", "embedding_chunks", ",", "embedding_d_chunks", "\n", "", "except", "KeyboardInterrupt", ":", "\n", "            ", "return", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "e", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xavierfav_coala.None.encode.extract_tag_embedding": [[60, 71], ["torch.no_grad", "torch.tensor().view().float", "model", "print", "torch.tensor().view", "int", "torch.tensor", "numpy.zeros"], "function", ["None"], ["", "", "", "def", "extract_tag_embedding", "(", "model", ",", "tag", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "tag_vector", "=", "torch", ".", "tensor", "(", "np", ".", "zeros", "(", "1000", ")", ")", ".", "view", "(", "1", ",", "1000", ")", ".", "float", "(", ")", "\n", "tag_vector", "[", "0", ",", "int", "(", "tag2id", "[", "tag", "]", ")", "]", "=", "1", "\n", "embedding", ",", "_", "=", "model", "(", "tag_vector", ")", "\n", "return", "embedding", "\n", "", "except", "KeyboardInterrupt", ":", "\n", "            ", "return", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "e", ",", "tag", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xavierfav_coala.None.eval.create_folds": [[81, 95], ["pandas.read_csv().values.tolist", "collections.defaultdict", "range", "[].append", "[].append", "pandas.read_csv", "numpy.load", "pathlib.Path", "file_name.split"], "function", ["None"], ["def", "create_folds", "(", "embedding_folder", ")", ":", "\n", "# slice_file_name\tfsID\tstart\tend\t    salience\tfold\tclassID\t    class", "\n", "    ", "data", "=", "pd", ".", "read_csv", "(", "US8K_MEDATADA_FILE", ",", "error_bad_lines", "=", "False", ")", ".", "values", ".", "tolist", "(", ")", "\n", "folds", "=", "[", "defaultdict", "(", "list", ")", "for", "_", "in", "range", "(", "10", ")", "]", "\n", "for", "d", "in", "data", ":", "\n", "        ", "try", ":", "\n", "            ", "fold_idx", "=", "d", "[", "5", "]", "-", "1", "\n", "class_idx", "=", "d", "[", "6", "]", "\n", "file_name", "=", "d", "[", "0", "]", "\n", "folds", "[", "fold_idx", "]", "[", "'X'", "]", ".", "append", "(", "np", ".", "load", "(", "Path", "(", "embedding_folder", ",", "f'{file_name.split(\".\")[0]}.npy'", ")", ")", ")", "\n", "folds", "[", "fold_idx", "]", "[", "'y'", "]", ".", "append", "(", "class_idx", ")", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "", "", "return", "folds", "\n", "\n"]], "home.repos.pwc.inspect_result.xavierfav_coala.None.eval.return_other_fold_indexes": [[96, 98], ["range"], "function", ["None"], ["", "def", "return_other_fold_indexes", "(", "test_fold_idx", ")", ":", "\n", "    ", "return", "[", "i", "for", "i", "in", "range", "(", "10", ")", "if", "i", "!=", "test_fold_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xavierfav_coala.None.eval.eval_US8K": [[99, 128], ["eval.create_folds", "enumerate", "print", "numpy.mean", "eval.return_other_fold_indexes", "numpy.array().squeeze", "numpy.array", "numpy.array().squeeze", "numpy.array", "sklearn.preprocessing.StandardScaler", "sklearn.preprocessing.StandardScaler.fit", "sklearn.preprocessing.StandardScaler.transform", "sklearn.neural_network.MLPClassifier", "sklearn.neural_network.MLPClassifier.fit", "sklearn.preprocessing.StandardScaler.transform", "scores.append", "list", "len", "X.mean.mean", "len", "X_test.mean.mean", "sklearn.neural_network.MLPClassifier.score", "numpy.array", "itertools.chain", "numpy.array", "numpy.mean", "list", "itertools.chain"], "function", ["home.repos.pwc.inspect_result.xavierfav_coala.None.eval.create_folds", "home.repos.pwc.inspect_result.xavierfav_coala.None.eval.return_other_fold_indexes"], ["", "def", "eval_US8K", "(", "embedding_folder", ")", ":", "\n", "    ", "folds", "=", "create_folds", "(", "embedding_folder", ")", "\n", "\n", "scores", "=", "[", "]", "\n", "\n", "for", "fold_idx", ",", "test_fold", "in", "enumerate", "(", "folds", ")", ":", "\n", "        ", "other_fold_indexes", "=", "return_other_fold_indexes", "(", "fold_idx", ")", "\n", "X", "=", "np", ".", "array", "(", "list", "(", "chain", "(", "*", "[", "folds", "[", "idx", "]", "[", "'X'", "]", "for", "idx", "in", "other_fold_indexes", "]", ")", ")", ")", ".", "squeeze", "(", ")", "\n", "y", "=", "np", ".", "array", "(", "list", "(", "chain", "(", "*", "[", "folds", "[", "idx", "]", "[", "'y'", "]", "for", "idx", "in", "other_fold_indexes", "]", ")", ")", ")", "\n", "X_test", "=", "np", ".", "array", "(", "test_fold", "[", "'X'", "]", ")", ".", "squeeze", "(", ")", "\n", "y_test", "=", "np", ".", "array", "(", "test_fold", "[", "'y'", "]", ")", "\n", "\n", "if", "len", "(", "X_test", ".", "shape", ")", ">", "2", ":", "\n", "            ", "X", "=", "X", ".", "mean", "(", "axis", "=", "1", ")", "\n", "", "scaler", "=", "StandardScaler", "(", ")", "\n", "scaler", ".", "fit", "(", "X", ")", "\n", "X", "=", "scaler", ".", "transform", "(", "X", ")", "\n", "\n", "clf", "=", "MLPClassifier", "(", "hidden_layer_sizes", "=", "(", "256", ",", ")", ")", "\n", "clf", ".", "fit", "(", "X", ",", "y", ")", "\n", "\n", "if", "len", "(", "X_test", ".", "shape", ")", ">", "2", ":", "\n", "            ", "X_test", "=", "X_test", ".", "mean", "(", "axis", "=", "1", ")", "\n", "", "X_test", "=", "scaler", ".", "transform", "(", "X_test", ")", "\n", "scores", ".", "append", "(", "clf", ".", "score", "(", "X_test", ",", "y_test", ")", ")", "\n", "\n", "", "print", "(", "f'\\nScores: {scores}, mean: {np.mean(scores)}\\n'", ")", "\n", "\n", "return", "np", ".", "mean", "(", "scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xavierfav_coala.None.eval.create_dataset_gtzan": [[131, 160], ["pandas.read_csv().values.tolist", "pandas.read_csv().values.tolist", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "pathlib.Path", "np.array.append", "np.array.append", "pathlib.Path", "np.array.append", "np.array.append", "pathlib.Path", "numpy.load", "pathlib.Path", "numpy.load", "pandas.read_csv", "pandas.read_csv", "pathlib.Path.stem.split", "pathlib.Path.stem.split"], "function", ["None"], ["", "def", "create_dataset_gtzan", "(", "embedding_folder", ")", ":", "\n", "    ", "train_files", "=", "pd", ".", "read_csv", "(", "GTZAN_TRAIN_FILE", ",", "error_bad_lines", "=", "False", ")", ".", "values", ".", "tolist", "(", ")", "\n", "test_files", "=", "pd", ".", "read_csv", "(", "GTZAN_TEST_FILE", ",", "error_bad_lines", "=", "False", ")", ".", "values", ".", "tolist", "(", ")", "\n", "\n", "X_train", "=", "[", "]", "\n", "y_train", "=", "[", "]", "\n", "X_test", "=", "[", "]", "\n", "y_test", "=", "[", "]", "\n", "\n", "for", "f_name", "in", "train_files", ":", "\n", "        ", "f_name", "=", "Path", "(", "f_name", "[", "0", "]", ")", ".", "stem", "\n", "f", "=", "Path", "(", "embedding_folder", ",", "f'{f_name}.npy'", ")", "\n", "label_idx", "=", "GTZAN_CLASS_MAPPING", "[", "f", ".", "stem", ".", "split", "(", "'.'", ")", "[", "0", "]", "]", "\n", "X_train", ".", "append", "(", "np", ".", "load", "(", "f", ")", ")", "\n", "y_train", ".", "append", "(", "label_idx", ")", "\n", "\n", "", "for", "f_name", "in", "test_files", ":", "\n", "        ", "f_name", "=", "Path", "(", "f_name", "[", "0", "]", ")", ".", "stem", "\n", "f", "=", "Path", "(", "embedding_folder", ",", "f'{f_name}.npy'", ")", "\n", "label_idx", "=", "GTZAN_CLASS_MAPPING", "[", "f", ".", "stem", ".", "split", "(", "'.'", ")", "[", "0", "]", "]", "\n", "X_test", ".", "append", "(", "np", ".", "load", "(", "f", ")", ")", "\n", "y_test", ".", "append", "(", "label_idx", ")", "\n", "\n", "", "X_train", "=", "np", ".", "array", "(", "X_train", ")", "\n", "y_train", "=", "np", ".", "array", "(", "y_train", ")", "\n", "X_test", "=", "np", ".", "array", "(", "X_test", ")", "\n", "y_test", "=", "np", ".", "array", "(", "y_test", ")", "\n", "\n", "return", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "\n", "\n"]], "home.repos.pwc.inspect_result.xavierfav_coala.None.eval.eval_gtzan_fault_filtered": [[161, 183], ["eval.create_dataset_gtzan", "print", "sklearn.preprocessing.StandardScaler", "sklearn.preprocessing.StandardScaler.fit", "sklearn.preprocessing.StandardScaler.transform", "print", "sklearn.neural_network.MLPClassifier", "sklearn.neural_network.MLPClassifier.fit", "print", "sklearn.preprocessing.StandardScaler.transform", "sklearn.neural_network.MLPClassifier.score", "print", "len", "X_train.mean.mean", "len", "X_test.mean.mean"], "function", ["home.repos.pwc.inspect_result.xavierfav_coala.None.eval.create_dataset_gtzan"], ["", "def", "eval_gtzan_fault_filtered", "(", "embedding_folder", ")", ":", "\n", "    ", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "=", "create_dataset_gtzan", "(", "embedding_folder", ")", "\n", "\n", "print", "(", "\"aggregate and scale...\"", ")", "\n", "if", "len", "(", "X_train", ".", "shape", ")", ">", "2", ":", "\n", "        ", "X_train", "=", "X_train", ".", "mean", "(", "axis", "=", "1", ")", "\n", "", "scaler", "=", "StandardScaler", "(", ")", "\n", "scaler", ".", "fit", "(", "X_train", ")", "\n", "X_train", "=", "scaler", ".", "transform", "(", "X_train", ")", "\n", "\n", "print", "(", "\"train...\"", ")", "\n", "clf", "=", "MLPClassifier", "(", "hidden_layer_sizes", "=", "(", "256", ",", ")", ")", "\n", "clf", ".", "fit", "(", "X_train", ",", "y_train", ")", "\n", "\n", "print", "(", "\"eval...\"", ")", "\n", "if", "len", "(", "X_test", ".", "shape", ")", ">", "2", ":", "\n", "        ", "X_test", "=", "X_test", ".", "mean", "(", "axis", "=", "1", ")", "\n", "", "X_test", "=", "scaler", ".", "transform", "(", "X_test", ")", "\n", "score", "=", "clf", ".", "score", "(", "X_test", ",", "y_test", ")", "\n", "\n", "print", "(", "f'\\MLP score: {score}\\n'", ")", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.xavierfav_coala.None.eval.create_dataset_nsynth": [[186, 220], ["print", "pathlib.Path", "tqdm.tqdm", "numpy.array", "numpy.array", "print", "pathlib.Path", "tqdm.tqdm", "numpy.array", "numpy.array", "pathlib.Path.iterdir", "pathlib.Path.iterdir", "np.array.append", "np.array.append", "np.array.append", "np.array.append", "numpy.load", "numpy.load", "f.stem.split", "f.stem.split"], "function", ["None"], ["", "def", "create_dataset_nsynth", "(", "embedding_folder_train", ",", "embedding_folder_test", ")", ":", "\n", "    ", "print", "(", "\"loading train data...\"", ")", "\n", "p", "=", "Path", "(", "embedding_folder_train", ")", "\n", "X_train", "=", "[", "]", "\n", "y_train", "=", "[", "]", "\n", "for", "f", "in", "tqdm", "(", "p", ".", "iterdir", "(", ")", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "if", "'_d'", "not", "in", "f", ".", "stem", ":", "\n", "                ", "label_idx", "=", "NSYNTH_CLASS_MAPPING", "[", "f", ".", "stem", ".", "split", "(", "'_'", ")", "[", "0", "]", "]", "\n", "X_train", ".", "append", "(", "np", ".", "load", "(", "f", ")", ")", "\n", "y_train", ".", "append", "(", "label_idx", ")", "\n", "", "", "except", ":", "\n", "            ", "pass", "\n", "\n", "", "", "X_train", "=", "np", ".", "array", "(", "X_train", ")", "\n", "y_train", "=", "np", ".", "array", "(", "y_train", ")", "\n", "\n", "print", "(", "\"loading test data...\"", ")", "\n", "p", "=", "Path", "(", "embedding_folder_test", ")", "\n", "X_test", "=", "[", "]", "\n", "y_test", "=", "[", "]", "\n", "for", "f", "in", "tqdm", "(", "p", ".", "iterdir", "(", ")", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "if", "'_d'", "not", "in", "f", ".", "stem", ":", "\n", "                ", "label_idx", "=", "NSYNTH_CLASS_MAPPING", "[", "f", ".", "stem", ".", "split", "(", "'_'", ")", "[", "0", "]", "]", "\n", "X_test", ".", "append", "(", "np", ".", "load", "(", "f", ")", ")", "\n", "y_test", ".", "append", "(", "label_idx", ")", "\n", "", "", "except", ":", "\n", "            ", "pass", "\n", "\n", "", "", "X_test", "=", "np", ".", "array", "(", "X_test", ")", "\n", "y_test", "=", "np", ".", "array", "(", "y_test", ")", "\n", "\n", "return", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "\n", "\n"]], "home.repos.pwc.inspect_result.xavierfav_coala.None.eval.eval_nsynth": [[221, 243], ["eval.create_dataset_nsynth", "print", "sklearn.preprocessing.StandardScaler", "sklearn.preprocessing.StandardScaler.fit", "sklearn.preprocessing.StandardScaler.transform", "print", "sklearn.neural_network.MLPClassifier", "sklearn.neural_network.MLPClassifier.fit", "print", "sklearn.preprocessing.StandardScaler.transform", "sklearn.neural_network.MLPClassifier.score", "print", "len", "X_train.mean.mean", "len", "X_test.mean.mean"], "function", ["home.repos.pwc.inspect_result.xavierfav_coala.None.eval.create_dataset_nsynth"], ["", "def", "eval_nsynth", "(", "embedding_folder_train", ",", "embedding_folder_test", ")", ":", "\n", "    ", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "=", "create_dataset_nsynth", "(", "embedding_folder_train", ",", "embedding_folder_test", ")", "\n", "\n", "print", "(", "\"aggregate and scale...\"", ")", "\n", "if", "len", "(", "X_train", ".", "shape", ")", ">", "2", ":", "\n", "        ", "X_train", "=", "X_train", ".", "mean", "(", "axis", "=", "1", ")", "\n", "", "scaler", "=", "StandardScaler", "(", ")", "\n", "scaler", ".", "fit", "(", "X_train", ")", "\n", "X_train", "=", "scaler", ".", "transform", "(", "X_train", ")", "\n", "\n", "print", "(", "\"train...\"", ")", "\n", "clf", "=", "MLPClassifier", "(", "hidden_layer_sizes", "=", "(", "256", ",", ")", ")", "\n", "clf", ".", "fit", "(", "X_train", ",", "y_train", ")", "\n", "\n", "print", "(", "\"eval...\"", ")", "\n", "if", "len", "(", "X_test", ".", "shape", ")", ">", "2", ":", "\n", "        ", "X_test", "=", "X_test", ".", "mean", "(", "axis", "=", "1", ")", "\n", "", "X_test", "=", "scaler", ".", "transform", "(", "X_test", ")", "\n", "score", "=", "clf", ".", "score", "(", "X_test", ",", "y_test", ")", "\n", "\n", "print", "(", "f'\\MLP score: {score}\\n'", ")", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.xavierfav_coala.None.models_t1000.Flatten.forward": [[11, 13], ["input.view", "input.size"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xavierfav_coala.None.models_t1000.UnFlatten.forward": [[16, 18], ["input.view", "input.size"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "input", ",", "size", "=", "128", ")", ":", "\n", "        ", "return", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "size", ",", "3", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xavierfav_coala.None.models_t1000.AudioEncoder.__init__": [[21, 51], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.Dropout", "models_t1000.Flatten", "torch.nn.Linear", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.xavierfav_coala.None.utils.ProgressBar.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "AudioEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "audio_encoder", "=", "Sequential", "(", "\n", "Conv2d", "(", "1", ",", "128", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "padding_mode", "=", "'zeros'", ")", ",", "\n", "BatchNorm2d", "(", "128", ")", ",", "\n", "ReLU", "(", ")", ",", "# 128x48x48", "\n", "Dropout", "(", ".25", ")", ",", "\n", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "padding_mode", "=", "'zeros'", ")", ",", "\n", "BatchNorm2d", "(", "128", ")", ",", "\n", "ReLU", "(", ")", ",", "# 128x24x24", "\n", "Dropout", "(", ".25", ")", ",", "\n", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "padding_mode", "=", "'zeros'", ")", ",", "\n", "BatchNorm2d", "(", "128", ")", ",", "\n", "ReLU", "(", ")", ",", "# 128x12x12", "\n", "Dropout", "(", ".25", ")", ",", "\n", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "padding_mode", "=", "'zeros'", ")", ",", "\n", "BatchNorm2d", "(", "128", ")", ",", "\n", "ReLU", "(", ")", ",", "# 128x6x6", "\n", "Dropout", "(", ".25", ")", ",", "\n", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "padding_mode", "=", "'zeros'", ")", ",", "\n", "BatchNorm2d", "(", "128", ")", ",", "\n", "ReLU", "(", ")", ",", "# 128x3x3", "\n", "Dropout", "(", ".25", ")", ",", "\n", "Flatten", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "fc_audio", "=", "Sequential", "(", "\n", "Linear", "(", "1152", ",", "1152", ",", "bias", "=", "False", ")", ",", "\n", "Dropout", "(", "0.25", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xavierfav_coala.None.models_t1000.AudioEncoder.forward": [[53, 57], ["models_t1000.AudioEncoder.audio_encoder", "models_t1000.AudioEncoder.fc_audio"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "z", "=", "self", ".", "audio_encoder", "(", "x", ")", "\n", "z_d", "=", "self", ".", "fc_audio", "(", "z", ")", "\n", "return", "z", ",", "z_d", "\n", "\n"]], "home.repos.pwc.inspect_result.xavierfav_coala.None.models_t1000.AudioDecoder.__init__": [[60, 84], ["torch.nn.Module.__init__", "torch.nn.Sequential", "models_t1000.UnFlatten", "torch.nn.Dropout", "torch.nn.ConvTranspose2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.ConvTranspose2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.ConvTranspose2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.ConvTranspose2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.BatchNorm2d", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.xavierfav_coala.None.utils.ProgressBar.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "AudioDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "audio_decoder", "=", "Sequential", "(", "\n", "UnFlatten", "(", ")", ",", "\n", "Dropout", "(", ".25", ")", ",", "\n", "ConvTranspose2d", "(", "128", ",", "128", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "padding_mode", "=", "'zeros'", ")", ",", "\n", "BatchNorm2d", "(", "128", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "Dropout", "(", ".25", ")", ",", "\n", "ConvTranspose2d", "(", "128", ",", "128", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "padding_mode", "=", "'zeros'", ")", ",", "\n", "BatchNorm2d", "(", "128", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "Dropout", "(", ".25", ")", ",", "\n", "ConvTranspose2d", "(", "128", ",", "128", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "padding_mode", "=", "'zeros'", ")", ",", "\n", "BatchNorm2d", "(", "128", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "Dropout", "(", ".25", ")", ",", "\n", "ConvTranspose2d", "(", "128", ",", "128", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "padding_mode", "=", "'zeros'", ")", ",", "\n", "BatchNorm2d", "(", "128", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "ConvTranspose2d", "(", "128", ",", "1", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "padding_mode", "=", "'zeros'", ")", ",", "\n", "BatchNorm2d", "(", "1", ")", ",", "\n", "Sigmoid", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xavierfav_coala.None.models_t1000.AudioDecoder.forward": [[86, 88], ["models_t1000.AudioDecoder.audio_decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z", ")", ":", "\n", "        ", "return", "self", ".", "audio_decoder", "(", "z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xavierfav_coala.None.models_t1000.TagEncoder.__init__": [[91, 112], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.xavierfav_coala.None.utils.ProgressBar.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "TagEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "tag_encoder", "=", "Sequential", "(", "\n", "Linear", "(", "1000", ",", "512", ")", ",", "\n", "BatchNorm1d", "(", "512", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "Dropout", "(", ".25", ")", ",", "\n", "Linear", "(", "512", ",", "512", ")", ",", "\n", "BatchNorm1d", "(", "512", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "Dropout", "(", ".25", ")", ",", "\n", "Linear", "(", "512", ",", "1152", ")", ",", "\n", "BatchNorm1d", "(", "1152", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "Dropout", "(", ".25", ")", ",", "\n", ")", "\n", "\n", "self", ".", "fc_tag", "=", "Sequential", "(", "\n", "Linear", "(", "1152", ",", "1152", ",", "bias", "=", "False", ")", ",", "\n", "Dropout", "(", ".25", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xavierfav_coala.None.models_t1000.TagEncoder.forward": [[114, 118], ["models_t1000.TagEncoder.tag_encoder", "models_t1000.TagEncoder.fc_tag"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "tags", ")", ":", "\n", "        ", "z", "=", "self", ".", "tag_encoder", "(", "tags", ")", "\n", "z_d", "=", "self", ".", "fc_tag", "(", "z", ")", "\n", "return", "z", ",", "z_d", "\n", "\n"]], "home.repos.pwc.inspect_result.xavierfav_coala.None.models_t1000.TagDecoder.__init__": [[121, 135], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.xavierfav_coala.None.utils.ProgressBar.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "TagDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "tag_decoder", "=", "Sequential", "(", "\n", "Linear", "(", "1152", ",", "512", ")", ",", "\n", "BatchNorm1d", "(", "512", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "Dropout", "(", ".25", ")", ",", "\n", "Linear", "(", "512", ",", "512", ")", ",", "\n", "BatchNorm1d", "(", "512", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "Linear", "(", "512", ",", "1000", ")", ",", "\n", "BatchNorm1d", "(", "1000", ")", ",", "\n", "Sigmoid", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xavierfav_coala.None.models_t1000.TagDecoder.forward": [[137, 139], ["models_t1000.TagDecoder.tag_decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z", ")", ":", "\n", "        ", "return", "self", ".", "tag_decoder", "(", "z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xavierfav_coala.None.models_t1000.CNN.__init__": [[142, 174], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.Dropout", "models_t1000.Flatten", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.xavierfav_coala.None.utils.ProgressBar.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "encoder", "=", "Sequential", "(", "\n", "Conv2d", "(", "1", ",", "128", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "padding_mode", "=", "'zeros'", ")", ",", "\n", "BatchNorm2d", "(", "128", ")", ",", "\n", "ReLU", "(", ")", ",", "# 128x48x48", "\n", "Dropout", "(", ".25", ")", ",", "\n", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "padding_mode", "=", "'zeros'", ")", ",", "\n", "BatchNorm2d", "(", "128", ")", ",", "\n", "ReLU", "(", ")", ",", "# 128x24x24", "\n", "Dropout", "(", ".25", ")", ",", "\n", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "padding_mode", "=", "'zeros'", ")", ",", "\n", "BatchNorm2d", "(", "128", ")", ",", "\n", "ReLU", "(", ")", ",", "# 128x12x12", "\n", "Dropout", "(", ".25", ")", ",", "\n", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "padding_mode", "=", "'zeros'", ")", ",", "\n", "BatchNorm2d", "(", "128", ")", ",", "\n", "ReLU", "(", ")", ",", "# 128x6x6", "\n", "Dropout", "(", ".25", ")", ",", "\n", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "padding_mode", "=", "'zeros'", ")", ",", "\n", "BatchNorm2d", "(", "128", ")", ",", "\n", "ReLU", "(", ")", ",", "# 128x3x3", "\n", "Dropout", "(", ".25", ")", ",", "\n", "Flatten", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "fc", "=", "Sequential", "(", "\n", "Linear", "(", "1152", ",", "1152", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "Linear", "(", "1152", ",", "1000", ")", ",", "\n", "Sigmoid", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xavierfav_coala.None.models_t1000.CNN.forward": [[176, 180], ["models_t1000.CNN.encoder", "models_t1000.CNN.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "z", "=", "self", ".", "encoder", "(", "x", ")", "\n", "y", "=", "self", ".", "fc", "(", "z", ")", "\n", "return", "z", ",", "y", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xavierfav_coala.None.dual_ae_trainer.DualAETrainer.__init__": [[23, 43], ["torch.device"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "params", ")", ":", "\n", "        ", "self", ".", "params", "=", "params", "\n", "self", ".", "audio_encoder", "=", "None", "\n", "self", ".", "audio_decoder", "=", "None", "\n", "self", ".", "tag_encoder", "=", "None", "\n", "self", ".", "tag_decoder", "=", "None", "\n", "self", ".", "train_dataset_file", "=", "params", "[", "'train_dataset_file'", "]", "\n", "self", ".", "validation_dataset_file", "=", "params", "[", "'validation_dataset_file'", "]", "\n", "self", ".", "audio_loss_weight", "=", "params", "[", "'audio_loss_weight'", "]", "\n", "self", ".", "tag_loss_weight", "=", "params", "[", "'tag_loss_weight'", "]", "\n", "self", ".", "contrastive_loss_weight", "=", "params", "[", "'contrastive_loss_weight'", "]", "\n", "self", ".", "contrastive_temperature", "=", "params", "[", "'contrastive_temperature'", "]", "\n", "self", ".", "epochs", "=", "params", "[", "'epochs'", "]", "\n", "self", ".", "batch_size", "=", "params", "[", "'batch_size'", "]", "\n", "self", ".", "learning_rate", "=", "params", "[", "'learning_rate'", "]", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "params", "[", "'device'", "]", ")", "\n", "self", ".", "experiment_name", "=", "params", "[", "'experiment_name'", "]", "\n", "self", ".", "id2tag_file", "=", "params", "[", "'id2tag_file'", "]", "\n", "self", ".", "log_interval", "=", "params", "[", "'log_interval'", "]", "\n", "self", ".", "save_model_every", "=", "params", "[", "'save_model_every'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xavierfav_coala.None.dual_ae_trainer.DualAETrainer.init_models": [[44, 49], ["models_t1000.AudioEncoder", "models_t1000.AudioDecoder", "models_t1000.TagEncoder", "models_t1000.TagDecoder"], "methods", ["None"], ["", "def", "init_models", "(", "self", ")", ":", "\n", "        ", "self", ".", "audio_encoder", "=", "AudioEncoder", "(", ")", "\n", "self", ".", "audio_decoder", "=", "AudioDecoder", "(", ")", "\n", "self", ".", "tag_encoder", "=", "TagEncoder", "(", ")", "\n", "self", ".", "tag_decoder", "=", "TagDecoder", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xavierfav_coala.None.dual_ae_trainer.DualAETrainer.load_model_checkpoints": [[50, 65], ["pathlib.Path", "max", "dual_ae_trainer.DualAETrainer.audio_encoder.load_state_dict", "dual_ae_trainer.DualAETrainer.audio_decoder.load_state_dict", "dual_ae_trainer.DualAETrainer.tag_encoder.load_state_dict", "dual_ae_trainer.DualAETrainer.tag_decoder.load_state_dict", "print", "int", "torch.load", "torch.load", "torch.load", "torch.load", "print", "int", "str", "str", "str", "str", "pathlib.Path.iterdir", "pathlib.Path", "pathlib.Path", "pathlib.Path", "pathlib.Path", "f.stem.split"], "methods", ["None"], ["", "def", "load_model_checkpoints", "(", "self", ")", ":", "\n", "        ", "saved_models_folder", "=", "Path", "(", "'saved_models'", ",", "self", ".", "experiment_name", ")", "\n", "try", ":", "\n", "            ", "last_epoch", "=", "max", "(", "[", "int", "(", "f", ".", "stem", ".", "split", "(", "'epoch_'", ")", "[", "-", "1", "]", ")", "for", "f", "in", "saved_models_folder", ".", "iterdir", "(", ")", "]", ")", "\n", "self", ".", "audio_encoder", ".", "load_state_dict", "(", "torch", ".", "load", "(", "str", "(", "Path", "(", "f'saved_models'", ",", "self", ".", "experiment_name", ",", "f'audio_encoder_epoch_{last_epoch}.pt'", ")", ")", ")", ")", "\n", "self", ".", "audio_decoder", ".", "load_state_dict", "(", "torch", ".", "load", "(", "str", "(", "Path", "(", "f'saved_models'", ",", "self", ".", "experiment_name", ",", "f'audio_decoder_epoch_{last_epoch}.pt'", ")", ")", ")", ")", "\n", "self", ".", "tag_encoder", ".", "load_state_dict", "(", "torch", ".", "load", "(", "str", "(", "Path", "(", "f'saved_models'", ",", "self", ".", "experiment_name", ",", "f'tag_encoder_epoch_{last_epoch}.pt'", ")", ")", ")", ")", "\n", "self", ".", "tag_decoder", ".", "load_state_dict", "(", "torch", ".", "load", "(", "str", "(", "Path", "(", "f'saved_models'", ",", "self", ".", "experiment_name", ",", "f'tag_decoder_epoch_{last_epoch}.pt'", ")", ")", ")", ")", "\n", "print", "(", "f'Model checkpoints from epoch {last_epoch} loaded...'", ")", "\n", "", "except", "ValueError", ":", "\n", "            ", "last_epoch", "=", "0", "\n", "print", "(", "'No model loaded, training from scratch...'", ")", "\n", "\n", "", "self", ".", "iteration_idx", "=", "last_epoch", "*", "int", "(", "self", ".", "length_val_dataset", "/", "self", ".", "batch_size", ")", "\n", "self", ".", "last_epoch", "=", "last_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.xavierfav_coala.None.dual_ae_trainer.DualAETrainer.train": [[66, 117], ["data_loader.InMemoryDataset", "data_loader.InMemoryDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "len", "len", "json.load", "pathlib.Path", "dual_ae_trainer.DualAETrainer.init_models", "dual_ae_trainer.DualAETrainer.load_model_checkpoints", "dual_ae_trainer.DualAETrainer.audio_encoder.to", "dual_ae_trainer.DualAETrainer.audio_decoder.to", "dual_ae_trainer.DualAETrainer.tag_encoder.to", "dual_ae_trainer.DualAETrainer.tag_decoder.to", "torch.optim.SGD", "torch.optim.SGD", "torch.nn.BCELoss", "open", "pathlib.Path.exists", "pathlib.Path.mkdir", "itertools.chain", "itertools.chain", "SummaryWriter", "range", "dual_ae_trainer.DualAETrainer.audio_encoder.parameters", "dual_ae_trainer.DualAETrainer.audio_decoder.parameters", "dual_ae_trainer.DualAETrainer.tag_encoder.parameters", "dual_ae_trainer.DualAETrainer.tag_decoder.parameters", "dual_ae_trainer.DualAETrainer.train_one_epoch_dual_AE", "dual_ae_trainer.DualAETrainer.val_dual_AE", "str", "pathlib.Path"], "methods", ["home.repos.pwc.inspect_result.xavierfav_coala.None.dual_ae_trainer.DualAETrainer.init_models", "home.repos.pwc.inspect_result.xavierfav_coala.None.dual_ae_trainer.DualAETrainer.load_model_checkpoints", "home.repos.pwc.inspect_result.xavierfav_coala.None.dual_ae_trainer.DualAETrainer.train_one_epoch_dual_AE", "home.repos.pwc.inspect_result.xavierfav_coala.None.dual_ae_trainer.DualAETrainer.val_dual_AE"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "\"\"\" Train the dual Auto Encoder   \n        \n        \"\"\"", "\n", "# Data loaders", "\n", "loader_params", "=", "{", "\n", "'batch_size'", ":", "self", ".", "batch_size", ",", "\n", "'shuffle'", ":", "True", ",", "\n", "'num_workers'", ":", "1", ",", "\n", "'drop_last'", ":", "True", ",", "\n", "}", "\n", "\n", "dataset_train", "=", "InMemoryDataset", "(", "self", ".", "train_dataset_file", ")", "\n", "dataset_val", "=", "InMemoryDataset", "(", "self", ".", "validation_dataset_file", ")", "\n", "\n", "self", ".", "train_loader", "=", "data", ".", "DataLoader", "(", "dataset_train", ",", "**", "loader_params", ")", "\n", "self", ".", "val_loader", "=", "data", ".", "DataLoader", "(", "dataset_val", ",", "**", "loader_params", ")", "\n", "self", ".", "length_train_dataset", "=", "len", "(", "self", ".", "train_loader", ".", "dataset", ")", "\n", "self", ".", "length_val_dataset", "=", "len", "(", "self", ".", "val_loader", ".", "dataset", ")", "\n", "\n", "# mapping id2tags", "\n", "self", ".", "id2tag", "=", "json", ".", "load", "(", "open", "(", "self", ".", "id2tag_file", ",", "'rb'", ")", ")", "\n", "\n", "# folder for model checkpoints", "\n", "model_checkpoints_folder", "=", "Path", "(", "'saved_models'", ",", "self", ".", "experiment_name", ")", "\n", "if", "not", "model_checkpoints_folder", ".", "exists", "(", ")", ":", "\n", "            ", "model_checkpoints_folder", ".", "mkdir", "(", ")", "\n", "\n", "# models", "\n", "", "self", ".", "init_models", "(", ")", "\n", "self", ".", "load_model_checkpoints", "(", ")", "\n", "\n", "self", ".", "audio_encoder", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "audio_decoder", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "tag_encoder", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "tag_decoder", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# optimizers", "\n", "self", ".", "audio_dae_opt", "=", "optim", ".", "SGD", "(", "chain", "(", "self", ".", "audio_encoder", ".", "parameters", "(", ")", ",", "self", ".", "audio_decoder", ".", "parameters", "(", ")", ")", ",", "lr", "=", "self", ".", "learning_rate", ")", "\n", "self", ".", "tag_dae_opt", "=", "optim", ".", "SGD", "(", "chain", "(", "self", ".", "tag_encoder", ".", "parameters", "(", ")", ",", "self", ".", "tag_decoder", ".", "parameters", "(", ")", ")", ",", "lr", "=", "self", ".", "learning_rate", ")", "\n", "\n", "# loss for tag autoencoder", "\n", "self", ".", "tag_recon_loss_function", "=", "torch", ".", "nn", ".", "BCELoss", "(", ")", "\n", "\n", "# tensorboard", "\n", "with", "SummaryWriter", "(", "log_dir", "=", "str", "(", "Path", "(", "'runs'", ",", "self", ".", "experiment_name", ")", ")", ",", "max_queue", "=", "100", ")", "as", "self", ".", "tb", ":", "\n", "\n", "# Training loop", "\n", "            ", "for", "epoch", "in", "range", "(", "self", ".", "last_epoch", "+", "1", ",", "self", ".", "epochs", "+", "1", ")", ":", "\n", "                ", "self", ".", "train_one_epoch_dual_AE", "(", "epoch", ")", "\n", "self", ".", "val_dual_AE", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xavierfav_coala.None.dual_ae_trainer.DualAETrainer.train_one_epoch_dual_AE": [[118, 215], ["dual_ae_trainer.DualAETrainer.audio_encoder.train", "dual_ae_trainer.DualAETrainer.audio_decoder.train", "dual_ae_trainer.DualAETrainer.tag_encoder.train", "dual_ae_trainer.DualAETrainer.tag_decoder.train", "enumerate", "print", "print", "print", "print", "print", "dual_ae_trainer.DualAETrainer.tb.add_scalar", "dual_ae_trainer.DualAETrainer.tb.add_scalar", "dual_ae_trainer.DualAETrainer.tb.add_scalar", "dual_ae_trainer.DualAETrainer.tb.add_scalar", "torch.utils.data.view().to", "tags.float().to.float().to.float().to", "dual_ae_trainer.DualAETrainer.audio_encoder", "dual_ae_trainer.DualAETrainer.tag_encoder", "dual_ae_trainer.DualAETrainer.audio_decoder", "utils.kullback_leibler", "dual_ae_trainer.DualAETrainer.tag_decoder", "dual_ae_trainer.DualAETrainer.tag_recon_loss_function", "utils.contrastive_loss", "dual_ae_trainer.DualAETrainer.audio_dae_opt.zero_grad", "dual_ae_trainer.DualAETrainer.tag_dae_opt.zero_grad", "utils.kullback_leibler.mul().backward", "dual_ae_trainer.DualAETrainer.mul().backward", "dual_ae_trainer.DualAETrainer.audio_dae_opt.step", "dual_ae_trainer.DualAETrainer.tag_dae_opt.step", "utils.kullback_leibler.item", "dual_ae_trainer.DualAETrainer.item", "loss.item", "utils.contrastive_loss.item", "torch.save", "torch.save", "torch.save", "torch.save", "utils.contrastive_loss.mul().backward", "dual_ae_trainer.DualAETrainer.tb.add_scalar", "dual_ae_trainer.DualAETrainer.tb.add_scalar", "dual_ae_trainer.DualAETrainer.tb.add_scalar", "dual_ae_trainer.DualAETrainer.tb.add_scalar", "print", "dual_ae_trainer.DualAETrainer.audio_encoder.state_dict", "str", "dual_ae_trainer.DualAETrainer.audio_decoder.state_dict", "str", "dual_ae_trainer.DualAETrainer.tag_encoder.state_dict", "str", "dual_ae_trainer.DualAETrainer.tag_decoder.state_dict", "str", "torch.utils.data.view", "tags.float().to.float().to.float", "utils.kullback_leibler.mul", "dual_ae_trainer.DualAETrainer.mul", "utils.kullback_leibler.item", "dual_ae_trainer.DualAETrainer.item", "utils.contrastive_loss.item", "loss.item", "pathlib.Path", "pathlib.Path", "pathlib.Path", "pathlib.Path", "utils.contrastive_loss.mul", "len", "loss.item", "utils.kullback_leibler.item", "dual_ae_trainer.DualAETrainer.item", "utils.contrastive_loss.item", "len", "len"], "methods", ["home.repos.pwc.inspect_result.xavierfav_coala.None.dual_ae_trainer.DualAETrainer.train", "home.repos.pwc.inspect_result.xavierfav_coala.None.dual_ae_trainer.DualAETrainer.train", "home.repos.pwc.inspect_result.xavierfav_coala.None.dual_ae_trainer.DualAETrainer.train", "home.repos.pwc.inspect_result.xavierfav_coala.None.dual_ae_trainer.DualAETrainer.train", "home.repos.pwc.inspect_result.xavierfav_coala.None.utils.kullback_leibler", "home.repos.pwc.inspect_result.xavierfav_coala.None.utils.contrastive_loss"], ["", "", "", "def", "train_one_epoch_dual_AE", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "\"\"\" Train one epoch\n\n        \"\"\"", "\n", "self", ".", "audio_encoder", ".", "train", "(", ")", "\n", "self", ".", "audio_decoder", ".", "train", "(", ")", "\n", "self", ".", "tag_encoder", ".", "train", "(", ")", "\n", "self", ".", "tag_decoder", ".", "train", "(", ")", "\n", "\n", "# losses", "\n", "train_audio_recon_loss", "=", "0", "\n", "train_tags_recon_loss", "=", "0", "\n", "train_loss", "=", "0", "\n", "train_pairwise_loss", "=", "0", "\n", "\n", "for", "batch_idx", ",", "(", "data", ",", "tags", ",", "sound_ids", ")", "in", "enumerate", "(", "self", ".", "train_loader", ")", ":", "\n", "            ", "self", ".", "iteration_idx", "+=", "1", "\n", "\n", "x", "=", "data", ".", "view", "(", "-", "1", ",", "1", ",", "96", ",", "96", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "tags", "=", "tags", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# encode", "\n", "z_audio", ",", "z_d_audio", "=", "self", ".", "audio_encoder", "(", "x", ")", "\n", "z_tags", ",", "z_d_tags", "=", "self", ".", "tag_encoder", "(", "tags", ")", "\n", "\n", "# audio reconstruction", "\n", "x_recon", "=", "self", ".", "audio_decoder", "(", "z_audio", ")", "\n", "audio_recon_loss", "=", "kullback_leibler", "(", "x_recon", ",", "x", ")", "\n", "\n", "# tags reconstruction", "\n", "tags_recon", "=", "self", ".", "tag_decoder", "(", "z_tags", ")", "\n", "tags_recon_loss", "=", "self", ".", "tag_recon_loss_function", "(", "tags_recon", ",", "tags", ")", "\n", "\n", "# contrastive loss", "\n", "pairwise_loss", "=", "contrastive_loss", "(", "z_d_audio", ",", "z_d_tags", ",", "self", ".", "contrastive_temperature", ")", "\n", "\n", "# total loss", "\n", "loss", "=", "audio_recon_loss", "+", "tags_recon_loss", "+", "pairwise_loss", "\n", "\n", "# Optimize models", "\n", "self", ".", "audio_dae_opt", ".", "zero_grad", "(", ")", "\n", "self", ".", "tag_dae_opt", ".", "zero_grad", "(", ")", "\n", "audio_recon_loss", ".", "mul", "(", "self", ".", "audio_loss_weight", ")", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "tags_recon_loss", ".", "mul", "(", "self", ".", "tag_loss_weight", ")", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "if", "self", ".", "contrastive_loss_weight", ":", "\n", "                ", "pairwise_loss", ".", "mul", "(", "self", ".", "contrastive_loss_weight", ")", ".", "backward", "(", ")", "\n", "", "self", ".", "audio_dae_opt", ".", "step", "(", ")", "\n", "self", ".", "tag_dae_opt", ".", "step", "(", ")", "\n", "\n", "train_audio_recon_loss", "+=", "audio_recon_loss", ".", "item", "(", ")", "\n", "train_tags_recon_loss", "+=", "tags_recon_loss", ".", "item", "(", ")", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "\n", "train_pairwise_loss", "+=", "pairwise_loss", ".", "item", "(", ")", "\n", "\n", "# write to tensorboard", "\n", "if", "False", ":", "\n", "                ", "self", ".", "tb", ".", "add_scalar", "(", "\"iter/audio_recon_loss\"", ",", "audio_recon_loss", ".", "item", "(", ")", ",", "self", ".", "iteration_idx", ")", "\n", "self", ".", "tb", ".", "add_scalar", "(", "\"iter/tag_recon_loss\"", ",", "tags_recon_loss", ".", "item", "(", ")", ",", "self", ".", "iteration_idx", ")", "\n", "self", ".", "tb", ".", "add_scalar", "(", "\"iter/contrastive_pairwise_loss\"", ",", "pairwise_loss", ".", "item", "(", ")", ",", "self", ".", "iteration_idx", ")", "\n", "self", ".", "tb", ".", "add_scalar", "(", "\"iter/total_loss\"", ",", "loss", ".", "item", "(", ")", ",", "self", ".", "iteration_idx", ")", "\n", "\n", "# logs per batch", "\n", "", "if", "batch_idx", "%", "self", ".", "log_interval", "==", "0", ":", "\n", "                ", "print", "(", "'Train Epoch: {} [{}/{} ({:.0f}%)]\\tLoss: {:.4f} Audio Recon: {:.4f}, '", "\n", "'Tags Recon: {:.4f},  Pairwise: {:.4f})'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", "*", "len", "(", "data", ")", ",", "len", "(", "self", ".", "train_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "batch_idx", "/", "len", "(", "self", ".", "train_loader", ")", ",", "\n", "loss", ".", "item", "(", ")", ",", "\n", "audio_recon_loss", ".", "item", "(", ")", ",", "\n", "tags_recon_loss", ".", "item", "(", ")", ",", "\n", "pairwise_loss", ".", "item", "(", ")", "\n", ")", "\n", ")", "\n", "\n", "# epoch logs", "\n", "", "", "train_loss", "=", "train_loss", "/", "self", ".", "length_train_dataset", "*", "self", ".", "batch_size", "\n", "train_audio_recon_loss", "=", "train_audio_recon_loss", "/", "self", ".", "length_train_dataset", "*", "self", ".", "batch_size", "\n", "train_tags_recon_loss", "=", "train_tags_recon_loss", "/", "self", ".", "length_train_dataset", "*", "self", ".", "batch_size", "\n", "train_pairwise_loss", "=", "train_pairwise_loss", "/", "self", ".", "length_train_dataset", "*", "self", ".", "batch_size", "\n", "\n", "print", "(", "'====> Epoch: {} Average loss: {:.4f}'", ".", "format", "(", "epoch", ",", "train_loss", ")", ")", "\n", "print", "(", "'recon loss audio: {:.4f}'", ".", "format", "(", "train_audio_recon_loss", ")", ")", "\n", "print", "(", "'recon loss tags: {:.4f}'", ".", "format", "(", "train_tags_recon_loss", ")", ")", "\n", "print", "(", "'pairwise loss: {:.8f}'", ".", "format", "(", "train_pairwise_loss", ")", ")", "\n", "print", "(", "'\\n'", ")", "\n", "\n", "# tensorboard", "\n", "self", ".", "tb", ".", "add_scalar", "(", "\"audio_recon_loss/train\"", ",", "train_audio_recon_loss", ",", "epoch", ")", "\n", "self", ".", "tb", ".", "add_scalar", "(", "\"tag_recon_loss/train\"", ",", "train_tags_recon_loss", ",", "epoch", ")", "\n", "self", ".", "tb", ".", "add_scalar", "(", "\"contrastive_pairwise_loss/train\"", ",", "train_pairwise_loss", ",", "epoch", ")", "\n", "self", ".", "tb", ".", "add_scalar", "(", "\"total_loss/train\"", ",", "train_loss", ",", "epoch", ")", "\n", "\n", "if", "epoch", "%", "self", ".", "save_model_every", "==", "0", ":", "\n", "            ", "torch", ".", "save", "(", "self", ".", "audio_encoder", ".", "state_dict", "(", ")", ",", "str", "(", "Path", "(", "f'saved_models'", ",", "self", ".", "experiment_name", ",", "f'audio_encoder_epoch_{epoch}.pt'", ")", ")", ")", "\n", "torch", ".", "save", "(", "self", ".", "audio_decoder", ".", "state_dict", "(", ")", ",", "str", "(", "Path", "(", "f'saved_models'", ",", "self", ".", "experiment_name", ",", "f'audio_decoder_epoch_{epoch}.pt'", ")", ")", ")", "\n", "torch", ".", "save", "(", "self", ".", "tag_encoder", ".", "state_dict", "(", ")", ",", "str", "(", "Path", "(", "f'saved_models'", ",", "self", ".", "experiment_name", ",", "f'tag_encoder_epoch_{epoch}.pt'", ")", ")", ")", "\n", "torch", ".", "save", "(", "self", ".", "tag_decoder", ".", "state_dict", "(", ")", ",", "str", "(", "Path", "(", "f'saved_models'", ",", "self", ".", "experiment_name", ",", "f'tag_decoder_epoch_{epoch}.pt'", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xavierfav_coala.None.dual_ae_trainer.DualAETrainer.val_dual_AE": [[216, 293], ["dual_ae_trainer.DualAETrainer.audio_encoder.eval", "dual_ae_trainer.DualAETrainer.audio_decoder.eval", "dual_ae_trainer.DualAETrainer.tag_encoder.eval", "dual_ae_trainer.DualAETrainer.tag_decoder.eval", "print", "print", "print", "print", "print", "dual_ae_trainer.DualAETrainer.tb.add_scalar", "dual_ae_trainer.DualAETrainer.tb.add_scalar", "dual_ae_trainer.DualAETrainer.tb.add_scalar", "dual_ae_trainer.DualAETrainer.tb.add_scalar", "torch.no_grad", "enumerate", "torch.utils.data.view().clamp().to", "tags.float().clamp().to.float().clamp().to.float().clamp().to", "dual_ae_trainer.DualAETrainer.audio_encoder", "dual_ae_trainer.DualAETrainer.tag_encoder", "dual_ae_trainer.DualAETrainer.audio_decoder", "utils.kullback_leibler", "dual_ae_trainer.DualAETrainer.tag_decoder", "dual_ae_trainer.DualAETrainer.tag_recon_loss_function", "utils.contrastive_loss", "utils.kullback_leibler.item", "dual_ae_trainer.DualAETrainer.item", "loss.item", "utils.contrastive_loss.item", "min", "torch.cat", "torchvision.utils.save_image", "torch.utils.data.view().clamp", "tags.float().clamp().to.float().clamp().to.float().clamp", "torch.utils.data.size", "torch.cat.cpu", "range", "print", "print", "torch.utils.data.view", "tags.float().clamp().to.float().clamp().to.float", "torch.utils.data.view().clamp().to.flip", "dual_ae_trainer.DualAETrainer.view().flip", "[].tolist", "sorted", "dual_ae_trainer.DualAETrainer.view", "zip", "[].tolist", "sound_ids.cpu", "range", "dual_ae_trainer.DualAETrainer.cpu", "str", "len"], "methods", ["home.repos.pwc.inspect_result.xavierfav_coala.None.utils.kullback_leibler", "home.repos.pwc.inspect_result.xavierfav_coala.None.utils.contrastive_loss"], ["", "", "def", "val_dual_AE", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "\"\"\" Validation dual autoencoder\n\n        \"\"\"", "\n", "self", ".", "audio_encoder", ".", "eval", "(", ")", "\n", "self", ".", "audio_decoder", ".", "eval", "(", ")", "\n", "self", ".", "tag_encoder", ".", "eval", "(", ")", "\n", "self", ".", "tag_decoder", ".", "eval", "(", ")", "\n", "\n", "val_audio_recon_loss", "=", "0", "\n", "val_tags_recon_loss", "=", "0", "\n", "val_loss", "=", "0", "\n", "val_pairwise_loss", "=", "0", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "(", "data", ",", "tags", ",", "sound_ids", ")", "in", "enumerate", "(", "self", ".", "val_loader", ")", ":", "\n", "# replace negative values with 0 using clamp. Negative values can appear in the ", "\n", "# validation set because the minmax scaler is learned on the training data only.", "\n", "                ", "x", "=", "data", ".", "view", "(", "-", "1", ",", "1", ",", "96", ",", "96", ")", ".", "clamp", "(", "0", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "tags", "=", "tags", ".", "float", "(", ")", ".", "clamp", "(", "0", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# encode", "\n", "z_audio", ",", "z_d_audio", "=", "self", ".", "audio_encoder", "(", "x", ")", "\n", "z_tags", ",", "z_d_tags", "=", "self", ".", "tag_encoder", "(", "tags", ")", "\n", "\n", "# audio", "\n", "x_recon", "=", "self", ".", "audio_decoder", "(", "z_audio", ")", "\n", "audio_recon_loss", "=", "kullback_leibler", "(", "x_recon", ",", "x", ")", "\n", "\n", "# tags", "\n", "tags_recon", "=", "self", ".", "tag_decoder", "(", "z_tags", ")", "\n", "tags_recon_loss", "=", "self", ".", "tag_recon_loss_function", "(", "tags_recon", ",", "tags", ")", "\n", "\n", "# pairwise correspondence loss", "\n", "pairwise_loss", "=", "contrastive_loss", "(", "z_d_audio", ",", "z_d_tags", ",", "self", ".", "contrastive_temperature", ")", "\n", "\n", "loss", "=", "audio_recon_loss", "+", "tags_recon_loss", "+", "pairwise_loss", "\n", "\n", "val_audio_recon_loss", "+=", "audio_recon_loss", ".", "item", "(", ")", "\n", "val_tags_recon_loss", "+=", "tags_recon_loss", ".", "item", "(", ")", "\n", "val_loss", "+=", "loss", ".", "item", "(", ")", "\n", "val_pairwise_loss", "+=", "pairwise_loss", ".", "item", "(", ")", "\n", "\n", "# display some examples", "\n", "if", "i", "==", "0", ":", "\n", "                    ", "n", "=", "min", "(", "data", ".", "size", "(", "0", ")", ",", "8", ")", "\n", "\n", "# write files with original and reconstructed spectrograms", "\n", "comparison", "=", "torch", ".", "cat", "(", "[", "x", ".", "flip", "(", "2", ")", "[", ":", "n", "]", ",", "\n", "x_recon", ".", "view", "(", "self", ".", "batch_size", ",", "1", ",", "96", ",", "96", ")", ".", "flip", "(", "2", ")", "[", ":", "n", "]", "]", ")", "\n", "save_image", "(", "comparison", ".", "cpu", "(", ")", ",", "\n", "f'reconstructions/reconstruction_{self.experiment_name}_{epoch}.png'", ",", "nrow", "=", "n", ")", "\n", "\n", "# print the corresponding reconstructed tags if id2tag is passed", "\n", "if", "self", ".", "id2tag", ":", "\n", "                        ", "for", "idx", "in", "range", "(", "n", ")", ":", "\n", "                            ", "print", "(", "'\\n'", ",", "sound_ids", ".", "cpu", "(", ")", "[", "idx", "]", ".", "tolist", "(", ")", "[", "0", "]", ",", "\n", "sorted", "(", "zip", "(", "tags_recon", ".", "cpu", "(", ")", "[", "idx", "]", ".", "tolist", "(", ")", ",", "\n", "[", "self", ".", "id2tag", "[", "str", "(", "k", ")", "]", "for", "k", "in", "range", "(", "len", "(", "tags", ")", ")", "]", ")", ",", "reverse", "=", "True", ")", "[", ":", "6", "]", ")", "\n", "", "print", "(", "'\\n'", ")", "\n", "\n", "", "", "", "", "val_loss", "=", "val_loss", "/", "self", ".", "length_val_dataset", "*", "self", ".", "batch_size", "\n", "val_audio_recon_loss", "=", "val_audio_recon_loss", "/", "self", ".", "length_val_dataset", "*", "self", ".", "batch_size", "\n", "val_tags_recon_loss", "=", "val_tags_recon_loss", "/", "self", ".", "length_val_dataset", "*", "self", ".", "batch_size", "\n", "val_pairwise_loss", "=", "val_pairwise_loss", "/", "self", ".", "length_val_dataset", "*", "self", ".", "batch_size", "\n", "\n", "print", "(", "'====> Val average loss: {:.4f}'", ".", "format", "(", "val_loss", ")", ")", "\n", "print", "(", "'recon loss audio: {:.4f}'", ".", "format", "(", "val_audio_recon_loss", ")", ")", "\n", "print", "(", "'recon loss tags: {:.4f}'", ".", "format", "(", "val_tags_recon_loss", ")", ")", "\n", "print", "(", "'pairwise loss: {:.4f}'", ".", "format", "(", "val_pairwise_loss", ")", ")", "\n", "print", "(", "'\\n\\n'", ")", "\n", "\n", "# tensorboard", "\n", "self", ".", "tb", ".", "add_scalar", "(", "\"audio_recon_loss/val\"", ",", "val_audio_recon_loss", ",", "epoch", ")", "\n", "self", ".", "tb", ".", "add_scalar", "(", "\"tag_recon_loss/val\"", ",", "val_tags_recon_loss", ",", "epoch", ")", "\n", "self", ".", "tb", ".", "add_scalar", "(", "\"contrastive_pairwise_loss/val\"", ",", "val_pairwise_loss", ",", "epoch", ")", "\n", "self", ".", "tb", ".", "add_scalar", "(", "\"total_loss/val\"", ",", "val_loss", ",", "epoch", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xavierfav_coala.None.utils.ProgressBar.__init__": [[24, 31], ["print"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "valmax", ",", "maxbar", ",", "title", ")", ":", "\n", "        ", "if", "valmax", "==", "0", ":", "valmax", "=", "1", "\n", "if", "maxbar", ">", "200", ":", "maxbar", "=", "200", "\n", "self", ".", "valmax", "=", "valmax", "\n", "self", ".", "maxbar", "=", "maxbar", "\n", "self", ".", "title", "=", "title", "\n", "print", "(", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xavierfav_coala.None.utils.ProgressBar.update": [[32, 56], ["round", "int", "sys.stdout.write", "sys.stdout.flush", "float", "float", "float"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "avg_loss", "=", "0", ")", ":", "\n", "# format", "\n", "        ", "if", "val", ">", "self", ".", "valmax", ":", "val", "=", "self", ".", "valmax", "\n", "\n", "# process", "\n", "perc", "=", "round", "(", "(", "float", "(", "val", ")", "/", "float", "(", "self", ".", "valmax", ")", ")", "*", "100", ")", "\n", "scale", "=", "100.0", "/", "float", "(", "self", ".", "maxbar", ")", "\n", "bar", "=", "int", "(", "perc", "/", "scale", ")", "\n", "\n", "# render", "\n", "if", "avg_loss", ":", "\n", "# out = '\\r %20s [%s%s] %3d / %3d  cost: %.2f  r_loss: %.0f  l_loss: %.4f  clf_loss: %.4f' % (", "\n", "            ", "out", "=", "'\\r %20s [%s%s] %3d / %3d  loss: %.5f'", "%", "(", "\n", "self", ".", "title", ",", "\n", "'='", "*", "bar", ",", "' '", "*", "(", "self", ".", "maxbar", "-", "bar", ")", ",", "\n", "val", ",", "\n", "self", ".", "valmax", ",", "\n", "avg_loss", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "'\\r %20s [%s%s] %3d / %3d '", "%", "(", "self", ".", "title", ",", "'='", "*", "bar", ",", "' '", "*", "(", "self", ".", "maxbar", "-", "bar", ")", ",", "val", ",", "self", ".", "valmax", ")", "\n", "\n", "", "sys", ".", "stdout", ".", "write", "(", "out", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xavierfav_coala.None.utils.logme": [[10, 18], ["functools.wraps", "print", "print", "print", "f", "f.__name__.upper"], "function", ["None"], ["def", "logme", "(", "f", ")", ":", "\n", "    ", "@", "functools", ".", "wraps", "(", "f", ")", "\n", "def", "wrapped", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "print", "(", "'\\n-----------------\\n'", ")", "\n", "print", "(", "'   MODEL: {}'", ".", "format", "(", "f", ".", "__name__", ".", "upper", "(", ")", ")", ")", "\n", "print", "(", "'\\n-----------------\\n'", ")", "\n", "return", "f", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "return", "wrapped", "\n", "\n"]], "home.repos.pwc.inspect_result.xavierfav_coala.None.utils.pad": [[58, 64], ["numpy.zeros", "numpy.random.rand().astype", "numpy.random.rand"], "function", ["None"], ["", "", "def", "pad", "(", "l", ",", "sr", ")", ":", "\n", "# 0-Pad 10 sec at fs hz and add little noise", "\n", "    ", "z", "=", "np", ".", "zeros", "(", "10", "*", "sr", ",", "dtype", "=", "'float32'", ")", "\n", "z", "[", ":", "l", ".", "size", "]", "=", "l", "\n", "z", "=", "z", "+", "5", "*", "1e-4", "*", "np", ".", "random", ".", "rand", "(", "z", ".", "size", ")", ".", "astype", "(", "'float32'", ")", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.xavierfav_coala.None.utils.compute_spectrogram": [[66, 80], ["librosa.feature.melspectrogram", "numpy.log", "librosa.load", "utils.pad", "soundfile.read", "librosa.core.resample", "numpy.finfo"], "function", ["home.repos.pwc.inspect_result.xavierfav_coala.None.utils.pad"], ["", "def", "compute_spectrogram", "(", "filename", ",", "sr", "=", "22000", ",", "n_mels", "=", "96", ")", ":", "\n", "# zero pad and compute log mel spec", "\n", "    ", "try", ":", "\n", "        ", "audio", ",", "sr", "=", "librosa", ".", "load", "(", "filename", ",", "sr", "=", "sr", ",", "res_type", "=", "'kaiser_fast'", ")", "\n", "", "except", ":", "\n", "        ", "audio", ",", "o_sr", "=", "sf", ".", "read", "(", "filename", ")", "\n", "audio", "=", "librosa", ".", "core", ".", "resample", "(", "audio", ",", "o_sr", ",", "sr", ")", "\n", "", "try", ":", "\n", "        ", "x", "=", "pad", "(", "audio", ",", "sr", ")", "\n", "", "except", "ValueError", ":", "\n", "        ", "x", "=", "audio", "\n", "", "audio_rep", "=", "librosa", ".", "feature", ".", "melspectrogram", "(", "y", "=", "x", ",", "sr", "=", "sr", ",", "hop_length", "=", "512", ",", "n_fft", "=", "1024", ",", "n_mels", "=", "n_mels", ",", "power", "=", "1.", ")", "\n", "audio_rep", "=", "np", ".", "log", "(", "audio_rep", "+", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "eps", ")", "\n", "return", "audio_rep", "\n", "\n"]], "home.repos.pwc.inspect_result.xavierfav_coala.None.utils.return_spectrogram_max_nrg_frame": [[82, 86], ["librosa.util.frame", "numpy.argmax", "numpy.asfortranarray", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "def", "return_spectrogram_max_nrg_frame", "(", "spectrogram", ")", ":", "\n", "    ", "frames", "=", "librosa", ".", "util", ".", "frame", "(", "np", ".", "asfortranarray", "(", "spectrogram", ")", ",", "frame_length", "=", "96", ",", "hop_length", "=", "12", ")", "\n", "idx_max_nrg", "=", "np", ".", "argmax", "(", "np", ".", "sum", "(", "np", ".", "sum", "(", "frames", ",", "axis", "=", "0", ")", ",", "axis", "=", "0", ")", ")", "\n", "return", "frames", "[", ":", ",", ":", ",", "idx_max_nrg", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xavierfav_coala.None.utils.return_spectrogram_3_max_nrg_frames": [[88, 92], ["librosa.util.frame", "numpy.asfortranarray", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "def", "return_spectrogram_3_max_nrg_frames", "(", "spectrogram", ")", ":", "\n", "    ", "frames", "=", "librosa", ".", "util", ".", "frame", "(", "np", ".", "asfortranarray", "(", "spectrogram", ")", ",", "frame_length", "=", "96", ",", "hop_length", "=", "12", ")", "\n", "idxes_max_nrg", "=", "(", "-", "np", ".", "sum", "(", "np", ".", "sum", "(", "frames", ",", "axis", "=", "0", ")", ",", "axis", "=", "0", ")", ")", ".", "argsort", "(", ")", "[", ":", "3", "]", "\n", "return", "frames", "[", ":", ",", ":", ",", "idxes_max_nrg", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xavierfav_coala.None.utils.spectrogram_to_audio": [[94, 98], ["numpy.exp", "librosa.feature.inverse.mel_to_audio", "librosa.output.write_wav"], "function", ["None"], ["", "def", "spectrogram_to_audio", "(", "filename", ",", "y", ",", "sr", "=", "22000", ")", ":", "\n", "    ", "y", "=", "np", ".", "exp", "(", "y", ")", "\n", "x", "=", "librosa", ".", "feature", ".", "inverse", ".", "mel_to_audio", "(", "y", ",", "sr", "=", "sr", ",", "n_fft", "=", "1024", ",", "hop_length", "=", "512", ",", "power", "=", "1.", ")", "\n", "librosa", ".", "output", ".", "write_wav", "(", "filename", ",", "x", ",", "sr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xavierfav_coala.None.utils.kullback_leibler": [[100, 111], ["y.add().log", "y_hat.add().log", "y.add", "y_hat.add"], "function", ["None"], ["", "def", "kullback_leibler", "(", "y_hat", ",", "y", ")", ":", "\n", "    ", "\"\"\"Generalized Kullback Leibler divergence.\n    :param y_hat: The predicted distribution.\n    :type y_hat: torch.Tensor\n    :param y: The true distribution.\n    :type y: torch.Tensor\n    :return: The generalized Kullback Leibler divergence\\\n             between predicted and true distributions.\n    :rtype: torch.Tensor\n    \"\"\"", "\n", "return", "(", "y", "*", "(", "y", ".", "add", "(", "1e-5", ")", ".", "log", "(", ")", "-", "y_hat", ".", "add", "(", "1e-5", ")", ".", "log", "(", ")", ")", "+", "(", "y_hat", "-", "y", ")", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xavierfav_coala.None.utils.embeddings_to_cosine_similarity_matrix": [[113, 121], ["torch.matmul", "torch.norm", "z.t", "torch.norm.unsqueeze", "torch.norm.unsqueeze"], "function", ["None"], ["", "def", "embeddings_to_cosine_similarity_matrix", "(", "z", ")", ":", "\n", "    ", "\"\"\"Converts a a tensor of n embeddings to an (n, n) tensor of similarities.\n    \"\"\"", "\n", "cosine_similarity", "=", "torch", ".", "matmul", "(", "z", ",", "z", ".", "t", "(", ")", ")", "\n", "embedding_norms", "=", "torch", ".", "norm", "(", "z", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "embedding_norms_mat", "=", "embedding_norms", ".", "unsqueeze", "(", "0", ")", "*", "embedding_norms", ".", "unsqueeze", "(", "1", ")", "\n", "cosine_similarity", "=", "cosine_similarity", "/", "(", "embedding_norms_mat", ")", "\n", "return", "cosine_similarity", "\n", "\n"]], "home.repos.pwc.inspect_result.xavierfav_coala.None.utils.contrastive_loss": [[123, 142], ["torch.cat", "utils.embeddings_to_cosine_similarity_matrix", "int", "torch.exp", "torch.exp.sum", "torch.cat", "torch.log().neg().mean", "s[].diag", "s[].diag", "torch.log().neg", "torch.eye().cuda", "torch.eye", "torch.log", "torch.eye", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.xavierfav_coala.None.utils.embeddings_to_cosine_similarity_matrix"], ["", "def", "contrastive_loss", "(", "z_audio", ",", "z_tag", ",", "t", "=", "1", ")", ":", "\n", "    ", "\"\"\"Computes contrastive loss following the paper:\n        A Simple Framework for Contrastive Learning of Visual Representations\n        https://arxiv.org/pdf/2002.05709v1.pdf\n        TODO: make it robust to NaN (with low values of t it happens). \n        e.g Cast to double float for exp calculation.\n    \"\"\"", "\n", "z", "=", "torch", ".", "cat", "(", "(", "z_audio", ",", "z_tag", ")", ",", "dim", "=", "0", ")", "\n", "s", "=", "embeddings_to_cosine_similarity_matrix", "(", "z", ")", "\n", "N", "=", "int", "(", "s", ".", "shape", "[", "0", "]", "/", "2", ")", "\n", "s", "=", "torch", ".", "exp", "(", "s", "/", "t", ")", "\n", "try", ":", "\n", "        ", "s", "=", "s", "*", "(", "1", "-", "torch", ".", "eye", "(", "len", "(", "s", ")", ",", "len", "(", "s", ")", ")", ".", "cuda", "(", ")", ")", "\n", "# s[range(len(s)), range(len(s))] = torch.zeros((len(s),)).cuda()", "\n", "", "except", "AssertionError", ":", "\n", "        ", "s", "=", "s", "*", "(", "1", "-", "torch", ".", "eye", "(", "len", "(", "s", ")", ",", "len", "(", "s", ")", ")", ")", "\n", "", "denom", "=", "s", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "num", "=", "torch", ".", "cat", "(", "(", "s", "[", ":", "N", ",", "N", ":", "]", ".", "diag", "(", ")", ",", "s", "[", "N", ":", ",", ":", "N", "]", ".", "diag", "(", ")", ")", ",", "dim", "=", "0", ")", "\n", "return", "torch", ".", "log", "(", "(", "num", "/", "denom", ")", "+", "1e-5", ")", ".", "neg", "(", ")", ".", "mean", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.xavierfav_coala.scripts.preproc_tags.singular_form": [[32, 38], ["p.singular_noun"], "function", ["None"], ["def", "singular_form", "(", "term", ")", ":", "\n", "    ", "out", "=", "p", ".", "singular_noun", "(", "term", ")", "\n", "if", "out", ":", "\n", "        ", "return", "out", "\n", "", "else", ":", "\n", "        ", "return", "term", "\n", "\n"]], "home.repos.pwc.inspect_result.xavierfav_coala.scripts.preproc_tags.preprocess": [[40, 56], ["list", "tags.split.split", "preproc_tags.singular_form", "set", "item.lower", "result.append", "item.isalpha", "len"], "function", ["home.repos.pwc.inspect_result.xavierfav_coala.scripts.preproc_tags.singular_form"], ["", "", "def", "preprocess", "(", "tags", ")", ":", "\n", "    ", "result", "=", "[", "]", "\n", "try", ":", "\n", "        ", "tags", "=", "tags", ".", "split", "(", "' '", ")", "\n", "tags", "=", "[", "item", ".", "lower", "(", ")", "for", "item", "in", "tags", "if", "item", ".", "isalpha", "(", ")", "]", "\n", "", "except", "AttributeError", ":", "# NaN", "\n", "        ", "return", "[", "]", "\n", "", "for", "tag", "in", "tags", ":", "\n", "        ", "if", "tag", "not", "in", "STOPWORDS", "and", "len", "(", "tag", ")", ">", "1", ":", "\n", "            ", "result", ".", "append", "(", "tag", ")", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "# print(tag)", "\n", "", "", "result", "=", "[", "singular_form", "(", "tag", ")", "for", "tag", "in", "result", "]", "\n", "\n", "return", "list", "(", "set", "(", "result", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xavierfav_coala.scripts.plot_embeddings.extract_audio_tag_embeddings": [[29, 88], ["encode.return_loaded_model", "encode.return_loaded_model", "enumerate", "numpy.concatenate", "sklearn.manifold.TSNE", "sklearn.manifold.TSNE.fit_transform", "matplotlib.figure", "plt.figure.add_subplot", "enumerate", "enumerate", "zip", "matplotlib.title", "matplotlib.legend", "matplotlib.show", "sound_id.tolist", "tsne.fit_transform.view().clamp", "tags.float().clamp.float().clamp", "encode.return_loaded_model.", "encode.return_loaded_model.", "audio_embeddings.append", "tag_embeddings.append", "numpy.array().reshape", "numpy.array().reshape", "fig.add_subplot.scatter", "fig.add_subplot.scatter", "fig.add_subplot.plot", "matplotlib.lines.Line2D", "matplotlib.lines.Line2D", "enumerate", "z_audio.tolist", "z_tags.tolist", "len", "len", "list", "tsne.fit_transform.view", "tags.float().clamp.float", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.xavierfav_coala.None.encode.return_loaded_model", "home.repos.pwc.inspect_result.xavierfav_coala.None.encode.return_loaded_model"], ["def", "extract_audio_tag_embeddings", "(", ")", ":", "\n", "    ", "sound_id2idx", "=", "{", "id", ":", "idx", "for", "idx", ",", "id", "in", "\n", "enumerate", "(", "list", "(", "dataset_val", ".", "h_file", "[", "'dataset'", "]", "[", "'id'", "]", "[", ":", ",", "0", "]", ")", ")", "}", "\n", "\n", "audio_encoder", "=", "return_loaded_model", "(", "AudioEncoder", ",", "'../saved_models/dual_ae_c/audio_encoder_epoch_200.pt'", ")", "\n", "tag_encoder", "=", "return_loaded_model", "(", "TagEncoder", ",", "'../saved_models/dual_ae_c/tag_encoder_epoch_200.pt'", ")", "\n", "\n", "audio_embeddings", "=", "[", "]", "\n", "tag_embeddings", "=", "[", "]", "\n", "sound_ids", "=", "[", "]", "\n", "\n", "for", "idx", ",", "(", "data", ",", "tags", ",", "sound_id", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "        ", "sound_ids", "+=", "sound_id", ".", "tolist", "(", ")", "\n", "x", "=", "data", ".", "view", "(", "-", "1", ",", "1", ",", "96", ",", "96", ")", ".", "clamp", "(", "0", ")", "\n", "tags", "=", "tags", ".", "float", "(", ")", ".", "clamp", "(", "0", ")", "\n", "\n", "# encode", "\n", "z_audio", ",", "z_d_audio", "=", "audio_encoder", "(", "x", ")", "\n", "z_tags", ",", "z_d_tags", "=", "tag_encoder", "(", "tags", ")", "\n", "\n", "audio_embeddings", ".", "append", "(", "z_audio", ".", "tolist", "(", ")", ")", "\n", "tag_embeddings", ".", "append", "(", "z_tags", ".", "tolist", "(", ")", ")", "\n", "\n", "if", "idx", "==", "N", ":", "\n", "            ", "break", "\n", "\n", "", "", "size_embedding", "=", "z_tags", ".", "shape", "[", "1", "]", "\n", "audio_embeddings", "=", "np", ".", "array", "(", "audio_embeddings", ")", ".", "reshape", "(", "len", "(", "audio_embeddings", ")", ",", "size_embedding", ")", "[", ":", "N", ",", ":", "]", "\n", "tag_embeddings", "=", "np", ".", "array", "(", "tag_embeddings", ")", ".", "reshape", "(", "len", "(", "tag_embeddings", ")", ",", "size_embedding", ")", "[", ":", "N", ",", ":", "]", "\n", "\n", "data", "=", "np", ".", "concatenate", "(", "(", "audio_embeddings", ",", "tag_embeddings", ")", ",", "0", ")", "\n", "tsne", "=", "sklearn", ".", "manifold", ".", "TSNE", "(", "n_components", "=", "2", ")", "\n", "data", "=", "tsne", ".", "fit_transform", "(", "data", ")", "\n", "audio_embeddings_tsne", "=", "data", "[", ":", "N", ",", ":", "]", "\n", "tag_embeddings_tsne", "=", "data", "[", "N", ":", ",", ":", "]", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "1", ",", "1", ",", "1", ")", "\n", "\n", "for", "idx", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "audio_embeddings_tsne", ")", ":", "\n", "        ", "ax", ".", "scatter", "(", "x", ",", "y", ",", "alpha", "=", "0.8", ",", "c", "=", "'red'", ",", "edgecolors", "=", "'none'", ",", "s", "=", "8", ")", "\n", "# ax.annotate(sound_ids[idx][0], (x, y))", "\n", "\n", "", "for", "idx", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "tag_embeddings_tsne", ")", ":", "\n", "        ", "ax", ".", "scatter", "(", "x", ",", "y", ",", "alpha", "=", "0.8", ",", "c", "=", "'blue'", ",", "edgecolors", "=", "'none'", ",", "s", "=", "8", ")", "\n", "# ax.annotate(sound_ids[idx][0], (x, y))", "\n", "\n", "", "for", "(", "x0", ",", "y0", ")", ",", "(", "x1", ",", "y1", ")", "in", "zip", "(", "audio_embeddings_tsne", ",", "tag_embeddings_tsne", ")", ":", "\n", "        ", "ax", ".", "plot", "(", "(", "x0", ",", "x1", ")", ",", "(", "y0", ",", "y1", ")", ",", "linewidth", "=", "0.2", ",", "color", "=", "'black'", ",", "alpha", "=", "0.6", ")", "\n", "\n", "", "plt", ".", "title", "(", "'Visualisation of the aligned learnt representations (TSNE)'", ")", "\n", "legend_elements", "=", "[", "\n", "Line2D", "(", "[", "0", "]", ",", "[", "0", "]", ",", "marker", "=", "'o'", ",", "color", "=", "'w'", ",", "label", "=", "'audio'", ",", "\n", "markerfacecolor", "=", "'red'", ",", "markersize", "=", "5", ")", ",", "\n", "Line2D", "(", "[", "0", "]", ",", "[", "0", "]", ",", "marker", "=", "'o'", ",", "color", "=", "'w'", ",", "label", "=", "'tags'", ",", "\n", "markerfacecolor", "=", "'blue'", ",", "markersize", "=", "5", ")", ",", "\n", "]", "\n", "plt", ".", "legend", "(", "handles", "=", "legend_elements", ",", "loc", "=", "2", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xavierfav_coala.scripts.analyse_sounds.compute_spectrogram_and_log_mel_spectrogram": [[21, 37], ["librosa.power_to_db", "numpy.abs", "librosa.load", "utils.pad", "librosa.feature.melspectrogram", "librosa.stft", "soundfile.read", "librosa.core.resample"], "function", ["home.repos.pwc.inspect_result.xavierfav_coala.None.utils.pad"], ["def", "compute_spectrogram_and_log_mel_spectrogram", "(", "filename", ",", "sr", "=", "22000", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "audio", ",", "sr", "=", "librosa", ".", "load", "(", "filename", ",", "sr", "=", "sr", ",", "res_type", "=", "'kaiser_fast'", ")", "\n", "", "except", ":", "\n", "        ", "try", ":", "\n", "            ", "audio", ",", "o_sr", "=", "sf", ".", "read", "(", "filename", ")", "\n", "audio", "=", "librosa", ".", "core", ".", "resample", "(", "audio", ",", "o_sr", ",", "sr", ")", "\n", "", "except", "RuntimeError", ":", "\n", "            ", "return", "None", ",", "None", "\n", "", "", "try", ":", "\n", "        ", "x", "=", "pad", "(", "audio", ",", "sr", ")", "\n", "", "except", "ValueError", ":", "\n", "        ", "x", "=", "audio", "\n", "", "y_log_mel", "=", "librosa", ".", "power_to_db", "(", "librosa", ".", "feature", ".", "melspectrogram", "(", "y", "=", "x", ",", "sr", "=", "sr", ",", "hop_length", "=", "512", ",", "n_fft", "=", "1024", ")", ")", "\n", "y", "=", "np", ".", "abs", "(", "librosa", ".", "stft", "(", "y", "=", "x", ",", "hop_length", "=", "512", ",", "n_fft", "=", "1024", ")", ")", "\n", "return", "y", ",", "y_log_mel", "\n", "\n"]], "home.repos.pwc.inspect_result.xavierfav_coala.scripts.analyse_sounds.return_spectrogram_max_nrg_frame": [[39, 44], ["librosa.util.frame", "librosa.util.frame", "numpy.argmax", "numpy.asfortranarray", "numpy.asfortranarray", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "def", "return_spectrogram_max_nrg_frame", "(", "spectrogram", ",", "log_mel_spectrogram", ")", ":", "\n", "    ", "frames_s", "=", "librosa", ".", "util", ".", "frame", "(", "np", ".", "asfortranarray", "(", "spectrogram", ")", ",", "frame_length", "=", "96", ",", "hop_length", "=", "12", ")", "\n", "frames_s_log_meg", "=", "librosa", ".", "util", ".", "frame", "(", "np", ".", "asfortranarray", "(", "log_mel_spectrogram", ")", ",", "frame_length", "=", "96", ",", "hop_length", "=", "12", ")", "\n", "idx_max_nrg", "=", "np", ".", "argmax", "(", "np", ".", "sum", "(", "np", ".", "sum", "(", "frames_s", ",", "axis", "=", "0", ")", ",", "axis", "=", "0", ")", ")", "\n", "return", "frames_s", "[", ":", ",", ":", ",", "idx_max_nrg", "]", ",", "frames_s_log_meg", "[", ":", ",", ":", ",", "idx_max_nrg", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xavierfav_coala.scripts.analyse_sounds.compute_acoustic_features": [[46, 73], ["analyse_sounds.compute_spectrogram_and_log_mel_spectrogram", "analyse_sounds.return_spectrogram_max_nrg_frame", "librosa.feature.mfcc", "librosa.feature.chroma_stft", "librosa.feature.spectral_centroid", "librosa.feature.spectral_bandwidth", "librosa.feature.spectral_rolloff", "numpy.mean().tolist", "numpy.var().tolist", "scipy.stats.skew().tolist", "numpy.mean().tolist", "numpy.var().tolist", "scipy.stats.skew().tolist", "numpy.mean().tolist", "numpy.var().tolist", "scipy.stats.skew().tolist", "numpy.mean().tolist", "numpy.var().tolist", "scipy.stats.skew().tolist", "numpy.mean", "numpy.var", "scipy.stats.skew", "numpy.mean", "numpy.var", "scipy.stats.skew", "numpy.mean", "numpy.var", "scipy.stats.skew", "numpy.mean", "numpy.var", "scipy.stats.skew"], "function", ["home.repos.pwc.inspect_result.xavierfav_coala.scripts.analyse_sounds.compute_spectrogram_and_log_mel_spectrogram", "home.repos.pwc.inspect_result.xavierfav_coala.scripts.analyse_sounds.return_spectrogram_max_nrg_frame"], ["", "def", "compute_acoustic_features", "(", "filename", ",", "sr", "=", "22000", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "s", ",", "s_log_mel", "=", "compute_spectrogram_and_log_mel_spectrogram", "(", "filename", ",", "sr", "=", "sr", ")", "\n", "s", ",", "s_log_mel", "=", "return_spectrogram_max_nrg_frame", "(", "s", ",", "s_log_mel", ")", "\n", "\n", "mfcc", "=", "librosa", ".", "feature", ".", "mfcc", "(", "S", "=", "s_log_mel", ",", "sr", "=", "sr", ")", "\n", "chroma", "=", "librosa", ".", "feature", ".", "chroma_stft", "(", "S", "=", "s", ",", "sr", "=", "sr", ")", "\n", "spectral_centroid", "=", "librosa", ".", "feature", ".", "spectral_centroid", "(", "S", "=", "s", ",", "sr", "=", "sr", ")", "\n", "spectral_bandwitdh", "=", "librosa", ".", "feature", ".", "spectral_bandwidth", "(", "S", "=", "s", ",", "sr", "=", "sr", ")", "\n", "spectral_rolloff", "=", "librosa", ".", "feature", ".", "spectral_rolloff", "(", "S", "=", "s", ",", "sr", "=", "sr", ")", "\n", "\n", "return", "{", "\n", "'mfcc_mean'", ":", "np", ".", "mean", "(", "mfcc", ",", "axis", "=", "1", ")", ".", "tolist", "(", ")", ",", "\n", "'mfcc_var'", ":", "np", ".", "var", "(", "mfcc", ",", "axis", "=", "1", ")", ".", "tolist", "(", ")", ",", "\n", "'mfcc_skew'", ":", "scipy", ".", "stats", ".", "skew", "(", "mfcc", ",", "axis", "=", "1", ")", ".", "tolist", "(", ")", ",", "\n", "'chroma_mean'", ":", "np", ".", "mean", "(", "chroma", ",", "axis", "=", "1", ")", ".", "tolist", "(", ")", ",", "\n", "'chroma_var'", ":", "np", ".", "var", "(", "chroma", ",", "axis", "=", "1", ")", ".", "tolist", "(", ")", ",", "\n", "'chroma_skew'", ":", "scipy", ".", "stats", ".", "skew", "(", "chroma", ",", "axis", "=", "1", ")", ".", "tolist", "(", ")", ",", "\n", "'spectral_centroid'", ":", "np", ".", "mean", "(", "spectral_centroid", ",", "axis", "=", "1", ")", ".", "tolist", "(", ")", ",", "\n", "'spectral_centroid_var'", ":", "np", ".", "var", "(", "spectral_centroid", ",", "axis", "=", "1", ")", ".", "tolist", "(", ")", ",", "\n", "'spectral_centroid_skew'", ":", "scipy", ".", "stats", ".", "skew", "(", "spectral_centroid", ",", "axis", "=", "1", ")", ".", "tolist", "(", ")", ",", "\n", "'spectral_bandwitdh'", ":", "np", ".", "mean", "(", "spectral_bandwitdh", ",", "axis", "=", "1", ")", ".", "tolist", "(", ")", ",", "\n", "'spectral_bandwitdh_var'", ":", "np", ".", "var", "(", "spectral_bandwitdh", ",", "axis", "=", "1", ")", ".", "tolist", "(", ")", ",", "\n", "'spectral_bandwitdh_skew'", ":", "scipy", ".", "stats", ".", "skew", "(", "spectral_bandwitdh", ",", "axis", "=", "1", ")", ".", "tolist", "(", ")", ",", "\n", "}", "\n", "", "except", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.xavierfav_coala.scripts.cca_embeddings_descriptors._plot_helper": [[39, 45], ["matplotlib.pyplot.plot", "matplotlib.pyplot.xlabel", "matplotlib.pyplot.ylabel", "matplotlib.pyplot.grid", "matplotlib.pyplot.show"], "function", ["None"], ["def", "_plot_helper", "(", "arr", ",", "xlabel", ",", "ylabel", ")", ":", "\n", "    ", "plt", ".", "plot", "(", "arr", ",", "lw", "=", "2.0", ")", "\n", "plt", ".", "xlabel", "(", "xlabel", ")", "\n", "plt", ".", "ylabel", "(", "ylabel", ")", "\n", "plt", ".", "grid", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xavierfav_coala.scripts.cca_embeddings_descriptors.extract_audio_embedding": [[47, 68], ["torch.utils.data.DataLoader", "enumerate", "encode.return_loaded_model", "encode.return_loaded_model", "torch.utils.data.view().clamp", "encode.return_loaded_model.", "audio_embeddings.append", "numpy.array().squeeze", "sound_id.tolist", "z_audio.tolist", "torch.utils.data.view", "numpy.array"], "function", ["home.repos.pwc.inspect_result.xavierfav_coala.None.encode.return_loaded_model", "home.repos.pwc.inspect_result.xavierfav_coala.None.encode.return_loaded_model"], ["", "def", "extract_audio_embedding", "(", "model_checkpoint", ")", ":", "\n", "    ", "\"\"\" Returns sound_ids and their respective audio embeddings \"\"\"", "\n", "test_loader", "=", "dt", ".", "DataLoader", "(", "dataset_val", ",", "**", "loader_params", ")", "\n", "\n", "if", "'cnn'", "in", "model_checkpoint", ":", "\n", "        ", "audio_encoder", "=", "return_loaded_model", "(", "CNN", ",", "model_checkpoint", ")", "\n", "", "else", ":", "\n", "        ", "audio_encoder", "=", "return_loaded_model", "(", "AudioEncoder", ",", "model_checkpoint", ")", "\n", "\n", "", "audio_embeddings", "=", "[", "]", "\n", "sound_ids", "=", "[", "]", "\n", "\n", "for", "idx", ",", "(", "data", ",", "tags", ",", "sound_id", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "        ", "sound_ids", "+=", "sound_id", ".", "tolist", "(", ")", "[", "0", "]", "\n", "x", "=", "data", ".", "view", "(", "-", "1", ",", "1", ",", "96", ",", "96", ")", ".", "clamp", "(", "0", ")", "\n", "\n", "# encode", "\n", "z_audio", ",", "z_d_audio", "=", "audio_encoder", "(", "x", ")", "\n", "audio_embeddings", ".", "append", "(", "z_audio", ".", "tolist", "(", ")", ")", "\n", "\n", "", "return", "sound_ids", ",", "np", ".", "array", "(", "audio_embeddings", ")", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xavierfav_coala.scripts.cca_embeddings_descriptors.compute_cca": [[70, 73], ["cca_core.get_cca_similarity", "print", "numpy.mean"], "function", ["None"], ["", "def", "compute_cca", "(", "embeddings", ",", "descriptors", ")", ":", "\n", "    ", "results", "=", "cca_core", ".", "get_cca_similarity", "(", "embeddings", ",", "descriptors", ",", "verbose", "=", "False", ",", "epsilon", "=", "1e-20", ")", "\n", "print", "(", "np", ".", "mean", "(", "results", "[", "\"cca_coef1\"", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xavierfav_coala.scripts.plot_tag_embeddings.plot_tag_embeddings": [[17, 39], ["encode.return_loaded_model", "json.load", "json.load.items", "numpy.array().reshape", "sklearn.manifold.TSNE", "sklearn.manifold.TSNE.fit_transform", "matplotlib.pyplot.subplots", "enumerate", "matplotlib.pyplot.show", "open", "int", "torch.tensor().view().float", "encode.return_loaded_model.", "tag_embeddings.append", "ax.scatter", "ax.annotate", "embedding.tolist", "numpy.array", "torch.tensor().view", "str", "torch.tensor", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.xavierfav_coala.None.encode.return_loaded_model"], ["def", "plot_tag_embeddings", "(", ")", ":", "\n", "    ", "tag_encoder", "=", "return_loaded_model", "(", "TagEncoder", ",", "'../saved_models/dual_ae_c/tag_encoder_epoch_200.pt'", ")", "\n", "id2tag", "=", "json", ".", "load", "(", "open", "(", "'../json/id2token_top_1000.json'", ",", "'rb'", ")", ")", "\n", "tag_embeddings", "=", "[", "]", "\n", "\n", "for", "tag_idx", ",", "_", "in", "id2tag", ".", "items", "(", ")", ":", "\n", "        ", "tag_idx", "=", "int", "(", "tag_idx", ")", "\n", "tag_vector", "=", "torch", ".", "tensor", "(", "np", ".", "zeros", "(", "1000", ")", ")", ".", "view", "(", "1", ",", "1000", ")", ".", "float", "(", ")", "\n", "tag_vector", "[", "0", ",", "tag_idx", "]", "=", "1", "\n", "embedding", ",", "_", "=", "tag_encoder", "(", "tag_vector", ")", "\n", "tag_embeddings", ".", "append", "(", "embedding", ".", "tolist", "(", ")", ")", "\n", "\n", "", "data", "=", "np", ".", "array", "(", "tag_embeddings", ")", ".", "reshape", "(", "1000", ",", "1152", ")", "\n", "tsne", "=", "sklearn", ".", "manifold", ".", "TSNE", "(", "n_components", "=", "2", ")", "\n", "tag_embeddings_tsne", "=", "tsne", ".", "fit_transform", "(", "data", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "for", "idx", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "tag_embeddings_tsne", ")", ":", "\n", "        ", "ax", ".", "scatter", "(", "x", ",", "y", ",", "alpha", "=", "0.8", ",", "c", "=", "'red'", ",", "edgecolors", "=", "'none'", ",", "s", "=", "5", ",", "marker", "=", "\"+\"", ")", "\n", "ax", ".", "annotate", "(", "id2tag", "[", "str", "(", "idx", ")", "]", ",", "(", "x", ",", "y", ")", ")", "\n", "\n", "", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xavierfav_coala.scripts.extract_mfcc.compute_mfcc": [[19, 36], ["librosa.feature.mfcc", "librosa.feature.delta", "librosa.feature.delta", "numpy.concatenate", "librosa.load", "soundfile.read", "librosa.core.resample", "numpy.mean", "numpy.var", "numpy.mean", "numpy.var", "numpy.mean", "numpy.var"], "function", ["None"], ["def", "compute_mfcc", "(", "filename", ",", "sr", "=", "22000", ")", ":", "\n", "# zero pad and compute log mel spec", "\n", "    ", "try", ":", "\n", "        ", "audio", ",", "sr", "=", "librosa", ".", "load", "(", "filename", ",", "sr", "=", "sr", ",", "res_type", "=", "'kaiser_fast'", ")", "\n", "", "except", ":", "\n", "        ", "audio", ",", "o_sr", "=", "sf", ".", "read", "(", "filename", ")", "\n", "audio", "=", "librosa", ".", "core", ".", "resample", "(", "audio", ",", "o_sr", ",", "sr", ")", "\n", "\n", "", "mfcc", "=", "librosa", ".", "feature", ".", "mfcc", "(", "y", "=", "audio", ",", "sr", "=", "sr", ")", "\n", "mfcc_delta", "=", "librosa", ".", "feature", ".", "delta", "(", "mfcc", ",", "width", "=", "5", ",", "mode", "=", "'nearest'", ")", "\n", "mfcc_delta2", "=", "librosa", ".", "feature", ".", "delta", "(", "mfcc", ",", "order", "=", "2", ",", "width", "=", "5", ",", "mode", "=", "'nearest'", ")", "\n", "\n", "feature", "=", "np", ".", "concatenate", "(", "(", "np", ".", "mean", "(", "mfcc", ",", "axis", "=", "1", ")", ",", "np", ".", "var", "(", "mfcc", ",", "axis", "=", "1", ")", ",", "\n", "np", ".", "mean", "(", "mfcc_delta", ",", "axis", "=", "1", ")", ",", "np", ".", "var", "(", "mfcc_delta", ",", "axis", "=", "1", ")", ",", "\n", "np", ".", "mean", "(", "mfcc_delta2", ",", "axis", "=", "1", ")", ",", "np", ".", "var", "(", "mfcc_delta2", ",", "axis", "=", "1", ")", ")", ")", "\n", "\n", "return", "feature", "\n", "\n"]]}