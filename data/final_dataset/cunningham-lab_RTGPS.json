{"home.repos.pwc.inspect_result.cunningham-lab_RTGPS.None.test_cg.linear_cg_rr": [[18, 111], ["torch.zeros_like", "torch.empty_like", "torch.empty", "torch.empty_like", "residual.clone", "torch.zeros_like.expand_as().contiguous", "preconditioner", "preconditioner.mul().sum", "range", "print", "rhs.div.ndimension", "rhs.div.unsqueeze", "rhs.div.norm", "rhs.div.div", "rhs.div.size", "initial_guess.expand_as().contiguous.clone", "residual.clone", "torch.mul", "torch.sum", "torch.div", "torch.addcmul", "torch.addcmul", "preconditioner", "torch.empty_like.resize_as_().copy_", "torch.mul", "torch.sum", "torch.div", "residual.clone.mul_().add_", "print", "dist_of_iter.sample", "torch.zeros_like.expand_as", "preconditioner.mul", "torch.div", "torch.addcmul", "torch.addcmul", "residual.norm", "print", "residual.norm", "dist_of_iter.cdf", "residual.clone.norm", "print", "torch.empty_like.resize_as_", "residual.clone.mul_", "residual.clone.norm"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.MultivariateNormal.sample", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.dist_of_iterations_for_rrcg.RRDist.cdf"], ["def", "linear_cg_rr", "(", "kxx", ",", "rhs", ",", "use_rr", "=", "False", ",", "dist_of_iter", "=", "None", ",", "max_iter", "=", "None", ",", "J", "=", "None", ",", "\n", "max_tridiag_iter", "=", "None", ",", "tolerance", "=", "1e-5", ",", "normalize_rhs", "=", "True", ",", "preconditioner", "=", "None", ")", ":", "\n", "    ", "if", "use_rr", ":", "\n", "        ", "assert", "dist_of_iter", "is", "not", "None", "\n", "if", "J", "is", "None", ":", "\n", "            ", "J", "=", "dist_of_iter", ".", "sample", "(", ")", "\n", "", "else", ":", "\n", "            ", "assert", "max_iter", "<=", "dist_of_iter", ".", "N", ",", "\"given J = {}, but maximum J allowed is {}\"", ".", "format", "(", "J", ",", "dist_of_iter", ".", "N", ")", "\n", "", "max_iter", "=", "J", "\n", "\n", "", "is_vector", "=", "rhs", ".", "ndimension", "(", ")", "==", "1", "\n", "if", "is_vector", ":", "\n", "        ", "rhs", "=", "rhs", ".", "unsqueeze", "(", "-", "1", ")", "\n", "", "if", "normalize_rhs", ":", "\n", "        ", "rhs_norm", "=", "rhs", ".", "norm", "(", "2", ",", "dim", "=", "-", "2", ",", "keepdim", "=", "True", ")", "\n", "rhs", "=", "rhs", ".", "div", "(", "rhs_norm", ")", "\n", "\n", "", "if", "preconditioner", "is", "None", ":", "\n", "        ", "preconditioner", "=", "lambda", "x", ":", "x", "\n", "\n", "", "initial_guess", "=", "torch", ".", "zeros_like", "(", "rhs", ")", "\n", "residual", "=", "rhs", "-", "kxx", "@", "initial_guess", "\n", "batch_shape", "=", "residual", ".", "shape", "[", ":", "-", "2", "]", "\n", "\n", "# defining storage matrixes", "\n", "mul_storage", "=", "torch", ".", "empty_like", "(", "residual", ")", "\n", "alpha", "=", "torch", ".", "empty", "(", "*", "batch_shape", ",", "1", ",", "rhs", ".", "size", "(", "-", "1", ")", ",", "dtype", "=", "residual", ".", "dtype", ",", "device", "=", "residual", ".", "device", ")", "\n", "beta", "=", "torch", ".", "empty_like", "(", "alpha", ")", "\n", "\n", "search_direction", "=", "residual", ".", "clone", "(", ")", "\n", "solution", "=", "initial_guess", ".", "expand_as", "(", "residual", ")", ".", "contiguous", "(", ")", "\n", "\n", "if", "use_rr", ":", "\n", "        ", "rr_solution", "=", "solution", ".", "clone", "(", ")", "\n", "rr_residual", "=", "residual", ".", "clone", "(", ")", "\n", "\n", "", "precond_residual", "=", "preconditioner", "(", "residual", ")", "\n", "residual_inner_prod", "=", "precond_residual", ".", "mul", "(", "residual", ")", ".", "sum", "(", "-", "2", ",", "keepdim", "=", "True", ")", "\n", "\n", "for", "k", "in", "range", "(", "max_iter", ")", ":", "\n", "        ", "mvm", "=", "kxx", "@", "search_direction", "\n", "torch", ".", "mul", "(", "search_direction", ",", "mvm", ",", "out", "=", "mul_storage", ")", "\n", "torch", ".", "sum", "(", "mul_storage", ",", "-", "2", ",", "keepdim", "=", "True", ",", "out", "=", "alpha", ")", "\n", "\n", "torch", ".", "div", "(", "residual_inner_prod", ",", "alpha", ",", "out", "=", "alpha", ")", "\n", "\n", "# update solution", "\n", "torch", ".", "addcmul", "(", "solution", ",", "alpha", ",", "search_direction", ",", "out", "=", "solution", ")", "\n", "\n", "# update residual", "\n", "torch", ".", "addcmul", "(", "residual", ",", "-", "alpha", ",", "mvm", ",", "out", "=", "residual", ")", "\n", "# update precond_redisual", "\n", "precond_residual", "=", "preconditioner", "(", "residual", ")", "\n", "\n", "\n", "if", "use_rr", ":", "\n", "# update solution", "\n", "            ", "prob_k", "=", "(", "1", "-", "dist_of_iter", ".", "cdf", "(", "k", ")", ")", "\n", "torch", ".", "div", "(", "alpha", ",", "prob_k", ",", "out", "=", "alpha", ")", "\n", "torch", ".", "addcmul", "(", "rr_solution", ",", "alpha", ",", "search_direction", ",", "out", "=", "rr_solution", ")", "\n", "#rr_solution = rr_solution + alpha * search_direction / prob_k", "\n", "\n", "# update residual", "\n", "torch", ".", "addcmul", "(", "rr_residual", ",", "-", "alpha", ",", "mvm", ",", "out", "=", "rr_residual", ")", "\n", "\n", "if", "rr_residual", ".", "norm", "(", ")", "<", "tolerance", ":", "\n", "                ", "print", "(", "\"Terminating after {} iterations.\"", ".", "format", "(", "k", "+", "1", ")", ")", "\n", "\n", "", "", "if", "residual", ".", "norm", "(", ")", "<", "tolerance", ":", "\n", "            ", "print", "(", "\"Terminating after {} iterations.\"", ".", "format", "(", "k", "+", "1", ")", ")", "\n", "break", "\n", "\n", "", "beta", ".", "resize_as_", "(", "residual_inner_prod", ")", ".", "copy_", "(", "residual_inner_prod", ")", "\n", "\n", "# update residual_inner_product", "\n", "torch", ".", "mul", "(", "residual", ",", "precond_residual", ",", "out", "=", "mul_storage", ")", "\n", "torch", ".", "sum", "(", "mul_storage", ",", "-", "2", ",", "keepdim", "=", "True", ",", "out", "=", "residual_inner_prod", ")", "\n", "\n", "# update beta", "\n", "torch", ".", "div", "(", "residual_inner_prod", ",", "beta", ",", "out", "=", "beta", ")", "\n", "\n", "# update search direction", "\n", "search_direction", ".", "mul_", "(", "beta", ")", ".", "add_", "(", "residual", ")", "\n", "", "if", "use_rr", ":", "\n", "        ", "print", "(", "\"Residual after {} iterations: {}\"", ".", "format", "(", "k", "+", "1", ",", "rr_residual", ".", "norm", "(", ")", ")", ")", "\n", "if", "normalize_rhs", ":", "\n", "            ", "return", "rr_solution", "*", "rhs_norm", "\n", "", "return", "rr_solution", "\n", "\n", "", "print", "(", "\"Residual after {} iterations: {}\"", ".", "format", "(", "k", "+", "1", ",", "residual", ".", "norm", "(", ")", ")", ")", "\n", "if", "normalize_rhs", ":", "\n", "        ", "return", "solution", "*", "rhs_norm", "\n", "", "return", "solution", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg_experiments.run_rrcg_optimization.run": [[42, 224], ["torch.manual_seed", "numpy.random.seed", "experiments.load_data.load_uci_data", "print", "print", "torch.cuda.is_available", "rrcg_experiments.experiment_fns_for_rrcg.print_initial_hypers", "time.time", "datetime.datetime.now().strftime", "rrcg_experiments.experiment_fns_for_rrcg.start_all_logging_instruments", "rrcg_experiments.experiment_fns_for_rrcg.TrainGPRegressionModel", "time.time", "rrcg_experiments.experiment_fns_for_rrcg.start_all_logging_instruments.info", "rrcg_experiments.experiment_fns_for_rrcg.start_all_logging_instruments.info", "rrcg_experiments.experiment_fns_for_rrcg.start_all_logging_instruments.info", "len", "len", "len", "dist_of_iter_kwargs.get", "gpytorch.likelihoods.GaussianLikelihood", "rrcg_experiments.experiment_fns_for_rrcg.GPRegressionModel", "gpytorch.mlls.ExactMarginalLogLikelihood", "rrcg.gp_utils.GaussianLikelihood", "rrcg.gp_utils.GPRegressionModel", "rrcg.gp_utils.MLL", "rrcg.gp_utils.GPRegressionModel.initialize", "rrcg.gp_utils.GPRegressionModel.cuda", "rrcg_experiments.experiment_fns_for_rrcg.get_dist_of_iter", "rrcg_experiments.experiment_fns_for_rrcg.print_dist_stats", "os.path.exists", "print", "os.makedirs", "torch.load", "rrcg.gp_utils.GPRegressionModel.state_dict", "rrcg_experiments.experiment_fns_for_rrcg.start_all_logging_instruments.info", "torch.load.items", "rrcg.gp_utils.GPRegressionModel.load_state_dict", "print", "os.path.join", "rrcg_experiments.experiment_fns_for_rrcg.get_string_time_taken", "rrcg_experiments.experiment_fns_for_rrcg.get_hypers", "rrcg_experiments.experiment_fns_for_rrcg.save_results", "torch.save", "rrcg.gp_utils.GPRegressionModel.eval", "rrcg.gp_utils.GaussianLikelihood.eval", "time.time", "run_rrcg_optimization.get_prediction_stats", "time.time", "rrcg_experiments.experiment_fns_for_rrcg.start_all_logging_instruments.info", "rrcg_experiments.experiment_fns_for_rrcg.start_all_logging_instruments.info", "time.time", "run_rrcg_optimization.get_prediction_stats", "rrcg_experiments.experiment_fns_for_rrcg.start_all_logging_instruments.info", "time.time", "rrcg_experiments.experiment_fns_for_rrcg.start_all_logging_instruments.info", "torch.cuda.is_available", "datetime.datetime.now", "os.path.exists", "print", "os.makedirs", "os.path.exists", "print", "os.makedirs", "gpytorch.settings.max_cholesky_size", "rrcg_experiments.experiment_fns_for_rrcg.TrainGPRegressionModel.train", "gpytorch.settings.max_cholesky_size", "rrcg.gp_utils.GPRegressionModel.state_dict", "rrcg_experiments.experiment_fns_for_rrcg.get_string_time_taken", "rrcg_experiments.experiment_fns_for_rrcg.get_string_time_taken", "rrcg_experiments.experiment_fns_for_rrcg.start_all_logging_instruments.info", "gpytorch.settings.cg_tolerance", "valid_rmse.cpu().numpy", "torch.mean().cpu().numpy", "test_rmse.cpu().numpy", "torch.mean().cpu().numpy", "torch.round", "torch.round", "rrcg.rr_settings.use_rr_cg", "gpytorch.settings.max_cg_iterations", "valid_rmse.cpu", "torch.mean().cpu", "test_rmse.cpu", "torch.mean().cpu", "rrcg.rr_settings.rr_cg_nsamples", "rrcg_experiments.experiment_fns_for_rrcg.TrainGPRegressionModel.train", "gpytorch.settings.max_lanczos_quadrature_iterations", "rrcg_experiments.experiment_fns_for_rrcg.TrainGPRegressionModel.train", "torch.mean", "torch.mean"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.load_data.load_uci_data", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.print_initial_hypers", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.start_all_logging_instruments", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg_experiments.experiment_fns_for_rrcg.get_dist_of_iter", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg_experiments.experiment_fns_for_rrcg.print_dist_stats", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.get_string_time_taken", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.get_hypers", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.save_results", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.baselines.run_svgp.get_prediction_stats", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.baselines.run_svgp.get_prediction_stats", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.train", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.get_string_time_taken", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.get_string_time_taken", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.train", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.train", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.dist_of_iterations_for_rrcg.RRDist.mean", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.dist_of_iterations_for_rrcg.RRDist.mean"], ["def", "run", "(", "total_n", ",", "method", ",", "dataset", ",", "kernel_type", "=", "'rbf'", ",", "num_cg", "=", "10", ",", "\n", "rr_nsamples", "=", "2", ",", "use_scheduler", "=", "True", ",", "seed", "=", "10", ",", "total_iters", "=", "1000", ",", "lr", "=", "3e-2", ",", "eval", "=", "True", ",", "keops", "=", "True", ",", "\n", "save_model", "=", "False", ",", "save_hyper_trace", "=", "False", ",", "load", "=", "None", ",", "fix_outputscale", "=", "False", ",", "output_scale", "=", "0.62923026", ",", "**", "dist_of_iter_kwargs", ")", ":", "\n", "    ", "assert", "method", "in", "[", "'cholesky'", ",", "'rrcg'", ",", "'cg'", ",", "'gpt-cholesky'", ",", "'gpt-cg'", "]", ",", "method", "\n", "assert", "kernel_type", "in", "[", "'rbf'", ",", "'matern05'", ",", "'matern15'", ",", "'mater25'", ",", "'rbf-ard'", "]", ",", "kernel_type", "\n", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "num_cg_lanczos", "=", "num_cg", "\n", "\n", "###############", "\n", "##### Data ####", "\n", "###############", "\n", "train_x", ",", "train_y", ",", "test_x", ",", "test_y", ",", "valid_x", ",", "valid_y", "=", "load_uci_data", "(", "data_dir", "=", "None", ",", "dataset", "=", "dataset", ",", "total_n", "=", "total_n", ",", "\n", "cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "verbose", "=", "True", ")", "\n", "print", "(", "\"Dataset stats:\"", ")", "\n", "train_n", ",", "valid_n", ",", "test_n", "=", "len", "(", "train_x", ")", ",", "len", "(", "valid_x", ")", ",", "len", "(", "test_x", ")", "\n", "print", "(", "\"train_n = {}, val_n = {}, test_n = {}\"", ".", "format", "(", "train_n", ",", "valid_n", ",", "test_n", ")", ")", "\n", "if", "dist_of_iter_kwargs", ".", "get", "(", "\"rr_iter_max\"", ")", "is", "None", ":", "\n", "        ", "dist_of_iter_kwargs", "[", "'rr_iter_max'", "]", "=", "train_n", "\n", "\n", "###############", "\n", "#### Model ####", "\n", "###############", "\n", "", "if", "method", "==", "'gpt-cholesky'", "or", "method", "==", "'gpt-cg'", ":", "\n", "        ", "likelihood", "=", "gpytorch", ".", "likelihoods", ".", "GaussianLikelihood", "(", ")", "\n", "model", "=", "GptGPRegressionModel", "(", "\n", "train_x", ",", "train_y", ",", "likelihood", ",", "kernel_type", "=", "kernel_type", ",", "use_keops", "=", "keops", ")", "#torch.cuda.is_available())", "\n", "mll", "=", "gpytorch", ".", "mlls", ".", "ExactMarginalLogLikelihood", "(", "likelihood", ",", "model", ")", "\n", "", "else", ":", "\n", "        ", "likelihood", "=", "GaussianLikelihood", "(", ")", "\n", "model", "=", "GPRegressionModel", "(", "\n", "train_x", ",", "train_y", ",", "likelihood", ",", "kernel_type", "=", "kernel_type", ",", "use_keops", "=", "keops", ")", "#torch.cuda.is_available())", "\n", "mll", "=", "MLL", "(", "likelihood", ",", "model", ")", "\n", "\n", "", "if", "fix_outputscale", ":", "\n", "        ", "hypers", "=", "{", "\n", "'covar_module.outputscale'", ":", "output_scale", ",", "\n", "}", "\n", "model", ".", "initialize", "(", "**", "hypers", ")", "\n", "\n", "", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "", "get_ls", "=", "False", "if", "kernel_type", "==", "'rbf-ard'", "else", "True", "\n", "print_initial_hypers", "(", "model", ",", "print_ls", "=", "get_ls", ")", "\n", "\n", "if", "method", "==", "'rrcg'", ":", "\n", "        ", "dist_of_iter", "=", "get_dist_of_iter", "(", "**", "dist_of_iter_kwargs", ")", "\n", "print_dist_stats", "(", "dist_of_iter", ")", "\n", "", "else", ":", "\n", "        ", "dist_of_iter", "=", "None", "\n", "\n", "####################", "\n", "##### Training #####", "\n", "####################", "\n", "", "train_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "experiment_params", "=", "{", "\n", "# dataset params:", "\n", "'dataset'", ":", "dataset", ",", "\n", "'train_n'", ":", "train_n", ",", "\n", "'valid_n'", ":", "valid_n", ",", "\n", "'test_n'", ":", "test_n", ",", "\n", "\n", "# model params", "\n", "'method'", ":", "method", ",", "\n", "'kernel_type'", ":", "kernel_type", ",", "\n", "'keops'", ":", "keops", ",", "\n", "'num_cg'", ":", "num_cg", ",", "\n", "'rr_nsamples'", ":", "rr_nsamples", ",", "\n", "'dist_of_iter_mean'", ":", "dist_of_iter", ".", "mean", "if", "dist_of_iter", "else", "None", ",", "\n", "'dist_of_iter_var'", ":", "dist_of_iter", ".", "var", "if", "dist_of_iter", "else", "None", ",", "\n", "'fix_outputscale'", ":", "fix_outputscale", ",", "\n", "'output_scale'", ":", "output_scale", ",", "\n", "**", "dist_of_iter_kwargs", ",", "\n", "\n", "# training params", "\n", "'seed'", ":", "seed", ",", "\n", "'total_niters'", ":", "total_iters", ",", "\n", "'lr'", ":", "lr", ",", "\n", "'use_scheduler'", ":", "use_scheduler", ",", "\n", "\n", "# misc", "\n", "'save_model'", ":", "save_model", "\n", "}", "\n", "\n", "log_path", "=", "f'./logs/{dataset}'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "log_path", ")", ":", "\n", "        ", "print", "(", "f\"Creating log_path: {log_path}\"", ")", "\n", "os", ".", "makedirs", "(", "log_path", ")", "\n", "", "time_stamp", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y_%m_%d_%H_%M_%S\"", ")", "\n", "logger", "=", "start_all_logging_instruments", "(", "experiment_params", ",", "results_path", "=", "log_path", "+", "f'/{method}_'", ",", "time_stamp", "=", "time_stamp", ")", "\n", "\n", "if", "load", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "load", ")", "\n", "current_state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "logger", ".", "info", "(", "f\"Loading parameters from {load}\"", ")", "\n", "for", "name", ",", "param", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "name", "in", "current_state_dict", ":", "\n", "                ", "logger", ".", "info", "(", "f\"{name}: {param.shape} into {current_state_dict[name].shape}\"", ")", "\n", "", "", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "\n", "# hyper-param-trace hyper_trace path", "\n", "", "if", "save_hyper_trace", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "\"./hyper_trace/{}\"", ".", "format", "(", "dataset", ")", ")", ":", "\n", "            ", "print", "(", "\"Creating hyper_trace/{} directory...\"", ".", "format", "(", "dataset", ")", ")", "\n", "os", ".", "makedirs", "(", "\"./hyper_trace/{}\"", ".", "format", "(", "dataset", ")", ")", "\n", "\n", "", "if", "method", "==", "'cholesky'", "or", "method", "==", "'gpt-cholesky'", ":", "\n", "            ", "hyper_trace_results_path", "=", "f'./hyper_trace/{dataset}/method={method}_kernel={kernel_type}_ndata={total_n}_lr={lr}_niters={total_iters}_schedule={use_scheduler}_seed={seed}.pkl'", "\n", "", "elif", "method", "==", "'cg'", "or", "method", "==", "'gpt-cg'", ":", "\n", "            ", "hyper_trace_results_path", "=", "f'./hyper_trace/{dataset}/method={method}_numcg={num_cg}_kernel={kernel_type}_ndata={total_n}_lr={lr}_niters={total_iters}_schedule={use_scheduler}_seed={seed}.pkl'", "\n", "", "else", ":", "\n", "            ", "hyper_trace_results_path", "=", "f'./hyper_trace/{dataset}/method={method}_mean={torch.round(dist_of_iter.mean)}_std={torch.round(dist_of_iter.std)}_rrnsamples={rr_nsamples}_kernel={kernel_type}_ndata={total_n}_lr={lr}_niters={total_iters}_schedule={use_scheduler}_seed={seed}.pkl'", "\n", "", "print", "(", "\"Saving hyper_trace to \\n\"", ",", "hyper_trace_results_path", ")", "\n", "\n", "", "if", "save_model", ":", "\n", "        ", "model_path", "=", "f'./models/{dataset}'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "model_path", ")", ":", "\n", "            ", "print", "(", "f\"Creating model_path: {model_path}\"", ")", "\n", "os", ".", "makedirs", "(", "model_path", ")", "\n", "", "save_path", "=", "os", ".", "path", ".", "join", "(", "model_path", ",", "f'{method}_model_{time_stamp}'", ")", "\n", "", "else", ":", "\n", "        ", "save_path", "=", "None", "\n", "\n", "", "tr", "=", "TrainGPRegressionModel", "(", "model", ",", "likelihood", ",", "mll", "=", "mll", ",", "dist_of_iter", "=", "dist_of_iter", ",", "logger", "=", "logger", ",", "method", "=", "method", ",", "\n", "total_iters", "=", "total_iters", ",", "lr", "=", "lr", ",", "use_scheduler", "=", "use_scheduler", ",", "track_ls", "=", "get_ls", ",", "\n", "track_hyper_trace", "=", "save_hyper_trace", ",", "\n", "fix_outputscale", "=", "fix_outputscale", ",", "save_path", "=", "save_path", ")", "\n", "\n", "if", "method", "==", "'cholesky'", ":", "\n", "        ", "with", "gpytorch", ".", "settings", ".", "max_cholesky_size", "(", "1e10", ")", ":", "\n", "            ", "tr", ".", "train", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "with", "gpytorch", ".", "settings", ".", "max_cholesky_size", "(", "0", ")", ":", "\n", "            ", "with", "gpytorch", ".", "settings", ".", "cg_tolerance", "(", "1e-8", ")", ":", "\n", "                ", "if", "method", "==", "'rrcg'", ":", "\n", "                    ", "with", "rr_settings", ".", "use_rr_cg", "(", ")", ":", "\n", "                        ", "with", "rr_settings", ".", "rr_cg_nsamples", "(", "rr_nsamples", ")", ":", "\n", "                            ", "tr", ".", "train", "(", ")", "\n", "", "", "", "else", ":", "\n", "                    ", "with", "gpytorch", ".", "settings", ".", "max_cg_iterations", "(", "num_cg", ")", ":", "\n", "                        ", "with", "gpytorch", ".", "settings", ".", "max_lanczos_quadrature_iterations", "(", "num_cg_lanczos", ")", ":", "\n", "                            ", "tr", ".", "train", "(", ")", "\n", "", "", "", "", "", "", "train_end", "=", "time", ".", "time", "(", ")", "\n", "\n", "logger", ".", "info", "(", "f\"\\nFinish Training.\"", ")", "\n", "logger", ".", "info", "(", "get_string_time_taken", "(", "train_start", ",", "train_end", ")", ")", "\n", "logger", ".", "info", "(", "get_hypers", "(", "model", ")", ")", "\n", "\n", "if", "save_hyper_trace", ":", "\n", "        ", "save_results", "(", "tr", ".", "hyper_trace", ",", "hyper_trace_results_path", ")", "\n", "\n", "", "if", "save_model", ":", "\n", "        ", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "\n", "\n", "##############", "\n", "# Prediction #", "\n", "##############", "\n", "", "if", "eval", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "likelihood", ".", "eval", "(", ")", "\n", "\n", "# Make predictions by feeding model through likelihood", "\n", "eval_valid_start", "=", "time", ".", "time", "(", ")", "\n", "valid_rmse", ",", "valid_nll", "=", "get_prediction_stats", "(", "model", ",", "valid_x", ",", "valid_y", ")", "\n", "eval_valid_end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\n", "\"Valid rmse = {:.4f}, nll = {:.4f}\"", ".", "format", "(", "valid_rmse", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "torch", ".", "mean", "(", "valid_nll", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "logger", ".", "info", "(", "get_string_time_taken", "(", "eval_valid_start", ",", "eval_valid_end", ")", ")", "\n", "\n", "eval_test_start", "=", "time", ".", "time", "(", ")", "\n", "test_rmse", ",", "test_nll", "=", "get_prediction_stats", "(", "model", ",", "test_x", ",", "test_y", ")", "\n", "logger", ".", "info", "(", "\n", "\"Test rmse = {:.4f}, nll = {:.4f}\"", ".", "format", "(", "test_rmse", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "torch", ".", "mean", "(", "test_nll", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "eval_test_end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "get_string_time_taken", "(", "eval_test_start", ",", "eval_test_end", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg_experiments.run_rrcg_optimization.get_prediction_stats": [[226, 238], ["torch.no_grad", "gpytorch.settings.fast_pred_var", "model.likelihood", "torch.sqrt", "isinstance", "model", "torch.mean", "torch.pow", "model.likelihood.log_marginal_from_marginal", "model.likelihood.log_marginal", "model"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.dist_of_iterations_for_rrcg.RRDist.mean", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.GaussianLikelihood.log_marginal_from_marginal", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.GaussianLikelihood.log_marginal"], ["", "", "def", "get_prediction_stats", "(", "model", ",", "x", ",", "y", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "with", "gpytorch", ".", "settings", ".", "fast_pred_var", "(", ")", ":", "\n", "            ", "observed_pred", "=", "model", ".", "likelihood", "(", "model", "(", "x", ")", ")", "\n", "rmse", "=", "torch", ".", "sqrt", "(", "torch", ".", "mean", "(", "torch", ".", "pow", "(", "observed_pred", ".", "mean", "-", "y", ",", "2", ")", ")", ")", "# a scalar", "\n", "\n", "if", "isinstance", "(", "model", ",", "GPRegressionModel", ")", ":", "\n", "                ", "nll", "=", "-", "model", ".", "likelihood", ".", "log_marginal_from_marginal", "(", "marginal", "=", "observed_pred", ",", "observations", "=", "y", ")", "# (bsz_x, )", "\n", "", "else", ":", "\n", "                ", "nll", "=", "-", "model", ".", "likelihood", ".", "log_marginal", "(", "observations", "=", "y", ",", "function_dist", "=", "model", "(", "x", ")", ")", "\n", "\n", "", "", "", "return", "rmse", ",", "nll", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg_experiments.generate_script_for_multiple_rr_iters.main": [[7, 55], ["open", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write"], "function", ["None"], ["def", "main", "(", "dataset", "=", "'pol'", ",", "keops", "=", "True", ",", "toy_setup", "=", "False", ")", ":", "\n", "    ", "hyper_trace_dir", "=", "f\"./hyper_trace\"", "\n", "\n", "if", "toy_setup", ":", "\n", "        ", "total_n", "=", "100", "\n", "total_iters_range", "=", "[", "10", "]", "\n", "lr_range", "=", "[", "5e-2", ",", "1e-2", "]", "\n", "rr_temp_range", "=", "[", "0.1", "]", "\n", "rr_iter_min_range", "=", "[", "10", ",", "30", "]", "\n", "cg_iter_range", "=", "[", "20", "]", "\n", "", "else", ":", "\n", "        ", "total_n", "=", "-", "1", "\n", "total_iters_range", "=", "[", "1500", "]", "\n", "lr_range", "=", "[", "1e-2", "]", "\n", "rr_temp_range", "=", "[", "0.1", ",", "0.05", "]", "\n", "#rr_temp_range = [0.1, 0.05]", "\n", "rr_iter_min_range", "=", "[", "10", ",", "20", ",", "30", ",", "40", ",", "50", ",", "60", ",", "70", ",", "80", ",", "90", "]", "\n", "cg_iter_range", "=", "[", "20", ",", "30", ",", "40", ",", "50", ",", "60", ",", "70", ",", "80", ",", "90", ",", "100", "]", "\n", "\n", "", "with", "open", "(", "\"run_multiple_rr_iters.sh\"", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "\"#!/bin/bash\\n\"", ")", "\n", "\n", "f", ".", "write", "(", "f\"\\n\\n##############################\\n # Dataset {dataset} #\\n##############################\\n\"", ")", "\n", "\n", "# run rrcg_optimization", "\n", "for", "lr", "in", "lr_range", ":", "\n", "            ", "for", "total_iters", "in", "total_iters_range", ":", "\n", "\n", "# RRCG", "\n", "                ", "f", ".", "write", "(", "\"\\n####### RRCG ######\\n\"", ")", "\n", "for", "temp", "in", "rr_temp_range", ":", "\n", "                    ", "for", "rr_iter_min", "in", "rr_iter_min_range", ":", "\n", "\n", "                        ", "method", "=", "'rrcg'", "\n", "f", ".", "write", "(", "f\"python run_rrcg_optimization.py --dataset={dataset} --total-n={total_n} --method={method} --rr_dist_type=expdecay --temp={temp} --rr-iter-min={rr_iter_min} --kernel-type=rbf --total-iters={total_iters} --lr={lr} --eval=False --save-hyper-trace=True --keops={keops}\\n\"", ")", "\n", "\n", "# CG", "\n", "\n", "", "", "f", ".", "write", "(", "\"\\n####### CG #######\\n\"", ")", "\n", "for", "num_cg", "in", "cg_iter_range", ":", "\n", "                    ", "method", "=", "'cg'", "\n", "f", ".", "write", "(", "f\"python run_rrcg_optimization.py --dataset={dataset} --total-n={total_n} --method={method} --num-cg={num_cg} --kernel-type=rbf --total-iters={total_iters} --lr={lr} --eval=False --save-hyper-trace=True --keops={keops}\\n\"", ")", "\n", "\n", "# run get_exact_loss", "\n", "\n", "", "", "", "f", ".", "write", "(", "\"\\nsleep 5s\\n\"", ")", "\n", "\n", "f", ".", "write", "(", "f\"python run_multiple_rr_iters.py --hyper-trace-dir={hyper_trace_dir} --keops={keops}\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg_experiments.experiment_fns_for_rrcg.TrainGPRegressionModel.__init__": [[19, 63], ["torch.optim.Adam", "model.parameters", "torch.optim.lr_scheduler.MultiStepLR", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "int", "int", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "likelihood", ",", "mll", ",", "dist_of_iter", ",", "logger", ",", "method", ",", "total_iters", "=", "500", ",", "lr", "=", "5e-2", ",", "\n", "use_scheduler", "=", "False", ",", "track_ls", "=", "True", ",", "track_hyper_trace", "=", "True", ",", "fix_outputscale", "=", "False", ",", "save_path", "=", "None", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "self", ".", "likelihood", "=", "likelihood", "\n", "#self.iterator = tqdm(range(total_iters), desc=\"{} GP Training\".format(method_name))", "\n", "self", ".", "total_iters", "=", "total_iters", "\n", "self", ".", "train_x", ",", "self", ".", "train_y", "=", "model", ".", "train_inputs", "[", "0", "]", ",", "model", ".", "train_targets", "\n", "if", "fix_outputscale", ":", "\n", "            ", "params", "=", "[", "model", ".", "covar_module", ".", "base_kernel", ".", "raw_lengthscale", ",", "model", ".", "likelihood", ".", "noise_covar", ".", "raw_noise", "]", "\n", "", "else", ":", "\n", "            ", "params", "=", "model", ".", "parameters", "(", ")", "\n", "", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "lr", ")", "\n", "\n", "self", ".", "use_scheduler", "=", "use_scheduler", "\n", "if", "self", ".", "use_scheduler", ":", "\n", "            ", "self", ".", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "\n", "optimizer", "=", "self", ".", "optimizer", ",", "\n", "milestones", "=", "[", "int", "(", "0.5", "*", "total_iters", ")", ",", "int", "(", "0.7", "*", "total_iters", ")", ",", "int", "(", "0.9", "*", "total_iters", ")", "]", ",", "\n", "gamma", "=", "0.1", ")", "\n", "\n", "", "self", ".", "mll", "=", "mll", "\n", "self", ".", "loss", ",", "self", ".", "ls", ",", "self", ".", "os", ",", "self", ".", "noise", "=", "0.", ",", "0.", ",", "0.", ",", "0.", "\n", "self", ".", "track_hyper_trace", "=", "track_hyper_trace", "\n", "self", ".", "track_ls", "=", "track_ls", "\n", "if", "self", ".", "track_hyper_trace", ":", "\n", "            ", "if", "track_ls", ":", "\n", "# TODO: change it to accomodating ard kernels", "\n", "                ", "self", ".", "hyper_trace", "=", "{", "'ls'", ":", "np", ".", "zeros", "(", "total_iters", ")", ",", "\n", "'os'", ":", "np", ".", "zeros", "(", "total_iters", ")", ",", "\n", "'noise'", ":", "np", ".", "zeros", "(", "total_iters", ")", ",", "\n", "'loss'", ":", "np", ".", "zeros", "(", "total_iters", ")", "}", "\n", "", "else", ":", "\n", "                ", "self", ".", "hyper_trace", "=", "{", "#ls': np.zeros(total_iters, ard_dim),", "\n", "'os'", ":", "np", ".", "zeros", "(", "total_iters", ")", ",", "\n", "'noise'", ":", "np", ".", "zeros", "(", "total_iters", ")", ",", "\n", "'loss'", ":", "np", ".", "zeros", "(", "total_iters", ")", "}", "\n", "", "", "self", ".", "iter", "=", "0", "\n", "self", ".", "dist_of_iter", "=", "dist_of_iter", "\n", "\n", "self", ".", "logger", "=", "logger", "\n", "assert", "method", "in", "[", "'cholesky'", ",", "'rrcg'", ",", "'cg'", ",", "'gpt-cholesky'", ",", "'gpt-cg'", "]", ",", "method", "\n", "self", ".", "method", "=", "method", "\n", "self", ".", "save_path", "=", "save_path", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg_experiments.experiment_fns_for_rrcg.TrainGPRegressionModel._train_gpt": [[64, 73], ["experiment_fns_for_rrcg.TrainGPRegressionModel.model.train", "range", "time.time", "experiment_fns_for_rrcg.TrainGPRegressionModel._take_one_step_gpt", "time.time", "experiment_fns_for_rrcg.TrainGPRegressionModel.update_trackers"], "methods", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.train", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg_experiments.experiment_fns_for_rrcg.TrainGPRegressionModel._take_one_step_gpt", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.TrainGPRR.update_trackers"], ["", "def", "_train_gpt", "(", "self", ")", ":", "\n", "        ", "\"\"\"this is for gpytorch model which does not receive dist_of_iter as input\"\"\"", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "#for _ in self.iterator:", "\n", "for", "_", "in", "range", "(", "self", ".", "total_iters", ")", ":", "\n", "            ", "tic", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "_take_one_step_gpt", "(", ")", "\n", "toc", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "update_trackers", "(", "time_taken", "=", "toc", "-", "tic", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg_experiments.experiment_fns_for_rrcg.TrainGPRegressionModel._take_one_step_gpt": [[74, 82], ["experiment_fns_for_rrcg.TrainGPRegressionModel.optimizer.zero_grad", "experiment_fns_for_rrcg.TrainGPRegressionModel.model", "experiment_fns_for_rrcg.TrainGPRegressionModel.loss.backward", "experiment_fns_for_rrcg.TrainGPRegressionModel.optimizer.step", "experiment_fns_for_rrcg.TrainGPRegressionModel.mll", "experiment_fns_for_rrcg.TrainGPRegressionModel.scheduler.step"], "methods", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg._inv_quad_log_det.InvQuadLogDet.backward"], ["", "", "def", "_take_one_step_gpt", "(", "self", ")", ":", "\n", "        ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "y_hat", "=", "self", ".", "model", "(", "self", ".", "train_x", ")", "\n", "self", ".", "loss", "=", "-", "self", ".", "mll", "(", "y_hat", ",", "self", ".", "train_y", ")", "\n", "self", ".", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "if", "self", ".", "use_scheduler", ":", "\n", "            ", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg_experiments.experiment_fns_for_rrcg.TrainGPRegressionModel.train": [[83, 101], ["experiment_fns_for_rrcg.TrainGPRegressionModel.model.train", "range", "experiment_fns_for_rrcg.TrainGPRegressionModel._train_gpt", "time.time", "experiment_fns_for_rrcg.TrainGPRegressionModel.take_one_step", "time.time", "experiment_fns_for_rrcg.TrainGPRegressionModel.update_trackers", "print", "torch.save", "experiment_fns_for_rrcg.TrainGPRegressionModel.model.state_dict"], "methods", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.train", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg_experiments.experiment_fns_for_rrcg.TrainGPRegressionModel._train_gpt", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.TrainGPRR.take_one_step", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.TrainGPRR.update_trackers"], ["", "", "def", "train", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "method", "==", "'gpt-cholesky'", "or", "self", ".", "method", "==", "'gpt-cg'", ":", "\n", "            ", "self", ".", "_train_gpt", "(", ")", "\n", "return", "\n", "\n", "", "self", ".", "model", ".", "train", "(", ")", "\n", "#for _ in self.iterator:", "\n", "for", "itr", "in", "range", "(", "self", ".", "total_iters", ")", ":", "\n", "            ", "tic", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "take_one_step", "(", ")", "\n", "toc", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "update_trackers", "(", "time_taken", "=", "toc", "-", "tic", ")", "\n", "\n", "if", "(", "itr", "+", "1", ")", "%", "50", "==", "0", ":", "\n", "                ", "if", "self", ".", "save_path", "is", "not", "None", ":", "\n", "                    ", "save_path", "=", "self", ".", "save_path", "+", "f\".iter{itr + 1}\"", "\n", "print", "(", "f\"Saving model at {save_path}\"", ")", "\n", "torch", ".", "save", "(", "self", ".", "model", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg_experiments.experiment_fns_for_rrcg.TrainGPRegressionModel.take_one_step": [[103, 111], ["experiment_fns_for_rrcg.TrainGPRegressionModel.optimizer.zero_grad", "experiment_fns_for_rrcg.TrainGPRegressionModel.model", "experiment_fns_for_rrcg.TrainGPRegressionModel.loss.backward", "experiment_fns_for_rrcg.TrainGPRegressionModel.optimizer.step", "experiment_fns_for_rrcg.TrainGPRegressionModel.mll", "experiment_fns_for_rrcg.TrainGPRegressionModel.scheduler.step"], "methods", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg._inv_quad_log_det.InvQuadLogDet.backward"], ["", "", "", "", "def", "take_one_step", "(", "self", ")", ":", "\n", "        ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "y_hat", "=", "self", ".", "model", "(", "self", ".", "train_x", ")", "\n", "self", ".", "loss", "=", "-", "self", ".", "mll", "(", "y_hat", ",", "self", ".", "train_y", ",", "dist_of_iter", "=", "self", ".", "dist_of_iter", ")", "\n", "self", ".", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "if", "self", ".", "use_scheduler", ":", "\n", "            ", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg_experiments.experiment_fns_for_rrcg.TrainGPRegressionModel.update_trackers": [[112, 122], ["experiment_fns_for_rrcg.TrainGPRegressionModel.update_params", "experiment_fns_for_rrcg.update_logger", "experiment_fns_for_rrcg.TrainGPRegressionModel.update_results"], "methods", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.TrainGPRR.update_params", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.update_logger", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.TrainGPRR.update_results"], ["", "", "def", "update_trackers", "(", "self", ",", "time_taken", ")", ":", "\n", "        ", "self", ".", "update_params", "(", ")", "\n", "#update_iterator_print(self.iterator, self.loss.item(),", "\n", "#                      self.ls, self.os, self.noise, lr=self.optimizer.param_groups[0]['lr'])", "\n", "update_logger", "(", "self", ".", "logger", ",", "loss", "=", "self", ".", "loss", ",", "lr", "=", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "iteration", "=", "self", ".", "iter", ",", "\n", "ls", "=", "self", ".", "ls", ",", "os", "=", "self", ".", "os", ",", "noise", "=", "self", ".", "noise", ",", "\n", "time_taken", "=", "time_taken", ",", "track_ls", "=", "self", ".", "track_ls", ")", "\n", "if", "self", ".", "track_hyper_trace", ":", "\n", "            ", "self", ".", "update_results", "(", ")", "\n", "", "self", ".", "iter", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg_experiments.experiment_fns_for_rrcg.TrainGPRegressionModel.update_params": [[123, 133], ["experiment_fns_for_rrcg.TrainGPRegressionModel.model.covar_module.outputscale.item", "experiment_fns_for_rrcg.TrainGPRegressionModel.likelihood.noise.item", "experiment_fns_for_rrcg.TrainGPRegressionModel.model.covar_module.base_kernel.lengthscale.item", "experiment_fns_for_rrcg.TrainGPRegressionModel.model.covar_module.base_kernel.lengthscale.squeeze().tolist", "experiment_fns_for_rrcg.TrainGPRegressionModel.model.covar_module.base_kernel.lengthscale.squeeze"], "methods", ["None"], ["", "def", "update_params", "(", "self", ")", ":", "\n", "#outputscale = 0.62923026", "\n", "#self.model.covar_module.outputscale = outputscale", "\n", "        ", "if", "self", ".", "track_ls", ":", "\n", "# if ard kernel, then lengthscale is of shape (1, ard_num_dim)", "\n", "            ", "self", ".", "ls", "=", "self", ".", "model", ".", "covar_module", ".", "base_kernel", ".", "lengthscale", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "ls", "=", "self", ".", "model", ".", "covar_module", ".", "base_kernel", ".", "lengthscale", ".", "squeeze", "(", ")", ".", "tolist", "(", ")", "\n", "", "self", ".", "os", "=", "self", ".", "model", ".", "covar_module", ".", "outputscale", ".", "item", "(", ")", "\n", "self", ".", "noise", "=", "self", ".", "likelihood", ".", "noise", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg_experiments.experiment_fns_for_rrcg.TrainGPRegressionModel.update_results": [[134, 140], ["None"], "methods", ["None"], ["", "def", "update_results", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "track_ls", ":", "\n", "            ", "self", ".", "hyper_trace", "[", "'ls'", "]", "[", "self", ".", "iter", "]", "=", "self", ".", "ls", "\n", "", "self", ".", "hyper_trace", "[", "'os'", "]", "[", "self", ".", "iter", "]", "=", "self", ".", "os", "\n", "self", ".", "hyper_trace", "[", "'noise'", "]", "[", "self", ".", "iter", "]", "=", "self", ".", "noise", "\n", "self", ".", "hyper_trace", "[", "'loss'", "]", "[", "self", ".", "iter", "]", "=", "self", ".", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg_experiments.experiment_fns_for_rrcg.GPRegressionModel.__init__": [[268, 308], ["super().__init__", "gpytorch.means.ZeroMean", "gpytorch.kernels.ScaleKernel", "torch.cuda.is_available", "gpytorch.kernels.keops.RBFKernel", "gpytorch.kernels.RBFKernel", "gpytorch.kernels.keops.MaternKernel", "gpytorch.kernels.MaternKernel", "gpytorch.kernels.keops.MaternKernel", "gpytorch.kernels.MaternKernel", "gpytorch.kernels.keops.MaternKernel", "gpytorch.kernels.MaternKernel", "ValueError", "ValueError", "print", "gpytorch.kernels.keops.RBFKernel", "print", "gpytorch.kernels.RBFKernel"], "methods", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.baselines.run_svgp.SVGPModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "train_x", ",", "train_y", ",", "likelihood", ",", "kernel_type", "=", "'rbf'", ",", "use_keops", "=", "False", ",", "ard_dim", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "train_x", ",", "train_y", ",", "likelihood", ")", "\n", "self", ".", "mean_module", "=", "gpt", ".", "means", ".", "ZeroMean", "(", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "use_keops", ":", "\n", "            ", "if", "kernel_type", "==", "'rbf'", ":", "\n", "                ", "kernel", "=", "gpt", ".", "kernels", ".", "keops", ".", "RBFKernel", "(", ")", "\n", "", "elif", "kernel_type", "==", "'matern05'", ":", "\n", "                ", "kernel", "=", "gpt", ".", "kernels", ".", "keops", ".", "MaternKernel", "(", "nu", "=", "0.5", ")", "\n", "", "elif", "kernel_type", "==", "'matern15'", ":", "\n", "                ", "kernel", "=", "gpt", ".", "kernels", ".", "keops", ".", "MaternKernel", "(", "nu", "=", "1.5", ")", "\n", "", "elif", "kernel_type", "==", "'matern25'", ":", "\n", "                ", "kernel", "=", "gpt", ".", "kernels", ".", "keops", ".", "MaternKernel", "(", "nu", "=", "2.5", ")", "\n", "", "elif", "kernel_type", "==", "'rbf-ard'", ":", "\n", "                ", "if", "ard_dim", "is", "None", ":", "\n", "                    ", "ard_dim", "=", "train_x", ".", "shape", "[", "-", "1", "]", "\n", "print", "(", "f\"Getting ard_dim from training input, ard_dim = {ard_dim}\"", ")", "\n", "kernel", "=", "gpt", ".", "kernels", ".", "keops", ".", "RBFKernel", "(", "ard_num_dims", "=", "ard_dim", ")", "\n", "", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"kernel_type must be chosen among {}, but got {}.\"", ".", "format", "(", "\n", "[", "'rbf'", ",", "'matern05'", ",", "'matern15'", ",", "'matern25'", "]", ",", "kernel_type", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "kernel_type", "==", "'rbf'", ":", "\n", "                ", "kernel", "=", "gpt", ".", "kernels", ".", "RBFKernel", "(", ")", "\n", "", "elif", "kernel_type", "==", "'matern05'", ":", "\n", "                ", "kernel", "=", "gpt", ".", "kernels", ".", "MaternKernel", "(", "nu", "=", "0.5", ")", "\n", "", "elif", "kernel_type", "==", "'matern15'", ":", "\n", "                ", "kernel", "=", "gpt", ".", "kernels", ".", "MaternKernel", "(", "nu", "=", "1.5", ")", "\n", "", "elif", "kernel_type", "==", "'matern25'", ":", "\n", "                ", "kernel", "=", "gpt", ".", "kernels", ".", "MaternKernel", "(", "nu", "=", "2.5", ")", "\n", "", "elif", "kernel_type", "==", "'rbf-ard'", ":", "\n", "                ", "if", "ard_dim", "is", "None", ":", "\n", "                    ", "ard_dim", "=", "train_x", ".", "shape", "[", "-", "1", "]", "\n", "print", "(", "f\"Getting ard_dim from training input, ard_dim = {ard_dim}\"", ")", "\n", "kernel", "=", "gpt", ".", "kernels", ".", "RBFKernel", "(", "ard_num_dims", "=", "ard_dim", ")", "\n", "", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"kernel_type must be chosen among {}, but got {}.\"", ".", "format", "(", "\n", "[", "'rbf'", ",", "'matern05'", ",", "'matern15'", ",", "'matern25'", "]", ",", "kernel_type", ")", ")", "\n", "\n", "", "", "self", ".", "covar_module", "=", "gpt", ".", "kernels", ".", "ScaleKernel", "(", "\n", "kernel", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg_experiments.experiment_fns_for_rrcg.GPRegressionModel.forward": [[310, 314], ["experiment_fns_for_rrcg.GPRegressionModel.mean_module", "experiment_fns_for_rrcg.GPRegressionModel.covar_module", "gpytorch.distributions.MultivariateNormal"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "mean_x", "=", "self", ".", "mean_module", "(", "x", ")", "\n", "covar_x", "=", "self", ".", "covar_module", "(", "x", ")", "\n", "return", "gpt", ".", "distributions", ".", "MultivariateNormal", "(", "mean_x", ",", "covar_x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg_experiments.experiment_fns_for_rrcg.update_iterator_print": [[13, 15], ["iterator.set_postfix"], "function", ["None"], ["def", "update_iterator_print", "(", "iterator", ",", "loss", ",", "ls", ",", "os", ",", "noise", ",", "lr", ")", ":", "\n", "    ", "iterator", ".", "set_postfix", "(", "loss", "=", "loss", ",", "ls", "=", "ls", ",", "os", "=", "os", ",", "noise", "=", "noise", ",", "lr", "=", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg_experiments.experiment_fns_for_rrcg.update_logger": [[142, 153], ["logger.info"], "function", ["None"], ["", "", "def", "update_logger", "(", "logger", ",", "loss", ",", "lr", ",", "ls", ",", "os", ",", "noise", ",", "iteration", ",", "time_taken", ",", "track_ls", "=", "True", ")", ":", "\n", "    ", "if", "track_ls", ":", "\n", "        ", "text", "=", "f'iter: {iteration:4d} | loss: {loss:+1.4e} | lr: {lr:.5f} | '", "\n", "text", "+=", "f'ls: {ls:4.6f} | noise: {noise:4.6f} | os: {os:4.6f} | '", "\n", "text", "+=", "f'time: {time_taken:4.2f} sec'", "\n", "", "else", ":", "\n", "        ", "text", "=", "f'iter: {iteration:4d} | loss: {loss:+1.4e} | lr: {lr:.5f} | '", "\n", "text", "+=", "'ls: '", "+", "','", ".", "join", "(", "[", "f'{sub_ls:4.6f}'", "for", "sub_ls", "in", "ls", "]", ")", "+", "' | '", "\n", "text", "+=", "f'noise: {noise:4.6f} | os: {os:4.6f} | '", "\n", "text", "+=", "f'time: {time_taken:4.2f} sec'", "\n", "", "logger", ".", "info", "(", "text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg_experiments.experiment_fns_for_rrcg.start_all_logging_instruments": [[155, 163], ["experiment_fns_for_rrcg.setup_logger", "experiment_fns_for_rrcg.log_all_settings", "datetime.datetime.now().strftime", "datetime.datetime.now"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.setup_logger", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.log_all_settings"], ["", "def", "start_all_logging_instruments", "(", "settings", ",", "results_path", ",", "time_stamp", "=", "None", ")", ":", "\n", "    ", "if", "time_stamp", "is", "None", ":", "\n", "        ", "time_stamp", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y_%m_%d_%H_%M_%S\"", ")", "\n", "", "log_file_name", "=", "results_path", "+", "'loss_'", "+", "time_stamp", "+", "'.log'", "\n", "logger_name", "=", "'log_'", "+", "time_stamp", "\n", "logger", "=", "setup_logger", "(", "log_file_name", ",", "logger_name", ")", "\n", "log_all_settings", "(", "settings", ",", "logger", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg_experiments.experiment_fns_for_rrcg.log_all_settings": [[165, 168], ["settings.items", "logger.info"], "function", ["None"], ["", "def", "log_all_settings", "(", "settings", ",", "logger", ")", ":", "\n", "    ", "for", "key", ",", "value", "in", "settings", ".", "items", "(", ")", ":", "\n", "        ", "logger", ".", "info", "(", "f'Hyper: {key}: {value}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg_experiments.experiment_fns_for_rrcg.setup_logger": [[170, 189], ["logging.getLogger.setLevel", "logging.Formatter", "logging.Formatter", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logging.getLogger.addHandler", "logging.getLogger", "logging.getLogger"], "function", ["None"], ["", "", "def", "setup_logger", "(", "log_file_name", ",", "logger_name", ":", "str", "=", "None", ")", ":", "\n", "    ", "if", "logger_name", "is", "None", ":", "\n", "        ", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "", "else", ":", "\n", "        ", "logger", "=", "logging", ".", "getLogger", "(", "logger_name", ")", "\n", "", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s:    %(message)s'", ")", "\n", "stream_formatter", "=", "logging", ".", "Formatter", "(", "'%(message)s'", ")", "\n", "\n", "file_handler", "=", "logging", ".", "FileHandler", "(", "filename", "=", "log_file_name", ")", "\n", "file_handler", ".", "setFormatter", "(", "fmt", "=", "formatter", ")", "\n", "\n", "stream_handler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "stream_handler", ".", "setFormatter", "(", "fmt", "=", "stream_formatter", ")", "\n", "\n", "logger", ".", "addHandler", "(", "hdlr", "=", "file_handler", ")", "\n", "logger", ".", "addHandler", "(", "hdlr", "=", "stream_handler", ")", "\n", "logger", ".", "propagate", "=", "False", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg_experiments.experiment_fns_for_rrcg.print_dist_stats": [[191, 194], ["print", "print"], "function", ["None"], ["", "def", "print_dist_stats", "(", "dist", ")", ":", "\n", "    ", "print", "(", "\"mean = \"", ",", "dist", ".", "mean", ")", "\n", "print", "(", "\"std = \"", ",", "dist", ".", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg_experiments.experiment_fns_for_rrcg.get_dist_of_iter": [[196, 216], ["dist_of_iter_kwargs.get", "dist_of_iter_kwargs.get", "dist_of_iter_kwargs.get", "torch.cuda.is_available", "torch.device", "torch.device", "rrcg.dist_of_iterations_for_rrcg.ExpDecayDist", "dist_of_iter_kwargs.get", "rrcg.dist_of_iterations_for_rrcg.OneOverJ", "dist_of_iter_kwargs.get", "rrcg.dist_of_iterations_for_rrcg.Geometric"], "function", ["None"], ["", "def", "get_dist_of_iter", "(", "**", "dist_of_iter_kwargs", ")", ":", "\n", "    ", "dist_type", "=", "dist_of_iter_kwargs", "[", "'rr_dist_type'", "]", "\n", "assert", "dist_type", "in", "[", "'expdecay'", ",", "'oneoverj'", ",", "'geometric'", "]", ",", "\"dist_type must be among expdecay, oneoverj, geometric, but got {}\"", ".", "format", "(", "dist_type", ")", "\n", "\n", "min", "=", "dist_of_iter_kwargs", ".", "get", "(", "\"rr_iter_min\"", ",", "1", ")", "\n", "max", "=", "dist_of_iter_kwargs", "[", "'rr_iter_max'", "]", "\n", "default_device", "=", "torch", ".", "device", "(", "\"cuda:0\"", ")", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "device", "=", "dist_of_iter_kwargs", ".", "get", "(", "\"device\"", ",", "default_device", ")", "\n", "dtype", "=", "dist_of_iter_kwargs", ".", "get", "(", "\"dtype\"", ",", "torch", ".", "float", ")", "\n", "if", "dist_type", "==", "'expdecay'", ":", "\n", "        ", "temp", "=", "dist_of_iter_kwargs", "[", "'temp'", "]", "\n", "dist_of_iter", "=", "ExpDecayDist", "(", "temp", "=", "temp", ",", "min", "=", "min", ",", "max", "=", "max", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "", "elif", "dist_type", "==", "'oneoverj'", ":", "\n", "        ", "do_sqrt", "=", "dist_of_iter_kwargs", ".", "get", "(", "\"do_sqrt\"", ",", "False", ")", "\n", "dist_of_iter", "=", "OneOverJ", "(", "min", "=", "min", ",", "max", "=", "max", ",", "do_sqrt", "=", "do_sqrt", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "", "else", ":", "\n", "        ", "p", "=", "dist_of_iter_kwargs", ".", "get", "(", "\"p\"", ",", "0.5", ")", "\n", "dist_of_iter", "=", "Geometric", "(", "p", "=", "p", ",", "min", "=", "min", ",", "max", "=", "max", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "", "return", "dist_of_iter", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg_experiments.experiment_fns_for_rrcg.print_initial_hypers": [[218, 230], ["model.likelihood.noise_covar.noise.item", "model.covar_module.outputscale.item", "model.covar_module.base_kernel.lengthscale.item", "print", "print"], "function", ["None"], ["", "def", "print_initial_hypers", "(", "model", ",", "print_ls", "=", "True", ")", ":", "\n", "    ", "noise_scale", "=", "model", ".", "likelihood", ".", "noise_covar", ".", "noise", ".", "item", "(", ")", "\n", "output_scale", "=", "model", ".", "covar_module", ".", "outputscale", ".", "item", "(", ")", "\n", "\n", "if", "print_ls", ":", "\n", "        ", "ls", "=", "model", ".", "covar_module", ".", "base_kernel", ".", "lengthscale", ".", "item", "(", ")", "\n", "print", "(", "f'Pre training: noise scale {noise_scale: 4.4f} | '", "+", "\n", "f'lengthscale {ls:4.4f} | '", "+", "\n", "f'output scale {output_scale:4.4f}'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "f'Pre training: noise scale {noise_scale: 4.4f} | '", "+", "\n", "f'output scale {output_scale:4.4f}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg_experiments.experiment_fns_for_rrcg.set_hypers": [[232, 239], ["model.initialize"], "function", ["None"], ["", "", "def", "set_hypers", "(", "model", ",", "noise_scale", ",", "ls", ",", "output_scale", ")", ":", "\n", "    ", "hypers", "=", "{", "\n", "'likelihood.noise_covar.noise'", ":", "noise_scale", ",", "\n", "'covar_module.base_kernel.lengthscale'", ":", "ls", ",", "\n", "'covar_module.outputscale'", ":", "output_scale", ",", "\n", "}", "\n", "model", ".", "initialize", "(", "**", "hypers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg_experiments.experiment_fns_for_rrcg.get_hypers": [[241, 254], ["model.likelihood.noise_covar.noise.cpu().item", "model.covar_module.outputscale.cpu().item", "model.covar_module.base_kernel.lengthscale.detach().cpu().numpy", "range", "model.covar_module.base_kernel.lengthscale.detach().cpu().numpy.item", "model.likelihood.noise_covar.noise.cpu", "model.covar_module.outputscale.cpu", "model.covar_module.base_kernel.lengthscale.detach().cpu", "str", "model.covar_module.base_kernel.lengthscale.detach"], "function", ["None"], ["", "def", "get_hypers", "(", "model", ")", ":", "\n", "    ", "hypers", "=", "{", "}", "\n", "hypers", "[", "\"noise_scale\"", "]", "=", "model", ".", "likelihood", ".", "noise_covar", ".", "noise", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "hypers", "[", "\"output_scale\"", "]", "=", "model", ".", "covar_module", ".", "outputscale", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "ls", "=", "model", ".", "covar_module", ".", "base_kernel", ".", "lengthscale", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "is_using_ard", "=", "ls", ".", "shape", "[", "1", "]", ">", "1", "\n", "if", "is_using_ard", ":", "\n", "        ", "for", "i", "in", "range", "(", "ls", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "key", "=", "'ls_'", "+", "str", "(", "i", ")", "\n", "hypers", "[", "key", "]", "=", "ls", "[", "0", ",", "i", "]", "\n", "", "", "else", ":", "\n", "        ", "hypers", "[", "\"ls\"", "]", "=", "ls", ".", "item", "(", ")", "\n", "", "return", "hypers", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg_experiments.experiment_fns_for_rrcg.get_string_time_taken": [[256, 260], ["round"], "function", ["None"], ["", "def", "get_string_time_taken", "(", "tic", ",", "toc", ",", "experiment_name", "=", "\"Experiment\"", ")", ":", "\n", "    ", "minutes", "=", "round", "(", "(", "toc", "-", "tic", ")", "/", "60", ")", "\n", "seconds", "=", "(", "toc", "-", "tic", ")", "-", "minutes", "*", "60", "\n", "return", "f'{experiment_name} took: {minutes:4d} min and {seconds:4.2f} sec'", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg_experiments.experiment_fns_for_rrcg.save_results": [[262, 265], ["open", "pickle.dump"], "function", ["None"], ["", "def", "save_results", "(", "results", ",", "output_file", ")", ":", "\n", "    ", "with", "open", "(", "file", "=", "output_file", ",", "mode", "=", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "obj", "=", "results", ",", "file", "=", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg_experiments.run_rrcg_evaluation.run": [[41, 175], ["torch.manual_seed", "numpy.random.seed", "experiments.load_data.load_uci_data", "print", "print", "torch.cuda.is_available", "experiments.experiment_fns.print_initial_hypers", "time.time", "rrcg_experiments.experiment_fns_for_rrcg.start_all_logging_instruments", "rrcg_experiments.experiment_fns_for_rrcg.start_all_logging_instruments.info", "torch.load", "experiments.experiment_fns.GPRegressionModel.load_state_dict", "experiments.experiment_fns.GPRegressionModel.eval", "rrcg.gp_utils.GaussianLikelihood.eval", "time.time", "run_rrcg_evaluation.get_prediction_stats", "time.time", "rrcg_experiments.experiment_fns_for_rrcg.start_all_logging_instruments.info", "rrcg_experiments.experiment_fns_for_rrcg.start_all_logging_instruments.info", "time.time", "run_rrcg_evaluation.get_prediction_stats", "rrcg_experiments.experiment_fns_for_rrcg.start_all_logging_instruments.info", "time.time", "rrcg_experiments.experiment_fns_for_rrcg.start_all_logging_instruments.info", "open", "f.read().split", "len", "len", "len", "gpytorch.likelihoods.GaussianLikelihood", "experiments.experiment_fns.GPRegressionModel", "gpytorch.mlls.ExactMarginalLogLikelihood", "rrcg.gp_utils.GaussianLikelihood", "experiments.experiment_fns.GPRegressionModel", "rrcg.gp_utils.MLL", "experiments.experiment_fns.GPRegressionModel.cuda", "os.path.exists", "print", "os.makedirs", "model_name.split", "os.path.join", "experiments.experiment_fns.get_string_time_taken", "experiments.experiment_fns.get_string_time_taken", "os.path.join", "torch.cuda.is_available", "valid_rmse.cpu().numpy", "torch.mean().cpu().numpy", "test_rmse.cpu().numpy", "torch.mean().cpu().numpy", "f.read", "line.split", "model_name.replace", "line.split", "int", "valid_rmse.cpu", "torch.mean().cpu", "test_rmse.cpu", "torch.mean().cpu", "line.split", "line.split", "torch.mean", "torch.mean", "line.split", "line.split", "line.split", "line.split", "line.split", "line.split"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.load_data.load_uci_data", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.print_initial_hypers", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.start_all_logging_instruments", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.baselines.run_svgp.get_prediction_stats", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.baselines.run_svgp.get_prediction_stats", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.get_string_time_taken", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.get_string_time_taken", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.dist_of_iterations_for_rrcg.RRDist.mean", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.dist_of_iterations_for_rrcg.RRDist.mean"], ["def", "run", "(", "dataset", ",", "model_name", ",", "keops", "=", "True", ",", "total_n", "=", "-", "1", ")", ":", "\n", "    ", "log_path", "=", "f'./logs/{dataset}'", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "log_path", ",", "model_name", ".", "replace", "(", "\"model\"", ",", "\"loss\"", ")", "+", "\".log\"", ")", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "read", "(", ")", ".", "split", "(", "\"\\n\"", ")", "\n", "\n", "", "method", "=", "None", "\n", "kernel_type", "=", "None", "\n", "seed", "=", "None", "\n", "num_cg", "=", "None", "\n", "total_niters", "=", "None", "\n", "lr", "=", "None", "\n", "temp", "=", "None", "\n", "rr_iter_min", "=", "None", "\n", "dist_of_iter_mean", "=", "None", "\n", "dist_of_iter_var", "=", "None", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "if", "\"Hyper: method\"", "in", "line", ":", "\n", "            ", "method", "=", "line", ".", "split", "(", "\"Hyper: method: \"", ")", "[", "1", "]", "\n", "", "elif", "\"Hyper: kernel_type\"", "in", "line", ":", "\n", "            ", "kernel_type", "=", "line", ".", "split", "(", "\"Hyper: kernel_type: \"", ")", "[", "1", "]", "\n", "", "elif", "\"Hyper: seed\"", "in", "line", ":", "\n", "            ", "seed", "=", "int", "(", "line", ".", "split", "(", "\"Hyper: seed: \"", ")", "[", "1", "]", ")", "\n", "", "elif", "\"Hyper: num_cg\"", "in", "line", ":", "\n", "            ", "num_cg", "=", "line", ".", "split", "(", "\"Hyper: num_cg: \"", ")", "[", "1", "]", "\n", "", "elif", "\"Hyper: total_niters\"", "in", "line", ":", "\n", "            ", "total_niters", "=", "line", ".", "split", "(", "\"Hyper: total_niters: \"", ")", "[", "1", "]", "\n", "", "elif", "\"Hyper: lr\"", "in", "line", ":", "\n", "            ", "lr", "=", "line", ".", "split", "(", "\"Hyper: lr: \"", ")", "[", "1", "]", "\n", "", "elif", "\"Hyper: temp\"", "in", "line", ":", "\n", "            ", "temp", "=", "line", ".", "split", "(", "\"Hyper: temp: \"", ")", "[", "1", "]", "\n", "", "elif", "\"Hyper: rr_iter_min\"", "in", "line", ":", "\n", "            ", "rr_iter_min", "=", "line", ".", "split", "(", "\"Hyper: rr_iter_min: \"", ")", "[", "1", "]", "\n", "", "elif", "\"Hyper: dist_of_iter_mean\"", "in", "line", ":", "\n", "            ", "dist_of_iter_mean", "=", "line", ".", "split", "(", "\"Hyper: dist_of_iter_mean: \"", ")", "[", "1", "]", "\n", "", "elif", "\"Hyper: dist_of_iter_var\"", "in", "line", ":", "\n", "            ", "dist_of_iter_var", "=", "line", ".", "split", "(", "\"Hyper: dist_of_iter_var: \"", ")", "[", "1", "]", "\n", "\n", "", "", "assert", "method", "in", "[", "'cholesky'", ",", "'rrcg'", ",", "'cg'", ",", "'gpt-cholesky'", ",", "'gpt-cg'", "]", ",", "method", "\n", "assert", "kernel_type", "in", "[", "'rbf'", ",", "'matern05'", ",", "'matern15'", ",", "'mater25'", ",", "'rbf-ard'", "]", ",", "kernel_type", "\n", "assert", "seed", "is", "not", "None", "\n", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "###############", "\n", "##### Data ####", "\n", "###############", "\n", "train_x", ",", "train_y", ",", "test_x", ",", "test_y", ",", "valid_x", ",", "valid_y", "=", "load_uci_data", "(", "data_dir", "=", "None", ",", "dataset", "=", "dataset", ",", "total_n", "=", "total_n", ",", "\n", "cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "verbose", "=", "True", ")", "\n", "print", "(", "\"Dataset stats:\"", ")", "\n", "train_n", ",", "valid_n", ",", "test_n", "=", "len", "(", "train_x", ")", ",", "len", "(", "valid_x", ")", ",", "len", "(", "test_x", ")", "\n", "print", "(", "\"train_n = {}, val_n = {}, test_n = {}\"", ".", "format", "(", "train_n", ",", "valid_n", ",", "test_n", ")", ")", "\n", "\n", "###############", "\n", "#### Model ####", "\n", "###############", "\n", "if", "method", "==", "'gpt-cholesky'", "or", "method", "==", "'gpt-cg'", ":", "\n", "        ", "likelihood", "=", "gpytorch", ".", "likelihoods", ".", "GaussianLikelihood", "(", ")", "\n", "model", "=", "GptGPRegressionModel", "(", "\n", "train_x", ",", "train_y", ",", "likelihood", ",", "kernel_type", "=", "kernel_type", ",", "use_keops", "=", "keops", ")", "#torch.cuda.is_available())", "\n", "mll", "=", "gpytorch", ".", "mlls", ".", "ExactMarginalLogLikelihood", "(", "likelihood", ",", "model", ")", "\n", "", "else", ":", "\n", "        ", "likelihood", "=", "GaussianLikelihood", "(", ")", "\n", "model", "=", "GPRegressionModel", "(", "\n", "train_x", ",", "train_y", ",", "likelihood", ",", "kernel_type", "=", "kernel_type", ",", "use_keops", "=", "keops", ")", "#torch.cuda.is_available())", "\n", "mll", "=", "MLL", "(", "likelihood", ",", "model", ")", "\n", "\n", "", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "", "get_ls", "=", "False", "if", "kernel_type", "==", "'rbf-ard'", "else", "True", "\n", "print_initial_hypers", "(", "model", ",", "print_ls", "=", "get_ls", ")", "\n", "\n", "####################", "\n", "##### Training #####", "\n", "####################", "\n", "train_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "experiment_params", "=", "{", "\n", "# dataset params:", "\n", "'dataset'", ":", "dataset", ",", "\n", "'train_n'", ":", "train_n", ",", "\n", "'valid_n'", ":", "valid_n", ",", "\n", "'test_n'", ":", "test_n", ",", "\n", "\n", "# model params", "\n", "'method'", ":", "method", ",", "\n", "'kernel_type'", ":", "kernel_type", ",", "\n", "'keops'", ":", "keops", ",", "\n", "\n", "# training params", "\n", "'seed'", ":", "seed", ",", "\n", "\n", "# other args", "\n", "'num_cg'", ":", "num_cg", ",", "\n", "'total_niters'", ":", "total_niters", ",", "\n", "'lr'", ":", "lr", ",", "\n", "'temp'", ":", "temp", ",", "\n", "'rr_iter_min'", ":", "rr_iter_min", ",", "\n", "'dist_of_iter_mean'", ":", "dist_of_iter_mean", ",", "\n", "'dist_of_iter_var'", ":", "dist_of_iter_var", ",", "\n", "}", "\n", "\n", "log_path", "=", "f'./logs/{dataset}'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "log_path", ")", ":", "\n", "        ", "print", "(", "f\"Creating log_path: {log_path}\"", ")", "\n", "os", ".", "makedirs", "(", "log_path", ")", "\n", "", "time_stamp", "=", "model_name", ".", "split", "(", "\"model_\"", ")", "[", "1", "]", "\n", "logger", "=", "start_all_logging_instruments", "(", "experiment_params", ",", "results_path", "=", "log_path", "+", "f'/{method}_eval_'", ",", "time_stamp", "=", "time_stamp", ")", "\n", "logger", ".", "info", "(", "\"Evaluating\"", ")", "\n", "\n", "model_path", "=", "f'./models/{dataset}'", "\n", "state_dict", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "model_path", ",", "model_name", ")", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n", "##############", "\n", "# Prediction #", "\n", "##############", "\n", "model", ".", "eval", "(", ")", "\n", "likelihood", ".", "eval", "(", ")", "\n", "\n", "# Make predictions by feeding model through likelihood", "\n", "eval_valid_start", "=", "time", ".", "time", "(", ")", "\n", "valid_rmse", ",", "valid_nll", "=", "get_prediction_stats", "(", "model", ",", "valid_x", ",", "valid_y", ")", "\n", "eval_valid_end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\n", "\"Valid rmse = {:.4f}, nll = {:.4f}\"", ".", "format", "(", "valid_rmse", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "torch", ".", "mean", "(", "valid_nll", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "logger", ".", "info", "(", "get_string_time_taken", "(", "eval_valid_start", ",", "eval_valid_end", ")", ")", "\n", "\n", "eval_test_start", "=", "time", ".", "time", "(", ")", "\n", "test_rmse", ",", "test_nll", "=", "get_prediction_stats", "(", "model", ",", "test_x", ",", "test_y", ")", "\n", "logger", ".", "info", "(", "\n", "\"Test rmse = {:.4f}, nll = {:.4f}\"", ".", "format", "(", "test_rmse", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "torch", ".", "mean", "(", "test_nll", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "eval_test_end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "get_string_time_taken", "(", "eval_test_start", ",", "eval_test_end", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg_experiments.run_rrcg_evaluation.get_prediction_stats": [[177, 189], ["torch.no_grad", "gpytorch.settings.fast_pred_var", "model.likelihood", "torch.sqrt", "isinstance", "model", "torch.mean", "torch.pow", "model.likelihood.log_marginal_from_marginal", "model.likelihood.log_marginal", "model"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.dist_of_iterations_for_rrcg.RRDist.mean", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.GaussianLikelihood.log_marginal_from_marginal", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.GaussianLikelihood.log_marginal"], ["", "def", "get_prediction_stats", "(", "model", ",", "x", ",", "y", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "with", "gpytorch", ".", "settings", ".", "fast_pred_var", "(", ")", ":", "\n", "            ", "observed_pred", "=", "model", ".", "likelihood", "(", "model", "(", "x", ")", ")", "\n", "rmse", "=", "torch", ".", "sqrt", "(", "torch", ".", "mean", "(", "torch", ".", "pow", "(", "observed_pred", ".", "mean", "-", "y", ",", "2", ")", ")", ")", "# a scalar", "\n", "\n", "if", "isinstance", "(", "model", ",", "GPRegressionModel", ")", ":", "\n", "                ", "nll", "=", "-", "model", ".", "likelihood", ".", "log_marginal_from_marginal", "(", "marginal", "=", "observed_pred", ",", "observations", "=", "y", ")", "# (bsz_x, )", "\n", "", "else", ":", "\n", "                ", "nll", "=", "-", "model", ".", "likelihood", ".", "log_marginal", "(", "observations", "=", "y", ",", "function_dist", "=", "model", "(", "x", ")", ")", "\n", "\n", "", "", "", "return", "rmse", ",", "nll", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg_experiments.loss_landscape_for_rrcg.mll_sweep": [[20, 123], ["torch.manual_seed", "numpy.random.seed", "print", "print", "experiments.load_data.load_uci_data", "rrcg.gp_utils.GaussianLikelihood", "rrcg.gp_utils.GPRegressionModel", "rrcg.gp_utils.MLL", "torch.cuda.is_available", "os.path.join", "os.path.exists", "torch.linspace().tolist", "torch.linspace().tolist", "print", "print", "tqdm.tqdm", "enumerate", "train_x.cuda.cuda", "train_y.cuda.cuda", "model.cuda.cuda", "rrcg.dist_of_iterations_for_rrcg.ExpDecayDist", "print", "print", "numpy.max", "numpy.max", "itertools.product", "model.cuda.train", "experiments.experiment_fns.set_hypers", "tqdm.tqdm.set_postfix", "pd.read_csv().values.tolist.append", "print", "pandas.read_csv().values.tolist", "print", "torch.linspace", "torch.linspace", "pandas.DataFrame", "pd.DataFrame.to_csv", "numpy.sqrt", "gpytorch.settings.max_cholesky_size", "rrcg.gp_utils.MLL.item", "gpytorch.settings.max_cholesky_size", "model.cuda.covar_module.outputscale.item", "model.cuda.covar_module.base_kernel.lengthscale.item", "model.cuda.likelihood.noise.item", "len", "pandas.read_csv", "rrcg.gp_utils.MLL.", "gpytorch.settings.max_cg_iterations", "rrcg.rr_settings.use_rr_cg", "model.cuda.", "gpytorch.settings.max_lanczos_quadrature_iterations", "rrcg.gp_utils.MLL.item", "rrcg.rr_settings.rr_cg_nsamples", "rrcg.gp_utils.MLL.item", "rrcg.gp_utils.MLL.", "rrcg.gp_utils.MLL.", "model.cuda.", "model.cuda."], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.load_data.load_uci_data", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.train", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.set_hypers"], ["def", "mll_sweep", "(", "\n", "data_dir", ",", "save_dir", ",", "method", "=", "'rrcg'", ",", "\n", "lengthscale_min", "=", "0.01", ",", "lengthscale_max", "=", "1.", ",", "noise_min", "=", "0.01", ",", "noise_max", "=", "1.", ",", "grid_size", "=", "25", ",", "\n", "outputscale", "=", "1.", ",", "overwrite_result", "=", "False", ",", "seed", "=", "10", ",", "num_cg", "=", "None", ",", "rr_temp", "=", "0.05", ",", "rr_min", "=", "20", ",", "rr_max", "=", "500", ",", "\n", "rr_nsamples", "=", "2", ",", "nx", "=", "-", "1", ",", "\n", ")", ":", "\n", "    ", "assert", "method", "in", "[", "'rrcg'", ",", "'cg'", ",", "'cholesky'", "]", ",", "\"method muse be chosen among rrcg, cg, cholesky, but got {}\"", ".", "format", "(", "method", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "print", "(", "\"data_dir = \"", ",", "data_dir", ")", "\n", "print", "(", "\"save_dir = \"", ",", "save_dir", ")", "\n", "train_x", ",", "train_y", ",", "*", "_", "=", "load_uci_data", "(", "data_dir", ",", "\"pol\"", ")", "\n", "\n", "\n", "if", "nx", "==", "-", "1", ":", "\n", "        ", "nx", "=", "train_x", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "assert", "nx", ">", "0", "and", "nx", "<=", "train_x", ".", "shape", "[", "0", "]", ",", "nx", "\n", "train_x", "=", "train_x", "[", ":", "nx", "]", "\n", "train_y", "=", "train_y", "[", ":", "nx", "]", "\n", "\n", "", "if", "rr_max", ">", "nx", ":", "\n", "        ", "rr_max", "=", "nx", "\n", "", "if", "rr_min", ">", "nx", ":", "\n", "        ", "rr_min", "=", "nx", "\n", "\n", "", "likelihood", "=", "GaussianLikelihood", "(", ")", "\n", "model", "=", "GPRegressionModel", "(", "train_x", ",", "train_y", ",", "likelihood", ")", "\n", "\n", "#mll = gpytorch.mlls.ExactMarginalLogLikelihood(likelihood, model)", "\n", "mll", "=", "MLL", "(", "likelihood", ",", "model", ")", "\n", "\n", "# Maybe cuda", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "train_x", "=", "train_x", ".", "cuda", "(", ")", "\n", "train_y", "=", "train_y", ".", "cuda", "(", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "# Contains likelihood", "\n", "\n", "", "dist_of_iter", "=", "None", "\n", "if", "method", "==", "'rrcg'", ":", "\n", "# currently, fixing dist_of_iter", "\n", "        ", "dist_of_iter", "=", "ExpDecayDist", "(", "temp", "=", "rr_temp", ",", "min", "=", "rr_min", ",", "max", "=", "rr_max", ",", "dtype", "=", "torch", ".", "float", ",", "\n", "device", "=", "train_x", ".", "device", ")", "\n", "print", "(", "\"\\ndist of iter mean = {}\"", ".", "format", "(", "dist_of_iter", ".", "mean", ")", ")", "\n", "print", "(", "\"dist of iter std = {}\\n\"", ".", "format", "(", "np", ".", "sqrt", "(", "dist_of_iter", ".", "var", ")", ")", ")", "\n", "\n", "# Maybe get existing hyper_trace?", "\n", "", "results_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"{}_loss_landscape.csv\"", ".", "format", "(", "method", ")", ")", "\n", "#results_path = os.path.join(save_dir, \"rrcg_5samples.csv\")", "\n", "if", "os", ".", "path", ".", "exists", "(", "results_path", ")", ":", "\n", "        ", "if", "not", "overwrite_result", ":", "\n", "            ", "print", "(", "\"Loading previous hyper_trace...\"", ")", "\n", "results", "=", "pd", ".", "read_csv", "(", "results_path", ")", ".", "values", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Overwrite previous hyper_trace...\"", ")", "\n", "results", "=", "[", "]", "\n", "", "", "else", ":", "\n", "        ", "results", "=", "[", "]", "\n", "\n", "# Values to cycle through", "\n", "", "lengthscales", "=", "torch", ".", "linspace", "(", "lengthscale_min", ",", "lengthscale_max", ",", "grid_size", ")", ".", "tolist", "(", ")", "\n", "noises", "=", "torch", ".", "linspace", "(", "noise_min", ",", "noise_max", ",", "grid_size", ")", ".", "tolist", "(", ")", "\n", "\n", "print", "(", "\"ls max \"", ",", "np", ".", "max", "(", "lengthscales", ")", ")", "\n", "print", "(", "\"noises max \"", ",", "np", ".", "max", "(", "noises", ")", ")", "\n", "\n", "iterator", "=", "tqdm", ".", "tqdm", "(", "product", "(", "lengthscales", ",", "noises", ")", ",", "desc", "=", "\"Hyperparam configs\"", ",", "total", "=", "(", "grid_size", "**", "2", ")", ")", "\n", "\n", "\n", "# Loop", "\n", "for", "idx", ",", "(", "lengthscale", ",", "noise", ")", "in", "enumerate", "(", "iterator", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "set_hypers", "(", "model", ",", "noise", ",", "lengthscale", ",", "outputscale", ")", "\n", "if", "method", "==", "'cholesky'", ":", "\n", "            ", "with", "gpytorch", ".", "settings", ".", "max_cholesky_size", "(", "10000000", ")", ":", "\n", "                ", "mll_value", "=", "mll", "(", "model", "(", "train_x", ")", ",", "train_y", ",", "dist_of_iter", "=", "dist_of_iter", ")", ".", "item", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "with", "gpytorch", ".", "settings", ".", "max_cholesky_size", "(", "0", ")", ":", "\n", "                ", "if", "method", "==", "'cg'", ":", "\n", "                    ", "with", "gpytorch", ".", "settings", ".", "max_cg_iterations", "(", "num_cg", ")", ":", "\n", "                        ", "with", "gpytorch", ".", "settings", ".", "max_lanczos_quadrature_iterations", "(", "num_cg", ")", ":", "\n", "                            ", "mll_value", "=", "mll", "(", "model", "(", "train_x", ")", ",", "train_y", ",", "dist_of_iter", "=", "dist_of_iter", ")", ".", "item", "(", ")", "\n", "", "", "", "else", ":", "\n", "# rrcg", "\n", "                    ", "with", "rr_settings", ".", "use_rr_cg", "(", ")", ":", "\n", "                        ", "with", "rr_settings", ".", "rr_cg_nsamples", "(", "rr_nsamples", ")", ":", "\n", "                            ", "mll_value", "=", "mll", "(", "model", "(", "train_x", ")", ",", "train_y", ",", "dist_of_iter", "=", "dist_of_iter", ")", ".", "item", "(", ")", "\n", "\n", "", "", "", "", "", "iterator", ".", "set_postfix", "(", "\n", "mll", "=", "mll_value", ",", "\n", "os", "=", "model", ".", "covar_module", ".", "outputscale", ".", "item", "(", ")", ",", "\n", "ls", "=", "model", ".", "covar_module", ".", "base_kernel", ".", "lengthscale", ".", "item", "(", ")", ",", "\n", "noise", "=", "model", ".", "likelihood", ".", "noise", ".", "item", "(", ")", ",", "\n", ")", "\n", "\n", "# Log hyper_trace", "\n", "results", ".", "append", "(", "(", "lengthscale", ",", "noise", ",", "outputscale", ",", "mll_value", ")", ")", "\n", "if", "not", "(", "idx", "+", "1", ")", "%", "25", "or", "(", "idx", "==", "len", "(", "iterator", ")", "-", "1", ")", ":", "\n", "            ", "df", "=", "pd", ".", "DataFrame", "(", "results", ",", "columns", "=", "[", "\"lengthscale\"", ",", "\"noise\"", ",", "\"outputscale\"", ",", "\"mll\"", "]", ")", "\n", "df", ".", "to_csv", "(", "results_path", ",", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg_experiments.run_multiple_rr_iters.get_hyper_traces_and_params": [[24, 35], ["print", "dict", "print", "print", "open", "pickle.load", "os.path.join", "item.split", "stripped_file_name.split"], "function", ["None"], ["def", "get_hyper_traces_and_params", "(", "dataset", ",", "file_name", ",", "base_dir", "=", "\"./hyper_trace\"", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "base_dir", ",", "dataset", ",", "file_name", ")", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "hyper_traces", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "stripped_file_name", "=", "file_name", "[", ":", "-", "4", "]", "# remove pickle", "\n", "print", "(", "\"stripeed file name = \"", ",", "stripped_file_name", ")", "\n", "exp_hyper_params", "=", "dict", "(", "item", ".", "split", "(", "\"=\"", ")", "for", "item", "in", "stripped_file_name", ".", "split", "(", "\"_\"", ")", ")", "\n", "exp_hyper_params", "[", "'dataset'", "]", "=", "dataset", "\n", "print", "(", "\"exp_hyper_params = \"", ")", "\n", "print", "(", "exp_hyper_params", ")", "\n", "return", "hyper_traces", ",", "exp_hyper_params", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg_experiments.run_multiple_rr_iters.get_exact_loss_from_hyper_traces": [[37, 99], ["int", "int", "torch.manual_seed", "numpy.random.seed", "torch.cuda.is_available", "experiments.load_data.load_uci_data", "rrcg.gp_utils.GaussianLikelihood", "rrcg.gp_utils.GPRegressionModel", "rrcg.gp_utils.MLL", "len", "numpy.zeros", "rrcg.gp_utils.GPRegressionModel.train", "hyper_traces.get", "rrcg.gp_utils.GPRegressionModel.cuda", "torch.no_grad", "open", "dict", "pickle.dump", "gpytorch.settings.max_cholesky_size", "enumerate", "gpytorch.settings.max_cg_iterations", "zip", "rrcg_experiments.experiment_fns_for_rrcg.set_hypers", "rrcg.gp_utils.GPRegressionModel.", "loss.item", "gpytorch.settings.max_lanczos_quadrature_iterations", "rrcg.gp_utils.MLL.", "gpytorch.settings.cg_tolerance", "enumerate", "zip", "rrcg_experiments.experiment_fns_for_rrcg.set_hypers", "rrcg.gp_utils.GPRegressionModel.", "loss.item", "rrcg.gp_utils.MLL."], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.load_data.load_uci_data", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.train", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.set_hypers", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.set_hypers"], ["", "def", "get_exact_loss_from_hyper_traces", "(", "hyper_traces", ",", "exp_hyper_params", ",", "save_path", ",", "keops", "=", "True", ",", "return_opt_loss", "=", "False", ",", "return_exact_loss", "=", "False", ",", "\n", "eval_method", "=", "'cholesky'", ")", ":", "\n", "# use cholesky method to plot", "\n", "\n", "    ", "seed", "=", "int", "(", "exp_hyper_params", "[", "'seed'", "]", ")", "\n", "kernel_type", "=", "exp_hyper_params", "[", "'kernel'", "]", "\n", "dataset", "=", "exp_hyper_params", "[", "'dataset'", "]", "\n", "total_n", "=", "int", "(", "exp_hyper_params", "[", "'ndata'", "]", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "use_cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "# load data by seed", "\n", "train_x", ",", "train_y", ",", "test_x", ",", "test_y", ",", "valid_x", ",", "valid_y", "=", "load_uci_data", "(", "data_dir", "=", "None", ",", "dataset", "=", "dataset", ",", "total_n", "=", "total_n", ",", "\n", "cuda", "=", "use_cuda", ",", "verbose", "=", "True", ")", "\n", "\n", "ls_trace", ",", "os_trace", ",", "noise_trace", "=", "hyper_traces", "[", "'ls'", "]", ",", "hyper_traces", "[", "'os'", "]", ",", "hyper_traces", "[", "'noise'", "]", "\n", "\n", "likelihood", "=", "GaussianLikelihood", "(", ")", "\n", "model", "=", "GPRegressionModel", "(", "\n", "train_x", ",", "train_y", ",", "likelihood", ",", "kernel_type", "=", "kernel_type", ",", "use_keops", "=", "keops", ")", "# torch.cuda.is_available())", "\n", "mll", "=", "MLL", "(", "likelihood", ",", "model", ")", "\n", "if", "use_cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "\n", "", "n_iters", "=", "len", "(", "ls_trace", ")", "\n", "exact_loss_trace", "=", "np", ".", "zeros", "(", "n_iters", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# decide using cholesky or CG", "\n", "        ", "if", "eval_method", "==", "'cholesky'", ":", "\n", "            ", "with", "gpytorch", ".", "settings", ".", "max_cholesky_size", "(", "1e10", ")", ":", "\n", "                ", "for", "i", ",", "(", "ls", ",", "output_scale", ",", "noise", ")", "in", "enumerate", "(", "zip", "(", "ls_trace", ",", "os_trace", ",", "noise_trace", ")", ")", ":", "\n", "\n", "                    ", "set_hypers", "(", "model", ",", "noise_scale", "=", "noise", ",", "ls", "=", "ls", ",", "output_scale", "=", "output_scale", ")", "\n", "y_hat", "=", "model", "(", "train_x", ")", "\n", "loss", "=", "-", "mll", "(", "y_hat", ",", "train_y", ")", "\n", "exact_loss_trace", "[", "i", "]", "=", "loss", ".", "item", "(", ")", "\n", "", "", "", "else", ":", "\n", "            ", "with", "gpytorch", ".", "settings", ".", "max_cg_iterations", "(", "200", ")", ":", "\n", "                ", "with", "gpytorch", ".", "settings", ".", "max_lanczos_quadrature_iterations", "(", "200", ")", ":", "\n", "                    ", "with", "gpytorch", ".", "settings", ".", "cg_tolerance", "(", "1e-6", ")", ":", "\n", "                        ", "for", "i", ",", "(", "ls", ",", "output_scale", ",", "noise", ")", "in", "enumerate", "(", "zip", "(", "ls_trace", ",", "os_trace", ",", "noise_trace", ")", ")", ":", "\n", "                            ", "set_hypers", "(", "model", ",", "noise_scale", "=", "noise", ",", "ls", "=", "ls", ",", "output_scale", "=", "output_scale", ")", "\n", "y_hat", "=", "model", "(", "train_x", ")", "\n", "loss", "=", "-", "mll", "(", "y_hat", ",", "train_y", ")", "\n", "exact_loss_trace", "[", "i", "]", "=", "loss", ".", "item", "(", ")", "\n", "\n", "", "", "", "", "", "", "opt_loss", "=", "hyper_traces", ".", "get", "(", "\"loss\"", ",", "None", ")", "\n", "\n", "with", "open", "(", "save_path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "        ", "dict_to_save", "=", "dict", "(", "exact_loss", "=", "exact_loss_trace", ",", "opt_loss", "=", "opt_loss", ")", "\n", "pickle", ".", "dump", "(", "dict_to_save", ",", "f", ")", "\n", "\n", "", "exact_loss", "=", "None", "\n", "if", "not", "return_opt_loss", ":", "\n", "        ", "opt_loss", "=", "None", "\n", "", "if", "return_exact_loss", ":", "\n", "        ", "exact_loss", "=", "exact_loss_trace", "\n", "", "return", "opt_loss", ",", "exact_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg_experiments.run_multiple_rr_iters.main": [[101, 126], ["print", "os.listdir", "print", "os.listdir", "os.path.join", "print", "run_multiple_rr_iters.get_hyper_traces_and_params", "os.path.join", "run_multiple_rr_iters.get_exact_loss_from_hyper_traces", "os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg_experiments.run_multiple_rr_iters.get_hyper_traces_and_params", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg_experiments.run_multiple_rr_iters.get_exact_loss_from_hyper_traces"], ["", "def", "main", "(", "hyper_trace_dir", ",", "keops", "=", "True", ")", ":", "\n", "    ", "all_datasets", "=", "[", "'3droad'", ",", "'bike'", ",", "'buzz'", ",", "'elevators'", ",", "'keggdirected'", ",", "'keggundirected'", ",", "'kin40k'", ",", "'pol'", ",", "'protein'", ",", "\n", "'slice'", ",", "'song'", "]", "\n", "cholesky_available_datasets", "=", "[", "'pol'", ",", "'elevators'", ",", "'bike'", "]", "\n", "\n", "print", "(", "\"\\nStart running run_multiple_rr_iters.py ...\\n\"", ")", "\n", "for", "dataset", "in", "os", ".", "listdir", "(", "hyper_trace_dir", ")", ":", "\n", "        ", "if", "dataset", "in", "all_datasets", ":", "\n", "            ", "print", "(", "f\"\\n############## Dataset {dataset} #############\"", ")", "\n", "for", "file_name", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "hyper_trace_dir", ",", "dataset", ")", ")", ":", "\n", "                ", "if", "'.pkl'", "in", "file_name", ":", "\n", "                    ", "print", "(", "f\"file_name = {file_name}\"", ")", "\n", "\n", "if", "dataset", "in", "cholesky_available_datasets", ":", "\n", "                        ", "eval_method", "=", "'cholesky'", "\n", "", "else", ":", "\n", "                        ", "eval_method", "=", "'cg'", "\n", "\n", "", "hyper_traces", ",", "exp_hyper_params", "=", "get_hyper_traces_and_params", "(", "dataset", "=", "dataset", ",", "file_name", "=", "file_name", ",", "base_dir", "=", "hyper_trace_dir", ")", "\n", "save_dir", "=", "f\"./exact_loss/{dataset}\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "                        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "file_name", ")", "\n", "_", ",", "_", "=", "get_exact_loss_from_hyper_traces", "(", "hyper_traces", ",", "exp_hyper_params", ",", "save_path", ",", "keops", "=", "keops", ",", "\n", "eval_method", "=", "eval_method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.load_data.load_uci_data": [[13, 71], ["os.path.join", "torch.tensor", "data.float.float", "torch.randperm", "y.mean", "y.std", "int", "int", "logging.info", "git.Repo", "os.path.join", "torch.Tensor.var", "int", "torch.Tensor.size", "logging.info", "sklearn.impute.SimpleImputer().fit_transform", "torch.Tensor", "print", "print", "torch.Tensor.size", "math.floor", "math.floor", "load_data.split_dataset_w_cuda", "load_data.split_dataset", "scipy.io.loadmat", "good_dimensions.sum", "torch.Tensor.size", "int", "torch.Tensor.data.numpy", "len", "len", "torch.Tensor.min", "good_dimensions.sum", "sklearn.impute.SimpleImputer", "torch.Tensor.size", "torch.Tensor.size", "test_x.size", "torch.Tensor.max"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.dist_of_iterations_for_rrcg.RRDist.mean", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.dist_of_iterations_for_rrcg.RRDist.std", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.dist_of_iterations_for_rrcg.RRDist.var", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.load_data.split_dataset_w_cuda", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.load_data.split_dataset"], ["def", "load_uci_data", "(", "data_dir", ",", "dataset", ",", "total_n", "=", "-", "1", ",", "train_p", "=", "0.64", ",", "val_p", "=", "0.16", ",", "test_p", "=", "0.20", ",", "cuda", "=", "False", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"By default, use 64/16/20 for train/val/test split\"\"\"", "\n", "\n", "assert", "(", "train_p", "+", "val_p", "+", "test_p", "==", "1", ")", "and", "(", "0", "<=", "train_p", "<=", "1", ")", "and", "(", "0", "<=", "test_p", "<=", "1", ")", ",", "\"train_p = {}, val_p = {}, test_p = {}\"", ".", "format", "(", "train_p", ",", "val_p", ",", "test_p", ")", "\n", "\n", "# file_path = os.path.join(data_dir, dataset, dataset + '.mat')", "\n", "if", "data_dir", "is", "None", ":", "\n", "        ", "repo", "=", "git", ".", "Repo", "(", "'.'", ",", "search_parent_directories", "=", "True", ")", "\n", "repo_dir", "=", "repo", ".", "working_tree_dir", "\n", "data_dir", "=", "os", ".", "path", ".", "join", "(", "repo_dir", ",", "'experiments/datasets'", ")", "\n", "\n", "", "file_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "dataset", "+", "'.mat'", ")", "\n", "data", "=", "torch", ".", "tensor", "(", "loadmat", "(", "file_path", ")", "[", "'data'", "]", ")", "\n", "data", "=", "data", ".", "float", "(", ")", "\n", "X", "=", "data", "[", ":", ",", ":", "-", "1", "]", "\n", "y", "=", "data", "[", ":", ",", "-", "1", "]", "\n", "\n", "good_dimensions", "=", "X", ".", "var", "(", "dim", "=", "-", "2", ")", ">", "1.0e-10", "\n", "if", "int", "(", "good_dimensions", ".", "sum", "(", ")", ")", "<", "X", ".", "size", "(", "1", ")", ":", "\n", "        ", "no_var_dim", "=", "X", ".", "size", "(", "1", ")", "-", "int", "(", "good_dimensions", ".", "sum", "(", ")", ")", "\n", "logging", ".", "info", "(", "f\"Removed {no_var_dim:d} dimensions with no variance\"", ")", "\n", "X", "=", "X", "[", ":", ",", "good_dimensions", "]", "\n", "\n", "", "if", "dataset", "in", "[", "'keggundirected'", ",", "'slice'", "]", ":", "\n", "        ", "X", "=", "SimpleImputer", "(", "missing_values", "=", "np", ".", "nan", ")", ".", "fit_transform", "(", "X", ".", "data", ".", "numpy", "(", ")", ")", "\n", "X", "=", "torch", ".", "Tensor", "(", "X", ")", "\n", "\n", "", "if", "verbose", ":", "\n", "        ", "print", "(", "\"Loading dataset {}...\"", ".", "format", "(", "dataset", ")", ")", "\n", "print", "(", "\"X shape = {}\\n\\n\"", ".", "format", "(", "X", ".", "shape", ")", ")", "\n", "\n", "# Shuffling, subsampling and normalizing", "\n", "", "shuffled_indices", "=", "torch", ".", "randperm", "(", "X", ".", "size", "(", "0", ")", ")", "\n", "X", "=", "X", "[", "shuffled_indices", ",", ":", "]", "\n", "y", "=", "y", "[", "shuffled_indices", "]", "\n", "\n", "if", "total_n", "!=", "-", "1", ":", "\n", "        ", "assert", "0", "<", "total_n", "<=", "len", "(", "X", ")", ",", "\"total_n should be in (0, {}), but got {}\"", ".", "format", "(", "len", "(", "X", ")", ",", "total_n", ")", "\n", "X", "=", "X", "[", ":", "total_n", "]", "\n", "y", "=", "y", "[", ":", "total_n", "]", "\n", "\n", "", "X", "=", "X", "-", "X", ".", "min", "(", "0", ")", "[", "0", "]", "\n", "X", "=", "2.0", "*", "(", "X", "/", "X", ".", "max", "(", "0", ")", "[", "0", "]", ")", "-", "1.0", "\n", "y", "-=", "y", ".", "mean", "(", ")", "\n", "y", "/=", "y", ".", "std", "(", ")", "\n", "\n", "train_n", "=", "int", "(", "floor", "(", "train_p", "*", "X", ".", "size", "(", "0", ")", ")", ")", "\n", "valid_n", "=", "int", "(", "floor", "(", "val_p", "*", "X", ".", "size", "(", "0", ")", ")", ")", "\n", "\n", "if", "cuda", ":", "\n", "        ", "split", "=", "split_dataset_w_cuda", "(", "X", ",", "y", ",", "train_n", ",", "valid_n", ")", "\n", "", "else", ":", "\n", "        ", "split", "=", "split_dataset", "(", "X", ",", "y", ",", "train_n", ",", "valid_n", ")", "\n", "", "train_x", ",", "train_y", ",", "valid_x", ",", "valid_y", ",", "test_x", ",", "test_y", "=", "split", "\n", "logging", ".", "info", "(", "f\"Loaded data with input dimension of {test_x.size(-1):d}\"", ")", "\n", "\n", "return", "train_x", ",", "train_y", ",", "test_x", ",", "test_y", ",", "valid_x", ",", "valid_y", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.load_data.load_uci_data_ap": [[73, 106], ["os.path.join", "torch.tensor", "data.float.float", "y.mean", "y.std", "int", "int", "logging.info", "torch.Tensor.var", "int", "torch.Tensor.size", "logging.info", "sklearn.impute.SimpleImputer().fit_transform", "torch.Tensor", "math.floor", "math.floor", "load_data.split_dataset_w_cuda", "load_data.split_dataset", "scipy.io.loadmat", "good_dimensions.sum", "torch.Tensor.size", "int", "torch.Tensor.data.numpy", "torch.Tensor.min", "good_dimensions.sum", "sklearn.impute.SimpleImputer", "torch.Tensor.size", "torch.Tensor.size", "test_x.size", "torch.Tensor.max"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.dist_of_iterations_for_rrcg.RRDist.mean", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.dist_of_iterations_for_rrcg.RRDist.std", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.dist_of_iterations_for_rrcg.RRDist.var", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.load_data.split_dataset_w_cuda", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.load_data.split_dataset"], ["", "def", "load_uci_data_ap", "(", "data_dir", ",", "dataset", ",", "use_cuda", "=", "False", ")", ":", "\n", "    ", "file_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "dataset", "+", "'.mat'", ")", "\n", "data", "=", "torch", ".", "tensor", "(", "loadmat", "(", "file_path", ")", "[", "'data'", "]", ")", "\n", "data", "=", "data", ".", "float", "(", ")", "\n", "X", "=", "data", "[", ":", ",", ":", "-", "1", "]", "\n", "y", "=", "data", "[", ":", ",", "-", "1", "]", "\n", "\n", "good_dimensions", "=", "X", ".", "var", "(", "dim", "=", "-", "2", ")", ">", "1.0e-10", "\n", "if", "int", "(", "good_dimensions", ".", "sum", "(", ")", ")", "<", "X", ".", "size", "(", "1", ")", ":", "\n", "        ", "no_var_dim", "=", "X", ".", "size", "(", "1", ")", "-", "int", "(", "good_dimensions", ".", "sum", "(", ")", ")", "\n", "logging", ".", "info", "(", "f\"Removed {no_var_dim:d} dimensions with no variance\"", ")", "\n", "X", "=", "X", "[", ":", ",", "good_dimensions", "]", "\n", "\n", "", "if", "dataset", "in", "[", "'keggundirected'", ",", "'slice'", "]", ":", "\n", "        ", "X", "=", "SimpleImputer", "(", "missing_values", "=", "np", ".", "nan", ")", ".", "fit_transform", "(", "X", ".", "data", ".", "numpy", "(", ")", ")", "\n", "X", "=", "torch", ".", "Tensor", "(", "X", ")", "\n", "\n", "", "X", "=", "X", "-", "X", ".", "min", "(", "0", ")", "[", "0", "]", "\n", "X", "=", "2.0", "*", "(", "X", "/", "X", ".", "max", "(", "0", ")", "[", "0", "]", ")", "-", "1.0", "\n", "y", "-=", "y", ".", "mean", "(", ")", "\n", "y", "/=", "y", ".", "std", "(", ")", "\n", "\n", "train_n", "=", "int", "(", "floor", "(", "0.75", "*", "X", ".", "size", "(", "0", ")", ")", ")", "\n", "valid_n", "=", "int", "(", "floor", "(", "0.10", "*", "X", ".", "size", "(", "0", ")", ")", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "        ", "split", "=", "split_dataset_w_cuda", "(", "X", ",", "y", ",", "train_n", ",", "valid_n", ")", "\n", "", "else", ":", "\n", "        ", "split", "=", "split_dataset", "(", "X", ",", "y", ",", "train_n", ",", "valid_n", ")", "\n", "", "train_x", ",", "train_y", ",", "valid_x", ",", "valid_y", ",", "test_x", ",", "test_y", "=", "split", "\n", "logging", ".", "info", "(", "f\"Loaded data with input dimension of {test_x.size(-1):d}\"", ")", "\n", "\n", "return", "train_x", ",", "train_y", ",", "test_x", ",", "test_y", ",", "valid_x", ",", "valid_y", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.load_data.get_train_data": [[108, 115], ["load_data.load_uci_data_ap"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.load_data.load_uci_data_ap"], ["", "def", "get_train_data", "(", "data_dir", ",", "dataset_name", ",", "run_sample", ",", "sample_size", ",", "use_cuda", ")", ":", "\n", "    ", "train_x", ",", "train_y", ",", "*", "_", "=", "load_uci_data_ap", "(", "data_dir", ",", "dataset_name", ",", "use_cuda", ")", "\n", "if", "run_sample", ":", "\n", "        ", "train_n", "=", "sample_size", "\n", "train_x", ",", "train_y", "=", "train_x", "[", ":", "train_n", ",", ":", "]", ",", "train_y", "[", ":", "train_n", "]", "\n", "", "train_ds", "=", "(", "train_x", ",", "train_y", ")", "\n", "return", "train_ds", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.load_data.get_train_test_data": [[117, 129], ["load_data.load_uci_data_ap", "int"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.load_data.load_uci_data_ap"], ["", "def", "get_train_test_data", "(", "data_dir", ",", "dataset", ",", "run_sample", "=", "True", ",", "use_cuda", "=", "False", ")", ":", "\n", "    ", "output", "=", "load_uci_data_ap", "(", "data_dir", ",", "dataset", ",", "use_cuda", ")", "\n", "train_x", ",", "train_y", ",", "test_x", ",", "test_y", ",", "valid_x", ",", "valid_y", "=", "output", "\n", "if", "run_sample", ":", "\n", "        ", "obs_n", "=", "int", "(", "1.e2", ")", "\n", "test_x", ",", "test_y", "=", "test_x", "[", ":", "obs_n", ",", ":", "]", ",", "test_y", "[", ":", "obs_n", "]", "\n", "train_x", ",", "train_y", "=", "train_x", "[", ":", "obs_n", ",", ":", "]", ",", "train_y", "[", ":", "obs_n", "]", "\n", "valid_x", ",", "valid_y", "=", "valid_x", "[", ":", "obs_n", ",", ":", "]", ",", "valid_y", "[", ":", "obs_n", "]", "\n", "", "test_ds", "=", "(", "test_x", ",", "test_y", ")", "\n", "valid_ds", "=", "(", "valid_x", ",", "valid_y", ")", "\n", "train_ds", "=", "(", "train_x", ",", "train_y", ")", "\n", "return", "train_ds", ",", "test_ds", ",", "valid_ds", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.load_data.split_dataset": [[131, 141], ["x[].contiguous", "y[].contiguous", "x[].contiguous", "y[].contiguous", "x[].contiguous", "y[].contiguous"], "function", ["None"], ["", "def", "split_dataset", "(", "x", ",", "y", ",", "train_n", ",", "valid_n", ")", ":", "\n", "    ", "train_x", "=", "x", "[", ":", "train_n", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "train_y", "=", "y", "[", ":", "train_n", "]", ".", "contiguous", "(", ")", "\n", "\n", "valid_x", "=", "x", "[", "train_n", ":", "train_n", "+", "valid_n", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "valid_y", "=", "y", "[", "train_n", ":", "train_n", "+", "valid_n", "]", ".", "contiguous", "(", ")", "\n", "\n", "test_x", "=", "x", "[", "train_n", "+", "valid_n", ":", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "test_y", "=", "y", "[", "train_n", "+", "valid_n", ":", "]", ".", "contiguous", "(", ")", "\n", "return", "train_x", ",", "train_y", ",", "valid_x", ",", "valid_y", ",", "test_x", ",", "test_y", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.load_data.split_dataset_w_cuda": [[143, 153], ["x[].contiguous().cuda", "y[].contiguous().cuda", "x[].contiguous().cuda", "y[].contiguous().cuda", "x[].contiguous().cuda", "y[].contiguous().cuda", "x[].contiguous", "y[].contiguous", "x[].contiguous", "y[].contiguous", "x[].contiguous", "y[].contiguous"], "function", ["None"], ["", "def", "split_dataset_w_cuda", "(", "x", ",", "y", ",", "train_n", ",", "valid_n", ")", ":", "\n", "    ", "train_x", "=", "x", "[", ":", "train_n", ",", ":", "]", ".", "contiguous", "(", ")", ".", "cuda", "(", ")", "\n", "train_y", "=", "y", "[", ":", "train_n", "]", ".", "contiguous", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "valid_x", "=", "x", "[", "train_n", ":", "train_n", "+", "valid_n", ",", ":", "]", ".", "contiguous", "(", ")", ".", "cuda", "(", ")", "\n", "valid_y", "=", "y", "[", "train_n", ":", "train_n", "+", "valid_n", "]", ".", "contiguous", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "test_x", "=", "x", "[", "train_n", "+", "valid_n", ":", ",", ":", "]", ".", "contiguous", "(", ")", ".", "cuda", "(", ")", "\n", "test_y", "=", "y", "[", "train_n", "+", "valid_n", ":", "]", ".", "contiguous", "(", ")", ".", "cuda", "(", ")", "\n", "return", "train_x", ",", "train_y", ",", "valid_x", ",", "valid_y", ",", "test_x", ",", "test_y", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.load_data.sample_from_prior": [[155, 159], ["likelihood.sample", "gpytorch.settings.prior_mode", "likelihood", "model"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.MultivariateNormal.sample"], ["", "def", "sample_from_prior", "(", "model", ",", "likelihood", ",", "train_x", ")", ":", "\n", "    ", "with", "gpt", ".", "settings", ".", "prior_mode", "(", "True", ")", ":", "\n", "        ", "prior_preds", "=", "likelihood", "(", "model", "(", "train_x", ")", ")", "\n", "", "return", "prior_preds", ".", "sample", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.create_loss_landscape.mll_sweep": [[11, 48], ["experiments.load_data.load_uci_data_ap", "int", "gpytorch.likelihoods.GaussianLikelihood", "experiments.experiment_fns.GPRegressionModel", "gpytorch.mlls.ExactMarginalLogLikelihood", "torch.cuda.is_available", "torch.linspace().tolist", "torch.linspace().tolist", "tqdm.tqdm", "os.path.join", "enumerate", "pandas.DataFrame", "pd.DataFrame.to_csv", "train_x.cuda.cuda", "train_y.cuda.cuda", "model.cuda.cuda", "itertools.product", "model.cuda.train", "experiments.experiment_fns.set_hypers", "gpytorch.mlls.ExactMarginalLogLikelihood.item", "tqdm.tqdm.set_postfix", "results.append", "torch.linspace", "torch.linspace", "str", "gpytorch.mlls.ExactMarginalLogLikelihood.", "model.cuda.covar_module.outputscale.item", "model.cuda.covar_module.base_kernel.lengthscale.item", "model.cuda.likelihood.noise.item", "model.cuda."], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.load_data.load_uci_data_ap", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.train", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.set_hypers"], ["def", "mll_sweep", "(", "data_dir", ",", "save_dir", ",", "\n", "lengthscale_min", "=", "0.01", ",", "lengthscale_max", "=", "1.", ",", "noise_min", "=", "0.01", ",", "noise_max", "=", "0.2", ",", "\n", "grid_size", "=", "25", ",", "outputscale", "=", "1.", ")", ":", "\n", "    ", "train_x", ",", "train_y", ",", "*", "_", "=", "load_uci_data_ap", "(", "data_dir", ",", "'pol'", ")", "\n", "train_n", "=", "int", "(", "1.e2", ")", "\n", "train_x", ",", "train_y", "=", "train_x", "[", ":", "train_n", ",", ":", "]", ",", "train_y", "[", ":", "train_n", "]", "\n", "\n", "likelihood", "=", "gpytorch", ".", "likelihoods", ".", "GaussianLikelihood", "(", ")", "\n", "model", "=", "GPRegressionModel", "(", "train_x", ",", "train_y", ",", "likelihood", ")", "\n", "mll", "=", "gpytorch", ".", "mlls", ".", "ExactMarginalLogLikelihood", "(", "likelihood", ",", "model", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "train_x", "=", "train_x", ".", "cuda", "(", ")", "\n", "train_y", "=", "train_y", ".", "cuda", "(", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "", "lengthscales", "=", "torch", ".", "linspace", "(", "lengthscale_min", ",", "lengthscale_max", ",", "grid_size", ")", ".", "tolist", "(", ")", "\n", "noises", "=", "torch", ".", "linspace", "(", "noise_min", ",", "noise_max", ",", "grid_size", ")", ".", "tolist", "(", ")", "\n", "iterator", "=", "tqdm", ".", "tqdm", "(", "product", "(", "lengthscales", ",", "noises", ")", ",", "\n", "desc", "=", "\"Hyperparam configs\"", ",", "total", "=", "(", "grid_size", "**", "2", ")", ")", "\n", "\n", "results_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\n", "'exact_loss_landscape_'", "+", "str", "(", "train_n", ")", "+", "'.csv'", ")", "\n", "results", "=", "[", "]", "\n", "\n", "for", "idx", ",", "(", "lengthscale", ",", "noise", ")", "in", "enumerate", "(", "iterator", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "set_hypers", "(", "model", ",", "noise", ",", "lengthscale", ",", "outputscale", ")", "\n", "mll_value", "=", "mll", "(", "model", "(", "train_x", ")", ",", "train_y", ")", ".", "item", "(", ")", "\n", "iterator", ".", "set_postfix", "(", "mll", "=", "mll_value", ",", "\n", "os", "=", "model", ".", "covar_module", ".", "outputscale", ".", "item", "(", ")", ",", "\n", "ls", "=", "model", ".", "covar_module", ".", "base_kernel", ".", "lengthscale", ".", "item", "(", ")", ",", "\n", "noise", "=", "model", ".", "likelihood", ".", "noise", ".", "item", "(", ")", ")", "\n", "\n", "results", ".", "append", "(", "(", "lengthscale", ",", "noise", ",", "outputscale", ",", "mll_value", ")", ")", "\n", "", "df", "=", "pd", ".", "DataFrame", "(", "results", ",", "columns", "=", "[", "\"lengthscale\"", ",", "\"noise\"", ",", "\"outputscale\"", ",", "\"mll\"", "]", ")", "\n", "df", ".", "to_csv", "(", "results_path", ",", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.plot_fns.append_unbiasedness_cg_results": [[12, 33], ["experiments.utils.load_results", "experiments.utils.load_results.items", "plot_fns.make_keys_to_int", "[].keys", "output[].item", "output[].item", "output[].keys", "rounds.append", "track.update", "numpy.array"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.load_results", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.plot_fns.make_keys_to_int"], ["def", "append_unbiasedness_cg_results", "(", "results", ",", "input_file", ")", ":", "\n", "    ", "res", "=", "load_results", "(", "input_file", ")", "\n", "for", "k", ",", "output", "in", "res", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", "==", "'cholesky'", ":", "\n", "            ", "logdet", "=", "output", "[", "'logdet'", "]", ".", "item", "(", ")", "\n", "invquad", "=", "output", "[", "'inv_quad'", "]", ".", "item", "(", ")", "\n", "# logdet = output['logdet']", "\n", "# invquad = output['inv_quad']", "\n", "results", "[", "'chol_cg'", "]", "=", "(", "logdet", ",", "invquad", ")", "\n", "", "else", ":", "\n", "            ", "rounds", "=", "[", "]", "\n", "for", "i", "in", "output", "[", "'logdet'", "]", ".", "keys", "(", ")", ":", "\n", "                ", "track", "=", "{", "}", "\n", "for", "v", "in", "[", "'logdet'", ",", "'inv_quad'", "]", ":", "\n", "                    ", "aux", "=", "'invquad'", "if", "v", "==", "'inv_quad'", "else", "v", "\n", "# track.update({aux: output[v][i]})", "\n", "track", ".", "update", "(", "{", "aux", ":", "np", ".", "array", "(", "output", "[", "v", "]", "[", "i", "]", ")", "}", ")", "\n", "", "rounds", ".", "append", "(", "track", ")", "\n", "", "results", "[", "k", "]", "=", "rounds", "\n", "", "", "results", "[", "'num_cg_iters'", "]", "=", "make_keys_to_int", "(", "res", "[", "'cg'", "]", "[", "'logdet'", "]", ".", "keys", "(", ")", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.plot_fns.make_keys_to_int": [[35, 41], ["numpy.array", "np.array.append", "int"], "function", ["None"], ["", "def", "make_keys_to_int", "(", "keys", ")", ":", "\n", "    ", "output", "=", "[", "]", "\n", "for", "idx", "in", "keys", ":", "\n", "        ", "output", ".", "append", "(", "int", "(", "idx", ")", ")", "\n", "", "output", "=", "np", ".", "array", "(", "output", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.plot_fns.get_exact_loss_from_hypers_logged": [[43, 68], ["experiments.load_data.load_uci_data", "gpytorch.likelihoods.GaussianLikelihood", "experiments.experiment_fns.GPRegressionModel", "gpytorch.mlls.ExactMarginalLogLikelihood", "torch.cuda.is_available", "torch.zeros", "enumerate", "int", "train_x.cuda.cuda", "train_y.cuda.cuda", "model.cuda.cuda", "len", "model.cuda.train", "experiments.experiment_fns.set_hypers", "print", "gpt.mlls.ExactMarginalLogLikelihood.item", "gpt.mlls.ExactMarginalLogLikelihood.", "model.cuda."], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.load_data.load_uci_data", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.train", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.set_hypers"], ["", "def", "get_exact_loss_from_hypers_logged", "(", "ls", ",", "noise", ",", "os", ",", "run_sample", ",", "dataset_name", "=", "'pol'", ")", ":", "\n", "    ", "train_x", ",", "train_y", ",", "*", "_", "=", "load_uci_data", "(", "'./datasets/'", ",", "dataset_name", ")", "\n", "if", "run_sample", ":", "\n", "        ", "train_n", "=", "int", "(", "1.e2", ")", "\n", "train_x", ",", "train_y", "=", "train_x", "[", ":", "train_n", ",", ":", "]", ",", "train_y", "[", ":", "train_n", "]", "\n", "\n", "", "likelihood", "=", "gpt", ".", "likelihoods", ".", "GaussianLikelihood", "(", ")", "\n", "model", "=", "GPRegressionModel", "(", "train_x", ",", "train_y", ",", "likelihood", ")", "\n", "mll", "=", "gpt", ".", "mlls", ".", "ExactMarginalLogLikelihood", "(", "likelihood", ",", "model", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "train_x", "=", "train_x", ".", "cuda", "(", ")", "\n", "train_y", "=", "train_y", ".", "cuda", "(", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "# with gpt.settings.max_cholesky_size(int(1.0e7)):", "\n", "# gpt.settings.max_cholesky_size(int(1.0e7))", "\n", "", "loss", "=", "torch", ".", "zeros", "(", "len", "(", "os", ")", ")", "\n", "\n", "for", "idx", ",", "_", "in", "enumerate", "(", "os", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "set_hypers", "(", "model", ",", "noise", "[", "idx", "]", ",", "ls", "[", "idx", "]", ",", "os", "[", "idx", "]", ")", "\n", "loss", "[", "idx", "]", "=", "-", "mll", "(", "model", "(", "train_x", ")", ",", "train_y", ")", ".", "item", "(", ")", "\n", "print", "(", "f\"Going over observation: {idx:4d}\"", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.plot_fns.smooth_vec": [[70, 74], ["pandas.DataFrame", "numpy.array", "pd.DataFrame.rolling().mean", "pd.DataFrame.rolling"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.dist_of_iterations_for_rrcg.RRDist.mean"], ["", "def", "smooth_vec", "(", "v", ",", "std", ",", "num", ")", ":", "\n", "    ", "df", "=", "pd", ".", "DataFrame", "(", "v", ")", "\n", "rolling", "=", "np", ".", "array", "(", "df", ".", "rolling", "(", "num", ",", "win_type", "=", "'gaussian'", ",", "center", "=", "True", ")", ".", "mean", "(", "std", "=", "std", ")", ")", "\n", "return", "rolling", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.plot_fns.increase_size_of_vect": [[76, 83], ["len", "numpy.concatenate", "len", "numpy.ones"], "function", ["None"], ["", "def", "increase_size_of_vect", "(", "v", ",", "max_iter", ")", ":", "\n", "    ", "if", "len", "(", "v", ")", "<", "max_iter", ":", "\n", "        ", "diff", "=", "max_iter", "-", "len", "(", "v", ")", "\n", "a1", "=", "v", "\n", "a2", "=", "v", "[", "-", "1", "]", "*", "np", ".", "ones", "(", "diff", ")", "\n", "v", "=", "np", ".", "concatenate", "(", "(", "a1", ",", "a2", ")", ")", "\n", "", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.plot_fns.get_gray_colormap": [[85, 91], ["matplotlib.cm.Greys", "matplotlib.colors.LinearSegmentedColormap.from_list", "matplotlib.cm.Greys", "numpy.linspace"], "function", ["None"], ["", "def", "get_gray_colormap", "(", ")", ":", "\n", "    ", "total", "=", "10", "\n", "colors", "=", "[", "cm", ".", "Greys", "(", "x", ")", "for", "x", "in", "np", ".", "linspace", "(", "0.4", ",", "0.9", ",", "total", ")", "]", "\n", "colors", "[", "0", "]", "=", "cm", ".", "Greys", "(", "0.2", ")", "\n", "grey_map", "=", "LinearSegmentedColormap", ".", "from_list", "(", "'ggg'", ",", "colors", ",", "N", "=", "total", ")", "\n", "return", "grey_map", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.plot_fns.get_colors_dict": [[93, 108], ["None"], "function", ["None"], ["", "def", "get_colors_dict", "(", ")", ":", "\n", "    ", "ccc", "=", "{", "\n", "'cholesky'", ":", "'#cb181d'", ",", "\n", "'rff1'", ":", "'#c6dbef'", ",", "\n", "'rff2'", ":", "'#9ecae1'", ",", "\n", "'rff3'", ":", "'#6baed6'", ",", "\n", "'rff'", ":", "'#3182bd'", ",", "\n", "'ssrff'", ":", "'#08519c'", ",", "\n", "'cg1'", ":", "'#dadaeb'", ",", "\n", "'cg2'", ":", "'#bcbddc'", ",", "\n", "'cg3'", ":", "'#9e9ac8'", ",", "\n", "'cg'", ":", "'#756bb1'", ",", "\n", "'rrcg'", ":", "'#54278f'", "\n", "}", "\n", "return", "ccc", "\n", "", ""]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.TrainGPRR.__init__": [[219, 245], ["model.parameters", "experiment_fns.select_optimizer", "torch.optim.lr_scheduler.MultiStepLR", "gpytorch.mlls.ExactMarginalLogLikelihood", "gpytorch.mlls.ExactMarginalLogLikelihood", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.select_optimizer"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "settings", ",", "logger", ",", "cholesky_model", "=", "None", ")", ":", "\n", "        ", "total_iters", "=", "settings", "[", "\"total_iters\"", "]", "\n", "lr", "=", "settings", "[", "\"lr\"", "]", "\n", "lr_wd", "=", "settings", "[", "\"lr_wd\"", "]", "\n", "mil", "=", "settings", "[", "\"mil\"", "]", "\n", "self", ".", "total_iters", "=", "settings", "[", "\"total_iters\"", "]", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "train_x", ",", "self", ".", "train_y", "=", "model", ".", "train_inputs", "[", "0", "]", ",", "model", ".", "train_targets", "\n", "params", "=", "model", ".", "parameters", "(", ")", "\n", "self", ".", "optimizer", "=", "select_optimizer", "(", "settings", "[", "\"optimizer\"", "]", ",", "params", ",", "lr", ")", "\n", "self", ".", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "\n", "self", ".", "optimizer", ",", "milestones", "=", "mil", ",", "gamma", "=", "lr_wd", "\n", ")", "\n", "self", ".", "mll", "=", "gpt", ".", "mlls", ".", "ExactMarginalLogLikelihood", "(", "model", ".", "likelihood", ",", "model", ")", "\n", "self", ".", "mll_chol", "=", "gpt", ".", "mlls", ".", "ExactMarginalLogLikelihood", "(", "\n", "cholesky_model", ".", "likelihood", ",", "cholesky_model", "\n", ")", "\n", "self", ".", "loss", ",", "self", ".", "ls", ",", "self", ".", "os", ",", "self", ".", "noise", "=", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", "\n", "self", ".", "iter", "=", "0", "\n", "num_dims", "=", "self", ".", "train_x", ".", "shape", "[", "1", "]", "if", "settings", "[", "\"model_name\"", "]", "==", "\"rff_ard\"", "else", "1", "\n", "self", ".", "results", "=", "{", "\n", "\"ls\"", ":", "np", ".", "zeros", "(", "(", "num_dims", ",", "total_iters", ")", ")", ",", "\n", "\"os\"", ":", "np", ".", "zeros", "(", "total_iters", ")", ",", "\n", "\"noise\"", ":", "np", ".", "zeros", "(", "total_iters", ")", ",", "\n", "\"loss\"", ":", "np", ".", "zeros", "(", "total_iters", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.TrainGPRR.train": [[247, 255], ["experiment_fns.TrainGPRR.model.train", "range", "time.time", "experiment_fns.TrainGPRR.take_one_step", "time.time", "experiment_fns.TrainGPRR.scheduler.step", "experiment_fns.TrainGPRR.update_trackers"], "methods", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.train", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.TrainGPRR.take_one_step", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.TrainGPRR.update_trackers"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", ".", "train", "(", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "total_iters", ")", ":", "\n", "            ", "tic", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "take_one_step", "(", ")", "\n", "toc", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "self", ".", "update_trackers", "(", "time_taken", "=", "toc", "-", "tic", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.TrainGPRR.take_one_step": [[256, 265], ["experiment_fns.TrainGPRR.optimizer.zero_grad", "experiment_fns.reset_rff_weights", "experiment_fns.TrainGPRR.model", "hasattr", "experiment_fns.TrainGPRR.loss.backward", "experiment_fns.TrainGPRR.optimizer.step", "experiment_fns.TrainGPRR.mll", "experiment_fns.add_weigths_to_loss"], "methods", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.reset_rff_weights", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg._inv_quad_log_det.InvQuadLogDet.backward", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.add_weigths_to_loss"], ["", "", "def", "take_one_step", "(", "self", ")", ":", "\n", "        ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "reset_rff_weights", "(", "self", ".", "model", ")", "\n", "y_hat", "=", "self", ".", "model", "(", "self", ".", "train_x", ")", "\n", "self", ".", "loss", "=", "-", "self", ".", "mll", "(", "y_hat", ",", "self", ".", "train_y", ")", "\n", "if", "hasattr", "(", "self", ".", "model", ",", "\"dist_obj\"", ")", ":", "\n", "            ", "self", ".", "loss", "=", "add_weigths_to_loss", "(", "self", ".", "loss", ",", "self", ".", "model", ")", "\n", "", "self", ".", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.TrainGPRR.update_trackers": [[266, 278], ["experiment_fns.TrainGPRR.update_params", "experiment_fns.update_logger", "experiment_fns.TrainGPRR.update_results", "experiment_fns.TrainGPRR.loss.item"], "methods", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.TrainGPRR.update_params", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.update_logger", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.TrainGPRR.update_results"], ["", "def", "update_trackers", "(", "self", ",", "time_taken", ")", ":", "\n", "        ", "self", ".", "update_params", "(", ")", "\n", "update_logger", "(", "\n", "self", ".", "logger", ",", "\n", "self", ".", "loss", ".", "item", "(", ")", ",", "\n", "self", ".", "ls", ",", "\n", "self", ".", "os", ",", "\n", "self", ".", "noise", ",", "\n", "self", ".", "iter", ",", "\n", "time_taken", ",", "\n", ")", "\n", "self", ".", "update_results", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.TrainGPRR.update_params": [[279, 285], ["experiment_fns.offload_ls", "experiment_fns.TrainGPRR.model.covar_module.outputscale.item", "experiment_fns.TrainGPRR.model.likelihood.noise.item"], "methods", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.offload_ls"], ["", "def", "update_params", "(", "self", ")", ":", "\n", "# outputscale = 0.62923026", "\n", "# self.model.covar_module.outputscale = outputscale", "\n", "        ", "self", ".", "ls", "=", "offload_ls", "(", "self", ".", "model", ".", "covar_module", ".", "base_kernel", ".", "lengthscale", ")", "\n", "self", ".", "os", "=", "self", ".", "model", ".", "covar_module", ".", "outputscale", ".", "item", "(", ")", "\n", "self", ".", "noise", "=", "self", ".", "model", ".", "likelihood", ".", "noise", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.TrainGPRR.update_results": [[286, 292], ["None"], "methods", ["None"], ["", "def", "update_results", "(", "self", ")", ":", "\n", "        ", "self", ".", "results", "[", "\"ls\"", "]", "[", ":", ",", "self", ".", "iter", "]", "=", "self", ".", "ls", "\n", "self", ".", "results", "[", "\"os\"", "]", "[", "self", ".", "iter", "]", "=", "self", ".", "os", "\n", "self", ".", "results", "[", "\"noise\"", "]", "[", "self", ".", "iter", "]", "=", "self", ".", "noise", "\n", "self", ".", "results", "[", "\"loss\"", "]", "[", "self", ".", "iter", "]", "=", "self", ".", "loss", "\n", "self", ".", "iter", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.GPRegressionModel_RR_RFF.__init__": [[395, 412], ["super().__init__", "gpytorch.means.ZeroMean", "gpytorch.kernels.ScaleKernel", "experiments.rr_rff.RR_RFF_Kernel", "experiments.rr_rff.RR_RFF_Kernel"], "methods", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.baselines.run_svgp.SVGPModel.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "train_x", ",", "train_y", ",", "likelihood", ",", "dist_obj", ",", "single_sample", ",", "use_ard", "=", "False", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "train_x", ",", "train_y", ",", "likelihood", ")", "\n", "self", ".", "dist_obj", "=", "dist_obj", "\n", "self", ".", "mean_module", "=", "gpt", ".", "means", ".", "ZeroMean", "(", ")", "\n", "if", "use_ard", ":", "\n", "            ", "rr_rff_kernel", "=", "RR_RFF_Kernel", "(", "\n", "single_sample", "=", "single_sample", ",", "\n", "min_val", "=", "self", ".", "dist_obj", ".", "min_val", ",", "\n", "ard_num_dims", "=", "train_x", ".", "shape", "[", "1", "]", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "rr_rff_kernel", "=", "RR_RFF_Kernel", "(", "\n", "single_sample", "=", "single_sample", ",", "min_val", "=", "self", ".", "dist_obj", ".", "min_val", "\n", ")", "\n", "", "self", ".", "covar_module", "=", "gpt", ".", "kernels", ".", "ScaleKernel", "(", "rr_rff_kernel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.GPRegressionModel_RR_RFF.single_sample_estimator": [[413, 419], ["experiment_fns.GPRegressionModel_RR_RFF.dist_obj.prob"], "methods", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.dist_of_iterations_for_rrcg.RRDist.prob"], ["", "def", "single_sample_estimator", "(", "self", ",", "terms", ")", ":", "\n", "        ", "base_term", "=", "terms", "[", "0", "]", "\n", "final_delta", "=", "terms", "[", "-", "1", "]", "-", "terms", "[", "-", "2", "]", "\n", "ss_weight", "=", "1.0", "/", "self", ".", "dist_obj", ".", "prob", "(", "self", ".", "dist_obj", ".", "index_sampled", ")", "\n", "ss_estimator", "=", "base_term", "+", "ss_weight", "*", "final_delta", "\n", "return", "ss_estimator", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.GPRegressionModel_RR_RFF.RT_estimator": [[420, 423], ["experiment_fns.GPRegressionModel_RR_RFF.single_sample_estimator"], "methods", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.GPRegressionModel_RR_RFF.single_sample_estimator"], ["", "def", "RT_estimator", "(", "self", ",", "input_terms", ")", ":", "\n", "        ", "ss_estimator", "=", "self", ".", "single_sample_estimator", "(", "input_terms", ")", "\n", "return", "ss_estimator", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.GPRegressionModel_RR_RFF.forward": [[424, 432], ["experiment_fns.GPRegressionModel_RR_RFF.mean_module", "experiment_fns.GPRegressionModel_RR_RFF.dist_obj.sample", "int", "gpytorch.distributions.MultivariateNormal", "J.item", "gpytorch.settings.lazily_evaluate_kernels", "experiment_fns.GPRegressionModel_RR_RFF.covar_module"], "methods", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.MultivariateNormal.sample"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "mean_x", "=", "self", ".", "mean_module", "(", "x", ")", "\n", "self", ".", "dist_obj", ".", "sample", "(", ")", "\n", "J", "=", "self", ".", "dist_obj", ".", "value_sampled", "\n", "self", ".", "covar_module", ".", "base_kernel", ".", "num_samples", "=", "int", "(", "J", ".", "item", "(", ")", ")", "\n", "with", "gpt", ".", "settings", ".", "lazily_evaluate_kernels", "(", "False", ")", ":", "\n", "            ", "covar_x", "=", "self", ".", "covar_module", "(", "x", ")", "\n", "", "return", "gpt", ".", "distributions", ".", "MultivariateNormal", "(", "mean_x", ",", "covar_x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.Tracker.__init__": [[478, 496], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "total_rounds", ",", "rff_samples", ",", "cg_iters", ")", ":", "\n", "        ", "num_rff_samples", "=", "rff_samples", ".", "shape", "[", "0", "]", "\n", "num_cg_iters", "=", "cg_iters", ".", "shape", "[", "0", "]", "\n", "self", ".", "results", "=", "{", "\n", "\"chol\"", ":", "{", "\n", "\"inv_quad\"", ":", "np", ".", "zeros", "(", "total_rounds", ")", ",", "\n", "\"logdet\"", ":", "np", ".", "zeros", "(", "total_rounds", ")", ",", "\n", "}", ",", "\n", "\"rff\"", ":", "{", "\n", "\"inv_quad\"", ":", "np", ".", "zeros", "(", "(", "total_rounds", ",", "num_rff_samples", ")", ")", ",", "\n", "\"logdet\"", ":", "np", ".", "zeros", "(", "(", "total_rounds", ",", "num_rff_samples", ")", ")", ",", "\n", "}", ",", "\n", "\"rff_samples\"", ":", "rff_samples", ",", "\n", "\"cg\"", ":", "{", "\n", "\"inv_quad\"", ":", "np", ".", "zeros", "(", "(", "total_rounds", ",", "num_cg_iters", ")", ")", ",", "\n", "\"logdet\"", ":", "np", ".", "zeros", "(", "(", "total_rounds", ",", "num_cg_iters", ")", ")", ",", "\n", "}", ",", "\n", "\"cg_iters\"", ":", "cg_iters", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.Tracker.save_results": [[498, 501], ["open", "pickle.dump"], "methods", ["None"], ["", "def", "save_results", "(", "self", ",", "output_file", ")", ":", "\n", "        ", "with", "open", "(", "file", "=", "output_file", ",", "mode", "=", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "obj", "=", "self", ".", "results", ",", "file", "=", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.GPRegressionModel.__init__": [[613, 623], ["super().__init__", "gpytorch.means.ZeroMean", "gpytorch.kernels.ScaleKernel", "gpytorch.kernels.ScaleKernel", "gpytorch.kernels.RBFKernel", "gpytorch.kernels.RBFKernel"], "methods", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.baselines.run_svgp.SVGPModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "train_x", ",", "train_y", ",", "likelihood", ",", "use_ard", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "train_x", ",", "train_y", ",", "likelihood", ")", "\n", "self", ".", "mean_module", "=", "gpt", ".", "means", ".", "ZeroMean", "(", ")", "\n", "if", "use_ard", ":", "\n", "            ", "self", ".", "covar_module", "=", "gpt", ".", "kernels", ".", "ScaleKernel", "(", "\n", "gpt", ".", "kernels", ".", "RBFKernel", "(", "ard_num_dims", "=", "train_x", ".", "shape", "[", "1", "]", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "covar_module", "=", "gpt", ".", "kernels", ".", "ScaleKernel", "(", "\n", "gpt", ".", "kernels", ".", "RBFKernel", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.GPRegressionModel.forward": [[625, 629], ["experiment_fns.GPRegressionModel.mean_module", "experiment_fns.GPRegressionModel.covar_module", "gpytorch.distributions.MultivariateNormal"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "mean_x", "=", "self", ".", "mean_module", "(", "x", ")", "\n", "covar_x", "=", "self", ".", "covar_module", "(", "x", ")", "\n", "return", "gpt", ".", "distributions", ".", "MultivariateNormal", "(", "mean_x", ",", "covar_x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.GPRegressionModelRFF.__init__": [[632, 643], ["experiment_fns.GPRegressionModel.__init__", "gpytorch.kernels.ScaleKernel", "gpytorch.kernels.ScaleKernel", "experiments.rr_rff.RFFKernel", "experiments.rr_rff.RFFKernel"], "methods", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.baselines.run_svgp.SVGPModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "train_x", ",", "train_y", ",", "likelihood", ",", "num_rff_samples", ",", "use_ard", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "train_x", ",", "train_y", ",", "likelihood", ")", "\n", "if", "use_ard", ":", "\n", "            ", "self", ".", "covar_module", "=", "gpt", ".", "kernels", ".", "ScaleKernel", "(", "\n", "RFFKernel", "(", "\n", "num_samples", "=", "num_rff_samples", ",", "ard_num_dims", "=", "train_x", ".", "shape", "[", "1", "]", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "covar_module", "=", "gpt", ".", "kernels", ".", "ScaleKernel", "(", "\n", "RFFKernel", "(", "num_samples", "=", "num_rff_samples", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.get_test_rmse_nll_gp": [[17, 31], ["gpytorch.likelihoods.GaussianLikelihood", "experiment_fns.GPRegressionModel", "experiment_fns.set_hypers", "gpt.likelihoods.GaussianLikelihood.eval", "GPRegressionModel.eval", "time.time", "experiment_fns.compute_test_metrics", "experiments.utils.print_time_taken", "gpt.likelihoods.GaussianLikelihood.cuda", "GPRegressionModel.cuda", "time.time"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.set_hypers", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.compute_test_metrics", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.print_time_taken"], ["def", "get_test_rmse_nll_gp", "(", "train_ds", ",", "test_ds", ",", "settings", ",", "logger", ")", ":", "\n", "    ", "likelihood", "=", "gpt", ".", "likelihoods", ".", "GaussianLikelihood", "(", ")", "\n", "use_ard", "=", "settings", "[", "\"model_name\"", "]", "==", "\"rff_ard\"", "\n", "model", "=", "GPRegressionModel", "(", "*", "train_ds", ",", "likelihood", ",", "use_ard", "=", "use_ard", ")", "\n", "set_hypers", "(", "model", ",", "settings", "[", "\"noise\"", "]", ",", "settings", "[", "\"ls\"", "]", ",", "settings", "[", "\"os\"", "]", ")", "\n", "likelihood", "=", "likelihood", ".", "cuda", "(", ")", "if", "settings", "[", "\"cuda\"", "]", "else", "likelihood", "\n", "model", "=", "model", ".", "cuda", "(", ")", "if", "settings", "[", "\"cuda\"", "]", "else", "model", "\n", "\n", "likelihood", ".", "eval", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "t0", "=", "time", ".", "time", "(", ")", "\n", "rmse", ",", "nll", "=", "compute_test_metrics", "(", "model", ",", "test_ds", ")", "\n", "print_time_taken", "(", "t0", ",", "time", ".", "time", "(", ")", ",", "logger", "=", "logger", ")", "\n", "return", "rmse", ",", "nll", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.compute_test_metrics": [[33, 40], ["torch.no_grad", "gpytorch.settings.fast_pred_var", "gpytorch.beta_features.checkpoint_kernel", "model", "experiment_fns.compute_nll", "float", "experiment_fns.compute_rmse"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.compute_nll", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.compute_rmse"], ["", "def", "compute_test_metrics", "(", "model", ",", "test_ds", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ",", "gpt", ".", "settings", ".", "fast_pred_var", "(", ")", ":", "\n", "        ", "with", "gpt", ".", "beta_features", ".", "checkpoint_kernel", "(", "0", ")", ":", "\n", "            ", "y_hat", "=", "model", "(", "test_ds", "[", "0", "]", ")", "\n", "nll", "=", "compute_nll", "(", "model", ",", "test_ds", "[", "1", "]", ",", "y_hat", ")", "\n", "rmse", "=", "float", "(", "compute_rmse", "(", "y_hat", ".", "mean", "-", "test_ds", "[", "1", "]", ")", ")", "\n", "", "", "return", "rmse", ",", "nll", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.compute_nll": [[42, 53], ["model.likelihood.noise_covar", "y_hat.__class__", "gpytorch.distributions.base_distributions.Normal", "base_distributions.Normal.log_prob", "float", "y_hat.variance.clamp_min().sqrt", "torch.mean", "y_hat.variance.clamp_min"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.MultivariateNormal.log_prob", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.dist_of_iterations_for_rrcg.RRDist.mean"], ["", "def", "compute_nll", "(", "model", ",", "test_y", ",", "y_hat", ")", ":", "\n", "    ", "mean", "=", "y_hat", ".", "mean", "\n", "covar", "=", "y_hat", ".", "lazy_covariance_matrix", "\n", "covar", "+=", "model", ".", "likelihood", ".", "noise_covar", "(", "shape", "=", "mean", ".", "shape", ")", "\n", "y_hat", ".", "__class__", "(", "mean", ",", "covar", ")", "\n", "indep_dist", "=", "base_distributions", ".", "Normal", "(", "\n", "y_hat", ".", "mean", ",", "y_hat", ".", "variance", ".", "clamp_min", "(", "1e-8", ")", ".", "sqrt", "(", ")", "\n", ")", "\n", "nll", "=", "indep_dist", ".", "log_prob", "(", "test_y", ")", "\n", "nll", "=", "float", "(", "-", "torch", ".", "mean", "(", "nll", ")", ")", "\n", "return", "nll", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.compute_rmse": [[55, 58], ["torch.sqrt", "torch.sqrt.item", "torch.mean", "torch.pow"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.dist_of_iterations_for_rrcg.RRDist.mean"], ["", "def", "compute_rmse", "(", "delta", ")", ":", "\n", "    ", "rmse", "=", "torch", ".", "sqrt", "(", "torch", ".", "mean", "(", "torch", ".", "pow", "(", "delta", ",", "2", ")", ")", ")", "\n", "return", "rmse", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.fit_gp": [[60, 79], ["torch.manual_seed", "numpy.random.seed", "gpytorch.likelihoods.GaussianLikelihood", "experiment_fns.select_model", "experiment_fns.GPRegressionModel", "time.time", "experiment_fns.TrainGPRR", "experiment_fns.set_training_context", "experiments.utils.print_time_taken", "logger.info", "gpt.likelihoods.GaussianLikelihood.cuda", "GPRegressionModel.cuda", "time.time", "experiment_fns.get_hypers", "experiment_fns.save_results"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.select_model", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.set_training_context", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.print_time_taken", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.get_hypers", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.save_results"], ["", "def", "fit_gp", "(", "train_ds", ",", "settings", ",", "logger", ",", "save_pickle", "=", "True", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "settings", "[", "\"seed\"", "]", ")", "\n", "np", ".", "random", ".", "seed", "(", "settings", "[", "\"seed\"", "]", ")", "\n", "use_cuda", "=", "settings", "[", "\"cuda\"", "]", "\n", "likelihood", "=", "gpt", ".", "likelihoods", ".", "GaussianLikelihood", "(", ")", "\n", "likelihood", "=", "likelihood", ".", "cuda", "(", ")", "if", "use_cuda", "else", "likelihood", "\n", "\n", "model", "=", "select_model", "(", "settings", ",", "train_ds", ",", "likelihood", ")", "\n", "cholesky_model", "=", "GPRegressionModel", "(", "*", "train_ds", ",", "likelihood", ")", "\n", "cholesky_model", "=", "cholesky_model", ".", "cuda", "(", ")", "if", "use_cuda", "else", "cholesky_model", "\n", "t0", "=", "time", ".", "time", "(", ")", "\n", "tr", "=", "TrainGPRR", "(", "model", ",", "settings", ",", "logger", ",", "cholesky_model", ")", "\n", "set_training_context", "(", "settings", "[", "\"model_name\"", "]", ",", "tr", ")", "\n", "\n", "print_time_taken", "(", "t0", ",", "time", ".", "time", "(", ")", ",", "logger", "=", "logger", ")", "\n", "logger", ".", "info", "(", "get_hypers", "(", "model", ")", ")", "\n", "if", "save_pickle", ":", "\n", "        ", "output_file", "=", "logger", ".", "log_file_name", "[", ":", "-", "4", "]", "+", "\".pkl\"", "\n", "save_results", "(", "tr", ".", "results", ",", "output_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.set_training_context": [[81, 88], ["gpytorch.settings.max_cholesky_size", "tr.train", "gpytorch.settings.debug", "tr.train", "int"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.train", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.train"], ["", "", "def", "set_training_context", "(", "model_name", ",", "tr", ")", ":", "\n", "    ", "if", "model_name", "==", "\"cholesky\"", ":", "\n", "        ", "with", "gpt", ".", "settings", ".", "max_cholesky_size", "(", "int", "(", "1.0e7", ")", ")", ":", "\n", "            ", "tr", ".", "train", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "with", "gpt", ".", "settings", ".", "debug", "(", "False", ")", ":", "\n", "            ", "tr", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.select_model": [[90, 118], ["experiment_fns.GPRegressionModel", "GPRegressionModel_RR_RFF.cuda", "experiment_fns.GPRegressionModelRFF", "experiment_fns.GPRegressionModelRFF", "experiment_fns.get_truncation_dist", "experiment_fns.GPRegressionModel_RR_RFF", "experiment_fns.warmup_model", "experiment_fns.get_truncation_dist", "experiment_fns.GPRegressionModel_RR_RFF"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.get_truncation_dist", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.warmup_model", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.get_truncation_dist"], ["", "", "", "def", "select_model", "(", "settings", ",", "train_ds", ",", "likelihood", ")", ":", "\n", "    ", "model_name", "=", "settings", "[", "\"model_name\"", "]", "\n", "use_cuda", "=", "settings", "[", "\"cuda\"", "]", "\n", "if", "model_name", "==", "\"cholesky\"", ":", "\n", "        ", "model", "=", "GPRegressionModel", "(", "*", "train_ds", ",", "likelihood", ")", "\n", "", "elif", "model_name", "==", "\"rff\"", ":", "\n", "        ", "num_rff_samples", "=", "settings", "[", "\"rff_samples\"", "]", "\n", "model", "=", "GPRegressionModelRFF", "(", "*", "train_ds", ",", "likelihood", ",", "num_rff_samples", ")", "\n", "", "elif", "model_name", "==", "\"rff_ard\"", ":", "\n", "        ", "num_rff_samples", "=", "settings", "[", "\"rff_samples\"", "]", "\n", "model", "=", "GPRegressionModelRFF", "(", "\n", "*", "train_ds", ",", "likelihood", ",", "num_rff_samples", ",", "use_ard", "=", "True", "\n", ")", "\n", "", "elif", "model_name", "==", "\"ssrff\"", ":", "\n", "        ", "truncation_dist", "=", "get_truncation_dist", "(", "settings", ")", "\n", "model", "=", "GPRegressionModel_RR_RFF", "(", "\n", "*", "train_ds", ",", "likelihood", ",", "truncation_dist", ",", "single_sample", "=", "True", ",", "use_ard", "=", "False", "\n", ")", "\n", "if", "settings", "[", "\"warmup\"", "]", ":", "\n", "            ", "model", "=", "warmup_model", "(", "model", ",", "settings", "[", "\"dataset_name\"", "]", ")", "\n", "\n", "", "", "elif", "model_name", "==", "\"ssrff_ard\"", ":", "\n", "        ", "truncation_dist", "=", "get_truncation_dist", "(", "settings", ")", "\n", "model", "=", "GPRegressionModel_RR_RFF", "(", "\n", "*", "train_ds", ",", "likelihood", ",", "truncation_dist", ",", "single_sample", "=", "True", ",", "use_ard", "=", "True", "\n", ")", "\n", "", "model", "=", "model", ".", "cuda", "(", ")", "if", "use_cuda", "else", "model", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.get_truncation_dist": [[120, 126], ["rff.rff_fns.OneOverJ"], "function", ["None"], ["", "def", "get_truncation_dist", "(", "settings", ")", ":", "\n", "    ", "dist_name", "=", "settings", "[", "\"truncation_name\"", "]", "\n", "if", "dist_name", "==", "\"onej\"", ":", "\n", "        ", "kwargs", "=", "settings", "[", "\"trunc_settings\"", "]", "\n", "truncation_dist", "=", "OneOverJ", "(", "**", "kwargs", ")", "\n", "", "return", "truncation_dist", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.warmup_model": [[128, 133], ["experiment_fns.load_object", "experiment_fns.set_hypers"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.load_object", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.set_hypers"], ["", "def", "warmup_model", "(", "model", ",", "dataset_name", ")", ":", "\n", "    ", "input_location", "=", "\"./results/warmup/\"", "+", "dataset_name", "+", "\".pkl\"", "\n", "results", "=", "load_object", "(", "input_location", ")", "\n", "set_hypers", "(", "model", ",", "results", "[", "\"noise\"", "]", ",", "results", "[", "\"ls\"", "]", ",", "results", "[", "\"output_scale\"", "]", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.load_object": [[135, 138], ["open", "pickle.load"], "function", ["None"], ["", "def", "load_object", "(", "filename", ")", ":", "\n", "    ", "with", "open", "(", "filename", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "return", "pickle", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.run_rr_rounds": [[140, 157], ["range", "numpy.zeros", "experiment_fns.evaluate_RT_rff", "logdet.cpu().item", "invquad.cpu().item", "gc.collect", "torch.cuda.empty_cache", "logdet.cpu", "invquad.cpu"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.evaluate_RT_rff"], ["", "", "def", "run_rr_rounds", "(", "num_rr_rounds", ",", "model", ",", "exact_backup_model", ",", "train_ds", ",", "use_cuda", ")", ":", "\n", "    ", "\"\"\"computes RR estimators num_rr_rounds times, doing so for logdet and invquad\"\"\"", "\n", "res_dict", "=", "{", "}", "\n", "for", "key", "in", "[", "\"J\"", ",", "\"logdet\"", ",", "\"invquad\"", "]", ":", "\n", "        ", "res_dict", "[", "key", "]", "=", "np", ".", "zeros", "(", "num_rr_rounds", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "num_rr_rounds", ")", ":", "\n", "        ", "j", ",", "logdet", ",", "invquad", "=", "evaluate_RT_rff", "(", "model", ",", "exact_backup_model", ",", "train_ds", ")", "\n", "res_dict", "[", "\"J\"", "]", "[", "i", "]", "=", "j", "\n", "res_dict", "[", "\"logdet\"", "]", "[", "i", "]", "=", "logdet", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "res_dict", "[", "\"invquad\"", "]", "[", "i", "]", "=", "invquad", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "if", "use_cuda", ":", "\n", "# print(torch.cuda.memory_allocated())", "\n", "            ", "gc", ".", "collect", "(", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "", "", "return", "res_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.run_rff_rounds": [[159, 182], ["range", "numpy.zeros", "experiment_fns.compute_logdet_invquad", "logdet.cpu().item", "invquad.cpu().item", "hasattr", "model.covar_module.base_kernel.randn_weights.normal_", "gc.collect", "torch.cuda.empty_cache", "logdet.cpu", "invquad.cpu"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.compute_logdet_invquad"], ["", "def", "run_rff_rounds", "(", "num_rr_rounds", ",", "model", ",", "train_ds", ",", "use_cuda", ")", ":", "\n", "    ", "\"\"\"model is assumed to have the right number of samples\"\"\"", "\n", "res_dict", "=", "{", "}", "\n", "for", "key", "in", "[", "\"J\"", ",", "\"logdet\"", ",", "\"invquad\"", "]", ":", "\n", "        ", "res_dict", "[", "key", "]", "=", "np", ".", "zeros", "(", "num_rr_rounds", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "num_rr_rounds", ")", ":", "\n", "        ", "logdet", ",", "invquad", "=", "compute_logdet_invquad", "(", "model", ",", "train_ds", ")", "\n", "res_dict", "[", "\"logdet\"", "]", "[", "i", "]", "=", "logdet", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "res_dict", "[", "\"invquad\"", "]", "[", "i", "]", "=", "invquad", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "\n", "j", "=", "model", ".", "covar_module", ".", "base_kernel", ".", "num_samples", "\n", "res_dict", "[", "\"J\"", "]", "[", "i", "]", "=", "j", "\n", "\n", "if", "hasattr", "(", "model", ".", "covar_module", ".", "base_kernel", ",", "\"randn_weights\"", ")", ":", "\n", "            ", "model", ".", "covar_module", ".", "base_kernel", ".", "randn_weights", ".", "normal_", "(", ")", "\n", "\n", "", "if", "use_cuda", ":", "\n", "# print(torch.cuda.memory_allocated())", "\n", "            ", "gc", ".", "collect", "(", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "", "", "return", "res_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.evaluate_RT_rff": [[184, 203], ["experiment_fns.compute_logdet_invquad", "model.RT_estimator().detach().cpu", "model.RT_estimator().detach().cpu", "model.dist_obj.max_val.item", "experiment_fns.compute_logdet_invquad", "log_det_exact.numel", "inv_quad_exact.numel", "model.RT_estimator().detach", "model.RT_estimator().detach", "model.RT_estimator", "model.RT_estimator"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.compute_logdet_invquad", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.compute_logdet_invquad", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.GPRegressionModel_RR_RFF.RT_estimator", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.GPRegressionModel_RR_RFF.RT_estimator"], ["", "def", "evaluate_RT_rff", "(", "model", ",", "exact_backup_model", ",", "train_ds", ")", ":", "\n", "    ", "\"\"\"provides an rr estimate of logdet and invquad; also tracks Js.\n    results should be compared to an RFF estimator with num_samples = torch.mean(J)\"\"\"", "\n", "log_det", ",", "inv_quad", "=", "compute_logdet_invquad", "(", "model", ",", "train_ds", ")", "\n", "J", "=", "model", ".", "covar_module", ".", "base_kernel", ".", "num_samples", "\n", "\n", "if", "J", "==", "model", ".", "dist_obj", ".", "max_val", ".", "item", "(", ")", ":", "\n", "        ", "log_det_exact", ",", "inv_quad_exact", "=", "compute_logdet_invquad", "(", "\n", "exact_backup_model", ",", "train_ds", "\n", ")", "\n", "assert", "log_det_exact", ".", "numel", "(", ")", "==", "1", "\n", "assert", "inv_quad_exact", ".", "numel", "(", ")", "==", "1", "\n", "log_det", "[", "-", "1", "]", "=", "log_det_exact", "\n", "inv_quad", "[", "-", "1", "]", "=", "inv_quad_exact", "\n", "\n", "", "debiased_log_det", "=", "model", ".", "RT_estimator", "(", "log_det", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "debiased_inv_quad", "=", "model", ".", "RT_estimator", "(", "inv_quad", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "\n", "return", "J", ",", "debiased_log_det", ",", "debiased_inv_quad", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.compute_logdet_invquad": [[205, 216], ["gpytorch.settings.debug", "torch.no_grad", "gpytorch.settings.lazily_evaluate_kernels", "gpytorch.settings.prior_mode", "model.likelihood", "model.likelihood.lazy_covariance_matrix.logdet", "model.likelihood.lazy_covariance_matrix.inv_quad", "model"], "function", ["None"], ["", "def", "compute_logdet_invquad", "(", "model", ",", "train_ds", ")", ":", "\n", "    ", "\"\"\"for rr-rff: log_det.numel() == num_samples, pre rr-weighted sum\n    for rff and exact: log_det.numel() == 1\"\"\"", "\n", "with", "gpt", ".", "settings", ".", "debug", "(", "False", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ",", "gpt", ".", "settings", ".", "lazily_evaluate_kernels", "(", "False", ")", ":", "\n", "            ", "with", "gpt", ".", "settings", ".", "prior_mode", "(", "True", ")", ":", "\n", "                ", "out", "=", "model", ".", "likelihood", "(", "model", "(", "train_ds", "[", "0", "]", ")", ")", "\n", "log_det", "=", "out", ".", "lazy_covariance_matrix", ".", "logdet", "(", ")", "\n", "inv_quad", "=", "out", ".", "lazy_covariance_matrix", ".", "inv_quad", "(", "train_ds", "[", "1", "]", ")", "\n", "\n", "", "", "", "return", "log_det", ",", "inv_quad", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.select_optimizer": [[294, 300], ["torch.optim.Adam", "torch.optim.SGD"], "function", ["None"], ["", "", "def", "select_optimizer", "(", "name", ",", "params", ",", "lr", ")", ":", "\n", "    ", "if", "name", "==", "\"Adam\"", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "lr", ")", "\n", "", "elif", "name", "==", "\"SGD\"", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "params", ",", "lr", "=", "lr", ")", "\n", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.offload_ls": [[302, 305], ["ls.detach().cpu().numpy.detach().cpu().numpy", "ls.detach().cpu().numpy.detach().cpu", "ls.detach().cpu().numpy.detach"], "function", ["None"], ["", "def", "offload_ls", "(", "ls", ")", ":", "\n", "    ", "ls", "=", "ls", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "return", "ls", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.update_logger": [[307, 313], ["logger.info"], "function", ["None"], ["", "def", "update_logger", "(", "logger", ",", "loss", ",", "ls", ",", "os", ",", "noise", ",", "iteration", ",", "time_taken", ")", ":", "\n", "    ", "text", "=", "f\"iter: {iteration:4d} | loss: {loss:+1.4e} | \"", "\n", "text", "+=", "f\"ls: {ls[0, 0]:4.6f} | \"", "\n", "text", "+=", "f\"noise: {noise:4.6f} | os: {os:4.6f} | \"", "\n", "text", "+=", "f\"time: {time_taken:4.2f} sec\"", "\n", "logger", ".", "info", "(", "text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.add_weigths_to_loss": [[315, 318], ["model.RT_estimator"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.GPRegressionModel_RR_RFF.RT_estimator"], ["", "def", "add_weigths_to_loss", "(", "loss", ",", "model", ")", ":", "\n", "    ", "unbiased", "=", "model", ".", "RT_estimator", "(", "loss", ")", "\n", "return", "unbiased", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.train": [[320, 347], ["torch.optim.Adam", "gpytorch.mlls.ExactMarginalLogLikelihood", "model.train", "tqdm.tqdm", "model", "model.parameters", "range", "gpt.mlls.ExactMarginalLogLikelihood.", "torch.optim.Adam.zero_grad", "model", "loss.backward", "torch.optim.Adam.step", "experiment_fns.update_iterator_print", "experiment_fns.reset_rff_weights", "gpt.mlls.ExactMarginalLogLikelihood.", "loss.item", "likelihood.noise.item", "model.covar_module.base_kernel.lengthscale.item", "model.covar_module.outputscale.item"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.train", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg._inv_quad_log_det.InvQuadLogDet.backward", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.update_iterator_print", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.reset_rff_weights"], ["", "def", "train", "(", "model", ",", "likelihood", ",", "name", "=", "\"\"", ",", "total_iters", "=", "500", ")", ":", "\n", "    ", "train_x", ",", "train_y", "=", "model", ".", "train_inputs", "[", "0", "]", ",", "model", ".", "train_targets", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "0.05", ")", "\n", "mll", "=", "gpt", ".", "mlls", ".", "ExactMarginalLogLikelihood", "(", "likelihood", ",", "model", ")", "\n", "model", ".", "train", "(", ")", "\n", "iterator", "=", "tqdm", "(", "range", "(", "total_iters", ")", ",", "desc", "=", "f\"{name} Training\"", ")", "\n", "output", "=", "model", "(", "train_x", ")", "\n", "loss", "=", "-", "mll", "(", "output", ",", "train_y", ")", "\n", "\n", "for", "_", "in", "iterator", ":", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "train_x", ")", "\n", "loss", "=", "-", "mll", "(", "output", ",", "train_y", ")", "\n", "# if hasattr(model, \"dist_obj\"):", "\n", "#     loss = add_rr_weigths_to_loss(loss, model)", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "update_iterator_print", "(", "\n", "iterator", ",", "\n", "loss", ".", "item", "(", ")", ",", "\n", "noise", "=", "likelihood", ".", "noise", ".", "item", "(", ")", ",", "\n", "ls", "=", "model", ".", "covar_module", ".", "base_kernel", ".", "lengthscale", ".", "item", "(", ")", ",", "\n", "os", "=", "model", ".", "covar_module", ".", "outputscale", ".", "item", "(", ")", ",", "\n", ")", "\n", "reset_rff_weights", "(", "model", ")", "\n", "\n", "", "return", "mll", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.update_iterator_print": [[349, 351], ["iterator.set_postfix"], "function", ["None"], ["", "def", "update_iterator_print", "(", "iterator", ",", "loss", ",", "ls", ",", "os", ",", "noise", ")", ":", "\n", "    ", "iterator", ".", "set_postfix", "(", "loss", "=", "loss", ",", "ls", "=", "ls", ",", "os", "=", "os", ",", "noise", "=", "noise", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.reset_rff_weights": [[353, 356], ["hasattr", "model.covar_module.base_kernel.randn_weights.normal_"], "function", ["None"], ["", "def", "reset_rff_weights", "(", "model", ")", ":", "\n", "    ", "if", "hasattr", "(", "model", ".", "covar_module", ".", "base_kernel", ",", "\"randn_weights\"", ")", ":", "\n", "        ", "model", ".", "covar_module", ".", "base_kernel", ".", "randn_weights", ".", "normal_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.get_hypers": [[358, 371], ["model.likelihood.noise_covar.noise.cpu().item", "model.covar_module.outputscale.cpu().item", "model.covar_module.base_kernel.lengthscale.detach().cpu().numpy", "range", "model.covar_module.base_kernel.lengthscale.detach().cpu().numpy.item", "model.likelihood.noise_covar.noise.cpu", "model.covar_module.outputscale.cpu", "model.covar_module.base_kernel.lengthscale.detach().cpu", "str", "model.covar_module.base_kernel.lengthscale.detach"], "function", ["None"], ["", "", "def", "get_hypers", "(", "model", ")", ":", "\n", "    ", "hypers", "=", "{", "}", "\n", "hypers", "[", "\"noise_scale\"", "]", "=", "model", ".", "likelihood", ".", "noise_covar", ".", "noise", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "hypers", "[", "\"output_scale\"", "]", "=", "model", ".", "covar_module", ".", "outputscale", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "ls", "=", "model", ".", "covar_module", ".", "base_kernel", ".", "lengthscale", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "is_using_ard", "=", "ls", ".", "shape", "[", "1", "]", ">", "1", "\n", "if", "is_using_ard", ":", "\n", "        ", "for", "i", "in", "range", "(", "ls", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "key", "=", "\"ls_\"", "+", "str", "(", "i", ")", "\n", "hypers", "[", "key", "]", "=", "ls", "[", "0", ",", "i", "]", "\n", "", "", "else", ":", "\n", "        ", "hypers", "[", "\"ls\"", "]", "=", "ls", ".", "item", "(", ")", "\n", "", "return", "hypers", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.build_RFF_model": [[373, 380], ["gpytorch.likelihoods.GaussianLikelihood", "experiment_fns.GPRegressionModelRFF", "experiment_fns.set_hypers", "gpt.likelihoods.GaussianLikelihood.cuda", "GPRegressionModelRFF.cuda"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.set_hypers"], ["", "def", "build_RFF_model", "(", "hypers", ",", "num_rff_samples", ",", "train_ds", ",", "use_cuda", ")", ":", "\n", "    ", "likelihood", "=", "gpt", ".", "likelihoods", ".", "GaussianLikelihood", "(", ")", "\n", "likelihood", "=", "likelihood", ".", "cuda", "(", ")", "if", "use_cuda", "else", "likelihood", "\n", "RFF_model", "=", "GPRegressionModelRFF", "(", "*", "train_ds", ",", "likelihood", ",", "num_rff_samples", ")", "\n", "RFF_model", "=", "RFF_model", ".", "cuda", "(", ")", "if", "use_cuda", "else", "RFF_model", "\n", "set_hypers", "(", "RFF_model", ",", "hypers", "[", "\"noise_scale\"", "]", ",", "hypers", "[", "\"ls\"", "]", ",", "hypers", "[", "\"output_scale\"", "]", ")", "\n", "return", "RFF_model", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.build_RR_RFF_model": [[382, 392], ["gpytorch.likelihoods.GaussianLikelihood", "experiment_fns.GPRegressionModel_RR_RFF", "gpt.likelihoods.GaussianLikelihood.cuda", "GPRegressionModel_RR_RFF.cuda", "experiment_fns.set_hypers"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.set_hypers"], ["", "def", "build_RR_RFF_model", "(", "train_ds", ",", "dist_obj", ",", "single_sample", ",", "hypers", ",", "use_cuda", ")", ":", "\n", "    ", "likelihood", "=", "gpt", ".", "likelihoods", ".", "GaussianLikelihood", "(", ")", "\n", "likelihood", "=", "likelihood", ".", "cuda", "(", ")", "if", "use_cuda", "else", "likelihood", "\n", "model", "=", "GPRegressionModel_RR_RFF", "(", "\n", "train_ds", "[", "0", "]", ",", "train_ds", "[", "1", "]", ",", "likelihood", ",", "dist_obj", ",", "single_sample", "\n", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "if", "use_cuda", "else", "model", "\n", "if", "hypers", "is", "not", "None", ":", "\n", "        ", "set_hypers", "(", "model", ",", "hypers", "[", "\"noise_scale\"", "]", ",", "hypers", "[", "\"ls\"", "]", ",", "hypers", "[", "\"output_scale\"", "]", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.randomly_sample_hypers": [[434, 443], ["torch.exp", "torch.normal", "torch.exp", "torch.exp", "torch.ones_like", "torch.normal", "torch.normal", "torch.ones_like"], "function", ["None"], ["", "", "def", "randomly_sample_hypers", "(", "total_rounds", ",", "case", "=", "\"all\"", ",", "std", "=", "0.1", ")", ":", "\n", "    ", "ls", "=", "torch", ".", "exp", "(", "torch", ".", "normal", "(", "mean", "=", "0.0", ",", "std", "=", "std", ",", "size", "=", "(", "total_rounds", ",", ")", ")", ")", "\n", "if", "case", "==", "\"all\"", ":", "\n", "        ", "noise_scale", "=", "torch", ".", "exp", "(", "torch", ".", "normal", "(", "mean", "=", "0.0", ",", "std", "=", "std", ",", "size", "=", "(", "total_rounds", ",", ")", ")", ")", "\n", "output_scale", "=", "torch", ".", "exp", "(", "torch", ".", "normal", "(", "mean", "=", "0.0", ",", "std", "=", "std", ",", "size", "=", "(", "total_rounds", ",", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "noise_scale", "=", "0.01", "*", "torch", ".", "ones_like", "(", "ls", ")", "\n", "output_scale", "=", "torch", ".", "ones_like", "(", "ls", ")", "\n", "", "return", "noise_scale", ",", "ls", ",", "output_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.set_seed": [[445, 449], ["torch.manual_seed", "torch.cuda.is_available", "torch.cuda.manual_seed_all"], "function", ["None"], ["", "def", "set_seed", "(", "seed", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.prepare_ax": [[451, 465], ["axs.axhline", "axs.set_title", "axs.set_xlabel", "axs.set_ylabel", "axs.vlines", "axs.plot", "axs.set_ylim", "axs.set_xticks", "axs.set_xticklabels", "numpy.median", "numpy.std", "numpy.arange", "numpy.arange", "len", "len"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.dist_of_iterations_for_rrcg.RRDist.std"], ["", "", "def", "prepare_ax", "(", "v", ",", "div", ",", "axs", ",", "desc", ",", "ylims", ")", ":", "\n", "    ", "axs", ".", "axhline", "(", "y", "=", "0.0", ",", "linestyle", "=", "\"dashed\"", ",", "color", "=", "\"black\"", ")", "\n", "axs", ".", "set_title", "(", "desc", "[", "\"title\"", "]", ")", "\n", "axs", ".", "set_xlabel", "(", "desc", "[", "\"xlabel\"", "]", ",", "fontsize", "=", "14", ")", "\n", "axs", ".", "set_ylabel", "(", "desc", "[", "\"ylabel\"", "]", ",", "fontsize", "=", "16", ")", "\n", "# axs.plot(v, div.T, '--o', color='gray')", "\n", "# axs.plot(v, np.median(div, axis=0), '-o', color='red')", "\n", "median", ",", "std", "=", "np", ".", "median", "(", "div", ",", "axis", "=", "0", ")", ",", "np", ".", "std", "(", "div", ",", "axis", "=", "0", ")", "\n", "axs", ".", "vlines", "(", "v", ",", "ymin", "=", "median", "-", "std", ",", "ymax", "=", "median", "+", "std", ",", "color", "=", "\"gray\"", ")", "\n", "axs", ".", "plot", "(", "v", ",", "median", ",", "\"-o\"", ",", "color", "=", "\"red\"", ")", "\n", "axs", ".", "set_ylim", "(", "ylims", ")", "\n", "axs", ".", "set_xticks", "(", "v", "[", "np", ".", "arange", "(", "0", ",", "len", "(", "v", ")", ",", "2", ")", "]", ")", "\n", "axs", ".", "set_xticklabels", "(", "v", "[", "np", ".", "arange", "(", "0", ",", "len", "(", "v", ")", ",", "2", ")", "]", ",", "rotation", "=", "60", ")", "\n", "return", "axs", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.get_lower_upper_via_quantiles": [[467, 475], ["numpy.min", "min", "numpy.max", "max", "numpy.quantile", "numpy.quantile", "numpy.logical_not", "numpy.logical_not", "numpy.isnan", "numpy.isinf"], "function", ["None"], ["", "def", "get_lower_upper_via_quantiles", "(", "v", ",", "q_min", "=", "0.20", ",", "q_max", "=", "0.80", ")", ":", "\n", "    ", "v", "=", "v", "[", "np", ".", "logical_not", "(", "np", ".", "isnan", "(", "v", ")", ")", "]", "\n", "v", "=", "v", "[", "np", ".", "logical_not", "(", "np", ".", "isinf", "(", "v", ")", ")", "]", "\n", "lower", "=", "np", ".", "min", "(", "np", ".", "quantile", "(", "v", ",", "q", "=", "q_min", ",", "axis", "=", "0", ")", ")", "\n", "lower", "=", "min", "(", "-", "0.01", ",", "lower", ")", "\n", "upper", "=", "np", ".", "max", "(", "np", ".", "quantile", "(", "v", ",", "q", "=", "q_max", ",", "axis", "=", "0", ")", ")", "\n", "upper", "=", "max", "(", "0.01", ",", "upper", ")", "\n", "return", "lower", ",", "upper", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.recover_cholesky": [[503, 519], ["torch.cuda.is_available", "gpytorch.likelihoods.GaussianLikelihood", "experiment_fns.GPRegressionModel", "experiment_fns.set_hypers", "experiment_fns.print_initial_hypers", "GPRegressionModel.covar_module.base_kernel.lengthscale.item", "print", "gpt.likelihoods.GaussianLikelihood.cuda", "GPRegressionModel.cuda", "gpytorch.settings.max_cholesky_size", "experiment_fns.train", "int"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.set_hypers", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.print_initial_hypers", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.train"], ["", "", "", "def", "recover_cholesky", "(", "hyperparams", ",", "train_ds", ",", "total_iters", "=", "500", ")", ":", "\n", "    ", "use_cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "likelihood", "=", "gpt", ".", "likelihoods", ".", "GaussianLikelihood", "(", ")", "\n", "model", "=", "GPRegressionModel", "(", "*", "train_ds", ",", "likelihood", ")", "\n", "set_hypers", "(", "model", ",", "*", "hyperparams", ")", "\n", "likelihood", "=", "likelihood", ".", "cuda", "(", ")", "if", "use_cuda", "else", "likelihood", "\n", "model", "=", "model", ".", "cuda", "(", ")", "if", "use_cuda", "else", "model", "\n", "print_initial_hypers", "(", "model", ")", "\n", "\n", "with", "gpt", ".", "settings", ".", "max_cholesky_size", "(", "int", "(", "1.0e7", ")", ")", ":", "\n", "        ", "inv_quad", ",", "logdet", "=", "train", "(", "\n", "model", ",", "likelihood", ",", "name", "=", "\"Cholesky\"", ",", "total_iters", "=", "total_iters", "\n", ")", "\n", "", "ls", "=", "model", ".", "covar_module", ".", "base_kernel", ".", "lengthscale", ".", "item", "(", ")", "\n", "print", "(", "f\"Post training lengthscale = {ls:2.2f}\"", ")", "\n", "return", "model", ",", "ls", ",", "inv_quad", ",", "logdet", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.recover_rff": [[521, 535], ["torch.cuda.is_available", "gpytorch.likelihoods.GaussianLikelihood", "experiment_fns.GPRegressionModelRFF", "experiment_fns.set_hypers", "experiment_fns.print_initial_hypers", "GPRegressionModelRFF.covar_module.base_kernel.lengthscale.item", "print", "gpt.likelihoods.GaussianLikelihood.cuda", "GPRegressionModelRFF.cuda", "gpytorch.settings.max_cholesky_size", "experiment_fns.train", "int"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.set_hypers", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.print_initial_hypers", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.train"], ["", "def", "recover_rff", "(", "num_rff_samples", ",", "hyperparams", ",", "train_ds", ",", "total_iters", "=", "500", ")", ":", "\n", "    ", "use_cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "likelihood", "=", "gpt", ".", "likelihoods", ".", "GaussianLikelihood", "(", ")", "\n", "model", "=", "GPRegressionModelRFF", "(", "*", "train_ds", ",", "likelihood", ",", "num_rff_samples", ")", "\n", "likelihood", "=", "likelihood", ".", "cuda", "(", ")", "if", "use_cuda", "else", "likelihood", "\n", "model", "=", "model", ".", "cuda", "(", ")", "if", "use_cuda", "else", "model", "\n", "set_hypers", "(", "model", ",", "*", "hyperparams", ")", "\n", "print_initial_hypers", "(", "model", ")", "\n", "\n", "with", "gpt", ".", "settings", ".", "max_cholesky_size", "(", "int", "(", "1.0e7", ")", ")", ":", "\n", "        ", "loss", "=", "train", "(", "model", ",", "likelihood", ",", "name", "=", "\"RFFs\"", ",", "total_iters", "=", "total_iters", ")", "\n", "", "ls", "=", "model", ".", "covar_module", ".", "base_kernel", ".", "lengthscale", ".", "item", "(", ")", "\n", "print", "(", "f\"Post training lengthscale = {ls:2.2f}\"", ")", "\n", "return", "model", ",", "ls", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.recover_cg": [[537, 549], ["gpytorch.likelihoods.GaussianLikelihood", "experiment_fns.GPRegressionModel", "experiment_fns.set_hypers", "experiment_fns.print_initial_hypers", "experiment_fns.train_cg", "GPRegressionModel.covar_module.base_kernel.lengthscale.item", "print"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.set_hypers", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.print_initial_hypers", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.train_cg"], ["", "def", "recover_cg", "(", "cg_iters", ",", "hyperparams", ",", "train_ds", ",", "total_iters", "=", "500", ")", ":", "\n", "    ", "likelihood", "=", "gpt", ".", "likelihoods", ".", "GaussianLikelihood", "(", ")", "\n", "model", "=", "GPRegressionModel", "(", "*", "train_ds", ",", "likelihood", ")", "\n", "set_hypers", "(", "model", ",", "*", "hyperparams", ")", "\n", "print_initial_hypers", "(", "model", ")", "\n", "\n", "# inv_quad, logdet = train_cg(model, likelihood, cg_iters, total_iters)", "\n", "loss", "=", "train_cg", "(", "model", ",", "likelihood", ",", "cg_iters", ",", "total_iters", ")", "\n", "ls", "=", "model", ".", "covar_module", ".", "base_kernel", ".", "lengthscale", ".", "item", "(", ")", "\n", "print", "(", "f\"Post training lengthscale = {ls:2.2f}\"", ")", "\n", "# return model, ls, inv_quad, logdet", "\n", "return", "model", ",", "ls", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.print_initial_hypers": [[551, 566], ["model.likelihood.noise_covar.noise.item", "model.covar_module.outputscale.item", "model.covar_module.base_kernel.lengthscale.item", "print", "print"], "function", ["None"], ["", "def", "print_initial_hypers", "(", "model", ",", "print_ls_flag", "=", "True", ")", ":", "\n", "    ", "noise_scale", "=", "model", ".", "likelihood", ".", "noise_covar", ".", "noise", ".", "item", "(", ")", "\n", "output_scale", "=", "model", ".", "covar_module", ".", "outputscale", ".", "item", "(", ")", "\n", "\n", "if", "print_ls_flag", ":", "\n", "        ", "ls", "=", "model", ".", "covar_module", ".", "base_kernel", ".", "lengthscale", ".", "item", "(", ")", "\n", "print", "(", "\n", "f\"Pre training: noise scale {noise_scale: 4.4f} | \"", "\n", "+", "f\"lengthscale {ls:4.4f} | \"", "\n", "+", "f\"output scale {output_scale:4.4f}\"", "\n", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\n", "f\"Pre training: noise scale {noise_scale: 4.4f} | \"", "\n", "+", "f\"output scale {output_scale:4.4f}\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.set_hypers": [[569, 576], ["model.initialize"], "function", ["None"], ["", "", "def", "set_hypers", "(", "model", ",", "noise_scale", ",", "ls", ",", "output_scale", ")", ":", "\n", "    ", "hypers", "=", "{", "\n", "\"likelihood.noise_covar.noise\"", ":", "noise_scale", ",", "\n", "\"covar_module.base_kernel.lengthscale\"", ":", "ls", ",", "\n", "\"covar_module.outputscale\"", ":", "output_scale", ",", "\n", "}", "\n", "model", ".", "initialize", "(", "**", "hypers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.plot_results": [[578, 594], ["matplotlib.pyplot.subplots", "model.eval", "torch.no_grad", "gpytorch.settings.fast_pred_var", "likelihood", "likelihood.confidence_region", "ax.plot", "ax.plot", "ax.fill_between", "ax.legend", "ax.set", "model", "train_x.numpy", "train_y.numpy", "test_x.numpy", "mean.numpy", "test_x.numpy", "lower.numpy", "upper.numpy"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.MultivariateNormal.confidence_region"], ["", "def", "plot_results", "(", "model", ",", "likelihood", ",", "test_x", ")", ":", "\n", "    ", "train_x", ",", "train_y", "=", "model", ".", "train_inputs", "[", "0", "]", ",", "model", ".", "train_targets", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "1", ",", "figsize", "=", "(", "8", ",", "3", ")", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ",", "gpt", ".", "settings", ".", "fast_pred_var", "(", ")", ":", "\n", "        ", "prediction", "=", "likelihood", "(", "model", "(", "test_x", ")", ")", "\n", "mean", "=", "prediction", ".", "mean", "\n", "lower", ",", "upper", "=", "prediction", ".", "confidence_region", "(", ")", "\n", "ax", ".", "plot", "(", "train_x", ".", "numpy", "(", ")", ",", "train_y", ".", "numpy", "(", ")", ",", "\"k*\"", ",", "label", "=", "\"Training Data\"", ")", "\n", "ax", ".", "plot", "(", "test_x", ".", "numpy", "(", ")", ",", "mean", ".", "numpy", "(", ")", ",", "\"b\"", ",", "label", "=", "\"Prediction\"", ")", "\n", "ax", ".", "fill_between", "(", "test_x", ".", "numpy", "(", ")", ",", "lower", ".", "numpy", "(", ")", ",", "upper", ".", "numpy", "(", ")", ",", "alpha", "=", "0.5", ")", "\n", "ax", ".", "legend", "(", "[", "\"Observed Data\"", ",", "\"Mean\"", ",", "\"Confidence\"", "]", ")", "\n", "ax", ".", "set", "(", "xlabel", "=", "\"x\"", ",", "ylabel", "=", "\"y\"", ",", "ylim", "=", "(", "-", "6.0", ",", "6.0", ")", ")", "\n", "\n", "", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.train_cg": [[596, 610], ["gpytorch.settings.max_cholesky_size", "warnings.simplefilter", "gpytorch.settings.max_cg_iterations", "gpytorch.settings.max_lanczos_quadrature_iterations", "gpytorch.settings.cg_tolerance", "gpytorch.settings.max_preconditioner_size", "experiment_fns.train"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.train"], ["", "def", "train_cg", "(", "model", ",", "likelihood", ",", "num_cg", ",", "total_iters", ")", ":", "\n", "    ", "with", "gpt", ".", "settings", ".", "max_cholesky_size", "(", "0", ")", ":", "\n", "        ", "warnings", ".", "simplefilter", "(", "\"ignore\"", ",", "gpt", ".", "utils", ".", "warnings", ".", "NumericalWarning", ")", "\n", "with", "gpt", ".", "settings", ".", "max_cg_iterations", "(", "num_cg", ")", ":", "\n", "            ", "with", "gpt", ".", "settings", ".", "max_lanczos_quadrature_iterations", "(", "num_cg", ")", ":", "\n", "                ", "with", "gpt", ".", "settings", ".", "cg_tolerance", "(", "1e-50", ")", ":", "\n", "                    ", "with", "gpt", ".", "settings", ".", "max_preconditioner_size", "(", "0", ")", ":", "\n", "# inv_quad, logdet = train(model, likelihood, name=\"CG\",", "\n", "#                          total_iters=total_iters)", "\n", "                        ", "loss", "=", "train", "(", "\n", "model", ",", "likelihood", ",", "name", "=", "\"CG\"", ",", "total_iters", "=", "total_iters", "\n", ")", "\n", "# return inv_quad, logdet", "\n", "", "", "", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.compute_recovered_vs_true_matrix": [[646, 650], ["numpy.tile", "true.reshape"], "function", ["None"], ["", "", "", "def", "compute_recovered_vs_true_matrix", "(", "recovered", ",", "true", ")", ":", "\n", "    ", "ls_mat_rff", "=", "np", ".", "tile", "(", "true", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "(", "1", ",", "recovered", ".", "shape", "[", "1", "]", ")", ")", "\n", "div_matrix", "=", "recovered", "/", "ls_mat_rff", "\n", "return", "div_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.get_rff_samples": [[652, 668], ["numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.concatenate", "numpy.array", "numpy.arange", "numpy.arange"], "function", ["None"], ["", "def", "get_rff_samples", "(", "case", ")", ":", "\n", "    ", "if", "case", "==", "\"empty\"", ":", "\n", "        ", "rff_samples", "=", "np", ".", "arange", "(", "start", "=", "1", ",", "stop", "=", "1", ")", "\n", "", "elif", "case", "==", "\"1\"", ":", "\n", "        ", "rff_samples", "=", "np", ".", "arange", "(", "start", "=", "1", ",", "stop", "=", "1", ",", "step", "=", "1", ")", "\n", "", "elif", "case", "==", "\"2\"", ":", "\n", "        ", "rff_samples", "=", "np", ".", "arange", "(", "start", "=", "100", ",", "stop", "=", "1600", ",", "step", "=", "100", ")", "\n", "", "elif", "case", "==", "\"3\"", ":", "\n", "        ", "rff_samples", "=", "np", ".", "arange", "(", "start", "=", "1", ",", "stop", "=", "100", "+", "1", ",", "step", "=", "5", ")", "\n", "", "elif", "case", "==", "\"4\"", ":", "\n", "        ", "rff_samples", "=", "np", ".", "concatenate", "(", "\n", "(", "np", ".", "array", "(", "[", "10", ",", "50", "]", ")", ",", "np", ".", "arange", "(", "100", ",", "1000", ",", "100", ")", ",", "np", ".", "arange", "(", "1000", ",", "3000", ",", "250", ")", ")", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "return", "rff_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.get_cg_iters": [[670, 682], ["numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange"], "function", ["None"], ["", "def", "get_cg_iters", "(", "case", ")", ":", "\n", "    ", "if", "case", "==", "\"empty\"", ":", "\n", "        ", "cg_iters", "=", "np", ".", "arange", "(", "start", "=", "1", ",", "stop", "=", "1", ")", "\n", "", "elif", "case", "==", "\"1\"", ":", "\n", "        ", "cg_iters", "=", "np", ".", "arange", "(", "start", "=", "10", ",", "stop", "=", "20", ",", "step", "=", "2", ")", "\n", "", "elif", "case", "==", "\"2\"", ":", "\n", "        ", "cg_iters", "=", "np", ".", "arange", "(", "start", "=", "5", ",", "stop", "=", "20", ",", "step", "=", "1", ")", "\n", "", "elif", "case", "==", "\"3\"", ":", "\n", "        ", "cg_iters", "=", "np", ".", "arange", "(", "start", "=", "1", ",", "stop", "=", "20", ",", "step", "=", "1", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "return", "cg_iters", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.sample_from_prior": [[684, 688], ["likelihood.sample", "gpytorch.settings.prior_mode", "likelihood", "model"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.MultivariateNormal.sample"], ["", "def", "sample_from_prior", "(", "model", ",", "likelihood", ",", "train_x", ")", ":", "\n", "    ", "with", "gpt", ".", "settings", ".", "prior_mode", "(", "True", ")", ":", "\n", "        ", "prior_preds", "=", "likelihood", "(", "model", "(", "train_x", ")", ")", "\n", "", "return", "prior_preds", ".", "sample", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.get_string_time_taken": [[690, 694], ["round"], "function", ["None"], ["", "def", "get_string_time_taken", "(", "tic", ",", "toc", ",", "experiment_name", "=", "\"Experiment\"", ")", ":", "\n", "    ", "minutes", "=", "round", "(", "(", "toc", "-", "tic", ")", "/", "60", ")", "\n", "seconds", "=", "(", "toc", "-", "tic", ")", "-", "minutes", "*", "60", "\n", "return", "f'{experiment_name} took: {minutes:4d} min and {seconds:4.2f} sec'", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.load_results": [[696, 700], ["open", "pickle.load"], "function", ["None"], ["", "def", "load_results", "(", "input_file", ")", ":", "\n", "    ", "with", "open", "(", "input_file", ",", "mode", "=", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "results", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.save_results": [[702, 705], ["open", "pickle.dump"], "function", ["None"], ["", "def", "save_results", "(", "results", ",", "output_file", ")", ":", "\n", "    ", "with", "open", "(", "file", "=", "output_file", ",", "mode", "=", "\"wb\"", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "obj", "=", "results", ",", "file", "=", "f", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.rr_rff.RFFKernel.__init__": [[15, 20], ["gpytorch.kernels.kernel.Kernel.__init__", "rr_rff.RFFKernel._init_weights"], "methods", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.baselines.run_svgp.SVGPModel.__init__", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.rr_rff.RR_RFF_Kernel._init_weights"], ["def", "__init__", "(", "self", ",", "num_samples", ":", "int", ",", "num_dims", ":", "Optional", "[", "int", "]", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "num_samples", "=", "num_samples", "\n", "if", "num_dims", "is", "not", "None", ":", "\n", "            ", "self", ".", "_init_weights", "(", "num_dims", ",", "num_samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.rr_rff.RFFKernel._init_weights": [[21, 35], ["rr_rff.RFFKernel.register_buffer", "torch.Size", "torch.randn"], "methods", ["None"], ["", "", "def", "_init_weights", "(", "\n", "self", ",", "num_dims", ":", "Optional", "[", "int", "]", "=", "None", ",", "num_samples", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "randn_weights", ":", "Optional", "[", "Tensor", "]", "=", "None", "\n", ")", ":", "\n", "        ", "if", "num_dims", "is", "not", "None", "and", "num_samples", "is", "not", "None", ":", "\n", "            ", "d", "=", "num_dims", "\n", "D", "=", "num_samples", "\n", "", "if", "randn_weights", "is", "None", ":", "\n", "            ", "randn_shape", "=", "torch", ".", "Size", "(", "[", "*", "self", ".", "_batch_shape", ",", "d", ",", "D", "]", ")", "\n", "randn_weights", "=", "torch", ".", "randn", "(", "\n", "randn_shape", ",", "dtype", "=", "self", ".", "raw_lengthscale", ".", "dtype", ",", "\n", "device", "=", "self", ".", "raw_lengthscale", ".", "device", "\n", ")", "\n", "", "self", ".", "register_buffer", "(", "\"randn_weights\"", ",", "randn_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.rr_rff.RFFKernel.forward": [[36, 57], ["x1.transpose().unsqueeze.transpose().unsqueeze.size", "torch.equal", "rr_rff.RFFKernel._featurize", "float", "x1.transpose().unsqueeze.transpose().unsqueeze.transpose().unsqueeze", "x2.transpose().unsqueeze.transpose().unsqueeze.transpose().unsqueeze", "hasattr", "rr_rff.RFFKernel._init_weights", "rr_rff.RFFKernel._featurize", "gpytorch.lazy.RootLazyTensor", "gpytorch.lazy.MatmulLazyTensor", "rr_rff.RFFKernel.transpose", "x1.transpose().unsqueeze.transpose().unsqueeze.transpose", "x2.transpose().unsqueeze.transpose().unsqueeze.transpose", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.rr_rff.RR_RFF_Kernel._featurize", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.rr_rff.RR_RFF_Kernel._init_weights", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.rr_rff.RR_RFF_Kernel._featurize"], ["", "def", "forward", "(", "self", ",", "x1", ":", "Tensor", ",", "x2", ":", "Tensor", ",", "diag", ":", "bool", "=", "False", ",", "\n", "last_dim_is_batch", ":", "bool", "=", "False", ",", "**", "kwargs", ")", "->", "Tensor", ":", "\n", "        ", "if", "last_dim_is_batch", ":", "\n", "            ", "x1", "=", "x1", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "x2", "=", "x2", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "", "num_dims", "=", "x1", ".", "size", "(", "-", "1", ")", "\n", "if", "not", "hasattr", "(", "self", ",", "\"randn_weights\"", ")", ":", "\n", "            ", "self", ".", "_init_weights", "(", "num_dims", ",", "self", ".", "num_samples", ")", "\n", "", "x1_eq_x2", "=", "torch", ".", "equal", "(", "x1", ",", "x2", ")", "\n", "z1", "=", "self", ".", "_featurize", "(", "x1", ",", "normalize", "=", "False", ")", "\n", "if", "not", "x1_eq_x2", ":", "\n", "            ", "z2", "=", "self", ".", "_featurize", "(", "x2", ",", "normalize", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "z2", "=", "z1", "\n", "", "D", "=", "float", "(", "self", ".", "num_samples", ")", "\n", "if", "diag", ":", "\n", "            ", "return", "(", "z1", "*", "z2", ")", ".", "sum", "(", "-", "1", ")", "/", "D", "\n", "", "if", "x1_eq_x2", ":", "\n", "            ", "return", "RootLazyTensor", "(", "z1", "/", "math", ".", "sqrt", "(", "D", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "MatmulLazyTensor", "(", "z1", "/", "D", ",", "z2", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.rr_rff.RFFKernel._featurize": [[58, 67], ["x.matmul.matmul.matmul", "torch.cat", "rr_rff.RFFKernel.lengthscale.transpose", "torch.cos", "torch.sin", "math.sqrt"], "methods", ["None"], ["", "", "def", "_featurize", "(", "self", ",", "x", ":", "Tensor", ",", "normalize", ":", "bool", "=", "False", ")", "->", "Tensor", ":", "\n", "# Recompute division each time to allow backprop through lengthscale", "\n", "# Transpose lengthscale to allow for ARD", "\n", "        ", "x", "=", "x", ".", "matmul", "(", "self", ".", "randn_weights", "/", "self", ".", "lengthscale", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "z", "=", "torch", ".", "cat", "(", "[", "torch", ".", "cos", "(", "x", ")", ",", "torch", ".", "sin", "(", "x", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "if", "normalize", ":", "\n", "            ", "D", "=", "self", ".", "num_samples", "\n", "z", "=", "z", "/", "math", ".", "sqrt", "(", "D", ")", "\n", "", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.rr_rff.RFFKernel.prediction_strategy": [[68, 73], ["gpytorch.models.exact_prediction_strategies.RFFPredictionStrategy"], "methods", ["None"], ["", "def", "prediction_strategy", "(", "self", ",", "train_inputs", ",", "train_prior_dist", ",", "\n", "train_labels", ",", "likelihood", ")", ":", "\n", "# Allow for fast sampling", "\n", "        ", "return", "RFFPredictionStrategy", "(", "\n", "train_inputs", ",", "train_prior_dist", ",", "train_labels", ",", "likelihood", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.rr_rff.RR_RFF_Kernel.__init__": [[142, 151], ["gpytorch.kernels.kernel.Kernel.__init__", "rr_rff.RR_RFF_Kernel._init_weights"], "methods", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.baselines.run_svgp.SVGPModel.__init__", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.rr_rff.RR_RFF_Kernel._init_weights"], ["def", "__init__", "(", "self", ",", "single_sample", ":", "bool", "=", "False", ",", "\n", "min_val", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "num_dims", ":", "Optional", "[", "int", "]", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "min_val", "=", "min_val", "\n", "self", ".", "num_samples", "=", "None", "\n", "self", ".", "single_sample", "=", "single_sample", "\n", "if", "num_dims", "is", "not", "None", ":", "\n", "            ", "self", ".", "_init_weights", "(", "num_dims", ",", "self", ".", "num_samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.rr_rff.RR_RFF_Kernel._init_weights": [[152, 163], ["rr_rff.RR_RFF_Kernel.register_buffer", "torch.Size", "torch.randn"], "methods", ["None"], ["", "", "def", "_init_weights", "(", "self", ",", "num_dims", ":", "Optional", "[", "int", "]", "=", "None", ",", "num_samples", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "randn_weights", ":", "Optional", "[", "Tensor", "]", "=", "None", ")", ":", "\n", "        ", "if", "num_dims", "is", "not", "None", "and", "num_samples", "is", "not", "None", ":", "\n", "            ", "d", "=", "num_dims", "\n", "D", "=", "num_samples", "\n", "", "if", "randn_weights", "is", "None", ":", "\n", "            ", "randn_shape", "=", "torch", ".", "Size", "(", "[", "*", "self", ".", "_batch_shape", ",", "3", ",", "d", ",", "D", "]", ")", "\n", "randn_weights", "=", "torch", ".", "randn", "(", "randn_shape", ",", "\n", "dtype", "=", "self", ".", "raw_lengthscale", ".", "dtype", ",", "\n", "device", "=", "self", ".", "raw_lengthscale", ".", "device", ")", "\n", "", "self", ".", "register_buffer", "(", "\"randn_weights\"", ",", "randn_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.rr_rff.RR_RFF_Kernel.forward": [[164, 188], ["x1.transpose().unsqueeze.transpose().unsqueeze.size", "rr_rff.RR_RFF_Kernel._init_weights", "torch.equal", "rr_rff.RR_RFF_Kernel._featurize", "rr_rff.RR_RFF_Kernel.expand_z", "float", "x1.transpose().unsqueeze.transpose().unsqueeze.transpose().unsqueeze", "x2.transpose().unsqueeze.transpose().unsqueeze.transpose().unsqueeze", "rr_rff.RR_RFF_Kernel._featurize", "gpytorch.lazy.LowRankRootLazyTensor", "print", "gpytorch.lazy.MatmulLazyTensor", "rr_rff.RR_RFF_Kernel.transpose", "x1.transpose().unsqueeze.transpose().unsqueeze.transpose", "x2.transpose().unsqueeze.transpose().unsqueeze.transpose"], "methods", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.rr_rff.RR_RFF_Kernel._init_weights", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.rr_rff.RR_RFF_Kernel._featurize", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.rr_rff.RR_RFF_Kernel.expand_z", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.rr_rff.RR_RFF_Kernel._featurize"], ["", "def", "forward", "(", "self", ",", "x1", ":", "Tensor", ",", "x2", ":", "Tensor", ",", "\n", "diag", ":", "bool", "=", "False", ",", "\n", "last_dim_is_batch", ":", "bool", "=", "False", ",", "\n", "**", "kwargs", ")", "->", "Tensor", ":", "\n", "        ", "if", "last_dim_is_batch", ":", "\n", "            ", "x1", "=", "x1", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "x2", "=", "x2", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "", "num_dims", "=", "x1", ".", "size", "(", "-", "1", ")", "\n", "self", ".", "_init_weights", "(", "num_dims", ",", "self", ".", "num_samples", ")", "\n", "x1_eq_x2", "=", "torch", ".", "equal", "(", "x1", ",", "x2", ")", "\n", "z1", "=", "self", ".", "_featurize", "(", "x1", ",", "normalize", "=", "False", ")", "\n", "z1", "=", "self", ".", "expand_z", "(", "z1", ")", "\n", "if", "not", "x1_eq_x2", ":", "\n", "            ", "z2", "=", "self", ".", "_featurize", "(", "x2", ",", "normalize", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "z2", "=", "z1", "\n", "", "D", "=", "float", "(", "self", ".", "num_samples", ")", "\n", "if", "diag", ":", "\n", "            ", "return", "(", "z1", "*", "z2", ")", ".", "sum", "(", "-", "1", ")", "/", "D", "\n", "", "if", "x1_eq_x2", ":", "\n", "            ", "return", "LowRankRootLazyTensor", "(", "z1", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Warning: x1!=x2 case is not supported for RR.'", ")", "\n", "return", "MatmulLazyTensor", "(", "z1", ",", "z2", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.rr_rff.RR_RFF_Kernel.expand_z": [[189, 210], ["int", "torch.ones", "torch.zeros", "torch.cat", "torch.sqrt", "torch.ones", "torch.zeros", "torch.cat", "torch.sqrt", "torch.ones", "torch.sqrt", "torch.cat", "torch.cat.unsqueeze", "torch.cat", "rr_rff.RR_RFF_Kernel.min_val.float", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "", "def", "expand_z", "(", "self", ",", "z_pre", ")", ":", "\n", "        ", "D", "=", "int", "(", "z_pre", ".", "shape", "[", "-", "1", "]", "/", "2", ")", "\n", "ones", "=", "torch", ".", "ones", "(", "1", ",", "self", ".", "min_val", ",", "dtype", "=", "z_pre", ".", "dtype", ",", "device", "=", "z_pre", ".", "device", ")", "\n", "zeros", "=", "torch", ".", "zeros", "(", "1", ",", "D", "-", "self", ".", "min_val", ",", "dtype", "=", "z_pre", ".", "dtype", ",", "device", "=", "z_pre", ".", "device", ")", "\n", "mask", "=", "torch", ".", "cat", "(", "[", "ones", ",", "zeros", "]", ",", "dim", "=", "1", ")", "\n", "mask", "/=", "torch", ".", "sqrt", "(", "self", ".", "min_val", ".", "float", "(", ")", ")", "\n", "\n", "ones", "=", "torch", ".", "ones", "(", "1", ",", "D", "-", "1", ",", "dtype", "=", "z_pre", ".", "dtype", ",", "device", "=", "z_pre", ".", "device", ")", "\n", "zeros", "=", "torch", ".", "zeros", "(", "1", ",", "1", ",", "dtype", "=", "z_pre", ".", "dtype", ",", "device", "=", "z_pre", ".", "device", ")", "\n", "aux", "=", "torch", ".", "cat", "(", "[", "ones", ",", "zeros", "]", ",", "dim", "=", "1", ")", "\n", "aux", "/=", "torch", ".", "sqrt", "(", "torch", ".", "tensor", "(", "D", "-", "1", ",", "dtype", "=", "z_pre", ".", "dtype", ",", "device", "=", "z_pre", ".", "device", ")", ")", "\n", "\n", "ones", "=", "torch", ".", "ones", "(", "1", ",", "D", ",", "dtype", "=", "z_pre", ".", "dtype", ",", "device", "=", "z_pre", ".", "device", ")", "\n", "ones", "/=", "torch", ".", "sqrt", "(", "torch", ".", "tensor", "(", "D", ",", "dtype", "=", "z_pre", ".", "dtype", ",", "device", "=", "z_pre", ".", "device", ")", ")", "\n", "mask", "=", "torch", ".", "cat", "(", "[", "mask", ",", "aux", ",", "ones", "]", ",", "dim", "=", "0", ")", "\n", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "-", "2", ")", "\n", "mask", "=", "torch", ".", "cat", "(", "[", "mask", ",", "mask", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "z_new", "=", "z_pre", "*", "mask", "\n", "return", "z_new", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.rr_rff.RR_RFF_Kernel._featurize": [[211, 220], ["x.matmul.matmul.matmul", "torch.cat", "rr_rff.RR_RFF_Kernel.lengthscale.transpose", "torch.cos", "torch.sin", "math.sqrt"], "methods", ["None"], ["", "def", "_featurize", "(", "self", ",", "x", ":", "Tensor", ",", "normalize", ":", "bool", "=", "False", ")", "->", "Tensor", ":", "\n", "# Recompute division each time to allow backprop through lengthscale", "\n", "# Transpose lengthscale to allow for ARD", "\n", "        ", "x", "=", "x", ".", "matmul", "(", "self", ".", "randn_weights", "/", "self", ".", "lengthscale", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "z", "=", "torch", ".", "cat", "(", "[", "torch", ".", "cos", "(", "x", ")", ",", "torch", ".", "sin", "(", "x", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "if", "normalize", ":", "\n", "            ", "D", "=", "self", ".", "num_samples", "\n", "z", "=", "z", "/", "math", ".", "sqrt", "(", "D", ")", "\n", "", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.rr_rff.RR_RFF_Kernel.prediction_strategy": [[221, 225], ["gpytorch.models.exact_prediction_strategies.RFFPredictionStrategy"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "prediction_strategy", "(", "train_inputs", ",", "train_prior_dist", ",", "train_labels", ",", "likelihood", ")", ":", "\n", "# Allow for fast sampling", "\n", "        ", "return", "RFFPredictionStrategy", "(", "train_inputs", ",", "train_prior_dist", ",", "train_labels", ",", "likelihood", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.run_rff.run": [[9, 36], ["torch.manual_seed", "numpy.random.seed", "torch.cuda.is_available", "experiments.load_data.get_train_data", "settings.update", "settings.update", "experiments.utils.start_all_logging_instruments", "experiments.experiment_fns.fit_gp", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.load_data.get_train_data", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.start_all_logging_instruments", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.fit_gp"], ["def", "run", "(", "dataset", ",", "model_name", "=", "'rff_ard'", ",", "seed", "=", "5348", ",", "total_n", "=", "-", "1", ",", "rff_features_n", "=", "700", ",", "\n", "total_iters", "=", "500", ",", "lr", "=", "0.01", ")", ":", "\n", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "use_cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n", "run_sample", ",", "sample_size", "=", "(", "False", ",", "1", ")", "if", "total_n", "==", "-", "1", "else", "(", "True", ",", "total_n", ")", "\n", "train_ds", "=", "get_train_data", "(", "'./datasets/'", ",", "dataset", ",", "run_sample", ",", "sample_size", ",", "\n", "use_cuda", ")", "\n", "settings", "=", "{", "\n", "'model_name'", ":", "model_name", ",", "'warmup'", ":", "False", ",", "\n", "'rff_samples'", ":", "rff_features_n", ",", "\n", "'total_iters'", ":", "total_iters", ",", "'lr'", ":", "lr", ",", "'lr_wd'", ":", "0.5", ",", "'optimizer'", ":", "'Adam'", ",", "\n", "'obs_num'", ":", "train_ds", "[", "0", "]", ".", "shape", "[", "0", "]", ",", "'dataset_name'", ":", "dataset", ",", "\n", "'cuda'", ":", "use_cuda", "\n", "}", "\n", "settings", ".", "update", "(", "{", "'seed'", ":", "seed", ",", "\n", "'truncation_name'", ":", "'onej'", ",", "\n", "'trunc_settings'", ":", "{", "'min_val'", ":", "rff_features_n", ",", "'max_val'", ":", "1500", ",", "\n", "'coeff'", ":", "1.", ",", "'step'", ":", "100", "}", "}", ")", "\n", "settings", ".", "update", "(", "{", "'mil'", ":", "[", "int", "(", "0.5", "*", "settings", "[", "'total_iters'", "]", ")", ",", "\n", "int", "(", "0.8", "*", "settings", "[", "'total_iters'", "]", ")", ",", "\n", "int", "(", "0.9", "*", "settings", "[", "'total_iters'", "]", ")", "]", "}", ")", "\n", "\n", "logger", "=", "start_all_logging_instruments", "(", "settings", ",", "results_path", "=", "'./logs/loss_'", ")", "\n", "fit_gp", "(", "train_ds", ",", "settings", ",", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.TestMetrics.__init__": [[35, 38], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "db", "=", "{", "}", "\n", "self", ".", "datasets", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.TestMetrics.populate_db": [[39, 53], ["utils.get_conditions", "utils.get_available_logs", "utils.TestMetrics.datasets.items", "log.find", "open", "f.readlines", "utils.find_type_of_log", "utils.get_rmse_and_nll", "utils.get_seed_from_log", "[].append", "[].append", "[].append"], "methods", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.get_conditions", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.get_available_logs", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.find_type_of_log", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.get_rmse_and_nll", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.get_seed_from_log"], ["", "def", "populate_db", "(", "self", ",", "lookup_path", ",", "key", ",", "translator", ")", ":", "\n", "        ", "criteria", "=", "get_conditions", "(", "translator", ")", "\n", "logs", "=", "get_available_logs", "(", "lookup_path", ")", "\n", "for", "_", ",", "dataset_name", "in", "self", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "for", "log", "in", "logs", ":", "\n", "                ", "if", "log", ".", "find", "(", "dataset_name", ")", ">", "0", ":", "\n", "                    ", "with", "open", "(", "file", "=", "lookup_path", "+", "log", ",", "mode", "=", "'r'", ")", "as", "f", ":", "\n", "                        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "type_case", "=", "find_type_of_log", "(", "lines", ",", "translator", ",", "criteria", ")", "\n", "rmse", ",", "nll", "=", "get_rmse_and_nll", "(", "lines", ")", "\n", "seed", "=", "get_seed_from_log", "(", "lines", ")", "\n", "self", ".", "db", "[", "key", "]", "[", "type_case", "]", "[", "dataset_name", "]", "[", "'RMSE'", "]", ".", "append", "(", "rmse", ")", "\n", "self", ".", "db", "[", "key", "]", "[", "type_case", "]", "[", "dataset_name", "]", "[", "'NLL'", "]", ".", "append", "(", "nll", ")", "\n", "self", ".", "db", "[", "key", "]", "[", "type_case", "]", "[", "dataset_name", "]", "[", "'seed'", "]", ".", "append", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.TestMetrics.convert_to_np": [[54, 65], ["utils.TestMetrics.db.items", "output.items", "datasets.items", "metrics.items", "numpy.array", "numpy.array.sort"], "methods", ["None"], ["", "", "", "", "", "def", "convert_to_np", "(", "self", ",", "consider_only", "=", "0", ")", ":", "\n", "        ", "for", "model", ",", "output", "in", "self", ".", "db", ".", "items", "(", ")", ":", "\n", "            ", "for", "type_case", ",", "datasets", "in", "output", ".", "items", "(", ")", ":", "\n", "                ", "for", "dataset_name", ",", "metrics", "in", "datasets", ".", "items", "(", ")", ":", "\n", "                    ", "for", "metric", ",", "_", "in", "metrics", ".", "items", "(", ")", ":", "\n", "                        ", "aux", "=", "self", ".", "db", "[", "model", "]", "[", "type_case", "]", "[", "dataset_name", "]", "[", "metric", "]", "\n", "out", "=", "np", ".", "array", "(", "aux", ")", "\n", "out", ".", "sort", "(", ")", "\n", "if", "consider_only", ">", "0", ":", "\n", "                            ", "out", "=", "out", "[", "0", ":", "consider_only", "]", "\n", "", "self", ".", "db", "[", "model", "]", "[", "type_case", "]", "[", "dataset_name", "]", "[", "metric", "]", "=", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.TestMetrics.create_db": [[66, 80], ["utils.TestMetrics.db.items", "range", "utils.TestMetrics.datasets.items", "v.update", "str", "dataset_results.update", "dataset_metrics.update"], "methods", ["None"], ["", "", "", "", "", "def", "create_db", "(", "self", ",", "model_name", ",", "types", ",", "metrics", ",", "datasets", ")", ":", "\n", "        ", "metrics", "+=", "[", "'seed'", "]", "\n", "self", ".", "db", "=", "{", "model_name", ":", "{", "}", "}", "\n", "self", ".", "datasets", "=", "datasets", "\n", "for", "_", ",", "v", "in", "self", ".", "db", ".", "items", "(", ")", ":", "\n", "            ", "for", "t", "in", "range", "(", "1", ",", "types", "+", "1", ")", ":", "\n", "                ", "name", "=", "'type_'", "+", "str", "(", "t", ")", "\n", "dataset_results", "=", "{", "}", "\n", "for", "_", ",", "dataset_name", "in", "self", ".", "datasets", ".", "items", "(", ")", ":", "\n", "                    ", "dataset_metrics", "=", "{", "}", "\n", "for", "metric", "in", "metrics", ":", "\n", "                        ", "dataset_metrics", ".", "update", "(", "{", "metric", ":", "[", "]", "}", ")", "\n", "", "dataset_results", ".", "update", "(", "{", "dataset_name", ":", "dataset_metrics", "}", ")", "\n", "", "v", ".", "update", "(", "{", "name", ":", "dataset_results", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.TestMetrics.load_db": [[81, 83], ["utils.load_results"], "methods", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.load_results"], ["", "", "", "def", "load_db", "(", "self", ",", "input_file", ")", ":", "\n", "        ", "self", ".", "db", "=", "load_results", "(", "input_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.TestMetrics.save_db": [[84, 86], ["utils.save_results"], "methods", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.save_results"], ["", "def", "save_db", "(", "self", ",", "output_file", ")", ":", "\n", "        ", "save_results", "(", "self", ".", "db", ",", "output_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.get_vars_from_pkl": [[11, 17], ["utils.load_results", "results.update"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.load_results"], ["def", "get_vars_from_pkl", "(", "input_file", ")", ":", "\n", "    ", "results", "=", "{", "}", "\n", "data", "=", "load_results", "(", "input_file", ")", "\n", "results", ".", "update", "(", "{", "'ls'", ":", "data", "[", "'ls'", "]", ",", "'os'", ":", "data", "[", "'os'", "]", ",", "\n", "'noise'", ":", "data", "[", "'noise'", "]", ",", "'loss'", ":", "data", "[", "'loss'", "]", "}", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.get_vars_from_logs": [[19, 31], ["utils.get_variable_np_array_from_log_file", "utils.get_variable_np_array_from_log_file", "utils.get_variable_np_array_from_log_file", "utils.get_variable_np_array_from_log_file", "results.update"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.get_variable_np_array_from_log_file", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.get_variable_np_array_from_log_file", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.get_variable_np_array_from_log_file", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.get_variable_np_array_from_log_file"], ["", "def", "get_vars_from_logs", "(", "input_file", ")", ":", "\n", "    ", "results", "=", "{", "}", "\n", "ls", "=", "get_variable_np_array_from_log_file", "(", "variable_name", "=", "'ls'", ",", "\n", "path_to_file", "=", "input_file", ")", "\n", "noise", "=", "get_variable_np_array_from_log_file", "(", "variable_name", "=", "'noise'", ",", "\n", "path_to_file", "=", "input_file", ")", "\n", "output_scale", "=", "get_variable_np_array_from_log_file", "(", "variable_name", "=", "'os'", ",", "\n", "path_to_file", "=", "input_file", ")", "\n", "loss", "=", "get_variable_np_array_from_log_file", "(", "variable_name", "=", "'loss'", ",", "\n", "path_to_file", "=", "input_file", ")", "\n", "results", ".", "update", "(", "{", "'ls'", ":", "ls", ",", "'os'", ":", "output_scale", ",", "'noise'", ":", "noise", ",", "'loss'", ":", "loss", "}", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.get_conditions": [[88, 97], ["translator.items", "cases.items", "criteria.update"], "function", ["None"], ["", "", "def", "get_conditions", "(", "translator", ")", ":", "\n", "    ", "criteria", "=", "{", "}", "\n", "for", "_", ",", "cases", "in", "translator", ".", "items", "(", ")", ":", "\n", "        ", "i", "=", "0", "\n", "for", "k", ",", "_", "in", "cases", ".", "items", "(", ")", ":", "\n", "            ", "i", "+=", "1", "\n", "criteria", ".", "update", "(", "{", "i", ":", "k", "}", ")", "\n", "", "break", "\n", "", "return", "criteria", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.find_type_of_log": [[99, 110], ["utils.get_criteria_from_log", "translator.items"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.get_criteria_from_log"], ["", "def", "find_type_of_log", "(", "lines", ",", "translator", ",", "criteria", ")", ":", "\n", "    ", "found_criteria", "=", "get_criteria_from_log", "(", "lines", ",", "criteria", ")", "\n", "for", "key", ",", "variables", "in", "translator", ".", "items", "(", ")", ":", "\n", "        ", "are_equal_dicts", "=", "variables", "==", "found_criteria", "\n", "if", "are_equal_dicts", ":", "\n", "            ", "type_case", "=", "key", "\n", "", "", "try", ":", "\n", "        ", "type_case", "\n", "", "except", "NameError", ":", "\n", "        ", "type_case", "=", "0", "\n", "", "return", "type_case", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.get_seed_from_log": [[112, 118], ["line.find", "utils.get_var_value"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.get_var_value"], ["", "def", "get_seed_from_log", "(", "lines", ")", ":", "\n", "    ", "for", "line", "in", "lines", ":", "\n", "        ", "idx", "=", "line", ".", "find", "(", "'seed'", ")", "\n", "if", "idx", ">", "0", ":", "\n", "            ", "seed", "=", "get_var_value", "(", "line", ",", "idx", ",", "'seed'", ")", "\n", "", "", "return", "seed", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.get_criteria_from_log": [[120, 129], ["criteria.items", "line.find", "utils.get_var_value", "found.update"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.get_var_value"], ["", "def", "get_criteria_from_log", "(", "lines", ",", "criteria", ")", ":", "\n", "    ", "found", "=", "{", "}", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "for", "_", ",", "var", "in", "criteria", ".", "items", "(", ")", ":", "\n", "            ", "idx", "=", "line", ".", "find", "(", "var", ")", "\n", "if", "idx", ">", "0", ":", "\n", "                ", "retrived_value", "=", "get_var_value", "(", "line", ",", "idx", ",", "var", ")", "\n", "found", ".", "update", "(", "{", "var", ":", "retrived_value", "}", ")", "\n", "", "", "", "return", "found", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.get_var_value": [[131, 140], ["subset.split", "ss[].rstrip().replace().replace", "ss[].rstrip().replace().replace.isdigit", "int", "re.compile", "float", "ss[].rstrip().replace", "re.compile.findall", "ss[].rstrip"], "function", ["None"], ["", "def", "get_var_value", "(", "line", ",", "idx", ",", "var", ")", ":", "\n", "    ", "subset", "=", "line", "[", "idx", ":", "]", "\n", "ss", "=", "subset", ".", "split", "(", "' '", ")", "\n", "ss", "=", "ss", "[", "1", "]", ".", "rstrip", "(", ")", ".", "replace", "(", "','", ",", "''", ")", ".", "replace", "(", "'}'", ",", "''", ")", "\n", "value", "=", "int", "(", "ss", ")", "if", "ss", ".", "isdigit", "(", ")", "else", "ss", "\n", "if", "var", "in", "[", "'lr'", ",", "'coeff'", "]", ":", "\n", "        ", "digits", "=", "re", ".", "compile", "(", "r'\\-*[0-9]+.[0-9]+'", ")", "\n", "value", "=", "float", "(", "digits", ".", "findall", "(", "value", ")", "[", "0", "]", ")", "\n", "", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.get_rmse_and_nll": [[142, 157], ["line.find", "line.find", "subset.split", "re.compile", "float", "res.find", "re.compile.findall"], "function", ["None"], ["", "def", "get_rmse_and_nll", "(", "lines", ")", ":", "\n", "    ", "for", "line", "in", "lines", ":", "\n", "        ", "idx", "=", "line", ".", "find", "(", "'Test RMSE'", ")", "\n", "line_contains_metrics", "=", "line", ".", "find", "(", "'Test RMSE'", ")", ">", "0", "\n", "if", "line_contains_metrics", ":", "\n", "            ", "subset", "=", "line", "[", "idx", ":", "]", "\n", "results", "=", "subset", ".", "split", "(", "'|'", ")", "\n", "for", "res", "in", "results", ":", "\n", "                ", "digits", "=", "re", ".", "compile", "(", "r'\\-*[0-9]+.[0-9]+'", ")", "\n", "out", "=", "float", "(", "digits", ".", "findall", "(", "res", ")", "[", "0", "]", ")", "\n", "if", "res", ".", "find", "(", "'RMSE'", ")", ">", "0", ":", "\n", "                    ", "rmse", "=", "out", "\n", "", "else", ":", "\n", "                    ", "nll", "=", "out", "\n", "", "", "", "", "return", "rmse", ",", "nll", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.get_available_logs": [[159, 166], ["os.listdir", "os.path.isdir", "os.path.join", "logs.append"], "function", ["None"], ["", "def", "get_available_logs", "(", "path", ")", ":", "\n", "    ", "logs", "=", "[", "]", "\n", "for", "d", "in", "os", ".", "listdir", "(", "path", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "path", ",", "d", ")", ")", ":", "\n", "            ", "if", "not", "d", "[", "-", "4", ":", "]", "==", "'.pkl'", ":", "\n", "                ", "logs", ".", "append", "(", "d", ")", "\n", "", "", "", "return", "logs", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.get_hypers": [[168, 186], ["open", "f.readlines", "line.find", "line.find", "subset.split", "ss[].rstrip().replace().replace", "hyper_dict.update", "ss[].rstrip().replace().replace.isdigit", "int", "ss[].rstrip().replace", "ss[].rstrip"], "function", ["None"], ["", "def", "get_hypers", "(", "path_to_file", ")", ":", "\n", "    ", "variables", "=", "[", "'model_name'", ",", "'rff_samples'", ",", "'total_iters'", ",", "'seed'", ",", "\n", "'min_val'", ",", "'max_val'", ",", "'truncation_name'", ",", "\n", "'warmup'", ",", "'coeff'", ",", "'step'", ",", "'optimizer'", ",", "'lr:'", "]", "\n", "hyper_dict", "=", "{", "}", "\n", "with", "open", "(", "file", "=", "path_to_file", ",", "mode", "=", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "            ", "if", "line", ".", "find", "(", "'Hyper'", ")", ">", "0", ":", "\n", "                ", "for", "var", "in", "variables", ":", "\n", "                    ", "idx", "=", "line", ".", "find", "(", "var", ")", "\n", "if", "idx", ">", "0", ":", "\n", "                        ", "subset", "=", "line", "[", "idx", ":", "]", "\n", "ss", "=", "subset", ".", "split", "(", "' '", ")", "\n", "ss", "=", "ss", "[", "1", "]", ".", "rstrip", "(", ")", ".", "replace", "(", "','", ",", "''", ")", ".", "replace", "(", "'}'", ",", "''", ")", "\n", "ss", "=", "int", "(", "ss", ")", "if", "ss", ".", "isdigit", "(", ")", "else", "ss", "\n", "hyper_dict", ".", "update", "(", "{", "var", ":", "ss", "}", ")", "\n", "", "", "", "", "", "return", "hyper_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.get_variable_np_array_from_log_file": [[188, 203], ["open", "f.readlines", "numpy.array", "line.split", "len", "re.compile", "len", "float", "variable_results.append", "re.compile.findall", "part.split"], "function", ["None"], ["", "def", "get_variable_np_array_from_log_file", "(", "variable_name", ":", "str", ",", "path_to_file", ":", "str", ")", ":", "\n", "    ", "variable_results", "=", "[", "]", "\n", "with", "open", "(", "file", "=", "path_to_file", ",", "mode", "=", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "            ", "split", "=", "line", ".", "split", "(", "sep", "=", "'|'", ")", "\n", "if", "len", "(", "split", ")", ">", "1", ":", "\n", "                ", "for", "part", "in", "split", ":", "\n", "                    ", "regex", "=", "re", ".", "compile", "(", "r''", "+", "variable_name", "+", "':'", ")", "\n", "is_variable_there", "=", "len", "(", "regex", ".", "findall", "(", "part", ")", ")", ">", "0", "\n", "if", "is_variable_there", ":", "\n", "                        ", "var", "=", "float", "(", "part", ".", "split", "(", ")", "[", "1", "]", ")", "\n", "variable_results", ".", "append", "(", "var", ")", "\n", "", "", "", "", "variable_np", "=", "np", ".", "array", "(", "variable_results", ")", "\n", "", "return", "variable_np", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.print_time_taken": [[205, 213], ["math.floor", "logger.info", "print"], "function", ["None"], ["", "def", "print_time_taken", "(", "tic", ",", "toc", ",", "text", "=", "'Experiment took'", ",", "logger", "=", "None", ")", ":", "\n", "    ", "minutes", "=", "math", ".", "floor", "(", "(", "toc", "-", "tic", ")", "/", "60", ")", "\n", "seconds", "=", "(", "toc", "-", "tic", ")", "-", "minutes", "*", "60", "\n", "message", "=", "text", "+", "f': {minutes:4d} min and {seconds:4.2f} sec'", "\n", "if", "logger", "is", "not", "None", ":", "\n", "        ", "logger", ".", "info", "(", "message", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.load_results": [[215, 219], ["open", "pickle.load"], "function", ["None"], ["", "", "def", "load_results", "(", "input_file", ")", ":", "\n", "    ", "with", "open", "(", "input_file", ",", "mode", "=", "'rb'", ")", "as", "f", ":", "\n", "        ", "results", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.save_results": [[221, 224], ["open", "pickle.dump"], "function", ["None"], ["", "def", "save_results", "(", "results", ",", "output_file", ")", ":", "\n", "    ", "with", "open", "(", "file", "=", "output_file", ",", "mode", "=", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "obj", "=", "results", ",", "file", "=", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.start_all_logging_instruments": [[226, 236], ["datetime.datetime.now().strftime", "utils.setup_logger", "utils.log_all_settings", "str", "datetime.datetime.now", "str", "random.randint", "random.randint"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.setup_logger", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.log_all_settings"], ["", "", "def", "start_all_logging_instruments", "(", "settings", ",", "results_path", ")", ":", "\n", "    ", "time_stamp", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y_%m_%d_%H%M\"", ")", "\n", "log_file_name", "=", "results_path", "+", "settings", "[", "'dataset_name'", "]", "\n", "log_file_name", "+=", "'_'", "+", "time_stamp", "\n", "log_file_name", "+=", "'_'", "+", "str", "(", "randint", "(", "1", ",", "100000", ")", ")", "+", "'.log'", "\n", "logger_name", "=", "'log_'", "+", "time_stamp", "+", "'_'", "+", "str", "(", "randint", "(", "1", ",", "100000", ")", ")", "\n", "logger", "=", "setup_logger", "(", "log_file_name", ",", "logger_name", ")", "\n", "log_all_settings", "(", "settings", ",", "logger", ")", "\n", "logger", ".", "log_file_name", "=", "log_file_name", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.log_all_settings": [[238, 247], ["settings.items", "logger.info", "len", "logger.info", "logger.info"], "function", ["None"], ["", "def", "log_all_settings", "(", "settings", ",", "logger", ")", ":", "\n", "    ", "for", "key", ",", "value", "in", "settings", ".", "items", "(", ")", ":", "\n", "        ", "if", "key", "==", "'ls'", ":", "\n", "            ", "if", "len", "(", "value", ".", "shape", ")", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "f'Hyper: {key}: {value}'", ")", "\n", "", "else", ":", "\n", "                ", "logger", ".", "info", "(", "f'Hyper: {key}: {value[0]}'", ")", "\n", "", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "f'Hyper: {key}: {value}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.setup_logger": [[249, 268], ["logging.getLogger.setLevel", "logging.Formatter", "logging.Formatter", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logging.getLogger.addHandler", "logging.getLogger", "logging.getLogger"], "function", ["None"], ["", "", "", "def", "setup_logger", "(", "log_file_name", ",", "logger_name", ":", "str", "=", "None", ")", ":", "\n", "    ", "if", "logger_name", "is", "None", ":", "\n", "        ", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "", "else", ":", "\n", "        ", "logger", "=", "logging", ".", "getLogger", "(", "logger_name", ")", "\n", "", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s:    %(message)s'", ")", "\n", "stream_formatter", "=", "logging", ".", "Formatter", "(", "'%(message)s'", ")", "\n", "\n", "file_handler", "=", "logging", ".", "FileHandler", "(", "filename", "=", "log_file_name", ")", "\n", "file_handler", ".", "setFormatter", "(", "fmt", "=", "formatter", ")", "\n", "\n", "stream_handler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "stream_handler", ".", "setFormatter", "(", "fmt", "=", "stream_formatter", ")", "\n", "\n", "logger", ".", "addHandler", "(", "hdlr", "=", "file_handler", ")", "\n", "logger", ".", "addHandler", "(", "hdlr", "=", "stream_handler", ")", "\n", "logger", ".", "propagate", "=", "False", "\n", "return", "logger", "\n", "", ""]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rff.rff_fns.TruncationDist.__init__": [[9, 17], ["torch.tensor", "torch.tensor", "torch.distributions.Categorical", "torch.tensor", "torch.tensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "probs", ",", "min_val", ",", "max_val", ",", "step", ")", ":", "\n", "        ", "self", ".", "min_val", "=", "torch", ".", "tensor", "(", "min_val", ",", "dtype", "=", "torch", ".", "int", ")", "\n", "self", ".", "max_val", "=", "torch", ".", "tensor", "(", "max_val", ",", "dtype", "=", "torch", ".", "int", ")", "\n", "self", ".", "categorical", "=", "Categorical", "(", "probs", ")", "\n", "self", ".", "probs", "=", "self", ".", "categorical", ".", "probs", "\n", "self", ".", "step", "=", "step", "\n", "self", ".", "index_sampled", "=", "torch", ".", "tensor", "(", "0", ",", "dtype", "=", "torch", ".", "int", ")", "\n", "self", ".", "value_sampled", "=", "torch", ".", "tensor", "(", "0", ",", "dtype", "=", "torch", ".", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rff.rff_fns.TruncationDist.sample": [[18, 21], ["rff_fns.TruncationDist.categorical.sample"], "methods", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.MultivariateNormal.sample"], ["", "def", "sample", "(", "self", ",", "sample_size", "=", "(", ")", ")", ":", "\n", "        ", "self", ".", "index_sampled", "=", "self", ".", "categorical", ".", "sample", "(", "sample_size", ")", "\n", "self", ".", "value_sampled", "=", "self", ".", "min_val", "+", "self", ".", "step", "*", "(", "self", ".", "index_sampled", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rff.rff_fns.TruncationDist.prob": [[22, 24], ["None"], "methods", ["None"], ["", "def", "prob", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "categorical", ".", "probs", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rff.rff_fns.OneOverJ.__init__": [[27, 34], ["torch.device", "torch.arange", "torch.exp", "rff_fns.TruncationDist.__init__", "torch.log", "torch.logsumexp"], "methods", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.baselines.run_svgp.SVGPModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "min_val", "=", "1", ",", "max_val", "=", "None", ",", "step", "=", "1", ",", "coeff", "=", "1", ",", "\n", "dtype", "=", "torch", ".", "float", ",", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ")", ":", "\n", "        ", "total", "=", "(", "max_val", "-", "min_val", ")", "//", "step", "+", "1", "\n", "truncation_range", "=", "torch", ".", "arange", "(", "1", ",", "total", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "log_probs", "=", "-", "coeff", "*", "torch", ".", "log", "(", "truncation_range", ")", "\n", "probs", "=", "torch", ".", "exp", "(", "log_probs", "-", "torch", ".", "logsumexp", "(", "log_probs", ",", "dim", "=", "0", ")", ")", "\n", "super", "(", ")", ".", "__init__", "(", "probs", "=", "probs", ",", "min_val", "=", "min_val", ",", "max_val", "=", "max_val", ",", "step", "=", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rff.rff_fns.get_diffs": [[36, 42], ["numpy.zeros", "range"], "function", ["None"], ["", "", "def", "get_diffs", "(", "v", ")", ":", "\n", "    ", "diffs", "=", "np", ".", "zeros", "(", "v", ".", "shape", ")", "\n", "diffs", "[", "0", "]", "=", "v", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "v", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "diffs", "[", "i", "]", "=", "v", "[", "i", "]", "-", "v", "[", "i", "-", "1", "]", "\n", "", "return", "diffs", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rff.rff_fns.get_diffs_mat": [[44, 51], ["numpy.zeros", "range"], "function", ["None"], ["", "def", "get_diffs_mat", "(", "v", ",", "sf", ")", ":", "\n", "    ", "diffs", "=", "np", ".", "zeros", "(", "v", ".", "shape", ")", "\n", "diffs", "[", "0", ",", ":", ",", ":", "]", "=", "v", "[", "0", ",", ":", ",", ":", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "v", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "diffs", "[", "i", ",", ":", ",", ":", "]", "=", "v", "[", "i", ",", ":", ",", ":", "]", "-", "v", "[", "i", "-", "1", ",", ":", ",", ":", "]", "\n", "diffs", "[", "i", ",", ":", ",", ":", "]", "/=", "sf", "[", "i", "-", "1", "]", "\n", "", "return", "diffs", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rff.rff_fns.get_all_logdet": [[53, 63], ["numpy.zeros", "rff_fns.compute_rff_ker_hat", "numpy.log", "range", "numpy.linalg.det", "rff_fns.compute_rff_ker_hat", "numpy.log", "numpy.linalg.det"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rff.rff_fns.compute_rff_ker_hat", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rff.rff_fns.compute_rff_ker_hat"], ["", "def", "get_all_logdet", "(", "x", ",", "min_feature", ",", "diff2max", ",", "step", ")", ":", "\n", "    ", "total", "=", "diff2max", "//", "step", "+", "1", "\n", "logdet_hat", "=", "np", ".", "zeros", "(", "total", ")", "\n", "ker_hat", "=", "compute_rff_ker_hat", "(", "x", ",", "min_feature", ")", "\n", "logdet_hat", "[", "0", "]", "=", "np", ".", "log", "(", "np", ".", "linalg", ".", "det", "(", "ker_hat", ")", ")", "\n", "for", "j", "in", "range", "(", "1", ",", "total", ")", ":", "\n", "        ", "num_features", "=", "min_feature", "+", "j", "*", "step", "\n", "ker_hat", "=", "compute_rff_ker_hat", "(", "x", ",", "num_features", ")", "\n", "logdet_hat", "[", "j", "]", "=", "np", ".", "log", "(", "np", ".", "linalg", ".", "det", "(", "ker_hat", ")", ")", "\n", "", "return", "logdet_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rff.rff_fns.get_logdets": [[65, 80], ["numpy.zeros", "range", "rff_fns.sample_rff_features", "rff_fns.compute_ker_upto", "numpy.log", "rff_fns.sample_rff_features", "rff_fns.compute_ss_logdet", "numpy.linalg.det"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rff.rff_fns.sample_rff_features", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rff.rff_fns.compute_ker_upto", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rff.rff_fns.sample_rff_features", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rff.rff_fns.compute_ss_logdet"], ["", "def", "get_logdets", "(", "x", ",", "prob", ",", "ss", ",", "min_feature", ",", "step", ")", ":", "\n", "    ", "sample_size", "=", "ss", ".", "shape", "[", "0", "]", "\n", "logdet_hat", "=", "np", ".", "zeros", "(", "sample_size", ")", "\n", "for", "s", "in", "range", "(", "sample_size", ")", ":", "\n", "        ", "j", "=", "ss", "[", "s", "]", "\n", "if", "j", "==", "0", ":", "\n", "            ", "z", "=", "sample_rff_features", "(", "x", ",", "min_feature", ")", "\n", "ker_hat", "=", "compute_ker_upto", "(", "z", ",", "min_feature", ")", "\n", "logdet_hat0", "=", "np", ".", "log", "(", "np", ".", "linalg", ".", "det", "(", "ker_hat", ")", ")", "\n", "logdet_hat", "[", "s", "]", "=", "logdet_hat0", "/", "prob", "[", "j", "]", "\n", "", "else", ":", "\n", "            ", "a0", ",", "a1", "=", "step", "*", "j", "+", "min_feature", ",", "step", "*", "(", "j", "+", "1", ")", "+", "min_feature", "\n", "z", "=", "sample_rff_features", "(", "x", ",", "num_features", "=", "a1", ")", "\n", "logdet_hat", "[", "s", "]", "=", "compute_ss_logdet", "(", "z", ",", "prob", "[", "j", "]", ",", "a0", ",", "a1", ")", "\n", "", "", "return", "logdet_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rff.rff_fns.compute_ss_logdet": [[82, 87], ["rff_fns.compute_ker_upto", "rff_fns.compute_ker_upto", "numpy.log", "numpy.log", "numpy.linalg.det", "numpy.linalg.det"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rff.rff_fns.compute_ker_upto", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rff.rff_fns.compute_ker_upto"], ["", "def", "compute_ss_logdet", "(", "z", ",", "prob", ",", "min_feature", ",", "max_feature", ")", ":", "\n", "    ", "ker0", "=", "compute_ker_upto", "(", "z", ",", "min_feature", ")", "\n", "ker1", "=", "compute_ker_upto", "(", "z", ",", "max_feature", ")", "\n", "diff", "=", "(", "np", ".", "log", "(", "np", ".", "linalg", ".", "det", "(", "ker1", ")", ")", "-", "np", ".", "log", "(", "np", ".", "linalg", ".", "det", "(", "ker0", ")", ")", ")", "/", "prob", "\n", "return", "diff", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rff.rff_fns.compute_logdet_rff": [[89, 98], ["numpy.empty", "rff_fns.compute_ker_upto", "numpy.log", "range", "numpy.linalg.det", "rff_fns.compute_ker_upto", "rff_fns.compute_ker_upto", "numpy.log", "numpy.log", "numpy.linalg.det", "numpy.linalg.det"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rff.rff_fns.compute_ker_upto", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rff.rff_fns.compute_ker_upto", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rff.rff_fns.compute_ker_upto"], ["", "def", "compute_logdet_rff", "(", "z", ",", "min_features", ",", "max_features", ")", ":", "\n", "    ", "log_det_diff", "=", "np", ".", "empty", "(", "shape", "=", "max_features", "-", "min_features", ")", "\n", "ker1", "=", "compute_ker_upto", "(", "z", ",", "min_features", ")", "\n", "log_det_diff", "[", "0", "]", "=", "np", ".", "log", "(", "np", ".", "linalg", ".", "det", "(", "ker1", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "max_features", "-", "min_features", ")", ":", "\n", "        ", "ker0", "=", "compute_ker_upto", "(", "z", ",", "i", "+", "min_features", ")", "\n", "ker1", "=", "compute_ker_upto", "(", "z", ",", "i", "+", "min_features", "+", "1", ")", "\n", "log_det_diff", "[", "i", "]", "=", "np", ".", "log", "(", "np", ".", "linalg", ".", "det", "(", "ker1", ")", ")", "-", "np", ".", "log", "(", "np", ".", "linalg", ".", "det", "(", "ker0", ")", ")", "\n", "", "return", "log_det_diff", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rff.rff_fns.compute_ker_upto": [[100, 103], ["numpy.matmul"], "function", ["None"], ["", "def", "compute_ker_upto", "(", "z", ",", "i", ")", ":", "\n", "    ", "ker", "=", "np", ".", "matmul", "(", "z", "[", ":", ",", "0", ":", "2", "*", "i", "]", ",", "z", "[", ":", ",", "0", ":", "2", "*", "i", "]", ".", "T", ")", "\n", "return", "ker", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rff.rff_fns.compute_rff_ker_hat_vec": [[105, 111], ["numpy.random.normal", "rff_fns.compute_rff_z_vec", "rff_fns.multiply_zz"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rff.rff_fns.compute_rff_z_vec", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rff.rff_fns.multiply_zz"], ["", "def", "compute_rff_ker_hat_vec", "(", "x", ",", "num_features", ",", "sample_size", ")", ":", "\n", "    ", "data_dim", "=", "x", ".", "shape", "[", "1", "]", "\n", "w", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "num_features", ",", "data_dim", ",", "sample_size", ")", ")", "\n", "z", "=", "compute_rff_z_vec", "(", "x", ",", "w", ",", "num_features", ")", "\n", "ker_hat", "=", "multiply_zz", "(", "z", ")", "\n", "return", "ker_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rff.rff_fns.multiply_zz": [[115, 124], ["numba.jit", "numpy.zeros", "range"], "function", ["None"], ["", "@", "numba", ".", "jit", "(", "nopython", "=", "True", ",", "cache", "=", "True", ")", "\n", "def", "multiply_zz", "(", "z", ")", ":", "\n", "    ", "num_obs", "=", "z", ".", "shape", "[", "0", "]", "\n", "sample_size", "=", "z", ".", "shape", "[", "2", "]", "\n", "ker_hat", "=", "np", ".", "zeros", "(", "shape", "=", "(", "num_obs", ",", "num_obs", ",", "sample_size", ")", ")", "\n", "# for s in numba.prange(sample_size):", "\n", "for", "s", "in", "range", "(", "sample_size", ")", ":", "\n", "        ", "ker_hat", "[", ":", ",", ":", ",", "s", "]", "=", "z", "[", ":", ",", ":", ",", "s", "]", "@", "z", ".", "T", "[", "s", ",", ":", ",", ":", "]", "\n", "", "return", "ker_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rff.rff_fns.compute_rff_ker_hat": [[126, 130], ["rff_fns.sample_rff_features", "numpy.matmul"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rff.rff_fns.sample_rff_features"], ["", "def", "compute_rff_ker_hat", "(", "x", ",", "num_features", ")", ":", "\n", "    ", "z", "=", "sample_rff_features", "(", "x", ",", "num_features", ")", "\n", "ker_hat", "=", "np", ".", "matmul", "(", "z", ",", "z", ".", "T", ")", "\n", "return", "ker_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rff.rff_fns.sample_rff_features": [[132, 137], ["numpy.random.normal", "rff_fns.compute_rff_z"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rff.rff_fns.compute_rff_z"], ["", "def", "sample_rff_features", "(", "x", ",", "num_features", ")", ":", "\n", "    ", "data_dim", "=", "x", ".", "shape", "[", "1", "]", "\n", "w", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "num_features", ",", "data_dim", ")", ")", "\n", "z", "=", "compute_rff_z", "(", "x", ",", "w", ",", "num_features", ")", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rff.rff_fns.compute_rff_z": [[139, 146], ["numpy.empty", "numpy.tensordot", "numpy.cos", "numpy.sin", "numpy.sqrt"], "function", ["None"], ["", "def", "compute_rff_z", "(", "x", ",", "w", ",", "num_features", ")", ":", "\n", "    ", "data_size", "=", "x", ".", "shape", "[", "0", "]", "\n", "z", "=", "np", ".", "empty", "(", "shape", "=", "(", "data_size", ",", "2", "*", "num_features", ")", ")", "\n", "w_x", "=", "np", ".", "tensordot", "(", "x", ",", "w", ",", "axes", "=", "(", "[", "1", "]", ",", "[", "1", "]", ")", ")", "\n", "z", "[", ":", ",", "0", ":", ":", "2", "]", "=", "np", ".", "cos", "(", "w_x", ")", "\n", "z", "[", ":", ",", "1", ":", ":", "2", "]", "=", "np", ".", "sin", "(", "w_x", ")", "\n", "return", "np", ".", "sqrt", "(", "1", "/", "num_features", ")", "*", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rff.rff_fns.compute_rff_z_gpt": [[148, 154], ["numpy.empty", "numpy.matmul", "numpy.concatenate", "numpy.sqrt", "numpy.cos", "numpy.sin"], "function", ["None"], ["", "def", "compute_rff_z_gpt", "(", "x", ",", "w", ",", "num_features", ")", ":", "\n", "    ", "data_size", "=", "x", ".", "shape", "[", "0", "]", "\n", "z", "=", "np", ".", "empty", "(", "shape", "=", "(", "data_size", ",", "2", "*", "num_features", ")", ")", "\n", "w_x", "=", "np", ".", "matmul", "(", "x", ",", "w", ")", "\n", "z", "=", "np", ".", "concatenate", "(", "(", "np", ".", "cos", "(", "w_x", ")", ",", "np", ".", "sin", "(", "w_x", ")", ")", ",", "axis", "=", "1", ")", "\n", "return", "np", ".", "sqrt", "(", "1", "/", "num_features", ")", "*", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rff.rff_fns.compute_rff_z_vec": [[156, 164], ["numpy.empty", "numpy.tensordot", "numpy.cos", "numpy.sin", "numpy.sqrt"], "function", ["None"], ["", "def", "compute_rff_z_vec", "(", "x", ",", "w", ",", "num_features", ")", ":", "\n", "    ", "sample_size", "=", "w", ".", "shape", "[", "2", "]", "\n", "data_size", "=", "x", ".", "shape", "[", "0", "]", "\n", "z", "=", "np", ".", "empty", "(", "shape", "=", "(", "data_size", ",", "2", "*", "num_features", ",", "sample_size", ")", ")", "\n", "w_x", "=", "np", ".", "tensordot", "(", "x", ",", "w", ",", "axes", "=", "(", "[", "1", "]", ",", "[", "1", "]", ")", ")", "\n", "z", "[", ":", ",", "0", ":", ":", "2", "]", "=", "np", ".", "cos", "(", "w_x", ")", "\n", "z", "[", ":", ",", "1", ":", ":", "2", "]", "=", "np", ".", "sin", "(", "w_x", ")", "\n", "return", "np", ".", "sqrt", "(", "1", "/", "num_features", ")", "*", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rff.rff_fns.compute_gaussian_kernel": [[167, 175], ["numpy.zeros", "range", "range", "numpy.sum", "numpy.exp"], "function", ["None"], ["", "def", "compute_gaussian_kernel", "(", "x", ",", "sigma_2", ")", ":", "\n", "    ", "data_dim", "=", "x", ".", "shape", "[", "0", "]", "\n", "ker", "=", "np", ".", "zeros", "(", "shape", "=", "(", "data_dim", ",", "data_dim", ")", ")", "\n", "for", "i", "in", "range", "(", "data_dim", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "data_dim", ")", ":", "\n", "            ", "delta", "=", "np", ".", "sum", "(", "(", "x", "[", "i", ",", ":", "]", "-", "x", "[", "j", ",", ":", "]", ")", "**", "2", ")", "\n", "ker", "[", "i", ",", "j", "]", "=", "np", ".", "exp", "(", "-", "delta", "/", "(", "2.", "*", "sigma_2", ")", ")", "\n", "", "", "return", "ker", "\n", "", ""]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.dist_of_iterations_for_rrcg.RRDist.__init__": [[8, 22], ["torch.device", "numpy.isclose", "torch.distributions.Categorical", "len", "len", "probs.sum().cpu().numpy", "probs.sum", "probs.sum().cpu", "probs.sum"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "N", ",", "probs", "=", "None", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", ":", "\n", "        ", "\"\"\"\n        J takes value in 1, 2, ..., N\n        Theoreti ally, probs[t] > 0, where t is the number of iterations after which cg converges\n        \"\"\"", "\n", "assert", "len", "(", "probs", ")", "==", "N", ",", "\"N = {}, len(probs) = {}\"", ".", "format", "(", "N", ",", "len", "(", "probs", ")", ")", "\n", "assert", "np", ".", "isclose", "(", "probs", ".", "sum", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "1", ")", ",", "\"probs must sum up to 1, but got probs.sum() = {}\"", ".", "format", "(", "\n", "probs", ".", "sum", "(", ")", ")", "\n", "\n", "self", ".", "N", "=", "N", "\n", "self", ".", "categorical", "=", "Categorical", "(", "probs", "=", "probs", ")", "\n", "self", ".", "probs", "=", "self", ".", "categorical", ".", "probs", "\n", "self", ".", "dtype", "=", "dtype", "\n", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.dist_of_iterations_for_rrcg.RRDist.sample": [[23, 25], ["dist_of_iterations_for_rrcg.RRDist.categorical.sample"], "methods", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.MultivariateNormal.sample"], ["", "def", "sample", "(", "self", ",", "sample_size", "=", "(", ")", ")", ":", "\n", "        ", "return", "self", ".", "categorical", ".", "sample", "(", "sample_size", ")", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.dist_of_iterations_for_rrcg.RRDist.prob": [[26, 29], ["None"], "methods", ["None"], ["", "def", "prob", "(", "self", ",", "J", ")", ":", "\n", "        ", "assert", "J", ">=", "1", "and", "J", "<=", "self", ".", "N", "\n", "return", "self", ".", "categorical", ".", "probs", "[", "J", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.dist_of_iterations_for_rrcg.RRDist.cdf": [[30, 35], ["torch.sum"], "methods", ["None"], ["", "def", "cdf", "(", "self", ",", "J", ")", ":", "\n", "# currently used by Luhuan for J starting from zero", "\n", "# compute P(X<=J) = sum_{i=1}^J P(X_i)", "\n", "        ", "assert", "J", ">=", "0", "and", "J", "<=", "self", ".", "N", "\n", "return", "torch", ".", "sum", "(", "self", ".", "categorical", ".", "probs", "[", ":", "J", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.dist_of_iterations_for_rrcg.RRDist.mean": [[36, 39], ["torch.sum", "torch.arange"], "methods", ["None"], ["", "@", "property", "\n", "def", "mean", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "sum", "(", "self", ".", "categorical", ".", "probs", "*", "torch", ".", "arange", "(", "self", ".", "N", ",", "dtype", "=", "self", ".", "dtype", ",", "device", "=", "self", ".", "device", ")", ")", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.dist_of_iterations_for_rrcg.RRDist.var": [[40, 46], ["torch.sum", "torch.arange"], "methods", ["None"], ["", "@", "property", "\n", "def", "var", "(", "self", ")", ":", "\n", "        ", "mean_sq", "=", "self", ".", "mean", "**", "2", "\n", "Xsq", "=", "torch", ".", "arange", "(", "1", ",", "self", ".", "N", "+", "1", ",", "dtype", "=", "self", ".", "dtype", ",", "device", "=", "self", ".", "device", ")", "**", "2", "\n", "mean_Xsq", "=", "torch", ".", "sum", "(", "self", ".", "categorical", ".", "probs", "*", "Xsq", ")", "\n", "return", "mean_Xsq", "-", "mean_sq", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.dist_of_iterations_for_rrcg.RRDist.std": [[47, 50], ["torch.sqrt"], "methods", ["None"], ["", "@", "property", "\n", "def", "std", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "sqrt", "(", "self", ".", "var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.dist_of_iterations_for_rrcg.ExpDecayDist.__init__": [[54, 69], ["torch.device", "torch.zeros", "torch.exp", "torch.cat", "dist_of_iterations_for_rrcg.RRDist.__init__", "torch.arange", "torch.logsumexp"], "methods", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.baselines.run_svgp.SVGPModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "temp", ",", "min", "=", "1", ",", "max", "=", "None", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", ":", "\n", "        ", "\"\"\"J takes value in 1, 2, ..., N\"\"\"", "\n", "assert", "min", ">=", "1", ",", "min", "\n", "assert", "max", "is", "not", "None", "and", "max", ">=", "min", ",", "f\"min={min}, max={max}\"", "\n", "assert", "temp", ">", "0", "\n", "self", ".", "temp", "=", "temp", "\n", "self", ".", "min", "=", "min", "\n", "self", ".", "max", "=", "max", "\n", "\n", "logprobs", "=", "-", "temp", "*", "torch", ".", "arange", "(", "max", "-", "min", "+", "1", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "zero_probs", "=", "torch", ".", "zeros", "(", "min", "-", "1", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "probs", "=", "torch", ".", "exp", "(", "logprobs", "-", "torch", ".", "logsumexp", "(", "logprobs", ",", "dim", "=", "0", ")", ")", "\n", "probs", "=", "torch", ".", "cat", "(", "[", "zero_probs", ",", "probs", "]", ")", "\n", "\n", "super", "(", "ExpDecayDist", ",", "self", ")", ".", "__init__", "(", "N", "=", "max", ",", "probs", "=", "probs", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.dist_of_iterations_for_rrcg.UniformDist.__init__": [[73, 77], ["torch.device", "dist_of_iterations_for_rrcg.RRDist.__init__", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.baselines.run_svgp.SVGPModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "N", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", ":", "\n", "        ", "probs", "=", "1.0", "/", "N", "*", "torch", ".", "ones", "(", "N", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "\n", "super", "(", "UniformDist", ",", "self", ")", ".", "__init__", "(", "N", "=", "N", ",", "probs", "=", "probs", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.dist_of_iterations_for_rrcg.OneOverJ.__init__": [[81, 100], ["torch.device", "torch.arange", "torch.zeros", "torch.exp", "torch.cat", "dist_of_iterations_for_rrcg.RRDist.__init__", "J_range.sqrt.sqrt.sqrt", "torch.log", "torch.log", "torch.ones", "torch.logsumexp"], "methods", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.baselines.run_svgp.SVGPModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "min", "=", "1", ",", "max", "=", "None", ",", "do_sqrt", "=", "False", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", ":", "\n", "        ", "assert", "min", ">=", "1", ",", "min", "\n", "assert", "max", "is", "not", "None", "and", "max", ">=", "min", ",", "max", "\n", "self", ".", "min", "=", "min", "\n", "self", ".", "max", "=", "max", "\n", "self", ".", "do_sqrt", "=", "do_sqrt", "\n", "\n", "J_range", "=", "torch", ".", "arange", "(", "1", ",", "max", "-", "min", "+", "1", "+", "1", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "\n", "if", "self", ".", "do_sqrt", ":", "\n", "            ", "J_range", "=", "J_range", ".", "sqrt", "(", ")", "\n", "\n", "", "logprobs", "=", "torch", ".", "log", "(", "torch", ".", "ones", "(", "(", "max", "-", "min", "+", "1", ")", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", ")", "-", "torch", ".", "log", "(", "J_range", ")", "\n", "zero_probs", "=", "torch", ".", "zeros", "(", "min", "-", "1", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "probs", "=", "torch", ".", "exp", "(", "logprobs", "-", "torch", ".", "logsumexp", "(", "logprobs", ",", "dim", "=", "0", ")", ")", "# normalize", "\n", "probs", "=", "torch", ".", "cat", "(", "[", "zero_probs", ",", "probs", "]", ")", "\n", "\n", "super", "(", "OneOverJ", ",", "self", ")", ".", "__init__", "(", "N", "=", "max", ",", "probs", "=", "probs", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.dist_of_iterations_for_rrcg.Geometric.__init__": [[105, 120], ["torch.device", "torch.arange", "torch.zeros", "torch.exp", "torch.cat", "dist_of_iterations_for_rrcg.RRDist.__init__", "numpy.log", "torch.logsumexp"], "methods", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.baselines.run_svgp.SVGPModel.__init__"], ["def", "__init__", "(", "self", ",", "p", ",", "min", "=", "1", ",", "max", "=", "None", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", ":", "\n", "        ", "assert", "min", ">=", "1", ",", "min", "\n", "assert", "max", "is", "not", "None", "and", "max", ">=", "min", ",", "max", "\n", "assert", "0", "<", "p", "<", "1", ",", "p", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "min", "=", "min", "\n", "self", ".", "max", "=", "max", "\n", "\n", "J_range", "=", "torch", ".", "arange", "(", "1", ",", "max", "-", "min", "+", "1", "+", "1", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "logprobs", "=", "J_range", "*", "np", ".", "log", "(", "p", ")", "\n", "zero_probs", "=", "torch", ".", "zeros", "(", "min", "-", "1", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "probs", "=", "torch", ".", "exp", "(", "logprobs", "-", "torch", ".", "logsumexp", "(", "logprobs", ",", "dim", "=", "0", ")", ")", "# normalize", "\n", "probs", "=", "torch", ".", "cat", "(", "[", "zero_probs", ",", "probs", "]", ")", "\n", "\n", "super", "(", "Geometric", ",", "self", ")", ".", "__init__", "(", "N", "=", "max", ",", "probs", "=", "probs", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.MultivariateNormal.__init__": [[38, 57], ["isinstance", "isinstance", "gpytorch.utils.broadcasting._mul_broadcast_shape", "torch.distributions.MultivariateNormal.__init__", "torch.distributions.MultivariateNormal.__init__", "mean.size", "covariance_matrix.size", "covariance_matrix.size", "ValueError", "gp_utils.MultivariateNormal._repr_sizes"], "methods", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.baselines.run_svgp.SVGPModel.__init__", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.baselines.run_svgp.SVGPModel.__init__", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.MultivariateNormal._repr_sizes"], ["def", "__init__", "(", "self", ",", "mean", ",", "covariance_matrix", ",", "validate_args", "=", "False", ")", ":", "\n", "        ", "self", ".", "_islazy", "=", "isinstance", "(", "mean", ",", "LazyTensor", ")", "or", "isinstance", "(", "covariance_matrix", ",", "LazyTensor", ")", "\n", "if", "self", ".", "_islazy", ":", "\n", "            ", "if", "validate_args", ":", "\n", "                ", "ms", "=", "mean", ".", "size", "(", "-", "1", ")", "\n", "cs1", "=", "covariance_matrix", ".", "size", "(", "-", "1", ")", "\n", "cs2", "=", "covariance_matrix", ".", "size", "(", "-", "2", ")", "\n", "if", "not", "(", "ms", "==", "cs1", "and", "ms", "==", "cs2", ")", ":", "\n", "                    ", "raise", "ValueError", "(", "f\"Wrong shapes in {self._repr_sizes(mean, covariance_matrix)}\"", ")", "\n", "", "", "self", ".", "loc", "=", "mean", "\n", "self", ".", "_covar", "=", "covariance_matrix", "\n", "self", ".", "__unbroadcasted_scale_tril", "=", "None", "\n", "self", ".", "_validate_args", "=", "validate_args", "\n", "batch_shape", "=", "_mul_broadcast_shape", "(", "self", ".", "loc", ".", "shape", "[", ":", "-", "1", "]", ",", "covariance_matrix", ".", "shape", "[", ":", "-", "2", "]", ")", "\n", "event_shape", "=", "self", ".", "loc", ".", "shape", "[", "-", "1", ":", "]", "\n", "# TODO: Integrate argument validation for LazyTensors into torch.distribution validation logic", "\n", "super", "(", "TMultivariateNormal", ",", "self", ")", ".", "__init__", "(", "batch_shape", ",", "event_shape", ",", "validate_args", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "super", "(", ")", ".", "__init__", "(", "loc", "=", "mean", ",", "covariance_matrix", "=", "covariance_matrix", ",", "validate_args", "=", "validate_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.MultivariateNormal._unbroadcasted_scale_tril": [[66, 72], ["NotImplementedError"], "methods", ["None"], ["", "@", "_unbroadcasted_scale_tril", ".", "setter", "\n", "def", "_unbroadcasted_scale_tril", "(", "self", ",", "ust", ")", ":", "\n", "        ", "if", "self", ".", "islazy", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Cannot set _unbroadcasted_scale_tril for lazy MVN distributions\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "__unbroadcasted_scale_tril", "=", "ust", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.MultivariateNormal.add_jitter": [[73, 75], ["gp_utils.MultivariateNormal.__class__", "gp_utils.MultivariateNormal.lazy_covariance_matrix.add_jitter"], "methods", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.MultivariateNormal.add_jitter"], ["", "", "def", "add_jitter", "(", "self", ",", "noise", "=", "1e-4", ")", ":", "\n", "        ", "return", "self", ".", "__class__", "(", "self", ".", "mean", ",", "self", ".", "lazy_covariance_matrix", ".", "add_jitter", "(", "noise", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.MultivariateNormal.expand": [[76, 81], ["gp_utils.MultivariateNormal.loc.expand", "gp_utils.MultivariateNormal._covar.expand", "gp_utils.MultivariateNormal.__class__", "torch.Size", "torch.Size"], "methods", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.MultivariateNormal.expand", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.MultivariateNormal.expand"], ["", "def", "expand", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "new_loc", "=", "self", ".", "loc", ".", "expand", "(", "torch", ".", "Size", "(", "batch_size", ")", "+", "self", ".", "loc", ".", "shape", "[", "-", "1", ":", "]", ")", "\n", "new_covar", "=", "self", ".", "_covar", ".", "expand", "(", "torch", ".", "Size", "(", "batch_size", ")", "+", "self", ".", "_covar", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "res", "=", "self", ".", "__class__", "(", "new_loc", ",", "new_covar", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.MultivariateNormal.confidence_region": [[82, 95], ["gp_utils.MultivariateNormal.stddev.mul_", "mean.sub", "mean.add"], "methods", ["None"], ["", "def", "confidence_region", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns 2 standard deviations above and below the mean.\n\n        :rtype: (torch.Tensor, torch.Tensor)\n        :return: pair of tensors of size (b x d) or (d), where\n            b is the batch size and d is the dimensionality of the random\n            variable. The first (second) Tensor is the lower (upper) end of\n            the confidence region.\n        \"\"\"", "\n", "std2", "=", "self", ".", "stddev", ".", "mul_", "(", "2", ")", "\n", "mean", "=", "self", ".", "mean", "\n", "return", "mean", ".", "sub", "(", "std2", ")", ",", "mean", ".", "add", "(", "std2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.MultivariateNormal._repr_sizes": [[96, 99], ["mean.size", "covariance_matrix.size"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_repr_sizes", "(", "mean", ",", "covariance_matrix", ")", ":", "\n", "        ", "return", "f\"MultivariateNormal(loc: {mean.size()}, scale: {covariance_matrix.size()})\"", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.MultivariateNormal.covariance_matrix": [[100, 106], ["gp_utils.MultivariateNormal._covar.evaluate"], "methods", ["None"], ["", "@", "lazy_property", "\n", "def", "covariance_matrix", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "islazy", ":", "\n", "            ", "return", "self", ".", "_covar", ".", "evaluate", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "super", "(", ")", ".", "covariance_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.MultivariateNormal.get_base_samples": [[107, 113], ["torch.Size", "torch.no_grad", "gp_utils.MultivariateNormal._extended_shape", "torch.distributions.utils._standard_normal"], "methods", ["None"], ["", "", "def", "get_base_samples", "(", "self", ",", "sample_shape", "=", "torch", ".", "Size", "(", ")", ")", ":", "\n", "        ", "\"\"\"Get i.i.d. standard Normal samples (to be used with rsample(base_samples=base_samples))\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "shape", "=", "self", ".", "_extended_shape", "(", "sample_shape", ")", "\n", "base_samples", "=", "_standard_normal", "(", "shape", ",", "dtype", "=", "self", ".", "loc", ".", "dtype", ",", "device", "=", "self", ".", "loc", ".", "device", ")", "\n", "", "return", "base_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.MultivariateNormal.lazy_covariance_matrix": [[114, 123], ["gpytorch.lazify"], "methods", ["None"], ["", "@", "lazy_property", "\n", "def", "lazy_covariance_matrix", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        The covariance_matrix, represented as a LazyTensor\n        \"\"\"", "\n", "if", "self", ".", "islazy", ":", "\n", "            ", "return", "self", ".", "_covar", "\n", "", "else", ":", "\n", "            ", "return", "lazify", "(", "super", "(", ")", ".", "covariance_matrix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.MultivariateNormal.log_prob": [[124, 154], ["gpytorch.settings.fast_computations.log_prob.off", "rrcg._inv_quad_log_det.inv_quad_logdet", "super().log_prob", "gp_utils.MultivariateNormal._validate_sample", "sum", "len", "len", "diff.expand.expand.expand", "covar.repeat.repeat.repeat", "diff.expand.expand.unsqueeze", "diff.expand.expand.size", "math.log", "range", "zip", "covar.repeat.repeat.dim", "diff.expand.expand.dim"], "methods", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg._inv_quad_log_det.inv_quad_logdet", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.MultivariateNormal.log_prob", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.MultivariateNormal.expand"], ["", "", "def", "log_prob", "(", "self", ",", "value", ",", "dist_of_iter", "=", "None", ")", ":", "\n", "        ", "if", "settings", ".", "fast_computations", ".", "log_prob", ".", "off", "(", ")", ":", "\n", "            ", "return", "super", "(", ")", ".", "log_prob", "(", "value", ")", "\n", "\n", "", "if", "self", ".", "_validate_args", ":", "\n", "            ", "self", ".", "_validate_sample", "(", "value", ")", "\n", "\n", "", "mean", ",", "covar", "=", "self", ".", "loc", ",", "self", ".", "lazy_covariance_matrix", "\n", "diff", "=", "value", "-", "mean", "\n", "\n", "# Repeat the covar to match the batch shape of diff", "\n", "if", "diff", ".", "shape", "[", ":", "-", "1", "]", "!=", "covar", ".", "batch_shape", ":", "\n", "            ", "if", "len", "(", "diff", ".", "shape", "[", ":", "-", "1", "]", ")", "<", "len", "(", "covar", ".", "batch_shape", ")", ":", "\n", "                ", "diff", "=", "diff", ".", "expand", "(", "covar", ".", "shape", "[", ":", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "padded_batch_shape", "=", "(", "*", "(", "1", "for", "_", "in", "range", "(", "diff", ".", "dim", "(", ")", "+", "1", "-", "covar", ".", "dim", "(", ")", ")", ")", ",", "*", "covar", ".", "batch_shape", ")", "\n", "covar", "=", "covar", ".", "repeat", "(", "\n", "*", "(", "diff_size", "//", "covar_size", "for", "diff_size", ",", "covar_size", "in", "zip", "(", "diff", ".", "shape", "[", ":", "-", "1", "]", ",", "padded_batch_shape", ")", ")", ",", "\n", "1", ",", "\n", "1", ",", "\n", ")", "\n", "\n", "# Get log determininat and first part of quadratic form", "\n", "\n", "", "", "inv_quad", ",", "logdet", "=", "inv_quad_logdet", "(", "lazy_tsr", "=", "covar", ",", "inv_quad_rhs", "=", "diff", ".", "unsqueeze", "(", "-", "1", ")", ",", "logdet", "=", "True", ",", "\n", "dist_of_iter", "=", "dist_of_iter", ")", "\n", "#inv_quad, logdet = covar.inv_quad_logdet(inv_quad_rhs=diff.unsqueeze(-1), logdet=True)", "\n", "\n", "res", "=", "-", "0.5", "*", "sum", "(", "[", "inv_quad", ",", "logdet", ",", "diff", ".", "size", "(", "-", "1", ")", "*", "math", ".", "log", "(", "2", "*", "math", ".", "pi", ")", "]", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.MultivariateNormal.rsample": [[155, 195], ["torch.Size", "res.view.view.view", "base_samples.permute.permute.view", "base_samples.permute.permute.permute", "res.view.view.permute().contiguous", "res.view.view.view", "sample_shape.numel", "covar.zero_mean_mvn_samples", "gp_utils.MultivariateNormal.loc.unsqueeze", "RuntimeError", "covar.root_decomposition", "covar_root.matmul", "gp_utils.MultivariateNormal.loc.unsqueeze", "range", "RuntimeError", "res.view.view.permute", "base_samples.permute.permute.dim", "gp_utils.MultivariateNormal.loc.dim", "gp_utils.MultivariateNormal.loc.dim", "gp_utils.MultivariateNormal.loc.dim", "range", "gp_utils.MultivariateNormal.loc.dim"], "methods", ["None"], ["", "def", "rsample", "(", "self", ",", "sample_shape", "=", "torch", ".", "Size", "(", ")", ",", "base_samples", "=", "None", ")", ":", "\n", "        ", "covar", "=", "self", ".", "lazy_covariance_matrix", "\n", "if", "base_samples", "is", "None", ":", "\n", "# Create some samples", "\n", "            ", "num_samples", "=", "sample_shape", ".", "numel", "(", ")", "or", "1", "\n", "\n", "# Get samples", "\n", "res", "=", "covar", ".", "zero_mean_mvn_samples", "(", "num_samples", ")", "+", "self", ".", "loc", ".", "unsqueeze", "(", "0", ")", "\n", "res", "=", "res", ".", "view", "(", "sample_shape", "+", "self", ".", "loc", ".", "shape", ")", "\n", "\n", "", "else", ":", "\n", "# Make sure that the base samples agree with the distribution", "\n", "            ", "if", "self", ".", "loc", ".", "shape", "!=", "base_samples", ".", "shape", "[", "-", "self", ".", "loc", ".", "dim", "(", ")", ":", "]", ":", "\n", "                ", "raise", "RuntimeError", "(", "\n", "\"The size of base_samples (minus sample shape dimensions) should agree with the size \"", "\n", "\"of self.loc. Expected ...{} but got {}\"", ".", "format", "(", "self", ".", "loc", ".", "shape", ",", "base_samples", ".", "shape", ")", "\n", ")", "\n", "\n", "# Determine what the appropriate sample_shape parameter is", "\n", "", "sample_shape", "=", "base_samples", ".", "shape", "[", ":", "base_samples", ".", "dim", "(", ")", "-", "self", ".", "loc", ".", "dim", "(", ")", "]", "\n", "\n", "# Reshape samples to be batch_size x num_dim x num_samples", "\n", "# or num_bim x num_samples", "\n", "base_samples", "=", "base_samples", ".", "view", "(", "-", "1", ",", "*", "self", ".", "loc", ".", "shape", ")", "\n", "base_samples", "=", "base_samples", ".", "permute", "(", "*", "range", "(", "1", ",", "self", ".", "loc", ".", "dim", "(", ")", "+", "1", ")", ",", "0", ")", "\n", "\n", "# Now reparameterize those base samples", "\n", "covar_root", "=", "covar", ".", "root_decomposition", "(", ")", ".", "root", "\n", "# If necessary, adjust base_samples for rank of root decomposition", "\n", "if", "covar_root", ".", "shape", "[", "-", "1", "]", "<", "base_samples", ".", "shape", "[", "-", "2", "]", ":", "\n", "                ", "base_samples", "=", "base_samples", "[", "...", ",", ":", "covar_root", ".", "shape", "[", "-", "1", "]", ",", ":", "]", "\n", "", "elif", "covar_root", ".", "shape", "[", "-", "1", "]", ">", "base_samples", ".", "shape", "[", "-", "2", "]", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Incompatible dimension of `base_samples`\"", ")", "\n", "", "res", "=", "covar_root", ".", "matmul", "(", "base_samples", ")", "+", "self", ".", "loc", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "# Permute and reshape new samples to be original size", "\n", "res", "=", "res", ".", "permute", "(", "-", "1", ",", "*", "range", "(", "self", ".", "loc", ".", "dim", "(", ")", ")", ")", ".", "contiguous", "(", ")", "\n", "res", "=", "res", ".", "view", "(", "sample_shape", "+", "self", ".", "loc", ".", "shape", ")", "\n", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.MultivariateNormal.sample": [[196, 199], ["torch.Size", "torch.no_grad", "gp_utils.MultivariateNormal.rsample"], "methods", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.MultivariateNormal.rsample"], ["", "def", "sample", "(", "self", ",", "sample_shape", "=", "torch", ".", "Size", "(", ")", ",", "base_samples", "=", "None", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "return", "self", ".", "rsample", "(", "sample_shape", "=", "sample_shape", ",", "base_samples", "=", "base_samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.MultivariateNormal.to_data_independent_dist": [[200, 215], ["gpytorch.distributions.base_distributions.Normal"], "methods", ["None"], ["", "", "def", "to_data_independent_dist", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Convert a MVN into a batched Normal distribution\n\n        :returns: the bached data-independent Normal\n        :rtype: gpytorch.distributions.Normal\n        \"\"\"", "\n", "# Create batch distribution where all data are independent, but the tasks are dependent", "\n", "try", ":", "\n", "# If pyro is installed, use that set of base distributions", "\n", "            ", "import", "pyro", ".", "distributions", "as", "base_distributions", "\n", "", "except", "ImportError", ":", "\n", "# Otherwise, use PyTorch", "\n", "            ", "import", "torch", ".", "distributions", "as", "base_distributions", "\n", "", "return", "base_distributions", ".", "Normal", "(", "self", ".", "mean", ",", "self", ".", "stddev", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.MultivariateNormal.stddev": [[216, 220], ["gp_utils.MultivariateNormal.variance.sqrt"], "methods", ["None"], ["", "@", "property", "\n", "def", "stddev", "(", "self", ")", ":", "\n", "# self.variance is guaranteed to be positive, because we do clamping.", "\n", "        ", "return", "self", ".", "variance", ".", "sqrt", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.MultivariateNormal.variance": [[221, 243], ["gpytorch.settings.min_variance.value", "variance.clamp_min.clamp_min.lt().any", "gp_utils.MultivariateNormal.lazy_covariance_matrix.evaluate_kernel().diag", "diag.view.view.view", "diag.view.view.expand", "warnings.warn", "variance.clamp_min.clamp_min.clamp_min", "variance.clamp_min.clamp_min.lt", "gp_utils.MultivariateNormal.lazy_covariance_matrix.evaluate_kernel"], "methods", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.MultivariateNormal.expand"], ["", "@", "property", "\n", "def", "variance", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "islazy", ":", "\n", "# overwrite this since torch MVN uses unbroadcasted_scale_tril for this", "\n", "            ", "diag", "=", "self", ".", "lazy_covariance_matrix", ".", "evaluate_kernel", "(", ")", ".", "diag", "(", ")", "\n", "diag", "=", "diag", ".", "view", "(", "diag", ".", "shape", "[", ":", "-", "1", "]", "+", "self", ".", "_event_shape", ")", "\n", "variance", "=", "diag", ".", "expand", "(", "self", ".", "_batch_shape", "+", "self", ".", "_event_shape", ")", "\n", "", "else", ":", "\n", "            ", "variance", "=", "super", "(", ")", ".", "variance", "\n", "\n", "# Check to make sure that variance isn't lower than minimum allowed value (default 1e-6).", "\n", "# This ensures that all variances are positive", "\n", "", "min_variance", "=", "settings", ".", "min_variance", ".", "value", "(", "variance", ".", "dtype", ")", "\n", "if", "variance", ".", "lt", "(", "min_variance", ")", ".", "any", "(", ")", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "f\"Negative variance values detected. \"", "\n", "\"This is likely due to numerical instabilities. \"", "\n", "f\"Rounding negative variances up to {min_variance}.\"", ",", "\n", "NumericalWarning", ",", "\n", ")", "\n", "variance", "=", "variance", ".", "clamp_min", "(", "min_variance", ")", "\n", "", "return", "variance", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.MultivariateNormal.__add__": [[244, 254], ["isinstance", "gp_utils.MultivariateNormal.__class__", "isinstance", "isinstance", "gp_utils.MultivariateNormal.__class__", "RuntimeError", "type"], "methods", ["None"], ["", "def", "__add__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "isinstance", "(", "other", ",", "MultivariateNormal", ")", ":", "\n", "            ", "return", "self", ".", "__class__", "(", "\n", "mean", "=", "self", ".", "mean", "+", "other", ".", "mean", ",", "\n", "covariance_matrix", "=", "(", "self", ".", "lazy_covariance_matrix", "+", "other", ".", "lazy_covariance_matrix", ")", ",", "\n", ")", "\n", "", "elif", "isinstance", "(", "other", ",", "int", ")", "or", "isinstance", "(", "other", ",", "float", ")", ":", "\n", "            ", "return", "self", ".", "__class__", "(", "self", ".", "mean", "+", "other", ",", "self", ".", "lazy_covariance_matrix", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Unsupported type {} for addition w/ MultivariateNormal\"", ".", "format", "(", "type", "(", "other", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.MultivariateNormal.__radd__": [[255, 259], ["gp_utils.MultivariateNormal.__add__"], "methods", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.MultivariateNormal.__add__"], ["", "", "def", "__radd__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "other", "==", "0", ":", "\n", "            ", "return", "self", "\n", "", "return", "self", ".", "__add__", "(", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.MultivariateNormal.__mul__": [[260, 266], ["gp_utils.MultivariateNormal.__class__", "RuntimeError", "isinstance", "isinstance"], "methods", ["None"], ["", "def", "__mul__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "not", "(", "isinstance", "(", "other", ",", "int", ")", "or", "isinstance", "(", "other", ",", "float", ")", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Can only multiply by scalars\"", ")", "\n", "", "if", "other", "==", "1", ":", "\n", "            ", "return", "self", "\n", "", "return", "self", ".", "__class__", "(", "mean", "=", "self", ".", "mean", "*", "other", ",", "covariance_matrix", "=", "self", ".", "lazy_covariance_matrix", "*", "(", "other", "**", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.MultivariateNormal.__truediv__": [[267, 269], ["gp_utils.MultivariateNormal.__mul__"], "methods", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.MultivariateNormal.__mul__"], ["", "def", "__truediv__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "__mul__", "(", "1.0", "/", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.MultivariateNormal.__getitem__": [[270, 293], ["gp_utils.MultivariateNormal.__class__", "isinstance", "len", "len", "gp_utils.MultivariateNormal.mean.dim", "IndexError", "isinstance", "gp_utils.MultivariateNormal.mean.dim", "gpytorch.lazy.DiagLazyTensor", "isinstance", "gp_utils.MultivariateNormal.lazy_covariance_matrix.diag", "slice"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "idx", ",", "tuple", ")", ":", "\n", "            ", "idx", "=", "(", "idx", ",", ")", "\n", "", "rest_idx", "=", "idx", "[", ":", "-", "1", "]", "\n", "last_idx", "=", "idx", "[", "-", "1", "]", "\n", "new_mean", "=", "self", ".", "mean", "[", "idx", "]", "\n", "\n", "if", "len", "(", "idx", ")", "<=", "self", ".", "mean", ".", "dim", "(", ")", "-", "1", "and", "(", "Ellipsis", "not", "in", "rest_idx", ")", ":", "\n", "            ", "new_cov", "=", "self", ".", "lazy_covariance_matrix", "[", "idx", "]", "\n", "", "elif", "len", "(", "idx", ")", ">", "self", ".", "mean", ".", "dim", "(", ")", ":", "\n", "            ", "raise", "IndexError", "(", "f\"Index {idx} has too many dimensions\"", ")", "\n", "", "else", ":", "\n", "# In this case we know last_idx corresponds to the last dimension", "\n", "# of mean and the last two dimensions of lazy_covariance_matrix", "\n", "            ", "if", "isinstance", "(", "last_idx", ",", "int", ")", ":", "\n", "                ", "new_cov", "=", "DiagLazyTensor", "(", "self", ".", "lazy_covariance_matrix", ".", "diag", "(", ")", "[", "(", "*", "rest_idx", ",", "last_idx", ")", "]", ")", "\n", "", "elif", "isinstance", "(", "last_idx", ",", "slice", ")", ":", "\n", "                ", "new_cov", "=", "self", ".", "lazy_covariance_matrix", "[", "(", "*", "rest_idx", ",", "last_idx", ",", "last_idx", ")", "]", "\n", "", "elif", "last_idx", "is", "(", "...", ")", ":", "\n", "                ", "new_cov", "=", "self", ".", "lazy_covariance_matrix", "[", "rest_idx", "]", "\n", "", "else", ":", "\n", "                ", "new_cov", "=", "self", ".", "lazy_covariance_matrix", "[", "(", "*", "rest_idx", ",", "last_idx", ",", "slice", "(", "None", ",", "None", ",", "None", ")", ")", "]", "[", "...", ",", "last_idx", "]", "\n", "", "", "return", "self", ".", "__class__", "(", "mean", "=", "new_mean", ",", "covariance_matrix", "=", "new_cov", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.GPRegressionModel.__init__": [[296, 355], ["gpytorch.module.Module.__init__", "gpytorch.means.ZeroMean", "gpytorch.kernels.ScaleKernel", "torch.cuda.is_available", "torch.is_tensor", "RuntimeError", "tuple", "gpytorch.kernels.keops.RBFKernel", "gpytorch.kernels.RBFKernel", "all", "gpytorch.kernels.keops.MaternKernel", "gpytorch.kernels.MaternKernel", "gpytorch.kernels.keops.MaternKernel", "gpytorch.kernels.MaternKernel", "torch.is_tensor", "tri.unsqueeze", "gpytorch.kernels.keops.MaternKernel", "gpytorch.kernels.MaternKernel", "tri.ndimension", "ValueError", "ValueError", "print", "gpytorch.kernels.keops.RBFKernel", "print", "gpytorch.kernels.RBFKernel"], "methods", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.baselines.run_svgp.SVGPModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "train_inputs", ",", "train_targets", ",", "likelihood", ",", "kernel_type", "=", "'rbf'", ",", "use_keops", "=", "True", ",", "ard_dim", "=", "None", ")", ":", "\n", "        ", "super", "(", "GPRegressionModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#self.mean_module = gpytorch.means.ConstantMean()", "\n", "self", ".", "mean_module", "=", "gpytorch", ".", "means", ".", "ZeroMean", "(", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "use_keops", ":", "\n", "            ", "if", "kernel_type", "==", "'rbf'", ":", "\n", "                ", "kernel", "=", "gpytorch", ".", "kernels", ".", "keops", ".", "RBFKernel", "(", ")", "\n", "", "elif", "kernel_type", "==", "'matern05'", ":", "\n", "                ", "kernel", "=", "gpytorch", ".", "kernels", ".", "keops", ".", "MaternKernel", "(", "nu", "=", "0.5", ")", "\n", "", "elif", "kernel_type", "==", "'matern15'", ":", "\n", "                ", "kernel", "=", "gpytorch", ".", "kernels", ".", "keops", ".", "MaternKernel", "(", "nu", "=", "1.5", ")", "\n", "", "elif", "kernel_type", "==", "'matern25'", ":", "\n", "                ", "kernel", "=", "gpytorch", ".", "kernels", ".", "keops", ".", "MaternKernel", "(", "nu", "=", "2.5", ")", "\n", "", "elif", "kernel_type", "==", "'rbf-ard'", ":", "\n", "                ", "if", "ard_dim", "is", "None", ":", "\n", "                    ", "ard_dim", "=", "train_inputs", ".", "shape", "[", "-", "1", "]", "\n", "print", "(", "f\"Getting ard_dim from training input, ard_dim = {ard_dim}\"", ")", "\n", "kernel", "=", "gpytorch", ".", "kernels", ".", "keops", ".", "RBFKernel", "(", "ard_num_dims", "=", "ard_dim", ")", "\n", "", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"kernel_type must be chosen among {}, but got {}.\"", ".", "format", "(", "\n", "[", "'rbf'", ",", "'matern05'", ",", "'matern15'", ",", "'matern25'", "]", ",", "kernel_type", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "kernel_type", "==", "'rbf'", ":", "\n", "                ", "kernel", "=", "gpytorch", ".", "kernels", ".", "RBFKernel", "(", ")", "\n", "", "elif", "kernel_type", "==", "'matern05'", ":", "\n", "                ", "kernel", "=", "gpytorch", ".", "kernels", ".", "MaternKernel", "(", "nu", "=", "0.5", ")", "\n", "", "elif", "kernel_type", "==", "'matern15'", ":", "\n", "                ", "kernel", "=", "gpytorch", ".", "kernels", ".", "MaternKernel", "(", "nu", "=", "1.5", ")", "\n", "", "elif", "kernel_type", "==", "'matern25'", ":", "\n", "                ", "kernel", "=", "gpytorch", ".", "kernels", ".", "MaternKernel", "(", "nu", "=", "2.5", ")", "\n", "", "elif", "kernel_type", "==", "'rbf-ard'", ":", "\n", "                ", "if", "ard_dim", "is", "None", ":", "\n", "                    ", "ard_dim", "=", "train_inputs", ".", "shape", "[", "-", "1", "]", "\n", "print", "(", "f\"Getting ard_dim from training input, ard_dim = {ard_dim}\"", ")", "\n", "kernel", "=", "gpytorch", ".", "kernels", ".", "RBFKernel", "(", "ard_num_dims", "=", "ard_dim", ")", "\n", "", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"kernel_type must be chosen among {}, but got {}.\"", ".", "format", "(", "\n", "[", "'rbf'", ",", "'matern05'", ",", "'matern15'", ",", "'matern25'", "]", ",", "kernel_type", ")", ")", "\n", "\n", "", "", "self", ".", "covar_module", "=", "gpytorch", ".", "kernels", ".", "ScaleKernel", "(", "\n", "kernel", ",", "\n", ")", "\n", "\n", "if", "train_inputs", "is", "not", "None", "and", "torch", ".", "is_tensor", "(", "train_inputs", ")", ":", "\n", "            ", "train_inputs", "=", "(", "train_inputs", ",", ")", "\n", "", "if", "train_inputs", "is", "not", "None", "and", "not", "all", "(", "torch", ".", "is_tensor", "(", "train_input", ")", "for", "train_input", "in", "train_inputs", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Train inputs must be a tensor, or a list/tuple of tensors\"", ")", "\n", "\n", "", "if", "train_inputs", "is", "not", "None", ":", "\n", "            ", "self", ".", "train_inputs", "=", "tuple", "(", "tri", ".", "unsqueeze", "(", "-", "1", ")", "if", "tri", ".", "ndimension", "(", ")", "==", "1", "else", "tri", "for", "tri", "in", "train_inputs", ")", "\n", "self", ".", "train_targets", "=", "train_targets", "\n", "", "else", ":", "\n", "            ", "self", ".", "train_inputs", "=", "None", "\n", "self", ".", "train_targets", "=", "None", "\n", "\n", "", "self", ".", "likelihood", "=", "likelihood", "\n", "\n", "self", ".", "prediction_strategy", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.GPRegressionModel.forward": [[356, 360], ["gp_utils.GPRegressionModel.mean_module", "gp_utils.GPRegressionModel.covar_module", "gp_utils.MultivariateNormal"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "mean_x", "=", "self", ".", "mean_module", "(", "x", ")", "\n", "covar_x", "=", "self", ".", "covar_module", "(", "x", ")", "\n", "return", "MultivariateNormal", "(", "mean_x", ",", "covar_x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.GPRegressionModel.__call__": [[361, 442], ["list", "gpytorch.settings.debug.on", "super().__call__", "i.unsqueeze", "RuntimeError", "gpytorch.settings.prior_mode.on", "super().__call__", "gpytorch.settings.debug().on", "gpytorch.settings.debug.on", "zip", "super().__call__", "gpytorch.settings.debug().on", "torch.Size", "predictive_mean.view().contiguous.view().contiguous.view().contiguous", "gpytorch.module.Module.__class__", "i.ndimension", "all", "RuntimeError", "all", "super().__call__", "gpytorch.models.exact_prediction_strategies.prediction_strategy", "full_inputs.append", "gpytorch.settings._use_eval_tolerance", "gp_utils.GPRegressionModel.prediction_strategy.exact_prediction", "gpytorch.settings.debug", "isinstance", "RuntimeError", "warnings.warn", "gpytorch.utils.broadcasting._mul_broadcast_shape", "train_input.expand.expand.expand", "gpytorch.utils.broadcasting._mul_broadcast_shape", "train_input.expand.expand.expand", "input.expand.expand.expand", "torch.cat", "gpytorch.settings.debug", "isinstance", "RuntimeError", "predictive_mean.view().contiguous.view().contiguous.view", "torch.equal", "torch.equal", "zip", "zip"], "methods", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.GaussianLikelihood.__call__", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.GaussianLikelihood.__call__", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.GaussianLikelihood.__call__", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.GaussianLikelihood.__call__", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.rr_rff.RR_RFF_Kernel.prediction_strategy", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.MultivariateNormal.expand", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.MultivariateNormal.expand", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.MultivariateNormal.expand"], ["", "def", "__call__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "train_inputs", "=", "list", "(", "self", ".", "train_inputs", ")", "if", "self", ".", "train_inputs", "is", "not", "None", "else", "[", "]", "\n", "inputs", "=", "[", "i", ".", "unsqueeze", "(", "-", "1", ")", "if", "i", ".", "ndimension", "(", ")", "==", "1", "else", "i", "for", "i", "in", "args", "]", "\n", "\n", "# Training mode: optimizing", "\n", "if", "self", ".", "training", ":", "\n", "            ", "if", "self", ".", "train_inputs", "is", "None", ":", "\n", "                ", "raise", "RuntimeError", "(", "\n", "\"train_inputs, train_targets cannot be None in training mode. \"", "\n", "\"Call .eval() for prior predictions, or call .set_train_data() to add training data.\"", "\n", ")", "\n", "", "if", "settings", ".", "debug", ".", "on", "(", ")", ":", "\n", "                ", "if", "not", "all", "(", "torch", ".", "equal", "(", "train_input", ",", "input", ")", "for", "train_input", ",", "input", "in", "zip", "(", "train_inputs", ",", "inputs", ")", ")", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\"You must train on the training inputs!\"", ")", "\n", "", "", "res", "=", "super", "(", ")", ".", "__call__", "(", "*", "inputs", ",", "**", "kwargs", ")", "\n", "return", "res", "\n", "\n", "# Prior mode", "\n", "", "elif", "settings", ".", "prior_mode", ".", "on", "(", ")", "or", "self", ".", "train_inputs", "is", "None", "or", "self", ".", "train_targets", "is", "None", ":", "\n", "            ", "full_inputs", "=", "args", "\n", "full_output", "=", "super", "(", "GPRegressionModel", ",", "self", ")", ".", "__call__", "(", "*", "full_inputs", ",", "**", "kwargs", ")", "\n", "if", "settings", ".", "debug", "(", ")", ".", "on", "(", ")", ":", "\n", "                ", "if", "not", "isinstance", "(", "full_output", ",", "MultivariateNormal", ")", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\"ExactGP.forward must return a MultivariateNormal\"", ")", "\n", "", "", "return", "full_output", "\n", "\n", "# Posterior mode", "\n", "", "else", ":", "\n", "            ", "if", "settings", ".", "debug", ".", "on", "(", ")", ":", "\n", "                ", "if", "all", "(", "torch", ".", "equal", "(", "train_input", ",", "input", ")", "for", "train_input", ",", "input", "in", "zip", "(", "train_inputs", ",", "inputs", ")", ")", ":", "\n", "                    ", "warnings", ".", "warn", "(", "\n", "\"The input matches the stored training data. Did you forget to call model.train()?\"", ",", "\n", "GPInputWarning", ",", "\n", ")", "\n", "\n", "# Get the terms that only depend on training data", "\n", "", "", "if", "self", ".", "prediction_strategy", "is", "None", ":", "\n", "                ", "train_output", "=", "super", "(", ")", ".", "__call__", "(", "*", "train_inputs", ",", "**", "kwargs", ")", "\n", "\n", "# Create the prediction strategy for", "\n", "self", ".", "prediction_strategy", "=", "prediction_strategy", "(", "\n", "train_inputs", "=", "train_inputs", ",", "\n", "train_prior_dist", "=", "train_output", ",", "\n", "train_labels", "=", "self", ".", "train_targets", ",", "\n", "likelihood", "=", "self", ".", "likelihood", ",", "\n", ")", "\n", "\n", "# Concatenate the input to the training input", "\n", "", "full_inputs", "=", "[", "]", "\n", "batch_shape", "=", "train_inputs", "[", "0", "]", ".", "shape", "[", ":", "-", "2", "]", "\n", "for", "train_input", ",", "input", "in", "zip", "(", "train_inputs", ",", "inputs", ")", ":", "\n", "# Make sure the batch shapes agree for training/test data", "\n", "                ", "if", "batch_shape", "!=", "train_input", ".", "shape", "[", ":", "-", "2", "]", ":", "\n", "                    ", "batch_shape", "=", "_mul_broadcast_shape", "(", "batch_shape", ",", "train_input", ".", "shape", "[", ":", "-", "2", "]", ")", "\n", "train_input", "=", "train_input", ".", "expand", "(", "*", "batch_shape", ",", "*", "train_input", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "", "if", "batch_shape", "!=", "input", ".", "shape", "[", ":", "-", "2", "]", ":", "\n", "                    ", "batch_shape", "=", "_mul_broadcast_shape", "(", "batch_shape", ",", "input", ".", "shape", "[", ":", "-", "2", "]", ")", "\n", "train_input", "=", "train_input", ".", "expand", "(", "*", "batch_shape", ",", "*", "train_input", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "input", "=", "input", ".", "expand", "(", "*", "batch_shape", ",", "*", "input", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "", "full_inputs", ".", "append", "(", "torch", ".", "cat", "(", "[", "train_input", ",", "input", "]", ",", "dim", "=", "-", "2", ")", ")", "\n", "\n", "# Get the joint distribution for training/test data", "\n", "", "full_output", "=", "super", "(", "GPRegressionModel", ",", "self", ")", ".", "__call__", "(", "*", "full_inputs", ",", "**", "kwargs", ")", "\n", "if", "settings", ".", "debug", "(", ")", ".", "on", "(", ")", ":", "\n", "                ", "if", "not", "isinstance", "(", "full_output", ",", "MultivariateNormal", ")", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\"ExactGP.forward must return a MultivariateNormal\"", ")", "\n", "", "", "full_mean", ",", "full_covar", "=", "full_output", ".", "loc", ",", "full_output", ".", "lazy_covariance_matrix", "\n", "\n", "# Determine the shape of the joint distribution", "\n", "batch_shape", "=", "full_output", ".", "batch_shape", "\n", "joint_shape", "=", "full_output", ".", "event_shape", "\n", "tasks_shape", "=", "joint_shape", "[", "1", ":", "]", "# For multitask learning", "\n", "test_shape", "=", "torch", ".", "Size", "(", "[", "joint_shape", "[", "0", "]", "-", "self", ".", "prediction_strategy", ".", "train_shape", "[", "0", "]", ",", "*", "tasks_shape", "]", ")", "\n", "\n", "# Make the prediction", "\n", "with", "settings", ".", "_use_eval_tolerance", "(", ")", ":", "\n", "                ", "predictive_mean", ",", "predictive_covar", "=", "self", ".", "prediction_strategy", ".", "exact_prediction", "(", "full_mean", ",", "full_covar", ")", "\n", "\n", "# Reshape predictive mean to match the appropriate event shape", "\n", "", "predictive_mean", "=", "predictive_mean", ".", "view", "(", "*", "batch_shape", ",", "*", "test_shape", ")", ".", "contiguous", "(", ")", "\n", "return", "full_output", ".", "__class__", "(", "predictive_mean", ",", "predictive_covar", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.GaussianLikelihood.__init__": [[445, 451], ["torch.Size", "gpytorch.module.Module.__init__", "gpytorch.likelihoods.noise_models.HomoskedasticNoise"], "methods", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.baselines.run_svgp.SVGPModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "noise_prior", "=", "None", ",", "noise_constraint", "=", "None", ",", "batch_shape", "=", "torch", ".", "Size", "(", ")", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "noise_covar", "=", "HomoskedasticNoise", "(", "\n", "noise_prior", "=", "noise_prior", ",", "noise_constraint", "=", "noise_constraint", ",", "batch_shape", "=", "batch_shape", "\n", ")", "\n", "self", ".", "noise_covar", "=", "noise_covar", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.GaussianLikelihood.__call__": [[452, 456], ["isinstance", "gp_utils.GaussianLikelihood.marginal"], "methods", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.GaussianLikelihood.marginal"], ["", "def", "__call__", "(", "self", ",", "input", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "# Marginal", "\n", "        ", "assert", "isinstance", "(", "input", ",", "MultivariateNormal", ")", "\n", "return", "self", ".", "marginal", "(", "input", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.GaussianLikelihood.noise": [[461, 464], ["gp_utils.GaussianLikelihood.noise_covar.initialize"], "methods", ["None"], ["", "@", "noise", ".", "setter", "\n", "def", "noise", "(", "self", ",", "value", ":", "Tensor", ")", "->", "None", ":", "\n", "        ", "self", ".", "noise_covar", ".", "initialize", "(", "noise", "=", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.GaussianLikelihood.raw_noise": [[469, 472], ["gp_utils.GaussianLikelihood.noise_covar.initialize"], "methods", ["None"], ["", "@", "raw_noise", ".", "setter", "\n", "def", "raw_noise", "(", "self", ",", "value", ":", "Tensor", ")", "->", "None", ":", "\n", "        ", "self", ".", "noise_covar", ".", "initialize", "(", "raw_noise", "=", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.GaussianLikelihood.log_marginal": [[473, 485], ["gp_utils.GaussianLikelihood.marginal", "gpytorch.distributions.base_distributions.Normal", "gpytorch.distributions.base_distributions.Normal.log_prob", "len", "gp_utils.GaussianLikelihood.variance.clamp_min().sqrt", "res.sum.sum.sum", "list", "gp_utils.GaussianLikelihood.variance.clamp_min", "range"], "methods", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.GaussianLikelihood.marginal", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.MultivariateNormal.log_prob"], ["", "def", "log_marginal", "(", "\n", "self", ",", "observations", ":", "Tensor", ",", "function_dist", ":", "MultivariateNormal", ",", "*", "params", ":", "Any", ",", "**", "kwargs", ":", "Any", "\n", ")", "->", "Tensor", ":", "\n", "        ", "marginal", "=", "self", ".", "marginal", "(", "function_dist", ",", "*", "params", ",", "**", "kwargs", ")", "\n", "# We're making everything conditionally independent", "\n", "indep_dist", "=", "base_distributions", ".", "Normal", "(", "marginal", ".", "mean", ",", "marginal", ".", "variance", ".", "clamp_min", "(", "1e-8", ")", ".", "sqrt", "(", ")", ")", "\n", "res", "=", "indep_dist", ".", "log_prob", "(", "observations", ")", "\n", "\n", "num_event_dim", "=", "len", "(", "function_dist", ".", "event_shape", ")", "\n", "if", "num_event_dim", ">", "1", ":", "\n", "            ", "res", "=", "res", ".", "sum", "(", "list", "(", "range", "(", "0", ",", "-", "num_event_dim", ",", "-", "1", ")", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.GaussianLikelihood.marginal": [[486, 491], ["gp_utils.GaussianLikelihood.noise_covar", "function_dist.__class__"], "methods", ["None"], ["", "def", "marginal", "(", "self", ",", "function_dist", ":", "MultivariateNormal", ",", "*", "params", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "MultivariateNormal", ":", "\n", "        ", "mean", ",", "covar", "=", "function_dist", ".", "mean", ",", "function_dist", ".", "lazy_covariance_matrix", "\n", "noise_covar", "=", "self", ".", "noise_covar", "(", "*", "params", ",", "shape", "=", "mean", ".", "shape", ",", "**", "kwargs", ")", "\n", "full_covar", "=", "covar", "+", "noise_covar", "\n", "return", "function_dist", ".", "__class__", "(", "mean", ",", "full_covar", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.GaussianLikelihood.log_marginal_from_marginal": [[492, 505], ["gpytorch.distributions.base_distributions.Normal", "gpytorch.distributions.base_distributions.Normal.log_prob", "len", "len", "marginal.variance.clamp_min().sqrt", "res.sum.sum.sum", "res.sum.sum.sum", "list", "list", "marginal.variance.clamp_min", "range", "range"], "methods", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.MultivariateNormal.log_prob"], ["", "def", "log_marginal_from_marginal", "(", "\n", "self", ",", "marginal", ":", "MultivariateNormal", ",", "observations", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "indep_dist", "=", "base_distributions", ".", "Normal", "(", "marginal", ".", "mean", ",", "marginal", ".", "variance", ".", "clamp_min", "(", "1e-8", ")", ".", "sqrt", "(", ")", ")", "\n", "res", "=", "indep_dist", ".", "log_prob", "(", "observations", ")", "\n", "\n", "num_event_dim", "=", "len", "(", "marginal", ".", "event_shape", ")", "\n", "if", "num_event_dim", ">", "1", ":", "\n", "            ", "res", "=", "res", ".", "sum", "(", "list", "(", "range", "(", "0", ",", "-", "num_event_dim", ",", "-", "1", ")", ")", ")", "\n", "\n", "", "num_event_dim", "=", "len", "(", "marginal", ".", "event_shape", ")", "\n", "if", "num_event_dim", ">", "1", ":", "\n", "            ", "res", "=", "res", ".", "sum", "(", "list", "(", "range", "(", "0", ",", "-", "num_event_dim", ",", "-", "1", ")", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.MLL.__init__": [[508, 512], ["gpytorch.module.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.baselines.run_svgp.SVGPModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "likelihood", ",", "model", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "likelihood", "=", "likelihood", "\n", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.MLL.forward": [[513, 522], ["gp_utils.MLL.likelihood", "gp_utils.MLL.log_prob", "target.size", "gp_utils.MLL.log_prob.div_"], "methods", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.MultivariateNormal.log_prob"], ["", "def", "forward", "(", "self", ",", "function_dist", ",", "target", ",", "*", "params", ",", "dist_of_iter", "=", "None", ")", ":", "\n", "        ", "output", "=", "self", ".", "likelihood", "(", "function_dist", ",", "*", "params", ")", "\n", "\n", "res", "=", "output", ".", "log_prob", "(", "target", ",", "dist_of_iter", ")", "\n", "# res = self._add_other_terms(res, params)", "\n", "\n", "# Scale by the amount of data we have", "\n", "num_data", "=", "target", ".", "size", "(", "-", "1", ")", "\n", "return", "res", ".", "div_", "(", "num_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.CholeskyModel.__init__": [[525, 531], ["super().__init__", "gpytorch.means.ZeroMean", "gpytorch.kernels.ScaleKernel", "gpytorch.kernels.RBFKernel"], "methods", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.baselines.run_svgp.SVGPModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "train_x", ",", "train_y", ",", "likelihood", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "train_x", ",", "train_y", ",", "likelihood", ")", "\n", "#self.mean_module = gpytorch.means.ConstantMean()", "\n", "self", ".", "mean_module", "=", "gpytorch", ".", "means", ".", "ZeroMean", "(", ")", "\n", "self", ".", "covar_module", "=", "gpytorch", ".", "kernels", ".", "ScaleKernel", "(", "\n", "gpytorch", ".", "kernels", ".", "RBFKernel", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.CholeskyModel.forward": [[533, 537], ["gp_utils.CholeskyModel.mean_module", "gp_utils.CholeskyModel.covar_module", "gpytorch.distributions.MultivariateNormal"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "mean_x", "=", "self", ".", "mean_module", "(", "x", ")", "\n", "covar_x", "=", "self", ".", "covar_module", "(", "x", ")", "\n", "return", "gpytorch", ".", "distributions", ".", "MultivariateNormal", "(", "mean_x", ",", "covar_x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.get_inv_quad_logdet": [[539, 595], ["model.likelihood", "gpytorch.settings.prior_mode", "model", "torch.no_grad", "len", "len", "diff.expand.expand", "covar.repeat.repeat", "gpytorch.settings.max_cholesky_size", "gpytorch.settings.max_cholesky_size", "rrcg._inv_quad_log_det.inv_quad_logdet", "gpytorch.settings.cg_tolerance", "inv_quad.item", "logdet.item", "gpytorch.settings.max_cg_iterations", "diff.expand.unsqueeze", "rrcg.rr_settings.use_rr_cg", "gpytorch.settings.max_lanczos_quadrature_iterations", "rrcg._inv_quad_log_det.inv_quad_logdet", "range", "zip", "rrcg.rr_settings.use_rr_lanczos", "range", "covar.repeat.inv_quad_logdet", "inv_quad.item", "logdet.item", "rrcg._inv_quad_log_det.inv_quad_logdet", "inv_quad_list.append", "logdet_list.append", "diff.expand.unsqueeze", "covar.repeat.dim", "inv_quad.item", "logdet.item", "diff.expand.unsqueeze", "diff.expand.dim", "diff.expand.unsqueeze"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.MultivariateNormal.expand", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg._inv_quad_log_det.inv_quad_logdet", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg._inv_quad_log_det.inv_quad_logdet", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg._inv_quad_log_det.inv_quad_logdet", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg._inv_quad_log_det.inv_quad_logdet"], ["", "", "def", "get_inv_quad_logdet", "(", "model", ",", "train_x", ",", "train_y", ",", "method", "=", "'cholesky'", ",", "num_cg", "=", "None", ",", "dist_of_iter", "=", "False", ",", "\n", "rr_sample_num", "=", "1", ",", "use_gpytorch", "=", "False", ")", ":", "\n", "\n", "    ", "with", "settings", ".", "prior_mode", "(", ")", ":", "\n", "        ", "output", "=", "model", "(", "train_x", ")", "# Multivariate Normal", "\n", "", "marginal_output", "=", "model", ".", "likelihood", "(", "output", ",", "train_y", ",", "dist_of_iter", "=", "dist_of_iter", ")", "\n", "\n", "mean", ",", "covar", "=", "marginal_output", ".", "loc", ",", "marginal_output", ".", "lazy_covariance_matrix", "\n", "diff", "=", "train_y", "-", "mean", "\n", "# Repeat the covar to match the batch shape of diff", "\n", "if", "diff", ".", "shape", "[", ":", "-", "1", "]", "!=", "covar", ".", "batch_shape", ":", "\n", "        ", "if", "len", "(", "diff", ".", "shape", "[", ":", "-", "1", "]", ")", "<", "len", "(", "covar", ".", "batch_shape", ")", ":", "\n", "            ", "diff", "=", "diff", ".", "expand", "(", "covar", ".", "shape", "[", ":", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "padded_batch_shape", "=", "(", "*", "(", "1", "for", "_", "in", "range", "(", "diff", ".", "dim", "(", ")", "+", "1", "-", "covar", ".", "dim", "(", ")", ")", ")", ",", "*", "covar", ".", "batch_shape", ")", "\n", "covar", "=", "covar", ".", "repeat", "(", "\n", "*", "(", "diff_size", "//", "covar_size", "for", "diff_size", ",", "covar_size", "in", "zip", "(", "diff", ".", "shape", "[", ":", "-", "1", "]", ",", "padded_batch_shape", ")", ")", ",", "\n", "1", ",", "\n", "1", ",", "\n", ")", "\n", "\n", "", "", "from", "rrcg", ".", "_inv_quad_log_det", "import", "inv_quad_logdet", "\n", "# Get log determininat and first part of quadratic form", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "if", "method", "==", "'cholesky'", ":", "\n", "            ", "with", "gpytorch", ".", "settings", ".", "max_cholesky_size", "(", "1000000", ")", ":", "\n", "                ", "inv_quad", ",", "logdet", "=", "inv_quad_logdet", "(", "lazy_tsr", "=", "covar", ",", "inv_quad_rhs", "=", "diff", ".", "unsqueeze", "(", "-", "1", ")", ",", "logdet", "=", "True", ",", "\n", "dist_of_iter", "=", "dist_of_iter", ")", "\n", "return", "inv_quad", ".", "item", "(", ")", ",", "logdet", ".", "item", "(", ")", "\n", "", "", "with", "gpytorch", ".", "settings", ".", "max_cholesky_size", "(", "0", ")", ":", "\n", "            ", "with", "gpytorch", ".", "settings", ".", "cg_tolerance", "(", "1e-50", ")", ":", "\n", "                ", "if", "method", "==", "'rrcg'", ":", "\n", "                    ", "inv_quad_list", "=", "[", "]", "\n", "logdet_list", "=", "[", "]", "\n", "with", "rr_settings", ".", "use_rr_cg", "(", ")", ":", "\n", "                        ", "with", "rr_settings", ".", "use_rr_lanczos", "(", ")", ":", "\n", "                            ", "for", "i", "in", "range", "(", "rr_sample_num", ")", ":", "\n", "                                ", "inv_quad", ",", "logdet", "=", "inv_quad_logdet", "(", "lazy_tsr", "=", "covar", ",", "inv_quad_rhs", "=", "diff", ".", "unsqueeze", "(", "-", "1", ")", ",", "logdet", "=", "True", ",", "\n", "dist_of_iter", "=", "dist_of_iter", ")", "\n", "inv_quad_list", ".", "append", "(", "inv_quad", ".", "item", "(", ")", ")", "\n", "logdet_list", ".", "append", "(", "logdet", ".", "item", "(", ")", ")", "\n", "", "", "", "if", "rr_sample_num", "==", "1", ":", "\n", "                        ", "return", "inv_quad_list", "[", "0", "]", ",", "logdet_list", "[", "0", "]", "\n", "", "return", "inv_quad_list", ",", "logdet_list", "\n", "\n", "# otherwise, use cg", "\n", "", "assert", "method", "==", "'cg'", ",", "method", "\n", "assert", "num_cg", "is", "not", "None", "\n", "with", "gpytorch", ".", "settings", ".", "max_cg_iterations", "(", "num_cg", ")", ":", "\n", "                    ", "with", "gpytorch", ".", "settings", ".", "max_lanczos_quadrature_iterations", "(", "num_cg", ")", ":", "\n", "                        ", "if", "use_gpytorch", ":", "\n", "                            ", "return", "covar", ".", "inv_quad_logdet", "(", "inv_quad_rhs", "=", "diff", ".", "unsqueeze", "(", "-", "1", ")", ",", "logdet", "=", "True", ")", "\n", "", "inv_quad", ",", "logdet", "=", "inv_quad_logdet", "(", "lazy_tsr", "=", "covar", ",", "inv_quad_rhs", "=", "diff", ".", "unsqueeze", "(", "-", "1", ")", ",", "logdet", "=", "True", ",", "\n", "dist_of_iter", "=", "dist_of_iter", ")", "\n", "return", "inv_quad", ".", "item", "(", ")", ",", "logdet", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.linear_cg._default_preconditioner": [[8, 10], ["x.clone"], "function", ["None"], ["def", "_default_preconditioner", "(", "x", ")", ":", "\n", "    ", "return", "x", ".", "clone", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.linear_cg.linear_cg_rr": [[12, 313], ["rhs.unsqueeze.size", "torch.is_tensor", "min", "torch.tensor", "rhs.unsqueeze.norm", "rhs_norm.masked_fill_.lt", "rhs_norm.masked_fill_.masked_fill_", "rhs.unsqueeze.div", "torch.zeros_like.expand_as().contiguous", "residual.norm", "torch.lt", "range", "rhs_norm.masked_fill_.narrow", "rr_solution.mean.mul", "rr_solves[].mean.mul", "rr_solves[].mean.mul", "torch.sort", "len", "rhs.unsqueeze.ndimension", "rhs.unsqueeze.unsqueeze", "torch.zeros_like", "gpytorch.settings._use_eval_tolerance.on", "RuntimeError", "matmul_closure", "torch.equal", "RuntimeError", "torch.lt.all", "preconditioner", "preconditioner.mul().sum", "torch.empty_like", "torch.empty", "torch.empty_like", "torch.empty", "matmul_closure", "torch.mul", "torch.sum", "torch.lt", "torch.empty.masked_fill_", "torch.div", "torch.empty.masked_fill_", "torch.empty.masked_fill_", "torch.addcmul", "preconditioner", "torch.addcmul", "torch.empty_like.resize_as_().copy_", "torch.mul", "torch.sum", "torch.lt", "torch.empty_like.masked_fill_", "torch.div", "torch.empty_like.masked_fill_", "search_direction.mul_().add_", "torch.norm", "residual.norm.masked_fill_", "torch.lt", "bool", "rr_solution.mean.narrow", "rr_solution.mean.squeeze", "print", "print", "print", "gpytorch.settings.max_cg_iterations.value", "gpytorch.settings.eval_cg_tolerance.value", "gpytorch.settings.cg_tolerance.value", "callable", "RuntimeError", "torch.zeros_like.expand_as", "rhs.unsqueeze.size", "rhs.unsqueeze.size", "rr_solution.mean.clone().expand().contiguous", "torch.zeros", "torch.empty", "torch.empty", "torch.empty_like", "torch.empty_like", "torch.addcmul", "print", "torch.empty.squeeze_().narrow", "torch.empty_like.squeeze_().narrow", "torch.eq", "alpha.squeeze_().narrow.masked_fill_", "torch.reciprocal", "alpha.squeeze_().narrow.masked_fill_", "torch.empty_like.copy_", "torch.empty_like.copy_", "print", "print", "rr_solution.mean.narrow", "solution.clone().expand().contiguous.narrow", "solution.clone().expand().contiguous.mean", "int", "rr_solves[].mean", "print", "rhs.unsqueeze.size", "warnings.warn", "warnings.warn", "torch.zeros.permute().contiguous", "gpytorch.settings.max_lanczos_quadrature_iterations.value", "preconditioner.mul", "rr_solution[].clone", "dist_of_iter.cdf", "torch.empty_like.resize_as_", "search_direction.mul_", "residual.norm.mean", "t_mat[].copy_", "torch.addcmul", "torch.mul", "t_mat[].copy_", "rr_solution[].clone", "rr_solves[].mean", "rhs.unsqueeze.size", "rr_solution.mean.clone().expand", "torch.empty.squeeze_", "torch.empty_like.squeeze_", "torch.empty_like.sqrt_", "t_mat[].max", "print", "residual.norm", "rhs.unsqueeze.size", "len", "rhs.unsqueeze.size", "residual.norm", "residual.norm.mean", "t_mat[].max", "residual.norm.mean", "torch.zeros.permute", "rr_solution.mean.clone", "range", "len"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.dist_of_iterations_for_rrcg.RRDist.mean", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.dist_of_iterations_for_rrcg.RRDist.mean", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.dist_of_iterations_for_rrcg.RRDist.cdf", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.dist_of_iterations_for_rrcg.RRDist.mean", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.dist_of_iterations_for_rrcg.RRDist.mean", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.MultivariateNormal.expand", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.dist_of_iterations_for_rrcg.RRDist.mean", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.dist_of_iterations_for_rrcg.RRDist.mean"], ["", "def", "linear_cg_rr", "(", "matmul_closure", ",", "rhs", ",", "n_tridiag", "=", "0", ",", "\n", "use_rr", "=", "False", ",", "dist_of_iter", "=", "None", ",", "max_iter", "=", "None", ",", "max_rrcg_iter_list", "=", "None", ",", "\n", "max_tridiag_iter", "=", "None", ",", "tolerance", "=", "None", ",", "stop_updating_after", "=", "1e-10", ",", "initial_guess", "=", "None", ",", "\n", "preconditioner", "=", "None", ",", "\n", "eps", "=", "1e-10", ",", "\n", "verbose", "=", "False", ")", ":", "\n", "# some default arguments", "\n", "    ", "num_rows", "=", "rhs", ".", "size", "(", "-", "2", ")", "\n", "if", "use_rr", ":", "\n", "        ", "assert", "max_rrcg_iter_list", "is", "not", "None", "\n", "assert", "dist_of_iter", "is", "not", "None", "\n", "\n", "sorted_max_rrcg_iter_list", ",", "sorted_max_rrct_iter_idx", "=", "torch", ".", "sort", "(", "max_rrcg_iter_list", ")", "\n", "\n", "sorted_curr_Jidx", "=", "0", "# current index of max-rrcg-iter", "\n", "curr_Jvalue", "=", "sorted_max_rrcg_iter_list", "[", "0", "]", "# current value of max-rrcg-iter", "\n", "original_curr_Jidx", "=", "sorted_max_rrct_iter_idx", "[", "0", "]", "\n", "\n", "max_iter", "=", "sorted_max_rrcg_iter_list", "[", "-", "1", "]", "\n", "rr_nsamples", "=", "len", "(", "max_rrcg_iter_list", ")", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "\"Using rr cg!\"", ")", "\n", "print", "(", "\"max_iter = {}\"", ".", "format", "(", "max_iter", ")", ")", "\n", "print", "(", "\"max_rrcg_iter_list = {}\"", ".", "format", "(", "max_rrcg_iter_list", ")", ")", "\n", "\n", "", "if", "n_tridiag", ":", "\n", "            ", "if", "max_tridiag_iter", "is", "None", ":", "\n", "                ", "max_tridiag_iter", "=", "max_iter", "\n", "", "", "else", ":", "\n", "            ", "max_tridiag_iter", "=", "0", "\n", "\n", "", "assert", "max_iter", "<=", "num_rows", ",", "\"rr max iter shoule be less than num_rows, but got max_iter = {}, num_rows = {}\"", ".", "format", "(", "max_iter", ",", "num_rows", ")", "\n", "", "else", ":", "\n", "        ", "if", "max_iter", "is", "None", ":", "\n", "            ", "max_iter", "=", "settings", ".", "max_cg_iterations", ".", "value", "(", ")", "\n", "", "if", "n_tridiag", ":", "\n", "            ", "if", "max_tridiag_iter", "is", "None", ":", "\n", "                ", "max_tridiag_iter", "=", "settings", ".", "max_lanczos_quadrature_iterations", ".", "value", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "max_tridiag_iter", "=", "0", "\n", "\n", "", "", "is_vector", "=", "rhs", ".", "ndimension", "(", ")", "==", "1", "\n", "if", "is_vector", ":", "\n", "        ", "rhs", "=", "rhs", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "", "if", "initial_guess", "is", "None", ":", "\n", "        ", "initial_guess", "=", "torch", ".", "zeros_like", "(", "rhs", ")", "\n", "", "if", "tolerance", "is", "None", ":", "\n", "        ", "if", "settings", ".", "_use_eval_tolerance", ".", "on", "(", ")", ":", "\n", "            ", "tolerance", "=", "settings", ".", "eval_cg_tolerance", ".", "value", "(", ")", "\n", "", "else", ":", "\n", "            ", "tolerance", "=", "settings", ".", "cg_tolerance", ".", "value", "(", ")", "\n", "", "", "if", "preconditioner", "is", "None", ":", "\n", "        ", "preconditioner", "=", "_default_preconditioner", "\n", "precond", "=", "False", "\n", "", "else", ":", "\n", "        ", "precond", "=", "True", "\n", "\n", "", "if", "max_tridiag_iter", ">", "max_iter", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"Getting a tridiagonalization larger than the number of CG iterations run is not possible!\"", ")", "\n", "\n", "", "if", "torch", ".", "is_tensor", "(", "matmul_closure", ")", ":", "\n", "        ", "matmul_closure", "=", "matmul_closure", ".", "matmul", "\n", "", "elif", "not", "callable", "(", "matmul_closure", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"matmul_closure must be a tensor, or a callable object!\"", ")", "\n", "\n", "# get some constants", "\n", "", "n_tridiag_iter", "=", "min", "(", "max_tridiag_iter", ",", "num_rows", ")", "\n", "eps", "=", "torch", ".", "tensor", "(", "eps", ",", "dtype", "=", "rhs", ".", "dtype", ",", "device", "=", "rhs", ".", "device", ")", "\n", "\n", "# Get the norm of the rhs - used for convergence checks", "\n", "# Here we're going to make almost-zero norms actually be 1 (so we don't get divide-by-zero issues)", "\n", "# But we'll store which norms were actually close to zero", "\n", "rhs_norm", "=", "rhs", ".", "norm", "(", "2", ",", "dim", "=", "-", "2", ",", "keepdim", "=", "True", ")", "\n", "rhs_is_zero", "=", "rhs_norm", ".", "lt", "(", "eps", ")", "\n", "rhs_norm", "=", "rhs_norm", ".", "masked_fill_", "(", "rhs_is_zero", ",", "1", ")", "\n", "\n", "# normalize rhs. We'll un-normalize later", "\n", "rhs", "=", "rhs", ".", "div", "(", "rhs_norm", ")", "\n", "\n", "# residual: residual_{0} = b_vec - lhs x_{0}", "\n", "residual", "=", "rhs", "-", "matmul_closure", "(", "initial_guess", ")", "\n", "batch_shape", "=", "residual", ".", "shape", "[", ":", "-", "2", "]", "\n", "\n", "# solution <- x_0", "\n", "solution", "=", "initial_guess", ".", "expand_as", "(", "residual", ")", ".", "contiguous", "(", ")", "\n", "\n", "# Check for NaNs", "\n", "if", "not", "torch", ".", "equal", "(", "residual", ",", "residual", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"NaNs encountered when trying to perform matrix-vector multiplication\"", ")", "\n", "\n", "", "residual_norm", "=", "residual", ".", "norm", "(", "2", ",", "dim", "=", "-", "2", ",", "keepdim", "=", "True", ")", "\n", "has_converged", "=", "torch", ".", "lt", "(", "residual_norm", ",", "stop_updating_after", ")", "\n", "\n", "# set n_iter to be max_iter, for now", "\n", "n_iter", "=", "max_iter", "\n", "if", "has_converged", ".", "all", "(", ")", "and", "not", "n_tridiag", ":", "\n", "        ", "n_iter", "=", "0", "\n", "", "else", ":", "\n", "        ", "precond_residual", "=", "preconditioner", "(", "residual", ")", "\n", "search_direction", "=", "precond_residual", "\n", "residual_inner_prod", "=", "precond_residual", ".", "mul", "(", "residual", ")", ".", "sum", "(", "-", "2", ",", "keepdim", "=", "True", ")", "\n", "\n", "# defining storage matrices", "\n", "mul_storage", "=", "torch", ".", "empty_like", "(", "residual", ")", "\n", "alpha", "=", "torch", ".", "empty", "(", "*", "batch_shape", ",", "1", ",", "rhs", ".", "size", "(", "-", "1", ")", ",", "dtype", "=", "residual", ".", "dtype", ",", "device", "=", "residual", ".", "device", ")", "\n", "beta", "=", "torch", ".", "empty_like", "(", "alpha", ")", "\n", "is_zero", "=", "torch", ".", "empty", "(", "*", "batch_shape", ",", "1", ",", "rhs", ".", "size", "(", "-", "1", ")", ",", "dtype", "=", "torch", ".", "bool", ",", "device", "=", "residual_norm", ".", "device", ")", "\n", "\n", "if", "use_rr", ":", "\n", "            ", "rr_solution", "=", "solution", ".", "clone", "(", ")", ".", "expand", "(", "(", "rr_nsamples", ",", ")", "+", "solution", ".", "shape", ")", ".", "contiguous", "(", ")", "\n", "\n", "# Define tridiagonal matrices, if applicable", "\n", "", "if", "n_tridiag", ":", "\n", "            ", "t_mat", "=", "torch", ".", "zeros", "(", "\n", "n_tridiag_iter", ",", "n_tridiag_iter", ",", "*", "batch_shape", ",", "n_tridiag", ",", "dtype", "=", "alpha", ".", "dtype", ",", "device", "=", "alpha", ".", "device", ")", "\n", "\n", "alpha_tridiag_is_zero", "=", "torch", ".", "empty", "(", "*", "batch_shape", ",", "n_tridiag", ",", "dtype", "=", "torch", ".", "bool", ",", "device", "=", "t_mat", ".", "device", ")", "\n", "alpha_reciprocal", "=", "torch", ".", "empty", "(", "*", "batch_shape", ",", "n_tridiag", ",", "dtype", "=", "t_mat", ".", "dtype", ",", "device", "=", "t_mat", ".", "device", ")", "\n", "prev_alpha_reciprocal", "=", "torch", ".", "empty_like", "(", "alpha_reciprocal", ")", "\n", "prev_beta", "=", "torch", ".", "empty_like", "(", "alpha_reciprocal", ")", "\n", "\n", "", "update_tridiag", "=", "True", "\n", "last_tridiag_iter", "=", "0", "\n", "\n", "", "tolerance_reached", "=", "False", "\n", "cg_solution_converged", "=", "False", "\n", "\n", "for", "k", "in", "range", "(", "n_iter", ")", ":", "\n", "        ", "mvm", "=", "matmul_closure", "(", "search_direction", ")", "\n", "\n", "torch", ".", "mul", "(", "search_direction", ",", "mvm", ",", "out", "=", "mul_storage", ")", "\n", "torch", ".", "sum", "(", "mul_storage", ",", "-", "2", ",", "keepdim", "=", "True", ",", "out", "=", "alpha", ")", "\n", "\n", "# safe division", "\n", "torch", ".", "lt", "(", "alpha", ",", "eps", ",", "out", "=", "is_zero", ")", "\n", "alpha", ".", "masked_fill_", "(", "is_zero", ",", "1", ")", "\n", "torch", ".", "div", "(", "residual_inner_prod", ",", "alpha", ",", "out", "=", "alpha", ")", "\n", "alpha", ".", "masked_fill_", "(", "is_zero", ",", "0", ")", "\n", "\n", "# We'll cancel out any updates by setting alpha=0 for any vector that has already converged", "\n", "alpha", ".", "masked_fill_", "(", "has_converged", ",", "0", ")", "\n", "\n", "# update residual", "\n", "torch", ".", "addcmul", "(", "residual", ",", "-", "alpha", ",", "mvm", ",", "out", "=", "residual", ")", "\n", "\n", "# update precond_redisual", "\n", "precond_residual", "=", "preconditioner", "(", "residual", ")", "\n", "\n", "# update solution", "\n", "torch", ".", "addcmul", "(", "solution", ",", "alpha", ",", "search_direction", ",", "out", "=", "solution", ")", "\n", "\n", "if", "use_rr", ":", "\n", "# original solution: x_k = x_0 + alpha1 d_1  + alpha_2 d_2 + .... alpha_k d_k", "\n", "# rr solution: \\tilde{x}_k = x_0 + alpha1 d1 / (1-cdf(0)) + alpha2 d2 / (1-cdf(1)) .... + alphak dk / (1-cdf(k-1))", "\n", "\n", "# check which updating rr_estimate for which truncation number J", "\n", "            ", "while", "k", "+", "1", ">", "curr_Jvalue", ":", "\n", "# move to next rr-estimate where the truncation_number =  curr_Jvalue", "\n", "                ", "previous_original_curr_Jidx", "=", "sorted_max_rrct_iter_idx", "[", "sorted_curr_Jidx", "]", "\n", "\n", "sorted_curr_Jidx", "+=", "1", "\n", "curr_Jvalue", "=", "sorted_max_rrcg_iter_list", "[", "sorted_curr_Jidx", "]", "\n", "original_curr_Jidx", "=", "sorted_max_rrct_iter_idx", "[", "sorted_curr_Jidx", "]", "\n", "\n", "# we need to copy accumulated sum from from previous", "\n", "#rr_solution[sorted_curr_Jidx] = rr_solution[sorted_curr_Jidx - 1].clone()", "\n", "rr_solution", "[", "original_curr_Jidx", "]", "=", "rr_solution", "[", "previous_original_curr_Jidx", "]", ".", "clone", "(", ")", "\n", "\n", "# update solution: rr_solution = rr_solution + alpha * search_direction / prob_k", "\n", "", "prob_k", "=", "(", "1", "-", "dist_of_iter", ".", "cdf", "(", "k", ")", ")", "\n", "#torch.addcmul(rr_solution[sorted_curr_Jidx], alpha/prob_k, search_direction, out=rr_solution[sorted_curr_Jidx])", "\n", "torch", ".", "addcmul", "(", "rr_solution", "[", "original_curr_Jidx", "]", ",", "alpha", "/", "prob_k", ",", "search_direction", ",", "\n", "out", "=", "rr_solution", "[", "original_curr_Jidx", "]", ")", "\n", "\n", "", "beta", ".", "resize_as_", "(", "residual_inner_prod", ")", ".", "copy_", "(", "residual_inner_prod", ")", "\n", "\n", "# update residual_inner_product", "\n", "torch", ".", "mul", "(", "residual", ",", "precond_residual", ",", "out", "=", "mul_storage", ")", "\n", "torch", ".", "sum", "(", "mul_storage", ",", "-", "2", ",", "keepdim", "=", "True", ",", "out", "=", "residual_inner_prod", ")", "\n", "\n", "# update beta -- do a safe division here", "\n", "torch", ".", "lt", "(", "beta", ",", "eps", ",", "out", "=", "is_zero", ")", "\n", "beta", ".", "masked_fill_", "(", "is_zero", ",", "1", ")", "\n", "torch", ".", "div", "(", "residual_inner_prod", ",", "beta", ",", "out", "=", "beta", ")", "\n", "beta", ".", "masked_fill_", "(", "is_zero", ",", "0", ")", "\n", "\n", "# update search direction", "\n", "search_direction", ".", "mul_", "(", "beta", ")", ".", "add_", "(", "precond_residual", ")", "\n", "\n", "torch", ".", "norm", "(", "residual", ",", "2", ",", "dim", "=", "-", "2", ",", "keepdim", "=", "True", ",", "out", "=", "residual_norm", ")", "\n", "residual_norm", ".", "masked_fill_", "(", "rhs_is_zero", ",", "0", ")", "\n", "torch", ".", "lt", "(", "residual_norm", ",", "stop_updating_after", ",", "out", "=", "has_converged", ")", "\n", "\n", "#if k >= 10 and bool(residual_norm.mean() < tolerance) and not (n_tridiag and k < n_tridiag_iter):", "\n", "if", "bool", "(", "residual_norm", ".", "mean", "(", ")", "<", "tolerance", ")", ":", "\n", "            ", "cg_solution_converged", "=", "True", "\n", "print", "(", "\"cg converges after {} iterations\"", ".", "format", "(", "k", "+", "1", ")", ")", "\n", "if", "not", "(", "n_tridiag_iter", "and", "k", "<", "n_tridiag_iter", "and", "update_tridiag", ")", ":", "# TODO: check this", "\n", "                ", "tolerance_reached", "=", "True", "\n", "break", "\n", "\n", "", "", "if", "n_tridiag", "and", "k", "<", "n_tridiag_iter", "and", "update_tridiag", ":", "\n", "            ", "alpha_tridiag", "=", "alpha", ".", "squeeze_", "(", "-", "2", ")", ".", "narrow", "(", "-", "1", ",", "0", ",", "n_tridiag", ")", "\n", "beta_tridiag", "=", "beta", ".", "squeeze_", "(", "-", "2", ")", ".", "narrow", "(", "-", "1", ",", "0", ",", "n_tridiag", ")", "\n", "torch", ".", "eq", "(", "alpha_tridiag", ",", "0", ",", "out", "=", "alpha_tridiag_is_zero", ")", "\n", "alpha_tridiag", ".", "masked_fill_", "(", "alpha_tridiag_is_zero", ",", "1", ")", "\n", "torch", ".", "reciprocal", "(", "alpha_tridiag", ",", "out", "=", "alpha_reciprocal", ")", "\n", "alpha_tridiag", ".", "masked_fill_", "(", "alpha_tridiag_is_zero", ",", "0", ")", "\n", "\n", "if", "k", "==", "0", ":", "\n", "                ", "t_mat", "[", "k", ",", "k", "]", ".", "copy_", "(", "alpha_reciprocal", ")", "\n", "", "else", ":", "\n", "                ", "torch", ".", "addcmul", "(", "alpha_reciprocal", ",", "prev_beta", ",", "prev_alpha_reciprocal", ",", "out", "=", "t_mat", "[", "k", ",", "k", "]", ")", "\n", "torch", ".", "mul", "(", "prev_beta", ".", "sqrt_", "(", ")", ",", "prev_alpha_reciprocal", ",", "out", "=", "t_mat", "[", "k", ",", "k", "-", "1", "]", ")", "\n", "t_mat", "[", "k", "-", "1", ",", "k", "]", ".", "copy_", "(", "t_mat", "[", "k", ",", "k", "-", "1", "]", ")", "\n", "\n", "if", "t_mat", "[", "k", "-", "1", ",", "k", "]", ".", "max", "(", ")", "<", "1e-6", ":", "\n", "                    ", "update_tridiag", "=", "False", "\n", "print", "(", "\"tridiag converges after {} iteration!\"", ".", "format", "(", "k", "+", "1", ")", ")", "\n", "\n", "", "", "last_tridiag_iter", "=", "k", "\n", "\n", "prev_alpha_reciprocal", ".", "copy_", "(", "alpha_reciprocal", ")", "\n", "prev_beta", ".", "copy_", "(", "beta_tridiag", ")", "\n", "\n", "", "", "if", "use_rr", ":", "\n", "# NOTE: solution_sample1 and solution_sapmle2 is for backward pass computation", "\n", "        ", "if", "verbose", ":", "\n", "            ", "print", "(", "\"Original CG Residual after {} iterations: {}\"", ".", "format", "(", "k", "+", "1", ",", "residual", ".", "norm", "(", ")", ")", ")", "\n", "\n", "", "if", "cg_solution_converged", ":", "\n", "            ", "print", "(", "\"\\nUse cg solution for rr!\"", ")", "\n", "solution_sample1", "=", "solution", ".", "narrow", "(", "-", "1", ",", "n_tridiag", ",", "rhs", ".", "size", "(", "-", "1", ")", "-", "n_tridiag", ")", "\n", "solution_sample2", "=", "solution_sample1", "\n", "", "else", ":", "\n", "            ", "assert", "curr_Jvalue", "==", "max_iter", ",", "\"curr_Jvalue = {}, max_iter = {}\"", ".", "format", "(", "curr_Jvalue", ",", "max_iter", ")", "\n", "\n", "while", "sorted_curr_Jidx", "<", "len", "(", "max_rrcg_iter_list", ")", "-", "1", ":", "\n", "                ", "previous_original_curr_Jidx", "=", "sorted_max_rrct_iter_idx", "[", "sorted_curr_Jidx", "]", "\n", "sorted_curr_Jidx", "+=", "1", "\n", "\n", "original_curr_Jidx", "=", "sorted_max_rrct_iter_idx", "[", "sorted_curr_Jidx", "]", "\n", "rr_solution", "[", "original_curr_Jidx", "]", "=", "rr_solution", "[", "previous_original_curr_Jidx", "]", ".", "clone", "(", ")", "\n", "\n", "", "rr_solves", "=", "rr_solution", ".", "narrow", "(", "-", "1", ",", "n_tridiag", ",", "rhs", ".", "size", "(", "-", "1", ")", "-", "n_tridiag", ")", "\n", "solution", "=", "rr_solution", ".", "mean", "(", "0", ")", "\n", "\n", "half_rr_nsamples", "=", "int", "(", "rr_nsamples", "/", "2", ")", "\n", "\n", "# solves without tridiag parts", "\n", "if", "half_rr_nsamples", "==", "0", ":", "\n", "                ", "solution_sample1", "=", "rr_solves", "[", ":", "half_rr_nsamples", "]", "# empty size", "\n", "", "else", ":", "\n", "                ", "solution_sample1", "=", "rr_solves", "[", ":", "half_rr_nsamples", "]", ".", "mean", "(", "0", ")", "\n", "", "solution_sample2", "=", "rr_solves", "[", "half_rr_nsamples", ":", "]", ".", "mean", "(", "0", ")", "\n", "\n", "", "", "else", ":", "\n", "        ", "solution_sample1", "=", "solution", ".", "narrow", "(", "-", "1", ",", "n_tridiag", ",", "rhs", ".", "size", "(", "-", "1", ")", "-", "n_tridiag", ")", "\n", "solution_sample2", "=", "solution_sample1", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "\"Residual after {} iterations: {}\"", ".", "format", "(", "k", "+", "1", ",", "residual", ".", "norm", "(", ")", ")", ")", "\n", "\n", "", "", "rhs_norm_for_rr_solves", "=", "rhs_norm", ".", "narrow", "(", "-", "1", ",", "n_tridiag", ",", "rhs", ".", "size", "(", "-", "1", ")", "-", "n_tridiag", ")", "\n", "solution", "=", "solution", ".", "mul", "(", "rhs_norm", ")", "\n", "solution_sample1", "=", "solution_sample1", ".", "mul", "(", "rhs_norm_for_rr_solves", ")", "\n", "solution_sample2", "=", "solution_sample2", ".", "mul", "(", "rhs_norm_for_rr_solves", ")", "\n", "\n", "if", "not", "use_rr", "and", "not", "tolerance_reached", "and", "n_iter", ">", "0", ":", "\n", "        ", "if", "n_tridiag", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "\"CG terminated in {} iterations with average residual norm {}.\"", "\n", "\" The cg tolerance is {} specified by\"", "\n", "\" gpytorch.settings.cg_tolerance.\"", "\n", "\" Tridiag terminated in {} iterations with the last off-diagonal terms = {}.\"", "\n", "\" The tridiag tolerance is 1e-6.\"", "\n", "\" If performance is affected, consider raising the maximum number of CG iterations by running code in\"", "\n", "\" a gpytorch.settings.max_cg_iterations(value) context.\"", ".", "format", "(", "\n", "k", "+", "1", ",", "residual_norm", ".", "mean", "(", ")", ",", "tolerance", ",", "\n", "last_tridiag_iter", "+", "1", ",", "t_mat", "[", "last_tridiag_iter", "-", "1", ",", "last_tridiag_iter", "]", ".", "max", "(", ")", ")", ",", "\n", "NumericalWarning", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "\"CG terminated in {} iterations with average residual norm {}\"", "\n", "\" The cg tolerance is {} specified by\"", "\n", "\" gpytorch.settings.cg_tolerance.\"", "\n", "\" If performance is affected, consider raising the maximum number of CG iterations by running code in\"", "\n", "\" a gpytorch.settings.max_cg_iterations(value) context.\"", ".", "format", "(", "\n", "k", "+", "1", ",", "residual_norm", ".", "mean", "(", ")", ",", "tolerance", ",", ")", ",", "\n", "NumericalWarning", ",", "\n", ")", "\n", "\n", "", "", "if", "is_vector", ":", "\n", "        ", "solution", "=", "solution", ".", "squeeze", "(", "-", "1", ")", "\n", "", "if", "n_tridiag", ":", "\n", "        ", "t_mat", "=", "t_mat", "[", ":", "last_tridiag_iter", "+", "1", ",", ":", "last_tridiag_iter", "+", "1", "]", "\n", "return", "solution", ",", "solution_sample1", ",", "solution_sample2", ",", "t_mat", ".", "permute", "(", "-", "1", ",", "*", "range", "(", "2", ",", "2", "+", "len", "(", "batch_shape", ")", ")", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", ",", "update_tridiag", "\n", "", "return", "solution", ",", "solution_sample1", ",", "solution_sample2", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg._inv_quad_log_det.InvQuadLogDet.forward": [[25, 292], ["torch.Size", "ctx.representation_tree", "torch.cat", "rrcg.rr_settings.use_rr_cg.on", "rrcg.rr_settings.use_rr_lanczos.on", "torch.zeros", "torch.zeros", "ctx.save_for_backward", "gpytorch.settings.memory_efficient.off", "RuntimeError", "torch.no_grad", "ctx.representation_tree._preconditioner", "gpytorch.settings.num_trace_samples.value", "torch.empty.div", "RuntimeError", "rhs_list.append", "ctx.probe_vectors.size", "rhs_list.append", "inv_quad_rhs.unsqueeze.unsqueeze.size", "rrcg.rr_settings.use_prespecified_rr_iter.on", "gpytorch.settings.skip_logdet_forward.off", "rrcg.linear_cg.linear_cg_rr", "gpytorch.settings.max_cg_iterations.value", "rrcg.linear_cg.linear_cg_rr", "gpytorch.settings.skip_logdet_forward.off", "torch.any().item", "solves.narrow", "solves.narrow", "gpytorch.settings.deterministic_probes.on", "torch.norm", "gpytorch.settings.deterministic_probes.on", "torch.empty.unsqueeze().transpose().squeeze().transpose().contiguous", "torch.norm", "ctx.probe_vectors.numel", "inv_quad_rhs.unsqueeze.unsqueeze.ndimension", "inv_quad_rhs.unsqueeze.unsqueeze.unsqueeze", "rrcg.rr_settings.max_rr_cg_iter_list.value", "torch.tensor", "rrcg.rr_settings.rr_cg_nsamples.value", "dist_of_iter.sample", "torch.tensor", "list", "list", "warnings.warn", "torch.empty", "torch.empty.bernoulli_().mul_().add_", "torch.empty.expand", "probe_vector_norms.expand.expand.expand", "torch.Size", "precond_lt.evaluate().sqrt", "warnings.warn", "precond_lt.evaluate().sqrt.matmul().permute", "torch.randn", "precond_lt.zero_mean_mvn_samples", "torch.any", "float", "t_mat.unsqueeze.unsqueeze.unsqueeze", "gpytorch.utils.stochastic_lq.StochasticLQ", "torch.sort", "torch.zeros", "gpytorch.utils.lanczos.lanczos_tridiag_to_diag", "gpytorch.utils.stochastic_lq.StochasticLQ.evaluate", "torch.add", "range", "logdet_term.mean.mean.mean", "gpytorch.utils.lanczos.lanczos_tridiag_to_diag", "gpytorch.utils.stochastic_lq.StochasticLQ", "gpytorch.utils.stochastic_lq.StochasticLQ.evaluate", "torch.empty", "torch.empty.bernoulli_().mul_().add_", "precond_lt.size", "precond_lt.root_decomposition", "torch.randn", "precond_lt.evaluate().sqrt.size", "torch.empty.unsqueeze().transpose().squeeze().transpose", "torch.isnan", "gpytorch.utils.lanczos.lanczos_tridiag_to_diag", "gpytorch.utils.stochastic_lq.StochasticLQ.evaluate", "torch.div", "torch.add", "logdet_term[].clone", "torch.empty.bernoulli_().mul_", "precond_lt.evaluate", "precond_lt.evaluate().sqrt.size", "torch.randn.size", "precond_lt.evaluate().sqrt.size", "precond_lt.evaluate().sqrt.matmul", "range", "logdet_term[].clone", "dist_of_iter.cdf", "torch.empty.bernoulli_().mul_", "torch.empty.unsqueeze().transpose().squeeze", "x.log", "x.log", "torch.empty.bernoulli_", "precond_lt.dim", "x.log", "torch.empty.bernoulli_", "torch.empty.unsqueeze().transpose", "torch.empty.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.linear_cg.linear_cg_rr", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.linear_cg.linear_cg_rr", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.MultivariateNormal.sample", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.MultivariateNormal.expand", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.MultivariateNormal.expand", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.dist_of_iterations_for_rrcg.RRDist.mean", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.dist_of_iterations_for_rrcg.RRDist.cdf"], ["@", "staticmethod", "\n", "def", "forward", "(", "\n", "ctx", ",", "\n", "representation_tree", ",", "\n", "dtype", ",", "\n", "device", ",", "\n", "matrix_shape", ",", "\n", "batch_shape", "=", "torch", ".", "Size", "(", ")", ",", "\n", "inv_quad", "=", "False", ",", "\n", "logdet", "=", "False", ",", "\n", "probe_vectors", "=", "None", ",", "\n", "probe_vector_norms", "=", "None", ",", "\n", "dist_of_iter", "=", "None", ",", "\n", "*", "args", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        *args - The arguments representing the PSD matrix A (or batch of PSD matrices A)\n        If self.inv_quad is true, the first entry in *args is inv_quad_rhs (Tensor)\n        - the RHS of the matrix solves.\n\n        Returns:\n        - (Scalar) The inverse quadratic form (or None, if self.inv_quad is False)\n        - (Scalar) The log determinant (or None, self.if logdet is False)\n        \"\"\"", "\n", "\n", "if", "not", "(", "inv_quad", "or", "logdet", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Either inv_quad or logdet must be true (or both)\"", ")", "\n", "\n", "", "ctx", ".", "representation_tree", "=", "representation_tree", "\n", "ctx", ".", "dtype", "=", "dtype", "\n", "ctx", ".", "device", "=", "device", "\n", "ctx", ".", "matrix_shape", "=", "matrix_shape", "\n", "ctx", ".", "batch_shape", "=", "batch_shape", "\n", "ctx", ".", "inv_quad", "=", "inv_quad", "\n", "ctx", ".", "logdet", "=", "logdet", "\n", "\n", "inv_quad_rhs", "=", "None", "\n", "if", "ctx", ".", "inv_quad", ":", "\n", "            ", "matrix_args", "=", "args", "[", "1", ":", "]", "\n", "inv_quad_rhs", "=", "args", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "matrix_args", "=", "args", "\n", "\n", "# Get closure for matmul", "\n", "", "lazy_tsr", "=", "ctx", ".", "representation_tree", "(", "*", "matrix_args", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "preconditioner", ",", "precond_lt", ",", "logdet_correction", "=", "lazy_tsr", ".", "_preconditioner", "(", ")", "\n", "\n", "", "ctx", ".", "preconditioner", "=", "preconditioner", "\n", "\n", "if", "(", "probe_vectors", "is", "None", "or", "probe_vector_norms", "is", "None", ")", "and", "logdet", ":", "\n", "            ", "num_random_probes", "=", "settings", ".", "num_trace_samples", ".", "value", "(", ")", "\n", "if", "preconditioner", "is", "None", ":", "\n", "                ", "if", "settings", ".", "deterministic_probes", ".", "on", "(", ")", ":", "\n", "                    ", "warnings", ".", "warn", "(", "\n", "\"Deterministic probes will currently work only if you aren't training multiple independent\"", "\n", "\" models simultaneously.\"", ",", "\n", "UserWarning", ",", "\n", ")", "\n", "if", "settings", ".", "deterministic_probes", ".", "probe_vectors", "is", "None", ":", "\n", "                        ", "probe_vectors", "=", "torch", ".", "empty", "(", "matrix_shape", "[", "-", "1", "]", ",", "num_random_probes", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "probe_vectors", ".", "bernoulli_", "(", ")", ".", "mul_", "(", "2", ")", ".", "add_", "(", "-", "1", ")", "\n", "settings", ".", "deterministic_probes", ".", "probe_vectors", "=", "probe_vectors", "\n", "", "else", ":", "\n", "                        ", "probe_vectors", "=", "settings", ".", "deterministic_probes", ".", "probe_vectors", "\n", "", "", "else", ":", "\n", "                    ", "probe_vectors", "=", "torch", ".", "empty", "(", "matrix_shape", "[", "-", "1", "]", ",", "num_random_probes", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "probe_vectors", ".", "bernoulli_", "(", ")", ".", "mul_", "(", "2", ")", ".", "add_", "(", "-", "1", ")", "\n", "\n", "", "probe_vector_norms", "=", "torch", ".", "norm", "(", "probe_vectors", ",", "2", ",", "dim", "=", "-", "2", ",", "keepdim", "=", "True", ")", "\n", "if", "batch_shape", "is", "not", "None", ":", "\n", "                    ", "probe_vectors", "=", "probe_vectors", ".", "expand", "(", "*", "batch_shape", ",", "matrix_shape", "[", "-", "1", "]", ",", "num_random_probes", ")", "\n", "probe_vector_norms", "=", "probe_vector_norms", ".", "expand", "(", "*", "batch_shape", ",", "1", ",", "num_random_probes", ")", "\n", "", "", "else", ":", "# When preconditioning, probe vectors must be drawn from N(0, P)", "\n", "                ", "if", "precond_lt", ".", "size", "(", ")", "[", "-", "2", ":", "]", "==", "torch", ".", "Size", "(", "[", "1", ",", "1", "]", ")", ":", "\n", "                    ", "covar_root", "=", "precond_lt", ".", "evaluate", "(", ")", ".", "sqrt", "(", ")", "\n", "", "else", ":", "\n", "                    ", "covar_root", "=", "precond_lt", ".", "root_decomposition", "(", ")", ".", "root", "\n", "\n", "", "if", "settings", ".", "deterministic_probes", ".", "on", "(", ")", ":", "\n", "                    ", "warnings", ".", "warn", "(", "\n", "\"Deterministic probes will currently work only if you aren't training multiple independent\"", "\n", "\" models simultaneously.\"", ",", "\n", "UserWarning", ",", "\n", ")", "\n", "base_samples", "=", "settings", ".", "deterministic_probes", ".", "probe_vectors", "\n", "if", "base_samples", "is", "None", "or", "covar_root", ".", "size", "(", "-", "1", ")", "!=", "base_samples", ".", "size", "(", "-", "2", ")", ":", "\n", "                        ", "base_samples", "=", "torch", ".", "randn", "(", "\n", "*", "precond_lt", ".", "batch_shape", ",", "\n", "covar_root", ".", "size", "(", "-", "1", ")", ",", "\n", "num_random_probes", ",", "\n", "dtype", "=", "precond_lt", ".", "dtype", ",", "\n", "device", "=", "precond_lt", ".", "device", ",", "\n", ")", "\n", "settings", ".", "deterministic_probes", ".", "probe_vectors", "=", "base_samples", "\n", "\n", "", "probe_vectors", "=", "covar_root", ".", "matmul", "(", "base_samples", ")", ".", "permute", "(", "-", "1", ",", "*", "range", "(", "precond_lt", ".", "dim", "(", ")", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "                    ", "base_samples", "=", "torch", ".", "randn", "(", "\n", "*", "precond_lt", ".", "batch_shape", ",", "\n", "covar_root", ".", "size", "(", "-", "1", ")", ",", "\n", "num_random_probes", ",", "\n", "dtype", "=", "precond_lt", ".", "dtype", ",", "\n", "device", "=", "precond_lt", ".", "device", ",", "\n", ")", "\n", "probe_vectors", "=", "precond_lt", ".", "zero_mean_mvn_samples", "(", "num_random_probes", ")", "\n", "", "probe_vectors", "=", "probe_vectors", ".", "unsqueeze", "(", "-", "2", ")", ".", "transpose", "(", "0", ",", "-", "2", ")", ".", "squeeze", "(", "0", ")", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ".", "contiguous", "(", ")", "\n", "probe_vector_norms", "=", "torch", ".", "norm", "(", "probe_vectors", ",", "p", "=", "2", ",", "dim", "=", "-", "2", ",", "keepdim", "=", "True", ")", "\n", "", "probe_vectors", "=", "probe_vectors", ".", "div", "(", "probe_vector_norms", ")", "\n", "\n", "", "ctx", ".", "probe_vectors", "=", "probe_vectors", "\n", "ctx", ".", "probe_vector_norms", "=", "probe_vector_norms", "\n", "\n", "if", "ctx", ".", "logdet", "and", "not", "ctx", ".", "probe_vectors", ".", "numel", "(", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Probe vectors were not supplied for logdet computation\"", ")", "\n", "\n", "# Collect terms for LinearCG", "\n", "# We use LinearCG for both matrix solves and for stochastically estimating the log det", "\n", "", "rhs_list", "=", "[", "]", "\n", "num_random_probes", "=", "0", "\n", "num_inv_quad_solves", "=", "0", "\n", "\n", "# RHS for logdet", "\n", "if", "ctx", ".", "logdet", ":", "\n", "            ", "rhs_list", ".", "append", "(", "ctx", ".", "probe_vectors", ")", "\n", "num_random_probes", "=", "ctx", ".", "probe_vectors", ".", "size", "(", "-", "1", ")", "\n", "\n", "# RHS for inv_quad", "\n", "", "ctx", ".", "is_vector", "=", "False", "\n", "if", "ctx", ".", "inv_quad", ":", "\n", "            ", "if", "inv_quad_rhs", ".", "ndimension", "(", ")", "==", "1", ":", "\n", "                ", "inv_quad_rhs", "=", "inv_quad_rhs", ".", "unsqueeze", "(", "-", "1", ")", "\n", "ctx", ".", "is_vector", "=", "True", "\n", "", "rhs_list", ".", "append", "(", "inv_quad_rhs", ")", "\n", "num_inv_quad_solves", "=", "inv_quad_rhs", ".", "size", "(", "-", "1", ")", "\n", "\n", "# Perform solves (for inv_quad) and tridiagonalization (for estimating logdet)", "\n", "", "rhs", "=", "torch", ".", "cat", "(", "rhs_list", ",", "-", "1", ")", "\n", "t_mat", "=", "None", "\n", "\n", "# rr settings", "\n", "use_rr_for_cg", "=", "rr_settings", ".", "use_rr_cg", ".", "on", "(", ")", "\n", "use_rr_lanczos", "=", "rr_settings", ".", "use_rr_lanczos", ".", "on", "(", ")", "# this is only enabled when use_rr_for_cg", "\n", "max_rrcg_iter_list", "=", "None", "\n", "max_tridiag_iter", "=", "None", "\n", "if", "use_rr_for_cg", ":", "\n", "            ", "if", "rr_settings", ".", "use_prespecified_rr_iter", ".", "on", "(", ")", ":", "\n", "                ", "max_rrcg_iter_list", "=", "rr_settings", ".", "max_rr_cg_iter_list", ".", "value", "(", ")", "\n", "max_rrcg_iter_list", "=", "torch", ".", "tensor", "(", "max_rrcg_iter_list", ",", "dtype", "=", "torch", ".", "int", ")", "\n", "rr_nsamples", "=", "max_rrcg_iter_list", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "rr_nsamples", "=", "rr_settings", ".", "rr_cg_nsamples", ".", "value", "(", ")", "\n", "max_rrcg_iter_list", "=", "dist_of_iter", ".", "sample", "(", "(", "rr_nsamples", ",", ")", ")", "\n", "\n", "", "if", "not", "use_rr_lanczos", ":", "\n", "# we just use a random tridiag iter, and so in average tridiag_iter = rrdist.mean", "\n", "                ", "max_tridiag_iter", "=", "max_rrcg_iter_list", "[", "0", "]", "\n", "# else, max_tridiag_iter will be set to max_iter in linear_cg_rr", "\n", "\n", "", "", "if", "ctx", ".", "logdet", "and", "settings", ".", "skip_logdet_forward", ".", "off", "(", ")", ":", "\n", "            ", "solves", ",", "inv_quad_solves_sample1", ",", "inv_quad_solves_sample2", ",", "t_mat", ",", "update_tridiag", "=", "linear_cg_rr", "(", "matmul_closure", "=", "lazy_tsr", ".", "_matmul", ",", "rhs", "=", "rhs", ",", "\n", "use_rr", "=", "use_rr_for_cg", ",", "max_iter", "=", "None", ",", "max_rrcg_iter_list", "=", "max_rrcg_iter_list", ",", "\n", "max_tridiag_iter", "=", "max_tridiag_iter", ",", "dist_of_iter", "=", "dist_of_iter", ",", "\n", "n_tridiag", "=", "num_random_probes", ",", "preconditioner", "=", "preconditioner", ")", "\n", "", "else", ":", "\n", "            ", "max_iter", "=", "settings", ".", "max_cg_iterations", ".", "value", "(", ")", "\n", "solves", ",", "inv_quad_solves_sample1", ",", "inv_quad_solves_sample2", "=", "linear_cg_rr", "(", "matmul_closure", "=", "lazy_tsr", ".", "_matmul", ",", "rhs", "=", "rhs", ",", "\n", "use_rr", "=", "use_rr_for_cg", ",", "max_iter", "=", "max_iter", ",", "max_rrcg_iter_list", "=", "max_rrcg_iter_list", ",", "\n", "dist_of_iter", "=", "dist_of_iter", ",", "\n", "n_tridiag", "=", "0", ",", "preconditioner", "=", "preconditioner", ")", "\n", "\n", "# Final values to return", "\n", "", "logdet_term", "=", "torch", ".", "zeros", "(", "lazy_tsr", ".", "batch_shape", ",", "dtype", "=", "ctx", ".", "dtype", ",", "device", "=", "ctx", ".", "device", ")", "\n", "inv_quad_term", "=", "torch", ".", "zeros", "(", "lazy_tsr", ".", "batch_shape", ",", "dtype", "=", "ctx", ".", "dtype", ",", "device", "=", "ctx", ".", "device", ")", "\n", "\n", "# Compute logdet from tridiagonalization", "\n", "if", "ctx", ".", "logdet", "and", "settings", ".", "skip_logdet_forward", ".", "off", "(", ")", ":", "\n", "            ", "if", "torch", ".", "any", "(", "torch", ".", "isnan", "(", "t_mat", ")", ")", ".", "item", "(", ")", ":", "\n", "                ", "logdet_term", "=", "torch", ".", "tensor", "(", "float", "(", "\"nan\"", ")", ",", "dtype", "=", "ctx", ".", "dtype", ",", "device", "=", "ctx", ".", "device", ")", "\n", "", "else", ":", "\n", "                ", "if", "ctx", ".", "batch_shape", "is", "None", ":", "\n", "                    ", "t_mat", "=", "t_mat", ".", "unsqueeze", "(", "1", ")", "\n", "", "if", "use_rr_lanczos", "and", "update_tridiag", ":", "\n", "# only use_rr to estimate logdet term when lanczos process is not converged", "\n", "# t_mat: (num_probes, J, J)", "\n", "\n", "                    ", "slq", "=", "StochasticLQ", "(", ")", "\n", "max_iter", "=", "t_mat", ".", "shape", "[", "-", "1", "]", "\n", "\n", "sorted_max_rrcg_iter_list", ",", "_", "=", "torch", ".", "sort", "(", "max_rrcg_iter_list", ")", "\n", "assert", "max_iter", "==", "sorted_max_rrcg_iter_list", "[", "-", "1", "]", ",", "\"t_mat shape = {}, but sorted_max_rrcg_iter_list = {}\"", ".", "format", "(", "t_mat", ".", "shape", ",", "\n", "sorted_max_rrcg_iter_list", ")", "\n", "\n", "# TODO: test lazy_tsr_batchshape for rr logdet_term", "\n", "logdet_term", "=", "torch", ".", "zeros", "(", "(", "rr_nsamples", ",", ")", "+", "lazy_tsr", ".", "batch_shape", ",", "dtype", "=", "t_mat", ".", "dtype", ",", "\n", "device", "=", "t_mat", ".", "device", ")", "\n", "\n", "curr_Jidx", "=", "0", "\n", "curr_Jvalue", "=", "sorted_max_rrcg_iter_list", "[", "0", "]", "\n", "\n", "# compute the first term", "\n", "t_mat_k", "=", "t_mat", "[", ":", ",", ":", "1", ",", ":", "1", "]", "\n", "eigenvalues", ",", "eigenvectors", "=", "lanczos_tridiag_to_diag", "(", "t_mat_k", ")", "\n", "(", "logdet_term_k", ",", ")", "=", "slq", ".", "evaluate", "(", "ctx", ".", "matrix_shape", ",", "eigenvalues", ",", "eigenvectors", ",", "[", "lambda", "x", ":", "x", ".", "log", "(", ")", "]", ")", "\n", "torch", ".", "add", "(", "logdet_term", "[", "curr_Jidx", "]", ",", "logdet_term_k", ",", "out", "=", "logdet_term", "[", "curr_Jidx", "]", ")", "\n", "\n", "logdet_term_km1", "=", "logdet_term_k", "\n", "\n", "for", "k", "in", "range", "(", "1", ",", "max_iter", ")", ":", "\n", "# compute #rr_nsamples estimates of logdet terms", "\n", "                        ", "while", "k", "+", "1", ">", "curr_Jvalue", ":", "\n", "# move to next rr-estimate, and update curr_Jidx", "\n", "                            ", "curr_Jidx", "+=", "1", "\n", "curr_Jvalue", "=", "sorted_max_rrcg_iter_list", "[", "curr_Jidx", "]", "\n", "# we need to copy accumulated summation from previous", "\n", "logdet_term", "[", "curr_Jidx", "]", "=", "logdet_term", "[", "curr_Jidx", "-", "1", "]", ".", "clone", "(", ")", "\n", "\n", "", "t_mat_k", "=", "t_mat", "[", ":", ",", ":", "k", "+", "1", ",", ":", "k", "+", "1", "]", "\n", "eigenvalues", ",", "eigenvectors", "=", "lanczos_tridiag_to_diag", "(", "t_mat_k", ")", "\n", "(", "logdet_term_k", ",", ")", "=", "slq", ".", "evaluate", "(", "ctx", ".", "matrix_shape", ",", "eigenvalues", ",", "eigenvectors", ",", "\n", "[", "lambda", "x", ":", "x", ".", "log", "(", ")", "]", ")", "\n", "logdet_term_diff", "=", "logdet_term_k", "-", "logdet_term_km1", "\n", "\n", "prob_k", "=", "(", "1", "-", "dist_of_iter", ".", "cdf", "(", "k", ")", ")", "\n", "torch", ".", "div", "(", "logdet_term_diff", ",", "prob_k", ",", "out", "=", "logdet_term_diff", ")", "\n", "torch", ".", "add", "(", "logdet_term", "[", "curr_Jidx", "]", ",", "logdet_term_diff", ",", "out", "=", "logdet_term", "[", "curr_Jidx", "]", ")", "\n", "\n", "logdet_term_km1", "=", "logdet_term_k", "\n", "\n", "", "while", "curr_Jidx", "<", "rr_nsamples", "-", "1", ":", "\n", "                        ", "curr_Jidx", "+=", "1", "\n", "logdet_term", "[", "curr_Jidx", "]", "=", "logdet_term", "[", "curr_Jidx", "-", "1", "]", ".", "clone", "(", ")", "\n", "\n", "", "logdet_term", "=", "logdet_term", ".", "mean", "(", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "eigenvalues", ",", "eigenvectors", "=", "lanczos_tridiag_to_diag", "(", "t_mat", ")", "# (num_probes, J), (num_probes, J, J)", "\n", "slq", "=", "StochasticLQ", "(", ")", "\n", "(", "logdet_term", ",", ")", "=", "slq", ".", "evaluate", "(", "ctx", ".", "matrix_shape", ",", "eigenvalues", ",", "eigenvectors", ",", "\n", "[", "lambda", "x", ":", "x", ".", "log", "(", ")", "]", ")", "# scalar value", "\n", "\n", "# Add correction", "\n", "", "if", "logdet_correction", "is", "not", "None", ":", "\n", "                    ", "logdet_term", "=", "logdet_term", "+", "logdet_correction", "\n", "\n", "# Extract inv_quad solves from all solves", "\n", "", "", "", "if", "ctx", ".", "inv_quad", ":", "\n", "            ", "inv_quad_solves", "=", "solves", ".", "narrow", "(", "-", "1", ",", "num_random_probes", ",", "num_inv_quad_solves", ")", "\n", "inv_quad_term", "=", "(", "inv_quad_solves", "*", "inv_quad_rhs", ")", ".", "sum", "(", "-", "2", ")", "\n", "\n", "", "ctx", ".", "num_random_probes", "=", "num_random_probes", "\n", "ctx", ".", "num_inv_quad_solves", "=", "num_inv_quad_solves", "\n", "\n", "if", "ctx", ".", "inv_quad", ":", "\n", "            ", "probe_vector_solves", "=", "solves", ".", "narrow", "(", "-", "1", ",", "0", ",", "num_random_probes", ")", "\n", "to_save", "=", "list", "(", "matrix_args", ")", "+", "[", "probe_vector_solves", ",", "inv_quad_solves_sample1", ",", "inv_quad_solves_sample2", "]", "\n", "", "else", ":", "\n", "# only logdet is required, in this case, solves = probe_vector_solves", "\n", "            ", "to_save", "=", "list", "(", "matrix_args", ")", "+", "[", "solves", "]", "\n", "", "ctx", ".", "save_for_backward", "(", "*", "to_save", ")", "\n", "\n", "if", "settings", ".", "memory_efficient", ".", "off", "(", ")", ":", "\n", "            ", "ctx", ".", "_lazy_tsr", "=", "lazy_tsr", "\n", "", "return", "inv_quad_term", ",", "logdet_term", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg._inv_quad_log_det.InvQuadLogDet.backward": [[293, 380], ["hasattr", "any", "tuple", "inv_quad_grad_output.unsqueeze.unsqueeze.abs().sum", "logdet_grad_output.unsqueeze.unsqueeze.abs().sum", "inv_quad_grad_output.unsqueeze.unsqueeze.unsqueeze", "ctx.representation_tree", "logdet_grad_output.unsqueeze.unsqueeze.unsqueeze", "logdet_grad_output.unsqueeze.unsqueeze.unsqueeze_", "probe_vector_solves.mul.mul.mul", "probe_vector_solves.mul.mul.mul_().mul_", "ctx.probe_vectors.mul", "inv_quad_solves_sample1.mul().mul_", "torch.cat", "torch.cat", "ctx.representation_tree._quad_form_derivative", "inv_quad_solves_sample1.mul().mul_.mul_", "torch.zeros_like.squeeze_", "list", "ValueError", "ctx.probe_vectors.size", "left_factors_list.append", "right_factors_list.append", "left_factors_list.append", "right_factors_list.append", "torch.zeros_like", "list", "inv_quad_grad_output.unsqueeze.unsqueeze.abs", "logdet_grad_output.unsqueeze.unsqueeze.abs", "inv_quad_solves_sample1.size", "probe_vector_solves.mul.mul.mul_", "inv_quad_solves_sample1.mul", "ctx.preconditioner", "inv_quad_solves_sample1.size"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "inv_quad_grad_output", ",", "logdet_grad_output", ")", ":", "\n", "        ", "matrix_arg_grads", "=", "None", "\n", "inv_quad_rhs_grad", "=", "None", "\n", "\n", "# Which backward passes should we compute?", "\n", "compute_inv_quad_grad", "=", "inv_quad_grad_output", ".", "abs", "(", ")", ".", "sum", "(", ")", "and", "ctx", ".", "inv_quad", "\n", "compute_logdet_grad", "=", "logdet_grad_output", ".", "abs", "(", ")", ".", "sum", "(", ")", "and", "ctx", ".", "logdet", "\n", "\n", "# Get input arguments, and get gradients in the proper form", "\n", "# matrix_args = ctx.saved_tensors[:-1]", "\n", "# solves = ctx.saved_tensors[-1]", "\n", "\n", "if", "ctx", ".", "inv_quad", ":", "\n", "            ", "matrix_args", "=", "ctx", ".", "saved_tensors", "[", ":", "-", "3", "]", "\n", "probe_vector_solves", "=", "ctx", ".", "saved_tensors", "[", "-", "3", "]", "\n", "inv_quad_solves_sample1", "=", "ctx", ".", "saved_tensors", "[", "-", "2", "]", "\n", "if", "inv_quad_solves_sample1", ".", "size", "(", ")", "[", "0", "]", "==", "0", ":", "\n", "                ", "raise", "ValueError", "(", "\"inv_quad_solves_sample1 should not be empty,\"", "\n", "\" but got inv_quad_solves_sample1.size = {}.\"", "\n", "\" If using rr, you should specify the value of rr_setings.rr_nsamples to be >= 2\"", ".", "format", "(", "\n", "inv_quad_solves_sample1", ".", "size", "(", ")", ")", ")", "\n", "", "inv_quad_solves_sample2", "=", "ctx", ".", "saved_tensors", "[", "-", "1", "]", "\n", "\n", "inv_quad_grad_output", "=", "inv_quad_grad_output", ".", "unsqueeze", "(", "-", "2", ")", "\n", "", "else", ":", "\n", "# only logdet is required", "\n", "            ", "matrix_args", "=", "ctx", ".", "saved_tensors", "[", ":", "-", "1", "]", "\n", "probe_vector_solves", "=", "ctx", ".", "saved_tensors", "[", "-", "1", "]", "\n", "\n", "", "if", "hasattr", "(", "ctx", ",", "\"_lazy_tsr\"", ")", ":", "\n", "            ", "lazy_tsr", "=", "ctx", ".", "_lazy_tsr", "\n", "", "else", ":", "\n", "            ", "lazy_tsr", "=", "ctx", ".", "representation_tree", "(", "*", "matrix_args", ")", "\n", "\n", "", "if", "compute_logdet_grad", ":", "\n", "            ", "logdet_grad_output", "=", "logdet_grad_output", ".", "unsqueeze", "(", "-", "1", ")", "\n", "logdet_grad_output", ".", "unsqueeze_", "(", "-", "1", ")", "\n", "\n", "# Divide up the solves", "\n", "", "if", "compute_logdet_grad", ":", "\n", "            ", "coef", "=", "1.0", "/", "ctx", ".", "probe_vectors", ".", "size", "(", "-", "1", ")", "\n", "probe_vector_solves", "=", "probe_vector_solves", ".", "mul", "(", "coef", ")", "\n", "probe_vector_solves", ".", "mul_", "(", "ctx", ".", "probe_vector_norms", ")", ".", "mul_", "(", "logdet_grad_output", ")", "\n", "probe_vectors", "=", "ctx", ".", "probe_vectors", ".", "mul", "(", "ctx", ".", "probe_vector_norms", ")", "\n", "", "if", "ctx", ".", "inv_quad", ":", "\n", "            ", "neg_inv_quad_solves_sample1_times_grad_out", "=", "inv_quad_solves_sample1", ".", "mul", "(", "inv_quad_grad_output", ")", ".", "mul_", "(", "-", "1", ")", "\n", "\n", "# input_1 gradient", "\n", "", "if", "any", "(", "ctx", ".", "needs_input_grad", ")", ":", "\n", "# Collect terms for arg grads", "\n", "            ", "left_factors_list", "=", "[", "]", "\n", "right_factors_list", "=", "[", "]", "\n", "\n", "if", "compute_logdet_grad", ":", "\n", "                ", "left_factors_list", ".", "append", "(", "probe_vector_solves", ")", "\n", "if", "ctx", ".", "preconditioner", "is", "not", "None", ":", "\n", "                    ", "probe_vectors", "=", "ctx", ".", "preconditioner", "(", "probe_vectors", ")", "\n", "", "right_factors_list", ".", "append", "(", "probe_vectors", ")", "\n", "\n", "", "if", "compute_inv_quad_grad", ":", "\n", "# left_factors_list.append(neg_inv_quad_solves_times_grad_out)", "\n", "# right_factors_list.append(inv_quad_solves)", "\n", "                ", "left_factors_list", ".", "append", "(", "neg_inv_quad_solves_sample1_times_grad_out", ")", "\n", "right_factors_list", ".", "append", "(", "inv_quad_solves_sample2", ")", "\n", "\n", "", "left_factors", "=", "torch", ".", "cat", "(", "left_factors_list", ",", "-", "1", ")", "\n", "right_factors", "=", "torch", ".", "cat", "(", "right_factors_list", ",", "-", "1", ")", "\n", "matrix_arg_grads", "=", "lazy_tsr", ".", "_quad_form_derivative", "(", "left_factors", ",", "right_factors", ")", "\n", "\n", "# input_2 gradients", "\n", "", "if", "compute_inv_quad_grad", "and", "ctx", ".", "needs_input_grad", "[", "10", "]", ":", "\n", "# inv_quad_rhs_grad = neg_inv_quad_solves_times_grad_out.mul_(-2)", "\n", "# TODO: instead of using sample1, we can use full sample", "\n", "            ", "inv_quad_rhs_grad", "=", "neg_inv_quad_solves_sample1_times_grad_out", ".", "mul_", "(", "-", "2", ")", "\n", "", "elif", "ctx", ".", "inv_quad", ":", "\n", "# inv_quad_rhs_grad = torch.zeros_like(inv_quad_solves)", "\n", "            ", "inv_quad_rhs_grad", "=", "torch", ".", "zeros_like", "(", "inv_quad_solves_sample1", ")", "\n", "", "if", "ctx", ".", "is_vector", ":", "\n", "            ", "inv_quad_rhs_grad", ".", "squeeze_", "(", "-", "1", ")", "\n", "\n", "", "if", "ctx", ".", "inv_quad", ":", "\n", "            ", "res", "=", "[", "inv_quad_rhs_grad", "]", "+", "list", "(", "matrix_arg_grads", ")", "\n", "", "else", ":", "\n", "            ", "res", "=", "list", "(", "matrix_arg_grads", ")", "\n", "\n", "", "return", "tuple", "(", "[", "None", "]", "*", "10", "+", "res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg._inv_quad_log_det.inv_quad_logdet": [[382, 447], ["isinstance", "lazy_tsr.representation", "lazy_tsr._probe_vectors_and_norms", "func", "gpytorch.settings.fast_computations.log_prob.off", "CholLazyTensor", "CholLazyTensor.inv_quad_logdet", "RuntimeError", "lazy_tsr.representation_tree", "inv_quad_term.sum.numel", "inv_quad_term.sum.sum", "lazy_tsr.size", "gpytorch.settings.max_cholesky_size.value", "TriangularLazyTensor", "list", "lazy_tsr.cholesky", "lazy_tsr.size", "lazy_tsr.dim", "inv_quad_rhs.dim", "inv_quad_rhs.numel", "RuntimeError", "lazy_tsr.dim", "inv_quad_rhs.dim", "RuntimeError", "RuntimeError"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg._inv_quad_log_det.inv_quad_logdet"], ["", "", "def", "inv_quad_logdet", "(", "lazy_tsr", ",", "inv_quad_rhs", "=", "None", ",", "logdet", "=", "False", ",", "reduce_inv_quad", "=", "True", ",", "dist_of_iter", "=", "None", ")", ":", "\n", "    ", "assert", "isinstance", "(", "lazy_tsr", ",", "LazyTensor", ")", "\n", "\n", "# Special case: use Cholesky to compute these terms", "\n", "if", "settings", ".", "fast_computations", ".", "log_prob", ".", "off", "(", ")", "or", "(", "lazy_tsr", ".", "size", "(", "-", "1", ")", "<=", "settings", ".", "max_cholesky_size", ".", "value", "(", ")", ")", ":", "\n", "        ", "from", "gpytorch", ".", "lazy", ".", "chol_lazy_tensor", "import", "CholLazyTensor", "\n", "from", "gpytorch", ".", "lazy", ".", "triangular_lazy_tensor", "import", "TriangularLazyTensor", "\n", "\n", "cholesky", "=", "CholLazyTensor", "(", "TriangularLazyTensor", "(", "lazy_tsr", ".", "cholesky", "(", ")", ")", ")", "\n", "return", "cholesky", ".", "inv_quad_logdet", "(", "inv_quad_rhs", "=", "inv_quad_rhs", ",", "logdet", "=", "logdet", ",", "reduce_inv_quad", "=", "reduce_inv_quad", ")", "\n", "\n", "# Default: use modified batch conjugate gradients to compute these terms", "\n", "# See NeurIPS 2018 paper: https://arxiv.org/abs/1809.11165", "\n", "", "if", "not", "lazy_tsr", ".", "is_square", ":", "\n", "        ", "raise", "RuntimeError", "(", "\n", "\"inv_quad_logdet only operates on (batches of) square (positive semi-definite) LazyTensors. \"", "\n", "\"Got a {} of size {}.\"", ".", "format", "(", "lazy_tsr", ".", "__class__", ".", "__name__", ",", "lazy_tsr", ".", "size", "(", ")", ")", "\n", ")", "\n", "\n", "", "if", "inv_quad_rhs", "is", "not", "None", ":", "\n", "        ", "if", "lazy_tsr", ".", "dim", "(", ")", "==", "2", "and", "inv_quad_rhs", ".", "dim", "(", ")", "==", "1", ":", "\n", "            ", "if", "lazy_tsr", ".", "shape", "[", "-", "1", "]", "!=", "inv_quad_rhs", ".", "numel", "(", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\n", "\"LazyTensor (size={}) cannot be multiplied with right-hand-side Tensor (size={}).\"", ".", "format", "(", "\n", "lazy_tsr", ".", "shape", ",", "inv_quad_rhs", ".", "shape", "\n", ")", "\n", ")", "\n", "", "", "elif", "lazy_tsr", ".", "dim", "(", ")", "!=", "inv_quad_rhs", ".", "dim", "(", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"LazyTensor (size={}) and right-hand-side Tensor (size={}) should have the same number \"", "\n", "\"of dimensions.\"", ".", "format", "(", "lazy_tsr", ".", "shape", ",", "inv_quad_rhs", ".", "shape", ")", "\n", ")", "\n", "", "elif", "lazy_tsr", ".", "batch_shape", "!=", "inv_quad_rhs", ".", "shape", "[", ":", "-", "2", "]", "or", "lazy_tsr", ".", "shape", "[", "-", "1", "]", "!=", "inv_quad_rhs", ".", "shape", "[", "-", "2", "]", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"LazyTensor (size={}) cannot be multiplied with right-hand-side Tensor (size={}).\"", ".", "format", "(", "\n", "lazy_tsr", ".", "shape", ",", "inv_quad_rhs", ".", "shape", "\n", ")", "\n", ")", "\n", "\n", "", "", "args", "=", "lazy_tsr", ".", "representation", "(", ")", "# TODO: check this", "\n", "\n", "if", "inv_quad_rhs", "is", "not", "None", ":", "\n", "        ", "args", "=", "[", "inv_quad_rhs", "]", "+", "list", "(", "args", ")", "\n", "\n", "", "probe_vectors", ",", "probe_vector_norms", "=", "lazy_tsr", ".", "_probe_vectors_and_norms", "(", ")", "\n", "\n", "func", "=", "InvQuadLogDet", ".", "apply", "\n", "\n", "inv_quad_term", ",", "logdet_term", "=", "func", "(", "\n", "lazy_tsr", ".", "representation_tree", "(", ")", ",", "\n", "lazy_tsr", ".", "dtype", ",", "\n", "lazy_tsr", ".", "device", ",", "\n", "lazy_tsr", ".", "matrix_shape", ",", "\n", "lazy_tsr", ".", "batch_shape", ",", "\n", "(", "inv_quad_rhs", "is", "not", "None", ")", ",", "\n", "logdet", ",", "\n", "probe_vectors", ",", "\n", "probe_vector_norms", ",", "\n", "dist_of_iter", ",", "\n", "*", "args", ",", "\n", ")", "\n", "\n", "if", "inv_quad_term", ".", "numel", "(", ")", "and", "reduce_inv_quad", ":", "\n", "        ", "inv_quad_term", "=", "inv_quad_term", ".", "sum", "(", "-", "1", ")", "\n", "", "return", "inv_quad_term", ",", "logdet_term", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.kernel_functions.is_vector": [[5, 7], ["vec.ndimension"], "function", ["None"], ["def", "is_vector", "(", "vec", ")", ":", "\n", "    ", "return", "vec", ".", "ndimension", "(", ")", "==", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.kernel_functions.sqexp": [[9, 17], ["kernel_functions.is_vector", "kernel_functions.is_vector", "torch.sum", "x.unsqueeze.unsqueeze", "torch.exp", "y.unsqueeze", "x.unsqueeze.unsqueeze", "y.unsqueeze"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.kernel_functions.is_vector", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.kernel_functions.is_vector"], ["", "def", "sqexp", "(", "x", ",", "y", ",", "sig2", ",", "ell", ")", ":", "\n", "    ", "if", "is_vector", "(", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "unsqueeze", "(", "-", "1", ")", "\n", "", "if", "is_vector", "(", "y", ")", ":", "\n", "        ", "y", "-", "y", ".", "unsqueeze", "(", "-", "1", ")", "\n", "", "sqdist", "=", "torch", ".", "sum", "(", "(", "(", "x", ".", "unsqueeze", "(", "-", "2", ")", "-", "y", ".", "unsqueeze", "(", "-", "3", ")", ")", "/", "ell", ")", "**", "2", ",", "dim", "=", "-", "1", ")", "\n", "k", "=", "sig2", "*", "torch", ".", "exp", "(", "-", "sqdist", "/", "2", ")", "\n", "return", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.kernel_functions.matern": [[19, 34], ["kernel_functions.is_vector", "kernel_functions.is_vector", "torch.sum", "x.unsqueeze.unsqueeze", "y.unsqueeze.unsqueeze", "torch.exp", "x.unsqueeze.unsqueeze", "y.unsqueeze.unsqueeze", "torch.exp", "torch.sqrt", "numpy.sqrt", "torch.sqrt", "torch.exp", "numpy.sqrt", "torch.sqrt"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.kernel_functions.is_vector", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.kernel_functions.is_vector"], ["", "def", "matern", "(", "x", ",", "y", ",", "sig2", ",", "ell", ",", "nu", "=", "0.5", ")", ":", "\n", "    ", "if", "is_vector", "(", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "unsqueeze", "(", "-", "1", ")", "\n", "", "if", "is_vector", "(", "y", ")", ":", "\n", "        ", "y", "=", "y", ".", "unsqueeze", "(", "-", "1", ")", "\n", "", "sqdist", "=", "torch", ".", "sum", "(", "(", "x", ".", "unsqueeze", "(", "-", "2", ")", "-", "y", ".", "unsqueeze", "(", "-", "3", ")", ")", "**", "2", ",", "dim", "=", "-", "1", ")", "# / (ell*ell)", "\n", "if", "nu", "==", ".5", ":", "\n", "        ", "kmat", "=", "torch", ".", "exp", "(", "-", "torch", ".", "sqrt", "(", "sqdist", ")", "/", "ell", ")", "\n", "", "elif", "nu", "==", "1.5", ":", "\n", "        ", "dp", "=", "np", ".", "sqrt", "(", "3", ")", "*", "torch", ".", "sqrt", "(", "sqdist", ")", "/", "ell", "\n", "kmat", "=", "(", "1", "+", "dp", ")", "*", "torch", ".", "exp", "(", "-", "dp", ")", "\n", "", "elif", "nu", "==", "2.5", ":", "\n", "        ", "dp", "=", "np", ".", "sqrt", "(", "5", ")", "*", "torch", ".", "sqrt", "(", "sqdist", ")", "/", "ell", "\n", "kmat", "=", "(", "1", "+", "dp", "+", "(", "5.", "/", "3.", ")", "*", "sqdist", "/", "(", "ell", "**", "2", ")", ")", "*", "torch", ".", "exp", "(", "-", "dp", ")", "\n", "", "return", "sig2", "*", "kmat", "\n", "", ""]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.baselines.run_sggp.SGGPModel.__init__": [[26, 55], ["super().__init__", "faiss.StandardGpuResources", "run_sggp.SGGPModel.register_buffer", "gpytorch.means.ZeroMean", "gpytorch.kernels.ScaleKernel", "run_sggp.SGGPModel.covar_module.raw_outputscale.register_hook", "gpytorch.kernels.keops.RBFKernel", "gpytorch.kernels.keops.MaternKernel", "gpytorch.kernels.keops.MaternKernel", "math.log", "gpytorch.kernels.keops.MaternKernel", "print", "gpytorch.kernels.keops.RBFKernel", "ValueError"], "methods", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.baselines.run_svgp.SVGPModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "train_x", ",", "train_y", ",", "likelihood", ",", "k", "=", "16", ",", "kernel_type", "=", "'rbf'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "train_x", ",", "train_y", ",", "likelihood", ")", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "res", "=", "faiss", ".", "StandardGpuResources", "(", ")", "\n", "self", ".", "register_buffer", "(", "\"train_x\"", ",", "train_x", ")", "\n", "\n", "self", ".", "likelihood", "=", "likelihood", "\n", "self", ".", "mean_module", "=", "gpytorch", ".", "means", ".", "ZeroMean", "(", ")", "\n", "\n", "if", "kernel_type", "==", "'rbf'", ":", "\n", "            ", "kernel", "=", "gpytorch", ".", "kernels", ".", "keops", ".", "RBFKernel", "(", ")", "\n", "", "elif", "kernel_type", "==", "'matern05'", ":", "\n", "            ", "kernel", "=", "gpytorch", ".", "kernels", ".", "keops", ".", "MaternKernel", "(", "nu", "=", "0.5", ")", "\n", "", "elif", "kernel_type", "==", "'matern15'", ":", "\n", "            ", "kernel", "=", "gpytorch", ".", "kernels", ".", "keops", ".", "MaternKernel", "(", "nu", "=", "1.5", ")", "\n", "", "elif", "kernel_type", "==", "'matern25'", ":", "\n", "            ", "kernel", "=", "gpytorch", ".", "kernels", ".", "keops", ".", "MaternKernel", "(", "nu", "=", "2.5", ")", "\n", "", "elif", "kernel_type", "==", "'rbf-ard'", ":", "\n", "            ", "ard_dim", "=", "train_x", ".", "shape", "[", "-", "1", "]", "\n", "print", "(", "f\"Getting ard_dim from training input, ard_dim = {ard_dim}\"", ")", "\n", "kernel", "=", "gpytorch", ".", "kernels", ".", "keops", ".", "RBFKernel", "(", "ard_num_dims", "=", "ard_dim", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"kernel_type must be chosen among {}, but got {}.\"", ".", "format", "(", "\n", "[", "'rbf'", ",", "'matern05'", ",", "'matern15'", ",", "'matern25'", "]", ",", "kernel_type", ")", ")", "\n", "", "self", ".", "covar_module", "=", "gpytorch", ".", "kernels", ".", "ScaleKernel", "(", "kernel", ")", "\n", "\n", "def", "scale", "(", "grad", ")", ":", "\n", "            ", "return", "grad", "*", "(", "self", ".", "k", "/", "math", ".", "log", "(", "k", ")", ")", "\n", "", "self", ".", "covar_module", ".", "raw_outputscale", ".", "register_hook", "(", "scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.baselines.run_sggp.SGGPModel.compute_train_nn_idx": [[56, 63], ["faiss.IndexFlatL2", "faiss.index_cpu_to_gpu", "run_sggp.SGGPModel.gpu_index.add", "torch.from_numpy().long().cuda", "run_sggp.SGGPModel.train_x.size", "torch.from_numpy().long", "torch.from_numpy", "run_sggp.SGGPModel.train_x.data.float", "run_sggp.SGGPModel.covar_module.base_kernel.lengthscale.data.float", "run_sggp.SGGPModel.gpu_index.search"], "methods", ["None"], ["", "def", "compute_train_nn_idx", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "k", ">", "0", "\n", "x", "=", "(", "self", ".", "train_x", ".", "data", ".", "float", "(", ")", "/", "self", ".", "covar_module", ".", "base_kernel", ".", "lengthscale", ".", "data", ".", "float", "(", ")", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "self", ".", "cpu_index", "=", "faiss", ".", "IndexFlatL2", "(", "self", ".", "train_x", ".", "size", "(", "-", "1", ")", ")", "\n", "self", ".", "gpu_index", "=", "faiss", ".", "index_cpu_to_gpu", "(", "self", ".", "res", ",", "0", ",", "self", ".", "cpu_index", ")", "\n", "self", ".", "gpu_index", ".", "add", "(", "x", ")", "\n", "self", ".", "train_nn_idx", "=", "torch", ".", "from_numpy", "(", "self", ".", "gpu_index", ".", "search", "(", "x", ",", "self", ".", "k", ")", "[", "1", "]", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.baselines.run_sggp.SGGPModel.forward": [[64, 68], ["run_sggp.SGGPModel.mean_module", "run_sggp.SGGPModel.covar_module", "gpytorch.distributions.MultivariateNormal"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "mean_x", "=", "self", ".", "mean_module", "(", "x", ")", "\n", "covar_x", "=", "self", ".", "covar_module", "(", "x", ")", "\n", "return", "gpytorch", ".", "distributions", ".", "MultivariateNormal", "(", "mean_x", ",", "covar_x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.baselines.run_sggp.run": [[70, 227], ["torch.manual_seed", "numpy.random.seed", "experiments.load_data.load_uci_data", "print", "print", "gpytorch.likelihoods.GaussianLikelihood", "run_sggp.SGGPModel", "torch.cuda.is_available", "experiments.experiment_fns.print_initial_hypers", "time.time", "datetime.datetime.now().strftime", "rrcg_experiments.experiment_fns_for_rrcg.start_all_logging_instruments", "SGGPModel.train", "torch.optim.Adam", "torch.optim.lr_scheduler.MultiStepLR", "gpytorch.mlls.ExactMarginalLogLikelihood", "range", "SGGPModel.set_train_data", "time.time", "rrcg_experiments.experiment_fns_for_rrcg.start_all_logging_instruments.info", "rrcg_experiments.experiment_fns_for_rrcg.start_all_logging_instruments.info", "rrcg_experiments.experiment_fns_for_rrcg.start_all_logging_instruments.info", "len", "len", "len", "SGGPModel.cuda", "os.path.exists", "print", "os.makedirs", "SGGPModel.parameters", "run_sggp.SGGPModel.compute_train_nn_idx", "torch.randperm", "tqdm.tqdm", "torch.optim.lr_scheduler.MultiStepLR.step", "SGGPModel.covar_module.outputscale.item", "SGGPModel.likelihood.noise.item", "rrcg_experiments.experiment_fns_for_rrcg.start_all_logging_instruments.info", "experiments.experiment_fns.get_string_time_taken", "experiments.experiment_fns.get_hypers", "torch.save", "SGGPModel.eval", "gpytorch.likelihoods.GaussianLikelihood.eval", "time.time", "zip", "time.time", "rrcg_experiments.experiment_fns_for_rrcg.start_all_logging_instruments.info", "rrcg_experiments.experiment_fns_for_rrcg.start_all_logging_instruments.info", "time.time", "zip", "rrcg_experiments.experiment_fns_for_rrcg.start_all_logging_instruments.info", "time.time", "rrcg_experiments.experiment_fns_for_rrcg.start_all_logging_instruments.info", "torch.cuda.is_available", "datetime.datetime.now", "len", "torch.randperm.split", "SGGPModel.set_train_data", "torch.optim.Adam.zero_grad", "SGGPModel.", "loss.backward", "torch.optim.Adam.step", "tqdm.tqdm.set_postfix", "time.time", "SGGPModel.covar_module.base_kernel.lengthscale.numel", "SGGPModel.covar_module.base_kernel.lengthscale.item", "os.path.exists", "print", "os.makedirs", "SGGPModel.state_dict", "os.path.join", "valid_x.split", "valid_y.split", "run_sggp.get_prediction_stats", "batch_rmse.pow().mul", "batch_nll.sum", "len", "experiments.experiment_fns.get_string_time_taken", "test_x.split", "test_y.split", "run_sggp.get_prediction_stats", "batch_rmse.pow().mul", "batch_nll.sum", "len", "experiments.experiment_fns.get_string_time_taken", "int", "int", "gpytorch.mlls.ExactMarginalLogLikelihood.mean", "len", "valid_rmse.cpu().numpy", "torch.mean().cpu().numpy", "len", "test_rmse.cpu().numpy", "torch.mean().cpu().numpy", "os.getenv", "loss.item", "loss.item", "loss.item", "batch_rmse.pow", "len", "batch_rmse.pow", "len", "gpytorch.mlls.ExactMarginalLogLikelihood.", "valid_rmse.cpu", "torch.mean().cpu", "test_rmse.cpu", "torch.mean().cpu", "torch.mean", "torch.mean"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.load_data.load_uci_data", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.print_initial_hypers", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.start_all_logging_instruments", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.train", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.baselines.run_sggp.SGGPModel.compute_train_nn_idx", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.get_string_time_taken", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.get_hypers", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg._inv_quad_log_det.InvQuadLogDet.backward", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.baselines.run_svgp.get_prediction_stats", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.get_string_time_taken", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.baselines.run_svgp.get_prediction_stats", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.get_string_time_taken", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.dist_of_iterations_for_rrcg.RRDist.mean", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.dist_of_iterations_for_rrcg.RRDist.mean", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.dist_of_iterations_for_rrcg.RRDist.mean"], ["", "", "def", "run", "(", "dataset", ",", "total_n", "=", "-", "1", ",", "kernel_type", "=", "'rbf'", ",", "num_inducing", "=", "1024", ",", "k", "=", "16", ",", "\n", "use_scheduler", "=", "True", ",", "seed", "=", "10", ",", "total_iters", "=", "20", ",", "lr", "=", "0.01", ",", "eval", "=", "True", ",", "\n", "save_model", "=", "True", ",", "batch_size", "=", "1024", ")", ":", "\n", "    ", "assert", "kernel_type", "in", "[", "'rbf'", ",", "'matern05'", ",", "'matern15'", ",", "'matern25'", ",", "'rbf-ard'", "]", ",", "kernel_type", "\n", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "###############", "\n", "##### Data ####", "\n", "###############", "\n", "train_x", ",", "train_y", ",", "test_x", ",", "test_y", ",", "valid_x", ",", "valid_y", "=", "load_uci_data", "(", "data_dir", "=", "None", ",", "dataset", "=", "dataset", ",", "total_n", "=", "total_n", ",", "\n", "cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "verbose", "=", "True", ")", "\n", "\n", "# Create batches of data", "\n", "\n", "\n", "print", "(", "\"Dataset stats:\"", ")", "\n", "train_n", ",", "valid_n", ",", "test_n", "=", "len", "(", "train_x", ")", ",", "len", "(", "valid_x", ")", ",", "len", "(", "test_x", ")", "\n", "print", "(", "\"train_n = {}, val_n = {}, test_n = {}\"", ".", "format", "(", "train_n", ",", "valid_n", ",", "test_n", ")", ")", "\n", "\n", "###############", "\n", "#### Model ####", "\n", "###############", "\n", "likelihood", "=", "gpytorch", ".", "likelihoods", ".", "GaussianLikelihood", "(", ")", "\n", "model", "=", "SGGPModel", "(", "train_x", ",", "train_y", ",", "likelihood", ",", "kernel_type", "=", "kernel_type", ",", "k", "=", "k", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "", "get_ls", "=", "False", "if", "kernel_type", "==", "'rbf-ard'", "else", "True", "\n", "print_initial_hypers", "(", "model", ",", "print_ls_flag", "=", "get_ls", ")", "\n", "\n", "####################", "\n", "##### Training #####", "\n", "####################", "\n", "train_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "experiment_params", "=", "{", "\n", "# dataset params:", "\n", "'dataset'", ":", "dataset", ",", "\n", "'train_n'", ":", "train_n", ",", "\n", "'valid_n'", ":", "valid_n", ",", "\n", "'test_n'", ":", "test_n", ",", "\n", "\n", "# model params", "\n", "'method'", ":", "\"sggp\"", ",", "\n", "'kernel_type'", ":", "kernel_type", ",", "\n", "'k'", ":", "k", ",", "\n", "\n", "# training params", "\n", "'seed'", ":", "seed", ",", "\n", "'total_niters'", ":", "total_iters", ",", "\n", "'lr'", ":", "lr", ",", "\n", "'use_scheduler'", ":", "use_scheduler", ",", "\n", "\n", "# misc", "\n", "'save_model'", ":", "save_model", "\n", "}", "\n", "\n", "log_path", "=", "f'./logs/{dataset}'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "log_path", ")", ":", "\n", "        ", "print", "(", "f\"Creating log_path: {log_path}\"", ")", "\n", "os", ".", "makedirs", "(", "log_path", ")", "\n", "", "time_stamp", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y_%m_%d_%H_%M_%S\"", ")", "\n", "logger", "=", "start_all_logging_instruments", "(", "experiment_params", ",", "results_path", "=", "log_path", "+", "f'/sggp_'", ",", "time_stamp", "=", "time_stamp", ")", "\n", "\n", "# Training loop", "\n", "model", ".", "train", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "\n", "optimizer", ",", "milestones", "=", "[", "int", "(", "total_iters", "*", "0.5", ")", ",", "int", "(", "total_iters", "*", "0.75", ")", "]", ",", "gamma", "=", "0.1", "\n", ")", "\n", "mll", "=", "gpytorch", ".", "mlls", ".", "ExactMarginalLogLikelihood", "(", "likelihood", ",", "model", ")", "\n", "\n", "for", "iteration", "in", "range", "(", "total_iters", ")", ":", "\n", "        ", "model", ".", "compute_train_nn_idx", "(", ")", "\n", "batch_order", "=", "torch", ".", "randperm", "(", "len", "(", "train_x", ")", ",", "device", "=", "train_x", ".", "device", ")", "\n", "\n", "iterator", "=", "tqdm", ".", "tqdm", "(", "batch_order", ".", "split", "(", "batch_size", ")", ",", "disable", "=", "not", "(", "os", ".", "getenv", "(", "\"TQDM\"", ")", ")", ")", "\n", "for", "index", "in", "iterator", ":", "\n", "            ", "indices", "=", "model", ".", "train_nn_idx", "[", "index", "]", "\n", "x_batch", "=", "train_x", "[", "indices", "]", "\n", "y_batch", "=", "train_y", "[", "indices", "]", "\n", "model", ".", "set_train_data", "(", "x_batch", ",", "y_batch", ",", "strict", "=", "False", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "x_batch", ")", "\n", "loss", "=", "-", "mll", "(", "output", ",", "y_batch", ")", ".", "mean", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "iterator", ".", "set_postfix", "(", "loss", "=", "loss", ".", "item", "(", ")", ")", "\n", "\n", "", "scheduler", ".", "step", "(", ")", "\n", "outputscale", "=", "model", ".", "covar_module", ".", "outputscale", ".", "item", "(", ")", "\n", "noise", "=", "model", ".", "likelihood", ".", "noise", ".", "item", "(", ")", "\n", "time_taken", "=", "time", ".", "time", "(", ")", "-", "train_start", "\n", "if", "model", ".", "covar_module", ".", "base_kernel", ".", "lengthscale", ".", "numel", "(", ")", "==", "1", ":", "\n", "            ", "ls", "=", "model", ".", "covar_module", ".", "base_kernel", ".", "lengthscale", ".", "item", "(", ")", "\n", "text", "=", "f'iter: {iteration:4d} | loss: {loss.item():+1.4e} | lr: {lr:.5f} | '", "\n", "text", "+=", "f'ls: {ls:4.6f} | noise: {noise:4.6f} | os: {outputscale:4.6f} | '", "\n", "text", "+=", "f'time: {time_taken:4.2f} sec'", "\n", "", "else", ":", "\n", "            ", "text", "=", "f'iter: {iteration:4d} | loss: {loss.item():+1.4e} | lr: {lr:.5f} | '", "\n", "text", "+=", "f'noise: {noise:4.6f} | os: {outputscale:4.6f} | '", "\n", "text", "+=", "f'time: {time_taken:4.2f} sec'", "\n", "", "logger", ".", "info", "(", "text", ")", "\n", "\n", "", "model", ".", "set_train_data", "(", "train_x", ",", "train_y", ",", "strict", "=", "False", ")", "\n", "train_end", "=", "time", ".", "time", "(", ")", "\n", "\n", "logger", ".", "info", "(", "f\"\\nFinish Training.\"", ")", "\n", "logger", ".", "info", "(", "get_string_time_taken", "(", "train_start", ",", "train_end", ")", ")", "\n", "logger", ".", "info", "(", "get_hypers", "(", "model", ")", ")", "\n", "\n", "if", "save_model", ":", "\n", "        ", "model_path", "=", "f'./models/{dataset}'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "model_path", ")", ":", "\n", "            ", "print", "(", "f\"Creating model_path: {model_path}\"", ")", "\n", "os", ".", "makedirs", "(", "model_path", ")", "\n", "", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "model_path", ",", "f'sggp_model_{time_stamp}'", ")", ")", "\n", "\n", "\n", "##############", "\n", "# Prediction #", "\n", "##############", "\n", "", "if", "eval", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "likelihood", ".", "eval", "(", ")", "\n", "\n", "# Make predictions by feeding model through likelihood", "\n", "eval_valid_start", "=", "time", ".", "time", "(", ")", "\n", "valid_mse", "=", "0.", "\n", "valid_nll", "=", "0.", "\n", "for", "x_batch", ",", "y_batch", "in", "zip", "(", "valid_x", ".", "split", "(", "512", ")", ",", "valid_y", ".", "split", "(", "512", ")", ")", ":", "\n", "            ", "batch_rmse", ",", "batch_nll", "=", "get_prediction_stats", "(", "model", ",", "x_batch", ",", "y_batch", ")", "\n", "valid_mse", "+=", "batch_rmse", ".", "pow", "(", "2", ")", ".", "mul", "(", "len", "(", "y_batch", ")", ")", "\n", "valid_nll", "+=", "batch_nll", ".", "sum", "(", ")", "\n", "", "valid_rmse", "=", "(", "valid_mse", "/", "len", "(", "valid_y", ")", ")", ".", "sqrt", "(", ")", "\n", "valid_nll", "=", "valid_nll", "/", "len", "(", "valid_y", ")", "\n", "eval_valid_end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\n", "\"Valid rmse = {:.4f}, nll = {:.4f}\"", ".", "format", "(", "valid_rmse", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "torch", ".", "mean", "(", "valid_nll", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "logger", ".", "info", "(", "get_string_time_taken", "(", "eval_valid_start", ",", "eval_valid_end", ")", ")", "\n", "\n", "eval_test_start", "=", "time", ".", "time", "(", ")", "\n", "test_mse", "=", "0.", "\n", "test_nll", "=", "0.", "\n", "for", "x_batch", ",", "y_batch", "in", "zip", "(", "test_x", ".", "split", "(", "512", ")", ",", "test_y", ".", "split", "(", "512", ")", ")", ":", "\n", "            ", "batch_rmse", ",", "batch_nll", "=", "get_prediction_stats", "(", "model", ",", "x_batch", ",", "y_batch", ")", "\n", "test_mse", "+=", "batch_rmse", ".", "pow", "(", "2", ")", ".", "mul", "(", "len", "(", "y_batch", ")", ")", "\n", "test_nll", "+=", "batch_nll", ".", "sum", "(", ")", "\n", "", "test_rmse", "=", "(", "test_mse", "/", "len", "(", "test_y", ")", ")", ".", "sqrt", "(", ")", "\n", "test_nll", "=", "test_nll", "/", "len", "(", "test_y", ")", "\n", "logger", ".", "info", "(", "\n", "\"Test rmse = {:.4f}, nll = {:.4f}\"", ".", "format", "(", "test_rmse", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "torch", ".", "mean", "(", "test_nll", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "eval_test_end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "get_string_time_taken", "(", "eval_test_start", ",", "eval_test_end", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.baselines.run_sggp.get_prediction_stats": [[229, 237], ["torch.no_grad", "gpytorch.settings.fast_pred_var", "model", "gpytorch.distributions.MultivariateNormal", "torch.sqrt", "gpytorch.distributions.MultivariateNormal.lazy_covariance_matrix.evaluate_kernel", "torch.mean", "model.likelihood.log_marginal", "torch.pow"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.dist_of_iterations_for_rrcg.RRDist.mean", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.GaussianLikelihood.log_marginal"], ["", "", "def", "get_prediction_stats", "(", "model", ",", "x", ",", "y", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ",", "gpytorch", ".", "settings", ".", "fast_pred_var", "(", ")", ":", "\n", "        ", "posterior", "=", "model", "(", "x", ")", "\n", "posterior", "=", "gpytorch", ".", "distributions", ".", "MultivariateNormal", "(", "posterior", ".", "mean", ",", "posterior", ".", "lazy_covariance_matrix", ".", "evaluate_kernel", "(", ")", ")", "\n", "rmse", "=", "torch", ".", "sqrt", "(", "torch", ".", "mean", "(", "torch", ".", "pow", "(", "posterior", ".", "mean", "-", "y", ",", "2", ")", ")", ")", "# a scalar", "\n", "nll", "=", "-", "model", ".", "likelihood", ".", "log_marginal", "(", "observations", "=", "y", ",", "function_dist", "=", "posterior", ")", "\n", "\n", "", "return", "rmse", ",", "nll", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.baselines.run_svgp.SVGPModel.__init__": [[24, 58], ["train_x.detach().view.detach().view.detach().view", "torch.randn", "torch.tensor().to", "gpytorch.variational.CholeskyVariationalDistribution", "gpytorch.variational.VariationalStrategy", "super().__init__", "gpytorch.means.ZeroMean", "gpytorch.kernels.ScaleKernel", "train_x.detach().view.detach().view.size", "train_x.detach().view.detach().view.size", "gpytorch.kernels.RBFKernel", "train_x.detach().view.detach().view.detach", "torch.tensor", "gpytorch.kernels.MaternKernel", "gpytorch.kernels.MaternKernel", "scipy.cluster.vq.kmeans2", "gpytorch.kernels.MaternKernel", "train_x.detach().view.detach().view.cpu().numpy", "torch.tensor().to.numpy", "print", "gpytorch.kernels.RBFKernel", "ValueError", "train_x.detach().view.detach().view.cpu"], "methods", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.baselines.run_svgp.SVGPModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "train_x", ",", "train_y", ",", "likelihood", ",", "num_inducing", "=", "1024", ",", "kernel_type", "=", "'rbf'", ")", ":", "\n", "# Create initial inducing points", "\n", "        ", "train_x", "=", "train_x", ".", "detach", "(", ")", ".", "view", "(", "-", "1", ",", "train_x", ".", "size", "(", "-", "1", ")", ")", "\n", "inducing_points", "=", "torch", ".", "randn", "(", "num_inducing", ",", "train_x", ".", "size", "(", "-", "1", ")", ",", "dtype", "=", "train_x", ".", "dtype", ")", "\n", "inducing_points", "=", "torch", ".", "tensor", "(", "\n", "kmeans2", "(", "train_x", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "inducing_points", ".", "numpy", "(", ")", ",", "minit", "=", "'matrix'", ")", "[", "0", "]", "\n", ")", ".", "to", "(", "train_x", ".", "device", ")", "\n", "\n", "# Create variational objects", "\n", "variational_distribution", "=", "gpytorch", ".", "variational", ".", "CholeskyVariationalDistribution", "(", "num_inducing", ")", "\n", "variational_strategy", "=", "gpytorch", ".", "variational", ".", "VariationalStrategy", "(", "\n", "self", ",", "inducing_points", ",", "variational_distribution", ",", "learn_inducing_locations", "=", "True", "\n", ")", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "variational_strategy", ")", "\n", "self", ".", "likelihood", "=", "likelihood", "\n", "self", ".", "mean_module", "=", "gpytorch", ".", "means", ".", "ZeroMean", "(", ")", "\n", "\n", "if", "kernel_type", "==", "'rbf'", ":", "\n", "            ", "kernel", "=", "gpytorch", ".", "kernels", ".", "RBFKernel", "(", ")", "\n", "", "elif", "kernel_type", "==", "'matern05'", ":", "\n", "            ", "kernel", "=", "gpytorch", ".", "kernels", ".", "MaternKernel", "(", "nu", "=", "0.5", ")", "\n", "", "elif", "kernel_type", "==", "'matern15'", ":", "\n", "            ", "kernel", "=", "gpytorch", ".", "kernels", ".", "MaternKernel", "(", "nu", "=", "1.5", ")", "\n", "", "elif", "kernel_type", "==", "'matern25'", ":", "\n", "            ", "kernel", "=", "gpytorch", ".", "kernels", ".", "MaternKernel", "(", "nu", "=", "2.5", ")", "\n", "", "elif", "kernel_type", "==", "'rbf-ard'", ":", "\n", "            ", "ard_dim", "=", "train_x", ".", "shape", "[", "-", "1", "]", "\n", "print", "(", "f\"Getting ard_dim from training input, ard_dim = {ard_dim}\"", ")", "\n", "kernel", "=", "gpytorch", ".", "kernels", ".", "RBFKernel", "(", "ard_num_dims", "=", "ard_dim", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"kernel_type must be chosen among {}, but got {}.\"", ".", "format", "(", "\n", "[", "'rbf'", ",", "'matern05'", ",", "'matern15'", ",", "'matern25'", "]", ",", "kernel_type", ")", ")", "\n", "", "self", ".", "covar_module", "=", "gpytorch", ".", "kernels", ".", "ScaleKernel", "(", "kernel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.baselines.run_svgp.SVGPModel.forward": [[59, 63], ["run_svgp.SVGPModel.mean_module", "run_svgp.SVGPModel.covar_module", "gpytorch.distributions.MultivariateNormal"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "mean_x", "=", "self", ".", "mean_module", "(", "x", ")", "\n", "covar_x", "=", "self", ".", "covar_module", "(", "x", ")", "\n", "return", "gpytorch", ".", "distributions", ".", "MultivariateNormal", "(", "mean_x", ",", "covar_x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.baselines.run_svgp.run": [[65, 216], ["torch.manual_seed", "numpy.random.seed", "experiments.load_data.load_uci_data", "print", "print", "gpytorch.likelihoods.GaussianLikelihood", "run_svgp.SVGPModel", "torch.cuda.is_available", "experiments.experiment_fns.print_initial_hypers", "time.time", "datetime.datetime.now().strftime", "rrcg_experiments.experiment_fns_for_rrcg.start_all_logging_instruments", "torch.utils.data.TensorDataset", "torch.utils.data.DataLoader", "SVGPModel.train", "torch.optim.Adam", "torch.optim.lr_scheduler.MultiStepLR", "gpytorch.mlls.VariationalELBO", "range", "time.time", "rrcg_experiments.experiment_fns_for_rrcg.start_all_logging_instruments.info", "rrcg_experiments.experiment_fns_for_rrcg.start_all_logging_instruments.info", "rrcg_experiments.experiment_fns_for_rrcg.start_all_logging_instruments.info", "len", "len", "len", "SVGPModel.cuda", "print", "torch.load", "SVGPModel.load_state_dict", "os.path.exists", "print", "os.makedirs", "SVGPModel.parameters", "torch.optim.lr_scheduler.MultiStepLR.step", "SVGPModel.covar_module.outputscale.item", "SVGPModel.likelihood.noise.item", "rrcg_experiments.experiment_fns_for_rrcg.start_all_logging_instruments.info", "experiments.experiment_fns.get_string_time_taken", "experiments.experiment_fns.get_hypers", "torch.save", "SVGPModel.eval", "gpytorch.likelihoods.GaussianLikelihood.eval", "time.time", "zip", "time.time", "rrcg_experiments.experiment_fns_for_rrcg.start_all_logging_instruments.info", "rrcg_experiments.experiment_fns_for_rrcg.start_all_logging_instruments.info", "time.time", "zip", "rrcg_experiments.experiment_fns_for_rrcg.start_all_logging_instruments.info", "time.time", "rrcg_experiments.experiment_fns_for_rrcg.start_all_logging_instruments.info", "torch.cuda.is_available", "datetime.datetime.now", "torch.optim.Adam.zero_grad", "SVGPModel.", "loss.backward", "torch.optim.Adam.step", "time.time", "SVGPModel.covar_module.base_kernel.lengthscale.numel", "SVGPModel.covar_module.base_kernel.lengthscale.item", "os.path.exists", "print", "os.makedirs", "SVGPModel.state_dict", "os.path.join", "valid_x.split", "valid_y.split", "run_svgp.get_prediction_stats", "batch_rmse.pow().mul", "batch_nll.sum", "len", "experiments.experiment_fns.get_string_time_taken", "test_x.split", "test_y.split", "run_svgp.get_prediction_stats", "batch_rmse.pow().mul", "batch_nll.sum", "len", "experiments.experiment_fns.get_string_time_taken", "int", "int", "gpytorch.mlls.VariationalELBO.", "len", "valid_rmse.cpu().numpy", "torch.mean().cpu().numpy", "len", "test_rmse.cpu().numpy", "torch.mean().cpu().numpy", "loss.item", "loss.item", "batch_rmse.pow", "len", "batch_rmse.pow", "len", "valid_rmse.cpu", "torch.mean().cpu", "test_rmse.cpu", "torch.mean().cpu", "torch.mean", "torch.mean"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.load_data.load_uci_data", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.print_initial_hypers", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.start_all_logging_instruments", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.train", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.get_string_time_taken", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.get_hypers", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg._inv_quad_log_det.InvQuadLogDet.backward", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.baselines.run_svgp.get_prediction_stats", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.get_string_time_taken", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.baselines.run_svgp.get_prediction_stats", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.get_string_time_taken", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.dist_of_iterations_for_rrcg.RRDist.mean", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.dist_of_iterations_for_rrcg.RRDist.mean"], ["", "", "def", "run", "(", "dataset", ",", "total_n", "=", "-", "1", ",", "kernel_type", "=", "'rbf'", ",", "num_inducing", "=", "1024", ",", "batch_size", "=", "1024", ",", "\n", "use_scheduler", "=", "True", ",", "seed", "=", "10", ",", "total_iters", "=", "300", ",", "lr", "=", "0.01", ",", "eval", "=", "True", ",", "load", "=", "None", ",", "\n", "save_model", "=", "True", ")", ":", "\n", "    ", "assert", "kernel_type", "in", "[", "'rbf'", ",", "'matern05'", ",", "'matern15'", ",", "'mater25'", ",", "'rbf-ard'", "]", ",", "kernel_type", "\n", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "###############", "\n", "##### Data ####", "\n", "###############", "\n", "train_x", ",", "train_y", ",", "test_x", ",", "test_y", ",", "valid_x", ",", "valid_y", "=", "load_uci_data", "(", "data_dir", "=", "None", ",", "dataset", "=", "dataset", ",", "total_n", "=", "total_n", ",", "\n", "cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "verbose", "=", "True", ")", "\n", "print", "(", "\"Dataset stats:\"", ")", "\n", "train_n", ",", "valid_n", ",", "test_n", "=", "len", "(", "train_x", ")", ",", "len", "(", "valid_x", ")", ",", "len", "(", "test_x", ")", "\n", "print", "(", "\"train_n = {}, val_n = {}, test_n = {}\"", ".", "format", "(", "train_n", ",", "valid_n", ",", "test_n", ")", ")", "\n", "\n", "###############", "\n", "#### Model ####", "\n", "###############", "\n", "likelihood", "=", "gpytorch", ".", "likelihoods", ".", "GaussianLikelihood", "(", ")", "\n", "model", "=", "SVGPModel", "(", "train_x", ",", "train_y", ",", "likelihood", ",", "kernel_type", "=", "kernel_type", ",", "num_inducing", "=", "num_inducing", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "", "get_ls", "=", "False", "if", "kernel_type", "==", "'rbf-ard'", "else", "True", "\n", "print_initial_hypers", "(", "model", ",", "print_ls_flag", "=", "get_ls", ")", "\n", "\n", "if", "load", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"Loading\"", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "load", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n", "####################", "\n", "##### Training #####", "\n", "####################", "\n", "", "train_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "experiment_params", "=", "{", "\n", "# dataset params:", "\n", "'dataset'", ":", "dataset", ",", "\n", "'train_n'", ":", "train_n", ",", "\n", "'valid_n'", ":", "valid_n", ",", "\n", "'test_n'", ":", "test_n", ",", "\n", "\n", "# model params", "\n", "'method'", ":", "\"svgp\"", ",", "\n", "'kernel_type'", ":", "kernel_type", ",", "\n", "'num_inducing'", ":", "num_inducing", ",", "\n", "\n", "# training params", "\n", "'seed'", ":", "seed", ",", "\n", "'total_niters'", ":", "total_iters", ",", "\n", "'batch_size'", ":", "batch_size", ",", "\n", "'lr'", ":", "lr", ",", "\n", "'use_scheduler'", ":", "use_scheduler", ",", "\n", "\n", "# misc", "\n", "'save_model'", ":", "save_model", "\n", "}", "\n", "\n", "log_path", "=", "f'./logs/{dataset}'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "log_path", ")", ":", "\n", "        ", "print", "(", "f\"Creating log_path: {log_path}\"", ")", "\n", "os", ".", "makedirs", "(", "log_path", ")", "\n", "", "time_stamp", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y_%m_%d_%H_%M_%S\"", ")", "\n", "logger", "=", "start_all_logging_instruments", "(", "experiment_params", ",", "results_path", "=", "log_path", "+", "f'/svgp_'", ",", "time_stamp", "=", "time_stamp", ")", "\n", "\n", "# Create dataloader", "\n", "train_dataset", "=", "torch", ".", "utils", ".", "data", ".", "TensorDataset", "(", "train_x", ",", "train_y", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ")", "\n", "\n", "# Training loop", "\n", "model", ".", "train", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "\n", "optimizer", ",", "milestones", "=", "[", "int", "(", "total_iters", "*", "0.5", ")", ",", "int", "(", "total_iters", "*", "0.75", ")", "]", ",", "gamma", "=", "0.1", "\n", ")", "\n", "mll", "=", "gpytorch", ".", "mlls", ".", "VariationalELBO", "(", "likelihood", ",", "model", ",", "num_data", "=", "train_n", ")", "\n", "\n", "for", "iteration", "in", "range", "(", "total_iters", ")", ":", "\n", "        ", "for", "x_batch", ",", "y_batch", "in", "train_loader", ":", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "x_batch", ")", "\n", "loss", "=", "-", "mll", "(", "output", ",", "y_batch", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "scheduler", ".", "step", "(", ")", "\n", "outputscale", "=", "model", ".", "covar_module", ".", "outputscale", ".", "item", "(", ")", "\n", "noise", "=", "model", ".", "likelihood", ".", "noise", ".", "item", "(", ")", "\n", "time_taken", "=", "time", ".", "time", "(", ")", "-", "train_start", "\n", "if", "model", ".", "covar_module", ".", "base_kernel", ".", "lengthscale", ".", "numel", "(", ")", "==", "1", ":", "\n", "            ", "ls", "=", "model", ".", "covar_module", ".", "base_kernel", ".", "lengthscale", ".", "item", "(", ")", "\n", "text", "=", "f'iter: {iteration:4d} | loss: {loss.item():+1.4e} | lr: {lr:.5f} | '", "\n", "text", "+=", "f'ls: {ls:4.6f} | noise: {noise:4.6f} | os: {outputscale:4.6f} | '", "\n", "text", "+=", "f'time: {time_taken:4.2f} sec'", "\n", "", "else", ":", "\n", "            ", "text", "=", "f'iter: {iteration:4d} | loss: {loss.item():+1.4e} | lr: {lr:.5f} | '", "\n", "text", "+=", "f'noise: {noise:4.6f} | os: {outputscale:4.6f} | '", "\n", "text", "+=", "f'time: {time_taken:4.2f} sec'", "\n", "", "logger", ".", "info", "(", "text", ")", "\n", "\n", "", "train_end", "=", "time", ".", "time", "(", ")", "\n", "\n", "logger", ".", "info", "(", "f\"\\nFinish Training.\"", ")", "\n", "logger", ".", "info", "(", "get_string_time_taken", "(", "train_start", ",", "train_end", ")", ")", "\n", "logger", ".", "info", "(", "get_hypers", "(", "model", ")", ")", "\n", "\n", "if", "save_model", ":", "\n", "        ", "model_path", "=", "f'./models/{dataset}'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "model_path", ")", ":", "\n", "            ", "print", "(", "f\"Creating model_path: {model_path}\"", ")", "\n", "os", ".", "makedirs", "(", "model_path", ")", "\n", "", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "model_path", ",", "f'svgp_model_{time_stamp}'", ")", ")", "\n", "\n", "##############", "\n", "# Prediction #", "\n", "##############", "\n", "", "if", "eval", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "likelihood", ".", "eval", "(", ")", "\n", "\n", "# Make predictions by feeding model through likelihood", "\n", "eval_valid_start", "=", "time", ".", "time", "(", ")", "\n", "valid_mse", "=", "0.", "\n", "valid_nll", "=", "0.", "\n", "for", "x_batch", ",", "y_batch", "in", "zip", "(", "valid_x", ".", "split", "(", "512", ")", ",", "valid_y", ".", "split", "(", "512", ")", ")", ":", "\n", "            ", "batch_rmse", ",", "batch_nll", "=", "get_prediction_stats", "(", "model", ",", "x_batch", ",", "y_batch", ")", "\n", "valid_mse", "+=", "batch_rmse", ".", "pow", "(", "2", ")", ".", "mul", "(", "len", "(", "y_batch", ")", ")", "\n", "valid_nll", "+=", "batch_nll", ".", "sum", "(", ")", "\n", "", "valid_rmse", "=", "(", "valid_mse", "/", "len", "(", "valid_y", ")", ")", ".", "sqrt", "(", ")", "\n", "valid_nll", "=", "valid_nll", "/", "len", "(", "valid_y", ")", "\n", "eval_valid_end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\n", "\"Valid rmse = {:.4f}, nll = {:.4f}\"", ".", "format", "(", "valid_rmse", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "torch", ".", "mean", "(", "valid_nll", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "logger", ".", "info", "(", "get_string_time_taken", "(", "eval_valid_start", ",", "eval_valid_end", ")", ")", "\n", "\n", "eval_test_start", "=", "time", ".", "time", "(", ")", "\n", "test_mse", "=", "0.", "\n", "test_nll", "=", "0.", "\n", "for", "x_batch", ",", "y_batch", "in", "zip", "(", "test_x", ".", "split", "(", "512", ")", ",", "test_y", ".", "split", "(", "512", ")", ")", ":", "\n", "            ", "batch_rmse", ",", "batch_nll", "=", "get_prediction_stats", "(", "model", ",", "x_batch", ",", "y_batch", ")", "\n", "test_mse", "+=", "batch_rmse", ".", "pow", "(", "2", ")", ".", "mul", "(", "len", "(", "y_batch", ")", ")", "\n", "test_nll", "+=", "batch_nll", ".", "sum", "(", ")", "\n", "", "test_rmse", "=", "(", "test_mse", "/", "len", "(", "test_y", ")", ")", ".", "sqrt", "(", ")", "\n", "test_nll", "=", "test_nll", "/", "len", "(", "test_y", ")", "\n", "logger", ".", "info", "(", "\n", "\"Test rmse = {:.4f}, nll = {:.4f}\"", ".", "format", "(", "test_rmse", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "torch", ".", "mean", "(", "test_nll", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "eval_test_end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "get_string_time_taken", "(", "eval_test_start", ",", "eval_test_end", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.baselines.run_svgp.get_prediction_stats": [[218, 225], ["torch.no_grad", "model.likelihood", "torch.sqrt", "model", "torch.mean", "model.likelihood.log_marginal", "torch.pow", "model"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.dist_of_iterations_for_rrcg.RRDist.mean", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.rrcg.gp_utils.GaussianLikelihood.log_marginal"], ["", "", "def", "get_prediction_stats", "(", "model", ",", "x", ",", "y", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "observed_pred", "=", "model", ".", "likelihood", "(", "model", "(", "x", ")", ")", "\n", "rmse", "=", "torch", ".", "sqrt", "(", "torch", ".", "mean", "(", "torch", ".", "pow", "(", "observed_pred", ".", "mean", "-", "y", ",", "2", ")", ")", ")", "# a scalar", "\n", "nll", "=", "-", "model", ".", "likelihood", ".", "log_marginal", "(", "observations", "=", "y", ",", "function_dist", "=", "model", "(", "x", ")", ")", "\n", "\n", "", "return", "rmse", ",", "nll", "\n", "\n"]], "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.baselines.run_rff.run": [[9, 36], ["torch.manual_seed", "numpy.random.seed", "torch.cuda.is_available", "experiments.load_data.get_train_data", "settings.update", "settings.update", "experiments.utils.start_all_logging_instruments", "experiments.experiment_fns.fit_gp", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.load_data.get_train_data", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.utils.start_all_logging_instruments", "home.repos.pwc.inspect_result.cunningham-lab_RTGPS.experiments.experiment_fns.fit_gp"], ["def", "run", "(", "dataset", ",", "model_name", "=", "'rff_ard'", ",", "seed", "=", "5348", ",", "total_n", "=", "-", "1", ",", "rff_features_n", "=", "700", ",", "\n", "total_iters", "=", "500", ",", "lr", "=", "0.01", ")", ":", "\n", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "use_cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n", "run_sample", ",", "sample_size", "=", "(", "False", ",", "1", ")", "if", "total_n", "==", "-", "1", "else", "(", "True", ",", "total_n", ")", "\n", "train_ds", "=", "get_train_data", "(", "'./datasets/'", ",", "dataset", ",", "run_sample", ",", "sample_size", ",", "\n", "use_cuda", ")", "\n", "settings", "=", "{", "\n", "'model_name'", ":", "model_name", ",", "'warmup'", ":", "False", ",", "\n", "'rff_samples'", ":", "rff_features_n", ",", "\n", "'total_iters'", ":", "total_iters", ",", "'lr'", ":", "lr", ",", "'lr_wd'", ":", "0.5", ",", "'optimizer'", ":", "'Adam'", ",", "\n", "'obs_num'", ":", "train_ds", "[", "0", "]", ".", "shape", "[", "0", "]", ",", "'dataset_name'", ":", "dataset", ",", "\n", "'cuda'", ":", "use_cuda", "\n", "}", "\n", "settings", ".", "update", "(", "{", "'seed'", ":", "seed", ",", "\n", "'truncation_name'", ":", "'onej'", ",", "\n", "'trunc_settings'", ":", "{", "'min_val'", ":", "rff_features_n", ",", "'max_val'", ":", "1500", ",", "\n", "'coeff'", ":", "1.", ",", "'step'", ":", "100", "}", "}", ")", "\n", "settings", ".", "update", "(", "{", "'mil'", ":", "[", "int", "(", "0.5", "*", "settings", "[", "'total_iters'", "]", ")", ",", "\n", "int", "(", "0.8", "*", "settings", "[", "'total_iters'", "]", ")", ",", "\n", "int", "(", "0.9", "*", "settings", "[", "'total_iters'", "]", ")", "]", "}", ")", "\n", "\n", "logger", "=", "start_all_logging_instruments", "(", "settings", ",", "results_path", "=", "'./logs/loss_'", ")", "\n", "fit_gp", "(", "train_ds", ",", "settings", ",", "logger", ")", "\n", "\n"]]}