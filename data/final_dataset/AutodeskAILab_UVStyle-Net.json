{"home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.graph_plotter.face_adjacency_plot": [[11, 51], ["pandas.DataFrame", "pandas.DataFrame", "x[].reshape().numpy", "numpy.array().flatten", "masked.groupby().mean", "zip", "plotly.Figure", "range", "go.Figure.update_layout", "x[].flatten().numpy", "x[].flatten().numpy", "len", "go.Figure.add_scatter3d", "x[].reshape", "numpy.array", "masked.groupby", "list", "list", "list", "plotly.Scatter3d", "x[].flatten", "x[].flatten", "dict", "graph.to_networkx", "dict", "range", "graph.number_of_nodes"], "function", ["None"], ["def", "face_adjacency_plot", "(", "graph", ",", "node_colors", "=", "None", ")", ":", "\n", "    ", "x", "=", "graph", ".", "ndata", "[", "'x'", "]", "\n", "df", "=", "pd", ".", "DataFrame", "(", "x", "[", ":", ",", ":", ",", ":", ",", ":", "3", "]", ".", "flatten", "(", "end_dim", "=", "-", "2", ")", ".", "numpy", "(", ")", ",", "columns", "=", "[", "'x'", ",", "'y'", ",", "'z'", "]", ")", "\n", "df", "[", "[", "'normal_x'", ",", "'normal_y'", ",", "'normal_z'", "]", "]", "=", "pd", ".", "DataFrame", "(", "x", "[", ":", ",", ":", ",", ":", ",", "3", ":", "6", "]", ".", "flatten", "(", "end_dim", "=", "-", "2", ")", ".", "numpy", "(", ")", ")", "\n", "df", "[", "'mask'", "]", "=", "x", "[", ":", ",", ":", ",", ":", ",", "6", "]", ".", "reshape", "(", "[", "-", "1", ",", "1", "]", ")", ".", "numpy", "(", ")", "\n", "\n", "df", "[", "'node'", "]", "=", "np", ".", "array", "(", "[", "[", "i", "]", "*", "100", "for", "i", "in", "range", "(", "graph", ".", "number_of_nodes", "(", ")", ")", "]", ")", ".", "flatten", "(", ")", "\n", "\n", "masked", "=", "df", "[", "df", "[", "'mask'", "]", "==", "1.", "]", "\n", "\n", "# face adjacency graph", "\n", "face_adj", "=", "masked", ".", "groupby", "(", "'node'", ")", ".", "mean", "(", ")", "\n", "if", "node_colors", "is", "None", ":", "\n", "        ", "node_colors", "=", "face_adj", ".", "index", "\n", "", "src", ",", "dst", ",", "_", "=", "zip", "(", "*", "list", "(", "graph", ".", "to_networkx", "(", ")", ".", "edges", ")", ")", "\n", "src", "=", "face_adj", ".", "loc", "[", "list", "(", "src", ")", "]", "\n", "dst", "=", "face_adj", ".", "loc", "[", "list", "(", "dst", ")", "]", "\n", "face_adj_fig", "=", "go", ".", "Figure", "(", "data", "=", "go", ".", "Scatter3d", "(", "x", "=", "face_adj", "[", "'x'", "]", ",", "\n", "y", "=", "face_adj", "[", "'y'", "]", ",", "\n", "z", "=", "face_adj", "[", "'z'", "]", ",", "\n", "marker", "=", "dict", "(", "\n", "color", "=", "node_colors", "\n", ")", ",", "\n", "mode", "=", "'markers'", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "src", ")", ")", ":", "\n", "        ", "face_adj_fig", ".", "add_scatter3d", "(", "\n", "# Line reference to the axes", "\n", "x", "=", "[", "src", ".", "iloc", "[", "i", "]", "[", "'x'", "]", ",", "dst", ".", "iloc", "[", "i", "]", "[", "'x'", "]", "]", ",", "\n", "y", "=", "[", "src", ".", "iloc", "[", "i", "]", "[", "'y'", "]", ",", "dst", ".", "iloc", "[", "i", "]", "[", "'y'", "]", "]", ",", "\n", "z", "=", "[", "src", ".", "iloc", "[", "i", "]", "[", "'z'", "]", ",", "dst", ".", "iloc", "[", "i", "]", "[", "'z'", "]", "]", ",", "\n", "mode", "=", "'lines'", ",", "\n", "line", "=", "dict", "(", "\n", "color", "=", "\"Black\"", ",", "\n", "width", "=", "1", ",", "\n", ")", "\n", ")", "\n", "", "face_adj_fig", ".", "update_layout", "(", "{", "\n", "'showlegend'", ":", "False", "\n", "}", ")", "\n", "return", "face_adj_fig", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.graph_plotter.graph_to_xyz_mask": [[53, 58], ["x[].reshape", "x[].reshape"], "function", ["None"], ["", "def", "graph_to_xyz_mask", "(", "graph", ")", ":", "\n", "    ", "x", "=", "graph", ".", "ndata", "[", "'x'", "]", "\n", "xyz", "=", "x", "[", ":", ",", ":", ",", ":", ",", ":", "3", "]", ".", "reshape", "(", "[", "-", "1", ",", "3", "]", ")", "\n", "mask", "=", "x", "[", ":", ",", ":", ",", ":", ",", "6", "]", ".", "reshape", "(", "[", "-", "1", "]", ")", "\n", "return", "xyz", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.graph_plotter.uv_samples_plot": [[60, 141], ["plotly.Scatter3d", "plotly.Figure", "go.Figure.update_layout", "plotly.Mesh3d", "go.Figure.add_trace", "range", "dict", "sklearn.preprocessing.StandardScaler().fit_transform", "len", "go.Figure.add_scatter3d", "sklearn.preprocessing.StandardScaler", "dict"], "function", ["None"], ["", "def", "uv_samples_plot", "(", "xyz", ",", "mask", ",", "\n", "xyz_grads", "=", "None", ",", "\n", "scale_xyz_grads", "=", "0.05", ",", "\n", "marker_size", "=", "3", ",", "\n", "mesh", ":", "trimesh", ".", "Trimesh", "=", "None", ",", "\n", "mesh_alpha", "=", "1.", ",", "\n", "corner_align", "=", "False", ")", ":", "\n", "\n", "    ", "if", "mask", "is", "not", "None", ":", "\n", "        ", "xyz", "=", "xyz", "[", "mask", "==", "1", "]", "\n", "\n", "", "scatter", "=", "go", ".", "Scatter3d", "(", "x", "=", "xyz", "[", ":", ",", "0", "]", ",", "\n", "y", "=", "xyz", "[", ":", ",", "1", "]", ",", "\n", "z", "=", "xyz", "[", ":", ",", "2", "]", ",", "\n", "marker", "=", "dict", "(", "\n", "size", "=", "marker_size", ",", "\n", "color", "=", "'rgb(0, 0, 255)'", "\n", ")", ",", "\n", "\n", "mode", "=", "'markers'", ")", "\n", "fig", "=", "go", ".", "Figure", "(", "data", "=", "scatter", ")", "\n", "\n", "if", "mesh", "is", "not", "None", ":", "\n", "        ", "if", "corner_align", ":", "\n", "            ", "mesh", ".", "vertices", "-=", "mesh", ".", "bounding_box", ".", "bounds", "[", "0", "]", "\n", "", "mesh_plot", "=", "go", ".", "Mesh3d", "(", "x", "=", "mesh", ".", "vertices", "[", ":", ",", "0", "]", ",", "\n", "y", "=", "mesh", ".", "vertices", "[", ":", ",", "1", "]", ",", "\n", "z", "=", "mesh", ".", "vertices", "[", ":", ",", "2", "]", ",", "\n", "i", "=", "mesh", ".", "faces", "[", ":", ",", "0", "]", ",", "\n", "j", "=", "mesh", ".", "faces", "[", ":", ",", "1", "]", ",", "\n", "k", "=", "mesh", ".", "faces", "[", ":", ",", "2", "]", ",", "\n", "color", "=", "'gray'", ",", "\n", "opacity", "=", "mesh_alpha", ")", "\n", "fig", ".", "add_trace", "(", "mesh_plot", ")", "\n", "\n", "", "if", "xyz_grads", "is", "not", "None", ":", "\n", "        ", "if", "mask", "is", "not", "None", ":", "\n", "            ", "xyz_grads", "=", "xyz_grads", "[", "mask", "==", "1", "]", "\n", "", "xyz_grads", "=", "StandardScaler", "(", "with_mean", "=", "False", ")", ".", "fit_transform", "(", "xyz_grads", ")", "*", "scale_xyz_grads", "\n", "# hist = ff.create_distplot([xyz_grads[:, 0].tolist(), xyz_grads[:, 1].tolist(), xyz_grads[:, 2].tolist()], bin_size=0.5, group_labels=['x', 'y', 'z'])", "\n", "# st.plotly_chart(go.Figure(hist))", "\n", "for", "i", "in", "range", "(", "len", "(", "xyz", ")", ")", ":", "\n", "            ", "x", ",", "y", ",", "z", "=", "xyz", "[", "i", "]", "\n", "x_", ",", "y_", ",", "z_", "=", "xyz_grads", "[", "i", "]", "\n", "fig", ".", "add_scatter3d", "(", "\n", "x", "=", "[", "x", ",", "x", "+", "x_", "]", ",", "\n", "y", "=", "[", "y", ",", "y", "+", "y_", "]", ",", "\n", "z", "=", "[", "z", ",", "z", "+", "z_", "]", ",", "\n", "mode", "=", "'lines'", ",", "\n", "line", "=", "dict", "(", "\n", "color", "=", "\"Black\"", ",", "\n", "width", "=", "3", ",", "\n", ")", "\n", ")", "\n", "", "", "fig", ".", "update_layout", "(", "{", "\n", "'showlegend'", ":", "False", ",", "\n", "'scene'", ":", "{", "\n", "'xaxis'", ":", "{", "\n", "'zeroline'", ":", "False", ",", "\n", "'showline'", ":", "False", ",", "\n", "'showgrid'", ":", "False", ",", "\n", "'showbackground'", ":", "False", ",", "\n", "'visible'", ":", "False", "\n", "}", ",", "\n", "'yaxis'", ":", "{", "\n", "'zeroline'", ":", "False", ",", "\n", "'showline'", ":", "False", ",", "\n", "'showgrid'", ":", "False", ",", "\n", "'showbackground'", ":", "False", ",", "\n", "'visible'", ":", "False", "\n", "}", ",", "\n", "'zaxis'", ":", "{", "\n", "'zeroline'", ":", "False", ",", "\n", "'showline'", ":", "False", ",", "\n", "'showgrid'", ":", "False", ",", "\n", "'showbackground'", ":", "False", ",", "\n", "'visible'", ":", "False", "\n", "}", "\n", "}", "\n", "}", ")", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.plot_utils.error_curve": [[11, 28], ["numpy.asarray", "numpy.asarray", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "ax.plot", "numpy.arange", "ax.fill_between", "ax.errorbar", "ValueError"], "function", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.utils.plot"], ["def", "error_curve", "(", "ax", ":", "matplotlib", ".", "axes", ".", "Axes", ",", "ys", ",", "ys_stds", ",", "xs", "=", "None", ",", "style", ":", "str", "=", "'band'", ",", "**", "kwargs", ")", ":", "\n", "    ", "ys", "=", "np", ".", "asarray", "(", "ys", ")", "\n", "ys_stds", "=", "np", ".", "asarray", "(", "ys_stds", ")", "\n", "label", "=", "kwargs", ".", "get", "(", "'label'", ")", "\n", "alpha", "=", "kwargs", ".", "get", "(", "'alpha'", ",", "0.2", ")", "\n", "color", "=", "kwargs", ".", "get", "(", "'c'", ")", "\n", "bandcolor", "=", "kwargs", ".", "get", "(", "'bandcolor'", ",", "color", ")", "\n", "barcolor", "=", "kwargs", ".", "get", "(", "'barcolor'", ",", "color", ")", "\n", "if", "xs", "is", "None", ":", "\n", "        ", "xs", "=", "np", ".", "arange", "(", "ys", ".", "size", ")", "\n", "", "ax", ".", "plot", "(", "xs", ",", "ys", ",", "label", "=", "label", ",", "c", "=", "color", ")", "\n", "if", "style", "==", "'band'", ":", "\n", "        ", "ax", ".", "fill_between", "(", "x", "=", "xs", ",", "y1", "=", "(", "ys", "-", "ys_stds", ")", ",", "y2", "=", "(", "ys", "+", "ys_stds", ")", ",", "alpha", "=", "alpha", ",", "facecolor", "=", "bandcolor", ")", "\n", "", "elif", "style", "==", "'bar'", ":", "\n", "        ", "ax", ".", "errorbar", "(", "x", "=", "xs", ",", "y", "=", "ys", ",", "yerr", "=", "ys_stds", ",", "alpha", "=", "alpha", ",", "ecolor", "=", "barcolor", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown error style {}, expected one of (\"band\", \"bar\")'", ".", "format", "(", "style", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.plot_utils.confusion_matrix": [[30, 58], ["sklearn.metrics.confusion_matrix", "sklearn.utils.multiclass.unique_labels", "numpy.arange", "ax.set_title", "ax.set_xlabel", "ax.set_ylabel", "ax.invert_yaxis", "ax.matshow", "ax.set", "range", "len", "metrics.confusion_matrix.max", "range", "metrics.confusion_matrix.astype", "ax.text", "metrics.confusion_matrix.sum", "format"], "function", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.plot_utils.confusion_matrix"], ["", "", "def", "confusion_matrix", "(", "ax", ":", "matplotlib", ".", "axes", ".", "Axes", ",", "true", ":", "np", ".", "ndarray", ",", "pred", ":", "np", ".", "ndarray", ",", "\n", "classes", ":", "List", "[", "str", "]", "=", "None", ",", "normalize", ":", "bool", "=", "True", ",", "\n", "cmap", ":", "matplotlib", ".", "colors", ".", "Colormap", "=", "plt", ".", "cm", ".", "Blues", ",", "title", ":", "str", "=", "''", ")", ":", "\n", "    ", "conf", "=", "metrics", ".", "confusion_matrix", "(", "true", ",", "pred", ")", "\n", "if", "normalize", ":", "\n", "        ", "conf", "=", "conf", ".", "astype", "(", "'float'", ")", "/", "conf", ".", "sum", "(", "axis", "=", "1", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "", "class_labels", "=", "unique_labels", "(", "true", ",", "pred", ")", "\n", "if", "classes", "is", "not", "None", ":", "\n", "        ", "class_labels", "=", "[", "classes", "[", "i", "]", "for", "i", "in", "class_labels", "]", "\n", "\n", "", "ticks", "=", "np", ".", "arange", "(", "len", "(", "class_labels", ")", ")", "\n", "ax", ".", "set_title", "(", "title", ")", "\n", "ax", ".", "set_xlabel", "(", "'Predicted Label'", ")", "\n", "ax", ".", "set_ylabel", "(", "'True Label'", ")", "\n", "ax", ".", "invert_yaxis", "(", ")", "\n", "\n", "im", "=", "ax", ".", "matshow", "(", "conf", ",", "interpolation", "=", "'nearest'", ",", "cmap", "=", "cmap", ")", "\n", "ax", ".", "set", "(", "xticks", "=", "ticks", ",", "xticklabels", "=", "class_labels", ",", "yticks", "=", "ticks", ",", "yticklabels", "=", "class_labels", ")", "\n", "#ax.figure.colorbar(im, ax=ax)", "\n", "\n", "# Loop over data dimensions and create text annotations.", "\n", "fmt", "=", "'.2f'", "if", "normalize", "else", "'d'", "\n", "thresh", "=", "conf", ".", "max", "(", ")", "/", "2.", "\n", "for", "i", "in", "range", "(", "conf", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "conf", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "ax", ".", "text", "(", "j", ",", "i", ",", "format", "(", "conf", "[", "i", ",", "j", "]", ",", "fmt", ")", ",", "\n", "ha", "=", "\"center\"", ",", "va", "=", "\"center\"", ",", "\n", "color", "=", "\"white\"", "if", "conf", "[", "i", ",", "j", "]", ">", "thresh", "else", "\"black\"", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.train_classifier.Model.__init__": [[21, 33], ["torch.Module.__init__", "networks.face_model.get_face_model", "networks.graph_model.get_graph_model", "networks.classifier.get_classifier"], "methods", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.classifier.NonLinearClassifier.__init__", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.face_model.get_face_model", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.graph_model.get_graph_model", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.classifier.get_classifier"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "args", ")", ":", "\n", "        ", "\"\"\"\n        Model used in this classification experiment\n        \"\"\"", "\n", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nurbs_feat_ext", "=", "face_model", ".", "get_face_model", "(", "\n", "output_dims", "=", "args", ".", "nurbs_emb_dim", ",", "\n", "input_channels", "=", "args", ".", "input_channels", ")", "\n", "self", ".", "brep_feat_ext", "=", "graph_model", ".", "get_graph_model", "(", "\n", "args", ".", "brep_model_type", ",", "args", ".", "nurbs_emb_dim", ",", "args", ".", "graph_emb_dim", ")", "\n", "self", ".", "cls", "=", "classifier", ".", "get_classifier", "(", "\n", "args", ".", "classifier_type", ",", "args", ".", "graph_emb_dim", ",", "num_classes", ",", "args", ".", "final_dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.train_classifier.Model.forward": [[34, 39], ["train_classifier.Model.nurbs_feat_ext", "train_classifier.Model.brep_feat_ext", "train_classifier.Model.cls"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "bg", ",", "feat", ")", ":", "\n", "        ", "out", "=", "self", ".", "nurbs_feat_ext", "(", "feat", ")", "\n", "node_emb", ",", "graph_emb", "=", "self", ".", "brep_feat_ext", "(", "bg", ",", "out", ")", "\n", "out", "=", "self", ".", "cls", "(", "graph_emb", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.train_classifier.train_one_epoch": [[41, 76], ["model.train", "enumerate", "numpy.concatenate", "numpy.concatenate", "sklearn.accuracy_score", "numpy.mean", "logging.info", "optimizer.zero_grad", "bg.ndata[].permute().to", "labels.to().squeeze.to().squeeze", "model", "torch.cross_entropy", "F.cross_entropy.backward", "optimizer.step", "total_loss_array.append", "np.concatenate.append", "np.concatenate.append", "F.cross_entropy.item", "labels.to().squeeze.cpu().numpy", "model.max", "preds.detach().cpu().numpy", "np.mean.item", "bg.ndata[].permute", "labels.to().squeeze.to", "labels.to().squeeze.cpu", "preds.detach().cpu", "preds.detach"], "function", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.chamfer_distance.chamfer_distance.ChamferDistanceFunction.backward"], ["", "", "def", "train_one_epoch", "(", "model", ",", "loader", ",", "optimizer", ",", "scheduler", ",", "epoch", ",", "iteration", ",", "args", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "total_loss_array", "=", "[", "]", "\n", "mean_acc_array", "=", "[", "]", "\n", "train_true", "=", "[", "]", "\n", "train_pred", "=", "[", "]", "\n", "for", "_", ",", "(", "bg", ",", "labels", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "\n", "        ", "iteration", "=", "iteration", "+", "1", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "feat", "=", "bg", ".", "ndata", "[", "'x'", "]", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "labels", "=", "labels", ".", "to", "(", "args", ".", "device", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "logits", "=", "model", "(", "bg", ",", "feat", ")", "\n", "#print(\"logits: \", logits.shape)", "\n", "#print(\"Label size: \", labels.shape)", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "logits", ",", "labels", ",", "reduction", "=", "'mean'", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "total_loss_array", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "train_true", ".", "append", "(", "labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "preds", "=", "logits", ".", "max", "(", "dim", "=", "1", ")", "[", "1", "]", "\n", "train_pred", ".", "append", "(", "preds", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "#scheduler.step()", "\n", "", "train_true", "=", "np", ".", "concatenate", "(", "train_true", ")", "\n", "train_pred", "=", "np", ".", "concatenate", "(", "train_pred", ")", "\n", "acc", "=", "metrics", ".", "accuracy_score", "(", "train_true", ",", "train_pred", ")", "\n", "\n", "avg_loss", "=", "np", ".", "mean", "(", "total_loss_array", ")", "\n", "\n", "logging", ".", "info", "(", "\"[Train] Epoch {:03} Loss {:2.3f}, Acc {}\"", ".", "format", "(", "\n", "epoch", ",", "avg_loss", ".", "item", "(", ")", ",", "acc", ")", ")", "\n", "return", "avg_loss", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.train_classifier.val_one_epoch": [[78, 101], ["model.eval", "numpy.concatenate", "numpy.concatenate", "sklearn.accuracy_score", "numpy.mean", "logging.info", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "bg.ndata[].permute().to", "labels.to().squeeze.to().squeeze", "model", "torch.cross_entropy", "total_loss_array.append", "np.concatenate.append", "np.concatenate.append", "np.mean.item", "F.cross_entropy.item", "labels.to().squeeze.cpu().numpy", "model.max", "preds.detach().cpu().numpy", "bg.ndata[].permute", "labels.to().squeeze.to", "labels.to().squeeze.cpu", "preds.detach().cpu", "preds.detach"], "function", ["None"], ["", "def", "val_one_epoch", "(", "model", ",", "loader", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "true", "=", "[", "]", "\n", "pred", "=", "[", "]", "\n", "total_loss_array", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "_", ",", "(", "bg", ",", "labels", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "            ", "feat", "=", "bg", ".", "ndata", "[", "'x'", "]", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "labels", "=", "labels", ".", "to", "(", "args", ".", "device", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "logits", "=", "model", "(", "bg", ",", "feat", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "logits", ",", "labels", ",", "reduction", "=", "'mean'", ")", "\n", "total_loss_array", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "true", ".", "append", "(", "labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "preds", "=", "logits", ".", "max", "(", "dim", "=", "1", ")", "[", "1", "]", "\n", "pred", ".", "append", "(", "preds", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "", "true", "=", "np", ".", "concatenate", "(", "true", ")", "\n", "pred", "=", "np", ".", "concatenate", "(", "pred", ")", "\n", "acc", "=", "metrics", ".", "accuracy_score", "(", "true", ",", "pred", ")", "\n", "avg_loss", "=", "np", ".", "mean", "(", "total_loss_array", ")", "\n", "logging", ".", "info", "(", "\"[Val]   Epoch {:03} Loss {:2.3f}, Acc {}\"", ".", "format", "(", "\n", "epoch", ",", "avg_loss", ".", "item", "(", ")", ",", "acc", ")", ")", "\n", "return", "avg_loss", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.train_classifier.experiment_name": [[103, 122], ["tokens.append", "datetime.now().strftime", "tokens.append", "tokens.append", "len", "tokens.append", "map", "str", "datetime.now"], "function", ["None"], ["", "def", "experiment_name", "(", "args", ")", "->", "str", ":", "\n", "    ", "\"\"\"\n    Create a name for the experiment from the command line arguments to the script\n    :param args: Arguments parsed by argparse\n    :return: Experiment name as a string\n    \"\"\"", "\n", "from", "datetime", "import", "datetime", "\n", "tokens", "=", "[", "\"Classifier\"", ",", "args", ".", "brep_model_type", ",", "args", ".", "nurbs_model_type", ",", "\"mask_\"", "+", "args", ".", "mask_mode", ",", "\"area_channel_\"", "+", "str", "(", "args", ".", "area_as_channel", ")", ",", "\n", "args", ".", "classifier_type", ",", "args", ".", "graph_emb_dim", ",", "args", ".", "nurbs_emb_dim", ",", "f'squaresym_{args.apply_square_symmetry}'", "]", "\n", "if", "args", ".", "split_suffix", "!=", "\"\"", ":", "\n", "        ", "tokens", ".", "append", "(", "f'split_suffix{args.split_suffix}'", ")", "\n", "", "if", "args", ".", "use_timestamp", ":", "\n", "        ", "timestamp", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%d-%m-%Y-%H-%M-%S\"", ")", "\n", "tokens", ".", "append", "(", "timestamp", ")", "\n", "", "if", "args", ".", "input_channels", "==", "'xyz_only'", ":", "\n", "        ", "tokens", ".", "append", "(", "args", ".", "input_channels", ")", "\n", "", "if", "len", "(", "args", ".", "suffix", ")", ">", "0", ":", "\n", "        ", "tokens", ".", "append", "(", "args", ".", "suffix", ")", "\n", "", "return", "\".\"", ".", "join", "(", "map", "(", "str", ",", "tokens", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.train_classifier.parse": [[124, 153], ["parse_util.get_train_parser", "parse_util.get_train_parser.add_argument", "parse_util.get_train_parser.add_argument", "parse_util.get_train_parser.add_argument", "parse_util.get_train_parser.add_argument", "parse_util.get_train_parser.add_argument", "parse_util.get_train_parser.add_argument", "parse_util.get_train_parser.add_argument", "parse_util.get_train_parser.add_argument", "parse_util.get_train_parser.add_argument", "parse_util.get_train_parser.add_argument", "parse_util.get_train_parser.add_argument", "parse_util.get_train_parser.add_argument", "parse_util.get_train_parser.parse_args"], "function", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.parse_util.get_train_parser"], ["", "def", "parse", "(", ")", ":", "\n", "    ", "parser", "=", "parse_util", ".", "get_train_parser", "(", "\"UV-Net Classifier Training Script for Solids\"", ")", "\n", "# B-rep face", "\n", "parser", ".", "add_argument", "(", "'--nurbs_model_type'", ",", "type", "=", "str", ",", "choices", "=", "(", "'cnn'", ",", "'wcnn'", ")", ",", "default", "=", "'cnn'", ",", "\n", "help", "=", "'Feature extractor for NURBS surfaces'", ")", "\n", "parser", ".", "add_argument", "(", "'--nurbs_emb_dim'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "\n", "help", "=", "'Embedding dimension for NURBS feature extractor (default: 64)'", ")", "\n", "parser", ".", "add_argument", "(", "\"--mask_mode\"", ",", "type", "=", "str", ",", "default", "=", "\"channel\"", ",", "choices", "=", "(", "\"channel\"", ",", "\"multiply\"", ")", ",", "\n", "help", "=", "\"Whether to consider trimming mask as channel or multiply it with computed features\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--area_as_channel\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether to use area as a channel in the input\"", ")", "\n", "parser", ".", "add_argument", "(", "'--input_channels'", ",", "type", "=", "str", ",", "choices", "=", "(", "'xyz_only'", ",", "'xyz_normals'", ")", ",", "default", "=", "'xyz_normals'", ")", "\n", "# B-rep graph", "\n", "parser", ".", "add_argument", "(", "'--brep_model_type'", ",", "type", "=", "str", ",", "default", "=", "'gin_grouping'", ",", "\n", "help", "=", "'Feature extractor for B-rep face-adj graph'", ")", "\n", "parser", ".", "add_argument", "(", "'--graph_emb_dim'", ",", "type", "=", "int", ",", "\n", "default", "=", "128", ",", "help", "=", "'Embeddings before graph pooling'", ")", "\n", "# Classifier", "\n", "parser", ".", "add_argument", "(", "'--classifier_type'", ",", "type", "=", "str", ",", "choices", "=", "(", "'linear'", ",", "'non_linear'", ")", ",", "default", "=", "'non_linear'", ",", "\n", "help", "=", "'Classifier model'", ")", "\n", "parser", ".", "add_argument", "(", "'--final_dropout'", ",", "type", "=", "float", ",", "\n", "default", "=", "0.3", ",", "help", "=", "'final layer dropout (default: 0.3)'", ")", "\n", "parser", ".", "add_argument", "(", "'--size_percentage'", ",", "type", "=", "float", ",", "default", "=", "None", ",", "help", "=", "'Percentage of data to use'", ")", "\n", "# Data augmentation", "\n", "parser", ".", "add_argument", "(", "'--apply_square_symmetry'", ",", "type", "=", "float", ",", "default", "=", "0.3", ",", "\n", "help", "=", "'Probability of applying square symmetry transformation to uv domain'", ")", "\n", "parser", ".", "add_argument", "(", "'--split_suffix'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'Suffix for dataset split folders'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.experiment_tools.cluster": [[17, 24], ["sklearn.cluster.KMeans", "sklearn.cluster.KMeans.fit", "sklearn.metrics.cluster.adjusted_mutual_info_score", "print", "numpy.squeeze"], "function", ["None"], ["def", "cluster", "(", "embeddings", ",", "labels", ")", ":", "\n", "    ", "kmeans", "=", "KMeans", "(", "init", "=", "\"k-means++\"", ",", "n_clusters", "=", "26", ",", "n_init", "=", "100", ")", "\n", "kmeans", ".", "fit", "(", "embeddings", ")", "\n", "pred_labels", "=", "kmeans", ".", "labels_", "\n", "score", "=", "adjusted_mutual_info_score", "(", "np", ".", "squeeze", "(", "labels", ")", ",", "pred_labels", ")", "\n", "print", "(", "\"NMI score {}\"", ".", "format", "(", "score", ")", ")", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.experiment_tools.get_embedding_solid": [[26, 43], ["model.eval", "numpy.concatenate", "numpy.concatenate", "torch.tensor", "torch.tensor", "torch.no_grad", "enumerate", "bg.ndata[].permute().to", "label.to.to", "model", "torch.tensor.append", "torch.tensor.append", "embedding.detach().cpu().numpy", "label.to.detach().cpu().numpy", "bg.ndata[].permute", "embedding.detach().cpu", "label.to.detach().cpu", "embedding.detach", "label.to.detach"], "function", ["None"], ["", "def", "get_embedding_solid", "(", "model", ",", "loader", ",", "device", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "embeddings", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "_", ",", "(", "bg", ",", "_", ",", "label", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "            ", "feat", "=", "bg", ".", "ndata", "[", "\"x\"", "]", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "to", "(", "device", ")", "\n", "label", "=", "label", ".", "to", "(", "device", ")", "# .squeeze(-1)", "\n", "# points = points.to(device)", "\n", "pred_out", ",", "embedding", "=", "model", "(", "bg", ",", "feat", ")", "\n", "embeddings", ".", "append", "(", "embedding", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "labels", ".", "append", "(", "label", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "", "embeddings", "=", "np", ".", "concatenate", "(", "embeddings", ")", "\n", "labels", "=", "np", ".", "concatenate", "(", "labels", ")", "\n", "embeddings", "=", "torch", ".", "tensor", "(", "embeddings", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "labels", "=", "torch", ".", "tensor", "(", "labels", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "return", "embeddings", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.experiment_tools.get_embedding_pc": [[45, 61], ["model.eval", "numpy.concatenate", "numpy.concatenate", "torch.tensor", "torch.tensor", "torch.no_grad", "enumerate", "label.to.to", "points.to.to", "model", "torch.tensor.append", "torch.tensor.append", "points.to.transpose", "embedding.detach().cpu().numpy", "label.to.detach().cpu().numpy", "embedding.detach().cpu", "label.to.detach().cpu", "embedding.detach", "label.to.detach"], "function", ["None"], ["", "def", "get_embedding_pc", "(", "model", ",", "loader", ",", "device", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "embeddings", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "_", ",", "(", "_", ",", "points", ",", "label", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "            ", "label", "=", "label", ".", "to", "(", "device", ")", "# .squeeze(-1)", "\n", "points", "=", "points", ".", "to", "(", "device", ")", "\n", "pred_out", ",", "embedding", "=", "model", "(", "points", ".", "transpose", "(", "-", "1", ",", "1", ")", ")", "\n", "embeddings", ".", "append", "(", "embedding", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "labels", ".", "append", "(", "label", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "", "embeddings", "=", "np", ".", "concatenate", "(", "embeddings", ")", "\n", "labels", "=", "np", ".", "concatenate", "(", "labels", ")", "\n", "embeddings", "=", "torch", ".", "tensor", "(", "embeddings", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "labels", "=", "torch", ".", "tensor", "(", "labels", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "return", "embeddings", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.experiment_tools.visualize_pc": [[63, 83], ["experiment_tools.multiple_plot_label_pc", "numpy.savetxt", "numpy.savetxt", "batch_pc_gt.detach().cpu().numpy", "batch_pc_pred.detach().cpu().numpy", "os.join", "batch_pc_pred[].detach().cpu().numpy", "os.join", "batch_pc_gt[].detach().cpu().numpy", "batch_pc_gt.detach().cpu", "batch_pc_pred.detach().cpu", "batch_pc_pred[].detach().cpu", "batch_pc_gt[].detach().cpu", "batch_pc_gt.detach", "batch_pc_pred.detach", "batch_pc_pred[].detach", "batch_pc_gt[].detach"], "function", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.experiment_tools.multiple_plot_label_pc"], ["", "def", "visualize_pc", "(", "batch_pc_pred", ",", "batch_pc_gt", ",", "filename", ",", "img_dir", ")", ":", "\n", "    ", "multiple_plot_label_pc", "(", "\n", "batch_pc_gt", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "batch_pc_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "4", ",", "\n", "filenames", "=", "[", "f\"gt_vs_pred_{fn}\"", "for", "fn", "in", "filename", "]", ",", "\n", "save_loc", "=", "img_dir", ",", "\n", ")", "\n", "\n", "np", ".", "savetxt", "(", "\n", "osp", ".", "join", "(", "img_dir", ",", "f\"pred_{filename[0]}.csv\"", ")", ",", "\n", "batch_pc_pred", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "delimiter", "=", "\",\"", ",", "\n", "header", "=", "\"x,y,z\"", ",", "\n", ")", "\n", "np", ".", "savetxt", "(", "\n", "osp", ".", "join", "(", "img_dir", ",", "f\"gt_{filename[0]}.csv\"", ")", ",", "\n", "batch_pc_gt", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "delimiter", "=", "\",\"", ",", "\n", "header", "=", "\"x,y,z\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.experiment_tools.multiple_plot_label_pc": [[86, 135], ["range", "matplotlib.figure", "plt.figure.add_subplot", "fig.add_subplot.scatter", "fig.add_subplot.view_init", "fig.add_subplot.set_xlim", "fig.add_subplot.set_ylim", "fig.add_subplot.set_zlim", "fig.add_subplot.axis", "fig.add_subplot.grid", "plt.figure.add_subplot", "fig.add_subplot.scatter", "fig.add_subplot.view_init", "fig.add_subplot.set_xlim", "fig.add_subplot.set_ylim", "fig.add_subplot.set_zlim", "fig.add_subplot.axis", "fig.add_subplot.grid", "os.join", "matplotlib.savefig", "matplotlib.close", "matplotlib.show"], "function", ["None"], ["", "def", "multiple_plot_label_pc", "(", "batch_real", ",", "batch_pred", ",", "num_plots", ",", "filenames", ",", "save_loc", "=", "None", ")", ":", "\n", "\n", "    ", "for", "i", "in", "range", "(", "num_plots", ")", ":", "\n", "        ", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "\"121\"", ",", "projection", "=", "\"3d\"", ")", "\n", "real", "=", "batch_real", "[", "i", "]", "\n", "\n", "ax", ".", "scatter", "(", "\n", "real", "[", ":", ",", "0", "]", ",", "\n", "real", "[", ":", ",", "1", "]", ",", "\n", "real", "[", ":", ",", "2", "]", ",", "\n", "color", "=", "\"dimgray\"", ",", "\n", "edgecolors", "=", "\"k\"", ",", "\n", "linewidths", "=", "0.5", ",", "\n", ")", "\n", "ax", ".", "view_init", "(", "-", "225", ",", "90", ")", "\n", "ax", ".", "set_xlim", "(", "[", "-", "1.1", ",", "1.1", "]", ")", "\n", "ax", ".", "set_ylim", "(", "[", "-", "1.1", ",", "1.1", "]", ")", "\n", "ax", ".", "set_zlim", "(", "[", "-", "1.1", ",", "1.1", "]", ")", "\n", "ax", ".", "axis", "(", "\"off\"", ")", "\n", "ax", ".", "grid", "(", "False", ")", "\n", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "\"122\"", ",", "projection", "=", "\"3d\"", ")", "\n", "pred", "=", "batch_pred", "[", "i", "]", "\n", "\n", "ax", ".", "scatter", "(", "\n", "pred", "[", ":", ",", "0", "]", ",", "\n", "pred", "[", ":", ",", "1", "]", ",", "\n", "pred", "[", ":", ",", "2", "]", ",", "\n", "color", "=", "\"dimgray\"", ",", "\n", "edgecolors", "=", "\"k\"", ",", "\n", "linewidths", "=", "0.5", ",", "\n", ")", "\n", "ax", ".", "view_init", "(", "-", "225", ",", "90", ")", "\n", "ax", ".", "set_xlim", "(", "[", "-", "1.1", ",", "1.1", "]", ")", "\n", "ax", ".", "set_ylim", "(", "[", "-", "1.1", ",", "1.1", "]", ")", "\n", "ax", ".", "set_zlim", "(", "[", "-", "1.1", ",", "1.1", "]", ")", "\n", "ax", ".", "axis", "(", "\"off\"", ")", "\n", "ax", ".", "grid", "(", "False", ")", "\n", "\n", "save_img_loc", "=", "osp", ".", "join", "(", "save_loc", ",", "filenames", "[", "i", "]", "+", "\".png\"", ")", "\n", "if", "save_loc", "!=", "None", ":", "\n", "            ", "plt", ".", "savefig", "(", "save_img_loc", ")", "\n", "plt", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "            ", "plt", ".", "show", "(", ")", "\n", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.experiment_tools.retrieve_nearest": [[137, 157], ["range", "random.randint", "numpy.expand_dims", "scipy.spatial.distance.cdist", "range", "print", "print", "len", "dist_matrix[].argsort", "nearest.append", "print"], "function", ["None"], ["", "def", "retrieve_nearest", "(", "\n", "embeddings", ",", "loader", ",", "num_retrievals", "=", "1", ",", "num_retrievals_per_query", "=", "5", ",", "batch_size", "=", "32", "\n", ")", ":", "\n", "    ", "retrievals", "=", "{", "}", "\n", "for", "_", "in", "range", "(", "num_retrievals", ")", ":", "\n", "        ", "query_object_ind", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "embeddings", ")", ")", "\n", "query_object_name", "=", "loader", ".", "dataset", ".", "pc_files", "[", "query_object_ind", "]", "\n", "query_embedding", "=", "embeddings", "[", "query_object_ind", "]", "\n", "query_embedding", "=", "np", ".", "expand_dims", "(", "query_embedding", ",", "axis", "=", "0", ")", "\n", "dist_matrix", "=", "cdist", "(", "query_embedding", ",", "embeddings", ",", "metric", "=", "\"euclidean\"", ")", "\n", "idx", "=", "dist_matrix", "[", "0", "]", ".", "argsort", "(", ")", "[", "1", ":", "num_retrievals_per_query", "+", "1", "]", "\n", "nearest", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "idx", ".", "size", ")", ":", "\n", "            ", "nearest", ".", "append", "(", "loader", ".", "dataset", ".", "pc_files", "[", "idx", "[", "i", "]", "]", ")", "\n", "", "print", "(", "f\"Query: {query_object_name}\"", ")", "\n", "for", "item", "in", "nearest", ":", "\n", "            ", "print", "(", "f\"Nearest: {item}\"", ")", "\n", "", "retrievals", "[", "query_object_name", "]", "=", "nearest", "\n", "print", "(", "\"--------------------------------------------\"", ")", "\n", "", "return", "retrievals", "\n", "", ""]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.train_test_recon_pc.pc2pc_step": [[12, 19], ["points.to.to", "model", "points.to.transpose", "chamfer_loss"], "function", ["None"], ["def", "pc2pc_step", "(", "model", ",", "batch", ",", "batch_idx", ",", "device", ")", ":", "\n", "# points, _ = batch", "\n", "    ", "(", "bg", ",", "points", ",", "graphfiles", ")", "=", "batch", "\n", "points", "=", "points", ".", "to", "(", "device", ")", "\n", "pred_points", ",", "embeddings", "=", "model", "(", "points", ".", "transpose", "(", "-", "1", ",", "1", ")", ")", "\n", "loss", "=", "chamfer_loss", "(", "points", ",", "pred_points", ")", "*", "1000", "\n", "return", "pred_points", ",", "points", ",", "embeddings", ",", "loss", ",", "bg", ",", "graphfiles", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.train_test_recon_pc.solid2pc_step": [[21, 31], ["bg.ndata[].permute().to", "points.to.to", "model", "chamfer_loss", "bg.ndata[].permute"], "function", ["None"], ["", "def", "solid2pc_step", "(", "model", ",", "batch", ",", "batch_idx", ",", "device", ")", ":", "\n", "    ", "(", "bg", ",", "points", ",", "graph_files", ")", "=", "batch", "\n", "feat", "=", "bg", ".", "ndata", "[", "\"x\"", "]", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "to", "(", "device", ")", "\n", "points", "=", "points", ".", "to", "(", "device", ")", "\n", "# labels = labels.to(device).squeeze(-1)", "\n", "pred_points", ",", "embeddings", "=", "model", "(", "bg", ",", "feat", ")", "\n", "\n", "# all_graph_files += graph_files", "\n", "loss", "=", "chamfer_loss", "(", "points", ",", "pred_points", ")", "*", "1000", "\n", "return", "pred_points", ",", "points", ",", "embeddings", ",", "loss", ",", "bg", ",", "graph_files", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.train_test_recon_pc.experiment_name": [[33, 55], ["tokens.append", "tokens.append", "tokens.append", "datetime.now().strftime", "tokens.append", "len", "tokens.append", "map", "datetime.now"], "function", ["None"], ["", "def", "experiment_name", "(", "args", ")", ":", "\n", "    ", "from", "datetime", "import", "datetime", "\n", "\n", "tokens", "=", "[", "\n", "\"AE\"", ",", "\n", "args", ".", "encoder", ",", "\n", "args", ".", "decoder", ",", "\n", "args", ".", "dataset", ",", "\n", "f\"points_{args.num_points}\"", ",", "\n", "]", "\n", "if", "args", ".", "encoder", "==", "\"uvnetsolid\"", ":", "\n", "        ", "tokens", ".", "append", "(", "f\"sqsym_{args.uvnet_sqsym}\"", ",", ")", "\n", "", "if", "args", ".", "latent_dim", "is", "not", "None", ":", "\n", "        ", "tokens", ".", "append", "(", "f\"latent_dim_{args.latent_dim}\"", ")", "\n", "", "if", "args", ".", "use_tanh", "is", "not", "None", ":", "\n", "        ", "tokens", ".", "append", "(", "\"tanh_\"", "+", "(", "\"True\"", "if", "args", ".", "use_tanh", "else", "\"False\"", ")", ")", "\n", "", "if", "args", ".", "use_timestamp", ":", "\n", "        ", "timestamp", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%d-%m-%Y-%H-%M-%S\"", ")", "\n", "tokens", ".", "append", "(", "timestamp", ")", "\n", "", "if", "len", "(", "args", ".", "suffix", ")", ">", "0", ":", "\n", "        ", "tokens", ".", "append", "(", "args", ".", "suffix", ")", "\n", "", "return", "\".\"", ".", "join", "(", "map", "(", "str", ",", "tokens", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.train_test_recon_pc.parse": [[57, 111], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument_group", "parse_util.add_train_args", "parse_util.add_train_args.add_argument", "parse_util.add_train_args.add_argument", "parse_util.add_train_args.add_argument", "parse_util.add_train_args.add_argument", "parse_util.add_train_args.add_argument", "parse_util.add_train_args.add_argument", "parse_util.add_train_args.add_argument", "parse_util.add_train_args.add_argument", "parse_util.add_train_args.add_argument", "argparse.ArgumentParser.add_argument_group", "parse_util.add_test_args", "argparse.ArgumentParser.parse_known_args", "os.path.join", "os.path.dirname", "os.path.abspath"], "function", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.parse_util.add_train_args", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.parse_util.add_test_args"], ["", "def", "parse", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\"Pointcloud reconstruction experiments\"", ")", "\n", "parser", ".", "add_argument", "(", "\"traintest\"", ",", "choices", "=", "(", "\"train\"", ",", "\"test\"", ")", ")", "\n", "train_args", "=", "parser", ".", "add_argument_group", "(", "\"train\"", ")", "\n", "train_args", "=", "parse_util", ".", "add_train_args", "(", "train_args", ")", "\n", "\n", "train_args", ".", "add_argument", "(", "\n", "\"--encoder\"", ",", "\n", "choices", "=", "(", "\"pointnet\"", ",", "\"uvnetsolid\"", ")", ",", "\n", "default", "=", "\"pointnet\"", ",", "\n", "help", "=", "\"Encoder to use\"", ",", "\n", ")", "\n", "train_args", ".", "add_argument", "(", "\n", "\"--decoder\"", ",", "\n", "choices", "=", "(", "\"pointmlp\"", ",", ")", ",", "\n", "default", "=", "\"pointmlp\"", ",", "\n", "help", "=", "\"Pointcloud decoder to use\"", ",", "\n", ")", "\n", "train_args", ".", "add_argument", "(", "\n", "\"--dataset\"", ",", "\n", "choices", "=", "(", "\"abc\"", ")", ",", "\n", "default", "=", "\"abc\"", ",", "\n", "help", "=", "\"Dataset to train on\"", ",", "\n", ")", "\n", "train_args", ".", "add_argument", "(", "\n", "\"--num_points\"", ",", "type", "=", "int", ",", "default", "=", "1024", ",", "help", "=", "\"Number of points to decode\"", "\n", ")", "\n", "train_args", ".", "add_argument", "(", "\n", "\"--latent_dim\"", ",", "type", "=", "int", ",", "default", "=", "1024", ",", "help", "=", "\"Dimension of latent space\"", "\n", ")", "\n", "train_args", ".", "add_argument", "(", "\n", "\"--use_tanh\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether to use tanh in final layer of decoder\"", ",", "\n", ")", "\n", "train_args", ".", "add_argument", "(", "\n", "\"--npy_dataset_path\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", ",", "\"data\"", ",", "\"ABC\"", ",", "\"pointclouds\"", ")", ",", "\n", "help", "=", "\"Path to pointcloud dataset when encoder takes in solids\"", ",", "\n", ")", "\n", "train_args", ".", "add_argument", "(", "\n", "\"--split_suffix\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "help", "=", "\"Suffix for dataset split folders\"", "\n", ")", "\n", "train_args", ".", "add_argument", "(", "\n", "\"--uvnet_sqsym\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.3", ",", "\n", "help", "=", "\"Probability of applying square symmetry transformation to uv domain\"", ",", "\n", ")", "\n", "test_args", "=", "parser", ".", "add_argument_group", "(", "\"test\"", ")", "\n", "test_args", "=", "parse_util", ".", "add_test_args", "(", "test_args", ")", "\n", "args", ",", "_", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.train_test_recon_pc.get_model": [[113, 139], ["print", "models.UVNetSolid2PointsAutoEnc", "models.Points2PointsAutoEnc"], "function", ["None"], ["", "def", "get_model", "(", "args", ")", ":", "\n", "    ", "from", "networks", "import", "models", "\n", "\n", "args", ".", "latent_dim", "=", "1024", "\n", "args", ".", "use_tanh", "=", "True", "\n", "\n", "if", "args", ".", "encoder", "==", "\"uvnetsolid\"", "and", "args", ".", "decoder", "==", "\"pointmlp\"", ":", "\n", "        ", "return", "(", "\n", "models", ".", "UVNetSolid2PointsAutoEnc", "(", "\n", "ae_latent_dim", "=", "args", ".", "latent_dim", "if", "args", ".", "latent_dim", "is", "not", "None", "else", "1024", ",", "\n", "# num_out_points=args.num_points,", "\n", "use_tanh", "=", "args", ".", "use_tanh", "if", "args", ".", "latent_dim", "is", "not", "None", "else", "True", ",", "\n", ")", ",", "\n", "solid2pc_step", ",", "\n", ")", "\n", "", "if", "args", ".", "encoder", "==", "\"pointnet\"", "and", "args", ".", "decoder", "==", "\"pointmlp\"", ":", "\n", "        ", "return", "(", "\n", "models", ".", "Points2PointsAutoEnc", "(", "\n", "ae_latent_dim", "=", "args", ".", "latent_dim", "if", "args", ".", "latent_dim", "is", "not", "None", "else", "1024", ",", "\n", "num_out_points", "=", "args", ".", "num_points", ",", "\n", "use_tanh", "=", "args", ".", "use_tanh", "if", "args", ".", "latent_dim", "is", "not", "None", "else", "True", ",", "\n", ")", ",", "\n", "pc2pc_step", ",", "\n", ")", "\n", "", "print", "(", "f\"No model found with encoder: {args.encoder} and decoder: {args.decoder}\"", ")", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.train_test_recon_pc.get_dataset": [[141, 157], ["print", "ABCDatasetWithPointclouds"], "function", ["None"], ["", "def", "get_dataset", "(", "split", ",", "args", ")", ":", "\n", "    ", "from", "datasets", ".", "abcdataset", "import", "ABCDatasetWithPointclouds", "\n", "\n", "if", "args", ".", "decoder", "in", "(", "\"pointmlp\"", ",", ")", ":", "\n", "        ", "if", "args", ".", "dataset", "==", "\"abc\"", ":", "\n", "            ", "return", "ABCDatasetWithPointclouds", "(", "\n", "bin_root_dir", "=", "args", ".", "dataset_path", ",", "\n", "npy_root_dir", "=", "args", ".", "npy_dataset_path", ",", "\n", "split", "=", "split", ",", "\n", "num_points", "=", "args", ".", "num_points", ",", "\n", "apply_square_symmetry", "=", "args", ".", "uvnet_sqsym", ",", "\n", ")", "\n", "", "", "print", "(", "\n", "f\"No dataset named {args.dataset}, found for given encoder+decoder: {args.encoder}+{args.decoder}\"", "\n", ")", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.train_test_recon_pc.main": [[159, 206], ["train_test_recon_pc.parse", "torch.cuda.is_available", "print", "train_test_recon_pc.experiment_name", "print", "train_test_recon_pc.get_dataset", "get_dataset.get_dataloader", "train_test_recon_pc.get_dataset", "get_dataset.get_dataloader", "train_test_recon_pc.get_model", "model.to.to", "reconstruction.train_val", "helper.load_checkpoint", "print", "train_test_recon_pc.get_dataset", "get_dataset.get_dataloader", "train_test_recon_pc.get_model", "model.to.to", "model.to.load_state_dict", "train_test_recon_pc.experiment_name", "reconstruction.test_pc", "print", "str"], "function", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.train_test_recon_pc.parse", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.test_classifier.experiment_name", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.train_test_recon_pc.get_dataset", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.abcdataset.ABCDatasetPointclouds.get_dataloader", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.train_test_recon_pc.get_dataset", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.abcdataset.ABCDatasetPointclouds.get_dataloader", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.train_test_recon_pc.get_model", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.reconstruction.train_val", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.helper.load_checkpoint", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.train_test_recon_pc.get_dataset", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.abcdataset.ABCDatasetPointclouds.get_dataloader", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.train_test_recon_pc.get_model", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.test_classifier.experiment_name", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.reconstruction.test_pc"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse", "(", ")", "\n", "\n", "device", "=", "\"cuda:\"", "+", "str", "(", "args", ".", "device", ")", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", "\n", "\n", "if", "args", ".", "traintest", "==", "\"train\"", ":", "\n", "        ", "print", "(", "args", ")", "\n", "exp_name", "=", "experiment_name", "(", "args", ")", "\n", "print", "(", "f\"Experiment name: {exp_name}\"", ")", "\n", "train_dset", "=", "get_dataset", "(", "\"train\"", ",", "args", ")", "\n", "train_loader", "=", "train_dset", ".", "get_dataloader", "(", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", "\n", ")", "\n", "val_dset", "=", "get_dataset", "(", "\"val\"", ",", "args", ")", "\n", "val_loader", "=", "val_dset", ".", "get_dataloader", "(", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ")", "\n", "\n", "model", ",", "step", "=", "get_model", "(", "args", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "reconstruction", ".", "train_val", "(", "\n", "step", "=", "step", ",", "\n", "model", "=", "model", ",", "\n", "train_loader", "=", "train_loader", ",", "\n", "val_loader", "=", "val_loader", ",", "\n", "experiment_name", "=", "exp_name", ",", "\n", "args", "=", "args", ",", "\n", "epochs", "=", "args", ".", "epochs", ",", "\n", "val_every", "=", "5", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "import", "helper", "\n", "args", ".", "latent_dim", "=", "1024", "\n", "args", ".", "use_tanh", "=", "True", "\n", "state", "=", "helper", ".", "load_checkpoint", "(", "args", ".", "state", ",", "map_to_cpu", "=", "device", "==", "'cpu'", ")", "\n", "print", "(", "state", "[", "\"args\"", "]", ")", "\n", "test_dset", "=", "get_dataset", "(", "\"all\"", ",", "args", ")", "\n", "test_loader", "=", "test_dset", ".", "get_dataloader", "(", "args", ".", "batch_size", ",", "shuffle", "=", "False", ")", "\n", "model", ",", "step", "=", "get_model", "(", "state", "[", "\"args\"", "]", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "model", ".", "load_state_dict", "(", "state", "[", "\"model\"", "]", ")", "\n", "\n", "exp_name", "=", "experiment_name", "(", "state", "[", "\"args\"", "]", ")", "\n", "\n", "# Test pointcloud reconstruction", "\n", "test_loss", "=", "reconstruction", ".", "test_pc", "(", "\n", "step", ",", "model", ",", "test_loader", ",", "device", ",", "experiment_name", "=", "exp_name", ",", "grams_path", "=", "args", ".", "grams_path", ",", "\n", ")", "\n", "print", "(", "\"Chamfer loss: {:2.3f}\"", ".", "format", "(", "test_loss", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.parse_util.get_train_parser": [[10, 35], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "os.join", "os.dirname", "os.abspath"], "function", ["None"], ["def", "get_train_parser", "(", "desc", "=", "\"\"", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "desc", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset_path'", ",", "type", "=", "str", ",", "\n", "default", "=", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "osp", ".", "abspath", "(", "__file__", ")", ")", ",", "\"dataset\"", ",", "\"bin\"", ")", ",", "\n", "help", "=", "'Path to the dataset root directory'", ")", "\n", "parser", ".", "add_argument", "(", "'--device'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'which gpu device to use (default: 0)'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "_BATCH_SIZE", ",", "\n", "help", "=", "f'batch size for training and validation (default: {_BATCH_SIZE})'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'random seed (default: 0)'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "_EPOCHS", ",", "\n", "help", "=", "f'number of epochs to train (default: {_EPOCHS})'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "None", ",", "\n", "help", "=", "f'learning rate (default: {_LR})'", ")", "\n", "parser", ".", "add_argument", "(", "'--optimizer'", ",", "type", "=", "str", ",", "\n", "choices", "=", "(", "'SGD'", ",", "'Adam'", ")", ",", "default", "=", "'Adam'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--use-timestamp\"", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Whether to use timestamp in dump files'", ")", "\n", "parser", ".", "add_argument", "(", "\"--times\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'Number of times to run the experiment'", ")", "\n", "parser", ".", "add_argument", "(", "\"--suffix\"", ",", "default", "=", "''", ",", "type", "=", "str", ",", "\n", "help", "=", "'Suffix for the experiment name'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.parse_util.get_test_parser": [[37, 47], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "os.join", "os.dirname", "os.abspath"], "function", ["None"], ["", "def", "get_test_parser", "(", "desc", "=", "\"\"", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "desc", ")", "\n", "parser", ".", "add_argument", "(", "'--state'", ",", "type", "=", "str", ",", "default", "=", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "osp", ".", "abspath", "(", "__file__", ")", ")", ",", "\"checkpoints\"", ",", "\"uvnet_solidletters_chkpt.pt\"", ")", ",", "\n", "help", "=", "'PyTorch checkpoint file of trained network.'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-cuda'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Run on CPU'", ")", "\n", "parser", ".", "add_argument", "(", "'--subset'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Compute subset only (default: false)'", ")", "\n", "parser", ".", "add_argument", "(", "'--grams_path'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "'path to save Gram matrices to'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.parse_util.add_train_args": [[49, 81], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "os.join", "os.dirname", "os.abspath"], "function", ["None"], ["", "def", "add_train_args", "(", "parser", ")", ":", "\n", "    ", "parser", ".", "add_argument", "(", "\n", "\"--dataset_path\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "osp", ".", "abspath", "(", "__file__", ")", ")", ",", "\"data\"", ",", "\"ABC\"", ",", "\"bin\"", ")", ",", "\n", "help", "=", "\"Path to the dataset root directory\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--device\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"Which gpu device to use (default: 0)\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--batch_size\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "_BATCH_SIZE", ",", "\n", "help", "=", "f\"batch size for training and validation (default: {_BATCH_SIZE})\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--epochs\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "_EPOCHS", ",", "\n", "help", "=", "f\"number of epochs to train (default: {_EPOCHS})\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--use-timestamp\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether to use timestamp in dump files\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--suffix\"", ",", "default", "=", "\"\"", ",", "type", "=", "str", ",", "help", "=", "\"Suffix for the experiment name\"", "\n", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.parse_util.add_test_args": [[83, 96], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "os.path.join", "os.path.join", "os.join", "os.path.dirname", "os.path.dirname", "os.dirname", "os.path.abspath", "os.path.abspath", "os.abspath"], "function", ["None"], ["", "def", "add_test_args", "(", "parser", ")", ":", "\n", "    ", "parser", ".", "add_argument", "(", "\n", "\"--state\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", ",", "\"checkpoints\"", ",", "\"uvnet_abc_chkpt.pt\"", ")", ",", "\n", "help", "=", "\"PyTorch checkpoint file of trainined network.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--no-cuda\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Run on CPU\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--seed\"", ",", "default", "=", "0", ",", "help", "=", "\"Seed\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--grams_path\"", ",", "\n", "default", "=", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "osp", ".", "abspath", "(", "__file__", ")", ")", ",", "\"data\"", ",", "\"ABC\"", ",", "\"uvnet_grams\"", ")", ",", "\n", "help", "=", "\"directory to save Gram matrices to (default: data/ABC/uvnet_grams)\"", ")", "\n", "return", "parser", "\n", "", ""]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.helper.str2bool": [[16, 18], ["v.lower"], "function", ["None"], ["def", "str2bool", "(", "v", ")", ":", "\n", "    ", "return", "v", ".", "lower", "(", ")", "in", "(", "\"yes\"", ",", "\"true\"", ",", "\"t\"", ",", "\"1\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.helper.create_dir": [[20, 28], ["os.exists", "os.makedirs", "os.makedirs"], "function", ["None"], ["", "def", "create_dir", "(", "path", ":", "str", ")", ":", "\n", "    ", "\"\"\"\n    Create a directory of it does not exist\n    :param path: Path to directory\n    :return: None\n    \"\"\"", "\n", "if", "not", "osp", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.helper.get_optimizer": [[30, 48], ["ValueError", "torch.optim.SGD", "torch.optim.Adam", "model.parameters", "model.parameters"], "function", ["None"], ["", "", "def", "get_optimizer", "(", "name", ":", "str", ",", "model", ",", "lr", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Create and initialize a PyTorch optimizer\n    :param name: Name of the optimizer. One of ('SGD', 'Adam')\n    :param model: PyTorch model (torch.nn.Module) whose parameters will be optimized\n    :param lr: Learning rate\n    :param kwargs: other keyword arguments to the optimizer\n    :return: Optimizer\n    \"\"\"", "\n", "if", "name", "==", "\"SGD\"", ":", "\n", "        ", "if", "lr", "is", "None", ":", "\n", "            ", "lr", "=", "0.1", "\n", "", "return", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "**", "kwargs", ")", "\n", "", "if", "name", "==", "\"Adam\"", ":", "\n", "        ", "if", "lr", "is", "None", ":", "\n", "            ", "lr", "=", "0.0001", "\n", "", "return", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "**", "kwargs", ")", "\n", "", "raise", "ValueError", "(", "\"Unknown optimizer: \"", "+", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.helper.save_checkpoint": [[50, 64], ["torch.save", "model.state_dict", "optimizer.state_dict", "scheduler.state_dict"], "function", ["None"], ["", "def", "save_checkpoint", "(", "filename", ":", "str", ",", "model", ",", "optimizer", ",", "scheduler", "=", "None", ",", "args", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Save model, optimizer and scheduler state to a file\n    :param filename: Output state filename\n    :param model: PyTorch model (torch.nn.Module)\n    :param optimizer: PyTorch optimizer\n    :param scheduler: PyTorch learning rate scheduler (default: None)\n    :param args: Commandline args that was used for running experiment\n    :return: None\n    \"\"\"", "\n", "torch", ".", "save", "(", "\n", "{", "'model'", ":", "model", ".", "state_dict", "(", ")", ",", "'args'", ":", "args", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "'scheduler'", ":", "scheduler", ".", "state_dict", "(", ")", "if", "scheduler", "is", "not", "None", "else", "None", "}", ",", "\n", "'{}'", ".", "format", "(", "filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.helper.load_checkpoint": [[66, 73], ["torch.load"], "function", ["None"], ["", "def", "load_checkpoint", "(", "filename", ":", "str", ",", "map_to_cpu", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Load model, optimizer and scheduler state from a file\n    :param filename: Input state filename\n    :return: Dictionary with 'model', 'optimizer', 'scheduler' and 'args' as keys and their states as values\n    \"\"\"", "\n", "return", "torch", ".", "load", "(", "filename", ",", "map_location", "=", "'cpu'", "if", "map_to_cpu", "else", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.helper.get_dataloader": [[75, 95], ["torch.utils.data.DataLoader", "platform.system"], "function", ["None"], ["", "def", "get_dataloader", "(", "dset", ",", "batch_size", ",", "train", "=", "True", ",", "collate_fn", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Returns the dataloader for the given dataset. Chooses num_workers carefully based on OS for best performance.\n    :param dset PyTorch Dataset\n    :param batch_size batch_size to use\n    :param collate_fn Function to collate data into batches or None for default collate function in PyTorch\n    :return PyTorch dataloader\n    \"\"\"", "\n", "import", "platform", "\n", "num_workers", "=", "8", "\n", "if", "platform", ".", "system", "(", ")", "==", "\"Windows\"", ":", "\n", "        ", "num_workers", "=", "0", "\n", "", "dataloader", "=", "DataLoader", "(", "dset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "train", ",", "\n", "# sampler=RandomSampler(torch.arange(256)),", "\n", "num_workers", "=", "num_workers", ",", "\n", "collate_fn", "=", "collate_fn", ",", "\n", "pin_memory", "=", "True", ",", ")", "\n", "return", "dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.helper.setup_logging": [[97, 125], ["logging.Formatter", "logging.getLogger", "logging.getLogger.setLevel", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "ValueError"], "function", ["None"], ["", "def", "setup_logging", "(", "filename", ":", "str", ",", "level_str", "=", "\"info\"", ",", "filemode", "=", "\"w\"", ")", ":", "\n", "    ", "\"\"\"\n    Setup logging configuration\n    :param filename: Log file\n    :param level_str:\n    :param filemode:\n    :return:\n    \"\"\"", "\n", "if", "level_str", "==", "'error'", ":", "\n", "        ", "level", "=", "logging", ".", "ERROR", "\n", "", "elif", "level_str", "==", "'warning'", ":", "\n", "        ", "level", "=", "logging", ".", "WARNING", "\n", "", "elif", "level_str", "==", "'info'", ":", "\n", "        ", "level", "=", "logging", ".", "INFO", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown logging level {}. Expected one of (\"error\", \"warning\", \"info\")'", ")", "\n", "\n", "", "log_formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s - %(levelname)s - %(message)s'", ")", "\n", "root_logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "root_logger", ".", "setLevel", "(", "level", ")", "\n", "\n", "file_handler", "=", "logging", ".", "FileHandler", "(", "filename", ",", "mode", "=", "filemode", ")", "\n", "file_handler", ".", "setFormatter", "(", "log_formatter", ")", "\n", "root_logger", ".", "addHandler", "(", "file_handler", ")", "\n", "\n", "console_handler", "=", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", "\n", "console_handler", ".", "setFormatter", "(", "log_formatter", ")", "\n", "root_logger", ".", "addHandler", "(", "console_handler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.helper.network_plot_3D": [[127, 173], ["networkx.get_node_attributes", "G.number_of_nodes", "max", "mpl_toolkits.mplot3d.Axes3D.view_init", "mpl_toolkits.mplot3d.Axes3D.set_axis_off", "matplotlib.show", "matplotlib.cm.plasma", "matplotlib.style.context", "matplotlib.figure", "mpl_toolkits.mplot3d.Axes3D", "nx.get_node_attributes.items", "enumerate", "G.degree", "range", "mpl_toolkits.mplot3d.Axes3D.scatter", "G.edges", "numpy.array", "numpy.array", "numpy.array", "mpl_toolkits.mplot3d.Axes3D.plot", "range", "G.degree", "G.degree"], "function", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.utils.plot"], ["", "def", "network_plot_3D", "(", "G", ",", "angle", ",", "save", "=", "False", ")", ":", "\n", "# Get node positions", "\n", "    ", "pos", "=", "nx", ".", "get_node_attributes", "(", "G", ",", "'pos'", ")", "\n", "\n", "# Get number of nodes", "\n", "n", "=", "G", ".", "number_of_nodes", "(", ")", "\n", "# Get the maximum number of edges adjacent to a single node", "\n", "edge_max", "=", "max", "(", "[", "G", ".", "degree", "(", "i", ")", "for", "i", "in", "range", "(", "n", ")", "]", ")", "\n", "# Define color range proportional to number of edges adjacent to a single node", "\n", "colors", "=", "[", "plt", ".", "cm", ".", "plasma", "(", "G", ".", "degree", "(", "i", ")", "/", "edge_max", ")", "for", "i", "in", "range", "(", "n", ")", "]", "\n", "# 3D network plot", "\n", "with", "plt", ".", "style", ".", "context", "(", "(", "'ggplot'", ")", ")", ":", "\n", "\n", "        ", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "10", ",", "7", ")", ")", "\n", "ax", "=", "Axes3D", "(", "fig", ")", "\n", "\n", "# Loop on the pos dictionary to extract the x,y,z coordinates of each node", "\n", "for", "key", ",", "value", "in", "pos", ".", "items", "(", ")", ":", "\n", "            ", "xi", "=", "value", "[", "0", "]", "\n", "yi", "=", "value", "[", "1", "]", "\n", "zi", "=", "value", "[", "2", "]", "\n", "\n", "# Scatter plot", "\n", "ax", ".", "scatter", "(", "xi", ",", "yi", ",", "zi", ",", "c", "=", "colors", "[", "key", "]", ",", "s", "=", "20", "+", "20", "*", "G", ".", "degree", "(", "key", ")", ",", "edgecolors", "=", "'k'", ",", "alpha", "=", "0.7", ")", "\n", "\n", "# Loop on the list of edges to get the x,y,z, coordinates of the connected nodes", "\n", "# Those two points are the extrema of the line to be plotted", "\n", "", "for", "i", ",", "j", "in", "enumerate", "(", "G", ".", "edges", "(", ")", ")", ":", "\n", "            ", "x", "=", "np", ".", "array", "(", "(", "pos", "[", "j", "[", "0", "]", "]", "[", "0", "]", ",", "pos", "[", "j", "[", "1", "]", "]", "[", "0", "]", ")", ")", "\n", "y", "=", "np", ".", "array", "(", "(", "pos", "[", "j", "[", "0", "]", "]", "[", "1", "]", ",", "pos", "[", "j", "[", "1", "]", "]", "[", "1", "]", ")", ")", "\n", "z", "=", "np", ".", "array", "(", "(", "pos", "[", "j", "[", "0", "]", "]", "[", "2", "]", ",", "pos", "[", "j", "[", "1", "]", "]", "[", "2", "]", ")", ")", "\n", "\n", "# Plot the connecting lines", "\n", "ax", ".", "plot", "(", "x", ",", "y", ",", "z", ",", "c", "=", "'black'", ",", "alpha", "=", "0.5", ")", "\n", "\n", "# Set the initial view", "\n", "", "", "ax", ".", "view_init", "(", "30", ",", "angle", ")", "\n", "# Hide the axes", "\n", "ax", ".", "set_axis_off", "(", ")", "\n", "# if save is not False:", "\n", "#     plt.savefig(\"C:\\scratch\\\\data\\\"+str(angle).zfill(3)+\".png\")", "\n", "#     plt.close('all')", "\n", "#     else:", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.helper.num_workers_platform": [[175, 178], ["any", "platform.win32_ver"], "function", ["None"], ["", "def", "num_workers_platform", "(", ")", ":", "\n", "    ", "is_windows", "=", "any", "(", "platform", ".", "win32_ver", "(", ")", ")", "\n", "return", "0", "if", "is_windows", "else", "8", "\n", "", ""]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.test_classifier.Model.__init__": [[21, 35], ["torch.Module.__init__", "networks.face_model.get_face_model", "networks.graph_model.get_graph_model", "networks.classifier.get_classifier"], "methods", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.classifier.NonLinearClassifier.__init__", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.face_model.get_face_model", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.graph_model.get_graph_model", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.classifier.get_classifier"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "args", ")", ":", "\n", "        ", "\"\"\"\n        Model used in this classification experiment\n        \"\"\"", "\n", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nurbs_feat_ext", "=", "face_model", ".", "get_face_model", "(", "\n", "output_dims", "=", "args", ".", "nurbs_emb_dim", ",", "\n", "input_channels", "=", "args", ".", "input_channels", ")", "\n", "self", ".", "brep_feat_ext", "=", "graph_model", ".", "get_graph_model", "(", "\n", "args", ".", "nurbs_emb_dim", ",", "args", ".", "graph_emb_dim", ")", "\n", "self", ".", "cls", "=", "classifier", ".", "get_classifier", "(", "\n", "args", ".", "classifier_type", ",", "args", ".", "graph_emb_dim", ",", "num_classes", ",", "args", ".", "final_dropout", ")", "\n", "self", ".", "nurbs_activations", "=", "None", "\n", "self", ".", "gnn_activations", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.test_classifier.Model.forward": [[36, 43], ["test_classifier.Model.nurbs_feat_ext", "test_classifier.Model.brep_feat_ext", "test_classifier.Model.cls"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "bg", ",", "feat", ")", ":", "\n", "        ", "out", "=", "self", ".", "nurbs_feat_ext", "(", "feat", ")", "\n", "self", ".", "nurbs_activations", "=", "self", ".", "nurbs_feat_ext", ".", "activations", "\n", "node_emb", ",", "graph_emb", "=", "self", ".", "brep_feat_ext", "(", "bg", ",", "out", ")", "\n", "self", ".", "gnn_activations", "=", "self", ".", "brep_feat_ext", ".", "activations", "\n", "out", ",", "emb", "=", "self", ".", "cls", "(", "graph_emb", ")", "\n", "return", "out", ",", "emb", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.test_classifier.compute_activation_stats": [[45, 93], ["torch.split", "torch.split", "torch.split", "torch.split", "torch.stack().detach().cpu", "torch.stack().detach().cpu", "torch.stack().detach().cpu", "torch.stack().detach().cpu", "bg.batch_num_nodes().tolist", "inorm.permute().flatten", "torch.triu_indices", "torch.triu_indices", "torch.triu_indices", "torch.triu_indices", "gram[].flatten", "grams.append", "graph_activations[].unsqueeze().flatten", "graph_activations[].flatten", "graph_activations[].unsqueeze().flatten.sum", "torch.where", "torch.where", "torch.where", "torch.where", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.where", "torch.where", "torch.where", "torch.where", "graph_activations[].unsqueeze().flatten.sum", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "gram[].flatten.isnan().any", "torch.stack().detach", "torch.stack().detach", "torch.stack().detach", "torch.stack().detach", "bg.batch_num_nodes", "masked_activations.sum", "mean.isnan", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.sqrt.isnan", "graph_activations[].flatten.flatten", "torch.nn.InstanceNorm1d", "torch.nn.InstanceNorm1d", "torch.nn.InstanceNorm1d", "torch.nn.InstanceNorm1d", "torch.nn.InstanceNorm1d.", "graph_activations[].flatten.permute().flatten().unsqueeze", "torch.nn.InstanceNorm1d", "torch.nn.InstanceNorm1d", "torch.nn.InstanceNorm1d", "torch.nn.InstanceNorm1d", "torch.nn.InstanceNorm1d.", "inorm.permute", "inorm.transpose", "graph_activations[].unsqueeze", "gram[].flatten.isnan", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "graph_activations[].flatten.permute().flatten", "graph_activations[].flatten.permute"], "function", ["None"], ["", "", "def", "compute_activation_stats", "(", "bg", ",", "layer", ",", "activations", ")", ":", "\n", "    ", "grams", "=", "[", "]", "\n", "for", "graph_activations", "in", "torch", ".", "split", "(", "activations", ",", "bg", ".", "batch_num_nodes", "(", ")", ".", "tolist", "(", ")", ")", ":", "\n", "        ", "if", "layer", "==", "'feats'", ":", "\n", "            ", "mask", "=", "graph_activations", "[", ":", ",", "6", ",", ":", ",", ":", "]", ".", "unsqueeze", "(", "1", ")", ".", "flatten", "(", "start_dim", "=", "2", ")", "# F x 1 x 100", "\n", "graph_activations", "=", "graph_activations", "[", ":", ",", ":", "6", ",", ":", ",", ":", "]", ".", "flatten", "(", "start_dim", "=", "2", ")", "# F x 6 x 100", "\n", "masked_activations", "=", "graph_activations", "*", "mask", "\n", "N", "=", "mask", ".", "sum", "(", "dim", "=", "-", "1", ")", "# F x 1", "\n", "mean", "=", "masked_activations", ".", "sum", "(", "dim", "=", "-", "1", ")", "/", "N", "# F x 6", "\n", "\n", "# handle faces that are completely masked (contain 0 samples)", "\n", "nans_x", ",", "nans_y", "=", "torch", ".", "where", "(", "mean", ".", "isnan", "(", ")", ")", "\n", "mean", "[", "nans_x", ",", "nans_y", "]", "=", "0", "\n", "\n", "x_sub_mean", "=", "masked_activations", "-", "mean", "[", ":", ",", ":", ",", "None", "]", "# F x 6 x 100", "\n", "var", "=", "torch", ".", "pow", "(", "x_sub_mean", ",", "2", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "/", "N", "# F x 6", "\n", "std", "=", "torch", ".", "sqrt", "(", "var", ")", "# F x 6", "\n", "\n", "nans_x", ",", "nans_y", "=", "torch", ".", "where", "(", "std", ".", "isnan", "(", ")", ")", "\n", "std", "[", "nans_x", ",", "nans_y", "]", "=", "0", "\n", "\n", "epsilon", "=", "1e-5", "\n", "x", "=", "(", "(", "graph_activations", "-", "mean", "[", ":", ",", ":", ",", "None", "]", ")", "/", "(", "std", "[", ":", ",", ":", ",", "None", "]", "+", "epsilon", ")", ")", "*", "mask", "# F x 6 x 100", "\n", "", "elif", "layer", "[", ":", "4", "]", "==", "'conv'", ":", "\n", "            ", "x", "=", "graph_activations", ".", "flatten", "(", "start_dim", "=", "2", ")", "# x shape: F x d x 100", "\n", "# inorm is per face", "\n", "inorm", "=", "torch", ".", "nn", ".", "InstanceNorm1d", "(", "x", ".", "shape", "[", "1", "]", ")", "\n", "x", "=", "inorm", "(", "x", ")", "\n", "", "else", ":", "\n", "# fc and GIN layers", "\n", "# graph_activations shape: F x d x 1", "\n", "            ", "x", "=", "graph_activations", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "# inorm is per solid", "\n", "inorm", "=", "torch", ".", "nn", ".", "InstanceNorm1d", "(", "x", ".", "shape", "[", "1", "]", ")", "\n", "x", "=", "inorm", "(", "x", ")", "\n", "", "x", "=", "x", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "# x shape: d x 100F", "\n", "\n", "if", "layer", "==", "'feats'", ":", "\n", "            ", "img_size", "=", "mask", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "            ", "img_size", "=", "x", ".", "shape", "[", "-", "1", "]", "# img_size = 100F", "\n", "", "gram", "=", "torch", ".", "matmul", "(", "x", ",", "x", ".", "transpose", "(", "0", ",", "1", ")", ")", "/", "img_size", "\n", "triu_idx", "=", "torch", ".", "triu_indices", "(", "*", "gram", ".", "shape", ")", "\n", "triu", "=", "gram", "[", "triu_idx", "[", "0", ",", ":", "]", ",", "triu_idx", "[", "1", ",", ":", "]", "]", ".", "flatten", "(", ")", "\n", "assert", "not", "triu", ".", "isnan", "(", ")", ".", "any", "(", ")", "\n", "grams", ".", "append", "(", "triu", ")", "\n", "", "return", "torch", ".", "stack", "(", "grams", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.test_classifier.log_activation_stats": [[95, 99], ["test_classifier.compute_activation_stats", "all_layers_activations.items"], "function", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.reconstruction.compute_activation_stats"], ["", "def", "log_activation_stats", "(", "bg", ",", "all_layers_activations", ")", ":", "\n", "    ", "stats", "=", "{", "layer", ":", "compute_activation_stats", "(", "bg", ",", "layer", ",", "activations", ")", "\n", "for", "layer", ",", "activations", "in", "all_layers_activations", ".", "items", "(", ")", "}", "\n", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.test_classifier.test": [[101, 158], ["model.eval", "print", "numpy.concatenate", "numpy.save", "stats.items", "enumerate", "list", "pandas.DataFrame().to_csv", "print", "print", "numpy.concatenate", "numpy.concatenate", "sklearn.accuracy_score", "numpy.mean", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "all_stats.items", "layer_stats[].numpy", "numpy.save", "map", "print", "bg.to.ndata[].permute().to", "labels.to().squeeze.to().squeeze", "bg.to.to", "model", "np.concatenate.append", "torch.cross_entropy", "total_loss_array.append", "np.concatenate.append", "np.concatenate.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pandas.DataFrame", "test_classifier.log_activation_stats", "log_activation_stats.items", "emb.detach().cpu().numpy", "F.cross_entropy.item", "labels.to().squeeze.cpu().numpy", "logits.max", "preds.detach().cpu().numpy", "bg.to.ndata[].permute", "labels.to().squeeze.to", "file.split", "stats.keys", "stats[].append", "emb.detach().cpu", "labels.to().squeeze.cpu", "preds.detach().cpu", "emb.detach", "preds.detach"], "function", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.reconstruction.log_activation_stats"], ["", "def", "test", "(", "model", ",", "loader", ",", "device", ",", "out_dir", "=", "None", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "true", "=", "[", "]", "\n", "pred", "=", "[", "]", "\n", "total_loss_array", "=", "[", "]", "\n", "stats", "=", "{", "}", "\n", "all_graph_files", "=", "[", "]", "\n", "content_embeddings", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch", ",", "(", "bg", ",", "labels", ",", "_", ",", "_", ",", "graph_files", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "            ", "print", "(", "'batch: '", ",", "batch", ")", "\n", "feat", "=", "bg", ".", "ndata", "[", "'x'", "]", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "to", "(", "device", ")", "\n", "labels", "=", "labels", ".", "to", "(", "device", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "bg", "=", "bg", ".", "to", "(", "device", ")", "\n", "logits", ",", "emb", "=", "model", "(", "bg", ",", "feat", ")", "\n", "for", "activations", "in", "[", "model", ".", "nurbs_activations", ",", "model", ".", "gnn_activations", "]", ":", "\n", "                ", "batch_stats", "=", "log_activation_stats", "(", "bg", ",", "activations", ")", "\n", "for", "layer", ",", "batch_layer_stats", "in", "batch_stats", ".", "items", "(", ")", ":", "\n", "                    ", "if", "layer", "in", "stats", ".", "keys", "(", ")", ":", "\n", "                        ", "stats", "[", "layer", "]", ".", "append", "(", "batch_layer_stats", ")", "\n", "", "else", ":", "\n", "                        ", "stats", "[", "layer", "]", "=", "[", "batch_layer_stats", "]", "\n", "", "", "", "all_graph_files", "+=", "graph_files", "\n", "\n", "content_embeddings", ".", "append", "(", "emb", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "logits", ",", "labels", ",", "reduction", "=", "'mean'", ")", "\n", "total_loss_array", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "true", ".", "append", "(", "labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "preds", "=", "logits", ".", "max", "(", "dim", "=", "1", ")", "[", "1", "]", "\n", "pred", ".", "append", "(", "preds", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "", "print", "(", "'writing stats...'", ")", "\n", "content_embeddings", "=", "np", ".", "concatenate", "(", "content_embeddings", ",", "axis", "=", "0", ")", "\n", "np", ".", "save", "(", "out_dir", "+", "'/content_embeddings'", ",", "content_embeddings", ")", "\n", "all_stats", "=", "{", "}", "\n", "for", "layer", ",", "layer_stats", "in", "stats", ".", "items", "(", ")", ":", "\n", "# gram = zip(*layer_stats)", "\n", "        ", "all_stats", "[", "layer", "]", "=", "{", "\n", "'gram'", ":", "torch", ".", "cat", "(", "layer_stats", ")", ",", "\n", "}", "\n", "\n", "", "for", "i", ",", "(", "layer", ",", "layer_stats", ")", "in", "enumerate", "(", "all_stats", ".", "items", "(", ")", ")", ":", "\n", "        ", "grams", "=", "layer_stats", "[", "'gram'", "]", ".", "numpy", "(", ")", "\n", "np", ".", "save", "(", "out_dir", "+", "f'/{i}_{layer}_grams'", ",", "grams", ")", "\n", "\n", "", "all_graph_files", "=", "list", "(", "map", "(", "lambda", "file", ":", "file", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ",", "all_graph_files", ")", ")", "\n", "pd", ".", "DataFrame", "(", "all_graph_files", ")", ".", "to_csv", "(", "out_dir", "+", "'/graph_files.txt'", ",", "index", "=", "False", ",", "header", "=", "None", ")", "\n", "print", "(", "'done writing stats'", ")", "\n", "\n", "print", "(", "'calc metrics...'", ")", "\n", "true", "=", "np", ".", "concatenate", "(", "true", ")", "\n", "pred", "=", "np", ".", "concatenate", "(", "pred", ")", "\n", "acc", "=", "metrics", ".", "accuracy_score", "(", "true", ",", "pred", ")", "\n", "avg_loss", "=", "np", ".", "mean", "(", "total_loss_array", ")", "\n", "return", "avg_loss", ",", "acc", ",", "pred", ",", "true", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.test_classifier.experiment_name": [[160, 176], ["datetime.now().strftime", "tokens.append", "len", "tokens.append", "map", "str", "datetime.now"], "function", ["None"], ["", "def", "experiment_name", "(", "args", ")", "->", "str", ":", "\n", "    ", "\"\"\"\n    Create a name for the experiment from the command line arguments to the script\n    :param args: Arguments parsed by argparse\n    :return: Experiment name as a string\n    \"\"\"", "\n", "from", "datetime", "import", "datetime", "\n", "tokens", "=", "[", "\"Classifier\"", ",", "args", ".", "brep_model_type", ",", "args", ".", "nurbs_model_type", ",", "\"mask_\"", "+", "args", ".", "mask_mode", ",", "\n", "\"area_channel_\"", "+", "str", "(", "args", ".", "area_as_channel", ")", ",", "\n", "args", ".", "classifier_type", ",", "args", ".", "graph_emb_dim", ",", "args", ".", "nurbs_emb_dim", ",", "f'squaresym_{args.apply_square_symmetry}'", "]", "\n", "if", "args", ".", "use_timestamp", ":", "\n", "        ", "timestamp", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%d-%m-%Y-%H-%M-%S\"", ")", "\n", "tokens", ".", "append", "(", "timestamp", ")", "\n", "", "if", "len", "(", "args", ".", "suffix", ")", ">", "0", ":", "\n", "        ", "tokens", ".", "append", "(", "args", ".", "suffix", ")", "\n", "", "return", "\".\"", ".", "join", "(", "map", "(", "str", ",", "tokens", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.few_shot.Objective.__init__": [[36, 47], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "positive_idx", ",", "negative_idx", ",", "grams", ",", "metric", "=", "'euclidean'", ",", "l2", "=", "0.", ")", ":", "\n", "        ", "self", ".", "positive_idx", "=", "positive_idx", "\n", "self", ".", "negative_idx", "=", "negative_idx", "\n", "self", ".", "grams", "=", "grams", "\n", "if", "metric", "==", "'euclidean'", ":", "\n", "            ", "self", ".", "distance", "=", "euclidean", "\n", "", "elif", "metric", "==", "'cosine'", ":", "\n", "            ", "self", ".", "distance", "=", "cosine", "\n", "", "elif", "metric", "==", "'cosine_gaussian'", ":", "\n", "            ", "self", ".", "distance", "=", "cosine_gaussian", "\n", "", "self", ".", "l2", "=", "l2", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.few_shot.Objective.__call__": [[48, 70], ["len", "len", "range", "len", "numpy.linalg.norm", "few_shot.Objective.distance", "few_shot.Objective.distance"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "w", ")", ":", "\n", "        ", "positive_loss", "=", "0", "\n", "negative_loss", "=", "0", "\n", "num_pos", "=", "len", "(", "self", ".", "positive_idx", ")", "\n", "num_neg", "=", "len", "(", "self", ".", "negative_idx", ")", "\n", "for", "l", "in", "range", "(", "len", "(", "self", ".", "grams", ")", ")", ":", "\n", "            ", "if", "num_pos", ">", "1", ":", "\n", "                ", "for", "i", "in", "self", ".", "positive_idx", ":", "\n", "                    ", "for", "j", "in", "self", ".", "positive_idx", ":", "\n", "                        ", "if", "i", "<", "j", ":", "\n", "                            ", "positive_loss", "+=", "self", ".", "distance", "(", "w", ",", "l", ",", "i", ",", "j", ",", "self", ".", "grams", ")", "\n", "", "", "", "", "if", "num_neg", ">", "0", ":", "\n", "                ", "for", "i", "in", "self", ".", "positive_idx", ":", "\n", "                    ", "for", "j", "in", "self", ".", "negative_idx", ":", "\n", "                        ", "negative_loss", "+=", "self", ".", "distance", "(", "w", ",", "l", ",", "i", ",", "j", ",", "self", ".", "grams", ")", "\n", "\n", "", "", "", "", "if", "num_pos", ">", "0", ":", "\n", "            ", "positive_loss", "*=", "2", "/", "(", "num_pos", "*", "(", "num_pos", "+", "1", ")", ")", "\n", "", "if", "num_neg", ">", "0", ":", "\n", "            ", "negative_loss", "*=", "1", "/", "(", "num_pos", "*", "num_neg", ")", "\n", "", "reg", "=", "self", ".", "l2", "*", "np", ".", "linalg", ".", "norm", "(", "w", ")", "\n", "return", "positive_loss", "-", "negative_loss", "+", "reg", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.few_shot.pdf": [[6, 10], ["numpy.exp", "numpy.sqrt"], "function", ["None"], ["def", "pdf", "(", "x", ",", "mu", ",", "sigma", ")", ":", "\n", "    ", "A", "=", "1", "/", "(", "sigma", "*", "np", ".", "sqrt", "(", "2", "*", "np", ".", "pi", ")", ")", "\n", "exponent", "=", "-", ".5", "*", "(", "(", "x", "-", "mu", ")", "/", "sigma", ")", "**", "2", "\n", "return", "A", "*", "np", ".", "exp", "(", "exponent", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.few_shot.weight_layers_gaussian": [[12, 17], ["few_shot.pdf", "numpy.concatenate", "numpy.arange", "len", "range", "len"], "function", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.few_shot.pdf"], ["", "def", "weight_layers_gaussian", "(", "X", ",", "mu", ",", "sigma", ")", ":", "\n", "    ", "weights", "=", "pdf", "(", "np", ".", "arange", "(", "len", "(", "X", ")", ")", ",", "mu", ",", "sigma", ")", "\n", "# print(f'\\nmu: {mu}, sigma: {sigma}, weights: {weights}')", "\n", "combined", "=", "np", ".", "concatenate", "(", "[", "weights", "[", "i", "]", "*", "X", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "X", ")", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "return", "combined", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.few_shot.euclidean": [[19, 22], ["numpy.linalg.norm"], "function", ["None"], ["", "def", "euclidean", "(", "w", ",", "l", ",", "i", ",", "j", ",", "grams", ")", ":", "\n", "    ", "return", "(", "w", "[", "l", "]", "*", "np", ".", "linalg", ".", "norm", "(", "grams", "[", "l", "]", "[", "i", "]", "-", "grams", "[", "l", "]", "[", "j", "]", ")", ")", "**", "2", "/", "(", "1", "*", "(", "grams", "[", "l", "]", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.few_shot.cosine": [[24, 27], ["sklearn.metrics.pairwise.cosine_similarity().__float__", "sklearn.metrics.pairwise.cosine_similarity", "[].reshape", "[].reshape"], "function", ["None"], ["", "def", "cosine", "(", "w", ",", "l", ",", "i", ",", "j", ",", "grams", ")", ":", "\n", "\n", "    ", "return", "w", "[", "l", "]", "*", "(", "1", "-", "cosine_similarity", "(", "grams", "[", "l", "]", "[", "i", "]", ".", "reshape", "(", "1", ",", "-", "1", ")", ",", "grams", "[", "l", "]", "[", "j", "]", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", ".", "__float__", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.few_shot.cosine_gaussian": [[29, 33], ["few_shot.pdf", "few_shot.cosine", "numpy.arange", "len"], "function", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.few_shot.pdf", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.few_shot.cosine"], ["", "def", "cosine_gaussian", "(", "w", ",", "l", ",", "i", ",", "j", ",", "grams", ")", ":", "\n", "    ", "mu", ",", "sigma", "=", "w", "\n", "weights", "=", "pdf", "(", "np", ".", "arange", "(", "len", "(", "grams", ")", ")", ",", "mu", ",", "sigma", ")", "\n", "return", "cosine", "(", "weights", ",", "l", ",", "i", ",", "j", ",", "grams", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.few_shot.optimize": [[72, 78], ["scipy.optimize.minimize", "few_shot.Objective", "numpy.array", "len", "len", "w.sum", "len"], "function", ["None"], ["", "", "def", "optimize", "(", "positive_idx", ",", "negative_idx", ",", "grams", ",", "metric", "=", "'euclidean'", ",", "l2", "=", "0.", ")", ":", "\n", "    ", "sol", "=", "minimize", "(", "fun", "=", "Objective", "(", "positive_idx", ",", "negative_idx", ",", "grams", ",", "metric", ",", "l2", ")", ",", "\n", "x0", "=", "np", ".", "array", "(", "[", "1", "/", "len", "(", "grams", ")", "]", "*", "len", "(", "grams", ")", ")", ",", "\n", "bounds", "=", "[", "[", "0.", ",", "1.", "]", "]", "*", "len", "(", "grams", ")", ",", "\n", "constraints", "=", "{", "'type'", ":", "'eq'", ",", "'fun'", ":", "lambda", "w", ":", "w", ".", "sum", "(", ")", "-", "1", "}", ")", "\n", "return", "sol", ".", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.few_shot.optimize_with_gaussian": [[80, 91], ["scipy.optimize.minimize", "few_shot.pdf", "numpy.arange", "len", "len", "numpy.ones", "few_shot.Objective", "numpy.array", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.few_shot.pdf"], ["", "def", "optimize_with_gaussian", "(", "positive_idx", ",", "negative_idx", ",", "grams", ",", "metric", "=", "'cosine_gaussian'", ")", ":", "\n", "    ", "if", "len", "(", "positive_idx", ")", "==", "1", "and", "len", "(", "negative_idx", ")", "==", "0", ":", "\n", "        ", "return", "np", ".", "ones", "(", "len", "(", "grams", ")", ")", ",", "-", "1", ",", "-", "1", "\n", "", "sol", "=", "minimize", "(", "fun", "=", "Objective", "(", "positive_idx", ",", "negative_idx", ",", "grams", ",", "metric", ")", ",", "\n", "x0", "=", "np", ".", "array", "(", "[", "3.", ",", "2.5", "]", ")", ",", "\n", "bounds", "=", "[", "[", "0.", ",", "len", "(", "grams", ")", "-", "1", "]", ",", "[", "0.5", ",", "5.", "]", "]", ")", "\n", "mu", ",", "sigma", "=", "sol", ".", "x", "\n", "weights", "=", "pdf", "(", "np", ".", "arange", "(", "len", "(", "grams", ")", ")", ",", "mu", ",", "sigma", ")", "\n", "# print(f'mu: {mu}, sigma: {sigma}')", "\n", "# print(f'weights: {weights}')", "\n", "return", "weights", ",", "mu", ",", "sigma", "\n", "", ""]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.font_wires.FontWires.__init__": [[39, 80], ["pathlib.Path", "list", "print", "len", "print", "int", "random.sample", "int", "random.sample", "font_wires.FontWires.labels.append", "set", "print", "len", "int", "random.sample", "font_wires.FontWires.char_to_label", "platform.system", "pathlib.Path.glob", "font_util.valid_font", "len", "len", "len", "dgl.data.utils.load_graphs", "str"], "methods", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.solid_letters.SolidMNISTWithPointclouds.char_to_label", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.font_util.valid_font"], ["    ", "def", "__init__", "(", "self", ",", "root_dir", ",", "split", "=", "\"train\"", ",", "size_percentage", "=", "None", ",", "in_memory", "=", "True", ",", "apply_line_symmetry", "=", "0.0", ")", ":", "\n", "        ", "\"\"\"\n        Load and create the FontWires dataset\n        :param root_dir: Root path to the dataset\n        :param train: Whether train or test set\n        :param size_percentage: Percentage of data to load per category. Given in range [0, 1].\n        :param in_memory: Whether to keep the entire dataset in memory (This is always done in Windows)\n        :param apply_line_symmetry: Probability of applying a line symmetry transform on the curve grid\n        \"\"\"", "\n", "assert", "split", "in", "(", "\"train\"", ",", "\"val\"", ",", "\"test\"", ")", "\n", "self", ".", "in_memory", "=", "in_memory", "\n", "path", "=", "pathlib", ".", "Path", "(", "root_dir", ")", "\n", "if", "split", "==", "\"train\"", "or", "split", "==", "\"val\"", ":", "\n", "            ", "subfolder", "=", "\"train\"", "\n", "", "else", ":", "\n", "            ", "subfolder", "=", "\"test\"", "\n", "", "path", "/=", "subfolder", "\n", "self", ".", "graph_files", "=", "list", "(", "[", "x", "for", "x", "in", "path", ".", "glob", "(", "\"*.bin\"", ")", "if", "valid_font", "(", "x", ")", "]", ")", "\n", "print", "(", "\"Found {} {} data.\"", ".", "format", "(", "len", "(", "self", ".", "graph_files", ")", ",", "subfolder", ")", ")", "\n", "self", ".", "labels", "=", "[", "]", "\n", "\n", "if", "split", "==", "\"train\"", ":", "\n", "            ", "k", "=", "int", "(", "0.8", "*", "len", "(", "self", ".", "graph_files", ")", ")", "\n", "self", ".", "graph_files", "=", "random", ".", "sample", "(", "self", ".", "graph_files", ",", "k", ")", "\n", "", "elif", "split", "==", "\"val\"", ":", "\n", "            ", "k", "=", "int", "(", "0.2", "*", "len", "(", "self", ".", "graph_files", ")", ")", "\n", "self", ".", "graph_files", "=", "random", ".", "sample", "(", "self", ".", "graph_files", ",", "k", ")", "\n", "\n", "", "if", "size_percentage", "is", "not", "None", ":", "\n", "            ", "k", "=", "int", "(", "size_percentage", "*", "len", "(", "self", ".", "graph_files", ")", ")", "\n", "self", ".", "graph_files", "=", "random", ".", "sample", "(", "self", ".", "graph_files", ",", "k", ")", "\n", "\n", "", "for", "fn", "in", "self", ".", "graph_files", ":", "\n", "# the first character of filename must be the alphabet", "\n", "            ", "self", ".", "labels", ".", "append", "(", "self", ".", "char_to_label", "(", "fn", ".", "stem", "[", "0", "]", ")", ")", "\n", "", "self", ".", "num_classes", "=", "len", "(", "set", "(", "self", ".", "labels", ")", ")", "\n", "if", "platform", ".", "system", "(", ")", "==", "\"Windows\"", "or", "self", ".", "in_memory", ":", "\n", "            ", "print", "(", "\"Storing dataset in memory...\"", ")", "\n", "self", ".", "graphs", "=", "[", "load_graphs", "(", "str", "(", "fn", ")", ")", "[", "0", "]", "[", "0", "]", "for", "fn", "in", "self", ".", "graph_files", "]", "\n", "", "print", "(", "\"Done loading {} classes\"", ".", "format", "(", "self", ".", "num_classes", ")", ")", "\n", "self", ".", "apply_line_symmetry", "=", "apply_line_symmetry", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.font_wires.FontWires.char_to_label": [[81, 83], ["ord", "char.lower"], "methods", ["None"], ["", "def", "char_to_label", "(", "self", ",", "char", ")", ":", "\n", "        ", "return", "ord", "(", "char", ".", "lower", "(", ")", ")", "-", "97", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.font_wires.FontWires.__len__": [[84, 86], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "graph_files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.font_wires.FontWires.__getitem__": [[87, 98], ["str", "random.uniform", "torch.tensor().long", "platform.system", "font_wires.FontWires.graph_files[].absolute", "graph.ndata[].flip", "dgl.data.utils.load_graphs", "torch.tensor"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "platform", ".", "system", "(", ")", "==", "\"Windows\"", "or", "self", ".", "in_memory", ":", "\n", "            ", "graph", "=", "self", ".", "graphs", "[", "idx", "]", "\n", "", "else", ":", "\n", "            ", "graph_file", "=", "str", "(", "self", ".", "graph_files", "[", "idx", "]", ".", "absolute", "(", ")", ")", "\n", "graph", "=", "load_graphs", "(", "graph_file", ")", "[", "0", "]", "[", "0", "]", "\n", "", "if", "self", ".", "apply_line_symmetry", ">", "0.0", ":", "\n", "            ", "prob", "=", "random", ".", "uniform", "(", "0.0", ",", "1.0", ")", "\n", "if", "prob", "<", "self", ".", "apply_line_symmetry", ":", "\n", "                ", "graph", ".", "ndata", "[", "'x'", "]", "=", "graph", ".", "ndata", "[", "'x'", "]", ".", "flip", "(", "1", ")", "\n", "", "", "return", "graph", ",", "torch", ".", "tensor", "(", "[", "self", ".", "labels", "[", "idx", "]", "]", ")", ".", "long", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.font_wires.FontWires.feature_indices": [[99, 104], ["None"], "methods", ["None"], ["", "def", "feature_indices", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns a dictionary of mappings from the name of features to the channels containing them\n        \"\"\"", "\n", "return", "{", "\"xyz\"", ":", "(", "0", ",", "1", ",", "2", ")", ",", "\"normals\"", ":", "(", "3", ",", "4", ",", "5", ")", ",", "\"E (ru.ru)\"", ":", "(", "6", ",", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.font_wires.FontWiresWithImages.__init__": [[108, 182], ["pathlib.Path", "list", "list", "print", "len", "print", "int", "random.sample", "int", "random.sample", "str", "font_wires.FontWiresWithImages.final_graph_files.append", "font_wires.FontWiresWithImages.final_image_files.append", "font_wires.FontWiresWithImages.labels.append", "set", "print", "len", "len", "int", "random.sample", "str().split", "str().split", "str", "font_wires.FontWiresWithImages.char_to_label", "platform.system", "PIL.Image.open", "numpy.expand_dims.resize().convert", "numpy.expand_dims", "font_wires.FontWiresWithImages.images.append", "len", "len", "pathlib.Path.glob", "font_util.valid_font", "pathlib.Path.glob", "font_util.valid_font", "len", "len", "len", "str", "str", "dgl.data.utils.load_graphs", "numpy.expand_dims.resize", "numpy.asarray", "str"], "methods", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.solid_letters.SolidMNISTWithPointclouds.char_to_label", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.font_util.valid_font", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.font_util.valid_font"], ["    ", "def", "__init__", "(", "self", ",", "root_dir", ",", "split", "=", "\"train\"", ",", "size_percentage", "=", "None", ",", "in_memory", "=", "True", ",", "shape_type", "=", "None", ",", "apply_line_symmetry", "=", "0.0", ")", ":", "\n", "        ", "\"\"\"\n        Load and create the FontWires dataset\n        :param root_dir: Root path to the dataset\n        :param train: Whether train or test set\n        :param size_percentage: Percentage of data to load per category. Given in range [0, 1].\n        :param in_memory: Whether to keep the entire dataset in memory (This is always done in Windows)\n        :param apply_line_symmetry: Probability of applying a line symmetry transform on the curve grid\n        \"\"\"", "\n", "assert", "split", "in", "(", "\"train\"", ",", "\"val\"", ",", "\"test\"", ")", "\n", "self", ".", "in_memory", "=", "in_memory", "\n", "path", "=", "pathlib", ".", "Path", "(", "root_dir", ")", "\n", "if", "split", "==", "\"train\"", "or", "split", "==", "\"val\"", ":", "\n", "            ", "subfolder", "=", "\"train\"", "\n", "", "else", ":", "\n", "            ", "subfolder", "=", "\"test\"", "\n", "", "path", "/=", "subfolder", "\n", "self", ".", "graph_files", "=", "list", "(", "[", "x", "for", "x", "in", "path", ".", "glob", "(", "\"*.bin\"", ")", "if", "valid_font", "(", "x", ")", "]", ")", "\n", "self", ".", "images_files", "=", "list", "(", "[", "x", "for", "x", "in", "path", ".", "glob", "(", "\"*.png\"", ")", "if", "valid_font", "(", "x", ")", "]", ")", "\n", "\n", "print", "(", "\"Found {} {} {} data.\"", ".", "format", "(", "len", "(", "self", ".", "graph_files", ")", ",", "len", "(", "self", ".", "images_files", ")", ",", "subfolder", ")", ")", "\n", "self", ".", "labels", "=", "[", "]", "\n", "\n", "if", "split", "==", "\"train\"", ":", "\n", "            ", "k", "=", "int", "(", "0.8", "*", "len", "(", "self", ".", "graph_files", ")", ")", "\n", "self", ".", "graph_files", "=", "random", ".", "sample", "(", "self", ".", "graph_files", ",", "k", ")", "\n", "", "elif", "split", "==", "\"val\"", ":", "\n", "            ", "k", "=", "int", "(", "0.2", "*", "len", "(", "self", ".", "graph_files", ")", ")", "\n", "self", ".", "graph_files", "=", "random", ".", "sample", "(", "self", ".", "graph_files", ",", "k", ")", "\n", "\n", "", "if", "size_percentage", "is", "not", "None", ":", "\n", "            ", "k", "=", "int", "(", "size_percentage", "*", "len", "(", "self", ".", "graph_files", ")", ")", "\n", "self", ".", "graph_files", "=", "random", ".", "sample", "(", "self", ".", "graph_files", ",", "k", ")", "\n", "\n", "", "self", ".", "img_hashmap", "=", "{", "}", "\n", "for", "file_name", "in", "self", ".", "images_files", ":", "\n", "            ", "query_name", "=", "str", "(", "file_name", ")", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "self", ".", "img_hashmap", "[", "query_name", "]", "=", "str", "(", "file_name", ")", "\n", "\n", "", "self", ".", "final_graph_files", "=", "[", "]", "\n", "self", ".", "final_image_files", "=", "[", "]", "\n", "self", ".", "labels", "=", "[", "]", "\n", "\n", "for", "file_name", "in", "self", ".", "graph_files", ":", "\n", "# the first character of filename must be the alphabet", "\n", "            ", "query_name", "=", "str", "(", "file_name", ")", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "if", "shape_type", "is", "not", "None", "and", "shape_type", "not", "in", "query_name", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "query_name", "not", "in", "self", ".", "img_hashmap", ":", "\n", "#print(\"Error: \", query_name)", "\n", "                ", "continue", "\n", "", "self", ".", "final_graph_files", ".", "append", "(", "str", "(", "file_name", ")", ")", "\n", "self", ".", "final_image_files", ".", "append", "(", "self", ".", "img_hashmap", "[", "query_name", "]", ")", "\n", "self", ".", "labels", ".", "append", "(", "self", ".", "char_to_label", "(", "file_name", ".", "stem", "[", "0", "]", ")", ")", "\n", "\n", "\n", "", "self", ".", "num_classes", "=", "len", "(", "set", "(", "self", ".", "labels", ")", ")", "\n", "self", ".", "images", "=", "[", "]", "\n", "if", "platform", ".", "system", "(", ")", "==", "\"Windows\"", "or", "self", ".", "in_memory", ":", "\n", "            ", "print", "(", "\"Storing dataset in memory...\"", ")", "\n", "self", ".", "graphs", "=", "[", "load_graphs", "(", "str", "(", "fn", ")", ")", "[", "0", "]", "[", "0", "]", "for", "fn", "in", "self", ".", "final_graph_files", "]", "\n", "for", "fn", "in", "self", ".", "final_image_files", ":", "\n", "                ", "image", "=", "Image", ".", "open", "(", "fn", ")", "\n", "image", "=", "image", ".", "resize", "(", "(", "64", ",", "64", ")", ",", "Image", ".", "ANTIALIAS", ")", ".", "convert", "(", "'L'", ")", "\n", "image", "=", "np", ".", "expand_dims", "(", "np", ".", "asarray", "(", "image", ")", "/", "255.0", ",", "axis", "=", "-", "1", ")", "\n", "self", ".", "images", ".", "append", "(", "image", ")", "\n", "#self.images = [np.load(fn) for fn in self.final_image_files]", "\n", "\n", "", "", "self", ".", "graph_files", "=", "self", ".", "final_graph_files", "\n", "self", ".", "image_files", "=", "self", ".", "final_image_files", "\n", "\n", "print", "(", "\"Loaded {} face-adj graphs and {} image files from {} classes\"", ".", "format", "(", "len", "(", "self", ".", "graph_files", ")", ",", "len", "(", "self", ".", "image_files", ")", ",", "self", ".", "num_classes", ")", ")", "\n", "self", ".", "apply_line_symmetry", "=", "apply_line_symmetry", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.font_wires.FontWiresWithImages.char_to_label": [[183, 185], ["ord", "char.lower"], "methods", ["None"], ["", "def", "char_to_label", "(", "self", ",", "char", ")", ":", "\n", "        ", "return", "ord", "(", "char", ".", "lower", "(", ")", ")", "-", "97", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.font_wires.FontWiresWithImages.__len__": [[186, 188], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "graph_files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.font_wires.FontWiresWithImages.__getitem__": [[189, 205], ["str", "PIL.Image.open", "numpy.expand_dims.resize().convert", "numpy.expand_dims", "random.uniform", "torch.tensor().long", "platform.system", "font_wires.FontWiresWithImages.graph_files[].absolute", "graph.ndata[].flip", "dgl.data.utils.load_graphs", "numpy.expand_dims.resize", "numpy.asarray", "torch.tensor"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "platform", ".", "system", "(", ")", "==", "\"Windows\"", "or", "self", ".", "in_memory", ":", "\n", "            ", "graph", "=", "self", ".", "graphs", "[", "idx", "]", "\n", "image", "=", "self", ".", "images", "[", "idx", "]", "\n", "", "else", ":", "\n", "            ", "graph_file", "=", "str", "(", "self", ".", "graph_files", "[", "idx", "]", ".", "absolute", "(", ")", ")", "\n", "graph", "=", "load_graphs", "(", "graph_file", ")", "[", "0", "]", "[", "0", "]", "\n", "image", "=", "Image", ".", "open", "(", "self", ".", "image_files", "[", "idx", "]", ")", "\n", "image", "=", "image", ".", "resize", "(", "(", "64", ",", "64", ")", ",", "Image", ".", "ANTIALIAS", ")", ".", "convert", "(", "'L'", ")", "\n", "image", "=", "np", ".", "expand_dims", "(", "np", ".", "asarray", "(", "image", ")", "/", "255.0", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "if", "self", ".", "apply_line_symmetry", ">", "0.0", ":", "\n", "            ", "prob", "=", "random", ".", "uniform", "(", "0.0", ",", "1.0", ")", "\n", "if", "prob", "<", "self", ".", "apply_line_symmetry", ":", "\n", "                ", "graph", ".", "ndata", "[", "'x'", "]", "=", "graph", ".", "ndata", "[", "'x'", "]", ".", "flip", "(", "1", ")", "\n", "", "", "return", "graph", ",", "image", ",", "torch", ".", "tensor", "(", "[", "self", ".", "labels", "[", "idx", "]", "]", ")", ".", "long", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.font_wires.FontWiresWithImages.feature_indices": [[206, 211], ["None"], "methods", ["None"], ["", "def", "feature_indices", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns a dictionary of mappings from the name of features to the channels containing them\n        \"\"\"", "\n", "return", "{", "\"xyz\"", ":", "(", "0", ",", "1", ",", "2", ")", ",", "\"normals\"", ":", "(", "3", ",", "4", ",", "5", ")", ",", "\"E (ru.ru)\"", ":", "(", "6", ",", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.font_wires.collate_graphs": [[15, 20], ["map", "torch.stack", "dgl.batch", "zip"], "function", ["None"], ["def", "collate_graphs", "(", "batch", ")", ":", "\n", "    ", "graphs", ",", "labels", "=", "map", "(", "list", ",", "zip", "(", "*", "batch", ")", ")", "\n", "labels", "=", "torch", ".", "stack", "(", "labels", ")", "\n", "bg", "=", "dgl", ".", "batch", "(", "graphs", ")", "\n", "return", "bg", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.font_wires.collate_graphs_with_images": [[21, 28], ["map", "torch.stack", "dgl.batch", "torch.from_numpy().type", "zip", "torch.from_numpy", "numpy.stack"], "function", ["None"], ["", "def", "collate_graphs_with_images", "(", "batch", ")", ":", "\n", "    ", "graphs", ",", "images", ",", "labels", "=", "map", "(", "list", ",", "zip", "(", "*", "batch", ")", ")", "\n", "#print(images[0].shape)", "\n", "labels", "=", "torch", ".", "stack", "(", "labels", ")", "\n", "bg", "=", "dgl", ".", "batch", "(", "graphs", ")", "\n", "images", "=", "torch", ".", "from_numpy", "(", "np", ".", "stack", "(", "images", ")", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "return", "bg", ",", "images", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.font_wires._make_dgl_graph": [[29, 36], ["dgl.DGLGraph", "dgl.DGLGraph.add_nodes", "torch.tensor().float", "dgl.DGLGraph.add_edges", "torch.tensor", "torch.ones"], "function", ["None"], ["", "def", "_make_dgl_graph", "(", "xs", ",", "edges", ",", "label", ")", ":", "\n", "    ", "g", "=", "dgl", ".", "DGLGraph", "(", ")", "\n", "g", ".", "add_nodes", "(", "xs", ".", "shape", "[", "0", "]", ")", "\n", "g", ".", "ndata", "[", "'x'", "]", "=", "torch", ".", "tensor", "(", "xs", ")", ".", "float", "(", ")", "\n", "g", ".", "add_edges", "(", "edges", "[", ":", ",", "0", "]", ",", "edges", "[", ":", ",", "1", "]", ")", "\n", "g", ".", "ndata", "[", "'y'", "]", "=", "(", "torch", ".", "ones", "(", "xs", ".", "shape", "[", "0", "]", ")", "*", "label", ")", ".", "long", "(", ")", "\n", "return", "g", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.font_wires._save_feature_to_csv": [[212, 224], ["feat[].numpy().reshape", "feat[].numpy().reshape", "numpy.savetxt", "len", "feat[].numpy", "feat[].numpy"], "function", ["None"], ["", "", "def", "_save_feature_to_csv", "(", "feat", ":", "torch", ".", "Tensor", ",", "filename", ")", ":", "\n", "    ", "\"\"\"\n    Save loaded feature to csv file to visualize sampled points\n    :param feat Features loaded from *.feat file of shape [#faces, #u, #v, 10]\n    :param filename Output csv filename\n    \"\"\"", "\n", "assert", "len", "(", "feat", ".", "shape", ")", "==", "4", "# faces x #u x #v x 10", "\n", "pts", "=", "feat", "[", ":", ",", ":", ",", ":", ",", ":", "3", "]", ".", "numpy", "(", ")", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", "\n", "mask", "=", "feat", "[", ":", ",", ":", ",", ":", ",", "6", "]", ".", "numpy", "(", ")", ".", "reshape", "(", "-", "1", ")", "\n", "point_indices_inside_faces", "=", "(", "mask", "==", "1", ")", "\n", "pts", "=", "pts", "[", "point_indices_inside_faces", ",", ":", "]", "\n", "np", ".", "savetxt", "(", "filename", ",", "pts", ",", "delimiter", "=", "\",\"", ",", "header", "=", "\"x,y,z\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.download_data.RemoteItem.__init__": [[12, 18], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.classifier.NonLinearClassifier.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "url", ",", "path_maps", ",", "temp_dir", "=", "'temp'", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "url", "=", "url", "\n", "self", ".", "path_maps", "=", "path_maps", "\n", "self", ".", "temp_dir", "=", "temp_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.download_data.RemoteItem._download": [[19, 39], ["os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "os.join", "os.join", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "print", "requests.get", "int", "tqdm.tqdm.tqdm", "tqdm.tqdm.tqdm.close", "print", "requests.get.headers.get", "open", "requests.get.iter_content", "print", "os.join", "os.join", "tqdm.tqdm.tqdm.update", "file.write", "len"], "methods", ["None"], ["", "def", "_download", "(", "self", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "self", ".", "temp_dir", ",", "exist_ok", "=", "True", ")", "\n", "target", "=", "osp", ".", "join", "(", "self", ".", "temp_dir", ",", "self", ".", "name", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "target", ")", ":", "\n", "            ", "print", "(", "f'File {target} exists - skipping download.'", ")", "\n", "return", "\n", "\n", "", "print", "(", "f'Downloading {self.name}...'", ")", "\n", "# Streaming, so we can iterate over the response.", "\n", "response", "=", "requests", ".", "get", "(", "self", ".", "url", ",", "stream", "=", "True", ")", "\n", "total_size_in_bytes", "=", "int", "(", "response", ".", "headers", ".", "get", "(", "'content-length'", ",", "0", ")", ")", "\n", "block_size", "=", "1024", "# 1 Kibibyte", "\n", "progress_bar", "=", "tqdm", "(", "total", "=", "total_size_in_bytes", ",", "unit", "=", "'iB'", ",", "unit_scale", "=", "True", ")", "\n", "with", "open", "(", "osp", ".", "join", "(", "self", ".", "temp_dir", ",", "self", ".", "name", ")", ",", "'wb'", ")", "as", "file", ":", "\n", "            ", "for", "data", "in", "response", ".", "iter_content", "(", "block_size", ")", ":", "\n", "                ", "progress_bar", ".", "update", "(", "len", "(", "data", ")", ")", "\n", "file", ".", "write", "(", "data", ")", "\n", "", "", "progress_bar", ".", "close", "(", ")", "\n", "if", "total_size_in_bytes", "!=", "0", "and", "progress_bar", ".", "n", "!=", "total_size_in_bytes", ":", "\n", "            ", "print", "(", "\"ERROR, something went wrong\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.download_data.RemoteItem._extract": [[40, 43], ["print", "pyunpack.Archive().extractall", "pyunpack.Archive", "os.join", "os.join"], "methods", ["None"], ["", "", "def", "_extract", "(", "self", ")", ":", "\n", "        ", "print", "(", "f'Extracting {self.name} (this may take some time)...'", ")", "\n", "Archive", "(", "osp", ".", "join", "(", "self", ".", "temp_dir", ",", "self", ".", "name", ")", ")", ".", "extractall", "(", "self", ".", "temp_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.download_data.RemoteItem._move_to_destination": [[44, 49], ["print", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "shutil.move", "os.path.dirname", "os.path.dirname", "os.path.dirname", "os.path.dirname", "os.join", "os.join"], "methods", ["None"], ["", "def", "_move_to_destination", "(", "self", ")", ":", "\n", "        ", "for", "src", ",", "dest", "in", "self", ".", "path_maps", ":", "\n", "            ", "print", "(", "f'Save to {dest}...'", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "dest", ")", ",", "exist_ok", "=", "True", ")", "\n", "shutil", ".", "move", "(", "osp", ".", "join", "(", "self", ".", "temp_dir", ",", "src", ")", ",", "dest", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.download_data.RemoteItem._cleanup": [[50, 53], ["print", "shutil.rmtree"], "methods", ["None"], ["", "", "def", "_cleanup", "(", "self", ")", ":", "\n", "        ", "print", "(", "f'Clean up {self.temp_dir}...'", ")", "\n", "shutil", ".", "rmtree", "(", "self", ".", "temp_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.download_data.RemoteItem.download_and_extract": [[54, 64], ["all", "download_data.RemoteItem._download", "download_data.RemoteItem._extract", "download_data.RemoteItem._move_to_destination", "print", "download_data.RemoteItem._cleanup", "os.exists", "os.exists"], "methods", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.download_data.RemoteItem._download", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.download_data.RemoteItem._extract", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.download_data.RemoteItem._move_to_destination", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.download_data.RemoteItem._cleanup"], ["", "def", "download_and_extract", "(", "self", ",", "cleanup", "=", "True", ")", ":", "\n", "        ", "if", "all", "(", "[", "osp", ".", "exists", "(", "dest", ")", "for", "src", ",", "dest", "in", "self", ".", "path_maps", "]", ")", ":", "\n", "            ", "print", "(", "f'{self.name} already downloaded - skipping.'", ")", "\n", "return", "\n", "\n", "", "self", ".", "_download", "(", ")", "\n", "self", ".", "_extract", "(", ")", "\n", "self", ".", "_move_to_destination", "(", ")", "\n", "if", "cleanup", ":", "\n", "            ", "self", ".", "_cleanup", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.reconstruction.ChamferLoss.__init__": [[70, 73], ["torch.Module.__init__", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.classifier.NonLinearClassifier.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ChamferLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.reconstruction.ChamferLoss.forward": [[74, 82], ["reconstruction.ChamferLoss.batch_pairwise_dist", "torch.min", "torch.min", "torch.min", "torch.min", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.min", "torch.min", "torch.min", "torch.min", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.chamfer.ChamferLoss.batch_pairwise_dist"], ["", "def", "forward", "(", "self", ",", "preds", ",", "gts", ")", ":", "\n", "        ", "P", "=", "self", ".", "batch_pairwise_dist", "(", "gts", ",", "preds", ")", "\n", "mins", ",", "_", "=", "torch", ".", "min", "(", "P", ",", "1", ")", "\n", "loss_1", "=", "torch", ".", "mean", "(", "mins", ")", "\n", "mins", ",", "_", "=", "torch", ".", "min", "(", "P", ",", "2", ")", "\n", "loss_2", "=", "torch", ".", "mean", "(", "mins", ")", "\n", "\n", "return", "0.5", "*", "(", "loss_1", "+", "loss_2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.reconstruction.ChamferLoss.batch_pairwise_dist": [[83, 100], ["x.size", "y.size", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.arange().type", "torch.arange().type", "torch.arange().type", "torch.arange().type", "torch.arange().type", "torch.arange().type", "torch.arange().type", "torch.arange().type", "xx[].unsqueeze().expand_as", "yy[].unsqueeze().expand_as", "x.transpose", "y.transpose", "y.transpose", "torch.bmm.transpose", "torch.bmm.transpose", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "xx[].unsqueeze", "yy[].unsqueeze", "xx[].unsqueeze().expand_as.transpose"], "methods", ["None"], ["", "def", "batch_pairwise_dist", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "bs", ",", "num_points_x", ",", "points_dim", "=", "x", ".", "size", "(", ")", "\n", "_", ",", "num_points_y", ",", "_", "=", "y", ".", "size", "(", ")", "\n", "xx", "=", "torch", ".", "bmm", "(", "x", ",", "x", ".", "transpose", "(", "2", ",", "1", ")", ")", "\n", "yy", "=", "torch", ".", "bmm", "(", "y", ",", "y", ".", "transpose", "(", "2", ",", "1", ")", ")", "\n", "zz", "=", "torch", ".", "bmm", "(", "x", ",", "y", ".", "transpose", "(", "2", ",", "1", ")", ")", "\n", "if", "self", ".", "use_cuda", ":", "\n", "            ", "dtype", "=", "torch", ".", "cuda", ".", "LongTensor", "\n", "", "else", ":", "\n", "            ", "dtype", "=", "torch", ".", "LongTensor", "\n", "", "diag_ind_x", "=", "torch", ".", "arange", "(", "0", ",", "num_points_x", ")", ".", "type", "(", "dtype", ")", "\n", "diag_ind_y", "=", "torch", ".", "arange", "(", "0", ",", "num_points_y", ")", ".", "type", "(", "dtype", ")", "\n", "# brk()", "\n", "rx", "=", "xx", "[", ":", ",", "diag_ind_x", ",", "diag_ind_x", "]", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "zz", ".", "transpose", "(", "2", ",", "1", ")", ")", "\n", "ry", "=", "yy", "[", ":", ",", "diag_ind_y", ",", "diag_ind_y", "]", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "zz", ")", "\n", "P", "=", "rx", ".", "transpose", "(", "2", ",", "1", ")", "+", "ry", "-", "2", "*", "zz", "\n", "return", "P", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.reconstruction.compute_activation_stats": [[17, 50], ["torch.split", "torch.split", "torch.stack().detach().cpu", "torch.stack().detach().cpu", "bg.batch_num_nodes().tolist", "graph_activations.permute().flatten().unsqueeze.permute().flatten", "torch.triu_indices", "torch.triu_indices", "gram[].flatten", "grams.append", "graph_activations[].unsqueeze().flatten", "graph_activations[].flatten", "torch.where", "torch.where", "graph_activations[].unsqueeze().flatten.sum", "torch.matmul", "torch.matmul", "gram[].flatten.isnan().any", "torch.stack().detach", "torch.stack().detach", "bg.batch_num_nodes", "graph_activations.permute().flatten().unsqueeze.sum", "graph_activations[].unsqueeze().flatten.sum", "x.mean.isnan", "graph_activations[].flatten.flatten", "graph_activations.permute().flatten().unsqueeze.mean", "graph_activations[].flatten.permute().flatten().unsqueeze", "graph_activations.permute().flatten().unsqueeze.permute", "graph_activations.permute().flatten().unsqueeze.transpose", "graph_activations[].unsqueeze", "gram[].flatten.isnan", "torch.stack", "torch.stack", "graph_activations[].flatten.permute().flatten", "graph_activations[].flatten.permute"], "function", ["None"], ["def", "compute_activation_stats", "(", "bg", ",", "layer", ",", "activations", ")", ":", "\n", "    ", "grams", "=", "[", "]", "\n", "for", "graph_activations", "in", "torch", ".", "split", "(", "activations", ",", "bg", ".", "batch_num_nodes", "(", ")", ".", "tolist", "(", ")", ")", ":", "\n", "        ", "if", "layer", "==", "'feats'", ":", "\n", "            ", "mask", "=", "graph_activations", "[", ":", ",", "6", ",", ":", ",", ":", "]", ".", "unsqueeze", "(", "1", ")", ".", "flatten", "(", "start_dim", "=", "2", ")", "# F x 1 x 100", "\n", "graph_activations", "=", "graph_activations", "[", ":", ",", ":", "6", ",", ":", ",", ":", "]", ".", "flatten", "(", "start_dim", "=", "2", ")", "# F x 6 x 100", "\n", "x", "=", "graph_activations", "*", "mask", "\n", "mean", "=", "x", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdims", "=", "True", ")", "/", "mask", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "nans_x", ",", "nans_y", ",", "nans_z", "=", "torch", ".", "where", "(", "mean", ".", "isnan", "(", ")", ")", "\n", "mean", "[", "nans_x", ",", "nans_y", ",", "nans_z", "]", "=", "0", "\n", "x", "=", "x", "-", "mean", "\n", "", "elif", "layer", "[", ":", "4", "]", "==", "'conv'", ":", "\n", "            ", "x", "=", "graph_activations", ".", "flatten", "(", "start_dim", "=", "2", ")", "# x shape: F x d x 100", "\n", "mean", "=", "x", ".", "mean", "(", "dim", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "x", "=", "x", "-", "mean", "\n", "", "else", ":", "\n", "# fc and GIN layers", "\n", "# graph_activations shape: F x d x 1", "\n", "            ", "x", "=", "graph_activations", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", ".", "unsqueeze", "(", "0", ")", "# 1 x d x F", "\n", "\n", "", "x", "=", "x", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "# x shape: d x 100F", "\n", "\n", "if", "layer", "==", "'feats'", ":", "\n", "            ", "img_size", "=", "mask", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "            ", "img_size", "=", "x", ".", "shape", "[", "-", "1", "]", "# img_size = 100F", "\n", "\n", "", "gram", "=", "torch", ".", "matmul", "(", "x", ",", "x", ".", "transpose", "(", "0", ",", "1", ")", ")", "/", "img_size", "\n", "triu_idx", "=", "torch", ".", "triu_indices", "(", "*", "gram", ".", "shape", ")", "\n", "triu", "=", "gram", "[", "triu_idx", "[", "0", ",", ":", "]", ",", "triu_idx", "[", "1", ",", ":", "]", "]", ".", "flatten", "(", ")", "\n", "assert", "not", "triu", ".", "isnan", "(", ")", ".", "any", "(", ")", "\n", "grams", ".", "append", "(", "triu", ")", "\n", "", "return", "torch", ".", "stack", "(", "grams", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.reconstruction.compute_activation_stats_psnet": [[51, 57], ["grams.detach().cpu", "torch.matmul", "torch.matmul", "activations.transpose", "grams.detach"], "function", ["None"], ["", "def", "compute_activation_stats_psnet", "(", "bg", ",", "layer", ",", "activations", ")", ":", "\n", "    ", "grams", "=", "torch", ".", "matmul", "(", "activations", ",", "activations", ".", "transpose", "(", "1", ",", "2", ")", ")", "/", "activations", ".", "shape", "[", "-", "1", "]", "\n", "# triu_idx = torch.triu_indices(*grams.shape[1:])", "\n", "# triu = grams[:, triu_idx[0, :], triu_idx[1, :]].flatten(start_dim=1)", "\n", "# assert not triu.isnan().any()", "\n", "return", "grams", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.reconstruction.log_activation_stats": [[59, 67], ["isinstance", "reconstruction.compute_activation_stats_psnet", "reconstruction.compute_activation_stats", "all_layers_activations.items", "all_layers_activations.items"], "function", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.reconstruction.compute_activation_stats_psnet", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.reconstruction.compute_activation_stats"], ["", "def", "log_activation_stats", "(", "bg", ",", "all_layers_activations", ",", "model", ")", ":", "\n", "    ", "if", "isinstance", "(", "model", ",", "Points2PointsAutoEnc", ")", ":", "\n", "        ", "stats", "=", "{", "layer", ":", "compute_activation_stats_psnet", "(", "bg", ",", "layer", ",", "activations", ")", "\n", "for", "layer", ",", "activations", "in", "all_layers_activations", ".", "items", "(", ")", "}", "\n", "", "else", ":", "\n", "        ", "stats", "=", "{", "layer", ":", "compute_activation_stats", "(", "bg", ",", "layer", ",", "activations", ")", "\n", "for", "layer", ",", "activations", "in", "all_layers_activations", ".", "items", "(", ")", "}", "\n", "", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.reconstruction.train_val": [[105, 157], ["os.join", "os.join", "os.join", "helper.create_dir", "helper.create_dir", "helper.setup_logging", "logging.info", "logging.info", "torch.optim.Adam", "float", "range", "logging.info", "model.parameters", "reconstruction._train_one_epoch", "sum", "reconstruction._val_one_epoch", "helper.save_checkpoint", "os.join", "helper.save_checkpoint", "p.numel", "os.join", "model.parameters"], "function", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.helper.create_dir", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.helper.create_dir", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.helper.setup_logging", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.reconstruction._train_one_epoch", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.reconstruction._val_one_epoch", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.helper.save_checkpoint", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.helper.save_checkpoint"], ["def", "train_val", "(", "\n", "step", ",", "\n", "model", ",", "\n", "train_loader", ",", "\n", "val_loader", ",", "\n", "experiment_name", ",", "\n", "args", ",", "\n", "epochs", "=", "350", ",", "\n", "checkpoint_dir", "=", "\"./tmp\"", ",", "\n", "device", "=", "\"cuda:0\"", ",", "\n", "val_every", "=", "1", ",", "\n", ")", ":", "\n", "# Create directories for checkpoints and logging", "\n", "    ", "log_filename", "=", "osp", ".", "join", "(", "\"dump\"", ",", "experiment_name", ",", "\"log.txt\"", ")", "\n", "checkpoint_dir", "=", "osp", ".", "join", "(", "\"dump\"", ",", "experiment_name", ",", "\"checkpoints\"", ")", "\n", "img_dir", "=", "osp", ".", "join", "(", "\"dump\"", ",", "experiment_name", ",", "\"imgs\"", ")", "\n", "helper", ".", "create_dir", "(", "checkpoint_dir", ")", "\n", "helper", ".", "create_dir", "(", "img_dir", ")", "\n", "# Setup logger", "\n", "helper", ".", "setup_logging", "(", "log_filename", ")", "\n", "logging", ".", "info", "(", "\"Experiment name: {}\"", ".", "format", "(", "experiment_name", ")", ")", "\n", "\n", "logging", ".", "info", "(", "\n", "\"Model has {} trainable parameters\"", ".", "format", "(", "\n", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", ")", "\n", ")", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ")", "\n", "\n", "iteration", "=", "0", "\n", "best_loss", "=", "float", "(", "\"inf\"", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "1", ",", "epochs", "+", "1", ")", ":", "\n", "        ", "tloss", "=", "_train_one_epoch", "(", "\n", "step", ",", "model", ",", "train_loader", ",", "optimizer", ",", "epoch", ",", "iteration", ",", "device", "\n", ")", "\n", "if", "epoch", "%", "val_every", "==", "0", ":", "\n", "            ", "test_loss", "=", "_val_one_epoch", "(", "step", ",", "model", ",", "val_loader", ",", "epoch", ",", "device", ")", "\n", "\n", "helper", ".", "save_checkpoint", "(", "\n", "osp", ".", "join", "(", "checkpoint_dir", ",", "f\"last.pt\"", ")", ",", "model", ",", "optimizer", ",", "None", ",", "args", "=", "args", ",", "\n", ")", "\n", "if", "best_loss", ">", "test_loss", ":", "\n", "                ", "best_loss", "=", "test_loss", "\n", "helper", ".", "save_checkpoint", "(", "\n", "osp", ".", "join", "(", "checkpoint_dir", ",", "f\"best.pt\"", ")", ",", "\n", "model", ",", "\n", "optimizer", ",", "\n", "None", ",", "\n", "args", "=", "args", ",", "\n", ")", "\n", "", "", "", "logging", ".", "info", "(", "\"Best validation loss {}\"", ".", "format", "(", "best_loss", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.reconstruction._val_one_epoch": [[159, 171], ["model.eval", "numpy.mean", "logging.info", "torch.no_grad", "torch.no_grad", "enumerate", "step", "losses.append", "np.mean.item", "loss.item"], "function", ["None"], ["", "def", "_val_one_epoch", "(", "step", ",", "model", ",", "loader", ",", "epoch", ",", "device", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "losses", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "batch", "in", "enumerate", "(", "loader", ")", ":", "\n", "            ", "pred_points", ",", "gt_points", ",", "embeddings", ",", "loss", "=", "step", "(", "\n", "model", ",", "batch", ",", "batch_idx", ",", "device", "\n", ")", "\n", "losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "", "", "avg_loss", "=", "np", ".", "mean", "(", "losses", ")", "\n", "logging", ".", "info", "(", "\"[Val]   Epoch {:03} Loss {:2.3f}\"", ".", "format", "(", "epoch", ",", "avg_loss", ".", "item", "(", ")", ")", ")", "\n", "return", "avg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.reconstruction._train_one_epoch": [[173, 195], ["model.train", "enumerate", "numpy.mean", "logging.info", "optimizer.zero_grad", "step", "loss.backward", "optimizer.step", "losses.append", "loss.item", "numpy.mean", "logging.info", "np.mean.item", "np.mean.item"], "function", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.chamfer_distance.chamfer_distance.ChamferDistanceFunction.backward"], ["", "def", "_train_one_epoch", "(", "step", ",", "model", ",", "loader", ",", "optimizer", ",", "epoch", ",", "iteration", ",", "device", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "losses", "=", "[", "]", "\n", "for", "batch_idx", ",", "batch", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "iteration", "=", "iteration", "+", "1", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "pred_points", ",", "gt_points", ",", "embeddings", ",", "loss", "=", "step", "(", "model", ",", "batch", ",", "batch_idx", ",", "device", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "if", "iteration", "%", "200", "==", "True", ":", "\n", "            ", "avg_loss", "=", "np", ".", "mean", "(", "losses", ")", "\n", "logging", ".", "info", "(", "\n", "\"[Train] Epoch {:03}, Iteration {:04}, Loss {:2.3f}\"", ".", "format", "(", "\n", "epoch", ",", "iteration", ",", "avg_loss", ".", "item", "(", ")", "\n", ")", "\n", ")", "\n", "\n", "", "", "avg_loss", "=", "np", ".", "mean", "(", "losses", ")", "\n", "logging", ".", "info", "(", "\"[Train] Epoch {:03} Loss {:2.3f}\"", ".", "format", "(", "epoch", ",", "avg_loss", ".", "item", "(", ")", ")", ")", "\n", "\n", "return", "avg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.reconstruction.test_pc": [[197, 265], ["os.join", "helper.create_dir", "model.eval", "os.makedirs", "os.makedirs", "numpy.mean", "print", "stats.items", "enumerate", "list", "pandas.DataFrame().to_csv", "print", "torch.no_grad", "torch.no_grad", "enumerate", "all_stats.items", "layer_stats[].numpy", "numpy.save", "map", "print", "step", "isinstance", "losses.append", "torch.cat", "torch.cat", "pandas.DataFrame", "reconstruction.log_activation_stats", "log_activation_stats.items", "experiment_tools.visualize_pc", "os.join", "numpy.savetxt", "loss.item", "pred_points[].detach().cpu().numpy", "file.split", "stats.keys", "stats[].append", "os.split", "range", "os.split", "pred_points[].detach().cpu", "pred_points[].detach"], "function", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.helper.create_dir", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.reconstruction.log_activation_stats", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.experiment_tools.visualize_pc"], ["", "def", "test_pc", "(", "step", ",", "model", ",", "loader", ",", "device", ",", "experiment_name", ",", "grams_path", ",", "save_pointclouds", "=", "True", ")", ":", "\n", "    ", "import", "experiment_tools", "\n", "\n", "img_dir", "=", "osp", ".", "join", "(", "\"dump\"", ",", "experiment_name", ",", "\"imgs\"", ")", "\n", "helper", ".", "create_dir", "(", "img_dir", ")", "\n", "model", ".", "eval", "(", ")", "\n", "losses", "=", "[", "]", "\n", "os", ".", "makedirs", "(", "grams_path", ",", "exist_ok", "=", "True", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "stats", "=", "{", "}", "\n", "graph_files", "=", "[", "]", "\n", "for", "batch_idx", ",", "batch", "in", "enumerate", "(", "loader", ")", ":", "\n", "            ", "print", "(", "'batch:'", ",", "batch_idx", ")", "\n", "pred_points", ",", "gt_points", ",", "embeddings", ",", "loss", ",", "bg", ",", "graph_files_batch", "=", "step", "(", "\n", "model", ",", "batch", ",", "batch_idx", ",", "device", "\n", ")", "\n", "if", "isinstance", "(", "model", ",", "Points2PointsAutoEnc", ")", ":", "\n", "                ", "all_activations", "=", "[", "model", ".", "encoder", ".", "activations", "]", "\n", "", "else", ":", "\n", "                ", "all_activations", "=", "[", "model", ".", "surf_encoder", ".", "activations", ",", "model", ".", "graph_encoder", ".", "activations", "]", "\n", "\n", "", "for", "activations", "in", "all_activations", ":", "\n", "                ", "batch_stats", "=", "log_activation_stats", "(", "bg", ",", "activations", ",", "model", ")", "\n", "for", "layer", ",", "batch_layer_stats", "in", "batch_stats", ".", "items", "(", ")", ":", "\n", "# with open(out_dir + '/' + layer + '_grams.txt', 'ab') as file:", "\n", "#     np.savetxt(file, batch_layer_stats)", "\n", "                    ", "if", "layer", "in", "stats", ".", "keys", "(", ")", ":", "\n", "                        ", "stats", "[", "layer", "]", ".", "append", "(", "batch_layer_stats", ")", "\n", "", "else", ":", "\n", "                        ", "stats", "[", "layer", "]", "=", "[", "batch_layer_stats", "]", "\n", "", "", "", "graph_files", "+=", "graph_files_batch", "\n", "if", "save_pointclouds", ":", "\n", "                ", "filename", "=", "[", "\n", "osp", ".", "split", "(", "\n", "loader", ".", "dataset", ".", "pc_files", "[", "loader", ".", "batch_size", "*", "batch_idx", "+", "i", "]", "\n", ")", "[", "1", "]", "\n", "for", "i", "in", "range", "(", "loader", ".", "batch_size", ")", "\n", "]", "\n", "experiment_tools", ".", "visualize_pc", "(", "pred_points", ",", "gt_points", ",", "filename", ",", "img_dir", ")", "\n", "csv_file", "=", "osp", ".", "join", "(", "\n", "img_dir", ",", "\n", "osp", ".", "split", "(", "loader", ".", "dataset", ".", "pc_files", "[", "loader", ".", "batch_size", "*", "batch_idx", "]", ")", "[", "1", "]", "\n", "+", "\".csv\"", ",", "\n", ")", "\n", "np", ".", "savetxt", "(", "\n", "csv_file", ",", "\n", "pred_points", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "delimiter", "=", "\",\"", ",", "\n", "header", "=", "\"x,y,z\"", ",", "\n", ")", "\n", "# print(f\"Saving csv: {csv_file}\")", "\n", "\n", "", "losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "", "", "avg_loss", "=", "np", ".", "mean", "(", "losses", ")", "\n", "print", "(", "'writing stats...'", ")", "\n", "all_stats", "=", "{", "}", "\n", "for", "layer", ",", "layer_stats", "in", "stats", ".", "items", "(", ")", ":", "\n", "        ", "all_stats", "[", "layer", "]", "=", "{", "\n", "'gram'", ":", "torch", ".", "cat", "(", "layer_stats", ")", ",", "\n", "}", "\n", "", "for", "i", ",", "(", "layer", ",", "layer_stats", ")", "in", "enumerate", "(", "all_stats", ".", "items", "(", ")", ")", ":", "\n", "        ", "grams", "=", "layer_stats", "[", "'gram'", "]", ".", "numpy", "(", ")", "\n", "np", ".", "save", "(", "grams_path", "+", "f'/{i}_{layer}_grams'", ",", "grams", ")", "\n", "\n", "", "all_graph_files", "=", "list", "(", "map", "(", "lambda", "file", ":", "file", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ",", "graph_files", ")", ")", "\n", "pd", ".", "DataFrame", "(", "all_graph_files", ")", ".", "to_csv", "(", "grams_path", "+", "'/graph_files.txt'", ",", "index", "=", "False", ",", "header", "=", "None", ")", "\n", "print", "(", "'done writing stats'", ")", "\n", "return", "avg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.reconstruction.test_img": [[267, 300], ["os.join", "helper.create_dir", "model.eval", "numpy.mean", "torch.no_grad", "torch.no_grad", "enumerate", "step", "losses.append", "torch.distributions.Bernoulli", "PIL.Image.fromarray", "im.convert.convert", "im.convert.save", "loss.item", "os.join", "pred_images[].permute().detach().cpu().squeeze().numpy", "pred_images[].permute().detach().cpu().squeeze", "os.split", "pred_images[].permute().detach().cpu", "pred_images[].permute().detach", "pred_images[].permute"], "function", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.helper.create_dir"], ["", "def", "test_img", "(", "step", ",", "model", ",", "loader", ",", "device", ",", "experiment_name", ",", "save_images", "=", "True", ")", ":", "\n", "    ", "import", "experiment_tools", "\n", "\n", "img_dir", "=", "osp", ".", "join", "(", "\"dump\"", ",", "experiment_name", ",", "\"imgs\"", ")", "\n", "helper", ".", "create_dir", "(", "img_dir", ")", "\n", "model", ".", "eval", "(", ")", "\n", "losses", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "batch", "in", "enumerate", "(", "loader", ")", ":", "\n", "            ", "pred_images", ",", "gt_images", ",", "embeddings", ",", "loss", "=", "step", "(", "\n", "model", ",", "batch", ",", "batch_idx", ",", "device", "\n", ")", "\n", "if", "save_images", ":", "\n", "                ", "p_r", "=", "dist", ".", "Bernoulli", "(", "logits", "=", "pred_images", ")", "\n", "pred_images", "=", "p_r", ".", "probs", "# > 0.2", "\n", "# print(p_r.probs , pred_out)", "\n", "# raise \"err\"", "\n", "# print(pred_out[0].permute(1,2,0).shape)", "\n", "im", "=", "Image", ".", "fromarray", "(", "\n", "pred_images", "[", "0", "]", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "squeeze", "(", "-", "1", ")", ".", "numpy", "(", ")", "\n", "*", "255.0", "\n", ")", "\n", "im", "=", "im", ".", "convert", "(", "\"RGB\"", ")", "\n", "im", ".", "save", "(", "\n", "osp", ".", "join", "(", "\n", "img_dir", ",", "\n", "f\"{osp.split(loader.dataset.image_files[loader.batch_size * batch_idx])[1]}.png\"", ",", "\n", ")", "\n", ")", "\n", "\n", "", "losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "", "", "avg_loss", "=", "np", ".", "mean", "(", "losses", ")", "\n", "return", "avg_loss", "\n", "", ""]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.font_util.valid_font": [[83, 88], ["name.lower", "str().lower", "str"], "function", ["None"], ["def", "valid_font", "(", "filename", ")", ":", "\n", "    ", "for", "name", "in", "INVALID_FONTS", ":", "\n", "        ", "if", "name", ".", "lower", "(", ")", "in", "str", "(", "filename", ")", ".", "lower", "(", ")", ":", "\n", "            ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.font_util.save_feature_to_csv": [[90, 106], ["feat[].numpy().reshape", "feat[].numpy().reshape", "matplotlib.figure", "plt.figure.add_subplot", "fig.add_subplot.scatter", "matplotlib.show", "numpy.savetxt", "len", "feat[].numpy", "feat[].numpy"], "function", ["None"], ["", "def", "save_feature_to_csv", "(", "feat", ":", "torch", ".", "Tensor", ",", "filename", ")", ":", "\n", "    ", "\"\"\"\n    Save loaded feature to csv file to visualize sampled points\n    :param feat Features loaded from *.feat file of shape [#faces, #u, #v, 10]\n    :param filename Output csv filename\n    \"\"\"", "\n", "assert", "len", "(", "feat", ".", "shape", ")", "==", "4", "# faces x #u x #v x 10", "\n", "pts", "=", "feat", "[", ":", ",", ":", ",", ":", ",", ":", "3", "]", ".", "numpy", "(", ")", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", "\n", "mask", "=", "feat", "[", ":", ",", ":", ",", ":", ",", "6", "]", ".", "numpy", "(", ")", ".", "reshape", "(", "-", "1", ")", "\n", "point_indices_inside_faces", "=", "mask", "==", "1", "\n", "pts", "=", "pts", "[", "point_indices_inside_faces", ",", ":", "]", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ",", "projection", "=", "\"3d\"", ")", "\n", "ax", ".", "scatter", "(", "pts", "[", ":", ",", "0", "]", ",", "pts", "[", ":", ",", "1", "]", ",", "pts", "[", ":", ",", "2", "]", ")", "\n", "plt", ".", "show", "(", ")", "\n", "np", ".", "savetxt", "(", "filename", ",", "pts", ",", "delimiter", "=", "\",\"", ",", "header", "=", "\"x,y,z\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.font_util.bounding_box_uvsolid": [[108, 114], ["inp[].reshape", "inp[].reshape", "font_util.bounding_box_pointcloud"], "function", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.font_util.bounding_box_pointcloud"], ["", "def", "bounding_box_uvsolid", "(", "inp", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "pts", "=", "inp", "[", ":", ",", ":", ",", ":", ",", ":", "3", "]", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", "\n", "mask", "=", "inp", "[", ":", ",", ":", ",", ":", ",", "6", "]", ".", "reshape", "(", "-", "1", ")", "\n", "point_indices_inside_faces", "=", "mask", "==", "1", "\n", "pts", "=", "pts", "[", "point_indices_inside_faces", ",", ":", "]", "\n", "return", "bounding_box_pointcloud", "(", "pts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.font_util.bounding_box_pointcloud": [[116, 122], ["torch.tensor", "x.min", "y.min", "z.min", "x.max", "y.max", "z.max"], "function", ["None"], ["", "def", "bounding_box_pointcloud", "(", "pts", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "x", "=", "pts", "[", ":", ",", "0", "]", "\n", "y", "=", "pts", "[", ":", ",", "1", "]", "\n", "z", "=", "pts", "[", ":", ",", "2", "]", "\n", "box", "=", "[", "[", "x", ".", "min", "(", ")", ",", "y", ".", "min", "(", ")", ",", "z", ".", "min", "(", ")", "]", ",", "[", "x", ".", "max", "(", ")", ",", "y", ".", "max", "(", ")", ",", "z", ".", "max", "(", ")", "]", "]", "\n", "return", "torch", ".", "tensor", "(", "box", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.font_util.center_and_scale_uvsolid": [[124, 134], ["font_util.bounding_box_uvsolid", "max"], "function", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.font_util.bounding_box_uvsolid"], ["", "def", "center_and_scale_uvsolid", "(", "inp", ":", "torch", ".", "Tensor", ",", "return_center_scale", "=", "False", ")", ":", "\n", "    ", "bbox", "=", "bounding_box_uvsolid", "(", "inp", ")", "\n", "diag", "=", "bbox", "[", "1", "]", "-", "bbox", "[", "0", "]", "\n", "scale", "=", "2.0", "/", "max", "(", "diag", "[", "0", "]", ",", "diag", "[", "1", "]", ",", "diag", "[", "2", "]", ")", "\n", "center", "=", "0.5", "*", "(", "bbox", "[", "0", "]", "+", "bbox", "[", "1", "]", ")", "\n", "inp", "[", ":", ",", ":", ",", ":", ",", ":", "3", "]", "-=", "center", "\n", "inp", "[", ":", ",", ":", ",", ":", ",", ":", "3", "]", "*=", "scale", "\n", "if", "return_center_scale", ":", "\n", "        ", "return", "inp", ",", "center", ",", "scale", "\n", "", "return", "inp", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.font_util.center_and_scale_pointcloud": [[136, 146], ["font_util.bounding_box_pointcloud", "max"], "function", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.font_util.bounding_box_pointcloud"], ["", "def", "center_and_scale_pointcloud", "(", "inp", ":", "torch", ".", "Tensor", ",", "return_center_scale", "=", "False", ")", ":", "\n", "    ", "bbox", "=", "bounding_box_pointcloud", "(", "inp", ")", "\n", "diag", "=", "bbox", "[", "1", "]", "-", "bbox", "[", "0", "]", "\n", "scale", "=", "2.0", "/", "max", "(", "diag", "[", "0", "]", ",", "diag", "[", "1", "]", ",", "diag", "[", "2", "]", ")", "\n", "center", "=", "0.5", "*", "(", "bbox", "[", "0", "]", "+", "bbox", "[", "1", "]", ")", "\n", "inp", "[", ":", ",", ":", "3", "]", "-=", "center", "\n", "inp", "[", ":", ",", ":", "3", "]", "*=", "scale", "\n", "if", "return_center_scale", ":", "\n", "        ", "return", "inp", ",", "center", ",", "scale", "\n", "", "return", "inp", "\n", "", ""]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.chamfer.ChamferLoss.__init__": [[7, 10], ["torch.Module.__init__", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.classifier.NonLinearClassifier.__init__"], ["\t", "def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "super", "(", "ChamferLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.chamfer.ChamferLoss.forward": [[11, 19], ["chamfer.ChamferLoss.batch_pairwise_dist", "torch.min", "torch.min", "torch.min", "torch.min", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.min", "torch.min", "torch.min", "torch.min", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.chamfer.ChamferLoss.batch_pairwise_dist"], ["", "def", "forward", "(", "self", ",", "preds", ",", "gts", ")", ":", "\n", "\t\t", "P", "=", "self", ".", "batch_pairwise_dist", "(", "gts", ",", "preds", ")", "\n", "mins", ",", "_", "=", "torch", ".", "min", "(", "P", ",", "1", ")", "\n", "loss_1", "=", "torch", ".", "mean", "(", "mins", ")", "\n", "mins", ",", "_", "=", "torch", ".", "min", "(", "P", ",", "2", ")", "\n", "loss_2", "=", "torch", ".", "mean", "(", "mins", ")", "\n", "\n", "return", "0.5", "*", "(", "loss_1", "+", "loss_2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.chamfer.ChamferLoss.batch_pairwise_dist": [[21, 39], ["x.size", "y.size", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.arange().type", "torch.arange().type", "torch.arange().type", "torch.arange().type", "torch.arange().type", "torch.arange().type", "torch.arange().type", "torch.arange().type", "xx[].unsqueeze().expand_as", "yy[].unsqueeze().expand_as", "x.transpose", "y.transpose", "y.transpose", "torch.bmm.transpose", "torch.bmm.transpose", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "xx[].unsqueeze", "yy[].unsqueeze", "xx[].unsqueeze().expand_as.transpose"], "methods", ["None"], ["", "def", "batch_pairwise_dist", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "\t\t", "bs", ",", "num_points_x", ",", "points_dim", "=", "x", ".", "size", "(", ")", "\n", "_", ",", "num_points_y", ",", "_", "=", "y", ".", "size", "(", ")", "\n", "y", "=", "y", "[", ":", ",", ":", ",", ":", "3", "]", "\n", "xx", "=", "torch", ".", "bmm", "(", "x", ",", "x", ".", "transpose", "(", "2", ",", "1", ")", ")", "\n", "yy", "=", "torch", ".", "bmm", "(", "y", ",", "y", ".", "transpose", "(", "2", ",", "1", ")", ")", "\n", "zz", "=", "torch", ".", "bmm", "(", "x", ",", "y", ".", "transpose", "(", "2", ",", "1", ")", ")", "\n", "if", "self", ".", "use_cuda", ":", "\n", "\t\t\t", "dtype", "=", "torch", ".", "cuda", ".", "LongTensor", "\n", "", "else", ":", "\n", "\t\t\t", "dtype", "=", "torch", ".", "LongTensor", "\n", "", "diag_ind_x", "=", "torch", ".", "arange", "(", "0", ",", "num_points_x", ")", ".", "type", "(", "dtype", ")", "\n", "diag_ind_y", "=", "torch", ".", "arange", "(", "0", ",", "num_points_y", ")", ".", "type", "(", "dtype", ")", "\n", "#brk()", "\n", "rx", "=", "xx", "[", ":", ",", "diag_ind_x", ",", "diag_ind_x", "]", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "zz", ".", "transpose", "(", "2", ",", "1", ")", ")", "\n", "ry", "=", "yy", "[", ":", ",", "diag_ind_y", ",", "diag_ind_y", "]", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "zz", ")", "\n", "P", "=", "(", "rx", ".", "transpose", "(", "2", ",", "1", ")", "+", "ry", "-", "2", "*", "zz", ")", "\n", "return", "P", "", "", "", ""]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.utils.Grams.__init__": [[21, 29], ["sorted", "list", "list", "map", "filter", "os.listdir", "filename.split"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "grams_root", ",", "label_map", "=", "None", ")", ":", "\n", "        ", "self", ".", "data_root", "=", "grams_root", "\n", "self", ".", "file_names", "=", "sorted", "(", "list", "(", "filter", "(", "lambda", "file_name", ":", "file_name", "[", "-", "4", ":", "]", "==", "'.npy'", ",", "os", ".", "listdir", "(", "grams_root", ")", ")", ")", ")", "\n", "self", ".", "layer_names", "=", "list", "(", "map", "(", "lambda", "filename", ":", "'_'", ".", "join", "(", "filename", ".", "split", "(", "'_'", ")", "[", ":", "-", "1", "]", ")", ",", "self", ".", "file_names", ")", ")", "\n", "self", ".", "_label_map", "=", "label_map", "\n", "self", ".", "_grams", "=", "None", "\n", "self", ".", "_graph_files", "=", "None", "\n", "self", ".", "_labels", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.utils.Grams.graph_files": [[30, 35], ["[].tolist", "pandas.read_csv", "os.path.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "graph_files", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_graph_files", "is", "None", ":", "\n", "            ", "self", ".", "_graph_files", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_root", ",", "'graph_files.txt'", ")", ",", "header", "=", "None", ")", "[", "0", "]", ".", "tolist", "(", ")", "\n", "", "return", "self", ".", "_graph_files", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.utils.Grams.labels": [[36, 46], ["map", "pandas.DataFrame", "list", "map", "df[].astype"], "methods", ["None"], ["", "@", "property", "\n", "def", "labels", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_labels", "is", "None", ":", "\n", "            ", "names", "=", "map", "(", "lambda", "file", ":", "file", "[", "2", ":", "-", "10", "]", ",", "self", ".", "graph_files", ")", "\n", "if", "self", ".", "_label_map", "is", "None", ":", "\n", "                ", "df", "=", "pd", ".", "DataFrame", "(", "names", ",", "columns", "=", "[", "'name'", "]", ")", "\n", "self", ".", "_labels", "=", "df", "[", "'name'", "]", ".", "astype", "(", "'category'", ")", ".", "cat", ".", "codes", ".", "values", "\n", "", "else", ":", "\n", "                ", "self", ".", "_labels", "=", "list", "(", "map", "(", "self", ".", "_label_map", ",", "names", ")", ")", "\n", "", "", "return", "self", ".", "_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.utils.Grams.grams": [[47, 53], ["map", "list", "map", "os.path.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "grams", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_grams", "is", "None", ":", "\n", "            ", "layer_paths", "=", "map", "(", "lambda", "layer_name", ":", "os", ".", "path", ".", "join", "(", "self", ".", "data_root", ",", "layer_name", ")", ",", "self", ".", "file_names", ")", "\n", "self", ".", "_grams", "=", "list", "(", "map", "(", "np", ".", "load", ",", "layer_paths", ")", ")", "\n", "", "return", "self", ".", "_grams", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.utils.Grams.__getitem__": [[54, 56], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "return", "self", ".", "grams", "[", "item", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.utils.Grams.__len__": [[57, 59], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "grams", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.utils.ImageLoader.__init__": [[62, 70], ["[].tolist", "map", "numpy.array", "list", "map", "pandas.read_csv", "os.path.join", "os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "grams_root", ",", "img_root", ",", "img_type", "=", "'png'", ",", "black_to_white", "=", "False", ")", ":", "\n", "        ", "self", ".", "data_root", "=", "grams_root", "\n", "self", ".", "img_root", "=", "img_root", "\n", "self", ".", "img_type", "=", "img_type", "\n", "self", ".", "black_to_white", "=", "black_to_white", "\n", "graph_files", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_root", ",", "'graph_files.txt'", ")", ",", "header", "=", "None", ")", "[", "0", "]", ".", "tolist", "(", ")", "\n", "img_files", "=", "map", "(", "lambda", "file_name", ":", "file_name", "[", ":", "-", "3", "]", "+", "self", ".", "img_type", ",", "graph_files", ")", "\n", "self", ".", "img_paths", "=", "np", ".", "array", "(", "list", "(", "map", "(", "lambda", "img_name", ":", "os", ".", "path", ".", "join", "(", "self", ".", "img_root", ",", "img_name", ")", ",", "img_files", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.utils.ImageLoader.__getitem__": [[71, 75], ["utils.ImageLoader.img_paths[].flatten", "map", "list", "map", "png.convert"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "img_paths", "=", "self", ".", "img_paths", "[", "item", "]", ".", "flatten", "(", ")", "\n", "pngs", "=", "map", "(", "self", ".", "open_image", ",", "img_paths", ")", "\n", "return", "list", "(", "map", "(", "lambda", "png", ":", "png", ".", "convert", "(", "'RGB'", ")", ",", "pngs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.utils.ImageLoader.open_image": [[76, 99], ["PIL.Image.open", "numpy.array", "numpy.where", "numpy.where", "PIL.Image.fromarray", "PIL.ImageEnhance.Brightness", "PIL.ImageEnhance.Brightness.enhance", "print", "PIL.Image.new", "PIL.Image.new.convert"], "methods", ["None"], ["", "def", "open_image", "(", "self", ",", "img_path", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "img", "=", "PIL", ".", "Image", ".", "open", "(", "img_path", ")", "\n", "if", "self", ".", "black_to_white", ":", "\n", "                ", "arr", "=", "np", ".", "array", "(", "img", ".", "convert", "(", "'RGB'", ")", ")", "\n", "\n", "black_x", ",", "black_y", "=", "np", ".", "where", "(", "(", "arr", "==", "[", "0", ",", "0", ",", "0", "]", ")", ".", "all", "(", "axis", "=", "-", "1", ")", ")", "\n", "green_x", ",", "green_y", "=", "np", ".", "where", "(", "(", "arr", "==", "[", "0", ",", "255", ",", "0", "]", ")", ".", "all", "(", "axis", "=", "-", "1", ")", ")", "\n", "\n", "arr", "=", "(", "arr", "+", "50", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "arr", "[", "black_x", ",", "black_y", ",", ":", "]", "=", "[", "255", ",", "255", ",", "255", "]", "\n", "arr", "[", "green_x", ",", "green_y", ",", ":", "]", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "\n", "img", "=", "PIL", ".", "Image", ".", "fromarray", "(", "arr", ")", "\n", "", "else", ":", "\n", "                ", "enhancer", "=", "ImageEnhance", ".", "Brightness", "(", "img", ")", "\n", "factor", "=", "1.9", "# brightens the image", "\n", "img", "=", "enhancer", ".", "enhance", "(", "factor", ")", "\n", "", "", "except", "FileNotFoundError", "as", "e", ":", "\n", "            ", "print", "(", "f'WARNING cannot find {img_path}, using blank image - {e}'", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "img", "=", "PIL", ".", "Image", ".", "new", "(", "mode", "=", "'P'", ",", "size", "=", "(", "512", ",", "512", ")", ",", "color", "=", "(", "255", ",", "255", ",", "255", ")", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.utils.gram_loss": [[101, 111], ["range", "len", "sklearn.metrics.pairwise.paired_cosine_distances", "sklearn.metrics.pairwise.paired_euclidean_distances"], "function", ["None"], ["", "", "def", "gram_loss", "(", "grams", ",", "id_a", ",", "id_b", ",", "weights", ",", "metric", "=", "'cosine'", ")", ":", "\n", "    ", "loss", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "grams", ")", ")", ":", "\n", "        ", "a", "=", "grams", "[", "i", "]", "[", "id_a", "]", "\n", "b", "=", "grams", "[", "i", "]", "[", "id_b", "]", "\n", "if", "metric", "==", "'cosine'", ":", "\n", "            ", "loss", "+=", "weights", "[", "i", "]", "*", "paired_cosine_distances", "(", "a", "[", "None", ",", ":", "]", ",", "b", "[", "None", ",", ":", "]", ")", "\n", "", "elif", "metric", "==", "'euclidean'", ":", "\n", "            ", "loss", "+=", "weights", "[", "i", "]", "*", "paired_euclidean_distances", "(", "a", "[", "None", ",", ":", "]", ",", "b", "[", "None", ",", ":", "]", ")", "\n", "", "", "return", "id_b", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.utils.top_k_neighbors": [[113, 132], ["torch.stack().detach().cpu().numpy", "torch.stack().detach().cpu().numpy", "weighted.sum", "torch.stack().detach().cpu().numpy.append", "torch.stack().detach().cpu().numpy.append", "torch.argsort", "torch.stack().detach().cpu", "torch.stack().detach().cpu", "torch.cosine_similarity", "torch.norm", "Exception", "torch.stack().detach", "torch.stack().detach", "torch.stack", "torch.stack"], "function", ["None"], ["", "def", "top_k_neighbors", "(", "X", ",", "weights", ",", "queries", ",", "k", ",", "metric", "=", "'cosine'", ")", ":", "\n", "    ", "all_neighbors", "=", "[", "]", "\n", "all_distances", "=", "[", "]", "\n", "for", "query", "in", "queries", ":", "\n", "        ", "q", "=", "X", "[", "query", "]", "\n", "if", "metric", "==", "'cosine'", ":", "\n", "            ", "layerwise_distances", "=", "1", "-", "torch", ".", "cosine_similarity", "(", "q", "[", "None", ",", ":", ",", ":", "]", ",", "X", ",", "dim", "=", "-", "1", ")", "\n", "", "elif", "metric", "==", "'euclidean'", ":", "\n", "            ", "layerwise_distances", "=", "torch", ".", "norm", "(", "q", "[", "None", ",", ":", ",", ":", "]", "-", "X", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "f'{metric} not found - use \"cosine\" or \"euclidean\"'", ")", "\n", "", "weighted", "=", "layerwise_distances", "*", "weights", "[", "None", ",", ":", "]", "\n", "distances", "=", "weighted", ".", "sum", "(", "-", "1", ")", "# type: torch.Tensor", "\n", "neighbors", "=", "torch", ".", "argsort", "(", "distances", ")", "[", ":", "k", "]", "\n", "all_neighbors", ".", "append", "(", "neighbors", ")", "\n", "all_distances", ".", "append", "(", "distances", "[", "neighbors", "]", ")", "\n", "", "all_neighbors", "=", "torch", ".", "stack", "(", "all_neighbors", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "all_distances", "=", "torch", ".", "stack", "(", "all_distances", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "return", "all_neighbors", ",", "all_distances", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.utils.pad_grams": [[134, 140], ["torch.zeros", "torch.tensor", "torch.stack", "torch.stack.permute", "len", "X[].copy", "torch.tensor", "gram.copy"], "function", ["None"], ["", "def", "pad_grams", "(", "X", ")", ":", "\n", "    ", "grams_0", "=", "torch", ".", "zeros", "(", "len", "(", "X", "[", "0", "]", ")", ",", "70", ")", "\n", "grams_0", "[", ":", ",", ":", "X", "[", "0", "]", ".", "shape", "[", "-", "1", "]", "]", "=", "torch", ".", "tensor", "(", "X", "[", "0", "]", ".", "copy", "(", ")", ")", "\n", "grams_padded", "=", "torch", ".", "stack", "(", "[", "grams_0", "]", "+", "[", "torch", ".", "tensor", "(", "gram", ".", "copy", "(", ")", ")", "for", "gram", "in", "X", "[", "1", ":", "]", "]", ")", "\n", "X", "=", "grams_padded", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "# shape: N x 7 x 70", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.utils.get_pca_70": [[142, 161], ["os.path.exists", "zip", "collections.OrderedDict", "open", "pickle.load", "sorted", "open", "pickle.dump", "print", "sklearn.decomposition.PCA", "sklearn.decomposition.PCA.fit_transform", "pickle.load.items"], "function", ["None"], ["", "def", "get_pca_70", "(", "grams", ",", "cache_file", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "cache_file", ")", ":", "\n", "        ", "with", "open", "(", "cache_file", ",", "'rb'", ")", "as", "file", ":", "\n", "            ", "pca_70", "=", "pickle", ".", "load", "(", "file", ")", "\n", "", "", "else", ":", "\n", "        ", "pca_70", "=", "{", "}", "\n", "for", "layer_name", ",", "gram", "in", "zip", "(", "grams", ".", "layer_names", ",", "grams", ")", ":", "\n", "            ", "if", "verbose", ":", "\n", "                ", "print", "(", "f'pca: {layer_name}...'", ")", "\n", "", "if", "gram", ".", "shape", "[", "-", "1", "]", "<=", "70", ":", "\n", "                ", "pca_70", "[", "layer_name", "]", "=", "gram", "\n", "", "else", ":", "\n", "                ", "pca", "=", "PCA", "(", "n_components", "=", "70", ")", "\n", "pca_70", "[", "layer_name", "]", "=", "pca", ".", "fit_transform", "(", "gram", ")", "\n", "", "", "pca_70", "=", "OrderedDict", "(", "sorted", "(", "pca_70", ".", "items", "(", ")", ")", ")", "\n", "with", "open", "(", "cache_file", ",", "'wb'", ")", "as", "file", ":", "\n", "            ", "pickle", ".", "dump", "(", "pca_70", ",", "file", ")", "\n", "\n", "", "", "return", "pca_70", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.utils.dataset_selector": [[163, 176], ["streamlit.sidebar.selectbox", "os.path.join", "streamlit.sidebar.selectbox", "streamlit.sidebar.selectbox", "os.path.join", "os.listdir", "os.listdir", "os.path.join", "os.path.join", "glob.glob", "pathlib.Path"], "function", ["None"], ["", "def", "dataset_selector", "(", "project_root", ")", ":", "\n", "    ", "dataset_name", "=", "st", ".", "sidebar", ".", "selectbox", "(", "label", "=", "'Dataset'", ",", "\n", "options", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "project_root", ",", "'data'", ")", ")", ")", "\n", "data_root", "=", "os", ".", "path", ".", "join", "(", "project_root", ",", "'data'", ",", "dataset_name", ")", "\n", "\n", "model_name", "=", "st", ".", "sidebar", ".", "selectbox", "(", "label", "=", "'Model'", ",", "\n", "options", "=", "[", "Path", "(", "f", ")", ".", "stem", "[", ":", "-", "6", "]", "for", "f", "in", "glob", "(", "f'{data_root}//*_grams'", ",", "recursive", "=", "False", ")", "]", ")", "\n", "\n", "grams_name", "=", "st", ".", "sidebar", ".", "selectbox", "(", "label", "=", "'Grams'", ",", "\n", "options", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "f'{model_name}_grams'", ")", ")", ")", "\n", "\n", "grams_root", "=", "os", ".", "path", ".", "join", "(", "data_root", ",", "f'{model_name}_grams'", ",", "grams_name", ")", "\n", "return", "data_root", ",", "dataset_name", ",", "model_name", ",", "grams_root", ",", "grams_name", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.utils.plot": [[178, 205], ["matplotlib.pyplot.subplots", "ax.imshow", "ax.set_xticks", "ax.set_xticklabels", "fig.set_size_inches", "fig.tight_layout", "ax.set_yticks", "ax.set_yticklabels", "ax.set_yticks", "numpy.arange", "numpy.arange", "numpy.transpose", "list", "zip", "list", "len", "len", "map", "ax.annotate", "numpy.arange", "map", "numpy.tile", "numpy.repeat", "distances.tolist", "numpy.arange", "numpy.arange", "len", "len", "len"], "function", ["None"], ["", "def", "plot", "(", "grid_array", ",", "query_idx", ",", "img_size", ",", "k", ",", "distances", "=", "None", ",", "font_size", "=", "24", ")", ":", "\n", "    ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "# type: plt.Figure, plt.Axes", "\n", "ax", ".", "imshow", "(", "grid_array", ")", "\n", "\n", "ax", ".", "set_xticks", "(", "np", ".", "arange", "(", "k", ")", "*", "(", "img_size", "+", "2", ")", "+", "(", "img_size", "/", "2", ")", ")", "\n", "ax", ".", "set_xticklabels", "(", "[", "'Q'", "]", "+", "list", "(", "map", "(", "str", ",", "np", ".", "arange", "(", "1", ",", "k", ")", ")", ")", ",", "Fontsize", "=", "font_size", ")", "\n", "\n", "if", "query_idx", "is", "not", "None", "and", "len", "(", "query_idx", ")", ">", "0", ":", "\n", "        ", "ax", ".", "set_yticks", "(", "np", ".", "arange", "(", "len", "(", "query_idx", ")", ")", "*", "(", "img_size", "+", "2", ")", "+", "(", "img_size", "/", "2", ")", ")", "\n", "ax", ".", "set_yticklabels", "(", "query_idx", "if", "query_idx", "is", "not", "None", "else", "None", ",", "Fontsize", "=", "font_size", ")", "\n", "", "else", ":", "\n", "        ", "ax", ".", "set_yticks", "(", "[", "]", ")", "\n", "\n", "", "if", "distances", "is", "not", "None", ":", "\n", "        ", "x", "=", "np", ".", "arange", "(", "k", ")", "\n", "y", "=", "np", ".", "arange", "(", "len", "(", "distances", ")", ")", "\n", "xy", "=", "np", ".", "transpose", "(", "[", "np", ".", "tile", "(", "x", ",", "len", "(", "y", ")", ")", ",", "np", ".", "repeat", "(", "y", ",", "len", "(", "x", ")", ")", "]", ")", "\n", "text", "=", "list", "(", "map", "(", "lambda", "d", ":", "f'{d:.2f}'", ",", "distances", ".", "tolist", "(", ")", ")", ")", "\n", "\n", "space", "=", "img_size", "\n", "for", "t", ",", "pos", "in", "zip", "(", "text", ",", "xy", ")", ":", "\n", "            ", "x", ",", "y", "=", "pos", "\n", "ax", ".", "annotate", "(", "t", ",", "(", "(", "x", "*", "space", "+", ".6", "*", "space", ")", ",", "(", "y", "*", "space", "+", ".9", "*", "space", ")", ")", ",", "color", "=", "'red'", ",", "Fontsize", "=", "font_size", ")", "\n", "\n", "", "", "fig", ".", "set_size_inches", "(", "21", ",", "15", ")", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.utils.warn_and_get_pca70": [[207, 225], ["os.makedirs", "os.path.join", "os.path.join", "os.path.exists", "streamlit.write", "streamlit.write", "streamlit.write", "streamlit.write", "streamlit.button", "utils.get_pca_70", "utils.get_pca_70"], "function", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.utils.get_pca_70", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.utils.get_pca_70"], ["", "def", "warn_and_get_pca70", "(", "file_dir", ",", "dataset_name", ",", "model_name", ",", "grams_name", ",", "grams", ")", ":", "\n", "    ", "pca_70", "=", "None", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "file_dir", ",", "'cache'", ")", ",", "exist_ok", "=", "True", ")", "\n", "cache_file", "=", "os", ".", "path", ".", "join", "(", "file_dir", ",", "'cache'", ",", "f'{dataset_name}-{model_name}-{grams_name}-pca_70'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cache_file", ")", ":", "\n", "        ", "st", ".", "write", "(", "'To visualize the query results, you will first need to perform PCA on the Gram matrices.'", ")", "\n", "st", ".", "write", "(", "'You will need to do this only once.'", ")", "\n", "st", ".", "write", "(", "'For SolidLETTERS this should take less than a minute, and require no more then 1GB memory.'", ")", "\n", "st", ".", "write", "(", "'For ABC this will require approx. 36GB memory, and will take a few minutes.'", ")", "\n", "if", "st", ".", "button", "(", "label", "=", "'Start'", ")", ":", "\n", "            ", "pca_70", "=", "get_pca_70", "(", "grams", "=", "grams", ",", "\n", "cache_file", "=", "cache_file", ",", "\n", "verbose", "=", "True", ")", "\n", "", "", "else", ":", "\n", "        ", "pca_70", "=", "get_pca_70", "(", "grams", "=", "grams", ",", "\n", "cache_file", "=", "cache_file", ",", "\n", "verbose", "=", "True", ")", "\n", "", "return", "pca_70", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.utils.probe_score": [[227, 248], ["print", "sklearn.linear_model.LogisticRegressionCV", "sklearn.linear_model.LogisticRegressionCV.fit", "sklearn.linear_model.LogisticRegressionCV.scores_.items", "sklearn.linear_model.LogisticRegressionCV.scores_.items", "numpy.mean", "v.mean", "v.mean.argmax", "scores.append", "errs.append", "numpy.mean", "numpy.mean", "v.mean", "scores.append", "v.mean.max", "v[].std", "v.mean.max"], "function", ["None"], ["", "def", "probe_score", "(", "stat", ",", "reduced", ",", "labels", ",", "err", "=", "False", ",", "balanced", "=", "True", ")", ":", "\n", "    ", "print", "(", "f'Probing {stat}...'", ")", "\n", "model", "=", "LogisticRegressionCV", "(", "cv", "=", "5", ",", "\n", "class_weight", "=", "'balanced'", "if", "balanced", "else", "None", ",", "\n", "scoring", "=", "'accuracy'", ",", "\n", "max_iter", "=", "1000", ")", "\n", "model", ".", "fit", "(", "reduced", ",", "labels", ")", "\n", "scores", "=", "[", "]", "\n", "if", "err", ":", "\n", "        ", "errs", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "model", ".", "scores_", ".", "items", "(", ")", ":", "\n", "            ", "c_scores", "=", "v", ".", "mean", "(", "axis", "=", "0", ")", "\n", "best_c", "=", "c_scores", ".", "argmax", "(", ")", "\n", "scores", ".", "append", "(", "c_scores", ".", "max", "(", ")", ")", "\n", "errs", ".", "append", "(", "v", "[", ":", ",", "best_c", "]", ".", "std", "(", ")", ")", "\n", "", "return", "np", ".", "mean", "(", "scores", ")", ",", "np", ".", "mean", "(", "errs", ")", "\n", "", "else", ":", "\n", "        ", "for", "k", ",", "v", "in", "model", ".", "scores_", ".", "items", "(", ")", ":", "\n", "            ", "c_scores", "=", "v", ".", "mean", "(", "axis", "=", "0", ")", "\n", "scores", ".", "append", "(", "c_scores", ".", "max", "(", ")", ")", "\n", "", "return", "np", ".", "mean", "(", "scores", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.abcdataset.ABCDataset.__init__": [[27, 72], ["pathlib.Path", "list", "random.seed", "print", "print", "pathlib.Path.glob", "int", "random.sample", "int", "random.sample", "print", "int", "random.sample", "len", "len", "int", "random.sample", "len", "len", "len", "dgl.data.utils.load_graphs", "len", "str"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "root_dir", ",", "\n", "split", "=", "\"train\"", ",", "\n", "size_percentage", "=", "None", ",", "\n", "in_memory", "=", "True", ",", "\n", "apply_square_symmetry", "=", "0.0", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        ABC dataset with both solids only\n        :param root_dir: Root path to the dataset\n        :param split: string Whether train, val, test or all (entire) set\n        :param size_percentage: Percentage of data to load per category\n        :param in_memory: Whether to keep the entire dataset in memory (This is always done in Windows)\n        :param apply_square_symmetry: Probability of randomly applying a square symmetry transform on the input surface grid (default: 0.0)\n        \"\"\"", "\n", "assert", "split", "in", "(", "\"train\"", ",", "\"val\"", ",", "\"test\"", ",", "\"all\"", ")", "\n", "path", "=", "pathlib", ".", "Path", "(", "root_dir", ")", "\n", "self", ".", "graph_files", "=", "list", "(", "path", ".", "glob", "(", "\"*.bin\"", ")", ")", "\n", "self", ".", "labels", "=", "[", "]", "\n", "\n", "self", ".", "in_memory", "=", "in_memory", "\n", "\n", "random", ".", "seed", "(", "1200", ")", "\n", "if", "split", "==", "\"train\"", ":", "\n", "            ", "k", "=", "int", "(", "0.6", "*", "len", "(", "self", ".", "graph_files", ")", ")", "\n", "self", ".", "graph_files", "=", "random", ".", "sample", "(", "self", ".", "graph_files", ",", "k", ")", "\n", "", "elif", "split", "==", "\"val\"", ":", "\n", "            ", "k", "=", "int", "(", "0.2", "*", "len", "(", "self", ".", "graph_files", ")", ")", "\n", "self", ".", "graph_files", "=", "random", ".", "sample", "(", "self", ".", "graph_files", ",", "k", ")", "\n", "", "elif", "split", "==", "\"test\"", ":", "\n", "            ", "k", "=", "int", "(", "0.2", "*", "len", "(", "self", ".", "graph_files", ")", ")", "\n", "self", ".", "graph_files", "=", "random", ".", "sample", "(", "self", ".", "graph_files", ",", "k", ")", "\n", "\n", "", "print", "(", "\"Found {} {} data.\"", ".", "format", "(", "len", "(", "self", ".", "graph_files", ")", ",", "split", ")", ")", "\n", "\n", "if", "size_percentage", "is", "not", "None", ":", "\n", "            ", "k", "=", "int", "(", "size_percentage", "*", "len", "(", "self", ".", "graph_files", ")", ")", "\n", "self", ".", "graph_files", "=", "random", ".", "sample", "(", "self", ".", "graph_files", ",", "k", ")", "\n", "\n", "", "if", "in_memory", ":", "\n", "            ", "print", "(", "\"Windows OS detected, storing dataset in memory\"", ")", "\n", "self", ".", "graphs", "=", "[", "load_graphs", "(", "str", "(", "fn", ")", ")", "[", "0", "]", "[", "0", "]", "for", "fn", "in", "self", ".", "graph_files", "]", "\n", "", "print", "(", "f\"Done loading {len(self.graph_files)} data\"", ")", "\n", "self", ".", "apply_square_symmetry", "=", "apply_square_symmetry", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.abcdataset.ABCDataset.__len__": [[73, 75], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "graph_files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.abcdataset.ABCDataset.__getitem__": [[76, 93], ["str", "random.uniform", "random.uniform", "random.uniform", "abcdataset.ABCDataset.graph_files[].absolute", "graph.ndata[].transpose", "torch.flip", "torch.flip", "dgl.data.utils.load_graphs"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "in_memory", ":", "\n", "            ", "graph", "=", "self", ".", "graphs", "[", "idx", "]", "\n", "", "else", ":", "\n", "            ", "graph_file", "=", "str", "(", "self", ".", "graph_files", "[", "idx", "]", ".", "absolute", "(", ")", ")", "\n", "graph", "=", "load_graphs", "(", "graph_file", ")", "[", "0", "]", "[", "0", "]", "\n", "", "if", "self", ".", "apply_square_symmetry", ">", "0.0", ":", "\n", "            ", "prob_r", "=", "random", ".", "uniform", "(", "0.0", ",", "1.0", ")", "\n", "if", "prob_r", "<", "self", ".", "apply_square_symmetry", ":", "\n", "                ", "graph", ".", "ndata", "[", "\"x\"", "]", "=", "graph", ".", "ndata", "[", "\"x\"", "]", ".", "transpose", "(", "1", ",", "2", ")", "\n", "", "prob_u", "=", "random", ".", "uniform", "(", "0.0", ",", "1.0", ")", "\n", "if", "prob_u", "<", "self", ".", "apply_square_symmetry", ":", "\n", "                ", "graph", ".", "ndata", "[", "\"x\"", "]", "=", "torch", ".", "flip", "(", "graph", ".", "ndata", "[", "\"x\"", "]", ",", "dims", "=", "[", "1", "]", ")", "\n", "", "prob_v", "=", "random", ".", "uniform", "(", "0.0", ",", "1.0", ")", "\n", "if", "prob_v", "<", "self", ".", "apply_square_symmetry", ":", "\n", "                ", "graph", ".", "ndata", "[", "\"x\"", "]", "=", "torch", ".", "flip", "(", "graph", ".", "ndata", "[", "\"x\"", "]", ",", "dims", "=", "[", "2", "]", ")", "\n", "", "", "return", "graph", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.abcdataset.ABCDataset.feature_indices": [[94, 105], ["None"], "methods", ["None"], ["", "def", "feature_indices", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns a dictionary of mappings from the name of features to the channels containing them\n        \"\"\"", "\n", "return", "{", "\n", "\"xyz\"", ":", "(", "0", ",", "1", ",", "2", ")", ",", "\n", "\"normals\"", ":", "(", "3", ",", "4", ",", "5", ")", ",", "\n", "\"mask\"", ":", "(", "6", ",", ")", ",", "\n", "\"E\"", ":", "(", "7", ",", ")", ",", "\n", "\"F\"", ":", "(", "8", ",", ")", ",", "\n", "\"G\"", ":", "(", "9", ",", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.abcdataset.ABCDataset.get_dataloader": [[107, 114], ["torch.utils.data.DataLoader", "helper.num_workers_platform"], "methods", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.helper.num_workers_platform"], ["", "def", "get_dataloader", "(", "self", ",", "batch_size", ",", "shuffle", ")", ":", "\n", "        ", "return", "DataLoader", "(", "\n", "self", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ",", "\n", "collate_fn", "=", "_collate", ",", "\n", "num_workers", "=", "helper", ".", "num_workers_platform", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.abcdataset.ABCDatasetWithPointclouds.__init__": [[129, 227], ["pathlib.Path", "pathlib.Path", "list", "list", "print", "print", "sklearn.model_selection.train_test_split", "sklearn.model_selection.train_test_split", "print", "pathlib.Path.glob", "pathlib.Path.glob", "int", "random.sample", "str", "abcdataset.ABCDatasetWithPointclouds.graph_files.append", "abcdataset.ABCDatasetWithPointclouds.pc_files.append", "print", "print", "print", "str", "torch.tensor", "range", "len", "len", "len", "numpy.load", "len", "font_util.center_and_scale_uvsolid", "len", "len", "dgl.data.utils.load_graphs"], "methods", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.font_util.center_and_scale_uvsolid"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "bin_root_dir", ",", "\n", "npy_root_dir", ",", "\n", "split", "=", "\"train\"", ",", "\n", "size_percentage", "=", "None", ",", "\n", "in_memory", "=", "False", ",", "\n", "num_points", "=", "1024", ",", "\n", "apply_square_symmetry", "=", "0.0", ",", "\n", "center_and_scale", "=", "True", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        ABC dataset with both solids and pointclouds\n        :param bin_root_dir: Root path to the dataset of bin files\n        :param npy_root_dir: Root path to the dataset of npy files\n        :param split: Whether train, val, test or all (entire) set\n        :param size_percentage: Percentage of data to load per category\n        :param in_memory: Whether to keep the entire dataset in memory (This is always done in Windows)\n        :param apply_square_symmetry: Probability of randomly applying a square symmetry transform on the input surface grid (default: 0.0)\n        :param center_and_scale: Center and scale the UV grids\n        \"\"\"", "\n", "bin_path", "=", "pathlib", ".", "Path", "(", "bin_root_dir", ")", "\n", "npy_path", "=", "pathlib", ".", "Path", "(", "npy_root_dir", ")", "\n", "assert", "split", "in", "(", "\"train\"", ",", "\"val\"", ",", "\"test\"", ",", "\"all\"", ")", "\n", "\n", "pointcloud_files", "=", "list", "(", "npy_path", ".", "glob", "(", "\"*.npy\"", ")", ")", "\n", "# pointcloud_files = pointcloud_files[:1000]", "\n", "graph_files", "=", "list", "(", "bin_path", ".", "glob", "(", "\"*.bin\"", ")", ")", "\n", "# graph_files = graph_files[:1000]", "\n", "print", "(", "f\"Found {len(graph_files)} {split} data.\"", ")", "\n", "print", "(", "f\"Found pointcloud {len(pointcloud_files)} {split} data.\"", ")", "\n", "\n", "self", ".", "in_memory", "=", "in_memory", "\n", "self", ".", "center_and_scale", "=", "center_and_scale", "\n", "\n", "if", "size_percentage", "is", "not", "None", ":", "\n", "            ", "k", "=", "int", "(", "size_percentage", "*", "len", "(", "graph_files", ")", ")", "\n", "graph_files", "=", "random", ".", "sample", "(", "graph_files", ",", "k", ")", "\n", "\n", "", "pc_hashmap", "=", "{", "}", "\n", "for", "file_name", "in", "pointcloud_files", ":", "\n", "# TODO: fix this weird extension and its handling", "\n", "            ", "query_name", "=", "file_name", ".", "name", "[", ":", "-", "4", "]", "# remove .stl.npy extension", "\n", "pc_hashmap", "[", "query_name", "]", "=", "str", "(", "file_name", ")", "\n", "\n", "", "self", ".", "graph_files", "=", "[", "]", "\n", "self", ".", "pc_files", "=", "[", "]", "\n", "self", ".", "num_points", "=", "num_points", "\n", "\n", "for", "file_name", "in", "graph_files", ":", "\n", "            ", "query_name", "=", "file_name", ".", "name", "[", ":", "-", "4", "]", "# remove .bin extension", "\n", "if", "query_name", "not", "in", "pc_hashmap", ":", "\n", "# print(\"Error: \", query_name)", "\n", "                ", "continue", "\n", "", "self", ".", "graph_files", ".", "append", "(", "str", "(", "file_name", ")", ")", "\n", "self", ".", "pc_files", ".", "append", "(", "pc_hashmap", "[", "query_name", "]", ")", "\n", "\n", "", "trainval_solids", ",", "test_solids", ",", "trainval_pc", ",", "test_pc", "=", "train_test_split", "(", "\n", "self", ".", "graph_files", ",", "self", ".", "pc_files", ",", "test_size", "=", "0.2", ",", "random_state", "=", "42", ",", "\n", ")", "\n", "train_solids", ",", "val_solids", ",", "train_pc", ",", "val_pc", "=", "train_test_split", "(", "\n", "trainval_solids", ",", "trainval_pc", ",", "test_size", "=", "0.25", ",", "random_state", "=", "84", ",", "\n", ")", "\n", "\n", "if", "split", "==", "\"train\"", ":", "\n", "            ", "self", ".", "pc_files", "=", "train_pc", "\n", "self", ".", "graph_files", "=", "train_solids", "\n", "", "elif", "split", "==", "\"val\"", ":", "\n", "            ", "self", ".", "pc_files", "=", "val_pc", "\n", "self", ".", "graph_files", "=", "val_solids", "\n", "", "elif", "split", "==", "\"test\"", ":", "\n", "            ", "self", ".", "pc_files", "=", "test_pc", "\n", "self", ".", "graph_files", "=", "test_solids", "\n", "", "elif", "split", "==", "\"all\"", ":", "\n", "            ", "pass", "\n", "# do nothing", "\n", "\n", "", "if", "self", ".", "in_memory", ":", "\n", "            ", "print", "(", "\"Storing dataset in memory\"", ")", "\n", "print", "(", "\"Loading graphs...\"", ")", "\n", "self", ".", "graphs", "=", "[", "load_graphs", "(", "fn", ")", "[", "0", "]", "[", "0", "]", "for", "fn", "in", "self", ".", "graph_files", "]", "\n", "print", "(", "\"Loading pointclouds...\"", ")", "\n", "self", ".", "pointclouds", "=", "[", "torch", ".", "tensor", "(", "np", ".", "load", "(", "fn", ")", ")", "for", "fn", "in", "self", ".", "pc_files", "]", "\n", "if", "self", ".", "center_and_scale", ":", "\n", "                ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "graphs", ")", ")", ":", "\n", "                    ", "(", "\n", "self", ".", "graphs", "[", "i", "]", ".", "ndata", "[", "\"x\"", "]", ",", "\n", "center", ",", "\n", "scale", ",", "\n", ")", "=", "font_util", ".", "center_and_scale_uvsolid", "(", "\n", "self", ".", "graphs", "[", "i", "]", ".", "ndata", "[", "\"x\"", "]", ",", "return_center_scale", "=", "True", "\n", ")", "\n", "self", ".", "pointclouds", "[", "i", "]", "=", "(", "self", ".", "pointclouds", "[", "i", "]", "-", "center", ")", "*", "scale", "\n", "", "", "", "print", "(", "\n", "f\"Loaded {len(self.graph_files)} face-adj graphs and {len(self.pc_files)} pointclouds\"", "\n", ")", "\n", "\n", "self", ".", "apply_square_symmetry", "=", "apply_square_symmetry", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.abcdataset.ABCDatasetWithPointclouds.__len__": [[228, 230], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "graph_files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.abcdataset.ABCDatasetWithPointclouds.__getitem__": [[231, 256], ["str", "torch.tensor", "random.uniform", "random.uniform", "random.uniform", "font_util.center_and_scale_uvsolid", "graph.ndata[].transpose", "torch.flip", "torch.flip", "dgl.data.utils.load_graphs", "numpy.load"], "methods", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.font_util.center_and_scale_uvsolid"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "graph_file", "=", "str", "(", "self", ".", "graph_files", "[", "idx", "]", ")", "\n", "if", "self", ".", "in_memory", ":", "\n", "            ", "graph", "=", "self", ".", "graphs", "[", "idx", "]", "\n", "pc", "=", "self", ".", "pointclouds", "[", "idx", "]", "[", ":", "self", ".", "num_points", "]", "\n", "", "else", ":", "\n", "            ", "graph", "=", "load_graphs", "(", "self", ".", "graph_files", "[", "idx", "]", ")", "[", "0", "]", "[", "0", "]", "\n", "pointcloud_file", "=", "self", ".", "pc_files", "[", "idx", "]", "\n", "pc", "=", "torch", ".", "tensor", "(", "np", ".", "load", "(", "pointcloud_file", ")", "[", ":", "self", ".", "num_points", "]", ")", "\n", "if", "self", ".", "center_and_scale", ":", "\n", "                ", "graph", ".", "ndata", "[", "\"x\"", "]", ",", "center", ",", "scale", "=", "font_util", ".", "center_and_scale_uvsolid", "(", "\n", "graph", ".", "ndata", "[", "\"x\"", "]", ",", "return_center_scale", "=", "True", "\n", ")", "\n", "pc", "=", "(", "pc", "-", "center", ")", "*", "scale", "\n", "", "", "if", "self", ".", "apply_square_symmetry", ">", "0.0", ":", "\n", "            ", "prob_r", "=", "random", ".", "uniform", "(", "0.0", ",", "1.0", ")", "\n", "if", "prob_r", "<", "self", ".", "apply_square_symmetry", ":", "\n", "                ", "graph", ".", "ndata", "[", "\"x\"", "]", "=", "graph", ".", "ndata", "[", "\"x\"", "]", ".", "transpose", "(", "1", ",", "2", ")", "\n", "", "prob_u", "=", "random", ".", "uniform", "(", "0.0", ",", "1.0", ")", "\n", "if", "prob_u", "<", "self", ".", "apply_square_symmetry", ":", "\n", "                ", "graph", ".", "ndata", "[", "\"x\"", "]", "=", "torch", ".", "flip", "(", "graph", ".", "ndata", "[", "\"x\"", "]", ",", "dims", "=", "[", "1", "]", ")", "\n", "", "prob_v", "=", "random", ".", "uniform", "(", "0.0", ",", "1.0", ")", "\n", "if", "prob_v", "<", "self", ".", "apply_square_symmetry", ":", "\n", "                ", "graph", ".", "ndata", "[", "\"x\"", "]", "=", "torch", ".", "flip", "(", "graph", ".", "ndata", "[", "\"x\"", "]", ",", "dims", "=", "[", "2", "]", ")", "\n", "", "", "return", "graph", ",", "pc", ",", "graph_file", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.abcdataset.ABCDatasetWithPointclouds.get_dataloader": [[257, 265], ["torch.utils.data.DataLoader", "helper.num_workers_platform"], "methods", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.helper.num_workers_platform"], ["", "def", "get_dataloader", "(", "self", ",", "batch_size", ",", "shuffle", ")", ":", "\n", "        ", "return", "DataLoader", "(", "\n", "self", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ",", "\n", "collate_fn", "=", "_collate_with_pointclouds", ",", "\n", "num_workers", "=", "helper", ".", "num_workers_platform", "(", ")", ",", "\n", "drop_last", "=", "True", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.abcdataset.ABCDatasetPointclouds.__init__": [[278, 327], ["pathlib.Path", "list", "print", "random.seed", "print", "pathlib.Path.glob", "int", "random.sample", "int", "random.sample", "print", "print", "int", "random.sample", "numpy.load", "len", "len", "int", "random.sample", "len", "len", "len", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "npy_root_dir", ",", "\n", "split", "=", "\"train\"", ",", "\n", "size_percentage", "=", "None", ",", "\n", "in_memory", "=", "True", ",", "\n", "num_points", "=", "1024", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        ABC dataset with pointclouds only\n        :param npy_root_dir: Root path to the dataset of npy files\n        :param split: Whether train, vall, test or all (entire) set\n        :param size_percentage: Percentage of data to load per category\n        :param in_memory: Whether to keep the entire dataset in memory (This is always done in Windows)\n        \"\"\"", "\n", "npy_path", "=", "pathlib", ".", "Path", "(", "npy_root_dir", ")", "\n", "assert", "split", "in", "(", "\"train\"", ",", "\"val\"", ",", "\"test\"", ",", "\"all\"", ")", "\n", "\n", "pointcloud_files", "=", "list", "(", "npy_path", ".", "glob", "(", "\"*.npy\"", ")", ")", "\n", "\n", "print", "(", "f\"Found pointcloud {len(pointcloud_files)} {split} data.\"", ")", "\n", "\n", "self", ".", "in_memory", "=", "in_memory", "\n", "\n", "random", ".", "seed", "(", "1200", ")", "\n", "if", "split", "==", "\"train\"", ":", "\n", "            ", "k", "=", "int", "(", "0.6", "*", "len", "(", "pointcloud_files", ")", ")", "\n", "pointcloud_files", "=", "random", ".", "sample", "(", "pointcloud_files", ",", "k", ")", "\n", "", "elif", "split", "==", "\"val\"", ":", "\n", "            ", "k", "=", "int", "(", "0.2", "*", "len", "(", "pointcloud_files", ")", ")", "\n", "pointcloud_files", "=", "random", ".", "sample", "(", "pointcloud_files", ",", "k", ")", "\n", "", "elif", "split", "==", "\"test\"", ":", "\n", "            ", "k", "=", "int", "(", "0.2", "*", "len", "(", "pointcloud_files", ")", ")", "\n", "pointcloud_files", "=", "random", ".", "sample", "(", "pointcloud_files", ",", "k", ")", "\n", "", "elif", "split", "==", "\"all\"", ":", "\n", "            ", "pointcloud_files", "=", "pointcloud_files", "\n", "\n", "", "if", "size_percentage", "!=", "None", ":", "\n", "            ", "k", "=", "int", "(", "size_percentage", "*", "len", "(", "pointcloud_files", ")", ")", "\n", "pointcloud_files", "=", "random", ".", "sample", "(", "pointcloud_files", ",", "k", ")", "\n", "\n", "", "self", ".", "pc_files", "=", "pointcloud_files", "\n", "self", ".", "num_points", "=", "num_points", "\n", "\n", "if", "self", ".", "in_memory", ":", "\n", "            ", "print", "(", "\"Storing dataset in memory\"", ")", "\n", "print", "(", "\"Loading pointclouds...\"", ")", "\n", "self", ".", "pointclouds", "=", "[", "np", ".", "load", "(", "fn", ")", "for", "fn", "in", "self", ".", "pc_files", "]", "\n", "", "print", "(", "f\"Loaded {len(self.pc_files)} pointclouds\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.abcdataset.ABCDatasetPointclouds.__len__": [[328, 330], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "pc_files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.abcdataset.ABCDatasetPointclouds.__getitem__": [[331, 338], ["numpy.load"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "in_memory", ":", "\n", "            ", "pc", "=", "self", ".", "pointclouds", "[", "idx", "]", "[", ":", "self", ".", "num_points", "]", "\n", "", "else", ":", "\n", "            ", "pointcloud_file", "=", "self", ".", "pc_files", "[", "idx", "]", "\n", "pc", "=", "np", ".", "load", "(", "pointcloud_file", ")", "[", ":", "self", ".", "num_points", "]", "\n", "", "return", "pc", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.abcdataset.ABCDatasetPointclouds.get_dataloader": [[339, 346], ["torch.utils.data.DataLoader", "helper.num_workers_platform"], "methods", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.helper.num_workers_platform"], ["", "def", "get_dataloader", "(", "self", ",", "batch_size", ",", "shuffle", ")", ":", "\n", "        ", "return", "DataLoader", "(", "\n", "self", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ",", "\n", "collate_fn", "=", "_collate_only_pointclouds", ",", "\n", "num_workers", "=", "helper", ".", "num_workers_platform", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.abcdataset._collate": [[17, 23], ["dgl.batch"], "function", ["None"], ["def", "_collate", "(", "batch", ")", ":", "\n", "    ", "graphs", "=", "batch", "\n", "bg", "=", "dgl", ".", "batch", "(", "graphs", ")", "\n", "return", "(", "\n", "bg", ",", "\n", "None", ",", "\n", ")", "# Return None for labels so that we can reuse the same train scripts", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.abcdataset._collate_with_pointclouds": [[117, 125], ["map", "dgl.batch", "torch.from_numpy().type", "zip", "torch.from_numpy", "numpy.stack"], "function", ["None"], ["", "", "def", "_collate_with_pointclouds", "(", "batch", ")", ":", "\n", "    ", "graphs", ",", "pcs", ",", "graph_files", "=", "map", "(", "list", ",", "zip", "(", "*", "batch", ")", ")", "\n", "bg", "=", "dgl", ".", "batch", "(", "graphs", ")", "\n", "pcs", "=", "torch", ".", "from_numpy", "(", "np", ".", "stack", "(", "pcs", ")", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "return", "(", "\n", "bg", ",", "\n", "pcs", ",", "\n", "graph_files", ",", "\n", ")", "# Return None for labels so that we can reuse same code in train/test scripts", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.abcdataset._collate_only_pointclouds": [[268, 274], ["map", "torch.from_numpy().type", "zip", "torch.from_numpy", "numpy.stack"], "function", ["None"], ["", "", "def", "_collate_only_pointclouds", "(", "batch", ")", ":", "\n", "    ", "pcs", "=", "map", "(", "list", ",", "zip", "(", "*", "batch", ")", ")", "\n", "pcs", "=", "torch", ".", "from_numpy", "(", "np", ".", "stack", "(", "pcs", ")", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "return", "(", "\n", "pcs", ",", "\n", "None", ",", "\n", ")", "# Return None for labels so that we can reuse same code in train/test scripts", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.abcdataset._save_feature_to_csv": [[349, 362], ["feat[].numpy().reshape", "print", "feat[].numpy().reshape", "numpy.savetxt", "len", "feat[].numpy", "feat[].numpy"], "function", ["None"], ["", "", "def", "_save_feature_to_csv", "(", "feat", ":", "torch", ".", "Tensor", ",", "filename", ")", ":", "\n", "    ", "\"\"\"\n    Save loaded feature to csv file to visualize sampled points\n    :param feat Features loaded from *.feat file of shape [#faces, #u, #v, 10]\n    :param filename Output csv filename\n    \"\"\"", "\n", "assert", "len", "(", "feat", ".", "shape", ")", "==", "4", "# faces x #u x #v x 10", "\n", "pts", "=", "feat", "[", ":", ",", ":", ",", ":", ",", ":", "3", "]", ".", "numpy", "(", ")", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", "\n", "print", "(", "pts", ")", "\n", "mask", "=", "feat", "[", ":", ",", ":", ",", ":", ",", "6", "]", ".", "numpy", "(", ")", ".", "reshape", "(", "-", "1", ")", "\n", "point_indices_inside_faces", "=", "mask", "==", "1", "\n", "pts", "=", "pts", "[", "point_indices_inside_faces", ",", ":", "]", "\n", "np", ".", "savetxt", "(", "filename", ",", "pts", ",", "delimiter", "=", "\",\"", ",", "header", "=", "\"x,y,z\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.abcdataset._save_arr_to_csv": [[364, 366], ["numpy.savetxt"], "function", ["None"], ["", "def", "_save_arr_to_csv", "(", "arr", ",", "filename", ")", ":", "\n", "    ", "np", ".", "savetxt", "(", "filename", ",", "arr", ",", "delimiter", "=", "\",\"", ",", "header", "=", "\"x,y,z\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.solid_letters.SolidLETTERS.__init__": [[60, 107], ["pathlib.Path", "list", "print", "len", "print", "int", "random.sample", "int", "random.sample", "solid_letters.SolidLETTERS.labels.append", "set", "print", "len", "int", "random.sample", "solid_letters.SolidLETTERS.char_to_label", "platform.system", "len", "pathlib.Path.glob", "font_util.valid_font", "len", "len", "len", "dgl.data.utils.load_graphs", "str"], "methods", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.solid_letters.SolidMNISTWithPointclouds.char_to_label", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.font_util.valid_font"], ["    ", "def", "__init__", "(", "self", ",", "root_dir", ",", "split", "=", "\"train\"", ",", "size_percentage", "=", "None", ",", "in_memory", "=", "False", ",", "apply_square_symmetry", "=", "0.0", ",", "\n", "split_suffix", "=", "\"\"", ",", "transform", "=", "None", ",", "crop_func", "=", "None", ",", "image_dir", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Load and create the SolidMNIST dataset\n        :param root_dir: Root path to the dataset\n        :param split: string Whether train, val or test set\n        :param size_percentage: Percentage of data to load per category\n        :param in_memory: Whether to keep the entire dataset in memory (This is always done in Windows)\n        :param apply_square_symmetry: Probability of randomly applying a square symmetry transform on the input surface grid (default: 0.0)\n        :param split_suffix: Suffix for the split directory to use\n        \"\"\"", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "crop_func", "=", "crop_func", "\n", "path", "=", "pathlib", ".", "Path", "(", "root_dir", ")", "\n", "assert", "split", "in", "(", "\"train\"", ",", "\"val\"", ",", "\"test\"", ")", "\n", "if", "split", "==", "\"train\"", "or", "split", "==", "\"val\"", ":", "\n", "            ", "subfolder", "=", "\"train\"", "\n", "", "else", ":", "\n", "            ", "subfolder", "=", "\"test\"", "\n", "\n", "", "path", "/=", "subfolder", "+", "split_suffix", "\n", "self", ".", "graph_files", "=", "list", "(", "x", "for", "x", "in", "path", ".", "glob", "(", "\"*.bin\"", ")", "if", "valid_font", "(", "x", ")", ")", "\n", "print", "(", "\"Found {} {} data.\"", ".", "format", "(", "len", "(", "self", ".", "graph_files", ")", ",", "split", ")", ")", "\n", "self", ".", "labels", "=", "[", "]", "\n", "\n", "self", ".", "in_memory", "=", "in_memory", "\n", "\n", "if", "split", "==", "\"train\"", ":", "\n", "            ", "k", "=", "int", "(", ".8", "*", "len", "(", "self", ".", "graph_files", ")", ")", "\n", "self", ".", "graph_files", "=", "random", ".", "sample", "(", "self", ".", "graph_files", ",", "k", ")", "\n", "", "elif", "split", "==", "\"val\"", ":", "\n", "            ", "k", "=", "int", "(", ".2", "*", "len", "(", "self", ".", "graph_files", ")", ")", "\n", "self", ".", "graph_files", "=", "random", ".", "sample", "(", "self", ".", "graph_files", ",", "k", ")", "\n", "\n", "", "if", "size_percentage", "is", "not", "None", ":", "\n", "            ", "k", "=", "int", "(", "size_percentage", "*", "len", "(", "self", ".", "graph_files", ")", ")", "\n", "self", ".", "graph_files", "=", "random", ".", "sample", "(", "self", ".", "graph_files", ",", "k", ")", "\n", "\n", "", "for", "fn", "in", "self", ".", "graph_files", ":", "\n", "# the first character of filename must be the alphabet", "\n", "            ", "self", ".", "labels", ".", "append", "(", "self", ".", "char_to_label", "(", "fn", ".", "stem", "[", "0", "]", ")", ")", "\n", "", "self", ".", "num_classes", "=", "len", "(", "set", "(", "self", ".", "labels", ")", ")", "\n", "if", "platform", ".", "system", "(", ")", "==", "\"Windows\"", "or", "in_memory", ":", "\n", "            ", "print", "(", "\"Windows OS detected, storing dataset in memory\"", ")", "\n", "self", ".", "graphs", "=", "[", "load_graphs", "(", "str", "(", "fn", ")", ")", "[", "0", "]", "[", "0", "]", "for", "fn", "in", "self", ".", "graph_files", "]", "\n", "", "print", "(", "\"Done loading {} and data {} classes\"", ".", "format", "(", "len", "(", "self", ".", "graph_files", ")", ",", "self", ".", "num_classes", ")", ")", "\n", "self", ".", "apply_square_symmetry", "=", "apply_square_symmetry", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.solid_letters.SolidLETTERS.char_to_label": [[108, 110], ["ord", "char.lower"], "methods", ["None"], ["", "def", "char_to_label", "(", "self", ",", "char", ")", ":", "\n", "        ", "return", "ord", "(", "char", ".", "lower", "(", ")", ")", "-", "97", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.solid_letters.SolidLETTERS.__len__": [[111, 113], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "graph_files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.solid_letters.SolidLETTERS.__getitem__": [[114, 162], ["solid_letters.corner_align", "solid_letters.SolidLETTERS.graph_files[].stem.lower", "solid_letters.SolidLETTERS.char_to_label", "torch.tensor", "str", "random.uniform", "random.uniform", "random.uniform", "name.find", "name.find", "name.find", "name.find", "str", "solid_letters.SolidLETTERS.transform", "solid_letters.SolidLETTERS.transform", "map", "torch.tensor().long", "torch.zeros", "platform.system", "solid_letters.SolidLETTERS.graph_files[].absolute", "map.ndata[].transpose", "torch.flip", "torch.flip", "solid_letters.SolidLETTERS.graph_files[].absolute", "dgl.data.utils.load_graphs", "dgl.data.utils.load_graphs", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.solid_letters.corner_align", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.solid_letters.SolidMNISTWithPointclouds.char_to_label"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "platform", ".", "system", "(", ")", "==", "\"Windows\"", "or", "self", ".", "in_memory", ":", "\n", "            ", "graph", "=", "self", ".", "graphs", "[", "idx", "]", "\n", "", "else", ":", "\n", "            ", "graph_file", "=", "str", "(", "self", ".", "graph_files", "[", "idx", "]", ".", "absolute", "(", ")", ")", "\n", "graph", "=", "load_graphs", "(", "graph_file", ")", "[", "0", "]", "[", "0", "]", "\n", "", "if", "self", ".", "apply_square_symmetry", ">", "0.0", ":", "\n", "            ", "prob_r", "=", "random", ".", "uniform", "(", "0.0", ",", "1.0", ")", "\n", "if", "prob_r", "<", "self", ".", "apply_square_symmetry", ":", "\n", "                ", "graph", ".", "ndata", "[", "'x'", "]", "=", "graph", ".", "ndata", "[", "'x'", "]", ".", "transpose", "(", "1", ",", "2", ")", "\n", "", "prob_u", "=", "random", ".", "uniform", "(", "0.0", ",", "1.0", ")", "\n", "if", "prob_u", "<", "self", ".", "apply_square_symmetry", ":", "\n", "                ", "graph", ".", "ndata", "[", "'x'", "]", "=", "torch", ".", "flip", "(", "graph", ".", "ndata", "[", "'x'", "]", ",", "dims", "=", "[", "1", "]", ")", "\n", "", "prob_v", "=", "random", ".", "uniform", "(", "0.0", ",", "1.0", ")", "\n", "if", "prob_v", "<", "self", ".", "apply_square_symmetry", ":", "\n", "                ", "graph", ".", "ndata", "[", "'x'", "]", "=", "torch", ".", "flip", "(", "graph", ".", "ndata", "[", "'x'", "]", ",", "dims", "=", "[", "2", "]", ")", "\n", "\n", "", "", "x", "=", "graph", ".", "ndata", "[", "'x'", "]", "\n", "x", "=", "corner_align", "(", "x", ")", "\n", "graph", ".", "ndata", "[", "'x'", "]", "=", "x", "\n", "# get extra label info", "\n", "stem", "=", "self", ".", "graph_files", "[", "idx", "]", ".", "stem", ".", "lower", "(", ")", "\n", "name", "=", "stem", "[", "2", ":", "-", "6", "]", "\n", "upper", "=", "stem", "[", "-", "5", ":", "]", "==", "'upper'", "\n", "light", "=", "name", ".", "find", "(", "'light'", ")", ">", "-", "1", "\n", "bold", "=", "name", ".", "find", "(", "'bold'", ")", ">", "-", "1", "\n", "script", "=", "name", ".", "find", "(", "'script'", ")", ">", "-", "1", "\n", "sans", "=", "name", ".", "find", "(", "'sans'", ")", ">", "-", "1", "\n", "letter", "=", "self", ".", "char_to_label", "(", "stem", "[", "0", "]", ")", "\n", "meta", "=", "torch", ".", "tensor", "(", "[", "upper", ",", "light", ",", "bold", ",", "script", ",", "sans", ",", "letter", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "graph_file", "=", "str", "(", "self", ".", "graph_files", "[", "idx", "]", ".", "absolute", "(", ")", ")", "\n", "graph2", "=", "load_graphs", "(", "graph_file", ")", "[", "0", "]", "[", "0", "]", "# type: dgl.DGLGraph", "\n", "\n", "x1", "=", "graph", ".", "ndata", "[", "'x'", "]", "\n", "x1", "=", "self", ".", "transform", "(", "x1", ")", "\n", "graph", ".", "ndata", "[", "'x'", "]", "=", "x1", "\n", "\n", "x2", "=", "graph", ".", "ndata", "[", "'x'", "]", "\n", "x2", "=", "self", ".", "transform", "(", "x2", ")", "\n", "graph2", ".", "ndata", "[", "'x'", "]", "=", "x2", "\n", "\n", "graph", "=", "(", "graph", ",", "graph2", ")", "\n", "\n", "", "if", "self", ".", "crop_func", ":", "\n", "            ", "graph", "=", "map", "(", "self", ".", "crop_func", ",", "graph", ")", "\n", "\n", "", "return", "graph", ",", "torch", ".", "tensor", "(", "[", "self", ".", "labels", "[", "idx", "]", "]", ")", ".", "long", "(", ")", ",", "meta", ",", "torch", ".", "zeros", "(", "1", ")", ",", "self", ".", "graph_files", "[", "idx", "]", ".", "stem", "+", "'.bin'", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.solid_letters.SolidLETTERS.feature_indices": [[163, 168], ["None"], "methods", ["None"], ["", "def", "feature_indices", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns a dictionary of mappings from the name of features to the channels containing them\n        \"\"\"", "\n", "return", "{", "\"xyz\"", ":", "(", "0", ",", "1", ",", "2", ")", ",", "\"normals\"", ":", "(", "3", ",", "4", ",", "5", ")", ",", "\"mask\"", ":", "(", "6", ",", ")", ",", "\"E\"", ":", "(", "7", ",", ")", ",", "\"F\"", ":", "(", "8", ",", ")", ",", "\"G\"", ":", "(", "9", ",", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.solid_letters.SolidLETTERSSubset.__init__": [[171, 233], ["pathlib.Path", "list", "list", "print", "print", "filter", "int", "random.sample", "int", "random.sample", "solid_letters.SolidLETTERSSubset.labels.append", "print", "font_name.lower", "solid_letters.SolidLETTERSSubset.fonts.keys", "len", "int", "random.sample", "solid_letters.SolidLETTERSSubset.char_to_label", "platform.system", "len", "pathlib.Path.glob", "font_util.valid_font", "len", "len", "len", "dgl.data.utils.load_graphs", "str"], "methods", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.solid_letters.SolidMNISTWithPointclouds.char_to_label", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.font_util.valid_font"], ["    ", "def", "__init__", "(", "self", ",", "root_dir", ",", "split", "=", "\"train\"", ",", "size_percentage", "=", "None", ",", "in_memory", "=", "False", ",", "apply_square_symmetry", "=", "0.0", ",", "\n", "split_suffix", "=", "\"\"", ",", "image_dir", "=", "None", ",", "\n", "random_rotation", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Load and create the SolidMNIST dataset\n        :param root_dir: Root path to the dataset\n        :param split: string Whether train, val or test set\n        :param size_percentage: Percentage of data to load per category\n        :param in_memory: Whether to keep the entire dataset in memory (This is always done in Windows)\n        :param apply_square_symmetry: Probability of randomly applying a square symmetry transform on the input surface grid (default: 0.0)\n        :param split_suffix: Suffix for the split directory to use\n        :param random_rotation: 'x' or 'z' or None\n        \"\"\"", "\n", "self", ".", "image_dir", "=", "image_dir", "\n", "path", "=", "pathlib", ".", "Path", "(", "root_dir", ")", "\n", "assert", "split", "in", "(", "\"train\"", ",", "\"val\"", ",", "\"test\"", ")", "\n", "if", "split", "==", "\"train\"", "or", "split", "==", "\"val\"", ":", "\n", "            ", "subfolder", "=", "\"train\"", "\n", "", "else", ":", "\n", "            ", "subfolder", "=", "\"test\"", "\n", "\n", "", "path", "/=", "subfolder", "+", "split_suffix", "\n", "self", ".", "graph_files", "=", "list", "(", "x", "for", "x", "in", "path", ".", "glob", "(", "\"*.bin\"", ")", "if", "valid_font", "(", "x", ")", ")", "\n", "self", ".", "fonts", "=", "{", "\n", "'turret road'", ":", "0", ",", "\n", "'zhi mang xing'", ":", "1", ",", "\n", "'abhaya libre'", ":", "2", ",", "\n", "'seaweed script'", ":", "3", "\n", "}", "\n", "\n", "def", "matching_font", "(", "file_name", ")", ":", "\n", "            ", "font_name", "=", "file_name", ".", "stem", "[", "2", ":", "-", "6", "]", "\n", "return", "font_name", ".", "lower", "(", ")", "in", "self", ".", "fonts", ".", "keys", "(", ")", "\n", "\n", "", "self", ".", "graph_files", "=", "list", "(", "filter", "(", "matching_font", ",", "self", ".", "graph_files", ")", ")", "\n", "print", "(", "\"Found {} {} data.\"", ".", "format", "(", "len", "(", "self", ".", "graph_files", ")", ",", "split", ")", ")", "\n", "self", ".", "labels", "=", "[", "]", "\n", "\n", "self", ".", "in_memory", "=", "in_memory", "\n", "\n", "if", "split", "==", "\"train\"", ":", "\n", "            ", "k", "=", "int", "(", ".8", "*", "len", "(", "self", ".", "graph_files", ")", ")", "\n", "self", ".", "graph_files", "=", "random", ".", "sample", "(", "self", ".", "graph_files", ",", "k", ")", "\n", "", "elif", "split", "==", "\"val\"", ":", "\n", "            ", "k", "=", "int", "(", ".2", "*", "len", "(", "self", ".", "graph_files", ")", ")", "\n", "self", ".", "graph_files", "=", "random", ".", "sample", "(", "self", ".", "graph_files", ",", "k", ")", "\n", "\n", "", "if", "size_percentage", "is", "not", "None", ":", "\n", "            ", "k", "=", "int", "(", "size_percentage", "*", "len", "(", "self", ".", "graph_files", ")", ")", "\n", "self", ".", "graph_files", "=", "random", ".", "sample", "(", "self", ".", "graph_files", ",", "k", ")", "\n", "\n", "", "for", "fn", "in", "self", ".", "graph_files", ":", "\n", "# the first character of filename must be the alphabet", "\n", "            ", "self", ".", "labels", ".", "append", "(", "self", ".", "char_to_label", "(", "fn", ".", "stem", "[", "0", "]", ")", ")", "\n", "# self.num_classes = len(set(self.labels))", "\n", "", "self", ".", "num_classes", "=", "26", "\n", "if", "platform", ".", "system", "(", ")", "==", "\"Windows\"", "or", "in_memory", ":", "\n", "            ", "print", "(", "\"Windows OS detected, storing dataset in memory\"", ")", "\n", "self", ".", "graphs", "=", "[", "load_graphs", "(", "str", "(", "fn", ")", ")", "[", "0", "]", "[", "0", "]", "for", "fn", "in", "self", ".", "graph_files", "]", "\n", "", "print", "(", "\"Done loading {} and data {} classes\"", ".", "format", "(", "len", "(", "self", ".", "graph_files", ")", ",", "self", ".", "num_classes", ")", ")", "\n", "self", ".", "apply_square_symmetry", "=", "apply_square_symmetry", "\n", "self", ".", "random_rotation", "=", "random_rotation", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.solid_letters.SolidLETTERSSubset.char_to_label": [[234, 236], ["ord", "char.lower"], "methods", ["None"], ["", "def", "char_to_label", "(", "self", ",", "char", ")", ":", "\n", "        ", "return", "ord", "(", "char", ".", "lower", "(", ")", ")", "-", "97", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.solid_letters.SolidLETTERSSubset.__len__": [[237, 239], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "graph_files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.solid_letters.SolidLETTERSSubset.__getitem__": [[240, 290], ["solid_letters.corner_align", "solid_letters.SolidLETTERSSubset.graph_files[].stem.lower", "solid_letters.SolidLETTERSSubset.char_to_label", "os.path.join", "torch.tensor", "str", "random.uniform", "random.uniform", "random.uniform", "solid_letters.random_rotate", "name.find", "name.find", "name.find", "name.find", "PIL.Image.open", "torchvision.transforms.Compose", "torchvision.transforms.Compose.", "torch.tensor().long", "str", "platform.system", "solid_letters.SolidLETTERSSubset.graph_files[].absolute", "graph.ndata[].transpose", "torch.flip", "torch.flip", "print", "torch.ones", "dgl.data.utils.load_graphs", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.solid_letters.corner_align", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.solid_letters.SolidMNISTWithPointclouds.char_to_label", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.solid_letters.random_rotate"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "platform", ".", "system", "(", ")", "==", "\"Windows\"", "or", "self", ".", "in_memory", ":", "\n", "            ", "graph", "=", "self", ".", "graphs", "[", "idx", "]", "\n", "", "else", ":", "\n", "            ", "graph_file", "=", "str", "(", "self", ".", "graph_files", "[", "idx", "]", ".", "absolute", "(", ")", ")", "\n", "graph", "=", "load_graphs", "(", "graph_file", ")", "[", "0", "]", "[", "0", "]", "\n", "", "if", "self", ".", "apply_square_symmetry", ">", "0.0", ":", "\n", "            ", "prob_r", "=", "random", ".", "uniform", "(", "0.0", ",", "1.0", ")", "\n", "if", "prob_r", "<", "self", ".", "apply_square_symmetry", ":", "\n", "                ", "graph", ".", "ndata", "[", "'x'", "]", "=", "graph", ".", "ndata", "[", "'x'", "]", ".", "transpose", "(", "1", ",", "2", ")", "\n", "", "prob_u", "=", "random", ".", "uniform", "(", "0.0", ",", "1.0", ")", "\n", "if", "prob_u", "<", "self", ".", "apply_square_symmetry", ":", "\n", "                ", "graph", ".", "ndata", "[", "'x'", "]", "=", "torch", ".", "flip", "(", "graph", ".", "ndata", "[", "'x'", "]", ",", "dims", "=", "[", "1", "]", ")", "\n", "", "prob_v", "=", "random", ".", "uniform", "(", "0.0", ",", "1.0", ")", "\n", "if", "prob_v", "<", "self", ".", "apply_square_symmetry", ":", "\n", "                ", "graph", ".", "ndata", "[", "'x'", "]", "=", "torch", ".", "flip", "(", "graph", ".", "ndata", "[", "'x'", "]", ",", "dims", "=", "[", "2", "]", ")", "\n", "\n", "", "", "if", "self", ".", "random_rotation", "is", "not", "None", ":", "\n", "            ", "graph", ".", "ndata", "[", "'x'", "]", "=", "random_rotate", "(", "graph", ".", "ndata", "[", "'x'", "]", ",", "self", ".", "random_rotation", ")", "\n", "\n", "", "x", "=", "graph", ".", "ndata", "[", "'x'", "]", "\n", "x", "=", "corner_align", "(", "x", ")", "\n", "graph", ".", "ndata", "[", "'x'", "]", "=", "x", "\n", "\n", "# get extra label info", "\n", "stem", "=", "self", ".", "graph_files", "[", "idx", "]", ".", "stem", ".", "lower", "(", ")", "\n", "name", "=", "stem", "[", "2", ":", "-", "6", "]", "\n", "upper", "=", "stem", "[", "-", "5", ":", "]", "==", "'upper'", "\n", "light", "=", "name", ".", "find", "(", "'light'", ")", ">", "-", "1", "\n", "bold", "=", "name", ".", "find", "(", "'bold'", ")", ">", "-", "1", "\n", "script", "=", "name", ".", "find", "(", "'script'", ")", ">", "-", "1", "\n", "sans", "=", "name", ".", "find", "(", "'sans'", ")", ">", "-", "1", "\n", "font", "=", "self", ".", "fonts", "[", "name", "]", "\n", "letter", "=", "self", ".", "char_to_label", "(", "stem", "[", "0", "]", ")", "\n", "\n", "# get image", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_dir", ",", "self", ".", "graph_files", "[", "idx", "]", ".", "stem", "+", "'.png'", ")", "\n", "try", ":", "\n", "            ", "image", "=", "PIL", ".", "Image", ".", "open", "(", "image_path", ")", "\n", "transform", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "\n", "torchvision", ".", "transforms", ".", "Resize", "(", "[", "480", ",", "480", "]", ")", ",", "\n", "torchvision", ".", "transforms", ".", "ToTensor", "(", ")", "\n", "]", ")", "\n", "image", "=", "transform", "(", "image", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "f'Warning could not load image {image_path} - {e}'", ")", "\n", "image", "=", "torch", ".", "ones", "(", "[", "3", ",", "480", ",", "480", "]", ")", "\n", "\n", "", "meta", "=", "torch", ".", "tensor", "(", "[", "upper", ",", "light", ",", "bold", ",", "script", ",", "sans", ",", "font", ",", "letter", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "return", "graph", ",", "torch", ".", "tensor", "(", "[", "self", ".", "labels", "[", "idx", "]", "]", ")", ".", "long", "(", ")", ",", "meta", ",", "image", ",", "str", "(", "self", ".", "graph_files", "[", "idx", "]", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.solid_letters.SolidLETTERSSubset.feature_indices": [[291, 296], ["None"], "methods", ["None"], ["", "def", "feature_indices", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns a dictionary of mappings from the name of features to the channels containing them\n        \"\"\"", "\n", "return", "{", "\"xyz\"", ":", "(", "0", ",", "1", ",", "2", ")", ",", "\"normals\"", ":", "(", "3", ",", "4", ",", "5", ")", ",", "\"mask\"", ":", "(", "6", ",", ")", ",", "\"E\"", ":", "(", "7", ",", ")", ",", "\"F\"", ":", "(", "8", ",", ")", ",", "\"G\"", ":", "(", "9", ",", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.solid_letters.SolidMNISTWithPointclouds.__init__": [[307, 383], ["pathlib.Path", "pathlib.Path", "list", "list", "print", "print", "len", "print", "int", "random.sample", "int", "random.sample", "str", "solid_letters.SolidMNISTWithPointclouds.graph_files.append", "solid_letters.SolidMNISTWithPointclouds.pc_files.append", "solid_letters.SolidMNISTWithPointclouds.labels.append", "set", "print", "print", "print", "len", "len", "int", "random.sample", "str", "solid_letters.SolidMNISTWithPointclouds.char_to_label", "platform.system", "numpy.load", "len", "len", "pathlib.Path.glob", "font_util.valid_font", "pathlib.Path.glob", "font_util.valid_font", "len", "len", "len", "dgl.data.utils.load_graphs", "pathlib.Path"], "methods", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.solid_letters.SolidMNISTWithPointclouds.char_to_label", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.font_util.valid_font", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.font_util.valid_font"], ["    ", "def", "__init__", "(", "self", ",", "bin_root_dir", ",", "npy_root_dir", ",", "split", "=", "\"train\"", ",", "shape_type", "=", "None", ",", "size_percentage", "=", "None", ",", "in_memory", "=", "True", ",", "\n", "num_points", "=", "1024", ",", "\n", "apply_square_symmetry", "=", "0.0", ",", "split_suffix", "=", "\"\"", ")", ":", "\n", "        ", "\"\"\"\n        Load and create the SolidMNIST dataset\n        :param bin_root_dir: Root path to the dataset of bin files\n        :param npy_root_dir: Root path to the dataset of npy files\n        :param split: Whether train or test set\n        :param shape_type: Whether to load lower case or upper case characters. Must be 'lower' or 'upper'\n        :param size_percentage: Percentage of data to load per category\n        :param in_memory: Whether to keep the entire dataset in memory (This is always done in Windows)\n        :param apply_square_symmetry: Probability of randomly applying a square symmetry transform on the input surface grid (default: 0.0)\n        :param split_suffix: Suffix for the split directory to use\n        \"\"\"", "\n", "bin_path", "=", "pathlib", ".", "Path", "(", "bin_root_dir", ")", "\n", "npy_path", "=", "pathlib", ".", "Path", "(", "npy_root_dir", ")", "\n", "assert", "split", "in", "(", "\"train\"", ",", "\"val\"", ",", "\"test\"", ")", "\n", "if", "split", "==", "\"train\"", "or", "split", "==", "\"val\"", ":", "\n", "            ", "subfolder", "=", "\"train\"", "\n", "", "else", ":", "\n", "            ", "subfolder", "=", "\"test\"", "\n", "\n", "", "bin_path", "/=", "subfolder", "+", "split_suffix", "\n", "npy_path", "/=", "subfolder", "\n", "pointcloud_files", "=", "list", "(", "[", "x", "for", "x", "in", "npy_path", ".", "glob", "(", "\"*.npy\"", ")", "if", "valid_font", "(", "x", ")", "]", ")", "\n", "graph_files", "=", "list", "(", "[", "x", "for", "x", "in", "bin_path", ".", "glob", "(", "\"*.bin\"", ")", "if", "valid_font", "(", "x", ")", "]", ")", "\n", "print", "(", "\"Found {} {} data.\"", ".", "format", "(", "len", "(", "graph_files", ")", ",", "subfolder", ")", ")", "\n", "print", "(", "\"Found pointcloud {} {} data.\"", ".", "format", "(", "len", "(", "pointcloud_files", ")", ",", "subfolder", ")", ")", "\n", "\n", "self", ".", "in_memory", "=", "in_memory", "\n", "\n", "if", "split", "==", "\"train\"", ":", "\n", "            ", "k", "=", "int", "(", ".8", "*", "len", "(", "graph_files", ")", ")", "\n", "graph_files", "=", "random", ".", "sample", "(", "graph_files", ",", "k", ")", "\n", "", "elif", "split", "==", "\"val\"", ":", "\n", "            ", "k", "=", "int", "(", ".2", "*", "len", "(", "graph_files", ")", ")", "\n", "graph_files", "=", "random", ".", "sample", "(", "graph_files", ",", "k", ")", "\n", "\n", "", "if", "size_percentage", "!=", "None", ":", "\n", "            ", "k", "=", "int", "(", "size_percentage", "*", "len", "(", "graph_files", ")", ")", "\n", "graph_files", "=", "random", ".", "sample", "(", "graph_files", ",", "k", ")", "\n", "\n", "", "self", ".", "pc_hashmap", "=", "{", "}", "\n", "for", "file_name", "in", "pointcloud_files", ":", "\n", "# TODO: fix this weird extension and its handling", "\n", "            ", "query_name", "=", "file_name", ".", "name", "[", ":", "-", "8", "]", "# remove .stl.npy extension", "\n", "self", ".", "pc_hashmap", "[", "query_name", "]", "=", "str", "(", "file_name", ")", "\n", "\n", "", "self", ".", "graph_files", "=", "[", "]", "\n", "self", ".", "pc_files", "=", "[", "]", "\n", "self", ".", "labels", "=", "[", "]", "\n", "self", ".", "num_points", "=", "num_points", "\n", "\n", "for", "file_name", "in", "graph_files", ":", "\n", "            ", "query_name", "=", "file_name", ".", "name", "[", ":", "-", "4", "]", "# remove .bin extension", "\n", "if", "shape_type", "is", "not", "None", "and", "shape_type", "not", "in", "query_name", ":", "\n", "                ", "continue", "\n", "", "if", "query_name", "not", "in", "self", ".", "pc_hashmap", ":", "\n", "# print(\"Error: \", query_name)", "\n", "                ", "continue", "\n", "", "self", ".", "graph_files", ".", "append", "(", "str", "(", "file_name", ")", ")", "\n", "self", ".", "pc_files", ".", "append", "(", "self", ".", "pc_hashmap", "[", "query_name", "]", ")", "\n", "self", ".", "labels", ".", "append", "(", "self", ".", "char_to_label", "(", "pathlib", ".", "Path", "(", "file_name", ")", ".", "stem", "[", "0", "]", ")", ")", "\n", "\n", "", "self", ".", "num_classes", "=", "len", "(", "set", "(", "self", ".", "labels", ")", ")", "\n", "\n", "if", "platform", ".", "system", "(", ")", "==", "\"Windows\"", "or", "self", ".", "in_memory", ":", "\n", "            ", "print", "(", "\"Storing dataset in memory\"", ")", "\n", "print", "(", "\"Loading graphs...\"", ")", "\n", "self", ".", "graphs", "=", "[", "load_graphs", "(", "fn", ")", "[", "0", "]", "[", "0", "]", "for", "fn", "in", "self", ".", "graph_files", "]", "\n", "print", "(", "\"Loading pointclouds...\"", ")", "\n", "self", ".", "pointclouds", "=", "[", "np", ".", "load", "(", "fn", ")", "for", "fn", "in", "self", ".", "pc_files", "]", "\n", "", "print", "(", "\"Loaded {} face-adj graphs and {} pc files from {} classes\"", ".", "format", "(", "len", "(", "self", ".", "graph_files", ")", ",", "\n", "len", "(", "self", ".", "pc_files", ")", ",", "self", ".", "num_classes", ")", ")", "\n", "\n", "self", ".", "apply_square_symmetry", "=", "apply_square_symmetry", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.solid_letters.SolidMNISTWithPointclouds.__len__": [[384, 386], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "graph_files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.solid_letters.SolidMNISTWithPointclouds.char_to_label": [[387, 389], ["ord", "char.lower"], "methods", ["None"], ["", "def", "char_to_label", "(", "self", ",", "char", ")", ":", "\n", "        ", "return", "ord", "(", "char", ".", "lower", "(", ")", ")", "-", "97", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.solid_letters.SolidMNISTWithPointclouds.__getitem__": [[390, 414], ["solid_letters.corner_align", "torch.tensor().long", "str", "random.uniform", "random.uniform", "random.uniform", "platform.system", "numpy.load", "graph.ndata[].transpose", "torch.flip", "torch.flip", "torch.tensor", "pathlib.Path", "dgl.data.utils.load_graphs"], "methods", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.solid_letters.corner_align"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "platform", ".", "system", "(", ")", "==", "\"Windows\"", "or", "self", ".", "in_memory", ":", "\n", "            ", "graph", "=", "self", ".", "graphs", "[", "idx", "]", "\n", "pc", "=", "self", ".", "pointclouds", "[", "idx", "]", "[", ":", "self", ".", "num_points", "]", "\n", "", "else", ":", "\n", "            ", "graph_file", "=", "str", "(", "self", ".", "graph_files", "[", "idx", "]", ")", "\n", "graph", "=", "load_graphs", "(", "self", ".", "graph_files", "[", "idx", "]", ")", "[", "0", "]", "[", "0", "]", "\n", "pointcloud_file", "=", "self", ".", "pc_files", "[", "idx", "]", "\n", "pc", "=", "np", ".", "load", "(", "pointcloud_file", ")", "[", ":", "self", ".", "num_points", "]", "# ['arr_0']", "\n", "", "x", "=", "graph", ".", "ndata", "[", "'x'", "]", "\n", "x", "=", "corner_align", "(", "x", ")", "\n", "graph", ".", "ndata", "[", "'x'", "]", "=", "x", "\n", "if", "self", ".", "apply_square_symmetry", ">", "0.0", ":", "\n", "            ", "prob_r", "=", "random", ".", "uniform", "(", "0.0", ",", "1.0", ")", "\n", "if", "prob_r", "<", "self", ".", "apply_square_symmetry", ":", "\n", "                ", "graph", ".", "ndata", "[", "'x'", "]", "=", "graph", ".", "ndata", "[", "'x'", "]", ".", "transpose", "(", "1", ",", "2", ")", "\n", "", "prob_u", "=", "random", ".", "uniform", "(", "0.0", ",", "1.0", ")", "\n", "if", "prob_u", "<", "self", ".", "apply_square_symmetry", ":", "\n", "                ", "graph", ".", "ndata", "[", "'x'", "]", "=", "torch", ".", "flip", "(", "graph", ".", "ndata", "[", "'x'", "]", ",", "dims", "=", "[", "1", "]", ")", "\n", "", "prob_v", "=", "random", ".", "uniform", "(", "0.0", ",", "1.0", ")", "\n", "if", "prob_v", "<", "self", ".", "apply_square_symmetry", ":", "\n", "                ", "graph", ".", "ndata", "[", "'x'", "]", "=", "torch", ".", "flip", "(", "graph", ".", "ndata", "[", "'x'", "]", ",", "dims", "=", "[", "2", "]", ")", "\n", "", "", "label", "=", "torch", ".", "tensor", "(", "[", "self", ".", "labels", "[", "idx", "]", "]", ")", ".", "long", "(", ")", "\n", "return", "graph", ",", "pc", ",", "label", ",", "pathlib", ".", "Path", "(", "self", ".", "graph_files", "[", "idx", "]", ")", ".", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.solid_letters.SolidMNISTWithPointcloudsFontSubset.__init__": [[417, 434], ["solid_letters.SolidMNISTWithPointclouds.__init__", "list", "zip", "map", "font_name.lower", "solid_letters.SolidMNISTWithPointcloudsFontSubset.fonts.keys", "list", "filter", "zip", "solid_letters.SolidMNISTWithPointcloudsFontSubset.__init__.matching_font"], "methods", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.classifier.NonLinearClassifier.__init__"], ["    ", "def", "__init__", "(", "self", ",", "bin_root_dir", ",", "npy_root_dir", ",", "split", "=", "'test'", ")", ":", "\n", "        ", "super", "(", "SolidMNISTWithPointcloudsFontSubset", ",", "self", ")", ".", "__init__", "(", "bin_root_dir", ",", "npy_root_dir", ",", "split", ")", "\n", "self", ".", "fonts", "=", "{", "\n", "'turret road'", ":", "0", ",", "\n", "'zhi mang xing'", ":", "1", ",", "\n", "'abhaya libre'", ":", "2", ",", "\n", "'seaweed script'", ":", "3", "\n", "}", "\n", "\n", "def", "matching_font", "(", "file_name", ")", ":", "\n", "            ", "font_name", "=", "file_name", ".", "stem", "[", "2", ":", "-", "6", "]", "\n", "return", "font_name", ".", "lower", "(", ")", "in", "self", ".", "fonts", ".", "keys", "(", ")", "\n", "\n", "", "self", ".", "graph_files", "=", "list", "(", "map", "(", "pathlib", ".", "Path", ",", "self", ".", "graph_files", ")", ")", "\n", "\n", "self", ".", "graph_files", ",", "self", ".", "pointclouds", ",", "self", ".", "labels", "=", "zip", "(", "*", "list", "(", "\n", "filter", "(", "lambda", "x", ":", "matching_font", "(", "x", "[", "0", "]", ")", ",", "zip", "(", "self", ".", "graph_files", ",", "self", ".", "pointclouds", ",", "self", ".", "labels", ")", ")", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.solid_letters.simclr_collate": [[18, 25], ["map", "zip", "torch.stack", "dgl.batch", "dgl.batch", "zip"], "function", ["None"], ["def", "simclr_collate", "(", "batch", ")", ":", "\n", "    ", "g1_g2s", ",", "labels", ",", "meta", ",", "images", ",", "graph_files", "=", "map", "(", "list", ",", "zip", "(", "*", "batch", ")", ")", "\n", "g1s", ",", "g2s", "=", "zip", "(", "*", "g1_g2s", ")", "\n", "labels", "=", "torch", ".", "stack", "(", "labels", ")", "\n", "bg1", "=", "dgl", ".", "batch", "(", "g1s", ")", "\n", "bg2", "=", "dgl", ".", "batch", "(", "g2s", ")", "\n", "return", "(", "bg1", ",", "bg2", ")", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.solid_letters.original_collate": [[27, 32], ["map", "torch.stack", "dgl.batch", "zip"], "function", ["None"], ["", "def", "original_collate", "(", "batch", ")", ":", "\n", "    ", "graphs", ",", "labels", ",", "files", "=", "map", "(", "list", ",", "zip", "(", "*", "batch", ")", ")", "\n", "labels", "=", "torch", ".", "stack", "(", "labels", ")", "\n", "bg", "=", "dgl", ".", "batch", "(", "graphs", ")", "\n", "return", "bg", ",", "labels", ",", "files", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.solid_letters.my_collate": [[34, 41], ["map", "torch.stack", "dgl.batch", "torch.stack", "torch.stack", "zip"], "function", ["None"], ["", "def", "my_collate", "(", "batch", ")", ":", "\n", "    ", "graphs", ",", "labels", ",", "meta", ",", "images", ",", "graph_files", "=", "map", "(", "list", ",", "zip", "(", "*", "batch", ")", ")", "\n", "labels", "=", "torch", ".", "stack", "(", "labels", ")", "\n", "bg", "=", "dgl", ".", "batch", "(", "graphs", ")", "\n", "metas", "=", "torch", ".", "stack", "(", "meta", ")", "\n", "images", "=", "torch", ".", "stack", "(", "images", ")", "\n", "return", "bg", ",", "labels", ",", "metas", ",", "images", ",", "graph_files", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.solid_letters.collate_single_letter": [[43, 48], ["map", "torch.stack", "dgl.batch", "zip"], "function", ["None"], ["", "def", "collate_single_letter", "(", "batch", ")", ":", "\n", "    ", "graphs", ",", "labels", ",", "graph_files", "=", "map", "(", "list", ",", "zip", "(", "*", "batch", ")", ")", "\n", "labels", "=", "torch", ".", "stack", "(", "labels", ")", "\n", "bg", "=", "dgl", ".", "batch", "(", "graphs", ")", "\n", "return", "bg", ",", "labels", ",", "graph_files", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.solid_letters._make_dgl_graph": [[50, 57], ["dgl.DGLGraph", "dgl.DGLGraph.add_nodes", "torch.tensor().float", "dgl.DGLGraph.add_edges", "torch.tensor", "torch.ones"], "function", ["None"], ["", "def", "_make_dgl_graph", "(", "xs", ",", "edges", ",", "label", ")", ":", "\n", "    ", "g", "=", "dgl", ".", "DGLGraph", "(", ")", "\n", "g", ".", "add_nodes", "(", "xs", ".", "shape", "[", "0", "]", ")", "\n", "g", ".", "ndata", "[", "'x'", "]", "=", "torch", ".", "tensor", "(", "xs", ")", ".", "float", "(", ")", "\n", "g", ".", "add_edges", "(", "edges", "[", ":", ",", "0", "]", ",", "edges", "[", ":", ",", "1", "]", ")", "\n", "g", ".", "ndata", "[", "'y'", "]", "=", "(", "torch", ".", "ones", "(", "xs", ".", "shape", "[", "0", "]", ")", "*", "label", ")", ".", "long", "(", ")", "\n", "return", "g", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.solid_letters.collate_with_pointclouds": [[298, 304], ["map", "torch.stack", "dgl.batch", "torch.from_numpy().type", "zip", "torch.from_numpy", "numpy.stack"], "function", ["None"], ["", "", "def", "collate_with_pointclouds", "(", "batch", ")", ":", "\n", "    ", "graphs", ",", "pcs", ",", "labels", ",", "graph_files", "=", "map", "(", "list", ",", "zip", "(", "*", "batch", ")", ")", "\n", "labels", "=", "torch", ".", "stack", "(", "labels", ")", "\n", "bg", "=", "dgl", ".", "batch", "(", "graphs", ")", "\n", "pcs", "=", "torch", ".", "from_numpy", "(", "np", ".", "stack", "(", "pcs", ")", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "return", "bg", ",", "pcs", ",", "labels", ",", "graph_files", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.solid_letters._save_feature_to_csv": [[437, 449], ["feat[].numpy().reshape", "feat[].numpy().reshape", "numpy.savetxt", "len", "feat[].numpy", "feat[].numpy"], "function", ["None"], ["", "", "def", "_save_feature_to_csv", "(", "feat", ":", "torch", ".", "Tensor", ",", "filename", ")", ":", "\n", "    ", "\"\"\"\n    Save loaded feature to csv file to visualize sampled points\n    :param feat Features loaded from *.feat file of shape [#faces, #u, #v, 10]\n    :param filename Output csv filename\n    \"\"\"", "\n", "assert", "len", "(", "feat", ".", "shape", ")", "==", "4", "# faces x #u x #v x 10", "\n", "pts", "=", "feat", "[", ":", ",", ":", ",", ":", ",", ":", "3", "]", ".", "numpy", "(", ")", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", "\n", "mask", "=", "feat", "[", ":", ",", ":", ",", ":", ",", "6", "]", ".", "numpy", "(", ")", ".", "reshape", "(", "-", "1", ")", "\n", "point_indices_inside_faces", "=", "(", "mask", "==", "1", ")", "\n", "pts", "=", "pts", "[", "point_indices_inside_faces", ",", ":", "]", "\n", "np", ".", "savetxt", "(", "filename", ",", "pts", ",", "delimiter", "=", "\",\"", ",", "header", "=", "\"x,y,z\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.solid_letters._category_count": [[451, 468], ["list", "pathlib.Path", "numpy.zeros", "enumerate", "plt.bar", "plt.show", "len", "list", "len", "max", "numpy.arange", "pathlib.Path.glob", "len"], "function", ["None"], ["", "def", "_category_count", "(", "path", ")", ":", "\n", "    ", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "import", "pathlib", "\n", "import", "string", "\n", "import", "numpy", "as", "np", "\n", "\n", "alphabets", "=", "list", "(", "string", ".", "ascii_lowercase", ")", "\n", "path", "=", "pathlib", ".", "Path", "(", "path", ")", "\n", "count", "=", "np", ".", "zeros", "(", "len", "(", "alphabets", ")", ")", "\n", "max_count", "=", "0", "\n", "for", "i", ",", "alphabet", "in", "enumerate", "(", "alphabets", ")", ":", "\n", "        ", "files", "=", "list", "(", "path", ".", "glob", "(", "f'[{alphabet}]*.bin'", ")", ")", "\n", "count", "[", "i", "]", "=", "len", "(", "files", ")", "\n", "max_count", "=", "max", "(", "max_count", ",", "count", "[", "i", "]", ")", "\n", "", "count", "/=", "max_count", "\n", "plt", ".", "bar", "(", "np", ".", "arange", "(", "len", "(", "alphabets", ")", ")", ",", "count", ",", "tick_label", "=", "alphabets", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.solid_letters.bounding_box": [[470, 479], ["torch.tensor", "x.min", "y.min", "z.min", "x.max", "y.max", "z.max"], "function", ["None"], ["", "def", "bounding_box", "(", "input", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "x", "=", "input", "[", ":", ",", ":", ",", ":", ",", "0", "]", "\n", "y", "=", "input", "[", ":", ",", ":", ",", ":", ",", "1", "]", "\n", "z", "=", "input", "[", ":", ",", ":", ",", ":", ",", "2", "]", "\n", "box", "=", "[", "\n", "[", "x", ".", "min", "(", ")", ",", "y", ".", "min", "(", ")", ",", "z", ".", "min", "(", ")", "]", ",", "\n", "[", "x", ".", "max", "(", ")", ",", "y", ".", "max", "(", ")", ",", "z", ".", "max", "(", ")", "]", "\n", "]", "\n", "return", "torch", ".", "tensor", "(", "box", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.solid_letters.corner_align": [[481, 492], ["x.flatten().min", "y.flatten().min", "z.flatten().min", "torch.stack", "torch.cat", "x.flatten", "y.flatten", "z.flatten"], "function", ["None"], ["", "def", "corner_align", "(", "input", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "x", "=", "input", "[", ":", ",", ":", ",", ":", ",", "0", "]", "\n", "y", "=", "input", "[", ":", ",", ":", ",", ":", ",", "1", "]", "\n", "z", "=", "input", "[", ":", ",", ":", ",", ":", ",", "2", "]", "\n", "min_x", ",", "_", "=", "x", ".", "flatten", "(", ")", ".", "min", "(", "dim", "=", "-", "1", ")", "\n", "min_y", ",", "_", "=", "y", ".", "flatten", "(", ")", ".", "min", "(", "dim", "=", "-", "1", ")", "\n", "min_z", ",", "_", "=", "z", ".", "flatten", "(", ")", ".", "min", "(", "dim", "=", "-", "1", ")", "\n", "\n", "mins", "=", "torch", ".", "stack", "(", "[", "min_x", ",", "min_y", ",", "min_z", "]", ",", "dim", "=", "-", "1", ")", "\n", "out", "=", "input", "[", ":", ",", ":", ",", ":", ",", ":", "3", "]", "-", "mins", "[", "None", ",", "None", ",", "None", ",", ":", "]", "\n", "return", "torch", ".", "cat", "(", "[", "out", ",", "input", "[", ":", ",", ":", ",", ":", ",", "3", ":", "]", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.solid_letters.rotate_x": [[494, 503], ["torch.sin", "torch.cos", "torch.tensor", "torch.matmul"], "function", ["None"], ["", "def", "rotate_x", "(", "xyz", ":", "torch", ".", "Tensor", ",", "theta", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "sin_theta", "=", "torch", ".", "sin", "(", "theta", ")", "\n", "cos_theta", "=", "torch", ".", "cos", "(", "theta", ")", "\n", "r_x", "=", "torch", ".", "tensor", "(", "[", "\n", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "cos_theta", ",", "-", "sin_theta", "]", ",", "\n", "[", "0", ",", "sin_theta", ",", "cos_theta", "]", "\n", "]", ")", "\n", "return", "torch", ".", "matmul", "(", "xyz", ",", "r_x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.solid_letters.rotate_z": [[505, 514], ["torch.sin", "torch.cos", "torch.tensor", "torch.matmul"], "function", ["None"], ["", "def", "rotate_z", "(", "xyz", ":", "torch", ".", "Tensor", ",", "theta", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "sin_theta", "=", "torch", ".", "sin", "(", "theta", ")", "\n", "cos_theta", "=", "torch", ".", "cos", "(", "theta", ")", "\n", "r_z", "=", "torch", ".", "tensor", "(", "[", "\n", "[", "cos_theta", ",", "-", "sin_theta", ",", "0", "]", ",", "\n", "[", "sin_theta", ",", "cos_theta", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "\n", "]", ")", "\n", "return", "torch", ".", "matmul", "(", "xyz", ",", "r_z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.solid_letters.random_rotate": [[516, 532], ["torch.cat", "solid_letters.corner_align", "solid_letters.rotate_x", "solid_letters.rotate_x", "torch.rand", "solid_letters.rotate_z", "solid_letters.rotate_z", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.solid_letters.corner_align", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.solid_letters.rotate_x", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.solid_letters.rotate_x", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.solid_letters.rotate_z", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.solid_letters.rotate_z"], ["", "def", "random_rotate", "(", "x", ":", "torch", ".", "Tensor", ",", "axis", ":", "str", ")", ":", "\n", "    ", "theta", "=", "torch", ".", "rand", "(", "1", ")", "*", "2", "*", "math", ".", "pi", "\n", "xyz", "=", "x", "[", ":", ",", ":", ",", ":", ",", ":", "3", "]", "\n", "normals", "=", "x", "[", ":", ",", ":", ",", ":", ",", "3", ":", "6", "]", "\n", "rest", "=", "x", "[", ":", ",", ":", ",", ":", ",", "6", ":", "]", "\n", "if", "axis", "==", "'x'", ":", "\n", "        ", "xyz", "=", "rotate_x", "(", "xyz", ",", "theta", ")", "\n", "normals", "=", "rotate_x", "(", "normals", ",", "theta", ")", "\n", "", "elif", "axis", "==", "'z'", ":", "\n", "        ", "xyz", "=", "rotate_z", "(", "xyz", ",", "theta", ")", "\n", "normals", "=", "rotate_z", "(", "normals", ",", "theta", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'random rotation should be \\'x\\' or \\'z\\''", ")", "\n", "", "rotated", "=", "torch", ".", "cat", "(", "[", "xyz", ",", "normals", ",", "rest", "]", ",", "dim", "=", "-", "1", ")", "\n", "aligned", "=", "corner_align", "(", "rotated", ")", "\n", "return", "aligned", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.solid_letters.identity_transform": [[534, 536], ["None"], "function", ["None"], ["", "def", "identity_transform", "(", "x", ")", ":", "\n", "    ", "return", "x", "\n", "", ""]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.font_util.valid_font": [[90, 95], ["name.lower", "str().lower", "str"], "function", ["None"], ["", "def", "save_feature_to_csv", "(", "feat", ":", "torch", ".", "Tensor", ",", "filename", ")", ":", "\n", "    ", "\"\"\"\n    Save loaded feature to csv file to visualize sampled points\n    :param feat Features loaded from *.feat file of shape [#faces, #u, #v, 10]\n    :param filename Output csv filename\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.font_util.save_feature_to_csv": [[97, 113], ["feat[].numpy().reshape", "feat[].numpy().reshape", "matplotlib.figure", "plt.figure.add_subplot", "fig.add_subplot.scatter", "matplotlib.show", "numpy.savetxt", "len", "feat[].numpy", "feat[].numpy"], "function", ["None"], ["pts", "=", "feat", "[", ":", ",", ":", ",", ":", ",", ":", "3", "]", ".", "numpy", "(", ")", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", "\n", "mask", "=", "feat", "[", ":", ",", ":", ",", ":", ",", "6", "]", ".", "numpy", "(", ")", ".", "reshape", "(", "-", "1", ")", "\n", "point_indices_inside_faces", "=", "mask", "==", "1", "\n", "pts", "=", "pts", "[", "point_indices_inside_faces", ",", ":", "]", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ",", "projection", "=", "\"3d\"", ")", "\n", "ax", ".", "scatter", "(", "pts", "[", ":", ",", "0", "]", ",", "pts", "[", ":", ",", "1", "]", ",", "pts", "[", ":", ",", "2", "]", ")", "\n", "plt", ".", "show", "(", ")", "\n", "np", ".", "savetxt", "(", "filename", ",", "pts", ",", "delimiter", "=", "\",\"", ",", "header", "=", "\"x,y,z\"", ")", "\n", "\n", "\n", "", "def", "bounding_box_uvsolid", "(", "inp", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "pts", "=", "inp", "[", ":", ",", ":", ",", ":", ",", ":", "3", "]", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", "\n", "mask", "=", "inp", "[", ":", ",", ":", ",", ":", ",", "6", "]", ".", "reshape", "(", "-", "1", ")", "\n", "point_indices_inside_faces", "=", "mask", "==", "1", "\n", "pts", "=", "pts", "[", "point_indices_inside_faces", ",", ":", "]", "\n", "return", "bounding_box_pointcloud", "(", "pts", ")", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.font_util.bounding_box_uvsolid": [[115, 121], ["inp[].reshape", "inp[].reshape", "font_util.bounding_box_pointcloud"], "function", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.font_util.bounding_box_pointcloud"], ["\n", "", "def", "bounding_box_pointcloud", "(", "pts", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "x", "=", "pts", "[", ":", ",", "0", "]", "\n", "y", "=", "pts", "[", ":", ",", "1", "]", "\n", "z", "=", "pts", "[", ":", ",", "2", "]", "\n", "box", "=", "[", "[", "x", ".", "min", "(", ")", ",", "y", ".", "min", "(", ")", ",", "z", ".", "min", "(", ")", "]", ",", "[", "x", ".", "max", "(", ")", ",", "y", ".", "max", "(", ")", ",", "z", ".", "max", "(", ")", "]", "]", "\n", "return", "torch", ".", "tensor", "(", "box", ")", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.font_util.bounding_box_pointcloud": [[123, 129], ["torch.tensor", "x.min", "y.min", "z.min", "x.max", "y.max", "z.max"], "function", ["None"], ["\n", "", "def", "center_and_scale_uvsolid", "(", "inp", ":", "torch", ".", "Tensor", ",", "return_center_scale", "=", "False", ")", ":", "\n", "    ", "bbox", "=", "bounding_box_uvsolid", "(", "inp", ")", "\n", "diag", "=", "bbox", "[", "1", "]", "-", "bbox", "[", "0", "]", "\n", "scale", "=", "2.0", "/", "max", "(", "diag", "[", "0", "]", ",", "diag", "[", "1", "]", ",", "diag", "[", "2", "]", ")", "\n", "center", "=", "0.5", "*", "(", "bbox", "[", "0", "]", "+", "bbox", "[", "1", "]", ")", "\n", "inp", "[", ":", ",", ":", ",", ":", ",", ":", "3", "]", "-=", "center", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.font_util.center_and_scale_uvsolid": [[131, 141], ["font_util.bounding_box_uvsolid", "max"], "function", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.font_util.bounding_box_uvsolid"], ["if", "return_center_scale", ":", "\n", "        ", "return", "inp", ",", "center", ",", "scale", "\n", "", "return", "inp", "\n", "\n", "\n", "", "def", "center_and_scale_pointcloud", "(", "inp", ":", "torch", ".", "Tensor", ",", "return_center_scale", "=", "False", ")", ":", "\n", "    ", "bbox", "=", "bounding_box_pointcloud", "(", "inp", ")", "\n", "diag", "=", "bbox", "[", "1", "]", "-", "bbox", "[", "0", "]", "\n", "scale", "=", "2.0", "/", "max", "(", "diag", "[", "0", "]", ",", "diag", "[", "1", "]", ",", "diag", "[", "2", "]", ")", "\n", "center", "=", "0.5", "*", "(", "bbox", "[", "0", "]", "+", "bbox", "[", "1", "]", ")", "\n", "inp", "[", ":", ",", ":", "3", "]", "-=", "center", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.font_util.center_and_scale_pointcloud": [[143, 153], ["font_util.bounding_box_pointcloud", "max"], "function", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.datasets.font_util.bounding_box_pointcloud"], ["if", "return_center_scale", ":", "\n", "        ", "return", "inp", ",", "center", ",", "scale", "\n", "", "return", "inp", "\n", "", ""]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.experiments.pytorch_probe_score.GramLayerDataset.__init__": [[14, 18], ["torch.utils.data.Dataset.__init__", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.classifier.NonLinearClassifier.__init__"], ["    ", "def", "__init__", "(", "self", ",", "grams", ",", "labels", ")", ":", "\n", "        ", "super", "(", "GramLayerDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "grams", "=", "torch", ".", "tensor", "(", "grams", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "self", ".", "labels", "=", "torch", ".", "tensor", "(", "labels", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.experiments.pytorch_probe_score.GramLayerDataset.__getitem__": [[19, 21], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ":", "int", ")", ":", "\n", "        ", "return", "self", ".", "grams", "[", "index", "]", ",", "self", ".", "labels", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.experiments.pytorch_probe_score.GramLayerDataset.__len__": [[22, 24], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "len", "(", "self", ".", "grams", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.experiments.pytorch_probe_score.probe_score": [[26, 90], ["zip", "pandas.DataFrame", "print", "sklearn.preprocessing.StandardScaler().fit_transform", "sklearn.model_selection.StratifiedKFold().split", "layers.append", "accuracies.append", "stds.append", "pytorch_probe_score.GramLayerDataset", "pytorch_probe_score.GramLayerDataset", "torch.utils.data.dataset.random_split", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "pl_bolts.models.regression.LogisticRegression", "pytorch_lightning.callbacks.EarlyStopping", "pytorch_lightning.Trainer", "pl.Trainer.fit", "pl.Trainer.test", "accs.append", "numpy.mean", "numpy.std", "sklearn.preprocessing.StandardScaler", "sklearn.model_selection.StratifiedKFold", "len", "int", "set", "len", "int", "len", "len"], "function", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.test_classifier.test"], ["", "", "def", "probe_score", "(", "grams", ",", "batch_size", "=", "4096", ",", "fast_dev_run", "=", "False", ")", ":", "\n", "    ", "layers", "=", "[", "]", "\n", "accuracies", "=", "[", "]", "\n", "stds", "=", "[", "]", "\n", "\n", "for", "layer", ",", "X", "in", "zip", "(", "grams", ".", "layer_names", ",", "grams", ")", ":", "\n", "        ", "X", "=", "StandardScaler", "(", ")", ".", "fit_transform", "(", "X", ")", "\n", "folds", "=", "StratifiedKFold", "(", "n_splits", "=", "5", ",", "shuffle", "=", "True", ")", ".", "split", "(", "X", ",", "grams", ".", "labels", ")", "\n", "accs", "=", "[", "]", "\n", "for", "split", "in", "folds", ":", "\n", "            ", "train_idx", ",", "test_idx", "=", "split", "\n", "\n", "dset", "=", "GramLayerDataset", "(", "X", "[", "train_idx", "]", ",", "grams", ".", "labels", "[", "train_idx", "]", ")", "\n", "test_dset", "=", "GramLayerDataset", "(", "X", "[", "test_idx", "]", ",", "grams", ".", "labels", "[", "test_idx", "]", ")", "\n", "\n", "train_dset", ",", "val_dset", "=", "random_split", "(", "dset", ",", "lengths", "=", "[", "int", "(", "len", "(", "dset", ")", "*", "0.9", ")", ",", "len", "(", "dset", ")", "-", "int", "(", "len", "(", "dset", ")", "*", "0.9", ")", "]", ")", "\n", "\n", "train_loader", "=", "DataLoader", "(", "dataset", "=", "train_dset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "False", ",", "\n", "num_workers", "=", "8", ")", "\n", "\n", "val_loader", "=", "DataLoader", "(", "dataset", "=", "val_dset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "drop_last", "=", "False", ",", "\n", "num_workers", "=", "8", ")", "\n", "\n", "test_loader", "=", "DataLoader", "(", "dataset", "=", "test_dset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "drop_last", "=", "False", ",", "\n", "num_workers", "=", "8", ")", "\n", "\n", "model", "=", "LogisticRegression", "(", "input_dim", "=", "X", ".", "shape", "[", "-", "1", "]", ",", "\n", "learning_rate", "=", "1e-3", ",", "\n", "l2_strength", "=", "1e-4", ",", "\n", "num_classes", "=", "len", "(", "set", "(", "grams", ".", "labels", ")", ")", ")", "\n", "\n", "# fit", "\n", "early_stopping", "=", "EarlyStopping", "(", "monitor", "=", "'val_ce_loss'", ",", "\n", "patience", "=", "20", ")", "\n", "\n", "trainer", "=", "pl", ".", "Trainer", "(", "gpus", "=", "[", "0", "]", ",", "\n", "check_val_every_n_epoch", "=", "5", ",", "\n", "callbacks", "=", "[", "early_stopping", "]", ",", "\n", "fast_dev_run", "=", "fast_dev_run", ")", "\n", "trainer", ".", "fit", "(", "model", "=", "model", ",", "\n", "train_dataloader", "=", "train_loader", ",", "\n", "val_dataloaders", "=", "val_loader", ")", "\n", "\n", "result", "=", "trainer", ".", "test", "(", "test_dataloaders", "=", "test_loader", ")", "\n", "accs", ".", "append", "(", "result", "[", "0", "]", "[", "'test_acc'", "]", ")", "\n", "\n", "", "layers", ".", "append", "(", "layer", ")", "\n", "accuracies", ".", "append", "(", "np", ".", "mean", "(", "accs", ")", ")", "\n", "stds", ".", "append", "(", "np", ".", "std", "(", "accs", ")", ")", "\n", "\n", "", "df", "=", "pd", ".", "DataFrame", "(", "{", "\n", "'layer'", ":", "layers", ",", "\n", "'linear_probe'", ":", "accuracies", ",", "\n", "'linear_probe_err'", ":", "stds", "\n", "}", ")", "\n", "print", "(", "df", ")", "\n", "return", "df", "\n", "", ""]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.experiments.font_selection_optimize.hits_at_k_score": [[20, 33], ["utils.pad_grams().to", "weighted.sum", "set", "scores.append", "numpy.mean", "numpy.std", "utils.pad_grams", "torch.cosine_similarity", "[].detach().cpu().numpy", "len", "set.intersection", "[].detach().cpu", "set", "[].detach", "torch.argsort"], "function", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.utils.pad_grams"], ["def", "hits_at_k_score", "(", "X", ",", "weights", ",", "positives", ",", "k", "=", "10", ")", ":", "\n", "    ", "X", "=", "pad_grams", "(", "X", ")", ".", "to", "(", "device", ")", "\n", "# X shape: N x 7 x 70", "\n", "scores", "=", "[", "]", "\n", "for", "query", "in", "positives", ":", "\n", "        ", "q", "=", "X", "[", "query", "]", "\n", "layerwise_distances", "=", "1", "-", "torch", ".", "cosine_similarity", "(", "q", "[", "None", ",", ":", ",", ":", "]", ",", "X", ",", "dim", "=", "-", "1", ")", "\n", "weighted", "=", "layerwise_distances", "*", "weights", "[", "None", ",", ":", "]", "\n", "distances", "=", "weighted", ".", "sum", "(", "-", "1", ")", "# type: torch.Tensor", "\n", "neighbours", "=", "set", "(", "torch", ".", "argsort", "(", "distances", ")", "[", ":", "k", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "score", "=", "len", "(", "neighbours", ".", "intersection", "(", "set", "(", "positives", ")", ")", ")", "/", "k", "\n", "scores", ".", "append", "(", "score", ")", "\n", "", "return", "np", ".", "mean", "(", "scores", ")", ",", "np", ".", "std", "(", "scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.experiments.font_selection_optimize.compute": [[35, 82], ["os.path.join", "os.path.join", "os.path.exists", "open", "open.write", "numpy.array", "sklearn.utils.shuffle", "pandas.DataFrame", "pd.DataFrame.to_csv", "open.close", "os.path.exists", "os.makedirs", "list", "list", "few_shot.optimize", "open.write", "torch.tensor().to", "font_selection_optimize.hits_at_k_score", "pos_neg.append", "scores.append", "errs.append", "map", "numpy.arange", "set().difference", "sklearn.utils.shuffle", "score.mean", "err.mean", "len", "numpy.bitwise_and", "set", "torch.tensor", "set", "torch.tensor().to.tolist", "numpy.arange", "len"], "function", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.few_shot.optimize", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.experiments.font_selection_optimize.hits_at_k_score"], ["", "def", "compute", "(", "font", ",", "trial", ",", "upper", ")", ":", "\n", "    ", "file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "exp_name", ",", "f'trial_{trial}_font_{font}_{\"upper\" if upper else \"lower\"}.csv'", ")", "\n", "log_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "exp_name", ",", "f'trial_{trial}_font_{font}_{\"upper\" if upper else \"lower\"}.log'", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "file", ")", ":", "\n", "        ", "return", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "exp_name", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "exp_name", ")", "\n", "\n", "", "log", "=", "open", "(", "log_file", ",", "'w'", ")", "\n", "log", ".", "write", "(", "'positives,negatives,weights\\n'", ")", "\n", "\n", "pos_neg", "=", "[", "]", "\n", "scores", "=", "[", "]", "\n", "errs", "=", "[", "]", "\n", "\n", "uppers", "=", "np", ".", "array", "(", "list", "(", "map", "(", "lambda", "f", ":", "f", "[", "-", "9", ":", "-", "4", "]", "==", "'upper'", ",", "grams", ".", "graph_files", ")", ")", ")", "\n", "\n", "positives_idx", "=", "shuffle", "(", "np", ".", "arange", "(", "len", "(", "grams", ".", "labels", ")", ")", "[", "np", ".", "bitwise_and", "(", "grams", ".", "labels", "==", "font", ",", "uppers", "==", "upper", ")", "]", ")", "\n", "\n", "p_n", "=", "[", "(", "p", ",", "n", ")", "for", "p", "in", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "10", "]", "for", "n", "in", "[", "0", ",", "50", ",", "100", "]", "]", "\n", "for", "(", "p", ",", "n", ")", "in", "p_n", ":", "\n", "        ", "pos", "=", "positives_idx", "[", ":", "p", "]", "\n", "negatives_idx", "=", "list", "(", "set", "(", "np", ".", "arange", "(", "len", "(", "grams", ".", "labels", ")", ")", ")", ".", "difference", "(", "set", "(", "pos", ")", ")", ")", "\n", "neg", "=", "shuffle", "(", "negatives_idx", ")", "[", ":", "n", "]", "\n", "\n", "weights", "=", "optimize", "(", "positive_idx", "=", "pos", ",", "\n", "negative_idx", "=", "neg", ",", "\n", "grams", "=", "reduced", ",", "\n", "metric", "=", "'cosine'", ")", "\n", "log", ".", "write", "(", "f'{p},{n},\"{weights.tolist()}\"\\n'", ")", "\n", "weights", "=", "torch", ".", "tensor", "(", "weights", ")", ".", "to", "(", "device", ")", "\n", "\n", "score", ",", "err", "=", "hits_at_k_score", "(", "reduced", ",", "weights", ",", "positives_idx", ",", "k", "=", "10", ")", "\n", "\n", "pos_neg", ".", "append", "(", "(", "p", ",", "n", ")", ")", "\n", "scores", ".", "append", "(", "score", ".", "mean", "(", ")", ")", "\n", "errs", ".", "append", "(", "err", ".", "mean", "(", ")", ")", "\n", "\n", "", "df", "=", "pd", ".", "DataFrame", "(", "{", "\n", "'pos_neg'", ":", "pos_neg", ",", "\n", "'score'", ":", "scores", ",", "\n", "'err'", ":", "errs", "\n", "}", ")", "\n", "\n", "df", ".", "to_csv", "(", "file", ")", "\n", "log", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.experiments.logistic_regression.GramDataset.__init__": [[22, 42], ["torch.utils.data.Dataset.__init__", "utils.Grams", "glob.glob.glob", "pathlib.Path", "logistic_regression.GramDataset.files.append", "logistic_regression.GramDataset.labels.append", "pathlib.Path", "enumerate", "enumerate"], "methods", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.classifier.NonLinearClassifier.__init__"], ["    ", "def", "__init__", "(", "self", ",", "data_root", ",", "cats_dirs", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "files", "=", "[", "]", "\n", "self", ".", "labels", "=", "[", "]", "\n", "self", ".", "categories", "=", "[", "Path", "(", "cats_dir", ")", ".", "stem", "for", "cats_dir", "in", "cats_dirs", "]", "\n", "\n", "files", "=", "[", "]", "\n", "for", "cats_dir", "in", "cats_dirs", ":", "\n", "            ", "files", "+=", "glob", "(", "cats_dir", "+", "'/*.png'", ")", "\n", "\n", "", "self", ".", "grams", "=", "Grams", "(", "data_root", ")", "\n", "self", ".", "name_to_id", "=", "{", "name", ":", "id", "for", "id", ",", "name", "in", "enumerate", "(", "self", ".", "grams", ".", "graph_files", ")", "}", "\n", "\n", "cat_to_label", "=", "{", "cat", ":", "label", "for", "label", ",", "cat", "in", "enumerate", "(", "self", ".", "categories", ")", "}", "\n", "\n", "for", "file", "in", "files", ":", "\n", "            ", "path", "=", "Path", "(", "file", ")", "\n", "self", ".", "files", ".", "append", "(", "path", ".", "stem", "+", "'.bin'", ")", "\n", "self", ".", "labels", ".", "append", "(", "cat_to_label", "[", "path", ".", "parent", ".", "stem", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.experiments.logistic_regression.GramDataset.__getitem__": [[43, 47], ["len", "torch.cat", "torch.tensor", "range"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "num_layers", "=", "len", "(", "self", ".", "grams", ".", "layer_names", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "torch", ".", "tensor", "(", "self", ".", "grams", "[", "i", "]", "[", "index", "]", ")", "for", "i", "in", "range", "(", "num_layers", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "return", "x", ",", "self", ".", "labels", "[", "index", "]", ",", "self", ".", "files", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.experiments.logistic_regression.GramDataset.__len__": [[48, 50], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.experiments.logistic_regression.GramDataset.collate": [[51, 55], ["zip", "torch.stack", "torch.tensor"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "collate", "(", "data", ")", ":", "\n", "        ", "x", ",", "labels", ",", "_", "=", "zip", "(", "*", "data", ")", "\n", "return", "torch", ".", "stack", "(", "x", ")", ",", "torch", ".", "tensor", "(", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.experiments.logistic_regression.GramsDataModule.__init__": [[58, 72], ["pytorch_lightning.LightningDataModule.__init__", "logistic_regression.GramDataset", "sum", "len", "int", "int", "torch.utils.data.dataset.random_split", "len", "len", "len", "range", "len"], "methods", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.classifier.NonLinearClassifier.__init__"], ["    ", "def", "__init__", "(", "self", ",", "data_root", ",", "cats_dirs", ",", "val_size", "=", "0.1", ",", "test_size", "=", "0.1", ",", "batch_size", "=", "32", ",", "num_workers", "=", "8", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "num_workers", "=", "num_workers", "\n", "\n", "dset", "=", "GramDataset", "(", "data_root", "=", "data_root", ",", "\n", "cats_dirs", "=", "cats_dirs", ")", "\n", "self", ".", "dims", "=", "sum", "(", "[", "dset", ".", "grams", "[", "i", "]", ".", "shape", "[", "-", "1", "]", "for", "i", "in", "range", "(", "len", "(", "dset", ".", "grams", ")", ")", "]", ")", "\n", "self", ".", "num_classes", "=", "len", "(", "dset", ".", "categories", ")", "\n", "\n", "num_test", "=", "int", "(", "test_size", "*", "len", "(", "dset", ")", ")", "\n", "num_val", "=", "int", "(", "val_size", "*", "len", "(", "dset", ")", ")", "\n", "num_train", "=", "len", "(", "dset", ")", "-", "num_test", "-", "num_val", "\n", "self", ".", "train", ",", "self", ".", "val", ",", "self", ".", "test", "=", "random_split", "(", "dset", ",", "[", "num_train", ",", "num_val", ",", "num_test", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.experiments.logistic_regression.GramsDataModule.train_dataloader": [[73, 76], ["torch.utils.data.DataLoader"], "methods", ["None"], ["", "def", "train_dataloader", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "DataLoader", "(", "self", ".", "train", ",", "self", ".", "batch_size", ",", "shuffle", "=", "True", ",", "collate_fn", "=", "GramDataset", ".", "collate", ",", "\n", "num_workers", "=", "self", ".", "num_workers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.experiments.logistic_regression.GramsDataModule.val_dataloader": [[77, 80], ["torch.utils.data.DataLoader"], "methods", ["None"], ["", "def", "val_dataloader", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "DataLoader", "(", "self", ".", "val", ",", "self", ".", "batch_size", ",", "shuffle", "=", "False", ",", "collate_fn", "=", "GramDataset", ".", "collate", ",", "\n", "num_workers", "=", "self", ".", "num_workers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.experiments.logistic_regression.GramsDataModule.test_dataloader": [[81, 84], ["torch.utils.data.DataLoader"], "methods", ["None"], ["", "def", "test_dataloader", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "DataLoader", "(", "self", ".", "test", ",", "self", ".", "batch_size", ",", "shuffle", "=", "False", ",", "collate_fn", "=", "GramDataset", ".", "collate", ",", "\n", "num_workers", "=", "self", ".", "num_workers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.experiments.logistic_regression.main": [[86, 125], ["os.path.join", "print", "logistic_regression.GramsDataModule", "pl_bolts.models.regression.LogisticRegression", "pytorch_lightning.callbacks.ModelCheckpoint", "pytorch_lightning.Trainer", "pytorch_lightning.Trainer.fit", "pytorch_lightning.Trainer.test", "os.path.exists", "open", "log.write", "log.flush", "open", "log.write", "vars"], "function", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.test_classifier.test"], ["", "", "def", "main", "(", "args", ")", ":", "\n", "    ", "log_file", "=", "os", ".", "path", ".", "join", "(", "file_dir", ",", "'abc_quant_results.csv'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "log_file", ")", ":", "\n", "        ", "with", "open", "(", "log_file", ",", "'w'", ")", "as", "log", ":", "\n", "            ", "log", ".", "write", "(", "'val_acc;test_acc;config\\n'", ")", "\n", "\n", "", "", "print", "(", "'loading data...'", ")", "\n", "data_module", "=", "GramsDataModule", "(", "data_root", "=", "args", ".", "data_root", ",", "\n", "cats_dirs", "=", "args", ".", "cats_dirs", ",", "\n", "num_workers", "=", "1", ")", "\n", "model", "=", "LogisticRegression", "(", "input_dim", "=", "data_module", ".", "dims", ",", "\n", "num_classes", "=", "data_module", ".", "num_classes", ",", "\n", "learning_rate", "=", "1e-4", ",", "\n", "l2_strength", "=", "args", ".", "l2", ")", "\n", "\n", "checkpoint_callback", "=", "ModelCheckpoint", "(", "\n", "filepath", "=", "f'checkpoints/version_{args.trial}/best'", ",", "\n", "verbose", "=", "True", ",", "\n", "save_top_k", "=", "1", ",", "\n", "monitor", "=", "'val_loss'", ",", "\n", "mode", "=", "'min'", "\n", ")", "\n", "\n", "trainer", "=", "Trainer", "(", "\n", "# checkpoint_callback=checkpoint_callback,", "\n", "gpus", "=", "[", "0", "]", ",", "\n", "max_epochs", "=", "10", ")", "\n", "\n", "trainer", ".", "fit", "(", "model", "=", "model", ",", "\n", "datamodule", "=", "data_module", ")", "\n", "\n", "val_acc", "=", "trainer", ".", "callback_metrics", "[", "'val_acc'", "]", "\n", "\n", "result", "=", "trainer", ".", "test", "(", ")", "\n", "test_acc", "=", "result", "[", "0", "]", "[", "'test_acc'", "]", "\n", "\n", "with", "open", "(", "log_file", ",", "'a'", ")", "as", "log", ":", "\n", "        ", "log", ".", "write", "(", "f'{val_acc};{test_acc};{vars(args)}\\n'", ")", "\n", "log", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.experiments.dimension_reduction_probes.reduce": [[14, 19], ["sklearn.decomposition.PCA().fit_transform", "sklearn.decomposition.PCA"], "function", ["None"], ["def", "reduce", "(", "x", ",", "dims", ")", ":", "\n", "    ", "if", "dims", "is", "None", "or", "x", ".", "shape", "[", "-", "1", "]", "<", "dims", ":", "\n", "        ", "return", "x", "\n", "", "else", ":", "\n", "        ", "return", "PCA", "(", "n_components", "=", "dims", ")", ".", "fit_transform", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.experiments.abc_logistic_regression.compute": [[14, 22], ["subprocess.run", "os.path.join", "str", "str"], "function", ["None"], ["def", "compute", "(", "version", ",", "config", ")", ":", "\n", "# print(config)", "\n", "    ", "subprocess", ".", "run", "(", "[", "sys", ".", "executable", ",", "os", ".", "path", ".", "join", "(", "file_dir", ",", "'logistic_regression.py'", ")", ",", "\n", "'--data_root'", ",", "config", "[", "'data_root'", "]", ",", "\n", "'--cats_dir'", ",", "*", "config", "[", "'cats_dirs'", "]", ",", "\n", "'--l2'", ",", "config", "[", "'l2'", "]", ",", "\n", "'--version'", ",", "str", "(", "version", ")", ",", "\n", "'--trial'", ",", "str", "(", "config", "[", "'trial'", "]", ")", "]", ",", "\n", "# stdout=sys.stdout,", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.experiments.font_selection_optimize_collate_and_plot.heatmap": [[20, 80], ["plt.gca.imshow", "plt.gca.figure.colorbar", "ax.figure.colorbar.ax.set_ylabel", "plt.gca.set_xticks", "plt.gca.set_yticks", "plt.gca.set_xticklabels", "plt.gca.set_yticklabels", "plt.gca.spines.items", "plt.gca.set_xticks", "plt.gca.set_yticks", "plt.gca.grid", "plt.gca.tick_params", "matplotlib.gca", "numpy.arange", "numpy.arange", "plt.gca.tick_params", "spine.set_visible", "numpy.arange", "numpy.arange"], "function", ["None"], ["def", "heatmap", "(", "data", ",", "row_labels", ",", "col_labels", ",", "ax", "=", "None", ",", "\n", "cbar_kw", "=", "{", "}", ",", "cbarlabel", "=", "\"\"", ",", "label_top", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Create a heatmap from a numpy array and two lists of labels.\n\n    Parameters\n    ----------\n    data\n        A 2D numpy array of shape (N, M).\n    row_labels\n        A list or array of length N with the labels for the rows.\n    col_labels\n        A list or array of length M with the labels for the columns.\n    ax\n        A `matplotlib.axes.Axes` instance to which the heatmap is plotted.  If\n        not provided, use current axes or create a new one.  Optional.\n    cbar_kw\n        A dictionary with arguments to `matplotlib.Figure.colorbar`.  Optional.\n    cbarlabel\n        The label for the colorbar.  Optional.\n    **kwargs\n        All other arguments are forwarded to `imshow`.\n    \"\"\"", "\n", "\n", "if", "not", "ax", ":", "\n", "        ", "ax", "=", "plt", ".", "gca", "(", ")", "# type: plt.Axes", "\n", "\n", "# Plot the heatmap", "\n", "", "im", "=", "ax", ".", "imshow", "(", "data", ",", "**", "kwargs", ")", "\n", "\n", "# Create colorbar", "\n", "cbar", "=", "ax", ".", "figure", ".", "colorbar", "(", "im", ",", "ax", "=", "ax", ",", "**", "cbar_kw", ")", "\n", "cbar", ".", "ax", ".", "set_ylabel", "(", "cbarlabel", ",", "rotation", "=", "-", "90", ",", "va", "=", "\"bottom\"", ")", "\n", "\n", "# We want to show all ticks...", "\n", "ax", ".", "set_xticks", "(", "np", ".", "arange", "(", "data", ".", "shape", "[", "1", "]", ")", ")", "\n", "ax", ".", "set_yticks", "(", "np", ".", "arange", "(", "data", ".", "shape", "[", "0", "]", ")", ")", "\n", "# ... and label them with the respective list entries.", "\n", "ax", ".", "set_xticklabels", "(", "col_labels", ")", "\n", "ax", ".", "set_yticklabels", "(", "row_labels", ")", "\n", "\n", "if", "label_top", ":", "\n", "# Let the horizontal axes labeling appear on top.", "\n", "        ", "ax", ".", "tick_params", "(", "top", "=", "True", ",", "bottom", "=", "False", ",", "\n", "labeltop", "=", "True", ",", "labelbottom", "=", "False", ")", "\n", "\n", "# Rotate the tick labels and set their alignment.", "\n", "# plt.setp(ax.get_xticklabels(), rotation=None, ha=\"right\",", "\n", "#          rotation_mode=\"anchor\")", "\n", "\n", "# Turn spines off and create white grid.", "\n", "", "for", "edge", ",", "spine", "in", "ax", ".", "spines", ".", "items", "(", ")", ":", "\n", "        ", "spine", ".", "set_visible", "(", "False", ")", "\n", "\n", "", "ax", ".", "set_xticks", "(", "np", ".", "arange", "(", "data", ".", "shape", "[", "1", "]", "+", "1", ")", "-", ".5", ",", "minor", "=", "True", ")", "\n", "ax", ".", "set_yticks", "(", "np", ".", "arange", "(", "data", ".", "shape", "[", "0", "]", "+", "1", ")", "-", ".5", ",", "minor", "=", "True", ")", "\n", "ax", ".", "grid", "(", "which", "=", "\"minor\"", ",", "color", "=", "\"w\"", ",", "linestyle", "=", "'-'", ",", "linewidth", "=", "3", ")", "\n", "ax", ".", "tick_params", "(", "which", "=", "\"minor\"", ",", "bottom", "=", "False", ",", "left", "=", "False", ")", "\n", "\n", "return", "im", ",", "cbar", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.experiments.font_selection_optimize_collate_and_plot.annotate_heatmap": [[82, 144], ["dict", "dict.update", "isinstance", "isinstance", "im.get_array", "im.norm", "matplotlib.ticker.StrMethodFormatter", "range", "range", "im.norm", "range", "range", "im.get_array.max", "dict.update", "im.axes.text", "texts.append", "dict.update", "im.axes.text", "mtp.ticker.StrMethodFormatter.", "mtp.ticker.StrMethodFormatter.", "int", "int", "im.norm", "im.norm"], "function", ["None"], ["", "def", "annotate_heatmap", "(", "im", ",", "data", "=", "None", ",", "valfmt", "=", "\"{x:.2f}\"", ",", "\n", "textcolors", "=", "[", "\"black\"", ",", "\"white\"", "]", ",", "\n", "threshold", "=", "None", ",", "texts", "=", "None", ",", "**", "textkw", ")", ":", "\n", "    ", "\"\"\"\n    A function to annotate a heatmap.\n\n    Parameters\n    ----------\n    im\n        The AxesImage to be labeled.\n    data\n        Data used to annotate.  If None, the image's data is used.  Optional.\n    valfmt\n        The format of the annotations inside the heatmap.  This should either\n        use the string format method, e.g. \"$ {x:.2f}\", or be a\n        `matplotlib.ticker.Formatter`.  Optional.\n    textcolors\n        A list or array of two color specifications.  The first is used for\n        values below a threshold, the second for those above.  Optional.\n    threshold\n        Value in data units according to which the colors from textcolors are\n        applied.  If None (the default) uses the middle of the colormap as\n        separation.  Optional.\n    **kwargs\n        All other arguments are forwarded to each call to `text` used to create\n        the text labels.\n    \"\"\"", "\n", "\n", "if", "not", "isinstance", "(", "data", ",", "(", "list", ",", "np", ".", "ndarray", ")", ")", ":", "\n", "        ", "data", "=", "im", ".", "get_array", "(", ")", "\n", "\n", "# Normalize the threshold to the images color range.", "\n", "", "if", "threshold", "is", "not", "None", ":", "\n", "        ", "threshold", "=", "im", ".", "norm", "(", "threshold", ")", "\n", "", "else", ":", "\n", "        ", "threshold", "=", "im", ".", "norm", "(", "data", ".", "max", "(", ")", ")", "/", "2.", "\n", "\n", "# Set default alignment to center, but allow it to be", "\n", "# overwritten by textkw.", "\n", "", "kw", "=", "dict", "(", "horizontalalignment", "=", "\"center\"", ",", "\n", "verticalalignment", "=", "\"center\"", ")", "\n", "kw", ".", "update", "(", "textkw", ")", "\n", "\n", "# Get the formatter in case a string is supplied", "\n", "if", "isinstance", "(", "valfmt", ",", "str", ")", ":", "\n", "        ", "valfmt", "=", "mtp", ".", "ticker", ".", "StrMethodFormatter", "(", "valfmt", ")", "\n", "\n", "# Loop over the data and create a `Text` for each \"pixel\".", "\n", "# Change the text's color depending on the data.", "\n", "", "if", "texts", "is", "None", ":", "\n", "        ", "texts", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "data", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "data", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "kw", ".", "update", "(", "color", "=", "textcolors", "[", "int", "(", "im", ".", "norm", "(", "data", "[", "i", ",", "j", "]", ")", ">", "threshold", ")", "]", ")", "\n", "text", "=", "im", ".", "axes", ".", "text", "(", "j", ",", "i", ",", "valfmt", "(", "data", "[", "i", ",", "j", "]", ",", "None", ")", ",", "**", "kw", ")", "\n", "texts", ".", "append", "(", "text", ")", "\n", "", "", "", "else", ":", "\n", "        ", "for", "i", "in", "range", "(", "data", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "data", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "kw", ".", "update", "(", "color", "=", "textcolors", "[", "int", "(", "im", ".", "norm", "(", "data", "[", "i", ",", "j", "]", ")", ">", "threshold", ")", "]", ")", "\n", "im", ".", "axes", ".", "text", "(", "j", ",", "i", ",", "valfmt", "(", "texts", "[", "i", ",", "j", "]", ",", "None", ")", ",", "**", "kw", ")", "\n", "", "", "", "return", "texts", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.experiments.font_selection_optimize_collate_and_plot.add_heatmap": [[146, 169], ["font_selection_optimize_collate_and_plot.heatmap", "numpy.array", "texts.reshape.reshape", "font_selection_optimize_collate_and_plot.annotate_heatmap", "numpy.zeros_like", "numpy.zeros_like", "list", "list", "map", "arr.mean", "reversed", "zip", "int", "arr.flatten", "np.zeros_like.flatten", "np.zeros_like.flatten", "list", "list", "reversed", "reversed", "numpy.arange", "numpy.arange", "len", "len"], "function", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.experiments.font_selection_optimize_collate_and_plot.heatmap", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.experiments.font_selection_optimize_collate_and_plot.annotate_heatmap"], ["", "def", "add_heatmap", "(", "arr", ",", "ax", ",", "pos", ",", "neg", ",", "sigs1", "=", "None", ",", "sigs2", "=", "None", ")", ":", "\n", "    ", "im", ",", "cbar", "=", "heatmap", "(", "data", "=", "arr", "[", "list", "(", "reversed", "(", "np", ".", "arange", "(", "len", "(", "pos", ")", ")", ")", ")", ",", ":", "]", ",", "\n", "row_labels", "=", "list", "(", "reversed", "(", "pos", ")", ")", ",", "\n", "col_labels", "=", "neg", ",", "\n", "ax", "=", "ax", ",", "\n", "cmap", "=", "\"viridis\"", ",", "\n", "label_top", "=", "False", ")", "\n", "if", "sigs1", "is", "None", ":", "\n", "        ", "sigs1", "=", "np", ".", "zeros_like", "(", "arr", ")", "\n", "", "if", "sigs2", "is", "None", ":", "\n", "        ", "sigs2", "=", "np", ".", "zeros_like", "(", "arr", ")", "\n", "\n", "", "def", "create_text", "(", "arr_sig", ")", ":", "\n", "        ", "mean", ",", "sig1", ",", "sig2", "=", "arr_sig", "\n", "return", "f'{mean:.2f}{\"*\" * int(sig1 + sig2)}'", "\n", "\n", "", "texts", "=", "np", ".", "array", "(", "list", "(", "map", "(", "create_text", ",", "zip", "(", "arr", ".", "flatten", "(", ")", ",", "sigs1", ".", "flatten", "(", ")", ",", "sigs2", ".", "flatten", "(", ")", ")", ")", ")", ")", "\n", "texts", "=", "texts", ".", "reshape", "(", "arr", ".", "shape", ")", "\n", "\n", "annotate_heatmap", "(", "im", "=", "im", ",", "valfmt", "=", "\"{x}\"", ",", "\n", "texts", "=", "texts", "[", "list", "(", "reversed", "(", "np", ".", "arange", "(", "len", "(", "pos", ")", ")", ")", ")", ",", ":", "]", ",", "\n", "textcolors", "=", "[", "'white'", ",", "'black'", "]", ",", "\n", "threshold", "=", "arr", ".", "mean", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.experiments.font_selection_optimize_collate_and_plot.collate_df": [[171, 184], ["glob.glob", "map", "pandas.concat", "pandas.read_csv().drop", "pathlib.Path().stem.split", "int", "int", "os.path.join", "pandas.read_csv", "pathlib.Path"], "function", ["None"], ["", "def", "collate_df", "(", "root_dir", ")", ":", "\n", "    ", "def", "load_df", "(", "file", ")", ":", "\n", "        ", "df", "=", "pd", ".", "read_csv", "(", "file", ",", "sep", "=", "','", ")", ".", "drop", "(", "'Unnamed: 0'", ",", "axis", "=", "1", ")", "\n", "_", ",", "trial", ",", "_", ",", "font", ",", "case", "=", "Path", "(", "file", ")", ".", "stem", ".", "split", "(", "'_'", ")", "\n", "df", "[", "'trial'", "]", "=", "int", "(", "trial", ")", "\n", "df", "[", "'font'", "]", "=", "int", "(", "font", ")", "\n", "df", "[", "'case'", "]", "=", "case", "\n", "return", "df", "\n", "\n", "", "files", "=", "glob", "(", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'*.csv'", ")", ")", "\n", "dfs", "=", "map", "(", "load_df", ",", "files", ")", "\n", "df", "=", "pd", ".", "concat", "(", "dfs", ")", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.experiments.font_selection_optimize_collate_and_plot.heatmap_and_std": [[186, 217], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros_like", "numpy.zeros_like", "ax.set_title", "font_selection_optimize_collate_and_plot.add_heatmap", "ax.set_xlabel", "ax.set_ylabel", "len", "len", "len", "len", "len", "len", "enumerate", "enumerate", "font_selection_optimize_collate_and_plot.significance_test", "font_selection_optimize_collate_and_plot.significance_test", "str", "str"], "function", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.experiments.font_selection_optimize_collate_and_plot.add_heatmap", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.experiments.font_selection_optimize_collate_and_plot.significance_test", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.experiments.font_selection_optimize_collate_and_plot.significance_test"], ["", "def", "heatmap_and_std", "(", "ax", ",", "df", ",", "title", ",", "n_trials", ",", "pos", ",", "neg", ")", ":", "\n", "# ax, err_ax = axes  # type: plt.Axes, plt.Axes", "\n", "    ", "arr", "=", "np", ".", "zeros", "(", "[", "len", "(", "pos", ")", ",", "len", "(", "neg", ")", "]", ")", "\n", "err", "=", "np", ".", "zeros", "(", "[", "len", "(", "pos", ")", ",", "len", "(", "neg", ")", "]", ")", "\n", "gain", "=", "np", ".", "zeros", "(", "[", "len", "(", "pos", ")", ",", "len", "(", "neg", ")", "]", ")", "\n", "sigs1", "=", "np", ".", "zeros_like", "(", "arr", ")", "\n", "sigs2", "=", "np", ".", "zeros_like", "(", "arr", ")", "\n", "for", "p_i", ",", "p", ",", "n_i", ",", "n", "in", "[", "(", "p_i", ",", "p", ",", "n_i", ",", "n", ")", "for", "(", "p_i", ",", "p", ")", "in", "enumerate", "(", "pos", ")", "for", "(", "n_i", ",", "n", ")", "in", "enumerate", "(", "neg", ")", "]", ":", "\n", "        ", "try", ":", "\n", "            ", "arr", "[", "p_i", ",", "n_i", "]", "=", "df", "[", "df", "[", "'pos_neg'", "]", "==", "str", "(", "(", "p", ",", "n", ")", ")", "]", "[", "'score'", "]", "\n", "err", "[", "p_i", ",", "n_i", "]", "=", "df", "[", "df", "[", "'pos_neg'", "]", "==", "str", "(", "(", "p", ",", "n", ")", ")", "]", "[", "'err'", "]", "\n", "sigs1", "[", "p_i", ",", "n_i", "]", "=", "significance_test", "(", "mu_1", "=", "arr", "[", "0", ",", "0", "]", ",", "\n", "std_1", "=", "err", "[", "0", ",", "0", "]", ",", "\n", "mu_2", "=", "arr", "[", "p_i", ",", "n_i", "]", ",", "\n", "std_2", "=", "err", "[", "p_i", ",", "n_i", "]", ",", "\n", "n_trials", "=", "n_trials", ",", "\n", "q", "=", "0.9", ")", "\n", "sigs2", "[", "p_i", ",", "n_i", "]", "=", "significance_test", "(", "mu_1", "=", "arr", "[", "0", ",", "0", "]", ",", "\n", "std_1", "=", "err", "[", "0", ",", "0", "]", ",", "\n", "mu_2", "=", "arr", "[", "p_i", ",", "n_i", "]", ",", "\n", "std_2", "=", "err", "[", "p_i", ",", "n_i", "]", ",", "\n", "n_trials", "=", "n_trials", ",", "\n", "q", "=", "0.95", ")", "\n", "gain", "[", "p_i", ",", "n_i", "]", "=", "arr", "[", "p_i", ",", "n_i", "]", "/", "arr", "[", "0", ",", "0", "]", "if", "arr", "[", "0", ",", "0", "]", ">", "0.", "else", "1.", "\n", "", "except", ":", "\n", "            ", "continue", "\n", "", "", "ax", ".", "set_title", "(", "title", ")", "\n", "add_heatmap", "(", "arr", ",", "ax", ",", "pos", ",", "neg", ",", "sigs1", "=", "sigs1", ",", "sigs2", "=", "sigs2", ")", "\n", "ax", ".", "set_xlabel", "(", "'No. of Negatives'", ")", "\n", "ax", ".", "set_ylabel", "(", "'No. of Positives'", ")", "\n", "return", "arr", ",", "gain", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.experiments.font_selection_optimize_collate_and_plot.significance_test": [[219, 226], ["numpy.sqrt", "scipy.stats.norm.ppf"], "function", ["None"], ["", "def", "significance_test", "(", "mu_1", ",", "std_1", ",", "mu_2", ",", "std_2", ",", "n_trials", ",", "q", "=", "0.95", ")", ":", "\n", "    ", "a", "=", "(", "std_1", "**", "2", ")", "/", "n_trials", "\n", "b", "=", "(", "std_2", "**", "2", ")", "/", "n_trials", "\n", "std_diff", "=", "np", ".", "sqrt", "(", "a", "+", "b", ")", "\n", "z", "=", "scipy", ".", "stats", ".", "norm", ".", "ppf", "(", "q", ")", "\n", "dist", "=", "z", "*", "std_diff", "\n", "return", "mu_2", "-", "mu_1", ">", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.experiments.font_selection_optimize_collate_and_plot.set_size": [[228, 230], ["fig.set_size_inches"], "function", ["None"], ["", "def", "set_size", "(", "fig", ":", "plt", ".", "Figure", ")", ":", "\n", "    ", "fig", ".", "set_size_inches", "(", "3", ",", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.dashboards.visualize_style_loss.CosineLoss.__init__": [[20, 22], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.classifier.NonLinearClassifier.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CosineLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.dashboards.visualize_style_loss.CosineLoss.forward": [[23, 25], ["torch.dot", "torch.norm", "torch.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x0", ",", "x1", ")", ":", "\n", "        ", "return", "1", "-", "(", "torch", ".", "dot", "(", "x0", ",", "x1", ")", "/", "(", "torch", ".", "norm", "(", "x0", ")", "*", "torch", ".", "norm", "(", "x1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.dashboards.visualize_style_loss.compute_grams": [[27, 38], ["torch.split", "torch.stack", "bg.batch_num_nodes().tolist", "graph_activations.flatten", "torch.cat", "torch.nn.InstanceNorm1d", "torch.nn.InstanceNorm1d.squeeze", "grams.append", "list", "torch.matmul", "gram.flatten", "bg.batch_num_nodes", "torch.nn.InstanceNorm1d.", "inorm().squeeze.transpose", "inorm().squeeze.unsqueeze"], "function", ["None"], ["", "", "def", "compute_grams", "(", "activations", ",", "bg", ")", ":", "\n", "    ", "grams", "=", "[", "]", "\n", "for", "graph_activations", "in", "torch", ".", "split", "(", "activations", ",", "bg", ".", "batch_num_nodes", "(", ")", ".", "tolist", "(", ")", ")", ":", "\n", "        ", "x", "=", "graph_activations", ".", "flatten", "(", "start_dim", "=", "2", ")", "# x shape: F x d x 100", "\n", "x", "=", "torch", ".", "cat", "(", "list", "(", "x", ")", ",", "dim", "=", "-", "1", ")", "# x shape: d x 100F", "\n", "inorm", "=", "torch", ".", "nn", ".", "InstanceNorm1d", "(", "x", ".", "shape", "[", "0", "]", ")", "\n", "x", "=", "inorm", "(", "x", ".", "unsqueeze", "(", "0", ")", ")", ".", "squeeze", "(", ")", "\n", "img_size", "=", "x", ".", "shape", "[", "-", "1", "]", "# img_size = 100F", "\n", "gram", "=", "torch", ".", "matmul", "(", "x", ",", "x", ".", "transpose", "(", "0", ",", "1", ")", ")", "/", "img_size", "\n", "grams", ".", "append", "(", "gram", ".", "flatten", "(", ")", ")", "\n", "", "return", "torch", ".", "stack", "(", "grams", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.dashboards.visualize_style_loss.uvnet_gram_loss_vis_plot": [[40, 78], ["visualize_style_loss.compute_grams_from_model_with_grads", "sum", "sum.backward", "torch.split", "graph_plotter.uv_samples_plot", "graph_plotter.uv_samples_plot", "visualize_style_loss.CosineLoss", "dgl.batch", "bg.batch_num_nodes().tolist", "torch.nn.MSELoss", "Exception", "torch.nn.MSELoss.", "enumerate", "graph_plotter.graph_to_xyz_mask", "[].reshape().detach().cpu", "graph_plotter.graph_to_xyz_mask", "[].reshape().detach().cpu", "bg.batch_num_nodes", "[].reshape().detach", "[].reshape().detach", "[].reshape", "[].reshape"], "function", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.dashboards.visualize_style_loss.compute_grams_from_model_with_grads", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.chamfer_distance.chamfer_distance.ChamferDistanceFunction.backward", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.graph_plotter.uv_samples_plot", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.graph_plotter.uv_samples_plot", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.graph_plotter.graph_to_xyz_mask", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.graph_plotter.graph_to_xyz_mask"], ["", "def", "uvnet_gram_loss_vis_plot", "(", "g0", ",", "g1", ",", "weights", ",", "\n", "model_checkpoint", ",", "\n", "device", "=", "'cpu'", ",", "\n", "metric", "=", "'cosine'", ",", "\n", "scale_grads", "=", "-", "0.05", ",", "\n", "marker_size", "=", "4", ",", "\n", "mesh0", "=", "None", ",", "\n", "mesh1", "=", "None", ",", "\n", "mesh_alpha", "=", "1.", ")", ":", "\n", "    ", "if", "metric", "==", "'cosine'", ":", "\n", "        ", "crit", "=", "CosineLoss", "(", ")", "\n", "", "elif", "metric", "==", "'euclidean'", ":", "\n", "        ", "crit", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'metric must be \\'cosine\\' or \\'euclidean\\''", ")", "\n", "\n", "", "bg", ",", "feat", ",", "grams", "=", "compute_grams_from_model_with_grads", "(", "dgl", ".", "batch", "(", "[", "g0", ",", "g1", "]", ")", ",", "model_checkpoint", ",", "device", ")", "\n", "\n", "losses", "=", "[", "weights", "[", "i", "]", "*", "crit", "(", "*", "gram", ")", "for", "i", ",", "gram", "in", "enumerate", "(", "grams", ")", "]", "\n", "loss", "=", "sum", "(", "losses", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "grads", "=", "torch", ".", "split", "(", "feat", ".", "grad", ",", "bg", ".", "batch_num_nodes", "(", ")", ".", "tolist", "(", ")", ")", "\n", "a", "=", "uv_samples_plot", "(", "*", "graph_to_xyz_mask", "(", "g0", ")", ",", "\n", "xyz_grads", "=", "grads", "[", "0", "]", "[", ":", ",", ":", ",", ":", ",", ":", "3", "]", ".", "reshape", "(", "[", "-", "1", ",", "3", "]", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "\n", "scale_xyz_grads", "=", "scale_grads", ",", "\n", "marker_size", "=", "marker_size", ",", "\n", "mesh", "=", "mesh0", ",", "\n", "mesh_alpha", "=", "mesh_alpha", ",", "\n", "corner_align", "=", "True", ")", "\n", "b", "=", "uv_samples_plot", "(", "*", "graph_to_xyz_mask", "(", "g1", ")", ",", "\n", "xyz_grads", "=", "grads", "[", "1", "]", "[", ":", ",", ":", ",", ":", ",", ":", "3", "]", ".", "reshape", "(", "[", "-", "1", ",", "3", "]", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "\n", "scale_xyz_grads", "=", "scale_grads", ",", "\n", "marker_size", "=", "marker_size", ",", "\n", "mesh", "=", "mesh1", ",", "\n", "mesh_alpha", "=", "mesh_alpha", ",", "\n", "corner_align", "=", "True", ")", "\n", "return", "a", ",", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.dashboards.visualize_style_loss.compute_grams_from_model_with_grads": [[80, 100], ["helper.load_checkpoint", "test_classifier.Model().to", "Model().to.load_state_dict", "bg.ndata[].to", "bg.ndata[].to.permute", "Model().to.", "bg.to", "activations.update", "visualize_style_loss.compute_grams", "test_classifier.Model", "activations.items"], "function", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.None.helper.load_checkpoint", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.dashboards.visualize_style_loss.compute_grams"], ["", "def", "compute_grams_from_model_with_grads", "(", "bg", ",", "model_checkpoint", ",", "device", "=", "'cpu'", ")", ":", "\n", "    ", "state", "=", "load_checkpoint", "(", "model_checkpoint", ",", "map_to_cpu", "=", "device", "==", "'cpu'", ")", "\n", "state", "[", "'args'", "]", ".", "input_channels", "=", "'xyz_normals'", "\n", "model", "=", "Model", "(", "26", ",", "state", "[", "'args'", "]", ")", ".", "to", "(", "device", ")", "\n", "model", ".", "load_state_dict", "(", "state", "[", "'model'", "]", ")", "\n", "feat", "=", "bg", ".", "ndata", "[", "'x'", "]", ".", "to", "(", "device", ")", "\n", "feat", ".", "requires_grad", "=", "True", "\n", "in_feat", "=", "feat", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "model", "(", "bg", ".", "to", "(", "device", ")", ",", "in_feat", ")", "\n", "activations", "=", "{", "}", "\n", "for", "acts", "in", "[", "model", ".", "nurbs_activations", ",", "model", ".", "gnn_activations", "]", ":", "\n", "        ", "activations", ".", "update", "(", "acts", ")", "\n", "", "activations", "=", "{", "\n", "layer", ":", "activations", "for", "layer", ",", "activations", "in", "activations", ".", "items", "(", ")", "\n", "}", "\n", "grams", "=", "[", "\n", "compute_grams", "(", "activations", "[", "layer", "]", ",", "bg", ")", "\n", "for", "layer", "in", "[", "'feats'", ",", "'conv1'", ",", "'conv2'", ",", "'conv3'", ",", "'fc'", ",", "'GIN_1'", ",", "'GIN_2'", "]", "\n", "]", "\n", "return", "bg", ",", "feat", ",", "grams", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.models.UVNetSolid2PointsAutoEnc.__init__": [[10, 35], ["torch.Module.__init__", "networks.encoder.UVNetSurfaceEncoder", "networks.encoder.UVNetGraphEncoder", "networks.fc", "networks.decoder.PointDecoder", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.classifier.NonLinearClassifier.__init__", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.nn_utils.fc"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "input_channels", "=", "\"xyz_only\"", ",", "\n", "surf_emb_dim", "=", "64", ",", "\n", "graph_emb_dim", "=", "128", ",", "\n", "ae_latent_dim", "=", "1024", ",", "\n", "num_points", "=", "1024", ",", "\n", "use_tanh", "=", "False", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Autoencoder: UVNet solid encoder + pointcloud decoder\n        :param input_channels: Channels to consider in UV-grid. One of (\"xyz_only\", \"xyz_normals\")\n        :param surf_emb_dim: Embedding dimension for each surface. This will be pooled element wise to get embedding for solid with same dimension.\n        :param graph_emb_dim: Embedding dimension for the face-adj graph of the solid\n        :param ae_latent_dim: Dimension of the autoencoder latent vector\n        :num_points: Number of points to reconstruct\n        \"\"\"", "\n", "assert", "input_channels", "in", "(", "\"xyz_only\"", ",", "\"xyz_normals\"", ")", "\n", "super", "(", "UVNetSolid2PointsAutoEnc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "surf_encoder", "=", "encoder", ".", "UVNetSurfaceEncoder", "(", "output_dims", "=", "surf_emb_dim", ")", "\n", "self", ".", "graph_encoder", "=", "encoder", ".", "UVNetGraphEncoder", "(", "surf_emb_dim", ",", "graph_emb_dim", ")", "\n", "self", ".", "project", "=", "nnu", ".", "fc", "(", "graph_emb_dim", ",", "ae_latent_dim", ")", "\n", "self", ".", "decoder", "=", "decoder", ".", "PointDecoder", "(", "input_dim", "=", "ae_latent_dim", ",", "num_points", "=", "1024", ")", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "self", ".", "use_tanh", "=", "use_tanh", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.models.UVNetSolid2PointsAutoEnc.forward": [[36, 45], ["models.UVNetSolid2PointsAutoEnc.surf_encoder", "bg.to.to.to", "models.UVNetSolid2PointsAutoEnc.graph_encoder", "models.UVNetSolid2PointsAutoEnc.project", "models.UVNetSolid2PointsAutoEnc.decoder", "models.UVNetSolid2PointsAutoEnc.tanh"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "bg", ",", "feat", ")", ":", "\n", "        ", "out", "=", "self", ".", "surf_encoder", "(", "feat", ")", "\n", "bg", "=", "bg", ".", "to", "(", "'cuda:0'", ")", "\n", "node_emb", ",", "graph_emb", "=", "self", ".", "graph_encoder", "(", "bg", ",", "out", ")", "\n", "embedding", "=", "self", ".", "project", "(", "graph_emb", ")", "\n", "out", "=", "self", ".", "decoder", "(", "embedding", ")", "\n", "if", "self", ".", "use_tanh", ":", "\n", "            ", "out", "=", "self", ".", "tanh", "(", "out", ")", "\n", "", "return", "out", ",", "embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.models.Points2PointsAutoEnc.__init__": [[48, 61], ["torch.Module.__init__", "networks.encoder.PointNetEncoder", "networks.decoder.PointDecoder", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.classifier.NonLinearClassifier.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ae_latent_dim", "=", "1024", ",", "num_out_points", "=", "1024", ",", "use_tanh", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Autoencoder: PointNet encoder + pointcloud decoder\n        :param ae_latent_dim: Embedding dimension for the input pointcloud.\n        :param num_out_points: Number of points in the output pointcloud\n        \"\"\"", "\n", "super", "(", "Points2PointsAutoEnc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "encoder", ".", "PointNetEncoder", "(", "ae_latent_dim", ")", "\n", "self", ".", "decoder", "=", "decoder", ".", "PointDecoder", "(", "\n", "input_dim", "=", "ae_latent_dim", ",", "num_points", "=", "num_out_points", "\n", ")", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "self", ".", "use_tanh", "=", "use_tanh", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.models.Points2PointsAutoEnc.forward": [[62, 68], ["models.Points2PointsAutoEnc.encoder", "models.Points2PointsAutoEnc.decoder", "models.Points2PointsAutoEnc.tanh"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pc", ")", ":", "\n", "        ", "embedding", "=", "self", ".", "encoder", "(", "pc", ")", "\n", "out", "=", "self", ".", "decoder", "(", "embedding", ")", "\n", "if", "self", ".", "use_tanh", ":", "\n", "            ", "out", "=", "self", ".", "tanh", "(", "out", ")", "\n", "", "return", "out", ",", "embedding", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.encoder.PointNetEncoder.__init__": [[10, 18], ["torch.Module.__init__", "networks.conv1d", "networks.conv1d", "networks.conv1d", "networks.conv1d", "networks.conv1d"], "methods", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.classifier.NonLinearClassifier.__init__", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.nn_utils.conv1d", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.nn_utils.conv1d", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.nn_utils.conv1d", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.nn_utils.conv1d", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.nn_utils.conv1d"], ["    ", "def", "__init__", "(", "self", ",", "emb_dims", ")", ":", "\n", "        ", "super", "(", "PointNetEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nnu", ".", "conv1d", "(", "3", ",", "64", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2", "=", "nnu", ".", "conv1d", "(", "64", ",", "64", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv3", "=", "nnu", ".", "conv1d", "(", "64", ",", "64", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv4", "=", "nnu", ".", "conv1d", "(", "64", ",", "128", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv5", "=", "nnu", ".", "conv1d", "(", "128", ",", "emb_dims", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "activations", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.encoder.PointNetEncoder.forward": [[19, 32], ["encoder.PointNetEncoder.conv1", "encoder.PointNetEncoder.conv2", "encoder.PointNetEncoder.conv3", "encoder.PointNetEncoder.conv4", "encoder.PointNetEncoder.conv5", "torch.adaptive_max_pool1d().squeeze", "torch.adaptive_max_pool1d().squeeze", "torch.adaptive_max_pool1d().squeeze", "torch.adaptive_max_pool1d", "torch.adaptive_max_pool1d", "torch.adaptive_max_pool1d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "activations", "[", "'feats'", "]", "=", "x", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "self", ".", "activations", "[", "'conv1'", "]", "=", "x", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "self", ".", "activations", "[", "'conv2'", "]", "=", "x", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "self", ".", "activations", "[", "'conv3'", "]", "=", "x", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "self", ".", "activations", "[", "'conv4'", "]", "=", "x", "\n", "x", "=", "self", ".", "conv5", "(", "x", ")", "\n", "x", "=", "F", ".", "adaptive_max_pool1d", "(", "x", ",", "1", ")", ".", "squeeze", "(", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.encoder.UVNetCurveEncoder.__init__": [[35, 53], ["torch.Module.__init__", "networks.conv1d", "networks.conv1d", "networks.conv1d", "torch.AdaptiveAvgPool1d", "torch.AdaptiveAvgPool1d", "torch.AdaptiveAvgPool1d", "networks.fc", "encoder.UVNetCurveEncoder.modules", "encoder.UVNetCurveEncoder.weights_init"], "methods", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.classifier.NonLinearClassifier.__init__", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.nn_utils.conv1d", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.nn_utils.conv1d", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.nn_utils.conv1d", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.nn_utils.fc", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.classifier.NonLinearClassifier.weights_init"], ["    ", "def", "__init__", "(", "self", ",", "input_channels", "=", "\"xyz_normals\"", ",", "output_dims", "=", "64", ")", ":", "\n", "        ", "super", "(", "UVNetCurveEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "input_channels", "in", "(", "\"xyz_only\"", ",", "\"xyz_normals\"", ")", "\n", "self", ".", "input_channels", "=", "input_channels", "\n", "num_inp_channels", "=", "3", "if", "input_channels", "==", "\"xyz_only\"", "else", "6", "\n", "# Convolution layer 1", "\n", "self", ".", "conv1", "=", "nnu", ".", "conv1d", "(", "\n", "num_inp_channels", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "# Convolution layer 2", "\n", "self", ".", "conv2", "=", "nnu", ".", "conv1d", "(", "64", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "# Convolution layer 3", "\n", "self", ".", "conv3", "=", "nnu", ".", "conv1d", "(", "128", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "final_pool", "=", "nn", ".", "AdaptiveAvgPool1d", "(", "1", ")", "\n", "self", ".", "fc", "=", "nnu", ".", "fc", "(", "256", ",", "output_dims", ",", "bias", "=", "False", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "self", ".", "weights_init", "(", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.encoder.UVNetCurveEncoder.weights_init": [[54, 59], ["isinstance", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "m.bias.data.fill_"], "methods", ["None"], ["", "", "def", "weights_init", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Conv1d", ")", ")", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform_", "(", "m", ".", "weight", ".", "data", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.encoder.UVNetCurveEncoder.forward": [[60, 74], ["encoder.UVNetCurveEncoder.size", "encoder.UVNetCurveEncoder.conv1", "encoder.UVNetCurveEncoder.conv2", "encoder.UVNetCurveEncoder.conv3", "encoder.UVNetCurveEncoder.final_pool", "encoder.UVNetCurveEncoder.view", "encoder.UVNetCurveEncoder.fc"], "methods", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.nn_utils.fc"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "# Take only xyz, normals for now", "\n", "if", "self", ".", "input_channels", "==", "\"xyz_only\"", ":", "\n", "            ", "x", "=", "x", "[", ":", ",", ":", "3", ",", ":", "]", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", "[", ":", ",", ":", "6", ",", ":", "]", "\n", "", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "final_pool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.encoder.UVNetSurfaceEncoder.__init__": [[77, 102], ["torch.Module.__init__", "networks.conv", "networks.conv", "networks.conv", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "networks.fc", "encoder.UVNetSurfaceEncoder.modules", "encoder.UVNetSurfaceEncoder.weights_init"], "methods", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.classifier.NonLinearClassifier.__init__", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.nn_utils.conv", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.nn_utils.conv", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.nn_utils.conv", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.nn_utils.fc", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.classifier.NonLinearClassifier.weights_init"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "input_channels", "=", "\"xyz_normals\"", ",", "\n", "output_dims", "=", "64", ",", "\n", "mask_mode", "=", "\"channel\"", ",", "\n", "weighted", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", "UVNetSurfaceEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "mask_mode", "in", "(", "\"multiply\"", ",", "\"channel\"", ")", "\n", "self", ".", "mask_mode", "=", "mask_mode", "\n", "assert", "input_channels", "in", "(", "\"xyz_only\"", ",", "\"xyz_normals\"", ")", "\n", "self", ".", "input_channels", "=", "input_channels", "\n", "num_inp_channels", "=", "3", "if", "input_channels", "==", "\"xyz_only\"", "else", "6", "\n", "if", "mask_mode", "==", "\"channel\"", ":", "\n", "            ", "num_inp_channels", "+=", "1", "\n", "", "self", ".", "conv1", "=", "nnu", ".", "conv", "(", "num_inp_channels", ",", "64", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "weighted", "=", "weighted", "\n", "self", ".", "conv2", "=", "nnu", ".", "conv", "(", "64", ",", "128", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv3", "=", "nnu", ".", "conv", "(", "128", ",", "256", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "final_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc", "=", "nnu", ".", "fc", "(", "256", ",", "output_dims", ",", "bias", "=", "False", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "self", ".", "weights_init", "(", "m", ")", "\n", "\n", "", "self", ".", "activations", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.encoder.UVNetSurfaceEncoder.weights_init": [[103, 105], ["None"], "methods", ["None"], ["", "def", "weights_init", "(", "self", ",", "m", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.encoder.UVNetSurfaceEncoder.forward_mask_channel": [[106, 126], ["encoder.UVNetSurfaceEncoder.size", "encoder.UVNetSurfaceEncoder.conv1", "encoder.UVNetSurfaceEncoder.conv2", "encoder.UVNetSurfaceEncoder.conv3", "encoder.UVNetSurfaceEncoder.final_pool", "encoder.UVNetSurfaceEncoder.view", "encoder.UVNetSurfaceEncoder.fc", "encoder.UVNetSurfaceEncoder.unsqueeze", "encoder.UVNetSurfaceEncoder.conv1[].set_weights"], "methods", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.nn_utils.fc"], ["", "def", "forward_mask_channel", "(", "self", ",", "inp", ")", ":", "\n", "        ", "if", "self", ".", "weighted", ":", "\n", "            ", "self", ".", "conv1", "[", "0", "]", ".", "set_weights", "(", "inp", "[", ":", ",", "7", ",", ":", ",", ":", "]", ",", "inp", "[", ":", ",", "8", ",", ":", ",", ":", "]", ",", "inp", "[", ":", ",", "9", ",", ":", ",", ":", "]", ")", "\n", "", "if", "self", ".", "input_channels", "==", "\"xyz_only\"", ":", "\n", "            ", "x", "=", "inp", "[", ":", ",", "[", "0", ",", "1", ",", "2", ",", "6", "]", ",", ":", ",", ":", "]", "# xyz, mask", "\n", "", "else", ":", "\n", "            ", "x", "=", "inp", "[", ":", ",", ":", "7", ",", ":", ",", ":", "]", "# xyz, normals, mask", "\n", "", "self", ".", "activations", "=", "{", "'feats'", ":", "inp", "[", ":", ",", ":", "7", ",", ":", ",", ":", "]", "}", "\n", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "self", ".", "activations", "[", "'conv1'", "]", "=", "x", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "self", ".", "activations", "[", "'conv2'", "]", "=", "x", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "self", ".", "activations", "[", "'conv3'", "]", "=", "x", "\n", "x", "=", "self", ".", "final_pool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "self", ".", "activations", "[", "'fc'", "]", "=", "x", ".", "unsqueeze", "(", "-", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.encoder.UVNetSurfaceEncoder.forward_mask_multiply": [[127, 143], ["inp[].unsqueeze", "encoder.UVNetSurfaceEncoder.size", "encoder.UVNetSurfaceEncoder.conv1", "encoder.UVNetSurfaceEncoder.conv2", "encoder.UVNetSurfaceEncoder.conv3", "encoder.UVNetSurfaceEncoder.final_pool", "encoder.UVNetSurfaceEncoder.view", "encoder.UVNetSurfaceEncoder.fc", "encoder.UVNetSurfaceEncoder.conv1[].set_weights"], "methods", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.nn_utils.fc"], ["", "def", "forward_mask_multiply", "(", "self", ",", "inp", ")", ":", "\n", "        ", "if", "self", ".", "weighted", ":", "\n", "            ", "self", ".", "conv1", "[", "0", "]", ".", "set_weights", "(", "inp", "[", ":", ",", "7", ",", ":", ",", ":", "]", ",", "inp", "[", ":", ",", "8", ",", ":", ",", ":", "]", ",", "inp", "[", ":", ",", "9", ",", ":", ",", ":", "]", ")", "\n", "", "mask", "=", "inp", "[", ":", ",", "6", ",", ":", ",", ":", "]", ".", "unsqueeze", "(", "1", ")", "\n", "if", "self", ".", "input_channels", "==", "\"xyz_only\"", ":", "\n", "            ", "x", "=", "inp", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", "# xyz", "\n", "", "else", ":", "\n", "            ", "x", "=", "inp", "[", ":", ",", ":", "6", ",", ":", ",", ":", "]", "# xyz, normals", "\n", "", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", "*", "mask", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "final_pool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.encoder.UVNetSurfaceEncoder.forward": [[144, 152], ["ValueError", "encoder.UVNetSurfaceEncoder.forward_mask_channel", "encoder.UVNetSurfaceEncoder.forward_mask_multiply"], "methods", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.face_model.UVNetFaceModel.forward_mask_channel", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.encoder.UVNetSurfaceEncoder.forward_mask_multiply"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "if", "self", ".", "mask_mode", "==", "\"channel\"", ":", "\n", "            ", "return", "self", ".", "forward_mask_channel", "(", "inp", ")", "\n", "", "if", "self", ".", "mask_mode", "==", "\"multiply\"", ":", "\n", "            ", "return", "self", ".", "forward_mask_multiply", "(", "inp", ")", "\n", "", "raise", "ValueError", "(", "\n", "\"Unknown mask mode {}, expected one of ('channel', 'multiply')\"", ".", "format", "(", "\n", "self", ".", "mask_mode", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.encoder._ApplyNodeFunc.__init__": [[159, 163], ["torch.Module.__init__", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.classifier.NonLinearClassifier.__init__"], ["def", "__init__", "(", "self", ",", "mlp", ")", ":", "\n", "        ", "super", "(", "_ApplyNodeFunc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mlp", "=", "mlp", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "mlp", ".", "output_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.encoder._ApplyNodeFunc.forward": [[164, 169], ["encoder._ApplyNodeFunc.mlp", "encoder._ApplyNodeFunc.bn", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "h", ")", ":", "\n", "        ", "h", "=", "self", ".", "mlp", "(", "h", ")", "\n", "h", "=", "self", ".", "bn", "(", "h", ")", "\n", "h", "=", "F", ".", "relu", "(", "h", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.encoder._MLP.__init__": [[174, 210], ["torch.Module.__init__", "ValueError", "torch.Linear", "torch.Linear", "torch.Linear", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "encoder._MLP.linears.append", "range", "encoder._MLP.linears.append", "range", "torch.Linear", "torch.Linear", "torch.Linear", "encoder._MLP.linears.append", "torch.Linear", "torch.Linear", "torch.Linear", "encoder._MLP.batch_norms.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.classifier.NonLinearClassifier.__init__"], ["def", "__init__", "(", "self", ",", "num_layers", ",", "input_dim", ",", "hidden_dim", ",", "output_dim", ")", ":", "\n", "        ", "\"\"\"MLP layers construction\n        Paramters\n        ---------\n        num_layers: int\n            The number of linear layers\n        input_dim: int\n            The dimensionality of input features\n        hidden_dim: int\n            The dimensionality of hidden units at ALL layers\n        output_dim: int\n            The number of classes for prediction\n        \"\"\"", "\n", "super", "(", "_MLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear_or_not", "=", "True", "# default is linear model", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "\n", "if", "num_layers", "<", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"number of layers should be positive!\"", ")", "\n", "", "elif", "num_layers", "==", "1", ":", "\n", "# Linear model", "\n", "            ", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "input_dim", ",", "output_dim", ")", "\n", "", "else", ":", "\n", "# Multi-layer model", "\n", "            ", "self", ".", "linear_or_not", "=", "False", "\n", "self", ".", "linears", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "batch_norms", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "self", ".", "linears", ".", "append", "(", "nn", ".", "Linear", "(", "input_dim", ",", "hidden_dim", ")", ")", "\n", "for", "layer", "in", "range", "(", "num_layers", "-", "2", ")", ":", "\n", "                ", "self", ".", "linears", ".", "append", "(", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", ")", "\n", "", "self", ".", "linears", ".", "append", "(", "nn", ".", "Linear", "(", "hidden_dim", ",", "output_dim", ")", ")", "\n", "\n", "for", "layer", "in", "range", "(", "num_layers", "-", "1", ")", ":", "\n", "                ", "self", ".", "batch_norms", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "(", "hidden_dim", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.encoder._MLP.forward": [[211, 221], ["encoder._MLP.linear", "range", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "linear_or_not", ":", "\n", "# If linear model", "\n", "            ", "return", "self", ".", "linear", "(", "x", ")", "\n", "", "else", ":", "\n", "# If MLP", "\n", "            ", "h", "=", "x", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", "-", "1", ")", ":", "\n", "                ", "h", "=", "F", ".", "relu", "(", "self", ".", "batch_norms", "[", "i", "]", "(", "self", ".", "linears", "[", "i", "]", "(", "h", ")", ")", ")", "\n", "", "return", "self", ".", "linears", "[", "-", "1", "]", "(", "h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.encoder.UVNetGraphEncoder.__init__": [[234, 280], ["torch.Module.__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "torch.Linear", "torch.Linear", "torch.Linear", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "torch.Dropout", "torch.Dropout", "torch.Dropout", "encoder._get_graph_pooling_layer", "encoder.UVNetGraphEncoder.ginlayers.append", "encoder.UVNetGraphEncoder.batch_norms.append", "encoder._MLP", "encoder._MLP", "dgl.nn.pytorch.conv.GINConv", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "encoder.UVNetGraphEncoder.linears_prediction.append", "encoder.UVNetGraphEncoder.linears_prediction.append", "encoder._ApplyNodeFunc", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.classifier.NonLinearClassifier.__init__", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.encoder._get_graph_pooling_layer"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "input_dim", ",", "\n", "output_dim", ",", "\n", "hidden_dim", "=", "64", ",", "\n", "neighbor_pooling_type", "=", "\"sum\"", ",", "\n", "graph_pooling_type", "=", "\"max\"", ",", "\n", "learn_eps", "=", "True", ",", "\n", "num_layers", "=", "3", ",", "\n", "num_mlp_layers", "=", "2", ",", "\n", ")", ":", "\n", "        ", "super", "(", "UVNetGraphEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "learn_eps", "=", "learn_eps", "\n", "\n", "# List of MLPs", "\n", "self", ".", "ginlayers", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "batch_norms", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "layer", "in", "range", "(", "self", ".", "num_layers", "-", "1", ")", ":", "\n", "            ", "if", "layer", "==", "0", ":", "\n", "                ", "mlp", "=", "_MLP", "(", "num_mlp_layers", ",", "input_dim", ",", "hidden_dim", ",", "hidden_dim", ")", "\n", "", "else", ":", "\n", "                ", "mlp", "=", "_MLP", "(", "num_mlp_layers", ",", "hidden_dim", ",", "hidden_dim", ",", "hidden_dim", ")", "\n", "\n", "", "self", ".", "ginlayers", ".", "append", "(", "\n", "GINConv", "(", "_ApplyNodeFunc", "(", "mlp", ")", ",", "neighbor_pooling_type", ",", "0", ",", "self", ".", "learn_eps", ")", "\n", ")", "\n", "self", ".", "batch_norms", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "hidden_dim", ")", ")", "\n", "\n", "", "self", ".", "final_layer", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "output_dim", ")", "\n", "# Linear function for graph poolings of output of each layer", "\n", "# which maps the output of different layers into a prediction score", "\n", "self", ".", "linears_prediction", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "layer", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "if", "layer", "==", "0", ":", "\n", "                ", "self", ".", "linears_prediction", ".", "append", "(", "nn", ".", "Linear", "(", "input_dim", ",", "output_dim", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "linears_prediction", ".", "append", "(", "nn", ".", "Linear", "(", "hidden_dim", ",", "output_dim", ")", ")", "\n", "\n", "", "", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "\n", "self", ".", "pool", "=", "_get_graph_pooling_layer", "(", "graph_pooling_type", ")", "\n", "\n", "self", ".", "activations", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.encoder.UVNetGraphEncoder.forward": [[281, 301], ["range", "enumerate", "torch.relu", "torch.relu", "torch.relu", "hidden_rep.append", "torch.relu.unsqueeze", "encoder.UVNetGraphEncoder.pool", "encoder.UVNetGraphEncoder.drop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "g", ",", "h", ")", ":", "\n", "# list of hidden representation at each layer (including input)", "\n", "        ", "hidden_rep", "=", "[", "h", "]", "\n", "self", ".", "activations", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", "-", "1", ")", ":", "\n", "            ", "h", "=", "self", ".", "ginlayers", "[", "i", "]", "(", "g", ",", "h", ")", "\n", "h", "=", "self", ".", "batch_norms", "[", "i", "]", "(", "h", ")", "\n", "h", "=", "F", ".", "relu", "(", "h", ")", "\n", "hidden_rep", ".", "append", "(", "h", ")", "\n", "self", ".", "activations", "[", "f'GIN_{i + 1}'", "]", "=", "h", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "", "out", "=", "hidden_rep", "[", "-", "1", "]", "\n", "score_over_layer", "=", "0", "\n", "\n", "# perform pooling over all nodes in each graph in every layer", "\n", "for", "i", ",", "h", "in", "enumerate", "(", "hidden_rep", ")", ":", "\n", "            ", "pooled_h", "=", "self", ".", "pool", "(", "g", ",", "h", ")", "\n", "score_over_layer", "+=", "self", ".", "drop", "(", "self", ".", "linears_prediction", "[", "i", "]", "(", "pooled_h", ")", ")", "\n", "\n", "", "return", "out", ",", "score_over_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.encoder.SVGVAEImageEncoder.__init__": [[304, 329], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.classifier.NonLinearClassifier.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        SVGVAE Image Encoder, accepts 64 x 64 images.\n        Reference:\n\n        \"\"\"", "\n", "super", "(", "SVGVAEImageEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1", ",", "32", ",", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", ",", "nn", ".", "InstanceNorm2d", "(", "32", ")", ",", "nn", ".", "ReLU", "(", ")", "\n", ")", "# 64 x 64", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "5", ",", "stride", "=", "2", ",", "padding", "=", "2", ")", ",", "nn", ".", "InstanceNorm2d", "(", "32", ")", ",", "nn", ".", "ReLU", "(", ")", "\n", ")", "# 32 x 32", "\n", "self", ".", "conv3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", ",", "nn", ".", "InstanceNorm2d", "(", "64", ")", ",", "nn", ".", "ReLU", "(", ")", "\n", ")", "# 32 x 32", "\n", "self", ".", "conv4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "5", ",", "stride", "=", "2", ",", "padding", "=", "2", ")", ",", "nn", ".", "InstanceNorm2d", "(", "64", ")", ",", "nn", ".", "ReLU", "(", ")", "\n", ")", "# 16 x 16", "\n", "\n", "self", ".", "conv5", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "nn", ".", "InstanceNorm2d", "(", "64", ")", ",", "nn", ".", "ReLU", "(", ")", "\n", ")", "# 8 x 8", "\n", "self", ".", "conv6", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "nn", ".", "InstanceNorm2d", "(", "64", ")", ",", "nn", ".", "ReLU", "(", ")", "\n", ")", "# 4 x 4", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.encoder.SVGVAEImageEncoder.forward": [[331, 341], ["imgs.size", "encoder.SVGVAEImageEncoder.conv1", "encoder.SVGVAEImageEncoder.conv2", "encoder.SVGVAEImageEncoder.conv3", "encoder.SVGVAEImageEncoder.conv4", "encoder.SVGVAEImageEncoder.conv5", "encoder.SVGVAEImageEncoder.conv6", "x.view.view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "imgs", ")", ":", "\n", "        ", "batch_size", "=", "imgs", ".", "size", "(", "0", ")", "\n", "x", "=", "self", ".", "conv1", "(", "imgs", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "conv5", "(", "x", ")", "\n", "x", "=", "self", ".", "conv6", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "return", "x", "# batch_size x 1024", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.encoder._get_graph_pooling_layer": [[223, 231], ["ValueError", "dgl.nn.pytorch.glob.SumPooling", "dgl.nn.pytorch.glob.AvgPooling", "dgl.nn.pytorch.glob.MaxPooling"], "function", ["None"], ["", "", "", "def", "_get_graph_pooling_layer", "(", "graph_pooling_type", ")", ":", "\n", "    ", "if", "graph_pooling_type", "==", "\"sum\"", ":", "\n", "        ", "return", "SumPooling", "(", ")", "\n", "", "elif", "graph_pooling_type", "==", "\"mean\"", ":", "\n", "        ", "return", "AvgPooling", "(", ")", "\n", "", "elif", "graph_pooling_type", "==", "\"max\"", ":", "\n", "        ", "return", "MaxPooling", "(", ")", "\n", "", "raise", "ValueError", "(", "\"Expected graph_pooling_type to be one of ('sum', 'mean', 'max')\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.face_model.UVNetFaceModel.__init__": [[12, 27], ["torch.Module.__init__", "networks.conv", "networks.conv", "networks.conv", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "networks.fc", "face_model.UVNetFaceModel.modules", "face_model.UVNetFaceModel.weights_init"], "methods", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.classifier.NonLinearClassifier.__init__", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.nn_utils.conv", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.nn_utils.conv", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.nn_utils.conv", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.nn_utils.fc", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.classifier.NonLinearClassifier.weights_init"], ["    ", "def", "__init__", "(", "self", ",", "input_channels", "=", "'xyz_normals'", ",", "output_dims", "=", "64", ")", ":", "\n", "        ", "super", "(", "UVNetFaceModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "input_channels", "in", "(", "'xyz_only'", ",", "'xyz_normals'", ")", "\n", "self", ".", "input_channels", "=", "input_channels", "\n", "num_inp_channels", "=", "3", "if", "input_channels", "==", "'xyz_only'", "else", "6", "\n", "num_inp_channels", "+=", "1", "\n", "\n", "self", ".", "conv1", "=", "nnu", ".", "conv", "(", "num_inp_channels", ",", "64", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nnu", ".", "conv", "(", "64", ",", "128", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv3", "=", "nnu", ".", "conv", "(", "128", ",", "256", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "final_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc", "=", "nnu", ".", "fc", "(", "256", ",", "output_dims", ",", "bias", "=", "False", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "self", ".", "weights_init", "(", "m", ")", "\n", "", "self", ".", "activations", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.face_model.UVNetFaceModel.weights_init": [[28, 33], ["isinstance", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "m.bias.data.fill_"], "methods", ["None"], ["", "def", "weights_init", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Conv2d", ")", ")", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform_", "(", "m", ".", "weight", ".", "data", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.face_model.UVNetFaceModel.forward_mask_channel": [[34, 53], ["face_model.UVNetFaceModel.size", "face_model.UVNetFaceModel.conv1", "face_model.UVNetFaceModel.conv2", "face_model.UVNetFaceModel.conv3", "face_model.UVNetFaceModel.final_pool", "face_model.UVNetFaceModel.view", "face_model.UVNetFaceModel.fc", "face_model.UVNetFaceModel.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.nn_utils.fc"], ["", "", "", "def", "forward_mask_channel", "(", "self", ",", "inp", ")", ":", "\n", "        ", "if", "self", ".", "input_channels", "==", "'xyz_only'", ":", "\n", "            ", "x", "=", "inp", "[", ":", ",", "[", "0", ",", "1", ",", "2", ",", "6", "]", ",", ":", ",", ":", "]", "# xyz, mask", "\n", "", "else", ":", "\n", "            ", "x", "=", "inp", "[", ":", ",", ":", "7", ",", ":", ",", ":", "]", "# xyz, normals, mask", "\n", "", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "self", ".", "activations", "=", "{", "}", "\n", "self", ".", "activations", "[", "'feats'", "]", "=", "inp", "[", ":", ",", ":", "7", ",", ":", ",", ":", "]", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "self", ".", "activations", "[", "'conv1'", "]", "=", "x", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "self", ".", "activations", "[", "'conv2'", "]", "=", "x", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "self", ".", "activations", "[", "'conv3'", "]", "=", "x", "\n", "x", "=", "self", ".", "final_pool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "self", ".", "activations", "[", "'fc'", "]", "=", "x", ".", "unsqueeze", "(", "-", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.face_model.UVNetFaceModel.forward": [[54, 56], ["face_model.UVNetFaceModel.forward_mask_channel"], "methods", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.face_model.UVNetFaceModel.forward_mask_channel"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "return", "self", ".", "forward_mask_channel", "(", "inp", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.face_model.get_face_model": [[7, 9], ["face_model.UVNetFaceModel"], "function", ["None"], ["def", "get_face_model", "(", "output_dims", "=", "64", ",", "input_channels", "=", "'xyz_normals'", ")", ":", "\n", "    ", "return", "UVNetFaceModel", "(", "input_channels", "=", "input_channels", ",", "output_dims", "=", "output_dims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.graph_model.ApplyNodeFunc.__init__": [[15, 19], ["torch.Module.__init__", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.classifier.NonLinearClassifier.__init__"], ["def", "__init__", "(", "self", ",", "mlp", ")", ":", "\n", "        ", "super", "(", "ApplyNodeFunc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mlp", "=", "mlp", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "mlp", ".", "output_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.graph_model.ApplyNodeFunc.forward": [[20, 25], ["graph_model.ApplyNodeFunc.mlp", "graph_model.ApplyNodeFunc.bn", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "h", ")", ":", "\n", "        ", "h", "=", "self", ".", "mlp", "(", "h", ")", "\n", "h", "=", "self", ".", "bn", "(", "h", ")", "\n", "h", "=", "F", ".", "relu", "(", "h", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.graph_model.MLP.__init__": [[30, 66], ["torch.Module.__init__", "ValueError", "torch.Linear", "torch.Linear", "torch.Linear", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "graph_model.MLP.linears.append", "range", "graph_model.MLP.linears.append", "range", "torch.Linear", "torch.Linear", "torch.Linear", "graph_model.MLP.linears.append", "torch.Linear", "torch.Linear", "torch.Linear", "graph_model.MLP.batch_norms.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.classifier.NonLinearClassifier.__init__"], ["def", "__init__", "(", "self", ",", "num_layers", ",", "input_dim", ",", "hidden_dim", ",", "output_dim", ")", ":", "\n", "        ", "\"\"\"MLP layers construction\n        Paramters\n        ---------\n        num_layers: int\n            The number of linear layers\n        input_dim: int\n            The dimensionality of input features\n        hidden_dim: int\n            The dimensionality of hidden units at ALL layers\n        output_dim: int\n            The number of classes for prediction\n        \"\"\"", "\n", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear_or_not", "=", "True", "# default is linear model", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "\n", "if", "num_layers", "<", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"number of layers should be positive!\"", ")", "\n", "", "elif", "num_layers", "==", "1", ":", "\n", "# Linear model", "\n", "            ", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "input_dim", ",", "output_dim", ")", "\n", "", "else", ":", "\n", "# Multi-layer model", "\n", "            ", "self", ".", "linear_or_not", "=", "False", "\n", "self", ".", "linears", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "batch_norms", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "self", ".", "linears", ".", "append", "(", "nn", ".", "Linear", "(", "input_dim", ",", "hidden_dim", ")", ")", "\n", "for", "layer", "in", "range", "(", "num_layers", "-", "2", ")", ":", "\n", "                ", "self", ".", "linears", ".", "append", "(", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", ")", "\n", "", "self", ".", "linears", ".", "append", "(", "nn", ".", "Linear", "(", "hidden_dim", ",", "output_dim", ")", ")", "\n", "\n", "for", "layer", "in", "range", "(", "num_layers", "-", "1", ")", ":", "\n", "                ", "self", ".", "batch_norms", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "(", "hidden_dim", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.graph_model.MLP.forward": [[67, 77], ["graph_model.MLP.linear", "range", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "linear_or_not", ":", "\n", "# If linear model", "\n", "            ", "return", "self", ".", "linear", "(", "x", ")", "\n", "", "else", ":", "\n", "# If MLP", "\n", "            ", "h", "=", "x", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", "-", "1", ")", ":", "\n", "                ", "h", "=", "F", ".", "relu", "(", "self", ".", "batch_norms", "[", "i", "]", "(", "self", ".", "linears", "[", "i", "]", "(", "h", ")", ")", ")", "\n", "", "return", "self", ".", "linears", "[", "-", "1", "]", "(", "h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.graph_model.UVNetGraphModel.__init__": [[90, 129], ["torch.Module.__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "torch.Linear", "torch.Linear", "torch.Linear", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "torch.Dropout", "torch.Dropout", "torch.Dropout", "graph_model.get_graph_pooling_layer", "graph_model.UVNetGraphModel.ginlayers.append", "graph_model.UVNetGraphModel.batch_norms.append", "graph_model.MLP", "graph_model.MLP", "dgl.nn.pytorch.conv.GINConv", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "graph_model.UVNetGraphModel.linears_prediction.append", "graph_model.UVNetGraphModel.linears_prediction.append", "graph_model.ApplyNodeFunc", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.classifier.NonLinearClassifier.__init__", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.graph_model.get_graph_pooling_layer"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "hidden_dim", "=", "64", ",", "\n", "neighbor_pooling_type", "=", "\"sum\"", ",", "graph_pooling_type", "=", "\"max\"", ",", "\n", "learn_eps", "=", "True", ",", "num_layers", "=", "3", ",", "num_mlp_layers", "=", "2", ")", ":", "\n", "\n", "        ", "super", "(", "UVNetGraphModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "learn_eps", "=", "learn_eps", "\n", "\n", "# List of MLPs", "\n", "self", ".", "ginlayers", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "batch_norms", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "layer", "in", "range", "(", "self", ".", "num_layers", "-", "1", ")", ":", "\n", "            ", "if", "layer", "==", "0", ":", "\n", "                ", "mlp", "=", "MLP", "(", "num_mlp_layers", ",", "input_dim", ",", "hidden_dim", ",", "hidden_dim", ")", "\n", "", "else", ":", "\n", "                ", "mlp", "=", "MLP", "(", "num_mlp_layers", ",", "hidden_dim", ",", "hidden_dim", ",", "hidden_dim", ")", "\n", "\n", "", "self", ".", "ginlayers", ".", "append", "(", "\n", "GINConv", "(", "ApplyNodeFunc", "(", "mlp", ")", ",", "neighbor_pooling_type", ",", "0", ",", "self", ".", "learn_eps", ")", ")", "\n", "self", ".", "batch_norms", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "hidden_dim", ")", ")", "\n", "\n", "", "self", ".", "final_layer", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "output_dim", ")", "\n", "# Linear function for graph poolings of output of each layer", "\n", "# which maps the output of different layers into a prediction score", "\n", "self", ".", "linears_prediction", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "layer", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "if", "layer", "==", "0", ":", "\n", "                ", "self", ".", "linears_prediction", ".", "append", "(", "\n", "nn", ".", "Linear", "(", "input_dim", ",", "output_dim", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "linears_prediction", ".", "append", "(", "\n", "nn", ".", "Linear", "(", "hidden_dim", ",", "output_dim", ")", ")", "\n", "\n", "", "", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "\n", "self", ".", "pool", "=", "get_graph_pooling_layer", "(", "graph_pooling_type", ")", "\n", "self", ".", "activations", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.graph_model.UVNetGraphModel.forward": [[130, 151], ["range", "enumerate", "torch.relu", "torch.relu", "torch.relu", "hidden_rep.append", "torch.relu.unsqueeze", "graph_model.UVNetGraphModel.pool", "graph_model.UVNetGraphModel.drop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "g", ",", "h", ")", ":", "\n", "# list of hidden representation at each layer (including input)", "\n", "        ", "hidden_rep", "=", "[", "h", "]", "\n", "self", ".", "activations", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", "-", "1", ")", ":", "\n", "            ", "h", "=", "self", ".", "ginlayers", "[", "i", "]", "(", "g", ",", "h", ")", "\n", "h", "=", "self", ".", "batch_norms", "[", "i", "]", "(", "h", ")", "\n", "h", "=", "F", ".", "relu", "(", "h", ")", "\n", "hidden_rep", ".", "append", "(", "h", ")", "\n", "self", ".", "activations", "[", "f'GIN_{i + 1}'", "]", "=", "h", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "", "out", "=", "hidden_rep", "[", "-", "1", "]", "\n", "score_over_layer", "=", "0", "\n", "\n", "# perform pooling over all nodes in each graph in every layer", "\n", "for", "i", ",", "h", "in", "enumerate", "(", "hidden_rep", ")", ":", "\n", "# graph pooling", "\n", "            ", "pooled_h", "=", "self", ".", "pool", "(", "g", ",", "h", ")", "\n", "score_over_layer", "+=", "self", ".", "drop", "(", "self", ".", "linears_prediction", "[", "i", "]", "(", "pooled_h", ")", ")", "\n", "\n", "", "return", "out", ",", "score_over_layer", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.graph_model.get_graph_model": [[8, 10], ["graph_model.UVNetGraphModel"], "function", ["None"], ["def", "get_graph_model", "(", "input_dims", ",", "output_dims", ")", ":", "\n", "    ", "return", "UVNetGraphModel", "(", "input_dims", ",", "output_dims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.graph_model.get_graph_pooling_layer": [[79, 87], ["ValueError", "dgl.nn.pytorch.glob.SumPooling", "dgl.nn.pytorch.glob.AvgPooling", "dgl.nn.pytorch.glob.MaxPooling"], "function", ["None"], ["", "", "", "def", "get_graph_pooling_layer", "(", "graph_pooling_type", ")", ":", "\n", "    ", "if", "graph_pooling_type", "==", "'sum'", ":", "\n", "        ", "return", "SumPooling", "(", ")", "\n", "", "elif", "graph_pooling_type", "==", "'mean'", ":", "\n", "        ", "return", "AvgPooling", "(", ")", "\n", "", "elif", "graph_pooling_type", "==", "'max'", ":", "\n", "        ", "return", "MaxPooling", "(", ")", "\n", "", "raise", "ValueError", "(", "\"Expected graph_pooling_type to be one of ('sum', 'mean', 'max')\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.decoder.PointDecoder.__init__": [[7, 14], ["torch.Module.__init__", "networks.fc", "networks.fc", "torch.Linear", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.classifier.NonLinearClassifier.__init__", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.nn_utils.fc", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.nn_utils.fc"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "num_points", ")", ":", "\n", "        ", "super", "(", "PointDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_points", "=", "num_points", "\n", "self", ".", "fc1", "=", "nnu", ".", "fc", "(", "input_dim", ",", "1024", ")", "\n", "self", ".", "fc2", "=", "nnu", ".", "fc", "(", "1024", ",", "2048", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "2048", ",", "num_points", "*", "3", ")", "\n", "self", ".", "th", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.decoder.PointDecoder.forward": [[15, 22], ["decoder.PointDecoder.fc1", "decoder.PointDecoder.fc2", "decoder.PointDecoder.fc3", "x.view().transpose().contiguous.view().transpose().contiguous.view().transpose().contiguous", "x.view().transpose().contiguous.view().transpose().contiguous.size", "x.view().transpose().contiguous.view().transpose().contiguous.view().transpose", "x.view().transpose().contiguous.view().transpose().contiguous.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batchsize", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "fc3", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "batchsize", ",", "3", ",", "self", ".", "num_points", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "return", "x", "### B x Num_points X 3", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.pointnet.PointNet.__init__": [[5, 25], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.classifier.NonLinearClassifier.__init__"], ["    ", "def", "__init__", "(", "self", ",", "emb_dims", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "PointNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv1d", "(", "3", ",", "64", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv1d", "(", "64", ",", "64", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv1d", "(", "64", ",", "64", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv1d", "(", "64", ",", "128", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv1d", "(", "128", ",", "emb_dims", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "64", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "64", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm1d", "(", "64", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "self", ".", "bn5", "=", "nn", ".", "BatchNorm1d", "(", "emb_dims", ")", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "emb_dims", ",", "512", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn6", "=", "nn", ".", "BatchNorm1d", "(", "512", ")", "\n", "self", ".", "dp1", "=", "nn", ".", "Dropout", "(", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "512", ",", "256", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn7", "=", "nn", ".", "BatchNorm1d", "(", "256", ")", "\n", "self", ".", "dp2", "=", "nn", ".", "Dropout", "(", ")", "\n", "self", ".", "linear3", "=", "nn", ".", "Linear", "(", "256", ",", "num_classes", ")", "\n", "self", ".", "activations", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.pointnet.PointNet.forward": [[26, 47], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.adaptive_max_pool1d().squeeze", "torch.adaptive_max_pool1d().squeeze", "torch.relu", "torch.relu", "pointnet.PointNet.dp1", "torch.relu", "torch.relu", "pointnet.PointNet.dp2", "pointnet.PointNet.linear3", "pointnet.PointNet.bn1", "pointnet.PointNet.bn2", "pointnet.PointNet.bn3", "pointnet.PointNet.bn4", "pointnet.PointNet.bn5", "pointnet.PointNet.bn6", "pointnet.PointNet.bn7", "pointnet.PointNet.conv1", "pointnet.PointNet.conv2", "pointnet.PointNet.conv3", "pointnet.PointNet.conv4", "pointnet.PointNet.conv5", "torch.adaptive_max_pool1d", "torch.adaptive_max_pool1d", "pointnet.PointNet.linear1", "pointnet.PointNet.linear2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "[", ":", ",", ":", "3", "]", "\n", "self", ".", "activations", "=", "{", "}", "\n", "self", ".", "activations", "[", "'feats'", "]", "=", "x", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "self", ".", "activations", "[", "'conv1'", "]", "=", "x", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "self", ".", "activations", "[", "'conv2'", "]", "=", "x", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "self", ".", "activations", "[", "'conv3'", "]", "=", "x", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn4", "(", "self", ".", "conv4", "(", "x", ")", ")", ")", "\n", "self", ".", "activations", "[", "'conv4'", "]", "=", "x", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn5", "(", "self", ".", "conv5", "(", "x", ")", ")", ")", "\n", "self", ".", "activations", "[", "'conv5'", "]", "=", "x", "\n", "x", "=", "F", ".", "adaptive_max_pool1d", "(", "x", ",", "1", ")", ".", "squeeze", "(", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn6", "(", "self", ".", "linear1", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "dp1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn7", "(", "self", ".", "linear2", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "dp2", "(", "x", ")", "\n", "x", "=", "self", ".", "linear3", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.pointnet.PointNet_Encoder.__init__": [[50, 65], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.classifier.NonLinearClassifier.__init__"], ["    ", "def", "__init__", "(", "self", ",", "emb_dims", ")", ":", "\n", "        ", "super", "(", "PointNet_Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv1d", "(", "3", ",", "64", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv1d", "(", "64", ",", "64", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv1d", "(", "64", ",", "64", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv1d", "(", "64", ",", "128", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv1d", "(", "128", ",", "emb_dims", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "64", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "64", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm1d", "(", "64", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "self", ".", "bn5", "=", "nn", ".", "BatchNorm1d", "(", "emb_dims", ")", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "emb_dims", ",", "emb_dims", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn6", "=", "nn", ".", "BatchNorm1d", "(", "emb_dims", ")", "\n", "self", ".", "activations", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.pointnet.PointNet_Encoder.forward": [[66, 81], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.adaptive_max_pool1d().squeeze", "torch.adaptive_max_pool1d().squeeze", "torch.relu", "torch.relu", "pointnet.PointNet_Encoder.bn1", "pointnet.PointNet_Encoder.bn2", "pointnet.PointNet_Encoder.bn3", "pointnet.PointNet_Encoder.bn4", "pointnet.PointNet_Encoder.bn5", "pointnet.PointNet_Encoder.bn6", "pointnet.PointNet_Encoder.conv1", "pointnet.PointNet_Encoder.conv2", "pointnet.PointNet_Encoder.conv3", "pointnet.PointNet_Encoder.conv4", "pointnet.PointNet_Encoder.conv5", "torch.adaptive_max_pool1d", "torch.adaptive_max_pool1d", "pointnet.PointNet_Encoder.linear1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "activations", "=", "{", "}", "\n", "self", ".", "activations", "[", "'feats'", "]", "=", "x", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "self", ".", "activations", "[", "'conv1'", "]", "=", "x", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "self", ".", "activations", "[", "'conv2'", "]", "=", "x", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "self", ".", "activations", "[", "'conv3'", "]", "=", "x", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn4", "(", "self", ".", "conv4", "(", "x", ")", ")", ")", "\n", "self", ".", "activations", "[", "'conv4'", "]", "=", "x", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn5", "(", "self", ".", "conv5", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "adaptive_max_pool1d", "(", "x", ",", "1", ")", ".", "squeeze", "(", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn6", "(", "self", ".", "linear1", "(", "x", ")", ")", ")", "\n", "return", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.nn_utils.conv": [[4, 9], ["torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "torch.LeakyReLU"], "function", ["None"], ["def", "conv", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "padding", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.nn_utils.conv1d": [[11, 16], ["torch.Sequential", "torch.Conv1d", "torch.BatchNorm1d", "torch.LeakyReLU"], "function", ["None"], ["", "def", "conv1d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "out_channels", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.nn_utils.fc": [[18, 23], ["torch.Sequential", "torch.Linear", "torch.BatchNorm1d", "torch.LeakyReLU"], "function", ["None"], ["", "def", "fc", "(", "in_features", ",", "out_features", ",", "bias", "=", "False", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_features", ",", "out_features", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "out_features", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.classifier.LinearClassifier.__init__": [[15, 21], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "classifier.LinearClassifier.modules", "classifier.LinearClassifier.weights_init"], "methods", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.classifier.NonLinearClassifier.__init__", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.classifier.NonLinearClassifier.weights_init"], ["    ", "def", "__init__", "(", "self", ",", "hidden_state", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "LinearClassifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "hidden_state", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "self", ".", "weights_init", "(", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.classifier.LinearClassifier.weights_init": [[22, 27], ["isinstance", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "m.bias.data.fill_"], "methods", ["None"], ["", "", "def", "weights_init", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform_", "(", "m", ".", "weight", ".", "data", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.classifier.LinearClassifier.forward": [[28, 31], ["classifier.LinearClassifier.fc"], "methods", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.nn_utils.fc"], ["", "", "", "def", "forward", "(", "self", ",", "seq", ")", ":", "\n", "        ", "ret", "=", "self", ".", "fc", "(", "seq", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.classifier.NonLinearClassifier.__init__": [[34, 46], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "classifier.NonLinearClassifier.modules", "classifier.NonLinearClassifier.weights_init"], "methods", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.classifier.NonLinearClassifier.__init__", "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.classifier.NonLinearClassifier.weights_init"], ["    ", "def", "__init__", "(", "self", ",", "hidden_state", ",", "num_classes", ",", "dropout", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "NonLinearClassifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "hidden_state", ",", "512", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "512", ")", "\n", "self", ".", "dp1", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "512", ",", "256", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "256", ")", "\n", "self", ".", "dp2", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "self", ".", "linear3", "=", "nn", ".", "Linear", "(", "256", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "self", ".", "weights_init", "(", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.classifier.NonLinearClassifier.weights_init": [[47, 52], ["isinstance", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "m.bias.data.fill_"], "methods", ["None"], ["", "", "def", "weights_init", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform_", "(", "m", ".", "weight", ".", "data", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.classifier.NonLinearClassifier.forward": [[53, 60], ["torch.relu", "torch.relu", "torch.relu", "classifier.NonLinearClassifier.dp1", "torch.relu", "torch.relu", "torch.relu", "classifier.NonLinearClassifier.dp2", "classifier.NonLinearClassifier.linear3", "classifier.NonLinearClassifier.bn1", "classifier.NonLinearClassifier.bn2", "classifier.NonLinearClassifier.linear1", "classifier.NonLinearClassifier.linear2"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "seq", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "linear1", "(", "seq", ")", ")", ")", "\n", "x", "=", "self", ".", "dp1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "linear2", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "dp2", "(", "x", ")", "\n", "out", "=", "self", ".", "linear3", "(", "x", ")", "\n", "return", "out", ",", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.networks.classifier.get_classifier": [[6, 12], ["ValueError", "classifier.LinearClassifier", "classifier.NonLinearClassifier"], "function", ["None"], ["def", "get_classifier", "(", "classifier_type", ",", "hidden_dim", ",", "num_classes", ",", "dropout", "=", "0.5", ")", ":", "\n", "    ", "if", "classifier_type", "==", "\"linear\"", ":", "\n", "        ", "return", "LinearClassifier", "(", "hidden_dim", ",", "num_classes", ")", "\n", "", "if", "classifier_type", "==", "\"non_linear\"", ":", "\n", "        ", "return", "NonLinearClassifier", "(", "hidden_dim", ",", "num_classes", ",", "dropout", "=", "dropout", ")", "\n", "", "raise", "ValueError", "(", "\"Invalid classifier type: {}, expected one of ('linear', 'non_linear')\"", ".", "format", "(", "classifier_type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.chamfer_distance.chamfer_distance.ChamferDistanceFunction.forward": [[10, 34], ["xyz1.contiguous.contiguous.size", "xyz2.contiguous.contiguous.size", "xyz1.contiguous.contiguous.contiguous", "xyz2.contiguous.contiguous.contiguous", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "ctx.save_for_backward", "cd.forward", "dist1.cuda.cuda.cuda", "dist2.cuda.cuda.cuda", "idx1.cuda.cuda.cuda", "idx2.cuda.cuda.cuda", "cd.forward_cuda"], "methods", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.chamfer_distance.chamfer_distance.ChamferDistance.forward"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "xyz1", ",", "xyz2", ")", ":", "\n", "        ", "batchsize", ",", "n", ",", "_", "=", "xyz1", ".", "size", "(", ")", "\n", "_", ",", "m", ",", "_", "=", "xyz2", ".", "size", "(", ")", "\n", "xyz1", "=", "xyz1", ".", "contiguous", "(", ")", "\n", "xyz2", "=", "xyz2", ".", "contiguous", "(", ")", "\n", "dist1", "=", "torch", ".", "zeros", "(", "batchsize", ",", "n", ")", "\n", "dist2", "=", "torch", ".", "zeros", "(", "batchsize", ",", "m", ")", "\n", "\n", "idx1", "=", "torch", ".", "zeros", "(", "batchsize", ",", "n", ",", "dtype", "=", "torch", ".", "int", ")", "\n", "idx2", "=", "torch", ".", "zeros", "(", "batchsize", ",", "m", ",", "dtype", "=", "torch", ".", "int", ")", "\n", "\n", "if", "not", "xyz1", ".", "is_cuda", ":", "\n", "            ", "cd", ".", "forward", "(", "xyz1", ",", "xyz2", ",", "dist1", ",", "dist2", ",", "idx1", ",", "idx2", ")", "\n", "", "else", ":", "\n", "            ", "dist1", "=", "dist1", ".", "cuda", "(", ")", "\n", "dist2", "=", "dist2", ".", "cuda", "(", ")", "\n", "idx1", "=", "idx1", ".", "cuda", "(", ")", "\n", "idx2", "=", "idx2", ".", "cuda", "(", ")", "\n", "cd", ".", "forward_cuda", "(", "xyz1", ",", "xyz2", ",", "dist1", ",", "dist2", ",", "idx1", ",", "idx2", ")", "\n", "\n", "", "ctx", ".", "save_for_backward", "(", "xyz1", ",", "xyz2", ",", "idx1", ",", "idx2", ")", "\n", "\n", "return", "dist1", ",", "dist2", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.chamfer_distance.chamfer_distance.ChamferDistanceFunction.backward": [[35, 53], ["graddist1.contiguous.contiguous.contiguous", "graddist2.contiguous.contiguous.contiguous", "torch.zeros", "torch.zeros", "xyz1.size", "xyz2.size", "cd.backward", "gradxyz1.cuda.cuda.cuda", "gradxyz2.cuda.cuda.cuda", "cd.backward_cuda"], "methods", ["home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.chamfer_distance.chamfer_distance.ChamferDistanceFunction.backward"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "graddist1", ",", "graddist2", ")", ":", "\n", "        ", "xyz1", ",", "xyz2", ",", "idx1", ",", "idx2", "=", "ctx", ".", "saved_tensors", "\n", "\n", "graddist1", "=", "graddist1", ".", "contiguous", "(", ")", "\n", "graddist2", "=", "graddist2", ".", "contiguous", "(", ")", "\n", "\n", "gradxyz1", "=", "torch", ".", "zeros", "(", "xyz1", ".", "size", "(", ")", ")", "\n", "gradxyz2", "=", "torch", ".", "zeros", "(", "xyz2", ".", "size", "(", ")", ")", "\n", "\n", "if", "not", "graddist1", ".", "is_cuda", ":", "\n", "            ", "cd", ".", "backward", "(", "xyz1", ",", "xyz2", ",", "gradxyz1", ",", "gradxyz2", ",", "graddist1", ",", "graddist2", ",", "idx1", ",", "idx2", ")", "\n", "", "else", ":", "\n", "            ", "gradxyz1", "=", "gradxyz1", ".", "cuda", "(", ")", "\n", "gradxyz2", "=", "gradxyz2", ".", "cuda", "(", ")", "\n", "cd", ".", "backward_cuda", "(", "xyz1", ",", "xyz2", ",", "gradxyz1", ",", "gradxyz2", ",", "graddist1", ",", "graddist2", ",", "idx1", ",", "idx2", ")", "\n", "\n", "", "return", "gradxyz1", ",", "gradxyz2", "\n", "\n"]], "home.repos.pwc.inspect_result.AutodeskAILab_UVStyle-Net.chamfer_distance.chamfer_distance.ChamferDistance.forward": [[56, 58], ["ChamferDistanceFunction.apply"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "xyz1", ",", "xyz2", ")", ":", "\n", "        ", "return", "ChamferDistanceFunction", ".", "apply", "(", "xyz1", ",", "xyz2", ")", "\n", "", "", ""]]}