{"home.repos.pwc.inspect_result.Davidzhangyuanhan_CelebA-Spoof.intra_dataset_code.models.BasicBlock.__init__": [[26, 35], ["torch.Module.__init__", "models.conv3x3", "BN", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "models.conv3x3", "BN"], "methods", ["home.repos.pwc.inspect_result.Davidzhangyuanhan_CelebA-Spoof.intra_dataset_code.detector.CelebASpoofDetector.__init__", "home.repos.pwc.inspect_result.Davidzhangyuanhan_CelebA-Spoof.intra_dataset_code.models.conv3x3", "home.repos.pwc.inspect_result.Davidzhangyuanhan_CelebA-Spoof.intra_dataset_code.models.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "BN", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "BN", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Davidzhangyuanhan_CelebA-Spoof.intra_dataset_code.models.BasicBlock.forward": [[36, 53], ["models.BasicBlock.conv1", "models.BasicBlock.bn1", "models.BasicBlock.relu", "models.BasicBlock.conv2", "models.BasicBlock.bn2", "models.BasicBlock.relu", "models.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Davidzhangyuanhan_CelebA-Spoof.intra_dataset_code.models.Bottleneck.__init__": [[58, 70], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BN", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BN", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BN", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Davidzhangyuanhan_CelebA-Spoof.intra_dataset_code.detector.CelebASpoofDetector.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BN", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "BN", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "BN", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Davidzhangyuanhan_CelebA-Spoof.intra_dataset_code.models.Bottleneck.forward": [[71, 92], ["models.Bottleneck.conv1", "models.Bottleneck.bn1", "models.Bottleneck.relu", "models.Bottleneck.conv2", "models.Bottleneck.bn2", "models.Bottleneck.relu", "models.Bottleneck.conv3", "models.Bottleneck.bn3", "models.Bottleneck.relu", "models.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Davidzhangyuanhan_CelebA-Spoof.intra_dataset_code.models.AENet.__init__": [[99, 143], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BN", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "models.AENet._make_layer", "models.AENet._make_layer", "models.AENet._make_layer", "models.AENet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "models.AENet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.Davidzhangyuanhan_CelebA-Spoof.intra_dataset_code.detector.CelebASpoofDetector.__init__", "home.repos.pwc.inspect_result.Davidzhangyuanhan_CelebA-Spoof.intra_dataset_code.models.AENet._make_layer", "home.repos.pwc.inspect_result.Davidzhangyuanhan_CelebA-Spoof.intra_dataset_code.models.AENet._make_layer", "home.repos.pwc.inspect_result.Davidzhangyuanhan_CelebA-Spoof.intra_dataset_code.models.AENet._make_layer", "home.repos.pwc.inspect_result.Davidzhangyuanhan_CelebA-Spoof.intra_dataset_code.models.AENet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", "=", "BasicBlock", ",", "layers", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "num_classes", "=", "1000", ",", "sync_stats", "=", "False", ")", ":", "\n", "\n", "        ", "global", "BN", "\n", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "AENet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BN", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "\n", "# Three classifiers of semantic informantion", "\n", "self", ".", "fc_live_attribute", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "40", ")", "\n", "self", ".", "fc_attack", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "11", ")", "\n", "self", ".", "fc_light", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "5", ")", "\n", "# One classifier of Live/Spoof information", "\n", "self", ".", "fc_live", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "2", ")", "\n", "\n", "\n", "# Two embedding modules of geometric information", "\n", "self", ".", "upsample14", "=", "nn", ".", "Upsample", "(", "(", "14", ",", "14", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "self", ".", "depth_final", "=", "nn", ".", "Conv2d", "(", "512", ",", "1", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "reflect_final", "=", "nn", ".", "Conv2d", "(", "512", ",", "3", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "# The ground truth of depth map and reflection map has been normalized[torchvision.transforms.ToTensor()]", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n", "\n", "\n", "\n", "# initialization", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Davidzhangyuanhan_CelebA-Spoof.intra_dataset_code.models.AENet._make_layer": [[144, 160], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BN", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "BN", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Davidzhangyuanhan_CelebA-Spoof.intra_dataset_code.models.AENet.forward": [[161, 196], ["models.AENet.conv1", "models.AENet.bn1", "models.AENet.relu", "models.AENet.maxpool", "models.AENet.layer1", "models.AENet.layer2", "models.AENet.layer3", "models.AENet.layer4", "models.AENet.depth_final", "models.AENet.reflect_final", "models.AENet.sigmoid", "models.AENet.upsample14", "models.AENet.sigmoid", "models.AENet.upsample14", "models.AENet.avgpool", "x.view.view.view", "models.AENet.fc_live_attribute", "models.AENet.fc_attack", "models.AENet.fc_light", "models.AENet.fc_live", "x.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "depth_map", "=", "self", ".", "depth_final", "(", "x", ")", "\n", "reflect_map", "=", "self", ".", "reflect_final", "(", "x", ")", "\n", "\n", "depth_map", "=", "self", ".", "sigmoid", "(", "depth_map", ")", "\n", "depth_map", "=", "self", ".", "upsample14", "(", "depth_map", ")", "\n", "\n", "\n", "reflect_map", "=", "self", ".", "sigmoid", "(", "reflect_map", ")", "\n", "reflect_map", "=", "self", ".", "upsample14", "(", "reflect_map", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "\n", "x_live_attribute", "=", "self", ".", "fc_live_attribute", "(", "x", ")", "\n", "x_attack", "=", "self", ".", "fc_attack", "(", "x", ")", "\n", "x_light", "=", "self", ".", "fc_light", "(", "x", ")", "\n", "x_live", "=", "self", ".", "fc_live", "(", "x", ")", "\n", "\n", "\n", "\n", "\n", "return", "x_live", "\n", "\n"]], "home.repos.pwc.inspect_result.Davidzhangyuanhan_CelebA-Spoof.intra_dataset_code.models.conv3x3": [[17, 21], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Davidzhangyuanhan_CelebA-Spoof.intra_dataset_code.main.run_test": [[33, 79], ["logging.info", "logging.info", "logging.info", "logging.info", "client.verify_output", "detector_class", "time.time", "len", "detector_class.predict", "enumerate", "logging.info", "float", "logging.error"], "function", ["home.repos.pwc.inspect_result.Davidzhangyuanhan_CelebA-Spoof.intra_dataset_code.client.verify_output", "home.repos.pwc.inspect_result.Davidzhangyuanhan_CelebA-Spoof.intra_dataset_code.detector.CelebASpoofDetector.predict"], ["def", "run_test", "(", "detector_class", ",", "image_iter", ")", ":", "\n", "    ", "\"\"\"\n    In this function we create the detector instance. And evaluate the wall time for performing CelebASpoofDetector.\n    \"\"\"", "\n", "\n", "# initialize the detector", "\n", "logging", ".", "info", "(", "\"Initializing detector.\"", ")", "\n", "try", ":", "\n", "        ", "detector", "=", "detector_class", "(", ")", "\n", "", "except", ":", "\n", "# send errors to the eval frontend", "\n", "        ", "raise", "\n", "", "logging", ".", "info", "(", "\"Detector initialized.\"", ")", "\n", "\n", "\n", "# run the images one-by-one and get runtime", "\n", "output_probs", "=", "{", "}", "\n", "eval_cnt", "=", "0", "\n", "\n", "logging", ".", "info", "(", "\"Starting runtime evaluation\"", ")", "\n", "for", "image_id", ",", "image", "in", "image_iter", ":", "\n", "        ", "time_before", "=", "time", ".", "time", "(", ")", "\n", "try", ":", "\n", "            ", "prob", "=", "detector", ".", "predict", "(", "image", ")", "\n", "\n", "for", "idx", ",", "i", "in", "enumerate", "(", "image_id", ")", ":", "\n", "                ", "output_probs", "[", "i", "]", "=", "float", "(", "prob", "[", "idx", "]", "[", "1", "]", ")", "\n", "", "", "except", ":", "\n", "# send errors to the eval frontend", "\n", "            ", "logging", ".", "error", "(", "\"Image id failed: {}\"", ".", "format", "(", "image_id", ")", ")", "\n", "raise", "\n", "\n", "\n", "", "eval_cnt", "+=", "len", "(", "image", ")", "\n", "\n", "if", "eval_cnt", "%", "10", "==", "0", ":", "\n", "            ", "logging", ".", "info", "(", "\"Finished {} images\"", ".", "format", "(", "eval_cnt", ")", ")", "\n", "\n", "", "", "logging", ".", "info", "(", "\"\"\"\n    ================================================================================\n    All images finished, showing verification info below:\n    ================================================================================\n    \"\"\"", ")", "\n", "\n", "# verify the algorithm output", "\n", "verify_output", "(", "output_probs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Davidzhangyuanhan_CelebA-Spoof.intra_dataset_code.client.read_image": [[20, 66], ["cv2.imread", "os.path.exists", "cv2.cvtColor", "open", "f.readline", "f.readline.strip().split", "int", "int", "int", "int", "int", "int", "int", "int", "logging.info", "float", "float", "float", "float", "logging.info", "f.readline.strip"], "function", ["None"], ["def", "read_image", "(", "image_path", ")", ":", "\n", "    ", "\"\"\"\n    Read an image from input path\n\n    params:\n        - image_local_path (str): the path of image.\n    return:\n        - image: Required image.\n    \"\"\"", "\n", "\n", "image_path", "=", "LOCAL_ROOT", "+", "image_path", "\n", "\n", "img", "=", "cv2", ".", "imread", "(", "image_path", ")", "\n", "# Get the shape of input image", "\n", "real_h", ",", "real_w", ",", "c", "=", "img", ".", "shape", "\n", "assert", "os", ".", "path", ".", "exists", "(", "image_path", "[", ":", "-", "4", "]", "+", "'_BB.txt'", ")", ",", "'path not exists'", "+", "' '", "+", "image_path", "\n", "\n", "with", "open", "(", "image_path", "[", ":", "-", "4", "]", "+", "'_BB.txt'", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "material", "=", "f", ".", "readline", "(", ")", "\n", "try", ":", "\n", "            ", "x", ",", "y", ",", "w", ",", "h", ",", "score", "=", "material", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "", "except", ":", "\n", "            ", "logging", ".", "info", "(", "'Bounding Box of'", "+", "' '", "+", "image_path", "+", "' '", "+", "'is wrong'", ")", "\n", "\n", "", "try", ":", "\n", "            ", "w", "=", "int", "(", "float", "(", "w", ")", ")", "\n", "h", "=", "int", "(", "float", "(", "h", ")", ")", "\n", "x", "=", "int", "(", "float", "(", "x", ")", ")", "\n", "y", "=", "int", "(", "float", "(", "y", ")", ")", "\n", "w", "=", "int", "(", "w", "*", "(", "real_w", "/", "224", ")", ")", "\n", "h", "=", "int", "(", "h", "*", "(", "real_h", "/", "224", ")", ")", "\n", "x", "=", "int", "(", "x", "*", "(", "real_w", "/", "224", ")", ")", "\n", "y", "=", "int", "(", "y", "*", "(", "real_h", "/", "224", ")", ")", "\n", "\n", "# Crop face based on its bounding box", "\n", "y1", "=", "0", "if", "y", "<", "0", "else", "y", "\n", "x1", "=", "0", "if", "x", "<", "0", "else", "x", "\n", "y2", "=", "real_h", "if", "y1", "+", "h", ">", "real_h", "else", "y", "+", "h", "\n", "x2", "=", "real_w", "if", "x1", "+", "w", ">", "real_w", "else", "x", "+", "w", "\n", "img", "=", "img", "[", "y1", ":", "y2", ",", "x1", ":", "x2", ",", ":", "]", "\n", "\n", "", "except", ":", "\n", "            ", "logging", ".", "info", "(", "'Cropping Bounding Box of'", "+", "' '", "+", "image_path", "+", "' '", "+", "'goes wrong'", ")", "\n", "\n", "", "", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.Davidzhangyuanhan_CelebA-Spoof.intra_dataset_code.client.get_image": [[69, 103], ["logging.info", "logging.info", "enumerate", "open", "json.load", "len", "client.read_image", "final_image.append", "final_image_id.append", "numpy.array", "numpy.array", "json.load.keys", "logging.info", "len"], "function", ["home.repos.pwc.inspect_result.Davidzhangyuanhan_CelebA-Spoof.intra_dataset_code.client.read_image"], ["", "def", "get_image", "(", "max_number", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    This function returns a iterator of image.\n    It is used for local test of participating algorithms.\n    Each iteration provides a tuple of (image_id, image), each image will be in RGB color format with array shape of (height, width, 3)\n    \n    return: tuple(image_id: str, image: numpy.array)\n    \"\"\"", "\n", "with", "open", "(", "LOCAL_ROOT", "+", "LOCAL_IMAGE_LIST_PATH", ")", "as", "f", ":", "\n", "        ", "image_list", "=", "json", ".", "load", "(", "f", ")", "\n", "", "logging", ".", "info", "(", "\"got local image list, {} image\"", ".", "format", "(", "len", "(", "image_list", ".", "keys", "(", ")", ")", ")", ")", "\n", "Batch_size", "=", "1024", "\n", "logging", ".", "info", "(", "\"Batch_size=, {}\"", ".", "format", "(", "Batch_size", ")", ")", "\n", "n", "=", "0", "\n", "final_image", "=", "[", "]", "\n", "final_image_id", "=", "[", "]", "\n", "for", "idx", ",", "image_id", "in", "enumerate", "(", "image_list", ")", ":", "\n", "# get image from local file", "\n", "        ", "try", ":", "\n", "            ", "image", "=", "read_image", "(", "image_id", ")", "\n", "final_image", ".", "append", "(", "image", ")", "\n", "final_image_id", ".", "append", "(", "image_id", ")", "\n", "n", "+=", "1", "\n", "", "except", ":", "\n", "            ", "logging", ".", "info", "(", "\"Failed to read image: {}\"", ".", "format", "(", "image_id", ")", ")", "\n", "raise", "\n", "\n", "", "if", "n", "==", "Batch_size", "or", "idx", "==", "len", "(", "image_list", ")", "-", "1", ":", "\n", "            ", "np_final_image_id", "=", "np", ".", "array", "(", "final_image_id", ")", "\n", "np_final_image", "=", "np", ".", "array", "(", "final_image", ")", "\n", "n", "=", "0", "\n", "final_image", "=", "[", "]", "\n", "final_image_id", "=", "[", "]", "\n", "yield", "np_final_image_id", ",", "np_final_image", "\n", "\n"]], "home.repos.pwc.inspect_result.Davidzhangyuanhan_CelebA-Spoof.intra_dataset_code.client.get_thresholdtable_from_fpr": [[106, 128], ["zip", "live_scores.sort", "len", "int", "max", "threshold_list.append", "live_scores.append", "float"], "function", ["None"], ["", "", "", "def", "get_thresholdtable_from_fpr", "(", "scores", ",", "labels", ",", "fpr_list", ")", ":", "\n", "    ", "\"\"\"Calculate the threshold score list from the FPR list\n\n    Args:\n      score_target: list of (score,label)\n\n    Returns:\n      threshold_list: list, the element is threshold score calculated by the\n      corresponding fpr\n    \"\"\"", "\n", "threshold_list", "=", "[", "]", "\n", "live_scores", "=", "[", "]", "\n", "for", "score", ",", "label", "in", "zip", "(", "scores", ",", "labels", ")", ":", "\n", "        ", "if", "label", "==", "0", ":", "\n", "            ", "live_scores", ".", "append", "(", "float", "(", "score", ")", ")", "\n", "", "", "live_scores", ".", "sort", "(", "reverse", "=", "True", ")", "\n", "live_nums", "=", "len", "(", "live_scores", ")", "\n", "for", "fpr", "in", "fpr_list", ":", "\n", "        ", "i_sample", "=", "int", "(", "fpr", "*", "live_nums", ")", "\n", "i_sample", "=", "max", "(", "1", ",", "i_sample", ")", "\n", "threshold_list", ".", "append", "(", "live_scores", "[", "i_sample", "-", "1", "]", ")", "\n", "", "return", "threshold_list", "\n", "\n"]], "home.repos.pwc.inspect_result.Davidzhangyuanhan_CelebA-Spoof.intra_dataset_code.client.get_tpr_from_threshold": [[130, 161], ["zip", "hack_scores.sort", "len", "tpr_list.append", "hack_scores.append", "float"], "function", ["None"], ["", "def", "get_tpr_from_threshold", "(", "scores", ",", "labels", ",", "threshold_list", ")", ":", "\n", "    ", "\"\"\"Calculate the recall score list from the threshold score list.\n\n    Args:\n      score_target: list of (score,label)\n      threshold_list: list, the threshold list\n\n    Returns:\n      recall_list: list, the element is recall score calculated by the\n                   correspond threshold\n    \"\"\"", "\n", "tpr_list", "=", "[", "]", "\n", "hack_scores", "=", "[", "]", "\n", "for", "score", ",", "label", "in", "zip", "(", "scores", ",", "labels", ")", ":", "\n", "        ", "if", "label", "==", "1", ":", "\n", "            ", "hack_scores", ".", "append", "(", "float", "(", "score", ")", ")", "\n", "", "", "hack_scores", ".", "sort", "(", "reverse", "=", "True", ")", "\n", "hack_nums", "=", "len", "(", "hack_scores", ")", "\n", "for", "threshold", "in", "threshold_list", ":", "\n", "        ", "hack_index", "=", "0", "\n", "while", "hack_index", "<", "hack_nums", ":", "\n", "            ", "if", "hack_scores", "[", "hack_index", "]", "<=", "threshold", ":", "\n", "                ", "break", "\n", "", "else", ":", "\n", "                ", "hack_index", "+=", "1", "\n", "", "", "if", "hack_nums", "!=", "0", ":", "\n", "            ", "tpr", "=", "hack_index", "*", "1.0", "/", "hack_nums", "\n", "", "else", ":", "\n", "            ", "tpr", "=", "0", "\n", "", "tpr_list", ".", "append", "(", "tpr", ")", "\n", "", "return", "tpr_list", "\n", "\n"]], "home.repos.pwc.inspect_result.Davidzhangyuanhan_CelebA-Spoof.intra_dataset_code.client.verify_output": [[164, 195], ["client.get_thresholdtable_from_fpr", "client.get_tpr_from_threshold", "logging.info", "logging.info", "logging.info", "logging.info", "open", "json.load", "scores.append", "labels.append"], "function", ["home.repos.pwc.inspect_result.Davidzhangyuanhan_CelebA-Spoof.intra_dataset_code.client.get_thresholdtable_from_fpr", "home.repos.pwc.inspect_result.Davidzhangyuanhan_CelebA-Spoof.intra_dataset_code.client.get_tpr_from_threshold"], ["", "def", "verify_output", "(", "output_probs", ")", ":", "\n", "    ", "\"\"\"\n    This function prints the groundtruth and prediction for the participant to verify, calculates average FPS.\n\n    params:\n    - output_probs (dict): dict of probability of every video\n    - output_times (dict): dict of processing time of every video\n    - num_frames (dict): dict of number of frames extracting from every video\n    \"\"\"", "\n", "with", "open", "(", "LOCAL_ROOT", "+", "LOCAL_IMAGE_LIST_PATH", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "gts", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "scores", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "for", "k", "in", "output_probs", ":", "\n", "#import pdb;pdb.set_trace()", "\n", "        ", "if", "k", "in", "gts", ":", "\n", "            ", "scores", ".", "append", "(", "output_probs", "[", "k", "]", ")", "\n", "# 43 is the index of Live/Spoof label", "\n", "labels", ".", "append", "(", "gts", "[", "k", "]", "[", "43", "]", ")", "\n", "\n", "", "", "fpr_list", "=", "[", "0.01", ",", "0.005", ",", "0.001", "]", "\n", "threshold_list", "=", "get_thresholdtable_from_fpr", "(", "scores", ",", "labels", ",", "fpr_list", ")", "\n", "tpr_list", "=", "get_tpr_from_threshold", "(", "scores", ",", "labels", ",", "threshold_list", ")", "\n", "\n", "# Show the result into score_path/score.txt  ", "\n", "logging", ".", "info", "(", "'TPR@FPR=10E-3: {}\\n'", ".", "format", "(", "tpr_list", "[", "0", "]", ")", ")", "\n", "logging", ".", "info", "(", "'TPR@FPR=5E-3: {}\\n'", ".", "format", "(", "tpr_list", "[", "1", "]", ")", ")", "\n", "logging", ".", "info", "(", "'TPR@FPR=10E-4: {}\\n'", ".", "format", "(", "tpr_list", "[", "2", "]", ")", ")", "\n", "\n", "logging", ".", "info", "(", "\"Done\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Davidzhangyuanhan_CelebA-Spoof.intra_dataset_code.tsn_predict.TSNPredictor.__init__": [[32, 49], ["models.AENet", "torch.load", "tsn_predict.pretrain", "torchvision.transforms.Compose", "tsn_predict.TSNPredictor.net.cuda", "tsn_predict.TSNPredictor.net.eval", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor"], "methods", ["home.repos.pwc.inspect_result.Davidzhangyuanhan_CelebA-Spoof.intra_dataset_code.tsn_predict.pretrain"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "num_class", "=", "2", "\n", "self", ".", "net", "=", "AENet", "(", "num_classes", "=", "self", ".", "num_class", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "'./ckpt_iter.pth.tar'", ")", "\n", "\n", "pretrain", "(", "self", ".", "net", ",", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n", "self", ".", "new_width", "=", "self", ".", "new_height", "=", "224", "\n", "\n", "self", ".", "transform", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "\n", "torchvision", ".", "transforms", ".", "Resize", "(", "(", "self", ".", "new_width", ",", "self", ".", "new_height", ")", ")", ",", "\n", "torchvision", ".", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", "\n", "\n", "\n", "self", ".", "net", ".", "cuda", "(", ")", "\n", "self", ".", "net", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Davidzhangyuanhan_CelebA-Spoof.intra_dataset_code.tsn_predict.TSNPredictor.preprocess_data": [[52, 56], ["PIL.Image.fromarray", "tsn_predict.TSNPredictor.transform"], "methods", ["None"], ["", "def", "preprocess_data", "(", "self", ",", "image", ")", ":", "\n", "        ", "processed_data", "=", "Image", ".", "fromarray", "(", "image", ")", "\n", "processed_data", "=", "self", ".", "transform", "(", "processed_data", ")", "\n", "return", "processed_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Davidzhangyuanhan_CelebA-Spoof.intra_dataset_code.tsn_predict.TSNPredictor.eval_image": [[57, 64], ["torch.stack", "torch.stack.view().cuda", "tsn_predict.TSNPredictor.reshape", "torch.no_grad", "tsn_predict.TSNPredictor.net().detach", "torch.stack.view", "torch.stack.size", "torch.stack.size", "tsn_predict.TSNPredictor.net"], "methods", ["None"], ["", "def", "eval_image", "(", "self", ",", "image", ")", ":", "\n", "        ", "data", "=", "torch", ".", "stack", "(", "image", ",", "dim", "=", "0", ")", "\n", "channel", "=", "3", "\n", "input_var", "=", "data", ".", "view", "(", "-", "1", ",", "channel", ",", "data", ".", "size", "(", "2", ")", ",", "data", ".", "size", "(", "3", ")", ")", ".", "cuda", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "rst", "=", "self", ".", "net", "(", "input_var", ")", ".", "detach", "(", ")", "\n", "", "return", "rst", ".", "reshape", "(", "-", "1", ",", "self", ".", "num_class", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Davidzhangyuanhan_CelebA-Spoof.intra_dataset_code.tsn_predict.TSNPredictor.predict": [[65, 74], ["tsn_predict.TSNPredictor.eval_image", "torch.nn.functional.softmax().cpu().numpy().copy", "numpy.array", "tsn_predict.TSNPredictor.preprocess_data", "real_data.append", "torch.nn.functional.softmax().cpu().numpy", "torch.nn.functional.softmax().cpu", "torch.nn.functional.softmax"], "methods", ["home.repos.pwc.inspect_result.Davidzhangyuanhan_CelebA-Spoof.intra_dataset_code.tsn_predict.TSNPredictor.eval_image", "home.repos.pwc.inspect_result.Davidzhangyuanhan_CelebA-Spoof.intra_dataset_code.tsn_predict.TSNPredictor.preprocess_data"], ["", "def", "predict", "(", "self", ",", "images", ")", ":", "\n", "        ", "real_data", "=", "[", "]", "\n", "for", "image", "in", "images", ":", "\n", "            ", "data", "=", "self", ".", "preprocess_data", "(", "image", ")", "\n", "real_data", ".", "append", "(", "data", ")", "\n", "", "rst", "=", "self", ".", "eval_image", "(", "real_data", ")", "\n", "rst", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "rst", ",", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "copy", "(", ")", "\n", "probability", "=", "np", ".", "array", "(", "rst", ")", "\n", "return", "probability", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Davidzhangyuanhan_CelebA-Spoof.intra_dataset_code.tsn_predict.pretrain": [[12, 29], ["model.state_dict", "state_dict.items", "name.replace", "isinstance", "own_state[].copy_", "print", "print", "own_state[].size", "param.size"], "function", ["None"], ["def", "pretrain", "(", "model", ",", "state_dict", ")", ":", "\n", "    ", "own_state", "=", "model", ".", "state_dict", "(", ")", "\n", "\n", "for", "name", ",", "param", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "realname", "=", "name", ".", "replace", "(", "'module.'", ",", "''", ")", "\n", "if", "realname", "in", "own_state", ":", "\n", "            ", "if", "isinstance", "(", "param", ",", "torch", ".", "nn", ".", "Parameter", ")", ":", "\n", "# backwards compatibility for serialized parameters", "\n", "                ", "param", "=", "param", ".", "data", "\n", "", "try", ":", "\n", "                ", "own_state", "[", "realname", "]", ".", "copy_", "(", "param", ")", "\n", "", "except", ":", "\n", "                ", "print", "(", "'While copying the parameter named {}, '", "\n", "'whose dimensions in the model are {} and '", "\n", "'whose dimensions in the checkpoint are {}.'", "\n", ".", "format", "(", "realname", ",", "own_state", "[", "name", "]", ".", "size", "(", ")", ",", "param", ".", "size", "(", ")", ")", ")", "\n", "print", "(", "\"But don't worry about it. Continue pretraining.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Davidzhangyuanhan_CelebA-Spoof.intra_dataset_code.detector.CelebASpoofDetector.__init__": [[5, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Participants should define their own initialization process.\n        During this process you can set up your network. The time cost for this step will\n        not be counted in runtime evaluation\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Davidzhangyuanhan_CelebA-Spoof.intra_dataset_code.detector.CelebASpoofDetector.predict": [[12, 26], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "predict", "(", "self", ",", "image", ")", ":", "\n", "        ", "\"\"\"\n        Process a list of image, the evaluation toolkit will measure the runtime of every call to this method.\n        The time cost will include any thing that's between the image input to the final prediction score.\n        The image will be given as a numpy array in the shape of (H, W, C) with dtype np.uint8.\n        The color mode of the image will be **RGB**.\n        \n        params:\n            - image (np.array): numpy array of required image\n        return:\n            - probablity (float)\n        \"\"\"", "\n", "pass", "\n", "", "", ""]]}