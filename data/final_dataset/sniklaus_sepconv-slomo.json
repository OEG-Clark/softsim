{"home.repos.pwc.inspect_result.sniklaus_sepconv-slomo.None.sepconv.sepconv_func.forward": [[233, 290], ["torch.cuda.amp.custom_fwd", "tenIn.new_empty", "sepconv.sepconv_func.save_for_backward", "sepconv.cuda_launch", "sepconv.cuda_kernel", "tuple", "tuple", "sepconv.cuda_int32", "tenIn.data_ptr", "tenVer.data_ptr", "tenHor.data_ptr", "tenIn.new_empty.data_ptr", "collections.namedtuple", "int", "tenIn.new_empty.nelement", "torch.cuda.current_stream", "tenIn.new_empty.nelement"], "methods", ["home.repos.pwc.inspect_result.sniklaus_sepconv-slomo.None.sepconv.cuda_launch", "home.repos.pwc.inspect_result.sniklaus_sepconv-slomo.None.sepconv.cuda_kernel", "home.repos.pwc.inspect_result.sniklaus_sepconv-slomo.None.sepconv.cuda_int32"], ["    ", "@", "staticmethod", "\n", "@", "torch", ".", "cuda", ".", "amp", ".", "custom_fwd", "(", "cast_inputs", "=", "torch", ".", "float32", ")", "\n", "def", "forward", "(", "self", ",", "tenIn", ",", "tenVer", ",", "tenHor", ")", ":", "\n", "        ", "tenOut", "=", "tenIn", ".", "new_empty", "(", "[", "tenIn", ".", "shape", "[", "0", "]", ",", "tenIn", ".", "shape", "[", "1", "]", ",", "tenVer", ".", "shape", "[", "2", "]", "and", "tenHor", ".", "shape", "[", "2", "]", ",", "tenVer", ".", "shape", "[", "3", "]", "and", "tenHor", ".", "shape", "[", "3", "]", "]", ")", "\n", "\n", "if", "tenIn", ".", "is_cuda", "==", "True", ":", "\n", "            ", "cuda_launch", "(", "cuda_kernel", "(", "'sepconv_out'", ",", "'''\n                extern \"C\" __global__ void __launch_bounds__(512) sepconv_out(\n                    const int n,\n                    const {{type}}* __restrict__ tenIn,\n                    const {{type}}* __restrict__ tenVer,\n                    const {{type}}* __restrict__ tenHor,\n                    {{type}}* __restrict__ tenOut\n                ) { for (int intIndex = (blockIdx.x * blockDim.x) + threadIdx.x; intIndex < n; intIndex += blockDim.x * gridDim.x) {\n                    const int intN = ( intIndex / SIZE_3(tenOut) / SIZE_2(tenOut) / SIZE_1(tenOut) ) % SIZE_0(tenOut);\n                    const int intC = ( intIndex / SIZE_3(tenOut) / SIZE_2(tenOut)                  ) % SIZE_1(tenOut);\n                    const int intY = ( intIndex / SIZE_3(tenOut)                                   ) % SIZE_2(tenOut);\n                    const int intX = ( intIndex                                                    ) % SIZE_3(tenOut);\n\n                    {{type}} fltOut = 0.0;\n\n                    {{type}} fltKahanc = 0.0;\n                    {{type}} fltKahany = 0.0;\n                    {{type}} fltKahant = 0.0;\n\n                    for (int intFy = 0; intFy < SIZE_1(tenVer); intFy += 1) {\n                        for (int intFx = 0; intFx < SIZE_1(tenHor); intFx += 1) {\n                            fltKahany = VALUE_4(tenIn, intN, intC, intY + intFy, intX + intFx) * VALUE_4(tenVer, intN, intFy, intY, intX) * VALUE_4(tenHor, intN, intFx, intY, intX);\n                            fltKahany = fltKahany - fltKahanc;\n                            fltKahant = fltOut + fltKahany;\n                            fltKahanc = (fltKahant - fltOut) - fltKahany;\n                            fltOut = fltKahant;\n                        }\n                    }\n\n                    tenOut[intIndex] = fltOut;\n                } }\n            '''", ",", "{", "\n", "'tenIn'", ":", "tenIn", ",", "\n", "'tenVer'", ":", "tenVer", ",", "\n", "'tenHor'", ":", "tenHor", ",", "\n", "'tenOut'", ":", "tenOut", "\n", "}", ")", ")", "(", "\n", "grid", "=", "tuple", "(", "[", "int", "(", "(", "tenOut", ".", "nelement", "(", ")", "+", "512", "-", "1", ")", "/", "512", ")", ",", "1", ",", "1", "]", ")", ",", "\n", "block", "=", "tuple", "(", "[", "512", ",", "1", ",", "1", "]", ")", ",", "\n", "args", "=", "[", "cuda_int32", "(", "tenOut", ".", "nelement", "(", ")", ")", ",", "tenIn", ".", "data_ptr", "(", ")", ",", "tenVer", ".", "data_ptr", "(", ")", ",", "tenHor", ".", "data_ptr", "(", ")", ",", "tenOut", ".", "data_ptr", "(", ")", "]", ",", "\n", "stream", "=", "collections", ".", "namedtuple", "(", "'Stream'", ",", "'ptr'", ")", "(", "torch", ".", "cuda", ".", "current_stream", "(", ")", ".", "cuda_stream", ")", "\n", ")", "\n", "\n", "", "elif", "tenIn", ".", "is_cuda", "!=", "True", ":", "\n", "            ", "assert", "(", "False", ")", "\n", "\n", "# end", "\n", "\n", "", "self", ".", "save_for_backward", "(", "tenIn", ",", "tenVer", ",", "tenHor", ")", "\n", "\n", "return", "tenOut", "\n", "# end", "\n"]], "home.repos.pwc.inspect_result.sniklaus_sepconv-slomo.None.sepconv.sepconv_func.backward": [[292, 467], ["tenOutgrad.contiguous.contiguous.contiguous", "tenIn.new_empty", "tenVer.new_empty", "tenHor.new_empty", "sepconv.cuda_launch", "sepconv.cuda_launch", "sepconv.cuda_launch", "sepconv.cuda_kernel", "tuple", "tuple", "sepconv.cuda_kernel", "tuple", "tuple", "sepconv.cuda_kernel", "tuple", "tuple", "sepconv.cuda_int32", "tenIn.data_ptr", "tenVer.data_ptr", "tenHor.data_ptr", "tenOutgrad.contiguous.contiguous.data_ptr", "tenIngrad.data_ptr", "collections.namedtuple", "sepconv.cuda_int32", "tenIn.data_ptr", "tenVer.data_ptr", "tenHor.data_ptr", "tenOutgrad.contiguous.contiguous.data_ptr", "tenVergrad.data_ptr", "collections.namedtuple", "sepconv.cuda_int32", "tenIn.data_ptr", "tenVer.data_ptr", "tenHor.data_ptr", "tenOutgrad.contiguous.contiguous.data_ptr", "tenHorgrad.data_ptr", "collections.namedtuple", "int", "tenIngrad.nelement", "torch.cuda.current_stream", "int", "tenVergrad.nelement", "torch.cuda.current_stream", "int", "tenHorgrad.nelement", "torch.cuda.current_stream", "tenIngrad.nelement", "tenVergrad.nelement", "tenHorgrad.nelement"], "methods", ["home.repos.pwc.inspect_result.sniklaus_sepconv-slomo.None.sepconv.cuda_launch", "home.repos.pwc.inspect_result.sniklaus_sepconv-slomo.None.sepconv.cuda_launch", "home.repos.pwc.inspect_result.sniklaus_sepconv-slomo.None.sepconv.cuda_launch", "home.repos.pwc.inspect_result.sniklaus_sepconv-slomo.None.sepconv.cuda_kernel", "home.repos.pwc.inspect_result.sniklaus_sepconv-slomo.None.sepconv.cuda_kernel", "home.repos.pwc.inspect_result.sniklaus_sepconv-slomo.None.sepconv.cuda_kernel", "home.repos.pwc.inspect_result.sniklaus_sepconv-slomo.None.sepconv.cuda_int32", "home.repos.pwc.inspect_result.sniklaus_sepconv-slomo.None.sepconv.cuda_int32", "home.repos.pwc.inspect_result.sniklaus_sepconv-slomo.None.sepconv.cuda_int32"], ["", "@", "staticmethod", "\n", "@", "torch", ".", "cuda", ".", "amp", ".", "custom_bwd", "\n", "def", "backward", "(", "self", ",", "tenOutgrad", ")", ":", "\n", "        ", "tenIn", ",", "tenVer", ",", "tenHor", "=", "self", ".", "saved_tensors", "\n", "\n", "tenOutgrad", "=", "tenOutgrad", ".", "contiguous", "(", ")", ";", "assert", "(", "tenOutgrad", ".", "is_cuda", "==", "True", ")", "\n", "\n", "tenIngrad", "=", "tenIn", ".", "new_empty", "(", "[", "tenIn", ".", "shape", "[", "0", "]", ",", "tenIn", ".", "shape", "[", "1", "]", ",", "tenIn", ".", "shape", "[", "2", "]", ",", "tenIn", ".", "shape", "[", "3", "]", "]", ")", "if", "self", ".", "needs_input_grad", "[", "0", "]", "==", "True", "else", "None", "\n", "tenVergrad", "=", "tenVer", ".", "new_empty", "(", "[", "tenVer", ".", "shape", "[", "0", "]", ",", "tenVer", ".", "shape", "[", "1", "]", ",", "tenVer", ".", "shape", "[", "2", "]", ",", "tenVer", ".", "shape", "[", "3", "]", "]", ")", "if", "self", ".", "needs_input_grad", "[", "1", "]", "==", "True", "else", "None", "\n", "tenHorgrad", "=", "tenHor", ".", "new_empty", "(", "[", "tenHor", ".", "shape", "[", "0", "]", ",", "tenHor", ".", "shape", "[", "1", "]", ",", "tenHor", ".", "shape", "[", "2", "]", ",", "tenHor", ".", "shape", "[", "3", "]", "]", ")", "if", "self", ".", "needs_input_grad", "[", "2", "]", "==", "True", "else", "None", "\n", "\n", "if", "tenIngrad", "is", "not", "None", ":", "\n", "            ", "cuda_launch", "(", "cuda_kernel", "(", "'sepconv_ingrad'", ",", "'''\n                extern \"C\" __global__ void __launch_bounds__(512) sepconv_ingrad(\n                    const int n,\n                    const {{type}}* __restrict__ tenIn,\n                    const {{type}}* __restrict__ tenVer,\n                    const {{type}}* __restrict__ tenHor,\n                    const {{type}}* __restrict__ tenOutgrad,\n                    {{type}}* __restrict__ tenIngrad,\n                    {{type}}* __restrict__ tenVergrad,\n                    {{type}}* __restrict__ tenHorgrad\n                ) { for (int intIndex = (blockIdx.x * blockDim.x) + threadIdx.x; intIndex < n; intIndex += blockDim.x * gridDim.x) {\n                    const int intN = ( intIndex / SIZE_3(tenIngrad) / SIZE_2(tenIngrad) / SIZE_1(tenIngrad) ) % SIZE_0(tenIngrad);\n                    const int intC = ( intIndex / SIZE_3(tenIngrad) / SIZE_2(tenIngrad)                     ) % SIZE_1(tenIngrad);\n                    const int intY = ( intIndex / SIZE_3(tenIngrad)                                         ) % SIZE_2(tenIngrad);\n                    const int intX = ( intIndex                                                             ) % SIZE_3(tenIngrad);\n\n                    {{type}} fltIngrad = 0.0;\n\n                    {{type}} fltKahanc = 0.0;\n                    {{type}} fltKahany = 0.0;\n                    {{type}} fltKahant = 0.0;\n\n                    for (int intFy = 0; intFy < SIZE_1(tenVer); intFy += 1) {\n                        int intKy = intY + intFy - (SIZE_1(tenVer) - 1);\n\n                        if (intKy < 0) { continue; }\n                        if (intKy >= SIZE_2(tenVer)) { continue; }\n\n                        for (int intFx = 0; intFx < SIZE_1(tenHor); intFx += 1) {\n                            int intKx = intX + intFx - (SIZE_1(tenHor) - 1);\n\n                            if (intKx < 0) { continue; }\n                            if (intKx >= SIZE_3(tenHor)) { continue; }\n\n                            fltKahany = VALUE_4(tenVer, intN, (SIZE_1(tenVer) - 1) - intFy, intKy, intKx) * VALUE_4(tenHor, intN, (SIZE_1(tenHor) - 1) - intFx, intKy, intKx) * VALUE_4(tenOutgrad, intN, intC, intKy, intKx);\n                            fltKahany = fltKahany - fltKahanc;\n                            fltKahant = fltIngrad + fltKahany;\n                            fltKahanc = (fltKahant - fltIngrad) - fltKahany;\n                            fltIngrad = fltKahant;\n                        }\n                    }\n\n                    tenIngrad[intIndex] = fltIngrad;\n                } }\n            '''", ",", "{", "\n", "'tenIn'", ":", "tenIn", ",", "\n", "'tenVer'", ":", "tenVer", ",", "\n", "'tenHor'", ":", "tenHor", ",", "\n", "'tenOutgrad'", ":", "tenOutgrad", ",", "\n", "'tenIngrad'", ":", "tenIngrad", ",", "\n", "'tenVergrad'", ":", "tenVergrad", ",", "\n", "'tenHorgrad'", ":", "tenHorgrad", "\n", "}", ")", ")", "(", "\n", "grid", "=", "tuple", "(", "[", "int", "(", "(", "tenIngrad", ".", "nelement", "(", ")", "+", "512", "-", "1", ")", "/", "512", ")", ",", "1", ",", "1", "]", ")", ",", "\n", "block", "=", "tuple", "(", "[", "512", ",", "1", ",", "1", "]", ")", ",", "\n", "args", "=", "[", "cuda_int32", "(", "tenIngrad", ".", "nelement", "(", ")", ")", ",", "tenIn", ".", "data_ptr", "(", ")", ",", "tenVer", ".", "data_ptr", "(", ")", ",", "tenHor", ".", "data_ptr", "(", ")", ",", "tenOutgrad", ".", "data_ptr", "(", ")", ",", "tenIngrad", ".", "data_ptr", "(", ")", ",", "None", ",", "None", "]", ",", "\n", "stream", "=", "collections", ".", "namedtuple", "(", "'Stream'", ",", "'ptr'", ")", "(", "torch", ".", "cuda", ".", "current_stream", "(", ")", ".", "cuda_stream", ")", "\n", ")", "\n", "# end", "\n", "\n", "", "if", "tenVergrad", "is", "not", "None", ":", "\n", "            ", "cuda_launch", "(", "cuda_kernel", "(", "'sepconv_vergrad'", ",", "'''\n                extern \"C\" __global__ void __launch_bounds__(512) sepconv_vergrad(\n                    const int n,\n                    const {{type}}* __restrict__ tenIn,\n                    const {{type}}* __restrict__ tenVer,\n                    const {{type}}* __restrict__ tenHor,\n                    const {{type}}* __restrict__ tenOutgrad,\n                    {{type}}* __restrict__ tenIngrad,\n                    {{type}}* __restrict__ tenVergrad,\n                    {{type}}* __restrict__ tenHorgrad\n                ) { for (int intIndex = (blockIdx.x * blockDim.x) + threadIdx.x; intIndex < n; intIndex += blockDim.x * gridDim.x) {\n                    const int intN = ( intIndex / SIZE_3(tenVergrad) / SIZE_2(tenVergrad) / SIZE_1(tenVergrad) ) % SIZE_0(tenVergrad);\n                    const int intC = ( intIndex / SIZE_3(tenVergrad) / SIZE_2(tenVergrad)                      ) % SIZE_1(tenVergrad);\n                    const int intY = ( intIndex / SIZE_3(tenVergrad)                                           ) % SIZE_2(tenVergrad);\n                    const int intX = ( intIndex                                                                ) % SIZE_3(tenVergrad);\n\n                    {{type}} fltVergrad = 0.0;\n\n                    {{type}} fltKahanc = 0.0;\n                    {{type}} fltKahany = 0.0;\n                    {{type}} fltKahant = 0.0;\n\n                    for (int intI = 0; intI < SIZE_1(tenIn); intI += 1) {\n                        for (int intFx = 0; intFx < SIZE_1(tenHor); intFx += 1) {\n                            fltKahany = VALUE_4(tenHor, intN, intFx, intY, intX) * VALUE_4(tenIn, intN, intI, intY + intC, intX + intFx) * VALUE_4(tenOutgrad, intN, intI, intY, intX);\n                            fltKahany = fltKahany - fltKahanc;\n                            fltKahant = fltVergrad + fltKahany;\n                            fltKahanc = (fltKahant - fltVergrad) - fltKahany;\n                            fltVergrad = fltKahant;\n                        }\n                    }\n\n                    tenVergrad[intIndex] = fltVergrad;\n                } }\n            '''", ",", "{", "\n", "'tenIn'", ":", "tenIn", ",", "\n", "'tenVer'", ":", "tenVer", ",", "\n", "'tenHor'", ":", "tenHor", ",", "\n", "'tenOutgrad'", ":", "tenOutgrad", ",", "\n", "'tenIngrad'", ":", "tenIngrad", ",", "\n", "'tenVergrad'", ":", "tenVergrad", ",", "\n", "'tenHorgrad'", ":", "tenHorgrad", "\n", "}", ")", ")", "(", "\n", "grid", "=", "tuple", "(", "[", "int", "(", "(", "tenVergrad", ".", "nelement", "(", ")", "+", "512", "-", "1", ")", "/", "512", ")", ",", "1", ",", "1", "]", ")", ",", "\n", "block", "=", "tuple", "(", "[", "512", ",", "1", ",", "1", "]", ")", ",", "\n", "args", "=", "[", "cuda_int32", "(", "tenVergrad", ".", "nelement", "(", ")", ")", ",", "tenIn", ".", "data_ptr", "(", ")", ",", "tenVer", ".", "data_ptr", "(", ")", ",", "tenHor", ".", "data_ptr", "(", ")", ",", "tenOutgrad", ".", "data_ptr", "(", ")", ",", "None", ",", "tenVergrad", ".", "data_ptr", "(", ")", ",", "None", "]", ",", "\n", "stream", "=", "collections", ".", "namedtuple", "(", "'Stream'", ",", "'ptr'", ")", "(", "torch", ".", "cuda", ".", "current_stream", "(", ")", ".", "cuda_stream", ")", "\n", ")", "\n", "# end", "\n", "\n", "", "if", "tenHorgrad", "is", "not", "None", ":", "\n", "            ", "cuda_launch", "(", "cuda_kernel", "(", "'sepconv_horgrad'", ",", "'''\n                extern \"C\" __global__ void __launch_bounds__(512) sepconv_horgrad(\n                    const int n,\n                    const {{type}}* __restrict__ tenIn,\n                    const {{type}}* __restrict__ tenVer,\n                    const {{type}}* __restrict__ tenHor,\n                    const {{type}}* __restrict__ tenOutgrad,\n                    {{type}}* __restrict__ tenIngrad,\n                    {{type}}* __restrict__ tenVergrad,\n                    {{type}}* __restrict__ tenHorgrad\n                ) { for (int intIndex = (blockIdx.x * blockDim.x) + threadIdx.x; intIndex < n; intIndex += blockDim.x * gridDim.x) {\n                    const int intN = ( intIndex / SIZE_3(tenHorgrad) / SIZE_2(tenHorgrad) / SIZE_1(tenHorgrad) ) % SIZE_0(tenHorgrad);\n                    const int intC = ( intIndex / SIZE_3(tenHorgrad) / SIZE_2(tenHorgrad)                      ) % SIZE_1(tenHorgrad);\n                    const int intY = ( intIndex / SIZE_3(tenHorgrad)                                           ) % SIZE_2(tenHorgrad);\n                    const int intX = ( intIndex                                                                ) % SIZE_3(tenHorgrad);\n\n                    {{type}} fltHorgrad = 0.0;\n\n                    {{type}} fltKahanc = 0.0;\n                    {{type}} fltKahany = 0.0;\n                    {{type}} fltKahant = 0.0;\n\n                    for (int intI = 0; intI < SIZE_1(tenIn); intI += 1) {\n                        for (int intFy = 0; intFy < SIZE_1(tenVer); intFy += 1) {\n                            fltKahany = VALUE_4(tenVer, intN, intFy, intY, intX) * VALUE_4(tenIn, intN, intI, intY + intFy, intX + intC) * VALUE_4(tenOutgrad, intN, intI, intY, intX);\n                            fltKahany = fltKahany - fltKahanc;\n                            fltKahant = fltHorgrad + fltKahany;\n                            fltKahanc = (fltKahant - fltHorgrad) - fltKahany;\n                            fltHorgrad = fltKahant;\n                        }\n                    }\n\n                    tenHorgrad[intIndex] = fltHorgrad;\n                } }\n            '''", ",", "{", "\n", "'tenIn'", ":", "tenIn", ",", "\n", "'tenVer'", ":", "tenVer", ",", "\n", "'tenHor'", ":", "tenHor", ",", "\n", "'tenOutgrad'", ":", "tenOutgrad", ",", "\n", "'tenIngrad'", ":", "tenIngrad", ",", "\n", "'tenVergrad'", ":", "tenVergrad", ",", "\n", "'tenHorgrad'", ":", "tenHorgrad", "\n", "}", ")", ")", "(", "\n", "grid", "=", "tuple", "(", "[", "int", "(", "(", "tenHorgrad", ".", "nelement", "(", ")", "+", "512", "-", "1", ")", "/", "512", ")", ",", "1", ",", "1", "]", ")", ",", "\n", "block", "=", "tuple", "(", "[", "512", ",", "1", ",", "1", "]", ")", ",", "\n", "args", "=", "[", "cuda_int32", "(", "tenHorgrad", ".", "nelement", "(", ")", ")", ",", "tenIn", ".", "data_ptr", "(", ")", ",", "tenVer", ".", "data_ptr", "(", ")", ",", "tenHor", ".", "data_ptr", "(", ")", ",", "tenOutgrad", ".", "data_ptr", "(", ")", ",", "None", ",", "None", ",", "tenHorgrad", ".", "data_ptr", "(", ")", "]", ",", "\n", "stream", "=", "collections", ".", "namedtuple", "(", "'Stream'", ",", "'ptr'", ")", "(", "torch", ".", "cuda", ".", "current_stream", "(", ")", ".", "cuda_stream", ")", "\n", ")", "\n", "# end", "\n", "\n", "", "return", "tenIngrad", ",", "tenVergrad", ",", "tenHorgrad", "\n", "# end", "\n"]], "home.repos.pwc.inspect_result.sniklaus_sepconv-slomo.None.sepconv.cuda_int32": [[17, 19], ["cupy.int32"], "function", ["None"], ["def", "cuda_int32", "(", "intIn", ":", "int", ")", ":", "\n", "    ", "return", "cupy", ".", "int32", "(", "intIn", ")", "\n", "# end", "\n"]], "home.repos.pwc.inspect_result.sniklaus_sepconv-slomo.None.sepconv.cuda_float32": [[22, 24], ["cupy.float32"], "function", ["None"], ["", "def", "cuda_float32", "(", "fltIn", ":", "float", ")", ":", "\n", "    ", "return", "cupy", ".", "float32", "(", "fltIn", ")", "\n", "# end", "\n"]], "home.repos.pwc.inspect_result.sniklaus_sepconv-slomo.None.sepconv.cuda_kernel": [[27, 216], ["torch.cuda.get_device_name", "re.search", "int", "re.search.group", "objVariables[].size", "strKernel.replace.replace", "re.search", "int", "strKernel[].split", "objVariables[].stride", "range", "strKernel.replace.replace", "re.search", "int", "strKernel[].split", "objVariables[].stride", "range", "strKernel.replace.replace", "type", "str", "re.search.group", "re.search.group", "str", "re.search.span", "re.search.span", "re.search.group", "strIndex.append", "re.search.span", "re.search.span", "re.search.group", "strIndex.append", "type", "str", "type", "strKernel.replace.replace", "len", "len", "type", "str", "str", "type", "strKernel.replace.replace", "intSizes[].item", "str.join", "str.join", "type", "str", "type", "strKernel.replace.replace", "torch.is_tensor", "str", "str", "type", "str", "str", "str", "str", "type", "strKernel.replace.replace", "str", "str", "objValue.stride", "print", "strKernel.replace.replace", "strArgs[].replace().replace().strip", "intStrides[].item", "strArgs[].replace().replace().strip", "intStrides[].item", "type", "type", "strKernel.replace.replace", "torch.is_tensor", "torch.is_tensor", "type", "strKernel.replace.replace", "strArgs[].replace().replace", "strArgs[].replace().replace", "type", "strKernel.replace.replace", "type", "strKernel.replace.replace", "strArgs[].replace", "strArgs[].replace", "type", "strKernel.replace.replace", "type", "type", "print", "print", "type"], "function", ["None"], ["", "def", "cuda_kernel", "(", "strFunction", ":", "str", ",", "strKernel", ":", "str", ",", "objVariables", ":", "typing", ".", "Dict", ")", ":", "\n", "    ", "if", "'device'", "not", "in", "objCudacache", ":", "\n", "        ", "objCudacache", "[", "'device'", "]", "=", "torch", ".", "cuda", ".", "get_device_name", "(", ")", "\n", "# end", "\n", "\n", "", "strKey", "=", "strFunction", "\n", "\n", "for", "strVariable", "in", "objVariables", ":", "\n", "        ", "objValue", "=", "objVariables", "[", "strVariable", "]", "\n", "\n", "strKey", "+=", "strVariable", "\n", "\n", "if", "objValue", "is", "None", ":", "\n", "            ", "continue", "\n", "\n", "", "elif", "type", "(", "objValue", ")", "==", "int", ":", "\n", "            ", "strKey", "+=", "str", "(", "objValue", ")", "\n", "\n", "", "elif", "type", "(", "objValue", ")", "==", "float", ":", "\n", "            ", "strKey", "+=", "str", "(", "objValue", ")", "\n", "\n", "", "elif", "type", "(", "objValue", ")", "==", "bool", ":", "\n", "            ", "strKey", "+=", "str", "(", "objValue", ")", "\n", "\n", "", "elif", "type", "(", "objValue", ")", "==", "str", ":", "\n", "            ", "strKey", "+=", "objValue", "\n", "\n", "", "elif", "type", "(", "objValue", ")", "==", "torch", ".", "Tensor", ":", "\n", "            ", "strKey", "+=", "str", "(", "objValue", ".", "dtype", ")", "\n", "strKey", "+=", "str", "(", "objValue", ".", "shape", ")", "\n", "strKey", "+=", "str", "(", "objValue", ".", "stride", "(", ")", ")", "\n", "\n", "", "elif", "True", ":", "\n", "            ", "print", "(", "strVariable", ",", "type", "(", "objValue", ")", ")", "\n", "assert", "(", "False", ")", "\n", "\n", "# end", "\n", "# end", "\n", "\n", "", "", "strKey", "+=", "objCudacache", "[", "'device'", "]", "\n", "\n", "if", "strKey", "not", "in", "objCudacache", ":", "\n", "        ", "for", "strVariable", "in", "objVariables", ":", "\n", "            ", "objValue", "=", "objVariables", "[", "strVariable", "]", "\n", "\n", "if", "objValue", "is", "None", ":", "\n", "                ", "continue", "\n", "\n", "", "elif", "type", "(", "objValue", ")", "==", "int", ":", "\n", "                ", "strKernel", "=", "strKernel", ".", "replace", "(", "'{{'", "+", "strVariable", "+", "'}}'", ",", "str", "(", "objValue", ")", ")", "\n", "\n", "", "elif", "type", "(", "objValue", ")", "==", "float", ":", "\n", "                ", "strKernel", "=", "strKernel", ".", "replace", "(", "'{{'", "+", "strVariable", "+", "'}}'", ",", "str", "(", "objValue", ")", ")", "\n", "\n", "", "elif", "type", "(", "objValue", ")", "==", "bool", ":", "\n", "                ", "strKernel", "=", "strKernel", ".", "replace", "(", "'{{'", "+", "strVariable", "+", "'}}'", ",", "str", "(", "objValue", ")", ")", "\n", "\n", "", "elif", "type", "(", "objValue", ")", "==", "str", ":", "\n", "                ", "strKernel", "=", "strKernel", ".", "replace", "(", "'{{'", "+", "strVariable", "+", "'}}'", ",", "objValue", ")", "\n", "\n", "", "elif", "type", "(", "objValue", ")", "==", "torch", ".", "Tensor", "and", "objValue", ".", "dtype", "==", "torch", ".", "uint8", ":", "\n", "                ", "strKernel", "=", "strKernel", ".", "replace", "(", "'{{type}}'", ",", "'unsigned char'", ")", "\n", "\n", "", "elif", "type", "(", "objValue", ")", "==", "torch", ".", "Tensor", "and", "objValue", ".", "dtype", "==", "torch", ".", "float16", ":", "\n", "                ", "strKernel", "=", "strKernel", ".", "replace", "(", "'{{type}}'", ",", "'half'", ")", "\n", "\n", "", "elif", "type", "(", "objValue", ")", "==", "torch", ".", "Tensor", "and", "objValue", ".", "dtype", "==", "torch", ".", "float32", ":", "\n", "                ", "strKernel", "=", "strKernel", ".", "replace", "(", "'{{type}}'", ",", "'float'", ")", "\n", "\n", "", "elif", "type", "(", "objValue", ")", "==", "torch", ".", "Tensor", "and", "objValue", ".", "dtype", "==", "torch", ".", "float64", ":", "\n", "                ", "strKernel", "=", "strKernel", ".", "replace", "(", "'{{type}}'", ",", "'double'", ")", "\n", "\n", "", "elif", "type", "(", "objValue", ")", "==", "torch", ".", "Tensor", "and", "objValue", ".", "dtype", "==", "torch", ".", "int32", ":", "\n", "                ", "strKernel", "=", "strKernel", ".", "replace", "(", "'{{type}}'", ",", "'int'", ")", "\n", "\n", "", "elif", "type", "(", "objValue", ")", "==", "torch", ".", "Tensor", "and", "objValue", ".", "dtype", "==", "torch", ".", "int64", ":", "\n", "                ", "strKernel", "=", "strKernel", ".", "replace", "(", "'{{type}}'", ",", "'long'", ")", "\n", "\n", "", "elif", "type", "(", "objValue", ")", "==", "torch", ".", "Tensor", ":", "\n", "                ", "print", "(", "strVariable", ",", "objValue", ".", "dtype", ")", "\n", "assert", "(", "False", ")", "\n", "\n", "", "elif", "True", ":", "\n", "                ", "print", "(", "strVariable", ",", "type", "(", "objValue", ")", ")", "\n", "assert", "(", "False", ")", "\n", "\n", "# end", "\n", "# end", "\n", "\n", "", "", "while", "True", ":", "\n", "            ", "objMatch", "=", "re", ".", "search", "(", "'(SIZE_)([0-4])(\\()([^\\)]*)(\\))'", ",", "strKernel", ")", "\n", "\n", "if", "objMatch", "is", "None", ":", "\n", "                ", "break", "\n", "# end", "\n", "\n", "", "intArg", "=", "int", "(", "objMatch", ".", "group", "(", "2", ")", ")", "\n", "\n", "strTensor", "=", "objMatch", ".", "group", "(", "4", ")", "\n", "intSizes", "=", "objVariables", "[", "strTensor", "]", ".", "size", "(", ")", "\n", "\n", "strKernel", "=", "strKernel", ".", "replace", "(", "objMatch", ".", "group", "(", ")", ",", "str", "(", "intSizes", "[", "intArg", "]", "if", "torch", ".", "is_tensor", "(", "intSizes", "[", "intArg", "]", ")", "==", "False", "else", "intSizes", "[", "intArg", "]", ".", "item", "(", ")", ")", ")", "\n", "# end", "\n", "\n", "", "while", "True", ":", "\n", "            ", "objMatch", "=", "re", ".", "search", "(", "'(OFFSET_)([0-4])(\\()'", ",", "strKernel", ")", "\n", "\n", "if", "objMatch", "is", "None", ":", "\n", "                ", "break", "\n", "# end", "\n", "\n", "", "intStart", "=", "objMatch", ".", "span", "(", ")", "[", "1", "]", "\n", "intStop", "=", "objMatch", ".", "span", "(", ")", "[", "1", "]", "\n", "intParentheses", "=", "1", "\n", "\n", "while", "True", ":", "\n", "                ", "intParentheses", "+=", "1", "if", "strKernel", "[", "intStop", "]", "==", "'('", "else", "0", "\n", "intParentheses", "-=", "1", "if", "strKernel", "[", "intStop", "]", "==", "')'", "else", "0", "\n", "\n", "if", "intParentheses", "==", "0", ":", "\n", "                    ", "break", "\n", "# end", "\n", "\n", "", "intStop", "+=", "1", "\n", "# end", "\n", "\n", "", "intArgs", "=", "int", "(", "objMatch", ".", "group", "(", "2", ")", ")", "\n", "strArgs", "=", "strKernel", "[", "intStart", ":", "intStop", "]", ".", "split", "(", "','", ")", "\n", "\n", "assert", "(", "intArgs", "==", "len", "(", "strArgs", ")", "-", "1", ")", "\n", "\n", "strTensor", "=", "strArgs", "[", "0", "]", "\n", "intStrides", "=", "objVariables", "[", "strTensor", "]", ".", "stride", "(", ")", "\n", "\n", "strIndex", "=", "[", "]", "\n", "\n", "for", "intArg", "in", "range", "(", "intArgs", ")", ":", "\n", "                ", "strIndex", ".", "append", "(", "'(('", "+", "strArgs", "[", "intArg", "+", "1", "]", ".", "replace", "(", "'{'", ",", "'('", ")", ".", "replace", "(", "'}'", ",", "')'", ")", ".", "strip", "(", ")", "+", "')*'", "+", "str", "(", "intStrides", "[", "intArg", "]", "if", "torch", ".", "is_tensor", "(", "intStrides", "[", "intArg", "]", ")", "==", "False", "else", "intStrides", "[", "intArg", "]", ".", "item", "(", ")", ")", "+", "')'", ")", "\n", "# end", "\n", "\n", "", "strKernel", "=", "strKernel", ".", "replace", "(", "'OFFSET_'", "+", "str", "(", "intArgs", ")", "+", "'('", "+", "strKernel", "[", "intStart", ":", "intStop", "]", "+", "')'", ",", "'('", "+", "str", ".", "join", "(", "'+'", ",", "strIndex", ")", "+", "')'", ")", "\n", "# end", "\n", "\n", "", "while", "True", ":", "\n", "            ", "objMatch", "=", "re", ".", "search", "(", "'(VALUE_)([0-4])(\\()'", ",", "strKernel", ")", "\n", "\n", "if", "objMatch", "is", "None", ":", "\n", "                ", "break", "\n", "# end", "\n", "\n", "", "intStart", "=", "objMatch", ".", "span", "(", ")", "[", "1", "]", "\n", "intStop", "=", "objMatch", ".", "span", "(", ")", "[", "1", "]", "\n", "intParentheses", "=", "1", "\n", "\n", "while", "True", ":", "\n", "                ", "intParentheses", "+=", "1", "if", "strKernel", "[", "intStop", "]", "==", "'('", "else", "0", "\n", "intParentheses", "-=", "1", "if", "strKernel", "[", "intStop", "]", "==", "')'", "else", "0", "\n", "\n", "if", "intParentheses", "==", "0", ":", "\n", "                    ", "break", "\n", "# end", "\n", "\n", "", "intStop", "+=", "1", "\n", "# end", "\n", "\n", "", "intArgs", "=", "int", "(", "objMatch", ".", "group", "(", "2", ")", ")", "\n", "strArgs", "=", "strKernel", "[", "intStart", ":", "intStop", "]", ".", "split", "(", "','", ")", "\n", "\n", "assert", "(", "intArgs", "==", "len", "(", "strArgs", ")", "-", "1", ")", "\n", "\n", "strTensor", "=", "strArgs", "[", "0", "]", "\n", "intStrides", "=", "objVariables", "[", "strTensor", "]", ".", "stride", "(", ")", "\n", "\n", "strIndex", "=", "[", "]", "\n", "\n", "for", "intArg", "in", "range", "(", "intArgs", ")", ":", "\n", "                ", "strIndex", ".", "append", "(", "'(('", "+", "strArgs", "[", "intArg", "+", "1", "]", ".", "replace", "(", "'{'", ",", "'('", ")", ".", "replace", "(", "'}'", ",", "')'", ")", ".", "strip", "(", ")", "+", "')*'", "+", "str", "(", "intStrides", "[", "intArg", "]", "if", "torch", ".", "is_tensor", "(", "intStrides", "[", "intArg", "]", ")", "==", "False", "else", "intStrides", "[", "intArg", "]", ".", "item", "(", ")", ")", "+", "')'", ")", "\n", "# end", "\n", "\n", "", "strKernel", "=", "strKernel", ".", "replace", "(", "'VALUE_'", "+", "str", "(", "intArgs", ")", "+", "'('", "+", "strKernel", "[", "intStart", ":", "intStop", "]", "+", "')'", ",", "strTensor", "+", "'['", "+", "str", ".", "join", "(", "'+'", ",", "strIndex", ")", "+", "']'", ")", "\n", "# end", "\n", "\n", "", "objCudacache", "[", "strKey", "]", "=", "{", "\n", "'strFunction'", ":", "strFunction", ",", "\n", "'strKernel'", ":", "strKernel", "\n", "}", "\n", "# end", "\n", "\n", "", "return", "strKey", "\n", "# end", "\n"]], "home.repos.pwc.inspect_result.sniklaus_sepconv-slomo.None.sepconv.cuda_launch": [[219, 226], ["cupy.memoize", "cupy.cuda.compile_with_cache().get_function", "cupy.cuda.compile_with_cache", "tuple"], "function", ["None"], ["", "@", "cupy", ".", "memoize", "(", "for_each_device", "=", "True", ")", "\n", "def", "cuda_launch", "(", "strKey", ":", "str", ")", ":", "\n", "    ", "if", "'CUDA_HOME'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "'CUDA_HOME'", "]", "=", "'/usr/local/cuda/'", "\n", "# end", "\n", "\n", "", "return", "cupy", ".", "cuda", ".", "compile_with_cache", "(", "objCudacache", "[", "strKey", "]", "[", "'strKernel'", "]", ",", "tuple", "(", "[", "'-I '", "+", "os", ".", "environ", "[", "'CUDA_HOME'", "]", ",", "'-I '", "+", "os", ".", "environ", "[", "'CUDA_HOME'", "]", "+", "'/include'", "]", ")", ")", ".", "get_function", "(", "objCudacache", "[", "strKey", "]", "[", "'strFunction'", "]", ")", "\n", "# end", "\n"]], "home.repos.pwc.inspect_result.sniklaus_sepconv-slomo.None.run.Network.__init__": [[40, 97], ["super().__init__", "run.Network.__init__.Basic"], "methods", ["home.repos.pwc.inspect_result.sniklaus_sepconv-slomo.None.run.Network.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "def", "Basic", "(", "intInput", ",", "intOutput", ")", ":", "\n", "            ", "return", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "intInput", ",", "out_channels", "=", "intOutput", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "intOutput", ",", "out_channels", "=", "intOutput", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "intOutput", ",", "out_channels", "=", "intOutput", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", ")", "\n", "# end", "\n", "\n", "", "def", "Upsample", "(", "intInput", ",", "intOutput", ")", ":", "\n", "            ", "return", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "intOutput", ",", "out_channels", "=", "intOutput", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", ")", "\n", "# end", "\n", "\n", "", "def", "Subnet", "(", ")", ":", "\n", "            ", "return", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "51", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "torch", ".", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "51", ",", "out_channels", "=", "51", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", ")", "\n", "# end", "\n", "\n", "", "self", ".", "netConv1", "=", "Basic", "(", "6", ",", "32", ")", "\n", "self", ".", "netConv2", "=", "Basic", "(", "32", ",", "64", ")", "\n", "self", ".", "netConv3", "=", "Basic", "(", "64", ",", "128", ")", "\n", "self", ".", "netConv4", "=", "Basic", "(", "128", ",", "256", ")", "\n", "self", ".", "netConv5", "=", "Basic", "(", "256", ",", "512", ")", "\n", "\n", "self", ".", "netDeconv5", "=", "Basic", "(", "512", ",", "512", ")", "\n", "self", ".", "netDeconv4", "=", "Basic", "(", "512", ",", "256", ")", "\n", "self", ".", "netDeconv3", "=", "Basic", "(", "256", ",", "128", ")", "\n", "self", ".", "netDeconv2", "=", "Basic", "(", "128", ",", "64", ")", "\n", "\n", "self", ".", "netUpsample5", "=", "Upsample", "(", "512", ",", "512", ")", "\n", "self", ".", "netUpsample4", "=", "Upsample", "(", "256", ",", "256", ")", "\n", "self", ".", "netUpsample3", "=", "Upsample", "(", "128", ",", "128", ")", "\n", "self", ".", "netUpsample2", "=", "Upsample", "(", "64", ",", "64", ")", "\n", "\n", "self", ".", "netVertical1", "=", "Subnet", "(", ")", "\n", "self", ".", "netVertical2", "=", "Subnet", "(", ")", "\n", "self", ".", "netHorizontal1", "=", "Subnet", "(", ")", "\n", "self", ".", "netHorizontal2", "=", "Subnet", "(", ")", "\n", "\n", "self", ".", "load_state_dict", "(", "{", "strKey", ".", "replace", "(", "'module'", ",", "'net'", ")", ":", "tenWeight", "for", "strKey", ",", "tenWeight", "in", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "url", "=", "'http://content.sniklaus.com/sepconv/network-'", "+", "arguments_strModel", "+", "'.pytorch'", ",", "file_name", "=", "'sepconv-'", "+", "arguments_strModel", ")", ".", "items", "(", ")", "}", ")", "\n", "# end", "\n"]], "home.repos.pwc.inspect_result.sniklaus_sepconv-slomo.None.run.Network.forward": [[99, 120], ["run.Network.netConv1", "run.Network.netConv2", "run.Network.netConv3", "run.Network.netConv4", "run.Network.netConv5", "run.Network.netUpsample5", "run.Network.netUpsample4", "run.Network.netUpsample3", "run.Network.netUpsample2", "torch.nn.functional.pad", "torch.nn.functional.pad", "sepconv.sepconv_func.apply", "sepconv.sepconv_func.apply", "torch.cat", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "run.Network.netDeconv5", "run.Network.netDeconv4", "run.Network.netDeconv3", "run.Network.netDeconv2", "run.Network.netVertical1", "run.Network.netHorizontal1", "run.Network.netVertical2", "run.Network.netHorizontal2", "torch.nn.functional.avg_pool2d", "int", "int", "int", "int", "int", "int", "int", "int", "math.floor", "math.floor", "math.floor", "math.floor", "math.floor", "math.floor", "math.floor", "math.floor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "tenOne", ",", "tenTwo", ")", ":", "\n", "        ", "tenConv1", "=", "self", ".", "netConv1", "(", "torch", ".", "cat", "(", "[", "tenOne", ",", "tenTwo", "]", ",", "1", ")", ")", "\n", "tenConv2", "=", "self", ".", "netConv2", "(", "torch", ".", "nn", ".", "functional", ".", "avg_pool2d", "(", "input", "=", "tenConv1", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "count_include_pad", "=", "False", ")", ")", "\n", "tenConv3", "=", "self", ".", "netConv3", "(", "torch", ".", "nn", ".", "functional", ".", "avg_pool2d", "(", "input", "=", "tenConv2", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "count_include_pad", "=", "False", ")", ")", "\n", "tenConv4", "=", "self", ".", "netConv4", "(", "torch", ".", "nn", ".", "functional", ".", "avg_pool2d", "(", "input", "=", "tenConv3", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "count_include_pad", "=", "False", ")", ")", "\n", "tenConv5", "=", "self", ".", "netConv5", "(", "torch", ".", "nn", ".", "functional", ".", "avg_pool2d", "(", "input", "=", "tenConv4", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "count_include_pad", "=", "False", ")", ")", "\n", "\n", "tenDeconv5", "=", "self", ".", "netUpsample5", "(", "self", ".", "netDeconv5", "(", "torch", ".", "nn", ".", "functional", ".", "avg_pool2d", "(", "input", "=", "tenConv5", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "count_include_pad", "=", "False", ")", ")", ")", "\n", "tenDeconv4", "=", "self", ".", "netUpsample4", "(", "self", ".", "netDeconv4", "(", "tenDeconv5", "+", "tenConv5", ")", ")", "\n", "tenDeconv3", "=", "self", ".", "netUpsample3", "(", "self", ".", "netDeconv3", "(", "tenDeconv4", "+", "tenConv4", ")", ")", "\n", "tenDeconv2", "=", "self", ".", "netUpsample2", "(", "self", ".", "netDeconv2", "(", "tenDeconv3", "+", "tenConv3", ")", ")", "\n", "\n", "tenCombine", "=", "tenDeconv2", "+", "tenConv2", "\n", "\n", "tenOne", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "input", "=", "tenOne", ",", "pad", "=", "[", "int", "(", "math", ".", "floor", "(", "51", "/", "2.0", ")", ")", ",", "int", "(", "math", ".", "floor", "(", "51", "/", "2.0", ")", ")", ",", "int", "(", "math", ".", "floor", "(", "51", "/", "2.0", ")", ")", ",", "int", "(", "math", ".", "floor", "(", "51", "/", "2.0", ")", ")", "]", ",", "mode", "=", "'replicate'", ")", "\n", "tenTwo", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "input", "=", "tenTwo", ",", "pad", "=", "[", "int", "(", "math", ".", "floor", "(", "51", "/", "2.0", ")", ")", ",", "int", "(", "math", ".", "floor", "(", "51", "/", "2.0", ")", ")", ",", "int", "(", "math", ".", "floor", "(", "51", "/", "2.0", ")", ")", ",", "int", "(", "math", ".", "floor", "(", "51", "/", "2.0", ")", ")", "]", ",", "mode", "=", "'replicate'", ")", "\n", "\n", "tenDot1", "=", "sepconv", ".", "sepconv_func", ".", "apply", "(", "tenOne", ",", "self", ".", "netVertical1", "(", "tenCombine", ")", ",", "self", ".", "netHorizontal1", "(", "tenCombine", ")", ")", "\n", "tenDot2", "=", "sepconv", ".", "sepconv_func", ".", "apply", "(", "tenTwo", ",", "self", ".", "netVertical2", "(", "tenCombine", ")", ",", "self", ".", "netHorizontal2", "(", "tenCombine", ")", ")", "\n", "\n", "return", "tenDot1", "+", "tenDot2", "\n", "# end", "\n"]], "home.repos.pwc.inspect_result.sniklaus_sepconv-slomo.None.run.estimate": [[127, 172], ["tenOne.cuda().view", "tenTwo.cuda().view", "torch.nn.functional.pad", "torch.nn.functional.pad", "[].cpu", "Network().cuda().eval", "tenOne.cuda", "tenTwo.cuda", "int", "int", "int", "int", "Network().cuda", "math.floor", "math.floor", "math.floor", "math.floor", "torch.nn.functional.pad", "run.Network", "Network().cuda().eval."], "function", ["None"], ["def", "estimate", "(", "tenOne", ",", "tenTwo", ")", ":", "\n", "    ", "global", "netNetwork", "\n", "\n", "if", "netNetwork", "is", "None", ":", "\n", "        ", "netNetwork", "=", "Network", "(", ")", ".", "cuda", "(", ")", ".", "eval", "(", ")", "\n", "# end", "\n", "\n", "", "assert", "(", "tenOne", ".", "shape", "[", "1", "]", "==", "tenTwo", ".", "shape", "[", "1", "]", ")", "\n", "assert", "(", "tenOne", ".", "shape", "[", "2", "]", "==", "tenTwo", ".", "shape", "[", "2", "]", ")", "\n", "\n", "intWidth", "=", "tenOne", ".", "shape", "[", "2", "]", "\n", "intHeight", "=", "tenOne", ".", "shape", "[", "1", "]", "\n", "\n", "assert", "(", "intWidth", "<=", "1280", ")", "# while our approach works with larger images, we do not recommend it unless you are aware of the implications", "\n", "assert", "(", "intHeight", "<=", "720", ")", "# while our approach works with larger images, we do not recommend it unless you are aware of the implications", "\n", "\n", "tenPreprocessedOne", "=", "tenOne", ".", "cuda", "(", ")", ".", "view", "(", "1", ",", "3", ",", "intHeight", ",", "intWidth", ")", "\n", "tenPreprocessedTwo", "=", "tenTwo", ".", "cuda", "(", ")", ".", "view", "(", "1", ",", "3", ",", "intHeight", ",", "intWidth", ")", "\n", "\n", "if", "arguments_strPadding", "==", "'paper'", ":", "\n", "        ", "intPaddingLeft", ",", "intPaddingTop", ",", "intPaddingBottom", ",", "intPaddingRight", "=", "int", "(", "math", ".", "floor", "(", "51", "/", "2.0", ")", ")", ",", "int", "(", "math", ".", "floor", "(", "51", "/", "2.0", ")", ")", ",", "int", "(", "math", ".", "floor", "(", "51", "/", "2.0", ")", ")", ",", "int", "(", "math", ".", "floor", "(", "51", "/", "2.0", ")", ")", "\n", "\n", "", "elif", "arguments_strPadding", "==", "'improved'", ":", "\n", "        ", "intPaddingLeft", ",", "intPaddingTop", ",", "intPaddingBottom", ",", "intPaddingRight", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "\n", "# end", "\n", "\n", "", "intPreprocessedWidth", "=", "intPaddingLeft", "+", "intWidth", "+", "intPaddingRight", "\n", "intPreprocessedHeight", "=", "intPaddingTop", "+", "intHeight", "+", "intPaddingBottom", "\n", "\n", "if", "intPreprocessedWidth", "!=", "(", "(", "intPreprocessedWidth", ">>", "7", ")", "<<", "7", ")", ":", "\n", "        ", "intPreprocessedWidth", "=", "(", "(", "(", "intPreprocessedWidth", ">>", "7", ")", "+", "1", ")", "<<", "7", ")", "# more than necessary", "\n", "# end", "\n", "\n", "", "if", "intPreprocessedHeight", "!=", "(", "(", "intPreprocessedHeight", ">>", "7", ")", "<<", "7", ")", ":", "\n", "        ", "intPreprocessedHeight", "=", "(", "(", "(", "intPreprocessedHeight", ">>", "7", ")", "+", "1", ")", "<<", "7", ")", "# more than necessary", "\n", "# end", "\n", "\n", "", "intPaddingRight", "=", "intPreprocessedWidth", "-", "intWidth", "-", "intPaddingLeft", "\n", "intPaddingBottom", "=", "intPreprocessedHeight", "-", "intHeight", "-", "intPaddingTop", "\n", "\n", "tenPreprocessedOne", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "input", "=", "tenPreprocessedOne", ",", "pad", "=", "[", "intPaddingLeft", ",", "intPaddingRight", ",", "intPaddingTop", ",", "intPaddingBottom", "]", ",", "mode", "=", "'replicate'", ")", "\n", "tenPreprocessedTwo", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "input", "=", "tenPreprocessedTwo", ",", "pad", "=", "[", "intPaddingLeft", ",", "intPaddingRight", ",", "intPaddingTop", ",", "intPaddingBottom", "]", ",", "mode", "=", "'replicate'", ")", "\n", "\n", "return", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "input", "=", "netNetwork", "(", "tenPreprocessedOne", ",", "tenPreprocessedTwo", ")", ",", "pad", "=", "[", "0", "-", "intPaddingLeft", ",", "0", "-", "intPaddingRight", ",", "0", "-", "intPaddingTop", ",", "0", "-", "intPaddingBottom", "]", ",", "mode", "=", "'replicate'", ")", "[", "0", ",", ":", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", "\n", "# end", "\n"]]}